
G474RE-Firmware-FUN5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ea4c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002210  0801ec30  0801ec30  0001fc30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020e40  08020e40  00022e30  2**0
                  CONTENTS
  4 .ARM          00000008  08020e40  08020e40  00021e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020e48  08020e48  00022e30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  08020e48  08020e48  00021e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020e64  08020e64  00021e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000e30  20000000  08020e68  00022000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b7f4  20000e30  08021c98  00022e30  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000c624  08021c98  00023624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022e30  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d5e9  00000000  00000000  00022e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e19  00000000  00000000  00050449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002310  00000000  00000000  00056268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b1e  00000000  00000000  00058578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000305a3  00000000  00000000  0005a096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d818  00000000  00000000  0008a639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012e0fa  00000000  00000000  000b7e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001e5f4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a588  00000000  00000000  001e5fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001f054c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000e30 	.word	0x20000e30
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801ec14 	.word	0x0801ec14

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000e34 	.word	0x20000e34
 800021c:	0801ec14 	.word	0x0801ec14

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000be6:	f000 b9b5 	b.w	8000f54 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f84d 	bl	8000c98 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f840 	bl	8000c98 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f82f 	bl	8000c98 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f821 	bl	8000c98 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	@ 0x30
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f01c fbd5 	bl	801d720 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f76:	4b39      	ldr	r3, [pc, #228]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f7e:	4b37      	ldr	r3, [pc, #220]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f80:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f86:	4b35      	ldr	r3, [pc, #212]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8c:	4b33      	ldr	r3, [pc, #204]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f92:	4b32      	ldr	r3, [pc, #200]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f98:	4b30      	ldr	r3, [pc, #192]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fa4:	4b2d      	ldr	r3, [pc, #180]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000faa:	4b2c      	ldr	r3, [pc, #176]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb6:	4b29      	ldr	r3, [pc, #164]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbe:	4b27      	ldr	r3, [pc, #156]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc4:	4b25      	ldr	r3, [pc, #148]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fca:	4b24      	ldr	r3, [pc, #144]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fd2:	4b22      	ldr	r3, [pc, #136]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000fd8:	4b20      	ldr	r3, [pc, #128]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe0:	481e      	ldr	r0, [pc, #120]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fe2:	f003 f921 	bl	8004228 <HAL_ADC_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000fec:	f002 f966 	bl	80032bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ff4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4818      	ldr	r0, [pc, #96]	@ (800105c <MX_ADC1_Init+0x104>)
 8000ffc:	f004 fcdc 	bl	80059b8 <HAL_ADCEx_MultiModeConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001006:	f002 f959 	bl	80032bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <MX_ADC1_Init+0x108>)
 800100c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100e:	2306      	movs	r3, #6
 8001010:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001012:	2307      	movs	r3, #7
 8001014:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001016:	237f      	movs	r3, #127	@ 0x7f
 8001018:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800101a:	2304      	movs	r3, #4
 800101c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	4619      	mov	r1, r3
 8001026:	480d      	ldr	r0, [pc, #52]	@ (800105c <MX_ADC1_Init+0x104>)
 8001028:	f003 fe16 	bl	8004c58 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001032:	f002 f943 	bl	80032bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <MX_ADC1_Init+0x10c>)
 8001038:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800103a:	230c      	movs	r3, #12
 800103c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	4619      	mov	r1, r3
 8001042:	4806      	ldr	r0, [pc, #24]	@ (800105c <MX_ADC1_Init+0x104>)
 8001044:	f003 fe08 	bl	8004c58 <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800104e:	f002 f935 	bl	80032bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	3730      	adds	r7, #48	@ 0x30
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000e4c 	.word	0x20000e4c
 8001060:	04300002 	.word	0x04300002
 8001064:	08600004 	.word	0x08600004

08001068 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b09e      	sub	sp, #120	@ 0x78
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	2254      	movs	r2, #84	@ 0x54
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f01c fb49 	bl	801d720 <memset>
  if(adcHandle->Instance==ADC1)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001096:	d167      	bne.n	8001168 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001098:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800109c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800109e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010a2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4618      	mov	r0, r3
 80010aa:	f007 f941 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010b4:	f002 f902 	bl	80032bc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b27      	ldr	r3, [pc, #156]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d4:	4a26      	ldr	r2, [pc, #152]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010dc:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010e8:	2303      	movs	r3, #3
 80010ea:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ec:	2303      	movs	r3, #3
 80010ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fe:	f005 f981 	bl	8006404 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001104:	4a1c      	ldr	r2, [pc, #112]	@ (8001178 <HAL_ADC_MspInit+0x110>)
 8001106:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001108:	4b1a      	ldr	r3, [pc, #104]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 800110a:	2205      	movs	r2, #5
 800110c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001114:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800111a:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 800111c:	2280      	movs	r2, #128	@ 0x80
 800111e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001120:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001122:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001126:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001128:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 800112a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800112e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001130:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001132:	2220      	movs	r2, #32
 8001134:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001136:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800113c:	480d      	ldr	r0, [pc, #52]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 800113e:	f004 fe23 	bl	8005d88 <HAL_DMA_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001148:	f002 f8b8 	bl	80032bc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a09      	ldr	r2, [pc, #36]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001150:	655a      	str	r2, [r3, #84]	@ 0x54
 8001152:	4a08      	ldr	r2, [pc, #32]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2105      	movs	r1, #5
 800115c:	2012      	movs	r0, #18
 800115e:	f004 fdeb 	bl	8005d38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001162:	2012      	movs	r0, #18
 8001164:	f004 fe02 	bl	8005d6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001168:	bf00      	nop
 800116a:	3778      	adds	r7, #120	@ 0x78
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000
 8001174:	20000eb8 	.word	0x20000eb8
 8001178:	40020030 	.word	0x40020030
 800117c:	00000000 	.word	0x00000000

08001180 <calculate_gyro_angles>:

void ADC_Averaged();
void Read_Buttons();
float map_adc_to_output(int adc_value);

void calculate_gyro_angles(double Ax, double Ay, double Az, double Gx, double Gy, double Gz, float DT) {
 8001180:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001184:	b08e      	sub	sp, #56	@ 0x38
 8001186:	af00      	add	r7, sp, #0
 8001188:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 800118c:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001190:	ed87 2b08 	vstr	d2, [r7, #32]
 8001194:	ed87 3b06 	vstr	d3, [r7, #24]
 8001198:	ed87 4b04 	vstr	d4, [r7, #16]
 800119c:	ed87 5b02 	vstr	d5, [r7, #8]
 80011a0:	ed87 6a01 	vstr	s12, [r7, #4]

	rotation_gyro.roll += (Gx * RAD_TO_DEG) * DT;
 80011a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80011a6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001324 <calculate_gyro_angles+0x1a4>)
 80011b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011b4:	f7ff fa58 	bl	8000668 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	a355      	add	r3, pc, #340	@ (adr r3, 8001318 <calculate_gyro_angles+0x198>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fb79 	bl	80008bc <__aeabi_ddiv>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4690      	mov	r8, r2
 80011d0:	4699      	mov	r9, r3
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff f9f0 	bl	80005b8 <__aeabi_f2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4640      	mov	r0, r8
 80011de:	4649      	mov	r1, r9
 80011e0:	f7ff fa42 	bl	8000668 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4620      	mov	r0, r4
 80011ea:	4629      	mov	r1, r5
 80011ec:	f7ff f886 	bl	80002fc <__adddf3>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	494a      	ldr	r1, [pc, #296]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80011f6:	e9c1 2300 	strd	r2, r3, [r1]
	rotation_gyro.pitch += (Gy * RAD_TO_DEG) * DT;
 80011fa:	4b49      	ldr	r3, [pc, #292]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80011fc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	4b47      	ldr	r3, [pc, #284]	@ (8001324 <calculate_gyro_angles+0x1a4>)
 8001206:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800120a:	f7ff fa2d 	bl	8000668 <__aeabi_dmul>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	a340      	add	r3, pc, #256	@ (adr r3, 8001318 <calculate_gyro_angles+0x198>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff fb4e 	bl	80008bc <__aeabi_ddiv>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff f9c5 	bl	80005b8 <__aeabi_f2d>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4640      	mov	r0, r8
 8001234:	4649      	mov	r1, r9
 8001236:	f7ff fa17 	bl	8000668 <__aeabi_dmul>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4620      	mov	r0, r4
 8001240:	4629      	mov	r1, r5
 8001242:	f7ff f85b 	bl	80002fc <__adddf3>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4935      	ldr	r1, [pc, #212]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 800124c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rotation_gyro.yaw += (Gz * RAD_TO_DEG) * DT;
 8001250:	4b33      	ldr	r3, [pc, #204]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 8001252:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b32      	ldr	r3, [pc, #200]	@ (8001324 <calculate_gyro_angles+0x1a4>)
 800125c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001260:	f7ff fa02 	bl	8000668 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	a32a      	add	r3, pc, #168	@ (adr r3, 8001318 <calculate_gyro_angles+0x198>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	f7ff fb23 	bl	80008bc <__aeabi_ddiv>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4690      	mov	r8, r2
 800127c:	4699      	mov	r9, r3
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff f99a 	bl	80005b8 <__aeabi_f2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4640      	mov	r0, r8
 800128a:	4649      	mov	r1, r9
 800128c:	f7ff f9ec 	bl	8000668 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4620      	mov	r0, r4
 8001296:	4629      	mov	r1, r5
 8001298:	f7ff f830 	bl	80002fc <__adddf3>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	491f      	ldr	r1, [pc, #124]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80012a2:	e9c1 2304 	strd	r2, r3, [r1, #16]

    if (rotation_gyro.yaw > 180.0){
 80012a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80012a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <calculate_gyro_angles+0x1a4>)
 80012b2:	f7ff fc69 	bl	8000b88 <__aeabi_dcmpgt>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00d      	beq.n	80012d8 <calculate_gyro_angles+0x158>
    	rotation_gyro.yaw -= 360.0;
 80012bc:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80012be:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <calculate_gyro_angles+0x1a8>)
 80012c8:	f7ff f816 	bl	80002f8 <__aeabi_dsub>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4913      	ldr	r1, [pc, #76]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80012d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }
    else if (rotation_gyro.yaw < -180.0){
    	rotation_gyro.yaw += 360.0;
    }
}
 80012d6:	e018      	b.n	800130a <calculate_gyro_angles+0x18a>
    else if (rotation_gyro.yaw < -180.0){
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80012da:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b12      	ldr	r3, [pc, #72]	@ (800132c <calculate_gyro_angles+0x1ac>)
 80012e4:	f7ff fc32 	bl	8000b4c <__aeabi_dcmplt>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d100      	bne.n	80012f0 <calculate_gyro_angles+0x170>
}
 80012ee:	e00c      	b.n	800130a <calculate_gyro_angles+0x18a>
    	rotation_gyro.yaw += 360.0;
 80012f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80012f2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <calculate_gyro_angles+0x1a8>)
 80012fc:	f7fe fffe 	bl	80002fc <__adddf3>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4906      	ldr	r1, [pc, #24]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 8001306:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800130a:	bf00      	nop
 800130c:	3738      	adds	r7, #56	@ 0x38
 800130e:	46bd      	mov	sp, r7
 8001310:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001314:	f3af 8000 	nop.w
 8001318:	54442d18 	.word	0x54442d18
 800131c:	400921fb 	.word	0x400921fb
 8001320:	200012d0 	.word	0x200012d0
 8001324:	40668000 	.word	0x40668000
 8001328:	40768000 	.word	0x40768000
 800132c:	c0668000 	.word	0xc0668000

08001330 <calculate_accl_angles>:

void calculate_accl_angles(double Ax, double Ay, double Az, double Gx, double Gy, double Gz, float DT) {
 8001330:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001334:	b094      	sub	sp, #80	@ 0x50
 8001336:	af00      	add	r7, sp, #0
 8001338:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 800133c:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001340:	ed87 2b08 	vstr	d2, [r7, #32]
 8001344:	ed87 3b06 	vstr	d3, [r7, #24]
 8001348:	ed87 4b04 	vstr	d4, [r7, #16]
 800134c:	ed87 5b02 	vstr	d5, [r7, #8]
 8001350:	ed87 6a01 	vstr	s12, [r7, #4]

    double roll_acc = atan2(Ay, Az) * RAD_TO_DEG;
 8001354:	ed97 1b08 	vldr	d1, [r7, #32]
 8001358:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800135c:	f01d f8ea 	bl	801e534 <atan2>
 8001360:	ec51 0b10 	vmov	r0, r1, d0
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	4b63      	ldr	r3, [pc, #396]	@ (80014f8 <calculate_accl_angles+0x1c8>)
 800136a:	f7ff f97d 	bl	8000668 <__aeabi_dmul>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	a35e      	add	r3, pc, #376	@ (adr r3, 80014f0 <calculate_accl_angles+0x1c0>)
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7ff fa9e 	bl	80008bc <__aeabi_ddiv>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double pitch_acc = atan2(-Ax, sqrt(Ay * Ay + Az * Az)) * RAD_TO_DEG;
 8001388:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 800138a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800138c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001394:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001398:	f7ff f966 	bl	8000668 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4690      	mov	r8, r2
 80013a2:	4699      	mov	r9, r3
 80013a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013ac:	f7ff f95c 	bl	8000668 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4640      	mov	r0, r8
 80013b6:	4649      	mov	r1, r9
 80013b8:	f7fe ffa0 	bl	80002fc <__adddf3>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	ec43 2b17 	vmov	d7, r2, r3
 80013c4:	eeb0 0a47 	vmov.f32	s0, s14
 80013c8:	eef0 0a67 	vmov.f32	s1, s15
 80013cc:	f01d f8b4 	bl	801e538 <sqrt>
 80013d0:	eeb0 7a40 	vmov.f32	s14, s0
 80013d4:	eef0 7a60 	vmov.f32	s15, s1
 80013d8:	eeb0 1a47 	vmov.f32	s2, s14
 80013dc:	eef0 1a67 	vmov.f32	s3, s15
 80013e0:	ec45 4b10 	vmov	d0, r4, r5
 80013e4:	f01d f8a6 	bl	801e534 <atan2>
 80013e8:	ec51 0b10 	vmov	r0, r1, d0
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	4b41      	ldr	r3, [pc, #260]	@ (80014f8 <calculate_accl_angles+0x1c8>)
 80013f2:	f7ff f939 	bl	8000668 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	a33c      	add	r3, pc, #240	@ (adr r3, 80014f0 <calculate_accl_angles+0x1c0>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7ff fa5a 	bl	80008bc <__aeabi_ddiv>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double yaw_acc = (Gz * RAD_TO_DEG) * DT;
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	4b38      	ldr	r3, [pc, #224]	@ (80014f8 <calculate_accl_angles+0x1c8>)
 8001416:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800141a:	f7ff f925 	bl	8000668 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	a332      	add	r3, pc, #200	@ (adr r3, 80014f0 <calculate_accl_angles+0x1c0>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7ff fa46 	bl	80008bc <__aeabi_ddiv>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4614      	mov	r4, r2
 8001436:	461d      	mov	r5, r3
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff f8bd 	bl	80005b8 <__aeabi_f2d>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4620      	mov	r0, r4
 8001444:	4629      	mov	r1, r5
 8001446:	f7ff f90f 	bl	8000668 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    rotation_accl.roll = roll_acc;
 8001452:	492a      	ldr	r1, [pc, #168]	@ (80014fc <calculate_accl_angles+0x1cc>)
 8001454:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001458:	e9c1 2300 	strd	r2, r3, [r1]
    rotation_accl.pitch = pitch_acc;
 800145c:	4927      	ldr	r1, [pc, #156]	@ (80014fc <calculate_accl_angles+0x1cc>)
 800145e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001462:	e9c1 2302 	strd	r2, r3, [r1, #8]
    rotation_accl.yaw += yaw_acc;
 8001466:	4b25      	ldr	r3, [pc, #148]	@ (80014fc <calculate_accl_angles+0x1cc>)
 8001468:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800146c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001470:	f7fe ff44 	bl	80002fc <__adddf3>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4920      	ldr	r1, [pc, #128]	@ (80014fc <calculate_accl_angles+0x1cc>)
 800147a:	e9c1 2304 	strd	r2, r3, [r1, #16]

    if (rotation_accl.yaw > 180.0){
 800147e:	4b1f      	ldr	r3, [pc, #124]	@ (80014fc <calculate_accl_angles+0x1cc>)
 8001480:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <calculate_accl_angles+0x1c8>)
 800148a:	f7ff fb7d 	bl	8000b88 <__aeabi_dcmpgt>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00d      	beq.n	80014b0 <calculate_accl_angles+0x180>
    	rotation_accl.yaw -= 360.0;
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <calculate_accl_angles+0x1cc>)
 8001496:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <calculate_accl_angles+0x1d0>)
 80014a0:	f7fe ff2a 	bl	80002f8 <__aeabi_dsub>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4914      	ldr	r1, [pc, #80]	@ (80014fc <calculate_accl_angles+0x1cc>)
 80014aa:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }
    else if (rotation_accl.yaw < -180.0){
    	rotation_accl.yaw += 360.0;
    }
}
 80014ae:	e018      	b.n	80014e2 <calculate_accl_angles+0x1b2>
    else if (rotation_accl.yaw < -180.0){
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <calculate_accl_angles+0x1cc>)
 80014b2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <calculate_accl_angles+0x1d4>)
 80014bc:	f7ff fb46 	bl	8000b4c <__aeabi_dcmplt>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d100      	bne.n	80014c8 <calculate_accl_angles+0x198>
}
 80014c6:	e00c      	b.n	80014e2 <calculate_accl_angles+0x1b2>
    	rotation_accl.yaw += 360.0;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <calculate_accl_angles+0x1cc>)
 80014ca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001500 <calculate_accl_angles+0x1d0>)
 80014d4:	f7fe ff12 	bl	80002fc <__adddf3>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4907      	ldr	r1, [pc, #28]	@ (80014fc <calculate_accl_angles+0x1cc>)
 80014de:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80014e2:	bf00      	nop
 80014e4:	3750      	adds	r7, #80	@ 0x50
 80014e6:	46bd      	mov	sp, r7
 80014e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014ec:	f3af 8000 	nop.w
 80014f0:	54442d18 	.word	0x54442d18
 80014f4:	400921fb 	.word	0x400921fb
 80014f8:	40668000 	.word	0x40668000
 80014fc:	200012e8 	.word	0x200012e8
 8001500:	40768000 	.word	0x40768000
 8001504:	c0668000 	.word	0xc0668000

08001508 <calculate_kalm_angles>:

void calculate_kalm_angles(double Ax, double Ay, double Az, double Gx, double Gy, double Gz, float DT) {
 8001508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800150c:	b096      	sub	sp, #88	@ 0x58
 800150e:	af00      	add	r7, sp, #0
 8001510:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001514:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001518:	ed87 2b08 	vstr	d2, [r7, #32]
 800151c:	ed87 3b06 	vstr	d3, [r7, #24]
 8001520:	ed87 4b04 	vstr	d4, [r7, #16]
 8001524:	ed87 5b02 	vstr	d5, [r7, #8]
 8001528:	ed87 6a01 	vstr	s12, [r7, #4]

	double angleX = atan(Ay / sqrt(Ax * Ax + Az * Az)) * RAD_TO_DEG;
 800152c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001530:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001534:	f7ff f898 	bl	8000668 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4690      	mov	r8, r2
 800153e:	4699      	mov	r9, r3
 8001540:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001544:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001548:	f7ff f88e 	bl	8000668 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4640      	mov	r0, r8
 8001552:	4649      	mov	r1, r9
 8001554:	f7fe fed2 	bl	80002fc <__adddf3>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	ec43 2b17 	vmov	d7, r2, r3
 8001560:	eeb0 0a47 	vmov.f32	s0, s14
 8001564:	eef0 0a67 	vmov.f32	s1, s15
 8001568:	f01c ffe6 	bl	801e538 <sqrt>
 800156c:	ec53 2b10 	vmov	r2, r3, d0
 8001570:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001574:	f7ff f9a2 	bl	80008bc <__aeabi_ddiv>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	ec43 2b17 	vmov	d7, r2, r3
 8001580:	eeb0 0a47 	vmov.f32	s0, s14
 8001584:	eef0 0a67 	vmov.f32	s1, s15
 8001588:	f01d f802 	bl	801e590 <atan>
 800158c:	ec51 0b10 	vmov	r0, r1, d0
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b70      	ldr	r3, [pc, #448]	@ (8001758 <calculate_kalm_angles+0x250>)
 8001596:	f7ff f867 	bl	8000668 <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8001750 <calculate_kalm_angles+0x248>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	f7ff f988 	bl	80008bc <__aeabi_ddiv>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double angleY = atan2(-Ax, sqrt(Ay * Ay + Az * Az)) * RAD_TO_DEG;
 80015b4:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 80015b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015b8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80015bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80015c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80015c4:	f7ff f850 	bl	8000668 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4690      	mov	r8, r2
 80015ce:	4699      	mov	r9, r3
 80015d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015d8:	f7ff f846 	bl	8000668 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4640      	mov	r0, r8
 80015e2:	4649      	mov	r1, r9
 80015e4:	f7fe fe8a 	bl	80002fc <__adddf3>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	ec43 2b17 	vmov	d7, r2, r3
 80015f0:	eeb0 0a47 	vmov.f32	s0, s14
 80015f4:	eef0 0a67 	vmov.f32	s1, s15
 80015f8:	f01c ff9e 	bl	801e538 <sqrt>
 80015fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001600:	eef0 7a60 	vmov.f32	s15, s1
 8001604:	eeb0 1a47 	vmov.f32	s2, s14
 8001608:	eef0 1a67 	vmov.f32	s3, s15
 800160c:	ec45 4b10 	vmov	d0, r4, r5
 8001610:	f01c ff90 	bl	801e534 <atan2>
 8001614:	ec51 0b10 	vmov	r0, r1, d0
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	4b4e      	ldr	r3, [pc, #312]	@ (8001758 <calculate_kalm_angles+0x250>)
 800161e:	f7ff f823 	bl	8000668 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	a349      	add	r3, pc, #292	@ (adr r3, 8001750 <calculate_kalm_angles+0x248>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f7ff f944 	bl	80008bc <__aeabi_ddiv>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	double ratedX = Gx;
 800163c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001640:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double ratedY = Gy;
 8001644:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001648:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	rotation_kalm.roll = Kalman_Angle(&kalmanX, angleX, ratedX, DT);
 800164c:	ed97 2a01 	vldr	s4, [r7, #4]
 8001650:	ed97 1b10 	vldr	d1, [r7, #64]	@ 0x40
 8001654:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8001658:	4840      	ldr	r0, [pc, #256]	@ (800175c <calculate_kalm_angles+0x254>)
 800165a:	f000 f8dd 	bl	8001818 <Kalman_Angle>
 800165e:	eeb0 7a40 	vmov.f32	s14, s0
 8001662:	eef0 7a60 	vmov.f32	s15, s1
 8001666:	4b3e      	ldr	r3, [pc, #248]	@ (8001760 <calculate_kalm_angles+0x258>)
 8001668:	ed83 7b00 	vstr	d7, [r3]
	rotation_kalm.pitch = Kalman_Angle(&kalmanY, angleY, ratedY, DT);
 800166c:	ed97 2a01 	vldr	s4, [r7, #4]
 8001670:	ed97 1b0e 	vldr	d1, [r7, #56]	@ 0x38
 8001674:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8001678:	483a      	ldr	r0, [pc, #232]	@ (8001764 <calculate_kalm_angles+0x25c>)
 800167a:	f000 f8cd 	bl	8001818 <Kalman_Angle>
 800167e:	eeb0 7a40 	vmov.f32	s14, s0
 8001682:	eef0 7a60 	vmov.f32	s15, s1
 8001686:	4b36      	ldr	r3, [pc, #216]	@ (8001760 <calculate_kalm_angles+0x258>)
 8001688:	ed83 7b02 	vstr	d7, [r3, #8]
	rotation_kalm.yaw += (Gz * RAD_TO_DEG) * DT;
 800168c:	4b34      	ldr	r3, [pc, #208]	@ (8001760 <calculate_kalm_angles+0x258>)
 800168e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	4b30      	ldr	r3, [pc, #192]	@ (8001758 <calculate_kalm_angles+0x250>)
 8001698:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800169c:	f7fe ffe4 	bl	8000668 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	a329      	add	r3, pc, #164	@ (adr r3, 8001750 <calculate_kalm_angles+0x248>)
 80016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ae:	f7ff f905 	bl	80008bc <__aeabi_ddiv>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4690      	mov	r8, r2
 80016b8:	4699      	mov	r9, r3
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7fe ff7c 	bl	80005b8 <__aeabi_f2d>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4640      	mov	r0, r8
 80016c6:	4649      	mov	r1, r9
 80016c8:	f7fe ffce 	bl	8000668 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4620      	mov	r0, r4
 80016d2:	4629      	mov	r1, r5
 80016d4:	f7fe fe12 	bl	80002fc <__adddf3>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4920      	ldr	r1, [pc, #128]	@ (8001760 <calculate_kalm_angles+0x258>)
 80016de:	e9c1 2304 	strd	r2, r3, [r1, #16]

    if (rotation_kalm.yaw > 180.0){
 80016e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <calculate_kalm_angles+0x258>)
 80016e4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <calculate_kalm_angles+0x250>)
 80016ee:	f7ff fa4b 	bl	8000b88 <__aeabi_dcmpgt>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00d      	beq.n	8001714 <calculate_kalm_angles+0x20c>
    	rotation_kalm.yaw -= 360.0;
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <calculate_kalm_angles+0x258>)
 80016fa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <calculate_kalm_angles+0x260>)
 8001704:	f7fe fdf8 	bl	80002f8 <__aeabi_dsub>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4914      	ldr	r1, [pc, #80]	@ (8001760 <calculate_kalm_angles+0x258>)
 800170e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }
    else if (rotation_kalm.yaw < -180.0){
    	rotation_kalm.yaw += 360.0;
    }
}
 8001712:	e018      	b.n	8001746 <calculate_kalm_angles+0x23e>
    else if (rotation_kalm.yaw < -180.0){
 8001714:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <calculate_kalm_angles+0x258>)
 8001716:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	4b13      	ldr	r3, [pc, #76]	@ (800176c <calculate_kalm_angles+0x264>)
 8001720:	f7ff fa14 	bl	8000b4c <__aeabi_dcmplt>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d100      	bne.n	800172c <calculate_kalm_angles+0x224>
}
 800172a:	e00c      	b.n	8001746 <calculate_kalm_angles+0x23e>
    	rotation_kalm.yaw += 360.0;
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <calculate_kalm_angles+0x258>)
 800172e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <calculate_kalm_angles+0x260>)
 8001738:	f7fe fde0 	bl	80002fc <__adddf3>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4907      	ldr	r1, [pc, #28]	@ (8001760 <calculate_kalm_angles+0x258>)
 8001742:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001746:	bf00      	nop
 8001748:	3758      	adds	r7, #88	@ 0x58
 800174a:	46bd      	mov	sp, r7
 800174c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001750:	54442d18 	.word	0x54442d18
 8001754:	400921fb 	.word	0x400921fb
 8001758:	40668000 	.word	0x40668000
 800175c:	20001330 	.word	0x20001330
 8001760:	20001300 	.word	0x20001300
 8001764:	20001380 	.word	0x20001380
 8001768:	40768000 	.word	0x40768000
 800176c:	c0668000 	.word	0xc0668000

08001770 <Kalman_Init>:

void Kalman_Init(KalmanFilter_t* kf) {
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    kf->Q_angle = 0.001f;
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	a321      	add	r3, pc, #132	@ (adr r3, 8001800 <Kalman_Init+0x90>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	e9c1 2300 	strd	r2, r3, [r1]
    kf->Q_bias  = 0.003f;
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	a320      	add	r3, pc, #128	@ (adr r3, 8001808 <Kalman_Init+0x98>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    kf->R_measure = 0.03f;
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	a31f      	add	r3, pc, #124	@ (adr r3, 8001810 <Kalman_Init+0xa0>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	e9c1 2304 	strd	r2, r3, [r1, #16]

    kf->angle = 0.0f;
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    kf->bias = 0.0f;
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	e9c1 2308 	strd	r2, r3, [r1, #32]

    kf->P[0][0] = 0.0f;
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    kf->P[0][1] = 0.0f;
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    kf->P[1][0] = 0.0f;
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    kf->P[1][1] = 0.0f;
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	f3af 8000 	nop.w
 8001800:	e0000000 	.word	0xe0000000
 8001804:	3f50624d 	.word	0x3f50624d
 8001808:	c0000000 	.word	0xc0000000
 800180c:	3f689374 	.word	0x3f689374
 8001810:	e0000000 	.word	0xe0000000
 8001814:	3f9eb851 	.word	0x3f9eb851

08001818 <Kalman_Angle>:

double Kalman_Angle(KalmanFilter_t* kf, double new_angle, double new_rate, float DT){
 8001818:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800181c:	b092      	sub	sp, #72	@ 0x48
 800181e:	af00      	add	r7, sp, #0
 8001820:	6178      	str	r0, [r7, #20]
 8001822:	ed87 0b02 	vstr	d0, [r7, #8]
 8001826:	ed87 1b00 	vstr	d1, [r7]
 800182a:	ed87 2a04 	vstr	s4, [r7, #16]

    kf->rate = new_rate - kf->bias;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001834:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001838:	f7fe fd5e 	bl	80002f8 <__aeabi_dsub>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	6979      	ldr	r1, [r7, #20]
 8001842:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    kf->angle += DT * kf->rate;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800184c:	6938      	ldr	r0, [r7, #16]
 800184e:	f7fe feb3 	bl	80005b8 <__aeabi_f2d>
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001858:	f7fe ff06 	bl	8000668 <__aeabi_dmul>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4620      	mov	r0, r4
 8001862:	4629      	mov	r1, r5
 8001864:	f7fe fd4a 	bl	80002fc <__adddf3>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	6979      	ldr	r1, [r7, #20]
 800186e:	e9c1 2306 	strd	r2, r3, [r1, #24]

    kf->P[0][0] += DT * (DT * kf->P[1][1] - kf->P[0][1] - kf->P[1][0] + kf->Q_angle);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001878:	6938      	ldr	r0, [r7, #16]
 800187a:	f7fe fe9d 	bl	80005b8 <__aeabi_f2d>
 800187e:	4680      	mov	r8, r0
 8001880:	4689      	mov	r9, r1
 8001882:	6938      	ldr	r0, [r7, #16]
 8001884:	f7fe fe98 	bl	80005b8 <__aeabi_f2d>
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800188e:	f7fe feeb 	bl	8000668 <__aeabi_dmul>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80018a0:	f7fe fd2a 	bl	80002f8 <__aeabi_dsub>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80018b2:	f7fe fd21 	bl	80002f8 <__aeabi_dsub>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe fd1a 	bl	80002fc <__adddf3>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4640      	mov	r0, r8
 80018ce:	4649      	mov	r1, r9
 80018d0:	f7fe feca 	bl	8000668 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4620      	mov	r0, r4
 80018da:	4629      	mov	r1, r5
 80018dc:	f7fe fd0e 	bl	80002fc <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	6979      	ldr	r1, [r7, #20]
 80018e6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    kf->P[0][1] -= DT * kf->P[1][1];
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80018f0:	6938      	ldr	r0, [r7, #16]
 80018f2:	f7fe fe61 	bl	80005b8 <__aeabi_f2d>
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80018fc:	f7fe feb4 	bl	8000668 <__aeabi_dmul>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4620      	mov	r0, r4
 8001906:	4629      	mov	r1, r5
 8001908:	f7fe fcf6 	bl	80002f8 <__aeabi_dsub>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	6979      	ldr	r1, [r7, #20]
 8001912:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    kf->P[1][0] -= DT * kf->P[1][1];
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 800191c:	6938      	ldr	r0, [r7, #16]
 800191e:	f7fe fe4b 	bl	80005b8 <__aeabi_f2d>
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001928:	f7fe fe9e 	bl	8000668 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4620      	mov	r0, r4
 8001932:	4629      	mov	r1, r5
 8001934:	f7fe fce0 	bl	80002f8 <__aeabi_dsub>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	6979      	ldr	r1, [r7, #20]
 800193e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    kf->P[1][1] += kf->Q_bias * DT;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800194e:	6938      	ldr	r0, [r7, #16]
 8001950:	f7fe fe32 	bl	80005b8 <__aeabi_f2d>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4640      	mov	r0, r8
 800195a:	4649      	mov	r1, r9
 800195c:	f7fe fe84 	bl	8000668 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4620      	mov	r0, r4
 8001966:	4629      	mov	r1, r5
 8001968:	f7fe fcc8 	bl	80002fc <__adddf3>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	6979      	ldr	r1, [r7, #20]
 8001972:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

    double S = kf->P[0][0] + kf->R_measure;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001982:	f7fe fcbb 	bl	80002fc <__adddf3>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double K[2];
    K[0] = kf->P[0][0] / S;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001994:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001998:	f7fe ff90 	bl	80008bc <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    K[1] = kf->P[1][0] / S;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80019aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80019ae:	f7fe ff85 	bl	80008bc <__aeabi_ddiv>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    double y = new_angle - kf->angle;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019c4:	f7fe fc98 	bl	80002f8 <__aeabi_dsub>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    kf->angle += K[0] * y;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80019d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80019de:	f7fe fe43 	bl	8000668 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4620      	mov	r0, r4
 80019e8:	4629      	mov	r1, r5
 80019ea:	f7fe fc87 	bl	80002fc <__adddf3>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	6979      	ldr	r1, [r7, #20]
 80019f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    kf->bias += K[1] * y;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80019fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a02:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a06:	f7fe fe2f 	bl	8000668 <__aeabi_dmul>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4620      	mov	r0, r4
 8001a10:	4629      	mov	r1, r5
 8001a12:	f7fe fc73 	bl	80002fc <__adddf3>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	6979      	ldr	r1, [r7, #20]
 8001a1c:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = kf->P[0][0];
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a26:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double P01_temp = kf->P[0][1];
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001a30:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    kf->P[0][0] -= K[0] * P00_temp;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001a3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a42:	f7fe fe11 	bl	8000668 <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	f7fe fc53 	bl	80002f8 <__aeabi_dsub>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	6979      	ldr	r1, [r7, #20]
 8001a58:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    kf->P[0][1] -= K[0] * P01_temp;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001a62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a6a:	f7fe fdfd 	bl	8000668 <__aeabi_dmul>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4620      	mov	r0, r4
 8001a74:	4629      	mov	r1, r5
 8001a76:	f7fe fc3f 	bl	80002f8 <__aeabi_dsub>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	6979      	ldr	r1, [r7, #20]
 8001a80:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    kf->P[1][0] -= K[1] * P00_temp;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001a8a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a92:	f7fe fde9 	bl	8000668 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	f7fe fc2b 	bl	80002f8 <__aeabi_dsub>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	6979      	ldr	r1, [r7, #20]
 8001aa8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    kf->P[1][1] -= K[1] * P01_temp;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 8001ab2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001aba:	f7fe fdd5 	bl	8000668 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	f7fe fc17 	bl	80002f8 <__aeabi_dsub>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	6979      	ldr	r1, [r7, #20]
 8001ad0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

    return kf->angle;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ada:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ade:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae2:	eef0 0a67 	vmov.f32	s1, s15
 8001ae6:	3748      	adds	r7, #72	@ 0x48
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001af0 <map_adc_to_output>:

float map_adc_to_output(int adc_value) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	float mapped = ((adc_value - ADC_MIN) * (OUTPUT_MAX - OUTPUT_MIN) / (ADC_MAX - ADC_MIN)) + OUTPUT_MIN;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	ee07 3a90 	vmov	s15, r3
 8001afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b02:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b06:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001b60 <map_adc_to_output+0x70>
 8001b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b16:	edc7 7a03 	vstr	s15, [r7, #12]
	float output = (fabs(mapped) < 0.03) ? 0.0 : mapped;
 8001b1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b1e:	eef0 7ae7 	vabs.f32	s15, s15
 8001b22:	ee17 0a90 	vmov	r0, s15
 8001b26:	f7fe fd47 	bl	80005b8 <__aeabi_f2d>
 8001b2a:	a30b      	add	r3, pc, #44	@ (adr r3, 8001b58 <map_adc_to_output+0x68>)
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	f7ff f80c 	bl	8000b4c <__aeabi_dcmplt>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <map_adc_to_output+0x50>
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	e000      	b.n	8001b42 <map_adc_to_output+0x52>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	60bb      	str	r3, [r7, #8]
	return output;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	ee07 3a90 	vmov	s15, r3
}
 8001b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	f3af 8000 	nop.w
 8001b58:	eb851eb8 	.word	0xeb851eb8
 8001b5c:	3f9eb851 	.word	0x3f9eb851
 8001b60:	457ff000 	.word	0x457ff000
 8001b64:	00000000 	.word	0x00000000

08001b68 <timer_callback>:

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001b68:	b5b0      	push	{r4, r5, r7, lr}
 8001b6a:	ed2d 8b04 	vpush	{d8-d9}
 8001b6e:	b0ac      	sub	sp, #176	@ 0xb0
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	e9c7 2300 	strd	r2, r3, [r7]

	if (timer != NULL) {
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 83ef 	beq.w	800235e <timer_callback+0x7f6>
		if (main_Mode == 1)
 8001b80:	4bb3      	ldr	r3, [pc, #716]	@ (8001e50 <timer_callback+0x2e8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	f040 8204 	bne.w	8001f92 <timer_callback+0x42a>
		{
			uint32_t i2cError = HAL_I2C_GetError(&hi2c1);
 8001b8a:	48b2      	ldr	r0, [pc, #712]	@ (8001e54 <timer_callback+0x2ec>)
 8001b8c:	f005 f9f8 	bl	8006f80 <HAL_I2C_GetError>
 8001b90:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
			if (i2cError == HAL_I2C_ERROR_NONE){
 8001b94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f040 81dc 	bne.w	8001f56 <timer_callback+0x3ee>
				if (is_calib || on_calib){
 8001b9e:	4bae      	ldr	r3, [pc, #696]	@ (8001e58 <timer_callback+0x2f0>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d104      	bne.n	8001bb0 <timer_callback+0x48>
 8001ba6:	4bad      	ldr	r3, [pc, #692]	@ (8001e5c <timer_callback+0x2f4>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 83ce 	beq.w	800234c <timer_callback+0x7e4>
					MPU6050_Read_All(&hi2c1, &MPU6050);
 8001bb0:	49ab      	ldr	r1, [pc, #684]	@ (8001e60 <timer_callback+0x2f8>)
 8001bb2:	48a8      	ldr	r0, [pc, #672]	@ (8001e54 <timer_callback+0x2ec>)
 8001bb4:	f008 ff94 	bl	800aae0 <MPU6050_Read_All>

					double Ax = (GRAVITY * MPU6050.Ax) - accl_offset.x;
 8001bb8:	4ba9      	ldr	r3, [pc, #676]	@ (8001e60 <timer_callback+0x2f8>)
 8001bba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001bbe:	a3a0      	add	r3, pc, #640	@ (adr r3, 8001e40 <timer_callback+0x2d8>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fd50 	bl	8000668 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4ba4      	ldr	r3, [pc, #656]	@ (8001e64 <timer_callback+0x2fc>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	f7fe fb8f 	bl	80002f8 <__aeabi_dsub>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
					double Ay = (GRAVITY * MPU6050.Ay) - accl_offset.y;
 8001be2:	4b9f      	ldr	r3, [pc, #636]	@ (8001e60 <timer_callback+0x2f8>)
 8001be4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001be8:	a395      	add	r3, pc, #596	@ (adr r3, 8001e40 <timer_callback+0x2d8>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	f7fe fd3b 	bl	8000668 <__aeabi_dmul>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4b9a      	ldr	r3, [pc, #616]	@ (8001e64 <timer_callback+0x2fc>)
 8001bfc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c00:	f7fe fb7a 	bl	80002f8 <__aeabi_dsub>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
					double Az = (GRAVITY * MPU6050.Az) - accl_offset.z;
 8001c0c:	4b94      	ldr	r3, [pc, #592]	@ (8001e60 <timer_callback+0x2f8>)
 8001c0e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c12:	a38b      	add	r3, pc, #556	@ (adr r3, 8001e40 <timer_callback+0x2d8>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	f7fe fd26 	bl	8000668 <__aeabi_dmul>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	4b8f      	ldr	r3, [pc, #572]	@ (8001e64 <timer_callback+0x2fc>)
 8001c26:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c2a:	f7fe fb65 	bl	80002f8 <__aeabi_dsub>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

					double Gx = (DEG_TO_RAD * MPU6050.Gx) - gyro_offset.x;
 8001c36:	4b8a      	ldr	r3, [pc, #552]	@ (8001e60 <timer_callback+0x2f8>)
 8001c38:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001c3c:	a382      	add	r3, pc, #520	@ (adr r3, 8001e48 <timer_callback+0x2e0>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f7fe fd11 	bl	8000668 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4b86      	ldr	r3, [pc, #536]	@ (8001e68 <timer_callback+0x300>)
 8001c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c54:	f7fe fb50 	bl	80002f8 <__aeabi_dsub>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
					double Gy = (DEG_TO_RAD * MPU6050.Gy) - gyro_offset.y;
 8001c60:	4b7f      	ldr	r3, [pc, #508]	@ (8001e60 <timer_callback+0x2f8>)
 8001c62:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001c66:	a378      	add	r3, pc, #480	@ (adr r3, 8001e48 <timer_callback+0x2e0>)
 8001c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6c:	f7fe fcfc 	bl	8000668 <__aeabi_dmul>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	4b7b      	ldr	r3, [pc, #492]	@ (8001e68 <timer_callback+0x300>)
 8001c7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c7e:	f7fe fb3b 	bl	80002f8 <__aeabi_dsub>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
					double Gz = (DEG_TO_RAD * MPU6050.Gz) - gyro_offset.z;
 8001c8a:	4b75      	ldr	r3, [pc, #468]	@ (8001e60 <timer_callback+0x2f8>)
 8001c8c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001c90:	a36d      	add	r3, pc, #436	@ (adr r3, 8001e48 <timer_callback+0x2e0>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe fce7 	bl	8000668 <__aeabi_dmul>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4b71      	ldr	r3, [pc, #452]	@ (8001e68 <timer_callback+0x300>)
 8001ca4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ca8:	f7fe fb26 	bl	80002f8 <__aeabi_dsub>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

					mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 8001cb4:	f011 fa52 	bl	801315c <rmw_uros_epoch_millis>
 8001cb8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	f7fe ff82 	bl	8000bc8 <__aeabi_ldivmod>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4b68      	ldr	r3, [pc, #416]	@ (8001e6c <timer_callback+0x304>)
 8001cca:	601a      	str	r2, [r3, #0]
					mpu6050_msg.header.stamp.nanosec = rmw_uros_epoch_nanos();
 8001ccc:	f011 fa54 	bl	8013178 <rmw_uros_epoch_nanos>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4b65      	ldr	r3, [pc, #404]	@ (8001e6c <timer_callback+0x304>)
 8001cd6:	605a      	str	r2, [r3, #4]

					mpu6050_msg.linear_acceleration.x = Ax;
 8001cd8:	4964      	ldr	r1, [pc, #400]	@ (8001e6c <timer_callback+0x304>)
 8001cda:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001cde:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
					mpu6050_msg.linear_acceleration.y = Ay;
 8001ce2:	4962      	ldr	r1, [pc, #392]	@ (8001e6c <timer_callback+0x304>)
 8001ce4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001ce8:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
					mpu6050_msg.linear_acceleration.z = Az;
 8001cec:	495f      	ldr	r1, [pc, #380]	@ (8001e6c <timer_callback+0x304>)
 8001cee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001cf2:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

					mpu6050_msg.angular_velocity.x = Gx;
 8001cf6:	495d      	ldr	r1, [pc, #372]	@ (8001e6c <timer_callback+0x304>)
 8001cf8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001cfc:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
					mpu6050_msg.angular_velocity.y = Gy;
 8001d00:	495a      	ldr	r1, [pc, #360]	@ (8001e6c <timer_callback+0x304>)
 8001d02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d06:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
					mpu6050_msg.angular_velocity.z = Gz;
 8001d0a:	4958      	ldr	r1, [pc, #352]	@ (8001e6c <timer_callback+0x304>)
 8001d0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001d10:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

					rcl_ret_t ret = rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL);
 8001d14:	2200      	movs	r2, #0
 8001d16:	4955      	ldr	r1, [pc, #340]	@ (8001e6c <timer_callback+0x304>)
 8001d18:	4855      	ldr	r0, [pc, #340]	@ (8001e70 <timer_callback+0x308>)
 8001d1a:	f00e fb3f 	bl	801039c <rcl_publish>
 8001d1e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					if (ret != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8001d20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d004      	beq.n	8001d30 <timer_callback+0x1c8>
 8001d26:	f240 1157 	movw	r1, #343	@ 0x157
 8001d2a:	4852      	ldr	r0, [pc, #328]	@ (8001e74 <timer_callback+0x30c>)
 8001d2c:	f01b fb78 	bl	801d420 <iprintf>

					rotation_real.roll = MPU6050.KalmanAngleX;
 8001d30:	4b4b      	ldr	r3, [pc, #300]	@ (8001e60 <timer_callback+0x2f8>)
 8001d32:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001d36:	4950      	ldr	r1, [pc, #320]	@ (8001e78 <timer_callback+0x310>)
 8001d38:	e9c1 2300 	strd	r2, r3, [r1]
					rotation_real.pitch = MPU6050.KalmanAngleY;
 8001d3c:	4b48      	ldr	r3, [pc, #288]	@ (8001e60 <timer_callback+0x2f8>)
 8001d3e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001d42:	494d      	ldr	r1, [pc, #308]	@ (8001e78 <timer_callback+0x310>)
 8001d44:	e9c1 2302 	strd	r2, r3, [r1, #8]

					calculate_gyro_angles(Ax/GRAVITY, Ay/GRAVITY, Az/GRAVITY, Gx, Gy, Gz, 0.01);
 8001d48:	a33d      	add	r3, pc, #244	@ (adr r3, 8001e40 <timer_callback+0x2d8>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001d52:	f7fe fdb3 	bl	80008bc <__aeabi_ddiv>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	ec43 2b18 	vmov	d8, r2, r3
 8001d5e:	a338      	add	r3, pc, #224	@ (adr r3, 8001e40 <timer_callback+0x2d8>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001d68:	f7fe fda8 	bl	80008bc <__aeabi_ddiv>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	ec43 2b19 	vmov	d9, r2, r3
 8001d74:	a332      	add	r3, pc, #200	@ (adr r3, 8001e40 <timer_callback+0x2d8>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001d7e:	f7fe fd9d 	bl	80008bc <__aeabi_ddiv>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	ec43 2b17 	vmov	d7, r2, r3
 8001d8a:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 8001e7c <timer_callback+0x314>
 8001d8e:	ed97 5b14 	vldr	d5, [r7, #80]	@ 0x50
 8001d92:	ed97 4b16 	vldr	d4, [r7, #88]	@ 0x58
 8001d96:	ed97 3b18 	vldr	d3, [r7, #96]	@ 0x60
 8001d9a:	eeb0 2a47 	vmov.f32	s4, s14
 8001d9e:	eef0 2a67 	vmov.f32	s5, s15
 8001da2:	eeb0 1a49 	vmov.f32	s2, s18
 8001da6:	eef0 1a69 	vmov.f32	s3, s19
 8001daa:	eeb0 0a48 	vmov.f32	s0, s16
 8001dae:	eef0 0a68 	vmov.f32	s1, s17
 8001db2:	f7ff f9e5 	bl	8001180 <calculate_gyro_angles>
					calculate_accl_angles(Ax/GRAVITY, Ay/GRAVITY, Az/GRAVITY, Gx, Gy, Gz, 0.01);
 8001db6:	a322      	add	r3, pc, #136	@ (adr r3, 8001e40 <timer_callback+0x2d8>)
 8001db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001dc0:	f7fe fd7c 	bl	80008bc <__aeabi_ddiv>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	ec43 2b18 	vmov	d8, r2, r3
 8001dcc:	a31c      	add	r3, pc, #112	@ (adr r3, 8001e40 <timer_callback+0x2d8>)
 8001dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001dd6:	f7fe fd71 	bl	80008bc <__aeabi_ddiv>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	ec43 2b19 	vmov	d9, r2, r3
 8001de2:	a317      	add	r3, pc, #92	@ (adr r3, 8001e40 <timer_callback+0x2d8>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001dec:	f7fe fd66 	bl	80008bc <__aeabi_ddiv>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	ec43 2b17 	vmov	d7, r2, r3
 8001df8:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 8001e7c <timer_callback+0x314>
 8001dfc:	ed97 5b14 	vldr	d5, [r7, #80]	@ 0x50
 8001e00:	ed97 4b16 	vldr	d4, [r7, #88]	@ 0x58
 8001e04:	ed97 3b18 	vldr	d3, [r7, #96]	@ 0x60
 8001e08:	eeb0 2a47 	vmov.f32	s4, s14
 8001e0c:	eef0 2a67 	vmov.f32	s5, s15
 8001e10:	eeb0 1a49 	vmov.f32	s2, s18
 8001e14:	eef0 1a69 	vmov.f32	s3, s19
 8001e18:	eeb0 0a48 	vmov.f32	s0, s16
 8001e1c:	eef0 0a68 	vmov.f32	s1, s17
 8001e20:	f7ff fa86 	bl	8001330 <calculate_accl_angles>
					calculate_kalm_angles(Ax/GRAVITY, Ay/GRAVITY, Az/GRAVITY, Gx, Gy, Gz, 0.01);
 8001e24:	a306      	add	r3, pc, #24	@ (adr r3, 8001e40 <timer_callback+0x2d8>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001e2e:	f7fe fd45 	bl	80008bc <__aeabi_ddiv>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	ec43 2b18 	vmov	d8, r2, r3
 8001e3a:	e021      	b.n	8001e80 <timer_callback+0x318>
 8001e3c:	f3af 8000 	nop.w
 8001e40:	3a92a305 	.word	0x3a92a305
 8001e44:	40239d01 	.word	0x40239d01
 8001e48:	a2529d39 	.word	0xa2529d39
 8001e4c:	3f91df46 	.word	0x3f91df46
 8001e50:	2000148c 	.word	0x2000148c
 8001e54:	20004ff4 	.word	0x20004ff4
 8001e58:	200013d0 	.word	0x200013d0
 8001e5c:	200013d1 	.word	0x200013d1
 8001e60:	20001240 	.word	0x20001240
 8001e64:	200012a0 	.word	0x200012a0
 8001e68:	200012b8 	.word	0x200012b8
 8001e6c:	20000f28 	.word	0x20000f28
 8001e70:	20000f20 	.word	0x20000f20
 8001e74:	0801ec3c 	.word	0x0801ec3c
 8001e78:	20001318 	.word	0x20001318
 8001e7c:	3c23d70a 	.word	0x3c23d70a
 8001e80:	a3c6      	add	r3, pc, #792	@ (adr r3, 800219c <timer_callback+0x634>)
 8001e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e86:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001e8a:	f7fe fd17 	bl	80008bc <__aeabi_ddiv>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	ec43 2b19 	vmov	d9, r2, r3
 8001e96:	a3c1      	add	r3, pc, #772	@ (adr r3, 800219c <timer_callback+0x634>)
 8001e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001ea0:	f7fe fd0c 	bl	80008bc <__aeabi_ddiv>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	ec43 2b17 	vmov	d7, r2, r3
 8001eac:	ed9f 6aa4 	vldr	s12, [pc, #656]	@ 8002140 <timer_callback+0x5d8>
 8001eb0:	ed97 5b14 	vldr	d5, [r7, #80]	@ 0x50
 8001eb4:	ed97 4b16 	vldr	d4, [r7, #88]	@ 0x58
 8001eb8:	ed97 3b18 	vldr	d3, [r7, #96]	@ 0x60
 8001ebc:	eeb0 2a47 	vmov.f32	s4, s14
 8001ec0:	eef0 2a67 	vmov.f32	s5, s15
 8001ec4:	eeb0 1a49 	vmov.f32	s2, s18
 8001ec8:	eef0 1a69 	vmov.f32	s3, s19
 8001ecc:	eeb0 0a48 	vmov.f32	s0, s16
 8001ed0:	eef0 0a68 	vmov.f32	s1, s17
 8001ed4:	f7ff fb18 	bl	8001508 <calculate_kalm_angles>

					cmd_vel_msg.linear.x = rotation_kalm.roll * DEG_TO_RAD;
 8001ed8:	4b9a      	ldr	r3, [pc, #616]	@ (8002144 <timer_callback+0x5dc>)
 8001eda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ede:	a396      	add	r3, pc, #600	@ (adr r3, 8002138 <timer_callback+0x5d0>)
 8001ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee4:	f7fe fbc0 	bl	8000668 <__aeabi_dmul>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	4b94      	ldr	r3, [pc, #592]	@ (8002148 <timer_callback+0x5e0>)
 8001ef6:	f7fe fce1 	bl	80008bc <__aeabi_ddiv>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4993      	ldr	r1, [pc, #588]	@ (800214c <timer_callback+0x5e4>)
 8001f00:	e9c1 2300 	strd	r2, r3, [r1]
					cmd_vel_msg.angular.z = -(rotation_kalm.pitch * DEG_TO_RAD);
 8001f04:	4b8f      	ldr	r3, [pc, #572]	@ (8002144 <timer_callback+0x5dc>)
 8001f06:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f0a:	a38b      	add	r3, pc, #556	@ (adr r3, 8002138 <timer_callback+0x5d0>)
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	f7fe fbaa 	bl	8000668 <__aeabi_dmul>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	4b89      	ldr	r3, [pc, #548]	@ (8002148 <timer_callback+0x5e0>)
 8001f22:	f7fe fccb 	bl	80008bc <__aeabi_ddiv>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4614      	mov	r4, r2
 8001f2c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001f30:	4b86      	ldr	r3, [pc, #536]	@ (800214c <timer_callback+0x5e4>)
 8001f32:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28

					rcl_ret_t rett = rcl_publish(&cmd_vel_publisher, &cmd_vel_msg, NULL);
 8001f36:	2200      	movs	r2, #0
 8001f38:	4984      	ldr	r1, [pc, #528]	@ (800214c <timer_callback+0x5e4>)
 8001f3a:	4885      	ldr	r0, [pc, #532]	@ (8002150 <timer_callback+0x5e8>)
 8001f3c:	f00e fa2e 	bl	801039c <rcl_publish>
 8001f40:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (rett != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8001f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 8201 	beq.w	800234c <timer_callback+0x7e4>
 8001f4a:	f44f 71b2 	mov.w	r1, #356	@ 0x164
 8001f4e:	4881      	ldr	r0, [pc, #516]	@ (8002154 <timer_callback+0x5ec>)
 8001f50:	f01b fa66 	bl	801d420 <iprintf>
 8001f54:	e1fa      	b.n	800234c <timer_callback+0x7e4>
				}
			}
			else
			{
				static uint32_t timestamp = 0;
				if (timestamp <= HAL_GetTick()){
 8001f56:	f001 fef5 	bl	8003d44 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	4b7e      	ldr	r3, [pc, #504]	@ (8002158 <timer_callback+0x5f0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	f0c0 81f3 	bcc.w	800234c <timer_callback+0x7e4>
					timestamp = HAL_GetTick() + 1000;
 8001f66:	f001 feed 	bl	8003d44 <HAL_GetTick>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001f70:	4a79      	ldr	r2, [pc, #484]	@ (8002158 <timer_callback+0x5f0>)
 8001f72:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001f74:	2120      	movs	r1, #32
 8001f76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f7a:	f004 fcd7 	bl	800692c <HAL_GPIO_TogglePin>
					HAL_I2C_DeInit(&hi2c1);
 8001f7e:	4877      	ldr	r0, [pc, #476]	@ (800215c <timer_callback+0x5f4>)
 8001f80:	f004 fda1 	bl	8006ac6 <HAL_I2C_DeInit>
					HAL_I2C_Init(&hi2c1);
 8001f84:	4875      	ldr	r0, [pc, #468]	@ (800215c <timer_callback+0x5f4>)
 8001f86:	f004 fd03 	bl	8006990 <HAL_I2C_Init>
					MPU6050_Init(&hi2c1);
 8001f8a:	4874      	ldr	r0, [pc, #464]	@ (800215c <timer_callback+0x5f4>)
 8001f8c:	f008 fd4e 	bl	800aa2c <MPU6050_Init>
 8001f90:	e1dc      	b.n	800234c <timer_callback+0x7e4>
				}
			}
		}

		else if (main_Mode == 0)
 8001f92:	4b73      	ldr	r3, [pc, #460]	@ (8002160 <timer_callback+0x5f8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 81d8 	bne.w	800234c <timer_callback+0x7e4>
		{
			if (joy.B == GPIO_PIN_RESET && state_keep_B == 0)
 8001f9c:	4b71      	ldr	r3, [pc, #452]	@ (8002164 <timer_callback+0x5fc>)
 8001f9e:	785b      	ldrb	r3, [r3, #1]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10f      	bne.n	8001fc4 <timer_callback+0x45c>
 8001fa4:	4b70      	ldr	r3, [pc, #448]	@ (8002168 <timer_callback+0x600>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10b      	bne.n	8001fc4 <timer_callback+0x45c>
			{
				wait++;
 8001fac:	4b6f      	ldr	r3, [pc, #444]	@ (800216c <timer_callback+0x604>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	4b6d      	ldr	r3, [pc, #436]	@ (800216c <timer_callback+0x604>)
 8001fb6:	701a      	strb	r2, [r3, #0]
				state_keep_B = 1;
 8001fb8:	4b6b      	ldr	r3, [pc, #428]	@ (8002168 <timer_callback+0x600>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
				state_keep_K = 0;
 8001fbe:	4b6c      	ldr	r3, [pc, #432]	@ (8002170 <timer_callback+0x608>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
			}

			if (joy.B == GPIO_PIN_SET && state_keep_B == 1 && B_count == 0 && wait > 0)
 8001fc4:	4b67      	ldr	r3, [pc, #412]	@ (8002164 <timer_callback+0x5fc>)
 8001fc6:	785b      	ldrb	r3, [r3, #1]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d12e      	bne.n	800202a <timer_callback+0x4c2>
 8001fcc:	4b66      	ldr	r3, [pc, #408]	@ (8002168 <timer_callback+0x600>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d12a      	bne.n	800202a <timer_callback+0x4c2>
 8001fd4:	4b67      	ldr	r3, [pc, #412]	@ (8002174 <timer_callback+0x60c>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d126      	bne.n	800202a <timer_callback+0x4c2>
 8001fdc:	4b63      	ldr	r3, [pc, #396]	@ (800216c <timer_callback+0x604>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d022      	beq.n	800202a <timer_callback+0x4c2>
			{
				keyboard_request.mode.data = "TOB";
 8001fe4:	4b64      	ldr	r3, [pc, #400]	@ (8002178 <timer_callback+0x610>)
 8001fe6:	4a65      	ldr	r2, [pc, #404]	@ (800217c <timer_callback+0x614>)
 8001fe8:	601a      	str	r2, [r3, #0]

				int64_t sq_num;
				rcl_ret_t ret = rcl_send_request(&robot_controller_client, &keyboard_request, &sq_num);
 8001fea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4961      	ldr	r1, [pc, #388]	@ (8002178 <timer_callback+0x610>)
 8001ff2:	4863      	ldr	r0, [pc, #396]	@ (8002180 <timer_callback+0x618>)
 8001ff4:	f00d fd2e 	bl	800fa54 <rcl_send_request>
 8001ff8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac

				if (ret != RCL_RET_OK) cq++;
 8001ffc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <timer_callback+0x4a8>
 8002004:	4b5f      	ldr	r3, [pc, #380]	@ (8002184 <timer_callback+0x61c>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	4b5d      	ldr	r3, [pc, #372]	@ (8002184 <timer_callback+0x61c>)
 800200e:	801a      	strh	r2, [r3, #0]

				B_count = 1;
 8002010:	4b58      	ldr	r3, [pc, #352]	@ (8002174 <timer_callback+0x60c>)
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
				D_count = 0;
 8002016:	4b5c      	ldr	r3, [pc, #368]	@ (8002188 <timer_callback+0x620>)
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
				state_keep_B = 0;
 800201c:	4b52      	ldr	r3, [pc, #328]	@ (8002168 <timer_callback+0x600>)
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
				state_keep_K = 0;
 8002022:	4b53      	ldr	r3, [pc, #332]	@ (8002170 <timer_callback+0x608>)
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
			{
 8002028:	e02e      	b.n	8002088 <timer_callback+0x520>
			}

			else if (joy.B == GPIO_PIN_SET && state_keep_B == 1 && B_count == 1 && wait >= 2)
 800202a:	4b4e      	ldr	r3, [pc, #312]	@ (8002164 <timer_callback+0x5fc>)
 800202c:	785b      	ldrb	r3, [r3, #1]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d12a      	bne.n	8002088 <timer_callback+0x520>
 8002032:	4b4d      	ldr	r3, [pc, #308]	@ (8002168 <timer_callback+0x600>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d126      	bne.n	8002088 <timer_callback+0x520>
 800203a:	4b4e      	ldr	r3, [pc, #312]	@ (8002174 <timer_callback+0x60c>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d122      	bne.n	8002088 <timer_callback+0x520>
 8002042:	4b4a      	ldr	r3, [pc, #296]	@ (800216c <timer_callback+0x604>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d91e      	bls.n	8002088 <timer_callback+0x520>
			{
				keyboard_request.mode.data = "AUT";
 800204a:	4b4b      	ldr	r3, [pc, #300]	@ (8002178 <timer_callback+0x610>)
 800204c:	4a4f      	ldr	r2, [pc, #316]	@ (800218c <timer_callback+0x624>)
 800204e:	601a      	str	r2, [r3, #0]

				int64_t sq_num;
				rcl_ret_t ret = rcl_send_request(&robot_controller_client, &keyboard_request, &sq_num);
 8002050:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002054:	461a      	mov	r2, r3
 8002056:	4948      	ldr	r1, [pc, #288]	@ (8002178 <timer_callback+0x610>)
 8002058:	4849      	ldr	r0, [pc, #292]	@ (8002180 <timer_callback+0x618>)
 800205a:	f00d fcfb 	bl	800fa54 <rcl_send_request>
 800205e:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8

				if (ret != RCL_RET_OK) cq++;
 8002062:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <timer_callback+0x50e>
 800206a:	4b46      	ldr	r3, [pc, #280]	@ (8002184 <timer_callback+0x61c>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	4b44      	ldr	r3, [pc, #272]	@ (8002184 <timer_callback+0x61c>)
 8002074:	801a      	strh	r2, [r3, #0]

				B_count = 0;
 8002076:	4b3f      	ldr	r3, [pc, #252]	@ (8002174 <timer_callback+0x60c>)
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
				state_keep_B = 0;
 800207c:	4b3a      	ldr	r3, [pc, #232]	@ (8002168 <timer_callback+0x600>)
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
				state_keep_K = 0;
 8002082:	4b3b      	ldr	r3, [pc, #236]	@ (8002170 <timer_callback+0x608>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
			}

			if (joy.D == GPIO_PIN_RESET)
 8002088:	4b36      	ldr	r3, [pc, #216]	@ (8002164 <timer_callback+0x5fc>)
 800208a:	78db      	ldrb	r3, [r3, #3]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10b      	bne.n	80020a8 <timer_callback+0x540>
			{
				wait++;
 8002090:	4b36      	ldr	r3, [pc, #216]	@ (800216c <timer_callback+0x604>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b34      	ldr	r3, [pc, #208]	@ (800216c <timer_callback+0x604>)
 800209a:	701a      	strb	r2, [r3, #0]
				state_keep_D  = 1;
 800209c:	4b3c      	ldr	r3, [pc, #240]	@ (8002190 <timer_callback+0x628>)
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
				state_keep_K = 0;
 80020a2:	4b33      	ldr	r3, [pc, #204]	@ (8002170 <timer_callback+0x608>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
			}

			if (joy.D == GPIO_PIN_SET && state_keep_D == 1 && B_count == 1 && D_count == 0 && wait > 2)
 80020a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002164 <timer_callback+0x5fc>)
 80020aa:	78db      	ldrb	r3, [r3, #3]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d179      	bne.n	80021a4 <timer_callback+0x63c>
 80020b0:	4b37      	ldr	r3, [pc, #220]	@ (8002190 <timer_callback+0x628>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d175      	bne.n	80021a4 <timer_callback+0x63c>
 80020b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002174 <timer_callback+0x60c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d171      	bne.n	80021a4 <timer_callback+0x63c>
 80020c0:	4b31      	ldr	r3, [pc, #196]	@ (8002188 <timer_callback+0x620>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d16d      	bne.n	80021a4 <timer_callback+0x63c>
 80020c8:	4b28      	ldr	r3, [pc, #160]	@ (800216c <timer_callback+0x604>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d969      	bls.n	80021a4 <timer_callback+0x63c>
			{
				keyboard_request.mode.data = "TOE";
 80020d0:	4b29      	ldr	r3, [pc, #164]	@ (8002178 <timer_callback+0x610>)
 80020d2:	4a30      	ldr	r2, [pc, #192]	@ (8002194 <timer_callback+0x62c>)
 80020d4:	601a      	str	r2, [r3, #0]

				int64_t sq_numI;
				rcl_ret_t ret = rcl_send_request(&robot_controller_client, &keyboard_request, &sq_numI);
 80020d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020da:	461a      	mov	r2, r3
 80020dc:	4926      	ldr	r1, [pc, #152]	@ (8002178 <timer_callback+0x610>)
 80020de:	4828      	ldr	r0, [pc, #160]	@ (8002180 <timer_callback+0x618>)
 80020e0:	f00d fcb8 	bl	800fa54 <rcl_send_request>
 80020e4:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
				if (ret != RCL_RET_OK) cq++;
 80020e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <timer_callback+0x594>
 80020f0:	4b24      	ldr	r3, [pc, #144]	@ (8002184 <timer_callback+0x61c>)
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	3301      	adds	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	4b22      	ldr	r3, [pc, #136]	@ (8002184 <timer_callback+0x61c>)
 80020fa:	801a      	strh	r2, [r3, #0]

				int64_t sq_numII;
				rcl_ret_t rett = rcl_send_request(&robot_controller_Ref_client, &keyboard_request, &sq_numII);
 80020fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002100:	461a      	mov	r2, r3
 8002102:	491d      	ldr	r1, [pc, #116]	@ (8002178 <timer_callback+0x610>)
 8002104:	4824      	ldr	r0, [pc, #144]	@ (8002198 <timer_callback+0x630>)
 8002106:	f00d fca5 	bl	800fa54 <rcl_send_request>
 800210a:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
				if (rett != RCL_RET_OK) cq++;
 800210e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <timer_callback+0x5ba>
 8002116:	4b1b      	ldr	r3, [pc, #108]	@ (8002184 <timer_callback+0x61c>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	3301      	adds	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <timer_callback+0x61c>)
 8002120:	801a      	strh	r2, [r3, #0]

				D_count = 1;
 8002122:	4b19      	ldr	r3, [pc, #100]	@ (8002188 <timer_callback+0x620>)
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
				state_keep_D = 0;
 8002128:	4b19      	ldr	r3, [pc, #100]	@ (8002190 <timer_callback+0x628>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
				state_keep_K = 0;
 800212e:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <timer_callback+0x608>)
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
			{
 8002134:	e07c      	b.n	8002230 <timer_callback+0x6c8>
 8002136:	bf00      	nop
 8002138:	54442d18 	.word	0x54442d18
 800213c:	400921fb 	.word	0x400921fb
 8002140:	3c23d70a 	.word	0x3c23d70a
 8002144:	20001300 	.word	0x20001300
 8002148:	40668000 	.word	0x40668000
 800214c:	20001070 	.word	0x20001070
 8002150:	20001068 	.word	0x20001068
 8002154:	0801ec3c 	.word	0x0801ec3c
 8002158:	200043d8 	.word	0x200043d8
 800215c:	20004ff4 	.word	0x20004ff4
 8002160:	2000148c 	.word	0x2000148c
 8002164:	20001484 	.word	0x20001484
 8002168:	20001490 	.word	0x20001490
 800216c:	20001494 	.word	0x20001494
 8002170:	20001495 	.word	0x20001495
 8002174:	20001491 	.word	0x20001491
 8002178:	20001208 	.word	0x20001208
 800217c:	0801ec58 	.word	0x0801ec58
 8002180:	20001204 	.word	0x20001204
 8002184:	2000129e 	.word	0x2000129e
 8002188:	20001493 	.word	0x20001493
 800218c:	0801ec5c 	.word	0x0801ec5c
 8002190:	20001492 	.word	0x20001492
 8002194:	0801ec60 	.word	0x0801ec60
 8002198:	20001230 	.word	0x20001230
 800219c:	3a92a305 	.word	0x3a92a305
 80021a0:	40239d01 	.word	0x40239d01
			}

			else if (joy.D == GPIO_PIN_SET && state_keep_D == 1 && B_count == 1 && D_count == 1 && wait > 2)
 80021a4:	4b74      	ldr	r3, [pc, #464]	@ (8002378 <timer_callback+0x810>)
 80021a6:	78db      	ldrb	r3, [r3, #3]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d141      	bne.n	8002230 <timer_callback+0x6c8>
 80021ac:	4b73      	ldr	r3, [pc, #460]	@ (800237c <timer_callback+0x814>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d13d      	bne.n	8002230 <timer_callback+0x6c8>
 80021b4:	4b72      	ldr	r3, [pc, #456]	@ (8002380 <timer_callback+0x818>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d139      	bne.n	8002230 <timer_callback+0x6c8>
 80021bc:	4b71      	ldr	r3, [pc, #452]	@ (8002384 <timer_callback+0x81c>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d135      	bne.n	8002230 <timer_callback+0x6c8>
 80021c4:	4b70      	ldr	r3, [pc, #448]	@ (8002388 <timer_callback+0x820>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d931      	bls.n	8002230 <timer_callback+0x6c8>
			{
				keyboard_request.mode.data = "TOB";
 80021cc:	4b6f      	ldr	r3, [pc, #444]	@ (800238c <timer_callback+0x824>)
 80021ce:	4a70      	ldr	r2, [pc, #448]	@ (8002390 <timer_callback+0x828>)
 80021d0:	601a      	str	r2, [r3, #0]

				int64_t sq_numI;
				rcl_ret_t ret = rcl_send_request(&robot_controller_client, &keyboard_request, &sq_numI);
 80021d2:	f107 0320 	add.w	r3, r7, #32
 80021d6:	461a      	mov	r2, r3
 80021d8:	496c      	ldr	r1, [pc, #432]	@ (800238c <timer_callback+0x824>)
 80021da:	486e      	ldr	r0, [pc, #440]	@ (8002394 <timer_callback+0x82c>)
 80021dc:	f00d fc3a 	bl	800fa54 <rcl_send_request>
 80021e0:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
				if (ret != RCL_RET_OK) cq++;
 80021e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <timer_callback+0x690>
 80021ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002398 <timer_callback+0x830>)
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	4b68      	ldr	r3, [pc, #416]	@ (8002398 <timer_callback+0x830>)
 80021f6:	801a      	strh	r2, [r3, #0]

				int64_t sq_numII;
				rcl_ret_t rett = rcl_send_request(&robot_controller_Ref_client, &keyboard_request, &sq_numII);
 80021f8:	f107 0318 	add.w	r3, r7, #24
 80021fc:	461a      	mov	r2, r3
 80021fe:	4963      	ldr	r1, [pc, #396]	@ (800238c <timer_callback+0x824>)
 8002200:	4866      	ldr	r0, [pc, #408]	@ (800239c <timer_callback+0x834>)
 8002202:	f00d fc27 	bl	800fa54 <rcl_send_request>
 8002206:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
				if (rett != RCL_RET_OK) cq++;
 800220a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <timer_callback+0x6b6>
 8002212:	4b61      	ldr	r3, [pc, #388]	@ (8002398 <timer_callback+0x830>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	3301      	adds	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	4b5f      	ldr	r3, [pc, #380]	@ (8002398 <timer_callback+0x830>)
 800221c:	801a      	strh	r2, [r3, #0]

				D_count = 0;
 800221e:	4b59      	ldr	r3, [pc, #356]	@ (8002384 <timer_callback+0x81c>)
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
				state_keep_D = 0;
 8002224:	4b55      	ldr	r3, [pc, #340]	@ (800237c <timer_callback+0x814>)
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
				state_keep_K = 0;
 800222a:	4b5d      	ldr	r3, [pc, #372]	@ (80023a0 <timer_callback+0x838>)
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
			}

			if (joy.K == GPIO_PIN_RESET)
 8002230:	4b51      	ldr	r3, [pc, #324]	@ (8002378 <timer_callback+0x810>)
 8002232:	791b      	ldrb	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d108      	bne.n	800224a <timer_callback+0x6e2>
			{
				wait++;
 8002238:	4b53      	ldr	r3, [pc, #332]	@ (8002388 <timer_callback+0x820>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	b2da      	uxtb	r2, r3
 8002240:	4b51      	ldr	r3, [pc, #324]	@ (8002388 <timer_callback+0x820>)
 8002242:	701a      	strb	r2, [r3, #0]
				state_keep_K  = 1;
 8002244:	4b56      	ldr	r3, [pc, #344]	@ (80023a0 <timer_callback+0x838>)
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
			}

			if (joy.K == GPIO_PIN_SET && state_keep_K == 1 && wait > 2)
 800224a:	4b4b      	ldr	r3, [pc, #300]	@ (8002378 <timer_callback+0x810>)
 800224c:	791b      	ldrb	r3, [r3, #4]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d11d      	bne.n	800228e <timer_callback+0x726>
 8002252:	4b53      	ldr	r3, [pc, #332]	@ (80023a0 <timer_callback+0x838>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d119      	bne.n	800228e <timer_callback+0x726>
 800225a:	4b4b      	ldr	r3, [pc, #300]	@ (8002388 <timer_callback+0x820>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d915      	bls.n	800228e <timer_callback+0x726>
			{
				int64_t sq_numI;
				rcl_ret_t ret = rcl_send_request(&robot_controller_saved_client, &save_request, &sq_numI);
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	461a      	mov	r2, r3
 8002268:	494e      	ldr	r1, [pc, #312]	@ (80023a4 <timer_callback+0x83c>)
 800226a:	484f      	ldr	r0, [pc, #316]	@ (80023a8 <timer_callback+0x840>)
 800226c:	f00d fbf2 	bl	800fa54 <rcl_send_request>
 8002270:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
				if (ret != RCL_RET_OK) cq++;
 8002274:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <timer_callback+0x720>
 800227c:	4b46      	ldr	r3, [pc, #280]	@ (8002398 <timer_callback+0x830>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	4b44      	ldr	r3, [pc, #272]	@ (8002398 <timer_callback+0x830>)
 8002286:	801a      	strh	r2, [r3, #0]

				state_keep_K = 0;
 8002288:	4b45      	ldr	r3, [pc, #276]	@ (80023a0 <timer_callback+0x838>)
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
			}

			ADC_Averaged();
 800228e:	f000 f939 	bl	8002504 <ADC_Averaged>
			Read_Buttons();
 8002292:	f000 f983 	bl	800259c <Read_Buttons>

			float zp = (joy.A == GPIO_PIN_SET) ? 0 : 0.2;
 8002296:	4b38      	ldr	r3, [pc, #224]	@ (8002378 <timer_callback+0x810>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d102      	bne.n	80022a4 <timer_callback+0x73c>
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	e000      	b.n	80022a6 <timer_callback+0x73e>
 80022a4:	4b41      	ldr	r3, [pc, #260]	@ (80023ac <timer_callback+0x844>)
 80022a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			float zm = (joy.C == GPIO_PIN_SET) ? 0 : -0.2;
 80022aa:	4b33      	ldr	r3, [pc, #204]	@ (8002378 <timer_callback+0x810>)
 80022ac:	789b      	ldrb	r3, [r3, #2]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d102      	bne.n	80022b8 <timer_callback+0x750>
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	e000      	b.n	80022ba <timer_callback+0x752>
 80022b8:	4b3d      	ldr	r3, [pc, #244]	@ (80023b0 <timer_callback+0x848>)
 80022ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

			cmd_vel_msg.linear.x = (map_adc_to_output(ADC_Average[1])) * 0.2;
 80022be:	4b3d      	ldr	r3, [pc, #244]	@ (80023b4 <timer_callback+0x84c>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fc14 	bl	8001af0 <map_adc_to_output>
 80022c8:	ee10 3a10 	vmov	r3, s0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f973 	bl	80005b8 <__aeabi_f2d>
 80022d2:	a327      	add	r3, pc, #156	@ (adr r3, 8002370 <timer_callback+0x808>)
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	f7fe f9c6 	bl	8000668 <__aeabi_dmul>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4935      	ldr	r1, [pc, #212]	@ (80023b8 <timer_callback+0x850>)
 80022e2:	e9c1 2300 	strd	r2, r3, [r1]
			cmd_vel_msg.linear.y = (map_adc_to_output(ADC_Average[0])) * 0.2;
 80022e6:	4b33      	ldr	r3, [pc, #204]	@ (80023b4 <timer_callback+0x84c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fc00 	bl	8001af0 <map_adc_to_output>
 80022f0:	ee10 3a10 	vmov	r3, s0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f95f 	bl	80005b8 <__aeabi_f2d>
 80022fa:	a31d      	add	r3, pc, #116	@ (adr r3, 8002370 <timer_callback+0x808>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fe f9b2 	bl	8000668 <__aeabi_dmul>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	492b      	ldr	r1, [pc, #172]	@ (80023b8 <timer_callback+0x850>)
 800230a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			cmd_vel_msg.linear.z = zp + zm;
 800230e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8002312:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231a:	ee17 0a90 	vmov	r0, s15
 800231e:	f7fe f94b 	bl	80005b8 <__aeabi_f2d>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4924      	ldr	r1, [pc, #144]	@ (80023b8 <timer_callback+0x850>)
 8002328:	e9c1 2304 	strd	r2, r3, [r1, #16]

			rcl_ret_t rett = rcl_publish(&cmd_vel_publisher, &cmd_vel_msg, NULL);
 800232c:	2200      	movs	r2, #0
 800232e:	4922      	ldr	r1, [pc, #136]	@ (80023b8 <timer_callback+0x850>)
 8002330:	4822      	ldr	r0, [pc, #136]	@ (80023bc <timer_callback+0x854>)
 8002332:	f00e f833 	bl	801039c <rcl_publish>
 8002336:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
			if (rett != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 800233a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800233e:	2b00      	cmp	r3, #0
 8002340:	d004      	beq.n	800234c <timer_callback+0x7e4>
 8002342:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8002346:	481e      	ldr	r0, [pc, #120]	@ (80023c0 <timer_callback+0x858>)
 8002348:	f01b f86a 	bl	801d420 <iprintf>
		}

	    HAL_IWDG_Refresh(&hiwdg);
 800234c:	481d      	ldr	r0, [pc, #116]	@ (80023c4 <timer_callback+0x85c>)
 800234e:	f005 f9cb 	bl	80076e8 <HAL_IWDG_Refresh>
	    cc++;
 8002352:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <timer_callback+0x860>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	3301      	adds	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <timer_callback+0x860>)
 800235c:	801a      	strh	r2, [r3, #0]
	}
}
 800235e:	bf00      	nop
 8002360:	37b0      	adds	r7, #176	@ 0xb0
 8002362:	46bd      	mov	sp, r7
 8002364:	ecbd 8b04 	vpop	{d8-d9}
 8002368:	bdb0      	pop	{r4, r5, r7, pc}
 800236a:	bf00      	nop
 800236c:	f3af 8000 	nop.w
 8002370:	9999999a 	.word	0x9999999a
 8002374:	3fc99999 	.word	0x3fc99999
 8002378:	20001484 	.word	0x20001484
 800237c:	20001492 	.word	0x20001492
 8002380:	20001491 	.word	0x20001491
 8002384:	20001493 	.word	0x20001493
 8002388:	20001494 	.word	0x20001494
 800238c:	20001208 	.word	0x20001208
 8002390:	0801ec58 	.word	0x0801ec58
 8002394:	20001204 	.word	0x20001204
 8002398:	2000129e 	.word	0x2000129e
 800239c:	20001230 	.word	0x20001230
 80023a0:	20001495 	.word	0x20001495
 80023a4:	20001238 	.word	0x20001238
 80023a8:	20001234 	.word	0x20001234
 80023ac:	3e4ccccd 	.word	0x3e4ccccd
 80023b0:	be4ccccd 	.word	0xbe4ccccd
 80023b4:	20001474 	.word	0x20001474
 80023b8:	20001070 	.word	0x20001070
 80023bc:	20001068 	.word	0x20001068
 80023c0:	0801ec3c 	.word	0x0801ec3c
 80023c4:	20005048 	.word	0x20005048
 80023c8:	20001298 	.word	0x20001298

080023cc <imu_calib_service_callback>:

void imu_calib_service_callback(const void * request_msg, void * response_msg){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  // Cast messages to expected types
  imu_interfaces__srv__ImuCalibration_Request * req_in =
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	617b      	str	r3, [r7, #20]
    (imu_interfaces__srv__ImuCalibration_Request *) request_msg;
  imu_interfaces__srv__ImuCalibration_Response * res_in =
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	613b      	str	r3, [r7, #16]
    (imu_interfaces__srv__ImuCalibration_Response *) response_msg;

  size_t accl_size = sizeof(req_in->imu_calib.linear_acceleration_covariance);
 80023de:	2348      	movs	r3, #72	@ 0x48
 80023e0:	60fb      	str	r3, [r7, #12]
  size_t gyro_size = sizeof(req_in->imu_calib.angular_velocity_covariance);
 80023e2:	2348      	movs	r3, #72	@ 0x48
 80023e4:	60bb      	str	r3, [r7, #8]
  memcpy(mpu6050_msg.linear_acceleration_covariance, req_in->imu_calib.linear_acceleration_covariance, accl_size);
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	33f8      	adds	r3, #248	@ 0xf8
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4619      	mov	r1, r3
 80023ee:	481e      	ldr	r0, [pc, #120]	@ (8002468 <imu_calib_service_callback+0x9c>)
 80023f0:	f01b fa5f 	bl	801d8b2 <memcpy>
  memcpy(mpu6050_msg.angular_velocity_covariance, req_in->imu_calib.angular_velocity_covariance, gyro_size);
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3398      	adds	r3, #152	@ 0x98
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	4619      	mov	r1, r3
 80023fc:	481b      	ldr	r0, [pc, #108]	@ (800246c <imu_calib_service_callback+0xa0>)
 80023fe:	f01b fa58 	bl	801d8b2 <memcpy>

  accl_offset.x = req_in->imu_calib.linear_acceleration.x;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8002408:	4919      	ldr	r1, [pc, #100]	@ (8002470 <imu_calib_service_callback+0xa4>)
 800240a:	e9c1 2300 	strd	r2, r3, [r1]
  accl_offset.y = req_in->imu_calib.linear_acceleration.y;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 8002414:	4916      	ldr	r1, [pc, #88]	@ (8002470 <imu_calib_service_callback+0xa4>)
 8002416:	e9c1 2302 	strd	r2, r3, [r1, #8]
  accl_offset.z = req_in->imu_calib.linear_acceleration.z;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8002420:	4913      	ldr	r1, [pc, #76]	@ (8002470 <imu_calib_service_callback+0xa4>)
 8002422:	e9c1 2304 	strd	r2, r3, [r1, #16]

  gyro_offset.x = req_in->imu_calib.angular_velocity.x;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 800242c:	4911      	ldr	r1, [pc, #68]	@ (8002474 <imu_calib_service_callback+0xa8>)
 800242e:	e9c1 2300 	strd	r2, r3, [r1]
  gyro_offset.y = req_in->imu_calib.angular_velocity.y;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002438:	490e      	ldr	r1, [pc, #56]	@ (8002474 <imu_calib_service_callback+0xa8>)
 800243a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  gyro_offset.z = req_in->imu_calib.angular_velocity.z;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002444:	490b      	ldr	r1, [pc, #44]	@ (8002474 <imu_calib_service_callback+0xa8>)
 8002446:	e9c1 2304 	strd	r2, r3, [r1, #16]

  is_calib = true;
 800244a:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <imu_calib_service_callback+0xac>)
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
  res_in->success = true;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002456:	2120      	movs	r1, #32
 8002458:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800245c:	f004 fa66 	bl	800692c <HAL_GPIO_TogglePin>

}
 8002460:	bf00      	nop
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20001020 	.word	0x20001020
 800246c:	20000fc0 	.word	0x20000fc0
 8002470:	200012a0 	.word	0x200012a0
 8002474:	200012b8 	.word	0x200012b8
 8002478:	200013d0 	.word	0x200013d0

0800247c <imu_status_service_callback>:

void imu_status_service_callback(const void * request_msg, void * response_msg){
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  // Cast messages to expected types
  std_srvs__srv__SetBool_Request * req_in =
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	617b      	str	r3, [r7, #20]
    (std_srvs__srv__SetBool_Request *) request_msg;
  std_srvs__srv__SetBool_Response * res_in =
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	613b      	str	r3, [r7, #16]
    (std_srvs__srv__SetBool_Response *) response_msg;

  if (req_in->data){
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d020      	beq.n	80024d8 <imu_status_service_callback+0x5c>
	  uint32_t i2cError = HAL_I2C_GetError(&hi2c1);
 8002496:	4815      	ldr	r0, [pc, #84]	@ (80024ec <imu_status_service_callback+0x70>)
 8002498:	f004 fd72 	bl	8006f80 <HAL_I2C_GetError>
 800249c:	60f8      	str	r0, [r7, #12]
	  if (i2cError == HAL_I2C_ERROR_NONE) {
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10c      	bne.n	80024be <imu_status_service_callback+0x42>
	      res_in->success = true;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
	      res_in->message.data = "MPU6050 is connected.";
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4a10      	ldr	r2, [pc, #64]	@ (80024f0 <imu_status_service_callback+0x74>)
 80024ae:	605a      	str	r2, [r3, #4]
		  cs++;
 80024b0:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <imu_status_service_callback+0x78>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	3301      	adds	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <imu_status_service_callback+0x78>)
 80024ba:	801a      	strh	r2, [r3, #0]
  else{
      res_in->success = false;
      res_in->message.data = "Request false.";
  }

}
 80024bc:	e012      	b.n	80024e4 <imu_status_service_callback+0x68>
	      res_in->success = false;
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
	      res_in->message.data = "MPU6050 is not connect, Error with I2C interfaces.";
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4a0c      	ldr	r2, [pc, #48]	@ (80024f8 <imu_status_service_callback+0x7c>)
 80024c8:	605a      	str	r2, [r3, #4]
		  ct++;
 80024ca:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <imu_status_service_callback+0x80>)
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	3301      	adds	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <imu_status_service_callback+0x80>)
 80024d4:	801a      	strh	r2, [r3, #0]
}
 80024d6:	e005      	b.n	80024e4 <imu_status_service_callback+0x68>
      res_in->success = false;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
      res_in->message.data = "Request false.";
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4a07      	ldr	r2, [pc, #28]	@ (8002500 <imu_status_service_callback+0x84>)
 80024e2:	605a      	str	r2, [r3, #4]
}
 80024e4:	bf00      	nop
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20004ff4 	.word	0x20004ff4
 80024f0:	0801ec64 	.word	0x0801ec64
 80024f4:	2000129a 	.word	0x2000129a
 80024f8:	0801ec7c 	.word	0x0801ec7c
 80024fc:	2000129c 	.word	0x2000129c
 8002500:	0801ecb0 	.word	0x0801ecb0

08002504 <ADC_Averaged>:

void ADC_Averaged()
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
	for (int i = 0; i < 40; i++)
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
 800250e:	e017      	b.n	8002540 <ADC_Averaged+0x3c>
	{
		ADC_SumAPot[0] += ADCBuffer[2*i];
 8002510:	4b1e      	ldr	r3, [pc, #120]	@ (800258c <ADC_Averaged+0x88>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	0052      	lsls	r2, r2, #1
 8002518:	491d      	ldr	r1, [pc, #116]	@ (8002590 <ADC_Averaged+0x8c>)
 800251a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800251e:	4413      	add	r3, r2
 8002520:	4a1a      	ldr	r2, [pc, #104]	@ (800258c <ADC_Averaged+0x88>)
 8002522:	6013      	str	r3, [r2, #0]
		ADC_SumAPot[1] += ADCBuffer[1+(2*i)];
 8002524:	4b19      	ldr	r3, [pc, #100]	@ (800258c <ADC_Averaged+0x88>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	0052      	lsls	r2, r2, #1
 800252c:	3201      	adds	r2, #1
 800252e:	4918      	ldr	r1, [pc, #96]	@ (8002590 <ADC_Averaged+0x8c>)
 8002530:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002534:	4413      	add	r3, r2
 8002536:	4a15      	ldr	r2, [pc, #84]	@ (800258c <ADC_Averaged+0x88>)
 8002538:	6053      	str	r3, [r2, #4]
	for (int i = 0; i < 40; i++)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3301      	adds	r3, #1
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b27      	cmp	r3, #39	@ 0x27
 8002544:	dde4      	ble.n	8002510 <ADC_Averaged+0xc>
	}

	for (int i = 0; i < 2; i++)
 8002546:	2300      	movs	r3, #0
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	e015      	b.n	8002578 <ADC_Averaged+0x74>
	{
		ADC_Average[i] = ADC_SumAPot[i] / 40;
 800254c:	4a0f      	ldr	r2, [pc, #60]	@ (800258c <ADC_Averaged+0x88>)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002554:	4a0f      	ldr	r2, [pc, #60]	@ (8002594 <ADC_Averaged+0x90>)
 8002556:	fb82 1203 	smull	r1, r2, r2, r3
 800255a:	1112      	asrs	r2, r2, #4
 800255c:	17db      	asrs	r3, r3, #31
 800255e:	1ad2      	subs	r2, r2, r3
 8002560:	490d      	ldr	r1, [pc, #52]	@ (8002598 <ADC_Averaged+0x94>)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ADC_SumAPot[i] = 0;
 8002568:	4a08      	ldr	r2, [pc, #32]	@ (800258c <ADC_Averaged+0x88>)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2100      	movs	r1, #0
 800256e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 2; i++)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2b01      	cmp	r3, #1
 800257c:	dde6      	ble.n	800254c <ADC_Averaged+0x48>
	}
}
 800257e:	bf00      	nop
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	2000147c 	.word	0x2000147c
 8002590:	200013d4 	.word	0x200013d4
 8002594:	66666667 	.word	0x66666667
 8002598:	20001474 	.word	0x20001474

0800259c <Read_Buttons>:

void Read_Buttons()
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
	joy.A = HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin);
 80025a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025a8:	f004 f990 	bl	80068cc <HAL_GPIO_ReadPin>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b12      	ldr	r3, [pc, #72]	@ (80025fc <Read_Buttons+0x60>)
 80025b2:	701a      	strb	r2, [r3, #0]
	joy.B = HAL_GPIO_ReadPin(B_GPIO_Port, B_Pin);
 80025b4:	2108      	movs	r1, #8
 80025b6:	4812      	ldr	r0, [pc, #72]	@ (8002600 <Read_Buttons+0x64>)
 80025b8:	f004 f988 	bl	80068cc <HAL_GPIO_ReadPin>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	4b0e      	ldr	r3, [pc, #56]	@ (80025fc <Read_Buttons+0x60>)
 80025c2:	705a      	strb	r2, [r3, #1]
	joy.C = HAL_GPIO_ReadPin(C_GPIO_Port, C_Pin);
 80025c4:	2120      	movs	r1, #32
 80025c6:	480e      	ldr	r0, [pc, #56]	@ (8002600 <Read_Buttons+0x64>)
 80025c8:	f004 f980 	bl	80068cc <HAL_GPIO_ReadPin>
 80025cc:	4603      	mov	r3, r0
 80025ce:	461a      	mov	r2, r3
 80025d0:	4b0a      	ldr	r3, [pc, #40]	@ (80025fc <Read_Buttons+0x60>)
 80025d2:	709a      	strb	r2, [r3, #2]
	joy.D = HAL_GPIO_ReadPin(D_GPIO_Port, D_Pin);
 80025d4:	2110      	movs	r1, #16
 80025d6:	480a      	ldr	r0, [pc, #40]	@ (8002600 <Read_Buttons+0x64>)
 80025d8:	f004 f978 	bl	80068cc <HAL_GPIO_ReadPin>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <Read_Buttons+0x60>)
 80025e2:	70da      	strb	r2, [r3, #3]
	joy.K = HAL_GPIO_ReadPin(K_GPIO_Port, K_Pin);
 80025e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025ec:	f004 f96e 	bl	80068cc <HAL_GPIO_ReadPin>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b01      	ldr	r3, [pc, #4]	@ (80025fc <Read_Buttons+0x60>)
 80025f6:	711a      	strb	r2, [r3, #4]
}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20001484 	.word	0x20001484
 8002600:	48000400 	.word	0x48000400

08002604 <HAL_GPIO_EXTI_Callback>:
//    (robotic_interfaces__srv__Keyboard_Response *) response_msg;

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10)
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002614:	d10e      	bne.n	8002634 <HAL_GPIO_EXTI_Callback+0x30>
	{
		if (main_Mode == 0) main_Mode = 1;
 8002616:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d103      	bne.n	8002626 <HAL_GPIO_EXTI_Callback+0x22>
 800261e:	4b08      	ldr	r3, [pc, #32]	@ (8002640 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]
		else if (main_Mode == 1) main_Mode = 0;
	}
}
 8002624:	e006      	b.n	8002634 <HAL_GPIO_EXTI_Callback+0x30>
		else if (main_Mode == 1) main_Mode = 0;
 8002626:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d102      	bne.n	8002634 <HAL_GPIO_EXTI_Callback+0x30>
 800262e:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	2000148c 	.word	0x2000148c

08002644 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  while (MPU6050_Init(&hi2c1) == 1);
 8002648:	bf00      	nop
 800264a:	480f      	ldr	r0, [pc, #60]	@ (8002688 <MX_FREERTOS_Init+0x44>)
 800264c:	f008 f9ee 	bl	800aa2c <MPU6050_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b01      	cmp	r3, #1
 8002654:	d0f9      	beq.n	800264a <MX_FREERTOS_Init+0x6>
  Kalman_Init(&kalmanX);
 8002656:	480d      	ldr	r0, [pc, #52]	@ (800268c <MX_FREERTOS_Init+0x48>)
 8002658:	f7ff f88a 	bl	8001770 <Kalman_Init>
  Kalman_Init(&kalmanY);
 800265c:	480c      	ldr	r0, [pc, #48]	@ (8002690 <MX_FREERTOS_Init+0x4c>)
 800265e:	f7ff f887 	bl	8001770 <Kalman_Init>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002662:	217f      	movs	r1, #127	@ 0x7f
 8002664:	480b      	ldr	r0, [pc, #44]	@ (8002694 <MX_FREERTOS_Init+0x50>)
 8002666:	f003 f913 	bl	8005890 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 80);
 800266a:	2250      	movs	r2, #80	@ 0x50
 800266c:	490a      	ldr	r1, [pc, #40]	@ (8002698 <MX_FREERTOS_Init+0x54>)
 800266e:	4809      	ldr	r0, [pc, #36]	@ (8002694 <MX_FREERTOS_Init+0x50>)
 8002670:	f001 ff96 	bl	80045a0 <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002674:	4a09      	ldr	r2, [pc, #36]	@ (800269c <MX_FREERTOS_Init+0x58>)
 8002676:	2100      	movs	r1, #0
 8002678:	4809      	ldr	r0, [pc, #36]	@ (80026a0 <MX_FREERTOS_Init+0x5c>)
 800267a:	f008 fe01 	bl	800b280 <osThreadNew>
 800267e:	4603      	mov	r3, r0
 8002680:	4a08      	ldr	r2, [pc, #32]	@ (80026a4 <MX_FREERTOS_Init+0x60>)
 8002682:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20004ff4 	.word	0x20004ff4
 800268c:	20001330 	.word	0x20001330
 8002690:	20001380 	.word	0x20001380
 8002694:	20000e4c 	.word	0x20000e4c
 8002698:	200013d4 	.word	0x200013d4
 800269c:	0801ed90 	.word	0x0801ed90
 80026a0:	080026a9 	.word	0x080026a9
 80026a4:	20001498 	.word	0x20001498

080026a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80026a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026ac:	b0f2      	sub	sp, #456	@ 0x1c8
 80026ae:	af02      	add	r7, sp, #8
 80026b0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026b4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026b8:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	// micro-ROS configuration

	rmw_uros_set_custom_transport(
 80026ba:	4b9e      	ldr	r3, [pc, #632]	@ (8002934 <StartDefaultTask+0x28c>)
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	4b9e      	ldr	r3, [pc, #632]	@ (8002938 <StartDefaultTask+0x290>)
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	4b9e      	ldr	r3, [pc, #632]	@ (800293c <StartDefaultTask+0x294>)
 80026c4:	4a9e      	ldr	r2, [pc, #632]	@ (8002940 <StartDefaultTask+0x298>)
 80026c6:	499f      	ldr	r1, [pc, #636]	@ (8002944 <StartDefaultTask+0x29c>)
 80026c8:	2001      	movs	r0, #1
 80026ca:	f00f fbdd 	bl	8011e88 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80026ce:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80026d2:	4618      	mov	r0, r3
 80026d4:	f00e fe74 	bl	80113c0 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80026d8:	4b9b      	ldr	r3, [pc, #620]	@ (8002948 <StartDefaultTask+0x2a0>)
 80026da:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	freeRTOS_allocator.deallocate = microros_deallocate;
 80026de:	4b9b      	ldr	r3, [pc, #620]	@ (800294c <StartDefaultTask+0x2a4>)
 80026e0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
	freeRTOS_allocator.reallocate = microros_reallocate;
 80026e4:	4b9a      	ldr	r3, [pc, #616]	@ (8002950 <StartDefaultTask+0x2a8>)
 80026e6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80026ea:	4b9a      	ldr	r3, [pc, #616]	@ (8002954 <StartDefaultTask+0x2ac>)
 80026ec:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80026f0:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80026f4:	4618      	mov	r0, r3
 80026f6:	f00e fe71 	bl	80113dc <rcutils_set_default_allocator>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f083 0301 	eor.w	r3, r3, #1
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d004      	beq.n	8002710 <StartDefaultTask+0x68>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 8002706:	f240 2191 	movw	r1, #657	@ 0x291
 800270a:	4893      	ldr	r0, [pc, #588]	@ (8002958 <StartDefaultTask+0x2b0>)
 800270c:	f01a fe88 	bl	801d420 <iprintf>
	}

	GPIO_PinState B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8002710:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002714:	4891      	ldr	r0, [pc, #580]	@ (800295c <StartDefaultTask+0x2b4>)
 8002716:	f004 f8d9 	bl	80068cc <HAL_GPIO_ReadPin>
 800271a:	4603      	mov	r3, r0
 800271c:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb
	rclc_support_t support;
	rclc_executor_t executor;
	rcl_allocator_t allocator;
	rcl_init_options_t init_options;

	const unsigned int timer_period = RCL_MS_TO_NS(10);
 8002720:	4b8f      	ldr	r3, [pc, #572]	@ (8002960 <StartDefaultTask+0x2b8>)
 8002722:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
	const int timeout_ms = 5000;
 8002726:	f241 3388 	movw	r3, #5000	@ 0x1388
 800272a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
	int executor_num = 2;
 800272e:	2302      	movs	r3, #2
 8002730:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

	// Get message type support
	const rosidl_message_type_support_t * imu_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu);
 8002734:	f011 fb96 	bl	8013e64 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8002738:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac

	const rosidl_message_type_support_t * cmd_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist);
 800273c:	f00b fafc 	bl	800dd38 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8002740:	f8c7 01a8 	str.w	r0, [r7, #424]	@ 0x1a8

	const rosidl_service_type_support_t * imu_calib_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(imu_interfaces, srv, ImuCalibration);
 8002744:	f00b fc34 	bl	800dfb0 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>
 8002748:	f8c7 01a4 	str.w	r0, [r7, #420]	@ 0x1a4

	const rosidl_service_type_support_t * imu_status_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, SetBool);
 800274c:	f011 fdb0 	bl	80142b0 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>
 8002750:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0

	const rosidl_service_type_support_t * keyboard_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(robotic_interfaces, srv, Keyboard);
 8002754:	f011 f92e 	bl	80139b4 <rosidl_typesupport_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard>
 8002758:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c

	const rosidl_service_type_support_t * trigger_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, Trigger);
 800275c:	f011 fdc8 	bl	80142f0 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger>
 8002760:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

	allocator = rcl_get_default_allocator();
 8002764:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002768:	f5a3 748a 	sub.w	r4, r3, #276	@ 0x114
 800276c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002770:	4618      	mov	r0, r3
 8002772:	f00e fe51 	bl	8011418 <rcutils_get_default_allocator>
 8002776:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800277a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800277e:	461d      	mov	r5, r3
 8002780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002784:	682b      	ldr	r3, [r5, #0]
 8002786:	6023      	str	r3, [r4, #0]

	executor = rclc_executor_get_zero_initialized_executor();
 8002788:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800278c:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 8002790:	463b      	mov	r3, r7
 8002792:	4618      	mov	r0, r3
 8002794:	f00e f9c4 	bl	8010b20 <rclc_executor_get_zero_initialized_executor>
 8002798:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800279c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80027a0:	4620      	mov	r0, r4
 80027a2:	4619      	mov	r1, r3
 80027a4:	2388      	movs	r3, #136	@ 0x88
 80027a6:	461a      	mov	r2, r3
 80027a8:	f01b f883 	bl	801d8b2 <memcpy>

	init_options = rcl_get_zero_initialized_init_options();
 80027ac:	f00d f9da 	bl	800fb64 <rcl_get_zero_initialized_init_options>
 80027b0:	4602      	mov	r2, r0
 80027b2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027b6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80027ba:	601a      	str	r2, [r3, #0]

	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 80027bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027c4:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 80027c8:	466d      	mov	r5, sp
 80027ca:	f103 020c 	add.w	r2, r3, #12
 80027ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80027d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027d8:	4620      	mov	r0, r4
 80027da:	f00d f9c5 	bl	800fb68 <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 69));
 80027de:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80027e2:	2145      	movs	r1, #69	@ 0x45
 80027e4:	4618      	mov	r0, r3
 80027e6:	f00d fabb 	bl	800fd60 <rcl_init_options_set_domain_id>

	//create support init_options
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80027ea:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80027ee:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 80027f2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	f00e fc9b 	bl	8011138 <rclc_support_init_with_options>

	//create timer
	rclc_timer_init_default(&mpu6050_timer, &support, timer_period, timer_callback);
 8002802:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002806:	2200      	movs	r2, #0
 8002808:	4698      	mov	r8, r3
 800280a:	4691      	mov	r9, r2
 800280c:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 8002810:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8002814:	4b53      	ldr	r3, [pc, #332]	@ (8002964 <StartDefaultTask+0x2bc>)
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	4642      	mov	r2, r8
 800281a:	464b      	mov	r3, r9
 800281c:	f00e fd98 	bl	8011350 <rclc_timer_init_default>

	// create node
	rclc_node_init_default(&node, "G474RE_MPU6050_node", "", &support);
 8002820:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8002824:	4a50      	ldr	r2, [pc, #320]	@ (8002968 <StartDefaultTask+0x2c0>)
 8002826:	4951      	ldr	r1, [pc, #324]	@ (800296c <StartDefaultTask+0x2c4>)
 8002828:	4851      	ldr	r0, [pc, #324]	@ (8002970 <StartDefaultTask+0x2c8>)
 800282a:	f00e fcb9 	bl	80111a0 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_best_effort(&mpu6050_publisher, &node, imu_type_support, "mpu6050_publisher");
 800282e:	4b51      	ldr	r3, [pc, #324]	@ (8002974 <StartDefaultTask+0x2cc>)
 8002830:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8002834:	494e      	ldr	r1, [pc, #312]	@ (8002970 <StartDefaultTask+0x2c8>)
 8002836:	4850      	ldr	r0, [pc, #320]	@ (8002978 <StartDefaultTask+0x2d0>)
 8002838:	f00e fd22 	bl	8011280 <rclc_publisher_init_best_effort>
	rclc_publisher_init_default(&cmd_vel_publisher, &node, cmd_type_support, "cmd_vel");
 800283c:	4b4f      	ldr	r3, [pc, #316]	@ (800297c <StartDefaultTask+0x2d4>)
 800283e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8002842:	494b      	ldr	r1, [pc, #300]	@ (8002970 <StartDefaultTask+0x2c8>)
 8002844:	484e      	ldr	r0, [pc, #312]	@ (8002980 <StartDefaultTask+0x2d8>)
 8002846:	f00e fce7 	bl	8011218 <rclc_publisher_init_default>

	//create subscriber


	//create service server
	if (B1 == GPIO_PIN_RESET) {
 800284a:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10c      	bne.n	800286c <StartDefaultTask+0x1c4>
		rclc_service_init_default(&imu_calibration_server, &node, imu_calib_type_support, "imu_calibration");
 8002852:	4b4c      	ldr	r3, [pc, #304]	@ (8002984 <StartDefaultTask+0x2dc>)
 8002854:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8002858:	4945      	ldr	r1, [pc, #276]	@ (8002970 <StartDefaultTask+0x2c8>)
 800285a:	484b      	ldr	r0, [pc, #300]	@ (8002988 <StartDefaultTask+0x2e0>)
 800285c:	f00e fd44 	bl	80112e8 <rclc_service_init_default>
		executor_num++;
 8002860:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002864:	3301      	adds	r3, #1
 8002866:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800286a:	e002      	b.n	8002872 <StartDefaultTask+0x1ca>
	}
	else{
		on_calib = true;
 800286c:	4b47      	ldr	r3, [pc, #284]	@ (800298c <StartDefaultTask+0x2e4>)
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
	}

	rclc_service_init_default(&imu_status_server, &node, imu_status_type_support, "imu/status");
 8002872:	4b47      	ldr	r3, [pc, #284]	@ (8002990 <StartDefaultTask+0x2e8>)
 8002874:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8002878:	493d      	ldr	r1, [pc, #244]	@ (8002970 <StartDefaultTask+0x2c8>)
 800287a:	4846      	ldr	r0, [pc, #280]	@ (8002994 <StartDefaultTask+0x2ec>)
 800287c:	f00e fd34 	bl	80112e8 <rclc_service_init_default>

	//create service client
	rclc_client_init_default(&robot_controller_client, &node, keyboard_type_support, "Mode");
 8002880:	4b45      	ldr	r3, [pc, #276]	@ (8002998 <StartDefaultTask+0x2f0>)
 8002882:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002886:	493a      	ldr	r1, [pc, #232]	@ (8002970 <StartDefaultTask+0x2c8>)
 8002888:	4844      	ldr	r0, [pc, #272]	@ (800299c <StartDefaultTask+0x2f4>)
 800288a:	f00d fdcd 	bl	8010428 <rclc_client_init_default>
	rclc_client_init_default(&robot_controller_Ref_client, &node, keyboard_type_support, "Ref");
 800288e:	4b44      	ldr	r3, [pc, #272]	@ (80029a0 <StartDefaultTask+0x2f8>)
 8002890:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002894:	4936      	ldr	r1, [pc, #216]	@ (8002970 <StartDefaultTask+0x2c8>)
 8002896:	4843      	ldr	r0, [pc, #268]	@ (80029a4 <StartDefaultTask+0x2fc>)
 8002898:	f00d fdc6 	bl	8010428 <rclc_client_init_default>
	rclc_client_init_default(&robot_controller_saved_client, &node, trigger_type_support, "SavePath");
 800289c:	4b42      	ldr	r3, [pc, #264]	@ (80029a8 <StartDefaultTask+0x300>)
 800289e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80028a2:	4933      	ldr	r1, [pc, #204]	@ (8002970 <StartDefaultTask+0x2c8>)
 80028a4:	4841      	ldr	r0, [pc, #260]	@ (80029ac <StartDefaultTask+0x304>)
 80028a6:	f00d fdbf 	bl	8010428 <rclc_client_init_default>

	//create executor
	rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 80028aa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80028ae:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80028b2:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 80028b6:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80028ba:	f00e f93d 	bl	8010b38 <rclc_executor_init>

	rclc_executor_add_timer(&executor, &mpu6050_timer);
 80028be:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80028c2:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f00e f9a5 	bl	8010c18 <rclc_executor_add_timer>
	if (B1 == GPIO_PIN_RESET) rclc_executor_add_service(&executor, &imu_calibration_server, &imu_calibration_request, &imu_calibration_response, imu_calib_service_callback);
 80028ce:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d108      	bne.n	80028e8 <StartDefaultTask+0x240>
 80028d6:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80028da:	4b35      	ldr	r3, [pc, #212]	@ (80029b0 <StartDefaultTask+0x308>)
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	4b35      	ldr	r3, [pc, #212]	@ (80029b4 <StartDefaultTask+0x30c>)
 80028e0:	4a35      	ldr	r2, [pc, #212]	@ (80029b8 <StartDefaultTask+0x310>)
 80028e2:	4929      	ldr	r1, [pc, #164]	@ (8002988 <StartDefaultTask+0x2e0>)
 80028e4:	f00e f9c2 	bl	8010c6c <rclc_executor_add_service>
	rclc_executor_add_service(&executor, &imu_status_server, &imu_status_request, &imu_status_response, imu_status_service_callback);
 80028e8:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80028ec:	4b33      	ldr	r3, [pc, #204]	@ (80029bc <StartDefaultTask+0x314>)
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	4b33      	ldr	r3, [pc, #204]	@ (80029c0 <StartDefaultTask+0x318>)
 80028f2:	4a34      	ldr	r2, [pc, #208]	@ (80029c4 <StartDefaultTask+0x31c>)
 80028f4:	4927      	ldr	r1, [pc, #156]	@ (8002994 <StartDefaultTask+0x2ec>)
 80028f6:	f00e f9b9 	bl	8010c6c <rclc_executor_add_service>

	rclc_executor_spin(&executor);
 80028fa:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80028fe:	4618      	mov	r0, r3
 8002900:	f00e fbda 	bl	80110b8 <rclc_executor_spin>

	rmw_uros_sync_session(timeout_ms);
 8002904:	f8d7 01b0 	ldr.w	r0, [r7, #432]	@ 0x1b0
 8002908:	f010 fc44 	bl	8013194 <rmw_uros_sync_session>

	//create message
	mpu6050_msg.header.frame_id = micro_ros_string_utilities_init("imu_frame");
 800290c:	4c2e      	ldr	r4, [pc, #184]	@ (80029c8 <StartDefaultTask+0x320>)
 800290e:	463b      	mov	r3, r7
 8002910:	492e      	ldr	r1, [pc, #184]	@ (80029cc <StartDefaultTask+0x324>)
 8002912:	4618      	mov	r0, r3
 8002914:	f00b fc3c 	bl	800e190 <micro_ros_string_utilities_init>
 8002918:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800291c:	f5a3 72e0 	sub.w	r2, r3, #448	@ 0x1c0
 8002920:	f104 0308 	add.w	r3, r4, #8
 8002924:	ca07      	ldmia	r2, {r0, r1, r2}
 8002926:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for(;;)
	{
		osDelay(10);
 800292a:	200a      	movs	r0, #10
 800292c:	f008 fd3a 	bl	800b3a4 <osDelay>
 8002930:	e7fb      	b.n	800292a <StartDefaultTask+0x282>
 8002932:	bf00      	nop
 8002934:	08003bf5 	.word	0x08003bf5
 8002938:	08003b91 	.word	0x08003b91
 800293c:	08003b71 	.word	0x08003b71
 8002940:	08003b45 	.word	0x08003b45
 8002944:	200050b4 	.word	0x200050b4
 8002948:	080032c9 	.word	0x080032c9
 800294c:	0800330d 	.word	0x0800330d
 8002950:	08003345 	.word	0x08003345
 8002954:	080033b1 	.word	0x080033b1
 8002958:	0801ecc0 	.word	0x0801ecc0
 800295c:	48000800 	.word	0x48000800
 8002960:	00989680 	.word	0x00989680
 8002964:	08001b69 	.word	0x08001b69
 8002968:	0801ece8 	.word	0x0801ece8
 800296c:	0801ecec 	.word	0x0801ecec
 8002970:	20000f18 	.word	0x20000f18
 8002974:	0801ed00 	.word	0x0801ed00
 8002978:	20000f20 	.word	0x20000f20
 800297c:	0801ed14 	.word	0x0801ed14
 8002980:	20001068 	.word	0x20001068
 8002984:	0801ed1c 	.word	0x0801ed1c
 8002988:	200010a0 	.word	0x200010a0
 800298c:	200013d1 	.word	0x200013d1
 8002990:	0801ed2c 	.word	0x0801ed2c
 8002994:	200011ec 	.word	0x200011ec
 8002998:	0801ed38 	.word	0x0801ed38
 800299c:	20001204 	.word	0x20001204
 80029a0:	0801ed40 	.word	0x0801ed40
 80029a4:	20001230 	.word	0x20001230
 80029a8:	0801ed44 	.word	0x0801ed44
 80029ac:	20001234 	.word	0x20001234
 80029b0:	080023cd 	.word	0x080023cd
 80029b4:	200011e8 	.word	0x200011e8
 80029b8:	200010a8 	.word	0x200010a8
 80029bc:	0800247d 	.word	0x0800247d
 80029c0:	200011f4 	.word	0x200011f4
 80029c4:	200011f0 	.word	0x200011f0
 80029c8:	20000f28 	.word	0x20000f28
 80029cc:	0801ed50 	.word	0x0801ed50

080029d0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	@ 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80029dc:	f009 fd24 	bl	800c428 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80029e0:	4b5a      	ldr	r3, [pc, #360]	@ (8002b4c <pvPortMallocMicroROS+0x17c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80029e8:	f000 f986 	bl	8002cf8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80029ec:	4b58      	ldr	r3, [pc, #352]	@ (8002b50 <pvPortMallocMicroROS+0x180>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f040 8090 	bne.w	8002b1a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01e      	beq.n	8002a3e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002a00:	2208      	movs	r2, #8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d015      	beq.n	8002a3e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f023 0307 	bic.w	r3, r3, #7
 8002a18:	3308      	adds	r3, #8
 8002a1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00b      	beq.n	8002a3e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a2a:	f383 8811 	msr	BASEPRI, r3
 8002a2e:	f3bf 8f6f 	isb	sy
 8002a32:	f3bf 8f4f 	dsb	sy
 8002a36:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	e7fd      	b.n	8002a3a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d06a      	beq.n	8002b1a <pvPortMallocMicroROS+0x14a>
 8002a44:	4b43      	ldr	r3, [pc, #268]	@ (8002b54 <pvPortMallocMicroROS+0x184>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d865      	bhi.n	8002b1a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002a4e:	4b42      	ldr	r3, [pc, #264]	@ (8002b58 <pvPortMallocMicroROS+0x188>)
 8002a50:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002a52:	4b41      	ldr	r3, [pc, #260]	@ (8002b58 <pvPortMallocMicroROS+0x188>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a58:	e004      	b.n	8002a64 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d903      	bls.n	8002a76 <pvPortMallocMicroROS+0xa6>
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f1      	bne.n	8002a5a <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002a76:	4b35      	ldr	r3, [pc, #212]	@ (8002b4c <pvPortMallocMicroROS+0x17c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d04c      	beq.n	8002b1a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2208      	movs	r2, #8
 8002a86:	4413      	add	r3, r2
 8002a88:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	1ad2      	subs	r2, r2, r3
 8002a9a:	2308      	movs	r3, #8
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d920      	bls.n	8002ae4 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00b      	beq.n	8002acc <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	613b      	str	r3, [r7, #16]
}
 8002ac6:	bf00      	nop
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	1ad2      	subs	r2, r2, r3
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002ade:	69b8      	ldr	r0, [r7, #24]
 8002ae0:	f000 f96c 	bl	8002dbc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b54 <pvPortMallocMicroROS+0x184>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	4a19      	ldr	r2, [pc, #100]	@ (8002b54 <pvPortMallocMicroROS+0x184>)
 8002af0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002af2:	4b18      	ldr	r3, [pc, #96]	@ (8002b54 <pvPortMallocMicroROS+0x184>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <pvPortMallocMicroROS+0x18c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d203      	bcs.n	8002b06 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002afe:	4b15      	ldr	r3, [pc, #84]	@ (8002b54 <pvPortMallocMicroROS+0x184>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a16      	ldr	r2, [pc, #88]	@ (8002b5c <pvPortMallocMicroROS+0x18c>)
 8002b04:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <pvPortMallocMicroROS+0x180>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b12:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002b1a:	f009 fc93 	bl	800c444 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00b      	beq.n	8002b40 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8002b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	60fb      	str	r3, [r7, #12]
}
 8002b3a:	bf00      	nop
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8002b40:	69fb      	ldr	r3, [r7, #28]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3728      	adds	r7, #40	@ 0x28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20004fe4 	.word	0x20004fe4
 8002b50:	20004ff0 	.word	0x20004ff0
 8002b54:	20004fe8 	.word	0x20004fe8
 8002b58:	20004fdc 	.word	0x20004fdc
 8002b5c:	20004fec 	.word	0x20004fec

08002b60 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d04a      	beq.n	8002c08 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002b72:	2308      	movs	r3, #8
 8002b74:	425b      	negs	r3, r3
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4413      	add	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	4b22      	ldr	r3, [pc, #136]	@ (8002c10 <vPortFreeMicroROS+0xb0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10b      	bne.n	8002ba6 <vPortFreeMicroROS+0x46>
	__asm volatile
 8002b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b92:	f383 8811 	msr	BASEPRI, r3
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	60fb      	str	r3, [r7, #12]
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	e7fd      	b.n	8002ba2 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <vPortFreeMicroROS+0x66>
	__asm volatile
 8002bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	60bb      	str	r3, [r7, #8]
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	e7fd      	b.n	8002bc2 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	4b11      	ldr	r3, [pc, #68]	@ (8002c10 <vPortFreeMicroROS+0xb0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d019      	beq.n	8002c08 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d115      	bne.n	8002c08 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <vPortFreeMicroROS+0xb0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	401a      	ands	r2, r3
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002bec:	f009 fc1c 	bl	800c428 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4b07      	ldr	r3, [pc, #28]	@ (8002c14 <vPortFreeMicroROS+0xb4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	4a06      	ldr	r2, [pc, #24]	@ (8002c14 <vPortFreeMicroROS+0xb4>)
 8002bfc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002bfe:	6938      	ldr	r0, [r7, #16]
 8002c00:	f000 f8dc 	bl	8002dbc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002c04:	f009 fc1e 	bl	800c444 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002c08:	bf00      	nop
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20004ff0 	.word	0x20004ff0
 8002c14:	20004fe8 	.word	0x20004fe8

08002c18 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002c24:	2308      	movs	r3, #8
 8002c26:	425b      	negs	r3, r3
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <getBlockSize+0x38>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]

	return count;
 8002c40:	68fb      	ldr	r3, [r7, #12]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20004ff0 	.word	0x20004ff0

08002c54 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002c5e:	f009 fbe3 	bl	800c428 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8002c62:	6838      	ldr	r0, [r7, #0]
 8002c64:	f7ff feb4 	bl	80029d0 <pvPortMallocMicroROS>
 8002c68:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d017      	beq.n	8002ca0 <pvPortReallocMicroROS+0x4c>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d014      	beq.n	8002ca0 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff ffce 	bl	8002c18 <getBlockSize>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2208      	movs	r2, #8
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d201      	bcs.n	8002c90 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	68b8      	ldr	r0, [r7, #8]
 8002c96:	f01a fe0c 	bl	801d8b2 <memcpy>

		vPortFreeMicroROS(pv);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff ff60 	bl	8002b60 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8002ca0:	f009 fbd0 	bl	800c444 <xTaskResumeAll>

	return newmem;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b086      	sub	sp, #24
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002cb8:	f009 fbb6 	bl	800c428 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	fb02 f303 	mul.w	r3, r2, r3
 8002cc4:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8002cc6:	6978      	ldr	r0, [r7, #20]
 8002cc8:	f7ff fe82 	bl	80029d0 <pvPortMallocMicroROS>
 8002ccc:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	613b      	str	r3, [r7, #16]

  	while(count--)
 8002cd2:	e004      	b.n	8002cde <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	613a      	str	r2, [r7, #16]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	1e5a      	subs	r2, r3, #1
 8002ce2:	617a      	str	r2, [r7, #20]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f5      	bne.n	8002cd4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002ce8:	f009 fbac 	bl	800c444 <xTaskResumeAll>
  	return mem;
 8002cec:	68fb      	ldr	r3, [r7, #12]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002cfe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002d02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002d04:	4b27      	ldr	r3, [pc, #156]	@ (8002da4 <prvHeapInit+0xac>)
 8002d06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00c      	beq.n	8002d2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3307      	adds	r3, #7
 8002d16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0307 	bic.w	r3, r3, #7
 8002d1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	4a1f      	ldr	r2, [pc, #124]	@ (8002da4 <prvHeapInit+0xac>)
 8002d28:	4413      	add	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002d30:	4a1d      	ldr	r2, [pc, #116]	@ (8002da8 <prvHeapInit+0xb0>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002d36:	4b1c      	ldr	r3, [pc, #112]	@ (8002da8 <prvHeapInit+0xb0>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	4413      	add	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002d44:	2208      	movs	r2, #8
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0307 	bic.w	r3, r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4a15      	ldr	r2, [pc, #84]	@ (8002dac <prvHeapInit+0xb4>)
 8002d58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002d5a:	4b14      	ldr	r3, [pc, #80]	@ (8002dac <prvHeapInit+0xb4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002d62:	4b12      	ldr	r3, [pc, #72]	@ (8002dac <prvHeapInit+0xb4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	1ad2      	subs	r2, r2, r3
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002d78:	4b0c      	ldr	r3, [pc, #48]	@ (8002dac <prvHeapInit+0xb4>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4a0a      	ldr	r2, [pc, #40]	@ (8002db0 <prvHeapInit+0xb8>)
 8002d86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4a09      	ldr	r2, [pc, #36]	@ (8002db4 <prvHeapInit+0xbc>)
 8002d8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002d90:	4b09      	ldr	r3, [pc, #36]	@ (8002db8 <prvHeapInit+0xc0>)
 8002d92:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002d96:	601a      	str	r2, [r3, #0]
}
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	200043dc 	.word	0x200043dc
 8002da8:	20004fdc 	.word	0x20004fdc
 8002dac:	20004fe4 	.word	0x20004fe4
 8002db0:	20004fec 	.word	0x20004fec
 8002db4:	20004fe8 	.word	0x20004fe8
 8002db8:	20004ff0 	.word	0x20004ff0

08002dbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002dc4:	4b28      	ldr	r3, [pc, #160]	@ (8002e68 <prvInsertBlockIntoFreeList+0xac>)
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	e002      	b.n	8002dd0 <prvInsertBlockIntoFreeList+0x14>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d8f7      	bhi.n	8002dca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	4413      	add	r3, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d108      	bne.n	8002dfe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	441a      	add	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	441a      	add	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d118      	bne.n	8002e44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <prvInsertBlockIntoFreeList+0xb0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d00d      	beq.n	8002e3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	441a      	add	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	e008      	b.n	8002e4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e6c <prvInsertBlockIntoFreeList+0xb0>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	e003      	b.n	8002e4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d002      	beq.n	8002e5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20004fdc 	.word	0x20004fdc
 8002e6c:	20004fe4 	.word	0x20004fe4

08002e70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002e76:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee0 <MX_DMA_Init+0x70>)
 8002e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e7a:	4a19      	ldr	r2, [pc, #100]	@ (8002ee0 <MX_DMA_Init+0x70>)
 8002e7c:	f043 0304 	orr.w	r3, r3, #4
 8002e80:	6493      	str	r3, [r2, #72]	@ 0x48
 8002e82:	4b17      	ldr	r3, [pc, #92]	@ (8002ee0 <MX_DMA_Init+0x70>)
 8002e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e8e:	4b14      	ldr	r3, [pc, #80]	@ (8002ee0 <MX_DMA_Init+0x70>)
 8002e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e92:	4a13      	ldr	r2, [pc, #76]	@ (8002ee0 <MX_DMA_Init+0x70>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6493      	str	r3, [r2, #72]	@ 0x48
 8002e9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ee0 <MX_DMA_Init+0x70>)
 8002e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2105      	movs	r1, #5
 8002eaa:	200b      	movs	r0, #11
 8002eac:	f002 ff44 	bl	8005d38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002eb0:	200b      	movs	r0, #11
 8002eb2:	f002 ff5b 	bl	8005d6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2105      	movs	r1, #5
 8002eba:	200c      	movs	r0, #12
 8002ebc:	f002 ff3c 	bl	8005d38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002ec0:	200c      	movs	r0, #12
 8002ec2:	f002 ff53 	bl	8005d6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2105      	movs	r1, #5
 8002eca:	200d      	movs	r0, #13
 8002ecc:	f002 ff34 	bl	8005d38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002ed0:	200d      	movs	r0, #13
 8002ed2:	f002 ff4b 	bl	8005d6c <HAL_NVIC_EnableIRQ>

}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000

08002ee4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	@ 0x28
 8002ee8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efa:	4b43      	ldr	r3, [pc, #268]	@ (8003008 <MX_GPIO_Init+0x124>)
 8002efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efe:	4a42      	ldr	r2, [pc, #264]	@ (8003008 <MX_GPIO_Init+0x124>)
 8002f00:	f043 0304 	orr.w	r3, r3, #4
 8002f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f06:	4b40      	ldr	r3, [pc, #256]	@ (8003008 <MX_GPIO_Init+0x124>)
 8002f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f12:	4b3d      	ldr	r3, [pc, #244]	@ (8003008 <MX_GPIO_Init+0x124>)
 8002f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f16:	4a3c      	ldr	r2, [pc, #240]	@ (8003008 <MX_GPIO_Init+0x124>)
 8002f18:	f043 0320 	orr.w	r3, r3, #32
 8002f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f1e:	4b3a      	ldr	r3, [pc, #232]	@ (8003008 <MX_GPIO_Init+0x124>)
 8002f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	4b37      	ldr	r3, [pc, #220]	@ (8003008 <MX_GPIO_Init+0x124>)
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2e:	4a36      	ldr	r2, [pc, #216]	@ (8003008 <MX_GPIO_Init+0x124>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f36:	4b34      	ldr	r3, [pc, #208]	@ (8003008 <MX_GPIO_Init+0x124>)
 8002f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f42:	4b31      	ldr	r3, [pc, #196]	@ (8003008 <MX_GPIO_Init+0x124>)
 8002f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f46:	4a30      	ldr	r2, [pc, #192]	@ (8003008 <MX_GPIO_Init+0x124>)
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8003008 <MX_GPIO_Init+0x124>)
 8002f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2120      	movs	r1, #32
 8002f5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f62:	f003 fccb 	bl	80068fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f6c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f76:	f107 0314 	add.w	r3, r7, #20
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4823      	ldr	r0, [pc, #140]	@ (800300c <MX_GPIO_Init+0x128>)
 8002f7e:	f003 fa41 	bl	8006404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002f82:	2320      	movs	r3, #32
 8002f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f86:	2301      	movs	r3, #1
 8002f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002f92:	f107 0314 	add.w	r3, r7, #20
 8002f96:	4619      	mov	r1, r3
 8002f98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f9c:	f003 fa32 	bl	8006404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = E_Pin;
 8002fa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fa6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(E_GPIO_Port, &GPIO_InitStruct);
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4816      	ldr	r0, [pc, #88]	@ (8003010 <MX_GPIO_Init+0x12c>)
 8002fb8:	f003 fa24 	bl	8006404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = F_Pin|K_Pin|A_Pin;
 8002fbc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fca:	f107 0314 	add.w	r3, r7, #20
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fd4:	f003 fa16 	bl	8006404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = B_Pin|D_Pin|C_Pin;
 8002fd8:	2338      	movs	r3, #56	@ 0x38
 8002fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4809      	ldr	r0, [pc, #36]	@ (8003010 <MX_GPIO_Init+0x12c>)
 8002fec:	f003 fa0a 	bl	8006404 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2105      	movs	r1, #5
 8002ff4:	2028      	movs	r0, #40	@ 0x28
 8002ff6:	f002 fe9f 	bl	8005d38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ffa:	2028      	movs	r0, #40	@ 0x28
 8002ffc:	f002 feb6 	bl	8005d6c <HAL_NVIC_EnableIRQ>

}
 8003000:	bf00      	nop
 8003002:	3728      	adds	r7, #40	@ 0x28
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000
 800300c:	48000800 	.word	0x48000800
 8003010:	48000400 	.word	0x48000400

08003014 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003018:	4b1b      	ldr	r3, [pc, #108]	@ (8003088 <MX_I2C1_Init+0x74>)
 800301a:	4a1c      	ldr	r2, [pc, #112]	@ (800308c <MX_I2C1_Init+0x78>)
 800301c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 800301e:	4b1a      	ldr	r3, [pc, #104]	@ (8003088 <MX_I2C1_Init+0x74>)
 8003020:	4a1b      	ldr	r2, [pc, #108]	@ (8003090 <MX_I2C1_Init+0x7c>)
 8003022:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003024:	4b18      	ldr	r3, [pc, #96]	@ (8003088 <MX_I2C1_Init+0x74>)
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800302a:	4b17      	ldr	r3, [pc, #92]	@ (8003088 <MX_I2C1_Init+0x74>)
 800302c:	2201      	movs	r2, #1
 800302e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003030:	4b15      	ldr	r3, [pc, #84]	@ (8003088 <MX_I2C1_Init+0x74>)
 8003032:	2200      	movs	r2, #0
 8003034:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003036:	4b14      	ldr	r3, [pc, #80]	@ (8003088 <MX_I2C1_Init+0x74>)
 8003038:	2200      	movs	r2, #0
 800303a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800303c:	4b12      	ldr	r3, [pc, #72]	@ (8003088 <MX_I2C1_Init+0x74>)
 800303e:	2200      	movs	r2, #0
 8003040:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003042:	4b11      	ldr	r3, [pc, #68]	@ (8003088 <MX_I2C1_Init+0x74>)
 8003044:	2200      	movs	r2, #0
 8003046:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003048:	4b0f      	ldr	r3, [pc, #60]	@ (8003088 <MX_I2C1_Init+0x74>)
 800304a:	2200      	movs	r2, #0
 800304c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800304e:	480e      	ldr	r0, [pc, #56]	@ (8003088 <MX_I2C1_Init+0x74>)
 8003050:	f003 fc9e 	bl	8006990 <HAL_I2C_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800305a:	f000 f92f 	bl	80032bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800305e:	2100      	movs	r1, #0
 8003060:	4809      	ldr	r0, [pc, #36]	@ (8003088 <MX_I2C1_Init+0x74>)
 8003062:	f004 fa5b 	bl	800751c <HAL_I2CEx_ConfigAnalogFilter>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800306c:	f000 f926 	bl	80032bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003070:	2100      	movs	r1, #0
 8003072:	4805      	ldr	r0, [pc, #20]	@ (8003088 <MX_I2C1_Init+0x74>)
 8003074:	f004 fa9d 	bl	80075b2 <HAL_I2CEx_ConfigDigitalFilter>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800307e:	f000 f91d 	bl	80032bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20004ff4 	.word	0x20004ff4
 800308c:	40005400 	.word	0x40005400
 8003090:	40621236 	.word	0x40621236

08003094 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b09e      	sub	sp, #120	@ 0x78
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030ac:	f107 0310 	add.w	r3, r7, #16
 80030b0:	2254      	movs	r2, #84	@ 0x54
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f01a fb33 	bl	801d720 <memset>
  if(i2cHandle->Instance==I2C1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1f      	ldr	r2, [pc, #124]	@ (800313c <HAL_I2C_MspInit+0xa8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d136      	bne.n	8003132 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030c4:	2340      	movs	r3, #64	@ 0x40
 80030c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80030c8:	2300      	movs	r3, #0
 80030ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030cc:	f107 0310 	add.w	r3, r7, #16
 80030d0:	4618      	mov	r0, r3
 80030d2:	f005 f92d 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80030dc:	f000 f8ee 	bl	80032bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e0:	4b17      	ldr	r3, [pc, #92]	@ (8003140 <HAL_I2C_MspInit+0xac>)
 80030e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e4:	4a16      	ldr	r2, [pc, #88]	@ (8003140 <HAL_I2C_MspInit+0xac>)
 80030e6:	f043 0302 	orr.w	r3, r3, #2
 80030ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030ec:	4b14      	ldr	r3, [pc, #80]	@ (8003140 <HAL_I2C_MspInit+0xac>)
 80030ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030fc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030fe:	2312      	movs	r3, #18
 8003100:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003102:	2300      	movs	r3, #0
 8003104:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003106:	2300      	movs	r3, #0
 8003108:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800310a:	2304      	movs	r3, #4
 800310c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003112:	4619      	mov	r1, r3
 8003114:	480b      	ldr	r0, [pc, #44]	@ (8003144 <HAL_I2C_MspInit+0xb0>)
 8003116:	f003 f975 	bl	8006404 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800311a:	4b09      	ldr	r3, [pc, #36]	@ (8003140 <HAL_I2C_MspInit+0xac>)
 800311c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311e:	4a08      	ldr	r2, [pc, #32]	@ (8003140 <HAL_I2C_MspInit+0xac>)
 8003120:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003124:	6593      	str	r3, [r2, #88]	@ 0x58
 8003126:	4b06      	ldr	r3, [pc, #24]	@ (8003140 <HAL_I2C_MspInit+0xac>)
 8003128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003132:	bf00      	nop
 8003134:	3778      	adds	r7, #120	@ 0x78
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40005400 	.word	0x40005400
 8003140:	40021000 	.word	0x40021000
 8003144:	48000400 	.word	0x48000400

08003148 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0b      	ldr	r2, [pc, #44]	@ (8003184 <HAL_I2C_MspDeInit+0x3c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d10f      	bne.n	800317a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800315a:	4b0b      	ldr	r3, [pc, #44]	@ (8003188 <HAL_I2C_MspDeInit+0x40>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315e:	4a0a      	ldr	r2, [pc, #40]	@ (8003188 <HAL_I2C_MspDeInit+0x40>)
 8003160:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003164:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8003166:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800316a:	4808      	ldr	r0, [pc, #32]	@ (800318c <HAL_I2C_MspDeInit+0x44>)
 800316c:	f003 facc 	bl	8006708 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003170:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003174:	4805      	ldr	r0, [pc, #20]	@ (800318c <HAL_I2C_MspDeInit+0x44>)
 8003176:	f003 fac7 	bl	8006708 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40005400 	.word	0x40005400
 8003188:	40021000 	.word	0x40021000
 800318c:	48000400 	.word	0x48000400

08003190 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003194:	4b0b      	ldr	r3, [pc, #44]	@ (80031c4 <MX_IWDG_Init+0x34>)
 8003196:	4a0c      	ldr	r2, [pc, #48]	@ (80031c8 <MX_IWDG_Init+0x38>)
 8003198:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800319a:	4b0a      	ldr	r3, [pc, #40]	@ (80031c4 <MX_IWDG_Init+0x34>)
 800319c:	2200      	movs	r2, #0
 800319e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80031a0:	4b08      	ldr	r3, [pc, #32]	@ (80031c4 <MX_IWDG_Init+0x34>)
 80031a2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80031a6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 80031a8:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <MX_IWDG_Init+0x34>)
 80031aa:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80031ae:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80031b0:	4804      	ldr	r0, [pc, #16]	@ (80031c4 <MX_IWDG_Init+0x34>)
 80031b2:	f004 fa4a 	bl	800764a <HAL_IWDG_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80031bc:	f000 f87e 	bl	80032bc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20005048 	.word	0x20005048
 80031c8:	40003000 	.word	0x40003000

080031cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031d0:	f000 fd8d 	bl	8003cee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031d4:	f000 f814 	bl	8003200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031d8:	f7ff fe84 	bl	8002ee4 <MX_GPIO_Init>
  MX_DMA_Init();
 80031dc:	f7ff fe48 	bl	8002e70 <MX_DMA_Init>
  MX_I2C1_Init();
 80031e0:	f7ff ff18 	bl	8003014 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80031e4:	f000 fba6 	bl	8003934 <MX_LPUART1_UART_Init>
  MX_IWDG_Init();
 80031e8:	f7ff ffd2 	bl	8003190 <MX_IWDG_Init>
  MX_ADC1_Init();
 80031ec:	f7fd feb4 	bl	8000f58 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80031f0:	f007 fffc 	bl	800b1ec <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80031f4:	f7ff fa26 	bl	8002644 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80031f8:	f008 f81c 	bl	800b234 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80031fc:	bf00      	nop
 80031fe:	e7fd      	b.n	80031fc <main+0x30>

08003200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b094      	sub	sp, #80	@ 0x50
 8003204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003206:	f107 0318 	add.w	r3, r7, #24
 800320a:	2238      	movs	r2, #56	@ 0x38
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f01a fa86 	bl	801d720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	60da      	str	r2, [r3, #12]
 8003220:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003222:	2000      	movs	r0, #0
 8003224:	f004 fa70 	bl	8007708 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003228:	2309      	movs	r3, #9
 800322a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800322c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003230:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003232:	2301      	movs	r3, #1
 8003234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003236:	2302      	movs	r3, #2
 8003238:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800323a:	2303      	movs	r3, #3
 800323c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800323e:	2306      	movs	r3, #6
 8003240:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003242:	2355      	movs	r3, #85	@ 0x55
 8003244:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003246:	2302      	movs	r3, #2
 8003248:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800324a:	2302      	movs	r3, #2
 800324c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800324e:	2302      	movs	r3, #2
 8003250:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003252:	f107 0318 	add.w	r3, r7, #24
 8003256:	4618      	mov	r0, r3
 8003258:	f004 fb0a 	bl	8007870 <HAL_RCC_OscConfig>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003262:	f000 f82b 	bl	80032bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003266:	230f      	movs	r3, #15
 8003268:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800326a:	2303      	movs	r3, #3
 800326c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800327a:	1d3b      	adds	r3, r7, #4
 800327c:	2104      	movs	r1, #4
 800327e:	4618      	mov	r0, r3
 8003280:	f004 fe08 	bl	8007e94 <HAL_RCC_ClockConfig>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800328a:	f000 f817 	bl	80032bc <Error_Handler>
  }
}
 800328e:	bf00      	nop
 8003290:	3750      	adds	r7, #80	@ 0x50
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a04      	ldr	r2, [pc, #16]	@ (80032b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d101      	bne.n	80032ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80032aa:	f000 fd39 	bl	8003d20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40012c00 	.word	0x40012c00

080032bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032c0:	b672      	cpsid	i
}
 80032c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032c4:	bf00      	nop
 80032c6:	e7fd      	b.n	80032c4 <Error_Handler+0x8>

080032c8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80032d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003304 <microros_allocate+0x3c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4413      	add	r3, r2
 80032dc:	461a      	mov	r2, r3
 80032de:	4b09      	ldr	r3, [pc, #36]	@ (8003304 <microros_allocate+0x3c>)
 80032e0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80032e2:	4b09      	ldr	r3, [pc, #36]	@ (8003308 <microros_allocate+0x40>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4413      	add	r3, r2
 80032ec:	461a      	mov	r2, r3
 80032ee:	4b06      	ldr	r3, [pc, #24]	@ (8003308 <microros_allocate+0x40>)
 80032f0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff fb6c 	bl	80029d0 <pvPortMallocMicroROS>
 80032f8:	4603      	mov	r3, r0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20005058 	.word	0x20005058
 8003308:	2000505c 	.word	0x2000505c

0800330c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00c      	beq.n	8003336 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff fc7b 	bl	8002c18 <getBlockSize>
 8003322:	4603      	mov	r3, r0
 8003324:	4a06      	ldr	r2, [pc, #24]	@ (8003340 <microros_deallocate+0x34>)
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	461a      	mov	r2, r3
 800332c:	4b04      	ldr	r3, [pc, #16]	@ (8003340 <microros_deallocate+0x34>)
 800332e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff fc15 	bl	8002b60 <vPortFreeMicroROS>
  }
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	2000505c 	.word	0x2000505c

08003344 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003350:	4b15      	ldr	r3, [pc, #84]	@ (80033a8 <microros_reallocate+0x64>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4413      	add	r3, r2
 800335a:	461a      	mov	r2, r3
 800335c:	4b12      	ldr	r3, [pc, #72]	@ (80033a8 <microros_reallocate+0x64>)
 800335e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003360:	4b12      	ldr	r3, [pc, #72]	@ (80033ac <microros_reallocate+0x68>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4413      	add	r3, r2
 800336a:	461a      	mov	r2, r3
 800336c:	4b0f      	ldr	r3, [pc, #60]	@ (80033ac <microros_reallocate+0x68>)
 800336e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d104      	bne.n	8003380 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8003376:	68b8      	ldr	r0, [r7, #8]
 8003378:	f7ff fb2a 	bl	80029d0 <pvPortMallocMicroROS>
 800337c:	4603      	mov	r3, r0
 800337e:	e00e      	b.n	800339e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f7ff fc49 	bl	8002c18 <getBlockSize>
 8003386:	4603      	mov	r3, r0
 8003388:	4a08      	ldr	r2, [pc, #32]	@ (80033ac <microros_reallocate+0x68>)
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	461a      	mov	r2, r3
 8003390:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <microros_reallocate+0x68>)
 8003392:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f7ff fc5c 	bl	8002c54 <pvPortReallocMicroROS>
 800339c:	4603      	mov	r3, r0
  }
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20005058 	.word	0x20005058
 80033ac:	2000505c 	.word	0x2000505c

080033b0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	fb02 f303 	mul.w	r3, r2, r3
 80033c4:	4a0c      	ldr	r2, [pc, #48]	@ (80033f8 <microros_zero_allocate+0x48>)
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	4413      	add	r3, r2
 80033ca:	461a      	mov	r2, r3
 80033cc:	4b0a      	ldr	r3, [pc, #40]	@ (80033f8 <microros_zero_allocate+0x48>)
 80033ce:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	fb02 f303 	mul.w	r3, r2, r3
 80033d8:	4a08      	ldr	r2, [pc, #32]	@ (80033fc <microros_zero_allocate+0x4c>)
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	4413      	add	r3, r2
 80033de:	461a      	mov	r2, r3
 80033e0:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <microros_zero_allocate+0x4c>)
 80033e2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f7ff fc61 	bl	8002cae <pvPortCallocMicroROS>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20005058 	.word	0x20005058
 80033fc:	2000505c 	.word	0x2000505c

08003400 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003400:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8003412:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003416:	a320      	add	r3, pc, #128	@ (adr r3, 8003498 <UTILS_NanosecondsToTimespec+0x98>)
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	f7fd fbd4 	bl	8000bc8 <__aeabi_ldivmod>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800342a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800342e:	a31a      	add	r3, pc, #104	@ (adr r3, 8003498 <UTILS_NanosecondsToTimespec+0x98>)
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	f7fd fbc8 	bl	8000bc8 <__aeabi_ldivmod>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	da20      	bge.n	8003486 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a11      	ldr	r2, [pc, #68]	@ (8003490 <UTILS_NanosecondsToTimespec+0x90>)
 800344a:	fb82 1203 	smull	r1, r2, r2, r3
 800344e:	1712      	asrs	r2, r2, #28
 8003450:	17db      	asrs	r3, r3, #31
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	3301      	adds	r3, #1
 8003456:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345e:	6979      	ldr	r1, [r7, #20]
 8003460:	17c8      	asrs	r0, r1, #31
 8003462:	460c      	mov	r4, r1
 8003464:	4605      	mov	r5, r0
 8003466:	ebb2 0804 	subs.w	r8, r2, r4
 800346a:	eb63 0905 	sbc.w	r9, r3, r5
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	4906      	ldr	r1, [pc, #24]	@ (8003494 <UTILS_NanosecondsToTimespec+0x94>)
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	441a      	add	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	609a      	str	r2, [r3, #8]
    }
}
 8003486:	bf00      	nop
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003490:	44b82fa1 	.word	0x44b82fa1
 8003494:	3b9aca00 	.word	0x3b9aca00
 8003498:	3b9aca00 	.word	0x3b9aca00
 800349c:	00000000 	.word	0x00000000

080034a0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80034a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034a4:	b08e      	sub	sp, #56	@ 0x38
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80034aa:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80034ac:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80034b0:	2300      	movs	r3, #0
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80034c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034c6:	4618      	mov	r0, r3
 80034c8:	f009 fa38 	bl	800c93c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80034cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ce:	17da      	asrs	r2, r3, #31
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	61fa      	str	r2, [r7, #28]
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	69b9      	ldr	r1, [r7, #24]
 80034de:	000b      	movs	r3, r1
 80034e0:	2200      	movs	r2, #0
 80034e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80034e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e8:	2200      	movs	r2, #0
 80034ea:	461c      	mov	r4, r3
 80034ec:	4615      	mov	r5, r2
 80034ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80034f2:	1911      	adds	r1, r2, r4
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	416b      	adcs	r3, r5
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80034fe:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8003502:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	f04f 0400 	mov.w	r4, #0
 800350e:	f04f 0500 	mov.w	r5, #0
 8003512:	015d      	lsls	r5, r3, #5
 8003514:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003518:	0154      	lsls	r4, r2, #5
 800351a:	4622      	mov	r2, r4
 800351c:	462b      	mov	r3, r5
 800351e:	ebb2 0800 	subs.w	r8, r2, r0
 8003522:	eb63 0901 	sbc.w	r9, r3, r1
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003532:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003536:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800353a:	4690      	mov	r8, r2
 800353c:	4699      	mov	r9, r3
 800353e:	eb18 0a00 	adds.w	sl, r8, r0
 8003542:	eb49 0b01 	adc.w	fp, r9, r1
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003552:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003556:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800355a:	ebb2 040a 	subs.w	r4, r2, sl
 800355e:	603c      	str	r4, [r7, #0]
 8003560:	eb63 030b 	sbc.w	r3, r3, fp
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800356a:	4623      	mov	r3, r4
 800356c:	181b      	adds	r3, r3, r0
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	462b      	mov	r3, r5
 8003572:	eb41 0303 	adc.w	r3, r1, r3
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	6a3a      	ldr	r2, [r7, #32]
 800357a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800357e:	f7ff ff3f 	bl	8003400 <UTILS_NanosecondsToTimespec>

    return 0;
 8003582:	2300      	movs	r3, #0
 8003584:	4618      	mov	r0, r3
 8003586:	3738      	adds	r7, #56	@ 0x38
 8003588:	46bd      	mov	sp, r7
 800358a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003596:	4b12      	ldr	r3, [pc, #72]	@ (80035e0 <HAL_MspInit+0x50>)
 8003598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800359a:	4a11      	ldr	r2, [pc, #68]	@ (80035e0 <HAL_MspInit+0x50>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80035a2:	4b0f      	ldr	r3, [pc, #60]	@ (80035e0 <HAL_MspInit+0x50>)
 80035a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	607b      	str	r3, [r7, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	4b0c      	ldr	r3, [pc, #48]	@ (80035e0 <HAL_MspInit+0x50>)
 80035b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b2:	4a0b      	ldr	r2, [pc, #44]	@ (80035e0 <HAL_MspInit+0x50>)
 80035b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ba:	4b09      	ldr	r3, [pc, #36]	@ (80035e0 <HAL_MspInit+0x50>)
 80035bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	210f      	movs	r1, #15
 80035ca:	f06f 0001 	mvn.w	r0, #1
 80035ce:	f002 fbb3 	bl	8005d38 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80035d2:	f004 f93d 	bl	8007850 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000

080035e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08c      	sub	sp, #48	@ 0x30
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80035f4:	4b2c      	ldr	r3, [pc, #176]	@ (80036a8 <HAL_InitTick+0xc4>)
 80035f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f8:	4a2b      	ldr	r2, [pc, #172]	@ (80036a8 <HAL_InitTick+0xc4>)
 80035fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80035fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8003600:	4b29      	ldr	r3, [pc, #164]	@ (80036a8 <HAL_InitTick+0xc4>)
 8003602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800360c:	f107 020c 	add.w	r2, r7, #12
 8003610:	f107 0310 	add.w	r3, r7, #16
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f004 fe12 	bl	8008240 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800361c:	f004 fdfa 	bl	8008214 <HAL_RCC_GetPCLK2Freq>
 8003620:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003624:	4a21      	ldr	r2, [pc, #132]	@ (80036ac <HAL_InitTick+0xc8>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	0c9b      	lsrs	r3, r3, #18
 800362c:	3b01      	subs	r3, #1
 800362e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003630:	4b1f      	ldr	r3, [pc, #124]	@ (80036b0 <HAL_InitTick+0xcc>)
 8003632:	4a20      	ldr	r2, [pc, #128]	@ (80036b4 <HAL_InitTick+0xd0>)
 8003634:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003636:	4b1e      	ldr	r3, [pc, #120]	@ (80036b0 <HAL_InitTick+0xcc>)
 8003638:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800363c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800363e:	4a1c      	ldr	r2, [pc, #112]	@ (80036b0 <HAL_InitTick+0xcc>)
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003644:	4b1a      	ldr	r3, [pc, #104]	@ (80036b0 <HAL_InitTick+0xcc>)
 8003646:	2200      	movs	r2, #0
 8003648:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800364a:	4b19      	ldr	r3, [pc, #100]	@ (80036b0 <HAL_InitTick+0xcc>)
 800364c:	2200      	movs	r2, #0
 800364e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8003650:	4817      	ldr	r0, [pc, #92]	@ (80036b0 <HAL_InitTick+0xcc>)
 8003652:	f005 f8bb 	bl	80087cc <HAL_TIM_Base_Init>
 8003656:	4603      	mov	r3, r0
 8003658:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800365c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11b      	bne.n	800369c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003664:	4812      	ldr	r0, [pc, #72]	@ (80036b0 <HAL_InitTick+0xcc>)
 8003666:	f005 f913 	bl	8008890 <HAL_TIM_Base_Start_IT>
 800366a:	4603      	mov	r3, r0
 800366c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003670:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003674:	2b00      	cmp	r3, #0
 8003676:	d111      	bne.n	800369c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003678:	2019      	movs	r0, #25
 800367a:	f002 fb77 	bl	8005d6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b0f      	cmp	r3, #15
 8003682:	d808      	bhi.n	8003696 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003684:	2200      	movs	r2, #0
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	2019      	movs	r0, #25
 800368a:	f002 fb55 	bl	8005d38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800368e:	4a0a      	ldr	r2, [pc, #40]	@ (80036b8 <HAL_InitTick+0xd4>)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	e002      	b.n	800369c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800369c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3730      	adds	r7, #48	@ 0x30
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000
 80036ac:	431bde83 	.word	0x431bde83
 80036b0:	20005060 	.word	0x20005060
 80036b4:	40012c00 	.word	0x40012c00
 80036b8:	20000008 	.word	0x20000008

080036bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036c0:	bf00      	nop
 80036c2:	e7fd      	b.n	80036c0 <NMI_Handler+0x4>

080036c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036c8:	bf00      	nop
 80036ca:	e7fd      	b.n	80036c8 <HardFault_Handler+0x4>

080036cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <MemManage_Handler+0x4>

080036d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036d8:	bf00      	nop
 80036da:	e7fd      	b.n	80036d8 <BusFault_Handler+0x4>

080036dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036e0:	bf00      	nop
 80036e2:	e7fd      	b.n	80036e0 <UsageFault_Handler+0x4>

080036e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80036f8:	4802      	ldr	r0, [pc, #8]	@ (8003704 <DMA1_Channel1_IRQHandler+0x10>)
 80036fa:	f002 fd28 	bl	800614e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20005148 	.word	0x20005148

08003708 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800370c:	4802      	ldr	r0, [pc, #8]	@ (8003718 <DMA1_Channel2_IRQHandler+0x10>)
 800370e:	f002 fd1e 	bl	800614e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	200051a8 	.word	0x200051a8

0800371c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003720:	4802      	ldr	r0, [pc, #8]	@ (800372c <DMA1_Channel3_IRQHandler+0x10>)
 8003722:	f002 fd14 	bl	800614e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000eb8 	.word	0x20000eb8

08003730 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003734:	4802      	ldr	r0, [pc, #8]	@ (8003740 <ADC1_2_IRQHandler+0x10>)
 8003736:	f001 f807 	bl	8004748 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000e4c 	.word	0x20000e4c

08003744 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003748:	4802      	ldr	r0, [pc, #8]	@ (8003754 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800374a:	f005 f919 	bl	8008980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20005060 	.word	0x20005060

08003758 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_Pin);
 800375c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003760:	f003 f8fe 	bl	8006960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003764:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003768:	f003 f8fa 	bl	8006960 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800376c:	bf00      	nop
 800376e:	bd80      	pop	{r7, pc}

08003770 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003774:	4802      	ldr	r0, [pc, #8]	@ (8003780 <LPUART1_IRQHandler+0x10>)
 8003776:	f005 fd27 	bl	80091c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	200050b4 	.word	0x200050b4

08003784 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return 1;
 8003788:	2301      	movs	r3, #1
}
 800378a:	4618      	mov	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <_kill>:

int _kill(int pid, int sig)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800379e:	f01a f853 	bl	801d848 <__errno>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2216      	movs	r2, #22
 80037a6:	601a      	str	r2, [r3, #0]
  return -1;
 80037a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <_exit>:

void _exit (int status)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ffe7 	bl	8003794 <_kill>
  while (1) {}    /* Make sure we hang here */
 80037c6:	bf00      	nop
 80037c8:	e7fd      	b.n	80037c6 <_exit+0x12>

080037ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	e00a      	b.n	80037f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037dc:	f3af 8000 	nop.w
 80037e0:	4601      	mov	r1, r0
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	60ba      	str	r2, [r7, #8]
 80037e8:	b2ca      	uxtb	r2, r1
 80037ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	3301      	adds	r3, #1
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	dbf0      	blt.n	80037dc <_read+0x12>
  }

  return len;
 80037fa:	687b      	ldr	r3, [r7, #4]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	e009      	b.n	800382a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	60ba      	str	r2, [r7, #8]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	3301      	adds	r3, #1
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	429a      	cmp	r2, r3
 8003830:	dbf1      	blt.n	8003816 <_write+0x12>
  }
  return len;
 8003832:	687b      	ldr	r3, [r7, #4]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <_close>:

int _close(int file)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003844:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003864:	605a      	str	r2, [r3, #4]
  return 0;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <_isatty>:

int _isatty(int file)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800387c:	2301      	movs	r3, #1
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800388a:	b480      	push	{r7}
 800388c:	b085      	sub	sp, #20
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038ac:	4a14      	ldr	r2, [pc, #80]	@ (8003900 <_sbrk+0x5c>)
 80038ae:	4b15      	ldr	r3, [pc, #84]	@ (8003904 <_sbrk+0x60>)
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038b8:	4b13      	ldr	r3, [pc, #76]	@ (8003908 <_sbrk+0x64>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d102      	bne.n	80038c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038c0:	4b11      	ldr	r3, [pc, #68]	@ (8003908 <_sbrk+0x64>)
 80038c2:	4a12      	ldr	r2, [pc, #72]	@ (800390c <_sbrk+0x68>)
 80038c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038c6:	4b10      	ldr	r3, [pc, #64]	@ (8003908 <_sbrk+0x64>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4413      	add	r3, r2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d207      	bcs.n	80038e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038d4:	f019 ffb8 	bl	801d848 <__errno>
 80038d8:	4603      	mov	r3, r0
 80038da:	220c      	movs	r2, #12
 80038dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038e2:	e009      	b.n	80038f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038e4:	4b08      	ldr	r3, [pc, #32]	@ (8003908 <_sbrk+0x64>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038ea:	4b07      	ldr	r3, [pc, #28]	@ (8003908 <_sbrk+0x64>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4413      	add	r3, r2
 80038f2:	4a05      	ldr	r2, [pc, #20]	@ (8003908 <_sbrk+0x64>)
 80038f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038f6:	68fb      	ldr	r3, [r7, #12]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20020000 	.word	0x20020000
 8003904:	00000400 	.word	0x00000400
 8003908:	200050b0 	.word	0x200050b0
 800390c:	2000c628 	.word	0x2000c628

08003910 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003914:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <SystemInit+0x20>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391a:	4a05      	ldr	r2, [pc, #20]	@ (8003930 <SystemInit+0x20>)
 800391c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003938:	4b20      	ldr	r3, [pc, #128]	@ (80039bc <MX_LPUART1_UART_Init+0x88>)
 800393a:	4a21      	ldr	r2, [pc, #132]	@ (80039c0 <MX_LPUART1_UART_Init+0x8c>)
 800393c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800393e:	4b1f      	ldr	r3, [pc, #124]	@ (80039bc <MX_LPUART1_UART_Init+0x88>)
 8003940:	4a20      	ldr	r2, [pc, #128]	@ (80039c4 <MX_LPUART1_UART_Init+0x90>)
 8003942:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003944:	4b1d      	ldr	r3, [pc, #116]	@ (80039bc <MX_LPUART1_UART_Init+0x88>)
 8003946:	2200      	movs	r2, #0
 8003948:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800394a:	4b1c      	ldr	r3, [pc, #112]	@ (80039bc <MX_LPUART1_UART_Init+0x88>)
 800394c:	2200      	movs	r2, #0
 800394e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003950:	4b1a      	ldr	r3, [pc, #104]	@ (80039bc <MX_LPUART1_UART_Init+0x88>)
 8003952:	2200      	movs	r2, #0
 8003954:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003956:	4b19      	ldr	r3, [pc, #100]	@ (80039bc <MX_LPUART1_UART_Init+0x88>)
 8003958:	220c      	movs	r2, #12
 800395a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800395c:	4b17      	ldr	r3, [pc, #92]	@ (80039bc <MX_LPUART1_UART_Init+0x88>)
 800395e:	2200      	movs	r2, #0
 8003960:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003962:	4b16      	ldr	r3, [pc, #88]	@ (80039bc <MX_LPUART1_UART_Init+0x88>)
 8003964:	2200      	movs	r2, #0
 8003966:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003968:	4b14      	ldr	r3, [pc, #80]	@ (80039bc <MX_LPUART1_UART_Init+0x88>)
 800396a:	2200      	movs	r2, #0
 800396c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800396e:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <MX_LPUART1_UART_Init+0x88>)
 8003970:	2200      	movs	r2, #0
 8003972:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003974:	4811      	ldr	r0, [pc, #68]	@ (80039bc <MX_LPUART1_UART_Init+0x88>)
 8003976:	f005 fa75 	bl	8008e64 <HAL_UART_Init>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8003980:	f7ff fc9c 	bl	80032bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003984:	2100      	movs	r1, #0
 8003986:	480d      	ldr	r0, [pc, #52]	@ (80039bc <MX_LPUART1_UART_Init+0x88>)
 8003988:	f006 ff85 	bl	800a896 <HAL_UARTEx_SetTxFifoThreshold>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8003992:	f7ff fc93 	bl	80032bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003996:	2100      	movs	r1, #0
 8003998:	4808      	ldr	r0, [pc, #32]	@ (80039bc <MX_LPUART1_UART_Init+0x88>)
 800399a:	f006 ffba 	bl	800a912 <HAL_UARTEx_SetRxFifoThreshold>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80039a4:	f7ff fc8a 	bl	80032bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80039a8:	4804      	ldr	r0, [pc, #16]	@ (80039bc <MX_LPUART1_UART_Init+0x88>)
 80039aa:	f006 ff3b 	bl	800a824 <HAL_UARTEx_DisableFifoMode>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80039b4:	f7ff fc82 	bl	80032bc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80039b8:	bf00      	nop
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	200050b4 	.word	0x200050b4
 80039c0:	40008000 	.word	0x40008000
 80039c4:	001e8480 	.word	0x001e8480

080039c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b09e      	sub	sp, #120	@ 0x78
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039e0:	f107 0310 	add.w	r3, r7, #16
 80039e4:	2254      	movs	r2, #84	@ 0x54
 80039e6:	2100      	movs	r1, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f019 fe99 	bl	801d720 <memset>
  if(uartHandle->Instance==LPUART1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a4e      	ldr	r2, [pc, #312]	@ (8003b2c <HAL_UART_MspInit+0x164>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	f040 8094 	bne.w	8003b22 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80039fa:	2320      	movs	r3, #32
 80039fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80039fe:	2300      	movs	r3, #0
 8003a00:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a02:	f107 0310 	add.w	r3, r7, #16
 8003a06:	4618      	mov	r0, r3
 8003a08:	f004 fc92 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003a12:	f7ff fc53 	bl	80032bc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003a16:	4b46      	ldr	r3, [pc, #280]	@ (8003b30 <HAL_UART_MspInit+0x168>)
 8003a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a1a:	4a45      	ldr	r2, [pc, #276]	@ (8003b30 <HAL_UART_MspInit+0x168>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003a22:	4b43      	ldr	r3, [pc, #268]	@ (8003b30 <HAL_UART_MspInit+0x168>)
 8003a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2e:	4b40      	ldr	r3, [pc, #256]	@ (8003b30 <HAL_UART_MspInit+0x168>)
 8003a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a32:	4a3f      	ldr	r2, [pc, #252]	@ (8003b30 <HAL_UART_MspInit+0x168>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b30 <HAL_UART_MspInit+0x168>)
 8003a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	60bb      	str	r3, [r7, #8]
 8003a44:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003a46:	230c      	movs	r3, #12
 8003a48:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a52:	2300      	movs	r3, #0
 8003a54:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003a56:	230c      	movs	r3, #12
 8003a58:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a64:	f002 fcce 	bl	8006404 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8003a68:	4b32      	ldr	r3, [pc, #200]	@ (8003b34 <HAL_UART_MspInit+0x16c>)
 8003a6a:	4a33      	ldr	r2, [pc, #204]	@ (8003b38 <HAL_UART_MspInit+0x170>)
 8003a6c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003a6e:	4b31      	ldr	r3, [pc, #196]	@ (8003b34 <HAL_UART_MspInit+0x16c>)
 8003a70:	2222      	movs	r2, #34	@ 0x22
 8003a72:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a74:	4b2f      	ldr	r3, [pc, #188]	@ (8003b34 <HAL_UART_MspInit+0x16c>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8003b34 <HAL_UART_MspInit+0x16c>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a80:	4b2c      	ldr	r3, [pc, #176]	@ (8003b34 <HAL_UART_MspInit+0x16c>)
 8003a82:	2280      	movs	r2, #128	@ 0x80
 8003a84:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a86:	4b2b      	ldr	r3, [pc, #172]	@ (8003b34 <HAL_UART_MspInit+0x16c>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a8c:	4b29      	ldr	r3, [pc, #164]	@ (8003b34 <HAL_UART_MspInit+0x16c>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8003a92:	4b28      	ldr	r3, [pc, #160]	@ (8003b34 <HAL_UART_MspInit+0x16c>)
 8003a94:	2220      	movs	r2, #32
 8003a96:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003a98:	4b26      	ldr	r3, [pc, #152]	@ (8003b34 <HAL_UART_MspInit+0x16c>)
 8003a9a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003a9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003aa0:	4824      	ldr	r0, [pc, #144]	@ (8003b34 <HAL_UART_MspInit+0x16c>)
 8003aa2:	f002 f971 	bl	8005d88 <HAL_DMA_Init>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8003aac:	f7ff fc06 	bl	80032bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a20      	ldr	r2, [pc, #128]	@ (8003b34 <HAL_UART_MspInit+0x16c>)
 8003ab4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8003b34 <HAL_UART_MspInit+0x16c>)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8003abe:	4b1f      	ldr	r3, [pc, #124]	@ (8003b3c <HAL_UART_MspInit+0x174>)
 8003ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8003b40 <HAL_UART_MspInit+0x178>)
 8003ac2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b3c <HAL_UART_MspInit+0x174>)
 8003ac6:	2223      	movs	r2, #35	@ 0x23
 8003ac8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003aca:	4b1c      	ldr	r3, [pc, #112]	@ (8003b3c <HAL_UART_MspInit+0x174>)
 8003acc:	2210      	movs	r2, #16
 8003ace:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b3c <HAL_UART_MspInit+0x174>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ad6:	4b19      	ldr	r3, [pc, #100]	@ (8003b3c <HAL_UART_MspInit+0x174>)
 8003ad8:	2280      	movs	r2, #128	@ 0x80
 8003ada:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003adc:	4b17      	ldr	r3, [pc, #92]	@ (8003b3c <HAL_UART_MspInit+0x174>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ae2:	4b16      	ldr	r3, [pc, #88]	@ (8003b3c <HAL_UART_MspInit+0x174>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003ae8:	4b14      	ldr	r3, [pc, #80]	@ (8003b3c <HAL_UART_MspInit+0x174>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003aee:	4b13      	ldr	r3, [pc, #76]	@ (8003b3c <HAL_UART_MspInit+0x174>)
 8003af0:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003af4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003af6:	4811      	ldr	r0, [pc, #68]	@ (8003b3c <HAL_UART_MspInit+0x174>)
 8003af8:	f002 f946 	bl	8005d88 <HAL_DMA_Init>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8003b02:	f7ff fbdb 	bl	80032bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a0c      	ldr	r2, [pc, #48]	@ (8003b3c <HAL_UART_MspInit+0x174>)
 8003b0a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b3c <HAL_UART_MspInit+0x174>)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8003b12:	2200      	movs	r2, #0
 8003b14:	2105      	movs	r1, #5
 8003b16:	205b      	movs	r0, #91	@ 0x5b
 8003b18:	f002 f90e 	bl	8005d38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003b1c:	205b      	movs	r0, #91	@ 0x5b
 8003b1e:	f002 f925 	bl	8005d6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8003b22:	bf00      	nop
 8003b24:	3778      	adds	r7, #120	@ 0x78
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40008000 	.word	0x40008000
 8003b30:	40021000 	.word	0x40021000
 8003b34:	20005148 	.word	0x20005148
 8003b38:	40020008 	.word	0x40020008
 8003b3c:	200051a8 	.word	0x200051a8
 8003b40:	4002001c 	.word	0x4002001c

08003b44 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003b52:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8003b54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b58:	4904      	ldr	r1, [pc, #16]	@ (8003b6c <cubemx_transport_open+0x28>)
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f005 fa52 	bl	8009004 <HAL_UART_Receive_DMA>
    return true;
 8003b60:	2301      	movs	r3, #1
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20005208 	.word	0x20005208

08003b70 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003b7e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f005 fa8b 	bl	800909c <HAL_UART_DMAStop>
    return true;
 8003b86:	2301      	movs	r3, #1
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003ba4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d11b      	bne.n	8003be8 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	68b9      	ldr	r1, [r7, #8]
 8003bb8:	6978      	ldr	r0, [r7, #20]
 8003bba:	f005 f9a3 	bl	8008f04 <HAL_UART_Transmit_DMA>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003bc2:	e002      	b.n	8003bca <cubemx_transport_write+0x3a>
            osDelay(1);
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	f007 fbed 	bl	800b3a4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003bca:	7cfb      	ldrb	r3, [r7, #19]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d104      	bne.n	8003bda <cubemx_transport_write+0x4a>
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	d1f4      	bne.n	8003bc4 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8003bda:	7cfb      	ldrb	r3, [r7, #19]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <cubemx_transport_write+0x54>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	e002      	b.n	8003bea <cubemx_transport_write+0x5a>
 8003be4:	2300      	movs	r3, #0
 8003be6:	e000      	b.n	8003bea <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8003be8:	2300      	movs	r3, #0
    }
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003c08:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c0e:	b672      	cpsid	i
}
 8003c10:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8003c20:	4a1b      	ldr	r2, [pc, #108]	@ (8003c90 <cubemx_transport_read+0x9c>)
 8003c22:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c24:	b662      	cpsie	i
}
 8003c26:	bf00      	nop
        __enable_irq();
        ms_used++;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f007 fbb8 	bl	800b3a4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8003c34:	4b17      	ldr	r3, [pc, #92]	@ (8003c94 <cubemx_transport_read+0xa0>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	4b15      	ldr	r3, [pc, #84]	@ (8003c90 <cubemx_transport_read+0x9c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d103      	bne.n	8003c48 <cubemx_transport_read+0x54>
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	dbe2      	blt.n	8003c0e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8003c4c:	e011      	b.n	8003c72 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8003c4e:	4b11      	ldr	r3, [pc, #68]	@ (8003c94 <cubemx_transport_read+0xa0>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	440b      	add	r3, r1
 8003c58:	490f      	ldr	r1, [pc, #60]	@ (8003c98 <cubemx_transport_read+0xa4>)
 8003c5a:	5c8a      	ldrb	r2, [r1, r2]
 8003c5c:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c94 <cubemx_transport_read+0xa0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3301      	adds	r3, #1
 8003c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c68:	4a0a      	ldr	r2, [pc, #40]	@ (8003c94 <cubemx_transport_read+0xa0>)
 8003c6a:	6013      	str	r3, [r2, #0]
        wrote++;
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8003c72:	4b08      	ldr	r3, [pc, #32]	@ (8003c94 <cubemx_transport_read+0xa0>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4b06      	ldr	r3, [pc, #24]	@ (8003c90 <cubemx_transport_read+0x9c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d003      	beq.n	8003c86 <cubemx_transport_read+0x92>
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d3e3      	bcc.n	8003c4e <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8003c86:	69bb      	ldr	r3, [r7, #24]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3720      	adds	r7, #32
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20005a0c 	.word	0x20005a0c
 8003c94:	20005a08 	.word	0x20005a08
 8003c98:	20005208 	.word	0x20005208

08003c9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c9c:	480d      	ldr	r0, [pc, #52]	@ (8003cd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ca0:	f7ff fe36 	bl	8003910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ca4:	480c      	ldr	r0, [pc, #48]	@ (8003cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ca6:	490d      	ldr	r1, [pc, #52]	@ (8003cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ce0 <LoopForever+0xe>)
  movs r3, #0
 8003caa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003cac:	e002      	b.n	8003cb4 <LoopCopyDataInit>

08003cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cb2:	3304      	adds	r3, #4

08003cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cb8:	d3f9      	bcc.n	8003cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cba:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8003ce8 <LoopForever+0x16>)
  movs r3, #0
 8003cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cc0:	e001      	b.n	8003cc6 <LoopFillZerobss>

08003cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cc4:	3204      	adds	r2, #4

08003cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cc8:	d3fb      	bcc.n	8003cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003cca:	f019 fdc3 	bl	801d854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003cce:	f7ff fa7d 	bl	80031cc <main>

08003cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8003cd2:	e7fe      	b.n	8003cd2 <LoopForever>
  ldr   r0, =_estack
 8003cd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cdc:	20000e30 	.word	0x20000e30
  ldr r2, =_sidata
 8003ce0:	08020e68 	.word	0x08020e68
  ldr r2, =_sbss
 8003ce4:	20000e30 	.word	0x20000e30
  ldr r4, =_ebss
 8003ce8:	2000c624 	.word	0x2000c624

08003cec <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003cec:	e7fe      	b.n	8003cec <ADC3_IRQHandler>

08003cee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cf8:	2003      	movs	r0, #3
 8003cfa:	f002 f812 	bl	8005d22 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cfe:	200f      	movs	r0, #15
 8003d00:	f7ff fc70 	bl	80035e4 <HAL_InitTick>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	71fb      	strb	r3, [r7, #7]
 8003d0e:	e001      	b.n	8003d14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d10:	f7ff fc3e 	bl	8003590 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d14:	79fb      	ldrb	r3, [r7, #7]

}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d24:	4b05      	ldr	r3, [pc, #20]	@ (8003d3c <HAL_IncTick+0x1c>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b05      	ldr	r3, [pc, #20]	@ (8003d40 <HAL_IncTick+0x20>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	4a03      	ldr	r2, [pc, #12]	@ (8003d3c <HAL_IncTick+0x1c>)
 8003d30:	6013      	str	r3, [r2, #0]
}
 8003d32:	bf00      	nop
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	20005a10 	.word	0x20005a10
 8003d40:	2000000c 	.word	0x2000000c

08003d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  return uwTick;
 8003d48:	4b03      	ldr	r3, [pc, #12]	@ (8003d58 <HAL_GetTick+0x14>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20005a10 	.word	0x20005a10

08003d5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	609a      	str	r2, [r3, #8]
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3360      	adds	r3, #96	@ 0x60
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b08      	ldr	r3, [pc, #32]	@ (8003e08 <LL_ADC_SetOffset+0x44>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003dfc:	bf00      	nop
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	03fff000 	.word	0x03fff000

08003e0c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3360      	adds	r3, #96	@ 0x60
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3360      	adds	r3, #96	@ 0x60
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b087      	sub	sp, #28
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3360      	adds	r3, #96	@ 0x60
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003e98:	bf00      	nop
 8003e9a:	371c      	adds	r7, #28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3360      	adds	r3, #96	@ 0x60
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	615a      	str	r2, [r3, #20]
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e000      	b.n	8003f1a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b087      	sub	sp, #28
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3330      	adds	r3, #48	@ 0x30
 8003f36:	461a      	mov	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	0a1b      	lsrs	r3, r3, #8
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	4413      	add	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	211f      	movs	r1, #31
 8003f52:	fa01 f303 	lsl.w	r3, r1, r3
 8003f56:	43db      	mvns	r3, r3
 8003f58:	401a      	ands	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	0e9b      	lsrs	r3, r3, #26
 8003f5e:	f003 011f 	and.w	r1, r3, #31
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f72:	bf00      	nop
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f8a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3314      	adds	r3, #20
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	0e5b      	lsrs	r3, r3, #25
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	4413      	add	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	0d1b      	lsrs	r3, r3, #20
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	2107      	movs	r1, #7
 8003fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	401a      	ands	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	0d1b      	lsrs	r3, r3, #20
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004014:	43db      	mvns	r3, r3
 8004016:	401a      	ands	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f003 0318 	and.w	r3, r3, #24
 800401e:	4908      	ldr	r1, [pc, #32]	@ (8004040 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004020:	40d9      	lsrs	r1, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	400b      	ands	r3, r1
 8004026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800402a:	431a      	orrs	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004032:	bf00      	nop
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	0007ffff 	.word	0x0007ffff

08004044 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 031f 	and.w	r3, r3, #31
}
 8004054:	4618      	mov	r0, r3
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004070:	4618      	mov	r0, r3
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800408c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6093      	str	r3, [r2, #8]
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040b4:	d101      	bne.n	80040ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80040d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80040dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004100:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004104:	d101      	bne.n	800410a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004128:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800412c:	f043 0201 	orr.w	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004150:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004154:	f043 0202 	orr.w	r2, r3, #2
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <LL_ADC_IsEnabled+0x18>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <LL_ADC_IsEnabled+0x1a>
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d101      	bne.n	80041a6 <LL_ADC_IsDisableOngoing+0x18>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <LL_ADC_IsDisableOngoing+0x1a>
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80041c8:	f043 0204 	orr.w	r2, r3, #4
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d101      	bne.n	80041f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b08      	cmp	r3, #8
 8004214:	d101      	bne.n	800421a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004228:	b590      	push	{r4, r7, lr}
 800422a:	b089      	sub	sp, #36	@ 0x24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e1a9      	b.n	8004596 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d109      	bne.n	8004264 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fc ff09 	bl	8001068 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff ff19 	bl	80040a0 <LL_ADC_IsDeepPowerDownEnabled>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d004      	beq.n	800427e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff feff 	bl	800407c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff ff34 	bl	80040f0 <LL_ADC_IsInternalRegulatorEnabled>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d115      	bne.n	80042ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff ff18 	bl	80040c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004298:	4b9c      	ldr	r3, [pc, #624]	@ (800450c <HAL_ADC_Init+0x2e4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	099b      	lsrs	r3, r3, #6
 800429e:	4a9c      	ldr	r2, [pc, #624]	@ (8004510 <HAL_ADC_Init+0x2e8>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	099b      	lsrs	r3, r3, #6
 80042a6:	3301      	adds	r3, #1
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80042ac:	e002      	b.n	80042b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f9      	bne.n	80042ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff ff16 	bl	80040f0 <LL_ADC_IsInternalRegulatorEnabled>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10d      	bne.n	80042e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ce:	f043 0210 	orr.w	r2, r3, #16
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042da:	f043 0201 	orr.w	r2, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff ff76 	bl	80041dc <LL_ADC_REG_IsConversionOngoing>
 80042f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f6:	f003 0310 	and.w	r3, r3, #16
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f040 8142 	bne.w	8004584 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2b00      	cmp	r3, #0
 8004304:	f040 813e 	bne.w	8004584 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004310:	f043 0202 	orr.w	r2, r3, #2
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff ff23 	bl	8004168 <LL_ADC_IsEnabled>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d141      	bne.n	80043ac <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004330:	d004      	beq.n	800433c <HAL_ADC_Init+0x114>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a77      	ldr	r2, [pc, #476]	@ (8004514 <HAL_ADC_Init+0x2ec>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d10f      	bne.n	800435c <HAL_ADC_Init+0x134>
 800433c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004340:	f7ff ff12 	bl	8004168 <LL_ADC_IsEnabled>
 8004344:	4604      	mov	r4, r0
 8004346:	4873      	ldr	r0, [pc, #460]	@ (8004514 <HAL_ADC_Init+0x2ec>)
 8004348:	f7ff ff0e 	bl	8004168 <LL_ADC_IsEnabled>
 800434c:	4603      	mov	r3, r0
 800434e:	4323      	orrs	r3, r4
 8004350:	2b00      	cmp	r3, #0
 8004352:	bf0c      	ite	eq
 8004354:	2301      	moveq	r3, #1
 8004356:	2300      	movne	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	e012      	b.n	8004382 <HAL_ADC_Init+0x15a>
 800435c:	486e      	ldr	r0, [pc, #440]	@ (8004518 <HAL_ADC_Init+0x2f0>)
 800435e:	f7ff ff03 	bl	8004168 <LL_ADC_IsEnabled>
 8004362:	4604      	mov	r4, r0
 8004364:	486d      	ldr	r0, [pc, #436]	@ (800451c <HAL_ADC_Init+0x2f4>)
 8004366:	f7ff feff 	bl	8004168 <LL_ADC_IsEnabled>
 800436a:	4603      	mov	r3, r0
 800436c:	431c      	orrs	r4, r3
 800436e:	486c      	ldr	r0, [pc, #432]	@ (8004520 <HAL_ADC_Init+0x2f8>)
 8004370:	f7ff fefa 	bl	8004168 <LL_ADC_IsEnabled>
 8004374:	4603      	mov	r3, r0
 8004376:	4323      	orrs	r3, r4
 8004378:	2b00      	cmp	r3, #0
 800437a:	bf0c      	ite	eq
 800437c:	2301      	moveq	r3, #1
 800437e:	2300      	movne	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d012      	beq.n	80043ac <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800438e:	d004      	beq.n	800439a <HAL_ADC_Init+0x172>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a5f      	ldr	r2, [pc, #380]	@ (8004514 <HAL_ADC_Init+0x2ec>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d101      	bne.n	800439e <HAL_ADC_Init+0x176>
 800439a:	4a62      	ldr	r2, [pc, #392]	@ (8004524 <HAL_ADC_Init+0x2fc>)
 800439c:	e000      	b.n	80043a0 <HAL_ADC_Init+0x178>
 800439e:	4a62      	ldr	r2, [pc, #392]	@ (8004528 <HAL_ADC_Init+0x300>)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f7ff fcd8 	bl	8003d5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	7f5b      	ldrb	r3, [r3, #29]
 80043b0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043b6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80043bc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80043c2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80043ca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043cc:	4313      	orrs	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d106      	bne.n	80043e8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043de:	3b01      	subs	r3, #1
 80043e0:	045b      	lsls	r3, r3, #17
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4313      	orrs	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	4b48      	ldr	r3, [pc, #288]	@ (800452c <HAL_ADC_Init+0x304>)
 800440c:	4013      	ands	r3, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6812      	ldr	r2, [r2, #0]
 8004412:	69b9      	ldr	r1, [r7, #24]
 8004414:	430b      	orrs	r3, r1
 8004416:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fee5 	bl	8004202 <LL_ADC_INJ_IsConversionOngoing>
 8004438:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d17f      	bne.n	8004540 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d17c      	bne.n	8004540 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800444a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004452:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004462:	f023 0302 	bic.w	r3, r3, #2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	69b9      	ldr	r1, [r7, #24]
 800446c:	430b      	orrs	r3, r1
 800446e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d017      	beq.n	80044a8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004486:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004490:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004494:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6911      	ldr	r1, [r2, #16]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	430b      	orrs	r3, r1
 80044a2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80044a6:	e013      	b.n	80044d0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691a      	ldr	r2, [r3, #16]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80044b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80044c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044cc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d12a      	bne.n	8004530 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80044e4:	f023 0304 	bic.w	r3, r3, #4
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80044f0:	4311      	orrs	r1, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80044f6:	4311      	orrs	r1, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044fc:	430a      	orrs	r2, r1
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0201 	orr.w	r2, r2, #1
 8004508:	611a      	str	r2, [r3, #16]
 800450a:	e019      	b.n	8004540 <HAL_ADC_Init+0x318>
 800450c:	20000004 	.word	0x20000004
 8004510:	053e2d63 	.word	0x053e2d63
 8004514:	50000100 	.word	0x50000100
 8004518:	50000400 	.word	0x50000400
 800451c:	50000500 	.word	0x50000500
 8004520:	50000600 	.word	0x50000600
 8004524:	50000300 	.word	0x50000300
 8004528:	50000700 	.word	0x50000700
 800452c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0201 	bic.w	r2, r2, #1
 800453e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d10c      	bne.n	8004562 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454e:	f023 010f 	bic.w	r1, r3, #15
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	1e5a      	subs	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004560:	e007      	b.n	8004572 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 020f 	bic.w	r2, r2, #15
 8004570:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004576:	f023 0303 	bic.w	r3, r3, #3
 800457a:	f043 0201 	orr.w	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004582:	e007      	b.n	8004594 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004588:	f043 0210 	orr.w	r2, r3, #16
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004594:	7ffb      	ldrb	r3, [r7, #31]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3724      	adds	r7, #36	@ 0x24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd90      	pop	{r4, r7, pc}
 800459e:	bf00      	nop

080045a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045b4:	d004      	beq.n	80045c0 <HAL_ADC_Start_DMA+0x20>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a5a      	ldr	r2, [pc, #360]	@ (8004724 <HAL_ADC_Start_DMA+0x184>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d101      	bne.n	80045c4 <HAL_ADC_Start_DMA+0x24>
 80045c0:	4b59      	ldr	r3, [pc, #356]	@ (8004728 <HAL_ADC_Start_DMA+0x188>)
 80045c2:	e000      	b.n	80045c6 <HAL_ADC_Start_DMA+0x26>
 80045c4:	4b59      	ldr	r3, [pc, #356]	@ (800472c <HAL_ADC_Start_DMA+0x18c>)
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fd3c 	bl	8004044 <LL_ADC_GetMultimode>
 80045cc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff fe02 	bl	80041dc <LL_ADC_REG_IsConversionOngoing>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f040 809b 	bne.w	8004716 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_ADC_Start_DMA+0x4e>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e096      	b.n	800471c <HAL_ADC_Start_DMA+0x17c>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a4d      	ldr	r2, [pc, #308]	@ (8004730 <HAL_ADC_Start_DMA+0x190>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d008      	beq.n	8004612 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b05      	cmp	r3, #5
 800460a:	d002      	beq.n	8004612 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b09      	cmp	r3, #9
 8004610:	d17a      	bne.n	8004708 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 ff60 	bl	80054d8 <ADC_Enable>
 8004618:	4603      	mov	r3, r0
 800461a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d16d      	bne.n	80046fe <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004626:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800462a:	f023 0301 	bic.w	r3, r3, #1
 800462e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a3a      	ldr	r2, [pc, #232]	@ (8004724 <HAL_ADC_Start_DMA+0x184>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d009      	beq.n	8004654 <HAL_ADC_Start_DMA+0xb4>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a3b      	ldr	r2, [pc, #236]	@ (8004734 <HAL_ADC_Start_DMA+0x194>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d002      	beq.n	8004650 <HAL_ADC_Start_DMA+0xb0>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	e003      	b.n	8004658 <HAL_ADC_Start_DMA+0xb8>
 8004650:	4b39      	ldr	r3, [pc, #228]	@ (8004738 <HAL_ADC_Start_DMA+0x198>)
 8004652:	e001      	b.n	8004658 <HAL_ADC_Start_DMA+0xb8>
 8004654:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	4293      	cmp	r3, r2
 800465e:	d002      	beq.n	8004666 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d105      	bne.n	8004672 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004676:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d006      	beq.n	800468c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004682:	f023 0206 	bic.w	r2, r3, #6
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	661a      	str	r2, [r3, #96]	@ 0x60
 800468a:	e002      	b.n	8004692 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004696:	4a29      	ldr	r2, [pc, #164]	@ (800473c <HAL_ADC_Start_DMA+0x19c>)
 8004698:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469e:	4a28      	ldr	r2, [pc, #160]	@ (8004740 <HAL_ADC_Start_DMA+0x1a0>)
 80046a0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a6:	4a27      	ldr	r2, [pc, #156]	@ (8004744 <HAL_ADC_Start_DMA+0x1a4>)
 80046a8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	221c      	movs	r2, #28
 80046b0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0210 	orr.w	r2, r2, #16
 80046c8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f042 0201 	orr.w	r2, r2, #1
 80046d8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3340      	adds	r3, #64	@ 0x40
 80046e4:	4619      	mov	r1, r3
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f001 fbf5 	bl	8005ed8 <HAL_DMA_Start_IT>
 80046ee:	4603      	mov	r3, r0
 80046f0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fd5c 	bl	80041b4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80046fc:	e00d      	b.n	800471a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004706:	e008      	b.n	800471a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004714:	e001      	b.n	800471a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004716:	2302      	movs	r3, #2
 8004718:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800471a:	7dfb      	ldrb	r3, [r7, #23]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	50000100 	.word	0x50000100
 8004728:	50000300 	.word	0x50000300
 800472c:	50000700 	.word	0x50000700
 8004730:	50000600 	.word	0x50000600
 8004734:	50000500 	.word	0x50000500
 8004738:	50000400 	.word	0x50000400
 800473c:	080056c3 	.word	0x080056c3
 8004740:	0800579b 	.word	0x0800579b
 8004744:	080057b7 	.word	0x080057b7

08004748 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	@ 0x28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004750:	2300      	movs	r3, #0
 8004752:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800476c:	d004      	beq.n	8004778 <HAL_ADC_IRQHandler+0x30>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a8e      	ldr	r2, [pc, #568]	@ (80049ac <HAL_ADC_IRQHandler+0x264>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d101      	bne.n	800477c <HAL_ADC_IRQHandler+0x34>
 8004778:	4b8d      	ldr	r3, [pc, #564]	@ (80049b0 <HAL_ADC_IRQHandler+0x268>)
 800477a:	e000      	b.n	800477e <HAL_ADC_IRQHandler+0x36>
 800477c:	4b8d      	ldr	r3, [pc, #564]	@ (80049b4 <HAL_ADC_IRQHandler+0x26c>)
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff fc60 	bl	8004044 <LL_ADC_GetMultimode>
 8004784:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d017      	beq.n	80047c0 <HAL_ADC_IRQHandler+0x78>
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d012      	beq.n	80047c0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d105      	bne.n	80047b2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047aa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f001 f8f6 	bl	80059a4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2202      	movs	r2, #2
 80047be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d004      	beq.n	80047d4 <HAL_ADC_IRQHandler+0x8c>
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10b      	bne.n	80047ec <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 8094 	beq.w	8004908 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 808e 	beq.w	8004908 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d105      	bne.n	8004804 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff fb79 	bl	8003f00 <LL_ADC_REG_IsTriggerSourceSWStart>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d072      	beq.n	80048fa <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a64      	ldr	r2, [pc, #400]	@ (80049ac <HAL_ADC_IRQHandler+0x264>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d009      	beq.n	8004832 <HAL_ADC_IRQHandler+0xea>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a65      	ldr	r2, [pc, #404]	@ (80049b8 <HAL_ADC_IRQHandler+0x270>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d002      	beq.n	800482e <HAL_ADC_IRQHandler+0xe6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	e003      	b.n	8004836 <HAL_ADC_IRQHandler+0xee>
 800482e:	4b63      	ldr	r3, [pc, #396]	@ (80049bc <HAL_ADC_IRQHandler+0x274>)
 8004830:	e001      	b.n	8004836 <HAL_ADC_IRQHandler+0xee>
 8004832:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6812      	ldr	r2, [r2, #0]
 800483a:	4293      	cmp	r3, r2
 800483c:	d008      	beq.n	8004850 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2b05      	cmp	r3, #5
 8004848:	d002      	beq.n	8004850 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2b09      	cmp	r3, #9
 800484e:	d104      	bne.n	800485a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	623b      	str	r3, [r7, #32]
 8004858:	e014      	b.n	8004884 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a53      	ldr	r2, [pc, #332]	@ (80049ac <HAL_ADC_IRQHandler+0x264>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d009      	beq.n	8004878 <HAL_ADC_IRQHandler+0x130>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a53      	ldr	r2, [pc, #332]	@ (80049b8 <HAL_ADC_IRQHandler+0x270>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d002      	beq.n	8004874 <HAL_ADC_IRQHandler+0x12c>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	e003      	b.n	800487c <HAL_ADC_IRQHandler+0x134>
 8004874:	4b51      	ldr	r3, [pc, #324]	@ (80049bc <HAL_ADC_IRQHandler+0x274>)
 8004876:	e001      	b.n	800487c <HAL_ADC_IRQHandler+0x134>
 8004878:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800487c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d135      	bne.n	80048fa <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b08      	cmp	r3, #8
 800489a:	d12e      	bne.n	80048fa <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fc9b 	bl	80041dc <LL_ADC_REG_IsConversionOngoing>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d11a      	bne.n	80048e2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 020c 	bic.w	r2, r2, #12
 80048ba:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d112      	bne.n	80048fa <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d8:	f043 0201 	orr.w	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048e0:	e00b      	b.n	80048fa <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e6:	f043 0210 	orr.w	r2, r3, #16
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f2:	f043 0201 	orr.w	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f984 	bl	8004c08 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	220c      	movs	r2, #12
 8004906:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d004      	beq.n	800491c <HAL_ADC_IRQHandler+0x1d4>
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10b      	bne.n	8004934 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 80b3 	beq.w	8004a8e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80ad 	beq.w	8004a8e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004938:	f003 0310 	and.w	r3, r3, #16
 800493c:	2b00      	cmp	r3, #0
 800493e:	d105      	bne.n	800494c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004944:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fb14 	bl	8003f7e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004956:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff facf 	bl	8003f00 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004962:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a10      	ldr	r2, [pc, #64]	@ (80049ac <HAL_ADC_IRQHandler+0x264>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d009      	beq.n	8004982 <HAL_ADC_IRQHandler+0x23a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a11      	ldr	r2, [pc, #68]	@ (80049b8 <HAL_ADC_IRQHandler+0x270>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d002      	beq.n	800497e <HAL_ADC_IRQHandler+0x236>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	e003      	b.n	8004986 <HAL_ADC_IRQHandler+0x23e>
 800497e:	4b0f      	ldr	r3, [pc, #60]	@ (80049bc <HAL_ADC_IRQHandler+0x274>)
 8004980:	e001      	b.n	8004986 <HAL_ADC_IRQHandler+0x23e>
 8004982:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	4293      	cmp	r3, r2
 800498c:	d008      	beq.n	80049a0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2b06      	cmp	r3, #6
 8004998:	d002      	beq.n	80049a0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b07      	cmp	r3, #7
 800499e:	d10f      	bne.n	80049c0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	623b      	str	r3, [r7, #32]
 80049a8:	e01f      	b.n	80049ea <HAL_ADC_IRQHandler+0x2a2>
 80049aa:	bf00      	nop
 80049ac:	50000100 	.word	0x50000100
 80049b0:	50000300 	.word	0x50000300
 80049b4:	50000700 	.word	0x50000700
 80049b8:	50000500 	.word	0x50000500
 80049bc:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a8b      	ldr	r2, [pc, #556]	@ (8004bf4 <HAL_ADC_IRQHandler+0x4ac>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d009      	beq.n	80049de <HAL_ADC_IRQHandler+0x296>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a8a      	ldr	r2, [pc, #552]	@ (8004bf8 <HAL_ADC_IRQHandler+0x4b0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d002      	beq.n	80049da <HAL_ADC_IRQHandler+0x292>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	e003      	b.n	80049e2 <HAL_ADC_IRQHandler+0x29a>
 80049da:	4b88      	ldr	r3, [pc, #544]	@ (8004bfc <HAL_ADC_IRQHandler+0x4b4>)
 80049dc:	e001      	b.n	80049e2 <HAL_ADC_IRQHandler+0x29a>
 80049de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80049e2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d047      	beq.n	8004a80 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d007      	beq.n	8004a0a <HAL_ADC_IRQHandler+0x2c2>
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d03f      	beq.n	8004a80 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d13a      	bne.n	8004a80 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a14:	2b40      	cmp	r3, #64	@ 0x40
 8004a16:	d133      	bne.n	8004a80 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d12e      	bne.n	8004a80 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff fbeb 	bl	8004202 <LL_ADC_INJ_IsConversionOngoing>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d11a      	bne.n	8004a68 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a40:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d112      	bne.n	8004a80 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5e:	f043 0201 	orr.w	r2, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a66:	e00b      	b.n	8004a80 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6c:	f043 0210 	orr.w	r2, r3, #16
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a78:	f043 0201 	orr.w	r2, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 ff67 	bl	8005954 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2260      	movs	r2, #96	@ 0x60
 8004a8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d011      	beq.n	8004abc <HAL_ADC_IRQHandler+0x374>
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00c      	beq.n	8004abc <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f8be 	bl	8004c30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2280      	movs	r2, #128	@ 0x80
 8004aba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d012      	beq.n	8004aec <HAL_ADC_IRQHandler+0x3a4>
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00d      	beq.n	8004aec <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 ff4d 	bl	800597c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004aea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d012      	beq.n	8004b1c <HAL_ADC_IRQHandler+0x3d4>
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00d      	beq.n	8004b1c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b04:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 ff3f 	bl	8005990 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f003 0310 	and.w	r3, r3, #16
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d043      	beq.n	8004bae <HAL_ADC_IRQHandler+0x466>
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d03e      	beq.n	8004bae <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d102      	bne.n	8004b3e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b3c:	e021      	b.n	8004b82 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d015      	beq.n	8004b70 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b4c:	d004      	beq.n	8004b58 <HAL_ADC_IRQHandler+0x410>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a28      	ldr	r2, [pc, #160]	@ (8004bf4 <HAL_ADC_IRQHandler+0x4ac>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d101      	bne.n	8004b5c <HAL_ADC_IRQHandler+0x414>
 8004b58:	4b29      	ldr	r3, [pc, #164]	@ (8004c00 <HAL_ADC_IRQHandler+0x4b8>)
 8004b5a:	e000      	b.n	8004b5e <HAL_ADC_IRQHandler+0x416>
 8004b5c:	4b29      	ldr	r3, [pc, #164]	@ (8004c04 <HAL_ADC_IRQHandler+0x4bc>)
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff fa7e 	bl	8004060 <LL_ADC_GetMultiDMATransfer>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00b      	beq.n	8004b82 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b6e:	e008      	b.n	8004b82 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d10e      	bne.n	8004ba6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b8c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b98:	f043 0202 	orr.w	r2, r3, #2
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f84f 	bl	8004c44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2210      	movs	r2, #16
 8004bac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d018      	beq.n	8004bea <HAL_ADC_IRQHandler+0x4a2>
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d013      	beq.n	8004bea <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bd2:	f043 0208 	orr.w	r2, r3, #8
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004be2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 febf 	bl	8005968 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004bea:	bf00      	nop
 8004bec:	3728      	adds	r7, #40	@ 0x28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	50000100 	.word	0x50000100
 8004bf8:	50000500 	.word	0x50000500
 8004bfc:	50000400 	.word	0x50000400
 8004c00:	50000300 	.word	0x50000300
 8004c04:	50000700 	.word	0x50000700

08004c08 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b0b6      	sub	sp, #216	@ 0xd8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d102      	bne.n	8004c7c <HAL_ADC_ConfigChannel+0x24>
 8004c76:	2302      	movs	r3, #2
 8004c78:	f000 bc13 	b.w	80054a2 <HAL_ADC_ConfigChannel+0x84a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff faa7 	bl	80041dc <LL_ADC_REG_IsConversionOngoing>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f040 83f3 	bne.w	800547c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6859      	ldr	r1, [r3, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f7ff f93f 	bl	8003f26 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff fa95 	bl	80041dc <LL_ADC_REG_IsConversionOngoing>
 8004cb2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff faa1 	bl	8004202 <LL_ADC_INJ_IsConversionOngoing>
 8004cc0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cc4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f040 81d9 	bne.w	8005080 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004cce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f040 81d4 	bne.w	8005080 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ce0:	d10f      	bne.n	8004d02 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2200      	movs	r2, #0
 8004cec:	4619      	mov	r1, r3
 8004cee:	f7ff f959 	bl	8003fa4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff f8ed 	bl	8003eda <LL_ADC_SetSamplingTimeCommonConfig>
 8004d00:	e00e      	b.n	8004d20 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6819      	ldr	r1, [r3, #0]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f7ff f948 	bl	8003fa4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2100      	movs	r1, #0
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff f8dd 	bl	8003eda <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	695a      	ldr	r2, [r3, #20]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	08db      	lsrs	r3, r3, #3
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d022      	beq.n	8004d88 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	6919      	ldr	r1, [r3, #16]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d52:	f7ff f837 	bl	8003dc4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6919      	ldr	r1, [r3, #16]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	461a      	mov	r2, r3
 8004d64:	f7ff f883 	bl	8003e6e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6818      	ldr	r0, [r3, #0]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d102      	bne.n	8004d7e <HAL_ADC_ConfigChannel+0x126>
 8004d78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d7c:	e000      	b.n	8004d80 <HAL_ADC_ConfigChannel+0x128>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	461a      	mov	r2, r3
 8004d82:	f7ff f88f 	bl	8003ea4 <LL_ADC_SetOffsetSaturation>
 8004d86:	e17b      	b.n	8005080 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff f83c 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x15c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2100      	movs	r1, #0
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff f831 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 8004daa:	4603      	mov	r3, r0
 8004dac:	0e9b      	lsrs	r3, r3, #26
 8004dae:	f003 021f 	and.w	r2, r3, #31
 8004db2:	e01e      	b.n	8004df2 <HAL_ADC_ConfigChannel+0x19a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2100      	movs	r1, #0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff f826 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004dca:	fa93 f3a3 	rbit	r3, r3
 8004dce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004dd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004dd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004dda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004de2:	2320      	movs	r3, #32
 8004de4:	e004      	b.n	8004df0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004de6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004dea:	fab3 f383 	clz	r3, r3
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d105      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0x1b2>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	0e9b      	lsrs	r3, r3, #26
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	e018      	b.n	8004e3c <HAL_ADC_ConfigChannel+0x1e4>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004e16:	fa93 f3a3 	rbit	r3, r3
 8004e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004e26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004e2e:	2320      	movs	r3, #32
 8004e30:	e004      	b.n	8004e3c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004e32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004e36:	fab3 f383 	clz	r3, r3
 8004e3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d106      	bne.n	8004e4e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2200      	movs	r2, #0
 8004e46:	2100      	movs	r1, #0
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fe fff5 	bl	8003e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2101      	movs	r1, #1
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fe ffd9 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <HAL_ADC_ConfigChannel+0x222>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2101      	movs	r1, #1
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe ffce 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 8004e70:	4603      	mov	r3, r0
 8004e72:	0e9b      	lsrs	r3, r3, #26
 8004e74:	f003 021f 	and.w	r2, r3, #31
 8004e78:	e01e      	b.n	8004eb8 <HAL_ADC_ConfigChannel+0x260>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2101      	movs	r1, #1
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fe ffc3 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e90:	fa93 f3a3 	rbit	r3, r3
 8004e94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004e98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004ea0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004ea8:	2320      	movs	r3, #32
 8004eaa:	e004      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004eac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004eb0:	fab3 f383 	clz	r3, r3
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d105      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x278>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	0e9b      	lsrs	r3, r3, #26
 8004eca:	f003 031f 	and.w	r3, r3, #31
 8004ece:	e018      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x2aa>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004edc:	fa93 f3a3 	rbit	r3, r3
 8004ee0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004ee4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ee8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004eec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004ef4:	2320      	movs	r3, #32
 8004ef6:	e004      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004efc:	fab3 f383 	clz	r3, r3
 8004f00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d106      	bne.n	8004f14 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe ff92 	bl	8003e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2102      	movs	r1, #2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe ff76 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10a      	bne.n	8004f40 <HAL_ADC_ConfigChannel+0x2e8>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2102      	movs	r1, #2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fe ff6b 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 8004f36:	4603      	mov	r3, r0
 8004f38:	0e9b      	lsrs	r3, r3, #26
 8004f3a:	f003 021f 	and.w	r2, r3, #31
 8004f3e:	e01e      	b.n	8004f7e <HAL_ADC_ConfigChannel+0x326>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2102      	movs	r1, #2
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe ff60 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f56:	fa93 f3a3 	rbit	r3, r3
 8004f5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004f5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004f66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004f6e:	2320      	movs	r3, #32
 8004f70:	e004      	b.n	8004f7c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004f72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004f76:	fab3 f383 	clz	r3, r3
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d105      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x33e>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	0e9b      	lsrs	r3, r3, #26
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	e016      	b.n	8004fc4 <HAL_ADC_ConfigChannel+0x36c>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004fa2:	fa93 f3a3 	rbit	r3, r3
 8004fa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004fa8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004faa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004fae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004fb6:	2320      	movs	r3, #32
 8004fb8:	e004      	b.n	8004fc4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004fba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004fbe:	fab3 f383 	clz	r3, r3
 8004fc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d106      	bne.n	8004fd6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2102      	movs	r1, #2
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fe ff31 	bl	8003e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2103      	movs	r1, #3
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fe ff15 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <HAL_ADC_ConfigChannel+0x3aa>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2103      	movs	r1, #3
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fe ff0a 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	0e9b      	lsrs	r3, r3, #26
 8004ffc:	f003 021f 	and.w	r2, r3, #31
 8005000:	e017      	b.n	8005032 <HAL_ADC_ConfigChannel+0x3da>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2103      	movs	r1, #3
 8005008:	4618      	mov	r0, r3
 800500a:	f7fe feff 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 800500e:	4603      	mov	r3, r0
 8005010:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005012:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005014:	fa93 f3a3 	rbit	r3, r3
 8005018:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800501a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800501c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800501e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005024:	2320      	movs	r3, #32
 8005026:	e003      	b.n	8005030 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005028:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800502a:	fab3 f383 	clz	r3, r3
 800502e:	b2db      	uxtb	r3, r3
 8005030:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800503a:	2b00      	cmp	r3, #0
 800503c:	d105      	bne.n	800504a <HAL_ADC_ConfigChannel+0x3f2>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	0e9b      	lsrs	r3, r3, #26
 8005044:	f003 031f 	and.w	r3, r3, #31
 8005048:	e011      	b.n	800506e <HAL_ADC_ConfigChannel+0x416>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005050:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005052:	fa93 f3a3 	rbit	r3, r3
 8005056:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005058:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800505a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800505c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005062:	2320      	movs	r3, #32
 8005064:	e003      	b.n	800506e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005066:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005068:	fab3 f383 	clz	r3, r3
 800506c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800506e:	429a      	cmp	r2, r3
 8005070:	d106      	bne.n	8005080 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2200      	movs	r2, #0
 8005078:	2103      	movs	r1, #3
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe fedc 	bl	8003e38 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff f86f 	bl	8004168 <LL_ADC_IsEnabled>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	f040 813d 	bne.w	800530c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	6819      	ldr	r1, [r3, #0]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	461a      	mov	r2, r3
 80050a0:	f7fe ffac 	bl	8003ffc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	4aa2      	ldr	r2, [pc, #648]	@ (8005334 <HAL_ADC_ConfigChannel+0x6dc>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	f040 812e 	bne.w	800530c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10b      	bne.n	80050d8 <HAL_ADC_ConfigChannel+0x480>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	0e9b      	lsrs	r3, r3, #26
 80050c6:	3301      	adds	r3, #1
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	2b09      	cmp	r3, #9
 80050ce:	bf94      	ite	ls
 80050d0:	2301      	movls	r3, #1
 80050d2:	2300      	movhi	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	e019      	b.n	800510c <HAL_ADC_ConfigChannel+0x4b4>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050e0:	fa93 f3a3 	rbit	r3, r3
 80050e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80050e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050e8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80050ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80050f0:	2320      	movs	r3, #32
 80050f2:	e003      	b.n	80050fc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80050f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050f6:	fab3 f383 	clz	r3, r3
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	3301      	adds	r3, #1
 80050fe:	f003 031f 	and.w	r3, r3, #31
 8005102:	2b09      	cmp	r3, #9
 8005104:	bf94      	ite	ls
 8005106:	2301      	movls	r3, #1
 8005108:	2300      	movhi	r3, #0
 800510a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800510c:	2b00      	cmp	r3, #0
 800510e:	d079      	beq.n	8005204 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005118:	2b00      	cmp	r3, #0
 800511a:	d107      	bne.n	800512c <HAL_ADC_ConfigChannel+0x4d4>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	0e9b      	lsrs	r3, r3, #26
 8005122:	3301      	adds	r3, #1
 8005124:	069b      	lsls	r3, r3, #26
 8005126:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800512a:	e015      	b.n	8005158 <HAL_ADC_ConfigChannel+0x500>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005134:	fa93 f3a3 	rbit	r3, r3
 8005138:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800513a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800513c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800513e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005144:	2320      	movs	r3, #32
 8005146:	e003      	b.n	8005150 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800514a:	fab3 f383 	clz	r3, r3
 800514e:	b2db      	uxtb	r3, r3
 8005150:	3301      	adds	r3, #1
 8005152:	069b      	lsls	r3, r3, #26
 8005154:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005160:	2b00      	cmp	r3, #0
 8005162:	d109      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x520>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	0e9b      	lsrs	r3, r3, #26
 800516a:	3301      	adds	r3, #1
 800516c:	f003 031f 	and.w	r3, r3, #31
 8005170:	2101      	movs	r1, #1
 8005172:	fa01 f303 	lsl.w	r3, r1, r3
 8005176:	e017      	b.n	80051a8 <HAL_ADC_ConfigChannel+0x550>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005180:	fa93 f3a3 	rbit	r3, r3
 8005184:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005188:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800518a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005190:	2320      	movs	r3, #32
 8005192:	e003      	b.n	800519c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005196:	fab3 f383 	clz	r3, r3
 800519a:	b2db      	uxtb	r3, r3
 800519c:	3301      	adds	r3, #1
 800519e:	f003 031f 	and.w	r3, r3, #31
 80051a2:	2101      	movs	r1, #1
 80051a4:	fa01 f303 	lsl.w	r3, r1, r3
 80051a8:	ea42 0103 	orr.w	r1, r2, r3
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10a      	bne.n	80051ce <HAL_ADC_ConfigChannel+0x576>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	0e9b      	lsrs	r3, r3, #26
 80051be:	3301      	adds	r3, #1
 80051c0:	f003 021f 	and.w	r2, r3, #31
 80051c4:	4613      	mov	r3, r2
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	4413      	add	r3, r2
 80051ca:	051b      	lsls	r3, r3, #20
 80051cc:	e018      	b.n	8005200 <HAL_ADC_ConfigChannel+0x5a8>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d6:	fa93 f3a3 	rbit	r3, r3
 80051da:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80051dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80051e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80051e6:	2320      	movs	r3, #32
 80051e8:	e003      	b.n	80051f2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80051ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ec:	fab3 f383 	clz	r3, r3
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	3301      	adds	r3, #1
 80051f4:	f003 021f 	and.w	r2, r3, #31
 80051f8:	4613      	mov	r3, r2
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	4413      	add	r3, r2
 80051fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005200:	430b      	orrs	r3, r1
 8005202:	e07e      	b.n	8005302 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800520c:	2b00      	cmp	r3, #0
 800520e:	d107      	bne.n	8005220 <HAL_ADC_ConfigChannel+0x5c8>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	0e9b      	lsrs	r3, r3, #26
 8005216:	3301      	adds	r3, #1
 8005218:	069b      	lsls	r3, r3, #26
 800521a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800521e:	e015      	b.n	800524c <HAL_ADC_ConfigChannel+0x5f4>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005228:	fa93 f3a3 	rbit	r3, r3
 800522c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800522e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005230:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005238:	2320      	movs	r3, #32
 800523a:	e003      	b.n	8005244 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800523c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523e:	fab3 f383 	clz	r3, r3
 8005242:	b2db      	uxtb	r3, r3
 8005244:	3301      	adds	r3, #1
 8005246:	069b      	lsls	r3, r3, #26
 8005248:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005254:	2b00      	cmp	r3, #0
 8005256:	d109      	bne.n	800526c <HAL_ADC_ConfigChannel+0x614>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	0e9b      	lsrs	r3, r3, #26
 800525e:	3301      	adds	r3, #1
 8005260:	f003 031f 	and.w	r3, r3, #31
 8005264:	2101      	movs	r1, #1
 8005266:	fa01 f303 	lsl.w	r3, r1, r3
 800526a:	e017      	b.n	800529c <HAL_ADC_ConfigChannel+0x644>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	fa93 f3a3 	rbit	r3, r3
 8005278:	61fb      	str	r3, [r7, #28]
  return result;
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005284:	2320      	movs	r3, #32
 8005286:	e003      	b.n	8005290 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528a:	fab3 f383 	clz	r3, r3
 800528e:	b2db      	uxtb	r3, r3
 8005290:	3301      	adds	r3, #1
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	2101      	movs	r1, #1
 8005298:	fa01 f303 	lsl.w	r3, r1, r3
 800529c:	ea42 0103 	orr.w	r1, r2, r3
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10d      	bne.n	80052c8 <HAL_ADC_ConfigChannel+0x670>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	0e9b      	lsrs	r3, r3, #26
 80052b2:	3301      	adds	r3, #1
 80052b4:	f003 021f 	and.w	r2, r3, #31
 80052b8:	4613      	mov	r3, r2
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	4413      	add	r3, r2
 80052be:	3b1e      	subs	r3, #30
 80052c0:	051b      	lsls	r3, r3, #20
 80052c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80052c6:	e01b      	b.n	8005300 <HAL_ADC_ConfigChannel+0x6a8>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	fa93 f3a3 	rbit	r3, r3
 80052d4:	613b      	str	r3, [r7, #16]
  return result;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80052e0:	2320      	movs	r3, #32
 80052e2:	e003      	b.n	80052ec <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	fab3 f383 	clz	r3, r3
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	3301      	adds	r3, #1
 80052ee:	f003 021f 	and.w	r2, r3, #31
 80052f2:	4613      	mov	r3, r2
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	4413      	add	r3, r2
 80052f8:	3b1e      	subs	r3, #30
 80052fa:	051b      	lsls	r3, r3, #20
 80052fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005300:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005306:	4619      	mov	r1, r3
 8005308:	f7fe fe4c 	bl	8003fa4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	4b09      	ldr	r3, [pc, #36]	@ (8005338 <HAL_ADC_ConfigChannel+0x6e0>)
 8005312:	4013      	ands	r3, r2
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 80be 	beq.w	8005496 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005322:	d004      	beq.n	800532e <HAL_ADC_ConfigChannel+0x6d6>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a04      	ldr	r2, [pc, #16]	@ (800533c <HAL_ADC_ConfigChannel+0x6e4>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d10a      	bne.n	8005344 <HAL_ADC_ConfigChannel+0x6ec>
 800532e:	4b04      	ldr	r3, [pc, #16]	@ (8005340 <HAL_ADC_ConfigChannel+0x6e8>)
 8005330:	e009      	b.n	8005346 <HAL_ADC_ConfigChannel+0x6ee>
 8005332:	bf00      	nop
 8005334:	407f0000 	.word	0x407f0000
 8005338:	80080000 	.word	0x80080000
 800533c:	50000100 	.word	0x50000100
 8005340:	50000300 	.word	0x50000300
 8005344:	4b59      	ldr	r3, [pc, #356]	@ (80054ac <HAL_ADC_ConfigChannel+0x854>)
 8005346:	4618      	mov	r0, r3
 8005348:	f7fe fd2e 	bl	8003da8 <LL_ADC_GetCommonPathInternalCh>
 800534c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a56      	ldr	r2, [pc, #344]	@ (80054b0 <HAL_ADC_ConfigChannel+0x858>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d004      	beq.n	8005364 <HAL_ADC_ConfigChannel+0x70c>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a55      	ldr	r2, [pc, #340]	@ (80054b4 <HAL_ADC_ConfigChannel+0x85c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d13a      	bne.n	80053da <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005364:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005368:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d134      	bne.n	80053da <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005378:	d005      	beq.n	8005386 <HAL_ADC_ConfigChannel+0x72e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a4e      	ldr	r2, [pc, #312]	@ (80054b8 <HAL_ADC_ConfigChannel+0x860>)
 8005380:	4293      	cmp	r3, r2
 8005382:	f040 8085 	bne.w	8005490 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800538e:	d004      	beq.n	800539a <HAL_ADC_ConfigChannel+0x742>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a49      	ldr	r2, [pc, #292]	@ (80054bc <HAL_ADC_ConfigChannel+0x864>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d101      	bne.n	800539e <HAL_ADC_ConfigChannel+0x746>
 800539a:	4a49      	ldr	r2, [pc, #292]	@ (80054c0 <HAL_ADC_ConfigChannel+0x868>)
 800539c:	e000      	b.n	80053a0 <HAL_ADC_ConfigChannel+0x748>
 800539e:	4a43      	ldr	r2, [pc, #268]	@ (80054ac <HAL_ADC_ConfigChannel+0x854>)
 80053a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80053a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053a8:	4619      	mov	r1, r3
 80053aa:	4610      	mov	r0, r2
 80053ac:	f7fe fce9 	bl	8003d82 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053b0:	4b44      	ldr	r3, [pc, #272]	@ (80054c4 <HAL_ADC_ConfigChannel+0x86c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	099b      	lsrs	r3, r3, #6
 80053b6:	4a44      	ldr	r2, [pc, #272]	@ (80054c8 <HAL_ADC_ConfigChannel+0x870>)
 80053b8:	fba2 2303 	umull	r2, r3, r2, r3
 80053bc:	099b      	lsrs	r3, r3, #6
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	4613      	mov	r3, r2
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80053ca:	e002      	b.n	80053d2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1f9      	bne.n	80053cc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80053d8:	e05a      	b.n	8005490 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a3b      	ldr	r2, [pc, #236]	@ (80054cc <HAL_ADC_ConfigChannel+0x874>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d125      	bne.n	8005430 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80053e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80053e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d11f      	bne.n	8005430 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a31      	ldr	r2, [pc, #196]	@ (80054bc <HAL_ADC_ConfigChannel+0x864>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d104      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x7ac>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a34      	ldr	r2, [pc, #208]	@ (80054d0 <HAL_ADC_ConfigChannel+0x878>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d047      	beq.n	8005494 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800540c:	d004      	beq.n	8005418 <HAL_ADC_ConfigChannel+0x7c0>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a2a      	ldr	r2, [pc, #168]	@ (80054bc <HAL_ADC_ConfigChannel+0x864>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d101      	bne.n	800541c <HAL_ADC_ConfigChannel+0x7c4>
 8005418:	4a29      	ldr	r2, [pc, #164]	@ (80054c0 <HAL_ADC_ConfigChannel+0x868>)
 800541a:	e000      	b.n	800541e <HAL_ADC_ConfigChannel+0x7c6>
 800541c:	4a23      	ldr	r2, [pc, #140]	@ (80054ac <HAL_ADC_ConfigChannel+0x854>)
 800541e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005422:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005426:	4619      	mov	r1, r3
 8005428:	4610      	mov	r0, r2
 800542a:	f7fe fcaa 	bl	8003d82 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800542e:	e031      	b.n	8005494 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a27      	ldr	r2, [pc, #156]	@ (80054d4 <HAL_ADC_ConfigChannel+0x87c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d12d      	bne.n	8005496 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800543a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800543e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d127      	bne.n	8005496 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1c      	ldr	r2, [pc, #112]	@ (80054bc <HAL_ADC_ConfigChannel+0x864>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d022      	beq.n	8005496 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005458:	d004      	beq.n	8005464 <HAL_ADC_ConfigChannel+0x80c>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a17      	ldr	r2, [pc, #92]	@ (80054bc <HAL_ADC_ConfigChannel+0x864>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d101      	bne.n	8005468 <HAL_ADC_ConfigChannel+0x810>
 8005464:	4a16      	ldr	r2, [pc, #88]	@ (80054c0 <HAL_ADC_ConfigChannel+0x868>)
 8005466:	e000      	b.n	800546a <HAL_ADC_ConfigChannel+0x812>
 8005468:	4a10      	ldr	r2, [pc, #64]	@ (80054ac <HAL_ADC_ConfigChannel+0x854>)
 800546a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800546e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005472:	4619      	mov	r1, r3
 8005474:	4610      	mov	r0, r2
 8005476:	f7fe fc84 	bl	8003d82 <LL_ADC_SetCommonPathInternalCh>
 800547a:	e00c      	b.n	8005496 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005480:	f043 0220 	orr.w	r2, r3, #32
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800548e:	e002      	b.n	8005496 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005490:	bf00      	nop
 8005492:	e000      	b.n	8005496 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005494:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800549e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	37d8      	adds	r7, #216	@ 0xd8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	50000700 	.word	0x50000700
 80054b0:	c3210000 	.word	0xc3210000
 80054b4:	90c00010 	.word	0x90c00010
 80054b8:	50000600 	.word	0x50000600
 80054bc:	50000100 	.word	0x50000100
 80054c0:	50000300 	.word	0x50000300
 80054c4:	20000004 	.word	0x20000004
 80054c8:	053e2d63 	.word	0x053e2d63
 80054cc:	c7520000 	.word	0xc7520000
 80054d0:	50000500 	.word	0x50000500
 80054d4:	cb840000 	.word	0xcb840000

080054d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fe fe3d 	bl	8004168 <LL_ADC_IsEnabled>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d176      	bne.n	80055e2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	4b3c      	ldr	r3, [pc, #240]	@ (80055ec <ADC_Enable+0x114>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00d      	beq.n	800551e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005506:	f043 0210 	orr.w	r2, r3, #16
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005512:	f043 0201 	orr.w	r2, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e062      	b.n	80055e4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe fdf8 	bl	8004118 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005530:	d004      	beq.n	800553c <ADC_Enable+0x64>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a2e      	ldr	r2, [pc, #184]	@ (80055f0 <ADC_Enable+0x118>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d101      	bne.n	8005540 <ADC_Enable+0x68>
 800553c:	4b2d      	ldr	r3, [pc, #180]	@ (80055f4 <ADC_Enable+0x11c>)
 800553e:	e000      	b.n	8005542 <ADC_Enable+0x6a>
 8005540:	4b2d      	ldr	r3, [pc, #180]	@ (80055f8 <ADC_Enable+0x120>)
 8005542:	4618      	mov	r0, r3
 8005544:	f7fe fc30 	bl	8003da8 <LL_ADC_GetCommonPathInternalCh>
 8005548:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800554a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800554e:	2b00      	cmp	r3, #0
 8005550:	d013      	beq.n	800557a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005552:	4b2a      	ldr	r3, [pc, #168]	@ (80055fc <ADC_Enable+0x124>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	099b      	lsrs	r3, r3, #6
 8005558:	4a29      	ldr	r2, [pc, #164]	@ (8005600 <ADC_Enable+0x128>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	099b      	lsrs	r3, r3, #6
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	4613      	mov	r3, r2
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	4413      	add	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800556c:	e002      	b.n	8005574 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	3b01      	subs	r3, #1
 8005572:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f9      	bne.n	800556e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800557a:	f7fe fbe3 	bl	8003d44 <HAL_GetTick>
 800557e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005580:	e028      	b.n	80055d4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe fdee 	bl	8004168 <LL_ADC_IsEnabled>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d104      	bne.n	800559c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4618      	mov	r0, r3
 8005598:	f7fe fdbe 	bl	8004118 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800559c:	f7fe fbd2 	bl	8003d44 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d914      	bls.n	80055d4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d00d      	beq.n	80055d4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055bc:	f043 0210 	orr.w	r2, r3, #16
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055c8:	f043 0201 	orr.w	r2, r3, #1
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e007      	b.n	80055e4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d1cf      	bne.n	8005582 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	8000003f 	.word	0x8000003f
 80055f0:	50000100 	.word	0x50000100
 80055f4:	50000300 	.word	0x50000300
 80055f8:	50000700 	.word	0x50000700
 80055fc:	20000004 	.word	0x20000004
 8005600:	053e2d63 	.word	0x053e2d63

08005604 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	f7fe fdbc 	bl	800418e <LL_ADC_IsDisableOngoing>
 8005616:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4618      	mov	r0, r3
 800561e:	f7fe fda3 	bl	8004168 <LL_ADC_IsEnabled>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d047      	beq.n	80056b8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d144      	bne.n	80056b8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 030d 	and.w	r3, r3, #13
 8005638:	2b01      	cmp	r3, #1
 800563a:	d10c      	bne.n	8005656 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4618      	mov	r0, r3
 8005642:	f7fe fd7d 	bl	8004140 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2203      	movs	r2, #3
 800564c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800564e:	f7fe fb79 	bl	8003d44 <HAL_GetTick>
 8005652:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005654:	e029      	b.n	80056aa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800565a:	f043 0210 	orr.w	r2, r3, #16
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005666:	f043 0201 	orr.w	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e023      	b.n	80056ba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005672:	f7fe fb67 	bl	8003d44 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d914      	bls.n	80056aa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00d      	beq.n	80056aa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005692:	f043 0210 	orr.w	r2, r3, #16
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800569e:	f043 0201 	orr.w	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e007      	b.n	80056ba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1dc      	bne.n	8005672 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d14b      	bne.n	8005774 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d021      	beq.n	800573a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fe fc00 	bl	8003f00 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d032      	beq.n	800576c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d12b      	bne.n	800576c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005718:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005724:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d11f      	bne.n	800576c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005730:	f043 0201 	orr.w	r2, r3, #1
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005738:	e018      	b.n	800576c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d111      	bne.n	800576c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800574c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005758:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d105      	bne.n	800576c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005764:	f043 0201 	orr.w	r2, r3, #1
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f7ff fa4b 	bl	8004c08 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005772:	e00e      	b.n	8005792 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7ff fa5f 	bl	8004c44 <HAL_ADC_ErrorCallback>
}
 8005786:	e004      	b.n	8005792 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	4798      	blx	r3
}
 8005792:	bf00      	nop
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b084      	sub	sp, #16
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f7ff fa37 	bl	8004c1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d4:	f043 0204 	orr.w	r2, r3, #4
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f7ff fa31 	bl	8004c44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057e2:	bf00      	nop
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <LL_ADC_IsEnabled>:
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <LL_ADC_IsEnabled+0x18>
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <LL_ADC_IsEnabled+0x1a>
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <LL_ADC_StartCalibration>:
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005822:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800582c:	4313      	orrs	r3, r2
 800582e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	609a      	str	r2, [r3, #8]
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <LL_ADC_IsCalibrationOnGoing>:
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005852:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005856:	d101      	bne.n	800585c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005858:	2301      	movs	r3, #1
 800585a:	e000      	b.n	800585e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <LL_ADC_REG_IsConversionOngoing>:
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 0304 	and.w	r3, r3, #4
 800587a:	2b04      	cmp	r3, #4
 800587c:	d101      	bne.n	8005882 <LL_ADC_REG_IsConversionOngoing+0x18>
 800587e:	2301      	movs	r3, #1
 8005880:	e000      	b.n	8005884 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800589a:	2300      	movs	r3, #0
 800589c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_ADCEx_Calibration_Start+0x1c>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e04d      	b.n	8005948 <HAL_ADCEx_Calibration_Start+0xb8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff fea5 	bl	8005604 <ADC_Disable>
 80058ba:	4603      	mov	r3, r0
 80058bc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d136      	bne.n	8005932 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80058cc:	f023 0302 	bic.w	r3, r3, #2
 80058d0:	f043 0202 	orr.w	r2, r3, #2
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff ff96 	bl	8005810 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80058e4:	e014      	b.n	8005910 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	3301      	adds	r3, #1
 80058ea:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4a18      	ldr	r2, [pc, #96]	@ (8005950 <HAL_ADCEx_Calibration_Start+0xc0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d90d      	bls.n	8005910 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058f8:	f023 0312 	bic.w	r3, r3, #18
 80058fc:	f043 0210 	orr.w	r2, r3, #16
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e01b      	b.n	8005948 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff ff94 	bl	8005842 <LL_ADC_IsCalibrationOnGoing>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e2      	bne.n	80058e6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005924:	f023 0303 	bic.w	r3, r3, #3
 8005928:	f043 0201 	orr.w	r2, r3, #1
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005930:	e005      	b.n	800593e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005936:	f043 0210 	orr.w	r2, r3, #16
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005946:	7bfb      	ldrb	r3, [r7, #15]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	0004de01 	.word	0x0004de01

08005954 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80059b8:	b590      	push	{r4, r7, lr}
 80059ba:	b0a1      	sub	sp, #132	@ 0x84
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e0e7      	b.n	8005ba6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80059de:	2300      	movs	r3, #0
 80059e0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80059e2:	2300      	movs	r3, #0
 80059e4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059ee:	d102      	bne.n	80059f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80059f0:	4b6f      	ldr	r3, [pc, #444]	@ (8005bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	e009      	b.n	8005a0a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a6e      	ldr	r2, [pc, #440]	@ (8005bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d102      	bne.n	8005a06 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005a00:	4b6d      	ldr	r3, [pc, #436]	@ (8005bb8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005a02:	60bb      	str	r3, [r7, #8]
 8005a04:	e001      	b.n	8005a0a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005a06:	2300      	movs	r3, #0
 8005a08:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10b      	bne.n	8005a28 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a14:	f043 0220 	orr.w	r2, r3, #32
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e0be      	b.n	8005ba6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff ff1d 	bl	800586a <LL_ADC_REG_IsConversionOngoing>
 8005a30:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff ff17 	bl	800586a <LL_ADC_REG_IsConversionOngoing>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f040 80a0 	bne.w	8005b84 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005a44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f040 809c 	bne.w	8005b84 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a54:	d004      	beq.n	8005a60 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a55      	ldr	r2, [pc, #340]	@ (8005bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d101      	bne.n	8005a64 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005a60:	4b56      	ldr	r3, [pc, #344]	@ (8005bbc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005a62:	e000      	b.n	8005a66 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005a64:	4b56      	ldr	r3, [pc, #344]	@ (8005bc0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005a66:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d04b      	beq.n	8005b08 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005a70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	6859      	ldr	r1, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005a82:	035b      	lsls	r3, r3, #13
 8005a84:	430b      	orrs	r3, r1
 8005a86:	431a      	orrs	r2, r3
 8005a88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a8a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a94:	d004      	beq.n	8005aa0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a45      	ldr	r2, [pc, #276]	@ (8005bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d10f      	bne.n	8005ac0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005aa0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005aa4:	f7ff fea1 	bl	80057ea <LL_ADC_IsEnabled>
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	4841      	ldr	r0, [pc, #260]	@ (8005bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005aac:	f7ff fe9d 	bl	80057ea <LL_ADC_IsEnabled>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	4323      	orrs	r3, r4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bf0c      	ite	eq
 8005ab8:	2301      	moveq	r3, #1
 8005aba:	2300      	movne	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	e012      	b.n	8005ae6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005ac0:	483c      	ldr	r0, [pc, #240]	@ (8005bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005ac2:	f7ff fe92 	bl	80057ea <LL_ADC_IsEnabled>
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	483b      	ldr	r0, [pc, #236]	@ (8005bb8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005aca:	f7ff fe8e 	bl	80057ea <LL_ADC_IsEnabled>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	431c      	orrs	r4, r3
 8005ad2:	483c      	ldr	r0, [pc, #240]	@ (8005bc4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005ad4:	f7ff fe89 	bl	80057ea <LL_ADC_IsEnabled>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	4323      	orrs	r3, r4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	bf0c      	ite	eq
 8005ae0:	2301      	moveq	r3, #1
 8005ae2:	2300      	movne	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d056      	beq.n	8005b98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005aea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005af2:	f023 030f 	bic.w	r3, r3, #15
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	6811      	ldr	r1, [r2, #0]
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	6892      	ldr	r2, [r2, #8]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	431a      	orrs	r2, r3
 8005b02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b04:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005b06:	e047      	b.n	8005b98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005b08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b12:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b1c:	d004      	beq.n	8005b28 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a23      	ldr	r2, [pc, #140]	@ (8005bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d10f      	bne.n	8005b48 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005b28:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005b2c:	f7ff fe5d 	bl	80057ea <LL_ADC_IsEnabled>
 8005b30:	4604      	mov	r4, r0
 8005b32:	481f      	ldr	r0, [pc, #124]	@ (8005bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005b34:	f7ff fe59 	bl	80057ea <LL_ADC_IsEnabled>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	4323      	orrs	r3, r4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bf0c      	ite	eq
 8005b40:	2301      	moveq	r3, #1
 8005b42:	2300      	movne	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	e012      	b.n	8005b6e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005b48:	481a      	ldr	r0, [pc, #104]	@ (8005bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005b4a:	f7ff fe4e 	bl	80057ea <LL_ADC_IsEnabled>
 8005b4e:	4604      	mov	r4, r0
 8005b50:	4819      	ldr	r0, [pc, #100]	@ (8005bb8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005b52:	f7ff fe4a 	bl	80057ea <LL_ADC_IsEnabled>
 8005b56:	4603      	mov	r3, r0
 8005b58:	431c      	orrs	r4, r3
 8005b5a:	481a      	ldr	r0, [pc, #104]	@ (8005bc4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005b5c:	f7ff fe45 	bl	80057ea <LL_ADC_IsEnabled>
 8005b60:	4603      	mov	r3, r0
 8005b62:	4323      	orrs	r3, r4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bf0c      	ite	eq
 8005b68:	2301      	moveq	r3, #1
 8005b6a:	2300      	movne	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d012      	beq.n	8005b98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005b72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005b7a:	f023 030f 	bic.w	r3, r3, #15
 8005b7e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005b80:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005b82:	e009      	b.n	8005b98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b88:	f043 0220 	orr.w	r2, r3, #32
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005b96:	e000      	b.n	8005b9a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005b98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005ba2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3784      	adds	r7, #132	@ 0x84
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd90      	pop	{r4, r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	50000100 	.word	0x50000100
 8005bb4:	50000400 	.word	0x50000400
 8005bb8:	50000500 	.word	0x50000500
 8005bbc:	50000300 	.word	0x50000300
 8005bc0:	50000700 	.word	0x50000700
 8005bc4:	50000600 	.word	0x50000600

08005bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f003 0307 	and.w	r3, r3, #7
 8005bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8005c0c <__NVIC_SetPriorityGrouping+0x44>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005be4:	4013      	ands	r3, r2
 8005be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005bf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bfa:	4a04      	ldr	r2, [pc, #16]	@ (8005c0c <__NVIC_SetPriorityGrouping+0x44>)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	60d3      	str	r3, [r2, #12]
}
 8005c00:	bf00      	nop
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	e000ed00 	.word	0xe000ed00

08005c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c14:	4b04      	ldr	r3, [pc, #16]	@ (8005c28 <__NVIC_GetPriorityGrouping+0x18>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	0a1b      	lsrs	r3, r3, #8
 8005c1a:	f003 0307 	and.w	r3, r3, #7
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	e000ed00 	.word	0xe000ed00

08005c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	4603      	mov	r3, r0
 8005c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	db0b      	blt.n	8005c56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	f003 021f 	and.w	r2, r3, #31
 8005c44:	4907      	ldr	r1, [pc, #28]	@ (8005c64 <__NVIC_EnableIRQ+0x38>)
 8005c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8005c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	e000e100 	.word	0xe000e100

08005c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	6039      	str	r1, [r7, #0]
 8005c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	db0a      	blt.n	8005c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	490c      	ldr	r1, [pc, #48]	@ (8005cb4 <__NVIC_SetPriority+0x4c>)
 8005c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c86:	0112      	lsls	r2, r2, #4
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	440b      	add	r3, r1
 8005c8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c90:	e00a      	b.n	8005ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	4908      	ldr	r1, [pc, #32]	@ (8005cb8 <__NVIC_SetPriority+0x50>)
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	3b04      	subs	r3, #4
 8005ca0:	0112      	lsls	r2, r2, #4
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	440b      	add	r3, r1
 8005ca6:	761a      	strb	r2, [r3, #24]
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	e000e100 	.word	0xe000e100
 8005cb8:	e000ed00 	.word	0xe000ed00

08005cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b089      	sub	sp, #36	@ 0x24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	f1c3 0307 	rsb	r3, r3, #7
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	bf28      	it	cs
 8005cda:	2304      	movcs	r3, #4
 8005cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	2b06      	cmp	r3, #6
 8005ce4:	d902      	bls.n	8005cec <NVIC_EncodePriority+0x30>
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	3b03      	subs	r3, #3
 8005cea:	e000      	b.n	8005cee <NVIC_EncodePriority+0x32>
 8005cec:	2300      	movs	r3, #0
 8005cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfa:	43da      	mvns	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	401a      	ands	r2, r3
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0e:	43d9      	mvns	r1, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d14:	4313      	orrs	r3, r2
         );
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3724      	adds	r7, #36	@ 0x24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7ff ff4c 	bl	8005bc8 <__NVIC_SetPriorityGrouping>
}
 8005d30:	bf00      	nop
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	4603      	mov	r3, r0
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d46:	f7ff ff63 	bl	8005c10 <__NVIC_GetPriorityGrouping>
 8005d4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	68b9      	ldr	r1, [r7, #8]
 8005d50:	6978      	ldr	r0, [r7, #20]
 8005d52:	f7ff ffb3 	bl	8005cbc <NVIC_EncodePriority>
 8005d56:	4602      	mov	r2, r0
 8005d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff ff82 	bl	8005c68 <__NVIC_SetPriority>
}
 8005d64:	bf00      	nop
 8005d66:	3718      	adds	r7, #24
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	4603      	mov	r3, r0
 8005d74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff ff56 	bl	8005c2c <__NVIC_EnableIRQ>
}
 8005d80:	bf00      	nop
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e08d      	b.n	8005eb6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	4b47      	ldr	r3, [pc, #284]	@ (8005ec0 <HAL_DMA_Init+0x138>)
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d80f      	bhi.n	8005dc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	4b45      	ldr	r3, [pc, #276]	@ (8005ec4 <HAL_DMA_Init+0x13c>)
 8005dae:	4413      	add	r3, r2
 8005db0:	4a45      	ldr	r2, [pc, #276]	@ (8005ec8 <HAL_DMA_Init+0x140>)
 8005db2:	fba2 2303 	umull	r2, r3, r2, r3
 8005db6:	091b      	lsrs	r3, r3, #4
 8005db8:	009a      	lsls	r2, r3, #2
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a42      	ldr	r2, [pc, #264]	@ (8005ecc <HAL_DMA_Init+0x144>)
 8005dc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8005dc4:	e00e      	b.n	8005de4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	4b40      	ldr	r3, [pc, #256]	@ (8005ed0 <HAL_DMA_Init+0x148>)
 8005dce:	4413      	add	r3, r2
 8005dd0:	4a3d      	ldr	r2, [pc, #244]	@ (8005ec8 <HAL_DMA_Init+0x140>)
 8005dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd6:	091b      	lsrs	r3, r3, #4
 8005dd8:	009a      	lsls	r2, r3, #2
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a3c      	ldr	r2, [pc, #240]	@ (8005ed4 <HAL_DMA_Init+0x14c>)
 8005de2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fa82 	bl	8006340 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e44:	d102      	bne.n	8005e4c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e60:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d010      	beq.n	8005e8c <HAL_DMA_Init+0x104>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d80c      	bhi.n	8005e8c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 faa2 	bl	80063bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e88:	605a      	str	r2, [r3, #4]
 8005e8a:	e008      	b.n	8005e9e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	40020407 	.word	0x40020407
 8005ec4:	bffdfff8 	.word	0xbffdfff8
 8005ec8:	cccccccd 	.word	0xcccccccd
 8005ecc:	40020000 	.word	0x40020000
 8005ed0:	bffdfbf8 	.word	0xbffdfbf8
 8005ed4:	40020400 	.word	0x40020400

08005ed8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_DMA_Start_IT+0x20>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e066      	b.n	8005fc6 <HAL_DMA_Start_IT+0xee>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d155      	bne.n	8005fb8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0201 	bic.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 f9c7 	bl	80062c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d008      	beq.n	8005f50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 020e 	orr.w	r2, r2, #14
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	e00f      	b.n	8005f70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 0204 	bic.w	r2, r2, #4
 8005f5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 020a 	orr.w	r2, r2, #10
 8005f6e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d007      	beq.n	8005f8e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f8c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d007      	beq.n	8005fa6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fa4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0201 	orr.w	r2, r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	e005      	b.n	8005fc4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b085      	sub	sp, #20
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d005      	beq.n	8005ff2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2204      	movs	r2, #4
 8005fea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	73fb      	strb	r3, [r7, #15]
 8005ff0:	e037      	b.n	8006062 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 020e 	bic.w	r2, r2, #14
 8006000:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800600c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006010:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0201 	bic.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006026:	f003 021f 	and.w	r2, r3, #31
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602e:	2101      	movs	r1, #1
 8006030:	fa01 f202 	lsl.w	r2, r1, r2
 8006034:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800603e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00c      	beq.n	8006062 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006052:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006056:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006060:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006072:	7bfb      	ldrb	r3, [r7, #15]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d00d      	beq.n	80060b4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2204      	movs	r2, #4
 800609c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	73fb      	strb	r3, [r7, #15]
 80060b2:	e047      	b.n	8006144 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 020e 	bic.w	r2, r2, #14
 80060c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0201 	bic.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e8:	f003 021f 	and.w	r2, r3, #31
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f0:	2101      	movs	r1, #1
 80060f2:	fa01 f202 	lsl.w	r2, r1, r2
 80060f6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006100:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00c      	beq.n	8006124 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006114:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006118:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006122:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4798      	blx	r3
    }
  }
  return status;
 8006144:	7bfb      	ldrb	r3, [r7, #15]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	2204      	movs	r2, #4
 8006170:	409a      	lsls	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4013      	ands	r3, r2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d026      	beq.n	80061c8 <HAL_DMA_IRQHandler+0x7a>
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d021      	beq.n	80061c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	2b00      	cmp	r3, #0
 8006190:	d107      	bne.n	80061a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0204 	bic.w	r2, r2, #4
 80061a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a6:	f003 021f 	and.w	r2, r3, #31
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ae:	2104      	movs	r1, #4
 80061b0:	fa01 f202 	lsl.w	r2, r1, r2
 80061b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d071      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80061c6:	e06c      	b.n	80062a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061cc:	f003 031f 	and.w	r3, r3, #31
 80061d0:	2202      	movs	r2, #2
 80061d2:	409a      	lsls	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d02e      	beq.n	800623a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d029      	beq.n	800623a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10b      	bne.n	800620c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 020a 	bic.w	r2, r2, #10
 8006202:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006210:	f003 021f 	and.w	r2, r3, #31
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006218:	2102      	movs	r1, #2
 800621a:	fa01 f202 	lsl.w	r2, r1, r2
 800621e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d038      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006238:	e033      	b.n	80062a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623e:	f003 031f 	and.w	r3, r3, #31
 8006242:	2208      	movs	r2, #8
 8006244:	409a      	lsls	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4013      	ands	r3, r2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d02a      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f003 0308 	and.w	r3, r3, #8
 8006254:	2b00      	cmp	r3, #0
 8006256:	d025      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 020e 	bic.w	r2, r2, #14
 8006266:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800626c:	f003 021f 	and.w	r2, r3, #31
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006274:	2101      	movs	r1, #1
 8006276:	fa01 f202 	lsl.w	r2, r1, r2
 800627a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006296:	2b00      	cmp	r3, #0
 8006298:	d004      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80062a2:	bf00      	nop
 80062a4:	bf00      	nop
}
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80062da:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d004      	beq.n	80062ee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80062ec:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f2:	f003 021f 	and.w	r2, r3, #31
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	2101      	movs	r1, #1
 80062fc:	fa01 f202 	lsl.w	r2, r1, r2
 8006300:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	2b10      	cmp	r3, #16
 8006310:	d108      	bne.n	8006324 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006322:	e007      	b.n	8006334 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	60da      	str	r2, [r3, #12]
}
 8006334:	bf00      	nop
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	461a      	mov	r2, r3
 800634e:	4b16      	ldr	r3, [pc, #88]	@ (80063a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006350:	429a      	cmp	r2, r3
 8006352:	d802      	bhi.n	800635a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006354:	4b15      	ldr	r3, [pc, #84]	@ (80063ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	e001      	b.n	800635e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800635a:	4b15      	ldr	r3, [pc, #84]	@ (80063b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800635c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	b2db      	uxtb	r3, r3
 8006368:	3b08      	subs	r3, #8
 800636a:	4a12      	ldr	r2, [pc, #72]	@ (80063b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800636c:	fba2 2303 	umull	r2, r3, r2, r3
 8006370:	091b      	lsrs	r3, r3, #4
 8006372:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006378:	089b      	lsrs	r3, r3, #2
 800637a:	009a      	lsls	r2, r3, #2
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	4413      	add	r3, r2
 8006380:	461a      	mov	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a0b      	ldr	r2, [pc, #44]	@ (80063b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800638a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f003 031f 	and.w	r3, r3, #31
 8006392:	2201      	movs	r2, #1
 8006394:	409a      	lsls	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40020407 	.word	0x40020407
 80063ac:	40020800 	.word	0x40020800
 80063b0:	40020820 	.word	0x40020820
 80063b4:	cccccccd 	.word	0xcccccccd
 80063b8:	40020880 	.word	0x40020880

080063bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	4b0b      	ldr	r3, [pc, #44]	@ (80063fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	461a      	mov	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a08      	ldr	r2, [pc, #32]	@ (8006400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80063de:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	2201      	movs	r2, #1
 80063ea:	409a      	lsls	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80063f0:	bf00      	nop
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	1000823f 	.word	0x1000823f
 8006400:	40020940 	.word	0x40020940

08006404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800640e:	2300      	movs	r3, #0
 8006410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006412:	e15a      	b.n	80066ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	2101      	movs	r1, #1
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	fa01 f303 	lsl.w	r3, r1, r3
 8006420:	4013      	ands	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 814c 	beq.w	80066c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f003 0303 	and.w	r3, r3, #3
 8006434:	2b01      	cmp	r3, #1
 8006436:	d005      	beq.n	8006444 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006440:	2b02      	cmp	r3, #2
 8006442:	d130      	bne.n	80064a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	2203      	movs	r2, #3
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	43db      	mvns	r3, r3
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4013      	ands	r3, r2
 800645a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	68da      	ldr	r2, [r3, #12]
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800647a:	2201      	movs	r2, #1
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	43db      	mvns	r3, r3
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4013      	ands	r3, r2
 8006488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	091b      	lsrs	r3, r3, #4
 8006490:	f003 0201 	and.w	r2, r3, #1
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	4313      	orrs	r3, r2
 800649e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d017      	beq.n	80064e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	2203      	movs	r2, #3
 80064be:	fa02 f303 	lsl.w	r3, r2, r3
 80064c2:	43db      	mvns	r3, r3
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4013      	ands	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	689a      	ldr	r2, [r3, #8]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	fa02 f303 	lsl.w	r3, r2, r3
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	4313      	orrs	r3, r2
 80064da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d123      	bne.n	8006536 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	08da      	lsrs	r2, r3, #3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3208      	adds	r2, #8
 80064f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	220f      	movs	r2, #15
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	43db      	mvns	r3, r3
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4013      	ands	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	08da      	lsrs	r2, r3, #3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3208      	adds	r2, #8
 8006530:	6939      	ldr	r1, [r7, #16]
 8006532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	2203      	movs	r2, #3
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	43db      	mvns	r3, r3
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4013      	ands	r3, r2
 800654c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f003 0203 	and.w	r2, r3, #3
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	fa02 f303 	lsl.w	r3, r2, r3
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	4313      	orrs	r3, r2
 8006562:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 80a6 	beq.w	80066c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006578:	4b5b      	ldr	r3, [pc, #364]	@ (80066e8 <HAL_GPIO_Init+0x2e4>)
 800657a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800657c:	4a5a      	ldr	r2, [pc, #360]	@ (80066e8 <HAL_GPIO_Init+0x2e4>)
 800657e:	f043 0301 	orr.w	r3, r3, #1
 8006582:	6613      	str	r3, [r2, #96]	@ 0x60
 8006584:	4b58      	ldr	r3, [pc, #352]	@ (80066e8 <HAL_GPIO_Init+0x2e4>)
 8006586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	60bb      	str	r3, [r7, #8]
 800658e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006590:	4a56      	ldr	r2, [pc, #344]	@ (80066ec <HAL_GPIO_Init+0x2e8>)
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	089b      	lsrs	r3, r3, #2
 8006596:	3302      	adds	r3, #2
 8006598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800659c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f003 0303 	and.w	r3, r3, #3
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	220f      	movs	r2, #15
 80065a8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ac:	43db      	mvns	r3, r3
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4013      	ands	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80065ba:	d01f      	beq.n	80065fc <HAL_GPIO_Init+0x1f8>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a4c      	ldr	r2, [pc, #304]	@ (80066f0 <HAL_GPIO_Init+0x2ec>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d019      	beq.n	80065f8 <HAL_GPIO_Init+0x1f4>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a4b      	ldr	r2, [pc, #300]	@ (80066f4 <HAL_GPIO_Init+0x2f0>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d013      	beq.n	80065f4 <HAL_GPIO_Init+0x1f0>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a4a      	ldr	r2, [pc, #296]	@ (80066f8 <HAL_GPIO_Init+0x2f4>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00d      	beq.n	80065f0 <HAL_GPIO_Init+0x1ec>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a49      	ldr	r2, [pc, #292]	@ (80066fc <HAL_GPIO_Init+0x2f8>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d007      	beq.n	80065ec <HAL_GPIO_Init+0x1e8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a48      	ldr	r2, [pc, #288]	@ (8006700 <HAL_GPIO_Init+0x2fc>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d101      	bne.n	80065e8 <HAL_GPIO_Init+0x1e4>
 80065e4:	2305      	movs	r3, #5
 80065e6:	e00a      	b.n	80065fe <HAL_GPIO_Init+0x1fa>
 80065e8:	2306      	movs	r3, #6
 80065ea:	e008      	b.n	80065fe <HAL_GPIO_Init+0x1fa>
 80065ec:	2304      	movs	r3, #4
 80065ee:	e006      	b.n	80065fe <HAL_GPIO_Init+0x1fa>
 80065f0:	2303      	movs	r3, #3
 80065f2:	e004      	b.n	80065fe <HAL_GPIO_Init+0x1fa>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e002      	b.n	80065fe <HAL_GPIO_Init+0x1fa>
 80065f8:	2301      	movs	r3, #1
 80065fa:	e000      	b.n	80065fe <HAL_GPIO_Init+0x1fa>
 80065fc:	2300      	movs	r3, #0
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	f002 0203 	and.w	r2, r2, #3
 8006604:	0092      	lsls	r2, r2, #2
 8006606:	4093      	lsls	r3, r2
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800660e:	4937      	ldr	r1, [pc, #220]	@ (80066ec <HAL_GPIO_Init+0x2e8>)
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	089b      	lsrs	r3, r3, #2
 8006614:	3302      	adds	r3, #2
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800661c:	4b39      	ldr	r3, [pc, #228]	@ (8006704 <HAL_GPIO_Init+0x300>)
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	43db      	mvns	r3, r3
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	4013      	ands	r3, r2
 800662a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006640:	4a30      	ldr	r2, [pc, #192]	@ (8006704 <HAL_GPIO_Init+0x300>)
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006646:	4b2f      	ldr	r3, [pc, #188]	@ (8006704 <HAL_GPIO_Init+0x300>)
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	43db      	mvns	r3, r3
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4013      	ands	r3, r2
 8006654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800666a:	4a26      	ldr	r2, [pc, #152]	@ (8006704 <HAL_GPIO_Init+0x300>)
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006670:	4b24      	ldr	r3, [pc, #144]	@ (8006704 <HAL_GPIO_Init+0x300>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	43db      	mvns	r3, r3
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4013      	ands	r3, r2
 800667e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4313      	orrs	r3, r2
 8006692:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006694:	4a1b      	ldr	r2, [pc, #108]	@ (8006704 <HAL_GPIO_Init+0x300>)
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800669a:	4b1a      	ldr	r3, [pc, #104]	@ (8006704 <HAL_GPIO_Init+0x300>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	43db      	mvns	r3, r3
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4013      	ands	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80066be:	4a11      	ldr	r2, [pc, #68]	@ (8006704 <HAL_GPIO_Init+0x300>)
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	3301      	adds	r3, #1
 80066c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f47f ae9d 	bne.w	8006414 <HAL_GPIO_Init+0x10>
  }
}
 80066da:	bf00      	nop
 80066dc:	bf00      	nop
 80066de:	371c      	adds	r7, #28
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	40021000 	.word	0x40021000
 80066ec:	40010000 	.word	0x40010000
 80066f0:	48000400 	.word	0x48000400
 80066f4:	48000800 	.word	0x48000800
 80066f8:	48000c00 	.word	0x48000c00
 80066fc:	48001000 	.word	0x48001000
 8006700:	48001400 	.word	0x48001400
 8006704:	40010400 	.word	0x40010400

08006708 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006712:	2300      	movs	r3, #0
 8006714:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8006716:	e0bd      	b.n	8006894 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8006718:	2201      	movs	r2, #1
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	4013      	ands	r3, r2
 8006724:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80b0 	beq.w	800688e <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800672e:	4a60      	ldr	r2, [pc, #384]	@ (80068b0 <HAL_GPIO_DeInit+0x1a8>)
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	089b      	lsrs	r3, r3, #2
 8006734:	3302      	adds	r3, #2
 8006736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800673a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f003 0303 	and.w	r3, r3, #3
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	220f      	movs	r2, #15
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4013      	ands	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006756:	d01f      	beq.n	8006798 <HAL_GPIO_DeInit+0x90>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a56      	ldr	r2, [pc, #344]	@ (80068b4 <HAL_GPIO_DeInit+0x1ac>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d019      	beq.n	8006794 <HAL_GPIO_DeInit+0x8c>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a55      	ldr	r2, [pc, #340]	@ (80068b8 <HAL_GPIO_DeInit+0x1b0>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d013      	beq.n	8006790 <HAL_GPIO_DeInit+0x88>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a54      	ldr	r2, [pc, #336]	@ (80068bc <HAL_GPIO_DeInit+0x1b4>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d00d      	beq.n	800678c <HAL_GPIO_DeInit+0x84>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a53      	ldr	r2, [pc, #332]	@ (80068c0 <HAL_GPIO_DeInit+0x1b8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d007      	beq.n	8006788 <HAL_GPIO_DeInit+0x80>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a52      	ldr	r2, [pc, #328]	@ (80068c4 <HAL_GPIO_DeInit+0x1bc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d101      	bne.n	8006784 <HAL_GPIO_DeInit+0x7c>
 8006780:	2305      	movs	r3, #5
 8006782:	e00a      	b.n	800679a <HAL_GPIO_DeInit+0x92>
 8006784:	2306      	movs	r3, #6
 8006786:	e008      	b.n	800679a <HAL_GPIO_DeInit+0x92>
 8006788:	2304      	movs	r3, #4
 800678a:	e006      	b.n	800679a <HAL_GPIO_DeInit+0x92>
 800678c:	2303      	movs	r3, #3
 800678e:	e004      	b.n	800679a <HAL_GPIO_DeInit+0x92>
 8006790:	2302      	movs	r3, #2
 8006792:	e002      	b.n	800679a <HAL_GPIO_DeInit+0x92>
 8006794:	2301      	movs	r3, #1
 8006796:	e000      	b.n	800679a <HAL_GPIO_DeInit+0x92>
 8006798:	2300      	movs	r3, #0
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	f002 0203 	and.w	r2, r2, #3
 80067a0:	0092      	lsls	r2, r2, #2
 80067a2:	4093      	lsls	r3, r2
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d132      	bne.n	8006810 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80067aa:	4b47      	ldr	r3, [pc, #284]	@ (80068c8 <HAL_GPIO_DeInit+0x1c0>)
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	43db      	mvns	r3, r3
 80067b2:	4945      	ldr	r1, [pc, #276]	@ (80068c8 <HAL_GPIO_DeInit+0x1c0>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80067b8:	4b43      	ldr	r3, [pc, #268]	@ (80068c8 <HAL_GPIO_DeInit+0x1c0>)
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	43db      	mvns	r3, r3
 80067c0:	4941      	ldr	r1, [pc, #260]	@ (80068c8 <HAL_GPIO_DeInit+0x1c0>)
 80067c2:	4013      	ands	r3, r2
 80067c4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80067c6:	4b40      	ldr	r3, [pc, #256]	@ (80068c8 <HAL_GPIO_DeInit+0x1c0>)
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	43db      	mvns	r3, r3
 80067ce:	493e      	ldr	r1, [pc, #248]	@ (80068c8 <HAL_GPIO_DeInit+0x1c0>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80067d4:	4b3c      	ldr	r3, [pc, #240]	@ (80068c8 <HAL_GPIO_DeInit+0x1c0>)
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	43db      	mvns	r3, r3
 80067dc:	493a      	ldr	r1, [pc, #232]	@ (80068c8 <HAL_GPIO_DeInit+0x1c0>)
 80067de:	4013      	ands	r3, r2
 80067e0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f003 0303 	and.w	r3, r3, #3
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	220f      	movs	r2, #15
 80067ec:	fa02 f303 	lsl.w	r3, r2, r3
 80067f0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80067f2:	4a2f      	ldr	r2, [pc, #188]	@ (80068b0 <HAL_GPIO_DeInit+0x1a8>)
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	089b      	lsrs	r3, r3, #2
 80067f8:	3302      	adds	r3, #2
 80067fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	43da      	mvns	r2, r3
 8006802:	482b      	ldr	r0, [pc, #172]	@ (80068b0 <HAL_GPIO_DeInit+0x1a8>)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	089b      	lsrs	r3, r3, #2
 8006808:	400a      	ands	r2, r1
 800680a:	3302      	adds	r3, #2
 800680c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	2103      	movs	r1, #3
 800681a:	fa01 f303 	lsl.w	r3, r1, r3
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	08da      	lsrs	r2, r3, #3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3208      	adds	r2, #8
 800682c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	220f      	movs	r2, #15
 800683a:	fa02 f303 	lsl.w	r3, r2, r3
 800683e:	43db      	mvns	r3, r3
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	08d2      	lsrs	r2, r2, #3
 8006844:	4019      	ands	r1, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	3208      	adds	r2, #8
 800684a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	2103      	movs	r1, #3
 8006858:	fa01 f303 	lsl.w	r3, r1, r3
 800685c:	43db      	mvns	r3, r3
 800685e:	401a      	ands	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	2101      	movs	r1, #1
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	fa01 f303 	lsl.w	r3, r1, r3
 8006870:	43db      	mvns	r3, r3
 8006872:	401a      	ands	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	2103      	movs	r1, #3
 8006882:	fa01 f303 	lsl.w	r3, r1, r3
 8006886:	43db      	mvns	r3, r3
 8006888:	401a      	ands	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	3301      	adds	r3, #1
 8006892:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	fa22 f303 	lsr.w	r3, r2, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	f47f af3b 	bne.w	8006718 <HAL_GPIO_DeInit+0x10>
  }
}
 80068a2:	bf00      	nop
 80068a4:	bf00      	nop
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	40010000 	.word	0x40010000
 80068b4:	48000400 	.word	0x48000400
 80068b8:	48000800 	.word	0x48000800
 80068bc:	48000c00 	.word	0x48000c00
 80068c0:	48001000 	.word	0x48001000
 80068c4:	48001400 	.word	0x48001400
 80068c8:	40010400 	.word	0x40010400

080068cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	887b      	ldrh	r3, [r7, #2]
 80068de:	4013      	ands	r3, r2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068e4:	2301      	movs	r3, #1
 80068e6:	73fb      	strb	r3, [r7, #15]
 80068e8:	e001      	b.n	80068ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068ea:	2300      	movs	r3, #0
 80068ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	807b      	strh	r3, [r7, #2]
 8006908:	4613      	mov	r3, r2
 800690a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800690c:	787b      	ldrb	r3, [r7, #1]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006912:	887a      	ldrh	r2, [r7, #2]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006918:	e002      	b.n	8006920 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800691a:	887a      	ldrh	r2, [r7, #2]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800693e:	887a      	ldrh	r2, [r7, #2]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4013      	ands	r3, r2
 8006944:	041a      	lsls	r2, r3, #16
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	43d9      	mvns	r1, r3
 800694a:	887b      	ldrh	r3, [r7, #2]
 800694c:	400b      	ands	r3, r1
 800694e:	431a      	orrs	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	619a      	str	r2, [r3, #24]
}
 8006954:	bf00      	nop
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	4603      	mov	r3, r0
 8006968:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800696a:	4b08      	ldr	r3, [pc, #32]	@ (800698c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800696c:	695a      	ldr	r2, [r3, #20]
 800696e:	88fb      	ldrh	r3, [r7, #6]
 8006970:	4013      	ands	r3, r2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d006      	beq.n	8006984 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006976:	4a05      	ldr	r2, [pc, #20]	@ (800698c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006978:	88fb      	ldrh	r3, [r7, #6]
 800697a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800697c:	88fb      	ldrh	r3, [r7, #6]
 800697e:	4618      	mov	r0, r3
 8006980:	f7fb fe40 	bl	8002604 <HAL_GPIO_EXTI_Callback>
  }
}
 8006984:	bf00      	nop
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	40010400 	.word	0x40010400

08006990 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e08d      	b.n	8006abe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fc fb6c 	bl	8003094 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2224      	movs	r2, #36	@ 0x24
 80069c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 0201 	bic.w	r2, r2, #1
 80069d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80069e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d107      	bne.n	8006a0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689a      	ldr	r2, [r3, #8]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a06:	609a      	str	r2, [r3, #8]
 8006a08:	e006      	b.n	8006a18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006a16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d108      	bne.n	8006a32 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a2e:	605a      	str	r2, [r3, #4]
 8006a30:	e007      	b.n	8006a42 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6812      	ldr	r2, [r2, #0]
 8006a4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691a      	ldr	r2, [r3, #16]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	69d9      	ldr	r1, [r3, #28]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a1a      	ldr	r2, [r3, #32]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0201 	orr.w	r2, r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b082      	sub	sp, #8
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e021      	b.n	8006b1c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2224      	movs	r2, #36	@ 0x24
 8006adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0201 	bic.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7fc fb29 	bl	8003148 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af02      	add	r7, sp, #8
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	4611      	mov	r1, r2
 8006b30:	461a      	mov	r2, r3
 8006b32:	4603      	mov	r3, r0
 8006b34:	817b      	strh	r3, [r7, #10]
 8006b36:	460b      	mov	r3, r1
 8006b38:	813b      	strh	r3, [r7, #8]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	f040 80f9 	bne.w	8006d3e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <HAL_I2C_Mem_Write+0x34>
 8006b52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d105      	bne.n	8006b64 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b5e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e0ed      	b.n	8006d40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <HAL_I2C_Mem_Write+0x4e>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e0e6      	b.n	8006d40 <HAL_I2C_Mem_Write+0x21c>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b7a:	f7fd f8e3 	bl	8003d44 <HAL_GetTick>
 8006b7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	2319      	movs	r3, #25
 8006b86:	2201      	movs	r2, #1
 8006b88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 facf 	bl	8007130 <I2C_WaitOnFlagUntilTimeout>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e0d1      	b.n	8006d40 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2221      	movs	r2, #33	@ 0x21
 8006ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2240      	movs	r2, #64	@ 0x40
 8006ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a3a      	ldr	r2, [r7, #32]
 8006bb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bc4:	88f8      	ldrh	r0, [r7, #6]
 8006bc6:	893a      	ldrh	r2, [r7, #8]
 8006bc8:	8979      	ldrh	r1, [r7, #10]
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	9301      	str	r3, [sp, #4]
 8006bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 f9df 	bl	8006f98 <I2C_RequestMemoryWrite>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d005      	beq.n	8006bec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e0a9      	b.n	8006d40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2bff      	cmp	r3, #255	@ 0xff
 8006bf4:	d90e      	bls.n	8006c14 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	22ff      	movs	r2, #255	@ 0xff
 8006bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	8979      	ldrh	r1, [r7, #10]
 8006c04:	2300      	movs	r3, #0
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fc53 	bl	80074b8 <I2C_TransferConfig>
 8006c12:	e00f      	b.n	8006c34 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	8979      	ldrh	r1, [r7, #10]
 8006c26:	2300      	movs	r3, #0
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 fc42 	bl	80074b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 fad2 	bl	80071e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e07b      	b.n	8006d40 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4c:	781a      	ldrb	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d034      	beq.n	8006cec <HAL_I2C_Mem_Write+0x1c8>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d130      	bne.n	8006cec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c90:	2200      	movs	r2, #0
 8006c92:	2180      	movs	r1, #128	@ 0x80
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f000 fa4b 	bl	8007130 <I2C_WaitOnFlagUntilTimeout>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e04d      	b.n	8006d40 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	2bff      	cmp	r3, #255	@ 0xff
 8006cac:	d90e      	bls.n	8006ccc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	22ff      	movs	r2, #255	@ 0xff
 8006cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	8979      	ldrh	r1, [r7, #10]
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f000 fbf7 	bl	80074b8 <I2C_TransferConfig>
 8006cca:	e00f      	b.n	8006cec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	8979      	ldrh	r1, [r7, #10]
 8006cde:	2300      	movs	r3, #0
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 fbe6 	bl	80074b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d19e      	bne.n	8006c34 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 fab8 	bl	8007270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e01a      	b.n	8006d40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6859      	ldr	r1, [r3, #4]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d48 <HAL_I2C_Mem_Write+0x224>)
 8006d1e:	400b      	ands	r3, r1
 8006d20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e000      	b.n	8006d40 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006d3e:	2302      	movs	r3, #2
  }
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	fe00e800 	.word	0xfe00e800

08006d4c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	4608      	mov	r0, r1
 8006d56:	4611      	mov	r1, r2
 8006d58:	461a      	mov	r2, r3
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	817b      	strh	r3, [r7, #10]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	813b      	strh	r3, [r7, #8]
 8006d62:	4613      	mov	r3, r2
 8006d64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b20      	cmp	r3, #32
 8006d70:	f040 80fd 	bne.w	8006f6e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <HAL_I2C_Mem_Read+0x34>
 8006d7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d105      	bne.n	8006d8c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d86:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e0f1      	b.n	8006f70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d101      	bne.n	8006d9a <HAL_I2C_Mem_Read+0x4e>
 8006d96:	2302      	movs	r3, #2
 8006d98:	e0ea      	b.n	8006f70 <HAL_I2C_Mem_Read+0x224>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006da2:	f7fc ffcf 	bl	8003d44 <HAL_GetTick>
 8006da6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	2319      	movs	r3, #25
 8006dae:	2201      	movs	r2, #1
 8006db0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 f9bb 	bl	8007130 <I2C_WaitOnFlagUntilTimeout>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e0d5      	b.n	8006f70 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2222      	movs	r2, #34	@ 0x22
 8006dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2240      	movs	r2, #64	@ 0x40
 8006dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a3a      	ldr	r2, [r7, #32]
 8006dde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006de4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006dec:	88f8      	ldrh	r0, [r7, #6]
 8006dee:	893a      	ldrh	r2, [r7, #8]
 8006df0:	8979      	ldrh	r1, [r7, #10]
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	9301      	str	r3, [sp, #4]
 8006df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f000 f91f 	bl	8007040 <I2C_RequestMemoryRead>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d005      	beq.n	8006e14 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e0ad      	b.n	8006f70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	2bff      	cmp	r3, #255	@ 0xff
 8006e1c:	d90e      	bls.n	8006e3c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	22ff      	movs	r2, #255	@ 0xff
 8006e22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	8979      	ldrh	r1, [r7, #10]
 8006e2c:	4b52      	ldr	r3, [pc, #328]	@ (8006f78 <HAL_I2C_Mem_Read+0x22c>)
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 fb3f 	bl	80074b8 <I2C_TransferConfig>
 8006e3a:	e00f      	b.n	8006e5c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	8979      	ldrh	r1, [r7, #10]
 8006e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8006f78 <HAL_I2C_Mem_Read+0x22c>)
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 fb2e 	bl	80074b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e62:	2200      	movs	r2, #0
 8006e64:	2104      	movs	r1, #4
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 f962 	bl	8007130 <I2C_WaitOnFlagUntilTimeout>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e07c      	b.n	8006f70 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e92:	3b01      	subs	r3, #1
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d034      	beq.n	8006f1c <HAL_I2C_Mem_Read+0x1d0>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d130      	bne.n	8006f1c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2180      	movs	r1, #128	@ 0x80
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 f933 	bl	8007130 <I2C_WaitOnFlagUntilTimeout>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e04d      	b.n	8006f70 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	2bff      	cmp	r3, #255	@ 0xff
 8006edc:	d90e      	bls.n	8006efc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	22ff      	movs	r2, #255	@ 0xff
 8006ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	8979      	ldrh	r1, [r7, #10]
 8006eec:	2300      	movs	r3, #0
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 fadf 	bl	80074b8 <I2C_TransferConfig>
 8006efa:	e00f      	b.n	8006f1c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	8979      	ldrh	r1, [r7, #10]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 face 	bl	80074b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d19a      	bne.n	8006e5c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 f9a0 	bl	8007270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e01a      	b.n	8006f70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6859      	ldr	r1, [r3, #4]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006f7c <HAL_I2C_Mem_Read+0x230>)
 8006f4e:	400b      	ands	r3, r1
 8006f50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2220      	movs	r2, #32
 8006f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	e000      	b.n	8006f70 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006f6e:	2302      	movs	r3, #2
  }
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3718      	adds	r7, #24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	80002400 	.word	0x80002400
 8006f7c:	fe00e800 	.word	0xfe00e800

08006f80 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af02      	add	r7, sp, #8
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	4608      	mov	r0, r1
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	817b      	strh	r3, [r7, #10]
 8006faa:	460b      	mov	r3, r1
 8006fac:	813b      	strh	r3, [r7, #8]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	8979      	ldrh	r1, [r7, #10]
 8006fb8:	4b20      	ldr	r3, [pc, #128]	@ (800703c <I2C_RequestMemoryWrite+0xa4>)
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 fa79 	bl	80074b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fc6:	69fa      	ldr	r2, [r7, #28]
 8006fc8:	69b9      	ldr	r1, [r7, #24]
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 f909 	bl	80071e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e02c      	b.n	8007034 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fda:	88fb      	ldrh	r3, [r7, #6]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d105      	bne.n	8006fec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006fe0:	893b      	ldrh	r3, [r7, #8]
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	629a      	str	r2, [r3, #40]	@ 0x28
 8006fea:	e015      	b.n	8007018 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006fec:	893b      	ldrh	r3, [r7, #8]
 8006fee:	0a1b      	lsrs	r3, r3, #8
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ffa:	69fa      	ldr	r2, [r7, #28]
 8006ffc:	69b9      	ldr	r1, [r7, #24]
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 f8ef 	bl	80071e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e012      	b.n	8007034 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800700e:	893b      	ldrh	r3, [r7, #8]
 8007010:	b2da      	uxtb	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	2200      	movs	r2, #0
 8007020:	2180      	movs	r1, #128	@ 0x80
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 f884 	bl	8007130 <I2C_WaitOnFlagUntilTimeout>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e000      	b.n	8007034 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	80002000 	.word	0x80002000

08007040 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af02      	add	r7, sp, #8
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	4608      	mov	r0, r1
 800704a:	4611      	mov	r1, r2
 800704c:	461a      	mov	r2, r3
 800704e:	4603      	mov	r3, r0
 8007050:	817b      	strh	r3, [r7, #10]
 8007052:	460b      	mov	r3, r1
 8007054:	813b      	strh	r3, [r7, #8]
 8007056:	4613      	mov	r3, r2
 8007058:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	b2da      	uxtb	r2, r3
 800705e:	8979      	ldrh	r1, [r7, #10]
 8007060:	4b20      	ldr	r3, [pc, #128]	@ (80070e4 <I2C_RequestMemoryRead+0xa4>)
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	2300      	movs	r3, #0
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 fa26 	bl	80074b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	69b9      	ldr	r1, [r7, #24]
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 f8b6 	bl	80071e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e02c      	b.n	80070da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007080:	88fb      	ldrh	r3, [r7, #6]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d105      	bne.n	8007092 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007086:	893b      	ldrh	r3, [r7, #8]
 8007088:	b2da      	uxtb	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007090:	e015      	b.n	80070be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007092:	893b      	ldrh	r3, [r7, #8]
 8007094:	0a1b      	lsrs	r3, r3, #8
 8007096:	b29b      	uxth	r3, r3
 8007098:	b2da      	uxtb	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070a0:	69fa      	ldr	r2, [r7, #28]
 80070a2:	69b9      	ldr	r1, [r7, #24]
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 f89c 	bl	80071e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d001      	beq.n	80070b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e012      	b.n	80070da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80070b4:	893b      	ldrh	r3, [r7, #8]
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	2200      	movs	r2, #0
 80070c6:	2140      	movs	r1, #64	@ 0x40
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f831 	bl	8007130 <I2C_WaitOnFlagUntilTimeout>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e000      	b.n	80070da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	80002000 	.word	0x80002000

080070e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d103      	bne.n	8007106 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2200      	movs	r2, #0
 8007104:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b01      	cmp	r3, #1
 8007112:	d007      	beq.n	8007124 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	699a      	ldr	r2, [r3, #24]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f042 0201 	orr.w	r2, r2, #1
 8007122:	619a      	str	r2, [r3, #24]
  }
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	603b      	str	r3, [r7, #0]
 800713c:	4613      	mov	r3, r2
 800713e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007140:	e03b      	b.n	80071ba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f000 f8d6 	bl	80072f8 <I2C_IsErrorOccurred>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e041      	b.n	80071da <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800715c:	d02d      	beq.n	80071ba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800715e:	f7fc fdf1 	bl	8003d44 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d302      	bcc.n	8007174 <I2C_WaitOnFlagUntilTimeout+0x44>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d122      	bne.n	80071ba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	699a      	ldr	r2, [r3, #24]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	4013      	ands	r3, r2
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	429a      	cmp	r2, r3
 8007182:	bf0c      	ite	eq
 8007184:	2301      	moveq	r3, #1
 8007186:	2300      	movne	r3, #0
 8007188:	b2db      	uxtb	r3, r3
 800718a:	461a      	mov	r2, r3
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	429a      	cmp	r2, r3
 8007190:	d113      	bne.n	80071ba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007196:	f043 0220 	orr.w	r2, r3, #32
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e00f      	b.n	80071da <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	699a      	ldr	r2, [r3, #24]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	4013      	ands	r3, r2
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	bf0c      	ite	eq
 80071ca:	2301      	moveq	r3, #1
 80071cc:	2300      	movne	r3, #0
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	461a      	mov	r2, r3
 80071d2:	79fb      	ldrb	r3, [r7, #7]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d0b4      	beq.n	8007142 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80071ee:	e033      	b.n	8007258 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	68b9      	ldr	r1, [r7, #8]
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 f87f 	bl	80072f8 <I2C_IsErrorOccurred>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e031      	b.n	8007268 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800720a:	d025      	beq.n	8007258 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800720c:	f7fc fd9a 	bl	8003d44 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	429a      	cmp	r2, r3
 800721a:	d302      	bcc.n	8007222 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d11a      	bne.n	8007258 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b02      	cmp	r3, #2
 800722e:	d013      	beq.n	8007258 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007234:	f043 0220 	orr.w	r2, r3, #32
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2220      	movs	r2, #32
 8007240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e007      	b.n	8007268 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b02      	cmp	r3, #2
 8007264:	d1c4      	bne.n	80071f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800727c:	e02f      	b.n	80072de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	68b9      	ldr	r1, [r7, #8]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 f838 	bl	80072f8 <I2C_IsErrorOccurred>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e02d      	b.n	80072ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007292:	f7fc fd57 	bl	8003d44 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d302      	bcc.n	80072a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d11a      	bne.n	80072de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b20      	cmp	r3, #32
 80072b4:	d013      	beq.n	80072de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ba:	f043 0220 	orr.w	r2, r3, #32
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e007      	b.n	80072ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	f003 0320 	and.w	r3, r3, #32
 80072e8:	2b20      	cmp	r3, #32
 80072ea:	d1c8      	bne.n	800727e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08a      	sub	sp, #40	@ 0x28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	f003 0310 	and.w	r3, r3, #16
 8007320:	2b00      	cmp	r3, #0
 8007322:	d068      	beq.n	80073f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2210      	movs	r2, #16
 800732a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800732c:	e049      	b.n	80073c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007334:	d045      	beq.n	80073c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007336:	f7fc fd05 	bl	8003d44 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	429a      	cmp	r2, r3
 8007344:	d302      	bcc.n	800734c <I2C_IsErrorOccurred+0x54>
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d13a      	bne.n	80073c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007356:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800735e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800736a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800736e:	d121      	bne.n	80073b4 <I2C_IsErrorOccurred+0xbc>
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007376:	d01d      	beq.n	80073b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007378:	7cfb      	ldrb	r3, [r7, #19]
 800737a:	2b20      	cmp	r3, #32
 800737c:	d01a      	beq.n	80073b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800738c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800738e:	f7fc fcd9 	bl	8003d44 <HAL_GetTick>
 8007392:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007394:	e00e      	b.n	80073b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007396:	f7fc fcd5 	bl	8003d44 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b19      	cmp	r3, #25
 80073a2:	d907      	bls.n	80073b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	f043 0320 	orr.w	r3, r3, #32
 80073aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80073b2:	e006      	b.n	80073c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	2b20      	cmp	r3, #32
 80073c0:	d1e9      	bne.n	8007396 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	f003 0320 	and.w	r3, r3, #32
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	d003      	beq.n	80073d8 <I2C_IsErrorOccurred+0xe0>
 80073d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d0aa      	beq.n	800732e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80073d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d103      	bne.n	80073e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2220      	movs	r2, #32
 80073e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	f043 0304 	orr.w	r3, r3, #4
 80073ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00b      	beq.n	8007420 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	f043 0301 	orr.w	r3, r3, #1
 800740e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007418:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00b      	beq.n	8007442 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	f043 0308 	orr.w	r3, r3, #8
 8007430:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800743a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00b      	beq.n	8007464 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	f043 0302 	orr.w	r3, r3, #2
 8007452:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800745c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01c      	beq.n	80074a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f7ff fe3b 	bl	80070e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6859      	ldr	r1, [r3, #4]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	4b0d      	ldr	r3, [pc, #52]	@ (80074b4 <I2C_IsErrorOccurred+0x1bc>)
 800747e:	400b      	ands	r3, r1
 8007480:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	431a      	orrs	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2220      	movs	r2, #32
 8007492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80074a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3728      	adds	r7, #40	@ 0x28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	fe00e800 	.word	0xfe00e800

080074b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	607b      	str	r3, [r7, #4]
 80074c2:	460b      	mov	r3, r1
 80074c4:	817b      	strh	r3, [r7, #10]
 80074c6:	4613      	mov	r3, r2
 80074c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074ca:	897b      	ldrh	r3, [r7, #10]
 80074cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80074d0:	7a7b      	ldrb	r3, [r7, #9]
 80074d2:	041b      	lsls	r3, r3, #16
 80074d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	0d5b      	lsrs	r3, r3, #21
 80074f2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80074f6:	4b08      	ldr	r3, [pc, #32]	@ (8007518 <I2C_TransferConfig+0x60>)
 80074f8:	430b      	orrs	r3, r1
 80074fa:	43db      	mvns	r3, r3
 80074fc:	ea02 0103 	and.w	r1, r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	430a      	orrs	r2, r1
 8007508:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800750a:	bf00      	nop
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	03ff63ff 	.word	0x03ff63ff

0800751c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b20      	cmp	r3, #32
 8007530:	d138      	bne.n	80075a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007538:	2b01      	cmp	r3, #1
 800753a:	d101      	bne.n	8007540 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800753c:	2302      	movs	r3, #2
 800753e:	e032      	b.n	80075a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2224      	movs	r2, #36	@ 0x24
 800754c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0201 	bic.w	r2, r2, #1
 800755e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800756e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6819      	ldr	r1, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f042 0201 	orr.w	r2, r2, #1
 800758e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2220      	movs	r2, #32
 8007594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	e000      	b.n	80075a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80075a4:	2302      	movs	r3, #2
  }
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b085      	sub	sp, #20
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b20      	cmp	r3, #32
 80075c6:	d139      	bne.n	800763c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d101      	bne.n	80075d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80075d2:	2302      	movs	r3, #2
 80075d4:	e033      	b.n	800763e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2224      	movs	r2, #36	@ 0x24
 80075e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0201 	bic.w	r2, r2, #1
 80075f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007604:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	021b      	lsls	r3, r3, #8
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4313      	orrs	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0201 	orr.w	r2, r2, #1
 8007626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2220      	movs	r2, #32
 800762c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	e000      	b.n	800763e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800763c:	2302      	movs	r3, #2
  }
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e041      	b.n	80076e0 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8007664:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f245 5255 	movw	r2, #21845	@ 0x5555
 800766e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	6852      	ldr	r2, [r2, #4]
 8007678:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	6892      	ldr	r2, [r2, #8]
 8007682:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007684:	f7fc fb5e 	bl	8003d44 <HAL_GetTick>
 8007688:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800768a:	e00f      	b.n	80076ac <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800768c:	f7fc fb5a 	bl	8003d44 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b31      	cmp	r3, #49	@ 0x31
 8007698:	d908      	bls.n	80076ac <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e019      	b.n	80076e0 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e8      	bne.n	800768c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	691a      	ldr	r2, [r3, #16]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d005      	beq.n	80076d4 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	68d2      	ldr	r2, [r2, #12]
 80076d0:	611a      	str	r2, [r3, #16]
 80076d2:	e004      	b.n	80076de <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80076dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80076f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d141      	bne.n	800779a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007716:	4b4b      	ldr	r3, [pc, #300]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800771e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007722:	d131      	bne.n	8007788 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007724:	4b47      	ldr	r3, [pc, #284]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800772a:	4a46      	ldr	r2, [pc, #280]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800772c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007730:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007734:	4b43      	ldr	r3, [pc, #268]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800773c:	4a41      	ldr	r2, [pc, #260]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800773e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007742:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007744:	4b40      	ldr	r3, [pc, #256]	@ (8007848 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2232      	movs	r2, #50	@ 0x32
 800774a:	fb02 f303 	mul.w	r3, r2, r3
 800774e:	4a3f      	ldr	r2, [pc, #252]	@ (800784c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007750:	fba2 2303 	umull	r2, r3, r2, r3
 8007754:	0c9b      	lsrs	r3, r3, #18
 8007756:	3301      	adds	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800775a:	e002      	b.n	8007762 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3b01      	subs	r3, #1
 8007760:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007762:	4b38      	ldr	r3, [pc, #224]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800776a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800776e:	d102      	bne.n	8007776 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1f2      	bne.n	800775c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007776:	4b33      	ldr	r3, [pc, #204]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800777e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007782:	d158      	bne.n	8007836 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e057      	b.n	8007838 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007788:	4b2e      	ldr	r3, [pc, #184]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800778a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800778e:	4a2d      	ldr	r2, [pc, #180]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007794:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007798:	e04d      	b.n	8007836 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077a0:	d141      	bne.n	8007826 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80077a2:	4b28      	ldr	r3, [pc, #160]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80077aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077ae:	d131      	bne.n	8007814 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80077b0:	4b24      	ldr	r3, [pc, #144]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077b6:	4a23      	ldr	r2, [pc, #140]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80077c0:	4b20      	ldr	r3, [pc, #128]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80077c8:	4a1e      	ldr	r2, [pc, #120]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80077ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80077d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007848 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2232      	movs	r2, #50	@ 0x32
 80077d6:	fb02 f303 	mul.w	r3, r2, r3
 80077da:	4a1c      	ldr	r2, [pc, #112]	@ (800784c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80077dc:	fba2 2303 	umull	r2, r3, r2, r3
 80077e0:	0c9b      	lsrs	r3, r3, #18
 80077e2:	3301      	adds	r3, #1
 80077e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80077e6:	e002      	b.n	80077ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80077ee:	4b15      	ldr	r3, [pc, #84]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077fa:	d102      	bne.n	8007802 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1f2      	bne.n	80077e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007802:	4b10      	ldr	r3, [pc, #64]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800780a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800780e:	d112      	bne.n	8007836 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e011      	b.n	8007838 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007814:	4b0b      	ldr	r3, [pc, #44]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800781a:	4a0a      	ldr	r2, [pc, #40]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800781c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007820:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007824:	e007      	b.n	8007836 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007826:	4b07      	ldr	r3, [pc, #28]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800782e:	4a05      	ldr	r2, [pc, #20]	@ (8007844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007830:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007834:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	40007000 	.word	0x40007000
 8007848:	20000004 	.word	0x20000004
 800784c:	431bde83 	.word	0x431bde83

08007850 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007850:	b480      	push	{r7}
 8007852:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007854:	4b05      	ldr	r3, [pc, #20]	@ (800786c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	4a04      	ldr	r2, [pc, #16]	@ (800786c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800785a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800785e:	6093      	str	r3, [r2, #8]
}
 8007860:	bf00      	nop
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	40007000 	.word	0x40007000

08007870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e2fe      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b00      	cmp	r3, #0
 800788c:	d075      	beq.n	800797a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800788e:	4b97      	ldr	r3, [pc, #604]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f003 030c 	and.w	r3, r3, #12
 8007896:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007898:	4b94      	ldr	r3, [pc, #592]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	f003 0303 	and.w	r3, r3, #3
 80078a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2b0c      	cmp	r3, #12
 80078a6:	d102      	bne.n	80078ae <HAL_RCC_OscConfig+0x3e>
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d002      	beq.n	80078b4 <HAL_RCC_OscConfig+0x44>
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	2b08      	cmp	r3, #8
 80078b2:	d10b      	bne.n	80078cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078b4:	4b8d      	ldr	r3, [pc, #564]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d05b      	beq.n	8007978 <HAL_RCC_OscConfig+0x108>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d157      	bne.n	8007978 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e2d9      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078d4:	d106      	bne.n	80078e4 <HAL_RCC_OscConfig+0x74>
 80078d6:	4b85      	ldr	r3, [pc, #532]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a84      	ldr	r2, [pc, #528]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 80078dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	e01d      	b.n	8007920 <HAL_RCC_OscConfig+0xb0>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078ec:	d10c      	bne.n	8007908 <HAL_RCC_OscConfig+0x98>
 80078ee:	4b7f      	ldr	r3, [pc, #508]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a7e      	ldr	r2, [pc, #504]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 80078f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078f8:	6013      	str	r3, [r2, #0]
 80078fa:	4b7c      	ldr	r3, [pc, #496]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a7b      	ldr	r2, [pc, #492]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 8007900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	e00b      	b.n	8007920 <HAL_RCC_OscConfig+0xb0>
 8007908:	4b78      	ldr	r3, [pc, #480]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a77      	ldr	r2, [pc, #476]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 800790e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	4b75      	ldr	r3, [pc, #468]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a74      	ldr	r2, [pc, #464]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 800791a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800791e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d013      	beq.n	8007950 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007928:	f7fc fa0c 	bl	8003d44 <HAL_GetTick>
 800792c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800792e:	e008      	b.n	8007942 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007930:	f7fc fa08 	bl	8003d44 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b64      	cmp	r3, #100	@ 0x64
 800793c:	d901      	bls.n	8007942 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e29e      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007942:	4b6a      	ldr	r3, [pc, #424]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0f0      	beq.n	8007930 <HAL_RCC_OscConfig+0xc0>
 800794e:	e014      	b.n	800797a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007950:	f7fc f9f8 	bl	8003d44 <HAL_GetTick>
 8007954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007956:	e008      	b.n	800796a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007958:	f7fc f9f4 	bl	8003d44 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	2b64      	cmp	r3, #100	@ 0x64
 8007964:	d901      	bls.n	800796a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e28a      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800796a:	4b60      	ldr	r3, [pc, #384]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1f0      	bne.n	8007958 <HAL_RCC_OscConfig+0xe8>
 8007976:	e000      	b.n	800797a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0302 	and.w	r3, r3, #2
 8007982:	2b00      	cmp	r3, #0
 8007984:	d075      	beq.n	8007a72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007986:	4b59      	ldr	r3, [pc, #356]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f003 030c 	and.w	r3, r3, #12
 800798e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007990:	4b56      	ldr	r3, [pc, #344]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f003 0303 	and.w	r3, r3, #3
 8007998:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	2b0c      	cmp	r3, #12
 800799e:	d102      	bne.n	80079a6 <HAL_RCC_OscConfig+0x136>
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d002      	beq.n	80079ac <HAL_RCC_OscConfig+0x13c>
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d11f      	bne.n	80079ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079ac:	4b4f      	ldr	r3, [pc, #316]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d005      	beq.n	80079c4 <HAL_RCC_OscConfig+0x154>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e25d      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079c4:	4b49      	ldr	r3, [pc, #292]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	061b      	lsls	r3, r3, #24
 80079d2:	4946      	ldr	r1, [pc, #280]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80079d8:	4b45      	ldr	r3, [pc, #276]	@ (8007af0 <HAL_RCC_OscConfig+0x280>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fb fe01 	bl	80035e4 <HAL_InitTick>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d043      	beq.n	8007a70 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e249      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d023      	beq.n	8007a3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079f4:	4b3d      	ldr	r3, [pc, #244]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a3c      	ldr	r2, [pc, #240]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 80079fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a00:	f7fc f9a0 	bl	8003d44 <HAL_GetTick>
 8007a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a06:	e008      	b.n	8007a1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a08:	f7fc f99c 	bl	8003d44 <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e232      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a1a:	4b34      	ldr	r3, [pc, #208]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0f0      	beq.n	8007a08 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a26:	4b31      	ldr	r3, [pc, #196]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	061b      	lsls	r3, r3, #24
 8007a34:	492d      	ldr	r1, [pc, #180]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	604b      	str	r3, [r1, #4]
 8007a3a:	e01a      	b.n	8007a72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a2a      	ldr	r2, [pc, #168]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 8007a42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a48:	f7fc f97c 	bl	8003d44 <HAL_GetTick>
 8007a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a4e:	e008      	b.n	8007a62 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a50:	f7fc f978 	bl	8003d44 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d901      	bls.n	8007a62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e20e      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a62:	4b22      	ldr	r3, [pc, #136]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1f0      	bne.n	8007a50 <HAL_RCC_OscConfig+0x1e0>
 8007a6e:	e000      	b.n	8007a72 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0308 	and.w	r3, r3, #8
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d041      	beq.n	8007b02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d01c      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a86:	4b19      	ldr	r3, [pc, #100]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 8007a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a8c:	4a17      	ldr	r2, [pc, #92]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 8007a8e:	f043 0301 	orr.w	r3, r3, #1
 8007a92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a96:	f7fc f955 	bl	8003d44 <HAL_GetTick>
 8007a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a9c:	e008      	b.n	8007ab0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a9e:	f7fc f951 	bl	8003d44 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d901      	bls.n	8007ab0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e1e7      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 8007ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0ef      	beq.n	8007a9e <HAL_RCC_OscConfig+0x22e>
 8007abe:	e020      	b.n	8007b02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 8007ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ac6:	4a09      	ldr	r2, [pc, #36]	@ (8007aec <HAL_RCC_OscConfig+0x27c>)
 8007ac8:	f023 0301 	bic.w	r3, r3, #1
 8007acc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ad0:	f7fc f938 	bl	8003d44 <HAL_GetTick>
 8007ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ad6:	e00d      	b.n	8007af4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ad8:	f7fc f934 	bl	8003d44 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d906      	bls.n	8007af4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e1ca      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
 8007aea:	bf00      	nop
 8007aec:	40021000 	.word	0x40021000
 8007af0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007af4:	4b8c      	ldr	r3, [pc, #560]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1ea      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0304 	and.w	r3, r3, #4
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 80a6 	beq.w	8007c5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b10:	2300      	movs	r3, #0
 8007b12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007b14:	4b84      	ldr	r3, [pc, #528]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <HAL_RCC_OscConfig+0x2b4>
 8007b20:	2301      	movs	r3, #1
 8007b22:	e000      	b.n	8007b26 <HAL_RCC_OscConfig+0x2b6>
 8007b24:	2300      	movs	r3, #0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00d      	beq.n	8007b46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b2a:	4b7f      	ldr	r3, [pc, #508]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b2e:	4a7e      	ldr	r2, [pc, #504]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b36:	4b7c      	ldr	r3, [pc, #496]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007b42:	2301      	movs	r3, #1
 8007b44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b46:	4b79      	ldr	r3, [pc, #484]	@ (8007d2c <HAL_RCC_OscConfig+0x4bc>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d118      	bne.n	8007b84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b52:	4b76      	ldr	r3, [pc, #472]	@ (8007d2c <HAL_RCC_OscConfig+0x4bc>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a75      	ldr	r2, [pc, #468]	@ (8007d2c <HAL_RCC_OscConfig+0x4bc>)
 8007b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b5e:	f7fc f8f1 	bl	8003d44 <HAL_GetTick>
 8007b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b64:	e008      	b.n	8007b78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b66:	f7fc f8ed 	bl	8003d44 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d901      	bls.n	8007b78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e183      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b78:	4b6c      	ldr	r3, [pc, #432]	@ (8007d2c <HAL_RCC_OscConfig+0x4bc>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0f0      	beq.n	8007b66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d108      	bne.n	8007b9e <HAL_RCC_OscConfig+0x32e>
 8007b8c:	4b66      	ldr	r3, [pc, #408]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b92:	4a65      	ldr	r2, [pc, #404]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007b94:	f043 0301 	orr.w	r3, r3, #1
 8007b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b9c:	e024      	b.n	8007be8 <HAL_RCC_OscConfig+0x378>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	2b05      	cmp	r3, #5
 8007ba4:	d110      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x358>
 8007ba6:	4b60      	ldr	r3, [pc, #384]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bac:	4a5e      	ldr	r2, [pc, #376]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007bae:	f043 0304 	orr.w	r3, r3, #4
 8007bb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007bb6:	4b5c      	ldr	r3, [pc, #368]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bbc:	4a5a      	ldr	r2, [pc, #360]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007bbe:	f043 0301 	orr.w	r3, r3, #1
 8007bc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007bc6:	e00f      	b.n	8007be8 <HAL_RCC_OscConfig+0x378>
 8007bc8:	4b57      	ldr	r3, [pc, #348]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bce:	4a56      	ldr	r2, [pc, #344]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007bd0:	f023 0301 	bic.w	r3, r3, #1
 8007bd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007bd8:	4b53      	ldr	r3, [pc, #332]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bde:	4a52      	ldr	r2, [pc, #328]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007be0:	f023 0304 	bic.w	r3, r3, #4
 8007be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d016      	beq.n	8007c1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bf0:	f7fc f8a8 	bl	8003d44 <HAL_GetTick>
 8007bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bf6:	e00a      	b.n	8007c0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bf8:	f7fc f8a4 	bl	8003d44 <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d901      	bls.n	8007c0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e138      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c0e:	4b46      	ldr	r3, [pc, #280]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d0ed      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x388>
 8007c1c:	e015      	b.n	8007c4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c1e:	f7fc f891 	bl	8003d44 <HAL_GetTick>
 8007c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007c24:	e00a      	b.n	8007c3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c26:	f7fc f88d 	bl	8003d44 <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d901      	bls.n	8007c3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e121      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007c3c:	4b3a      	ldr	r3, [pc, #232]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1ed      	bne.n	8007c26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c4a:	7ffb      	ldrb	r3, [r7, #31]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d105      	bne.n	8007c5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c50:	4b35      	ldr	r3, [pc, #212]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c54:	4a34      	ldr	r2, [pc, #208]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c5a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0320 	and.w	r3, r3, #32
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d03c      	beq.n	8007ce2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d01c      	beq.n	8007caa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007c70:	4b2d      	ldr	r3, [pc, #180]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c76:	4a2c      	ldr	r2, [pc, #176]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007c78:	f043 0301 	orr.w	r3, r3, #1
 8007c7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c80:	f7fc f860 	bl	8003d44 <HAL_GetTick>
 8007c84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007c86:	e008      	b.n	8007c9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c88:	f7fc f85c 	bl	8003d44 <HAL_GetTick>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d901      	bls.n	8007c9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e0f2      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007c9a:	4b23      	ldr	r3, [pc, #140]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ca0:	f003 0302 	and.w	r3, r3, #2
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d0ef      	beq.n	8007c88 <HAL_RCC_OscConfig+0x418>
 8007ca8:	e01b      	b.n	8007ce2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007caa:	4b1f      	ldr	r3, [pc, #124]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007cb2:	f023 0301 	bic.w	r3, r3, #1
 8007cb6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cba:	f7fc f843 	bl	8003d44 <HAL_GetTick>
 8007cbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007cc0:	e008      	b.n	8007cd4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cc2:	f7fc f83f 	bl	8003d44 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d901      	bls.n	8007cd4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e0d5      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007cd4:	4b14      	ldr	r3, [pc, #80]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1ef      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f000 80c9 	beq.w	8007e7e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007cec:	4b0e      	ldr	r3, [pc, #56]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f003 030c 	and.w	r3, r3, #12
 8007cf4:	2b0c      	cmp	r3, #12
 8007cf6:	f000 8083 	beq.w	8007e00 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d15e      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d02:	4b09      	ldr	r3, [pc, #36]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a08      	ldr	r2, [pc, #32]	@ (8007d28 <HAL_RCC_OscConfig+0x4b8>)
 8007d08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d0e:	f7fc f819 	bl	8003d44 <HAL_GetTick>
 8007d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d14:	e00c      	b.n	8007d30 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d16:	f7fc f815 	bl	8003d44 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d905      	bls.n	8007d30 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e0ab      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
 8007d28:	40021000 	.word	0x40021000
 8007d2c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d30:	4b55      	ldr	r3, [pc, #340]	@ (8007e88 <HAL_RCC_OscConfig+0x618>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1ec      	bne.n	8007d16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d3c:	4b52      	ldr	r3, [pc, #328]	@ (8007e88 <HAL_RCC_OscConfig+0x618>)
 8007d3e:	68da      	ldr	r2, [r3, #12]
 8007d40:	4b52      	ldr	r3, [pc, #328]	@ (8007e8c <HAL_RCC_OscConfig+0x61c>)
 8007d42:	4013      	ands	r3, r2
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	6a11      	ldr	r1, [r2, #32]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007d4c:	3a01      	subs	r2, #1
 8007d4e:	0112      	lsls	r2, r2, #4
 8007d50:	4311      	orrs	r1, r2
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007d56:	0212      	lsls	r2, r2, #8
 8007d58:	4311      	orrs	r1, r2
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007d5e:	0852      	lsrs	r2, r2, #1
 8007d60:	3a01      	subs	r2, #1
 8007d62:	0552      	lsls	r2, r2, #21
 8007d64:	4311      	orrs	r1, r2
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007d6a:	0852      	lsrs	r2, r2, #1
 8007d6c:	3a01      	subs	r2, #1
 8007d6e:	0652      	lsls	r2, r2, #25
 8007d70:	4311      	orrs	r1, r2
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007d76:	06d2      	lsls	r2, r2, #27
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	4943      	ldr	r1, [pc, #268]	@ (8007e88 <HAL_RCC_OscConfig+0x618>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d80:	4b41      	ldr	r3, [pc, #260]	@ (8007e88 <HAL_RCC_OscConfig+0x618>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a40      	ldr	r2, [pc, #256]	@ (8007e88 <HAL_RCC_OscConfig+0x618>)
 8007d86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007d8c:	4b3e      	ldr	r3, [pc, #248]	@ (8007e88 <HAL_RCC_OscConfig+0x618>)
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	4a3d      	ldr	r2, [pc, #244]	@ (8007e88 <HAL_RCC_OscConfig+0x618>)
 8007d92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d98:	f7fb ffd4 	bl	8003d44 <HAL_GetTick>
 8007d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007da0:	f7fb ffd0 	bl	8003d44 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d901      	bls.n	8007db2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e066      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007db2:	4b35      	ldr	r3, [pc, #212]	@ (8007e88 <HAL_RCC_OscConfig+0x618>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0f0      	beq.n	8007da0 <HAL_RCC_OscConfig+0x530>
 8007dbe:	e05e      	b.n	8007e7e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dc0:	4b31      	ldr	r3, [pc, #196]	@ (8007e88 <HAL_RCC_OscConfig+0x618>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a30      	ldr	r2, [pc, #192]	@ (8007e88 <HAL_RCC_OscConfig+0x618>)
 8007dc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dcc:	f7fb ffba 	bl	8003d44 <HAL_GetTick>
 8007dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dd2:	e008      	b.n	8007de6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dd4:	f7fb ffb6 	bl	8003d44 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d901      	bls.n	8007de6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e04c      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007de6:	4b28      	ldr	r3, [pc, #160]	@ (8007e88 <HAL_RCC_OscConfig+0x618>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1f0      	bne.n	8007dd4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007df2:	4b25      	ldr	r3, [pc, #148]	@ (8007e88 <HAL_RCC_OscConfig+0x618>)
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	4924      	ldr	r1, [pc, #144]	@ (8007e88 <HAL_RCC_OscConfig+0x618>)
 8007df8:	4b25      	ldr	r3, [pc, #148]	@ (8007e90 <HAL_RCC_OscConfig+0x620>)
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	60cb      	str	r3, [r1, #12]
 8007dfe:	e03e      	b.n	8007e7e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	69db      	ldr	r3, [r3, #28]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d101      	bne.n	8007e0c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e039      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8007e88 <HAL_RCC_OscConfig+0x618>)
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f003 0203 	and.w	r2, r3, #3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d12c      	bne.n	8007e7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d123      	bne.n	8007e7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d11b      	bne.n	8007e7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d113      	bne.n	8007e7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e5c:	085b      	lsrs	r3, r3, #1
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d109      	bne.n	8007e7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e70:	085b      	lsrs	r3, r3, #1
 8007e72:	3b01      	subs	r3, #1
 8007e74:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d001      	beq.n	8007e7e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e000      	b.n	8007e80 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3720      	adds	r7, #32
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	40021000 	.word	0x40021000
 8007e8c:	019f800c 	.word	0x019f800c
 8007e90:	feeefffc 	.word	0xfeeefffc

08007e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e11e      	b.n	80080ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007eac:	4b91      	ldr	r3, [pc, #580]	@ (80080f4 <HAL_RCC_ClockConfig+0x260>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 030f 	and.w	r3, r3, #15
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d910      	bls.n	8007edc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eba:	4b8e      	ldr	r3, [pc, #568]	@ (80080f4 <HAL_RCC_ClockConfig+0x260>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f023 020f 	bic.w	r2, r3, #15
 8007ec2:	498c      	ldr	r1, [pc, #560]	@ (80080f4 <HAL_RCC_ClockConfig+0x260>)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eca:	4b8a      	ldr	r3, [pc, #552]	@ (80080f4 <HAL_RCC_ClockConfig+0x260>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 030f 	and.w	r3, r3, #15
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d001      	beq.n	8007edc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e106      	b.n	80080ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d073      	beq.n	8007fd0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d129      	bne.n	8007f44 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ef0:	4b81      	ldr	r3, [pc, #516]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e0f4      	b.n	80080ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007f00:	f000 f9d0 	bl	80082a4 <RCC_GetSysClockFreqFromPLLSource>
 8007f04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	4a7c      	ldr	r2, [pc, #496]	@ (80080fc <HAL_RCC_ClockConfig+0x268>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d93f      	bls.n	8007f8e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007f0e:	4b7a      	ldr	r3, [pc, #488]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d009      	beq.n	8007f2e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d033      	beq.n	8007f8e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d12f      	bne.n	8007f8e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007f2e:	4b72      	ldr	r3, [pc, #456]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f36:	4a70      	ldr	r2, [pc, #448]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 8007f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007f3e:	2380      	movs	r3, #128	@ 0x80
 8007f40:	617b      	str	r3, [r7, #20]
 8007f42:	e024      	b.n	8007f8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d107      	bne.n	8007f5c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d109      	bne.n	8007f6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e0c6      	b.n	80080ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f5c:	4b66      	ldr	r3, [pc, #408]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e0be      	b.n	80080ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007f6c:	f000 f8ce 	bl	800810c <HAL_RCC_GetSysClockFreq>
 8007f70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	4a61      	ldr	r2, [pc, #388]	@ (80080fc <HAL_RCC_ClockConfig+0x268>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d909      	bls.n	8007f8e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007f7a:	4b5f      	ldr	r3, [pc, #380]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f82:	4a5d      	ldr	r2, [pc, #372]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 8007f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007f8a:	2380      	movs	r3, #128	@ 0x80
 8007f8c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f8e:	4b5a      	ldr	r3, [pc, #360]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f023 0203 	bic.w	r2, r3, #3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	4957      	ldr	r1, [pc, #348]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fa0:	f7fb fed0 	bl	8003d44 <HAL_GetTick>
 8007fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fa6:	e00a      	b.n	8007fbe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fa8:	f7fb fecc 	bl	8003d44 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d901      	bls.n	8007fbe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e095      	b.n	80080ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fbe:	4b4e      	ldr	r3, [pc, #312]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f003 020c 	and.w	r2, r3, #12
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d1eb      	bne.n	8007fa8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0302 	and.w	r3, r3, #2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d023      	beq.n	8008024 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d005      	beq.n	8007ff4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fe8:	4b43      	ldr	r3, [pc, #268]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	4a42      	ldr	r2, [pc, #264]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 8007fee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007ff2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0308 	and.w	r3, r3, #8
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d007      	beq.n	8008010 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008000:	4b3d      	ldr	r3, [pc, #244]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008008:	4a3b      	ldr	r2, [pc, #236]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 800800a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800800e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008010:	4b39      	ldr	r3, [pc, #228]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	4936      	ldr	r1, [pc, #216]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 800801e:	4313      	orrs	r3, r2
 8008020:	608b      	str	r3, [r1, #8]
 8008022:	e008      	b.n	8008036 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	2b80      	cmp	r3, #128	@ 0x80
 8008028:	d105      	bne.n	8008036 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800802a:	4b33      	ldr	r3, [pc, #204]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	4a32      	ldr	r2, [pc, #200]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 8008030:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008034:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008036:	4b2f      	ldr	r3, [pc, #188]	@ (80080f4 <HAL_RCC_ClockConfig+0x260>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 030f 	and.w	r3, r3, #15
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	429a      	cmp	r2, r3
 8008042:	d21d      	bcs.n	8008080 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008044:	4b2b      	ldr	r3, [pc, #172]	@ (80080f4 <HAL_RCC_ClockConfig+0x260>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f023 020f 	bic.w	r2, r3, #15
 800804c:	4929      	ldr	r1, [pc, #164]	@ (80080f4 <HAL_RCC_ClockConfig+0x260>)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	4313      	orrs	r3, r2
 8008052:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008054:	f7fb fe76 	bl	8003d44 <HAL_GetTick>
 8008058:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800805a:	e00a      	b.n	8008072 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800805c:	f7fb fe72 	bl	8003d44 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800806a:	4293      	cmp	r3, r2
 800806c:	d901      	bls.n	8008072 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e03b      	b.n	80080ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008072:	4b20      	ldr	r3, [pc, #128]	@ (80080f4 <HAL_RCC_ClockConfig+0x260>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 030f 	and.w	r3, r3, #15
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	429a      	cmp	r2, r3
 800807e:	d1ed      	bne.n	800805c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0304 	and.w	r3, r3, #4
 8008088:	2b00      	cmp	r3, #0
 800808a:	d008      	beq.n	800809e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800808c:	4b1a      	ldr	r3, [pc, #104]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	4917      	ldr	r1, [pc, #92]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 800809a:	4313      	orrs	r3, r2
 800809c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0308 	and.w	r3, r3, #8
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d009      	beq.n	80080be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080aa:	4b13      	ldr	r3, [pc, #76]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	00db      	lsls	r3, r3, #3
 80080b8:	490f      	ldr	r1, [pc, #60]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80080be:	f000 f825 	bl	800810c <HAL_RCC_GetSysClockFreq>
 80080c2:	4602      	mov	r2, r0
 80080c4:	4b0c      	ldr	r3, [pc, #48]	@ (80080f8 <HAL_RCC_ClockConfig+0x264>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	091b      	lsrs	r3, r3, #4
 80080ca:	f003 030f 	and.w	r3, r3, #15
 80080ce:	490c      	ldr	r1, [pc, #48]	@ (8008100 <HAL_RCC_ClockConfig+0x26c>)
 80080d0:	5ccb      	ldrb	r3, [r1, r3]
 80080d2:	f003 031f 	and.w	r3, r3, #31
 80080d6:	fa22 f303 	lsr.w	r3, r2, r3
 80080da:	4a0a      	ldr	r2, [pc, #40]	@ (8008104 <HAL_RCC_ClockConfig+0x270>)
 80080dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80080de:	4b0a      	ldr	r3, [pc, #40]	@ (8008108 <HAL_RCC_ClockConfig+0x274>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fb fa7e 	bl	80035e4 <HAL_InitTick>
 80080e8:	4603      	mov	r3, r0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	40022000 	.word	0x40022000
 80080f8:	40021000 	.word	0x40021000
 80080fc:	04c4b400 	.word	0x04c4b400
 8008100:	0801edb4 	.word	0x0801edb4
 8008104:	20000004 	.word	0x20000004
 8008108:	20000008 	.word	0x20000008

0800810c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800810c:	b480      	push	{r7}
 800810e:	b087      	sub	sp, #28
 8008110:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008112:	4b2c      	ldr	r3, [pc, #176]	@ (80081c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f003 030c 	and.w	r3, r3, #12
 800811a:	2b04      	cmp	r3, #4
 800811c:	d102      	bne.n	8008124 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800811e:	4b2a      	ldr	r3, [pc, #168]	@ (80081c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008120:	613b      	str	r3, [r7, #16]
 8008122:	e047      	b.n	80081b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008124:	4b27      	ldr	r3, [pc, #156]	@ (80081c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f003 030c 	and.w	r3, r3, #12
 800812c:	2b08      	cmp	r3, #8
 800812e:	d102      	bne.n	8008136 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008130:	4b26      	ldr	r3, [pc, #152]	@ (80081cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8008132:	613b      	str	r3, [r7, #16]
 8008134:	e03e      	b.n	80081b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008136:	4b23      	ldr	r3, [pc, #140]	@ (80081c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f003 030c 	and.w	r3, r3, #12
 800813e:	2b0c      	cmp	r3, #12
 8008140:	d136      	bne.n	80081b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008142:	4b20      	ldr	r3, [pc, #128]	@ (80081c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	f003 0303 	and.w	r3, r3, #3
 800814a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800814c:	4b1d      	ldr	r3, [pc, #116]	@ (80081c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	091b      	lsrs	r3, r3, #4
 8008152:	f003 030f 	and.w	r3, r3, #15
 8008156:	3301      	adds	r3, #1
 8008158:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b03      	cmp	r3, #3
 800815e:	d10c      	bne.n	800817a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008160:	4a1a      	ldr	r2, [pc, #104]	@ (80081cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	fbb2 f3f3 	udiv	r3, r2, r3
 8008168:	4a16      	ldr	r2, [pc, #88]	@ (80081c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800816a:	68d2      	ldr	r2, [r2, #12]
 800816c:	0a12      	lsrs	r2, r2, #8
 800816e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008172:	fb02 f303 	mul.w	r3, r2, r3
 8008176:	617b      	str	r3, [r7, #20]
      break;
 8008178:	e00c      	b.n	8008194 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800817a:	4a13      	ldr	r2, [pc, #76]	@ (80081c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008182:	4a10      	ldr	r2, [pc, #64]	@ (80081c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008184:	68d2      	ldr	r2, [r2, #12]
 8008186:	0a12      	lsrs	r2, r2, #8
 8008188:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800818c:	fb02 f303 	mul.w	r3, r2, r3
 8008190:	617b      	str	r3, [r7, #20]
      break;
 8008192:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008194:	4b0b      	ldr	r3, [pc, #44]	@ (80081c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	0e5b      	lsrs	r3, r3, #25
 800819a:	f003 0303 	and.w	r3, r3, #3
 800819e:	3301      	adds	r3, #1
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ac:	613b      	str	r3, [r7, #16]
 80081ae:	e001      	b.n	80081b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80081b4:	693b      	ldr	r3, [r7, #16]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	371c      	adds	r7, #28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	40021000 	.word	0x40021000
 80081c8:	00f42400 	.word	0x00f42400
 80081cc:	016e3600 	.word	0x016e3600

080081d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081d0:	b480      	push	{r7}
 80081d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081d4:	4b03      	ldr	r3, [pc, #12]	@ (80081e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80081d6:	681b      	ldr	r3, [r3, #0]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	20000004 	.word	0x20000004

080081e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80081ec:	f7ff fff0 	bl	80081d0 <HAL_RCC_GetHCLKFreq>
 80081f0:	4602      	mov	r2, r0
 80081f2:	4b06      	ldr	r3, [pc, #24]	@ (800820c <HAL_RCC_GetPCLK1Freq+0x24>)
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	0a1b      	lsrs	r3, r3, #8
 80081f8:	f003 0307 	and.w	r3, r3, #7
 80081fc:	4904      	ldr	r1, [pc, #16]	@ (8008210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80081fe:	5ccb      	ldrb	r3, [r1, r3]
 8008200:	f003 031f 	and.w	r3, r3, #31
 8008204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008208:	4618      	mov	r0, r3
 800820a:	bd80      	pop	{r7, pc}
 800820c:	40021000 	.word	0x40021000
 8008210:	0801edc4 	.word	0x0801edc4

08008214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008218:	f7ff ffda 	bl	80081d0 <HAL_RCC_GetHCLKFreq>
 800821c:	4602      	mov	r2, r0
 800821e:	4b06      	ldr	r3, [pc, #24]	@ (8008238 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	0adb      	lsrs	r3, r3, #11
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	4904      	ldr	r1, [pc, #16]	@ (800823c <HAL_RCC_GetPCLK2Freq+0x28>)
 800822a:	5ccb      	ldrb	r3, [r1, r3]
 800822c:	f003 031f 	and.w	r3, r3, #31
 8008230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008234:	4618      	mov	r0, r3
 8008236:	bd80      	pop	{r7, pc}
 8008238:	40021000 	.word	0x40021000
 800823c:	0801edc4 	.word	0x0801edc4

08008240 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	220f      	movs	r2, #15
 800824e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008250:	4b12      	ldr	r3, [pc, #72]	@ (800829c <HAL_RCC_GetClockConfig+0x5c>)
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f003 0203 	and.w	r2, r3, #3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800825c:	4b0f      	ldr	r3, [pc, #60]	@ (800829c <HAL_RCC_GetClockConfig+0x5c>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008268:	4b0c      	ldr	r3, [pc, #48]	@ (800829c <HAL_RCC_GetClockConfig+0x5c>)
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008274:	4b09      	ldr	r3, [pc, #36]	@ (800829c <HAL_RCC_GetClockConfig+0x5c>)
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	08db      	lsrs	r3, r3, #3
 800827a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008282:	4b07      	ldr	r3, [pc, #28]	@ (80082a0 <HAL_RCC_GetClockConfig+0x60>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 020f 	and.w	r2, r3, #15
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	601a      	str	r2, [r3, #0]
}
 800828e:	bf00      	nop
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	40021000 	.word	0x40021000
 80082a0:	40022000 	.word	0x40022000

080082a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b087      	sub	sp, #28
 80082a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80082aa:	4b1e      	ldr	r3, [pc, #120]	@ (8008324 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	f003 0303 	and.w	r3, r3, #3
 80082b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80082b4:	4b1b      	ldr	r3, [pc, #108]	@ (8008324 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	091b      	lsrs	r3, r3, #4
 80082ba:	f003 030f 	and.w	r3, r3, #15
 80082be:	3301      	adds	r3, #1
 80082c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d10c      	bne.n	80082e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80082c8:	4a17      	ldr	r2, [pc, #92]	@ (8008328 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d0:	4a14      	ldr	r2, [pc, #80]	@ (8008324 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80082d2:	68d2      	ldr	r2, [r2, #12]
 80082d4:	0a12      	lsrs	r2, r2, #8
 80082d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80082da:	fb02 f303 	mul.w	r3, r2, r3
 80082de:	617b      	str	r3, [r7, #20]
    break;
 80082e0:	e00c      	b.n	80082fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80082e2:	4a12      	ldr	r2, [pc, #72]	@ (800832c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ea:	4a0e      	ldr	r2, [pc, #56]	@ (8008324 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80082ec:	68d2      	ldr	r2, [r2, #12]
 80082ee:	0a12      	lsrs	r2, r2, #8
 80082f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80082f4:	fb02 f303 	mul.w	r3, r2, r3
 80082f8:	617b      	str	r3, [r7, #20]
    break;
 80082fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80082fc:	4b09      	ldr	r3, [pc, #36]	@ (8008324 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	0e5b      	lsrs	r3, r3, #25
 8008302:	f003 0303 	and.w	r3, r3, #3
 8008306:	3301      	adds	r3, #1
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	fbb2 f3f3 	udiv	r3, r2, r3
 8008314:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008316:	687b      	ldr	r3, [r7, #4]
}
 8008318:	4618      	mov	r0, r3
 800831a:	371c      	adds	r7, #28
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	40021000 	.word	0x40021000
 8008328:	016e3600 	.word	0x016e3600
 800832c:	00f42400 	.word	0x00f42400

08008330 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008338:	2300      	movs	r3, #0
 800833a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800833c:	2300      	movs	r3, #0
 800833e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 8098 	beq.w	800847e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800834e:	2300      	movs	r3, #0
 8008350:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008352:	4b43      	ldr	r3, [pc, #268]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10d      	bne.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800835e:	4b40      	ldr	r3, [pc, #256]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008362:	4a3f      	ldr	r2, [pc, #252]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008368:	6593      	str	r3, [r2, #88]	@ 0x58
 800836a:	4b3d      	ldr	r3, [pc, #244]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800836c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800836e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008372:	60bb      	str	r3, [r7, #8]
 8008374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008376:	2301      	movs	r3, #1
 8008378:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800837a:	4b3a      	ldr	r3, [pc, #232]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a39      	ldr	r2, [pc, #228]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008384:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008386:	f7fb fcdd 	bl	8003d44 <HAL_GetTick>
 800838a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800838c:	e009      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800838e:	f7fb fcd9 	bl	8003d44 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	2b02      	cmp	r3, #2
 800839a:	d902      	bls.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	74fb      	strb	r3, [r7, #19]
        break;
 80083a0:	e005      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083a2:	4b30      	ldr	r3, [pc, #192]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0ef      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80083ae:	7cfb      	ldrb	r3, [r7, #19]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d159      	bne.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80083b4:	4b2a      	ldr	r3, [pc, #168]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d01e      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d019      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80083d0:	4b23      	ldr	r3, [pc, #140]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80083dc:	4b20      	ldr	r3, [pc, #128]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083ec:	4b1c      	ldr	r3, [pc, #112]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083f2:	4a1b      	ldr	r2, [pc, #108]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80083fc:	4a18      	ldr	r2, [pc, #96]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	d016      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800840e:	f7fb fc99 	bl	8003d44 <HAL_GetTick>
 8008412:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008414:	e00b      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008416:	f7fb fc95 	bl	8003d44 <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008424:	4293      	cmp	r3, r2
 8008426:	d902      	bls.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	74fb      	strb	r3, [r7, #19]
            break;
 800842c:	e006      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800842e:	4b0c      	ldr	r3, [pc, #48]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0ec      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800843c:	7cfb      	ldrb	r3, [r7, #19]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10b      	bne.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008442:	4b07      	ldr	r3, [pc, #28]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008448:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008450:	4903      	ldr	r1, [pc, #12]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008452:	4313      	orrs	r3, r2
 8008454:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008458:	e008      	b.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800845a:	7cfb      	ldrb	r3, [r7, #19]
 800845c:	74bb      	strb	r3, [r7, #18]
 800845e:	e005      	b.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008460:	40021000 	.word	0x40021000
 8008464:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008468:	7cfb      	ldrb	r3, [r7, #19]
 800846a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800846c:	7c7b      	ldrb	r3, [r7, #17]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d105      	bne.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008472:	4ba7      	ldr	r3, [pc, #668]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008476:	4aa6      	ldr	r2, [pc, #664]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800847c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800848a:	4ba1      	ldr	r3, [pc, #644]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800848c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008490:	f023 0203 	bic.w	r2, r3, #3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	499d      	ldr	r1, [pc, #628]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800849a:	4313      	orrs	r3, r2
 800849c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0302 	and.w	r3, r3, #2
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00a      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80084ac:	4b98      	ldr	r3, [pc, #608]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084b2:	f023 020c 	bic.w	r2, r3, #12
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	4995      	ldr	r1, [pc, #596]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0304 	and.w	r3, r3, #4
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00a      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80084ce:	4b90      	ldr	r3, [pc, #576]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	498c      	ldr	r1, [pc, #560]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0308 	and.w	r3, r3, #8
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00a      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80084f0:	4b87      	ldr	r3, [pc, #540]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	4984      	ldr	r1, [pc, #528]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008500:	4313      	orrs	r3, r2
 8008502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0310 	and.w	r3, r3, #16
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00a      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008512:	4b7f      	ldr	r3, [pc, #508]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008518:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	497b      	ldr	r1, [pc, #492]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008522:	4313      	orrs	r3, r2
 8008524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0320 	and.w	r3, r3, #32
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00a      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008534:	4b76      	ldr	r3, [pc, #472]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800853a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	4973      	ldr	r1, [pc, #460]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008544:	4313      	orrs	r3, r2
 8008546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00a      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008556:	4b6e      	ldr	r3, [pc, #440]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800855c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	69db      	ldr	r3, [r3, #28]
 8008564:	496a      	ldr	r1, [pc, #424]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008566:	4313      	orrs	r3, r2
 8008568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00a      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008578:	4b65      	ldr	r3, [pc, #404]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800857a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800857e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	4962      	ldr	r1, [pc, #392]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008588:	4313      	orrs	r3, r2
 800858a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00a      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800859a:	4b5d      	ldr	r3, [pc, #372]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800859c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a8:	4959      	ldr	r1, [pc, #356]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80085bc:	4b54      	ldr	r3, [pc, #336]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085c2:	f023 0203 	bic.w	r2, r3, #3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ca:	4951      	ldr	r1, [pc, #324]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085cc:	4313      	orrs	r3, r2
 80085ce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085de:	4b4c      	ldr	r3, [pc, #304]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ec:	4948      	ldr	r1, [pc, #288]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d015      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008600:	4b43      	ldr	r3, [pc, #268]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008606:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800860e:	4940      	ldr	r1, [pc, #256]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008610:	4313      	orrs	r3, r2
 8008612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800861a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800861e:	d105      	bne.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008620:	4b3b      	ldr	r3, [pc, #236]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	4a3a      	ldr	r2, [pc, #232]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800862a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008634:	2b00      	cmp	r3, #0
 8008636:	d015      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008638:	4b35      	ldr	r3, [pc, #212]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800863a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800863e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008646:	4932      	ldr	r1, [pc, #200]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008648:	4313      	orrs	r3, r2
 800864a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008652:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008656:	d105      	bne.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008658:	4b2d      	ldr	r3, [pc, #180]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	4a2c      	ldr	r2, [pc, #176]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800865e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008662:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d015      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008670:	4b27      	ldr	r3, [pc, #156]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008676:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800867e:	4924      	ldr	r1, [pc, #144]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008680:	4313      	orrs	r3, r2
 8008682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800868a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800868e:	d105      	bne.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008690:	4b1f      	ldr	r3, [pc, #124]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	4a1e      	ldr	r2, [pc, #120]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800869a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d015      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80086a8:	4b19      	ldr	r3, [pc, #100]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086b6:	4916      	ldr	r1, [pc, #88]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086c6:	d105      	bne.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086c8:	4b11      	ldr	r3, [pc, #68]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	4a10      	ldr	r2, [pc, #64]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d019      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80086e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ee:	4908      	ldr	r1, [pc, #32]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086fe:	d109      	bne.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008700:	4b03      	ldr	r3, [pc, #12]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	4a02      	ldr	r2, [pc, #8]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800870a:	60d3      	str	r3, [r2, #12]
 800870c:	e002      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800870e:	bf00      	nop
 8008710:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d015      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008720:	4b29      	ldr	r3, [pc, #164]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008726:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800872e:	4926      	ldr	r1, [pc, #152]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008730:	4313      	orrs	r3, r2
 8008732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800873a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800873e:	d105      	bne.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008740:	4b21      	ldr	r3, [pc, #132]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	4a20      	ldr	r2, [pc, #128]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008746:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800874a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d015      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008758:	4b1b      	ldr	r3, [pc, #108]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800875a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800875e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008766:	4918      	ldr	r1, [pc, #96]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008768:	4313      	orrs	r3, r2
 800876a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008776:	d105      	bne.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008778:	4b13      	ldr	r3, [pc, #76]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	4a12      	ldr	r2, [pc, #72]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800877e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008782:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d015      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008790:	4b0d      	ldr	r3, [pc, #52]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008792:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008796:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800879e:	490a      	ldr	r1, [pc, #40]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087ae:	d105      	bne.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80087b0:	4b05      	ldr	r3, [pc, #20]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	4a04      	ldr	r2, [pc, #16]	@ (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80087bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3718      	adds	r7, #24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	40021000 	.word	0x40021000

080087cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e049      	b.n	8008872 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d106      	bne.n	80087f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f841 	bl	800887a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2202      	movs	r2, #2
 80087fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	3304      	adds	r3, #4
 8008808:	4619      	mov	r1, r3
 800880a:	4610      	mov	r0, r2
 800880c:	f000 fa30 	bl	8008c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800887a:	b480      	push	{r7}
 800887c:	b083      	sub	sp, #12
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008882:	bf00      	nop
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
	...

08008890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d001      	beq.n	80088a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e054      	b.n	8008952 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2202      	movs	r2, #2
 80088ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68da      	ldr	r2, [r3, #12]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f042 0201 	orr.w	r2, r2, #1
 80088be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a26      	ldr	r2, [pc, #152]	@ (8008960 <HAL_TIM_Base_Start_IT+0xd0>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d022      	beq.n	8008910 <HAL_TIM_Base_Start_IT+0x80>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088d2:	d01d      	beq.n	8008910 <HAL_TIM_Base_Start_IT+0x80>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a22      	ldr	r2, [pc, #136]	@ (8008964 <HAL_TIM_Base_Start_IT+0xd4>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d018      	beq.n	8008910 <HAL_TIM_Base_Start_IT+0x80>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a21      	ldr	r2, [pc, #132]	@ (8008968 <HAL_TIM_Base_Start_IT+0xd8>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d013      	beq.n	8008910 <HAL_TIM_Base_Start_IT+0x80>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a1f      	ldr	r2, [pc, #124]	@ (800896c <HAL_TIM_Base_Start_IT+0xdc>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d00e      	beq.n	8008910 <HAL_TIM_Base_Start_IT+0x80>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008970 <HAL_TIM_Base_Start_IT+0xe0>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d009      	beq.n	8008910 <HAL_TIM_Base_Start_IT+0x80>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a1c      	ldr	r2, [pc, #112]	@ (8008974 <HAL_TIM_Base_Start_IT+0xe4>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d004      	beq.n	8008910 <HAL_TIM_Base_Start_IT+0x80>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a1b      	ldr	r2, [pc, #108]	@ (8008978 <HAL_TIM_Base_Start_IT+0xe8>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d115      	bne.n	800893c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	689a      	ldr	r2, [r3, #8]
 8008916:	4b19      	ldr	r3, [pc, #100]	@ (800897c <HAL_TIM_Base_Start_IT+0xec>)
 8008918:	4013      	ands	r3, r2
 800891a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2b06      	cmp	r3, #6
 8008920:	d015      	beq.n	800894e <HAL_TIM_Base_Start_IT+0xbe>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008928:	d011      	beq.n	800894e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f042 0201 	orr.w	r2, r2, #1
 8008938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800893a:	e008      	b.n	800894e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f042 0201 	orr.w	r2, r2, #1
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	e000      	b.n	8008950 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800894e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	40012c00 	.word	0x40012c00
 8008964:	40000400 	.word	0x40000400
 8008968:	40000800 	.word	0x40000800
 800896c:	40000c00 	.word	0x40000c00
 8008970:	40013400 	.word	0x40013400
 8008974:	40014000 	.word	0x40014000
 8008978:	40015000 	.word	0x40015000
 800897c:	00010007 	.word	0x00010007

08008980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d020      	beq.n	80089e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f003 0302 	and.w	r3, r3, #2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d01b      	beq.n	80089e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f06f 0202 	mvn.w	r2, #2
 80089b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	f003 0303 	and.w	r3, r3, #3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d003      	beq.n	80089d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f931 	bl	8008c32 <HAL_TIM_IC_CaptureCallback>
 80089d0:	e005      	b.n	80089de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f923 	bl	8008c1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f934 	bl	8008c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	f003 0304 	and.w	r3, r3, #4
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d020      	beq.n	8008a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d01b      	beq.n	8008a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f06f 0204 	mvn.w	r2, #4
 8008a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2202      	movs	r2, #2
 8008a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d003      	beq.n	8008a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f90b 	bl	8008c32 <HAL_TIM_IC_CaptureCallback>
 8008a1c:	e005      	b.n	8008a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f8fd 	bl	8008c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f90e 	bl	8008c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	f003 0308 	and.w	r3, r3, #8
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d020      	beq.n	8008a7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f003 0308 	and.w	r3, r3, #8
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d01b      	beq.n	8008a7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f06f 0208 	mvn.w	r2, #8
 8008a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2204      	movs	r2, #4
 8008a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	69db      	ldr	r3, [r3, #28]
 8008a5a:	f003 0303 	and.w	r3, r3, #3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f8e5 	bl	8008c32 <HAL_TIM_IC_CaptureCallback>
 8008a68:	e005      	b.n	8008a76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f8d7 	bl	8008c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f8e8 	bl	8008c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	f003 0310 	and.w	r3, r3, #16
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d020      	beq.n	8008ac8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f003 0310 	and.w	r3, r3, #16
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d01b      	beq.n	8008ac8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f06f 0210 	mvn.w	r2, #16
 8008a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2208      	movs	r2, #8
 8008a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	69db      	ldr	r3, [r3, #28]
 8008aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d003      	beq.n	8008ab6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f8bf 	bl	8008c32 <HAL_TIM_IC_CaptureCallback>
 8008ab4:	e005      	b.n	8008ac2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f8b1 	bl	8008c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f8c2 	bl	8008c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00c      	beq.n	8008aec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d007      	beq.n	8008aec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f06f 0201 	mvn.w	r2, #1
 8008ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7fa fbd6 	bl	8003298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d104      	bne.n	8008b00 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00c      	beq.n	8008b1a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d007      	beq.n	8008b1a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f969 	bl	8008dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00c      	beq.n	8008b3e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d007      	beq.n	8008b3e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f961 	bl	8008e00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00c      	beq.n	8008b62 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d007      	beq.n	8008b62 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f87c 	bl	8008c5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	f003 0320 	and.w	r3, r3, #32
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00c      	beq.n	8008b86 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f003 0320 	and.w	r3, r3, #32
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d007      	beq.n	8008b86 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f06f 0220 	mvn.w	r2, #32
 8008b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f929 	bl	8008dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00c      	beq.n	8008baa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d007      	beq.n	8008baa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f935 	bl	8008e14 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00c      	beq.n	8008bce <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d007      	beq.n	8008bce <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f92d 	bl	8008e28 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00c      	beq.n	8008bf2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d007      	beq.n	8008bf2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f925 	bl	8008e3c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00c      	beq.n	8008c16 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d007      	beq.n	8008c16 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f91d 	bl	8008e50 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c16:	bf00      	nop
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c26:	bf00      	nop
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c3a:	bf00      	nop
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b083      	sub	sp, #12
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c4e:	bf00      	nop
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b083      	sub	sp, #12
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c62:	bf00      	nop
 8008c64:	370c      	adds	r7, #12
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
	...

08008c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a4c      	ldr	r2, [pc, #304]	@ (8008db4 <TIM_Base_SetConfig+0x144>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d017      	beq.n	8008cb8 <TIM_Base_SetConfig+0x48>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c8e:	d013      	beq.n	8008cb8 <TIM_Base_SetConfig+0x48>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a49      	ldr	r2, [pc, #292]	@ (8008db8 <TIM_Base_SetConfig+0x148>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d00f      	beq.n	8008cb8 <TIM_Base_SetConfig+0x48>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a48      	ldr	r2, [pc, #288]	@ (8008dbc <TIM_Base_SetConfig+0x14c>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d00b      	beq.n	8008cb8 <TIM_Base_SetConfig+0x48>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a47      	ldr	r2, [pc, #284]	@ (8008dc0 <TIM_Base_SetConfig+0x150>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d007      	beq.n	8008cb8 <TIM_Base_SetConfig+0x48>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a46      	ldr	r2, [pc, #280]	@ (8008dc4 <TIM_Base_SetConfig+0x154>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d003      	beq.n	8008cb8 <TIM_Base_SetConfig+0x48>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a45      	ldr	r2, [pc, #276]	@ (8008dc8 <TIM_Base_SetConfig+0x158>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d108      	bne.n	8008cca <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a39      	ldr	r2, [pc, #228]	@ (8008db4 <TIM_Base_SetConfig+0x144>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d023      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cd8:	d01f      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a36      	ldr	r2, [pc, #216]	@ (8008db8 <TIM_Base_SetConfig+0x148>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d01b      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a35      	ldr	r2, [pc, #212]	@ (8008dbc <TIM_Base_SetConfig+0x14c>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d017      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a34      	ldr	r2, [pc, #208]	@ (8008dc0 <TIM_Base_SetConfig+0x150>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d013      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a33      	ldr	r2, [pc, #204]	@ (8008dc4 <TIM_Base_SetConfig+0x154>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d00f      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a33      	ldr	r2, [pc, #204]	@ (8008dcc <TIM_Base_SetConfig+0x15c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d00b      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a32      	ldr	r2, [pc, #200]	@ (8008dd0 <TIM_Base_SetConfig+0x160>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d007      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a31      	ldr	r2, [pc, #196]	@ (8008dd4 <TIM_Base_SetConfig+0x164>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d003      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a2c      	ldr	r2, [pc, #176]	@ (8008dc8 <TIM_Base_SetConfig+0x158>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d108      	bne.n	8008d2c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a18      	ldr	r2, [pc, #96]	@ (8008db4 <TIM_Base_SetConfig+0x144>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d013      	beq.n	8008d80 <TIM_Base_SetConfig+0x110>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8008dc4 <TIM_Base_SetConfig+0x154>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d00f      	beq.n	8008d80 <TIM_Base_SetConfig+0x110>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a1a      	ldr	r2, [pc, #104]	@ (8008dcc <TIM_Base_SetConfig+0x15c>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d00b      	beq.n	8008d80 <TIM_Base_SetConfig+0x110>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a19      	ldr	r2, [pc, #100]	@ (8008dd0 <TIM_Base_SetConfig+0x160>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d007      	beq.n	8008d80 <TIM_Base_SetConfig+0x110>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a18      	ldr	r2, [pc, #96]	@ (8008dd4 <TIM_Base_SetConfig+0x164>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d003      	beq.n	8008d80 <TIM_Base_SetConfig+0x110>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a13      	ldr	r2, [pc, #76]	@ (8008dc8 <TIM_Base_SetConfig+0x158>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d103      	bne.n	8008d88 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	691a      	ldr	r2, [r3, #16]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	f003 0301 	and.w	r3, r3, #1
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d105      	bne.n	8008da6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	f023 0201 	bic.w	r2, r3, #1
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	611a      	str	r2, [r3, #16]
  }
}
 8008da6:	bf00      	nop
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	40012c00 	.word	0x40012c00
 8008db8:	40000400 	.word	0x40000400
 8008dbc:	40000800 	.word	0x40000800
 8008dc0:	40000c00 	.word	0x40000c00
 8008dc4:	40013400 	.word	0x40013400
 8008dc8:	40015000 	.word	0x40015000
 8008dcc:	40014000 	.word	0x40014000
 8008dd0:	40014400 	.word	0x40014400
 8008dd4:	40014800 	.word	0x40014800

08008dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008e1c:	bf00      	nop
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e042      	b.n	8008efc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d106      	bne.n	8008e8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7fa fd9d 	bl	80039c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2224      	movs	r2, #36	@ 0x24
 8008e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f022 0201 	bic.w	r2, r2, #1
 8008ea4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d002      	beq.n	8008eb4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f001 f806 	bl	8009ec0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fd07 	bl	80098c8 <UART_SetConfig>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d101      	bne.n	8008ec4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e01b      	b.n	8008efc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	685a      	ldr	r2, [r3, #4]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689a      	ldr	r2, [r3, #8]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008ee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f042 0201 	orr.w	r2, r2, #1
 8008ef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f001 f885 	bl	800a004 <UART_CheckIdleState>
 8008efa:	4603      	mov	r3, r0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b08a      	sub	sp, #40	@ 0x28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f18:	2b20      	cmp	r3, #32
 8008f1a:	d167      	bne.n	8008fec <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d002      	beq.n	8008f28 <HAL_UART_Transmit_DMA+0x24>
 8008f22:	88fb      	ldrh	r3, [r7, #6]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d101      	bne.n	8008f2c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e060      	b.n	8008fee <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	88fa      	ldrh	r2, [r7, #6]
 8008f36:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	88fa      	ldrh	r2, [r7, #6]
 8008f3e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2221      	movs	r2, #33	@ 0x21
 8008f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d028      	beq.n	8008fac <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f5e:	4a26      	ldr	r2, [pc, #152]	@ (8008ff8 <HAL_UART_Transmit_DMA+0xf4>)
 8008f60:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f66:	4a25      	ldr	r2, [pc, #148]	@ (8008ffc <HAL_UART_Transmit_DMA+0xf8>)
 8008f68:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f6e:	4a24      	ldr	r2, [pc, #144]	@ (8009000 <HAL_UART_Transmit_DMA+0xfc>)
 8008f70:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f76:	2200      	movs	r2, #0
 8008f78:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f82:	4619      	mov	r1, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	3328      	adds	r3, #40	@ 0x28
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	88fb      	ldrh	r3, [r7, #6]
 8008f8e:	f7fc ffa3 	bl	8005ed8 <HAL_DMA_Start_IT>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d009      	beq.n	8008fac <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2210      	movs	r2, #16
 8008f9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2220      	movs	r2, #32
 8008fa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e020      	b.n	8008fee <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2240      	movs	r2, #64	@ 0x40
 8008fb2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	3308      	adds	r3, #8
 8008fba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	e853 3f00 	ldrex	r3, [r3]
 8008fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3308      	adds	r3, #8
 8008fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fd4:	623a      	str	r2, [r7, #32]
 8008fd6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd8:	69f9      	ldr	r1, [r7, #28]
 8008fda:	6a3a      	ldr	r2, [r7, #32]
 8008fdc:	e841 2300 	strex	r3, r2, [r1]
 8008fe0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1e5      	bne.n	8008fb4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e000      	b.n	8008fee <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008fec:	2302      	movs	r3, #2
  }
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3728      	adds	r7, #40	@ 0x28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	0800a4cf 	.word	0x0800a4cf
 8008ffc:	0800a569 	.word	0x0800a569
 8009000:	0800a6ef 	.word	0x0800a6ef

08009004 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b08a      	sub	sp, #40	@ 0x28
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	4613      	mov	r3, r2
 8009010:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009018:	2b20      	cmp	r3, #32
 800901a:	d137      	bne.n	800908c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d002      	beq.n	8009028 <HAL_UART_Receive_DMA+0x24>
 8009022:	88fb      	ldrh	r3, [r7, #6]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e030      	b.n	800908e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a18      	ldr	r2, [pc, #96]	@ (8009098 <HAL_UART_Receive_DMA+0x94>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d01f      	beq.n	800907c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d018      	beq.n	800907c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	e853 3f00 	ldrex	r3, [r3]
 8009056:	613b      	str	r3, [r7, #16]
   return(result);
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800905e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	461a      	mov	r2, r3
 8009066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009068:	623b      	str	r3, [r7, #32]
 800906a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906c:	69f9      	ldr	r1, [r7, #28]
 800906e:	6a3a      	ldr	r2, [r7, #32]
 8009070:	e841 2300 	strex	r3, r2, [r1]
 8009074:	61bb      	str	r3, [r7, #24]
   return(result);
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1e6      	bne.n	800904a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800907c:	88fb      	ldrh	r3, [r7, #6]
 800907e:	461a      	mov	r2, r3
 8009080:	68b9      	ldr	r1, [r7, #8]
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f001 f8d6 	bl	800a234 <UART_Start_Receive_DMA>
 8009088:	4603      	mov	r3, r0
 800908a:	e000      	b.n	800908e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800908c:	2302      	movs	r3, #2
  }
}
 800908e:	4618      	mov	r0, r3
 8009090:	3728      	adds	r7, #40	@ 0x28
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	40008000 	.word	0x40008000

0800909c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b090      	sub	sp, #64	@ 0x40
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090be:	2b80      	cmp	r3, #128	@ 0x80
 80090c0:	d139      	bne.n	8009136 <HAL_UART_DMAStop+0x9a>
 80090c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090c4:	2b21      	cmp	r3, #33	@ 0x21
 80090c6:	d136      	bne.n	8009136 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3308      	adds	r3, #8
 80090ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	e853 3f00 	ldrex	r3, [r3]
 80090d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090de:	637b      	str	r3, [r7, #52]	@ 0x34
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3308      	adds	r3, #8
 80090e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80090e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090f0:	e841 2300 	strex	r3, r2, [r1]
 80090f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1e5      	bne.n	80090c8 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009100:	2b00      	cmp	r3, #0
 8009102:	d015      	beq.n	8009130 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009108:	4618      	mov	r0, r3
 800910a:	f7fc ff60 	bl	8005fce <HAL_DMA_Abort>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00d      	beq.n	8009130 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009118:	4618      	mov	r0, r3
 800911a:	f7fd f8c7 	bl	80062ac <HAL_DMA_GetError>
 800911e:	4603      	mov	r3, r0
 8009120:	2b20      	cmp	r3, #32
 8009122:	d105      	bne.n	8009130 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2210      	movs	r2, #16
 8009128:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e047      	b.n	80091c0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 f925 	bl	800a380 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009140:	2b40      	cmp	r3, #64	@ 0x40
 8009142:	d13c      	bne.n	80091be <HAL_UART_DMAStop+0x122>
 8009144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009146:	2b22      	cmp	r3, #34	@ 0x22
 8009148:	d139      	bne.n	80091be <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3308      	adds	r3, #8
 8009150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	e853 3f00 	ldrex	r3, [r3]
 8009158:	60bb      	str	r3, [r7, #8]
   return(result);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009160:	633b      	str	r3, [r7, #48]	@ 0x30
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3308      	adds	r3, #8
 8009168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800916a:	61ba      	str	r2, [r7, #24]
 800916c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916e:	6979      	ldr	r1, [r7, #20]
 8009170:	69ba      	ldr	r2, [r7, #24]
 8009172:	e841 2300 	strex	r3, r2, [r1]
 8009176:	613b      	str	r3, [r7, #16]
   return(result);
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1e5      	bne.n	800914a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009184:	2b00      	cmp	r3, #0
 8009186:	d017      	beq.n	80091b8 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800918e:	4618      	mov	r0, r3
 8009190:	f7fc ff1d 	bl	8005fce <HAL_DMA_Abort>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00e      	beq.n	80091b8 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fd f883 	bl	80062ac <HAL_DMA_GetError>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b20      	cmp	r3, #32
 80091aa:	d105      	bne.n	80091b8 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2210      	movs	r2, #16
 80091b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e003      	b.n	80091c0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f001 f922 	bl	800a402 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3740      	adds	r7, #64	@ 0x40
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b0ba      	sub	sp, #232	@ 0xe8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	69db      	ldr	r3, [r3, #28]
 80091d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80091ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80091f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80091f6:	4013      	ands	r3, r2
 80091f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80091fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009200:	2b00      	cmp	r3, #0
 8009202:	d11b      	bne.n	800923c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009208:	f003 0320 	and.w	r3, r3, #32
 800920c:	2b00      	cmp	r3, #0
 800920e:	d015      	beq.n	800923c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009214:	f003 0320 	and.w	r3, r3, #32
 8009218:	2b00      	cmp	r3, #0
 800921a:	d105      	bne.n	8009228 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800921c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d009      	beq.n	800923c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800922c:	2b00      	cmp	r3, #0
 800922e:	f000 8300 	beq.w	8009832 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	4798      	blx	r3
      }
      return;
 800923a:	e2fa      	b.n	8009832 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800923c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009240:	2b00      	cmp	r3, #0
 8009242:	f000 8123 	beq.w	800948c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009246:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800924a:	4b8d      	ldr	r3, [pc, #564]	@ (8009480 <HAL_UART_IRQHandler+0x2b8>)
 800924c:	4013      	ands	r3, r2
 800924e:	2b00      	cmp	r3, #0
 8009250:	d106      	bne.n	8009260 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009252:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009256:	4b8b      	ldr	r3, [pc, #556]	@ (8009484 <HAL_UART_IRQHandler+0x2bc>)
 8009258:	4013      	ands	r3, r2
 800925a:	2b00      	cmp	r3, #0
 800925c:	f000 8116 	beq.w	800948c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009264:	f003 0301 	and.w	r3, r3, #1
 8009268:	2b00      	cmp	r3, #0
 800926a:	d011      	beq.n	8009290 <HAL_UART_IRQHandler+0xc8>
 800926c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00b      	beq.n	8009290 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2201      	movs	r2, #1
 800927e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009286:	f043 0201 	orr.w	r2, r3, #1
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009294:	f003 0302 	and.w	r3, r3, #2
 8009298:	2b00      	cmp	r3, #0
 800929a:	d011      	beq.n	80092c0 <HAL_UART_IRQHandler+0xf8>
 800929c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092a0:	f003 0301 	and.w	r3, r3, #1
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00b      	beq.n	80092c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2202      	movs	r2, #2
 80092ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092b6:	f043 0204 	orr.w	r2, r3, #4
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092c4:	f003 0304 	and.w	r3, r3, #4
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d011      	beq.n	80092f0 <HAL_UART_IRQHandler+0x128>
 80092cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00b      	beq.n	80092f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2204      	movs	r2, #4
 80092de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092e6:	f043 0202 	orr.w	r2, r3, #2
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80092f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092f4:	f003 0308 	and.w	r3, r3, #8
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d017      	beq.n	800932c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80092fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009300:	f003 0320 	and.w	r3, r3, #32
 8009304:	2b00      	cmp	r3, #0
 8009306:	d105      	bne.n	8009314 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009308:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800930c:	4b5c      	ldr	r3, [pc, #368]	@ (8009480 <HAL_UART_IRQHandler+0x2b8>)
 800930e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00b      	beq.n	800932c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2208      	movs	r2, #8
 800931a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009322:	f043 0208 	orr.w	r2, r3, #8
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800932c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009334:	2b00      	cmp	r3, #0
 8009336:	d012      	beq.n	800935e <HAL_UART_IRQHandler+0x196>
 8009338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800933c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00c      	beq.n	800935e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800934c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009354:	f043 0220 	orr.w	r2, r3, #32
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 8266 	beq.w	8009836 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800936a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800936e:	f003 0320 	and.w	r3, r3, #32
 8009372:	2b00      	cmp	r3, #0
 8009374:	d013      	beq.n	800939e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800937a:	f003 0320 	and.w	r3, r3, #32
 800937e:	2b00      	cmp	r3, #0
 8009380:	d105      	bne.n	800938e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800938a:	2b00      	cmp	r3, #0
 800938c:	d007      	beq.n	800939e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009392:	2b00      	cmp	r3, #0
 8009394:	d003      	beq.n	800939e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093b2:	2b40      	cmp	r3, #64	@ 0x40
 80093b4:	d005      	beq.n	80093c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80093b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80093ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d054      	beq.n	800946c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f001 f81d 	bl	800a402 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d2:	2b40      	cmp	r3, #64	@ 0x40
 80093d4:	d146      	bne.n	8009464 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3308      	adds	r3, #8
 80093dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093e4:	e853 3f00 	ldrex	r3, [r3]
 80093e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80093ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3308      	adds	r3, #8
 80093fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009402:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009406:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800940e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009412:	e841 2300 	strex	r3, r2, [r1]
 8009416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800941a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1d9      	bne.n	80093d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009428:	2b00      	cmp	r3, #0
 800942a:	d017      	beq.n	800945c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009432:	4a15      	ldr	r2, [pc, #84]	@ (8009488 <HAL_UART_IRQHandler+0x2c0>)
 8009434:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800943c:	4618      	mov	r0, r3
 800943e:	f7fc fe1f 	bl	8006080 <HAL_DMA_Abort_IT>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d019      	beq.n	800947c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800944e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009456:	4610      	mov	r0, r2
 8009458:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800945a:	e00f      	b.n	800947c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fa1d 	bl	800989c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009462:	e00b      	b.n	800947c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fa19 	bl	800989c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800946a:	e007      	b.n	800947c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fa15 	bl	800989c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800947a:	e1dc      	b.n	8009836 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800947c:	bf00      	nop
    return;
 800947e:	e1da      	b.n	8009836 <HAL_UART_IRQHandler+0x66e>
 8009480:	10000001 	.word	0x10000001
 8009484:	04000120 	.word	0x04000120
 8009488:	0800a76f 	.word	0x0800a76f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009490:	2b01      	cmp	r3, #1
 8009492:	f040 8170 	bne.w	8009776 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800949a:	f003 0310 	and.w	r3, r3, #16
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 8169 	beq.w	8009776 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80094a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094a8:	f003 0310 	and.w	r3, r3, #16
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 8162 	beq.w	8009776 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2210      	movs	r2, #16
 80094b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094c4:	2b40      	cmp	r3, #64	@ 0x40
 80094c6:	f040 80d8 	bne.w	800967a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80094d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 80af 	beq.w	8009640 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80094e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094ec:	429a      	cmp	r2, r3
 80094ee:	f080 80a7 	bcs.w	8009640 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 0320 	and.w	r3, r3, #32
 800950a:	2b00      	cmp	r3, #0
 800950c:	f040 8087 	bne.w	800961e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009518:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800951c:	e853 3f00 	ldrex	r3, [r3]
 8009520:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009524:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800952c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	461a      	mov	r2, r3
 8009536:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800953a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800953e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009542:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009546:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800954a:	e841 2300 	strex	r3, r2, [r1]
 800954e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009552:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1da      	bne.n	8009510 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	3308      	adds	r3, #8
 8009560:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009562:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009564:	e853 3f00 	ldrex	r3, [r3]
 8009568:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800956a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800956c:	f023 0301 	bic.w	r3, r3, #1
 8009570:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	3308      	adds	r3, #8
 800957a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800957e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009582:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009584:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009586:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800958a:	e841 2300 	strex	r3, r2, [r1]
 800958e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1e1      	bne.n	800955a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3308      	adds	r3, #8
 800959c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095a0:	e853 3f00 	ldrex	r3, [r3]
 80095a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80095a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3308      	adds	r3, #8
 80095b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80095ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80095bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80095c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80095c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e3      	bne.n	8009596 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2220      	movs	r2, #32
 80095d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095e4:	e853 3f00 	ldrex	r3, [r3]
 80095e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80095ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095ec:	f023 0310 	bic.w	r3, r3, #16
 80095f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	461a      	mov	r2, r3
 80095fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009600:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009602:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009604:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009606:	e841 2300 	strex	r3, r2, [r1]
 800960a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800960c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1e4      	bne.n	80095dc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009618:	4618      	mov	r0, r3
 800961a:	f7fc fcd8 	bl	8005fce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2202      	movs	r2, #2
 8009622:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009630:	b29b      	uxth	r3, r3
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	b29b      	uxth	r3, r3
 8009636:	4619      	mov	r1, r3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f939 	bl	80098b0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800963e:	e0fc      	b.n	800983a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800964a:	429a      	cmp	r2, r3
 800964c:	f040 80f5 	bne.w	800983a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 0320 	and.w	r3, r3, #32
 800965e:	2b20      	cmp	r3, #32
 8009660:	f040 80eb 	bne.w	800983a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2202      	movs	r2, #2
 8009668:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009670:	4619      	mov	r1, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f91c 	bl	80098b0 <HAL_UARTEx_RxEventCallback>
      return;
 8009678:	e0df      	b.n	800983a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009686:	b29b      	uxth	r3, r3
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009694:	b29b      	uxth	r3, r3
 8009696:	2b00      	cmp	r3, #0
 8009698:	f000 80d1 	beq.w	800983e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800969c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f000 80cc 	beq.w	800983e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ae:	e853 3f00 	ldrex	r3, [r3]
 80096b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	461a      	mov	r2, r3
 80096c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80096c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80096ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096d0:	e841 2300 	strex	r3, r2, [r1]
 80096d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1e4      	bne.n	80096a6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	3308      	adds	r3, #8
 80096e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e6:	e853 3f00 	ldrex	r3, [r3]
 80096ea:	623b      	str	r3, [r7, #32]
   return(result);
 80096ec:	6a3b      	ldr	r3, [r7, #32]
 80096ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096f2:	f023 0301 	bic.w	r3, r3, #1
 80096f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3308      	adds	r3, #8
 8009700:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009704:	633a      	str	r2, [r7, #48]	@ 0x30
 8009706:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009708:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800970a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800970c:	e841 2300 	strex	r3, r2, [r1]
 8009710:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1e1      	bne.n	80096dc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2220      	movs	r2, #32
 800971c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	e853 3f00 	ldrex	r3, [r3]
 8009738:	60fb      	str	r3, [r7, #12]
   return(result);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f023 0310 	bic.w	r3, r3, #16
 8009740:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	461a      	mov	r2, r3
 800974a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800974e:	61fb      	str	r3, [r7, #28]
 8009750:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009752:	69b9      	ldr	r1, [r7, #24]
 8009754:	69fa      	ldr	r2, [r7, #28]
 8009756:	e841 2300 	strex	r3, r2, [r1]
 800975a:	617b      	str	r3, [r7, #20]
   return(result);
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1e4      	bne.n	800972c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2202      	movs	r2, #2
 8009766:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009768:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f89e 	bl	80098b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009774:	e063      	b.n	800983e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800977a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00e      	beq.n	80097a0 <HAL_UART_IRQHandler+0x5d8>
 8009782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d008      	beq.n	80097a0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009796:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f001 f825 	bl	800a7e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800979e:	e051      	b.n	8009844 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80097a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d014      	beq.n	80097d6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80097ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d105      	bne.n	80097c4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80097b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d008      	beq.n	80097d6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d03a      	beq.n	8009842 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	4798      	blx	r3
    }
    return;
 80097d4:	e035      	b.n	8009842 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80097d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d009      	beq.n	80097f6 <HAL_UART_IRQHandler+0x62e>
 80097e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 ffcf 	bl	800a792 <UART_EndTransmit_IT>
    return;
 80097f4:	e026      	b.n	8009844 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80097f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d009      	beq.n	8009816 <HAL_UART_IRQHandler+0x64e>
 8009802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009806:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800980a:	2b00      	cmp	r3, #0
 800980c:	d003      	beq.n	8009816 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fffe 	bl	800a810 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009814:	e016      	b.n	8009844 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800981a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800981e:	2b00      	cmp	r3, #0
 8009820:	d010      	beq.n	8009844 <HAL_UART_IRQHandler+0x67c>
 8009822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009826:	2b00      	cmp	r3, #0
 8009828:	da0c      	bge.n	8009844 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 ffe6 	bl	800a7fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009830:	e008      	b.n	8009844 <HAL_UART_IRQHandler+0x67c>
      return;
 8009832:	bf00      	nop
 8009834:	e006      	b.n	8009844 <HAL_UART_IRQHandler+0x67c>
    return;
 8009836:	bf00      	nop
 8009838:	e004      	b.n	8009844 <HAL_UART_IRQHandler+0x67c>
      return;
 800983a:	bf00      	nop
 800983c:	e002      	b.n	8009844 <HAL_UART_IRQHandler+0x67c>
      return;
 800983e:	bf00      	nop
 8009840:	e000      	b.n	8009844 <HAL_UART_IRQHandler+0x67c>
    return;
 8009842:	bf00      	nop
  }
}
 8009844:	37e8      	adds	r7, #232	@ 0xe8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop

0800984c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009868:	bf00      	nop
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009890:	bf00      	nop
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	460b      	mov	r3, r1
 80098ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098cc:	b08c      	sub	sp, #48	@ 0x30
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	689a      	ldr	r2, [r3, #8]
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	431a      	orrs	r2, r3
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	431a      	orrs	r2, r3
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	69db      	ldr	r3, [r3, #28]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	4baa      	ldr	r3, [pc, #680]	@ (8009ba0 <UART_SetConfig+0x2d8>)
 80098f8:	4013      	ands	r3, r2
 80098fa:	697a      	ldr	r2, [r7, #20]
 80098fc:	6812      	ldr	r2, [r2, #0]
 80098fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009900:	430b      	orrs	r3, r1
 8009902:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	68da      	ldr	r2, [r3, #12]
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a9f      	ldr	r2, [pc, #636]	@ (8009ba4 <UART_SetConfig+0x2dc>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d004      	beq.n	8009934 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	6a1b      	ldr	r3, [r3, #32]
 800992e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009930:	4313      	orrs	r3, r2
 8009932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800993e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	6812      	ldr	r2, [r2, #0]
 8009946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009948:	430b      	orrs	r3, r1
 800994a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009952:	f023 010f 	bic.w	r1, r3, #15
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	430a      	orrs	r2, r1
 8009960:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a90      	ldr	r2, [pc, #576]	@ (8009ba8 <UART_SetConfig+0x2e0>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d125      	bne.n	80099b8 <UART_SetConfig+0xf0>
 800996c:	4b8f      	ldr	r3, [pc, #572]	@ (8009bac <UART_SetConfig+0x2e4>)
 800996e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009972:	f003 0303 	and.w	r3, r3, #3
 8009976:	2b03      	cmp	r3, #3
 8009978:	d81a      	bhi.n	80099b0 <UART_SetConfig+0xe8>
 800997a:	a201      	add	r2, pc, #4	@ (adr r2, 8009980 <UART_SetConfig+0xb8>)
 800997c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009980:	08009991 	.word	0x08009991
 8009984:	080099a1 	.word	0x080099a1
 8009988:	08009999 	.word	0x08009999
 800998c:	080099a9 	.word	0x080099a9
 8009990:	2301      	movs	r3, #1
 8009992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009996:	e116      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009998:	2302      	movs	r3, #2
 800999a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800999e:	e112      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 80099a0:	2304      	movs	r3, #4
 80099a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099a6:	e10e      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 80099a8:	2308      	movs	r3, #8
 80099aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ae:	e10a      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 80099b0:	2310      	movs	r3, #16
 80099b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099b6:	e106      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a7c      	ldr	r2, [pc, #496]	@ (8009bb0 <UART_SetConfig+0x2e8>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d138      	bne.n	8009a34 <UART_SetConfig+0x16c>
 80099c2:	4b7a      	ldr	r3, [pc, #488]	@ (8009bac <UART_SetConfig+0x2e4>)
 80099c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099c8:	f003 030c 	and.w	r3, r3, #12
 80099cc:	2b0c      	cmp	r3, #12
 80099ce:	d82d      	bhi.n	8009a2c <UART_SetConfig+0x164>
 80099d0:	a201      	add	r2, pc, #4	@ (adr r2, 80099d8 <UART_SetConfig+0x110>)
 80099d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d6:	bf00      	nop
 80099d8:	08009a0d 	.word	0x08009a0d
 80099dc:	08009a2d 	.word	0x08009a2d
 80099e0:	08009a2d 	.word	0x08009a2d
 80099e4:	08009a2d 	.word	0x08009a2d
 80099e8:	08009a1d 	.word	0x08009a1d
 80099ec:	08009a2d 	.word	0x08009a2d
 80099f0:	08009a2d 	.word	0x08009a2d
 80099f4:	08009a2d 	.word	0x08009a2d
 80099f8:	08009a15 	.word	0x08009a15
 80099fc:	08009a2d 	.word	0x08009a2d
 8009a00:	08009a2d 	.word	0x08009a2d
 8009a04:	08009a2d 	.word	0x08009a2d
 8009a08:	08009a25 	.word	0x08009a25
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a12:	e0d8      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009a14:	2302      	movs	r3, #2
 8009a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a1a:	e0d4      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009a1c:	2304      	movs	r3, #4
 8009a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a22:	e0d0      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009a24:	2308      	movs	r3, #8
 8009a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a2a:	e0cc      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009a2c:	2310      	movs	r3, #16
 8009a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a32:	e0c8      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a5e      	ldr	r2, [pc, #376]	@ (8009bb4 <UART_SetConfig+0x2ec>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d125      	bne.n	8009a8a <UART_SetConfig+0x1c2>
 8009a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8009bac <UART_SetConfig+0x2e4>)
 8009a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009a48:	2b30      	cmp	r3, #48	@ 0x30
 8009a4a:	d016      	beq.n	8009a7a <UART_SetConfig+0x1b2>
 8009a4c:	2b30      	cmp	r3, #48	@ 0x30
 8009a4e:	d818      	bhi.n	8009a82 <UART_SetConfig+0x1ba>
 8009a50:	2b20      	cmp	r3, #32
 8009a52:	d00a      	beq.n	8009a6a <UART_SetConfig+0x1a2>
 8009a54:	2b20      	cmp	r3, #32
 8009a56:	d814      	bhi.n	8009a82 <UART_SetConfig+0x1ba>
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d002      	beq.n	8009a62 <UART_SetConfig+0x19a>
 8009a5c:	2b10      	cmp	r3, #16
 8009a5e:	d008      	beq.n	8009a72 <UART_SetConfig+0x1aa>
 8009a60:	e00f      	b.n	8009a82 <UART_SetConfig+0x1ba>
 8009a62:	2300      	movs	r3, #0
 8009a64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a68:	e0ad      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a70:	e0a9      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009a72:	2304      	movs	r3, #4
 8009a74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a78:	e0a5      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009a7a:	2308      	movs	r3, #8
 8009a7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a80:	e0a1      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009a82:	2310      	movs	r3, #16
 8009a84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a88:	e09d      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a4a      	ldr	r2, [pc, #296]	@ (8009bb8 <UART_SetConfig+0x2f0>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d125      	bne.n	8009ae0 <UART_SetConfig+0x218>
 8009a94:	4b45      	ldr	r3, [pc, #276]	@ (8009bac <UART_SetConfig+0x2e4>)
 8009a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009a9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009aa0:	d016      	beq.n	8009ad0 <UART_SetConfig+0x208>
 8009aa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009aa4:	d818      	bhi.n	8009ad8 <UART_SetConfig+0x210>
 8009aa6:	2b80      	cmp	r3, #128	@ 0x80
 8009aa8:	d00a      	beq.n	8009ac0 <UART_SetConfig+0x1f8>
 8009aaa:	2b80      	cmp	r3, #128	@ 0x80
 8009aac:	d814      	bhi.n	8009ad8 <UART_SetConfig+0x210>
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d002      	beq.n	8009ab8 <UART_SetConfig+0x1f0>
 8009ab2:	2b40      	cmp	r3, #64	@ 0x40
 8009ab4:	d008      	beq.n	8009ac8 <UART_SetConfig+0x200>
 8009ab6:	e00f      	b.n	8009ad8 <UART_SetConfig+0x210>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009abe:	e082      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ac6:	e07e      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009ac8:	2304      	movs	r3, #4
 8009aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ace:	e07a      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009ad0:	2308      	movs	r3, #8
 8009ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ad6:	e076      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009ad8:	2310      	movs	r3, #16
 8009ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ade:	e072      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a35      	ldr	r2, [pc, #212]	@ (8009bbc <UART_SetConfig+0x2f4>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d12a      	bne.n	8009b40 <UART_SetConfig+0x278>
 8009aea:	4b30      	ldr	r3, [pc, #192]	@ (8009bac <UART_SetConfig+0x2e4>)
 8009aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009af0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009af4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009af8:	d01a      	beq.n	8009b30 <UART_SetConfig+0x268>
 8009afa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009afe:	d81b      	bhi.n	8009b38 <UART_SetConfig+0x270>
 8009b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b04:	d00c      	beq.n	8009b20 <UART_SetConfig+0x258>
 8009b06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b0a:	d815      	bhi.n	8009b38 <UART_SetConfig+0x270>
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d003      	beq.n	8009b18 <UART_SetConfig+0x250>
 8009b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b14:	d008      	beq.n	8009b28 <UART_SetConfig+0x260>
 8009b16:	e00f      	b.n	8009b38 <UART_SetConfig+0x270>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b1e:	e052      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009b20:	2302      	movs	r3, #2
 8009b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b26:	e04e      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009b28:	2304      	movs	r3, #4
 8009b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b2e:	e04a      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009b30:	2308      	movs	r3, #8
 8009b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b36:	e046      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009b38:	2310      	movs	r3, #16
 8009b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b3e:	e042      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a17      	ldr	r2, [pc, #92]	@ (8009ba4 <UART_SetConfig+0x2dc>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d13a      	bne.n	8009bc0 <UART_SetConfig+0x2f8>
 8009b4a:	4b18      	ldr	r3, [pc, #96]	@ (8009bac <UART_SetConfig+0x2e4>)
 8009b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009b54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b58:	d01a      	beq.n	8009b90 <UART_SetConfig+0x2c8>
 8009b5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b5e:	d81b      	bhi.n	8009b98 <UART_SetConfig+0x2d0>
 8009b60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b64:	d00c      	beq.n	8009b80 <UART_SetConfig+0x2b8>
 8009b66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b6a:	d815      	bhi.n	8009b98 <UART_SetConfig+0x2d0>
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d003      	beq.n	8009b78 <UART_SetConfig+0x2b0>
 8009b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b74:	d008      	beq.n	8009b88 <UART_SetConfig+0x2c0>
 8009b76:	e00f      	b.n	8009b98 <UART_SetConfig+0x2d0>
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b7e:	e022      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009b80:	2302      	movs	r3, #2
 8009b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b86:	e01e      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009b88:	2304      	movs	r3, #4
 8009b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b8e:	e01a      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009b90:	2308      	movs	r3, #8
 8009b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b96:	e016      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009b98:	2310      	movs	r3, #16
 8009b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b9e:	e012      	b.n	8009bc6 <UART_SetConfig+0x2fe>
 8009ba0:	cfff69f3 	.word	0xcfff69f3
 8009ba4:	40008000 	.word	0x40008000
 8009ba8:	40013800 	.word	0x40013800
 8009bac:	40021000 	.word	0x40021000
 8009bb0:	40004400 	.word	0x40004400
 8009bb4:	40004800 	.word	0x40004800
 8009bb8:	40004c00 	.word	0x40004c00
 8009bbc:	40005000 	.word	0x40005000
 8009bc0:	2310      	movs	r3, #16
 8009bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4aae      	ldr	r2, [pc, #696]	@ (8009e84 <UART_SetConfig+0x5bc>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	f040 8097 	bne.w	8009d00 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009bd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009bd6:	2b08      	cmp	r3, #8
 8009bd8:	d823      	bhi.n	8009c22 <UART_SetConfig+0x35a>
 8009bda:	a201      	add	r2, pc, #4	@ (adr r2, 8009be0 <UART_SetConfig+0x318>)
 8009bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be0:	08009c05 	.word	0x08009c05
 8009be4:	08009c23 	.word	0x08009c23
 8009be8:	08009c0d 	.word	0x08009c0d
 8009bec:	08009c23 	.word	0x08009c23
 8009bf0:	08009c13 	.word	0x08009c13
 8009bf4:	08009c23 	.word	0x08009c23
 8009bf8:	08009c23 	.word	0x08009c23
 8009bfc:	08009c23 	.word	0x08009c23
 8009c00:	08009c1b 	.word	0x08009c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c04:	f7fe faf0 	bl	80081e8 <HAL_RCC_GetPCLK1Freq>
 8009c08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c0a:	e010      	b.n	8009c2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c0c:	4b9e      	ldr	r3, [pc, #632]	@ (8009e88 <UART_SetConfig+0x5c0>)
 8009c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c10:	e00d      	b.n	8009c2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c12:	f7fe fa7b 	bl	800810c <HAL_RCC_GetSysClockFreq>
 8009c16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c18:	e009      	b.n	8009c2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c20:	e005      	b.n	8009c2e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009c22:	2300      	movs	r3, #0
 8009c24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009c2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 8130 	beq.w	8009e96 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c3a:	4a94      	ldr	r2, [pc, #592]	@ (8009e8c <UART_SetConfig+0x5c4>)
 8009c3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c40:	461a      	mov	r2, r3
 8009c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c48:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	685a      	ldr	r2, [r3, #4]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	005b      	lsls	r3, r3, #1
 8009c52:	4413      	add	r3, r2
 8009c54:	69ba      	ldr	r2, [r7, #24]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d305      	bcc.n	8009c66 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c60:	69ba      	ldr	r2, [r7, #24]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d903      	bls.n	8009c6e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c6c:	e113      	b.n	8009e96 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c70:	2200      	movs	r2, #0
 8009c72:	60bb      	str	r3, [r7, #8]
 8009c74:	60fa      	str	r2, [r7, #12]
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c7a:	4a84      	ldr	r2, [pc, #528]	@ (8009e8c <UART_SetConfig+0x5c4>)
 8009c7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	2200      	movs	r2, #0
 8009c84:	603b      	str	r3, [r7, #0]
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c90:	f7f6 ffea 	bl	8000c68 <__aeabi_uldivmod>
 8009c94:	4602      	mov	r2, r0
 8009c96:	460b      	mov	r3, r1
 8009c98:	4610      	mov	r0, r2
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	f04f 0200 	mov.w	r2, #0
 8009ca0:	f04f 0300 	mov.w	r3, #0
 8009ca4:	020b      	lsls	r3, r1, #8
 8009ca6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009caa:	0202      	lsls	r2, r0, #8
 8009cac:	6979      	ldr	r1, [r7, #20]
 8009cae:	6849      	ldr	r1, [r1, #4]
 8009cb0:	0849      	lsrs	r1, r1, #1
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	460c      	mov	r4, r1
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	eb12 0804 	adds.w	r8, r2, r4
 8009cbc:	eb43 0905 	adc.w	r9, r3, r5
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	469a      	mov	sl, r3
 8009cc8:	4693      	mov	fp, r2
 8009cca:	4652      	mov	r2, sl
 8009ccc:	465b      	mov	r3, fp
 8009cce:	4640      	mov	r0, r8
 8009cd0:	4649      	mov	r1, r9
 8009cd2:	f7f6 ffc9 	bl	8000c68 <__aeabi_uldivmod>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4613      	mov	r3, r2
 8009cdc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cde:	6a3b      	ldr	r3, [r7, #32]
 8009ce0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ce4:	d308      	bcc.n	8009cf8 <UART_SetConfig+0x430>
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cec:	d204      	bcs.n	8009cf8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	6a3a      	ldr	r2, [r7, #32]
 8009cf4:	60da      	str	r2, [r3, #12]
 8009cf6:	e0ce      	b.n	8009e96 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009cfe:	e0ca      	b.n	8009e96 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	69db      	ldr	r3, [r3, #28]
 8009d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d08:	d166      	bne.n	8009dd8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009d0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d0e:	2b08      	cmp	r3, #8
 8009d10:	d827      	bhi.n	8009d62 <UART_SetConfig+0x49a>
 8009d12:	a201      	add	r2, pc, #4	@ (adr r2, 8009d18 <UART_SetConfig+0x450>)
 8009d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d18:	08009d3d 	.word	0x08009d3d
 8009d1c:	08009d45 	.word	0x08009d45
 8009d20:	08009d4d 	.word	0x08009d4d
 8009d24:	08009d63 	.word	0x08009d63
 8009d28:	08009d53 	.word	0x08009d53
 8009d2c:	08009d63 	.word	0x08009d63
 8009d30:	08009d63 	.word	0x08009d63
 8009d34:	08009d63 	.word	0x08009d63
 8009d38:	08009d5b 	.word	0x08009d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d3c:	f7fe fa54 	bl	80081e8 <HAL_RCC_GetPCLK1Freq>
 8009d40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d42:	e014      	b.n	8009d6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d44:	f7fe fa66 	bl	8008214 <HAL_RCC_GetPCLK2Freq>
 8009d48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d4a:	e010      	b.n	8009d6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d4c:	4b4e      	ldr	r3, [pc, #312]	@ (8009e88 <UART_SetConfig+0x5c0>)
 8009d4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d50:	e00d      	b.n	8009d6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d52:	f7fe f9db 	bl	800810c <HAL_RCC_GetSysClockFreq>
 8009d56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d58:	e009      	b.n	8009d6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d60:	e005      	b.n	8009d6e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009d62:	2300      	movs	r3, #0
 8009d64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009d6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f000 8090 	beq.w	8009e96 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d7a:	4a44      	ldr	r2, [pc, #272]	@ (8009e8c <UART_SetConfig+0x5c4>)
 8009d7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d80:	461a      	mov	r2, r3
 8009d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d84:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d88:	005a      	lsls	r2, r3, #1
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	085b      	lsrs	r3, r3, #1
 8009d90:	441a      	add	r2, r3
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d9c:	6a3b      	ldr	r3, [r7, #32]
 8009d9e:	2b0f      	cmp	r3, #15
 8009da0:	d916      	bls.n	8009dd0 <UART_SetConfig+0x508>
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009da8:	d212      	bcs.n	8009dd0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	f023 030f 	bic.w	r3, r3, #15
 8009db2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009db4:	6a3b      	ldr	r3, [r7, #32]
 8009db6:	085b      	lsrs	r3, r3, #1
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	f003 0307 	and.w	r3, r3, #7
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	8bfb      	ldrh	r3, [r7, #30]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	8bfa      	ldrh	r2, [r7, #30]
 8009dcc:	60da      	str	r2, [r3, #12]
 8009dce:	e062      	b.n	8009e96 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009dd6:	e05e      	b.n	8009e96 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009dd8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009ddc:	2b08      	cmp	r3, #8
 8009dde:	d828      	bhi.n	8009e32 <UART_SetConfig+0x56a>
 8009de0:	a201      	add	r2, pc, #4	@ (adr r2, 8009de8 <UART_SetConfig+0x520>)
 8009de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de6:	bf00      	nop
 8009de8:	08009e0d 	.word	0x08009e0d
 8009dec:	08009e15 	.word	0x08009e15
 8009df0:	08009e1d 	.word	0x08009e1d
 8009df4:	08009e33 	.word	0x08009e33
 8009df8:	08009e23 	.word	0x08009e23
 8009dfc:	08009e33 	.word	0x08009e33
 8009e00:	08009e33 	.word	0x08009e33
 8009e04:	08009e33 	.word	0x08009e33
 8009e08:	08009e2b 	.word	0x08009e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e0c:	f7fe f9ec 	bl	80081e8 <HAL_RCC_GetPCLK1Freq>
 8009e10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e12:	e014      	b.n	8009e3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e14:	f7fe f9fe 	bl	8008214 <HAL_RCC_GetPCLK2Freq>
 8009e18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e1a:	e010      	b.n	8009e3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8009e88 <UART_SetConfig+0x5c0>)
 8009e1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e20:	e00d      	b.n	8009e3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e22:	f7fe f973 	bl	800810c <HAL_RCC_GetSysClockFreq>
 8009e26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e28:	e009      	b.n	8009e3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e30:	e005      	b.n	8009e3e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009e32:	2300      	movs	r3, #0
 8009e34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009e3c:	bf00      	nop
    }

    if (pclk != 0U)
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d028      	beq.n	8009e96 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e48:	4a10      	ldr	r2, [pc, #64]	@ (8009e8c <UART_SetConfig+0x5c4>)
 8009e4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e4e:	461a      	mov	r2, r3
 8009e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e52:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	085b      	lsrs	r3, r3, #1
 8009e5c:	441a      	add	r2, r3
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e68:	6a3b      	ldr	r3, [r7, #32]
 8009e6a:	2b0f      	cmp	r3, #15
 8009e6c:	d910      	bls.n	8009e90 <UART_SetConfig+0x5c8>
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e74:	d20c      	bcs.n	8009e90 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e76:	6a3b      	ldr	r3, [r7, #32]
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	60da      	str	r2, [r3, #12]
 8009e80:	e009      	b.n	8009e96 <UART_SetConfig+0x5ce>
 8009e82:	bf00      	nop
 8009e84:	40008000 	.word	0x40008000
 8009e88:	00f42400 	.word	0x00f42400
 8009e8c:	0801edcc 	.word	0x0801edcc
      }
      else
      {
        ret = HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009eb2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3730      	adds	r7, #48	@ 0x30
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009ec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ecc:	f003 0308 	and.w	r3, r3, #8
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00a      	beq.n	8009eea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eee:	f003 0301 	and.w	r3, r3, #1
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	430a      	orrs	r2, r1
 8009f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f10:	f003 0302 	and.w	r3, r3, #2
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00a      	beq.n	8009f2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	430a      	orrs	r2, r1
 8009f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f32:	f003 0304 	and.w	r3, r3, #4
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00a      	beq.n	8009f50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	430a      	orrs	r2, r1
 8009f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f54:	f003 0310 	and.w	r3, r3, #16
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00a      	beq.n	8009f72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	430a      	orrs	r2, r1
 8009f70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f76:	f003 0320 	and.w	r3, r3, #32
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00a      	beq.n	8009f94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	430a      	orrs	r2, r1
 8009f92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d01a      	beq.n	8009fd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fbe:	d10a      	bne.n	8009fd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	430a      	orrs	r2, r1
 8009fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00a      	beq.n	8009ff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	430a      	orrs	r2, r1
 8009ff6:	605a      	str	r2, [r3, #4]
  }
}
 8009ff8:	bf00      	nop
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b098      	sub	sp, #96	@ 0x60
 800a008:	af02      	add	r7, sp, #8
 800a00a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a014:	f7f9 fe96 	bl	8003d44 <HAL_GetTick>
 800a018:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 0308 	and.w	r3, r3, #8
 800a024:	2b08      	cmp	r3, #8
 800a026:	d12f      	bne.n	800a088 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a028:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a030:	2200      	movs	r2, #0
 800a032:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f88e 	bl	800a158 <UART_WaitOnFlagUntilTimeout>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d022      	beq.n	800a088 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04a:	e853 3f00 	ldrex	r3, [r3]
 800a04e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a052:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a056:	653b      	str	r3, [r7, #80]	@ 0x50
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	461a      	mov	r2, r3
 800a05e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a060:	647b      	str	r3, [r7, #68]	@ 0x44
 800a062:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a064:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a066:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a068:	e841 2300 	strex	r3, r2, [r1]
 800a06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a06e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1e6      	bne.n	800a042 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2220      	movs	r2, #32
 800a078:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a084:	2303      	movs	r3, #3
 800a086:	e063      	b.n	800a150 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f003 0304 	and.w	r3, r3, #4
 800a092:	2b04      	cmp	r3, #4
 800a094:	d149      	bne.n	800a12a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a096:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 f857 	bl	800a158 <UART_WaitOnFlagUntilTimeout>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d03c      	beq.n	800a12a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b8:	e853 3f00 	ldrex	r3, [r3]
 800a0bc:	623b      	str	r3, [r7, #32]
   return(result);
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0d6:	e841 2300 	strex	r3, r2, [r1]
 800a0da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1e6      	bne.n	800a0b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3308      	adds	r3, #8
 800a0e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	e853 3f00 	ldrex	r3, [r3]
 800a0f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f023 0301 	bic.w	r3, r3, #1
 800a0f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	3308      	adds	r3, #8
 800a100:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a102:	61fa      	str	r2, [r7, #28]
 800a104:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a106:	69b9      	ldr	r1, [r7, #24]
 800a108:	69fa      	ldr	r2, [r7, #28]
 800a10a:	e841 2300 	strex	r3, r2, [r1]
 800a10e:	617b      	str	r3, [r7, #20]
   return(result);
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1e5      	bne.n	800a0e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2220      	movs	r2, #32
 800a11a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e012      	b.n	800a150 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2220      	movs	r2, #32
 800a12e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2220      	movs	r2, #32
 800a136:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3758      	adds	r7, #88	@ 0x58
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	603b      	str	r3, [r7, #0]
 800a164:	4613      	mov	r3, r2
 800a166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a168:	e04f      	b.n	800a20a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a170:	d04b      	beq.n	800a20a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a172:	f7f9 fde7 	bl	8003d44 <HAL_GetTick>
 800a176:	4602      	mov	r2, r0
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	69ba      	ldr	r2, [r7, #24]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d302      	bcc.n	800a188 <UART_WaitOnFlagUntilTimeout+0x30>
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d101      	bne.n	800a18c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a188:	2303      	movs	r3, #3
 800a18a:	e04e      	b.n	800a22a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0304 	and.w	r3, r3, #4
 800a196:	2b00      	cmp	r3, #0
 800a198:	d037      	beq.n	800a20a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	2b80      	cmp	r3, #128	@ 0x80
 800a19e:	d034      	beq.n	800a20a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	2b40      	cmp	r3, #64	@ 0x40
 800a1a4:	d031      	beq.n	800a20a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	69db      	ldr	r3, [r3, #28]
 800a1ac:	f003 0308 	and.w	r3, r3, #8
 800a1b0:	2b08      	cmp	r3, #8
 800a1b2:	d110      	bne.n	800a1d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2208      	movs	r2, #8
 800a1ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f000 f920 	bl	800a402 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2208      	movs	r2, #8
 800a1c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e029      	b.n	800a22a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	69db      	ldr	r3, [r3, #28]
 800a1dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1e4:	d111      	bne.n	800a20a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a1ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f000 f906 	bl	800a402 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2220      	movs	r2, #32
 800a1fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	e00f      	b.n	800a22a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	69da      	ldr	r2, [r3, #28]
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	4013      	ands	r3, r2
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	429a      	cmp	r2, r3
 800a218:	bf0c      	ite	eq
 800a21a:	2301      	moveq	r3, #1
 800a21c:	2300      	movne	r3, #0
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	461a      	mov	r2, r3
 800a222:	79fb      	ldrb	r3, [r7, #7]
 800a224:	429a      	cmp	r2, r3
 800a226:	d0a0      	beq.n	800a16a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
	...

0800a234 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b096      	sub	sp, #88	@ 0x58
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	4613      	mov	r3, r2
 800a240:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	88fa      	ldrh	r2, [r7, #6]
 800a24c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2222      	movs	r2, #34	@ 0x22
 800a25c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a266:	2b00      	cmp	r3, #0
 800a268:	d02d      	beq.n	800a2c6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a270:	4a40      	ldr	r2, [pc, #256]	@ (800a374 <UART_Start_Receive_DMA+0x140>)
 800a272:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a27a:	4a3f      	ldr	r2, [pc, #252]	@ (800a378 <UART_Start_Receive_DMA+0x144>)
 800a27c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a284:	4a3d      	ldr	r2, [pc, #244]	@ (800a37c <UART_Start_Receive_DMA+0x148>)
 800a286:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a28e:	2200      	movs	r2, #0
 800a290:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	3324      	adds	r3, #36	@ 0x24
 800a29e:	4619      	mov	r1, r3
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	88fb      	ldrh	r3, [r7, #6]
 800a2a8:	f7fb fe16 	bl	8005ed8 <HAL_DMA_Start_IT>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d009      	beq.n	800a2c6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2210      	movs	r2, #16
 800a2b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2220      	movs	r2, #32
 800a2be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e051      	b.n	800a36a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d018      	beq.n	800a300 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2d6:	e853 3f00 	ldrex	r3, [r3]
 800a2da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2e2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2ee:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a2f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2f4:	e841 2300 	strex	r3, r2, [r1]
 800a2f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a2fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1e6      	bne.n	800a2ce <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3308      	adds	r3, #8
 800a306:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30a:	e853 3f00 	ldrex	r3, [r3]
 800a30e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a312:	f043 0301 	orr.w	r3, r3, #1
 800a316:	653b      	str	r3, [r7, #80]	@ 0x50
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	3308      	adds	r3, #8
 800a31e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a320:	637a      	str	r2, [r7, #52]	@ 0x34
 800a322:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a324:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a326:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a328:	e841 2300 	strex	r3, r2, [r1]
 800a32c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1e5      	bne.n	800a300 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	3308      	adds	r3, #8
 800a33a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	e853 3f00 	ldrex	r3, [r3]
 800a342:	613b      	str	r3, [r7, #16]
   return(result);
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a34a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3308      	adds	r3, #8
 800a352:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a354:	623a      	str	r2, [r7, #32]
 800a356:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a358:	69f9      	ldr	r1, [r7, #28]
 800a35a:	6a3a      	ldr	r2, [r7, #32]
 800a35c:	e841 2300 	strex	r3, r2, [r1]
 800a360:	61bb      	str	r3, [r7, #24]
   return(result);
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1e5      	bne.n	800a334 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3758      	adds	r7, #88	@ 0x58
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	0800a585 	.word	0x0800a585
 800a378:	0800a6b1 	.word	0x0800a6b1
 800a37c:	0800a6ef 	.word	0x0800a6ef

0800a380 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a380:	b480      	push	{r7}
 800a382:	b08f      	sub	sp, #60	@ 0x3c
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38e:	6a3b      	ldr	r3, [r7, #32]
 800a390:	e853 3f00 	ldrex	r3, [r3]
 800a394:	61fb      	str	r3, [r7, #28]
   return(result);
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a39c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3a8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3ae:	e841 2300 	strex	r3, r2, [r1]
 800a3b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1e6      	bne.n	800a388 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	3308      	adds	r3, #8
 800a3c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	e853 3f00 	ldrex	r3, [r3]
 800a3c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a3d0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	3308      	adds	r3, #8
 800a3d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3da:	61ba      	str	r2, [r7, #24]
 800a3dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3de:	6979      	ldr	r1, [r7, #20]
 800a3e0:	69ba      	ldr	r2, [r7, #24]
 800a3e2:	e841 2300 	strex	r3, r2, [r1]
 800a3e6:	613b      	str	r3, [r7, #16]
   return(result);
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1e5      	bne.n	800a3ba <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2220      	movs	r2, #32
 800a3f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a3f6:	bf00      	nop
 800a3f8:	373c      	adds	r7, #60	@ 0x3c
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a402:	b480      	push	{r7}
 800a404:	b095      	sub	sp, #84	@ 0x54
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a412:	e853 3f00 	ldrex	r3, [r3]
 800a416:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a41e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	461a      	mov	r2, r3
 800a426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a428:	643b      	str	r3, [r7, #64]	@ 0x40
 800a42a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a42e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a430:	e841 2300 	strex	r3, r2, [r1]
 800a434:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1e6      	bne.n	800a40a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	3308      	adds	r3, #8
 800a442:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a444:	6a3b      	ldr	r3, [r7, #32]
 800a446:	e853 3f00 	ldrex	r3, [r3]
 800a44a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a452:	f023 0301 	bic.w	r3, r3, #1
 800a456:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	3308      	adds	r3, #8
 800a45e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a460:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a462:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a464:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a468:	e841 2300 	strex	r3, r2, [r1]
 800a46c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1e3      	bne.n	800a43c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d118      	bne.n	800a4ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	e853 3f00 	ldrex	r3, [r3]
 800a488:	60bb      	str	r3, [r7, #8]
   return(result);
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	f023 0310 	bic.w	r3, r3, #16
 800a490:	647b      	str	r3, [r7, #68]	@ 0x44
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	461a      	mov	r2, r3
 800a498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a49a:	61bb      	str	r3, [r7, #24]
 800a49c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49e:	6979      	ldr	r1, [r7, #20]
 800a4a0:	69ba      	ldr	r2, [r7, #24]
 800a4a2:	e841 2300 	strex	r3, r2, [r1]
 800a4a6:	613b      	str	r3, [r7, #16]
   return(result);
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d1e6      	bne.n	800a47c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2220      	movs	r2, #32
 800a4b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a4c2:	bf00      	nop
 800a4c4:	3754      	adds	r7, #84	@ 0x54
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b090      	sub	sp, #64	@ 0x40
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4da:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f003 0320 	and.w	r3, r3, #32
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d137      	bne.n	800a55a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a4ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a4f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	3308      	adds	r3, #8
 800a4f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fc:	e853 3f00 	ldrex	r3, [r3]
 800a500:	623b      	str	r3, [r7, #32]
   return(result);
 800a502:	6a3b      	ldr	r3, [r7, #32]
 800a504:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a508:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a50a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	3308      	adds	r3, #8
 800a510:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a512:	633a      	str	r2, [r7, #48]	@ 0x30
 800a514:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a516:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a51a:	e841 2300 	strex	r3, r2, [r1]
 800a51e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1e5      	bne.n	800a4f2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	e853 3f00 	ldrex	r3, [r3]
 800a532:	60fb      	str	r3, [r7, #12]
   return(result);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a53a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a53c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	461a      	mov	r2, r3
 800a542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a544:	61fb      	str	r3, [r7, #28]
 800a546:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a548:	69b9      	ldr	r1, [r7, #24]
 800a54a:	69fa      	ldr	r2, [r7, #28]
 800a54c:	e841 2300 	strex	r3, r2, [r1]
 800a550:	617b      	str	r3, [r7, #20]
   return(result);
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d1e6      	bne.n	800a526 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a558:	e002      	b.n	800a560 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a55a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a55c:	f7ff f976 	bl	800984c <HAL_UART_TxCpltCallback>
}
 800a560:	bf00      	nop
 800a562:	3740      	adds	r7, #64	@ 0x40
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a574:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f7ff f972 	bl	8009860 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a57c:	bf00      	nop
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b09c      	sub	sp, #112	@ 0x70
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a590:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f003 0320 	and.w	r3, r3, #32
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d171      	bne.n	800a684 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a5a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5b0:	e853 3f00 	ldrex	r3, [r3]
 800a5b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a5b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a5be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a5c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a5c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a5cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a5ce:	e841 2300 	strex	r3, r2, [r1]
 800a5d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a5d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1e6      	bne.n	800a5a8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	3308      	adds	r3, #8
 800a5e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e4:	e853 3f00 	ldrex	r3, [r3]
 800a5e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a5ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ec:	f023 0301 	bic.w	r3, r3, #1
 800a5f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a5f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3308      	adds	r3, #8
 800a5f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a5fa:	647a      	str	r2, [r7, #68]	@ 0x44
 800a5fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a600:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a602:	e841 2300 	strex	r3, r2, [r1]
 800a606:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1e5      	bne.n	800a5da <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a60e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3308      	adds	r3, #8
 800a614:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a618:	e853 3f00 	ldrex	r3, [r3]
 800a61c:	623b      	str	r3, [r7, #32]
   return(result);
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a624:	663b      	str	r3, [r7, #96]	@ 0x60
 800a626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	3308      	adds	r3, #8
 800a62c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a62e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a630:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a632:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a636:	e841 2300 	strex	r3, r2, [r1]
 800a63a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1e5      	bne.n	800a60e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a644:	2220      	movs	r2, #32
 800a646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a64a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a64c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d118      	bne.n	800a684 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	e853 3f00 	ldrex	r3, [r3]
 800a65e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f023 0310 	bic.w	r3, r3, #16
 800a666:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a668:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	461a      	mov	r2, r3
 800a66e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a670:	61fb      	str	r3, [r7, #28]
 800a672:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a674:	69b9      	ldr	r1, [r7, #24]
 800a676:	69fa      	ldr	r2, [r7, #28]
 800a678:	e841 2300 	strex	r3, r2, [r1]
 800a67c:	617b      	str	r3, [r7, #20]
   return(result);
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1e6      	bne.n	800a652 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a686:	2200      	movs	r2, #0
 800a688:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a68a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a68c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d107      	bne.n	800a6a2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a694:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a698:	4619      	mov	r1, r3
 800a69a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a69c:	f7ff f908 	bl	80098b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6a0:	e002      	b.n	800a6a8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a6a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a6a4:	f7ff f8e6 	bl	8009874 <HAL_UART_RxCpltCallback>
}
 800a6a8:	bf00      	nop
 800a6aa:	3770      	adds	r7, #112	@ 0x70
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d109      	bne.n	800a6e0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a6d2:	085b      	lsrs	r3, r3, #1
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f7ff f8e9 	bl	80098b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6de:	e002      	b.n	800a6e6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f7ff f8d1 	bl	8009888 <HAL_UART_RxHalfCpltCallback>
}
 800a6e6:	bf00      	nop
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b086      	sub	sp, #24
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6fa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a702:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a70a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a716:	2b80      	cmp	r3, #128	@ 0x80
 800a718:	d109      	bne.n	800a72e <UART_DMAError+0x40>
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2b21      	cmp	r3, #33	@ 0x21
 800a71e:	d106      	bne.n	800a72e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	2200      	movs	r2, #0
 800a724:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a728:	6978      	ldr	r0, [r7, #20]
 800a72a:	f7ff fe29 	bl	800a380 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a738:	2b40      	cmp	r3, #64	@ 0x40
 800a73a:	d109      	bne.n	800a750 <UART_DMAError+0x62>
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2b22      	cmp	r3, #34	@ 0x22
 800a740:	d106      	bne.n	800a750 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	2200      	movs	r2, #0
 800a746:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a74a:	6978      	ldr	r0, [r7, #20]
 800a74c:	f7ff fe59 	bl	800a402 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a756:	f043 0210 	orr.w	r2, r3, #16
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a760:	6978      	ldr	r0, [r7, #20]
 800a762:	f7ff f89b 	bl	800989c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a766:	bf00      	nop
 800a768:	3718      	adds	r7, #24
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b084      	sub	sp, #16
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a77a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f7ff f889 	bl	800989c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a78a:	bf00      	nop
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b088      	sub	sp, #32
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	e853 3f00 	ldrex	r3, [r3]
 800a7a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7ae:	61fb      	str	r3, [r7, #28]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	69fb      	ldr	r3, [r7, #28]
 800a7b8:	61bb      	str	r3, [r7, #24]
 800a7ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7bc:	6979      	ldr	r1, [r7, #20]
 800a7be:	69ba      	ldr	r2, [r7, #24]
 800a7c0:	e841 2300 	strex	r3, r2, [r1]
 800a7c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1e6      	bne.n	800a79a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2220      	movs	r2, #32
 800a7d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f7ff f836 	bl	800984c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7e0:	bf00      	nop
 800a7e2:	3720      	adds	r7, #32
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a804:	bf00      	nop
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a832:	2b01      	cmp	r3, #1
 800a834:	d101      	bne.n	800a83a <HAL_UARTEx_DisableFifoMode+0x16>
 800a836:	2302      	movs	r3, #2
 800a838:	e027      	b.n	800a88a <HAL_UARTEx_DisableFifoMode+0x66>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2201      	movs	r2, #1
 800a83e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2224      	movs	r2, #36	@ 0x24
 800a846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f022 0201 	bic.w	r2, r2, #1
 800a860:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a868:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2220      	movs	r2, #32
 800a87c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b084      	sub	sp, #16
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d101      	bne.n	800a8ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8aa:	2302      	movs	r3, #2
 800a8ac:	e02d      	b.n	800a90a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2224      	movs	r2, #36	@ 0x24
 800a8ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f022 0201 	bic.w	r2, r2, #1
 800a8d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	683a      	ldr	r2, [r7, #0]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f850 	bl	800a990 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	68fa      	ldr	r2, [r7, #12]
 800a8f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2220      	movs	r2, #32
 800a8fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b084      	sub	sp, #16
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a922:	2b01      	cmp	r3, #1
 800a924:	d101      	bne.n	800a92a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a926:	2302      	movs	r3, #2
 800a928:	e02d      	b.n	800a986 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2224      	movs	r2, #36	@ 0x24
 800a936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f022 0201 	bic.w	r2, r2, #1
 800a950:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	430a      	orrs	r2, r1
 800a964:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f812 	bl	800a990 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2220      	movs	r2, #32
 800a978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
	...

0800a990 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d108      	bne.n	800a9b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9b0:	e031      	b.n	800aa16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9b2:	2308      	movs	r3, #8
 800a9b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9b6:	2308      	movs	r3, #8
 800a9b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	0e5b      	lsrs	r3, r3, #25
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	f003 0307 	and.w	r3, r3, #7
 800a9c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	0f5b      	lsrs	r3, r3, #29
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	f003 0307 	and.w	r3, r3, #7
 800a9d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
 800a9dc:	7b3a      	ldrb	r2, [r7, #12]
 800a9de:	4911      	ldr	r1, [pc, #68]	@ (800aa24 <UARTEx_SetNbDataToProcess+0x94>)
 800a9e0:	5c8a      	ldrb	r2, [r1, r2]
 800a9e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9e6:	7b3a      	ldrb	r2, [r7, #12]
 800a9e8:	490f      	ldr	r1, [pc, #60]	@ (800aa28 <UARTEx_SetNbDataToProcess+0x98>)
 800a9ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
 800a9fa:	7b7a      	ldrb	r2, [r7, #13]
 800a9fc:	4909      	ldr	r1, [pc, #36]	@ (800aa24 <UARTEx_SetNbDataToProcess+0x94>)
 800a9fe:	5c8a      	ldrb	r2, [r1, r2]
 800aa00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa04:	7b7a      	ldrb	r2, [r7, #13]
 800aa06:	4908      	ldr	r1, [pc, #32]	@ (800aa28 <UARTEx_SetNbDataToProcess+0x98>)
 800aa08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aa16:	bf00      	nop
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	0801ede4 	.word	0x0801ede4
 800aa28:	0801edec 	.word	0x0801edec

0800aa2c <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b088      	sub	sp, #32
 800aa30:	af04      	add	r7, sp, #16
 800aa32:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800aa34:	2364      	movs	r3, #100	@ 0x64
 800aa36:	9302      	str	r3, [sp, #8]
 800aa38:	2301      	movs	r3, #1
 800aa3a:	9301      	str	r3, [sp, #4]
 800aa3c:	f107 030f 	add.w	r3, r7, #15
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	2301      	movs	r3, #1
 800aa44:	2275      	movs	r2, #117	@ 0x75
 800aa46:	21d0      	movs	r1, #208	@ 0xd0
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7fc f97f 	bl	8006d4c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800aa4e:	7bfb      	ldrb	r3, [r7, #15]
 800aa50:	2b68      	cmp	r3, #104	@ 0x68
 800aa52:	d13d      	bne.n	800aad0 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800aa54:	2300      	movs	r3, #0
 800aa56:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800aa58:	2364      	movs	r3, #100	@ 0x64
 800aa5a:	9302      	str	r3, [sp, #8]
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	9301      	str	r3, [sp, #4]
 800aa60:	f107 030e 	add.w	r3, r7, #14
 800aa64:	9300      	str	r3, [sp, #0]
 800aa66:	2301      	movs	r3, #1
 800aa68:	226b      	movs	r2, #107	@ 0x6b
 800aa6a:	21d0      	movs	r1, #208	@ 0xd0
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f7fc f859 	bl	8006b24 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800aa72:	2307      	movs	r3, #7
 800aa74:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800aa76:	2364      	movs	r3, #100	@ 0x64
 800aa78:	9302      	str	r3, [sp, #8]
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	9301      	str	r3, [sp, #4]
 800aa7e:	f107 030e 	add.w	r3, r7, #14
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	2301      	movs	r3, #1
 800aa86:	2219      	movs	r2, #25
 800aa88:	21d0      	movs	r1, #208	@ 0xd0
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7fc f84a 	bl	8006b24 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800aa90:	2300      	movs	r3, #0
 800aa92:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800aa94:	2364      	movs	r3, #100	@ 0x64
 800aa96:	9302      	str	r3, [sp, #8]
 800aa98:	2301      	movs	r3, #1
 800aa9a:	9301      	str	r3, [sp, #4]
 800aa9c:	f107 030e 	add.w	r3, r7, #14
 800aaa0:	9300      	str	r3, [sp, #0]
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	221c      	movs	r2, #28
 800aaa6:	21d0      	movs	r1, #208	@ 0xd0
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f7fc f83b 	bl	8006b24 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800aaae:	2300      	movs	r3, #0
 800aab0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800aab2:	2364      	movs	r3, #100	@ 0x64
 800aab4:	9302      	str	r3, [sp, #8]
 800aab6:	2301      	movs	r3, #1
 800aab8:	9301      	str	r3, [sp, #4]
 800aaba:	f107 030e 	add.w	r3, r7, #14
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	2301      	movs	r3, #1
 800aac2:	221b      	movs	r2, #27
 800aac4:	21d0      	movs	r1, #208	@ 0xd0
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7fc f82c 	bl	8006b24 <HAL_I2C_Mem_Write>
        return 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	e000      	b.n	800aad2 <MPU6050_Init+0xa6>
    }
    return 1;
 800aad0:	2301      	movs	r3, #1
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	0000      	movs	r0, r0
 800aadc:	0000      	movs	r0, r0
	...

0800aae0 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 800aae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aae4:	b094      	sub	sp, #80	@ 0x50
 800aae6:	af04      	add	r7, sp, #16
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800aaec:	2364      	movs	r3, #100	@ 0x64
 800aaee:	9302      	str	r3, [sp, #8]
 800aaf0:	230e      	movs	r3, #14
 800aaf2:	9301      	str	r3, [sp, #4]
 800aaf4:	f107 0308 	add.w	r3, r7, #8
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	2301      	movs	r3, #1
 800aafc:	223b      	movs	r2, #59	@ 0x3b
 800aafe:	21d0      	movs	r1, #208	@ 0xd0
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f7fc f923 	bl	8006d4c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800ab06:	7a3b      	ldrb	r3, [r7, #8]
 800ab08:	021b      	lsls	r3, r3, #8
 800ab0a:	b21a      	sxth	r2, r3
 800ab0c:	7a7b      	ldrb	r3, [r7, #9]
 800ab0e:	b21b      	sxth	r3, r3
 800ab10:	4313      	orrs	r3, r2
 800ab12:	b21a      	sxth	r2, r3
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800ab18:	7abb      	ldrb	r3, [r7, #10]
 800ab1a:	021b      	lsls	r3, r3, #8
 800ab1c:	b21a      	sxth	r2, r3
 800ab1e:	7afb      	ldrb	r3, [r7, #11]
 800ab20:	b21b      	sxth	r3, r3
 800ab22:	4313      	orrs	r3, r2
 800ab24:	b21a      	sxth	r2, r3
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800ab2a:	7b3b      	ldrb	r3, [r7, #12]
 800ab2c:	021b      	lsls	r3, r3, #8
 800ab2e:	b21a      	sxth	r2, r3
 800ab30:	7b7b      	ldrb	r3, [r7, #13]
 800ab32:	b21b      	sxth	r3, r3
 800ab34:	4313      	orrs	r3, r2
 800ab36:	b21a      	sxth	r2, r3
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800ab3c:	7bbb      	ldrb	r3, [r7, #14]
 800ab3e:	021b      	lsls	r3, r3, #8
 800ab40:	b21a      	sxth	r2, r3
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
 800ab44:	b21b      	sxth	r3, r3
 800ab46:	4313      	orrs	r3, r2
 800ab48:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800ab4a:	7c3b      	ldrb	r3, [r7, #16]
 800ab4c:	021b      	lsls	r3, r3, #8
 800ab4e:	b21a      	sxth	r2, r3
 800ab50:	7c7b      	ldrb	r3, [r7, #17]
 800ab52:	b21b      	sxth	r3, r3
 800ab54:	4313      	orrs	r3, r2
 800ab56:	b21a      	sxth	r2, r3
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800ab5c:	7cbb      	ldrb	r3, [r7, #18]
 800ab5e:	021b      	lsls	r3, r3, #8
 800ab60:	b21a      	sxth	r2, r3
 800ab62:	7cfb      	ldrb	r3, [r7, #19]
 800ab64:	b21b      	sxth	r3, r3
 800ab66:	4313      	orrs	r3, r2
 800ab68:	b21a      	sxth	r2, r3
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800ab6e:	7d3b      	ldrb	r3, [r7, #20]
 800ab70:	021b      	lsls	r3, r3, #8
 800ab72:	b21a      	sxth	r2, r3
 800ab74:	7d7b      	ldrb	r3, [r7, #21]
 800ab76:	b21b      	sxth	r3, r3
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	b21a      	sxth	r2, r3
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7f5 fd04 	bl	8000594 <__aeabi_i2d>
 800ab8c:	f04f 0200 	mov.w	r2, #0
 800ab90:	4bbd      	ldr	r3, [pc, #756]	@ (800ae88 <MPU6050_Read_All+0x3a8>)
 800ab92:	f7f5 fe93 	bl	80008bc <__aeabi_ddiv>
 800ab96:	4602      	mov	r2, r0
 800ab98:	460b      	mov	r3, r1
 800ab9a:	6839      	ldr	r1, [r7, #0]
 800ab9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7f5 fcf4 	bl	8000594 <__aeabi_i2d>
 800abac:	f04f 0200 	mov.w	r2, #0
 800abb0:	4bb5      	ldr	r3, [pc, #724]	@ (800ae88 <MPU6050_Read_All+0x3a8>)
 800abb2:	f7f5 fe83 	bl	80008bc <__aeabi_ddiv>
 800abb6:	4602      	mov	r2, r0
 800abb8:	460b      	mov	r3, r1
 800abba:	6839      	ldr	r1, [r7, #0]
 800abbc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7f5 fce4 	bl	8000594 <__aeabi_i2d>
 800abcc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ae70 <MPU6050_Read_All+0x390>)
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	f7f5 fe73 	bl	80008bc <__aeabi_ddiv>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	6839      	ldr	r1, [r7, #0]
 800abdc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 800abe0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800abe4:	ee07 3a90 	vmov	s15, r3
 800abe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800abec:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 800ae8c <MPU6050_Read_All+0x3ac>
 800abf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800abf4:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 800ae90 <MPU6050_Read_All+0x3b0>
 800abf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7f5 fcc3 	bl	8000594 <__aeabi_i2d>
 800ac0e:	a39a      	add	r3, pc, #616	@ (adr r3, 800ae78 <MPU6050_Read_All+0x398>)
 800ac10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac14:	f7f5 fe52 	bl	80008bc <__aeabi_ddiv>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	6839      	ldr	r1, [r7, #0]
 800ac1e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7f5 fcb3 	bl	8000594 <__aeabi_i2d>
 800ac2e:	a392      	add	r3, pc, #584	@ (adr r3, 800ae78 <MPU6050_Read_All+0x398>)
 800ac30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac34:	f7f5 fe42 	bl	80008bc <__aeabi_ddiv>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	6839      	ldr	r1, [r7, #0]
 800ac3e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7f5 fca3 	bl	8000594 <__aeabi_i2d>
 800ac4e:	a38a      	add	r3, pc, #552	@ (adr r3, 800ae78 <MPU6050_Read_All+0x398>)
 800ac50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac54:	f7f5 fe32 	bl	80008bc <__aeabi_ddiv>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	6839      	ldr	r1, [r7, #0]
 800ac5e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800ac62:	f7f9 f86f 	bl	8003d44 <HAL_GetTick>
 800ac66:	4602      	mov	r2, r0
 800ac68:	4b8a      	ldr	r3, [pc, #552]	@ (800ae94 <MPU6050_Read_All+0x3b4>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7f5 fc80 	bl	8000574 <__aeabi_ui2d>
 800ac74:	f04f 0200 	mov.w	r2, #0
 800ac78:	4b87      	ldr	r3, [pc, #540]	@ (800ae98 <MPU6050_Read_All+0x3b8>)
 800ac7a:	f7f5 fe1f 	bl	80008bc <__aeabi_ddiv>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 800ac86:	f7f9 f85d 	bl	8003d44 <HAL_GetTick>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	4a81      	ldr	r2, [pc, #516]	@ (800ae94 <MPU6050_Read_All+0x3b4>)
 800ac8e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac96:	461a      	mov	r2, r3
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac9e:	fb03 f202 	mul.w	r2, r3, r2
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800aca8:	4619      	mov	r1, r3
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800acb0:	fb01 f303 	mul.w	r3, r1, r3
 800acb4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7f5 fc6c 	bl	8000594 <__aeabi_i2d>
 800acbc:	4602      	mov	r2, r0
 800acbe:	460b      	mov	r3, r1
 800acc0:	ec43 2b10 	vmov	d0, r2, r3
 800acc4:	f013 fc38 	bl	801e538 <sqrt>
 800acc8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 800accc:	f04f 0200 	mov.w	r2, #0
 800acd0:	f04f 0300 	mov.w	r3, #0
 800acd4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800acd8:	f7f5 ff2e 	bl	8000b38 <__aeabi_dcmpeq>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d11f      	bne.n	800ad22 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ace8:	4618      	mov	r0, r3
 800acea:	f7f5 fc53 	bl	8000594 <__aeabi_i2d>
 800acee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800acf2:	f7f5 fde3 	bl	80008bc <__aeabi_ddiv>
 800acf6:	4602      	mov	r2, r0
 800acf8:	460b      	mov	r3, r1
 800acfa:	ec43 2b17 	vmov	d7, r2, r3
 800acfe:	eeb0 0a47 	vmov.f32	s0, s14
 800ad02:	eef0 0a67 	vmov.f32	s1, s15
 800ad06:	f013 fc43 	bl	801e590 <atan>
 800ad0a:	ec51 0b10 	vmov	r0, r1, d0
 800ad0e:	a35c      	add	r3, pc, #368	@ (adr r3, 800ae80 <MPU6050_Read_All+0x3a0>)
 800ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad14:	f7f5 fca8 	bl	8000668 <__aeabi_dmul>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 800ad20:	e005      	b.n	800ad2e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 800ad22:	f04f 0200 	mov.w	r2, #0
 800ad26:	f04f 0300 	mov.w	r3, #0
 800ad2a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad34:	425b      	negs	r3, r3
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7f5 fc2c 	bl	8000594 <__aeabi_i2d>
 800ad3c:	4682      	mov	sl, r0
 800ad3e:	468b      	mov	fp, r1
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7f5 fc24 	bl	8000594 <__aeabi_i2d>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	ec43 2b11 	vmov	d1, r2, r3
 800ad54:	ec4b ab10 	vmov	d0, sl, fp
 800ad58:	f013 fbec 	bl	801e534 <atan2>
 800ad5c:	ec51 0b10 	vmov	r0, r1, d0
 800ad60:	a347      	add	r3, pc, #284	@ (adr r3, 800ae80 <MPU6050_Read_All+0x3a0>)
 800ad62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad66:	f7f5 fc7f 	bl	8000668 <__aeabi_dmul>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800ad72:	f04f 0200 	mov.w	r2, #0
 800ad76:	4b49      	ldr	r3, [pc, #292]	@ (800ae9c <MPU6050_Read_All+0x3bc>)
 800ad78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ad7c:	f7f5 fee6 	bl	8000b4c <__aeabi_dcmplt>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00a      	beq.n	800ad9c <MPU6050_Read_All+0x2bc>
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800ad8c:	f04f 0200 	mov.w	r2, #0
 800ad90:	4b43      	ldr	r3, [pc, #268]	@ (800aea0 <MPU6050_Read_All+0x3c0>)
 800ad92:	f7f5 fef9 	bl	8000b88 <__aeabi_dcmpgt>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d114      	bne.n	800adc6 <MPU6050_Read_All+0x2e6>
 800ad9c:	f04f 0200 	mov.w	r2, #0
 800ada0:	4b3f      	ldr	r3, [pc, #252]	@ (800aea0 <MPU6050_Read_All+0x3c0>)
 800ada2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ada6:	f7f5 feef 	bl	8000b88 <__aeabi_dcmpgt>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d015      	beq.n	800addc <MPU6050_Read_All+0x2fc>
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800adb6:	f04f 0200 	mov.w	r2, #0
 800adba:	4b38      	ldr	r3, [pc, #224]	@ (800ae9c <MPU6050_Read_All+0x3bc>)
 800adbc:	f7f5 fec6 	bl	8000b4c <__aeabi_dcmplt>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00a      	beq.n	800addc <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 800adc6:	4937      	ldr	r1, [pc, #220]	@ (800aea4 <MPU6050_Read_All+0x3c4>)
 800adc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800adcc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800add6:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800adda:	e014      	b.n	800ae06 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800ade2:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800ade6:	eeb0 1a47 	vmov.f32	s2, s14
 800adea:	eef0 1a67 	vmov.f32	s3, s15
 800adee:	ed97 0b06 	vldr	d0, [r7, #24]
 800adf2:	482c      	ldr	r0, [pc, #176]	@ (800aea4 <MPU6050_Read_All+0x3c4>)
 800adf4:	f000 f85a 	bl	800aeac <Kalman_getAngle>
 800adf8:	eeb0 7a40 	vmov.f32	s14, s0
 800adfc:	eef0 7a60 	vmov.f32	s15, s1
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800ae0c:	4690      	mov	r8, r2
 800ae0e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800ae12:	f04f 0200 	mov.w	r2, #0
 800ae16:	4b22      	ldr	r3, [pc, #136]	@ (800aea0 <MPU6050_Read_All+0x3c0>)
 800ae18:	4640      	mov	r0, r8
 800ae1a:	4649      	mov	r1, r9
 800ae1c:	f7f5 feb4 	bl	8000b88 <__aeabi_dcmpgt>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d008      	beq.n	800ae38 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800ae2c:	4614      	mov	r4, r2
 800ae2e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800ae3e:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800ae42:	eeb0 1a47 	vmov.f32	s2, s14
 800ae46:	eef0 1a67 	vmov.f32	s3, s15
 800ae4a:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 800ae4e:	4816      	ldr	r0, [pc, #88]	@ (800aea8 <MPU6050_Read_All+0x3c8>)
 800ae50:	f000 f82c 	bl	800aeac <Kalman_getAngle>
 800ae54:	eeb0 7a40 	vmov.f32	s14, s0
 800ae58:	eef0 7a60 	vmov.f32	s15, s1
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 800ae62:	bf00      	nop
 800ae64:	3740      	adds	r7, #64	@ 0x40
 800ae66:	46bd      	mov	sp, r7
 800ae68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae6c:	f3af 8000 	nop.w
 800ae70:	00000000 	.word	0x00000000
 800ae74:	40cc2900 	.word	0x40cc2900
 800ae78:	00000000 	.word	0x00000000
 800ae7c:	40606000 	.word	0x40606000
 800ae80:	1a63c1f8 	.word	0x1a63c1f8
 800ae84:	404ca5dc 	.word	0x404ca5dc
 800ae88:	40d00000 	.word	0x40d00000
 800ae8c:	43aa0000 	.word	0x43aa0000
 800ae90:	42121eb8 	.word	0x42121eb8
 800ae94:	20005a14 	.word	0x20005a14
 800ae98:	408f4000 	.word	0x408f4000
 800ae9c:	c0568000 	.word	0xc0568000
 800aea0:	40568000 	.word	0x40568000
 800aea4:	20000058 	.word	0x20000058
 800aea8:	20000010 	.word	0x20000010

0800aeac <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800aeac:	b5b0      	push	{r4, r5, r7, lr}
 800aeae:	b096      	sub	sp, #88	@ 0x58
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	61f8      	str	r0, [r7, #28]
 800aeb4:	ed87 0b04 	vstr	d0, [r7, #16]
 800aeb8:	ed87 1b02 	vstr	d1, [r7, #8]
 800aebc:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aec6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aeca:	f7f5 fa15 	bl	80002f8 <__aeabi_dsub>
 800aece:	4602      	mov	r2, r0
 800aed0:	460b      	mov	r3, r1
 800aed2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800aedc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800aee0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aee4:	f7f5 fbc0 	bl	8000668 <__aeabi_dmul>
 800aee8:	4602      	mov	r2, r0
 800aeea:	460b      	mov	r3, r1
 800aeec:	4620      	mov	r0, r4
 800aeee:	4629      	mov	r1, r5
 800aef0:	f7f5 fa04 	bl	80002fc <__adddf3>
 800aef4:	4602      	mov	r2, r0
 800aef6:	460b      	mov	r3, r1
 800aef8:	69f9      	ldr	r1, [r7, #28]
 800aefa:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800af0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af0e:	f7f5 fbab 	bl	8000668 <__aeabi_dmul>
 800af12:	4602      	mov	r2, r0
 800af14:	460b      	mov	r3, r1
 800af16:	4610      	mov	r0, r2
 800af18:	4619      	mov	r1, r3
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800af20:	f7f5 f9ea 	bl	80002f8 <__aeabi_dsub>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	4610      	mov	r0, r2
 800af2a:	4619      	mov	r1, r3
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800af32:	f7f5 f9e1 	bl	80002f8 <__aeabi_dsub>
 800af36:	4602      	mov	r2, r0
 800af38:	460b      	mov	r3, r1
 800af3a:	4610      	mov	r0, r2
 800af3c:	4619      	mov	r1, r3
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af44:	f7f5 f9da 	bl	80002fc <__adddf3>
 800af48:	4602      	mov	r2, r0
 800af4a:	460b      	mov	r3, r1
 800af4c:	4610      	mov	r0, r2
 800af4e:	4619      	mov	r1, r3
 800af50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af54:	f7f5 fb88 	bl	8000668 <__aeabi_dmul>
 800af58:	4602      	mov	r2, r0
 800af5a:	460b      	mov	r3, r1
 800af5c:	4620      	mov	r0, r4
 800af5e:	4629      	mov	r1, r5
 800af60:	f7f5 f9cc 	bl	80002fc <__adddf3>
 800af64:	4602      	mov	r2, r0
 800af66:	460b      	mov	r3, r1
 800af68:	69f9      	ldr	r1, [r7, #28]
 800af6a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800af7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af7e:	f7f5 fb73 	bl	8000668 <__aeabi_dmul>
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	4620      	mov	r0, r4
 800af88:	4629      	mov	r1, r5
 800af8a:	f7f5 f9b5 	bl	80002f8 <__aeabi_dsub>
 800af8e:	4602      	mov	r2, r0
 800af90:	460b      	mov	r3, r1
 800af92:	69f9      	ldr	r1, [r7, #28]
 800af94:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800afa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afa8:	f7f5 fb5e 	bl	8000668 <__aeabi_dmul>
 800afac:	4602      	mov	r2, r0
 800afae:	460b      	mov	r3, r1
 800afb0:	4620      	mov	r0, r4
 800afb2:	4629      	mov	r1, r5
 800afb4:	f7f5 f9a0 	bl	80002f8 <__aeabi_dsub>
 800afb8:	4602      	mov	r2, r0
 800afba:	460b      	mov	r3, r1
 800afbc:	69f9      	ldr	r1, [r7, #28]
 800afbe:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 800afc8:	69fb      	ldr	r3, [r7, #28]
 800afca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800afce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afd2:	f7f5 fb49 	bl	8000668 <__aeabi_dmul>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	4620      	mov	r0, r4
 800afdc:	4629      	mov	r1, r5
 800afde:	f7f5 f98d 	bl	80002fc <__adddf3>
 800afe2:	4602      	mov	r2, r0
 800afe4:	460b      	mov	r3, r1
 800afe6:	69f9      	ldr	r1, [r7, #28]
 800afe8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800aff8:	f7f5 f980 	bl	80002fc <__adddf3>
 800affc:	4602      	mov	r2, r0
 800affe:	460b      	mov	r3, r1
 800b000:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800b00a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b00e:	f7f5 fc55 	bl	80008bc <__aeabi_ddiv>
 800b012:	4602      	mov	r2, r0
 800b014:	460b      	mov	r3, r1
 800b016:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800b020:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b024:	f7f5 fc4a 	bl	80008bc <__aeabi_ddiv>
 800b028:	4602      	mov	r2, r0
 800b02a:	460b      	mov	r3, r1
 800b02c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b036:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b03a:	f7f5 f95d 	bl	80002f8 <__aeabi_dsub>
 800b03e:	4602      	mov	r2, r0
 800b040:	460b      	mov	r3, r1
 800b042:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800b04c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b050:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b054:	f7f5 fb08 	bl	8000668 <__aeabi_dmul>
 800b058:	4602      	mov	r2, r0
 800b05a:	460b      	mov	r3, r1
 800b05c:	4620      	mov	r0, r4
 800b05e:	4629      	mov	r1, r5
 800b060:	f7f5 f94c 	bl	80002fc <__adddf3>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	69f9      	ldr	r1, [r7, #28]
 800b06a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800b074:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b078:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b07c:	f7f5 faf4 	bl	8000668 <__aeabi_dmul>
 800b080:	4602      	mov	r2, r0
 800b082:	460b      	mov	r3, r1
 800b084:	4620      	mov	r0, r4
 800b086:	4629      	mov	r1, r5
 800b088:	f7f5 f938 	bl	80002fc <__adddf3>
 800b08c:	4602      	mov	r2, r0
 800b08e:	460b      	mov	r3, r1
 800b090:	69f9      	ldr	r1, [r7, #28]
 800b092:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800b09c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800b0a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800b0b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b0b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b0b8:	f7f5 fad6 	bl	8000668 <__aeabi_dmul>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	460b      	mov	r3, r1
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	4629      	mov	r1, r5
 800b0c4:	f7f5 f918 	bl	80002f8 <__aeabi_dsub>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	69f9      	ldr	r1, [r7, #28]
 800b0ce:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800b0d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b0dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800b0e0:	f7f5 fac2 	bl	8000668 <__aeabi_dmul>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	4629      	mov	r1, r5
 800b0ec:	f7f5 f904 	bl	80002f8 <__aeabi_dsub>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	69f9      	ldr	r1, [r7, #28]
 800b0f6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800b100:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b104:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b108:	f7f5 faae 	bl	8000668 <__aeabi_dmul>
 800b10c:	4602      	mov	r2, r0
 800b10e:	460b      	mov	r3, r1
 800b110:	4620      	mov	r0, r4
 800b112:	4629      	mov	r1, r5
 800b114:	f7f5 f8f0 	bl	80002f8 <__aeabi_dsub>
 800b118:	4602      	mov	r2, r0
 800b11a:	460b      	mov	r3, r1
 800b11c:	69f9      	ldr	r1, [r7, #28]
 800b11e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 800b128:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b12c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800b130:	f7f5 fa9a 	bl	8000668 <__aeabi_dmul>
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	4620      	mov	r0, r4
 800b13a:	4629      	mov	r1, r5
 800b13c:	f7f5 f8dc 	bl	80002f8 <__aeabi_dsub>
 800b140:	4602      	mov	r2, r0
 800b142:	460b      	mov	r3, r1
 800b144:	69f9      	ldr	r1, [r7, #28]
 800b146:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b150:	ec43 2b17 	vmov	d7, r2, r3
};
 800b154:	eeb0 0a47 	vmov.f32	s0, s14
 800b158:	eef0 0a67 	vmov.f32	s1, s15
 800b15c:	3758      	adds	r7, #88	@ 0x58
 800b15e:	46bd      	mov	sp, r7
 800b160:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b164 <__NVIC_SetPriority>:
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	4603      	mov	r3, r0
 800b16c:	6039      	str	r1, [r7, #0]
 800b16e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b174:	2b00      	cmp	r3, #0
 800b176:	db0a      	blt.n	800b18e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	b2da      	uxtb	r2, r3
 800b17c:	490c      	ldr	r1, [pc, #48]	@ (800b1b0 <__NVIC_SetPriority+0x4c>)
 800b17e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b182:	0112      	lsls	r2, r2, #4
 800b184:	b2d2      	uxtb	r2, r2
 800b186:	440b      	add	r3, r1
 800b188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b18c:	e00a      	b.n	800b1a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	b2da      	uxtb	r2, r3
 800b192:	4908      	ldr	r1, [pc, #32]	@ (800b1b4 <__NVIC_SetPriority+0x50>)
 800b194:	79fb      	ldrb	r3, [r7, #7]
 800b196:	f003 030f 	and.w	r3, r3, #15
 800b19a:	3b04      	subs	r3, #4
 800b19c:	0112      	lsls	r2, r2, #4
 800b19e:	b2d2      	uxtb	r2, r2
 800b1a0:	440b      	add	r3, r1
 800b1a2:	761a      	strb	r2, [r3, #24]
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr
 800b1b0:	e000e100 	.word	0xe000e100
 800b1b4:	e000ed00 	.word	0xe000ed00

0800b1b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b1bc:	4b05      	ldr	r3, [pc, #20]	@ (800b1d4 <SysTick_Handler+0x1c>)
 800b1be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b1c0:	f001 fd40 	bl	800cc44 <xTaskGetSchedulerState>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d001      	beq.n	800b1ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b1ca:	f002 fb35 	bl	800d838 <xPortSysTickHandler>
  }
}
 800b1ce:	bf00      	nop
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	e000e010 	.word	0xe000e010

0800b1d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b1dc:	2100      	movs	r1, #0
 800b1de:	f06f 0004 	mvn.w	r0, #4
 800b1e2:	f7ff ffbf 	bl	800b164 <__NVIC_SetPriority>
#endif
}
 800b1e6:	bf00      	nop
 800b1e8:	bd80      	pop	{r7, pc}
	...

0800b1ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1f2:	f3ef 8305 	mrs	r3, IPSR
 800b1f6:	603b      	str	r3, [r7, #0]
  return(result);
 800b1f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d003      	beq.n	800b206 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b1fe:	f06f 0305 	mvn.w	r3, #5
 800b202:	607b      	str	r3, [r7, #4]
 800b204:	e00c      	b.n	800b220 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b206:	4b0a      	ldr	r3, [pc, #40]	@ (800b230 <osKernelInitialize+0x44>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d105      	bne.n	800b21a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b20e:	4b08      	ldr	r3, [pc, #32]	@ (800b230 <osKernelInitialize+0x44>)
 800b210:	2201      	movs	r2, #1
 800b212:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b214:	2300      	movs	r3, #0
 800b216:	607b      	str	r3, [r7, #4]
 800b218:	e002      	b.n	800b220 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b21a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b21e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b220:	687b      	ldr	r3, [r7, #4]
}
 800b222:	4618      	mov	r0, r3
 800b224:	370c      	adds	r7, #12
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	20005a18 	.word	0x20005a18

0800b234 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b23a:	f3ef 8305 	mrs	r3, IPSR
 800b23e:	603b      	str	r3, [r7, #0]
  return(result);
 800b240:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b242:	2b00      	cmp	r3, #0
 800b244:	d003      	beq.n	800b24e <osKernelStart+0x1a>
    stat = osErrorISR;
 800b246:	f06f 0305 	mvn.w	r3, #5
 800b24a:	607b      	str	r3, [r7, #4]
 800b24c:	e010      	b.n	800b270 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b24e:	4b0b      	ldr	r3, [pc, #44]	@ (800b27c <osKernelStart+0x48>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b01      	cmp	r3, #1
 800b254:	d109      	bne.n	800b26a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b256:	f7ff ffbf 	bl	800b1d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b25a:	4b08      	ldr	r3, [pc, #32]	@ (800b27c <osKernelStart+0x48>)
 800b25c:	2202      	movs	r2, #2
 800b25e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b260:	f001 f87a 	bl	800c358 <vTaskStartScheduler>
      stat = osOK;
 800b264:	2300      	movs	r3, #0
 800b266:	607b      	str	r3, [r7, #4]
 800b268:	e002      	b.n	800b270 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b26a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b26e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b270:	687b      	ldr	r3, [r7, #4]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3708      	adds	r7, #8
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	20005a18 	.word	0x20005a18

0800b280 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b280:	b580      	push	{r7, lr}
 800b282:	b08e      	sub	sp, #56	@ 0x38
 800b284:	af04      	add	r7, sp, #16
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b28c:	2300      	movs	r3, #0
 800b28e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b290:	f3ef 8305 	mrs	r3, IPSR
 800b294:	617b      	str	r3, [r7, #20]
  return(result);
 800b296:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d17e      	bne.n	800b39a <osThreadNew+0x11a>
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d07b      	beq.n	800b39a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b2a2:	2380      	movs	r3, #128	@ 0x80
 800b2a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b2a6:	2318      	movs	r3, #24
 800b2a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b2ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b2b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d045      	beq.n	800b346 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d002      	beq.n	800b2c8 <osThreadNew+0x48>
        name = attr->name;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	699b      	ldr	r3, [r3, #24]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d002      	beq.n	800b2d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	699b      	ldr	r3, [r3, #24]
 800b2d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d008      	beq.n	800b2ee <osThreadNew+0x6e>
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	2b38      	cmp	r3, #56	@ 0x38
 800b2e0:	d805      	bhi.n	800b2ee <osThreadNew+0x6e>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	f003 0301 	and.w	r3, r3, #1
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d001      	beq.n	800b2f2 <osThreadNew+0x72>
        return (NULL);
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	e054      	b.n	800b39c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	695b      	ldr	r3, [r3, #20]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d003      	beq.n	800b302 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	695b      	ldr	r3, [r3, #20]
 800b2fe:	089b      	lsrs	r3, r3, #2
 800b300:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00e      	beq.n	800b328 <osThreadNew+0xa8>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	2b5b      	cmp	r3, #91	@ 0x5b
 800b310:	d90a      	bls.n	800b328 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b316:	2b00      	cmp	r3, #0
 800b318:	d006      	beq.n	800b328 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	695b      	ldr	r3, [r3, #20]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d002      	beq.n	800b328 <osThreadNew+0xa8>
        mem = 1;
 800b322:	2301      	movs	r3, #1
 800b324:	61bb      	str	r3, [r7, #24]
 800b326:	e010      	b.n	800b34a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10c      	bne.n	800b34a <osThreadNew+0xca>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d108      	bne.n	800b34a <osThreadNew+0xca>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	691b      	ldr	r3, [r3, #16]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d104      	bne.n	800b34a <osThreadNew+0xca>
          mem = 0;
 800b340:	2300      	movs	r3, #0
 800b342:	61bb      	str	r3, [r7, #24]
 800b344:	e001      	b.n	800b34a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b346:	2300      	movs	r3, #0
 800b348:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d110      	bne.n	800b372 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b358:	9202      	str	r2, [sp, #8]
 800b35a:	9301      	str	r3, [sp, #4]
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	6a3a      	ldr	r2, [r7, #32]
 800b364:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f000 fe1a 	bl	800bfa0 <xTaskCreateStatic>
 800b36c:	4603      	mov	r3, r0
 800b36e:	613b      	str	r3, [r7, #16]
 800b370:	e013      	b.n	800b39a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d110      	bne.n	800b39a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b378:	6a3b      	ldr	r3, [r7, #32]
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	f107 0310 	add.w	r3, r7, #16
 800b380:	9301      	str	r3, [sp, #4]
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	9300      	str	r3, [sp, #0]
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f000 fe68 	bl	800c060 <xTaskCreate>
 800b390:	4603      	mov	r3, r0
 800b392:	2b01      	cmp	r3, #1
 800b394:	d001      	beq.n	800b39a <osThreadNew+0x11a>
            hTask = NULL;
 800b396:	2300      	movs	r3, #0
 800b398:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b39a:	693b      	ldr	r3, [r7, #16]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3728      	adds	r7, #40	@ 0x28
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3ac:	f3ef 8305 	mrs	r3, IPSR
 800b3b0:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d003      	beq.n	800b3c0 <osDelay+0x1c>
    stat = osErrorISR;
 800b3b8:	f06f 0305 	mvn.w	r3, #5
 800b3bc:	60fb      	str	r3, [r7, #12]
 800b3be:	e007      	b.n	800b3d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d002      	beq.n	800b3d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 ff8e 	bl	800c2ec <vTaskDelay>
    }
  }

  return (stat);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
	...

0800b3dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	4a07      	ldr	r2, [pc, #28]	@ (800b408 <vApplicationGetIdleTaskMemory+0x2c>)
 800b3ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	4a06      	ldr	r2, [pc, #24]	@ (800b40c <vApplicationGetIdleTaskMemory+0x30>)
 800b3f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2280      	movs	r2, #128	@ 0x80
 800b3f8:	601a      	str	r2, [r3, #0]
}
 800b3fa:	bf00      	nop
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	20005a1c 	.word	0x20005a1c
 800b40c:	20005a78 	.word	0x20005a78

0800b410 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b410:	b480      	push	{r7}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	4a07      	ldr	r2, [pc, #28]	@ (800b43c <vApplicationGetTimerTaskMemory+0x2c>)
 800b420:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	4a06      	ldr	r2, [pc, #24]	@ (800b440 <vApplicationGetTimerTaskMemory+0x30>)
 800b426:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b42e:	601a      	str	r2, [r3, #0]
}
 800b430:	bf00      	nop
 800b432:	3714      	adds	r7, #20
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr
 800b43c:	20005c78 	.word	0x20005c78
 800b440:	20005cd4 	.word	0x20005cd4

0800b444 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f103 0208 	add.w	r2, r3, #8
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b45c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f103 0208 	add.w	r2, r3, #8
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f103 0208 	add.w	r2, r3, #8
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b478:	bf00      	nop
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b492:	bf00      	nop
 800b494:	370c      	adds	r7, #12
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr

0800b49e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b49e:	b480      	push	{r7}
 800b4a0:	b085      	sub	sp, #20
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
 800b4a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	689a      	ldr	r2, [r3, #8]
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	683a      	ldr	r2, [r7, #0]
 800b4c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	683a      	ldr	r2, [r7, #0]
 800b4c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	1c5a      	adds	r2, r3, #1
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	601a      	str	r2, [r3, #0]
}
 800b4da:	bf00      	nop
 800b4dc:	3714      	adds	r7, #20
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr

0800b4e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4e6:	b480      	push	{r7}
 800b4e8:	b085      	sub	sp, #20
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
 800b4ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4fc:	d103      	bne.n	800b506 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	691b      	ldr	r3, [r3, #16]
 800b502:	60fb      	str	r3, [r7, #12]
 800b504:	e00c      	b.n	800b520 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	3308      	adds	r3, #8
 800b50a:	60fb      	str	r3, [r7, #12]
 800b50c:	e002      	b.n	800b514 <vListInsert+0x2e>
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	60fb      	str	r3, [r7, #12]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68ba      	ldr	r2, [r7, #8]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d2f6      	bcs.n	800b50e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	685a      	ldr	r2, [r3, #4]
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	683a      	ldr	r2, [r7, #0]
 800b52e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	683a      	ldr	r2, [r7, #0]
 800b53a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	1c5a      	adds	r2, r3, #1
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	601a      	str	r2, [r3, #0]
}
 800b54c:	bf00      	nop
 800b54e:	3714      	adds	r7, #20
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	6892      	ldr	r2, [r2, #8]
 800b56e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	6852      	ldr	r2, [r2, #4]
 800b578:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	429a      	cmp	r2, r3
 800b582:	d103      	bne.n	800b58c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	689a      	ldr	r2, [r3, #8]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	1e5a      	subs	r2, r3, #1
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3714      	adds	r7, #20
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10b      	bne.n	800b5d8 <xQueueGenericReset+0x2c>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	60bb      	str	r3, [r7, #8]
}
 800b5d2:	bf00      	nop
 800b5d4:	bf00      	nop
 800b5d6:	e7fd      	b.n	800b5d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b5d8:	f002 f89e 	bl	800d718 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5e4:	68f9      	ldr	r1, [r7, #12]
 800b5e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b5e8:	fb01 f303 	mul.w	r3, r1, r3
 800b5ec:	441a      	add	r2, r3
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b608:	3b01      	subs	r3, #1
 800b60a:	68f9      	ldr	r1, [r7, #12]
 800b60c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b60e:	fb01 f303 	mul.w	r3, r1, r3
 800b612:	441a      	add	r2, r3
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	22ff      	movs	r2, #255	@ 0xff
 800b61c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	22ff      	movs	r2, #255	@ 0xff
 800b624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d114      	bne.n	800b658 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	691b      	ldr	r3, [r3, #16]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d01a      	beq.n	800b66c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	3310      	adds	r3, #16
 800b63a:	4618      	mov	r0, r3
 800b63c:	f001 f91a 	bl	800c874 <xTaskRemoveFromEventList>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d012      	beq.n	800b66c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b646:	4b0d      	ldr	r3, [pc, #52]	@ (800b67c <xQueueGenericReset+0xd0>)
 800b648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b64c:	601a      	str	r2, [r3, #0]
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	e009      	b.n	800b66c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	3310      	adds	r3, #16
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7ff fef1 	bl	800b444 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	3324      	adds	r3, #36	@ 0x24
 800b666:	4618      	mov	r0, r3
 800b668:	f7ff feec 	bl	800b444 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b66c:	f002 f886 	bl	800d77c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b670:	2301      	movs	r3, #1
}
 800b672:	4618      	mov	r0, r3
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	e000ed04 	.word	0xe000ed04

0800b680 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b680:	b580      	push	{r7, lr}
 800b682:	b08e      	sub	sp, #56	@ 0x38
 800b684:	af02      	add	r7, sp, #8
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	607a      	str	r2, [r7, #4]
 800b68c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10b      	bne.n	800b6ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b6a6:	bf00      	nop
 800b6a8:	bf00      	nop
 800b6aa:	e7fd      	b.n	800b6a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10b      	bne.n	800b6ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b6c4:	bf00      	nop
 800b6c6:	bf00      	nop
 800b6c8:	e7fd      	b.n	800b6c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d002      	beq.n	800b6d6 <xQueueGenericCreateStatic+0x56>
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d001      	beq.n	800b6da <xQueueGenericCreateStatic+0x5a>
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e000      	b.n	800b6dc <xQueueGenericCreateStatic+0x5c>
 800b6da:	2300      	movs	r3, #0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10b      	bne.n	800b6f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e4:	f383 8811 	msr	BASEPRI, r3
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	623b      	str	r3, [r7, #32]
}
 800b6f2:	bf00      	nop
 800b6f4:	bf00      	nop
 800b6f6:	e7fd      	b.n	800b6f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d102      	bne.n	800b704 <xQueueGenericCreateStatic+0x84>
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d101      	bne.n	800b708 <xQueueGenericCreateStatic+0x88>
 800b704:	2301      	movs	r3, #1
 800b706:	e000      	b.n	800b70a <xQueueGenericCreateStatic+0x8a>
 800b708:	2300      	movs	r3, #0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d10b      	bne.n	800b726 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b712:	f383 8811 	msr	BASEPRI, r3
 800b716:	f3bf 8f6f 	isb	sy
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	61fb      	str	r3, [r7, #28]
}
 800b720:	bf00      	nop
 800b722:	bf00      	nop
 800b724:	e7fd      	b.n	800b722 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b726:	2350      	movs	r3, #80	@ 0x50
 800b728:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	2b50      	cmp	r3, #80	@ 0x50
 800b72e:	d00b      	beq.n	800b748 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b734:	f383 8811 	msr	BASEPRI, r3
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	61bb      	str	r3, [r7, #24]
}
 800b742:	bf00      	nop
 800b744:	bf00      	nop
 800b746:	e7fd      	b.n	800b744 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b748:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00d      	beq.n	800b770 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b756:	2201      	movs	r2, #1
 800b758:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b75c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	4613      	mov	r3, r2
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	68b9      	ldr	r1, [r7, #8]
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f000 f805 	bl	800b77a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b772:	4618      	mov	r0, r3
 800b774:	3730      	adds	r7, #48	@ 0x30
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b084      	sub	sp, #16
 800b77e:	af00      	add	r7, sp, #0
 800b780:	60f8      	str	r0, [r7, #12]
 800b782:	60b9      	str	r1, [r7, #8]
 800b784:	607a      	str	r2, [r7, #4]
 800b786:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d103      	bne.n	800b796 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	69ba      	ldr	r2, [r7, #24]
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	e002      	b.n	800b79c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b7a8:	2101      	movs	r1, #1
 800b7aa:	69b8      	ldr	r0, [r7, #24]
 800b7ac:	f7ff fefe 	bl	800b5ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	78fa      	ldrb	r2, [r7, #3]
 800b7b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b7b8:	bf00      	nop
 800b7ba:	3710      	adds	r7, #16
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b08e      	sub	sp, #56	@ 0x38
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
 800b7cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d10b      	bne.n	800b7f4 <xQueueGenericSend+0x34>
	__asm volatile
 800b7dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e0:	f383 8811 	msr	BASEPRI, r3
 800b7e4:	f3bf 8f6f 	isb	sy
 800b7e8:	f3bf 8f4f 	dsb	sy
 800b7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b7ee:	bf00      	nop
 800b7f0:	bf00      	nop
 800b7f2:	e7fd      	b.n	800b7f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d103      	bne.n	800b802 <xQueueGenericSend+0x42>
 800b7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d101      	bne.n	800b806 <xQueueGenericSend+0x46>
 800b802:	2301      	movs	r3, #1
 800b804:	e000      	b.n	800b808 <xQueueGenericSend+0x48>
 800b806:	2300      	movs	r3, #0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10b      	bne.n	800b824 <xQueueGenericSend+0x64>
	__asm volatile
 800b80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b81e:	bf00      	nop
 800b820:	bf00      	nop
 800b822:	e7fd      	b.n	800b820 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	2b02      	cmp	r3, #2
 800b828:	d103      	bne.n	800b832 <xQueueGenericSend+0x72>
 800b82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b82c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d101      	bne.n	800b836 <xQueueGenericSend+0x76>
 800b832:	2301      	movs	r3, #1
 800b834:	e000      	b.n	800b838 <xQueueGenericSend+0x78>
 800b836:	2300      	movs	r3, #0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d10b      	bne.n	800b854 <xQueueGenericSend+0x94>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	623b      	str	r3, [r7, #32]
}
 800b84e:	bf00      	nop
 800b850:	bf00      	nop
 800b852:	e7fd      	b.n	800b850 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b854:	f001 f9f6 	bl	800cc44 <xTaskGetSchedulerState>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d102      	bne.n	800b864 <xQueueGenericSend+0xa4>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d101      	bne.n	800b868 <xQueueGenericSend+0xa8>
 800b864:	2301      	movs	r3, #1
 800b866:	e000      	b.n	800b86a <xQueueGenericSend+0xaa>
 800b868:	2300      	movs	r3, #0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d10b      	bne.n	800b886 <xQueueGenericSend+0xc6>
	__asm volatile
 800b86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	61fb      	str	r3, [r7, #28]
}
 800b880:	bf00      	nop
 800b882:	bf00      	nop
 800b884:	e7fd      	b.n	800b882 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b886:	f001 ff47 	bl	800d718 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b88c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b892:	429a      	cmp	r2, r3
 800b894:	d302      	bcc.n	800b89c <xQueueGenericSend+0xdc>
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d129      	bne.n	800b8f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b89c:	683a      	ldr	r2, [r7, #0]
 800b89e:	68b9      	ldr	r1, [r7, #8]
 800b8a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b8a2:	f000 fa0f 	bl	800bcc4 <prvCopyDataToQueue>
 800b8a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d010      	beq.n	800b8d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b2:	3324      	adds	r3, #36	@ 0x24
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f000 ffdd 	bl	800c874 <xTaskRemoveFromEventList>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d013      	beq.n	800b8e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b8c0:	4b3f      	ldr	r3, [pc, #252]	@ (800b9c0 <xQueueGenericSend+0x200>)
 800b8c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8c6:	601a      	str	r2, [r3, #0]
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	e00a      	b.n	800b8e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b8d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d007      	beq.n	800b8e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b8d8:	4b39      	ldr	r3, [pc, #228]	@ (800b9c0 <xQueueGenericSend+0x200>)
 800b8da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8de:	601a      	str	r2, [r3, #0]
 800b8e0:	f3bf 8f4f 	dsb	sy
 800b8e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b8e8:	f001 ff48 	bl	800d77c <vPortExitCritical>
				return pdPASS;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e063      	b.n	800b9b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d103      	bne.n	800b8fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b8f6:	f001 ff41 	bl	800d77c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	e05c      	b.n	800b9b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b900:	2b00      	cmp	r3, #0
 800b902:	d106      	bne.n	800b912 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b904:	f107 0314 	add.w	r3, r7, #20
 800b908:	4618      	mov	r0, r3
 800b90a:	f001 f83f 	bl	800c98c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b90e:	2301      	movs	r3, #1
 800b910:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b912:	f001 ff33 	bl	800d77c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b916:	f000 fd87 	bl	800c428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b91a:	f001 fefd 	bl	800d718 <vPortEnterCritical>
 800b91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b920:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b924:	b25b      	sxtb	r3, r3
 800b926:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b92a:	d103      	bne.n	800b934 <xQueueGenericSend+0x174>
 800b92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b92e:	2200      	movs	r2, #0
 800b930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b936:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b93a:	b25b      	sxtb	r3, r3
 800b93c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b940:	d103      	bne.n	800b94a <xQueueGenericSend+0x18a>
 800b942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b944:	2200      	movs	r2, #0
 800b946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b94a:	f001 ff17 	bl	800d77c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b94e:	1d3a      	adds	r2, r7, #4
 800b950:	f107 0314 	add.w	r3, r7, #20
 800b954:	4611      	mov	r1, r2
 800b956:	4618      	mov	r0, r3
 800b958:	f001 f82e 	bl	800c9b8 <xTaskCheckForTimeOut>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d124      	bne.n	800b9ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b962:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b964:	f000 faa6 	bl	800beb4 <prvIsQueueFull>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d018      	beq.n	800b9a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b970:	3310      	adds	r3, #16
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	4611      	mov	r1, r2
 800b976:	4618      	mov	r0, r3
 800b978:	f000 ff2a 	bl	800c7d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b97c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b97e:	f000 fa31 	bl	800bde4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b982:	f000 fd5f 	bl	800c444 <xTaskResumeAll>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f47f af7c 	bne.w	800b886 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b98e:	4b0c      	ldr	r3, [pc, #48]	@ (800b9c0 <xQueueGenericSend+0x200>)
 800b990:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b994:	601a      	str	r2, [r3, #0]
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	f3bf 8f6f 	isb	sy
 800b99e:	e772      	b.n	800b886 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b9a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b9a2:	f000 fa1f 	bl	800bde4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b9a6:	f000 fd4d 	bl	800c444 <xTaskResumeAll>
 800b9aa:	e76c      	b.n	800b886 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b9ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b9ae:	f000 fa19 	bl	800bde4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9b2:	f000 fd47 	bl	800c444 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b9b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3738      	adds	r7, #56	@ 0x38
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	e000ed04 	.word	0xe000ed04

0800b9c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b090      	sub	sp, #64	@ 0x40
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
 800b9d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d10b      	bne.n	800b9f4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b9dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b9ee:	bf00      	nop
 800b9f0:	bf00      	nop
 800b9f2:	e7fd      	b.n	800b9f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d103      	bne.n	800ba02 <xQueueGenericSendFromISR+0x3e>
 800b9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d101      	bne.n	800ba06 <xQueueGenericSendFromISR+0x42>
 800ba02:	2301      	movs	r3, #1
 800ba04:	e000      	b.n	800ba08 <xQueueGenericSendFromISR+0x44>
 800ba06:	2300      	movs	r3, #0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d10b      	bne.n	800ba24 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ba0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba10:	f383 8811 	msr	BASEPRI, r3
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	f3bf 8f4f 	dsb	sy
 800ba1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ba1e:	bf00      	nop
 800ba20:	bf00      	nop
 800ba22:	e7fd      	b.n	800ba20 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	d103      	bne.n	800ba32 <xQueueGenericSendFromISR+0x6e>
 800ba2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d101      	bne.n	800ba36 <xQueueGenericSendFromISR+0x72>
 800ba32:	2301      	movs	r3, #1
 800ba34:	e000      	b.n	800ba38 <xQueueGenericSendFromISR+0x74>
 800ba36:	2300      	movs	r3, #0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d10b      	bne.n	800ba54 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ba3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba40:	f383 8811 	msr	BASEPRI, r3
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	f3bf 8f4f 	dsb	sy
 800ba4c:	623b      	str	r3, [r7, #32]
}
 800ba4e:	bf00      	nop
 800ba50:	bf00      	nop
 800ba52:	e7fd      	b.n	800ba50 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba54:	f001 ff40 	bl	800d8d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ba58:	f3ef 8211 	mrs	r2, BASEPRI
 800ba5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	61fa      	str	r2, [r7, #28]
 800ba6e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ba70:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba72:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d302      	bcc.n	800ba86 <xQueueGenericSendFromISR+0xc2>
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d12f      	bne.n	800bae6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba94:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba96:	683a      	ldr	r2, [r7, #0]
 800ba98:	68b9      	ldr	r1, [r7, #8]
 800ba9a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ba9c:	f000 f912 	bl	800bcc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800baa0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800baa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800baa8:	d112      	bne.n	800bad0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800baaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d016      	beq.n	800bae0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab4:	3324      	adds	r3, #36	@ 0x24
 800bab6:	4618      	mov	r0, r3
 800bab8:	f000 fedc 	bl	800c874 <xTaskRemoveFromEventList>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00e      	beq.n	800bae0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d00b      	beq.n	800bae0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2201      	movs	r2, #1
 800bacc:	601a      	str	r2, [r3, #0]
 800bace:	e007      	b.n	800bae0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bad0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bad4:	3301      	adds	r3, #1
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	b25a      	sxtb	r2, r3
 800bada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800badc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bae0:	2301      	movs	r3, #1
 800bae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800bae4:	e001      	b.n	800baea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bae6:	2300      	movs	r3, #0
 800bae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800baea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800baf4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800baf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3740      	adds	r7, #64	@ 0x40
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b08c      	sub	sp, #48	@ 0x30
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bb14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d10b      	bne.n	800bb32 <xQueueReceive+0x32>
	__asm volatile
 800bb1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb1e:	f383 8811 	msr	BASEPRI, r3
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	f3bf 8f4f 	dsb	sy
 800bb2a:	623b      	str	r3, [r7, #32]
}
 800bb2c:	bf00      	nop
 800bb2e:	bf00      	nop
 800bb30:	e7fd      	b.n	800bb2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d103      	bne.n	800bb40 <xQueueReceive+0x40>
 800bb38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d101      	bne.n	800bb44 <xQueueReceive+0x44>
 800bb40:	2301      	movs	r3, #1
 800bb42:	e000      	b.n	800bb46 <xQueueReceive+0x46>
 800bb44:	2300      	movs	r3, #0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d10b      	bne.n	800bb62 <xQueueReceive+0x62>
	__asm volatile
 800bb4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb4e:	f383 8811 	msr	BASEPRI, r3
 800bb52:	f3bf 8f6f 	isb	sy
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	61fb      	str	r3, [r7, #28]
}
 800bb5c:	bf00      	nop
 800bb5e:	bf00      	nop
 800bb60:	e7fd      	b.n	800bb5e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb62:	f001 f86f 	bl	800cc44 <xTaskGetSchedulerState>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d102      	bne.n	800bb72 <xQueueReceive+0x72>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d101      	bne.n	800bb76 <xQueueReceive+0x76>
 800bb72:	2301      	movs	r3, #1
 800bb74:	e000      	b.n	800bb78 <xQueueReceive+0x78>
 800bb76:	2300      	movs	r3, #0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d10b      	bne.n	800bb94 <xQueueReceive+0x94>
	__asm volatile
 800bb7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb80:	f383 8811 	msr	BASEPRI, r3
 800bb84:	f3bf 8f6f 	isb	sy
 800bb88:	f3bf 8f4f 	dsb	sy
 800bb8c:	61bb      	str	r3, [r7, #24]
}
 800bb8e:	bf00      	nop
 800bb90:	bf00      	nop
 800bb92:	e7fd      	b.n	800bb90 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb94:	f001 fdc0 	bl	800d718 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb9c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d01f      	beq.n	800bbe4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bba4:	68b9      	ldr	r1, [r7, #8]
 800bba6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bba8:	f000 f8f6 	bl	800bd98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbae:	1e5a      	subs	r2, r3, #1
 800bbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00f      	beq.n	800bbdc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbbe:	3310      	adds	r3, #16
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f000 fe57 	bl	800c874 <xTaskRemoveFromEventList>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d007      	beq.n	800bbdc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bbcc:	4b3c      	ldr	r3, [pc, #240]	@ (800bcc0 <xQueueReceive+0x1c0>)
 800bbce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbd2:	601a      	str	r2, [r3, #0]
 800bbd4:	f3bf 8f4f 	dsb	sy
 800bbd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bbdc:	f001 fdce 	bl	800d77c <vPortExitCritical>
				return pdPASS;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e069      	b.n	800bcb8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d103      	bne.n	800bbf2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bbea:	f001 fdc7 	bl	800d77c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	e062      	b.n	800bcb8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d106      	bne.n	800bc06 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbf8:	f107 0310 	add.w	r3, r7, #16
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f000 fec5 	bl	800c98c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc02:	2301      	movs	r3, #1
 800bc04:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc06:	f001 fdb9 	bl	800d77c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc0a:	f000 fc0d 	bl	800c428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc0e:	f001 fd83 	bl	800d718 <vPortEnterCritical>
 800bc12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc18:	b25b      	sxtb	r3, r3
 800bc1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc1e:	d103      	bne.n	800bc28 <xQueueReceive+0x128>
 800bc20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc22:	2200      	movs	r2, #0
 800bc24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc2e:	b25b      	sxtb	r3, r3
 800bc30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc34:	d103      	bne.n	800bc3e <xQueueReceive+0x13e>
 800bc36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc3e:	f001 fd9d 	bl	800d77c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc42:	1d3a      	adds	r2, r7, #4
 800bc44:	f107 0310 	add.w	r3, r7, #16
 800bc48:	4611      	mov	r1, r2
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f000 feb4 	bl	800c9b8 <xTaskCheckForTimeOut>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d123      	bne.n	800bc9e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc58:	f000 f916 	bl	800be88 <prvIsQueueEmpty>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d017      	beq.n	800bc92 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc64:	3324      	adds	r3, #36	@ 0x24
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	4611      	mov	r1, r2
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f000 fdb0 	bl	800c7d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc72:	f000 f8b7 	bl	800bde4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc76:	f000 fbe5 	bl	800c444 <xTaskResumeAll>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d189      	bne.n	800bb94 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bc80:	4b0f      	ldr	r3, [pc, #60]	@ (800bcc0 <xQueueReceive+0x1c0>)
 800bc82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc86:	601a      	str	r2, [r3, #0]
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	e780      	b.n	800bb94 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bc92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc94:	f000 f8a6 	bl	800bde4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc98:	f000 fbd4 	bl	800c444 <xTaskResumeAll>
 800bc9c:	e77a      	b.n	800bb94 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bc9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bca0:	f000 f8a0 	bl	800bde4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bca4:	f000 fbce 	bl	800c444 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bca8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bcaa:	f000 f8ed 	bl	800be88 <prvIsQueueEmpty>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f43f af6f 	beq.w	800bb94 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bcb6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3730      	adds	r7, #48	@ 0x30
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	e000ed04 	.word	0xe000ed04

0800bcc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b086      	sub	sp, #24
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10d      	bne.n	800bcfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d14d      	bne.n	800bd86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f000 ffc6 	bl	800cc80 <xTaskPriorityDisinherit>
 800bcf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	609a      	str	r2, [r3, #8]
 800bcfc:	e043      	b.n	800bd86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d119      	bne.n	800bd38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6858      	ldr	r0, [r3, #4]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	68b9      	ldr	r1, [r7, #8]
 800bd10:	f011 fdcf 	bl	801d8b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	685a      	ldr	r2, [r3, #4]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd1c:	441a      	add	r2, r3
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	685a      	ldr	r2, [r3, #4]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d32b      	bcc.n	800bd86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	605a      	str	r2, [r3, #4]
 800bd36:	e026      	b.n	800bd86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	68d8      	ldr	r0, [r3, #12]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd40:	461a      	mov	r2, r3
 800bd42:	68b9      	ldr	r1, [r7, #8]
 800bd44:	f011 fdb5 	bl	801d8b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	68da      	ldr	r2, [r3, #12]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd50:	425b      	negs	r3, r3
 800bd52:	441a      	add	r2, r3
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	68da      	ldr	r2, [r3, #12]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d207      	bcs.n	800bd74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	689a      	ldr	r2, [r3, #8]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd6c:	425b      	negs	r3, r3
 800bd6e:	441a      	add	r2, r3
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2b02      	cmp	r3, #2
 800bd78:	d105      	bne.n	800bd86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d002      	beq.n	800bd86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	3b01      	subs	r3, #1
 800bd84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	1c5a      	adds	r2, r3, #1
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bd8e:	697b      	ldr	r3, [r7, #20]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3718      	adds	r7, #24
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d018      	beq.n	800bddc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	68da      	ldr	r2, [r3, #12]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdb2:	441a      	add	r2, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	68da      	ldr	r2, [r3, #12]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d303      	bcc.n	800bdcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	68d9      	ldr	r1, [r3, #12]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	6838      	ldr	r0, [r7, #0]
 800bdd8:	f011 fd6b 	bl	801d8b2 <memcpy>
	}
}
 800bddc:	bf00      	nop
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bdec:	f001 fc94 	bl	800d718 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bdf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bdf8:	e011      	b.n	800be1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d012      	beq.n	800be28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	3324      	adds	r3, #36	@ 0x24
 800be06:	4618      	mov	r0, r3
 800be08:	f000 fd34 	bl	800c874 <xTaskRemoveFromEventList>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d001      	beq.n	800be16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800be12:	f000 fe35 	bl	800ca80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800be16:	7bfb      	ldrb	r3, [r7, #15]
 800be18:	3b01      	subs	r3, #1
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be22:	2b00      	cmp	r3, #0
 800be24:	dce9      	bgt.n	800bdfa <prvUnlockQueue+0x16>
 800be26:	e000      	b.n	800be2a <prvUnlockQueue+0x46>
					break;
 800be28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	22ff      	movs	r2, #255	@ 0xff
 800be2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800be32:	f001 fca3 	bl	800d77c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800be36:	f001 fc6f 	bl	800d718 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800be40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be42:	e011      	b.n	800be68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d012      	beq.n	800be72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	3310      	adds	r3, #16
 800be50:	4618      	mov	r0, r3
 800be52:	f000 fd0f 	bl	800c874 <xTaskRemoveFromEventList>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d001      	beq.n	800be60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800be5c:	f000 fe10 	bl	800ca80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800be60:	7bbb      	ldrb	r3, [r7, #14]
 800be62:	3b01      	subs	r3, #1
 800be64:	b2db      	uxtb	r3, r3
 800be66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	dce9      	bgt.n	800be44 <prvUnlockQueue+0x60>
 800be70:	e000      	b.n	800be74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800be72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	22ff      	movs	r2, #255	@ 0xff
 800be78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800be7c:	f001 fc7e 	bl	800d77c <vPortExitCritical>
}
 800be80:	bf00      	nop
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be90:	f001 fc42 	bl	800d718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d102      	bne.n	800bea2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800be9c:	2301      	movs	r3, #1
 800be9e:	60fb      	str	r3, [r7, #12]
 800bea0:	e001      	b.n	800bea6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bea2:	2300      	movs	r3, #0
 800bea4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bea6:	f001 fc69 	bl	800d77c <vPortExitCritical>

	return xReturn;
 800beaa:	68fb      	ldr	r3, [r7, #12]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3710      	adds	r7, #16
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bebc:	f001 fc2c 	bl	800d718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bec8:	429a      	cmp	r2, r3
 800beca:	d102      	bne.n	800bed2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800becc:	2301      	movs	r3, #1
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	e001      	b.n	800bed6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bed2:	2300      	movs	r3, #0
 800bed4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bed6:	f001 fc51 	bl	800d77c <vPortExitCritical>

	return xReturn;
 800beda:	68fb      	ldr	r3, [r7, #12]
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800beee:	2300      	movs	r3, #0
 800bef0:	60fb      	str	r3, [r7, #12]
 800bef2:	e014      	b.n	800bf1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bef4:	4a0f      	ldr	r2, [pc, #60]	@ (800bf34 <vQueueAddToRegistry+0x50>)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d10b      	bne.n	800bf18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bf00:	490c      	ldr	r1, [pc, #48]	@ (800bf34 <vQueueAddToRegistry+0x50>)
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	683a      	ldr	r2, [r7, #0]
 800bf06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bf0a:	4a0a      	ldr	r2, [pc, #40]	@ (800bf34 <vQueueAddToRegistry+0x50>)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	00db      	lsls	r3, r3, #3
 800bf10:	4413      	add	r3, r2
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bf16:	e006      	b.n	800bf26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	60fb      	str	r3, [r7, #12]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2b07      	cmp	r3, #7
 800bf22:	d9e7      	bls.n	800bef4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bf24:	bf00      	nop
 800bf26:	bf00      	nop
 800bf28:	3714      	adds	r7, #20
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop
 800bf34:	200060d4 	.word	0x200060d4

0800bf38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b086      	sub	sp, #24
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bf48:	f001 fbe6 	bl	800d718 <vPortEnterCritical>
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bf52:	b25b      	sxtb	r3, r3
 800bf54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf58:	d103      	bne.n	800bf62 <vQueueWaitForMessageRestricted+0x2a>
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf68:	b25b      	sxtb	r3, r3
 800bf6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf6e:	d103      	bne.n	800bf78 <vQueueWaitForMessageRestricted+0x40>
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	2200      	movs	r2, #0
 800bf74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bf78:	f001 fc00 	bl	800d77c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d106      	bne.n	800bf92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	3324      	adds	r3, #36	@ 0x24
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	68b9      	ldr	r1, [r7, #8]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 fc45 	bl	800c81c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bf92:	6978      	ldr	r0, [r7, #20]
 800bf94:	f7ff ff26 	bl	800bde4 <prvUnlockQueue>
	}
 800bf98:	bf00      	nop
 800bf9a:	3718      	adds	r7, #24
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b08e      	sub	sp, #56	@ 0x38
 800bfa4:	af04      	add	r7, sp, #16
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	607a      	str	r2, [r7, #4]
 800bfac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bfae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d10b      	bne.n	800bfcc <xTaskCreateStatic+0x2c>
	__asm volatile
 800bfb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb8:	f383 8811 	msr	BASEPRI, r3
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	623b      	str	r3, [r7, #32]
}
 800bfc6:	bf00      	nop
 800bfc8:	bf00      	nop
 800bfca:	e7fd      	b.n	800bfc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bfcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d10b      	bne.n	800bfea <xTaskCreateStatic+0x4a>
	__asm volatile
 800bfd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfd6:	f383 8811 	msr	BASEPRI, r3
 800bfda:	f3bf 8f6f 	isb	sy
 800bfde:	f3bf 8f4f 	dsb	sy
 800bfe2:	61fb      	str	r3, [r7, #28]
}
 800bfe4:	bf00      	nop
 800bfe6:	bf00      	nop
 800bfe8:	e7fd      	b.n	800bfe6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bfea:	235c      	movs	r3, #92	@ 0x5c
 800bfec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	2b5c      	cmp	r3, #92	@ 0x5c
 800bff2:	d00b      	beq.n	800c00c <xTaskCreateStatic+0x6c>
	__asm volatile
 800bff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	61bb      	str	r3, [r7, #24]
}
 800c006:	bf00      	nop
 800c008:	bf00      	nop
 800c00a:	e7fd      	b.n	800c008 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c00c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c010:	2b00      	cmp	r3, #0
 800c012:	d01e      	beq.n	800c052 <xTaskCreateStatic+0xb2>
 800c014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c016:	2b00      	cmp	r3, #0
 800c018:	d01b      	beq.n	800c052 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c01c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c020:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c022:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c026:	2202      	movs	r2, #2
 800c028:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c02c:	2300      	movs	r3, #0
 800c02e:	9303      	str	r3, [sp, #12]
 800c030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c032:	9302      	str	r3, [sp, #8]
 800c034:	f107 0314 	add.w	r3, r7, #20
 800c038:	9301      	str	r3, [sp, #4]
 800c03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c03c:	9300      	str	r3, [sp, #0]
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	68b9      	ldr	r1, [r7, #8]
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f000 f850 	bl	800c0ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c04a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c04c:	f000 f8de 	bl	800c20c <prvAddNewTaskToReadyList>
 800c050:	e001      	b.n	800c056 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c052:	2300      	movs	r3, #0
 800c054:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c056:	697b      	ldr	r3, [r7, #20]
	}
 800c058:	4618      	mov	r0, r3
 800c05a:	3728      	adds	r7, #40	@ 0x28
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c060:	b580      	push	{r7, lr}
 800c062:	b08c      	sub	sp, #48	@ 0x30
 800c064:	af04      	add	r7, sp, #16
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	603b      	str	r3, [r7, #0]
 800c06c:	4613      	mov	r3, r2
 800c06e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c070:	88fb      	ldrh	r3, [r7, #6]
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	4618      	mov	r0, r3
 800c076:	f001 fc71 	bl	800d95c <pvPortMalloc>
 800c07a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00e      	beq.n	800c0a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c082:	205c      	movs	r0, #92	@ 0x5c
 800c084:	f001 fc6a 	bl	800d95c <pvPortMalloc>
 800c088:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d003      	beq.n	800c098 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	697a      	ldr	r2, [r7, #20]
 800c094:	631a      	str	r2, [r3, #48]	@ 0x30
 800c096:	e005      	b.n	800c0a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c098:	6978      	ldr	r0, [r7, #20]
 800c09a:	f001 fd2d 	bl	800daf8 <vPortFree>
 800c09e:	e001      	b.n	800c0a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d017      	beq.n	800c0da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c0aa:	69fb      	ldr	r3, [r7, #28]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c0b2:	88fa      	ldrh	r2, [r7, #6]
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	9303      	str	r3, [sp, #12]
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	9302      	str	r3, [sp, #8]
 800c0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0be:	9301      	str	r3, [sp, #4]
 800c0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c2:	9300      	str	r3, [sp, #0]
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	68b9      	ldr	r1, [r7, #8]
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	f000 f80e 	bl	800c0ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0ce:	69f8      	ldr	r0, [r7, #28]
 800c0d0:	f000 f89c 	bl	800c20c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	61bb      	str	r3, [r7, #24]
 800c0d8:	e002      	b.n	800c0e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c0da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c0de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c0e0:	69bb      	ldr	r3, [r7, #24]
	}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3720      	adds	r7, #32
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b088      	sub	sp, #32
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	60f8      	str	r0, [r7, #12]
 800c0f2:	60b9      	str	r1, [r7, #8]
 800c0f4:	607a      	str	r2, [r7, #4]
 800c0f6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0fa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	461a      	mov	r2, r3
 800c102:	21a5      	movs	r1, #165	@ 0xa5
 800c104:	f011 fb0c 	bl	801d720 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c10a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c112:	3b01      	subs	r3, #1
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	4413      	add	r3, r2
 800c118:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	f023 0307 	bic.w	r3, r3, #7
 800c120:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	f003 0307 	and.w	r3, r3, #7
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00b      	beq.n	800c144 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	617b      	str	r3, [r7, #20]
}
 800c13e:	bf00      	nop
 800c140:	bf00      	nop
 800c142:	e7fd      	b.n	800c140 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d01f      	beq.n	800c18a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c14a:	2300      	movs	r3, #0
 800c14c:	61fb      	str	r3, [r7, #28]
 800c14e:	e012      	b.n	800c176 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c150:	68ba      	ldr	r2, [r7, #8]
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	4413      	add	r3, r2
 800c156:	7819      	ldrb	r1, [r3, #0]
 800c158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c15a:	69fb      	ldr	r3, [r7, #28]
 800c15c:	4413      	add	r3, r2
 800c15e:	3334      	adds	r3, #52	@ 0x34
 800c160:	460a      	mov	r2, r1
 800c162:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c164:	68ba      	ldr	r2, [r7, #8]
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	4413      	add	r3, r2
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d006      	beq.n	800c17e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	3301      	adds	r3, #1
 800c174:	61fb      	str	r3, [r7, #28]
 800c176:	69fb      	ldr	r3, [r7, #28]
 800c178:	2b0f      	cmp	r3, #15
 800c17a:	d9e9      	bls.n	800c150 <prvInitialiseNewTask+0x66>
 800c17c:	e000      	b.n	800c180 <prvInitialiseNewTask+0x96>
			{
				break;
 800c17e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c182:	2200      	movs	r2, #0
 800c184:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c188:	e003      	b.n	800c192 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c18c:	2200      	movs	r2, #0
 800c18e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c194:	2b37      	cmp	r3, #55	@ 0x37
 800c196:	d901      	bls.n	800c19c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c198:	2337      	movs	r3, #55	@ 0x37
 800c19a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c19e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1a0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1a6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b0:	3304      	adds	r3, #4
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7ff f966 	bl	800b484 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ba:	3318      	adds	r3, #24
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7ff f961 	bl	800b484 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1d6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1da:	2200      	movs	r2, #0
 800c1dc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c1e6:	683a      	ldr	r2, [r7, #0]
 800c1e8:	68f9      	ldr	r1, [r7, #12]
 800c1ea:	69b8      	ldr	r0, [r7, #24]
 800c1ec:	f001 f966 	bl	800d4bc <pxPortInitialiseStack>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d002      	beq.n	800c202 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c200:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c202:	bf00      	nop
 800c204:	3720      	adds	r7, #32
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
	...

0800c20c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c214:	f001 fa80 	bl	800d718 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c218:	4b2d      	ldr	r3, [pc, #180]	@ (800c2d0 <prvAddNewTaskToReadyList+0xc4>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	3301      	adds	r3, #1
 800c21e:	4a2c      	ldr	r2, [pc, #176]	@ (800c2d0 <prvAddNewTaskToReadyList+0xc4>)
 800c220:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c222:	4b2c      	ldr	r3, [pc, #176]	@ (800c2d4 <prvAddNewTaskToReadyList+0xc8>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d109      	bne.n	800c23e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c22a:	4a2a      	ldr	r2, [pc, #168]	@ (800c2d4 <prvAddNewTaskToReadyList+0xc8>)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c230:	4b27      	ldr	r3, [pc, #156]	@ (800c2d0 <prvAddNewTaskToReadyList+0xc4>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b01      	cmp	r3, #1
 800c236:	d110      	bne.n	800c25a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c238:	f000 fc46 	bl	800cac8 <prvInitialiseTaskLists>
 800c23c:	e00d      	b.n	800c25a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c23e:	4b26      	ldr	r3, [pc, #152]	@ (800c2d8 <prvAddNewTaskToReadyList+0xcc>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d109      	bne.n	800c25a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c246:	4b23      	ldr	r3, [pc, #140]	@ (800c2d4 <prvAddNewTaskToReadyList+0xc8>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c250:	429a      	cmp	r2, r3
 800c252:	d802      	bhi.n	800c25a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c254:	4a1f      	ldr	r2, [pc, #124]	@ (800c2d4 <prvAddNewTaskToReadyList+0xc8>)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c25a:	4b20      	ldr	r3, [pc, #128]	@ (800c2dc <prvAddNewTaskToReadyList+0xd0>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	3301      	adds	r3, #1
 800c260:	4a1e      	ldr	r2, [pc, #120]	@ (800c2dc <prvAddNewTaskToReadyList+0xd0>)
 800c262:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c264:	4b1d      	ldr	r3, [pc, #116]	@ (800c2dc <prvAddNewTaskToReadyList+0xd0>)
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c270:	4b1b      	ldr	r3, [pc, #108]	@ (800c2e0 <prvAddNewTaskToReadyList+0xd4>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	429a      	cmp	r2, r3
 800c276:	d903      	bls.n	800c280 <prvAddNewTaskToReadyList+0x74>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c27c:	4a18      	ldr	r2, [pc, #96]	@ (800c2e0 <prvAddNewTaskToReadyList+0xd4>)
 800c27e:	6013      	str	r3, [r2, #0]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c284:	4613      	mov	r3, r2
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	4413      	add	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	4a15      	ldr	r2, [pc, #84]	@ (800c2e4 <prvAddNewTaskToReadyList+0xd8>)
 800c28e:	441a      	add	r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	3304      	adds	r3, #4
 800c294:	4619      	mov	r1, r3
 800c296:	4610      	mov	r0, r2
 800c298:	f7ff f901 	bl	800b49e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c29c:	f001 fa6e 	bl	800d77c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c2a0:	4b0d      	ldr	r3, [pc, #52]	@ (800c2d8 <prvAddNewTaskToReadyList+0xcc>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00e      	beq.n	800c2c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c2a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c2d4 <prvAddNewTaskToReadyList+0xc8>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d207      	bcs.n	800c2c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c2b6:	4b0c      	ldr	r3, [pc, #48]	@ (800c2e8 <prvAddNewTaskToReadyList+0xdc>)
 800c2b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2bc:	601a      	str	r2, [r3, #0]
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2c6:	bf00      	nop
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	200065e8 	.word	0x200065e8
 800c2d4:	20006114 	.word	0x20006114
 800c2d8:	200065f4 	.word	0x200065f4
 800c2dc:	20006604 	.word	0x20006604
 800c2e0:	200065f0 	.word	0x200065f0
 800c2e4:	20006118 	.word	0x20006118
 800c2e8:	e000ed04 	.word	0xe000ed04

0800c2ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d018      	beq.n	800c330 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c2fe:	4b14      	ldr	r3, [pc, #80]	@ (800c350 <vTaskDelay+0x64>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00b      	beq.n	800c31e <vTaskDelay+0x32>
	__asm volatile
 800c306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c30a:	f383 8811 	msr	BASEPRI, r3
 800c30e:	f3bf 8f6f 	isb	sy
 800c312:	f3bf 8f4f 	dsb	sy
 800c316:	60bb      	str	r3, [r7, #8]
}
 800c318:	bf00      	nop
 800c31a:	bf00      	nop
 800c31c:	e7fd      	b.n	800c31a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c31e:	f000 f883 	bl	800c428 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c322:	2100      	movs	r1, #0
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f000 fd1b 	bl	800cd60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c32a:	f000 f88b 	bl	800c444 <xTaskResumeAll>
 800c32e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d107      	bne.n	800c346 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c336:	4b07      	ldr	r3, [pc, #28]	@ (800c354 <vTaskDelay+0x68>)
 800c338:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c33c:	601a      	str	r2, [r3, #0]
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c346:	bf00      	nop
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	20006610 	.word	0x20006610
 800c354:	e000ed04 	.word	0xe000ed04

0800c358 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b08a      	sub	sp, #40	@ 0x28
 800c35c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c35e:	2300      	movs	r3, #0
 800c360:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c362:	2300      	movs	r3, #0
 800c364:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c366:	463a      	mov	r2, r7
 800c368:	1d39      	adds	r1, r7, #4
 800c36a:	f107 0308 	add.w	r3, r7, #8
 800c36e:	4618      	mov	r0, r3
 800c370:	f7ff f834 	bl	800b3dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c374:	6839      	ldr	r1, [r7, #0]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	9202      	str	r2, [sp, #8]
 800c37c:	9301      	str	r3, [sp, #4]
 800c37e:	2300      	movs	r3, #0
 800c380:	9300      	str	r3, [sp, #0]
 800c382:	2300      	movs	r3, #0
 800c384:	460a      	mov	r2, r1
 800c386:	4922      	ldr	r1, [pc, #136]	@ (800c410 <vTaskStartScheduler+0xb8>)
 800c388:	4822      	ldr	r0, [pc, #136]	@ (800c414 <vTaskStartScheduler+0xbc>)
 800c38a:	f7ff fe09 	bl	800bfa0 <xTaskCreateStatic>
 800c38e:	4603      	mov	r3, r0
 800c390:	4a21      	ldr	r2, [pc, #132]	@ (800c418 <vTaskStartScheduler+0xc0>)
 800c392:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c394:	4b20      	ldr	r3, [pc, #128]	@ (800c418 <vTaskStartScheduler+0xc0>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d002      	beq.n	800c3a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c39c:	2301      	movs	r3, #1
 800c39e:	617b      	str	r3, [r7, #20]
 800c3a0:	e001      	b.n	800c3a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d102      	bne.n	800c3b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c3ac:	f000 fd2c 	bl	800ce08 <xTimerCreateTimerTask>
 800c3b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d116      	bne.n	800c3e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c3b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3bc:	f383 8811 	msr	BASEPRI, r3
 800c3c0:	f3bf 8f6f 	isb	sy
 800c3c4:	f3bf 8f4f 	dsb	sy
 800c3c8:	613b      	str	r3, [r7, #16]
}
 800c3ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c3cc:	4b13      	ldr	r3, [pc, #76]	@ (800c41c <vTaskStartScheduler+0xc4>)
 800c3ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c3d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c3d4:	4b12      	ldr	r3, [pc, #72]	@ (800c420 <vTaskStartScheduler+0xc8>)
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c3da:	4b12      	ldr	r3, [pc, #72]	@ (800c424 <vTaskStartScheduler+0xcc>)
 800c3dc:	2200      	movs	r2, #0
 800c3de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c3e0:	f001 f8f6 	bl	800d5d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c3e4:	e00f      	b.n	800c406 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3ec:	d10b      	bne.n	800c406 <vTaskStartScheduler+0xae>
	__asm volatile
 800c3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	60fb      	str	r3, [r7, #12]
}
 800c400:	bf00      	nop
 800c402:	bf00      	nop
 800c404:	e7fd      	b.n	800c402 <vTaskStartScheduler+0xaa>
}
 800c406:	bf00      	nop
 800c408:	3718      	adds	r7, #24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	0801ed5c 	.word	0x0801ed5c
 800c414:	0800ca99 	.word	0x0800ca99
 800c418:	2000660c 	.word	0x2000660c
 800c41c:	20006608 	.word	0x20006608
 800c420:	200065f4 	.word	0x200065f4
 800c424:	200065ec 	.word	0x200065ec

0800c428 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c428:	b480      	push	{r7}
 800c42a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c42c:	4b04      	ldr	r3, [pc, #16]	@ (800c440 <vTaskSuspendAll+0x18>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	3301      	adds	r3, #1
 800c432:	4a03      	ldr	r2, [pc, #12]	@ (800c440 <vTaskSuspendAll+0x18>)
 800c434:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c436:	bf00      	nop
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr
 800c440:	20006610 	.word	0x20006610

0800c444 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c44a:	2300      	movs	r3, #0
 800c44c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c44e:	2300      	movs	r3, #0
 800c450:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c452:	4b42      	ldr	r3, [pc, #264]	@ (800c55c <xTaskResumeAll+0x118>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10b      	bne.n	800c472 <xTaskResumeAll+0x2e>
	__asm volatile
 800c45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c45e:	f383 8811 	msr	BASEPRI, r3
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	603b      	str	r3, [r7, #0]
}
 800c46c:	bf00      	nop
 800c46e:	bf00      	nop
 800c470:	e7fd      	b.n	800c46e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c472:	f001 f951 	bl	800d718 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c476:	4b39      	ldr	r3, [pc, #228]	@ (800c55c <xTaskResumeAll+0x118>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	3b01      	subs	r3, #1
 800c47c:	4a37      	ldr	r2, [pc, #220]	@ (800c55c <xTaskResumeAll+0x118>)
 800c47e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c480:	4b36      	ldr	r3, [pc, #216]	@ (800c55c <xTaskResumeAll+0x118>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d162      	bne.n	800c54e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c488:	4b35      	ldr	r3, [pc, #212]	@ (800c560 <xTaskResumeAll+0x11c>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d05e      	beq.n	800c54e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c490:	e02f      	b.n	800c4f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c492:	4b34      	ldr	r3, [pc, #208]	@ (800c564 <xTaskResumeAll+0x120>)
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	3318      	adds	r3, #24
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7ff f85a 	bl	800b558 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	3304      	adds	r3, #4
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7ff f855 	bl	800b558 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4b2:	4b2d      	ldr	r3, [pc, #180]	@ (800c568 <xTaskResumeAll+0x124>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d903      	bls.n	800c4c2 <xTaskResumeAll+0x7e>
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4be:	4a2a      	ldr	r2, [pc, #168]	@ (800c568 <xTaskResumeAll+0x124>)
 800c4c0:	6013      	str	r3, [r2, #0]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	4413      	add	r3, r2
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	4a27      	ldr	r2, [pc, #156]	@ (800c56c <xTaskResumeAll+0x128>)
 800c4d0:	441a      	add	r2, r3
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	3304      	adds	r3, #4
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	4610      	mov	r0, r2
 800c4da:	f7fe ffe0 	bl	800b49e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4e2:	4b23      	ldr	r3, [pc, #140]	@ (800c570 <xTaskResumeAll+0x12c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d302      	bcc.n	800c4f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c4ec:	4b21      	ldr	r3, [pc, #132]	@ (800c574 <xTaskResumeAll+0x130>)
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4f2:	4b1c      	ldr	r3, [pc, #112]	@ (800c564 <xTaskResumeAll+0x120>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d1cb      	bne.n	800c492 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d001      	beq.n	800c504 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c500:	f000 fb80 	bl	800cc04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c504:	4b1c      	ldr	r3, [pc, #112]	@ (800c578 <xTaskResumeAll+0x134>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d010      	beq.n	800c532 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c510:	f000 f846 	bl	800c5a0 <xTaskIncrementTick>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d002      	beq.n	800c520 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c51a:	4b16      	ldr	r3, [pc, #88]	@ (800c574 <xTaskResumeAll+0x130>)
 800c51c:	2201      	movs	r2, #1
 800c51e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	3b01      	subs	r3, #1
 800c524:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1f1      	bne.n	800c510 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c52c:	4b12      	ldr	r3, [pc, #72]	@ (800c578 <xTaskResumeAll+0x134>)
 800c52e:	2200      	movs	r2, #0
 800c530:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c532:	4b10      	ldr	r3, [pc, #64]	@ (800c574 <xTaskResumeAll+0x130>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d009      	beq.n	800c54e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c53a:	2301      	movs	r3, #1
 800c53c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c53e:	4b0f      	ldr	r3, [pc, #60]	@ (800c57c <xTaskResumeAll+0x138>)
 800c540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c544:	601a      	str	r2, [r3, #0]
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c54e:	f001 f915 	bl	800d77c <vPortExitCritical>

	return xAlreadyYielded;
 800c552:	68bb      	ldr	r3, [r7, #8]
}
 800c554:	4618      	mov	r0, r3
 800c556:	3710      	adds	r7, #16
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	20006610 	.word	0x20006610
 800c560:	200065e8 	.word	0x200065e8
 800c564:	200065a8 	.word	0x200065a8
 800c568:	200065f0 	.word	0x200065f0
 800c56c:	20006118 	.word	0x20006118
 800c570:	20006114 	.word	0x20006114
 800c574:	200065fc 	.word	0x200065fc
 800c578:	200065f8 	.word	0x200065f8
 800c57c:	e000ed04 	.word	0xe000ed04

0800c580 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c586:	4b05      	ldr	r3, [pc, #20]	@ (800c59c <xTaskGetTickCount+0x1c>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c58c:	687b      	ldr	r3, [r7, #4]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	370c      	adds	r7, #12
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr
 800c59a:	bf00      	nop
 800c59c:	200065ec 	.word	0x200065ec

0800c5a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b086      	sub	sp, #24
 800c5a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5aa:	4b4f      	ldr	r3, [pc, #316]	@ (800c6e8 <xTaskIncrementTick+0x148>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	f040 8090 	bne.w	800c6d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c5b4:	4b4d      	ldr	r3, [pc, #308]	@ (800c6ec <xTaskIncrementTick+0x14c>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c5bc:	4a4b      	ldr	r2, [pc, #300]	@ (800c6ec <xTaskIncrementTick+0x14c>)
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d121      	bne.n	800c60c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c5c8:	4b49      	ldr	r3, [pc, #292]	@ (800c6f0 <xTaskIncrementTick+0x150>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00b      	beq.n	800c5ea <xTaskIncrementTick+0x4a>
	__asm volatile
 800c5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	603b      	str	r3, [r7, #0]
}
 800c5e4:	bf00      	nop
 800c5e6:	bf00      	nop
 800c5e8:	e7fd      	b.n	800c5e6 <xTaskIncrementTick+0x46>
 800c5ea:	4b41      	ldr	r3, [pc, #260]	@ (800c6f0 <xTaskIncrementTick+0x150>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	60fb      	str	r3, [r7, #12]
 800c5f0:	4b40      	ldr	r3, [pc, #256]	@ (800c6f4 <xTaskIncrementTick+0x154>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a3e      	ldr	r2, [pc, #248]	@ (800c6f0 <xTaskIncrementTick+0x150>)
 800c5f6:	6013      	str	r3, [r2, #0]
 800c5f8:	4a3e      	ldr	r2, [pc, #248]	@ (800c6f4 <xTaskIncrementTick+0x154>)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6013      	str	r3, [r2, #0]
 800c5fe:	4b3e      	ldr	r3, [pc, #248]	@ (800c6f8 <xTaskIncrementTick+0x158>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	3301      	adds	r3, #1
 800c604:	4a3c      	ldr	r2, [pc, #240]	@ (800c6f8 <xTaskIncrementTick+0x158>)
 800c606:	6013      	str	r3, [r2, #0]
 800c608:	f000 fafc 	bl	800cc04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c60c:	4b3b      	ldr	r3, [pc, #236]	@ (800c6fc <xTaskIncrementTick+0x15c>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	693a      	ldr	r2, [r7, #16]
 800c612:	429a      	cmp	r2, r3
 800c614:	d349      	bcc.n	800c6aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c616:	4b36      	ldr	r3, [pc, #216]	@ (800c6f0 <xTaskIncrementTick+0x150>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d104      	bne.n	800c62a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c620:	4b36      	ldr	r3, [pc, #216]	@ (800c6fc <xTaskIncrementTick+0x15c>)
 800c622:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c626:	601a      	str	r2, [r3, #0]
					break;
 800c628:	e03f      	b.n	800c6aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c62a:	4b31      	ldr	r3, [pc, #196]	@ (800c6f0 <xTaskIncrementTick+0x150>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c63a:	693a      	ldr	r2, [r7, #16]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d203      	bcs.n	800c64a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c642:	4a2e      	ldr	r2, [pc, #184]	@ (800c6fc <xTaskIncrementTick+0x15c>)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c648:	e02f      	b.n	800c6aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	3304      	adds	r3, #4
 800c64e:	4618      	mov	r0, r3
 800c650:	f7fe ff82 	bl	800b558 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d004      	beq.n	800c666 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	3318      	adds	r3, #24
 800c660:	4618      	mov	r0, r3
 800c662:	f7fe ff79 	bl	800b558 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c66a:	4b25      	ldr	r3, [pc, #148]	@ (800c700 <xTaskIncrementTick+0x160>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d903      	bls.n	800c67a <xTaskIncrementTick+0xda>
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c676:	4a22      	ldr	r2, [pc, #136]	@ (800c700 <xTaskIncrementTick+0x160>)
 800c678:	6013      	str	r3, [r2, #0]
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c67e:	4613      	mov	r3, r2
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4413      	add	r3, r2
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	4a1f      	ldr	r2, [pc, #124]	@ (800c704 <xTaskIncrementTick+0x164>)
 800c688:	441a      	add	r2, r3
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	3304      	adds	r3, #4
 800c68e:	4619      	mov	r1, r3
 800c690:	4610      	mov	r0, r2
 800c692:	f7fe ff04 	bl	800b49e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c69a:	4b1b      	ldr	r3, [pc, #108]	@ (800c708 <xTaskIncrementTick+0x168>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d3b8      	bcc.n	800c616 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6a8:	e7b5      	b.n	800c616 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c6aa:	4b17      	ldr	r3, [pc, #92]	@ (800c708 <xTaskIncrementTick+0x168>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6b0:	4914      	ldr	r1, [pc, #80]	@ (800c704 <xTaskIncrementTick+0x164>)
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	4413      	add	r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	440b      	add	r3, r1
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d901      	bls.n	800c6c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c6c6:	4b11      	ldr	r3, [pc, #68]	@ (800c70c <xTaskIncrementTick+0x16c>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d007      	beq.n	800c6de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	617b      	str	r3, [r7, #20]
 800c6d2:	e004      	b.n	800c6de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c6d4:	4b0e      	ldr	r3, [pc, #56]	@ (800c710 <xTaskIncrementTick+0x170>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	3301      	adds	r3, #1
 800c6da:	4a0d      	ldr	r2, [pc, #52]	@ (800c710 <xTaskIncrementTick+0x170>)
 800c6dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c6de:	697b      	ldr	r3, [r7, #20]
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3718      	adds	r7, #24
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}
 800c6e8:	20006610 	.word	0x20006610
 800c6ec:	200065ec 	.word	0x200065ec
 800c6f0:	200065a0 	.word	0x200065a0
 800c6f4:	200065a4 	.word	0x200065a4
 800c6f8:	20006600 	.word	0x20006600
 800c6fc:	20006608 	.word	0x20006608
 800c700:	200065f0 	.word	0x200065f0
 800c704:	20006118 	.word	0x20006118
 800c708:	20006114 	.word	0x20006114
 800c70c:	200065fc 	.word	0x200065fc
 800c710:	200065f8 	.word	0x200065f8

0800c714 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c71a:	4b28      	ldr	r3, [pc, #160]	@ (800c7bc <vTaskSwitchContext+0xa8>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d003      	beq.n	800c72a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c722:	4b27      	ldr	r3, [pc, #156]	@ (800c7c0 <vTaskSwitchContext+0xac>)
 800c724:	2201      	movs	r2, #1
 800c726:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c728:	e042      	b.n	800c7b0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800c72a:	4b25      	ldr	r3, [pc, #148]	@ (800c7c0 <vTaskSwitchContext+0xac>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c730:	4b24      	ldr	r3, [pc, #144]	@ (800c7c4 <vTaskSwitchContext+0xb0>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	60fb      	str	r3, [r7, #12]
 800c736:	e011      	b.n	800c75c <vTaskSwitchContext+0x48>
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d10b      	bne.n	800c756 <vTaskSwitchContext+0x42>
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	607b      	str	r3, [r7, #4]
}
 800c750:	bf00      	nop
 800c752:	bf00      	nop
 800c754:	e7fd      	b.n	800c752 <vTaskSwitchContext+0x3e>
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	3b01      	subs	r3, #1
 800c75a:	60fb      	str	r3, [r7, #12]
 800c75c:	491a      	ldr	r1, [pc, #104]	@ (800c7c8 <vTaskSwitchContext+0xb4>)
 800c75e:	68fa      	ldr	r2, [r7, #12]
 800c760:	4613      	mov	r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4413      	add	r3, r2
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	440b      	add	r3, r1
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d0e3      	beq.n	800c738 <vTaskSwitchContext+0x24>
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	4613      	mov	r3, r2
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	4413      	add	r3, r2
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	4a13      	ldr	r2, [pc, #76]	@ (800c7c8 <vTaskSwitchContext+0xb4>)
 800c77c:	4413      	add	r3, r2
 800c77e:	60bb      	str	r3, [r7, #8]
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	685a      	ldr	r2, [r3, #4]
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	605a      	str	r2, [r3, #4]
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	685a      	ldr	r2, [r3, #4]
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	3308      	adds	r3, #8
 800c792:	429a      	cmp	r2, r3
 800c794:	d104      	bne.n	800c7a0 <vTaskSwitchContext+0x8c>
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	685a      	ldr	r2, [r3, #4]
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	605a      	str	r2, [r3, #4]
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	4a09      	ldr	r2, [pc, #36]	@ (800c7cc <vTaskSwitchContext+0xb8>)
 800c7a8:	6013      	str	r3, [r2, #0]
 800c7aa:	4a06      	ldr	r2, [pc, #24]	@ (800c7c4 <vTaskSwitchContext+0xb0>)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	6013      	str	r3, [r2, #0]
}
 800c7b0:	bf00      	nop
 800c7b2:	3714      	adds	r7, #20
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr
 800c7bc:	20006610 	.word	0x20006610
 800c7c0:	200065fc 	.word	0x200065fc
 800c7c4:	200065f0 	.word	0x200065f0
 800c7c8:	20006118 	.word	0x20006118
 800c7cc:	20006114 	.word	0x20006114

0800c7d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d10b      	bne.n	800c7f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e4:	f383 8811 	msr	BASEPRI, r3
 800c7e8:	f3bf 8f6f 	isb	sy
 800c7ec:	f3bf 8f4f 	dsb	sy
 800c7f0:	60fb      	str	r3, [r7, #12]
}
 800c7f2:	bf00      	nop
 800c7f4:	bf00      	nop
 800c7f6:	e7fd      	b.n	800c7f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7f8:	4b07      	ldr	r3, [pc, #28]	@ (800c818 <vTaskPlaceOnEventList+0x48>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	3318      	adds	r3, #24
 800c7fe:	4619      	mov	r1, r3
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f7fe fe70 	bl	800b4e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c806:	2101      	movs	r1, #1
 800c808:	6838      	ldr	r0, [r7, #0]
 800c80a:	f000 faa9 	bl	800cd60 <prvAddCurrentTaskToDelayedList>
}
 800c80e:	bf00      	nop
 800c810:	3710      	adds	r7, #16
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	20006114 	.word	0x20006114

0800c81c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b086      	sub	sp, #24
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d10b      	bne.n	800c846 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c832:	f383 8811 	msr	BASEPRI, r3
 800c836:	f3bf 8f6f 	isb	sy
 800c83a:	f3bf 8f4f 	dsb	sy
 800c83e:	617b      	str	r3, [r7, #20]
}
 800c840:	bf00      	nop
 800c842:	bf00      	nop
 800c844:	e7fd      	b.n	800c842 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c846:	4b0a      	ldr	r3, [pc, #40]	@ (800c870 <vTaskPlaceOnEventListRestricted+0x54>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	3318      	adds	r3, #24
 800c84c:	4619      	mov	r1, r3
 800c84e:	68f8      	ldr	r0, [r7, #12]
 800c850:	f7fe fe25 	bl	800b49e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d002      	beq.n	800c860 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c85a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c85e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c860:	6879      	ldr	r1, [r7, #4]
 800c862:	68b8      	ldr	r0, [r7, #8]
 800c864:	f000 fa7c 	bl	800cd60 <prvAddCurrentTaskToDelayedList>
	}
 800c868:	bf00      	nop
 800c86a:	3718      	adds	r7, #24
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	20006114 	.word	0x20006114

0800c874 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b086      	sub	sp, #24
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d10b      	bne.n	800c8a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88e:	f383 8811 	msr	BASEPRI, r3
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	f3bf 8f4f 	dsb	sy
 800c89a:	60fb      	str	r3, [r7, #12]
}
 800c89c:	bf00      	nop
 800c89e:	bf00      	nop
 800c8a0:	e7fd      	b.n	800c89e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	3318      	adds	r3, #24
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7fe fe56 	bl	800b558 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8ac:	4b1d      	ldr	r3, [pc, #116]	@ (800c924 <xTaskRemoveFromEventList+0xb0>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d11d      	bne.n	800c8f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	3304      	adds	r3, #4
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7fe fe4d 	bl	800b558 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8c2:	4b19      	ldr	r3, [pc, #100]	@ (800c928 <xTaskRemoveFromEventList+0xb4>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d903      	bls.n	800c8d2 <xTaskRemoveFromEventList+0x5e>
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ce:	4a16      	ldr	r2, [pc, #88]	@ (800c928 <xTaskRemoveFromEventList+0xb4>)
 800c8d0:	6013      	str	r3, [r2, #0]
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	4413      	add	r3, r2
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	4a13      	ldr	r2, [pc, #76]	@ (800c92c <xTaskRemoveFromEventList+0xb8>)
 800c8e0:	441a      	add	r2, r3
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	3304      	adds	r3, #4
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	4610      	mov	r0, r2
 800c8ea:	f7fe fdd8 	bl	800b49e <vListInsertEnd>
 800c8ee:	e005      	b.n	800c8fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	3318      	adds	r3, #24
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	480e      	ldr	r0, [pc, #56]	@ (800c930 <xTaskRemoveFromEventList+0xbc>)
 800c8f8:	f7fe fdd1 	bl	800b49e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c900:	4b0c      	ldr	r3, [pc, #48]	@ (800c934 <xTaskRemoveFromEventList+0xc0>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c906:	429a      	cmp	r2, r3
 800c908:	d905      	bls.n	800c916 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c90a:	2301      	movs	r3, #1
 800c90c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c90e:	4b0a      	ldr	r3, [pc, #40]	@ (800c938 <xTaskRemoveFromEventList+0xc4>)
 800c910:	2201      	movs	r2, #1
 800c912:	601a      	str	r2, [r3, #0]
 800c914:	e001      	b.n	800c91a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c916:	2300      	movs	r3, #0
 800c918:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c91a:	697b      	ldr	r3, [r7, #20]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3718      	adds	r7, #24
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	20006610 	.word	0x20006610
 800c928:	200065f0 	.word	0x200065f0
 800c92c:	20006118 	.word	0x20006118
 800c930:	200065a8 	.word	0x200065a8
 800c934:	20006114 	.word	0x20006114
 800c938:	200065fc 	.word	0x200065fc

0800c93c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d10b      	bne.n	800c962 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800c94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c94e:	f383 8811 	msr	BASEPRI, r3
 800c952:	f3bf 8f6f 	isb	sy
 800c956:	f3bf 8f4f 	dsb	sy
 800c95a:	60fb      	str	r3, [r7, #12]
}
 800c95c:	bf00      	nop
 800c95e:	bf00      	nop
 800c960:	e7fd      	b.n	800c95e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800c962:	f000 fed9 	bl	800d718 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c966:	4b07      	ldr	r3, [pc, #28]	@ (800c984 <vTaskSetTimeOutState+0x48>)
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800c96e:	4b06      	ldr	r3, [pc, #24]	@ (800c988 <vTaskSetTimeOutState+0x4c>)
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800c976:	f000 ff01 	bl	800d77c <vPortExitCritical>
}
 800c97a:	bf00      	nop
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	20006600 	.word	0x20006600
 800c988:	200065ec 	.word	0x200065ec

0800c98c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c994:	4b06      	ldr	r3, [pc, #24]	@ (800c9b0 <vTaskInternalSetTimeOutState+0x24>)
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c99c:	4b05      	ldr	r3, [pc, #20]	@ (800c9b4 <vTaskInternalSetTimeOutState+0x28>)
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	605a      	str	r2, [r3, #4]
}
 800c9a4:	bf00      	nop
 800c9a6:	370c      	adds	r7, #12
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr
 800c9b0:	20006600 	.word	0x20006600
 800c9b4:	200065ec 	.word	0x200065ec

0800c9b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b088      	sub	sp, #32
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d10b      	bne.n	800c9e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c9c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9cc:	f383 8811 	msr	BASEPRI, r3
 800c9d0:	f3bf 8f6f 	isb	sy
 800c9d4:	f3bf 8f4f 	dsb	sy
 800c9d8:	613b      	str	r3, [r7, #16]
}
 800c9da:	bf00      	nop
 800c9dc:	bf00      	nop
 800c9de:	e7fd      	b.n	800c9dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d10b      	bne.n	800c9fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ea:	f383 8811 	msr	BASEPRI, r3
 800c9ee:	f3bf 8f6f 	isb	sy
 800c9f2:	f3bf 8f4f 	dsb	sy
 800c9f6:	60fb      	str	r3, [r7, #12]
}
 800c9f8:	bf00      	nop
 800c9fa:	bf00      	nop
 800c9fc:	e7fd      	b.n	800c9fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c9fe:	f000 fe8b 	bl	800d718 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca02:	4b1d      	ldr	r3, [pc, #116]	@ (800ca78 <xTaskCheckForTimeOut+0xc0>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	69ba      	ldr	r2, [r7, #24]
 800ca0e:	1ad3      	subs	r3, r2, r3
 800ca10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca1a:	d102      	bne.n	800ca22 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	61fb      	str	r3, [r7, #28]
 800ca20:	e023      	b.n	800ca6a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	4b15      	ldr	r3, [pc, #84]	@ (800ca7c <xTaskCheckForTimeOut+0xc4>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d007      	beq.n	800ca3e <xTaskCheckForTimeOut+0x86>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	69ba      	ldr	r2, [r7, #24]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d302      	bcc.n	800ca3e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	61fb      	str	r3, [r7, #28]
 800ca3c:	e015      	b.n	800ca6a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	697a      	ldr	r2, [r7, #20]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d20b      	bcs.n	800ca60 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	1ad2      	subs	r2, r2, r3
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f7ff ff99 	bl	800c98c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	61fb      	str	r3, [r7, #28]
 800ca5e:	e004      	b.n	800ca6a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	2200      	movs	r2, #0
 800ca64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ca66:	2301      	movs	r3, #1
 800ca68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ca6a:	f000 fe87 	bl	800d77c <vPortExitCritical>

	return xReturn;
 800ca6e:	69fb      	ldr	r3, [r7, #28]
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3720      	adds	r7, #32
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	200065ec 	.word	0x200065ec
 800ca7c:	20006600 	.word	0x20006600

0800ca80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ca80:	b480      	push	{r7}
 800ca82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ca84:	4b03      	ldr	r3, [pc, #12]	@ (800ca94 <vTaskMissedYield+0x14>)
 800ca86:	2201      	movs	r2, #1
 800ca88:	601a      	str	r2, [r3, #0]
}
 800ca8a:	bf00      	nop
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr
 800ca94:	200065fc 	.word	0x200065fc

0800ca98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800caa0:	f000 f852 	bl	800cb48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800caa4:	4b06      	ldr	r3, [pc, #24]	@ (800cac0 <prvIdleTask+0x28>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d9f9      	bls.n	800caa0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800caac:	4b05      	ldr	r3, [pc, #20]	@ (800cac4 <prvIdleTask+0x2c>)
 800caae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cab2:	601a      	str	r2, [r3, #0]
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cabc:	e7f0      	b.n	800caa0 <prvIdleTask+0x8>
 800cabe:	bf00      	nop
 800cac0:	20006118 	.word	0x20006118
 800cac4:	e000ed04 	.word	0xe000ed04

0800cac8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cace:	2300      	movs	r3, #0
 800cad0:	607b      	str	r3, [r7, #4]
 800cad2:	e00c      	b.n	800caee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	4613      	mov	r3, r2
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	4413      	add	r3, r2
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	4a12      	ldr	r2, [pc, #72]	@ (800cb28 <prvInitialiseTaskLists+0x60>)
 800cae0:	4413      	add	r3, r2
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fe fcae 	bl	800b444 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	3301      	adds	r3, #1
 800caec:	607b      	str	r3, [r7, #4]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2b37      	cmp	r3, #55	@ 0x37
 800caf2:	d9ef      	bls.n	800cad4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800caf4:	480d      	ldr	r0, [pc, #52]	@ (800cb2c <prvInitialiseTaskLists+0x64>)
 800caf6:	f7fe fca5 	bl	800b444 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cafa:	480d      	ldr	r0, [pc, #52]	@ (800cb30 <prvInitialiseTaskLists+0x68>)
 800cafc:	f7fe fca2 	bl	800b444 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb00:	480c      	ldr	r0, [pc, #48]	@ (800cb34 <prvInitialiseTaskLists+0x6c>)
 800cb02:	f7fe fc9f 	bl	800b444 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb06:	480c      	ldr	r0, [pc, #48]	@ (800cb38 <prvInitialiseTaskLists+0x70>)
 800cb08:	f7fe fc9c 	bl	800b444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cb0c:	480b      	ldr	r0, [pc, #44]	@ (800cb3c <prvInitialiseTaskLists+0x74>)
 800cb0e:	f7fe fc99 	bl	800b444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cb12:	4b0b      	ldr	r3, [pc, #44]	@ (800cb40 <prvInitialiseTaskLists+0x78>)
 800cb14:	4a05      	ldr	r2, [pc, #20]	@ (800cb2c <prvInitialiseTaskLists+0x64>)
 800cb16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cb18:	4b0a      	ldr	r3, [pc, #40]	@ (800cb44 <prvInitialiseTaskLists+0x7c>)
 800cb1a:	4a05      	ldr	r2, [pc, #20]	@ (800cb30 <prvInitialiseTaskLists+0x68>)
 800cb1c:	601a      	str	r2, [r3, #0]
}
 800cb1e:	bf00      	nop
 800cb20:	3708      	adds	r7, #8
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	20006118 	.word	0x20006118
 800cb2c:	20006578 	.word	0x20006578
 800cb30:	2000658c 	.word	0x2000658c
 800cb34:	200065a8 	.word	0x200065a8
 800cb38:	200065bc 	.word	0x200065bc
 800cb3c:	200065d4 	.word	0x200065d4
 800cb40:	200065a0 	.word	0x200065a0
 800cb44:	200065a4 	.word	0x200065a4

0800cb48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb4e:	e019      	b.n	800cb84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cb50:	f000 fde2 	bl	800d718 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb54:	4b10      	ldr	r3, [pc, #64]	@ (800cb98 <prvCheckTasksWaitingTermination+0x50>)
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	3304      	adds	r3, #4
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7fe fcf9 	bl	800b558 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cb66:	4b0d      	ldr	r3, [pc, #52]	@ (800cb9c <prvCheckTasksWaitingTermination+0x54>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	3b01      	subs	r3, #1
 800cb6c:	4a0b      	ldr	r2, [pc, #44]	@ (800cb9c <prvCheckTasksWaitingTermination+0x54>)
 800cb6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cb70:	4b0b      	ldr	r3, [pc, #44]	@ (800cba0 <prvCheckTasksWaitingTermination+0x58>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	3b01      	subs	r3, #1
 800cb76:	4a0a      	ldr	r2, [pc, #40]	@ (800cba0 <prvCheckTasksWaitingTermination+0x58>)
 800cb78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cb7a:	f000 fdff 	bl	800d77c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 f810 	bl	800cba4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb84:	4b06      	ldr	r3, [pc, #24]	@ (800cba0 <prvCheckTasksWaitingTermination+0x58>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d1e1      	bne.n	800cb50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cb8c:	bf00      	nop
 800cb8e:	bf00      	nop
 800cb90:	3708      	adds	r7, #8
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	200065bc 	.word	0x200065bc
 800cb9c:	200065e8 	.word	0x200065e8
 800cba0:	200065d0 	.word	0x200065d0

0800cba4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d108      	bne.n	800cbc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f000 ff9c 	bl	800daf8 <vPortFree>
				vPortFree( pxTCB );
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f000 ff99 	bl	800daf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cbc6:	e019      	b.n	800cbfc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d103      	bne.n	800cbda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 ff90 	bl	800daf8 <vPortFree>
	}
 800cbd8:	e010      	b.n	800cbfc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800cbe0:	2b02      	cmp	r3, #2
 800cbe2:	d00b      	beq.n	800cbfc <prvDeleteTCB+0x58>
	__asm volatile
 800cbe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbe8:	f383 8811 	msr	BASEPRI, r3
 800cbec:	f3bf 8f6f 	isb	sy
 800cbf0:	f3bf 8f4f 	dsb	sy
 800cbf4:	60fb      	str	r3, [r7, #12]
}
 800cbf6:	bf00      	nop
 800cbf8:	bf00      	nop
 800cbfa:	e7fd      	b.n	800cbf8 <prvDeleteTCB+0x54>
	}
 800cbfc:	bf00      	nop
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc0a:	4b0c      	ldr	r3, [pc, #48]	@ (800cc3c <prvResetNextTaskUnblockTime+0x38>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d104      	bne.n	800cc1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc14:	4b0a      	ldr	r3, [pc, #40]	@ (800cc40 <prvResetNextTaskUnblockTime+0x3c>)
 800cc16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cc1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cc1c:	e008      	b.n	800cc30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc1e:	4b07      	ldr	r3, [pc, #28]	@ (800cc3c <prvResetNextTaskUnblockTime+0x38>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	4a04      	ldr	r2, [pc, #16]	@ (800cc40 <prvResetNextTaskUnblockTime+0x3c>)
 800cc2e:	6013      	str	r3, [r2, #0]
}
 800cc30:	bf00      	nop
 800cc32:	370c      	adds	r7, #12
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr
 800cc3c:	200065a0 	.word	0x200065a0
 800cc40:	20006608 	.word	0x20006608

0800cc44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cc4a:	4b0b      	ldr	r3, [pc, #44]	@ (800cc78 <xTaskGetSchedulerState+0x34>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d102      	bne.n	800cc58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cc52:	2301      	movs	r3, #1
 800cc54:	607b      	str	r3, [r7, #4]
 800cc56:	e008      	b.n	800cc6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc58:	4b08      	ldr	r3, [pc, #32]	@ (800cc7c <xTaskGetSchedulerState+0x38>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d102      	bne.n	800cc66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cc60:	2302      	movs	r3, #2
 800cc62:	607b      	str	r3, [r7, #4]
 800cc64:	e001      	b.n	800cc6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cc66:	2300      	movs	r3, #0
 800cc68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cc6a:	687b      	ldr	r3, [r7, #4]
	}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr
 800cc78:	200065f4 	.word	0x200065f4
 800cc7c:	20006610 	.word	0x20006610

0800cc80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b086      	sub	sp, #24
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d058      	beq.n	800cd48 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cc96:	4b2f      	ldr	r3, [pc, #188]	@ (800cd54 <xTaskPriorityDisinherit+0xd4>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	693a      	ldr	r2, [r7, #16]
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d00b      	beq.n	800ccb8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca4:	f383 8811 	msr	BASEPRI, r3
 800cca8:	f3bf 8f6f 	isb	sy
 800ccac:	f3bf 8f4f 	dsb	sy
 800ccb0:	60fb      	str	r3, [r7, #12]
}
 800ccb2:	bf00      	nop
 800ccb4:	bf00      	nop
 800ccb6:	e7fd      	b.n	800ccb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d10b      	bne.n	800ccd8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ccc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	60bb      	str	r3, [r7, #8]
}
 800ccd2:	bf00      	nop
 800ccd4:	bf00      	nop
 800ccd6:	e7fd      	b.n	800ccd4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccdc:	1e5a      	subs	r2, r3, #1
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d02c      	beq.n	800cd48 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d128      	bne.n	800cd48 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	3304      	adds	r3, #4
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fe fc2c 	bl	800b558 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd18:	4b0f      	ldr	r3, [pc, #60]	@ (800cd58 <xTaskPriorityDisinherit+0xd8>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d903      	bls.n	800cd28 <xTaskPriorityDisinherit+0xa8>
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd24:	4a0c      	ldr	r2, [pc, #48]	@ (800cd58 <xTaskPriorityDisinherit+0xd8>)
 800cd26:	6013      	str	r3, [r2, #0]
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	4413      	add	r3, r2
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	4a09      	ldr	r2, [pc, #36]	@ (800cd5c <xTaskPriorityDisinherit+0xdc>)
 800cd36:	441a      	add	r2, r3
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	3304      	adds	r3, #4
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	4610      	mov	r0, r2
 800cd40:	f7fe fbad 	bl	800b49e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cd44:	2301      	movs	r3, #1
 800cd46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cd48:	697b      	ldr	r3, [r7, #20]
	}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3718      	adds	r7, #24
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	20006114 	.word	0x20006114
 800cd58:	200065f0 	.word	0x200065f0
 800cd5c:	20006118 	.word	0x20006118

0800cd60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cd6a:	4b21      	ldr	r3, [pc, #132]	@ (800cdf0 <prvAddCurrentTaskToDelayedList+0x90>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd70:	4b20      	ldr	r3, [pc, #128]	@ (800cdf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	3304      	adds	r3, #4
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7fe fbee 	bl	800b558 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd82:	d10a      	bne.n	800cd9a <prvAddCurrentTaskToDelayedList+0x3a>
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d007      	beq.n	800cd9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd8a:	4b1a      	ldr	r3, [pc, #104]	@ (800cdf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	3304      	adds	r3, #4
 800cd90:	4619      	mov	r1, r3
 800cd92:	4819      	ldr	r0, [pc, #100]	@ (800cdf8 <prvAddCurrentTaskToDelayedList+0x98>)
 800cd94:	f7fe fb83 	bl	800b49e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cd98:	e026      	b.n	800cde8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	4413      	add	r3, r2
 800cda0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cda2:	4b14      	ldr	r3, [pc, #80]	@ (800cdf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	68ba      	ldr	r2, [r7, #8]
 800cda8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cdaa:	68ba      	ldr	r2, [r7, #8]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d209      	bcs.n	800cdc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdb2:	4b12      	ldr	r3, [pc, #72]	@ (800cdfc <prvAddCurrentTaskToDelayedList+0x9c>)
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	4b0f      	ldr	r3, [pc, #60]	@ (800cdf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	3304      	adds	r3, #4
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	4610      	mov	r0, r2
 800cdc0:	f7fe fb91 	bl	800b4e6 <vListInsert>
}
 800cdc4:	e010      	b.n	800cde8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdc6:	4b0e      	ldr	r3, [pc, #56]	@ (800ce00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	4b0a      	ldr	r3, [pc, #40]	@ (800cdf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	3304      	adds	r3, #4
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	4610      	mov	r0, r2
 800cdd4:	f7fe fb87 	bl	800b4e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cdd8:	4b0a      	ldr	r3, [pc, #40]	@ (800ce04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68ba      	ldr	r2, [r7, #8]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d202      	bcs.n	800cde8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cde2:	4a08      	ldr	r2, [pc, #32]	@ (800ce04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	6013      	str	r3, [r2, #0]
}
 800cde8:	bf00      	nop
 800cdea:	3710      	adds	r7, #16
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	200065ec 	.word	0x200065ec
 800cdf4:	20006114 	.word	0x20006114
 800cdf8:	200065d4 	.word	0x200065d4
 800cdfc:	200065a4 	.word	0x200065a4
 800ce00:	200065a0 	.word	0x200065a0
 800ce04:	20006608 	.word	0x20006608

0800ce08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b08a      	sub	sp, #40	@ 0x28
 800ce0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ce12:	f000 fb13 	bl	800d43c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ce16:	4b1d      	ldr	r3, [pc, #116]	@ (800ce8c <xTimerCreateTimerTask+0x84>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d021      	beq.n	800ce62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ce22:	2300      	movs	r3, #0
 800ce24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ce26:	1d3a      	adds	r2, r7, #4
 800ce28:	f107 0108 	add.w	r1, r7, #8
 800ce2c:	f107 030c 	add.w	r3, r7, #12
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7fe faed 	bl	800b410 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ce36:	6879      	ldr	r1, [r7, #4]
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	68fa      	ldr	r2, [r7, #12]
 800ce3c:	9202      	str	r2, [sp, #8]
 800ce3e:	9301      	str	r3, [sp, #4]
 800ce40:	2302      	movs	r3, #2
 800ce42:	9300      	str	r3, [sp, #0]
 800ce44:	2300      	movs	r3, #0
 800ce46:	460a      	mov	r2, r1
 800ce48:	4911      	ldr	r1, [pc, #68]	@ (800ce90 <xTimerCreateTimerTask+0x88>)
 800ce4a:	4812      	ldr	r0, [pc, #72]	@ (800ce94 <xTimerCreateTimerTask+0x8c>)
 800ce4c:	f7ff f8a8 	bl	800bfa0 <xTaskCreateStatic>
 800ce50:	4603      	mov	r3, r0
 800ce52:	4a11      	ldr	r2, [pc, #68]	@ (800ce98 <xTimerCreateTimerTask+0x90>)
 800ce54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ce56:	4b10      	ldr	r3, [pc, #64]	@ (800ce98 <xTimerCreateTimerTask+0x90>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d001      	beq.n	800ce62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10b      	bne.n	800ce80 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ce68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce6c:	f383 8811 	msr	BASEPRI, r3
 800ce70:	f3bf 8f6f 	isb	sy
 800ce74:	f3bf 8f4f 	dsb	sy
 800ce78:	613b      	str	r3, [r7, #16]
}
 800ce7a:	bf00      	nop
 800ce7c:	bf00      	nop
 800ce7e:	e7fd      	b.n	800ce7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ce80:	697b      	ldr	r3, [r7, #20]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3718      	adds	r7, #24
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	20006644 	.word	0x20006644
 800ce90:	0801ed64 	.word	0x0801ed64
 800ce94:	0800cfd5 	.word	0x0800cfd5
 800ce98:	20006648 	.word	0x20006648

0800ce9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b08a      	sub	sp, #40	@ 0x28
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	607a      	str	r2, [r7, #4]
 800cea8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d10b      	bne.n	800cecc <xTimerGenericCommand+0x30>
	__asm volatile
 800ceb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb8:	f383 8811 	msr	BASEPRI, r3
 800cebc:	f3bf 8f6f 	isb	sy
 800cec0:	f3bf 8f4f 	dsb	sy
 800cec4:	623b      	str	r3, [r7, #32]
}
 800cec6:	bf00      	nop
 800cec8:	bf00      	nop
 800ceca:	e7fd      	b.n	800cec8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cecc:	4b19      	ldr	r3, [pc, #100]	@ (800cf34 <xTimerGenericCommand+0x98>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d02a      	beq.n	800cf2a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	2b05      	cmp	r3, #5
 800cee4:	dc18      	bgt.n	800cf18 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cee6:	f7ff fead 	bl	800cc44 <xTaskGetSchedulerState>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b02      	cmp	r3, #2
 800ceee:	d109      	bne.n	800cf04 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cef0:	4b10      	ldr	r3, [pc, #64]	@ (800cf34 <xTimerGenericCommand+0x98>)
 800cef2:	6818      	ldr	r0, [r3, #0]
 800cef4:	f107 0110 	add.w	r1, r7, #16
 800cef8:	2300      	movs	r3, #0
 800cefa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cefc:	f7fe fc60 	bl	800b7c0 <xQueueGenericSend>
 800cf00:	6278      	str	r0, [r7, #36]	@ 0x24
 800cf02:	e012      	b.n	800cf2a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cf04:	4b0b      	ldr	r3, [pc, #44]	@ (800cf34 <xTimerGenericCommand+0x98>)
 800cf06:	6818      	ldr	r0, [r3, #0]
 800cf08:	f107 0110 	add.w	r1, r7, #16
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	2200      	movs	r2, #0
 800cf10:	f7fe fc56 	bl	800b7c0 <xQueueGenericSend>
 800cf14:	6278      	str	r0, [r7, #36]	@ 0x24
 800cf16:	e008      	b.n	800cf2a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cf18:	4b06      	ldr	r3, [pc, #24]	@ (800cf34 <xTimerGenericCommand+0x98>)
 800cf1a:	6818      	ldr	r0, [r3, #0]
 800cf1c:	f107 0110 	add.w	r1, r7, #16
 800cf20:	2300      	movs	r3, #0
 800cf22:	683a      	ldr	r2, [r7, #0]
 800cf24:	f7fe fd4e 	bl	800b9c4 <xQueueGenericSendFromISR>
 800cf28:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cf2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3728      	adds	r7, #40	@ 0x28
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	20006644 	.word	0x20006644

0800cf38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b088      	sub	sp, #32
 800cf3c:	af02      	add	r7, sp, #8
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf42:	4b23      	ldr	r3, [pc, #140]	@ (800cfd0 <prvProcessExpiredTimer+0x98>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	3304      	adds	r3, #4
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7fe fb01 	bl	800b558 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf5c:	f003 0304 	and.w	r3, r3, #4
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d023      	beq.n	800cfac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	699a      	ldr	r2, [r3, #24]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	18d1      	adds	r1, r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	683a      	ldr	r2, [r7, #0]
 800cf70:	6978      	ldr	r0, [r7, #20]
 800cf72:	f000 f8d5 	bl	800d120 <prvInsertTimerInActiveList>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d020      	beq.n	800cfbe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	2300      	movs	r3, #0
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	2100      	movs	r1, #0
 800cf86:	6978      	ldr	r0, [r7, #20]
 800cf88:	f7ff ff88 	bl	800ce9c <xTimerGenericCommand>
 800cf8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d114      	bne.n	800cfbe <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cf94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf98:	f383 8811 	msr	BASEPRI, r3
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	f3bf 8f4f 	dsb	sy
 800cfa4:	60fb      	str	r3, [r7, #12]
}
 800cfa6:	bf00      	nop
 800cfa8:	bf00      	nop
 800cfaa:	e7fd      	b.n	800cfa8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cfb2:	f023 0301 	bic.w	r3, r3, #1
 800cfb6:	b2da      	uxtb	r2, r3
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	6a1b      	ldr	r3, [r3, #32]
 800cfc2:	6978      	ldr	r0, [r7, #20]
 800cfc4:	4798      	blx	r3
}
 800cfc6:	bf00      	nop
 800cfc8:	3718      	adds	r7, #24
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	2000663c 	.word	0x2000663c

0800cfd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cfdc:	f107 0308 	add.w	r3, r7, #8
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f000 f859 	bl	800d098 <prvGetNextExpireTime>
 800cfe6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	4619      	mov	r1, r3
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f000 f805 	bl	800cffc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cff2:	f000 f8d7 	bl	800d1a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cff6:	bf00      	nop
 800cff8:	e7f0      	b.n	800cfdc <prvTimerTask+0x8>
	...

0800cffc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d006:	f7ff fa0f 	bl	800c428 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d00a:	f107 0308 	add.w	r3, r7, #8
 800d00e:	4618      	mov	r0, r3
 800d010:	f000 f866 	bl	800d0e0 <prvSampleTimeNow>
 800d014:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d130      	bne.n	800d07e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d10a      	bne.n	800d038 <prvProcessTimerOrBlockTask+0x3c>
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	429a      	cmp	r2, r3
 800d028:	d806      	bhi.n	800d038 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d02a:	f7ff fa0b 	bl	800c444 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d02e:	68f9      	ldr	r1, [r7, #12]
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f7ff ff81 	bl	800cf38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d036:	e024      	b.n	800d082 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d008      	beq.n	800d050 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d03e:	4b13      	ldr	r3, [pc, #76]	@ (800d08c <prvProcessTimerOrBlockTask+0x90>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d101      	bne.n	800d04c <prvProcessTimerOrBlockTask+0x50>
 800d048:	2301      	movs	r3, #1
 800d04a:	e000      	b.n	800d04e <prvProcessTimerOrBlockTask+0x52>
 800d04c:	2300      	movs	r3, #0
 800d04e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d050:	4b0f      	ldr	r3, [pc, #60]	@ (800d090 <prvProcessTimerOrBlockTask+0x94>)
 800d052:	6818      	ldr	r0, [r3, #0]
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	1ad3      	subs	r3, r2, r3
 800d05a:	683a      	ldr	r2, [r7, #0]
 800d05c:	4619      	mov	r1, r3
 800d05e:	f7fe ff6b 	bl	800bf38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d062:	f7ff f9ef 	bl	800c444 <xTaskResumeAll>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d10a      	bne.n	800d082 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d06c:	4b09      	ldr	r3, [pc, #36]	@ (800d094 <prvProcessTimerOrBlockTask+0x98>)
 800d06e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d072:	601a      	str	r2, [r3, #0]
 800d074:	f3bf 8f4f 	dsb	sy
 800d078:	f3bf 8f6f 	isb	sy
}
 800d07c:	e001      	b.n	800d082 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d07e:	f7ff f9e1 	bl	800c444 <xTaskResumeAll>
}
 800d082:	bf00      	nop
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	20006640 	.word	0x20006640
 800d090:	20006644 	.word	0x20006644
 800d094:	e000ed04 	.word	0xe000ed04

0800d098 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d098:	b480      	push	{r7}
 800d09a:	b085      	sub	sp, #20
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d0a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d0dc <prvGetNextExpireTime+0x44>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d101      	bne.n	800d0ae <prvGetNextExpireTime+0x16>
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	e000      	b.n	800d0b0 <prvGetNextExpireTime+0x18>
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d105      	bne.n	800d0c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0bc:	4b07      	ldr	r3, [pc, #28]	@ (800d0dc <prvGetNextExpireTime+0x44>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	60fb      	str	r3, [r7, #12]
 800d0c6:	e001      	b.n	800d0cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3714      	adds	r7, #20
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop
 800d0dc:	2000663c 	.word	0x2000663c

0800d0e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d0e8:	f7ff fa4a 	bl	800c580 <xTaskGetTickCount>
 800d0ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d0ee:	4b0b      	ldr	r3, [pc, #44]	@ (800d11c <prvSampleTimeNow+0x3c>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	68fa      	ldr	r2, [r7, #12]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d205      	bcs.n	800d104 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d0f8:	f000 f93a 	bl	800d370 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2201      	movs	r2, #1
 800d100:	601a      	str	r2, [r3, #0]
 800d102:	e002      	b.n	800d10a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d10a:	4a04      	ldr	r2, [pc, #16]	@ (800d11c <prvSampleTimeNow+0x3c>)
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d110:	68fb      	ldr	r3, [r7, #12]
}
 800d112:	4618      	mov	r0, r3
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	2000664c 	.word	0x2000664c

0800d120 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b086      	sub	sp, #24
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	607a      	str	r2, [r7, #4]
 800d12c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d12e:	2300      	movs	r3, #0
 800d130:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	68ba      	ldr	r2, [r7, #8]
 800d136:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	68fa      	ldr	r2, [r7, #12]
 800d13c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d13e:	68ba      	ldr	r2, [r7, #8]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	429a      	cmp	r2, r3
 800d144:	d812      	bhi.n	800d16c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d146:	687a      	ldr	r2, [r7, #4]
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	1ad2      	subs	r2, r2, r3
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	699b      	ldr	r3, [r3, #24]
 800d150:	429a      	cmp	r2, r3
 800d152:	d302      	bcc.n	800d15a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d154:	2301      	movs	r3, #1
 800d156:	617b      	str	r3, [r7, #20]
 800d158:	e01b      	b.n	800d192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d15a:	4b10      	ldr	r3, [pc, #64]	@ (800d19c <prvInsertTimerInActiveList+0x7c>)
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	3304      	adds	r3, #4
 800d162:	4619      	mov	r1, r3
 800d164:	4610      	mov	r0, r2
 800d166:	f7fe f9be 	bl	800b4e6 <vListInsert>
 800d16a:	e012      	b.n	800d192 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	429a      	cmp	r2, r3
 800d172:	d206      	bcs.n	800d182 <prvInsertTimerInActiveList+0x62>
 800d174:	68ba      	ldr	r2, [r7, #8]
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	429a      	cmp	r2, r3
 800d17a:	d302      	bcc.n	800d182 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d17c:	2301      	movs	r3, #1
 800d17e:	617b      	str	r3, [r7, #20]
 800d180:	e007      	b.n	800d192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d182:	4b07      	ldr	r3, [pc, #28]	@ (800d1a0 <prvInsertTimerInActiveList+0x80>)
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	3304      	adds	r3, #4
 800d18a:	4619      	mov	r1, r3
 800d18c:	4610      	mov	r0, r2
 800d18e:	f7fe f9aa 	bl	800b4e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d192:	697b      	ldr	r3, [r7, #20]
}
 800d194:	4618      	mov	r0, r3
 800d196:	3718      	adds	r7, #24
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}
 800d19c:	20006640 	.word	0x20006640
 800d1a0:	2000663c 	.word	0x2000663c

0800d1a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b08e      	sub	sp, #56	@ 0x38
 800d1a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d1aa:	e0ce      	b.n	800d34a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	da19      	bge.n	800d1e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d1b2:	1d3b      	adds	r3, r7, #4
 800d1b4:	3304      	adds	r3, #4
 800d1b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d10b      	bne.n	800d1d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1c2:	f383 8811 	msr	BASEPRI, r3
 800d1c6:	f3bf 8f6f 	isb	sy
 800d1ca:	f3bf 8f4f 	dsb	sy
 800d1ce:	61fb      	str	r3, [r7, #28]
}
 800d1d0:	bf00      	nop
 800d1d2:	bf00      	nop
 800d1d4:	e7fd      	b.n	800d1d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1dc:	6850      	ldr	r0, [r2, #4]
 800d1de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1e0:	6892      	ldr	r2, [r2, #8]
 800d1e2:	4611      	mov	r1, r2
 800d1e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f2c0 80ae 	blt.w	800d34a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f4:	695b      	ldr	r3, [r3, #20]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d004      	beq.n	800d204 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1fc:	3304      	adds	r3, #4
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7fe f9aa 	bl	800b558 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d204:	463b      	mov	r3, r7
 800d206:	4618      	mov	r0, r3
 800d208:	f7ff ff6a 	bl	800d0e0 <prvSampleTimeNow>
 800d20c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2b09      	cmp	r3, #9
 800d212:	f200 8097 	bhi.w	800d344 <prvProcessReceivedCommands+0x1a0>
 800d216:	a201      	add	r2, pc, #4	@ (adr r2, 800d21c <prvProcessReceivedCommands+0x78>)
 800d218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d21c:	0800d245 	.word	0x0800d245
 800d220:	0800d245 	.word	0x0800d245
 800d224:	0800d245 	.word	0x0800d245
 800d228:	0800d2bb 	.word	0x0800d2bb
 800d22c:	0800d2cf 	.word	0x0800d2cf
 800d230:	0800d31b 	.word	0x0800d31b
 800d234:	0800d245 	.word	0x0800d245
 800d238:	0800d245 	.word	0x0800d245
 800d23c:	0800d2bb 	.word	0x0800d2bb
 800d240:	0800d2cf 	.word	0x0800d2cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d246:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d24a:	f043 0301 	orr.w	r3, r3, #1
 800d24e:	b2da      	uxtb	r2, r3
 800d250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d252:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d256:	68ba      	ldr	r2, [r7, #8]
 800d258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d25a:	699b      	ldr	r3, [r3, #24]
 800d25c:	18d1      	adds	r1, r2, r3
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d262:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d264:	f7ff ff5c 	bl	800d120 <prvInsertTimerInActiveList>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d06c      	beq.n	800d348 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d270:	6a1b      	ldr	r3, [r3, #32]
 800d272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d274:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d278:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d27c:	f003 0304 	and.w	r3, r3, #4
 800d280:	2b00      	cmp	r3, #0
 800d282:	d061      	beq.n	800d348 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d284:	68ba      	ldr	r2, [r7, #8]
 800d286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	441a      	add	r2, r3
 800d28c:	2300      	movs	r3, #0
 800d28e:	9300      	str	r3, [sp, #0]
 800d290:	2300      	movs	r3, #0
 800d292:	2100      	movs	r1, #0
 800d294:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d296:	f7ff fe01 	bl	800ce9c <xTimerGenericCommand>
 800d29a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d29c:	6a3b      	ldr	r3, [r7, #32]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d152      	bne.n	800d348 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a6:	f383 8811 	msr	BASEPRI, r3
 800d2aa:	f3bf 8f6f 	isb	sy
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	61bb      	str	r3, [r7, #24]
}
 800d2b4:	bf00      	nop
 800d2b6:	bf00      	nop
 800d2b8:	e7fd      	b.n	800d2b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d2c0:	f023 0301 	bic.w	r3, r3, #1
 800d2c4:	b2da      	uxtb	r2, r3
 800d2c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d2cc:	e03d      	b.n	800d34a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d2d4:	f043 0301 	orr.w	r3, r3, #1
 800d2d8:	b2da      	uxtb	r2, r3
 800d2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d2e0:	68ba      	ldr	r2, [r7, #8]
 800d2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e8:	699b      	ldr	r3, [r3, #24]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d10b      	bne.n	800d306 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f2:	f383 8811 	msr	BASEPRI, r3
 800d2f6:	f3bf 8f6f 	isb	sy
 800d2fa:	f3bf 8f4f 	dsb	sy
 800d2fe:	617b      	str	r3, [r7, #20]
}
 800d300:	bf00      	nop
 800d302:	bf00      	nop
 800d304:	e7fd      	b.n	800d302 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d308:	699a      	ldr	r2, [r3, #24]
 800d30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30c:	18d1      	adds	r1, r2, r3
 800d30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d312:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d314:	f7ff ff04 	bl	800d120 <prvInsertTimerInActiveList>
					break;
 800d318:	e017      	b.n	800d34a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d31c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d320:	f003 0302 	and.w	r3, r3, #2
 800d324:	2b00      	cmp	r3, #0
 800d326:	d103      	bne.n	800d330 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d32a:	f000 fbe5 	bl	800daf8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d32e:	e00c      	b.n	800d34a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d332:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d336:	f023 0301 	bic.w	r3, r3, #1
 800d33a:	b2da      	uxtb	r2, r3
 800d33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d33e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d342:	e002      	b.n	800d34a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d344:	bf00      	nop
 800d346:	e000      	b.n	800d34a <prvProcessReceivedCommands+0x1a6>
					break;
 800d348:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d34a:	4b08      	ldr	r3, [pc, #32]	@ (800d36c <prvProcessReceivedCommands+0x1c8>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	1d39      	adds	r1, r7, #4
 800d350:	2200      	movs	r2, #0
 800d352:	4618      	mov	r0, r3
 800d354:	f7fe fbd4 	bl	800bb00 <xQueueReceive>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	f47f af26 	bne.w	800d1ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d360:	bf00      	nop
 800d362:	bf00      	nop
 800d364:	3730      	adds	r7, #48	@ 0x30
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	20006644 	.word	0x20006644

0800d370 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b088      	sub	sp, #32
 800d374:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d376:	e049      	b.n	800d40c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d378:	4b2e      	ldr	r3, [pc, #184]	@ (800d434 <prvSwitchTimerLists+0xc4>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d382:	4b2c      	ldr	r3, [pc, #176]	@ (800d434 <prvSwitchTimerLists+0xc4>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	3304      	adds	r3, #4
 800d390:	4618      	mov	r0, r3
 800d392:	f7fe f8e1 	bl	800b558 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	6a1b      	ldr	r3, [r3, #32]
 800d39a:	68f8      	ldr	r0, [r7, #12]
 800d39c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d3a4:	f003 0304 	and.w	r3, r3, #4
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d02f      	beq.n	800d40c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	699b      	ldr	r3, [r3, #24]
 800d3b0:	693a      	ldr	r2, [r7, #16]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d3b6:	68ba      	ldr	r2, [r7, #8]
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d90e      	bls.n	800d3dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	68ba      	ldr	r2, [r7, #8]
 800d3c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	68fa      	ldr	r2, [r7, #12]
 800d3c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d3ca:	4b1a      	ldr	r3, [pc, #104]	@ (800d434 <prvSwitchTimerLists+0xc4>)
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	3304      	adds	r3, #4
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	4610      	mov	r0, r2
 800d3d6:	f7fe f886 	bl	800b4e6 <vListInsert>
 800d3da:	e017      	b.n	800d40c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d3dc:	2300      	movs	r3, #0
 800d3de:	9300      	str	r3, [sp, #0]
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	693a      	ldr	r2, [r7, #16]
 800d3e4:	2100      	movs	r1, #0
 800d3e6:	68f8      	ldr	r0, [r7, #12]
 800d3e8:	f7ff fd58 	bl	800ce9c <xTimerGenericCommand>
 800d3ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d10b      	bne.n	800d40c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d3f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3f8:	f383 8811 	msr	BASEPRI, r3
 800d3fc:	f3bf 8f6f 	isb	sy
 800d400:	f3bf 8f4f 	dsb	sy
 800d404:	603b      	str	r3, [r7, #0]
}
 800d406:	bf00      	nop
 800d408:	bf00      	nop
 800d40a:	e7fd      	b.n	800d408 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d40c:	4b09      	ldr	r3, [pc, #36]	@ (800d434 <prvSwitchTimerLists+0xc4>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d1b0      	bne.n	800d378 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d416:	4b07      	ldr	r3, [pc, #28]	@ (800d434 <prvSwitchTimerLists+0xc4>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d41c:	4b06      	ldr	r3, [pc, #24]	@ (800d438 <prvSwitchTimerLists+0xc8>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a04      	ldr	r2, [pc, #16]	@ (800d434 <prvSwitchTimerLists+0xc4>)
 800d422:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d424:	4a04      	ldr	r2, [pc, #16]	@ (800d438 <prvSwitchTimerLists+0xc8>)
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	6013      	str	r3, [r2, #0]
}
 800d42a:	bf00      	nop
 800d42c:	3718      	adds	r7, #24
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	2000663c 	.word	0x2000663c
 800d438:	20006640 	.word	0x20006640

0800d43c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d442:	f000 f969 	bl	800d718 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d446:	4b15      	ldr	r3, [pc, #84]	@ (800d49c <prvCheckForValidListAndQueue+0x60>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d120      	bne.n	800d490 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d44e:	4814      	ldr	r0, [pc, #80]	@ (800d4a0 <prvCheckForValidListAndQueue+0x64>)
 800d450:	f7fd fff8 	bl	800b444 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d454:	4813      	ldr	r0, [pc, #76]	@ (800d4a4 <prvCheckForValidListAndQueue+0x68>)
 800d456:	f7fd fff5 	bl	800b444 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d45a:	4b13      	ldr	r3, [pc, #76]	@ (800d4a8 <prvCheckForValidListAndQueue+0x6c>)
 800d45c:	4a10      	ldr	r2, [pc, #64]	@ (800d4a0 <prvCheckForValidListAndQueue+0x64>)
 800d45e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d460:	4b12      	ldr	r3, [pc, #72]	@ (800d4ac <prvCheckForValidListAndQueue+0x70>)
 800d462:	4a10      	ldr	r2, [pc, #64]	@ (800d4a4 <prvCheckForValidListAndQueue+0x68>)
 800d464:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d466:	2300      	movs	r3, #0
 800d468:	9300      	str	r3, [sp, #0]
 800d46a:	4b11      	ldr	r3, [pc, #68]	@ (800d4b0 <prvCheckForValidListAndQueue+0x74>)
 800d46c:	4a11      	ldr	r2, [pc, #68]	@ (800d4b4 <prvCheckForValidListAndQueue+0x78>)
 800d46e:	2110      	movs	r1, #16
 800d470:	200a      	movs	r0, #10
 800d472:	f7fe f905 	bl	800b680 <xQueueGenericCreateStatic>
 800d476:	4603      	mov	r3, r0
 800d478:	4a08      	ldr	r2, [pc, #32]	@ (800d49c <prvCheckForValidListAndQueue+0x60>)
 800d47a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d47c:	4b07      	ldr	r3, [pc, #28]	@ (800d49c <prvCheckForValidListAndQueue+0x60>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d005      	beq.n	800d490 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d484:	4b05      	ldr	r3, [pc, #20]	@ (800d49c <prvCheckForValidListAndQueue+0x60>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	490b      	ldr	r1, [pc, #44]	@ (800d4b8 <prvCheckForValidListAndQueue+0x7c>)
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7fe fd2a 	bl	800bee4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d490:	f000 f974 	bl	800d77c <vPortExitCritical>
}
 800d494:	bf00      	nop
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	20006644 	.word	0x20006644
 800d4a0:	20006614 	.word	0x20006614
 800d4a4:	20006628 	.word	0x20006628
 800d4a8:	2000663c 	.word	0x2000663c
 800d4ac:	20006640 	.word	0x20006640
 800d4b0:	200066f0 	.word	0x200066f0
 800d4b4:	20006650 	.word	0x20006650
 800d4b8:	0801ed6c 	.word	0x0801ed6c

0800d4bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b085      	sub	sp, #20
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	60f8      	str	r0, [r7, #12]
 800d4c4:	60b9      	str	r1, [r7, #8]
 800d4c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	3b04      	subs	r3, #4
 800d4cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d4d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	3b04      	subs	r3, #4
 800d4da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	f023 0201 	bic.w	r2, r3, #1
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	3b04      	subs	r3, #4
 800d4ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d4ec:	4a0c      	ldr	r2, [pc, #48]	@ (800d520 <pxPortInitialiseStack+0x64>)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	3b14      	subs	r3, #20
 800d4f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d4f8:	687a      	ldr	r2, [r7, #4]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	3b04      	subs	r3, #4
 800d502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f06f 0202 	mvn.w	r2, #2
 800d50a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	3b20      	subs	r3, #32
 800d510:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d512:	68fb      	ldr	r3, [r7, #12]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3714      	adds	r7, #20
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr
 800d520:	0800d525 	.word	0x0800d525

0800d524 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d524:	b480      	push	{r7}
 800d526:	b085      	sub	sp, #20
 800d528:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d52a:	2300      	movs	r3, #0
 800d52c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d52e:	4b13      	ldr	r3, [pc, #76]	@ (800d57c <prvTaskExitError+0x58>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d536:	d00b      	beq.n	800d550 <prvTaskExitError+0x2c>
	__asm volatile
 800d538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d53c:	f383 8811 	msr	BASEPRI, r3
 800d540:	f3bf 8f6f 	isb	sy
 800d544:	f3bf 8f4f 	dsb	sy
 800d548:	60fb      	str	r3, [r7, #12]
}
 800d54a:	bf00      	nop
 800d54c:	bf00      	nop
 800d54e:	e7fd      	b.n	800d54c <prvTaskExitError+0x28>
	__asm volatile
 800d550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d554:	f383 8811 	msr	BASEPRI, r3
 800d558:	f3bf 8f6f 	isb	sy
 800d55c:	f3bf 8f4f 	dsb	sy
 800d560:	60bb      	str	r3, [r7, #8]
}
 800d562:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d564:	bf00      	nop
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d0fc      	beq.n	800d566 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d56c:	bf00      	nop
 800d56e:	bf00      	nop
 800d570:	3714      	adds	r7, #20
 800d572:	46bd      	mov	sp, r7
 800d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d578:	4770      	bx	lr
 800d57a:	bf00      	nop
 800d57c:	200000a0 	.word	0x200000a0

0800d580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d580:	4b07      	ldr	r3, [pc, #28]	@ (800d5a0 <pxCurrentTCBConst2>)
 800d582:	6819      	ldr	r1, [r3, #0]
 800d584:	6808      	ldr	r0, [r1, #0]
 800d586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d58a:	f380 8809 	msr	PSP, r0
 800d58e:	f3bf 8f6f 	isb	sy
 800d592:	f04f 0000 	mov.w	r0, #0
 800d596:	f380 8811 	msr	BASEPRI, r0
 800d59a:	4770      	bx	lr
 800d59c:	f3af 8000 	nop.w

0800d5a0 <pxCurrentTCBConst2>:
 800d5a0:	20006114 	.word	0x20006114
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d5a4:	bf00      	nop
 800d5a6:	bf00      	nop

0800d5a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d5a8:	4808      	ldr	r0, [pc, #32]	@ (800d5cc <prvPortStartFirstTask+0x24>)
 800d5aa:	6800      	ldr	r0, [r0, #0]
 800d5ac:	6800      	ldr	r0, [r0, #0]
 800d5ae:	f380 8808 	msr	MSP, r0
 800d5b2:	f04f 0000 	mov.w	r0, #0
 800d5b6:	f380 8814 	msr	CONTROL, r0
 800d5ba:	b662      	cpsie	i
 800d5bc:	b661      	cpsie	f
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	f3bf 8f6f 	isb	sy
 800d5c6:	df00      	svc	0
 800d5c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d5ca:	bf00      	nop
 800d5cc:	e000ed08 	.word	0xe000ed08

0800d5d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b086      	sub	sp, #24
 800d5d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d5d6:	4b47      	ldr	r3, [pc, #284]	@ (800d6f4 <xPortStartScheduler+0x124>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a47      	ldr	r2, [pc, #284]	@ (800d6f8 <xPortStartScheduler+0x128>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d10b      	bne.n	800d5f8 <xPortStartScheduler+0x28>
	__asm volatile
 800d5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5e4:	f383 8811 	msr	BASEPRI, r3
 800d5e8:	f3bf 8f6f 	isb	sy
 800d5ec:	f3bf 8f4f 	dsb	sy
 800d5f0:	613b      	str	r3, [r7, #16]
}
 800d5f2:	bf00      	nop
 800d5f4:	bf00      	nop
 800d5f6:	e7fd      	b.n	800d5f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d5f8:	4b3e      	ldr	r3, [pc, #248]	@ (800d6f4 <xPortStartScheduler+0x124>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a3f      	ldr	r2, [pc, #252]	@ (800d6fc <xPortStartScheduler+0x12c>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d10b      	bne.n	800d61a <xPortStartScheduler+0x4a>
	__asm volatile
 800d602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d606:	f383 8811 	msr	BASEPRI, r3
 800d60a:	f3bf 8f6f 	isb	sy
 800d60e:	f3bf 8f4f 	dsb	sy
 800d612:	60fb      	str	r3, [r7, #12]
}
 800d614:	bf00      	nop
 800d616:	bf00      	nop
 800d618:	e7fd      	b.n	800d616 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d61a:	4b39      	ldr	r3, [pc, #228]	@ (800d700 <xPortStartScheduler+0x130>)
 800d61c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	b2db      	uxtb	r3, r3
 800d624:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	22ff      	movs	r2, #255	@ 0xff
 800d62a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	b2db      	uxtb	r3, r3
 800d632:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d634:	78fb      	ldrb	r3, [r7, #3]
 800d636:	b2db      	uxtb	r3, r3
 800d638:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d63c:	b2da      	uxtb	r2, r3
 800d63e:	4b31      	ldr	r3, [pc, #196]	@ (800d704 <xPortStartScheduler+0x134>)
 800d640:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d642:	4b31      	ldr	r3, [pc, #196]	@ (800d708 <xPortStartScheduler+0x138>)
 800d644:	2207      	movs	r2, #7
 800d646:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d648:	e009      	b.n	800d65e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d64a:	4b2f      	ldr	r3, [pc, #188]	@ (800d708 <xPortStartScheduler+0x138>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	3b01      	subs	r3, #1
 800d650:	4a2d      	ldr	r2, [pc, #180]	@ (800d708 <xPortStartScheduler+0x138>)
 800d652:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d654:	78fb      	ldrb	r3, [r7, #3]
 800d656:	b2db      	uxtb	r3, r3
 800d658:	005b      	lsls	r3, r3, #1
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d65e:	78fb      	ldrb	r3, [r7, #3]
 800d660:	b2db      	uxtb	r3, r3
 800d662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d666:	2b80      	cmp	r3, #128	@ 0x80
 800d668:	d0ef      	beq.n	800d64a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d66a:	4b27      	ldr	r3, [pc, #156]	@ (800d708 <xPortStartScheduler+0x138>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f1c3 0307 	rsb	r3, r3, #7
 800d672:	2b04      	cmp	r3, #4
 800d674:	d00b      	beq.n	800d68e <xPortStartScheduler+0xbe>
	__asm volatile
 800d676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d67a:	f383 8811 	msr	BASEPRI, r3
 800d67e:	f3bf 8f6f 	isb	sy
 800d682:	f3bf 8f4f 	dsb	sy
 800d686:	60bb      	str	r3, [r7, #8]
}
 800d688:	bf00      	nop
 800d68a:	bf00      	nop
 800d68c:	e7fd      	b.n	800d68a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d68e:	4b1e      	ldr	r3, [pc, #120]	@ (800d708 <xPortStartScheduler+0x138>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	021b      	lsls	r3, r3, #8
 800d694:	4a1c      	ldr	r2, [pc, #112]	@ (800d708 <xPortStartScheduler+0x138>)
 800d696:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d698:	4b1b      	ldr	r3, [pc, #108]	@ (800d708 <xPortStartScheduler+0x138>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d6a0:	4a19      	ldr	r2, [pc, #100]	@ (800d708 <xPortStartScheduler+0x138>)
 800d6a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	b2da      	uxtb	r2, r3
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d6ac:	4b17      	ldr	r3, [pc, #92]	@ (800d70c <xPortStartScheduler+0x13c>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a16      	ldr	r2, [pc, #88]	@ (800d70c <xPortStartScheduler+0x13c>)
 800d6b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d6b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d6b8:	4b14      	ldr	r3, [pc, #80]	@ (800d70c <xPortStartScheduler+0x13c>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4a13      	ldr	r2, [pc, #76]	@ (800d70c <xPortStartScheduler+0x13c>)
 800d6be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d6c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d6c4:	f000 f8da 	bl	800d87c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d6c8:	4b11      	ldr	r3, [pc, #68]	@ (800d710 <xPortStartScheduler+0x140>)
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d6ce:	f000 f8f9 	bl	800d8c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d6d2:	4b10      	ldr	r3, [pc, #64]	@ (800d714 <xPortStartScheduler+0x144>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a0f      	ldr	r2, [pc, #60]	@ (800d714 <xPortStartScheduler+0x144>)
 800d6d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d6dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d6de:	f7ff ff63 	bl	800d5a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d6e2:	f7ff f817 	bl	800c714 <vTaskSwitchContext>
	prvTaskExitError();
 800d6e6:	f7ff ff1d 	bl	800d524 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d6ea:	2300      	movs	r3, #0
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3718      	adds	r7, #24
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	e000ed00 	.word	0xe000ed00
 800d6f8:	410fc271 	.word	0x410fc271
 800d6fc:	410fc270 	.word	0x410fc270
 800d700:	e000e400 	.word	0xe000e400
 800d704:	20006740 	.word	0x20006740
 800d708:	20006744 	.word	0x20006744
 800d70c:	e000ed20 	.word	0xe000ed20
 800d710:	200000a0 	.word	0x200000a0
 800d714:	e000ef34 	.word	0xe000ef34

0800d718 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d718:	b480      	push	{r7}
 800d71a:	b083      	sub	sp, #12
 800d71c:	af00      	add	r7, sp, #0
	__asm volatile
 800d71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d722:	f383 8811 	msr	BASEPRI, r3
 800d726:	f3bf 8f6f 	isb	sy
 800d72a:	f3bf 8f4f 	dsb	sy
 800d72e:	607b      	str	r3, [r7, #4]
}
 800d730:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d732:	4b10      	ldr	r3, [pc, #64]	@ (800d774 <vPortEnterCritical+0x5c>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	3301      	adds	r3, #1
 800d738:	4a0e      	ldr	r2, [pc, #56]	@ (800d774 <vPortEnterCritical+0x5c>)
 800d73a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d73c:	4b0d      	ldr	r3, [pc, #52]	@ (800d774 <vPortEnterCritical+0x5c>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2b01      	cmp	r3, #1
 800d742:	d110      	bne.n	800d766 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d744:	4b0c      	ldr	r3, [pc, #48]	@ (800d778 <vPortEnterCritical+0x60>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d00b      	beq.n	800d766 <vPortEnterCritical+0x4e>
	__asm volatile
 800d74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d752:	f383 8811 	msr	BASEPRI, r3
 800d756:	f3bf 8f6f 	isb	sy
 800d75a:	f3bf 8f4f 	dsb	sy
 800d75e:	603b      	str	r3, [r7, #0]
}
 800d760:	bf00      	nop
 800d762:	bf00      	nop
 800d764:	e7fd      	b.n	800d762 <vPortEnterCritical+0x4a>
	}
}
 800d766:	bf00      	nop
 800d768:	370c      	adds	r7, #12
 800d76a:	46bd      	mov	sp, r7
 800d76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d770:	4770      	bx	lr
 800d772:	bf00      	nop
 800d774:	200000a0 	.word	0x200000a0
 800d778:	e000ed04 	.word	0xe000ed04

0800d77c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d782:	4b12      	ldr	r3, [pc, #72]	@ (800d7cc <vPortExitCritical+0x50>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d10b      	bne.n	800d7a2 <vPortExitCritical+0x26>
	__asm volatile
 800d78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d78e:	f383 8811 	msr	BASEPRI, r3
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	f3bf 8f4f 	dsb	sy
 800d79a:	607b      	str	r3, [r7, #4]
}
 800d79c:	bf00      	nop
 800d79e:	bf00      	nop
 800d7a0:	e7fd      	b.n	800d79e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d7a2:	4b0a      	ldr	r3, [pc, #40]	@ (800d7cc <vPortExitCritical+0x50>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	3b01      	subs	r3, #1
 800d7a8:	4a08      	ldr	r2, [pc, #32]	@ (800d7cc <vPortExitCritical+0x50>)
 800d7aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d7ac:	4b07      	ldr	r3, [pc, #28]	@ (800d7cc <vPortExitCritical+0x50>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d105      	bne.n	800d7c0 <vPortExitCritical+0x44>
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	f383 8811 	msr	BASEPRI, r3
}
 800d7be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d7c0:	bf00      	nop
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr
 800d7cc:	200000a0 	.word	0x200000a0

0800d7d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d7d0:	f3ef 8009 	mrs	r0, PSP
 800d7d4:	f3bf 8f6f 	isb	sy
 800d7d8:	4b15      	ldr	r3, [pc, #84]	@ (800d830 <pxCurrentTCBConst>)
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	f01e 0f10 	tst.w	lr, #16
 800d7e0:	bf08      	it	eq
 800d7e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d7e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ea:	6010      	str	r0, [r2, #0]
 800d7ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d7f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d7f4:	f380 8811 	msr	BASEPRI, r0
 800d7f8:	f3bf 8f4f 	dsb	sy
 800d7fc:	f3bf 8f6f 	isb	sy
 800d800:	f7fe ff88 	bl	800c714 <vTaskSwitchContext>
 800d804:	f04f 0000 	mov.w	r0, #0
 800d808:	f380 8811 	msr	BASEPRI, r0
 800d80c:	bc09      	pop	{r0, r3}
 800d80e:	6819      	ldr	r1, [r3, #0]
 800d810:	6808      	ldr	r0, [r1, #0]
 800d812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d816:	f01e 0f10 	tst.w	lr, #16
 800d81a:	bf08      	it	eq
 800d81c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d820:	f380 8809 	msr	PSP, r0
 800d824:	f3bf 8f6f 	isb	sy
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	f3af 8000 	nop.w

0800d830 <pxCurrentTCBConst>:
 800d830:	20006114 	.word	0x20006114
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d834:	bf00      	nop
 800d836:	bf00      	nop

0800d838 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
	__asm volatile
 800d83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d842:	f383 8811 	msr	BASEPRI, r3
 800d846:	f3bf 8f6f 	isb	sy
 800d84a:	f3bf 8f4f 	dsb	sy
 800d84e:	607b      	str	r3, [r7, #4]
}
 800d850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d852:	f7fe fea5 	bl	800c5a0 <xTaskIncrementTick>
 800d856:	4603      	mov	r3, r0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d003      	beq.n	800d864 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d85c:	4b06      	ldr	r3, [pc, #24]	@ (800d878 <xPortSysTickHandler+0x40>)
 800d85e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d862:	601a      	str	r2, [r3, #0]
 800d864:	2300      	movs	r3, #0
 800d866:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	f383 8811 	msr	BASEPRI, r3
}
 800d86e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d870:	bf00      	nop
 800d872:	3708      	adds	r7, #8
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	e000ed04 	.word	0xe000ed04

0800d87c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d87c:	b480      	push	{r7}
 800d87e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d880:	4b0b      	ldr	r3, [pc, #44]	@ (800d8b0 <vPortSetupTimerInterrupt+0x34>)
 800d882:	2200      	movs	r2, #0
 800d884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d886:	4b0b      	ldr	r3, [pc, #44]	@ (800d8b4 <vPortSetupTimerInterrupt+0x38>)
 800d888:	2200      	movs	r2, #0
 800d88a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d88c:	4b0a      	ldr	r3, [pc, #40]	@ (800d8b8 <vPortSetupTimerInterrupt+0x3c>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a0a      	ldr	r2, [pc, #40]	@ (800d8bc <vPortSetupTimerInterrupt+0x40>)
 800d892:	fba2 2303 	umull	r2, r3, r2, r3
 800d896:	099b      	lsrs	r3, r3, #6
 800d898:	4a09      	ldr	r2, [pc, #36]	@ (800d8c0 <vPortSetupTimerInterrupt+0x44>)
 800d89a:	3b01      	subs	r3, #1
 800d89c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d89e:	4b04      	ldr	r3, [pc, #16]	@ (800d8b0 <vPortSetupTimerInterrupt+0x34>)
 800d8a0:	2207      	movs	r2, #7
 800d8a2:	601a      	str	r2, [r3, #0]
}
 800d8a4:	bf00      	nop
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	e000e010 	.word	0xe000e010
 800d8b4:	e000e018 	.word	0xe000e018
 800d8b8:	20000004 	.word	0x20000004
 800d8bc:	10624dd3 	.word	0x10624dd3
 800d8c0:	e000e014 	.word	0xe000e014

0800d8c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d8c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d8d4 <vPortEnableVFP+0x10>
 800d8c8:	6801      	ldr	r1, [r0, #0]
 800d8ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d8ce:	6001      	str	r1, [r0, #0]
 800d8d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d8d2:	bf00      	nop
 800d8d4:	e000ed88 	.word	0xe000ed88

0800d8d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d8d8:	b480      	push	{r7}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d8de:	f3ef 8305 	mrs	r3, IPSR
 800d8e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2b0f      	cmp	r3, #15
 800d8e8:	d915      	bls.n	800d916 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d8ea:	4a18      	ldr	r2, [pc, #96]	@ (800d94c <vPortValidateInterruptPriority+0x74>)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	4413      	add	r3, r2
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d8f4:	4b16      	ldr	r3, [pc, #88]	@ (800d950 <vPortValidateInterruptPriority+0x78>)
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	7afa      	ldrb	r2, [r7, #11]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d20b      	bcs.n	800d916 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d902:	f383 8811 	msr	BASEPRI, r3
 800d906:	f3bf 8f6f 	isb	sy
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	607b      	str	r3, [r7, #4]
}
 800d910:	bf00      	nop
 800d912:	bf00      	nop
 800d914:	e7fd      	b.n	800d912 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d916:	4b0f      	ldr	r3, [pc, #60]	@ (800d954 <vPortValidateInterruptPriority+0x7c>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d91e:	4b0e      	ldr	r3, [pc, #56]	@ (800d958 <vPortValidateInterruptPriority+0x80>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	429a      	cmp	r2, r3
 800d924:	d90b      	bls.n	800d93e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	603b      	str	r3, [r7, #0]
}
 800d938:	bf00      	nop
 800d93a:	bf00      	nop
 800d93c:	e7fd      	b.n	800d93a <vPortValidateInterruptPriority+0x62>
	}
 800d93e:	bf00      	nop
 800d940:	3714      	adds	r7, #20
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr
 800d94a:	bf00      	nop
 800d94c:	e000e3f0 	.word	0xe000e3f0
 800d950:	20006740 	.word	0x20006740
 800d954:	e000ed0c 	.word	0xe000ed0c
 800d958:	20006744 	.word	0x20006744

0800d95c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b08a      	sub	sp, #40	@ 0x28
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d964:	2300      	movs	r3, #0
 800d966:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d968:	f7fe fd5e 	bl	800c428 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d96c:	4b5c      	ldr	r3, [pc, #368]	@ (800dae0 <pvPortMalloc+0x184>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d101      	bne.n	800d978 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d974:	f000 f924 	bl	800dbc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d978:	4b5a      	ldr	r3, [pc, #360]	@ (800dae4 <pvPortMalloc+0x188>)
 800d97a:	681a      	ldr	r2, [r3, #0]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	4013      	ands	r3, r2
 800d980:	2b00      	cmp	r3, #0
 800d982:	f040 8095 	bne.w	800dab0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d01e      	beq.n	800d9ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d98c:	2208      	movs	r2, #8
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	4413      	add	r3, r2
 800d992:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f003 0307 	and.w	r3, r3, #7
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d015      	beq.n	800d9ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f023 0307 	bic.w	r3, r3, #7
 800d9a4:	3308      	adds	r3, #8
 800d9a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f003 0307 	and.w	r3, r3, #7
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d00b      	beq.n	800d9ca <pvPortMalloc+0x6e>
	__asm volatile
 800d9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9b6:	f383 8811 	msr	BASEPRI, r3
 800d9ba:	f3bf 8f6f 	isb	sy
 800d9be:	f3bf 8f4f 	dsb	sy
 800d9c2:	617b      	str	r3, [r7, #20]
}
 800d9c4:	bf00      	nop
 800d9c6:	bf00      	nop
 800d9c8:	e7fd      	b.n	800d9c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d06f      	beq.n	800dab0 <pvPortMalloc+0x154>
 800d9d0:	4b45      	ldr	r3, [pc, #276]	@ (800dae8 <pvPortMalloc+0x18c>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	687a      	ldr	r2, [r7, #4]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d86a      	bhi.n	800dab0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d9da:	4b44      	ldr	r3, [pc, #272]	@ (800daec <pvPortMalloc+0x190>)
 800d9dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d9de:	4b43      	ldr	r3, [pc, #268]	@ (800daec <pvPortMalloc+0x190>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9e4:	e004      	b.n	800d9f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d903      	bls.n	800da02 <pvPortMalloc+0xa6>
 800d9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d1f1      	bne.n	800d9e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800da02:	4b37      	ldr	r3, [pc, #220]	@ (800dae0 <pvPortMalloc+0x184>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da08:	429a      	cmp	r2, r3
 800da0a:	d051      	beq.n	800dab0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800da0c:	6a3b      	ldr	r3, [r7, #32]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2208      	movs	r2, #8
 800da12:	4413      	add	r3, r2
 800da14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	6a3b      	ldr	r3, [r7, #32]
 800da1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800da1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da20:	685a      	ldr	r2, [r3, #4]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	1ad2      	subs	r2, r2, r3
 800da26:	2308      	movs	r3, #8
 800da28:	005b      	lsls	r3, r3, #1
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d920      	bls.n	800da70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800da2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	4413      	add	r3, r2
 800da34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da36:	69bb      	ldr	r3, [r7, #24]
 800da38:	f003 0307 	and.w	r3, r3, #7
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d00b      	beq.n	800da58 <pvPortMalloc+0xfc>
	__asm volatile
 800da40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da44:	f383 8811 	msr	BASEPRI, r3
 800da48:	f3bf 8f6f 	isb	sy
 800da4c:	f3bf 8f4f 	dsb	sy
 800da50:	613b      	str	r3, [r7, #16]
}
 800da52:	bf00      	nop
 800da54:	bf00      	nop
 800da56:	e7fd      	b.n	800da54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da5a:	685a      	ldr	r2, [r3, #4]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	1ad2      	subs	r2, r2, r3
 800da60:	69bb      	ldr	r3, [r7, #24]
 800da62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da66:	687a      	ldr	r2, [r7, #4]
 800da68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800da6a:	69b8      	ldr	r0, [r7, #24]
 800da6c:	f000 f90a 	bl	800dc84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800da70:	4b1d      	ldr	r3, [pc, #116]	@ (800dae8 <pvPortMalloc+0x18c>)
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da76:	685b      	ldr	r3, [r3, #4]
 800da78:	1ad3      	subs	r3, r2, r3
 800da7a:	4a1b      	ldr	r2, [pc, #108]	@ (800dae8 <pvPortMalloc+0x18c>)
 800da7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800da7e:	4b1a      	ldr	r3, [pc, #104]	@ (800dae8 <pvPortMalloc+0x18c>)
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	4b1b      	ldr	r3, [pc, #108]	@ (800daf0 <pvPortMalloc+0x194>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	429a      	cmp	r2, r3
 800da88:	d203      	bcs.n	800da92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800da8a:	4b17      	ldr	r3, [pc, #92]	@ (800dae8 <pvPortMalloc+0x18c>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a18      	ldr	r2, [pc, #96]	@ (800daf0 <pvPortMalloc+0x194>)
 800da90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800da92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da94:	685a      	ldr	r2, [r3, #4]
 800da96:	4b13      	ldr	r3, [pc, #76]	@ (800dae4 <pvPortMalloc+0x188>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	431a      	orrs	r2, r3
 800da9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800daa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa2:	2200      	movs	r2, #0
 800daa4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800daa6:	4b13      	ldr	r3, [pc, #76]	@ (800daf4 <pvPortMalloc+0x198>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	3301      	adds	r3, #1
 800daac:	4a11      	ldr	r2, [pc, #68]	@ (800daf4 <pvPortMalloc+0x198>)
 800daae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dab0:	f7fe fcc8 	bl	800c444 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	f003 0307 	and.w	r3, r3, #7
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00b      	beq.n	800dad6 <pvPortMalloc+0x17a>
	__asm volatile
 800dabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dac2:	f383 8811 	msr	BASEPRI, r3
 800dac6:	f3bf 8f6f 	isb	sy
 800daca:	f3bf 8f4f 	dsb	sy
 800dace:	60fb      	str	r3, [r7, #12]
}
 800dad0:	bf00      	nop
 800dad2:	bf00      	nop
 800dad4:	e7fd      	b.n	800dad2 <pvPortMalloc+0x176>
	return pvReturn;
 800dad6:	69fb      	ldr	r3, [r7, #28]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3728      	adds	r7, #40	@ 0x28
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	20007350 	.word	0x20007350
 800dae4:	20007364 	.word	0x20007364
 800dae8:	20007354 	.word	0x20007354
 800daec:	20007348 	.word	0x20007348
 800daf0:	20007358 	.word	0x20007358
 800daf4:	2000735c 	.word	0x2000735c

0800daf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b086      	sub	sp, #24
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d04f      	beq.n	800dbaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800db0a:	2308      	movs	r3, #8
 800db0c:	425b      	negs	r3, r3
 800db0e:	697a      	ldr	r2, [r7, #20]
 800db10:	4413      	add	r3, r2
 800db12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	685a      	ldr	r2, [r3, #4]
 800db1c:	4b25      	ldr	r3, [pc, #148]	@ (800dbb4 <vPortFree+0xbc>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4013      	ands	r3, r2
 800db22:	2b00      	cmp	r3, #0
 800db24:	d10b      	bne.n	800db3e <vPortFree+0x46>
	__asm volatile
 800db26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db2a:	f383 8811 	msr	BASEPRI, r3
 800db2e:	f3bf 8f6f 	isb	sy
 800db32:	f3bf 8f4f 	dsb	sy
 800db36:	60fb      	str	r3, [r7, #12]
}
 800db38:	bf00      	nop
 800db3a:	bf00      	nop
 800db3c:	e7fd      	b.n	800db3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d00b      	beq.n	800db5e <vPortFree+0x66>
	__asm volatile
 800db46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db4a:	f383 8811 	msr	BASEPRI, r3
 800db4e:	f3bf 8f6f 	isb	sy
 800db52:	f3bf 8f4f 	dsb	sy
 800db56:	60bb      	str	r3, [r7, #8]
}
 800db58:	bf00      	nop
 800db5a:	bf00      	nop
 800db5c:	e7fd      	b.n	800db5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	685a      	ldr	r2, [r3, #4]
 800db62:	4b14      	ldr	r3, [pc, #80]	@ (800dbb4 <vPortFree+0xbc>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4013      	ands	r3, r2
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d01e      	beq.n	800dbaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d11a      	bne.n	800dbaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	685a      	ldr	r2, [r3, #4]
 800db78:	4b0e      	ldr	r3, [pc, #56]	@ (800dbb4 <vPortFree+0xbc>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	43db      	mvns	r3, r3
 800db7e:	401a      	ands	r2, r3
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800db84:	f7fe fc50 	bl	800c428 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	685a      	ldr	r2, [r3, #4]
 800db8c:	4b0a      	ldr	r3, [pc, #40]	@ (800dbb8 <vPortFree+0xc0>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4413      	add	r3, r2
 800db92:	4a09      	ldr	r2, [pc, #36]	@ (800dbb8 <vPortFree+0xc0>)
 800db94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db96:	6938      	ldr	r0, [r7, #16]
 800db98:	f000 f874 	bl	800dc84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800db9c:	4b07      	ldr	r3, [pc, #28]	@ (800dbbc <vPortFree+0xc4>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	3301      	adds	r3, #1
 800dba2:	4a06      	ldr	r2, [pc, #24]	@ (800dbbc <vPortFree+0xc4>)
 800dba4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dba6:	f7fe fc4d 	bl	800c444 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dbaa:	bf00      	nop
 800dbac:	3718      	adds	r7, #24
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	20007364 	.word	0x20007364
 800dbb8:	20007354 	.word	0x20007354
 800dbbc:	20007360 	.word	0x20007360

0800dbc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b085      	sub	sp, #20
 800dbc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dbc6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800dbca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dbcc:	4b27      	ldr	r3, [pc, #156]	@ (800dc6c <prvHeapInit+0xac>)
 800dbce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f003 0307 	and.w	r3, r3, #7
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d00c      	beq.n	800dbf4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	3307      	adds	r3, #7
 800dbde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f023 0307 	bic.w	r3, r3, #7
 800dbe6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dbe8:	68ba      	ldr	r2, [r7, #8]
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	1ad3      	subs	r3, r2, r3
 800dbee:	4a1f      	ldr	r2, [pc, #124]	@ (800dc6c <prvHeapInit+0xac>)
 800dbf0:	4413      	add	r3, r2
 800dbf2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dbf8:	4a1d      	ldr	r2, [pc, #116]	@ (800dc70 <prvHeapInit+0xb0>)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dbfe:	4b1c      	ldr	r3, [pc, #112]	@ (800dc70 <prvHeapInit+0xb0>)
 800dc00:	2200      	movs	r2, #0
 800dc02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	68ba      	ldr	r2, [r7, #8]
 800dc08:	4413      	add	r3, r2
 800dc0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dc0c:	2208      	movs	r2, #8
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	1a9b      	subs	r3, r3, r2
 800dc12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f023 0307 	bic.w	r3, r3, #7
 800dc1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	4a15      	ldr	r2, [pc, #84]	@ (800dc74 <prvHeapInit+0xb4>)
 800dc20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dc22:	4b14      	ldr	r3, [pc, #80]	@ (800dc74 <prvHeapInit+0xb4>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2200      	movs	r2, #0
 800dc28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dc2a:	4b12      	ldr	r3, [pc, #72]	@ (800dc74 <prvHeapInit+0xb4>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	68fa      	ldr	r2, [r7, #12]
 800dc3a:	1ad2      	subs	r2, r2, r3
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc40:	4b0c      	ldr	r3, [pc, #48]	@ (800dc74 <prvHeapInit+0xb4>)
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	4a0a      	ldr	r2, [pc, #40]	@ (800dc78 <prvHeapInit+0xb8>)
 800dc4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	4a09      	ldr	r2, [pc, #36]	@ (800dc7c <prvHeapInit+0xbc>)
 800dc56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc58:	4b09      	ldr	r3, [pc, #36]	@ (800dc80 <prvHeapInit+0xc0>)
 800dc5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800dc5e:	601a      	str	r2, [r3, #0]
}
 800dc60:	bf00      	nop
 800dc62:	3714      	adds	r7, #20
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr
 800dc6c:	20006748 	.word	0x20006748
 800dc70:	20007348 	.word	0x20007348
 800dc74:	20007350 	.word	0x20007350
 800dc78:	20007358 	.word	0x20007358
 800dc7c:	20007354 	.word	0x20007354
 800dc80:	20007364 	.word	0x20007364

0800dc84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dc84:	b480      	push	{r7}
 800dc86:	b085      	sub	sp, #20
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dc8c:	4b28      	ldr	r3, [pc, #160]	@ (800dd30 <prvInsertBlockIntoFreeList+0xac>)
 800dc8e:	60fb      	str	r3, [r7, #12]
 800dc90:	e002      	b.n	800dc98 <prvInsertBlockIntoFreeList+0x14>
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	60fb      	str	r3, [r7, #12]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d8f7      	bhi.n	800dc92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	68ba      	ldr	r2, [r7, #8]
 800dcac:	4413      	add	r3, r2
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d108      	bne.n	800dcc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	685a      	ldr	r2, [r3, #4]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	441a      	add	r2, r3
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	68ba      	ldr	r2, [r7, #8]
 800dcd0:	441a      	add	r2, r3
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d118      	bne.n	800dd0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	4b15      	ldr	r3, [pc, #84]	@ (800dd34 <prvInsertBlockIntoFreeList+0xb0>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d00d      	beq.n	800dd02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	685a      	ldr	r2, [r3, #4]
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	441a      	add	r2, r3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	601a      	str	r2, [r3, #0]
 800dd00:	e008      	b.n	800dd14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dd02:	4b0c      	ldr	r3, [pc, #48]	@ (800dd34 <prvInsertBlockIntoFreeList+0xb0>)
 800dd04:	681a      	ldr	r2, [r3, #0]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	601a      	str	r2, [r3, #0]
 800dd0a:	e003      	b.n	800dd14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681a      	ldr	r2, [r3, #0]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d002      	beq.n	800dd22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd22:	bf00      	nop
 800dd24:	3714      	adds	r7, #20
 800dd26:	46bd      	mov	sp, r7
 800dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2c:	4770      	bx	lr
 800dd2e:	bf00      	nop
 800dd30:	20007348 	.word	0x20007348
 800dd34:	20007350 	.word	0x20007350

0800dd38 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800dd38:	4b04      	ldr	r3, [pc, #16]	@ (800dd4c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800dd3a:	681a      	ldr	r2, [r3, #0]
 800dd3c:	b10a      	cbz	r2, 800dd42 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800dd3e:	4803      	ldr	r0, [pc, #12]	@ (800dd4c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800dd40:	4770      	bx	lr
 800dd42:	4a03      	ldr	r2, [pc, #12]	@ (800dd50 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800dd44:	4801      	ldr	r0, [pc, #4]	@ (800dd4c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800dd46:	6812      	ldr	r2, [r2, #0]
 800dd48:	601a      	str	r2, [r3, #0]
 800dd4a:	4770      	bx	lr
 800dd4c:	200000ac 	.word	0x200000ac
 800dd50:	20000634 	.word	0x20000634

0800dd54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800dd54:	4a02      	ldr	r2, [pc, #8]	@ (800dd60 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800dd56:	4b03      	ldr	r3, [pc, #12]	@ (800dd64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800dd58:	6812      	ldr	r2, [r2, #0]
 800dd5a:	601a      	str	r2, [r3, #0]
 800dd5c:	4770      	bx	lr
 800dd5e:	bf00      	nop
 800dd60:	20000634 	.word	0x20000634
 800dd64:	200000ac 	.word	0x200000ac

0800dd68 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800dd68:	f006 bd6c 	b.w	8014844 <geometry_msgs__msg__Twist__init>

0800dd6c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800dd6c:	f006 bd8e 	b.w	801488c <geometry_msgs__msg__Twist__fini>

0800dd70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800dd70:	b510      	push	{r4, lr}
 800dd72:	f000 f819 	bl	800dda8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800dd76:	4c07      	ldr	r4, [pc, #28]	@ (800dd94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800dd78:	60e0      	str	r0, [r4, #12]
 800dd7a:	f000 f815 	bl	800dda8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800dd7e:	4b06      	ldr	r3, [pc, #24]	@ (800dd98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800dd80:	64a0      	str	r0, [r4, #72]	@ 0x48
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	b10a      	cbz	r2, 800dd8a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800dd86:	4804      	ldr	r0, [pc, #16]	@ (800dd98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800dd88:	bd10      	pop	{r4, pc}
 800dd8a:	4a04      	ldr	r2, [pc, #16]	@ (800dd9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800dd8c:	4802      	ldr	r0, [pc, #8]	@ (800dd98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800dd8e:	6812      	ldr	r2, [r2, #0]
 800dd90:	601a      	str	r2, [r3, #0]
 800dd92:	bd10      	pop	{r4, pc}
 800dd94:	200000b8 	.word	0x200000b8
 800dd98:	20000130 	.word	0x20000130
 800dd9c:	20000638 	.word	0x20000638

0800dda0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800dda0:	f006 bd80 	b.w	80148a4 <geometry_msgs__msg__Vector3__init>

0800dda4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800dda4:	f006 bd82 	b.w	80148ac <geometry_msgs__msg__Vector3__fini>

0800dda8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800dda8:	4b04      	ldr	r3, [pc, #16]	@ (800ddbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	b10a      	cbz	r2, 800ddb2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800ddae:	4803      	ldr	r0, [pc, #12]	@ (800ddbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ddb0:	4770      	bx	lr
 800ddb2:	4a03      	ldr	r2, [pc, #12]	@ (800ddc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800ddb4:	4801      	ldr	r0, [pc, #4]	@ (800ddbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ddb6:	6812      	ldr	r2, [r2, #0]
 800ddb8:	601a      	str	r2, [r3, #0]
 800ddba:	4770      	bx	lr
 800ddbc:	200001f0 	.word	0x200001f0
 800ddc0:	20000638 	.word	0x20000638

0800ddc4 <get_serialized_size_geometry_msgs__msg__Twist>:
 800ddc4:	b570      	push	{r4, r5, r6, lr}
 800ddc6:	4604      	mov	r4, r0
 800ddc8:	b148      	cbz	r0, 800ddde <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800ddca:	460d      	mov	r5, r1
 800ddcc:	f000 f860 	bl	800de90 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ddd0:	4606      	mov	r6, r0
 800ddd2:	1829      	adds	r1, r5, r0
 800ddd4:	f104 0018 	add.w	r0, r4, #24
 800ddd8:	f000 f85a 	bl	800de90 <get_serialized_size_geometry_msgs__msg__Vector3>
 800dddc:	4430      	add	r0, r6
 800ddde:	bd70      	pop	{r4, r5, r6, pc}

0800dde0 <_Twist__cdr_deserialize>:
 800dde0:	b570      	push	{r4, r5, r6, lr}
 800dde2:	460c      	mov	r4, r1
 800dde4:	b189      	cbz	r1, 800de0a <_Twist__cdr_deserialize+0x2a>
 800dde6:	4605      	mov	r5, r0
 800dde8:	f000 f8de 	bl	800dfa8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ddec:	6843      	ldr	r3, [r0, #4]
 800ddee:	4621      	mov	r1, r4
 800ddf0:	68db      	ldr	r3, [r3, #12]
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	4798      	blx	r3
 800ddf6:	f000 f8d7 	bl	800dfa8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ddfa:	6843      	ldr	r3, [r0, #4]
 800ddfc:	f104 0118 	add.w	r1, r4, #24
 800de00:	4628      	mov	r0, r5
 800de02:	68db      	ldr	r3, [r3, #12]
 800de04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de08:	4718      	bx	r3
 800de0a:	4608      	mov	r0, r1
 800de0c:	bd70      	pop	{r4, r5, r6, pc}
 800de0e:	bf00      	nop

0800de10 <_Twist__cdr_serialize>:
 800de10:	b510      	push	{r4, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	9101      	str	r1, [sp, #4]
 800de16:	b190      	cbz	r0, 800de3e <_Twist__cdr_serialize+0x2e>
 800de18:	4604      	mov	r4, r0
 800de1a:	f000 f8c5 	bl	800dfa8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800de1e:	6843      	ldr	r3, [r0, #4]
 800de20:	9901      	ldr	r1, [sp, #4]
 800de22:	689b      	ldr	r3, [r3, #8]
 800de24:	4620      	mov	r0, r4
 800de26:	4798      	blx	r3
 800de28:	f000 f8be 	bl	800dfa8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800de2c:	6843      	ldr	r3, [r0, #4]
 800de2e:	9901      	ldr	r1, [sp, #4]
 800de30:	689b      	ldr	r3, [r3, #8]
 800de32:	f104 0018 	add.w	r0, r4, #24
 800de36:	b002      	add	sp, #8
 800de38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de3c:	4718      	bx	r3
 800de3e:	b002      	add	sp, #8
 800de40:	bd10      	pop	{r4, pc}
 800de42:	bf00      	nop

0800de44 <_Twist__get_serialized_size>:
 800de44:	b538      	push	{r3, r4, r5, lr}
 800de46:	4604      	mov	r4, r0
 800de48:	b148      	cbz	r0, 800de5e <_Twist__get_serialized_size+0x1a>
 800de4a:	2100      	movs	r1, #0
 800de4c:	f000 f820 	bl	800de90 <get_serialized_size_geometry_msgs__msg__Vector3>
 800de50:	4605      	mov	r5, r0
 800de52:	4601      	mov	r1, r0
 800de54:	f104 0018 	add.w	r0, r4, #24
 800de58:	f000 f81a 	bl	800de90 <get_serialized_size_geometry_msgs__msg__Vector3>
 800de5c:	4428      	add	r0, r5
 800de5e:	bd38      	pop	{r3, r4, r5, pc}

0800de60 <_Twist__max_serialized_size>:
 800de60:	b510      	push	{r4, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	2301      	movs	r3, #1
 800de66:	2100      	movs	r1, #0
 800de68:	f10d 0007 	add.w	r0, sp, #7
 800de6c:	f88d 3007 	strb.w	r3, [sp, #7]
 800de70:	f000 f87e 	bl	800df70 <max_serialized_size_geometry_msgs__msg__Vector3>
 800de74:	4604      	mov	r4, r0
 800de76:	4601      	mov	r1, r0
 800de78:	f10d 0007 	add.w	r0, sp, #7
 800de7c:	f000 f878 	bl	800df70 <max_serialized_size_geometry_msgs__msg__Vector3>
 800de80:	4420      	add	r0, r4
 800de82:	b002      	add	sp, #8
 800de84:	bd10      	pop	{r4, pc}
 800de86:	bf00      	nop

0800de88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800de88:	4800      	ldr	r0, [pc, #0]	@ (800de8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800de8a:	4770      	bx	lr
 800de8c:	200001fc 	.word	0x200001fc

0800de90 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800de90:	b1b8      	cbz	r0, 800dec2 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800de92:	b538      	push	{r3, r4, r5, lr}
 800de94:	460d      	mov	r5, r1
 800de96:	4628      	mov	r0, r5
 800de98:	2108      	movs	r1, #8
 800de9a:	f001 fcb1 	bl	800f800 <ucdr_alignment>
 800de9e:	f105 0308 	add.w	r3, r5, #8
 800dea2:	181c      	adds	r4, r3, r0
 800dea4:	2108      	movs	r1, #8
 800dea6:	4620      	mov	r0, r4
 800dea8:	f001 fcaa 	bl	800f800 <ucdr_alignment>
 800deac:	3008      	adds	r0, #8
 800deae:	4404      	add	r4, r0
 800deb0:	2108      	movs	r1, #8
 800deb2:	4620      	mov	r0, r4
 800deb4:	f001 fca4 	bl	800f800 <ucdr_alignment>
 800deb8:	f1c5 0508 	rsb	r5, r5, #8
 800debc:	4428      	add	r0, r5
 800debe:	4420      	add	r0, r4
 800dec0:	bd38      	pop	{r3, r4, r5, pc}
 800dec2:	4770      	bx	lr

0800dec4 <_Vector3__cdr_deserialize>:
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	460c      	mov	r4, r1
 800dec8:	b171      	cbz	r1, 800dee8 <_Vector3__cdr_deserialize+0x24>
 800deca:	4605      	mov	r5, r0
 800decc:	f001 faac 	bl	800f428 <ucdr_deserialize_double>
 800ded0:	f104 0108 	add.w	r1, r4, #8
 800ded4:	4628      	mov	r0, r5
 800ded6:	f001 faa7 	bl	800f428 <ucdr_deserialize_double>
 800deda:	f104 0110 	add.w	r1, r4, #16
 800dede:	4628      	mov	r0, r5
 800dee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dee4:	f001 baa0 	b.w	800f428 <ucdr_deserialize_double>
 800dee8:	4608      	mov	r0, r1
 800deea:	bd38      	pop	{r3, r4, r5, pc}

0800deec <_Vector3__cdr_serialize>:
 800deec:	b198      	cbz	r0, 800df16 <_Vector3__cdr_serialize+0x2a>
 800deee:	b538      	push	{r3, r4, r5, lr}
 800def0:	ed90 0b00 	vldr	d0, [r0]
 800def4:	460d      	mov	r5, r1
 800def6:	4604      	mov	r4, r0
 800def8:	4608      	mov	r0, r1
 800defa:	f001 f8f3 	bl	800f0e4 <ucdr_serialize_double>
 800defe:	ed94 0b02 	vldr	d0, [r4, #8]
 800df02:	4628      	mov	r0, r5
 800df04:	f001 f8ee 	bl	800f0e4 <ucdr_serialize_double>
 800df08:	ed94 0b04 	vldr	d0, [r4, #16]
 800df0c:	4628      	mov	r0, r5
 800df0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df12:	f001 b8e7 	b.w	800f0e4 <ucdr_serialize_double>
 800df16:	4770      	bx	lr

0800df18 <_Vector3__get_serialized_size>:
 800df18:	b198      	cbz	r0, 800df42 <_Vector3__get_serialized_size+0x2a>
 800df1a:	b510      	push	{r4, lr}
 800df1c:	2108      	movs	r1, #8
 800df1e:	2000      	movs	r0, #0
 800df20:	f001 fc6e 	bl	800f800 <ucdr_alignment>
 800df24:	f100 0408 	add.w	r4, r0, #8
 800df28:	2108      	movs	r1, #8
 800df2a:	4620      	mov	r0, r4
 800df2c:	f001 fc68 	bl	800f800 <ucdr_alignment>
 800df30:	3008      	adds	r0, #8
 800df32:	4404      	add	r4, r0
 800df34:	2108      	movs	r1, #8
 800df36:	4620      	mov	r0, r4
 800df38:	f001 fc62 	bl	800f800 <ucdr_alignment>
 800df3c:	3008      	adds	r0, #8
 800df3e:	4420      	add	r0, r4
 800df40:	bd10      	pop	{r4, pc}
 800df42:	4770      	bx	lr

0800df44 <_Vector3__max_serialized_size>:
 800df44:	b538      	push	{r3, r4, r5, lr}
 800df46:	2108      	movs	r1, #8
 800df48:	2000      	movs	r0, #0
 800df4a:	f001 fc59 	bl	800f800 <ucdr_alignment>
 800df4e:	f100 0508 	add.w	r5, r0, #8
 800df52:	2108      	movs	r1, #8
 800df54:	4628      	mov	r0, r5
 800df56:	f001 fc53 	bl	800f800 <ucdr_alignment>
 800df5a:	f100 0408 	add.w	r4, r0, #8
 800df5e:	442c      	add	r4, r5
 800df60:	2108      	movs	r1, #8
 800df62:	4620      	mov	r0, r4
 800df64:	f001 fc4c 	bl	800f800 <ucdr_alignment>
 800df68:	3008      	adds	r0, #8
 800df6a:	4420      	add	r0, r4
 800df6c:	bd38      	pop	{r3, r4, r5, pc}
 800df6e:	bf00      	nop

0800df70 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800df70:	b570      	push	{r4, r5, r6, lr}
 800df72:	2301      	movs	r3, #1
 800df74:	460c      	mov	r4, r1
 800df76:	7003      	strb	r3, [r0, #0]
 800df78:	2108      	movs	r1, #8
 800df7a:	4620      	mov	r0, r4
 800df7c:	f001 fc40 	bl	800f800 <ucdr_alignment>
 800df80:	f104 0508 	add.w	r5, r4, #8
 800df84:	1946      	adds	r6, r0, r5
 800df86:	2108      	movs	r1, #8
 800df88:	4630      	mov	r0, r6
 800df8a:	f001 fc39 	bl	800f800 <ucdr_alignment>
 800df8e:	f100 0508 	add.w	r5, r0, #8
 800df92:	4435      	add	r5, r6
 800df94:	2108      	movs	r1, #8
 800df96:	4628      	mov	r0, r5
 800df98:	f001 fc32 	bl	800f800 <ucdr_alignment>
 800df9c:	f1c4 0408 	rsb	r4, r4, #8
 800dfa0:	4420      	add	r0, r4
 800dfa2:	4428      	add	r0, r5
 800dfa4:	bd70      	pop	{r4, r5, r6, pc}
 800dfa6:	bf00      	nop

0800dfa8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800dfa8:	4800      	ldr	r0, [pc, #0]	@ (800dfac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800dfaa:	4770      	bx	lr
 800dfac:	20000224 	.word	0x20000224

0800dfb0 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800dfb0:	4b04      	ldr	r3, [pc, #16]	@ (800dfc4 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	b10a      	cbz	r2, 800dfba <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xa>
 800dfb6:	4803      	ldr	r0, [pc, #12]	@ (800dfc4 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800dfb8:	4770      	bx	lr
 800dfba:	4a03      	ldr	r2, [pc, #12]	@ (800dfc8 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x18>)
 800dfbc:	4801      	ldr	r0, [pc, #4]	@ (800dfc4 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800dfbe:	6812      	ldr	r2, [r2, #0]
 800dfc0:	601a      	str	r2, [r3, #0]
 800dfc2:	4770      	bx	lr
 800dfc4:	20000254 	.word	0x20000254
 800dfc8:	20000634 	.word	0x20000634

0800dfcc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800dfcc:	4b04      	ldr	r3, [pc, #16]	@ (800dfe0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>)
 800dfce:	4805      	ldr	r0, [pc, #20]	@ (800dfe4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x18>)
 800dfd0:	4905      	ldr	r1, [pc, #20]	@ (800dfe8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x1c>)
 800dfd2:	4a06      	ldr	r2, [pc, #24]	@ (800dfec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	6003      	str	r3, [r0, #0]
 800dfd8:	600b      	str	r3, [r1, #0]
 800dfda:	6013      	str	r3, [r2, #0]
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	20000634 	.word	0x20000634
 800dfe4:	20000270 	.word	0x20000270
 800dfe8:	2000027c 	.word	0x2000027c
 800dfec:	20000254 	.word	0x20000254

0800dff0 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_init_function>:
 800dff0:	f006 bd28 	b.w	8014a44 <imu_interfaces__srv__ImuCalibration_Request__init>

0800dff4 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_fini_function>:
 800dff4:	f006 bd38 	b.w	8014a68 <imu_interfaces__srv__ImuCalibration_Request__fini>

0800dff8 <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_init_function>:
 800dff8:	f006 bd3a 	b.w	8014a70 <imu_interfaces__srv__ImuCalibration_Response__init>

0800dffc <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_fini_function>:
 800dffc:	f006 bd3c 	b.w	8014a78 <imu_interfaces__srv__ImuCalibration_Response__fini>

0800e000 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800e000:	b508      	push	{r3, lr}
 800e002:	f005 ff99 	bl	8013f38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800e006:	4b06      	ldr	r3, [pc, #24]	@ (800e020 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800e008:	4906      	ldr	r1, [pc, #24]	@ (800e024 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x24>)
 800e00a:	681a      	ldr	r2, [r3, #0]
 800e00c:	60c8      	str	r0, [r1, #12]
 800e00e:	b10a      	cbz	r2, 800e014 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>
 800e010:	4803      	ldr	r0, [pc, #12]	@ (800e020 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800e012:	bd08      	pop	{r3, pc}
 800e014:	4a04      	ldr	r2, [pc, #16]	@ (800e028 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x28>)
 800e016:	4802      	ldr	r0, [pc, #8]	@ (800e020 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800e018:	6812      	ldr	r2, [r2, #0]
 800e01a:	601a      	str	r2, [r3, #0]
 800e01c:	bd08      	pop	{r3, pc}
 800e01e:	bf00      	nop
 800e020:	200002c4 	.word	0x200002c4
 800e024:	20000288 	.word	0x20000288
 800e028:	20000638 	.word	0x20000638

0800e02c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800e02c:	4b04      	ldr	r3, [pc, #16]	@ (800e040 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800e02e:	681a      	ldr	r2, [r3, #0]
 800e030:	b10a      	cbz	r2, 800e036 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0xa>
 800e032:	4803      	ldr	r0, [pc, #12]	@ (800e040 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800e034:	4770      	bx	lr
 800e036:	4a03      	ldr	r2, [pc, #12]	@ (800e044 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x18>)
 800e038:	4801      	ldr	r0, [pc, #4]	@ (800e040 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800e03a:	6812      	ldr	r2, [r2, #0]
 800e03c:	601a      	str	r2, [r3, #0]
 800e03e:	4770      	bx	lr
 800e040:	2000030c 	.word	0x2000030c
 800e044:	20000638 	.word	0x20000638

0800e048 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800e048:	4b16      	ldr	r3, [pc, #88]	@ (800e0a4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	b510      	push	{r4, lr}
 800e04e:	b132      	cbz	r2, 800e05e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x16>
 800e050:	685c      	ldr	r4, [r3, #4]
 800e052:	68a3      	ldr	r3, [r4, #8]
 800e054:	b153      	cbz	r3, 800e06c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x24>
 800e056:	68e3      	ldr	r3, [r4, #12]
 800e058:	b1a3      	cbz	r3, 800e084 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x3c>
 800e05a:	4812      	ldr	r0, [pc, #72]	@ (800e0a4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800e05c:	bd10      	pop	{r4, pc}
 800e05e:	4a12      	ldr	r2, [pc, #72]	@ (800e0a8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800e060:	685c      	ldr	r4, [r3, #4]
 800e062:	6812      	ldr	r2, [r2, #0]
 800e064:	601a      	str	r2, [r3, #0]
 800e066:	68a3      	ldr	r3, [r4, #8]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d1f4      	bne.n	800e056 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xe>
 800e06c:	f005 ff64 	bl	8013f38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800e070:	4b0e      	ldr	r3, [pc, #56]	@ (800e0ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x64>)
 800e072:	490f      	ldr	r1, [pc, #60]	@ (800e0b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x68>)
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	60c8      	str	r0, [r1, #12]
 800e078:	b17a      	cbz	r2, 800e09a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x52>
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	60a3      	str	r3, [r4, #8]
 800e07e:	68e3      	ldr	r3, [r4, #12]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d1ea      	bne.n	800e05a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x12>
 800e084:	4b0b      	ldr	r3, [pc, #44]	@ (800e0b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x6c>)
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	b11a      	cbz	r2, 800e092 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4a>
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	4805      	ldr	r0, [pc, #20]	@ (800e0a4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800e08e:	60e3      	str	r3, [r4, #12]
 800e090:	bd10      	pop	{r4, pc}
 800e092:	4a05      	ldr	r2, [pc, #20]	@ (800e0a8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800e094:	6812      	ldr	r2, [r2, #0]
 800e096:	601a      	str	r2, [r3, #0]
 800e098:	e7f7      	b.n	800e08a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x42>
 800e09a:	4a03      	ldr	r2, [pc, #12]	@ (800e0a8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800e09c:	6812      	ldr	r2, [r2, #0]
 800e09e:	601a      	str	r2, [r3, #0]
 800e0a0:	e7eb      	b.n	800e07a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x32>
 800e0a2:	bf00      	nop
 800e0a4:	20000328 	.word	0x20000328
 800e0a8:	20000638 	.word	0x20000638
 800e0ac:	200002c4 	.word	0x200002c4
 800e0b0:	20000288 	.word	0x20000288
 800e0b4:	2000030c 	.word	0x2000030c

0800e0b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800e0b8:	4800      	ldr	r0, [pc, #0]	@ (800e0bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x4>)
 800e0ba:	4770      	bx	lr
 800e0bc:	20000350 	.word	0x20000350

0800e0c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800e0c0:	4800      	ldr	r0, [pc, #0]	@ (800e0c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x4>)
 800e0c2:	4770      	bx	lr
 800e0c4:	2000035c 	.word	0x2000035c

0800e0c8 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request>:
 800e0c8:	b108      	cbz	r0, 800e0ce <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request+0x6>
 800e0ca:	f005 bf87 	b.w	8013fdc <get_serialized_size_sensor_msgs__msg__Imu>
 800e0ce:	4770      	bx	lr

0800e0d0 <_ImuCalibration_Request__max_serialized_size>:
 800e0d0:	b500      	push	{lr}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	2100      	movs	r1, #0
 800e0d8:	f10d 0007 	add.w	r0, sp, #7
 800e0dc:	f88d 3007 	strb.w	r3, [sp, #7]
 800e0e0:	f005 fffa 	bl	80140d8 <max_serialized_size_sensor_msgs__msg__Imu>
 800e0e4:	b003      	add	sp, #12
 800e0e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800e0ea:	bf00      	nop

0800e0ec <_ImuCalibration_Response__max_serialized_size>:
 800e0ec:	b508      	push	{r3, lr}
 800e0ee:	2101      	movs	r1, #1
 800e0f0:	2000      	movs	r0, #0
 800e0f2:	f001 fb85 	bl	800f800 <ucdr_alignment>
 800e0f6:	3001      	adds	r0, #1
 800e0f8:	bd08      	pop	{r3, pc}
 800e0fa:	bf00      	nop

0800e0fc <_ImuCalibration_Response__cdr_deserialize>:
 800e0fc:	b109      	cbz	r1, 800e102 <_ImuCalibration_Response__cdr_deserialize+0x6>
 800e0fe:	f000 b881 	b.w	800e204 <ucdr_deserialize_bool>
 800e102:	4608      	mov	r0, r1
 800e104:	4770      	bx	lr
 800e106:	bf00      	nop

0800e108 <_ImuCalibration_Request__get_serialized_size>:
 800e108:	b110      	cbz	r0, 800e110 <_ImuCalibration_Request__get_serialized_size+0x8>
 800e10a:	2100      	movs	r1, #0
 800e10c:	f005 bf66 	b.w	8013fdc <get_serialized_size_sensor_msgs__msg__Imu>
 800e110:	4770      	bx	lr
 800e112:	bf00      	nop

0800e114 <_ImuCalibration_Request__cdr_deserialize>:
 800e114:	b570      	push	{r4, r5, r6, lr}
 800e116:	460c      	mov	r4, r1
 800e118:	b149      	cbz	r1, 800e12e <_ImuCalibration_Request__cdr_deserialize+0x1a>
 800e11a:	4605      	mov	r5, r0
 800e11c:	f006 f816 	bl	801414c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800e120:	6843      	ldr	r3, [r0, #4]
 800e122:	4621      	mov	r1, r4
 800e124:	4628      	mov	r0, r5
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e12c:	4718      	bx	r3
 800e12e:	4608      	mov	r0, r1
 800e130:	bd70      	pop	{r4, r5, r6, pc}
 800e132:	bf00      	nop

0800e134 <_ImuCalibration_Request__cdr_serialize>:
 800e134:	b158      	cbz	r0, 800e14e <_ImuCalibration_Request__cdr_serialize+0x1a>
 800e136:	b570      	push	{r4, r5, r6, lr}
 800e138:	460d      	mov	r5, r1
 800e13a:	4604      	mov	r4, r0
 800e13c:	f006 f806 	bl	801414c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800e140:	6843      	ldr	r3, [r0, #4]
 800e142:	4629      	mov	r1, r5
 800e144:	4620      	mov	r0, r4
 800e146:	689b      	ldr	r3, [r3, #8]
 800e148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e14c:	4718      	bx	r3
 800e14e:	4770      	bx	lr

0800e150 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response>:
 800e150:	b138      	cbz	r0, 800e162 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response+0x12>
 800e152:	b508      	push	{r3, lr}
 800e154:	460b      	mov	r3, r1
 800e156:	4618      	mov	r0, r3
 800e158:	2101      	movs	r1, #1
 800e15a:	f001 fb51 	bl	800f800 <ucdr_alignment>
 800e15e:	3001      	adds	r0, #1
 800e160:	bd08      	pop	{r3, pc}
 800e162:	4770      	bx	lr

0800e164 <_ImuCalibration_Response__cdr_serialize>:
 800e164:	460a      	mov	r2, r1
 800e166:	b118      	cbz	r0, 800e170 <_ImuCalibration_Response__cdr_serialize+0xc>
 800e168:	7801      	ldrb	r1, [r0, #0]
 800e16a:	4610      	mov	r0, r2
 800e16c:	f000 b834 	b.w	800e1d8 <ucdr_serialize_bool>
 800e170:	4770      	bx	lr
 800e172:	bf00      	nop

0800e174 <_ImuCalibration_Response__get_serialized_size>:
 800e174:	b130      	cbz	r0, 800e184 <_ImuCalibration_Response__get_serialized_size+0x10>
 800e176:	b508      	push	{r3, lr}
 800e178:	2101      	movs	r1, #1
 800e17a:	2000      	movs	r0, #0
 800e17c:	f001 fb40 	bl	800f800 <ucdr_alignment>
 800e180:	3001      	adds	r0, #1
 800e182:	bd08      	pop	{r3, pc}
 800e184:	4770      	bx	lr
 800e186:	bf00      	nop

0800e188 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800e188:	4800      	ldr	r0, [pc, #0]	@ (800e18c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4>)
 800e18a:	4770      	bx	lr
 800e18c:	20000344 	.word	0x20000344

0800e190 <micro_ros_string_utilities_init>:
 800e190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e194:	b086      	sub	sp, #24
 800e196:	460f      	mov	r7, r1
 800e198:	4604      	mov	r4, r0
 800e19a:	a801      	add	r0, sp, #4
 800e19c:	f003 f93c 	bl	8011418 <rcutils_get_default_allocator>
 800e1a0:	4638      	mov	r0, r7
 800e1a2:	f7f2 f847 	bl	8000234 <strlen>
 800e1a6:	f100 0801 	add.w	r8, r0, #1
 800e1aa:	9b01      	ldr	r3, [sp, #4]
 800e1ac:	9905      	ldr	r1, [sp, #20]
 800e1ae:	4605      	mov	r5, r0
 800e1b0:	4640      	mov	r0, r8
 800e1b2:	4798      	blx	r3
 800e1b4:	4642      	mov	r2, r8
 800e1b6:	4606      	mov	r6, r0
 800e1b8:	2100      	movs	r1, #0
 800e1ba:	f00f fab1 	bl	801d720 <memset>
 800e1be:	462a      	mov	r2, r5
 800e1c0:	4639      	mov	r1, r7
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	f00f fb75 	bl	801d8b2 <memcpy>
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	e9c4 6500 	strd	r6, r5, [r4]
 800e1ce:	f8c4 8008 	str.w	r8, [r4, #8]
 800e1d2:	b006      	add	sp, #24
 800e1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e1d8 <ucdr_serialize_bool>:
 800e1d8:	b538      	push	{r3, r4, r5, lr}
 800e1da:	460d      	mov	r5, r1
 800e1dc:	2101      	movs	r1, #1
 800e1de:	4604      	mov	r4, r0
 800e1e0:	f001 fac2 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e1e4:	b148      	cbz	r0, 800e1fa <ucdr_serialize_bool+0x22>
 800e1e6:	68a3      	ldr	r3, [r4, #8]
 800e1e8:	701d      	strb	r5, [r3, #0]
 800e1ea:	68a2      	ldr	r2, [r4, #8]
 800e1ec:	6923      	ldr	r3, [r4, #16]
 800e1ee:	2101      	movs	r1, #1
 800e1f0:	440a      	add	r2, r1
 800e1f2:	440b      	add	r3, r1
 800e1f4:	60a2      	str	r2, [r4, #8]
 800e1f6:	6123      	str	r3, [r4, #16]
 800e1f8:	7561      	strb	r1, [r4, #21]
 800e1fa:	7da0      	ldrb	r0, [r4, #22]
 800e1fc:	f080 0001 	eor.w	r0, r0, #1
 800e200:	bd38      	pop	{r3, r4, r5, pc}
 800e202:	bf00      	nop

0800e204 <ucdr_deserialize_bool>:
 800e204:	b538      	push	{r3, r4, r5, lr}
 800e206:	460d      	mov	r5, r1
 800e208:	2101      	movs	r1, #1
 800e20a:	4604      	mov	r4, r0
 800e20c:	f001 faac 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e210:	b160      	cbz	r0, 800e22c <ucdr_deserialize_bool+0x28>
 800e212:	68a2      	ldr	r2, [r4, #8]
 800e214:	6923      	ldr	r3, [r4, #16]
 800e216:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e21a:	3900      	subs	r1, #0
 800e21c:	bf18      	it	ne
 800e21e:	2101      	movne	r1, #1
 800e220:	7029      	strb	r1, [r5, #0]
 800e222:	3301      	adds	r3, #1
 800e224:	2101      	movs	r1, #1
 800e226:	60a2      	str	r2, [r4, #8]
 800e228:	6123      	str	r3, [r4, #16]
 800e22a:	7561      	strb	r1, [r4, #21]
 800e22c:	7da0      	ldrb	r0, [r4, #22]
 800e22e:	f080 0001 	eor.w	r0, r0, #1
 800e232:	bd38      	pop	{r3, r4, r5, pc}

0800e234 <ucdr_serialize_uint8_t>:
 800e234:	b538      	push	{r3, r4, r5, lr}
 800e236:	460d      	mov	r5, r1
 800e238:	2101      	movs	r1, #1
 800e23a:	4604      	mov	r4, r0
 800e23c:	f001 fa94 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e240:	b148      	cbz	r0, 800e256 <ucdr_serialize_uint8_t+0x22>
 800e242:	68a3      	ldr	r3, [r4, #8]
 800e244:	701d      	strb	r5, [r3, #0]
 800e246:	68a2      	ldr	r2, [r4, #8]
 800e248:	6923      	ldr	r3, [r4, #16]
 800e24a:	2101      	movs	r1, #1
 800e24c:	440a      	add	r2, r1
 800e24e:	440b      	add	r3, r1
 800e250:	60a2      	str	r2, [r4, #8]
 800e252:	6123      	str	r3, [r4, #16]
 800e254:	7561      	strb	r1, [r4, #21]
 800e256:	7da0      	ldrb	r0, [r4, #22]
 800e258:	f080 0001 	eor.w	r0, r0, #1
 800e25c:	bd38      	pop	{r3, r4, r5, pc}
 800e25e:	bf00      	nop

0800e260 <ucdr_deserialize_uint8_t>:
 800e260:	b538      	push	{r3, r4, r5, lr}
 800e262:	460d      	mov	r5, r1
 800e264:	2101      	movs	r1, #1
 800e266:	4604      	mov	r4, r0
 800e268:	f001 fa7e 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e26c:	b150      	cbz	r0, 800e284 <ucdr_deserialize_uint8_t+0x24>
 800e26e:	68a3      	ldr	r3, [r4, #8]
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	702b      	strb	r3, [r5, #0]
 800e274:	68a2      	ldr	r2, [r4, #8]
 800e276:	6923      	ldr	r3, [r4, #16]
 800e278:	2101      	movs	r1, #1
 800e27a:	440a      	add	r2, r1
 800e27c:	440b      	add	r3, r1
 800e27e:	60a2      	str	r2, [r4, #8]
 800e280:	6123      	str	r3, [r4, #16]
 800e282:	7561      	strb	r1, [r4, #21]
 800e284:	7da0      	ldrb	r0, [r4, #22]
 800e286:	f080 0001 	eor.w	r0, r0, #1
 800e28a:	bd38      	pop	{r3, r4, r5, pc}

0800e28c <ucdr_serialize_uint16_t>:
 800e28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e290:	b082      	sub	sp, #8
 800e292:	460b      	mov	r3, r1
 800e294:	2102      	movs	r1, #2
 800e296:	4604      	mov	r4, r0
 800e298:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e29c:	f001 fab8 	bl	800f810 <ucdr_buffer_alignment>
 800e2a0:	4601      	mov	r1, r0
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	7d67      	ldrb	r7, [r4, #21]
 800e2a6:	f001 faf7 	bl	800f898 <ucdr_advance_buffer>
 800e2aa:	2102      	movs	r1, #2
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	f001 fa4f 	bl	800f750 <ucdr_check_buffer_available_for>
 800e2b2:	bb78      	cbnz	r0, 800e314 <ucdr_serialize_uint16_t+0x88>
 800e2b4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e2b8:	42ab      	cmp	r3, r5
 800e2ba:	d926      	bls.n	800e30a <ucdr_serialize_uint16_t+0x7e>
 800e2bc:	1b5e      	subs	r6, r3, r5
 800e2be:	60a3      	str	r3, [r4, #8]
 800e2c0:	6923      	ldr	r3, [r4, #16]
 800e2c2:	f1c6 0802 	rsb	r8, r6, #2
 800e2c6:	4433      	add	r3, r6
 800e2c8:	6123      	str	r3, [r4, #16]
 800e2ca:	4641      	mov	r1, r8
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	f001 fa4b 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	d03b      	beq.n	800e34e <ucdr_serialize_uint16_t+0xc2>
 800e2d6:	7d23      	ldrb	r3, [r4, #20]
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d04a      	beq.n	800e372 <ucdr_serialize_uint16_t+0xe6>
 800e2dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e2e0:	702b      	strb	r3, [r5, #0]
 800e2e2:	2e00      	cmp	r6, #0
 800e2e4:	d040      	beq.n	800e368 <ucdr_serialize_uint16_t+0xdc>
 800e2e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e2ea:	706b      	strb	r3, [r5, #1]
 800e2ec:	6923      	ldr	r3, [r4, #16]
 800e2ee:	68a2      	ldr	r2, [r4, #8]
 800e2f0:	7da0      	ldrb	r0, [r4, #22]
 800e2f2:	3302      	adds	r3, #2
 800e2f4:	1b9e      	subs	r6, r3, r6
 800e2f6:	4442      	add	r2, r8
 800e2f8:	2302      	movs	r3, #2
 800e2fa:	f080 0001 	eor.w	r0, r0, #1
 800e2fe:	60a2      	str	r2, [r4, #8]
 800e300:	6126      	str	r6, [r4, #16]
 800e302:	7563      	strb	r3, [r4, #21]
 800e304:	b002      	add	sp, #8
 800e306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e30a:	2102      	movs	r1, #2
 800e30c:	4620      	mov	r0, r4
 800e30e:	f001 fa2b 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e312:	b190      	cbz	r0, 800e33a <ucdr_serialize_uint16_t+0xae>
 800e314:	7d23      	ldrb	r3, [r4, #20]
 800e316:	2b01      	cmp	r3, #1
 800e318:	68a3      	ldr	r3, [r4, #8]
 800e31a:	d014      	beq.n	800e346 <ucdr_serialize_uint16_t+0xba>
 800e31c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e320:	701a      	strb	r2, [r3, #0]
 800e322:	68a3      	ldr	r3, [r4, #8]
 800e324:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e328:	705a      	strb	r2, [r3, #1]
 800e32a:	68a2      	ldr	r2, [r4, #8]
 800e32c:	6923      	ldr	r3, [r4, #16]
 800e32e:	3202      	adds	r2, #2
 800e330:	3302      	adds	r3, #2
 800e332:	2102      	movs	r1, #2
 800e334:	60a2      	str	r2, [r4, #8]
 800e336:	6123      	str	r3, [r4, #16]
 800e338:	7561      	strb	r1, [r4, #21]
 800e33a:	7da0      	ldrb	r0, [r4, #22]
 800e33c:	f080 0001 	eor.w	r0, r0, #1
 800e340:	b002      	add	sp, #8
 800e342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e346:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e34a:	801a      	strh	r2, [r3, #0]
 800e34c:	e7ed      	b.n	800e32a <ucdr_serialize_uint16_t+0x9e>
 800e34e:	68a2      	ldr	r2, [r4, #8]
 800e350:	6923      	ldr	r3, [r4, #16]
 800e352:	7da0      	ldrb	r0, [r4, #22]
 800e354:	7567      	strb	r7, [r4, #21]
 800e356:	1b92      	subs	r2, r2, r6
 800e358:	1b9b      	subs	r3, r3, r6
 800e35a:	f080 0001 	eor.w	r0, r0, #1
 800e35e:	60a2      	str	r2, [r4, #8]
 800e360:	6123      	str	r3, [r4, #16]
 800e362:	b002      	add	sp, #8
 800e364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e368:	68a3      	ldr	r3, [r4, #8]
 800e36a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e36e:	701a      	strb	r2, [r3, #0]
 800e370:	e7bc      	b.n	800e2ec <ucdr_serialize_uint16_t+0x60>
 800e372:	4628      	mov	r0, r5
 800e374:	f10d 0506 	add.w	r5, sp, #6
 800e378:	4629      	mov	r1, r5
 800e37a:	4632      	mov	r2, r6
 800e37c:	f00f fa99 	bl	801d8b2 <memcpy>
 800e380:	68a0      	ldr	r0, [r4, #8]
 800e382:	4642      	mov	r2, r8
 800e384:	19a9      	adds	r1, r5, r6
 800e386:	f00f fa94 	bl	801d8b2 <memcpy>
 800e38a:	e7af      	b.n	800e2ec <ucdr_serialize_uint16_t+0x60>

0800e38c <ucdr_serialize_endian_uint16_t>:
 800e38c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e390:	b083      	sub	sp, #12
 800e392:	460d      	mov	r5, r1
 800e394:	2102      	movs	r1, #2
 800e396:	4604      	mov	r4, r0
 800e398:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e39c:	f001 fa38 	bl	800f810 <ucdr_buffer_alignment>
 800e3a0:	4601      	mov	r1, r0
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e3a8:	f001 fa76 	bl	800f898 <ucdr_advance_buffer>
 800e3ac:	2102      	movs	r1, #2
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f001 f9ce 	bl	800f750 <ucdr_check_buffer_available_for>
 800e3b4:	bb70      	cbnz	r0, 800e414 <ucdr_serialize_endian_uint16_t+0x88>
 800e3b6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e3ba:	42be      	cmp	r6, r7
 800e3bc:	d925      	bls.n	800e40a <ucdr_serialize_endian_uint16_t+0x7e>
 800e3be:	6923      	ldr	r3, [r4, #16]
 800e3c0:	60a6      	str	r6, [r4, #8]
 800e3c2:	1bf6      	subs	r6, r6, r7
 800e3c4:	4433      	add	r3, r6
 800e3c6:	f1c6 0902 	rsb	r9, r6, #2
 800e3ca:	6123      	str	r3, [r4, #16]
 800e3cc:	4649      	mov	r1, r9
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	f001 f9ca 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	d039      	beq.n	800e44c <ucdr_serialize_endian_uint16_t+0xc0>
 800e3d8:	2d01      	cmp	r5, #1
 800e3da:	d04a      	beq.n	800e472 <ucdr_serialize_endian_uint16_t+0xe6>
 800e3dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e3e0:	703b      	strb	r3, [r7, #0]
 800e3e2:	2e00      	cmp	r6, #0
 800e3e4:	d040      	beq.n	800e468 <ucdr_serialize_endian_uint16_t+0xdc>
 800e3e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e3ea:	707b      	strb	r3, [r7, #1]
 800e3ec:	6923      	ldr	r3, [r4, #16]
 800e3ee:	68a2      	ldr	r2, [r4, #8]
 800e3f0:	7da0      	ldrb	r0, [r4, #22]
 800e3f2:	3302      	adds	r3, #2
 800e3f4:	444a      	add	r2, r9
 800e3f6:	1b9b      	subs	r3, r3, r6
 800e3f8:	2102      	movs	r1, #2
 800e3fa:	f080 0001 	eor.w	r0, r0, #1
 800e3fe:	60a2      	str	r2, [r4, #8]
 800e400:	6123      	str	r3, [r4, #16]
 800e402:	7561      	strb	r1, [r4, #21]
 800e404:	b003      	add	sp, #12
 800e406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e40a:	2102      	movs	r1, #2
 800e40c:	4620      	mov	r0, r4
 800e40e:	f001 f9ab 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e412:	b188      	cbz	r0, 800e438 <ucdr_serialize_endian_uint16_t+0xac>
 800e414:	2d01      	cmp	r5, #1
 800e416:	68a3      	ldr	r3, [r4, #8]
 800e418:	d014      	beq.n	800e444 <ucdr_serialize_endian_uint16_t+0xb8>
 800e41a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e41e:	701a      	strb	r2, [r3, #0]
 800e420:	68a3      	ldr	r3, [r4, #8]
 800e422:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e426:	705a      	strb	r2, [r3, #1]
 800e428:	68a2      	ldr	r2, [r4, #8]
 800e42a:	6923      	ldr	r3, [r4, #16]
 800e42c:	3202      	adds	r2, #2
 800e42e:	3302      	adds	r3, #2
 800e430:	2102      	movs	r1, #2
 800e432:	60a2      	str	r2, [r4, #8]
 800e434:	6123      	str	r3, [r4, #16]
 800e436:	7561      	strb	r1, [r4, #21]
 800e438:	7da0      	ldrb	r0, [r4, #22]
 800e43a:	f080 0001 	eor.w	r0, r0, #1
 800e43e:	b003      	add	sp, #12
 800e440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e444:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e448:	801a      	strh	r2, [r3, #0]
 800e44a:	e7ed      	b.n	800e428 <ucdr_serialize_endian_uint16_t+0x9c>
 800e44c:	68a2      	ldr	r2, [r4, #8]
 800e44e:	6923      	ldr	r3, [r4, #16]
 800e450:	7da0      	ldrb	r0, [r4, #22]
 800e452:	f884 8015 	strb.w	r8, [r4, #21]
 800e456:	1b92      	subs	r2, r2, r6
 800e458:	1b9b      	subs	r3, r3, r6
 800e45a:	f080 0001 	eor.w	r0, r0, #1
 800e45e:	60a2      	str	r2, [r4, #8]
 800e460:	6123      	str	r3, [r4, #16]
 800e462:	b003      	add	sp, #12
 800e464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e468:	68a3      	ldr	r3, [r4, #8]
 800e46a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e46e:	701a      	strb	r2, [r3, #0]
 800e470:	e7bc      	b.n	800e3ec <ucdr_serialize_endian_uint16_t+0x60>
 800e472:	f10d 0506 	add.w	r5, sp, #6
 800e476:	4629      	mov	r1, r5
 800e478:	4632      	mov	r2, r6
 800e47a:	4638      	mov	r0, r7
 800e47c:	f00f fa19 	bl	801d8b2 <memcpy>
 800e480:	68a0      	ldr	r0, [r4, #8]
 800e482:	464a      	mov	r2, r9
 800e484:	19a9      	adds	r1, r5, r6
 800e486:	f00f fa14 	bl	801d8b2 <memcpy>
 800e48a:	e7af      	b.n	800e3ec <ucdr_serialize_endian_uint16_t+0x60>

0800e48c <ucdr_deserialize_uint16_t>:
 800e48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e490:	460d      	mov	r5, r1
 800e492:	2102      	movs	r1, #2
 800e494:	4604      	mov	r4, r0
 800e496:	f001 f9bb 	bl	800f810 <ucdr_buffer_alignment>
 800e49a:	4601      	mov	r1, r0
 800e49c:	4620      	mov	r0, r4
 800e49e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e4a2:	f001 f9f9 	bl	800f898 <ucdr_advance_buffer>
 800e4a6:	2102      	movs	r1, #2
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	f001 f951 	bl	800f750 <ucdr_check_buffer_available_for>
 800e4ae:	bb60      	cbnz	r0, 800e50a <ucdr_deserialize_uint16_t+0x7e>
 800e4b0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e4b4:	42be      	cmp	r6, r7
 800e4b6:	d923      	bls.n	800e500 <ucdr_deserialize_uint16_t+0x74>
 800e4b8:	6923      	ldr	r3, [r4, #16]
 800e4ba:	60a6      	str	r6, [r4, #8]
 800e4bc:	1bf6      	subs	r6, r6, r7
 800e4be:	4433      	add	r3, r6
 800e4c0:	f1c6 0902 	rsb	r9, r6, #2
 800e4c4:	6123      	str	r3, [r4, #16]
 800e4c6:	4649      	mov	r1, r9
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	f001 f94d 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	d034      	beq.n	800e53c <ucdr_deserialize_uint16_t+0xb0>
 800e4d2:	7d23      	ldrb	r3, [r4, #20]
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d042      	beq.n	800e55e <ucdr_deserialize_uint16_t+0xd2>
 800e4d8:	787b      	ldrb	r3, [r7, #1]
 800e4da:	702b      	strb	r3, [r5, #0]
 800e4dc:	2e00      	cmp	r6, #0
 800e4de:	d03a      	beq.n	800e556 <ucdr_deserialize_uint16_t+0xca>
 800e4e0:	783b      	ldrb	r3, [r7, #0]
 800e4e2:	706b      	strb	r3, [r5, #1]
 800e4e4:	6923      	ldr	r3, [r4, #16]
 800e4e6:	68a2      	ldr	r2, [r4, #8]
 800e4e8:	7da0      	ldrb	r0, [r4, #22]
 800e4ea:	2102      	movs	r1, #2
 800e4ec:	3302      	adds	r3, #2
 800e4ee:	444a      	add	r2, r9
 800e4f0:	1b9b      	subs	r3, r3, r6
 800e4f2:	7561      	strb	r1, [r4, #21]
 800e4f4:	60a2      	str	r2, [r4, #8]
 800e4f6:	6123      	str	r3, [r4, #16]
 800e4f8:	f080 0001 	eor.w	r0, r0, #1
 800e4fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e500:	2102      	movs	r1, #2
 800e502:	4620      	mov	r0, r4
 800e504:	f001 f930 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e508:	b180      	cbz	r0, 800e52c <ucdr_deserialize_uint16_t+0xa0>
 800e50a:	7d23      	ldrb	r3, [r4, #20]
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	68a3      	ldr	r3, [r4, #8]
 800e510:	d011      	beq.n	800e536 <ucdr_deserialize_uint16_t+0xaa>
 800e512:	785b      	ldrb	r3, [r3, #1]
 800e514:	702b      	strb	r3, [r5, #0]
 800e516:	68a3      	ldr	r3, [r4, #8]
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	706b      	strb	r3, [r5, #1]
 800e51c:	68a2      	ldr	r2, [r4, #8]
 800e51e:	6923      	ldr	r3, [r4, #16]
 800e520:	3202      	adds	r2, #2
 800e522:	3302      	adds	r3, #2
 800e524:	2102      	movs	r1, #2
 800e526:	60a2      	str	r2, [r4, #8]
 800e528:	6123      	str	r3, [r4, #16]
 800e52a:	7561      	strb	r1, [r4, #21]
 800e52c:	7da0      	ldrb	r0, [r4, #22]
 800e52e:	f080 0001 	eor.w	r0, r0, #1
 800e532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e536:	881b      	ldrh	r3, [r3, #0]
 800e538:	802b      	strh	r3, [r5, #0]
 800e53a:	e7ef      	b.n	800e51c <ucdr_deserialize_uint16_t+0x90>
 800e53c:	68a2      	ldr	r2, [r4, #8]
 800e53e:	6923      	ldr	r3, [r4, #16]
 800e540:	7da0      	ldrb	r0, [r4, #22]
 800e542:	f884 8015 	strb.w	r8, [r4, #21]
 800e546:	1b92      	subs	r2, r2, r6
 800e548:	1b9b      	subs	r3, r3, r6
 800e54a:	60a2      	str	r2, [r4, #8]
 800e54c:	6123      	str	r3, [r4, #16]
 800e54e:	f080 0001 	eor.w	r0, r0, #1
 800e552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e556:	68a3      	ldr	r3, [r4, #8]
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	706b      	strb	r3, [r5, #1]
 800e55c:	e7c2      	b.n	800e4e4 <ucdr_deserialize_uint16_t+0x58>
 800e55e:	4639      	mov	r1, r7
 800e560:	4632      	mov	r2, r6
 800e562:	4628      	mov	r0, r5
 800e564:	f00f f9a5 	bl	801d8b2 <memcpy>
 800e568:	68a1      	ldr	r1, [r4, #8]
 800e56a:	464a      	mov	r2, r9
 800e56c:	19a8      	adds	r0, r5, r6
 800e56e:	f00f f9a0 	bl	801d8b2 <memcpy>
 800e572:	e7b7      	b.n	800e4e4 <ucdr_deserialize_uint16_t+0x58>

0800e574 <ucdr_deserialize_endian_uint16_t>:
 800e574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e578:	460e      	mov	r6, r1
 800e57a:	2102      	movs	r1, #2
 800e57c:	4604      	mov	r4, r0
 800e57e:	4615      	mov	r5, r2
 800e580:	f001 f946 	bl	800f810 <ucdr_buffer_alignment>
 800e584:	4601      	mov	r1, r0
 800e586:	4620      	mov	r0, r4
 800e588:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e58c:	f001 f984 	bl	800f898 <ucdr_advance_buffer>
 800e590:	2102      	movs	r1, #2
 800e592:	4620      	mov	r0, r4
 800e594:	f001 f8dc 	bl	800f750 <ucdr_check_buffer_available_for>
 800e598:	bb70      	cbnz	r0, 800e5f8 <ucdr_deserialize_endian_uint16_t+0x84>
 800e59a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800e59e:	4547      	cmp	r7, r8
 800e5a0:	d925      	bls.n	800e5ee <ucdr_deserialize_endian_uint16_t+0x7a>
 800e5a2:	6923      	ldr	r3, [r4, #16]
 800e5a4:	60a7      	str	r7, [r4, #8]
 800e5a6:	eba7 0708 	sub.w	r7, r7, r8
 800e5aa:	443b      	add	r3, r7
 800e5ac:	f1c7 0a02 	rsb	sl, r7, #2
 800e5b0:	6123      	str	r3, [r4, #16]
 800e5b2:	4651      	mov	r1, sl
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	f001 f8d7 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e5ba:	2800      	cmp	r0, #0
 800e5bc:	d034      	beq.n	800e628 <ucdr_deserialize_endian_uint16_t+0xb4>
 800e5be:	2e01      	cmp	r6, #1
 800e5c0:	d043      	beq.n	800e64a <ucdr_deserialize_endian_uint16_t+0xd6>
 800e5c2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e5c6:	702b      	strb	r3, [r5, #0]
 800e5c8:	2f00      	cmp	r7, #0
 800e5ca:	d03a      	beq.n	800e642 <ucdr_deserialize_endian_uint16_t+0xce>
 800e5cc:	f898 3000 	ldrb.w	r3, [r8]
 800e5d0:	706b      	strb	r3, [r5, #1]
 800e5d2:	6923      	ldr	r3, [r4, #16]
 800e5d4:	68a2      	ldr	r2, [r4, #8]
 800e5d6:	7da0      	ldrb	r0, [r4, #22]
 800e5d8:	2102      	movs	r1, #2
 800e5da:	3302      	adds	r3, #2
 800e5dc:	4452      	add	r2, sl
 800e5de:	1bdb      	subs	r3, r3, r7
 800e5e0:	7561      	strb	r1, [r4, #21]
 800e5e2:	60a2      	str	r2, [r4, #8]
 800e5e4:	6123      	str	r3, [r4, #16]
 800e5e6:	f080 0001 	eor.w	r0, r0, #1
 800e5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5ee:	2102      	movs	r1, #2
 800e5f0:	4620      	mov	r0, r4
 800e5f2:	f001 f8b9 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e5f6:	b178      	cbz	r0, 800e618 <ucdr_deserialize_endian_uint16_t+0xa4>
 800e5f8:	2e01      	cmp	r6, #1
 800e5fa:	68a3      	ldr	r3, [r4, #8]
 800e5fc:	d011      	beq.n	800e622 <ucdr_deserialize_endian_uint16_t+0xae>
 800e5fe:	785b      	ldrb	r3, [r3, #1]
 800e600:	702b      	strb	r3, [r5, #0]
 800e602:	68a3      	ldr	r3, [r4, #8]
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	706b      	strb	r3, [r5, #1]
 800e608:	68a2      	ldr	r2, [r4, #8]
 800e60a:	6923      	ldr	r3, [r4, #16]
 800e60c:	3202      	adds	r2, #2
 800e60e:	3302      	adds	r3, #2
 800e610:	2102      	movs	r1, #2
 800e612:	60a2      	str	r2, [r4, #8]
 800e614:	6123      	str	r3, [r4, #16]
 800e616:	7561      	strb	r1, [r4, #21]
 800e618:	7da0      	ldrb	r0, [r4, #22]
 800e61a:	f080 0001 	eor.w	r0, r0, #1
 800e61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e622:	881b      	ldrh	r3, [r3, #0]
 800e624:	802b      	strh	r3, [r5, #0]
 800e626:	e7ef      	b.n	800e608 <ucdr_deserialize_endian_uint16_t+0x94>
 800e628:	68a2      	ldr	r2, [r4, #8]
 800e62a:	6923      	ldr	r3, [r4, #16]
 800e62c:	7da0      	ldrb	r0, [r4, #22]
 800e62e:	f884 9015 	strb.w	r9, [r4, #21]
 800e632:	1bd2      	subs	r2, r2, r7
 800e634:	1bdb      	subs	r3, r3, r7
 800e636:	60a2      	str	r2, [r4, #8]
 800e638:	6123      	str	r3, [r4, #16]
 800e63a:	f080 0001 	eor.w	r0, r0, #1
 800e63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e642:	68a3      	ldr	r3, [r4, #8]
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	706b      	strb	r3, [r5, #1]
 800e648:	e7c3      	b.n	800e5d2 <ucdr_deserialize_endian_uint16_t+0x5e>
 800e64a:	4641      	mov	r1, r8
 800e64c:	463a      	mov	r2, r7
 800e64e:	4628      	mov	r0, r5
 800e650:	f00f f92f 	bl	801d8b2 <memcpy>
 800e654:	68a1      	ldr	r1, [r4, #8]
 800e656:	4652      	mov	r2, sl
 800e658:	19e8      	adds	r0, r5, r7
 800e65a:	f00f f92a 	bl	801d8b2 <memcpy>
 800e65e:	e7b8      	b.n	800e5d2 <ucdr_deserialize_endian_uint16_t+0x5e>

0800e660 <ucdr_serialize_uint32_t>:
 800e660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e664:	b082      	sub	sp, #8
 800e666:	4604      	mov	r4, r0
 800e668:	9101      	str	r1, [sp, #4]
 800e66a:	2104      	movs	r1, #4
 800e66c:	f001 f8d0 	bl	800f810 <ucdr_buffer_alignment>
 800e670:	4601      	mov	r1, r0
 800e672:	4620      	mov	r0, r4
 800e674:	7d67      	ldrb	r7, [r4, #21]
 800e676:	f001 f90f 	bl	800f898 <ucdr_advance_buffer>
 800e67a:	2104      	movs	r1, #4
 800e67c:	4620      	mov	r0, r4
 800e67e:	f001 f867 	bl	800f750 <ucdr_check_buffer_available_for>
 800e682:	2800      	cmp	r0, #0
 800e684:	d139      	bne.n	800e6fa <ucdr_serialize_uint32_t+0x9a>
 800e686:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e68a:	42ab      	cmp	r3, r5
 800e68c:	d930      	bls.n	800e6f0 <ucdr_serialize_uint32_t+0x90>
 800e68e:	1b5e      	subs	r6, r3, r5
 800e690:	60a3      	str	r3, [r4, #8]
 800e692:	6923      	ldr	r3, [r4, #16]
 800e694:	f1c6 0804 	rsb	r8, r6, #4
 800e698:	4433      	add	r3, r6
 800e69a:	6123      	str	r3, [r4, #16]
 800e69c:	4641      	mov	r1, r8
 800e69e:	4620      	mov	r0, r4
 800e6a0:	f001 f862 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e6a4:	2800      	cmp	r0, #0
 800e6a6:	d04c      	beq.n	800e742 <ucdr_serialize_uint32_t+0xe2>
 800e6a8:	7d23      	ldrb	r3, [r4, #20]
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d063      	beq.n	800e776 <ucdr_serialize_uint32_t+0x116>
 800e6ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e6b2:	702b      	strb	r3, [r5, #0]
 800e6b4:	2e00      	cmp	r6, #0
 800e6b6:	d051      	beq.n	800e75c <ucdr_serialize_uint32_t+0xfc>
 800e6b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e6bc:	706b      	strb	r3, [r5, #1]
 800e6be:	2e01      	cmp	r6, #1
 800e6c0:	d050      	beq.n	800e764 <ucdr_serialize_uint32_t+0x104>
 800e6c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e6c6:	70ab      	strb	r3, [r5, #2]
 800e6c8:	2e02      	cmp	r6, #2
 800e6ca:	d04f      	beq.n	800e76c <ucdr_serialize_uint32_t+0x10c>
 800e6cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e6d0:	70eb      	strb	r3, [r5, #3]
 800e6d2:	6923      	ldr	r3, [r4, #16]
 800e6d4:	68a2      	ldr	r2, [r4, #8]
 800e6d6:	7da0      	ldrb	r0, [r4, #22]
 800e6d8:	3304      	adds	r3, #4
 800e6da:	1b9e      	subs	r6, r3, r6
 800e6dc:	4442      	add	r2, r8
 800e6de:	2304      	movs	r3, #4
 800e6e0:	f080 0001 	eor.w	r0, r0, #1
 800e6e4:	60a2      	str	r2, [r4, #8]
 800e6e6:	6126      	str	r6, [r4, #16]
 800e6e8:	7563      	strb	r3, [r4, #21]
 800e6ea:	b002      	add	sp, #8
 800e6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6f0:	2104      	movs	r1, #4
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	f001 f838 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e6f8:	b1d0      	cbz	r0, 800e730 <ucdr_serialize_uint32_t+0xd0>
 800e6fa:	7d23      	ldrb	r3, [r4, #20]
 800e6fc:	2b01      	cmp	r3, #1
 800e6fe:	68a3      	ldr	r3, [r4, #8]
 800e700:	d01c      	beq.n	800e73c <ucdr_serialize_uint32_t+0xdc>
 800e702:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e706:	701a      	strb	r2, [r3, #0]
 800e708:	68a3      	ldr	r3, [r4, #8]
 800e70a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e70e:	705a      	strb	r2, [r3, #1]
 800e710:	68a3      	ldr	r3, [r4, #8]
 800e712:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e716:	709a      	strb	r2, [r3, #2]
 800e718:	68a3      	ldr	r3, [r4, #8]
 800e71a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e71e:	70da      	strb	r2, [r3, #3]
 800e720:	68a2      	ldr	r2, [r4, #8]
 800e722:	6923      	ldr	r3, [r4, #16]
 800e724:	3204      	adds	r2, #4
 800e726:	3304      	adds	r3, #4
 800e728:	2104      	movs	r1, #4
 800e72a:	60a2      	str	r2, [r4, #8]
 800e72c:	6123      	str	r3, [r4, #16]
 800e72e:	7561      	strb	r1, [r4, #21]
 800e730:	7da0      	ldrb	r0, [r4, #22]
 800e732:	f080 0001 	eor.w	r0, r0, #1
 800e736:	b002      	add	sp, #8
 800e738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e73c:	9a01      	ldr	r2, [sp, #4]
 800e73e:	601a      	str	r2, [r3, #0]
 800e740:	e7ee      	b.n	800e720 <ucdr_serialize_uint32_t+0xc0>
 800e742:	68a2      	ldr	r2, [r4, #8]
 800e744:	6923      	ldr	r3, [r4, #16]
 800e746:	7da0      	ldrb	r0, [r4, #22]
 800e748:	7567      	strb	r7, [r4, #21]
 800e74a:	1b92      	subs	r2, r2, r6
 800e74c:	1b9b      	subs	r3, r3, r6
 800e74e:	f080 0001 	eor.w	r0, r0, #1
 800e752:	60a2      	str	r2, [r4, #8]
 800e754:	6123      	str	r3, [r4, #16]
 800e756:	b002      	add	sp, #8
 800e758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e75c:	68a3      	ldr	r3, [r4, #8]
 800e75e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e762:	701a      	strb	r2, [r3, #0]
 800e764:	68a3      	ldr	r3, [r4, #8]
 800e766:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e76a:	701a      	strb	r2, [r3, #0]
 800e76c:	68a3      	ldr	r3, [r4, #8]
 800e76e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e772:	701a      	strb	r2, [r3, #0]
 800e774:	e7ad      	b.n	800e6d2 <ucdr_serialize_uint32_t+0x72>
 800e776:	4628      	mov	r0, r5
 800e778:	ad01      	add	r5, sp, #4
 800e77a:	4629      	mov	r1, r5
 800e77c:	4632      	mov	r2, r6
 800e77e:	f00f f898 	bl	801d8b2 <memcpy>
 800e782:	68a0      	ldr	r0, [r4, #8]
 800e784:	4642      	mov	r2, r8
 800e786:	19a9      	adds	r1, r5, r6
 800e788:	f00f f893 	bl	801d8b2 <memcpy>
 800e78c:	e7a1      	b.n	800e6d2 <ucdr_serialize_uint32_t+0x72>
 800e78e:	bf00      	nop

0800e790 <ucdr_serialize_endian_uint32_t>:
 800e790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e794:	b083      	sub	sp, #12
 800e796:	460d      	mov	r5, r1
 800e798:	2104      	movs	r1, #4
 800e79a:	4604      	mov	r4, r0
 800e79c:	9201      	str	r2, [sp, #4]
 800e79e:	f001 f837 	bl	800f810 <ucdr_buffer_alignment>
 800e7a2:	4601      	mov	r1, r0
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e7aa:	f001 f875 	bl	800f898 <ucdr_advance_buffer>
 800e7ae:	2104      	movs	r1, #4
 800e7b0:	4620      	mov	r0, r4
 800e7b2:	f000 ffcd 	bl	800f750 <ucdr_check_buffer_available_for>
 800e7b6:	2800      	cmp	r0, #0
 800e7b8:	d138      	bne.n	800e82c <ucdr_serialize_endian_uint32_t+0x9c>
 800e7ba:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e7be:	42b7      	cmp	r7, r6
 800e7c0:	d92f      	bls.n	800e822 <ucdr_serialize_endian_uint32_t+0x92>
 800e7c2:	6923      	ldr	r3, [r4, #16]
 800e7c4:	60a7      	str	r7, [r4, #8]
 800e7c6:	1bbf      	subs	r7, r7, r6
 800e7c8:	443b      	add	r3, r7
 800e7ca:	f1c7 0904 	rsb	r9, r7, #4
 800e7ce:	6123      	str	r3, [r4, #16]
 800e7d0:	4649      	mov	r1, r9
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	f000 ffc8 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	d04a      	beq.n	800e872 <ucdr_serialize_endian_uint32_t+0xe2>
 800e7dc:	2d01      	cmp	r5, #1
 800e7de:	d063      	beq.n	800e8a8 <ucdr_serialize_endian_uint32_t+0x118>
 800e7e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e7e4:	7033      	strb	r3, [r6, #0]
 800e7e6:	2f00      	cmp	r7, #0
 800e7e8:	d051      	beq.n	800e88e <ucdr_serialize_endian_uint32_t+0xfe>
 800e7ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e7ee:	7073      	strb	r3, [r6, #1]
 800e7f0:	2f01      	cmp	r7, #1
 800e7f2:	d050      	beq.n	800e896 <ucdr_serialize_endian_uint32_t+0x106>
 800e7f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e7f8:	70b3      	strb	r3, [r6, #2]
 800e7fa:	2f02      	cmp	r7, #2
 800e7fc:	d04f      	beq.n	800e89e <ucdr_serialize_endian_uint32_t+0x10e>
 800e7fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e802:	70f3      	strb	r3, [r6, #3]
 800e804:	6923      	ldr	r3, [r4, #16]
 800e806:	68a2      	ldr	r2, [r4, #8]
 800e808:	7da0      	ldrb	r0, [r4, #22]
 800e80a:	3304      	adds	r3, #4
 800e80c:	444a      	add	r2, r9
 800e80e:	1bdb      	subs	r3, r3, r7
 800e810:	2104      	movs	r1, #4
 800e812:	f080 0001 	eor.w	r0, r0, #1
 800e816:	60a2      	str	r2, [r4, #8]
 800e818:	6123      	str	r3, [r4, #16]
 800e81a:	7561      	strb	r1, [r4, #21]
 800e81c:	b003      	add	sp, #12
 800e81e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e822:	2104      	movs	r1, #4
 800e824:	4620      	mov	r0, r4
 800e826:	f000 ff9f 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e82a:	b1c8      	cbz	r0, 800e860 <ucdr_serialize_endian_uint32_t+0xd0>
 800e82c:	2d01      	cmp	r5, #1
 800e82e:	68a3      	ldr	r3, [r4, #8]
 800e830:	d01c      	beq.n	800e86c <ucdr_serialize_endian_uint32_t+0xdc>
 800e832:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e836:	701a      	strb	r2, [r3, #0]
 800e838:	68a3      	ldr	r3, [r4, #8]
 800e83a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e83e:	705a      	strb	r2, [r3, #1]
 800e840:	68a3      	ldr	r3, [r4, #8]
 800e842:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e846:	709a      	strb	r2, [r3, #2]
 800e848:	68a3      	ldr	r3, [r4, #8]
 800e84a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e84e:	70da      	strb	r2, [r3, #3]
 800e850:	68a2      	ldr	r2, [r4, #8]
 800e852:	6923      	ldr	r3, [r4, #16]
 800e854:	3204      	adds	r2, #4
 800e856:	3304      	adds	r3, #4
 800e858:	2104      	movs	r1, #4
 800e85a:	60a2      	str	r2, [r4, #8]
 800e85c:	6123      	str	r3, [r4, #16]
 800e85e:	7561      	strb	r1, [r4, #21]
 800e860:	7da0      	ldrb	r0, [r4, #22]
 800e862:	f080 0001 	eor.w	r0, r0, #1
 800e866:	b003      	add	sp, #12
 800e868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e86c:	9a01      	ldr	r2, [sp, #4]
 800e86e:	601a      	str	r2, [r3, #0]
 800e870:	e7ee      	b.n	800e850 <ucdr_serialize_endian_uint32_t+0xc0>
 800e872:	68a2      	ldr	r2, [r4, #8]
 800e874:	6923      	ldr	r3, [r4, #16]
 800e876:	7da0      	ldrb	r0, [r4, #22]
 800e878:	f884 8015 	strb.w	r8, [r4, #21]
 800e87c:	1bd2      	subs	r2, r2, r7
 800e87e:	1bdb      	subs	r3, r3, r7
 800e880:	f080 0001 	eor.w	r0, r0, #1
 800e884:	60a2      	str	r2, [r4, #8]
 800e886:	6123      	str	r3, [r4, #16]
 800e888:	b003      	add	sp, #12
 800e88a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e88e:	68a3      	ldr	r3, [r4, #8]
 800e890:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e894:	701a      	strb	r2, [r3, #0]
 800e896:	68a3      	ldr	r3, [r4, #8]
 800e898:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e89c:	701a      	strb	r2, [r3, #0]
 800e89e:	68a3      	ldr	r3, [r4, #8]
 800e8a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e8a4:	701a      	strb	r2, [r3, #0]
 800e8a6:	e7ad      	b.n	800e804 <ucdr_serialize_endian_uint32_t+0x74>
 800e8a8:	ad01      	add	r5, sp, #4
 800e8aa:	4629      	mov	r1, r5
 800e8ac:	463a      	mov	r2, r7
 800e8ae:	4630      	mov	r0, r6
 800e8b0:	f00e ffff 	bl	801d8b2 <memcpy>
 800e8b4:	68a0      	ldr	r0, [r4, #8]
 800e8b6:	464a      	mov	r2, r9
 800e8b8:	19e9      	adds	r1, r5, r7
 800e8ba:	f00e fffa 	bl	801d8b2 <memcpy>
 800e8be:	e7a1      	b.n	800e804 <ucdr_serialize_endian_uint32_t+0x74>

0800e8c0 <ucdr_deserialize_uint32_t>:
 800e8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8c4:	460d      	mov	r5, r1
 800e8c6:	2104      	movs	r1, #4
 800e8c8:	4604      	mov	r4, r0
 800e8ca:	f000 ffa1 	bl	800f810 <ucdr_buffer_alignment>
 800e8ce:	4601      	mov	r1, r0
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e8d6:	f000 ffdf 	bl	800f898 <ucdr_advance_buffer>
 800e8da:	2104      	movs	r1, #4
 800e8dc:	4620      	mov	r0, r4
 800e8de:	f000 ff37 	bl	800f750 <ucdr_check_buffer_available_for>
 800e8e2:	2800      	cmp	r0, #0
 800e8e4:	d138      	bne.n	800e958 <ucdr_deserialize_uint32_t+0x98>
 800e8e6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e8ea:	42b7      	cmp	r7, r6
 800e8ec:	d92f      	bls.n	800e94e <ucdr_deserialize_uint32_t+0x8e>
 800e8ee:	6923      	ldr	r3, [r4, #16]
 800e8f0:	60a7      	str	r7, [r4, #8]
 800e8f2:	1bbf      	subs	r7, r7, r6
 800e8f4:	443b      	add	r3, r7
 800e8f6:	f1c7 0904 	rsb	r9, r7, #4
 800e8fa:	6123      	str	r3, [r4, #16]
 800e8fc:	4649      	mov	r1, r9
 800e8fe:	4620      	mov	r0, r4
 800e900:	f000 ff32 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e904:	2800      	cmp	r0, #0
 800e906:	d046      	beq.n	800e996 <ucdr_deserialize_uint32_t+0xd6>
 800e908:	7d23      	ldrb	r3, [r4, #20]
 800e90a:	2b01      	cmp	r3, #1
 800e90c:	d05c      	beq.n	800e9c8 <ucdr_deserialize_uint32_t+0x108>
 800e90e:	78f3      	ldrb	r3, [r6, #3]
 800e910:	702b      	strb	r3, [r5, #0]
 800e912:	2f00      	cmp	r7, #0
 800e914:	d04c      	beq.n	800e9b0 <ucdr_deserialize_uint32_t+0xf0>
 800e916:	78b3      	ldrb	r3, [r6, #2]
 800e918:	706b      	strb	r3, [r5, #1]
 800e91a:	2f01      	cmp	r7, #1
 800e91c:	f105 0302 	add.w	r3, r5, #2
 800e920:	d04a      	beq.n	800e9b8 <ucdr_deserialize_uint32_t+0xf8>
 800e922:	7873      	ldrb	r3, [r6, #1]
 800e924:	70ab      	strb	r3, [r5, #2]
 800e926:	2f02      	cmp	r7, #2
 800e928:	f105 0303 	add.w	r3, r5, #3
 800e92c:	d048      	beq.n	800e9c0 <ucdr_deserialize_uint32_t+0x100>
 800e92e:	7833      	ldrb	r3, [r6, #0]
 800e930:	70eb      	strb	r3, [r5, #3]
 800e932:	6923      	ldr	r3, [r4, #16]
 800e934:	68a2      	ldr	r2, [r4, #8]
 800e936:	7da0      	ldrb	r0, [r4, #22]
 800e938:	2104      	movs	r1, #4
 800e93a:	3304      	adds	r3, #4
 800e93c:	444a      	add	r2, r9
 800e93e:	1bdb      	subs	r3, r3, r7
 800e940:	7561      	strb	r1, [r4, #21]
 800e942:	60a2      	str	r2, [r4, #8]
 800e944:	6123      	str	r3, [r4, #16]
 800e946:	f080 0001 	eor.w	r0, r0, #1
 800e94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e94e:	2104      	movs	r1, #4
 800e950:	4620      	mov	r0, r4
 800e952:	f000 ff09 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800e956:	b1b0      	cbz	r0, 800e986 <ucdr_deserialize_uint32_t+0xc6>
 800e958:	7d23      	ldrb	r3, [r4, #20]
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	68a3      	ldr	r3, [r4, #8]
 800e95e:	d017      	beq.n	800e990 <ucdr_deserialize_uint32_t+0xd0>
 800e960:	78db      	ldrb	r3, [r3, #3]
 800e962:	702b      	strb	r3, [r5, #0]
 800e964:	68a3      	ldr	r3, [r4, #8]
 800e966:	789b      	ldrb	r3, [r3, #2]
 800e968:	706b      	strb	r3, [r5, #1]
 800e96a:	68a3      	ldr	r3, [r4, #8]
 800e96c:	785b      	ldrb	r3, [r3, #1]
 800e96e:	70ab      	strb	r3, [r5, #2]
 800e970:	68a3      	ldr	r3, [r4, #8]
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	70eb      	strb	r3, [r5, #3]
 800e976:	68a2      	ldr	r2, [r4, #8]
 800e978:	6923      	ldr	r3, [r4, #16]
 800e97a:	3204      	adds	r2, #4
 800e97c:	3304      	adds	r3, #4
 800e97e:	2104      	movs	r1, #4
 800e980:	60a2      	str	r2, [r4, #8]
 800e982:	6123      	str	r3, [r4, #16]
 800e984:	7561      	strb	r1, [r4, #21]
 800e986:	7da0      	ldrb	r0, [r4, #22]
 800e988:	f080 0001 	eor.w	r0, r0, #1
 800e98c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	602b      	str	r3, [r5, #0]
 800e994:	e7ef      	b.n	800e976 <ucdr_deserialize_uint32_t+0xb6>
 800e996:	68a2      	ldr	r2, [r4, #8]
 800e998:	6923      	ldr	r3, [r4, #16]
 800e99a:	7da0      	ldrb	r0, [r4, #22]
 800e99c:	f884 8015 	strb.w	r8, [r4, #21]
 800e9a0:	1bd2      	subs	r2, r2, r7
 800e9a2:	1bdb      	subs	r3, r3, r7
 800e9a4:	60a2      	str	r2, [r4, #8]
 800e9a6:	6123      	str	r3, [r4, #16]
 800e9a8:	f080 0001 	eor.w	r0, r0, #1
 800e9ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9b0:	68a3      	ldr	r3, [r4, #8]
 800e9b2:	789b      	ldrb	r3, [r3, #2]
 800e9b4:	706b      	strb	r3, [r5, #1]
 800e9b6:	1cab      	adds	r3, r5, #2
 800e9b8:	68a2      	ldr	r2, [r4, #8]
 800e9ba:	7852      	ldrb	r2, [r2, #1]
 800e9bc:	f803 2b01 	strb.w	r2, [r3], #1
 800e9c0:	68a2      	ldr	r2, [r4, #8]
 800e9c2:	7812      	ldrb	r2, [r2, #0]
 800e9c4:	701a      	strb	r2, [r3, #0]
 800e9c6:	e7b4      	b.n	800e932 <ucdr_deserialize_uint32_t+0x72>
 800e9c8:	4631      	mov	r1, r6
 800e9ca:	463a      	mov	r2, r7
 800e9cc:	4628      	mov	r0, r5
 800e9ce:	f00e ff70 	bl	801d8b2 <memcpy>
 800e9d2:	68a1      	ldr	r1, [r4, #8]
 800e9d4:	464a      	mov	r2, r9
 800e9d6:	19e8      	adds	r0, r5, r7
 800e9d8:	f00e ff6b 	bl	801d8b2 <memcpy>
 800e9dc:	e7a9      	b.n	800e932 <ucdr_deserialize_uint32_t+0x72>
 800e9de:	bf00      	nop

0800e9e0 <ucdr_deserialize_endian_uint32_t>:
 800e9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9e4:	460e      	mov	r6, r1
 800e9e6:	2104      	movs	r1, #4
 800e9e8:	4604      	mov	r4, r0
 800e9ea:	4615      	mov	r5, r2
 800e9ec:	f000 ff10 	bl	800f810 <ucdr_buffer_alignment>
 800e9f0:	4601      	mov	r1, r0
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e9f8:	f000 ff4e 	bl	800f898 <ucdr_advance_buffer>
 800e9fc:	2104      	movs	r1, #4
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f000 fea6 	bl	800f750 <ucdr_check_buffer_available_for>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	d13c      	bne.n	800ea82 <ucdr_deserialize_endian_uint32_t+0xa2>
 800ea08:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ea0c:	42bb      	cmp	r3, r7
 800ea0e:	d933      	bls.n	800ea78 <ucdr_deserialize_endian_uint32_t+0x98>
 800ea10:	eba3 0807 	sub.w	r8, r3, r7
 800ea14:	60a3      	str	r3, [r4, #8]
 800ea16:	6923      	ldr	r3, [r4, #16]
 800ea18:	f1c8 0a04 	rsb	sl, r8, #4
 800ea1c:	4443      	add	r3, r8
 800ea1e:	6123      	str	r3, [r4, #16]
 800ea20:	4651      	mov	r1, sl
 800ea22:	4620      	mov	r0, r4
 800ea24:	f000 fea0 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	d048      	beq.n	800eabe <ucdr_deserialize_endian_uint32_t+0xde>
 800ea2c:	2e01      	cmp	r6, #1
 800ea2e:	d061      	beq.n	800eaf4 <ucdr_deserialize_endian_uint32_t+0x114>
 800ea30:	78fb      	ldrb	r3, [r7, #3]
 800ea32:	702b      	strb	r3, [r5, #0]
 800ea34:	f1b8 0f00 	cmp.w	r8, #0
 800ea38:	d050      	beq.n	800eadc <ucdr_deserialize_endian_uint32_t+0xfc>
 800ea3a:	78bb      	ldrb	r3, [r7, #2]
 800ea3c:	706b      	strb	r3, [r5, #1]
 800ea3e:	f1b8 0f01 	cmp.w	r8, #1
 800ea42:	f105 0302 	add.w	r3, r5, #2
 800ea46:	d04d      	beq.n	800eae4 <ucdr_deserialize_endian_uint32_t+0x104>
 800ea48:	787b      	ldrb	r3, [r7, #1]
 800ea4a:	70ab      	strb	r3, [r5, #2]
 800ea4c:	f1b8 0f02 	cmp.w	r8, #2
 800ea50:	f105 0303 	add.w	r3, r5, #3
 800ea54:	d04a      	beq.n	800eaec <ucdr_deserialize_endian_uint32_t+0x10c>
 800ea56:	783b      	ldrb	r3, [r7, #0]
 800ea58:	70eb      	strb	r3, [r5, #3]
 800ea5a:	6923      	ldr	r3, [r4, #16]
 800ea5c:	68a2      	ldr	r2, [r4, #8]
 800ea5e:	7da0      	ldrb	r0, [r4, #22]
 800ea60:	2104      	movs	r1, #4
 800ea62:	3304      	adds	r3, #4
 800ea64:	4452      	add	r2, sl
 800ea66:	eba3 0308 	sub.w	r3, r3, r8
 800ea6a:	7561      	strb	r1, [r4, #21]
 800ea6c:	60a2      	str	r2, [r4, #8]
 800ea6e:	6123      	str	r3, [r4, #16]
 800ea70:	f080 0001 	eor.w	r0, r0, #1
 800ea74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea78:	2104      	movs	r1, #4
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	f000 fe74 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800ea80:	b1a8      	cbz	r0, 800eaae <ucdr_deserialize_endian_uint32_t+0xce>
 800ea82:	2e01      	cmp	r6, #1
 800ea84:	68a3      	ldr	r3, [r4, #8]
 800ea86:	d017      	beq.n	800eab8 <ucdr_deserialize_endian_uint32_t+0xd8>
 800ea88:	78db      	ldrb	r3, [r3, #3]
 800ea8a:	702b      	strb	r3, [r5, #0]
 800ea8c:	68a3      	ldr	r3, [r4, #8]
 800ea8e:	789b      	ldrb	r3, [r3, #2]
 800ea90:	706b      	strb	r3, [r5, #1]
 800ea92:	68a3      	ldr	r3, [r4, #8]
 800ea94:	785b      	ldrb	r3, [r3, #1]
 800ea96:	70ab      	strb	r3, [r5, #2]
 800ea98:	68a3      	ldr	r3, [r4, #8]
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	70eb      	strb	r3, [r5, #3]
 800ea9e:	68a2      	ldr	r2, [r4, #8]
 800eaa0:	6923      	ldr	r3, [r4, #16]
 800eaa2:	3204      	adds	r2, #4
 800eaa4:	3304      	adds	r3, #4
 800eaa6:	2104      	movs	r1, #4
 800eaa8:	60a2      	str	r2, [r4, #8]
 800eaaa:	6123      	str	r3, [r4, #16]
 800eaac:	7561      	strb	r1, [r4, #21]
 800eaae:	7da0      	ldrb	r0, [r4, #22]
 800eab0:	f080 0001 	eor.w	r0, r0, #1
 800eab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	602b      	str	r3, [r5, #0]
 800eabc:	e7ef      	b.n	800ea9e <ucdr_deserialize_endian_uint32_t+0xbe>
 800eabe:	68a2      	ldr	r2, [r4, #8]
 800eac0:	6923      	ldr	r3, [r4, #16]
 800eac2:	7da0      	ldrb	r0, [r4, #22]
 800eac4:	f884 9015 	strb.w	r9, [r4, #21]
 800eac8:	eba2 0208 	sub.w	r2, r2, r8
 800eacc:	eba3 0308 	sub.w	r3, r3, r8
 800ead0:	60a2      	str	r2, [r4, #8]
 800ead2:	6123      	str	r3, [r4, #16]
 800ead4:	f080 0001 	eor.w	r0, r0, #1
 800ead8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eadc:	68a3      	ldr	r3, [r4, #8]
 800eade:	789b      	ldrb	r3, [r3, #2]
 800eae0:	706b      	strb	r3, [r5, #1]
 800eae2:	1cab      	adds	r3, r5, #2
 800eae4:	68a2      	ldr	r2, [r4, #8]
 800eae6:	7852      	ldrb	r2, [r2, #1]
 800eae8:	f803 2b01 	strb.w	r2, [r3], #1
 800eaec:	68a2      	ldr	r2, [r4, #8]
 800eaee:	7812      	ldrb	r2, [r2, #0]
 800eaf0:	701a      	strb	r2, [r3, #0]
 800eaf2:	e7b2      	b.n	800ea5a <ucdr_deserialize_endian_uint32_t+0x7a>
 800eaf4:	4639      	mov	r1, r7
 800eaf6:	4642      	mov	r2, r8
 800eaf8:	4628      	mov	r0, r5
 800eafa:	f00e feda 	bl	801d8b2 <memcpy>
 800eafe:	68a1      	ldr	r1, [r4, #8]
 800eb00:	4652      	mov	r2, sl
 800eb02:	eb05 0008 	add.w	r0, r5, r8
 800eb06:	f00e fed4 	bl	801d8b2 <memcpy>
 800eb0a:	e7a6      	b.n	800ea5a <ucdr_deserialize_endian_uint32_t+0x7a>

0800eb0c <ucdr_serialize_uint64_t>:
 800eb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb10:	2108      	movs	r1, #8
 800eb12:	b082      	sub	sp, #8
 800eb14:	4604      	mov	r4, r0
 800eb16:	e9cd 2300 	strd	r2, r3, [sp]
 800eb1a:	f000 fe79 	bl	800f810 <ucdr_buffer_alignment>
 800eb1e:	4601      	mov	r1, r0
 800eb20:	4620      	mov	r0, r4
 800eb22:	7d67      	ldrb	r7, [r4, #21]
 800eb24:	f000 feb8 	bl	800f898 <ucdr_advance_buffer>
 800eb28:	2108      	movs	r1, #8
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f000 fe10 	bl	800f750 <ucdr_check_buffer_available_for>
 800eb30:	2800      	cmp	r0, #0
 800eb32:	d14e      	bne.n	800ebd2 <ucdr_serialize_uint64_t+0xc6>
 800eb34:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800eb38:	42ab      	cmp	r3, r5
 800eb3a:	d945      	bls.n	800ebc8 <ucdr_serialize_uint64_t+0xbc>
 800eb3c:	1b5e      	subs	r6, r3, r5
 800eb3e:	60a3      	str	r3, [r4, #8]
 800eb40:	6923      	ldr	r3, [r4, #16]
 800eb42:	f1c6 0808 	rsb	r8, r6, #8
 800eb46:	4433      	add	r3, r6
 800eb48:	6123      	str	r3, [r4, #16]
 800eb4a:	4641      	mov	r1, r8
 800eb4c:	4620      	mov	r0, r4
 800eb4e:	f000 fe0b 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800eb52:	2800      	cmp	r0, #0
 800eb54:	d074      	beq.n	800ec40 <ucdr_serialize_uint64_t+0x134>
 800eb56:	7d23      	ldrb	r3, [r4, #20]
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	f000 809b 	beq.w	800ec94 <ucdr_serialize_uint64_t+0x188>
 800eb5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eb62:	702b      	strb	r3, [r5, #0]
 800eb64:	2e00      	cmp	r6, #0
 800eb66:	d078      	beq.n	800ec5a <ucdr_serialize_uint64_t+0x14e>
 800eb68:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eb6c:	706b      	strb	r3, [r5, #1]
 800eb6e:	2e01      	cmp	r6, #1
 800eb70:	d077      	beq.n	800ec62 <ucdr_serialize_uint64_t+0x156>
 800eb72:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800eb76:	70ab      	strb	r3, [r5, #2]
 800eb78:	2e02      	cmp	r6, #2
 800eb7a:	d076      	beq.n	800ec6a <ucdr_serialize_uint64_t+0x15e>
 800eb7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800eb80:	70eb      	strb	r3, [r5, #3]
 800eb82:	2e03      	cmp	r6, #3
 800eb84:	d075      	beq.n	800ec72 <ucdr_serialize_uint64_t+0x166>
 800eb86:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800eb8a:	712b      	strb	r3, [r5, #4]
 800eb8c:	2e04      	cmp	r6, #4
 800eb8e:	d074      	beq.n	800ec7a <ucdr_serialize_uint64_t+0x16e>
 800eb90:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800eb94:	716b      	strb	r3, [r5, #5]
 800eb96:	2e05      	cmp	r6, #5
 800eb98:	d073      	beq.n	800ec82 <ucdr_serialize_uint64_t+0x176>
 800eb9a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800eb9e:	71ab      	strb	r3, [r5, #6]
 800eba0:	2e06      	cmp	r6, #6
 800eba2:	d072      	beq.n	800ec8a <ucdr_serialize_uint64_t+0x17e>
 800eba4:	f89d 3000 	ldrb.w	r3, [sp]
 800eba8:	71eb      	strb	r3, [r5, #7]
 800ebaa:	6923      	ldr	r3, [r4, #16]
 800ebac:	68a2      	ldr	r2, [r4, #8]
 800ebae:	7da0      	ldrb	r0, [r4, #22]
 800ebb0:	3308      	adds	r3, #8
 800ebb2:	1b9e      	subs	r6, r3, r6
 800ebb4:	4442      	add	r2, r8
 800ebb6:	2308      	movs	r3, #8
 800ebb8:	f080 0001 	eor.w	r0, r0, #1
 800ebbc:	60a2      	str	r2, [r4, #8]
 800ebbe:	6126      	str	r6, [r4, #16]
 800ebc0:	7563      	strb	r3, [r4, #21]
 800ebc2:	b002      	add	sp, #8
 800ebc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebc8:	2108      	movs	r1, #8
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f000 fdcc 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800ebd0:	b350      	cbz	r0, 800ec28 <ucdr_serialize_uint64_t+0x11c>
 800ebd2:	7d23      	ldrb	r3, [r4, #20]
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d02d      	beq.n	800ec34 <ucdr_serialize_uint64_t+0x128>
 800ebd8:	68a3      	ldr	r3, [r4, #8]
 800ebda:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ebde:	701a      	strb	r2, [r3, #0]
 800ebe0:	68a3      	ldr	r3, [r4, #8]
 800ebe2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ebe6:	705a      	strb	r2, [r3, #1]
 800ebe8:	68a3      	ldr	r3, [r4, #8]
 800ebea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ebee:	709a      	strb	r2, [r3, #2]
 800ebf0:	68a3      	ldr	r3, [r4, #8]
 800ebf2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ebf6:	70da      	strb	r2, [r3, #3]
 800ebf8:	68a3      	ldr	r3, [r4, #8]
 800ebfa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ebfe:	711a      	strb	r2, [r3, #4]
 800ec00:	68a3      	ldr	r3, [r4, #8]
 800ec02:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ec06:	715a      	strb	r2, [r3, #5]
 800ec08:	68a3      	ldr	r3, [r4, #8]
 800ec0a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ec0e:	719a      	strb	r2, [r3, #6]
 800ec10:	68a3      	ldr	r3, [r4, #8]
 800ec12:	f89d 2000 	ldrb.w	r2, [sp]
 800ec16:	71da      	strb	r2, [r3, #7]
 800ec18:	68a2      	ldr	r2, [r4, #8]
 800ec1a:	6923      	ldr	r3, [r4, #16]
 800ec1c:	3208      	adds	r2, #8
 800ec1e:	3308      	adds	r3, #8
 800ec20:	2108      	movs	r1, #8
 800ec22:	60a2      	str	r2, [r4, #8]
 800ec24:	6123      	str	r3, [r4, #16]
 800ec26:	7561      	strb	r1, [r4, #21]
 800ec28:	7da0      	ldrb	r0, [r4, #22]
 800ec2a:	f080 0001 	eor.w	r0, r0, #1
 800ec2e:	b002      	add	sp, #8
 800ec30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec34:	466b      	mov	r3, sp
 800ec36:	cb03      	ldmia	r3!, {r0, r1}
 800ec38:	68a3      	ldr	r3, [r4, #8]
 800ec3a:	6018      	str	r0, [r3, #0]
 800ec3c:	6059      	str	r1, [r3, #4]
 800ec3e:	e7eb      	b.n	800ec18 <ucdr_serialize_uint64_t+0x10c>
 800ec40:	68a2      	ldr	r2, [r4, #8]
 800ec42:	6923      	ldr	r3, [r4, #16]
 800ec44:	7da0      	ldrb	r0, [r4, #22]
 800ec46:	7567      	strb	r7, [r4, #21]
 800ec48:	1b92      	subs	r2, r2, r6
 800ec4a:	1b9b      	subs	r3, r3, r6
 800ec4c:	f080 0001 	eor.w	r0, r0, #1
 800ec50:	60a2      	str	r2, [r4, #8]
 800ec52:	6123      	str	r3, [r4, #16]
 800ec54:	b002      	add	sp, #8
 800ec56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec5a:	68a3      	ldr	r3, [r4, #8]
 800ec5c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec60:	701a      	strb	r2, [r3, #0]
 800ec62:	68a3      	ldr	r3, [r4, #8]
 800ec64:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ec68:	701a      	strb	r2, [r3, #0]
 800ec6a:	68a3      	ldr	r3, [r4, #8]
 800ec6c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ec70:	701a      	strb	r2, [r3, #0]
 800ec72:	68a3      	ldr	r3, [r4, #8]
 800ec74:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ec78:	701a      	strb	r2, [r3, #0]
 800ec7a:	68a3      	ldr	r3, [r4, #8]
 800ec7c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ec80:	701a      	strb	r2, [r3, #0]
 800ec82:	68a3      	ldr	r3, [r4, #8]
 800ec84:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ec88:	701a      	strb	r2, [r3, #0]
 800ec8a:	68a3      	ldr	r3, [r4, #8]
 800ec8c:	f89d 2000 	ldrb.w	r2, [sp]
 800ec90:	701a      	strb	r2, [r3, #0]
 800ec92:	e78a      	b.n	800ebaa <ucdr_serialize_uint64_t+0x9e>
 800ec94:	4628      	mov	r0, r5
 800ec96:	466d      	mov	r5, sp
 800ec98:	4629      	mov	r1, r5
 800ec9a:	4632      	mov	r2, r6
 800ec9c:	f00e fe09 	bl	801d8b2 <memcpy>
 800eca0:	68a0      	ldr	r0, [r4, #8]
 800eca2:	4642      	mov	r2, r8
 800eca4:	19a9      	adds	r1, r5, r6
 800eca6:	f00e fe04 	bl	801d8b2 <memcpy>
 800ecaa:	e77e      	b.n	800ebaa <ucdr_serialize_uint64_t+0x9e>

0800ecac <ucdr_serialize_int16_t>:
 800ecac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb0:	b082      	sub	sp, #8
 800ecb2:	460b      	mov	r3, r1
 800ecb4:	2102      	movs	r1, #2
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ecbc:	f000 fda8 	bl	800f810 <ucdr_buffer_alignment>
 800ecc0:	4601      	mov	r1, r0
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	7d67      	ldrb	r7, [r4, #21]
 800ecc6:	f000 fde7 	bl	800f898 <ucdr_advance_buffer>
 800ecca:	2102      	movs	r1, #2
 800eccc:	4620      	mov	r0, r4
 800ecce:	f000 fd3f 	bl	800f750 <ucdr_check_buffer_available_for>
 800ecd2:	bb78      	cbnz	r0, 800ed34 <ucdr_serialize_int16_t+0x88>
 800ecd4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ecd8:	42ab      	cmp	r3, r5
 800ecda:	d926      	bls.n	800ed2a <ucdr_serialize_int16_t+0x7e>
 800ecdc:	1b5e      	subs	r6, r3, r5
 800ecde:	60a3      	str	r3, [r4, #8]
 800ece0:	6923      	ldr	r3, [r4, #16]
 800ece2:	f1c6 0802 	rsb	r8, r6, #2
 800ece6:	4433      	add	r3, r6
 800ece8:	6123      	str	r3, [r4, #16]
 800ecea:	4641      	mov	r1, r8
 800ecec:	4620      	mov	r0, r4
 800ecee:	f000 fd3b 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800ecf2:	2800      	cmp	r0, #0
 800ecf4:	d03b      	beq.n	800ed6e <ucdr_serialize_int16_t+0xc2>
 800ecf6:	7d23      	ldrb	r3, [r4, #20]
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d04a      	beq.n	800ed92 <ucdr_serialize_int16_t+0xe6>
 800ecfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ed00:	702b      	strb	r3, [r5, #0]
 800ed02:	2e00      	cmp	r6, #0
 800ed04:	d040      	beq.n	800ed88 <ucdr_serialize_int16_t+0xdc>
 800ed06:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ed0a:	706b      	strb	r3, [r5, #1]
 800ed0c:	6923      	ldr	r3, [r4, #16]
 800ed0e:	68a2      	ldr	r2, [r4, #8]
 800ed10:	7da0      	ldrb	r0, [r4, #22]
 800ed12:	3302      	adds	r3, #2
 800ed14:	1b9e      	subs	r6, r3, r6
 800ed16:	4442      	add	r2, r8
 800ed18:	2302      	movs	r3, #2
 800ed1a:	f080 0001 	eor.w	r0, r0, #1
 800ed1e:	60a2      	str	r2, [r4, #8]
 800ed20:	6126      	str	r6, [r4, #16]
 800ed22:	7563      	strb	r3, [r4, #21]
 800ed24:	b002      	add	sp, #8
 800ed26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed2a:	2102      	movs	r1, #2
 800ed2c:	4620      	mov	r0, r4
 800ed2e:	f000 fd1b 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800ed32:	b190      	cbz	r0, 800ed5a <ucdr_serialize_int16_t+0xae>
 800ed34:	7d23      	ldrb	r3, [r4, #20]
 800ed36:	2b01      	cmp	r3, #1
 800ed38:	68a3      	ldr	r3, [r4, #8]
 800ed3a:	d014      	beq.n	800ed66 <ucdr_serialize_int16_t+0xba>
 800ed3c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ed40:	701a      	strb	r2, [r3, #0]
 800ed42:	68a3      	ldr	r3, [r4, #8]
 800ed44:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ed48:	705a      	strb	r2, [r3, #1]
 800ed4a:	68a2      	ldr	r2, [r4, #8]
 800ed4c:	6923      	ldr	r3, [r4, #16]
 800ed4e:	3202      	adds	r2, #2
 800ed50:	3302      	adds	r3, #2
 800ed52:	2102      	movs	r1, #2
 800ed54:	60a2      	str	r2, [r4, #8]
 800ed56:	6123      	str	r3, [r4, #16]
 800ed58:	7561      	strb	r1, [r4, #21]
 800ed5a:	7da0      	ldrb	r0, [r4, #22]
 800ed5c:	f080 0001 	eor.w	r0, r0, #1
 800ed60:	b002      	add	sp, #8
 800ed62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed66:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ed6a:	801a      	strh	r2, [r3, #0]
 800ed6c:	e7ed      	b.n	800ed4a <ucdr_serialize_int16_t+0x9e>
 800ed6e:	68a2      	ldr	r2, [r4, #8]
 800ed70:	6923      	ldr	r3, [r4, #16]
 800ed72:	7da0      	ldrb	r0, [r4, #22]
 800ed74:	7567      	strb	r7, [r4, #21]
 800ed76:	1b92      	subs	r2, r2, r6
 800ed78:	1b9b      	subs	r3, r3, r6
 800ed7a:	f080 0001 	eor.w	r0, r0, #1
 800ed7e:	60a2      	str	r2, [r4, #8]
 800ed80:	6123      	str	r3, [r4, #16]
 800ed82:	b002      	add	sp, #8
 800ed84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed88:	68a3      	ldr	r3, [r4, #8]
 800ed8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ed8e:	701a      	strb	r2, [r3, #0]
 800ed90:	e7bc      	b.n	800ed0c <ucdr_serialize_int16_t+0x60>
 800ed92:	4628      	mov	r0, r5
 800ed94:	f10d 0506 	add.w	r5, sp, #6
 800ed98:	4629      	mov	r1, r5
 800ed9a:	4632      	mov	r2, r6
 800ed9c:	f00e fd89 	bl	801d8b2 <memcpy>
 800eda0:	68a0      	ldr	r0, [r4, #8]
 800eda2:	4642      	mov	r2, r8
 800eda4:	19a9      	adds	r1, r5, r6
 800eda6:	f00e fd84 	bl	801d8b2 <memcpy>
 800edaa:	e7af      	b.n	800ed0c <ucdr_serialize_int16_t+0x60>

0800edac <ucdr_deserialize_int16_t>:
 800edac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edb0:	460d      	mov	r5, r1
 800edb2:	2102      	movs	r1, #2
 800edb4:	4604      	mov	r4, r0
 800edb6:	f000 fd2b 	bl	800f810 <ucdr_buffer_alignment>
 800edba:	4601      	mov	r1, r0
 800edbc:	4620      	mov	r0, r4
 800edbe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800edc2:	f000 fd69 	bl	800f898 <ucdr_advance_buffer>
 800edc6:	2102      	movs	r1, #2
 800edc8:	4620      	mov	r0, r4
 800edca:	f000 fcc1 	bl	800f750 <ucdr_check_buffer_available_for>
 800edce:	bb60      	cbnz	r0, 800ee2a <ucdr_deserialize_int16_t+0x7e>
 800edd0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800edd4:	42be      	cmp	r6, r7
 800edd6:	d923      	bls.n	800ee20 <ucdr_deserialize_int16_t+0x74>
 800edd8:	6923      	ldr	r3, [r4, #16]
 800edda:	60a6      	str	r6, [r4, #8]
 800eddc:	1bf6      	subs	r6, r6, r7
 800edde:	4433      	add	r3, r6
 800ede0:	f1c6 0902 	rsb	r9, r6, #2
 800ede4:	6123      	str	r3, [r4, #16]
 800ede6:	4649      	mov	r1, r9
 800ede8:	4620      	mov	r0, r4
 800edea:	f000 fcbd 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800edee:	2800      	cmp	r0, #0
 800edf0:	d034      	beq.n	800ee5c <ucdr_deserialize_int16_t+0xb0>
 800edf2:	7d23      	ldrb	r3, [r4, #20]
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d042      	beq.n	800ee7e <ucdr_deserialize_int16_t+0xd2>
 800edf8:	787b      	ldrb	r3, [r7, #1]
 800edfa:	702b      	strb	r3, [r5, #0]
 800edfc:	2e00      	cmp	r6, #0
 800edfe:	d03a      	beq.n	800ee76 <ucdr_deserialize_int16_t+0xca>
 800ee00:	783b      	ldrb	r3, [r7, #0]
 800ee02:	706b      	strb	r3, [r5, #1]
 800ee04:	6923      	ldr	r3, [r4, #16]
 800ee06:	68a2      	ldr	r2, [r4, #8]
 800ee08:	7da0      	ldrb	r0, [r4, #22]
 800ee0a:	2102      	movs	r1, #2
 800ee0c:	3302      	adds	r3, #2
 800ee0e:	444a      	add	r2, r9
 800ee10:	1b9b      	subs	r3, r3, r6
 800ee12:	7561      	strb	r1, [r4, #21]
 800ee14:	60a2      	str	r2, [r4, #8]
 800ee16:	6123      	str	r3, [r4, #16]
 800ee18:	f080 0001 	eor.w	r0, r0, #1
 800ee1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee20:	2102      	movs	r1, #2
 800ee22:	4620      	mov	r0, r4
 800ee24:	f000 fca0 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800ee28:	b180      	cbz	r0, 800ee4c <ucdr_deserialize_int16_t+0xa0>
 800ee2a:	7d23      	ldrb	r3, [r4, #20]
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	68a3      	ldr	r3, [r4, #8]
 800ee30:	d011      	beq.n	800ee56 <ucdr_deserialize_int16_t+0xaa>
 800ee32:	785b      	ldrb	r3, [r3, #1]
 800ee34:	702b      	strb	r3, [r5, #0]
 800ee36:	68a3      	ldr	r3, [r4, #8]
 800ee38:	781b      	ldrb	r3, [r3, #0]
 800ee3a:	706b      	strb	r3, [r5, #1]
 800ee3c:	68a2      	ldr	r2, [r4, #8]
 800ee3e:	6923      	ldr	r3, [r4, #16]
 800ee40:	3202      	adds	r2, #2
 800ee42:	3302      	adds	r3, #2
 800ee44:	2102      	movs	r1, #2
 800ee46:	60a2      	str	r2, [r4, #8]
 800ee48:	6123      	str	r3, [r4, #16]
 800ee4a:	7561      	strb	r1, [r4, #21]
 800ee4c:	7da0      	ldrb	r0, [r4, #22]
 800ee4e:	f080 0001 	eor.w	r0, r0, #1
 800ee52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee56:	881b      	ldrh	r3, [r3, #0]
 800ee58:	802b      	strh	r3, [r5, #0]
 800ee5a:	e7ef      	b.n	800ee3c <ucdr_deserialize_int16_t+0x90>
 800ee5c:	68a2      	ldr	r2, [r4, #8]
 800ee5e:	6923      	ldr	r3, [r4, #16]
 800ee60:	7da0      	ldrb	r0, [r4, #22]
 800ee62:	f884 8015 	strb.w	r8, [r4, #21]
 800ee66:	1b92      	subs	r2, r2, r6
 800ee68:	1b9b      	subs	r3, r3, r6
 800ee6a:	60a2      	str	r2, [r4, #8]
 800ee6c:	6123      	str	r3, [r4, #16]
 800ee6e:	f080 0001 	eor.w	r0, r0, #1
 800ee72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee76:	68a3      	ldr	r3, [r4, #8]
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	706b      	strb	r3, [r5, #1]
 800ee7c:	e7c2      	b.n	800ee04 <ucdr_deserialize_int16_t+0x58>
 800ee7e:	4639      	mov	r1, r7
 800ee80:	4632      	mov	r2, r6
 800ee82:	4628      	mov	r0, r5
 800ee84:	f00e fd15 	bl	801d8b2 <memcpy>
 800ee88:	68a1      	ldr	r1, [r4, #8]
 800ee8a:	464a      	mov	r2, r9
 800ee8c:	19a8      	adds	r0, r5, r6
 800ee8e:	f00e fd10 	bl	801d8b2 <memcpy>
 800ee92:	e7b7      	b.n	800ee04 <ucdr_deserialize_int16_t+0x58>

0800ee94 <ucdr_serialize_int32_t>:
 800ee94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee98:	b082      	sub	sp, #8
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	9101      	str	r1, [sp, #4]
 800ee9e:	2104      	movs	r1, #4
 800eea0:	f000 fcb6 	bl	800f810 <ucdr_buffer_alignment>
 800eea4:	4601      	mov	r1, r0
 800eea6:	4620      	mov	r0, r4
 800eea8:	7d67      	ldrb	r7, [r4, #21]
 800eeaa:	f000 fcf5 	bl	800f898 <ucdr_advance_buffer>
 800eeae:	2104      	movs	r1, #4
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	f000 fc4d 	bl	800f750 <ucdr_check_buffer_available_for>
 800eeb6:	2800      	cmp	r0, #0
 800eeb8:	d139      	bne.n	800ef2e <ucdr_serialize_int32_t+0x9a>
 800eeba:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800eebe:	42ab      	cmp	r3, r5
 800eec0:	d930      	bls.n	800ef24 <ucdr_serialize_int32_t+0x90>
 800eec2:	1b5e      	subs	r6, r3, r5
 800eec4:	60a3      	str	r3, [r4, #8]
 800eec6:	6923      	ldr	r3, [r4, #16]
 800eec8:	f1c6 0804 	rsb	r8, r6, #4
 800eecc:	4433      	add	r3, r6
 800eece:	6123      	str	r3, [r4, #16]
 800eed0:	4641      	mov	r1, r8
 800eed2:	4620      	mov	r0, r4
 800eed4:	f000 fc48 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800eed8:	2800      	cmp	r0, #0
 800eeda:	d04c      	beq.n	800ef76 <ucdr_serialize_int32_t+0xe2>
 800eedc:	7d23      	ldrb	r3, [r4, #20]
 800eede:	2b01      	cmp	r3, #1
 800eee0:	d063      	beq.n	800efaa <ucdr_serialize_int32_t+0x116>
 800eee2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eee6:	702b      	strb	r3, [r5, #0]
 800eee8:	2e00      	cmp	r6, #0
 800eeea:	d051      	beq.n	800ef90 <ucdr_serialize_int32_t+0xfc>
 800eeec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eef0:	706b      	strb	r3, [r5, #1]
 800eef2:	2e01      	cmp	r6, #1
 800eef4:	d050      	beq.n	800ef98 <ucdr_serialize_int32_t+0x104>
 800eef6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800eefa:	70ab      	strb	r3, [r5, #2]
 800eefc:	2e02      	cmp	r6, #2
 800eefe:	d04f      	beq.n	800efa0 <ucdr_serialize_int32_t+0x10c>
 800ef00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ef04:	70eb      	strb	r3, [r5, #3]
 800ef06:	6923      	ldr	r3, [r4, #16]
 800ef08:	68a2      	ldr	r2, [r4, #8]
 800ef0a:	7da0      	ldrb	r0, [r4, #22]
 800ef0c:	3304      	adds	r3, #4
 800ef0e:	1b9e      	subs	r6, r3, r6
 800ef10:	4442      	add	r2, r8
 800ef12:	2304      	movs	r3, #4
 800ef14:	f080 0001 	eor.w	r0, r0, #1
 800ef18:	60a2      	str	r2, [r4, #8]
 800ef1a:	6126      	str	r6, [r4, #16]
 800ef1c:	7563      	strb	r3, [r4, #21]
 800ef1e:	b002      	add	sp, #8
 800ef20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef24:	2104      	movs	r1, #4
 800ef26:	4620      	mov	r0, r4
 800ef28:	f000 fc1e 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800ef2c:	b1d0      	cbz	r0, 800ef64 <ucdr_serialize_int32_t+0xd0>
 800ef2e:	7d23      	ldrb	r3, [r4, #20]
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	68a3      	ldr	r3, [r4, #8]
 800ef34:	d01c      	beq.n	800ef70 <ucdr_serialize_int32_t+0xdc>
 800ef36:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ef3a:	701a      	strb	r2, [r3, #0]
 800ef3c:	68a3      	ldr	r3, [r4, #8]
 800ef3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ef42:	705a      	strb	r2, [r3, #1]
 800ef44:	68a3      	ldr	r3, [r4, #8]
 800ef46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ef4a:	709a      	strb	r2, [r3, #2]
 800ef4c:	68a3      	ldr	r3, [r4, #8]
 800ef4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ef52:	70da      	strb	r2, [r3, #3]
 800ef54:	68a2      	ldr	r2, [r4, #8]
 800ef56:	6923      	ldr	r3, [r4, #16]
 800ef58:	3204      	adds	r2, #4
 800ef5a:	3304      	adds	r3, #4
 800ef5c:	2104      	movs	r1, #4
 800ef5e:	60a2      	str	r2, [r4, #8]
 800ef60:	6123      	str	r3, [r4, #16]
 800ef62:	7561      	strb	r1, [r4, #21]
 800ef64:	7da0      	ldrb	r0, [r4, #22]
 800ef66:	f080 0001 	eor.w	r0, r0, #1
 800ef6a:	b002      	add	sp, #8
 800ef6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef70:	9a01      	ldr	r2, [sp, #4]
 800ef72:	601a      	str	r2, [r3, #0]
 800ef74:	e7ee      	b.n	800ef54 <ucdr_serialize_int32_t+0xc0>
 800ef76:	68a2      	ldr	r2, [r4, #8]
 800ef78:	6923      	ldr	r3, [r4, #16]
 800ef7a:	7da0      	ldrb	r0, [r4, #22]
 800ef7c:	7567      	strb	r7, [r4, #21]
 800ef7e:	1b92      	subs	r2, r2, r6
 800ef80:	1b9b      	subs	r3, r3, r6
 800ef82:	f080 0001 	eor.w	r0, r0, #1
 800ef86:	60a2      	str	r2, [r4, #8]
 800ef88:	6123      	str	r3, [r4, #16]
 800ef8a:	b002      	add	sp, #8
 800ef8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef90:	68a3      	ldr	r3, [r4, #8]
 800ef92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ef96:	701a      	strb	r2, [r3, #0]
 800ef98:	68a3      	ldr	r3, [r4, #8]
 800ef9a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ef9e:	701a      	strb	r2, [r3, #0]
 800efa0:	68a3      	ldr	r3, [r4, #8]
 800efa2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800efa6:	701a      	strb	r2, [r3, #0]
 800efa8:	e7ad      	b.n	800ef06 <ucdr_serialize_int32_t+0x72>
 800efaa:	4628      	mov	r0, r5
 800efac:	ad01      	add	r5, sp, #4
 800efae:	4629      	mov	r1, r5
 800efb0:	4632      	mov	r2, r6
 800efb2:	f00e fc7e 	bl	801d8b2 <memcpy>
 800efb6:	68a0      	ldr	r0, [r4, #8]
 800efb8:	4642      	mov	r2, r8
 800efba:	19a9      	adds	r1, r5, r6
 800efbc:	f00e fc79 	bl	801d8b2 <memcpy>
 800efc0:	e7a1      	b.n	800ef06 <ucdr_serialize_int32_t+0x72>
 800efc2:	bf00      	nop

0800efc4 <ucdr_deserialize_int32_t>:
 800efc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efc8:	460d      	mov	r5, r1
 800efca:	2104      	movs	r1, #4
 800efcc:	4604      	mov	r4, r0
 800efce:	f000 fc1f 	bl	800f810 <ucdr_buffer_alignment>
 800efd2:	4601      	mov	r1, r0
 800efd4:	4620      	mov	r0, r4
 800efd6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800efda:	f000 fc5d 	bl	800f898 <ucdr_advance_buffer>
 800efde:	2104      	movs	r1, #4
 800efe0:	4620      	mov	r0, r4
 800efe2:	f000 fbb5 	bl	800f750 <ucdr_check_buffer_available_for>
 800efe6:	2800      	cmp	r0, #0
 800efe8:	d138      	bne.n	800f05c <ucdr_deserialize_int32_t+0x98>
 800efea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800efee:	42b7      	cmp	r7, r6
 800eff0:	d92f      	bls.n	800f052 <ucdr_deserialize_int32_t+0x8e>
 800eff2:	6923      	ldr	r3, [r4, #16]
 800eff4:	60a7      	str	r7, [r4, #8]
 800eff6:	1bbf      	subs	r7, r7, r6
 800eff8:	443b      	add	r3, r7
 800effa:	f1c7 0904 	rsb	r9, r7, #4
 800effe:	6123      	str	r3, [r4, #16]
 800f000:	4649      	mov	r1, r9
 800f002:	4620      	mov	r0, r4
 800f004:	f000 fbb0 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800f008:	2800      	cmp	r0, #0
 800f00a:	d046      	beq.n	800f09a <ucdr_deserialize_int32_t+0xd6>
 800f00c:	7d23      	ldrb	r3, [r4, #20]
 800f00e:	2b01      	cmp	r3, #1
 800f010:	d05c      	beq.n	800f0cc <ucdr_deserialize_int32_t+0x108>
 800f012:	78f3      	ldrb	r3, [r6, #3]
 800f014:	702b      	strb	r3, [r5, #0]
 800f016:	2f00      	cmp	r7, #0
 800f018:	d04c      	beq.n	800f0b4 <ucdr_deserialize_int32_t+0xf0>
 800f01a:	78b3      	ldrb	r3, [r6, #2]
 800f01c:	706b      	strb	r3, [r5, #1]
 800f01e:	2f01      	cmp	r7, #1
 800f020:	f105 0302 	add.w	r3, r5, #2
 800f024:	d04a      	beq.n	800f0bc <ucdr_deserialize_int32_t+0xf8>
 800f026:	7873      	ldrb	r3, [r6, #1]
 800f028:	70ab      	strb	r3, [r5, #2]
 800f02a:	2f02      	cmp	r7, #2
 800f02c:	f105 0303 	add.w	r3, r5, #3
 800f030:	d048      	beq.n	800f0c4 <ucdr_deserialize_int32_t+0x100>
 800f032:	7833      	ldrb	r3, [r6, #0]
 800f034:	70eb      	strb	r3, [r5, #3]
 800f036:	6923      	ldr	r3, [r4, #16]
 800f038:	68a2      	ldr	r2, [r4, #8]
 800f03a:	7da0      	ldrb	r0, [r4, #22]
 800f03c:	2104      	movs	r1, #4
 800f03e:	3304      	adds	r3, #4
 800f040:	444a      	add	r2, r9
 800f042:	1bdb      	subs	r3, r3, r7
 800f044:	7561      	strb	r1, [r4, #21]
 800f046:	60a2      	str	r2, [r4, #8]
 800f048:	6123      	str	r3, [r4, #16]
 800f04a:	f080 0001 	eor.w	r0, r0, #1
 800f04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f052:	2104      	movs	r1, #4
 800f054:	4620      	mov	r0, r4
 800f056:	f000 fb87 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800f05a:	b1b0      	cbz	r0, 800f08a <ucdr_deserialize_int32_t+0xc6>
 800f05c:	7d23      	ldrb	r3, [r4, #20]
 800f05e:	2b01      	cmp	r3, #1
 800f060:	68a3      	ldr	r3, [r4, #8]
 800f062:	d017      	beq.n	800f094 <ucdr_deserialize_int32_t+0xd0>
 800f064:	78db      	ldrb	r3, [r3, #3]
 800f066:	702b      	strb	r3, [r5, #0]
 800f068:	68a3      	ldr	r3, [r4, #8]
 800f06a:	789b      	ldrb	r3, [r3, #2]
 800f06c:	706b      	strb	r3, [r5, #1]
 800f06e:	68a3      	ldr	r3, [r4, #8]
 800f070:	785b      	ldrb	r3, [r3, #1]
 800f072:	70ab      	strb	r3, [r5, #2]
 800f074:	68a3      	ldr	r3, [r4, #8]
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	70eb      	strb	r3, [r5, #3]
 800f07a:	68a2      	ldr	r2, [r4, #8]
 800f07c:	6923      	ldr	r3, [r4, #16]
 800f07e:	3204      	adds	r2, #4
 800f080:	3304      	adds	r3, #4
 800f082:	2104      	movs	r1, #4
 800f084:	60a2      	str	r2, [r4, #8]
 800f086:	6123      	str	r3, [r4, #16]
 800f088:	7561      	strb	r1, [r4, #21]
 800f08a:	7da0      	ldrb	r0, [r4, #22]
 800f08c:	f080 0001 	eor.w	r0, r0, #1
 800f090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	602b      	str	r3, [r5, #0]
 800f098:	e7ef      	b.n	800f07a <ucdr_deserialize_int32_t+0xb6>
 800f09a:	68a2      	ldr	r2, [r4, #8]
 800f09c:	6923      	ldr	r3, [r4, #16]
 800f09e:	7da0      	ldrb	r0, [r4, #22]
 800f0a0:	f884 8015 	strb.w	r8, [r4, #21]
 800f0a4:	1bd2      	subs	r2, r2, r7
 800f0a6:	1bdb      	subs	r3, r3, r7
 800f0a8:	60a2      	str	r2, [r4, #8]
 800f0aa:	6123      	str	r3, [r4, #16]
 800f0ac:	f080 0001 	eor.w	r0, r0, #1
 800f0b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0b4:	68a3      	ldr	r3, [r4, #8]
 800f0b6:	789b      	ldrb	r3, [r3, #2]
 800f0b8:	706b      	strb	r3, [r5, #1]
 800f0ba:	1cab      	adds	r3, r5, #2
 800f0bc:	68a2      	ldr	r2, [r4, #8]
 800f0be:	7852      	ldrb	r2, [r2, #1]
 800f0c0:	f803 2b01 	strb.w	r2, [r3], #1
 800f0c4:	68a2      	ldr	r2, [r4, #8]
 800f0c6:	7812      	ldrb	r2, [r2, #0]
 800f0c8:	701a      	strb	r2, [r3, #0]
 800f0ca:	e7b4      	b.n	800f036 <ucdr_deserialize_int32_t+0x72>
 800f0cc:	4631      	mov	r1, r6
 800f0ce:	463a      	mov	r2, r7
 800f0d0:	4628      	mov	r0, r5
 800f0d2:	f00e fbee 	bl	801d8b2 <memcpy>
 800f0d6:	68a1      	ldr	r1, [r4, #8]
 800f0d8:	464a      	mov	r2, r9
 800f0da:	19e8      	adds	r0, r5, r7
 800f0dc:	f00e fbe9 	bl	801d8b2 <memcpy>
 800f0e0:	e7a9      	b.n	800f036 <ucdr_deserialize_int32_t+0x72>
 800f0e2:	bf00      	nop

0800f0e4 <ucdr_serialize_double>:
 800f0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0e8:	2108      	movs	r1, #8
 800f0ea:	b082      	sub	sp, #8
 800f0ec:	4604      	mov	r4, r0
 800f0ee:	ed8d 0b00 	vstr	d0, [sp]
 800f0f2:	f000 fb8d 	bl	800f810 <ucdr_buffer_alignment>
 800f0f6:	4601      	mov	r1, r0
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	7d67      	ldrb	r7, [r4, #21]
 800f0fc:	f000 fbcc 	bl	800f898 <ucdr_advance_buffer>
 800f100:	2108      	movs	r1, #8
 800f102:	4620      	mov	r0, r4
 800f104:	f000 fb24 	bl	800f750 <ucdr_check_buffer_available_for>
 800f108:	2800      	cmp	r0, #0
 800f10a:	d14e      	bne.n	800f1aa <ucdr_serialize_double+0xc6>
 800f10c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f110:	42ab      	cmp	r3, r5
 800f112:	d945      	bls.n	800f1a0 <ucdr_serialize_double+0xbc>
 800f114:	1b5e      	subs	r6, r3, r5
 800f116:	60a3      	str	r3, [r4, #8]
 800f118:	6923      	ldr	r3, [r4, #16]
 800f11a:	f1c6 0808 	rsb	r8, r6, #8
 800f11e:	4433      	add	r3, r6
 800f120:	6123      	str	r3, [r4, #16]
 800f122:	4641      	mov	r1, r8
 800f124:	4620      	mov	r0, r4
 800f126:	f000 fb1f 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800f12a:	2800      	cmp	r0, #0
 800f12c:	d074      	beq.n	800f218 <ucdr_serialize_double+0x134>
 800f12e:	7d23      	ldrb	r3, [r4, #20]
 800f130:	2b01      	cmp	r3, #1
 800f132:	f000 809b 	beq.w	800f26c <ucdr_serialize_double+0x188>
 800f136:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f13a:	702b      	strb	r3, [r5, #0]
 800f13c:	2e00      	cmp	r6, #0
 800f13e:	d078      	beq.n	800f232 <ucdr_serialize_double+0x14e>
 800f140:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f144:	706b      	strb	r3, [r5, #1]
 800f146:	2e01      	cmp	r6, #1
 800f148:	d077      	beq.n	800f23a <ucdr_serialize_double+0x156>
 800f14a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f14e:	70ab      	strb	r3, [r5, #2]
 800f150:	2e02      	cmp	r6, #2
 800f152:	d076      	beq.n	800f242 <ucdr_serialize_double+0x15e>
 800f154:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f158:	70eb      	strb	r3, [r5, #3]
 800f15a:	2e03      	cmp	r6, #3
 800f15c:	d075      	beq.n	800f24a <ucdr_serialize_double+0x166>
 800f15e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f162:	712b      	strb	r3, [r5, #4]
 800f164:	2e04      	cmp	r6, #4
 800f166:	d074      	beq.n	800f252 <ucdr_serialize_double+0x16e>
 800f168:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f16c:	716b      	strb	r3, [r5, #5]
 800f16e:	2e05      	cmp	r6, #5
 800f170:	d073      	beq.n	800f25a <ucdr_serialize_double+0x176>
 800f172:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f176:	71ab      	strb	r3, [r5, #6]
 800f178:	2e06      	cmp	r6, #6
 800f17a:	d072      	beq.n	800f262 <ucdr_serialize_double+0x17e>
 800f17c:	f89d 3000 	ldrb.w	r3, [sp]
 800f180:	71eb      	strb	r3, [r5, #7]
 800f182:	6923      	ldr	r3, [r4, #16]
 800f184:	68a2      	ldr	r2, [r4, #8]
 800f186:	7da0      	ldrb	r0, [r4, #22]
 800f188:	3308      	adds	r3, #8
 800f18a:	1b9e      	subs	r6, r3, r6
 800f18c:	4442      	add	r2, r8
 800f18e:	2308      	movs	r3, #8
 800f190:	f080 0001 	eor.w	r0, r0, #1
 800f194:	60a2      	str	r2, [r4, #8]
 800f196:	6126      	str	r6, [r4, #16]
 800f198:	7563      	strb	r3, [r4, #21]
 800f19a:	b002      	add	sp, #8
 800f19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1a0:	2108      	movs	r1, #8
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	f000 fae0 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800f1a8:	b350      	cbz	r0, 800f200 <ucdr_serialize_double+0x11c>
 800f1aa:	7d23      	ldrb	r3, [r4, #20]
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	d02d      	beq.n	800f20c <ucdr_serialize_double+0x128>
 800f1b0:	68a3      	ldr	r3, [r4, #8]
 800f1b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f1b6:	701a      	strb	r2, [r3, #0]
 800f1b8:	68a3      	ldr	r3, [r4, #8]
 800f1ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f1be:	705a      	strb	r2, [r3, #1]
 800f1c0:	68a3      	ldr	r3, [r4, #8]
 800f1c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f1c6:	709a      	strb	r2, [r3, #2]
 800f1c8:	68a3      	ldr	r3, [r4, #8]
 800f1ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f1ce:	70da      	strb	r2, [r3, #3]
 800f1d0:	68a3      	ldr	r3, [r4, #8]
 800f1d2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f1d6:	711a      	strb	r2, [r3, #4]
 800f1d8:	68a3      	ldr	r3, [r4, #8]
 800f1da:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f1de:	715a      	strb	r2, [r3, #5]
 800f1e0:	68a3      	ldr	r3, [r4, #8]
 800f1e2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f1e6:	719a      	strb	r2, [r3, #6]
 800f1e8:	68a3      	ldr	r3, [r4, #8]
 800f1ea:	f89d 2000 	ldrb.w	r2, [sp]
 800f1ee:	71da      	strb	r2, [r3, #7]
 800f1f0:	68a2      	ldr	r2, [r4, #8]
 800f1f2:	6923      	ldr	r3, [r4, #16]
 800f1f4:	3208      	adds	r2, #8
 800f1f6:	3308      	adds	r3, #8
 800f1f8:	2108      	movs	r1, #8
 800f1fa:	60a2      	str	r2, [r4, #8]
 800f1fc:	6123      	str	r3, [r4, #16]
 800f1fe:	7561      	strb	r1, [r4, #21]
 800f200:	7da0      	ldrb	r0, [r4, #22]
 800f202:	f080 0001 	eor.w	r0, r0, #1
 800f206:	b002      	add	sp, #8
 800f208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f20c:	466b      	mov	r3, sp
 800f20e:	cb03      	ldmia	r3!, {r0, r1}
 800f210:	68a3      	ldr	r3, [r4, #8]
 800f212:	6018      	str	r0, [r3, #0]
 800f214:	6059      	str	r1, [r3, #4]
 800f216:	e7eb      	b.n	800f1f0 <ucdr_serialize_double+0x10c>
 800f218:	68a2      	ldr	r2, [r4, #8]
 800f21a:	6923      	ldr	r3, [r4, #16]
 800f21c:	7da0      	ldrb	r0, [r4, #22]
 800f21e:	7567      	strb	r7, [r4, #21]
 800f220:	1b92      	subs	r2, r2, r6
 800f222:	1b9b      	subs	r3, r3, r6
 800f224:	f080 0001 	eor.w	r0, r0, #1
 800f228:	60a2      	str	r2, [r4, #8]
 800f22a:	6123      	str	r3, [r4, #16]
 800f22c:	b002      	add	sp, #8
 800f22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f232:	68a3      	ldr	r3, [r4, #8]
 800f234:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f238:	701a      	strb	r2, [r3, #0]
 800f23a:	68a3      	ldr	r3, [r4, #8]
 800f23c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f240:	701a      	strb	r2, [r3, #0]
 800f242:	68a3      	ldr	r3, [r4, #8]
 800f244:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f248:	701a      	strb	r2, [r3, #0]
 800f24a:	68a3      	ldr	r3, [r4, #8]
 800f24c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f250:	701a      	strb	r2, [r3, #0]
 800f252:	68a3      	ldr	r3, [r4, #8]
 800f254:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f258:	701a      	strb	r2, [r3, #0]
 800f25a:	68a3      	ldr	r3, [r4, #8]
 800f25c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f260:	701a      	strb	r2, [r3, #0]
 800f262:	68a3      	ldr	r3, [r4, #8]
 800f264:	f89d 2000 	ldrb.w	r2, [sp]
 800f268:	701a      	strb	r2, [r3, #0]
 800f26a:	e78a      	b.n	800f182 <ucdr_serialize_double+0x9e>
 800f26c:	4628      	mov	r0, r5
 800f26e:	466d      	mov	r5, sp
 800f270:	4629      	mov	r1, r5
 800f272:	4632      	mov	r2, r6
 800f274:	f00e fb1d 	bl	801d8b2 <memcpy>
 800f278:	68a0      	ldr	r0, [r4, #8]
 800f27a:	4642      	mov	r2, r8
 800f27c:	19a9      	adds	r1, r5, r6
 800f27e:	f00e fb18 	bl	801d8b2 <memcpy>
 800f282:	e77e      	b.n	800f182 <ucdr_serialize_double+0x9e>

0800f284 <ucdr_serialize_endian_double>:
 800f284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f288:	460e      	mov	r6, r1
 800f28a:	b083      	sub	sp, #12
 800f28c:	2108      	movs	r1, #8
 800f28e:	4604      	mov	r4, r0
 800f290:	ed8d 0b00 	vstr	d0, [sp]
 800f294:	f000 fabc 	bl	800f810 <ucdr_buffer_alignment>
 800f298:	4601      	mov	r1, r0
 800f29a:	4620      	mov	r0, r4
 800f29c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f2a0:	f000 fafa 	bl	800f898 <ucdr_advance_buffer>
 800f2a4:	2108      	movs	r1, #8
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	f000 fa52 	bl	800f750 <ucdr_check_buffer_available_for>
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d14d      	bne.n	800f34c <ucdr_serialize_endian_double+0xc8>
 800f2b0:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800f2b4:	42bd      	cmp	r5, r7
 800f2b6:	d944      	bls.n	800f342 <ucdr_serialize_endian_double+0xbe>
 800f2b8:	6923      	ldr	r3, [r4, #16]
 800f2ba:	60a5      	str	r5, [r4, #8]
 800f2bc:	1bed      	subs	r5, r5, r7
 800f2be:	442b      	add	r3, r5
 800f2c0:	f1c5 0908 	rsb	r9, r5, #8
 800f2c4:	6123      	str	r3, [r4, #16]
 800f2c6:	4649      	mov	r1, r9
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f000 fa4d 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	d072      	beq.n	800f3b8 <ucdr_serialize_endian_double+0x134>
 800f2d2:	2e01      	cmp	r6, #1
 800f2d4:	f000 809b 	beq.w	800f40e <ucdr_serialize_endian_double+0x18a>
 800f2d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f2dc:	703b      	strb	r3, [r7, #0]
 800f2de:	2d00      	cmp	r5, #0
 800f2e0:	d078      	beq.n	800f3d4 <ucdr_serialize_endian_double+0x150>
 800f2e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f2e6:	707b      	strb	r3, [r7, #1]
 800f2e8:	2d01      	cmp	r5, #1
 800f2ea:	d077      	beq.n	800f3dc <ucdr_serialize_endian_double+0x158>
 800f2ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f2f0:	70bb      	strb	r3, [r7, #2]
 800f2f2:	2d02      	cmp	r5, #2
 800f2f4:	d076      	beq.n	800f3e4 <ucdr_serialize_endian_double+0x160>
 800f2f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f2fa:	70fb      	strb	r3, [r7, #3]
 800f2fc:	2d03      	cmp	r5, #3
 800f2fe:	d075      	beq.n	800f3ec <ucdr_serialize_endian_double+0x168>
 800f300:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f304:	713b      	strb	r3, [r7, #4]
 800f306:	2d04      	cmp	r5, #4
 800f308:	d074      	beq.n	800f3f4 <ucdr_serialize_endian_double+0x170>
 800f30a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f30e:	717b      	strb	r3, [r7, #5]
 800f310:	2d05      	cmp	r5, #5
 800f312:	d073      	beq.n	800f3fc <ucdr_serialize_endian_double+0x178>
 800f314:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f318:	71bb      	strb	r3, [r7, #6]
 800f31a:	2d06      	cmp	r5, #6
 800f31c:	d072      	beq.n	800f404 <ucdr_serialize_endian_double+0x180>
 800f31e:	f89d 3000 	ldrb.w	r3, [sp]
 800f322:	71fb      	strb	r3, [r7, #7]
 800f324:	6923      	ldr	r3, [r4, #16]
 800f326:	68a2      	ldr	r2, [r4, #8]
 800f328:	7da0      	ldrb	r0, [r4, #22]
 800f32a:	3308      	adds	r3, #8
 800f32c:	1b5d      	subs	r5, r3, r5
 800f32e:	444a      	add	r2, r9
 800f330:	2308      	movs	r3, #8
 800f332:	f080 0001 	eor.w	r0, r0, #1
 800f336:	60a2      	str	r2, [r4, #8]
 800f338:	6125      	str	r5, [r4, #16]
 800f33a:	7563      	strb	r3, [r4, #21]
 800f33c:	b003      	add	sp, #12
 800f33e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f342:	2108      	movs	r1, #8
 800f344:	4620      	mov	r0, r4
 800f346:	f000 fa0f 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800f34a:	b348      	cbz	r0, 800f3a0 <ucdr_serialize_endian_double+0x11c>
 800f34c:	2e01      	cmp	r6, #1
 800f34e:	d02d      	beq.n	800f3ac <ucdr_serialize_endian_double+0x128>
 800f350:	68a3      	ldr	r3, [r4, #8]
 800f352:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f356:	701a      	strb	r2, [r3, #0]
 800f358:	68a3      	ldr	r3, [r4, #8]
 800f35a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f35e:	705a      	strb	r2, [r3, #1]
 800f360:	68a3      	ldr	r3, [r4, #8]
 800f362:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f366:	709a      	strb	r2, [r3, #2]
 800f368:	68a3      	ldr	r3, [r4, #8]
 800f36a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f36e:	70da      	strb	r2, [r3, #3]
 800f370:	68a3      	ldr	r3, [r4, #8]
 800f372:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f376:	711a      	strb	r2, [r3, #4]
 800f378:	68a3      	ldr	r3, [r4, #8]
 800f37a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f37e:	715a      	strb	r2, [r3, #5]
 800f380:	68a3      	ldr	r3, [r4, #8]
 800f382:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f386:	719a      	strb	r2, [r3, #6]
 800f388:	68a3      	ldr	r3, [r4, #8]
 800f38a:	f89d 2000 	ldrb.w	r2, [sp]
 800f38e:	71da      	strb	r2, [r3, #7]
 800f390:	68a2      	ldr	r2, [r4, #8]
 800f392:	6923      	ldr	r3, [r4, #16]
 800f394:	3208      	adds	r2, #8
 800f396:	3308      	adds	r3, #8
 800f398:	2108      	movs	r1, #8
 800f39a:	60a2      	str	r2, [r4, #8]
 800f39c:	6123      	str	r3, [r4, #16]
 800f39e:	7561      	strb	r1, [r4, #21]
 800f3a0:	7da0      	ldrb	r0, [r4, #22]
 800f3a2:	f080 0001 	eor.w	r0, r0, #1
 800f3a6:	b003      	add	sp, #12
 800f3a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3ac:	466b      	mov	r3, sp
 800f3ae:	cb03      	ldmia	r3!, {r0, r1}
 800f3b0:	68a3      	ldr	r3, [r4, #8]
 800f3b2:	6018      	str	r0, [r3, #0]
 800f3b4:	6059      	str	r1, [r3, #4]
 800f3b6:	e7eb      	b.n	800f390 <ucdr_serialize_endian_double+0x10c>
 800f3b8:	68a2      	ldr	r2, [r4, #8]
 800f3ba:	6923      	ldr	r3, [r4, #16]
 800f3bc:	7da0      	ldrb	r0, [r4, #22]
 800f3be:	f884 8015 	strb.w	r8, [r4, #21]
 800f3c2:	1b52      	subs	r2, r2, r5
 800f3c4:	1b5b      	subs	r3, r3, r5
 800f3c6:	f080 0001 	eor.w	r0, r0, #1
 800f3ca:	60a2      	str	r2, [r4, #8]
 800f3cc:	6123      	str	r3, [r4, #16]
 800f3ce:	b003      	add	sp, #12
 800f3d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3d4:	68a3      	ldr	r3, [r4, #8]
 800f3d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f3da:	701a      	strb	r2, [r3, #0]
 800f3dc:	68a3      	ldr	r3, [r4, #8]
 800f3de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f3e2:	701a      	strb	r2, [r3, #0]
 800f3e4:	68a3      	ldr	r3, [r4, #8]
 800f3e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f3ea:	701a      	strb	r2, [r3, #0]
 800f3ec:	68a3      	ldr	r3, [r4, #8]
 800f3ee:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f3f2:	701a      	strb	r2, [r3, #0]
 800f3f4:	68a3      	ldr	r3, [r4, #8]
 800f3f6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f3fa:	701a      	strb	r2, [r3, #0]
 800f3fc:	68a3      	ldr	r3, [r4, #8]
 800f3fe:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f402:	701a      	strb	r2, [r3, #0]
 800f404:	68a3      	ldr	r3, [r4, #8]
 800f406:	f89d 2000 	ldrb.w	r2, [sp]
 800f40a:	701a      	strb	r2, [r3, #0]
 800f40c:	e78a      	b.n	800f324 <ucdr_serialize_endian_double+0xa0>
 800f40e:	466e      	mov	r6, sp
 800f410:	4631      	mov	r1, r6
 800f412:	462a      	mov	r2, r5
 800f414:	4638      	mov	r0, r7
 800f416:	f00e fa4c 	bl	801d8b2 <memcpy>
 800f41a:	68a0      	ldr	r0, [r4, #8]
 800f41c:	464a      	mov	r2, r9
 800f41e:	1971      	adds	r1, r6, r5
 800f420:	f00e fa47 	bl	801d8b2 <memcpy>
 800f424:	e77e      	b.n	800f324 <ucdr_serialize_endian_double+0xa0>
 800f426:	bf00      	nop

0800f428 <ucdr_deserialize_double>:
 800f428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f42c:	460d      	mov	r5, r1
 800f42e:	2108      	movs	r1, #8
 800f430:	4604      	mov	r4, r0
 800f432:	f000 f9ed 	bl	800f810 <ucdr_buffer_alignment>
 800f436:	4601      	mov	r1, r0
 800f438:	4620      	mov	r0, r4
 800f43a:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f43e:	f000 fa2b 	bl	800f898 <ucdr_advance_buffer>
 800f442:	2108      	movs	r1, #8
 800f444:	4620      	mov	r0, r4
 800f446:	f000 f983 	bl	800f750 <ucdr_check_buffer_available_for>
 800f44a:	2800      	cmp	r0, #0
 800f44c:	d151      	bne.n	800f4f2 <ucdr_deserialize_double+0xca>
 800f44e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f452:	42be      	cmp	r6, r7
 800f454:	d948      	bls.n	800f4e8 <ucdr_deserialize_double+0xc0>
 800f456:	6923      	ldr	r3, [r4, #16]
 800f458:	60a6      	str	r6, [r4, #8]
 800f45a:	1bf6      	subs	r6, r6, r7
 800f45c:	4433      	add	r3, r6
 800f45e:	f1c6 0808 	rsb	r8, r6, #8
 800f462:	6123      	str	r3, [r4, #16]
 800f464:	4641      	mov	r1, r8
 800f466:	4620      	mov	r0, r4
 800f468:	f000 f97e 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800f46c:	2800      	cmp	r0, #0
 800f46e:	d06d      	beq.n	800f54c <ucdr_deserialize_double+0x124>
 800f470:	7d23      	ldrb	r3, [r4, #20]
 800f472:	2b01      	cmp	r3, #1
 800f474:	f000 8093 	beq.w	800f59e <ucdr_deserialize_double+0x176>
 800f478:	79fb      	ldrb	r3, [r7, #7]
 800f47a:	702b      	strb	r3, [r5, #0]
 800f47c:	2e00      	cmp	r6, #0
 800f47e:	d072      	beq.n	800f566 <ucdr_deserialize_double+0x13e>
 800f480:	79bb      	ldrb	r3, [r7, #6]
 800f482:	706b      	strb	r3, [r5, #1]
 800f484:	2e01      	cmp	r6, #1
 800f486:	f105 0302 	add.w	r3, r5, #2
 800f48a:	d070      	beq.n	800f56e <ucdr_deserialize_double+0x146>
 800f48c:	797b      	ldrb	r3, [r7, #5]
 800f48e:	70ab      	strb	r3, [r5, #2]
 800f490:	2e02      	cmp	r6, #2
 800f492:	f105 0303 	add.w	r3, r5, #3
 800f496:	d06e      	beq.n	800f576 <ucdr_deserialize_double+0x14e>
 800f498:	793b      	ldrb	r3, [r7, #4]
 800f49a:	70eb      	strb	r3, [r5, #3]
 800f49c:	2e03      	cmp	r6, #3
 800f49e:	f105 0304 	add.w	r3, r5, #4
 800f4a2:	d06c      	beq.n	800f57e <ucdr_deserialize_double+0x156>
 800f4a4:	78fb      	ldrb	r3, [r7, #3]
 800f4a6:	712b      	strb	r3, [r5, #4]
 800f4a8:	2e04      	cmp	r6, #4
 800f4aa:	f105 0305 	add.w	r3, r5, #5
 800f4ae:	d06a      	beq.n	800f586 <ucdr_deserialize_double+0x15e>
 800f4b0:	78bb      	ldrb	r3, [r7, #2]
 800f4b2:	716b      	strb	r3, [r5, #5]
 800f4b4:	2e05      	cmp	r6, #5
 800f4b6:	f105 0306 	add.w	r3, r5, #6
 800f4ba:	d068      	beq.n	800f58e <ucdr_deserialize_double+0x166>
 800f4bc:	787b      	ldrb	r3, [r7, #1]
 800f4be:	71ab      	strb	r3, [r5, #6]
 800f4c0:	2e06      	cmp	r6, #6
 800f4c2:	f105 0307 	add.w	r3, r5, #7
 800f4c6:	d066      	beq.n	800f596 <ucdr_deserialize_double+0x16e>
 800f4c8:	783b      	ldrb	r3, [r7, #0]
 800f4ca:	71eb      	strb	r3, [r5, #7]
 800f4cc:	6923      	ldr	r3, [r4, #16]
 800f4ce:	68a2      	ldr	r2, [r4, #8]
 800f4d0:	7da0      	ldrb	r0, [r4, #22]
 800f4d2:	3308      	adds	r3, #8
 800f4d4:	1b9e      	subs	r6, r3, r6
 800f4d6:	2308      	movs	r3, #8
 800f4d8:	4442      	add	r2, r8
 800f4da:	7563      	strb	r3, [r4, #21]
 800f4dc:	60a2      	str	r2, [r4, #8]
 800f4de:	6126      	str	r6, [r4, #16]
 800f4e0:	f080 0001 	eor.w	r0, r0, #1
 800f4e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4e8:	2108      	movs	r1, #8
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f000 f93c 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800f4f0:	b310      	cbz	r0, 800f538 <ucdr_deserialize_double+0x110>
 800f4f2:	7d23      	ldrb	r3, [r4, #20]
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	68a3      	ldr	r3, [r4, #8]
 800f4f8:	d023      	beq.n	800f542 <ucdr_deserialize_double+0x11a>
 800f4fa:	79db      	ldrb	r3, [r3, #7]
 800f4fc:	702b      	strb	r3, [r5, #0]
 800f4fe:	68a3      	ldr	r3, [r4, #8]
 800f500:	799b      	ldrb	r3, [r3, #6]
 800f502:	706b      	strb	r3, [r5, #1]
 800f504:	68a3      	ldr	r3, [r4, #8]
 800f506:	795b      	ldrb	r3, [r3, #5]
 800f508:	70ab      	strb	r3, [r5, #2]
 800f50a:	68a3      	ldr	r3, [r4, #8]
 800f50c:	791b      	ldrb	r3, [r3, #4]
 800f50e:	70eb      	strb	r3, [r5, #3]
 800f510:	68a3      	ldr	r3, [r4, #8]
 800f512:	78db      	ldrb	r3, [r3, #3]
 800f514:	712b      	strb	r3, [r5, #4]
 800f516:	68a3      	ldr	r3, [r4, #8]
 800f518:	789b      	ldrb	r3, [r3, #2]
 800f51a:	716b      	strb	r3, [r5, #5]
 800f51c:	68a3      	ldr	r3, [r4, #8]
 800f51e:	785b      	ldrb	r3, [r3, #1]
 800f520:	71ab      	strb	r3, [r5, #6]
 800f522:	68a3      	ldr	r3, [r4, #8]
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	71eb      	strb	r3, [r5, #7]
 800f528:	68a2      	ldr	r2, [r4, #8]
 800f52a:	6923      	ldr	r3, [r4, #16]
 800f52c:	3208      	adds	r2, #8
 800f52e:	3308      	adds	r3, #8
 800f530:	2108      	movs	r1, #8
 800f532:	60a2      	str	r2, [r4, #8]
 800f534:	6123      	str	r3, [r4, #16]
 800f536:	7561      	strb	r1, [r4, #21]
 800f538:	7da0      	ldrb	r0, [r4, #22]
 800f53a:	f080 0001 	eor.w	r0, r0, #1
 800f53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f542:	681a      	ldr	r2, [r3, #0]
 800f544:	685b      	ldr	r3, [r3, #4]
 800f546:	606b      	str	r3, [r5, #4]
 800f548:	602a      	str	r2, [r5, #0]
 800f54a:	e7ed      	b.n	800f528 <ucdr_deserialize_double+0x100>
 800f54c:	68a2      	ldr	r2, [r4, #8]
 800f54e:	6923      	ldr	r3, [r4, #16]
 800f550:	7da0      	ldrb	r0, [r4, #22]
 800f552:	f884 9015 	strb.w	r9, [r4, #21]
 800f556:	1b92      	subs	r2, r2, r6
 800f558:	1b9b      	subs	r3, r3, r6
 800f55a:	60a2      	str	r2, [r4, #8]
 800f55c:	6123      	str	r3, [r4, #16]
 800f55e:	f080 0001 	eor.w	r0, r0, #1
 800f562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f566:	68a3      	ldr	r3, [r4, #8]
 800f568:	799b      	ldrb	r3, [r3, #6]
 800f56a:	706b      	strb	r3, [r5, #1]
 800f56c:	1cab      	adds	r3, r5, #2
 800f56e:	68a2      	ldr	r2, [r4, #8]
 800f570:	7952      	ldrb	r2, [r2, #5]
 800f572:	f803 2b01 	strb.w	r2, [r3], #1
 800f576:	68a2      	ldr	r2, [r4, #8]
 800f578:	7912      	ldrb	r2, [r2, #4]
 800f57a:	f803 2b01 	strb.w	r2, [r3], #1
 800f57e:	68a2      	ldr	r2, [r4, #8]
 800f580:	78d2      	ldrb	r2, [r2, #3]
 800f582:	f803 2b01 	strb.w	r2, [r3], #1
 800f586:	68a2      	ldr	r2, [r4, #8]
 800f588:	7892      	ldrb	r2, [r2, #2]
 800f58a:	f803 2b01 	strb.w	r2, [r3], #1
 800f58e:	68a2      	ldr	r2, [r4, #8]
 800f590:	7852      	ldrb	r2, [r2, #1]
 800f592:	f803 2b01 	strb.w	r2, [r3], #1
 800f596:	68a2      	ldr	r2, [r4, #8]
 800f598:	7812      	ldrb	r2, [r2, #0]
 800f59a:	701a      	strb	r2, [r3, #0]
 800f59c:	e796      	b.n	800f4cc <ucdr_deserialize_double+0xa4>
 800f59e:	4639      	mov	r1, r7
 800f5a0:	4632      	mov	r2, r6
 800f5a2:	4628      	mov	r0, r5
 800f5a4:	f00e f985 	bl	801d8b2 <memcpy>
 800f5a8:	68a1      	ldr	r1, [r4, #8]
 800f5aa:	4642      	mov	r2, r8
 800f5ac:	19a8      	adds	r0, r5, r6
 800f5ae:	f00e f980 	bl	801d8b2 <memcpy>
 800f5b2:	e78b      	b.n	800f4cc <ucdr_deserialize_double+0xa4>

0800f5b4 <ucdr_deserialize_endian_double>:
 800f5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5b8:	460f      	mov	r7, r1
 800f5ba:	2108      	movs	r1, #8
 800f5bc:	4604      	mov	r4, r0
 800f5be:	4615      	mov	r5, r2
 800f5c0:	f000 f926 	bl	800f810 <ucdr_buffer_alignment>
 800f5c4:	4601      	mov	r1, r0
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f5cc:	f000 f964 	bl	800f898 <ucdr_advance_buffer>
 800f5d0:	2108      	movs	r1, #8
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	f000 f8bc 	bl	800f750 <ucdr_check_buffer_available_for>
 800f5d8:	2800      	cmp	r0, #0
 800f5da:	d159      	bne.n	800f690 <ucdr_deserialize_endian_double+0xdc>
 800f5dc:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800f5e0:	4546      	cmp	r6, r8
 800f5e2:	d950      	bls.n	800f686 <ucdr_deserialize_endian_double+0xd2>
 800f5e4:	6923      	ldr	r3, [r4, #16]
 800f5e6:	60a6      	str	r6, [r4, #8]
 800f5e8:	eba6 0608 	sub.w	r6, r6, r8
 800f5ec:	4433      	add	r3, r6
 800f5ee:	f1c6 0a08 	rsb	sl, r6, #8
 800f5f2:	6123      	str	r3, [r4, #16]
 800f5f4:	4651      	mov	r1, sl
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	f000 f8b6 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	d073      	beq.n	800f6e8 <ucdr_deserialize_endian_double+0x134>
 800f600:	2f01      	cmp	r7, #1
 800f602:	f000 809a 	beq.w	800f73a <ucdr_deserialize_endian_double+0x186>
 800f606:	f898 3007 	ldrb.w	r3, [r8, #7]
 800f60a:	702b      	strb	r3, [r5, #0]
 800f60c:	2e00      	cmp	r6, #0
 800f60e:	d078      	beq.n	800f702 <ucdr_deserialize_endian_double+0x14e>
 800f610:	f898 3006 	ldrb.w	r3, [r8, #6]
 800f614:	706b      	strb	r3, [r5, #1]
 800f616:	2e01      	cmp	r6, #1
 800f618:	f105 0302 	add.w	r3, r5, #2
 800f61c:	d075      	beq.n	800f70a <ucdr_deserialize_endian_double+0x156>
 800f61e:	f898 3005 	ldrb.w	r3, [r8, #5]
 800f622:	70ab      	strb	r3, [r5, #2]
 800f624:	2e02      	cmp	r6, #2
 800f626:	f105 0303 	add.w	r3, r5, #3
 800f62a:	d072      	beq.n	800f712 <ucdr_deserialize_endian_double+0x15e>
 800f62c:	f898 3004 	ldrb.w	r3, [r8, #4]
 800f630:	70eb      	strb	r3, [r5, #3]
 800f632:	2e03      	cmp	r6, #3
 800f634:	f105 0304 	add.w	r3, r5, #4
 800f638:	d06f      	beq.n	800f71a <ucdr_deserialize_endian_double+0x166>
 800f63a:	f898 3003 	ldrb.w	r3, [r8, #3]
 800f63e:	712b      	strb	r3, [r5, #4]
 800f640:	2e04      	cmp	r6, #4
 800f642:	f105 0305 	add.w	r3, r5, #5
 800f646:	d06c      	beq.n	800f722 <ucdr_deserialize_endian_double+0x16e>
 800f648:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f64c:	716b      	strb	r3, [r5, #5]
 800f64e:	2e05      	cmp	r6, #5
 800f650:	f105 0306 	add.w	r3, r5, #6
 800f654:	d069      	beq.n	800f72a <ucdr_deserialize_endian_double+0x176>
 800f656:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f65a:	71ab      	strb	r3, [r5, #6]
 800f65c:	2e06      	cmp	r6, #6
 800f65e:	f105 0307 	add.w	r3, r5, #7
 800f662:	d066      	beq.n	800f732 <ucdr_deserialize_endian_double+0x17e>
 800f664:	f898 3000 	ldrb.w	r3, [r8]
 800f668:	71eb      	strb	r3, [r5, #7]
 800f66a:	6923      	ldr	r3, [r4, #16]
 800f66c:	68a2      	ldr	r2, [r4, #8]
 800f66e:	7da0      	ldrb	r0, [r4, #22]
 800f670:	3308      	adds	r3, #8
 800f672:	1b9e      	subs	r6, r3, r6
 800f674:	2308      	movs	r3, #8
 800f676:	4452      	add	r2, sl
 800f678:	7563      	strb	r3, [r4, #21]
 800f67a:	60a2      	str	r2, [r4, #8]
 800f67c:	6126      	str	r6, [r4, #16]
 800f67e:	f080 0001 	eor.w	r0, r0, #1
 800f682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f686:	2108      	movs	r1, #8
 800f688:	4620      	mov	r0, r4
 800f68a:	f000 f86d 	bl	800f768 <ucdr_check_final_buffer_behavior>
 800f68e:	b308      	cbz	r0, 800f6d4 <ucdr_deserialize_endian_double+0x120>
 800f690:	2f01      	cmp	r7, #1
 800f692:	68a3      	ldr	r3, [r4, #8]
 800f694:	d023      	beq.n	800f6de <ucdr_deserialize_endian_double+0x12a>
 800f696:	79db      	ldrb	r3, [r3, #7]
 800f698:	702b      	strb	r3, [r5, #0]
 800f69a:	68a3      	ldr	r3, [r4, #8]
 800f69c:	799b      	ldrb	r3, [r3, #6]
 800f69e:	706b      	strb	r3, [r5, #1]
 800f6a0:	68a3      	ldr	r3, [r4, #8]
 800f6a2:	795b      	ldrb	r3, [r3, #5]
 800f6a4:	70ab      	strb	r3, [r5, #2]
 800f6a6:	68a3      	ldr	r3, [r4, #8]
 800f6a8:	791b      	ldrb	r3, [r3, #4]
 800f6aa:	70eb      	strb	r3, [r5, #3]
 800f6ac:	68a3      	ldr	r3, [r4, #8]
 800f6ae:	78db      	ldrb	r3, [r3, #3]
 800f6b0:	712b      	strb	r3, [r5, #4]
 800f6b2:	68a3      	ldr	r3, [r4, #8]
 800f6b4:	789b      	ldrb	r3, [r3, #2]
 800f6b6:	716b      	strb	r3, [r5, #5]
 800f6b8:	68a3      	ldr	r3, [r4, #8]
 800f6ba:	785b      	ldrb	r3, [r3, #1]
 800f6bc:	71ab      	strb	r3, [r5, #6]
 800f6be:	68a3      	ldr	r3, [r4, #8]
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	71eb      	strb	r3, [r5, #7]
 800f6c4:	68a2      	ldr	r2, [r4, #8]
 800f6c6:	6923      	ldr	r3, [r4, #16]
 800f6c8:	3208      	adds	r2, #8
 800f6ca:	3308      	adds	r3, #8
 800f6cc:	2108      	movs	r1, #8
 800f6ce:	60a2      	str	r2, [r4, #8]
 800f6d0:	6123      	str	r3, [r4, #16]
 800f6d2:	7561      	strb	r1, [r4, #21]
 800f6d4:	7da0      	ldrb	r0, [r4, #22]
 800f6d6:	f080 0001 	eor.w	r0, r0, #1
 800f6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6de:	681a      	ldr	r2, [r3, #0]
 800f6e0:	685b      	ldr	r3, [r3, #4]
 800f6e2:	606b      	str	r3, [r5, #4]
 800f6e4:	602a      	str	r2, [r5, #0]
 800f6e6:	e7ed      	b.n	800f6c4 <ucdr_deserialize_endian_double+0x110>
 800f6e8:	68a2      	ldr	r2, [r4, #8]
 800f6ea:	6923      	ldr	r3, [r4, #16]
 800f6ec:	7da0      	ldrb	r0, [r4, #22]
 800f6ee:	f884 9015 	strb.w	r9, [r4, #21]
 800f6f2:	1b92      	subs	r2, r2, r6
 800f6f4:	1b9b      	subs	r3, r3, r6
 800f6f6:	60a2      	str	r2, [r4, #8]
 800f6f8:	6123      	str	r3, [r4, #16]
 800f6fa:	f080 0001 	eor.w	r0, r0, #1
 800f6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f702:	68a3      	ldr	r3, [r4, #8]
 800f704:	799b      	ldrb	r3, [r3, #6]
 800f706:	706b      	strb	r3, [r5, #1]
 800f708:	1cab      	adds	r3, r5, #2
 800f70a:	68a2      	ldr	r2, [r4, #8]
 800f70c:	7952      	ldrb	r2, [r2, #5]
 800f70e:	f803 2b01 	strb.w	r2, [r3], #1
 800f712:	68a2      	ldr	r2, [r4, #8]
 800f714:	7912      	ldrb	r2, [r2, #4]
 800f716:	f803 2b01 	strb.w	r2, [r3], #1
 800f71a:	68a2      	ldr	r2, [r4, #8]
 800f71c:	78d2      	ldrb	r2, [r2, #3]
 800f71e:	f803 2b01 	strb.w	r2, [r3], #1
 800f722:	68a2      	ldr	r2, [r4, #8]
 800f724:	7892      	ldrb	r2, [r2, #2]
 800f726:	f803 2b01 	strb.w	r2, [r3], #1
 800f72a:	68a2      	ldr	r2, [r4, #8]
 800f72c:	7852      	ldrb	r2, [r2, #1]
 800f72e:	f803 2b01 	strb.w	r2, [r3], #1
 800f732:	68a2      	ldr	r2, [r4, #8]
 800f734:	7812      	ldrb	r2, [r2, #0]
 800f736:	701a      	strb	r2, [r3, #0]
 800f738:	e797      	b.n	800f66a <ucdr_deserialize_endian_double+0xb6>
 800f73a:	4641      	mov	r1, r8
 800f73c:	4632      	mov	r2, r6
 800f73e:	4628      	mov	r0, r5
 800f740:	f00e f8b7 	bl	801d8b2 <memcpy>
 800f744:	68a1      	ldr	r1, [r4, #8]
 800f746:	4652      	mov	r2, sl
 800f748:	19a8      	adds	r0, r5, r6
 800f74a:	f00e f8b2 	bl	801d8b2 <memcpy>
 800f74e:	e78c      	b.n	800f66a <ucdr_deserialize_endian_double+0xb6>

0800f750 <ucdr_check_buffer_available_for>:
 800f750:	7d83      	ldrb	r3, [r0, #22]
 800f752:	b93b      	cbnz	r3, 800f764 <ucdr_check_buffer_available_for+0x14>
 800f754:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f758:	4419      	add	r1, r3
 800f75a:	4288      	cmp	r0, r1
 800f75c:	bf34      	ite	cc
 800f75e:	2000      	movcc	r0, #0
 800f760:	2001      	movcs	r0, #1
 800f762:	4770      	bx	lr
 800f764:	2000      	movs	r0, #0
 800f766:	4770      	bx	lr

0800f768 <ucdr_check_final_buffer_behavior>:
 800f768:	7d83      	ldrb	r3, [r0, #22]
 800f76a:	b943      	cbnz	r3, 800f77e <ucdr_check_final_buffer_behavior+0x16>
 800f76c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f770:	4291      	cmp	r1, r2
 800f772:	b510      	push	{r4, lr}
 800f774:	4604      	mov	r4, r0
 800f776:	d205      	bcs.n	800f784 <ucdr_check_final_buffer_behavior+0x1c>
 800f778:	2301      	movs	r3, #1
 800f77a:	4618      	mov	r0, r3
 800f77c:	bd10      	pop	{r4, pc}
 800f77e:	2300      	movs	r3, #0
 800f780:	4618      	mov	r0, r3
 800f782:	4770      	bx	lr
 800f784:	6982      	ldr	r2, [r0, #24]
 800f786:	b13a      	cbz	r2, 800f798 <ucdr_check_final_buffer_behavior+0x30>
 800f788:	69c1      	ldr	r1, [r0, #28]
 800f78a:	4790      	blx	r2
 800f78c:	f080 0301 	eor.w	r3, r0, #1
 800f790:	b2db      	uxtb	r3, r3
 800f792:	75a0      	strb	r0, [r4, #22]
 800f794:	4618      	mov	r0, r3
 800f796:	bd10      	pop	{r4, pc}
 800f798:	2001      	movs	r0, #1
 800f79a:	75a0      	strb	r0, [r4, #22]
 800f79c:	e7fa      	b.n	800f794 <ucdr_check_final_buffer_behavior+0x2c>
 800f79e:	bf00      	nop

0800f7a0 <ucdr_set_on_full_buffer_callback>:
 800f7a0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f7a4:	4770      	bx	lr
 800f7a6:	bf00      	nop

0800f7a8 <ucdr_init_buffer_origin_offset_endian>:
 800f7a8:	b410      	push	{r4}
 800f7aa:	9c01      	ldr	r4, [sp, #4]
 800f7ac:	6001      	str	r1, [r0, #0]
 800f7ae:	440a      	add	r2, r1
 800f7b0:	6042      	str	r2, [r0, #4]
 800f7b2:	190a      	adds	r2, r1, r4
 800f7b4:	441c      	add	r4, r3
 800f7b6:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800f7ba:	6082      	str	r2, [r0, #8]
 800f7bc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f7c0:	7503      	strb	r3, [r0, #20]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800f7c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7cc:	7542      	strb	r2, [r0, #21]
 800f7ce:	7582      	strb	r2, [r0, #22]
 800f7d0:	4770      	bx	lr
 800f7d2:	bf00      	nop

0800f7d4 <ucdr_init_buffer_origin_offset>:
 800f7d4:	b510      	push	{r4, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	9c04      	ldr	r4, [sp, #16]
 800f7da:	9400      	str	r4, [sp, #0]
 800f7dc:	2401      	movs	r4, #1
 800f7de:	9401      	str	r4, [sp, #4]
 800f7e0:	f7ff ffe2 	bl	800f7a8 <ucdr_init_buffer_origin_offset_endian>
 800f7e4:	b002      	add	sp, #8
 800f7e6:	bd10      	pop	{r4, pc}

0800f7e8 <ucdr_init_buffer_origin>:
 800f7e8:	b510      	push	{r4, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	2400      	movs	r4, #0
 800f7ee:	9400      	str	r4, [sp, #0]
 800f7f0:	f7ff fff0 	bl	800f7d4 <ucdr_init_buffer_origin_offset>
 800f7f4:	b002      	add	sp, #8
 800f7f6:	bd10      	pop	{r4, pc}

0800f7f8 <ucdr_init_buffer>:
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	f7ff bff5 	b.w	800f7e8 <ucdr_init_buffer_origin>
 800f7fe:	bf00      	nop

0800f800 <ucdr_alignment>:
 800f800:	fbb0 f3f1 	udiv	r3, r0, r1
 800f804:	fb03 0011 	mls	r0, r3, r1, r0
 800f808:	1a08      	subs	r0, r1, r0
 800f80a:	3901      	subs	r1, #1
 800f80c:	4008      	ands	r0, r1
 800f80e:	4770      	bx	lr

0800f810 <ucdr_buffer_alignment>:
 800f810:	7d43      	ldrb	r3, [r0, #21]
 800f812:	428b      	cmp	r3, r1
 800f814:	d208      	bcs.n	800f828 <ucdr_buffer_alignment+0x18>
 800f816:	6900      	ldr	r0, [r0, #16]
 800f818:	fbb0 f3f1 	udiv	r3, r0, r1
 800f81c:	fb01 0013 	mls	r0, r1, r3, r0
 800f820:	1a08      	subs	r0, r1, r0
 800f822:	3901      	subs	r1, #1
 800f824:	4008      	ands	r0, r1
 800f826:	4770      	bx	lr
 800f828:	2000      	movs	r0, #0
 800f82a:	4770      	bx	lr

0800f82c <ucdr_align_to>:
 800f82c:	b538      	push	{r3, r4, r5, lr}
 800f82e:	4604      	mov	r4, r0
 800f830:	460d      	mov	r5, r1
 800f832:	f7ff ffed 	bl	800f810 <ucdr_buffer_alignment>
 800f836:	68a3      	ldr	r3, [r4, #8]
 800f838:	6921      	ldr	r1, [r4, #16]
 800f83a:	7565      	strb	r5, [r4, #21]
 800f83c:	181a      	adds	r2, r3, r0
 800f83e:	6863      	ldr	r3, [r4, #4]
 800f840:	4293      	cmp	r3, r2
 800f842:	4408      	add	r0, r1
 800f844:	bf28      	it	cs
 800f846:	4613      	movcs	r3, r2
 800f848:	6120      	str	r0, [r4, #16]
 800f84a:	60a3      	str	r3, [r4, #8]
 800f84c:	bd38      	pop	{r3, r4, r5, pc}
 800f84e:	bf00      	nop

0800f850 <ucdr_buffer_length>:
 800f850:	6882      	ldr	r2, [r0, #8]
 800f852:	6800      	ldr	r0, [r0, #0]
 800f854:	1a10      	subs	r0, r2, r0
 800f856:	4770      	bx	lr

0800f858 <ucdr_buffer_remaining>:
 800f858:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800f85c:	1a10      	subs	r0, r2, r0
 800f85e:	4770      	bx	lr

0800f860 <ucdr_check_final_buffer_behavior_array>:
 800f860:	b538      	push	{r3, r4, r5, lr}
 800f862:	7d83      	ldrb	r3, [r0, #22]
 800f864:	b963      	cbnz	r3, 800f880 <ucdr_check_final_buffer_behavior_array+0x20>
 800f866:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800f86a:	429a      	cmp	r2, r3
 800f86c:	4604      	mov	r4, r0
 800f86e:	460d      	mov	r5, r1
 800f870:	d308      	bcc.n	800f884 <ucdr_check_final_buffer_behavior_array+0x24>
 800f872:	b139      	cbz	r1, 800f884 <ucdr_check_final_buffer_behavior_array+0x24>
 800f874:	6983      	ldr	r3, [r0, #24]
 800f876:	b163      	cbz	r3, 800f892 <ucdr_check_final_buffer_behavior_array+0x32>
 800f878:	69c1      	ldr	r1, [r0, #28]
 800f87a:	4798      	blx	r3
 800f87c:	75a0      	strb	r0, [r4, #22]
 800f87e:	b108      	cbz	r0, 800f884 <ucdr_check_final_buffer_behavior_array+0x24>
 800f880:	2000      	movs	r0, #0
 800f882:	bd38      	pop	{r3, r4, r5, pc}
 800f884:	4620      	mov	r0, r4
 800f886:	f7ff ffe7 	bl	800f858 <ucdr_buffer_remaining>
 800f88a:	42a8      	cmp	r0, r5
 800f88c:	bf28      	it	cs
 800f88e:	4628      	movcs	r0, r5
 800f890:	bd38      	pop	{r3, r4, r5, pc}
 800f892:	2301      	movs	r3, #1
 800f894:	7583      	strb	r3, [r0, #22]
 800f896:	e7f3      	b.n	800f880 <ucdr_check_final_buffer_behavior_array+0x20>

0800f898 <ucdr_advance_buffer>:
 800f898:	b538      	push	{r3, r4, r5, lr}
 800f89a:	4604      	mov	r4, r0
 800f89c:	460d      	mov	r5, r1
 800f89e:	f7ff ff57 	bl	800f750 <ucdr_check_buffer_available_for>
 800f8a2:	b178      	cbz	r0, 800f8c4 <ucdr_advance_buffer+0x2c>
 800f8a4:	6923      	ldr	r3, [r4, #16]
 800f8a6:	68a2      	ldr	r2, [r4, #8]
 800f8a8:	442b      	add	r3, r5
 800f8aa:	6123      	str	r3, [r4, #16]
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	442a      	add	r2, r5
 800f8b0:	7563      	strb	r3, [r4, #21]
 800f8b2:	60a2      	str	r2, [r4, #8]
 800f8b4:	bd38      	pop	{r3, r4, r5, pc}
 800f8b6:	68a2      	ldr	r2, [r4, #8]
 800f8b8:	6923      	ldr	r3, [r4, #16]
 800f8ba:	4402      	add	r2, r0
 800f8bc:	4403      	add	r3, r0
 800f8be:	1a2d      	subs	r5, r5, r0
 800f8c0:	60a2      	str	r2, [r4, #8]
 800f8c2:	6123      	str	r3, [r4, #16]
 800f8c4:	4629      	mov	r1, r5
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	f7ff ffc9 	bl	800f860 <ucdr_check_final_buffer_behavior_array>
 800f8ce:	2800      	cmp	r0, #0
 800f8d0:	d1f1      	bne.n	800f8b6 <ucdr_advance_buffer+0x1e>
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	7563      	strb	r3, [r4, #21]
 800f8d6:	bd38      	pop	{r3, r4, r5, pc}

0800f8d8 <rcl_get_zero_initialized_client>:
 800f8d8:	4b01      	ldr	r3, [pc, #4]	@ (800f8e0 <rcl_get_zero_initialized_client+0x8>)
 800f8da:	6818      	ldr	r0, [r3, #0]
 800f8dc:	4770      	bx	lr
 800f8de:	bf00      	nop
 800f8e0:	0801f384 	.word	0x0801f384

0800f8e4 <rcl_client_init>:
 800f8e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8e8:	b089      	sub	sp, #36	@ 0x24
 800f8ea:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800f8ec:	b1c5      	cbz	r5, 800f920 <rcl_client_init+0x3c>
 800f8ee:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800f8f2:	4604      	mov	r4, r0
 800f8f4:	4648      	mov	r0, r9
 800f8f6:	4688      	mov	r8, r1
 800f8f8:	4617      	mov	r7, r2
 800f8fa:	461e      	mov	r6, r3
 800f8fc:	f001 fd9a 	bl	8011434 <rcutils_allocator_is_valid>
 800f900:	b170      	cbz	r0, 800f920 <rcl_client_init+0x3c>
 800f902:	b16c      	cbz	r4, 800f920 <rcl_client_init+0x3c>
 800f904:	4640      	mov	r0, r8
 800f906:	f000 fb83 	bl	8010010 <rcl_node_is_valid>
 800f90a:	2800      	cmp	r0, #0
 800f90c:	d05e      	beq.n	800f9cc <rcl_client_init+0xe8>
 800f90e:	b13f      	cbz	r7, 800f920 <rcl_client_init+0x3c>
 800f910:	b136      	cbz	r6, 800f920 <rcl_client_init+0x3c>
 800f912:	6823      	ldr	r3, [r4, #0]
 800f914:	b14b      	cbz	r3, 800f92a <rcl_client_init+0x46>
 800f916:	2664      	movs	r6, #100	@ 0x64
 800f918:	4630      	mov	r0, r6
 800f91a:	b009      	add	sp, #36	@ 0x24
 800f91c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f920:	260b      	movs	r6, #11
 800f922:	4630      	mov	r0, r6
 800f924:	b009      	add	sp, #36	@ 0x24
 800f926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f92a:	aa07      	add	r2, sp, #28
 800f92c:	9205      	str	r2, [sp, #20]
 800f92e:	2201      	movs	r2, #1
 800f930:	9304      	str	r3, [sp, #16]
 800f932:	9203      	str	r2, [sp, #12]
 800f934:	9307      	str	r3, [sp, #28]
 800f936:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800f93a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f93e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f942:	4631      	mov	r1, r6
 800f944:	e899 000c 	ldmia.w	r9, {r2, r3}
 800f948:	4640      	mov	r0, r8
 800f94a:	f000 fbb5 	bl	80100b8 <rcl_node_resolve_name>
 800f94e:	2800      	cmp	r0, #0
 800f950:	d14b      	bne.n	800f9ea <rcl_client_init+0x106>
 800f952:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800f954:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800f956:	f44f 708c 	mov.w	r0, #280	@ 0x118
 800f95a:	4798      	blx	r3
 800f95c:	6020      	str	r0, [r4, #0]
 800f95e:	2800      	cmp	r0, #0
 800f960:	d049      	beq.n	800f9f6 <rcl_client_init+0x112>
 800f962:	4640      	mov	r0, r8
 800f964:	f000 fb76 	bl	8010054 <rcl_node_get_rmw_handle>
 800f968:	462b      	mov	r3, r5
 800f96a:	9a07      	ldr	r2, [sp, #28]
 800f96c:	6826      	ldr	r6, [r4, #0]
 800f96e:	4639      	mov	r1, r7
 800f970:	f002 faa0 	bl	8011eb4 <rmw_create_client>
 800f974:	6823      	ldr	r3, [r4, #0]
 800f976:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 800f97a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f97e:	b360      	cbz	r0, 800f9da <rcl_client_init+0xf6>
 800f980:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 800f984:	f002 fbac 	bl	80120e0 <rmw_client_request_publisher_get_actual_qos>
 800f988:	bb28      	cbnz	r0, 800f9d6 <rcl_client_init+0xf2>
 800f98a:	6821      	ldr	r1, [r4, #0]
 800f98c:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 800f990:	31b8      	adds	r1, #184	@ 0xb8
 800f992:	f002 fbb5 	bl	8012100 <rmw_client_response_subscription_get_actual_qos>
 800f996:	4606      	mov	r6, r0
 800f998:	b9e8      	cbnz	r0, 800f9d6 <rcl_client_init+0xf2>
 800f99a:	6823      	ldr	r3, [r4, #0]
 800f99c:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800f9a0:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 800f9a4:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 800f9a8:	4629      	mov	r1, r5
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	2268      	movs	r2, #104	@ 0x68
 800f9ae:	f00d ff80 	bl	801d8b2 <memcpy>
 800f9b2:	2100      	movs	r1, #0
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2000      	movs	r0, #0
 800f9b8:	e9c3 0144 	strd	r0, r1, [r3, #272]	@ 0x110
 800f9bc:	9807      	ldr	r0, [sp, #28]
 800f9be:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800f9c0:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800f9c2:	4798      	blx	r3
 800f9c4:	4630      	mov	r0, r6
 800f9c6:	b009      	add	sp, #36	@ 0x24
 800f9c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9cc:	26c8      	movs	r6, #200	@ 0xc8
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	b009      	add	sp, #36	@ 0x24
 800f9d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9d6:	6823      	ldr	r3, [r4, #0]
 800f9d8:	b12b      	cbz	r3, 800f9e6 <rcl_client_init+0x102>
 800f9da:	4618      	mov	r0, r3
 800f9dc:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800f9de:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800f9e0:	4790      	blx	r2
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	6023      	str	r3, [r4, #0]
 800f9e6:	2601      	movs	r6, #1
 800f9e8:	e7e8      	b.n	800f9bc <rcl_client_init+0xd8>
 800f9ea:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 800f9ee:	2b01      	cmp	r3, #1
 800f9f0:	d903      	bls.n	800f9fa <rcl_client_init+0x116>
 800f9f2:	280a      	cmp	r0, #10
 800f9f4:	d1f7      	bne.n	800f9e6 <rcl_client_init+0x102>
 800f9f6:	260a      	movs	r6, #10
 800f9f8:	e7e0      	b.n	800f9bc <rcl_client_init+0xd8>
 800f9fa:	2668      	movs	r6, #104	@ 0x68
 800f9fc:	e7de      	b.n	800f9bc <rcl_client_init+0xd8>
 800f9fe:	bf00      	nop

0800fa00 <rcl_client_get_default_options>:
 800fa00:	b530      	push	{r4, r5, lr}
 800fa02:	4d0f      	ldr	r5, [pc, #60]	@ (800fa40 <rcl_client_get_default_options+0x40>)
 800fa04:	490f      	ldr	r1, [pc, #60]	@ (800fa44 <rcl_client_get_default_options+0x44>)
 800fa06:	b087      	sub	sp, #28
 800fa08:	4604      	mov	r4, r0
 800fa0a:	2250      	movs	r2, #80	@ 0x50
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	f00d ff50 	bl	801d8b2 <memcpy>
 800fa12:	4668      	mov	r0, sp
 800fa14:	f001 fd00 	bl	8011418 <rcutils_get_default_allocator>
 800fa18:	46ec      	mov	ip, sp
 800fa1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fa1e:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800fa22:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fa26:	2268      	movs	r2, #104	@ 0x68
 800fa28:	f8dc 3000 	ldr.w	r3, [ip]
 800fa2c:	f8ce 3000 	str.w	r3, [lr]
 800fa30:	4629      	mov	r1, r5
 800fa32:	4620      	mov	r0, r4
 800fa34:	f00d ff3d 	bl	801d8b2 <memcpy>
 800fa38:	4620      	mov	r0, r4
 800fa3a:	b007      	add	sp, #28
 800fa3c:	bd30      	pop	{r4, r5, pc}
 800fa3e:	bf00      	nop
 800fa40:	20007368 	.word	0x20007368
 800fa44:	0801f388 	.word	0x0801f388

0800fa48 <rcl_client_get_rmw_handle>:
 800fa48:	b118      	cbz	r0, 800fa52 <rcl_client_get_rmw_handle+0xa>
 800fa4a:	6800      	ldr	r0, [r0, #0]
 800fa4c:	b108      	cbz	r0, 800fa52 <rcl_client_get_rmw_handle+0xa>
 800fa4e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800fa52:	4770      	bx	lr

0800fa54 <rcl_send_request>:
 800fa54:	b570      	push	{r4, r5, r6, lr}
 800fa56:	b082      	sub	sp, #8
 800fa58:	b1e8      	cbz	r0, 800fa96 <rcl_send_request+0x42>
 800fa5a:	4604      	mov	r4, r0
 800fa5c:	6800      	ldr	r0, [r0, #0]
 800fa5e:	b1d0      	cbz	r0, 800fa96 <rcl_send_request+0x42>
 800fa60:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800fa64:	b1bb      	cbz	r3, 800fa96 <rcl_send_request+0x42>
 800fa66:	460e      	mov	r6, r1
 800fa68:	b1d1      	cbz	r1, 800faa0 <rcl_send_request+0x4c>
 800fa6a:	4615      	mov	r5, r2
 800fa6c:	b1c2      	cbz	r2, 800faa0 <rcl_send_request+0x4c>
 800fa6e:	2105      	movs	r1, #5
 800fa70:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800fa74:	f001 fcec 	bl	8011450 <__atomic_load_8>
 800fa78:	6823      	ldr	r3, [r4, #0]
 800fa7a:	e9c5 0100 	strd	r0, r1, [r5]
 800fa7e:	462a      	mov	r2, r5
 800fa80:	4631      	mov	r1, r6
 800fa82:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800fa86:	f003 f869 	bl	8012b5c <rmw_send_request>
 800fa8a:	4606      	mov	r6, r0
 800fa8c:	b160      	cbz	r0, 800faa8 <rcl_send_request+0x54>
 800fa8e:	2601      	movs	r6, #1
 800fa90:	4630      	mov	r0, r6
 800fa92:	b002      	add	sp, #8
 800fa94:	bd70      	pop	{r4, r5, r6, pc}
 800fa96:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800fa9a:	4630      	mov	r0, r6
 800fa9c:	b002      	add	sp, #8
 800fa9e:	bd70      	pop	{r4, r5, r6, pc}
 800faa0:	260b      	movs	r6, #11
 800faa2:	4630      	mov	r0, r6
 800faa4:	b002      	add	sp, #8
 800faa6:	bd70      	pop	{r4, r5, r6, pc}
 800faa8:	6820      	ldr	r0, [r4, #0]
 800faaa:	2105      	movs	r1, #5
 800faac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fab0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800fab4:	9100      	str	r1, [sp, #0]
 800fab6:	f001 fd37 	bl	8011528 <__atomic_exchange_8>
 800faba:	4630      	mov	r0, r6
 800fabc:	b002      	add	sp, #8
 800fabe:	bd70      	pop	{r4, r5, r6, pc}

0800fac0 <rcl_take_response>:
 800fac0:	b570      	push	{r4, r5, r6, lr}
 800fac2:	468e      	mov	lr, r1
 800fac4:	460c      	mov	r4, r1
 800fac6:	4616      	mov	r6, r2
 800fac8:	4605      	mov	r5, r0
 800faca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800face:	b08c      	sub	sp, #48	@ 0x30
 800fad0:	f10d 0c18 	add.w	ip, sp, #24
 800fad4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fad8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fadc:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fae0:	b35d      	cbz	r5, 800fb3a <rcl_take_response+0x7a>
 800fae2:	682b      	ldr	r3, [r5, #0]
 800fae4:	b34b      	cbz	r3, 800fb3a <rcl_take_response+0x7a>
 800fae6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800faea:	b330      	cbz	r0, 800fb3a <rcl_take_response+0x7a>
 800faec:	b346      	cbz	r6, 800fb40 <rcl_take_response+0x80>
 800faee:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800fb48 <rcl_take_response+0x88>
 800faf2:	2300      	movs	r3, #0
 800faf4:	f88d 3007 	strb.w	r3, [sp, #7]
 800faf8:	4632      	mov	r2, r6
 800fafa:	f10d 0307 	add.w	r3, sp, #7
 800fafe:	a902      	add	r1, sp, #8
 800fb00:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fb04:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fb08:	f003 f930 	bl	8012d6c <rmw_take_response>
 800fb0c:	4605      	mov	r5, r0
 800fb0e:	b9c8      	cbnz	r0, 800fb44 <rcl_take_response+0x84>
 800fb10:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fb14:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800fb18:	2a00      	cmp	r2, #0
 800fb1a:	bf08      	it	eq
 800fb1c:	461d      	moveq	r5, r3
 800fb1e:	f10d 0e18 	add.w	lr, sp, #24
 800fb22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb26:	46a4      	mov	ip, r4
 800fb28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb2c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fb30:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fb34:	4628      	mov	r0, r5
 800fb36:	b00c      	add	sp, #48	@ 0x30
 800fb38:	bd70      	pop	{r4, r5, r6, pc}
 800fb3a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800fb3e:	e7ee      	b.n	800fb1e <rcl_take_response+0x5e>
 800fb40:	250b      	movs	r5, #11
 800fb42:	e7ec      	b.n	800fb1e <rcl_take_response+0x5e>
 800fb44:	2501      	movs	r5, #1
 800fb46:	e7ea      	b.n	800fb1e <rcl_take_response+0x5e>
	...

0800fb50 <rcl_client_is_valid>:
 800fb50:	b130      	cbz	r0, 800fb60 <rcl_client_is_valid+0x10>
 800fb52:	6800      	ldr	r0, [r0, #0]
 800fb54:	b120      	cbz	r0, 800fb60 <rcl_client_is_valid+0x10>
 800fb56:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800fb5a:	3800      	subs	r0, #0
 800fb5c:	bf18      	it	ne
 800fb5e:	2001      	movne	r0, #1
 800fb60:	4770      	bx	lr
 800fb62:	bf00      	nop

0800fb64 <rcl_get_zero_initialized_init_options>:
 800fb64:	2000      	movs	r0, #0
 800fb66:	4770      	bx	lr

0800fb68 <rcl_init_options_init>:
 800fb68:	b084      	sub	sp, #16
 800fb6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb6c:	b097      	sub	sp, #92	@ 0x5c
 800fb6e:	ae1d      	add	r6, sp, #116	@ 0x74
 800fb70:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800fb74:	2800      	cmp	r0, #0
 800fb76:	d058      	beq.n	800fc2a <rcl_init_options_init+0xc2>
 800fb78:	6803      	ldr	r3, [r0, #0]
 800fb7a:	4605      	mov	r5, r0
 800fb7c:	b133      	cbz	r3, 800fb8c <rcl_init_options_init+0x24>
 800fb7e:	2464      	movs	r4, #100	@ 0x64
 800fb80:	4620      	mov	r0, r4
 800fb82:	b017      	add	sp, #92	@ 0x5c
 800fb84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fb88:	b004      	add	sp, #16
 800fb8a:	4770      	bx	lr
 800fb8c:	4630      	mov	r0, r6
 800fb8e:	f001 fc51 	bl	8011434 <rcutils_allocator_is_valid>
 800fb92:	2800      	cmp	r0, #0
 800fb94:	d049      	beq.n	800fc2a <rcl_init_options_init+0xc2>
 800fb96:	46b4      	mov	ip, r6
 800fb98:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fb9c:	ac11      	add	r4, sp, #68	@ 0x44
 800fb9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fba0:	f8dc 3000 	ldr.w	r3, [ip]
 800fba4:	6023      	str	r3, [r4, #0]
 800fba6:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800fba8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fbaa:	2050      	movs	r0, #80	@ 0x50
 800fbac:	4798      	blx	r3
 800fbae:	4604      	mov	r4, r0
 800fbb0:	6028      	str	r0, [r5, #0]
 800fbb2:	2800      	cmp	r0, #0
 800fbb4:	d03b      	beq.n	800fc2e <rcl_init_options_init+0xc6>
 800fbb6:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800fbba:	4686      	mov	lr, r0
 800fbbc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fbc0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fbc4:	f8dc 3000 	ldr.w	r3, [ip]
 800fbc8:	f8ce 3000 	str.w	r3, [lr]
 800fbcc:	a802      	add	r0, sp, #8
 800fbce:	f002 f803 	bl	8011bd8 <rmw_get_zero_initialized_init_options>
 800fbd2:	f10d 0e08 	add.w	lr, sp, #8
 800fbd6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fbda:	f104 0c18 	add.w	ip, r4, #24
 800fbde:	682f      	ldr	r7, [r5, #0]
 800fbe0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fbe4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fbe8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fbec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fbf0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fbf4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fbf8:	ac20      	add	r4, sp, #128	@ 0x80
 800fbfa:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fbfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fc02:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fc06:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800fc0a:	f107 0018 	add.w	r0, r7, #24
 800fc0e:	f002 fa8d 	bl	801212c <rmw_init_options_init>
 800fc12:	4604      	mov	r4, r0
 800fc14:	2800      	cmp	r0, #0
 800fc16:	d0b3      	beq.n	800fb80 <rcl_init_options_init+0x18>
 800fc18:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800fc1a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fc1c:	6828      	ldr	r0, [r5, #0]
 800fc1e:	4798      	blx	r3
 800fc20:	4620      	mov	r0, r4
 800fc22:	f008 fe21 	bl	8018868 <rcl_convert_rmw_ret_to_rcl_ret>
 800fc26:	4604      	mov	r4, r0
 800fc28:	e7aa      	b.n	800fb80 <rcl_init_options_init+0x18>
 800fc2a:	240b      	movs	r4, #11
 800fc2c:	e7a8      	b.n	800fb80 <rcl_init_options_init+0x18>
 800fc2e:	240a      	movs	r4, #10
 800fc30:	e7a6      	b.n	800fb80 <rcl_init_options_init+0x18>
 800fc32:	bf00      	nop

0800fc34 <rcl_init_options_fini>:
 800fc34:	b530      	push	{r4, r5, lr}
 800fc36:	b087      	sub	sp, #28
 800fc38:	b1f0      	cbz	r0, 800fc78 <rcl_init_options_fini+0x44>
 800fc3a:	6803      	ldr	r3, [r0, #0]
 800fc3c:	4604      	mov	r4, r0
 800fc3e:	b1db      	cbz	r3, 800fc78 <rcl_init_options_fini+0x44>
 800fc40:	469c      	mov	ip, r3
 800fc42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fc46:	f10d 0e04 	add.w	lr, sp, #4
 800fc4a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fc4e:	f8dc 3000 	ldr.w	r3, [ip]
 800fc52:	f8ce 3000 	str.w	r3, [lr]
 800fc56:	a801      	add	r0, sp, #4
 800fc58:	f001 fbec 	bl	8011434 <rcutils_allocator_is_valid>
 800fc5c:	b160      	cbz	r0, 800fc78 <rcl_init_options_fini+0x44>
 800fc5e:	6820      	ldr	r0, [r4, #0]
 800fc60:	3018      	adds	r0, #24
 800fc62:	f002 fb13 	bl	801228c <rmw_init_options_fini>
 800fc66:	4605      	mov	r5, r0
 800fc68:	b950      	cbnz	r0, 800fc80 <rcl_init_options_fini+0x4c>
 800fc6a:	6820      	ldr	r0, [r4, #0]
 800fc6c:	9b02      	ldr	r3, [sp, #8]
 800fc6e:	9905      	ldr	r1, [sp, #20]
 800fc70:	4798      	blx	r3
 800fc72:	4628      	mov	r0, r5
 800fc74:	b007      	add	sp, #28
 800fc76:	bd30      	pop	{r4, r5, pc}
 800fc78:	250b      	movs	r5, #11
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	b007      	add	sp, #28
 800fc7e:	bd30      	pop	{r4, r5, pc}
 800fc80:	f008 fdf2 	bl	8018868 <rcl_convert_rmw_ret_to_rcl_ret>
 800fc84:	4605      	mov	r5, r0
 800fc86:	e7f8      	b.n	800fc7a <rcl_init_options_fini+0x46>

0800fc88 <rcl_init_options_copy>:
 800fc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc8c:	b094      	sub	sp, #80	@ 0x50
 800fc8e:	2800      	cmp	r0, #0
 800fc90:	d058      	beq.n	800fd44 <rcl_init_options_copy+0xbc>
 800fc92:	4604      	mov	r4, r0
 800fc94:	6800      	ldr	r0, [r0, #0]
 800fc96:	2800      	cmp	r0, #0
 800fc98:	d054      	beq.n	800fd44 <rcl_init_options_copy+0xbc>
 800fc9a:	460e      	mov	r6, r1
 800fc9c:	f001 fbca 	bl	8011434 <rcutils_allocator_is_valid>
 800fca0:	2800      	cmp	r0, #0
 800fca2:	d04f      	beq.n	800fd44 <rcl_init_options_copy+0xbc>
 800fca4:	2e00      	cmp	r6, #0
 800fca6:	d04d      	beq.n	800fd44 <rcl_init_options_copy+0xbc>
 800fca8:	6833      	ldr	r3, [r6, #0]
 800fcaa:	b123      	cbz	r3, 800fcb6 <rcl_init_options_copy+0x2e>
 800fcac:	2464      	movs	r4, #100	@ 0x64
 800fcae:	4620      	mov	r0, r4
 800fcb0:	b014      	add	sp, #80	@ 0x50
 800fcb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcb6:	6827      	ldr	r7, [r4, #0]
 800fcb8:	46bc      	mov	ip, r7
 800fcba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fcbe:	ad0f      	add	r5, sp, #60	@ 0x3c
 800fcc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fcc2:	f8dc 3000 	ldr.w	r3, [ip]
 800fcc6:	f8d7 8000 	ldr.w	r8, [r7]
 800fcca:	602b      	str	r3, [r5, #0]
 800fccc:	4619      	mov	r1, r3
 800fcce:	2050      	movs	r0, #80	@ 0x50
 800fcd0:	47c0      	blx	r8
 800fcd2:	4605      	mov	r5, r0
 800fcd4:	6030      	str	r0, [r6, #0]
 800fcd6:	b3d0      	cbz	r0, 800fd4e <rcl_init_options_copy+0xc6>
 800fcd8:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800fcdc:	4686      	mov	lr, r0
 800fcde:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fce2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fce6:	f8dc 3000 	ldr.w	r3, [ip]
 800fcea:	f8ce 3000 	str.w	r3, [lr]
 800fcee:	4668      	mov	r0, sp
 800fcf0:	f001 ff72 	bl	8011bd8 <rmw_get_zero_initialized_init_options>
 800fcf4:	46ee      	mov	lr, sp
 800fcf6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fcfa:	f105 0c18 	add.w	ip, r5, #24
 800fcfe:	6824      	ldr	r4, [r4, #0]
 800fd00:	6835      	ldr	r5, [r6, #0]
 800fd02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd06:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fd0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fd12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd16:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fd1a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fd1e:	f104 0018 	add.w	r0, r4, #24
 800fd22:	f105 0118 	add.w	r1, r5, #24
 800fd26:	f002 fa69 	bl	80121fc <rmw_init_options_copy>
 800fd2a:	4604      	mov	r4, r0
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	d0be      	beq.n	800fcae <rcl_init_options_copy+0x26>
 800fd30:	f001 fc4a 	bl	80115c8 <rcutils_get_error_string>
 800fd34:	f001 fc60 	bl	80115f8 <rcutils_reset_error>
 800fd38:	4630      	mov	r0, r6
 800fd3a:	f7ff ff7b 	bl	800fc34 <rcl_init_options_fini>
 800fd3e:	b140      	cbz	r0, 800fd52 <rcl_init_options_copy+0xca>
 800fd40:	4604      	mov	r4, r0
 800fd42:	e7b4      	b.n	800fcae <rcl_init_options_copy+0x26>
 800fd44:	240b      	movs	r4, #11
 800fd46:	4620      	mov	r0, r4
 800fd48:	b014      	add	sp, #80	@ 0x50
 800fd4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd4e:	240a      	movs	r4, #10
 800fd50:	e7ad      	b.n	800fcae <rcl_init_options_copy+0x26>
 800fd52:	4620      	mov	r0, r4
 800fd54:	b014      	add	sp, #80	@ 0x50
 800fd56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd5a:	f008 bd85 	b.w	8018868 <rcl_convert_rmw_ret_to_rcl_ret>
 800fd5e:	bf00      	nop

0800fd60 <rcl_init_options_set_domain_id>:
 800fd60:	b120      	cbz	r0, 800fd6c <rcl_init_options_set_domain_id+0xc>
 800fd62:	6803      	ldr	r3, [r0, #0]
 800fd64:	b113      	cbz	r3, 800fd6c <rcl_init_options_set_domain_id+0xc>
 800fd66:	6259      	str	r1, [r3, #36]	@ 0x24
 800fd68:	2000      	movs	r0, #0
 800fd6a:	4770      	bx	lr
 800fd6c:	200b      	movs	r0, #11
 800fd6e:	4770      	bx	lr

0800fd70 <rcl_get_zero_initialized_node>:
 800fd70:	4a03      	ldr	r2, [pc, #12]	@ (800fd80 <rcl_get_zero_initialized_node+0x10>)
 800fd72:	4603      	mov	r3, r0
 800fd74:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd78:	e883 0003 	stmia.w	r3, {r0, r1}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	4770      	bx	lr
 800fd80:	0801f3f4 	.word	0x0801f3f4

0800fd84 <rcl_node_init>:
 800fd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd88:	b0a9      	sub	sp, #164	@ 0xa4
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800fd90:	a823      	add	r0, sp, #140	@ 0x8c
 800fd92:	460e      	mov	r6, r1
 800fd94:	4615      	mov	r5, r2
 800fd96:	461f      	mov	r7, r3
 800fd98:	f009 f82a 	bl	8018df0 <rcl_guard_condition_get_default_options>
 800fd9c:	f1b8 0f00 	cmp.w	r8, #0
 800fda0:	f000 80e6 	beq.w	800ff70 <rcl_node_init+0x1ec>
 800fda4:	4640      	mov	r0, r8
 800fda6:	f001 fb45 	bl	8011434 <rcutils_allocator_is_valid>
 800fdaa:	2800      	cmp	r0, #0
 800fdac:	f000 80e0 	beq.w	800ff70 <rcl_node_init+0x1ec>
 800fdb0:	2e00      	cmp	r6, #0
 800fdb2:	f000 80dd 	beq.w	800ff70 <rcl_node_init+0x1ec>
 800fdb6:	2d00      	cmp	r5, #0
 800fdb8:	f000 80da 	beq.w	800ff70 <rcl_node_init+0x1ec>
 800fdbc:	2c00      	cmp	r4, #0
 800fdbe:	f000 80d7 	beq.w	800ff70 <rcl_node_init+0x1ec>
 800fdc2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fdc6:	f1b9 0f00 	cmp.w	r9, #0
 800fdca:	f040 80fd 	bne.w	800ffc8 <rcl_node_init+0x244>
 800fdce:	2f00      	cmp	r7, #0
 800fdd0:	f000 80ce 	beq.w	800ff70 <rcl_node_init+0x1ec>
 800fdd4:	4638      	mov	r0, r7
 800fdd6:	f008 fd65 	bl	80188a4 <rcl_context_is_valid>
 800fdda:	4682      	mov	sl, r0
 800fddc:	2800      	cmp	r0, #0
 800fdde:	f000 80cd 	beq.w	800ff7c <rcl_node_init+0x1f8>
 800fde2:	464a      	mov	r2, r9
 800fde4:	a922      	add	r1, sp, #136	@ 0x88
 800fde6:	4630      	mov	r0, r6
 800fde8:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800fdec:	f001 ffee 	bl	8011dcc <rmw_validate_node_name>
 800fdf0:	4681      	mov	r9, r0
 800fdf2:	2800      	cmp	r0, #0
 800fdf4:	f040 80be 	bne.w	800ff74 <rcl_node_init+0x1f0>
 800fdf8:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800fdfa:	2800      	cmp	r0, #0
 800fdfc:	f040 80f0 	bne.w	800ffe0 <rcl_node_init+0x25c>
 800fe00:	4628      	mov	r0, r5
 800fe02:	f7f0 fa17 	bl	8000234 <strlen>
 800fe06:	2800      	cmp	r0, #0
 800fe08:	f040 80bb 	bne.w	800ff82 <rcl_node_init+0x1fe>
 800fe0c:	4d7c      	ldr	r5, [pc, #496]	@ (8010000 <rcl_node_init+0x27c>)
 800fe0e:	a922      	add	r1, sp, #136	@ 0x88
 800fe10:	2200      	movs	r2, #0
 800fe12:	4628      	mov	r0, r5
 800fe14:	f001 ffbc 	bl	8011d90 <rmw_validate_namespace>
 800fe18:	4681      	mov	r9, r0
 800fe1a:	2800      	cmp	r0, #0
 800fe1c:	f040 80aa 	bne.w	800ff74 <rcl_node_init+0x1f0>
 800fe20:	4682      	mov	sl, r0
 800fe22:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800fe24:	2800      	cmp	r0, #0
 800fe26:	f040 80e0 	bne.w	800ffea <rcl_node_init+0x266>
 800fe2a:	f8d8 3000 	ldr.w	r3, [r8]
 800fe2e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fe32:	2078      	movs	r0, #120	@ 0x78
 800fe34:	4798      	blx	r3
 800fe36:	4681      	mov	r9, r0
 800fe38:	6060      	str	r0, [r4, #4]
 800fe3a:	2800      	cmp	r0, #0
 800fe3c:	f000 80ca 	beq.w	800ffd4 <rcl_node_init+0x250>
 800fe40:	2200      	movs	r2, #0
 800fe42:	2300      	movs	r3, #0
 800fe44:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800fe48:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800fe4c:	a808      	add	r0, sp, #32
 800fe4e:	f000 f907 	bl	8010060 <rcl_node_get_default_options>
 800fe52:	a908      	add	r1, sp, #32
 800fe54:	4648      	mov	r0, r9
 800fe56:	2268      	movs	r2, #104	@ 0x68
 800fe58:	f00d fd2b 	bl	801d8b2 <memcpy>
 800fe5c:	6861      	ldr	r1, [r4, #4]
 800fe5e:	6027      	str	r7, [r4, #0]
 800fe60:	4640      	mov	r0, r8
 800fe62:	f000 f90b 	bl	801007c <rcl_node_options_copy>
 800fe66:	2800      	cmp	r0, #0
 800fe68:	d158      	bne.n	800ff1c <rcl_node_init+0x198>
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	f7f0 f9e2 	bl	8000234 <strlen>
 800fe70:	4428      	add	r0, r5
 800fe72:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800fe76:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800fe7a:	2b2f      	cmp	r3, #47	@ 0x2f
 800fe7c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fe80:	9300      	str	r3, [sp, #0]
 800fe82:	bf0c      	ite	eq
 800fe84:	4b5f      	ldreq	r3, [pc, #380]	@ (8010004 <rcl_node_init+0x280>)
 800fe86:	4b60      	ldrne	r3, [pc, #384]	@ (8010008 <rcl_node_init+0x284>)
 800fe88:	9302      	str	r3, [sp, #8]
 800fe8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fe8e:	9301      	str	r3, [sp, #4]
 800fe90:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800fe94:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fe98:	f001 fbca 	bl	8011630 <rcutils_format_string_limit>
 800fe9c:	6823      	ldr	r3, [r4, #0]
 800fe9e:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800fea2:	6818      	ldr	r0, [r3, #0]
 800fea4:	4631      	mov	r1, r6
 800fea6:	3028      	adds	r0, #40	@ 0x28
 800fea8:	462a      	mov	r2, r5
 800feaa:	6866      	ldr	r6, [r4, #4]
 800feac:	f002 fc18 	bl	80126e0 <rmw_create_node>
 800feb0:	6863      	ldr	r3, [r4, #4]
 800feb2:	66b0      	str	r0, [r6, #104]	@ 0x68
 800feb4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800feb6:	2800      	cmp	r0, #0
 800feb8:	d032      	beq.n	800ff20 <rcl_node_init+0x19c>
 800feba:	f002 fca5 	bl	8012808 <rmw_node_get_graph_guard_condition>
 800febe:	4681      	mov	r9, r0
 800fec0:	b360      	cbz	r0, 800ff1c <rcl_node_init+0x198>
 800fec2:	f8d8 3000 	ldr.w	r3, [r8]
 800fec6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800feca:	6866      	ldr	r6, [r4, #4]
 800fecc:	2008      	movs	r0, #8
 800fece:	4798      	blx	r3
 800fed0:	6863      	ldr	r3, [r4, #4]
 800fed2:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800fed4:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800fed8:	f1bb 0f00 	cmp.w	fp, #0
 800fedc:	d020      	beq.n	800ff20 <rcl_node_init+0x19c>
 800fede:	a806      	add	r0, sp, #24
 800fee0:	f008 feaa 	bl	8018c38 <rcl_get_zero_initialized_guard_condition>
 800fee4:	a806      	add	r0, sp, #24
 800fee6:	c803      	ldmia	r0, {r0, r1}
 800fee8:	6863      	ldr	r3, [r4, #4]
 800feea:	46c4      	mov	ip, r8
 800feec:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800fef0:	e88b 0003 	stmia.w	fp, {r0, r1}
 800fef4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fef8:	ae23      	add	r6, sp, #140	@ 0x8c
 800fefa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fefc:	f8dc 3000 	ldr.w	r3, [ip]
 800ff00:	6033      	str	r3, [r6, #0]
 800ff02:	ab28      	add	r3, sp, #160	@ 0xa0
 800ff04:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800ff08:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ff0c:	4649      	mov	r1, r9
 800ff0e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff10:	463a      	mov	r2, r7
 800ff12:	4670      	mov	r0, lr
 800ff14:	f008 fee6 	bl	8018ce4 <rcl_guard_condition_init_from_rmw>
 800ff18:	4681      	mov	r9, r0
 800ff1a:	b328      	cbz	r0, 800ff68 <rcl_node_init+0x1e4>
 800ff1c:	6863      	ldr	r3, [r4, #4]
 800ff1e:	b1f3      	cbz	r3, 800ff5e <rcl_node_init+0x1da>
 800ff20:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800ff22:	b128      	cbz	r0, 800ff30 <rcl_node_init+0x1ac>
 800ff24:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff28:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ff2c:	4798      	blx	r3
 800ff2e:	6863      	ldr	r3, [r4, #4]
 800ff30:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800ff32:	b110      	cbz	r0, 800ff3a <rcl_node_init+0x1b6>
 800ff34:	f002 fbec 	bl	8012710 <rmw_destroy_node>
 800ff38:	6863      	ldr	r3, [r4, #4]
 800ff3a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ff3c:	b148      	cbz	r0, 800ff52 <rcl_node_init+0x1ce>
 800ff3e:	f008 ff31 	bl	8018da4 <rcl_guard_condition_fini>
 800ff42:	6863      	ldr	r3, [r4, #4]
 800ff44:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ff48:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ff4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff4e:	4798      	blx	r3
 800ff50:	6863      	ldr	r3, [r4, #4]
 800ff52:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ff56:	4618      	mov	r0, r3
 800ff58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff5c:	4798      	blx	r3
 800ff5e:	2300      	movs	r3, #0
 800ff60:	e9c4 3300 	strd	r3, r3, [r4]
 800ff64:	f04f 0901 	mov.w	r9, #1
 800ff68:	f1ba 0f00 	cmp.w	sl, #0
 800ff6c:	d125      	bne.n	800ffba <rcl_node_init+0x236>
 800ff6e:	e001      	b.n	800ff74 <rcl_node_init+0x1f0>
 800ff70:	f04f 090b 	mov.w	r9, #11
 800ff74:	4648      	mov	r0, r9
 800ff76:	b029      	add	sp, #164	@ 0xa4
 800ff78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff7c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800ff80:	e7f8      	b.n	800ff74 <rcl_node_init+0x1f0>
 800ff82:	782b      	ldrb	r3, [r5, #0]
 800ff84:	2b2f      	cmp	r3, #47	@ 0x2f
 800ff86:	f43f af42 	beq.w	800fe0e <rcl_node_init+0x8a>
 800ff8a:	9503      	str	r5, [sp, #12]
 800ff8c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ff90:	9300      	str	r3, [sp, #0]
 800ff92:	4b1e      	ldr	r3, [pc, #120]	@ (801000c <rcl_node_init+0x288>)
 800ff94:	9302      	str	r3, [sp, #8]
 800ff96:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ff9a:	9301      	str	r3, [sp, #4]
 800ff9c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800ffa0:	f001 fb46 	bl	8011630 <rcutils_format_string_limit>
 800ffa4:	4605      	mov	r5, r0
 800ffa6:	b340      	cbz	r0, 800fffa <rcl_node_init+0x276>
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	a922      	add	r1, sp, #136	@ 0x88
 800ffac:	9222      	str	r2, [sp, #136]	@ 0x88
 800ffae:	f001 feef 	bl	8011d90 <rmw_validate_namespace>
 800ffb2:	4681      	mov	r9, r0
 800ffb4:	2800      	cmp	r0, #0
 800ffb6:	f43f af34 	beq.w	800fe22 <rcl_node_init+0x9e>
 800ffba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ffbe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	4798      	blx	r3
 800ffc6:	e7d5      	b.n	800ff74 <rcl_node_init+0x1f0>
 800ffc8:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800ffcc:	4648      	mov	r0, r9
 800ffce:	b029      	add	sp, #164	@ 0xa4
 800ffd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd4:	f04f 090a 	mov.w	r9, #10
 800ffd8:	f1ba 0f00 	cmp.w	sl, #0
 800ffdc:	d1ed      	bne.n	800ffba <rcl_node_init+0x236>
 800ffde:	e7c9      	b.n	800ff74 <rcl_node_init+0x1f0>
 800ffe0:	f001 ff46 	bl	8011e70 <rmw_node_name_validation_result_string>
 800ffe4:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800ffe8:	e7c4      	b.n	800ff74 <rcl_node_init+0x1f0>
 800ffea:	f001 fee3 	bl	8011db4 <rmw_namespace_validation_result_string>
 800ffee:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800fff2:	f1ba 0f00 	cmp.w	sl, #0
 800fff6:	d1e0      	bne.n	800ffba <rcl_node_init+0x236>
 800fff8:	e7bc      	b.n	800ff74 <rcl_node_init+0x1f0>
 800fffa:	f04f 090a 	mov.w	r9, #10
 800fffe:	e7b9      	b.n	800ff74 <rcl_node_init+0x1f0>
 8010000:	0801f3dc 	.word	0x0801f3dc
 8010004:	0801f3e4 	.word	0x0801f3e4
 8010008:	0801f3ec 	.word	0x0801f3ec
 801000c:	0801f3e0 	.word	0x0801f3e0

08010010 <rcl_node_is_valid>:
 8010010:	b130      	cbz	r0, 8010020 <rcl_node_is_valid+0x10>
 8010012:	6843      	ldr	r3, [r0, #4]
 8010014:	b123      	cbz	r3, 8010020 <rcl_node_is_valid+0x10>
 8010016:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010018:	b113      	cbz	r3, 8010020 <rcl_node_is_valid+0x10>
 801001a:	6800      	ldr	r0, [r0, #0]
 801001c:	f008 bc42 	b.w	80188a4 <rcl_context_is_valid>
 8010020:	2000      	movs	r0, #0
 8010022:	4770      	bx	lr

08010024 <rcl_node_get_name>:
 8010024:	b120      	cbz	r0, 8010030 <rcl_node_get_name+0xc>
 8010026:	6840      	ldr	r0, [r0, #4]
 8010028:	b110      	cbz	r0, 8010030 <rcl_node_get_name+0xc>
 801002a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801002c:	b100      	cbz	r0, 8010030 <rcl_node_get_name+0xc>
 801002e:	6880      	ldr	r0, [r0, #8]
 8010030:	4770      	bx	lr
 8010032:	bf00      	nop

08010034 <rcl_node_get_namespace>:
 8010034:	b120      	cbz	r0, 8010040 <rcl_node_get_namespace+0xc>
 8010036:	6840      	ldr	r0, [r0, #4]
 8010038:	b110      	cbz	r0, 8010040 <rcl_node_get_namespace+0xc>
 801003a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801003c:	b100      	cbz	r0, 8010040 <rcl_node_get_namespace+0xc>
 801003e:	68c0      	ldr	r0, [r0, #12]
 8010040:	4770      	bx	lr
 8010042:	bf00      	nop

08010044 <rcl_node_get_options>:
 8010044:	b128      	cbz	r0, 8010052 <rcl_node_get_options+0xe>
 8010046:	6840      	ldr	r0, [r0, #4]
 8010048:	b118      	cbz	r0, 8010052 <rcl_node_get_options+0xe>
 801004a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801004c:	2b00      	cmp	r3, #0
 801004e:	bf08      	it	eq
 8010050:	2000      	moveq	r0, #0
 8010052:	4770      	bx	lr

08010054 <rcl_node_get_rmw_handle>:
 8010054:	b110      	cbz	r0, 801005c <rcl_node_get_rmw_handle+0x8>
 8010056:	6840      	ldr	r0, [r0, #4]
 8010058:	b100      	cbz	r0, 801005c <rcl_node_get_rmw_handle+0x8>
 801005a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801005c:	4770      	bx	lr
 801005e:	bf00      	nop

08010060 <rcl_node_get_default_options>:
 8010060:	b510      	push	{r4, lr}
 8010062:	2268      	movs	r2, #104	@ 0x68
 8010064:	4604      	mov	r4, r0
 8010066:	2100      	movs	r1, #0
 8010068:	f00d fb5a 	bl	801d720 <memset>
 801006c:	4620      	mov	r0, r4
 801006e:	f001 f9d3 	bl	8011418 <rcutils_get_default_allocator>
 8010072:	2301      	movs	r3, #1
 8010074:	7523      	strb	r3, [r4, #20]
 8010076:	4620      	mov	r0, r4
 8010078:	bd10      	pop	{r4, pc}
 801007a:	bf00      	nop

0801007c <rcl_node_options_copy>:
 801007c:	b1d0      	cbz	r0, 80100b4 <rcl_node_options_copy+0x38>
 801007e:	b570      	push	{r4, r5, r6, lr}
 8010080:	460c      	mov	r4, r1
 8010082:	b1a9      	cbz	r1, 80100b0 <rcl_node_options_copy+0x34>
 8010084:	4288      	cmp	r0, r1
 8010086:	4684      	mov	ip, r0
 8010088:	d012      	beq.n	80100b0 <rcl_node_options_copy+0x34>
 801008a:	4605      	mov	r5, r0
 801008c:	8a86      	ldrh	r6, [r0, #20]
 801008e:	468e      	mov	lr, r1
 8010090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010092:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010096:	682b      	ldr	r3, [r5, #0]
 8010098:	f8ce 3000 	str.w	r3, [lr]
 801009c:	f10c 0118 	add.w	r1, ip, #24
 80100a0:	2250      	movs	r2, #80	@ 0x50
 80100a2:	82a6      	strh	r6, [r4, #20]
 80100a4:	f104 0018 	add.w	r0, r4, #24
 80100a8:	f00d fc03 	bl	801d8b2 <memcpy>
 80100ac:	2000      	movs	r0, #0
 80100ae:	bd70      	pop	{r4, r5, r6, pc}
 80100b0:	200b      	movs	r0, #11
 80100b2:	bd70      	pop	{r4, r5, r6, pc}
 80100b4:	200b      	movs	r0, #11
 80100b6:	4770      	bx	lr

080100b8 <rcl_node_resolve_name>:
 80100b8:	b082      	sub	sp, #8
 80100ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100be:	b091      	sub	sp, #68	@ 0x44
 80100c0:	ac1a      	add	r4, sp, #104	@ 0x68
 80100c2:	e884 000c 	stmia.w	r4, {r2, r3}
 80100c6:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80100ca:	2800      	cmp	r0, #0
 80100cc:	d03b      	beq.n	8010146 <rcl_node_resolve_name+0x8e>
 80100ce:	460c      	mov	r4, r1
 80100d0:	4605      	mov	r5, r0
 80100d2:	f7ff ffb7 	bl	8010044 <rcl_node_get_options>
 80100d6:	2800      	cmp	r0, #0
 80100d8:	d037      	beq.n	801014a <rcl_node_resolve_name+0x92>
 80100da:	4628      	mov	r0, r5
 80100dc:	f7ff ffa2 	bl	8010024 <rcl_node_get_name>
 80100e0:	4606      	mov	r6, r0
 80100e2:	4628      	mov	r0, r5
 80100e4:	f7ff ffa6 	bl	8010034 <rcl_node_get_namespace>
 80100e8:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80100ec:	4681      	mov	r9, r0
 80100ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80100f2:	ad0b      	add	r5, sp, #44	@ 0x2c
 80100f4:	46ac      	mov	ip, r5
 80100f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100fa:	f8de 3000 	ldr.w	r3, [lr]
 80100fe:	f8cc 3000 	str.w	r3, [ip]
 8010102:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010104:	b1fb      	cbz	r3, 8010146 <rcl_node_resolve_name+0x8e>
 8010106:	468a      	mov	sl, r1
 8010108:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 801010c:	f001 fbe8 	bl	80118e0 <rcutils_get_zero_initialized_string_map>
 8010110:	ab10      	add	r3, sp, #64	@ 0x40
 8010112:	9008      	str	r0, [sp, #32]
 8010114:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010118:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801011c:	2100      	movs	r1, #0
 801011e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010122:	a808      	add	r0, sp, #32
 8010124:	f001 fc54 	bl	80119d0 <rcutils_string_map_init>
 8010128:	4607      	mov	r7, r0
 801012a:	b180      	cbz	r0, 801014e <rcl_node_resolve_name+0x96>
 801012c:	f001 fa4c 	bl	80115c8 <rcutils_get_error_string>
 8010130:	f001 fa62 	bl	80115f8 <rcutils_reset_error>
 8010134:	2f0a      	cmp	r7, #10
 8010136:	bf18      	it	ne
 8010138:	2701      	movne	r7, #1
 801013a:	4638      	mov	r0, r7
 801013c:	b011      	add	sp, #68	@ 0x44
 801013e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010142:	b002      	add	sp, #8
 8010144:	4770      	bx	lr
 8010146:	270b      	movs	r7, #11
 8010148:	e7f7      	b.n	801013a <rcl_node_resolve_name+0x82>
 801014a:	2701      	movs	r7, #1
 801014c:	e7f5      	b.n	801013a <rcl_node_resolve_name+0x82>
 801014e:	9009      	str	r0, [sp, #36]	@ 0x24
 8010150:	9007      	str	r0, [sp, #28]
 8010152:	a808      	add	r0, sp, #32
 8010154:	f008 fd6a 	bl	8018c2c <rcl_get_default_topic_name_substitutions>
 8010158:	4607      	mov	r7, r0
 801015a:	b1a8      	cbz	r0, 8010188 <rcl_node_resolve_name+0xd0>
 801015c:	280a      	cmp	r0, #10
 801015e:	9c07      	ldr	r4, [sp, #28]
 8010160:	d000      	beq.n	8010164 <rcl_node_resolve_name+0xac>
 8010162:	2701      	movs	r7, #1
 8010164:	a808      	add	r0, sp, #32
 8010166:	f001 fc73 	bl	8011a50 <rcutils_string_map_fini>
 801016a:	2800      	cmp	r0, #0
 801016c:	d13d      	bne.n	80101ea <rcl_node_resolve_name+0x132>
 801016e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010170:	4659      	mov	r1, fp
 8010172:	47d0      	blx	sl
 8010174:	4659      	mov	r1, fp
 8010176:	4620      	mov	r0, r4
 8010178:	47d0      	blx	sl
 801017a:	f1b8 0f00 	cmp.w	r8, #0
 801017e:	d0dc      	beq.n	801013a <rcl_node_resolve_name+0x82>
 8010180:	2f67      	cmp	r7, #103	@ 0x67
 8010182:	bf08      	it	eq
 8010184:	2768      	moveq	r7, #104	@ 0x68
 8010186:	e7d8      	b.n	801013a <rcl_node_resolve_name+0x82>
 8010188:	ab09      	add	r3, sp, #36	@ 0x24
 801018a:	9305      	str	r3, [sp, #20]
 801018c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801018e:	46ec      	mov	ip, sp
 8010190:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010194:	682b      	ldr	r3, [r5, #0]
 8010196:	f8cc 3000 	str.w	r3, [ip]
 801019a:	464a      	mov	r2, r9
 801019c:	4631      	mov	r1, r6
 801019e:	4620      	mov	r0, r4
 80101a0:	ab08      	add	r3, sp, #32
 80101a2:	f008 fbe5 	bl	8018970 <rcl_expand_topic_name>
 80101a6:	4607      	mov	r7, r0
 80101a8:	b9b8      	cbnz	r0, 80101da <rcl_node_resolve_name+0x122>
 80101aa:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80101ac:	9009      	str	r0, [sp, #36]	@ 0x24
 80101ae:	4602      	mov	r2, r0
 80101b0:	a90a      	add	r1, sp, #40	@ 0x28
 80101b2:	4620      	mov	r0, r4
 80101b4:	f001 fd28 	bl	8011c08 <rmw_validate_full_topic_name>
 80101b8:	b988      	cbnz	r0, 80101de <rcl_node_resolve_name+0x126>
 80101ba:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80101bc:	b9d5      	cbnz	r5, 80101f4 <rcl_node_resolve_name+0x13c>
 80101be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80101c0:	a808      	add	r0, sp, #32
 80101c2:	601c      	str	r4, [r3, #0]
 80101c4:	f001 fc44 	bl	8011a50 <rcutils_string_map_fini>
 80101c8:	4607      	mov	r7, r0
 80101ca:	b1a8      	cbz	r0, 80101f8 <rcl_node_resolve_name+0x140>
 80101cc:	f001 f9fc 	bl	80115c8 <rcutils_get_error_string>
 80101d0:	462c      	mov	r4, r5
 80101d2:	f001 fa11 	bl	80115f8 <rcutils_reset_error>
 80101d6:	2701      	movs	r7, #1
 80101d8:	e7c9      	b.n	801016e <rcl_node_resolve_name+0xb6>
 80101da:	9c07      	ldr	r4, [sp, #28]
 80101dc:	e7c2      	b.n	8010164 <rcl_node_resolve_name+0xac>
 80101de:	f001 f9f3 	bl	80115c8 <rcutils_get_error_string>
 80101e2:	2701      	movs	r7, #1
 80101e4:	f001 fa08 	bl	80115f8 <rcutils_reset_error>
 80101e8:	e7bc      	b.n	8010164 <rcl_node_resolve_name+0xac>
 80101ea:	f001 f9ed 	bl	80115c8 <rcutils_get_error_string>
 80101ee:	f001 fa03 	bl	80115f8 <rcutils_reset_error>
 80101f2:	e7bc      	b.n	801016e <rcl_node_resolve_name+0xb6>
 80101f4:	2767      	movs	r7, #103	@ 0x67
 80101f6:	e7b5      	b.n	8010164 <rcl_node_resolve_name+0xac>
 80101f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80101fa:	4659      	mov	r1, fp
 80101fc:	47d0      	blx	sl
 80101fe:	4659      	mov	r1, fp
 8010200:	4638      	mov	r0, r7
 8010202:	47d0      	blx	sl
 8010204:	e799      	b.n	801013a <rcl_node_resolve_name+0x82>
 8010206:	bf00      	nop

08010208 <rcl_get_zero_initialized_publisher>:
 8010208:	4b01      	ldr	r3, [pc, #4]	@ (8010210 <rcl_get_zero_initialized_publisher+0x8>)
 801020a:	6818      	ldr	r0, [r3, #0]
 801020c:	4770      	bx	lr
 801020e:	bf00      	nop
 8010210:	0801f3fc 	.word	0x0801f3fc

08010214 <rcl_publisher_init>:
 8010214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010218:	b088      	sub	sp, #32
 801021a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801021c:	2d00      	cmp	r5, #0
 801021e:	d069      	beq.n	80102f4 <rcl_publisher_init+0xe0>
 8010220:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8010224:	4604      	mov	r4, r0
 8010226:	4648      	mov	r0, r9
 8010228:	460e      	mov	r6, r1
 801022a:	4690      	mov	r8, r2
 801022c:	461f      	mov	r7, r3
 801022e:	f001 f901 	bl	8011434 <rcutils_allocator_is_valid>
 8010232:	2800      	cmp	r0, #0
 8010234:	d05e      	beq.n	80102f4 <rcl_publisher_init+0xe0>
 8010236:	2c00      	cmp	r4, #0
 8010238:	d05c      	beq.n	80102f4 <rcl_publisher_init+0xe0>
 801023a:	f8d4 a000 	ldr.w	sl, [r4]
 801023e:	f1ba 0f00 	cmp.w	sl, #0
 8010242:	d004      	beq.n	801024e <rcl_publisher_init+0x3a>
 8010244:	2764      	movs	r7, #100	@ 0x64
 8010246:	4638      	mov	r0, r7
 8010248:	b008      	add	sp, #32
 801024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801024e:	4630      	mov	r0, r6
 8010250:	f7ff fede 	bl	8010010 <rcl_node_is_valid>
 8010254:	2800      	cmp	r0, #0
 8010256:	d052      	beq.n	80102fe <rcl_publisher_init+0xea>
 8010258:	f1b8 0f00 	cmp.w	r8, #0
 801025c:	d04a      	beq.n	80102f4 <rcl_publisher_init+0xe0>
 801025e:	2f00      	cmp	r7, #0
 8010260:	d048      	beq.n	80102f4 <rcl_publisher_init+0xe0>
 8010262:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8010266:	aa07      	add	r2, sp, #28
 8010268:	9205      	str	r2, [sp, #20]
 801026a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 801026e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010272:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010276:	f8cd a01c 	str.w	sl, [sp, #28]
 801027a:	4639      	mov	r1, r7
 801027c:	e899 000c 	ldmia.w	r9, {r2, r3}
 8010280:	4630      	mov	r0, r6
 8010282:	f7ff ff19 	bl	80100b8 <rcl_node_resolve_name>
 8010286:	4607      	mov	r7, r0
 8010288:	2800      	cmp	r0, #0
 801028a:	d14f      	bne.n	801032c <rcl_publisher_init+0x118>
 801028c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 801028e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8010290:	20c8      	movs	r0, #200	@ 0xc8
 8010292:	4798      	blx	r3
 8010294:	6020      	str	r0, [r4, #0]
 8010296:	2800      	cmp	r0, #0
 8010298:	d04e      	beq.n	8010338 <rcl_publisher_init+0x124>
 801029a:	4630      	mov	r0, r6
 801029c:	f7ff feda 	bl	8010054 <rcl_node_get_rmw_handle>
 80102a0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80102a4:	9300      	str	r3, [sp, #0]
 80102a6:	9a07      	ldr	r2, [sp, #28]
 80102a8:	6827      	ldr	r7, [r4, #0]
 80102aa:	462b      	mov	r3, r5
 80102ac:	4641      	mov	r1, r8
 80102ae:	f002 fb15 	bl	80128dc <rmw_create_publisher>
 80102b2:	6823      	ldr	r3, [r4, #0]
 80102b4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 80102b8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80102bc:	b370      	cbz	r0, 801031c <rcl_publisher_init+0x108>
 80102be:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80102c2:	f002 fbe9 	bl	8012a98 <rmw_publisher_get_actual_qos>
 80102c6:	6823      	ldr	r3, [r4, #0]
 80102c8:	4607      	mov	r7, r0
 80102ca:	b9d0      	cbnz	r0, 8010302 <rcl_publisher_init+0xee>
 80102cc:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 80102d0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80102d4:	4629      	mov	r1, r5
 80102d6:	2270      	movs	r2, #112	@ 0x70
 80102d8:	4618      	mov	r0, r3
 80102da:	f00d faea 	bl	801d8b2 <memcpy>
 80102de:	6832      	ldr	r2, [r6, #0]
 80102e0:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 80102e4:	9807      	ldr	r0, [sp, #28]
 80102e6:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80102e8:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80102ea:	4798      	blx	r3
 80102ec:	4638      	mov	r0, r7
 80102ee:	b008      	add	sp, #32
 80102f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102f4:	270b      	movs	r7, #11
 80102f6:	4638      	mov	r0, r7
 80102f8:	b008      	add	sp, #32
 80102fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102fe:	27c8      	movs	r7, #200	@ 0xc8
 8010300:	e7a1      	b.n	8010246 <rcl_publisher_init+0x32>
 8010302:	b18b      	cbz	r3, 8010328 <rcl_publisher_init+0x114>
 8010304:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8010308:	b142      	cbz	r2, 801031c <rcl_publisher_init+0x108>
 801030a:	4630      	mov	r0, r6
 801030c:	f7ff fea2 	bl	8010054 <rcl_node_get_rmw_handle>
 8010310:	6823      	ldr	r3, [r4, #0]
 8010312:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8010316:	f002 fbcf 	bl	8012ab8 <rmw_destroy_publisher>
 801031a:	6823      	ldr	r3, [r4, #0]
 801031c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 801031e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8010320:	4618      	mov	r0, r3
 8010322:	4790      	blx	r2
 8010324:	2300      	movs	r3, #0
 8010326:	6023      	str	r3, [r4, #0]
 8010328:	2701      	movs	r7, #1
 801032a:	e7db      	b.n	80102e4 <rcl_publisher_init+0xd0>
 801032c:	2867      	cmp	r0, #103	@ 0x67
 801032e:	d0d9      	beq.n	80102e4 <rcl_publisher_init+0xd0>
 8010330:	2869      	cmp	r0, #105	@ 0x69
 8010332:	d003      	beq.n	801033c <rcl_publisher_init+0x128>
 8010334:	280a      	cmp	r0, #10
 8010336:	d1f7      	bne.n	8010328 <rcl_publisher_init+0x114>
 8010338:	270a      	movs	r7, #10
 801033a:	e7d3      	b.n	80102e4 <rcl_publisher_init+0xd0>
 801033c:	2767      	movs	r7, #103	@ 0x67
 801033e:	e7d1      	b.n	80102e4 <rcl_publisher_init+0xd0>

08010340 <rcl_publisher_get_default_options>:
 8010340:	b570      	push	{r4, r5, r6, lr}
 8010342:	4d14      	ldr	r5, [pc, #80]	@ (8010394 <rcl_publisher_get_default_options+0x54>)
 8010344:	4914      	ldr	r1, [pc, #80]	@ (8010398 <rcl_publisher_get_default_options+0x58>)
 8010346:	b088      	sub	sp, #32
 8010348:	4604      	mov	r4, r0
 801034a:	2250      	movs	r2, #80	@ 0x50
 801034c:	4628      	mov	r0, r5
 801034e:	f00d fab0 	bl	801d8b2 <memcpy>
 8010352:	a802      	add	r0, sp, #8
 8010354:	f001 f860 	bl	8011418 <rcutils_get_default_allocator>
 8010358:	f10d 0c08 	add.w	ip, sp, #8
 801035c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010360:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8010364:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010368:	466e      	mov	r6, sp
 801036a:	f8dc 3000 	ldr.w	r3, [ip]
 801036e:	f8ce 3000 	str.w	r3, [lr]
 8010372:	4630      	mov	r0, r6
 8010374:	f001 fc40 	bl	8011bf8 <rmw_get_default_publisher_options>
 8010378:	e896 0003 	ldmia.w	r6, {r0, r1}
 801037c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8010380:	e883 0003 	stmia.w	r3, {r0, r1}
 8010384:	2270      	movs	r2, #112	@ 0x70
 8010386:	4629      	mov	r1, r5
 8010388:	4620      	mov	r0, r4
 801038a:	f00d fa92 	bl	801d8b2 <memcpy>
 801038e:	4620      	mov	r0, r4
 8010390:	b008      	add	sp, #32
 8010392:	bd70      	pop	{r4, r5, r6, pc}
 8010394:	200073d0 	.word	0x200073d0
 8010398:	0801f400 	.word	0x0801f400

0801039c <rcl_publish>:
 801039c:	b1f8      	cbz	r0, 80103de <rcl_publish+0x42>
 801039e:	6803      	ldr	r3, [r0, #0]
 80103a0:	b570      	push	{r4, r5, r6, lr}
 80103a2:	4604      	mov	r4, r0
 80103a4:	b1b3      	cbz	r3, 80103d4 <rcl_publish+0x38>
 80103a6:	4616      	mov	r6, r2
 80103a8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80103ac:	b192      	cbz	r2, 80103d4 <rcl_publish+0x38>
 80103ae:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80103b2:	460d      	mov	r5, r1
 80103b4:	f008 fa76 	bl	80188a4 <rcl_context_is_valid>
 80103b8:	b160      	cbz	r0, 80103d4 <rcl_publish+0x38>
 80103ba:	6823      	ldr	r3, [r4, #0]
 80103bc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80103c0:	b140      	cbz	r0, 80103d4 <rcl_publish+0x38>
 80103c2:	b155      	cbz	r5, 80103da <rcl_publish+0x3e>
 80103c4:	4632      	mov	r2, r6
 80103c6:	4629      	mov	r1, r5
 80103c8:	f002 fa28 	bl	801281c <rmw_publish>
 80103cc:	3800      	subs	r0, #0
 80103ce:	bf18      	it	ne
 80103d0:	2001      	movne	r0, #1
 80103d2:	bd70      	pop	{r4, r5, r6, pc}
 80103d4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80103d8:	bd70      	pop	{r4, r5, r6, pc}
 80103da:	200b      	movs	r0, #11
 80103dc:	bd70      	pop	{r4, r5, r6, pc}
 80103de:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80103e2:	4770      	bx	lr

080103e4 <rcl_publisher_is_valid>:
 80103e4:	b1a0      	cbz	r0, 8010410 <rcl_publisher_is_valid+0x2c>
 80103e6:	6803      	ldr	r3, [r0, #0]
 80103e8:	b510      	push	{r4, lr}
 80103ea:	4604      	mov	r4, r0
 80103ec:	b173      	cbz	r3, 801040c <rcl_publisher_is_valid+0x28>
 80103ee:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80103f2:	b15a      	cbz	r2, 801040c <rcl_publisher_is_valid+0x28>
 80103f4:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80103f8:	f008 fa54 	bl	80188a4 <rcl_context_is_valid>
 80103fc:	b130      	cbz	r0, 801040c <rcl_publisher_is_valid+0x28>
 80103fe:	6823      	ldr	r3, [r4, #0]
 8010400:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8010404:	3800      	subs	r0, #0
 8010406:	bf18      	it	ne
 8010408:	2001      	movne	r0, #1
 801040a:	bd10      	pop	{r4, pc}
 801040c:	2000      	movs	r0, #0
 801040e:	bd10      	pop	{r4, pc}
 8010410:	2000      	movs	r0, #0
 8010412:	4770      	bx	lr

08010414 <rcl_publisher_is_valid_except_context>:
 8010414:	b130      	cbz	r0, 8010424 <rcl_publisher_is_valid_except_context+0x10>
 8010416:	6800      	ldr	r0, [r0, #0]
 8010418:	b120      	cbz	r0, 8010424 <rcl_publisher_is_valid_except_context+0x10>
 801041a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 801041e:	3800      	subs	r0, #0
 8010420:	bf18      	it	ne
 8010422:	2001      	movne	r0, #1
 8010424:	4770      	bx	lr
 8010426:	bf00      	nop

08010428 <rclc_client_init_default>:
 8010428:	b368      	cbz	r0, 8010486 <rclc_client_init_default+0x5e>
 801042a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801042e:	460d      	mov	r5, r1
 8010430:	b09e      	sub	sp, #120	@ 0x78
 8010432:	b321      	cbz	r1, 801047e <rclc_client_init_default+0x56>
 8010434:	4616      	mov	r6, r2
 8010436:	b312      	cbz	r2, 801047e <rclc_client_init_default+0x56>
 8010438:	461f      	mov	r7, r3
 801043a:	b303      	cbz	r3, 801047e <rclc_client_init_default+0x56>
 801043c:	4604      	mov	r4, r0
 801043e:	f7ff fa4b 	bl	800f8d8 <rcl_get_zero_initialized_client>
 8010442:	f10d 0810 	add.w	r8, sp, #16
 8010446:	6020      	str	r0, [r4, #0]
 8010448:	4640      	mov	r0, r8
 801044a:	f7ff fad9 	bl	800fa00 <rcl_client_get_default_options>
 801044e:	490f      	ldr	r1, [pc, #60]	@ (801048c <rclc_client_init_default+0x64>)
 8010450:	2250      	movs	r2, #80	@ 0x50
 8010452:	4640      	mov	r0, r8
 8010454:	f00d fa2d 	bl	801d8b2 <memcpy>
 8010458:	f8cd 8000 	str.w	r8, [sp]
 801045c:	463b      	mov	r3, r7
 801045e:	4632      	mov	r2, r6
 8010460:	4629      	mov	r1, r5
 8010462:	4620      	mov	r0, r4
 8010464:	f7ff fa3e 	bl	800f8e4 <rcl_client_init>
 8010468:	b910      	cbnz	r0, 8010470 <rclc_client_init_default+0x48>
 801046a:	b01e      	add	sp, #120	@ 0x78
 801046c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010470:	9003      	str	r0, [sp, #12]
 8010472:	f001 f8c1 	bl	80115f8 <rcutils_reset_error>
 8010476:	9803      	ldr	r0, [sp, #12]
 8010478:	b01e      	add	sp, #120	@ 0x78
 801047a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801047e:	200b      	movs	r0, #11
 8010480:	b01e      	add	sp, #120	@ 0x78
 8010482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010486:	200b      	movs	r0, #11
 8010488:	4770      	bx	lr
 801048a:	bf00      	nop
 801048c:	0801f450 	.word	0x0801f450

08010490 <_rclc_check_for_new_data>:
 8010490:	2800      	cmp	r0, #0
 8010492:	d046      	beq.n	8010522 <_rclc_check_for_new_data+0x92>
 8010494:	b510      	push	{r4, lr}
 8010496:	7802      	ldrb	r2, [r0, #0]
 8010498:	b084      	sub	sp, #16
 801049a:	4603      	mov	r3, r0
 801049c:	2a0a      	cmp	r2, #10
 801049e:	d842      	bhi.n	8010526 <_rclc_check_for_new_data+0x96>
 80104a0:	e8df f002 	tbb	[pc, r2]
 80104a4:	14181212 	.word	0x14181212
 80104a8:	06060614 	.word	0x06060614
 80104ac:	2e1a      	.short	0x2e1a
 80104ae:	16          	.byte	0x16
 80104af:	00          	.byte	0x00
 80104b0:	6a0a      	ldr	r2, [r1, #32]
 80104b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80104b4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80104b8:	2000      	movs	r0, #0
 80104ba:	1a12      	subs	r2, r2, r0
 80104bc:	bf18      	it	ne
 80104be:	2201      	movne	r2, #1
 80104c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80104c4:	b004      	add	sp, #16
 80104c6:	bd10      	pop	{r4, pc}
 80104c8:	680a      	ldr	r2, [r1, #0]
 80104ca:	e7f2      	b.n	80104b2 <_rclc_check_for_new_data+0x22>
 80104cc:	698a      	ldr	r2, [r1, #24]
 80104ce:	e7f0      	b.n	80104b2 <_rclc_check_for_new_data+0x22>
 80104d0:	688a      	ldr	r2, [r1, #8]
 80104d2:	e7ee      	b.n	80104b2 <_rclc_check_for_new_data+0x22>
 80104d4:	690a      	ldr	r2, [r1, #16]
 80104d6:	e7ec      	b.n	80104b2 <_rclc_check_for_new_data+0x22>
 80104d8:	685c      	ldr	r4, [r3, #4]
 80104da:	4608      	mov	r0, r1
 80104dc:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 80104e0:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 80104e4:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 80104e8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80104ec:	9300      	str	r3, [sp, #0]
 80104ee:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 80104f2:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 80104f6:	f104 0110 	add.w	r1, r4, #16
 80104fa:	f00a fca9 	bl	801ae50 <rcl_action_client_wait_set_get_entities_ready>
 80104fe:	e7e1      	b.n	80104c4 <_rclc_check_for_new_data+0x34>
 8010500:	685c      	ldr	r4, [r3, #4]
 8010502:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 8010506:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 801050a:	e9cd 3200 	strd	r3, r2, [sp]
 801050e:	4608      	mov	r0, r1
 8010510:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8010514:	f104 0220 	add.w	r2, r4, #32
 8010518:	f104 0110 	add.w	r1, r4, #16
 801051c:	f00a feb0 	bl	801b280 <rcl_action_server_wait_set_get_entities_ready>
 8010520:	e7d0      	b.n	80104c4 <_rclc_check_for_new_data+0x34>
 8010522:	200b      	movs	r0, #11
 8010524:	4770      	bx	lr
 8010526:	2001      	movs	r0, #1
 8010528:	e7cc      	b.n	80104c4 <_rclc_check_for_new_data+0x34>
 801052a:	bf00      	nop

0801052c <_rclc_take_new_data>:
 801052c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801052e:	b09b      	sub	sp, #108	@ 0x6c
 8010530:	2800      	cmp	r0, #0
 8010532:	f000 8088 	beq.w	8010646 <_rclc_take_new_data+0x11a>
 8010536:	7803      	ldrb	r3, [r0, #0]
 8010538:	4604      	mov	r4, r0
 801053a:	2b0a      	cmp	r3, #10
 801053c:	f200 8167 	bhi.w	801080e <_rclc_take_new_data+0x2e2>
 8010540:	e8df f003 	tbb	[pc, r3]
 8010544:	44152d2d 	.word	0x44152d2d
 8010548:	19191944 	.word	0x19191944
 801054c:	065a      	.short	0x065a
 801054e:	15          	.byte	0x15
 801054f:	00          	.byte	0x00
 8010550:	6840      	ldr	r0, [r0, #4]
 8010552:	f890 3020 	ldrb.w	r3, [r0, #32]
 8010556:	2b00      	cmp	r3, #0
 8010558:	f040 80b2 	bne.w	80106c0 <_rclc_take_new_data+0x194>
 801055c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8010560:	2b00      	cmp	r3, #0
 8010562:	f040 80e4 	bne.w	801072e <_rclc_take_new_data+0x202>
 8010566:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 801056a:	2b00      	cmp	r3, #0
 801056c:	d16f      	bne.n	801064e <_rclc_take_new_data+0x122>
 801056e:	2500      	movs	r5, #0
 8010570:	4628      	mov	r0, r5
 8010572:	b01b      	add	sp, #108	@ 0x6c
 8010574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010576:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8010578:	6a0b      	ldr	r3, [r1, #32]
 801057a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d0f5      	beq.n	801056e <_rclc_take_new_data+0x42>
 8010582:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8010586:	f104 0110 	add.w	r1, r4, #16
 801058a:	f008 ff3d 	bl	8019408 <rcl_take_request>
 801058e:	4605      	mov	r5, r0
 8010590:	2800      	cmp	r0, #0
 8010592:	d0ec      	beq.n	801056e <_rclc_take_new_data+0x42>
 8010594:	f240 2359 	movw	r3, #601	@ 0x259
 8010598:	4298      	cmp	r0, r3
 801059a:	d013      	beq.n	80105c4 <_rclc_take_new_data+0x98>
 801059c:	e029      	b.n	80105f2 <_rclc_take_new_data+0xc6>
 801059e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80105a0:	680b      	ldr	r3, [r1, #0]
 80105a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d0e1      	beq.n	801056e <_rclc_take_new_data+0x42>
 80105aa:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 80105ae:	2300      	movs	r3, #0
 80105b0:	aa0a      	add	r2, sp, #40	@ 0x28
 80105b2:	f008 ff8b 	bl	80194cc <rcl_take>
 80105b6:	4605      	mov	r5, r0
 80105b8:	2800      	cmp	r0, #0
 80105ba:	d0d9      	beq.n	8010570 <_rclc_take_new_data+0x44>
 80105bc:	f240 1391 	movw	r3, #401	@ 0x191
 80105c0:	4298      	cmp	r0, r3
 80105c2:	d116      	bne.n	80105f2 <_rclc_take_new_data+0xc6>
 80105c4:	2300      	movs	r3, #0
 80105c6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80105ca:	e7d1      	b.n	8010570 <_rclc_take_new_data+0x44>
 80105cc:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80105ce:	698b      	ldr	r3, [r1, #24]
 80105d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d0ca      	beq.n	801056e <_rclc_take_new_data+0x42>
 80105d8:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80105dc:	f104 0110 	add.w	r1, r4, #16
 80105e0:	f7ff fa6e 	bl	800fac0 <rcl_take_response>
 80105e4:	4605      	mov	r5, r0
 80105e6:	2800      	cmp	r0, #0
 80105e8:	d0c1      	beq.n	801056e <_rclc_take_new_data+0x42>
 80105ea:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80105ee:	4298      	cmp	r0, r3
 80105f0:	d0be      	beq.n	8010570 <_rclc_take_new_data+0x44>
 80105f2:	f001 f801 	bl	80115f8 <rcutils_reset_error>
 80105f6:	e7bb      	b.n	8010570 <_rclc_take_new_data+0x44>
 80105f8:	6840      	ldr	r0, [r0, #4]
 80105fa:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d17d      	bne.n	80106fe <_rclc_take_new_data+0x1d2>
 8010602:	69c3      	ldr	r3, [r0, #28]
 8010604:	b11b      	cbz	r3, 801060e <_rclc_take_new_data+0xe2>
 8010606:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801060a:	2b00      	cmp	r3, #0
 801060c:	d144      	bne.n	8010698 <_rclc_take_new_data+0x16c>
 801060e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010612:	2b00      	cmp	r3, #0
 8010614:	f040 80ac 	bne.w	8010770 <_rclc_take_new_data+0x244>
 8010618:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 801061c:	2b00      	cmp	r3, #0
 801061e:	d0a6      	beq.n	801056e <_rclc_take_new_data+0x42>
 8010620:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8010622:	a90a      	add	r1, sp, #40	@ 0x28
 8010624:	3010      	adds	r0, #16
 8010626:	f00a faeb 	bl	801ac00 <rcl_action_take_result_response>
 801062a:	4605      	mov	r5, r0
 801062c:	2800      	cmp	r0, #0
 801062e:	d1e0      	bne.n	80105f2 <_rclc_take_new_data+0xc6>
 8010630:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010634:	6860      	ldr	r0, [r4, #4]
 8010636:	f00a ff47 	bl	801b4c8 <rclc_action_find_handle_by_result_request_sequence_number>
 801063a:	2800      	cmp	r0, #0
 801063c:	d098      	beq.n	8010570 <_rclc_take_new_data+0x44>
 801063e:	2301      	movs	r3, #1
 8010640:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8010644:	e794      	b.n	8010570 <_rclc_take_new_data+0x44>
 8010646:	250b      	movs	r5, #11
 8010648:	4628      	mov	r0, r5
 801064a:	b01b      	add	sp, #108	@ 0x6c
 801064c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801064e:	ae04      	add	r6, sp, #16
 8010650:	aa0a      	add	r2, sp, #40	@ 0x28
 8010652:	3010      	adds	r0, #16
 8010654:	4631      	mov	r1, r6
 8010656:	f00a fd47 	bl	801b0e8 <rcl_action_take_cancel_request>
 801065a:	4605      	mov	r5, r0
 801065c:	2800      	cmp	r0, #0
 801065e:	d1c8      	bne.n	80105f2 <_rclc_take_new_data+0xc6>
 8010660:	6860      	ldr	r0, [r4, #4]
 8010662:	a90a      	add	r1, sp, #40	@ 0x28
 8010664:	f00a feee 	bl	801b444 <rclc_action_find_goal_handle_by_uuid>
 8010668:	4607      	mov	r7, r0
 801066a:	2800      	cmp	r0, #0
 801066c:	f000 80bb 	beq.w	80107e6 <_rclc_take_new_data+0x2ba>
 8010670:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8010674:	2101      	movs	r1, #1
 8010676:	f00a fe6f 	bl	801b358 <rcl_action_transition_goal_state>
 801067a:	2803      	cmp	r0, #3
 801067c:	4684      	mov	ip, r0
 801067e:	f040 80a7 	bne.w	80107d0 <_rclc_take_new_data+0x2a4>
 8010682:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010684:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8010688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801068a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801068e:	e884 0003 	stmia.w	r4, {r0, r1}
 8010692:	f887 c008 	strb.w	ip, [r7, #8]
 8010696:	e76b      	b.n	8010570 <_rclc_take_new_data+0x44>
 8010698:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801069a:	3010      	adds	r0, #16
 801069c:	f00a fb30 	bl	801ad00 <rcl_action_take_feedback>
 80106a0:	4605      	mov	r5, r0
 80106a2:	2800      	cmp	r0, #0
 80106a4:	d1a5      	bne.n	80105f2 <_rclc_take_new_data+0xc6>
 80106a6:	6860      	ldr	r0, [r4, #4]
 80106a8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80106aa:	f00a fecb 	bl	801b444 <rclc_action_find_goal_handle_by_uuid>
 80106ae:	4603      	mov	r3, r0
 80106b0:	2800      	cmp	r0, #0
 80106b2:	f000 80a3 	beq.w	80107fc <_rclc_take_new_data+0x2d0>
 80106b6:	2201      	movs	r2, #1
 80106b8:	6860      	ldr	r0, [r4, #4]
 80106ba:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80106be:	e7a6      	b.n	801060e <_rclc_take_new_data+0xe2>
 80106c0:	f00a fe9a 	bl	801b3f8 <rclc_action_take_goal_handle>
 80106c4:	4606      	mov	r6, r0
 80106c6:	6860      	ldr	r0, [r4, #4]
 80106c8:	2e00      	cmp	r6, #0
 80106ca:	f43f af47 	beq.w	801055c <_rclc_take_new_data+0x30>
 80106ce:	6070      	str	r0, [r6, #4]
 80106d0:	69f2      	ldr	r2, [r6, #28]
 80106d2:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 80106d6:	3010      	adds	r0, #16
 80106d8:	f00a fc4e 	bl	801af78 <rcl_action_take_goal_request>
 80106dc:	4605      	mov	r5, r0
 80106de:	2800      	cmp	r0, #0
 80106e0:	f040 808e 	bne.w	8010800 <_rclc_take_new_data+0x2d4>
 80106e4:	69f7      	ldr	r7, [r6, #28]
 80106e6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80106e8:	7235      	strb	r5, [r6, #8]
 80106ea:	f8c6 0009 	str.w	r0, [r6, #9]
 80106ee:	f8c6 100d 	str.w	r1, [r6, #13]
 80106f2:	6860      	ldr	r0, [r4, #4]
 80106f4:	f8c6 2011 	str.w	r2, [r6, #17]
 80106f8:	f8c6 3015 	str.w	r3, [r6, #21]
 80106fc:	e72e      	b.n	801055c <_rclc_take_new_data+0x30>
 80106fe:	aa04      	add	r2, sp, #16
 8010700:	a90a      	add	r1, sp, #40	@ 0x28
 8010702:	3010      	adds	r0, #16
 8010704:	f00a fa04 	bl	801ab10 <rcl_action_take_goal_response>
 8010708:	4605      	mov	r5, r0
 801070a:	2800      	cmp	r0, #0
 801070c:	f47f af71 	bne.w	80105f2 <_rclc_take_new_data+0xc6>
 8010710:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010714:	6860      	ldr	r0, [r4, #4]
 8010716:	f00a fec5 	bl	801b4a4 <rclc_action_find_handle_by_goal_request_sequence_number>
 801071a:	b130      	cbz	r0, 801072a <_rclc_take_new_data+0x1fe>
 801071c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8010720:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8010724:	2201      	movs	r2, #1
 8010726:	f880 2020 	strb.w	r2, [r0, #32]
 801072a:	6860      	ldr	r0, [r4, #4]
 801072c:	e769      	b.n	8010602 <_rclc_take_new_data+0xd6>
 801072e:	aa04      	add	r2, sp, #16
 8010730:	3010      	adds	r0, #16
 8010732:	a90a      	add	r1, sp, #40	@ 0x28
 8010734:	f00a fc98 	bl	801b068 <rcl_action_take_result_request>
 8010738:	4605      	mov	r5, r0
 801073a:	2800      	cmp	r0, #0
 801073c:	f47f af59 	bne.w	80105f2 <_rclc_take_new_data+0xc6>
 8010740:	6860      	ldr	r0, [r4, #4]
 8010742:	a904      	add	r1, sp, #16
 8010744:	f00a fe7e 	bl	801b444 <rclc_action_find_goal_handle_by_uuid>
 8010748:	4607      	mov	r7, r0
 801074a:	b160      	cbz	r0, 8010766 <_rclc_take_new_data+0x23a>
 801074c:	ad0a      	add	r5, sp, #40	@ 0x28
 801074e:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8010752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010754:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010756:	e895 0003 	ldmia.w	r5, {r0, r1}
 801075a:	f04f 0c02 	mov.w	ip, #2
 801075e:	e886 0003 	stmia.w	r6, {r0, r1}
 8010762:	f887 c008 	strb.w	ip, [r7, #8]
 8010766:	6860      	ldr	r0, [r4, #4]
 8010768:	2300      	movs	r3, #0
 801076a:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 801076e:	e6fa      	b.n	8010566 <_rclc_take_new_data+0x3a>
 8010770:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8010774:	a90a      	add	r1, sp, #40	@ 0x28
 8010776:	3010      	adds	r0, #16
 8010778:	f00a fa82 	bl	801ac80 <rcl_action_take_cancel_response>
 801077c:	4605      	mov	r5, r0
 801077e:	2800      	cmp	r0, #0
 8010780:	f47f af37 	bne.w	80105f2 <_rclc_take_new_data+0xc6>
 8010784:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010788:	6860      	ldr	r0, [r4, #4]
 801078a:	f00a feaf 	bl	801b4ec <rclc_action_find_handle_by_cancel_request_sequence_number>
 801078e:	4606      	mov	r6, r0
 8010790:	6860      	ldr	r0, [r4, #4]
 8010792:	2e00      	cmp	r6, #0
 8010794:	f43f af40 	beq.w	8010618 <_rclc_take_new_data+0xec>
 8010798:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801079a:	2701      	movs	r7, #1
 801079c:	84b7      	strh	r7, [r6, #36]	@ 0x24
 801079e:	2b00      	cmp	r3, #0
 80107a0:	f43f af3a 	beq.w	8010618 <_rclc_take_new_data+0xec>
 80107a4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80107a6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80107aa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80107ae:	f00a fe49 	bl	801b444 <rclc_action_find_goal_handle_by_uuid>
 80107b2:	b138      	cbz	r0, 80107c4 <_rclc_take_new_data+0x298>
 80107b4:	6860      	ldr	r0, [r4, #4]
 80107b6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80107b8:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 80107bc:	3501      	adds	r5, #1
 80107be:	42ab      	cmp	r3, r5
 80107c0:	d8f0      	bhi.n	80107a4 <_rclc_take_new_data+0x278>
 80107c2:	e729      	b.n	8010618 <_rclc_take_new_data+0xec>
 80107c4:	6860      	ldr	r0, [r4, #4]
 80107c6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80107c8:	3501      	adds	r5, #1
 80107ca:	42ab      	cmp	r3, r5
 80107cc:	d8ea      	bhi.n	80107a4 <_rclc_take_new_data+0x278>
 80107ce:	e723      	b.n	8010618 <_rclc_take_new_data+0xec>
 80107d0:	ab06      	add	r3, sp, #24
 80107d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80107d4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80107d8:	2103      	movs	r1, #3
 80107da:	e896 000c 	ldmia.w	r6, {r2, r3}
 80107de:	6860      	ldr	r0, [r4, #4]
 80107e0:	f00a fefa 	bl	801b5d8 <rclc_action_server_goal_cancel_reject>
 80107e4:	e6c4      	b.n	8010570 <_rclc_take_new_data+0x44>
 80107e6:	ab06      	add	r3, sp, #24
 80107e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80107ea:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80107ee:	2102      	movs	r1, #2
 80107f0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80107f4:	6860      	ldr	r0, [r4, #4]
 80107f6:	f00a feef 	bl	801b5d8 <rclc_action_server_goal_cancel_reject>
 80107fa:	e6b9      	b.n	8010570 <_rclc_take_new_data+0x44>
 80107fc:	6860      	ldr	r0, [r4, #4]
 80107fe:	e706      	b.n	801060e <_rclc_take_new_data+0xe2>
 8010800:	6860      	ldr	r0, [r4, #4]
 8010802:	4631      	mov	r1, r6
 8010804:	f00a fe08 	bl	801b418 <rclc_action_remove_used_goal_handle>
 8010808:	f000 fef6 	bl	80115f8 <rcutils_reset_error>
 801080c:	e6b0      	b.n	8010570 <_rclc_take_new_data+0x44>
 801080e:	2501      	movs	r5, #1
 8010810:	e6ae      	b.n	8010570 <_rclc_take_new_data+0x44>
 8010812:	bf00      	nop

08010814 <_rclc_execute.part.0>:
 8010814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010816:	7803      	ldrb	r3, [r0, #0]
 8010818:	b087      	sub	sp, #28
 801081a:	4604      	mov	r4, r0
 801081c:	2b0a      	cmp	r3, #10
 801081e:	f200 8136 	bhi.w	8010a8e <_rclc_execute.part.0+0x27a>
 8010822:	e8df f003 	tbb	[pc, r3]
 8010826:	435e      	.short	0x435e
 8010828:	06a1664f 	.word	0x06a1664f
 801082c:	6c1e0606 	.word	0x6c1e0606
 8010830:	59          	.byte	0x59
 8010831:	00          	.byte	0x00
 8010832:	2b06      	cmp	r3, #6
 8010834:	f000 8122 	beq.w	8010a7c <_rclc_execute.part.0+0x268>
 8010838:	2b07      	cmp	r3, #7
 801083a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801083c:	f040 8118 	bne.w	8010a70 <_rclc_execute.part.0+0x25c>
 8010840:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8010844:	6880      	ldr	r0, [r0, #8]
 8010846:	4798      	blx	r3
 8010848:	f104 0110 	add.w	r1, r4, #16
 801084c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801084e:	6860      	ldr	r0, [r4, #4]
 8010850:	f008 fe1a 	bl	8019488 <rcl_send_response>
 8010854:	2800      	cmp	r0, #0
 8010856:	d033      	beq.n	80108c0 <_rclc_execute.part.0+0xac>
 8010858:	9005      	str	r0, [sp, #20]
 801085a:	f000 fecd 	bl	80115f8 <rcutils_reset_error>
 801085e:	9805      	ldr	r0, [sp, #20]
 8010860:	e02e      	b.n	80108c0 <_rclc_execute.part.0+0xac>
 8010862:	6840      	ldr	r0, [r0, #4]
 8010864:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8010868:	2b00      	cmp	r3, #0
 801086a:	f000 8086 	beq.w	801097a <_rclc_execute.part.0+0x166>
 801086e:	2600      	movs	r6, #0
 8010870:	2701      	movs	r7, #1
 8010872:	e004      	b.n	801087e <_rclc_execute.part.0+0x6a>
 8010874:	f00a fd9a 	bl	801b3ac <rclc_action_send_result_request>
 8010878:	b998      	cbnz	r0, 80108a2 <_rclc_execute.part.0+0x8e>
 801087a:	722f      	strb	r7, [r5, #8]
 801087c:	6860      	ldr	r0, [r4, #4]
 801087e:	f00a fe47 	bl	801b510 <rclc_action_find_first_handle_with_goal_response>
 8010882:	4605      	mov	r5, r0
 8010884:	2800      	cmp	r0, #0
 8010886:	d077      	beq.n	8010978 <_rclc_execute.part.0+0x164>
 8010888:	6863      	ldr	r3, [r4, #4]
 801088a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801088c:	699b      	ldr	r3, [r3, #24]
 801088e:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8010892:	f885 6020 	strb.w	r6, [r5, #32]
 8010896:	4798      	blx	r3
 8010898:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 801089c:	4628      	mov	r0, r5
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d1e8      	bne.n	8010874 <_rclc_execute.part.0+0x60>
 80108a2:	6860      	ldr	r0, [r4, #4]
 80108a4:	4629      	mov	r1, r5
 80108a6:	f00a fdb7 	bl	801b418 <rclc_action_remove_used_goal_handle>
 80108aa:	e7e7      	b.n	801087c <_rclc_execute.part.0+0x68>
 80108ac:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 80108b0:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 80108b4:	2d00      	cmp	r5, #0
 80108b6:	f000 80c9 	beq.w	8010a4c <_rclc_execute.part.0+0x238>
 80108ba:	6880      	ldr	r0, [r0, #8]
 80108bc:	4798      	blx	r3
 80108be:	2000      	movs	r0, #0
 80108c0:	b007      	add	sp, #28
 80108c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108c4:	6840      	ldr	r0, [r0, #4]
 80108c6:	f009 f911 	bl	8019aec <rcl_timer_call>
 80108ca:	f240 3321 	movw	r3, #801	@ 0x321
 80108ce:	4298      	cmp	r0, r3
 80108d0:	d004      	beq.n	80108dc <_rclc_execute.part.0+0xc8>
 80108d2:	2800      	cmp	r0, #0
 80108d4:	d0f4      	beq.n	80108c0 <_rclc_execute.part.0+0xac>
 80108d6:	e7bf      	b.n	8010858 <_rclc_execute.part.0+0x44>
 80108d8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80108da:	4798      	blx	r3
 80108dc:	2000      	movs	r0, #0
 80108de:	b007      	add	sp, #28
 80108e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108e2:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 80108e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80108e8:	b925      	cbnz	r5, 80108f4 <_rclc_execute.part.0+0xe0>
 80108ea:	4628      	mov	r0, r5
 80108ec:	4798      	blx	r3
 80108ee:	4628      	mov	r0, r5
 80108f0:	e7e6      	b.n	80108c0 <_rclc_execute.part.0+0xac>
 80108f2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80108f4:	68a0      	ldr	r0, [r4, #8]
 80108f6:	4798      	blx	r3
 80108f8:	2000      	movs	r0, #0
 80108fa:	b007      	add	sp, #28
 80108fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108fe:	6840      	ldr	r0, [r0, #4]
 8010900:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8010904:	bb3b      	cbnz	r3, 8010956 <_rclc_execute.part.0+0x142>
 8010906:	f890 3020 	ldrb.w	r3, [r0, #32]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d07b      	beq.n	8010a06 <_rclc_execute.part.0+0x1f2>
 801090e:	f640 0634 	movw	r6, #2100	@ 0x834
 8010912:	2701      	movs	r7, #1
 8010914:	e007      	b.n	8010926 <_rclc_execute.part.0+0x112>
 8010916:	4628      	mov	r0, r5
 8010918:	f00a fe12 	bl	801b540 <rclc_action_server_response_goal_request>
 801091c:	6860      	ldr	r0, [r4, #4]
 801091e:	4629      	mov	r1, r5
 8010920:	f00a fd7a 	bl	801b418 <rclc_action_remove_used_goal_handle>
 8010924:	6860      	ldr	r0, [r4, #4]
 8010926:	2100      	movs	r1, #0
 8010928:	f00a fda4 	bl	801b474 <rclc_action_find_first_handle_by_status>
 801092c:	4605      	mov	r5, r0
 801092e:	2800      	cmp	r0, #0
 8010930:	d066      	beq.n	8010a00 <_rclc_execute.part.0+0x1ec>
 8010932:	6863      	ldr	r3, [r4, #4]
 8010934:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010936:	699b      	ldr	r3, [r3, #24]
 8010938:	4798      	blx	r3
 801093a:	42b0      	cmp	r0, r6
 801093c:	f04f 0100 	mov.w	r1, #0
 8010940:	d1e9      	bne.n	8010916 <_rclc_execute.part.0+0x102>
 8010942:	2101      	movs	r1, #1
 8010944:	4628      	mov	r0, r5
 8010946:	f00a fdfb 	bl	801b540 <rclc_action_server_response_goal_request>
 801094a:	722f      	strb	r7, [r5, #8]
 801094c:	e7ea      	b.n	8010924 <_rclc_execute.part.0+0x110>
 801094e:	6848      	ldr	r0, [r1, #4]
 8010950:	f00a fd62 	bl	801b418 <rclc_action_remove_used_goal_handle>
 8010954:	6860      	ldr	r0, [r4, #4]
 8010956:	f00a fd99 	bl	801b48c <rclc_action_find_first_terminated_handle>
 801095a:	4601      	mov	r1, r0
 801095c:	2800      	cmp	r0, #0
 801095e:	d1f6      	bne.n	801094e <_rclc_execute.part.0+0x13a>
 8010960:	6860      	ldr	r0, [r4, #4]
 8010962:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8010966:	e7ce      	b.n	8010906 <_rclc_execute.part.0+0xf2>
 8010968:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801096a:	6880      	ldr	r0, [r0, #8]
 801096c:	f104 0110 	add.w	r1, r4, #16
 8010970:	4798      	blx	r3
 8010972:	2000      	movs	r0, #0
 8010974:	b007      	add	sp, #28
 8010976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010978:	6860      	ldr	r0, [r4, #4]
 801097a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801097e:	b18b      	cbz	r3, 80109a4 <_rclc_execute.part.0+0x190>
 8010980:	68c5      	ldr	r5, [r0, #12]
 8010982:	b32d      	cbz	r5, 80109d0 <_rclc_execute.part.0+0x1bc>
 8010984:	2600      	movs	r6, #0
 8010986:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 801098a:	b143      	cbz	r3, 801099e <_rclc_execute.part.0+0x18a>
 801098c:	69c3      	ldr	r3, [r0, #28]
 801098e:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8010992:	b123      	cbz	r3, 801099e <_rclc_execute.part.0+0x18a>
 8010994:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010996:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010998:	4628      	mov	r0, r5
 801099a:	4798      	blx	r3
 801099c:	6860      	ldr	r0, [r4, #4]
 801099e:	682d      	ldr	r5, [r5, #0]
 80109a0:	2d00      	cmp	r5, #0
 80109a2:	d1f0      	bne.n	8010986 <_rclc_execute.part.0+0x172>
 80109a4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80109a8:	b193      	cbz	r3, 80109d0 <_rclc_execute.part.0+0x1bc>
 80109aa:	68c5      	ldr	r5, [r0, #12]
 80109ac:	b185      	cbz	r5, 80109d0 <_rclc_execute.part.0+0x1bc>
 80109ae:	2600      	movs	r6, #0
 80109b0:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 80109b4:	b14b      	cbz	r3, 80109ca <_rclc_execute.part.0+0x1b6>
 80109b6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80109b8:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 80109bc:	b12b      	cbz	r3, 80109ca <_rclc_execute.part.0+0x1b6>
 80109be:	4628      	mov	r0, r5
 80109c0:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80109c4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80109c6:	4798      	blx	r3
 80109c8:	6860      	ldr	r0, [r4, #4]
 80109ca:	682d      	ldr	r5, [r5, #0]
 80109cc:	2d00      	cmp	r5, #0
 80109ce:	d1ef      	bne.n	80109b0 <_rclc_execute.part.0+0x19c>
 80109d0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d081      	beq.n	80108dc <_rclc_execute.part.0+0xc8>
 80109d8:	2700      	movs	r7, #0
 80109da:	e00b      	b.n	80109f4 <_rclc_execute.part.0+0x1e0>
 80109dc:	6863      	ldr	r3, [r4, #4]
 80109de:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80109e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80109e2:	6a1e      	ldr	r6, [r3, #32]
 80109e4:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 80109e8:	47b0      	blx	r6
 80109ea:	6860      	ldr	r0, [r4, #4]
 80109ec:	4629      	mov	r1, r5
 80109ee:	f00a fd13 	bl	801b418 <rclc_action_remove_used_goal_handle>
 80109f2:	6860      	ldr	r0, [r4, #4]
 80109f4:	f00a fd98 	bl	801b528 <rclc_action_find_first_handle_with_result_response>
 80109f8:	4605      	mov	r5, r0
 80109fa:	2800      	cmp	r0, #0
 80109fc:	d1ee      	bne.n	80109dc <_rclc_execute.part.0+0x1c8>
 80109fe:	e76d      	b.n	80108dc <_rclc_execute.part.0+0xc8>
 8010a00:	6860      	ldr	r0, [r4, #4]
 8010a02:	f880 5020 	strb.w	r5, [r0, #32]
 8010a06:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	f43f af66 	beq.w	80108dc <_rclc_execute.part.0+0xc8>
 8010a10:	68c5      	ldr	r5, [r0, #12]
 8010a12:	b1b5      	cbz	r5, 8010a42 <_rclc_execute.part.0+0x22e>
 8010a14:	2602      	movs	r6, #2
 8010a16:	e001      	b.n	8010a1c <_rclc_execute.part.0+0x208>
 8010a18:	682d      	ldr	r5, [r5, #0]
 8010a1a:	b195      	cbz	r5, 8010a42 <_rclc_execute.part.0+0x22e>
 8010a1c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8010a20:	2b03      	cmp	r3, #3
 8010a22:	d1f9      	bne.n	8010a18 <_rclc_execute.part.0+0x204>
 8010a24:	69c3      	ldr	r3, [r0, #28]
 8010a26:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010a28:	4628      	mov	r0, r5
 8010a2a:	4798      	blx	r3
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8010a32:	4628      	mov	r0, r5
 8010a34:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8010a38:	b163      	cbz	r3, 8010a54 <_rclc_execute.part.0+0x240>
 8010a3a:	f00a fda1 	bl	801b580 <rclc_action_server_goal_cancel_accept>
 8010a3e:	6860      	ldr	r0, [r4, #4]
 8010a40:	e7ea      	b.n	8010a18 <_rclc_execute.part.0+0x204>
 8010a42:	2300      	movs	r3, #0
 8010a44:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8010a48:	4618      	mov	r0, r3
 8010a4a:	e739      	b.n	80108c0 <_rclc_execute.part.0+0xac>
 8010a4c:	4628      	mov	r0, r5
 8010a4e:	4798      	blx	r3
 8010a50:	4628      	mov	r0, r5
 8010a52:	e735      	b.n	80108c0 <_rclc_execute.part.0+0xac>
 8010a54:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8010a56:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010a5a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8010a5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a62:	6860      	ldr	r0, [r4, #4]
 8010a64:	2101      	movs	r1, #1
 8010a66:	f00a fdb7 	bl	801b5d8 <rclc_action_server_goal_cancel_reject>
 8010a6a:	722e      	strb	r6, [r5, #8]
 8010a6c:	6860      	ldr	r0, [r4, #4]
 8010a6e:	e7d3      	b.n	8010a18 <_rclc_execute.part.0+0x204>
 8010a70:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010a72:	6880      	ldr	r0, [r0, #8]
 8010a74:	4798      	blx	r3
 8010a76:	f104 0110 	add.w	r1, r4, #16
 8010a7a:	e6e7      	b.n	801084c <_rclc_execute.part.0+0x38>
 8010a7c:	f100 0110 	add.w	r1, r0, #16
 8010a80:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010a82:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8010a84:	6880      	ldr	r0, [r0, #8]
 8010a86:	9105      	str	r1, [sp, #20]
 8010a88:	4798      	blx	r3
 8010a8a:	9905      	ldr	r1, [sp, #20]
 8010a8c:	e6de      	b.n	801084c <_rclc_execute.part.0+0x38>
 8010a8e:	2001      	movs	r0, #1
 8010a90:	e716      	b.n	80108c0 <_rclc_execute.part.0+0xac>
 8010a92:	bf00      	nop

08010a94 <rclc_executor_trigger_any>:
 8010a94:	2800      	cmp	r0, #0
 8010a96:	d03f      	beq.n	8010b18 <rclc_executor_trigger_any+0x84>
 8010a98:	2900      	cmp	r1, #0
 8010a9a:	d03e      	beq.n	8010b1a <rclc_executor_trigger_any+0x86>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	d037      	beq.n	8010b18 <rclc_executor_trigger_any+0x84>
 8010aa8:	b430      	push	{r4, r5}
 8010aaa:	f893 c000 	ldrb.w	ip, [r3]
 8010aae:	f1bc 0f08 	cmp.w	ip, #8
 8010ab2:	d11e      	bne.n	8010af2 <rclc_executor_trigger_any+0x5e>
 8010ab4:	685c      	ldr	r4, [r3, #4]
 8010ab6:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8010ab8:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8010abc:	d105      	bne.n	8010aca <rclc_executor_trigger_any+0x36>
 8010abe:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8010ac2:	b910      	cbnz	r0, 8010aca <rclc_executor_trigger_any+0x36>
 8010ac4:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8010ac8:	b128      	cbz	r0, 8010ad6 <rclc_executor_trigger_any+0x42>
 8010aca:	bc30      	pop	{r4, r5}
 8010acc:	4770      	bx	lr
 8010ace:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8010ad2:	2800      	cmp	r0, #0
 8010ad4:	d1f9      	bne.n	8010aca <rclc_executor_trigger_any+0x36>
 8010ad6:	3201      	adds	r2, #1
 8010ad8:	4291      	cmp	r1, r2
 8010ada:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8010ade:	d018      	beq.n	8010b12 <rclc_executor_trigger_any+0x7e>
 8010ae0:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8010ae4:	2800      	cmp	r0, #0
 8010ae6:	d0f0      	beq.n	8010aca <rclc_executor_trigger_any+0x36>
 8010ae8:	f893 c000 	ldrb.w	ip, [r3]
 8010aec:	f1bc 0f08 	cmp.w	ip, #8
 8010af0:	d0e0      	beq.n	8010ab4 <rclc_executor_trigger_any+0x20>
 8010af2:	f1bc 0f09 	cmp.w	ip, #9
 8010af6:	d1ea      	bne.n	8010ace <rclc_executor_trigger_any+0x3a>
 8010af8:	685c      	ldr	r4, [r3, #4]
 8010afa:	6a25      	ldr	r5, [r4, #32]
 8010afc:	2d00      	cmp	r5, #0
 8010afe:	d1e4      	bne.n	8010aca <rclc_executor_trigger_any+0x36>
 8010b00:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8010b04:	2800      	cmp	r0, #0
 8010b06:	d1e0      	bne.n	8010aca <rclc_executor_trigger_any+0x36>
 8010b08:	3201      	adds	r2, #1
 8010b0a:	4291      	cmp	r1, r2
 8010b0c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8010b10:	d1e6      	bne.n	8010ae0 <rclc_executor_trigger_any+0x4c>
 8010b12:	2000      	movs	r0, #0
 8010b14:	bc30      	pop	{r4, r5}
 8010b16:	4770      	bx	lr
 8010b18:	4770      	bx	lr
 8010b1a:	4608      	mov	r0, r1
 8010b1c:	4770      	bx	lr
 8010b1e:	bf00      	nop

08010b20 <rclc_executor_get_zero_initialized_executor>:
 8010b20:	b510      	push	{r4, lr}
 8010b22:	4903      	ldr	r1, [pc, #12]	@ (8010b30 <rclc_executor_get_zero_initialized_executor+0x10>)
 8010b24:	4604      	mov	r4, r0
 8010b26:	2288      	movs	r2, #136	@ 0x88
 8010b28:	f00c fec3 	bl	801d8b2 <memcpy>
 8010b2c:	4620      	mov	r0, r4
 8010b2e:	bd10      	pop	{r4, pc}
 8010b30:	0801f4a0 	.word	0x0801f4a0
 8010b34:	00000000 	.word	0x00000000

08010b38 <rclc_executor_init>:
 8010b38:	2800      	cmp	r0, #0
 8010b3a:	d05f      	beq.n	8010bfc <rclc_executor_init+0xc4>
 8010b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b40:	460c      	mov	r4, r1
 8010b42:	b0b0      	sub	sp, #192	@ 0xc0
 8010b44:	2900      	cmp	r1, #0
 8010b46:	d051      	beq.n	8010bec <rclc_executor_init+0xb4>
 8010b48:	4605      	mov	r5, r0
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	4616      	mov	r6, r2
 8010b4e:	461f      	mov	r7, r3
 8010b50:	f000 fc70 	bl	8011434 <rcutils_allocator_is_valid>
 8010b54:	2800      	cmp	r0, #0
 8010b56:	d049      	beq.n	8010bec <rclc_executor_init+0xb4>
 8010b58:	2e00      	cmp	r6, #0
 8010b5a:	d047      	beq.n	8010bec <rclc_executor_init+0xb4>
 8010b5c:	492c      	ldr	r1, [pc, #176]	@ (8010c10 <rclc_executor_init+0xd8>)
 8010b5e:	2288      	movs	r2, #136	@ 0x88
 8010b60:	a80e      	add	r0, sp, #56	@ 0x38
 8010b62:	f00c fea6 	bl	801d8b2 <memcpy>
 8010b66:	a90e      	add	r1, sp, #56	@ 0x38
 8010b68:	2288      	movs	r2, #136	@ 0x88
 8010b6a:	4628      	mov	r0, r5
 8010b6c:	f00c fea1 	bl	801d8b2 <memcpy>
 8010b70:	602c      	str	r4, [r5, #0]
 8010b72:	4668      	mov	r0, sp
 8010b74:	60ae      	str	r6, [r5, #8]
 8010b76:	466c      	mov	r4, sp
 8010b78:	f009 f9fc 	bl	8019f74 <rcl_get_zero_initialized_wait_set>
 8010b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b7e:	f105 0c14 	add.w	ip, r5, #20
 8010b82:	f8d7 8000 	ldr.w	r8, [r7]
 8010b86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b96:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8010c08 <rclc_executor_init+0xd0>
 8010b9a:	6823      	ldr	r3, [r4, #0]
 8010b9c:	f8cc 3000 	str.w	r3, [ip]
 8010ba0:	6939      	ldr	r1, [r7, #16]
 8010ba2:	612f      	str	r7, [r5, #16]
 8010ba4:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8010ba8:	01b0      	lsls	r0, r6, #6
 8010baa:	47c0      	blx	r8
 8010bac:	6068      	str	r0, [r5, #4]
 8010bae:	b338      	cbz	r0, 8010c00 <rclc_executor_init+0xc8>
 8010bb0:	2400      	movs	r4, #0
 8010bb2:	e000      	b.n	8010bb6 <rclc_executor_init+0x7e>
 8010bb4:	6868      	ldr	r0, [r5, #4]
 8010bb6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8010bba:	4631      	mov	r1, r6
 8010bbc:	3401      	adds	r4, #1
 8010bbe:	f000 faa3 	bl	8011108 <rclc_executor_handle_init>
 8010bc2:	42a6      	cmp	r6, r4
 8010bc4:	d1f6      	bne.n	8010bb4 <rclc_executor_init+0x7c>
 8010bc6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8010bca:	f000 fa93 	bl	80110f4 <rclc_executor_handle_counters_zero_init>
 8010bce:	4a11      	ldr	r2, [pc, #68]	@ (8010c14 <rclc_executor_init+0xdc>)
 8010bd0:	686b      	ldr	r3, [r5, #4]
 8010bd2:	2000      	movs	r0, #0
 8010bd4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 8010bd8:	b163      	cbz	r3, 8010bf4 <rclc_executor_init+0xbc>
 8010bda:	692b      	ldr	r3, [r5, #16]
 8010bdc:	b153      	cbz	r3, 8010bf4 <rclc_executor_init+0xbc>
 8010bde:	68ab      	ldr	r3, [r5, #8]
 8010be0:	b143      	cbz	r3, 8010bf4 <rclc_executor_init+0xbc>
 8010be2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 8010be6:	b030      	add	sp, #192	@ 0xc0
 8010be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bec:	200b      	movs	r0, #11
 8010bee:	b030      	add	sp, #192	@ 0xc0
 8010bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	b030      	add	sp, #192	@ 0xc0
 8010bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bfc:	200b      	movs	r0, #11
 8010bfe:	4770      	bx	lr
 8010c00:	200a      	movs	r0, #10
 8010c02:	e7f4      	b.n	8010bee <rclc_executor_init+0xb6>
 8010c04:	f3af 8000 	nop.w
 8010c08:	3b9aca00 	.word	0x3b9aca00
 8010c0c:	00000000 	.word	0x00000000
 8010c10:	0801f4a0 	.word	0x0801f4a0
 8010c14:	08010a95 	.word	0x08010a95

08010c18 <rclc_executor_add_timer>:
 8010c18:	b300      	cbz	r0, 8010c5c <rclc_executor_add_timer+0x44>
 8010c1a:	b1f9      	cbz	r1, 8010c5c <rclc_executor_add_timer+0x44>
 8010c1c:	b538      	push	{r3, r4, r5, lr}
 8010c1e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8010c22:	4293      	cmp	r3, r2
 8010c24:	4604      	mov	r4, r0
 8010c26:	d301      	bcc.n	8010c2c <rclc_executor_add_timer+0x14>
 8010c28:	2001      	movs	r0, #1
 8010c2a:	bd38      	pop	{r3, r4, r5, pc}
 8010c2c:	6840      	ldr	r0, [r0, #4]
 8010c2e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 8010c32:	019d      	lsls	r5, r3, #6
 8010c34:	6051      	str	r1, [r2, #4]
 8010c36:	2102      	movs	r1, #2
 8010c38:	5341      	strh	r1, [r0, r5]
 8010c3a:	3301      	adds	r3, #1
 8010c3c:	2000      	movs	r0, #0
 8010c3e:	2101      	movs	r1, #1
 8010c40:	f104 0514 	add.w	r5, r4, #20
 8010c44:	62d0      	str	r0, [r2, #44]	@ 0x2c
 8010c46:	8711      	strh	r1, [r2, #56]	@ 0x38
 8010c48:	4628      	mov	r0, r5
 8010c4a:	60e3      	str	r3, [r4, #12]
 8010c4c:	f009 f9a6 	bl	8019f9c <rcl_wait_set_is_valid>
 8010c50:	b930      	cbnz	r0, 8010c60 <rclc_executor_add_timer+0x48>
 8010c52:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8010c54:	3301      	adds	r3, #1
 8010c56:	2000      	movs	r0, #0
 8010c58:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8010c5a:	bd38      	pop	{r3, r4, r5, pc}
 8010c5c:	200b      	movs	r0, #11
 8010c5e:	4770      	bx	lr
 8010c60:	4628      	mov	r0, r5
 8010c62:	f009 f9a1 	bl	8019fa8 <rcl_wait_set_fini>
 8010c66:	2800      	cmp	r0, #0
 8010c68:	d0f3      	beq.n	8010c52 <rclc_executor_add_timer+0x3a>
 8010c6a:	bd38      	pop	{r3, r4, r5, pc}

08010c6c <rclc_executor_add_service>:
 8010c6c:	b370      	cbz	r0, 8010ccc <rclc_executor_add_service+0x60>
 8010c6e:	b369      	cbz	r1, 8010ccc <rclc_executor_add_service+0x60>
 8010c70:	b362      	cbz	r2, 8010ccc <rclc_executor_add_service+0x60>
 8010c72:	b35b      	cbz	r3, 8010ccc <rclc_executor_add_service+0x60>
 8010c74:	b538      	push	{r3, r4, r5, lr}
 8010c76:	4604      	mov	r4, r0
 8010c78:	9804      	ldr	r0, [sp, #16]
 8010c7a:	b378      	cbz	r0, 8010cdc <rclc_executor_add_service+0x70>
 8010c7c:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 8010c80:	42a8      	cmp	r0, r5
 8010c82:	d301      	bcc.n	8010c88 <rclc_executor_add_service+0x1c>
 8010c84:	2001      	movs	r0, #1
 8010c86:	bd38      	pop	{r3, r4, r5, pc}
 8010c88:	6865      	ldr	r5, [r4, #4]
 8010c8a:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 8010c8e:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8010c92:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 8010c96:	9b04      	ldr	r3, [sp, #16]
 8010c98:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8010c9c:	2305      	movs	r3, #5
 8010c9e:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8010ca2:	3001      	adds	r0, #1
 8010ca4:	f825 300e 	strh.w	r3, [r5, lr]
 8010ca8:	2201      	movs	r2, #1
 8010caa:	2300      	movs	r3, #0
 8010cac:	f104 0514 	add.w	r5, r4, #20
 8010cb0:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 8010cb4:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 8010cb8:	60e0      	str	r0, [r4, #12]
 8010cba:	4628      	mov	r0, r5
 8010cbc:	f009 f96e 	bl	8019f9c <rcl_wait_set_is_valid>
 8010cc0:	b930      	cbnz	r0, 8010cd0 <rclc_executor_add_service+0x64>
 8010cc2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8010cc4:	3301      	adds	r3, #1
 8010cc6:	2000      	movs	r0, #0
 8010cc8:	6563      	str	r3, [r4, #84]	@ 0x54
 8010cca:	bd38      	pop	{r3, r4, r5, pc}
 8010ccc:	200b      	movs	r0, #11
 8010cce:	4770      	bx	lr
 8010cd0:	4628      	mov	r0, r5
 8010cd2:	f009 f969 	bl	8019fa8 <rcl_wait_set_fini>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	d0f3      	beq.n	8010cc2 <rclc_executor_add_service+0x56>
 8010cda:	e7d4      	b.n	8010c86 <rclc_executor_add_service+0x1a>
 8010cdc:	200b      	movs	r0, #11
 8010cde:	bd38      	pop	{r3, r4, r5, pc}

08010ce0 <rclc_executor_prepare>:
 8010ce0:	2800      	cmp	r0, #0
 8010ce2:	d044      	beq.n	8010d6e <rclc_executor_prepare+0x8e>
 8010ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ce6:	f100 0514 	add.w	r5, r0, #20
 8010cea:	b09b      	sub	sp, #108	@ 0x6c
 8010cec:	4604      	mov	r4, r0
 8010cee:	4628      	mov	r0, r5
 8010cf0:	f009 f954 	bl	8019f9c <rcl_wait_set_is_valid>
 8010cf4:	b110      	cbz	r0, 8010cfc <rclc_executor_prepare+0x1c>
 8010cf6:	2000      	movs	r0, #0
 8010cf8:	b01b      	add	sp, #108	@ 0x6c
 8010cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	f009 f953 	bl	8019fa8 <rcl_wait_set_fini>
 8010d02:	2800      	cmp	r0, #0
 8010d04:	d130      	bne.n	8010d68 <rclc_executor_prepare+0x88>
 8010d06:	a80c      	add	r0, sp, #48	@ 0x30
 8010d08:	f009 f934 	bl	8019f74 <rcl_get_zero_initialized_wait_set>
 8010d0c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8010d10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010d14:	46ae      	mov	lr, r5
 8010d16:	6927      	ldr	r7, [r4, #16]
 8010d18:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010d1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010d20:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010d24:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010d28:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010d2c:	f8dc 3000 	ldr.w	r3, [ip]
 8010d30:	f8ce 3000 	str.w	r3, [lr]
 8010d34:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010d36:	ae04      	add	r6, sp, #16
 8010d38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	6822      	ldr	r2, [r4, #0]
 8010d3e:	6033      	str	r3, [r6, #0]
 8010d40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d42:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8010d44:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010d48:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8010d4c:	e9cd 2100 	strd	r2, r1, [sp]
 8010d50:	4628      	mov	r0, r5
 8010d52:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8010d54:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010d56:	f009 fc25 	bl	801a5a4 <rcl_wait_set_init>
 8010d5a:	2800      	cmp	r0, #0
 8010d5c:	d0cc      	beq.n	8010cf8 <rclc_executor_prepare+0x18>
 8010d5e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010d60:	f000 fc4a 	bl	80115f8 <rcutils_reset_error>
 8010d64:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010d66:	e7c7      	b.n	8010cf8 <rclc_executor_prepare+0x18>
 8010d68:	f000 fc46 	bl	80115f8 <rcutils_reset_error>
 8010d6c:	e7cb      	b.n	8010d06 <rclc_executor_prepare+0x26>
 8010d6e:	200b      	movs	r0, #11
 8010d70:	4770      	bx	lr
 8010d72:	bf00      	nop

08010d74 <rclc_executor_spin_some.part.0>:
 8010d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d78:	f100 0614 	add.w	r6, r0, #20
 8010d7c:	b083      	sub	sp, #12
 8010d7e:	4691      	mov	r9, r2
 8010d80:	4698      	mov	r8, r3
 8010d82:	4605      	mov	r5, r0
 8010d84:	f7ff ffac 	bl	8010ce0 <rclc_executor_prepare>
 8010d88:	4630      	mov	r0, r6
 8010d8a:	f009 f9d9 	bl	801a140 <rcl_wait_set_clear>
 8010d8e:	4607      	mov	r7, r0
 8010d90:	2800      	cmp	r0, #0
 8010d92:	f040 80ed 	bne.w	8010f70 <rclc_executor_spin_some.part.0+0x1fc>
 8010d96:	68ab      	ldr	r3, [r5, #8]
 8010d98:	4604      	mov	r4, r0
 8010d9a:	b303      	cbz	r3, 8010dde <rclc_executor_spin_some.part.0+0x6a>
 8010d9c:	6869      	ldr	r1, [r5, #4]
 8010d9e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8010da2:	01a2      	lsls	r2, r4, #6
 8010da4:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8010da8:	b1cb      	cbz	r3, 8010dde <rclc_executor_spin_some.part.0+0x6a>
 8010daa:	5c8b      	ldrb	r3, [r1, r2]
 8010dac:	2b0a      	cmp	r3, #10
 8010dae:	f200 80d8 	bhi.w	8010f62 <rclc_executor_spin_some.part.0+0x1ee>
 8010db2:	e8df f003 	tbb	[pc, r3]
 8010db6:	9c9c      	.short	0x9c9c
 8010db8:	068c8ca7 	.word	0x068c8ca7
 8010dbc:	bdc90606 	.word	0xbdc90606
 8010dc0:	b2          	.byte	0xb2
 8010dc1:	00          	.byte	0x00
 8010dc2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010dc6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010dca:	4630      	mov	r0, r6
 8010dcc:	f009 fd00 	bl	801a7d0 <rcl_wait_set_add_service>
 8010dd0:	2800      	cmp	r0, #0
 8010dd2:	f040 8086 	bne.w	8010ee2 <rclc_executor_spin_some.part.0+0x16e>
 8010dd6:	68ab      	ldr	r3, [r5, #8]
 8010dd8:	3401      	adds	r4, #1
 8010dda:	429c      	cmp	r4, r3
 8010ddc:	d3de      	bcc.n	8010d9c <rclc_executor_spin_some.part.0+0x28>
 8010dde:	4643      	mov	r3, r8
 8010de0:	464a      	mov	r2, r9
 8010de2:	4630      	mov	r0, r6
 8010de4:	f009 fd20 	bl	801a828 <rcl_wait>
 8010de8:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	f000 80c7 	beq.w	8010f80 <rclc_executor_spin_some.part.0+0x20c>
 8010df2:	2b01      	cmp	r3, #1
 8010df4:	f040 80b5 	bne.w	8010f62 <rclc_executor_spin_some.part.0+0x1ee>
 8010df8:	68ab      	ldr	r3, [r5, #8]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	f000 8159 	beq.w	80110b2 <rclc_executor_spin_some.part.0+0x33e>
 8010e00:	2400      	movs	r4, #0
 8010e02:	46a0      	mov	r8, r4
 8010e04:	f240 1991 	movw	r9, #401	@ 0x191
 8010e08:	e00a      	b.n	8010e20 <rclc_executor_spin_some.part.0+0xac>
 8010e0a:	f7ff fb41 	bl	8010490 <_rclc_check_for_new_data>
 8010e0e:	4604      	mov	r4, r0
 8010e10:	b110      	cbz	r0, 8010e18 <rclc_executor_spin_some.part.0+0xa4>
 8010e12:	4548      	cmp	r0, r9
 8010e14:	f040 80b2 	bne.w	8010f7c <rclc_executor_spin_some.part.0+0x208>
 8010e18:	68ab      	ldr	r3, [r5, #8]
 8010e1a:	4598      	cmp	r8, r3
 8010e1c:	f080 8126 	bcs.w	801106c <rclc_executor_spin_some.part.0+0x2f8>
 8010e20:	686a      	ldr	r2, [r5, #4]
 8010e22:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8010e26:	4631      	mov	r1, r6
 8010e28:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8010e2c:	f108 0801 	add.w	r8, r8, #1
 8010e30:	f1bc 0f00 	cmp.w	ip, #0
 8010e34:	d1e9      	bne.n	8010e0a <rclc_executor_spin_some.part.0+0x96>
 8010e36:	4619      	mov	r1, r3
 8010e38:	4610      	mov	r0, r2
 8010e3a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8010e3e:	4798      	blx	r3
 8010e40:	2800      	cmp	r0, #0
 8010e42:	f000 809b 	beq.w	8010f7c <rclc_executor_spin_some.part.0+0x208>
 8010e46:	68ab      	ldr	r3, [r5, #8]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	f000 8097 	beq.w	8010f7c <rclc_executor_spin_some.part.0+0x208>
 8010e4e:	f04f 0800 	mov.w	r8, #0
 8010e52:	f240 1991 	movw	r9, #401	@ 0x191
 8010e56:	e009      	b.n	8010e6c <rclc_executor_spin_some.part.0+0xf8>
 8010e58:	f7ff fb68 	bl	801052c <_rclc_take_new_data>
 8010e5c:	4604      	mov	r4, r0
 8010e5e:	b110      	cbz	r0, 8010e66 <rclc_executor_spin_some.part.0+0xf2>
 8010e60:	4548      	cmp	r0, r9
 8010e62:	f040 808b 	bne.w	8010f7c <rclc_executor_spin_some.part.0+0x208>
 8010e66:	68ab      	ldr	r3, [r5, #8]
 8010e68:	4598      	cmp	r8, r3
 8010e6a:	d209      	bcs.n	8010e80 <rclc_executor_spin_some.part.0+0x10c>
 8010e6c:	6868      	ldr	r0, [r5, #4]
 8010e6e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8010e72:	4631      	mov	r1, r6
 8010e74:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8010e78:	f108 0801 	add.w	r8, r8, #1
 8010e7c:	2a00      	cmp	r2, #0
 8010e7e:	d1eb      	bne.n	8010e58 <rclc_executor_spin_some.part.0+0xe4>
 8010e80:	2600      	movs	r6, #0
 8010e82:	b97b      	cbnz	r3, 8010ea4 <rclc_executor_spin_some.part.0+0x130>
 8010e84:	e07a      	b.n	8010f7c <rclc_executor_spin_some.part.0+0x208>
 8010e86:	f812 200c 	ldrb.w	r2, [r2, ip]
 8010e8a:	2a08      	cmp	r2, #8
 8010e8c:	f000 80fd 	beq.w	801108a <rclc_executor_spin_some.part.0+0x316>
 8010e90:	2a09      	cmp	r2, #9
 8010e92:	f000 80ef 	beq.w	8011074 <rclc_executor_spin_some.part.0+0x300>
 8010e96:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8010e9a:	b98a      	cbnz	r2, 8010ec0 <rclc_executor_spin_some.part.0+0x14c>
 8010e9c:	3601      	adds	r6, #1
 8010e9e:	429e      	cmp	r6, r3
 8010ea0:	d262      	bcs.n	8010f68 <rclc_executor_spin_some.part.0+0x1f4>
 8010ea2:	2400      	movs	r4, #0
 8010ea4:	686a      	ldr	r2, [r5, #4]
 8010ea6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8010eaa:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8010eae:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8010eb2:	2900      	cmp	r1, #0
 8010eb4:	d062      	beq.n	8010f7c <rclc_executor_spin_some.part.0+0x208>
 8010eb6:	7841      	ldrb	r1, [r0, #1]
 8010eb8:	2900      	cmp	r1, #0
 8010eba:	d0e4      	beq.n	8010e86 <rclc_executor_spin_some.part.0+0x112>
 8010ebc:	2901      	cmp	r1, #1
 8010ebe:	d1ed      	bne.n	8010e9c <rclc_executor_spin_some.part.0+0x128>
 8010ec0:	f7ff fca8 	bl	8010814 <_rclc_execute.part.0>
 8010ec4:	2800      	cmp	r0, #0
 8010ec6:	f040 80b6 	bne.w	8011036 <rclc_executor_spin_some.part.0+0x2c2>
 8010eca:	68ab      	ldr	r3, [r5, #8]
 8010ecc:	e7e6      	b.n	8010e9c <rclc_executor_spin_some.part.0+0x128>
 8010ece:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010ed2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010ed6:	4630      	mov	r0, r6
 8010ed8:	f009 fc4e 	bl	801a778 <rcl_wait_set_add_client>
 8010edc:	2800      	cmp	r0, #0
 8010ede:	f43f af7a 	beq.w	8010dd6 <rclc_executor_spin_some.part.0+0x62>
 8010ee2:	9001      	str	r0, [sp, #4]
 8010ee4:	f000 fb88 	bl	80115f8 <rcutils_reset_error>
 8010ee8:	9801      	ldr	r0, [sp, #4]
 8010eea:	4607      	mov	r7, r0
 8010eec:	e03c      	b.n	8010f68 <rclc_executor_spin_some.part.0+0x1f4>
 8010eee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010ef2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010ef6:	4630      	mov	r0, r6
 8010ef8:	f009 f8f6 	bl	801a0e8 <rcl_wait_set_add_subscription>
 8010efc:	2800      	cmp	r0, #0
 8010efe:	f43f af6a 	beq.w	8010dd6 <rclc_executor_spin_some.part.0+0x62>
 8010f02:	e7ee      	b.n	8010ee2 <rclc_executor_spin_some.part.0+0x16e>
 8010f04:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010f08:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010f0c:	4630      	mov	r0, r6
 8010f0e:	f009 fc03 	bl	801a718 <rcl_wait_set_add_timer>
 8010f12:	2800      	cmp	r0, #0
 8010f14:	f43f af5f 	beq.w	8010dd6 <rclc_executor_spin_some.part.0+0x62>
 8010f18:	e7e3      	b.n	8010ee2 <rclc_executor_spin_some.part.0+0x16e>
 8010f1a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010f1e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010f22:	4630      	mov	r0, r6
 8010f24:	f009 fbcc 	bl	801a6c0 <rcl_wait_set_add_guard_condition>
 8010f28:	2800      	cmp	r0, #0
 8010f2a:	f43f af54 	beq.w	8010dd6 <rclc_executor_spin_some.part.0+0x62>
 8010f2e:	e7d8      	b.n	8010ee2 <rclc_executor_spin_some.part.0+0x16e>
 8010f30:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010f34:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010f38:	3110      	adds	r1, #16
 8010f3a:	4630      	mov	r0, r6
 8010f3c:	f00a f94c 	bl	801b1d8 <rcl_action_wait_set_add_action_server>
 8010f40:	2800      	cmp	r0, #0
 8010f42:	f43f af48 	beq.w	8010dd6 <rclc_executor_spin_some.part.0+0x62>
 8010f46:	e7cc      	b.n	8010ee2 <rclc_executor_spin_some.part.0+0x16e>
 8010f48:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010f4c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010f50:	3110      	adds	r1, #16
 8010f52:	2300      	movs	r3, #0
 8010f54:	4630      	mov	r0, r6
 8010f56:	f009 ff17 	bl	801ad88 <rcl_action_wait_set_add_action_client>
 8010f5a:	2800      	cmp	r0, #0
 8010f5c:	f43f af3b 	beq.w	8010dd6 <rclc_executor_spin_some.part.0+0x62>
 8010f60:	e7bf      	b.n	8010ee2 <rclc_executor_spin_some.part.0+0x16e>
 8010f62:	f000 fb49 	bl	80115f8 <rcutils_reset_error>
 8010f66:	2701      	movs	r7, #1
 8010f68:	4638      	mov	r0, r7
 8010f6a:	b003      	add	sp, #12
 8010f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f70:	f000 fb42 	bl	80115f8 <rcutils_reset_error>
 8010f74:	4638      	mov	r0, r7
 8010f76:	b003      	add	sp, #12
 8010f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f7c:	4627      	mov	r7, r4
 8010f7e:	e7f3      	b.n	8010f68 <rclc_executor_spin_some.part.0+0x1f4>
 8010f80:	68ab      	ldr	r3, [r5, #8]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	f000 8092 	beq.w	80110ac <rclc_executor_spin_some.part.0+0x338>
 8010f88:	2400      	movs	r4, #0
 8010f8a:	46a0      	mov	r8, r4
 8010f8c:	f240 1991 	movw	r9, #401	@ 0x191
 8010f90:	e008      	b.n	8010fa4 <rclc_executor_spin_some.part.0+0x230>
 8010f92:	f7ff fa7d 	bl	8010490 <_rclc_check_for_new_data>
 8010f96:	4604      	mov	r4, r0
 8010f98:	b108      	cbz	r0, 8010f9e <rclc_executor_spin_some.part.0+0x22a>
 8010f9a:	4548      	cmp	r0, r9
 8010f9c:	d1ee      	bne.n	8010f7c <rclc_executor_spin_some.part.0+0x208>
 8010f9e:	68ab      	ldr	r3, [r5, #8]
 8010fa0:	4598      	cmp	r8, r3
 8010fa2:	d265      	bcs.n	8011070 <rclc_executor_spin_some.part.0+0x2fc>
 8010fa4:	686a      	ldr	r2, [r5, #4]
 8010fa6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8010faa:	4631      	mov	r1, r6
 8010fac:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8010fb0:	f108 0801 	add.w	r8, r8, #1
 8010fb4:	f1bc 0f00 	cmp.w	ip, #0
 8010fb8:	d1eb      	bne.n	8010f92 <rclc_executor_spin_some.part.0+0x21e>
 8010fba:	4619      	mov	r1, r3
 8010fbc:	4610      	mov	r0, r2
 8010fbe:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8010fc2:	4798      	blx	r3
 8010fc4:	2800      	cmp	r0, #0
 8010fc6:	d0d9      	beq.n	8010f7c <rclc_executor_spin_some.part.0+0x208>
 8010fc8:	68ab      	ldr	r3, [r5, #8]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d0d6      	beq.n	8010f7c <rclc_executor_spin_some.part.0+0x208>
 8010fce:	f04f 0800 	mov.w	r8, #0
 8010fd2:	f240 1991 	movw	r9, #401	@ 0x191
 8010fd6:	f240 2a59 	movw	sl, #601	@ 0x259
 8010fda:	e00e      	b.n	8010ffa <rclc_executor_spin_some.part.0+0x286>
 8010fdc:	f813 300b 	ldrb.w	r3, [r3, fp]
 8010fe0:	2b08      	cmp	r3, #8
 8010fe2:	d033      	beq.n	801104c <rclc_executor_spin_some.part.0+0x2d8>
 8010fe4:	2b09      	cmp	r3, #9
 8010fe6:	d028      	beq.n	801103a <rclc_executor_spin_some.part.0+0x2c6>
 8010fe8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8010fec:	b9fb      	cbnz	r3, 801102e <rclc_executor_spin_some.part.0+0x2ba>
 8010fee:	68ab      	ldr	r3, [r5, #8]
 8010ff0:	f108 0801 	add.w	r8, r8, #1
 8010ff4:	4598      	cmp	r8, r3
 8010ff6:	d2b7      	bcs.n	8010f68 <rclc_executor_spin_some.part.0+0x1f4>
 8010ff8:	2400      	movs	r4, #0
 8010ffa:	6868      	ldr	r0, [r5, #4]
 8010ffc:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8011000:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8011004:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8011008:	2b00      	cmp	r3, #0
 801100a:	d0b7      	beq.n	8010f7c <rclc_executor_spin_some.part.0+0x208>
 801100c:	4631      	mov	r1, r6
 801100e:	f7ff fa8d 	bl	801052c <_rclc_take_new_data>
 8011012:	b118      	cbz	r0, 801101c <rclc_executor_spin_some.part.0+0x2a8>
 8011014:	4548      	cmp	r0, r9
 8011016:	d001      	beq.n	801101c <rclc_executor_spin_some.part.0+0x2a8>
 8011018:	4550      	cmp	r0, sl
 801101a:	d10c      	bne.n	8011036 <rclc_executor_spin_some.part.0+0x2c2>
 801101c:	686b      	ldr	r3, [r5, #4]
 801101e:	eb13 000b 	adds.w	r0, r3, fp
 8011022:	d021      	beq.n	8011068 <rclc_executor_spin_some.part.0+0x2f4>
 8011024:	7842      	ldrb	r2, [r0, #1]
 8011026:	2a00      	cmp	r2, #0
 8011028:	d0d8      	beq.n	8010fdc <rclc_executor_spin_some.part.0+0x268>
 801102a:	2a01      	cmp	r2, #1
 801102c:	d1df      	bne.n	8010fee <rclc_executor_spin_some.part.0+0x27a>
 801102e:	f7ff fbf1 	bl	8010814 <_rclc_execute.part.0>
 8011032:	2800      	cmp	r0, #0
 8011034:	d0db      	beq.n	8010fee <rclc_executor_spin_some.part.0+0x27a>
 8011036:	4607      	mov	r7, r0
 8011038:	e796      	b.n	8010f68 <rclc_executor_spin_some.part.0+0x1f4>
 801103a:	6843      	ldr	r3, [r0, #4]
 801103c:	6a1a      	ldr	r2, [r3, #32]
 801103e:	2a00      	cmp	r2, #0
 8011040:	d1f5      	bne.n	801102e <rclc_executor_spin_some.part.0+0x2ba>
 8011042:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8011046:	2b00      	cmp	r3, #0
 8011048:	d0d1      	beq.n	8010fee <rclc_executor_spin_some.part.0+0x27a>
 801104a:	e7f0      	b.n	801102e <rclc_executor_spin_some.part.0+0x2ba>
 801104c:	6843      	ldr	r3, [r0, #4]
 801104e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011050:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8011054:	d1eb      	bne.n	801102e <rclc_executor_spin_some.part.0+0x2ba>
 8011056:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801105a:	2a00      	cmp	r2, #0
 801105c:	d1e7      	bne.n	801102e <rclc_executor_spin_some.part.0+0x2ba>
 801105e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011062:	2b00      	cmp	r3, #0
 8011064:	d0c3      	beq.n	8010fee <rclc_executor_spin_some.part.0+0x27a>
 8011066:	e7e2      	b.n	801102e <rclc_executor_spin_some.part.0+0x2ba>
 8011068:	270b      	movs	r7, #11
 801106a:	e77d      	b.n	8010f68 <rclc_executor_spin_some.part.0+0x1f4>
 801106c:	686a      	ldr	r2, [r5, #4]
 801106e:	e6e2      	b.n	8010e36 <rclc_executor_spin_some.part.0+0xc2>
 8011070:	686a      	ldr	r2, [r5, #4]
 8011072:	e7a2      	b.n	8010fba <rclc_executor_spin_some.part.0+0x246>
 8011074:	6842      	ldr	r2, [r0, #4]
 8011076:	6a11      	ldr	r1, [r2, #32]
 8011078:	2900      	cmp	r1, #0
 801107a:	f47f af21 	bne.w	8010ec0 <rclc_executor_spin_some.part.0+0x14c>
 801107e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8011082:	2a00      	cmp	r2, #0
 8011084:	f43f af0a 	beq.w	8010e9c <rclc_executor_spin_some.part.0+0x128>
 8011088:	e71a      	b.n	8010ec0 <rclc_executor_spin_some.part.0+0x14c>
 801108a:	6842      	ldr	r2, [r0, #4]
 801108c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 801108e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8011092:	f47f af15 	bne.w	8010ec0 <rclc_executor_spin_some.part.0+0x14c>
 8011096:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 801109a:	2900      	cmp	r1, #0
 801109c:	f47f af10 	bne.w	8010ec0 <rclc_executor_spin_some.part.0+0x14c>
 80110a0:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 80110a4:	2a00      	cmp	r2, #0
 80110a6:	f43f aef9 	beq.w	8010e9c <rclc_executor_spin_some.part.0+0x128>
 80110aa:	e709      	b.n	8010ec0 <rclc_executor_spin_some.part.0+0x14c>
 80110ac:	686a      	ldr	r2, [r5, #4]
 80110ae:	461c      	mov	r4, r3
 80110b0:	e783      	b.n	8010fba <rclc_executor_spin_some.part.0+0x246>
 80110b2:	686a      	ldr	r2, [r5, #4]
 80110b4:	461c      	mov	r4, r3
 80110b6:	e6be      	b.n	8010e36 <rclc_executor_spin_some.part.0+0xc2>

080110b8 <rclc_executor_spin>:
 80110b8:	b1d0      	cbz	r0, 80110f0 <rclc_executor_spin+0x38>
 80110ba:	b510      	push	{r4, lr}
 80110bc:	4604      	mov	r4, r0
 80110be:	b082      	sub	sp, #8
 80110c0:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 80110c4:	6820      	ldr	r0, [r4, #0]
 80110c6:	e9cd 2300 	strd	r2, r3, [sp]
 80110ca:	f007 fbeb 	bl	80188a4 <rcl_context_is_valid>
 80110ce:	4601      	mov	r1, r0
 80110d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110d4:	4620      	mov	r0, r4
 80110d6:	b131      	cbz	r1, 80110e6 <rclc_executor_spin+0x2e>
 80110d8:	f7ff fe4c 	bl	8010d74 <rclc_executor_spin_some.part.0>
 80110dc:	f030 0302 	bics.w	r3, r0, #2
 80110e0:	d0ee      	beq.n	80110c0 <rclc_executor_spin+0x8>
 80110e2:	b002      	add	sp, #8
 80110e4:	bd10      	pop	{r4, pc}
 80110e6:	f000 fa87 	bl	80115f8 <rcutils_reset_error>
 80110ea:	2001      	movs	r0, #1
 80110ec:	b002      	add	sp, #8
 80110ee:	bd10      	pop	{r4, pc}
 80110f0:	200b      	movs	r0, #11
 80110f2:	4770      	bx	lr

080110f4 <rclc_executor_handle_counters_zero_init>:
 80110f4:	b130      	cbz	r0, 8011104 <rclc_executor_handle_counters_zero_init+0x10>
 80110f6:	b508      	push	{r3, lr}
 80110f8:	2220      	movs	r2, #32
 80110fa:	2100      	movs	r1, #0
 80110fc:	f00c fb10 	bl	801d720 <memset>
 8011100:	2000      	movs	r0, #0
 8011102:	bd08      	pop	{r3, pc}
 8011104:	200b      	movs	r0, #11
 8011106:	4770      	bx	lr

08011108 <rclc_executor_handle_init>:
 8011108:	b168      	cbz	r0, 8011126 <rclc_executor_handle_init+0x1e>
 801110a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8011130 <rclc_executor_handle_init+0x28>
 801110e:	2300      	movs	r3, #0
 8011110:	220b      	movs	r2, #11
 8011112:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 8011116:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801111a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 801111e:	8002      	strh	r2, [r0, #0]
 8011120:	8703      	strh	r3, [r0, #56]	@ 0x38
 8011122:	4618      	mov	r0, r3
 8011124:	4770      	bx	lr
 8011126:	200b      	movs	r0, #11
 8011128:	4770      	bx	lr
 801112a:	bf00      	nop
 801112c:	f3af 8000 	nop.w
	...

08011138 <rclc_support_init_with_options>:
 8011138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801113c:	b083      	sub	sp, #12
 801113e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011140:	b340      	cbz	r0, 8011194 <rclc_support_init_with_options+0x5c>
 8011142:	461d      	mov	r5, r3
 8011144:	b333      	cbz	r3, 8011194 <rclc_support_init_with_options+0x5c>
 8011146:	b32e      	cbz	r6, 8011194 <rclc_support_init_with_options+0x5c>
 8011148:	46e9      	mov	r9, sp
 801114a:	4604      	mov	r4, r0
 801114c:	4648      	mov	r0, r9
 801114e:	460f      	mov	r7, r1
 8011150:	4690      	mov	r8, r2
 8011152:	f007 fb9d 	bl	8018890 <rcl_get_zero_initialized_context>
 8011156:	e899 0003 	ldmia.w	r9, {r0, r1}
 801115a:	462a      	mov	r2, r5
 801115c:	e884 0003 	stmia.w	r4, {r0, r1}
 8011160:	4623      	mov	r3, r4
 8011162:	4641      	mov	r1, r8
 8011164:	4638      	mov	r0, r7
 8011166:	f007 fe75 	bl	8018e54 <rcl_init>
 801116a:	4605      	mov	r5, r0
 801116c:	b960      	cbnz	r0, 8011188 <rclc_support_init_with_options+0x50>
 801116e:	60a6      	str	r6, [r4, #8]
 8011170:	4632      	mov	r2, r6
 8011172:	f104 010c 	add.w	r1, r4, #12
 8011176:	2003      	movs	r0, #3
 8011178:	f008 fa28 	bl	80195cc <rcl_clock_init>
 801117c:	4605      	mov	r5, r0
 801117e:	b918      	cbnz	r0, 8011188 <rclc_support_init_with_options+0x50>
 8011180:	4628      	mov	r0, r5
 8011182:	b003      	add	sp, #12
 8011184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011188:	f000 fa36 	bl	80115f8 <rcutils_reset_error>
 801118c:	4628      	mov	r0, r5
 801118e:	b003      	add	sp, #12
 8011190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011194:	250b      	movs	r5, #11
 8011196:	4628      	mov	r0, r5
 8011198:	b003      	add	sp, #12
 801119a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801119e:	bf00      	nop

080111a0 <rclc_node_init_default>:
 80111a0:	b3b8      	cbz	r0, 8011212 <rclc_node_init_default+0x72>
 80111a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111a6:	460d      	mov	r5, r1
 80111a8:	b0a1      	sub	sp, #132	@ 0x84
 80111aa:	b329      	cbz	r1, 80111f8 <rclc_node_init_default+0x58>
 80111ac:	4616      	mov	r6, r2
 80111ae:	b31a      	cbz	r2, 80111f8 <rclc_node_init_default+0x58>
 80111b0:	461f      	mov	r7, r3
 80111b2:	b30b      	cbz	r3, 80111f8 <rclc_node_init_default+0x58>
 80111b4:	f10d 0810 	add.w	r8, sp, #16
 80111b8:	4604      	mov	r4, r0
 80111ba:	4640      	mov	r0, r8
 80111bc:	f7fe fdd8 	bl	800fd70 <rcl_get_zero_initialized_node>
 80111c0:	e898 0003 	ldmia.w	r8, {r0, r1}
 80111c4:	f10d 0918 	add.w	r9, sp, #24
 80111c8:	e884 0003 	stmia.w	r4, {r0, r1}
 80111cc:	4648      	mov	r0, r9
 80111ce:	f7fe ff47 	bl	8010060 <rcl_node_get_default_options>
 80111d2:	4640      	mov	r0, r8
 80111d4:	f7fe fdcc 	bl	800fd70 <rcl_get_zero_initialized_node>
 80111d8:	f8cd 9000 	str.w	r9, [sp]
 80111dc:	e898 0003 	ldmia.w	r8, {r0, r1}
 80111e0:	463b      	mov	r3, r7
 80111e2:	e884 0003 	stmia.w	r4, {r0, r1}
 80111e6:	4632      	mov	r2, r6
 80111e8:	4629      	mov	r1, r5
 80111ea:	4620      	mov	r0, r4
 80111ec:	f7fe fdca 	bl	800fd84 <rcl_node_init>
 80111f0:	b930      	cbnz	r0, 8011200 <rclc_node_init_default+0x60>
 80111f2:	b021      	add	sp, #132	@ 0x84
 80111f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111f8:	200b      	movs	r0, #11
 80111fa:	b021      	add	sp, #132	@ 0x84
 80111fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011200:	9003      	str	r0, [sp, #12]
 8011202:	f000 f9f9 	bl	80115f8 <rcutils_reset_error>
 8011206:	f000 f9f7 	bl	80115f8 <rcutils_reset_error>
 801120a:	9803      	ldr	r0, [sp, #12]
 801120c:	b021      	add	sp, #132	@ 0x84
 801120e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011212:	200b      	movs	r0, #11
 8011214:	4770      	bx	lr
 8011216:	bf00      	nop

08011218 <rclc_publisher_init_default>:
 8011218:	b368      	cbz	r0, 8011276 <rclc_publisher_init_default+0x5e>
 801121a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801121e:	460d      	mov	r5, r1
 8011220:	b0a0      	sub	sp, #128	@ 0x80
 8011222:	b321      	cbz	r1, 801126e <rclc_publisher_init_default+0x56>
 8011224:	4616      	mov	r6, r2
 8011226:	b312      	cbz	r2, 801126e <rclc_publisher_init_default+0x56>
 8011228:	461f      	mov	r7, r3
 801122a:	b303      	cbz	r3, 801126e <rclc_publisher_init_default+0x56>
 801122c:	4604      	mov	r4, r0
 801122e:	f7fe ffeb 	bl	8010208 <rcl_get_zero_initialized_publisher>
 8011232:	f10d 0810 	add.w	r8, sp, #16
 8011236:	6020      	str	r0, [r4, #0]
 8011238:	4640      	mov	r0, r8
 801123a:	f7ff f881 	bl	8010340 <rcl_publisher_get_default_options>
 801123e:	490f      	ldr	r1, [pc, #60]	@ (801127c <rclc_publisher_init_default+0x64>)
 8011240:	2250      	movs	r2, #80	@ 0x50
 8011242:	4640      	mov	r0, r8
 8011244:	f00c fb35 	bl	801d8b2 <memcpy>
 8011248:	f8cd 8000 	str.w	r8, [sp]
 801124c:	463b      	mov	r3, r7
 801124e:	4632      	mov	r2, r6
 8011250:	4629      	mov	r1, r5
 8011252:	4620      	mov	r0, r4
 8011254:	f7fe ffde 	bl	8010214 <rcl_publisher_init>
 8011258:	b910      	cbnz	r0, 8011260 <rclc_publisher_init_default+0x48>
 801125a:	b020      	add	sp, #128	@ 0x80
 801125c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011260:	9003      	str	r0, [sp, #12]
 8011262:	f000 f9c9 	bl	80115f8 <rcutils_reset_error>
 8011266:	9803      	ldr	r0, [sp, #12]
 8011268:	b020      	add	sp, #128	@ 0x80
 801126a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801126e:	200b      	movs	r0, #11
 8011270:	b020      	add	sp, #128	@ 0x80
 8011272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011276:	200b      	movs	r0, #11
 8011278:	4770      	bx	lr
 801127a:	bf00      	nop
 801127c:	0801f528 	.word	0x0801f528

08011280 <rclc_publisher_init_best_effort>:
 8011280:	b368      	cbz	r0, 80112de <rclc_publisher_init_best_effort+0x5e>
 8011282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011286:	460d      	mov	r5, r1
 8011288:	b0a0      	sub	sp, #128	@ 0x80
 801128a:	b321      	cbz	r1, 80112d6 <rclc_publisher_init_best_effort+0x56>
 801128c:	4616      	mov	r6, r2
 801128e:	b312      	cbz	r2, 80112d6 <rclc_publisher_init_best_effort+0x56>
 8011290:	461f      	mov	r7, r3
 8011292:	b303      	cbz	r3, 80112d6 <rclc_publisher_init_best_effort+0x56>
 8011294:	4604      	mov	r4, r0
 8011296:	f7fe ffb7 	bl	8010208 <rcl_get_zero_initialized_publisher>
 801129a:	f10d 0810 	add.w	r8, sp, #16
 801129e:	6020      	str	r0, [r4, #0]
 80112a0:	4640      	mov	r0, r8
 80112a2:	f7ff f84d 	bl	8010340 <rcl_publisher_get_default_options>
 80112a6:	490f      	ldr	r1, [pc, #60]	@ (80112e4 <rclc_publisher_init_best_effort+0x64>)
 80112a8:	2250      	movs	r2, #80	@ 0x50
 80112aa:	4640      	mov	r0, r8
 80112ac:	f00c fb01 	bl	801d8b2 <memcpy>
 80112b0:	f8cd 8000 	str.w	r8, [sp]
 80112b4:	463b      	mov	r3, r7
 80112b6:	4632      	mov	r2, r6
 80112b8:	4629      	mov	r1, r5
 80112ba:	4620      	mov	r0, r4
 80112bc:	f7fe ffaa 	bl	8010214 <rcl_publisher_init>
 80112c0:	b910      	cbnz	r0, 80112c8 <rclc_publisher_init_best_effort+0x48>
 80112c2:	b020      	add	sp, #128	@ 0x80
 80112c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112c8:	9003      	str	r0, [sp, #12]
 80112ca:	f000 f995 	bl	80115f8 <rcutils_reset_error>
 80112ce:	9803      	ldr	r0, [sp, #12]
 80112d0:	b020      	add	sp, #128	@ 0x80
 80112d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112d6:	200b      	movs	r0, #11
 80112d8:	b020      	add	sp, #128	@ 0x80
 80112da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112de:	200b      	movs	r0, #11
 80112e0:	4770      	bx	lr
 80112e2:	bf00      	nop
 80112e4:	0801f578 	.word	0x0801f578

080112e8 <rclc_service_init_default>:
 80112e8:	b368      	cbz	r0, 8011346 <rclc_service_init_default+0x5e>
 80112ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ee:	460d      	mov	r5, r1
 80112f0:	b09e      	sub	sp, #120	@ 0x78
 80112f2:	b321      	cbz	r1, 801133e <rclc_service_init_default+0x56>
 80112f4:	4616      	mov	r6, r2
 80112f6:	b312      	cbz	r2, 801133e <rclc_service_init_default+0x56>
 80112f8:	461f      	mov	r7, r3
 80112fa:	b303      	cbz	r3, 801133e <rclc_service_init_default+0x56>
 80112fc:	4604      	mov	r4, r0
 80112fe:	f007 ffcb 	bl	8019298 <rcl_get_zero_initialized_service>
 8011302:	f10d 0810 	add.w	r8, sp, #16
 8011306:	6020      	str	r0, [r4, #0]
 8011308:	4640      	mov	r0, r8
 801130a:	f008 f853 	bl	80193b4 <rcl_service_get_default_options>
 801130e:	490f      	ldr	r1, [pc, #60]	@ (801134c <rclc_service_init_default+0x64>)
 8011310:	2250      	movs	r2, #80	@ 0x50
 8011312:	4640      	mov	r0, r8
 8011314:	f00c facd 	bl	801d8b2 <memcpy>
 8011318:	f8cd 8000 	str.w	r8, [sp]
 801131c:	463b      	mov	r3, r7
 801131e:	4632      	mov	r2, r6
 8011320:	4629      	mov	r1, r5
 8011322:	4620      	mov	r0, r4
 8011324:	f007 ffbe 	bl	80192a4 <rcl_service_init>
 8011328:	b910      	cbnz	r0, 8011330 <rclc_service_init_default+0x48>
 801132a:	b01e      	add	sp, #120	@ 0x78
 801132c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011330:	9003      	str	r0, [sp, #12]
 8011332:	f000 f961 	bl	80115f8 <rcutils_reset_error>
 8011336:	9803      	ldr	r0, [sp, #12]
 8011338:	b01e      	add	sp, #120	@ 0x78
 801133a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801133e:	200b      	movs	r0, #11
 8011340:	b01e      	add	sp, #120	@ 0x78
 8011342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011346:	200b      	movs	r0, #11
 8011348:	4770      	bx	lr
 801134a:	bf00      	nop
 801134c:	0801f5c8 	.word	0x0801f5c8

08011350 <rclc_timer_init_default>:
 8011350:	b360      	cbz	r0, 80113ac <rclc_timer_init_default+0x5c>
 8011352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011356:	460e      	mov	r6, r1
 8011358:	b08a      	sub	sp, #40	@ 0x28
 801135a:	b319      	cbz	r1, 80113a4 <rclc_timer_init_default+0x54>
 801135c:	4690      	mov	r8, r2
 801135e:	461f      	mov	r7, r3
 8011360:	4605      	mov	r5, r0
 8011362:	f008 fb11 	bl	8019988 <rcl_get_zero_initialized_timer>
 8011366:	68b4      	ldr	r4, [r6, #8]
 8011368:	6028      	str	r0, [r5, #0]
 801136a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801136c:	f10d 0c0c 	add.w	ip, sp, #12
 8011370:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011374:	6823      	ldr	r3, [r4, #0]
 8011376:	f8cc 3000 	str.w	r3, [ip]
 801137a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801137c:	9302      	str	r3, [sp, #8]
 801137e:	e9cd 8700 	strd	r8, r7, [sp]
 8011382:	4628      	mov	r0, r5
 8011384:	4632      	mov	r2, r6
 8011386:	f106 010c 	add.w	r1, r6, #12
 801138a:	f008 fb05 	bl	8019998 <rcl_timer_init>
 801138e:	b910      	cbnz	r0, 8011396 <rclc_timer_init_default+0x46>
 8011390:	b00a      	add	sp, #40	@ 0x28
 8011392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011396:	9009      	str	r0, [sp, #36]	@ 0x24
 8011398:	f000 f92e 	bl	80115f8 <rcutils_reset_error>
 801139c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801139e:	b00a      	add	sp, #40	@ 0x28
 80113a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113a4:	200b      	movs	r0, #11
 80113a6:	b00a      	add	sp, #40	@ 0x28
 80113a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113ac:	200b      	movs	r0, #11
 80113ae:	4770      	bx	lr

080113b0 <__default_zero_allocate>:
 80113b0:	f00b bccc 	b.w	801cd4c <calloc>

080113b4 <__default_reallocate>:
 80113b4:	f00b be6a 	b.w	801d08c <realloc>

080113b8 <__default_deallocate>:
 80113b8:	f00b bd46 	b.w	801ce48 <free>

080113bc <__default_allocate>:
 80113bc:	f00b bd3c 	b.w	801ce38 <malloc>

080113c0 <rcutils_get_zero_initialized_allocator>:
 80113c0:	b510      	push	{r4, lr}
 80113c2:	4c05      	ldr	r4, [pc, #20]	@ (80113d8 <rcutils_get_zero_initialized_allocator+0x18>)
 80113c4:	4686      	mov	lr, r0
 80113c6:	4684      	mov	ip, r0
 80113c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80113ce:	6823      	ldr	r3, [r4, #0]
 80113d0:	f8cc 3000 	str.w	r3, [ip]
 80113d4:	4670      	mov	r0, lr
 80113d6:	bd10      	pop	{r4, pc}
 80113d8:	0801f618 	.word	0x0801f618

080113dc <rcutils_set_default_allocator>:
 80113dc:	b1a8      	cbz	r0, 801140a <rcutils_set_default_allocator+0x2e>
 80113de:	6802      	ldr	r2, [r0, #0]
 80113e0:	b1a2      	cbz	r2, 801140c <rcutils_set_default_allocator+0x30>
 80113e2:	6841      	ldr	r1, [r0, #4]
 80113e4:	b1a1      	cbz	r1, 8011410 <rcutils_set_default_allocator+0x34>
 80113e6:	b410      	push	{r4}
 80113e8:	68c4      	ldr	r4, [r0, #12]
 80113ea:	b164      	cbz	r4, 8011406 <rcutils_set_default_allocator+0x2a>
 80113ec:	6880      	ldr	r0, [r0, #8]
 80113ee:	b138      	cbz	r0, 8011400 <rcutils_set_default_allocator+0x24>
 80113f0:	4b08      	ldr	r3, [pc, #32]	@ (8011414 <rcutils_set_default_allocator+0x38>)
 80113f2:	601a      	str	r2, [r3, #0]
 80113f4:	2200      	movs	r2, #0
 80113f6:	e9c3 4203 	strd	r4, r2, [r3, #12]
 80113fa:	e9c3 1001 	strd	r1, r0, [r3, #4]
 80113fe:	2001      	movs	r0, #1
 8011400:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011404:	4770      	bx	lr
 8011406:	4620      	mov	r0, r4
 8011408:	e7fa      	b.n	8011400 <rcutils_set_default_allocator+0x24>
 801140a:	4770      	bx	lr
 801140c:	4610      	mov	r0, r2
 801140e:	4770      	bx	lr
 8011410:	4608      	mov	r0, r1
 8011412:	4770      	bx	lr
 8011414:	200003a0 	.word	0x200003a0

08011418 <rcutils_get_default_allocator>:
 8011418:	b510      	push	{r4, lr}
 801141a:	4c05      	ldr	r4, [pc, #20]	@ (8011430 <rcutils_get_default_allocator+0x18>)
 801141c:	4686      	mov	lr, r0
 801141e:	4684      	mov	ip, r0
 8011420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011422:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011426:	6823      	ldr	r3, [r4, #0]
 8011428:	f8cc 3000 	str.w	r3, [ip]
 801142c:	4670      	mov	r0, lr
 801142e:	bd10      	pop	{r4, pc}
 8011430:	200003a0 	.word	0x200003a0

08011434 <rcutils_allocator_is_valid>:
 8011434:	b158      	cbz	r0, 801144e <rcutils_allocator_is_valid+0x1a>
 8011436:	6803      	ldr	r3, [r0, #0]
 8011438:	b143      	cbz	r3, 801144c <rcutils_allocator_is_valid+0x18>
 801143a:	6843      	ldr	r3, [r0, #4]
 801143c:	b133      	cbz	r3, 801144c <rcutils_allocator_is_valid+0x18>
 801143e:	68c3      	ldr	r3, [r0, #12]
 8011440:	b123      	cbz	r3, 801144c <rcutils_allocator_is_valid+0x18>
 8011442:	6880      	ldr	r0, [r0, #8]
 8011444:	3800      	subs	r0, #0
 8011446:	bf18      	it	ne
 8011448:	2001      	movne	r0, #1
 801144a:	4770      	bx	lr
 801144c:	4618      	mov	r0, r3
 801144e:	4770      	bx	lr

08011450 <__atomic_load_8>:
 8011450:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011454:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8011458:	4a15      	ldr	r2, [pc, #84]	@ (80114b0 <__atomic_load_8+0x60>)
 801145a:	4b16      	ldr	r3, [pc, #88]	@ (80114b4 <__atomic_load_8+0x64>)
 801145c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011460:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011464:	fb02 f101 	mul.w	r1, r2, r1
 8011468:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801146c:	fba3 2301 	umull	r2, r3, r3, r1
 8011470:	091b      	lsrs	r3, r3, #4
 8011472:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011476:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801147a:	b4d0      	push	{r4, r6, r7}
 801147c:	4c0e      	ldr	r4, [pc, #56]	@ (80114b8 <__atomic_load_8+0x68>)
 801147e:	1ac9      	subs	r1, r1, r3
 8011480:	1862      	adds	r2, r4, r1
 8011482:	f04f 0c01 	mov.w	ip, #1
 8011486:	e8d2 3f4f 	ldrexb	r3, [r2]
 801148a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801148e:	2e00      	cmp	r6, #0
 8011490:	d1f9      	bne.n	8011486 <__atomic_load_8+0x36>
 8011492:	f3bf 8f5b 	dmb	ish
 8011496:	b2db      	uxtb	r3, r3
 8011498:	2b00      	cmp	r3, #0
 801149a:	d1f4      	bne.n	8011486 <__atomic_load_8+0x36>
 801149c:	e9d0 6700 	ldrd	r6, r7, [r0]
 80114a0:	f3bf 8f5b 	dmb	ish
 80114a4:	5463      	strb	r3, [r4, r1]
 80114a6:	4630      	mov	r0, r6
 80114a8:	4639      	mov	r1, r7
 80114aa:	bcd0      	pop	{r4, r6, r7}
 80114ac:	4770      	bx	lr
 80114ae:	bf00      	nop
 80114b0:	27d4eb2d 	.word	0x27d4eb2d
 80114b4:	b21642c9 	.word	0xb21642c9
 80114b8:	20007440 	.word	0x20007440

080114bc <__atomic_store_8>:
 80114bc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80114c0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80114c4:	b570      	push	{r4, r5, r6, lr}
 80114c6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80114ca:	4c14      	ldr	r4, [pc, #80]	@ (801151c <__atomic_store_8+0x60>)
 80114cc:	4d14      	ldr	r5, [pc, #80]	@ (8011520 <__atomic_store_8+0x64>)
 80114ce:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80114d2:	fb04 f101 	mul.w	r1, r4, r1
 80114d6:	4c13      	ldr	r4, [pc, #76]	@ (8011524 <__atomic_store_8+0x68>)
 80114d8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80114dc:	fba4 4e01 	umull	r4, lr, r4, r1
 80114e0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 80114e4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80114e8:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 80114ec:	eba1 0e0e 	sub.w	lr, r1, lr
 80114f0:	eb05 0c0e 	add.w	ip, r5, lr
 80114f4:	f04f 0401 	mov.w	r4, #1
 80114f8:	e8dc 1f4f 	ldrexb	r1, [ip]
 80114fc:	e8cc 4f46 	strexb	r6, r4, [ip]
 8011500:	2e00      	cmp	r6, #0
 8011502:	d1f9      	bne.n	80114f8 <__atomic_store_8+0x3c>
 8011504:	f3bf 8f5b 	dmb	ish
 8011508:	b2c9      	uxtb	r1, r1
 801150a:	2900      	cmp	r1, #0
 801150c:	d1f4      	bne.n	80114f8 <__atomic_store_8+0x3c>
 801150e:	e9c0 2300 	strd	r2, r3, [r0]
 8011512:	f3bf 8f5b 	dmb	ish
 8011516:	f805 100e 	strb.w	r1, [r5, lr]
 801151a:	bd70      	pop	{r4, r5, r6, pc}
 801151c:	27d4eb2d 	.word	0x27d4eb2d
 8011520:	20007440 	.word	0x20007440
 8011524:	b21642c9 	.word	0xb21642c9

08011528 <__atomic_exchange_8>:
 8011528:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801152c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8011530:	4916      	ldr	r1, [pc, #88]	@ (801158c <__atomic_exchange_8+0x64>)
 8011532:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8011536:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801153a:	fb01 fc0c 	mul.w	ip, r1, ip
 801153e:	4914      	ldr	r1, [pc, #80]	@ (8011590 <__atomic_exchange_8+0x68>)
 8011540:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8011544:	b570      	push	{r4, r5, r6, lr}
 8011546:	4605      	mov	r5, r0
 8011548:	fba1 010c 	umull	r0, r1, r1, ip
 801154c:	0909      	lsrs	r1, r1, #4
 801154e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8011552:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8011556:	4e0f      	ldr	r6, [pc, #60]	@ (8011594 <__atomic_exchange_8+0x6c>)
 8011558:	ebac 0c01 	sub.w	ip, ip, r1
 801155c:	eb06 010c 	add.w	r1, r6, ip
 8011560:	f04f 0e01 	mov.w	lr, #1
 8011564:	e8d1 4f4f 	ldrexb	r4, [r1]
 8011568:	e8c1 ef40 	strexb	r0, lr, [r1]
 801156c:	2800      	cmp	r0, #0
 801156e:	d1f9      	bne.n	8011564 <__atomic_exchange_8+0x3c>
 8011570:	f3bf 8f5b 	dmb	ish
 8011574:	b2e4      	uxtb	r4, r4
 8011576:	2c00      	cmp	r4, #0
 8011578:	d1f4      	bne.n	8011564 <__atomic_exchange_8+0x3c>
 801157a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801157e:	e9c5 2300 	strd	r2, r3, [r5]
 8011582:	f3bf 8f5b 	dmb	ish
 8011586:	f806 400c 	strb.w	r4, [r6, ip]
 801158a:	bd70      	pop	{r4, r5, r6, pc}
 801158c:	27d4eb2d 	.word	0x27d4eb2d
 8011590:	b21642c9 	.word	0xb21642c9
 8011594:	20007440 	.word	0x20007440

08011598 <rcutils_get_env>:
 8011598:	b168      	cbz	r0, 80115b6 <rcutils_get_env+0x1e>
 801159a:	b510      	push	{r4, lr}
 801159c:	460c      	mov	r4, r1
 801159e:	b129      	cbz	r1, 80115ac <rcutils_get_env+0x14>
 80115a0:	f00b fc02 	bl	801cda8 <getenv>
 80115a4:	b120      	cbz	r0, 80115b0 <rcutils_get_env+0x18>
 80115a6:	6020      	str	r0, [r4, #0]
 80115a8:	2000      	movs	r0, #0
 80115aa:	bd10      	pop	{r4, pc}
 80115ac:	4803      	ldr	r0, [pc, #12]	@ (80115bc <rcutils_get_env+0x24>)
 80115ae:	bd10      	pop	{r4, pc}
 80115b0:	4b03      	ldr	r3, [pc, #12]	@ (80115c0 <rcutils_get_env+0x28>)
 80115b2:	6023      	str	r3, [r4, #0]
 80115b4:	bd10      	pop	{r4, pc}
 80115b6:	4803      	ldr	r0, [pc, #12]	@ (80115c4 <rcutils_get_env+0x2c>)
 80115b8:	4770      	bx	lr
 80115ba:	bf00      	nop
 80115bc:	0801f648 	.word	0x0801f648
 80115c0:	08020b38 	.word	0x08020b38
 80115c4:	0801f62c 	.word	0x0801f62c

080115c8 <rcutils_get_error_string>:
 80115c8:	4b06      	ldr	r3, [pc, #24]	@ (80115e4 <rcutils_get_error_string+0x1c>)
 80115ca:	781b      	ldrb	r3, [r3, #0]
 80115cc:	b13b      	cbz	r3, 80115de <rcutils_get_error_string+0x16>
 80115ce:	4b06      	ldr	r3, [pc, #24]	@ (80115e8 <rcutils_get_error_string+0x20>)
 80115d0:	781a      	ldrb	r2, [r3, #0]
 80115d2:	b90a      	cbnz	r2, 80115d8 <rcutils_get_error_string+0x10>
 80115d4:	2201      	movs	r2, #1
 80115d6:	701a      	strb	r2, [r3, #0]
 80115d8:	4b04      	ldr	r3, [pc, #16]	@ (80115ec <rcutils_get_error_string+0x24>)
 80115da:	7818      	ldrb	r0, [r3, #0]
 80115dc:	4770      	bx	lr
 80115de:	4b04      	ldr	r3, [pc, #16]	@ (80115f0 <rcutils_get_error_string+0x28>)
 80115e0:	7818      	ldrb	r0, [r3, #0]
 80115e2:	4770      	bx	lr
 80115e4:	20007457 	.word	0x20007457
 80115e8:	20007469 	.word	0x20007469
 80115ec:	20007468 	.word	0x20007468
 80115f0:	0801fd0c 	.word	0x0801fd0c
 80115f4:	00000000 	.word	0x00000000

080115f8 <rcutils_reset_error>:
 80115f8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8011618 <rcutils_reset_error+0x20>
 80115fc:	4a08      	ldr	r2, [pc, #32]	@ (8011620 <rcutils_reset_error+0x28>)
 80115fe:	4809      	ldr	r0, [pc, #36]	@ (8011624 <rcutils_reset_error+0x2c>)
 8011600:	4909      	ldr	r1, [pc, #36]	@ (8011628 <rcutils_reset_error+0x30>)
 8011602:	2300      	movs	r3, #0
 8011604:	8013      	strh	r3, [r2, #0]
 8011606:	ed82 7b02 	vstr	d7, [r2, #8]
 801160a:	4a08      	ldr	r2, [pc, #32]	@ (801162c <rcutils_reset_error+0x34>)
 801160c:	7003      	strb	r3, [r0, #0]
 801160e:	700b      	strb	r3, [r1, #0]
 8011610:	7013      	strb	r3, [r2, #0]
 8011612:	4770      	bx	lr
 8011614:	f3af 8000 	nop.w
	...
 8011620:	20007458 	.word	0x20007458
 8011624:	20007469 	.word	0x20007469
 8011628:	20007468 	.word	0x20007468
 801162c:	20007457 	.word	0x20007457

08011630 <rcutils_format_string_limit>:
 8011630:	b40f      	push	{r0, r1, r2, r3}
 8011632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011634:	b083      	sub	sp, #12
 8011636:	ac08      	add	r4, sp, #32
 8011638:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801163a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801163e:	b34e      	cbz	r6, 8011694 <rcutils_format_string_limit+0x64>
 8011640:	a808      	add	r0, sp, #32
 8011642:	f7ff fef7 	bl	8011434 <rcutils_allocator_is_valid>
 8011646:	b328      	cbz	r0, 8011694 <rcutils_format_string_limit+0x64>
 8011648:	2100      	movs	r1, #0
 801164a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801164c:	4632      	mov	r2, r6
 801164e:	4608      	mov	r0, r1
 8011650:	e9cd 3300 	strd	r3, r3, [sp]
 8011654:	f000 f8f4 	bl	8011840 <rcutils_vsnprintf>
 8011658:	1c43      	adds	r3, r0, #1
 801165a:	4605      	mov	r5, r0
 801165c:	d01a      	beq.n	8011694 <rcutils_format_string_limit+0x64>
 801165e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011660:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011662:	1c47      	adds	r7, r0, #1
 8011664:	429f      	cmp	r7, r3
 8011666:	bf84      	itt	hi
 8011668:	461f      	movhi	r7, r3
 801166a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801166e:	4638      	mov	r0, r7
 8011670:	9b08      	ldr	r3, [sp, #32]
 8011672:	4798      	blx	r3
 8011674:	4604      	mov	r4, r0
 8011676:	b168      	cbz	r0, 8011694 <rcutils_format_string_limit+0x64>
 8011678:	9b01      	ldr	r3, [sp, #4]
 801167a:	4632      	mov	r2, r6
 801167c:	4639      	mov	r1, r7
 801167e:	f000 f8df 	bl	8011840 <rcutils_vsnprintf>
 8011682:	2800      	cmp	r0, #0
 8011684:	db02      	blt.n	801168c <rcutils_format_string_limit+0x5c>
 8011686:	2300      	movs	r3, #0
 8011688:	5563      	strb	r3, [r4, r5]
 801168a:	e004      	b.n	8011696 <rcutils_format_string_limit+0x66>
 801168c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801168e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011690:	4620      	mov	r0, r4
 8011692:	4798      	blx	r3
 8011694:	2400      	movs	r4, #0
 8011696:	4620      	mov	r0, r4
 8011698:	b003      	add	sp, #12
 801169a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801169e:	b004      	add	sp, #16
 80116a0:	4770      	bx	lr
 80116a2:	bf00      	nop

080116a4 <rcutils_repl_str>:
 80116a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a8:	ed2d 8b02 	vpush	{d8}
 80116ac:	b087      	sub	sp, #28
 80116ae:	4680      	mov	r8, r0
 80116b0:	4608      	mov	r0, r1
 80116b2:	f8cd 8004 	str.w	r8, [sp, #4]
 80116b6:	ee08 2a10 	vmov	s16, r2
 80116ba:	468a      	mov	sl, r1
 80116bc:	4699      	mov	r9, r3
 80116be:	f7ee fdb9 	bl	8000234 <strlen>
 80116c2:	2600      	movs	r6, #0
 80116c4:	4647      	mov	r7, r8
 80116c6:	9002      	str	r0, [sp, #8]
 80116c8:	46b3      	mov	fp, r6
 80116ca:	2510      	movs	r5, #16
 80116cc:	46b0      	mov	r8, r6
 80116ce:	e01d      	b.n	801170c <rcutils_repl_str+0x68>
 80116d0:	f10b 0b01 	add.w	fp, fp, #1
 80116d4:	455e      	cmp	r6, fp
 80116d6:	d211      	bcs.n	80116fc <rcutils_repl_str+0x58>
 80116d8:	442e      	add	r6, r5
 80116da:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80116de:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80116e2:	00b1      	lsls	r1, r6, #2
 80116e4:	4798      	blx	r3
 80116e6:	2800      	cmp	r0, #0
 80116e8:	f000 8088 	beq.w	80117fc <rcutils_repl_str+0x158>
 80116ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80116f0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80116f4:	4680      	mov	r8, r0
 80116f6:	bf28      	it	cs
 80116f8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80116fc:	9a01      	ldr	r2, [sp, #4]
 80116fe:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8011702:	1aa2      	subs	r2, r4, r2
 8011704:	f843 2c04 	str.w	r2, [r3, #-4]
 8011708:	9b02      	ldr	r3, [sp, #8]
 801170a:	18e7      	adds	r7, r4, r3
 801170c:	4651      	mov	r1, sl
 801170e:	4638      	mov	r0, r7
 8011710:	f00c f82d 	bl	801d76e <strstr>
 8011714:	4604      	mov	r4, r0
 8011716:	4640      	mov	r0, r8
 8011718:	2c00      	cmp	r4, #0
 801171a:	d1d9      	bne.n	80116d0 <rcutils_repl_str+0x2c>
 801171c:	46b8      	mov	r8, r7
 801171e:	4607      	mov	r7, r0
 8011720:	4640      	mov	r0, r8
 8011722:	f7ee fd87 	bl	8000234 <strlen>
 8011726:	9b01      	ldr	r3, [sp, #4]
 8011728:	eba8 0303 	sub.w	r3, r8, r3
 801172c:	181c      	adds	r4, r3, r0
 801172e:	9404      	str	r4, [sp, #16]
 8011730:	f1bb 0f00 	cmp.w	fp, #0
 8011734:	d04a      	beq.n	80117cc <rcutils_repl_str+0x128>
 8011736:	ee18 0a10 	vmov	r0, s16
 801173a:	f7ee fd7b 	bl	8000234 <strlen>
 801173e:	9b02      	ldr	r3, [sp, #8]
 8011740:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011744:	1ac3      	subs	r3, r0, r3
 8011746:	fb0b 4303 	mla	r3, fp, r3, r4
 801174a:	461a      	mov	r2, r3
 801174c:	9305      	str	r3, [sp, #20]
 801174e:	4606      	mov	r6, r0
 8011750:	f8d9 3000 	ldr.w	r3, [r9]
 8011754:	1c50      	adds	r0, r2, #1
 8011756:	4798      	blx	r3
 8011758:	9003      	str	r0, [sp, #12]
 801175a:	2800      	cmp	r0, #0
 801175c:	d04f      	beq.n	80117fe <rcutils_repl_str+0x15a>
 801175e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011762:	683a      	ldr	r2, [r7, #0]
 8011764:	4641      	mov	r1, r8
 8011766:	f00c f8a4 	bl	801d8b2 <memcpy>
 801176a:	683d      	ldr	r5, [r7, #0]
 801176c:	9b03      	ldr	r3, [sp, #12]
 801176e:	9701      	str	r7, [sp, #4]
 8011770:	46ba      	mov	sl, r7
 8011772:	441d      	add	r5, r3
 8011774:	9f02      	ldr	r7, [sp, #8]
 8011776:	f8cd 9008 	str.w	r9, [sp, #8]
 801177a:	2401      	movs	r4, #1
 801177c:	46d1      	mov	r9, sl
 801177e:	ee18 aa10 	vmov	sl, s16
 8011782:	e00a      	b.n	801179a <rcutils_repl_str+0xf6>
 8011784:	f8d9 5000 	ldr.w	r5, [r9]
 8011788:	1aaa      	subs	r2, r5, r2
 801178a:	1885      	adds	r5, r0, r2
 801178c:	f00c f891 	bl	801d8b2 <memcpy>
 8011790:	45a3      	cmp	fp, r4
 8011792:	f104 0201 	add.w	r2, r4, #1
 8011796:	d935      	bls.n	8011804 <rcutils_repl_str+0x160>
 8011798:	4614      	mov	r4, r2
 801179a:	4632      	mov	r2, r6
 801179c:	4651      	mov	r1, sl
 801179e:	4628      	mov	r0, r5
 80117a0:	f00c f887 	bl	801d8b2 <memcpy>
 80117a4:	f859 2b04 	ldr.w	r2, [r9], #4
 80117a8:	45a3      	cmp	fp, r4
 80117aa:	443a      	add	r2, r7
 80117ac:	eb05 0006 	add.w	r0, r5, r6
 80117b0:	eb08 0102 	add.w	r1, r8, r2
 80117b4:	d1e6      	bne.n	8011784 <rcutils_repl_str+0xe0>
 80117b6:	9b04      	ldr	r3, [sp, #16]
 80117b8:	1a9a      	subs	r2, r3, r2
 80117ba:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80117be:	f00c f878 	bl	801d8b2 <memcpy>
 80117c2:	9a03      	ldr	r2, [sp, #12]
 80117c4:	9905      	ldr	r1, [sp, #20]
 80117c6:	2300      	movs	r3, #0
 80117c8:	5453      	strb	r3, [r2, r1]
 80117ca:	e00b      	b.n	80117e4 <rcutils_repl_str+0x140>
 80117cc:	4620      	mov	r0, r4
 80117ce:	f8d9 3000 	ldr.w	r3, [r9]
 80117d2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80117d6:	3001      	adds	r0, #1
 80117d8:	4798      	blx	r3
 80117da:	9003      	str	r0, [sp, #12]
 80117dc:	b110      	cbz	r0, 80117e4 <rcutils_repl_str+0x140>
 80117de:	9901      	ldr	r1, [sp, #4]
 80117e0:	f00c f85f 	bl	801d8a2 <strcpy>
 80117e4:	4638      	mov	r0, r7
 80117e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80117ea:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80117ee:	4798      	blx	r3
 80117f0:	9803      	ldr	r0, [sp, #12]
 80117f2:	b007      	add	sp, #28
 80117f4:	ecbd 8b02 	vpop	{d8}
 80117f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117fc:	4647      	mov	r7, r8
 80117fe:	2300      	movs	r3, #0
 8011800:	9303      	str	r3, [sp, #12]
 8011802:	e7ef      	b.n	80117e4 <rcutils_repl_str+0x140>
 8011804:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8011808:	e7db      	b.n	80117c2 <rcutils_repl_str+0x11e>
 801180a:	bf00      	nop

0801180c <rcutils_snprintf>:
 801180c:	b40c      	push	{r2, r3}
 801180e:	b530      	push	{r4, r5, lr}
 8011810:	b083      	sub	sp, #12
 8011812:	ab06      	add	r3, sp, #24
 8011814:	f853 2b04 	ldr.w	r2, [r3], #4
 8011818:	9301      	str	r3, [sp, #4]
 801181a:	b152      	cbz	r2, 8011832 <rcutils_snprintf+0x26>
 801181c:	b138      	cbz	r0, 801182e <rcutils_snprintf+0x22>
 801181e:	b141      	cbz	r1, 8011832 <rcutils_snprintf+0x26>
 8011820:	f00b feb2 	bl	801d588 <vsniprintf>
 8011824:	b003      	add	sp, #12
 8011826:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801182a:	b002      	add	sp, #8
 801182c:	4770      	bx	lr
 801182e:	2900      	cmp	r1, #0
 8011830:	d0f6      	beq.n	8011820 <rcutils_snprintf+0x14>
 8011832:	f00c f809 	bl	801d848 <__errno>
 8011836:	2316      	movs	r3, #22
 8011838:	6003      	str	r3, [r0, #0]
 801183a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801183e:	e7f1      	b.n	8011824 <rcutils_snprintf+0x18>

08011840 <rcutils_vsnprintf>:
 8011840:	b570      	push	{r4, r5, r6, lr}
 8011842:	b13a      	cbz	r2, 8011854 <rcutils_vsnprintf+0x14>
 8011844:	b120      	cbz	r0, 8011850 <rcutils_vsnprintf+0x10>
 8011846:	b129      	cbz	r1, 8011854 <rcutils_vsnprintf+0x14>
 8011848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801184c:	f00b be9c 	b.w	801d588 <vsniprintf>
 8011850:	2900      	cmp	r1, #0
 8011852:	d0f9      	beq.n	8011848 <rcutils_vsnprintf+0x8>
 8011854:	f00b fff8 	bl	801d848 <__errno>
 8011858:	2316      	movs	r3, #22
 801185a:	6003      	str	r3, [r0, #0]
 801185c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011860:	bd70      	pop	{r4, r5, r6, pc}
 8011862:	bf00      	nop

08011864 <rcutils_strdup>:
 8011864:	b084      	sub	sp, #16
 8011866:	b570      	push	{r4, r5, r6, lr}
 8011868:	b082      	sub	sp, #8
 801186a:	ac07      	add	r4, sp, #28
 801186c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8011870:	4605      	mov	r5, r0
 8011872:	b1b0      	cbz	r0, 80118a2 <rcutils_strdup+0x3e>
 8011874:	f7ee fcde 	bl	8000234 <strlen>
 8011878:	1c42      	adds	r2, r0, #1
 801187a:	9b07      	ldr	r3, [sp, #28]
 801187c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801187e:	9201      	str	r2, [sp, #4]
 8011880:	4606      	mov	r6, r0
 8011882:	4610      	mov	r0, r2
 8011884:	4798      	blx	r3
 8011886:	4604      	mov	r4, r0
 8011888:	b128      	cbz	r0, 8011896 <rcutils_strdup+0x32>
 801188a:	9a01      	ldr	r2, [sp, #4]
 801188c:	4629      	mov	r1, r5
 801188e:	f00c f810 	bl	801d8b2 <memcpy>
 8011892:	2300      	movs	r3, #0
 8011894:	55a3      	strb	r3, [r4, r6]
 8011896:	4620      	mov	r0, r4
 8011898:	b002      	add	sp, #8
 801189a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801189e:	b004      	add	sp, #16
 80118a0:	4770      	bx	lr
 80118a2:	4604      	mov	r4, r0
 80118a4:	e7f7      	b.n	8011896 <rcutils_strdup+0x32>
 80118a6:	bf00      	nop

080118a8 <rcutils_strndup>:
 80118a8:	b082      	sub	sp, #8
 80118aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118ac:	ac06      	add	r4, sp, #24
 80118ae:	e884 000c 	stmia.w	r4, {r2, r3}
 80118b2:	4605      	mov	r5, r0
 80118b4:	b188      	cbz	r0, 80118da <rcutils_strndup+0x32>
 80118b6:	1c4f      	adds	r7, r1, #1
 80118b8:	460e      	mov	r6, r1
 80118ba:	4638      	mov	r0, r7
 80118bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80118be:	4790      	blx	r2
 80118c0:	4604      	mov	r4, r0
 80118c2:	b128      	cbz	r0, 80118d0 <rcutils_strndup+0x28>
 80118c4:	463a      	mov	r2, r7
 80118c6:	4629      	mov	r1, r5
 80118c8:	f00b fff3 	bl	801d8b2 <memcpy>
 80118cc:	2300      	movs	r3, #0
 80118ce:	55a3      	strb	r3, [r4, r6]
 80118d0:	4620      	mov	r0, r4
 80118d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80118d6:	b002      	add	sp, #8
 80118d8:	4770      	bx	lr
 80118da:	4604      	mov	r4, r0
 80118dc:	e7f8      	b.n	80118d0 <rcutils_strndup+0x28>
 80118de:	bf00      	nop

080118e0 <rcutils_get_zero_initialized_string_map>:
 80118e0:	4b01      	ldr	r3, [pc, #4]	@ (80118e8 <rcutils_get_zero_initialized_string_map+0x8>)
 80118e2:	2000      	movs	r0, #0
 80118e4:	6018      	str	r0, [r3, #0]
 80118e6:	4770      	bx	lr
 80118e8:	2000746c 	.word	0x2000746c

080118ec <rcutils_string_map_reserve>:
 80118ec:	2800      	cmp	r0, #0
 80118ee:	d05f      	beq.n	80119b0 <rcutils_string_map_reserve+0xc4>
 80118f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118f4:	460c      	mov	r4, r1
 80118f6:	6801      	ldr	r1, [r0, #0]
 80118f8:	b082      	sub	sp, #8
 80118fa:	4605      	mov	r5, r0
 80118fc:	b129      	cbz	r1, 801190a <rcutils_string_map_reserve+0x1e>
 80118fe:	68cb      	ldr	r3, [r1, #12]
 8011900:	42a3      	cmp	r3, r4
 8011902:	d906      	bls.n	8011912 <rcutils_string_map_reserve+0x26>
 8011904:	461c      	mov	r4, r3
 8011906:	2900      	cmp	r1, #0
 8011908:	d1f9      	bne.n	80118fe <rcutils_string_map_reserve+0x12>
 801190a:	201f      	movs	r0, #31
 801190c:	b002      	add	sp, #8
 801190e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011912:	688b      	ldr	r3, [r1, #8]
 8011914:	42a3      	cmp	r3, r4
 8011916:	d047      	beq.n	80119a8 <rcutils_string_map_reserve+0xbc>
 8011918:	6a0e      	ldr	r6, [r1, #32]
 801191a:	2c00      	cmp	r4, #0
 801191c:	d034      	beq.n	8011988 <rcutils_string_map_reserve+0x9c>
 801191e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8011922:	d243      	bcs.n	80119ac <rcutils_string_map_reserve+0xc0>
 8011924:	00a7      	lsls	r7, r4, #2
 8011926:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801192a:	6808      	ldr	r0, [r1, #0]
 801192c:	4632      	mov	r2, r6
 801192e:	4639      	mov	r1, r7
 8011930:	47c0      	blx	r8
 8011932:	2800      	cmp	r0, #0
 8011934:	d03a      	beq.n	80119ac <rcutils_string_map_reserve+0xc0>
 8011936:	682b      	ldr	r3, [r5, #0]
 8011938:	4632      	mov	r2, r6
 801193a:	6018      	str	r0, [r3, #0]
 801193c:	4639      	mov	r1, r7
 801193e:	6858      	ldr	r0, [r3, #4]
 8011940:	47c0      	blx	r8
 8011942:	2800      	cmp	r0, #0
 8011944:	d032      	beq.n	80119ac <rcutils_string_map_reserve+0xc0>
 8011946:	682d      	ldr	r5, [r5, #0]
 8011948:	68ab      	ldr	r3, [r5, #8]
 801194a:	6068      	str	r0, [r5, #4]
 801194c:	42a3      	cmp	r3, r4
 801194e:	d226      	bcs.n	801199e <rcutils_string_map_reserve+0xb2>
 8011950:	682a      	ldr	r2, [r5, #0]
 8011952:	eb00 0c07 	add.w	ip, r0, r7
 8011956:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801195a:	45e6      	cmp	lr, ip
 801195c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8011960:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8011964:	d203      	bcs.n	801196e <rcutils_string_map_reserve+0x82>
 8011966:	eb02 0c07 	add.w	ip, r2, r7
 801196a:	4566      	cmp	r6, ip
 801196c:	d322      	bcc.n	80119b4 <rcutils_string_map_reserve+0xc8>
 801196e:	1ae3      	subs	r3, r4, r3
 8011970:	009a      	lsls	r2, r3, #2
 8011972:	4670      	mov	r0, lr
 8011974:	2100      	movs	r1, #0
 8011976:	9201      	str	r2, [sp, #4]
 8011978:	f00b fed2 	bl	801d720 <memset>
 801197c:	9a01      	ldr	r2, [sp, #4]
 801197e:	2100      	movs	r1, #0
 8011980:	4630      	mov	r0, r6
 8011982:	f00b fecd 	bl	801d720 <memset>
 8011986:	e00a      	b.n	801199e <rcutils_string_map_reserve+0xb2>
 8011988:	694f      	ldr	r7, [r1, #20]
 801198a:	6808      	ldr	r0, [r1, #0]
 801198c:	4631      	mov	r1, r6
 801198e:	47b8      	blx	r7
 8011990:	682b      	ldr	r3, [r5, #0]
 8011992:	4631      	mov	r1, r6
 8011994:	6858      	ldr	r0, [r3, #4]
 8011996:	601c      	str	r4, [r3, #0]
 8011998:	47b8      	blx	r7
 801199a:	682d      	ldr	r5, [r5, #0]
 801199c:	606c      	str	r4, [r5, #4]
 801199e:	2000      	movs	r0, #0
 80119a0:	60ac      	str	r4, [r5, #8]
 80119a2:	b002      	add	sp, #8
 80119a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119a8:	2000      	movs	r0, #0
 80119aa:	e7af      	b.n	801190c <rcutils_string_map_reserve+0x20>
 80119ac:	200a      	movs	r0, #10
 80119ae:	e7ad      	b.n	801190c <rcutils_string_map_reserve+0x20>
 80119b0:	200b      	movs	r0, #11
 80119b2:	4770      	bx	lr
 80119b4:	1f0b      	subs	r3, r1, #4
 80119b6:	4418      	add	r0, r3
 80119b8:	4413      	add	r3, r2
 80119ba:	3a04      	subs	r2, #4
 80119bc:	4417      	add	r7, r2
 80119be:	2200      	movs	r2, #0
 80119c0:	f843 2f04 	str.w	r2, [r3, #4]!
 80119c4:	42bb      	cmp	r3, r7
 80119c6:	f840 2f04 	str.w	r2, [r0, #4]!
 80119ca:	d1f9      	bne.n	80119c0 <rcutils_string_map_reserve+0xd4>
 80119cc:	e7e7      	b.n	801199e <rcutils_string_map_reserve+0xb2>
 80119ce:	bf00      	nop

080119d0 <rcutils_string_map_init>:
 80119d0:	b082      	sub	sp, #8
 80119d2:	b570      	push	{r4, r5, r6, lr}
 80119d4:	ac04      	add	r4, sp, #16
 80119d6:	e884 000c 	stmia.w	r4, {r2, r3}
 80119da:	b380      	cbz	r0, 8011a3e <rcutils_string_map_init+0x6e>
 80119dc:	6806      	ldr	r6, [r0, #0]
 80119de:	4604      	mov	r4, r0
 80119e0:	b12e      	cbz	r6, 80119ee <rcutils_string_map_init+0x1e>
 80119e2:	251e      	movs	r5, #30
 80119e4:	4628      	mov	r0, r5
 80119e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80119ea:	b002      	add	sp, #8
 80119ec:	4770      	bx	lr
 80119ee:	a804      	add	r0, sp, #16
 80119f0:	460d      	mov	r5, r1
 80119f2:	f7ff fd1f 	bl	8011434 <rcutils_allocator_is_valid>
 80119f6:	b310      	cbz	r0, 8011a3e <rcutils_string_map_init+0x6e>
 80119f8:	9b04      	ldr	r3, [sp, #16]
 80119fa:	9908      	ldr	r1, [sp, #32]
 80119fc:	2024      	movs	r0, #36	@ 0x24
 80119fe:	4798      	blx	r3
 8011a00:	6020      	str	r0, [r4, #0]
 8011a02:	b310      	cbz	r0, 8011a4a <rcutils_string_map_init+0x7a>
 8011a04:	f10d 0e10 	add.w	lr, sp, #16
 8011a08:	e9c0 6600 	strd	r6, r6, [r0]
 8011a0c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8011a10:	f100 0c10 	add.w	ip, r0, #16
 8011a14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011a18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a1c:	f8de 3000 	ldr.w	r3, [lr]
 8011a20:	f8cc 3000 	str.w	r3, [ip]
 8011a24:	4629      	mov	r1, r5
 8011a26:	4620      	mov	r0, r4
 8011a28:	f7ff ff60 	bl	80118ec <rcutils_string_map_reserve>
 8011a2c:	4605      	mov	r5, r0
 8011a2e:	2800      	cmp	r0, #0
 8011a30:	d0d8      	beq.n	80119e4 <rcutils_string_map_init+0x14>
 8011a32:	9b05      	ldr	r3, [sp, #20]
 8011a34:	9908      	ldr	r1, [sp, #32]
 8011a36:	6820      	ldr	r0, [r4, #0]
 8011a38:	4798      	blx	r3
 8011a3a:	6026      	str	r6, [r4, #0]
 8011a3c:	e7d2      	b.n	80119e4 <rcutils_string_map_init+0x14>
 8011a3e:	250b      	movs	r5, #11
 8011a40:	4628      	mov	r0, r5
 8011a42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a46:	b002      	add	sp, #8
 8011a48:	4770      	bx	lr
 8011a4a:	250a      	movs	r5, #10
 8011a4c:	e7ca      	b.n	80119e4 <rcutils_string_map_init+0x14>
 8011a4e:	bf00      	nop

08011a50 <rcutils_string_map_fini>:
 8011a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a54:	b082      	sub	sp, #8
 8011a56:	2800      	cmp	r0, #0
 8011a58:	d03a      	beq.n	8011ad0 <rcutils_string_map_fini+0x80>
 8011a5a:	6804      	ldr	r4, [r0, #0]
 8011a5c:	4606      	mov	r6, r0
 8011a5e:	2c00      	cmp	r4, #0
 8011a60:	d032      	beq.n	8011ac8 <rcutils_string_map_fini+0x78>
 8011a62:	68a3      	ldr	r3, [r4, #8]
 8011a64:	b32b      	cbz	r3, 8011ab2 <rcutils_string_map_fini+0x62>
 8011a66:	2500      	movs	r5, #0
 8011a68:	6822      	ldr	r2, [r4, #0]
 8011a6a:	462f      	mov	r7, r5
 8011a6c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8011a70:	b1e0      	cbz	r0, 8011aac <rcutils_string_map_fini+0x5c>
 8011a72:	6a21      	ldr	r1, [r4, #32]
 8011a74:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8011a78:	9101      	str	r1, [sp, #4]
 8011a7a:	47c0      	blx	r8
 8011a7c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011a80:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8011a84:	9901      	ldr	r1, [sp, #4]
 8011a86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011a8a:	47c0      	blx	r8
 8011a8c:	68e3      	ldr	r3, [r4, #12]
 8011a8e:	6862      	ldr	r2, [r4, #4]
 8011a90:	3b01      	subs	r3, #1
 8011a92:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8011a96:	60e3      	str	r3, [r4, #12]
 8011a98:	6834      	ldr	r4, [r6, #0]
 8011a9a:	68a3      	ldr	r3, [r4, #8]
 8011a9c:	3501      	adds	r5, #1
 8011a9e:	429d      	cmp	r5, r3
 8011aa0:	d207      	bcs.n	8011ab2 <rcutils_string_map_fini+0x62>
 8011aa2:	6822      	ldr	r2, [r4, #0]
 8011aa4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8011aa8:	2800      	cmp	r0, #0
 8011aaa:	d1e2      	bne.n	8011a72 <rcutils_string_map_fini+0x22>
 8011aac:	3501      	adds	r5, #1
 8011aae:	429d      	cmp	r5, r3
 8011ab0:	d3dc      	bcc.n	8011a6c <rcutils_string_map_fini+0x1c>
 8011ab2:	2100      	movs	r1, #0
 8011ab4:	4630      	mov	r0, r6
 8011ab6:	f7ff ff19 	bl	80118ec <rcutils_string_map_reserve>
 8011aba:	4604      	mov	r4, r0
 8011abc:	b920      	cbnz	r0, 8011ac8 <rcutils_string_map_fini+0x78>
 8011abe:	6830      	ldr	r0, [r6, #0]
 8011ac0:	6943      	ldr	r3, [r0, #20]
 8011ac2:	6a01      	ldr	r1, [r0, #32]
 8011ac4:	4798      	blx	r3
 8011ac6:	6034      	str	r4, [r6, #0]
 8011ac8:	4620      	mov	r0, r4
 8011aca:	b002      	add	sp, #8
 8011acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ad0:	240b      	movs	r4, #11
 8011ad2:	4620      	mov	r0, r4
 8011ad4:	b002      	add	sp, #8
 8011ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ada:	bf00      	nop

08011adc <rcutils_string_map_getn>:
 8011adc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ae0:	b300      	cbz	r0, 8011b24 <rcutils_string_map_getn+0x48>
 8011ae2:	6807      	ldr	r7, [r0, #0]
 8011ae4:	b1ff      	cbz	r7, 8011b26 <rcutils_string_map_getn+0x4a>
 8011ae6:	4688      	mov	r8, r1
 8011ae8:	b1e1      	cbz	r1, 8011b24 <rcutils_string_map_getn+0x48>
 8011aea:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8011aee:	683e      	ldr	r6, [r7, #0]
 8011af0:	f1ba 0f00 	cmp.w	sl, #0
 8011af4:	d016      	beq.n	8011b24 <rcutils_string_map_getn+0x48>
 8011af6:	4691      	mov	r9, r2
 8011af8:	3e04      	subs	r6, #4
 8011afa:	2400      	movs	r4, #0
 8011afc:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8011b00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011b04:	4628      	mov	r0, r5
 8011b06:	3401      	adds	r4, #1
 8011b08:	b155      	cbz	r5, 8011b20 <rcutils_string_map_getn+0x44>
 8011b0a:	f7ee fb93 	bl	8000234 <strlen>
 8011b0e:	4548      	cmp	r0, r9
 8011b10:	4602      	mov	r2, r0
 8011b12:	4629      	mov	r1, r5
 8011b14:	bf38      	it	cc
 8011b16:	464a      	movcc	r2, r9
 8011b18:	4640      	mov	r0, r8
 8011b1a:	f00b fe16 	bl	801d74a <strncmp>
 8011b1e:	b128      	cbz	r0, 8011b2c <rcutils_string_map_getn+0x50>
 8011b20:	45a2      	cmp	sl, r4
 8011b22:	d1eb      	bne.n	8011afc <rcutils_string_map_getn+0x20>
 8011b24:	2700      	movs	r7, #0
 8011b26:	4638      	mov	r0, r7
 8011b28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f853 700b 	ldr.w	r7, [r3, fp]
 8011b32:	4638      	mov	r0, r7
 8011b34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b38 <rcutils_system_time_now>:
 8011b38:	b308      	cbz	r0, 8011b7e <rcutils_system_time_now+0x46>
 8011b3a:	b570      	push	{r4, r5, r6, lr}
 8011b3c:	b084      	sub	sp, #16
 8011b3e:	4604      	mov	r4, r0
 8011b40:	4669      	mov	r1, sp
 8011b42:	2001      	movs	r0, #1
 8011b44:	f7f1 fcac 	bl	80034a0 <clock_gettime>
 8011b48:	e9dd 3500 	ldrd	r3, r5, [sp]
 8011b4c:	2d00      	cmp	r5, #0
 8011b4e:	db13      	blt.n	8011b78 <rcutils_system_time_now+0x40>
 8011b50:	9902      	ldr	r1, [sp, #8]
 8011b52:	2900      	cmp	r1, #0
 8011b54:	db0d      	blt.n	8011b72 <rcutils_system_time_now+0x3a>
 8011b56:	4e0b      	ldr	r6, [pc, #44]	@ (8011b84 <rcutils_system_time_now+0x4c>)
 8011b58:	fba3 3206 	umull	r3, r2, r3, r6
 8011b5c:	185b      	adds	r3, r3, r1
 8011b5e:	fb06 2205 	mla	r2, r6, r5, r2
 8011b62:	f04f 0000 	mov.w	r0, #0
 8011b66:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8011b6a:	e9c4 3200 	strd	r3, r2, [r4]
 8011b6e:	b004      	add	sp, #16
 8011b70:	bd70      	pop	{r4, r5, r6, pc}
 8011b72:	ea53 0205 	orrs.w	r2, r3, r5
 8011b76:	d1ee      	bne.n	8011b56 <rcutils_system_time_now+0x1e>
 8011b78:	2002      	movs	r0, #2
 8011b7a:	b004      	add	sp, #16
 8011b7c:	bd70      	pop	{r4, r5, r6, pc}
 8011b7e:	200b      	movs	r0, #11
 8011b80:	4770      	bx	lr
 8011b82:	bf00      	nop
 8011b84:	3b9aca00 	.word	0x3b9aca00

08011b88 <rcutils_steady_time_now>:
 8011b88:	b308      	cbz	r0, 8011bce <rcutils_steady_time_now+0x46>
 8011b8a:	b570      	push	{r4, r5, r6, lr}
 8011b8c:	b084      	sub	sp, #16
 8011b8e:	4604      	mov	r4, r0
 8011b90:	4669      	mov	r1, sp
 8011b92:	2000      	movs	r0, #0
 8011b94:	f7f1 fc84 	bl	80034a0 <clock_gettime>
 8011b98:	e9dd 3500 	ldrd	r3, r5, [sp]
 8011b9c:	2d00      	cmp	r5, #0
 8011b9e:	db13      	blt.n	8011bc8 <rcutils_steady_time_now+0x40>
 8011ba0:	9902      	ldr	r1, [sp, #8]
 8011ba2:	2900      	cmp	r1, #0
 8011ba4:	db0d      	blt.n	8011bc2 <rcutils_steady_time_now+0x3a>
 8011ba6:	4e0b      	ldr	r6, [pc, #44]	@ (8011bd4 <rcutils_steady_time_now+0x4c>)
 8011ba8:	fba3 3206 	umull	r3, r2, r3, r6
 8011bac:	185b      	adds	r3, r3, r1
 8011bae:	fb06 2205 	mla	r2, r6, r5, r2
 8011bb2:	f04f 0000 	mov.w	r0, #0
 8011bb6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8011bba:	e9c4 3200 	strd	r3, r2, [r4]
 8011bbe:	b004      	add	sp, #16
 8011bc0:	bd70      	pop	{r4, r5, r6, pc}
 8011bc2:	ea53 0205 	orrs.w	r2, r3, r5
 8011bc6:	d1ee      	bne.n	8011ba6 <rcutils_steady_time_now+0x1e>
 8011bc8:	2002      	movs	r0, #2
 8011bca:	b004      	add	sp, #16
 8011bcc:	bd70      	pop	{r4, r5, r6, pc}
 8011bce:	200b      	movs	r0, #11
 8011bd0:	4770      	bx	lr
 8011bd2:	bf00      	nop
 8011bd4:	3b9aca00 	.word	0x3b9aca00

08011bd8 <rmw_get_zero_initialized_init_options>:
 8011bd8:	b510      	push	{r4, lr}
 8011bda:	2238      	movs	r2, #56	@ 0x38
 8011bdc:	4604      	mov	r4, r0
 8011bde:	2100      	movs	r1, #0
 8011be0:	f00b fd9e 	bl	801d720 <memset>
 8011be4:	f104 0010 	add.w	r0, r4, #16
 8011be8:	f000 f80a 	bl	8011c00 <rmw_get_default_security_options>
 8011bec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011bf0:	60e3      	str	r3, [r4, #12]
 8011bf2:	4620      	mov	r0, r4
 8011bf4:	bd10      	pop	{r4, pc}
 8011bf6:	bf00      	nop

08011bf8 <rmw_get_default_publisher_options>:
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	6002      	str	r2, [r0, #0]
 8011bfc:	7102      	strb	r2, [r0, #4]
 8011bfe:	4770      	bx	lr

08011c00 <rmw_get_default_security_options>:
 8011c00:	2200      	movs	r2, #0
 8011c02:	7002      	strb	r2, [r0, #0]
 8011c04:	6042      	str	r2, [r0, #4]
 8011c06:	4770      	bx	lr

08011c08 <rmw_validate_full_topic_name>:
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	d057      	beq.n	8011cbc <rmw_validate_full_topic_name+0xb4>
 8011c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c10:	460d      	mov	r5, r1
 8011c12:	2900      	cmp	r1, #0
 8011c14:	d054      	beq.n	8011cc0 <rmw_validate_full_topic_name+0xb8>
 8011c16:	4616      	mov	r6, r2
 8011c18:	4604      	mov	r4, r0
 8011c1a:	f7ee fb0b 	bl	8000234 <strlen>
 8011c1e:	b148      	cbz	r0, 8011c34 <rmw_validate_full_topic_name+0x2c>
 8011c20:	7823      	ldrb	r3, [r4, #0]
 8011c22:	2b2f      	cmp	r3, #47	@ 0x2f
 8011c24:	d00d      	beq.n	8011c42 <rmw_validate_full_topic_name+0x3a>
 8011c26:	2302      	movs	r3, #2
 8011c28:	602b      	str	r3, [r5, #0]
 8011c2a:	b13e      	cbz	r6, 8011c3c <rmw_validate_full_topic_name+0x34>
 8011c2c:	2000      	movs	r0, #0
 8011c2e:	6030      	str	r0, [r6, #0]
 8011c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c34:	2301      	movs	r3, #1
 8011c36:	602b      	str	r3, [r5, #0]
 8011c38:	2e00      	cmp	r6, #0
 8011c3a:	d1f7      	bne.n	8011c2c <rmw_validate_full_topic_name+0x24>
 8011c3c:	2000      	movs	r0, #0
 8011c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c42:	1e43      	subs	r3, r0, #1
 8011c44:	5ce2      	ldrb	r2, [r4, r3]
 8011c46:	2a2f      	cmp	r2, #47	@ 0x2f
 8011c48:	d03c      	beq.n	8011cc4 <rmw_validate_full_topic_name+0xbc>
 8011c4a:	1e63      	subs	r3, r4, #1
 8011c4c:	eb03 0800 	add.w	r8, r3, r0
 8011c50:	f1c4 0e01 	rsb	lr, r4, #1
 8011c54:	eb0e 0703 	add.w	r7, lr, r3
 8011c58:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8011c5c:	f021 0220 	bic.w	r2, r1, #32
 8011c60:	3a41      	subs	r2, #65	@ 0x41
 8011c62:	2a19      	cmp	r2, #25
 8011c64:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8011c68:	d90b      	bls.n	8011c82 <rmw_validate_full_topic_name+0x7a>
 8011c6a:	295f      	cmp	r1, #95	@ 0x5f
 8011c6c:	d009      	beq.n	8011c82 <rmw_validate_full_topic_name+0x7a>
 8011c6e:	f1bc 0f0a 	cmp.w	ip, #10
 8011c72:	d906      	bls.n	8011c82 <rmw_validate_full_topic_name+0x7a>
 8011c74:	2304      	movs	r3, #4
 8011c76:	602b      	str	r3, [r5, #0]
 8011c78:	2e00      	cmp	r6, #0
 8011c7a:	d0df      	beq.n	8011c3c <rmw_validate_full_topic_name+0x34>
 8011c7c:	6037      	str	r7, [r6, #0]
 8011c7e:	2000      	movs	r0, #0
 8011c80:	e7d6      	b.n	8011c30 <rmw_validate_full_topic_name+0x28>
 8011c82:	4543      	cmp	r3, r8
 8011c84:	d1e6      	bne.n	8011c54 <rmw_validate_full_topic_name+0x4c>
 8011c86:	4f1a      	ldr	r7, [pc, #104]	@ (8011cf0 <rmw_validate_full_topic_name+0xe8>)
 8011c88:	2301      	movs	r3, #1
 8011c8a:	e004      	b.n	8011c96 <rmw_validate_full_topic_name+0x8e>
 8011c8c:	4298      	cmp	r0, r3
 8011c8e:	f104 0401 	add.w	r4, r4, #1
 8011c92:	d91c      	bls.n	8011cce <rmw_validate_full_topic_name+0xc6>
 8011c94:	4613      	mov	r3, r2
 8011c96:	4298      	cmp	r0, r3
 8011c98:	f103 0201 	add.w	r2, r3, #1
 8011c9c:	d0f6      	beq.n	8011c8c <rmw_validate_full_topic_name+0x84>
 8011c9e:	7821      	ldrb	r1, [r4, #0]
 8011ca0:	292f      	cmp	r1, #47	@ 0x2f
 8011ca2:	d1f3      	bne.n	8011c8c <rmw_validate_full_topic_name+0x84>
 8011ca4:	7861      	ldrb	r1, [r4, #1]
 8011ca6:	292f      	cmp	r1, #47	@ 0x2f
 8011ca8:	d01c      	beq.n	8011ce4 <rmw_validate_full_topic_name+0xdc>
 8011caa:	5dc9      	ldrb	r1, [r1, r7]
 8011cac:	0749      	lsls	r1, r1, #29
 8011cae:	d5ed      	bpl.n	8011c8c <rmw_validate_full_topic_name+0x84>
 8011cb0:	2206      	movs	r2, #6
 8011cb2:	602a      	str	r2, [r5, #0]
 8011cb4:	2e00      	cmp	r6, #0
 8011cb6:	d0c1      	beq.n	8011c3c <rmw_validate_full_topic_name+0x34>
 8011cb8:	6033      	str	r3, [r6, #0]
 8011cba:	e7bf      	b.n	8011c3c <rmw_validate_full_topic_name+0x34>
 8011cbc:	200b      	movs	r0, #11
 8011cbe:	4770      	bx	lr
 8011cc0:	200b      	movs	r0, #11
 8011cc2:	e7b5      	b.n	8011c30 <rmw_validate_full_topic_name+0x28>
 8011cc4:	2203      	movs	r2, #3
 8011cc6:	602a      	str	r2, [r5, #0]
 8011cc8:	2e00      	cmp	r6, #0
 8011cca:	d1f5      	bne.n	8011cb8 <rmw_validate_full_topic_name+0xb0>
 8011ccc:	e7b6      	b.n	8011c3c <rmw_validate_full_topic_name+0x34>
 8011cce:	28f7      	cmp	r0, #247	@ 0xf7
 8011cd0:	d802      	bhi.n	8011cd8 <rmw_validate_full_topic_name+0xd0>
 8011cd2:	2000      	movs	r0, #0
 8011cd4:	6028      	str	r0, [r5, #0]
 8011cd6:	e7ab      	b.n	8011c30 <rmw_validate_full_topic_name+0x28>
 8011cd8:	2307      	movs	r3, #7
 8011cda:	602b      	str	r3, [r5, #0]
 8011cdc:	2e00      	cmp	r6, #0
 8011cde:	d0ad      	beq.n	8011c3c <rmw_validate_full_topic_name+0x34>
 8011ce0:	23f6      	movs	r3, #246	@ 0xf6
 8011ce2:	e7e9      	b.n	8011cb8 <rmw_validate_full_topic_name+0xb0>
 8011ce4:	2205      	movs	r2, #5
 8011ce6:	602a      	str	r2, [r5, #0]
 8011ce8:	2e00      	cmp	r6, #0
 8011cea:	d1e5      	bne.n	8011cb8 <rmw_validate_full_topic_name+0xb0>
 8011cec:	e7a6      	b.n	8011c3c <rmw_validate_full_topic_name+0x34>
 8011cee:	bf00      	nop
 8011cf0:	08020c5e 	.word	0x08020c5e

08011cf4 <rmw_validate_namespace_with_size>:
 8011cf4:	b340      	cbz	r0, 8011d48 <rmw_validate_namespace_with_size+0x54>
 8011cf6:	b570      	push	{r4, r5, r6, lr}
 8011cf8:	4614      	mov	r4, r2
 8011cfa:	b0c2      	sub	sp, #264	@ 0x108
 8011cfc:	b332      	cbz	r2, 8011d4c <rmw_validate_namespace_with_size+0x58>
 8011cfe:	2901      	cmp	r1, #1
 8011d00:	460d      	mov	r5, r1
 8011d02:	461e      	mov	r6, r3
 8011d04:	d102      	bne.n	8011d0c <rmw_validate_namespace_with_size+0x18>
 8011d06:	7803      	ldrb	r3, [r0, #0]
 8011d08:	2b2f      	cmp	r3, #47	@ 0x2f
 8011d0a:	d012      	beq.n	8011d32 <rmw_validate_namespace_with_size+0x3e>
 8011d0c:	aa01      	add	r2, sp, #4
 8011d0e:	4669      	mov	r1, sp
 8011d10:	f7ff ff7a 	bl	8011c08 <rmw_validate_full_topic_name>
 8011d14:	b978      	cbnz	r0, 8011d36 <rmw_validate_namespace_with_size+0x42>
 8011d16:	9b00      	ldr	r3, [sp, #0]
 8011d18:	b14b      	cbz	r3, 8011d2e <rmw_validate_namespace_with_size+0x3a>
 8011d1a:	2b07      	cmp	r3, #7
 8011d1c:	d007      	beq.n	8011d2e <rmw_validate_namespace_with_size+0x3a>
 8011d1e:	1e5a      	subs	r2, r3, #1
 8011d20:	2a05      	cmp	r2, #5
 8011d22:	d82b      	bhi.n	8011d7c <rmw_validate_namespace_with_size+0x88>
 8011d24:	e8df f002 	tbb	[pc, r2]
 8011d28:	1e212427 	.word	0x1e212427
 8011d2c:	141b      	.short	0x141b
 8011d2e:	2df5      	cmp	r5, #245	@ 0xf5
 8011d30:	d803      	bhi.n	8011d3a <rmw_validate_namespace_with_size+0x46>
 8011d32:	2000      	movs	r0, #0
 8011d34:	6020      	str	r0, [r4, #0]
 8011d36:	b042      	add	sp, #264	@ 0x108
 8011d38:	bd70      	pop	{r4, r5, r6, pc}
 8011d3a:	2307      	movs	r3, #7
 8011d3c:	6023      	str	r3, [r4, #0]
 8011d3e:	2e00      	cmp	r6, #0
 8011d40:	d0f9      	beq.n	8011d36 <rmw_validate_namespace_with_size+0x42>
 8011d42:	23f4      	movs	r3, #244	@ 0xf4
 8011d44:	6033      	str	r3, [r6, #0]
 8011d46:	e7f6      	b.n	8011d36 <rmw_validate_namespace_with_size+0x42>
 8011d48:	200b      	movs	r0, #11
 8011d4a:	4770      	bx	lr
 8011d4c:	200b      	movs	r0, #11
 8011d4e:	e7f2      	b.n	8011d36 <rmw_validate_namespace_with_size+0x42>
 8011d50:	2306      	movs	r3, #6
 8011d52:	6023      	str	r3, [r4, #0]
 8011d54:	2e00      	cmp	r6, #0
 8011d56:	d0ee      	beq.n	8011d36 <rmw_validate_namespace_with_size+0x42>
 8011d58:	9b01      	ldr	r3, [sp, #4]
 8011d5a:	6033      	str	r3, [r6, #0]
 8011d5c:	e7eb      	b.n	8011d36 <rmw_validate_namespace_with_size+0x42>
 8011d5e:	2305      	movs	r3, #5
 8011d60:	6023      	str	r3, [r4, #0]
 8011d62:	e7f7      	b.n	8011d54 <rmw_validate_namespace_with_size+0x60>
 8011d64:	2304      	movs	r3, #4
 8011d66:	6023      	str	r3, [r4, #0]
 8011d68:	e7f4      	b.n	8011d54 <rmw_validate_namespace_with_size+0x60>
 8011d6a:	2303      	movs	r3, #3
 8011d6c:	6023      	str	r3, [r4, #0]
 8011d6e:	e7f1      	b.n	8011d54 <rmw_validate_namespace_with_size+0x60>
 8011d70:	2302      	movs	r3, #2
 8011d72:	6023      	str	r3, [r4, #0]
 8011d74:	e7ee      	b.n	8011d54 <rmw_validate_namespace_with_size+0x60>
 8011d76:	2301      	movs	r3, #1
 8011d78:	6023      	str	r3, [r4, #0]
 8011d7a:	e7eb      	b.n	8011d54 <rmw_validate_namespace_with_size+0x60>
 8011d7c:	4a03      	ldr	r2, [pc, #12]	@ (8011d8c <rmw_validate_namespace_with_size+0x98>)
 8011d7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011d82:	a802      	add	r0, sp, #8
 8011d84:	f7ff fd42 	bl	801180c <rcutils_snprintf>
 8011d88:	2001      	movs	r0, #1
 8011d8a:	e7d4      	b.n	8011d36 <rmw_validate_namespace_with_size+0x42>
 8011d8c:	0801f664 	.word	0x0801f664

08011d90 <rmw_validate_namespace>:
 8011d90:	b168      	cbz	r0, 8011dae <rmw_validate_namespace+0x1e>
 8011d92:	b570      	push	{r4, r5, r6, lr}
 8011d94:	460d      	mov	r5, r1
 8011d96:	4616      	mov	r6, r2
 8011d98:	4604      	mov	r4, r0
 8011d9a:	f7ee fa4b 	bl	8000234 <strlen>
 8011d9e:	4633      	mov	r3, r6
 8011da0:	4601      	mov	r1, r0
 8011da2:	462a      	mov	r2, r5
 8011da4:	4620      	mov	r0, r4
 8011da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011daa:	f7ff bfa3 	b.w	8011cf4 <rmw_validate_namespace_with_size>
 8011dae:	200b      	movs	r0, #11
 8011db0:	4770      	bx	lr
 8011db2:	bf00      	nop

08011db4 <rmw_namespace_validation_result_string>:
 8011db4:	2807      	cmp	r0, #7
 8011db6:	bf9a      	itte	ls
 8011db8:	4b02      	ldrls	r3, [pc, #8]	@ (8011dc4 <rmw_namespace_validation_result_string+0x10>)
 8011dba:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8011dbe:	4802      	ldrhi	r0, [pc, #8]	@ (8011dc8 <rmw_namespace_validation_result_string+0x14>)
 8011dc0:	4770      	bx	lr
 8011dc2:	bf00      	nop
 8011dc4:	0801f85c 	.word	0x0801f85c
 8011dc8:	0801f6b4 	.word	0x0801f6b4

08011dcc <rmw_validate_node_name>:
 8011dcc:	2800      	cmp	r0, #0
 8011dce:	d03b      	beq.n	8011e48 <rmw_validate_node_name+0x7c>
 8011dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dd4:	460d      	mov	r5, r1
 8011dd6:	2900      	cmp	r1, #0
 8011dd8:	d038      	beq.n	8011e4c <rmw_validate_node_name+0x80>
 8011dda:	4616      	mov	r6, r2
 8011ddc:	4604      	mov	r4, r0
 8011dde:	f7ee fa29 	bl	8000234 <strlen>
 8011de2:	b1e0      	cbz	r0, 8011e1e <rmw_validate_node_name+0x52>
 8011de4:	1e63      	subs	r3, r4, #1
 8011de6:	eb03 0800 	add.w	r8, r3, r0
 8011dea:	f1c4 0101 	rsb	r1, r4, #1
 8011dee:	18cf      	adds	r7, r1, r3
 8011df0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8011df4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8011df8:	f02e 0c20 	bic.w	ip, lr, #32
 8011dfc:	2a09      	cmp	r2, #9
 8011dfe:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8011e02:	d914      	bls.n	8011e2e <rmw_validate_node_name+0x62>
 8011e04:	f1bc 0f19 	cmp.w	ip, #25
 8011e08:	d911      	bls.n	8011e2e <rmw_validate_node_name+0x62>
 8011e0a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8011e0e:	d00e      	beq.n	8011e2e <rmw_validate_node_name+0x62>
 8011e10:	2302      	movs	r3, #2
 8011e12:	602b      	str	r3, [r5, #0]
 8011e14:	b106      	cbz	r6, 8011e18 <rmw_validate_node_name+0x4c>
 8011e16:	6037      	str	r7, [r6, #0]
 8011e18:	2000      	movs	r0, #0
 8011e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e1e:	2301      	movs	r3, #1
 8011e20:	602b      	str	r3, [r5, #0]
 8011e22:	2e00      	cmp	r6, #0
 8011e24:	d0f8      	beq.n	8011e18 <rmw_validate_node_name+0x4c>
 8011e26:	2000      	movs	r0, #0
 8011e28:	6030      	str	r0, [r6, #0]
 8011e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e2e:	4543      	cmp	r3, r8
 8011e30:	d1dd      	bne.n	8011dee <rmw_validate_node_name+0x22>
 8011e32:	7822      	ldrb	r2, [r4, #0]
 8011e34:	4b0d      	ldr	r3, [pc, #52]	@ (8011e6c <rmw_validate_node_name+0xa0>)
 8011e36:	5cd3      	ldrb	r3, [r2, r3]
 8011e38:	f013 0304 	ands.w	r3, r3, #4
 8011e3c:	d110      	bne.n	8011e60 <rmw_validate_node_name+0x94>
 8011e3e:	28ff      	cmp	r0, #255	@ 0xff
 8011e40:	d806      	bhi.n	8011e50 <rmw_validate_node_name+0x84>
 8011e42:	602b      	str	r3, [r5, #0]
 8011e44:	4618      	mov	r0, r3
 8011e46:	e7e8      	b.n	8011e1a <rmw_validate_node_name+0x4e>
 8011e48:	200b      	movs	r0, #11
 8011e4a:	4770      	bx	lr
 8011e4c:	200b      	movs	r0, #11
 8011e4e:	e7e4      	b.n	8011e1a <rmw_validate_node_name+0x4e>
 8011e50:	2204      	movs	r2, #4
 8011e52:	602a      	str	r2, [r5, #0]
 8011e54:	2e00      	cmp	r6, #0
 8011e56:	d0df      	beq.n	8011e18 <rmw_validate_node_name+0x4c>
 8011e58:	22fe      	movs	r2, #254	@ 0xfe
 8011e5a:	6032      	str	r2, [r6, #0]
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	e7dc      	b.n	8011e1a <rmw_validate_node_name+0x4e>
 8011e60:	2303      	movs	r3, #3
 8011e62:	602b      	str	r3, [r5, #0]
 8011e64:	2e00      	cmp	r6, #0
 8011e66:	d1de      	bne.n	8011e26 <rmw_validate_node_name+0x5a>
 8011e68:	e7d6      	b.n	8011e18 <rmw_validate_node_name+0x4c>
 8011e6a:	bf00      	nop
 8011e6c:	08020c5e 	.word	0x08020c5e

08011e70 <rmw_node_name_validation_result_string>:
 8011e70:	2804      	cmp	r0, #4
 8011e72:	bf9a      	itte	ls
 8011e74:	4b02      	ldrls	r3, [pc, #8]	@ (8011e80 <rmw_node_name_validation_result_string+0x10>)
 8011e76:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8011e7a:	4802      	ldrhi	r0, [pc, #8]	@ (8011e84 <rmw_node_name_validation_result_string+0x14>)
 8011e7c:	4770      	bx	lr
 8011e7e:	bf00      	nop
 8011e80:	0801f968 	.word	0x0801f968
 8011e84:	0801f87c 	.word	0x0801f87c

08011e88 <rmw_uros_set_custom_transport>:
 8011e88:	b470      	push	{r4, r5, r6}
 8011e8a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8011e8e:	b162      	cbz	r2, 8011eaa <rmw_uros_set_custom_transport+0x22>
 8011e90:	b15b      	cbz	r3, 8011eaa <rmw_uros_set_custom_transport+0x22>
 8011e92:	b155      	cbz	r5, 8011eaa <rmw_uros_set_custom_transport+0x22>
 8011e94:	b14e      	cbz	r6, 8011eaa <rmw_uros_set_custom_transport+0x22>
 8011e96:	4c06      	ldr	r4, [pc, #24]	@ (8011eb0 <rmw_uros_set_custom_transport+0x28>)
 8011e98:	7020      	strb	r0, [r4, #0]
 8011e9a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8011e9e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011ea2:	6166      	str	r6, [r4, #20]
 8011ea4:	2000      	movs	r0, #0
 8011ea6:	bc70      	pop	{r4, r5, r6}
 8011ea8:	4770      	bx	lr
 8011eaa:	200b      	movs	r0, #11
 8011eac:	bc70      	pop	{r4, r5, r6}
 8011eae:	4770      	bx	lr
 8011eb0:	20007470 	.word	0x20007470

08011eb4 <rmw_create_client>:
 8011eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eb8:	b091      	sub	sp, #68	@ 0x44
 8011eba:	2800      	cmp	r0, #0
 8011ebc:	f000 80ba 	beq.w	8012034 <rmw_create_client+0x180>
 8011ec0:	4689      	mov	r9, r1
 8011ec2:	2900      	cmp	r1, #0
 8011ec4:	f000 80b6 	beq.w	8012034 <rmw_create_client+0x180>
 8011ec8:	4606      	mov	r6, r0
 8011eca:	6800      	ldr	r0, [r0, #0]
 8011ecc:	4614      	mov	r4, r2
 8011ece:	461d      	mov	r5, r3
 8011ed0:	f001 fd62 	bl	8013998 <is_uxrce_rmw_identifier_valid>
 8011ed4:	2800      	cmp	r0, #0
 8011ed6:	f000 80ad 	beq.w	8012034 <rmw_create_client+0x180>
 8011eda:	2c00      	cmp	r4, #0
 8011edc:	f000 80aa 	beq.w	8012034 <rmw_create_client+0x180>
 8011ee0:	7823      	ldrb	r3, [r4, #0]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	f000 80a6 	beq.w	8012034 <rmw_create_client+0x180>
 8011ee8:	2d00      	cmp	r5, #0
 8011eea:	f000 80a3 	beq.w	8012034 <rmw_create_client+0x180>
 8011eee:	4854      	ldr	r0, [pc, #336]	@ (8012040 <rmw_create_client+0x18c>)
 8011ef0:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8011ef4:	f009 fd24 	bl	801b940 <get_memory>
 8011ef8:	4606      	mov	r6, r0
 8011efa:	2800      	cmp	r0, #0
 8011efc:	f000 809b 	beq.w	8012036 <rmw_create_client+0x182>
 8011f00:	6887      	ldr	r7, [r0, #8]
 8011f02:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8011f06:	f000 f90b 	bl	8012120 <rmw_get_implementation_identifier>
 8011f0a:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 8011f0e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8011f10:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8011f14:	4620      	mov	r0, r4
 8011f16:	f7ee f98d 	bl	8000234 <strlen>
 8011f1a:	1c42      	adds	r2, r0, #1
 8011f1c:	2a3c      	cmp	r2, #60	@ 0x3c
 8011f1e:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 8011f22:	f200 8084 	bhi.w	801202e <rmw_create_client+0x17a>
 8011f26:	4621      	mov	r1, r4
 8011f28:	4650      	mov	r0, sl
 8011f2a:	f00b fcc2 	bl	801d8b2 <memcpy>
 8011f2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011f32:	4629      	mov	r1, r5
 8011f34:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 8011f38:	677b      	str	r3, [r7, #116]	@ 0x74
 8011f3a:	2250      	movs	r2, #80	@ 0x50
 8011f3c:	f107 0020 	add.w	r0, r7, #32
 8011f40:	f00b fcb7 	bl	801d8b2 <memcpy>
 8011f44:	493f      	ldr	r1, [pc, #252]	@ (8012044 <rmw_create_client+0x190>)
 8011f46:	4648      	mov	r0, r9
 8011f48:	f001 ff24 	bl	8013d94 <get_service_typesupport_handle>
 8011f4c:	2800      	cmp	r0, #0
 8011f4e:	d06e      	beq.n	801202e <rmw_create_client+0x17a>
 8011f50:	6843      	ldr	r3, [r0, #4]
 8011f52:	617b      	str	r3, [r7, #20]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d06a      	beq.n	801202e <rmw_create_client+0x17a>
 8011f58:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011f5c:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 801204c <rmw_create_client+0x198>
 8011f60:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8012050 <rmw_create_client+0x19c>
 8011f64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011f68:	2107      	movs	r1, #7
 8011f6a:	f8b3 05a0 	ldrh.w	r0, [r3, #1440]	@ 0x5a0
 8011f6e:	1c42      	adds	r2, r0, #1
 8011f70:	f8a3 25a0 	strh.w	r2, [r3, #1440]	@ 0x5a0
 8011f74:	f003 fa40 	bl	80153f8 <uxr_object_id>
 8011f78:	2364      	movs	r3, #100	@ 0x64
 8011f7a:	6138      	str	r0, [r7, #16]
 8011f7c:	4652      	mov	r2, sl
 8011f7e:	6978      	ldr	r0, [r7, #20]
 8011f80:	4649      	mov	r1, r9
 8011f82:	f001 fc57 	bl	8013834 <generate_service_types>
 8011f86:	2800      	cmp	r0, #0
 8011f88:	d051      	beq.n	801202e <rmw_create_client+0x17a>
 8011f8a:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 8012054 <rmw_create_client+0x1a0>
 8011f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8012048 <rmw_create_client+0x194>)
 8011f90:	233c      	movs	r3, #60	@ 0x3c
 8011f92:	4659      	mov	r1, fp
 8011f94:	4620      	mov	r0, r4
 8011f96:	f001 fc1b 	bl	80137d0 <generate_service_topics>
 8011f9a:	2800      	cmp	r0, #0
 8011f9c:	d047      	beq.n	801202e <rmw_create_client+0x17a>
 8011f9e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011fa2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8011fa6:	a80c      	add	r0, sp, #48	@ 0x30
 8011fa8:	4629      	mov	r1, r5
 8011faa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011fae:	f001 fbf5 	bl	801379c <convert_qos_profile>
 8011fb2:	4a25      	ldr	r2, [pc, #148]	@ (8012048 <rmw_create_client+0x194>)
 8011fb4:	9400      	str	r4, [sp, #0]
 8011fb6:	e9cd b203 	strd	fp, r2, [sp, #12]
 8011fba:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8011fbe:	a80c      	add	r0, sp, #48	@ 0x30
 8011fc0:	c803      	ldmia	r0, {r0, r1}
 8011fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fc4:	9005      	str	r0, [sp, #20]
 8011fc6:	9a08      	ldr	r2, [sp, #32]
 8011fc8:	f8ad 1018 	strh.w	r1, [sp, #24]
 8011fcc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011fd0:	2306      	movs	r3, #6
 8011fd2:	9307      	str	r3, [sp, #28]
 8011fd4:	6811      	ldr	r1, [r2, #0]
 8011fd6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8011fda:	693a      	ldr	r2, [r7, #16]
 8011fdc:	f003 f8d6 	bl	801518c <uxr_buffer_create_requester_bin>
 8011fe0:	4602      	mov	r2, r0
 8011fe2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8011fe6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011fea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011fee:	f001 fbb9 	bl	8013764 <run_xrce_session>
 8011ff2:	b1e0      	cbz	r0, 801202e <rmw_create_client+0x17a>
 8011ff4:	7a2b      	ldrb	r3, [r5, #8]
 8011ff6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	2b02      	cmp	r3, #2
 8011ffe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8012002:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 8012006:	bf0c      	ite	eq
 8012008:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 801200c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 8012010:	673a      	str	r2, [r7, #112]	@ 0x70
 8012012:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012014:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8012018:	ab0e      	add	r3, sp, #56	@ 0x38
 801201a:	9300      	str	r3, [sp, #0]
 801201c:	6811      	ldr	r1, [r2, #0]
 801201e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012020:	693a      	ldr	r2, [r7, #16]
 8012022:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012026:	f003 fa17 	bl	8015458 <uxr_buffer_request_data>
 801202a:	8338      	strh	r0, [r7, #24]
 801202c:	e003      	b.n	8012036 <rmw_create_client+0x182>
 801202e:	4630      	mov	r0, r6
 8012030:	f001 fa82 	bl	8013538 <rmw_uxrce_fini_client_memory>
 8012034:	2600      	movs	r6, #0
 8012036:	4630      	mov	r0, r6
 8012038:	b011      	add	sp, #68	@ 0x44
 801203a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801203e:	bf00      	nop
 8012040:	20007748 	.word	0x20007748
 8012044:	0801eee8 	.word	0x0801eee8
 8012048:	2000752c 	.word	0x2000752c
 801204c:	20007568 	.word	0x20007568
 8012050:	200074c8 	.word	0x200074c8
 8012054:	2000748c 	.word	0x2000748c

08012058 <rmw_destroy_client>:
 8012058:	b570      	push	{r4, r5, r6, lr}
 801205a:	b128      	cbz	r0, 8012068 <rmw_destroy_client+0x10>
 801205c:	4604      	mov	r4, r0
 801205e:	6800      	ldr	r0, [r0, #0]
 8012060:	460d      	mov	r5, r1
 8012062:	f001 fc99 	bl	8013998 <is_uxrce_rmw_identifier_valid>
 8012066:	b910      	cbnz	r0, 801206e <rmw_destroy_client+0x16>
 8012068:	2401      	movs	r4, #1
 801206a:	4620      	mov	r0, r4
 801206c:	bd70      	pop	{r4, r5, r6, pc}
 801206e:	6863      	ldr	r3, [r4, #4]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d0f9      	beq.n	8012068 <rmw_destroy_client+0x10>
 8012074:	2d00      	cmp	r5, #0
 8012076:	d0f7      	beq.n	8012068 <rmw_destroy_client+0x10>
 8012078:	6828      	ldr	r0, [r5, #0]
 801207a:	f001 fc8d 	bl	8013998 <is_uxrce_rmw_identifier_valid>
 801207e:	2800      	cmp	r0, #0
 8012080:	d0f2      	beq.n	8012068 <rmw_destroy_client+0x10>
 8012082:	686e      	ldr	r6, [r5, #4]
 8012084:	2e00      	cmp	r6, #0
 8012086:	d0ef      	beq.n	8012068 <rmw_destroy_client+0x10>
 8012088:	6864      	ldr	r4, [r4, #4]
 801208a:	6932      	ldr	r2, [r6, #16]
 801208c:	6920      	ldr	r0, [r4, #16]
 801208e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012092:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012096:	6819      	ldr	r1, [r3, #0]
 8012098:	f003 fa18 	bl	80154cc <uxr_buffer_cancel_data>
 801209c:	4602      	mov	r2, r0
 801209e:	6920      	ldr	r0, [r4, #16]
 80120a0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80120a4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80120a8:	f001 fb5c 	bl	8013764 <run_xrce_session>
 80120ac:	6920      	ldr	r0, [r4, #16]
 80120ae:	6932      	ldr	r2, [r6, #16]
 80120b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80120b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80120b8:	6819      	ldr	r1, [r3, #0]
 80120ba:	f002 ff0d 	bl	8014ed8 <uxr_buffer_delete_entity>
 80120be:	4602      	mov	r2, r0
 80120c0:	6920      	ldr	r0, [r4, #16]
 80120c2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80120c6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80120ca:	f001 fb4b 	bl	8013764 <run_xrce_session>
 80120ce:	2800      	cmp	r0, #0
 80120d0:	4628      	mov	r0, r5
 80120d2:	bf14      	ite	ne
 80120d4:	2400      	movne	r4, #0
 80120d6:	2402      	moveq	r4, #2
 80120d8:	f001 fa2e 	bl	8013538 <rmw_uxrce_fini_client_memory>
 80120dc:	e7c5      	b.n	801206a <rmw_destroy_client+0x12>
 80120de:	bf00      	nop

080120e0 <rmw_client_request_publisher_get_actual_qos>:
 80120e0:	b150      	cbz	r0, 80120f8 <rmw_client_request_publisher_get_actual_qos+0x18>
 80120e2:	b508      	push	{r3, lr}
 80120e4:	460b      	mov	r3, r1
 80120e6:	b149      	cbz	r1, 80120fc <rmw_client_request_publisher_get_actual_qos+0x1c>
 80120e8:	6841      	ldr	r1, [r0, #4]
 80120ea:	2250      	movs	r2, #80	@ 0x50
 80120ec:	3120      	adds	r1, #32
 80120ee:	4618      	mov	r0, r3
 80120f0:	f00b fbdf 	bl	801d8b2 <memcpy>
 80120f4:	2000      	movs	r0, #0
 80120f6:	bd08      	pop	{r3, pc}
 80120f8:	200b      	movs	r0, #11
 80120fa:	4770      	bx	lr
 80120fc:	200b      	movs	r0, #11
 80120fe:	bd08      	pop	{r3, pc}

08012100 <rmw_client_response_subscription_get_actual_qos>:
 8012100:	b150      	cbz	r0, 8012118 <rmw_client_response_subscription_get_actual_qos+0x18>
 8012102:	b508      	push	{r3, lr}
 8012104:	460b      	mov	r3, r1
 8012106:	b149      	cbz	r1, 801211c <rmw_client_response_subscription_get_actual_qos+0x1c>
 8012108:	6841      	ldr	r1, [r0, #4]
 801210a:	2250      	movs	r2, #80	@ 0x50
 801210c:	3120      	adds	r1, #32
 801210e:	4618      	mov	r0, r3
 8012110:	f00b fbcf 	bl	801d8b2 <memcpy>
 8012114:	2000      	movs	r0, #0
 8012116:	bd08      	pop	{r3, pc}
 8012118:	200b      	movs	r0, #11
 801211a:	4770      	bx	lr
 801211c:	200b      	movs	r0, #11
 801211e:	bd08      	pop	{r3, pc}

08012120 <rmw_get_implementation_identifier>:
 8012120:	4b01      	ldr	r3, [pc, #4]	@ (8012128 <rmw_get_implementation_identifier+0x8>)
 8012122:	6818      	ldr	r0, [r3, #0]
 8012124:	4770      	bx	lr
 8012126:	bf00      	nop
 8012128:	08020ae8 	.word	0x08020ae8

0801212c <rmw_init_options_init>:
 801212c:	b084      	sub	sp, #16
 801212e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012130:	b083      	sub	sp, #12
 8012132:	ad09      	add	r5, sp, #36	@ 0x24
 8012134:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8012138:	b130      	cbz	r0, 8012148 <rmw_init_options_init+0x1c>
 801213a:	4604      	mov	r4, r0
 801213c:	4628      	mov	r0, r5
 801213e:	f7ff f979 	bl	8011434 <rcutils_allocator_is_valid>
 8012142:	b108      	cbz	r0, 8012148 <rmw_init_options_init+0x1c>
 8012144:	68a6      	ldr	r6, [r4, #8]
 8012146:	b12e      	cbz	r6, 8012154 <rmw_init_options_init+0x28>
 8012148:	200b      	movs	r0, #11
 801214a:	b003      	add	sp, #12
 801214c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012150:	b004      	add	sp, #16
 8012152:	4770      	bx	lr
 8012154:	2200      	movs	r2, #0
 8012156:	2300      	movs	r3, #0
 8012158:	e9c4 2300 	strd	r2, r3, [r4]
 801215c:	4b22      	ldr	r3, [pc, #136]	@ (80121e8 <rmw_init_options_init+0xbc>)
 801215e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 80121f8 <rmw_init_options_init+0xcc>
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	60a3      	str	r3, [r4, #8]
 8012166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012168:	f104 0c20 	add.w	ip, r4, #32
 801216c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012170:	466f      	mov	r7, sp
 8012172:	682b      	ldr	r3, [r5, #0]
 8012174:	f8cc 3000 	str.w	r3, [ip]
 8012178:	4638      	mov	r0, r7
 801217a:	f8c4 e01c 	str.w	lr, [r4, #28]
 801217e:	60e6      	str	r6, [r4, #12]
 8012180:	f7ff fd3e 	bl	8011c00 <rmw_get_default_security_options>
 8012184:	e897 0003 	ldmia.w	r7, {r0, r1}
 8012188:	f104 0310 	add.w	r3, r4, #16
 801218c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012190:	2203      	movs	r2, #3
 8012192:	4816      	ldr	r0, [pc, #88]	@ (80121ec <rmw_init_options_init+0xc0>)
 8012194:	4916      	ldr	r1, [pc, #88]	@ (80121f0 <rmw_init_options_init+0xc4>)
 8012196:	7626      	strb	r6, [r4, #24]
 8012198:	f001 f90e 	bl	80133b8 <rmw_uxrce_init_init_options_impl_memory>
 801219c:	4813      	ldr	r0, [pc, #76]	@ (80121ec <rmw_init_options_init+0xc0>)
 801219e:	f009 fbcf 	bl	801b940 <get_memory>
 80121a2:	b1f0      	cbz	r0, 80121e2 <rmw_init_options_init+0xb6>
 80121a4:	4a13      	ldr	r2, [pc, #76]	@ (80121f4 <rmw_init_options_init+0xc8>)
 80121a6:	6883      	ldr	r3, [r0, #8]
 80121a8:	6851      	ldr	r1, [r2, #4]
 80121aa:	7810      	ldrb	r0, [r2, #0]
 80121ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80121ae:	7418      	strb	r0, [r3, #16]
 80121b0:	6159      	str	r1, [r3, #20]
 80121b2:	68d1      	ldr	r1, [r2, #12]
 80121b4:	61d9      	str	r1, [r3, #28]
 80121b6:	6911      	ldr	r1, [r2, #16]
 80121b8:	6219      	str	r1, [r3, #32]
 80121ba:	6951      	ldr	r1, [r2, #20]
 80121bc:	6892      	ldr	r2, [r2, #8]
 80121be:	619a      	str	r2, [r3, #24]
 80121c0:	6259      	str	r1, [r3, #36]	@ 0x24
 80121c2:	f005 f99f 	bl	8017504 <uxr_nanos>
 80121c6:	f00a fef5 	bl	801cfb4 <srand>
 80121ca:	f00a ff21 	bl	801d010 <rand>
 80121ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80121d0:	6298      	str	r0, [r3, #40]	@ 0x28
 80121d2:	2800      	cmp	r0, #0
 80121d4:	d0f9      	beq.n	80121ca <rmw_init_options_init+0x9e>
 80121d6:	2000      	movs	r0, #0
 80121d8:	b003      	add	sp, #12
 80121da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80121de:	b004      	add	sp, #16
 80121e0:	4770      	bx	lr
 80121e2:	2001      	movs	r0, #1
 80121e4:	e7b1      	b.n	801214a <rmw_init_options_init+0x1e>
 80121e6:	bf00      	nop
 80121e8:	08020ae8 	.word	0x08020ae8
 80121ec:	2000c324 	.word	0x2000c324
 80121f0:	20007af8 	.word	0x20007af8
 80121f4:	20007470 	.word	0x20007470
 80121f8:	0801f3dc 	.word	0x0801f3dc

080121fc <rmw_init_options_copy>:
 80121fc:	b570      	push	{r4, r5, r6, lr}
 80121fe:	b158      	cbz	r0, 8012218 <rmw_init_options_copy+0x1c>
 8012200:	460d      	mov	r5, r1
 8012202:	b149      	cbz	r1, 8012218 <rmw_init_options_copy+0x1c>
 8012204:	4604      	mov	r4, r0
 8012206:	6880      	ldr	r0, [r0, #8]
 8012208:	b120      	cbz	r0, 8012214 <rmw_init_options_copy+0x18>
 801220a:	4b1e      	ldr	r3, [pc, #120]	@ (8012284 <rmw_init_options_copy+0x88>)
 801220c:	6819      	ldr	r1, [r3, #0]
 801220e:	f7ee f807 	bl	8000220 <strcmp>
 8012212:	bb90      	cbnz	r0, 801227a <rmw_init_options_copy+0x7e>
 8012214:	68ab      	ldr	r3, [r5, #8]
 8012216:	b113      	cbz	r3, 801221e <rmw_init_options_copy+0x22>
 8012218:	250b      	movs	r5, #11
 801221a:	4628      	mov	r0, r5
 801221c:	bd70      	pop	{r4, r5, r6, pc}
 801221e:	4623      	mov	r3, r4
 8012220:	462a      	mov	r2, r5
 8012222:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8012226:	f8d3 c000 	ldr.w	ip, [r3]
 801222a:	6858      	ldr	r0, [r3, #4]
 801222c:	6899      	ldr	r1, [r3, #8]
 801222e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8012232:	f8c2 e00c 	str.w	lr, [r2, #12]
 8012236:	3310      	adds	r3, #16
 8012238:	42b3      	cmp	r3, r6
 801223a:	f8c2 c000 	str.w	ip, [r2]
 801223e:	6050      	str	r0, [r2, #4]
 8012240:	6091      	str	r1, [r2, #8]
 8012242:	f102 0210 	add.w	r2, r2, #16
 8012246:	d1ee      	bne.n	8012226 <rmw_init_options_copy+0x2a>
 8012248:	6819      	ldr	r1, [r3, #0]
 801224a:	685b      	ldr	r3, [r3, #4]
 801224c:	480e      	ldr	r0, [pc, #56]	@ (8012288 <rmw_init_options_copy+0x8c>)
 801224e:	6053      	str	r3, [r2, #4]
 8012250:	6011      	str	r1, [r2, #0]
 8012252:	f009 fb75 	bl	801b940 <get_memory>
 8012256:	b198      	cbz	r0, 8012280 <rmw_init_options_copy+0x84>
 8012258:	6883      	ldr	r3, [r0, #8]
 801225a:	636b      	str	r3, [r5, #52]	@ 0x34
 801225c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801225e:	f102 0c10 	add.w	ip, r2, #16
 8012262:	f103 0410 	add.w	r4, r3, #16
 8012266:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801226a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801226c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8012270:	2500      	movs	r5, #0
 8012272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012276:	4628      	mov	r0, r5
 8012278:	bd70      	pop	{r4, r5, r6, pc}
 801227a:	250c      	movs	r5, #12
 801227c:	4628      	mov	r0, r5
 801227e:	bd70      	pop	{r4, r5, r6, pc}
 8012280:	2501      	movs	r5, #1
 8012282:	e7ca      	b.n	801221a <rmw_init_options_copy+0x1e>
 8012284:	08020ae8 	.word	0x08020ae8
 8012288:	2000c324 	.word	0x2000c324

0801228c <rmw_init_options_fini>:
 801228c:	2800      	cmp	r0, #0
 801228e:	d03d      	beq.n	801230c <rmw_init_options_fini+0x80>
 8012290:	b510      	push	{r4, lr}
 8012292:	4604      	mov	r4, r0
 8012294:	b08e      	sub	sp, #56	@ 0x38
 8012296:	3020      	adds	r0, #32
 8012298:	f7ff f8cc 	bl	8011434 <rcutils_allocator_is_valid>
 801229c:	b360      	cbz	r0, 80122f8 <rmw_init_options_fini+0x6c>
 801229e:	68a0      	ldr	r0, [r4, #8]
 80122a0:	b120      	cbz	r0, 80122ac <rmw_init_options_fini+0x20>
 80122a2:	4b1c      	ldr	r3, [pc, #112]	@ (8012314 <rmw_init_options_fini+0x88>)
 80122a4:	6819      	ldr	r1, [r3, #0]
 80122a6:	f7ed ffbb 	bl	8000220 <strcmp>
 80122aa:	bb68      	cbnz	r0, 8012308 <rmw_init_options_fini+0x7c>
 80122ac:	4b1a      	ldr	r3, [pc, #104]	@ (8012318 <rmw_init_options_fini+0x8c>)
 80122ae:	6819      	ldr	r1, [r3, #0]
 80122b0:	b331      	cbz	r1, 8012300 <rmw_init_options_fini+0x74>
 80122b2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80122b4:	e001      	b.n	80122ba <rmw_init_options_fini+0x2e>
 80122b6:	6849      	ldr	r1, [r1, #4]
 80122b8:	b311      	cbz	r1, 8012300 <rmw_init_options_fini+0x74>
 80122ba:	688b      	ldr	r3, [r1, #8]
 80122bc:	429a      	cmp	r2, r3
 80122be:	d1fa      	bne.n	80122b6 <rmw_init_options_fini+0x2a>
 80122c0:	4815      	ldr	r0, [pc, #84]	@ (8012318 <rmw_init_options_fini+0x8c>)
 80122c2:	f009 fb4d 	bl	801b960 <put_memory>
 80122c6:	4668      	mov	r0, sp
 80122c8:	f7ff fc86 	bl	8011bd8 <rmw_get_zero_initialized_init_options>
 80122cc:	46ee      	mov	lr, sp
 80122ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80122d2:	46a4      	mov	ip, r4
 80122d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80122dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80122e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122e8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80122ec:	e88c 0003 	stmia.w	ip, {r0, r1}
 80122f0:	2300      	movs	r3, #0
 80122f2:	4618      	mov	r0, r3
 80122f4:	b00e      	add	sp, #56	@ 0x38
 80122f6:	bd10      	pop	{r4, pc}
 80122f8:	230b      	movs	r3, #11
 80122fa:	4618      	mov	r0, r3
 80122fc:	b00e      	add	sp, #56	@ 0x38
 80122fe:	bd10      	pop	{r4, pc}
 8012300:	2301      	movs	r3, #1
 8012302:	4618      	mov	r0, r3
 8012304:	b00e      	add	sp, #56	@ 0x38
 8012306:	bd10      	pop	{r4, pc}
 8012308:	230c      	movs	r3, #12
 801230a:	e7f2      	b.n	80122f2 <rmw_init_options_fini+0x66>
 801230c:	230b      	movs	r3, #11
 801230e:	4618      	mov	r0, r3
 8012310:	4770      	bx	lr
 8012312:	bf00      	nop
 8012314:	08020ae8 	.word	0x08020ae8
 8012318:	2000c324 	.word	0x2000c324

0801231c <rmw_init>:
 801231c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012320:	b083      	sub	sp, #12
 8012322:	2800      	cmp	r0, #0
 8012324:	f000 80d3 	beq.w	80124ce <rmw_init+0x1b2>
 8012328:	460e      	mov	r6, r1
 801232a:	2900      	cmp	r1, #0
 801232c:	f000 80cf 	beq.w	80124ce <rmw_init+0x1b2>
 8012330:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8012332:	4605      	mov	r5, r0
 8012334:	2b00      	cmp	r3, #0
 8012336:	f000 80ca 	beq.w	80124ce <rmw_init+0x1b2>
 801233a:	4b78      	ldr	r3, [pc, #480]	@ (801251c <rmw_init+0x200>)
 801233c:	6880      	ldr	r0, [r0, #8]
 801233e:	681f      	ldr	r7, [r3, #0]
 8012340:	b128      	cbz	r0, 801234e <rmw_init+0x32>
 8012342:	4639      	mov	r1, r7
 8012344:	f7ed ff6c 	bl	8000220 <strcmp>
 8012348:	2800      	cmp	r0, #0
 801234a:	f040 80ca 	bne.w	80124e2 <rmw_init+0x1c6>
 801234e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012352:	4c73      	ldr	r4, [pc, #460]	@ (8012520 <rmw_init+0x204>)
 8012354:	4973      	ldr	r1, [pc, #460]	@ (8012524 <rmw_init+0x208>)
 8012356:	4874      	ldr	r0, [pc, #464]	@ (8012528 <rmw_init+0x20c>)
 8012358:	60b7      	str	r7, [r6, #8]
 801235a:	e9c6 2300 	strd	r2, r3, [r6]
 801235e:	68eb      	ldr	r3, [r5, #12]
 8012360:	64b3      	str	r3, [r6, #72]	@ 0x48
 8012362:	2201      	movs	r2, #1
 8012364:	f000 ffc8 	bl	80132f8 <rmw_uxrce_init_session_memory>
 8012368:	4620      	mov	r0, r4
 801236a:	4970      	ldr	r1, [pc, #448]	@ (801252c <rmw_init+0x210>)
 801236c:	2204      	movs	r2, #4
 801236e:	f001 f803 	bl	8013378 <rmw_uxrce_init_static_input_buffer_memory>
 8012372:	f04f 0800 	mov.w	r8, #0
 8012376:	486c      	ldr	r0, [pc, #432]	@ (8012528 <rmw_init+0x20c>)
 8012378:	f884 800d 	strb.w	r8, [r4, #13]
 801237c:	f009 fae0 	bl	801b940 <get_memory>
 8012380:	2800      	cmp	r0, #0
 8012382:	f000 80a9 	beq.w	80124d8 <rmw_init+0x1bc>
 8012386:	6884      	ldr	r4, [r0, #8]
 8012388:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801238a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801238c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8012390:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012394:	9101      	str	r1, [sp, #4]
 8012396:	6a00      	ldr	r0, [r0, #32]
 8012398:	9000      	str	r0, [sp, #0]
 801239a:	f104 0910 	add.w	r9, r4, #16
 801239e:	4661      	mov	r1, ip
 80123a0:	4648      	mov	r0, r9
 80123a2:	f002 ffe3 	bl	801536c <uxr_set_custom_transport_callbacks>
 80123a6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80123aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80123ae:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 80123b2:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 80123b6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 80123ba:	495d      	ldr	r1, [pc, #372]	@ (8012530 <rmw_init+0x214>)
 80123bc:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80123c0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80123c4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80123c8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80123cc:	4859      	ldr	r0, [pc, #356]	@ (8012534 <rmw_init+0x218>)
 80123ce:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80123d2:	2201      	movs	r2, #1
 80123d4:	64f4      	str	r4, [r6, #76]	@ 0x4c
 80123d6:	f000 ff6f 	bl	80132b8 <rmw_uxrce_init_node_memory>
 80123da:	4957      	ldr	r1, [pc, #348]	@ (8012538 <rmw_init+0x21c>)
 80123dc:	4857      	ldr	r0, [pc, #348]	@ (801253c <rmw_init+0x220>)
 80123de:	2205      	movs	r2, #5
 80123e0:	f000 ff4a 	bl	8013278 <rmw_uxrce_init_subscription_memory>
 80123e4:	4956      	ldr	r1, [pc, #344]	@ (8012540 <rmw_init+0x224>)
 80123e6:	4857      	ldr	r0, [pc, #348]	@ (8012544 <rmw_init+0x228>)
 80123e8:	220a      	movs	r2, #10
 80123ea:	f000 ff25 	bl	8013238 <rmw_uxrce_init_publisher_memory>
 80123ee:	4956      	ldr	r1, [pc, #344]	@ (8012548 <rmw_init+0x22c>)
 80123f0:	4856      	ldr	r0, [pc, #344]	@ (801254c <rmw_init+0x230>)
 80123f2:	2202      	movs	r2, #2
 80123f4:	f000 fee0 	bl	80131b8 <rmw_uxrce_init_service_memory>
 80123f8:	4955      	ldr	r1, [pc, #340]	@ (8012550 <rmw_init+0x234>)
 80123fa:	4856      	ldr	r0, [pc, #344]	@ (8012554 <rmw_init+0x238>)
 80123fc:	2204      	movs	r2, #4
 80123fe:	f000 fefb 	bl	80131f8 <rmw_uxrce_init_client_memory>
 8012402:	4955      	ldr	r1, [pc, #340]	@ (8012558 <rmw_init+0x23c>)
 8012404:	4855      	ldr	r0, [pc, #340]	@ (801255c <rmw_init+0x240>)
 8012406:	220f      	movs	r2, #15
 8012408:	f000 ff96 	bl	8013338 <rmw_uxrce_init_topic_memory>
 801240c:	4954      	ldr	r1, [pc, #336]	@ (8012560 <rmw_init+0x244>)
 801240e:	4855      	ldr	r0, [pc, #340]	@ (8012564 <rmw_init+0x248>)
 8012410:	2203      	movs	r2, #3
 8012412:	f000 ffd1 	bl	80133b8 <rmw_uxrce_init_init_options_impl_memory>
 8012416:	4954      	ldr	r1, [pc, #336]	@ (8012568 <rmw_init+0x24c>)
 8012418:	4854      	ldr	r0, [pc, #336]	@ (801256c <rmw_init+0x250>)
 801241a:	2204      	movs	r2, #4
 801241c:	f000 ffec 	bl	80133f8 <rmw_uxrce_init_wait_set_memory>
 8012420:	4953      	ldr	r1, [pc, #332]	@ (8012570 <rmw_init+0x254>)
 8012422:	4854      	ldr	r0, [pc, #336]	@ (8012574 <rmw_init+0x258>)
 8012424:	2204      	movs	r2, #4
 8012426:	f001 f807 	bl	8013438 <rmw_uxrce_init_guard_condition_memory>
 801242a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801242c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801242e:	4642      	mov	r2, r8
 8012430:	f000 fe7c 	bl	801312c <rmw_uxrce_transport_init>
 8012434:	4607      	mov	r7, r0
 8012436:	2800      	cmp	r0, #0
 8012438:	d158      	bne.n	80124ec <rmw_init+0x1d0>
 801243a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801243c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8012440:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012442:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8012446:	4628      	mov	r0, r5
 8012448:	f003 f9c6 	bl	80157d8 <uxr_init_session>
 801244c:	494a      	ldr	r1, [pc, #296]	@ (8012578 <rmw_init+0x25c>)
 801244e:	4622      	mov	r2, r4
 8012450:	4628      	mov	r0, r5
 8012452:	f003 f9e5 	bl	8015820 <uxr_set_topic_callback>
 8012456:	4949      	ldr	r1, [pc, #292]	@ (801257c <rmw_init+0x260>)
 8012458:	463a      	mov	r2, r7
 801245a:	4628      	mov	r0, r5
 801245c:	f003 f9dc 	bl	8015818 <uxr_set_status_callback>
 8012460:	4947      	ldr	r1, [pc, #284]	@ (8012580 <rmw_init+0x264>)
 8012462:	463a      	mov	r2, r7
 8012464:	4628      	mov	r0, r5
 8012466:	f003 f9df 	bl	8015828 <uxr_set_request_callback>
 801246a:	4946      	ldr	r1, [pc, #280]	@ (8012584 <rmw_init+0x268>)
 801246c:	463a      	mov	r2, r7
 801246e:	4628      	mov	r0, r5
 8012470:	f003 f9de 	bl	8015830 <uxr_set_reply_callback>
 8012474:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8012478:	2304      	movs	r3, #4
 801247a:	0092      	lsls	r2, r2, #2
 801247c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8012480:	4628      	mov	r0, r5
 8012482:	f003 fa13 	bl	80158ac <uxr_create_input_reliable_stream>
 8012486:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801248a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801248e:	0092      	lsls	r2, r2, #2
 8012490:	2304      	movs	r3, #4
 8012492:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8012496:	4628      	mov	r0, r5
 8012498:	f003 f9e0 	bl	801585c <uxr_create_output_reliable_stream>
 801249c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80124a0:	4628      	mov	r0, r5
 80124a2:	f003 f9fd 	bl	80158a0 <uxr_create_input_best_effort_stream>
 80124a6:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 80124aa:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80124ae:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80124b2:	3114      	adds	r1, #20
 80124b4:	4628      	mov	r0, r5
 80124b6:	f003 f9bf 	bl	8015838 <uxr_create_output_best_effort_stream>
 80124ba:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80124be:	4628      	mov	r0, r5
 80124c0:	f003 ffb2 	bl	8016428 <uxr_create_session>
 80124c4:	b1f8      	cbz	r0, 8012506 <rmw_init+0x1ea>
 80124c6:	4638      	mov	r0, r7
 80124c8:	b003      	add	sp, #12
 80124ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124ce:	270b      	movs	r7, #11
 80124d0:	4638      	mov	r0, r7
 80124d2:	b003      	add	sp, #12
 80124d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124d8:	2701      	movs	r7, #1
 80124da:	4638      	mov	r0, r7
 80124dc:	b003      	add	sp, #12
 80124de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124e2:	270c      	movs	r7, #12
 80124e4:	4638      	mov	r0, r7
 80124e6:	b003      	add	sp, #12
 80124e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124ec:	4648      	mov	r0, r9
 80124ee:	f002 ff7f 	bl	80153f0 <uxr_close_custom_transport>
 80124f2:	480d      	ldr	r0, [pc, #52]	@ (8012528 <rmw_init+0x20c>)
 80124f4:	4621      	mov	r1, r4
 80124f6:	f009 fa33 	bl	801b960 <put_memory>
 80124fa:	4638      	mov	r0, r7
 80124fc:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8012500:	b003      	add	sp, #12
 8012502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012506:	4648      	mov	r0, r9
 8012508:	f002 ff72 	bl	80153f0 <uxr_close_custom_transport>
 801250c:	4806      	ldr	r0, [pc, #24]	@ (8012528 <rmw_init+0x20c>)
 801250e:	4621      	mov	r1, r4
 8012510:	f009 fa26 	bl	801b960 <put_memory>
 8012514:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8012516:	2701      	movs	r7, #1
 8012518:	e7d5      	b.n	80124c6 <rmw_init+0x1aa>
 801251a:	bf00      	nop
 801251c:	08020ae8 	.word	0x08020ae8
 8012520:	2000c374 	.word	0x2000c374
 8012524:	20008620 	.word	0x20008620
 8012528:	2000c364 	.word	0x2000c364
 801252c:	20009bc8 	.word	0x20009bc8
 8012530:	20007b7c 	.word	0x20007b7c
 8012534:	2000c334 	.word	0x2000c334
 8012538:	2000bcc8 	.word	0x2000bcc8
 801253c:	2000c384 	.word	0x2000c384
 8012540:	20007c20 	.word	0x20007c20
 8012544:	2000c344 	.word	0x2000c344
 8012548:	20008490 	.word	0x20008490
 801254c:	2000c354 	.word	0x2000c354
 8012550:	20007758 	.word	0x20007758
 8012554:	20007748 	.word	0x20007748
 8012558:	2000c100 	.word	0x2000c100
 801255c:	2000c394 	.word	0x2000c394
 8012560:	20007af8 	.word	0x20007af8
 8012564:	2000c324 	.word	0x2000c324
 8012568:	2000c2a4 	.word	0x2000c2a4
 801256c:	2000c3a4 	.word	0x2000c3a4
 8012570:	20007a78 	.word	0x20007a78
 8012574:	2000c314 	.word	0x2000c314
 8012578:	0801b779 	.word	0x0801b779
 801257c:	0801b771 	.word	0x0801b771
 8012580:	0801b811 	.word	0x0801b811
 8012584:	0801b8ad 	.word	0x0801b8ad

08012588 <rmw_context_fini>:
 8012588:	4b17      	ldr	r3, [pc, #92]	@ (80125e8 <rmw_context_fini+0x60>)
 801258a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801258c:	b570      	push	{r4, r5, r6, lr}
 801258e:	681c      	ldr	r4, [r3, #0]
 8012590:	4605      	mov	r5, r0
 8012592:	b334      	cbz	r4, 80125e2 <rmw_context_fini+0x5a>
 8012594:	2600      	movs	r6, #0
 8012596:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801259a:	6902      	ldr	r2, [r0, #16]
 801259c:	428a      	cmp	r2, r1
 801259e:	d018      	beq.n	80125d2 <rmw_context_fini+0x4a>
 80125a0:	2c00      	cmp	r4, #0
 80125a2:	d1f8      	bne.n	8012596 <rmw_context_fini+0xe>
 80125a4:	b189      	cbz	r1, 80125ca <rmw_context_fini+0x42>
 80125a6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 80125aa:	789b      	ldrb	r3, [r3, #2]
 80125ac:	2b01      	cmp	r3, #1
 80125ae:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80125b2:	bf14      	ite	ne
 80125b4:	210a      	movne	r1, #10
 80125b6:	2100      	moveq	r1, #0
 80125b8:	f003 ff0e 	bl	80163d8 <uxr_delete_session_retries>
 80125bc:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80125be:	f000 ff5b 	bl	8013478 <rmw_uxrce_fini_session_memory>
 80125c2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80125c4:	3010      	adds	r0, #16
 80125c6:	f002 ff13 	bl	80153f0 <uxr_close_custom_transport>
 80125ca:	2300      	movs	r3, #0
 80125cc:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80125ce:	4630      	mov	r0, r6
 80125d0:	bd70      	pop	{r4, r5, r6, pc}
 80125d2:	3018      	adds	r0, #24
 80125d4:	f000 f89c 	bl	8012710 <rmw_destroy_node>
 80125d8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80125da:	4606      	mov	r6, r0
 80125dc:	2c00      	cmp	r4, #0
 80125de:	d1da      	bne.n	8012596 <rmw_context_fini+0xe>
 80125e0:	e7e0      	b.n	80125a4 <rmw_context_fini+0x1c>
 80125e2:	4626      	mov	r6, r4
 80125e4:	e7de      	b.n	80125a4 <rmw_context_fini+0x1c>
 80125e6:	bf00      	nop
 80125e8:	2000c334 	.word	0x2000c334

080125ec <create_node>:
 80125ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125f0:	b083      	sub	sp, #12
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d05f      	beq.n	80126b6 <create_node+0xca>
 80125f6:	4606      	mov	r6, r0
 80125f8:	4835      	ldr	r0, [pc, #212]	@ (80126d0 <create_node+0xe4>)
 80125fa:	460f      	mov	r7, r1
 80125fc:	4690      	mov	r8, r2
 80125fe:	461d      	mov	r5, r3
 8012600:	f009 f99e 	bl	801b940 <get_memory>
 8012604:	2800      	cmp	r0, #0
 8012606:	d056      	beq.n	80126b6 <create_node+0xca>
 8012608:	6884      	ldr	r4, [r0, #8]
 801260a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801260c:	6123      	str	r3, [r4, #16]
 801260e:	f7ff fd87 	bl	8012120 <rmw_get_implementation_identifier>
 8012612:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8012616:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801261a:	f8c4 9020 	str.w	r9, [r4, #32]
 801261e:	4630      	mov	r0, r6
 8012620:	f7ed fe08 	bl	8000234 <strlen>
 8012624:	1c42      	adds	r2, r0, #1
 8012626:	2a3c      	cmp	r2, #60	@ 0x3c
 8012628:	f104 0518 	add.w	r5, r4, #24
 801262c:	d840      	bhi.n	80126b0 <create_node+0xc4>
 801262e:	4648      	mov	r0, r9
 8012630:	4631      	mov	r1, r6
 8012632:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8012636:	f00b f93c 	bl	801d8b2 <memcpy>
 801263a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801263e:	4638      	mov	r0, r7
 8012640:	f7ed fdf8 	bl	8000234 <strlen>
 8012644:	1c42      	adds	r2, r0, #1
 8012646:	2a3c      	cmp	r2, #60	@ 0x3c
 8012648:	d832      	bhi.n	80126b0 <create_node+0xc4>
 801264a:	4639      	mov	r1, r7
 801264c:	4648      	mov	r0, r9
 801264e:	f00b f930 	bl	801d8b2 <memcpy>
 8012652:	6923      	ldr	r3, [r4, #16]
 8012654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012658:	2101      	movs	r1, #1
 801265a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801265e:	1842      	adds	r2, r0, r1
 8012660:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8012664:	f002 fec8 	bl	80153f8 <uxr_object_id>
 8012668:	6160      	str	r0, [r4, #20]
 801266a:	783b      	ldrb	r3, [r7, #0]
 801266c:	2b2f      	cmp	r3, #47	@ 0x2f
 801266e:	d127      	bne.n	80126c0 <create_node+0xd4>
 8012670:	787b      	ldrb	r3, [r7, #1]
 8012672:	bb2b      	cbnz	r3, 80126c0 <create_node+0xd4>
 8012674:	4a17      	ldr	r2, [pc, #92]	@ (80126d4 <create_node+0xe8>)
 8012676:	4818      	ldr	r0, [pc, #96]	@ (80126d8 <create_node+0xec>)
 8012678:	4633      	mov	r3, r6
 801267a:	213c      	movs	r1, #60	@ 0x3c
 801267c:	f00a fee2 	bl	801d444 <sniprintf>
 8012680:	6920      	ldr	r0, [r4, #16]
 8012682:	4915      	ldr	r1, [pc, #84]	@ (80126d8 <create_node+0xec>)
 8012684:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8012688:	9100      	str	r1, [sp, #0]
 801268a:	2106      	movs	r1, #6
 801268c:	9101      	str	r1, [sp, #4]
 801268e:	6811      	ldr	r1, [r2, #0]
 8012690:	6962      	ldr	r2, [r4, #20]
 8012692:	fa1f f388 	uxth.w	r3, r8
 8012696:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801269a:	f002 fc69 	bl	8014f70 <uxr_buffer_create_participant_bin>
 801269e:	4602      	mov	r2, r0
 80126a0:	6920      	ldr	r0, [r4, #16]
 80126a2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80126a6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80126aa:	f001 f85b 	bl	8013764 <run_xrce_session>
 80126ae:	b918      	cbnz	r0, 80126b8 <create_node+0xcc>
 80126b0:	4628      	mov	r0, r5
 80126b2:	f000 fee7 	bl	8013484 <rmw_uxrce_fini_node_memory>
 80126b6:	2500      	movs	r5, #0
 80126b8:	4628      	mov	r0, r5
 80126ba:	b003      	add	sp, #12
 80126bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126c0:	4a06      	ldr	r2, [pc, #24]	@ (80126dc <create_node+0xf0>)
 80126c2:	9600      	str	r6, [sp, #0]
 80126c4:	463b      	mov	r3, r7
 80126c6:	213c      	movs	r1, #60	@ 0x3c
 80126c8:	4803      	ldr	r0, [pc, #12]	@ (80126d8 <create_node+0xec>)
 80126ca:	f00a febb 	bl	801d444 <sniprintf>
 80126ce:	e7d7      	b.n	8012680 <create_node+0x94>
 80126d0:	2000c334 	.word	0x2000c334
 80126d4:	0801f98c 	.word	0x0801f98c
 80126d8:	200075cc 	.word	0x200075cc
 80126dc:	0801f3ec 	.word	0x0801f3ec

080126e0 <rmw_create_node>:
 80126e0:	b199      	cbz	r1, 801270a <rmw_create_node+0x2a>
 80126e2:	780b      	ldrb	r3, [r1, #0]
 80126e4:	468c      	mov	ip, r1
 80126e6:	b183      	cbz	r3, 801270a <rmw_create_node+0x2a>
 80126e8:	b410      	push	{r4}
 80126ea:	4614      	mov	r4, r2
 80126ec:	b14a      	cbz	r2, 8012702 <rmw_create_node+0x22>
 80126ee:	7813      	ldrb	r3, [r2, #0]
 80126f0:	b13b      	cbz	r3, 8012702 <rmw_create_node+0x22>
 80126f2:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80126f4:	4603      	mov	r3, r0
 80126f6:	4621      	mov	r1, r4
 80126f8:	4660      	mov	r0, ip
 80126fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126fe:	f7ff bf75 	b.w	80125ec <create_node>
 8012702:	2000      	movs	r0, #0
 8012704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012708:	4770      	bx	lr
 801270a:	2000      	movs	r0, #0
 801270c:	4770      	bx	lr
 801270e:	bf00      	nop

08012710 <rmw_destroy_node>:
 8012710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012712:	b328      	cbz	r0, 8012760 <rmw_destroy_node+0x50>
 8012714:	4607      	mov	r7, r0
 8012716:	6800      	ldr	r0, [r0, #0]
 8012718:	b120      	cbz	r0, 8012724 <rmw_destroy_node+0x14>
 801271a:	4b36      	ldr	r3, [pc, #216]	@ (80127f4 <rmw_destroy_node+0xe4>)
 801271c:	6819      	ldr	r1, [r3, #0]
 801271e:	f7ed fd7f 	bl	8000220 <strcmp>
 8012722:	b9e8      	cbnz	r0, 8012760 <rmw_destroy_node+0x50>
 8012724:	687d      	ldr	r5, [r7, #4]
 8012726:	b1dd      	cbz	r5, 8012760 <rmw_destroy_node+0x50>
 8012728:	4b33      	ldr	r3, [pc, #204]	@ (80127f8 <rmw_destroy_node+0xe8>)
 801272a:	681c      	ldr	r4, [r3, #0]
 801272c:	2c00      	cmp	r4, #0
 801272e:	d05f      	beq.n	80127f0 <rmw_destroy_node+0xe0>
 8012730:	2600      	movs	r6, #0
 8012732:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012736:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801273a:	429d      	cmp	r5, r3
 801273c:	d013      	beq.n	8012766 <rmw_destroy_node+0x56>
 801273e:	2c00      	cmp	r4, #0
 8012740:	d1f7      	bne.n	8012732 <rmw_destroy_node+0x22>
 8012742:	4b2e      	ldr	r3, [pc, #184]	@ (80127fc <rmw_destroy_node+0xec>)
 8012744:	681c      	ldr	r4, [r3, #0]
 8012746:	b1c4      	cbz	r4, 801277a <rmw_destroy_node+0x6a>
 8012748:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801274c:	6a0b      	ldr	r3, [r1, #32]
 801274e:	429d      	cmp	r5, r3
 8012750:	d1f9      	bne.n	8012746 <rmw_destroy_node+0x36>
 8012752:	317c      	adds	r1, #124	@ 0x7c
 8012754:	4638      	mov	r0, r7
 8012756:	f000 fc89 	bl	801306c <rmw_destroy_subscription>
 801275a:	2801      	cmp	r0, #1
 801275c:	4606      	mov	r6, r0
 801275e:	d1f2      	bne.n	8012746 <rmw_destroy_node+0x36>
 8012760:	2601      	movs	r6, #1
 8012762:	4630      	mov	r0, r6
 8012764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012766:	3184      	adds	r1, #132	@ 0x84
 8012768:	4638      	mov	r0, r7
 801276a:	f000 f9a5 	bl	8012ab8 <rmw_destroy_publisher>
 801276e:	2801      	cmp	r0, #1
 8012770:	4606      	mov	r6, r0
 8012772:	d0f5      	beq.n	8012760 <rmw_destroy_node+0x50>
 8012774:	2c00      	cmp	r4, #0
 8012776:	d1dc      	bne.n	8012732 <rmw_destroy_node+0x22>
 8012778:	e7e3      	b.n	8012742 <rmw_destroy_node+0x32>
 801277a:	4b21      	ldr	r3, [pc, #132]	@ (8012800 <rmw_destroy_node+0xf0>)
 801277c:	681c      	ldr	r4, [r3, #0]
 801277e:	b16c      	cbz	r4, 801279c <rmw_destroy_node+0x8c>
 8012780:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012784:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8012786:	429d      	cmp	r5, r3
 8012788:	d1f9      	bne.n	801277e <rmw_destroy_node+0x6e>
 801278a:	317c      	adds	r1, #124	@ 0x7c
 801278c:	4638      	mov	r0, r7
 801278e:	f000 fc09 	bl	8012fa4 <rmw_destroy_service>
 8012792:	2801      	cmp	r0, #1
 8012794:	4606      	mov	r6, r0
 8012796:	d0e3      	beq.n	8012760 <rmw_destroy_node+0x50>
 8012798:	2c00      	cmp	r4, #0
 801279a:	d1f1      	bne.n	8012780 <rmw_destroy_node+0x70>
 801279c:	4b19      	ldr	r3, [pc, #100]	@ (8012804 <rmw_destroy_node+0xf4>)
 801279e:	681c      	ldr	r4, [r3, #0]
 80127a0:	b16c      	cbz	r4, 80127be <rmw_destroy_node+0xae>
 80127a2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80127a6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80127a8:	429d      	cmp	r5, r3
 80127aa:	d1f9      	bne.n	80127a0 <rmw_destroy_node+0x90>
 80127ac:	317c      	adds	r1, #124	@ 0x7c
 80127ae:	4638      	mov	r0, r7
 80127b0:	f7ff fc52 	bl	8012058 <rmw_destroy_client>
 80127b4:	2801      	cmp	r0, #1
 80127b6:	4606      	mov	r6, r0
 80127b8:	d0d2      	beq.n	8012760 <rmw_destroy_node+0x50>
 80127ba:	2c00      	cmp	r4, #0
 80127bc:	d1f1      	bne.n	80127a2 <rmw_destroy_node+0x92>
 80127be:	6928      	ldr	r0, [r5, #16]
 80127c0:	696a      	ldr	r2, [r5, #20]
 80127c2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80127c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80127ca:	6819      	ldr	r1, [r3, #0]
 80127cc:	f002 fb84 	bl	8014ed8 <uxr_buffer_delete_entity>
 80127d0:	4602      	mov	r2, r0
 80127d2:	6928      	ldr	r0, [r5, #16]
 80127d4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80127d8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80127dc:	f000 ffc2 	bl	8013764 <run_xrce_session>
 80127e0:	2800      	cmp	r0, #0
 80127e2:	bf08      	it	eq
 80127e4:	2602      	moveq	r6, #2
 80127e6:	4638      	mov	r0, r7
 80127e8:	f000 fe4c 	bl	8013484 <rmw_uxrce_fini_node_memory>
 80127ec:	4630      	mov	r0, r6
 80127ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127f0:	4626      	mov	r6, r4
 80127f2:	e7a6      	b.n	8012742 <rmw_destroy_node+0x32>
 80127f4:	08020ae8 	.word	0x08020ae8
 80127f8:	2000c344 	.word	0x2000c344
 80127fc:	2000c384 	.word	0x2000c384
 8012800:	2000c354 	.word	0x2000c354
 8012804:	20007748 	.word	0x20007748

08012808 <rmw_node_get_graph_guard_condition>:
 8012808:	6843      	ldr	r3, [r0, #4]
 801280a:	6918      	ldr	r0, [r3, #16]
 801280c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8012810:	4770      	bx	lr
 8012812:	bf00      	nop

08012814 <flush_session>:
 8012814:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8012816:	f003 bc41 	b.w	801609c <uxr_run_session_until_confirm_delivery>
 801281a:	bf00      	nop

0801281c <rmw_publish>:
 801281c:	2800      	cmp	r0, #0
 801281e:	d053      	beq.n	80128c8 <rmw_publish+0xac>
 8012820:	b570      	push	{r4, r5, r6, lr}
 8012822:	460d      	mov	r5, r1
 8012824:	b08e      	sub	sp, #56	@ 0x38
 8012826:	2900      	cmp	r1, #0
 8012828:	d04b      	beq.n	80128c2 <rmw_publish+0xa6>
 801282a:	4604      	mov	r4, r0
 801282c:	6800      	ldr	r0, [r0, #0]
 801282e:	f001 f8b3 	bl	8013998 <is_uxrce_rmw_identifier_valid>
 8012832:	2800      	cmp	r0, #0
 8012834:	d045      	beq.n	80128c2 <rmw_publish+0xa6>
 8012836:	6866      	ldr	r6, [r4, #4]
 8012838:	2e00      	cmp	r6, #0
 801283a:	d042      	beq.n	80128c2 <rmw_publish+0xa6>
 801283c:	69b4      	ldr	r4, [r6, #24]
 801283e:	4628      	mov	r0, r5
 8012840:	6923      	ldr	r3, [r4, #16]
 8012842:	4798      	blx	r3
 8012844:	69f3      	ldr	r3, [r6, #28]
 8012846:	9005      	str	r0, [sp, #20]
 8012848:	b113      	cbz	r3, 8012850 <rmw_publish+0x34>
 801284a:	a805      	add	r0, sp, #20
 801284c:	4798      	blx	r3
 801284e:	9805      	ldr	r0, [sp, #20]
 8012850:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8012854:	691b      	ldr	r3, [r3, #16]
 8012856:	9000      	str	r0, [sp, #0]
 8012858:	6972      	ldr	r2, [r6, #20]
 801285a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 801285c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8012860:	ab06      	add	r3, sp, #24
 8012862:	f004 feef 	bl	8017644 <uxr_prepare_output_stream>
 8012866:	b1d8      	cbz	r0, 80128a0 <rmw_publish+0x84>
 8012868:	68a3      	ldr	r3, [r4, #8]
 801286a:	a906      	add	r1, sp, #24
 801286c:	4628      	mov	r0, r5
 801286e:	4798      	blx	r3
 8012870:	6a33      	ldr	r3, [r6, #32]
 8012872:	4604      	mov	r4, r0
 8012874:	b10b      	cbz	r3, 801287a <rmw_publish+0x5e>
 8012876:	a806      	add	r0, sp, #24
 8012878:	4798      	blx	r3
 801287a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 801287e:	2b01      	cmp	r3, #1
 8012880:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8012884:	d022      	beq.n	80128cc <rmw_publish+0xb0>
 8012886:	6918      	ldr	r0, [r3, #16]
 8012888:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 801288a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801288e:	f003 fc05 	bl	801609c <uxr_run_session_until_confirm_delivery>
 8012892:	4020      	ands	r0, r4
 8012894:	b2c4      	uxtb	r4, r0
 8012896:	f084 0001 	eor.w	r0, r4, #1
 801289a:	b2c0      	uxtb	r0, r0
 801289c:	b00e      	add	sp, #56	@ 0x38
 801289e:	bd70      	pop	{r4, r5, r6, pc}
 80128a0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80128a4:	6918      	ldr	r0, [r3, #16]
 80128a6:	9b05      	ldr	r3, [sp, #20]
 80128a8:	9300      	str	r3, [sp, #0]
 80128aa:	4b0b      	ldr	r3, [pc, #44]	@ (80128d8 <rmw_publish+0xbc>)
 80128ac:	9301      	str	r3, [sp, #4]
 80128ae:	9602      	str	r6, [sp, #8]
 80128b0:	6972      	ldr	r2, [r6, #20]
 80128b2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80128b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80128b8:	ab06      	add	r3, sp, #24
 80128ba:	f004 fef3 	bl	80176a4 <uxr_prepare_output_stream_fragmented>
 80128be:	2800      	cmp	r0, #0
 80128c0:	d1d2      	bne.n	8012868 <rmw_publish+0x4c>
 80128c2:	2001      	movs	r0, #1
 80128c4:	b00e      	add	sp, #56	@ 0x38
 80128c6:	bd70      	pop	{r4, r5, r6, pc}
 80128c8:	2001      	movs	r0, #1
 80128ca:	4770      	bx	lr
 80128cc:	6918      	ldr	r0, [r3, #16]
 80128ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80128d2:	f003 f823 	bl	801591c <uxr_flash_output_streams>
 80128d6:	e7de      	b.n	8012896 <rmw_publish+0x7a>
 80128d8:	08012815 	.word	0x08012815

080128dc <rmw_create_publisher>:
 80128dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128e0:	b087      	sub	sp, #28
 80128e2:	2800      	cmp	r0, #0
 80128e4:	f000 80cc 	beq.w	8012a80 <rmw_create_publisher+0x1a4>
 80128e8:	460e      	mov	r6, r1
 80128ea:	2900      	cmp	r1, #0
 80128ec:	f000 80c8 	beq.w	8012a80 <rmw_create_publisher+0x1a4>
 80128f0:	4604      	mov	r4, r0
 80128f2:	6800      	ldr	r0, [r0, #0]
 80128f4:	4615      	mov	r5, r2
 80128f6:	4698      	mov	r8, r3
 80128f8:	f001 f84e 	bl	8013998 <is_uxrce_rmw_identifier_valid>
 80128fc:	2800      	cmp	r0, #0
 80128fe:	f000 80bf 	beq.w	8012a80 <rmw_create_publisher+0x1a4>
 8012902:	2d00      	cmp	r5, #0
 8012904:	f000 80bc 	beq.w	8012a80 <rmw_create_publisher+0x1a4>
 8012908:	782b      	ldrb	r3, [r5, #0]
 801290a:	2b00      	cmp	r3, #0
 801290c:	f000 80b8 	beq.w	8012a80 <rmw_create_publisher+0x1a4>
 8012910:	f1b8 0f00 	cmp.w	r8, #0
 8012914:	f000 80b4 	beq.w	8012a80 <rmw_create_publisher+0x1a4>
 8012918:	485c      	ldr	r0, [pc, #368]	@ (8012a8c <rmw_create_publisher+0x1b0>)
 801291a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801291e:	f009 f80f 	bl	801b940 <get_memory>
 8012922:	2800      	cmp	r0, #0
 8012924:	f000 80ac 	beq.w	8012a80 <rmw_create_publisher+0x1a4>
 8012928:	6884      	ldr	r4, [r0, #8]
 801292a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 801292e:	f7ff fbf7 	bl	8012120 <rmw_get_implementation_identifier>
 8012932:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8012936:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801293a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 801293e:	4628      	mov	r0, r5
 8012940:	f7ed fc78 	bl	8000234 <strlen>
 8012944:	3001      	adds	r0, #1
 8012946:	283c      	cmp	r0, #60	@ 0x3c
 8012948:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 801294c:	f200 8091 	bhi.w	8012a72 <rmw_create_publisher+0x196>
 8012950:	4a4f      	ldr	r2, [pc, #316]	@ (8012a90 <rmw_create_publisher+0x1b4>)
 8012952:	462b      	mov	r3, r5
 8012954:	213c      	movs	r1, #60	@ 0x3c
 8012956:	4650      	mov	r0, sl
 8012958:	f00a fd74 	bl	801d444 <sniprintf>
 801295c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012960:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8012962:	4641      	mov	r1, r8
 8012964:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8012968:	2250      	movs	r2, #80	@ 0x50
 801296a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801296e:	f00a ffa0 	bl	801d8b2 <memcpy>
 8012972:	f898 3008 	ldrb.w	r3, [r8, #8]
 8012976:	4947      	ldr	r1, [pc, #284]	@ (8012a94 <rmw_create_publisher+0x1b8>)
 8012978:	2b02      	cmp	r3, #2
 801297a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801297e:	bf0c      	ite	eq
 8012980:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8012984:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8012988:	67a3      	str	r3, [r4, #120]	@ 0x78
 801298a:	2300      	movs	r3, #0
 801298c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8012990:	4630      	mov	r0, r6
 8012992:	f001 f9f3 	bl	8013d7c <get_message_typesupport_handle>
 8012996:	2800      	cmp	r0, #0
 8012998:	d06b      	beq.n	8012a72 <rmw_create_publisher+0x196>
 801299a:	6842      	ldr	r2, [r0, #4]
 801299c:	61a2      	str	r2, [r4, #24]
 801299e:	2a00      	cmp	r2, #0
 80129a0:	d067      	beq.n	8012a72 <rmw_create_publisher+0x196>
 80129a2:	4629      	mov	r1, r5
 80129a4:	4643      	mov	r3, r8
 80129a6:	4648      	mov	r0, r9
 80129a8:	f009 f816 	bl	801b9d8 <create_topic>
 80129ac:	6260      	str	r0, [r4, #36]	@ 0x24
 80129ae:	2800      	cmp	r0, #0
 80129b0:	d063      	beq.n	8012a7a <rmw_create_publisher+0x19e>
 80129b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80129b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80129ba:	2103      	movs	r1, #3
 80129bc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 80129c0:	1c42      	adds	r2, r0, #1
 80129c2:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 80129c6:	f002 fd17 	bl	80153f8 <uxr_object_id>
 80129ca:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80129ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80129d2:	6120      	str	r0, [r4, #16]
 80129d4:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80129d8:	6910      	ldr	r0, [r2, #16]
 80129da:	2506      	movs	r5, #6
 80129dc:	9500      	str	r5, [sp, #0]
 80129de:	6819      	ldr	r1, [r3, #0]
 80129e0:	6922      	ldr	r2, [r4, #16]
 80129e2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80129e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80129ea:	f002 fb29 	bl	8015040 <uxr_buffer_create_publisher_bin>
 80129ee:	4602      	mov	r2, r0
 80129f0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80129f4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80129f8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80129fc:	f000 feb2 	bl	8013764 <run_xrce_session>
 8012a00:	b3b8      	cbz	r0, 8012a72 <rmw_create_publisher+0x196>
 8012a02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012a0a:	2105      	movs	r1, #5
 8012a0c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8012a10:	1c42      	adds	r2, r0, #1
 8012a12:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8012a16:	f002 fcef 	bl	80153f8 <uxr_object_id>
 8012a1a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8012a1e:	6160      	str	r0, [r4, #20]
 8012a20:	691e      	ldr	r6, [r3, #16]
 8012a22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012a26:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8012a2a:	f10d 0a10 	add.w	sl, sp, #16
 8012a2e:	4641      	mov	r1, r8
 8012a30:	4650      	mov	r0, sl
 8012a32:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 8012a36:	f000 feb1 	bl	801379c <convert_qos_profile>
 8012a3a:	9503      	str	r5, [sp, #12]
 8012a3c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8012a40:	9001      	str	r0, [sp, #4]
 8012a42:	f8ad 1008 	strh.w	r1, [sp, #8]
 8012a46:	f8db 3010 	ldr.w	r3, [fp, #16]
 8012a4a:	9300      	str	r3, [sp, #0]
 8012a4c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8012a50:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8012a54:	f8d8 1000 	ldr.w	r1, [r8]
 8012a58:	4630      	mov	r0, r6
 8012a5a:	f002 fb21 	bl	80150a0 <uxr_buffer_create_datawriter_bin>
 8012a5e:	4602      	mov	r2, r0
 8012a60:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8012a64:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012a68:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8012a6c:	f000 fe7a 	bl	8013764 <run_xrce_session>
 8012a70:	b938      	cbnz	r0, 8012a82 <rmw_create_publisher+0x1a6>
 8012a72:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8012a74:	b108      	cbz	r0, 8012a7a <rmw_create_publisher+0x19e>
 8012a76:	f000 fd75 	bl	8013564 <rmw_uxrce_fini_topic_memory>
 8012a7a:	4638      	mov	r0, r7
 8012a7c:	f000 fd1a 	bl	80134b4 <rmw_uxrce_fini_publisher_memory>
 8012a80:	2700      	movs	r7, #0
 8012a82:	4638      	mov	r0, r7
 8012a84:	b007      	add	sp, #28
 8012a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a8a:	bf00      	nop
 8012a8c:	2000c344 	.word	0x2000c344
 8012a90:	0801f98c 	.word	0x0801f98c
 8012a94:	0801eee8 	.word	0x0801eee8

08012a98 <rmw_publisher_get_actual_qos>:
 8012a98:	b150      	cbz	r0, 8012ab0 <rmw_publisher_get_actual_qos+0x18>
 8012a9a:	b508      	push	{r3, lr}
 8012a9c:	460b      	mov	r3, r1
 8012a9e:	b149      	cbz	r1, 8012ab4 <rmw_publisher_get_actual_qos+0x1c>
 8012aa0:	6841      	ldr	r1, [r0, #4]
 8012aa2:	2250      	movs	r2, #80	@ 0x50
 8012aa4:	3128      	adds	r1, #40	@ 0x28
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f00a ff03 	bl	801d8b2 <memcpy>
 8012aac:	2000      	movs	r0, #0
 8012aae:	bd08      	pop	{r3, pc}
 8012ab0:	200b      	movs	r0, #11
 8012ab2:	4770      	bx	lr
 8012ab4:	200b      	movs	r0, #11
 8012ab6:	bd08      	pop	{r3, pc}

08012ab8 <rmw_destroy_publisher>:
 8012ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aba:	b128      	cbz	r0, 8012ac8 <rmw_destroy_publisher+0x10>
 8012abc:	4604      	mov	r4, r0
 8012abe:	6800      	ldr	r0, [r0, #0]
 8012ac0:	460d      	mov	r5, r1
 8012ac2:	f000 ff69 	bl	8013998 <is_uxrce_rmw_identifier_valid>
 8012ac6:	b910      	cbnz	r0, 8012ace <rmw_destroy_publisher+0x16>
 8012ac8:	2401      	movs	r4, #1
 8012aca:	4620      	mov	r0, r4
 8012acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ace:	6863      	ldr	r3, [r4, #4]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d0f9      	beq.n	8012ac8 <rmw_destroy_publisher+0x10>
 8012ad4:	2d00      	cmp	r5, #0
 8012ad6:	d0f7      	beq.n	8012ac8 <rmw_destroy_publisher+0x10>
 8012ad8:	6828      	ldr	r0, [r5, #0]
 8012ada:	f000 ff5d 	bl	8013998 <is_uxrce_rmw_identifier_valid>
 8012ade:	2800      	cmp	r0, #0
 8012ae0:	d0f2      	beq.n	8012ac8 <rmw_destroy_publisher+0x10>
 8012ae2:	686c      	ldr	r4, [r5, #4]
 8012ae4:	2c00      	cmp	r4, #0
 8012ae6:	d0ef      	beq.n	8012ac8 <rmw_destroy_publisher+0x10>
 8012ae8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8012aea:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8012aee:	f008 ffc3 	bl	801ba78 <destroy_topic>
 8012af2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8012af6:	6962      	ldr	r2, [r4, #20]
 8012af8:	6918      	ldr	r0, [r3, #16]
 8012afa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012afe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012b02:	6819      	ldr	r1, [r3, #0]
 8012b04:	f002 f9e8 	bl	8014ed8 <uxr_buffer_delete_entity>
 8012b08:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8012b0c:	6922      	ldr	r2, [r4, #16]
 8012b0e:	691b      	ldr	r3, [r3, #16]
 8012b10:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8012b14:	4604      	mov	r4, r0
 8012b16:	6809      	ldr	r1, [r1, #0]
 8012b18:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8012b1c:	f002 f9dc 	bl	8014ed8 <uxr_buffer_delete_entity>
 8012b20:	693e      	ldr	r6, [r7, #16]
 8012b22:	4622      	mov	r2, r4
 8012b24:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8012b28:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8012b2c:	4604      	mov	r4, r0
 8012b2e:	4630      	mov	r0, r6
 8012b30:	f000 fe18 	bl	8013764 <run_xrce_session>
 8012b34:	693e      	ldr	r6, [r7, #16]
 8012b36:	4622      	mov	r2, r4
 8012b38:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8012b3c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8012b40:	4604      	mov	r4, r0
 8012b42:	4630      	mov	r0, r6
 8012b44:	f000 fe0e 	bl	8013764 <run_xrce_session>
 8012b48:	b12c      	cbz	r4, 8012b56 <rmw_destroy_publisher+0x9e>
 8012b4a:	b120      	cbz	r0, 8012b56 <rmw_destroy_publisher+0x9e>
 8012b4c:	2400      	movs	r4, #0
 8012b4e:	4628      	mov	r0, r5
 8012b50:	f000 fcb0 	bl	80134b4 <rmw_uxrce_fini_publisher_memory>
 8012b54:	e7b9      	b.n	8012aca <rmw_destroy_publisher+0x12>
 8012b56:	2402      	movs	r4, #2
 8012b58:	e7f9      	b.n	8012b4e <rmw_destroy_publisher+0x96>
 8012b5a:	bf00      	nop

08012b5c <rmw_send_request>:
 8012b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b60:	4604      	mov	r4, r0
 8012b62:	6800      	ldr	r0, [r0, #0]
 8012b64:	b08b      	sub	sp, #44	@ 0x2c
 8012b66:	460e      	mov	r6, r1
 8012b68:	4615      	mov	r5, r2
 8012b6a:	b128      	cbz	r0, 8012b78 <rmw_send_request+0x1c>
 8012b6c:	4b21      	ldr	r3, [pc, #132]	@ (8012bf4 <rmw_send_request+0x98>)
 8012b6e:	6819      	ldr	r1, [r3, #0]
 8012b70:	f7ed fb56 	bl	8000220 <strcmp>
 8012b74:	2800      	cmp	r0, #0
 8012b76:	d139      	bne.n	8012bec <rmw_send_request+0x90>
 8012b78:	6864      	ldr	r4, [r4, #4]
 8012b7a:	6963      	ldr	r3, [r4, #20]
 8012b7c:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8012b80:	689b      	ldr	r3, [r3, #8]
 8012b82:	4798      	blx	r3
 8012b84:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8012b88:	4630      	mov	r0, r6
 8012b8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012b8e:	4798      	blx	r3
 8012b90:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012b94:	9000      	str	r0, [sp, #0]
 8012b96:	6922      	ldr	r2, [r4, #16]
 8012b98:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8012b9a:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8012b9e:	ab02      	add	r3, sp, #8
 8012ba0:	f004 fd50 	bl	8017644 <uxr_prepare_output_stream>
 8012ba4:	2700      	movs	r7, #0
 8012ba6:	6028      	str	r0, [r5, #0]
 8012ba8:	606f      	str	r7, [r5, #4]
 8012baa:	b198      	cbz	r0, 8012bd4 <rmw_send_request+0x78>
 8012bac:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012bb0:	a902      	add	r1, sp, #8
 8012bb2:	4630      	mov	r0, r6
 8012bb4:	4798      	blx	r3
 8012bb6:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8012bba:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012bbe:	2b01      	cmp	r3, #1
 8012bc0:	d00c      	beq.n	8012bdc <rmw_send_request+0x80>
 8012bc2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8012bc4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012bc8:	f003 fa68 	bl	801609c <uxr_run_session_until_confirm_delivery>
 8012bcc:	4638      	mov	r0, r7
 8012bce:	b00b      	add	sp, #44	@ 0x2c
 8012bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bd4:	2001      	movs	r0, #1
 8012bd6:	b00b      	add	sp, #44	@ 0x2c
 8012bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bdc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012be0:	f002 fe9c 	bl	801591c <uxr_flash_output_streams>
 8012be4:	4638      	mov	r0, r7
 8012be6:	b00b      	add	sp, #44	@ 0x2c
 8012be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bec:	200c      	movs	r0, #12
 8012bee:	b00b      	add	sp, #44	@ 0x2c
 8012bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bf4:	08020ae8 	.word	0x08020ae8

08012bf8 <rmw_take_request>:
 8012bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bfc:	4605      	mov	r5, r0
 8012bfe:	6800      	ldr	r0, [r0, #0]
 8012c00:	b089      	sub	sp, #36	@ 0x24
 8012c02:	460c      	mov	r4, r1
 8012c04:	4690      	mov	r8, r2
 8012c06:	461e      	mov	r6, r3
 8012c08:	b128      	cbz	r0, 8012c16 <rmw_take_request+0x1e>
 8012c0a:	4b28      	ldr	r3, [pc, #160]	@ (8012cac <rmw_take_request+0xb4>)
 8012c0c:	6819      	ldr	r1, [r3, #0]
 8012c0e:	f7ed fb07 	bl	8000220 <strcmp>
 8012c12:	2800      	cmp	r0, #0
 8012c14:	d146      	bne.n	8012ca4 <rmw_take_request+0xac>
 8012c16:	b10e      	cbz	r6, 8012c1c <rmw_take_request+0x24>
 8012c18:	2300      	movs	r3, #0
 8012c1a:	7033      	strb	r3, [r6, #0]
 8012c1c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012c20:	f000 fd22 	bl	8013668 <rmw_uxrce_clean_expired_static_input_buffer>
 8012c24:	4648      	mov	r0, r9
 8012c26:	f000 fcf9 	bl	801361c <rmw_uxrce_find_static_input_buffer_by_owner>
 8012c2a:	4607      	mov	r7, r0
 8012c2c:	b3b0      	cbz	r0, 8012c9c <rmw_take_request+0xa4>
 8012c2e:	6885      	ldr	r5, [r0, #8]
 8012c30:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8012c34:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8012c38:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8012c3c:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8012c40:	7423      	strb	r3, [r4, #16]
 8012c42:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8012c46:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8012c4a:	74e2      	strb	r2, [r4, #19]
 8012c4c:	f8a4 3011 	strh.w	r3, [r4, #17]
 8012c50:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8012c54:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8012c58:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8012c5c:	61e1      	str	r1, [r4, #28]
 8012c5e:	6162      	str	r2, [r4, #20]
 8012c60:	61a3      	str	r3, [r4, #24]
 8012c62:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8012c66:	689b      	ldr	r3, [r3, #8]
 8012c68:	4798      	blx	r3
 8012c6a:	6844      	ldr	r4, [r0, #4]
 8012c6c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8012c70:	f105 0110 	add.w	r1, r5, #16
 8012c74:	4668      	mov	r0, sp
 8012c76:	f7fc fdbf 	bl	800f7f8 <ucdr_init_buffer>
 8012c7a:	68e3      	ldr	r3, [r4, #12]
 8012c7c:	4641      	mov	r1, r8
 8012c7e:	4668      	mov	r0, sp
 8012c80:	4798      	blx	r3
 8012c82:	4639      	mov	r1, r7
 8012c84:	4604      	mov	r4, r0
 8012c86:	480a      	ldr	r0, [pc, #40]	@ (8012cb0 <rmw_take_request+0xb8>)
 8012c88:	f008 fe6a 	bl	801b960 <put_memory>
 8012c8c:	b106      	cbz	r6, 8012c90 <rmw_take_request+0x98>
 8012c8e:	7034      	strb	r4, [r6, #0]
 8012c90:	f084 0001 	eor.w	r0, r4, #1
 8012c94:	b2c0      	uxtb	r0, r0
 8012c96:	b009      	add	sp, #36	@ 0x24
 8012c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c9c:	2001      	movs	r0, #1
 8012c9e:	b009      	add	sp, #36	@ 0x24
 8012ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ca4:	200c      	movs	r0, #12
 8012ca6:	b009      	add	sp, #36	@ 0x24
 8012ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012cac:	08020ae8 	.word	0x08020ae8
 8012cb0:	2000c374 	.word	0x2000c374

08012cb4 <rmw_send_response>:
 8012cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cb6:	4605      	mov	r5, r0
 8012cb8:	6800      	ldr	r0, [r0, #0]
 8012cba:	b091      	sub	sp, #68	@ 0x44
 8012cbc:	460c      	mov	r4, r1
 8012cbe:	4616      	mov	r6, r2
 8012cc0:	b128      	cbz	r0, 8012cce <rmw_send_response+0x1a>
 8012cc2:	4b29      	ldr	r3, [pc, #164]	@ (8012d68 <rmw_send_response+0xb4>)
 8012cc4:	6819      	ldr	r1, [r3, #0]
 8012cc6:	f7ed faab 	bl	8000220 <strcmp>
 8012cca:	2800      	cmp	r0, #0
 8012ccc:	d141      	bne.n	8012d52 <rmw_send_response+0x9e>
 8012cce:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8012cd2:	9306      	str	r3, [sp, #24]
 8012cd4:	4623      	mov	r3, r4
 8012cd6:	9207      	str	r2, [sp, #28]
 8012cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cdc:	686d      	ldr	r5, [r5, #4]
 8012cde:	789b      	ldrb	r3, [r3, #2]
 8012ce0:	68a1      	ldr	r1, [r4, #8]
 8012ce2:	f88d 2017 	strb.w	r2, [sp, #23]
 8012ce6:	f88d 3016 	strb.w	r3, [sp, #22]
 8012cea:	68e2      	ldr	r2, [r4, #12]
 8012cec:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8012cf0:	6860      	ldr	r0, [r4, #4]
 8012cf2:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012cf6:	ab02      	add	r3, sp, #8
 8012cf8:	c307      	stmia	r3!, {r0, r1, r2}
 8012cfa:	696b      	ldr	r3, [r5, #20]
 8012cfc:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8012cfe:	68db      	ldr	r3, [r3, #12]
 8012d00:	4798      	blx	r3
 8012d02:	6844      	ldr	r4, [r0, #4]
 8012d04:	4630      	mov	r0, r6
 8012d06:	6923      	ldr	r3, [r4, #16]
 8012d08:	4798      	blx	r3
 8012d0a:	f100 0318 	add.w	r3, r0, #24
 8012d0e:	6938      	ldr	r0, [r7, #16]
 8012d10:	9300      	str	r3, [sp, #0]
 8012d12:	692a      	ldr	r2, [r5, #16]
 8012d14:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8012d16:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012d1a:	ab08      	add	r3, sp, #32
 8012d1c:	f004 fc92 	bl	8017644 <uxr_prepare_output_stream>
 8012d20:	b910      	cbnz	r0, 8012d28 <rmw_send_response+0x74>
 8012d22:	2001      	movs	r0, #1
 8012d24:	b011      	add	sp, #68	@ 0x44
 8012d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d28:	a902      	add	r1, sp, #8
 8012d2a:	a808      	add	r0, sp, #32
 8012d2c:	f005 fd4c 	bl	80187c8 <uxr_serialize_SampleIdentity>
 8012d30:	68a3      	ldr	r3, [r4, #8]
 8012d32:	a908      	add	r1, sp, #32
 8012d34:	4630      	mov	r0, r6
 8012d36:	4798      	blx	r3
 8012d38:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8012d3c:	6938      	ldr	r0, [r7, #16]
 8012d3e:	2b01      	cmp	r3, #1
 8012d40:	d00a      	beq.n	8012d58 <rmw_send_response+0xa4>
 8012d42:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8012d44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012d48:	f003 f9a8 	bl	801609c <uxr_run_session_until_confirm_delivery>
 8012d4c:	2000      	movs	r0, #0
 8012d4e:	b011      	add	sp, #68	@ 0x44
 8012d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d52:	200c      	movs	r0, #12
 8012d54:	b011      	add	sp, #68	@ 0x44
 8012d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012d5c:	f002 fdde 	bl	801591c <uxr_flash_output_streams>
 8012d60:	2000      	movs	r0, #0
 8012d62:	b011      	add	sp, #68	@ 0x44
 8012d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d66:	bf00      	nop
 8012d68:	08020ae8 	.word	0x08020ae8

08012d6c <rmw_take_response>:
 8012d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d70:	4604      	mov	r4, r0
 8012d72:	6800      	ldr	r0, [r0, #0]
 8012d74:	b088      	sub	sp, #32
 8012d76:	4688      	mov	r8, r1
 8012d78:	4617      	mov	r7, r2
 8012d7a:	461d      	mov	r5, r3
 8012d7c:	b120      	cbz	r0, 8012d88 <rmw_take_response+0x1c>
 8012d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8012df8 <rmw_take_response+0x8c>)
 8012d80:	6819      	ldr	r1, [r3, #0]
 8012d82:	f7ed fa4d 	bl	8000220 <strcmp>
 8012d86:	bb78      	cbnz	r0, 8012de8 <rmw_take_response+0x7c>
 8012d88:	b10d      	cbz	r5, 8012d8e <rmw_take_response+0x22>
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	702b      	strb	r3, [r5, #0]
 8012d8e:	6864      	ldr	r4, [r4, #4]
 8012d90:	f000 fc6a 	bl	8013668 <rmw_uxrce_clean_expired_static_input_buffer>
 8012d94:	4620      	mov	r0, r4
 8012d96:	f000 fc41 	bl	801361c <rmw_uxrce_find_static_input_buffer_by_owner>
 8012d9a:	4606      	mov	r6, r0
 8012d9c:	b340      	cbz	r0, 8012df0 <rmw_take_response+0x84>
 8012d9e:	6963      	ldr	r3, [r4, #20]
 8012da0:	6884      	ldr	r4, [r0, #8]
 8012da2:	68db      	ldr	r3, [r3, #12]
 8012da4:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8012da8:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8012dac:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8012db0:	4798      	blx	r3
 8012db2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012db6:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8012dba:	f104 0110 	add.w	r1, r4, #16
 8012dbe:	4668      	mov	r0, sp
 8012dc0:	f7fc fd1a 	bl	800f7f8 <ucdr_init_buffer>
 8012dc4:	4639      	mov	r1, r7
 8012dc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012dca:	4668      	mov	r0, sp
 8012dcc:	4798      	blx	r3
 8012dce:	4631      	mov	r1, r6
 8012dd0:	4604      	mov	r4, r0
 8012dd2:	480a      	ldr	r0, [pc, #40]	@ (8012dfc <rmw_take_response+0x90>)
 8012dd4:	f008 fdc4 	bl	801b960 <put_memory>
 8012dd8:	b105      	cbz	r5, 8012ddc <rmw_take_response+0x70>
 8012dda:	702c      	strb	r4, [r5, #0]
 8012ddc:	f084 0001 	eor.w	r0, r4, #1
 8012de0:	b2c0      	uxtb	r0, r0
 8012de2:	b008      	add	sp, #32
 8012de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012de8:	200c      	movs	r0, #12
 8012dea:	b008      	add	sp, #32
 8012dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012df0:	2001      	movs	r0, #1
 8012df2:	b008      	add	sp, #32
 8012df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012df8:	08020ae8 	.word	0x08020ae8
 8012dfc:	2000c374 	.word	0x2000c374

08012e00 <rmw_create_service>:
 8012e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e04:	b091      	sub	sp, #68	@ 0x44
 8012e06:	2800      	cmp	r0, #0
 8012e08:	f000 80ba 	beq.w	8012f80 <rmw_create_service+0x180>
 8012e0c:	4689      	mov	r9, r1
 8012e0e:	2900      	cmp	r1, #0
 8012e10:	f000 80b6 	beq.w	8012f80 <rmw_create_service+0x180>
 8012e14:	4606      	mov	r6, r0
 8012e16:	6800      	ldr	r0, [r0, #0]
 8012e18:	4614      	mov	r4, r2
 8012e1a:	461d      	mov	r5, r3
 8012e1c:	f000 fdbc 	bl	8013998 <is_uxrce_rmw_identifier_valid>
 8012e20:	2800      	cmp	r0, #0
 8012e22:	f000 80ad 	beq.w	8012f80 <rmw_create_service+0x180>
 8012e26:	2c00      	cmp	r4, #0
 8012e28:	f000 80aa 	beq.w	8012f80 <rmw_create_service+0x180>
 8012e2c:	7823      	ldrb	r3, [r4, #0]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	f000 80a6 	beq.w	8012f80 <rmw_create_service+0x180>
 8012e34:	2d00      	cmp	r5, #0
 8012e36:	f000 80a3 	beq.w	8012f80 <rmw_create_service+0x180>
 8012e3a:	4854      	ldr	r0, [pc, #336]	@ (8012f8c <rmw_create_service+0x18c>)
 8012e3c:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8012e40:	f008 fd7e 	bl	801b940 <get_memory>
 8012e44:	4606      	mov	r6, r0
 8012e46:	2800      	cmp	r0, #0
 8012e48:	f000 809b 	beq.w	8012f82 <rmw_create_service+0x182>
 8012e4c:	6887      	ldr	r7, [r0, #8]
 8012e4e:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8012e52:	f7ff f965 	bl	8012120 <rmw_get_implementation_identifier>
 8012e56:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 8012e5a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8012e5c:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8012e60:	4620      	mov	r0, r4
 8012e62:	f7ed f9e7 	bl	8000234 <strlen>
 8012e66:	1c42      	adds	r2, r0, #1
 8012e68:	2a3c      	cmp	r2, #60	@ 0x3c
 8012e6a:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 8012e6e:	f200 8084 	bhi.w	8012f7a <rmw_create_service+0x17a>
 8012e72:	4621      	mov	r1, r4
 8012e74:	4650      	mov	r0, sl
 8012e76:	f00a fd1c 	bl	801d8b2 <memcpy>
 8012e7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012e7e:	4629      	mov	r1, r5
 8012e80:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 8012e84:	677b      	str	r3, [r7, #116]	@ 0x74
 8012e86:	2250      	movs	r2, #80	@ 0x50
 8012e88:	f107 0020 	add.w	r0, r7, #32
 8012e8c:	f00a fd11 	bl	801d8b2 <memcpy>
 8012e90:	493f      	ldr	r1, [pc, #252]	@ (8012f90 <rmw_create_service+0x190>)
 8012e92:	4648      	mov	r0, r9
 8012e94:	f000 ff7e 	bl	8013d94 <get_service_typesupport_handle>
 8012e98:	2800      	cmp	r0, #0
 8012e9a:	d06e      	beq.n	8012f7a <rmw_create_service+0x17a>
 8012e9c:	6843      	ldr	r3, [r0, #4]
 8012e9e:	617b      	str	r3, [r7, #20]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d06a      	beq.n	8012f7a <rmw_create_service+0x17a>
 8012ea4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012ea8:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 8012f98 <rmw_create_service+0x198>
 8012eac:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8012f9c <rmw_create_service+0x19c>
 8012eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012eb4:	2108      	movs	r1, #8
 8012eb6:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 8012eba:	1c42      	adds	r2, r0, #1
 8012ebc:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 8012ec0:	f002 fa9a 	bl	80153f8 <uxr_object_id>
 8012ec4:	2364      	movs	r3, #100	@ 0x64
 8012ec6:	6138      	str	r0, [r7, #16]
 8012ec8:	4652      	mov	r2, sl
 8012eca:	6978      	ldr	r0, [r7, #20]
 8012ecc:	4649      	mov	r1, r9
 8012ece:	f000 fcb1 	bl	8013834 <generate_service_types>
 8012ed2:	2800      	cmp	r0, #0
 8012ed4:	d051      	beq.n	8012f7a <rmw_create_service+0x17a>
 8012ed6:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 8012fa0 <rmw_create_service+0x1a0>
 8012eda:	4a2e      	ldr	r2, [pc, #184]	@ (8012f94 <rmw_create_service+0x194>)
 8012edc:	233c      	movs	r3, #60	@ 0x3c
 8012ede:	4659      	mov	r1, fp
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	f000 fc75 	bl	80137d0 <generate_service_topics>
 8012ee6:	2800      	cmp	r0, #0
 8012ee8:	d047      	beq.n	8012f7a <rmw_create_service+0x17a>
 8012eea:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012eee:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8012ef2:	a80c      	add	r0, sp, #48	@ 0x30
 8012ef4:	4629      	mov	r1, r5
 8012ef6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012efa:	f000 fc4f 	bl	801379c <convert_qos_profile>
 8012efe:	4a25      	ldr	r2, [pc, #148]	@ (8012f94 <rmw_create_service+0x194>)
 8012f00:	9400      	str	r4, [sp, #0]
 8012f02:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012f06:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8012f0a:	a80c      	add	r0, sp, #48	@ 0x30
 8012f0c:	c803      	ldmia	r0, {r0, r1}
 8012f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f10:	9005      	str	r0, [sp, #20]
 8012f12:	9a08      	ldr	r2, [sp, #32]
 8012f14:	f8ad 1018 	strh.w	r1, [sp, #24]
 8012f18:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8012f1c:	2306      	movs	r3, #6
 8012f1e:	9307      	str	r3, [sp, #28]
 8012f20:	6811      	ldr	r1, [r2, #0]
 8012f22:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012f26:	693a      	ldr	r2, [r7, #16]
 8012f28:	f002 f96a 	bl	8015200 <uxr_buffer_create_replier_bin>
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012f32:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012f36:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8012f3a:	f000 fc13 	bl	8013764 <run_xrce_session>
 8012f3e:	b1e0      	cbz	r0, 8012f7a <rmw_create_service+0x17a>
 8012f40:	7a2b      	ldrb	r3, [r5, #8]
 8012f42:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012f46:	2200      	movs	r2, #0
 8012f48:	2b02      	cmp	r3, #2
 8012f4a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8012f4e:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 8012f52:	bf0c      	ite	eq
 8012f54:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 8012f58:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 8012f5c:	673a      	str	r2, [r7, #112]	@ 0x70
 8012f5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f60:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8012f64:	ab0e      	add	r3, sp, #56	@ 0x38
 8012f66:	9300      	str	r3, [sp, #0]
 8012f68:	6811      	ldr	r1, [r2, #0]
 8012f6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012f6c:	693a      	ldr	r2, [r7, #16]
 8012f6e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012f72:	f002 fa71 	bl	8015458 <uxr_buffer_request_data>
 8012f76:	8338      	strh	r0, [r7, #24]
 8012f78:	e003      	b.n	8012f82 <rmw_create_service+0x182>
 8012f7a:	4630      	mov	r0, r6
 8012f7c:	f000 fac6 	bl	801350c <rmw_uxrce_fini_service_memory>
 8012f80:	2600      	movs	r6, #0
 8012f82:	4630      	mov	r0, r6
 8012f84:	b011      	add	sp, #68	@ 0x44
 8012f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f8a:	bf00      	nop
 8012f8c:	2000c354 	.word	0x2000c354
 8012f90:	0801eee8 	.word	0x0801eee8
 8012f94:	200076a8 	.word	0x200076a8
 8012f98:	200076e4 	.word	0x200076e4
 8012f9c:	20007644 	.word	0x20007644
 8012fa0:	20007608 	.word	0x20007608

08012fa4 <rmw_destroy_service>:
 8012fa4:	b570      	push	{r4, r5, r6, lr}
 8012fa6:	b128      	cbz	r0, 8012fb4 <rmw_destroy_service+0x10>
 8012fa8:	4604      	mov	r4, r0
 8012faa:	6800      	ldr	r0, [r0, #0]
 8012fac:	460d      	mov	r5, r1
 8012fae:	f000 fcf3 	bl	8013998 <is_uxrce_rmw_identifier_valid>
 8012fb2:	b910      	cbnz	r0, 8012fba <rmw_destroy_service+0x16>
 8012fb4:	2401      	movs	r4, #1
 8012fb6:	4620      	mov	r0, r4
 8012fb8:	bd70      	pop	{r4, r5, r6, pc}
 8012fba:	6863      	ldr	r3, [r4, #4]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d0f9      	beq.n	8012fb4 <rmw_destroy_service+0x10>
 8012fc0:	2d00      	cmp	r5, #0
 8012fc2:	d0f7      	beq.n	8012fb4 <rmw_destroy_service+0x10>
 8012fc4:	6828      	ldr	r0, [r5, #0]
 8012fc6:	f000 fce7 	bl	8013998 <is_uxrce_rmw_identifier_valid>
 8012fca:	2800      	cmp	r0, #0
 8012fcc:	d0f2      	beq.n	8012fb4 <rmw_destroy_service+0x10>
 8012fce:	686e      	ldr	r6, [r5, #4]
 8012fd0:	2e00      	cmp	r6, #0
 8012fd2:	d0ef      	beq.n	8012fb4 <rmw_destroy_service+0x10>
 8012fd4:	6864      	ldr	r4, [r4, #4]
 8012fd6:	6932      	ldr	r2, [r6, #16]
 8012fd8:	6920      	ldr	r0, [r4, #16]
 8012fda:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012fde:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012fe2:	6819      	ldr	r1, [r3, #0]
 8012fe4:	f002 fa72 	bl	80154cc <uxr_buffer_cancel_data>
 8012fe8:	4602      	mov	r2, r0
 8012fea:	6920      	ldr	r0, [r4, #16]
 8012fec:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012ff0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012ff4:	f000 fbb6 	bl	8013764 <run_xrce_session>
 8012ff8:	6920      	ldr	r0, [r4, #16]
 8012ffa:	6932      	ldr	r2, [r6, #16]
 8012ffc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013000:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013004:	6819      	ldr	r1, [r3, #0]
 8013006:	f001 ff67 	bl	8014ed8 <uxr_buffer_delete_entity>
 801300a:	4602      	mov	r2, r0
 801300c:	6920      	ldr	r0, [r4, #16]
 801300e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013012:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013016:	f000 fba5 	bl	8013764 <run_xrce_session>
 801301a:	2800      	cmp	r0, #0
 801301c:	4628      	mov	r0, r5
 801301e:	bf14      	ite	ne
 8013020:	2400      	movne	r4, #0
 8013022:	2402      	moveq	r4, #2
 8013024:	f000 fa72 	bl	801350c <rmw_uxrce_fini_service_memory>
 8013028:	e7c5      	b.n	8012fb6 <rmw_destroy_service+0x12>
 801302a:	bf00      	nop

0801302c <rmw_service_response_publisher_get_actual_qos>:
 801302c:	b150      	cbz	r0, 8013044 <rmw_service_response_publisher_get_actual_qos+0x18>
 801302e:	b508      	push	{r3, lr}
 8013030:	460b      	mov	r3, r1
 8013032:	b149      	cbz	r1, 8013048 <rmw_service_response_publisher_get_actual_qos+0x1c>
 8013034:	6841      	ldr	r1, [r0, #4]
 8013036:	2250      	movs	r2, #80	@ 0x50
 8013038:	3120      	adds	r1, #32
 801303a:	4618      	mov	r0, r3
 801303c:	f00a fc39 	bl	801d8b2 <memcpy>
 8013040:	2000      	movs	r0, #0
 8013042:	bd08      	pop	{r3, pc}
 8013044:	200b      	movs	r0, #11
 8013046:	4770      	bx	lr
 8013048:	200b      	movs	r0, #11
 801304a:	bd08      	pop	{r3, pc}

0801304c <rmw_service_request_subscription_get_actual_qos>:
 801304c:	b150      	cbz	r0, 8013064 <rmw_service_request_subscription_get_actual_qos+0x18>
 801304e:	b508      	push	{r3, lr}
 8013050:	460b      	mov	r3, r1
 8013052:	b149      	cbz	r1, 8013068 <rmw_service_request_subscription_get_actual_qos+0x1c>
 8013054:	6841      	ldr	r1, [r0, #4]
 8013056:	2250      	movs	r2, #80	@ 0x50
 8013058:	3120      	adds	r1, #32
 801305a:	4618      	mov	r0, r3
 801305c:	f00a fc29 	bl	801d8b2 <memcpy>
 8013060:	2000      	movs	r0, #0
 8013062:	bd08      	pop	{r3, pc}
 8013064:	200b      	movs	r0, #11
 8013066:	4770      	bx	lr
 8013068:	200b      	movs	r0, #11
 801306a:	bd08      	pop	{r3, pc}

0801306c <rmw_destroy_subscription>:
 801306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801306e:	b128      	cbz	r0, 801307c <rmw_destroy_subscription+0x10>
 8013070:	4604      	mov	r4, r0
 8013072:	6800      	ldr	r0, [r0, #0]
 8013074:	460d      	mov	r5, r1
 8013076:	f000 fc8f 	bl	8013998 <is_uxrce_rmw_identifier_valid>
 801307a:	b910      	cbnz	r0, 8013082 <rmw_destroy_subscription+0x16>
 801307c:	2401      	movs	r4, #1
 801307e:	4620      	mov	r0, r4
 8013080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013082:	6863      	ldr	r3, [r4, #4]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d0f9      	beq.n	801307c <rmw_destroy_subscription+0x10>
 8013088:	2d00      	cmp	r5, #0
 801308a:	d0f7      	beq.n	801307c <rmw_destroy_subscription+0x10>
 801308c:	6828      	ldr	r0, [r5, #0]
 801308e:	f000 fc83 	bl	8013998 <is_uxrce_rmw_identifier_valid>
 8013092:	2800      	cmp	r0, #0
 8013094:	d0f2      	beq.n	801307c <rmw_destroy_subscription+0x10>
 8013096:	686c      	ldr	r4, [r5, #4]
 8013098:	2c00      	cmp	r4, #0
 801309a:	d0ef      	beq.n	801307c <rmw_destroy_subscription+0x10>
 801309c:	6a26      	ldr	r6, [r4, #32]
 801309e:	6962      	ldr	r2, [r4, #20]
 80130a0:	6930      	ldr	r0, [r6, #16]
 80130a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80130a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80130aa:	6819      	ldr	r1, [r3, #0]
 80130ac:	f002 fa0e 	bl	80154cc <uxr_buffer_cancel_data>
 80130b0:	4602      	mov	r2, r0
 80130b2:	6930      	ldr	r0, [r6, #16]
 80130b4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80130b8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80130bc:	f000 fb52 	bl	8013764 <run_xrce_session>
 80130c0:	69e0      	ldr	r0, [r4, #28]
 80130c2:	f008 fcd9 	bl	801ba78 <destroy_topic>
 80130c6:	6a23      	ldr	r3, [r4, #32]
 80130c8:	6962      	ldr	r2, [r4, #20]
 80130ca:	6918      	ldr	r0, [r3, #16]
 80130cc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80130d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80130d4:	6819      	ldr	r1, [r3, #0]
 80130d6:	f001 feff 	bl	8014ed8 <uxr_buffer_delete_entity>
 80130da:	6a23      	ldr	r3, [r4, #32]
 80130dc:	6922      	ldr	r2, [r4, #16]
 80130de:	691b      	ldr	r3, [r3, #16]
 80130e0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80130e4:	4604      	mov	r4, r0
 80130e6:	6809      	ldr	r1, [r1, #0]
 80130e8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80130ec:	f001 fef4 	bl	8014ed8 <uxr_buffer_delete_entity>
 80130f0:	6937      	ldr	r7, [r6, #16]
 80130f2:	4622      	mov	r2, r4
 80130f4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80130f8:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80130fc:	4604      	mov	r4, r0
 80130fe:	4638      	mov	r0, r7
 8013100:	f000 fb30 	bl	8013764 <run_xrce_session>
 8013104:	6936      	ldr	r6, [r6, #16]
 8013106:	4622      	mov	r2, r4
 8013108:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 801310c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8013110:	4604      	mov	r4, r0
 8013112:	4630      	mov	r0, r6
 8013114:	f000 fb26 	bl	8013764 <run_xrce_session>
 8013118:	b12c      	cbz	r4, 8013126 <rmw_destroy_subscription+0xba>
 801311a:	b120      	cbz	r0, 8013126 <rmw_destroy_subscription+0xba>
 801311c:	2400      	movs	r4, #0
 801311e:	4628      	mov	r0, r5
 8013120:	f000 f9de 	bl	80134e0 <rmw_uxrce_fini_subscription_memory>
 8013124:	e7ab      	b.n	801307e <rmw_destroy_subscription+0x12>
 8013126:	2402      	movs	r4, #2
 8013128:	e7f9      	b.n	801311e <rmw_destroy_subscription+0xb2>
 801312a:	bf00      	nop

0801312c <rmw_uxrce_transport_init>:
 801312c:	b508      	push	{r3, lr}
 801312e:	b108      	cbz	r0, 8013134 <rmw_uxrce_transport_init+0x8>
 8013130:	f100 0210 	add.w	r2, r0, #16
 8013134:	b139      	cbz	r1, 8013146 <rmw_uxrce_transport_init+0x1a>
 8013136:	6949      	ldr	r1, [r1, #20]
 8013138:	4610      	mov	r0, r2
 801313a:	f002 f925 	bl	8015388 <uxr_init_custom_transport>
 801313e:	f080 0001 	eor.w	r0, r0, #1
 8013142:	b2c0      	uxtb	r0, r0
 8013144:	bd08      	pop	{r3, pc}
 8013146:	4b04      	ldr	r3, [pc, #16]	@ (8013158 <rmw_uxrce_transport_init+0x2c>)
 8013148:	4610      	mov	r0, r2
 801314a:	6859      	ldr	r1, [r3, #4]
 801314c:	f002 f91c 	bl	8015388 <uxr_init_custom_transport>
 8013150:	f080 0001 	eor.w	r0, r0, #1
 8013154:	b2c0      	uxtb	r0, r0
 8013156:	bd08      	pop	{r3, pc}
 8013158:	20007470 	.word	0x20007470

0801315c <rmw_uros_epoch_millis>:
 801315c:	4b05      	ldr	r3, [pc, #20]	@ (8013174 <rmw_uros_epoch_millis+0x18>)
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	b123      	cbz	r3, 801316c <rmw_uros_epoch_millis+0x10>
 8013162:	6898      	ldr	r0, [r3, #8]
 8013164:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013168:	f002 bbbc 	b.w	80158e4 <uxr_epoch_millis>
 801316c:	2000      	movs	r0, #0
 801316e:	2100      	movs	r1, #0
 8013170:	4770      	bx	lr
 8013172:	bf00      	nop
 8013174:	2000c364 	.word	0x2000c364

08013178 <rmw_uros_epoch_nanos>:
 8013178:	4b05      	ldr	r3, [pc, #20]	@ (8013190 <rmw_uros_epoch_nanos+0x18>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	b123      	cbz	r3, 8013188 <rmw_uros_epoch_nanos+0x10>
 801317e:	6898      	ldr	r0, [r3, #8]
 8013180:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013184:	f002 bbc0 	b.w	8015908 <uxr_epoch_nanos>
 8013188:	2000      	movs	r0, #0
 801318a:	2100      	movs	r1, #0
 801318c:	4770      	bx	lr
 801318e:	bf00      	nop
 8013190:	2000c364 	.word	0x2000c364

08013194 <rmw_uros_sync_session>:
 8013194:	b508      	push	{r3, lr}
 8013196:	4b07      	ldr	r3, [pc, #28]	@ (80131b4 <rmw_uros_sync_session+0x20>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	b14b      	cbz	r3, 80131b0 <rmw_uros_sync_session+0x1c>
 801319c:	4601      	mov	r1, r0
 801319e:	6898      	ldr	r0, [r3, #8]
 80131a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80131a4:	f002 fff4 	bl	8016190 <uxr_sync_session>
 80131a8:	f080 0001 	eor.w	r0, r0, #1
 80131ac:	b2c0      	uxtb	r0, r0
 80131ae:	bd08      	pop	{r3, pc}
 80131b0:	2001      	movs	r0, #1
 80131b2:	bd08      	pop	{r3, pc}
 80131b4:	2000c364 	.word	0x2000c364

080131b8 <rmw_uxrce_init_service_memory>:
 80131b8:	b1e2      	cbz	r2, 80131f4 <rmw_uxrce_init_service_memory+0x3c>
 80131ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131be:	7b05      	ldrb	r5, [r0, #12]
 80131c0:	4606      	mov	r6, r0
 80131c2:	b9ad      	cbnz	r5, 80131f0 <rmw_uxrce_init_service_memory+0x38>
 80131c4:	23c8      	movs	r3, #200	@ 0xc8
 80131c6:	e9c0 5500 	strd	r5, r5, [r0]
 80131ca:	6083      	str	r3, [r0, #8]
 80131cc:	f240 1301 	movw	r3, #257	@ 0x101
 80131d0:	4617      	mov	r7, r2
 80131d2:	8183      	strh	r3, [r0, #12]
 80131d4:	460c      	mov	r4, r1
 80131d6:	46a8      	mov	r8, r5
 80131d8:	4621      	mov	r1, r4
 80131da:	4630      	mov	r0, r6
 80131dc:	3501      	adds	r5, #1
 80131de:	f008 fbbf 	bl	801b960 <put_memory>
 80131e2:	42af      	cmp	r7, r5
 80131e4:	60a4      	str	r4, [r4, #8]
 80131e6:	f884 800c 	strb.w	r8, [r4, #12]
 80131ea:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80131ee:	d1f3      	bne.n	80131d8 <rmw_uxrce_init_service_memory+0x20>
 80131f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131f4:	4770      	bx	lr
 80131f6:	bf00      	nop

080131f8 <rmw_uxrce_init_client_memory>:
 80131f8:	b1e2      	cbz	r2, 8013234 <rmw_uxrce_init_client_memory+0x3c>
 80131fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131fe:	7b05      	ldrb	r5, [r0, #12]
 8013200:	4606      	mov	r6, r0
 8013202:	b9ad      	cbnz	r5, 8013230 <rmw_uxrce_init_client_memory+0x38>
 8013204:	23c8      	movs	r3, #200	@ 0xc8
 8013206:	e9c0 5500 	strd	r5, r5, [r0]
 801320a:	6083      	str	r3, [r0, #8]
 801320c:	f240 1301 	movw	r3, #257	@ 0x101
 8013210:	4617      	mov	r7, r2
 8013212:	8183      	strh	r3, [r0, #12]
 8013214:	460c      	mov	r4, r1
 8013216:	46a8      	mov	r8, r5
 8013218:	4621      	mov	r1, r4
 801321a:	4630      	mov	r0, r6
 801321c:	3501      	adds	r5, #1
 801321e:	f008 fb9f 	bl	801b960 <put_memory>
 8013222:	42af      	cmp	r7, r5
 8013224:	60a4      	str	r4, [r4, #8]
 8013226:	f884 800c 	strb.w	r8, [r4, #12]
 801322a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801322e:	d1f3      	bne.n	8013218 <rmw_uxrce_init_client_memory+0x20>
 8013230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013234:	4770      	bx	lr
 8013236:	bf00      	nop

08013238 <rmw_uxrce_init_publisher_memory>:
 8013238:	b1e2      	cbz	r2, 8013274 <rmw_uxrce_init_publisher_memory+0x3c>
 801323a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801323e:	7b05      	ldrb	r5, [r0, #12]
 8013240:	4606      	mov	r6, r0
 8013242:	b9ad      	cbnz	r5, 8013270 <rmw_uxrce_init_publisher_memory+0x38>
 8013244:	23d8      	movs	r3, #216	@ 0xd8
 8013246:	e9c0 5500 	strd	r5, r5, [r0]
 801324a:	6083      	str	r3, [r0, #8]
 801324c:	f240 1301 	movw	r3, #257	@ 0x101
 8013250:	4617      	mov	r7, r2
 8013252:	8183      	strh	r3, [r0, #12]
 8013254:	460c      	mov	r4, r1
 8013256:	46a8      	mov	r8, r5
 8013258:	4621      	mov	r1, r4
 801325a:	4630      	mov	r0, r6
 801325c:	3501      	adds	r5, #1
 801325e:	f008 fb7f 	bl	801b960 <put_memory>
 8013262:	42af      	cmp	r7, r5
 8013264:	60a4      	str	r4, [r4, #8]
 8013266:	f884 800c 	strb.w	r8, [r4, #12]
 801326a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801326e:	d1f3      	bne.n	8013258 <rmw_uxrce_init_publisher_memory+0x20>
 8013270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013274:	4770      	bx	lr
 8013276:	bf00      	nop

08013278 <rmw_uxrce_init_subscription_memory>:
 8013278:	b1e2      	cbz	r2, 80132b4 <rmw_uxrce_init_subscription_memory+0x3c>
 801327a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801327e:	7b05      	ldrb	r5, [r0, #12]
 8013280:	4606      	mov	r6, r0
 8013282:	b9ad      	cbnz	r5, 80132b0 <rmw_uxrce_init_subscription_memory+0x38>
 8013284:	23d8      	movs	r3, #216	@ 0xd8
 8013286:	e9c0 5500 	strd	r5, r5, [r0]
 801328a:	6083      	str	r3, [r0, #8]
 801328c:	f240 1301 	movw	r3, #257	@ 0x101
 8013290:	4617      	mov	r7, r2
 8013292:	8183      	strh	r3, [r0, #12]
 8013294:	460c      	mov	r4, r1
 8013296:	46a8      	mov	r8, r5
 8013298:	4621      	mov	r1, r4
 801329a:	4630      	mov	r0, r6
 801329c:	3501      	adds	r5, #1
 801329e:	f008 fb5f 	bl	801b960 <put_memory>
 80132a2:	42af      	cmp	r7, r5
 80132a4:	60a4      	str	r4, [r4, #8]
 80132a6:	f884 800c 	strb.w	r8, [r4, #12]
 80132aa:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80132ae:	d1f3      	bne.n	8013298 <rmw_uxrce_init_subscription_memory+0x20>
 80132b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132b4:	4770      	bx	lr
 80132b6:	bf00      	nop

080132b8 <rmw_uxrce_init_node_memory>:
 80132b8:	b1e2      	cbz	r2, 80132f4 <rmw_uxrce_init_node_memory+0x3c>
 80132ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132be:	7b05      	ldrb	r5, [r0, #12]
 80132c0:	4606      	mov	r6, r0
 80132c2:	b9ad      	cbnz	r5, 80132f0 <rmw_uxrce_init_node_memory+0x38>
 80132c4:	23a4      	movs	r3, #164	@ 0xa4
 80132c6:	e9c0 5500 	strd	r5, r5, [r0]
 80132ca:	6083      	str	r3, [r0, #8]
 80132cc:	f240 1301 	movw	r3, #257	@ 0x101
 80132d0:	4617      	mov	r7, r2
 80132d2:	8183      	strh	r3, [r0, #12]
 80132d4:	460c      	mov	r4, r1
 80132d6:	46a8      	mov	r8, r5
 80132d8:	4621      	mov	r1, r4
 80132da:	4630      	mov	r0, r6
 80132dc:	3501      	adds	r5, #1
 80132de:	f008 fb3f 	bl	801b960 <put_memory>
 80132e2:	42af      	cmp	r7, r5
 80132e4:	60a4      	str	r4, [r4, #8]
 80132e6:	f884 800c 	strb.w	r8, [r4, #12]
 80132ea:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 80132ee:	d1f3      	bne.n	80132d8 <rmw_uxrce_init_node_memory+0x20>
 80132f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132f4:	4770      	bx	lr
 80132f6:	bf00      	nop

080132f8 <rmw_uxrce_init_session_memory>:
 80132f8:	b1ea      	cbz	r2, 8013336 <rmw_uxrce_init_session_memory+0x3e>
 80132fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132fe:	7b05      	ldrb	r5, [r0, #12]
 8013300:	4606      	mov	r6, r0
 8013302:	b9b5      	cbnz	r5, 8013332 <rmw_uxrce_init_session_memory+0x3a>
 8013304:	e9c0 5500 	strd	r5, r5, [r0]
 8013308:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 801330c:	f240 1301 	movw	r3, #257	@ 0x101
 8013310:	4617      	mov	r7, r2
 8013312:	f8c0 8008 	str.w	r8, [r0, #8]
 8013316:	460c      	mov	r4, r1
 8013318:	8183      	strh	r3, [r0, #12]
 801331a:	46a9      	mov	r9, r5
 801331c:	4621      	mov	r1, r4
 801331e:	4630      	mov	r0, r6
 8013320:	3501      	adds	r5, #1
 8013322:	f008 fb1d 	bl	801b960 <put_memory>
 8013326:	42af      	cmp	r7, r5
 8013328:	60a4      	str	r4, [r4, #8]
 801332a:	f884 900c 	strb.w	r9, [r4, #12]
 801332e:	4444      	add	r4, r8
 8013330:	d1f4      	bne.n	801331c <rmw_uxrce_init_session_memory+0x24>
 8013332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013336:	4770      	bx	lr

08013338 <rmw_uxrce_init_topic_memory>:
 8013338:	b1e2      	cbz	r2, 8013374 <rmw_uxrce_init_topic_memory+0x3c>
 801333a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801333e:	7b05      	ldrb	r5, [r0, #12]
 8013340:	4606      	mov	r6, r0
 8013342:	b9ad      	cbnz	r5, 8013370 <rmw_uxrce_init_topic_memory+0x38>
 8013344:	231c      	movs	r3, #28
 8013346:	e9c0 5500 	strd	r5, r5, [r0]
 801334a:	6083      	str	r3, [r0, #8]
 801334c:	f240 1301 	movw	r3, #257	@ 0x101
 8013350:	4617      	mov	r7, r2
 8013352:	8183      	strh	r3, [r0, #12]
 8013354:	460c      	mov	r4, r1
 8013356:	46a8      	mov	r8, r5
 8013358:	4621      	mov	r1, r4
 801335a:	4630      	mov	r0, r6
 801335c:	3501      	adds	r5, #1
 801335e:	f008 faff 	bl	801b960 <put_memory>
 8013362:	42af      	cmp	r7, r5
 8013364:	60a4      	str	r4, [r4, #8]
 8013366:	f884 800c 	strb.w	r8, [r4, #12]
 801336a:	f104 041c 	add.w	r4, r4, #28
 801336e:	d1f3      	bne.n	8013358 <rmw_uxrce_init_topic_memory+0x20>
 8013370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013374:	4770      	bx	lr
 8013376:	bf00      	nop

08013378 <rmw_uxrce_init_static_input_buffer_memory>:
 8013378:	b1ea      	cbz	r2, 80133b6 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 801337a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801337e:	7b05      	ldrb	r5, [r0, #12]
 8013380:	4606      	mov	r6, r0
 8013382:	b9b5      	cbnz	r5, 80133b2 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8013384:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8013388:	e9c0 5500 	strd	r5, r5, [r0]
 801338c:	6083      	str	r3, [r0, #8]
 801338e:	f240 1301 	movw	r3, #257	@ 0x101
 8013392:	4617      	mov	r7, r2
 8013394:	8183      	strh	r3, [r0, #12]
 8013396:	460c      	mov	r4, r1
 8013398:	46a8      	mov	r8, r5
 801339a:	4621      	mov	r1, r4
 801339c:	4630      	mov	r0, r6
 801339e:	3501      	adds	r5, #1
 80133a0:	f008 fade 	bl	801b960 <put_memory>
 80133a4:	42af      	cmp	r7, r5
 80133a6:	60a4      	str	r4, [r4, #8]
 80133a8:	f884 800c 	strb.w	r8, [r4, #12]
 80133ac:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 80133b0:	d1f3      	bne.n	801339a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80133b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133b6:	4770      	bx	lr

080133b8 <rmw_uxrce_init_init_options_impl_memory>:
 80133b8:	b1e2      	cbz	r2, 80133f4 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 80133ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133be:	7b05      	ldrb	r5, [r0, #12]
 80133c0:	4606      	mov	r6, r0
 80133c2:	b9ad      	cbnz	r5, 80133f0 <rmw_uxrce_init_init_options_impl_memory+0x38>
 80133c4:	232c      	movs	r3, #44	@ 0x2c
 80133c6:	e9c0 5500 	strd	r5, r5, [r0]
 80133ca:	6083      	str	r3, [r0, #8]
 80133cc:	f240 1301 	movw	r3, #257	@ 0x101
 80133d0:	4617      	mov	r7, r2
 80133d2:	8183      	strh	r3, [r0, #12]
 80133d4:	460c      	mov	r4, r1
 80133d6:	46a8      	mov	r8, r5
 80133d8:	4621      	mov	r1, r4
 80133da:	4630      	mov	r0, r6
 80133dc:	3501      	adds	r5, #1
 80133de:	f008 fabf 	bl	801b960 <put_memory>
 80133e2:	42af      	cmp	r7, r5
 80133e4:	60a4      	str	r4, [r4, #8]
 80133e6:	f884 800c 	strb.w	r8, [r4, #12]
 80133ea:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 80133ee:	d1f3      	bne.n	80133d8 <rmw_uxrce_init_init_options_impl_memory+0x20>
 80133f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133f4:	4770      	bx	lr
 80133f6:	bf00      	nop

080133f8 <rmw_uxrce_init_wait_set_memory>:
 80133f8:	b1e2      	cbz	r2, 8013434 <rmw_uxrce_init_wait_set_memory+0x3c>
 80133fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133fe:	7b05      	ldrb	r5, [r0, #12]
 8013400:	4606      	mov	r6, r0
 8013402:	b9ad      	cbnz	r5, 8013430 <rmw_uxrce_init_wait_set_memory+0x38>
 8013404:	231c      	movs	r3, #28
 8013406:	e9c0 5500 	strd	r5, r5, [r0]
 801340a:	6083      	str	r3, [r0, #8]
 801340c:	f240 1301 	movw	r3, #257	@ 0x101
 8013410:	4617      	mov	r7, r2
 8013412:	8183      	strh	r3, [r0, #12]
 8013414:	460c      	mov	r4, r1
 8013416:	46a8      	mov	r8, r5
 8013418:	4621      	mov	r1, r4
 801341a:	4630      	mov	r0, r6
 801341c:	3501      	adds	r5, #1
 801341e:	f008 fa9f 	bl	801b960 <put_memory>
 8013422:	42af      	cmp	r7, r5
 8013424:	60a4      	str	r4, [r4, #8]
 8013426:	f884 800c 	strb.w	r8, [r4, #12]
 801342a:	f104 041c 	add.w	r4, r4, #28
 801342e:	d1f3      	bne.n	8013418 <rmw_uxrce_init_wait_set_memory+0x20>
 8013430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013434:	4770      	bx	lr
 8013436:	bf00      	nop

08013438 <rmw_uxrce_init_guard_condition_memory>:
 8013438:	b1e2      	cbz	r2, 8013474 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801343a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801343e:	7b05      	ldrb	r5, [r0, #12]
 8013440:	4606      	mov	r6, r0
 8013442:	b9ad      	cbnz	r5, 8013470 <rmw_uxrce_init_guard_condition_memory+0x38>
 8013444:	2320      	movs	r3, #32
 8013446:	e9c0 5500 	strd	r5, r5, [r0]
 801344a:	6083      	str	r3, [r0, #8]
 801344c:	f240 1301 	movw	r3, #257	@ 0x101
 8013450:	4617      	mov	r7, r2
 8013452:	8183      	strh	r3, [r0, #12]
 8013454:	460c      	mov	r4, r1
 8013456:	46a8      	mov	r8, r5
 8013458:	4621      	mov	r1, r4
 801345a:	4630      	mov	r0, r6
 801345c:	3501      	adds	r5, #1
 801345e:	f008 fa7f 	bl	801b960 <put_memory>
 8013462:	42af      	cmp	r7, r5
 8013464:	60a4      	str	r4, [r4, #8]
 8013466:	f884 800c 	strb.w	r8, [r4, #12]
 801346a:	f104 0420 	add.w	r4, r4, #32
 801346e:	d1f3      	bne.n	8013458 <rmw_uxrce_init_guard_condition_memory+0x20>
 8013470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013474:	4770      	bx	lr
 8013476:	bf00      	nop

08013478 <rmw_uxrce_fini_session_memory>:
 8013478:	4601      	mov	r1, r0
 801347a:	4801      	ldr	r0, [pc, #4]	@ (8013480 <rmw_uxrce_fini_session_memory+0x8>)
 801347c:	f008 ba70 	b.w	801b960 <put_memory>
 8013480:	2000c364 	.word	0x2000c364

08013484 <rmw_uxrce_fini_node_memory>:
 8013484:	b538      	push	{r3, r4, r5, lr}
 8013486:	4604      	mov	r4, r0
 8013488:	6800      	ldr	r0, [r0, #0]
 801348a:	b128      	cbz	r0, 8013498 <rmw_uxrce_fini_node_memory+0x14>
 801348c:	4b07      	ldr	r3, [pc, #28]	@ (80134ac <rmw_uxrce_fini_node_memory+0x28>)
 801348e:	6819      	ldr	r1, [r3, #0]
 8013490:	f7ec fec6 	bl	8000220 <strcmp>
 8013494:	b940      	cbnz	r0, 80134a8 <rmw_uxrce_fini_node_memory+0x24>
 8013496:	6020      	str	r0, [r4, #0]
 8013498:	6861      	ldr	r1, [r4, #4]
 801349a:	b129      	cbz	r1, 80134a8 <rmw_uxrce_fini_node_memory+0x24>
 801349c:	2500      	movs	r5, #0
 801349e:	4804      	ldr	r0, [pc, #16]	@ (80134b0 <rmw_uxrce_fini_node_memory+0x2c>)
 80134a0:	610d      	str	r5, [r1, #16]
 80134a2:	f008 fa5d 	bl	801b960 <put_memory>
 80134a6:	6065      	str	r5, [r4, #4]
 80134a8:	bd38      	pop	{r3, r4, r5, pc}
 80134aa:	bf00      	nop
 80134ac:	08020ae8 	.word	0x08020ae8
 80134b0:	2000c334 	.word	0x2000c334

080134b4 <rmw_uxrce_fini_publisher_memory>:
 80134b4:	b510      	push	{r4, lr}
 80134b6:	4604      	mov	r4, r0
 80134b8:	6800      	ldr	r0, [r0, #0]
 80134ba:	b128      	cbz	r0, 80134c8 <rmw_uxrce_fini_publisher_memory+0x14>
 80134bc:	4b06      	ldr	r3, [pc, #24]	@ (80134d8 <rmw_uxrce_fini_publisher_memory+0x24>)
 80134be:	6819      	ldr	r1, [r3, #0]
 80134c0:	f7ec feae 	bl	8000220 <strcmp>
 80134c4:	b938      	cbnz	r0, 80134d6 <rmw_uxrce_fini_publisher_memory+0x22>
 80134c6:	6020      	str	r0, [r4, #0]
 80134c8:	6861      	ldr	r1, [r4, #4]
 80134ca:	b121      	cbz	r1, 80134d6 <rmw_uxrce_fini_publisher_memory+0x22>
 80134cc:	4803      	ldr	r0, [pc, #12]	@ (80134dc <rmw_uxrce_fini_publisher_memory+0x28>)
 80134ce:	f008 fa47 	bl	801b960 <put_memory>
 80134d2:	2300      	movs	r3, #0
 80134d4:	6063      	str	r3, [r4, #4]
 80134d6:	bd10      	pop	{r4, pc}
 80134d8:	08020ae8 	.word	0x08020ae8
 80134dc:	2000c344 	.word	0x2000c344

080134e0 <rmw_uxrce_fini_subscription_memory>:
 80134e0:	b510      	push	{r4, lr}
 80134e2:	4604      	mov	r4, r0
 80134e4:	6800      	ldr	r0, [r0, #0]
 80134e6:	b128      	cbz	r0, 80134f4 <rmw_uxrce_fini_subscription_memory+0x14>
 80134e8:	4b06      	ldr	r3, [pc, #24]	@ (8013504 <rmw_uxrce_fini_subscription_memory+0x24>)
 80134ea:	6819      	ldr	r1, [r3, #0]
 80134ec:	f7ec fe98 	bl	8000220 <strcmp>
 80134f0:	b938      	cbnz	r0, 8013502 <rmw_uxrce_fini_subscription_memory+0x22>
 80134f2:	6020      	str	r0, [r4, #0]
 80134f4:	6861      	ldr	r1, [r4, #4]
 80134f6:	b121      	cbz	r1, 8013502 <rmw_uxrce_fini_subscription_memory+0x22>
 80134f8:	4803      	ldr	r0, [pc, #12]	@ (8013508 <rmw_uxrce_fini_subscription_memory+0x28>)
 80134fa:	f008 fa31 	bl	801b960 <put_memory>
 80134fe:	2300      	movs	r3, #0
 8013500:	6063      	str	r3, [r4, #4]
 8013502:	bd10      	pop	{r4, pc}
 8013504:	08020ae8 	.word	0x08020ae8
 8013508:	2000c384 	.word	0x2000c384

0801350c <rmw_uxrce_fini_service_memory>:
 801350c:	b510      	push	{r4, lr}
 801350e:	4604      	mov	r4, r0
 8013510:	6800      	ldr	r0, [r0, #0]
 8013512:	b128      	cbz	r0, 8013520 <rmw_uxrce_fini_service_memory+0x14>
 8013514:	4b06      	ldr	r3, [pc, #24]	@ (8013530 <rmw_uxrce_fini_service_memory+0x24>)
 8013516:	6819      	ldr	r1, [r3, #0]
 8013518:	f7ec fe82 	bl	8000220 <strcmp>
 801351c:	b938      	cbnz	r0, 801352e <rmw_uxrce_fini_service_memory+0x22>
 801351e:	6020      	str	r0, [r4, #0]
 8013520:	6861      	ldr	r1, [r4, #4]
 8013522:	b121      	cbz	r1, 801352e <rmw_uxrce_fini_service_memory+0x22>
 8013524:	4803      	ldr	r0, [pc, #12]	@ (8013534 <rmw_uxrce_fini_service_memory+0x28>)
 8013526:	f008 fa1b 	bl	801b960 <put_memory>
 801352a:	2300      	movs	r3, #0
 801352c:	6063      	str	r3, [r4, #4]
 801352e:	bd10      	pop	{r4, pc}
 8013530:	08020ae8 	.word	0x08020ae8
 8013534:	2000c354 	.word	0x2000c354

08013538 <rmw_uxrce_fini_client_memory>:
 8013538:	b510      	push	{r4, lr}
 801353a:	4604      	mov	r4, r0
 801353c:	6800      	ldr	r0, [r0, #0]
 801353e:	b128      	cbz	r0, 801354c <rmw_uxrce_fini_client_memory+0x14>
 8013540:	4b06      	ldr	r3, [pc, #24]	@ (801355c <rmw_uxrce_fini_client_memory+0x24>)
 8013542:	6819      	ldr	r1, [r3, #0]
 8013544:	f7ec fe6c 	bl	8000220 <strcmp>
 8013548:	b938      	cbnz	r0, 801355a <rmw_uxrce_fini_client_memory+0x22>
 801354a:	6020      	str	r0, [r4, #0]
 801354c:	6861      	ldr	r1, [r4, #4]
 801354e:	b121      	cbz	r1, 801355a <rmw_uxrce_fini_client_memory+0x22>
 8013550:	4803      	ldr	r0, [pc, #12]	@ (8013560 <rmw_uxrce_fini_client_memory+0x28>)
 8013552:	f008 fa05 	bl	801b960 <put_memory>
 8013556:	2300      	movs	r3, #0
 8013558:	6063      	str	r3, [r4, #4]
 801355a:	bd10      	pop	{r4, pc}
 801355c:	08020ae8 	.word	0x08020ae8
 8013560:	20007748 	.word	0x20007748

08013564 <rmw_uxrce_fini_topic_memory>:
 8013564:	b510      	push	{r4, lr}
 8013566:	4604      	mov	r4, r0
 8013568:	4621      	mov	r1, r4
 801356a:	4803      	ldr	r0, [pc, #12]	@ (8013578 <rmw_uxrce_fini_topic_memory+0x14>)
 801356c:	f008 f9f8 	bl	801b960 <put_memory>
 8013570:	2300      	movs	r3, #0
 8013572:	61a3      	str	r3, [r4, #24]
 8013574:	bd10      	pop	{r4, pc}
 8013576:	bf00      	nop
 8013578:	2000c394 	.word	0x2000c394

0801357c <rmw_uxrce_get_static_input_buffer_for_entity>:
 801357c:	b082      	sub	sp, #8
 801357e:	b530      	push	{r4, r5, lr}
 8013580:	4925      	ldr	r1, [pc, #148]	@ (8013618 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8013582:	680d      	ldr	r5, [r1, #0]
 8013584:	ac03      	add	r4, sp, #12
 8013586:	e884 000c 	stmia.w	r4, {r2, r3}
 801358a:	461c      	mov	r4, r3
 801358c:	2d00      	cmp	r5, #0
 801358e:	d041      	beq.n	8013614 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8013590:	462b      	mov	r3, r5
 8013592:	2100      	movs	r1, #0
 8013594:	689a      	ldr	r2, [r3, #8]
 8013596:	685b      	ldr	r3, [r3, #4]
 8013598:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 801359c:	4290      	cmp	r0, r2
 801359e:	bf08      	it	eq
 80135a0:	3101      	addeq	r1, #1
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d1f6      	bne.n	8013594 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 80135a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80135aa:	2b02      	cmp	r3, #2
 80135ac:	d029      	beq.n	8013602 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80135ae:	d907      	bls.n	80135c0 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 80135b0:	2b03      	cmp	r3, #3
 80135b2:	d005      	beq.n	80135c0 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 80135b4:	2100      	movs	r1, #0
 80135b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135ba:	4608      	mov	r0, r1
 80135bc:	b002      	add	sp, #8
 80135be:	4770      	bx	lr
 80135c0:	b314      	cbz	r4, 8013608 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 80135c2:	428c      	cmp	r4, r1
 80135c4:	d820      	bhi.n	8013608 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 80135c6:	2d00      	cmp	r5, #0
 80135c8:	d0f4      	beq.n	80135b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80135ca:	2100      	movs	r1, #0
 80135cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80135d0:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80135d4:	e002      	b.n	80135dc <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 80135d6:	686d      	ldr	r5, [r5, #4]
 80135d8:	2d00      	cmp	r5, #0
 80135da:	d0ec      	beq.n	80135b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 80135dc:	68ab      	ldr	r3, [r5, #8]
 80135de:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 80135e2:	4290      	cmp	r0, r2
 80135e4:	d1f7      	bne.n	80135d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80135e6:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 80135ea:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80135ee:	4562      	cmp	r2, ip
 80135f0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80135f4:	eb73 0e04 	sbcs.w	lr, r3, r4
 80135f8:	daed      	bge.n	80135d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80135fa:	4694      	mov	ip, r2
 80135fc:	461c      	mov	r4, r3
 80135fe:	4629      	mov	r1, r5
 8013600:	e7e9      	b.n	80135d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8013602:	b10c      	cbz	r4, 8013608 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8013604:	428c      	cmp	r4, r1
 8013606:	d9d5      	bls.n	80135b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8013608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801360c:	4802      	ldr	r0, [pc, #8]	@ (8013618 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 801360e:	b002      	add	sp, #8
 8013610:	f008 b996 	b.w	801b940 <get_memory>
 8013614:	4629      	mov	r1, r5
 8013616:	e7c6      	b.n	80135a6 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8013618:	2000c374 	.word	0x2000c374

0801361c <rmw_uxrce_find_static_input_buffer_by_owner>:
 801361c:	4b11      	ldr	r3, [pc, #68]	@ (8013664 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	b530      	push	{r4, r5, lr}
 8013622:	b1e3      	cbz	r3, 801365e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8013624:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8013628:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 801362c:	2400      	movs	r4, #0
 801362e:	e001      	b.n	8013634 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8013630:	685b      	ldr	r3, [r3, #4]
 8013632:	b193      	cbz	r3, 801365a <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 8013634:	689a      	ldr	r2, [r3, #8]
 8013636:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 801363a:	4288      	cmp	r0, r1
 801363c:	d1f8      	bne.n	8013630 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801363e:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8013642:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 8013646:	4571      	cmp	r1, lr
 8013648:	eb72 050c 	sbcs.w	r5, r2, ip
 801364c:	daf0      	bge.n	8013630 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801364e:	461c      	mov	r4, r3
 8013650:	685b      	ldr	r3, [r3, #4]
 8013652:	468e      	mov	lr, r1
 8013654:	4694      	mov	ip, r2
 8013656:	2b00      	cmp	r3, #0
 8013658:	d1ec      	bne.n	8013634 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 801365a:	4620      	mov	r0, r4
 801365c:	bd30      	pop	{r4, r5, pc}
 801365e:	461c      	mov	r4, r3
 8013660:	4620      	mov	r0, r4
 8013662:	bd30      	pop	{r4, r5, pc}
 8013664:	2000c374 	.word	0x2000c374

08013668 <rmw_uxrce_clean_expired_static_input_buffer>:
 8013668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801366c:	4b3c      	ldr	r3, [pc, #240]	@ (8013760 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801366e:	ed2d 8b06 	vpush	{d8-d10}
 8013672:	681f      	ldr	r7, [r3, #0]
 8013674:	b08d      	sub	sp, #52	@ 0x34
 8013676:	f7ff fd7f 	bl	8013178 <rmw_uros_epoch_nanos>
 801367a:	2f00      	cmp	r7, #0
 801367c:	d05d      	beq.n	801373a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 801367e:	46b8      	mov	r8, r7
 8013680:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 8013748 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8013684:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013688:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801368c:	2b04      	cmp	r3, #4
 801368e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 8013750 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8013692:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 8013758 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8013696:	4681      	mov	r9, r0
 8013698:	468a      	mov	sl, r1
 801369a:	ac04      	add	r4, sp, #16
 801369c:	d03f      	beq.n	801371e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801369e:	2b05      	cmp	r3, #5
 80136a0:	d044      	beq.n	801372c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 80136a2:	2b03      	cmp	r3, #3
 80136a4:	d03b      	beq.n	801371e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80136a6:	ed8d 8b04 	vstr	d8, [sp, #16]
 80136aa:	ed8d ab06 	vstr	d10, [sp, #24]
 80136ae:	ed8d 8b08 	vstr	d8, [sp, #32]
 80136b2:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 80136b6:	ab08      	add	r3, sp, #32
 80136b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80136ba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80136be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80136c2:	f007 ffc9 	bl	801b658 <rmw_time_equal>
 80136c6:	b118      	cbz	r0, 80136d0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 80136c8:	ed8d 9b04 	vstr	d9, [sp, #16]
 80136cc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80136d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80136d4:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 80136d8:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 80136dc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 80136e0:	f008 f80e 	bl	801b700 <rmw_time_total_nsec>
 80136e4:	1830      	adds	r0, r6, r0
 80136e6:	eb47 0101 	adc.w	r1, r7, r1
 80136ea:	4548      	cmp	r0, r9
 80136ec:	eb71 030a 	sbcs.w	r3, r1, sl
 80136f0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 80136f4:	db05      	blt.n	8013702 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 80136f6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 80136fa:	4591      	cmp	r9, r2
 80136fc:	eb7a 0303 	sbcs.w	r3, sl, r3
 8013700:	da03      	bge.n	801370a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8013702:	4817      	ldr	r0, [pc, #92]	@ (8013760 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8013704:	4641      	mov	r1, r8
 8013706:	f008 f92b 	bl	801b960 <put_memory>
 801370a:	f1bb 0f00 	cmp.w	fp, #0
 801370e:	d014      	beq.n	801373a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8013710:	46d8      	mov	r8, fp
 8013712:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013716:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801371a:	2b04      	cmp	r3, #4
 801371c:	d1bf      	bne.n	801369e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801371e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8013722:	3340      	adds	r3, #64	@ 0x40
 8013724:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013726:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801372a:	e7c0      	b.n	80136ae <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801372c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8013730:	3348      	adds	r3, #72	@ 0x48
 8013732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013734:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013738:	e7b9      	b.n	80136ae <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801373a:	b00d      	add	sp, #52	@ 0x34
 801373c:	ecbd 8b06 	vpop	{d8-d10}
 8013740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013744:	f3af 8000 	nop.w
	...
 8013750:	00000001 	.word	0x00000001
 8013754:	00000000 	.word	0x00000000
 8013758:	0000001e 	.word	0x0000001e
 801375c:	00000000 	.word	0x00000000
 8013760:	2000c374 	.word	0x2000c374

08013764 <run_xrce_session>:
 8013764:	b510      	push	{r4, lr}
 8013766:	788c      	ldrb	r4, [r1, #2]
 8013768:	b086      	sub	sp, #24
 801376a:	2c01      	cmp	r4, #1
 801376c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8013770:	d00c      	beq.n	801378c <run_xrce_session+0x28>
 8013772:	4619      	mov	r1, r3
 8013774:	2301      	movs	r3, #1
 8013776:	9300      	str	r3, [sp, #0]
 8013778:	f10d 020e 	add.w	r2, sp, #14
 801377c:	f10d 0317 	add.w	r3, sp, #23
 8013780:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013784:	f002 fcb0 	bl	80160e8 <uxr_run_session_until_all_status>
 8013788:	b006      	add	sp, #24
 801378a:	bd10      	pop	{r4, pc}
 801378c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013790:	f002 f8c4 	bl	801591c <uxr_flash_output_streams>
 8013794:	4620      	mov	r0, r4
 8013796:	b006      	add	sp, #24
 8013798:	bd10      	pop	{r4, pc}
 801379a:	bf00      	nop

0801379c <convert_qos_profile>:
 801379c:	7a4a      	ldrb	r2, [r1, #9]
 801379e:	f891 c008 	ldrb.w	ip, [r1, #8]
 80137a2:	2a02      	cmp	r2, #2
 80137a4:	bf18      	it	ne
 80137a6:	2200      	movne	r2, #0
 80137a8:	7002      	strb	r2, [r0, #0]
 80137aa:	780a      	ldrb	r2, [r1, #0]
 80137ac:	8889      	ldrh	r1, [r1, #4]
 80137ae:	8081      	strh	r1, [r0, #4]
 80137b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80137b4:	f1a2 0202 	sub.w	r2, r2, #2
 80137b8:	fabc fc8c 	clz	ip, ip
 80137bc:	fab2 f282 	clz	r2, r2
 80137c0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80137c4:	0952      	lsrs	r2, r2, #5
 80137c6:	f880 c001 	strb.w	ip, [r0, #1]
 80137ca:	7082      	strb	r2, [r0, #2]
 80137cc:	4770      	bx	lr
 80137ce:	bf00      	nop

080137d0 <generate_service_topics>:
 80137d0:	b570      	push	{r4, r5, r6, lr}
 80137d2:	b082      	sub	sp, #8
 80137d4:	461c      	mov	r4, r3
 80137d6:	4b12      	ldr	r3, [pc, #72]	@ (8013820 <generate_service_topics+0x50>)
 80137d8:	9301      	str	r3, [sp, #4]
 80137da:	4605      	mov	r5, r0
 80137dc:	4b11      	ldr	r3, [pc, #68]	@ (8013824 <generate_service_topics+0x54>)
 80137de:	9000      	str	r0, [sp, #0]
 80137e0:	4616      	mov	r6, r2
 80137e2:	4608      	mov	r0, r1
 80137e4:	4a10      	ldr	r2, [pc, #64]	@ (8013828 <generate_service_topics+0x58>)
 80137e6:	4621      	mov	r1, r4
 80137e8:	f009 fe2c 	bl	801d444 <sniprintf>
 80137ec:	4b0f      	ldr	r3, [pc, #60]	@ (801382c <generate_service_topics+0x5c>)
 80137ee:	9301      	str	r3, [sp, #4]
 80137f0:	4601      	mov	r1, r0
 80137f2:	9500      	str	r5, [sp, #0]
 80137f4:	4b0e      	ldr	r3, [pc, #56]	@ (8013830 <generate_service_topics+0x60>)
 80137f6:	4a0c      	ldr	r2, [pc, #48]	@ (8013828 <generate_service_topics+0x58>)
 80137f8:	460d      	mov	r5, r1
 80137fa:	4630      	mov	r0, r6
 80137fc:	4621      	mov	r1, r4
 80137fe:	f009 fe21 	bl	801d444 <sniprintf>
 8013802:	2d00      	cmp	r5, #0
 8013804:	db01      	blt.n	801380a <generate_service_topics+0x3a>
 8013806:	42ac      	cmp	r4, r5
 8013808:	dc02      	bgt.n	8013810 <generate_service_topics+0x40>
 801380a:	2000      	movs	r0, #0
 801380c:	b002      	add	sp, #8
 801380e:	bd70      	pop	{r4, r5, r6, pc}
 8013810:	2800      	cmp	r0, #0
 8013812:	dbfa      	blt.n	801380a <generate_service_topics+0x3a>
 8013814:	4284      	cmp	r4, r0
 8013816:	bfd4      	ite	le
 8013818:	2000      	movle	r0, #0
 801381a:	2001      	movgt	r0, #1
 801381c:	b002      	add	sp, #8
 801381e:	bd70      	pop	{r4, r5, r6, pc}
 8013820:	0801f9a8 	.word	0x0801f9a8
 8013824:	0801f9a4 	.word	0x0801f9a4
 8013828:	0801f988 	.word	0x0801f988
 801382c:	0801f99c 	.word	0x0801f99c
 8013830:	0801f998 	.word	0x0801f998

08013834 <generate_service_types>:
 8013834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013838:	4605      	mov	r5, r0
 801383a:	b086      	sub	sp, #24
 801383c:	6880      	ldr	r0, [r0, #8]
 801383e:	460c      	mov	r4, r1
 8013840:	4617      	mov	r7, r2
 8013842:	461e      	mov	r6, r3
 8013844:	4780      	blx	r0
 8013846:	68eb      	ldr	r3, [r5, #12]
 8013848:	4680      	mov	r8, r0
 801384a:	4798      	blx	r3
 801384c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8013850:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013854:	2300      	movs	r3, #0
 8013856:	7023      	strb	r3, [r4, #0]
 8013858:	6813      	ldr	r3, [r2, #0]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d042      	beq.n	80138e4 <generate_service_types+0xb0>
 801385e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80138f8 <generate_service_types+0xc4>
 8013862:	4641      	mov	r1, r8
 8013864:	4620      	mov	r0, r4
 8013866:	4c22      	ldr	r4, [pc, #136]	@ (80138f0 <generate_service_types+0xbc>)
 8013868:	9405      	str	r4, [sp, #20]
 801386a:	6852      	ldr	r2, [r2, #4]
 801386c:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8013900 <generate_service_types+0xcc>
 8013870:	9204      	str	r2, [sp, #16]
 8013872:	9100      	str	r1, [sp, #0]
 8013874:	e9cd 4802 	strd	r4, r8, [sp, #8]
 8013878:	4a1e      	ldr	r2, [pc, #120]	@ (80138f4 <generate_service_types+0xc0>)
 801387a:	f8cd a004 	str.w	sl, [sp, #4]
 801387e:	4631      	mov	r1, r6
 8013880:	f009 fde0 	bl	801d444 <sniprintf>
 8013884:	2800      	cmp	r0, #0
 8013886:	db1f      	blt.n	80138c8 <generate_service_types+0x94>
 8013888:	2300      	movs	r3, #0
 801388a:	703b      	strb	r3, [r7, #0]
 801388c:	f8d9 3000 	ldr.w	r3, [r9]
 8013890:	42b0      	cmp	r0, r6
 8013892:	bfac      	ite	ge
 8013894:	2500      	movge	r5, #0
 8013896:	2501      	movlt	r5, #1
 8013898:	b1eb      	cbz	r3, 80138d6 <generate_service_types+0xa2>
 801389a:	4a17      	ldr	r2, [pc, #92]	@ (80138f8 <generate_service_types+0xc4>)
 801389c:	9405      	str	r4, [sp, #20]
 801389e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80138a2:	9200      	str	r2, [sp, #0]
 80138a4:	e9cd 8103 	strd	r8, r1, [sp, #12]
 80138a8:	e9cd a401 	strd	sl, r4, [sp, #4]
 80138ac:	4a11      	ldr	r2, [pc, #68]	@ (80138f4 <generate_service_types+0xc0>)
 80138ae:	4638      	mov	r0, r7
 80138b0:	4631      	mov	r1, r6
 80138b2:	f009 fdc7 	bl	801d444 <sniprintf>
 80138b6:	2800      	cmp	r0, #0
 80138b8:	db10      	blt.n	80138dc <generate_service_types+0xa8>
 80138ba:	42b0      	cmp	r0, r6
 80138bc:	bfb4      	ite	lt
 80138be:	4628      	movlt	r0, r5
 80138c0:	2000      	movge	r0, #0
 80138c2:	b006      	add	sp, #24
 80138c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138c8:	2300      	movs	r3, #0
 80138ca:	703b      	strb	r3, [r7, #0]
 80138cc:	f8d9 3000 	ldr.w	r3, [r9]
 80138d0:	2500      	movs	r5, #0
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d1e1      	bne.n	801389a <generate_service_types+0x66>
 80138d6:	4b09      	ldr	r3, [pc, #36]	@ (80138fc <generate_service_types+0xc8>)
 80138d8:	461a      	mov	r2, r3
 80138da:	e7df      	b.n	801389c <generate_service_types+0x68>
 80138dc:	2000      	movs	r0, #0
 80138de:	b006      	add	sp, #24
 80138e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138e4:	4b05      	ldr	r3, [pc, #20]	@ (80138fc <generate_service_types+0xc8>)
 80138e6:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 80138f8 <generate_service_types+0xc4>
 80138ea:	4619      	mov	r1, r3
 80138ec:	e7ba      	b.n	8013864 <generate_service_types+0x30>
 80138ee:	bf00      	nop
 80138f0:	0801f990 	.word	0x0801f990
 80138f4:	0801f980 	.word	0x0801f980
 80138f8:	0801f97c 	.word	0x0801f97c
 80138fc:	08020b38 	.word	0x08020b38
 8013900:	0801f994 	.word	0x0801f994

08013904 <generate_type_name>:
 8013904:	b530      	push	{r4, r5, lr}
 8013906:	2300      	movs	r3, #0
 8013908:	700b      	strb	r3, [r1, #0]
 801390a:	6803      	ldr	r3, [r0, #0]
 801390c:	b087      	sub	sp, #28
 801390e:	4614      	mov	r4, r2
 8013910:	b1d3      	cbz	r3, 8013948 <generate_type_name+0x44>
 8013912:	4a0f      	ldr	r2, [pc, #60]	@ (8013950 <generate_type_name+0x4c>)
 8013914:	4615      	mov	r5, r2
 8013916:	9203      	str	r2, [sp, #12]
 8013918:	9500      	str	r5, [sp, #0]
 801391a:	6842      	ldr	r2, [r0, #4]
 801391c:	480d      	ldr	r0, [pc, #52]	@ (8013954 <generate_type_name+0x50>)
 801391e:	9001      	str	r0, [sp, #4]
 8013920:	4608      	mov	r0, r1
 8013922:	490d      	ldr	r1, [pc, #52]	@ (8013958 <generate_type_name+0x54>)
 8013924:	9204      	str	r2, [sp, #16]
 8013926:	9105      	str	r1, [sp, #20]
 8013928:	9102      	str	r1, [sp, #8]
 801392a:	4a0c      	ldr	r2, [pc, #48]	@ (801395c <generate_type_name+0x58>)
 801392c:	4621      	mov	r1, r4
 801392e:	f009 fd89 	bl	801d444 <sniprintf>
 8013932:	2800      	cmp	r0, #0
 8013934:	db05      	blt.n	8013942 <generate_type_name+0x3e>
 8013936:	4284      	cmp	r4, r0
 8013938:	bfd4      	ite	le
 801393a:	2000      	movle	r0, #0
 801393c:	2001      	movgt	r0, #1
 801393e:	b007      	add	sp, #28
 8013940:	bd30      	pop	{r4, r5, pc}
 8013942:	2000      	movs	r0, #0
 8013944:	b007      	add	sp, #28
 8013946:	bd30      	pop	{r4, r5, pc}
 8013948:	4b05      	ldr	r3, [pc, #20]	@ (8013960 <generate_type_name+0x5c>)
 801394a:	4a01      	ldr	r2, [pc, #4]	@ (8013950 <generate_type_name+0x4c>)
 801394c:	461d      	mov	r5, r3
 801394e:	e7e2      	b.n	8013916 <generate_type_name+0x12>
 8013950:	0801f97c 	.word	0x0801f97c
 8013954:	0801f994 	.word	0x0801f994
 8013958:	0801f990 	.word	0x0801f990
 801395c:	0801f980 	.word	0x0801f980
 8013960:	08020b38 	.word	0x08020b38

08013964 <generate_topic_name>:
 8013964:	b510      	push	{r4, lr}
 8013966:	b082      	sub	sp, #8
 8013968:	4614      	mov	r4, r2
 801396a:	9000      	str	r0, [sp, #0]
 801396c:	4b08      	ldr	r3, [pc, #32]	@ (8013990 <generate_topic_name+0x2c>)
 801396e:	4a09      	ldr	r2, [pc, #36]	@ (8013994 <generate_topic_name+0x30>)
 8013970:	4608      	mov	r0, r1
 8013972:	4621      	mov	r1, r4
 8013974:	f009 fd66 	bl	801d444 <sniprintf>
 8013978:	2800      	cmp	r0, #0
 801397a:	db05      	blt.n	8013988 <generate_topic_name+0x24>
 801397c:	4284      	cmp	r4, r0
 801397e:	bfd4      	ite	le
 8013980:	2000      	movle	r0, #0
 8013982:	2001      	movgt	r0, #1
 8013984:	b002      	add	sp, #8
 8013986:	bd10      	pop	{r4, pc}
 8013988:	2000      	movs	r0, #0
 801398a:	b002      	add	sp, #8
 801398c:	bd10      	pop	{r4, pc}
 801398e:	bf00      	nop
 8013990:	0801f9b0 	.word	0x0801f9b0
 8013994:	0801f3e4 	.word	0x0801f3e4

08013998 <is_uxrce_rmw_identifier_valid>:
 8013998:	b510      	push	{r4, lr}
 801399a:	4604      	mov	r4, r0
 801399c:	b140      	cbz	r0, 80139b0 <is_uxrce_rmw_identifier_valid+0x18>
 801399e:	f7fe fbbf 	bl	8012120 <rmw_get_implementation_identifier>
 80139a2:	4601      	mov	r1, r0
 80139a4:	4620      	mov	r0, r4
 80139a6:	f7ec fc3b 	bl	8000220 <strcmp>
 80139aa:	fab0 f080 	clz	r0, r0
 80139ae:	0940      	lsrs	r0, r0, #5
 80139b0:	bd10      	pop	{r4, pc}
 80139b2:	bf00      	nop

080139b4 <rosidl_typesupport_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard>:
 80139b4:	4b04      	ldr	r3, [pc, #16]	@ (80139c8 <rosidl_typesupport_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x14>)
 80139b6:	681a      	ldr	r2, [r3, #0]
 80139b8:	b10a      	cbz	r2, 80139be <rosidl_typesupport_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0xa>
 80139ba:	4803      	ldr	r0, [pc, #12]	@ (80139c8 <rosidl_typesupport_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x14>)
 80139bc:	4770      	bx	lr
 80139be:	4a03      	ldr	r2, [pc, #12]	@ (80139cc <rosidl_typesupport_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x18>)
 80139c0:	4801      	ldr	r0, [pc, #4]	@ (80139c8 <rosidl_typesupport_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x14>)
 80139c2:	6812      	ldr	r2, [r2, #0]
 80139c4:	601a      	str	r2, [r3, #0]
 80139c6:	4770      	bx	lr
 80139c8:	200003bc 	.word	0x200003bc
 80139cc:	20000634 	.word	0x20000634

080139d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request>:
 80139d0:	4b04      	ldr	r3, [pc, #16]	@ (80139e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x14>)
 80139d2:	4805      	ldr	r0, [pc, #20]	@ (80139e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x18>)
 80139d4:	4905      	ldr	r1, [pc, #20]	@ (80139ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x1c>)
 80139d6:	4a06      	ldr	r2, [pc, #24]	@ (80139f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x20>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	6003      	str	r3, [r0, #0]
 80139dc:	600b      	str	r3, [r1, #0]
 80139de:	6013      	str	r3, [r2, #0]
 80139e0:	4770      	bx	lr
 80139e2:	bf00      	nop
 80139e4:	20000634 	.word	0x20000634
 80139e8:	200003d8 	.word	0x200003d8
 80139ec:	200003e4 	.word	0x200003e4
 80139f0:	200003bc 	.word	0x200003bc

080139f4 <robotic_interfaces__srv__Keyboard_Request__rosidl_typesupport_introspection_c__Keyboard_Request_init_function>:
 80139f4:	f008 ba5c 	b.w	801beb0 <robotic_interfaces__srv__Keyboard_Request__init>

080139f8 <robotic_interfaces__srv__Keyboard_Request__rosidl_typesupport_introspection_c__Keyboard_Request_fini_function>:
 80139f8:	f008 ba6c 	b.w	801bed4 <robotic_interfaces__srv__Keyboard_Request__fini>

080139fc <robotic_interfaces__srv__Keyboard_Response__rosidl_typesupport_introspection_c__Keyboard_Response_init_function>:
 80139fc:	f008 ba6e 	b.w	801bedc <robotic_interfaces__srv__Keyboard_Response__init>

08013a00 <robotic_interfaces__srv__Keyboard_Response__rosidl_typesupport_introspection_c__Keyboard_Response_fini_function>:
 8013a00:	f008 ba90 	b.w	801bf24 <robotic_interfaces__srv__Keyboard_Response__fini>

08013a04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request>:
 8013a04:	4b04      	ldr	r3, [pc, #16]	@ (8013a18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x14>)
 8013a06:	681a      	ldr	r2, [r3, #0]
 8013a08:	b10a      	cbz	r2, 8013a0e <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0xa>
 8013a0a:	4803      	ldr	r0, [pc, #12]	@ (8013a18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x14>)
 8013a0c:	4770      	bx	lr
 8013a0e:	4a03      	ldr	r2, [pc, #12]	@ (8013a1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x18>)
 8013a10:	4801      	ldr	r0, [pc, #4]	@ (8013a18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x14>)
 8013a12:	6812      	ldr	r2, [r2, #0]
 8013a14:	601a      	str	r2, [r3, #0]
 8013a16:	4770      	bx	lr
 8013a18:	200004e0 	.word	0x200004e0
 8013a1c:	20000638 	.word	0x20000638

08013a20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Response>:
 8013a20:	4b04      	ldr	r3, [pc, #16]	@ (8013a34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Response+0x14>)
 8013a22:	681a      	ldr	r2, [r3, #0]
 8013a24:	b10a      	cbz	r2, 8013a2a <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Response+0xa>
 8013a26:	4803      	ldr	r0, [pc, #12]	@ (8013a34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Response+0x14>)
 8013a28:	4770      	bx	lr
 8013a2a:	4a03      	ldr	r2, [pc, #12]	@ (8013a38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Response+0x18>)
 8013a2c:	4801      	ldr	r0, [pc, #4]	@ (8013a34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Response+0x14>)
 8013a2e:	6812      	ldr	r2, [r2, #0]
 8013a30:	601a      	str	r2, [r3, #0]
 8013a32:	4770      	bx	lr
 8013a34:	200005a0 	.word	0x200005a0
 8013a38:	20000638 	.word	0x20000638

08013a3c <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard>:
 8013a3c:	4b13      	ldr	r3, [pc, #76]	@ (8013a8c <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x50>)
 8013a3e:	681a      	ldr	r2, [r3, #0]
 8013a40:	b132      	cbz	r2, 8013a50 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x14>
 8013a42:	685b      	ldr	r3, [r3, #4]
 8013a44:	689a      	ldr	r2, [r3, #8]
 8013a46:	b152      	cbz	r2, 8013a5e <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x22>
 8013a48:	68da      	ldr	r2, [r3, #12]
 8013a4a:	b182      	cbz	r2, 8013a6e <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x32>
 8013a4c:	480f      	ldr	r0, [pc, #60]	@ (8013a8c <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x50>)
 8013a4e:	4770      	bx	lr
 8013a50:	4a0f      	ldr	r2, [pc, #60]	@ (8013a90 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x54>)
 8013a52:	6812      	ldr	r2, [r2, #0]
 8013a54:	601a      	str	r2, [r3, #0]
 8013a56:	685b      	ldr	r3, [r3, #4]
 8013a58:	689a      	ldr	r2, [r3, #8]
 8013a5a:	2a00      	cmp	r2, #0
 8013a5c:	d1f4      	bne.n	8013a48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0xc>
 8013a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8013a94 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x58>)
 8013a60:	6811      	ldr	r1, [r2, #0]
 8013a62:	b179      	cbz	r1, 8013a84 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x48>
 8013a64:	6852      	ldr	r2, [r2, #4]
 8013a66:	609a      	str	r2, [r3, #8]
 8013a68:	68da      	ldr	r2, [r3, #12]
 8013a6a:	2a00      	cmp	r2, #0
 8013a6c:	d1ee      	bne.n	8013a4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x10>
 8013a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8013a98 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x5c>)
 8013a70:	6811      	ldr	r1, [r2, #0]
 8013a72:	b119      	cbz	r1, 8013a7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x40>
 8013a74:	6852      	ldr	r2, [r2, #4]
 8013a76:	4805      	ldr	r0, [pc, #20]	@ (8013a8c <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x50>)
 8013a78:	60da      	str	r2, [r3, #12]
 8013a7a:	4770      	bx	lr
 8013a7c:	4904      	ldr	r1, [pc, #16]	@ (8013a90 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x54>)
 8013a7e:	6809      	ldr	r1, [r1, #0]
 8013a80:	6011      	str	r1, [r2, #0]
 8013a82:	e7f7      	b.n	8013a74 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x38>
 8013a84:	4902      	ldr	r1, [pc, #8]	@ (8013a90 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x54>)
 8013a86:	6809      	ldr	r1, [r1, #0]
 8013a88:	6011      	str	r1, [r2, #0]
 8013a8a:	e7eb      	b.n	8013a64 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x28>
 8013a8c:	200005bc 	.word	0x200005bc
 8013a90:	20000638 	.word	0x20000638
 8013a94:	200004e0 	.word	0x200004e0
 8013a98:	200005a0 	.word	0x200005a0

08013a9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request>:
 8013a9c:	4800      	ldr	r0, [pc, #0]	@ (8013aa0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x4>)
 8013a9e:	4770      	bx	lr
 8013aa0:	200005e4 	.word	0x200005e4

08013aa4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Response>:
 8013aa4:	4800      	ldr	r0, [pc, #0]	@ (8013aa8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Response+0x4>)
 8013aa6:	4770      	bx	lr
 8013aa8:	200005f0 	.word	0x200005f0

08013aac <_Keyboard_Response__max_serialized_size>:
 8013aac:	b508      	push	{r3, lr}
 8013aae:	2101      	movs	r1, #1
 8013ab0:	2000      	movs	r0, #0
 8013ab2:	f7fb fea5 	bl	800f800 <ucdr_alignment>
 8013ab6:	3001      	adds	r0, #1
 8013ab8:	bd08      	pop	{r3, pc}
 8013aba:	bf00      	nop

08013abc <_Keyboard_Request__cdr_serialize>:
 8013abc:	b308      	cbz	r0, 8013b02 <_Keyboard_Request__cdr_serialize+0x46>
 8013abe:	b570      	push	{r4, r5, r6, lr}
 8013ac0:	6806      	ldr	r6, [r0, #0]
 8013ac2:	460d      	mov	r5, r1
 8013ac4:	4604      	mov	r4, r0
 8013ac6:	b1ce      	cbz	r6, 8013afc <_Keyboard_Request__cdr_serialize+0x40>
 8013ac8:	4630      	mov	r0, r6
 8013aca:	f7ec fbb3 	bl	8000234 <strlen>
 8013ace:	1c42      	adds	r2, r0, #1
 8013ad0:	4631      	mov	r1, r6
 8013ad2:	6060      	str	r0, [r4, #4]
 8013ad4:	4628      	mov	r0, r5
 8013ad6:	f001 f9a7 	bl	8014e28 <ucdr_serialize_sequence_char>
 8013ada:	ed94 0b04 	vldr	d0, [r4, #16]
 8013ade:	4628      	mov	r0, r5
 8013ae0:	f7fb fb00 	bl	800f0e4 <ucdr_serialize_double>
 8013ae4:	ed94 0b06 	vldr	d0, [r4, #24]
 8013ae8:	4628      	mov	r0, r5
 8013aea:	f7fb fafb 	bl	800f0e4 <ucdr_serialize_double>
 8013aee:	ed94 0b08 	vldr	d0, [r4, #32]
 8013af2:	4628      	mov	r0, r5
 8013af4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013af8:	f7fb baf4 	b.w	800f0e4 <ucdr_serialize_double>
 8013afc:	4632      	mov	r2, r6
 8013afe:	4630      	mov	r0, r6
 8013b00:	e7e6      	b.n	8013ad0 <_Keyboard_Request__cdr_serialize+0x14>
 8013b02:	4770      	bx	lr

08013b04 <get_serialized_size_robotic_interfaces__srv__Keyboard_Request>:
 8013b04:	b570      	push	{r4, r5, r6, lr}
 8013b06:	4604      	mov	r4, r0
 8013b08:	b1e8      	cbz	r0, 8013b46 <get_serialized_size_robotic_interfaces__srv__Keyboard_Request+0x42>
 8013b0a:	460d      	mov	r5, r1
 8013b0c:	4628      	mov	r0, r5
 8013b0e:	2104      	movs	r1, #4
 8013b10:	f7fb fe76 	bl	800f800 <ucdr_alignment>
 8013b14:	6866      	ldr	r6, [r4, #4]
 8013b16:	1d6b      	adds	r3, r5, #5
 8013b18:	4433      	add	r3, r6
 8013b1a:	181e      	adds	r6, r3, r0
 8013b1c:	2108      	movs	r1, #8
 8013b1e:	4630      	mov	r0, r6
 8013b20:	f7fb fe6e 	bl	800f800 <ucdr_alignment>
 8013b24:	f100 0408 	add.w	r4, r0, #8
 8013b28:	4434      	add	r4, r6
 8013b2a:	2108      	movs	r1, #8
 8013b2c:	4620      	mov	r0, r4
 8013b2e:	f7fb fe67 	bl	800f800 <ucdr_alignment>
 8013b32:	3008      	adds	r0, #8
 8013b34:	4404      	add	r4, r0
 8013b36:	2108      	movs	r1, #8
 8013b38:	4620      	mov	r0, r4
 8013b3a:	f7fb fe61 	bl	800f800 <ucdr_alignment>
 8013b3e:	f1c5 0508 	rsb	r5, r5, #8
 8013b42:	4428      	add	r0, r5
 8013b44:	4420      	add	r0, r4
 8013b46:	bd70      	pop	{r4, r5, r6, pc}

08013b48 <_Keyboard_Response__get_serialized_size>:
 8013b48:	b558      	push	{r3, r4, r6, lr}
 8013b4a:	4604      	mov	r4, r0
 8013b4c:	b1a0      	cbz	r0, 8013b78 <_Keyboard_Response__get_serialized_size+0x30>
 8013b4e:	2101      	movs	r1, #1
 8013b50:	2000      	movs	r0, #0
 8013b52:	f7fb fe55 	bl	800f800 <ucdr_alignment>
 8013b56:	1c46      	adds	r6, r0, #1
 8013b58:	2104      	movs	r1, #4
 8013b5a:	4630      	mov	r0, r6
 8013b5c:	f7fb fe50 	bl	800f800 <ucdr_alignment>
 8013b60:	68a3      	ldr	r3, [r4, #8]
 8013b62:	3305      	adds	r3, #5
 8013b64:	4403      	add	r3, r0
 8013b66:	441e      	add	r6, r3
 8013b68:	2104      	movs	r1, #4
 8013b6a:	4630      	mov	r0, r6
 8013b6c:	f7fb fe48 	bl	800f800 <ucdr_alignment>
 8013b70:	6963      	ldr	r3, [r4, #20]
 8013b72:	3305      	adds	r3, #5
 8013b74:	4418      	add	r0, r3
 8013b76:	4430      	add	r0, r6
 8013b78:	bd58      	pop	{r3, r4, r6, pc}
 8013b7a:	bf00      	nop

08013b7c <_Keyboard_Request__cdr_deserialize>:
 8013b7c:	b570      	push	{r4, r5, r6, lr}
 8013b7e:	460c      	mov	r4, r1
 8013b80:	b082      	sub	sp, #8
 8013b82:	b301      	cbz	r1, 8013bc6 <_Keyboard_Request__cdr_deserialize+0x4a>
 8013b84:	688e      	ldr	r6, [r1, #8]
 8013b86:	6809      	ldr	r1, [r1, #0]
 8013b88:	ab01      	add	r3, sp, #4
 8013b8a:	4632      	mov	r2, r6
 8013b8c:	4605      	mov	r5, r0
 8013b8e:	f001 f95d 	bl	8014e4c <ucdr_deserialize_sequence_char>
 8013b92:	9b01      	ldr	r3, [sp, #4]
 8013b94:	b998      	cbnz	r0, 8013bbe <_Keyboard_Request__cdr_deserialize+0x42>
 8013b96:	429e      	cmp	r6, r3
 8013b98:	d318      	bcc.n	8013bcc <_Keyboard_Request__cdr_deserialize+0x50>
 8013b9a:	f104 0110 	add.w	r1, r4, #16
 8013b9e:	4628      	mov	r0, r5
 8013ba0:	f7fb fc42 	bl	800f428 <ucdr_deserialize_double>
 8013ba4:	f104 0118 	add.w	r1, r4, #24
 8013ba8:	4628      	mov	r0, r5
 8013baa:	f7fb fc3d 	bl	800f428 <ucdr_deserialize_double>
 8013bae:	f104 0120 	add.w	r1, r4, #32
 8013bb2:	4628      	mov	r0, r5
 8013bb4:	b002      	add	sp, #8
 8013bb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013bba:	f7fb bc35 	b.w	800f428 <ucdr_deserialize_double>
 8013bbe:	b103      	cbz	r3, 8013bc2 <_Keyboard_Request__cdr_deserialize+0x46>
 8013bc0:	3b01      	subs	r3, #1
 8013bc2:	6063      	str	r3, [r4, #4]
 8013bc4:	e7e9      	b.n	8013b9a <_Keyboard_Request__cdr_deserialize+0x1e>
 8013bc6:	4608      	mov	r0, r1
 8013bc8:	b002      	add	sp, #8
 8013bca:	bd70      	pop	{r4, r5, r6, pc}
 8013bcc:	2101      	movs	r1, #1
 8013bce:	75a8      	strb	r0, [r5, #22]
 8013bd0:	7569      	strb	r1, [r5, #21]
 8013bd2:	6060      	str	r0, [r4, #4]
 8013bd4:	4628      	mov	r0, r5
 8013bd6:	f7fb fe29 	bl	800f82c <ucdr_align_to>
 8013bda:	9901      	ldr	r1, [sp, #4]
 8013bdc:	4628      	mov	r0, r5
 8013bde:	f7fb fe5b 	bl	800f898 <ucdr_advance_buffer>
 8013be2:	e7da      	b.n	8013b9a <_Keyboard_Request__cdr_deserialize+0x1e>

08013be4 <_Keyboard_Response__cdr_deserialize>:
 8013be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013be6:	460c      	mov	r4, r1
 8013be8:	b083      	sub	sp, #12
 8013bea:	b381      	cbz	r1, 8013c4e <_Keyboard_Response__cdr_deserialize+0x6a>
 8013bec:	4606      	mov	r6, r0
 8013bee:	f7fa fb09 	bl	800e204 <ucdr_deserialize_bool>
 8013bf2:	68e5      	ldr	r5, [r4, #12]
 8013bf4:	6861      	ldr	r1, [r4, #4]
 8013bf6:	ab01      	add	r3, sp, #4
 8013bf8:	462a      	mov	r2, r5
 8013bfa:	4630      	mov	r0, r6
 8013bfc:	f001 f926 	bl	8014e4c <ucdr_deserialize_sequence_char>
 8013c00:	9b01      	ldr	r3, [sp, #4]
 8013c02:	b980      	cbnz	r0, 8013c26 <_Keyboard_Response__cdr_deserialize+0x42>
 8013c04:	429d      	cmp	r5, r3
 8013c06:	d328      	bcc.n	8013c5a <_Keyboard_Response__cdr_deserialize+0x76>
 8013c08:	69a7      	ldr	r7, [r4, #24]
 8013c0a:	6921      	ldr	r1, [r4, #16]
 8013c0c:	ab01      	add	r3, sp, #4
 8013c0e:	463a      	mov	r2, r7
 8013c10:	4630      	mov	r0, r6
 8013c12:	f001 f91b 	bl	8014e4c <ucdr_deserialize_sequence_char>
 8013c16:	9b01      	ldr	r3, [sp, #4]
 8013c18:	4605      	mov	r5, r0
 8013c1a:	b140      	cbz	r0, 8013c2e <_Keyboard_Response__cdr_deserialize+0x4a>
 8013c1c:	b9db      	cbnz	r3, 8013c56 <_Keyboard_Response__cdr_deserialize+0x72>
 8013c1e:	6163      	str	r3, [r4, #20]
 8013c20:	4628      	mov	r0, r5
 8013c22:	b003      	add	sp, #12
 8013c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c26:	b103      	cbz	r3, 8013c2a <_Keyboard_Response__cdr_deserialize+0x46>
 8013c28:	3b01      	subs	r3, #1
 8013c2a:	60a3      	str	r3, [r4, #8]
 8013c2c:	e7ec      	b.n	8013c08 <_Keyboard_Response__cdr_deserialize+0x24>
 8013c2e:	429f      	cmp	r7, r3
 8013c30:	d2f6      	bcs.n	8013c20 <_Keyboard_Response__cdr_deserialize+0x3c>
 8013c32:	2101      	movs	r1, #1
 8013c34:	75b0      	strb	r0, [r6, #22]
 8013c36:	7571      	strb	r1, [r6, #21]
 8013c38:	4630      	mov	r0, r6
 8013c3a:	6165      	str	r5, [r4, #20]
 8013c3c:	f7fb fdf6 	bl	800f82c <ucdr_align_to>
 8013c40:	4630      	mov	r0, r6
 8013c42:	9901      	ldr	r1, [sp, #4]
 8013c44:	f7fb fe28 	bl	800f898 <ucdr_advance_buffer>
 8013c48:	4628      	mov	r0, r5
 8013c4a:	b003      	add	sp, #12
 8013c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c4e:	460d      	mov	r5, r1
 8013c50:	4628      	mov	r0, r5
 8013c52:	b003      	add	sp, #12
 8013c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c56:	3b01      	subs	r3, #1
 8013c58:	e7e1      	b.n	8013c1e <_Keyboard_Response__cdr_deserialize+0x3a>
 8013c5a:	2101      	movs	r1, #1
 8013c5c:	75b0      	strb	r0, [r6, #22]
 8013c5e:	7571      	strb	r1, [r6, #21]
 8013c60:	60a0      	str	r0, [r4, #8]
 8013c62:	4630      	mov	r0, r6
 8013c64:	f7fb fde2 	bl	800f82c <ucdr_align_to>
 8013c68:	9901      	ldr	r1, [sp, #4]
 8013c6a:	4630      	mov	r0, r6
 8013c6c:	f7fb fe14 	bl	800f898 <ucdr_advance_buffer>
 8013c70:	e7ca      	b.n	8013c08 <_Keyboard_Response__cdr_deserialize+0x24>
 8013c72:	bf00      	nop

08013c74 <_Keyboard_Response__cdr_serialize>:
 8013c74:	b308      	cbz	r0, 8013cba <_Keyboard_Response__cdr_serialize+0x46>
 8013c76:	b570      	push	{r4, r5, r6, lr}
 8013c78:	460e      	mov	r6, r1
 8013c7a:	4604      	mov	r4, r0
 8013c7c:	7801      	ldrb	r1, [r0, #0]
 8013c7e:	4630      	mov	r0, r6
 8013c80:	f7fa faaa 	bl	800e1d8 <ucdr_serialize_bool>
 8013c84:	6865      	ldr	r5, [r4, #4]
 8013c86:	b1ad      	cbz	r5, 8013cb4 <_Keyboard_Response__cdr_serialize+0x40>
 8013c88:	4628      	mov	r0, r5
 8013c8a:	f7ec fad3 	bl	8000234 <strlen>
 8013c8e:	1c42      	adds	r2, r0, #1
 8013c90:	60a0      	str	r0, [r4, #8]
 8013c92:	4629      	mov	r1, r5
 8013c94:	4630      	mov	r0, r6
 8013c96:	f001 f8c7 	bl	8014e28 <ucdr_serialize_sequence_char>
 8013c9a:	6925      	ldr	r5, [r4, #16]
 8013c9c:	b175      	cbz	r5, 8013cbc <_Keyboard_Response__cdr_serialize+0x48>
 8013c9e:	4628      	mov	r0, r5
 8013ca0:	f7ec fac8 	bl	8000234 <strlen>
 8013ca4:	4629      	mov	r1, r5
 8013ca6:	6160      	str	r0, [r4, #20]
 8013ca8:	1c42      	adds	r2, r0, #1
 8013caa:	4630      	mov	r0, r6
 8013cac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013cb0:	f001 b8ba 	b.w	8014e28 <ucdr_serialize_sequence_char>
 8013cb4:	462a      	mov	r2, r5
 8013cb6:	4628      	mov	r0, r5
 8013cb8:	e7ea      	b.n	8013c90 <_Keyboard_Response__cdr_serialize+0x1c>
 8013cba:	4770      	bx	lr
 8013cbc:	4628      	mov	r0, r5
 8013cbe:	6160      	str	r0, [r4, #20]
 8013cc0:	462a      	mov	r2, r5
 8013cc2:	4629      	mov	r1, r5
 8013cc4:	4630      	mov	r0, r6
 8013cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013cca:	f001 b8ad 	b.w	8014e28 <ucdr_serialize_sequence_char>
 8013cce:	bf00      	nop

08013cd0 <_Keyboard_Request__max_serialized_size>:
 8013cd0:	b538      	push	{r3, r4, r5, lr}
 8013cd2:	2108      	movs	r1, #8
 8013cd4:	2000      	movs	r0, #0
 8013cd6:	f7fb fd93 	bl	800f800 <ucdr_alignment>
 8013cda:	f100 0508 	add.w	r5, r0, #8
 8013cde:	2108      	movs	r1, #8
 8013ce0:	4628      	mov	r0, r5
 8013ce2:	f7fb fd8d 	bl	800f800 <ucdr_alignment>
 8013ce6:	f100 0408 	add.w	r4, r0, #8
 8013cea:	442c      	add	r4, r5
 8013cec:	2108      	movs	r1, #8
 8013cee:	4620      	mov	r0, r4
 8013cf0:	f7fb fd86 	bl	800f800 <ucdr_alignment>
 8013cf4:	3008      	adds	r0, #8
 8013cf6:	4420      	add	r0, r4
 8013cf8:	bd38      	pop	{r3, r4, r5, pc}
 8013cfa:	bf00      	nop

08013cfc <get_serialized_size_robotic_interfaces__srv__Keyboard_Response>:
 8013cfc:	b5b0      	push	{r4, r5, r7, lr}
 8013cfe:	4605      	mov	r5, r0
 8013d00:	b1c0      	cbz	r0, 8013d34 <get_serialized_size_robotic_interfaces__srv__Keyboard_Response+0x38>
 8013d02:	460c      	mov	r4, r1
 8013d04:	4620      	mov	r0, r4
 8013d06:	2101      	movs	r1, #1
 8013d08:	f7fb fd7a 	bl	800f800 <ucdr_alignment>
 8013d0c:	1c63      	adds	r3, r4, #1
 8013d0e:	181f      	adds	r7, r3, r0
 8013d10:	2104      	movs	r1, #4
 8013d12:	4638      	mov	r0, r7
 8013d14:	f7fb fd74 	bl	800f800 <ucdr_alignment>
 8013d18:	68ab      	ldr	r3, [r5, #8]
 8013d1a:	3305      	adds	r3, #5
 8013d1c:	4403      	add	r3, r0
 8013d1e:	441f      	add	r7, r3
 8013d20:	2104      	movs	r1, #4
 8013d22:	4638      	mov	r0, r7
 8013d24:	f7fb fd6c 	bl	800f800 <ucdr_alignment>
 8013d28:	696d      	ldr	r5, [r5, #20]
 8013d2a:	f1c4 0405 	rsb	r4, r4, #5
 8013d2e:	442c      	add	r4, r5
 8013d30:	4420      	add	r0, r4
 8013d32:	4438      	add	r0, r7
 8013d34:	bdb0      	pop	{r4, r5, r7, pc}
 8013d36:	bf00      	nop

08013d38 <_Keyboard_Request__get_serialized_size>:
 8013d38:	b538      	push	{r3, r4, r5, lr}
 8013d3a:	4604      	mov	r4, r0
 8013d3c:	b1c8      	cbz	r0, 8013d72 <_Keyboard_Request__get_serialized_size+0x3a>
 8013d3e:	2104      	movs	r1, #4
 8013d40:	2000      	movs	r0, #0
 8013d42:	f7fb fd5d 	bl	800f800 <ucdr_alignment>
 8013d46:	6863      	ldr	r3, [r4, #4]
 8013d48:	3305      	adds	r3, #5
 8013d4a:	181d      	adds	r5, r3, r0
 8013d4c:	2108      	movs	r1, #8
 8013d4e:	4628      	mov	r0, r5
 8013d50:	f7fb fd56 	bl	800f800 <ucdr_alignment>
 8013d54:	f100 0408 	add.w	r4, r0, #8
 8013d58:	442c      	add	r4, r5
 8013d5a:	2108      	movs	r1, #8
 8013d5c:	4620      	mov	r0, r4
 8013d5e:	f7fb fd4f 	bl	800f800 <ucdr_alignment>
 8013d62:	3008      	adds	r0, #8
 8013d64:	4404      	add	r4, r0
 8013d66:	2108      	movs	r1, #8
 8013d68:	4620      	mov	r0, r4
 8013d6a:	f7fb fd49 	bl	800f800 <ucdr_alignment>
 8013d6e:	3008      	adds	r0, #8
 8013d70:	4420      	add	r0, r4
 8013d72:	bd38      	pop	{r3, r4, r5, pc}

08013d74 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard>:
 8013d74:	4800      	ldr	r0, [pc, #0]	@ (8013d78 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x4>)
 8013d76:	4770      	bx	lr
 8013d78:	200005d8 	.word	0x200005d8

08013d7c <get_message_typesupport_handle>:
 8013d7c:	6883      	ldr	r3, [r0, #8]
 8013d7e:	4718      	bx	r3

08013d80 <get_message_typesupport_handle_function>:
 8013d80:	b510      	push	{r4, lr}
 8013d82:	4604      	mov	r4, r0
 8013d84:	6800      	ldr	r0, [r0, #0]
 8013d86:	f7ec fa4b 	bl	8000220 <strcmp>
 8013d8a:	2800      	cmp	r0, #0
 8013d8c:	bf0c      	ite	eq
 8013d8e:	4620      	moveq	r0, r4
 8013d90:	2000      	movne	r0, #0
 8013d92:	bd10      	pop	{r4, pc}

08013d94 <get_service_typesupport_handle>:
 8013d94:	6883      	ldr	r3, [r0, #8]
 8013d96:	4718      	bx	r3

08013d98 <get_service_typesupport_handle_function>:
 8013d98:	b510      	push	{r4, lr}
 8013d9a:	4604      	mov	r4, r0
 8013d9c:	6800      	ldr	r0, [r0, #0]
 8013d9e:	f7ec fa3f 	bl	8000220 <strcmp>
 8013da2:	2800      	cmp	r0, #0
 8013da4:	bf0c      	ite	eq
 8013da6:	4620      	moveq	r0, r4
 8013da8:	2000      	movne	r0, #0
 8013daa:	bd10      	pop	{r4, pc}

08013dac <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8013dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013db0:	6805      	ldr	r5, [r0, #0]
 8013db2:	4604      	mov	r4, r0
 8013db4:	4628      	mov	r0, r5
 8013db6:	460e      	mov	r6, r1
 8013db8:	f7ec fa32 	bl	8000220 <strcmp>
 8013dbc:	b1c8      	cbz	r0, 8013df2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8013dbe:	4b11      	ldr	r3, [pc, #68]	@ (8013e04 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	429d      	cmp	r5, r3
 8013dc4:	d112      	bne.n	8013dec <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013dc6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013dca:	f8d8 4000 	ldr.w	r4, [r8]
 8013dce:	b16c      	cbz	r4, 8013dec <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013dd0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013dd4:	2700      	movs	r7, #0
 8013dd6:	3d04      	subs	r5, #4
 8013dd8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013ddc:	4631      	mov	r1, r6
 8013dde:	f7ec fa1f 	bl	8000220 <strcmp>
 8013de2:	00bb      	lsls	r3, r7, #2
 8013de4:	b140      	cbz	r0, 8013df8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8013de6:	3701      	adds	r7, #1
 8013de8:	42bc      	cmp	r4, r7
 8013dea:	d1f5      	bne.n	8013dd8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8013dec:	2000      	movs	r0, #0
 8013dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013df2:	4620      	mov	r0, r4
 8013df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013df8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e00:	58d3      	ldr	r3, [r2, r3]
 8013e02:	4718      	bx	r3
 8013e04:	20000634 	.word	0x20000634

08013e08 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8013e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e0c:	6805      	ldr	r5, [r0, #0]
 8013e0e:	4604      	mov	r4, r0
 8013e10:	4628      	mov	r0, r5
 8013e12:	460e      	mov	r6, r1
 8013e14:	f7ec fa04 	bl	8000220 <strcmp>
 8013e18:	b1c8      	cbz	r0, 8013e4e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 8013e1a:	4b11      	ldr	r3, [pc, #68]	@ (8013e60 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	429d      	cmp	r5, r3
 8013e20:	d112      	bne.n	8013e48 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8013e22:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013e26:	f8d8 4000 	ldr.w	r4, [r8]
 8013e2a:	b16c      	cbz	r4, 8013e48 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8013e2c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013e30:	2700      	movs	r7, #0
 8013e32:	3d04      	subs	r5, #4
 8013e34:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013e38:	4631      	mov	r1, r6
 8013e3a:	f7ec f9f1 	bl	8000220 <strcmp>
 8013e3e:	00bb      	lsls	r3, r7, #2
 8013e40:	b140      	cbz	r0, 8013e54 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 8013e42:	3701      	adds	r7, #1
 8013e44:	42bc      	cmp	r4, r7
 8013e46:	d1f5      	bne.n	8013e34 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8013e48:	2000      	movs	r0, #0
 8013e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e4e:	4620      	mov	r0, r4
 8013e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e54:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013e58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e5c:	58d3      	ldr	r3, [r2, r3]
 8013e5e:	4718      	bx	r3
 8013e60:	20000634 	.word	0x20000634

08013e64 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8013e64:	4b04      	ldr	r3, [pc, #16]	@ (8013e78 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8013e66:	681a      	ldr	r2, [r3, #0]
 8013e68:	b10a      	cbz	r2, 8013e6e <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 8013e6a:	4803      	ldr	r0, [pc, #12]	@ (8013e78 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8013e6c:	4770      	bx	lr
 8013e6e:	4a03      	ldr	r2, [pc, #12]	@ (8013e7c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 8013e70:	4801      	ldr	r0, [pc, #4]	@ (8013e78 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8013e72:	6812      	ldr	r2, [r2, #0]
 8013e74:	601a      	str	r2, [r3, #0]
 8013e76:	4770      	bx	lr
 8013e78:	20000644 	.word	0x20000644
 8013e7c:	20000634 	.word	0x20000634

08013e80 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8013e80:	4a02      	ldr	r2, [pc, #8]	@ (8013e8c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 8013e82:	4b03      	ldr	r3, [pc, #12]	@ (8013e90 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 8013e84:	6812      	ldr	r2, [r2, #0]
 8013e86:	601a      	str	r2, [r3, #0]
 8013e88:	4770      	bx	lr
 8013e8a:	bf00      	nop
 8013e8c:	20000634 	.word	0x20000634
 8013e90:	20000644 	.word	0x20000644

08013e94 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 8013e94:	2009      	movs	r0, #9
 8013e96:	4770      	bx	lr

08013e98 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 8013e98:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8013e9c:	4770      	bx	lr
 8013e9e:	bf00      	nop

08013ea0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 8013ea0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8013ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ea8:	e9c2 0100 	strd	r0, r1, [r2]
 8013eac:	4770      	bx	lr
 8013eae:	bf00      	nop

08013eb0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 8013eb0:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013eb4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8013eb8:	e9c1 2300 	strd	r2, r3, [r1]
 8013ebc:	4770      	bx	lr
 8013ebe:	bf00      	nop

08013ec0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 8013ec0:	f008 b89c 	b.w	801bffc <sensor_msgs__msg__Imu__init>

08013ec4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 8013ec4:	f008 b8f0 	b.w	801c0a8 <sensor_msgs__msg__Imu__fini>

08013ec8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 8013ec8:	2009      	movs	r0, #9
 8013eca:	4770      	bx	lr

08013ecc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 8013ecc:	2009      	movs	r0, #9
 8013ece:	4770      	bx	lr

08013ed0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 8013ed0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8013ed4:	4770      	bx	lr
 8013ed6:	bf00      	nop

08013ed8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 8013ed8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8013edc:	4770      	bx	lr
 8013ede:	bf00      	nop

08013ee0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 8013ee0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8013ee4:	4770      	bx	lr
 8013ee6:	bf00      	nop

08013ee8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 8013ee8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8013eec:	4770      	bx	lr
 8013eee:	bf00      	nop

08013ef0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 8013ef0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8013ef4:	4770      	bx	lr
 8013ef6:	bf00      	nop

08013ef8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 8013ef8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8013efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f00:	e9c2 0100 	strd	r0, r1, [r2]
 8013f04:	4770      	bx	lr
 8013f06:	bf00      	nop

08013f08 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 8013f08:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013f0c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8013f10:	e9c1 2300 	strd	r2, r3, [r1]
 8013f14:	4770      	bx	lr
 8013f16:	bf00      	nop

08013f18 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 8013f18:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8013f1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f20:	e9c2 0100 	strd	r0, r1, [r2]
 8013f24:	4770      	bx	lr
 8013f26:	bf00      	nop

08013f28 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 8013f28:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013f2c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8013f30:	e9c1 2300 	strd	r2, r3, [r1]
 8013f34:	4770      	bx	lr
 8013f36:	bf00      	nop

08013f38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8013f38:	b510      	push	{r4, lr}
 8013f3a:	f000 f90f 	bl	801415c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8013f3e:	4c0b      	ldr	r4, [pc, #44]	@ (8013f6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 8013f40:	60e0      	str	r0, [r4, #12]
 8013f42:	f000 fcb9 	bl	80148b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8013f46:	64a0      	str	r0, [r4, #72]	@ 0x48
 8013f48:	f7f9 ff2e 	bl	800dda8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8013f4c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8013f50:	f7f9 ff2a 	bl	800dda8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8013f54:	4b06      	ldr	r3, [pc, #24]	@ (8013f70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8013f56:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 8013f5a:	681a      	ldr	r2, [r3, #0]
 8013f5c:	b10a      	cbz	r2, 8013f62 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 8013f5e:	4804      	ldr	r0, [pc, #16]	@ (8013f70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8013f60:	bd10      	pop	{r4, pc}
 8013f62:	4a04      	ldr	r2, [pc, #16]	@ (8013f74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 8013f64:	4802      	ldr	r0, [pc, #8]	@ (8013f70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8013f66:	6812      	ldr	r2, [r2, #0]
 8013f68:	601a      	str	r2, [r3, #0]
 8013f6a:	bd10      	pop	{r4, pc}
 8013f6c:	20000650 	.word	0x20000650
 8013f70:	200007f4 	.word	0x200007f4
 8013f74:	20000638 	.word	0x20000638

08013f78 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 8013f78:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8013f7c:	4680      	mov	r8, r0
 8013f7e:	460f      	mov	r7, r1
 8013f80:	f000 f910 	bl	80141a4 <get_serialized_size_std_msgs__msg__Header>
 8013f84:	183c      	adds	r4, r7, r0
 8013f86:	4621      	mov	r1, r4
 8013f88:	f108 0018 	add.w	r0, r8, #24
 8013f8c:	f000 fca2 	bl	80148d4 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8013f90:	4404      	add	r4, r0
 8013f92:	2108      	movs	r1, #8
 8013f94:	4620      	mov	r0, r4
 8013f96:	f7fb fc33 	bl	800f800 <ucdr_alignment>
 8013f9a:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 8013f9e:	4425      	add	r5, r4
 8013fa0:	4629      	mov	r1, r5
 8013fa2:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 8013fa6:	f7f9 ff73 	bl	800de90 <get_serialized_size_geometry_msgs__msg__Vector3>
 8013faa:	4405      	add	r5, r0
 8013fac:	2108      	movs	r1, #8
 8013fae:	4628      	mov	r0, r5
 8013fb0:	f7fb fc26 	bl	800f800 <ucdr_alignment>
 8013fb4:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 8013fb8:	4425      	add	r5, r4
 8013fba:	4629      	mov	r1, r5
 8013fbc:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 8013fc0:	f7f9 ff66 	bl	800de90 <get_serialized_size_geometry_msgs__msg__Vector3>
 8013fc4:	4405      	add	r5, r0
 8013fc6:	2108      	movs	r1, #8
 8013fc8:	4628      	mov	r0, r5
 8013fca:	f7fb fc19 	bl	800f800 <ucdr_alignment>
 8013fce:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 8013fd2:	4438      	add	r0, r7
 8013fd4:	4428      	add	r0, r5
 8013fd6:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8013fda:	bf00      	nop

08013fdc <get_serialized_size_sensor_msgs__msg__Imu>:
 8013fdc:	b108      	cbz	r0, 8013fe2 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 8013fde:	f7ff bfcb 	b.w	8013f78 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8013fe2:	4770      	bx	lr

08013fe4 <_Imu__get_serialized_size>:
 8013fe4:	b110      	cbz	r0, 8013fec <_Imu__get_serialized_size+0x8>
 8013fe6:	2100      	movs	r1, #0
 8013fe8:	f7ff bfc6 	b.w	8013f78 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8013fec:	4770      	bx	lr
 8013fee:	bf00      	nop

08013ff0 <_Imu__cdr_deserialize>:
 8013ff0:	b538      	push	{r3, r4, r5, lr}
 8013ff2:	460c      	mov	r4, r1
 8013ff4:	b399      	cbz	r1, 801405e <_Imu__cdr_deserialize+0x6e>
 8013ff6:	4605      	mov	r5, r0
 8013ff8:	f000 f956 	bl	80142a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8013ffc:	6843      	ldr	r3, [r0, #4]
 8013ffe:	4621      	mov	r1, r4
 8014000:	68db      	ldr	r3, [r3, #12]
 8014002:	4628      	mov	r0, r5
 8014004:	4798      	blx	r3
 8014006:	f000 fd19 	bl	8014a3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801400a:	6843      	ldr	r3, [r0, #4]
 801400c:	f104 0118 	add.w	r1, r4, #24
 8014010:	68db      	ldr	r3, [r3, #12]
 8014012:	4628      	mov	r0, r5
 8014014:	4798      	blx	r3
 8014016:	2209      	movs	r2, #9
 8014018:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 801401c:	4628      	mov	r0, r5
 801401e:	f000 fead 	bl	8014d7c <ucdr_deserialize_array_double>
 8014022:	f7f9 ffc1 	bl	800dfa8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8014026:	6843      	ldr	r3, [r0, #4]
 8014028:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 801402c:	68db      	ldr	r3, [r3, #12]
 801402e:	4628      	mov	r0, r5
 8014030:	4798      	blx	r3
 8014032:	2209      	movs	r2, #9
 8014034:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8014038:	4628      	mov	r0, r5
 801403a:	f000 fe9f 	bl	8014d7c <ucdr_deserialize_array_double>
 801403e:	f7f9 ffb3 	bl	800dfa8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8014042:	6843      	ldr	r3, [r0, #4]
 8014044:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 8014048:	68db      	ldr	r3, [r3, #12]
 801404a:	4628      	mov	r0, r5
 801404c:	4798      	blx	r3
 801404e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8014052:	4628      	mov	r0, r5
 8014054:	2209      	movs	r2, #9
 8014056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801405a:	f000 be8f 	b.w	8014d7c <ucdr_deserialize_array_double>
 801405e:	4608      	mov	r0, r1
 8014060:	bd38      	pop	{r3, r4, r5, pc}
 8014062:	bf00      	nop

08014064 <_Imu__cdr_serialize>:
 8014064:	2800      	cmp	r0, #0
 8014066:	d035      	beq.n	80140d4 <_Imu__cdr_serialize+0x70>
 8014068:	b538      	push	{r3, r4, r5, lr}
 801406a:	460d      	mov	r5, r1
 801406c:	4604      	mov	r4, r0
 801406e:	f000 f91b 	bl	80142a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8014072:	6843      	ldr	r3, [r0, #4]
 8014074:	4629      	mov	r1, r5
 8014076:	689b      	ldr	r3, [r3, #8]
 8014078:	4620      	mov	r0, r4
 801407a:	4798      	blx	r3
 801407c:	f000 fcde 	bl	8014a3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8014080:	6843      	ldr	r3, [r0, #4]
 8014082:	4629      	mov	r1, r5
 8014084:	689b      	ldr	r3, [r3, #8]
 8014086:	f104 0018 	add.w	r0, r4, #24
 801408a:	4798      	blx	r3
 801408c:	2209      	movs	r2, #9
 801408e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8014092:	4628      	mov	r0, r5
 8014094:	f000 fe1e 	bl	8014cd4 <ucdr_serialize_array_double>
 8014098:	f7f9 ff86 	bl	800dfa8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801409c:	6843      	ldr	r3, [r0, #4]
 801409e:	4629      	mov	r1, r5
 80140a0:	689b      	ldr	r3, [r3, #8]
 80140a2:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80140a6:	4798      	blx	r3
 80140a8:	2209      	movs	r2, #9
 80140aa:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 80140ae:	4628      	mov	r0, r5
 80140b0:	f000 fe10 	bl	8014cd4 <ucdr_serialize_array_double>
 80140b4:	f7f9 ff78 	bl	800dfa8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80140b8:	6843      	ldr	r3, [r0, #4]
 80140ba:	4629      	mov	r1, r5
 80140bc:	689b      	ldr	r3, [r3, #8]
 80140be:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 80140c2:	4798      	blx	r3
 80140c4:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 80140c8:	4628      	mov	r0, r5
 80140ca:	2209      	movs	r2, #9
 80140cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80140d0:	f000 be00 	b.w	8014cd4 <ucdr_serialize_array_double>
 80140d4:	4770      	bx	lr
 80140d6:	bf00      	nop

080140d8 <max_serialized_size_sensor_msgs__msg__Imu>:
 80140d8:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 80140dc:	2301      	movs	r3, #1
 80140de:	7003      	strb	r3, [r0, #0]
 80140e0:	4680      	mov	r8, r0
 80140e2:	460f      	mov	r7, r1
 80140e4:	f000 f8d6 	bl	8014294 <max_serialized_size_std_msgs__msg__Header>
 80140e8:	183c      	adds	r4, r7, r0
 80140ea:	4621      	mov	r1, r4
 80140ec:	4640      	mov	r0, r8
 80140ee:	f000 fc83 	bl	80149f8 <max_serialized_size_geometry_msgs__msg__Quaternion>
 80140f2:	4404      	add	r4, r0
 80140f4:	2108      	movs	r1, #8
 80140f6:	4620      	mov	r0, r4
 80140f8:	f7fb fb82 	bl	800f800 <ucdr_alignment>
 80140fc:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 8014100:	4425      	add	r5, r4
 8014102:	4629      	mov	r1, r5
 8014104:	4640      	mov	r0, r8
 8014106:	f7f9 ff33 	bl	800df70 <max_serialized_size_geometry_msgs__msg__Vector3>
 801410a:	4405      	add	r5, r0
 801410c:	2108      	movs	r1, #8
 801410e:	4628      	mov	r0, r5
 8014110:	f7fb fb76 	bl	800f800 <ucdr_alignment>
 8014114:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 8014118:	4425      	add	r5, r4
 801411a:	4629      	mov	r1, r5
 801411c:	4640      	mov	r0, r8
 801411e:	f7f9 ff27 	bl	800df70 <max_serialized_size_geometry_msgs__msg__Vector3>
 8014122:	4405      	add	r5, r0
 8014124:	2108      	movs	r1, #8
 8014126:	4628      	mov	r0, r5
 8014128:	f7fb fb6a 	bl	800f800 <ucdr_alignment>
 801412c:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 8014130:	4438      	add	r0, r7
 8014132:	4428      	add	r0, r5
 8014134:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

08014138 <_Imu__max_serialized_size>:
 8014138:	b500      	push	{lr}
 801413a:	b083      	sub	sp, #12
 801413c:	2100      	movs	r1, #0
 801413e:	f10d 0007 	add.w	r0, sp, #7
 8014142:	f7ff ffc9 	bl	80140d8 <max_serialized_size_sensor_msgs__msg__Imu>
 8014146:	b003      	add	sp, #12
 8014148:	f85d fb04 	ldr.w	pc, [sp], #4

0801414c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 801414c:	4800      	ldr	r0, [pc, #0]	@ (8014150 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 801414e:	4770      	bx	lr
 8014150:	20000800 	.word	0x20000800

08014154 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8014154:	f007 bfbc 	b.w	801c0d0 <std_msgs__msg__Header__init>

08014158 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8014158:	f007 bfde 	b.w	801c118 <std_msgs__msg__Header__fini>

0801415c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 801415c:	b508      	push	{r3, lr}
 801415e:	f000 fafb 	bl	8014758 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8014162:	4b06      	ldr	r3, [pc, #24]	@ (801417c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8014164:	4906      	ldr	r1, [pc, #24]	@ (8014180 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8014166:	681a      	ldr	r2, [r3, #0]
 8014168:	60c8      	str	r0, [r1, #12]
 801416a:	b10a      	cbz	r2, 8014170 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 801416c:	4803      	ldr	r0, [pc, #12]	@ (801417c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801416e:	bd08      	pop	{r3, pc}
 8014170:	4a04      	ldr	r2, [pc, #16]	@ (8014184 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8014172:	4802      	ldr	r0, [pc, #8]	@ (801417c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8014174:	6812      	ldr	r2, [r2, #0]
 8014176:	601a      	str	r2, [r3, #0]
 8014178:	bd08      	pop	{r3, pc}
 801417a:	bf00      	nop
 801417c:	200008a0 	.word	0x200008a0
 8014180:	20000828 	.word	0x20000828
 8014184:	20000638 	.word	0x20000638

08014188 <_Header__max_serialized_size>:
 8014188:	b500      	push	{lr}
 801418a:	b083      	sub	sp, #12
 801418c:	2301      	movs	r3, #1
 801418e:	2100      	movs	r1, #0
 8014190:	f10d 0007 	add.w	r0, sp, #7
 8014194:	f88d 3007 	strb.w	r3, [sp, #7]
 8014198:	f000 fb3c 	bl	8014814 <max_serialized_size_builtin_interfaces__msg__Time>
 801419c:	b003      	add	sp, #12
 801419e:	f85d fb04 	ldr.w	pc, [sp], #4
 80141a2:	bf00      	nop

080141a4 <get_serialized_size_std_msgs__msg__Header>:
 80141a4:	b570      	push	{r4, r5, r6, lr}
 80141a6:	4605      	mov	r5, r0
 80141a8:	b168      	cbz	r0, 80141c6 <get_serialized_size_std_msgs__msg__Header+0x22>
 80141aa:	460c      	mov	r4, r1
 80141ac:	f000 fae2 	bl	8014774 <get_serialized_size_builtin_interfaces__msg__Time>
 80141b0:	1826      	adds	r6, r4, r0
 80141b2:	2104      	movs	r1, #4
 80141b4:	4630      	mov	r0, r6
 80141b6:	f7fb fb23 	bl	800f800 <ucdr_alignment>
 80141ba:	68e9      	ldr	r1, [r5, #12]
 80141bc:	f1c4 0405 	rsb	r4, r4, #5
 80141c0:	440c      	add	r4, r1
 80141c2:	4404      	add	r4, r0
 80141c4:	19a0      	adds	r0, r4, r6
 80141c6:	bd70      	pop	{r4, r5, r6, pc}

080141c8 <_Header__cdr_deserialize>:
 80141c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141ca:	460c      	mov	r4, r1
 80141cc:	b083      	sub	sp, #12
 80141ce:	b1e1      	cbz	r1, 801420a <_Header__cdr_deserialize+0x42>
 80141d0:	4606      	mov	r6, r0
 80141d2:	f000 fb33 	bl	801483c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80141d6:	6843      	ldr	r3, [r0, #4]
 80141d8:	4621      	mov	r1, r4
 80141da:	68db      	ldr	r3, [r3, #12]
 80141dc:	4630      	mov	r0, r6
 80141de:	4798      	blx	r3
 80141e0:	6927      	ldr	r7, [r4, #16]
 80141e2:	68a1      	ldr	r1, [r4, #8]
 80141e4:	ab01      	add	r3, sp, #4
 80141e6:	463a      	mov	r2, r7
 80141e8:	4630      	mov	r0, r6
 80141ea:	f000 fe2f 	bl	8014e4c <ucdr_deserialize_sequence_char>
 80141ee:	9b01      	ldr	r3, [sp, #4]
 80141f0:	4605      	mov	r5, r0
 80141f2:	b920      	cbnz	r0, 80141fe <_Header__cdr_deserialize+0x36>
 80141f4:	429f      	cmp	r7, r3
 80141f6:	d30c      	bcc.n	8014212 <_Header__cdr_deserialize+0x4a>
 80141f8:	4628      	mov	r0, r5
 80141fa:	b003      	add	sp, #12
 80141fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141fe:	b103      	cbz	r3, 8014202 <_Header__cdr_deserialize+0x3a>
 8014200:	3b01      	subs	r3, #1
 8014202:	4628      	mov	r0, r5
 8014204:	60e3      	str	r3, [r4, #12]
 8014206:	b003      	add	sp, #12
 8014208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801420a:	460d      	mov	r5, r1
 801420c:	4628      	mov	r0, r5
 801420e:	b003      	add	sp, #12
 8014210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014212:	2101      	movs	r1, #1
 8014214:	75b0      	strb	r0, [r6, #22]
 8014216:	7571      	strb	r1, [r6, #21]
 8014218:	4630      	mov	r0, r6
 801421a:	60e5      	str	r5, [r4, #12]
 801421c:	f7fb fb06 	bl	800f82c <ucdr_align_to>
 8014220:	4630      	mov	r0, r6
 8014222:	9901      	ldr	r1, [sp, #4]
 8014224:	f7fb fb38 	bl	800f898 <ucdr_advance_buffer>
 8014228:	4628      	mov	r0, r5
 801422a:	b003      	add	sp, #12
 801422c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801422e:	bf00      	nop

08014230 <_Header__cdr_serialize>:
 8014230:	b1f8      	cbz	r0, 8014272 <_Header__cdr_serialize+0x42>
 8014232:	b570      	push	{r4, r5, r6, lr}
 8014234:	4604      	mov	r4, r0
 8014236:	460d      	mov	r5, r1
 8014238:	f000 fb00 	bl	801483c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801423c:	6843      	ldr	r3, [r0, #4]
 801423e:	4629      	mov	r1, r5
 8014240:	689b      	ldr	r3, [r3, #8]
 8014242:	4620      	mov	r0, r4
 8014244:	4798      	blx	r3
 8014246:	68a6      	ldr	r6, [r4, #8]
 8014248:	b156      	cbz	r6, 8014260 <_Header__cdr_serialize+0x30>
 801424a:	4630      	mov	r0, r6
 801424c:	f7eb fff2 	bl	8000234 <strlen>
 8014250:	4631      	mov	r1, r6
 8014252:	60e0      	str	r0, [r4, #12]
 8014254:	1c42      	adds	r2, r0, #1
 8014256:	4628      	mov	r0, r5
 8014258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801425c:	f000 bde4 	b.w	8014e28 <ucdr_serialize_sequence_char>
 8014260:	4630      	mov	r0, r6
 8014262:	60e0      	str	r0, [r4, #12]
 8014264:	4632      	mov	r2, r6
 8014266:	4631      	mov	r1, r6
 8014268:	4628      	mov	r0, r5
 801426a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801426e:	f000 bddb 	b.w	8014e28 <ucdr_serialize_sequence_char>
 8014272:	4770      	bx	lr

08014274 <_Header__get_serialized_size>:
 8014274:	b538      	push	{r3, r4, r5, lr}
 8014276:	4604      	mov	r4, r0
 8014278:	b150      	cbz	r0, 8014290 <_Header__get_serialized_size+0x1c>
 801427a:	2100      	movs	r1, #0
 801427c:	f000 fa7a 	bl	8014774 <get_serialized_size_builtin_interfaces__msg__Time>
 8014280:	2104      	movs	r1, #4
 8014282:	4605      	mov	r5, r0
 8014284:	f7fb fabc 	bl	800f800 <ucdr_alignment>
 8014288:	68e2      	ldr	r2, [r4, #12]
 801428a:	3205      	adds	r2, #5
 801428c:	1953      	adds	r3, r2, r5
 801428e:	4418      	add	r0, r3
 8014290:	bd38      	pop	{r3, r4, r5, pc}
 8014292:	bf00      	nop

08014294 <max_serialized_size_std_msgs__msg__Header>:
 8014294:	b510      	push	{r4, lr}
 8014296:	2301      	movs	r3, #1
 8014298:	4604      	mov	r4, r0
 801429a:	7003      	strb	r3, [r0, #0]
 801429c:	f000 faba 	bl	8014814 <max_serialized_size_builtin_interfaces__msg__Time>
 80142a0:	2300      	movs	r3, #0
 80142a2:	7023      	strb	r3, [r4, #0]
 80142a4:	bd10      	pop	{r4, pc}
 80142a6:	bf00      	nop

080142a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80142a8:	4800      	ldr	r0, [pc, #0]	@ (80142ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 80142aa:	4770      	bx	lr
 80142ac:	200008ac 	.word	0x200008ac

080142b0 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 80142b0:	4b04      	ldr	r3, [pc, #16]	@ (80142c4 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 80142b2:	681a      	ldr	r2, [r3, #0]
 80142b4:	b10a      	cbz	r2, 80142ba <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa>
 80142b6:	4803      	ldr	r0, [pc, #12]	@ (80142c4 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 80142b8:	4770      	bx	lr
 80142ba:	4a03      	ldr	r2, [pc, #12]	@ (80142c8 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x18>)
 80142bc:	4801      	ldr	r0, [pc, #4]	@ (80142c4 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 80142be:	6812      	ldr	r2, [r2, #0]
 80142c0:	601a      	str	r2, [r3, #0]
 80142c2:	4770      	bx	lr
 80142c4:	200008dc 	.word	0x200008dc
 80142c8:	20000634 	.word	0x20000634

080142cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 80142cc:	4b04      	ldr	r3, [pc, #16]	@ (80142e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 80142ce:	4805      	ldr	r0, [pc, #20]	@ (80142e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 80142d0:	4905      	ldr	r1, [pc, #20]	@ (80142e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x1c>)
 80142d2:	4a06      	ldr	r2, [pc, #24]	@ (80142ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x20>)
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	6003      	str	r3, [r0, #0]
 80142d8:	600b      	str	r3, [r1, #0]
 80142da:	6013      	str	r3, [r2, #0]
 80142dc:	4770      	bx	lr
 80142de:	bf00      	nop
 80142e0:	20000634 	.word	0x20000634
 80142e4:	200008f8 	.word	0x200008f8
 80142e8:	20000904 	.word	0x20000904
 80142ec:	200008dc 	.word	0x200008dc

080142f0 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger>:
 80142f0:	4b04      	ldr	r3, [pc, #16]	@ (8014304 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x14>)
 80142f2:	681a      	ldr	r2, [r3, #0]
 80142f4:	b10a      	cbz	r2, 80142fa <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xa>
 80142f6:	4803      	ldr	r0, [pc, #12]	@ (8014304 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x14>)
 80142f8:	4770      	bx	lr
 80142fa:	4a03      	ldr	r2, [pc, #12]	@ (8014308 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x18>)
 80142fc:	4801      	ldr	r0, [pc, #4]	@ (8014304 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x14>)
 80142fe:	6812      	ldr	r2, [r2, #0]
 8014300:	601a      	str	r2, [r3, #0]
 8014302:	4770      	bx	lr
 8014304:	20000918 	.word	0x20000918
 8014308:	20000634 	.word	0x20000634

0801430c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request>:
 801430c:	4b04      	ldr	r3, [pc, #16]	@ (8014320 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x14>)
 801430e:	4805      	ldr	r0, [pc, #20]	@ (8014324 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x18>)
 8014310:	4905      	ldr	r1, [pc, #20]	@ (8014328 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x1c>)
 8014312:	4a06      	ldr	r2, [pc, #24]	@ (801432c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x20>)
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	6003      	str	r3, [r0, #0]
 8014318:	600b      	str	r3, [r1, #0]
 801431a:	6013      	str	r3, [r2, #0]
 801431c:	4770      	bx	lr
 801431e:	bf00      	nop
 8014320:	20000634 	.word	0x20000634
 8014324:	20000934 	.word	0x20000934
 8014328:	20000940 	.word	0x20000940
 801432c:	20000918 	.word	0x20000918

08014330 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_init_function>:
 8014330:	f007 befe 	b.w	801c130 <std_srvs__srv__SetBool_Request__init>

08014334 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_fini_function>:
 8014334:	f007 bf00 	b.w	801c138 <std_srvs__srv__SetBool_Request__fini>

08014338 <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_init_function>:
 8014338:	f007 bf00 	b.w	801c13c <std_srvs__srv__SetBool_Response__init>

0801433c <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_fini_function>:
 801433c:	f007 bf10 	b.w	801c160 <std_srvs__srv__SetBool_Response__fini>

08014340 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 8014340:	4b04      	ldr	r3, [pc, #16]	@ (8014354 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 8014342:	681a      	ldr	r2, [r3, #0]
 8014344:	b10a      	cbz	r2, 801434a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0xa>
 8014346:	4803      	ldr	r0, [pc, #12]	@ (8014354 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 8014348:	4770      	bx	lr
 801434a:	4a03      	ldr	r2, [pc, #12]	@ (8014358 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 801434c:	4801      	ldr	r0, [pc, #4]	@ (8014354 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 801434e:	6812      	ldr	r2, [r2, #0]
 8014350:	601a      	str	r2, [r3, #0]
 8014352:	4770      	bx	lr
 8014354:	20000988 	.word	0x20000988
 8014358:	20000638 	.word	0x20000638

0801435c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 801435c:	4b04      	ldr	r3, [pc, #16]	@ (8014370 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 801435e:	681a      	ldr	r2, [r3, #0]
 8014360:	b10a      	cbz	r2, 8014366 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0xa>
 8014362:	4803      	ldr	r0, [pc, #12]	@ (8014370 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 8014364:	4770      	bx	lr
 8014366:	4a03      	ldr	r2, [pc, #12]	@ (8014374 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x18>)
 8014368:	4801      	ldr	r0, [pc, #4]	@ (8014370 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 801436a:	6812      	ldr	r2, [r2, #0]
 801436c:	601a      	str	r2, [r3, #0]
 801436e:	4770      	bx	lr
 8014370:	20000a0c 	.word	0x20000a0c
 8014374:	20000638 	.word	0x20000638

08014378 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 8014378:	4b13      	ldr	r3, [pc, #76]	@ (80143c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 801437a:	681a      	ldr	r2, [r3, #0]
 801437c:	b132      	cbz	r2, 801438c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>
 801437e:	685b      	ldr	r3, [r3, #4]
 8014380:	689a      	ldr	r2, [r3, #8]
 8014382:	b152      	cbz	r2, 801439a <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x22>
 8014384:	68da      	ldr	r2, [r3, #12]
 8014386:	b182      	cbz	r2, 80143aa <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x32>
 8014388:	480f      	ldr	r0, [pc, #60]	@ (80143c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 801438a:	4770      	bx	lr
 801438c:	4a0f      	ldr	r2, [pc, #60]	@ (80143cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 801438e:	6812      	ldr	r2, [r2, #0]
 8014390:	601a      	str	r2, [r3, #0]
 8014392:	685b      	ldr	r3, [r3, #4]
 8014394:	689a      	ldr	r2, [r3, #8]
 8014396:	2a00      	cmp	r2, #0
 8014398:	d1f4      	bne.n	8014384 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xc>
 801439a:	4a0d      	ldr	r2, [pc, #52]	@ (80143d0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x58>)
 801439c:	6811      	ldr	r1, [r2, #0]
 801439e:	b179      	cbz	r1, 80143c0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x48>
 80143a0:	6852      	ldr	r2, [r2, #4]
 80143a2:	609a      	str	r2, [r3, #8]
 80143a4:	68da      	ldr	r2, [r3, #12]
 80143a6:	2a00      	cmp	r2, #0
 80143a8:	d1ee      	bne.n	8014388 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x10>
 80143aa:	4a0a      	ldr	r2, [pc, #40]	@ (80143d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x5c>)
 80143ac:	6811      	ldr	r1, [r2, #0]
 80143ae:	b119      	cbz	r1, 80143b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x40>
 80143b0:	6852      	ldr	r2, [r2, #4]
 80143b2:	4805      	ldr	r0, [pc, #20]	@ (80143c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 80143b4:	60da      	str	r2, [r3, #12]
 80143b6:	4770      	bx	lr
 80143b8:	4904      	ldr	r1, [pc, #16]	@ (80143cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 80143ba:	6809      	ldr	r1, [r1, #0]
 80143bc:	6011      	str	r1, [r2, #0]
 80143be:	e7f7      	b.n	80143b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x38>
 80143c0:	4902      	ldr	r1, [pc, #8]	@ (80143cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 80143c2:	6809      	ldr	r1, [r1, #0]
 80143c4:	6011      	str	r1, [r2, #0]
 80143c6:	e7eb      	b.n	80143a0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x28>
 80143c8:	20000a28 	.word	0x20000a28
 80143cc:	20000638 	.word	0x20000638
 80143d0:	20000988 	.word	0x20000988
 80143d4:	20000a0c 	.word	0x20000a0c

080143d8 <std_srvs__srv__Trigger_Request__rosidl_typesupport_introspection_c__Trigger_Request_init_function>:
 80143d8:	f007 bec8 	b.w	801c16c <std_srvs__srv__Trigger_Request__init>

080143dc <std_srvs__srv__Trigger_Request__rosidl_typesupport_introspection_c__Trigger_Request_fini_function>:
 80143dc:	f007 beca 	b.w	801c174 <std_srvs__srv__Trigger_Request__fini>

080143e0 <std_srvs__srv__Trigger_Response__rosidl_typesupport_introspection_c__Trigger_Response_init_function>:
 80143e0:	f007 beca 	b.w	801c178 <std_srvs__srv__Trigger_Response__init>

080143e4 <std_srvs__srv__Trigger_Response__rosidl_typesupport_introspection_c__Trigger_Response_fini_function>:
 80143e4:	f007 beda 	b.w	801c19c <std_srvs__srv__Trigger_Response__fini>

080143e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request>:
 80143e8:	4b04      	ldr	r3, [pc, #16]	@ (80143fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x14>)
 80143ea:	681a      	ldr	r2, [r3, #0]
 80143ec:	b10a      	cbz	r2, 80143f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0xa>
 80143ee:	4803      	ldr	r0, [pc, #12]	@ (80143fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x14>)
 80143f0:	4770      	bx	lr
 80143f2:	4a03      	ldr	r2, [pc, #12]	@ (8014400 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x18>)
 80143f4:	4801      	ldr	r0, [pc, #4]	@ (80143fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x14>)
 80143f6:	6812      	ldr	r2, [r2, #0]
 80143f8:	601a      	str	r2, [r3, #0]
 80143fa:	4770      	bx	lr
 80143fc:	20000a70 	.word	0x20000a70
 8014400:	20000638 	.word	0x20000638

08014404 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response>:
 8014404:	4b04      	ldr	r3, [pc, #16]	@ (8014418 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x14>)
 8014406:	681a      	ldr	r2, [r3, #0]
 8014408:	b10a      	cbz	r2, 801440e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0xa>
 801440a:	4803      	ldr	r0, [pc, #12]	@ (8014418 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x14>)
 801440c:	4770      	bx	lr
 801440e:	4a03      	ldr	r2, [pc, #12]	@ (801441c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x18>)
 8014410:	4801      	ldr	r0, [pc, #4]	@ (8014418 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x14>)
 8014412:	6812      	ldr	r2, [r2, #0]
 8014414:	601a      	str	r2, [r3, #0]
 8014416:	4770      	bx	lr
 8014418:	20000af4 	.word	0x20000af4
 801441c:	20000638 	.word	0x20000638

08014420 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger>:
 8014420:	4b13      	ldr	r3, [pc, #76]	@ (8014470 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x50>)
 8014422:	681a      	ldr	r2, [r3, #0]
 8014424:	b132      	cbz	r2, 8014434 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x14>
 8014426:	685b      	ldr	r3, [r3, #4]
 8014428:	689a      	ldr	r2, [r3, #8]
 801442a:	b152      	cbz	r2, 8014442 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x22>
 801442c:	68da      	ldr	r2, [r3, #12]
 801442e:	b182      	cbz	r2, 8014452 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x32>
 8014430:	480f      	ldr	r0, [pc, #60]	@ (8014470 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x50>)
 8014432:	4770      	bx	lr
 8014434:	4a0f      	ldr	r2, [pc, #60]	@ (8014474 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x54>)
 8014436:	6812      	ldr	r2, [r2, #0]
 8014438:	601a      	str	r2, [r3, #0]
 801443a:	685b      	ldr	r3, [r3, #4]
 801443c:	689a      	ldr	r2, [r3, #8]
 801443e:	2a00      	cmp	r2, #0
 8014440:	d1f4      	bne.n	801442c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xc>
 8014442:	4a0d      	ldr	r2, [pc, #52]	@ (8014478 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x58>)
 8014444:	6811      	ldr	r1, [r2, #0]
 8014446:	b179      	cbz	r1, 8014468 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x48>
 8014448:	6852      	ldr	r2, [r2, #4]
 801444a:	609a      	str	r2, [r3, #8]
 801444c:	68da      	ldr	r2, [r3, #12]
 801444e:	2a00      	cmp	r2, #0
 8014450:	d1ee      	bne.n	8014430 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x10>
 8014452:	4a0a      	ldr	r2, [pc, #40]	@ (801447c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x5c>)
 8014454:	6811      	ldr	r1, [r2, #0]
 8014456:	b119      	cbz	r1, 8014460 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x40>
 8014458:	6852      	ldr	r2, [r2, #4]
 801445a:	4805      	ldr	r0, [pc, #20]	@ (8014470 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x50>)
 801445c:	60da      	str	r2, [r3, #12]
 801445e:	4770      	bx	lr
 8014460:	4904      	ldr	r1, [pc, #16]	@ (8014474 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x54>)
 8014462:	6809      	ldr	r1, [r1, #0]
 8014464:	6011      	str	r1, [r2, #0]
 8014466:	e7f7      	b.n	8014458 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x38>
 8014468:	4902      	ldr	r1, [pc, #8]	@ (8014474 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x54>)
 801446a:	6809      	ldr	r1, [r1, #0]
 801446c:	6011      	str	r1, [r2, #0]
 801446e:	e7eb      	b.n	8014448 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x28>
 8014470:	20000b10 	.word	0x20000b10
 8014474:	20000638 	.word	0x20000638
 8014478:	20000a70 	.word	0x20000a70
 801447c:	20000af4 	.word	0x20000af4

08014480 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 8014480:	4800      	ldr	r0, [pc, #0]	@ (8014484 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x4>)
 8014482:	4770      	bx	lr
 8014484:	20000b38 	.word	0x20000b38

08014488 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 8014488:	4800      	ldr	r0, [pc, #0]	@ (801448c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x4>)
 801448a:	4770      	bx	lr
 801448c:	20000b44 	.word	0x20000b44

08014490 <_SetBool_Request__max_serialized_size>:
 8014490:	b508      	push	{r3, lr}
 8014492:	2101      	movs	r1, #1
 8014494:	2000      	movs	r0, #0
 8014496:	f7fb f9b3 	bl	800f800 <ucdr_alignment>
 801449a:	3001      	adds	r0, #1
 801449c:	bd08      	pop	{r3, pc}
 801449e:	bf00      	nop

080144a0 <_SetBool_Request__cdr_deserialize>:
 80144a0:	b109      	cbz	r1, 80144a6 <_SetBool_Request__cdr_deserialize+0x6>
 80144a2:	f7f9 beaf 	b.w	800e204 <ucdr_deserialize_bool>
 80144a6:	4608      	mov	r0, r1
 80144a8:	4770      	bx	lr
 80144aa:	bf00      	nop

080144ac <get_serialized_size_std_srvs__srv__SetBool_Request>:
 80144ac:	b138      	cbz	r0, 80144be <get_serialized_size_std_srvs__srv__SetBool_Request+0x12>
 80144ae:	b508      	push	{r3, lr}
 80144b0:	460b      	mov	r3, r1
 80144b2:	4618      	mov	r0, r3
 80144b4:	2101      	movs	r1, #1
 80144b6:	f7fb f9a3 	bl	800f800 <ucdr_alignment>
 80144ba:	3001      	adds	r0, #1
 80144bc:	bd08      	pop	{r3, pc}
 80144be:	4770      	bx	lr

080144c0 <get_serialized_size_std_srvs__srv__SetBool_Response>:
 80144c0:	b570      	push	{r4, r5, r6, lr}
 80144c2:	4605      	mov	r5, r0
 80144c4:	b180      	cbz	r0, 80144e8 <get_serialized_size_std_srvs__srv__SetBool_Response+0x28>
 80144c6:	460c      	mov	r4, r1
 80144c8:	4620      	mov	r0, r4
 80144ca:	2101      	movs	r1, #1
 80144cc:	f7fb f998 	bl	800f800 <ucdr_alignment>
 80144d0:	1c63      	adds	r3, r4, #1
 80144d2:	181e      	adds	r6, r3, r0
 80144d4:	2104      	movs	r1, #4
 80144d6:	4630      	mov	r0, r6
 80144d8:	f7fb f992 	bl	800f800 <ucdr_alignment>
 80144dc:	68a9      	ldr	r1, [r5, #8]
 80144de:	f1c4 0405 	rsb	r4, r4, #5
 80144e2:	440c      	add	r4, r1
 80144e4:	4404      	add	r4, r0
 80144e6:	19a0      	adds	r0, r4, r6
 80144e8:	bd70      	pop	{r4, r5, r6, pc}
 80144ea:	bf00      	nop

080144ec <_SetBool_Request__cdr_serialize>:
 80144ec:	460a      	mov	r2, r1
 80144ee:	b118      	cbz	r0, 80144f8 <_SetBool_Request__cdr_serialize+0xc>
 80144f0:	7801      	ldrb	r1, [r0, #0]
 80144f2:	4610      	mov	r0, r2
 80144f4:	f7f9 be70 	b.w	800e1d8 <ucdr_serialize_bool>
 80144f8:	4770      	bx	lr
 80144fa:	bf00      	nop

080144fc <_SetBool_Response__cdr_deserialize>:
 80144fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144fe:	460c      	mov	r4, r1
 8014500:	b083      	sub	sp, #12
 8014502:	b1b9      	cbz	r1, 8014534 <_SetBool_Response__cdr_deserialize+0x38>
 8014504:	4606      	mov	r6, r0
 8014506:	f7f9 fe7d 	bl	800e204 <ucdr_deserialize_bool>
 801450a:	68e7      	ldr	r7, [r4, #12]
 801450c:	6861      	ldr	r1, [r4, #4]
 801450e:	ab01      	add	r3, sp, #4
 8014510:	463a      	mov	r2, r7
 8014512:	4630      	mov	r0, r6
 8014514:	f000 fc9a 	bl	8014e4c <ucdr_deserialize_sequence_char>
 8014518:	9b01      	ldr	r3, [sp, #4]
 801451a:	4605      	mov	r5, r0
 801451c:	b920      	cbnz	r0, 8014528 <_SetBool_Response__cdr_deserialize+0x2c>
 801451e:	429f      	cmp	r7, r3
 8014520:	d30c      	bcc.n	801453c <_SetBool_Response__cdr_deserialize+0x40>
 8014522:	4628      	mov	r0, r5
 8014524:	b003      	add	sp, #12
 8014526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014528:	b103      	cbz	r3, 801452c <_SetBool_Response__cdr_deserialize+0x30>
 801452a:	3b01      	subs	r3, #1
 801452c:	4628      	mov	r0, r5
 801452e:	60a3      	str	r3, [r4, #8]
 8014530:	b003      	add	sp, #12
 8014532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014534:	460d      	mov	r5, r1
 8014536:	4628      	mov	r0, r5
 8014538:	b003      	add	sp, #12
 801453a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801453c:	2101      	movs	r1, #1
 801453e:	75b0      	strb	r0, [r6, #22]
 8014540:	7571      	strb	r1, [r6, #21]
 8014542:	4630      	mov	r0, r6
 8014544:	60a5      	str	r5, [r4, #8]
 8014546:	f7fb f971 	bl	800f82c <ucdr_align_to>
 801454a:	4630      	mov	r0, r6
 801454c:	9901      	ldr	r1, [sp, #4]
 801454e:	f7fb f9a3 	bl	800f898 <ucdr_advance_buffer>
 8014552:	4628      	mov	r0, r5
 8014554:	b003      	add	sp, #12
 8014556:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014558 <_SetBool_Response__cdr_serialize>:
 8014558:	b1e0      	cbz	r0, 8014594 <_SetBool_Response__cdr_serialize+0x3c>
 801455a:	b570      	push	{r4, r5, r6, lr}
 801455c:	460d      	mov	r5, r1
 801455e:	4604      	mov	r4, r0
 8014560:	7801      	ldrb	r1, [r0, #0]
 8014562:	4628      	mov	r0, r5
 8014564:	f7f9 fe38 	bl	800e1d8 <ucdr_serialize_bool>
 8014568:	6866      	ldr	r6, [r4, #4]
 801456a:	b156      	cbz	r6, 8014582 <_SetBool_Response__cdr_serialize+0x2a>
 801456c:	4630      	mov	r0, r6
 801456e:	f7eb fe61 	bl	8000234 <strlen>
 8014572:	4631      	mov	r1, r6
 8014574:	60a0      	str	r0, [r4, #8]
 8014576:	1c42      	adds	r2, r0, #1
 8014578:	4628      	mov	r0, r5
 801457a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801457e:	f000 bc53 	b.w	8014e28 <ucdr_serialize_sequence_char>
 8014582:	4630      	mov	r0, r6
 8014584:	60a0      	str	r0, [r4, #8]
 8014586:	4632      	mov	r2, r6
 8014588:	4631      	mov	r1, r6
 801458a:	4628      	mov	r0, r5
 801458c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014590:	f000 bc4a 	b.w	8014e28 <ucdr_serialize_sequence_char>
 8014594:	4770      	bx	lr
 8014596:	bf00      	nop

08014598 <_SetBool_Request__get_serialized_size>:
 8014598:	b130      	cbz	r0, 80145a8 <_SetBool_Request__get_serialized_size+0x10>
 801459a:	b508      	push	{r3, lr}
 801459c:	2101      	movs	r1, #1
 801459e:	2000      	movs	r0, #0
 80145a0:	f7fb f92e 	bl	800f800 <ucdr_alignment>
 80145a4:	3001      	adds	r0, #1
 80145a6:	bd08      	pop	{r3, pc}
 80145a8:	4770      	bx	lr
 80145aa:	bf00      	nop

080145ac <_SetBool_Response__max_serialized_size>:
 80145ac:	b508      	push	{r3, lr}
 80145ae:	2101      	movs	r1, #1
 80145b0:	2000      	movs	r0, #0
 80145b2:	f7fb f925 	bl	800f800 <ucdr_alignment>
 80145b6:	3001      	adds	r0, #1
 80145b8:	bd08      	pop	{r3, pc}
 80145ba:	bf00      	nop

080145bc <_SetBool_Response__get_serialized_size>:
 80145bc:	b538      	push	{r3, r4, r5, lr}
 80145be:	4604      	mov	r4, r0
 80145c0:	b160      	cbz	r0, 80145dc <_SetBool_Response__get_serialized_size+0x20>
 80145c2:	2101      	movs	r1, #1
 80145c4:	2000      	movs	r0, #0
 80145c6:	f7fb f91b 	bl	800f800 <ucdr_alignment>
 80145ca:	1c45      	adds	r5, r0, #1
 80145cc:	2104      	movs	r1, #4
 80145ce:	4628      	mov	r0, r5
 80145d0:	f7fb f916 	bl	800f800 <ucdr_alignment>
 80145d4:	68a3      	ldr	r3, [r4, #8]
 80145d6:	3305      	adds	r3, #5
 80145d8:	4418      	add	r0, r3
 80145da:	4428      	add	r0, r5
 80145dc:	bd38      	pop	{r3, r4, r5, pc}
 80145de:	bf00      	nop

080145e0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 80145e0:	4800      	ldr	r0, [pc, #0]	@ (80145e4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x4>)
 80145e2:	4770      	bx	lr
 80145e4:	20000b2c 	.word	0x20000b2c

080145e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request>:
 80145e8:	4800      	ldr	r0, [pc, #0]	@ (80145ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x4>)
 80145ea:	4770      	bx	lr
 80145ec:	20000ba4 	.word	0x20000ba4

080145f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response>:
 80145f0:	4800      	ldr	r0, [pc, #0]	@ (80145f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x4>)
 80145f2:	4770      	bx	lr
 80145f4:	20000bb0 	.word	0x20000bb0

080145f8 <_Trigger_Request__max_serialized_size>:
 80145f8:	b508      	push	{r3, lr}
 80145fa:	2101      	movs	r1, #1
 80145fc:	2000      	movs	r0, #0
 80145fe:	f7fb f8ff 	bl	800f800 <ucdr_alignment>
 8014602:	3001      	adds	r0, #1
 8014604:	bd08      	pop	{r3, pc}
 8014606:	bf00      	nop

08014608 <_Trigger_Request__cdr_deserialize>:
 8014608:	b109      	cbz	r1, 801460e <_Trigger_Request__cdr_deserialize+0x6>
 801460a:	f7f9 be29 	b.w	800e260 <ucdr_deserialize_uint8_t>
 801460e:	4608      	mov	r0, r1
 8014610:	4770      	bx	lr
 8014612:	bf00      	nop

08014614 <get_serialized_size_std_srvs__srv__Trigger_Request>:
 8014614:	b138      	cbz	r0, 8014626 <get_serialized_size_std_srvs__srv__Trigger_Request+0x12>
 8014616:	b508      	push	{r3, lr}
 8014618:	460b      	mov	r3, r1
 801461a:	4618      	mov	r0, r3
 801461c:	2101      	movs	r1, #1
 801461e:	f7fb f8ef 	bl	800f800 <ucdr_alignment>
 8014622:	3001      	adds	r0, #1
 8014624:	bd08      	pop	{r3, pc}
 8014626:	4770      	bx	lr

08014628 <get_serialized_size_std_srvs__srv__Trigger_Response>:
 8014628:	b570      	push	{r4, r5, r6, lr}
 801462a:	4605      	mov	r5, r0
 801462c:	b180      	cbz	r0, 8014650 <get_serialized_size_std_srvs__srv__Trigger_Response+0x28>
 801462e:	460c      	mov	r4, r1
 8014630:	4620      	mov	r0, r4
 8014632:	2101      	movs	r1, #1
 8014634:	f7fb f8e4 	bl	800f800 <ucdr_alignment>
 8014638:	1c63      	adds	r3, r4, #1
 801463a:	181e      	adds	r6, r3, r0
 801463c:	2104      	movs	r1, #4
 801463e:	4630      	mov	r0, r6
 8014640:	f7fb f8de 	bl	800f800 <ucdr_alignment>
 8014644:	68a9      	ldr	r1, [r5, #8]
 8014646:	f1c4 0405 	rsb	r4, r4, #5
 801464a:	440c      	add	r4, r1
 801464c:	4404      	add	r4, r0
 801464e:	19a0      	adds	r0, r4, r6
 8014650:	bd70      	pop	{r4, r5, r6, pc}
 8014652:	bf00      	nop

08014654 <_Trigger_Request__cdr_serialize>:
 8014654:	460a      	mov	r2, r1
 8014656:	b118      	cbz	r0, 8014660 <_Trigger_Request__cdr_serialize+0xc>
 8014658:	7801      	ldrb	r1, [r0, #0]
 801465a:	4610      	mov	r0, r2
 801465c:	f7f9 bdea 	b.w	800e234 <ucdr_serialize_uint8_t>
 8014660:	4770      	bx	lr
 8014662:	bf00      	nop

08014664 <_Trigger_Response__cdr_deserialize>:
 8014664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014666:	460c      	mov	r4, r1
 8014668:	b083      	sub	sp, #12
 801466a:	b1b9      	cbz	r1, 801469c <_Trigger_Response__cdr_deserialize+0x38>
 801466c:	4606      	mov	r6, r0
 801466e:	f7f9 fdc9 	bl	800e204 <ucdr_deserialize_bool>
 8014672:	68e7      	ldr	r7, [r4, #12]
 8014674:	6861      	ldr	r1, [r4, #4]
 8014676:	ab01      	add	r3, sp, #4
 8014678:	463a      	mov	r2, r7
 801467a:	4630      	mov	r0, r6
 801467c:	f000 fbe6 	bl	8014e4c <ucdr_deserialize_sequence_char>
 8014680:	9b01      	ldr	r3, [sp, #4]
 8014682:	4605      	mov	r5, r0
 8014684:	b920      	cbnz	r0, 8014690 <_Trigger_Response__cdr_deserialize+0x2c>
 8014686:	429f      	cmp	r7, r3
 8014688:	d30c      	bcc.n	80146a4 <_Trigger_Response__cdr_deserialize+0x40>
 801468a:	4628      	mov	r0, r5
 801468c:	b003      	add	sp, #12
 801468e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014690:	b103      	cbz	r3, 8014694 <_Trigger_Response__cdr_deserialize+0x30>
 8014692:	3b01      	subs	r3, #1
 8014694:	4628      	mov	r0, r5
 8014696:	60a3      	str	r3, [r4, #8]
 8014698:	b003      	add	sp, #12
 801469a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801469c:	460d      	mov	r5, r1
 801469e:	4628      	mov	r0, r5
 80146a0:	b003      	add	sp, #12
 80146a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146a4:	2101      	movs	r1, #1
 80146a6:	75b0      	strb	r0, [r6, #22]
 80146a8:	7571      	strb	r1, [r6, #21]
 80146aa:	4630      	mov	r0, r6
 80146ac:	60a5      	str	r5, [r4, #8]
 80146ae:	f7fb f8bd 	bl	800f82c <ucdr_align_to>
 80146b2:	4630      	mov	r0, r6
 80146b4:	9901      	ldr	r1, [sp, #4]
 80146b6:	f7fb f8ef 	bl	800f898 <ucdr_advance_buffer>
 80146ba:	4628      	mov	r0, r5
 80146bc:	b003      	add	sp, #12
 80146be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080146c0 <_Trigger_Response__cdr_serialize>:
 80146c0:	b1e0      	cbz	r0, 80146fc <_Trigger_Response__cdr_serialize+0x3c>
 80146c2:	b570      	push	{r4, r5, r6, lr}
 80146c4:	460d      	mov	r5, r1
 80146c6:	4604      	mov	r4, r0
 80146c8:	7801      	ldrb	r1, [r0, #0]
 80146ca:	4628      	mov	r0, r5
 80146cc:	f7f9 fd84 	bl	800e1d8 <ucdr_serialize_bool>
 80146d0:	6866      	ldr	r6, [r4, #4]
 80146d2:	b156      	cbz	r6, 80146ea <_Trigger_Response__cdr_serialize+0x2a>
 80146d4:	4630      	mov	r0, r6
 80146d6:	f7eb fdad 	bl	8000234 <strlen>
 80146da:	4631      	mov	r1, r6
 80146dc:	60a0      	str	r0, [r4, #8]
 80146de:	1c42      	adds	r2, r0, #1
 80146e0:	4628      	mov	r0, r5
 80146e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146e6:	f000 bb9f 	b.w	8014e28 <ucdr_serialize_sequence_char>
 80146ea:	4630      	mov	r0, r6
 80146ec:	60a0      	str	r0, [r4, #8]
 80146ee:	4632      	mov	r2, r6
 80146f0:	4631      	mov	r1, r6
 80146f2:	4628      	mov	r0, r5
 80146f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146f8:	f000 bb96 	b.w	8014e28 <ucdr_serialize_sequence_char>
 80146fc:	4770      	bx	lr
 80146fe:	bf00      	nop

08014700 <_Trigger_Request__get_serialized_size>:
 8014700:	b130      	cbz	r0, 8014710 <_Trigger_Request__get_serialized_size+0x10>
 8014702:	b508      	push	{r3, lr}
 8014704:	2101      	movs	r1, #1
 8014706:	2000      	movs	r0, #0
 8014708:	f7fb f87a 	bl	800f800 <ucdr_alignment>
 801470c:	3001      	adds	r0, #1
 801470e:	bd08      	pop	{r3, pc}
 8014710:	4770      	bx	lr
 8014712:	bf00      	nop

08014714 <_Trigger_Response__max_serialized_size>:
 8014714:	b508      	push	{r3, lr}
 8014716:	2101      	movs	r1, #1
 8014718:	2000      	movs	r0, #0
 801471a:	f7fb f871 	bl	800f800 <ucdr_alignment>
 801471e:	3001      	adds	r0, #1
 8014720:	bd08      	pop	{r3, pc}
 8014722:	bf00      	nop

08014724 <_Trigger_Response__get_serialized_size>:
 8014724:	b538      	push	{r3, r4, r5, lr}
 8014726:	4604      	mov	r4, r0
 8014728:	b160      	cbz	r0, 8014744 <_Trigger_Response__get_serialized_size+0x20>
 801472a:	2101      	movs	r1, #1
 801472c:	2000      	movs	r0, #0
 801472e:	f7fb f867 	bl	800f800 <ucdr_alignment>
 8014732:	1c45      	adds	r5, r0, #1
 8014734:	2104      	movs	r1, #4
 8014736:	4628      	mov	r0, r5
 8014738:	f7fb f862 	bl	800f800 <ucdr_alignment>
 801473c:	68a3      	ldr	r3, [r4, #8]
 801473e:	3305      	adds	r3, #5
 8014740:	4418      	add	r0, r3
 8014742:	4428      	add	r0, r5
 8014744:	bd38      	pop	{r3, r4, r5, pc}
 8014746:	bf00      	nop

08014748 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__Trigger>:
 8014748:	4800      	ldr	r0, [pc, #0]	@ (801474c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x4>)
 801474a:	4770      	bx	lr
 801474c:	20000b98 	.word	0x20000b98

08014750 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8014750:	f007 bd2a 	b.w	801c1a8 <builtin_interfaces__msg__Time__init>

08014754 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8014754:	f007 bd2c 	b.w	801c1b0 <builtin_interfaces__msg__Time__fini>

08014758 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8014758:	4b04      	ldr	r3, [pc, #16]	@ (801476c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 801475a:	681a      	ldr	r2, [r3, #0]
 801475c:	b10a      	cbz	r2, 8014762 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 801475e:	4803      	ldr	r0, [pc, #12]	@ (801476c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8014760:	4770      	bx	lr
 8014762:	4a03      	ldr	r2, [pc, #12]	@ (8014770 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8014764:	4801      	ldr	r0, [pc, #4]	@ (801476c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8014766:	6812      	ldr	r2, [r2, #0]
 8014768:	601a      	str	r2, [r3, #0]
 801476a:	4770      	bx	lr
 801476c:	20000c6c 	.word	0x20000c6c
 8014770:	20000638 	.word	0x20000638

08014774 <get_serialized_size_builtin_interfaces__msg__Time>:
 8014774:	b180      	cbz	r0, 8014798 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8014776:	b538      	push	{r3, r4, r5, lr}
 8014778:	460d      	mov	r5, r1
 801477a:	4628      	mov	r0, r5
 801477c:	2104      	movs	r1, #4
 801477e:	f7fb f83f 	bl	800f800 <ucdr_alignment>
 8014782:	1d2b      	adds	r3, r5, #4
 8014784:	181c      	adds	r4, r3, r0
 8014786:	2104      	movs	r1, #4
 8014788:	4620      	mov	r0, r4
 801478a:	f7fb f839 	bl	800f800 <ucdr_alignment>
 801478e:	f1c5 0504 	rsb	r5, r5, #4
 8014792:	4428      	add	r0, r5
 8014794:	4420      	add	r0, r4
 8014796:	bd38      	pop	{r3, r4, r5, pc}
 8014798:	4770      	bx	lr
 801479a:	bf00      	nop

0801479c <_Time__cdr_deserialize>:
 801479c:	b538      	push	{r3, r4, r5, lr}
 801479e:	460c      	mov	r4, r1
 80147a0:	b141      	cbz	r1, 80147b4 <_Time__cdr_deserialize+0x18>
 80147a2:	4605      	mov	r5, r0
 80147a4:	f7fa fc0e 	bl	800efc4 <ucdr_deserialize_int32_t>
 80147a8:	1d21      	adds	r1, r4, #4
 80147aa:	4628      	mov	r0, r5
 80147ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80147b0:	f7fa b886 	b.w	800e8c0 <ucdr_deserialize_uint32_t>
 80147b4:	4608      	mov	r0, r1
 80147b6:	bd38      	pop	{r3, r4, r5, pc}

080147b8 <_Time__cdr_serialize>:
 80147b8:	b160      	cbz	r0, 80147d4 <_Time__cdr_serialize+0x1c>
 80147ba:	b538      	push	{r3, r4, r5, lr}
 80147bc:	460d      	mov	r5, r1
 80147be:	4604      	mov	r4, r0
 80147c0:	6801      	ldr	r1, [r0, #0]
 80147c2:	4628      	mov	r0, r5
 80147c4:	f7fa fb66 	bl	800ee94 <ucdr_serialize_int32_t>
 80147c8:	6861      	ldr	r1, [r4, #4]
 80147ca:	4628      	mov	r0, r5
 80147cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80147d0:	f7f9 bf46 	b.w	800e660 <ucdr_serialize_uint32_t>
 80147d4:	4770      	bx	lr
 80147d6:	bf00      	nop

080147d8 <_Time__get_serialized_size>:
 80147d8:	b160      	cbz	r0, 80147f4 <_Time__get_serialized_size+0x1c>
 80147da:	b510      	push	{r4, lr}
 80147dc:	2104      	movs	r1, #4
 80147de:	2000      	movs	r0, #0
 80147e0:	f7fb f80e 	bl	800f800 <ucdr_alignment>
 80147e4:	1d04      	adds	r4, r0, #4
 80147e6:	2104      	movs	r1, #4
 80147e8:	4620      	mov	r0, r4
 80147ea:	f7fb f809 	bl	800f800 <ucdr_alignment>
 80147ee:	3004      	adds	r0, #4
 80147f0:	4420      	add	r0, r4
 80147f2:	bd10      	pop	{r4, pc}
 80147f4:	4770      	bx	lr
 80147f6:	bf00      	nop

080147f8 <_Time__max_serialized_size>:
 80147f8:	b510      	push	{r4, lr}
 80147fa:	2104      	movs	r1, #4
 80147fc:	2000      	movs	r0, #0
 80147fe:	f7fa ffff 	bl	800f800 <ucdr_alignment>
 8014802:	1d04      	adds	r4, r0, #4
 8014804:	2104      	movs	r1, #4
 8014806:	4620      	mov	r0, r4
 8014808:	f7fa fffa 	bl	800f800 <ucdr_alignment>
 801480c:	3004      	adds	r0, #4
 801480e:	4420      	add	r0, r4
 8014810:	bd10      	pop	{r4, pc}
 8014812:	bf00      	nop

08014814 <max_serialized_size_builtin_interfaces__msg__Time>:
 8014814:	b538      	push	{r3, r4, r5, lr}
 8014816:	460c      	mov	r4, r1
 8014818:	2301      	movs	r3, #1
 801481a:	7003      	strb	r3, [r0, #0]
 801481c:	2104      	movs	r1, #4
 801481e:	4620      	mov	r0, r4
 8014820:	f7fa ffee 	bl	800f800 <ucdr_alignment>
 8014824:	1d25      	adds	r5, r4, #4
 8014826:	4405      	add	r5, r0
 8014828:	2104      	movs	r1, #4
 801482a:	4628      	mov	r0, r5
 801482c:	f7fa ffe8 	bl	800f800 <ucdr_alignment>
 8014830:	f1c4 0404 	rsb	r4, r4, #4
 8014834:	4420      	add	r0, r4
 8014836:	4428      	add	r0, r5
 8014838:	bd38      	pop	{r3, r4, r5, pc}
 801483a:	bf00      	nop

0801483c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 801483c:	4800      	ldr	r0, [pc, #0]	@ (8014840 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 801483e:	4770      	bx	lr
 8014840:	20000c78 	.word	0x20000c78

08014844 <geometry_msgs__msg__Twist__init>:
 8014844:	b570      	push	{r4, r5, r6, lr}
 8014846:	4605      	mov	r5, r0
 8014848:	b1a8      	cbz	r0, 8014876 <geometry_msgs__msg__Twist__init+0x32>
 801484a:	f000 f82b 	bl	80148a4 <geometry_msgs__msg__Vector3__init>
 801484e:	4604      	mov	r4, r0
 8014850:	b140      	cbz	r0, 8014864 <geometry_msgs__msg__Twist__init+0x20>
 8014852:	f105 0618 	add.w	r6, r5, #24
 8014856:	4630      	mov	r0, r6
 8014858:	f000 f824 	bl	80148a4 <geometry_msgs__msg__Vector3__init>
 801485c:	4604      	mov	r4, r0
 801485e:	b168      	cbz	r0, 801487c <geometry_msgs__msg__Twist__init+0x38>
 8014860:	4620      	mov	r0, r4
 8014862:	bd70      	pop	{r4, r5, r6, pc}
 8014864:	4628      	mov	r0, r5
 8014866:	f000 f821 	bl	80148ac <geometry_msgs__msg__Vector3__fini>
 801486a:	f105 0018 	add.w	r0, r5, #24
 801486e:	f000 f81d 	bl	80148ac <geometry_msgs__msg__Vector3__fini>
 8014872:	4620      	mov	r0, r4
 8014874:	bd70      	pop	{r4, r5, r6, pc}
 8014876:	4604      	mov	r4, r0
 8014878:	4620      	mov	r0, r4
 801487a:	bd70      	pop	{r4, r5, r6, pc}
 801487c:	4628      	mov	r0, r5
 801487e:	f000 f815 	bl	80148ac <geometry_msgs__msg__Vector3__fini>
 8014882:	4630      	mov	r0, r6
 8014884:	f000 f812 	bl	80148ac <geometry_msgs__msg__Vector3__fini>
 8014888:	e7ea      	b.n	8014860 <geometry_msgs__msg__Twist__init+0x1c>
 801488a:	bf00      	nop

0801488c <geometry_msgs__msg__Twist__fini>:
 801488c:	b148      	cbz	r0, 80148a2 <geometry_msgs__msg__Twist__fini+0x16>
 801488e:	b510      	push	{r4, lr}
 8014890:	4604      	mov	r4, r0
 8014892:	f000 f80b 	bl	80148ac <geometry_msgs__msg__Vector3__fini>
 8014896:	f104 0018 	add.w	r0, r4, #24
 801489a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801489e:	f000 b805 	b.w	80148ac <geometry_msgs__msg__Vector3__fini>
 80148a2:	4770      	bx	lr

080148a4 <geometry_msgs__msg__Vector3__init>:
 80148a4:	3800      	subs	r0, #0
 80148a6:	bf18      	it	ne
 80148a8:	2001      	movne	r0, #1
 80148aa:	4770      	bx	lr

080148ac <geometry_msgs__msg__Vector3__fini>:
 80148ac:	4770      	bx	lr
 80148ae:	bf00      	nop

080148b0 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 80148b0:	f007 bc82 	b.w	801c1b8 <geometry_msgs__msg__Quaternion__init>

080148b4 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 80148b4:	f007 bc94 	b.w	801c1e0 <geometry_msgs__msg__Quaternion__fini>

080148b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 80148b8:	4b04      	ldr	r3, [pc, #16]	@ (80148cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 80148ba:	681a      	ldr	r2, [r3, #0]
 80148bc:	b10a      	cbz	r2, 80148c2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 80148be:	4803      	ldr	r0, [pc, #12]	@ (80148cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 80148c0:	4770      	bx	lr
 80148c2:	4a03      	ldr	r2, [pc, #12]	@ (80148d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 80148c4:	4801      	ldr	r0, [pc, #4]	@ (80148cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 80148c6:	6812      	ldr	r2, [r2, #0]
 80148c8:	601a      	str	r2, [r3, #0]
 80148ca:	4770      	bx	lr
 80148cc:	20000d90 	.word	0x20000d90
 80148d0:	20000638 	.word	0x20000638

080148d4 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 80148d4:	b1f0      	cbz	r0, 8014914 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 80148d6:	b570      	push	{r4, r5, r6, lr}
 80148d8:	460d      	mov	r5, r1
 80148da:	4628      	mov	r0, r5
 80148dc:	2108      	movs	r1, #8
 80148de:	f7fa ff8f 	bl	800f800 <ucdr_alignment>
 80148e2:	f105 0308 	add.w	r3, r5, #8
 80148e6:	181e      	adds	r6, r3, r0
 80148e8:	2108      	movs	r1, #8
 80148ea:	4630      	mov	r0, r6
 80148ec:	f7fa ff88 	bl	800f800 <ucdr_alignment>
 80148f0:	f100 0408 	add.w	r4, r0, #8
 80148f4:	4434      	add	r4, r6
 80148f6:	2108      	movs	r1, #8
 80148f8:	4620      	mov	r0, r4
 80148fa:	f7fa ff81 	bl	800f800 <ucdr_alignment>
 80148fe:	3008      	adds	r0, #8
 8014900:	4404      	add	r4, r0
 8014902:	2108      	movs	r1, #8
 8014904:	4620      	mov	r0, r4
 8014906:	f7fa ff7b 	bl	800f800 <ucdr_alignment>
 801490a:	f1c5 0508 	rsb	r5, r5, #8
 801490e:	4428      	add	r0, r5
 8014910:	4420      	add	r0, r4
 8014912:	bd70      	pop	{r4, r5, r6, pc}
 8014914:	4770      	bx	lr
 8014916:	bf00      	nop

08014918 <_Quaternion__cdr_deserialize>:
 8014918:	b538      	push	{r3, r4, r5, lr}
 801491a:	460c      	mov	r4, r1
 801491c:	b199      	cbz	r1, 8014946 <_Quaternion__cdr_deserialize+0x2e>
 801491e:	4605      	mov	r5, r0
 8014920:	f7fa fd82 	bl	800f428 <ucdr_deserialize_double>
 8014924:	f104 0108 	add.w	r1, r4, #8
 8014928:	4628      	mov	r0, r5
 801492a:	f7fa fd7d 	bl	800f428 <ucdr_deserialize_double>
 801492e:	f104 0110 	add.w	r1, r4, #16
 8014932:	4628      	mov	r0, r5
 8014934:	f7fa fd78 	bl	800f428 <ucdr_deserialize_double>
 8014938:	f104 0118 	add.w	r1, r4, #24
 801493c:	4628      	mov	r0, r5
 801493e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014942:	f7fa bd71 	b.w	800f428 <ucdr_deserialize_double>
 8014946:	4608      	mov	r0, r1
 8014948:	bd38      	pop	{r3, r4, r5, pc}
 801494a:	bf00      	nop

0801494c <_Quaternion__cdr_serialize>:
 801494c:	b1c0      	cbz	r0, 8014980 <_Quaternion__cdr_serialize+0x34>
 801494e:	b538      	push	{r3, r4, r5, lr}
 8014950:	ed90 0b00 	vldr	d0, [r0]
 8014954:	460d      	mov	r5, r1
 8014956:	4604      	mov	r4, r0
 8014958:	4608      	mov	r0, r1
 801495a:	f7fa fbc3 	bl	800f0e4 <ucdr_serialize_double>
 801495e:	ed94 0b02 	vldr	d0, [r4, #8]
 8014962:	4628      	mov	r0, r5
 8014964:	f7fa fbbe 	bl	800f0e4 <ucdr_serialize_double>
 8014968:	ed94 0b04 	vldr	d0, [r4, #16]
 801496c:	4628      	mov	r0, r5
 801496e:	f7fa fbb9 	bl	800f0e4 <ucdr_serialize_double>
 8014972:	ed94 0b06 	vldr	d0, [r4, #24]
 8014976:	4628      	mov	r0, r5
 8014978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801497c:	f7fa bbb2 	b.w	800f0e4 <ucdr_serialize_double>
 8014980:	4770      	bx	lr
 8014982:	bf00      	nop

08014984 <_Quaternion__get_serialized_size>:
 8014984:	b1d0      	cbz	r0, 80149bc <_Quaternion__get_serialized_size+0x38>
 8014986:	b538      	push	{r3, r4, r5, lr}
 8014988:	2108      	movs	r1, #8
 801498a:	2000      	movs	r0, #0
 801498c:	f7fa ff38 	bl	800f800 <ucdr_alignment>
 8014990:	f100 0508 	add.w	r5, r0, #8
 8014994:	2108      	movs	r1, #8
 8014996:	4628      	mov	r0, r5
 8014998:	f7fa ff32 	bl	800f800 <ucdr_alignment>
 801499c:	f100 0408 	add.w	r4, r0, #8
 80149a0:	442c      	add	r4, r5
 80149a2:	2108      	movs	r1, #8
 80149a4:	4620      	mov	r0, r4
 80149a6:	f7fa ff2b 	bl	800f800 <ucdr_alignment>
 80149aa:	3008      	adds	r0, #8
 80149ac:	4404      	add	r4, r0
 80149ae:	2108      	movs	r1, #8
 80149b0:	4620      	mov	r0, r4
 80149b2:	f7fa ff25 	bl	800f800 <ucdr_alignment>
 80149b6:	3008      	adds	r0, #8
 80149b8:	4420      	add	r0, r4
 80149ba:	bd38      	pop	{r3, r4, r5, pc}
 80149bc:	4770      	bx	lr
 80149be:	bf00      	nop

080149c0 <_Quaternion__max_serialized_size>:
 80149c0:	b538      	push	{r3, r4, r5, lr}
 80149c2:	2108      	movs	r1, #8
 80149c4:	2000      	movs	r0, #0
 80149c6:	f7fa ff1b 	bl	800f800 <ucdr_alignment>
 80149ca:	f100 0508 	add.w	r5, r0, #8
 80149ce:	2108      	movs	r1, #8
 80149d0:	4628      	mov	r0, r5
 80149d2:	f7fa ff15 	bl	800f800 <ucdr_alignment>
 80149d6:	f100 0408 	add.w	r4, r0, #8
 80149da:	442c      	add	r4, r5
 80149dc:	2108      	movs	r1, #8
 80149de:	4620      	mov	r0, r4
 80149e0:	f7fa ff0e 	bl	800f800 <ucdr_alignment>
 80149e4:	3008      	adds	r0, #8
 80149e6:	4404      	add	r4, r0
 80149e8:	2108      	movs	r1, #8
 80149ea:	4620      	mov	r0, r4
 80149ec:	f7fa ff08 	bl	800f800 <ucdr_alignment>
 80149f0:	3008      	adds	r0, #8
 80149f2:	4420      	add	r0, r4
 80149f4:	bd38      	pop	{r3, r4, r5, pc}
 80149f6:	bf00      	nop

080149f8 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 80149f8:	b570      	push	{r4, r5, r6, lr}
 80149fa:	2301      	movs	r3, #1
 80149fc:	460c      	mov	r4, r1
 80149fe:	7003      	strb	r3, [r0, #0]
 8014a00:	2108      	movs	r1, #8
 8014a02:	4620      	mov	r0, r4
 8014a04:	f7fa fefc 	bl	800f800 <ucdr_alignment>
 8014a08:	f104 0508 	add.w	r5, r4, #8
 8014a0c:	1946      	adds	r6, r0, r5
 8014a0e:	2108      	movs	r1, #8
 8014a10:	4630      	mov	r0, r6
 8014a12:	f7fa fef5 	bl	800f800 <ucdr_alignment>
 8014a16:	f100 0508 	add.w	r5, r0, #8
 8014a1a:	4435      	add	r5, r6
 8014a1c:	2108      	movs	r1, #8
 8014a1e:	4628      	mov	r0, r5
 8014a20:	f7fa feee 	bl	800f800 <ucdr_alignment>
 8014a24:	3008      	adds	r0, #8
 8014a26:	4405      	add	r5, r0
 8014a28:	2108      	movs	r1, #8
 8014a2a:	4628      	mov	r0, r5
 8014a2c:	f7fa fee8 	bl	800f800 <ucdr_alignment>
 8014a30:	f1c4 0408 	rsb	r4, r4, #8
 8014a34:	4420      	add	r0, r4
 8014a36:	4428      	add	r0, r5
 8014a38:	bd70      	pop	{r4, r5, r6, pc}
 8014a3a:	bf00      	nop

08014a3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8014a3c:	4800      	ldr	r0, [pc, #0]	@ (8014a40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8014a3e:	4770      	bx	lr
 8014a40:	20000d9c 	.word	0x20000d9c

08014a44 <imu_interfaces__srv__ImuCalibration_Request__init>:
 8014a44:	b538      	push	{r3, r4, r5, lr}
 8014a46:	4604      	mov	r4, r0
 8014a48:	b128      	cbz	r0, 8014a56 <imu_interfaces__srv__ImuCalibration_Request__init+0x12>
 8014a4a:	f007 fad7 	bl	801bffc <sensor_msgs__msg__Imu__init>
 8014a4e:	4605      	mov	r5, r0
 8014a50:	b120      	cbz	r0, 8014a5c <imu_interfaces__srv__ImuCalibration_Request__init+0x18>
 8014a52:	4628      	mov	r0, r5
 8014a54:	bd38      	pop	{r3, r4, r5, pc}
 8014a56:	4605      	mov	r5, r0
 8014a58:	4628      	mov	r0, r5
 8014a5a:	bd38      	pop	{r3, r4, r5, pc}
 8014a5c:	4620      	mov	r0, r4
 8014a5e:	f007 fb23 	bl	801c0a8 <sensor_msgs__msg__Imu__fini>
 8014a62:	4628      	mov	r0, r5
 8014a64:	bd38      	pop	{r3, r4, r5, pc}
 8014a66:	bf00      	nop

08014a68 <imu_interfaces__srv__ImuCalibration_Request__fini>:
 8014a68:	b108      	cbz	r0, 8014a6e <imu_interfaces__srv__ImuCalibration_Request__fini+0x6>
 8014a6a:	f007 bb1d 	b.w	801c0a8 <sensor_msgs__msg__Imu__fini>
 8014a6e:	4770      	bx	lr

08014a70 <imu_interfaces__srv__ImuCalibration_Response__init>:
 8014a70:	3800      	subs	r0, #0
 8014a72:	bf18      	it	ne
 8014a74:	2001      	movne	r0, #1
 8014a76:	4770      	bx	lr

08014a78 <imu_interfaces__srv__ImuCalibration_Response__fini>:
 8014a78:	4770      	bx	lr
 8014a7a:	bf00      	nop

08014a7c <ucdr_serialize_endian_array_char>:
 8014a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a80:	4619      	mov	r1, r3
 8014a82:	461f      	mov	r7, r3
 8014a84:	4605      	mov	r5, r0
 8014a86:	4690      	mov	r8, r2
 8014a88:	f7fa fe62 	bl	800f750 <ucdr_check_buffer_available_for>
 8014a8c:	b9e0      	cbnz	r0, 8014ac8 <ucdr_serialize_endian_array_char+0x4c>
 8014a8e:	463e      	mov	r6, r7
 8014a90:	e009      	b.n	8014aa6 <ucdr_serialize_endian_array_char+0x2a>
 8014a92:	68a8      	ldr	r0, [r5, #8]
 8014a94:	f008 ff0d 	bl	801d8b2 <memcpy>
 8014a98:	68ab      	ldr	r3, [r5, #8]
 8014a9a:	6928      	ldr	r0, [r5, #16]
 8014a9c:	4423      	add	r3, r4
 8014a9e:	4420      	add	r0, r4
 8014aa0:	1b36      	subs	r6, r6, r4
 8014aa2:	60ab      	str	r3, [r5, #8]
 8014aa4:	6128      	str	r0, [r5, #16]
 8014aa6:	4631      	mov	r1, r6
 8014aa8:	2201      	movs	r2, #1
 8014aaa:	4628      	mov	r0, r5
 8014aac:	f7fa fed8 	bl	800f860 <ucdr_check_final_buffer_behavior_array>
 8014ab0:	1bb9      	subs	r1, r7, r6
 8014ab2:	4441      	add	r1, r8
 8014ab4:	4604      	mov	r4, r0
 8014ab6:	4602      	mov	r2, r0
 8014ab8:	2800      	cmp	r0, #0
 8014aba:	d1ea      	bne.n	8014a92 <ucdr_serialize_endian_array_char+0x16>
 8014abc:	2301      	movs	r3, #1
 8014abe:	7da8      	ldrb	r0, [r5, #22]
 8014ac0:	756b      	strb	r3, [r5, #21]
 8014ac2:	4058      	eors	r0, r3
 8014ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ac8:	463a      	mov	r2, r7
 8014aca:	68a8      	ldr	r0, [r5, #8]
 8014acc:	4641      	mov	r1, r8
 8014ace:	f008 fef0 	bl	801d8b2 <memcpy>
 8014ad2:	68aa      	ldr	r2, [r5, #8]
 8014ad4:	692b      	ldr	r3, [r5, #16]
 8014ad6:	443a      	add	r2, r7
 8014ad8:	443b      	add	r3, r7
 8014ada:	60aa      	str	r2, [r5, #8]
 8014adc:	612b      	str	r3, [r5, #16]
 8014ade:	e7ed      	b.n	8014abc <ucdr_serialize_endian_array_char+0x40>

08014ae0 <ucdr_deserialize_endian_array_char>:
 8014ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ae4:	4619      	mov	r1, r3
 8014ae6:	461f      	mov	r7, r3
 8014ae8:	4605      	mov	r5, r0
 8014aea:	4690      	mov	r8, r2
 8014aec:	f7fa fe30 	bl	800f750 <ucdr_check_buffer_available_for>
 8014af0:	b9e0      	cbnz	r0, 8014b2c <ucdr_deserialize_endian_array_char+0x4c>
 8014af2:	463e      	mov	r6, r7
 8014af4:	e009      	b.n	8014b0a <ucdr_deserialize_endian_array_char+0x2a>
 8014af6:	68a9      	ldr	r1, [r5, #8]
 8014af8:	f008 fedb 	bl	801d8b2 <memcpy>
 8014afc:	68ab      	ldr	r3, [r5, #8]
 8014afe:	6928      	ldr	r0, [r5, #16]
 8014b00:	4423      	add	r3, r4
 8014b02:	4420      	add	r0, r4
 8014b04:	1b36      	subs	r6, r6, r4
 8014b06:	60ab      	str	r3, [r5, #8]
 8014b08:	6128      	str	r0, [r5, #16]
 8014b0a:	2201      	movs	r2, #1
 8014b0c:	4631      	mov	r1, r6
 8014b0e:	4628      	mov	r0, r5
 8014b10:	f7fa fea6 	bl	800f860 <ucdr_check_final_buffer_behavior_array>
 8014b14:	4604      	mov	r4, r0
 8014b16:	1bb8      	subs	r0, r7, r6
 8014b18:	4440      	add	r0, r8
 8014b1a:	4622      	mov	r2, r4
 8014b1c:	2c00      	cmp	r4, #0
 8014b1e:	d1ea      	bne.n	8014af6 <ucdr_deserialize_endian_array_char+0x16>
 8014b20:	2301      	movs	r3, #1
 8014b22:	7da8      	ldrb	r0, [r5, #22]
 8014b24:	756b      	strb	r3, [r5, #21]
 8014b26:	4058      	eors	r0, r3
 8014b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b2c:	463a      	mov	r2, r7
 8014b2e:	68a9      	ldr	r1, [r5, #8]
 8014b30:	4640      	mov	r0, r8
 8014b32:	f008 febe 	bl	801d8b2 <memcpy>
 8014b36:	68aa      	ldr	r2, [r5, #8]
 8014b38:	692b      	ldr	r3, [r5, #16]
 8014b3a:	443a      	add	r2, r7
 8014b3c:	443b      	add	r3, r7
 8014b3e:	60aa      	str	r2, [r5, #8]
 8014b40:	612b      	str	r3, [r5, #16]
 8014b42:	e7ed      	b.n	8014b20 <ucdr_deserialize_endian_array_char+0x40>

08014b44 <ucdr_serialize_array_uint8_t>:
 8014b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b48:	4688      	mov	r8, r1
 8014b4a:	4611      	mov	r1, r2
 8014b4c:	4617      	mov	r7, r2
 8014b4e:	4605      	mov	r5, r0
 8014b50:	f7fa fdfe 	bl	800f750 <ucdr_check_buffer_available_for>
 8014b54:	b9e0      	cbnz	r0, 8014b90 <ucdr_serialize_array_uint8_t+0x4c>
 8014b56:	463e      	mov	r6, r7
 8014b58:	e009      	b.n	8014b6e <ucdr_serialize_array_uint8_t+0x2a>
 8014b5a:	68a8      	ldr	r0, [r5, #8]
 8014b5c:	f008 fea9 	bl	801d8b2 <memcpy>
 8014b60:	68aa      	ldr	r2, [r5, #8]
 8014b62:	692b      	ldr	r3, [r5, #16]
 8014b64:	4422      	add	r2, r4
 8014b66:	4423      	add	r3, r4
 8014b68:	1b36      	subs	r6, r6, r4
 8014b6a:	60aa      	str	r2, [r5, #8]
 8014b6c:	612b      	str	r3, [r5, #16]
 8014b6e:	4631      	mov	r1, r6
 8014b70:	2201      	movs	r2, #1
 8014b72:	4628      	mov	r0, r5
 8014b74:	f7fa fe74 	bl	800f860 <ucdr_check_final_buffer_behavior_array>
 8014b78:	1bb9      	subs	r1, r7, r6
 8014b7a:	4441      	add	r1, r8
 8014b7c:	4604      	mov	r4, r0
 8014b7e:	4602      	mov	r2, r0
 8014b80:	2800      	cmp	r0, #0
 8014b82:	d1ea      	bne.n	8014b5a <ucdr_serialize_array_uint8_t+0x16>
 8014b84:	2301      	movs	r3, #1
 8014b86:	7da8      	ldrb	r0, [r5, #22]
 8014b88:	756b      	strb	r3, [r5, #21]
 8014b8a:	4058      	eors	r0, r3
 8014b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b90:	463a      	mov	r2, r7
 8014b92:	68a8      	ldr	r0, [r5, #8]
 8014b94:	4641      	mov	r1, r8
 8014b96:	f008 fe8c 	bl	801d8b2 <memcpy>
 8014b9a:	68aa      	ldr	r2, [r5, #8]
 8014b9c:	692b      	ldr	r3, [r5, #16]
 8014b9e:	443a      	add	r2, r7
 8014ba0:	443b      	add	r3, r7
 8014ba2:	60aa      	str	r2, [r5, #8]
 8014ba4:	612b      	str	r3, [r5, #16]
 8014ba6:	e7ed      	b.n	8014b84 <ucdr_serialize_array_uint8_t+0x40>

08014ba8 <ucdr_serialize_endian_array_uint8_t>:
 8014ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bac:	4619      	mov	r1, r3
 8014bae:	461f      	mov	r7, r3
 8014bb0:	4605      	mov	r5, r0
 8014bb2:	4690      	mov	r8, r2
 8014bb4:	f7fa fdcc 	bl	800f750 <ucdr_check_buffer_available_for>
 8014bb8:	b9e0      	cbnz	r0, 8014bf4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8014bba:	463e      	mov	r6, r7
 8014bbc:	e009      	b.n	8014bd2 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8014bbe:	68a8      	ldr	r0, [r5, #8]
 8014bc0:	f008 fe77 	bl	801d8b2 <memcpy>
 8014bc4:	68ab      	ldr	r3, [r5, #8]
 8014bc6:	6928      	ldr	r0, [r5, #16]
 8014bc8:	4423      	add	r3, r4
 8014bca:	4420      	add	r0, r4
 8014bcc:	1b36      	subs	r6, r6, r4
 8014bce:	60ab      	str	r3, [r5, #8]
 8014bd0:	6128      	str	r0, [r5, #16]
 8014bd2:	4631      	mov	r1, r6
 8014bd4:	2201      	movs	r2, #1
 8014bd6:	4628      	mov	r0, r5
 8014bd8:	f7fa fe42 	bl	800f860 <ucdr_check_final_buffer_behavior_array>
 8014bdc:	1bb9      	subs	r1, r7, r6
 8014bde:	4441      	add	r1, r8
 8014be0:	4604      	mov	r4, r0
 8014be2:	4602      	mov	r2, r0
 8014be4:	2800      	cmp	r0, #0
 8014be6:	d1ea      	bne.n	8014bbe <ucdr_serialize_endian_array_uint8_t+0x16>
 8014be8:	2301      	movs	r3, #1
 8014bea:	7da8      	ldrb	r0, [r5, #22]
 8014bec:	756b      	strb	r3, [r5, #21]
 8014bee:	4058      	eors	r0, r3
 8014bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bf4:	463a      	mov	r2, r7
 8014bf6:	68a8      	ldr	r0, [r5, #8]
 8014bf8:	4641      	mov	r1, r8
 8014bfa:	f008 fe5a 	bl	801d8b2 <memcpy>
 8014bfe:	68aa      	ldr	r2, [r5, #8]
 8014c00:	692b      	ldr	r3, [r5, #16]
 8014c02:	443a      	add	r2, r7
 8014c04:	443b      	add	r3, r7
 8014c06:	60aa      	str	r2, [r5, #8]
 8014c08:	612b      	str	r3, [r5, #16]
 8014c0a:	e7ed      	b.n	8014be8 <ucdr_serialize_endian_array_uint8_t+0x40>

08014c0c <ucdr_deserialize_array_uint8_t>:
 8014c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c10:	4688      	mov	r8, r1
 8014c12:	4611      	mov	r1, r2
 8014c14:	4617      	mov	r7, r2
 8014c16:	4605      	mov	r5, r0
 8014c18:	f7fa fd9a 	bl	800f750 <ucdr_check_buffer_available_for>
 8014c1c:	b9e0      	cbnz	r0, 8014c58 <ucdr_deserialize_array_uint8_t+0x4c>
 8014c1e:	463e      	mov	r6, r7
 8014c20:	e009      	b.n	8014c36 <ucdr_deserialize_array_uint8_t+0x2a>
 8014c22:	68a9      	ldr	r1, [r5, #8]
 8014c24:	f008 fe45 	bl	801d8b2 <memcpy>
 8014c28:	68aa      	ldr	r2, [r5, #8]
 8014c2a:	692b      	ldr	r3, [r5, #16]
 8014c2c:	4422      	add	r2, r4
 8014c2e:	4423      	add	r3, r4
 8014c30:	1b36      	subs	r6, r6, r4
 8014c32:	60aa      	str	r2, [r5, #8]
 8014c34:	612b      	str	r3, [r5, #16]
 8014c36:	2201      	movs	r2, #1
 8014c38:	4631      	mov	r1, r6
 8014c3a:	4628      	mov	r0, r5
 8014c3c:	f7fa fe10 	bl	800f860 <ucdr_check_final_buffer_behavior_array>
 8014c40:	4604      	mov	r4, r0
 8014c42:	1bb8      	subs	r0, r7, r6
 8014c44:	4440      	add	r0, r8
 8014c46:	4622      	mov	r2, r4
 8014c48:	2c00      	cmp	r4, #0
 8014c4a:	d1ea      	bne.n	8014c22 <ucdr_deserialize_array_uint8_t+0x16>
 8014c4c:	2301      	movs	r3, #1
 8014c4e:	7da8      	ldrb	r0, [r5, #22]
 8014c50:	756b      	strb	r3, [r5, #21]
 8014c52:	4058      	eors	r0, r3
 8014c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c58:	463a      	mov	r2, r7
 8014c5a:	68a9      	ldr	r1, [r5, #8]
 8014c5c:	4640      	mov	r0, r8
 8014c5e:	f008 fe28 	bl	801d8b2 <memcpy>
 8014c62:	68aa      	ldr	r2, [r5, #8]
 8014c64:	692b      	ldr	r3, [r5, #16]
 8014c66:	443a      	add	r2, r7
 8014c68:	443b      	add	r3, r7
 8014c6a:	60aa      	str	r2, [r5, #8]
 8014c6c:	612b      	str	r3, [r5, #16]
 8014c6e:	e7ed      	b.n	8014c4c <ucdr_deserialize_array_uint8_t+0x40>

08014c70 <ucdr_deserialize_endian_array_uint8_t>:
 8014c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c74:	4619      	mov	r1, r3
 8014c76:	461f      	mov	r7, r3
 8014c78:	4605      	mov	r5, r0
 8014c7a:	4690      	mov	r8, r2
 8014c7c:	f7fa fd68 	bl	800f750 <ucdr_check_buffer_available_for>
 8014c80:	b9e0      	cbnz	r0, 8014cbc <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8014c82:	463e      	mov	r6, r7
 8014c84:	e009      	b.n	8014c9a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8014c86:	68a9      	ldr	r1, [r5, #8]
 8014c88:	f008 fe13 	bl	801d8b2 <memcpy>
 8014c8c:	68ab      	ldr	r3, [r5, #8]
 8014c8e:	6928      	ldr	r0, [r5, #16]
 8014c90:	4423      	add	r3, r4
 8014c92:	4420      	add	r0, r4
 8014c94:	1b36      	subs	r6, r6, r4
 8014c96:	60ab      	str	r3, [r5, #8]
 8014c98:	6128      	str	r0, [r5, #16]
 8014c9a:	2201      	movs	r2, #1
 8014c9c:	4631      	mov	r1, r6
 8014c9e:	4628      	mov	r0, r5
 8014ca0:	f7fa fdde 	bl	800f860 <ucdr_check_final_buffer_behavior_array>
 8014ca4:	4604      	mov	r4, r0
 8014ca6:	1bb8      	subs	r0, r7, r6
 8014ca8:	4440      	add	r0, r8
 8014caa:	4622      	mov	r2, r4
 8014cac:	2c00      	cmp	r4, #0
 8014cae:	d1ea      	bne.n	8014c86 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8014cb0:	2301      	movs	r3, #1
 8014cb2:	7da8      	ldrb	r0, [r5, #22]
 8014cb4:	756b      	strb	r3, [r5, #21]
 8014cb6:	4058      	eors	r0, r3
 8014cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cbc:	463a      	mov	r2, r7
 8014cbe:	68a9      	ldr	r1, [r5, #8]
 8014cc0:	4640      	mov	r0, r8
 8014cc2:	f008 fdf6 	bl	801d8b2 <memcpy>
 8014cc6:	68aa      	ldr	r2, [r5, #8]
 8014cc8:	692b      	ldr	r3, [r5, #16]
 8014cca:	443a      	add	r2, r7
 8014ccc:	443b      	add	r3, r7
 8014cce:	60aa      	str	r2, [r5, #8]
 8014cd0:	612b      	str	r3, [r5, #16]
 8014cd2:	e7ed      	b.n	8014cb0 <ucdr_deserialize_endian_array_uint8_t+0x40>

08014cd4 <ucdr_serialize_array_double>:
 8014cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cd8:	460e      	mov	r6, r1
 8014cda:	2108      	movs	r1, #8
 8014cdc:	4604      	mov	r4, r0
 8014cde:	4617      	mov	r7, r2
 8014ce0:	f7fa fd96 	bl	800f810 <ucdr_buffer_alignment>
 8014ce4:	4601      	mov	r1, r0
 8014ce6:	4620      	mov	r0, r4
 8014ce8:	7d65      	ldrb	r5, [r4, #21]
 8014cea:	f7fa fdd5 	bl	800f898 <ucdr_advance_buffer>
 8014cee:	7d21      	ldrb	r1, [r4, #20]
 8014cf0:	7565      	strb	r5, [r4, #21]
 8014cf2:	2901      	cmp	r1, #1
 8014cf4:	d010      	beq.n	8014d18 <ucdr_serialize_array_double+0x44>
 8014cf6:	b157      	cbz	r7, 8014d0e <ucdr_serialize_array_double+0x3a>
 8014cf8:	2500      	movs	r5, #0
 8014cfa:	e000      	b.n	8014cfe <ucdr_serialize_array_double+0x2a>
 8014cfc:	7d21      	ldrb	r1, [r4, #20]
 8014cfe:	ecb6 0b02 	vldmia	r6!, {d0}
 8014d02:	4620      	mov	r0, r4
 8014d04:	3501      	adds	r5, #1
 8014d06:	f7fa fabd 	bl	800f284 <ucdr_serialize_endian_double>
 8014d0a:	42af      	cmp	r7, r5
 8014d0c:	d1f6      	bne.n	8014cfc <ucdr_serialize_array_double+0x28>
 8014d0e:	7da0      	ldrb	r0, [r4, #22]
 8014d10:	f080 0001 	eor.w	r0, r0, #1
 8014d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d18:	00ff      	lsls	r7, r7, #3
 8014d1a:	4639      	mov	r1, r7
 8014d1c:	4620      	mov	r0, r4
 8014d1e:	f7fa fd17 	bl	800f750 <ucdr_check_buffer_available_for>
 8014d22:	b9f8      	cbnz	r0, 8014d64 <ucdr_serialize_array_double+0x90>
 8014d24:	46b8      	mov	r8, r7
 8014d26:	e00a      	b.n	8014d3e <ucdr_serialize_array_double+0x6a>
 8014d28:	68a0      	ldr	r0, [r4, #8]
 8014d2a:	f008 fdc2 	bl	801d8b2 <memcpy>
 8014d2e:	68a2      	ldr	r2, [r4, #8]
 8014d30:	6923      	ldr	r3, [r4, #16]
 8014d32:	442a      	add	r2, r5
 8014d34:	442b      	add	r3, r5
 8014d36:	eba8 0805 	sub.w	r8, r8, r5
 8014d3a:	60a2      	str	r2, [r4, #8]
 8014d3c:	6123      	str	r3, [r4, #16]
 8014d3e:	4641      	mov	r1, r8
 8014d40:	2208      	movs	r2, #8
 8014d42:	4620      	mov	r0, r4
 8014d44:	f7fa fd8c 	bl	800f860 <ucdr_check_final_buffer_behavior_array>
 8014d48:	eba7 0108 	sub.w	r1, r7, r8
 8014d4c:	4431      	add	r1, r6
 8014d4e:	4605      	mov	r5, r0
 8014d50:	4602      	mov	r2, r0
 8014d52:	2800      	cmp	r0, #0
 8014d54:	d1e8      	bne.n	8014d28 <ucdr_serialize_array_double+0x54>
 8014d56:	7da0      	ldrb	r0, [r4, #22]
 8014d58:	2308      	movs	r3, #8
 8014d5a:	7563      	strb	r3, [r4, #21]
 8014d5c:	f080 0001 	eor.w	r0, r0, #1
 8014d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d64:	463a      	mov	r2, r7
 8014d66:	68a0      	ldr	r0, [r4, #8]
 8014d68:	4631      	mov	r1, r6
 8014d6a:	f008 fda2 	bl	801d8b2 <memcpy>
 8014d6e:	68a2      	ldr	r2, [r4, #8]
 8014d70:	6923      	ldr	r3, [r4, #16]
 8014d72:	443a      	add	r2, r7
 8014d74:	441f      	add	r7, r3
 8014d76:	60a2      	str	r2, [r4, #8]
 8014d78:	6127      	str	r7, [r4, #16]
 8014d7a:	e7ec      	b.n	8014d56 <ucdr_serialize_array_double+0x82>

08014d7c <ucdr_deserialize_array_double>:
 8014d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d80:	460e      	mov	r6, r1
 8014d82:	2108      	movs	r1, #8
 8014d84:	4604      	mov	r4, r0
 8014d86:	4617      	mov	r7, r2
 8014d88:	f7fa fd42 	bl	800f810 <ucdr_buffer_alignment>
 8014d8c:	4601      	mov	r1, r0
 8014d8e:	4620      	mov	r0, r4
 8014d90:	7d65      	ldrb	r5, [r4, #21]
 8014d92:	f7fa fd81 	bl	800f898 <ucdr_advance_buffer>
 8014d96:	7d21      	ldrb	r1, [r4, #20]
 8014d98:	7565      	strb	r5, [r4, #21]
 8014d9a:	2901      	cmp	r1, #1
 8014d9c:	d011      	beq.n	8014dc2 <ucdr_deserialize_array_double+0x46>
 8014d9e:	b15f      	cbz	r7, 8014db8 <ucdr_deserialize_array_double+0x3c>
 8014da0:	2500      	movs	r5, #0
 8014da2:	e000      	b.n	8014da6 <ucdr_deserialize_array_double+0x2a>
 8014da4:	7d21      	ldrb	r1, [r4, #20]
 8014da6:	4632      	mov	r2, r6
 8014da8:	4620      	mov	r0, r4
 8014daa:	3501      	adds	r5, #1
 8014dac:	f7fa fc02 	bl	800f5b4 <ucdr_deserialize_endian_double>
 8014db0:	42af      	cmp	r7, r5
 8014db2:	f106 0608 	add.w	r6, r6, #8
 8014db6:	d1f5      	bne.n	8014da4 <ucdr_deserialize_array_double+0x28>
 8014db8:	7da0      	ldrb	r0, [r4, #22]
 8014dba:	f080 0001 	eor.w	r0, r0, #1
 8014dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dc2:	00ff      	lsls	r7, r7, #3
 8014dc4:	4639      	mov	r1, r7
 8014dc6:	4620      	mov	r0, r4
 8014dc8:	f7fa fcc2 	bl	800f750 <ucdr_check_buffer_available_for>
 8014dcc:	b9f8      	cbnz	r0, 8014e0e <ucdr_deserialize_array_double+0x92>
 8014dce:	46b8      	mov	r8, r7
 8014dd0:	e00a      	b.n	8014de8 <ucdr_deserialize_array_double+0x6c>
 8014dd2:	68a1      	ldr	r1, [r4, #8]
 8014dd4:	f008 fd6d 	bl	801d8b2 <memcpy>
 8014dd8:	68a2      	ldr	r2, [r4, #8]
 8014dda:	6923      	ldr	r3, [r4, #16]
 8014ddc:	442a      	add	r2, r5
 8014dde:	442b      	add	r3, r5
 8014de0:	eba8 0805 	sub.w	r8, r8, r5
 8014de4:	60a2      	str	r2, [r4, #8]
 8014de6:	6123      	str	r3, [r4, #16]
 8014de8:	2208      	movs	r2, #8
 8014dea:	4641      	mov	r1, r8
 8014dec:	4620      	mov	r0, r4
 8014dee:	f7fa fd37 	bl	800f860 <ucdr_check_final_buffer_behavior_array>
 8014df2:	4605      	mov	r5, r0
 8014df4:	eba7 0008 	sub.w	r0, r7, r8
 8014df8:	4430      	add	r0, r6
 8014dfa:	462a      	mov	r2, r5
 8014dfc:	2d00      	cmp	r5, #0
 8014dfe:	d1e8      	bne.n	8014dd2 <ucdr_deserialize_array_double+0x56>
 8014e00:	7da0      	ldrb	r0, [r4, #22]
 8014e02:	2308      	movs	r3, #8
 8014e04:	7563      	strb	r3, [r4, #21]
 8014e06:	f080 0001 	eor.w	r0, r0, #1
 8014e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e0e:	463a      	mov	r2, r7
 8014e10:	68a1      	ldr	r1, [r4, #8]
 8014e12:	4630      	mov	r0, r6
 8014e14:	f008 fd4d 	bl	801d8b2 <memcpy>
 8014e18:	68a2      	ldr	r2, [r4, #8]
 8014e1a:	6923      	ldr	r3, [r4, #16]
 8014e1c:	443a      	add	r2, r7
 8014e1e:	441f      	add	r7, r3
 8014e20:	60a2      	str	r2, [r4, #8]
 8014e22:	6127      	str	r7, [r4, #16]
 8014e24:	e7ec      	b.n	8014e00 <ucdr_deserialize_array_double+0x84>
 8014e26:	bf00      	nop

08014e28 <ucdr_serialize_sequence_char>:
 8014e28:	b570      	push	{r4, r5, r6, lr}
 8014e2a:	4615      	mov	r5, r2
 8014e2c:	460e      	mov	r6, r1
 8014e2e:	7d01      	ldrb	r1, [r0, #20]
 8014e30:	4604      	mov	r4, r0
 8014e32:	f7f9 fcad 	bl	800e790 <ucdr_serialize_endian_uint32_t>
 8014e36:	b90d      	cbnz	r5, 8014e3c <ucdr_serialize_sequence_char+0x14>
 8014e38:	2001      	movs	r0, #1
 8014e3a:	bd70      	pop	{r4, r5, r6, pc}
 8014e3c:	7d21      	ldrb	r1, [r4, #20]
 8014e3e:	462b      	mov	r3, r5
 8014e40:	4632      	mov	r2, r6
 8014e42:	4620      	mov	r0, r4
 8014e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e48:	f7ff be18 	b.w	8014a7c <ucdr_serialize_endian_array_char>

08014e4c <ucdr_deserialize_sequence_char>:
 8014e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e50:	461d      	mov	r5, r3
 8014e52:	4616      	mov	r6, r2
 8014e54:	460f      	mov	r7, r1
 8014e56:	461a      	mov	r2, r3
 8014e58:	7d01      	ldrb	r1, [r0, #20]
 8014e5a:	4604      	mov	r4, r0
 8014e5c:	f7f9 fdc0 	bl	800e9e0 <ucdr_deserialize_endian_uint32_t>
 8014e60:	682b      	ldr	r3, [r5, #0]
 8014e62:	429e      	cmp	r6, r3
 8014e64:	bf3c      	itt	cc
 8014e66:	2201      	movcc	r2, #1
 8014e68:	75a2      	strbcc	r2, [r4, #22]
 8014e6a:	b913      	cbnz	r3, 8014e72 <ucdr_deserialize_sequence_char+0x26>
 8014e6c:	2001      	movs	r0, #1
 8014e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e72:	7d21      	ldrb	r1, [r4, #20]
 8014e74:	463a      	mov	r2, r7
 8014e76:	4620      	mov	r0, r4
 8014e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e7c:	f7ff be30 	b.w	8014ae0 <ucdr_deserialize_endian_array_char>

08014e80 <ucdr_serialize_sequence_uint8_t>:
 8014e80:	b570      	push	{r4, r5, r6, lr}
 8014e82:	4615      	mov	r5, r2
 8014e84:	460e      	mov	r6, r1
 8014e86:	7d01      	ldrb	r1, [r0, #20]
 8014e88:	4604      	mov	r4, r0
 8014e8a:	f7f9 fc81 	bl	800e790 <ucdr_serialize_endian_uint32_t>
 8014e8e:	b90d      	cbnz	r5, 8014e94 <ucdr_serialize_sequence_uint8_t+0x14>
 8014e90:	2001      	movs	r0, #1
 8014e92:	bd70      	pop	{r4, r5, r6, pc}
 8014e94:	7d21      	ldrb	r1, [r4, #20]
 8014e96:	462b      	mov	r3, r5
 8014e98:	4632      	mov	r2, r6
 8014e9a:	4620      	mov	r0, r4
 8014e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ea0:	f7ff be82 	b.w	8014ba8 <ucdr_serialize_endian_array_uint8_t>

08014ea4 <ucdr_deserialize_sequence_uint8_t>:
 8014ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ea8:	461d      	mov	r5, r3
 8014eaa:	4616      	mov	r6, r2
 8014eac:	460f      	mov	r7, r1
 8014eae:	461a      	mov	r2, r3
 8014eb0:	7d01      	ldrb	r1, [r0, #20]
 8014eb2:	4604      	mov	r4, r0
 8014eb4:	f7f9 fd94 	bl	800e9e0 <ucdr_deserialize_endian_uint32_t>
 8014eb8:	682b      	ldr	r3, [r5, #0]
 8014eba:	429e      	cmp	r6, r3
 8014ebc:	bf3c      	itt	cc
 8014ebe:	2201      	movcc	r2, #1
 8014ec0:	75a2      	strbcc	r2, [r4, #22]
 8014ec2:	b913      	cbnz	r3, 8014eca <ucdr_deserialize_sequence_uint8_t+0x26>
 8014ec4:	2001      	movs	r0, #1
 8014ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eca:	7d21      	ldrb	r1, [r4, #20]
 8014ecc:	463a      	mov	r2, r7
 8014ece:	4620      	mov	r0, r4
 8014ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ed4:	f7ff becc 	b.w	8014c70 <ucdr_deserialize_endian_array_uint8_t>

08014ed8 <uxr_buffer_delete_entity>:
 8014ed8:	b510      	push	{r4, lr}
 8014eda:	2300      	movs	r3, #0
 8014edc:	b08e      	sub	sp, #56	@ 0x38
 8014ede:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014ee2:	2303      	movs	r3, #3
 8014ee4:	9300      	str	r3, [sp, #0]
 8014ee6:	2204      	movs	r2, #4
 8014ee8:	ab06      	add	r3, sp, #24
 8014eea:	4604      	mov	r4, r0
 8014eec:	9103      	str	r1, [sp, #12]
 8014eee:	f001 fb79 	bl	80165e4 <uxr_prepare_stream_to_write_submessage>
 8014ef2:	b918      	cbnz	r0, 8014efc <uxr_buffer_delete_entity+0x24>
 8014ef4:	4604      	mov	r4, r0
 8014ef6:	4620      	mov	r0, r4
 8014ef8:	b00e      	add	sp, #56	@ 0x38
 8014efa:	bd10      	pop	{r4, pc}
 8014efc:	9902      	ldr	r1, [sp, #8]
 8014efe:	aa05      	add	r2, sp, #20
 8014f00:	4620      	mov	r0, r4
 8014f02:	f001 fca5 	bl	8016850 <uxr_init_base_object_request>
 8014f06:	a905      	add	r1, sp, #20
 8014f08:	4604      	mov	r4, r0
 8014f0a:	a806      	add	r0, sp, #24
 8014f0c:	f003 fb04 	bl	8018518 <uxr_serialize_DELETE_Payload>
 8014f10:	4620      	mov	r0, r4
 8014f12:	b00e      	add	sp, #56	@ 0x38
 8014f14:	bd10      	pop	{r4, pc}
 8014f16:	bf00      	nop

08014f18 <uxr_common_create_entity>:
 8014f18:	b510      	push	{r4, lr}
 8014f1a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014f1e:	b08c      	sub	sp, #48	@ 0x30
 8014f20:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8014f24:	f1bc 0f01 	cmp.w	ip, #1
 8014f28:	bf0c      	ite	eq
 8014f2a:	f003 0201 	andeq.w	r2, r3, #1
 8014f2e:	2200      	movne	r2, #0
 8014f30:	330e      	adds	r3, #14
 8014f32:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8014f36:	9101      	str	r1, [sp, #4]
 8014f38:	441a      	add	r2, r3
 8014f3a:	2301      	movs	r3, #1
 8014f3c:	9300      	str	r3, [sp, #0]
 8014f3e:	9903      	ldr	r1, [sp, #12]
 8014f40:	ab04      	add	r3, sp, #16
 8014f42:	b292      	uxth	r2, r2
 8014f44:	4604      	mov	r4, r0
 8014f46:	f001 fb4d 	bl	80165e4 <uxr_prepare_stream_to_write_submessage>
 8014f4a:	b918      	cbnz	r0, 8014f54 <uxr_common_create_entity+0x3c>
 8014f4c:	4604      	mov	r4, r0
 8014f4e:	4620      	mov	r0, r4
 8014f50:	b00c      	add	sp, #48	@ 0x30
 8014f52:	bd10      	pop	{r4, pc}
 8014f54:	9902      	ldr	r1, [sp, #8]
 8014f56:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014f58:	4620      	mov	r0, r4
 8014f5a:	f001 fc79 	bl	8016850 <uxr_init_base_object_request>
 8014f5e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8014f60:	4604      	mov	r4, r0
 8014f62:	a804      	add	r0, sp, #16
 8014f64:	f003 fa34 	bl	80183d0 <uxr_serialize_CREATE_Payload>
 8014f68:	4620      	mov	r0, r4
 8014f6a:	b00c      	add	sp, #48	@ 0x30
 8014f6c:	bd10      	pop	{r4, pc}
 8014f6e:	bf00      	nop

08014f70 <uxr_buffer_create_participant_bin>:
 8014f70:	b570      	push	{r4, r5, r6, lr}
 8014f72:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8014f76:	ac11      	add	r4, sp, #68	@ 0x44
 8014f78:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8014f7c:	2303      	movs	r3, #3
 8014f7e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8014f82:	7223      	strb	r3, [r4, #8]
 8014f84:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8014f86:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8014f8a:	2201      	movs	r2, #1
 8014f8c:	2100      	movs	r1, #0
 8014f8e:	4605      	mov	r5, r0
 8014f90:	7122      	strb	r2, [r4, #4]
 8014f92:	f88d 1014 	strb.w	r1, [sp, #20]
 8014f96:	b1cb      	cbz	r3, 8014fcc <uxr_buffer_create_participant_bin+0x5c>
 8014f98:	f88d 201c 	strb.w	r2, [sp, #28]
 8014f9c:	9308      	str	r3, [sp, #32]
 8014f9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014fa2:	a915      	add	r1, sp, #84	@ 0x54
 8014fa4:	a809      	add	r0, sp, #36	@ 0x24
 8014fa6:	f7fa fc27 	bl	800f7f8 <ucdr_init_buffer>
 8014faa:	a905      	add	r1, sp, #20
 8014fac:	a809      	add	r0, sp, #36	@ 0x24
 8014fae:	f002 fe75 	bl	8017c9c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8014fb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014fb4:	9600      	str	r6, [sp, #0]
 8014fb6:	9401      	str	r4, [sp, #4]
 8014fb8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014fbc:	60e3      	str	r3, [r4, #12]
 8014fbe:	4628      	mov	r0, r5
 8014fc0:	b29b      	uxth	r3, r3
 8014fc2:	f7ff ffa9 	bl	8014f18 <uxr_common_create_entity>
 8014fc6:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8014fca:	bd70      	pop	{r4, r5, r6, pc}
 8014fcc:	f88d 301c 	strb.w	r3, [sp, #28]
 8014fd0:	e7e5      	b.n	8014f9e <uxr_buffer_create_participant_bin+0x2e>
 8014fd2:	bf00      	nop

08014fd4 <uxr_buffer_create_topic_bin>:
 8014fd4:	b570      	push	{r4, r5, r6, lr}
 8014fd6:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8014fda:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8014fde:	9105      	str	r1, [sp, #20]
 8014fe0:	4605      	mov	r5, r0
 8014fe2:	a997      	add	r1, sp, #604	@ 0x25c
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	2302      	movs	r3, #2
 8014fe8:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8014fec:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8014ff0:	f000 fa24 	bl	801543c <uxr_object_id_to_raw>
 8014ff4:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8014ff6:	9306      	str	r3, [sp, #24]
 8014ff8:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8014ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8014ffc:	2303      	movs	r3, #3
 8014ffe:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8015002:	2301      	movs	r3, #1
 8015004:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015008:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801500c:	a917      	add	r1, sp, #92	@ 0x5c
 801500e:	2300      	movs	r3, #0
 8015010:	a80b      	add	r0, sp, #44	@ 0x2c
 8015012:	f88d 301c 	strb.w	r3, [sp, #28]
 8015016:	f7fa fbef 	bl	800f7f8 <ucdr_init_buffer>
 801501a:	a906      	add	r1, sp, #24
 801501c:	a80b      	add	r0, sp, #44	@ 0x2c
 801501e:	f002 fe5f 	bl	8017ce0 <uxr_serialize_OBJK_Topic_Binary>
 8015022:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015024:	9316      	str	r3, [sp, #88]	@ 0x58
 8015026:	ac13      	add	r4, sp, #76	@ 0x4c
 8015028:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801502c:	9600      	str	r6, [sp, #0]
 801502e:	9401      	str	r4, [sp, #4]
 8015030:	b29b      	uxth	r3, r3
 8015032:	4628      	mov	r0, r5
 8015034:	f7ff ff70 	bl	8014f18 <uxr_common_create_entity>
 8015038:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 801503c:	bd70      	pop	{r4, r5, r6, pc}
 801503e:	bf00      	nop

08015040 <uxr_buffer_create_publisher_bin>:
 8015040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015042:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8015046:	4605      	mov	r5, r0
 8015048:	9105      	str	r1, [sp, #20]
 801504a:	4618      	mov	r0, r3
 801504c:	2603      	movs	r6, #3
 801504e:	a992      	add	r1, sp, #584	@ 0x248
 8015050:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8015054:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8015058:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 801505c:	f000 f9ee 	bl	801543c <uxr_object_id_to_raw>
 8015060:	2300      	movs	r3, #0
 8015062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015066:	a912      	add	r1, sp, #72	@ 0x48
 8015068:	a806      	add	r0, sp, #24
 801506a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801506e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8015072:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8015076:	f7fa fbbf 	bl	800f7f8 <ucdr_init_buffer>
 801507a:	a993      	add	r1, sp, #588	@ 0x24c
 801507c:	a806      	add	r0, sp, #24
 801507e:	f002 fee3 	bl	8017e48 <uxr_serialize_OBJK_Publisher_Binary>
 8015082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015084:	9311      	str	r3, [sp, #68]	@ 0x44
 8015086:	ac0e      	add	r4, sp, #56	@ 0x38
 8015088:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801508c:	9700      	str	r7, [sp, #0]
 801508e:	9401      	str	r4, [sp, #4]
 8015090:	b29b      	uxth	r3, r3
 8015092:	4628      	mov	r0, r5
 8015094:	f7ff ff40 	bl	8014f18 <uxr_common_create_entity>
 8015098:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 801509c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801509e:	bf00      	nop

080150a0 <uxr_buffer_create_datawriter_bin>:
 80150a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150a4:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80150a8:	ac1d      	add	r4, sp, #116	@ 0x74
 80150aa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80150ae:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 80150b2:	9105      	str	r1, [sp, #20]
 80150b4:	4606      	mov	r6, r0
 80150b6:	a9a1      	add	r1, sp, #644	@ 0x284
 80150b8:	4618      	mov	r0, r3
 80150ba:	2305      	movs	r3, #5
 80150bc:	7123      	strb	r3, [r4, #4]
 80150be:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 80150c2:	2703      	movs	r7, #3
 80150c4:	f000 f9ba 	bl	801543c <uxr_object_id_to_raw>
 80150c8:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80150ca:	7227      	strb	r7, [r4, #8]
 80150cc:	a90e      	add	r1, sp, #56	@ 0x38
 80150ce:	f000 f9b5 	bl	801543c <uxr_object_id_to_raw>
 80150d2:	2300      	movs	r3, #0
 80150d4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80150d8:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 80150dc:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80150e0:	3d00      	subs	r5, #0
 80150e2:	bf18      	it	ne
 80150e4:	2501      	movne	r5, #1
 80150e6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80150ea:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80150ee:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80150f2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80150f6:	2301      	movs	r3, #1
 80150f8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80150fc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8015100:	bb8a      	cbnz	r2, 8015166 <uxr_buffer_create_datawriter_bin+0xc6>
 8015102:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8015106:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801510a:	f04f 0c13 	mov.w	ip, #19
 801510e:	250b      	movs	r5, #11
 8015110:	2221      	movs	r2, #33	@ 0x21
 8015112:	2111      	movs	r1, #17
 8015114:	2009      	movs	r0, #9
 8015116:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801511a:	b923      	cbnz	r3, 8015126 <uxr_buffer_create_datawriter_bin+0x86>
 801511c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8015120:	4672      	mov	r2, lr
 8015122:	4661      	mov	r1, ip
 8015124:	4628      	mov	r0, r5
 8015126:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801512a:	2b01      	cmp	r3, #1
 801512c:	d025      	beq.n	801517a <uxr_buffer_create_datawriter_bin+0xda>
 801512e:	2b03      	cmp	r3, #3
 8015130:	d029      	beq.n	8015186 <uxr_buffer_create_datawriter_bin+0xe6>
 8015132:	b32b      	cbz	r3, 8015180 <uxr_buffer_create_datawriter_bin+0xe0>
 8015134:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015138:	a921      	add	r1, sp, #132	@ 0x84
 801513a:	a806      	add	r0, sp, #24
 801513c:	f7fa fb5c 	bl	800f7f8 <ucdr_init_buffer>
 8015140:	a90e      	add	r1, sp, #56	@ 0x38
 8015142:	a806      	add	r0, sp, #24
 8015144:	f002 fef6 	bl	8017f34 <uxr_serialize_OBJK_DataWriter_Binary>
 8015148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801514a:	f8cd 8000 	str.w	r8, [sp]
 801514e:	9401      	str	r4, [sp, #4]
 8015150:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8015154:	60e3      	str	r3, [r4, #12]
 8015156:	4630      	mov	r0, r6
 8015158:	b29b      	uxth	r3, r3
 801515a:	f7ff fedd 	bl	8014f18 <uxr_common_create_entity>
 801515e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8015162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015166:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801516a:	f04f 0c12 	mov.w	ip, #18
 801516e:	250a      	movs	r5, #10
 8015170:	2220      	movs	r2, #32
 8015172:	2110      	movs	r1, #16
 8015174:	2008      	movs	r0, #8
 8015176:	2702      	movs	r7, #2
 8015178:	e7cd      	b.n	8015116 <uxr_buffer_create_datawriter_bin+0x76>
 801517a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801517e:	e7d9      	b.n	8015134 <uxr_buffer_create_datawriter_bin+0x94>
 8015180:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8015184:	e7d6      	b.n	8015134 <uxr_buffer_create_datawriter_bin+0x94>
 8015186:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801518a:	e7d3      	b.n	8015134 <uxr_buffer_create_datawriter_bin+0x94>

0801518c <uxr_buffer_create_requester_bin>:
 801518c:	b570      	push	{r4, r5, r6, lr}
 801518e:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8015192:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8015196:	9105      	str	r1, [sp, #20]
 8015198:	4605      	mov	r5, r0
 801519a:	a999      	add	r1, sp, #612	@ 0x264
 801519c:	4618      	mov	r0, r3
 801519e:	2307      	movs	r3, #7
 80151a0:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 80151a4:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 80151a8:	f000 f948 	bl	801543c <uxr_object_id_to_raw>
 80151ac:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 80151ae:	9306      	str	r3, [sp, #24]
 80151b0:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 80151b2:	9307      	str	r3, [sp, #28]
 80151b4:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 80151b6:	9308      	str	r3, [sp, #32]
 80151b8:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80151ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80151bc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80151be:	930a      	str	r3, [sp, #40]	@ 0x28
 80151c0:	2301      	movs	r3, #1
 80151c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80151c6:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80151ca:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80151ce:	a919      	add	r1, sp, #100	@ 0x64
 80151d0:	2303      	movs	r3, #3
 80151d2:	a80d      	add	r0, sp, #52	@ 0x34
 80151d4:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 80151d8:	f7fa fb0e 	bl	800f7f8 <ucdr_init_buffer>
 80151dc:	a906      	add	r1, sp, #24
 80151de:	a80d      	add	r0, sp, #52	@ 0x34
 80151e0:	f002 fed4 	bl	8017f8c <uxr_serialize_OBJK_Requester_Binary>
 80151e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80151e6:	9318      	str	r3, [sp, #96]	@ 0x60
 80151e8:	ac15      	add	r4, sp, #84	@ 0x54
 80151ea:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80151ee:	9600      	str	r6, [sp, #0]
 80151f0:	9401      	str	r4, [sp, #4]
 80151f2:	b29b      	uxth	r3, r3
 80151f4:	4628      	mov	r0, r5
 80151f6:	f7ff fe8f 	bl	8014f18 <uxr_common_create_entity>
 80151fa:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 80151fe:	bd70      	pop	{r4, r5, r6, pc}

08015200 <uxr_buffer_create_replier_bin>:
 8015200:	b570      	push	{r4, r5, r6, lr}
 8015202:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8015206:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801520a:	9105      	str	r1, [sp, #20]
 801520c:	4605      	mov	r5, r0
 801520e:	a999      	add	r1, sp, #612	@ 0x264
 8015210:	4618      	mov	r0, r3
 8015212:	2308      	movs	r3, #8
 8015214:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8015218:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 801521c:	f000 f90e 	bl	801543c <uxr_object_id_to_raw>
 8015220:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 8015222:	9306      	str	r3, [sp, #24]
 8015224:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8015226:	9307      	str	r3, [sp, #28]
 8015228:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 801522a:	9308      	str	r3, [sp, #32]
 801522c:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 801522e:	930c      	str	r3, [sp, #48]	@ 0x30
 8015230:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8015232:	930a      	str	r3, [sp, #40]	@ 0x28
 8015234:	2301      	movs	r3, #1
 8015236:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801523a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801523e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8015242:	a919      	add	r1, sp, #100	@ 0x64
 8015244:	2303      	movs	r3, #3
 8015246:	a80d      	add	r0, sp, #52	@ 0x34
 8015248:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 801524c:	f7fa fad4 	bl	800f7f8 <ucdr_init_buffer>
 8015250:	a906      	add	r1, sp, #24
 8015252:	a80d      	add	r0, sp, #52	@ 0x34
 8015254:	f002 fece 	bl	8017ff4 <uxr_serialize_OBJK_Replier_Binary>
 8015258:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801525a:	9318      	str	r3, [sp, #96]	@ 0x60
 801525c:	ac15      	add	r4, sp, #84	@ 0x54
 801525e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8015262:	9600      	str	r6, [sp, #0]
 8015264:	9401      	str	r4, [sp, #4]
 8015266:	b29b      	uxth	r3, r3
 8015268:	4628      	mov	r0, r5
 801526a:	f7ff fe55 	bl	8014f18 <uxr_common_create_entity>
 801526e:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8015272:	bd70      	pop	{r4, r5, r6, pc}

08015274 <get_custom_error>:
 8015274:	4b01      	ldr	r3, [pc, #4]	@ (801527c <get_custom_error+0x8>)
 8015276:	7818      	ldrb	r0, [r3, #0]
 8015278:	4770      	bx	lr
 801527a:	bf00      	nop
 801527c:	2000c3b4 	.word	0x2000c3b4

08015280 <recv_custom_msg>:
 8015280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015284:	4693      	mov	fp, r2
 8015286:	b089      	sub	sp, #36	@ 0x24
 8015288:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 801528c:	9305      	str	r3, [sp, #20]
 801528e:	468a      	mov	sl, r1
 8015290:	2100      	movs	r1, #0
 8015292:	4604      	mov	r4, r0
 8015294:	f88d 101e 	strb.w	r1, [sp, #30]
 8015298:	b322      	cbz	r2, 80152e4 <recv_custom_msg+0x64>
 801529a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801529e:	f10d 081f 	add.w	r8, sp, #31
 80152a2:	af05      	add	r7, sp, #20
 80152a4:	f10d 061e 	add.w	r6, sp, #30
 80152a8:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80152ac:	e002      	b.n	80152b4 <recv_custom_msg+0x34>
 80152ae:	9b05      	ldr	r3, [sp, #20]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	dd0f      	ble.n	80152d4 <recv_custom_msg+0x54>
 80152b4:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80152b8:	4623      	mov	r3, r4
 80152ba:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80152be:	e9cd 5600 	strd	r5, r6, [sp]
 80152c2:	4622      	mov	r2, r4
 80152c4:	4648      	mov	r0, r9
 80152c6:	f001 fcf1 	bl	8016cac <uxr_read_framed_msg>
 80152ca:	2800      	cmp	r0, #0
 80152cc:	d0ef      	beq.n	80152ae <recv_custom_msg+0x2e>
 80152ce:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80152d2:	b1b3      	cbz	r3, 8015302 <recv_custom_msg+0x82>
 80152d4:	4b0f      	ldr	r3, [pc, #60]	@ (8015314 <recv_custom_msg+0x94>)
 80152d6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80152da:	701a      	strb	r2, [r3, #0]
 80152dc:	2000      	movs	r0, #0
 80152de:	b009      	add	sp, #36	@ 0x24
 80152e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152e4:	f10d 021f 	add.w	r2, sp, #31
 80152e8:	9200      	str	r2, [sp, #0]
 80152ea:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80152ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80152f2:	4601      	mov	r1, r0
 80152f4:	47a8      	blx	r5
 80152f6:	2800      	cmp	r0, #0
 80152f8:	d0ec      	beq.n	80152d4 <recv_custom_msg+0x54>
 80152fa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d1e8      	bne.n	80152d4 <recv_custom_msg+0x54>
 8015302:	f8cb 0000 	str.w	r0, [fp]
 8015306:	2001      	movs	r0, #1
 8015308:	f8ca 4000 	str.w	r4, [sl]
 801530c:	b009      	add	sp, #36	@ 0x24
 801530e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015312:	bf00      	nop
 8015314:	2000c3b4 	.word	0x2000c3b4

08015318 <send_custom_msg>:
 8015318:	b530      	push	{r4, r5, lr}
 801531a:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801531e:	b087      	sub	sp, #28
 8015320:	4615      	mov	r5, r2
 8015322:	b974      	cbnz	r4, 8015342 <send_custom_msg+0x2a>
 8015324:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8015328:	f10d 0317 	add.w	r3, sp, #23
 801532c:	47a0      	blx	r4
 801532e:	b108      	cbz	r0, 8015334 <send_custom_msg+0x1c>
 8015330:	42a8      	cmp	r0, r5
 8015332:	d015      	beq.n	8015360 <send_custom_msg+0x48>
 8015334:	4b0c      	ldr	r3, [pc, #48]	@ (8015368 <send_custom_msg+0x50>)
 8015336:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801533a:	701a      	strb	r2, [r3, #0]
 801533c:	2000      	movs	r0, #0
 801533e:	b007      	add	sp, #28
 8015340:	bd30      	pop	{r4, r5, pc}
 8015342:	460b      	mov	r3, r1
 8015344:	2200      	movs	r2, #0
 8015346:	f10d 0117 	add.w	r1, sp, #23
 801534a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801534e:	4602      	mov	r2, r0
 8015350:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8015354:	9500      	str	r5, [sp, #0]
 8015356:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801535a:	f001 faaf 	bl	80168bc <uxr_write_framed_msg>
 801535e:	e7e6      	b.n	801532e <send_custom_msg+0x16>
 8015360:	2001      	movs	r0, #1
 8015362:	b007      	add	sp, #28
 8015364:	bd30      	pop	{r4, r5, pc}
 8015366:	bf00      	nop
 8015368:	2000c3b4 	.word	0x2000c3b4

0801536c <uxr_set_custom_transport_callbacks>:
 801536c:	b410      	push	{r4}
 801536e:	9c01      	ldr	r4, [sp, #4]
 8015370:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8015374:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8015378:	9b02      	ldr	r3, [sp, #8]
 801537a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801537e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015382:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8015386:	4770      	bx	lr

08015388 <uxr_init_custom_transport>:
 8015388:	b538      	push	{r3, r4, r5, lr}
 801538a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801538e:	b303      	cbz	r3, 80153d2 <uxr_init_custom_transport+0x4a>
 8015390:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8015394:	4604      	mov	r4, r0
 8015396:	b1e2      	cbz	r2, 80153d2 <uxr_init_custom_transport+0x4a>
 8015398:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 801539c:	b1ca      	cbz	r2, 80153d2 <uxr_init_custom_transport+0x4a>
 801539e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80153a2:	b1b2      	cbz	r2, 80153d2 <uxr_init_custom_transport+0x4a>
 80153a4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80153a8:	4798      	blx	r3
 80153aa:	4605      	mov	r5, r0
 80153ac:	b188      	cbz	r0, 80153d2 <uxr_init_custom_transport+0x4a>
 80153ae:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80153b2:	b98b      	cbnz	r3, 80153d8 <uxr_init_custom_transport+0x50>
 80153b4:	490b      	ldr	r1, [pc, #44]	@ (80153e4 <uxr_init_custom_transport+0x5c>)
 80153b6:	4b0c      	ldr	r3, [pc, #48]	@ (80153e8 <uxr_init_custom_transport+0x60>)
 80153b8:	4a0c      	ldr	r2, [pc, #48]	@ (80153ec <uxr_init_custom_transport+0x64>)
 80153ba:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80153be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80153c2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80153c6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80153ca:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80153ce:	4628      	mov	r0, r5
 80153d0:	bd38      	pop	{r3, r4, r5, pc}
 80153d2:	2500      	movs	r5, #0
 80153d4:	4628      	mov	r0, r5
 80153d6:	bd38      	pop	{r3, r4, r5, pc}
 80153d8:	2100      	movs	r1, #0
 80153da:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80153de:	f001 fa67 	bl	80168b0 <uxr_init_framing_io>
 80153e2:	e7e7      	b.n	80153b4 <uxr_init_custom_transport+0x2c>
 80153e4:	08015319 	.word	0x08015319
 80153e8:	08015281 	.word	0x08015281
 80153ec:	08015275 	.word	0x08015275

080153f0 <uxr_close_custom_transport>:
 80153f0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80153f4:	4718      	bx	r3
 80153f6:	bf00      	nop

080153f8 <uxr_object_id>:
 80153f8:	b082      	sub	sp, #8
 80153fa:	2300      	movs	r3, #0
 80153fc:	f88d 1006 	strb.w	r1, [sp, #6]
 8015400:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015404:	f360 030f 	bfi	r3, r0, #0, #16
 8015408:	f362 431f 	bfi	r3, r2, #16, #16
 801540c:	4618      	mov	r0, r3
 801540e:	b002      	add	sp, #8
 8015410:	4770      	bx	lr
 8015412:	bf00      	nop

08015414 <uxr_object_id_from_raw>:
 8015414:	7843      	ldrb	r3, [r0, #1]
 8015416:	7801      	ldrb	r1, [r0, #0]
 8015418:	b082      	sub	sp, #8
 801541a:	f003 020f 	and.w	r2, r3, #15
 801541e:	f88d 2006 	strb.w	r2, [sp, #6]
 8015422:	091b      	lsrs	r3, r3, #4
 8015424:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015428:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801542c:	2000      	movs	r0, #0
 801542e:	f363 000f 	bfi	r0, r3, #0, #16
 8015432:	f362 401f 	bfi	r0, r2, #16, #16
 8015436:	b002      	add	sp, #8
 8015438:	4770      	bx	lr
 801543a:	bf00      	nop

0801543c <uxr_object_id_to_raw>:
 801543c:	4602      	mov	r2, r0
 801543e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8015442:	b082      	sub	sp, #8
 8015444:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8015448:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801544c:	f881 c000 	strb.w	ip, [r1]
 8015450:	7048      	strb	r0, [r1, #1]
 8015452:	b002      	add	sp, #8
 8015454:	4770      	bx	lr
 8015456:	bf00      	nop

08015458 <uxr_buffer_request_data>:
 8015458:	b530      	push	{r4, r5, lr}
 801545a:	b095      	sub	sp, #84	@ 0x54
 801545c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8015460:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8015462:	9303      	str	r3, [sp, #12]
 8015464:	2200      	movs	r2, #0
 8015466:	2d00      	cmp	r5, #0
 8015468:	bf14      	ite	ne
 801546a:	2101      	movne	r1, #1
 801546c:	4611      	moveq	r1, r2
 801546e:	4604      	mov	r4, r0
 8015470:	f88d 301c 	strb.w	r3, [sp, #28]
 8015474:	f88d 201d 	strb.w	r2, [sp, #29]
 8015478:	f88d 201e 	strb.w	r2, [sp, #30]
 801547c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8015480:	d021      	beq.n	80154c6 <uxr_buffer_request_data+0x6e>
 8015482:	682a      	ldr	r2, [r5, #0]
 8015484:	686b      	ldr	r3, [r5, #4]
 8015486:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801548a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801548e:	2210      	movs	r2, #16
 8015490:	2308      	movs	r3, #8
 8015492:	2100      	movs	r1, #0
 8015494:	e9cd 3100 	strd	r3, r1, [sp]
 8015498:	4620      	mov	r0, r4
 801549a:	9905      	ldr	r1, [sp, #20]
 801549c:	ab0c      	add	r3, sp, #48	@ 0x30
 801549e:	f001 f8a1 	bl	80165e4 <uxr_prepare_stream_to_write_submessage>
 80154a2:	b918      	cbnz	r0, 80154ac <uxr_buffer_request_data+0x54>
 80154a4:	4604      	mov	r4, r0
 80154a6:	4620      	mov	r0, r4
 80154a8:	b015      	add	sp, #84	@ 0x54
 80154aa:	bd30      	pop	{r4, r5, pc}
 80154ac:	9904      	ldr	r1, [sp, #16]
 80154ae:	aa06      	add	r2, sp, #24
 80154b0:	4620      	mov	r0, r4
 80154b2:	f001 f9cd 	bl	8016850 <uxr_init_base_object_request>
 80154b6:	a906      	add	r1, sp, #24
 80154b8:	4604      	mov	r4, r0
 80154ba:	a80c      	add	r0, sp, #48	@ 0x30
 80154bc:	f003 f8d6 	bl	801866c <uxr_serialize_READ_DATA_Payload>
 80154c0:	4620      	mov	r0, r4
 80154c2:	b015      	add	sp, #84	@ 0x54
 80154c4:	bd30      	pop	{r4, r5, pc}
 80154c6:	2208      	movs	r2, #8
 80154c8:	e7e2      	b.n	8015490 <uxr_buffer_request_data+0x38>
 80154ca:	bf00      	nop

080154cc <uxr_buffer_cancel_data>:
 80154cc:	b510      	push	{r4, lr}
 80154ce:	b094      	sub	sp, #80	@ 0x50
 80154d0:	2300      	movs	r3, #0
 80154d2:	9202      	str	r2, [sp, #8]
 80154d4:	9205      	str	r2, [sp, #20]
 80154d6:	9301      	str	r3, [sp, #4]
 80154d8:	2201      	movs	r2, #1
 80154da:	f8ad 301c 	strh.w	r3, [sp, #28]
 80154de:	f88d 301e 	strb.w	r3, [sp, #30]
 80154e2:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80154e6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80154ea:	2308      	movs	r3, #8
 80154ec:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80154f0:	9300      	str	r3, [sp, #0]
 80154f2:	2210      	movs	r2, #16
 80154f4:	ab0c      	add	r3, sp, #48	@ 0x30
 80154f6:	4604      	mov	r4, r0
 80154f8:	9103      	str	r1, [sp, #12]
 80154fa:	f001 f873 	bl	80165e4 <uxr_prepare_stream_to_write_submessage>
 80154fe:	b918      	cbnz	r0, 8015508 <uxr_buffer_cancel_data+0x3c>
 8015500:	4604      	mov	r4, r0
 8015502:	4620      	mov	r0, r4
 8015504:	b014      	add	sp, #80	@ 0x50
 8015506:	bd10      	pop	{r4, pc}
 8015508:	9905      	ldr	r1, [sp, #20]
 801550a:	aa06      	add	r2, sp, #24
 801550c:	4620      	mov	r0, r4
 801550e:	f001 f99f 	bl	8016850 <uxr_init_base_object_request>
 8015512:	a906      	add	r1, sp, #24
 8015514:	4604      	mov	r4, r0
 8015516:	a80c      	add	r0, sp, #48	@ 0x30
 8015518:	f003 f8a8 	bl	801866c <uxr_serialize_READ_DATA_Payload>
 801551c:	4620      	mov	r0, r4
 801551e:	b014      	add	sp, #80	@ 0x50
 8015520:	bd10      	pop	{r4, pc}
 8015522:	bf00      	nop

08015524 <read_submessage_format>:
 8015524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015528:	b095      	sub	sp, #84	@ 0x54
 801552a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 801552e:	b113      	cbz	r3, 8015536 <read_submessage_format+0x12>
 8015530:	b015      	add	sp, #84	@ 0x54
 8015532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015536:	460c      	mov	r4, r1
 8015538:	4615      	mov	r5, r2
 801553a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801553e:	4607      	mov	r7, r0
 8015540:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8015542:	9004      	str	r0, [sp, #16]
 8015544:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8015546:	9005      	str	r0, [sp, #20]
 8015548:	1a52      	subs	r2, r2, r1
 801554a:	a80c      	add	r0, sp, #48	@ 0x30
 801554c:	4699      	mov	r9, r3
 801554e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8015552:	f7fa f951 	bl	800f7f8 <ucdr_init_buffer>
 8015556:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801555a:	a80c      	add	r0, sp, #48	@ 0x30
 801555c:	f7fa f920 	bl	800f7a0 <ucdr_set_on_full_buffer_callback>
 8015560:	69e2      	ldr	r2, [r4, #28]
 8015562:	b19a      	cbz	r2, 801558c <read_submessage_format+0x68>
 8015564:	f1b8 0f07 	cmp.w	r8, #7
 8015568:	f882 9014 	strb.w	r9, [r2, #20]
 801556c:	d040      	beq.n	80155f0 <read_submessage_format+0xcc>
 801556e:	f1b8 0f08 	cmp.w	r8, #8
 8015572:	d02e      	beq.n	80155d2 <read_submessage_format+0xae>
 8015574:	f1b8 0f06 	cmp.w	r8, #6
 8015578:	d011      	beq.n	801559e <read_submessage_format+0x7a>
 801557a:	2301      	movs	r3, #1
 801557c:	7513      	strb	r3, [r2, #20]
 801557e:	4629      	mov	r1, r5
 8015580:	4620      	mov	r0, r4
 8015582:	f7fa f989 	bl	800f898 <ucdr_advance_buffer>
 8015586:	b015      	add	sp, #84	@ 0x54
 8015588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801558c:	f1b8 0f07 	cmp.w	r8, #7
 8015590:	d02e      	beq.n	80155f0 <read_submessage_format+0xcc>
 8015592:	f1b8 0f08 	cmp.w	r8, #8
 8015596:	d01c      	beq.n	80155d2 <read_submessage_format+0xae>
 8015598:	f1b8 0f06 	cmp.w	r8, #6
 801559c:	d1ef      	bne.n	801557e <read_submessage_format+0x5a>
 801559e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 80155a2:	f1b8 0f00 	cmp.w	r8, #0
 80155a6:	d011      	beq.n	80155cc <read_submessage_format+0xa8>
 80155a8:	ab0c      	add	r3, sp, #48	@ 0x30
 80155aa:	e9cd 3500 	strd	r3, r5, [sp]
 80155ae:	2306      	movs	r3, #6
 80155b0:	f88d 3016 	strb.w	r3, [sp, #22]
 80155b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80155b8:	9302      	str	r3, [sp, #8]
 80155ba:	4632      	mov	r2, r6
 80155bc:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80155c0:	4638      	mov	r0, r7
 80155c2:	47c0      	blx	r8
 80155c4:	2301      	movs	r3, #1
 80155c6:	69e2      	ldr	r2, [r4, #28]
 80155c8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80155cc:	2a00      	cmp	r2, #0
 80155ce:	d1d4      	bne.n	801557a <read_submessage_format+0x56>
 80155d0:	e7d5      	b.n	801557e <read_submessage_format+0x5a>
 80155d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d0f8      	beq.n	80155cc <read_submessage_format+0xa8>
 80155da:	a906      	add	r1, sp, #24
 80155dc:	a80c      	add	r0, sp, #48	@ 0x30
 80155de:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80155e2:	f003 f917 	bl	8018814 <uxr_deserialize_SampleIdentity>
 80155e6:	b9a0      	cbnz	r0, 8015612 <read_submessage_format+0xee>
 80155e8:	69e2      	ldr	r2, [r4, #28]
 80155ea:	2a00      	cmp	r2, #0
 80155ec:	d1c5      	bne.n	801557a <read_submessage_format+0x56>
 80155ee:	e7c6      	b.n	801557e <read_submessage_format+0x5a>
 80155f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80155f4:	b13b      	cbz	r3, 8015606 <read_submessage_format+0xe2>
 80155f6:	a906      	add	r1, sp, #24
 80155f8:	a80c      	add	r0, sp, #48	@ 0x30
 80155fa:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80155fe:	f002 fdcf 	bl	80181a0 <uxr_deserialize_BaseObjectRequest>
 8015602:	bb60      	cbnz	r0, 801565e <read_submessage_format+0x13a>
 8015604:	69e2      	ldr	r2, [r4, #28]
 8015606:	68a3      	ldr	r3, [r4, #8]
 8015608:	442b      	add	r3, r5
 801560a:	60a3      	str	r3, [r4, #8]
 801560c:	2a00      	cmp	r2, #0
 801560e:	d1b4      	bne.n	801557a <read_submessage_format+0x56>
 8015610:	e7b5      	b.n	801557e <read_submessage_format+0x5a>
 8015612:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8015616:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015618:	1a52      	subs	r2, r2, r1
 801561a:	eba8 0803 	sub.w	r8, r8, r3
 801561e:	a80c      	add	r0, sp, #48	@ 0x30
 8015620:	f7fa f8ea 	bl	800f7f8 <ucdr_init_buffer>
 8015624:	44a8      	add	r8, r5
 8015626:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801562a:	a80c      	add	r0, sp, #48	@ 0x30
 801562c:	f7fa f8b8 	bl	800f7a0 <ucdr_set_on_full_buffer_callback>
 8015630:	fa1f f888 	uxth.w	r8, r8
 8015634:	ab0c      	add	r3, sp, #48	@ 0x30
 8015636:	9300      	str	r3, [sp, #0]
 8015638:	f8cd 8004 	str.w	r8, [sp, #4]
 801563c:	2108      	movs	r1, #8
 801563e:	f88d 1016 	strb.w	r1, [sp, #22]
 8015642:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8015646:	9102      	str	r1, [sp, #8]
 8015648:	ab06      	add	r3, sp, #24
 801564a:	4632      	mov	r2, r6
 801564c:	9905      	ldr	r1, [sp, #20]
 801564e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8015652:	4638      	mov	r0, r7
 8015654:	47b0      	blx	r6
 8015656:	2301      	movs	r3, #1
 8015658:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801565c:	e7c4      	b.n	80155e8 <read_submessage_format+0xc4>
 801565e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8015662:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015664:	1a52      	subs	r2, r2, r1
 8015666:	a80c      	add	r0, sp, #48	@ 0x30
 8015668:	eba8 0803 	sub.w	r8, r8, r3
 801566c:	f7fa f8c4 	bl	800f7f8 <ucdr_init_buffer>
 8015670:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015674:	a80c      	add	r0, sp, #48	@ 0x30
 8015676:	f7fa f893 	bl	800f7a0 <ucdr_set_on_full_buffer_callback>
 801567a:	ab0c      	add	r3, sp, #48	@ 0x30
 801567c:	9300      	str	r3, [sp, #0]
 801567e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8015682:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8015686:	44a8      	add	r8, r5
 8015688:	fa1f f888 	uxth.w	r8, r8
 801568c:	f8cd 8004 	str.w	r8, [sp, #4]
 8015690:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015694:	2107      	movs	r1, #7
 8015696:	f88d 1016 	strb.w	r1, [sp, #22]
 801569a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 801569e:	9102      	str	r1, [sp, #8]
 80156a0:	4632      	mov	r2, r6
 80156a2:	b29b      	uxth	r3, r3
 80156a4:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 80156a8:	9905      	ldr	r1, [sp, #20]
 80156aa:	4638      	mov	r0, r7
 80156ac:	47b0      	blx	r6
 80156ae:	2301      	movs	r3, #1
 80156b0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80156b4:	e7a6      	b.n	8015604 <read_submessage_format+0xe0>
 80156b6:	bf00      	nop

080156b8 <on_get_fragmentation_info>:
 80156b8:	b500      	push	{lr}
 80156ba:	b08b      	sub	sp, #44	@ 0x2c
 80156bc:	4601      	mov	r1, r0
 80156be:	2204      	movs	r2, #4
 80156c0:	a802      	add	r0, sp, #8
 80156c2:	f7fa f899 	bl	800f7f8 <ucdr_init_buffer>
 80156c6:	f10d 0305 	add.w	r3, sp, #5
 80156ca:	f10d 0206 	add.w	r2, sp, #6
 80156ce:	a901      	add	r1, sp, #4
 80156d0:	a802      	add	r0, sp, #8
 80156d2:	f001 fed1 	bl	8017478 <uxr_read_submessage_header>
 80156d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80156da:	2b0d      	cmp	r3, #13
 80156dc:	d003      	beq.n	80156e6 <on_get_fragmentation_info+0x2e>
 80156de:	2000      	movs	r0, #0
 80156e0:	b00b      	add	sp, #44	@ 0x2c
 80156e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80156e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80156ea:	f013 0f02 	tst.w	r3, #2
 80156ee:	bf14      	ite	ne
 80156f0:	2002      	movne	r0, #2
 80156f2:	2001      	moveq	r0, #1
 80156f4:	b00b      	add	sp, #44	@ 0x2c
 80156f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80156fa:	bf00      	nop

080156fc <read_submessage_get_info>:
 80156fc:	b570      	push	{r4, r5, r6, lr}
 80156fe:	2500      	movs	r5, #0
 8015700:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8015704:	4604      	mov	r4, r0
 8015706:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801570a:	460e      	mov	r6, r1
 801570c:	a810      	add	r0, sp, #64	@ 0x40
 801570e:	4629      	mov	r1, r5
 8015710:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8015714:	f008 f804 	bl	801d720 <memset>
 8015718:	a903      	add	r1, sp, #12
 801571a:	4630      	mov	r0, r6
 801571c:	f002 fee8 	bl	80184f0 <uxr_deserialize_GET_INFO_Payload>
 8015720:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8015724:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8015728:	4620      	mov	r0, r4
 801572a:	f001 f889 	bl	8016840 <uxr_session_header_offset>
 801572e:	462b      	mov	r3, r5
 8015730:	9000      	str	r0, [sp, #0]
 8015732:	220c      	movs	r2, #12
 8015734:	a905      	add	r1, sp, #20
 8015736:	a808      	add	r0, sp, #32
 8015738:	f7fa f84c 	bl	800f7d4 <ucdr_init_buffer_origin_offset>
 801573c:	a910      	add	r1, sp, #64	@ 0x40
 801573e:	a808      	add	r0, sp, #32
 8015740:	f002 ff48 	bl	80185d4 <uxr_serialize_INFO_Payload>
 8015744:	9b08      	ldr	r3, [sp, #32]
 8015746:	462a      	mov	r2, r5
 8015748:	4629      	mov	r1, r5
 801574a:	4620      	mov	r0, r4
 801574c:	f001 f822 	bl	8016794 <uxr_stamp_session_header>
 8015750:	a808      	add	r0, sp, #32
 8015752:	f7fa f87d 	bl	800f850 <ucdr_buffer_length>
 8015756:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015758:	4602      	mov	r2, r0
 801575a:	a905      	add	r1, sp, #20
 801575c:	e9d3 0400 	ldrd	r0, r4, [r3]
 8015760:	47a0      	blx	r4
 8015762:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8015766:	bd70      	pop	{r4, r5, r6, pc}

08015768 <write_submessage_acknack.isra.0>:
 8015768:	b570      	push	{r4, r5, r6, lr}
 801576a:	b092      	sub	sp, #72	@ 0x48
 801576c:	4605      	mov	r5, r0
 801576e:	460e      	mov	r6, r1
 8015770:	4614      	mov	r4, r2
 8015772:	f001 f865 	bl	8016840 <uxr_session_header_offset>
 8015776:	a905      	add	r1, sp, #20
 8015778:	9000      	str	r0, [sp, #0]
 801577a:	2300      	movs	r3, #0
 801577c:	a80a      	add	r0, sp, #40	@ 0x28
 801577e:	2211      	movs	r2, #17
 8015780:	f7fa f828 	bl	800f7d4 <ucdr_init_buffer_origin_offset>
 8015784:	2218      	movs	r2, #24
 8015786:	fb02 5404 	mla	r4, r2, r4, r5
 801578a:	2300      	movs	r3, #0
 801578c:	2205      	movs	r2, #5
 801578e:	3450      	adds	r4, #80	@ 0x50
 8015790:	210a      	movs	r1, #10
 8015792:	a80a      	add	r0, sp, #40	@ 0x28
 8015794:	f001 fe56 	bl	8017444 <uxr_buffer_submessage_header>
 8015798:	a903      	add	r1, sp, #12
 801579a:	4620      	mov	r0, r4
 801579c:	f006 fedc 	bl	801c558 <uxr_compute_acknack>
 80157a0:	ba40      	rev16	r0, r0
 80157a2:	f8ad 000e 	strh.w	r0, [sp, #14]
 80157a6:	a903      	add	r1, sp, #12
 80157a8:	a80a      	add	r0, sp, #40	@ 0x28
 80157aa:	f88d 6010 	strb.w	r6, [sp, #16]
 80157ae:	f002 ff81 	bl	80186b4 <uxr_serialize_ACKNACK_Payload>
 80157b2:	2200      	movs	r2, #0
 80157b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80157b6:	4611      	mov	r1, r2
 80157b8:	4628      	mov	r0, r5
 80157ba:	f000 ffeb 	bl	8016794 <uxr_stamp_session_header>
 80157be:	a80a      	add	r0, sp, #40	@ 0x28
 80157c0:	f7fa f846 	bl	800f850 <ucdr_buffer_length>
 80157c4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80157c6:	4602      	mov	r2, r0
 80157c8:	a905      	add	r1, sp, #20
 80157ca:	e9d3 0400 	ldrd	r0, r4, [r3]
 80157ce:	47a0      	blx	r4
 80157d0:	b012      	add	sp, #72	@ 0x48
 80157d2:	bd70      	pop	{r4, r5, r6, pc}
 80157d4:	0000      	movs	r0, r0
	...

080157d8 <uxr_init_session>:
 80157d8:	b510      	push	{r4, lr}
 80157da:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8015810 <uxr_init_session+0x38>
 80157de:	2300      	movs	r3, #0
 80157e0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80157e4:	4604      	mov	r4, r0
 80157e6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80157ea:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80157ee:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80157f2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80157f6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80157fa:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80157fe:	2181      	movs	r1, #129	@ 0x81
 8015800:	f000 ff34 	bl	801666c <uxr_init_session_info>
 8015804:	f104 0008 	add.w	r0, r4, #8
 8015808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801580c:	f001 bd36 	b.w	801727c <uxr_init_stream_storage>
	...

08015818 <uxr_set_status_callback>:
 8015818:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801581c:	4770      	bx	lr
 801581e:	bf00      	nop

08015820 <uxr_set_topic_callback>:
 8015820:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8015824:	4770      	bx	lr
 8015826:	bf00      	nop

08015828 <uxr_set_request_callback>:
 8015828:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801582c:	4770      	bx	lr
 801582e:	bf00      	nop

08015830 <uxr_set_reply_callback>:
 8015830:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8015834:	4770      	bx	lr
 8015836:	bf00      	nop

08015838 <uxr_create_output_best_effort_stream>:
 8015838:	b510      	push	{r4, lr}
 801583a:	b084      	sub	sp, #16
 801583c:	e9cd 2100 	strd	r2, r1, [sp]
 8015840:	4604      	mov	r4, r0
 8015842:	f000 fffd 	bl	8016840 <uxr_session_header_offset>
 8015846:	e9dd 2100 	ldrd	r2, r1, [sp]
 801584a:	4603      	mov	r3, r0
 801584c:	f104 0008 	add.w	r0, r4, #8
 8015850:	b004      	add	sp, #16
 8015852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015856:	f001 bd5b 	b.w	8017310 <uxr_add_output_best_effort_buffer>
 801585a:	bf00      	nop

0801585c <uxr_create_output_reliable_stream>:
 801585c:	b510      	push	{r4, lr}
 801585e:	b088      	sub	sp, #32
 8015860:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8015864:	4604      	mov	r4, r0
 8015866:	9303      	str	r3, [sp, #12]
 8015868:	f000 ffea 	bl	8016840 <uxr_session_header_offset>
 801586c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8015870:	9000      	str	r0, [sp, #0]
 8015872:	9905      	ldr	r1, [sp, #20]
 8015874:	f104 0008 	add.w	r0, r4, #8
 8015878:	f001 fd5e 	bl	8017338 <uxr_add_output_reliable_buffer>
 801587c:	2200      	movs	r2, #0
 801587e:	b2c3      	uxtb	r3, r0
 8015880:	f363 0207 	bfi	r2, r3, #0, #8
 8015884:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015888:	f363 220f 	bfi	r2, r3, #8, #8
 801588c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015890:	f363 4217 	bfi	r2, r3, #16, #8
 8015894:	0e03      	lsrs	r3, r0, #24
 8015896:	f363 621f 	bfi	r2, r3, #24, #8
 801589a:	4610      	mov	r0, r2
 801589c:	b008      	add	sp, #32
 801589e:	bd10      	pop	{r4, pc}

080158a0 <uxr_create_input_best_effort_stream>:
 80158a0:	b082      	sub	sp, #8
 80158a2:	3008      	adds	r0, #8
 80158a4:	b002      	add	sp, #8
 80158a6:	f001 bd61 	b.w	801736c <uxr_add_input_best_effort_buffer>
 80158aa:	bf00      	nop

080158ac <uxr_create_input_reliable_stream>:
 80158ac:	b510      	push	{r4, lr}
 80158ae:	b084      	sub	sp, #16
 80158b0:	4c0b      	ldr	r4, [pc, #44]	@ (80158e0 <uxr_create_input_reliable_stream+0x34>)
 80158b2:	9400      	str	r4, [sp, #0]
 80158b4:	3008      	adds	r0, #8
 80158b6:	f001 fd6f 	bl	8017398 <uxr_add_input_reliable_buffer>
 80158ba:	2200      	movs	r2, #0
 80158bc:	b2c3      	uxtb	r3, r0
 80158be:	f363 0207 	bfi	r2, r3, #0, #8
 80158c2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80158c6:	f363 220f 	bfi	r2, r3, #8, #8
 80158ca:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80158ce:	f363 4217 	bfi	r2, r3, #16, #8
 80158d2:	0e03      	lsrs	r3, r0, #24
 80158d4:	f363 621f 	bfi	r2, r3, #24, #8
 80158d8:	4610      	mov	r0, r2
 80158da:	b004      	add	sp, #16
 80158dc:	bd10      	pop	{r4, pc}
 80158de:	bf00      	nop
 80158e0:	080156b9 	.word	0x080156b9

080158e4 <uxr_epoch_millis>:
 80158e4:	b510      	push	{r4, lr}
 80158e6:	4604      	mov	r4, r0
 80158e8:	f001 fe0c 	bl	8017504 <uxr_nanos>
 80158ec:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 80158f0:	1ac0      	subs	r0, r0, r3
 80158f2:	4a04      	ldr	r2, [pc, #16]	@ (8015904 <uxr_epoch_millis+0x20>)
 80158f4:	f04f 0300 	mov.w	r3, #0
 80158f8:	eb61 0104 	sbc.w	r1, r1, r4
 80158fc:	f7eb f964 	bl	8000bc8 <__aeabi_ldivmod>
 8015900:	bd10      	pop	{r4, pc}
 8015902:	bf00      	nop
 8015904:	000f4240 	.word	0x000f4240

08015908 <uxr_epoch_nanos>:
 8015908:	b510      	push	{r4, lr}
 801590a:	4604      	mov	r4, r0
 801590c:	f001 fdfa 	bl	8017504 <uxr_nanos>
 8015910:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8015914:	1ac0      	subs	r0, r0, r3
 8015916:	eb61 0102 	sbc.w	r1, r1, r2
 801591a:	bd10      	pop	{r4, pc}

0801591c <uxr_flash_output_streams>:
 801591c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015920:	7e03      	ldrb	r3, [r0, #24]
 8015922:	b084      	sub	sp, #16
 8015924:	4604      	mov	r4, r0
 8015926:	2b00      	cmp	r3, #0
 8015928:	d035      	beq.n	8015996 <uxr_flash_output_streams+0x7a>
 801592a:	f04f 0900 	mov.w	r9, #0
 801592e:	4648      	mov	r0, r9
 8015930:	f10d 0802 	add.w	r8, sp, #2
 8015934:	af03      	add	r7, sp, #12
 8015936:	ae02      	add	r6, sp, #8
 8015938:	e006      	b.n	8015948 <uxr_flash_output_streams+0x2c>
 801593a:	7e23      	ldrb	r3, [r4, #24]
 801593c:	f109 0901 	add.w	r9, r9, #1
 8015940:	fa5f f089 	uxtb.w	r0, r9
 8015944:	4283      	cmp	r3, r0
 8015946:	d926      	bls.n	8015996 <uxr_flash_output_streams+0x7a>
 8015948:	2201      	movs	r2, #1
 801594a:	4611      	mov	r1, r2
 801594c:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8015950:	f001 fc40 	bl	80171d4 <uxr_stream_id>
 8015954:	3508      	adds	r5, #8
 8015956:	4684      	mov	ip, r0
 8015958:	4643      	mov	r3, r8
 801595a:	463a      	mov	r2, r7
 801595c:	4631      	mov	r1, r6
 801595e:	4628      	mov	r0, r5
 8015960:	f8cd c004 	str.w	ip, [sp, #4]
 8015964:	f006 fe7e 	bl	801c664 <uxr_prepare_best_effort_buffer_to_send>
 8015968:	2800      	cmp	r0, #0
 801596a:	d0e6      	beq.n	801593a <uxr_flash_output_streams+0x1e>
 801596c:	9b02      	ldr	r3, [sp, #8]
 801596e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8015972:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8015976:	4620      	mov	r0, r4
 8015978:	f000 ff0c 	bl	8016794 <uxr_stamp_session_header>
 801597c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801597e:	9a03      	ldr	r2, [sp, #12]
 8015980:	685d      	ldr	r5, [r3, #4]
 8015982:	6818      	ldr	r0, [r3, #0]
 8015984:	9902      	ldr	r1, [sp, #8]
 8015986:	47a8      	blx	r5
 8015988:	f109 0901 	add.w	r9, r9, #1
 801598c:	7e23      	ldrb	r3, [r4, #24]
 801598e:	fa5f f089 	uxtb.w	r0, r9
 8015992:	4283      	cmp	r3, r0
 8015994:	d8d8      	bhi.n	8015948 <uxr_flash_output_streams+0x2c>
 8015996:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801599a:	b38b      	cbz	r3, 8015a00 <uxr_flash_output_streams+0xe4>
 801599c:	f04f 0900 	mov.w	r9, #0
 80159a0:	f10d 0802 	add.w	r8, sp, #2
 80159a4:	af03      	add	r7, sp, #12
 80159a6:	ae02      	add	r6, sp, #8
 80159a8:	4648      	mov	r0, r9
 80159aa:	2201      	movs	r2, #1
 80159ac:	2102      	movs	r1, #2
 80159ae:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80159b2:	f001 fc0f 	bl	80171d4 <uxr_stream_id>
 80159b6:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80159ba:	3520      	adds	r5, #32
 80159bc:	9001      	str	r0, [sp, #4]
 80159be:	e00d      	b.n	80159dc <uxr_flash_output_streams+0xc0>
 80159c0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80159c4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80159c8:	9b02      	ldr	r3, [sp, #8]
 80159ca:	f000 fee3 	bl	8016794 <uxr_stamp_session_header>
 80159ce:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80159d0:	9a03      	ldr	r2, [sp, #12]
 80159d2:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80159d6:	9902      	ldr	r1, [sp, #8]
 80159d8:	6818      	ldr	r0, [r3, #0]
 80159da:	47d0      	blx	sl
 80159dc:	4643      	mov	r3, r8
 80159de:	463a      	mov	r2, r7
 80159e0:	4631      	mov	r1, r6
 80159e2:	4628      	mov	r0, r5
 80159e4:	f007 f85c 	bl	801caa0 <uxr_prepare_next_reliable_buffer_to_send>
 80159e8:	4603      	mov	r3, r0
 80159ea:	4620      	mov	r0, r4
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d1e7      	bne.n	80159c0 <uxr_flash_output_streams+0xa4>
 80159f0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80159f4:	f109 0901 	add.w	r9, r9, #1
 80159f8:	fa5f f089 	uxtb.w	r0, r9
 80159fc:	4283      	cmp	r3, r0
 80159fe:	d8d4      	bhi.n	80159aa <uxr_flash_output_streams+0x8e>
 8015a00:	b004      	add	sp, #16
 8015a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a06:	bf00      	nop

08015a08 <read_submessage_info>:
 8015a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a0c:	460d      	mov	r5, r1
 8015a0e:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8015a12:	4669      	mov	r1, sp
 8015a14:	4607      	mov	r7, r0
 8015a16:	4628      	mov	r0, r5
 8015a18:	f002 fc78 	bl	801830c <uxr_deserialize_BaseObjectReply>
 8015a1c:	a902      	add	r1, sp, #8
 8015a1e:	4604      	mov	r4, r0
 8015a20:	4628      	mov	r0, r5
 8015a22:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8015a26:	f7f8 fbed 	bl	800e204 <ucdr_deserialize_bool>
 8015a2a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8015a2e:	4004      	ands	r4, r0
 8015a30:	b2e4      	uxtb	r4, r4
 8015a32:	b95b      	cbnz	r3, 8015a4c <read_submessage_info+0x44>
 8015a34:	a987      	add	r1, sp, #540	@ 0x21c
 8015a36:	4628      	mov	r0, r5
 8015a38:	f7f8 fbe4 	bl	800e204 <ucdr_deserialize_bool>
 8015a3c:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8015a40:	4606      	mov	r6, r0
 8015a42:	b94b      	cbnz	r3, 8015a58 <read_submessage_info+0x50>
 8015a44:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8015a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a4c:	a903      	add	r1, sp, #12
 8015a4e:	4628      	mov	r0, r5
 8015a50:	f002 fb04 	bl	801805c <uxr_deserialize_ObjectVariant>
 8015a54:	4004      	ands	r4, r0
 8015a56:	e7ed      	b.n	8015a34 <read_submessage_info+0x2c>
 8015a58:	a988      	add	r1, sp, #544	@ 0x220
 8015a5a:	4628      	mov	r0, r5
 8015a5c:	f7f8 fc00 	bl	800e260 <ucdr_deserialize_uint8_t>
 8015a60:	4234      	tst	r4, r6
 8015a62:	d0ef      	beq.n	8015a44 <read_submessage_info+0x3c>
 8015a64:	2800      	cmp	r0, #0
 8015a66:	d0ed      	beq.n	8015a44 <read_submessage_info+0x3c>
 8015a68:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8015a6c:	2b0d      	cmp	r3, #13
 8015a6e:	d1e9      	bne.n	8015a44 <read_submessage_info+0x3c>
 8015a70:	a98a      	add	r1, sp, #552	@ 0x228
 8015a72:	4628      	mov	r0, r5
 8015a74:	f7f9 f99a 	bl	800edac <ucdr_deserialize_int16_t>
 8015a78:	b140      	cbz	r0, 8015a8c <read_submessage_info+0x84>
 8015a7a:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	dd07      	ble.n	8015a92 <read_submessage_info+0x8a>
 8015a82:	f1b8 0f00 	cmp.w	r8, #0
 8015a86:	bf14      	ite	ne
 8015a88:	2001      	movne	r0, #1
 8015a8a:	2002      	moveq	r0, #2
 8015a8c:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8015a90:	e7d8      	b.n	8015a44 <read_submessage_info+0x3c>
 8015a92:	2000      	movs	r0, #0
 8015a94:	e7fa      	b.n	8015a8c <read_submessage_info+0x84>
 8015a96:	bf00      	nop

08015a98 <read_submessage_list>:
 8015a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a9c:	b097      	sub	sp, #92	@ 0x5c
 8015a9e:	4ec1      	ldr	r6, [pc, #772]	@ (8015da4 <read_submessage_list+0x30c>)
 8015aa0:	9209      	str	r2, [sp, #36]	@ 0x24
 8015aa2:	4604      	mov	r4, r0
 8015aa4:	460d      	mov	r5, r1
 8015aa6:	f04f 0801 	mov.w	r8, #1
 8015aaa:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8015aae:	aa0c      	add	r2, sp, #48	@ 0x30
 8015ab0:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8015ab4:	4628      	mov	r0, r5
 8015ab6:	f001 fcdf 	bl	8017478 <uxr_read_submessage_header>
 8015aba:	2800      	cmp	r0, #0
 8015abc:	f000 813e 	beq.w	8015d3c <read_submessage_list+0x2a4>
 8015ac0:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8015ac4:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8015ac8:	3b02      	subs	r3, #2
 8015aca:	2b0d      	cmp	r3, #13
 8015acc:	d8ed      	bhi.n	8015aaa <read_submessage_list+0x12>
 8015ace:	a101      	add	r1, pc, #4	@ (adr r1, 8015ad4 <read_submessage_list+0x3c>)
 8015ad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015ad4:	08015d33 	.word	0x08015d33
 8015ad8:	08015aab 	.word	0x08015aab
 8015adc:	08015d23 	.word	0x08015d23
 8015ae0:	08015cc1 	.word	0x08015cc1
 8015ae4:	08015cb7 	.word	0x08015cb7
 8015ae8:	08015aab 	.word	0x08015aab
 8015aec:	08015aab 	.word	0x08015aab
 8015af0:	08015c17 	.word	0x08015c17
 8015af4:	08015ba7 	.word	0x08015ba7
 8015af8:	08015b67 	.word	0x08015b67
 8015afc:	08015aab 	.word	0x08015aab
 8015b00:	08015aab 	.word	0x08015aab
 8015b04:	08015aab 	.word	0x08015aab
 8015b08:	08015b0d 	.word	0x08015b0d
 8015b0c:	a910      	add	r1, sp, #64	@ 0x40
 8015b0e:	4628      	mov	r0, r5
 8015b10:	f002 fe2e 	bl	8018770 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8015b14:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8015b18:	f1b9 0f00 	cmp.w	r9, #0
 8015b1c:	f000 8116 	beq.w	8015d4c <read_submessage_list+0x2b4>
 8015b20:	f001 fcf0 	bl	8017504 <uxr_nanos>
 8015b24:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8015b26:	4602      	mov	r2, r0
 8015b28:	460b      	mov	r3, r1
 8015b2a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8015b2c:	2100      	movs	r1, #0
 8015b2e:	468c      	mov	ip, r1
 8015b30:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8015b34:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8015b38:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015b3a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8015b3c:	468c      	mov	ip, r1
 8015b3e:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8015b42:	46e2      	mov	sl, ip
 8015b44:	46bc      	mov	ip, r7
 8015b46:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8015b4a:	fbc0 7106 	smlal	r7, r1, r0, r6
 8015b4e:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8015b52:	e9cd 7100 	strd	r7, r1, [sp]
 8015b56:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8015b5a:	9106      	str	r1, [sp, #24]
 8015b5c:	4620      	mov	r0, r4
 8015b5e:	47c8      	blx	r9
 8015b60:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8015b64:	e7a1      	b.n	8015aaa <read_submessage_list+0x12>
 8015b66:	a910      	add	r1, sp, #64	@ 0x40
 8015b68:	4628      	mov	r0, r5
 8015b6a:	f002 fde1 	bl	8018730 <uxr_deserialize_HEARTBEAT_Payload>
 8015b6e:	2100      	movs	r1, #0
 8015b70:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8015b74:	f001 fb58 	bl	8017228 <uxr_stream_id_from_raw>
 8015b78:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8015b7c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015b7e:	4639      	mov	r1, r7
 8015b80:	f104 0008 	add.w	r0, r4, #8
 8015b84:	f001 fc3e 	bl	8017404 <uxr_get_input_reliable_stream>
 8015b88:	2800      	cmp	r0, #0
 8015b8a:	d08e      	beq.n	8015aaa <read_submessage_list+0x12>
 8015b8c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8015b90:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8015b94:	f006 fcd4 	bl	801c540 <uxr_process_heartbeat>
 8015b98:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8015b9c:	463a      	mov	r2, r7
 8015b9e:	4620      	mov	r0, r4
 8015ba0:	f7ff fde2 	bl	8015768 <write_submessage_acknack.isra.0>
 8015ba4:	e781      	b.n	8015aaa <read_submessage_list+0x12>
 8015ba6:	a910      	add	r1, sp, #64	@ 0x40
 8015ba8:	4628      	mov	r0, r5
 8015baa:	f002 fd99 	bl	80186e0 <uxr_deserialize_ACKNACK_Payload>
 8015bae:	2100      	movs	r1, #0
 8015bb0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8015bb4:	f001 fb38 	bl	8017228 <uxr_stream_id_from_raw>
 8015bb8:	900d      	str	r0, [sp, #52]	@ 0x34
 8015bba:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8015bbe:	f104 0008 	add.w	r0, r4, #8
 8015bc2:	f001 fc0b 	bl	80173dc <uxr_get_output_reliable_stream>
 8015bc6:	4607      	mov	r7, r0
 8015bc8:	2800      	cmp	r0, #0
 8015bca:	f43f af6e 	beq.w	8015aaa <read_submessage_list+0x12>
 8015bce:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8015bd2:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8015bd6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8015bda:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8015bde:	b289      	uxth	r1, r1
 8015be0:	f007 f808 	bl	801cbf4 <uxr_process_acknack>
 8015be4:	4638      	mov	r0, r7
 8015be6:	f006 ffc5 	bl	801cb74 <uxr_begin_output_nack_buffer_it>
 8015bea:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8015bee:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8015bf2:	e006      	b.n	8015c02 <read_submessage_list+0x16a>
 8015bf4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015bf6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015bf8:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8015bfc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015bfe:	6818      	ldr	r0, [r3, #0]
 8015c00:	47c8      	blx	r9
 8015c02:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8015c06:	aa0f      	add	r2, sp, #60	@ 0x3c
 8015c08:	4651      	mov	r1, sl
 8015c0a:	4638      	mov	r0, r7
 8015c0c:	f006 ffb4 	bl	801cb78 <uxr_next_reliable_nack_buffer_to_send>
 8015c10:	2800      	cmp	r0, #0
 8015c12:	d1ef      	bne.n	8015bf4 <read_submessage_list+0x15c>
 8015c14:	e749      	b.n	8015aaa <read_submessage_list+0x12>
 8015c16:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8015c1a:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8015c1e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8015c22:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8015c26:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8015c2a:	4651      	mov	r1, sl
 8015c2c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8015c30:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8015c34:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8015c38:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8015c3c:	4628      	mov	r0, r5
 8015c3e:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8015c42:	f002 faad 	bl	80181a0 <uxr_deserialize_BaseObjectRequest>
 8015c46:	4650      	mov	r0, sl
 8015c48:	a90f      	add	r1, sp, #60	@ 0x3c
 8015c4a:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8015c4e:	f000 fe1d 	bl	801688c <uxr_parse_base_object_request>
 8015c52:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8015c56:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015c58:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8015c5c:	9110      	str	r1, [sp, #64]	@ 0x40
 8015c5e:	3f04      	subs	r7, #4
 8015c60:	f009 090e 	and.w	r9, r9, #14
 8015c64:	b2bf      	uxth	r7, r7
 8015c66:	f1bb 0f00 	cmp.w	fp, #0
 8015c6a:	d006      	beq.n	8015c7a <read_submessage_list+0x1e2>
 8015c6c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8015c70:	9300      	str	r3, [sp, #0]
 8015c72:	4652      	mov	r2, sl
 8015c74:	2300      	movs	r3, #0
 8015c76:	4620      	mov	r0, r4
 8015c78:	47d8      	blx	fp
 8015c7a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8015c7c:	b16a      	cbz	r2, 8015c9a <read_submessage_list+0x202>
 8015c7e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8015c80:	2100      	movs	r1, #0
 8015c82:	3802      	subs	r0, #2
 8015c84:	e002      	b.n	8015c8c <read_submessage_list+0x1f4>
 8015c86:	3101      	adds	r1, #1
 8015c88:	4291      	cmp	r1, r2
 8015c8a:	d006      	beq.n	8015c9a <read_submessage_list+0x202>
 8015c8c:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8015c90:	4553      	cmp	r3, sl
 8015c92:	d1f8      	bne.n	8015c86 <read_submessage_list+0x1ee>
 8015c94:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8015c96:	2200      	movs	r2, #0
 8015c98:	545a      	strb	r2, [r3, r1]
 8015c9a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8015c9e:	9102      	str	r1, [sp, #8]
 8015ca0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015ca2:	9101      	str	r1, [sp, #4]
 8015ca4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8015ca6:	9100      	str	r1, [sp, #0]
 8015ca8:	464b      	mov	r3, r9
 8015caa:	463a      	mov	r2, r7
 8015cac:	4629      	mov	r1, r5
 8015cae:	4620      	mov	r0, r4
 8015cb0:	f7ff fc38 	bl	8015524 <read_submessage_format>
 8015cb4:	e6f9      	b.n	8015aaa <read_submessage_list+0x12>
 8015cb6:	4629      	mov	r1, r5
 8015cb8:	4620      	mov	r0, r4
 8015cba:	f7ff fea5 	bl	8015a08 <read_submessage_info>
 8015cbe:	e6f4      	b.n	8015aaa <read_submessage_list+0x12>
 8015cc0:	2a00      	cmp	r2, #0
 8015cc2:	d03e      	beq.n	8015d42 <read_submessage_list+0x2aa>
 8015cc4:	a910      	add	r1, sp, #64	@ 0x40
 8015cc6:	4628      	mov	r0, r5
 8015cc8:	f002 fc66 	bl	8018598 <uxr_deserialize_STATUS_Payload>
 8015ccc:	a90e      	add	r1, sp, #56	@ 0x38
 8015cce:	aa0d      	add	r2, sp, #52	@ 0x34
 8015cd0:	a810      	add	r0, sp, #64	@ 0x40
 8015cd2:	f000 fddb 	bl	801688c <uxr_parse_base_object_request>
 8015cd6:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8015cda:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015cdc:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8015ce0:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8015ce4:	910f      	str	r1, [sp, #60]	@ 0x3c
 8015ce6:	f1ba 0f00 	cmp.w	sl, #0
 8015cea:	d006      	beq.n	8015cfa <read_submessage_list+0x262>
 8015cec:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8015cf0:	9300      	str	r3, [sp, #0]
 8015cf2:	463a      	mov	r2, r7
 8015cf4:	464b      	mov	r3, r9
 8015cf6:	4620      	mov	r0, r4
 8015cf8:	47d0      	blx	sl
 8015cfa:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8015cfc:	2a00      	cmp	r2, #0
 8015cfe:	f43f aed4 	beq.w	8015aaa <read_submessage_list+0x12>
 8015d02:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8015d04:	2100      	movs	r1, #0
 8015d06:	3802      	subs	r0, #2
 8015d08:	e003      	b.n	8015d12 <read_submessage_list+0x27a>
 8015d0a:	3101      	adds	r1, #1
 8015d0c:	4291      	cmp	r1, r2
 8015d0e:	f43f aecc 	beq.w	8015aaa <read_submessage_list+0x12>
 8015d12:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8015d16:	42bb      	cmp	r3, r7
 8015d18:	d1f7      	bne.n	8015d0a <read_submessage_list+0x272>
 8015d1a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8015d1c:	f803 9001 	strb.w	r9, [r3, r1]
 8015d20:	e6c3      	b.n	8015aaa <read_submessage_list+0x12>
 8015d22:	2a00      	cmp	r2, #0
 8015d24:	f47f aec1 	bne.w	8015aaa <read_submessage_list+0x12>
 8015d28:	4629      	mov	r1, r5
 8015d2a:	4620      	mov	r0, r4
 8015d2c:	f000 fcf4 	bl	8016718 <uxr_read_create_session_status>
 8015d30:	e6bb      	b.n	8015aaa <read_submessage_list+0x12>
 8015d32:	4629      	mov	r1, r5
 8015d34:	4620      	mov	r0, r4
 8015d36:	f7ff fce1 	bl	80156fc <read_submessage_get_info>
 8015d3a:	e6b6      	b.n	8015aaa <read_submessage_list+0x12>
 8015d3c:	b017      	add	sp, #92	@ 0x5c
 8015d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d42:	4629      	mov	r1, r5
 8015d44:	4620      	mov	r0, r4
 8015d46:	f000 fcf3 	bl	8016730 <uxr_read_delete_session_status>
 8015d4a:	e6ae      	b.n	8015aaa <read_submessage_list+0x12>
 8015d4c:	f001 fbda 	bl	8017504 <uxr_nanos>
 8015d50:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015d52:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8015d54:	464f      	mov	r7, r9
 8015d56:	fbc3 2706 	smlal	r2, r7, r3, r6
 8015d5a:	1812      	adds	r2, r2, r0
 8015d5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015d5e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8015d60:	eb47 0101 	adc.w	r1, r7, r1
 8015d64:	464f      	mov	r7, r9
 8015d66:	fbc3 0706 	smlal	r0, r7, r3, r6
 8015d6a:	463b      	mov	r3, r7
 8015d6c:	4684      	mov	ip, r0
 8015d6e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8015d72:	fbc7 0906 	smlal	r0, r9, r7, r6
 8015d76:	eb1c 0c00 	adds.w	ip, ip, r0
 8015d7a:	464f      	mov	r7, r9
 8015d7c:	eb43 0307 	adc.w	r3, r3, r7
 8015d80:	ebb2 0c0c 	subs.w	ip, r2, ip
 8015d84:	eb61 0303 	sbc.w	r3, r1, r3
 8015d88:	0fda      	lsrs	r2, r3, #31
 8015d8a:	eb12 020c 	adds.w	r2, r2, ip
 8015d8e:	f143 0300 	adc.w	r3, r3, #0
 8015d92:	0852      	lsrs	r2, r2, #1
 8015d94:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8015d98:	105b      	asrs	r3, r3, #1
 8015d9a:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8015d9e:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8015da2:	e6dd      	b.n	8015b60 <read_submessage_list+0xc8>
 8015da4:	3b9aca00 	.word	0x3b9aca00

08015da8 <listen_message_reliably>:
 8015da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dac:	1e0b      	subs	r3, r1, #0
 8015dae:	b09d      	sub	sp, #116	@ 0x74
 8015db0:	bfb8      	it	lt
 8015db2:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8015db6:	4680      	mov	r8, r0
 8015db8:	9305      	str	r3, [sp, #20]
 8015dba:	f001 fb89 	bl	80174d0 <uxr_millis>
 8015dbe:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8015dc2:	4681      	mov	r9, r0
 8015dc4:	2a00      	cmp	r2, #0
 8015dc6:	f000 80a1 	beq.w	8015f0c <listen_message_reliably+0x164>
 8015dca:	2600      	movs	r6, #0
 8015dcc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015dd0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8015dd4:	9303      	str	r3, [sp, #12]
 8015dd6:	4630      	mov	r0, r6
 8015dd8:	460f      	mov	r7, r1
 8015dda:	e00f      	b.n	8015dfc <listen_message_reliably+0x54>
 8015ddc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8015de0:	9903      	ldr	r1, [sp, #12]
 8015de2:	455a      	cmp	r2, fp
 8015de4:	f106 0601 	add.w	r6, r6, #1
 8015de8:	eb73 0101 	sbcs.w	r1, r3, r1
 8015dec:	b2f0      	uxtb	r0, r6
 8015dee:	da01      	bge.n	8015df4 <listen_message_reliably+0x4c>
 8015df0:	4693      	mov	fp, r2
 8015df2:	9303      	str	r3, [sp, #12]
 8015df4:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8015df8:	4283      	cmp	r3, r0
 8015dfa:	d960      	bls.n	8015ebe <listen_message_reliably+0x116>
 8015dfc:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8015e00:	2102      	movs	r1, #2
 8015e02:	2201      	movs	r2, #1
 8015e04:	f001 f9e6 	bl	80171d4 <uxr_stream_id>
 8015e08:	00e4      	lsls	r4, r4, #3
 8015e0a:	f104 0520 	add.w	r5, r4, #32
 8015e0e:	4445      	add	r5, r8
 8015e10:	4601      	mov	r1, r0
 8015e12:	463b      	mov	r3, r7
 8015e14:	464a      	mov	r2, r9
 8015e16:	4628      	mov	r0, r5
 8015e18:	9109      	str	r1, [sp, #36]	@ 0x24
 8015e1a:	f006 fe81 	bl	801cb20 <uxr_update_output_stream_heartbeat_timestamp>
 8015e1e:	eb08 0304 	add.w	r3, r8, r4
 8015e22:	2800      	cmp	r0, #0
 8015e24:	d0da      	beq.n	8015ddc <listen_message_reliably+0x34>
 8015e26:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8015e2a:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8015e2e:	9304      	str	r3, [sp, #16]
 8015e30:	4640      	mov	r0, r8
 8015e32:	f000 fd05 	bl	8016840 <uxr_session_header_offset>
 8015e36:	3501      	adds	r5, #1
 8015e38:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8015e3c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8015e40:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8015e44:	2300      	movs	r3, #0
 8015e46:	2211      	movs	r2, #17
 8015e48:	9000      	str	r0, [sp, #0]
 8015e4a:	a90c      	add	r1, sp, #48	@ 0x30
 8015e4c:	4650      	mov	r0, sl
 8015e4e:	f7f9 fcc1 	bl	800f7d4 <ucdr_init_buffer_origin_offset>
 8015e52:	2300      	movs	r3, #0
 8015e54:	2205      	movs	r2, #5
 8015e56:	210b      	movs	r1, #11
 8015e58:	4650      	mov	r0, sl
 8015e5a:	f001 faf3 	bl	8017444 <uxr_buffer_submessage_header>
 8015e5e:	8968      	ldrh	r0, [r5, #10]
 8015e60:	2101      	movs	r1, #1
 8015e62:	f006 ff1f 	bl	801cca4 <uxr_seq_num_add>
 8015e66:	892b      	ldrh	r3, [r5, #8]
 8015e68:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8015e6c:	4602      	mov	r2, r0
 8015e6e:	9b04      	ldr	r3, [sp, #16]
 8015e70:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8015e74:	a90a      	add	r1, sp, #40	@ 0x28
 8015e76:	4650      	mov	r0, sl
 8015e78:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8015e7c:	f002 fc44 	bl	8018708 <uxr_serialize_HEARTBEAT_Payload>
 8015e80:	2200      	movs	r2, #0
 8015e82:	4611      	mov	r1, r2
 8015e84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015e86:	4640      	mov	r0, r8
 8015e88:	f000 fc84 	bl	8016794 <uxr_stamp_session_header>
 8015e8c:	4650      	mov	r0, sl
 8015e8e:	f7f9 fcdf 	bl	800f850 <ucdr_buffer_length>
 8015e92:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8015e96:	4602      	mov	r2, r0
 8015e98:	a90c      	add	r1, sp, #48	@ 0x30
 8015e9a:	e9d3 0500 	ldrd	r0, r5, [r3]
 8015e9e:	4444      	add	r4, r8
 8015ea0:	47a8      	blx	r5
 8015ea2:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8015ea6:	9903      	ldr	r1, [sp, #12]
 8015ea8:	455a      	cmp	r2, fp
 8015eaa:	f106 0601 	add.w	r6, r6, #1
 8015eae:	eb73 0101 	sbcs.w	r1, r3, r1
 8015eb2:	b2f0      	uxtb	r0, r6
 8015eb4:	db9c      	blt.n	8015df0 <listen_message_reliably+0x48>
 8015eb6:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8015eba:	4283      	cmp	r3, r0
 8015ebc:	d89e      	bhi.n	8015dfc <listen_message_reliably+0x54>
 8015ebe:	9a03      	ldr	r2, [sp, #12]
 8015ec0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	bf08      	it	eq
 8015ec8:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8015ecc:	d01e      	beq.n	8015f0c <listen_message_reliably+0x164>
 8015ece:	ebab 0309 	sub.w	r3, fp, r9
 8015ed2:	9905      	ldr	r1, [sp, #20]
 8015ed4:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	bf08      	it	eq
 8015edc:	2301      	moveq	r3, #1
 8015ede:	4299      	cmp	r1, r3
 8015ee0:	bfa8      	it	ge
 8015ee2:	4619      	movge	r1, r3
 8015ee4:	6894      	ldr	r4, [r2, #8]
 8015ee6:	6810      	ldr	r0, [r2, #0]
 8015ee8:	4689      	mov	r9, r1
 8015eea:	460b      	mov	r3, r1
 8015eec:	aa08      	add	r2, sp, #32
 8015eee:	a907      	add	r1, sp, #28
 8015ef0:	47a0      	blx	r4
 8015ef2:	b968      	cbnz	r0, 8015f10 <listen_message_reliably+0x168>
 8015ef4:	9b05      	ldr	r3, [sp, #20]
 8015ef6:	eba3 0309 	sub.w	r3, r3, r9
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	9305      	str	r3, [sp, #20]
 8015efe:	f73f af5c 	bgt.w	8015dba <listen_message_reliably+0x12>
 8015f02:	4604      	mov	r4, r0
 8015f04:	4620      	mov	r0, r4
 8015f06:	b01d      	add	sp, #116	@ 0x74
 8015f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f0c:	9b05      	ldr	r3, [sp, #20]
 8015f0e:	e7e0      	b.n	8015ed2 <listen_message_reliably+0x12a>
 8015f10:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8015f14:	4604      	mov	r4, r0
 8015f16:	a80c      	add	r0, sp, #48	@ 0x30
 8015f18:	f7f9 fc6e 	bl	800f7f8 <ucdr_init_buffer>
 8015f1c:	2500      	movs	r5, #0
 8015f1e:	f10d 031a 	add.w	r3, sp, #26
 8015f22:	aa06      	add	r2, sp, #24
 8015f24:	a90c      	add	r1, sp, #48	@ 0x30
 8015f26:	4640      	mov	r0, r8
 8015f28:	f88d 5018 	strb.w	r5, [sp, #24]
 8015f2c:	f000 fc46 	bl	80167bc <uxr_read_session_header>
 8015f30:	b918      	cbnz	r0, 8015f3a <listen_message_reliably+0x192>
 8015f32:	4620      	mov	r0, r4
 8015f34:	b01d      	add	sp, #116	@ 0x74
 8015f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f3a:	4629      	mov	r1, r5
 8015f3c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8015f40:	f001 f972 	bl	8017228 <uxr_stream_id_from_raw>
 8015f44:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8015f48:	2d01      	cmp	r5, #1
 8015f4a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8015f4e:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8015f52:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8015f56:	d04b      	beq.n	8015ff0 <listen_message_reliably+0x248>
 8015f58:	2d02      	cmp	r5, #2
 8015f5a:	d00f      	beq.n	8015f7c <listen_message_reliably+0x1d4>
 8015f5c:	2d00      	cmp	r5, #0
 8015f5e:	d1e8      	bne.n	8015f32 <listen_message_reliably+0x18a>
 8015f60:	4629      	mov	r1, r5
 8015f62:	4628      	mov	r0, r5
 8015f64:	f001 f960 	bl	8017228 <uxr_stream_id_from_raw>
 8015f68:	a90c      	add	r1, sp, #48	@ 0x30
 8015f6a:	4602      	mov	r2, r0
 8015f6c:	4640      	mov	r0, r8
 8015f6e:	920a      	str	r2, [sp, #40]	@ 0x28
 8015f70:	f7ff fd92 	bl	8015a98 <read_submessage_list>
 8015f74:	4620      	mov	r0, r4
 8015f76:	b01d      	add	sp, #116	@ 0x74
 8015f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f7c:	4631      	mov	r1, r6
 8015f7e:	f108 0008 	add.w	r0, r8, #8
 8015f82:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8015f86:	f001 fa3d 	bl	8017404 <uxr_get_input_reliable_stream>
 8015f8a:	4607      	mov	r7, r0
 8015f8c:	b338      	cbz	r0, 8015fde <listen_message_reliably+0x236>
 8015f8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015f90:	9203      	str	r2, [sp, #12]
 8015f92:	a80c      	add	r0, sp, #48	@ 0x30
 8015f94:	f7f9 fc60 	bl	800f858 <ucdr_buffer_remaining>
 8015f98:	4603      	mov	r3, r0
 8015f9a:	f10d 0019 	add.w	r0, sp, #25
 8015f9e:	9000      	str	r0, [sp, #0]
 8015fa0:	9a03      	ldr	r2, [sp, #12]
 8015fa2:	4651      	mov	r1, sl
 8015fa4:	4638      	mov	r0, r7
 8015fa6:	f006 f9d1 	bl	801c34c <uxr_receive_reliable_message>
 8015faa:	b1c0      	cbz	r0, 8015fde <listen_message_reliably+0x236>
 8015fac:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8015fb0:	b393      	cbz	r3, 8016018 <listen_message_reliably+0x270>
 8015fb2:	ad14      	add	r5, sp, #80	@ 0x50
 8015fb4:	f04f 0a02 	mov.w	sl, #2
 8015fb8:	e00a      	b.n	8015fd0 <listen_message_reliably+0x228>
 8015fba:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8015fbe:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8015fc2:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8015fc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015fc8:	4629      	mov	r1, r5
 8015fca:	4640      	mov	r0, r8
 8015fcc:	f7ff fd64 	bl	8015a98 <read_submessage_list>
 8015fd0:	2204      	movs	r2, #4
 8015fd2:	4629      	mov	r1, r5
 8015fd4:	4638      	mov	r0, r7
 8015fd6:	f006 fa39 	bl	801c44c <uxr_next_input_reliable_buffer_available>
 8015fda:	2800      	cmp	r0, #0
 8015fdc:	d1ed      	bne.n	8015fba <listen_message_reliably+0x212>
 8015fde:	4640      	mov	r0, r8
 8015fe0:	4632      	mov	r2, r6
 8015fe2:	4649      	mov	r1, r9
 8015fe4:	f7ff fbc0 	bl	8015768 <write_submessage_acknack.isra.0>
 8015fe8:	4620      	mov	r0, r4
 8015fea:	b01d      	add	sp, #116	@ 0x74
 8015fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ff0:	4631      	mov	r1, r6
 8015ff2:	f108 0008 	add.w	r0, r8, #8
 8015ff6:	f001 f9fb 	bl	80173f0 <uxr_get_input_best_effort_stream>
 8015ffa:	2800      	cmp	r0, #0
 8015ffc:	d099      	beq.n	8015f32 <listen_message_reliably+0x18a>
 8015ffe:	4651      	mov	r1, sl
 8016000:	f006 f910 	bl	801c224 <uxr_receive_best_effort_message>
 8016004:	2800      	cmp	r0, #0
 8016006:	d094      	beq.n	8015f32 <listen_message_reliably+0x18a>
 8016008:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 801600c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801600e:	a90c      	add	r1, sp, #48	@ 0x30
 8016010:	4640      	mov	r0, r8
 8016012:	f7ff fd41 	bl	8015a98 <read_submessage_list>
 8016016:	e78c      	b.n	8015f32 <listen_message_reliably+0x18a>
 8016018:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 801601c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801601e:	a90c      	add	r1, sp, #48	@ 0x30
 8016020:	4640      	mov	r0, r8
 8016022:	f7ff fd39 	bl	8015a98 <read_submessage_list>
 8016026:	e7c4      	b.n	8015fb2 <listen_message_reliably+0x20a>

08016028 <uxr_run_session_timeout>:
 8016028:	b570      	push	{r4, r5, r6, lr}
 801602a:	4604      	mov	r4, r0
 801602c:	460d      	mov	r5, r1
 801602e:	f001 fa4f 	bl	80174d0 <uxr_millis>
 8016032:	4606      	mov	r6, r0
 8016034:	4620      	mov	r0, r4
 8016036:	f7ff fc71 	bl	801591c <uxr_flash_output_streams>
 801603a:	4629      	mov	r1, r5
 801603c:	4620      	mov	r0, r4
 801603e:	f7ff feb3 	bl	8015da8 <listen_message_reliably>
 8016042:	f001 fa45 	bl	80174d0 <uxr_millis>
 8016046:	1b83      	subs	r3, r0, r6
 8016048:	1ae9      	subs	r1, r5, r3
 801604a:	2900      	cmp	r1, #0
 801604c:	dcf6      	bgt.n	801603c <uxr_run_session_timeout+0x14>
 801604e:	f104 0008 	add.w	r0, r4, #8
 8016052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016056:	f001 b9df 	b.w	8017418 <uxr_output_streams_confirmed>
 801605a:	bf00      	nop

0801605c <uxr_run_session_until_data>:
 801605c:	b570      	push	{r4, r5, r6, lr}
 801605e:	4604      	mov	r4, r0
 8016060:	460d      	mov	r5, r1
 8016062:	f001 fa35 	bl	80174d0 <uxr_millis>
 8016066:	4606      	mov	r6, r0
 8016068:	4620      	mov	r0, r4
 801606a:	f7ff fc57 	bl	801591c <uxr_flash_output_streams>
 801606e:	2300      	movs	r3, #0
 8016070:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8016074:	4629      	mov	r1, r5
 8016076:	e005      	b.n	8016084 <uxr_run_session_until_data+0x28>
 8016078:	f001 fa2a 	bl	80174d0 <uxr_millis>
 801607c:	1b83      	subs	r3, r0, r6
 801607e:	1ae9      	subs	r1, r5, r3
 8016080:	2900      	cmp	r1, #0
 8016082:	dd07      	ble.n	8016094 <uxr_run_session_until_data+0x38>
 8016084:	4620      	mov	r0, r4
 8016086:	f7ff fe8f 	bl	8015da8 <listen_message_reliably>
 801608a:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801608e:	2800      	cmp	r0, #0
 8016090:	d0f2      	beq.n	8016078 <uxr_run_session_until_data+0x1c>
 8016092:	bd70      	pop	{r4, r5, r6, pc}
 8016094:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8016098:	bd70      	pop	{r4, r5, r6, pc}
 801609a:	bf00      	nop

0801609c <uxr_run_session_until_confirm_delivery>:
 801609c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160a0:	4606      	mov	r6, r0
 80160a2:	460d      	mov	r5, r1
 80160a4:	f001 fa14 	bl	80174d0 <uxr_millis>
 80160a8:	4607      	mov	r7, r0
 80160aa:	4630      	mov	r0, r6
 80160ac:	f7ff fc36 	bl	801591c <uxr_flash_output_streams>
 80160b0:	2d00      	cmp	r5, #0
 80160b2:	f106 0808 	add.w	r8, r6, #8
 80160b6:	bfa8      	it	ge
 80160b8:	462c      	movge	r4, r5
 80160ba:	da07      	bge.n	80160cc <uxr_run_session_until_confirm_delivery+0x30>
 80160bc:	e00e      	b.n	80160dc <uxr_run_session_until_confirm_delivery+0x40>
 80160be:	f7ff fe73 	bl	8015da8 <listen_message_reliably>
 80160c2:	f001 fa05 	bl	80174d0 <uxr_millis>
 80160c6:	1bc3      	subs	r3, r0, r7
 80160c8:	1aec      	subs	r4, r5, r3
 80160ca:	d407      	bmi.n	80160dc <uxr_run_session_until_confirm_delivery+0x40>
 80160cc:	4640      	mov	r0, r8
 80160ce:	f001 f9a3 	bl	8017418 <uxr_output_streams_confirmed>
 80160d2:	4603      	mov	r3, r0
 80160d4:	4621      	mov	r1, r4
 80160d6:	4630      	mov	r0, r6
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d0f0      	beq.n	80160be <uxr_run_session_until_confirm_delivery+0x22>
 80160dc:	4640      	mov	r0, r8
 80160de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160e2:	f001 b999 	b.w	8017418 <uxr_output_streams_confirmed>
 80160e6:	bf00      	nop

080160e8 <uxr_run_session_until_all_status>:
 80160e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160ec:	9c08      	ldr	r4, [sp, #32]
 80160ee:	4606      	mov	r6, r0
 80160f0:	460f      	mov	r7, r1
 80160f2:	4691      	mov	r9, r2
 80160f4:	461d      	mov	r5, r3
 80160f6:	f7ff fc11 	bl	801591c <uxr_flash_output_streams>
 80160fa:	b124      	cbz	r4, 8016106 <uxr_run_session_until_all_status+0x1e>
 80160fc:	4622      	mov	r2, r4
 80160fe:	21ff      	movs	r1, #255	@ 0xff
 8016100:	4628      	mov	r0, r5
 8016102:	f007 fb0d 	bl	801d720 <memset>
 8016106:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 801610a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 801610c:	f001 f9e0 	bl	80174d0 <uxr_millis>
 8016110:	3d01      	subs	r5, #1
 8016112:	f1a9 0902 	sub.w	r9, r9, #2
 8016116:	4680      	mov	r8, r0
 8016118:	4639      	mov	r1, r7
 801611a:	4630      	mov	r0, r6
 801611c:	f7ff fe44 	bl	8015da8 <listen_message_reliably>
 8016120:	f001 f9d6 	bl	80174d0 <uxr_millis>
 8016124:	eba0 0008 	sub.w	r0, r0, r8
 8016128:	1a39      	subs	r1, r7, r0
 801612a:	b344      	cbz	r4, 801617e <uxr_run_session_until_all_status+0x96>
 801612c:	4628      	mov	r0, r5
 801612e:	46ac      	mov	ip, r5
 8016130:	2301      	movs	r3, #1
 8016132:	e002      	b.n	801613a <uxr_run_session_until_all_status+0x52>
 8016134:	42a3      	cmp	r3, r4
 8016136:	d20d      	bcs.n	8016154 <uxr_run_session_until_all_status+0x6c>
 8016138:	3301      	adds	r3, #1
 801613a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801613e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8016142:	d1f7      	bne.n	8016134 <uxr_run_session_until_all_status+0x4c>
 8016144:	42a3      	cmp	r3, r4
 8016146:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 801614a:	d213      	bcs.n	8016174 <uxr_run_session_until_all_status+0x8c>
 801614c:	2a00      	cmp	r2, #0
 801614e:	d0f3      	beq.n	8016138 <uxr_run_session_until_all_status+0x50>
 8016150:	2900      	cmp	r1, #0
 8016152:	dce2      	bgt.n	801611a <uxr_run_session_until_all_status+0x32>
 8016154:	2300      	movs	r3, #0
 8016156:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8016158:	442c      	add	r4, r5
 801615a:	e001      	b.n	8016160 <uxr_run_session_until_all_status+0x78>
 801615c:	2b01      	cmp	r3, #1
 801615e:	d812      	bhi.n	8016186 <uxr_run_session_until_all_status+0x9e>
 8016160:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8016164:	4284      	cmp	r4, r0
 8016166:	d1f9      	bne.n	801615c <uxr_run_session_until_all_status+0x74>
 8016168:	2b01      	cmp	r3, #1
 801616a:	bf8c      	ite	hi
 801616c:	2000      	movhi	r0, #0
 801616e:	2001      	movls	r0, #1
 8016170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016174:	2900      	cmp	r1, #0
 8016176:	dded      	ble.n	8016154 <uxr_run_session_until_all_status+0x6c>
 8016178:	2a00      	cmp	r2, #0
 801617a:	d1ce      	bne.n	801611a <uxr_run_session_until_all_status+0x32>
 801617c:	e7ea      	b.n	8016154 <uxr_run_session_until_all_status+0x6c>
 801617e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8016180:	2001      	movs	r0, #1
 8016182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016186:	2000      	movs	r0, #0
 8016188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801618c:	0000      	movs	r0, r0
	...

08016190 <uxr_sync_session>:
 8016190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016192:	b093      	sub	sp, #76	@ 0x4c
 8016194:	4604      	mov	r4, r0
 8016196:	460d      	mov	r5, r1
 8016198:	f000 fb52 	bl	8016840 <uxr_session_header_offset>
 801619c:	2214      	movs	r2, #20
 801619e:	eb0d 0102 	add.w	r1, sp, r2
 80161a2:	9000      	str	r0, [sp, #0]
 80161a4:	2300      	movs	r3, #0
 80161a6:	a80a      	add	r0, sp, #40	@ 0x28
 80161a8:	f7f9 fb14 	bl	800f7d4 <ucdr_init_buffer_origin_offset>
 80161ac:	2300      	movs	r3, #0
 80161ae:	2208      	movs	r2, #8
 80161b0:	210e      	movs	r1, #14
 80161b2:	a80a      	add	r0, sp, #40	@ 0x28
 80161b4:	f001 f946 	bl	8017444 <uxr_buffer_submessage_header>
 80161b8:	f001 f9a4 	bl	8017504 <uxr_nanos>
 80161bc:	a31c      	add	r3, pc, #112	@ (adr r3, 8016230 <uxr_sync_session+0xa0>)
 80161be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161c2:	460e      	mov	r6, r1
 80161c4:	4607      	mov	r7, r0
 80161c6:	f7ea fcff 	bl	8000bc8 <__aeabi_ldivmod>
 80161ca:	4631      	mov	r1, r6
 80161cc:	9003      	str	r0, [sp, #12]
 80161ce:	a318      	add	r3, pc, #96	@ (adr r3, 8016230 <uxr_sync_session+0xa0>)
 80161d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161d4:	4638      	mov	r0, r7
 80161d6:	f7ea fcf7 	bl	8000bc8 <__aeabi_ldivmod>
 80161da:	a903      	add	r1, sp, #12
 80161dc:	a80a      	add	r0, sp, #40	@ 0x28
 80161de:	9204      	str	r2, [sp, #16]
 80161e0:	f002 fab8 	bl	8018754 <uxr_serialize_TIMESTAMP_Payload>
 80161e4:	2200      	movs	r2, #0
 80161e6:	4611      	mov	r1, r2
 80161e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80161ea:	4620      	mov	r0, r4
 80161ec:	f000 fad2 	bl	8016794 <uxr_stamp_session_header>
 80161f0:	a80a      	add	r0, sp, #40	@ 0x28
 80161f2:	f7f9 fb2d 	bl	800f850 <ucdr_buffer_length>
 80161f6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80161f8:	4602      	mov	r2, r0
 80161fa:	a905      	add	r1, sp, #20
 80161fc:	e9d3 0600 	ldrd	r0, r6, [r3]
 8016200:	47b0      	blx	r6
 8016202:	f001 f965 	bl	80174d0 <uxr_millis>
 8016206:	2300      	movs	r3, #0
 8016208:	4606      	mov	r6, r0
 801620a:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 801620e:	4629      	mov	r1, r5
 8016210:	e000      	b.n	8016214 <uxr_sync_session+0x84>
 8016212:	b950      	cbnz	r0, 801622a <uxr_sync_session+0x9a>
 8016214:	4620      	mov	r0, r4
 8016216:	f7ff fdc7 	bl	8015da8 <listen_message_reliably>
 801621a:	f001 f959 	bl	80174d0 <uxr_millis>
 801621e:	1b83      	subs	r3, r0, r6
 8016220:	1ae9      	subs	r1, r5, r3
 8016222:	2900      	cmp	r1, #0
 8016224:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8016228:	dcf3      	bgt.n	8016212 <uxr_sync_session+0x82>
 801622a:	b013      	add	sp, #76	@ 0x4c
 801622c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801622e:	bf00      	nop
 8016230:	3b9aca00 	.word	0x3b9aca00
 8016234:	00000000 	.word	0x00000000

08016238 <wait_session_status>:
 8016238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801623c:	4604      	mov	r4, r0
 801623e:	b09d      	sub	sp, #116	@ 0x74
 8016240:	20ff      	movs	r0, #255	@ 0xff
 8016242:	7160      	strb	r0, [r4, #5]
 8016244:	9303      	str	r3, [sp, #12]
 8016246:	2b00      	cmp	r3, #0
 8016248:	f000 80b6 	beq.w	80163b8 <wait_session_status+0x180>
 801624c:	468a      	mov	sl, r1
 801624e:	4691      	mov	r9, r2
 8016250:	f04f 0b00 	mov.w	fp, #0
 8016254:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016256:	464a      	mov	r2, r9
 8016258:	e9d3 0500 	ldrd	r0, r5, [r3]
 801625c:	4651      	mov	r1, sl
 801625e:	47a8      	blx	r5
 8016260:	f001 f936 	bl	80174d0 <uxr_millis>
 8016264:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016268:	4605      	mov	r5, r0
 801626a:	e009      	b.n	8016280 <wait_session_status+0x48>
 801626c:	f001 f930 	bl	80174d0 <uxr_millis>
 8016270:	1b40      	subs	r0, r0, r5
 8016272:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8016276:	2b00      	cmp	r3, #0
 8016278:	dd40      	ble.n	80162fc <wait_session_status+0xc4>
 801627a:	7960      	ldrb	r0, [r4, #5]
 801627c:	28ff      	cmp	r0, #255	@ 0xff
 801627e:	d145      	bne.n	801630c <wait_session_status+0xd4>
 8016280:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8016282:	a908      	add	r1, sp, #32
 8016284:	6896      	ldr	r6, [r2, #8]
 8016286:	6810      	ldr	r0, [r2, #0]
 8016288:	aa09      	add	r2, sp, #36	@ 0x24
 801628a:	47b0      	blx	r6
 801628c:	2800      	cmp	r0, #0
 801628e:	d0ed      	beq.n	801626c <wait_session_status+0x34>
 8016290:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8016294:	a80c      	add	r0, sp, #48	@ 0x30
 8016296:	f7f9 faaf 	bl	800f7f8 <ucdr_init_buffer>
 801629a:	2600      	movs	r6, #0
 801629c:	f10d 031e 	add.w	r3, sp, #30
 80162a0:	aa07      	add	r2, sp, #28
 80162a2:	a90c      	add	r1, sp, #48	@ 0x30
 80162a4:	4620      	mov	r0, r4
 80162a6:	f88d 601c 	strb.w	r6, [sp, #28]
 80162aa:	f000 fa87 	bl	80167bc <uxr_read_session_header>
 80162ae:	2800      	cmp	r0, #0
 80162b0:	d0dc      	beq.n	801626c <wait_session_status+0x34>
 80162b2:	4631      	mov	r1, r6
 80162b4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80162b8:	f000 ffb6 	bl	8017228 <uxr_stream_id_from_raw>
 80162bc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80162c0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80162c4:	9302      	str	r3, [sp, #8]
 80162c6:	2f01      	cmp	r7, #1
 80162c8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80162cc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80162d0:	d05c      	beq.n	801638c <wait_session_status+0x154>
 80162d2:	2f02      	cmp	r7, #2
 80162d4:	d020      	beq.n	8016318 <wait_session_status+0xe0>
 80162d6:	2f00      	cmp	r7, #0
 80162d8:	d1c8      	bne.n	801626c <wait_session_status+0x34>
 80162da:	4639      	mov	r1, r7
 80162dc:	4638      	mov	r0, r7
 80162de:	f000 ffa3 	bl	8017228 <uxr_stream_id_from_raw>
 80162e2:	a90c      	add	r1, sp, #48	@ 0x30
 80162e4:	4602      	mov	r2, r0
 80162e6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80162e8:	4620      	mov	r0, r4
 80162ea:	f7ff fbd5 	bl	8015a98 <read_submessage_list>
 80162ee:	f001 f8ef 	bl	80174d0 <uxr_millis>
 80162f2:	1b40      	subs	r0, r0, r5
 80162f4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	dcbe      	bgt.n	801627a <wait_session_status+0x42>
 80162fc:	9b03      	ldr	r3, [sp, #12]
 80162fe:	7960      	ldrb	r0, [r4, #5]
 8016300:	f10b 0b01 	add.w	fp, fp, #1
 8016304:	455b      	cmp	r3, fp
 8016306:	d001      	beq.n	801630c <wait_session_status+0xd4>
 8016308:	28ff      	cmp	r0, #255	@ 0xff
 801630a:	d0a3      	beq.n	8016254 <wait_session_status+0x1c>
 801630c:	38ff      	subs	r0, #255	@ 0xff
 801630e:	bf18      	it	ne
 8016310:	2001      	movne	r0, #1
 8016312:	b01d      	add	sp, #116	@ 0x74
 8016314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016318:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801631c:	9304      	str	r3, [sp, #16]
 801631e:	4631      	mov	r1, r6
 8016320:	f104 0008 	add.w	r0, r4, #8
 8016324:	f001 f86e 	bl	8017404 <uxr_get_input_reliable_stream>
 8016328:	4680      	mov	r8, r0
 801632a:	b348      	cbz	r0, 8016380 <wait_session_status+0x148>
 801632c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801632e:	9205      	str	r2, [sp, #20]
 8016330:	a80c      	add	r0, sp, #48	@ 0x30
 8016332:	f7f9 fa91 	bl	800f858 <ucdr_buffer_remaining>
 8016336:	4603      	mov	r3, r0
 8016338:	f10d 001d 	add.w	r0, sp, #29
 801633c:	9000      	str	r0, [sp, #0]
 801633e:	9a05      	ldr	r2, [sp, #20]
 8016340:	9902      	ldr	r1, [sp, #8]
 8016342:	4640      	mov	r0, r8
 8016344:	f006 f802 	bl	801c34c <uxr_receive_reliable_message>
 8016348:	b1d0      	cbz	r0, 8016380 <wait_session_status+0x148>
 801634a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d03a      	beq.n	80163c8 <wait_session_status+0x190>
 8016352:	9f04      	ldr	r7, [sp, #16]
 8016354:	e00a      	b.n	801636c <wait_session_status+0x134>
 8016356:	f04f 0302 	mov.w	r3, #2
 801635a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801635e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8016362:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8016366:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016368:	f7ff fb96 	bl	8015a98 <read_submessage_list>
 801636c:	a914      	add	r1, sp, #80	@ 0x50
 801636e:	2204      	movs	r2, #4
 8016370:	4640      	mov	r0, r8
 8016372:	f006 f86b 	bl	801c44c <uxr_next_input_reliable_buffer_available>
 8016376:	4603      	mov	r3, r0
 8016378:	a914      	add	r1, sp, #80	@ 0x50
 801637a:	4620      	mov	r0, r4
 801637c:	2b00      	cmp	r3, #0
 801637e:	d1ea      	bne.n	8016356 <wait_session_status+0x11e>
 8016380:	9904      	ldr	r1, [sp, #16]
 8016382:	4632      	mov	r2, r6
 8016384:	4620      	mov	r0, r4
 8016386:	f7ff f9ef 	bl	8015768 <write_submessage_acknack.isra.0>
 801638a:	e76f      	b.n	801626c <wait_session_status+0x34>
 801638c:	4631      	mov	r1, r6
 801638e:	f104 0008 	add.w	r0, r4, #8
 8016392:	f001 f82d 	bl	80173f0 <uxr_get_input_best_effort_stream>
 8016396:	2800      	cmp	r0, #0
 8016398:	f43f af68 	beq.w	801626c <wait_session_status+0x34>
 801639c:	9902      	ldr	r1, [sp, #8]
 801639e:	f005 ff41 	bl	801c224 <uxr_receive_best_effort_message>
 80163a2:	2800      	cmp	r0, #0
 80163a4:	f43f af62 	beq.w	801626c <wait_session_status+0x34>
 80163a8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80163ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80163ae:	a90c      	add	r1, sp, #48	@ 0x30
 80163b0:	4620      	mov	r0, r4
 80163b2:	f7ff fb71 	bl	8015a98 <read_submessage_list>
 80163b6:	e759      	b.n	801626c <wait_session_status+0x34>
 80163b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80163ba:	e9d3 0400 	ldrd	r0, r4, [r3]
 80163be:	47a0      	blx	r4
 80163c0:	2001      	movs	r0, #1
 80163c2:	b01d      	add	sp, #116	@ 0x74
 80163c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163c8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80163cc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80163ce:	a90c      	add	r1, sp, #48	@ 0x30
 80163d0:	4620      	mov	r0, r4
 80163d2:	f7ff fb61 	bl	8015a98 <read_submessage_list>
 80163d6:	e7bc      	b.n	8016352 <wait_session_status+0x11a>

080163d8 <uxr_delete_session_retries>:
 80163d8:	b530      	push	{r4, r5, lr}
 80163da:	b08f      	sub	sp, #60	@ 0x3c
 80163dc:	4604      	mov	r4, r0
 80163de:	460d      	mov	r5, r1
 80163e0:	f000 fa2e 	bl	8016840 <uxr_session_header_offset>
 80163e4:	2300      	movs	r3, #0
 80163e6:	2210      	movs	r2, #16
 80163e8:	9000      	str	r0, [sp, #0]
 80163ea:	a902      	add	r1, sp, #8
 80163ec:	a806      	add	r0, sp, #24
 80163ee:	f7f9 f9f1 	bl	800f7d4 <ucdr_init_buffer_origin_offset>
 80163f2:	a906      	add	r1, sp, #24
 80163f4:	4620      	mov	r0, r4
 80163f6:	f000 f973 	bl	80166e0 <uxr_buffer_delete_session>
 80163fa:	2200      	movs	r2, #0
 80163fc:	4611      	mov	r1, r2
 80163fe:	9b06      	ldr	r3, [sp, #24]
 8016400:	4620      	mov	r0, r4
 8016402:	f000 f9c7 	bl	8016794 <uxr_stamp_session_header>
 8016406:	a806      	add	r0, sp, #24
 8016408:	f7f9 fa22 	bl	800f850 <ucdr_buffer_length>
 801640c:	462b      	mov	r3, r5
 801640e:	4602      	mov	r2, r0
 8016410:	a902      	add	r1, sp, #8
 8016412:	4620      	mov	r0, r4
 8016414:	f7ff ff10 	bl	8016238 <wait_session_status>
 8016418:	b118      	cbz	r0, 8016422 <uxr_delete_session_retries+0x4a>
 801641a:	7960      	ldrb	r0, [r4, #5]
 801641c:	fab0 f080 	clz	r0, r0
 8016420:	0940      	lsrs	r0, r0, #5
 8016422:	b00f      	add	sp, #60	@ 0x3c
 8016424:	bd30      	pop	{r4, r5, pc}
 8016426:	bf00      	nop

08016428 <uxr_create_session>:
 8016428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801642c:	f100 0b08 	add.w	fp, r0, #8
 8016430:	b0ab      	sub	sp, #172	@ 0xac
 8016432:	4604      	mov	r4, r0
 8016434:	4658      	mov	r0, fp
 8016436:	f000 ff2b 	bl	8017290 <uxr_reset_stream_storage>
 801643a:	4620      	mov	r0, r4
 801643c:	f000 fa00 	bl	8016840 <uxr_session_header_offset>
 8016440:	2300      	movs	r3, #0
 8016442:	9000      	str	r0, [sp, #0]
 8016444:	221c      	movs	r2, #28
 8016446:	a90b      	add	r1, sp, #44	@ 0x2c
 8016448:	a812      	add	r0, sp, #72	@ 0x48
 801644a:	f7f9 f9c3 	bl	800f7d4 <ucdr_init_buffer_origin_offset>
 801644e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016450:	8a1a      	ldrh	r2, [r3, #16]
 8016452:	3a04      	subs	r2, #4
 8016454:	b292      	uxth	r2, r2
 8016456:	a912      	add	r1, sp, #72	@ 0x48
 8016458:	4620      	mov	r0, r4
 801645a:	f000 f917 	bl	801668c <uxr_buffer_create_session>
 801645e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016460:	4620      	mov	r0, r4
 8016462:	f000 f983 	bl	801676c <uxr_stamp_create_session_header>
 8016466:	a812      	add	r0, sp, #72	@ 0x48
 8016468:	f7f9 f9f2 	bl	800f850 <ucdr_buffer_length>
 801646c:	23ff      	movs	r3, #255	@ 0xff
 801646e:	7163      	strb	r3, [r4, #5]
 8016470:	230a      	movs	r3, #10
 8016472:	46da      	mov	sl, fp
 8016474:	9303      	str	r3, [sp, #12]
 8016476:	4683      	mov	fp, r0
 8016478:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801647a:	465a      	mov	r2, fp
 801647c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8016480:	a90b      	add	r1, sp, #44	@ 0x2c
 8016482:	47a8      	blx	r5
 8016484:	f001 f824 	bl	80174d0 <uxr_millis>
 8016488:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801648c:	4605      	mov	r5, r0
 801648e:	e009      	b.n	80164a4 <uxr_create_session+0x7c>
 8016490:	f001 f81e 	bl	80174d0 <uxr_millis>
 8016494:	1b40      	subs	r0, r0, r5
 8016496:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801649a:	2b00      	cmp	r3, #0
 801649c:	7962      	ldrb	r2, [r4, #5]
 801649e:	dd38      	ble.n	8016512 <uxr_create_session+0xea>
 80164a0:	2aff      	cmp	r2, #255	@ 0xff
 80164a2:	d13c      	bne.n	801651e <uxr_create_session+0xf6>
 80164a4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80164a6:	a907      	add	r1, sp, #28
 80164a8:	6896      	ldr	r6, [r2, #8]
 80164aa:	6810      	ldr	r0, [r2, #0]
 80164ac:	aa08      	add	r2, sp, #32
 80164ae:	47b0      	blx	r6
 80164b0:	2800      	cmp	r0, #0
 80164b2:	d0ed      	beq.n	8016490 <uxr_create_session+0x68>
 80164b4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80164b8:	a81a      	add	r0, sp, #104	@ 0x68
 80164ba:	f7f9 f99d 	bl	800f7f8 <ucdr_init_buffer>
 80164be:	2600      	movs	r6, #0
 80164c0:	f10d 031a 	add.w	r3, sp, #26
 80164c4:	aa06      	add	r2, sp, #24
 80164c6:	a91a      	add	r1, sp, #104	@ 0x68
 80164c8:	4620      	mov	r0, r4
 80164ca:	f88d 6018 	strb.w	r6, [sp, #24]
 80164ce:	f000 f975 	bl	80167bc <uxr_read_session_header>
 80164d2:	2800      	cmp	r0, #0
 80164d4:	d0dc      	beq.n	8016490 <uxr_create_session+0x68>
 80164d6:	4631      	mov	r1, r6
 80164d8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80164dc:	f000 fea4 	bl	8017228 <uxr_stream_id_from_raw>
 80164e0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80164e4:	2e01      	cmp	r6, #1
 80164e6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80164ea:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80164ee:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80164f2:	d053      	beq.n	801659c <uxr_create_session+0x174>
 80164f4:	2e02      	cmp	r6, #2
 80164f6:	d018      	beq.n	801652a <uxr_create_session+0x102>
 80164f8:	2e00      	cmp	r6, #0
 80164fa:	d1c9      	bne.n	8016490 <uxr_create_session+0x68>
 80164fc:	4631      	mov	r1, r6
 80164fe:	4630      	mov	r0, r6
 8016500:	f000 fe92 	bl	8017228 <uxr_stream_id_from_raw>
 8016504:	a91a      	add	r1, sp, #104	@ 0x68
 8016506:	4602      	mov	r2, r0
 8016508:	900a      	str	r0, [sp, #40]	@ 0x28
 801650a:	4620      	mov	r0, r4
 801650c:	f7ff fac4 	bl	8015a98 <read_submessage_list>
 8016510:	e7be      	b.n	8016490 <uxr_create_session+0x68>
 8016512:	9b03      	ldr	r3, [sp, #12]
 8016514:	3b01      	subs	r3, #1
 8016516:	9303      	str	r3, [sp, #12]
 8016518:	d001      	beq.n	801651e <uxr_create_session+0xf6>
 801651a:	2aff      	cmp	r2, #255	@ 0xff
 801651c:	d0ac      	beq.n	8016478 <uxr_create_session+0x50>
 801651e:	2a00      	cmp	r2, #0
 8016520:	d051      	beq.n	80165c6 <uxr_create_session+0x19e>
 8016522:	2000      	movs	r0, #0
 8016524:	b02b      	add	sp, #172	@ 0xac
 8016526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801652a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801652e:	9304      	str	r3, [sp, #16]
 8016530:	4639      	mov	r1, r7
 8016532:	4650      	mov	r0, sl
 8016534:	f000 ff66 	bl	8017404 <uxr_get_input_reliable_stream>
 8016538:	4680      	mov	r8, r0
 801653a:	b348      	cbz	r0, 8016590 <uxr_create_session+0x168>
 801653c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801653e:	9205      	str	r2, [sp, #20]
 8016540:	a81a      	add	r0, sp, #104	@ 0x68
 8016542:	f7f9 f989 	bl	800f858 <ucdr_buffer_remaining>
 8016546:	4603      	mov	r3, r0
 8016548:	f10d 0019 	add.w	r0, sp, #25
 801654c:	9000      	str	r0, [sp, #0]
 801654e:	9a05      	ldr	r2, [sp, #20]
 8016550:	4649      	mov	r1, r9
 8016552:	4640      	mov	r0, r8
 8016554:	f005 fefa 	bl	801c34c <uxr_receive_reliable_message>
 8016558:	b1d0      	cbz	r0, 8016590 <uxr_create_session+0x168>
 801655a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d038      	beq.n	80165d4 <uxr_create_session+0x1ac>
 8016562:	9e04      	ldr	r6, [sp, #16]
 8016564:	e00a      	b.n	801657c <uxr_create_session+0x154>
 8016566:	f04f 0302 	mov.w	r3, #2
 801656a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 801656e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8016572:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016576:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016578:	f7ff fa8e 	bl	8015a98 <read_submessage_list>
 801657c:	a922      	add	r1, sp, #136	@ 0x88
 801657e:	2204      	movs	r2, #4
 8016580:	4640      	mov	r0, r8
 8016582:	f005 ff63 	bl	801c44c <uxr_next_input_reliable_buffer_available>
 8016586:	4603      	mov	r3, r0
 8016588:	a922      	add	r1, sp, #136	@ 0x88
 801658a:	4620      	mov	r0, r4
 801658c:	2b00      	cmp	r3, #0
 801658e:	d1ea      	bne.n	8016566 <uxr_create_session+0x13e>
 8016590:	9904      	ldr	r1, [sp, #16]
 8016592:	463a      	mov	r2, r7
 8016594:	4620      	mov	r0, r4
 8016596:	f7ff f8e7 	bl	8015768 <write_submessage_acknack.isra.0>
 801659a:	e779      	b.n	8016490 <uxr_create_session+0x68>
 801659c:	4639      	mov	r1, r7
 801659e:	4650      	mov	r0, sl
 80165a0:	f000 ff26 	bl	80173f0 <uxr_get_input_best_effort_stream>
 80165a4:	2800      	cmp	r0, #0
 80165a6:	f43f af73 	beq.w	8016490 <uxr_create_session+0x68>
 80165aa:	4649      	mov	r1, r9
 80165ac:	f005 fe3a 	bl	801c224 <uxr_receive_best_effort_message>
 80165b0:	2800      	cmp	r0, #0
 80165b2:	f43f af6d 	beq.w	8016490 <uxr_create_session+0x68>
 80165b6:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80165ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80165bc:	a91a      	add	r1, sp, #104	@ 0x68
 80165be:	4620      	mov	r0, r4
 80165c0:	f7ff fa6a 	bl	8015a98 <read_submessage_list>
 80165c4:	e764      	b.n	8016490 <uxr_create_session+0x68>
 80165c6:	4650      	mov	r0, sl
 80165c8:	f000 fe62 	bl	8017290 <uxr_reset_stream_storage>
 80165cc:	2001      	movs	r0, #1
 80165ce:	b02b      	add	sp, #172	@ 0xac
 80165d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165d4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80165d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80165da:	a91a      	add	r1, sp, #104	@ 0x68
 80165dc:	4620      	mov	r0, r4
 80165de:	f7ff fa5b 	bl	8015a98 <read_submessage_list>
 80165e2:	e7be      	b.n	8016562 <uxr_create_session+0x13a>

080165e4 <uxr_prepare_stream_to_write_submessage>:
 80165e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165e8:	b082      	sub	sp, #8
 80165ea:	4682      	mov	sl, r0
 80165ec:	4610      	mov	r0, r2
 80165ee:	4615      	mov	r5, r2
 80165f0:	461e      	mov	r6, r3
 80165f2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80165f6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80165fa:	9101      	str	r1, [sp, #4]
 80165fc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8016600:	f000 ff60 	bl	80174c4 <uxr_submessage_padding>
 8016604:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8016608:	f105 0904 	add.w	r9, r5, #4
 801660c:	2b01      	cmp	r3, #1
 801660e:	4481      	add	r9, r0
 8016610:	d01d      	beq.n	801664e <uxr_prepare_stream_to_write_submessage+0x6a>
 8016612:	2b02      	cmp	r3, #2
 8016614:	d116      	bne.n	8016644 <uxr_prepare_stream_to_write_submessage+0x60>
 8016616:	4621      	mov	r1, r4
 8016618:	f10a 0008 	add.w	r0, sl, #8
 801661c:	f000 fede 	bl	80173dc <uxr_get_output_reliable_stream>
 8016620:	4604      	mov	r4, r0
 8016622:	b158      	cbz	r0, 801663c <uxr_prepare_stream_to_write_submessage+0x58>
 8016624:	4649      	mov	r1, r9
 8016626:	4632      	mov	r2, r6
 8016628:	f006 f8cc 	bl	801c7c4 <uxr_prepare_reliable_buffer_to_write>
 801662c:	4604      	mov	r4, r0
 801662e:	b12c      	cbz	r4, 801663c <uxr_prepare_stream_to_write_submessage+0x58>
 8016630:	4643      	mov	r3, r8
 8016632:	b2aa      	uxth	r2, r5
 8016634:	4639      	mov	r1, r7
 8016636:	4630      	mov	r0, r6
 8016638:	f000 ff04 	bl	8017444 <uxr_buffer_submessage_header>
 801663c:	4620      	mov	r0, r4
 801663e:	b002      	add	sp, #8
 8016640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016644:	2400      	movs	r4, #0
 8016646:	4620      	mov	r0, r4
 8016648:	b002      	add	sp, #8
 801664a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801664e:	4621      	mov	r1, r4
 8016650:	f10a 0008 	add.w	r0, sl, #8
 8016654:	f000 feba 	bl	80173cc <uxr_get_output_best_effort_stream>
 8016658:	4604      	mov	r4, r0
 801665a:	2800      	cmp	r0, #0
 801665c:	d0ee      	beq.n	801663c <uxr_prepare_stream_to_write_submessage+0x58>
 801665e:	4649      	mov	r1, r9
 8016660:	4632      	mov	r2, r6
 8016662:	f005 ffdf 	bl	801c624 <uxr_prepare_best_effort_buffer_to_write>
 8016666:	4604      	mov	r4, r0
 8016668:	e7e1      	b.n	801662e <uxr_prepare_stream_to_write_submessage+0x4a>
 801666a:	bf00      	nop

0801666c <uxr_init_session_info>:
 801666c:	0e13      	lsrs	r3, r2, #24
 801666e:	7043      	strb	r3, [r0, #1]
 8016670:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8016674:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8016678:	7001      	strb	r1, [r0, #0]
 801667a:	70c3      	strb	r3, [r0, #3]
 801667c:	2109      	movs	r1, #9
 801667e:	23ff      	movs	r3, #255	@ 0xff
 8016680:	f880 c002 	strb.w	ip, [r0, #2]
 8016684:	7102      	strb	r2, [r0, #4]
 8016686:	80c1      	strh	r1, [r0, #6]
 8016688:	7143      	strb	r3, [r0, #5]
 801668a:	4770      	bx	lr

0801668c <uxr_buffer_create_session>:
 801668c:	b530      	push	{r4, r5, lr}
 801668e:	b089      	sub	sp, #36	@ 0x24
 8016690:	2300      	movs	r3, #0
 8016692:	4d12      	ldr	r5, [pc, #72]	@ (80166dc <uxr_buffer_create_session+0x50>)
 8016694:	9307      	str	r3, [sp, #28]
 8016696:	f8ad 201c 	strh.w	r2, [sp, #28]
 801669a:	2201      	movs	r2, #1
 801669c:	9301      	str	r3, [sp, #4]
 801669e:	80c2      	strh	r2, [r0, #6]
 80166a0:	f88d 2004 	strb.w	r2, [sp, #4]
 80166a4:	682a      	ldr	r2, [r5, #0]
 80166a6:	9200      	str	r2, [sp, #0]
 80166a8:	88aa      	ldrh	r2, [r5, #4]
 80166aa:	f8ad 2006 	strh.w	r2, [sp, #6]
 80166ae:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80166b2:	9202      	str	r2, [sp, #8]
 80166b4:	460c      	mov	r4, r1
 80166b6:	7802      	ldrb	r2, [r0, #0]
 80166b8:	9303      	str	r3, [sp, #12]
 80166ba:	4619      	mov	r1, r3
 80166bc:	f88d 200c 	strb.w	r2, [sp, #12]
 80166c0:	4620      	mov	r0, r4
 80166c2:	2210      	movs	r2, #16
 80166c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80166c8:	9306      	str	r3, [sp, #24]
 80166ca:	f000 febb 	bl	8017444 <uxr_buffer_submessage_header>
 80166ce:	4669      	mov	r1, sp
 80166d0:	4620      	mov	r0, r4
 80166d2:	f001 fe7b 	bl	80183cc <uxr_serialize_CREATE_CLIENT_Payload>
 80166d6:	b009      	add	sp, #36	@ 0x24
 80166d8:	bd30      	pop	{r4, r5, pc}
 80166da:	bf00      	nop
 80166dc:	0801ed74 	.word	0x0801ed74

080166e0 <uxr_buffer_delete_session>:
 80166e0:	b510      	push	{r4, lr}
 80166e2:	4b0c      	ldr	r3, [pc, #48]	@ (8016714 <uxr_buffer_delete_session+0x34>)
 80166e4:	b082      	sub	sp, #8
 80166e6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 80166ea:	f8ad c006 	strh.w	ip, [sp, #6]
 80166ee:	460c      	mov	r4, r1
 80166f0:	2202      	movs	r2, #2
 80166f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80166f6:	80c2      	strh	r2, [r0, #6]
 80166f8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80166fc:	2204      	movs	r2, #4
 80166fe:	2300      	movs	r3, #0
 8016700:	2103      	movs	r1, #3
 8016702:	4620      	mov	r0, r4
 8016704:	f000 fe9e 	bl	8017444 <uxr_buffer_submessage_header>
 8016708:	a901      	add	r1, sp, #4
 801670a:	4620      	mov	r0, r4
 801670c:	f001 ff04 	bl	8018518 <uxr_serialize_DELETE_Payload>
 8016710:	b002      	add	sp, #8
 8016712:	bd10      	pop	{r4, pc}
 8016714:	0801ed74 	.word	0x0801ed74

08016718 <uxr_read_create_session_status>:
 8016718:	b510      	push	{r4, lr}
 801671a:	b088      	sub	sp, #32
 801671c:	4604      	mov	r4, r0
 801671e:	4608      	mov	r0, r1
 8016720:	a901      	add	r1, sp, #4
 8016722:	f001 ff09 	bl	8018538 <uxr_deserialize_STATUS_AGENT_Payload>
 8016726:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801672a:	7163      	strb	r3, [r4, #5]
 801672c:	b008      	add	sp, #32
 801672e:	bd10      	pop	{r4, pc}

08016730 <uxr_read_delete_session_status>:
 8016730:	b510      	push	{r4, lr}
 8016732:	4604      	mov	r4, r0
 8016734:	b084      	sub	sp, #16
 8016736:	4608      	mov	r0, r1
 8016738:	a902      	add	r1, sp, #8
 801673a:	f001 ff2d 	bl	8018598 <uxr_deserialize_STATUS_Payload>
 801673e:	88e3      	ldrh	r3, [r4, #6]
 8016740:	2b02      	cmp	r3, #2
 8016742:	d001      	beq.n	8016748 <uxr_read_delete_session_status+0x18>
 8016744:	b004      	add	sp, #16
 8016746:	bd10      	pop	{r4, pc}
 8016748:	f10d 000a 	add.w	r0, sp, #10
 801674c:	f7fe fe62 	bl	8015414 <uxr_object_id_from_raw>
 8016750:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8016754:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8016758:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801675c:	b29b      	uxth	r3, r3
 801675e:	2b02      	cmp	r3, #2
 8016760:	bf04      	itt	eq
 8016762:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8016766:	7163      	strbeq	r3, [r4, #5]
 8016768:	b004      	add	sp, #16
 801676a:	bd10      	pop	{r4, pc}

0801676c <uxr_stamp_create_session_header>:
 801676c:	b510      	push	{r4, lr}
 801676e:	2208      	movs	r2, #8
 8016770:	b08a      	sub	sp, #40	@ 0x28
 8016772:	4604      	mov	r4, r0
 8016774:	eb0d 0002 	add.w	r0, sp, r2
 8016778:	f7f9 f83e 	bl	800f7f8 <ucdr_init_buffer>
 801677c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016780:	9400      	str	r4, [sp, #0]
 8016782:	2300      	movs	r3, #0
 8016784:	461a      	mov	r2, r3
 8016786:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801678a:	a802      	add	r0, sp, #8
 801678c:	f001 f854 	bl	8017838 <uxr_serialize_message_header>
 8016790:	b00a      	add	sp, #40	@ 0x28
 8016792:	bd10      	pop	{r4, pc}

08016794 <uxr_stamp_session_header>:
 8016794:	b530      	push	{r4, r5, lr}
 8016796:	b08d      	sub	sp, #52	@ 0x34
 8016798:	4604      	mov	r4, r0
 801679a:	460d      	mov	r5, r1
 801679c:	9203      	str	r2, [sp, #12]
 801679e:	4619      	mov	r1, r3
 80167a0:	a804      	add	r0, sp, #16
 80167a2:	2208      	movs	r2, #8
 80167a4:	f7f9 f828 	bl	800f7f8 <ucdr_init_buffer>
 80167a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80167ac:	9b03      	ldr	r3, [sp, #12]
 80167ae:	9400      	str	r4, [sp, #0]
 80167b0:	462a      	mov	r2, r5
 80167b2:	a804      	add	r0, sp, #16
 80167b4:	f001 f840 	bl	8017838 <uxr_serialize_message_header>
 80167b8:	b00d      	add	sp, #52	@ 0x34
 80167ba:	bd30      	pop	{r4, r5, pc}

080167bc <uxr_read_session_header>:
 80167bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167c0:	4607      	mov	r7, r0
 80167c2:	b084      	sub	sp, #16
 80167c4:	4608      	mov	r0, r1
 80167c6:	460c      	mov	r4, r1
 80167c8:	4615      	mov	r5, r2
 80167ca:	461e      	mov	r6, r3
 80167cc:	f7f9 f844 	bl	800f858 <ucdr_buffer_remaining>
 80167d0:	2808      	cmp	r0, #8
 80167d2:	d803      	bhi.n	80167dc <uxr_read_session_header+0x20>
 80167d4:	2000      	movs	r0, #0
 80167d6:	b004      	add	sp, #16
 80167d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167dc:	f10d 080c 	add.w	r8, sp, #12
 80167e0:	4633      	mov	r3, r6
 80167e2:	462a      	mov	r2, r5
 80167e4:	f8cd 8000 	str.w	r8, [sp]
 80167e8:	4620      	mov	r0, r4
 80167ea:	f10d 010b 	add.w	r1, sp, #11
 80167ee:	f001 f841 	bl	8017874 <uxr_deserialize_message_header>
 80167f2:	783a      	ldrb	r2, [r7, #0]
 80167f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80167f8:	4293      	cmp	r3, r2
 80167fa:	d1eb      	bne.n	80167d4 <uxr_read_session_header+0x18>
 80167fc:	061b      	lsls	r3, r3, #24
 80167fe:	d41c      	bmi.n	801683a <uxr_read_session_header+0x7e>
 8016800:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8016804:	787b      	ldrb	r3, [r7, #1]
 8016806:	429a      	cmp	r2, r3
 8016808:	d003      	beq.n	8016812 <uxr_read_session_header+0x56>
 801680a:	2001      	movs	r0, #1
 801680c:	f080 0001 	eor.w	r0, r0, #1
 8016810:	e7e1      	b.n	80167d6 <uxr_read_session_header+0x1a>
 8016812:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8016816:	78bb      	ldrb	r3, [r7, #2]
 8016818:	429a      	cmp	r2, r3
 801681a:	f107 0102 	add.w	r1, r7, #2
 801681e:	d1f4      	bne.n	801680a <uxr_read_session_header+0x4e>
 8016820:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8016824:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016828:	429a      	cmp	r2, r3
 801682a:	d1ee      	bne.n	801680a <uxr_read_session_header+0x4e>
 801682c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8016830:	784b      	ldrb	r3, [r1, #1]
 8016832:	429a      	cmp	r2, r3
 8016834:	d1e9      	bne.n	801680a <uxr_read_session_header+0x4e>
 8016836:	2000      	movs	r0, #0
 8016838:	e7e8      	b.n	801680c <uxr_read_session_header+0x50>
 801683a:	2001      	movs	r0, #1
 801683c:	e7cb      	b.n	80167d6 <uxr_read_session_header+0x1a>
 801683e:	bf00      	nop

08016840 <uxr_session_header_offset>:
 8016840:	f990 3000 	ldrsb.w	r3, [r0]
 8016844:	2b00      	cmp	r3, #0
 8016846:	bfac      	ite	ge
 8016848:	2008      	movge	r0, #8
 801684a:	2004      	movlt	r0, #4
 801684c:	4770      	bx	lr
 801684e:	bf00      	nop

08016850 <uxr_init_base_object_request>:
 8016850:	b510      	push	{r4, lr}
 8016852:	88c3      	ldrh	r3, [r0, #6]
 8016854:	b082      	sub	sp, #8
 8016856:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801685a:	9101      	str	r1, [sp, #4]
 801685c:	f1a3 010a 	sub.w	r1, r3, #10
 8016860:	b289      	uxth	r1, r1
 8016862:	42a1      	cmp	r1, r4
 8016864:	d80e      	bhi.n	8016884 <uxr_init_base_object_request+0x34>
 8016866:	3301      	adds	r3, #1
 8016868:	b29c      	uxth	r4, r3
 801686a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801686e:	b2db      	uxtb	r3, r3
 8016870:	80c4      	strh	r4, [r0, #6]
 8016872:	9801      	ldr	r0, [sp, #4]
 8016874:	7011      	strb	r1, [r2, #0]
 8016876:	7053      	strb	r3, [r2, #1]
 8016878:	1c91      	adds	r1, r2, #2
 801687a:	f7fe fddf 	bl	801543c <uxr_object_id_to_raw>
 801687e:	4620      	mov	r0, r4
 8016880:	b002      	add	sp, #8
 8016882:	bd10      	pop	{r4, pc}
 8016884:	230a      	movs	r3, #10
 8016886:	2100      	movs	r1, #0
 8016888:	461c      	mov	r4, r3
 801688a:	e7f1      	b.n	8016870 <uxr_init_base_object_request+0x20>

0801688c <uxr_parse_base_object_request>:
 801688c:	b570      	push	{r4, r5, r6, lr}
 801688e:	4604      	mov	r4, r0
 8016890:	3002      	adds	r0, #2
 8016892:	460d      	mov	r5, r1
 8016894:	4616      	mov	r6, r2
 8016896:	f7fe fdbd 	bl	8015414 <uxr_object_id_from_raw>
 801689a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801689e:	8028      	strh	r0, [r5, #0]
 80168a0:	806b      	strh	r3, [r5, #2]
 80168a2:	7822      	ldrb	r2, [r4, #0]
 80168a4:	7863      	ldrb	r3, [r4, #1]
 80168a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80168aa:	8033      	strh	r3, [r6, #0]
 80168ac:	bd70      	pop	{r4, r5, r6, pc}
 80168ae:	bf00      	nop

080168b0 <uxr_init_framing_io>:
 80168b0:	2300      	movs	r3, #0
 80168b2:	7041      	strb	r1, [r0, #1]
 80168b4:	7003      	strb	r3, [r0, #0]
 80168b6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80168b8:	4770      	bx	lr
 80168ba:	bf00      	nop

080168bc <uxr_write_framed_msg>:
 80168bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168c0:	4617      	mov	r7, r2
 80168c2:	7842      	ldrb	r2, [r0, #1]
 80168c4:	b083      	sub	sp, #12
 80168c6:	460e      	mov	r6, r1
 80168c8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80168cc:	469a      	mov	sl, r3
 80168ce:	2901      	cmp	r1, #1
 80168d0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 80168d4:	4604      	mov	r4, r0
 80168d6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80168da:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80168de:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80168e2:	f240 8137 	bls.w	8016b54 <uxr_write_framed_msg+0x298>
 80168e6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80168ea:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80168ee:	2901      	cmp	r1, #1
 80168f0:	f04f 0202 	mov.w	r2, #2
 80168f4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80168f8:	f240 808f 	bls.w	8016a1a <uxr_write_framed_msg+0x15e>
 80168fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80168fe:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8016902:	b2dd      	uxtb	r5, r3
 8016904:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8016908:	2203      	movs	r2, #3
 801690a:	2901      	cmp	r1, #1
 801690c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016910:	f240 809a 	bls.w	8016a48 <uxr_write_framed_msg+0x18c>
 8016914:	18a1      	adds	r1, r4, r2
 8016916:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016918:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801691c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8016920:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8016924:	3201      	adds	r2, #1
 8016926:	2801      	cmp	r0, #1
 8016928:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801692c:	f240 80a0 	bls.w	8016a70 <uxr_write_framed_msg+0x1b4>
 8016930:	18a0      	adds	r0, r4, r2
 8016932:	3201      	adds	r2, #1
 8016934:	b2d2      	uxtb	r2, r2
 8016936:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801693a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801693e:	2b00      	cmp	r3, #0
 8016940:	f000 80a9 	beq.w	8016a96 <uxr_write_framed_msg+0x1da>
 8016944:	f04f 0900 	mov.w	r9, #0
 8016948:	46c8      	mov	r8, r9
 801694a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801694e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8016952:	2901      	cmp	r1, #1
 8016954:	f240 80c3 	bls.w	8016ade <uxr_write_framed_msg+0x222>
 8016958:	2a29      	cmp	r2, #41	@ 0x29
 801695a:	f200 809f 	bhi.w	8016a9c <uxr_write_framed_msg+0x1e0>
 801695e:	18a1      	adds	r1, r4, r2
 8016960:	3201      	adds	r2, #1
 8016962:	b2d2      	uxtb	r2, r2
 8016964:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8016968:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801696c:	ea89 0303 	eor.w	r3, r9, r3
 8016970:	498c      	ldr	r1, [pc, #560]	@ (8016ba4 <uxr_write_framed_msg+0x2e8>)
 8016972:	b2db      	uxtb	r3, r3
 8016974:	f108 0801 	add.w	r8, r8, #1
 8016978:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801697c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8016980:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016982:	4543      	cmp	r3, r8
 8016984:	d8e1      	bhi.n	801694a <uxr_write_framed_msg+0x8e>
 8016986:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801698a:	fa5f f889 	uxtb.w	r8, r9
 801698e:	9301      	str	r3, [sp, #4]
 8016990:	f04f 0900 	mov.w	r9, #0
 8016994:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8016998:	fa5f f18a 	uxtb.w	r1, sl
 801699c:	2901      	cmp	r1, #1
 801699e:	d921      	bls.n	80169e4 <uxr_write_framed_msg+0x128>
 80169a0:	2a29      	cmp	r2, #41	@ 0x29
 80169a2:	f240 80af 	bls.w	8016b04 <uxr_write_framed_msg+0x248>
 80169a6:	2500      	movs	r5, #0
 80169a8:	e000      	b.n	80169ac <uxr_write_framed_msg+0xf0>
 80169aa:	b160      	cbz	r0, 80169c6 <uxr_write_framed_msg+0x10a>
 80169ac:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80169b0:	1b52      	subs	r2, r2, r5
 80169b2:	465b      	mov	r3, fp
 80169b4:	4421      	add	r1, r4
 80169b6:	4638      	mov	r0, r7
 80169b8:	47b0      	blx	r6
 80169ba:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80169be:	4405      	add	r5, r0
 80169c0:	4295      	cmp	r5, r2
 80169c2:	d3f2      	bcc.n	80169aa <uxr_write_framed_msg+0xee>
 80169c4:	d003      	beq.n	80169ce <uxr_write_framed_msg+0x112>
 80169c6:	2000      	movs	r0, #0
 80169c8:	b003      	add	sp, #12
 80169ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169ce:	fa5f f18a 	uxtb.w	r1, sl
 80169d2:	f04f 0300 	mov.w	r3, #0
 80169d6:	2901      	cmp	r1, #1
 80169d8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80169dc:	f04f 0200 	mov.w	r2, #0
 80169e0:	f200 8090 	bhi.w	8016b04 <uxr_write_framed_msg+0x248>
 80169e4:	1c51      	adds	r1, r2, #1
 80169e6:	b2c9      	uxtb	r1, r1
 80169e8:	2929      	cmp	r1, #41	@ 0x29
 80169ea:	d8dc      	bhi.n	80169a6 <uxr_write_framed_msg+0xea>
 80169ec:	18a5      	adds	r5, r4, r2
 80169ee:	4421      	add	r1, r4
 80169f0:	3202      	adds	r2, #2
 80169f2:	f088 0820 	eor.w	r8, r8, #32
 80169f6:	4648      	mov	r0, r9
 80169f8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80169fc:	b2d2      	uxtb	r2, r2
 80169fe:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8016a02:	f04f 0901 	mov.w	r9, #1
 8016a06:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8016a0a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016a0e:	2800      	cmp	r0, #0
 8016a10:	f040 8085 	bne.w	8016b1e <uxr_write_framed_msg+0x262>
 8016a14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016a18:	e7bc      	b.n	8016994 <uxr_write_framed_msg+0xd8>
 8016a1a:	4611      	mov	r1, r2
 8016a1c:	f04f 0c03 	mov.w	ip, #3
 8016a20:	2204      	movs	r2, #4
 8016a22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a24:	4421      	add	r1, r4
 8016a26:	b2dd      	uxtb	r5, r3
 8016a28:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8016a2c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8016a30:	44a4      	add	ip, r4
 8016a32:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8016a36:	f080 0020 	eor.w	r0, r0, #32
 8016a3a:	2901      	cmp	r1, #1
 8016a3c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8016a40:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016a44:	f63f af66 	bhi.w	8016914 <uxr_write_framed_msg+0x58>
 8016a48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a4a:	18a0      	adds	r0, r4, r2
 8016a4c:	f085 0520 	eor.w	r5, r5, #32
 8016a50:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8016a54:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8016a58:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8016a5c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8016a60:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8016a64:	3202      	adds	r2, #2
 8016a66:	2801      	cmp	r0, #1
 8016a68:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016a6c:	f63f af60 	bhi.w	8016930 <uxr_write_framed_msg+0x74>
 8016a70:	1c50      	adds	r0, r2, #1
 8016a72:	18a5      	adds	r5, r4, r2
 8016a74:	fa54 f080 	uxtab	r0, r4, r0
 8016a78:	3202      	adds	r2, #2
 8016a7a:	f081 0120 	eor.w	r1, r1, #32
 8016a7e:	b2d2      	uxtb	r2, r2
 8016a80:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8016a84:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8016a88:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8016a8c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	f47f af57 	bne.w	8016944 <uxr_write_framed_msg+0x88>
 8016a96:	9301      	str	r3, [sp, #4]
 8016a98:	4698      	mov	r8, r3
 8016a9a:	e779      	b.n	8016990 <uxr_write_framed_msg+0xd4>
 8016a9c:	2500      	movs	r5, #0
 8016a9e:	e001      	b.n	8016aa4 <uxr_write_framed_msg+0x1e8>
 8016aa0:	2800      	cmp	r0, #0
 8016aa2:	d090      	beq.n	80169c6 <uxr_write_framed_msg+0x10a>
 8016aa4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8016aa8:	1b52      	subs	r2, r2, r5
 8016aaa:	465b      	mov	r3, fp
 8016aac:	4421      	add	r1, r4
 8016aae:	4638      	mov	r0, r7
 8016ab0:	47b0      	blx	r6
 8016ab2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016ab6:	4405      	add	r5, r0
 8016ab8:	4295      	cmp	r5, r2
 8016aba:	d3f1      	bcc.n	8016aa0 <uxr_write_framed_msg+0x1e4>
 8016abc:	d183      	bne.n	80169c6 <uxr_write_framed_msg+0x10a>
 8016abe:	f04f 0300 	mov.w	r3, #0
 8016ac2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016ac6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016ac8:	4543      	cmp	r3, r8
 8016aca:	d964      	bls.n	8016b96 <uxr_write_framed_msg+0x2da>
 8016acc:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8016ad0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8016ad4:	2901      	cmp	r1, #1
 8016ad6:	f04f 0200 	mov.w	r2, #0
 8016ada:	f63f af3d 	bhi.w	8016958 <uxr_write_framed_msg+0x9c>
 8016ade:	1c51      	adds	r1, r2, #1
 8016ae0:	b2c9      	uxtb	r1, r1
 8016ae2:	2929      	cmp	r1, #41	@ 0x29
 8016ae4:	d8da      	bhi.n	8016a9c <uxr_write_framed_msg+0x1e0>
 8016ae6:	18a0      	adds	r0, r4, r2
 8016ae8:	4421      	add	r1, r4
 8016aea:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8016aee:	3202      	adds	r2, #2
 8016af0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8016af4:	b2d2      	uxtb	r2, r2
 8016af6:	f083 0020 	eor.w	r0, r3, #32
 8016afa:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8016afe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016b02:	e733      	b.n	801696c <uxr_write_framed_msg+0xb0>
 8016b04:	18a1      	adds	r1, r4, r2
 8016b06:	3201      	adds	r2, #1
 8016b08:	4648      	mov	r0, r9
 8016b0a:	b2d2      	uxtb	r2, r2
 8016b0c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8016b10:	f04f 0901 	mov.w	r9, #1
 8016b14:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016b18:	2800      	cmp	r0, #0
 8016b1a:	f43f af7b 	beq.w	8016a14 <uxr_write_framed_msg+0x158>
 8016b1e:	2500      	movs	r5, #0
 8016b20:	e002      	b.n	8016b28 <uxr_write_framed_msg+0x26c>
 8016b22:	2800      	cmp	r0, #0
 8016b24:	f43f af4f 	beq.w	80169c6 <uxr_write_framed_msg+0x10a>
 8016b28:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8016b2c:	1b52      	subs	r2, r2, r5
 8016b2e:	465b      	mov	r3, fp
 8016b30:	4421      	add	r1, r4
 8016b32:	4638      	mov	r0, r7
 8016b34:	47b0      	blx	r6
 8016b36:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016b3a:	4405      	add	r5, r0
 8016b3c:	4295      	cmp	r5, r2
 8016b3e:	d3f0      	bcc.n	8016b22 <uxr_write_framed_msg+0x266>
 8016b40:	f47f af41 	bne.w	80169c6 <uxr_write_framed_msg+0x10a>
 8016b44:	2300      	movs	r3, #0
 8016b46:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016b4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016b4c:	b298      	uxth	r0, r3
 8016b4e:	b003      	add	sp, #12
 8016b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b54:	217d      	movs	r1, #125	@ 0x7d
 8016b56:	f082 0220 	eor.w	r2, r2, #32
 8016b5a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8016b5e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8016b62:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8016b66:	2901      	cmp	r1, #1
 8016b68:	f04f 0203 	mov.w	r2, #3
 8016b6c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016b70:	d804      	bhi.n	8016b7c <uxr_write_framed_msg+0x2c0>
 8016b72:	4611      	mov	r1, r2
 8016b74:	f04f 0c04 	mov.w	ip, #4
 8016b78:	2205      	movs	r2, #5
 8016b7a:	e752      	b.n	8016a22 <uxr_write_framed_msg+0x166>
 8016b7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016b7e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8016b82:	b2dd      	uxtb	r5, r3
 8016b84:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8016b88:	2204      	movs	r2, #4
 8016b8a:	2901      	cmp	r1, #1
 8016b8c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016b90:	f63f aec0 	bhi.w	8016914 <uxr_write_framed_msg+0x58>
 8016b94:	e758      	b.n	8016a48 <uxr_write_framed_msg+0x18c>
 8016b96:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8016b9a:	fa5f f889 	uxtb.w	r8, r9
 8016b9e:	9301      	str	r3, [sp, #4]
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	e6f5      	b.n	8016990 <uxr_write_framed_msg+0xd4>
 8016ba4:	0802066c 	.word	0x0802066c

08016ba8 <uxr_framing_read_transport>:
 8016ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bac:	4604      	mov	r4, r0
 8016bae:	b083      	sub	sp, #12
 8016bb0:	461f      	mov	r7, r3
 8016bb2:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8016bb6:	4689      	mov	r9, r1
 8016bb8:	4692      	mov	sl, r2
 8016bba:	f000 fc89 	bl	80174d0 <uxr_millis>
 8016bbe:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016bc2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8016bc6:	42b3      	cmp	r3, r6
 8016bc8:	4680      	mov	r8, r0
 8016bca:	d061      	beq.n	8016c90 <uxr_framing_read_transport+0xe8>
 8016bcc:	d81c      	bhi.n	8016c08 <uxr_framing_read_transport+0x60>
 8016bce:	1e75      	subs	r5, r6, #1
 8016bd0:	1aed      	subs	r5, r5, r3
 8016bd2:	b2ed      	uxtb	r5, r5
 8016bd4:	2600      	movs	r6, #0
 8016bd6:	455d      	cmp	r5, fp
 8016bd8:	d81f      	bhi.n	8016c1a <uxr_framing_read_transport+0x72>
 8016bda:	19ab      	adds	r3, r5, r6
 8016bdc:	455b      	cmp	r3, fp
 8016bde:	bf84      	itt	hi
 8016be0:	ebab 0605 	subhi.w	r6, fp, r5
 8016be4:	b2f6      	uxtbhi	r6, r6
 8016be6:	b9ed      	cbnz	r5, 8016c24 <uxr_framing_read_transport+0x7c>
 8016be8:	f04f 0b00 	mov.w	fp, #0
 8016bec:	f000 fc70 	bl	80174d0 <uxr_millis>
 8016bf0:	683b      	ldr	r3, [r7, #0]
 8016bf2:	eba0 0808 	sub.w	r8, r0, r8
 8016bf6:	eba3 0308 	sub.w	r3, r3, r8
 8016bfa:	4658      	mov	r0, fp
 8016bfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016c00:	603b      	str	r3, [r7, #0]
 8016c02:	b003      	add	sp, #12
 8016c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c08:	2e00      	cmp	r6, #0
 8016c0a:	d049      	beq.n	8016ca0 <uxr_framing_read_transport+0xf8>
 8016c0c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8016c10:	b2ed      	uxtb	r5, r5
 8016c12:	3e01      	subs	r6, #1
 8016c14:	455d      	cmp	r5, fp
 8016c16:	b2f6      	uxtb	r6, r6
 8016c18:	d9df      	bls.n	8016bda <uxr_framing_read_transport+0x32>
 8016c1a:	fa5f f58b 	uxtb.w	r5, fp
 8016c1e:	2600      	movs	r6, #0
 8016c20:	2d00      	cmp	r5, #0
 8016c22:	d0e1      	beq.n	8016be8 <uxr_framing_read_transport+0x40>
 8016c24:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016c28:	3102      	adds	r1, #2
 8016c2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016c2c:	9300      	str	r3, [sp, #0]
 8016c2e:	683b      	ldr	r3, [r7, #0]
 8016c30:	4421      	add	r1, r4
 8016c32:	462a      	mov	r2, r5
 8016c34:	4650      	mov	r0, sl
 8016c36:	47c8      	blx	r9
 8016c38:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016c3c:	4a1a      	ldr	r2, [pc, #104]	@ (8016ca8 <uxr_framing_read_transport+0x100>)
 8016c3e:	4403      	add	r3, r0
 8016c40:	0859      	lsrs	r1, r3, #1
 8016c42:	fba2 2101 	umull	r2, r1, r2, r1
 8016c46:	0889      	lsrs	r1, r1, #2
 8016c48:	222a      	movs	r2, #42	@ 0x2a
 8016c4a:	fb02 3111 	mls	r1, r2, r1, r3
 8016c4e:	4683      	mov	fp, r0
 8016c50:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8016c54:	2800      	cmp	r0, #0
 8016c56:	d0c7      	beq.n	8016be8 <uxr_framing_read_transport+0x40>
 8016c58:	42a8      	cmp	r0, r5
 8016c5a:	d1c7      	bne.n	8016bec <uxr_framing_read_transport+0x44>
 8016c5c:	2e00      	cmp	r6, #0
 8016c5e:	d0c5      	beq.n	8016bec <uxr_framing_read_transport+0x44>
 8016c60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016c62:	9300      	str	r3, [sp, #0]
 8016c64:	3102      	adds	r1, #2
 8016c66:	4632      	mov	r2, r6
 8016c68:	4421      	add	r1, r4
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	4650      	mov	r0, sl
 8016c6e:	47c8      	blx	r9
 8016c70:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016c74:	4a0c      	ldr	r2, [pc, #48]	@ (8016ca8 <uxr_framing_read_transport+0x100>)
 8016c76:	180b      	adds	r3, r1, r0
 8016c78:	0859      	lsrs	r1, r3, #1
 8016c7a:	fba2 1201 	umull	r1, r2, r2, r1
 8016c7e:	0892      	lsrs	r2, r2, #2
 8016c80:	212a      	movs	r1, #42	@ 0x2a
 8016c82:	fb01 3312 	mls	r3, r1, r2, r3
 8016c86:	eb00 0b05 	add.w	fp, r0, r5
 8016c8a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8016c8e:	e7ad      	b.n	8016bec <uxr_framing_read_transport+0x44>
 8016c90:	2600      	movs	r6, #0
 8016c92:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8016c96:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8016c98:	d9bf      	bls.n	8016c1a <uxr_framing_read_transport+0x72>
 8016c9a:	2102      	movs	r1, #2
 8016c9c:	2529      	movs	r5, #41	@ 0x29
 8016c9e:	e7c4      	b.n	8016c2a <uxr_framing_read_transport+0x82>
 8016ca0:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8016ca4:	b2ed      	uxtb	r5, r5
 8016ca6:	e796      	b.n	8016bd6 <uxr_framing_read_transport+0x2e>
 8016ca8:	30c30c31 	.word	0x30c30c31

08016cac <uxr_read_framed_msg>:
 8016cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cb0:	461e      	mov	r6, r3
 8016cb2:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8016cb6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8016cba:	429d      	cmp	r5, r3
 8016cbc:	b083      	sub	sp, #12
 8016cbe:	4604      	mov	r4, r0
 8016cc0:	4688      	mov	r8, r1
 8016cc2:	4691      	mov	r9, r2
 8016cc4:	f000 8188 	beq.w	8016fd8 <uxr_read_framed_msg+0x32c>
 8016cc8:	7823      	ldrb	r3, [r4, #0]
 8016cca:	4dc1      	ldr	r5, [pc, #772]	@ (8016fd0 <uxr_read_framed_msg+0x324>)
 8016ccc:	4fc1      	ldr	r7, [pc, #772]	@ (8016fd4 <uxr_read_framed_msg+0x328>)
 8016cce:	2b07      	cmp	r3, #7
 8016cd0:	d8fd      	bhi.n	8016cce <uxr_read_framed_msg+0x22>
 8016cd2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016cd6:	0115      	.short	0x0115
 8016cd8:	00d600f6 	.word	0x00d600f6
 8016cdc:	009000b9 	.word	0x009000b9
 8016ce0:	0030004d 	.word	0x0030004d
 8016ce4:	0008      	.short	0x0008
 8016ce6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016cea:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016cee:	4299      	cmp	r1, r3
 8016cf0:	f000 814a 	beq.w	8016f88 <uxr_read_framed_msg+0x2dc>
 8016cf4:	18e2      	adds	r2, r4, r3
 8016cf6:	7892      	ldrb	r2, [r2, #2]
 8016cf8:	2a7d      	cmp	r2, #125	@ 0x7d
 8016cfa:	f000 8199 	beq.w	8017030 <uxr_read_framed_msg+0x384>
 8016cfe:	3301      	adds	r3, #1
 8016d00:	0858      	lsrs	r0, r3, #1
 8016d02:	fba5 1000 	umull	r1, r0, r5, r0
 8016d06:	0880      	lsrs	r0, r0, #2
 8016d08:	212a      	movs	r1, #42	@ 0x2a
 8016d0a:	fb01 3310 	mls	r3, r1, r0, r3
 8016d0e:	2a7e      	cmp	r2, #126	@ 0x7e
 8016d10:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016d14:	f000 8252 	beq.w	80171bc <uxr_read_framed_msg+0x510>
 8016d18:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8016d1a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8016d1c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8016d20:	b29b      	uxth	r3, r3
 8016d22:	2200      	movs	r2, #0
 8016d24:	4299      	cmp	r1, r3
 8016d26:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8016d28:	7022      	strb	r2, [r4, #0]
 8016d2a:	f000 8179 	beq.w	8017020 <uxr_read_framed_msg+0x374>
 8016d2e:	2000      	movs	r0, #0
 8016d30:	b003      	add	sp, #12
 8016d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d36:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016d3a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016d3e:	4299      	cmp	r1, r3
 8016d40:	f000 8131 	beq.w	8016fa6 <uxr_read_framed_msg+0x2fa>
 8016d44:	18e2      	adds	r2, r4, r3
 8016d46:	7890      	ldrb	r0, [r2, #2]
 8016d48:	287d      	cmp	r0, #125	@ 0x7d
 8016d4a:	f000 8190 	beq.w	801706e <uxr_read_framed_msg+0x3c2>
 8016d4e:	3301      	adds	r3, #1
 8016d50:	085a      	lsrs	r2, r3, #1
 8016d52:	fba5 1202 	umull	r1, r2, r5, r2
 8016d56:	0892      	lsrs	r2, r2, #2
 8016d58:	212a      	movs	r1, #42	@ 0x2a
 8016d5a:	fb01 3312 	mls	r3, r1, r2, r3
 8016d5e:	287e      	cmp	r0, #126	@ 0x7e
 8016d60:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016d64:	f000 821a 	beq.w	801719c <uxr_read_framed_msg+0x4f0>
 8016d68:	2307      	movs	r3, #7
 8016d6a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8016d6c:	7023      	strb	r3, [r4, #0]
 8016d6e:	e7ae      	b.n	8016cce <uxr_read_framed_msg+0x22>
 8016d70:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8016d72:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8016d76:	459e      	cmp	lr, r3
 8016d78:	d938      	bls.n	8016dec <uxr_read_framed_msg+0x140>
 8016d7a:	ee07 8a90 	vmov	s15, r8
 8016d7e:	212a      	movs	r1, #42	@ 0x2a
 8016d80:	e020      	b.n	8016dc4 <uxr_read_framed_msg+0x118>
 8016d82:	f89b c002 	ldrb.w	ip, [fp, #2]
 8016d86:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8016d8a:	f000 80d4 	beq.w	8016f36 <uxr_read_framed_msg+0x28a>
 8016d8e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8016d92:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016d96:	f000 8219 	beq.w	80171cc <uxr_read_framed_msg+0x520>
 8016d9a:	f806 c003 	strb.w	ip, [r6, r3]
 8016d9e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8016da2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8016da4:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8016da8:	ea8a 000c 	eor.w	r0, sl, ip
 8016dac:	b2c0      	uxtb	r0, r0
 8016dae:	3301      	adds	r3, #1
 8016db0:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8016db4:	b29b      	uxth	r3, r3
 8016db6:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8016dba:	4573      	cmp	r3, lr
 8016dbc:	8663      	strh	r3, [r4, #50]	@ 0x32
 8016dbe:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8016dc0:	f080 8120 	bcs.w	8017004 <uxr_read_framed_msg+0x358>
 8016dc4:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8016dc8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8016dcc:	f100 0c01 	add.w	ip, r0, #1
 8016dd0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016dd4:	fba5 8202 	umull	r8, r2, r5, r2
 8016dd8:	0892      	lsrs	r2, r2, #2
 8016dda:	4582      	cmp	sl, r0
 8016ddc:	eb04 0b00 	add.w	fp, r4, r0
 8016de0:	fb01 c212 	mls	r2, r1, r2, ip
 8016de4:	d1cd      	bne.n	8016d82 <uxr_read_framed_msg+0xd6>
 8016de6:	ee17 8a90 	vmov	r8, s15
 8016dea:	459e      	cmp	lr, r3
 8016dec:	f040 8111 	bne.w	8017012 <uxr_read_framed_msg+0x366>
 8016df0:	2306      	movs	r3, #6
 8016df2:	7023      	strb	r3, [r4, #0]
 8016df4:	e76b      	b.n	8016cce <uxr_read_framed_msg+0x22>
 8016df6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016dfa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016dfe:	4298      	cmp	r0, r3
 8016e00:	f000 80c2 	beq.w	8016f88 <uxr_read_framed_msg+0x2dc>
 8016e04:	18e2      	adds	r2, r4, r3
 8016e06:	7891      	ldrb	r1, [r2, #2]
 8016e08:	297d      	cmp	r1, #125	@ 0x7d
 8016e0a:	f000 814c 	beq.w	80170a6 <uxr_read_framed_msg+0x3fa>
 8016e0e:	3301      	adds	r3, #1
 8016e10:	085a      	lsrs	r2, r3, #1
 8016e12:	fba5 0202 	umull	r0, r2, r5, r2
 8016e16:	0892      	lsrs	r2, r2, #2
 8016e18:	202a      	movs	r0, #42	@ 0x2a
 8016e1a:	fb00 3312 	mls	r3, r0, r2, r3
 8016e1e:	297e      	cmp	r1, #126	@ 0x7e
 8016e20:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016e24:	f000 81ca 	beq.w	80171bc <uxr_read_framed_msg+0x510>
 8016e28:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8016e2a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016e2e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016e30:	b29b      	uxth	r3, r3
 8016e32:	2000      	movs	r0, #0
 8016e34:	428b      	cmp	r3, r1
 8016e36:	8623      	strh	r3, [r4, #48]	@ 0x30
 8016e38:	8660      	strh	r0, [r4, #50]	@ 0x32
 8016e3a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8016e3c:	f240 80df 	bls.w	8016ffe <uxr_read_framed_msg+0x352>
 8016e40:	7020      	strb	r0, [r4, #0]
 8016e42:	b003      	add	sp, #12
 8016e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e48:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016e4c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016e50:	4299      	cmp	r1, r3
 8016e52:	f000 80a8 	beq.w	8016fa6 <uxr_read_framed_msg+0x2fa>
 8016e56:	18e2      	adds	r2, r4, r3
 8016e58:	7890      	ldrb	r0, [r2, #2]
 8016e5a:	287d      	cmp	r0, #125	@ 0x7d
 8016e5c:	f000 8164 	beq.w	8017128 <uxr_read_framed_msg+0x47c>
 8016e60:	3301      	adds	r3, #1
 8016e62:	085a      	lsrs	r2, r3, #1
 8016e64:	fba5 1202 	umull	r1, r2, r5, r2
 8016e68:	0892      	lsrs	r2, r2, #2
 8016e6a:	212a      	movs	r1, #42	@ 0x2a
 8016e6c:	fb01 3312 	mls	r3, r1, r2, r3
 8016e70:	287e      	cmp	r0, #126	@ 0x7e
 8016e72:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016e76:	f000 8191 	beq.w	801719c <uxr_read_framed_msg+0x4f0>
 8016e7a:	2304      	movs	r3, #4
 8016e7c:	8620      	strh	r0, [r4, #48]	@ 0x30
 8016e7e:	7023      	strb	r3, [r4, #0]
 8016e80:	e725      	b.n	8016cce <uxr_read_framed_msg+0x22>
 8016e82:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016e86:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016e8a:	4290      	cmp	r0, r2
 8016e8c:	f000 80b3 	beq.w	8016ff6 <uxr_read_framed_msg+0x34a>
 8016e90:	18a3      	adds	r3, r4, r2
 8016e92:	7899      	ldrb	r1, [r3, #2]
 8016e94:	297d      	cmp	r1, #125	@ 0x7d
 8016e96:	f000 8164 	beq.w	8017162 <uxr_read_framed_msg+0x4b6>
 8016e9a:	3201      	adds	r2, #1
 8016e9c:	0850      	lsrs	r0, r2, #1
 8016e9e:	fba5 3000 	umull	r3, r0, r5, r0
 8016ea2:	0880      	lsrs	r0, r0, #2
 8016ea4:	232a      	movs	r3, #42	@ 0x2a
 8016ea6:	fb03 2210 	mls	r2, r3, r0, r2
 8016eaa:	297e      	cmp	r1, #126	@ 0x7e
 8016eac:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016eb0:	f000 8188 	beq.w	80171c4 <uxr_read_framed_msg+0x518>
 8016eb4:	7863      	ldrb	r3, [r4, #1]
 8016eb6:	428b      	cmp	r3, r1
 8016eb8:	bf0c      	ite	eq
 8016eba:	2303      	moveq	r3, #3
 8016ebc:	2300      	movne	r3, #0
 8016ebe:	7023      	strb	r3, [r4, #0]
 8016ec0:	e705      	b.n	8016cce <uxr_read_framed_msg+0x22>
 8016ec2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016ec6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016eca:	2200      	movs	r2, #0
 8016ecc:	4299      	cmp	r1, r3
 8016ece:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8016ed2:	d06c      	beq.n	8016fae <uxr_read_framed_msg+0x302>
 8016ed4:	18e2      	adds	r2, r4, r3
 8016ed6:	7890      	ldrb	r0, [r2, #2]
 8016ed8:	287d      	cmp	r0, #125	@ 0x7d
 8016eda:	f000 8101 	beq.w	80170e0 <uxr_read_framed_msg+0x434>
 8016ede:	3301      	adds	r3, #1
 8016ee0:	085a      	lsrs	r2, r3, #1
 8016ee2:	fba5 1202 	umull	r1, r2, r5, r2
 8016ee6:	0892      	lsrs	r2, r2, #2
 8016ee8:	212a      	movs	r1, #42	@ 0x2a
 8016eea:	fb01 3312 	mls	r3, r1, r2, r3
 8016eee:	287e      	cmp	r0, #126	@ 0x7e
 8016ef0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8016ef4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016ef8:	d059      	beq.n	8016fae <uxr_read_framed_msg+0x302>
 8016efa:	2302      	movs	r3, #2
 8016efc:	7023      	strb	r3, [r4, #0]
 8016efe:	e6e6      	b.n	8016cce <uxr_read_framed_msg+0x22>
 8016f00:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8016f04:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016f08:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8016f0c:	1c51      	adds	r1, r2, #1
 8016f0e:	084b      	lsrs	r3, r1, #1
 8016f10:	fba5 c303 	umull	ip, r3, r5, r3
 8016f14:	089b      	lsrs	r3, r3, #2
 8016f16:	fb0e 1313 	mls	r3, lr, r3, r1
 8016f1a:	4592      	cmp	sl, r2
 8016f1c:	eb04 0002 	add.w	r0, r4, r2
 8016f20:	b2da      	uxtb	r2, r3
 8016f22:	f43f af04 	beq.w	8016d2e <uxr_read_framed_msg+0x82>
 8016f26:	7883      	ldrb	r3, [r0, #2]
 8016f28:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016f2c:	2b7e      	cmp	r3, #126	@ 0x7e
 8016f2e:	d1ed      	bne.n	8016f0c <uxr_read_framed_msg+0x260>
 8016f30:	2301      	movs	r3, #1
 8016f32:	7023      	strb	r3, [r4, #0]
 8016f34:	e6cb      	b.n	8016cce <uxr_read_framed_msg+0x22>
 8016f36:	f100 0c01 	add.w	ip, r0, #1
 8016f3a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016f3e:	fba5 8202 	umull	r8, r2, r5, r2
 8016f42:	0892      	lsrs	r2, r2, #2
 8016f44:	fb01 c212 	mls	r2, r1, r2, ip
 8016f48:	eb04 0c02 	add.w	ip, r4, r2
 8016f4c:	b2d2      	uxtb	r2, r2
 8016f4e:	4592      	cmp	sl, r2
 8016f50:	f100 0002 	add.w	r0, r0, #2
 8016f54:	f43f af47 	beq.w	8016de6 <uxr_read_framed_msg+0x13a>
 8016f58:	0842      	lsrs	r2, r0, #1
 8016f5a:	f89c a002 	ldrb.w	sl, [ip, #2]
 8016f5e:	fba5 8202 	umull	r8, r2, r5, r2
 8016f62:	0892      	lsrs	r2, r2, #2
 8016f64:	fb01 0012 	mls	r0, r1, r2, r0
 8016f68:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8016f6c:	f08a 0c20 	eor.w	ip, sl, #32
 8016f70:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8016f74:	f47f af11 	bne.w	8016d9a <uxr_read_framed_msg+0xee>
 8016f78:	459e      	cmp	lr, r3
 8016f7a:	ee17 8a90 	vmov	r8, s15
 8016f7e:	f43f af37 	beq.w	8016df0 <uxr_read_framed_msg+0x144>
 8016f82:	2301      	movs	r3, #1
 8016f84:	7023      	strb	r3, [r4, #0]
 8016f86:	e6a2      	b.n	8016cce <uxr_read_framed_msg+0x22>
 8016f88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016f8a:	9300      	str	r3, [sp, #0]
 8016f8c:	2301      	movs	r3, #1
 8016f8e:	9301      	str	r3, [sp, #4]
 8016f90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016f92:	464a      	mov	r2, r9
 8016f94:	4641      	mov	r1, r8
 8016f96:	4620      	mov	r0, r4
 8016f98:	f7ff fe06 	bl	8016ba8 <uxr_framing_read_transport>
 8016f9c:	2800      	cmp	r0, #0
 8016f9e:	f43f aec6 	beq.w	8016d2e <uxr_read_framed_msg+0x82>
 8016fa2:	7823      	ldrb	r3, [r4, #0]
 8016fa4:	e693      	b.n	8016cce <uxr_read_framed_msg+0x22>
 8016fa6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016fa8:	9300      	str	r3, [sp, #0]
 8016faa:	2302      	movs	r3, #2
 8016fac:	e7ef      	b.n	8016f8e <uxr_read_framed_msg+0x2e2>
 8016fae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016fb0:	9300      	str	r3, [sp, #0]
 8016fb2:	2304      	movs	r3, #4
 8016fb4:	9301      	str	r3, [sp, #4]
 8016fb6:	464a      	mov	r2, r9
 8016fb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016fba:	4641      	mov	r1, r8
 8016fbc:	4620      	mov	r0, r4
 8016fbe:	f7ff fdf3 	bl	8016ba8 <uxr_framing_read_transport>
 8016fc2:	2800      	cmp	r0, #0
 8016fc4:	d1ed      	bne.n	8016fa2 <uxr_read_framed_msg+0x2f6>
 8016fc6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8016fca:	2b7e      	cmp	r3, #126	@ 0x7e
 8016fcc:	d0e9      	beq.n	8016fa2 <uxr_read_framed_msg+0x2f6>
 8016fce:	e6ae      	b.n	8016d2e <uxr_read_framed_msg+0x82>
 8016fd0:	30c30c31 	.word	0x30c30c31
 8016fd4:	0802066c 	.word	0x0802066c
 8016fd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016fda:	9300      	str	r3, [sp, #0]
 8016fdc:	2305      	movs	r3, #5
 8016fde:	9301      	str	r3, [sp, #4]
 8016fe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016fe2:	f7ff fde1 	bl	8016ba8 <uxr_framing_read_transport>
 8016fe6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016fea:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016fee:	429a      	cmp	r2, r3
 8016ff0:	f43f ae9d 	beq.w	8016d2e <uxr_read_framed_msg+0x82>
 8016ff4:	e668      	b.n	8016cc8 <uxr_read_framed_msg+0x1c>
 8016ff6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016ff8:	9300      	str	r3, [sp, #0]
 8016ffa:	2303      	movs	r3, #3
 8016ffc:	e7c7      	b.n	8016f8e <uxr_read_framed_msg+0x2e2>
 8016ffe:	2305      	movs	r3, #5
 8017000:	7023      	strb	r3, [r4, #0]
 8017002:	e664      	b.n	8016cce <uxr_read_framed_msg+0x22>
 8017004:	ee17 8a90 	vmov	r8, s15
 8017008:	f43f aef2 	beq.w	8016df0 <uxr_read_framed_msg+0x144>
 801700c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8017010:	d08e      	beq.n	8016f30 <uxr_read_framed_msg+0x284>
 8017012:	ebae 0303 	sub.w	r3, lr, r3
 8017016:	3302      	adds	r3, #2
 8017018:	9301      	str	r3, [sp, #4]
 801701a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801701c:	9300      	str	r3, [sp, #0]
 801701e:	e7b7      	b.n	8016f90 <uxr_read_framed_msg+0x2e4>
 8017020:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017022:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8017026:	7013      	strb	r3, [r2, #0]
 8017028:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801702a:	b003      	add	sp, #12
 801702c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017030:	f103 0c01 	add.w	ip, r3, #1
 8017034:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017038:	fba5 0202 	umull	r0, r2, r5, r2
 801703c:	0892      	lsrs	r2, r2, #2
 801703e:	202a      	movs	r0, #42	@ 0x2a
 8017040:	fb00 c212 	mls	r2, r0, r2, ip
 8017044:	fa5f fc82 	uxtb.w	ip, r2
 8017048:	4561      	cmp	r1, ip
 801704a:	d09d      	beq.n	8016f88 <uxr_read_framed_msg+0x2dc>
 801704c:	3302      	adds	r3, #2
 801704e:	4422      	add	r2, r4
 8017050:	0859      	lsrs	r1, r3, #1
 8017052:	7892      	ldrb	r2, [r2, #2]
 8017054:	fba5 c101 	umull	ip, r1, r5, r1
 8017058:	0889      	lsrs	r1, r1, #2
 801705a:	fb00 3311 	mls	r3, r0, r1, r3
 801705e:	2a7e      	cmp	r2, #126	@ 0x7e
 8017060:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017064:	f000 80aa 	beq.w	80171bc <uxr_read_framed_msg+0x510>
 8017068:	f082 0220 	eor.w	r2, r2, #32
 801706c:	e654      	b.n	8016d18 <uxr_read_framed_msg+0x6c>
 801706e:	1c58      	adds	r0, r3, #1
 8017070:	0842      	lsrs	r2, r0, #1
 8017072:	fba5 c202 	umull	ip, r2, r5, r2
 8017076:	0892      	lsrs	r2, r2, #2
 8017078:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801707c:	fb0c 0212 	mls	r2, ip, r2, r0
 8017080:	b2d0      	uxtb	r0, r2
 8017082:	4281      	cmp	r1, r0
 8017084:	d08f      	beq.n	8016fa6 <uxr_read_framed_msg+0x2fa>
 8017086:	4422      	add	r2, r4
 8017088:	3302      	adds	r3, #2
 801708a:	7890      	ldrb	r0, [r2, #2]
 801708c:	085a      	lsrs	r2, r3, #1
 801708e:	fba5 1202 	umull	r1, r2, r5, r2
 8017092:	0892      	lsrs	r2, r2, #2
 8017094:	fb0c 3312 	mls	r3, ip, r2, r3
 8017098:	287e      	cmp	r0, #126	@ 0x7e
 801709a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801709e:	d07d      	beq.n	801719c <uxr_read_framed_msg+0x4f0>
 80170a0:	f080 0020 	eor.w	r0, r0, #32
 80170a4:	e660      	b.n	8016d68 <uxr_read_framed_msg+0xbc>
 80170a6:	1c59      	adds	r1, r3, #1
 80170a8:	084a      	lsrs	r2, r1, #1
 80170aa:	fba5 c202 	umull	ip, r2, r5, r2
 80170ae:	0892      	lsrs	r2, r2, #2
 80170b0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80170b4:	fb0c 1212 	mls	r2, ip, r2, r1
 80170b8:	b2d1      	uxtb	r1, r2
 80170ba:	4288      	cmp	r0, r1
 80170bc:	f43f af64 	beq.w	8016f88 <uxr_read_framed_msg+0x2dc>
 80170c0:	4422      	add	r2, r4
 80170c2:	3302      	adds	r3, #2
 80170c4:	7891      	ldrb	r1, [r2, #2]
 80170c6:	085a      	lsrs	r2, r3, #1
 80170c8:	fba5 0202 	umull	r0, r2, r5, r2
 80170cc:	0892      	lsrs	r2, r2, #2
 80170ce:	fb0c 3312 	mls	r3, ip, r2, r3
 80170d2:	297e      	cmp	r1, #126	@ 0x7e
 80170d4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80170d8:	d070      	beq.n	80171bc <uxr_read_framed_msg+0x510>
 80170da:	f081 0120 	eor.w	r1, r1, #32
 80170de:	e6a3      	b.n	8016e28 <uxr_read_framed_msg+0x17c>
 80170e0:	f103 0c01 	add.w	ip, r3, #1
 80170e4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80170e8:	fba5 0202 	umull	r0, r2, r5, r2
 80170ec:	0892      	lsrs	r2, r2, #2
 80170ee:	202a      	movs	r0, #42	@ 0x2a
 80170f0:	fb00 c212 	mls	r2, r0, r2, ip
 80170f4:	fa5f fc82 	uxtb.w	ip, r2
 80170f8:	4561      	cmp	r1, ip
 80170fa:	f43f af58 	beq.w	8016fae <uxr_read_framed_msg+0x302>
 80170fe:	4422      	add	r2, r4
 8017100:	3302      	adds	r3, #2
 8017102:	7891      	ldrb	r1, [r2, #2]
 8017104:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8017108:	085a      	lsrs	r2, r3, #1
 801710a:	fba5 c202 	umull	ip, r2, r5, r2
 801710e:	0892      	lsrs	r2, r2, #2
 8017110:	fb00 3312 	mls	r3, r0, r2, r3
 8017114:	297e      	cmp	r1, #126	@ 0x7e
 8017116:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801711a:	f43f af48 	beq.w	8016fae <uxr_read_framed_msg+0x302>
 801711e:	f081 0120 	eor.w	r1, r1, #32
 8017122:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8017126:	e6e8      	b.n	8016efa <uxr_read_framed_msg+0x24e>
 8017128:	1c58      	adds	r0, r3, #1
 801712a:	0842      	lsrs	r2, r0, #1
 801712c:	fba5 c202 	umull	ip, r2, r5, r2
 8017130:	0892      	lsrs	r2, r2, #2
 8017132:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017136:	fb0c 0212 	mls	r2, ip, r2, r0
 801713a:	b2d0      	uxtb	r0, r2
 801713c:	4281      	cmp	r1, r0
 801713e:	f43f af32 	beq.w	8016fa6 <uxr_read_framed_msg+0x2fa>
 8017142:	4422      	add	r2, r4
 8017144:	3302      	adds	r3, #2
 8017146:	7890      	ldrb	r0, [r2, #2]
 8017148:	085a      	lsrs	r2, r3, #1
 801714a:	fba5 1202 	umull	r1, r2, r5, r2
 801714e:	0892      	lsrs	r2, r2, #2
 8017150:	fb0c 3312 	mls	r3, ip, r2, r3
 8017154:	287e      	cmp	r0, #126	@ 0x7e
 8017156:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801715a:	d01f      	beq.n	801719c <uxr_read_framed_msg+0x4f0>
 801715c:	f080 0020 	eor.w	r0, r0, #32
 8017160:	e68b      	b.n	8016e7a <uxr_read_framed_msg+0x1ce>
 8017162:	1c51      	adds	r1, r2, #1
 8017164:	084b      	lsrs	r3, r1, #1
 8017166:	fba5 c303 	umull	ip, r3, r5, r3
 801716a:	089b      	lsrs	r3, r3, #2
 801716c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017170:	fb0c 1313 	mls	r3, ip, r3, r1
 8017174:	b2d9      	uxtb	r1, r3
 8017176:	4288      	cmp	r0, r1
 8017178:	f43f af3d 	beq.w	8016ff6 <uxr_read_framed_msg+0x34a>
 801717c:	3202      	adds	r2, #2
 801717e:	4423      	add	r3, r4
 8017180:	0850      	lsrs	r0, r2, #1
 8017182:	789b      	ldrb	r3, [r3, #2]
 8017184:	fba5 1000 	umull	r1, r0, r5, r0
 8017188:	0880      	lsrs	r0, r0, #2
 801718a:	fb0c 2210 	mls	r2, ip, r0, r2
 801718e:	2b7e      	cmp	r3, #126	@ 0x7e
 8017190:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017194:	d016      	beq.n	80171c4 <uxr_read_framed_msg+0x518>
 8017196:	f083 0120 	eor.w	r1, r3, #32
 801719a:	e68b      	b.n	8016eb4 <uxr_read_framed_msg+0x208>
 801719c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801719e:	9300      	str	r3, [sp, #0]
 80171a0:	2302      	movs	r3, #2
 80171a2:	9301      	str	r3, [sp, #4]
 80171a4:	464a      	mov	r2, r9
 80171a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80171a8:	4641      	mov	r1, r8
 80171aa:	4620      	mov	r0, r4
 80171ac:	f7ff fcfc 	bl	8016ba8 <uxr_framing_read_transport>
 80171b0:	2800      	cmp	r0, #0
 80171b2:	f47f aef6 	bne.w	8016fa2 <uxr_read_framed_msg+0x2f6>
 80171b6:	2301      	movs	r3, #1
 80171b8:	7023      	strb	r3, [r4, #0]
 80171ba:	e588      	b.n	8016cce <uxr_read_framed_msg+0x22>
 80171bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80171be:	9300      	str	r3, [sp, #0]
 80171c0:	2301      	movs	r3, #1
 80171c2:	e7ee      	b.n	80171a2 <uxr_read_framed_msg+0x4f6>
 80171c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80171c6:	9300      	str	r3, [sp, #0]
 80171c8:	2303      	movs	r3, #3
 80171ca:	e7ea      	b.n	80171a2 <uxr_read_framed_msg+0x4f6>
 80171cc:	ee17 8a90 	vmov	r8, s15
 80171d0:	e6ae      	b.n	8016f30 <uxr_read_framed_msg+0x284>
 80171d2:	bf00      	nop

080171d4 <uxr_stream_id>:
 80171d4:	2901      	cmp	r1, #1
 80171d6:	b082      	sub	sp, #8
 80171d8:	d01d      	beq.n	8017216 <uxr_stream_id+0x42>
 80171da:	2902      	cmp	r1, #2
 80171dc:	f04f 0c00 	mov.w	ip, #0
 80171e0:	d01e      	beq.n	8017220 <uxr_stream_id+0x4c>
 80171e2:	2300      	movs	r3, #0
 80171e4:	f36c 0307 	bfi	r3, ip, #0, #8
 80171e8:	f360 230f 	bfi	r3, r0, #8, #8
 80171ec:	f361 4317 	bfi	r3, r1, #16, #8
 80171f0:	f362 631f 	bfi	r3, r2, #24, #8
 80171f4:	b2da      	uxtb	r2, r3
 80171f6:	2000      	movs	r0, #0
 80171f8:	f362 0007 	bfi	r0, r2, #0, #8
 80171fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8017200:	f362 200f 	bfi	r0, r2, #8, #8
 8017204:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8017208:	f362 4017 	bfi	r0, r2, #16, #8
 801720c:	0e1b      	lsrs	r3, r3, #24
 801720e:	f363 601f 	bfi	r0, r3, #24, #8
 8017212:	b002      	add	sp, #8
 8017214:	4770      	bx	lr
 8017216:	f100 0c01 	add.w	ip, r0, #1
 801721a:	fa5f fc8c 	uxtb.w	ip, ip
 801721e:	e7e0      	b.n	80171e2 <uxr_stream_id+0xe>
 8017220:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8017224:	e7dd      	b.n	80171e2 <uxr_stream_id+0xe>
 8017226:	bf00      	nop

08017228 <uxr_stream_id_from_raw>:
 8017228:	b082      	sub	sp, #8
 801722a:	b130      	cbz	r0, 801723a <uxr_stream_id_from_raw+0x12>
 801722c:	0603      	lsls	r3, r0, #24
 801722e:	d420      	bmi.n	8017272 <uxr_stream_id_from_raw+0x4a>
 8017230:	1e42      	subs	r2, r0, #1
 8017232:	b2d2      	uxtb	r2, r2
 8017234:	f04f 0c01 	mov.w	ip, #1
 8017238:	e001      	b.n	801723e <uxr_stream_id_from_raw+0x16>
 801723a:	4684      	mov	ip, r0
 801723c:	4602      	mov	r2, r0
 801723e:	2300      	movs	r3, #0
 8017240:	f360 0307 	bfi	r3, r0, #0, #8
 8017244:	f362 230f 	bfi	r3, r2, #8, #8
 8017248:	f36c 4317 	bfi	r3, ip, #16, #8
 801724c:	f361 631f 	bfi	r3, r1, #24, #8
 8017250:	b2da      	uxtb	r2, r3
 8017252:	2000      	movs	r0, #0
 8017254:	f362 0007 	bfi	r0, r2, #0, #8
 8017258:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801725c:	f362 200f 	bfi	r0, r2, #8, #8
 8017260:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8017264:	f362 4017 	bfi	r0, r2, #16, #8
 8017268:	0e1b      	lsrs	r3, r3, #24
 801726a:	f363 601f 	bfi	r0, r3, #24, #8
 801726e:	b002      	add	sp, #8
 8017270:	4770      	bx	lr
 8017272:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8017276:	f04f 0c02 	mov.w	ip, #2
 801727a:	e7e0      	b.n	801723e <uxr_stream_id_from_raw+0x16>

0801727c <uxr_init_stream_storage>:
 801727c:	2300      	movs	r3, #0
 801727e:	7403      	strb	r3, [r0, #16]
 8017280:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8017284:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8017288:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801728c:	4770      	bx	lr
 801728e:	bf00      	nop

08017290 <uxr_reset_stream_storage>:
 8017290:	b570      	push	{r4, r5, r6, lr}
 8017292:	7c03      	ldrb	r3, [r0, #16]
 8017294:	4604      	mov	r4, r0
 8017296:	b153      	cbz	r3, 80172ae <uxr_reset_stream_storage+0x1e>
 8017298:	4606      	mov	r6, r0
 801729a:	2500      	movs	r5, #0
 801729c:	4630      	mov	r0, r6
 801729e:	f005 f9bb 	bl	801c618 <uxr_reset_output_best_effort_stream>
 80172a2:	7c23      	ldrb	r3, [r4, #16]
 80172a4:	3501      	adds	r5, #1
 80172a6:	42ab      	cmp	r3, r5
 80172a8:	f106 0610 	add.w	r6, r6, #16
 80172ac:	d8f6      	bhi.n	801729c <uxr_reset_stream_storage+0xc>
 80172ae:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80172b2:	b163      	cbz	r3, 80172ce <uxr_reset_stream_storage+0x3e>
 80172b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80172b8:	2500      	movs	r5, #0
 80172ba:	4630      	mov	r0, r6
 80172bc:	f004 ffae 	bl	801c21c <uxr_reset_input_best_effort_stream>
 80172c0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80172c4:	3501      	adds	r5, #1
 80172c6:	42ab      	cmp	r3, r5
 80172c8:	f106 0602 	add.w	r6, r6, #2
 80172cc:	d8f5      	bhi.n	80172ba <uxr_reset_stream_storage+0x2a>
 80172ce:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80172d2:	b163      	cbz	r3, 80172ee <uxr_reset_stream_storage+0x5e>
 80172d4:	f104 0618 	add.w	r6, r4, #24
 80172d8:	2500      	movs	r5, #0
 80172da:	4630      	mov	r0, r6
 80172dc:	f005 fa48 	bl	801c770 <uxr_reset_output_reliable_stream>
 80172e0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80172e4:	3501      	adds	r5, #1
 80172e6:	42ab      	cmp	r3, r5
 80172e8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80172ec:	d8f5      	bhi.n	80172da <uxr_reset_stream_storage+0x4a>
 80172ee:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80172f2:	b163      	cbz	r3, 801730e <uxr_reset_stream_storage+0x7e>
 80172f4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80172f8:	2500      	movs	r5, #0
 80172fa:	4630      	mov	r0, r6
 80172fc:	f005 f802 	bl	801c304 <uxr_reset_input_reliable_stream>
 8017300:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8017304:	3501      	adds	r5, #1
 8017306:	42ab      	cmp	r3, r5
 8017308:	f106 0618 	add.w	r6, r6, #24
 801730c:	d8f5      	bhi.n	80172fa <uxr_reset_stream_storage+0x6a>
 801730e:	bd70      	pop	{r4, r5, r6, pc}

08017310 <uxr_add_output_best_effort_buffer>:
 8017310:	b510      	push	{r4, lr}
 8017312:	7c04      	ldrb	r4, [r0, #16]
 8017314:	f104 0c01 	add.w	ip, r4, #1
 8017318:	b082      	sub	sp, #8
 801731a:	f880 c010 	strb.w	ip, [r0, #16]
 801731e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8017322:	f005 f96f 	bl	801c604 <uxr_init_output_best_effort_stream>
 8017326:	2201      	movs	r2, #1
 8017328:	4611      	mov	r1, r2
 801732a:	4620      	mov	r0, r4
 801732c:	b002      	add	sp, #8
 801732e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017332:	f7ff bf4f 	b.w	80171d4 <uxr_stream_id>
 8017336:	bf00      	nop

08017338 <uxr_add_output_reliable_buffer>:
 8017338:	b510      	push	{r4, lr}
 801733a:	b084      	sub	sp, #16
 801733c:	4684      	mov	ip, r0
 801733e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8017342:	9000      	str	r0, [sp, #0]
 8017344:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8017348:	2028      	movs	r0, #40	@ 0x28
 801734a:	fb00 c004 	mla	r0, r0, r4, ip
 801734e:	f104 0e01 	add.w	lr, r4, #1
 8017352:	3018      	adds	r0, #24
 8017354:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8017358:	f005 f9d2 	bl	801c700 <uxr_init_output_reliable_stream>
 801735c:	2201      	movs	r2, #1
 801735e:	2102      	movs	r1, #2
 8017360:	4620      	mov	r0, r4
 8017362:	b004      	add	sp, #16
 8017364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017368:	f7ff bf34 	b.w	80171d4 <uxr_stream_id>

0801736c <uxr_add_input_best_effort_buffer>:
 801736c:	b510      	push	{r4, lr}
 801736e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8017372:	4603      	mov	r3, r0
 8017374:	1c62      	adds	r2, r4, #1
 8017376:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801737a:	b082      	sub	sp, #8
 801737c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8017380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8017384:	f004 ff46 	bl	801c214 <uxr_init_input_best_effort_stream>
 8017388:	2200      	movs	r2, #0
 801738a:	2101      	movs	r1, #1
 801738c:	4620      	mov	r0, r4
 801738e:	b002      	add	sp, #8
 8017390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017394:	f7ff bf1e 	b.w	80171d4 <uxr_stream_id>

08017398 <uxr_add_input_reliable_buffer>:
 8017398:	b510      	push	{r4, lr}
 801739a:	b084      	sub	sp, #16
 801739c:	4684      	mov	ip, r0
 801739e:	9806      	ldr	r0, [sp, #24]
 80173a0:	9000      	str	r0, [sp, #0]
 80173a2:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 80173a6:	2018      	movs	r0, #24
 80173a8:	fb00 c004 	mla	r0, r0, r4, ip
 80173ac:	f104 0e01 	add.w	lr, r4, #1
 80173b0:	3048      	adds	r0, #72	@ 0x48
 80173b2:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 80173b6:	f004 ff79 	bl	801c2ac <uxr_init_input_reliable_stream>
 80173ba:	2200      	movs	r2, #0
 80173bc:	2102      	movs	r1, #2
 80173be:	4620      	mov	r0, r4
 80173c0:	b004      	add	sp, #16
 80173c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173c6:	f7ff bf05 	b.w	80171d4 <uxr_stream_id>
 80173ca:	bf00      	nop

080173cc <uxr_get_output_best_effort_stream>:
 80173cc:	7c03      	ldrb	r3, [r0, #16]
 80173ce:	428b      	cmp	r3, r1
 80173d0:	bf8c      	ite	hi
 80173d2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80173d6:	2000      	movls	r0, #0
 80173d8:	4770      	bx	lr
 80173da:	bf00      	nop

080173dc <uxr_get_output_reliable_stream>:
 80173dc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80173e0:	428b      	cmp	r3, r1
 80173e2:	bf83      	ittte	hi
 80173e4:	2328      	movhi	r3, #40	@ 0x28
 80173e6:	fb03 0001 	mlahi	r0, r3, r1, r0
 80173ea:	3018      	addhi	r0, #24
 80173ec:	2000      	movls	r0, #0
 80173ee:	4770      	bx	lr

080173f0 <uxr_get_input_best_effort_stream>:
 80173f0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80173f4:	428b      	cmp	r3, r1
 80173f6:	bf86      	itte	hi
 80173f8:	3121      	addhi	r1, #33	@ 0x21
 80173fa:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80173fe:	2000      	movls	r0, #0
 8017400:	4770      	bx	lr
 8017402:	bf00      	nop

08017404 <uxr_get_input_reliable_stream>:
 8017404:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8017408:	428b      	cmp	r3, r1
 801740a:	bf83      	ittte	hi
 801740c:	2318      	movhi	r3, #24
 801740e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8017412:	3048      	addhi	r0, #72	@ 0x48
 8017414:	2000      	movls	r0, #0
 8017416:	4770      	bx	lr

08017418 <uxr_output_streams_confirmed>:
 8017418:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801741c:	b183      	cbz	r3, 8017440 <uxr_output_streams_confirmed+0x28>
 801741e:	b570      	push	{r4, r5, r6, lr}
 8017420:	4606      	mov	r6, r0
 8017422:	f100 0518 	add.w	r5, r0, #24
 8017426:	2400      	movs	r4, #0
 8017428:	e001      	b.n	801742e <uxr_output_streams_confirmed+0x16>
 801742a:	3528      	adds	r5, #40	@ 0x28
 801742c:	b138      	cbz	r0, 801743e <uxr_output_streams_confirmed+0x26>
 801742e:	4628      	mov	r0, r5
 8017430:	f005 fc0e 	bl	801cc50 <uxr_is_output_up_to_date>
 8017434:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8017438:	3401      	adds	r4, #1
 801743a:	42a3      	cmp	r3, r4
 801743c:	d8f5      	bhi.n	801742a <uxr_output_streams_confirmed+0x12>
 801743e:	bd70      	pop	{r4, r5, r6, pc}
 8017440:	2001      	movs	r0, #1
 8017442:	4770      	bx	lr

08017444 <uxr_buffer_submessage_header>:
 8017444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017446:	4604      	mov	r4, r0
 8017448:	460e      	mov	r6, r1
 801744a:	2104      	movs	r1, #4
 801744c:	4615      	mov	r5, r2
 801744e:	461f      	mov	r7, r3
 8017450:	f7f8 f9ec 	bl	800f82c <ucdr_align_to>
 8017454:	2301      	movs	r3, #1
 8017456:	ea47 0203 	orr.w	r2, r7, r3
 801745a:	4631      	mov	r1, r6
 801745c:	7523      	strb	r3, [r4, #20]
 801745e:	4620      	mov	r0, r4
 8017460:	462b      	mov	r3, r5
 8017462:	f000 fa27 	bl	80178b4 <uxr_serialize_submessage_header>
 8017466:	4620      	mov	r0, r4
 8017468:	f7f8 f9f6 	bl	800f858 <ucdr_buffer_remaining>
 801746c:	42a8      	cmp	r0, r5
 801746e:	bf34      	ite	cc
 8017470:	2000      	movcc	r0, #0
 8017472:	2001      	movcs	r0, #1
 8017474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017476:	bf00      	nop

08017478 <uxr_read_submessage_header>:
 8017478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801747c:	4604      	mov	r4, r0
 801747e:	460d      	mov	r5, r1
 8017480:	2104      	movs	r1, #4
 8017482:	4616      	mov	r6, r2
 8017484:	4698      	mov	r8, r3
 8017486:	f7f8 f9d1 	bl	800f82c <ucdr_align_to>
 801748a:	4620      	mov	r0, r4
 801748c:	f7f8 f9e4 	bl	800f858 <ucdr_buffer_remaining>
 8017490:	2803      	cmp	r0, #3
 8017492:	bf8c      	ite	hi
 8017494:	2701      	movhi	r7, #1
 8017496:	2700      	movls	r7, #0
 8017498:	d802      	bhi.n	80174a0 <uxr_read_submessage_header+0x28>
 801749a:	4638      	mov	r0, r7
 801749c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174a0:	4633      	mov	r3, r6
 80174a2:	4642      	mov	r2, r8
 80174a4:	4620      	mov	r0, r4
 80174a6:	4629      	mov	r1, r5
 80174a8:	f000 fa18 	bl	80178dc <uxr_deserialize_submessage_header>
 80174ac:	f898 3000 	ldrb.w	r3, [r8]
 80174b0:	f003 0201 	and.w	r2, r3, #1
 80174b4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80174b8:	f888 3000 	strb.w	r3, [r8]
 80174bc:	7522      	strb	r2, [r4, #20]
 80174be:	4638      	mov	r0, r7
 80174c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080174c4 <uxr_submessage_padding>:
 80174c4:	f010 0003 	ands.w	r0, r0, #3
 80174c8:	bf18      	it	ne
 80174ca:	f1c0 0004 	rsbne	r0, r0, #4
 80174ce:	4770      	bx	lr

080174d0 <uxr_millis>:
 80174d0:	b510      	push	{r4, lr}
 80174d2:	b084      	sub	sp, #16
 80174d4:	4669      	mov	r1, sp
 80174d6:	2001      	movs	r0, #1
 80174d8:	f7eb ffe2 	bl	80034a0 <clock_gettime>
 80174dc:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80174e0:	4906      	ldr	r1, [pc, #24]	@ (80174fc <uxr_millis+0x2c>)
 80174e2:	fba0 0301 	umull	r0, r3, r0, r1
 80174e6:	1900      	adds	r0, r0, r4
 80174e8:	fb01 3102 	mla	r1, r1, r2, r3
 80174ec:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80174f0:	4a03      	ldr	r2, [pc, #12]	@ (8017500 <uxr_millis+0x30>)
 80174f2:	2300      	movs	r3, #0
 80174f4:	f7e9 fb68 	bl	8000bc8 <__aeabi_ldivmod>
 80174f8:	b004      	add	sp, #16
 80174fa:	bd10      	pop	{r4, pc}
 80174fc:	3b9aca00 	.word	0x3b9aca00
 8017500:	000f4240 	.word	0x000f4240

08017504 <uxr_nanos>:
 8017504:	b510      	push	{r4, lr}
 8017506:	b084      	sub	sp, #16
 8017508:	4669      	mov	r1, sp
 801750a:	2001      	movs	r0, #1
 801750c:	f7eb ffc8 	bl	80034a0 <clock_gettime>
 8017510:	4a06      	ldr	r2, [pc, #24]	@ (801752c <uxr_nanos+0x28>)
 8017512:	9800      	ldr	r0, [sp, #0]
 8017514:	9902      	ldr	r1, [sp, #8]
 8017516:	9c01      	ldr	r4, [sp, #4]
 8017518:	fba0 0302 	umull	r0, r3, r0, r2
 801751c:	1840      	adds	r0, r0, r1
 801751e:	fb02 3304 	mla	r3, r2, r4, r3
 8017522:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8017526:	b004      	add	sp, #16
 8017528:	bd10      	pop	{r4, pc}
 801752a:	bf00      	nop
 801752c:	3b9aca00 	.word	0x3b9aca00

08017530 <on_full_output_buffer_fragmented>:
 8017530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017534:	460c      	mov	r4, r1
 8017536:	b08a      	sub	sp, #40	@ 0x28
 8017538:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801753c:	4606      	mov	r6, r0
 801753e:	f104 0008 	add.w	r0, r4, #8
 8017542:	f7ff ff4b 	bl	80173dc <uxr_get_output_reliable_stream>
 8017546:	4605      	mov	r5, r0
 8017548:	f005 fb8c 	bl	801cc64 <get_available_free_slots>
 801754c:	b968      	cbnz	r0, 801756a <on_full_output_buffer_fragmented+0x3a>
 801754e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8017552:	4620      	mov	r0, r4
 8017554:	4798      	blx	r3
 8017556:	b918      	cbnz	r0, 8017560 <on_full_output_buffer_fragmented+0x30>
 8017558:	2001      	movs	r0, #1
 801755a:	b00a      	add	sp, #40	@ 0x28
 801755c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017560:	4628      	mov	r0, r5
 8017562:	f005 fb7f 	bl	801cc64 <get_available_free_slots>
 8017566:	2800      	cmp	r0, #0
 8017568:	d0f6      	beq.n	8017558 <on_full_output_buffer_fragmented+0x28>
 801756a:	8929      	ldrh	r1, [r5, #8]
 801756c:	89eb      	ldrh	r3, [r5, #14]
 801756e:	7b28      	ldrb	r0, [r5, #12]
 8017570:	686a      	ldr	r2, [r5, #4]
 8017572:	fbb2 f8f1 	udiv	r8, r2, r1
 8017576:	fbb3 f2f1 	udiv	r2, r3, r1
 801757a:	fb01 3112 	mls	r1, r1, r2, r3
 801757e:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8017582:	b289      	uxth	r1, r1
 8017584:	fb08 f101 	mul.w	r1, r8, r1
 8017588:	30fc      	adds	r0, #252	@ 0xfc
 801758a:	f1a8 0804 	sub.w	r8, r8, #4
 801758e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8017592:	4440      	add	r0, r8
 8017594:	b287      	uxth	r7, r0
 8017596:	1bdb      	subs	r3, r3, r7
 8017598:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801759c:	682b      	ldr	r3, [r5, #0]
 801759e:	3104      	adds	r1, #4
 80175a0:	4419      	add	r1, r3
 80175a2:	4642      	mov	r2, r8
 80175a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80175a8:	9300      	str	r3, [sp, #0]
 80175aa:	a802      	add	r0, sp, #8
 80175ac:	2300      	movs	r3, #0
 80175ae:	f7f8 f911 	bl	800f7d4 <ucdr_init_buffer_origin_offset>
 80175b2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80175b6:	f102 0308 	add.w	r3, r2, #8
 80175ba:	4543      	cmp	r3, r8
 80175bc:	d928      	bls.n	8017610 <on_full_output_buffer_fragmented+0xe0>
 80175be:	463a      	mov	r2, r7
 80175c0:	2300      	movs	r3, #0
 80175c2:	210d      	movs	r1, #13
 80175c4:	a802      	add	r0, sp, #8
 80175c6:	f7ff ff3d 	bl	8017444 <uxr_buffer_submessage_header>
 80175ca:	8929      	ldrh	r1, [r5, #8]
 80175cc:	89eb      	ldrh	r3, [r5, #14]
 80175ce:	fbb3 f2f1 	udiv	r2, r3, r1
 80175d2:	fb01 3312 	mls	r3, r1, r2, r3
 80175d6:	b29b      	uxth	r3, r3
 80175d8:	686a      	ldr	r2, [r5, #4]
 80175da:	fbb2 f2f1 	udiv	r2, r2, r1
 80175de:	fb02 f303 	mul.w	r3, r2, r3
 80175e2:	682a      	ldr	r2, [r5, #0]
 80175e4:	f842 8003 	str.w	r8, [r2, r3]
 80175e8:	89e8      	ldrh	r0, [r5, #14]
 80175ea:	2101      	movs	r1, #1
 80175ec:	f005 fb5a 	bl	801cca4 <uxr_seq_num_add>
 80175f0:	9904      	ldr	r1, [sp, #16]
 80175f2:	9a03      	ldr	r2, [sp, #12]
 80175f4:	81e8      	strh	r0, [r5, #14]
 80175f6:	1a52      	subs	r2, r2, r1
 80175f8:	4630      	mov	r0, r6
 80175fa:	f7f8 f8fd 	bl	800f7f8 <ucdr_init_buffer>
 80175fe:	4630      	mov	r0, r6
 8017600:	490f      	ldr	r1, [pc, #60]	@ (8017640 <on_full_output_buffer_fragmented+0x110>)
 8017602:	4622      	mov	r2, r4
 8017604:	f7f8 f8cc 	bl	800f7a0 <ucdr_set_on_full_buffer_callback>
 8017608:	2000      	movs	r0, #0
 801760a:	b00a      	add	sp, #40	@ 0x28
 801760c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017610:	b292      	uxth	r2, r2
 8017612:	2302      	movs	r3, #2
 8017614:	210d      	movs	r1, #13
 8017616:	a802      	add	r0, sp, #8
 8017618:	f7ff ff14 	bl	8017444 <uxr_buffer_submessage_header>
 801761c:	8928      	ldrh	r0, [r5, #8]
 801761e:	89eb      	ldrh	r3, [r5, #14]
 8017620:	fbb3 f1f0 	udiv	r1, r3, r0
 8017624:	fb00 3311 	mls	r3, r0, r1, r3
 8017628:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801762c:	6869      	ldr	r1, [r5, #4]
 801762e:	fbb1 f1f0 	udiv	r1, r1, r0
 8017632:	b29b      	uxth	r3, r3
 8017634:	fb01 f303 	mul.w	r3, r1, r3
 8017638:	6829      	ldr	r1, [r5, #0]
 801763a:	3208      	adds	r2, #8
 801763c:	50ca      	str	r2, [r1, r3]
 801763e:	e7d3      	b.n	80175e8 <on_full_output_buffer_fragmented+0xb8>
 8017640:	08017531 	.word	0x08017531

08017644 <uxr_prepare_output_stream>:
 8017644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017646:	b087      	sub	sp, #28
 8017648:	2707      	movs	r7, #7
 801764a:	9202      	str	r2, [sp, #8]
 801764c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801764e:	9103      	str	r1, [sp, #12]
 8017650:	2500      	movs	r5, #0
 8017652:	3204      	adds	r2, #4
 8017654:	e9cd 7500 	strd	r7, r5, [sp]
 8017658:	461c      	mov	r4, r3
 801765a:	4606      	mov	r6, r0
 801765c:	f7fe ffc2 	bl	80165e4 <uxr_prepare_stream_to_write_submessage>
 8017660:	f080 0201 	eor.w	r2, r0, #1
 8017664:	b2d2      	uxtb	r2, r2
 8017666:	75a2      	strb	r2, [r4, #22]
 8017668:	b112      	cbz	r2, 8017670 <uxr_prepare_output_stream+0x2c>
 801766a:	4628      	mov	r0, r5
 801766c:	b007      	add	sp, #28
 801766e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017670:	aa05      	add	r2, sp, #20
 8017672:	9902      	ldr	r1, [sp, #8]
 8017674:	4630      	mov	r0, r6
 8017676:	f7ff f8eb 	bl	8016850 <uxr_init_base_object_request>
 801767a:	a905      	add	r1, sp, #20
 801767c:	4605      	mov	r5, r0
 801767e:	4620      	mov	r0, r4
 8017680:	f001 f808 	bl	8018694 <uxr_serialize_WRITE_DATA_Payload_Data>
 8017684:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8017688:	69a6      	ldr	r6, [r4, #24]
 801768a:	69e7      	ldr	r7, [r4, #28]
 801768c:	1a52      	subs	r2, r2, r1
 801768e:	4620      	mov	r0, r4
 8017690:	f7f8 f8b2 	bl	800f7f8 <ucdr_init_buffer>
 8017694:	4620      	mov	r0, r4
 8017696:	463a      	mov	r2, r7
 8017698:	4631      	mov	r1, r6
 801769a:	f7f8 f881 	bl	800f7a0 <ucdr_set_on_full_buffer_callback>
 801769e:	4628      	mov	r0, r5
 80176a0:	b007      	add	sp, #28
 80176a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080176a4 <uxr_prepare_output_stream_fragmented>:
 80176a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176a8:	b091      	sub	sp, #68	@ 0x44
 80176aa:	4605      	mov	r5, r0
 80176ac:	9105      	str	r1, [sp, #20]
 80176ae:	3008      	adds	r0, #8
 80176b0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80176b4:	461e      	mov	r6, r3
 80176b6:	9204      	str	r2, [sp, #16]
 80176b8:	f7ff fe90 	bl	80173dc <uxr_get_output_reliable_stream>
 80176bc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80176c0:	2b01      	cmp	r3, #1
 80176c2:	f000 8091 	beq.w	80177e8 <uxr_prepare_output_stream_fragmented+0x144>
 80176c6:	4604      	mov	r4, r0
 80176c8:	2800      	cmp	r0, #0
 80176ca:	f000 808d 	beq.w	80177e8 <uxr_prepare_output_stream_fragmented+0x144>
 80176ce:	f005 fac9 	bl	801cc64 <get_available_free_slots>
 80176d2:	2800      	cmp	r0, #0
 80176d4:	f000 8083 	beq.w	80177de <uxr_prepare_output_stream_fragmented+0x13a>
 80176d8:	8922      	ldrh	r2, [r4, #8]
 80176da:	89e7      	ldrh	r7, [r4, #14]
 80176dc:	fbb7 f9f2 	udiv	r9, r7, r2
 80176e0:	fb02 7919 	mls	r9, r2, r9, r7
 80176e4:	fa1f f989 	uxth.w	r9, r9
 80176e8:	6863      	ldr	r3, [r4, #4]
 80176ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80176ee:	6823      	ldr	r3, [r4, #0]
 80176f0:	9203      	str	r2, [sp, #12]
 80176f2:	fb02 f909 	mul.w	r9, r2, r9
 80176f6:	f109 0904 	add.w	r9, r9, #4
 80176fa:	4499      	add	r9, r3
 80176fc:	7b23      	ldrb	r3, [r4, #12]
 80176fe:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8017702:	4543      	cmp	r3, r8
 8017704:	f1a2 0b04 	sub.w	fp, r2, #4
 8017708:	d37a      	bcc.n	8017800 <uxr_prepare_output_stream_fragmented+0x15c>
 801770a:	f1ab 0a04 	sub.w	sl, fp, #4
 801770e:	ebaa 0a03 	sub.w	sl, sl, r3
 8017712:	465a      	mov	r2, fp
 8017714:	2300      	movs	r3, #0
 8017716:	4649      	mov	r1, r9
 8017718:	a808      	add	r0, sp, #32
 801771a:	f8cd 8000 	str.w	r8, [sp]
 801771e:	f7f8 f859 	bl	800f7d4 <ucdr_init_buffer_origin_offset>
 8017722:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8017724:	fa1f fa8a 	uxth.w	sl, sl
 8017728:	4652      	mov	r2, sl
 801772a:	f103 0a08 	add.w	sl, r3, #8
 801772e:	45da      	cmp	sl, fp
 8017730:	bf34      	ite	cc
 8017732:	2302      	movcc	r3, #2
 8017734:	2300      	movcs	r3, #0
 8017736:	210d      	movs	r1, #13
 8017738:	a808      	add	r0, sp, #32
 801773a:	f7ff fe83 	bl	8017444 <uxr_buffer_submessage_header>
 801773e:	8921      	ldrh	r1, [r4, #8]
 8017740:	fbb7 f2f1 	udiv	r2, r7, r1
 8017744:	fb01 7212 	mls	r2, r1, r2, r7
 8017748:	b292      	uxth	r2, r2
 801774a:	6863      	ldr	r3, [r4, #4]
 801774c:	fbb3 f3f1 	udiv	r3, r3, r1
 8017750:	fb02 f303 	mul.w	r3, r2, r3
 8017754:	6822      	ldr	r2, [r4, #0]
 8017756:	4638      	mov	r0, r7
 8017758:	f842 b003 	str.w	fp, [r2, r3]
 801775c:	2101      	movs	r1, #1
 801775e:	f005 faa1 	bl	801cca4 <uxr_seq_num_add>
 8017762:	9b03      	ldr	r3, [sp, #12]
 8017764:	f108 0104 	add.w	r1, r8, #4
 8017768:	f1a3 0208 	sub.w	r2, r3, #8
 801776c:	eba2 0208 	sub.w	r2, r2, r8
 8017770:	4449      	add	r1, r9
 8017772:	4607      	mov	r7, r0
 8017774:	4630      	mov	r0, r6
 8017776:	f7f8 f83f 	bl	800f7f8 <ucdr_init_buffer>
 801777a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801777c:	81e7      	strh	r7, [r4, #14]
 801777e:	1d1a      	adds	r2, r3, #4
 8017780:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8017784:	bf28      	it	cs
 8017786:	2200      	movcs	r2, #0
 8017788:	2300      	movs	r3, #0
 801778a:	b292      	uxth	r2, r2
 801778c:	2107      	movs	r1, #7
 801778e:	4630      	mov	r0, r6
 8017790:	f7ff fe58 	bl	8017444 <uxr_buffer_submessage_header>
 8017794:	9904      	ldr	r1, [sp, #16]
 8017796:	aa07      	add	r2, sp, #28
 8017798:	4628      	mov	r0, r5
 801779a:	f7ff f859 	bl	8016850 <uxr_init_base_object_request>
 801779e:	4604      	mov	r4, r0
 80177a0:	b318      	cbz	r0, 80177ea <uxr_prepare_output_stream_fragmented+0x146>
 80177a2:	a907      	add	r1, sp, #28
 80177a4:	4630      	mov	r0, r6
 80177a6:	f000 ff75 	bl	8018694 <uxr_serialize_WRITE_DATA_Payload_Data>
 80177aa:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80177ae:	4630      	mov	r0, r6
 80177b0:	1a52      	subs	r2, r2, r1
 80177b2:	f7f8 f821 	bl	800f7f8 <ucdr_init_buffer>
 80177b6:	9b05      	ldr	r3, [sp, #20]
 80177b8:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80177bc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80177be:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80177c2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80177c4:	491b      	ldr	r1, [pc, #108]	@ (8017834 <uxr_prepare_output_stream_fragmented+0x190>)
 80177c6:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80177ca:	4630      	mov	r0, r6
 80177cc:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80177d0:	462a      	mov	r2, r5
 80177d2:	f7f7 ffe5 	bl	800f7a0 <ucdr_set_on_full_buffer_callback>
 80177d6:	4620      	mov	r0, r4
 80177d8:	b011      	add	sp, #68	@ 0x44
 80177da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177de:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80177e0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80177e2:	4628      	mov	r0, r5
 80177e4:	4798      	blx	r3
 80177e6:	b920      	cbnz	r0, 80177f2 <uxr_prepare_output_stream_fragmented+0x14e>
 80177e8:	2400      	movs	r4, #0
 80177ea:	4620      	mov	r0, r4
 80177ec:	b011      	add	sp, #68	@ 0x44
 80177ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177f2:	4620      	mov	r0, r4
 80177f4:	f005 fa36 	bl	801cc64 <get_available_free_slots>
 80177f8:	2800      	cmp	r0, #0
 80177fa:	f47f af6d 	bne.w	80176d8 <uxr_prepare_output_stream_fragmented+0x34>
 80177fe:	e7f3      	b.n	80177e8 <uxr_prepare_output_stream_fragmented+0x144>
 8017800:	4638      	mov	r0, r7
 8017802:	2101      	movs	r1, #1
 8017804:	f005 fa4e 	bl	801cca4 <uxr_seq_num_add>
 8017808:	8921      	ldrh	r1, [r4, #8]
 801780a:	fbb0 f2f1 	udiv	r2, r0, r1
 801780e:	fb01 0912 	mls	r9, r1, r2, r0
 8017812:	fa1f f289 	uxth.w	r2, r9
 8017816:	6863      	ldr	r3, [r4, #4]
 8017818:	fbb3 f9f1 	udiv	r9, r3, r1
 801781c:	6823      	ldr	r3, [r4, #0]
 801781e:	fb02 f909 	mul.w	r9, r2, r9
 8017822:	f109 0904 	add.w	r9, r9, #4
 8017826:	4499      	add	r9, r3
 8017828:	4607      	mov	r7, r0
 801782a:	7b23      	ldrb	r3, [r4, #12]
 801782c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8017830:	e76b      	b.n	801770a <uxr_prepare_output_stream_fragmented+0x66>
 8017832:	bf00      	nop
 8017834:	08017531 	.word	0x08017531

08017838 <uxr_serialize_message_header>:
 8017838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801783a:	b083      	sub	sp, #12
 801783c:	4616      	mov	r6, r2
 801783e:	4604      	mov	r4, r0
 8017840:	9301      	str	r3, [sp, #4]
 8017842:	460d      	mov	r5, r1
 8017844:	9f08      	ldr	r7, [sp, #32]
 8017846:	f7f6 fcf5 	bl	800e234 <ucdr_serialize_uint8_t>
 801784a:	4631      	mov	r1, r6
 801784c:	4620      	mov	r0, r4
 801784e:	f7f6 fcf1 	bl	800e234 <ucdr_serialize_uint8_t>
 8017852:	9a01      	ldr	r2, [sp, #4]
 8017854:	2101      	movs	r1, #1
 8017856:	4620      	mov	r0, r4
 8017858:	f7f6 fd98 	bl	800e38c <ucdr_serialize_endian_uint16_t>
 801785c:	062b      	lsls	r3, r5, #24
 801785e:	d501      	bpl.n	8017864 <uxr_serialize_message_header+0x2c>
 8017860:	b003      	add	sp, #12
 8017862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017864:	2204      	movs	r2, #4
 8017866:	4639      	mov	r1, r7
 8017868:	4620      	mov	r0, r4
 801786a:	b003      	add	sp, #12
 801786c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017870:	f7fd b968 	b.w	8014b44 <ucdr_serialize_array_uint8_t>

08017874 <uxr_deserialize_message_header>:
 8017874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017876:	b083      	sub	sp, #12
 8017878:	4616      	mov	r6, r2
 801787a:	4604      	mov	r4, r0
 801787c:	9301      	str	r3, [sp, #4]
 801787e:	460d      	mov	r5, r1
 8017880:	9f08      	ldr	r7, [sp, #32]
 8017882:	f7f6 fced 	bl	800e260 <ucdr_deserialize_uint8_t>
 8017886:	4631      	mov	r1, r6
 8017888:	4620      	mov	r0, r4
 801788a:	f7f6 fce9 	bl	800e260 <ucdr_deserialize_uint8_t>
 801788e:	9a01      	ldr	r2, [sp, #4]
 8017890:	2101      	movs	r1, #1
 8017892:	4620      	mov	r0, r4
 8017894:	f7f6 fe6e 	bl	800e574 <ucdr_deserialize_endian_uint16_t>
 8017898:	f995 3000 	ldrsb.w	r3, [r5]
 801789c:	2b00      	cmp	r3, #0
 801789e:	da01      	bge.n	80178a4 <uxr_deserialize_message_header+0x30>
 80178a0:	b003      	add	sp, #12
 80178a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178a4:	2204      	movs	r2, #4
 80178a6:	4639      	mov	r1, r7
 80178a8:	4620      	mov	r0, r4
 80178aa:	b003      	add	sp, #12
 80178ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80178b0:	f7fd b9ac 	b.w	8014c0c <ucdr_deserialize_array_uint8_t>

080178b4 <uxr_serialize_submessage_header>:
 80178b4:	b530      	push	{r4, r5, lr}
 80178b6:	b083      	sub	sp, #12
 80178b8:	4615      	mov	r5, r2
 80178ba:	4604      	mov	r4, r0
 80178bc:	9301      	str	r3, [sp, #4]
 80178be:	f7f6 fcb9 	bl	800e234 <ucdr_serialize_uint8_t>
 80178c2:	4629      	mov	r1, r5
 80178c4:	4620      	mov	r0, r4
 80178c6:	f7f6 fcb5 	bl	800e234 <ucdr_serialize_uint8_t>
 80178ca:	9a01      	ldr	r2, [sp, #4]
 80178cc:	2101      	movs	r1, #1
 80178ce:	4620      	mov	r0, r4
 80178d0:	b003      	add	sp, #12
 80178d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80178d6:	f7f6 bd59 	b.w	800e38c <ucdr_serialize_endian_uint16_t>
 80178da:	bf00      	nop

080178dc <uxr_deserialize_submessage_header>:
 80178dc:	b530      	push	{r4, r5, lr}
 80178de:	b083      	sub	sp, #12
 80178e0:	4615      	mov	r5, r2
 80178e2:	4604      	mov	r4, r0
 80178e4:	9301      	str	r3, [sp, #4]
 80178e6:	f7f6 fcbb 	bl	800e260 <ucdr_deserialize_uint8_t>
 80178ea:	4629      	mov	r1, r5
 80178ec:	4620      	mov	r0, r4
 80178ee:	f7f6 fcb7 	bl	800e260 <ucdr_deserialize_uint8_t>
 80178f2:	9a01      	ldr	r2, [sp, #4]
 80178f4:	2101      	movs	r1, #1
 80178f6:	4620      	mov	r0, r4
 80178f8:	b003      	add	sp, #12
 80178fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80178fe:	f7f6 be39 	b.w	800e574 <ucdr_deserialize_endian_uint16_t>
 8017902:	bf00      	nop

08017904 <uxr_serialize_CLIENT_Representation>:
 8017904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017908:	2204      	movs	r2, #4
 801790a:	460e      	mov	r6, r1
 801790c:	4605      	mov	r5, r0
 801790e:	f7fd f919 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 8017912:	2202      	movs	r2, #2
 8017914:	4607      	mov	r7, r0
 8017916:	1d31      	adds	r1, r6, #4
 8017918:	4628      	mov	r0, r5
 801791a:	f7fd f913 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 801791e:	4038      	ands	r0, r7
 8017920:	2202      	movs	r2, #2
 8017922:	1db1      	adds	r1, r6, #6
 8017924:	b2c7      	uxtb	r7, r0
 8017926:	4628      	mov	r0, r5
 8017928:	f7fd f90c 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 801792c:	2204      	movs	r2, #4
 801792e:	4007      	ands	r7, r0
 8017930:	f106 0108 	add.w	r1, r6, #8
 8017934:	4628      	mov	r0, r5
 8017936:	f7fd f905 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 801793a:	7b31      	ldrb	r1, [r6, #12]
 801793c:	4007      	ands	r7, r0
 801793e:	4628      	mov	r0, r5
 8017940:	f7f6 fc78 	bl	800e234 <ucdr_serialize_uint8_t>
 8017944:	7b71      	ldrb	r1, [r6, #13]
 8017946:	4007      	ands	r7, r0
 8017948:	4628      	mov	r0, r5
 801794a:	f7f6 fc45 	bl	800e1d8 <ucdr_serialize_bool>
 801794e:	7b73      	ldrb	r3, [r6, #13]
 8017950:	ea07 0800 	and.w	r8, r7, r0
 8017954:	b93b      	cbnz	r3, 8017966 <uxr_serialize_CLIENT_Representation+0x62>
 8017956:	8bb1      	ldrh	r1, [r6, #28]
 8017958:	4628      	mov	r0, r5
 801795a:	f7f6 fc97 	bl	800e28c <ucdr_serialize_uint16_t>
 801795e:	ea08 0000 	and.w	r0, r8, r0
 8017962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017966:	6931      	ldr	r1, [r6, #16]
 8017968:	4628      	mov	r0, r5
 801796a:	f7f6 fe79 	bl	800e660 <ucdr_serialize_uint32_t>
 801796e:	6933      	ldr	r3, [r6, #16]
 8017970:	b1e3      	cbz	r3, 80179ac <uxr_serialize_CLIENT_Representation+0xa8>
 8017972:	b1c0      	cbz	r0, 80179a6 <uxr_serialize_CLIENT_Representation+0xa2>
 8017974:	4637      	mov	r7, r6
 8017976:	f04f 0900 	mov.w	r9, #0
 801797a:	e001      	b.n	8017980 <uxr_serialize_CLIENT_Representation+0x7c>
 801797c:	3708      	adds	r7, #8
 801797e:	b194      	cbz	r4, 80179a6 <uxr_serialize_CLIENT_Representation+0xa2>
 8017980:	6979      	ldr	r1, [r7, #20]
 8017982:	4628      	mov	r0, r5
 8017984:	f004 fc2e 	bl	801c1e4 <ucdr_serialize_string>
 8017988:	69b9      	ldr	r1, [r7, #24]
 801798a:	4604      	mov	r4, r0
 801798c:	4628      	mov	r0, r5
 801798e:	f004 fc29 	bl	801c1e4 <ucdr_serialize_string>
 8017992:	6933      	ldr	r3, [r6, #16]
 8017994:	f109 0901 	add.w	r9, r9, #1
 8017998:	4004      	ands	r4, r0
 801799a:	4599      	cmp	r9, r3
 801799c:	b2e4      	uxtb	r4, r4
 801799e:	d3ed      	bcc.n	801797c <uxr_serialize_CLIENT_Representation+0x78>
 80179a0:	ea08 0804 	and.w	r8, r8, r4
 80179a4:	e7d7      	b.n	8017956 <uxr_serialize_CLIENT_Representation+0x52>
 80179a6:	f04f 0800 	mov.w	r8, #0
 80179aa:	e7d4      	b.n	8017956 <uxr_serialize_CLIENT_Representation+0x52>
 80179ac:	ea08 0800 	and.w	r8, r8, r0
 80179b0:	e7d1      	b.n	8017956 <uxr_serialize_CLIENT_Representation+0x52>
 80179b2:	bf00      	nop

080179b4 <uxr_deserialize_CLIENT_Representation>:
 80179b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179b8:	2204      	movs	r2, #4
 80179ba:	460c      	mov	r4, r1
 80179bc:	4605      	mov	r5, r0
 80179be:	f7fd f925 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 80179c2:	2202      	movs	r2, #2
 80179c4:	4607      	mov	r7, r0
 80179c6:	1d21      	adds	r1, r4, #4
 80179c8:	4628      	mov	r0, r5
 80179ca:	f7fd f91f 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 80179ce:	4038      	ands	r0, r7
 80179d0:	2202      	movs	r2, #2
 80179d2:	1da1      	adds	r1, r4, #6
 80179d4:	b2c6      	uxtb	r6, r0
 80179d6:	4628      	mov	r0, r5
 80179d8:	f7fd f918 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 80179dc:	2204      	movs	r2, #4
 80179de:	4006      	ands	r6, r0
 80179e0:	f104 0108 	add.w	r1, r4, #8
 80179e4:	4628      	mov	r0, r5
 80179e6:	f7fd f911 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 80179ea:	f104 010c 	add.w	r1, r4, #12
 80179ee:	4006      	ands	r6, r0
 80179f0:	4628      	mov	r0, r5
 80179f2:	f7f6 fc35 	bl	800e260 <ucdr_deserialize_uint8_t>
 80179f6:	f104 010d 	add.w	r1, r4, #13
 80179fa:	ea06 0700 	and.w	r7, r6, r0
 80179fe:	4628      	mov	r0, r5
 8017a00:	f7f6 fc00 	bl	800e204 <ucdr_deserialize_bool>
 8017a04:	7b63      	ldrb	r3, [r4, #13]
 8017a06:	4007      	ands	r7, r0
 8017a08:	b93b      	cbnz	r3, 8017a1a <uxr_deserialize_CLIENT_Representation+0x66>
 8017a0a:	f104 011c 	add.w	r1, r4, #28
 8017a0e:	4628      	mov	r0, r5
 8017a10:	f7f6 fd3c 	bl	800e48c <ucdr_deserialize_uint16_t>
 8017a14:	4038      	ands	r0, r7
 8017a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a1a:	f104 0110 	add.w	r1, r4, #16
 8017a1e:	4628      	mov	r0, r5
 8017a20:	f7f6 ff4e 	bl	800e8c0 <ucdr_deserialize_uint32_t>
 8017a24:	6923      	ldr	r3, [r4, #16]
 8017a26:	2b01      	cmp	r3, #1
 8017a28:	d903      	bls.n	8017a32 <uxr_deserialize_CLIENT_Representation+0x7e>
 8017a2a:	2301      	movs	r3, #1
 8017a2c:	75ab      	strb	r3, [r5, #22]
 8017a2e:	2700      	movs	r7, #0
 8017a30:	e7eb      	b.n	8017a0a <uxr_deserialize_CLIENT_Representation+0x56>
 8017a32:	b30b      	cbz	r3, 8017a78 <uxr_deserialize_CLIENT_Representation+0xc4>
 8017a34:	2800      	cmp	r0, #0
 8017a36:	d0fa      	beq.n	8017a2e <uxr_deserialize_CLIENT_Representation+0x7a>
 8017a38:	46a0      	mov	r8, r4
 8017a3a:	f04f 0900 	mov.w	r9, #0
 8017a3e:	e001      	b.n	8017a44 <uxr_deserialize_CLIENT_Representation+0x90>
 8017a40:	2e00      	cmp	r6, #0
 8017a42:	d0f4      	beq.n	8017a2e <uxr_deserialize_CLIENT_Representation+0x7a>
 8017a44:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8017a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017a4c:	4628      	mov	r0, r5
 8017a4e:	f004 fbd9 	bl	801c204 <ucdr_deserialize_string>
 8017a52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017a56:	4606      	mov	r6, r0
 8017a58:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8017a5c:	4628      	mov	r0, r5
 8017a5e:	f004 fbd1 	bl	801c204 <ucdr_deserialize_string>
 8017a62:	6923      	ldr	r3, [r4, #16]
 8017a64:	f109 0901 	add.w	r9, r9, #1
 8017a68:	4006      	ands	r6, r0
 8017a6a:	4599      	cmp	r9, r3
 8017a6c:	f108 0808 	add.w	r8, r8, #8
 8017a70:	b2f6      	uxtb	r6, r6
 8017a72:	d3e5      	bcc.n	8017a40 <uxr_deserialize_CLIENT_Representation+0x8c>
 8017a74:	4037      	ands	r7, r6
 8017a76:	e7c8      	b.n	8017a0a <uxr_deserialize_CLIENT_Representation+0x56>
 8017a78:	4007      	ands	r7, r0
 8017a7a:	e7c6      	b.n	8017a0a <uxr_deserialize_CLIENT_Representation+0x56>

08017a7c <uxr_serialize_AGENT_Representation>:
 8017a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a80:	2204      	movs	r2, #4
 8017a82:	460f      	mov	r7, r1
 8017a84:	4605      	mov	r5, r0
 8017a86:	f7fd f85d 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 8017a8a:	2202      	movs	r2, #2
 8017a8c:	4604      	mov	r4, r0
 8017a8e:	1d39      	adds	r1, r7, #4
 8017a90:	4628      	mov	r0, r5
 8017a92:	f7fd f857 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 8017a96:	4020      	ands	r0, r4
 8017a98:	2202      	movs	r2, #2
 8017a9a:	1db9      	adds	r1, r7, #6
 8017a9c:	b2c4      	uxtb	r4, r0
 8017a9e:	4628      	mov	r0, r5
 8017aa0:	f7fd f850 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 8017aa4:	7a39      	ldrb	r1, [r7, #8]
 8017aa6:	4004      	ands	r4, r0
 8017aa8:	4628      	mov	r0, r5
 8017aaa:	f7f6 fb95 	bl	800e1d8 <ucdr_serialize_bool>
 8017aae:	7a3b      	ldrb	r3, [r7, #8]
 8017ab0:	ea00 0804 	and.w	r8, r0, r4
 8017ab4:	b913      	cbnz	r3, 8017abc <uxr_serialize_AGENT_Representation+0x40>
 8017ab6:	4640      	mov	r0, r8
 8017ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017abc:	68f9      	ldr	r1, [r7, #12]
 8017abe:	4628      	mov	r0, r5
 8017ac0:	f7f6 fdce 	bl	800e660 <ucdr_serialize_uint32_t>
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	b303      	cbz	r3, 8017b0a <uxr_serialize_AGENT_Representation+0x8e>
 8017ac8:	b1d0      	cbz	r0, 8017b00 <uxr_serialize_AGENT_Representation+0x84>
 8017aca:	463e      	mov	r6, r7
 8017acc:	f04f 0900 	mov.w	r9, #0
 8017ad0:	e001      	b.n	8017ad6 <uxr_serialize_AGENT_Representation+0x5a>
 8017ad2:	3608      	adds	r6, #8
 8017ad4:	b1a4      	cbz	r4, 8017b00 <uxr_serialize_AGENT_Representation+0x84>
 8017ad6:	6931      	ldr	r1, [r6, #16]
 8017ad8:	4628      	mov	r0, r5
 8017ada:	f004 fb83 	bl	801c1e4 <ucdr_serialize_string>
 8017ade:	6971      	ldr	r1, [r6, #20]
 8017ae0:	4604      	mov	r4, r0
 8017ae2:	4628      	mov	r0, r5
 8017ae4:	f004 fb7e 	bl	801c1e4 <ucdr_serialize_string>
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	f109 0901 	add.w	r9, r9, #1
 8017aee:	4004      	ands	r4, r0
 8017af0:	4599      	cmp	r9, r3
 8017af2:	b2e4      	uxtb	r4, r4
 8017af4:	d3ed      	bcc.n	8017ad2 <uxr_serialize_AGENT_Representation+0x56>
 8017af6:	ea08 0804 	and.w	r8, r8, r4
 8017afa:	4640      	mov	r0, r8
 8017afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b00:	f04f 0800 	mov.w	r8, #0
 8017b04:	4640      	mov	r0, r8
 8017b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b0a:	ea08 0800 	and.w	r8, r8, r0
 8017b0e:	e7d2      	b.n	8017ab6 <uxr_serialize_AGENT_Representation+0x3a>

08017b10 <uxr_serialize_DATAWRITER_Representation>:
 8017b10:	b570      	push	{r4, r5, r6, lr}
 8017b12:	460d      	mov	r5, r1
 8017b14:	7809      	ldrb	r1, [r1, #0]
 8017b16:	4606      	mov	r6, r0
 8017b18:	f7f6 fb8c 	bl	800e234 <ucdr_serialize_uint8_t>
 8017b1c:	4604      	mov	r4, r0
 8017b1e:	b130      	cbz	r0, 8017b2e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8017b20:	782b      	ldrb	r3, [r5, #0]
 8017b22:	2b02      	cmp	r3, #2
 8017b24:	d00c      	beq.n	8017b40 <uxr_serialize_DATAWRITER_Representation+0x30>
 8017b26:	2b03      	cmp	r3, #3
 8017b28:	d010      	beq.n	8017b4c <uxr_serialize_DATAWRITER_Representation+0x3c>
 8017b2a:	2b01      	cmp	r3, #1
 8017b2c:	d008      	beq.n	8017b40 <uxr_serialize_DATAWRITER_Representation+0x30>
 8017b2e:	2202      	movs	r2, #2
 8017b30:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8017b34:	4630      	mov	r0, r6
 8017b36:	f7fd f805 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 8017b3a:	4020      	ands	r0, r4
 8017b3c:	b2c0      	uxtb	r0, r0
 8017b3e:	bd70      	pop	{r4, r5, r6, pc}
 8017b40:	6869      	ldr	r1, [r5, #4]
 8017b42:	4630      	mov	r0, r6
 8017b44:	f004 fb4e 	bl	801c1e4 <ucdr_serialize_string>
 8017b48:	4604      	mov	r4, r0
 8017b4a:	e7f0      	b.n	8017b2e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8017b4c:	4629      	mov	r1, r5
 8017b4e:	4630      	mov	r0, r6
 8017b50:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8017b54:	3104      	adds	r1, #4
 8017b56:	f7fd f993 	bl	8014e80 <ucdr_serialize_sequence_uint8_t>
 8017b5a:	4604      	mov	r4, r0
 8017b5c:	e7e7      	b.n	8017b2e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8017b5e:	bf00      	nop

08017b60 <uxr_serialize_ObjectVariant.part.0>:
 8017b60:	b570      	push	{r4, r5, r6, lr}
 8017b62:	780b      	ldrb	r3, [r1, #0]
 8017b64:	3b01      	subs	r3, #1
 8017b66:	460c      	mov	r4, r1
 8017b68:	4605      	mov	r5, r0
 8017b6a:	2b0d      	cmp	r3, #13
 8017b6c:	d854      	bhi.n	8017c18 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8017b6e:	e8df f003 	tbb	[pc, r3]
 8017b72:	0730      	.short	0x0730
 8017b74:	07071b1b 	.word	0x07071b1b
 8017b78:	0c530707 	.word	0x0c530707
 8017b7c:	494e0c0c 	.word	0x494e0c0c
 8017b80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b84:	3104      	adds	r1, #4
 8017b86:	f7ff bfc3 	b.w	8017b10 <uxr_serialize_DATAWRITER_Representation>
 8017b8a:	7909      	ldrb	r1, [r1, #4]
 8017b8c:	f7f6 fb52 	bl	800e234 <ucdr_serialize_uint8_t>
 8017b90:	b1e8      	cbz	r0, 8017bce <uxr_serialize_ObjectVariant.part.0+0x6e>
 8017b92:	7923      	ldrb	r3, [r4, #4]
 8017b94:	2b01      	cmp	r3, #1
 8017b96:	d001      	beq.n	8017b9c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8017b98:	2b02      	cmp	r3, #2
 8017b9a:	d13d      	bne.n	8017c18 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8017b9c:	68a1      	ldr	r1, [r4, #8]
 8017b9e:	4628      	mov	r0, r5
 8017ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ba4:	f004 bb1e 	b.w	801c1e4 <ucdr_serialize_string>
 8017ba8:	7909      	ldrb	r1, [r1, #4]
 8017baa:	f7f6 fb43 	bl	800e234 <ucdr_serialize_uint8_t>
 8017bae:	4606      	mov	r6, r0
 8017bb0:	b120      	cbz	r0, 8017bbc <uxr_serialize_ObjectVariant.part.0+0x5c>
 8017bb2:	7923      	ldrb	r3, [r4, #4]
 8017bb4:	2b02      	cmp	r3, #2
 8017bb6:	d039      	beq.n	8017c2c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8017bb8:	2b03      	cmp	r3, #3
 8017bba:	d02f      	beq.n	8017c1c <uxr_serialize_ObjectVariant.part.0+0xbc>
 8017bbc:	2202      	movs	r2, #2
 8017bbe:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8017bc2:	4628      	mov	r0, r5
 8017bc4:	f7fc ffbe 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 8017bc8:	4030      	ands	r0, r6
 8017bca:	b2c0      	uxtb	r0, r0
 8017bcc:	bd70      	pop	{r4, r5, r6, pc}
 8017bce:	2000      	movs	r0, #0
 8017bd0:	bd70      	pop	{r4, r5, r6, pc}
 8017bd2:	7909      	ldrb	r1, [r1, #4]
 8017bd4:	f7f6 fb2e 	bl	800e234 <ucdr_serialize_uint8_t>
 8017bd8:	4606      	mov	r6, r0
 8017bda:	b158      	cbz	r0, 8017bf4 <uxr_serialize_ObjectVariant.part.0+0x94>
 8017bdc:	7923      	ldrb	r3, [r4, #4]
 8017bde:	2b02      	cmp	r3, #2
 8017be0:	d003      	beq.n	8017bea <uxr_serialize_ObjectVariant.part.0+0x8a>
 8017be2:	2b03      	cmp	r3, #3
 8017be4:	d028      	beq.n	8017c38 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8017be6:	2b01      	cmp	r3, #1
 8017be8:	d104      	bne.n	8017bf4 <uxr_serialize_ObjectVariant.part.0+0x94>
 8017bea:	68a1      	ldr	r1, [r4, #8]
 8017bec:	4628      	mov	r0, r5
 8017bee:	f004 faf9 	bl	801c1e4 <ucdr_serialize_string>
 8017bf2:	4606      	mov	r6, r0
 8017bf4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8017bf8:	4628      	mov	r0, r5
 8017bfa:	f7f7 f857 	bl	800ecac <ucdr_serialize_int16_t>
 8017bfe:	4030      	ands	r0, r6
 8017c00:	b2c0      	uxtb	r0, r0
 8017c02:	bd70      	pop	{r4, r5, r6, pc}
 8017c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c08:	3104      	adds	r1, #4
 8017c0a:	f7ff be7b 	b.w	8017904 <uxr_serialize_CLIENT_Representation>
 8017c0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c12:	3104      	adds	r1, #4
 8017c14:	f7ff bf32 	b.w	8017a7c <uxr_serialize_AGENT_Representation>
 8017c18:	2001      	movs	r0, #1
 8017c1a:	bd70      	pop	{r4, r5, r6, pc}
 8017c1c:	68a2      	ldr	r2, [r4, #8]
 8017c1e:	f104 010c 	add.w	r1, r4, #12
 8017c22:	4628      	mov	r0, r5
 8017c24:	f7fd f92c 	bl	8014e80 <ucdr_serialize_sequence_uint8_t>
 8017c28:	4606      	mov	r6, r0
 8017c2a:	e7c7      	b.n	8017bbc <uxr_serialize_ObjectVariant.part.0+0x5c>
 8017c2c:	68a1      	ldr	r1, [r4, #8]
 8017c2e:	4628      	mov	r0, r5
 8017c30:	f004 fad8 	bl	801c1e4 <ucdr_serialize_string>
 8017c34:	4606      	mov	r6, r0
 8017c36:	e7c1      	b.n	8017bbc <uxr_serialize_ObjectVariant.part.0+0x5c>
 8017c38:	68a2      	ldr	r2, [r4, #8]
 8017c3a:	f104 010c 	add.w	r1, r4, #12
 8017c3e:	4628      	mov	r0, r5
 8017c40:	f7fd f91e 	bl	8014e80 <ucdr_serialize_sequence_uint8_t>
 8017c44:	4606      	mov	r6, r0
 8017c46:	e7d5      	b.n	8017bf4 <uxr_serialize_ObjectVariant.part.0+0x94>

08017c48 <uxr_deserialize_DATAWRITER_Representation>:
 8017c48:	b570      	push	{r4, r5, r6, lr}
 8017c4a:	4606      	mov	r6, r0
 8017c4c:	460d      	mov	r5, r1
 8017c4e:	f7f6 fb07 	bl	800e260 <ucdr_deserialize_uint8_t>
 8017c52:	4604      	mov	r4, r0
 8017c54:	b130      	cbz	r0, 8017c64 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8017c56:	782b      	ldrb	r3, [r5, #0]
 8017c58:	2b02      	cmp	r3, #2
 8017c5a:	d00c      	beq.n	8017c76 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8017c5c:	2b03      	cmp	r3, #3
 8017c5e:	d012      	beq.n	8017c86 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8017c60:	2b01      	cmp	r3, #1
 8017c62:	d008      	beq.n	8017c76 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8017c64:	2202      	movs	r2, #2
 8017c66:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8017c6a:	4630      	mov	r0, r6
 8017c6c:	f7fc ffce 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 8017c70:	4020      	ands	r0, r4
 8017c72:	b2c0      	uxtb	r0, r0
 8017c74:	bd70      	pop	{r4, r5, r6, pc}
 8017c76:	6869      	ldr	r1, [r5, #4]
 8017c78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017c7c:	4630      	mov	r0, r6
 8017c7e:	f004 fac1 	bl	801c204 <ucdr_deserialize_string>
 8017c82:	4604      	mov	r4, r0
 8017c84:	e7ee      	b.n	8017c64 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8017c86:	1d2b      	adds	r3, r5, #4
 8017c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017c8c:	f105 0108 	add.w	r1, r5, #8
 8017c90:	4630      	mov	r0, r6
 8017c92:	f7fd f907 	bl	8014ea4 <ucdr_deserialize_sequence_uint8_t>
 8017c96:	4604      	mov	r4, r0
 8017c98:	e7e4      	b.n	8017c64 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8017c9a:	bf00      	nop

08017c9c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8017c9c:	b570      	push	{r4, r5, r6, lr}
 8017c9e:	460d      	mov	r5, r1
 8017ca0:	7809      	ldrb	r1, [r1, #0]
 8017ca2:	4606      	mov	r6, r0
 8017ca4:	f7f6 fa98 	bl	800e1d8 <ucdr_serialize_bool>
 8017ca8:	782b      	ldrb	r3, [r5, #0]
 8017caa:	4604      	mov	r4, r0
 8017cac:	b94b      	cbnz	r3, 8017cc2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8017cae:	7a29      	ldrb	r1, [r5, #8]
 8017cb0:	4630      	mov	r0, r6
 8017cb2:	f7f6 fa91 	bl	800e1d8 <ucdr_serialize_bool>
 8017cb6:	7a2b      	ldrb	r3, [r5, #8]
 8017cb8:	4004      	ands	r4, r0
 8017cba:	b2e4      	uxtb	r4, r4
 8017cbc:	b943      	cbnz	r3, 8017cd0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8017cbe:	4620      	mov	r0, r4
 8017cc0:	bd70      	pop	{r4, r5, r6, pc}
 8017cc2:	6869      	ldr	r1, [r5, #4]
 8017cc4:	4630      	mov	r0, r6
 8017cc6:	f004 fa8d 	bl	801c1e4 <ucdr_serialize_string>
 8017cca:	4004      	ands	r4, r0
 8017ccc:	b2e4      	uxtb	r4, r4
 8017cce:	e7ee      	b.n	8017cae <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8017cd0:	68e9      	ldr	r1, [r5, #12]
 8017cd2:	4630      	mov	r0, r6
 8017cd4:	f004 fa86 	bl	801c1e4 <ucdr_serialize_string>
 8017cd8:	4004      	ands	r4, r0
 8017cda:	4620      	mov	r0, r4
 8017cdc:	bd70      	pop	{r4, r5, r6, pc}
 8017cde:	bf00      	nop

08017ce0 <uxr_serialize_OBJK_Topic_Binary>:
 8017ce0:	b570      	push	{r4, r5, r6, lr}
 8017ce2:	460d      	mov	r5, r1
 8017ce4:	6809      	ldr	r1, [r1, #0]
 8017ce6:	4606      	mov	r6, r0
 8017ce8:	f004 fa7c 	bl	801c1e4 <ucdr_serialize_string>
 8017cec:	7929      	ldrb	r1, [r5, #4]
 8017cee:	4604      	mov	r4, r0
 8017cf0:	4630      	mov	r0, r6
 8017cf2:	f7f6 fa71 	bl	800e1d8 <ucdr_serialize_bool>
 8017cf6:	792b      	ldrb	r3, [r5, #4]
 8017cf8:	4004      	ands	r4, r0
 8017cfa:	b2e4      	uxtb	r4, r4
 8017cfc:	b943      	cbnz	r3, 8017d10 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8017cfe:	7b29      	ldrb	r1, [r5, #12]
 8017d00:	4630      	mov	r0, r6
 8017d02:	f7f6 fa69 	bl	800e1d8 <ucdr_serialize_bool>
 8017d06:	7b2b      	ldrb	r3, [r5, #12]
 8017d08:	4004      	ands	r4, r0
 8017d0a:	b93b      	cbnz	r3, 8017d1c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8017d0c:	4620      	mov	r0, r4
 8017d0e:	bd70      	pop	{r4, r5, r6, pc}
 8017d10:	68a9      	ldr	r1, [r5, #8]
 8017d12:	4630      	mov	r0, r6
 8017d14:	f004 fa66 	bl	801c1e4 <ucdr_serialize_string>
 8017d18:	4004      	ands	r4, r0
 8017d1a:	e7f0      	b.n	8017cfe <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8017d1c:	6929      	ldr	r1, [r5, #16]
 8017d1e:	4630      	mov	r0, r6
 8017d20:	f004 fa60 	bl	801c1e4 <ucdr_serialize_string>
 8017d24:	4004      	ands	r4, r0
 8017d26:	b2e4      	uxtb	r4, r4
 8017d28:	4620      	mov	r0, r4
 8017d2a:	bd70      	pop	{r4, r5, r6, pc}

08017d2c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8017d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d30:	460c      	mov	r4, r1
 8017d32:	7809      	ldrb	r1, [r1, #0]
 8017d34:	4606      	mov	r6, r0
 8017d36:	f7f6 fa4f 	bl	800e1d8 <ucdr_serialize_bool>
 8017d3a:	7823      	ldrb	r3, [r4, #0]
 8017d3c:	4605      	mov	r5, r0
 8017d3e:	b96b      	cbnz	r3, 8017d5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8017d40:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8017d44:	4630      	mov	r0, r6
 8017d46:	f7f6 fa47 	bl	800e1d8 <ucdr_serialize_bool>
 8017d4a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8017d4e:	4005      	ands	r5, r0
 8017d50:	b2ed      	uxtb	r5, r5
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d169      	bne.n	8017e2a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8017d56:	4628      	mov	r0, r5
 8017d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d5c:	6861      	ldr	r1, [r4, #4]
 8017d5e:	4630      	mov	r0, r6
 8017d60:	f7f6 fc7e 	bl	800e660 <ucdr_serialize_uint32_t>
 8017d64:	6863      	ldr	r3, [r4, #4]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d06b      	beq.n	8017e42 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8017d6a:	2800      	cmp	r0, #0
 8017d6c:	d067      	beq.n	8017e3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8017d6e:	68a1      	ldr	r1, [r4, #8]
 8017d70:	4630      	mov	r0, r6
 8017d72:	f004 fa37 	bl	801c1e4 <ucdr_serialize_string>
 8017d76:	6863      	ldr	r3, [r4, #4]
 8017d78:	2b01      	cmp	r3, #1
 8017d7a:	d953      	bls.n	8017e24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017d7c:	2800      	cmp	r0, #0
 8017d7e:	d05e      	beq.n	8017e3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8017d80:	68e1      	ldr	r1, [r4, #12]
 8017d82:	4630      	mov	r0, r6
 8017d84:	f004 fa2e 	bl	801c1e4 <ucdr_serialize_string>
 8017d88:	6863      	ldr	r3, [r4, #4]
 8017d8a:	2b02      	cmp	r3, #2
 8017d8c:	d94a      	bls.n	8017e24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017d8e:	2800      	cmp	r0, #0
 8017d90:	d055      	beq.n	8017e3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8017d92:	6921      	ldr	r1, [r4, #16]
 8017d94:	4630      	mov	r0, r6
 8017d96:	f004 fa25 	bl	801c1e4 <ucdr_serialize_string>
 8017d9a:	6863      	ldr	r3, [r4, #4]
 8017d9c:	2b03      	cmp	r3, #3
 8017d9e:	d941      	bls.n	8017e24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017da0:	2800      	cmp	r0, #0
 8017da2:	d04c      	beq.n	8017e3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8017da4:	6961      	ldr	r1, [r4, #20]
 8017da6:	4630      	mov	r0, r6
 8017da8:	f004 fa1c 	bl	801c1e4 <ucdr_serialize_string>
 8017dac:	6863      	ldr	r3, [r4, #4]
 8017dae:	2b04      	cmp	r3, #4
 8017db0:	d938      	bls.n	8017e24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017db2:	2800      	cmp	r0, #0
 8017db4:	d043      	beq.n	8017e3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8017db6:	69a1      	ldr	r1, [r4, #24]
 8017db8:	4630      	mov	r0, r6
 8017dba:	f004 fa13 	bl	801c1e4 <ucdr_serialize_string>
 8017dbe:	6863      	ldr	r3, [r4, #4]
 8017dc0:	2b05      	cmp	r3, #5
 8017dc2:	d92f      	bls.n	8017e24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017dc4:	2800      	cmp	r0, #0
 8017dc6:	d03a      	beq.n	8017e3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8017dc8:	69e1      	ldr	r1, [r4, #28]
 8017dca:	4630      	mov	r0, r6
 8017dcc:	f004 fa0a 	bl	801c1e4 <ucdr_serialize_string>
 8017dd0:	6863      	ldr	r3, [r4, #4]
 8017dd2:	2b06      	cmp	r3, #6
 8017dd4:	d926      	bls.n	8017e24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017dd6:	b390      	cbz	r0, 8017e3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8017dd8:	6a21      	ldr	r1, [r4, #32]
 8017dda:	4630      	mov	r0, r6
 8017ddc:	f004 fa02 	bl	801c1e4 <ucdr_serialize_string>
 8017de0:	6863      	ldr	r3, [r4, #4]
 8017de2:	2b07      	cmp	r3, #7
 8017de4:	d91e      	bls.n	8017e24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017de6:	b350      	cbz	r0, 8017e3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8017de8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8017dea:	4630      	mov	r0, r6
 8017dec:	f004 f9fa 	bl	801c1e4 <ucdr_serialize_string>
 8017df0:	6863      	ldr	r3, [r4, #4]
 8017df2:	2b08      	cmp	r3, #8
 8017df4:	d916      	bls.n	8017e24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017df6:	b310      	cbz	r0, 8017e3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8017df8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8017dfa:	4630      	mov	r0, r6
 8017dfc:	f004 f9f2 	bl	801c1e4 <ucdr_serialize_string>
 8017e00:	6863      	ldr	r3, [r4, #4]
 8017e02:	2b09      	cmp	r3, #9
 8017e04:	d90e      	bls.n	8017e24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017e06:	b1d0      	cbz	r0, 8017e3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8017e08:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8017e0c:	2709      	movs	r7, #9
 8017e0e:	e000      	b.n	8017e12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8017e10:	b1a8      	cbz	r0, 8017e3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8017e12:	f858 1b04 	ldr.w	r1, [r8], #4
 8017e16:	4630      	mov	r0, r6
 8017e18:	f004 f9e4 	bl	801c1e4 <ucdr_serialize_string>
 8017e1c:	6862      	ldr	r2, [r4, #4]
 8017e1e:	3701      	adds	r7, #1
 8017e20:	4297      	cmp	r7, r2
 8017e22:	d3f5      	bcc.n	8017e10 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8017e24:	4005      	ands	r5, r0
 8017e26:	b2ed      	uxtb	r5, r5
 8017e28:	e78a      	b.n	8017d40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8017e2a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017e2c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017e30:	4630      	mov	r0, r6
 8017e32:	f7fd f825 	bl	8014e80 <ucdr_serialize_sequence_uint8_t>
 8017e36:	4005      	ands	r5, r0
 8017e38:	4628      	mov	r0, r5
 8017e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e3e:	2500      	movs	r5, #0
 8017e40:	e77e      	b.n	8017d40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8017e42:	4028      	ands	r0, r5
 8017e44:	b2c5      	uxtb	r5, r0
 8017e46:	e77b      	b.n	8017d40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08017e48 <uxr_serialize_OBJK_Publisher_Binary>:
 8017e48:	b570      	push	{r4, r5, r6, lr}
 8017e4a:	460d      	mov	r5, r1
 8017e4c:	7809      	ldrb	r1, [r1, #0]
 8017e4e:	4606      	mov	r6, r0
 8017e50:	f7f6 f9c2 	bl	800e1d8 <ucdr_serialize_bool>
 8017e54:	782b      	ldrb	r3, [r5, #0]
 8017e56:	4604      	mov	r4, r0
 8017e58:	b94b      	cbnz	r3, 8017e6e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8017e5a:	7a29      	ldrb	r1, [r5, #8]
 8017e5c:	4630      	mov	r0, r6
 8017e5e:	f7f6 f9bb 	bl	800e1d8 <ucdr_serialize_bool>
 8017e62:	7a2b      	ldrb	r3, [r5, #8]
 8017e64:	4004      	ands	r4, r0
 8017e66:	b2e4      	uxtb	r4, r4
 8017e68:	b943      	cbnz	r3, 8017e7c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8017e6a:	4620      	mov	r0, r4
 8017e6c:	bd70      	pop	{r4, r5, r6, pc}
 8017e6e:	6869      	ldr	r1, [r5, #4]
 8017e70:	4630      	mov	r0, r6
 8017e72:	f004 f9b7 	bl	801c1e4 <ucdr_serialize_string>
 8017e76:	4004      	ands	r4, r0
 8017e78:	b2e4      	uxtb	r4, r4
 8017e7a:	e7ee      	b.n	8017e5a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8017e7c:	f105 010c 	add.w	r1, r5, #12
 8017e80:	4630      	mov	r0, r6
 8017e82:	f7ff ff53 	bl	8017d2c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8017e86:	4004      	ands	r4, r0
 8017e88:	4620      	mov	r0, r4
 8017e8a:	bd70      	pop	{r4, r5, r6, pc}

08017e8c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8017e8c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8017e90:	4688      	mov	r8, r1
 8017e92:	8809      	ldrh	r1, [r1, #0]
 8017e94:	4681      	mov	r9, r0
 8017e96:	f7f6 f9f9 	bl	800e28c <ucdr_serialize_uint16_t>
 8017e9a:	f898 1002 	ldrb.w	r1, [r8, #2]
 8017e9e:	4606      	mov	r6, r0
 8017ea0:	4648      	mov	r0, r9
 8017ea2:	f7f6 f999 	bl	800e1d8 <ucdr_serialize_bool>
 8017ea6:	f898 3002 	ldrb.w	r3, [r8, #2]
 8017eaa:	4006      	ands	r6, r0
 8017eac:	b2f5      	uxtb	r5, r6
 8017eae:	b9eb      	cbnz	r3, 8017eec <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8017eb0:	f898 1006 	ldrb.w	r1, [r8, #6]
 8017eb4:	4648      	mov	r0, r9
 8017eb6:	f7f6 f98f 	bl	800e1d8 <ucdr_serialize_bool>
 8017eba:	f898 3006 	ldrb.w	r3, [r8, #6]
 8017ebe:	4005      	ands	r5, r0
 8017ec0:	bb7b      	cbnz	r3, 8017f22 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8017ec2:	f898 100c 	ldrb.w	r1, [r8, #12]
 8017ec6:	4648      	mov	r0, r9
 8017ec8:	f7f6 f986 	bl	800e1d8 <ucdr_serialize_bool>
 8017ecc:	f898 300c 	ldrb.w	r3, [r8, #12]
 8017ed0:	4005      	ands	r5, r0
 8017ed2:	b9f3      	cbnz	r3, 8017f12 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8017ed4:	f898 1014 	ldrb.w	r1, [r8, #20]
 8017ed8:	4648      	mov	r0, r9
 8017eda:	f7f6 f97d 	bl	800e1d8 <ucdr_serialize_bool>
 8017ede:	f898 3014 	ldrb.w	r3, [r8, #20]
 8017ee2:	4005      	ands	r5, r0
 8017ee4:	b94b      	cbnz	r3, 8017efa <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8017ee6:	4628      	mov	r0, r5
 8017ee8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8017eec:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8017ef0:	4648      	mov	r0, r9
 8017ef2:	f7f6 f9cb 	bl	800e28c <ucdr_serialize_uint16_t>
 8017ef6:	4005      	ands	r5, r0
 8017ef8:	e7da      	b.n	8017eb0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8017efa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8017efe:	f108 011c 	add.w	r1, r8, #28
 8017f02:	4648      	mov	r0, r9
 8017f04:	f7fc ffbc 	bl	8014e80 <ucdr_serialize_sequence_uint8_t>
 8017f08:	4028      	ands	r0, r5
 8017f0a:	b2c5      	uxtb	r5, r0
 8017f0c:	4628      	mov	r0, r5
 8017f0e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8017f12:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8017f16:	4648      	mov	r0, r9
 8017f18:	f7f6 fba2 	bl	800e660 <ucdr_serialize_uint32_t>
 8017f1c:	4028      	ands	r0, r5
 8017f1e:	b2c5      	uxtb	r5, r0
 8017f20:	e7d8      	b.n	8017ed4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8017f22:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8017f26:	4648      	mov	r0, r9
 8017f28:	f7f6 fb9a 	bl	800e660 <ucdr_serialize_uint32_t>
 8017f2c:	4028      	ands	r0, r5
 8017f2e:	b2c5      	uxtb	r5, r0
 8017f30:	e7c7      	b.n	8017ec2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8017f32:	bf00      	nop

08017f34 <uxr_serialize_OBJK_DataWriter_Binary>:
 8017f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f36:	2202      	movs	r2, #2
 8017f38:	460d      	mov	r5, r1
 8017f3a:	4606      	mov	r6, r0
 8017f3c:	f7fc fe02 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 8017f40:	78a9      	ldrb	r1, [r5, #2]
 8017f42:	4604      	mov	r4, r0
 8017f44:	4630      	mov	r0, r6
 8017f46:	f7f6 f947 	bl	800e1d8 <ucdr_serialize_bool>
 8017f4a:	78ab      	ldrb	r3, [r5, #2]
 8017f4c:	4004      	ands	r4, r0
 8017f4e:	b2e4      	uxtb	r4, r4
 8017f50:	b90b      	cbnz	r3, 8017f56 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8017f52:	4620      	mov	r0, r4
 8017f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f56:	f105 0108 	add.w	r1, r5, #8
 8017f5a:	4630      	mov	r0, r6
 8017f5c:	f7ff ff96 	bl	8017e8c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8017f60:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8017f64:	4607      	mov	r7, r0
 8017f66:	4630      	mov	r0, r6
 8017f68:	f7f6 f936 	bl	800e1d8 <ucdr_serialize_bool>
 8017f6c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8017f70:	4038      	ands	r0, r7
 8017f72:	b2c7      	uxtb	r7, r0
 8017f74:	b913      	cbnz	r3, 8017f7c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8017f76:	403c      	ands	r4, r7
 8017f78:	4620      	mov	r0, r4
 8017f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f7c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8017f80:	4630      	mov	r0, r6
 8017f82:	f7f6 fdc3 	bl	800eb0c <ucdr_serialize_uint64_t>
 8017f86:	4007      	ands	r7, r0
 8017f88:	e7f5      	b.n	8017f76 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8017f8a:	bf00      	nop

08017f8c <uxr_serialize_OBJK_Requester_Binary>:
 8017f8c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8017f90:	460f      	mov	r7, r1
 8017f92:	6809      	ldr	r1, [r1, #0]
 8017f94:	4680      	mov	r8, r0
 8017f96:	f004 f925 	bl	801c1e4 <ucdr_serialize_string>
 8017f9a:	6879      	ldr	r1, [r7, #4]
 8017f9c:	4605      	mov	r5, r0
 8017f9e:	4640      	mov	r0, r8
 8017fa0:	f004 f920 	bl	801c1e4 <ucdr_serialize_string>
 8017fa4:	68b9      	ldr	r1, [r7, #8]
 8017fa6:	4005      	ands	r5, r0
 8017fa8:	4640      	mov	r0, r8
 8017faa:	f004 f91b 	bl	801c1e4 <ucdr_serialize_string>
 8017fae:	b2ec      	uxtb	r4, r5
 8017fb0:	4004      	ands	r4, r0
 8017fb2:	7b39      	ldrb	r1, [r7, #12]
 8017fb4:	4640      	mov	r0, r8
 8017fb6:	f7f6 f90f 	bl	800e1d8 <ucdr_serialize_bool>
 8017fba:	7b3b      	ldrb	r3, [r7, #12]
 8017fbc:	4004      	ands	r4, r0
 8017fbe:	b94b      	cbnz	r3, 8017fd4 <uxr_serialize_OBJK_Requester_Binary+0x48>
 8017fc0:	7d39      	ldrb	r1, [r7, #20]
 8017fc2:	4640      	mov	r0, r8
 8017fc4:	f7f6 f908 	bl	800e1d8 <ucdr_serialize_bool>
 8017fc8:	7d3b      	ldrb	r3, [r7, #20]
 8017fca:	4004      	ands	r4, r0
 8017fcc:	b943      	cbnz	r3, 8017fe0 <uxr_serialize_OBJK_Requester_Binary+0x54>
 8017fce:	4620      	mov	r0, r4
 8017fd0:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8017fd4:	6939      	ldr	r1, [r7, #16]
 8017fd6:	4640      	mov	r0, r8
 8017fd8:	f004 f904 	bl	801c1e4 <ucdr_serialize_string>
 8017fdc:	4004      	ands	r4, r0
 8017fde:	e7ef      	b.n	8017fc0 <uxr_serialize_OBJK_Requester_Binary+0x34>
 8017fe0:	69b9      	ldr	r1, [r7, #24]
 8017fe2:	4640      	mov	r0, r8
 8017fe4:	f004 f8fe 	bl	801c1e4 <ucdr_serialize_string>
 8017fe8:	4004      	ands	r4, r0
 8017fea:	b2e4      	uxtb	r4, r4
 8017fec:	4620      	mov	r0, r4
 8017fee:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8017ff2:	bf00      	nop

08017ff4 <uxr_serialize_OBJK_Replier_Binary>:
 8017ff4:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8017ff8:	460f      	mov	r7, r1
 8017ffa:	6809      	ldr	r1, [r1, #0]
 8017ffc:	4680      	mov	r8, r0
 8017ffe:	f004 f8f1 	bl	801c1e4 <ucdr_serialize_string>
 8018002:	6879      	ldr	r1, [r7, #4]
 8018004:	4605      	mov	r5, r0
 8018006:	4640      	mov	r0, r8
 8018008:	f004 f8ec 	bl	801c1e4 <ucdr_serialize_string>
 801800c:	68b9      	ldr	r1, [r7, #8]
 801800e:	4005      	ands	r5, r0
 8018010:	4640      	mov	r0, r8
 8018012:	f004 f8e7 	bl	801c1e4 <ucdr_serialize_string>
 8018016:	b2ec      	uxtb	r4, r5
 8018018:	4004      	ands	r4, r0
 801801a:	7b39      	ldrb	r1, [r7, #12]
 801801c:	4640      	mov	r0, r8
 801801e:	f7f6 f8db 	bl	800e1d8 <ucdr_serialize_bool>
 8018022:	7b3b      	ldrb	r3, [r7, #12]
 8018024:	4004      	ands	r4, r0
 8018026:	b94b      	cbnz	r3, 801803c <uxr_serialize_OBJK_Replier_Binary+0x48>
 8018028:	7d39      	ldrb	r1, [r7, #20]
 801802a:	4640      	mov	r0, r8
 801802c:	f7f6 f8d4 	bl	800e1d8 <ucdr_serialize_bool>
 8018030:	7d3b      	ldrb	r3, [r7, #20]
 8018032:	4004      	ands	r4, r0
 8018034:	b943      	cbnz	r3, 8018048 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8018036:	4620      	mov	r0, r4
 8018038:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801803c:	6939      	ldr	r1, [r7, #16]
 801803e:	4640      	mov	r0, r8
 8018040:	f004 f8d0 	bl	801c1e4 <ucdr_serialize_string>
 8018044:	4004      	ands	r4, r0
 8018046:	e7ef      	b.n	8018028 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8018048:	69b9      	ldr	r1, [r7, #24]
 801804a:	4640      	mov	r0, r8
 801804c:	f004 f8ca 	bl	801c1e4 <ucdr_serialize_string>
 8018050:	4004      	ands	r4, r0
 8018052:	b2e4      	uxtb	r4, r4
 8018054:	4620      	mov	r0, r4
 8018056:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801805a:	bf00      	nop

0801805c <uxr_deserialize_ObjectVariant>:
 801805c:	b570      	push	{r4, r5, r6, lr}
 801805e:	4605      	mov	r5, r0
 8018060:	460e      	mov	r6, r1
 8018062:	f7f6 f8fd 	bl	800e260 <ucdr_deserialize_uint8_t>
 8018066:	b168      	cbz	r0, 8018084 <uxr_deserialize_ObjectVariant+0x28>
 8018068:	7833      	ldrb	r3, [r6, #0]
 801806a:	3b01      	subs	r3, #1
 801806c:	4604      	mov	r4, r0
 801806e:	2b0d      	cmp	r3, #13
 8018070:	d809      	bhi.n	8018086 <uxr_deserialize_ObjectVariant+0x2a>
 8018072:	e8df f003 	tbb	[pc, r3]
 8018076:	0a41      	.short	0x0a41
 8018078:	0a0a2323 	.word	0x0a0a2323
 801807c:	10080a0a 	.word	0x10080a0a
 8018080:	565c1010 	.word	0x565c1010
 8018084:	2400      	movs	r4, #0
 8018086:	4620      	mov	r0, r4
 8018088:	bd70      	pop	{r4, r5, r6, pc}
 801808a:	1d31      	adds	r1, r6, #4
 801808c:	4628      	mov	r0, r5
 801808e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018092:	f7ff bdd9 	b.w	8017c48 <uxr_deserialize_DATAWRITER_Representation>
 8018096:	1d31      	adds	r1, r6, #4
 8018098:	4628      	mov	r0, r5
 801809a:	f7f6 f8e1 	bl	800e260 <ucdr_deserialize_uint8_t>
 801809e:	2800      	cmp	r0, #0
 80180a0:	d0f0      	beq.n	8018084 <uxr_deserialize_ObjectVariant+0x28>
 80180a2:	7933      	ldrb	r3, [r6, #4]
 80180a4:	2b01      	cmp	r3, #1
 80180a6:	d001      	beq.n	80180ac <uxr_deserialize_ObjectVariant+0x50>
 80180a8:	2b02      	cmp	r3, #2
 80180aa:	d1ec      	bne.n	8018086 <uxr_deserialize_ObjectVariant+0x2a>
 80180ac:	68b1      	ldr	r1, [r6, #8]
 80180ae:	4628      	mov	r0, r5
 80180b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80180b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80180b8:	f004 b8a4 	b.w	801c204 <ucdr_deserialize_string>
 80180bc:	1d31      	adds	r1, r6, #4
 80180be:	4628      	mov	r0, r5
 80180c0:	f7f6 f8ce 	bl	800e260 <ucdr_deserialize_uint8_t>
 80180c4:	4604      	mov	r4, r0
 80180c6:	b170      	cbz	r0, 80180e6 <uxr_deserialize_ObjectVariant+0x8a>
 80180c8:	7933      	ldrb	r3, [r6, #4]
 80180ca:	2b02      	cmp	r3, #2
 80180cc:	d04c      	beq.n	8018168 <uxr_deserialize_ObjectVariant+0x10c>
 80180ce:	2b03      	cmp	r3, #3
 80180d0:	d109      	bne.n	80180e6 <uxr_deserialize_ObjectVariant+0x8a>
 80180d2:	f106 0308 	add.w	r3, r6, #8
 80180d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80180da:	f106 010c 	add.w	r1, r6, #12
 80180de:	4628      	mov	r0, r5
 80180e0:	f7fc fee0 	bl	8014ea4 <ucdr_deserialize_sequence_uint8_t>
 80180e4:	4604      	mov	r4, r0
 80180e6:	2202      	movs	r2, #2
 80180e8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80180ec:	4628      	mov	r0, r5
 80180ee:	f7fc fd8d 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 80180f2:	4020      	ands	r0, r4
 80180f4:	b2c4      	uxtb	r4, r0
 80180f6:	e7c6      	b.n	8018086 <uxr_deserialize_ObjectVariant+0x2a>
 80180f8:	1d31      	adds	r1, r6, #4
 80180fa:	4628      	mov	r0, r5
 80180fc:	f7f6 f8b0 	bl	800e260 <ucdr_deserialize_uint8_t>
 8018100:	4604      	mov	r4, r0
 8018102:	b130      	cbz	r0, 8018112 <uxr_deserialize_ObjectVariant+0xb6>
 8018104:	7933      	ldrb	r3, [r6, #4]
 8018106:	2b02      	cmp	r3, #2
 8018108:	d036      	beq.n	8018178 <uxr_deserialize_ObjectVariant+0x11c>
 801810a:	2b03      	cmp	r3, #3
 801810c:	d03c      	beq.n	8018188 <uxr_deserialize_ObjectVariant+0x12c>
 801810e:	2b01      	cmp	r3, #1
 8018110:	d032      	beq.n	8018178 <uxr_deserialize_ObjectVariant+0x11c>
 8018112:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8018116:	4628      	mov	r0, r5
 8018118:	f7f6 fe48 	bl	800edac <ucdr_deserialize_int16_t>
 801811c:	4020      	ands	r0, r4
 801811e:	b2c4      	uxtb	r4, r0
 8018120:	e7b1      	b.n	8018086 <uxr_deserialize_ObjectVariant+0x2a>
 8018122:	1d31      	adds	r1, r6, #4
 8018124:	4628      	mov	r0, r5
 8018126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801812a:	f7ff bc43 	b.w	80179b4 <uxr_deserialize_CLIENT_Representation>
 801812e:	2204      	movs	r2, #4
 8018130:	18b1      	adds	r1, r6, r2
 8018132:	4628      	mov	r0, r5
 8018134:	f7fc fd6a 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 8018138:	2202      	movs	r2, #2
 801813a:	f106 0108 	add.w	r1, r6, #8
 801813e:	4604      	mov	r4, r0
 8018140:	4628      	mov	r0, r5
 8018142:	f7fc fd63 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 8018146:	2202      	movs	r2, #2
 8018148:	4004      	ands	r4, r0
 801814a:	f106 010a 	add.w	r1, r6, #10
 801814e:	4628      	mov	r0, r5
 8018150:	f7fc fd5c 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 8018154:	b2e4      	uxtb	r4, r4
 8018156:	4603      	mov	r3, r0
 8018158:	f106 010c 	add.w	r1, r6, #12
 801815c:	4628      	mov	r0, r5
 801815e:	401c      	ands	r4, r3
 8018160:	f7f6 f850 	bl	800e204 <ucdr_deserialize_bool>
 8018164:	4004      	ands	r4, r0
 8018166:	e78e      	b.n	8018086 <uxr_deserialize_ObjectVariant+0x2a>
 8018168:	68b1      	ldr	r1, [r6, #8]
 801816a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801816e:	4628      	mov	r0, r5
 8018170:	f004 f848 	bl	801c204 <ucdr_deserialize_string>
 8018174:	4604      	mov	r4, r0
 8018176:	e7b6      	b.n	80180e6 <uxr_deserialize_ObjectVariant+0x8a>
 8018178:	68b1      	ldr	r1, [r6, #8]
 801817a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801817e:	4628      	mov	r0, r5
 8018180:	f004 f840 	bl	801c204 <ucdr_deserialize_string>
 8018184:	4604      	mov	r4, r0
 8018186:	e7c4      	b.n	8018112 <uxr_deserialize_ObjectVariant+0xb6>
 8018188:	f106 0308 	add.w	r3, r6, #8
 801818c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018190:	f106 010c 	add.w	r1, r6, #12
 8018194:	4628      	mov	r0, r5
 8018196:	f7fc fe85 	bl	8014ea4 <ucdr_deserialize_sequence_uint8_t>
 801819a:	4604      	mov	r4, r0
 801819c:	e7b9      	b.n	8018112 <uxr_deserialize_ObjectVariant+0xb6>
 801819e:	bf00      	nop

080181a0 <uxr_deserialize_BaseObjectRequest>:
 80181a0:	b570      	push	{r4, r5, r6, lr}
 80181a2:	2202      	movs	r2, #2
 80181a4:	4605      	mov	r5, r0
 80181a6:	460e      	mov	r6, r1
 80181a8:	f7fc fd30 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 80181ac:	2202      	movs	r2, #2
 80181ae:	4604      	mov	r4, r0
 80181b0:	18b1      	adds	r1, r6, r2
 80181b2:	4628      	mov	r0, r5
 80181b4:	f7fc fd2a 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 80181b8:	4020      	ands	r0, r4
 80181ba:	b2c0      	uxtb	r0, r0
 80181bc:	bd70      	pop	{r4, r5, r6, pc}
 80181be:	bf00      	nop

080181c0 <uxr_serialize_ActivityInfoVariant>:
 80181c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181c4:	460d      	mov	r5, r1
 80181c6:	7809      	ldrb	r1, [r1, #0]
 80181c8:	4607      	mov	r7, r0
 80181ca:	f7f6 f833 	bl	800e234 <ucdr_serialize_uint8_t>
 80181ce:	4681      	mov	r9, r0
 80181d0:	b138      	cbz	r0, 80181e2 <uxr_serialize_ActivityInfoVariant+0x22>
 80181d2:	782b      	ldrb	r3, [r5, #0]
 80181d4:	2b06      	cmp	r3, #6
 80181d6:	f000 8082 	beq.w	80182de <uxr_serialize_ActivityInfoVariant+0x11e>
 80181da:	2b0d      	cmp	r3, #13
 80181dc:	d016      	beq.n	801820c <uxr_serialize_ActivityInfoVariant+0x4c>
 80181de:	2b05      	cmp	r3, #5
 80181e0:	d002      	beq.n	80181e8 <uxr_serialize_ActivityInfoVariant+0x28>
 80181e2:	4648      	mov	r0, r9
 80181e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181e8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80181ec:	4638      	mov	r0, r7
 80181ee:	f7f6 fd5d 	bl	800ecac <ucdr_serialize_int16_t>
 80181f2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80181f6:	4681      	mov	r9, r0
 80181f8:	4638      	mov	r0, r7
 80181fa:	f7f6 fc87 	bl	800eb0c <ucdr_serialize_uint64_t>
 80181fe:	ea09 0000 	and.w	r0, r9, r0
 8018202:	fa5f f980 	uxtb.w	r9, r0
 8018206:	4648      	mov	r0, r9
 8018208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801820c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8018210:	4638      	mov	r0, r7
 8018212:	f7f6 fd4b 	bl	800ecac <ucdr_serialize_int16_t>
 8018216:	68e9      	ldr	r1, [r5, #12]
 8018218:	4681      	mov	r9, r0
 801821a:	4638      	mov	r0, r7
 801821c:	f7f6 fa20 	bl	800e660 <ucdr_serialize_uint32_t>
 8018220:	68eb      	ldr	r3, [r5, #12]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d0eb      	beq.n	80181fe <uxr_serialize_ActivityInfoVariant+0x3e>
 8018226:	b320      	cbz	r0, 8018272 <uxr_serialize_ActivityInfoVariant+0xb2>
 8018228:	f105 080c 	add.w	r8, r5, #12
 801822c:	2600      	movs	r6, #0
 801822e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8018232:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8018236:	f89a 1010 	ldrb.w	r1, [sl, #16]
 801823a:	4638      	mov	r0, r7
 801823c:	f7f5 fffa 	bl	800e234 <ucdr_serialize_uint8_t>
 8018240:	2800      	cmp	r0, #0
 8018242:	d053      	beq.n	80182ec <uxr_serialize_ActivityInfoVariant+0x12c>
 8018244:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8018248:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801824c:	0074      	lsls	r4, r6, #1
 801824e:	00c9      	lsls	r1, r1, #3
 8018250:	2b03      	cmp	r3, #3
 8018252:	d854      	bhi.n	80182fe <uxr_serialize_ActivityInfoVariant+0x13e>
 8018254:	e8df f003 	tbb	[pc, r3]
 8018258:	02102132 	.word	0x02102132
 801825c:	4441      	add	r1, r8
 801825e:	4638      	mov	r0, r7
 8018260:	6889      	ldr	r1, [r1, #8]
 8018262:	f003 ffbf 	bl	801c1e4 <ucdr_serialize_string>
 8018266:	68ea      	ldr	r2, [r5, #12]
 8018268:	3601      	adds	r6, #1
 801826a:	4296      	cmp	r6, r2
 801826c:	d242      	bcs.n	80182f4 <uxr_serialize_ActivityInfoVariant+0x134>
 801826e:	2800      	cmp	r0, #0
 8018270:	d1dd      	bne.n	801822e <uxr_serialize_ActivityInfoVariant+0x6e>
 8018272:	f04f 0900 	mov.w	r9, #0
 8018276:	e7b4      	b.n	80181e2 <uxr_serialize_ActivityInfoVariant+0x22>
 8018278:	3108      	adds	r1, #8
 801827a:	4441      	add	r1, r8
 801827c:	2210      	movs	r2, #16
 801827e:	4638      	mov	r0, r7
 8018280:	f7fc fc60 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 8018284:	4434      	add	r4, r6
 8018286:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801828a:	4604      	mov	r4, r0
 801828c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801828e:	4638      	mov	r0, r7
 8018290:	f7f6 f9e6 	bl	800e660 <ucdr_serialize_uint32_t>
 8018294:	4020      	ands	r0, r4
 8018296:	b2c0      	uxtb	r0, r0
 8018298:	e7e5      	b.n	8018266 <uxr_serialize_ActivityInfoVariant+0xa6>
 801829a:	3108      	adds	r1, #8
 801829c:	4441      	add	r1, r8
 801829e:	2204      	movs	r2, #4
 80182a0:	4638      	mov	r0, r7
 80182a2:	f7fc fc4f 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 80182a6:	4434      	add	r4, r6
 80182a8:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80182ac:	4604      	mov	r4, r0
 80182ae:	8b19      	ldrh	r1, [r3, #24]
 80182b0:	4638      	mov	r0, r7
 80182b2:	f7f5 ffeb 	bl	800e28c <ucdr_serialize_uint16_t>
 80182b6:	4020      	ands	r0, r4
 80182b8:	b2c0      	uxtb	r0, r0
 80182ba:	e7d4      	b.n	8018266 <uxr_serialize_ActivityInfoVariant+0xa6>
 80182bc:	3108      	adds	r1, #8
 80182be:	4441      	add	r1, r8
 80182c0:	2202      	movs	r2, #2
 80182c2:	4638      	mov	r0, r7
 80182c4:	f7fc fc3e 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 80182c8:	4434      	add	r4, r6
 80182ca:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80182ce:	4604      	mov	r4, r0
 80182d0:	7d99      	ldrb	r1, [r3, #22]
 80182d2:	4638      	mov	r0, r7
 80182d4:	f7f5 ffae 	bl	800e234 <ucdr_serialize_uint8_t>
 80182d8:	4020      	ands	r0, r4
 80182da:	b2c0      	uxtb	r0, r0
 80182dc:	e7c3      	b.n	8018266 <uxr_serialize_ActivityInfoVariant+0xa6>
 80182de:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80182e2:	4638      	mov	r0, r7
 80182e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182e8:	f7f6 bce0 	b.w	800ecac <ucdr_serialize_int16_t>
 80182ec:	68ea      	ldr	r2, [r5, #12]
 80182ee:	3601      	adds	r6, #1
 80182f0:	42b2      	cmp	r2, r6
 80182f2:	d8be      	bhi.n	8018272 <uxr_serialize_ActivityInfoVariant+0xb2>
 80182f4:	ea09 0900 	and.w	r9, r9, r0
 80182f8:	fa5f f989 	uxtb.w	r9, r9
 80182fc:	e771      	b.n	80181e2 <uxr_serialize_ActivityInfoVariant+0x22>
 80182fe:	68eb      	ldr	r3, [r5, #12]
 8018300:	3601      	adds	r6, #1
 8018302:	429e      	cmp	r6, r3
 8018304:	f10a 0a18 	add.w	sl, sl, #24
 8018308:	d395      	bcc.n	8018236 <uxr_serialize_ActivityInfoVariant+0x76>
 801830a:	e76a      	b.n	80181e2 <uxr_serialize_ActivityInfoVariant+0x22>

0801830c <uxr_deserialize_BaseObjectReply>:
 801830c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018310:	2202      	movs	r2, #2
 8018312:	4606      	mov	r6, r0
 8018314:	460f      	mov	r7, r1
 8018316:	f7fc fc79 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 801831a:	2202      	movs	r2, #2
 801831c:	18b9      	adds	r1, r7, r2
 801831e:	4605      	mov	r5, r0
 8018320:	4630      	mov	r0, r6
 8018322:	f7fc fc73 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 8018326:	1d39      	adds	r1, r7, #4
 8018328:	4680      	mov	r8, r0
 801832a:	4630      	mov	r0, r6
 801832c:	f7f5 ff98 	bl	800e260 <ucdr_deserialize_uint8_t>
 8018330:	1d79      	adds	r1, r7, #5
 8018332:	4604      	mov	r4, r0
 8018334:	4630      	mov	r0, r6
 8018336:	f7f5 ff93 	bl	800e260 <ucdr_deserialize_uint8_t>
 801833a:	ea05 0508 	and.w	r5, r5, r8
 801833e:	402c      	ands	r4, r5
 8018340:	4020      	ands	r0, r4
 8018342:	b2c0      	uxtb	r0, r0
 8018344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018348 <uxr_serialize_ReadSpecification>:
 8018348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801834c:	460e      	mov	r6, r1
 801834e:	7809      	ldrb	r1, [r1, #0]
 8018350:	4607      	mov	r7, r0
 8018352:	f7f5 ff6f 	bl	800e234 <ucdr_serialize_uint8_t>
 8018356:	7871      	ldrb	r1, [r6, #1]
 8018358:	4604      	mov	r4, r0
 801835a:	4638      	mov	r0, r7
 801835c:	f7f5 ff6a 	bl	800e234 <ucdr_serialize_uint8_t>
 8018360:	78b1      	ldrb	r1, [r6, #2]
 8018362:	4004      	ands	r4, r0
 8018364:	4638      	mov	r0, r7
 8018366:	f7f5 ff37 	bl	800e1d8 <ucdr_serialize_bool>
 801836a:	78b3      	ldrb	r3, [r6, #2]
 801836c:	b2e4      	uxtb	r4, r4
 801836e:	4004      	ands	r4, r0
 8018370:	b94b      	cbnz	r3, 8018386 <uxr_serialize_ReadSpecification+0x3e>
 8018372:	7a31      	ldrb	r1, [r6, #8]
 8018374:	4638      	mov	r0, r7
 8018376:	f7f5 ff2f 	bl	800e1d8 <ucdr_serialize_bool>
 801837a:	7a33      	ldrb	r3, [r6, #8]
 801837c:	4004      	ands	r4, r0
 801837e:	b943      	cbnz	r3, 8018392 <uxr_serialize_ReadSpecification+0x4a>
 8018380:	4620      	mov	r0, r4
 8018382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018386:	6871      	ldr	r1, [r6, #4]
 8018388:	4638      	mov	r0, r7
 801838a:	f003 ff2b 	bl	801c1e4 <ucdr_serialize_string>
 801838e:	4004      	ands	r4, r0
 8018390:	e7ef      	b.n	8018372 <uxr_serialize_ReadSpecification+0x2a>
 8018392:	8971      	ldrh	r1, [r6, #10]
 8018394:	4638      	mov	r0, r7
 8018396:	f7f5 ff79 	bl	800e28c <ucdr_serialize_uint16_t>
 801839a:	89b1      	ldrh	r1, [r6, #12]
 801839c:	4605      	mov	r5, r0
 801839e:	4638      	mov	r0, r7
 80183a0:	f7f5 ff74 	bl	800e28c <ucdr_serialize_uint16_t>
 80183a4:	89f1      	ldrh	r1, [r6, #14]
 80183a6:	4005      	ands	r5, r0
 80183a8:	4638      	mov	r0, r7
 80183aa:	f7f5 ff6f 	bl	800e28c <ucdr_serialize_uint16_t>
 80183ae:	8a31      	ldrh	r1, [r6, #16]
 80183b0:	4680      	mov	r8, r0
 80183b2:	4638      	mov	r0, r7
 80183b4:	f7f5 ff6a 	bl	800e28c <ucdr_serialize_uint16_t>
 80183b8:	b2ed      	uxtb	r5, r5
 80183ba:	4025      	ands	r5, r4
 80183bc:	ea08 0505 	and.w	r5, r8, r5
 80183c0:	ea00 0405 	and.w	r4, r0, r5
 80183c4:	4620      	mov	r0, r4
 80183c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183ca:	bf00      	nop

080183cc <uxr_serialize_CREATE_CLIENT_Payload>:
 80183cc:	f7ff ba9a 	b.w	8017904 <uxr_serialize_CLIENT_Representation>

080183d0 <uxr_serialize_CREATE_Payload>:
 80183d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183d2:	2202      	movs	r2, #2
 80183d4:	4607      	mov	r7, r0
 80183d6:	460e      	mov	r6, r1
 80183d8:	f7fc fbb4 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 80183dc:	2202      	movs	r2, #2
 80183de:	18b1      	adds	r1, r6, r2
 80183e0:	4605      	mov	r5, r0
 80183e2:	4638      	mov	r0, r7
 80183e4:	f7fc fbae 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 80183e8:	7931      	ldrb	r1, [r6, #4]
 80183ea:	4604      	mov	r4, r0
 80183ec:	4638      	mov	r0, r7
 80183ee:	f7f5 ff21 	bl	800e234 <ucdr_serialize_uint8_t>
 80183f2:	b170      	cbz	r0, 8018412 <uxr_serialize_CREATE_Payload+0x42>
 80183f4:	7933      	ldrb	r3, [r6, #4]
 80183f6:	402c      	ands	r4, r5
 80183f8:	3b01      	subs	r3, #1
 80183fa:	b2e4      	uxtb	r4, r4
 80183fc:	2b0d      	cmp	r3, #13
 80183fe:	d809      	bhi.n	8018414 <uxr_serialize_CREATE_Payload+0x44>
 8018400:	e8df f003 	tbb	[pc, r3]
 8018404:	23230a4c 	.word	0x23230a4c
 8018408:	0a0a0a0a 	.word	0x0a0a0a0a
 801840c:	12121208 	.word	0x12121208
 8018410:	3e45      	.short	0x3e45
 8018412:	2400      	movs	r4, #0
 8018414:	4620      	mov	r0, r4
 8018416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018418:	f106 0108 	add.w	r1, r6, #8
 801841c:	4638      	mov	r0, r7
 801841e:	f7ff fb77 	bl	8017b10 <uxr_serialize_DATAWRITER_Representation>
 8018422:	4004      	ands	r4, r0
 8018424:	4620      	mov	r0, r4
 8018426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018428:	7a31      	ldrb	r1, [r6, #8]
 801842a:	4638      	mov	r0, r7
 801842c:	f7f5 ff02 	bl	800e234 <ucdr_serialize_uint8_t>
 8018430:	2800      	cmp	r0, #0
 8018432:	d0ee      	beq.n	8018412 <uxr_serialize_CREATE_Payload+0x42>
 8018434:	7a33      	ldrb	r3, [r6, #8]
 8018436:	2b01      	cmp	r3, #1
 8018438:	d001      	beq.n	801843e <uxr_serialize_CREATE_Payload+0x6e>
 801843a:	2b02      	cmp	r3, #2
 801843c:	d1ea      	bne.n	8018414 <uxr_serialize_CREATE_Payload+0x44>
 801843e:	68f1      	ldr	r1, [r6, #12]
 8018440:	4638      	mov	r0, r7
 8018442:	f003 fecf 	bl	801c1e4 <ucdr_serialize_string>
 8018446:	4004      	ands	r4, r0
 8018448:	e7e4      	b.n	8018414 <uxr_serialize_CREATE_Payload+0x44>
 801844a:	7a31      	ldrb	r1, [r6, #8]
 801844c:	4638      	mov	r0, r7
 801844e:	f7f5 fef1 	bl	800e234 <ucdr_serialize_uint8_t>
 8018452:	4605      	mov	r5, r0
 8018454:	b158      	cbz	r0, 801846e <uxr_serialize_CREATE_Payload+0x9e>
 8018456:	7a33      	ldrb	r3, [r6, #8]
 8018458:	2b02      	cmp	r3, #2
 801845a:	d034      	beq.n	80184c6 <uxr_serialize_CREATE_Payload+0xf6>
 801845c:	2b03      	cmp	r3, #3
 801845e:	d106      	bne.n	801846e <uxr_serialize_CREATE_Payload+0x9e>
 8018460:	68f2      	ldr	r2, [r6, #12]
 8018462:	f106 0110 	add.w	r1, r6, #16
 8018466:	4638      	mov	r0, r7
 8018468:	f7fc fd0a 	bl	8014e80 <ucdr_serialize_sequence_uint8_t>
 801846c:	4605      	mov	r5, r0
 801846e:	2202      	movs	r2, #2
 8018470:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8018474:	4638      	mov	r0, r7
 8018476:	f7fc fb65 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 801847a:	4028      	ands	r0, r5
 801847c:	4004      	ands	r4, r0
 801847e:	e7c9      	b.n	8018414 <uxr_serialize_CREATE_Payload+0x44>
 8018480:	f106 0108 	add.w	r1, r6, #8
 8018484:	4638      	mov	r0, r7
 8018486:	f7ff fa3d 	bl	8017904 <uxr_serialize_CLIENT_Representation>
 801848a:	4004      	ands	r4, r0
 801848c:	e7c2      	b.n	8018414 <uxr_serialize_CREATE_Payload+0x44>
 801848e:	f106 0108 	add.w	r1, r6, #8
 8018492:	4638      	mov	r0, r7
 8018494:	f7ff faf2 	bl	8017a7c <uxr_serialize_AGENT_Representation>
 8018498:	4004      	ands	r4, r0
 801849a:	e7bb      	b.n	8018414 <uxr_serialize_CREATE_Payload+0x44>
 801849c:	7a31      	ldrb	r1, [r6, #8]
 801849e:	4638      	mov	r0, r7
 80184a0:	f7f5 fec8 	bl	800e234 <ucdr_serialize_uint8_t>
 80184a4:	4605      	mov	r5, r0
 80184a6:	b130      	cbz	r0, 80184b6 <uxr_serialize_CREATE_Payload+0xe6>
 80184a8:	7a33      	ldrb	r3, [r6, #8]
 80184aa:	2b02      	cmp	r3, #2
 80184ac:	d011      	beq.n	80184d2 <uxr_serialize_CREATE_Payload+0x102>
 80184ae:	2b03      	cmp	r3, #3
 80184b0:	d015      	beq.n	80184de <uxr_serialize_CREATE_Payload+0x10e>
 80184b2:	2b01      	cmp	r3, #1
 80184b4:	d00d      	beq.n	80184d2 <uxr_serialize_CREATE_Payload+0x102>
 80184b6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80184ba:	4638      	mov	r0, r7
 80184bc:	f7f6 fbf6 	bl	800ecac <ucdr_serialize_int16_t>
 80184c0:	4028      	ands	r0, r5
 80184c2:	4004      	ands	r4, r0
 80184c4:	e7a6      	b.n	8018414 <uxr_serialize_CREATE_Payload+0x44>
 80184c6:	68f1      	ldr	r1, [r6, #12]
 80184c8:	4638      	mov	r0, r7
 80184ca:	f003 fe8b 	bl	801c1e4 <ucdr_serialize_string>
 80184ce:	4605      	mov	r5, r0
 80184d0:	e7cd      	b.n	801846e <uxr_serialize_CREATE_Payload+0x9e>
 80184d2:	68f1      	ldr	r1, [r6, #12]
 80184d4:	4638      	mov	r0, r7
 80184d6:	f003 fe85 	bl	801c1e4 <ucdr_serialize_string>
 80184da:	4605      	mov	r5, r0
 80184dc:	e7eb      	b.n	80184b6 <uxr_serialize_CREATE_Payload+0xe6>
 80184de:	68f2      	ldr	r2, [r6, #12]
 80184e0:	f106 0110 	add.w	r1, r6, #16
 80184e4:	4638      	mov	r0, r7
 80184e6:	f7fc fccb 	bl	8014e80 <ucdr_serialize_sequence_uint8_t>
 80184ea:	4605      	mov	r5, r0
 80184ec:	e7e3      	b.n	80184b6 <uxr_serialize_CREATE_Payload+0xe6>
 80184ee:	bf00      	nop

080184f0 <uxr_deserialize_GET_INFO_Payload>:
 80184f0:	b570      	push	{r4, r5, r6, lr}
 80184f2:	2202      	movs	r2, #2
 80184f4:	4605      	mov	r5, r0
 80184f6:	460e      	mov	r6, r1
 80184f8:	f7fc fb88 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 80184fc:	2202      	movs	r2, #2
 80184fe:	18b1      	adds	r1, r6, r2
 8018500:	4604      	mov	r4, r0
 8018502:	4628      	mov	r0, r5
 8018504:	f7fc fb82 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 8018508:	1d31      	adds	r1, r6, #4
 801850a:	4004      	ands	r4, r0
 801850c:	4628      	mov	r0, r5
 801850e:	f7f6 f9d7 	bl	800e8c0 <ucdr_deserialize_uint32_t>
 8018512:	b2e4      	uxtb	r4, r4
 8018514:	4020      	ands	r0, r4
 8018516:	bd70      	pop	{r4, r5, r6, pc}

08018518 <uxr_serialize_DELETE_Payload>:
 8018518:	b570      	push	{r4, r5, r6, lr}
 801851a:	2202      	movs	r2, #2
 801851c:	4605      	mov	r5, r0
 801851e:	460e      	mov	r6, r1
 8018520:	f7fc fb10 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 8018524:	2202      	movs	r2, #2
 8018526:	4604      	mov	r4, r0
 8018528:	18b1      	adds	r1, r6, r2
 801852a:	4628      	mov	r0, r5
 801852c:	f7fc fb0a 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 8018530:	4020      	ands	r0, r4
 8018532:	b2c0      	uxtb	r0, r0
 8018534:	bd70      	pop	{r4, r5, r6, pc}
 8018536:	bf00      	nop

08018538 <uxr_deserialize_STATUS_AGENT_Payload>:
 8018538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801853c:	4605      	mov	r5, r0
 801853e:	460e      	mov	r6, r1
 8018540:	f7f5 fe8e 	bl	800e260 <ucdr_deserialize_uint8_t>
 8018544:	1c71      	adds	r1, r6, #1
 8018546:	4604      	mov	r4, r0
 8018548:	4628      	mov	r0, r5
 801854a:	f7f5 fe89 	bl	800e260 <ucdr_deserialize_uint8_t>
 801854e:	2204      	movs	r2, #4
 8018550:	18b1      	adds	r1, r6, r2
 8018552:	4680      	mov	r8, r0
 8018554:	4628      	mov	r0, r5
 8018556:	f7fc fb59 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 801855a:	f106 0108 	add.w	r1, r6, #8
 801855e:	4607      	mov	r7, r0
 8018560:	2202      	movs	r2, #2
 8018562:	4628      	mov	r0, r5
 8018564:	f7fc fb52 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 8018568:	ea04 0308 	and.w	r3, r4, r8
 801856c:	b2db      	uxtb	r3, r3
 801856e:	ea03 0407 	and.w	r4, r3, r7
 8018572:	2202      	movs	r2, #2
 8018574:	4607      	mov	r7, r0
 8018576:	f106 010a 	add.w	r1, r6, #10
 801857a:	4628      	mov	r0, r5
 801857c:	f7fc fb46 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 8018580:	f106 010c 	add.w	r1, r6, #12
 8018584:	4603      	mov	r3, r0
 8018586:	4628      	mov	r0, r5
 8018588:	461d      	mov	r5, r3
 801858a:	f7f5 fe3b 	bl	800e204 <ucdr_deserialize_bool>
 801858e:	403c      	ands	r4, r7
 8018590:	4025      	ands	r5, r4
 8018592:	4028      	ands	r0, r5
 8018594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018598 <uxr_deserialize_STATUS_Payload>:
 8018598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801859c:	2202      	movs	r2, #2
 801859e:	4606      	mov	r6, r0
 80185a0:	460f      	mov	r7, r1
 80185a2:	f7fc fb33 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 80185a6:	2202      	movs	r2, #2
 80185a8:	18b9      	adds	r1, r7, r2
 80185aa:	4605      	mov	r5, r0
 80185ac:	4630      	mov	r0, r6
 80185ae:	f7fc fb2d 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 80185b2:	1d39      	adds	r1, r7, #4
 80185b4:	4680      	mov	r8, r0
 80185b6:	4630      	mov	r0, r6
 80185b8:	f7f5 fe52 	bl	800e260 <ucdr_deserialize_uint8_t>
 80185bc:	1d79      	adds	r1, r7, #5
 80185be:	4604      	mov	r4, r0
 80185c0:	4630      	mov	r0, r6
 80185c2:	f7f5 fe4d 	bl	800e260 <ucdr_deserialize_uint8_t>
 80185c6:	ea05 0508 	and.w	r5, r5, r8
 80185ca:	402c      	ands	r4, r5
 80185cc:	4020      	ands	r0, r4
 80185ce:	b2c0      	uxtb	r0, r0
 80185d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080185d4 <uxr_serialize_INFO_Payload>:
 80185d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185d8:	2202      	movs	r2, #2
 80185da:	460c      	mov	r4, r1
 80185dc:	4605      	mov	r5, r0
 80185de:	f7fc fab1 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 80185e2:	2202      	movs	r2, #2
 80185e4:	18a1      	adds	r1, r4, r2
 80185e6:	4680      	mov	r8, r0
 80185e8:	4628      	mov	r0, r5
 80185ea:	f7fc faab 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 80185ee:	7921      	ldrb	r1, [r4, #4]
 80185f0:	4607      	mov	r7, r0
 80185f2:	4628      	mov	r0, r5
 80185f4:	f7f5 fe1e 	bl	800e234 <ucdr_serialize_uint8_t>
 80185f8:	7961      	ldrb	r1, [r4, #5]
 80185fa:	4606      	mov	r6, r0
 80185fc:	4628      	mov	r0, r5
 80185fe:	f7f5 fe19 	bl	800e234 <ucdr_serialize_uint8_t>
 8018602:	ea08 0807 	and.w	r8, r8, r7
 8018606:	ea06 0608 	and.w	r6, r6, r8
 801860a:	4006      	ands	r6, r0
 801860c:	7a21      	ldrb	r1, [r4, #8]
 801860e:	4628      	mov	r0, r5
 8018610:	f7f5 fde2 	bl	800e1d8 <ucdr_serialize_bool>
 8018614:	7a23      	ldrb	r3, [r4, #8]
 8018616:	b2f7      	uxtb	r7, r6
 8018618:	4606      	mov	r6, r0
 801861a:	b96b      	cbnz	r3, 8018638 <uxr_serialize_INFO_Payload+0x64>
 801861c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8018620:	4628      	mov	r0, r5
 8018622:	f7f5 fdd9 	bl	800e1d8 <ucdr_serialize_bool>
 8018626:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801862a:	4030      	ands	r0, r6
 801862c:	b2c6      	uxtb	r6, r0
 801862e:	b983      	cbnz	r3, 8018652 <uxr_serialize_INFO_Payload+0x7e>
 8018630:	ea06 0007 	and.w	r0, r6, r7
 8018634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018638:	7b21      	ldrb	r1, [r4, #12]
 801863a:	4628      	mov	r0, r5
 801863c:	f7f5 fdfa 	bl	800e234 <ucdr_serialize_uint8_t>
 8018640:	b188      	cbz	r0, 8018666 <uxr_serialize_INFO_Payload+0x92>
 8018642:	f104 010c 	add.w	r1, r4, #12
 8018646:	4628      	mov	r0, r5
 8018648:	f7ff fa8a 	bl	8017b60 <uxr_serialize_ObjectVariant.part.0>
 801864c:	4030      	ands	r0, r6
 801864e:	b2c6      	uxtb	r6, r0
 8018650:	e7e4      	b.n	801861c <uxr_serialize_INFO_Payload+0x48>
 8018652:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8018656:	4628      	mov	r0, r5
 8018658:	f7ff fdb2 	bl	80181c0 <uxr_serialize_ActivityInfoVariant>
 801865c:	4006      	ands	r6, r0
 801865e:	ea06 0007 	and.w	r0, r6, r7
 8018662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018666:	4606      	mov	r6, r0
 8018668:	e7d8      	b.n	801861c <uxr_serialize_INFO_Payload+0x48>
 801866a:	bf00      	nop

0801866c <uxr_serialize_READ_DATA_Payload>:
 801866c:	b570      	push	{r4, r5, r6, lr}
 801866e:	2202      	movs	r2, #2
 8018670:	4605      	mov	r5, r0
 8018672:	460e      	mov	r6, r1
 8018674:	f7fc fa66 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 8018678:	2202      	movs	r2, #2
 801867a:	18b1      	adds	r1, r6, r2
 801867c:	4604      	mov	r4, r0
 801867e:	4628      	mov	r0, r5
 8018680:	f7fc fa60 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 8018684:	1d31      	adds	r1, r6, #4
 8018686:	4004      	ands	r4, r0
 8018688:	4628      	mov	r0, r5
 801868a:	f7ff fe5d 	bl	8018348 <uxr_serialize_ReadSpecification>
 801868e:	b2e4      	uxtb	r4, r4
 8018690:	4020      	ands	r0, r4
 8018692:	bd70      	pop	{r4, r5, r6, pc}

08018694 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8018694:	b570      	push	{r4, r5, r6, lr}
 8018696:	2202      	movs	r2, #2
 8018698:	4605      	mov	r5, r0
 801869a:	460e      	mov	r6, r1
 801869c:	f7fc fa52 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 80186a0:	2202      	movs	r2, #2
 80186a2:	4604      	mov	r4, r0
 80186a4:	18b1      	adds	r1, r6, r2
 80186a6:	4628      	mov	r0, r5
 80186a8:	f7fc fa4c 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 80186ac:	4020      	ands	r0, r4
 80186ae:	b2c0      	uxtb	r0, r0
 80186b0:	bd70      	pop	{r4, r5, r6, pc}
 80186b2:	bf00      	nop

080186b4 <uxr_serialize_ACKNACK_Payload>:
 80186b4:	b570      	push	{r4, r5, r6, lr}
 80186b6:	460c      	mov	r4, r1
 80186b8:	460e      	mov	r6, r1
 80186ba:	f834 1b02 	ldrh.w	r1, [r4], #2
 80186be:	4605      	mov	r5, r0
 80186c0:	f7f5 fde4 	bl	800e28c <ucdr_serialize_uint16_t>
 80186c4:	2202      	movs	r2, #2
 80186c6:	4621      	mov	r1, r4
 80186c8:	4604      	mov	r4, r0
 80186ca:	4628      	mov	r0, r5
 80186cc:	f7fc fa3a 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 80186d0:	7931      	ldrb	r1, [r6, #4]
 80186d2:	4004      	ands	r4, r0
 80186d4:	4628      	mov	r0, r5
 80186d6:	f7f5 fdad 	bl	800e234 <ucdr_serialize_uint8_t>
 80186da:	b2e4      	uxtb	r4, r4
 80186dc:	4020      	ands	r0, r4
 80186de:	bd70      	pop	{r4, r5, r6, pc}

080186e0 <uxr_deserialize_ACKNACK_Payload>:
 80186e0:	b570      	push	{r4, r5, r6, lr}
 80186e2:	4605      	mov	r5, r0
 80186e4:	460e      	mov	r6, r1
 80186e6:	f7f5 fed1 	bl	800e48c <ucdr_deserialize_uint16_t>
 80186ea:	2202      	movs	r2, #2
 80186ec:	18b1      	adds	r1, r6, r2
 80186ee:	4604      	mov	r4, r0
 80186f0:	4628      	mov	r0, r5
 80186f2:	f7fc fa8b 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 80186f6:	1d31      	adds	r1, r6, #4
 80186f8:	4004      	ands	r4, r0
 80186fa:	4628      	mov	r0, r5
 80186fc:	f7f5 fdb0 	bl	800e260 <ucdr_deserialize_uint8_t>
 8018700:	b2e4      	uxtb	r4, r4
 8018702:	4020      	ands	r0, r4
 8018704:	bd70      	pop	{r4, r5, r6, pc}
 8018706:	bf00      	nop

08018708 <uxr_serialize_HEARTBEAT_Payload>:
 8018708:	b570      	push	{r4, r5, r6, lr}
 801870a:	460d      	mov	r5, r1
 801870c:	8809      	ldrh	r1, [r1, #0]
 801870e:	4606      	mov	r6, r0
 8018710:	f7f5 fdbc 	bl	800e28c <ucdr_serialize_uint16_t>
 8018714:	8869      	ldrh	r1, [r5, #2]
 8018716:	4604      	mov	r4, r0
 8018718:	4630      	mov	r0, r6
 801871a:	f7f5 fdb7 	bl	800e28c <ucdr_serialize_uint16_t>
 801871e:	7929      	ldrb	r1, [r5, #4]
 8018720:	4004      	ands	r4, r0
 8018722:	4630      	mov	r0, r6
 8018724:	f7f5 fd86 	bl	800e234 <ucdr_serialize_uint8_t>
 8018728:	b2e4      	uxtb	r4, r4
 801872a:	4020      	ands	r0, r4
 801872c:	bd70      	pop	{r4, r5, r6, pc}
 801872e:	bf00      	nop

08018730 <uxr_deserialize_HEARTBEAT_Payload>:
 8018730:	b570      	push	{r4, r5, r6, lr}
 8018732:	4605      	mov	r5, r0
 8018734:	460e      	mov	r6, r1
 8018736:	f7f5 fea9 	bl	800e48c <ucdr_deserialize_uint16_t>
 801873a:	1cb1      	adds	r1, r6, #2
 801873c:	4604      	mov	r4, r0
 801873e:	4628      	mov	r0, r5
 8018740:	f7f5 fea4 	bl	800e48c <ucdr_deserialize_uint16_t>
 8018744:	1d31      	adds	r1, r6, #4
 8018746:	4004      	ands	r4, r0
 8018748:	4628      	mov	r0, r5
 801874a:	f7f5 fd89 	bl	800e260 <ucdr_deserialize_uint8_t>
 801874e:	b2e4      	uxtb	r4, r4
 8018750:	4020      	ands	r0, r4
 8018752:	bd70      	pop	{r4, r5, r6, pc}

08018754 <uxr_serialize_TIMESTAMP_Payload>:
 8018754:	b570      	push	{r4, r5, r6, lr}
 8018756:	460d      	mov	r5, r1
 8018758:	6809      	ldr	r1, [r1, #0]
 801875a:	4606      	mov	r6, r0
 801875c:	f7f6 fb9a 	bl	800ee94 <ucdr_serialize_int32_t>
 8018760:	6869      	ldr	r1, [r5, #4]
 8018762:	4604      	mov	r4, r0
 8018764:	4630      	mov	r0, r6
 8018766:	f7f5 ff7b 	bl	800e660 <ucdr_serialize_uint32_t>
 801876a:	4020      	ands	r0, r4
 801876c:	b2c0      	uxtb	r0, r0
 801876e:	bd70      	pop	{r4, r5, r6, pc}

08018770 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8018770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018774:	4605      	mov	r5, r0
 8018776:	460e      	mov	r6, r1
 8018778:	f7f6 fc24 	bl	800efc4 <ucdr_deserialize_int32_t>
 801877c:	1d31      	adds	r1, r6, #4
 801877e:	4607      	mov	r7, r0
 8018780:	4628      	mov	r0, r5
 8018782:	f7f6 f89d 	bl	800e8c0 <ucdr_deserialize_uint32_t>
 8018786:	f106 0108 	add.w	r1, r6, #8
 801878a:	4680      	mov	r8, r0
 801878c:	4628      	mov	r0, r5
 801878e:	f7f6 fc19 	bl	800efc4 <ucdr_deserialize_int32_t>
 8018792:	f106 010c 	add.w	r1, r6, #12
 8018796:	4604      	mov	r4, r0
 8018798:	4628      	mov	r0, r5
 801879a:	f7f6 f891 	bl	800e8c0 <ucdr_deserialize_uint32_t>
 801879e:	ea07 0708 	and.w	r7, r7, r8
 80187a2:	403c      	ands	r4, r7
 80187a4:	f106 0110 	add.w	r1, r6, #16
 80187a8:	4004      	ands	r4, r0
 80187aa:	4628      	mov	r0, r5
 80187ac:	f7f6 fc0a 	bl	800efc4 <ucdr_deserialize_int32_t>
 80187b0:	f106 0114 	add.w	r1, r6, #20
 80187b4:	4607      	mov	r7, r0
 80187b6:	4628      	mov	r0, r5
 80187b8:	f7f6 f882 	bl	800e8c0 <ucdr_deserialize_uint32_t>
 80187bc:	b2e4      	uxtb	r4, r4
 80187be:	403c      	ands	r4, r7
 80187c0:	4020      	ands	r0, r4
 80187c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187c6:	bf00      	nop

080187c8 <uxr_serialize_SampleIdentity>:
 80187c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187cc:	220c      	movs	r2, #12
 80187ce:	4604      	mov	r4, r0
 80187d0:	460d      	mov	r5, r1
 80187d2:	f7fc f9b7 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 80187d6:	2203      	movs	r2, #3
 80187d8:	f105 010c 	add.w	r1, r5, #12
 80187dc:	4607      	mov	r7, r0
 80187de:	4620      	mov	r0, r4
 80187e0:	f7fc f9b0 	bl	8014b44 <ucdr_serialize_array_uint8_t>
 80187e4:	7be9      	ldrb	r1, [r5, #15]
 80187e6:	4680      	mov	r8, r0
 80187e8:	4620      	mov	r0, r4
 80187ea:	f7f5 fd23 	bl	800e234 <ucdr_serialize_uint8_t>
 80187ee:	6929      	ldr	r1, [r5, #16]
 80187f0:	4606      	mov	r6, r0
 80187f2:	4620      	mov	r0, r4
 80187f4:	f7f6 fb4e 	bl	800ee94 <ucdr_serialize_int32_t>
 80187f8:	6969      	ldr	r1, [r5, #20]
 80187fa:	4603      	mov	r3, r0
 80187fc:	4620      	mov	r0, r4
 80187fe:	ea07 0708 	and.w	r7, r7, r8
 8018802:	461c      	mov	r4, r3
 8018804:	f7f5 ff2c 	bl	800e660 <ucdr_serialize_uint32_t>
 8018808:	403e      	ands	r6, r7
 801880a:	4034      	ands	r4, r6
 801880c:	4020      	ands	r0, r4
 801880e:	b2c0      	uxtb	r0, r0
 8018810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018814 <uxr_deserialize_SampleIdentity>:
 8018814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018818:	220c      	movs	r2, #12
 801881a:	4604      	mov	r4, r0
 801881c:	460d      	mov	r5, r1
 801881e:	f7fc f9f5 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 8018822:	2203      	movs	r2, #3
 8018824:	f105 010c 	add.w	r1, r5, #12
 8018828:	4607      	mov	r7, r0
 801882a:	4620      	mov	r0, r4
 801882c:	f7fc f9ee 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 8018830:	f105 010f 	add.w	r1, r5, #15
 8018834:	4680      	mov	r8, r0
 8018836:	4620      	mov	r0, r4
 8018838:	f7f5 fd12 	bl	800e260 <ucdr_deserialize_uint8_t>
 801883c:	f105 0110 	add.w	r1, r5, #16
 8018840:	4606      	mov	r6, r0
 8018842:	4620      	mov	r0, r4
 8018844:	f7f6 fbbe 	bl	800efc4 <ucdr_deserialize_int32_t>
 8018848:	f105 0114 	add.w	r1, r5, #20
 801884c:	4603      	mov	r3, r0
 801884e:	4620      	mov	r0, r4
 8018850:	ea07 0708 	and.w	r7, r7, r8
 8018854:	461c      	mov	r4, r3
 8018856:	f7f6 f833 	bl	800e8c0 <ucdr_deserialize_uint32_t>
 801885a:	403e      	ands	r6, r7
 801885c:	4034      	ands	r4, r6
 801885e:	4020      	ands	r0, r4
 8018860:	b2c0      	uxtb	r0, r0
 8018862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018866:	bf00      	nop

08018868 <rcl_convert_rmw_ret_to_rcl_ret>:
 8018868:	280b      	cmp	r0, #11
 801886a:	dc0d      	bgt.n	8018888 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801886c:	2800      	cmp	r0, #0
 801886e:	db09      	blt.n	8018884 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8018870:	280b      	cmp	r0, #11
 8018872:	d807      	bhi.n	8018884 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8018874:	e8df f000 	tbb	[pc, r0]
 8018878:	07060607 	.word	0x07060607
 801887c:	06060606 	.word	0x06060606
 8018880:	07070606 	.word	0x07070606
 8018884:	2001      	movs	r0, #1
 8018886:	4770      	bx	lr
 8018888:	28cb      	cmp	r0, #203	@ 0xcb
 801888a:	bf18      	it	ne
 801888c:	2001      	movne	r0, #1
 801888e:	4770      	bx	lr

08018890 <rcl_get_zero_initialized_context>:
 8018890:	4a03      	ldr	r2, [pc, #12]	@ (80188a0 <rcl_get_zero_initialized_context+0x10>)
 8018892:	4603      	mov	r3, r0
 8018894:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018898:	e883 0003 	stmia.w	r3, {r0, r1}
 801889c:	4618      	mov	r0, r3
 801889e:	4770      	bx	lr
 80188a0:	0802086c 	.word	0x0802086c

080188a4 <rcl_context_is_valid>:
 80188a4:	b118      	cbz	r0, 80188ae <rcl_context_is_valid+0xa>
 80188a6:	6840      	ldr	r0, [r0, #4]
 80188a8:	3800      	subs	r0, #0
 80188aa:	bf18      	it	ne
 80188ac:	2001      	movne	r0, #1
 80188ae:	4770      	bx	lr

080188b0 <__cleanup_context>:
 80188b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188b4:	4606      	mov	r6, r0
 80188b6:	6800      	ldr	r0, [r0, #0]
 80188b8:	2300      	movs	r3, #0
 80188ba:	6073      	str	r3, [r6, #4]
 80188bc:	2800      	cmp	r0, #0
 80188be:	d049      	beq.n	8018954 <__cleanup_context+0xa4>
 80188c0:	6947      	ldr	r7, [r0, #20]
 80188c2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80188c6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80188ca:	b137      	cbz	r7, 80188da <__cleanup_context+0x2a>
 80188cc:	3014      	adds	r0, #20
 80188ce:	f7f7 f9b1 	bl	800fc34 <rcl_init_options_fini>
 80188d2:	4607      	mov	r7, r0
 80188d4:	2800      	cmp	r0, #0
 80188d6:	d144      	bne.n	8018962 <__cleanup_context+0xb2>
 80188d8:	6830      	ldr	r0, [r6, #0]
 80188da:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80188dc:	b143      	cbz	r3, 80188f0 <__cleanup_context+0x40>
 80188de:	3028      	adds	r0, #40	@ 0x28
 80188e0:	f7f9 fe52 	bl	8012588 <rmw_context_fini>
 80188e4:	b118      	cbz	r0, 80188ee <__cleanup_context+0x3e>
 80188e6:	2f00      	cmp	r7, #0
 80188e8:	d03e      	beq.n	8018968 <__cleanup_context+0xb8>
 80188ea:	f7f8 fe85 	bl	80115f8 <rcutils_reset_error>
 80188ee:	6830      	ldr	r0, [r6, #0]
 80188f0:	6a03      	ldr	r3, [r0, #32]
 80188f2:	b1db      	cbz	r3, 801892c <__cleanup_context+0x7c>
 80188f4:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80188f8:	2a01      	cmp	r2, #1
 80188fa:	f17c 0100 	sbcs.w	r1, ip, #0
 80188fe:	db11      	blt.n	8018924 <__cleanup_context+0x74>
 8018900:	2400      	movs	r4, #0
 8018902:	4625      	mov	r5, r4
 8018904:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018908:	4649      	mov	r1, r9
 801890a:	b1b8      	cbz	r0, 801893c <__cleanup_context+0x8c>
 801890c:	47c0      	blx	r8
 801890e:	6833      	ldr	r3, [r6, #0]
 8018910:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8018914:	3401      	adds	r4, #1
 8018916:	f145 0500 	adc.w	r5, r5, #0
 801891a:	4294      	cmp	r4, r2
 801891c:	eb75 010c 	sbcs.w	r1, r5, ip
 8018920:	6a1b      	ldr	r3, [r3, #32]
 8018922:	dbef      	blt.n	8018904 <__cleanup_context+0x54>
 8018924:	4618      	mov	r0, r3
 8018926:	4649      	mov	r1, r9
 8018928:	47c0      	blx	r8
 801892a:	6830      	ldr	r0, [r6, #0]
 801892c:	4649      	mov	r1, r9
 801892e:	47c0      	blx	r8
 8018930:	2300      	movs	r3, #0
 8018932:	e9c6 3300 	strd	r3, r3, [r6]
 8018936:	4638      	mov	r0, r7
 8018938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801893c:	3401      	adds	r4, #1
 801893e:	f145 0500 	adc.w	r5, r5, #0
 8018942:	4294      	cmp	r4, r2
 8018944:	eb75 010c 	sbcs.w	r1, r5, ip
 8018948:	dbdc      	blt.n	8018904 <__cleanup_context+0x54>
 801894a:	4618      	mov	r0, r3
 801894c:	4649      	mov	r1, r9
 801894e:	47c0      	blx	r8
 8018950:	6830      	ldr	r0, [r6, #0]
 8018952:	e7eb      	b.n	801892c <__cleanup_context+0x7c>
 8018954:	4607      	mov	r7, r0
 8018956:	2300      	movs	r3, #0
 8018958:	e9c6 3300 	strd	r3, r3, [r6]
 801895c:	4638      	mov	r0, r7
 801895e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018962:	f7f8 fe49 	bl	80115f8 <rcutils_reset_error>
 8018966:	e7b7      	b.n	80188d8 <__cleanup_context+0x28>
 8018968:	f7ff ff7e 	bl	8018868 <rcl_convert_rmw_ret_to_rcl_ret>
 801896c:	4607      	mov	r7, r0
 801896e:	e7bc      	b.n	80188ea <__cleanup_context+0x3a>

08018970 <rcl_expand_topic_name>:
 8018970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018974:	b08b      	sub	sp, #44	@ 0x2c
 8018976:	9306      	str	r3, [sp, #24]
 8018978:	2800      	cmp	r0, #0
 801897a:	f000 80ad 	beq.w	8018ad8 <rcl_expand_topic_name+0x168>
 801897e:	460e      	mov	r6, r1
 8018980:	2900      	cmp	r1, #0
 8018982:	f000 80a9 	beq.w	8018ad8 <rcl_expand_topic_name+0x168>
 8018986:	4617      	mov	r7, r2
 8018988:	2a00      	cmp	r2, #0
 801898a:	f000 80a5 	beq.w	8018ad8 <rcl_expand_topic_name+0x168>
 801898e:	2b00      	cmp	r3, #0
 8018990:	f000 80a2 	beq.w	8018ad8 <rcl_expand_topic_name+0x168>
 8018994:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018996:	2b00      	cmp	r3, #0
 8018998:	f000 809e 	beq.w	8018ad8 <rcl_expand_topic_name+0x168>
 801899c:	2200      	movs	r2, #0
 801899e:	a909      	add	r1, sp, #36	@ 0x24
 80189a0:	4680      	mov	r8, r0
 80189a2:	f001 fa15 	bl	8019dd0 <rcl_validate_topic_name>
 80189a6:	4604      	mov	r4, r0
 80189a8:	2800      	cmp	r0, #0
 80189aa:	f040 8096 	bne.w	8018ada <rcl_expand_topic_name+0x16a>
 80189ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	f040 809a 	bne.w	8018aea <rcl_expand_topic_name+0x17a>
 80189b6:	4602      	mov	r2, r0
 80189b8:	a909      	add	r1, sp, #36	@ 0x24
 80189ba:	4630      	mov	r0, r6
 80189bc:	f7f9 fa06 	bl	8011dcc <rmw_validate_node_name>
 80189c0:	2800      	cmp	r0, #0
 80189c2:	f040 808e 	bne.w	8018ae2 <rcl_expand_topic_name+0x172>
 80189c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80189c8:	2a00      	cmp	r2, #0
 80189ca:	f040 8093 	bne.w	8018af4 <rcl_expand_topic_name+0x184>
 80189ce:	a909      	add	r1, sp, #36	@ 0x24
 80189d0:	4638      	mov	r0, r7
 80189d2:	f7f9 f9dd 	bl	8011d90 <rmw_validate_namespace>
 80189d6:	2800      	cmp	r0, #0
 80189d8:	f040 8083 	bne.w	8018ae2 <rcl_expand_topic_name+0x172>
 80189dc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80189de:	2c00      	cmp	r4, #0
 80189e0:	f040 80ed 	bne.w	8018bbe <rcl_expand_topic_name+0x24e>
 80189e4:	217b      	movs	r1, #123	@ 0x7b
 80189e6:	4640      	mov	r0, r8
 80189e8:	f004 fea2 	bl	801d730 <strchr>
 80189ec:	f898 3000 	ldrb.w	r3, [r8]
 80189f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80189f2:	4605      	mov	r5, r0
 80189f4:	f000 809e 	beq.w	8018b34 <rcl_expand_topic_name+0x1c4>
 80189f8:	2b7e      	cmp	r3, #126	@ 0x7e
 80189fa:	f040 80a2 	bne.w	8018b42 <rcl_expand_topic_name+0x1d2>
 80189fe:	4638      	mov	r0, r7
 8018a00:	f7e7 fc18 	bl	8000234 <strlen>
 8018a04:	4a82      	ldr	r2, [pc, #520]	@ (8018c10 <rcl_expand_topic_name+0x2a0>)
 8018a06:	4b83      	ldr	r3, [pc, #524]	@ (8018c14 <rcl_expand_topic_name+0x2a4>)
 8018a08:	2801      	cmp	r0, #1
 8018a0a:	bf18      	it	ne
 8018a0c:	4613      	movne	r3, r2
 8018a0e:	9302      	str	r3, [sp, #8]
 8018a10:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8018a12:	9300      	str	r3, [sp, #0]
 8018a14:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018a18:	f108 0301 	add.w	r3, r8, #1
 8018a1c:	9305      	str	r3, [sp, #20]
 8018a1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018a22:	9301      	str	r3, [sp, #4]
 8018a24:	ab14      	add	r3, sp, #80	@ 0x50
 8018a26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018a28:	f7f8 fe02 	bl	8011630 <rcutils_format_string_limit>
 8018a2c:	4682      	mov	sl, r0
 8018a2e:	2800      	cmp	r0, #0
 8018a30:	f000 80c7 	beq.w	8018bc2 <rcl_expand_topic_name+0x252>
 8018a34:	2d00      	cmp	r5, #0
 8018a36:	f000 80a2 	beq.w	8018b7e <rcl_expand_topic_name+0x20e>
 8018a3a:	217b      	movs	r1, #123	@ 0x7b
 8018a3c:	f004 fe78 	bl	801d730 <strchr>
 8018a40:	46d1      	mov	r9, sl
 8018a42:	4605      	mov	r5, r0
 8018a44:	9407      	str	r4, [sp, #28]
 8018a46:	46d3      	mov	fp, sl
 8018a48:	464c      	mov	r4, r9
 8018a4a:	2d00      	cmp	r5, #0
 8018a4c:	f000 80be 	beq.w	8018bcc <rcl_expand_topic_name+0x25c>
 8018a50:	217d      	movs	r1, #125	@ 0x7d
 8018a52:	4620      	mov	r0, r4
 8018a54:	f004 fe6c 	bl	801d730 <strchr>
 8018a58:	eba0 0905 	sub.w	r9, r0, r5
 8018a5c:	f109 0a01 	add.w	sl, r9, #1
 8018a60:	486d      	ldr	r0, [pc, #436]	@ (8018c18 <rcl_expand_topic_name+0x2a8>)
 8018a62:	4652      	mov	r2, sl
 8018a64:	4629      	mov	r1, r5
 8018a66:	f004 fe70 	bl	801d74a <strncmp>
 8018a6a:	2800      	cmp	r0, #0
 8018a6c:	d067      	beq.n	8018b3e <rcl_expand_topic_name+0x1ce>
 8018a6e:	486b      	ldr	r0, [pc, #428]	@ (8018c1c <rcl_expand_topic_name+0x2ac>)
 8018a70:	4652      	mov	r2, sl
 8018a72:	4629      	mov	r1, r5
 8018a74:	f004 fe69 	bl	801d74a <strncmp>
 8018a78:	b130      	cbz	r0, 8018a88 <rcl_expand_topic_name+0x118>
 8018a7a:	4869      	ldr	r0, [pc, #420]	@ (8018c20 <rcl_expand_topic_name+0x2b0>)
 8018a7c:	4652      	mov	r2, sl
 8018a7e:	4629      	mov	r1, r5
 8018a80:	f004 fe63 	bl	801d74a <strncmp>
 8018a84:	2800      	cmp	r0, #0
 8018a86:	d137      	bne.n	8018af8 <rcl_expand_topic_name+0x188>
 8018a88:	46b9      	mov	r9, r7
 8018a8a:	ab16      	add	r3, sp, #88	@ 0x58
 8018a8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018a90:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018a94:	ab14      	add	r3, sp, #80	@ 0x50
 8018a96:	4628      	mov	r0, r5
 8018a98:	cb0c      	ldmia	r3, {r2, r3}
 8018a9a:	4651      	mov	r1, sl
 8018a9c:	f7f8 ff04 	bl	80118a8 <rcutils_strndup>
 8018aa0:	4605      	mov	r5, r0
 8018aa2:	2800      	cmp	r0, #0
 8018aa4:	f000 809c 	beq.w	8018be0 <rcl_expand_topic_name+0x270>
 8018aa8:	464a      	mov	r2, r9
 8018aaa:	4620      	mov	r0, r4
 8018aac:	ab14      	add	r3, sp, #80	@ 0x50
 8018aae:	4629      	mov	r1, r5
 8018ab0:	f7f8 fdf8 	bl	80116a4 <rcutils_repl_str>
 8018ab4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018ab6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018ab8:	4604      	mov	r4, r0
 8018aba:	4628      	mov	r0, r5
 8018abc:	4798      	blx	r3
 8018abe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018ac0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018ac2:	4658      	mov	r0, fp
 8018ac4:	4798      	blx	r3
 8018ac6:	2c00      	cmp	r4, #0
 8018ac8:	d07b      	beq.n	8018bc2 <rcl_expand_topic_name+0x252>
 8018aca:	217b      	movs	r1, #123	@ 0x7b
 8018acc:	4620      	mov	r0, r4
 8018ace:	f004 fe2f 	bl	801d730 <strchr>
 8018ad2:	46a3      	mov	fp, r4
 8018ad4:	4605      	mov	r5, r0
 8018ad6:	e7b8      	b.n	8018a4a <rcl_expand_topic_name+0xda>
 8018ad8:	240b      	movs	r4, #11
 8018ada:	4620      	mov	r0, r4
 8018adc:	b00b      	add	sp, #44	@ 0x2c
 8018ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ae2:	f7ff fec1 	bl	8018868 <rcl_convert_rmw_ret_to_rcl_ret>
 8018ae6:	4604      	mov	r4, r0
 8018ae8:	e7f7      	b.n	8018ada <rcl_expand_topic_name+0x16a>
 8018aea:	2467      	movs	r4, #103	@ 0x67
 8018aec:	4620      	mov	r0, r4
 8018aee:	b00b      	add	sp, #44	@ 0x2c
 8018af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018af4:	24c9      	movs	r4, #201	@ 0xc9
 8018af6:	e7f0      	b.n	8018ada <rcl_expand_topic_name+0x16a>
 8018af8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8018afc:	9806      	ldr	r0, [sp, #24]
 8018afe:	1c69      	adds	r1, r5, #1
 8018b00:	f7f8 ffec 	bl	8011adc <rcutils_string_map_getn>
 8018b04:	4681      	mov	r9, r0
 8018b06:	2800      	cmp	r0, #0
 8018b08:	d1bf      	bne.n	8018a8a <rcl_expand_topic_name+0x11a>
 8018b0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018b0c:	aa16      	add	r2, sp, #88	@ 0x58
 8018b0e:	6018      	str	r0, [r3, #0]
 8018b10:	ca07      	ldmia	r2, {r0, r1, r2}
 8018b12:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018b16:	ab14      	add	r3, sp, #80	@ 0x50
 8018b18:	cb0c      	ldmia	r3, {r2, r3}
 8018b1a:	4651      	mov	r1, sl
 8018b1c:	4628      	mov	r0, r5
 8018b1e:	f7f8 fec3 	bl	80118a8 <rcutils_strndup>
 8018b22:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018b24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018b26:	4798      	blx	r3
 8018b28:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018b2a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018b2c:	4658      	mov	r0, fp
 8018b2e:	2469      	movs	r4, #105	@ 0x69
 8018b30:	4798      	blx	r3
 8018b32:	e7d2      	b.n	8018ada <rcl_expand_topic_name+0x16a>
 8018b34:	2800      	cmp	r0, #0
 8018b36:	d05b      	beq.n	8018bf0 <rcl_expand_topic_name+0x280>
 8018b38:	46c1      	mov	r9, r8
 8018b3a:	46a2      	mov	sl, r4
 8018b3c:	e782      	b.n	8018a44 <rcl_expand_topic_name+0xd4>
 8018b3e:	46b1      	mov	r9, r6
 8018b40:	e7a3      	b.n	8018a8a <rcl_expand_topic_name+0x11a>
 8018b42:	2800      	cmp	r0, #0
 8018b44:	d1f8      	bne.n	8018b38 <rcl_expand_topic_name+0x1c8>
 8018b46:	4638      	mov	r0, r7
 8018b48:	f7e7 fb74 	bl	8000234 <strlen>
 8018b4c:	4a35      	ldr	r2, [pc, #212]	@ (8018c24 <rcl_expand_topic_name+0x2b4>)
 8018b4e:	4b36      	ldr	r3, [pc, #216]	@ (8018c28 <rcl_expand_topic_name+0x2b8>)
 8018b50:	f8cd 8010 	str.w	r8, [sp, #16]
 8018b54:	2801      	cmp	r0, #1
 8018b56:	bf18      	it	ne
 8018b58:	4613      	movne	r3, r2
 8018b5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018b5e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018b62:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018b64:	9703      	str	r7, [sp, #12]
 8018b66:	9200      	str	r2, [sp, #0]
 8018b68:	ab14      	add	r3, sp, #80	@ 0x50
 8018b6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018b6c:	f7f8 fd60 	bl	8011630 <rcutils_format_string_limit>
 8018b70:	4682      	mov	sl, r0
 8018b72:	4653      	mov	r3, sl
 8018b74:	b32b      	cbz	r3, 8018bc2 <rcl_expand_topic_name+0x252>
 8018b76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018b78:	f8c3 a000 	str.w	sl, [r3]
 8018b7c:	e7ad      	b.n	8018ada <rcl_expand_topic_name+0x16a>
 8018b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8018b82:	2b2f      	cmp	r3, #47	@ 0x2f
 8018b84:	d0f7      	beq.n	8018b76 <rcl_expand_topic_name+0x206>
 8018b86:	4638      	mov	r0, r7
 8018b88:	f7e7 fb54 	bl	8000234 <strlen>
 8018b8c:	4a25      	ldr	r2, [pc, #148]	@ (8018c24 <rcl_expand_topic_name+0x2b4>)
 8018b8e:	4b26      	ldr	r3, [pc, #152]	@ (8018c28 <rcl_expand_topic_name+0x2b8>)
 8018b90:	f8cd a010 	str.w	sl, [sp, #16]
 8018b94:	2801      	cmp	r0, #1
 8018b96:	bf18      	it	ne
 8018b98:	4613      	movne	r3, r2
 8018b9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018b9e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018ba2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018ba4:	9703      	str	r7, [sp, #12]
 8018ba6:	9200      	str	r2, [sp, #0]
 8018ba8:	ab14      	add	r3, sp, #80	@ 0x50
 8018baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018bac:	f7f8 fd40 	bl	8011630 <rcutils_format_string_limit>
 8018bb0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018bb2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018bb4:	4605      	mov	r5, r0
 8018bb6:	4650      	mov	r0, sl
 8018bb8:	4798      	blx	r3
 8018bba:	46aa      	mov	sl, r5
 8018bbc:	e7d9      	b.n	8018b72 <rcl_expand_topic_name+0x202>
 8018bbe:	24ca      	movs	r4, #202	@ 0xca
 8018bc0:	e78b      	b.n	8018ada <rcl_expand_topic_name+0x16a>
 8018bc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018bc4:	2300      	movs	r3, #0
 8018bc6:	6013      	str	r3, [r2, #0]
 8018bc8:	240a      	movs	r4, #10
 8018bca:	e786      	b.n	8018ada <rcl_expand_topic_name+0x16a>
 8018bcc:	465b      	mov	r3, fp
 8018bce:	9c07      	ldr	r4, [sp, #28]
 8018bd0:	46da      	mov	sl, fp
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d1d3      	bne.n	8018b7e <rcl_expand_topic_name+0x20e>
 8018bd6:	f898 3000 	ldrb.w	r3, [r8]
 8018bda:	2b2f      	cmp	r3, #47	@ 0x2f
 8018bdc:	d0cb      	beq.n	8018b76 <rcl_expand_topic_name+0x206>
 8018bde:	e7b2      	b.n	8018b46 <rcl_expand_topic_name+0x1d6>
 8018be0:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8018be4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018be6:	6015      	str	r5, [r2, #0]
 8018be8:	4658      	mov	r0, fp
 8018bea:	4798      	blx	r3
 8018bec:	240a      	movs	r4, #10
 8018bee:	e774      	b.n	8018ada <rcl_expand_topic_name+0x16a>
 8018bf0:	ab17      	add	r3, sp, #92	@ 0x5c
 8018bf2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018bf6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018bfa:	ab14      	add	r3, sp, #80	@ 0x50
 8018bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018bfe:	4640      	mov	r0, r8
 8018c00:	f7f8 fe30 	bl	8011864 <rcutils_strdup>
 8018c04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018c06:	2800      	cmp	r0, #0
 8018c08:	6018      	str	r0, [r3, #0]
 8018c0a:	bf08      	it	eq
 8018c0c:	240a      	moveq	r4, #10
 8018c0e:	e764      	b.n	8018ada <rcl_expand_topic_name+0x16a>
 8018c10:	08020874 	.word	0x08020874
 8018c14:	0801f988 	.word	0x0801f988
 8018c18:	0802087c 	.word	0x0802087c
 8018c1c:	08020884 	.word	0x08020884
 8018c20:	0802088c 	.word	0x0802088c
 8018c24:	0801f3ec 	.word	0x0801f3ec
 8018c28:	0801f3e4 	.word	0x0801f3e4

08018c2c <rcl_get_default_topic_name_substitutions>:
 8018c2c:	2800      	cmp	r0, #0
 8018c2e:	bf0c      	ite	eq
 8018c30:	200b      	moveq	r0, #11
 8018c32:	2000      	movne	r0, #0
 8018c34:	4770      	bx	lr
 8018c36:	bf00      	nop

08018c38 <rcl_get_zero_initialized_guard_condition>:
 8018c38:	4a03      	ldr	r2, [pc, #12]	@ (8018c48 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018c3a:	4603      	mov	r3, r0
 8018c3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c40:	e883 0003 	stmia.w	r3, {r0, r1}
 8018c44:	4618      	mov	r0, r3
 8018c46:	4770      	bx	lr
 8018c48:	08020898 	.word	0x08020898

08018c4c <rcl_guard_condition_init>:
 8018c4c:	b082      	sub	sp, #8
 8018c4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c50:	b087      	sub	sp, #28
 8018c52:	ac0c      	add	r4, sp, #48	@ 0x30
 8018c54:	e884 000c 	stmia.w	r4, {r2, r3}
 8018c58:	46a6      	mov	lr, r4
 8018c5a:	460d      	mov	r5, r1
 8018c5c:	4604      	mov	r4, r0
 8018c5e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018c62:	f10d 0c04 	add.w	ip, sp, #4
 8018c66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018c6a:	f8de 3000 	ldr.w	r3, [lr]
 8018c6e:	f8cc 3000 	str.w	r3, [ip]
 8018c72:	a801      	add	r0, sp, #4
 8018c74:	f7f8 fbde 	bl	8011434 <rcutils_allocator_is_valid>
 8018c78:	b338      	cbz	r0, 8018cca <rcl_guard_condition_init+0x7e>
 8018c7a:	b334      	cbz	r4, 8018cca <rcl_guard_condition_init+0x7e>
 8018c7c:	6866      	ldr	r6, [r4, #4]
 8018c7e:	b9ee      	cbnz	r6, 8018cbc <rcl_guard_condition_init+0x70>
 8018c80:	b31d      	cbz	r5, 8018cca <rcl_guard_condition_init+0x7e>
 8018c82:	4628      	mov	r0, r5
 8018c84:	f7ff fe0e 	bl	80188a4 <rcl_context_is_valid>
 8018c88:	b308      	cbz	r0, 8018cce <rcl_guard_condition_init+0x82>
 8018c8a:	9b01      	ldr	r3, [sp, #4]
 8018c8c:	9905      	ldr	r1, [sp, #20]
 8018c8e:	201c      	movs	r0, #28
 8018c90:	4798      	blx	r3
 8018c92:	4607      	mov	r7, r0
 8018c94:	6060      	str	r0, [r4, #4]
 8018c96:	b310      	cbz	r0, 8018cde <rcl_guard_condition_init+0x92>
 8018c98:	6828      	ldr	r0, [r5, #0]
 8018c9a:	3028      	adds	r0, #40	@ 0x28
 8018c9c:	f002 fe74 	bl	801b988 <rmw_create_guard_condition>
 8018ca0:	6038      	str	r0, [r7, #0]
 8018ca2:	6860      	ldr	r0, [r4, #4]
 8018ca4:	6805      	ldr	r5, [r0, #0]
 8018ca6:	b1a5      	cbz	r5, 8018cd2 <rcl_guard_condition_init+0x86>
 8018ca8:	2301      	movs	r3, #1
 8018caa:	ac01      	add	r4, sp, #4
 8018cac:	7103      	strb	r3, [r0, #4]
 8018cae:	f100 0708 	add.w	r7, r0, #8
 8018cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018cb4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018cb6:	6823      	ldr	r3, [r4, #0]
 8018cb8:	603b      	str	r3, [r7, #0]
 8018cba:	e000      	b.n	8018cbe <rcl_guard_condition_init+0x72>
 8018cbc:	2664      	movs	r6, #100	@ 0x64
 8018cbe:	4630      	mov	r0, r6
 8018cc0:	b007      	add	sp, #28
 8018cc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018cc6:	b002      	add	sp, #8
 8018cc8:	4770      	bx	lr
 8018cca:	260b      	movs	r6, #11
 8018ccc:	e7f7      	b.n	8018cbe <rcl_guard_condition_init+0x72>
 8018cce:	2665      	movs	r6, #101	@ 0x65
 8018cd0:	e7f5      	b.n	8018cbe <rcl_guard_condition_init+0x72>
 8018cd2:	9b02      	ldr	r3, [sp, #8]
 8018cd4:	9905      	ldr	r1, [sp, #20]
 8018cd6:	4798      	blx	r3
 8018cd8:	2601      	movs	r6, #1
 8018cda:	6065      	str	r5, [r4, #4]
 8018cdc:	e7ef      	b.n	8018cbe <rcl_guard_condition_init+0x72>
 8018cde:	260a      	movs	r6, #10
 8018ce0:	e7ed      	b.n	8018cbe <rcl_guard_condition_init+0x72>
 8018ce2:	bf00      	nop

08018ce4 <rcl_guard_condition_init_from_rmw>:
 8018ce4:	b082      	sub	sp, #8
 8018ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cea:	b086      	sub	sp, #24
 8018cec:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018cf0:	4604      	mov	r4, r0
 8018cf2:	f84c 3f04 	str.w	r3, [ip, #4]!
 8018cf6:	460e      	mov	r6, r1
 8018cf8:	4617      	mov	r7, r2
 8018cfa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018cfe:	f10d 0e04 	add.w	lr, sp, #4
 8018d02:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018d06:	f8dc 3000 	ldr.w	r3, [ip]
 8018d0a:	f8ce 3000 	str.w	r3, [lr]
 8018d0e:	a801      	add	r0, sp, #4
 8018d10:	f7f8 fb90 	bl	8011434 <rcutils_allocator_is_valid>
 8018d14:	b350      	cbz	r0, 8018d6c <rcl_guard_condition_init_from_rmw+0x88>
 8018d16:	b34c      	cbz	r4, 8018d6c <rcl_guard_condition_init_from_rmw+0x88>
 8018d18:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018d1c:	f1b8 0f00 	cmp.w	r8, #0
 8018d20:	d11e      	bne.n	8018d60 <rcl_guard_condition_init_from_rmw+0x7c>
 8018d22:	b31f      	cbz	r7, 8018d6c <rcl_guard_condition_init_from_rmw+0x88>
 8018d24:	4638      	mov	r0, r7
 8018d26:	f7ff fdbd 	bl	80188a4 <rcl_context_is_valid>
 8018d2a:	b328      	cbz	r0, 8018d78 <rcl_guard_condition_init_from_rmw+0x94>
 8018d2c:	9b01      	ldr	r3, [sp, #4]
 8018d2e:	9905      	ldr	r1, [sp, #20]
 8018d30:	201c      	movs	r0, #28
 8018d32:	4798      	blx	r3
 8018d34:	4605      	mov	r5, r0
 8018d36:	6060      	str	r0, [r4, #4]
 8018d38:	b358      	cbz	r0, 8018d92 <rcl_guard_condition_init_from_rmw+0xae>
 8018d3a:	b1fe      	cbz	r6, 8018d7c <rcl_guard_condition_init_from_rmw+0x98>
 8018d3c:	6006      	str	r6, [r0, #0]
 8018d3e:	f880 8004 	strb.w	r8, [r0, #4]
 8018d42:	ac01      	add	r4, sp, #4
 8018d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018d46:	f105 0c08 	add.w	ip, r5, #8
 8018d4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018d4e:	6823      	ldr	r3, [r4, #0]
 8018d50:	f8cc 3000 	str.w	r3, [ip]
 8018d54:	2000      	movs	r0, #0
 8018d56:	b006      	add	sp, #24
 8018d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d5c:	b002      	add	sp, #8
 8018d5e:	4770      	bx	lr
 8018d60:	2064      	movs	r0, #100	@ 0x64
 8018d62:	b006      	add	sp, #24
 8018d64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d68:	b002      	add	sp, #8
 8018d6a:	4770      	bx	lr
 8018d6c:	200b      	movs	r0, #11
 8018d6e:	b006      	add	sp, #24
 8018d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d74:	b002      	add	sp, #8
 8018d76:	4770      	bx	lr
 8018d78:	2065      	movs	r0, #101	@ 0x65
 8018d7a:	e7f2      	b.n	8018d62 <rcl_guard_condition_init_from_rmw+0x7e>
 8018d7c:	6838      	ldr	r0, [r7, #0]
 8018d7e:	3028      	adds	r0, #40	@ 0x28
 8018d80:	f002 fe02 	bl	801b988 <rmw_create_guard_condition>
 8018d84:	6028      	str	r0, [r5, #0]
 8018d86:	6865      	ldr	r5, [r4, #4]
 8018d88:	682e      	ldr	r6, [r5, #0]
 8018d8a:	b126      	cbz	r6, 8018d96 <rcl_guard_condition_init_from_rmw+0xb2>
 8018d8c:	2301      	movs	r3, #1
 8018d8e:	712b      	strb	r3, [r5, #4]
 8018d90:	e7d7      	b.n	8018d42 <rcl_guard_condition_init_from_rmw+0x5e>
 8018d92:	200a      	movs	r0, #10
 8018d94:	e7e5      	b.n	8018d62 <rcl_guard_condition_init_from_rmw+0x7e>
 8018d96:	4628      	mov	r0, r5
 8018d98:	9b02      	ldr	r3, [sp, #8]
 8018d9a:	9905      	ldr	r1, [sp, #20]
 8018d9c:	4798      	blx	r3
 8018d9e:	6066      	str	r6, [r4, #4]
 8018da0:	2001      	movs	r0, #1
 8018da2:	e7de      	b.n	8018d62 <rcl_guard_condition_init_from_rmw+0x7e>

08018da4 <rcl_guard_condition_fini>:
 8018da4:	b570      	push	{r4, r5, r6, lr}
 8018da6:	b082      	sub	sp, #8
 8018da8:	b1f0      	cbz	r0, 8018de8 <rcl_guard_condition_fini+0x44>
 8018daa:	6843      	ldr	r3, [r0, #4]
 8018dac:	4604      	mov	r4, r0
 8018dae:	b163      	cbz	r3, 8018dca <rcl_guard_condition_fini+0x26>
 8018db0:	6818      	ldr	r0, [r3, #0]
 8018db2:	68de      	ldr	r6, [r3, #12]
 8018db4:	6999      	ldr	r1, [r3, #24]
 8018db6:	b160      	cbz	r0, 8018dd2 <rcl_guard_condition_fini+0x2e>
 8018db8:	791d      	ldrb	r5, [r3, #4]
 8018dba:	b965      	cbnz	r5, 8018dd6 <rcl_guard_condition_fini+0x32>
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	47b0      	blx	r6
 8018dc0:	2300      	movs	r3, #0
 8018dc2:	4628      	mov	r0, r5
 8018dc4:	6063      	str	r3, [r4, #4]
 8018dc6:	b002      	add	sp, #8
 8018dc8:	bd70      	pop	{r4, r5, r6, pc}
 8018dca:	461d      	mov	r5, r3
 8018dcc:	4628      	mov	r0, r5
 8018dce:	b002      	add	sp, #8
 8018dd0:	bd70      	pop	{r4, r5, r6, pc}
 8018dd2:	4605      	mov	r5, r0
 8018dd4:	e7f2      	b.n	8018dbc <rcl_guard_condition_fini+0x18>
 8018dd6:	9101      	str	r1, [sp, #4]
 8018dd8:	f002 fdea 	bl	801b9b0 <rmw_destroy_guard_condition>
 8018ddc:	1e05      	subs	r5, r0, #0
 8018dde:	6863      	ldr	r3, [r4, #4]
 8018de0:	9901      	ldr	r1, [sp, #4]
 8018de2:	bf18      	it	ne
 8018de4:	2501      	movne	r5, #1
 8018de6:	e7e9      	b.n	8018dbc <rcl_guard_condition_fini+0x18>
 8018de8:	250b      	movs	r5, #11
 8018dea:	4628      	mov	r0, r5
 8018dec:	b002      	add	sp, #8
 8018dee:	bd70      	pop	{r4, r5, r6, pc}

08018df0 <rcl_guard_condition_get_default_options>:
 8018df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018df2:	b087      	sub	sp, #28
 8018df4:	4606      	mov	r6, r0
 8018df6:	4668      	mov	r0, sp
 8018df8:	f7f8 fb0e 	bl	8011418 <rcutils_get_default_allocator>
 8018dfc:	4b09      	ldr	r3, [pc, #36]	@ (8018e24 <rcl_guard_condition_get_default_options+0x34>)
 8018dfe:	46ee      	mov	lr, sp
 8018e00:	469c      	mov	ip, r3
 8018e02:	461d      	mov	r5, r3
 8018e04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018e08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e0e:	4634      	mov	r4, r6
 8018e10:	f8de 7000 	ldr.w	r7, [lr]
 8018e14:	f8cc 7000 	str.w	r7, [ip]
 8018e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e1a:	4630      	mov	r0, r6
 8018e1c:	6027      	str	r7, [r4, #0]
 8018e1e:	b007      	add	sp, #28
 8018e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e22:	bf00      	nop
 8018e24:	2000c3b8 	.word	0x2000c3b8

08018e28 <rcl_trigger_guard_condition>:
 8018e28:	b148      	cbz	r0, 8018e3e <rcl_trigger_guard_condition+0x16>
 8018e2a:	b508      	push	{r3, lr}
 8018e2c:	6843      	ldr	r3, [r0, #4]
 8018e2e:	b143      	cbz	r3, 8018e42 <rcl_trigger_guard_condition+0x1a>
 8018e30:	6818      	ldr	r0, [r3, #0]
 8018e32:	f002 fe97 	bl	801bb64 <rmw_trigger_guard_condition>
 8018e36:	3800      	subs	r0, #0
 8018e38:	bf18      	it	ne
 8018e3a:	2001      	movne	r0, #1
 8018e3c:	bd08      	pop	{r3, pc}
 8018e3e:	200b      	movs	r0, #11
 8018e40:	4770      	bx	lr
 8018e42:	200b      	movs	r0, #11
 8018e44:	bd08      	pop	{r3, pc}
 8018e46:	bf00      	nop

08018e48 <rcl_guard_condition_get_rmw_handle>:
 8018e48:	b110      	cbz	r0, 8018e50 <rcl_guard_condition_get_rmw_handle+0x8>
 8018e4a:	6840      	ldr	r0, [r0, #4]
 8018e4c:	b100      	cbz	r0, 8018e50 <rcl_guard_condition_get_rmw_handle+0x8>
 8018e4e:	6800      	ldr	r0, [r0, #0]
 8018e50:	4770      	bx	lr
 8018e52:	bf00      	nop

08018e54 <rcl_init>:
 8018e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e58:	1e05      	subs	r5, r0, #0
 8018e5a:	b09e      	sub	sp, #120	@ 0x78
 8018e5c:	460e      	mov	r6, r1
 8018e5e:	4690      	mov	r8, r2
 8018e60:	461f      	mov	r7, r3
 8018e62:	f340 809c 	ble.w	8018f9e <rcl_init+0x14a>
 8018e66:	2900      	cmp	r1, #0
 8018e68:	f000 809c 	beq.w	8018fa4 <rcl_init+0x150>
 8018e6c:	f1a1 0e04 	sub.w	lr, r1, #4
 8018e70:	f04f 0c00 	mov.w	ip, #0
 8018e74:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8018e78:	f10c 0c01 	add.w	ip, ip, #1
 8018e7c:	2c00      	cmp	r4, #0
 8018e7e:	f000 8091 	beq.w	8018fa4 <rcl_init+0x150>
 8018e82:	4565      	cmp	r5, ip
 8018e84:	d1f6      	bne.n	8018e74 <rcl_init+0x20>
 8018e86:	f1b8 0f00 	cmp.w	r8, #0
 8018e8a:	f000 808b 	beq.w	8018fa4 <rcl_init+0x150>
 8018e8e:	f8d8 4000 	ldr.w	r4, [r8]
 8018e92:	2c00      	cmp	r4, #0
 8018e94:	f000 8086 	beq.w	8018fa4 <rcl_init+0x150>
 8018e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018e9a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8018e9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018ea2:	6823      	ldr	r3, [r4, #0]
 8018ea4:	f8cc 3000 	str.w	r3, [ip]
 8018ea8:	a819      	add	r0, sp, #100	@ 0x64
 8018eaa:	f7f8 fac3 	bl	8011434 <rcutils_allocator_is_valid>
 8018eae:	2800      	cmp	r0, #0
 8018eb0:	d078      	beq.n	8018fa4 <rcl_init+0x150>
 8018eb2:	2f00      	cmp	r7, #0
 8018eb4:	d076      	beq.n	8018fa4 <rcl_init+0x150>
 8018eb6:	683b      	ldr	r3, [r7, #0]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d178      	bne.n	8018fae <rcl_init+0x15a>
 8018ebc:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8018ec0:	2178      	movs	r1, #120	@ 0x78
 8018ec2:	2001      	movs	r0, #1
 8018ec4:	4798      	blx	r3
 8018ec6:	4604      	mov	r4, r0
 8018ec8:	6038      	str	r0, [r7, #0]
 8018eca:	2800      	cmp	r0, #0
 8018ecc:	f000 80b6 	beq.w	801903c <rcl_init+0x1e8>
 8018ed0:	a802      	add	r0, sp, #8
 8018ed2:	f002 fbb1 	bl	801b638 <rmw_get_zero_initialized_context>
 8018ed6:	a902      	add	r1, sp, #8
 8018ed8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8018edc:	2250      	movs	r2, #80	@ 0x50
 8018ede:	ac19      	add	r4, sp, #100	@ 0x64
 8018ee0:	f004 fce7 	bl	801d8b2 <memcpy>
 8018ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018ee6:	f8d7 e000 	ldr.w	lr, [r7]
 8018eea:	46f4      	mov	ip, lr
 8018eec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018ef0:	6823      	ldr	r3, [r4, #0]
 8018ef2:	f8cc 3000 	str.w	r3, [ip]
 8018ef6:	f10e 0114 	add.w	r1, lr, #20
 8018efa:	4640      	mov	r0, r8
 8018efc:	f7f6 fec4 	bl	800fc88 <rcl_init_options_copy>
 8018f00:	4604      	mov	r4, r0
 8018f02:	2800      	cmp	r0, #0
 8018f04:	d144      	bne.n	8018f90 <rcl_init+0x13c>
 8018f06:	f8d7 9000 	ldr.w	r9, [r7]
 8018f0a:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8018f0e:	f8c9 0020 	str.w	r0, [r9, #32]
 8018f12:	f8c9 5018 	str.w	r5, [r9, #24]
 8018f16:	f8c9 801c 	str.w	r8, [r9, #28]
 8018f1a:	2d00      	cmp	r5, #0
 8018f1c:	d04e      	beq.n	8018fbc <rcl_init+0x168>
 8018f1e:	2e00      	cmp	r6, #0
 8018f20:	d04c      	beq.n	8018fbc <rcl_init+0x168>
 8018f22:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8018f26:	2104      	movs	r1, #4
 8018f28:	4628      	mov	r0, r5
 8018f2a:	4798      	blx	r3
 8018f2c:	f8c9 0020 	str.w	r0, [r9, #32]
 8018f30:	f8d7 9000 	ldr.w	r9, [r7]
 8018f34:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8018f38:	46ca      	mov	sl, r9
 8018f3a:	b343      	cbz	r3, 8018f8e <rcl_init+0x13a>
 8018f3c:	2d01      	cmp	r5, #1
 8018f3e:	f178 0300 	sbcs.w	r3, r8, #0
 8018f42:	db3b      	blt.n	8018fbc <rcl_init+0x168>
 8018f44:	2400      	movs	r4, #0
 8018f46:	3e04      	subs	r6, #4
 8018f48:	46a1      	mov	r9, r4
 8018f4a:	e00b      	b.n	8018f64 <rcl_init+0x110>
 8018f4c:	6831      	ldr	r1, [r6, #0]
 8018f4e:	f004 fcb0 	bl	801d8b2 <memcpy>
 8018f52:	3401      	adds	r4, #1
 8018f54:	f149 0900 	adc.w	r9, r9, #0
 8018f58:	45c8      	cmp	r8, r9
 8018f5a:	bf08      	it	eq
 8018f5c:	42a5      	cmpeq	r5, r4
 8018f5e:	d02b      	beq.n	8018fb8 <rcl_init+0x164>
 8018f60:	f8d7 a000 	ldr.w	sl, [r7]
 8018f64:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8018f68:	f7e7 f964 	bl	8000234 <strlen>
 8018f6c:	1c42      	adds	r2, r0, #1
 8018f6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018f70:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8018f72:	f8da a020 	ldr.w	sl, [sl, #32]
 8018f76:	9201      	str	r2, [sp, #4]
 8018f78:	4610      	mov	r0, r2
 8018f7a:	4798      	blx	r3
 8018f7c:	683b      	ldr	r3, [r7, #0]
 8018f7e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8018f82:	6a1b      	ldr	r3, [r3, #32]
 8018f84:	9a01      	ldr	r2, [sp, #4]
 8018f86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018f8a:	2800      	cmp	r0, #0
 8018f8c:	d1de      	bne.n	8018f4c <rcl_init+0xf8>
 8018f8e:	240a      	movs	r4, #10
 8018f90:	4638      	mov	r0, r7
 8018f92:	f7ff fc8d 	bl	80188b0 <__cleanup_context>
 8018f96:	4620      	mov	r0, r4
 8018f98:	b01e      	add	sp, #120	@ 0x78
 8018f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f9e:	2900      	cmp	r1, #0
 8018fa0:	f43f af71 	beq.w	8018e86 <rcl_init+0x32>
 8018fa4:	240b      	movs	r4, #11
 8018fa6:	4620      	mov	r0, r4
 8018fa8:	b01e      	add	sp, #120	@ 0x78
 8018faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fae:	2464      	movs	r4, #100	@ 0x64
 8018fb0:	4620      	mov	r0, r4
 8018fb2:	b01e      	add	sp, #120	@ 0x78
 8018fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fb8:	f8d7 9000 	ldr.w	r9, [r7]
 8018fbc:	4926      	ldr	r1, [pc, #152]	@ (8019058 <rcl_init+0x204>)
 8018fbe:	680b      	ldr	r3, [r1, #0]
 8018fc0:	3301      	adds	r3, #1
 8018fc2:	d036      	beq.n	8019032 <rcl_init+0x1de>
 8018fc4:	600b      	str	r3, [r1, #0]
 8018fc6:	461a      	mov	r2, r3
 8018fc8:	2400      	movs	r4, #0
 8018fca:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8018fce:	607b      	str	r3, [r7, #4]
 8018fd0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018fd2:	3301      	adds	r3, #1
 8018fd4:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8018fd8:	d034      	beq.n	8019044 <rcl_init+0x1f0>
 8018fda:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8018fde:	b93b      	cbnz	r3, 8018ff0 <rcl_init+0x19c>
 8018fe0:	3030      	adds	r0, #48	@ 0x30
 8018fe2:	f000 f83b 	bl	801905c <rcl_get_localhost_only>
 8018fe6:	4604      	mov	r4, r0
 8018fe8:	2800      	cmp	r0, #0
 8018fea:	d1d1      	bne.n	8018f90 <rcl_init+0x13c>
 8018fec:	683b      	ldr	r3, [r7, #0]
 8018fee:	6958      	ldr	r0, [r3, #20]
 8018ff0:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8018ff2:	aa18      	add	r2, sp, #96	@ 0x60
 8018ff4:	a917      	add	r1, sp, #92	@ 0x5c
 8018ff6:	f000 fed9 	bl	8019dac <rcl_validate_enclave_name>
 8018ffa:	4604      	mov	r4, r0
 8018ffc:	2800      	cmp	r0, #0
 8018ffe:	d1c7      	bne.n	8018f90 <rcl_init+0x13c>
 8019000:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019002:	b9eb      	cbnz	r3, 8019040 <rcl_init+0x1ec>
 8019004:	6839      	ldr	r1, [r7, #0]
 8019006:	694b      	ldr	r3, [r1, #20]
 8019008:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801900a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801900e:	f000 f8f3 	bl	80191f8 <rcl_get_security_options_from_environment>
 8019012:	4604      	mov	r4, r0
 8019014:	2800      	cmp	r0, #0
 8019016:	d1bb      	bne.n	8018f90 <rcl_init+0x13c>
 8019018:	6839      	ldr	r1, [r7, #0]
 801901a:	6948      	ldr	r0, [r1, #20]
 801901c:	3128      	adds	r1, #40	@ 0x28
 801901e:	3018      	adds	r0, #24
 8019020:	f7f9 f97c 	bl	801231c <rmw_init>
 8019024:	4604      	mov	r4, r0
 8019026:	2800      	cmp	r0, #0
 8019028:	d0bd      	beq.n	8018fa6 <rcl_init+0x152>
 801902a:	f7ff fc1d 	bl	8018868 <rcl_convert_rmw_ret_to_rcl_ret>
 801902e:	4604      	mov	r4, r0
 8019030:	e7ae      	b.n	8018f90 <rcl_init+0x13c>
 8019032:	2201      	movs	r2, #1
 8019034:	461c      	mov	r4, r3
 8019036:	600a      	str	r2, [r1, #0]
 8019038:	4613      	mov	r3, r2
 801903a:	e7c6      	b.n	8018fca <rcl_init+0x176>
 801903c:	240a      	movs	r4, #10
 801903e:	e7b2      	b.n	8018fa6 <rcl_init+0x152>
 8019040:	2401      	movs	r4, #1
 8019042:	e7a5      	b.n	8018f90 <rcl_init+0x13c>
 8019044:	3024      	adds	r0, #36	@ 0x24
 8019046:	f003 fe4d 	bl	801cce4 <rcl_get_default_domain_id>
 801904a:	4604      	mov	r4, r0
 801904c:	2800      	cmp	r0, #0
 801904e:	d19f      	bne.n	8018f90 <rcl_init+0x13c>
 8019050:	683b      	ldr	r3, [r7, #0]
 8019052:	6958      	ldr	r0, [r3, #20]
 8019054:	e7c1      	b.n	8018fda <rcl_init+0x186>
 8019056:	bf00      	nop
 8019058:	2000c3cc 	.word	0x2000c3cc

0801905c <rcl_get_localhost_only>:
 801905c:	b510      	push	{r4, lr}
 801905e:	b082      	sub	sp, #8
 8019060:	2300      	movs	r3, #0
 8019062:	9301      	str	r3, [sp, #4]
 8019064:	b1b8      	cbz	r0, 8019096 <rcl_get_localhost_only+0x3a>
 8019066:	4604      	mov	r4, r0
 8019068:	a901      	add	r1, sp, #4
 801906a:	480c      	ldr	r0, [pc, #48]	@ (801909c <rcl_get_localhost_only+0x40>)
 801906c:	f7f8 fa94 	bl	8011598 <rcutils_get_env>
 8019070:	b110      	cbz	r0, 8019078 <rcl_get_localhost_only+0x1c>
 8019072:	2001      	movs	r0, #1
 8019074:	b002      	add	sp, #8
 8019076:	bd10      	pop	{r4, pc}
 8019078:	9b01      	ldr	r3, [sp, #4]
 801907a:	b113      	cbz	r3, 8019082 <rcl_get_localhost_only+0x26>
 801907c:	781a      	ldrb	r2, [r3, #0]
 801907e:	2a31      	cmp	r2, #49	@ 0x31
 8019080:	d004      	beq.n	801908c <rcl_get_localhost_only+0x30>
 8019082:	2302      	movs	r3, #2
 8019084:	2000      	movs	r0, #0
 8019086:	7023      	strb	r3, [r4, #0]
 8019088:	b002      	add	sp, #8
 801908a:	bd10      	pop	{r4, pc}
 801908c:	785b      	ldrb	r3, [r3, #1]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d1f7      	bne.n	8019082 <rcl_get_localhost_only+0x26>
 8019092:	2301      	movs	r3, #1
 8019094:	e7f6      	b.n	8019084 <rcl_get_localhost_only+0x28>
 8019096:	200b      	movs	r0, #11
 8019098:	b002      	add	sp, #8
 801909a:	bd10      	pop	{r4, pc}
 801909c:	080208a0 	.word	0x080208a0

080190a0 <exact_match_lookup>:
 80190a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190a2:	f102 0708 	add.w	r7, r2, #8
 80190a6:	460b      	mov	r3, r1
 80190a8:	4614      	mov	r4, r2
 80190aa:	4606      	mov	r6, r0
 80190ac:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80190b0:	b085      	sub	sp, #20
 80190b2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80190b6:	4618      	mov	r0, r3
 80190b8:	4919      	ldr	r1, [pc, #100]	@ (8019120 <exact_match_lookup+0x80>)
 80190ba:	e894 000c 	ldmia.w	r4, {r2, r3}
 80190be:	f002 faad 	bl	801b61c <rcutils_join_path>
 80190c2:	7833      	ldrb	r3, [r6, #0]
 80190c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80190c6:	4605      	mov	r5, r0
 80190c8:	d023      	beq.n	8019112 <exact_match_lookup+0x72>
 80190ca:	f104 030c 	add.w	r3, r4, #12
 80190ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80190d2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80190d6:	1c70      	adds	r0, r6, #1
 80190d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80190dc:	f002 faa4 	bl	801b628 <rcutils_to_native_path>
 80190e0:	4606      	mov	r6, r0
 80190e2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80190e6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80190ea:	4631      	mov	r1, r6
 80190ec:	e894 000c 	ldmia.w	r4, {r2, r3}
 80190f0:	4628      	mov	r0, r5
 80190f2:	f002 fa93 	bl	801b61c <rcutils_join_path>
 80190f6:	6862      	ldr	r2, [r4, #4]
 80190f8:	6921      	ldr	r1, [r4, #16]
 80190fa:	4603      	mov	r3, r0
 80190fc:	4630      	mov	r0, r6
 80190fe:	461e      	mov	r6, r3
 8019100:	4790      	blx	r2
 8019102:	4628      	mov	r0, r5
 8019104:	6863      	ldr	r3, [r4, #4]
 8019106:	6921      	ldr	r1, [r4, #16]
 8019108:	4798      	blx	r3
 801910a:	4635      	mov	r5, r6
 801910c:	4628      	mov	r0, r5
 801910e:	b005      	add	sp, #20
 8019110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019112:	7873      	ldrb	r3, [r6, #1]
 8019114:	2b00      	cmp	r3, #0
 8019116:	d1d8      	bne.n	80190ca <exact_match_lookup+0x2a>
 8019118:	4628      	mov	r0, r5
 801911a:	b005      	add	sp, #20
 801911c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801911e:	bf00      	nop
 8019120:	080208f0 	.word	0x080208f0

08019124 <rcl_get_secure_root>:
 8019124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019128:	b085      	sub	sp, #20
 801912a:	b168      	cbz	r0, 8019148 <rcl_get_secure_root+0x24>
 801912c:	4607      	mov	r7, r0
 801912e:	4608      	mov	r0, r1
 8019130:	460c      	mov	r4, r1
 8019132:	f7f8 f97f 	bl	8011434 <rcutils_allocator_is_valid>
 8019136:	b138      	cbz	r0, 8019148 <rcl_get_secure_root+0x24>
 8019138:	2300      	movs	r3, #0
 801913a:	482d      	ldr	r0, [pc, #180]	@ (80191f0 <rcl_get_secure_root+0xcc>)
 801913c:	9303      	str	r3, [sp, #12]
 801913e:	a903      	add	r1, sp, #12
 8019140:	f7f8 fa2a 	bl	8011598 <rcutils_get_env>
 8019144:	4605      	mov	r5, r0
 8019146:	b120      	cbz	r0, 8019152 <rcl_get_secure_root+0x2e>
 8019148:	2500      	movs	r5, #0
 801914a:	4628      	mov	r0, r5
 801914c:	b005      	add	sp, #20
 801914e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019152:	9b03      	ldr	r3, [sp, #12]
 8019154:	781a      	ldrb	r2, [r3, #0]
 8019156:	2a00      	cmp	r2, #0
 8019158:	d0f6      	beq.n	8019148 <rcl_get_secure_root+0x24>
 801915a:	f104 090c 	add.w	r9, r4, #12
 801915e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8019162:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019166:	4618      	mov	r0, r3
 8019168:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801916c:	f7f8 fb7a 	bl	8011864 <rcutils_strdup>
 8019170:	4680      	mov	r8, r0
 8019172:	2800      	cmp	r0, #0
 8019174:	d0e8      	beq.n	8019148 <rcl_get_secure_root+0x24>
 8019176:	481f      	ldr	r0, [pc, #124]	@ (80191f4 <rcl_get_secure_root+0xd0>)
 8019178:	9503      	str	r5, [sp, #12]
 801917a:	a903      	add	r1, sp, #12
 801917c:	f7f8 fa0c 	bl	8011598 <rcutils_get_env>
 8019180:	b160      	cbz	r0, 801919c <rcl_get_secure_root+0x78>
 8019182:	2600      	movs	r6, #0
 8019184:	6863      	ldr	r3, [r4, #4]
 8019186:	6921      	ldr	r1, [r4, #16]
 8019188:	4630      	mov	r0, r6
 801918a:	4798      	blx	r3
 801918c:	4640      	mov	r0, r8
 801918e:	6863      	ldr	r3, [r4, #4]
 8019190:	6921      	ldr	r1, [r4, #16]
 8019192:	4798      	blx	r3
 8019194:	4628      	mov	r0, r5
 8019196:	b005      	add	sp, #20
 8019198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801919c:	9b03      	ldr	r3, [sp, #12]
 801919e:	781e      	ldrb	r6, [r3, #0]
 80191a0:	b1f6      	cbz	r6, 80191e0 <rcl_get_secure_root+0xbc>
 80191a2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80191a6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80191aa:	4618      	mov	r0, r3
 80191ac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80191b0:	f7f8 fb58 	bl	8011864 <rcutils_strdup>
 80191b4:	4606      	mov	r6, r0
 80191b6:	2800      	cmp	r0, #0
 80191b8:	d0e3      	beq.n	8019182 <rcl_get_secure_root+0x5e>
 80191ba:	4622      	mov	r2, r4
 80191bc:	4641      	mov	r1, r8
 80191be:	f7ff ff6f 	bl	80190a0 <exact_match_lookup>
 80191c2:	4605      	mov	r5, r0
 80191c4:	2d00      	cmp	r5, #0
 80191c6:	d0dd      	beq.n	8019184 <rcl_get_secure_root+0x60>
 80191c8:	4628      	mov	r0, r5
 80191ca:	f002 fa25 	bl	801b618 <rcutils_is_directory>
 80191ce:	4603      	mov	r3, r0
 80191d0:	2800      	cmp	r0, #0
 80191d2:	d1d7      	bne.n	8019184 <rcl_get_secure_root+0x60>
 80191d4:	4628      	mov	r0, r5
 80191d6:	6921      	ldr	r1, [r4, #16]
 80191d8:	461d      	mov	r5, r3
 80191da:	6863      	ldr	r3, [r4, #4]
 80191dc:	4798      	blx	r3
 80191de:	e7d1      	b.n	8019184 <rcl_get_secure_root+0x60>
 80191e0:	4622      	mov	r2, r4
 80191e2:	4638      	mov	r0, r7
 80191e4:	4641      	mov	r1, r8
 80191e6:	f7ff ff5b 	bl	80190a0 <exact_match_lookup>
 80191ea:	4605      	mov	r5, r0
 80191ec:	e7ea      	b.n	80191c4 <rcl_get_secure_root+0xa0>
 80191ee:	bf00      	nop
 80191f0:	080208fc 	.word	0x080208fc
 80191f4:	08020914 	.word	0x08020914

080191f8 <rcl_get_security_options_from_environment>:
 80191f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191fc:	b082      	sub	sp, #8
 80191fe:	2300      	movs	r3, #0
 8019200:	4606      	mov	r6, r0
 8019202:	460f      	mov	r7, r1
 8019204:	4820      	ldr	r0, [pc, #128]	@ (8019288 <rcl_get_security_options_from_environment+0x90>)
 8019206:	9301      	str	r3, [sp, #4]
 8019208:	a901      	add	r1, sp, #4
 801920a:	4690      	mov	r8, r2
 801920c:	f7f8 f9c4 	bl	8011598 <rcutils_get_env>
 8019210:	b120      	cbz	r0, 801921c <rcl_get_security_options_from_environment+0x24>
 8019212:	2501      	movs	r5, #1
 8019214:	4628      	mov	r0, r5
 8019216:	b002      	add	sp, #8
 8019218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801921c:	491b      	ldr	r1, [pc, #108]	@ (801928c <rcl_get_security_options_from_environment+0x94>)
 801921e:	4604      	mov	r4, r0
 8019220:	9801      	ldr	r0, [sp, #4]
 8019222:	f7e6 fffd 	bl	8000220 <strcmp>
 8019226:	4605      	mov	r5, r0
 8019228:	b9e8      	cbnz	r0, 8019266 <rcl_get_security_options_from_environment+0x6e>
 801922a:	9001      	str	r0, [sp, #4]
 801922c:	f1b8 0f00 	cmp.w	r8, #0
 8019230:	d020      	beq.n	8019274 <rcl_get_security_options_from_environment+0x7c>
 8019232:	4817      	ldr	r0, [pc, #92]	@ (8019290 <rcl_get_security_options_from_environment+0x98>)
 8019234:	a901      	add	r1, sp, #4
 8019236:	f7f8 f9af 	bl	8011598 <rcutils_get_env>
 801923a:	2800      	cmp	r0, #0
 801923c:	d1e9      	bne.n	8019212 <rcl_get_security_options_from_environment+0x1a>
 801923e:	4915      	ldr	r1, [pc, #84]	@ (8019294 <rcl_get_security_options_from_environment+0x9c>)
 8019240:	9801      	ldr	r0, [sp, #4]
 8019242:	f7e6 ffed 	bl	8000220 <strcmp>
 8019246:	fab0 f080 	clz	r0, r0
 801924a:	0940      	lsrs	r0, r0, #5
 801924c:	f888 0000 	strb.w	r0, [r8]
 8019250:	4639      	mov	r1, r7
 8019252:	4630      	mov	r0, r6
 8019254:	f7ff ff66 	bl	8019124 <rcl_get_secure_root>
 8019258:	b170      	cbz	r0, 8019278 <rcl_get_security_options_from_environment+0x80>
 801925a:	f8c8 0004 	str.w	r0, [r8, #4]
 801925e:	4628      	mov	r0, r5
 8019260:	b002      	add	sp, #8
 8019262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019266:	4625      	mov	r5, r4
 8019268:	4628      	mov	r0, r5
 801926a:	f888 4000 	strb.w	r4, [r8]
 801926e:	b002      	add	sp, #8
 8019270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019274:	250b      	movs	r5, #11
 8019276:	e7cd      	b.n	8019214 <rcl_get_security_options_from_environment+0x1c>
 8019278:	f898 5000 	ldrb.w	r5, [r8]
 801927c:	f1a5 0501 	sub.w	r5, r5, #1
 8019280:	fab5 f585 	clz	r5, r5
 8019284:	096d      	lsrs	r5, r5, #5
 8019286:	e7c5      	b.n	8019214 <rcl_get_security_options_from_environment+0x1c>
 8019288:	080208b4 	.word	0x080208b4
 801928c:	080208c8 	.word	0x080208c8
 8019290:	080208d0 	.word	0x080208d0
 8019294:	080208e8 	.word	0x080208e8

08019298 <rcl_get_zero_initialized_service>:
 8019298:	4b01      	ldr	r3, [pc, #4]	@ (80192a0 <rcl_get_zero_initialized_service+0x8>)
 801929a:	6818      	ldr	r0, [r3, #0]
 801929c:	4770      	bx	lr
 801929e:	bf00      	nop
 80192a0:	08020934 	.word	0x08020934

080192a4 <rcl_service_init>:
 80192a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192a8:	b089      	sub	sp, #36	@ 0x24
 80192aa:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80192ac:	b1c5      	cbz	r5, 80192e0 <rcl_service_init+0x3c>
 80192ae:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 80192b2:	4604      	mov	r4, r0
 80192b4:	4648      	mov	r0, r9
 80192b6:	4688      	mov	r8, r1
 80192b8:	4617      	mov	r7, r2
 80192ba:	461e      	mov	r6, r3
 80192bc:	f7f8 f8ba 	bl	8011434 <rcutils_allocator_is_valid>
 80192c0:	b170      	cbz	r0, 80192e0 <rcl_service_init+0x3c>
 80192c2:	b16c      	cbz	r4, 80192e0 <rcl_service_init+0x3c>
 80192c4:	4640      	mov	r0, r8
 80192c6:	f7f6 fea3 	bl	8010010 <rcl_node_is_valid>
 80192ca:	2800      	cmp	r0, #0
 80192cc:	d058      	beq.n	8019380 <rcl_service_init+0xdc>
 80192ce:	b13f      	cbz	r7, 80192e0 <rcl_service_init+0x3c>
 80192d0:	b136      	cbz	r6, 80192e0 <rcl_service_init+0x3c>
 80192d2:	6823      	ldr	r3, [r4, #0]
 80192d4:	b14b      	cbz	r3, 80192ea <rcl_service_init+0x46>
 80192d6:	2664      	movs	r6, #100	@ 0x64
 80192d8:	4630      	mov	r0, r6
 80192da:	b009      	add	sp, #36	@ 0x24
 80192dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80192e0:	260b      	movs	r6, #11
 80192e2:	4630      	mov	r0, r6
 80192e4:	b009      	add	sp, #36	@ 0x24
 80192e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80192ea:	aa07      	add	r2, sp, #28
 80192ec:	9205      	str	r2, [sp, #20]
 80192ee:	2201      	movs	r2, #1
 80192f0:	9304      	str	r3, [sp, #16]
 80192f2:	9203      	str	r2, [sp, #12]
 80192f4:	9307      	str	r3, [sp, #28]
 80192f6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 80192fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80192fe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019302:	4631      	mov	r1, r6
 8019304:	e899 000c 	ldmia.w	r9, {r2, r3}
 8019308:	4640      	mov	r0, r8
 801930a:	f7f6 fed5 	bl	80100b8 <rcl_node_resolve_name>
 801930e:	2800      	cmp	r0, #0
 8019310:	d145      	bne.n	801939e <rcl_service_init+0xfa>
 8019312:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8019314:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8019316:	f44f 7088 	mov.w	r0, #272	@ 0x110
 801931a:	4798      	blx	r3
 801931c:	6020      	str	r0, [r4, #0]
 801931e:	2800      	cmp	r0, #0
 8019320:	d043      	beq.n	80193aa <rcl_service_init+0x106>
 8019322:	4640      	mov	r0, r8
 8019324:	f7f6 fe96 	bl	8010054 <rcl_node_get_rmw_handle>
 8019328:	462b      	mov	r3, r5
 801932a:	9a07      	ldr	r2, [sp, #28]
 801932c:	6826      	ldr	r6, [r4, #0]
 801932e:	4639      	mov	r1, r7
 8019330:	f7f9 fd66 	bl	8012e00 <rmw_create_service>
 8019334:	6823      	ldr	r3, [r4, #0]
 8019336:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 801933a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801933e:	b330      	cbz	r0, 801938e <rcl_service_init+0xea>
 8019340:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8019344:	f7f9 fe82 	bl	801304c <rmw_service_request_subscription_get_actual_qos>
 8019348:	b9f8      	cbnz	r0, 801938a <rcl_service_init+0xe6>
 801934a:	6821      	ldr	r1, [r4, #0]
 801934c:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8019350:	31b8      	adds	r1, #184	@ 0xb8
 8019352:	f7f9 fe6b 	bl	801302c <rmw_service_response_publisher_get_actual_qos>
 8019356:	4606      	mov	r6, r0
 8019358:	b9b8      	cbnz	r0, 801938a <rcl_service_init+0xe6>
 801935a:	6820      	ldr	r0, [r4, #0]
 801935c:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8019360:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8019364:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8019368:	2268      	movs	r2, #104	@ 0x68
 801936a:	4629      	mov	r1, r5
 801936c:	f004 faa1 	bl	801d8b2 <memcpy>
 8019370:	9807      	ldr	r0, [sp, #28]
 8019372:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8019374:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8019376:	4798      	blx	r3
 8019378:	4630      	mov	r0, r6
 801937a:	b009      	add	sp, #36	@ 0x24
 801937c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019380:	26c8      	movs	r6, #200	@ 0xc8
 8019382:	4630      	mov	r0, r6
 8019384:	b009      	add	sp, #36	@ 0x24
 8019386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801938a:	6823      	ldr	r3, [r4, #0]
 801938c:	b12b      	cbz	r3, 801939a <rcl_service_init+0xf6>
 801938e:	4618      	mov	r0, r3
 8019390:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8019392:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8019394:	4790      	blx	r2
 8019396:	2300      	movs	r3, #0
 8019398:	6023      	str	r3, [r4, #0]
 801939a:	2601      	movs	r6, #1
 801939c:	e7e8      	b.n	8019370 <rcl_service_init+0xcc>
 801939e:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 80193a2:	2b01      	cmp	r3, #1
 80193a4:	d903      	bls.n	80193ae <rcl_service_init+0x10a>
 80193a6:	280a      	cmp	r0, #10
 80193a8:	d1f7      	bne.n	801939a <rcl_service_init+0xf6>
 80193aa:	260a      	movs	r6, #10
 80193ac:	e7e0      	b.n	8019370 <rcl_service_init+0xcc>
 80193ae:	2668      	movs	r6, #104	@ 0x68
 80193b0:	e7de      	b.n	8019370 <rcl_service_init+0xcc>
 80193b2:	bf00      	nop

080193b4 <rcl_service_get_default_options>:
 80193b4:	b530      	push	{r4, r5, lr}
 80193b6:	4d0f      	ldr	r5, [pc, #60]	@ (80193f4 <rcl_service_get_default_options+0x40>)
 80193b8:	490f      	ldr	r1, [pc, #60]	@ (80193f8 <rcl_service_get_default_options+0x44>)
 80193ba:	b087      	sub	sp, #28
 80193bc:	4604      	mov	r4, r0
 80193be:	2250      	movs	r2, #80	@ 0x50
 80193c0:	4628      	mov	r0, r5
 80193c2:	f004 fa76 	bl	801d8b2 <memcpy>
 80193c6:	4668      	mov	r0, sp
 80193c8:	f7f8 f826 	bl	8011418 <rcutils_get_default_allocator>
 80193cc:	46ec      	mov	ip, sp
 80193ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80193d2:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80193d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80193da:	2268      	movs	r2, #104	@ 0x68
 80193dc:	f8dc 3000 	ldr.w	r3, [ip]
 80193e0:	f8ce 3000 	str.w	r3, [lr]
 80193e4:	4629      	mov	r1, r5
 80193e6:	4620      	mov	r0, r4
 80193e8:	f004 fa63 	bl	801d8b2 <memcpy>
 80193ec:	4620      	mov	r0, r4
 80193ee:	b007      	add	sp, #28
 80193f0:	bd30      	pop	{r4, r5, pc}
 80193f2:	bf00      	nop
 80193f4:	2000c3d0 	.word	0x2000c3d0
 80193f8:	08020938 	.word	0x08020938

080193fc <rcl_service_get_rmw_handle>:
 80193fc:	b118      	cbz	r0, 8019406 <rcl_service_get_rmw_handle+0xa>
 80193fe:	6800      	ldr	r0, [r0, #0]
 8019400:	b108      	cbz	r0, 8019406 <rcl_service_get_rmw_handle+0xa>
 8019402:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8019406:	4770      	bx	lr

08019408 <rcl_take_request>:
 8019408:	b570      	push	{r4, r5, r6, lr}
 801940a:	468e      	mov	lr, r1
 801940c:	460c      	mov	r4, r1
 801940e:	4616      	mov	r6, r2
 8019410:	4605      	mov	r5, r0
 8019412:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019416:	b08c      	sub	sp, #48	@ 0x30
 8019418:	f10d 0c18 	add.w	ip, sp, #24
 801941c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019420:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8019424:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019428:	b30d      	cbz	r5, 801946e <rcl_take_request+0x66>
 801942a:	682b      	ldr	r3, [r5, #0]
 801942c:	b1fb      	cbz	r3, 801946e <rcl_take_request+0x66>
 801942e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8019432:	b1e0      	cbz	r0, 801946e <rcl_take_request+0x66>
 8019434:	b336      	cbz	r6, 8019484 <rcl_take_request+0x7c>
 8019436:	2300      	movs	r3, #0
 8019438:	f88d 3007 	strb.w	r3, [sp, #7]
 801943c:	4632      	mov	r2, r6
 801943e:	f10d 0307 	add.w	r3, sp, #7
 8019442:	a902      	add	r1, sp, #8
 8019444:	f7f9 fbd8 	bl	8012bf8 <rmw_take_request>
 8019448:	4605      	mov	r5, r0
 801944a:	b198      	cbz	r0, 8019474 <rcl_take_request+0x6c>
 801944c:	280a      	cmp	r0, #10
 801944e:	bf18      	it	ne
 8019450:	2501      	movne	r5, #1
 8019452:	f10d 0e18 	add.w	lr, sp, #24
 8019456:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801945a:	46a4      	mov	ip, r4
 801945c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019460:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8019464:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019468:	4628      	mov	r0, r5
 801946a:	b00c      	add	sp, #48	@ 0x30
 801946c:	bd70      	pop	{r4, r5, r6, pc}
 801946e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8019472:	e7ee      	b.n	8019452 <rcl_take_request+0x4a>
 8019474:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8019478:	f240 2359 	movw	r3, #601	@ 0x259
 801947c:	2a00      	cmp	r2, #0
 801947e:	bf08      	it	eq
 8019480:	461d      	moveq	r5, r3
 8019482:	e7e6      	b.n	8019452 <rcl_take_request+0x4a>
 8019484:	250b      	movs	r5, #11
 8019486:	e7e4      	b.n	8019452 <rcl_take_request+0x4a>

08019488 <rcl_send_response>:
 8019488:	b170      	cbz	r0, 80194a8 <rcl_send_response+0x20>
 801948a:	6800      	ldr	r0, [r0, #0]
 801948c:	b160      	cbz	r0, 80194a8 <rcl_send_response+0x20>
 801948e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8019492:	b148      	cbz	r0, 80194a8 <rcl_send_response+0x20>
 8019494:	b159      	cbz	r1, 80194ae <rcl_send_response+0x26>
 8019496:	b510      	push	{r4, lr}
 8019498:	b15a      	cbz	r2, 80194b2 <rcl_send_response+0x2a>
 801949a:	f7f9 fc0b 	bl	8012cb4 <rmw_send_response>
 801949e:	b110      	cbz	r0, 80194a6 <rcl_send_response+0x1e>
 80194a0:	2802      	cmp	r0, #2
 80194a2:	bf18      	it	ne
 80194a4:	2001      	movne	r0, #1
 80194a6:	bd10      	pop	{r4, pc}
 80194a8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80194ac:	4770      	bx	lr
 80194ae:	200b      	movs	r0, #11
 80194b0:	4770      	bx	lr
 80194b2:	200b      	movs	r0, #11
 80194b4:	bd10      	pop	{r4, pc}
 80194b6:	bf00      	nop

080194b8 <rcl_service_is_valid>:
 80194b8:	b130      	cbz	r0, 80194c8 <rcl_service_is_valid+0x10>
 80194ba:	6800      	ldr	r0, [r0, #0]
 80194bc:	b120      	cbz	r0, 80194c8 <rcl_service_is_valid+0x10>
 80194be:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80194c2:	3800      	subs	r0, #0
 80194c4:	bf18      	it	ne
 80194c6:	2001      	movne	r0, #1
 80194c8:	4770      	bx	lr
 80194ca:	bf00      	nop

080194cc <rcl_take>:
 80194cc:	2800      	cmp	r0, #0
 80194ce:	d04a      	beq.n	8019566 <rcl_take+0x9a>
 80194d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194d4:	4604      	mov	r4, r0
 80194d6:	6800      	ldr	r0, [r0, #0]
 80194d8:	b0a4      	sub	sp, #144	@ 0x90
 80194da:	2800      	cmp	r0, #0
 80194dc:	d03b      	beq.n	8019556 <rcl_take+0x8a>
 80194de:	461f      	mov	r7, r3
 80194e0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d036      	beq.n	8019556 <rcl_take+0x8a>
 80194e8:	460e      	mov	r6, r1
 80194ea:	2900      	cmp	r1, #0
 80194ec:	d039      	beq.n	8019562 <rcl_take+0x96>
 80194ee:	4615      	mov	r5, r2
 80194f0:	2a00      	cmp	r2, #0
 80194f2:	d03c      	beq.n	801956e <rcl_take+0xa2>
 80194f4:	a802      	add	r0, sp, #8
 80194f6:	f002 f933 	bl	801b760 <rmw_get_zero_initialized_message_info>
 80194fa:	f10d 0c08 	add.w	ip, sp, #8
 80194fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019502:	46ae      	mov	lr, r5
 8019504:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019508:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801950c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019510:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019514:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019518:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801951c:	f04f 0800 	mov.w	r8, #0
 8019520:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8019524:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8019528:	6822      	ldr	r2, [r4, #0]
 801952a:	462b      	mov	r3, r5
 801952c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8019530:	9700      	str	r7, [sp, #0]
 8019532:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8019536:	4631      	mov	r1, r6
 8019538:	f002 fac0 	bl	801babc <rmw_take_with_info>
 801953c:	4603      	mov	r3, r0
 801953e:	b9c0      	cbnz	r0, 8019572 <rcl_take+0xa6>
 8019540:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8019544:	f240 1291 	movw	r2, #401	@ 0x191
 8019548:	2900      	cmp	r1, #0
 801954a:	bf08      	it	eq
 801954c:	4613      	moveq	r3, r2
 801954e:	4618      	mov	r0, r3
 8019550:	b024      	add	sp, #144	@ 0x90
 8019552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019556:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801955a:	4618      	mov	r0, r3
 801955c:	b024      	add	sp, #144	@ 0x90
 801955e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019562:	230b      	movs	r3, #11
 8019564:	e7f3      	b.n	801954e <rcl_take+0x82>
 8019566:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801956a:	4618      	mov	r0, r3
 801956c:	4770      	bx	lr
 801956e:	ad14      	add	r5, sp, #80	@ 0x50
 8019570:	e7c0      	b.n	80194f4 <rcl_take+0x28>
 8019572:	f7ff f979 	bl	8018868 <rcl_convert_rmw_ret_to_rcl_ret>
 8019576:	4603      	mov	r3, r0
 8019578:	e7e9      	b.n	801954e <rcl_take+0x82>
 801957a:	bf00      	nop

0801957c <rcl_subscription_get_rmw_handle>:
 801957c:	b118      	cbz	r0, 8019586 <rcl_subscription_get_rmw_handle+0xa>
 801957e:	6800      	ldr	r0, [r0, #0]
 8019580:	b108      	cbz	r0, 8019586 <rcl_subscription_get_rmw_handle+0xa>
 8019582:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8019586:	4770      	bx	lr

08019588 <rcl_subscription_is_valid>:
 8019588:	b130      	cbz	r0, 8019598 <rcl_subscription_is_valid+0x10>
 801958a:	6800      	ldr	r0, [r0, #0]
 801958c:	b120      	cbz	r0, 8019598 <rcl_subscription_is_valid+0x10>
 801958e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8019592:	3800      	subs	r0, #0
 8019594:	bf18      	it	ne
 8019596:	2001      	movne	r0, #1
 8019598:	4770      	bx	lr
 801959a:	bf00      	nop

0801959c <rcl_get_system_time>:
 801959c:	4608      	mov	r0, r1
 801959e:	f7f8 bacb 	b.w	8011b38 <rcutils_system_time_now>
 80195a2:	bf00      	nop

080195a4 <rcl_get_steady_time>:
 80195a4:	4608      	mov	r0, r1
 80195a6:	f7f8 baef 	b.w	8011b88 <rcutils_steady_time_now>
 80195aa:	bf00      	nop

080195ac <rcl_get_ros_time>:
 80195ac:	7a03      	ldrb	r3, [r0, #8]
 80195ae:	b510      	push	{r4, lr}
 80195b0:	460c      	mov	r4, r1
 80195b2:	b133      	cbz	r3, 80195c2 <rcl_get_ros_time+0x16>
 80195b4:	2105      	movs	r1, #5
 80195b6:	f7f7 ff4b 	bl	8011450 <__atomic_load_8>
 80195ba:	e9c4 0100 	strd	r0, r1, [r4]
 80195be:	2000      	movs	r0, #0
 80195c0:	bd10      	pop	{r4, pc}
 80195c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195c6:	4608      	mov	r0, r1
 80195c8:	f7f8 bab6 	b.w	8011b38 <rcutils_system_time_now>

080195cc <rcl_clock_init>:
 80195cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195ce:	4605      	mov	r5, r0
 80195d0:	4610      	mov	r0, r2
 80195d2:	4614      	mov	r4, r2
 80195d4:	460e      	mov	r6, r1
 80195d6:	f7f7 ff2d 	bl	8011434 <rcutils_allocator_is_valid>
 80195da:	b128      	cbz	r0, 80195e8 <rcl_clock_init+0x1c>
 80195dc:	2d03      	cmp	r5, #3
 80195de:	d803      	bhi.n	80195e8 <rcl_clock_init+0x1c>
 80195e0:	e8df f005 	tbb	[pc, r5]
 80195e4:	06532e1d 	.word	0x06532e1d
 80195e8:	f04f 0c0b 	mov.w	ip, #11
 80195ec:	4660      	mov	r0, ip
 80195ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195f0:	2e00      	cmp	r6, #0
 80195f2:	d0f9      	beq.n	80195e8 <rcl_clock_init+0x1c>
 80195f4:	2c00      	cmp	r4, #0
 80195f6:	d0f7      	beq.n	80195e8 <rcl_clock_init+0x1c>
 80195f8:	2300      	movs	r3, #0
 80195fa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80195fe:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80196b4 <rcl_clock_init+0xe8>
 8019602:	6133      	str	r3, [r6, #16]
 8019604:	f106 0514 	add.w	r5, r6, #20
 8019608:	469c      	mov	ip, r3
 801960a:	2703      	movs	r7, #3
 801960c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801960e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019610:	6823      	ldr	r3, [r4, #0]
 8019612:	602b      	str	r3, [r5, #0]
 8019614:	7037      	strb	r7, [r6, #0]
 8019616:	f8c6 e00c 	str.w	lr, [r6, #12]
 801961a:	4660      	mov	r0, ip
 801961c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801961e:	2e00      	cmp	r6, #0
 8019620:	d0e2      	beq.n	80195e8 <rcl_clock_init+0x1c>
 8019622:	2300      	movs	r3, #0
 8019624:	7033      	strb	r3, [r6, #0]
 8019626:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801962a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801962e:	469c      	mov	ip, r3
 8019630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019632:	f106 0514 	add.w	r5, r6, #20
 8019636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019638:	6823      	ldr	r3, [r4, #0]
 801963a:	602b      	str	r3, [r5, #0]
 801963c:	4660      	mov	r0, ip
 801963e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019640:	2e00      	cmp	r6, #0
 8019642:	d0d1      	beq.n	80195e8 <rcl_clock_init+0x1c>
 8019644:	2c00      	cmp	r4, #0
 8019646:	d0cf      	beq.n	80195e8 <rcl_clock_init+0x1c>
 8019648:	2700      	movs	r7, #0
 801964a:	7037      	strb	r7, [r6, #0]
 801964c:	46a4      	mov	ip, r4
 801964e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019652:	f106 0514 	add.w	r5, r6, #20
 8019656:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801965a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801965e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019660:	f8dc 3000 	ldr.w	r3, [ip]
 8019664:	602b      	str	r3, [r5, #0]
 8019666:	6921      	ldr	r1, [r4, #16]
 8019668:	6823      	ldr	r3, [r4, #0]
 801966a:	2010      	movs	r0, #16
 801966c:	4798      	blx	r3
 801966e:	6130      	str	r0, [r6, #16]
 8019670:	b1d0      	cbz	r0, 80196a8 <rcl_clock_init+0xdc>
 8019672:	2200      	movs	r2, #0
 8019674:	2300      	movs	r3, #0
 8019676:	e9c0 2300 	strd	r2, r3, [r0]
 801967a:	2301      	movs	r3, #1
 801967c:	7207      	strb	r7, [r0, #8]
 801967e:	4a0c      	ldr	r2, [pc, #48]	@ (80196b0 <rcl_clock_init+0xe4>)
 8019680:	7033      	strb	r3, [r6, #0]
 8019682:	46bc      	mov	ip, r7
 8019684:	60f2      	str	r2, [r6, #12]
 8019686:	4660      	mov	r0, ip
 8019688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801968a:	2e00      	cmp	r6, #0
 801968c:	d0ac      	beq.n	80195e8 <rcl_clock_init+0x1c>
 801968e:	2c00      	cmp	r4, #0
 8019690:	d0aa      	beq.n	80195e8 <rcl_clock_init+0x1c>
 8019692:	2300      	movs	r3, #0
 8019694:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8019698:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80196b8 <rcl_clock_init+0xec>
 801969c:	6133      	str	r3, [r6, #16]
 801969e:	f106 0514 	add.w	r5, r6, #20
 80196a2:	469c      	mov	ip, r3
 80196a4:	2702      	movs	r7, #2
 80196a6:	e7b1      	b.n	801960c <rcl_clock_init+0x40>
 80196a8:	f04f 0c0a 	mov.w	ip, #10
 80196ac:	e79e      	b.n	80195ec <rcl_clock_init+0x20>
 80196ae:	bf00      	nop
 80196b0:	080195ad 	.word	0x080195ad
 80196b4:	080195a5 	.word	0x080195a5
 80196b8:	0801959d 	.word	0x0801959d

080196bc <rcl_clock_get_now>:
 80196bc:	b140      	cbz	r0, 80196d0 <rcl_clock_get_now+0x14>
 80196be:	b139      	cbz	r1, 80196d0 <rcl_clock_get_now+0x14>
 80196c0:	7803      	ldrb	r3, [r0, #0]
 80196c2:	b11b      	cbz	r3, 80196cc <rcl_clock_get_now+0x10>
 80196c4:	68c3      	ldr	r3, [r0, #12]
 80196c6:	b10b      	cbz	r3, 80196cc <rcl_clock_get_now+0x10>
 80196c8:	6900      	ldr	r0, [r0, #16]
 80196ca:	4718      	bx	r3
 80196cc:	2001      	movs	r0, #1
 80196ce:	4770      	bx	lr
 80196d0:	200b      	movs	r0, #11
 80196d2:	4770      	bx	lr

080196d4 <rcl_clock_add_jump_callback>:
 80196d4:	b082      	sub	sp, #8
 80196d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196da:	a906      	add	r1, sp, #24
 80196dc:	e881 000c 	stmia.w	r1, {r2, r3}
 80196e0:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 80196e4:	b320      	cbz	r0, 8019730 <rcl_clock_add_jump_callback+0x5c>
 80196e6:	4604      	mov	r4, r0
 80196e8:	3014      	adds	r0, #20
 80196ea:	f7f7 fea3 	bl	8011434 <rcutils_allocator_is_valid>
 80196ee:	b1f8      	cbz	r0, 8019730 <rcl_clock_add_jump_callback+0x5c>
 80196f0:	b1f6      	cbz	r6, 8019730 <rcl_clock_add_jump_callback+0x5c>
 80196f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	db1b      	blt.n	8019730 <rcl_clock_add_jump_callback+0x5c>
 80196f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80196fc:	2a01      	cmp	r2, #1
 80196fe:	f173 0300 	sbcs.w	r3, r3, #0
 8019702:	da15      	bge.n	8019730 <rcl_clock_add_jump_callback+0x5c>
 8019704:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8019708:	2f00      	cmp	r7, #0
 801970a:	d042      	beq.n	8019792 <rcl_clock_add_jump_callback+0xbe>
 801970c:	2300      	movs	r3, #0
 801970e:	4602      	mov	r2, r0
 8019710:	e003      	b.n	801971a <rcl_clock_add_jump_callback+0x46>
 8019712:	42bb      	cmp	r3, r7
 8019714:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8019718:	d011      	beq.n	801973e <rcl_clock_add_jump_callback+0x6a>
 801971a:	6811      	ldr	r1, [r2, #0]
 801971c:	42b1      	cmp	r1, r6
 801971e:	f103 0301 	add.w	r3, r3, #1
 8019722:	d1f6      	bne.n	8019712 <rcl_clock_add_jump_callback+0x3e>
 8019724:	6a11      	ldr	r1, [r2, #32]
 8019726:	42a9      	cmp	r1, r5
 8019728:	d1f3      	bne.n	8019712 <rcl_clock_add_jump_callback+0x3e>
 801972a:	f04f 0e01 	mov.w	lr, #1
 801972e:	e001      	b.n	8019734 <rcl_clock_add_jump_callback+0x60>
 8019730:	f04f 0e0b 	mov.w	lr, #11
 8019734:	4670      	mov	r0, lr
 8019736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801973a:	b002      	add	sp, #8
 801973c:	4770      	bx	lr
 801973e:	3301      	adds	r3, #1
 8019740:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019744:	00d9      	lsls	r1, r3, #3
 8019746:	69e3      	ldr	r3, [r4, #28]
 8019748:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801974a:	4798      	blx	r3
 801974c:	b1f0      	cbz	r0, 801978c <rcl_clock_add_jump_callback+0xb8>
 801974e:	68a3      	ldr	r3, [r4, #8]
 8019750:	6060      	str	r0, [r4, #4]
 8019752:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8019756:	f10d 0c18 	add.w	ip, sp, #24
 801975a:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 801975e:	f103 0801 	add.w	r8, r3, #1
 8019762:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8019766:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801976a:	f106 0708 	add.w	r7, r6, #8
 801976e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8019770:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8019774:	f04f 0e00 	mov.w	lr, #0
 8019778:	e887 0003 	stmia.w	r7, {r0, r1}
 801977c:	6235      	str	r5, [r6, #32]
 801977e:	4670      	mov	r0, lr
 8019780:	f8c4 8008 	str.w	r8, [r4, #8]
 8019784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019788:	b002      	add	sp, #8
 801978a:	4770      	bx	lr
 801978c:	f04f 0e0a 	mov.w	lr, #10
 8019790:	e7d0      	b.n	8019734 <rcl_clock_add_jump_callback+0x60>
 8019792:	2128      	movs	r1, #40	@ 0x28
 8019794:	e7d7      	b.n	8019746 <rcl_clock_add_jump_callback+0x72>
 8019796:	bf00      	nop

08019798 <rcl_clock_remove_jump_callback>:
 8019798:	2800      	cmp	r0, #0
 801979a:	d057      	beq.n	801984c <rcl_clock_remove_jump_callback+0xb4>
 801979c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197a0:	4605      	mov	r5, r0
 80197a2:	3014      	adds	r0, #20
 80197a4:	4688      	mov	r8, r1
 80197a6:	4692      	mov	sl, r2
 80197a8:	f7f7 fe44 	bl	8011434 <rcutils_allocator_is_valid>
 80197ac:	2800      	cmp	r0, #0
 80197ae:	d03b      	beq.n	8019828 <rcl_clock_remove_jump_callback+0x90>
 80197b0:	f1b8 0f00 	cmp.w	r8, #0
 80197b4:	d038      	beq.n	8019828 <rcl_clock_remove_jump_callback+0x90>
 80197b6:	68ae      	ldr	r6, [r5, #8]
 80197b8:	b166      	cbz	r6, 80197d4 <rcl_clock_remove_jump_callback+0x3c>
 80197ba:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80197be:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 80197c2:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 80197c6:	464c      	mov	r4, r9
 80197c8:	6823      	ldr	r3, [r4, #0]
 80197ca:	4543      	cmp	r3, r8
 80197cc:	d005      	beq.n	80197da <rcl_clock_remove_jump_callback+0x42>
 80197ce:	3428      	adds	r4, #40	@ 0x28
 80197d0:	42a7      	cmp	r7, r4
 80197d2:	d1f9      	bne.n	80197c8 <rcl_clock_remove_jump_callback+0x30>
 80197d4:	2001      	movs	r0, #1
 80197d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197da:	6a23      	ldr	r3, [r4, #32]
 80197dc:	3428      	adds	r4, #40	@ 0x28
 80197de:	42bc      	cmp	r4, r7
 80197e0:	d02d      	beq.n	801983e <rcl_clock_remove_jump_callback+0xa6>
 80197e2:	4553      	cmp	r3, sl
 80197e4:	d1f0      	bne.n	80197c8 <rcl_clock_remove_jump_callback+0x30>
 80197e6:	46a6      	mov	lr, r4
 80197e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80197ec:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80197f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80197f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80197f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80197fc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8019800:	3428      	adds	r4, #40	@ 0x28
 8019802:	42a7      	cmp	r7, r4
 8019804:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019808:	d1ed      	bne.n	80197e6 <rcl_clock_remove_jump_callback+0x4e>
 801980a:	3e01      	subs	r6, #1
 801980c:	60ae      	str	r6, [r5, #8]
 801980e:	b176      	cbz	r6, 801982e <rcl_clock_remove_jump_callback+0x96>
 8019810:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8019814:	69eb      	ldr	r3, [r5, #28]
 8019816:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8019818:	00f1      	lsls	r1, r6, #3
 801981a:	4648      	mov	r0, r9
 801981c:	4798      	blx	r3
 801981e:	b1b8      	cbz	r0, 8019850 <rcl_clock_remove_jump_callback+0xb8>
 8019820:	6068      	str	r0, [r5, #4]
 8019822:	2000      	movs	r0, #0
 8019824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019828:	200b      	movs	r0, #11
 801982a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801982e:	4648      	mov	r0, r9
 8019830:	69ab      	ldr	r3, [r5, #24]
 8019832:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8019834:	4798      	blx	r3
 8019836:	606e      	str	r6, [r5, #4]
 8019838:	4630      	mov	r0, r6
 801983a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801983e:	4553      	cmp	r3, sl
 8019840:	d1c8      	bne.n	80197d4 <rcl_clock_remove_jump_callback+0x3c>
 8019842:	3e01      	subs	r6, #1
 8019844:	60ae      	str	r6, [r5, #8]
 8019846:	2e00      	cmp	r6, #0
 8019848:	d1e2      	bne.n	8019810 <rcl_clock_remove_jump_callback+0x78>
 801984a:	e7f0      	b.n	801982e <rcl_clock_remove_jump_callback+0x96>
 801984c:	200b      	movs	r0, #11
 801984e:	4770      	bx	lr
 8019850:	200a      	movs	r0, #10
 8019852:	e7ea      	b.n	801982a <rcl_clock_remove_jump_callback+0x92>

08019854 <_rcl_timer_time_jump>:
 8019854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019858:	4605      	mov	r5, r0
 801985a:	b084      	sub	sp, #16
 801985c:	4614      	mov	r4, r2
 801985e:	b131      	cbz	r1, 801986e <_rcl_timer_time_jump+0x1a>
 8019860:	7803      	ldrb	r3, [r0, #0]
 8019862:	3b02      	subs	r3, #2
 8019864:	2b01      	cmp	r3, #1
 8019866:	d93f      	bls.n	80198e8 <_rcl_timer_time_jump+0x94>
 8019868:	b004      	add	sp, #16
 801986a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801986e:	6813      	ldr	r3, [r2, #0]
 8019870:	a902      	add	r1, sp, #8
 8019872:	6818      	ldr	r0, [r3, #0]
 8019874:	f7ff ff22 	bl	80196bc <rcl_clock_get_now>
 8019878:	2800      	cmp	r0, #0
 801987a:	d1f5      	bne.n	8019868 <_rcl_timer_time_jump+0x14>
 801987c:	6820      	ldr	r0, [r4, #0]
 801987e:	2105      	movs	r1, #5
 8019880:	3020      	adds	r0, #32
 8019882:	f7f7 fde5 	bl	8011450 <__atomic_load_8>
 8019886:	6823      	ldr	r3, [r4, #0]
 8019888:	4681      	mov	r9, r0
 801988a:	4688      	mov	r8, r1
 801988c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8019890:	2105      	movs	r1, #5
 8019892:	f7f7 fddd 	bl	8011450 <__atomic_load_8>
 8019896:	4607      	mov	r7, r0
 8019898:	6820      	ldr	r0, [r4, #0]
 801989a:	460e      	mov	r6, r1
 801989c:	3018      	adds	r0, #24
 801989e:	2105      	movs	r1, #5
 80198a0:	f7f7 fdd6 	bl	8011450 <__atomic_load_8>
 80198a4:	782b      	ldrb	r3, [r5, #0]
 80198a6:	9a02      	ldr	r2, [sp, #8]
 80198a8:	3b02      	subs	r3, #2
 80198aa:	2b01      	cmp	r3, #1
 80198ac:	460d      	mov	r5, r1
 80198ae:	9b03      	ldr	r3, [sp, #12]
 80198b0:	4682      	mov	sl, r0
 80198b2:	d937      	bls.n	8019924 <_rcl_timer_time_jump+0xd0>
 80198b4:	42ba      	cmp	r2, r7
 80198b6:	eb73 0106 	sbcs.w	r1, r3, r6
 80198ba:	da5f      	bge.n	801997c <_rcl_timer_time_jump+0x128>
 80198bc:	454a      	cmp	r2, r9
 80198be:	eb73 0108 	sbcs.w	r1, r3, r8
 80198c2:	dad1      	bge.n	8019868 <_rcl_timer_time_jump+0x14>
 80198c4:	6820      	ldr	r0, [r4, #0]
 80198c6:	eb1a 0202 	adds.w	r2, sl, r2
 80198ca:	eb43 0305 	adc.w	r3, r3, r5
 80198ce:	2505      	movs	r5, #5
 80198d0:	3028      	adds	r0, #40	@ 0x28
 80198d2:	9500      	str	r5, [sp, #0]
 80198d4:	f7f7 fdf2 	bl	80114bc <__atomic_store_8>
 80198d8:	6820      	ldr	r0, [r4, #0]
 80198da:	9500      	str	r5, [sp, #0]
 80198dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80198e0:	3020      	adds	r0, #32
 80198e2:	f7f7 fdeb 	bl	80114bc <__atomic_store_8>
 80198e6:	e7bf      	b.n	8019868 <_rcl_timer_time_jump+0x14>
 80198e8:	6813      	ldr	r3, [r2, #0]
 80198ea:	a902      	add	r1, sp, #8
 80198ec:	6818      	ldr	r0, [r3, #0]
 80198ee:	f7ff fee5 	bl	80196bc <rcl_clock_get_now>
 80198f2:	2800      	cmp	r0, #0
 80198f4:	d1b8      	bne.n	8019868 <_rcl_timer_time_jump+0x14>
 80198f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80198fa:	4313      	orrs	r3, r2
 80198fc:	d0b4      	beq.n	8019868 <_rcl_timer_time_jump+0x14>
 80198fe:	6820      	ldr	r0, [r4, #0]
 8019900:	2105      	movs	r1, #5
 8019902:	3028      	adds	r0, #40	@ 0x28
 8019904:	f7f7 fda4 	bl	8011450 <__atomic_load_8>
 8019908:	9d02      	ldr	r5, [sp, #8]
 801990a:	9b03      	ldr	r3, [sp, #12]
 801990c:	4602      	mov	r2, r0
 801990e:	6820      	ldr	r0, [r4, #0]
 8019910:	1b52      	subs	r2, r2, r5
 8019912:	f04f 0405 	mov.w	r4, #5
 8019916:	9400      	str	r4, [sp, #0]
 8019918:	eb61 0303 	sbc.w	r3, r1, r3
 801991c:	3030      	adds	r0, #48	@ 0x30
 801991e:	f7f7 fdcd 	bl	80114bc <__atomic_store_8>
 8019922:	e7a1      	b.n	8019868 <_rcl_timer_time_jump+0x14>
 8019924:	4313      	orrs	r3, r2
 8019926:	d09f      	beq.n	8019868 <_rcl_timer_time_jump+0x14>
 8019928:	6820      	ldr	r0, [r4, #0]
 801992a:	f04f 0805 	mov.w	r8, #5
 801992e:	2300      	movs	r3, #0
 8019930:	f8cd 8000 	str.w	r8, [sp]
 8019934:	3030      	adds	r0, #48	@ 0x30
 8019936:	2200      	movs	r2, #0
 8019938:	f7f7 fdf6 	bl	8011528 <__atomic_exchange_8>
 801993c:	ea51 0300 	orrs.w	r3, r1, r0
 8019940:	4606      	mov	r6, r0
 8019942:	460f      	mov	r7, r1
 8019944:	d090      	beq.n	8019868 <_rcl_timer_time_jump+0x14>
 8019946:	9a02      	ldr	r2, [sp, #8]
 8019948:	9b03      	ldr	r3, [sp, #12]
 801994a:	f8cd 8000 	str.w	r8, [sp]
 801994e:	1a12      	subs	r2, r2, r0
 8019950:	6820      	ldr	r0, [r4, #0]
 8019952:	eb63 0301 	sbc.w	r3, r3, r1
 8019956:	eb12 020a 	adds.w	r2, r2, sl
 801995a:	eb43 0305 	adc.w	r3, r3, r5
 801995e:	3028      	adds	r0, #40	@ 0x28
 8019960:	f7f7 fdac 	bl	80114bc <__atomic_store_8>
 8019964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019968:	f8cd 8000 	str.w	r8, [sp]
 801996c:	6820      	ldr	r0, [r4, #0]
 801996e:	1b92      	subs	r2, r2, r6
 8019970:	eb63 0307 	sbc.w	r3, r3, r7
 8019974:	3020      	adds	r0, #32
 8019976:	f7f7 fda1 	bl	80114bc <__atomic_store_8>
 801997a:	e775      	b.n	8019868 <_rcl_timer_time_jump+0x14>
 801997c:	6820      	ldr	r0, [r4, #0]
 801997e:	3008      	adds	r0, #8
 8019980:	f7ff fa52 	bl	8018e28 <rcl_trigger_guard_condition>
 8019984:	e770      	b.n	8019868 <_rcl_timer_time_jump+0x14>
 8019986:	bf00      	nop

08019988 <rcl_get_zero_initialized_timer>:
 8019988:	4b01      	ldr	r3, [pc, #4]	@ (8019990 <rcl_get_zero_initialized_timer+0x8>)
 801998a:	6818      	ldr	r0, [r3, #0]
 801998c:	4770      	bx	lr
 801998e:	bf00      	nop
 8019990:	08020988 	.word	0x08020988
 8019994:	00000000 	.word	0x00000000

08019998 <rcl_timer_init>:
 8019998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801999c:	b0aa      	sub	sp, #168	@ 0xa8
 801999e:	4604      	mov	r4, r0
 80199a0:	a835      	add	r0, sp, #212	@ 0xd4
 80199a2:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 80199a6:	460d      	mov	r5, r1
 80199a8:	4692      	mov	sl, r2
 80199aa:	f7f7 fd43 	bl	8011434 <rcutils_allocator_is_valid>
 80199ae:	2800      	cmp	r0, #0
 80199b0:	d064      	beq.n	8019a7c <rcl_timer_init+0xe4>
 80199b2:	2c00      	cmp	r4, #0
 80199b4:	d062      	beq.n	8019a7c <rcl_timer_init+0xe4>
 80199b6:	2d00      	cmp	r5, #0
 80199b8:	d060      	beq.n	8019a7c <rcl_timer_init+0xe4>
 80199ba:	2f00      	cmp	r7, #0
 80199bc:	db5e      	blt.n	8019a7c <rcl_timer_init+0xe4>
 80199be:	6823      	ldr	r3, [r4, #0]
 80199c0:	b123      	cbz	r3, 80199cc <rcl_timer_init+0x34>
 80199c2:	2664      	movs	r6, #100	@ 0x64
 80199c4:	4630      	mov	r0, r6
 80199c6:	b02a      	add	sp, #168	@ 0xa8
 80199c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199cc:	a908      	add	r1, sp, #32
 80199ce:	4628      	mov	r0, r5
 80199d0:	f7ff fe74 	bl	80196bc <rcl_clock_get_now>
 80199d4:	4606      	mov	r6, r0
 80199d6:	2800      	cmp	r0, #0
 80199d8:	d1f4      	bne.n	80199c4 <rcl_timer_init+0x2c>
 80199da:	ae06      	add	r6, sp, #24
 80199dc:	4630      	mov	r0, r6
 80199de:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 80199e2:	f7ff f929 	bl	8018c38 <rcl_get_zero_initialized_guard_condition>
 80199e6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80199ea:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 80199ee:	ae0b      	add	r6, sp, #44	@ 0x2c
 80199f0:	e889 0003 	stmia.w	r9, {r0, r1}
 80199f4:	4630      	mov	r0, r6
 80199f6:	f7ff f9fb 	bl	8018df0 <rcl_guard_condition_get_default_options>
 80199fa:	ab0d      	add	r3, sp, #52	@ 0x34
 80199fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019a00:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019a04:	4651      	mov	r1, sl
 8019a06:	e896 000c 	ldmia.w	r6, {r2, r3}
 8019a0a:	4648      	mov	r0, r9
 8019a0c:	f7ff f91e 	bl	8018c4c <rcl_guard_condition_init>
 8019a10:	4606      	mov	r6, r0
 8019a12:	2800      	cmp	r0, #0
 8019a14:	d1d6      	bne.n	80199c4 <rcl_timer_init+0x2c>
 8019a16:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8019a18:	781b      	ldrb	r3, [r3, #0]
 8019a1a:	2b01      	cmp	r3, #1
 8019a1c:	d033      	beq.n	8019a86 <rcl_timer_init+0xee>
 8019a1e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8019a20:	911a      	str	r1, [sp, #104]	@ 0x68
 8019a22:	4642      	mov	r2, r8
 8019a24:	463b      	mov	r3, r7
 8019a26:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8019a2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019a2e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8019ae0 <rcl_timer_init+0x148>
 8019a32:	eb12 0008 	adds.w	r0, r2, r8
 8019a36:	eb47 0103 	adc.w	r1, r7, r3
 8019a3a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8019a3e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8019a42:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8019a46:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8019a4a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019a4e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8019a52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019a56:	f8de 3000 	ldr.w	r3, [lr]
 8019a5a:	f8cc 3000 	str.w	r3, [ip]
 8019a5e:	f04f 0a00 	mov.w	sl, #0
 8019a62:	4619      	mov	r1, r3
 8019a64:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8019a68:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8019a6a:	2050      	movs	r0, #80	@ 0x50
 8019a6c:	4798      	blx	r3
 8019a6e:	6020      	str	r0, [r4, #0]
 8019a70:	b358      	cbz	r0, 8019aca <rcl_timer_init+0x132>
 8019a72:	2250      	movs	r2, #80	@ 0x50
 8019a74:	a916      	add	r1, sp, #88	@ 0x58
 8019a76:	f003 ff1c 	bl	801d8b2 <memcpy>
 8019a7a:	e7a3      	b.n	80199c4 <rcl_timer_init+0x2c>
 8019a7c:	260b      	movs	r6, #11
 8019a7e:	4630      	mov	r0, r6
 8019a80:	b02a      	add	sp, #168	@ 0xa8
 8019a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a86:	2001      	movs	r0, #1
 8019a88:	2100      	movs	r1, #0
 8019a8a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8019a8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019a92:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8019a96:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8019a9a:	4a13      	ldr	r2, [pc, #76]	@ (8019ae8 <rcl_timer_init+0x150>)
 8019a9c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8019aa0:	9405      	str	r4, [sp, #20]
 8019aa2:	9204      	str	r2, [sp, #16]
 8019aa4:	ab12      	add	r3, sp, #72	@ 0x48
 8019aa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019aa8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8019aac:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8019ab0:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8019ab4:	4628      	mov	r0, r5
 8019ab6:	f7ff fe0d 	bl	80196d4 <rcl_clock_add_jump_callback>
 8019aba:	4682      	mov	sl, r0
 8019abc:	2800      	cmp	r0, #0
 8019abe:	d0ae      	beq.n	8019a1e <rcl_timer_init+0x86>
 8019ac0:	4648      	mov	r0, r9
 8019ac2:	f7ff f96f 	bl	8018da4 <rcl_guard_condition_fini>
 8019ac6:	4656      	mov	r6, sl
 8019ac8:	e77c      	b.n	80199c4 <rcl_timer_init+0x2c>
 8019aca:	4648      	mov	r0, r9
 8019acc:	f7ff f96a 	bl	8018da4 <rcl_guard_condition_fini>
 8019ad0:	4905      	ldr	r1, [pc, #20]	@ (8019ae8 <rcl_timer_init+0x150>)
 8019ad2:	4622      	mov	r2, r4
 8019ad4:	4628      	mov	r0, r5
 8019ad6:	f7ff fe5f 	bl	8019798 <rcl_clock_remove_jump_callback>
 8019ada:	260a      	movs	r6, #10
 8019adc:	e772      	b.n	80199c4 <rcl_timer_init+0x2c>
 8019ade:	bf00      	nop
	...
 8019ae8:	08019855 	.word	0x08019855

08019aec <rcl_timer_call>:
 8019aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019af0:	b087      	sub	sp, #28
 8019af2:	2800      	cmp	r0, #0
 8019af4:	d06d      	beq.n	8019bd2 <rcl_timer_call+0xe6>
 8019af6:	6803      	ldr	r3, [r0, #0]
 8019af8:	4604      	mov	r4, r0
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d063      	beq.n	8019bc6 <rcl_timer_call+0xda>
 8019afe:	f3bf 8f5b 	dmb	ish
 8019b02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019b06:	f3bf 8f5b 	dmb	ish
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d150      	bne.n	8019bb0 <rcl_timer_call+0xc4>
 8019b0e:	6803      	ldr	r3, [r0, #0]
 8019b10:	a904      	add	r1, sp, #16
 8019b12:	6818      	ldr	r0, [r3, #0]
 8019b14:	f7ff fdd2 	bl	80196bc <rcl_clock_get_now>
 8019b18:	4605      	mov	r5, r0
 8019b1a:	2800      	cmp	r0, #0
 8019b1c:	d14a      	bne.n	8019bb4 <rcl_timer_call+0xc8>
 8019b1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	db4a      	blt.n	8019bbc <rcl_timer_call+0xd0>
 8019b26:	6820      	ldr	r0, [r4, #0]
 8019b28:	f04f 0a05 	mov.w	sl, #5
 8019b2c:	f8cd a000 	str.w	sl, [sp]
 8019b30:	3020      	adds	r0, #32
 8019b32:	f7f7 fcf9 	bl	8011528 <__atomic_exchange_8>
 8019b36:	6823      	ldr	r3, [r4, #0]
 8019b38:	f3bf 8f5b 	dmb	ish
 8019b3c:	4680      	mov	r8, r0
 8019b3e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8019b42:	f3bf 8f5b 	dmb	ish
 8019b46:	6820      	ldr	r0, [r4, #0]
 8019b48:	4689      	mov	r9, r1
 8019b4a:	3028      	adds	r0, #40	@ 0x28
 8019b4c:	4651      	mov	r1, sl
 8019b4e:	f7f7 fc7f 	bl	8011450 <__atomic_load_8>
 8019b52:	4606      	mov	r6, r0
 8019b54:	6820      	ldr	r0, [r4, #0]
 8019b56:	460f      	mov	r7, r1
 8019b58:	3018      	adds	r0, #24
 8019b5a:	4651      	mov	r1, sl
 8019b5c:	f7f7 fc78 	bl	8011450 <__atomic_load_8>
 8019b60:	1836      	adds	r6, r6, r0
 8019b62:	4602      	mov	r2, r0
 8019b64:	4682      	mov	sl, r0
 8019b66:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8019b6a:	eb47 0701 	adc.w	r7, r7, r1
 8019b6e:	4286      	cmp	r6, r0
 8019b70:	460b      	mov	r3, r1
 8019b72:	eb77 010c 	sbcs.w	r1, r7, ip
 8019b76:	da04      	bge.n	8019b82 <rcl_timer_call+0x96>
 8019b78:	ea53 0102 	orrs.w	r1, r3, r2
 8019b7c:	d12e      	bne.n	8019bdc <rcl_timer_call+0xf0>
 8019b7e:	4606      	mov	r6, r0
 8019b80:	4667      	mov	r7, ip
 8019b82:	6820      	ldr	r0, [r4, #0]
 8019b84:	2105      	movs	r1, #5
 8019b86:	4632      	mov	r2, r6
 8019b88:	463b      	mov	r3, r7
 8019b8a:	3028      	adds	r0, #40	@ 0x28
 8019b8c:	9100      	str	r1, [sp, #0]
 8019b8e:	f7f7 fc95 	bl	80114bc <__atomic_store_8>
 8019b92:	f1bb 0f00 	cmp.w	fp, #0
 8019b96:	d00d      	beq.n	8019bb4 <rcl_timer_call+0xc8>
 8019b98:	9a04      	ldr	r2, [sp, #16]
 8019b9a:	9b05      	ldr	r3, [sp, #20]
 8019b9c:	ebb2 0208 	subs.w	r2, r2, r8
 8019ba0:	4620      	mov	r0, r4
 8019ba2:	eb63 0309 	sbc.w	r3, r3, r9
 8019ba6:	47d8      	blx	fp
 8019ba8:	4628      	mov	r0, r5
 8019baa:	b007      	add	sp, #28
 8019bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bb0:	f240 3521 	movw	r5, #801	@ 0x321
 8019bb4:	4628      	mov	r0, r5
 8019bb6:	b007      	add	sp, #28
 8019bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bbc:	2501      	movs	r5, #1
 8019bbe:	4628      	mov	r0, r5
 8019bc0:	b007      	add	sp, #28
 8019bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bc6:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8019bca:	4628      	mov	r0, r5
 8019bcc:	b007      	add	sp, #28
 8019bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bd2:	250b      	movs	r5, #11
 8019bd4:	4628      	mov	r0, r5
 8019bd6:	b007      	add	sp, #28
 8019bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bdc:	1b80      	subs	r0, r0, r6
 8019bde:	eb6c 0107 	sbc.w	r1, ip, r7
 8019be2:	3801      	subs	r0, #1
 8019be4:	f161 0100 	sbc.w	r1, r1, #0
 8019be8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8019bec:	f7e6 ffec 	bl	8000bc8 <__aeabi_ldivmod>
 8019bf0:	9b02      	ldr	r3, [sp, #8]
 8019bf2:	3001      	adds	r0, #1
 8019bf4:	f141 0100 	adc.w	r1, r1, #0
 8019bf8:	fb00 f303 	mul.w	r3, r0, r3
 8019bfc:	fb01 330a 	mla	r3, r1, sl, r3
 8019c00:	fba0 0a0a 	umull	r0, sl, r0, sl
 8019c04:	1986      	adds	r6, r0, r6
 8019c06:	4453      	add	r3, sl
 8019c08:	eb43 0707 	adc.w	r7, r3, r7
 8019c0c:	e7b9      	b.n	8019b82 <rcl_timer_call+0x96>
 8019c0e:	bf00      	nop

08019c10 <rcl_timer_is_ready>:
 8019c10:	b570      	push	{r4, r5, r6, lr}
 8019c12:	b082      	sub	sp, #8
 8019c14:	b378      	cbz	r0, 8019c76 <rcl_timer_is_ready+0x66>
 8019c16:	6803      	ldr	r3, [r0, #0]
 8019c18:	4604      	mov	r4, r0
 8019c1a:	b383      	cbz	r3, 8019c7e <rcl_timer_is_ready+0x6e>
 8019c1c:	460d      	mov	r5, r1
 8019c1e:	b351      	cbz	r1, 8019c76 <rcl_timer_is_ready+0x66>
 8019c20:	f3bf 8f5b 	dmb	ish
 8019c24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019c28:	f3bf 8f5b 	dmb	ish
 8019c2c:	b953      	cbnz	r3, 8019c44 <rcl_timer_is_ready+0x34>
 8019c2e:	6803      	ldr	r3, [r0, #0]
 8019c30:	4669      	mov	r1, sp
 8019c32:	6818      	ldr	r0, [r3, #0]
 8019c34:	f7ff fd42 	bl	80196bc <rcl_clock_get_now>
 8019c38:	4606      	mov	r6, r0
 8019c3a:	b140      	cbz	r0, 8019c4e <rcl_timer_is_ready+0x3e>
 8019c3c:	f240 3321 	movw	r3, #801	@ 0x321
 8019c40:	4298      	cmp	r0, r3
 8019c42:	d101      	bne.n	8019c48 <rcl_timer_is_ready+0x38>
 8019c44:	2600      	movs	r6, #0
 8019c46:	702e      	strb	r6, [r5, #0]
 8019c48:	4630      	mov	r0, r6
 8019c4a:	b002      	add	sp, #8
 8019c4c:	bd70      	pop	{r4, r5, r6, pc}
 8019c4e:	6820      	ldr	r0, [r4, #0]
 8019c50:	2105      	movs	r1, #5
 8019c52:	3028      	adds	r0, #40	@ 0x28
 8019c54:	f7f7 fbfc 	bl	8011450 <__atomic_load_8>
 8019c58:	9b00      	ldr	r3, [sp, #0]
 8019c5a:	1ac0      	subs	r0, r0, r3
 8019c5c:	9b01      	ldr	r3, [sp, #4]
 8019c5e:	eb61 0103 	sbc.w	r1, r1, r3
 8019c62:	2801      	cmp	r0, #1
 8019c64:	f171 0300 	sbcs.w	r3, r1, #0
 8019c68:	bfb4      	ite	lt
 8019c6a:	2301      	movlt	r3, #1
 8019c6c:	2300      	movge	r3, #0
 8019c6e:	4630      	mov	r0, r6
 8019c70:	702b      	strb	r3, [r5, #0]
 8019c72:	b002      	add	sp, #8
 8019c74:	bd70      	pop	{r4, r5, r6, pc}
 8019c76:	260b      	movs	r6, #11
 8019c78:	4630      	mov	r0, r6
 8019c7a:	b002      	add	sp, #8
 8019c7c:	bd70      	pop	{r4, r5, r6, pc}
 8019c7e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8019c82:	e7e1      	b.n	8019c48 <rcl_timer_is_ready+0x38>

08019c84 <rcl_timer_get_time_until_next_call>:
 8019c84:	b570      	push	{r4, r5, r6, lr}
 8019c86:	b082      	sub	sp, #8
 8019c88:	b330      	cbz	r0, 8019cd8 <rcl_timer_get_time_until_next_call+0x54>
 8019c8a:	6803      	ldr	r3, [r0, #0]
 8019c8c:	4604      	mov	r4, r0
 8019c8e:	b33b      	cbz	r3, 8019ce0 <rcl_timer_get_time_until_next_call+0x5c>
 8019c90:	460d      	mov	r5, r1
 8019c92:	b309      	cbz	r1, 8019cd8 <rcl_timer_get_time_until_next_call+0x54>
 8019c94:	f3bf 8f5b 	dmb	ish
 8019c98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019c9c:	f3bf 8f5b 	dmb	ish
 8019ca0:	b9ab      	cbnz	r3, 8019cce <rcl_timer_get_time_until_next_call+0x4a>
 8019ca2:	6803      	ldr	r3, [r0, #0]
 8019ca4:	4669      	mov	r1, sp
 8019ca6:	6818      	ldr	r0, [r3, #0]
 8019ca8:	f7ff fd08 	bl	80196bc <rcl_clock_get_now>
 8019cac:	4606      	mov	r6, r0
 8019cae:	b958      	cbnz	r0, 8019cc8 <rcl_timer_get_time_until_next_call+0x44>
 8019cb0:	6820      	ldr	r0, [r4, #0]
 8019cb2:	2105      	movs	r1, #5
 8019cb4:	3028      	adds	r0, #40	@ 0x28
 8019cb6:	f7f7 fbcb 	bl	8011450 <__atomic_load_8>
 8019cba:	9b00      	ldr	r3, [sp, #0]
 8019cbc:	1ac0      	subs	r0, r0, r3
 8019cbe:	9b01      	ldr	r3, [sp, #4]
 8019cc0:	6028      	str	r0, [r5, #0]
 8019cc2:	eb61 0103 	sbc.w	r1, r1, r3
 8019cc6:	6069      	str	r1, [r5, #4]
 8019cc8:	4630      	mov	r0, r6
 8019cca:	b002      	add	sp, #8
 8019ccc:	bd70      	pop	{r4, r5, r6, pc}
 8019cce:	f240 3621 	movw	r6, #801	@ 0x321
 8019cd2:	4630      	mov	r0, r6
 8019cd4:	b002      	add	sp, #8
 8019cd6:	bd70      	pop	{r4, r5, r6, pc}
 8019cd8:	260b      	movs	r6, #11
 8019cda:	4630      	mov	r0, r6
 8019cdc:	b002      	add	sp, #8
 8019cde:	bd70      	pop	{r4, r5, r6, pc}
 8019ce0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8019ce4:	e7f0      	b.n	8019cc8 <rcl_timer_get_time_until_next_call+0x44>
 8019ce6:	bf00      	nop

08019ce8 <rcl_timer_get_guard_condition>:
 8019ce8:	b130      	cbz	r0, 8019cf8 <rcl_timer_get_guard_condition+0x10>
 8019cea:	6800      	ldr	r0, [r0, #0]
 8019cec:	b120      	cbz	r0, 8019cf8 <rcl_timer_get_guard_condition+0x10>
 8019cee:	68c3      	ldr	r3, [r0, #12]
 8019cf0:	b10b      	cbz	r3, 8019cf6 <rcl_timer_get_guard_condition+0xe>
 8019cf2:	3008      	adds	r0, #8
 8019cf4:	4770      	bx	lr
 8019cf6:	4618      	mov	r0, r3
 8019cf8:	4770      	bx	lr
 8019cfa:	bf00      	nop

08019cfc <rcl_validate_enclave_name_with_size>:
 8019cfc:	b378      	cbz	r0, 8019d5e <rcl_validate_enclave_name_with_size+0x62>
 8019cfe:	b570      	push	{r4, r5, r6, lr}
 8019d00:	4615      	mov	r5, r2
 8019d02:	b0c2      	sub	sp, #264	@ 0x108
 8019d04:	b302      	cbz	r2, 8019d48 <rcl_validate_enclave_name_with_size+0x4c>
 8019d06:	461e      	mov	r6, r3
 8019d08:	466a      	mov	r2, sp
 8019d0a:	ab01      	add	r3, sp, #4
 8019d0c:	460c      	mov	r4, r1
 8019d0e:	f7f7 fff1 	bl	8011cf4 <rmw_validate_namespace_with_size>
 8019d12:	4684      	mov	ip, r0
 8019d14:	b9e8      	cbnz	r0, 8019d52 <rcl_validate_enclave_name_with_size+0x56>
 8019d16:	9b00      	ldr	r3, [sp, #0]
 8019d18:	b923      	cbnz	r3, 8019d24 <rcl_validate_enclave_name_with_size+0x28>
 8019d1a:	2300      	movs	r3, #0
 8019d1c:	602b      	str	r3, [r5, #0]
 8019d1e:	4660      	mov	r0, ip
 8019d20:	b042      	add	sp, #264	@ 0x108
 8019d22:	bd70      	pop	{r4, r5, r6, pc}
 8019d24:	2b07      	cmp	r3, #7
 8019d26:	d007      	beq.n	8019d38 <rcl_validate_enclave_name_with_size+0x3c>
 8019d28:	1e5a      	subs	r2, r3, #1
 8019d2a:	2a05      	cmp	r2, #5
 8019d2c:	d833      	bhi.n	8019d96 <rcl_validate_enclave_name_with_size+0x9a>
 8019d2e:	e8df f002 	tbb	[pc, r2]
 8019d32:	2c2f      	.short	0x2c2f
 8019d34:	1a232629 	.word	0x1a232629
 8019d38:	2cff      	cmp	r4, #255	@ 0xff
 8019d3a:	d9ee      	bls.n	8019d1a <rcl_validate_enclave_name_with_size+0x1e>
 8019d3c:	602b      	str	r3, [r5, #0]
 8019d3e:	2e00      	cmp	r6, #0
 8019d40:	d0ed      	beq.n	8019d1e <rcl_validate_enclave_name_with_size+0x22>
 8019d42:	23fe      	movs	r3, #254	@ 0xfe
 8019d44:	6033      	str	r3, [r6, #0]
 8019d46:	e7ea      	b.n	8019d1e <rcl_validate_enclave_name_with_size+0x22>
 8019d48:	f04f 0c0b 	mov.w	ip, #11
 8019d4c:	4660      	mov	r0, ip
 8019d4e:	b042      	add	sp, #264	@ 0x108
 8019d50:	bd70      	pop	{r4, r5, r6, pc}
 8019d52:	f7fe fd89 	bl	8018868 <rcl_convert_rmw_ret_to_rcl_ret>
 8019d56:	4684      	mov	ip, r0
 8019d58:	4660      	mov	r0, ip
 8019d5a:	b042      	add	sp, #264	@ 0x108
 8019d5c:	bd70      	pop	{r4, r5, r6, pc}
 8019d5e:	f04f 0c0b 	mov.w	ip, #11
 8019d62:	4660      	mov	r0, ip
 8019d64:	4770      	bx	lr
 8019d66:	2306      	movs	r3, #6
 8019d68:	602b      	str	r3, [r5, #0]
 8019d6a:	2e00      	cmp	r6, #0
 8019d6c:	d0d7      	beq.n	8019d1e <rcl_validate_enclave_name_with_size+0x22>
 8019d6e:	9b01      	ldr	r3, [sp, #4]
 8019d70:	6033      	str	r3, [r6, #0]
 8019d72:	4660      	mov	r0, ip
 8019d74:	b042      	add	sp, #264	@ 0x108
 8019d76:	bd70      	pop	{r4, r5, r6, pc}
 8019d78:	2305      	movs	r3, #5
 8019d7a:	602b      	str	r3, [r5, #0]
 8019d7c:	e7f5      	b.n	8019d6a <rcl_validate_enclave_name_with_size+0x6e>
 8019d7e:	2304      	movs	r3, #4
 8019d80:	602b      	str	r3, [r5, #0]
 8019d82:	e7f2      	b.n	8019d6a <rcl_validate_enclave_name_with_size+0x6e>
 8019d84:	2303      	movs	r3, #3
 8019d86:	602b      	str	r3, [r5, #0]
 8019d88:	e7ef      	b.n	8019d6a <rcl_validate_enclave_name_with_size+0x6e>
 8019d8a:	2302      	movs	r3, #2
 8019d8c:	602b      	str	r3, [r5, #0]
 8019d8e:	e7ec      	b.n	8019d6a <rcl_validate_enclave_name_with_size+0x6e>
 8019d90:	2301      	movs	r3, #1
 8019d92:	602b      	str	r3, [r5, #0]
 8019d94:	e7e9      	b.n	8019d6a <rcl_validate_enclave_name_with_size+0x6e>
 8019d96:	4a04      	ldr	r2, [pc, #16]	@ (8019da8 <rcl_validate_enclave_name_with_size+0xac>)
 8019d98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019d9c:	a802      	add	r0, sp, #8
 8019d9e:	f7f7 fd35 	bl	801180c <rcutils_snprintf>
 8019da2:	f04f 0c01 	mov.w	ip, #1
 8019da6:	e7ba      	b.n	8019d1e <rcl_validate_enclave_name_with_size+0x22>
 8019da8:	0802098c 	.word	0x0802098c

08019dac <rcl_validate_enclave_name>:
 8019dac:	b168      	cbz	r0, 8019dca <rcl_validate_enclave_name+0x1e>
 8019dae:	b570      	push	{r4, r5, r6, lr}
 8019db0:	460d      	mov	r5, r1
 8019db2:	4616      	mov	r6, r2
 8019db4:	4604      	mov	r4, r0
 8019db6:	f7e6 fa3d 	bl	8000234 <strlen>
 8019dba:	4633      	mov	r3, r6
 8019dbc:	4601      	mov	r1, r0
 8019dbe:	462a      	mov	r2, r5
 8019dc0:	4620      	mov	r0, r4
 8019dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019dc6:	f7ff bf99 	b.w	8019cfc <rcl_validate_enclave_name_with_size>
 8019dca:	200b      	movs	r0, #11
 8019dcc:	4770      	bx	lr
 8019dce:	bf00      	nop

08019dd0 <rcl_validate_topic_name>:
 8019dd0:	2800      	cmp	r0, #0
 8019dd2:	d07a      	beq.n	8019eca <rcl_validate_topic_name+0xfa>
 8019dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019dd8:	460e      	mov	r6, r1
 8019dda:	2900      	cmp	r1, #0
 8019ddc:	d07c      	beq.n	8019ed8 <rcl_validate_topic_name+0x108>
 8019dde:	4617      	mov	r7, r2
 8019de0:	4605      	mov	r5, r0
 8019de2:	f7e6 fa27 	bl	8000234 <strlen>
 8019de6:	b1b0      	cbz	r0, 8019e16 <rcl_validate_topic_name+0x46>
 8019de8:	f895 9000 	ldrb.w	r9, [r5]
 8019dec:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8019f70 <rcl_validate_topic_name+0x1a0>
 8019df0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8019df4:	f013 0304 	ands.w	r3, r3, #4
 8019df8:	d169      	bne.n	8019ece <rcl_validate_topic_name+0xfe>
 8019dfa:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8019dfe:	f815 2008 	ldrb.w	r2, [r5, r8]
 8019e02:	2a2f      	cmp	r2, #47	@ 0x2f
 8019e04:	d10e      	bne.n	8019e24 <rcl_validate_topic_name+0x54>
 8019e06:	2202      	movs	r2, #2
 8019e08:	6032      	str	r2, [r6, #0]
 8019e0a:	b36f      	cbz	r7, 8019e68 <rcl_validate_topic_name+0x98>
 8019e0c:	f8c7 8000 	str.w	r8, [r7]
 8019e10:	4618      	mov	r0, r3
 8019e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e16:	2301      	movs	r3, #1
 8019e18:	6033      	str	r3, [r6, #0]
 8019e1a:	b32f      	cbz	r7, 8019e68 <rcl_validate_topic_name+0x98>
 8019e1c:	2000      	movs	r0, #0
 8019e1e:	6038      	str	r0, [r7, #0]
 8019e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e24:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8019e28:	461c      	mov	r4, r3
 8019e2a:	4619      	mov	r1, r3
 8019e2c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8019e30:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8019e34:	f1be 0f09 	cmp.w	lr, #9
 8019e38:	d919      	bls.n	8019e6e <rcl_validate_topic_name+0x9e>
 8019e3a:	f022 0e20 	bic.w	lr, r2, #32
 8019e3e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8019e42:	f1be 0f19 	cmp.w	lr, #25
 8019e46:	d912      	bls.n	8019e6e <rcl_validate_topic_name+0x9e>
 8019e48:	2a5f      	cmp	r2, #95	@ 0x5f
 8019e4a:	d019      	beq.n	8019e80 <rcl_validate_topic_name+0xb0>
 8019e4c:	2a2f      	cmp	r2, #47	@ 0x2f
 8019e4e:	d051      	beq.n	8019ef4 <rcl_validate_topic_name+0x124>
 8019e50:	2a7e      	cmp	r2, #126	@ 0x7e
 8019e52:	d048      	beq.n	8019ee6 <rcl_validate_topic_name+0x116>
 8019e54:	2a7b      	cmp	r2, #123	@ 0x7b
 8019e56:	d054      	beq.n	8019f02 <rcl_validate_topic_name+0x132>
 8019e58:	2a7d      	cmp	r2, #125	@ 0x7d
 8019e5a:	d161      	bne.n	8019f20 <rcl_validate_topic_name+0x150>
 8019e5c:	2c00      	cmp	r4, #0
 8019e5e:	d155      	bne.n	8019f0c <rcl_validate_topic_name+0x13c>
 8019e60:	2305      	movs	r3, #5
 8019e62:	6033      	str	r3, [r6, #0]
 8019e64:	b107      	cbz	r7, 8019e68 <rcl_validate_topic_name+0x98>
 8019e66:	6039      	str	r1, [r7, #0]
 8019e68:	2000      	movs	r0, #0
 8019e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e6e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019e72:	0752      	lsls	r2, r2, #29
 8019e74:	d504      	bpl.n	8019e80 <rcl_validate_topic_name+0xb0>
 8019e76:	b11c      	cbz	r4, 8019e80 <rcl_validate_topic_name+0xb0>
 8019e78:	b111      	cbz	r1, 8019e80 <rcl_validate_topic_name+0xb0>
 8019e7a:	1e4a      	subs	r2, r1, #1
 8019e7c:	429a      	cmp	r2, r3
 8019e7e:	d02d      	beq.n	8019edc <rcl_validate_topic_name+0x10c>
 8019e80:	3101      	adds	r1, #1
 8019e82:	4288      	cmp	r0, r1
 8019e84:	d1d2      	bne.n	8019e2c <rcl_validate_topic_name+0x5c>
 8019e86:	2c00      	cmp	r4, #0
 8019e88:	d145      	bne.n	8019f16 <rcl_validate_topic_name+0x146>
 8019e8a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8019e8e:	d04f      	beq.n	8019f30 <rcl_validate_topic_name+0x160>
 8019e90:	4620      	mov	r0, r4
 8019e92:	2301      	movs	r3, #1
 8019e94:	e006      	b.n	8019ea4 <rcl_validate_topic_name+0xd4>
 8019e96:	428b      	cmp	r3, r1
 8019e98:	f105 0501 	add.w	r5, r5, #1
 8019e9c:	f103 0201 	add.w	r2, r3, #1
 8019ea0:	d236      	bcs.n	8019f10 <rcl_validate_topic_name+0x140>
 8019ea2:	4613      	mov	r3, r2
 8019ea4:	4580      	cmp	r8, r0
 8019ea6:	f100 0001 	add.w	r0, r0, #1
 8019eaa:	d0f4      	beq.n	8019e96 <rcl_validate_topic_name+0xc6>
 8019eac:	782a      	ldrb	r2, [r5, #0]
 8019eae:	2a2f      	cmp	r2, #47	@ 0x2f
 8019eb0:	d1f1      	bne.n	8019e96 <rcl_validate_topic_name+0xc6>
 8019eb2:	786a      	ldrb	r2, [r5, #1]
 8019eb4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019eb8:	0754      	lsls	r4, r2, #29
 8019eba:	d5ec      	bpl.n	8019e96 <rcl_validate_topic_name+0xc6>
 8019ebc:	2204      	movs	r2, #4
 8019ebe:	6032      	str	r2, [r6, #0]
 8019ec0:	2f00      	cmp	r7, #0
 8019ec2:	d0d1      	beq.n	8019e68 <rcl_validate_topic_name+0x98>
 8019ec4:	603b      	str	r3, [r7, #0]
 8019ec6:	2000      	movs	r0, #0
 8019ec8:	e7aa      	b.n	8019e20 <rcl_validate_topic_name+0x50>
 8019eca:	200b      	movs	r0, #11
 8019ecc:	4770      	bx	lr
 8019ece:	2304      	movs	r3, #4
 8019ed0:	6033      	str	r3, [r6, #0]
 8019ed2:	2f00      	cmp	r7, #0
 8019ed4:	d1a2      	bne.n	8019e1c <rcl_validate_topic_name+0x4c>
 8019ed6:	e7c7      	b.n	8019e68 <rcl_validate_topic_name+0x98>
 8019ed8:	200b      	movs	r0, #11
 8019eda:	e7a1      	b.n	8019e20 <rcl_validate_topic_name+0x50>
 8019edc:	2309      	movs	r3, #9
 8019ede:	6033      	str	r3, [r6, #0]
 8019ee0:	2f00      	cmp	r7, #0
 8019ee2:	d1c0      	bne.n	8019e66 <rcl_validate_topic_name+0x96>
 8019ee4:	e7c0      	b.n	8019e68 <rcl_validate_topic_name+0x98>
 8019ee6:	2900      	cmp	r1, #0
 8019ee8:	d0ca      	beq.n	8019e80 <rcl_validate_topic_name+0xb0>
 8019eea:	2306      	movs	r3, #6
 8019eec:	6033      	str	r3, [r6, #0]
 8019eee:	2f00      	cmp	r7, #0
 8019ef0:	d1b9      	bne.n	8019e66 <rcl_validate_topic_name+0x96>
 8019ef2:	e7b9      	b.n	8019e68 <rcl_validate_topic_name+0x98>
 8019ef4:	2c00      	cmp	r4, #0
 8019ef6:	d0c3      	beq.n	8019e80 <rcl_validate_topic_name+0xb0>
 8019ef8:	2308      	movs	r3, #8
 8019efa:	6033      	str	r3, [r6, #0]
 8019efc:	2f00      	cmp	r7, #0
 8019efe:	d1b2      	bne.n	8019e66 <rcl_validate_topic_name+0x96>
 8019f00:	e7b2      	b.n	8019e68 <rcl_validate_topic_name+0x98>
 8019f02:	2c00      	cmp	r4, #0
 8019f04:	d1f8      	bne.n	8019ef8 <rcl_validate_topic_name+0x128>
 8019f06:	460b      	mov	r3, r1
 8019f08:	2401      	movs	r4, #1
 8019f0a:	e7b9      	b.n	8019e80 <rcl_validate_topic_name+0xb0>
 8019f0c:	2400      	movs	r4, #0
 8019f0e:	e7b7      	b.n	8019e80 <rcl_validate_topic_name+0xb0>
 8019f10:	2000      	movs	r0, #0
 8019f12:	6030      	str	r0, [r6, #0]
 8019f14:	e784      	b.n	8019e20 <rcl_validate_topic_name+0x50>
 8019f16:	2205      	movs	r2, #5
 8019f18:	6032      	str	r2, [r6, #0]
 8019f1a:	2f00      	cmp	r7, #0
 8019f1c:	d1d2      	bne.n	8019ec4 <rcl_validate_topic_name+0xf4>
 8019f1e:	e7a3      	b.n	8019e68 <rcl_validate_topic_name+0x98>
 8019f20:	2c00      	cmp	r4, #0
 8019f22:	bf14      	ite	ne
 8019f24:	2308      	movne	r3, #8
 8019f26:	2303      	moveq	r3, #3
 8019f28:	6033      	str	r3, [r6, #0]
 8019f2a:	2f00      	cmp	r7, #0
 8019f2c:	d19b      	bne.n	8019e66 <rcl_validate_topic_name+0x96>
 8019f2e:	e79b      	b.n	8019e68 <rcl_validate_topic_name+0x98>
 8019f30:	2301      	movs	r3, #1
 8019f32:	e00a      	b.n	8019f4a <rcl_validate_topic_name+0x17a>
 8019f34:	2c01      	cmp	r4, #1
 8019f36:	d013      	beq.n	8019f60 <rcl_validate_topic_name+0x190>
 8019f38:	4299      	cmp	r1, r3
 8019f3a:	f104 0401 	add.w	r4, r4, #1
 8019f3e:	f105 0501 	add.w	r5, r5, #1
 8019f42:	f103 0201 	add.w	r2, r3, #1
 8019f46:	d9e3      	bls.n	8019f10 <rcl_validate_topic_name+0x140>
 8019f48:	4613      	mov	r3, r2
 8019f4a:	45a0      	cmp	r8, r4
 8019f4c:	d0f4      	beq.n	8019f38 <rcl_validate_topic_name+0x168>
 8019f4e:	782a      	ldrb	r2, [r5, #0]
 8019f50:	2a2f      	cmp	r2, #47	@ 0x2f
 8019f52:	d1ef      	bne.n	8019f34 <rcl_validate_topic_name+0x164>
 8019f54:	786a      	ldrb	r2, [r5, #1]
 8019f56:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019f5a:	0752      	lsls	r2, r2, #29
 8019f5c:	d5ec      	bpl.n	8019f38 <rcl_validate_topic_name+0x168>
 8019f5e:	e7ad      	b.n	8019ebc <rcl_validate_topic_name+0xec>
 8019f60:	2307      	movs	r3, #7
 8019f62:	6033      	str	r3, [r6, #0]
 8019f64:	2f00      	cmp	r7, #0
 8019f66:	f43f af7f 	beq.w	8019e68 <rcl_validate_topic_name+0x98>
 8019f6a:	603c      	str	r4, [r7, #0]
 8019f6c:	2000      	movs	r0, #0
 8019f6e:	e757      	b.n	8019e20 <rcl_validate_topic_name+0x50>
 8019f70:	08020c5e 	.word	0x08020c5e

08019f74 <rcl_get_zero_initialized_wait_set>:
 8019f74:	b510      	push	{r4, lr}
 8019f76:	4c08      	ldr	r4, [pc, #32]	@ (8019f98 <rcl_get_zero_initialized_wait_set+0x24>)
 8019f78:	4686      	mov	lr, r0
 8019f7a:	4684      	mov	ip, r0
 8019f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019f8e:	6823      	ldr	r3, [r4, #0]
 8019f90:	f8cc 3000 	str.w	r3, [ip]
 8019f94:	4670      	mov	r0, lr
 8019f96:	bd10      	pop	{r4, pc}
 8019f98:	080209ec 	.word	0x080209ec

08019f9c <rcl_wait_set_is_valid>:
 8019f9c:	b118      	cbz	r0, 8019fa6 <rcl_wait_set_is_valid+0xa>
 8019f9e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8019fa0:	3800      	subs	r0, #0
 8019fa2:	bf18      	it	ne
 8019fa4:	2001      	movne	r0, #1
 8019fa6:	4770      	bx	lr

08019fa8 <rcl_wait_set_fini>:
 8019fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fac:	b082      	sub	sp, #8
 8019fae:	2800      	cmp	r0, #0
 8019fb0:	f000 8095 	beq.w	801a0de <rcl_wait_set_fini+0x136>
 8019fb4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8019fb6:	4604      	mov	r4, r0
 8019fb8:	2e00      	cmp	r6, #0
 8019fba:	f000 808c 	beq.w	801a0d6 <rcl_wait_set_fini+0x12e>
 8019fbe:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8019fc0:	f001 ff62 	bl	801be88 <rmw_destroy_wait_set>
 8019fc4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8019fc6:	1e06      	subs	r6, r0, #0
 8019fc8:	bf18      	it	ne
 8019fca:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8019fce:	2d00      	cmp	r5, #0
 8019fd0:	f000 8081 	beq.w	801a0d6 <rcl_wait_set_fini+0x12e>
 8019fd4:	6820      	ldr	r0, [r4, #0]
 8019fd6:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8019fda:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8019fdc:	2700      	movs	r7, #0
 8019fde:	6067      	str	r7, [r4, #4]
 8019fe0:	602f      	str	r7, [r5, #0]
 8019fe2:	b120      	cbz	r0, 8019fee <rcl_wait_set_fini+0x46>
 8019fe4:	9101      	str	r1, [sp, #4]
 8019fe6:	47c0      	blx	r8
 8019fe8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8019fea:	9901      	ldr	r1, [sp, #4]
 8019fec:	6027      	str	r7, [r4, #0]
 8019fee:	68a8      	ldr	r0, [r5, #8]
 8019ff0:	b120      	cbz	r0, 8019ffc <rcl_wait_set_fini+0x54>
 8019ff2:	47c0      	blx	r8
 8019ff4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8019ff6:	2300      	movs	r3, #0
 8019ff8:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8019ffc:	68a0      	ldr	r0, [r4, #8]
 8019ffe:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801a000:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801a002:	f04f 0800 	mov.w	r8, #0
 801a006:	f8c4 800c 	str.w	r8, [r4, #12]
 801a00a:	f8c5 800c 	str.w	r8, [r5, #12]
 801a00e:	b128      	cbz	r0, 801a01c <rcl_wait_set_fini+0x74>
 801a010:	47b8      	blx	r7
 801a012:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a014:	f8c4 8008 	str.w	r8, [r4, #8]
 801a018:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801a01a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801a01c:	6968      	ldr	r0, [r5, #20]
 801a01e:	f04f 0800 	mov.w	r8, #0
 801a022:	f8c5 8010 	str.w	r8, [r5, #16]
 801a026:	b128      	cbz	r0, 801a034 <rcl_wait_set_fini+0x8c>
 801a028:	47b8      	blx	r7
 801a02a:	f8c5 8014 	str.w	r8, [r5, #20]
 801a02e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a030:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801a032:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801a034:	6920      	ldr	r0, [r4, #16]
 801a036:	f04f 0800 	mov.w	r8, #0
 801a03a:	f8c4 8014 	str.w	r8, [r4, #20]
 801a03e:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801a042:	b128      	cbz	r0, 801a050 <rcl_wait_set_fini+0xa8>
 801a044:	47b8      	blx	r7
 801a046:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a048:	f8c4 8010 	str.w	r8, [r4, #16]
 801a04c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801a04e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801a050:	69a0      	ldr	r0, [r4, #24]
 801a052:	f04f 0800 	mov.w	r8, #0
 801a056:	f8c4 801c 	str.w	r8, [r4, #28]
 801a05a:	f8c5 8018 	str.w	r8, [r5, #24]
 801a05e:	b128      	cbz	r0, 801a06c <rcl_wait_set_fini+0xc4>
 801a060:	9101      	str	r1, [sp, #4]
 801a062:	47b8      	blx	r7
 801a064:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a066:	9901      	ldr	r1, [sp, #4]
 801a068:	f8c4 8018 	str.w	r8, [r4, #24]
 801a06c:	6a28      	ldr	r0, [r5, #32]
 801a06e:	b120      	cbz	r0, 801a07a <rcl_wait_set_fini+0xd2>
 801a070:	47b8      	blx	r7
 801a072:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a074:	2300      	movs	r3, #0
 801a076:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801a07a:	6a20      	ldr	r0, [r4, #32]
 801a07c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801a080:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801a082:	2700      	movs	r7, #0
 801a084:	6267      	str	r7, [r4, #36]	@ 0x24
 801a086:	626f      	str	r7, [r5, #36]	@ 0x24
 801a088:	b120      	cbz	r0, 801a094 <rcl_wait_set_fini+0xec>
 801a08a:	9101      	str	r1, [sp, #4]
 801a08c:	47c0      	blx	r8
 801a08e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a090:	9901      	ldr	r1, [sp, #4]
 801a092:	6227      	str	r7, [r4, #32]
 801a094:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801a096:	b120      	cbz	r0, 801a0a2 <rcl_wait_set_fini+0xfa>
 801a098:	47c0      	blx	r8
 801a09a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a09c:	2300      	movs	r3, #0
 801a09e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801a0a2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801a0a4:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801a0a8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801a0aa:	2700      	movs	r7, #0
 801a0ac:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801a0ae:	632f      	str	r7, [r5, #48]	@ 0x30
 801a0b0:	b120      	cbz	r0, 801a0bc <rcl_wait_set_fini+0x114>
 801a0b2:	9101      	str	r1, [sp, #4]
 801a0b4:	47c0      	blx	r8
 801a0b6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a0b8:	9901      	ldr	r1, [sp, #4]
 801a0ba:	62a7      	str	r7, [r4, #40]	@ 0x28
 801a0bc:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801a0be:	b120      	cbz	r0, 801a0ca <rcl_wait_set_fini+0x122>
 801a0c0:	47c0      	blx	r8
 801a0c2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801a0ca:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801a0cc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801a0ce:	4628      	mov	r0, r5
 801a0d0:	4798      	blx	r3
 801a0d2:	2300      	movs	r3, #0
 801a0d4:	6323      	str	r3, [r4, #48]	@ 0x30
 801a0d6:	4630      	mov	r0, r6
 801a0d8:	b002      	add	sp, #8
 801a0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0de:	260b      	movs	r6, #11
 801a0e0:	4630      	mov	r0, r6
 801a0e2:	b002      	add	sp, #8
 801a0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a0e8 <rcl_wait_set_add_subscription>:
 801a0e8:	b318      	cbz	r0, 801a132 <rcl_wait_set_add_subscription+0x4a>
 801a0ea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a0ec:	b570      	push	{r4, r5, r6, lr}
 801a0ee:	4604      	mov	r4, r0
 801a0f0:	b30b      	cbz	r3, 801a136 <rcl_wait_set_add_subscription+0x4e>
 801a0f2:	b319      	cbz	r1, 801a13c <rcl_wait_set_add_subscription+0x54>
 801a0f4:	681d      	ldr	r5, [r3, #0]
 801a0f6:	6840      	ldr	r0, [r0, #4]
 801a0f8:	4285      	cmp	r5, r0
 801a0fa:	d217      	bcs.n	801a12c <rcl_wait_set_add_subscription+0x44>
 801a0fc:	6820      	ldr	r0, [r4, #0]
 801a0fe:	1c6e      	adds	r6, r5, #1
 801a100:	601e      	str	r6, [r3, #0]
 801a102:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801a106:	b102      	cbz	r2, 801a10a <rcl_wait_set_add_subscription+0x22>
 801a108:	6015      	str	r5, [r2, #0]
 801a10a:	4608      	mov	r0, r1
 801a10c:	f7ff fa36 	bl	801957c <rcl_subscription_get_rmw_handle>
 801a110:	b150      	cbz	r0, 801a128 <rcl_wait_set_add_subscription+0x40>
 801a112:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a114:	6842      	ldr	r2, [r0, #4]
 801a116:	689b      	ldr	r3, [r3, #8]
 801a118:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a11c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801a11e:	6853      	ldr	r3, [r2, #4]
 801a120:	3301      	adds	r3, #1
 801a122:	2000      	movs	r0, #0
 801a124:	6053      	str	r3, [r2, #4]
 801a126:	bd70      	pop	{r4, r5, r6, pc}
 801a128:	2001      	movs	r0, #1
 801a12a:	bd70      	pop	{r4, r5, r6, pc}
 801a12c:	f240 3086 	movw	r0, #902	@ 0x386
 801a130:	bd70      	pop	{r4, r5, r6, pc}
 801a132:	200b      	movs	r0, #11
 801a134:	4770      	bx	lr
 801a136:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a13a:	bd70      	pop	{r4, r5, r6, pc}
 801a13c:	200b      	movs	r0, #11
 801a13e:	bd70      	pop	{r4, r5, r6, pc}

0801a140 <rcl_wait_set_clear>:
 801a140:	2800      	cmp	r0, #0
 801a142:	d073      	beq.n	801a22c <rcl_wait_set_clear+0xec>
 801a144:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a146:	b510      	push	{r4, lr}
 801a148:	4604      	mov	r4, r0
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d070      	beq.n	801a230 <rcl_wait_set_clear+0xf0>
 801a14e:	6800      	ldr	r0, [r0, #0]
 801a150:	b138      	cbz	r0, 801a162 <rcl_wait_set_clear+0x22>
 801a152:	6862      	ldr	r2, [r4, #4]
 801a154:	2100      	movs	r1, #0
 801a156:	0092      	lsls	r2, r2, #2
 801a158:	f003 fae2 	bl	801d720 <memset>
 801a15c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a15e:	2200      	movs	r2, #0
 801a160:	601a      	str	r2, [r3, #0]
 801a162:	68a0      	ldr	r0, [r4, #8]
 801a164:	b138      	cbz	r0, 801a176 <rcl_wait_set_clear+0x36>
 801a166:	68e2      	ldr	r2, [r4, #12]
 801a168:	2100      	movs	r1, #0
 801a16a:	0092      	lsls	r2, r2, #2
 801a16c:	f003 fad8 	bl	801d720 <memset>
 801a170:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a172:	2200      	movs	r2, #0
 801a174:	60da      	str	r2, [r3, #12]
 801a176:	69a0      	ldr	r0, [r4, #24]
 801a178:	b138      	cbz	r0, 801a18a <rcl_wait_set_clear+0x4a>
 801a17a:	69e2      	ldr	r2, [r4, #28]
 801a17c:	2100      	movs	r1, #0
 801a17e:	0092      	lsls	r2, r2, #2
 801a180:	f003 face 	bl	801d720 <memset>
 801a184:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a186:	2200      	movs	r2, #0
 801a188:	619a      	str	r2, [r3, #24]
 801a18a:	6a20      	ldr	r0, [r4, #32]
 801a18c:	b138      	cbz	r0, 801a19e <rcl_wait_set_clear+0x5e>
 801a18e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801a190:	2100      	movs	r1, #0
 801a192:	0092      	lsls	r2, r2, #2
 801a194:	f003 fac4 	bl	801d720 <memset>
 801a198:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a19a:	2200      	movs	r2, #0
 801a19c:	625a      	str	r2, [r3, #36]	@ 0x24
 801a19e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801a1a0:	b138      	cbz	r0, 801a1b2 <rcl_wait_set_clear+0x72>
 801a1a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a1a4:	2100      	movs	r1, #0
 801a1a6:	0092      	lsls	r2, r2, #2
 801a1a8:	f003 faba 	bl	801d720 <memset>
 801a1ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	631a      	str	r2, [r3, #48]	@ 0x30
 801a1b2:	6920      	ldr	r0, [r4, #16]
 801a1b4:	b138      	cbz	r0, 801a1c6 <rcl_wait_set_clear+0x86>
 801a1b6:	6962      	ldr	r2, [r4, #20]
 801a1b8:	2100      	movs	r1, #0
 801a1ba:	0092      	lsls	r2, r2, #2
 801a1bc:	f003 fab0 	bl	801d720 <memset>
 801a1c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a1c2:	2200      	movs	r2, #0
 801a1c4:	641a      	str	r2, [r3, #64]	@ 0x40
 801a1c6:	6898      	ldr	r0, [r3, #8]
 801a1c8:	b138      	cbz	r0, 801a1da <rcl_wait_set_clear+0x9a>
 801a1ca:	685a      	ldr	r2, [r3, #4]
 801a1cc:	2100      	movs	r1, #0
 801a1ce:	0092      	lsls	r2, r2, #2
 801a1d0:	f003 faa6 	bl	801d720 <memset>
 801a1d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a1d6:	2200      	movs	r2, #0
 801a1d8:	605a      	str	r2, [r3, #4]
 801a1da:	6958      	ldr	r0, [r3, #20]
 801a1dc:	b138      	cbz	r0, 801a1ee <rcl_wait_set_clear+0xae>
 801a1de:	691a      	ldr	r2, [r3, #16]
 801a1e0:	2100      	movs	r1, #0
 801a1e2:	0092      	lsls	r2, r2, #2
 801a1e4:	f003 fa9c 	bl	801d720 <memset>
 801a1e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a1ea:	2200      	movs	r2, #0
 801a1ec:	611a      	str	r2, [r3, #16]
 801a1ee:	6a18      	ldr	r0, [r3, #32]
 801a1f0:	b138      	cbz	r0, 801a202 <rcl_wait_set_clear+0xc2>
 801a1f2:	69da      	ldr	r2, [r3, #28]
 801a1f4:	2100      	movs	r1, #0
 801a1f6:	0092      	lsls	r2, r2, #2
 801a1f8:	f003 fa92 	bl	801d720 <memset>
 801a1fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a1fe:	2200      	movs	r2, #0
 801a200:	61da      	str	r2, [r3, #28]
 801a202:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801a204:	b138      	cbz	r0, 801a216 <rcl_wait_set_clear+0xd6>
 801a206:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801a208:	2100      	movs	r1, #0
 801a20a:	0092      	lsls	r2, r2, #2
 801a20c:	f003 fa88 	bl	801d720 <memset>
 801a210:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a212:	2200      	movs	r2, #0
 801a214:	629a      	str	r2, [r3, #40]	@ 0x28
 801a216:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801a218:	b138      	cbz	r0, 801a22a <rcl_wait_set_clear+0xea>
 801a21a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a21c:	2100      	movs	r1, #0
 801a21e:	0092      	lsls	r2, r2, #2
 801a220:	f003 fa7e 	bl	801d720 <memset>
 801a224:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a226:	2000      	movs	r0, #0
 801a228:	6358      	str	r0, [r3, #52]	@ 0x34
 801a22a:	bd10      	pop	{r4, pc}
 801a22c:	200b      	movs	r0, #11
 801a22e:	4770      	bx	lr
 801a230:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a234:	bd10      	pop	{r4, pc}
 801a236:	bf00      	nop

0801a238 <rcl_wait_set_resize>:
 801a238:	2800      	cmp	r0, #0
 801a23a:	f000 8185 	beq.w	801a548 <rcl_wait_set_resize+0x310>
 801a23e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a242:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801a244:	b083      	sub	sp, #12
 801a246:	4605      	mov	r5, r0
 801a248:	2c00      	cmp	r4, #0
 801a24a:	f000 817f 	beq.w	801a54c <rcl_wait_set_resize+0x314>
 801a24e:	f04f 0900 	mov.w	r9, #0
 801a252:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801a256:	461f      	mov	r7, r3
 801a258:	4688      	mov	r8, r1
 801a25a:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801a25e:	4616      	mov	r6, r2
 801a260:	f8c0 9004 	str.w	r9, [r0, #4]
 801a264:	f8c4 9000 	str.w	r9, [r4]
 801a268:	2900      	cmp	r1, #0
 801a26a:	f000 80bd 	beq.w	801a3e8 <rcl_wait_set_resize+0x1b0>
 801a26e:	008c      	lsls	r4, r1, #2
 801a270:	6800      	ldr	r0, [r0, #0]
 801a272:	9301      	str	r3, [sp, #4]
 801a274:	4652      	mov	r2, sl
 801a276:	4621      	mov	r1, r4
 801a278:	4798      	blx	r3
 801a27a:	9b01      	ldr	r3, [sp, #4]
 801a27c:	6028      	str	r0, [r5, #0]
 801a27e:	2800      	cmp	r0, #0
 801a280:	f000 80cb 	beq.w	801a41a <rcl_wait_set_resize+0x1e2>
 801a284:	4622      	mov	r2, r4
 801a286:	4649      	mov	r1, r9
 801a288:	9301      	str	r3, [sp, #4]
 801a28a:	f003 fa49 	bl	801d720 <memset>
 801a28e:	f8c5 8004 	str.w	r8, [r5, #4]
 801a292:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801a296:	9b01      	ldr	r3, [sp, #4]
 801a298:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801a29c:	f8c8 9004 	str.w	r9, [r8, #4]
 801a2a0:	4652      	mov	r2, sl
 801a2a2:	4621      	mov	r1, r4
 801a2a4:	4798      	blx	r3
 801a2a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a2a8:	f8c8 0008 	str.w	r0, [r8, #8]
 801a2ac:	689b      	ldr	r3, [r3, #8]
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	f000 80ac 	beq.w	801a40c <rcl_wait_set_resize+0x1d4>
 801a2b4:	4622      	mov	r2, r4
 801a2b6:	4649      	mov	r1, r9
 801a2b8:	4618      	mov	r0, r3
 801a2ba:	f003 fa31 	bl	801d720 <memset>
 801a2be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a2c0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801a2c4:	f04f 0800 	mov.w	r8, #0
 801a2c8:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 801a2cc:	f8c5 800c 	str.w	r8, [r5, #12]
 801a2d0:	f8c4 800c 	str.w	r8, [r4, #12]
 801a2d4:	2e00      	cmp	r6, #0
 801a2d6:	f040 80a4 	bne.w	801a422 <rcl_wait_set_resize+0x1ea>
 801a2da:	68a8      	ldr	r0, [r5, #8]
 801a2dc:	b128      	cbz	r0, 801a2ea <rcl_wait_set_resize+0xb2>
 801a2de:	4649      	mov	r1, r9
 801a2e0:	4790      	blx	r2
 801a2e2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a2e4:	60ae      	str	r6, [r5, #8]
 801a2e6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801a2ea:	f04f 0800 	mov.w	r8, #0
 801a2ee:	19f6      	adds	r6, r6, r7
 801a2f0:	f8c4 8010 	str.w	r8, [r4, #16]
 801a2f4:	f040 80ac 	bne.w	801a450 <rcl_wait_set_resize+0x218>
 801a2f8:	6960      	ldr	r0, [r4, #20]
 801a2fa:	b130      	cbz	r0, 801a30a <rcl_wait_set_resize+0xd2>
 801a2fc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801a2fe:	4649      	mov	r1, r9
 801a300:	4798      	blx	r3
 801a302:	6166      	str	r6, [r4, #20]
 801a304:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a306:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801a30a:	2600      	movs	r6, #0
 801a30c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801a310:	616e      	str	r6, [r5, #20]
 801a312:	6426      	str	r6, [r4, #64]	@ 0x40
 801a314:	2f00      	cmp	r7, #0
 801a316:	f040 80ad 	bne.w	801a474 <rcl_wait_set_resize+0x23c>
 801a31a:	6928      	ldr	r0, [r5, #16]
 801a31c:	b138      	cbz	r0, 801a32e <rcl_wait_set_resize+0xf6>
 801a31e:	4649      	mov	r1, r9
 801a320:	47d0      	blx	sl
 801a322:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a324:	612f      	str	r7, [r5, #16]
 801a326:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801a32a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801a32e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a330:	2600      	movs	r6, #0
 801a332:	61ee      	str	r6, [r5, #28]
 801a334:	61a6      	str	r6, [r4, #24]
 801a336:	2b00      	cmp	r3, #0
 801a338:	f040 80af 	bne.w	801a49a <rcl_wait_set_resize+0x262>
 801a33c:	69a8      	ldr	r0, [r5, #24]
 801a33e:	b120      	cbz	r0, 801a34a <rcl_wait_set_resize+0x112>
 801a340:	4649      	mov	r1, r9
 801a342:	47d0      	blx	sl
 801a344:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a346:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a348:	61ab      	str	r3, [r5, #24]
 801a34a:	6a20      	ldr	r0, [r4, #32]
 801a34c:	b128      	cbz	r0, 801a35a <rcl_wait_set_resize+0x122>
 801a34e:	4649      	mov	r1, r9
 801a350:	47d0      	blx	sl
 801a352:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a354:	2300      	movs	r3, #0
 801a356:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801a35a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a35c:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801a35e:	2600      	movs	r6, #0
 801a360:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801a364:	626e      	str	r6, [r5, #36]	@ 0x24
 801a366:	6266      	str	r6, [r4, #36]	@ 0x24
 801a368:	2b00      	cmp	r3, #0
 801a36a:	f000 80b6 	beq.w	801a4da <rcl_wait_set_resize+0x2a2>
 801a36e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801a372:	6a28      	ldr	r0, [r5, #32]
 801a374:	463a      	mov	r2, r7
 801a376:	4651      	mov	r1, sl
 801a378:	47c8      	blx	r9
 801a37a:	6228      	str	r0, [r5, #32]
 801a37c:	2800      	cmp	r0, #0
 801a37e:	d04c      	beq.n	801a41a <rcl_wait_set_resize+0x1e2>
 801a380:	4652      	mov	r2, sl
 801a382:	4631      	mov	r1, r6
 801a384:	f003 f9cc 	bl	801d720 <memset>
 801a388:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a38a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a38c:	626b      	str	r3, [r5, #36]	@ 0x24
 801a38e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801a390:	62a6      	str	r6, [r4, #40]	@ 0x28
 801a392:	463a      	mov	r2, r7
 801a394:	4651      	mov	r1, sl
 801a396:	47c8      	blx	r9
 801a398:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a39a:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801a39c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801a39e:	2c00      	cmp	r4, #0
 801a3a0:	f000 80f0 	beq.w	801a584 <rcl_wait_set_resize+0x34c>
 801a3a4:	4620      	mov	r0, r4
 801a3a6:	4652      	mov	r2, sl
 801a3a8:	4631      	mov	r1, r6
 801a3aa:	f003 f9b9 	bl	801d720 <memset>
 801a3ae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a3b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a3b2:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801a3b4:	2600      	movs	r6, #0
 801a3b6:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801a3ba:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801a3bc:	6326      	str	r6, [r4, #48]	@ 0x30
 801a3be:	2b00      	cmp	r3, #0
 801a3c0:	f040 809d 	bne.w	801a4fe <rcl_wait_set_resize+0x2c6>
 801a3c4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801a3c6:	b120      	cbz	r0, 801a3d2 <rcl_wait_set_resize+0x19a>
 801a3c8:	4639      	mov	r1, r7
 801a3ca:	47c0      	blx	r8
 801a3cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a3ce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a3d0:	62ab      	str	r3, [r5, #40]	@ 0x28
 801a3d2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801a3d4:	b310      	cbz	r0, 801a41c <rcl_wait_set_resize+0x1e4>
 801a3d6:	4639      	mov	r1, r7
 801a3d8:	47c0      	blx	r8
 801a3da:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a3dc:	2000      	movs	r0, #0
 801a3de:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801a3e2:	b003      	add	sp, #12
 801a3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3e8:	6800      	ldr	r0, [r0, #0]
 801a3ea:	b120      	cbz	r0, 801a3f6 <rcl_wait_set_resize+0x1be>
 801a3ec:	4651      	mov	r1, sl
 801a3ee:	47d8      	blx	fp
 801a3f0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a3f2:	f8c5 8000 	str.w	r8, [r5]
 801a3f6:	68a0      	ldr	r0, [r4, #8]
 801a3f8:	2800      	cmp	r0, #0
 801a3fa:	f43f af61 	beq.w	801a2c0 <rcl_wait_set_resize+0x88>
 801a3fe:	4651      	mov	r1, sl
 801a400:	47d8      	blx	fp
 801a402:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a404:	2300      	movs	r3, #0
 801a406:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801a40a:	e759      	b.n	801a2c0 <rcl_wait_set_resize+0x88>
 801a40c:	6828      	ldr	r0, [r5, #0]
 801a40e:	9301      	str	r3, [sp, #4]
 801a410:	4651      	mov	r1, sl
 801a412:	47d8      	blx	fp
 801a414:	9b01      	ldr	r3, [sp, #4]
 801a416:	e9c5 3300 	strd	r3, r3, [r5]
 801a41a:	200a      	movs	r0, #10
 801a41c:	b003      	add	sp, #12
 801a41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a422:	00b4      	lsls	r4, r6, #2
 801a424:	68a8      	ldr	r0, [r5, #8]
 801a426:	464a      	mov	r2, r9
 801a428:	4621      	mov	r1, r4
 801a42a:	4798      	blx	r3
 801a42c:	60a8      	str	r0, [r5, #8]
 801a42e:	2800      	cmp	r0, #0
 801a430:	d0f3      	beq.n	801a41a <rcl_wait_set_resize+0x1e2>
 801a432:	4622      	mov	r2, r4
 801a434:	4641      	mov	r1, r8
 801a436:	f003 f973 	bl	801d720 <memset>
 801a43a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a43c:	60ee      	str	r6, [r5, #12]
 801a43e:	f04f 0800 	mov.w	r8, #0
 801a442:	19f6      	adds	r6, r6, r7
 801a444:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801a448:	f8c4 8010 	str.w	r8, [r4, #16]
 801a44c:	f43f af54 	beq.w	801a2f8 <rcl_wait_set_resize+0xc0>
 801a450:	00b6      	lsls	r6, r6, #2
 801a452:	464a      	mov	r2, r9
 801a454:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801a456:	6960      	ldr	r0, [r4, #20]
 801a458:	4631      	mov	r1, r6
 801a45a:	4798      	blx	r3
 801a45c:	4681      	mov	r9, r0
 801a45e:	6160      	str	r0, [r4, #20]
 801a460:	2800      	cmp	r0, #0
 801a462:	d076      	beq.n	801a552 <rcl_wait_set_resize+0x31a>
 801a464:	4632      	mov	r2, r6
 801a466:	4641      	mov	r1, r8
 801a468:	f003 f95a 	bl	801d720 <memset>
 801a46c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a46e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801a472:	e74a      	b.n	801a30a <rcl_wait_set_resize+0xd2>
 801a474:	00bc      	lsls	r4, r7, #2
 801a476:	6928      	ldr	r0, [r5, #16]
 801a478:	464a      	mov	r2, r9
 801a47a:	4621      	mov	r1, r4
 801a47c:	47c0      	blx	r8
 801a47e:	6128      	str	r0, [r5, #16]
 801a480:	2800      	cmp	r0, #0
 801a482:	d0ca      	beq.n	801a41a <rcl_wait_set_resize+0x1e2>
 801a484:	4622      	mov	r2, r4
 801a486:	4631      	mov	r1, r6
 801a488:	f003 f94a 	bl	801d720 <memset>
 801a48c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a48e:	616f      	str	r7, [r5, #20]
 801a490:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801a494:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801a498:	e749      	b.n	801a32e <rcl_wait_set_resize+0xf6>
 801a49a:	009c      	lsls	r4, r3, #2
 801a49c:	69a8      	ldr	r0, [r5, #24]
 801a49e:	464a      	mov	r2, r9
 801a4a0:	4621      	mov	r1, r4
 801a4a2:	47c0      	blx	r8
 801a4a4:	61a8      	str	r0, [r5, #24]
 801a4a6:	2800      	cmp	r0, #0
 801a4a8:	d0b7      	beq.n	801a41a <rcl_wait_set_resize+0x1e2>
 801a4aa:	4622      	mov	r2, r4
 801a4ac:	4631      	mov	r1, r6
 801a4ae:	f003 f937 	bl	801d720 <memset>
 801a4b2:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801a4b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a4b6:	61eb      	str	r3, [r5, #28]
 801a4b8:	6a38      	ldr	r0, [r7, #32]
 801a4ba:	61fe      	str	r6, [r7, #28]
 801a4bc:	464a      	mov	r2, r9
 801a4be:	4621      	mov	r1, r4
 801a4c0:	47c0      	blx	r8
 801a4c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a4c4:	6238      	str	r0, [r7, #32]
 801a4c6:	6a1f      	ldr	r7, [r3, #32]
 801a4c8:	2f00      	cmp	r7, #0
 801a4ca:	d054      	beq.n	801a576 <rcl_wait_set_resize+0x33e>
 801a4cc:	4622      	mov	r2, r4
 801a4ce:	4631      	mov	r1, r6
 801a4d0:	4638      	mov	r0, r7
 801a4d2:	f003 f925 	bl	801d720 <memset>
 801a4d6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a4d8:	e73f      	b.n	801a35a <rcl_wait_set_resize+0x122>
 801a4da:	6a28      	ldr	r0, [r5, #32]
 801a4dc:	b120      	cbz	r0, 801a4e8 <rcl_wait_set_resize+0x2b0>
 801a4de:	4639      	mov	r1, r7
 801a4e0:	47c0      	blx	r8
 801a4e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a4e4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a4e6:	622b      	str	r3, [r5, #32]
 801a4e8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801a4ea:	2800      	cmp	r0, #0
 801a4ec:	f43f af60 	beq.w	801a3b0 <rcl_wait_set_resize+0x178>
 801a4f0:	4639      	mov	r1, r7
 801a4f2:	47c0      	blx	r8
 801a4f4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a4f6:	2300      	movs	r3, #0
 801a4f8:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801a4fc:	e758      	b.n	801a3b0 <rcl_wait_set_resize+0x178>
 801a4fe:	009c      	lsls	r4, r3, #2
 801a500:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801a502:	463a      	mov	r2, r7
 801a504:	4621      	mov	r1, r4
 801a506:	47c8      	blx	r9
 801a508:	62a8      	str	r0, [r5, #40]	@ 0x28
 801a50a:	2800      	cmp	r0, #0
 801a50c:	d085      	beq.n	801a41a <rcl_wait_set_resize+0x1e2>
 801a50e:	4622      	mov	r2, r4
 801a510:	4631      	mov	r1, r6
 801a512:	f003 f905 	bl	801d720 <memset>
 801a516:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801a51a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a51c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801a51e:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801a522:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801a526:	463a      	mov	r2, r7
 801a528:	4621      	mov	r1, r4
 801a52a:	47c8      	blx	r9
 801a52c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a52e:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801a532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a534:	b36b      	cbz	r3, 801a592 <rcl_wait_set_resize+0x35a>
 801a536:	4622      	mov	r2, r4
 801a538:	4631      	mov	r1, r6
 801a53a:	4618      	mov	r0, r3
 801a53c:	f003 f8f0 	bl	801d720 <memset>
 801a540:	4630      	mov	r0, r6
 801a542:	b003      	add	sp, #12
 801a544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a548:	200b      	movs	r0, #11
 801a54a:	4770      	bx	lr
 801a54c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a550:	e764      	b.n	801a41c <rcl_wait_set_resize+0x1e4>
 801a552:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a554:	68a8      	ldr	r0, [r5, #8]
 801a556:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801a558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a55a:	4798      	blx	r3
 801a55c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a55e:	6928      	ldr	r0, [r5, #16]
 801a560:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801a562:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801a564:	f8c5 900c 	str.w	r9, [r5, #12]
 801a568:	f8c5 9008 	str.w	r9, [r5, #8]
 801a56c:	4790      	blx	r2
 801a56e:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801a572:	200a      	movs	r0, #10
 801a574:	e752      	b.n	801a41c <rcl_wait_set_resize+0x1e4>
 801a576:	69a8      	ldr	r0, [r5, #24]
 801a578:	4649      	mov	r1, r9
 801a57a:	47d0      	blx	sl
 801a57c:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801a580:	200a      	movs	r0, #10
 801a582:	e74b      	b.n	801a41c <rcl_wait_set_resize+0x1e4>
 801a584:	6a28      	ldr	r0, [r5, #32]
 801a586:	4639      	mov	r1, r7
 801a588:	47c0      	blx	r8
 801a58a:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801a58e:	200a      	movs	r0, #10
 801a590:	e744      	b.n	801a41c <rcl_wait_set_resize+0x1e4>
 801a592:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801a594:	9301      	str	r3, [sp, #4]
 801a596:	4639      	mov	r1, r7
 801a598:	47c0      	blx	r8
 801a59a:	9b01      	ldr	r3, [sp, #4]
 801a59c:	200a      	movs	r0, #10
 801a59e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801a5a2:	e73b      	b.n	801a41c <rcl_wait_set_resize+0x1e4>

0801a5a4 <rcl_wait_set_init>:
 801a5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a5a8:	b084      	sub	sp, #16
 801a5aa:	4604      	mov	r4, r0
 801a5ac:	a810      	add	r0, sp, #64	@ 0x40
 801a5ae:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801a5b2:	460f      	mov	r7, r1
 801a5b4:	4690      	mov	r8, r2
 801a5b6:	4699      	mov	r9, r3
 801a5b8:	f7f6 ff3c 	bl	8011434 <rcutils_allocator_is_valid>
 801a5bc:	2800      	cmp	r0, #0
 801a5be:	d06b      	beq.n	801a698 <rcl_wait_set_init+0xf4>
 801a5c0:	2c00      	cmp	r4, #0
 801a5c2:	d069      	beq.n	801a698 <rcl_wait_set_init+0xf4>
 801a5c4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a5c6:	b125      	cbz	r5, 801a5d2 <rcl_wait_set_init+0x2e>
 801a5c8:	2564      	movs	r5, #100	@ 0x64
 801a5ca:	4628      	mov	r0, r5
 801a5cc:	b004      	add	sp, #16
 801a5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5d2:	f1ba 0f00 	cmp.w	sl, #0
 801a5d6:	d05f      	beq.n	801a698 <rcl_wait_set_init+0xf4>
 801a5d8:	4650      	mov	r0, sl
 801a5da:	f7fe f963 	bl	80188a4 <rcl_context_is_valid>
 801a5de:	2800      	cmp	r0, #0
 801a5e0:	d067      	beq.n	801a6b2 <rcl_wait_set_init+0x10e>
 801a5e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a5e4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801a5e6:	205c      	movs	r0, #92	@ 0x5c
 801a5e8:	4798      	blx	r3
 801a5ea:	6320      	str	r0, [r4, #48]	@ 0x30
 801a5ec:	2800      	cmp	r0, #0
 801a5ee:	d062      	beq.n	801a6b6 <rcl_wait_set_init+0x112>
 801a5f0:	4629      	mov	r1, r5
 801a5f2:	225c      	movs	r2, #92	@ 0x5c
 801a5f4:	f003 f894 	bl	801d720 <memset>
 801a5f8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 801a5fc:	eb03 0e02 	add.w	lr, r3, r2
 801a600:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a602:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 801a604:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801a608:	449e      	add	lr, r3
 801a60a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a60e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801a612:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801a616:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801a61a:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801a61e:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801a622:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 801a626:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 801a62a:	f8da a000 	ldr.w	sl, [sl]
 801a62e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a630:	44c6      	add	lr, r8
 801a632:	f8dc 3000 	ldr.w	r3, [ip]
 801a636:	602b      	str	r3, [r5, #0]
 801a638:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 801a63c:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801a640:	f001 fc18 	bl	801be74 <rmw_create_wait_set>
 801a644:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a646:	63f0      	str	r0, [r6, #60]	@ 0x3c
 801a648:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801a64a:	b350      	cbz	r0, 801a6a2 <rcl_wait_set_init+0xfe>
 801a64c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a64e:	9302      	str	r3, [sp, #8]
 801a650:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a652:	9301      	str	r3, [sp, #4]
 801a654:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a656:	9300      	str	r3, [sp, #0]
 801a658:	4642      	mov	r2, r8
 801a65a:	464b      	mov	r3, r9
 801a65c:	4639      	mov	r1, r7
 801a65e:	4620      	mov	r0, r4
 801a660:	f7ff fdea 	bl	801a238 <rcl_wait_set_resize>
 801a664:	4605      	mov	r5, r0
 801a666:	2800      	cmp	r0, #0
 801a668:	d0af      	beq.n	801a5ca <rcl_wait_set_init+0x26>
 801a66a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a66c:	bb2b      	cbnz	r3, 801a6ba <rcl_wait_set_init+0x116>
 801a66e:	2600      	movs	r6, #0
 801a670:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801a674:	9600      	str	r6, [sp, #0]
 801a676:	4633      	mov	r3, r6
 801a678:	4632      	mov	r2, r6
 801a67a:	4631      	mov	r1, r6
 801a67c:	4620      	mov	r0, r4
 801a67e:	f7ff fddb 	bl	801a238 <rcl_wait_set_resize>
 801a682:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801a684:	2800      	cmp	r0, #0
 801a686:	d0a0      	beq.n	801a5ca <rcl_wait_set_init+0x26>
 801a688:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801a68a:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801a68c:	4798      	blx	r3
 801a68e:	4628      	mov	r0, r5
 801a690:	6326      	str	r6, [r4, #48]	@ 0x30
 801a692:	b004      	add	sp, #16
 801a694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a698:	250b      	movs	r5, #11
 801a69a:	4628      	mov	r0, r5
 801a69c:	b004      	add	sp, #16
 801a69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6a2:	2501      	movs	r5, #1
 801a6a4:	f001 fbf0 	bl	801be88 <rmw_destroy_wait_set>
 801a6a8:	2800      	cmp	r0, #0
 801a6aa:	bf18      	it	ne
 801a6ac:	f44f 7561 	movne.w	r5, #900	@ 0x384
 801a6b0:	e7dd      	b.n	801a66e <rcl_wait_set_init+0xca>
 801a6b2:	2565      	movs	r5, #101	@ 0x65
 801a6b4:	e789      	b.n	801a5ca <rcl_wait_set_init+0x26>
 801a6b6:	250a      	movs	r5, #10
 801a6b8:	e787      	b.n	801a5ca <rcl_wait_set_init+0x26>
 801a6ba:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801a6bc:	e7f2      	b.n	801a6a4 <rcl_wait_set_init+0x100>
 801a6be:	bf00      	nop

0801a6c0 <rcl_wait_set_add_guard_condition>:
 801a6c0:	b318      	cbz	r0, 801a70a <rcl_wait_set_add_guard_condition+0x4a>
 801a6c2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a6c4:	b570      	push	{r4, r5, r6, lr}
 801a6c6:	4604      	mov	r4, r0
 801a6c8:	b30b      	cbz	r3, 801a70e <rcl_wait_set_add_guard_condition+0x4e>
 801a6ca:	b319      	cbz	r1, 801a714 <rcl_wait_set_add_guard_condition+0x54>
 801a6cc:	68dd      	ldr	r5, [r3, #12]
 801a6ce:	68c0      	ldr	r0, [r0, #12]
 801a6d0:	4285      	cmp	r5, r0
 801a6d2:	d217      	bcs.n	801a704 <rcl_wait_set_add_guard_condition+0x44>
 801a6d4:	68a0      	ldr	r0, [r4, #8]
 801a6d6:	1c6e      	adds	r6, r5, #1
 801a6d8:	60de      	str	r6, [r3, #12]
 801a6da:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801a6de:	b102      	cbz	r2, 801a6e2 <rcl_wait_set_add_guard_condition+0x22>
 801a6e0:	6015      	str	r5, [r2, #0]
 801a6e2:	4608      	mov	r0, r1
 801a6e4:	f7fe fbb0 	bl	8018e48 <rcl_guard_condition_get_rmw_handle>
 801a6e8:	b150      	cbz	r0, 801a700 <rcl_wait_set_add_guard_condition+0x40>
 801a6ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a6ec:	6842      	ldr	r2, [r0, #4]
 801a6ee:	695b      	ldr	r3, [r3, #20]
 801a6f0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a6f4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801a6f6:	6913      	ldr	r3, [r2, #16]
 801a6f8:	3301      	adds	r3, #1
 801a6fa:	2000      	movs	r0, #0
 801a6fc:	6113      	str	r3, [r2, #16]
 801a6fe:	bd70      	pop	{r4, r5, r6, pc}
 801a700:	2001      	movs	r0, #1
 801a702:	bd70      	pop	{r4, r5, r6, pc}
 801a704:	f240 3086 	movw	r0, #902	@ 0x386
 801a708:	bd70      	pop	{r4, r5, r6, pc}
 801a70a:	200b      	movs	r0, #11
 801a70c:	4770      	bx	lr
 801a70e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a712:	bd70      	pop	{r4, r5, r6, pc}
 801a714:	200b      	movs	r0, #11
 801a716:	bd70      	pop	{r4, r5, r6, pc}

0801a718 <rcl_wait_set_add_timer>:
 801a718:	b328      	cbz	r0, 801a766 <rcl_wait_set_add_timer+0x4e>
 801a71a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a71c:	b570      	push	{r4, r5, r6, lr}
 801a71e:	4604      	mov	r4, r0
 801a720:	b31b      	cbz	r3, 801a76a <rcl_wait_set_add_timer+0x52>
 801a722:	b329      	cbz	r1, 801a770 <rcl_wait_set_add_timer+0x58>
 801a724:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801a726:	6965      	ldr	r5, [r4, #20]
 801a728:	42a8      	cmp	r0, r5
 801a72a:	d219      	bcs.n	801a760 <rcl_wait_set_add_timer+0x48>
 801a72c:	6925      	ldr	r5, [r4, #16]
 801a72e:	1c46      	adds	r6, r0, #1
 801a730:	641e      	str	r6, [r3, #64]	@ 0x40
 801a732:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801a736:	b102      	cbz	r2, 801a73a <rcl_wait_set_add_timer+0x22>
 801a738:	6010      	str	r0, [r2, #0]
 801a73a:	4608      	mov	r0, r1
 801a73c:	f7ff fad4 	bl	8019ce8 <rcl_timer_get_guard_condition>
 801a740:	b168      	cbz	r0, 801a75e <rcl_wait_set_add_timer+0x46>
 801a742:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801a744:	68e3      	ldr	r3, [r4, #12]
 801a746:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801a748:	3b01      	subs	r3, #1
 801a74a:	441d      	add	r5, r3
 801a74c:	f7fe fb7c 	bl	8018e48 <rcl_guard_condition_get_rmw_handle>
 801a750:	b180      	cbz	r0, 801a774 <rcl_wait_set_add_timer+0x5c>
 801a752:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a754:	6842      	ldr	r2, [r0, #4]
 801a756:	695b      	ldr	r3, [r3, #20]
 801a758:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a75c:	2000      	movs	r0, #0
 801a75e:	bd70      	pop	{r4, r5, r6, pc}
 801a760:	f240 3086 	movw	r0, #902	@ 0x386
 801a764:	bd70      	pop	{r4, r5, r6, pc}
 801a766:	200b      	movs	r0, #11
 801a768:	4770      	bx	lr
 801a76a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a76e:	bd70      	pop	{r4, r5, r6, pc}
 801a770:	200b      	movs	r0, #11
 801a772:	bd70      	pop	{r4, r5, r6, pc}
 801a774:	2001      	movs	r0, #1
 801a776:	bd70      	pop	{r4, r5, r6, pc}

0801a778 <rcl_wait_set_add_client>:
 801a778:	b318      	cbz	r0, 801a7c2 <rcl_wait_set_add_client+0x4a>
 801a77a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a77c:	b570      	push	{r4, r5, r6, lr}
 801a77e:	4604      	mov	r4, r0
 801a780:	b30b      	cbz	r3, 801a7c6 <rcl_wait_set_add_client+0x4e>
 801a782:	b319      	cbz	r1, 801a7cc <rcl_wait_set_add_client+0x54>
 801a784:	699d      	ldr	r5, [r3, #24]
 801a786:	69c0      	ldr	r0, [r0, #28]
 801a788:	4285      	cmp	r5, r0
 801a78a:	d217      	bcs.n	801a7bc <rcl_wait_set_add_client+0x44>
 801a78c:	69a0      	ldr	r0, [r4, #24]
 801a78e:	1c6e      	adds	r6, r5, #1
 801a790:	619e      	str	r6, [r3, #24]
 801a792:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801a796:	b102      	cbz	r2, 801a79a <rcl_wait_set_add_client+0x22>
 801a798:	6015      	str	r5, [r2, #0]
 801a79a:	4608      	mov	r0, r1
 801a79c:	f7f5 f954 	bl	800fa48 <rcl_client_get_rmw_handle>
 801a7a0:	b150      	cbz	r0, 801a7b8 <rcl_wait_set_add_client+0x40>
 801a7a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a7a4:	6842      	ldr	r2, [r0, #4]
 801a7a6:	6a1b      	ldr	r3, [r3, #32]
 801a7a8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a7ac:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801a7ae:	69d3      	ldr	r3, [r2, #28]
 801a7b0:	3301      	adds	r3, #1
 801a7b2:	2000      	movs	r0, #0
 801a7b4:	61d3      	str	r3, [r2, #28]
 801a7b6:	bd70      	pop	{r4, r5, r6, pc}
 801a7b8:	2001      	movs	r0, #1
 801a7ba:	bd70      	pop	{r4, r5, r6, pc}
 801a7bc:	f240 3086 	movw	r0, #902	@ 0x386
 801a7c0:	bd70      	pop	{r4, r5, r6, pc}
 801a7c2:	200b      	movs	r0, #11
 801a7c4:	4770      	bx	lr
 801a7c6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a7ca:	bd70      	pop	{r4, r5, r6, pc}
 801a7cc:	200b      	movs	r0, #11
 801a7ce:	bd70      	pop	{r4, r5, r6, pc}

0801a7d0 <rcl_wait_set_add_service>:
 801a7d0:	b318      	cbz	r0, 801a81a <rcl_wait_set_add_service+0x4a>
 801a7d2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a7d4:	b570      	push	{r4, r5, r6, lr}
 801a7d6:	4604      	mov	r4, r0
 801a7d8:	b30b      	cbz	r3, 801a81e <rcl_wait_set_add_service+0x4e>
 801a7da:	b319      	cbz	r1, 801a824 <rcl_wait_set_add_service+0x54>
 801a7dc:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801a7de:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801a7e0:	4285      	cmp	r5, r0
 801a7e2:	d217      	bcs.n	801a814 <rcl_wait_set_add_service+0x44>
 801a7e4:	6a20      	ldr	r0, [r4, #32]
 801a7e6:	1c6e      	adds	r6, r5, #1
 801a7e8:	625e      	str	r6, [r3, #36]	@ 0x24
 801a7ea:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801a7ee:	b102      	cbz	r2, 801a7f2 <rcl_wait_set_add_service+0x22>
 801a7f0:	6015      	str	r5, [r2, #0]
 801a7f2:	4608      	mov	r0, r1
 801a7f4:	f7fe fe02 	bl	80193fc <rcl_service_get_rmw_handle>
 801a7f8:	b150      	cbz	r0, 801a810 <rcl_wait_set_add_service+0x40>
 801a7fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a7fc:	6842      	ldr	r2, [r0, #4]
 801a7fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a800:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a804:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801a806:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801a808:	3301      	adds	r3, #1
 801a80a:	2000      	movs	r0, #0
 801a80c:	6293      	str	r3, [r2, #40]	@ 0x28
 801a80e:	bd70      	pop	{r4, r5, r6, pc}
 801a810:	2001      	movs	r0, #1
 801a812:	bd70      	pop	{r4, r5, r6, pc}
 801a814:	f240 3086 	movw	r0, #902	@ 0x386
 801a818:	bd70      	pop	{r4, r5, r6, pc}
 801a81a:	200b      	movs	r0, #11
 801a81c:	4770      	bx	lr
 801a81e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a822:	bd70      	pop	{r4, r5, r6, pc}
 801a824:	200b      	movs	r0, #11
 801a826:	bd70      	pop	{r4, r5, r6, pc}

0801a828 <rcl_wait>:
 801a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a82c:	ed2d 8b02 	vpush	{d8}
 801a830:	b08d      	sub	sp, #52	@ 0x34
 801a832:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a836:	2800      	cmp	r0, #0
 801a838:	f000 8143 	beq.w	801aac2 <rcl_wait+0x29a>
 801a83c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801a83e:	4605      	mov	r5, r0
 801a840:	2e00      	cmp	r6, #0
 801a842:	f000 8112 	beq.w	801aa6a <rcl_wait+0x242>
 801a846:	6843      	ldr	r3, [r0, #4]
 801a848:	b983      	cbnz	r3, 801a86c <rcl_wait+0x44>
 801a84a:	68eb      	ldr	r3, [r5, #12]
 801a84c:	b973      	cbnz	r3, 801a86c <rcl_wait+0x44>
 801a84e:	696b      	ldr	r3, [r5, #20]
 801a850:	b963      	cbnz	r3, 801a86c <rcl_wait+0x44>
 801a852:	69eb      	ldr	r3, [r5, #28]
 801a854:	b953      	cbnz	r3, 801a86c <rcl_wait+0x44>
 801a856:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801a858:	b943      	cbnz	r3, 801a86c <rcl_wait+0x44>
 801a85a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801a85c:	b933      	cbnz	r3, 801a86c <rcl_wait+0x44>
 801a85e:	f240 3085 	movw	r0, #901	@ 0x385
 801a862:	b00d      	add	sp, #52	@ 0x34
 801a864:	ecbd 8b02 	vpop	{d8}
 801a868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a86c:	9b04      	ldr	r3, [sp, #16]
 801a86e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 801a870:	2b01      	cmp	r3, #1
 801a872:	9b05      	ldr	r3, [sp, #20]
 801a874:	f173 0300 	sbcs.w	r3, r3, #0
 801a878:	f2c0 80f0 	blt.w	801aa5c <rcl_wait+0x234>
 801a87c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801a880:	4643      	mov	r3, r8
 801a882:	2a00      	cmp	r2, #0
 801a884:	f000 8133 	beq.w	801aaee <rcl_wait+0x2c6>
 801a888:	2400      	movs	r4, #0
 801a88a:	4613      	mov	r3, r2
 801a88c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 801ab00 <rcl_wait+0x2d8>
 801a890:	46a2      	mov	sl, r4
 801a892:	46a3      	mov	fp, r4
 801a894:	f240 3921 	movw	r9, #801	@ 0x321
 801a898:	4632      	mov	r2, r6
 801a89a:	e014      	b.n	801a8c6 <rcl_wait+0x9e>
 801a89c:	2800      	cmp	r0, #0
 801a89e:	d1e0      	bne.n	801a862 <rcl_wait+0x3a>
 801a8a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a8a4:	4542      	cmp	r2, r8
 801a8a6:	eb73 0107 	sbcs.w	r1, r3, r7
 801a8aa:	da03      	bge.n	801a8b4 <rcl_wait+0x8c>
 801a8ac:	4690      	mov	r8, r2
 801a8ae:	461f      	mov	r7, r3
 801a8b0:	f04f 0b01 	mov.w	fp, #1
 801a8b4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801a8b6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801a8b8:	3401      	adds	r4, #1
 801a8ba:	f14a 0a00 	adc.w	sl, sl, #0
 801a8be:	429c      	cmp	r4, r3
 801a8c0:	f17a 0100 	sbcs.w	r1, sl, #0
 801a8c4:	d228      	bcs.n	801a918 <rcl_wait+0xf0>
 801a8c6:	6928      	ldr	r0, [r5, #16]
 801a8c8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801a8cc:	a908      	add	r1, sp, #32
 801a8ce:	00a6      	lsls	r6, r4, #2
 801a8d0:	2800      	cmp	r0, #0
 801a8d2:	d0f1      	beq.n	801a8b8 <rcl_wait+0x90>
 801a8d4:	68eb      	ldr	r3, [r5, #12]
 801a8d6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801a8da:	4423      	add	r3, r4
 801a8dc:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801a8e0:	f1be 0f00 	cmp.w	lr, #0
 801a8e4:	d006      	beq.n	801a8f4 <rcl_wait+0xcc>
 801a8e6:	6913      	ldr	r3, [r2, #16]
 801a8e8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801a8ec:	3301      	adds	r3, #1
 801a8ee:	6113      	str	r3, [r2, #16]
 801a8f0:	692b      	ldr	r3, [r5, #16]
 801a8f2:	5998      	ldr	r0, [r3, r6]
 801a8f4:	ed8d 8b08 	vstr	d8, [sp, #32]
 801a8f8:	f7ff f9c4 	bl	8019c84 <rcl_timer_get_time_until_next_call>
 801a8fc:	4548      	cmp	r0, r9
 801a8fe:	d1cd      	bne.n	801a89c <rcl_wait+0x74>
 801a900:	692b      	ldr	r3, [r5, #16]
 801a902:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801a904:	2100      	movs	r1, #0
 801a906:	5199      	str	r1, [r3, r6]
 801a908:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801a90a:	3401      	adds	r4, #1
 801a90c:	f14a 0a00 	adc.w	sl, sl, #0
 801a910:	429c      	cmp	r4, r3
 801a912:	f17a 0100 	sbcs.w	r1, sl, #0
 801a916:	d3d6      	bcc.n	801a8c6 <rcl_wait+0x9e>
 801a918:	4616      	mov	r6, r2
 801a91a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801a91e:	4313      	orrs	r3, r2
 801a920:	46d9      	mov	r9, fp
 801a922:	f040 80a9 	bne.w	801aa78 <rcl_wait+0x250>
 801a926:	2300      	movs	r3, #0
 801a928:	2200      	movs	r2, #0
 801a92a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a92e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801a932:	ab08      	add	r3, sp, #32
 801a934:	9302      	str	r3, [sp, #8]
 801a936:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 801a938:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801a93c:	e9cd 3200 	strd	r3, r2, [sp]
 801a940:	f106 0110 	add.w	r1, r6, #16
 801a944:	f106 031c 	add.w	r3, r6, #28
 801a948:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801a94c:	1d30      	adds	r0, r6, #4
 801a94e:	f001 f919 	bl	801bb84 <rmw_wait>
 801a952:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a954:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a956:	4680      	mov	r8, r0
 801a958:	b1ca      	cbz	r2, 801a98e <rcl_wait+0x166>
 801a95a:	2400      	movs	r4, #0
 801a95c:	4627      	mov	r7, r4
 801a95e:	692a      	ldr	r2, [r5, #16]
 801a960:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801a964:	f10d 011f 	add.w	r1, sp, #31
 801a968:	00a6      	lsls	r6, r4, #2
 801a96a:	b160      	cbz	r0, 801a986 <rcl_wait+0x15e>
 801a96c:	f88d 701f 	strb.w	r7, [sp, #31]
 801a970:	f7ff f94e 	bl	8019c10 <rcl_timer_is_ready>
 801a974:	2800      	cmp	r0, #0
 801a976:	f47f af74 	bne.w	801a862 <rcl_wait+0x3a>
 801a97a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801a97e:	b90b      	cbnz	r3, 801a984 <rcl_wait+0x15c>
 801a980:	692a      	ldr	r2, [r5, #16]
 801a982:	5193      	str	r3, [r2, r6]
 801a984:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a986:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a988:	3401      	adds	r4, #1
 801a98a:	42a2      	cmp	r2, r4
 801a98c:	d8e7      	bhi.n	801a95e <rcl_wait+0x136>
 801a98e:	f038 0002 	bics.w	r0, r8, #2
 801a992:	f040 8090 	bne.w	801aab6 <rcl_wait+0x28e>
 801a996:	686e      	ldr	r6, [r5, #4]
 801a998:	4602      	mov	r2, r0
 801a99a:	b91e      	cbnz	r6, 801a9a4 <rcl_wait+0x17c>
 801a99c:	e00d      	b.n	801a9ba <rcl_wait+0x192>
 801a99e:	3201      	adds	r2, #1
 801a9a0:	42b2      	cmp	r2, r6
 801a9a2:	d00a      	beq.n	801a9ba <rcl_wait+0x192>
 801a9a4:	6899      	ldr	r1, [r3, #8]
 801a9a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a9aa:	2900      	cmp	r1, #0
 801a9ac:	d1f7      	bne.n	801a99e <rcl_wait+0x176>
 801a9ae:	682c      	ldr	r4, [r5, #0]
 801a9b0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801a9b4:	3201      	adds	r2, #1
 801a9b6:	42b2      	cmp	r2, r6
 801a9b8:	d1f4      	bne.n	801a9a4 <rcl_wait+0x17c>
 801a9ba:	68ee      	ldr	r6, [r5, #12]
 801a9bc:	2200      	movs	r2, #0
 801a9be:	b91e      	cbnz	r6, 801a9c8 <rcl_wait+0x1a0>
 801a9c0:	e00d      	b.n	801a9de <rcl_wait+0x1b6>
 801a9c2:	3201      	adds	r2, #1
 801a9c4:	42b2      	cmp	r2, r6
 801a9c6:	d00a      	beq.n	801a9de <rcl_wait+0x1b6>
 801a9c8:	6959      	ldr	r1, [r3, #20]
 801a9ca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a9ce:	2900      	cmp	r1, #0
 801a9d0:	d1f7      	bne.n	801a9c2 <rcl_wait+0x19a>
 801a9d2:	68ac      	ldr	r4, [r5, #8]
 801a9d4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801a9d8:	3201      	adds	r2, #1
 801a9da:	42b2      	cmp	r2, r6
 801a9dc:	d1f4      	bne.n	801a9c8 <rcl_wait+0x1a0>
 801a9de:	69ee      	ldr	r6, [r5, #28]
 801a9e0:	2200      	movs	r2, #0
 801a9e2:	b91e      	cbnz	r6, 801a9ec <rcl_wait+0x1c4>
 801a9e4:	e00d      	b.n	801aa02 <rcl_wait+0x1da>
 801a9e6:	3201      	adds	r2, #1
 801a9e8:	42b2      	cmp	r2, r6
 801a9ea:	d00a      	beq.n	801aa02 <rcl_wait+0x1da>
 801a9ec:	6a19      	ldr	r1, [r3, #32]
 801a9ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a9f2:	2900      	cmp	r1, #0
 801a9f4:	d1f7      	bne.n	801a9e6 <rcl_wait+0x1be>
 801a9f6:	69ac      	ldr	r4, [r5, #24]
 801a9f8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801a9fc:	3201      	adds	r2, #1
 801a9fe:	42b2      	cmp	r2, r6
 801aa00:	d1f4      	bne.n	801a9ec <rcl_wait+0x1c4>
 801aa02:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801aa04:	2200      	movs	r2, #0
 801aa06:	b91e      	cbnz	r6, 801aa10 <rcl_wait+0x1e8>
 801aa08:	e00d      	b.n	801aa26 <rcl_wait+0x1fe>
 801aa0a:	3201      	adds	r2, #1
 801aa0c:	4296      	cmp	r6, r2
 801aa0e:	d00a      	beq.n	801aa26 <rcl_wait+0x1fe>
 801aa10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801aa12:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801aa16:	2900      	cmp	r1, #0
 801aa18:	d1f7      	bne.n	801aa0a <rcl_wait+0x1e2>
 801aa1a:	6a2c      	ldr	r4, [r5, #32]
 801aa1c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801aa20:	3201      	adds	r2, #1
 801aa22:	4296      	cmp	r6, r2
 801aa24:	d1f4      	bne.n	801aa10 <rcl_wait+0x1e8>
 801aa26:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 801aa28:	2200      	movs	r2, #0
 801aa2a:	b91e      	cbnz	r6, 801aa34 <rcl_wait+0x20c>
 801aa2c:	e00d      	b.n	801aa4a <rcl_wait+0x222>
 801aa2e:	3201      	adds	r2, #1
 801aa30:	42b2      	cmp	r2, r6
 801aa32:	d00a      	beq.n	801aa4a <rcl_wait+0x222>
 801aa34:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801aa36:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801aa3a:	2900      	cmp	r1, #0
 801aa3c:	d1f7      	bne.n	801aa2e <rcl_wait+0x206>
 801aa3e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 801aa40:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801aa44:	3201      	adds	r2, #1
 801aa46:	42b2      	cmp	r2, r6
 801aa48:	d1f4      	bne.n	801aa34 <rcl_wait+0x20c>
 801aa4a:	f1b8 0f02 	cmp.w	r8, #2
 801aa4e:	f47f af08 	bne.w	801a862 <rcl_wait+0x3a>
 801aa52:	464b      	mov	r3, r9
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	bf08      	it	eq
 801aa58:	2002      	moveq	r0, #2
 801aa5a:	e702      	b.n	801a862 <rcl_wait+0x3a>
 801aa5c:	2a00      	cmp	r2, #0
 801aa5e:	d03a      	beq.n	801aad6 <rcl_wait+0x2ae>
 801aa60:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801aa64:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801aa68:	e70e      	b.n	801a888 <rcl_wait+0x60>
 801aa6a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801aa6e:	b00d      	add	sp, #52	@ 0x34
 801aa70:	ecbd 8b02 	vpop	{d8}
 801aa74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa78:	9b04      	ldr	r3, [sp, #16]
 801aa7a:	2b01      	cmp	r3, #1
 801aa7c:	9b05      	ldr	r3, [sp, #20]
 801aa7e:	f173 0300 	sbcs.w	r3, r3, #0
 801aa82:	db24      	blt.n	801aace <rcl_wait+0x2a6>
 801aa84:	2f00      	cmp	r7, #0
 801aa86:	bfbc      	itt	lt
 801aa88:	f04f 0800 	movlt.w	r8, #0
 801aa8c:	4647      	movlt	r7, r8
 801aa8e:	a31e      	add	r3, pc, #120	@ (adr r3, 801ab08 <rcl_wait+0x2e0>)
 801aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa94:	4640      	mov	r0, r8
 801aa96:	4639      	mov	r1, r7
 801aa98:	f7e6 f896 	bl	8000bc8 <__aeabi_ldivmod>
 801aa9c:	a31a      	add	r3, pc, #104	@ (adr r3, 801ab08 <rcl_wait+0x2e0>)
 801aa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaa2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801aaa6:	4640      	mov	r0, r8
 801aaa8:	4639      	mov	r1, r7
 801aaaa:	f7e6 f88d 	bl	8000bc8 <__aeabi_ldivmod>
 801aaae:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801aab2:	ab08      	add	r3, sp, #32
 801aab4:	e73e      	b.n	801a934 <rcl_wait+0x10c>
 801aab6:	2001      	movs	r0, #1
 801aab8:	b00d      	add	sp, #52	@ 0x34
 801aaba:	ecbd 8b02 	vpop	{d8}
 801aabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aac2:	200b      	movs	r0, #11
 801aac4:	b00d      	add	sp, #52	@ 0x34
 801aac6:	ecbd 8b02 	vpop	{d8}
 801aaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aace:	465b      	mov	r3, fp
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	d1d7      	bne.n	801aa84 <rcl_wait+0x25c>
 801aad4:	e72e      	b.n	801a934 <rcl_wait+0x10c>
 801aad6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801aada:	430b      	orrs	r3, r1
 801aadc:	bf08      	it	eq
 801aade:	4691      	moveq	r9, r2
 801aae0:	f43f af21 	beq.w	801a926 <rcl_wait+0xfe>
 801aae4:	9b04      	ldr	r3, [sp, #16]
 801aae6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801aaea:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801aaee:	2b01      	cmp	r3, #1
 801aaf0:	9b05      	ldr	r3, [sp, #20]
 801aaf2:	f173 0300 	sbcs.w	r3, r3, #0
 801aaf6:	f04f 0300 	mov.w	r3, #0
 801aafa:	4699      	mov	r9, r3
 801aafc:	dac2      	bge.n	801aa84 <rcl_wait+0x25c>
 801aafe:	e719      	b.n	801a934 <rcl_wait+0x10c>
 801ab00:	ffffffff 	.word	0xffffffff
 801ab04:	7fffffff 	.word	0x7fffffff
 801ab08:	3b9aca00 	.word	0x3b9aca00
 801ab0c:	00000000 	.word	0x00000000

0801ab10 <rcl_action_take_goal_response>:
 801ab10:	2800      	cmp	r0, #0
 801ab12:	d039      	beq.n	801ab88 <rcl_action_take_goal_response+0x78>
 801ab14:	b570      	push	{r4, r5, r6, lr}
 801ab16:	4604      	mov	r4, r0
 801ab18:	6800      	ldr	r0, [r0, #0]
 801ab1a:	b380      	cbz	r0, 801ab7e <rcl_action_take_goal_response+0x6e>
 801ab1c:	460d      	mov	r5, r1
 801ab1e:	4616      	mov	r6, r2
 801ab20:	f7f5 f816 	bl	800fb50 <rcl_client_is_valid>
 801ab24:	b330      	cbz	r0, 801ab74 <rcl_action_take_goal_response+0x64>
 801ab26:	6820      	ldr	r0, [r4, #0]
 801ab28:	3004      	adds	r0, #4
 801ab2a:	f7f5 f811 	bl	800fb50 <rcl_client_is_valid>
 801ab2e:	b308      	cbz	r0, 801ab74 <rcl_action_take_goal_response+0x64>
 801ab30:	6820      	ldr	r0, [r4, #0]
 801ab32:	3008      	adds	r0, #8
 801ab34:	f7f5 f80c 	bl	800fb50 <rcl_client_is_valid>
 801ab38:	b1e0      	cbz	r0, 801ab74 <rcl_action_take_goal_response+0x64>
 801ab3a:	6820      	ldr	r0, [r4, #0]
 801ab3c:	300c      	adds	r0, #12
 801ab3e:	f7fe fd23 	bl	8019588 <rcl_subscription_is_valid>
 801ab42:	b1b8      	cbz	r0, 801ab74 <rcl_action_take_goal_response+0x64>
 801ab44:	6820      	ldr	r0, [r4, #0]
 801ab46:	3010      	adds	r0, #16
 801ab48:	f7fe fd1e 	bl	8019588 <rcl_subscription_is_valid>
 801ab4c:	b190      	cbz	r0, 801ab74 <rcl_action_take_goal_response+0x64>
 801ab4e:	b1cd      	cbz	r5, 801ab84 <rcl_action_take_goal_response+0x74>
 801ab50:	b1c6      	cbz	r6, 801ab84 <rcl_action_take_goal_response+0x74>
 801ab52:	6820      	ldr	r0, [r4, #0]
 801ab54:	4632      	mov	r2, r6
 801ab56:	4629      	mov	r1, r5
 801ab58:	f7f4 ffb2 	bl	800fac0 <rcl_take_response>
 801ab5c:	b148      	cbz	r0, 801ab72 <rcl_action_take_goal_response+0x62>
 801ab5e:	280a      	cmp	r0, #10
 801ab60:	d007      	beq.n	801ab72 <rcl_action_take_goal_response+0x62>
 801ab62:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801ab66:	f640 0337 	movw	r3, #2103	@ 0x837
 801ab6a:	4290      	cmp	r0, r2
 801ab6c:	bf0c      	ite	eq
 801ab6e:	4618      	moveq	r0, r3
 801ab70:	2001      	movne	r0, #1
 801ab72:	bd70      	pop	{r4, r5, r6, pc}
 801ab74:	f7f6 fd40 	bl	80115f8 <rcutils_reset_error>
 801ab78:	f640 0036 	movw	r0, #2102	@ 0x836
 801ab7c:	bd70      	pop	{r4, r5, r6, pc}
 801ab7e:	f640 0036 	movw	r0, #2102	@ 0x836
 801ab82:	bd70      	pop	{r4, r5, r6, pc}
 801ab84:	200b      	movs	r0, #11
 801ab86:	bd70      	pop	{r4, r5, r6, pc}
 801ab88:	f640 0036 	movw	r0, #2102	@ 0x836
 801ab8c:	4770      	bx	lr
 801ab8e:	bf00      	nop

0801ab90 <rcl_action_send_result_request>:
 801ab90:	b390      	cbz	r0, 801abf8 <rcl_action_send_result_request+0x68>
 801ab92:	b570      	push	{r4, r5, r6, lr}
 801ab94:	4604      	mov	r4, r0
 801ab96:	6800      	ldr	r0, [r0, #0]
 801ab98:	b348      	cbz	r0, 801abee <rcl_action_send_result_request+0x5e>
 801ab9a:	460d      	mov	r5, r1
 801ab9c:	4616      	mov	r6, r2
 801ab9e:	f7f4 ffd7 	bl	800fb50 <rcl_client_is_valid>
 801aba2:	b1f8      	cbz	r0, 801abe4 <rcl_action_send_result_request+0x54>
 801aba4:	6820      	ldr	r0, [r4, #0]
 801aba6:	3004      	adds	r0, #4
 801aba8:	f7f4 ffd2 	bl	800fb50 <rcl_client_is_valid>
 801abac:	b1d0      	cbz	r0, 801abe4 <rcl_action_send_result_request+0x54>
 801abae:	6820      	ldr	r0, [r4, #0]
 801abb0:	3008      	adds	r0, #8
 801abb2:	f7f4 ffcd 	bl	800fb50 <rcl_client_is_valid>
 801abb6:	b1a8      	cbz	r0, 801abe4 <rcl_action_send_result_request+0x54>
 801abb8:	6820      	ldr	r0, [r4, #0]
 801abba:	300c      	adds	r0, #12
 801abbc:	f7fe fce4 	bl	8019588 <rcl_subscription_is_valid>
 801abc0:	b180      	cbz	r0, 801abe4 <rcl_action_send_result_request+0x54>
 801abc2:	6820      	ldr	r0, [r4, #0]
 801abc4:	3010      	adds	r0, #16
 801abc6:	f7fe fcdf 	bl	8019588 <rcl_subscription_is_valid>
 801abca:	b158      	cbz	r0, 801abe4 <rcl_action_send_result_request+0x54>
 801abcc:	b195      	cbz	r5, 801abf4 <rcl_action_send_result_request+0x64>
 801abce:	b18e      	cbz	r6, 801abf4 <rcl_action_send_result_request+0x64>
 801abd0:	6820      	ldr	r0, [r4, #0]
 801abd2:	4632      	mov	r2, r6
 801abd4:	4629      	mov	r1, r5
 801abd6:	3008      	adds	r0, #8
 801abd8:	f7f4 ff3c 	bl	800fa54 <rcl_send_request>
 801abdc:	3800      	subs	r0, #0
 801abde:	bf18      	it	ne
 801abe0:	2001      	movne	r0, #1
 801abe2:	bd70      	pop	{r4, r5, r6, pc}
 801abe4:	f7f6 fd08 	bl	80115f8 <rcutils_reset_error>
 801abe8:	f640 0036 	movw	r0, #2102	@ 0x836
 801abec:	bd70      	pop	{r4, r5, r6, pc}
 801abee:	f640 0036 	movw	r0, #2102	@ 0x836
 801abf2:	bd70      	pop	{r4, r5, r6, pc}
 801abf4:	200b      	movs	r0, #11
 801abf6:	bd70      	pop	{r4, r5, r6, pc}
 801abf8:	f640 0036 	movw	r0, #2102	@ 0x836
 801abfc:	4770      	bx	lr
 801abfe:	bf00      	nop

0801ac00 <rcl_action_take_result_response>:
 801ac00:	2800      	cmp	r0, #0
 801ac02:	d03a      	beq.n	801ac7a <rcl_action_take_result_response+0x7a>
 801ac04:	b570      	push	{r4, r5, r6, lr}
 801ac06:	4604      	mov	r4, r0
 801ac08:	6800      	ldr	r0, [r0, #0]
 801ac0a:	b388      	cbz	r0, 801ac70 <rcl_action_take_result_response+0x70>
 801ac0c:	460d      	mov	r5, r1
 801ac0e:	4616      	mov	r6, r2
 801ac10:	f7f4 ff9e 	bl	800fb50 <rcl_client_is_valid>
 801ac14:	b338      	cbz	r0, 801ac66 <rcl_action_take_result_response+0x66>
 801ac16:	6820      	ldr	r0, [r4, #0]
 801ac18:	3004      	adds	r0, #4
 801ac1a:	f7f4 ff99 	bl	800fb50 <rcl_client_is_valid>
 801ac1e:	b310      	cbz	r0, 801ac66 <rcl_action_take_result_response+0x66>
 801ac20:	6820      	ldr	r0, [r4, #0]
 801ac22:	3008      	adds	r0, #8
 801ac24:	f7f4 ff94 	bl	800fb50 <rcl_client_is_valid>
 801ac28:	b1e8      	cbz	r0, 801ac66 <rcl_action_take_result_response+0x66>
 801ac2a:	6820      	ldr	r0, [r4, #0]
 801ac2c:	300c      	adds	r0, #12
 801ac2e:	f7fe fcab 	bl	8019588 <rcl_subscription_is_valid>
 801ac32:	b1c0      	cbz	r0, 801ac66 <rcl_action_take_result_response+0x66>
 801ac34:	6820      	ldr	r0, [r4, #0]
 801ac36:	3010      	adds	r0, #16
 801ac38:	f7fe fca6 	bl	8019588 <rcl_subscription_is_valid>
 801ac3c:	b198      	cbz	r0, 801ac66 <rcl_action_take_result_response+0x66>
 801ac3e:	b1d5      	cbz	r5, 801ac76 <rcl_action_take_result_response+0x76>
 801ac40:	b1ce      	cbz	r6, 801ac76 <rcl_action_take_result_response+0x76>
 801ac42:	6820      	ldr	r0, [r4, #0]
 801ac44:	4632      	mov	r2, r6
 801ac46:	4629      	mov	r1, r5
 801ac48:	3008      	adds	r0, #8
 801ac4a:	f7f4 ff39 	bl	800fac0 <rcl_take_response>
 801ac4e:	b148      	cbz	r0, 801ac64 <rcl_action_take_result_response+0x64>
 801ac50:	280a      	cmp	r0, #10
 801ac52:	d007      	beq.n	801ac64 <rcl_action_take_result_response+0x64>
 801ac54:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801ac58:	f640 0337 	movw	r3, #2103	@ 0x837
 801ac5c:	4290      	cmp	r0, r2
 801ac5e:	bf0c      	ite	eq
 801ac60:	4618      	moveq	r0, r3
 801ac62:	2001      	movne	r0, #1
 801ac64:	bd70      	pop	{r4, r5, r6, pc}
 801ac66:	f7f6 fcc7 	bl	80115f8 <rcutils_reset_error>
 801ac6a:	f640 0036 	movw	r0, #2102	@ 0x836
 801ac6e:	bd70      	pop	{r4, r5, r6, pc}
 801ac70:	f640 0036 	movw	r0, #2102	@ 0x836
 801ac74:	bd70      	pop	{r4, r5, r6, pc}
 801ac76:	200b      	movs	r0, #11
 801ac78:	bd70      	pop	{r4, r5, r6, pc}
 801ac7a:	f640 0036 	movw	r0, #2102	@ 0x836
 801ac7e:	4770      	bx	lr

0801ac80 <rcl_action_take_cancel_response>:
 801ac80:	2800      	cmp	r0, #0
 801ac82:	d03a      	beq.n	801acfa <rcl_action_take_cancel_response+0x7a>
 801ac84:	b570      	push	{r4, r5, r6, lr}
 801ac86:	4604      	mov	r4, r0
 801ac88:	6800      	ldr	r0, [r0, #0]
 801ac8a:	b388      	cbz	r0, 801acf0 <rcl_action_take_cancel_response+0x70>
 801ac8c:	460d      	mov	r5, r1
 801ac8e:	4616      	mov	r6, r2
 801ac90:	f7f4 ff5e 	bl	800fb50 <rcl_client_is_valid>
 801ac94:	b338      	cbz	r0, 801ace6 <rcl_action_take_cancel_response+0x66>
 801ac96:	6820      	ldr	r0, [r4, #0]
 801ac98:	3004      	adds	r0, #4
 801ac9a:	f7f4 ff59 	bl	800fb50 <rcl_client_is_valid>
 801ac9e:	b310      	cbz	r0, 801ace6 <rcl_action_take_cancel_response+0x66>
 801aca0:	6820      	ldr	r0, [r4, #0]
 801aca2:	3008      	adds	r0, #8
 801aca4:	f7f4 ff54 	bl	800fb50 <rcl_client_is_valid>
 801aca8:	b1e8      	cbz	r0, 801ace6 <rcl_action_take_cancel_response+0x66>
 801acaa:	6820      	ldr	r0, [r4, #0]
 801acac:	300c      	adds	r0, #12
 801acae:	f7fe fc6b 	bl	8019588 <rcl_subscription_is_valid>
 801acb2:	b1c0      	cbz	r0, 801ace6 <rcl_action_take_cancel_response+0x66>
 801acb4:	6820      	ldr	r0, [r4, #0]
 801acb6:	3010      	adds	r0, #16
 801acb8:	f7fe fc66 	bl	8019588 <rcl_subscription_is_valid>
 801acbc:	b198      	cbz	r0, 801ace6 <rcl_action_take_cancel_response+0x66>
 801acbe:	b1d5      	cbz	r5, 801acf6 <rcl_action_take_cancel_response+0x76>
 801acc0:	b1ce      	cbz	r6, 801acf6 <rcl_action_take_cancel_response+0x76>
 801acc2:	6820      	ldr	r0, [r4, #0]
 801acc4:	4632      	mov	r2, r6
 801acc6:	4629      	mov	r1, r5
 801acc8:	3004      	adds	r0, #4
 801acca:	f7f4 fef9 	bl	800fac0 <rcl_take_response>
 801acce:	b148      	cbz	r0, 801ace4 <rcl_action_take_cancel_response+0x64>
 801acd0:	280a      	cmp	r0, #10
 801acd2:	d007      	beq.n	801ace4 <rcl_action_take_cancel_response+0x64>
 801acd4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801acd8:	f640 0337 	movw	r3, #2103	@ 0x837
 801acdc:	4290      	cmp	r0, r2
 801acde:	bf0c      	ite	eq
 801ace0:	4618      	moveq	r0, r3
 801ace2:	2001      	movne	r0, #1
 801ace4:	bd70      	pop	{r4, r5, r6, pc}
 801ace6:	f7f6 fc87 	bl	80115f8 <rcutils_reset_error>
 801acea:	f640 0036 	movw	r0, #2102	@ 0x836
 801acee:	bd70      	pop	{r4, r5, r6, pc}
 801acf0:	f640 0036 	movw	r0, #2102	@ 0x836
 801acf4:	bd70      	pop	{r4, r5, r6, pc}
 801acf6:	200b      	movs	r0, #11
 801acf8:	bd70      	pop	{r4, r5, r6, pc}
 801acfa:	f640 0036 	movw	r0, #2102	@ 0x836
 801acfe:	4770      	bx	lr

0801ad00 <rcl_action_take_feedback>:
 801ad00:	2800      	cmp	r0, #0
 801ad02:	d038      	beq.n	801ad76 <rcl_action_take_feedback+0x76>
 801ad04:	b530      	push	{r4, r5, lr}
 801ad06:	4604      	mov	r4, r0
 801ad08:	6800      	ldr	r0, [r0, #0]
 801ad0a:	b091      	sub	sp, #68	@ 0x44
 801ad0c:	b378      	cbz	r0, 801ad6e <rcl_action_take_feedback+0x6e>
 801ad0e:	460d      	mov	r5, r1
 801ad10:	f7f4 ff1e 	bl	800fb50 <rcl_client_is_valid>
 801ad14:	b328      	cbz	r0, 801ad62 <rcl_action_take_feedback+0x62>
 801ad16:	6820      	ldr	r0, [r4, #0]
 801ad18:	3004      	adds	r0, #4
 801ad1a:	f7f4 ff19 	bl	800fb50 <rcl_client_is_valid>
 801ad1e:	b300      	cbz	r0, 801ad62 <rcl_action_take_feedback+0x62>
 801ad20:	6820      	ldr	r0, [r4, #0]
 801ad22:	3008      	adds	r0, #8
 801ad24:	f7f4 ff14 	bl	800fb50 <rcl_client_is_valid>
 801ad28:	b1d8      	cbz	r0, 801ad62 <rcl_action_take_feedback+0x62>
 801ad2a:	6820      	ldr	r0, [r4, #0]
 801ad2c:	300c      	adds	r0, #12
 801ad2e:	f7fe fc2b 	bl	8019588 <rcl_subscription_is_valid>
 801ad32:	b1b0      	cbz	r0, 801ad62 <rcl_action_take_feedback+0x62>
 801ad34:	6820      	ldr	r0, [r4, #0]
 801ad36:	3010      	adds	r0, #16
 801ad38:	f7fe fc26 	bl	8019588 <rcl_subscription_is_valid>
 801ad3c:	b188      	cbz	r0, 801ad62 <rcl_action_take_feedback+0x62>
 801ad3e:	b1ed      	cbz	r5, 801ad7c <rcl_action_take_feedback+0x7c>
 801ad40:	6820      	ldr	r0, [r4, #0]
 801ad42:	2300      	movs	r3, #0
 801ad44:	466a      	mov	r2, sp
 801ad46:	4629      	mov	r1, r5
 801ad48:	300c      	adds	r0, #12
 801ad4a:	f7fe fbbf 	bl	80194cc <rcl_take>
 801ad4e:	b160      	cbz	r0, 801ad6a <rcl_action_take_feedback+0x6a>
 801ad50:	f240 1391 	movw	r3, #401	@ 0x191
 801ad54:	4298      	cmp	r0, r3
 801ad56:	d014      	beq.n	801ad82 <rcl_action_take_feedback+0x82>
 801ad58:	280a      	cmp	r0, #10
 801ad5a:	bf18      	it	ne
 801ad5c:	2001      	movne	r0, #1
 801ad5e:	b011      	add	sp, #68	@ 0x44
 801ad60:	bd30      	pop	{r4, r5, pc}
 801ad62:	f7f6 fc49 	bl	80115f8 <rcutils_reset_error>
 801ad66:	f640 0036 	movw	r0, #2102	@ 0x836
 801ad6a:	b011      	add	sp, #68	@ 0x44
 801ad6c:	bd30      	pop	{r4, r5, pc}
 801ad6e:	f640 0036 	movw	r0, #2102	@ 0x836
 801ad72:	b011      	add	sp, #68	@ 0x44
 801ad74:	bd30      	pop	{r4, r5, pc}
 801ad76:	f640 0036 	movw	r0, #2102	@ 0x836
 801ad7a:	4770      	bx	lr
 801ad7c:	200b      	movs	r0, #11
 801ad7e:	b011      	add	sp, #68	@ 0x44
 801ad80:	bd30      	pop	{r4, r5, pc}
 801ad82:	f640 0037 	movw	r0, #2103	@ 0x837
 801ad86:	e7f0      	b.n	801ad6a <rcl_action_take_feedback+0x6a>

0801ad88 <rcl_action_wait_set_add_action_client>:
 801ad88:	2800      	cmp	r0, #0
 801ad8a:	d048      	beq.n	801ae1e <rcl_action_wait_set_add_action_client+0x96>
 801ad8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad8e:	460c      	mov	r4, r1
 801ad90:	2900      	cmp	r1, #0
 801ad92:	d03c      	beq.n	801ae0e <rcl_action_wait_set_add_action_client+0x86>
 801ad94:	4605      	mov	r5, r0
 801ad96:	6808      	ldr	r0, [r1, #0]
 801ad98:	2800      	cmp	r0, #0
 801ad9a:	d038      	beq.n	801ae0e <rcl_action_wait_set_add_action_client+0x86>
 801ad9c:	4617      	mov	r7, r2
 801ad9e:	461e      	mov	r6, r3
 801ada0:	f7f4 fed6 	bl	800fb50 <rcl_client_is_valid>
 801ada4:	b3b0      	cbz	r0, 801ae14 <rcl_action_wait_set_add_action_client+0x8c>
 801ada6:	6820      	ldr	r0, [r4, #0]
 801ada8:	3004      	adds	r0, #4
 801adaa:	f7f4 fed1 	bl	800fb50 <rcl_client_is_valid>
 801adae:	b388      	cbz	r0, 801ae14 <rcl_action_wait_set_add_action_client+0x8c>
 801adb0:	6820      	ldr	r0, [r4, #0]
 801adb2:	3008      	adds	r0, #8
 801adb4:	f7f4 fecc 	bl	800fb50 <rcl_client_is_valid>
 801adb8:	b360      	cbz	r0, 801ae14 <rcl_action_wait_set_add_action_client+0x8c>
 801adba:	6820      	ldr	r0, [r4, #0]
 801adbc:	300c      	adds	r0, #12
 801adbe:	f7fe fbe3 	bl	8019588 <rcl_subscription_is_valid>
 801adc2:	b338      	cbz	r0, 801ae14 <rcl_action_wait_set_add_action_client+0x8c>
 801adc4:	6820      	ldr	r0, [r4, #0]
 801adc6:	3010      	adds	r0, #16
 801adc8:	f7fe fbde 	bl	8019588 <rcl_subscription_is_valid>
 801adcc:	b310      	cbz	r0, 801ae14 <rcl_action_wait_set_add_action_client+0x8c>
 801adce:	6821      	ldr	r1, [r4, #0]
 801add0:	4628      	mov	r0, r5
 801add2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801add6:	f7ff fccf 	bl	801a778 <rcl_wait_set_add_client>
 801adda:	b9b8      	cbnz	r0, 801ae0c <rcl_action_wait_set_add_action_client+0x84>
 801addc:	6821      	ldr	r1, [r4, #0]
 801adde:	4628      	mov	r0, r5
 801ade0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801ade4:	3104      	adds	r1, #4
 801ade6:	f7ff fcc7 	bl	801a778 <rcl_wait_set_add_client>
 801adea:	b978      	cbnz	r0, 801ae0c <rcl_action_wait_set_add_action_client+0x84>
 801adec:	6821      	ldr	r1, [r4, #0]
 801adee:	4628      	mov	r0, r5
 801adf0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801adf4:	3108      	adds	r1, #8
 801adf6:	f7ff fcbf 	bl	801a778 <rcl_wait_set_add_client>
 801adfa:	b938      	cbnz	r0, 801ae0c <rcl_action_wait_set_add_action_client+0x84>
 801adfc:	6821      	ldr	r1, [r4, #0]
 801adfe:	4628      	mov	r0, r5
 801ae00:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801ae04:	310c      	adds	r1, #12
 801ae06:	f7ff f96f 	bl	801a0e8 <rcl_wait_set_add_subscription>
 801ae0a:	b158      	cbz	r0, 801ae24 <rcl_action_wait_set_add_action_client+0x9c>
 801ae0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae0e:	f640 0036 	movw	r0, #2102	@ 0x836
 801ae12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae14:	f7f6 fbf0 	bl	80115f8 <rcutils_reset_error>
 801ae18:	f640 0036 	movw	r0, #2102	@ 0x836
 801ae1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae1e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ae22:	4770      	bx	lr
 801ae24:	6821      	ldr	r1, [r4, #0]
 801ae26:	4628      	mov	r0, r5
 801ae28:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801ae2c:	3110      	adds	r1, #16
 801ae2e:	f7ff f95b 	bl	801a0e8 <rcl_wait_set_add_subscription>
 801ae32:	2800      	cmp	r0, #0
 801ae34:	d1ea      	bne.n	801ae0c <rcl_action_wait_set_add_action_client+0x84>
 801ae36:	b11f      	cbz	r7, 801ae40 <rcl_action_wait_set_add_action_client+0xb8>
 801ae38:	6823      	ldr	r3, [r4, #0]
 801ae3a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801ae3e:	603b      	str	r3, [r7, #0]
 801ae40:	2e00      	cmp	r6, #0
 801ae42:	d0e3      	beq.n	801ae0c <rcl_action_wait_set_add_action_client+0x84>
 801ae44:	6823      	ldr	r3, [r4, #0]
 801ae46:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801ae4a:	6033      	str	r3, [r6, #0]
 801ae4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae4e:	bf00      	nop

0801ae50 <rcl_action_client_wait_set_get_entities_ready>:
 801ae50:	2800      	cmp	r0, #0
 801ae52:	f000 808d 	beq.w	801af70 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801ae56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae5a:	460c      	mov	r4, r1
 801ae5c:	2900      	cmp	r1, #0
 801ae5e:	d077      	beq.n	801af50 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801ae60:	4605      	mov	r5, r0
 801ae62:	6808      	ldr	r0, [r1, #0]
 801ae64:	2800      	cmp	r0, #0
 801ae66:	d073      	beq.n	801af50 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801ae68:	4616      	mov	r6, r2
 801ae6a:	461f      	mov	r7, r3
 801ae6c:	f7f4 fe70 	bl	800fb50 <rcl_client_is_valid>
 801ae70:	2800      	cmp	r0, #0
 801ae72:	d071      	beq.n	801af58 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801ae74:	6820      	ldr	r0, [r4, #0]
 801ae76:	3004      	adds	r0, #4
 801ae78:	f7f4 fe6a 	bl	800fb50 <rcl_client_is_valid>
 801ae7c:	2800      	cmp	r0, #0
 801ae7e:	d06b      	beq.n	801af58 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801ae80:	6820      	ldr	r0, [r4, #0]
 801ae82:	3008      	adds	r0, #8
 801ae84:	f7f4 fe64 	bl	800fb50 <rcl_client_is_valid>
 801ae88:	2800      	cmp	r0, #0
 801ae8a:	d065      	beq.n	801af58 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801ae8c:	6820      	ldr	r0, [r4, #0]
 801ae8e:	300c      	adds	r0, #12
 801ae90:	f7fe fb7a 	bl	8019588 <rcl_subscription_is_valid>
 801ae94:	2800      	cmp	r0, #0
 801ae96:	d05f      	beq.n	801af58 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801ae98:	6820      	ldr	r0, [r4, #0]
 801ae9a:	3010      	adds	r0, #16
 801ae9c:	f7fe fb74 	bl	8019588 <rcl_subscription_is_valid>
 801aea0:	2800      	cmp	r0, #0
 801aea2:	d059      	beq.n	801af58 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801aea4:	2e00      	cmp	r6, #0
 801aea6:	d060      	beq.n	801af6a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801aea8:	2f00      	cmp	r7, #0
 801aeaa:	d05e      	beq.n	801af6a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801aeac:	9b06      	ldr	r3, [sp, #24]
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	d05b      	beq.n	801af6a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801aeb2:	9b07      	ldr	r3, [sp, #28]
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d058      	beq.n	801af6a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801aeb8:	9b08      	ldr	r3, [sp, #32]
 801aeba:	2b00      	cmp	r3, #0
 801aebc:	d055      	beq.n	801af6a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801aebe:	6823      	ldr	r3, [r4, #0]
 801aec0:	686a      	ldr	r2, [r5, #4]
 801aec2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801aec6:	428a      	cmp	r2, r1
 801aec8:	d94c      	bls.n	801af64 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801aeca:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801aece:	4282      	cmp	r2, r0
 801aed0:	d948      	bls.n	801af64 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801aed2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801aed6:	69ea      	ldr	r2, [r5, #28]
 801aed8:	42a2      	cmp	r2, r4
 801aeda:	d943      	bls.n	801af64 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801aedc:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 801aee0:	4562      	cmp	r2, ip
 801aee2:	d93f      	bls.n	801af64 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801aee4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 801aee8:	4572      	cmp	r2, lr
 801aeea:	d93b      	bls.n	801af64 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801aeec:	69aa      	ldr	r2, [r5, #24]
 801aeee:	682d      	ldr	r5, [r5, #0]
 801aef0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801aef4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 801aef8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801aefc:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 801af00:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801af04:	f103 0c0c 	add.w	ip, r3, #12
 801af08:	eba5 050c 	sub.w	r5, r5, ip
 801af0c:	fab5 f585 	clz	r5, r5
 801af10:	096d      	lsrs	r5, r5, #5
 801af12:	7035      	strb	r5, [r6, #0]
 801af14:	f103 0510 	add.w	r5, r3, #16
 801af18:	1b64      	subs	r4, r4, r5
 801af1a:	fab4 f484 	clz	r4, r4
 801af1e:	0964      	lsrs	r4, r4, #5
 801af20:	703c      	strb	r4, [r7, #0]
 801af22:	eba3 0008 	sub.w	r0, r3, r8
 801af26:	1d1c      	adds	r4, r3, #4
 801af28:	3308      	adds	r3, #8
 801af2a:	1ad3      	subs	r3, r2, r3
 801af2c:	fab0 f080 	clz	r0, r0
 801af30:	9a06      	ldr	r2, [sp, #24]
 801af32:	0940      	lsrs	r0, r0, #5
 801af34:	1b09      	subs	r1, r1, r4
 801af36:	7010      	strb	r0, [r2, #0]
 801af38:	fab1 f181 	clz	r1, r1
 801af3c:	9a07      	ldr	r2, [sp, #28]
 801af3e:	0949      	lsrs	r1, r1, #5
 801af40:	7011      	strb	r1, [r2, #0]
 801af42:	fab3 f383 	clz	r3, r3
 801af46:	9a08      	ldr	r2, [sp, #32]
 801af48:	095b      	lsrs	r3, r3, #5
 801af4a:	2000      	movs	r0, #0
 801af4c:	7013      	strb	r3, [r2, #0]
 801af4e:	e001      	b.n	801af54 <rcl_action_client_wait_set_get_entities_ready+0x104>
 801af50:	f640 0036 	movw	r0, #2102	@ 0x836
 801af54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af58:	f7f6 fb4e 	bl	80115f8 <rcutils_reset_error>
 801af5c:	f640 0036 	movw	r0, #2102	@ 0x836
 801af60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af64:	2001      	movs	r0, #1
 801af66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af6a:	200b      	movs	r0, #11
 801af6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af70:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801af74:	4770      	bx	lr
 801af76:	bf00      	nop

0801af78 <rcl_action_take_goal_request>:
 801af78:	2800      	cmp	r0, #0
 801af7a:	d039      	beq.n	801aff0 <rcl_action_take_goal_request+0x78>
 801af7c:	b570      	push	{r4, r5, r6, lr}
 801af7e:	4604      	mov	r4, r0
 801af80:	6800      	ldr	r0, [r0, #0]
 801af82:	b380      	cbz	r0, 801afe6 <rcl_action_take_goal_request+0x6e>
 801af84:	460d      	mov	r5, r1
 801af86:	4616      	mov	r6, r2
 801af88:	f7fe fa96 	bl	80194b8 <rcl_service_is_valid>
 801af8c:	b330      	cbz	r0, 801afdc <rcl_action_take_goal_request+0x64>
 801af8e:	6820      	ldr	r0, [r4, #0]
 801af90:	3004      	adds	r0, #4
 801af92:	f7fe fa91 	bl	80194b8 <rcl_service_is_valid>
 801af96:	b308      	cbz	r0, 801afdc <rcl_action_take_goal_request+0x64>
 801af98:	6820      	ldr	r0, [r4, #0]
 801af9a:	3008      	adds	r0, #8
 801af9c:	f7fe fa8c 	bl	80194b8 <rcl_service_is_valid>
 801afa0:	b1e0      	cbz	r0, 801afdc <rcl_action_take_goal_request+0x64>
 801afa2:	6820      	ldr	r0, [r4, #0]
 801afa4:	300c      	adds	r0, #12
 801afa6:	f7f5 fa1d 	bl	80103e4 <rcl_publisher_is_valid>
 801afaa:	b1b8      	cbz	r0, 801afdc <rcl_action_take_goal_request+0x64>
 801afac:	6820      	ldr	r0, [r4, #0]
 801afae:	3010      	adds	r0, #16
 801afb0:	f7f5 fa18 	bl	80103e4 <rcl_publisher_is_valid>
 801afb4:	b190      	cbz	r0, 801afdc <rcl_action_take_goal_request+0x64>
 801afb6:	b1cd      	cbz	r5, 801afec <rcl_action_take_goal_request+0x74>
 801afb8:	b1c6      	cbz	r6, 801afec <rcl_action_take_goal_request+0x74>
 801afba:	6820      	ldr	r0, [r4, #0]
 801afbc:	4632      	mov	r2, r6
 801afbe:	4629      	mov	r1, r5
 801afc0:	f7fe fa22 	bl	8019408 <rcl_take_request>
 801afc4:	b148      	cbz	r0, 801afda <rcl_action_take_goal_request+0x62>
 801afc6:	280a      	cmp	r0, #10
 801afc8:	d007      	beq.n	801afda <rcl_action_take_goal_request+0x62>
 801afca:	f240 2259 	movw	r2, #601	@ 0x259
 801afce:	f640 0399 	movw	r3, #2201	@ 0x899
 801afd2:	4290      	cmp	r0, r2
 801afd4:	bf0c      	ite	eq
 801afd6:	4618      	moveq	r0, r3
 801afd8:	2001      	movne	r0, #1
 801afda:	bd70      	pop	{r4, r5, r6, pc}
 801afdc:	f7f6 fb0c 	bl	80115f8 <rcutils_reset_error>
 801afe0:	f640 0098 	movw	r0, #2200	@ 0x898
 801afe4:	bd70      	pop	{r4, r5, r6, pc}
 801afe6:	f640 0098 	movw	r0, #2200	@ 0x898
 801afea:	bd70      	pop	{r4, r5, r6, pc}
 801afec:	200b      	movs	r0, #11
 801afee:	bd70      	pop	{r4, r5, r6, pc}
 801aff0:	f640 0098 	movw	r0, #2200	@ 0x898
 801aff4:	4770      	bx	lr
 801aff6:	bf00      	nop

0801aff8 <rcl_action_send_goal_response>:
 801aff8:	b390      	cbz	r0, 801b060 <rcl_action_send_goal_response+0x68>
 801affa:	b570      	push	{r4, r5, r6, lr}
 801affc:	4604      	mov	r4, r0
 801affe:	6800      	ldr	r0, [r0, #0]
 801b000:	b348      	cbz	r0, 801b056 <rcl_action_send_goal_response+0x5e>
 801b002:	460d      	mov	r5, r1
 801b004:	4616      	mov	r6, r2
 801b006:	f7fe fa57 	bl	80194b8 <rcl_service_is_valid>
 801b00a:	b1f8      	cbz	r0, 801b04c <rcl_action_send_goal_response+0x54>
 801b00c:	6820      	ldr	r0, [r4, #0]
 801b00e:	3004      	adds	r0, #4
 801b010:	f7fe fa52 	bl	80194b8 <rcl_service_is_valid>
 801b014:	b1d0      	cbz	r0, 801b04c <rcl_action_send_goal_response+0x54>
 801b016:	6820      	ldr	r0, [r4, #0]
 801b018:	3008      	adds	r0, #8
 801b01a:	f7fe fa4d 	bl	80194b8 <rcl_service_is_valid>
 801b01e:	b1a8      	cbz	r0, 801b04c <rcl_action_send_goal_response+0x54>
 801b020:	6820      	ldr	r0, [r4, #0]
 801b022:	300c      	adds	r0, #12
 801b024:	f7f5 f9de 	bl	80103e4 <rcl_publisher_is_valid>
 801b028:	b180      	cbz	r0, 801b04c <rcl_action_send_goal_response+0x54>
 801b02a:	6820      	ldr	r0, [r4, #0]
 801b02c:	3010      	adds	r0, #16
 801b02e:	f7f5 f9d9 	bl	80103e4 <rcl_publisher_is_valid>
 801b032:	b158      	cbz	r0, 801b04c <rcl_action_send_goal_response+0x54>
 801b034:	b195      	cbz	r5, 801b05c <rcl_action_send_goal_response+0x64>
 801b036:	b18e      	cbz	r6, 801b05c <rcl_action_send_goal_response+0x64>
 801b038:	6820      	ldr	r0, [r4, #0]
 801b03a:	4632      	mov	r2, r6
 801b03c:	4629      	mov	r1, r5
 801b03e:	f7fe fa23 	bl	8019488 <rcl_send_response>
 801b042:	b110      	cbz	r0, 801b04a <rcl_action_send_goal_response+0x52>
 801b044:	2802      	cmp	r0, #2
 801b046:	bf18      	it	ne
 801b048:	2001      	movne	r0, #1
 801b04a:	bd70      	pop	{r4, r5, r6, pc}
 801b04c:	f7f6 fad4 	bl	80115f8 <rcutils_reset_error>
 801b050:	f640 0098 	movw	r0, #2200	@ 0x898
 801b054:	bd70      	pop	{r4, r5, r6, pc}
 801b056:	f640 0098 	movw	r0, #2200	@ 0x898
 801b05a:	bd70      	pop	{r4, r5, r6, pc}
 801b05c:	200b      	movs	r0, #11
 801b05e:	bd70      	pop	{r4, r5, r6, pc}
 801b060:	f640 0098 	movw	r0, #2200	@ 0x898
 801b064:	4770      	bx	lr
 801b066:	bf00      	nop

0801b068 <rcl_action_take_result_request>:
 801b068:	2800      	cmp	r0, #0
 801b06a:	d03a      	beq.n	801b0e2 <rcl_action_take_result_request+0x7a>
 801b06c:	b570      	push	{r4, r5, r6, lr}
 801b06e:	4604      	mov	r4, r0
 801b070:	6800      	ldr	r0, [r0, #0]
 801b072:	b388      	cbz	r0, 801b0d8 <rcl_action_take_result_request+0x70>
 801b074:	460d      	mov	r5, r1
 801b076:	4616      	mov	r6, r2
 801b078:	f7fe fa1e 	bl	80194b8 <rcl_service_is_valid>
 801b07c:	b338      	cbz	r0, 801b0ce <rcl_action_take_result_request+0x66>
 801b07e:	6820      	ldr	r0, [r4, #0]
 801b080:	3004      	adds	r0, #4
 801b082:	f7fe fa19 	bl	80194b8 <rcl_service_is_valid>
 801b086:	b310      	cbz	r0, 801b0ce <rcl_action_take_result_request+0x66>
 801b088:	6820      	ldr	r0, [r4, #0]
 801b08a:	3008      	adds	r0, #8
 801b08c:	f7fe fa14 	bl	80194b8 <rcl_service_is_valid>
 801b090:	b1e8      	cbz	r0, 801b0ce <rcl_action_take_result_request+0x66>
 801b092:	6820      	ldr	r0, [r4, #0]
 801b094:	300c      	adds	r0, #12
 801b096:	f7f5 f9a5 	bl	80103e4 <rcl_publisher_is_valid>
 801b09a:	b1c0      	cbz	r0, 801b0ce <rcl_action_take_result_request+0x66>
 801b09c:	6820      	ldr	r0, [r4, #0]
 801b09e:	3010      	adds	r0, #16
 801b0a0:	f7f5 f9a0 	bl	80103e4 <rcl_publisher_is_valid>
 801b0a4:	b198      	cbz	r0, 801b0ce <rcl_action_take_result_request+0x66>
 801b0a6:	b1d5      	cbz	r5, 801b0de <rcl_action_take_result_request+0x76>
 801b0a8:	b1ce      	cbz	r6, 801b0de <rcl_action_take_result_request+0x76>
 801b0aa:	6820      	ldr	r0, [r4, #0]
 801b0ac:	4632      	mov	r2, r6
 801b0ae:	4629      	mov	r1, r5
 801b0b0:	3008      	adds	r0, #8
 801b0b2:	f7fe f9a9 	bl	8019408 <rcl_take_request>
 801b0b6:	b148      	cbz	r0, 801b0cc <rcl_action_take_result_request+0x64>
 801b0b8:	280a      	cmp	r0, #10
 801b0ba:	d007      	beq.n	801b0cc <rcl_action_take_result_request+0x64>
 801b0bc:	f240 2259 	movw	r2, #601	@ 0x259
 801b0c0:	f640 0399 	movw	r3, #2201	@ 0x899
 801b0c4:	4290      	cmp	r0, r2
 801b0c6:	bf0c      	ite	eq
 801b0c8:	4618      	moveq	r0, r3
 801b0ca:	2001      	movne	r0, #1
 801b0cc:	bd70      	pop	{r4, r5, r6, pc}
 801b0ce:	f7f6 fa93 	bl	80115f8 <rcutils_reset_error>
 801b0d2:	f640 0098 	movw	r0, #2200	@ 0x898
 801b0d6:	bd70      	pop	{r4, r5, r6, pc}
 801b0d8:	f640 0098 	movw	r0, #2200	@ 0x898
 801b0dc:	bd70      	pop	{r4, r5, r6, pc}
 801b0de:	200b      	movs	r0, #11
 801b0e0:	bd70      	pop	{r4, r5, r6, pc}
 801b0e2:	f640 0098 	movw	r0, #2200	@ 0x898
 801b0e6:	4770      	bx	lr

0801b0e8 <rcl_action_take_cancel_request>:
 801b0e8:	2800      	cmp	r0, #0
 801b0ea:	d03a      	beq.n	801b162 <rcl_action_take_cancel_request+0x7a>
 801b0ec:	b570      	push	{r4, r5, r6, lr}
 801b0ee:	4604      	mov	r4, r0
 801b0f0:	6800      	ldr	r0, [r0, #0]
 801b0f2:	b388      	cbz	r0, 801b158 <rcl_action_take_cancel_request+0x70>
 801b0f4:	460d      	mov	r5, r1
 801b0f6:	4616      	mov	r6, r2
 801b0f8:	f7fe f9de 	bl	80194b8 <rcl_service_is_valid>
 801b0fc:	b338      	cbz	r0, 801b14e <rcl_action_take_cancel_request+0x66>
 801b0fe:	6820      	ldr	r0, [r4, #0]
 801b100:	3004      	adds	r0, #4
 801b102:	f7fe f9d9 	bl	80194b8 <rcl_service_is_valid>
 801b106:	b310      	cbz	r0, 801b14e <rcl_action_take_cancel_request+0x66>
 801b108:	6820      	ldr	r0, [r4, #0]
 801b10a:	3008      	adds	r0, #8
 801b10c:	f7fe f9d4 	bl	80194b8 <rcl_service_is_valid>
 801b110:	b1e8      	cbz	r0, 801b14e <rcl_action_take_cancel_request+0x66>
 801b112:	6820      	ldr	r0, [r4, #0]
 801b114:	300c      	adds	r0, #12
 801b116:	f7f5 f965 	bl	80103e4 <rcl_publisher_is_valid>
 801b11a:	b1c0      	cbz	r0, 801b14e <rcl_action_take_cancel_request+0x66>
 801b11c:	6820      	ldr	r0, [r4, #0]
 801b11e:	3010      	adds	r0, #16
 801b120:	f7f5 f960 	bl	80103e4 <rcl_publisher_is_valid>
 801b124:	b198      	cbz	r0, 801b14e <rcl_action_take_cancel_request+0x66>
 801b126:	b1d5      	cbz	r5, 801b15e <rcl_action_take_cancel_request+0x76>
 801b128:	b1ce      	cbz	r6, 801b15e <rcl_action_take_cancel_request+0x76>
 801b12a:	6820      	ldr	r0, [r4, #0]
 801b12c:	4632      	mov	r2, r6
 801b12e:	4629      	mov	r1, r5
 801b130:	3004      	adds	r0, #4
 801b132:	f7fe f969 	bl	8019408 <rcl_take_request>
 801b136:	b148      	cbz	r0, 801b14c <rcl_action_take_cancel_request+0x64>
 801b138:	280a      	cmp	r0, #10
 801b13a:	d007      	beq.n	801b14c <rcl_action_take_cancel_request+0x64>
 801b13c:	f240 2259 	movw	r2, #601	@ 0x259
 801b140:	f640 0399 	movw	r3, #2201	@ 0x899
 801b144:	4290      	cmp	r0, r2
 801b146:	bf0c      	ite	eq
 801b148:	4618      	moveq	r0, r3
 801b14a:	2001      	movne	r0, #1
 801b14c:	bd70      	pop	{r4, r5, r6, pc}
 801b14e:	f7f6 fa53 	bl	80115f8 <rcutils_reset_error>
 801b152:	f640 0098 	movw	r0, #2200	@ 0x898
 801b156:	bd70      	pop	{r4, r5, r6, pc}
 801b158:	f640 0098 	movw	r0, #2200	@ 0x898
 801b15c:	bd70      	pop	{r4, r5, r6, pc}
 801b15e:	200b      	movs	r0, #11
 801b160:	bd70      	pop	{r4, r5, r6, pc}
 801b162:	f640 0098 	movw	r0, #2200	@ 0x898
 801b166:	4770      	bx	lr

0801b168 <rcl_action_send_cancel_response>:
 801b168:	b398      	cbz	r0, 801b1d2 <rcl_action_send_cancel_response+0x6a>
 801b16a:	b570      	push	{r4, r5, r6, lr}
 801b16c:	4604      	mov	r4, r0
 801b16e:	6800      	ldr	r0, [r0, #0]
 801b170:	b350      	cbz	r0, 801b1c8 <rcl_action_send_cancel_response+0x60>
 801b172:	460d      	mov	r5, r1
 801b174:	4616      	mov	r6, r2
 801b176:	f7fe f99f 	bl	80194b8 <rcl_service_is_valid>
 801b17a:	b300      	cbz	r0, 801b1be <rcl_action_send_cancel_response+0x56>
 801b17c:	6820      	ldr	r0, [r4, #0]
 801b17e:	3004      	adds	r0, #4
 801b180:	f7fe f99a 	bl	80194b8 <rcl_service_is_valid>
 801b184:	b1d8      	cbz	r0, 801b1be <rcl_action_send_cancel_response+0x56>
 801b186:	6820      	ldr	r0, [r4, #0]
 801b188:	3008      	adds	r0, #8
 801b18a:	f7fe f995 	bl	80194b8 <rcl_service_is_valid>
 801b18e:	b1b0      	cbz	r0, 801b1be <rcl_action_send_cancel_response+0x56>
 801b190:	6820      	ldr	r0, [r4, #0]
 801b192:	300c      	adds	r0, #12
 801b194:	f7f5 f926 	bl	80103e4 <rcl_publisher_is_valid>
 801b198:	b188      	cbz	r0, 801b1be <rcl_action_send_cancel_response+0x56>
 801b19a:	6820      	ldr	r0, [r4, #0]
 801b19c:	3010      	adds	r0, #16
 801b19e:	f7f5 f921 	bl	80103e4 <rcl_publisher_is_valid>
 801b1a2:	b160      	cbz	r0, 801b1be <rcl_action_send_cancel_response+0x56>
 801b1a4:	b19d      	cbz	r5, 801b1ce <rcl_action_send_cancel_response+0x66>
 801b1a6:	b196      	cbz	r6, 801b1ce <rcl_action_send_cancel_response+0x66>
 801b1a8:	6820      	ldr	r0, [r4, #0]
 801b1aa:	4632      	mov	r2, r6
 801b1ac:	4629      	mov	r1, r5
 801b1ae:	3004      	adds	r0, #4
 801b1b0:	f7fe f96a 	bl	8019488 <rcl_send_response>
 801b1b4:	b110      	cbz	r0, 801b1bc <rcl_action_send_cancel_response+0x54>
 801b1b6:	2802      	cmp	r0, #2
 801b1b8:	bf18      	it	ne
 801b1ba:	2001      	movne	r0, #1
 801b1bc:	bd70      	pop	{r4, r5, r6, pc}
 801b1be:	f7f6 fa1b 	bl	80115f8 <rcutils_reset_error>
 801b1c2:	f640 0098 	movw	r0, #2200	@ 0x898
 801b1c6:	bd70      	pop	{r4, r5, r6, pc}
 801b1c8:	f640 0098 	movw	r0, #2200	@ 0x898
 801b1cc:	bd70      	pop	{r4, r5, r6, pc}
 801b1ce:	200b      	movs	r0, #11
 801b1d0:	bd70      	pop	{r4, r5, r6, pc}
 801b1d2:	f640 0098 	movw	r0, #2200	@ 0x898
 801b1d6:	4770      	bx	lr

0801b1d8 <rcl_action_wait_set_add_action_server>:
 801b1d8:	2800      	cmp	r0, #0
 801b1da:	d04d      	beq.n	801b278 <rcl_action_wait_set_add_action_server+0xa0>
 801b1dc:	b570      	push	{r4, r5, r6, lr}
 801b1de:	460c      	mov	r4, r1
 801b1e0:	b159      	cbz	r1, 801b1fa <rcl_action_wait_set_add_action_server+0x22>
 801b1e2:	4605      	mov	r5, r0
 801b1e4:	6808      	ldr	r0, [r1, #0]
 801b1e6:	b140      	cbz	r0, 801b1fa <rcl_action_wait_set_add_action_server+0x22>
 801b1e8:	4616      	mov	r6, r2
 801b1ea:	f7fe f965 	bl	80194b8 <rcl_service_is_valid>
 801b1ee:	b120      	cbz	r0, 801b1fa <rcl_action_wait_set_add_action_server+0x22>
 801b1f0:	6820      	ldr	r0, [r4, #0]
 801b1f2:	3004      	adds	r0, #4
 801b1f4:	f7fe f960 	bl	80194b8 <rcl_service_is_valid>
 801b1f8:	b910      	cbnz	r0, 801b200 <rcl_action_wait_set_add_action_server+0x28>
 801b1fa:	f640 0098 	movw	r0, #2200	@ 0x898
 801b1fe:	bd70      	pop	{r4, r5, r6, pc}
 801b200:	6820      	ldr	r0, [r4, #0]
 801b202:	3008      	adds	r0, #8
 801b204:	f7fe f958 	bl	80194b8 <rcl_service_is_valid>
 801b208:	2800      	cmp	r0, #0
 801b20a:	d0f6      	beq.n	801b1fa <rcl_action_wait_set_add_action_server+0x22>
 801b20c:	6820      	ldr	r0, [r4, #0]
 801b20e:	300c      	adds	r0, #12
 801b210:	f7f5 f900 	bl	8010414 <rcl_publisher_is_valid_except_context>
 801b214:	2800      	cmp	r0, #0
 801b216:	d0f0      	beq.n	801b1fa <rcl_action_wait_set_add_action_server+0x22>
 801b218:	6820      	ldr	r0, [r4, #0]
 801b21a:	3010      	adds	r0, #16
 801b21c:	f7f5 f8fa 	bl	8010414 <rcl_publisher_is_valid_except_context>
 801b220:	2800      	cmp	r0, #0
 801b222:	d0ea      	beq.n	801b1fa <rcl_action_wait_set_add_action_server+0x22>
 801b224:	6821      	ldr	r1, [r4, #0]
 801b226:	4628      	mov	r0, r5
 801b228:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801b22c:	f7ff fad0 	bl	801a7d0 <rcl_wait_set_add_service>
 801b230:	2800      	cmp	r0, #0
 801b232:	d1e4      	bne.n	801b1fe <rcl_action_wait_set_add_action_server+0x26>
 801b234:	6821      	ldr	r1, [r4, #0]
 801b236:	4628      	mov	r0, r5
 801b238:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801b23c:	3104      	adds	r1, #4
 801b23e:	f7ff fac7 	bl	801a7d0 <rcl_wait_set_add_service>
 801b242:	2800      	cmp	r0, #0
 801b244:	d1db      	bne.n	801b1fe <rcl_action_wait_set_add_action_server+0x26>
 801b246:	6821      	ldr	r1, [r4, #0]
 801b248:	4628      	mov	r0, r5
 801b24a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801b24e:	3108      	adds	r1, #8
 801b250:	f7ff fabe 	bl	801a7d0 <rcl_wait_set_add_service>
 801b254:	2800      	cmp	r0, #0
 801b256:	d1d2      	bne.n	801b1fe <rcl_action_wait_set_add_action_server+0x26>
 801b258:	6821      	ldr	r1, [r4, #0]
 801b25a:	4628      	mov	r0, r5
 801b25c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801b260:	3114      	adds	r1, #20
 801b262:	f7ff fa59 	bl	801a718 <rcl_wait_set_add_timer>
 801b266:	2800      	cmp	r0, #0
 801b268:	d1c9      	bne.n	801b1fe <rcl_action_wait_set_add_action_server+0x26>
 801b26a:	2e00      	cmp	r6, #0
 801b26c:	d0c7      	beq.n	801b1fe <rcl_action_wait_set_add_action_server+0x26>
 801b26e:	6823      	ldr	r3, [r4, #0]
 801b270:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801b274:	6033      	str	r3, [r6, #0]
 801b276:	bd70      	pop	{r4, r5, r6, pc}
 801b278:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801b27c:	4770      	bx	lr
 801b27e:	bf00      	nop

0801b280 <rcl_action_server_wait_set_get_entities_ready>:
 801b280:	2800      	cmp	r0, #0
 801b282:	d05a      	beq.n	801b33a <rcl_action_server_wait_set_get_entities_ready+0xba>
 801b284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b286:	460c      	mov	r4, r1
 801b288:	b161      	cbz	r1, 801b2a4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801b28a:	4605      	mov	r5, r0
 801b28c:	6808      	ldr	r0, [r1, #0]
 801b28e:	b148      	cbz	r0, 801b2a4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801b290:	4616      	mov	r6, r2
 801b292:	461f      	mov	r7, r3
 801b294:	f7fe f910 	bl	80194b8 <rcl_service_is_valid>
 801b298:	b120      	cbz	r0, 801b2a4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801b29a:	6820      	ldr	r0, [r4, #0]
 801b29c:	3004      	adds	r0, #4
 801b29e:	f7fe f90b 	bl	80194b8 <rcl_service_is_valid>
 801b2a2:	b910      	cbnz	r0, 801b2aa <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801b2a4:	f640 0098 	movw	r0, #2200	@ 0x898
 801b2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b2aa:	6820      	ldr	r0, [r4, #0]
 801b2ac:	3008      	adds	r0, #8
 801b2ae:	f7fe f903 	bl	80194b8 <rcl_service_is_valid>
 801b2b2:	2800      	cmp	r0, #0
 801b2b4:	d0f6      	beq.n	801b2a4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801b2b6:	6820      	ldr	r0, [r4, #0]
 801b2b8:	300c      	adds	r0, #12
 801b2ba:	f7f5 f8ab 	bl	8010414 <rcl_publisher_is_valid_except_context>
 801b2be:	2800      	cmp	r0, #0
 801b2c0:	d0f0      	beq.n	801b2a4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801b2c2:	6820      	ldr	r0, [r4, #0]
 801b2c4:	3010      	adds	r0, #16
 801b2c6:	f7f5 f8a5 	bl	8010414 <rcl_publisher_is_valid_except_context>
 801b2ca:	2800      	cmp	r0, #0
 801b2cc:	d0ea      	beq.n	801b2a4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801b2ce:	b3be      	cbz	r6, 801b340 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801b2d0:	b3b7      	cbz	r7, 801b340 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801b2d2:	9b06      	ldr	r3, [sp, #24]
 801b2d4:	b3a3      	cbz	r3, 801b340 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801b2d6:	9b07      	ldr	r3, [sp, #28]
 801b2d8:	b393      	cbz	r3, 801b340 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801b2da:	6821      	ldr	r1, [r4, #0]
 801b2dc:	692a      	ldr	r2, [r5, #16]
 801b2de:	6a2c      	ldr	r4, [r5, #32]
 801b2e0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801b2e4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801b2e8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801b2ec:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 801b2f0:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801b2f4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801b2f8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801b2fc:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801b300:	1a64      	subs	r4, r4, r1
 801b302:	fab4 f484 	clz	r4, r4
 801b306:	0964      	lsrs	r4, r4, #5
 801b308:	7034      	strb	r4, [r6, #0]
 801b30a:	1d0c      	adds	r4, r1, #4
 801b30c:	1b1b      	subs	r3, r3, r4
 801b30e:	fab3 f383 	clz	r3, r3
 801b312:	095b      	lsrs	r3, r3, #5
 801b314:	f101 0408 	add.w	r4, r1, #8
 801b318:	703b      	strb	r3, [r7, #0]
 801b31a:	f101 0314 	add.w	r3, r1, #20
 801b31e:	1b01      	subs	r1, r0, r4
 801b320:	1ad3      	subs	r3, r2, r3
 801b322:	fab1 f181 	clz	r1, r1
 801b326:	9a06      	ldr	r2, [sp, #24]
 801b328:	0949      	lsrs	r1, r1, #5
 801b32a:	7011      	strb	r1, [r2, #0]
 801b32c:	fab3 f383 	clz	r3, r3
 801b330:	9a07      	ldr	r2, [sp, #28]
 801b332:	095b      	lsrs	r3, r3, #5
 801b334:	2000      	movs	r0, #0
 801b336:	7013      	strb	r3, [r2, #0]
 801b338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b33a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801b33e:	4770      	bx	lr
 801b340:	200b      	movs	r0, #11
 801b342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b344 <_execute_event_handler>:
 801b344:	2002      	movs	r0, #2
 801b346:	4770      	bx	lr

0801b348 <_cancel_goal_event_handler>:
 801b348:	2003      	movs	r0, #3
 801b34a:	4770      	bx	lr

0801b34c <_succeed_event_handler>:
 801b34c:	2004      	movs	r0, #4
 801b34e:	4770      	bx	lr

0801b350 <_abort_event_handler>:
 801b350:	2006      	movs	r0, #6
 801b352:	4770      	bx	lr

0801b354 <_canceled_event_handler>:
 801b354:	2005      	movs	r0, #5
 801b356:	4770      	bx	lr

0801b358 <rcl_action_transition_goal_state>:
 801b358:	b2c2      	uxtb	r2, r0
 801b35a:	2a06      	cmp	r2, #6
 801b35c:	d80c      	bhi.n	801b378 <rcl_action_transition_goal_state+0x20>
 801b35e:	2904      	cmp	r1, #4
 801b360:	d80a      	bhi.n	801b378 <rcl_action_transition_goal_state+0x20>
 801b362:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801b366:	b410      	push	{r4}
 801b368:	1853      	adds	r3, r2, r1
 801b36a:	4c06      	ldr	r4, [pc, #24]	@ (801b384 <rcl_action_transition_goal_state+0x2c>)
 801b36c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801b370:	b123      	cbz	r3, 801b37c <rcl_action_transition_goal_state+0x24>
 801b372:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b376:	4718      	bx	r3
 801b378:	2000      	movs	r0, #0
 801b37a:	4770      	bx	lr
 801b37c:	2000      	movs	r0, #0
 801b37e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b382:	4770      	bx	lr
 801b384:	08020a20 	.word	0x08020a20

0801b388 <rcl_action_get_zero_initialized_cancel_response>:
 801b388:	b510      	push	{r4, lr}
 801b38a:	4c07      	ldr	r4, [pc, #28]	@ (801b3a8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801b38c:	4686      	mov	lr, r0
 801b38e:	4684      	mov	ip, r0
 801b390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b392:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b398:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b39c:	6823      	ldr	r3, [r4, #0]
 801b39e:	f8cc 3000 	str.w	r3, [ip]
 801b3a2:	4670      	mov	r0, lr
 801b3a4:	bd10      	pop	{r4, pc}
 801b3a6:	bf00      	nop
 801b3a8:	08020aac 	.word	0x08020aac

0801b3ac <rclc_action_send_result_request>:
 801b3ac:	b1d0      	cbz	r0, 801b3e4 <rclc_action_send_result_request+0x38>
 801b3ae:	b500      	push	{lr}
 801b3b0:	4684      	mov	ip, r0
 801b3b2:	b087      	sub	sp, #28
 801b3b4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801b3b8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801b3bc:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801b3c0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801b3c4:	f10d 0e08 	add.w	lr, sp, #8
 801b3c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b3cc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801b3d0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801b3d4:	a902      	add	r1, sp, #8
 801b3d6:	3010      	adds	r0, #16
 801b3d8:	f7ff fbda 	bl	801ab90 <rcl_action_send_result_request>
 801b3dc:	b920      	cbnz	r0, 801b3e8 <rclc_action_send_result_request+0x3c>
 801b3de:	b007      	add	sp, #28
 801b3e0:	f85d fb04 	ldr.w	pc, [sp], #4
 801b3e4:	200b      	movs	r0, #11
 801b3e6:	4770      	bx	lr
 801b3e8:	9001      	str	r0, [sp, #4]
 801b3ea:	f7f6 f905 	bl	80115f8 <rcutils_reset_error>
 801b3ee:	9801      	ldr	r0, [sp, #4]
 801b3f0:	b007      	add	sp, #28
 801b3f2:	f85d fb04 	ldr.w	pc, [sp], #4
 801b3f6:	bf00      	nop

0801b3f8 <rclc_action_take_goal_handle>:
 801b3f8:	b160      	cbz	r0, 801b414 <rclc_action_take_goal_handle+0x1c>
 801b3fa:	6883      	ldr	r3, [r0, #8]
 801b3fc:	b143      	cbz	r3, 801b410 <rclc_action_take_goal_handle+0x18>
 801b3fe:	6819      	ldr	r1, [r3, #0]
 801b400:	6081      	str	r1, [r0, #8]
 801b402:	2200      	movs	r2, #0
 801b404:	721a      	strb	r2, [r3, #8]
 801b406:	68c1      	ldr	r1, [r0, #12]
 801b408:	6019      	str	r1, [r3, #0]
 801b40a:	621a      	str	r2, [r3, #32]
 801b40c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801b40e:	60c3      	str	r3, [r0, #12]
 801b410:	4618      	mov	r0, r3
 801b412:	4770      	bx	lr
 801b414:	4603      	mov	r3, r0
 801b416:	e7fb      	b.n	801b410 <rclc_action_take_goal_handle+0x18>

0801b418 <rclc_action_remove_used_goal_handle>:
 801b418:	b180      	cbz	r0, 801b43c <rclc_action_remove_used_goal_handle+0x24>
 801b41a:	b179      	cbz	r1, 801b43c <rclc_action_remove_used_goal_handle+0x24>
 801b41c:	68c3      	ldr	r3, [r0, #12]
 801b41e:	4299      	cmp	r1, r3
 801b420:	d00d      	beq.n	801b43e <rclc_action_remove_used_goal_handle+0x26>
 801b422:	b12b      	cbz	r3, 801b430 <rclc_action_remove_used_goal_handle+0x18>
 801b424:	681a      	ldr	r2, [r3, #0]
 801b426:	4291      	cmp	r1, r2
 801b428:	d003      	beq.n	801b432 <rclc_action_remove_used_goal_handle+0x1a>
 801b42a:	4613      	mov	r3, r2
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d1f9      	bne.n	801b424 <rclc_action_remove_used_goal_handle+0xc>
 801b430:	4770      	bx	lr
 801b432:	680a      	ldr	r2, [r1, #0]
 801b434:	601a      	str	r2, [r3, #0]
 801b436:	6883      	ldr	r3, [r0, #8]
 801b438:	600b      	str	r3, [r1, #0]
 801b43a:	6081      	str	r1, [r0, #8]
 801b43c:	4770      	bx	lr
 801b43e:	680b      	ldr	r3, [r1, #0]
 801b440:	60c3      	str	r3, [r0, #12]
 801b442:	e7f8      	b.n	801b436 <rclc_action_remove_used_goal_handle+0x1e>

0801b444 <rclc_action_find_goal_handle_by_uuid>:
 801b444:	b538      	push	{r3, r4, r5, lr}
 801b446:	b180      	cbz	r0, 801b46a <rclc_action_find_goal_handle_by_uuid+0x26>
 801b448:	460d      	mov	r5, r1
 801b44a:	b181      	cbz	r1, 801b46e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801b44c:	68c4      	ldr	r4, [r0, #12]
 801b44e:	b914      	cbnz	r4, 801b456 <rclc_action_find_goal_handle_by_uuid+0x12>
 801b450:	e009      	b.n	801b466 <rclc_action_find_goal_handle_by_uuid+0x22>
 801b452:	6824      	ldr	r4, [r4, #0]
 801b454:	b13c      	cbz	r4, 801b466 <rclc_action_find_goal_handle_by_uuid+0x22>
 801b456:	f104 0009 	add.w	r0, r4, #9
 801b45a:	2210      	movs	r2, #16
 801b45c:	4629      	mov	r1, r5
 801b45e:	f002 f935 	bl	801d6cc <memcmp>
 801b462:	2800      	cmp	r0, #0
 801b464:	d1f5      	bne.n	801b452 <rclc_action_find_goal_handle_by_uuid+0xe>
 801b466:	4620      	mov	r0, r4
 801b468:	bd38      	pop	{r3, r4, r5, pc}
 801b46a:	4604      	mov	r4, r0
 801b46c:	e7fb      	b.n	801b466 <rclc_action_find_goal_handle_by_uuid+0x22>
 801b46e:	460c      	mov	r4, r1
 801b470:	e7f9      	b.n	801b466 <rclc_action_find_goal_handle_by_uuid+0x22>
 801b472:	bf00      	nop

0801b474 <rclc_action_find_first_handle_by_status>:
 801b474:	b140      	cbz	r0, 801b488 <rclc_action_find_first_handle_by_status+0x14>
 801b476:	68c0      	ldr	r0, [r0, #12]
 801b478:	b910      	cbnz	r0, 801b480 <rclc_action_find_first_handle_by_status+0xc>
 801b47a:	e005      	b.n	801b488 <rclc_action_find_first_handle_by_status+0x14>
 801b47c:	6800      	ldr	r0, [r0, #0]
 801b47e:	b118      	cbz	r0, 801b488 <rclc_action_find_first_handle_by_status+0x14>
 801b480:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801b484:	428b      	cmp	r3, r1
 801b486:	d1f9      	bne.n	801b47c <rclc_action_find_first_handle_by_status+0x8>
 801b488:	4770      	bx	lr
 801b48a:	bf00      	nop

0801b48c <rclc_action_find_first_terminated_handle>:
 801b48c:	b140      	cbz	r0, 801b4a0 <rclc_action_find_first_terminated_handle+0x14>
 801b48e:	68c0      	ldr	r0, [r0, #12]
 801b490:	b910      	cbnz	r0, 801b498 <rclc_action_find_first_terminated_handle+0xc>
 801b492:	e005      	b.n	801b4a0 <rclc_action_find_first_terminated_handle+0x14>
 801b494:	6800      	ldr	r0, [r0, #0]
 801b496:	b118      	cbz	r0, 801b4a0 <rclc_action_find_first_terminated_handle+0x14>
 801b498:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801b49c:	2b03      	cmp	r3, #3
 801b49e:	ddf9      	ble.n	801b494 <rclc_action_find_first_terminated_handle+0x8>
 801b4a0:	4770      	bx	lr
 801b4a2:	bf00      	nop

0801b4a4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801b4a4:	b170      	cbz	r0, 801b4c4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801b4a6:	68c0      	ldr	r0, [r0, #12]
 801b4a8:	b160      	cbz	r0, 801b4c4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801b4aa:	b410      	push	{r4}
 801b4ac:	e001      	b.n	801b4b2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801b4ae:	6800      	ldr	r0, [r0, #0]
 801b4b0:	b128      	cbz	r0, 801b4be <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801b4b2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801b4b6:	4299      	cmp	r1, r3
 801b4b8:	bf08      	it	eq
 801b4ba:	4294      	cmpeq	r4, r2
 801b4bc:	d1f7      	bne.n	801b4ae <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801b4be:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b4c2:	4770      	bx	lr
 801b4c4:	4770      	bx	lr
 801b4c6:	bf00      	nop

0801b4c8 <rclc_action_find_handle_by_result_request_sequence_number>:
 801b4c8:	b170      	cbz	r0, 801b4e8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801b4ca:	68c0      	ldr	r0, [r0, #12]
 801b4cc:	b160      	cbz	r0, 801b4e8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801b4ce:	b410      	push	{r4}
 801b4d0:	e001      	b.n	801b4d6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801b4d2:	6800      	ldr	r0, [r0, #0]
 801b4d4:	b128      	cbz	r0, 801b4e2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801b4d6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801b4da:	4299      	cmp	r1, r3
 801b4dc:	bf08      	it	eq
 801b4de:	4294      	cmpeq	r4, r2
 801b4e0:	d1f7      	bne.n	801b4d2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801b4e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b4e6:	4770      	bx	lr
 801b4e8:	4770      	bx	lr
 801b4ea:	bf00      	nop

0801b4ec <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801b4ec:	b170      	cbz	r0, 801b50c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801b4ee:	68c0      	ldr	r0, [r0, #12]
 801b4f0:	b160      	cbz	r0, 801b50c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801b4f2:	b410      	push	{r4}
 801b4f4:	e001      	b.n	801b4fa <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801b4f6:	6800      	ldr	r0, [r0, #0]
 801b4f8:	b128      	cbz	r0, 801b506 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801b4fa:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801b4fe:	4299      	cmp	r1, r3
 801b500:	bf08      	it	eq
 801b502:	4294      	cmpeq	r4, r2
 801b504:	d1f7      	bne.n	801b4f6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801b506:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b50a:	4770      	bx	lr
 801b50c:	4770      	bx	lr
 801b50e:	bf00      	nop

0801b510 <rclc_action_find_first_handle_with_goal_response>:
 801b510:	b140      	cbz	r0, 801b524 <rclc_action_find_first_handle_with_goal_response+0x14>
 801b512:	68c0      	ldr	r0, [r0, #12]
 801b514:	b910      	cbnz	r0, 801b51c <rclc_action_find_first_handle_with_goal_response+0xc>
 801b516:	e005      	b.n	801b524 <rclc_action_find_first_handle_with_goal_response+0x14>
 801b518:	6800      	ldr	r0, [r0, #0]
 801b51a:	b118      	cbz	r0, 801b524 <rclc_action_find_first_handle_with_goal_response+0x14>
 801b51c:	f890 3020 	ldrb.w	r3, [r0, #32]
 801b520:	2b00      	cmp	r3, #0
 801b522:	d0f9      	beq.n	801b518 <rclc_action_find_first_handle_with_goal_response+0x8>
 801b524:	4770      	bx	lr
 801b526:	bf00      	nop

0801b528 <rclc_action_find_first_handle_with_result_response>:
 801b528:	b140      	cbz	r0, 801b53c <rclc_action_find_first_handle_with_result_response+0x14>
 801b52a:	68c0      	ldr	r0, [r0, #12]
 801b52c:	b910      	cbnz	r0, 801b534 <rclc_action_find_first_handle_with_result_response+0xc>
 801b52e:	e005      	b.n	801b53c <rclc_action_find_first_handle_with_result_response+0x14>
 801b530:	6800      	ldr	r0, [r0, #0]
 801b532:	b118      	cbz	r0, 801b53c <rclc_action_find_first_handle_with_result_response+0x14>
 801b534:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801b538:	2b00      	cmp	r3, #0
 801b53a:	d0f9      	beq.n	801b530 <rclc_action_find_first_handle_with_result_response+0x8>
 801b53c:	4770      	bx	lr
 801b53e:	bf00      	nop

0801b540 <rclc_action_server_response_goal_request>:
 801b540:	b198      	cbz	r0, 801b56a <rclc_action_server_response_goal_request+0x2a>
 801b542:	b510      	push	{r4, lr}
 801b544:	6844      	ldr	r4, [r0, #4]
 801b546:	b086      	sub	sp, #24
 801b548:	2200      	movs	r2, #0
 801b54a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801b54e:	460b      	mov	r3, r1
 801b550:	9205      	str	r2, [sp, #20]
 801b552:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801b556:	aa03      	add	r2, sp, #12
 801b558:	f104 0010 	add.w	r0, r4, #16
 801b55c:	f88d 300c 	strb.w	r3, [sp, #12]
 801b560:	f7ff fd4a 	bl	801aff8 <rcl_action_send_goal_response>
 801b564:	b918      	cbnz	r0, 801b56e <rclc_action_server_response_goal_request+0x2e>
 801b566:	b006      	add	sp, #24
 801b568:	bd10      	pop	{r4, pc}
 801b56a:	200b      	movs	r0, #11
 801b56c:	4770      	bx	lr
 801b56e:	9001      	str	r0, [sp, #4]
 801b570:	f7f6 f842 	bl	80115f8 <rcutils_reset_error>
 801b574:	9801      	ldr	r0, [sp, #4]
 801b576:	b006      	add	sp, #24
 801b578:	bd10      	pop	{r4, pc}
 801b57a:	bf00      	nop
 801b57c:	0000      	movs	r0, r0
	...

0801b580 <rclc_action_server_goal_cancel_accept>:
 801b580:	b310      	cbz	r0, 801b5c8 <rclc_action_server_goal_cancel_accept+0x48>
 801b582:	b510      	push	{r4, lr}
 801b584:	b090      	sub	sp, #64	@ 0x40
 801b586:	4604      	mov	r4, r0
 801b588:	a806      	add	r0, sp, #24
 801b58a:	f7ff fefd 	bl	801b388 <rcl_action_get_zero_initialized_cancel_response>
 801b58e:	2300      	movs	r3, #0
 801b590:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801b594:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801b598:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801b59c:	f88d 3018 	strb.w	r3, [sp, #24]
 801b5a0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801b5a4:	f8cd d01c 	str.w	sp, [sp, #28]
 801b5a8:	46ec      	mov	ip, sp
 801b5aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b5ae:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801b5d0 <rclc_action_server_goal_cancel_accept+0x50>
 801b5b2:	6860      	ldr	r0, [r4, #4]
 801b5b4:	aa06      	add	r2, sp, #24
 801b5b6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801b5ba:	3010      	adds	r0, #16
 801b5bc:	ed8d 7b08 	vstr	d7, [sp, #32]
 801b5c0:	f7ff fdd2 	bl	801b168 <rcl_action_send_cancel_response>
 801b5c4:	b010      	add	sp, #64	@ 0x40
 801b5c6:	bd10      	pop	{r4, pc}
 801b5c8:	200b      	movs	r0, #11
 801b5ca:	4770      	bx	lr
 801b5cc:	f3af 8000 	nop.w
 801b5d0:	00000001 	.word	0x00000001
 801b5d4:	00000001 	.word	0x00000001

0801b5d8 <rclc_action_server_goal_cancel_reject>:
 801b5d8:	b082      	sub	sp, #8
 801b5da:	b530      	push	{r4, r5, lr}
 801b5dc:	b08b      	sub	sp, #44	@ 0x2c
 801b5de:	ac0e      	add	r4, sp, #56	@ 0x38
 801b5e0:	e884 000c 	stmia.w	r4, {r2, r3}
 801b5e4:	b188      	cbz	r0, 801b60a <rclc_action_server_goal_cancel_reject+0x32>
 801b5e6:	4604      	mov	r4, r0
 801b5e8:	a801      	add	r0, sp, #4
 801b5ea:	460d      	mov	r5, r1
 801b5ec:	f7ff fecc 	bl	801b388 <rcl_action_get_zero_initialized_cancel_response>
 801b5f0:	aa01      	add	r2, sp, #4
 801b5f2:	a90e      	add	r1, sp, #56	@ 0x38
 801b5f4:	f104 0010 	add.w	r0, r4, #16
 801b5f8:	f88d 5004 	strb.w	r5, [sp, #4]
 801b5fc:	f7ff fdb4 	bl	801b168 <rcl_action_send_cancel_response>
 801b600:	b00b      	add	sp, #44	@ 0x2c
 801b602:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b606:	b002      	add	sp, #8
 801b608:	4770      	bx	lr
 801b60a:	200b      	movs	r0, #11
 801b60c:	b00b      	add	sp, #44	@ 0x2c
 801b60e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b612:	b002      	add	sp, #8
 801b614:	4770      	bx	lr
 801b616:	bf00      	nop

0801b618 <rcutils_is_directory>:
 801b618:	2000      	movs	r0, #0
 801b61a:	4770      	bx	lr

0801b61c <rcutils_join_path>:
 801b61c:	b082      	sub	sp, #8
 801b61e:	e88d 000c 	stmia.w	sp, {r2, r3}
 801b622:	2000      	movs	r0, #0
 801b624:	b002      	add	sp, #8
 801b626:	4770      	bx	lr

0801b628 <rcutils_to_native_path>:
 801b628:	b084      	sub	sp, #16
 801b62a:	a801      	add	r0, sp, #4
 801b62c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801b630:	b004      	add	sp, #16
 801b632:	2000      	movs	r0, #0
 801b634:	4770      	bx	lr
 801b636:	bf00      	nop

0801b638 <rmw_get_zero_initialized_context>:
 801b638:	b510      	push	{r4, lr}
 801b63a:	4604      	mov	r4, r0
 801b63c:	3010      	adds	r0, #16
 801b63e:	f7f6 facb 	bl	8011bd8 <rmw_get_zero_initialized_init_options>
 801b642:	2300      	movs	r3, #0
 801b644:	2000      	movs	r0, #0
 801b646:	2100      	movs	r1, #0
 801b648:	e9c4 0100 	strd	r0, r1, [r4]
 801b64c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 801b650:	60a3      	str	r3, [r4, #8]
 801b652:	4620      	mov	r0, r4
 801b654:	bd10      	pop	{r4, pc}
 801b656:	bf00      	nop

0801b658 <rmw_time_equal>:
 801b658:	b4f0      	push	{r4, r5, r6, r7}
 801b65a:	b084      	sub	sp, #16
 801b65c:	ac04      	add	r4, sp, #16
 801b65e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801b662:	4603      	mov	r3, r0
 801b664:	4924      	ldr	r1, [pc, #144]	@ (801b6f8 <rmw_time_equal+0xa0>)
 801b666:	9e03      	ldr	r6, [sp, #12]
 801b668:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801b66c:	2202      	movs	r2, #2
 801b66e:	4299      	cmp	r1, r3
 801b670:	41aa      	sbcs	r2, r5
 801b672:	d330      	bcc.n	801b6d6 <rmw_time_equal+0x7e>
 801b674:	4c21      	ldr	r4, [pc, #132]	@ (801b6fc <rmw_time_equal+0xa4>)
 801b676:	fba3 3204 	umull	r3, r2, r3, r4
 801b67a:	fb04 2205 	mla	r2, r4, r5, r2
 801b67e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b682:	43dd      	mvns	r5, r3
 801b684:	1a8c      	subs	r4, r1, r2
 801b686:	4285      	cmp	r5, r0
 801b688:	41b4      	sbcs	r4, r6
 801b68a:	d332      	bcc.n	801b6f2 <rmw_time_equal+0x9a>
 801b68c:	eb10 0c03 	adds.w	ip, r0, r3
 801b690:	eb42 0106 	adc.w	r1, r2, r6
 801b694:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801b698:	4817      	ldr	r0, [pc, #92]	@ (801b6f8 <rmw_time_equal+0xa0>)
 801b69a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801b69c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801b69e:	2202      	movs	r2, #2
 801b6a0:	4298      	cmp	r0, r3
 801b6a2:	41b2      	sbcs	r2, r6
 801b6a4:	d31c      	bcc.n	801b6e0 <rmw_time_equal+0x88>
 801b6a6:	4c15      	ldr	r4, [pc, #84]	@ (801b6fc <rmw_time_equal+0xa4>)
 801b6a8:	fba3 3204 	umull	r3, r2, r3, r4
 801b6ac:	fb04 2206 	mla	r2, r4, r6, r2
 801b6b0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801b6b4:	43de      	mvns	r6, r3
 801b6b6:	1a84      	subs	r4, r0, r2
 801b6b8:	42ae      	cmp	r6, r5
 801b6ba:	41bc      	sbcs	r4, r7
 801b6bc:	d315      	bcc.n	801b6ea <rmw_time_equal+0x92>
 801b6be:	195b      	adds	r3, r3, r5
 801b6c0:	eb42 0207 	adc.w	r2, r2, r7
 801b6c4:	428a      	cmp	r2, r1
 801b6c6:	bf08      	it	eq
 801b6c8:	4563      	cmpeq	r3, ip
 801b6ca:	bf0c      	ite	eq
 801b6cc:	2001      	moveq	r0, #1
 801b6ce:	2000      	movne	r0, #0
 801b6d0:	b004      	add	sp, #16
 801b6d2:	bcf0      	pop	{r4, r5, r6, r7}
 801b6d4:	4770      	bx	lr
 801b6d6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801b6da:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b6de:	e7d9      	b.n	801b694 <rmw_time_equal+0x3c>
 801b6e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b6e4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801b6e8:	e7ec      	b.n	801b6c4 <rmw_time_equal+0x6c>
 801b6ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b6ee:	4602      	mov	r2, r0
 801b6f0:	e7e8      	b.n	801b6c4 <rmw_time_equal+0x6c>
 801b6f2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801b6f6:	e7cd      	b.n	801b694 <rmw_time_equal+0x3c>
 801b6f8:	25c17d04 	.word	0x25c17d04
 801b6fc:	3b9aca00 	.word	0x3b9aca00

0801b700 <rmw_time_total_nsec>:
 801b700:	b470      	push	{r4, r5, r6}
 801b702:	b085      	sub	sp, #20
 801b704:	ac04      	add	r4, sp, #16
 801b706:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801b70a:	4603      	mov	r3, r0
 801b70c:	4912      	ldr	r1, [pc, #72]	@ (801b758 <rmw_time_total_nsec+0x58>)
 801b70e:	9e03      	ldr	r6, [sp, #12]
 801b710:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801b714:	2202      	movs	r2, #2
 801b716:	4299      	cmp	r1, r3
 801b718:	41aa      	sbcs	r2, r5
 801b71a:	d311      	bcc.n	801b740 <rmw_time_total_nsec+0x40>
 801b71c:	4c0f      	ldr	r4, [pc, #60]	@ (801b75c <rmw_time_total_nsec+0x5c>)
 801b71e:	fba3 3204 	umull	r3, r2, r3, r4
 801b722:	fb04 2205 	mla	r2, r4, r5, r2
 801b726:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b72a:	43dd      	mvns	r5, r3
 801b72c:	1a8c      	subs	r4, r1, r2
 801b72e:	4285      	cmp	r5, r0
 801b730:	41b4      	sbcs	r4, r6
 801b732:	d30c      	bcc.n	801b74e <rmw_time_total_nsec+0x4e>
 801b734:	1818      	adds	r0, r3, r0
 801b736:	eb42 0106 	adc.w	r1, r2, r6
 801b73a:	b005      	add	sp, #20
 801b73c:	bc70      	pop	{r4, r5, r6}
 801b73e:	4770      	bx	lr
 801b740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b744:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b748:	b005      	add	sp, #20
 801b74a:	bc70      	pop	{r4, r5, r6}
 801b74c:	4770      	bx	lr
 801b74e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b752:	b005      	add	sp, #20
 801b754:	bc70      	pop	{r4, r5, r6}
 801b756:	4770      	bx	lr
 801b758:	25c17d04 	.word	0x25c17d04
 801b75c:	3b9aca00 	.word	0x3b9aca00

0801b760 <rmw_get_zero_initialized_message_info>:
 801b760:	b510      	push	{r4, lr}
 801b762:	2240      	movs	r2, #64	@ 0x40
 801b764:	4604      	mov	r4, r0
 801b766:	2100      	movs	r1, #0
 801b768:	f001 ffda 	bl	801d720 <memset>
 801b76c:	4620      	mov	r0, r4
 801b76e:	bd10      	pop	{r4, pc}

0801b770 <on_status>:
 801b770:	b082      	sub	sp, #8
 801b772:	b002      	add	sp, #8
 801b774:	4770      	bx	lr
 801b776:	bf00      	nop

0801b778 <on_topic>:
 801b778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b77c:	4a22      	ldr	r2, [pc, #136]	@ (801b808 <on_topic+0x90>)
 801b77e:	b094      	sub	sp, #80	@ 0x50
 801b780:	6812      	ldr	r2, [r2, #0]
 801b782:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801b784:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b788:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801b78c:	b3c2      	cbz	r2, 801b800 <on_topic+0x88>
 801b78e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801b792:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801b796:	e001      	b.n	801b79c <on_topic+0x24>
 801b798:	6852      	ldr	r2, [r2, #4]
 801b79a:	b38a      	cbz	r2, 801b800 <on_topic+0x88>
 801b79c:	6894      	ldr	r4, [r2, #8]
 801b79e:	8aa3      	ldrh	r3, [r4, #20]
 801b7a0:	428b      	cmp	r3, r1
 801b7a2:	d1f9      	bne.n	801b798 <on_topic+0x20>
 801b7a4:	7da3      	ldrb	r3, [r4, #22]
 801b7a6:	4283      	cmp	r3, r0
 801b7a8:	d1f6      	bne.n	801b798 <on_topic+0x20>
 801b7aa:	2248      	movs	r2, #72	@ 0x48
 801b7ac:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801b7b0:	4668      	mov	r0, sp
 801b7b2:	f002 f87e 	bl	801d8b2 <memcpy>
 801b7b6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801b7ba:	cb0c      	ldmia	r3, {r2, r3}
 801b7bc:	4620      	mov	r0, r4
 801b7be:	f7f7 fedd 	bl	801357c <rmw_uxrce_get_static_input_buffer_for_entity>
 801b7c2:	4607      	mov	r7, r0
 801b7c4:	b1e0      	cbz	r0, 801b800 <on_topic+0x88>
 801b7c6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801b7ca:	4632      	mov	r2, r6
 801b7cc:	4628      	mov	r0, r5
 801b7ce:	f108 0110 	add.w	r1, r8, #16
 801b7d2:	f7f9 fa1b 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 801b7d6:	b930      	cbnz	r0, 801b7e6 <on_topic+0x6e>
 801b7d8:	480c      	ldr	r0, [pc, #48]	@ (801b80c <on_topic+0x94>)
 801b7da:	4639      	mov	r1, r7
 801b7dc:	b014      	add	sp, #80	@ 0x50
 801b7de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b7e2:	f000 b8bd 	b.w	801b960 <put_memory>
 801b7e6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801b7ea:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801b7ee:	f7f7 fcc3 	bl	8013178 <rmw_uros_epoch_nanos>
 801b7f2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801b7f6:	2305      	movs	r3, #5
 801b7f8:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b7fc:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801b800:	b014      	add	sp, #80	@ 0x50
 801b802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b806:	bf00      	nop
 801b808:	2000c384 	.word	0x2000c384
 801b80c:	2000c374 	.word	0x2000c374

0801b810 <on_request>:
 801b810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b814:	4823      	ldr	r0, [pc, #140]	@ (801b8a4 <on_request+0x94>)
 801b816:	b094      	sub	sp, #80	@ 0x50
 801b818:	6800      	ldr	r0, [r0, #0]
 801b81a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801b81c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b820:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b822:	2800      	cmp	r0, #0
 801b824:	d03b      	beq.n	801b89e <on_request+0x8e>
 801b826:	461d      	mov	r5, r3
 801b828:	e001      	b.n	801b82e <on_request+0x1e>
 801b82a:	6840      	ldr	r0, [r0, #4]
 801b82c:	b3b8      	cbz	r0, 801b89e <on_request+0x8e>
 801b82e:	6884      	ldr	r4, [r0, #8]
 801b830:	8b21      	ldrh	r1, [r4, #24]
 801b832:	4291      	cmp	r1, r2
 801b834:	d1f9      	bne.n	801b82a <on_request+0x1a>
 801b836:	2248      	movs	r2, #72	@ 0x48
 801b838:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b83c:	4668      	mov	r0, sp
 801b83e:	f002 f838 	bl	801d8b2 <memcpy>
 801b842:	f104 0320 	add.w	r3, r4, #32
 801b846:	cb0c      	ldmia	r3, {r2, r3}
 801b848:	4620      	mov	r0, r4
 801b84a:	f7f7 fe97 	bl	801357c <rmw_uxrce_get_static_input_buffer_for_entity>
 801b84e:	4680      	mov	r8, r0
 801b850:	b328      	cbz	r0, 801b89e <on_request+0x8e>
 801b852:	4638      	mov	r0, r7
 801b854:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801b858:	4632      	mov	r2, r6
 801b85a:	f107 0110 	add.w	r1, r7, #16
 801b85e:	f7f9 f9d5 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 801b862:	b930      	cbnz	r0, 801b872 <on_request+0x62>
 801b864:	4810      	ldr	r0, [pc, #64]	@ (801b8a8 <on_request+0x98>)
 801b866:	4641      	mov	r1, r8
 801b868:	b014      	add	sp, #80	@ 0x50
 801b86a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b86e:	f000 b877 	b.w	801b960 <put_memory>
 801b872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b874:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801b878:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801b87c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801b880:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b884:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b888:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b88c:	f7f7 fc74 	bl	8013178 <rmw_uros_epoch_nanos>
 801b890:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801b894:	2303      	movs	r3, #3
 801b896:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b89a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801b89e:	b014      	add	sp, #80	@ 0x50
 801b8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b8a4:	2000c354 	.word	0x2000c354
 801b8a8:	2000c374 	.word	0x2000c374

0801b8ac <on_reply>:
 801b8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8b0:	4821      	ldr	r0, [pc, #132]	@ (801b938 <on_reply+0x8c>)
 801b8b2:	b094      	sub	sp, #80	@ 0x50
 801b8b4:	6800      	ldr	r0, [r0, #0]
 801b8b6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801b8b8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b8bc:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b8be:	b3b8      	cbz	r0, 801b930 <on_reply+0x84>
 801b8c0:	461d      	mov	r5, r3
 801b8c2:	e001      	b.n	801b8c8 <on_reply+0x1c>
 801b8c4:	6840      	ldr	r0, [r0, #4]
 801b8c6:	b398      	cbz	r0, 801b930 <on_reply+0x84>
 801b8c8:	6884      	ldr	r4, [r0, #8]
 801b8ca:	8b21      	ldrh	r1, [r4, #24]
 801b8cc:	4291      	cmp	r1, r2
 801b8ce:	d1f9      	bne.n	801b8c4 <on_reply+0x18>
 801b8d0:	2248      	movs	r2, #72	@ 0x48
 801b8d2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b8d6:	4668      	mov	r0, sp
 801b8d8:	f001 ffeb 	bl	801d8b2 <memcpy>
 801b8dc:	f104 0320 	add.w	r3, r4, #32
 801b8e0:	cb0c      	ldmia	r3, {r2, r3}
 801b8e2:	4620      	mov	r0, r4
 801b8e4:	f7f7 fe4a 	bl	801357c <rmw_uxrce_get_static_input_buffer_for_entity>
 801b8e8:	4680      	mov	r8, r0
 801b8ea:	b308      	cbz	r0, 801b930 <on_reply+0x84>
 801b8ec:	4638      	mov	r0, r7
 801b8ee:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801b8f2:	4632      	mov	r2, r6
 801b8f4:	f107 0110 	add.w	r1, r7, #16
 801b8f8:	f7f9 f988 	bl	8014c0c <ucdr_deserialize_array_uint8_t>
 801b8fc:	b930      	cbnz	r0, 801b90c <on_reply+0x60>
 801b8fe:	480f      	ldr	r0, [pc, #60]	@ (801b93c <on_reply+0x90>)
 801b900:	4641      	mov	r1, r8
 801b902:	b014      	add	sp, #80	@ 0x50
 801b904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b908:	f000 b82a 	b.w	801b960 <put_memory>
 801b90c:	2200      	movs	r2, #0
 801b90e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801b912:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801b916:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801b91a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801b91e:	f7f7 fc2b 	bl	8013178 <rmw_uros_epoch_nanos>
 801b922:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801b926:	2304      	movs	r3, #4
 801b928:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b92c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801b930:	b014      	add	sp, #80	@ 0x50
 801b932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b936:	bf00      	nop
 801b938:	20007748 	.word	0x20007748
 801b93c:	2000c374 	.word	0x2000c374

0801b940 <get_memory>:
 801b940:	4603      	mov	r3, r0
 801b942:	6840      	ldr	r0, [r0, #4]
 801b944:	b158      	cbz	r0, 801b95e <get_memory+0x1e>
 801b946:	6842      	ldr	r2, [r0, #4]
 801b948:	605a      	str	r2, [r3, #4]
 801b94a:	b10a      	cbz	r2, 801b950 <get_memory+0x10>
 801b94c:	2100      	movs	r1, #0
 801b94e:	6011      	str	r1, [r2, #0]
 801b950:	681a      	ldr	r2, [r3, #0]
 801b952:	6042      	str	r2, [r0, #4]
 801b954:	b102      	cbz	r2, 801b958 <get_memory+0x18>
 801b956:	6010      	str	r0, [r2, #0]
 801b958:	2200      	movs	r2, #0
 801b95a:	6002      	str	r2, [r0, #0]
 801b95c:	6018      	str	r0, [r3, #0]
 801b95e:	4770      	bx	lr

0801b960 <put_memory>:
 801b960:	680b      	ldr	r3, [r1, #0]
 801b962:	b10b      	cbz	r3, 801b968 <put_memory+0x8>
 801b964:	684a      	ldr	r2, [r1, #4]
 801b966:	605a      	str	r2, [r3, #4]
 801b968:	684a      	ldr	r2, [r1, #4]
 801b96a:	b102      	cbz	r2, 801b96e <put_memory+0xe>
 801b96c:	6013      	str	r3, [r2, #0]
 801b96e:	6803      	ldr	r3, [r0, #0]
 801b970:	428b      	cmp	r3, r1
 801b972:	6843      	ldr	r3, [r0, #4]
 801b974:	bf08      	it	eq
 801b976:	6002      	streq	r2, [r0, #0]
 801b978:	604b      	str	r3, [r1, #4]
 801b97a:	b103      	cbz	r3, 801b97e <put_memory+0x1e>
 801b97c:	6019      	str	r1, [r3, #0]
 801b97e:	2300      	movs	r3, #0
 801b980:	600b      	str	r3, [r1, #0]
 801b982:	6041      	str	r1, [r0, #4]
 801b984:	4770      	bx	lr
 801b986:	bf00      	nop

0801b988 <rmw_create_guard_condition>:
 801b988:	b538      	push	{r3, r4, r5, lr}
 801b98a:	4605      	mov	r5, r0
 801b98c:	4807      	ldr	r0, [pc, #28]	@ (801b9ac <rmw_create_guard_condition+0x24>)
 801b98e:	f7ff ffd7 	bl	801b940 <get_memory>
 801b992:	b148      	cbz	r0, 801b9a8 <rmw_create_guard_condition+0x20>
 801b994:	6884      	ldr	r4, [r0, #8]
 801b996:	2300      	movs	r3, #0
 801b998:	7423      	strb	r3, [r4, #16]
 801b99a:	61e5      	str	r5, [r4, #28]
 801b99c:	f7f6 fbc0 	bl	8012120 <rmw_get_implementation_identifier>
 801b9a0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801b9a4:	f104 0014 	add.w	r0, r4, #20
 801b9a8:	bd38      	pop	{r3, r4, r5, pc}
 801b9aa:	bf00      	nop
 801b9ac:	2000c314 	.word	0x2000c314

0801b9b0 <rmw_destroy_guard_condition>:
 801b9b0:	b508      	push	{r3, lr}
 801b9b2:	4b08      	ldr	r3, [pc, #32]	@ (801b9d4 <rmw_destroy_guard_condition+0x24>)
 801b9b4:	6819      	ldr	r1, [r3, #0]
 801b9b6:	b911      	cbnz	r1, 801b9be <rmw_destroy_guard_condition+0xe>
 801b9b8:	e00a      	b.n	801b9d0 <rmw_destroy_guard_condition+0x20>
 801b9ba:	6849      	ldr	r1, [r1, #4]
 801b9bc:	b141      	cbz	r1, 801b9d0 <rmw_destroy_guard_condition+0x20>
 801b9be:	688b      	ldr	r3, [r1, #8]
 801b9c0:	3314      	adds	r3, #20
 801b9c2:	4298      	cmp	r0, r3
 801b9c4:	d1f9      	bne.n	801b9ba <rmw_destroy_guard_condition+0xa>
 801b9c6:	4803      	ldr	r0, [pc, #12]	@ (801b9d4 <rmw_destroy_guard_condition+0x24>)
 801b9c8:	f7ff ffca 	bl	801b960 <put_memory>
 801b9cc:	2000      	movs	r0, #0
 801b9ce:	bd08      	pop	{r3, pc}
 801b9d0:	2001      	movs	r0, #1
 801b9d2:	bd08      	pop	{r3, pc}
 801b9d4:	2000c314 	.word	0x2000c314

0801b9d8 <create_topic>:
 801b9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9dc:	4605      	mov	r5, r0
 801b9de:	b084      	sub	sp, #16
 801b9e0:	4822      	ldr	r0, [pc, #136]	@ (801ba6c <create_topic+0x94>)
 801b9e2:	460f      	mov	r7, r1
 801b9e4:	4616      	mov	r6, r2
 801b9e6:	f7ff ffab 	bl	801b940 <get_memory>
 801b9ea:	4604      	mov	r4, r0
 801b9ec:	2800      	cmp	r0, #0
 801b9ee:	d039      	beq.n	801ba64 <create_topic+0x8c>
 801b9f0:	692b      	ldr	r3, [r5, #16]
 801b9f2:	6884      	ldr	r4, [r0, #8]
 801b9f4:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 801ba74 <create_topic+0x9c>
 801b9f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801b9fc:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801ba00:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801ba04:	1c42      	adds	r2, r0, #1
 801ba06:	2102      	movs	r1, #2
 801ba08:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801ba0c:	f7f9 fcf4 	bl	80153f8 <uxr_object_id>
 801ba10:	223c      	movs	r2, #60	@ 0x3c
 801ba12:	6120      	str	r0, [r4, #16]
 801ba14:	4641      	mov	r1, r8
 801ba16:	4638      	mov	r0, r7
 801ba18:	f7f7 ffa4 	bl	8013964 <generate_topic_name>
 801ba1c:	b1f0      	cbz	r0, 801ba5c <create_topic+0x84>
 801ba1e:	4f14      	ldr	r7, [pc, #80]	@ (801ba70 <create_topic+0x98>)
 801ba20:	4630      	mov	r0, r6
 801ba22:	2264      	movs	r2, #100	@ 0x64
 801ba24:	4639      	mov	r1, r7
 801ba26:	f7f7 ff6d 	bl	8013904 <generate_type_name>
 801ba2a:	b1b8      	cbz	r0, 801ba5c <create_topic+0x84>
 801ba2c:	6928      	ldr	r0, [r5, #16]
 801ba2e:	2306      	movs	r3, #6
 801ba30:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801ba34:	f8cd 8000 	str.w	r8, [sp]
 801ba38:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801ba3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ba40:	6811      	ldr	r1, [r2, #0]
 801ba42:	696b      	ldr	r3, [r5, #20]
 801ba44:	6922      	ldr	r2, [r4, #16]
 801ba46:	f7f9 fac5 	bl	8014fd4 <uxr_buffer_create_topic_bin>
 801ba4a:	4602      	mov	r2, r0
 801ba4c:	6928      	ldr	r0, [r5, #16]
 801ba4e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801ba52:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801ba56:	f7f7 fe85 	bl	8013764 <run_xrce_session>
 801ba5a:	b918      	cbnz	r0, 801ba64 <create_topic+0x8c>
 801ba5c:	4620      	mov	r0, r4
 801ba5e:	f7f7 fd81 	bl	8013564 <rmw_uxrce_fini_topic_memory>
 801ba62:	2400      	movs	r4, #0
 801ba64:	4620      	mov	r0, r4
 801ba66:	b004      	add	sp, #16
 801ba68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba6c:	2000c394 	.word	0x2000c394
 801ba70:	2000c474 	.word	0x2000c474
 801ba74:	2000c438 	.word	0x2000c438

0801ba78 <destroy_topic>:
 801ba78:	b538      	push	{r3, r4, r5, lr}
 801ba7a:	6985      	ldr	r5, [r0, #24]
 801ba7c:	b1d5      	cbz	r5, 801bab4 <destroy_topic+0x3c>
 801ba7e:	4604      	mov	r4, r0
 801ba80:	6928      	ldr	r0, [r5, #16]
 801ba82:	6922      	ldr	r2, [r4, #16]
 801ba84:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801ba88:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ba8c:	6819      	ldr	r1, [r3, #0]
 801ba8e:	f7f9 fa23 	bl	8014ed8 <uxr_buffer_delete_entity>
 801ba92:	4602      	mov	r2, r0
 801ba94:	6928      	ldr	r0, [r5, #16]
 801ba96:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801ba9a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801ba9e:	f7f7 fe61 	bl	8013764 <run_xrce_session>
 801baa2:	2800      	cmp	r0, #0
 801baa4:	4620      	mov	r0, r4
 801baa6:	bf14      	ite	ne
 801baa8:	2400      	movne	r4, #0
 801baaa:	2402      	moveq	r4, #2
 801baac:	f7f7 fd5a 	bl	8013564 <rmw_uxrce_fini_topic_memory>
 801bab0:	4620      	mov	r0, r4
 801bab2:	bd38      	pop	{r3, r4, r5, pc}
 801bab4:	2401      	movs	r4, #1
 801bab6:	4620      	mov	r0, r4
 801bab8:	bd38      	pop	{r3, r4, r5, pc}
 801baba:	bf00      	nop

0801babc <rmw_take_with_info>:
 801babc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801babe:	4604      	mov	r4, r0
 801bac0:	6800      	ldr	r0, [r0, #0]
 801bac2:	b089      	sub	sp, #36	@ 0x24
 801bac4:	460f      	mov	r7, r1
 801bac6:	4615      	mov	r5, r2
 801bac8:	b128      	cbz	r0, 801bad6 <rmw_take_with_info+0x1a>
 801baca:	4b24      	ldr	r3, [pc, #144]	@ (801bb5c <rmw_take_with_info+0xa0>)
 801bacc:	6819      	ldr	r1, [r3, #0]
 801bace:	f7e4 fba7 	bl	8000220 <strcmp>
 801bad2:	2800      	cmp	r0, #0
 801bad4:	d13e      	bne.n	801bb54 <rmw_take_with_info+0x98>
 801bad6:	b305      	cbz	r5, 801bb1a <rmw_take_with_info+0x5e>
 801bad8:	6864      	ldr	r4, [r4, #4]
 801bada:	2300      	movs	r3, #0
 801badc:	702b      	strb	r3, [r5, #0]
 801bade:	f7f7 fdc3 	bl	8013668 <rmw_uxrce_clean_expired_static_input_buffer>
 801bae2:	4620      	mov	r0, r4
 801bae4:	f7f7 fd9a 	bl	801361c <rmw_uxrce_find_static_input_buffer_by_owner>
 801bae8:	4606      	mov	r6, r0
 801baea:	b1f0      	cbz	r0, 801bb2a <rmw_take_with_info+0x6e>
 801baec:	6881      	ldr	r1, [r0, #8]
 801baee:	4668      	mov	r0, sp
 801baf0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801baf4:	3110      	adds	r1, #16
 801baf6:	f7f3 fe7f 	bl	800f7f8 <ucdr_init_buffer>
 801bafa:	69a3      	ldr	r3, [r4, #24]
 801bafc:	4639      	mov	r1, r7
 801bafe:	68db      	ldr	r3, [r3, #12]
 801bb00:	4668      	mov	r0, sp
 801bb02:	4798      	blx	r3
 801bb04:	4631      	mov	r1, r6
 801bb06:	4604      	mov	r4, r0
 801bb08:	4815      	ldr	r0, [pc, #84]	@ (801bb60 <rmw_take_with_info+0xa4>)
 801bb0a:	f7ff ff29 	bl	801b960 <put_memory>
 801bb0e:	702c      	strb	r4, [r5, #0]
 801bb10:	f084 0001 	eor.w	r0, r4, #1
 801bb14:	b2c0      	uxtb	r0, r0
 801bb16:	b009      	add	sp, #36	@ 0x24
 801bb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb1a:	6864      	ldr	r4, [r4, #4]
 801bb1c:	f7f7 fda4 	bl	8013668 <rmw_uxrce_clean_expired_static_input_buffer>
 801bb20:	4620      	mov	r0, r4
 801bb22:	f7f7 fd7b 	bl	801361c <rmw_uxrce_find_static_input_buffer_by_owner>
 801bb26:	4605      	mov	r5, r0
 801bb28:	b910      	cbnz	r0, 801bb30 <rmw_take_with_info+0x74>
 801bb2a:	2001      	movs	r0, #1
 801bb2c:	b009      	add	sp, #36	@ 0x24
 801bb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb30:	68a9      	ldr	r1, [r5, #8]
 801bb32:	4668      	mov	r0, sp
 801bb34:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801bb38:	3110      	adds	r1, #16
 801bb3a:	f7f3 fe5d 	bl	800f7f8 <ucdr_init_buffer>
 801bb3e:	69a3      	ldr	r3, [r4, #24]
 801bb40:	4639      	mov	r1, r7
 801bb42:	68db      	ldr	r3, [r3, #12]
 801bb44:	4668      	mov	r0, sp
 801bb46:	4798      	blx	r3
 801bb48:	4629      	mov	r1, r5
 801bb4a:	4604      	mov	r4, r0
 801bb4c:	4804      	ldr	r0, [pc, #16]	@ (801bb60 <rmw_take_with_info+0xa4>)
 801bb4e:	f7ff ff07 	bl	801b960 <put_memory>
 801bb52:	e7dd      	b.n	801bb10 <rmw_take_with_info+0x54>
 801bb54:	200c      	movs	r0, #12
 801bb56:	b009      	add	sp, #36	@ 0x24
 801bb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb5a:	bf00      	nop
 801bb5c:	08020ae8 	.word	0x08020ae8
 801bb60:	2000c374 	.word	0x2000c374

0801bb64 <rmw_trigger_guard_condition>:
 801bb64:	b160      	cbz	r0, 801bb80 <rmw_trigger_guard_condition+0x1c>
 801bb66:	b510      	push	{r4, lr}
 801bb68:	4604      	mov	r4, r0
 801bb6a:	6800      	ldr	r0, [r0, #0]
 801bb6c:	f7f7 ff14 	bl	8013998 <is_uxrce_rmw_identifier_valid>
 801bb70:	b908      	cbnz	r0, 801bb76 <rmw_trigger_guard_condition+0x12>
 801bb72:	2001      	movs	r0, #1
 801bb74:	bd10      	pop	{r4, pc}
 801bb76:	6863      	ldr	r3, [r4, #4]
 801bb78:	2201      	movs	r2, #1
 801bb7a:	741a      	strb	r2, [r3, #16]
 801bb7c:	2000      	movs	r0, #0
 801bb7e:	bd10      	pop	{r4, pc}
 801bb80:	2001      	movs	r0, #1
 801bb82:	4770      	bx	lr

0801bb84 <rmw_wait>:
 801bb84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bb88:	b089      	sub	sp, #36	@ 0x24
 801bb8a:	4605      	mov	r5, r0
 801bb8c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801bb8e:	460e      	mov	r6, r1
 801bb90:	4698      	mov	r8, r3
 801bb92:	4691      	mov	r9, r2
 801bb94:	2a00      	cmp	r2, #0
 801bb96:	f000 810a 	beq.w	801bdae <rmw_wait+0x22a>
 801bb9a:	b16c      	cbz	r4, 801bbb8 <rmw_wait+0x34>
 801bb9c:	4bae      	ldr	r3, [pc, #696]	@ (801be58 <rmw_wait+0x2d4>)
 801bb9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bba0:	af04      	add	r7, sp, #16
 801bba2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801bba6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801bbaa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801bbae:	f7ff fd53 	bl	801b658 <rmw_time_equal>
 801bbb2:	2800      	cmp	r0, #0
 801bbb4:	f000 8127 	beq.w	801be06 <rmw_wait+0x282>
 801bbb8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801bbbc:	f7f7 fd54 	bl	8013668 <rmw_uxrce_clean_expired_static_input_buffer>
 801bbc0:	4ba6      	ldr	r3, [pc, #664]	@ (801be5c <rmw_wait+0x2d8>)
 801bbc2:	681c      	ldr	r4, [r3, #0]
 801bbc4:	b14c      	cbz	r4, 801bbda <rmw_wait+0x56>
 801bbc6:	4623      	mov	r3, r4
 801bbc8:	2100      	movs	r1, #0
 801bbca:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801bbce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bbd2:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	d1f7      	bne.n	801bbca <rmw_wait+0x46>
 801bbda:	f1b9 0f00 	cmp.w	r9, #0
 801bbde:	d011      	beq.n	801bc04 <rmw_wait+0x80>
 801bbe0:	f8d9 1000 	ldr.w	r1, [r9]
 801bbe4:	b171      	cbz	r1, 801bc04 <rmw_wait+0x80>
 801bbe6:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801bbea:	2300      	movs	r3, #0
 801bbec:	2001      	movs	r0, #1
 801bbee:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801bbf2:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801bbf4:	6912      	ldr	r2, [r2, #16]
 801bbf6:	3301      	adds	r3, #1
 801bbf8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bbfc:	4299      	cmp	r1, r3
 801bbfe:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801bc02:	d1f4      	bne.n	801bbee <rmw_wait+0x6a>
 801bc04:	f1b8 0f00 	cmp.w	r8, #0
 801bc08:	d011      	beq.n	801bc2e <rmw_wait+0xaa>
 801bc0a:	f8d8 1000 	ldr.w	r1, [r8]
 801bc0e:	b171      	cbz	r1, 801bc2e <rmw_wait+0xaa>
 801bc10:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801bc14:	2300      	movs	r3, #0
 801bc16:	2001      	movs	r0, #1
 801bc18:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801bc1c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801bc1e:	6912      	ldr	r2, [r2, #16]
 801bc20:	3301      	adds	r3, #1
 801bc22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bc26:	4299      	cmp	r1, r3
 801bc28:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801bc2c:	d1f4      	bne.n	801bc18 <rmw_wait+0x94>
 801bc2e:	b185      	cbz	r5, 801bc52 <rmw_wait+0xce>
 801bc30:	6829      	ldr	r1, [r5, #0]
 801bc32:	b171      	cbz	r1, 801bc52 <rmw_wait+0xce>
 801bc34:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801bc38:	2300      	movs	r3, #0
 801bc3a:	2001      	movs	r0, #1
 801bc3c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801bc40:	6a12      	ldr	r2, [r2, #32]
 801bc42:	6912      	ldr	r2, [r2, #16]
 801bc44:	3301      	adds	r3, #1
 801bc46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bc4a:	4299      	cmp	r1, r3
 801bc4c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801bc50:	d1f4      	bne.n	801bc3c <rmw_wait+0xb8>
 801bc52:	b34c      	cbz	r4, 801bca8 <rmw_wait+0x124>
 801bc54:	4622      	mov	r2, r4
 801bc56:	2300      	movs	r3, #0
 801bc58:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801bc5c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801bc60:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801bc64:	440b      	add	r3, r1
 801bc66:	b2db      	uxtb	r3, r3
 801bc68:	2a00      	cmp	r2, #0
 801bc6a:	d1f5      	bne.n	801bc58 <rmw_wait+0xd4>
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	f000 8084 	beq.w	801bd7a <rmw_wait+0x1f6>
 801bc72:	1c7a      	adds	r2, r7, #1
 801bc74:	d00d      	beq.n	801bc92 <rmw_wait+0x10e>
 801bc76:	ee07 7a90 	vmov	s15, r7
 801bc7a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801bc7e:	ee07 3a90 	vmov	s15, r3
 801bc82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bc86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bc8a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801bc8e:	ee17 7a90 	vmov	r7, s15
 801bc92:	68a0      	ldr	r0, [r4, #8]
 801bc94:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801bc98:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	f040 8090 	bne.w	801bdc2 <rmw_wait+0x23e>
 801bca2:	6864      	ldr	r4, [r4, #4]
 801bca4:	2c00      	cmp	r4, #0
 801bca6:	d1f4      	bne.n	801bc92 <rmw_wait+0x10e>
 801bca8:	f1b9 0f00 	cmp.w	r9, #0
 801bcac:	f000 80bc 	beq.w	801be28 <rmw_wait+0x2a4>
 801bcb0:	f8d9 7000 	ldr.w	r7, [r9]
 801bcb4:	2f00      	cmp	r7, #0
 801bcb6:	f000 808e 	beq.w	801bdd6 <rmw_wait+0x252>
 801bcba:	2400      	movs	r4, #0
 801bcbc:	4627      	mov	r7, r4
 801bcbe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801bcc2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801bcc6:	f7f7 fca9 	bl	801361c <rmw_uxrce_find_static_input_buffer_by_owner>
 801bcca:	2800      	cmp	r0, #0
 801bccc:	d05f      	beq.n	801bd8e <rmw_wait+0x20a>
 801bcce:	f8d9 3000 	ldr.w	r3, [r9]
 801bcd2:	3401      	adds	r4, #1
 801bcd4:	42a3      	cmp	r3, r4
 801bcd6:	f04f 0701 	mov.w	r7, #1
 801bcda:	d8f0      	bhi.n	801bcbe <rmw_wait+0x13a>
 801bcdc:	f1b8 0f00 	cmp.w	r8, #0
 801bce0:	d012      	beq.n	801bd08 <rmw_wait+0x184>
 801bce2:	f8d8 3000 	ldr.w	r3, [r8]
 801bce6:	b17b      	cbz	r3, 801bd08 <rmw_wait+0x184>
 801bce8:	2400      	movs	r4, #0
 801bcea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801bcee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801bcf2:	f7f7 fc93 	bl	801361c <rmw_uxrce_find_static_input_buffer_by_owner>
 801bcf6:	2800      	cmp	r0, #0
 801bcf8:	d051      	beq.n	801bd9e <rmw_wait+0x21a>
 801bcfa:	f8d8 3000 	ldr.w	r3, [r8]
 801bcfe:	3401      	adds	r4, #1
 801bd00:	42a3      	cmp	r3, r4
 801bd02:	f04f 0701 	mov.w	r7, #1
 801bd06:	d8f0      	bhi.n	801bcea <rmw_wait+0x166>
 801bd08:	b1dd      	cbz	r5, 801bd42 <rmw_wait+0x1be>
 801bd0a:	682b      	ldr	r3, [r5, #0]
 801bd0c:	b1cb      	cbz	r3, 801bd42 <rmw_wait+0x1be>
 801bd0e:	2400      	movs	r4, #0
 801bd10:	686b      	ldr	r3, [r5, #4]
 801bd12:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801bd16:	f7f7 fc81 	bl	801361c <rmw_uxrce_find_static_input_buffer_by_owner>
 801bd1a:	b158      	cbz	r0, 801bd34 <rmw_wait+0x1b0>
 801bd1c:	682b      	ldr	r3, [r5, #0]
 801bd1e:	3401      	adds	r4, #1
 801bd20:	42a3      	cmp	r3, r4
 801bd22:	d969      	bls.n	801bdf8 <rmw_wait+0x274>
 801bd24:	686b      	ldr	r3, [r5, #4]
 801bd26:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801bd2a:	2701      	movs	r7, #1
 801bd2c:	f7f7 fc76 	bl	801361c <rmw_uxrce_find_static_input_buffer_by_owner>
 801bd30:	2800      	cmp	r0, #0
 801bd32:	d1f3      	bne.n	801bd1c <rmw_wait+0x198>
 801bd34:	e9d5 3200 	ldrd	r3, r2, [r5]
 801bd38:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801bd3c:	3401      	adds	r4, #1
 801bd3e:	42a3      	cmp	r3, r4
 801bd40:	d8e6      	bhi.n	801bd10 <rmw_wait+0x18c>
 801bd42:	b1a6      	cbz	r6, 801bd6e <rmw_wait+0x1ea>
 801bd44:	6834      	ldr	r4, [r6, #0]
 801bd46:	b194      	cbz	r4, 801bd6e <rmw_wait+0x1ea>
 801bd48:	2300      	movs	r3, #0
 801bd4a:	461d      	mov	r5, r3
 801bd4c:	e004      	b.n	801bd58 <rmw_wait+0x1d4>
 801bd4e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801bd52:	3301      	adds	r3, #1
 801bd54:	42a3      	cmp	r3, r4
 801bd56:	d00a      	beq.n	801bd6e <rmw_wait+0x1ea>
 801bd58:	6870      	ldr	r0, [r6, #4]
 801bd5a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801bd5e:	7c0a      	ldrb	r2, [r1, #16]
 801bd60:	2a00      	cmp	r2, #0
 801bd62:	d0f4      	beq.n	801bd4e <rmw_wait+0x1ca>
 801bd64:	3301      	adds	r3, #1
 801bd66:	42a3      	cmp	r3, r4
 801bd68:	740d      	strb	r5, [r1, #16]
 801bd6a:	4617      	mov	r7, r2
 801bd6c:	d1f4      	bne.n	801bd58 <rmw_wait+0x1d4>
 801bd6e:	2f00      	cmp	r7, #0
 801bd70:	d03e      	beq.n	801bdf0 <rmw_wait+0x26c>
 801bd72:	2000      	movs	r0, #0
 801bd74:	b009      	add	sp, #36	@ 0x24
 801bd76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bd7a:	68a0      	ldr	r0, [r4, #8]
 801bd7c:	2100      	movs	r1, #0
 801bd7e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bd82:	f7fa f951 	bl	8016028 <uxr_run_session_timeout>
 801bd86:	6864      	ldr	r4, [r4, #4]
 801bd88:	2c00      	cmp	r4, #0
 801bd8a:	d1f6      	bne.n	801bd7a <rmw_wait+0x1f6>
 801bd8c:	e78c      	b.n	801bca8 <rmw_wait+0x124>
 801bd8e:	e9d9 3200 	ldrd	r3, r2, [r9]
 801bd92:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801bd96:	3401      	adds	r4, #1
 801bd98:	42a3      	cmp	r3, r4
 801bd9a:	d890      	bhi.n	801bcbe <rmw_wait+0x13a>
 801bd9c:	e79e      	b.n	801bcdc <rmw_wait+0x158>
 801bd9e:	e9d8 3200 	ldrd	r3, r2, [r8]
 801bda2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801bda6:	3401      	adds	r4, #1
 801bda8:	429c      	cmp	r4, r3
 801bdaa:	d39e      	bcc.n	801bcea <rmw_wait+0x166>
 801bdac:	e7ac      	b.n	801bd08 <rmw_wait+0x184>
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	f47f aef3 	bne.w	801bb9a <rmw_wait+0x16>
 801bdb4:	2800      	cmp	r0, #0
 801bdb6:	f47f aef0 	bne.w	801bb9a <rmw_wait+0x16>
 801bdba:	2900      	cmp	r1, #0
 801bdbc:	f47f aeed 	bne.w	801bb9a <rmw_wait+0x16>
 801bdc0:	e7d7      	b.n	801bd72 <rmw_wait+0x1ee>
 801bdc2:	4639      	mov	r1, r7
 801bdc4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bdc8:	f7fa f948 	bl	801605c <uxr_run_session_until_data>
 801bdcc:	6864      	ldr	r4, [r4, #4]
 801bdce:	2c00      	cmp	r4, #0
 801bdd0:	f47f af5f 	bne.w	801bc92 <rmw_wait+0x10e>
 801bdd4:	e768      	b.n	801bca8 <rmw_wait+0x124>
 801bdd6:	f1b8 0f00 	cmp.w	r8, #0
 801bdda:	d032      	beq.n	801be42 <rmw_wait+0x2be>
 801bddc:	f8d8 3000 	ldr.w	r3, [r8]
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	d181      	bne.n	801bce8 <rmw_wait+0x164>
 801bde4:	461f      	mov	r7, r3
 801bde6:	2d00      	cmp	r5, #0
 801bde8:	d18f      	bne.n	801bd0a <rmw_wait+0x186>
 801bdea:	462f      	mov	r7, r5
 801bdec:	2e00      	cmp	r6, #0
 801bdee:	d1a9      	bne.n	801bd44 <rmw_wait+0x1c0>
 801bdf0:	2002      	movs	r0, #2
 801bdf2:	b009      	add	sp, #36	@ 0x24
 801bdf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bdf8:	2e00      	cmp	r6, #0
 801bdfa:	d0ba      	beq.n	801bd72 <rmw_wait+0x1ee>
 801bdfc:	6834      	ldr	r4, [r6, #0]
 801bdfe:	2701      	movs	r7, #1
 801be00:	2c00      	cmp	r4, #0
 801be02:	d1a1      	bne.n	801bd48 <rmw_wait+0x1c4>
 801be04:	e7b5      	b.n	801bd72 <rmw_wait+0x1ee>
 801be06:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801be0a:	f7ff fc79 	bl	801b700 <rmw_time_total_nsec>
 801be0e:	2300      	movs	r3, #0
 801be10:	4a13      	ldr	r2, [pc, #76]	@ (801be60 <rmw_wait+0x2dc>)
 801be12:	f7e4 ff29 	bl	8000c68 <__aeabi_uldivmod>
 801be16:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801be1a:	f171 0300 	sbcs.w	r3, r1, #0
 801be1e:	4607      	mov	r7, r0
 801be20:	bfa8      	it	ge
 801be22:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801be26:	e6c9      	b.n	801bbbc <rmw_wait+0x38>
 801be28:	f1b8 0f00 	cmp.w	r8, #0
 801be2c:	d009      	beq.n	801be42 <rmw_wait+0x2be>
 801be2e:	f8d8 3000 	ldr.w	r3, [r8]
 801be32:	464f      	mov	r7, r9
 801be34:	2b00      	cmp	r3, #0
 801be36:	f47f af57 	bne.w	801bce8 <rmw_wait+0x164>
 801be3a:	2d00      	cmp	r5, #0
 801be3c:	f47f af65 	bne.w	801bd0a <rmw_wait+0x186>
 801be40:	e7d3      	b.n	801bdea <rmw_wait+0x266>
 801be42:	b17d      	cbz	r5, 801be64 <rmw_wait+0x2e0>
 801be44:	682b      	ldr	r3, [r5, #0]
 801be46:	4647      	mov	r7, r8
 801be48:	2b00      	cmp	r3, #0
 801be4a:	f47f af60 	bne.w	801bd0e <rmw_wait+0x18a>
 801be4e:	2e00      	cmp	r6, #0
 801be50:	f47f af78 	bne.w	801bd44 <rmw_wait+0x1c0>
 801be54:	e7cc      	b.n	801bdf0 <rmw_wait+0x26c>
 801be56:	bf00      	nop
 801be58:	0801ed80 	.word	0x0801ed80
 801be5c:	2000c364 	.word	0x2000c364
 801be60:	000f4240 	.word	0x000f4240
 801be64:	2e00      	cmp	r6, #0
 801be66:	d0c3      	beq.n	801bdf0 <rmw_wait+0x26c>
 801be68:	6834      	ldr	r4, [r6, #0]
 801be6a:	462f      	mov	r7, r5
 801be6c:	2c00      	cmp	r4, #0
 801be6e:	f47f af6b 	bne.w	801bd48 <rmw_wait+0x1c4>
 801be72:	e7bd      	b.n	801bdf0 <rmw_wait+0x26c>

0801be74 <rmw_create_wait_set>:
 801be74:	b508      	push	{r3, lr}
 801be76:	4803      	ldr	r0, [pc, #12]	@ (801be84 <rmw_create_wait_set+0x10>)
 801be78:	f7ff fd62 	bl	801b940 <get_memory>
 801be7c:	b108      	cbz	r0, 801be82 <rmw_create_wait_set+0xe>
 801be7e:	6880      	ldr	r0, [r0, #8]
 801be80:	3010      	adds	r0, #16
 801be82:	bd08      	pop	{r3, pc}
 801be84:	2000c3a4 	.word	0x2000c3a4

0801be88 <rmw_destroy_wait_set>:
 801be88:	b508      	push	{r3, lr}
 801be8a:	4b08      	ldr	r3, [pc, #32]	@ (801beac <rmw_destroy_wait_set+0x24>)
 801be8c:	6819      	ldr	r1, [r3, #0]
 801be8e:	b911      	cbnz	r1, 801be96 <rmw_destroy_wait_set+0xe>
 801be90:	e00a      	b.n	801bea8 <rmw_destroy_wait_set+0x20>
 801be92:	6849      	ldr	r1, [r1, #4]
 801be94:	b141      	cbz	r1, 801bea8 <rmw_destroy_wait_set+0x20>
 801be96:	688b      	ldr	r3, [r1, #8]
 801be98:	3310      	adds	r3, #16
 801be9a:	4298      	cmp	r0, r3
 801be9c:	d1f9      	bne.n	801be92 <rmw_destroy_wait_set+0xa>
 801be9e:	4803      	ldr	r0, [pc, #12]	@ (801beac <rmw_destroy_wait_set+0x24>)
 801bea0:	f7ff fd5e 	bl	801b960 <put_memory>
 801bea4:	2000      	movs	r0, #0
 801bea6:	bd08      	pop	{r3, pc}
 801bea8:	2001      	movs	r0, #1
 801beaa:	bd08      	pop	{r3, pc}
 801beac:	2000c3a4 	.word	0x2000c3a4

0801beb0 <robotic_interfaces__srv__Keyboard_Request__init>:
 801beb0:	b538      	push	{r3, r4, r5, lr}
 801beb2:	4604      	mov	r4, r0
 801beb4:	b128      	cbz	r0, 801bec2 <robotic_interfaces__srv__Keyboard_Request__init+0x12>
 801beb6:	f000 f843 	bl	801bf40 <rosidl_runtime_c__String__init>
 801beba:	4605      	mov	r5, r0
 801bebc:	b120      	cbz	r0, 801bec8 <robotic_interfaces__srv__Keyboard_Request__init+0x18>
 801bebe:	4628      	mov	r0, r5
 801bec0:	bd38      	pop	{r3, r4, r5, pc}
 801bec2:	4605      	mov	r5, r0
 801bec4:	4628      	mov	r0, r5
 801bec6:	bd38      	pop	{r3, r4, r5, pc}
 801bec8:	4620      	mov	r0, r4
 801beca:	f000 f84f 	bl	801bf6c <rosidl_runtime_c__String__fini>
 801bece:	4628      	mov	r0, r5
 801bed0:	bd38      	pop	{r3, r4, r5, pc}
 801bed2:	bf00      	nop

0801bed4 <robotic_interfaces__srv__Keyboard_Request__fini>:
 801bed4:	b108      	cbz	r0, 801beda <robotic_interfaces__srv__Keyboard_Request__fini+0x6>
 801bed6:	f000 b849 	b.w	801bf6c <rosidl_runtime_c__String__fini>
 801beda:	4770      	bx	lr

0801bedc <robotic_interfaces__srv__Keyboard_Response__init>:
 801bedc:	b570      	push	{r4, r5, r6, lr}
 801bede:	4604      	mov	r4, r0
 801bee0:	b1b0      	cbz	r0, 801bf10 <robotic_interfaces__srv__Keyboard_Response__init+0x34>
 801bee2:	1d06      	adds	r6, r0, #4
 801bee4:	4630      	mov	r0, r6
 801bee6:	f000 f82b 	bl	801bf40 <rosidl_runtime_c__String__init>
 801beea:	4605      	mov	r5, r0
 801beec:	b138      	cbz	r0, 801befe <robotic_interfaces__srv__Keyboard_Response__init+0x22>
 801beee:	3410      	adds	r4, #16
 801bef0:	4620      	mov	r0, r4
 801bef2:	f000 f825 	bl	801bf40 <rosidl_runtime_c__String__init>
 801bef6:	4605      	mov	r5, r0
 801bef8:	b168      	cbz	r0, 801bf16 <robotic_interfaces__srv__Keyboard_Response__init+0x3a>
 801befa:	4628      	mov	r0, r5
 801befc:	bd70      	pop	{r4, r5, r6, pc}
 801befe:	4630      	mov	r0, r6
 801bf00:	f000 f834 	bl	801bf6c <rosidl_runtime_c__String__fini>
 801bf04:	f104 0010 	add.w	r0, r4, #16
 801bf08:	f000 f830 	bl	801bf6c <rosidl_runtime_c__String__fini>
 801bf0c:	4628      	mov	r0, r5
 801bf0e:	bd70      	pop	{r4, r5, r6, pc}
 801bf10:	4605      	mov	r5, r0
 801bf12:	4628      	mov	r0, r5
 801bf14:	bd70      	pop	{r4, r5, r6, pc}
 801bf16:	4630      	mov	r0, r6
 801bf18:	f000 f828 	bl	801bf6c <rosidl_runtime_c__String__fini>
 801bf1c:	4620      	mov	r0, r4
 801bf1e:	f000 f825 	bl	801bf6c <rosidl_runtime_c__String__fini>
 801bf22:	e7ea      	b.n	801befa <robotic_interfaces__srv__Keyboard_Response__init+0x1e>

0801bf24 <robotic_interfaces__srv__Keyboard_Response__fini>:
 801bf24:	b150      	cbz	r0, 801bf3c <robotic_interfaces__srv__Keyboard_Response__fini+0x18>
 801bf26:	b510      	push	{r4, lr}
 801bf28:	4604      	mov	r4, r0
 801bf2a:	3004      	adds	r0, #4
 801bf2c:	f000 f81e 	bl	801bf6c <rosidl_runtime_c__String__fini>
 801bf30:	f104 0010 	add.w	r0, r4, #16
 801bf34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf38:	f000 b818 	b.w	801bf6c <rosidl_runtime_c__String__fini>
 801bf3c:	4770      	bx	lr
 801bf3e:	bf00      	nop

0801bf40 <rosidl_runtime_c__String__init>:
 801bf40:	b510      	push	{r4, lr}
 801bf42:	4604      	mov	r4, r0
 801bf44:	b086      	sub	sp, #24
 801bf46:	b170      	cbz	r0, 801bf66 <rosidl_runtime_c__String__init+0x26>
 801bf48:	a801      	add	r0, sp, #4
 801bf4a:	f7f5 fa65 	bl	8011418 <rcutils_get_default_allocator>
 801bf4e:	9b01      	ldr	r3, [sp, #4]
 801bf50:	9905      	ldr	r1, [sp, #20]
 801bf52:	2001      	movs	r0, #1
 801bf54:	4798      	blx	r3
 801bf56:	6020      	str	r0, [r4, #0]
 801bf58:	b128      	cbz	r0, 801bf66 <rosidl_runtime_c__String__init+0x26>
 801bf5a:	2100      	movs	r1, #0
 801bf5c:	2201      	movs	r2, #1
 801bf5e:	7001      	strb	r1, [r0, #0]
 801bf60:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801bf64:	4610      	mov	r0, r2
 801bf66:	b006      	add	sp, #24
 801bf68:	bd10      	pop	{r4, pc}
 801bf6a:	bf00      	nop

0801bf6c <rosidl_runtime_c__String__fini>:
 801bf6c:	b320      	cbz	r0, 801bfb8 <rosidl_runtime_c__String__fini+0x4c>
 801bf6e:	b510      	push	{r4, lr}
 801bf70:	6803      	ldr	r3, [r0, #0]
 801bf72:	b086      	sub	sp, #24
 801bf74:	4604      	mov	r4, r0
 801bf76:	b173      	cbz	r3, 801bf96 <rosidl_runtime_c__String__fini+0x2a>
 801bf78:	6883      	ldr	r3, [r0, #8]
 801bf7a:	b1f3      	cbz	r3, 801bfba <rosidl_runtime_c__String__fini+0x4e>
 801bf7c:	a801      	add	r0, sp, #4
 801bf7e:	f7f5 fa4b 	bl	8011418 <rcutils_get_default_allocator>
 801bf82:	9b02      	ldr	r3, [sp, #8]
 801bf84:	9905      	ldr	r1, [sp, #20]
 801bf86:	6820      	ldr	r0, [r4, #0]
 801bf88:	4798      	blx	r3
 801bf8a:	2300      	movs	r3, #0
 801bf8c:	e9c4 3300 	strd	r3, r3, [r4]
 801bf90:	60a3      	str	r3, [r4, #8]
 801bf92:	b006      	add	sp, #24
 801bf94:	bd10      	pop	{r4, pc}
 801bf96:	6843      	ldr	r3, [r0, #4]
 801bf98:	b9db      	cbnz	r3, 801bfd2 <rosidl_runtime_c__String__fini+0x66>
 801bf9a:	6883      	ldr	r3, [r0, #8]
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d0f8      	beq.n	801bf92 <rosidl_runtime_c__String__fini+0x26>
 801bfa0:	4b12      	ldr	r3, [pc, #72]	@ (801bfec <rosidl_runtime_c__String__fini+0x80>)
 801bfa2:	4813      	ldr	r0, [pc, #76]	@ (801bff0 <rosidl_runtime_c__String__fini+0x84>)
 801bfa4:	681b      	ldr	r3, [r3, #0]
 801bfa6:	2251      	movs	r2, #81	@ 0x51
 801bfa8:	68db      	ldr	r3, [r3, #12]
 801bfaa:	2101      	movs	r1, #1
 801bfac:	f001 fa2a 	bl	801d404 <fwrite>
 801bfb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bfb4:	f000 fee6 	bl	801cd84 <exit>
 801bfb8:	4770      	bx	lr
 801bfba:	4b0c      	ldr	r3, [pc, #48]	@ (801bfec <rosidl_runtime_c__String__fini+0x80>)
 801bfbc:	480d      	ldr	r0, [pc, #52]	@ (801bff4 <rosidl_runtime_c__String__fini+0x88>)
 801bfbe:	681b      	ldr	r3, [r3, #0]
 801bfc0:	224c      	movs	r2, #76	@ 0x4c
 801bfc2:	68db      	ldr	r3, [r3, #12]
 801bfc4:	2101      	movs	r1, #1
 801bfc6:	f001 fa1d 	bl	801d404 <fwrite>
 801bfca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bfce:	f000 fed9 	bl	801cd84 <exit>
 801bfd2:	4b06      	ldr	r3, [pc, #24]	@ (801bfec <rosidl_runtime_c__String__fini+0x80>)
 801bfd4:	4808      	ldr	r0, [pc, #32]	@ (801bff8 <rosidl_runtime_c__String__fini+0x8c>)
 801bfd6:	681b      	ldr	r3, [r3, #0]
 801bfd8:	224e      	movs	r2, #78	@ 0x4e
 801bfda:	68db      	ldr	r3, [r3, #12]
 801bfdc:	2101      	movs	r1, #1
 801bfde:	f001 fa11 	bl	801d404 <fwrite>
 801bfe2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bfe6:	f000 fecd 	bl	801cd84 <exit>
 801bfea:	bf00      	nop
 801bfec:	20000dd0 	.word	0x20000dd0
 801bff0:	08020b8c 	.word	0x08020b8c
 801bff4:	08020aec 	.word	0x08020aec
 801bff8:	08020b3c 	.word	0x08020b3c

0801bffc <sensor_msgs__msg__Imu__init>:
 801bffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c000:	4605      	mov	r5, r0
 801c002:	b3c0      	cbz	r0, 801c076 <sensor_msgs__msg__Imu__init+0x7a>
 801c004:	f000 f864 	bl	801c0d0 <std_msgs__msg__Header__init>
 801c008:	4604      	mov	r4, r0
 801c00a:	b310      	cbz	r0, 801c052 <sensor_msgs__msg__Imu__init+0x56>
 801c00c:	f105 0618 	add.w	r6, r5, #24
 801c010:	4630      	mov	r0, r6
 801c012:	f000 f8d1 	bl	801c1b8 <geometry_msgs__msg__Quaternion__init>
 801c016:	4604      	mov	r4, r0
 801c018:	2800      	cmp	r0, #0
 801c01a:	d040      	beq.n	801c09e <sensor_msgs__msg__Imu__init+0xa2>
 801c01c:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 801c020:	4638      	mov	r0, r7
 801c022:	f7f8 fc3f 	bl	80148a4 <geometry_msgs__msg__Vector3__init>
 801c026:	4604      	mov	r4, r0
 801c028:	b348      	cbz	r0, 801c07e <sensor_msgs__msg__Imu__init+0x82>
 801c02a:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 801c02e:	4640      	mov	r0, r8
 801c030:	f7f8 fc38 	bl	80148a4 <geometry_msgs__msg__Vector3__init>
 801c034:	4604      	mov	r4, r0
 801c036:	b9d8      	cbnz	r0, 801c070 <sensor_msgs__msg__Imu__init+0x74>
 801c038:	4628      	mov	r0, r5
 801c03a:	f000 f86d 	bl	801c118 <std_msgs__msg__Header__fini>
 801c03e:	4630      	mov	r0, r6
 801c040:	f000 f8ce 	bl	801c1e0 <geometry_msgs__msg__Quaternion__fini>
 801c044:	4638      	mov	r0, r7
 801c046:	f7f8 fc31 	bl	80148ac <geometry_msgs__msg__Vector3__fini>
 801c04a:	4640      	mov	r0, r8
 801c04c:	f7f8 fc2e 	bl	80148ac <geometry_msgs__msg__Vector3__fini>
 801c050:	e00e      	b.n	801c070 <sensor_msgs__msg__Imu__init+0x74>
 801c052:	4628      	mov	r0, r5
 801c054:	f000 f860 	bl	801c118 <std_msgs__msg__Header__fini>
 801c058:	f105 0018 	add.w	r0, r5, #24
 801c05c:	f000 f8c0 	bl	801c1e0 <geometry_msgs__msg__Quaternion__fini>
 801c060:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 801c064:	f7f8 fc22 	bl	80148ac <geometry_msgs__msg__Vector3__fini>
 801c068:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801c06c:	f7f8 fc1e 	bl	80148ac <geometry_msgs__msg__Vector3__fini>
 801c070:	4620      	mov	r0, r4
 801c072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c076:	4604      	mov	r4, r0
 801c078:	4620      	mov	r0, r4
 801c07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c07e:	4628      	mov	r0, r5
 801c080:	f000 f84a 	bl	801c118 <std_msgs__msg__Header__fini>
 801c084:	4630      	mov	r0, r6
 801c086:	f000 f8ab 	bl	801c1e0 <geometry_msgs__msg__Quaternion__fini>
 801c08a:	4638      	mov	r0, r7
 801c08c:	f7f8 fc0e 	bl	80148ac <geometry_msgs__msg__Vector3__fini>
 801c090:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801c094:	f7f8 fc0a 	bl	80148ac <geometry_msgs__msg__Vector3__fini>
 801c098:	4620      	mov	r0, r4
 801c09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c09e:	4628      	mov	r0, r5
 801c0a0:	f000 f83a 	bl	801c118 <std_msgs__msg__Header__fini>
 801c0a4:	4630      	mov	r0, r6
 801c0a6:	e7d9      	b.n	801c05c <sensor_msgs__msg__Imu__init+0x60>

0801c0a8 <sensor_msgs__msg__Imu__fini>:
 801c0a8:	b188      	cbz	r0, 801c0ce <sensor_msgs__msg__Imu__fini+0x26>
 801c0aa:	b510      	push	{r4, lr}
 801c0ac:	4604      	mov	r4, r0
 801c0ae:	f000 f833 	bl	801c118 <std_msgs__msg__Header__fini>
 801c0b2:	f104 0018 	add.w	r0, r4, #24
 801c0b6:	f000 f893 	bl	801c1e0 <geometry_msgs__msg__Quaternion__fini>
 801c0ba:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801c0be:	f7f8 fbf5 	bl	80148ac <geometry_msgs__msg__Vector3__fini>
 801c0c2:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801c0c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0ca:	f7f8 bbef 	b.w	80148ac <geometry_msgs__msg__Vector3__fini>
 801c0ce:	4770      	bx	lr

0801c0d0 <std_msgs__msg__Header__init>:
 801c0d0:	b570      	push	{r4, r5, r6, lr}
 801c0d2:	4605      	mov	r5, r0
 801c0d4:	b1a8      	cbz	r0, 801c102 <std_msgs__msg__Header__init+0x32>
 801c0d6:	f000 f867 	bl	801c1a8 <builtin_interfaces__msg__Time__init>
 801c0da:	4604      	mov	r4, r0
 801c0dc:	b140      	cbz	r0, 801c0f0 <std_msgs__msg__Header__init+0x20>
 801c0de:	f105 0608 	add.w	r6, r5, #8
 801c0e2:	4630      	mov	r0, r6
 801c0e4:	f7ff ff2c 	bl	801bf40 <rosidl_runtime_c__String__init>
 801c0e8:	4604      	mov	r4, r0
 801c0ea:	b168      	cbz	r0, 801c108 <std_msgs__msg__Header__init+0x38>
 801c0ec:	4620      	mov	r0, r4
 801c0ee:	bd70      	pop	{r4, r5, r6, pc}
 801c0f0:	4628      	mov	r0, r5
 801c0f2:	f000 f85d 	bl	801c1b0 <builtin_interfaces__msg__Time__fini>
 801c0f6:	f105 0008 	add.w	r0, r5, #8
 801c0fa:	f7ff ff37 	bl	801bf6c <rosidl_runtime_c__String__fini>
 801c0fe:	4620      	mov	r0, r4
 801c100:	bd70      	pop	{r4, r5, r6, pc}
 801c102:	4604      	mov	r4, r0
 801c104:	4620      	mov	r0, r4
 801c106:	bd70      	pop	{r4, r5, r6, pc}
 801c108:	4628      	mov	r0, r5
 801c10a:	f000 f851 	bl	801c1b0 <builtin_interfaces__msg__Time__fini>
 801c10e:	4630      	mov	r0, r6
 801c110:	f7ff ff2c 	bl	801bf6c <rosidl_runtime_c__String__fini>
 801c114:	e7ea      	b.n	801c0ec <std_msgs__msg__Header__init+0x1c>
 801c116:	bf00      	nop

0801c118 <std_msgs__msg__Header__fini>:
 801c118:	b148      	cbz	r0, 801c12e <std_msgs__msg__Header__fini+0x16>
 801c11a:	b510      	push	{r4, lr}
 801c11c:	4604      	mov	r4, r0
 801c11e:	f000 f847 	bl	801c1b0 <builtin_interfaces__msg__Time__fini>
 801c122:	f104 0008 	add.w	r0, r4, #8
 801c126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c12a:	f7ff bf1f 	b.w	801bf6c <rosidl_runtime_c__String__fini>
 801c12e:	4770      	bx	lr

0801c130 <std_srvs__srv__SetBool_Request__init>:
 801c130:	3800      	subs	r0, #0
 801c132:	bf18      	it	ne
 801c134:	2001      	movne	r0, #1
 801c136:	4770      	bx	lr

0801c138 <std_srvs__srv__SetBool_Request__fini>:
 801c138:	4770      	bx	lr
 801c13a:	bf00      	nop

0801c13c <std_srvs__srv__SetBool_Response__init>:
 801c13c:	b538      	push	{r3, r4, r5, lr}
 801c13e:	b138      	cbz	r0, 801c150 <std_srvs__srv__SetBool_Response__init+0x14>
 801c140:	1d05      	adds	r5, r0, #4
 801c142:	4628      	mov	r0, r5
 801c144:	f7ff fefc 	bl	801bf40 <rosidl_runtime_c__String__init>
 801c148:	4604      	mov	r4, r0
 801c14a:	b120      	cbz	r0, 801c156 <std_srvs__srv__SetBool_Response__init+0x1a>
 801c14c:	4620      	mov	r0, r4
 801c14e:	bd38      	pop	{r3, r4, r5, pc}
 801c150:	4604      	mov	r4, r0
 801c152:	4620      	mov	r0, r4
 801c154:	bd38      	pop	{r3, r4, r5, pc}
 801c156:	4628      	mov	r0, r5
 801c158:	f7ff ff08 	bl	801bf6c <rosidl_runtime_c__String__fini>
 801c15c:	4620      	mov	r0, r4
 801c15e:	bd38      	pop	{r3, r4, r5, pc}

0801c160 <std_srvs__srv__SetBool_Response__fini>:
 801c160:	b110      	cbz	r0, 801c168 <std_srvs__srv__SetBool_Response__fini+0x8>
 801c162:	3004      	adds	r0, #4
 801c164:	f7ff bf02 	b.w	801bf6c <rosidl_runtime_c__String__fini>
 801c168:	4770      	bx	lr
 801c16a:	bf00      	nop

0801c16c <std_srvs__srv__Trigger_Request__init>:
 801c16c:	3800      	subs	r0, #0
 801c16e:	bf18      	it	ne
 801c170:	2001      	movne	r0, #1
 801c172:	4770      	bx	lr

0801c174 <std_srvs__srv__Trigger_Request__fini>:
 801c174:	4770      	bx	lr
 801c176:	bf00      	nop

0801c178 <std_srvs__srv__Trigger_Response__init>:
 801c178:	b538      	push	{r3, r4, r5, lr}
 801c17a:	b138      	cbz	r0, 801c18c <std_srvs__srv__Trigger_Response__init+0x14>
 801c17c:	1d05      	adds	r5, r0, #4
 801c17e:	4628      	mov	r0, r5
 801c180:	f7ff fede 	bl	801bf40 <rosidl_runtime_c__String__init>
 801c184:	4604      	mov	r4, r0
 801c186:	b120      	cbz	r0, 801c192 <std_srvs__srv__Trigger_Response__init+0x1a>
 801c188:	4620      	mov	r0, r4
 801c18a:	bd38      	pop	{r3, r4, r5, pc}
 801c18c:	4604      	mov	r4, r0
 801c18e:	4620      	mov	r0, r4
 801c190:	bd38      	pop	{r3, r4, r5, pc}
 801c192:	4628      	mov	r0, r5
 801c194:	f7ff feea 	bl	801bf6c <rosidl_runtime_c__String__fini>
 801c198:	4620      	mov	r0, r4
 801c19a:	bd38      	pop	{r3, r4, r5, pc}

0801c19c <std_srvs__srv__Trigger_Response__fini>:
 801c19c:	b110      	cbz	r0, 801c1a4 <std_srvs__srv__Trigger_Response__fini+0x8>
 801c19e:	3004      	adds	r0, #4
 801c1a0:	f7ff bee4 	b.w	801bf6c <rosidl_runtime_c__String__fini>
 801c1a4:	4770      	bx	lr
 801c1a6:	bf00      	nop

0801c1a8 <builtin_interfaces__msg__Time__init>:
 801c1a8:	3800      	subs	r0, #0
 801c1aa:	bf18      	it	ne
 801c1ac:	2001      	movne	r0, #1
 801c1ae:	4770      	bx	lr

0801c1b0 <builtin_interfaces__msg__Time__fini>:
 801c1b0:	4770      	bx	lr
 801c1b2:	bf00      	nop
 801c1b4:	0000      	movs	r0, r0
	...

0801c1b8 <geometry_msgs__msg__Quaternion__init>:
 801c1b8:	b160      	cbz	r0, 801c1d4 <geometry_msgs__msg__Quaternion__init+0x1c>
 801c1ba:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801c1d8 <geometry_msgs__msg__Quaternion__init+0x20>
 801c1be:	2200      	movs	r2, #0
 801c1c0:	2300      	movs	r3, #0
 801c1c2:	e9c0 2300 	strd	r2, r3, [r0]
 801c1c6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801c1ca:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801c1ce:	ed80 7b06 	vstr	d7, [r0, #24]
 801c1d2:	2001      	movs	r0, #1
 801c1d4:	4770      	bx	lr
 801c1d6:	bf00      	nop
 801c1d8:	00000000 	.word	0x00000000
 801c1dc:	3ff00000 	.word	0x3ff00000

0801c1e0 <geometry_msgs__msg__Quaternion__fini>:
 801c1e0:	4770      	bx	lr
 801c1e2:	bf00      	nop

0801c1e4 <ucdr_serialize_string>:
 801c1e4:	b510      	push	{r4, lr}
 801c1e6:	b082      	sub	sp, #8
 801c1e8:	4604      	mov	r4, r0
 801c1ea:	4608      	mov	r0, r1
 801c1ec:	9101      	str	r1, [sp, #4]
 801c1ee:	f7e4 f821 	bl	8000234 <strlen>
 801c1f2:	9901      	ldr	r1, [sp, #4]
 801c1f4:	1c42      	adds	r2, r0, #1
 801c1f6:	4620      	mov	r0, r4
 801c1f8:	b002      	add	sp, #8
 801c1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c1fe:	f7f8 be13 	b.w	8014e28 <ucdr_serialize_sequence_char>
 801c202:	bf00      	nop

0801c204 <ucdr_deserialize_string>:
 801c204:	b500      	push	{lr}
 801c206:	b083      	sub	sp, #12
 801c208:	ab01      	add	r3, sp, #4
 801c20a:	f7f8 fe1f 	bl	8014e4c <ucdr_deserialize_sequence_char>
 801c20e:	b003      	add	sp, #12
 801c210:	f85d fb04 	ldr.w	pc, [sp], #4

0801c214 <uxr_init_input_best_effort_stream>:
 801c214:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c218:	8003      	strh	r3, [r0, #0]
 801c21a:	4770      	bx	lr

0801c21c <uxr_reset_input_best_effort_stream>:
 801c21c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c220:	8003      	strh	r3, [r0, #0]
 801c222:	4770      	bx	lr

0801c224 <uxr_receive_best_effort_message>:
 801c224:	b538      	push	{r3, r4, r5, lr}
 801c226:	4604      	mov	r4, r0
 801c228:	8800      	ldrh	r0, [r0, #0]
 801c22a:	460d      	mov	r5, r1
 801c22c:	f000 fd42 	bl	801ccb4 <uxr_seq_num_cmp>
 801c230:	4603      	mov	r3, r0
 801c232:	2b00      	cmp	r3, #0
 801c234:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801c238:	bfb8      	it	lt
 801c23a:	8025      	strhlt	r5, [r4, #0]
 801c23c:	bd38      	pop	{r3, r4, r5, pc}
 801c23e:	bf00      	nop

0801c240 <on_full_input_buffer>:
 801c240:	b570      	push	{r4, r5, r6, lr}
 801c242:	4605      	mov	r5, r0
 801c244:	460c      	mov	r4, r1
 801c246:	682b      	ldr	r3, [r5, #0]
 801c248:	6809      	ldr	r1, [r1, #0]
 801c24a:	8920      	ldrh	r0, [r4, #8]
 801c24c:	6862      	ldr	r2, [r4, #4]
 801c24e:	fbb2 f2f0 	udiv	r2, r2, r0
 801c252:	eba3 0c01 	sub.w	ip, r3, r1
 801c256:	fbbc fcf2 	udiv	ip, ip, r2
 801c25a:	f10c 0c01 	add.w	ip, ip, #1
 801c25e:	fa1f f38c 	uxth.w	r3, ip
 801c262:	fbb3 f6f0 	udiv	r6, r3, r0
 801c266:	fb00 3316 	mls	r3, r0, r6, r3
 801c26a:	b29b      	uxth	r3, r3
 801c26c:	fb02 f303 	mul.w	r3, r2, r3
 801c270:	1d18      	adds	r0, r3, #4
 801c272:	4408      	add	r0, r1
 801c274:	7d26      	ldrb	r6, [r4, #20]
 801c276:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801c27a:	b116      	cbz	r6, 801c282 <on_full_input_buffer+0x42>
 801c27c:	2600      	movs	r6, #0
 801c27e:	f840 6c04 	str.w	r6, [r0, #-4]
 801c282:	2a03      	cmp	r2, #3
 801c284:	d801      	bhi.n	801c28a <on_full_input_buffer+0x4a>
 801c286:	2001      	movs	r0, #1
 801c288:	bd70      	pop	{r4, r5, r6, pc}
 801c28a:	3308      	adds	r3, #8
 801c28c:	4419      	add	r1, r3
 801c28e:	4628      	mov	r0, r5
 801c290:	692b      	ldr	r3, [r5, #16]
 801c292:	3a04      	subs	r2, #4
 801c294:	f7f3 faa8 	bl	800f7e8 <ucdr_init_buffer_origin>
 801c298:	4628      	mov	r0, r5
 801c29a:	4903      	ldr	r1, [pc, #12]	@ (801c2a8 <on_full_input_buffer+0x68>)
 801c29c:	4622      	mov	r2, r4
 801c29e:	f7f3 fa7f 	bl	800f7a0 <ucdr_set_on_full_buffer_callback>
 801c2a2:	2000      	movs	r0, #0
 801c2a4:	bd70      	pop	{r4, r5, r6, pc}
 801c2a6:	bf00      	nop
 801c2a8:	0801c241 	.word	0x0801c241

0801c2ac <uxr_init_input_reliable_stream>:
 801c2ac:	b500      	push	{lr}
 801c2ae:	e9c0 1200 	strd	r1, r2, [r0]
 801c2b2:	f04f 0e00 	mov.w	lr, #0
 801c2b6:	9a01      	ldr	r2, [sp, #4]
 801c2b8:	8103      	strh	r3, [r0, #8]
 801c2ba:	6102      	str	r2, [r0, #16]
 801c2bc:	f880 e014 	strb.w	lr, [r0, #20]
 801c2c0:	b1d3      	cbz	r3, 801c2f8 <uxr_init_input_reliable_stream+0x4c>
 801c2c2:	f8c1 e000 	str.w	lr, [r1]
 801c2c6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c2ca:	f1bc 0f01 	cmp.w	ip, #1
 801c2ce:	d913      	bls.n	801c2f8 <uxr_init_input_reliable_stream+0x4c>
 801c2d0:	2301      	movs	r3, #1
 801c2d2:	fbb3 f1fc 	udiv	r1, r3, ip
 801c2d6:	fb0c 3111 	mls	r1, ip, r1, r3
 801c2da:	b289      	uxth	r1, r1
 801c2dc:	6842      	ldr	r2, [r0, #4]
 801c2de:	fbb2 f2fc 	udiv	r2, r2, ip
 801c2e2:	fb01 f202 	mul.w	r2, r1, r2
 801c2e6:	6801      	ldr	r1, [r0, #0]
 801c2e8:	f841 e002 	str.w	lr, [r1, r2]
 801c2ec:	3301      	adds	r3, #1
 801c2ee:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c2f2:	b29b      	uxth	r3, r3
 801c2f4:	459c      	cmp	ip, r3
 801c2f6:	d8ec      	bhi.n	801c2d2 <uxr_init_input_reliable_stream+0x26>
 801c2f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c2fc:	60c3      	str	r3, [r0, #12]
 801c2fe:	f85d fb04 	ldr.w	pc, [sp], #4
 801c302:	bf00      	nop

0801c304 <uxr_reset_input_reliable_stream>:
 801c304:	8901      	ldrh	r1, [r0, #8]
 801c306:	b1e9      	cbz	r1, 801c344 <uxr_reset_input_reliable_stream+0x40>
 801c308:	f04f 0c00 	mov.w	ip, #0
 801c30c:	b500      	push	{lr}
 801c30e:	4663      	mov	r3, ip
 801c310:	46e6      	mov	lr, ip
 801c312:	fbb3 f2f1 	udiv	r2, r3, r1
 801c316:	fb01 3312 	mls	r3, r1, r2, r3
 801c31a:	b29b      	uxth	r3, r3
 801c31c:	6842      	ldr	r2, [r0, #4]
 801c31e:	fbb2 f2f1 	udiv	r2, r2, r1
 801c322:	fb02 f303 	mul.w	r3, r2, r3
 801c326:	6802      	ldr	r2, [r0, #0]
 801c328:	f842 e003 	str.w	lr, [r2, r3]
 801c32c:	f10c 0c01 	add.w	ip, ip, #1
 801c330:	8901      	ldrh	r1, [r0, #8]
 801c332:	fa1f f38c 	uxth.w	r3, ip
 801c336:	4299      	cmp	r1, r3
 801c338:	d8eb      	bhi.n	801c312 <uxr_reset_input_reliable_stream+0xe>
 801c33a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c33e:	60c3      	str	r3, [r0, #12]
 801c340:	f85d fb04 	ldr.w	pc, [sp], #4
 801c344:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c348:	60c3      	str	r3, [r0, #12]
 801c34a:	4770      	bx	lr

0801c34c <uxr_receive_reliable_message>:
 801c34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c350:	4604      	mov	r4, r0
 801c352:	460d      	mov	r5, r1
 801c354:	8901      	ldrh	r1, [r0, #8]
 801c356:	8980      	ldrh	r0, [r0, #12]
 801c358:	4690      	mov	r8, r2
 801c35a:	461f      	mov	r7, r3
 801c35c:	f000 fca2 	bl	801cca4 <uxr_seq_num_add>
 801c360:	4629      	mov	r1, r5
 801c362:	4606      	mov	r6, r0
 801c364:	89a0      	ldrh	r0, [r4, #12]
 801c366:	f000 fca5 	bl	801ccb4 <uxr_seq_num_cmp>
 801c36a:	2800      	cmp	r0, #0
 801c36c:	db0a      	blt.n	801c384 <uxr_receive_reliable_message+0x38>
 801c36e:	2600      	movs	r6, #0
 801c370:	89e0      	ldrh	r0, [r4, #14]
 801c372:	4629      	mov	r1, r5
 801c374:	f000 fc9e 	bl	801ccb4 <uxr_seq_num_cmp>
 801c378:	2800      	cmp	r0, #0
 801c37a:	da00      	bge.n	801c37e <uxr_receive_reliable_message+0x32>
 801c37c:	81e5      	strh	r5, [r4, #14]
 801c37e:	4630      	mov	r0, r6
 801c380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c384:	4630      	mov	r0, r6
 801c386:	4629      	mov	r1, r5
 801c388:	f000 fc94 	bl	801ccb4 <uxr_seq_num_cmp>
 801c38c:	2800      	cmp	r0, #0
 801c38e:	dbee      	blt.n	801c36e <uxr_receive_reliable_message+0x22>
 801c390:	6923      	ldr	r3, [r4, #16]
 801c392:	4640      	mov	r0, r8
 801c394:	4798      	blx	r3
 801c396:	2101      	movs	r1, #1
 801c398:	4681      	mov	r9, r0
 801c39a:	89a0      	ldrh	r0, [r4, #12]
 801c39c:	f000 fc82 	bl	801cca4 <uxr_seq_num_add>
 801c3a0:	f1b9 0f00 	cmp.w	r9, #0
 801c3a4:	d101      	bne.n	801c3aa <uxr_receive_reliable_message+0x5e>
 801c3a6:	4285      	cmp	r5, r0
 801c3a8:	d047      	beq.n	801c43a <uxr_receive_reliable_message+0xee>
 801c3aa:	8922      	ldrh	r2, [r4, #8]
 801c3ac:	fbb5 f0f2 	udiv	r0, r5, r2
 801c3b0:	fb02 5010 	mls	r0, r2, r0, r5
 801c3b4:	b280      	uxth	r0, r0
 801c3b6:	6863      	ldr	r3, [r4, #4]
 801c3b8:	fbb3 f3f2 	udiv	r3, r3, r2
 801c3bc:	fb00 f303 	mul.w	r3, r0, r3
 801c3c0:	6820      	ldr	r0, [r4, #0]
 801c3c2:	3304      	adds	r3, #4
 801c3c4:	4418      	add	r0, r3
 801c3c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d1cf      	bne.n	801c36e <uxr_receive_reliable_message+0x22>
 801c3ce:	4641      	mov	r1, r8
 801c3d0:	463a      	mov	r2, r7
 801c3d2:	f001 fa6e 	bl	801d8b2 <memcpy>
 801c3d6:	8921      	ldrh	r1, [r4, #8]
 801c3d8:	fbb5 f2f1 	udiv	r2, r5, r1
 801c3dc:	fb01 5212 	mls	r2, r1, r2, r5
 801c3e0:	b292      	uxth	r2, r2
 801c3e2:	6863      	ldr	r3, [r4, #4]
 801c3e4:	fbb3 f3f1 	udiv	r3, r3, r1
 801c3e8:	fb02 f303 	mul.w	r3, r2, r3
 801c3ec:	6822      	ldr	r2, [r4, #0]
 801c3ee:	50d7      	str	r7, [r2, r3]
 801c3f0:	9a08      	ldr	r2, [sp, #32]
 801c3f2:	2301      	movs	r3, #1
 801c3f4:	7013      	strb	r3, [r2, #0]
 801c3f6:	f1b9 0f00 	cmp.w	r9, #0
 801c3fa:	d0b8      	beq.n	801c36e <uxr_receive_reliable_message+0x22>
 801c3fc:	89a6      	ldrh	r6, [r4, #12]
 801c3fe:	4630      	mov	r0, r6
 801c400:	2101      	movs	r1, #1
 801c402:	f000 fc4f 	bl	801cca4 <uxr_seq_num_add>
 801c406:	8922      	ldrh	r2, [r4, #8]
 801c408:	6863      	ldr	r3, [r4, #4]
 801c40a:	fbb3 f3f2 	udiv	r3, r3, r2
 801c40e:	4606      	mov	r6, r0
 801c410:	fbb0 f0f2 	udiv	r0, r0, r2
 801c414:	fb02 6010 	mls	r0, r2, r0, r6
 801c418:	b280      	uxth	r0, r0
 801c41a:	fb00 f303 	mul.w	r3, r0, r3
 801c41e:	6820      	ldr	r0, [r4, #0]
 801c420:	3304      	adds	r3, #4
 801c422:	4418      	add	r0, r3
 801c424:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d0a0      	beq.n	801c36e <uxr_receive_reliable_message+0x22>
 801c42c:	6923      	ldr	r3, [r4, #16]
 801c42e:	4798      	blx	r3
 801c430:	2802      	cmp	r0, #2
 801c432:	d008      	beq.n	801c446 <uxr_receive_reliable_message+0xfa>
 801c434:	2801      	cmp	r0, #1
 801c436:	d0e2      	beq.n	801c3fe <uxr_receive_reliable_message+0xb2>
 801c438:	e799      	b.n	801c36e <uxr_receive_reliable_message+0x22>
 801c43a:	9b08      	ldr	r3, [sp, #32]
 801c43c:	81a5      	strh	r5, [r4, #12]
 801c43e:	2601      	movs	r6, #1
 801c440:	f883 9000 	strb.w	r9, [r3]
 801c444:	e794      	b.n	801c370 <uxr_receive_reliable_message+0x24>
 801c446:	2601      	movs	r6, #1
 801c448:	e792      	b.n	801c370 <uxr_receive_reliable_message+0x24>
 801c44a:	bf00      	nop

0801c44c <uxr_next_input_reliable_buffer_available>:
 801c44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c450:	4604      	mov	r4, r0
 801c452:	460f      	mov	r7, r1
 801c454:	8980      	ldrh	r0, [r0, #12]
 801c456:	2101      	movs	r1, #1
 801c458:	4690      	mov	r8, r2
 801c45a:	f000 fc23 	bl	801cca4 <uxr_seq_num_add>
 801c45e:	8922      	ldrh	r2, [r4, #8]
 801c460:	fbb0 f6f2 	udiv	r6, r0, r2
 801c464:	fb02 0616 	mls	r6, r2, r6, r0
 801c468:	b2b6      	uxth	r6, r6
 801c46a:	6863      	ldr	r3, [r4, #4]
 801c46c:	fbb3 f3f2 	udiv	r3, r3, r2
 801c470:	fb06 f303 	mul.w	r3, r6, r3
 801c474:	6826      	ldr	r6, [r4, #0]
 801c476:	3304      	adds	r3, #4
 801c478:	441e      	add	r6, r3
 801c47a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801c47e:	f1b9 0f00 	cmp.w	r9, #0
 801c482:	d023      	beq.n	801c4cc <uxr_next_input_reliable_buffer_available+0x80>
 801c484:	6923      	ldr	r3, [r4, #16]
 801c486:	4605      	mov	r5, r0
 801c488:	4630      	mov	r0, r6
 801c48a:	4798      	blx	r3
 801c48c:	4682      	mov	sl, r0
 801c48e:	b300      	cbz	r0, 801c4d2 <uxr_next_input_reliable_buffer_available+0x86>
 801c490:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801c494:	2101      	movs	r1, #1
 801c496:	4650      	mov	r0, sl
 801c498:	f000 fc04 	bl	801cca4 <uxr_seq_num_add>
 801c49c:	8921      	ldrh	r1, [r4, #8]
 801c49e:	fbb0 f2f1 	udiv	r2, r0, r1
 801c4a2:	4682      	mov	sl, r0
 801c4a4:	fb01 0212 	mls	r2, r1, r2, r0
 801c4a8:	e9d4 0300 	ldrd	r0, r3, [r4]
 801c4ac:	b292      	uxth	r2, r2
 801c4ae:	fbb3 f3f1 	udiv	r3, r3, r1
 801c4b2:	fb02 f303 	mul.w	r3, r2, r3
 801c4b6:	3304      	adds	r3, #4
 801c4b8:	4418      	add	r0, r3
 801c4ba:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c4be:	b12b      	cbz	r3, 801c4cc <uxr_next_input_reliable_buffer_available+0x80>
 801c4c0:	6923      	ldr	r3, [r4, #16]
 801c4c2:	4798      	blx	r3
 801c4c4:	2802      	cmp	r0, #2
 801c4c6:	d01b      	beq.n	801c500 <uxr_next_input_reliable_buffer_available+0xb4>
 801c4c8:	2801      	cmp	r0, #1
 801c4ca:	d0e3      	beq.n	801c494 <uxr_next_input_reliable_buffer_available+0x48>
 801c4cc:	2000      	movs	r0, #0
 801c4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4d2:	464a      	mov	r2, r9
 801c4d4:	4631      	mov	r1, r6
 801c4d6:	4638      	mov	r0, r7
 801c4d8:	f7f3 f98e 	bl	800f7f8 <ucdr_init_buffer>
 801c4dc:	8921      	ldrh	r1, [r4, #8]
 801c4de:	fbb5 f2f1 	udiv	r2, r5, r1
 801c4e2:	fb01 5212 	mls	r2, r1, r2, r5
 801c4e6:	b292      	uxth	r2, r2
 801c4e8:	6863      	ldr	r3, [r4, #4]
 801c4ea:	fbb3 f3f1 	udiv	r3, r3, r1
 801c4ee:	fb02 f303 	mul.w	r3, r2, r3
 801c4f2:	6822      	ldr	r2, [r4, #0]
 801c4f4:	f842 a003 	str.w	sl, [r2, r3]
 801c4f8:	2001      	movs	r0, #1
 801c4fa:	81a5      	strh	r5, [r4, #12]
 801c4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c500:	8920      	ldrh	r0, [r4, #8]
 801c502:	fbb5 f3f0 	udiv	r3, r5, r0
 801c506:	fb00 5513 	mls	r5, r0, r3, r5
 801c50a:	b2ad      	uxth	r5, r5
 801c50c:	6863      	ldr	r3, [r4, #4]
 801c50e:	fbb3 f3f0 	udiv	r3, r3, r0
 801c512:	fb03 f505 	mul.w	r5, r3, r5
 801c516:	6823      	ldr	r3, [r4, #0]
 801c518:	2000      	movs	r0, #0
 801c51a:	5158      	str	r0, [r3, r5]
 801c51c:	eb06 0108 	add.w	r1, r6, r8
 801c520:	eba9 0208 	sub.w	r2, r9, r8
 801c524:	4638      	mov	r0, r7
 801c526:	f7f3 f967 	bl	800f7f8 <ucdr_init_buffer>
 801c52a:	4638      	mov	r0, r7
 801c52c:	4903      	ldr	r1, [pc, #12]	@ (801c53c <uxr_next_input_reliable_buffer_available+0xf0>)
 801c52e:	4622      	mov	r2, r4
 801c530:	f7f3 f936 	bl	800f7a0 <ucdr_set_on_full_buffer_callback>
 801c534:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801c538:	2001      	movs	r0, #1
 801c53a:	e7c8      	b.n	801c4ce <uxr_next_input_reliable_buffer_available+0x82>
 801c53c:	0801c241 	.word	0x0801c241

0801c540 <uxr_process_heartbeat>:
 801c540:	b538      	push	{r3, r4, r5, lr}
 801c542:	4611      	mov	r1, r2
 801c544:	4604      	mov	r4, r0
 801c546:	89c0      	ldrh	r0, [r0, #14]
 801c548:	4615      	mov	r5, r2
 801c54a:	f000 fbb3 	bl	801ccb4 <uxr_seq_num_cmp>
 801c54e:	2800      	cmp	r0, #0
 801c550:	bfb8      	it	lt
 801c552:	81e5      	strhlt	r5, [r4, #14]
 801c554:	bd38      	pop	{r3, r4, r5, pc}
 801c556:	bf00      	nop

0801c558 <uxr_compute_acknack>:
 801c558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c55c:	8903      	ldrh	r3, [r0, #8]
 801c55e:	8985      	ldrh	r5, [r0, #12]
 801c560:	4604      	mov	r4, r0
 801c562:	460e      	mov	r6, r1
 801c564:	b1d3      	cbz	r3, 801c59c <uxr_compute_acknack+0x44>
 801c566:	4628      	mov	r0, r5
 801c568:	2701      	movs	r7, #1
 801c56a:	e003      	b.n	801c574 <uxr_compute_acknack+0x1c>
 801c56c:	4567      	cmp	r7, ip
 801c56e:	d215      	bcs.n	801c59c <uxr_compute_acknack+0x44>
 801c570:	89a0      	ldrh	r0, [r4, #12]
 801c572:	3701      	adds	r7, #1
 801c574:	b2b9      	uxth	r1, r7
 801c576:	f000 fb95 	bl	801cca4 <uxr_seq_num_add>
 801c57a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c57e:	fbb0 f3fc 	udiv	r3, r0, ip
 801c582:	fb0c 0313 	mls	r3, ip, r3, r0
 801c586:	b29a      	uxth	r2, r3
 801c588:	e9d4 1300 	ldrd	r1, r3, [r4]
 801c58c:	fbb3 f3fc 	udiv	r3, r3, ip
 801c590:	fb02 f303 	mul.w	r3, r2, r3
 801c594:	58cb      	ldr	r3, [r1, r3]
 801c596:	2b00      	cmp	r3, #0
 801c598:	d1e8      	bne.n	801c56c <uxr_compute_acknack+0x14>
 801c59a:	4605      	mov	r5, r0
 801c59c:	8035      	strh	r5, [r6, #0]
 801c59e:	2101      	movs	r1, #1
 801c5a0:	4628      	mov	r0, r5
 801c5a2:	89e7      	ldrh	r7, [r4, #14]
 801c5a4:	f000 fb82 	bl	801ccac <uxr_seq_num_sub>
 801c5a8:	4601      	mov	r1, r0
 801c5aa:	4638      	mov	r0, r7
 801c5ac:	f000 fb7e 	bl	801ccac <uxr_seq_num_sub>
 801c5b0:	4605      	mov	r5, r0
 801c5b2:	b318      	cbz	r0, 801c5fc <uxr_compute_acknack+0xa4>
 801c5b4:	f04f 0900 	mov.w	r9, #0
 801c5b8:	464f      	mov	r7, r9
 801c5ba:	f04f 0801 	mov.w	r8, #1
 801c5be:	fa1f f189 	uxth.w	r1, r9
 801c5c2:	8830      	ldrh	r0, [r6, #0]
 801c5c4:	f000 fb6e 	bl	801cca4 <uxr_seq_num_add>
 801c5c8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c5cc:	fbb0 f3fc 	udiv	r3, r0, ip
 801c5d0:	e9d4 1200 	ldrd	r1, r2, [r4]
 801c5d4:	fb03 001c 	mls	r0, r3, ip, r0
 801c5d8:	b283      	uxth	r3, r0
 801c5da:	fbb2 f2fc 	udiv	r2, r2, ip
 801c5de:	fb02 f303 	mul.w	r3, r2, r3
 801c5e2:	fa08 f209 	lsl.w	r2, r8, r9
 801c5e6:	58cb      	ldr	r3, [r1, r3]
 801c5e8:	f109 0901 	add.w	r9, r9, #1
 801c5ec:	b90b      	cbnz	r3, 801c5f2 <uxr_compute_acknack+0x9a>
 801c5ee:	4317      	orrs	r7, r2
 801c5f0:	b2bf      	uxth	r7, r7
 801c5f2:	454d      	cmp	r5, r9
 801c5f4:	d1e3      	bne.n	801c5be <uxr_compute_acknack+0x66>
 801c5f6:	4638      	mov	r0, r7
 801c5f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c5fc:	4607      	mov	r7, r0
 801c5fe:	4638      	mov	r0, r7
 801c600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801c604 <uxr_init_output_best_effort_stream>:
 801c604:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801c608:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801c60c:	6001      	str	r1, [r0, #0]
 801c60e:	7303      	strb	r3, [r0, #12]
 801c610:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801c614:	4770      	bx	lr
 801c616:	bf00      	nop

0801c618 <uxr_reset_output_best_effort_stream>:
 801c618:	7b02      	ldrb	r2, [r0, #12]
 801c61a:	6042      	str	r2, [r0, #4]
 801c61c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c620:	81c3      	strh	r3, [r0, #14]
 801c622:	4770      	bx	lr

0801c624 <uxr_prepare_best_effort_buffer_to_write>:
 801c624:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c626:	4604      	mov	r4, r0
 801c628:	b083      	sub	sp, #12
 801c62a:	6840      	ldr	r0, [r0, #4]
 801c62c:	460d      	mov	r5, r1
 801c62e:	4616      	mov	r6, r2
 801c630:	f7fa ff48 	bl	80174c4 <uxr_submessage_padding>
 801c634:	6863      	ldr	r3, [r4, #4]
 801c636:	4418      	add	r0, r3
 801c638:	68a3      	ldr	r3, [r4, #8]
 801c63a:	1942      	adds	r2, r0, r5
 801c63c:	4293      	cmp	r3, r2
 801c63e:	bf2c      	ite	cs
 801c640:	2701      	movcs	r7, #1
 801c642:	2700      	movcc	r7, #0
 801c644:	d202      	bcs.n	801c64c <uxr_prepare_best_effort_buffer_to_write+0x28>
 801c646:	4638      	mov	r0, r7
 801c648:	b003      	add	sp, #12
 801c64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c64c:	9000      	str	r0, [sp, #0]
 801c64e:	6821      	ldr	r1, [r4, #0]
 801c650:	4630      	mov	r0, r6
 801c652:	2300      	movs	r3, #0
 801c654:	f7f3 f8be 	bl	800f7d4 <ucdr_init_buffer_origin_offset>
 801c658:	6861      	ldr	r1, [r4, #4]
 801c65a:	4638      	mov	r0, r7
 801c65c:	4429      	add	r1, r5
 801c65e:	6061      	str	r1, [r4, #4]
 801c660:	b003      	add	sp, #12
 801c662:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c664 <uxr_prepare_best_effort_buffer_to_send>:
 801c664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c668:	4604      	mov	r4, r0
 801c66a:	461d      	mov	r5, r3
 801c66c:	6840      	ldr	r0, [r0, #4]
 801c66e:	7b23      	ldrb	r3, [r4, #12]
 801c670:	4298      	cmp	r0, r3
 801c672:	bf8c      	ite	hi
 801c674:	2601      	movhi	r6, #1
 801c676:	2600      	movls	r6, #0
 801c678:	d802      	bhi.n	801c680 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801c67a:	4630      	mov	r0, r6
 801c67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c680:	4688      	mov	r8, r1
 801c682:	89e0      	ldrh	r0, [r4, #14]
 801c684:	2101      	movs	r1, #1
 801c686:	4617      	mov	r7, r2
 801c688:	f000 fb0c 	bl	801cca4 <uxr_seq_num_add>
 801c68c:	6823      	ldr	r3, [r4, #0]
 801c68e:	81e0      	strh	r0, [r4, #14]
 801c690:	8028      	strh	r0, [r5, #0]
 801c692:	f8c8 3000 	str.w	r3, [r8]
 801c696:	6863      	ldr	r3, [r4, #4]
 801c698:	603b      	str	r3, [r7, #0]
 801c69a:	7b23      	ldrb	r3, [r4, #12]
 801c69c:	6063      	str	r3, [r4, #4]
 801c69e:	4630      	mov	r0, r6
 801c6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c6a4 <on_full_output_buffer>:
 801c6a4:	b538      	push	{r3, r4, r5, lr}
 801c6a6:	6802      	ldr	r2, [r0, #0]
 801c6a8:	460c      	mov	r4, r1
 801c6aa:	6809      	ldr	r1, [r1, #0]
 801c6ac:	8923      	ldrh	r3, [r4, #8]
 801c6ae:	eba2 0c01 	sub.w	ip, r2, r1
 801c6b2:	6862      	ldr	r2, [r4, #4]
 801c6b4:	fbb2 f2f3 	udiv	r2, r2, r3
 801c6b8:	fbbc fcf2 	udiv	ip, ip, r2
 801c6bc:	f10c 0c01 	add.w	ip, ip, #1
 801c6c0:	fa1f fc8c 	uxth.w	ip, ip
 801c6c4:	fbbc fef3 	udiv	lr, ip, r3
 801c6c8:	fb03 c31e 	mls	r3, r3, lr, ip
 801c6cc:	b29b      	uxth	r3, r3
 801c6ce:	fb02 f303 	mul.w	r3, r2, r3
 801c6d2:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801c6d6:	58ca      	ldr	r2, [r1, r3]
 801c6d8:	4463      	add	r3, ip
 801c6da:	eba2 020c 	sub.w	r2, r2, ip
 801c6de:	3308      	adds	r3, #8
 801c6e0:	4605      	mov	r5, r0
 801c6e2:	4419      	add	r1, r3
 801c6e4:	3a04      	subs	r2, #4
 801c6e6:	6903      	ldr	r3, [r0, #16]
 801c6e8:	f7f3 f87e 	bl	800f7e8 <ucdr_init_buffer_origin>
 801c6ec:	4628      	mov	r0, r5
 801c6ee:	4903      	ldr	r1, [pc, #12]	@ (801c6fc <on_full_output_buffer+0x58>)
 801c6f0:	4622      	mov	r2, r4
 801c6f2:	f7f3 f855 	bl	800f7a0 <ucdr_set_on_full_buffer_callback>
 801c6f6:	2000      	movs	r0, #0
 801c6f8:	bd38      	pop	{r3, r4, r5, pc}
 801c6fa:	bf00      	nop
 801c6fc:	0801c6a5 	.word	0x0801c6a5

0801c700 <uxr_init_output_reliable_stream>:
 801c700:	b410      	push	{r4}
 801c702:	f89d c004 	ldrb.w	ip, [sp, #4]
 801c706:	8103      	strh	r3, [r0, #8]
 801c708:	e9c0 1200 	strd	r1, r2, [r0]
 801c70c:	f880 c00c 	strb.w	ip, [r0, #12]
 801c710:	b1d3      	cbz	r3, 801c748 <uxr_init_output_reliable_stream+0x48>
 801c712:	f8c1 c000 	str.w	ip, [r1]
 801c716:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c71a:	f1bc 0f01 	cmp.w	ip, #1
 801c71e:	d913      	bls.n	801c748 <uxr_init_output_reliable_stream+0x48>
 801c720:	2301      	movs	r3, #1
 801c722:	fbb3 f1fc 	udiv	r1, r3, ip
 801c726:	fb0c 3111 	mls	r1, ip, r1, r3
 801c72a:	b289      	uxth	r1, r1
 801c72c:	6842      	ldr	r2, [r0, #4]
 801c72e:	6804      	ldr	r4, [r0, #0]
 801c730:	fbb2 f2fc 	udiv	r2, r2, ip
 801c734:	fb01 f202 	mul.w	r2, r1, r2
 801c738:	7b01      	ldrb	r1, [r0, #12]
 801c73a:	50a1      	str	r1, [r4, r2]
 801c73c:	3301      	adds	r3, #1
 801c73e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c742:	b29b      	uxth	r3, r3
 801c744:	459c      	cmp	ip, r3
 801c746:	d8ec      	bhi.n	801c722 <uxr_init_output_reliable_stream+0x22>
 801c748:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c74c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c750:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801c754:	4905      	ldr	r1, [pc, #20]	@ (801c76c <uxr_init_output_reliable_stream+0x6c>)
 801c756:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c75a:	f8c0 100e 	str.w	r1, [r0, #14]
 801c75e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c762:	2300      	movs	r3, #0
 801c764:	8242      	strh	r2, [r0, #18]
 801c766:	8403      	strh	r3, [r0, #32]
 801c768:	4770      	bx	lr
 801c76a:	bf00      	nop
 801c76c:	ffff0000 	.word	0xffff0000

0801c770 <uxr_reset_output_reliable_stream>:
 801c770:	8901      	ldrh	r1, [r0, #8]
 801c772:	b1b1      	cbz	r1, 801c7a2 <uxr_reset_output_reliable_stream+0x32>
 801c774:	f04f 0c00 	mov.w	ip, #0
 801c778:	4663      	mov	r3, ip
 801c77a:	fbb3 f2f1 	udiv	r2, r3, r1
 801c77e:	fb01 3312 	mls	r3, r1, r2, r3
 801c782:	b29b      	uxth	r3, r3
 801c784:	6842      	ldr	r2, [r0, #4]
 801c786:	fbb2 f2f1 	udiv	r2, r2, r1
 801c78a:	6801      	ldr	r1, [r0, #0]
 801c78c:	fb02 f303 	mul.w	r3, r2, r3
 801c790:	7b02      	ldrb	r2, [r0, #12]
 801c792:	50ca      	str	r2, [r1, r3]
 801c794:	f10c 0c01 	add.w	ip, ip, #1
 801c798:	8901      	ldrh	r1, [r0, #8]
 801c79a:	fa1f f38c 	uxth.w	r3, ip
 801c79e:	4299      	cmp	r1, r3
 801c7a0:	d8eb      	bhi.n	801c77a <uxr_reset_output_reliable_stream+0xa>
 801c7a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c7a6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c7aa:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801c7ae:	4904      	ldr	r1, [pc, #16]	@ (801c7c0 <uxr_reset_output_reliable_stream+0x50>)
 801c7b0:	f8c0 100e 	str.w	r1, [r0, #14]
 801c7b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c7b8:	2300      	movs	r3, #0
 801c7ba:	8242      	strh	r2, [r0, #18]
 801c7bc:	8403      	strh	r3, [r0, #32]
 801c7be:	4770      	bx	lr
 801c7c0:	ffff0000 	.word	0xffff0000

0801c7c4 <uxr_prepare_reliable_buffer_to_write>:
 801c7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7c8:	4604      	mov	r4, r0
 801c7ca:	b091      	sub	sp, #68	@ 0x44
 801c7cc:	8900      	ldrh	r0, [r0, #8]
 801c7ce:	89e6      	ldrh	r6, [r4, #14]
 801c7d0:	6823      	ldr	r3, [r4, #0]
 801c7d2:	9204      	str	r2, [sp, #16]
 801c7d4:	fbb6 f2f0 	udiv	r2, r6, r0
 801c7d8:	fb00 6212 	mls	r2, r0, r2, r6
 801c7dc:	b292      	uxth	r2, r2
 801c7de:	6865      	ldr	r5, [r4, #4]
 801c7e0:	fbb5 f5f0 	udiv	r5, r5, r0
 801c7e4:	fb05 3202 	mla	r2, r5, r2, r3
 801c7e8:	3204      	adds	r2, #4
 801c7ea:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801c7ee:	f894 900c 	ldrb.w	r9, [r4, #12]
 801c7f2:	9203      	str	r2, [sp, #12]
 801c7f4:	468b      	mov	fp, r1
 801c7f6:	1f2f      	subs	r7, r5, #4
 801c7f8:	2800      	cmp	r0, #0
 801c7fa:	f000 814c 	beq.w	801ca96 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801c7fe:	f04f 0c00 	mov.w	ip, #0
 801c802:	46e2      	mov	sl, ip
 801c804:	4661      	mov	r1, ip
 801c806:	fbb1 f2f0 	udiv	r2, r1, r0
 801c80a:	fb00 1212 	mls	r2, r0, r2, r1
 801c80e:	b292      	uxth	r2, r2
 801c810:	fb05 f202 	mul.w	r2, r5, r2
 801c814:	f10c 0c01 	add.w	ip, ip, #1
 801c818:	589a      	ldr	r2, [r3, r2]
 801c81a:	454a      	cmp	r2, r9
 801c81c:	bf08      	it	eq
 801c81e:	f10a 0a01 	addeq.w	sl, sl, #1
 801c822:	fa1f f18c 	uxth.w	r1, ip
 801c826:	bf08      	it	eq
 801c828:	fa1f fa8a 	uxtheq.w	sl, sl
 801c82c:	4281      	cmp	r1, r0
 801c82e:	d3ea      	bcc.n	801c806 <uxr_prepare_reliable_buffer_to_write+0x42>
 801c830:	4640      	mov	r0, r8
 801c832:	2104      	movs	r1, #4
 801c834:	f8cd a014 	str.w	sl, [sp, #20]
 801c838:	f7f2 ffe2 	bl	800f800 <ucdr_alignment>
 801c83c:	4480      	add	r8, r0
 801c83e:	eb08 020b 	add.w	r2, r8, fp
 801c842:	42ba      	cmp	r2, r7
 801c844:	f240 80cd 	bls.w	801c9e2 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801c848:	7b22      	ldrb	r2, [r4, #12]
 801c84a:	445a      	add	r2, fp
 801c84c:	42ba      	cmp	r2, r7
 801c84e:	f240 80b5 	bls.w	801c9bc <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801c852:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801c856:	33fc      	adds	r3, #252	@ 0xfc
 801c858:	b2ba      	uxth	r2, r7
 801c85a:	4413      	add	r3, r2
 801c85c:	b29b      	uxth	r3, r3
 801c85e:	fb0a f903 	mul.w	r9, sl, r3
 801c862:	45d9      	cmp	r9, fp
 801c864:	9305      	str	r3, [sp, #20]
 801c866:	9306      	str	r3, [sp, #24]
 801c868:	f0c0 80b7 	bcc.w	801c9da <uxr_prepare_reliable_buffer_to_write+0x216>
 801c86c:	f108 0304 	add.w	r3, r8, #4
 801c870:	42bb      	cmp	r3, r7
 801c872:	f080 80db 	bcs.w	801ca2c <uxr_prepare_reliable_buffer_to_write+0x268>
 801c876:	f1a2 0904 	sub.w	r9, r2, #4
 801c87a:	eba9 0908 	sub.w	r9, r9, r8
 801c87e:	9b05      	ldr	r3, [sp, #20]
 801c880:	fa1f f989 	uxth.w	r9, r9
 801c884:	ebab 0b09 	sub.w	fp, fp, r9
 801c888:	fbbb f2f3 	udiv	r2, fp, r3
 801c88c:	fb03 b312 	mls	r3, r3, r2, fp
 801c890:	2b00      	cmp	r3, #0
 801c892:	f000 80c8 	beq.w	801ca26 <uxr_prepare_reliable_buffer_to_write+0x262>
 801c896:	3201      	adds	r2, #1
 801c898:	b292      	uxth	r2, r2
 801c89a:	9306      	str	r3, [sp, #24]
 801c89c:	4552      	cmp	r2, sl
 801c89e:	f200 809c 	bhi.w	801c9da <uxr_prepare_reliable_buffer_to_write+0x216>
 801c8a2:	f10d 0b20 	add.w	fp, sp, #32
 801c8a6:	2a00      	cmp	r2, #0
 801c8a8:	d042      	beq.n	801c930 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801c8aa:	f8cd 801c 	str.w	r8, [sp, #28]
 801c8ae:	f04f 0a00 	mov.w	sl, #0
 801c8b2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801c8b6:	9505      	str	r5, [sp, #20]
 801c8b8:	f10d 0b20 	add.w	fp, sp, #32
 801c8bc:	4615      	mov	r5, r2
 801c8be:	e000      	b.n	801c8c2 <uxr_prepare_reliable_buffer_to_write+0xfe>
 801c8c0:	46c1      	mov	r9, r8
 801c8c2:	8920      	ldrh	r0, [r4, #8]
 801c8c4:	fbb6 f2f0 	udiv	r2, r6, r0
 801c8c8:	fb00 6112 	mls	r1, r0, r2, r6
 801c8cc:	b28a      	uxth	r2, r1
 801c8ce:	6863      	ldr	r3, [r4, #4]
 801c8d0:	fbb3 f1f0 	udiv	r1, r3, r0
 801c8d4:	6823      	ldr	r3, [r4, #0]
 801c8d6:	fb02 f101 	mul.w	r1, r2, r1
 801c8da:	3104      	adds	r1, #4
 801c8dc:	4419      	add	r1, r3
 801c8de:	4658      	mov	r0, fp
 801c8e0:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801c8e4:	9200      	str	r2, [sp, #0]
 801c8e6:	2300      	movs	r3, #0
 801c8e8:	463a      	mov	r2, r7
 801c8ea:	f7f2 ff73 	bl	800f7d4 <ucdr_init_buffer_origin_offset>
 801c8ee:	464a      	mov	r2, r9
 801c8f0:	2300      	movs	r3, #0
 801c8f2:	210d      	movs	r1, #13
 801c8f4:	4658      	mov	r0, fp
 801c8f6:	f7fa fda5 	bl	8017444 <uxr_buffer_submessage_header>
 801c8fa:	8921      	ldrh	r1, [r4, #8]
 801c8fc:	fbb6 f2f1 	udiv	r2, r6, r1
 801c900:	fb01 6212 	mls	r2, r1, r2, r6
 801c904:	b292      	uxth	r2, r2
 801c906:	6863      	ldr	r3, [r4, #4]
 801c908:	fbb3 f3f1 	udiv	r3, r3, r1
 801c90c:	fb02 f303 	mul.w	r3, r2, r3
 801c910:	6822      	ldr	r2, [r4, #0]
 801c912:	4630      	mov	r0, r6
 801c914:	50d7      	str	r7, [r2, r3]
 801c916:	2101      	movs	r1, #1
 801c918:	f000 f9c4 	bl	801cca4 <uxr_seq_num_add>
 801c91c:	f10a 0a01 	add.w	sl, sl, #1
 801c920:	fa1f f38a 	uxth.w	r3, sl
 801c924:	429d      	cmp	r5, r3
 801c926:	4606      	mov	r6, r0
 801c928:	d8ca      	bhi.n	801c8c0 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801c92a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801c92e:	9d05      	ldr	r5, [sp, #20]
 801c930:	8920      	ldrh	r0, [r4, #8]
 801c932:	fbb6 f3f0 	udiv	r3, r6, r0
 801c936:	fb00 6313 	mls	r3, r0, r3, r6
 801c93a:	b299      	uxth	r1, r3
 801c93c:	6863      	ldr	r3, [r4, #4]
 801c93e:	fbb3 f3f0 	udiv	r3, r3, r0
 801c942:	fb01 f303 	mul.w	r3, r1, r3
 801c946:	6821      	ldr	r1, [r4, #0]
 801c948:	3304      	adds	r3, #4
 801c94a:	4419      	add	r1, r3
 801c94c:	463a      	mov	r2, r7
 801c94e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801c952:	9000      	str	r0, [sp, #0]
 801c954:	2300      	movs	r3, #0
 801c956:	4658      	mov	r0, fp
 801c958:	f7f2 ff3c 	bl	800f7d4 <ucdr_init_buffer_origin_offset>
 801c95c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801c960:	4658      	mov	r0, fp
 801c962:	fa1f f289 	uxth.w	r2, r9
 801c966:	2302      	movs	r3, #2
 801c968:	210d      	movs	r1, #13
 801c96a:	f7fa fd6b 	bl	8017444 <uxr_buffer_submessage_header>
 801c96e:	9b03      	ldr	r3, [sp, #12]
 801c970:	8927      	ldrh	r7, [r4, #8]
 801c972:	7b20      	ldrb	r0, [r4, #12]
 801c974:	f108 0104 	add.w	r1, r8, #4
 801c978:	440b      	add	r3, r1
 801c97a:	4619      	mov	r1, r3
 801c97c:	fbb6 f3f7 	udiv	r3, r6, r7
 801c980:	fb07 6313 	mls	r3, r7, r3, r6
 801c984:	f1a5 0208 	sub.w	r2, r5, #8
 801c988:	b29d      	uxth	r5, r3
 801c98a:	3004      	adds	r0, #4
 801c98c:	6863      	ldr	r3, [r4, #4]
 801c98e:	fbb3 f3f7 	udiv	r3, r3, r7
 801c992:	fb05 f303 	mul.w	r3, r5, r3
 801c996:	6825      	ldr	r5, [r4, #0]
 801c998:	4448      	add	r0, r9
 801c99a:	50e8      	str	r0, [r5, r3]
 801c99c:	9d04      	ldr	r5, [sp, #16]
 801c99e:	eba2 0208 	sub.w	r2, r2, r8
 801c9a2:	4628      	mov	r0, r5
 801c9a4:	f7f2 ff28 	bl	800f7f8 <ucdr_init_buffer>
 801c9a8:	4628      	mov	r0, r5
 801c9aa:	493c      	ldr	r1, [pc, #240]	@ (801ca9c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801c9ac:	4622      	mov	r2, r4
 801c9ae:	f7f2 fef7 	bl	800f7a0 <ucdr_set_on_full_buffer_callback>
 801c9b2:	2001      	movs	r0, #1
 801c9b4:	81e6      	strh	r6, [r4, #14]
 801c9b6:	b011      	add	sp, #68	@ 0x44
 801c9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9bc:	2101      	movs	r1, #1
 801c9be:	89e0      	ldrh	r0, [r4, #14]
 801c9c0:	f000 f970 	bl	801cca4 <uxr_seq_num_add>
 801c9c4:	8921      	ldrh	r1, [r4, #8]
 801c9c6:	4605      	mov	r5, r0
 801c9c8:	8a60      	ldrh	r0, [r4, #18]
 801c9ca:	f000 f96b 	bl	801cca4 <uxr_seq_num_add>
 801c9ce:	4601      	mov	r1, r0
 801c9d0:	4628      	mov	r0, r5
 801c9d2:	f000 f96f 	bl	801ccb4 <uxr_seq_num_cmp>
 801c9d6:	2800      	cmp	r0, #0
 801c9d8:	dd42      	ble.n	801ca60 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801c9da:	2000      	movs	r0, #0
 801c9dc:	b011      	add	sp, #68	@ 0x44
 801c9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9e2:	8921      	ldrh	r1, [r4, #8]
 801c9e4:	8a60      	ldrh	r0, [r4, #18]
 801c9e6:	9205      	str	r2, [sp, #20]
 801c9e8:	f000 f95c 	bl	801cca4 <uxr_seq_num_add>
 801c9ec:	4601      	mov	r1, r0
 801c9ee:	4630      	mov	r0, r6
 801c9f0:	f000 f960 	bl	801ccb4 <uxr_seq_num_cmp>
 801c9f4:	2800      	cmp	r0, #0
 801c9f6:	9a05      	ldr	r2, [sp, #20]
 801c9f8:	dcef      	bgt.n	801c9da <uxr_prepare_reliable_buffer_to_write+0x216>
 801c9fa:	8927      	ldrh	r7, [r4, #8]
 801c9fc:	fbb6 f3f7 	udiv	r3, r6, r7
 801ca00:	fb07 6313 	mls	r3, r7, r3, r6
 801ca04:	b29d      	uxth	r5, r3
 801ca06:	6863      	ldr	r3, [r4, #4]
 801ca08:	6824      	ldr	r4, [r4, #0]
 801ca0a:	fbb3 f3f7 	udiv	r3, r3, r7
 801ca0e:	fb05 f303 	mul.w	r3, r5, r3
 801ca12:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801ca16:	50e2      	str	r2, [r4, r3]
 801ca18:	2300      	movs	r3, #0
 801ca1a:	f8cd 8000 	str.w	r8, [sp]
 801ca1e:	f7f2 fed9 	bl	800f7d4 <ucdr_init_buffer_origin_offset>
 801ca22:	2001      	movs	r0, #1
 801ca24:	e7da      	b.n	801c9dc <uxr_prepare_reliable_buffer_to_write+0x218>
 801ca26:	b293      	uxth	r3, r2
 801ca28:	461a      	mov	r2, r3
 801ca2a:	e737      	b.n	801c89c <uxr_prepare_reliable_buffer_to_write+0xd8>
 801ca2c:	4630      	mov	r0, r6
 801ca2e:	2101      	movs	r1, #1
 801ca30:	9207      	str	r2, [sp, #28]
 801ca32:	f000 f937 	bl	801cca4 <uxr_seq_num_add>
 801ca36:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801ca3a:	fbb0 f1fc 	udiv	r1, r0, ip
 801ca3e:	fb0c 0111 	mls	r1, ip, r1, r0
 801ca42:	4606      	mov	r6, r0
 801ca44:	b288      	uxth	r0, r1
 801ca46:	6863      	ldr	r3, [r4, #4]
 801ca48:	fbb3 f1fc 	udiv	r1, r3, ip
 801ca4c:	6823      	ldr	r3, [r4, #0]
 801ca4e:	9a07      	ldr	r2, [sp, #28]
 801ca50:	fb00 f101 	mul.w	r1, r0, r1
 801ca54:	3104      	adds	r1, #4
 801ca56:	440b      	add	r3, r1
 801ca58:	9303      	str	r3, [sp, #12]
 801ca5a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801ca5e:	e70a      	b.n	801c876 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801ca60:	8921      	ldrh	r1, [r4, #8]
 801ca62:	fbb5 f3f1 	udiv	r3, r5, r1
 801ca66:	fb01 5313 	mls	r3, r1, r3, r5
 801ca6a:	b29a      	uxth	r2, r3
 801ca6c:	6863      	ldr	r3, [r4, #4]
 801ca6e:	fbb3 f3f1 	udiv	r3, r3, r1
 801ca72:	6821      	ldr	r1, [r4, #0]
 801ca74:	9804      	ldr	r0, [sp, #16]
 801ca76:	fb02 f303 	mul.w	r3, r2, r3
 801ca7a:	3304      	adds	r3, #4
 801ca7c:	7b22      	ldrb	r2, [r4, #12]
 801ca7e:	4419      	add	r1, r3
 801ca80:	445a      	add	r2, fp
 801ca82:	f841 2c04 	str.w	r2, [r1, #-4]
 801ca86:	7b23      	ldrb	r3, [r4, #12]
 801ca88:	9300      	str	r3, [sp, #0]
 801ca8a:	2300      	movs	r3, #0
 801ca8c:	f7f2 fea2 	bl	800f7d4 <ucdr_init_buffer_origin_offset>
 801ca90:	81e5      	strh	r5, [r4, #14]
 801ca92:	2001      	movs	r0, #1
 801ca94:	e7a2      	b.n	801c9dc <uxr_prepare_reliable_buffer_to_write+0x218>
 801ca96:	4682      	mov	sl, r0
 801ca98:	e6ca      	b.n	801c830 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801ca9a:	bf00      	nop
 801ca9c:	0801c6a5 	.word	0x0801c6a5

0801caa0 <uxr_prepare_next_reliable_buffer_to_send>:
 801caa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801caa2:	4604      	mov	r4, r0
 801caa4:	460f      	mov	r7, r1
 801caa6:	8a00      	ldrh	r0, [r0, #16]
 801caa8:	2101      	movs	r1, #1
 801caaa:	4616      	mov	r6, r2
 801caac:	461d      	mov	r5, r3
 801caae:	f000 f8f9 	bl	801cca4 <uxr_seq_num_add>
 801cab2:	8028      	strh	r0, [r5, #0]
 801cab4:	8922      	ldrh	r2, [r4, #8]
 801cab6:	fbb0 f3f2 	udiv	r3, r0, r2
 801caba:	fb02 0c13 	mls	ip, r2, r3, r0
 801cabe:	fa1f fc8c 	uxth.w	ip, ip
 801cac2:	6863      	ldr	r3, [r4, #4]
 801cac4:	fbb3 f3f2 	udiv	r3, r3, r2
 801cac8:	fb0c fc03 	mul.w	ip, ip, r3
 801cacc:	6823      	ldr	r3, [r4, #0]
 801cace:	89e1      	ldrh	r1, [r4, #14]
 801cad0:	f10c 0c04 	add.w	ip, ip, #4
 801cad4:	4463      	add	r3, ip
 801cad6:	603b      	str	r3, [r7, #0]
 801cad8:	6823      	ldr	r3, [r4, #0]
 801cada:	449c      	add	ip, r3
 801cadc:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801cae0:	6033      	str	r3, [r6, #0]
 801cae2:	f000 f8e7 	bl	801ccb4 <uxr_seq_num_cmp>
 801cae6:	2800      	cmp	r0, #0
 801cae8:	dd01      	ble.n	801caee <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801caea:	2000      	movs	r0, #0
 801caec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801caee:	7b23      	ldrb	r3, [r4, #12]
 801caf0:	6832      	ldr	r2, [r6, #0]
 801caf2:	429a      	cmp	r2, r3
 801caf4:	d9f9      	bls.n	801caea <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801caf6:	8a61      	ldrh	r1, [r4, #18]
 801caf8:	8a20      	ldrh	r0, [r4, #16]
 801cafa:	f000 f8d7 	bl	801ccac <uxr_seq_num_sub>
 801cafe:	8923      	ldrh	r3, [r4, #8]
 801cb00:	4283      	cmp	r3, r0
 801cb02:	d0f2      	beq.n	801caea <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801cb04:	8828      	ldrh	r0, [r5, #0]
 801cb06:	89e3      	ldrh	r3, [r4, #14]
 801cb08:	8220      	strh	r0, [r4, #16]
 801cb0a:	4298      	cmp	r0, r3
 801cb0c:	d001      	beq.n	801cb12 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801cb0e:	2001      	movs	r0, #1
 801cb10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cb12:	2101      	movs	r1, #1
 801cb14:	f000 f8c6 	bl	801cca4 <uxr_seq_num_add>
 801cb18:	81e0      	strh	r0, [r4, #14]
 801cb1a:	2001      	movs	r0, #1
 801cb1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cb1e:	bf00      	nop

0801cb20 <uxr_update_output_stream_heartbeat_timestamp>:
 801cb20:	b570      	push	{r4, r5, r6, lr}
 801cb22:	8a01      	ldrh	r1, [r0, #16]
 801cb24:	4604      	mov	r4, r0
 801cb26:	8a40      	ldrh	r0, [r0, #18]
 801cb28:	4615      	mov	r5, r2
 801cb2a:	461e      	mov	r6, r3
 801cb2c:	f000 f8c2 	bl	801ccb4 <uxr_seq_num_cmp>
 801cb30:	2800      	cmp	r0, #0
 801cb32:	db07      	blt.n	801cb44 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801cb34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cb38:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801cb3c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801cb40:	2000      	movs	r0, #0
 801cb42:	bd70      	pop	{r4, r5, r6, pc}
 801cb44:	f894 0020 	ldrb.w	r0, [r4, #32]
 801cb48:	b940      	cbnz	r0, 801cb5c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801cb4a:	2301      	movs	r3, #1
 801cb4c:	f884 3020 	strb.w	r3, [r4, #32]
 801cb50:	3564      	adds	r5, #100	@ 0x64
 801cb52:	f146 0600 	adc.w	r6, r6, #0
 801cb56:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801cb5a:	bd70      	pop	{r4, r5, r6, pc}
 801cb5c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801cb60:	4295      	cmp	r5, r2
 801cb62:	eb76 0303 	sbcs.w	r3, r6, r3
 801cb66:	bfa5      	ittet	ge
 801cb68:	3001      	addge	r0, #1
 801cb6a:	f884 0020 	strbge.w	r0, [r4, #32]
 801cb6e:	2000      	movlt	r0, #0
 801cb70:	2001      	movge	r0, #1
 801cb72:	e7ed      	b.n	801cb50 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801cb74 <uxr_begin_output_nack_buffer_it>:
 801cb74:	8a40      	ldrh	r0, [r0, #18]
 801cb76:	4770      	bx	lr

0801cb78 <uxr_next_reliable_nack_buffer_to_send>:
 801cb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb7c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801cb80:	b082      	sub	sp, #8
 801cb82:	f1b8 0f00 	cmp.w	r8, #0
 801cb86:	d011      	beq.n	801cbac <uxr_next_reliable_nack_buffer_to_send+0x34>
 801cb88:	4604      	mov	r4, r0
 801cb8a:	8818      	ldrh	r0, [r3, #0]
 801cb8c:	460e      	mov	r6, r1
 801cb8e:	4617      	mov	r7, r2
 801cb90:	461d      	mov	r5, r3
 801cb92:	2101      	movs	r1, #1
 801cb94:	f000 f886 	bl	801cca4 <uxr_seq_num_add>
 801cb98:	8028      	strh	r0, [r5, #0]
 801cb9a:	8a21      	ldrh	r1, [r4, #16]
 801cb9c:	f000 f88a 	bl	801ccb4 <uxr_seq_num_cmp>
 801cba0:	2800      	cmp	r0, #0
 801cba2:	dd07      	ble.n	801cbb4 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801cba4:	f04f 0800 	mov.w	r8, #0
 801cba8:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801cbac:	4640      	mov	r0, r8
 801cbae:	b002      	add	sp, #8
 801cbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cbb4:	8921      	ldrh	r1, [r4, #8]
 801cbb6:	8828      	ldrh	r0, [r5, #0]
 801cbb8:	6823      	ldr	r3, [r4, #0]
 801cbba:	fbb0 f2f1 	udiv	r2, r0, r1
 801cbbe:	fb01 0c12 	mls	ip, r1, r2, r0
 801cbc2:	fa1f f28c 	uxth.w	r2, ip
 801cbc6:	9301      	str	r3, [sp, #4]
 801cbc8:	6863      	ldr	r3, [r4, #4]
 801cbca:	fbb3 fcf1 	udiv	ip, r3, r1
 801cbce:	9b01      	ldr	r3, [sp, #4]
 801cbd0:	fb02 fc0c 	mul.w	ip, r2, ip
 801cbd4:	f10c 0c04 	add.w	ip, ip, #4
 801cbd8:	4463      	add	r3, ip
 801cbda:	6033      	str	r3, [r6, #0]
 801cbdc:	6823      	ldr	r3, [r4, #0]
 801cbde:	4463      	add	r3, ip
 801cbe0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801cbe4:	603b      	str	r3, [r7, #0]
 801cbe6:	7b22      	ldrb	r2, [r4, #12]
 801cbe8:	429a      	cmp	r2, r3
 801cbea:	d0d2      	beq.n	801cb92 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801cbec:	4640      	mov	r0, r8
 801cbee:	b002      	add	sp, #8
 801cbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cbf4 <uxr_process_acknack>:
 801cbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbf6:	4604      	mov	r4, r0
 801cbf8:	460e      	mov	r6, r1
 801cbfa:	4610      	mov	r0, r2
 801cbfc:	2101      	movs	r1, #1
 801cbfe:	f000 f855 	bl	801ccac <uxr_seq_num_sub>
 801cc02:	8a61      	ldrh	r1, [r4, #18]
 801cc04:	f000 f852 	bl	801ccac <uxr_seq_num_sub>
 801cc08:	b1c0      	cbz	r0, 801cc3c <uxr_process_acknack+0x48>
 801cc0a:	4605      	mov	r5, r0
 801cc0c:	2700      	movs	r7, #0
 801cc0e:	2101      	movs	r1, #1
 801cc10:	8a60      	ldrh	r0, [r4, #18]
 801cc12:	f000 f847 	bl	801cca4 <uxr_seq_num_add>
 801cc16:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801cc1a:	fbb0 f1fc 	udiv	r1, r0, ip
 801cc1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801cc22:	fb0c 0111 	mls	r1, ip, r1, r0
 801cc26:	b289      	uxth	r1, r1
 801cc28:	3701      	adds	r7, #1
 801cc2a:	fbb3 f3fc 	udiv	r3, r3, ip
 801cc2e:	fb01 f303 	mul.w	r3, r1, r3
 801cc32:	42bd      	cmp	r5, r7
 801cc34:	7b21      	ldrb	r1, [r4, #12]
 801cc36:	8260      	strh	r0, [r4, #18]
 801cc38:	50d1      	str	r1, [r2, r3]
 801cc3a:	d1e8      	bne.n	801cc0e <uxr_process_acknack+0x1a>
 801cc3c:	3e00      	subs	r6, #0
 801cc3e:	f04f 0300 	mov.w	r3, #0
 801cc42:	bf18      	it	ne
 801cc44:	2601      	movne	r6, #1
 801cc46:	f884 3020 	strb.w	r3, [r4, #32]
 801cc4a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801cc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cc50 <uxr_is_output_up_to_date>:
 801cc50:	8a01      	ldrh	r1, [r0, #16]
 801cc52:	8a40      	ldrh	r0, [r0, #18]
 801cc54:	b508      	push	{r3, lr}
 801cc56:	f000 f82d 	bl	801ccb4 <uxr_seq_num_cmp>
 801cc5a:	fab0 f080 	clz	r0, r0
 801cc5e:	0940      	lsrs	r0, r0, #5
 801cc60:	bd08      	pop	{r3, pc}
 801cc62:	bf00      	nop

0801cc64 <get_available_free_slots>:
 801cc64:	8902      	ldrh	r2, [r0, #8]
 801cc66:	b1da      	cbz	r2, 801cca0 <get_available_free_slots+0x3c>
 801cc68:	b530      	push	{r4, r5, lr}
 801cc6a:	2100      	movs	r1, #0
 801cc6c:	6843      	ldr	r3, [r0, #4]
 801cc6e:	6805      	ldr	r5, [r0, #0]
 801cc70:	7b04      	ldrb	r4, [r0, #12]
 801cc72:	fbb3 fef2 	udiv	lr, r3, r2
 801cc76:	4608      	mov	r0, r1
 801cc78:	460b      	mov	r3, r1
 801cc7a:	fbb3 fcf2 	udiv	ip, r3, r2
 801cc7e:	fb02 331c 	mls	r3, r2, ip, r3
 801cc82:	b29b      	uxth	r3, r3
 801cc84:	fb0e f303 	mul.w	r3, lr, r3
 801cc88:	3101      	adds	r1, #1
 801cc8a:	f855 c003 	ldr.w	ip, [r5, r3]
 801cc8e:	4564      	cmp	r4, ip
 801cc90:	bf08      	it	eq
 801cc92:	3001      	addeq	r0, #1
 801cc94:	b28b      	uxth	r3, r1
 801cc96:	bf08      	it	eq
 801cc98:	b280      	uxtheq	r0, r0
 801cc9a:	4293      	cmp	r3, r2
 801cc9c:	d3ed      	bcc.n	801cc7a <get_available_free_slots+0x16>
 801cc9e:	bd30      	pop	{r4, r5, pc}
 801cca0:	4610      	mov	r0, r2
 801cca2:	4770      	bx	lr

0801cca4 <uxr_seq_num_add>:
 801cca4:	4408      	add	r0, r1
 801cca6:	b280      	uxth	r0, r0
 801cca8:	4770      	bx	lr
 801ccaa:	bf00      	nop

0801ccac <uxr_seq_num_sub>:
 801ccac:	1a40      	subs	r0, r0, r1
 801ccae:	b280      	uxth	r0, r0
 801ccb0:	4770      	bx	lr
 801ccb2:	bf00      	nop

0801ccb4 <uxr_seq_num_cmp>:
 801ccb4:	4288      	cmp	r0, r1
 801ccb6:	d011      	beq.n	801ccdc <uxr_seq_num_cmp+0x28>
 801ccb8:	d309      	bcc.n	801ccce <uxr_seq_num_cmp+0x1a>
 801ccba:	4288      	cmp	r0, r1
 801ccbc:	d910      	bls.n	801cce0 <uxr_seq_num_cmp+0x2c>
 801ccbe:	1a40      	subs	r0, r0, r1
 801ccc0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801ccc4:	bfd4      	ite	le
 801ccc6:	2001      	movle	r0, #1
 801ccc8:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801cccc:	4770      	bx	lr
 801ccce:	1a0b      	subs	r3, r1, r0
 801ccd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801ccd4:	daf1      	bge.n	801ccba <uxr_seq_num_cmp+0x6>
 801ccd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ccda:	4770      	bx	lr
 801ccdc:	2000      	movs	r0, #0
 801ccde:	4770      	bx	lr
 801cce0:	2001      	movs	r0, #1
 801cce2:	4770      	bx	lr

0801cce4 <rcl_get_default_domain_id>:
 801cce4:	b530      	push	{r4, r5, lr}
 801cce6:	b083      	sub	sp, #12
 801cce8:	2300      	movs	r3, #0
 801ccea:	9300      	str	r3, [sp, #0]
 801ccec:	b1d0      	cbz	r0, 801cd24 <rcl_get_default_domain_id+0x40>
 801ccee:	4604      	mov	r4, r0
 801ccf0:	4669      	mov	r1, sp
 801ccf2:	4815      	ldr	r0, [pc, #84]	@ (801cd48 <rcl_get_default_domain_id+0x64>)
 801ccf4:	f7f4 fc50 	bl	8011598 <rcutils_get_env>
 801ccf8:	4602      	mov	r2, r0
 801ccfa:	b110      	cbz	r0, 801cd02 <rcl_get_default_domain_id+0x1e>
 801ccfc:	2001      	movs	r0, #1
 801ccfe:	b003      	add	sp, #12
 801cd00:	bd30      	pop	{r4, r5, pc}
 801cd02:	9b00      	ldr	r3, [sp, #0]
 801cd04:	b18b      	cbz	r3, 801cd2a <rcl_get_default_domain_id+0x46>
 801cd06:	7818      	ldrb	r0, [r3, #0]
 801cd08:	2800      	cmp	r0, #0
 801cd0a:	d0f8      	beq.n	801ccfe <rcl_get_default_domain_id+0x1a>
 801cd0c:	a901      	add	r1, sp, #4
 801cd0e:	4618      	mov	r0, r3
 801cd10:	9201      	str	r2, [sp, #4]
 801cd12:	f000 fa5f 	bl	801d1d4 <strtoul>
 801cd16:	4605      	mov	r5, r0
 801cd18:	b150      	cbz	r0, 801cd30 <rcl_get_default_domain_id+0x4c>
 801cd1a:	1c43      	adds	r3, r0, #1
 801cd1c:	d00d      	beq.n	801cd3a <rcl_get_default_domain_id+0x56>
 801cd1e:	6025      	str	r5, [r4, #0]
 801cd20:	2000      	movs	r0, #0
 801cd22:	e7ec      	b.n	801ccfe <rcl_get_default_domain_id+0x1a>
 801cd24:	200b      	movs	r0, #11
 801cd26:	b003      	add	sp, #12
 801cd28:	bd30      	pop	{r4, r5, pc}
 801cd2a:	4618      	mov	r0, r3
 801cd2c:	b003      	add	sp, #12
 801cd2e:	bd30      	pop	{r4, r5, pc}
 801cd30:	9b01      	ldr	r3, [sp, #4]
 801cd32:	781b      	ldrb	r3, [r3, #0]
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	d0f2      	beq.n	801cd1e <rcl_get_default_domain_id+0x3a>
 801cd38:	e7e0      	b.n	801ccfc <rcl_get_default_domain_id+0x18>
 801cd3a:	f000 fd85 	bl	801d848 <__errno>
 801cd3e:	6803      	ldr	r3, [r0, #0]
 801cd40:	2b22      	cmp	r3, #34	@ 0x22
 801cd42:	d1ec      	bne.n	801cd1e <rcl_get_default_domain_id+0x3a>
 801cd44:	e7da      	b.n	801ccfc <rcl_get_default_domain_id+0x18>
 801cd46:	bf00      	nop
 801cd48:	08020be0 	.word	0x08020be0

0801cd4c <calloc>:
 801cd4c:	4b02      	ldr	r3, [pc, #8]	@ (801cd58 <calloc+0xc>)
 801cd4e:	460a      	mov	r2, r1
 801cd50:	4601      	mov	r1, r0
 801cd52:	6818      	ldr	r0, [r3, #0]
 801cd54:	f000 b802 	b.w	801cd5c <_calloc_r>
 801cd58:	20000dd0 	.word	0x20000dd0

0801cd5c <_calloc_r>:
 801cd5c:	b570      	push	{r4, r5, r6, lr}
 801cd5e:	fba1 5402 	umull	r5, r4, r1, r2
 801cd62:	b93c      	cbnz	r4, 801cd74 <_calloc_r+0x18>
 801cd64:	4629      	mov	r1, r5
 801cd66:	f000 f899 	bl	801ce9c <_malloc_r>
 801cd6a:	4606      	mov	r6, r0
 801cd6c:	b928      	cbnz	r0, 801cd7a <_calloc_r+0x1e>
 801cd6e:	2600      	movs	r6, #0
 801cd70:	4630      	mov	r0, r6
 801cd72:	bd70      	pop	{r4, r5, r6, pc}
 801cd74:	220c      	movs	r2, #12
 801cd76:	6002      	str	r2, [r0, #0]
 801cd78:	e7f9      	b.n	801cd6e <_calloc_r+0x12>
 801cd7a:	462a      	mov	r2, r5
 801cd7c:	4621      	mov	r1, r4
 801cd7e:	f000 fccf 	bl	801d720 <memset>
 801cd82:	e7f5      	b.n	801cd70 <_calloc_r+0x14>

0801cd84 <exit>:
 801cd84:	b508      	push	{r3, lr}
 801cd86:	4b06      	ldr	r3, [pc, #24]	@ (801cda0 <exit+0x1c>)
 801cd88:	4604      	mov	r4, r0
 801cd8a:	b113      	cbz	r3, 801cd92 <exit+0xe>
 801cd8c:	2100      	movs	r1, #0
 801cd8e:	f3af 8000 	nop.w
 801cd92:	4b04      	ldr	r3, [pc, #16]	@ (801cda4 <exit+0x20>)
 801cd94:	681b      	ldr	r3, [r3, #0]
 801cd96:	b103      	cbz	r3, 801cd9a <exit+0x16>
 801cd98:	4798      	blx	r3
 801cd9a:	4620      	mov	r0, r4
 801cd9c:	f7e6 fd0a 	bl	80037b4 <_exit>
 801cda0:	00000000 	.word	0x00000000
 801cda4:	2000c618 	.word	0x2000c618

0801cda8 <getenv>:
 801cda8:	b507      	push	{r0, r1, r2, lr}
 801cdaa:	4b04      	ldr	r3, [pc, #16]	@ (801cdbc <getenv+0x14>)
 801cdac:	4601      	mov	r1, r0
 801cdae:	aa01      	add	r2, sp, #4
 801cdb0:	6818      	ldr	r0, [r3, #0]
 801cdb2:	f000 f805 	bl	801cdc0 <_findenv_r>
 801cdb6:	b003      	add	sp, #12
 801cdb8:	f85d fb04 	ldr.w	pc, [sp], #4
 801cdbc:	20000dd0 	.word	0x20000dd0

0801cdc0 <_findenv_r>:
 801cdc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdc4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801ce34 <_findenv_r+0x74>
 801cdc8:	4606      	mov	r6, r0
 801cdca:	4689      	mov	r9, r1
 801cdcc:	4617      	mov	r7, r2
 801cdce:	f000 fd9d 	bl	801d90c <__env_lock>
 801cdd2:	f8da 4000 	ldr.w	r4, [sl]
 801cdd6:	b134      	cbz	r4, 801cde6 <_findenv_r+0x26>
 801cdd8:	464b      	mov	r3, r9
 801cdda:	4698      	mov	r8, r3
 801cddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cde0:	b13a      	cbz	r2, 801cdf2 <_findenv_r+0x32>
 801cde2:	2a3d      	cmp	r2, #61	@ 0x3d
 801cde4:	d1f9      	bne.n	801cdda <_findenv_r+0x1a>
 801cde6:	4630      	mov	r0, r6
 801cde8:	f000 fd96 	bl	801d918 <__env_unlock>
 801cdec:	2000      	movs	r0, #0
 801cdee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdf2:	eba8 0809 	sub.w	r8, r8, r9
 801cdf6:	46a3      	mov	fp, r4
 801cdf8:	f854 0b04 	ldr.w	r0, [r4], #4
 801cdfc:	2800      	cmp	r0, #0
 801cdfe:	d0f2      	beq.n	801cde6 <_findenv_r+0x26>
 801ce00:	4642      	mov	r2, r8
 801ce02:	4649      	mov	r1, r9
 801ce04:	f000 fca1 	bl	801d74a <strncmp>
 801ce08:	2800      	cmp	r0, #0
 801ce0a:	d1f4      	bne.n	801cdf6 <_findenv_r+0x36>
 801ce0c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801ce10:	eb03 0508 	add.w	r5, r3, r8
 801ce14:	f813 3008 	ldrb.w	r3, [r3, r8]
 801ce18:	2b3d      	cmp	r3, #61	@ 0x3d
 801ce1a:	d1ec      	bne.n	801cdf6 <_findenv_r+0x36>
 801ce1c:	f8da 3000 	ldr.w	r3, [sl]
 801ce20:	ebab 0303 	sub.w	r3, fp, r3
 801ce24:	109b      	asrs	r3, r3, #2
 801ce26:	4630      	mov	r0, r6
 801ce28:	603b      	str	r3, [r7, #0]
 801ce2a:	f000 fd75 	bl	801d918 <__env_unlock>
 801ce2e:	1c68      	adds	r0, r5, #1
 801ce30:	e7dd      	b.n	801cdee <_findenv_r+0x2e>
 801ce32:	bf00      	nop
 801ce34:	20000000 	.word	0x20000000

0801ce38 <malloc>:
 801ce38:	4b02      	ldr	r3, [pc, #8]	@ (801ce44 <malloc+0xc>)
 801ce3a:	4601      	mov	r1, r0
 801ce3c:	6818      	ldr	r0, [r3, #0]
 801ce3e:	f000 b82d 	b.w	801ce9c <_malloc_r>
 801ce42:	bf00      	nop
 801ce44:	20000dd0 	.word	0x20000dd0

0801ce48 <free>:
 801ce48:	4b02      	ldr	r3, [pc, #8]	@ (801ce54 <free+0xc>)
 801ce4a:	4601      	mov	r1, r0
 801ce4c:	6818      	ldr	r0, [r3, #0]
 801ce4e:	f000 bd69 	b.w	801d924 <_free_r>
 801ce52:	bf00      	nop
 801ce54:	20000dd0 	.word	0x20000dd0

0801ce58 <sbrk_aligned>:
 801ce58:	b570      	push	{r4, r5, r6, lr}
 801ce5a:	4e0f      	ldr	r6, [pc, #60]	@ (801ce98 <sbrk_aligned+0x40>)
 801ce5c:	460c      	mov	r4, r1
 801ce5e:	6831      	ldr	r1, [r6, #0]
 801ce60:	4605      	mov	r5, r0
 801ce62:	b911      	cbnz	r1, 801ce6a <sbrk_aligned+0x12>
 801ce64:	f000 fcce 	bl	801d804 <_sbrk_r>
 801ce68:	6030      	str	r0, [r6, #0]
 801ce6a:	4621      	mov	r1, r4
 801ce6c:	4628      	mov	r0, r5
 801ce6e:	f000 fcc9 	bl	801d804 <_sbrk_r>
 801ce72:	1c43      	adds	r3, r0, #1
 801ce74:	d103      	bne.n	801ce7e <sbrk_aligned+0x26>
 801ce76:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801ce7a:	4620      	mov	r0, r4
 801ce7c:	bd70      	pop	{r4, r5, r6, pc}
 801ce7e:	1cc4      	adds	r4, r0, #3
 801ce80:	f024 0403 	bic.w	r4, r4, #3
 801ce84:	42a0      	cmp	r0, r4
 801ce86:	d0f8      	beq.n	801ce7a <sbrk_aligned+0x22>
 801ce88:	1a21      	subs	r1, r4, r0
 801ce8a:	4628      	mov	r0, r5
 801ce8c:	f000 fcba 	bl	801d804 <_sbrk_r>
 801ce90:	3001      	adds	r0, #1
 801ce92:	d1f2      	bne.n	801ce7a <sbrk_aligned+0x22>
 801ce94:	e7ef      	b.n	801ce76 <sbrk_aligned+0x1e>
 801ce96:	bf00      	nop
 801ce98:	2000c4d8 	.word	0x2000c4d8

0801ce9c <_malloc_r>:
 801ce9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cea0:	1ccd      	adds	r5, r1, #3
 801cea2:	f025 0503 	bic.w	r5, r5, #3
 801cea6:	3508      	adds	r5, #8
 801cea8:	2d0c      	cmp	r5, #12
 801ceaa:	bf38      	it	cc
 801ceac:	250c      	movcc	r5, #12
 801ceae:	2d00      	cmp	r5, #0
 801ceb0:	4606      	mov	r6, r0
 801ceb2:	db01      	blt.n	801ceb8 <_malloc_r+0x1c>
 801ceb4:	42a9      	cmp	r1, r5
 801ceb6:	d904      	bls.n	801cec2 <_malloc_r+0x26>
 801ceb8:	230c      	movs	r3, #12
 801ceba:	6033      	str	r3, [r6, #0]
 801cebc:	2000      	movs	r0, #0
 801cebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cec2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801cf98 <_malloc_r+0xfc>
 801cec6:	f000 f869 	bl	801cf9c <__malloc_lock>
 801ceca:	f8d8 3000 	ldr.w	r3, [r8]
 801cece:	461c      	mov	r4, r3
 801ced0:	bb44      	cbnz	r4, 801cf24 <_malloc_r+0x88>
 801ced2:	4629      	mov	r1, r5
 801ced4:	4630      	mov	r0, r6
 801ced6:	f7ff ffbf 	bl	801ce58 <sbrk_aligned>
 801ceda:	1c43      	adds	r3, r0, #1
 801cedc:	4604      	mov	r4, r0
 801cede:	d158      	bne.n	801cf92 <_malloc_r+0xf6>
 801cee0:	f8d8 4000 	ldr.w	r4, [r8]
 801cee4:	4627      	mov	r7, r4
 801cee6:	2f00      	cmp	r7, #0
 801cee8:	d143      	bne.n	801cf72 <_malloc_r+0xd6>
 801ceea:	2c00      	cmp	r4, #0
 801ceec:	d04b      	beq.n	801cf86 <_malloc_r+0xea>
 801ceee:	6823      	ldr	r3, [r4, #0]
 801cef0:	4639      	mov	r1, r7
 801cef2:	4630      	mov	r0, r6
 801cef4:	eb04 0903 	add.w	r9, r4, r3
 801cef8:	f000 fc84 	bl	801d804 <_sbrk_r>
 801cefc:	4581      	cmp	r9, r0
 801cefe:	d142      	bne.n	801cf86 <_malloc_r+0xea>
 801cf00:	6821      	ldr	r1, [r4, #0]
 801cf02:	1a6d      	subs	r5, r5, r1
 801cf04:	4629      	mov	r1, r5
 801cf06:	4630      	mov	r0, r6
 801cf08:	f7ff ffa6 	bl	801ce58 <sbrk_aligned>
 801cf0c:	3001      	adds	r0, #1
 801cf0e:	d03a      	beq.n	801cf86 <_malloc_r+0xea>
 801cf10:	6823      	ldr	r3, [r4, #0]
 801cf12:	442b      	add	r3, r5
 801cf14:	6023      	str	r3, [r4, #0]
 801cf16:	f8d8 3000 	ldr.w	r3, [r8]
 801cf1a:	685a      	ldr	r2, [r3, #4]
 801cf1c:	bb62      	cbnz	r2, 801cf78 <_malloc_r+0xdc>
 801cf1e:	f8c8 7000 	str.w	r7, [r8]
 801cf22:	e00f      	b.n	801cf44 <_malloc_r+0xa8>
 801cf24:	6822      	ldr	r2, [r4, #0]
 801cf26:	1b52      	subs	r2, r2, r5
 801cf28:	d420      	bmi.n	801cf6c <_malloc_r+0xd0>
 801cf2a:	2a0b      	cmp	r2, #11
 801cf2c:	d917      	bls.n	801cf5e <_malloc_r+0xc2>
 801cf2e:	1961      	adds	r1, r4, r5
 801cf30:	42a3      	cmp	r3, r4
 801cf32:	6025      	str	r5, [r4, #0]
 801cf34:	bf18      	it	ne
 801cf36:	6059      	strne	r1, [r3, #4]
 801cf38:	6863      	ldr	r3, [r4, #4]
 801cf3a:	bf08      	it	eq
 801cf3c:	f8c8 1000 	streq.w	r1, [r8]
 801cf40:	5162      	str	r2, [r4, r5]
 801cf42:	604b      	str	r3, [r1, #4]
 801cf44:	4630      	mov	r0, r6
 801cf46:	f000 f82f 	bl	801cfa8 <__malloc_unlock>
 801cf4a:	f104 000b 	add.w	r0, r4, #11
 801cf4e:	1d23      	adds	r3, r4, #4
 801cf50:	f020 0007 	bic.w	r0, r0, #7
 801cf54:	1ac2      	subs	r2, r0, r3
 801cf56:	bf1c      	itt	ne
 801cf58:	1a1b      	subne	r3, r3, r0
 801cf5a:	50a3      	strne	r3, [r4, r2]
 801cf5c:	e7af      	b.n	801cebe <_malloc_r+0x22>
 801cf5e:	6862      	ldr	r2, [r4, #4]
 801cf60:	42a3      	cmp	r3, r4
 801cf62:	bf0c      	ite	eq
 801cf64:	f8c8 2000 	streq.w	r2, [r8]
 801cf68:	605a      	strne	r2, [r3, #4]
 801cf6a:	e7eb      	b.n	801cf44 <_malloc_r+0xa8>
 801cf6c:	4623      	mov	r3, r4
 801cf6e:	6864      	ldr	r4, [r4, #4]
 801cf70:	e7ae      	b.n	801ced0 <_malloc_r+0x34>
 801cf72:	463c      	mov	r4, r7
 801cf74:	687f      	ldr	r7, [r7, #4]
 801cf76:	e7b6      	b.n	801cee6 <_malloc_r+0x4a>
 801cf78:	461a      	mov	r2, r3
 801cf7a:	685b      	ldr	r3, [r3, #4]
 801cf7c:	42a3      	cmp	r3, r4
 801cf7e:	d1fb      	bne.n	801cf78 <_malloc_r+0xdc>
 801cf80:	2300      	movs	r3, #0
 801cf82:	6053      	str	r3, [r2, #4]
 801cf84:	e7de      	b.n	801cf44 <_malloc_r+0xa8>
 801cf86:	230c      	movs	r3, #12
 801cf88:	6033      	str	r3, [r6, #0]
 801cf8a:	4630      	mov	r0, r6
 801cf8c:	f000 f80c 	bl	801cfa8 <__malloc_unlock>
 801cf90:	e794      	b.n	801cebc <_malloc_r+0x20>
 801cf92:	6005      	str	r5, [r0, #0]
 801cf94:	e7d6      	b.n	801cf44 <_malloc_r+0xa8>
 801cf96:	bf00      	nop
 801cf98:	2000c4dc 	.word	0x2000c4dc

0801cf9c <__malloc_lock>:
 801cf9c:	4801      	ldr	r0, [pc, #4]	@ (801cfa4 <__malloc_lock+0x8>)
 801cf9e:	f000 bc7e 	b.w	801d89e <__retarget_lock_acquire_recursive>
 801cfa2:	bf00      	nop
 801cfa4:	2000c621 	.word	0x2000c621

0801cfa8 <__malloc_unlock>:
 801cfa8:	4801      	ldr	r0, [pc, #4]	@ (801cfb0 <__malloc_unlock+0x8>)
 801cfaa:	f000 bc79 	b.w	801d8a0 <__retarget_lock_release_recursive>
 801cfae:	bf00      	nop
 801cfb0:	2000c621 	.word	0x2000c621

0801cfb4 <srand>:
 801cfb4:	b538      	push	{r3, r4, r5, lr}
 801cfb6:	4b10      	ldr	r3, [pc, #64]	@ (801cff8 <srand+0x44>)
 801cfb8:	681d      	ldr	r5, [r3, #0]
 801cfba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cfbc:	4604      	mov	r4, r0
 801cfbe:	b9b3      	cbnz	r3, 801cfee <srand+0x3a>
 801cfc0:	2018      	movs	r0, #24
 801cfc2:	f7ff ff39 	bl	801ce38 <malloc>
 801cfc6:	4602      	mov	r2, r0
 801cfc8:	6328      	str	r0, [r5, #48]	@ 0x30
 801cfca:	b920      	cbnz	r0, 801cfd6 <srand+0x22>
 801cfcc:	4b0b      	ldr	r3, [pc, #44]	@ (801cffc <srand+0x48>)
 801cfce:	480c      	ldr	r0, [pc, #48]	@ (801d000 <srand+0x4c>)
 801cfd0:	2146      	movs	r1, #70	@ 0x46
 801cfd2:	f000 fc7d 	bl	801d8d0 <__assert_func>
 801cfd6:	490b      	ldr	r1, [pc, #44]	@ (801d004 <srand+0x50>)
 801cfd8:	4b0b      	ldr	r3, [pc, #44]	@ (801d008 <srand+0x54>)
 801cfda:	e9c0 1300 	strd	r1, r3, [r0]
 801cfde:	4b0b      	ldr	r3, [pc, #44]	@ (801d00c <srand+0x58>)
 801cfe0:	6083      	str	r3, [r0, #8]
 801cfe2:	230b      	movs	r3, #11
 801cfe4:	8183      	strh	r3, [r0, #12]
 801cfe6:	2100      	movs	r1, #0
 801cfe8:	2001      	movs	r0, #1
 801cfea:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801cfee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cff0:	2200      	movs	r2, #0
 801cff2:	611c      	str	r4, [r3, #16]
 801cff4:	615a      	str	r2, [r3, #20]
 801cff6:	bd38      	pop	{r3, r4, r5, pc}
 801cff8:	20000dd0 	.word	0x20000dd0
 801cffc:	08020bee 	.word	0x08020bee
 801d000:	08020c05 	.word	0x08020c05
 801d004:	abcd330e 	.word	0xabcd330e
 801d008:	e66d1234 	.word	0xe66d1234
 801d00c:	0005deec 	.word	0x0005deec

0801d010 <rand>:
 801d010:	4b16      	ldr	r3, [pc, #88]	@ (801d06c <rand+0x5c>)
 801d012:	b510      	push	{r4, lr}
 801d014:	681c      	ldr	r4, [r3, #0]
 801d016:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d018:	b9b3      	cbnz	r3, 801d048 <rand+0x38>
 801d01a:	2018      	movs	r0, #24
 801d01c:	f7ff ff0c 	bl	801ce38 <malloc>
 801d020:	4602      	mov	r2, r0
 801d022:	6320      	str	r0, [r4, #48]	@ 0x30
 801d024:	b920      	cbnz	r0, 801d030 <rand+0x20>
 801d026:	4b12      	ldr	r3, [pc, #72]	@ (801d070 <rand+0x60>)
 801d028:	4812      	ldr	r0, [pc, #72]	@ (801d074 <rand+0x64>)
 801d02a:	2152      	movs	r1, #82	@ 0x52
 801d02c:	f000 fc50 	bl	801d8d0 <__assert_func>
 801d030:	4911      	ldr	r1, [pc, #68]	@ (801d078 <rand+0x68>)
 801d032:	4b12      	ldr	r3, [pc, #72]	@ (801d07c <rand+0x6c>)
 801d034:	e9c0 1300 	strd	r1, r3, [r0]
 801d038:	4b11      	ldr	r3, [pc, #68]	@ (801d080 <rand+0x70>)
 801d03a:	6083      	str	r3, [r0, #8]
 801d03c:	230b      	movs	r3, #11
 801d03e:	8183      	strh	r3, [r0, #12]
 801d040:	2100      	movs	r1, #0
 801d042:	2001      	movs	r0, #1
 801d044:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d048:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d04a:	480e      	ldr	r0, [pc, #56]	@ (801d084 <rand+0x74>)
 801d04c:	690b      	ldr	r3, [r1, #16]
 801d04e:	694c      	ldr	r4, [r1, #20]
 801d050:	4a0d      	ldr	r2, [pc, #52]	@ (801d088 <rand+0x78>)
 801d052:	4358      	muls	r0, r3
 801d054:	fb02 0004 	mla	r0, r2, r4, r0
 801d058:	fba3 3202 	umull	r3, r2, r3, r2
 801d05c:	3301      	adds	r3, #1
 801d05e:	eb40 0002 	adc.w	r0, r0, r2
 801d062:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d066:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d06a:	bd10      	pop	{r4, pc}
 801d06c:	20000dd0 	.word	0x20000dd0
 801d070:	08020bee 	.word	0x08020bee
 801d074:	08020c05 	.word	0x08020c05
 801d078:	abcd330e 	.word	0xabcd330e
 801d07c:	e66d1234 	.word	0xe66d1234
 801d080:	0005deec 	.word	0x0005deec
 801d084:	5851f42d 	.word	0x5851f42d
 801d088:	4c957f2d 	.word	0x4c957f2d

0801d08c <realloc>:
 801d08c:	4b02      	ldr	r3, [pc, #8]	@ (801d098 <realloc+0xc>)
 801d08e:	460a      	mov	r2, r1
 801d090:	4601      	mov	r1, r0
 801d092:	6818      	ldr	r0, [r3, #0]
 801d094:	f000 b802 	b.w	801d09c <_realloc_r>
 801d098:	20000dd0 	.word	0x20000dd0

0801d09c <_realloc_r>:
 801d09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0a0:	4680      	mov	r8, r0
 801d0a2:	4615      	mov	r5, r2
 801d0a4:	460c      	mov	r4, r1
 801d0a6:	b921      	cbnz	r1, 801d0b2 <_realloc_r+0x16>
 801d0a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d0ac:	4611      	mov	r1, r2
 801d0ae:	f7ff bef5 	b.w	801ce9c <_malloc_r>
 801d0b2:	b92a      	cbnz	r2, 801d0c0 <_realloc_r+0x24>
 801d0b4:	f000 fc36 	bl	801d924 <_free_r>
 801d0b8:	2400      	movs	r4, #0
 801d0ba:	4620      	mov	r0, r4
 801d0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0c0:	f000 fc7a 	bl	801d9b8 <_malloc_usable_size_r>
 801d0c4:	4285      	cmp	r5, r0
 801d0c6:	4606      	mov	r6, r0
 801d0c8:	d802      	bhi.n	801d0d0 <_realloc_r+0x34>
 801d0ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801d0ce:	d8f4      	bhi.n	801d0ba <_realloc_r+0x1e>
 801d0d0:	4629      	mov	r1, r5
 801d0d2:	4640      	mov	r0, r8
 801d0d4:	f7ff fee2 	bl	801ce9c <_malloc_r>
 801d0d8:	4607      	mov	r7, r0
 801d0da:	2800      	cmp	r0, #0
 801d0dc:	d0ec      	beq.n	801d0b8 <_realloc_r+0x1c>
 801d0de:	42b5      	cmp	r5, r6
 801d0e0:	462a      	mov	r2, r5
 801d0e2:	4621      	mov	r1, r4
 801d0e4:	bf28      	it	cs
 801d0e6:	4632      	movcs	r2, r6
 801d0e8:	f000 fbe3 	bl	801d8b2 <memcpy>
 801d0ec:	4621      	mov	r1, r4
 801d0ee:	4640      	mov	r0, r8
 801d0f0:	f000 fc18 	bl	801d924 <_free_r>
 801d0f4:	463c      	mov	r4, r7
 801d0f6:	e7e0      	b.n	801d0ba <_realloc_r+0x1e>

0801d0f8 <_strtoul_l.constprop.0>:
 801d0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d0fc:	4e34      	ldr	r6, [pc, #208]	@ (801d1d0 <_strtoul_l.constprop.0+0xd8>)
 801d0fe:	4686      	mov	lr, r0
 801d100:	460d      	mov	r5, r1
 801d102:	4628      	mov	r0, r5
 801d104:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d108:	5d37      	ldrb	r7, [r6, r4]
 801d10a:	f017 0708 	ands.w	r7, r7, #8
 801d10e:	d1f8      	bne.n	801d102 <_strtoul_l.constprop.0+0xa>
 801d110:	2c2d      	cmp	r4, #45	@ 0x2d
 801d112:	d12f      	bne.n	801d174 <_strtoul_l.constprop.0+0x7c>
 801d114:	782c      	ldrb	r4, [r5, #0]
 801d116:	2701      	movs	r7, #1
 801d118:	1c85      	adds	r5, r0, #2
 801d11a:	f033 0010 	bics.w	r0, r3, #16
 801d11e:	d109      	bne.n	801d134 <_strtoul_l.constprop.0+0x3c>
 801d120:	2c30      	cmp	r4, #48	@ 0x30
 801d122:	d12c      	bne.n	801d17e <_strtoul_l.constprop.0+0x86>
 801d124:	7828      	ldrb	r0, [r5, #0]
 801d126:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801d12a:	2858      	cmp	r0, #88	@ 0x58
 801d12c:	d127      	bne.n	801d17e <_strtoul_l.constprop.0+0x86>
 801d12e:	786c      	ldrb	r4, [r5, #1]
 801d130:	2310      	movs	r3, #16
 801d132:	3502      	adds	r5, #2
 801d134:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801d138:	2600      	movs	r6, #0
 801d13a:	fbb8 f8f3 	udiv	r8, r8, r3
 801d13e:	fb03 f908 	mul.w	r9, r3, r8
 801d142:	ea6f 0909 	mvn.w	r9, r9
 801d146:	4630      	mov	r0, r6
 801d148:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801d14c:	f1bc 0f09 	cmp.w	ip, #9
 801d150:	d81c      	bhi.n	801d18c <_strtoul_l.constprop.0+0x94>
 801d152:	4664      	mov	r4, ip
 801d154:	42a3      	cmp	r3, r4
 801d156:	dd2a      	ble.n	801d1ae <_strtoul_l.constprop.0+0xb6>
 801d158:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801d15c:	d007      	beq.n	801d16e <_strtoul_l.constprop.0+0x76>
 801d15e:	4580      	cmp	r8, r0
 801d160:	d322      	bcc.n	801d1a8 <_strtoul_l.constprop.0+0xb0>
 801d162:	d101      	bne.n	801d168 <_strtoul_l.constprop.0+0x70>
 801d164:	45a1      	cmp	r9, r4
 801d166:	db1f      	blt.n	801d1a8 <_strtoul_l.constprop.0+0xb0>
 801d168:	fb00 4003 	mla	r0, r0, r3, r4
 801d16c:	2601      	movs	r6, #1
 801d16e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d172:	e7e9      	b.n	801d148 <_strtoul_l.constprop.0+0x50>
 801d174:	2c2b      	cmp	r4, #43	@ 0x2b
 801d176:	bf04      	itt	eq
 801d178:	782c      	ldrbeq	r4, [r5, #0]
 801d17a:	1c85      	addeq	r5, r0, #2
 801d17c:	e7cd      	b.n	801d11a <_strtoul_l.constprop.0+0x22>
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d1d8      	bne.n	801d134 <_strtoul_l.constprop.0+0x3c>
 801d182:	2c30      	cmp	r4, #48	@ 0x30
 801d184:	bf0c      	ite	eq
 801d186:	2308      	moveq	r3, #8
 801d188:	230a      	movne	r3, #10
 801d18a:	e7d3      	b.n	801d134 <_strtoul_l.constprop.0+0x3c>
 801d18c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801d190:	f1bc 0f19 	cmp.w	ip, #25
 801d194:	d801      	bhi.n	801d19a <_strtoul_l.constprop.0+0xa2>
 801d196:	3c37      	subs	r4, #55	@ 0x37
 801d198:	e7dc      	b.n	801d154 <_strtoul_l.constprop.0+0x5c>
 801d19a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801d19e:	f1bc 0f19 	cmp.w	ip, #25
 801d1a2:	d804      	bhi.n	801d1ae <_strtoul_l.constprop.0+0xb6>
 801d1a4:	3c57      	subs	r4, #87	@ 0x57
 801d1a6:	e7d5      	b.n	801d154 <_strtoul_l.constprop.0+0x5c>
 801d1a8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801d1ac:	e7df      	b.n	801d16e <_strtoul_l.constprop.0+0x76>
 801d1ae:	1c73      	adds	r3, r6, #1
 801d1b0:	d106      	bne.n	801d1c0 <_strtoul_l.constprop.0+0xc8>
 801d1b2:	2322      	movs	r3, #34	@ 0x22
 801d1b4:	f8ce 3000 	str.w	r3, [lr]
 801d1b8:	4630      	mov	r0, r6
 801d1ba:	b932      	cbnz	r2, 801d1ca <_strtoul_l.constprop.0+0xd2>
 801d1bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d1c0:	b107      	cbz	r7, 801d1c4 <_strtoul_l.constprop.0+0xcc>
 801d1c2:	4240      	negs	r0, r0
 801d1c4:	2a00      	cmp	r2, #0
 801d1c6:	d0f9      	beq.n	801d1bc <_strtoul_l.constprop.0+0xc4>
 801d1c8:	b106      	cbz	r6, 801d1cc <_strtoul_l.constprop.0+0xd4>
 801d1ca:	1e69      	subs	r1, r5, #1
 801d1cc:	6011      	str	r1, [r2, #0]
 801d1ce:	e7f5      	b.n	801d1bc <_strtoul_l.constprop.0+0xc4>
 801d1d0:	08020c5e 	.word	0x08020c5e

0801d1d4 <strtoul>:
 801d1d4:	4613      	mov	r3, r2
 801d1d6:	460a      	mov	r2, r1
 801d1d8:	4601      	mov	r1, r0
 801d1da:	4802      	ldr	r0, [pc, #8]	@ (801d1e4 <strtoul+0x10>)
 801d1dc:	6800      	ldr	r0, [r0, #0]
 801d1de:	f7ff bf8b 	b.w	801d0f8 <_strtoul_l.constprop.0>
 801d1e2:	bf00      	nop
 801d1e4:	20000dd0 	.word	0x20000dd0

0801d1e8 <std>:
 801d1e8:	2300      	movs	r3, #0
 801d1ea:	b510      	push	{r4, lr}
 801d1ec:	4604      	mov	r4, r0
 801d1ee:	e9c0 3300 	strd	r3, r3, [r0]
 801d1f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d1f6:	6083      	str	r3, [r0, #8]
 801d1f8:	8181      	strh	r1, [r0, #12]
 801d1fa:	6643      	str	r3, [r0, #100]	@ 0x64
 801d1fc:	81c2      	strh	r2, [r0, #14]
 801d1fe:	6183      	str	r3, [r0, #24]
 801d200:	4619      	mov	r1, r3
 801d202:	2208      	movs	r2, #8
 801d204:	305c      	adds	r0, #92	@ 0x5c
 801d206:	f000 fa8b 	bl	801d720 <memset>
 801d20a:	4b0d      	ldr	r3, [pc, #52]	@ (801d240 <std+0x58>)
 801d20c:	6263      	str	r3, [r4, #36]	@ 0x24
 801d20e:	4b0d      	ldr	r3, [pc, #52]	@ (801d244 <std+0x5c>)
 801d210:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d212:	4b0d      	ldr	r3, [pc, #52]	@ (801d248 <std+0x60>)
 801d214:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d216:	4b0d      	ldr	r3, [pc, #52]	@ (801d24c <std+0x64>)
 801d218:	6323      	str	r3, [r4, #48]	@ 0x30
 801d21a:	4b0d      	ldr	r3, [pc, #52]	@ (801d250 <std+0x68>)
 801d21c:	6224      	str	r4, [r4, #32]
 801d21e:	429c      	cmp	r4, r3
 801d220:	d006      	beq.n	801d230 <std+0x48>
 801d222:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d226:	4294      	cmp	r4, r2
 801d228:	d002      	beq.n	801d230 <std+0x48>
 801d22a:	33d0      	adds	r3, #208	@ 0xd0
 801d22c:	429c      	cmp	r4, r3
 801d22e:	d105      	bne.n	801d23c <std+0x54>
 801d230:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d238:	f000 bb30 	b.w	801d89c <__retarget_lock_init_recursive>
 801d23c:	bd10      	pop	{r4, pc}
 801d23e:	bf00      	nop
 801d240:	0801d4ad 	.word	0x0801d4ad
 801d244:	0801d4cf 	.word	0x0801d4cf
 801d248:	0801d507 	.word	0x0801d507
 801d24c:	0801d52b 	.word	0x0801d52b
 801d250:	2000c4e0 	.word	0x2000c4e0

0801d254 <stdio_exit_handler>:
 801d254:	4a02      	ldr	r2, [pc, #8]	@ (801d260 <stdio_exit_handler+0xc>)
 801d256:	4903      	ldr	r1, [pc, #12]	@ (801d264 <stdio_exit_handler+0x10>)
 801d258:	4803      	ldr	r0, [pc, #12]	@ (801d268 <stdio_exit_handler+0x14>)
 801d25a:	f000 b869 	b.w	801d330 <_fwalk_sglue>
 801d25e:	bf00      	nop
 801d260:	20000dc4 	.word	0x20000dc4
 801d264:	0801e321 	.word	0x0801e321
 801d268:	20000dd4 	.word	0x20000dd4

0801d26c <cleanup_stdio>:
 801d26c:	6841      	ldr	r1, [r0, #4]
 801d26e:	4b0c      	ldr	r3, [pc, #48]	@ (801d2a0 <cleanup_stdio+0x34>)
 801d270:	4299      	cmp	r1, r3
 801d272:	b510      	push	{r4, lr}
 801d274:	4604      	mov	r4, r0
 801d276:	d001      	beq.n	801d27c <cleanup_stdio+0x10>
 801d278:	f001 f852 	bl	801e320 <_fflush_r>
 801d27c:	68a1      	ldr	r1, [r4, #8]
 801d27e:	4b09      	ldr	r3, [pc, #36]	@ (801d2a4 <cleanup_stdio+0x38>)
 801d280:	4299      	cmp	r1, r3
 801d282:	d002      	beq.n	801d28a <cleanup_stdio+0x1e>
 801d284:	4620      	mov	r0, r4
 801d286:	f001 f84b 	bl	801e320 <_fflush_r>
 801d28a:	68e1      	ldr	r1, [r4, #12]
 801d28c:	4b06      	ldr	r3, [pc, #24]	@ (801d2a8 <cleanup_stdio+0x3c>)
 801d28e:	4299      	cmp	r1, r3
 801d290:	d004      	beq.n	801d29c <cleanup_stdio+0x30>
 801d292:	4620      	mov	r0, r4
 801d294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d298:	f001 b842 	b.w	801e320 <_fflush_r>
 801d29c:	bd10      	pop	{r4, pc}
 801d29e:	bf00      	nop
 801d2a0:	2000c4e0 	.word	0x2000c4e0
 801d2a4:	2000c548 	.word	0x2000c548
 801d2a8:	2000c5b0 	.word	0x2000c5b0

0801d2ac <global_stdio_init.part.0>:
 801d2ac:	b510      	push	{r4, lr}
 801d2ae:	4b0b      	ldr	r3, [pc, #44]	@ (801d2dc <global_stdio_init.part.0+0x30>)
 801d2b0:	4c0b      	ldr	r4, [pc, #44]	@ (801d2e0 <global_stdio_init.part.0+0x34>)
 801d2b2:	4a0c      	ldr	r2, [pc, #48]	@ (801d2e4 <global_stdio_init.part.0+0x38>)
 801d2b4:	601a      	str	r2, [r3, #0]
 801d2b6:	4620      	mov	r0, r4
 801d2b8:	2200      	movs	r2, #0
 801d2ba:	2104      	movs	r1, #4
 801d2bc:	f7ff ff94 	bl	801d1e8 <std>
 801d2c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d2c4:	2201      	movs	r2, #1
 801d2c6:	2109      	movs	r1, #9
 801d2c8:	f7ff ff8e 	bl	801d1e8 <std>
 801d2cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d2d0:	2202      	movs	r2, #2
 801d2d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d2d6:	2112      	movs	r1, #18
 801d2d8:	f7ff bf86 	b.w	801d1e8 <std>
 801d2dc:	2000c618 	.word	0x2000c618
 801d2e0:	2000c4e0 	.word	0x2000c4e0
 801d2e4:	0801d255 	.word	0x0801d255

0801d2e8 <__sfp_lock_acquire>:
 801d2e8:	4801      	ldr	r0, [pc, #4]	@ (801d2f0 <__sfp_lock_acquire+0x8>)
 801d2ea:	f000 bad8 	b.w	801d89e <__retarget_lock_acquire_recursive>
 801d2ee:	bf00      	nop
 801d2f0:	2000c622 	.word	0x2000c622

0801d2f4 <__sfp_lock_release>:
 801d2f4:	4801      	ldr	r0, [pc, #4]	@ (801d2fc <__sfp_lock_release+0x8>)
 801d2f6:	f000 bad3 	b.w	801d8a0 <__retarget_lock_release_recursive>
 801d2fa:	bf00      	nop
 801d2fc:	2000c622 	.word	0x2000c622

0801d300 <__sinit>:
 801d300:	b510      	push	{r4, lr}
 801d302:	4604      	mov	r4, r0
 801d304:	f7ff fff0 	bl	801d2e8 <__sfp_lock_acquire>
 801d308:	6a23      	ldr	r3, [r4, #32]
 801d30a:	b11b      	cbz	r3, 801d314 <__sinit+0x14>
 801d30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d310:	f7ff bff0 	b.w	801d2f4 <__sfp_lock_release>
 801d314:	4b04      	ldr	r3, [pc, #16]	@ (801d328 <__sinit+0x28>)
 801d316:	6223      	str	r3, [r4, #32]
 801d318:	4b04      	ldr	r3, [pc, #16]	@ (801d32c <__sinit+0x2c>)
 801d31a:	681b      	ldr	r3, [r3, #0]
 801d31c:	2b00      	cmp	r3, #0
 801d31e:	d1f5      	bne.n	801d30c <__sinit+0xc>
 801d320:	f7ff ffc4 	bl	801d2ac <global_stdio_init.part.0>
 801d324:	e7f2      	b.n	801d30c <__sinit+0xc>
 801d326:	bf00      	nop
 801d328:	0801d26d 	.word	0x0801d26d
 801d32c:	2000c618 	.word	0x2000c618

0801d330 <_fwalk_sglue>:
 801d330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d334:	4607      	mov	r7, r0
 801d336:	4688      	mov	r8, r1
 801d338:	4614      	mov	r4, r2
 801d33a:	2600      	movs	r6, #0
 801d33c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d340:	f1b9 0901 	subs.w	r9, r9, #1
 801d344:	d505      	bpl.n	801d352 <_fwalk_sglue+0x22>
 801d346:	6824      	ldr	r4, [r4, #0]
 801d348:	2c00      	cmp	r4, #0
 801d34a:	d1f7      	bne.n	801d33c <_fwalk_sglue+0xc>
 801d34c:	4630      	mov	r0, r6
 801d34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d352:	89ab      	ldrh	r3, [r5, #12]
 801d354:	2b01      	cmp	r3, #1
 801d356:	d907      	bls.n	801d368 <_fwalk_sglue+0x38>
 801d358:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d35c:	3301      	adds	r3, #1
 801d35e:	d003      	beq.n	801d368 <_fwalk_sglue+0x38>
 801d360:	4629      	mov	r1, r5
 801d362:	4638      	mov	r0, r7
 801d364:	47c0      	blx	r8
 801d366:	4306      	orrs	r6, r0
 801d368:	3568      	adds	r5, #104	@ 0x68
 801d36a:	e7e9      	b.n	801d340 <_fwalk_sglue+0x10>

0801d36c <_fwrite_r>:
 801d36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d370:	9c08      	ldr	r4, [sp, #32]
 801d372:	468a      	mov	sl, r1
 801d374:	4690      	mov	r8, r2
 801d376:	fb02 f903 	mul.w	r9, r2, r3
 801d37a:	4606      	mov	r6, r0
 801d37c:	b118      	cbz	r0, 801d386 <_fwrite_r+0x1a>
 801d37e:	6a03      	ldr	r3, [r0, #32]
 801d380:	b90b      	cbnz	r3, 801d386 <_fwrite_r+0x1a>
 801d382:	f7ff ffbd 	bl	801d300 <__sinit>
 801d386:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d388:	07dd      	lsls	r5, r3, #31
 801d38a:	d405      	bmi.n	801d398 <_fwrite_r+0x2c>
 801d38c:	89a3      	ldrh	r3, [r4, #12]
 801d38e:	0598      	lsls	r0, r3, #22
 801d390:	d402      	bmi.n	801d398 <_fwrite_r+0x2c>
 801d392:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d394:	f000 fa83 	bl	801d89e <__retarget_lock_acquire_recursive>
 801d398:	89a3      	ldrh	r3, [r4, #12]
 801d39a:	0719      	lsls	r1, r3, #28
 801d39c:	d516      	bpl.n	801d3cc <_fwrite_r+0x60>
 801d39e:	6923      	ldr	r3, [r4, #16]
 801d3a0:	b1a3      	cbz	r3, 801d3cc <_fwrite_r+0x60>
 801d3a2:	2500      	movs	r5, #0
 801d3a4:	454d      	cmp	r5, r9
 801d3a6:	d01f      	beq.n	801d3e8 <_fwrite_r+0x7c>
 801d3a8:	68a7      	ldr	r7, [r4, #8]
 801d3aa:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801d3ae:	3f01      	subs	r7, #1
 801d3b0:	2f00      	cmp	r7, #0
 801d3b2:	60a7      	str	r7, [r4, #8]
 801d3b4:	da04      	bge.n	801d3c0 <_fwrite_r+0x54>
 801d3b6:	69a3      	ldr	r3, [r4, #24]
 801d3b8:	429f      	cmp	r7, r3
 801d3ba:	db0f      	blt.n	801d3dc <_fwrite_r+0x70>
 801d3bc:	290a      	cmp	r1, #10
 801d3be:	d00d      	beq.n	801d3dc <_fwrite_r+0x70>
 801d3c0:	6823      	ldr	r3, [r4, #0]
 801d3c2:	1c5a      	adds	r2, r3, #1
 801d3c4:	6022      	str	r2, [r4, #0]
 801d3c6:	7019      	strb	r1, [r3, #0]
 801d3c8:	3501      	adds	r5, #1
 801d3ca:	e7eb      	b.n	801d3a4 <_fwrite_r+0x38>
 801d3cc:	4621      	mov	r1, r4
 801d3ce:	4630      	mov	r0, r6
 801d3d0:	f000 f926 	bl	801d620 <__swsetup_r>
 801d3d4:	2800      	cmp	r0, #0
 801d3d6:	d0e4      	beq.n	801d3a2 <_fwrite_r+0x36>
 801d3d8:	2500      	movs	r5, #0
 801d3da:	e005      	b.n	801d3e8 <_fwrite_r+0x7c>
 801d3dc:	4622      	mov	r2, r4
 801d3de:	4630      	mov	r0, r6
 801d3e0:	f000 f8e0 	bl	801d5a4 <__swbuf_r>
 801d3e4:	3001      	adds	r0, #1
 801d3e6:	d1ef      	bne.n	801d3c8 <_fwrite_r+0x5c>
 801d3e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d3ea:	07da      	lsls	r2, r3, #31
 801d3ec:	d405      	bmi.n	801d3fa <_fwrite_r+0x8e>
 801d3ee:	89a3      	ldrh	r3, [r4, #12]
 801d3f0:	059b      	lsls	r3, r3, #22
 801d3f2:	d402      	bmi.n	801d3fa <_fwrite_r+0x8e>
 801d3f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d3f6:	f000 fa53 	bl	801d8a0 <__retarget_lock_release_recursive>
 801d3fa:	fbb5 f0f8 	udiv	r0, r5, r8
 801d3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801d404 <fwrite>:
 801d404:	b507      	push	{r0, r1, r2, lr}
 801d406:	9300      	str	r3, [sp, #0]
 801d408:	4613      	mov	r3, r2
 801d40a:	460a      	mov	r2, r1
 801d40c:	4601      	mov	r1, r0
 801d40e:	4803      	ldr	r0, [pc, #12]	@ (801d41c <fwrite+0x18>)
 801d410:	6800      	ldr	r0, [r0, #0]
 801d412:	f7ff ffab 	bl	801d36c <_fwrite_r>
 801d416:	b003      	add	sp, #12
 801d418:	f85d fb04 	ldr.w	pc, [sp], #4
 801d41c:	20000dd0 	.word	0x20000dd0

0801d420 <iprintf>:
 801d420:	b40f      	push	{r0, r1, r2, r3}
 801d422:	b507      	push	{r0, r1, r2, lr}
 801d424:	4906      	ldr	r1, [pc, #24]	@ (801d440 <iprintf+0x20>)
 801d426:	ab04      	add	r3, sp, #16
 801d428:	6808      	ldr	r0, [r1, #0]
 801d42a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d42e:	6881      	ldr	r1, [r0, #8]
 801d430:	9301      	str	r3, [sp, #4]
 801d432:	f000 fc4b 	bl	801dccc <_vfiprintf_r>
 801d436:	b003      	add	sp, #12
 801d438:	f85d eb04 	ldr.w	lr, [sp], #4
 801d43c:	b004      	add	sp, #16
 801d43e:	4770      	bx	lr
 801d440:	20000dd0 	.word	0x20000dd0

0801d444 <sniprintf>:
 801d444:	b40c      	push	{r2, r3}
 801d446:	b530      	push	{r4, r5, lr}
 801d448:	4b17      	ldr	r3, [pc, #92]	@ (801d4a8 <sniprintf+0x64>)
 801d44a:	1e0c      	subs	r4, r1, #0
 801d44c:	681d      	ldr	r5, [r3, #0]
 801d44e:	b09d      	sub	sp, #116	@ 0x74
 801d450:	da08      	bge.n	801d464 <sniprintf+0x20>
 801d452:	238b      	movs	r3, #139	@ 0x8b
 801d454:	602b      	str	r3, [r5, #0]
 801d456:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d45a:	b01d      	add	sp, #116	@ 0x74
 801d45c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d460:	b002      	add	sp, #8
 801d462:	4770      	bx	lr
 801d464:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d468:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d46c:	bf14      	ite	ne
 801d46e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801d472:	4623      	moveq	r3, r4
 801d474:	9304      	str	r3, [sp, #16]
 801d476:	9307      	str	r3, [sp, #28]
 801d478:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d47c:	9002      	str	r0, [sp, #8]
 801d47e:	9006      	str	r0, [sp, #24]
 801d480:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d484:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d486:	ab21      	add	r3, sp, #132	@ 0x84
 801d488:	a902      	add	r1, sp, #8
 801d48a:	4628      	mov	r0, r5
 801d48c:	9301      	str	r3, [sp, #4]
 801d48e:	f000 faf7 	bl	801da80 <_svfiprintf_r>
 801d492:	1c43      	adds	r3, r0, #1
 801d494:	bfbc      	itt	lt
 801d496:	238b      	movlt	r3, #139	@ 0x8b
 801d498:	602b      	strlt	r3, [r5, #0]
 801d49a:	2c00      	cmp	r4, #0
 801d49c:	d0dd      	beq.n	801d45a <sniprintf+0x16>
 801d49e:	9b02      	ldr	r3, [sp, #8]
 801d4a0:	2200      	movs	r2, #0
 801d4a2:	701a      	strb	r2, [r3, #0]
 801d4a4:	e7d9      	b.n	801d45a <sniprintf+0x16>
 801d4a6:	bf00      	nop
 801d4a8:	20000dd0 	.word	0x20000dd0

0801d4ac <__sread>:
 801d4ac:	b510      	push	{r4, lr}
 801d4ae:	460c      	mov	r4, r1
 801d4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4b4:	f000 f994 	bl	801d7e0 <_read_r>
 801d4b8:	2800      	cmp	r0, #0
 801d4ba:	bfab      	itete	ge
 801d4bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d4be:	89a3      	ldrhlt	r3, [r4, #12]
 801d4c0:	181b      	addge	r3, r3, r0
 801d4c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d4c6:	bfac      	ite	ge
 801d4c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d4ca:	81a3      	strhlt	r3, [r4, #12]
 801d4cc:	bd10      	pop	{r4, pc}

0801d4ce <__swrite>:
 801d4ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4d2:	461f      	mov	r7, r3
 801d4d4:	898b      	ldrh	r3, [r1, #12]
 801d4d6:	05db      	lsls	r3, r3, #23
 801d4d8:	4605      	mov	r5, r0
 801d4da:	460c      	mov	r4, r1
 801d4dc:	4616      	mov	r6, r2
 801d4de:	d505      	bpl.n	801d4ec <__swrite+0x1e>
 801d4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4e4:	2302      	movs	r3, #2
 801d4e6:	2200      	movs	r2, #0
 801d4e8:	f000 f968 	bl	801d7bc <_lseek_r>
 801d4ec:	89a3      	ldrh	r3, [r4, #12]
 801d4ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d4f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d4f6:	81a3      	strh	r3, [r4, #12]
 801d4f8:	4632      	mov	r2, r6
 801d4fa:	463b      	mov	r3, r7
 801d4fc:	4628      	mov	r0, r5
 801d4fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d502:	f000 b98f 	b.w	801d824 <_write_r>

0801d506 <__sseek>:
 801d506:	b510      	push	{r4, lr}
 801d508:	460c      	mov	r4, r1
 801d50a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d50e:	f000 f955 	bl	801d7bc <_lseek_r>
 801d512:	1c43      	adds	r3, r0, #1
 801d514:	89a3      	ldrh	r3, [r4, #12]
 801d516:	bf15      	itete	ne
 801d518:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d51a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d51e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d522:	81a3      	strheq	r3, [r4, #12]
 801d524:	bf18      	it	ne
 801d526:	81a3      	strhne	r3, [r4, #12]
 801d528:	bd10      	pop	{r4, pc}

0801d52a <__sclose>:
 801d52a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d52e:	f000 b935 	b.w	801d79c <_close_r>

0801d532 <_vsniprintf_r>:
 801d532:	b530      	push	{r4, r5, lr}
 801d534:	4614      	mov	r4, r2
 801d536:	2c00      	cmp	r4, #0
 801d538:	b09b      	sub	sp, #108	@ 0x6c
 801d53a:	4605      	mov	r5, r0
 801d53c:	461a      	mov	r2, r3
 801d53e:	da05      	bge.n	801d54c <_vsniprintf_r+0x1a>
 801d540:	238b      	movs	r3, #139	@ 0x8b
 801d542:	6003      	str	r3, [r0, #0]
 801d544:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d548:	b01b      	add	sp, #108	@ 0x6c
 801d54a:	bd30      	pop	{r4, r5, pc}
 801d54c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d550:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d554:	bf14      	ite	ne
 801d556:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801d55a:	4623      	moveq	r3, r4
 801d55c:	9302      	str	r3, [sp, #8]
 801d55e:	9305      	str	r3, [sp, #20]
 801d560:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d564:	9100      	str	r1, [sp, #0]
 801d566:	9104      	str	r1, [sp, #16]
 801d568:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d56c:	4669      	mov	r1, sp
 801d56e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d570:	f000 fa86 	bl	801da80 <_svfiprintf_r>
 801d574:	1c43      	adds	r3, r0, #1
 801d576:	bfbc      	itt	lt
 801d578:	238b      	movlt	r3, #139	@ 0x8b
 801d57a:	602b      	strlt	r3, [r5, #0]
 801d57c:	2c00      	cmp	r4, #0
 801d57e:	d0e3      	beq.n	801d548 <_vsniprintf_r+0x16>
 801d580:	9b00      	ldr	r3, [sp, #0]
 801d582:	2200      	movs	r2, #0
 801d584:	701a      	strb	r2, [r3, #0]
 801d586:	e7df      	b.n	801d548 <_vsniprintf_r+0x16>

0801d588 <vsniprintf>:
 801d588:	b507      	push	{r0, r1, r2, lr}
 801d58a:	9300      	str	r3, [sp, #0]
 801d58c:	4613      	mov	r3, r2
 801d58e:	460a      	mov	r2, r1
 801d590:	4601      	mov	r1, r0
 801d592:	4803      	ldr	r0, [pc, #12]	@ (801d5a0 <vsniprintf+0x18>)
 801d594:	6800      	ldr	r0, [r0, #0]
 801d596:	f7ff ffcc 	bl	801d532 <_vsniprintf_r>
 801d59a:	b003      	add	sp, #12
 801d59c:	f85d fb04 	ldr.w	pc, [sp], #4
 801d5a0:	20000dd0 	.word	0x20000dd0

0801d5a4 <__swbuf_r>:
 801d5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5a6:	460e      	mov	r6, r1
 801d5a8:	4614      	mov	r4, r2
 801d5aa:	4605      	mov	r5, r0
 801d5ac:	b118      	cbz	r0, 801d5b6 <__swbuf_r+0x12>
 801d5ae:	6a03      	ldr	r3, [r0, #32]
 801d5b0:	b90b      	cbnz	r3, 801d5b6 <__swbuf_r+0x12>
 801d5b2:	f7ff fea5 	bl	801d300 <__sinit>
 801d5b6:	69a3      	ldr	r3, [r4, #24]
 801d5b8:	60a3      	str	r3, [r4, #8]
 801d5ba:	89a3      	ldrh	r3, [r4, #12]
 801d5bc:	071a      	lsls	r2, r3, #28
 801d5be:	d501      	bpl.n	801d5c4 <__swbuf_r+0x20>
 801d5c0:	6923      	ldr	r3, [r4, #16]
 801d5c2:	b943      	cbnz	r3, 801d5d6 <__swbuf_r+0x32>
 801d5c4:	4621      	mov	r1, r4
 801d5c6:	4628      	mov	r0, r5
 801d5c8:	f000 f82a 	bl	801d620 <__swsetup_r>
 801d5cc:	b118      	cbz	r0, 801d5d6 <__swbuf_r+0x32>
 801d5ce:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801d5d2:	4638      	mov	r0, r7
 801d5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d5d6:	6823      	ldr	r3, [r4, #0]
 801d5d8:	6922      	ldr	r2, [r4, #16]
 801d5da:	1a98      	subs	r0, r3, r2
 801d5dc:	6963      	ldr	r3, [r4, #20]
 801d5de:	b2f6      	uxtb	r6, r6
 801d5e0:	4283      	cmp	r3, r0
 801d5e2:	4637      	mov	r7, r6
 801d5e4:	dc05      	bgt.n	801d5f2 <__swbuf_r+0x4e>
 801d5e6:	4621      	mov	r1, r4
 801d5e8:	4628      	mov	r0, r5
 801d5ea:	f000 fe99 	bl	801e320 <_fflush_r>
 801d5ee:	2800      	cmp	r0, #0
 801d5f0:	d1ed      	bne.n	801d5ce <__swbuf_r+0x2a>
 801d5f2:	68a3      	ldr	r3, [r4, #8]
 801d5f4:	3b01      	subs	r3, #1
 801d5f6:	60a3      	str	r3, [r4, #8]
 801d5f8:	6823      	ldr	r3, [r4, #0]
 801d5fa:	1c5a      	adds	r2, r3, #1
 801d5fc:	6022      	str	r2, [r4, #0]
 801d5fe:	701e      	strb	r6, [r3, #0]
 801d600:	6962      	ldr	r2, [r4, #20]
 801d602:	1c43      	adds	r3, r0, #1
 801d604:	429a      	cmp	r2, r3
 801d606:	d004      	beq.n	801d612 <__swbuf_r+0x6e>
 801d608:	89a3      	ldrh	r3, [r4, #12]
 801d60a:	07db      	lsls	r3, r3, #31
 801d60c:	d5e1      	bpl.n	801d5d2 <__swbuf_r+0x2e>
 801d60e:	2e0a      	cmp	r6, #10
 801d610:	d1df      	bne.n	801d5d2 <__swbuf_r+0x2e>
 801d612:	4621      	mov	r1, r4
 801d614:	4628      	mov	r0, r5
 801d616:	f000 fe83 	bl	801e320 <_fflush_r>
 801d61a:	2800      	cmp	r0, #0
 801d61c:	d0d9      	beq.n	801d5d2 <__swbuf_r+0x2e>
 801d61e:	e7d6      	b.n	801d5ce <__swbuf_r+0x2a>

0801d620 <__swsetup_r>:
 801d620:	b538      	push	{r3, r4, r5, lr}
 801d622:	4b29      	ldr	r3, [pc, #164]	@ (801d6c8 <__swsetup_r+0xa8>)
 801d624:	4605      	mov	r5, r0
 801d626:	6818      	ldr	r0, [r3, #0]
 801d628:	460c      	mov	r4, r1
 801d62a:	b118      	cbz	r0, 801d634 <__swsetup_r+0x14>
 801d62c:	6a03      	ldr	r3, [r0, #32]
 801d62e:	b90b      	cbnz	r3, 801d634 <__swsetup_r+0x14>
 801d630:	f7ff fe66 	bl	801d300 <__sinit>
 801d634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d638:	0719      	lsls	r1, r3, #28
 801d63a:	d422      	bmi.n	801d682 <__swsetup_r+0x62>
 801d63c:	06da      	lsls	r2, r3, #27
 801d63e:	d407      	bmi.n	801d650 <__swsetup_r+0x30>
 801d640:	2209      	movs	r2, #9
 801d642:	602a      	str	r2, [r5, #0]
 801d644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d648:	81a3      	strh	r3, [r4, #12]
 801d64a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d64e:	e033      	b.n	801d6b8 <__swsetup_r+0x98>
 801d650:	0758      	lsls	r0, r3, #29
 801d652:	d512      	bpl.n	801d67a <__swsetup_r+0x5a>
 801d654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d656:	b141      	cbz	r1, 801d66a <__swsetup_r+0x4a>
 801d658:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d65c:	4299      	cmp	r1, r3
 801d65e:	d002      	beq.n	801d666 <__swsetup_r+0x46>
 801d660:	4628      	mov	r0, r5
 801d662:	f000 f95f 	bl	801d924 <_free_r>
 801d666:	2300      	movs	r3, #0
 801d668:	6363      	str	r3, [r4, #52]	@ 0x34
 801d66a:	89a3      	ldrh	r3, [r4, #12]
 801d66c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d670:	81a3      	strh	r3, [r4, #12]
 801d672:	2300      	movs	r3, #0
 801d674:	6063      	str	r3, [r4, #4]
 801d676:	6923      	ldr	r3, [r4, #16]
 801d678:	6023      	str	r3, [r4, #0]
 801d67a:	89a3      	ldrh	r3, [r4, #12]
 801d67c:	f043 0308 	orr.w	r3, r3, #8
 801d680:	81a3      	strh	r3, [r4, #12]
 801d682:	6923      	ldr	r3, [r4, #16]
 801d684:	b94b      	cbnz	r3, 801d69a <__swsetup_r+0x7a>
 801d686:	89a3      	ldrh	r3, [r4, #12]
 801d688:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d68c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d690:	d003      	beq.n	801d69a <__swsetup_r+0x7a>
 801d692:	4621      	mov	r1, r4
 801d694:	4628      	mov	r0, r5
 801d696:	f000 fea3 	bl	801e3e0 <__smakebuf_r>
 801d69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d69e:	f013 0201 	ands.w	r2, r3, #1
 801d6a2:	d00a      	beq.n	801d6ba <__swsetup_r+0x9a>
 801d6a4:	2200      	movs	r2, #0
 801d6a6:	60a2      	str	r2, [r4, #8]
 801d6a8:	6962      	ldr	r2, [r4, #20]
 801d6aa:	4252      	negs	r2, r2
 801d6ac:	61a2      	str	r2, [r4, #24]
 801d6ae:	6922      	ldr	r2, [r4, #16]
 801d6b0:	b942      	cbnz	r2, 801d6c4 <__swsetup_r+0xa4>
 801d6b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d6b6:	d1c5      	bne.n	801d644 <__swsetup_r+0x24>
 801d6b8:	bd38      	pop	{r3, r4, r5, pc}
 801d6ba:	0799      	lsls	r1, r3, #30
 801d6bc:	bf58      	it	pl
 801d6be:	6962      	ldrpl	r2, [r4, #20]
 801d6c0:	60a2      	str	r2, [r4, #8]
 801d6c2:	e7f4      	b.n	801d6ae <__swsetup_r+0x8e>
 801d6c4:	2000      	movs	r0, #0
 801d6c6:	e7f7      	b.n	801d6b8 <__swsetup_r+0x98>
 801d6c8:	20000dd0 	.word	0x20000dd0

0801d6cc <memcmp>:
 801d6cc:	b510      	push	{r4, lr}
 801d6ce:	3901      	subs	r1, #1
 801d6d0:	4402      	add	r2, r0
 801d6d2:	4290      	cmp	r0, r2
 801d6d4:	d101      	bne.n	801d6da <memcmp+0xe>
 801d6d6:	2000      	movs	r0, #0
 801d6d8:	e005      	b.n	801d6e6 <memcmp+0x1a>
 801d6da:	7803      	ldrb	r3, [r0, #0]
 801d6dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d6e0:	42a3      	cmp	r3, r4
 801d6e2:	d001      	beq.n	801d6e8 <memcmp+0x1c>
 801d6e4:	1b18      	subs	r0, r3, r4
 801d6e6:	bd10      	pop	{r4, pc}
 801d6e8:	3001      	adds	r0, #1
 801d6ea:	e7f2      	b.n	801d6d2 <memcmp+0x6>

0801d6ec <memmove>:
 801d6ec:	4288      	cmp	r0, r1
 801d6ee:	b510      	push	{r4, lr}
 801d6f0:	eb01 0402 	add.w	r4, r1, r2
 801d6f4:	d902      	bls.n	801d6fc <memmove+0x10>
 801d6f6:	4284      	cmp	r4, r0
 801d6f8:	4623      	mov	r3, r4
 801d6fa:	d807      	bhi.n	801d70c <memmove+0x20>
 801d6fc:	1e43      	subs	r3, r0, #1
 801d6fe:	42a1      	cmp	r1, r4
 801d700:	d008      	beq.n	801d714 <memmove+0x28>
 801d702:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d706:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d70a:	e7f8      	b.n	801d6fe <memmove+0x12>
 801d70c:	4402      	add	r2, r0
 801d70e:	4601      	mov	r1, r0
 801d710:	428a      	cmp	r2, r1
 801d712:	d100      	bne.n	801d716 <memmove+0x2a>
 801d714:	bd10      	pop	{r4, pc}
 801d716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d71a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d71e:	e7f7      	b.n	801d710 <memmove+0x24>

0801d720 <memset>:
 801d720:	4402      	add	r2, r0
 801d722:	4603      	mov	r3, r0
 801d724:	4293      	cmp	r3, r2
 801d726:	d100      	bne.n	801d72a <memset+0xa>
 801d728:	4770      	bx	lr
 801d72a:	f803 1b01 	strb.w	r1, [r3], #1
 801d72e:	e7f9      	b.n	801d724 <memset+0x4>

0801d730 <strchr>:
 801d730:	b2c9      	uxtb	r1, r1
 801d732:	4603      	mov	r3, r0
 801d734:	4618      	mov	r0, r3
 801d736:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d73a:	b112      	cbz	r2, 801d742 <strchr+0x12>
 801d73c:	428a      	cmp	r2, r1
 801d73e:	d1f9      	bne.n	801d734 <strchr+0x4>
 801d740:	4770      	bx	lr
 801d742:	2900      	cmp	r1, #0
 801d744:	bf18      	it	ne
 801d746:	2000      	movne	r0, #0
 801d748:	4770      	bx	lr

0801d74a <strncmp>:
 801d74a:	b510      	push	{r4, lr}
 801d74c:	b16a      	cbz	r2, 801d76a <strncmp+0x20>
 801d74e:	3901      	subs	r1, #1
 801d750:	1884      	adds	r4, r0, r2
 801d752:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d756:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d75a:	429a      	cmp	r2, r3
 801d75c:	d103      	bne.n	801d766 <strncmp+0x1c>
 801d75e:	42a0      	cmp	r0, r4
 801d760:	d001      	beq.n	801d766 <strncmp+0x1c>
 801d762:	2a00      	cmp	r2, #0
 801d764:	d1f5      	bne.n	801d752 <strncmp+0x8>
 801d766:	1ad0      	subs	r0, r2, r3
 801d768:	bd10      	pop	{r4, pc}
 801d76a:	4610      	mov	r0, r2
 801d76c:	e7fc      	b.n	801d768 <strncmp+0x1e>

0801d76e <strstr>:
 801d76e:	780a      	ldrb	r2, [r1, #0]
 801d770:	b570      	push	{r4, r5, r6, lr}
 801d772:	b96a      	cbnz	r2, 801d790 <strstr+0x22>
 801d774:	bd70      	pop	{r4, r5, r6, pc}
 801d776:	429a      	cmp	r2, r3
 801d778:	d109      	bne.n	801d78e <strstr+0x20>
 801d77a:	460c      	mov	r4, r1
 801d77c:	4605      	mov	r5, r0
 801d77e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801d782:	2b00      	cmp	r3, #0
 801d784:	d0f6      	beq.n	801d774 <strstr+0x6>
 801d786:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801d78a:	429e      	cmp	r6, r3
 801d78c:	d0f7      	beq.n	801d77e <strstr+0x10>
 801d78e:	3001      	adds	r0, #1
 801d790:	7803      	ldrb	r3, [r0, #0]
 801d792:	2b00      	cmp	r3, #0
 801d794:	d1ef      	bne.n	801d776 <strstr+0x8>
 801d796:	4618      	mov	r0, r3
 801d798:	e7ec      	b.n	801d774 <strstr+0x6>
	...

0801d79c <_close_r>:
 801d79c:	b538      	push	{r3, r4, r5, lr}
 801d79e:	4d06      	ldr	r5, [pc, #24]	@ (801d7b8 <_close_r+0x1c>)
 801d7a0:	2300      	movs	r3, #0
 801d7a2:	4604      	mov	r4, r0
 801d7a4:	4608      	mov	r0, r1
 801d7a6:	602b      	str	r3, [r5, #0]
 801d7a8:	f7e6 f848 	bl	800383c <_close>
 801d7ac:	1c43      	adds	r3, r0, #1
 801d7ae:	d102      	bne.n	801d7b6 <_close_r+0x1a>
 801d7b0:	682b      	ldr	r3, [r5, #0]
 801d7b2:	b103      	cbz	r3, 801d7b6 <_close_r+0x1a>
 801d7b4:	6023      	str	r3, [r4, #0]
 801d7b6:	bd38      	pop	{r3, r4, r5, pc}
 801d7b8:	2000c61c 	.word	0x2000c61c

0801d7bc <_lseek_r>:
 801d7bc:	b538      	push	{r3, r4, r5, lr}
 801d7be:	4d07      	ldr	r5, [pc, #28]	@ (801d7dc <_lseek_r+0x20>)
 801d7c0:	4604      	mov	r4, r0
 801d7c2:	4608      	mov	r0, r1
 801d7c4:	4611      	mov	r1, r2
 801d7c6:	2200      	movs	r2, #0
 801d7c8:	602a      	str	r2, [r5, #0]
 801d7ca:	461a      	mov	r2, r3
 801d7cc:	f7e6 f85d 	bl	800388a <_lseek>
 801d7d0:	1c43      	adds	r3, r0, #1
 801d7d2:	d102      	bne.n	801d7da <_lseek_r+0x1e>
 801d7d4:	682b      	ldr	r3, [r5, #0]
 801d7d6:	b103      	cbz	r3, 801d7da <_lseek_r+0x1e>
 801d7d8:	6023      	str	r3, [r4, #0]
 801d7da:	bd38      	pop	{r3, r4, r5, pc}
 801d7dc:	2000c61c 	.word	0x2000c61c

0801d7e0 <_read_r>:
 801d7e0:	b538      	push	{r3, r4, r5, lr}
 801d7e2:	4d07      	ldr	r5, [pc, #28]	@ (801d800 <_read_r+0x20>)
 801d7e4:	4604      	mov	r4, r0
 801d7e6:	4608      	mov	r0, r1
 801d7e8:	4611      	mov	r1, r2
 801d7ea:	2200      	movs	r2, #0
 801d7ec:	602a      	str	r2, [r5, #0]
 801d7ee:	461a      	mov	r2, r3
 801d7f0:	f7e5 ffeb 	bl	80037ca <_read>
 801d7f4:	1c43      	adds	r3, r0, #1
 801d7f6:	d102      	bne.n	801d7fe <_read_r+0x1e>
 801d7f8:	682b      	ldr	r3, [r5, #0]
 801d7fa:	b103      	cbz	r3, 801d7fe <_read_r+0x1e>
 801d7fc:	6023      	str	r3, [r4, #0]
 801d7fe:	bd38      	pop	{r3, r4, r5, pc}
 801d800:	2000c61c 	.word	0x2000c61c

0801d804 <_sbrk_r>:
 801d804:	b538      	push	{r3, r4, r5, lr}
 801d806:	4d06      	ldr	r5, [pc, #24]	@ (801d820 <_sbrk_r+0x1c>)
 801d808:	2300      	movs	r3, #0
 801d80a:	4604      	mov	r4, r0
 801d80c:	4608      	mov	r0, r1
 801d80e:	602b      	str	r3, [r5, #0]
 801d810:	f7e6 f848 	bl	80038a4 <_sbrk>
 801d814:	1c43      	adds	r3, r0, #1
 801d816:	d102      	bne.n	801d81e <_sbrk_r+0x1a>
 801d818:	682b      	ldr	r3, [r5, #0]
 801d81a:	b103      	cbz	r3, 801d81e <_sbrk_r+0x1a>
 801d81c:	6023      	str	r3, [r4, #0]
 801d81e:	bd38      	pop	{r3, r4, r5, pc}
 801d820:	2000c61c 	.word	0x2000c61c

0801d824 <_write_r>:
 801d824:	b538      	push	{r3, r4, r5, lr}
 801d826:	4d07      	ldr	r5, [pc, #28]	@ (801d844 <_write_r+0x20>)
 801d828:	4604      	mov	r4, r0
 801d82a:	4608      	mov	r0, r1
 801d82c:	4611      	mov	r1, r2
 801d82e:	2200      	movs	r2, #0
 801d830:	602a      	str	r2, [r5, #0]
 801d832:	461a      	mov	r2, r3
 801d834:	f7e5 ffe6 	bl	8003804 <_write>
 801d838:	1c43      	adds	r3, r0, #1
 801d83a:	d102      	bne.n	801d842 <_write_r+0x1e>
 801d83c:	682b      	ldr	r3, [r5, #0]
 801d83e:	b103      	cbz	r3, 801d842 <_write_r+0x1e>
 801d840:	6023      	str	r3, [r4, #0]
 801d842:	bd38      	pop	{r3, r4, r5, pc}
 801d844:	2000c61c 	.word	0x2000c61c

0801d848 <__errno>:
 801d848:	4b01      	ldr	r3, [pc, #4]	@ (801d850 <__errno+0x8>)
 801d84a:	6818      	ldr	r0, [r3, #0]
 801d84c:	4770      	bx	lr
 801d84e:	bf00      	nop
 801d850:	20000dd0 	.word	0x20000dd0

0801d854 <__libc_init_array>:
 801d854:	b570      	push	{r4, r5, r6, lr}
 801d856:	4d0d      	ldr	r5, [pc, #52]	@ (801d88c <__libc_init_array+0x38>)
 801d858:	4c0d      	ldr	r4, [pc, #52]	@ (801d890 <__libc_init_array+0x3c>)
 801d85a:	1b64      	subs	r4, r4, r5
 801d85c:	10a4      	asrs	r4, r4, #2
 801d85e:	2600      	movs	r6, #0
 801d860:	42a6      	cmp	r6, r4
 801d862:	d109      	bne.n	801d878 <__libc_init_array+0x24>
 801d864:	4d0b      	ldr	r5, [pc, #44]	@ (801d894 <__libc_init_array+0x40>)
 801d866:	4c0c      	ldr	r4, [pc, #48]	@ (801d898 <__libc_init_array+0x44>)
 801d868:	f001 f9d4 	bl	801ec14 <_init>
 801d86c:	1b64      	subs	r4, r4, r5
 801d86e:	10a4      	asrs	r4, r4, #2
 801d870:	2600      	movs	r6, #0
 801d872:	42a6      	cmp	r6, r4
 801d874:	d105      	bne.n	801d882 <__libc_init_array+0x2e>
 801d876:	bd70      	pop	{r4, r5, r6, pc}
 801d878:	f855 3b04 	ldr.w	r3, [r5], #4
 801d87c:	4798      	blx	r3
 801d87e:	3601      	adds	r6, #1
 801d880:	e7ee      	b.n	801d860 <__libc_init_array+0xc>
 801d882:	f855 3b04 	ldr.w	r3, [r5], #4
 801d886:	4798      	blx	r3
 801d888:	3601      	adds	r6, #1
 801d88a:	e7f2      	b.n	801d872 <__libc_init_array+0x1e>
 801d88c:	08020e48 	.word	0x08020e48
 801d890:	08020e48 	.word	0x08020e48
 801d894:	08020e48 	.word	0x08020e48
 801d898:	08020e64 	.word	0x08020e64

0801d89c <__retarget_lock_init_recursive>:
 801d89c:	4770      	bx	lr

0801d89e <__retarget_lock_acquire_recursive>:
 801d89e:	4770      	bx	lr

0801d8a0 <__retarget_lock_release_recursive>:
 801d8a0:	4770      	bx	lr

0801d8a2 <strcpy>:
 801d8a2:	4603      	mov	r3, r0
 801d8a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d8a8:	f803 2b01 	strb.w	r2, [r3], #1
 801d8ac:	2a00      	cmp	r2, #0
 801d8ae:	d1f9      	bne.n	801d8a4 <strcpy+0x2>
 801d8b0:	4770      	bx	lr

0801d8b2 <memcpy>:
 801d8b2:	440a      	add	r2, r1
 801d8b4:	4291      	cmp	r1, r2
 801d8b6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801d8ba:	d100      	bne.n	801d8be <memcpy+0xc>
 801d8bc:	4770      	bx	lr
 801d8be:	b510      	push	{r4, lr}
 801d8c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d8c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d8c8:	4291      	cmp	r1, r2
 801d8ca:	d1f9      	bne.n	801d8c0 <memcpy+0xe>
 801d8cc:	bd10      	pop	{r4, pc}
	...

0801d8d0 <__assert_func>:
 801d8d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d8d2:	4614      	mov	r4, r2
 801d8d4:	461a      	mov	r2, r3
 801d8d6:	4b09      	ldr	r3, [pc, #36]	@ (801d8fc <__assert_func+0x2c>)
 801d8d8:	681b      	ldr	r3, [r3, #0]
 801d8da:	4605      	mov	r5, r0
 801d8dc:	68d8      	ldr	r0, [r3, #12]
 801d8de:	b954      	cbnz	r4, 801d8f6 <__assert_func+0x26>
 801d8e0:	4b07      	ldr	r3, [pc, #28]	@ (801d900 <__assert_func+0x30>)
 801d8e2:	461c      	mov	r4, r3
 801d8e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d8e8:	9100      	str	r1, [sp, #0]
 801d8ea:	462b      	mov	r3, r5
 801d8ec:	4905      	ldr	r1, [pc, #20]	@ (801d904 <__assert_func+0x34>)
 801d8ee:	f000 fd3f 	bl	801e370 <fiprintf>
 801d8f2:	f000 fdd3 	bl	801e49c <abort>
 801d8f6:	4b04      	ldr	r3, [pc, #16]	@ (801d908 <__assert_func+0x38>)
 801d8f8:	e7f4      	b.n	801d8e4 <__assert_func+0x14>
 801d8fa:	bf00      	nop
 801d8fc:	20000dd0 	.word	0x20000dd0
 801d900:	08020d99 	.word	0x08020d99
 801d904:	08020d6b 	.word	0x08020d6b
 801d908:	08020d5e 	.word	0x08020d5e

0801d90c <__env_lock>:
 801d90c:	4801      	ldr	r0, [pc, #4]	@ (801d914 <__env_lock+0x8>)
 801d90e:	f7ff bfc6 	b.w	801d89e <__retarget_lock_acquire_recursive>
 801d912:	bf00      	nop
 801d914:	2000c620 	.word	0x2000c620

0801d918 <__env_unlock>:
 801d918:	4801      	ldr	r0, [pc, #4]	@ (801d920 <__env_unlock+0x8>)
 801d91a:	f7ff bfc1 	b.w	801d8a0 <__retarget_lock_release_recursive>
 801d91e:	bf00      	nop
 801d920:	2000c620 	.word	0x2000c620

0801d924 <_free_r>:
 801d924:	b538      	push	{r3, r4, r5, lr}
 801d926:	4605      	mov	r5, r0
 801d928:	2900      	cmp	r1, #0
 801d92a:	d041      	beq.n	801d9b0 <_free_r+0x8c>
 801d92c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d930:	1f0c      	subs	r4, r1, #4
 801d932:	2b00      	cmp	r3, #0
 801d934:	bfb8      	it	lt
 801d936:	18e4      	addlt	r4, r4, r3
 801d938:	f7ff fb30 	bl	801cf9c <__malloc_lock>
 801d93c:	4a1d      	ldr	r2, [pc, #116]	@ (801d9b4 <_free_r+0x90>)
 801d93e:	6813      	ldr	r3, [r2, #0]
 801d940:	b933      	cbnz	r3, 801d950 <_free_r+0x2c>
 801d942:	6063      	str	r3, [r4, #4]
 801d944:	6014      	str	r4, [r2, #0]
 801d946:	4628      	mov	r0, r5
 801d948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d94c:	f7ff bb2c 	b.w	801cfa8 <__malloc_unlock>
 801d950:	42a3      	cmp	r3, r4
 801d952:	d908      	bls.n	801d966 <_free_r+0x42>
 801d954:	6820      	ldr	r0, [r4, #0]
 801d956:	1821      	adds	r1, r4, r0
 801d958:	428b      	cmp	r3, r1
 801d95a:	bf01      	itttt	eq
 801d95c:	6819      	ldreq	r1, [r3, #0]
 801d95e:	685b      	ldreq	r3, [r3, #4]
 801d960:	1809      	addeq	r1, r1, r0
 801d962:	6021      	streq	r1, [r4, #0]
 801d964:	e7ed      	b.n	801d942 <_free_r+0x1e>
 801d966:	461a      	mov	r2, r3
 801d968:	685b      	ldr	r3, [r3, #4]
 801d96a:	b10b      	cbz	r3, 801d970 <_free_r+0x4c>
 801d96c:	42a3      	cmp	r3, r4
 801d96e:	d9fa      	bls.n	801d966 <_free_r+0x42>
 801d970:	6811      	ldr	r1, [r2, #0]
 801d972:	1850      	adds	r0, r2, r1
 801d974:	42a0      	cmp	r0, r4
 801d976:	d10b      	bne.n	801d990 <_free_r+0x6c>
 801d978:	6820      	ldr	r0, [r4, #0]
 801d97a:	4401      	add	r1, r0
 801d97c:	1850      	adds	r0, r2, r1
 801d97e:	4283      	cmp	r3, r0
 801d980:	6011      	str	r1, [r2, #0]
 801d982:	d1e0      	bne.n	801d946 <_free_r+0x22>
 801d984:	6818      	ldr	r0, [r3, #0]
 801d986:	685b      	ldr	r3, [r3, #4]
 801d988:	6053      	str	r3, [r2, #4]
 801d98a:	4408      	add	r0, r1
 801d98c:	6010      	str	r0, [r2, #0]
 801d98e:	e7da      	b.n	801d946 <_free_r+0x22>
 801d990:	d902      	bls.n	801d998 <_free_r+0x74>
 801d992:	230c      	movs	r3, #12
 801d994:	602b      	str	r3, [r5, #0]
 801d996:	e7d6      	b.n	801d946 <_free_r+0x22>
 801d998:	6820      	ldr	r0, [r4, #0]
 801d99a:	1821      	adds	r1, r4, r0
 801d99c:	428b      	cmp	r3, r1
 801d99e:	bf04      	itt	eq
 801d9a0:	6819      	ldreq	r1, [r3, #0]
 801d9a2:	685b      	ldreq	r3, [r3, #4]
 801d9a4:	6063      	str	r3, [r4, #4]
 801d9a6:	bf04      	itt	eq
 801d9a8:	1809      	addeq	r1, r1, r0
 801d9aa:	6021      	streq	r1, [r4, #0]
 801d9ac:	6054      	str	r4, [r2, #4]
 801d9ae:	e7ca      	b.n	801d946 <_free_r+0x22>
 801d9b0:	bd38      	pop	{r3, r4, r5, pc}
 801d9b2:	bf00      	nop
 801d9b4:	2000c4dc 	.word	0x2000c4dc

0801d9b8 <_malloc_usable_size_r>:
 801d9b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d9bc:	1f18      	subs	r0, r3, #4
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	bfbc      	itt	lt
 801d9c2:	580b      	ldrlt	r3, [r1, r0]
 801d9c4:	18c0      	addlt	r0, r0, r3
 801d9c6:	4770      	bx	lr

0801d9c8 <__ssputs_r>:
 801d9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d9cc:	688e      	ldr	r6, [r1, #8]
 801d9ce:	461f      	mov	r7, r3
 801d9d0:	42be      	cmp	r6, r7
 801d9d2:	680b      	ldr	r3, [r1, #0]
 801d9d4:	4682      	mov	sl, r0
 801d9d6:	460c      	mov	r4, r1
 801d9d8:	4690      	mov	r8, r2
 801d9da:	d82d      	bhi.n	801da38 <__ssputs_r+0x70>
 801d9dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d9e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d9e4:	d026      	beq.n	801da34 <__ssputs_r+0x6c>
 801d9e6:	6965      	ldr	r5, [r4, #20]
 801d9e8:	6909      	ldr	r1, [r1, #16]
 801d9ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d9ee:	eba3 0901 	sub.w	r9, r3, r1
 801d9f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d9f6:	1c7b      	adds	r3, r7, #1
 801d9f8:	444b      	add	r3, r9
 801d9fa:	106d      	asrs	r5, r5, #1
 801d9fc:	429d      	cmp	r5, r3
 801d9fe:	bf38      	it	cc
 801da00:	461d      	movcc	r5, r3
 801da02:	0553      	lsls	r3, r2, #21
 801da04:	d527      	bpl.n	801da56 <__ssputs_r+0x8e>
 801da06:	4629      	mov	r1, r5
 801da08:	f7ff fa48 	bl	801ce9c <_malloc_r>
 801da0c:	4606      	mov	r6, r0
 801da0e:	b360      	cbz	r0, 801da6a <__ssputs_r+0xa2>
 801da10:	6921      	ldr	r1, [r4, #16]
 801da12:	464a      	mov	r2, r9
 801da14:	f7ff ff4d 	bl	801d8b2 <memcpy>
 801da18:	89a3      	ldrh	r3, [r4, #12]
 801da1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801da1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801da22:	81a3      	strh	r3, [r4, #12]
 801da24:	6126      	str	r6, [r4, #16]
 801da26:	6165      	str	r5, [r4, #20]
 801da28:	444e      	add	r6, r9
 801da2a:	eba5 0509 	sub.w	r5, r5, r9
 801da2e:	6026      	str	r6, [r4, #0]
 801da30:	60a5      	str	r5, [r4, #8]
 801da32:	463e      	mov	r6, r7
 801da34:	42be      	cmp	r6, r7
 801da36:	d900      	bls.n	801da3a <__ssputs_r+0x72>
 801da38:	463e      	mov	r6, r7
 801da3a:	6820      	ldr	r0, [r4, #0]
 801da3c:	4632      	mov	r2, r6
 801da3e:	4641      	mov	r1, r8
 801da40:	f7ff fe54 	bl	801d6ec <memmove>
 801da44:	68a3      	ldr	r3, [r4, #8]
 801da46:	1b9b      	subs	r3, r3, r6
 801da48:	60a3      	str	r3, [r4, #8]
 801da4a:	6823      	ldr	r3, [r4, #0]
 801da4c:	4433      	add	r3, r6
 801da4e:	6023      	str	r3, [r4, #0]
 801da50:	2000      	movs	r0, #0
 801da52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da56:	462a      	mov	r2, r5
 801da58:	f7ff fb20 	bl	801d09c <_realloc_r>
 801da5c:	4606      	mov	r6, r0
 801da5e:	2800      	cmp	r0, #0
 801da60:	d1e0      	bne.n	801da24 <__ssputs_r+0x5c>
 801da62:	6921      	ldr	r1, [r4, #16]
 801da64:	4650      	mov	r0, sl
 801da66:	f7ff ff5d 	bl	801d924 <_free_r>
 801da6a:	230c      	movs	r3, #12
 801da6c:	f8ca 3000 	str.w	r3, [sl]
 801da70:	89a3      	ldrh	r3, [r4, #12]
 801da72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da76:	81a3      	strh	r3, [r4, #12]
 801da78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801da7c:	e7e9      	b.n	801da52 <__ssputs_r+0x8a>
	...

0801da80 <_svfiprintf_r>:
 801da80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da84:	4698      	mov	r8, r3
 801da86:	898b      	ldrh	r3, [r1, #12]
 801da88:	061b      	lsls	r3, r3, #24
 801da8a:	b09d      	sub	sp, #116	@ 0x74
 801da8c:	4607      	mov	r7, r0
 801da8e:	460d      	mov	r5, r1
 801da90:	4614      	mov	r4, r2
 801da92:	d510      	bpl.n	801dab6 <_svfiprintf_r+0x36>
 801da94:	690b      	ldr	r3, [r1, #16]
 801da96:	b973      	cbnz	r3, 801dab6 <_svfiprintf_r+0x36>
 801da98:	2140      	movs	r1, #64	@ 0x40
 801da9a:	f7ff f9ff 	bl	801ce9c <_malloc_r>
 801da9e:	6028      	str	r0, [r5, #0]
 801daa0:	6128      	str	r0, [r5, #16]
 801daa2:	b930      	cbnz	r0, 801dab2 <_svfiprintf_r+0x32>
 801daa4:	230c      	movs	r3, #12
 801daa6:	603b      	str	r3, [r7, #0]
 801daa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801daac:	b01d      	add	sp, #116	@ 0x74
 801daae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dab2:	2340      	movs	r3, #64	@ 0x40
 801dab4:	616b      	str	r3, [r5, #20]
 801dab6:	2300      	movs	r3, #0
 801dab8:	9309      	str	r3, [sp, #36]	@ 0x24
 801daba:	2320      	movs	r3, #32
 801dabc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801dac0:	f8cd 800c 	str.w	r8, [sp, #12]
 801dac4:	2330      	movs	r3, #48	@ 0x30
 801dac6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801dc64 <_svfiprintf_r+0x1e4>
 801daca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801dace:	f04f 0901 	mov.w	r9, #1
 801dad2:	4623      	mov	r3, r4
 801dad4:	469a      	mov	sl, r3
 801dad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dada:	b10a      	cbz	r2, 801dae0 <_svfiprintf_r+0x60>
 801dadc:	2a25      	cmp	r2, #37	@ 0x25
 801dade:	d1f9      	bne.n	801dad4 <_svfiprintf_r+0x54>
 801dae0:	ebba 0b04 	subs.w	fp, sl, r4
 801dae4:	d00b      	beq.n	801dafe <_svfiprintf_r+0x7e>
 801dae6:	465b      	mov	r3, fp
 801dae8:	4622      	mov	r2, r4
 801daea:	4629      	mov	r1, r5
 801daec:	4638      	mov	r0, r7
 801daee:	f7ff ff6b 	bl	801d9c8 <__ssputs_r>
 801daf2:	3001      	adds	r0, #1
 801daf4:	f000 80a7 	beq.w	801dc46 <_svfiprintf_r+0x1c6>
 801daf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dafa:	445a      	add	r2, fp
 801dafc:	9209      	str	r2, [sp, #36]	@ 0x24
 801dafe:	f89a 3000 	ldrb.w	r3, [sl]
 801db02:	2b00      	cmp	r3, #0
 801db04:	f000 809f 	beq.w	801dc46 <_svfiprintf_r+0x1c6>
 801db08:	2300      	movs	r3, #0
 801db0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801db0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801db12:	f10a 0a01 	add.w	sl, sl, #1
 801db16:	9304      	str	r3, [sp, #16]
 801db18:	9307      	str	r3, [sp, #28]
 801db1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801db1e:	931a      	str	r3, [sp, #104]	@ 0x68
 801db20:	4654      	mov	r4, sl
 801db22:	2205      	movs	r2, #5
 801db24:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db28:	484e      	ldr	r0, [pc, #312]	@ (801dc64 <_svfiprintf_r+0x1e4>)
 801db2a:	f7e2 fb91 	bl	8000250 <memchr>
 801db2e:	9a04      	ldr	r2, [sp, #16]
 801db30:	b9d8      	cbnz	r0, 801db6a <_svfiprintf_r+0xea>
 801db32:	06d0      	lsls	r0, r2, #27
 801db34:	bf44      	itt	mi
 801db36:	2320      	movmi	r3, #32
 801db38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801db3c:	0711      	lsls	r1, r2, #28
 801db3e:	bf44      	itt	mi
 801db40:	232b      	movmi	r3, #43	@ 0x2b
 801db42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801db46:	f89a 3000 	ldrb.w	r3, [sl]
 801db4a:	2b2a      	cmp	r3, #42	@ 0x2a
 801db4c:	d015      	beq.n	801db7a <_svfiprintf_r+0xfa>
 801db4e:	9a07      	ldr	r2, [sp, #28]
 801db50:	4654      	mov	r4, sl
 801db52:	2000      	movs	r0, #0
 801db54:	f04f 0c0a 	mov.w	ip, #10
 801db58:	4621      	mov	r1, r4
 801db5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801db5e:	3b30      	subs	r3, #48	@ 0x30
 801db60:	2b09      	cmp	r3, #9
 801db62:	d94b      	bls.n	801dbfc <_svfiprintf_r+0x17c>
 801db64:	b1b0      	cbz	r0, 801db94 <_svfiprintf_r+0x114>
 801db66:	9207      	str	r2, [sp, #28]
 801db68:	e014      	b.n	801db94 <_svfiprintf_r+0x114>
 801db6a:	eba0 0308 	sub.w	r3, r0, r8
 801db6e:	fa09 f303 	lsl.w	r3, r9, r3
 801db72:	4313      	orrs	r3, r2
 801db74:	9304      	str	r3, [sp, #16]
 801db76:	46a2      	mov	sl, r4
 801db78:	e7d2      	b.n	801db20 <_svfiprintf_r+0xa0>
 801db7a:	9b03      	ldr	r3, [sp, #12]
 801db7c:	1d19      	adds	r1, r3, #4
 801db7e:	681b      	ldr	r3, [r3, #0]
 801db80:	9103      	str	r1, [sp, #12]
 801db82:	2b00      	cmp	r3, #0
 801db84:	bfbb      	ittet	lt
 801db86:	425b      	neglt	r3, r3
 801db88:	f042 0202 	orrlt.w	r2, r2, #2
 801db8c:	9307      	strge	r3, [sp, #28]
 801db8e:	9307      	strlt	r3, [sp, #28]
 801db90:	bfb8      	it	lt
 801db92:	9204      	strlt	r2, [sp, #16]
 801db94:	7823      	ldrb	r3, [r4, #0]
 801db96:	2b2e      	cmp	r3, #46	@ 0x2e
 801db98:	d10a      	bne.n	801dbb0 <_svfiprintf_r+0x130>
 801db9a:	7863      	ldrb	r3, [r4, #1]
 801db9c:	2b2a      	cmp	r3, #42	@ 0x2a
 801db9e:	d132      	bne.n	801dc06 <_svfiprintf_r+0x186>
 801dba0:	9b03      	ldr	r3, [sp, #12]
 801dba2:	1d1a      	adds	r2, r3, #4
 801dba4:	681b      	ldr	r3, [r3, #0]
 801dba6:	9203      	str	r2, [sp, #12]
 801dba8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801dbac:	3402      	adds	r4, #2
 801dbae:	9305      	str	r3, [sp, #20]
 801dbb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801dc74 <_svfiprintf_r+0x1f4>
 801dbb4:	7821      	ldrb	r1, [r4, #0]
 801dbb6:	2203      	movs	r2, #3
 801dbb8:	4650      	mov	r0, sl
 801dbba:	f7e2 fb49 	bl	8000250 <memchr>
 801dbbe:	b138      	cbz	r0, 801dbd0 <_svfiprintf_r+0x150>
 801dbc0:	9b04      	ldr	r3, [sp, #16]
 801dbc2:	eba0 000a 	sub.w	r0, r0, sl
 801dbc6:	2240      	movs	r2, #64	@ 0x40
 801dbc8:	4082      	lsls	r2, r0
 801dbca:	4313      	orrs	r3, r2
 801dbcc:	3401      	adds	r4, #1
 801dbce:	9304      	str	r3, [sp, #16]
 801dbd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dbd4:	4824      	ldr	r0, [pc, #144]	@ (801dc68 <_svfiprintf_r+0x1e8>)
 801dbd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801dbda:	2206      	movs	r2, #6
 801dbdc:	f7e2 fb38 	bl	8000250 <memchr>
 801dbe0:	2800      	cmp	r0, #0
 801dbe2:	d036      	beq.n	801dc52 <_svfiprintf_r+0x1d2>
 801dbe4:	4b21      	ldr	r3, [pc, #132]	@ (801dc6c <_svfiprintf_r+0x1ec>)
 801dbe6:	bb1b      	cbnz	r3, 801dc30 <_svfiprintf_r+0x1b0>
 801dbe8:	9b03      	ldr	r3, [sp, #12]
 801dbea:	3307      	adds	r3, #7
 801dbec:	f023 0307 	bic.w	r3, r3, #7
 801dbf0:	3308      	adds	r3, #8
 801dbf2:	9303      	str	r3, [sp, #12]
 801dbf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dbf6:	4433      	add	r3, r6
 801dbf8:	9309      	str	r3, [sp, #36]	@ 0x24
 801dbfa:	e76a      	b.n	801dad2 <_svfiprintf_r+0x52>
 801dbfc:	fb0c 3202 	mla	r2, ip, r2, r3
 801dc00:	460c      	mov	r4, r1
 801dc02:	2001      	movs	r0, #1
 801dc04:	e7a8      	b.n	801db58 <_svfiprintf_r+0xd8>
 801dc06:	2300      	movs	r3, #0
 801dc08:	3401      	adds	r4, #1
 801dc0a:	9305      	str	r3, [sp, #20]
 801dc0c:	4619      	mov	r1, r3
 801dc0e:	f04f 0c0a 	mov.w	ip, #10
 801dc12:	4620      	mov	r0, r4
 801dc14:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dc18:	3a30      	subs	r2, #48	@ 0x30
 801dc1a:	2a09      	cmp	r2, #9
 801dc1c:	d903      	bls.n	801dc26 <_svfiprintf_r+0x1a6>
 801dc1e:	2b00      	cmp	r3, #0
 801dc20:	d0c6      	beq.n	801dbb0 <_svfiprintf_r+0x130>
 801dc22:	9105      	str	r1, [sp, #20]
 801dc24:	e7c4      	b.n	801dbb0 <_svfiprintf_r+0x130>
 801dc26:	fb0c 2101 	mla	r1, ip, r1, r2
 801dc2a:	4604      	mov	r4, r0
 801dc2c:	2301      	movs	r3, #1
 801dc2e:	e7f0      	b.n	801dc12 <_svfiprintf_r+0x192>
 801dc30:	ab03      	add	r3, sp, #12
 801dc32:	9300      	str	r3, [sp, #0]
 801dc34:	462a      	mov	r2, r5
 801dc36:	4b0e      	ldr	r3, [pc, #56]	@ (801dc70 <_svfiprintf_r+0x1f0>)
 801dc38:	a904      	add	r1, sp, #16
 801dc3a:	4638      	mov	r0, r7
 801dc3c:	f3af 8000 	nop.w
 801dc40:	1c42      	adds	r2, r0, #1
 801dc42:	4606      	mov	r6, r0
 801dc44:	d1d6      	bne.n	801dbf4 <_svfiprintf_r+0x174>
 801dc46:	89ab      	ldrh	r3, [r5, #12]
 801dc48:	065b      	lsls	r3, r3, #25
 801dc4a:	f53f af2d 	bmi.w	801daa8 <_svfiprintf_r+0x28>
 801dc4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dc50:	e72c      	b.n	801daac <_svfiprintf_r+0x2c>
 801dc52:	ab03      	add	r3, sp, #12
 801dc54:	9300      	str	r3, [sp, #0]
 801dc56:	462a      	mov	r2, r5
 801dc58:	4b05      	ldr	r3, [pc, #20]	@ (801dc70 <_svfiprintf_r+0x1f0>)
 801dc5a:	a904      	add	r1, sp, #16
 801dc5c:	4638      	mov	r0, r7
 801dc5e:	f000 f9bb 	bl	801dfd8 <_printf_i>
 801dc62:	e7ed      	b.n	801dc40 <_svfiprintf_r+0x1c0>
 801dc64:	08020d9a 	.word	0x08020d9a
 801dc68:	08020da4 	.word	0x08020da4
 801dc6c:	00000000 	.word	0x00000000
 801dc70:	0801d9c9 	.word	0x0801d9c9
 801dc74:	08020da0 	.word	0x08020da0

0801dc78 <__sfputc_r>:
 801dc78:	6893      	ldr	r3, [r2, #8]
 801dc7a:	3b01      	subs	r3, #1
 801dc7c:	2b00      	cmp	r3, #0
 801dc7e:	b410      	push	{r4}
 801dc80:	6093      	str	r3, [r2, #8]
 801dc82:	da08      	bge.n	801dc96 <__sfputc_r+0x1e>
 801dc84:	6994      	ldr	r4, [r2, #24]
 801dc86:	42a3      	cmp	r3, r4
 801dc88:	db01      	blt.n	801dc8e <__sfputc_r+0x16>
 801dc8a:	290a      	cmp	r1, #10
 801dc8c:	d103      	bne.n	801dc96 <__sfputc_r+0x1e>
 801dc8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dc92:	f7ff bc87 	b.w	801d5a4 <__swbuf_r>
 801dc96:	6813      	ldr	r3, [r2, #0]
 801dc98:	1c58      	adds	r0, r3, #1
 801dc9a:	6010      	str	r0, [r2, #0]
 801dc9c:	7019      	strb	r1, [r3, #0]
 801dc9e:	4608      	mov	r0, r1
 801dca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dca4:	4770      	bx	lr

0801dca6 <__sfputs_r>:
 801dca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dca8:	4606      	mov	r6, r0
 801dcaa:	460f      	mov	r7, r1
 801dcac:	4614      	mov	r4, r2
 801dcae:	18d5      	adds	r5, r2, r3
 801dcb0:	42ac      	cmp	r4, r5
 801dcb2:	d101      	bne.n	801dcb8 <__sfputs_r+0x12>
 801dcb4:	2000      	movs	r0, #0
 801dcb6:	e007      	b.n	801dcc8 <__sfputs_r+0x22>
 801dcb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dcbc:	463a      	mov	r2, r7
 801dcbe:	4630      	mov	r0, r6
 801dcc0:	f7ff ffda 	bl	801dc78 <__sfputc_r>
 801dcc4:	1c43      	adds	r3, r0, #1
 801dcc6:	d1f3      	bne.n	801dcb0 <__sfputs_r+0xa>
 801dcc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dccc <_vfiprintf_r>:
 801dccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcd0:	460d      	mov	r5, r1
 801dcd2:	b09d      	sub	sp, #116	@ 0x74
 801dcd4:	4614      	mov	r4, r2
 801dcd6:	4698      	mov	r8, r3
 801dcd8:	4606      	mov	r6, r0
 801dcda:	b118      	cbz	r0, 801dce4 <_vfiprintf_r+0x18>
 801dcdc:	6a03      	ldr	r3, [r0, #32]
 801dcde:	b90b      	cbnz	r3, 801dce4 <_vfiprintf_r+0x18>
 801dce0:	f7ff fb0e 	bl	801d300 <__sinit>
 801dce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dce6:	07d9      	lsls	r1, r3, #31
 801dce8:	d405      	bmi.n	801dcf6 <_vfiprintf_r+0x2a>
 801dcea:	89ab      	ldrh	r3, [r5, #12]
 801dcec:	059a      	lsls	r2, r3, #22
 801dcee:	d402      	bmi.n	801dcf6 <_vfiprintf_r+0x2a>
 801dcf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dcf2:	f7ff fdd4 	bl	801d89e <__retarget_lock_acquire_recursive>
 801dcf6:	89ab      	ldrh	r3, [r5, #12]
 801dcf8:	071b      	lsls	r3, r3, #28
 801dcfa:	d501      	bpl.n	801dd00 <_vfiprintf_r+0x34>
 801dcfc:	692b      	ldr	r3, [r5, #16]
 801dcfe:	b99b      	cbnz	r3, 801dd28 <_vfiprintf_r+0x5c>
 801dd00:	4629      	mov	r1, r5
 801dd02:	4630      	mov	r0, r6
 801dd04:	f7ff fc8c 	bl	801d620 <__swsetup_r>
 801dd08:	b170      	cbz	r0, 801dd28 <_vfiprintf_r+0x5c>
 801dd0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dd0c:	07dc      	lsls	r4, r3, #31
 801dd0e:	d504      	bpl.n	801dd1a <_vfiprintf_r+0x4e>
 801dd10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dd14:	b01d      	add	sp, #116	@ 0x74
 801dd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd1a:	89ab      	ldrh	r3, [r5, #12]
 801dd1c:	0598      	lsls	r0, r3, #22
 801dd1e:	d4f7      	bmi.n	801dd10 <_vfiprintf_r+0x44>
 801dd20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dd22:	f7ff fdbd 	bl	801d8a0 <__retarget_lock_release_recursive>
 801dd26:	e7f3      	b.n	801dd10 <_vfiprintf_r+0x44>
 801dd28:	2300      	movs	r3, #0
 801dd2a:	9309      	str	r3, [sp, #36]	@ 0x24
 801dd2c:	2320      	movs	r3, #32
 801dd2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801dd32:	f8cd 800c 	str.w	r8, [sp, #12]
 801dd36:	2330      	movs	r3, #48	@ 0x30
 801dd38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801dee8 <_vfiprintf_r+0x21c>
 801dd3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801dd40:	f04f 0901 	mov.w	r9, #1
 801dd44:	4623      	mov	r3, r4
 801dd46:	469a      	mov	sl, r3
 801dd48:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dd4c:	b10a      	cbz	r2, 801dd52 <_vfiprintf_r+0x86>
 801dd4e:	2a25      	cmp	r2, #37	@ 0x25
 801dd50:	d1f9      	bne.n	801dd46 <_vfiprintf_r+0x7a>
 801dd52:	ebba 0b04 	subs.w	fp, sl, r4
 801dd56:	d00b      	beq.n	801dd70 <_vfiprintf_r+0xa4>
 801dd58:	465b      	mov	r3, fp
 801dd5a:	4622      	mov	r2, r4
 801dd5c:	4629      	mov	r1, r5
 801dd5e:	4630      	mov	r0, r6
 801dd60:	f7ff ffa1 	bl	801dca6 <__sfputs_r>
 801dd64:	3001      	adds	r0, #1
 801dd66:	f000 80a7 	beq.w	801deb8 <_vfiprintf_r+0x1ec>
 801dd6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dd6c:	445a      	add	r2, fp
 801dd6e:	9209      	str	r2, [sp, #36]	@ 0x24
 801dd70:	f89a 3000 	ldrb.w	r3, [sl]
 801dd74:	2b00      	cmp	r3, #0
 801dd76:	f000 809f 	beq.w	801deb8 <_vfiprintf_r+0x1ec>
 801dd7a:	2300      	movs	r3, #0
 801dd7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801dd80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dd84:	f10a 0a01 	add.w	sl, sl, #1
 801dd88:	9304      	str	r3, [sp, #16]
 801dd8a:	9307      	str	r3, [sp, #28]
 801dd8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801dd90:	931a      	str	r3, [sp, #104]	@ 0x68
 801dd92:	4654      	mov	r4, sl
 801dd94:	2205      	movs	r2, #5
 801dd96:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dd9a:	4853      	ldr	r0, [pc, #332]	@ (801dee8 <_vfiprintf_r+0x21c>)
 801dd9c:	f7e2 fa58 	bl	8000250 <memchr>
 801dda0:	9a04      	ldr	r2, [sp, #16]
 801dda2:	b9d8      	cbnz	r0, 801dddc <_vfiprintf_r+0x110>
 801dda4:	06d1      	lsls	r1, r2, #27
 801dda6:	bf44      	itt	mi
 801dda8:	2320      	movmi	r3, #32
 801ddaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ddae:	0713      	lsls	r3, r2, #28
 801ddb0:	bf44      	itt	mi
 801ddb2:	232b      	movmi	r3, #43	@ 0x2b
 801ddb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ddb8:	f89a 3000 	ldrb.w	r3, [sl]
 801ddbc:	2b2a      	cmp	r3, #42	@ 0x2a
 801ddbe:	d015      	beq.n	801ddec <_vfiprintf_r+0x120>
 801ddc0:	9a07      	ldr	r2, [sp, #28]
 801ddc2:	4654      	mov	r4, sl
 801ddc4:	2000      	movs	r0, #0
 801ddc6:	f04f 0c0a 	mov.w	ip, #10
 801ddca:	4621      	mov	r1, r4
 801ddcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ddd0:	3b30      	subs	r3, #48	@ 0x30
 801ddd2:	2b09      	cmp	r3, #9
 801ddd4:	d94b      	bls.n	801de6e <_vfiprintf_r+0x1a2>
 801ddd6:	b1b0      	cbz	r0, 801de06 <_vfiprintf_r+0x13a>
 801ddd8:	9207      	str	r2, [sp, #28]
 801ddda:	e014      	b.n	801de06 <_vfiprintf_r+0x13a>
 801dddc:	eba0 0308 	sub.w	r3, r0, r8
 801dde0:	fa09 f303 	lsl.w	r3, r9, r3
 801dde4:	4313      	orrs	r3, r2
 801dde6:	9304      	str	r3, [sp, #16]
 801dde8:	46a2      	mov	sl, r4
 801ddea:	e7d2      	b.n	801dd92 <_vfiprintf_r+0xc6>
 801ddec:	9b03      	ldr	r3, [sp, #12]
 801ddee:	1d19      	adds	r1, r3, #4
 801ddf0:	681b      	ldr	r3, [r3, #0]
 801ddf2:	9103      	str	r1, [sp, #12]
 801ddf4:	2b00      	cmp	r3, #0
 801ddf6:	bfbb      	ittet	lt
 801ddf8:	425b      	neglt	r3, r3
 801ddfa:	f042 0202 	orrlt.w	r2, r2, #2
 801ddfe:	9307      	strge	r3, [sp, #28]
 801de00:	9307      	strlt	r3, [sp, #28]
 801de02:	bfb8      	it	lt
 801de04:	9204      	strlt	r2, [sp, #16]
 801de06:	7823      	ldrb	r3, [r4, #0]
 801de08:	2b2e      	cmp	r3, #46	@ 0x2e
 801de0a:	d10a      	bne.n	801de22 <_vfiprintf_r+0x156>
 801de0c:	7863      	ldrb	r3, [r4, #1]
 801de0e:	2b2a      	cmp	r3, #42	@ 0x2a
 801de10:	d132      	bne.n	801de78 <_vfiprintf_r+0x1ac>
 801de12:	9b03      	ldr	r3, [sp, #12]
 801de14:	1d1a      	adds	r2, r3, #4
 801de16:	681b      	ldr	r3, [r3, #0]
 801de18:	9203      	str	r2, [sp, #12]
 801de1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801de1e:	3402      	adds	r4, #2
 801de20:	9305      	str	r3, [sp, #20]
 801de22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801def8 <_vfiprintf_r+0x22c>
 801de26:	7821      	ldrb	r1, [r4, #0]
 801de28:	2203      	movs	r2, #3
 801de2a:	4650      	mov	r0, sl
 801de2c:	f7e2 fa10 	bl	8000250 <memchr>
 801de30:	b138      	cbz	r0, 801de42 <_vfiprintf_r+0x176>
 801de32:	9b04      	ldr	r3, [sp, #16]
 801de34:	eba0 000a 	sub.w	r0, r0, sl
 801de38:	2240      	movs	r2, #64	@ 0x40
 801de3a:	4082      	lsls	r2, r0
 801de3c:	4313      	orrs	r3, r2
 801de3e:	3401      	adds	r4, #1
 801de40:	9304      	str	r3, [sp, #16]
 801de42:	f814 1b01 	ldrb.w	r1, [r4], #1
 801de46:	4829      	ldr	r0, [pc, #164]	@ (801deec <_vfiprintf_r+0x220>)
 801de48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801de4c:	2206      	movs	r2, #6
 801de4e:	f7e2 f9ff 	bl	8000250 <memchr>
 801de52:	2800      	cmp	r0, #0
 801de54:	d03f      	beq.n	801ded6 <_vfiprintf_r+0x20a>
 801de56:	4b26      	ldr	r3, [pc, #152]	@ (801def0 <_vfiprintf_r+0x224>)
 801de58:	bb1b      	cbnz	r3, 801dea2 <_vfiprintf_r+0x1d6>
 801de5a:	9b03      	ldr	r3, [sp, #12]
 801de5c:	3307      	adds	r3, #7
 801de5e:	f023 0307 	bic.w	r3, r3, #7
 801de62:	3308      	adds	r3, #8
 801de64:	9303      	str	r3, [sp, #12]
 801de66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de68:	443b      	add	r3, r7
 801de6a:	9309      	str	r3, [sp, #36]	@ 0x24
 801de6c:	e76a      	b.n	801dd44 <_vfiprintf_r+0x78>
 801de6e:	fb0c 3202 	mla	r2, ip, r2, r3
 801de72:	460c      	mov	r4, r1
 801de74:	2001      	movs	r0, #1
 801de76:	e7a8      	b.n	801ddca <_vfiprintf_r+0xfe>
 801de78:	2300      	movs	r3, #0
 801de7a:	3401      	adds	r4, #1
 801de7c:	9305      	str	r3, [sp, #20]
 801de7e:	4619      	mov	r1, r3
 801de80:	f04f 0c0a 	mov.w	ip, #10
 801de84:	4620      	mov	r0, r4
 801de86:	f810 2b01 	ldrb.w	r2, [r0], #1
 801de8a:	3a30      	subs	r2, #48	@ 0x30
 801de8c:	2a09      	cmp	r2, #9
 801de8e:	d903      	bls.n	801de98 <_vfiprintf_r+0x1cc>
 801de90:	2b00      	cmp	r3, #0
 801de92:	d0c6      	beq.n	801de22 <_vfiprintf_r+0x156>
 801de94:	9105      	str	r1, [sp, #20]
 801de96:	e7c4      	b.n	801de22 <_vfiprintf_r+0x156>
 801de98:	fb0c 2101 	mla	r1, ip, r1, r2
 801de9c:	4604      	mov	r4, r0
 801de9e:	2301      	movs	r3, #1
 801dea0:	e7f0      	b.n	801de84 <_vfiprintf_r+0x1b8>
 801dea2:	ab03      	add	r3, sp, #12
 801dea4:	9300      	str	r3, [sp, #0]
 801dea6:	462a      	mov	r2, r5
 801dea8:	4b12      	ldr	r3, [pc, #72]	@ (801def4 <_vfiprintf_r+0x228>)
 801deaa:	a904      	add	r1, sp, #16
 801deac:	4630      	mov	r0, r6
 801deae:	f3af 8000 	nop.w
 801deb2:	4607      	mov	r7, r0
 801deb4:	1c78      	adds	r0, r7, #1
 801deb6:	d1d6      	bne.n	801de66 <_vfiprintf_r+0x19a>
 801deb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801deba:	07d9      	lsls	r1, r3, #31
 801debc:	d405      	bmi.n	801deca <_vfiprintf_r+0x1fe>
 801debe:	89ab      	ldrh	r3, [r5, #12]
 801dec0:	059a      	lsls	r2, r3, #22
 801dec2:	d402      	bmi.n	801deca <_vfiprintf_r+0x1fe>
 801dec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dec6:	f7ff fceb 	bl	801d8a0 <__retarget_lock_release_recursive>
 801deca:	89ab      	ldrh	r3, [r5, #12]
 801decc:	065b      	lsls	r3, r3, #25
 801dece:	f53f af1f 	bmi.w	801dd10 <_vfiprintf_r+0x44>
 801ded2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ded4:	e71e      	b.n	801dd14 <_vfiprintf_r+0x48>
 801ded6:	ab03      	add	r3, sp, #12
 801ded8:	9300      	str	r3, [sp, #0]
 801deda:	462a      	mov	r2, r5
 801dedc:	4b05      	ldr	r3, [pc, #20]	@ (801def4 <_vfiprintf_r+0x228>)
 801dede:	a904      	add	r1, sp, #16
 801dee0:	4630      	mov	r0, r6
 801dee2:	f000 f879 	bl	801dfd8 <_printf_i>
 801dee6:	e7e4      	b.n	801deb2 <_vfiprintf_r+0x1e6>
 801dee8:	08020d9a 	.word	0x08020d9a
 801deec:	08020da4 	.word	0x08020da4
 801def0:	00000000 	.word	0x00000000
 801def4:	0801dca7 	.word	0x0801dca7
 801def8:	08020da0 	.word	0x08020da0

0801defc <_printf_common>:
 801defc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df00:	4616      	mov	r6, r2
 801df02:	4698      	mov	r8, r3
 801df04:	688a      	ldr	r2, [r1, #8]
 801df06:	690b      	ldr	r3, [r1, #16]
 801df08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801df0c:	4293      	cmp	r3, r2
 801df0e:	bfb8      	it	lt
 801df10:	4613      	movlt	r3, r2
 801df12:	6033      	str	r3, [r6, #0]
 801df14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801df18:	4607      	mov	r7, r0
 801df1a:	460c      	mov	r4, r1
 801df1c:	b10a      	cbz	r2, 801df22 <_printf_common+0x26>
 801df1e:	3301      	adds	r3, #1
 801df20:	6033      	str	r3, [r6, #0]
 801df22:	6823      	ldr	r3, [r4, #0]
 801df24:	0699      	lsls	r1, r3, #26
 801df26:	bf42      	ittt	mi
 801df28:	6833      	ldrmi	r3, [r6, #0]
 801df2a:	3302      	addmi	r3, #2
 801df2c:	6033      	strmi	r3, [r6, #0]
 801df2e:	6825      	ldr	r5, [r4, #0]
 801df30:	f015 0506 	ands.w	r5, r5, #6
 801df34:	d106      	bne.n	801df44 <_printf_common+0x48>
 801df36:	f104 0a19 	add.w	sl, r4, #25
 801df3a:	68e3      	ldr	r3, [r4, #12]
 801df3c:	6832      	ldr	r2, [r6, #0]
 801df3e:	1a9b      	subs	r3, r3, r2
 801df40:	42ab      	cmp	r3, r5
 801df42:	dc26      	bgt.n	801df92 <_printf_common+0x96>
 801df44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801df48:	6822      	ldr	r2, [r4, #0]
 801df4a:	3b00      	subs	r3, #0
 801df4c:	bf18      	it	ne
 801df4e:	2301      	movne	r3, #1
 801df50:	0692      	lsls	r2, r2, #26
 801df52:	d42b      	bmi.n	801dfac <_printf_common+0xb0>
 801df54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801df58:	4641      	mov	r1, r8
 801df5a:	4638      	mov	r0, r7
 801df5c:	47c8      	blx	r9
 801df5e:	3001      	adds	r0, #1
 801df60:	d01e      	beq.n	801dfa0 <_printf_common+0xa4>
 801df62:	6823      	ldr	r3, [r4, #0]
 801df64:	6922      	ldr	r2, [r4, #16]
 801df66:	f003 0306 	and.w	r3, r3, #6
 801df6a:	2b04      	cmp	r3, #4
 801df6c:	bf02      	ittt	eq
 801df6e:	68e5      	ldreq	r5, [r4, #12]
 801df70:	6833      	ldreq	r3, [r6, #0]
 801df72:	1aed      	subeq	r5, r5, r3
 801df74:	68a3      	ldr	r3, [r4, #8]
 801df76:	bf0c      	ite	eq
 801df78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801df7c:	2500      	movne	r5, #0
 801df7e:	4293      	cmp	r3, r2
 801df80:	bfc4      	itt	gt
 801df82:	1a9b      	subgt	r3, r3, r2
 801df84:	18ed      	addgt	r5, r5, r3
 801df86:	2600      	movs	r6, #0
 801df88:	341a      	adds	r4, #26
 801df8a:	42b5      	cmp	r5, r6
 801df8c:	d11a      	bne.n	801dfc4 <_printf_common+0xc8>
 801df8e:	2000      	movs	r0, #0
 801df90:	e008      	b.n	801dfa4 <_printf_common+0xa8>
 801df92:	2301      	movs	r3, #1
 801df94:	4652      	mov	r2, sl
 801df96:	4641      	mov	r1, r8
 801df98:	4638      	mov	r0, r7
 801df9a:	47c8      	blx	r9
 801df9c:	3001      	adds	r0, #1
 801df9e:	d103      	bne.n	801dfa8 <_printf_common+0xac>
 801dfa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dfa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dfa8:	3501      	adds	r5, #1
 801dfaa:	e7c6      	b.n	801df3a <_printf_common+0x3e>
 801dfac:	18e1      	adds	r1, r4, r3
 801dfae:	1c5a      	adds	r2, r3, #1
 801dfb0:	2030      	movs	r0, #48	@ 0x30
 801dfb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801dfb6:	4422      	add	r2, r4
 801dfb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801dfbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801dfc0:	3302      	adds	r3, #2
 801dfc2:	e7c7      	b.n	801df54 <_printf_common+0x58>
 801dfc4:	2301      	movs	r3, #1
 801dfc6:	4622      	mov	r2, r4
 801dfc8:	4641      	mov	r1, r8
 801dfca:	4638      	mov	r0, r7
 801dfcc:	47c8      	blx	r9
 801dfce:	3001      	adds	r0, #1
 801dfd0:	d0e6      	beq.n	801dfa0 <_printf_common+0xa4>
 801dfd2:	3601      	adds	r6, #1
 801dfd4:	e7d9      	b.n	801df8a <_printf_common+0x8e>
	...

0801dfd8 <_printf_i>:
 801dfd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dfdc:	7e0f      	ldrb	r7, [r1, #24]
 801dfde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801dfe0:	2f78      	cmp	r7, #120	@ 0x78
 801dfe2:	4691      	mov	r9, r2
 801dfe4:	4680      	mov	r8, r0
 801dfe6:	460c      	mov	r4, r1
 801dfe8:	469a      	mov	sl, r3
 801dfea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801dfee:	d807      	bhi.n	801e000 <_printf_i+0x28>
 801dff0:	2f62      	cmp	r7, #98	@ 0x62
 801dff2:	d80a      	bhi.n	801e00a <_printf_i+0x32>
 801dff4:	2f00      	cmp	r7, #0
 801dff6:	f000 80d2 	beq.w	801e19e <_printf_i+0x1c6>
 801dffa:	2f58      	cmp	r7, #88	@ 0x58
 801dffc:	f000 80b9 	beq.w	801e172 <_printf_i+0x19a>
 801e000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e004:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e008:	e03a      	b.n	801e080 <_printf_i+0xa8>
 801e00a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e00e:	2b15      	cmp	r3, #21
 801e010:	d8f6      	bhi.n	801e000 <_printf_i+0x28>
 801e012:	a101      	add	r1, pc, #4	@ (adr r1, 801e018 <_printf_i+0x40>)
 801e014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e018:	0801e071 	.word	0x0801e071
 801e01c:	0801e085 	.word	0x0801e085
 801e020:	0801e001 	.word	0x0801e001
 801e024:	0801e001 	.word	0x0801e001
 801e028:	0801e001 	.word	0x0801e001
 801e02c:	0801e001 	.word	0x0801e001
 801e030:	0801e085 	.word	0x0801e085
 801e034:	0801e001 	.word	0x0801e001
 801e038:	0801e001 	.word	0x0801e001
 801e03c:	0801e001 	.word	0x0801e001
 801e040:	0801e001 	.word	0x0801e001
 801e044:	0801e185 	.word	0x0801e185
 801e048:	0801e0af 	.word	0x0801e0af
 801e04c:	0801e13f 	.word	0x0801e13f
 801e050:	0801e001 	.word	0x0801e001
 801e054:	0801e001 	.word	0x0801e001
 801e058:	0801e1a7 	.word	0x0801e1a7
 801e05c:	0801e001 	.word	0x0801e001
 801e060:	0801e0af 	.word	0x0801e0af
 801e064:	0801e001 	.word	0x0801e001
 801e068:	0801e001 	.word	0x0801e001
 801e06c:	0801e147 	.word	0x0801e147
 801e070:	6833      	ldr	r3, [r6, #0]
 801e072:	1d1a      	adds	r2, r3, #4
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	6032      	str	r2, [r6, #0]
 801e078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e07c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e080:	2301      	movs	r3, #1
 801e082:	e09d      	b.n	801e1c0 <_printf_i+0x1e8>
 801e084:	6833      	ldr	r3, [r6, #0]
 801e086:	6820      	ldr	r0, [r4, #0]
 801e088:	1d19      	adds	r1, r3, #4
 801e08a:	6031      	str	r1, [r6, #0]
 801e08c:	0606      	lsls	r6, r0, #24
 801e08e:	d501      	bpl.n	801e094 <_printf_i+0xbc>
 801e090:	681d      	ldr	r5, [r3, #0]
 801e092:	e003      	b.n	801e09c <_printf_i+0xc4>
 801e094:	0645      	lsls	r5, r0, #25
 801e096:	d5fb      	bpl.n	801e090 <_printf_i+0xb8>
 801e098:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e09c:	2d00      	cmp	r5, #0
 801e09e:	da03      	bge.n	801e0a8 <_printf_i+0xd0>
 801e0a0:	232d      	movs	r3, #45	@ 0x2d
 801e0a2:	426d      	negs	r5, r5
 801e0a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e0a8:	4859      	ldr	r0, [pc, #356]	@ (801e210 <_printf_i+0x238>)
 801e0aa:	230a      	movs	r3, #10
 801e0ac:	e011      	b.n	801e0d2 <_printf_i+0xfa>
 801e0ae:	6821      	ldr	r1, [r4, #0]
 801e0b0:	6833      	ldr	r3, [r6, #0]
 801e0b2:	0608      	lsls	r0, r1, #24
 801e0b4:	f853 5b04 	ldr.w	r5, [r3], #4
 801e0b8:	d402      	bmi.n	801e0c0 <_printf_i+0xe8>
 801e0ba:	0649      	lsls	r1, r1, #25
 801e0bc:	bf48      	it	mi
 801e0be:	b2ad      	uxthmi	r5, r5
 801e0c0:	2f6f      	cmp	r7, #111	@ 0x6f
 801e0c2:	4853      	ldr	r0, [pc, #332]	@ (801e210 <_printf_i+0x238>)
 801e0c4:	6033      	str	r3, [r6, #0]
 801e0c6:	bf14      	ite	ne
 801e0c8:	230a      	movne	r3, #10
 801e0ca:	2308      	moveq	r3, #8
 801e0cc:	2100      	movs	r1, #0
 801e0ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e0d2:	6866      	ldr	r6, [r4, #4]
 801e0d4:	60a6      	str	r6, [r4, #8]
 801e0d6:	2e00      	cmp	r6, #0
 801e0d8:	bfa2      	ittt	ge
 801e0da:	6821      	ldrge	r1, [r4, #0]
 801e0dc:	f021 0104 	bicge.w	r1, r1, #4
 801e0e0:	6021      	strge	r1, [r4, #0]
 801e0e2:	b90d      	cbnz	r5, 801e0e8 <_printf_i+0x110>
 801e0e4:	2e00      	cmp	r6, #0
 801e0e6:	d04b      	beq.n	801e180 <_printf_i+0x1a8>
 801e0e8:	4616      	mov	r6, r2
 801e0ea:	fbb5 f1f3 	udiv	r1, r5, r3
 801e0ee:	fb03 5711 	mls	r7, r3, r1, r5
 801e0f2:	5dc7      	ldrb	r7, [r0, r7]
 801e0f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e0f8:	462f      	mov	r7, r5
 801e0fa:	42bb      	cmp	r3, r7
 801e0fc:	460d      	mov	r5, r1
 801e0fe:	d9f4      	bls.n	801e0ea <_printf_i+0x112>
 801e100:	2b08      	cmp	r3, #8
 801e102:	d10b      	bne.n	801e11c <_printf_i+0x144>
 801e104:	6823      	ldr	r3, [r4, #0]
 801e106:	07df      	lsls	r7, r3, #31
 801e108:	d508      	bpl.n	801e11c <_printf_i+0x144>
 801e10a:	6923      	ldr	r3, [r4, #16]
 801e10c:	6861      	ldr	r1, [r4, #4]
 801e10e:	4299      	cmp	r1, r3
 801e110:	bfde      	ittt	le
 801e112:	2330      	movle	r3, #48	@ 0x30
 801e114:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e118:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801e11c:	1b92      	subs	r2, r2, r6
 801e11e:	6122      	str	r2, [r4, #16]
 801e120:	f8cd a000 	str.w	sl, [sp]
 801e124:	464b      	mov	r3, r9
 801e126:	aa03      	add	r2, sp, #12
 801e128:	4621      	mov	r1, r4
 801e12a:	4640      	mov	r0, r8
 801e12c:	f7ff fee6 	bl	801defc <_printf_common>
 801e130:	3001      	adds	r0, #1
 801e132:	d14a      	bne.n	801e1ca <_printf_i+0x1f2>
 801e134:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e138:	b004      	add	sp, #16
 801e13a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e13e:	6823      	ldr	r3, [r4, #0]
 801e140:	f043 0320 	orr.w	r3, r3, #32
 801e144:	6023      	str	r3, [r4, #0]
 801e146:	4833      	ldr	r0, [pc, #204]	@ (801e214 <_printf_i+0x23c>)
 801e148:	2778      	movs	r7, #120	@ 0x78
 801e14a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e14e:	6823      	ldr	r3, [r4, #0]
 801e150:	6831      	ldr	r1, [r6, #0]
 801e152:	061f      	lsls	r7, r3, #24
 801e154:	f851 5b04 	ldr.w	r5, [r1], #4
 801e158:	d402      	bmi.n	801e160 <_printf_i+0x188>
 801e15a:	065f      	lsls	r7, r3, #25
 801e15c:	bf48      	it	mi
 801e15e:	b2ad      	uxthmi	r5, r5
 801e160:	6031      	str	r1, [r6, #0]
 801e162:	07d9      	lsls	r1, r3, #31
 801e164:	bf44      	itt	mi
 801e166:	f043 0320 	orrmi.w	r3, r3, #32
 801e16a:	6023      	strmi	r3, [r4, #0]
 801e16c:	b11d      	cbz	r5, 801e176 <_printf_i+0x19e>
 801e16e:	2310      	movs	r3, #16
 801e170:	e7ac      	b.n	801e0cc <_printf_i+0xf4>
 801e172:	4827      	ldr	r0, [pc, #156]	@ (801e210 <_printf_i+0x238>)
 801e174:	e7e9      	b.n	801e14a <_printf_i+0x172>
 801e176:	6823      	ldr	r3, [r4, #0]
 801e178:	f023 0320 	bic.w	r3, r3, #32
 801e17c:	6023      	str	r3, [r4, #0]
 801e17e:	e7f6      	b.n	801e16e <_printf_i+0x196>
 801e180:	4616      	mov	r6, r2
 801e182:	e7bd      	b.n	801e100 <_printf_i+0x128>
 801e184:	6833      	ldr	r3, [r6, #0]
 801e186:	6825      	ldr	r5, [r4, #0]
 801e188:	6961      	ldr	r1, [r4, #20]
 801e18a:	1d18      	adds	r0, r3, #4
 801e18c:	6030      	str	r0, [r6, #0]
 801e18e:	062e      	lsls	r6, r5, #24
 801e190:	681b      	ldr	r3, [r3, #0]
 801e192:	d501      	bpl.n	801e198 <_printf_i+0x1c0>
 801e194:	6019      	str	r1, [r3, #0]
 801e196:	e002      	b.n	801e19e <_printf_i+0x1c6>
 801e198:	0668      	lsls	r0, r5, #25
 801e19a:	d5fb      	bpl.n	801e194 <_printf_i+0x1bc>
 801e19c:	8019      	strh	r1, [r3, #0]
 801e19e:	2300      	movs	r3, #0
 801e1a0:	6123      	str	r3, [r4, #16]
 801e1a2:	4616      	mov	r6, r2
 801e1a4:	e7bc      	b.n	801e120 <_printf_i+0x148>
 801e1a6:	6833      	ldr	r3, [r6, #0]
 801e1a8:	1d1a      	adds	r2, r3, #4
 801e1aa:	6032      	str	r2, [r6, #0]
 801e1ac:	681e      	ldr	r6, [r3, #0]
 801e1ae:	6862      	ldr	r2, [r4, #4]
 801e1b0:	2100      	movs	r1, #0
 801e1b2:	4630      	mov	r0, r6
 801e1b4:	f7e2 f84c 	bl	8000250 <memchr>
 801e1b8:	b108      	cbz	r0, 801e1be <_printf_i+0x1e6>
 801e1ba:	1b80      	subs	r0, r0, r6
 801e1bc:	6060      	str	r0, [r4, #4]
 801e1be:	6863      	ldr	r3, [r4, #4]
 801e1c0:	6123      	str	r3, [r4, #16]
 801e1c2:	2300      	movs	r3, #0
 801e1c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e1c8:	e7aa      	b.n	801e120 <_printf_i+0x148>
 801e1ca:	6923      	ldr	r3, [r4, #16]
 801e1cc:	4632      	mov	r2, r6
 801e1ce:	4649      	mov	r1, r9
 801e1d0:	4640      	mov	r0, r8
 801e1d2:	47d0      	blx	sl
 801e1d4:	3001      	adds	r0, #1
 801e1d6:	d0ad      	beq.n	801e134 <_printf_i+0x15c>
 801e1d8:	6823      	ldr	r3, [r4, #0]
 801e1da:	079b      	lsls	r3, r3, #30
 801e1dc:	d413      	bmi.n	801e206 <_printf_i+0x22e>
 801e1de:	68e0      	ldr	r0, [r4, #12]
 801e1e0:	9b03      	ldr	r3, [sp, #12]
 801e1e2:	4298      	cmp	r0, r3
 801e1e4:	bfb8      	it	lt
 801e1e6:	4618      	movlt	r0, r3
 801e1e8:	e7a6      	b.n	801e138 <_printf_i+0x160>
 801e1ea:	2301      	movs	r3, #1
 801e1ec:	4632      	mov	r2, r6
 801e1ee:	4649      	mov	r1, r9
 801e1f0:	4640      	mov	r0, r8
 801e1f2:	47d0      	blx	sl
 801e1f4:	3001      	adds	r0, #1
 801e1f6:	d09d      	beq.n	801e134 <_printf_i+0x15c>
 801e1f8:	3501      	adds	r5, #1
 801e1fa:	68e3      	ldr	r3, [r4, #12]
 801e1fc:	9903      	ldr	r1, [sp, #12]
 801e1fe:	1a5b      	subs	r3, r3, r1
 801e200:	42ab      	cmp	r3, r5
 801e202:	dcf2      	bgt.n	801e1ea <_printf_i+0x212>
 801e204:	e7eb      	b.n	801e1de <_printf_i+0x206>
 801e206:	2500      	movs	r5, #0
 801e208:	f104 0619 	add.w	r6, r4, #25
 801e20c:	e7f5      	b.n	801e1fa <_printf_i+0x222>
 801e20e:	bf00      	nop
 801e210:	08020dab 	.word	0x08020dab
 801e214:	08020dbc 	.word	0x08020dbc

0801e218 <__sflush_r>:
 801e218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e220:	0716      	lsls	r6, r2, #28
 801e222:	4605      	mov	r5, r0
 801e224:	460c      	mov	r4, r1
 801e226:	d454      	bmi.n	801e2d2 <__sflush_r+0xba>
 801e228:	684b      	ldr	r3, [r1, #4]
 801e22a:	2b00      	cmp	r3, #0
 801e22c:	dc02      	bgt.n	801e234 <__sflush_r+0x1c>
 801e22e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e230:	2b00      	cmp	r3, #0
 801e232:	dd48      	ble.n	801e2c6 <__sflush_r+0xae>
 801e234:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e236:	2e00      	cmp	r6, #0
 801e238:	d045      	beq.n	801e2c6 <__sflush_r+0xae>
 801e23a:	2300      	movs	r3, #0
 801e23c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e240:	682f      	ldr	r7, [r5, #0]
 801e242:	6a21      	ldr	r1, [r4, #32]
 801e244:	602b      	str	r3, [r5, #0]
 801e246:	d030      	beq.n	801e2aa <__sflush_r+0x92>
 801e248:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e24a:	89a3      	ldrh	r3, [r4, #12]
 801e24c:	0759      	lsls	r1, r3, #29
 801e24e:	d505      	bpl.n	801e25c <__sflush_r+0x44>
 801e250:	6863      	ldr	r3, [r4, #4]
 801e252:	1ad2      	subs	r2, r2, r3
 801e254:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e256:	b10b      	cbz	r3, 801e25c <__sflush_r+0x44>
 801e258:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e25a:	1ad2      	subs	r2, r2, r3
 801e25c:	2300      	movs	r3, #0
 801e25e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e260:	6a21      	ldr	r1, [r4, #32]
 801e262:	4628      	mov	r0, r5
 801e264:	47b0      	blx	r6
 801e266:	1c43      	adds	r3, r0, #1
 801e268:	89a3      	ldrh	r3, [r4, #12]
 801e26a:	d106      	bne.n	801e27a <__sflush_r+0x62>
 801e26c:	6829      	ldr	r1, [r5, #0]
 801e26e:	291d      	cmp	r1, #29
 801e270:	d82b      	bhi.n	801e2ca <__sflush_r+0xb2>
 801e272:	4a2a      	ldr	r2, [pc, #168]	@ (801e31c <__sflush_r+0x104>)
 801e274:	410a      	asrs	r2, r1
 801e276:	07d6      	lsls	r6, r2, #31
 801e278:	d427      	bmi.n	801e2ca <__sflush_r+0xb2>
 801e27a:	2200      	movs	r2, #0
 801e27c:	6062      	str	r2, [r4, #4]
 801e27e:	04d9      	lsls	r1, r3, #19
 801e280:	6922      	ldr	r2, [r4, #16]
 801e282:	6022      	str	r2, [r4, #0]
 801e284:	d504      	bpl.n	801e290 <__sflush_r+0x78>
 801e286:	1c42      	adds	r2, r0, #1
 801e288:	d101      	bne.n	801e28e <__sflush_r+0x76>
 801e28a:	682b      	ldr	r3, [r5, #0]
 801e28c:	b903      	cbnz	r3, 801e290 <__sflush_r+0x78>
 801e28e:	6560      	str	r0, [r4, #84]	@ 0x54
 801e290:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e292:	602f      	str	r7, [r5, #0]
 801e294:	b1b9      	cbz	r1, 801e2c6 <__sflush_r+0xae>
 801e296:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e29a:	4299      	cmp	r1, r3
 801e29c:	d002      	beq.n	801e2a4 <__sflush_r+0x8c>
 801e29e:	4628      	mov	r0, r5
 801e2a0:	f7ff fb40 	bl	801d924 <_free_r>
 801e2a4:	2300      	movs	r3, #0
 801e2a6:	6363      	str	r3, [r4, #52]	@ 0x34
 801e2a8:	e00d      	b.n	801e2c6 <__sflush_r+0xae>
 801e2aa:	2301      	movs	r3, #1
 801e2ac:	4628      	mov	r0, r5
 801e2ae:	47b0      	blx	r6
 801e2b0:	4602      	mov	r2, r0
 801e2b2:	1c50      	adds	r0, r2, #1
 801e2b4:	d1c9      	bne.n	801e24a <__sflush_r+0x32>
 801e2b6:	682b      	ldr	r3, [r5, #0]
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	d0c6      	beq.n	801e24a <__sflush_r+0x32>
 801e2bc:	2b1d      	cmp	r3, #29
 801e2be:	d001      	beq.n	801e2c4 <__sflush_r+0xac>
 801e2c0:	2b16      	cmp	r3, #22
 801e2c2:	d11e      	bne.n	801e302 <__sflush_r+0xea>
 801e2c4:	602f      	str	r7, [r5, #0]
 801e2c6:	2000      	movs	r0, #0
 801e2c8:	e022      	b.n	801e310 <__sflush_r+0xf8>
 801e2ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e2ce:	b21b      	sxth	r3, r3
 801e2d0:	e01b      	b.n	801e30a <__sflush_r+0xf2>
 801e2d2:	690f      	ldr	r7, [r1, #16]
 801e2d4:	2f00      	cmp	r7, #0
 801e2d6:	d0f6      	beq.n	801e2c6 <__sflush_r+0xae>
 801e2d8:	0793      	lsls	r3, r2, #30
 801e2da:	680e      	ldr	r6, [r1, #0]
 801e2dc:	bf08      	it	eq
 801e2de:	694b      	ldreq	r3, [r1, #20]
 801e2e0:	600f      	str	r7, [r1, #0]
 801e2e2:	bf18      	it	ne
 801e2e4:	2300      	movne	r3, #0
 801e2e6:	eba6 0807 	sub.w	r8, r6, r7
 801e2ea:	608b      	str	r3, [r1, #8]
 801e2ec:	f1b8 0f00 	cmp.w	r8, #0
 801e2f0:	dde9      	ble.n	801e2c6 <__sflush_r+0xae>
 801e2f2:	6a21      	ldr	r1, [r4, #32]
 801e2f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e2f6:	4643      	mov	r3, r8
 801e2f8:	463a      	mov	r2, r7
 801e2fa:	4628      	mov	r0, r5
 801e2fc:	47b0      	blx	r6
 801e2fe:	2800      	cmp	r0, #0
 801e300:	dc08      	bgt.n	801e314 <__sflush_r+0xfc>
 801e302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e30a:	81a3      	strh	r3, [r4, #12]
 801e30c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e314:	4407      	add	r7, r0
 801e316:	eba8 0800 	sub.w	r8, r8, r0
 801e31a:	e7e7      	b.n	801e2ec <__sflush_r+0xd4>
 801e31c:	dfbffffe 	.word	0xdfbffffe

0801e320 <_fflush_r>:
 801e320:	b538      	push	{r3, r4, r5, lr}
 801e322:	690b      	ldr	r3, [r1, #16]
 801e324:	4605      	mov	r5, r0
 801e326:	460c      	mov	r4, r1
 801e328:	b913      	cbnz	r3, 801e330 <_fflush_r+0x10>
 801e32a:	2500      	movs	r5, #0
 801e32c:	4628      	mov	r0, r5
 801e32e:	bd38      	pop	{r3, r4, r5, pc}
 801e330:	b118      	cbz	r0, 801e33a <_fflush_r+0x1a>
 801e332:	6a03      	ldr	r3, [r0, #32]
 801e334:	b90b      	cbnz	r3, 801e33a <_fflush_r+0x1a>
 801e336:	f7fe ffe3 	bl	801d300 <__sinit>
 801e33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e33e:	2b00      	cmp	r3, #0
 801e340:	d0f3      	beq.n	801e32a <_fflush_r+0xa>
 801e342:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e344:	07d0      	lsls	r0, r2, #31
 801e346:	d404      	bmi.n	801e352 <_fflush_r+0x32>
 801e348:	0599      	lsls	r1, r3, #22
 801e34a:	d402      	bmi.n	801e352 <_fflush_r+0x32>
 801e34c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e34e:	f7ff faa6 	bl	801d89e <__retarget_lock_acquire_recursive>
 801e352:	4628      	mov	r0, r5
 801e354:	4621      	mov	r1, r4
 801e356:	f7ff ff5f 	bl	801e218 <__sflush_r>
 801e35a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e35c:	07da      	lsls	r2, r3, #31
 801e35e:	4605      	mov	r5, r0
 801e360:	d4e4      	bmi.n	801e32c <_fflush_r+0xc>
 801e362:	89a3      	ldrh	r3, [r4, #12]
 801e364:	059b      	lsls	r3, r3, #22
 801e366:	d4e1      	bmi.n	801e32c <_fflush_r+0xc>
 801e368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e36a:	f7ff fa99 	bl	801d8a0 <__retarget_lock_release_recursive>
 801e36e:	e7dd      	b.n	801e32c <_fflush_r+0xc>

0801e370 <fiprintf>:
 801e370:	b40e      	push	{r1, r2, r3}
 801e372:	b503      	push	{r0, r1, lr}
 801e374:	4601      	mov	r1, r0
 801e376:	ab03      	add	r3, sp, #12
 801e378:	4805      	ldr	r0, [pc, #20]	@ (801e390 <fiprintf+0x20>)
 801e37a:	f853 2b04 	ldr.w	r2, [r3], #4
 801e37e:	6800      	ldr	r0, [r0, #0]
 801e380:	9301      	str	r3, [sp, #4]
 801e382:	f7ff fca3 	bl	801dccc <_vfiprintf_r>
 801e386:	b002      	add	sp, #8
 801e388:	f85d eb04 	ldr.w	lr, [sp], #4
 801e38c:	b003      	add	sp, #12
 801e38e:	4770      	bx	lr
 801e390:	20000dd0 	.word	0x20000dd0

0801e394 <__swhatbuf_r>:
 801e394:	b570      	push	{r4, r5, r6, lr}
 801e396:	460c      	mov	r4, r1
 801e398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e39c:	2900      	cmp	r1, #0
 801e39e:	b096      	sub	sp, #88	@ 0x58
 801e3a0:	4615      	mov	r5, r2
 801e3a2:	461e      	mov	r6, r3
 801e3a4:	da0d      	bge.n	801e3c2 <__swhatbuf_r+0x2e>
 801e3a6:	89a3      	ldrh	r3, [r4, #12]
 801e3a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e3ac:	f04f 0100 	mov.w	r1, #0
 801e3b0:	bf14      	ite	ne
 801e3b2:	2340      	movne	r3, #64	@ 0x40
 801e3b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e3b8:	2000      	movs	r0, #0
 801e3ba:	6031      	str	r1, [r6, #0]
 801e3bc:	602b      	str	r3, [r5, #0]
 801e3be:	b016      	add	sp, #88	@ 0x58
 801e3c0:	bd70      	pop	{r4, r5, r6, pc}
 801e3c2:	466a      	mov	r2, sp
 801e3c4:	f000 f848 	bl	801e458 <_fstat_r>
 801e3c8:	2800      	cmp	r0, #0
 801e3ca:	dbec      	blt.n	801e3a6 <__swhatbuf_r+0x12>
 801e3cc:	9901      	ldr	r1, [sp, #4]
 801e3ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e3d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e3d6:	4259      	negs	r1, r3
 801e3d8:	4159      	adcs	r1, r3
 801e3da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e3de:	e7eb      	b.n	801e3b8 <__swhatbuf_r+0x24>

0801e3e0 <__smakebuf_r>:
 801e3e0:	898b      	ldrh	r3, [r1, #12]
 801e3e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e3e4:	079d      	lsls	r5, r3, #30
 801e3e6:	4606      	mov	r6, r0
 801e3e8:	460c      	mov	r4, r1
 801e3ea:	d507      	bpl.n	801e3fc <__smakebuf_r+0x1c>
 801e3ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e3f0:	6023      	str	r3, [r4, #0]
 801e3f2:	6123      	str	r3, [r4, #16]
 801e3f4:	2301      	movs	r3, #1
 801e3f6:	6163      	str	r3, [r4, #20]
 801e3f8:	b003      	add	sp, #12
 801e3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e3fc:	ab01      	add	r3, sp, #4
 801e3fe:	466a      	mov	r2, sp
 801e400:	f7ff ffc8 	bl	801e394 <__swhatbuf_r>
 801e404:	9f00      	ldr	r7, [sp, #0]
 801e406:	4605      	mov	r5, r0
 801e408:	4639      	mov	r1, r7
 801e40a:	4630      	mov	r0, r6
 801e40c:	f7fe fd46 	bl	801ce9c <_malloc_r>
 801e410:	b948      	cbnz	r0, 801e426 <__smakebuf_r+0x46>
 801e412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e416:	059a      	lsls	r2, r3, #22
 801e418:	d4ee      	bmi.n	801e3f8 <__smakebuf_r+0x18>
 801e41a:	f023 0303 	bic.w	r3, r3, #3
 801e41e:	f043 0302 	orr.w	r3, r3, #2
 801e422:	81a3      	strh	r3, [r4, #12]
 801e424:	e7e2      	b.n	801e3ec <__smakebuf_r+0xc>
 801e426:	89a3      	ldrh	r3, [r4, #12]
 801e428:	6020      	str	r0, [r4, #0]
 801e42a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e42e:	81a3      	strh	r3, [r4, #12]
 801e430:	9b01      	ldr	r3, [sp, #4]
 801e432:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e436:	b15b      	cbz	r3, 801e450 <__smakebuf_r+0x70>
 801e438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e43c:	4630      	mov	r0, r6
 801e43e:	f000 f81d 	bl	801e47c <_isatty_r>
 801e442:	b128      	cbz	r0, 801e450 <__smakebuf_r+0x70>
 801e444:	89a3      	ldrh	r3, [r4, #12]
 801e446:	f023 0303 	bic.w	r3, r3, #3
 801e44a:	f043 0301 	orr.w	r3, r3, #1
 801e44e:	81a3      	strh	r3, [r4, #12]
 801e450:	89a3      	ldrh	r3, [r4, #12]
 801e452:	431d      	orrs	r5, r3
 801e454:	81a5      	strh	r5, [r4, #12]
 801e456:	e7cf      	b.n	801e3f8 <__smakebuf_r+0x18>

0801e458 <_fstat_r>:
 801e458:	b538      	push	{r3, r4, r5, lr}
 801e45a:	4d07      	ldr	r5, [pc, #28]	@ (801e478 <_fstat_r+0x20>)
 801e45c:	2300      	movs	r3, #0
 801e45e:	4604      	mov	r4, r0
 801e460:	4608      	mov	r0, r1
 801e462:	4611      	mov	r1, r2
 801e464:	602b      	str	r3, [r5, #0]
 801e466:	f7e5 f9f5 	bl	8003854 <_fstat>
 801e46a:	1c43      	adds	r3, r0, #1
 801e46c:	d102      	bne.n	801e474 <_fstat_r+0x1c>
 801e46e:	682b      	ldr	r3, [r5, #0]
 801e470:	b103      	cbz	r3, 801e474 <_fstat_r+0x1c>
 801e472:	6023      	str	r3, [r4, #0]
 801e474:	bd38      	pop	{r3, r4, r5, pc}
 801e476:	bf00      	nop
 801e478:	2000c61c 	.word	0x2000c61c

0801e47c <_isatty_r>:
 801e47c:	b538      	push	{r3, r4, r5, lr}
 801e47e:	4d06      	ldr	r5, [pc, #24]	@ (801e498 <_isatty_r+0x1c>)
 801e480:	2300      	movs	r3, #0
 801e482:	4604      	mov	r4, r0
 801e484:	4608      	mov	r0, r1
 801e486:	602b      	str	r3, [r5, #0]
 801e488:	f7e5 f9f4 	bl	8003874 <_isatty>
 801e48c:	1c43      	adds	r3, r0, #1
 801e48e:	d102      	bne.n	801e496 <_isatty_r+0x1a>
 801e490:	682b      	ldr	r3, [r5, #0]
 801e492:	b103      	cbz	r3, 801e496 <_isatty_r+0x1a>
 801e494:	6023      	str	r3, [r4, #0]
 801e496:	bd38      	pop	{r3, r4, r5, pc}
 801e498:	2000c61c 	.word	0x2000c61c

0801e49c <abort>:
 801e49c:	b508      	push	{r3, lr}
 801e49e:	2006      	movs	r0, #6
 801e4a0:	f000 f82c 	bl	801e4fc <raise>
 801e4a4:	2001      	movs	r0, #1
 801e4a6:	f7e5 f985 	bl	80037b4 <_exit>

0801e4aa <_raise_r>:
 801e4aa:	291f      	cmp	r1, #31
 801e4ac:	b538      	push	{r3, r4, r5, lr}
 801e4ae:	4605      	mov	r5, r0
 801e4b0:	460c      	mov	r4, r1
 801e4b2:	d904      	bls.n	801e4be <_raise_r+0x14>
 801e4b4:	2316      	movs	r3, #22
 801e4b6:	6003      	str	r3, [r0, #0]
 801e4b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e4bc:	bd38      	pop	{r3, r4, r5, pc}
 801e4be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e4c0:	b112      	cbz	r2, 801e4c8 <_raise_r+0x1e>
 801e4c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e4c6:	b94b      	cbnz	r3, 801e4dc <_raise_r+0x32>
 801e4c8:	4628      	mov	r0, r5
 801e4ca:	f000 f831 	bl	801e530 <_getpid_r>
 801e4ce:	4622      	mov	r2, r4
 801e4d0:	4601      	mov	r1, r0
 801e4d2:	4628      	mov	r0, r5
 801e4d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e4d8:	f000 b818 	b.w	801e50c <_kill_r>
 801e4dc:	2b01      	cmp	r3, #1
 801e4de:	d00a      	beq.n	801e4f6 <_raise_r+0x4c>
 801e4e0:	1c59      	adds	r1, r3, #1
 801e4e2:	d103      	bne.n	801e4ec <_raise_r+0x42>
 801e4e4:	2316      	movs	r3, #22
 801e4e6:	6003      	str	r3, [r0, #0]
 801e4e8:	2001      	movs	r0, #1
 801e4ea:	e7e7      	b.n	801e4bc <_raise_r+0x12>
 801e4ec:	2100      	movs	r1, #0
 801e4ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e4f2:	4620      	mov	r0, r4
 801e4f4:	4798      	blx	r3
 801e4f6:	2000      	movs	r0, #0
 801e4f8:	e7e0      	b.n	801e4bc <_raise_r+0x12>
	...

0801e4fc <raise>:
 801e4fc:	4b02      	ldr	r3, [pc, #8]	@ (801e508 <raise+0xc>)
 801e4fe:	4601      	mov	r1, r0
 801e500:	6818      	ldr	r0, [r3, #0]
 801e502:	f7ff bfd2 	b.w	801e4aa <_raise_r>
 801e506:	bf00      	nop
 801e508:	20000dd0 	.word	0x20000dd0

0801e50c <_kill_r>:
 801e50c:	b538      	push	{r3, r4, r5, lr}
 801e50e:	4d07      	ldr	r5, [pc, #28]	@ (801e52c <_kill_r+0x20>)
 801e510:	2300      	movs	r3, #0
 801e512:	4604      	mov	r4, r0
 801e514:	4608      	mov	r0, r1
 801e516:	4611      	mov	r1, r2
 801e518:	602b      	str	r3, [r5, #0]
 801e51a:	f7e5 f93b 	bl	8003794 <_kill>
 801e51e:	1c43      	adds	r3, r0, #1
 801e520:	d102      	bne.n	801e528 <_kill_r+0x1c>
 801e522:	682b      	ldr	r3, [r5, #0]
 801e524:	b103      	cbz	r3, 801e528 <_kill_r+0x1c>
 801e526:	6023      	str	r3, [r4, #0]
 801e528:	bd38      	pop	{r3, r4, r5, pc}
 801e52a:	bf00      	nop
 801e52c:	2000c61c 	.word	0x2000c61c

0801e530 <_getpid_r>:
 801e530:	f7e5 b928 	b.w	8003784 <_getpid>

0801e534 <atan2>:
 801e534:	f000 baa8 	b.w	801ea88 <__ieee754_atan2>

0801e538 <sqrt>:
 801e538:	b538      	push	{r3, r4, r5, lr}
 801e53a:	ed2d 8b02 	vpush	{d8}
 801e53e:	ec55 4b10 	vmov	r4, r5, d0
 801e542:	f000 f9c5 	bl	801e8d0 <__ieee754_sqrt>
 801e546:	4622      	mov	r2, r4
 801e548:	462b      	mov	r3, r5
 801e54a:	4620      	mov	r0, r4
 801e54c:	4629      	mov	r1, r5
 801e54e:	eeb0 8a40 	vmov.f32	s16, s0
 801e552:	eef0 8a60 	vmov.f32	s17, s1
 801e556:	f7e2 fb21 	bl	8000b9c <__aeabi_dcmpun>
 801e55a:	b990      	cbnz	r0, 801e582 <sqrt+0x4a>
 801e55c:	2200      	movs	r2, #0
 801e55e:	2300      	movs	r3, #0
 801e560:	4620      	mov	r0, r4
 801e562:	4629      	mov	r1, r5
 801e564:	f7e2 faf2 	bl	8000b4c <__aeabi_dcmplt>
 801e568:	b158      	cbz	r0, 801e582 <sqrt+0x4a>
 801e56a:	f7ff f96d 	bl	801d848 <__errno>
 801e56e:	2321      	movs	r3, #33	@ 0x21
 801e570:	6003      	str	r3, [r0, #0]
 801e572:	2200      	movs	r2, #0
 801e574:	2300      	movs	r3, #0
 801e576:	4610      	mov	r0, r2
 801e578:	4619      	mov	r1, r3
 801e57a:	f7e2 f99f 	bl	80008bc <__aeabi_ddiv>
 801e57e:	ec41 0b18 	vmov	d8, r0, r1
 801e582:	eeb0 0a48 	vmov.f32	s0, s16
 801e586:	eef0 0a68 	vmov.f32	s1, s17
 801e58a:	ecbd 8b02 	vpop	{d8}
 801e58e:	bd38      	pop	{r3, r4, r5, pc}

0801e590 <atan>:
 801e590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e594:	ec55 4b10 	vmov	r4, r5, d0
 801e598:	4bbf      	ldr	r3, [pc, #764]	@ (801e898 <atan+0x308>)
 801e59a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801e59e:	429e      	cmp	r6, r3
 801e5a0:	46ab      	mov	fp, r5
 801e5a2:	d918      	bls.n	801e5d6 <atan+0x46>
 801e5a4:	4bbd      	ldr	r3, [pc, #756]	@ (801e89c <atan+0x30c>)
 801e5a6:	429e      	cmp	r6, r3
 801e5a8:	d801      	bhi.n	801e5ae <atan+0x1e>
 801e5aa:	d109      	bne.n	801e5c0 <atan+0x30>
 801e5ac:	b144      	cbz	r4, 801e5c0 <atan+0x30>
 801e5ae:	4622      	mov	r2, r4
 801e5b0:	462b      	mov	r3, r5
 801e5b2:	4620      	mov	r0, r4
 801e5b4:	4629      	mov	r1, r5
 801e5b6:	f7e1 fea1 	bl	80002fc <__adddf3>
 801e5ba:	4604      	mov	r4, r0
 801e5bc:	460d      	mov	r5, r1
 801e5be:	e006      	b.n	801e5ce <atan+0x3e>
 801e5c0:	f1bb 0f00 	cmp.w	fp, #0
 801e5c4:	f340 812b 	ble.w	801e81e <atan+0x28e>
 801e5c8:	a597      	add	r5, pc, #604	@ (adr r5, 801e828 <atan+0x298>)
 801e5ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 801e5ce:	ec45 4b10 	vmov	d0, r4, r5
 801e5d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5d6:	4bb2      	ldr	r3, [pc, #712]	@ (801e8a0 <atan+0x310>)
 801e5d8:	429e      	cmp	r6, r3
 801e5da:	d813      	bhi.n	801e604 <atan+0x74>
 801e5dc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e5e0:	429e      	cmp	r6, r3
 801e5e2:	d80c      	bhi.n	801e5fe <atan+0x6e>
 801e5e4:	a392      	add	r3, pc, #584	@ (adr r3, 801e830 <atan+0x2a0>)
 801e5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5ea:	4620      	mov	r0, r4
 801e5ec:	4629      	mov	r1, r5
 801e5ee:	f7e1 fe85 	bl	80002fc <__adddf3>
 801e5f2:	4bac      	ldr	r3, [pc, #688]	@ (801e8a4 <atan+0x314>)
 801e5f4:	2200      	movs	r2, #0
 801e5f6:	f7e2 fac7 	bl	8000b88 <__aeabi_dcmpgt>
 801e5fa:	2800      	cmp	r0, #0
 801e5fc:	d1e7      	bne.n	801e5ce <atan+0x3e>
 801e5fe:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801e602:	e029      	b.n	801e658 <atan+0xc8>
 801e604:	f000 f95c 	bl	801e8c0 <fabs>
 801e608:	4ba7      	ldr	r3, [pc, #668]	@ (801e8a8 <atan+0x318>)
 801e60a:	429e      	cmp	r6, r3
 801e60c:	ec55 4b10 	vmov	r4, r5, d0
 801e610:	f200 80bc 	bhi.w	801e78c <atan+0x1fc>
 801e614:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e618:	429e      	cmp	r6, r3
 801e61a:	f200 809e 	bhi.w	801e75a <atan+0x1ca>
 801e61e:	4622      	mov	r2, r4
 801e620:	462b      	mov	r3, r5
 801e622:	4620      	mov	r0, r4
 801e624:	4629      	mov	r1, r5
 801e626:	f7e1 fe69 	bl	80002fc <__adddf3>
 801e62a:	4b9e      	ldr	r3, [pc, #632]	@ (801e8a4 <atan+0x314>)
 801e62c:	2200      	movs	r2, #0
 801e62e:	f7e1 fe63 	bl	80002f8 <__aeabi_dsub>
 801e632:	2200      	movs	r2, #0
 801e634:	4606      	mov	r6, r0
 801e636:	460f      	mov	r7, r1
 801e638:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801e63c:	4620      	mov	r0, r4
 801e63e:	4629      	mov	r1, r5
 801e640:	f7e1 fe5c 	bl	80002fc <__adddf3>
 801e644:	4602      	mov	r2, r0
 801e646:	460b      	mov	r3, r1
 801e648:	4630      	mov	r0, r6
 801e64a:	4639      	mov	r1, r7
 801e64c:	f7e2 f936 	bl	80008bc <__aeabi_ddiv>
 801e650:	f04f 0a00 	mov.w	sl, #0
 801e654:	4604      	mov	r4, r0
 801e656:	460d      	mov	r5, r1
 801e658:	4622      	mov	r2, r4
 801e65a:	462b      	mov	r3, r5
 801e65c:	4620      	mov	r0, r4
 801e65e:	4629      	mov	r1, r5
 801e660:	f7e2 f802 	bl	8000668 <__aeabi_dmul>
 801e664:	4602      	mov	r2, r0
 801e666:	460b      	mov	r3, r1
 801e668:	4680      	mov	r8, r0
 801e66a:	4689      	mov	r9, r1
 801e66c:	f7e1 fffc 	bl	8000668 <__aeabi_dmul>
 801e670:	a371      	add	r3, pc, #452	@ (adr r3, 801e838 <atan+0x2a8>)
 801e672:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e676:	4606      	mov	r6, r0
 801e678:	460f      	mov	r7, r1
 801e67a:	f7e1 fff5 	bl	8000668 <__aeabi_dmul>
 801e67e:	a370      	add	r3, pc, #448	@ (adr r3, 801e840 <atan+0x2b0>)
 801e680:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e684:	f7e1 fe3a 	bl	80002fc <__adddf3>
 801e688:	4632      	mov	r2, r6
 801e68a:	463b      	mov	r3, r7
 801e68c:	f7e1 ffec 	bl	8000668 <__aeabi_dmul>
 801e690:	a36d      	add	r3, pc, #436	@ (adr r3, 801e848 <atan+0x2b8>)
 801e692:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e696:	f7e1 fe31 	bl	80002fc <__adddf3>
 801e69a:	4632      	mov	r2, r6
 801e69c:	463b      	mov	r3, r7
 801e69e:	f7e1 ffe3 	bl	8000668 <__aeabi_dmul>
 801e6a2:	a36b      	add	r3, pc, #428	@ (adr r3, 801e850 <atan+0x2c0>)
 801e6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6a8:	f7e1 fe28 	bl	80002fc <__adddf3>
 801e6ac:	4632      	mov	r2, r6
 801e6ae:	463b      	mov	r3, r7
 801e6b0:	f7e1 ffda 	bl	8000668 <__aeabi_dmul>
 801e6b4:	a368      	add	r3, pc, #416	@ (adr r3, 801e858 <atan+0x2c8>)
 801e6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6ba:	f7e1 fe1f 	bl	80002fc <__adddf3>
 801e6be:	4632      	mov	r2, r6
 801e6c0:	463b      	mov	r3, r7
 801e6c2:	f7e1 ffd1 	bl	8000668 <__aeabi_dmul>
 801e6c6:	a366      	add	r3, pc, #408	@ (adr r3, 801e860 <atan+0x2d0>)
 801e6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6cc:	f7e1 fe16 	bl	80002fc <__adddf3>
 801e6d0:	4642      	mov	r2, r8
 801e6d2:	464b      	mov	r3, r9
 801e6d4:	f7e1 ffc8 	bl	8000668 <__aeabi_dmul>
 801e6d8:	a363      	add	r3, pc, #396	@ (adr r3, 801e868 <atan+0x2d8>)
 801e6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6de:	4680      	mov	r8, r0
 801e6e0:	4689      	mov	r9, r1
 801e6e2:	4630      	mov	r0, r6
 801e6e4:	4639      	mov	r1, r7
 801e6e6:	f7e1 ffbf 	bl	8000668 <__aeabi_dmul>
 801e6ea:	a361      	add	r3, pc, #388	@ (adr r3, 801e870 <atan+0x2e0>)
 801e6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6f0:	f7e1 fe02 	bl	80002f8 <__aeabi_dsub>
 801e6f4:	4632      	mov	r2, r6
 801e6f6:	463b      	mov	r3, r7
 801e6f8:	f7e1 ffb6 	bl	8000668 <__aeabi_dmul>
 801e6fc:	a35e      	add	r3, pc, #376	@ (adr r3, 801e878 <atan+0x2e8>)
 801e6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e702:	f7e1 fdf9 	bl	80002f8 <__aeabi_dsub>
 801e706:	4632      	mov	r2, r6
 801e708:	463b      	mov	r3, r7
 801e70a:	f7e1 ffad 	bl	8000668 <__aeabi_dmul>
 801e70e:	a35c      	add	r3, pc, #368	@ (adr r3, 801e880 <atan+0x2f0>)
 801e710:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e714:	f7e1 fdf0 	bl	80002f8 <__aeabi_dsub>
 801e718:	4632      	mov	r2, r6
 801e71a:	463b      	mov	r3, r7
 801e71c:	f7e1 ffa4 	bl	8000668 <__aeabi_dmul>
 801e720:	a359      	add	r3, pc, #356	@ (adr r3, 801e888 <atan+0x2f8>)
 801e722:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e726:	f7e1 fde7 	bl	80002f8 <__aeabi_dsub>
 801e72a:	4632      	mov	r2, r6
 801e72c:	463b      	mov	r3, r7
 801e72e:	f7e1 ff9b 	bl	8000668 <__aeabi_dmul>
 801e732:	4602      	mov	r2, r0
 801e734:	460b      	mov	r3, r1
 801e736:	4640      	mov	r0, r8
 801e738:	4649      	mov	r1, r9
 801e73a:	f7e1 fddf 	bl	80002fc <__adddf3>
 801e73e:	4622      	mov	r2, r4
 801e740:	462b      	mov	r3, r5
 801e742:	f7e1 ff91 	bl	8000668 <__aeabi_dmul>
 801e746:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801e74a:	4602      	mov	r2, r0
 801e74c:	460b      	mov	r3, r1
 801e74e:	d148      	bne.n	801e7e2 <atan+0x252>
 801e750:	4620      	mov	r0, r4
 801e752:	4629      	mov	r1, r5
 801e754:	f7e1 fdd0 	bl	80002f8 <__aeabi_dsub>
 801e758:	e72f      	b.n	801e5ba <atan+0x2a>
 801e75a:	4b52      	ldr	r3, [pc, #328]	@ (801e8a4 <atan+0x314>)
 801e75c:	2200      	movs	r2, #0
 801e75e:	4620      	mov	r0, r4
 801e760:	4629      	mov	r1, r5
 801e762:	f7e1 fdc9 	bl	80002f8 <__aeabi_dsub>
 801e766:	4b4f      	ldr	r3, [pc, #316]	@ (801e8a4 <atan+0x314>)
 801e768:	4606      	mov	r6, r0
 801e76a:	460f      	mov	r7, r1
 801e76c:	2200      	movs	r2, #0
 801e76e:	4620      	mov	r0, r4
 801e770:	4629      	mov	r1, r5
 801e772:	f7e1 fdc3 	bl	80002fc <__adddf3>
 801e776:	4602      	mov	r2, r0
 801e778:	460b      	mov	r3, r1
 801e77a:	4630      	mov	r0, r6
 801e77c:	4639      	mov	r1, r7
 801e77e:	f7e2 f89d 	bl	80008bc <__aeabi_ddiv>
 801e782:	f04f 0a01 	mov.w	sl, #1
 801e786:	4604      	mov	r4, r0
 801e788:	460d      	mov	r5, r1
 801e78a:	e765      	b.n	801e658 <atan+0xc8>
 801e78c:	4b47      	ldr	r3, [pc, #284]	@ (801e8ac <atan+0x31c>)
 801e78e:	429e      	cmp	r6, r3
 801e790:	d21c      	bcs.n	801e7cc <atan+0x23c>
 801e792:	4b47      	ldr	r3, [pc, #284]	@ (801e8b0 <atan+0x320>)
 801e794:	2200      	movs	r2, #0
 801e796:	4620      	mov	r0, r4
 801e798:	4629      	mov	r1, r5
 801e79a:	f7e1 fdad 	bl	80002f8 <__aeabi_dsub>
 801e79e:	4b44      	ldr	r3, [pc, #272]	@ (801e8b0 <atan+0x320>)
 801e7a0:	4606      	mov	r6, r0
 801e7a2:	460f      	mov	r7, r1
 801e7a4:	2200      	movs	r2, #0
 801e7a6:	4620      	mov	r0, r4
 801e7a8:	4629      	mov	r1, r5
 801e7aa:	f7e1 ff5d 	bl	8000668 <__aeabi_dmul>
 801e7ae:	4b3d      	ldr	r3, [pc, #244]	@ (801e8a4 <atan+0x314>)
 801e7b0:	2200      	movs	r2, #0
 801e7b2:	f7e1 fda3 	bl	80002fc <__adddf3>
 801e7b6:	4602      	mov	r2, r0
 801e7b8:	460b      	mov	r3, r1
 801e7ba:	4630      	mov	r0, r6
 801e7bc:	4639      	mov	r1, r7
 801e7be:	f7e2 f87d 	bl	80008bc <__aeabi_ddiv>
 801e7c2:	f04f 0a02 	mov.w	sl, #2
 801e7c6:	4604      	mov	r4, r0
 801e7c8:	460d      	mov	r5, r1
 801e7ca:	e745      	b.n	801e658 <atan+0xc8>
 801e7cc:	4622      	mov	r2, r4
 801e7ce:	462b      	mov	r3, r5
 801e7d0:	4938      	ldr	r1, [pc, #224]	@ (801e8b4 <atan+0x324>)
 801e7d2:	2000      	movs	r0, #0
 801e7d4:	f7e2 f872 	bl	80008bc <__aeabi_ddiv>
 801e7d8:	f04f 0a03 	mov.w	sl, #3
 801e7dc:	4604      	mov	r4, r0
 801e7de:	460d      	mov	r5, r1
 801e7e0:	e73a      	b.n	801e658 <atan+0xc8>
 801e7e2:	4b35      	ldr	r3, [pc, #212]	@ (801e8b8 <atan+0x328>)
 801e7e4:	4e35      	ldr	r6, [pc, #212]	@ (801e8bc <atan+0x32c>)
 801e7e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801e7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7ee:	f7e1 fd83 	bl	80002f8 <__aeabi_dsub>
 801e7f2:	4622      	mov	r2, r4
 801e7f4:	462b      	mov	r3, r5
 801e7f6:	f7e1 fd7f 	bl	80002f8 <__aeabi_dsub>
 801e7fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801e7fe:	4602      	mov	r2, r0
 801e800:	460b      	mov	r3, r1
 801e802:	e9d6 0100 	ldrd	r0, r1, [r6]
 801e806:	f7e1 fd77 	bl	80002f8 <__aeabi_dsub>
 801e80a:	f1bb 0f00 	cmp.w	fp, #0
 801e80e:	4604      	mov	r4, r0
 801e810:	460d      	mov	r5, r1
 801e812:	f6bf aedc 	bge.w	801e5ce <atan+0x3e>
 801e816:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e81a:	461d      	mov	r5, r3
 801e81c:	e6d7      	b.n	801e5ce <atan+0x3e>
 801e81e:	a51c      	add	r5, pc, #112	@ (adr r5, 801e890 <atan+0x300>)
 801e820:	e9d5 4500 	ldrd	r4, r5, [r5]
 801e824:	e6d3      	b.n	801e5ce <atan+0x3e>
 801e826:	bf00      	nop
 801e828:	54442d18 	.word	0x54442d18
 801e82c:	3ff921fb 	.word	0x3ff921fb
 801e830:	8800759c 	.word	0x8800759c
 801e834:	7e37e43c 	.word	0x7e37e43c
 801e838:	e322da11 	.word	0xe322da11
 801e83c:	3f90ad3a 	.word	0x3f90ad3a
 801e840:	24760deb 	.word	0x24760deb
 801e844:	3fa97b4b 	.word	0x3fa97b4b
 801e848:	a0d03d51 	.word	0xa0d03d51
 801e84c:	3fb10d66 	.word	0x3fb10d66
 801e850:	c54c206e 	.word	0xc54c206e
 801e854:	3fb745cd 	.word	0x3fb745cd
 801e858:	920083ff 	.word	0x920083ff
 801e85c:	3fc24924 	.word	0x3fc24924
 801e860:	5555550d 	.word	0x5555550d
 801e864:	3fd55555 	.word	0x3fd55555
 801e868:	2c6a6c2f 	.word	0x2c6a6c2f
 801e86c:	bfa2b444 	.word	0xbfa2b444
 801e870:	52defd9a 	.word	0x52defd9a
 801e874:	3fadde2d 	.word	0x3fadde2d
 801e878:	af749a6d 	.word	0xaf749a6d
 801e87c:	3fb3b0f2 	.word	0x3fb3b0f2
 801e880:	fe231671 	.word	0xfe231671
 801e884:	3fbc71c6 	.word	0x3fbc71c6
 801e888:	9998ebc4 	.word	0x9998ebc4
 801e88c:	3fc99999 	.word	0x3fc99999
 801e890:	54442d18 	.word	0x54442d18
 801e894:	bff921fb 	.word	0xbff921fb
 801e898:	440fffff 	.word	0x440fffff
 801e89c:	7ff00000 	.word	0x7ff00000
 801e8a0:	3fdbffff 	.word	0x3fdbffff
 801e8a4:	3ff00000 	.word	0x3ff00000
 801e8a8:	3ff2ffff 	.word	0x3ff2ffff
 801e8ac:	40038000 	.word	0x40038000
 801e8b0:	3ff80000 	.word	0x3ff80000
 801e8b4:	bff00000 	.word	0xbff00000
 801e8b8:	08020dd0 	.word	0x08020dd0
 801e8bc:	08020df0 	.word	0x08020df0

0801e8c0 <fabs>:
 801e8c0:	ec51 0b10 	vmov	r0, r1, d0
 801e8c4:	4602      	mov	r2, r0
 801e8c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e8ca:	ec43 2b10 	vmov	d0, r2, r3
 801e8ce:	4770      	bx	lr

0801e8d0 <__ieee754_sqrt>:
 801e8d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8d4:	4a68      	ldr	r2, [pc, #416]	@ (801ea78 <__ieee754_sqrt+0x1a8>)
 801e8d6:	ec55 4b10 	vmov	r4, r5, d0
 801e8da:	43aa      	bics	r2, r5
 801e8dc:	462b      	mov	r3, r5
 801e8de:	4621      	mov	r1, r4
 801e8e0:	d110      	bne.n	801e904 <__ieee754_sqrt+0x34>
 801e8e2:	4622      	mov	r2, r4
 801e8e4:	4620      	mov	r0, r4
 801e8e6:	4629      	mov	r1, r5
 801e8e8:	f7e1 febe 	bl	8000668 <__aeabi_dmul>
 801e8ec:	4602      	mov	r2, r0
 801e8ee:	460b      	mov	r3, r1
 801e8f0:	4620      	mov	r0, r4
 801e8f2:	4629      	mov	r1, r5
 801e8f4:	f7e1 fd02 	bl	80002fc <__adddf3>
 801e8f8:	4604      	mov	r4, r0
 801e8fa:	460d      	mov	r5, r1
 801e8fc:	ec45 4b10 	vmov	d0, r4, r5
 801e900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e904:	2d00      	cmp	r5, #0
 801e906:	dc0e      	bgt.n	801e926 <__ieee754_sqrt+0x56>
 801e908:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801e90c:	4322      	orrs	r2, r4
 801e90e:	d0f5      	beq.n	801e8fc <__ieee754_sqrt+0x2c>
 801e910:	b19d      	cbz	r5, 801e93a <__ieee754_sqrt+0x6a>
 801e912:	4622      	mov	r2, r4
 801e914:	4620      	mov	r0, r4
 801e916:	4629      	mov	r1, r5
 801e918:	f7e1 fcee 	bl	80002f8 <__aeabi_dsub>
 801e91c:	4602      	mov	r2, r0
 801e91e:	460b      	mov	r3, r1
 801e920:	f7e1 ffcc 	bl	80008bc <__aeabi_ddiv>
 801e924:	e7e8      	b.n	801e8f8 <__ieee754_sqrt+0x28>
 801e926:	152a      	asrs	r2, r5, #20
 801e928:	d115      	bne.n	801e956 <__ieee754_sqrt+0x86>
 801e92a:	2000      	movs	r0, #0
 801e92c:	e009      	b.n	801e942 <__ieee754_sqrt+0x72>
 801e92e:	0acb      	lsrs	r3, r1, #11
 801e930:	3a15      	subs	r2, #21
 801e932:	0549      	lsls	r1, r1, #21
 801e934:	2b00      	cmp	r3, #0
 801e936:	d0fa      	beq.n	801e92e <__ieee754_sqrt+0x5e>
 801e938:	e7f7      	b.n	801e92a <__ieee754_sqrt+0x5a>
 801e93a:	462a      	mov	r2, r5
 801e93c:	e7fa      	b.n	801e934 <__ieee754_sqrt+0x64>
 801e93e:	005b      	lsls	r3, r3, #1
 801e940:	3001      	adds	r0, #1
 801e942:	02dc      	lsls	r4, r3, #11
 801e944:	d5fb      	bpl.n	801e93e <__ieee754_sqrt+0x6e>
 801e946:	1e44      	subs	r4, r0, #1
 801e948:	1b12      	subs	r2, r2, r4
 801e94a:	f1c0 0420 	rsb	r4, r0, #32
 801e94e:	fa21 f404 	lsr.w	r4, r1, r4
 801e952:	4323      	orrs	r3, r4
 801e954:	4081      	lsls	r1, r0
 801e956:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e95a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801e95e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e962:	07d2      	lsls	r2, r2, #31
 801e964:	bf5c      	itt	pl
 801e966:	005b      	lslpl	r3, r3, #1
 801e968:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801e96c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e970:	bf58      	it	pl
 801e972:	0049      	lslpl	r1, r1, #1
 801e974:	2600      	movs	r6, #0
 801e976:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801e97a:	106d      	asrs	r5, r5, #1
 801e97c:	0049      	lsls	r1, r1, #1
 801e97e:	2016      	movs	r0, #22
 801e980:	4632      	mov	r2, r6
 801e982:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801e986:	1917      	adds	r7, r2, r4
 801e988:	429f      	cmp	r7, r3
 801e98a:	bfde      	ittt	le
 801e98c:	193a      	addle	r2, r7, r4
 801e98e:	1bdb      	suble	r3, r3, r7
 801e990:	1936      	addle	r6, r6, r4
 801e992:	0fcf      	lsrs	r7, r1, #31
 801e994:	3801      	subs	r0, #1
 801e996:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801e99a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801e99e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801e9a2:	d1f0      	bne.n	801e986 <__ieee754_sqrt+0xb6>
 801e9a4:	4604      	mov	r4, r0
 801e9a6:	2720      	movs	r7, #32
 801e9a8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801e9ac:	429a      	cmp	r2, r3
 801e9ae:	eb00 0e0c 	add.w	lr, r0, ip
 801e9b2:	db02      	blt.n	801e9ba <__ieee754_sqrt+0xea>
 801e9b4:	d113      	bne.n	801e9de <__ieee754_sqrt+0x10e>
 801e9b6:	458e      	cmp	lr, r1
 801e9b8:	d811      	bhi.n	801e9de <__ieee754_sqrt+0x10e>
 801e9ba:	f1be 0f00 	cmp.w	lr, #0
 801e9be:	eb0e 000c 	add.w	r0, lr, ip
 801e9c2:	da42      	bge.n	801ea4a <__ieee754_sqrt+0x17a>
 801e9c4:	2800      	cmp	r0, #0
 801e9c6:	db40      	blt.n	801ea4a <__ieee754_sqrt+0x17a>
 801e9c8:	f102 0801 	add.w	r8, r2, #1
 801e9cc:	1a9b      	subs	r3, r3, r2
 801e9ce:	458e      	cmp	lr, r1
 801e9d0:	bf88      	it	hi
 801e9d2:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801e9d6:	eba1 010e 	sub.w	r1, r1, lr
 801e9da:	4464      	add	r4, ip
 801e9dc:	4642      	mov	r2, r8
 801e9de:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801e9e2:	3f01      	subs	r7, #1
 801e9e4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801e9e8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801e9ec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801e9f0:	d1dc      	bne.n	801e9ac <__ieee754_sqrt+0xdc>
 801e9f2:	4319      	orrs	r1, r3
 801e9f4:	d01b      	beq.n	801ea2e <__ieee754_sqrt+0x15e>
 801e9f6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801ea7c <__ieee754_sqrt+0x1ac>
 801e9fa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801ea80 <__ieee754_sqrt+0x1b0>
 801e9fe:	e9da 0100 	ldrd	r0, r1, [sl]
 801ea02:	e9db 2300 	ldrd	r2, r3, [fp]
 801ea06:	f7e1 fc77 	bl	80002f8 <__aeabi_dsub>
 801ea0a:	e9da 8900 	ldrd	r8, r9, [sl]
 801ea0e:	4602      	mov	r2, r0
 801ea10:	460b      	mov	r3, r1
 801ea12:	4640      	mov	r0, r8
 801ea14:	4649      	mov	r1, r9
 801ea16:	f7e2 f8a3 	bl	8000b60 <__aeabi_dcmple>
 801ea1a:	b140      	cbz	r0, 801ea2e <__ieee754_sqrt+0x15e>
 801ea1c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801ea20:	e9da 0100 	ldrd	r0, r1, [sl]
 801ea24:	e9db 2300 	ldrd	r2, r3, [fp]
 801ea28:	d111      	bne.n	801ea4e <__ieee754_sqrt+0x17e>
 801ea2a:	3601      	adds	r6, #1
 801ea2c:	463c      	mov	r4, r7
 801ea2e:	1072      	asrs	r2, r6, #1
 801ea30:	0863      	lsrs	r3, r4, #1
 801ea32:	07f1      	lsls	r1, r6, #31
 801ea34:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801ea38:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801ea3c:	bf48      	it	mi
 801ea3e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801ea42:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801ea46:	4618      	mov	r0, r3
 801ea48:	e756      	b.n	801e8f8 <__ieee754_sqrt+0x28>
 801ea4a:	4690      	mov	r8, r2
 801ea4c:	e7be      	b.n	801e9cc <__ieee754_sqrt+0xfc>
 801ea4e:	f7e1 fc55 	bl	80002fc <__adddf3>
 801ea52:	e9da 8900 	ldrd	r8, r9, [sl]
 801ea56:	4602      	mov	r2, r0
 801ea58:	460b      	mov	r3, r1
 801ea5a:	4640      	mov	r0, r8
 801ea5c:	4649      	mov	r1, r9
 801ea5e:	f7e2 f875 	bl	8000b4c <__aeabi_dcmplt>
 801ea62:	b120      	cbz	r0, 801ea6e <__ieee754_sqrt+0x19e>
 801ea64:	1ca0      	adds	r0, r4, #2
 801ea66:	bf08      	it	eq
 801ea68:	3601      	addeq	r6, #1
 801ea6a:	3402      	adds	r4, #2
 801ea6c:	e7df      	b.n	801ea2e <__ieee754_sqrt+0x15e>
 801ea6e:	1c63      	adds	r3, r4, #1
 801ea70:	f023 0401 	bic.w	r4, r3, #1
 801ea74:	e7db      	b.n	801ea2e <__ieee754_sqrt+0x15e>
 801ea76:	bf00      	nop
 801ea78:	7ff00000 	.word	0x7ff00000
 801ea7c:	20000e28 	.word	0x20000e28
 801ea80:	20000e20 	.word	0x20000e20
 801ea84:	00000000 	.word	0x00000000

0801ea88 <__ieee754_atan2>:
 801ea88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea8c:	ec57 6b11 	vmov	r6, r7, d1
 801ea90:	4273      	negs	r3, r6
 801ea92:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801ec10 <__ieee754_atan2+0x188>
 801ea96:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801ea9a:	4333      	orrs	r3, r6
 801ea9c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801eaa0:	4543      	cmp	r3, r8
 801eaa2:	ec51 0b10 	vmov	r0, r1, d0
 801eaa6:	4635      	mov	r5, r6
 801eaa8:	d809      	bhi.n	801eabe <__ieee754_atan2+0x36>
 801eaaa:	4244      	negs	r4, r0
 801eaac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801eab0:	4304      	orrs	r4, r0
 801eab2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801eab6:	4544      	cmp	r4, r8
 801eab8:	468e      	mov	lr, r1
 801eaba:	4681      	mov	r9, r0
 801eabc:	d907      	bls.n	801eace <__ieee754_atan2+0x46>
 801eabe:	4632      	mov	r2, r6
 801eac0:	463b      	mov	r3, r7
 801eac2:	f7e1 fc1b 	bl	80002fc <__adddf3>
 801eac6:	ec41 0b10 	vmov	d0, r0, r1
 801eaca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eace:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801ead2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801ead6:	4334      	orrs	r4, r6
 801ead8:	d103      	bne.n	801eae2 <__ieee754_atan2+0x5a>
 801eada:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eade:	f7ff bd57 	b.w	801e590 <atan>
 801eae2:	17bc      	asrs	r4, r7, #30
 801eae4:	f004 0402 	and.w	r4, r4, #2
 801eae8:	ea53 0909 	orrs.w	r9, r3, r9
 801eaec:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801eaf0:	d107      	bne.n	801eb02 <__ieee754_atan2+0x7a>
 801eaf2:	2c02      	cmp	r4, #2
 801eaf4:	d05f      	beq.n	801ebb6 <__ieee754_atan2+0x12e>
 801eaf6:	2c03      	cmp	r4, #3
 801eaf8:	d1e5      	bne.n	801eac6 <__ieee754_atan2+0x3e>
 801eafa:	a141      	add	r1, pc, #260	@ (adr r1, 801ec00 <__ieee754_atan2+0x178>)
 801eafc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801eb00:	e7e1      	b.n	801eac6 <__ieee754_atan2+0x3e>
 801eb02:	4315      	orrs	r5, r2
 801eb04:	d106      	bne.n	801eb14 <__ieee754_atan2+0x8c>
 801eb06:	f1be 0f00 	cmp.w	lr, #0
 801eb0a:	da5f      	bge.n	801ebcc <__ieee754_atan2+0x144>
 801eb0c:	a13e      	add	r1, pc, #248	@ (adr r1, 801ec08 <__ieee754_atan2+0x180>)
 801eb0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801eb12:	e7d8      	b.n	801eac6 <__ieee754_atan2+0x3e>
 801eb14:	4542      	cmp	r2, r8
 801eb16:	d10f      	bne.n	801eb38 <__ieee754_atan2+0xb0>
 801eb18:	4293      	cmp	r3, r2
 801eb1a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801eb1e:	d107      	bne.n	801eb30 <__ieee754_atan2+0xa8>
 801eb20:	2c02      	cmp	r4, #2
 801eb22:	d84c      	bhi.n	801ebbe <__ieee754_atan2+0x136>
 801eb24:	4b34      	ldr	r3, [pc, #208]	@ (801ebf8 <__ieee754_atan2+0x170>)
 801eb26:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801eb2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801eb2e:	e7ca      	b.n	801eac6 <__ieee754_atan2+0x3e>
 801eb30:	2c02      	cmp	r4, #2
 801eb32:	d848      	bhi.n	801ebc6 <__ieee754_atan2+0x13e>
 801eb34:	4b31      	ldr	r3, [pc, #196]	@ (801ebfc <__ieee754_atan2+0x174>)
 801eb36:	e7f6      	b.n	801eb26 <__ieee754_atan2+0x9e>
 801eb38:	4543      	cmp	r3, r8
 801eb3a:	d0e4      	beq.n	801eb06 <__ieee754_atan2+0x7e>
 801eb3c:	1a9b      	subs	r3, r3, r2
 801eb3e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801eb42:	ea4f 5223 	mov.w	r2, r3, asr #20
 801eb46:	da1e      	bge.n	801eb86 <__ieee754_atan2+0xfe>
 801eb48:	2f00      	cmp	r7, #0
 801eb4a:	da01      	bge.n	801eb50 <__ieee754_atan2+0xc8>
 801eb4c:	323c      	adds	r2, #60	@ 0x3c
 801eb4e:	db1e      	blt.n	801eb8e <__ieee754_atan2+0x106>
 801eb50:	4632      	mov	r2, r6
 801eb52:	463b      	mov	r3, r7
 801eb54:	f7e1 feb2 	bl	80008bc <__aeabi_ddiv>
 801eb58:	ec41 0b10 	vmov	d0, r0, r1
 801eb5c:	f7ff feb0 	bl	801e8c0 <fabs>
 801eb60:	f7ff fd16 	bl	801e590 <atan>
 801eb64:	ec51 0b10 	vmov	r0, r1, d0
 801eb68:	2c01      	cmp	r4, #1
 801eb6a:	d013      	beq.n	801eb94 <__ieee754_atan2+0x10c>
 801eb6c:	2c02      	cmp	r4, #2
 801eb6e:	d015      	beq.n	801eb9c <__ieee754_atan2+0x114>
 801eb70:	2c00      	cmp	r4, #0
 801eb72:	d0a8      	beq.n	801eac6 <__ieee754_atan2+0x3e>
 801eb74:	a318      	add	r3, pc, #96	@ (adr r3, 801ebd8 <__ieee754_atan2+0x150>)
 801eb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb7a:	f7e1 fbbd 	bl	80002f8 <__aeabi_dsub>
 801eb7e:	a318      	add	r3, pc, #96	@ (adr r3, 801ebe0 <__ieee754_atan2+0x158>)
 801eb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb84:	e014      	b.n	801ebb0 <__ieee754_atan2+0x128>
 801eb86:	a118      	add	r1, pc, #96	@ (adr r1, 801ebe8 <__ieee754_atan2+0x160>)
 801eb88:	e9d1 0100 	ldrd	r0, r1, [r1]
 801eb8c:	e7ec      	b.n	801eb68 <__ieee754_atan2+0xe0>
 801eb8e:	2000      	movs	r0, #0
 801eb90:	2100      	movs	r1, #0
 801eb92:	e7e9      	b.n	801eb68 <__ieee754_atan2+0xe0>
 801eb94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801eb98:	4619      	mov	r1, r3
 801eb9a:	e794      	b.n	801eac6 <__ieee754_atan2+0x3e>
 801eb9c:	a30e      	add	r3, pc, #56	@ (adr r3, 801ebd8 <__ieee754_atan2+0x150>)
 801eb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eba2:	f7e1 fba9 	bl	80002f8 <__aeabi_dsub>
 801eba6:	4602      	mov	r2, r0
 801eba8:	460b      	mov	r3, r1
 801ebaa:	a10d      	add	r1, pc, #52	@ (adr r1, 801ebe0 <__ieee754_atan2+0x158>)
 801ebac:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ebb0:	f7e1 fba2 	bl	80002f8 <__aeabi_dsub>
 801ebb4:	e787      	b.n	801eac6 <__ieee754_atan2+0x3e>
 801ebb6:	a10a      	add	r1, pc, #40	@ (adr r1, 801ebe0 <__ieee754_atan2+0x158>)
 801ebb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ebbc:	e783      	b.n	801eac6 <__ieee754_atan2+0x3e>
 801ebbe:	a10c      	add	r1, pc, #48	@ (adr r1, 801ebf0 <__ieee754_atan2+0x168>)
 801ebc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ebc4:	e77f      	b.n	801eac6 <__ieee754_atan2+0x3e>
 801ebc6:	2000      	movs	r0, #0
 801ebc8:	2100      	movs	r1, #0
 801ebca:	e77c      	b.n	801eac6 <__ieee754_atan2+0x3e>
 801ebcc:	a106      	add	r1, pc, #24	@ (adr r1, 801ebe8 <__ieee754_atan2+0x160>)
 801ebce:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ebd2:	e778      	b.n	801eac6 <__ieee754_atan2+0x3e>
 801ebd4:	f3af 8000 	nop.w
 801ebd8:	33145c07 	.word	0x33145c07
 801ebdc:	3ca1a626 	.word	0x3ca1a626
 801ebe0:	54442d18 	.word	0x54442d18
 801ebe4:	400921fb 	.word	0x400921fb
 801ebe8:	54442d18 	.word	0x54442d18
 801ebec:	3ff921fb 	.word	0x3ff921fb
 801ebf0:	54442d18 	.word	0x54442d18
 801ebf4:	3fe921fb 	.word	0x3fe921fb
 801ebf8:	08020e28 	.word	0x08020e28
 801ebfc:	08020e10 	.word	0x08020e10
 801ec00:	54442d18 	.word	0x54442d18
 801ec04:	c00921fb 	.word	0xc00921fb
 801ec08:	54442d18 	.word	0x54442d18
 801ec0c:	bff921fb 	.word	0xbff921fb
 801ec10:	7ff00000 	.word	0x7ff00000

0801ec14 <_init>:
 801ec14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec16:	bf00      	nop
 801ec18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ec1a:	bc08      	pop	{r3}
 801ec1c:	469e      	mov	lr, r3
 801ec1e:	4770      	bx	lr

0801ec20 <_fini>:
 801ec20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec22:	bf00      	nop
 801ec24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ec26:	bc08      	pop	{r3}
 801ec28:	469e      	mov	lr, r3
 801ec2a:	4770      	bx	lr
