
G474RE-Firmware-FUN5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001abd4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a80  0801adb8  0801adb8  0001bdb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c838  0801c838  0001ea20  2**0
                  CONTENTS
  4 .ARM          00000008  0801c838  0801c838  0001d838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c840  0801c840  0001ea20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0801c840  0801c840  0001d840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c854  0801c854  0001d854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a20  20000000  0801c858  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b10c  20000a20  0801d278  0001ea20  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000bb2c  0801d278  0001eb2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001ea20  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027282  00000000  00000000  0001ea50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055c6  00000000  00000000  00045cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e78  00000000  00000000  0004b298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001789  00000000  00000000  0004d110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002de6d  00000000  00000000  0004e899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000280b0  00000000  00000000  0007c706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116d68  00000000  00000000  000a47b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001bb51e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009030  00000000  00000000  001bb594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001c45c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000a20 	.word	0x20000a20
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801ad9c 	.word	0x0801ad9c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000a24 	.word	0x20000a24
 800021c:	0801ad9c 	.word	0x0801ad9c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000be6:	f000 b9b5 	b.w	8000f54 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f84d 	bl	8000c98 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f840 	bl	8000c98 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f82f 	bl	8000c98 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f821 	bl	8000c98 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <timer_callback>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	e9c7 2300 	strd	r2, r3, [r7]

	if (timer != NULL) {
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 80de 	beq.w	8001128 <timer_callback+0x1d0>
		uint32_t i2ccError = HAL_I2C_GetError(&hi2c1);
 8000f6c:	4874      	ldr	r0, [pc, #464]	@ (8001140 <timer_callback+0x1e8>)
 8000f6e:	f002 fe89 	bl	8003c84 <HAL_I2C_GetError>
 8000f72:	6178      	str	r0, [r7, #20]
		if (i2ccError == HAL_I2C_ERROR_NONE){
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f040 80b1 	bne.w	80010de <timer_callback+0x186>
			if (is_calib || on_calib){
 8000f7c:	4b71      	ldr	r3, [pc, #452]	@ (8001144 <timer_callback+0x1ec>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d104      	bne.n	8000f8e <timer_callback+0x36>
 8000f84:	4b70      	ldr	r3, [pc, #448]	@ (8001148 <timer_callback+0x1f0>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 80c4 	beq.w	8001116 <timer_callback+0x1be>
				MPU6050_Read_All(&hi2c1, &MPU6050);
 8000f8e:	496f      	ldr	r1, [pc, #444]	@ (800114c <timer_callback+0x1f4>)
 8000f90:	486b      	ldr	r0, [pc, #428]	@ (8001140 <timer_callback+0x1e8>)
 8000f92:	f006 fc25 	bl	80077e0 <MPU6050_Read_All>

				mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 8000f96:	f00d fc8b 	bl	800e8b0 <rmw_uros_epoch_millis>
 8000f9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	f7ff fe11 	bl	8000bc8 <__aeabi_ldivmod>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4b69      	ldr	r3, [pc, #420]	@ (8001150 <timer_callback+0x1f8>)
 8000fac:	601a      	str	r2, [r3, #0]
				mpu6050_msg.header.stamp.nanosec = rmw_uros_epoch_nanos();
 8000fae:	f00d fc8d 	bl	800e8cc <rmw_uros_epoch_nanos>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4b66      	ldr	r3, [pc, #408]	@ (8001150 <timer_callback+0x1f8>)
 8000fb8:	605a      	str	r2, [r3, #4]

				mpu6050_msg.linear_acceleration.x = (GRAVITY * MPU6050.Ax) - accl_offset.x;
 8000fba:	4b64      	ldr	r3, [pc, #400]	@ (800114c <timer_callback+0x1f4>)
 8000fbc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000fc0:	a35b      	add	r3, pc, #364	@ (adr r3, 8001130 <timer_callback+0x1d8>)
 8000fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc6:	f7ff fb4f 	bl	8000668 <__aeabi_dmul>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4610      	mov	r0, r2
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4b60      	ldr	r3, [pc, #384]	@ (8001154 <timer_callback+0x1fc>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff f98e 	bl	80002f8 <__aeabi_dsub>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	495b      	ldr	r1, [pc, #364]	@ (8001150 <timer_callback+0x1f8>)
 8000fe2:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
				mpu6050_msg.linear_acceleration.y = (GRAVITY * MPU6050.Ay) - accl_offset.y;
 8000fe6:	4b59      	ldr	r3, [pc, #356]	@ (800114c <timer_callback+0x1f4>)
 8000fe8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fec:	a350      	add	r3, pc, #320	@ (adr r3, 8001130 <timer_callback+0x1d8>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	f7ff fb39 	bl	8000668 <__aeabi_dmul>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4b55      	ldr	r3, [pc, #340]	@ (8001154 <timer_callback+0x1fc>)
 8001000:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001004:	f7ff f978 	bl	80002f8 <__aeabi_dsub>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4950      	ldr	r1, [pc, #320]	@ (8001150 <timer_callback+0x1f8>)
 800100e:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
				mpu6050_msg.linear_acceleration.z = (GRAVITY * MPU6050.Az) - accl_offset.z;
 8001012:	4b4e      	ldr	r3, [pc, #312]	@ (800114c <timer_callback+0x1f4>)
 8001014:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001018:	a345      	add	r3, pc, #276	@ (adr r3, 8001130 <timer_callback+0x1d8>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff fb23 	bl	8000668 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	4b4a      	ldr	r3, [pc, #296]	@ (8001154 <timer_callback+0x1fc>)
 800102c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001030:	f7ff f962 	bl	80002f8 <__aeabi_dsub>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4945      	ldr	r1, [pc, #276]	@ (8001150 <timer_callback+0x1f8>)
 800103a:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

				mpu6050_msg.angular_velocity.x = (DEG_TO_RAD * MPU6050.Gx) - gyro_offset.x;
 800103e:	4b43      	ldr	r3, [pc, #268]	@ (800114c <timer_callback+0x1f4>)
 8001040:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001044:	a33c      	add	r3, pc, #240	@ (adr r3, 8001138 <timer_callback+0x1e0>)
 8001046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104a:	f7ff fb0d 	bl	8000668 <__aeabi_dmul>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	4b40      	ldr	r3, [pc, #256]	@ (8001158 <timer_callback+0x200>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff f94c 	bl	80002f8 <__aeabi_dsub>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	493a      	ldr	r1, [pc, #232]	@ (8001150 <timer_callback+0x1f8>)
 8001066:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
				mpu6050_msg.angular_velocity.y = (DEG_TO_RAD * MPU6050.Gy) - gyro_offset.y;
 800106a:	4b38      	ldr	r3, [pc, #224]	@ (800114c <timer_callback+0x1f4>)
 800106c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001070:	a331      	add	r3, pc, #196	@ (adr r3, 8001138 <timer_callback+0x1e0>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff faf7 	bl	8000668 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	4b35      	ldr	r3, [pc, #212]	@ (8001158 <timer_callback+0x200>)
 8001084:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001088:	f7ff f936 	bl	80002f8 <__aeabi_dsub>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	492f      	ldr	r1, [pc, #188]	@ (8001150 <timer_callback+0x1f8>)
 8001092:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
				mpu6050_msg.angular_velocity.z = (DEG_TO_RAD * MPU6050.Gz) - gyro_offset.z;
 8001096:	4b2d      	ldr	r3, [pc, #180]	@ (800114c <timer_callback+0x1f4>)
 8001098:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800109c:	a326      	add	r3, pc, #152	@ (adr r3, 8001138 <timer_callback+0x1e0>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	f7ff fae1 	bl	8000668 <__aeabi_dmul>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001158 <timer_callback+0x200>)
 80010b0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80010b4:	f7ff f920 	bl	80002f8 <__aeabi_dsub>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4924      	ldr	r1, [pc, #144]	@ (8001150 <timer_callback+0x1f8>)
 80010be:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

				rcl_ret_t ret = rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL);
 80010c2:	2200      	movs	r2, #0
 80010c4:	4922      	ldr	r1, [pc, #136]	@ (8001150 <timer_callback+0x1f8>)
 80010c6:	4825      	ldr	r0, [pc, #148]	@ (800115c <timer_callback+0x204>)
 80010c8:	f00b fc56 	bl	800c978 <rcl_publish>
 80010cc:	6138      	str	r0, [r7, #16]

				if (ret != RCL_RET_OK)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d020      	beq.n	8001116 <timer_callback+0x1be>
				{
				  printf("Error publishing (line %d)\n", __LINE__);
 80010d4:	219c      	movs	r1, #156	@ 0x9c
 80010d6:	4822      	ldr	r0, [pc, #136]	@ (8001160 <timer_callback+0x208>)
 80010d8:	f018 fa64 	bl	80195a4 <iprintf>
 80010dc:	e01b      	b.n	8001116 <timer_callback+0x1be>
			}
		}
		else
		{
			static uint32_t timestamp = 0;
			if (timestamp <= HAL_GetTick()){
 80010de:	f001 fbdd 	bl	800289c <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001164 <timer_callback+0x20c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d314      	bcc.n	8001116 <timer_callback+0x1be>
				timestamp = HAL_GetTick() + 1000;
 80010ec:	f001 fbd6 	bl	800289c <HAL_GetTick>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80010f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001164 <timer_callback+0x20c>)
 80010f8:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80010fa:	2120      	movs	r1, #32
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001100:	f002 fa8a 	bl	8003618 <HAL_GPIO_TogglePin>
				HAL_I2C_DeInit(&hi2c1);
 8001104:	480e      	ldr	r0, [pc, #56]	@ (8001140 <timer_callback+0x1e8>)
 8001106:	f002 fb5f 	bl	80037c8 <HAL_I2C_DeInit>
				HAL_I2C_Init(&hi2c1);
 800110a:	480d      	ldr	r0, [pc, #52]	@ (8001140 <timer_callback+0x1e8>)
 800110c:	f002 fac1 	bl	8003692 <HAL_I2C_Init>
				MPU6050_Init(&hi2c1);
 8001110:	480b      	ldr	r0, [pc, #44]	@ (8001140 <timer_callback+0x1e8>)
 8001112:	f006 fb0d 	bl	8007730 <MPU6050_Init>
			}
		}

	    HAL_IWDG_Refresh(&hiwdg);
 8001116:	4814      	ldr	r0, [pc, #80]	@ (8001168 <timer_callback+0x210>)
 8001118:	f003 f968 	bl	80043ec <HAL_IWDG_Refresh>
	    cc++;
 800111c:	4b13      	ldr	r3, [pc, #76]	@ (800116c <timer_callback+0x214>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b11      	ldr	r3, [pc, #68]	@ (800116c <timer_callback+0x214>)
 8001126:	801a      	strh	r2, [r3, #0]
	}
}
 8001128:	bf00      	nop
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	3a92a305 	.word	0x3a92a305
 8001134:	40239d01 	.word	0x40239d01
 8001138:	a2529d39 	.word	0xa2529d39
 800113c:	3f91df46 	.word	0x3f91df46
 8001140:	200048e8 	.word	0x200048e8
 8001144:	20000d88 	.word	0x20000d88
 8001148:	20000d89 	.word	0x20000d89
 800114c:	20000cf0 	.word	0x20000cf0
 8001150:	20000a48 	.word	0x20000a48
 8001154:	20000d58 	.word	0x20000d58
 8001158:	20000d70 	.word	0x20000d70
 800115c:	20000a44 	.word	0x20000a44
 8001160:	0801adc4 	.word	0x0801adc4
 8001164:	20003ccc 	.word	0x20003ccc
 8001168:	2000493c 	.word	0x2000493c
 800116c:	20000d48 	.word	0x20000d48

08001170 <imu_calib_service_callback>:

void imu_calib_service_callback(const void * request_msg, void * response_msg){
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  // Cast messages to expected types
  imu_interfaces__srv__ImuCalibration_Request * req_in =
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	617b      	str	r3, [r7, #20]
    (imu_interfaces__srv__ImuCalibration_Request *) request_msg;
  imu_interfaces__srv__ImuCalibration_Response * res_in =
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	613b      	str	r3, [r7, #16]
    (imu_interfaces__srv__ImuCalibration_Response *) response_msg;

  size_t accl_size = sizeof(req_in->imu_calib.linear_acceleration_covariance);
 8001182:	2348      	movs	r3, #72	@ 0x48
 8001184:	60fb      	str	r3, [r7, #12]
  size_t gyro_size = sizeof(req_in->imu_calib.angular_velocity_covariance);
 8001186:	2348      	movs	r3, #72	@ 0x48
 8001188:	60bb      	str	r3, [r7, #8]
  memcpy(mpu6050_msg.linear_acceleration_covariance, req_in->imu_calib.linear_acceleration_covariance, accl_size);
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	33f8      	adds	r3, #248	@ 0xf8
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	4619      	mov	r1, r3
 8001192:	481e      	ldr	r0, [pc, #120]	@ (800120c <imu_calib_service_callback+0x9c>)
 8001194:	f018 fc4f 	bl	8019a36 <memcpy>
  memcpy(mpu6050_msg.angular_velocity_covariance, req_in->imu_calib.angular_velocity_covariance, gyro_size);
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3398      	adds	r3, #152	@ 0x98
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	4619      	mov	r1, r3
 80011a0:	481b      	ldr	r0, [pc, #108]	@ (8001210 <imu_calib_service_callback+0xa0>)
 80011a2:	f018 fc48 	bl	8019a36 <memcpy>

  accl_offset.x = req_in->imu_calib.linear_acceleration.x;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 80011ac:	4919      	ldr	r1, [pc, #100]	@ (8001214 <imu_calib_service_callback+0xa4>)
 80011ae:	e9c1 2300 	strd	r2, r3, [r1]
  accl_offset.y = req_in->imu_calib.linear_acceleration.y;
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 80011b8:	4916      	ldr	r1, [pc, #88]	@ (8001214 <imu_calib_service_callback+0xa4>)
 80011ba:	e9c1 2302 	strd	r2, r3, [r1, #8]
  accl_offset.z = req_in->imu_calib.linear_acceleration.z;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 80011c4:	4913      	ldr	r1, [pc, #76]	@ (8001214 <imu_calib_service_callback+0xa4>)
 80011c6:	e9c1 2304 	strd	r2, r3, [r1, #16]

  gyro_offset.x = req_in->imu_calib.angular_velocity.x;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 80011d0:	4911      	ldr	r1, [pc, #68]	@ (8001218 <imu_calib_service_callback+0xa8>)
 80011d2:	e9c1 2300 	strd	r2, r3, [r1]
  gyro_offset.y = req_in->imu_calib.angular_velocity.y;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80011dc:	490e      	ldr	r1, [pc, #56]	@ (8001218 <imu_calib_service_callback+0xa8>)
 80011de:	e9c1 2302 	strd	r2, r3, [r1, #8]
  gyro_offset.z = req_in->imu_calib.angular_velocity.z;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80011e8:	490b      	ldr	r1, [pc, #44]	@ (8001218 <imu_calib_service_callback+0xa8>)
 80011ea:	e9c1 2304 	strd	r2, r3, [r1, #16]

  is_calib = true;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <imu_calib_service_callback+0xac>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
  res_in->success = true;
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011fa:	2120      	movs	r1, #32
 80011fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001200:	f002 fa0a 	bl	8003618 <HAL_GPIO_TogglePin>

}
 8001204:	bf00      	nop
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000b40 	.word	0x20000b40
 8001210:	20000ae0 	.word	0x20000ae0
 8001214:	20000d58 	.word	0x20000d58
 8001218:	20000d70 	.word	0x20000d70
 800121c:	20000d88 	.word	0x20000d88

08001220 <imu_status_service_callback>:

void imu_status_service_callback(const void * request_msg, void * response_msg){
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  // Cast messages to expected types
  std_srvs__srv__SetBool_Request * req_in =
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60fb      	str	r3, [r7, #12]
    (std_srvs__srv__SetBool_Request *) request_msg;
  std_srvs__srv__SetBool_Response * res_in =
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	60bb      	str	r3, [r7, #8]
    (std_srvs__srv__SetBool_Response *) response_msg;

  if (req_in->data){
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d023      	beq.n	8001282 <imu_status_service_callback+0x62>
	  i2cError = HAL_I2C_GetError(&hi2c1);
 800123a:	4817      	ldr	r0, [pc, #92]	@ (8001298 <imu_status_service_callback+0x78>)
 800123c:	f002 fd22 	bl	8003c84 <HAL_I2C_GetError>
 8001240:	4603      	mov	r3, r0
 8001242:	4a16      	ldr	r2, [pc, #88]	@ (800129c <imu_status_service_callback+0x7c>)
 8001244:	6013      	str	r3, [r2, #0]
	  if (i2cError == HAL_I2C_ERROR_NONE) {
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <imu_status_service_callback+0x7c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10c      	bne.n	8001268 <imu_status_service_callback+0x48>
	      res_in->success = true;
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
	      res_in->message.data = "MPU6050 is connected.";
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <imu_status_service_callback+0x80>)
 8001258:	605a      	str	r2, [r3, #4]
		  cs++;
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <imu_status_service_callback+0x84>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <imu_status_service_callback+0x84>)
 8001264:	801a      	strh	r2, [r3, #0]
  else{
      res_in->success = false;
      res_in->message.data = "Request false.";
  }

}
 8001266:	e012      	b.n	800128e <imu_status_service_callback+0x6e>
	      res_in->success = false;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
	      res_in->message.data = "MPU6050 is not connect, Error with I2C interfaces.";
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	4a0d      	ldr	r2, [pc, #52]	@ (80012a8 <imu_status_service_callback+0x88>)
 8001272:	605a      	str	r2, [r3, #4]
		  ct++;
 8001274:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <imu_status_service_callback+0x8c>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <imu_status_service_callback+0x8c>)
 800127e:	801a      	strh	r2, [r3, #0]
}
 8001280:	e005      	b.n	800128e <imu_status_service_callback+0x6e>
      res_in->success = false;
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
      res_in->message.data = "Request false.";
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4a09      	ldr	r2, [pc, #36]	@ (80012b0 <imu_status_service_callback+0x90>)
 800128c:	605a      	str	r2, [r3, #4]
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200048e8 	.word	0x200048e8
 800129c:	20000d50 	.word	0x20000d50
 80012a0:	0801ade0 	.word	0x0801ade0
 80012a4:	20000d4a 	.word	0x20000d4a
 80012a8:	0801adf8 	.word	0x0801adf8
 80012ac:	20000d4c 	.word	0x20000d4c
 80012b0:	0801ae2c 	.word	0x0801ae2c

080012b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  while (MPU6050_Init(&hi2c1) == 1);
 80012b8:	bf00      	nop
 80012ba:	4808      	ldr	r0, [pc, #32]	@ (80012dc <MX_FREERTOS_Init+0x28>)
 80012bc:	f006 fa38 	bl	8007730 <MPU6050_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d0f9      	beq.n	80012ba <MX_FREERTOS_Init+0x6>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012c6:	4a06      	ldr	r2, [pc, #24]	@ (80012e0 <MX_FREERTOS_Init+0x2c>)
 80012c8:	2100      	movs	r1, #0
 80012ca:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <MX_FREERTOS_Init+0x30>)
 80012cc:	f006 fe58 	bl	8007f80 <osThreadNew>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4a05      	ldr	r2, [pc, #20]	@ (80012e8 <MX_FREERTOS_Init+0x34>)
 80012d4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200048e8 	.word	0x200048e8
 80012e0:	0801aef8 	.word	0x0801aef8
 80012e4:	080012ed 	.word	0x080012ed
 80012e8:	20000d8c 	.word	0x20000d8c

080012ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012f0:	b0f0      	sub	sp, #448	@ 0x1c0
 80012f2:	af02      	add	r7, sp, #8
 80012f4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80012f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80012fc:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	// micro-ROS configuration

	rmw_uros_set_custom_transport(
 80012fe:	4b8e      	ldr	r3, [pc, #568]	@ (8001538 <StartDefaultTask+0x24c>)
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	4b8e      	ldr	r3, [pc, #568]	@ (800153c <StartDefaultTask+0x250>)
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	4b8e      	ldr	r3, [pc, #568]	@ (8001540 <StartDefaultTask+0x254>)
 8001308:	4a8e      	ldr	r2, [pc, #568]	@ (8001544 <StartDefaultTask+0x258>)
 800130a:	498f      	ldr	r1, [pc, #572]	@ (8001548 <StartDefaultTask+0x25c>)
 800130c:	2001      	movs	r0, #1
 800130e:	f00c fbf3 	bl	800daf8 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001312:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8001316:	4618      	mov	r0, r3
 8001318:	f00c fb0a 	bl	800d930 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 800131c:	4b8b      	ldr	r3, [pc, #556]	@ (800154c <StartDefaultTask+0x260>)
 800131e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001322:	4b8b      	ldr	r3, [pc, #556]	@ (8001550 <StartDefaultTask+0x264>)
 8001324:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
	freeRTOS_allocator.reallocate = microros_reallocate;
 8001328:	4b8a      	ldr	r3, [pc, #552]	@ (8001554 <StartDefaultTask+0x268>)
 800132a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800132e:	4b8a      	ldr	r3, [pc, #552]	@ (8001558 <StartDefaultTask+0x26c>)
 8001330:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001334:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8001338:	4618      	mov	r0, r3
 800133a:	f00c fb07 	bl	800d94c <rcutils_set_default_allocator>
 800133e:	4603      	mov	r3, r0
 8001340:	f083 0301 	eor.w	r3, r3, #1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d004      	beq.n	8001354 <StartDefaultTask+0x68>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 800134a:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800134e:	4883      	ldr	r0, [pc, #524]	@ (800155c <StartDefaultTask+0x270>)
 8001350:	f018 f928 	bl	80195a4 <iprintf>
	}

	GPIO_PinState B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001354:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001358:	4881      	ldr	r0, [pc, #516]	@ (8001560 <StartDefaultTask+0x274>)
 800135a:	f002 f92d 	bl	80035b8 <HAL_GPIO_ReadPin>
 800135e:	4603      	mov	r3, r0
 8001360:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
	rclc_support_t support;
	rclc_executor_t executor;
	rcl_allocator_t allocator;
	rcl_init_options_t init_options;

	const unsigned int timer_period = RCL_MS_TO_NS(10);
 8001364:	4b7f      	ldr	r3, [pc, #508]	@ (8001564 <StartDefaultTask+0x278>)
 8001366:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
	const int timeout_ms = 5000;
 800136a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800136e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	int executor_num = 2;
 8001372:	2302      	movs	r3, #2
 8001374:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

	// Get message type support
	const rosidl_message_type_support_t * imu_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu);
 8001378:	f00d ff3c 	bl	800f1f4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800137c:	f8c7 01a4 	str.w	r0, [r7, #420]	@ 0x1a4

	const rosidl_message_type_support_t * cmd_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist);
 8001380:	f009 fb5a 	bl	800aa38 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001384:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0

	const rosidl_service_type_support_t * imu_calib_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(imu_interfaces, srv, ImuCalibration);
 8001388:	f009 fc92 	bl	800acb0 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>
 800138c:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c

	const rosidl_service_type_support_t * imu_status_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, SetBool);
 8001390:	f00e f956 	bl	800f640 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>
 8001394:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

	allocator = rcl_get_default_allocator();
 8001398:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800139c:	f5a3 7486 	sub.w	r4, r3, #268	@ 0x10c
 80013a0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80013a4:	4618      	mov	r0, r3
 80013a6:	f00c faef 	bl	800d988 <rcutils_get_default_allocator>
 80013aa:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80013ae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80013b2:	461d      	mov	r5, r3
 80013b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b8:	682b      	ldr	r3, [r5, #0]
 80013ba:	6023      	str	r3, [r4, #0]

	executor = rclc_executor_get_zero_initialized_executor();
 80013bc:	463b      	mov	r3, r7
 80013be:	4618      	mov	r0, r3
 80013c0:	f00b fe68 	bl	800d094 <rclc_executor_get_zero_initialized_executor>
 80013c4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80013c8:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 80013cc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80013d0:	4611      	mov	r1, r2
 80013d2:	2288      	movs	r2, #136	@ 0x88
 80013d4:	4618      	mov	r0, r3
 80013d6:	f018 fb2e 	bl	8019a36 <memcpy>

	init_options = rcl_get_zero_initialized_init_options();
 80013da:	f00b f8fd 	bl	800c5d8 <rcl_get_zero_initialized_init_options>
 80013de:	4602      	mov	r2, r0
 80013e0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80013e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013e8:	601a      	str	r2, [r3, #0]

	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 80013ea:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80013ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013f2:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 80013f6:	466d      	mov	r5, sp
 80013f8:	f103 020c 	add.w	r2, r3, #12
 80013fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001400:	e885 0003 	stmia.w	r5, {r0, r1}
 8001404:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001406:	4620      	mov	r0, r4
 8001408:	f00b f8e8 	bl	800c5dc <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 69));
 800140c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001410:	2145      	movs	r1, #69	@ 0x45
 8001412:	4618      	mov	r0, r3
 8001414:	f00b f9de 	bl	800c7d4 <rcl_init_options_set_domain_id>

	//create support init_options
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001418:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800141c:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 8001420:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	4613      	mov	r3, r2
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	f00c f93c 	bl	800d6a8 <rclc_support_init_with_options>

	//create timer
	rclc_timer_init_default(&mpu6050_timer, &support, timer_period, timer_callback);
 8001430:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001434:	2200      	movs	r2, #0
 8001436:	4698      	mov	r8, r3
 8001438:	4691      	mov	r9, r2
 800143a:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 800143e:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8001442:	4b49      	ldr	r3, [pc, #292]	@ (8001568 <StartDefaultTask+0x27c>)
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	4642      	mov	r2, r8
 8001448:	464b      	mov	r3, r9
 800144a:	f00c fa39 	bl	800d8c0 <rclc_timer_init_default>

	// create node
	rclc_node_init_default(&node, "G474RE_MPU6050_node", "", &support);
 800144e:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001452:	4a46      	ldr	r2, [pc, #280]	@ (800156c <StartDefaultTask+0x280>)
 8001454:	4946      	ldr	r1, [pc, #280]	@ (8001570 <StartDefaultTask+0x284>)
 8001456:	4847      	ldr	r0, [pc, #284]	@ (8001574 <StartDefaultTask+0x288>)
 8001458:	f00c f95a 	bl	800d710 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_best_effort(&mpu6050_publisher, &node, imu_type_support, "mpu6050_publisher");
 800145c:	4b46      	ldr	r3, [pc, #280]	@ (8001578 <StartDefaultTask+0x28c>)
 800145e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8001462:	4944      	ldr	r1, [pc, #272]	@ (8001574 <StartDefaultTask+0x288>)
 8001464:	4845      	ldr	r0, [pc, #276]	@ (800157c <StartDefaultTask+0x290>)
 8001466:	f00c f9c3 	bl	800d7f0 <rclc_publisher_init_best_effort>
	rclc_publisher_init_default(&cmd_vel_publisher, &node, cmd_type_support, "cmd_vel");
 800146a:	4b45      	ldr	r3, [pc, #276]	@ (8001580 <StartDefaultTask+0x294>)
 800146c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8001470:	4940      	ldr	r1, [pc, #256]	@ (8001574 <StartDefaultTask+0x288>)
 8001472:	4844      	ldr	r0, [pc, #272]	@ (8001584 <StartDefaultTask+0x298>)
 8001474:	f00c f988 	bl	800d788 <rclc_publisher_init_default>

	//create subscriber


	//create service server
	if (B1 == GPIO_PIN_RESET) {
 8001478:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10c      	bne.n	800149a <StartDefaultTask+0x1ae>
		rclc_service_init_default(&imu_calibration_server, &node, imu_calib_type_support, "imu_calibration");
 8001480:	4b41      	ldr	r3, [pc, #260]	@ (8001588 <StartDefaultTask+0x29c>)
 8001482:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001486:	493b      	ldr	r1, [pc, #236]	@ (8001574 <StartDefaultTask+0x288>)
 8001488:	4840      	ldr	r0, [pc, #256]	@ (800158c <StartDefaultTask+0x2a0>)
 800148a:	f00c f9e5 	bl	800d858 <rclc_service_init_default>
		executor_num++;
 800148e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001492:	3301      	adds	r3, #1
 8001494:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8001498:	e002      	b.n	80014a0 <StartDefaultTask+0x1b4>
	}
	else{
		on_calib = true;
 800149a:	4b3d      	ldr	r3, [pc, #244]	@ (8001590 <StartDefaultTask+0x2a4>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
	}

	rclc_service_init_default(&imu_status_server, &node, imu_status_type_support, "/imu/status");
 80014a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001594 <StartDefaultTask+0x2a8>)
 80014a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80014a6:	4933      	ldr	r1, [pc, #204]	@ (8001574 <StartDefaultTask+0x288>)
 80014a8:	483b      	ldr	r0, [pc, #236]	@ (8001598 <StartDefaultTask+0x2ac>)
 80014aa:	f00c f9d5 	bl	800d858 <rclc_service_init_default>
	//create service client


	//create executor
	rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 80014ae:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80014b2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014b6:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 80014ba:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80014be:	f00b fdf3 	bl	800d0a8 <rclc_executor_init>

	rclc_executor_add_timer(&executor, &mpu6050_timer);
 80014c2:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80014c6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f00b fe5b 	bl	800d188 <rclc_executor_add_timer>
	if (B1 == GPIO_PIN_RESET) rclc_executor_add_service(&executor, &imu_calibration_server, &imu_calibration_request, &imu_calibration_response, imu_calib_service_callback);
 80014d2:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d108      	bne.n	80014ec <StartDefaultTask+0x200>
 80014da:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80014de:	4b2f      	ldr	r3, [pc, #188]	@ (800159c <StartDefaultTask+0x2b0>)
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	4b2f      	ldr	r3, [pc, #188]	@ (80015a0 <StartDefaultTask+0x2b4>)
 80014e4:	4a2f      	ldr	r2, [pc, #188]	@ (80015a4 <StartDefaultTask+0x2b8>)
 80014e6:	4929      	ldr	r1, [pc, #164]	@ (800158c <StartDefaultTask+0x2a0>)
 80014e8:	f00b fe78 	bl	800d1dc <rclc_executor_add_service>
	rclc_executor_add_service(&executor, &imu_status_server, &imu_status_request, &imu_status_response, imu_status_service_callback);
 80014ec:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80014f0:	4b2d      	ldr	r3, [pc, #180]	@ (80015a8 <StartDefaultTask+0x2bc>)
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	4b2d      	ldr	r3, [pc, #180]	@ (80015ac <StartDefaultTask+0x2c0>)
 80014f6:	4a2e      	ldr	r2, [pc, #184]	@ (80015b0 <StartDefaultTask+0x2c4>)
 80014f8:	4927      	ldr	r1, [pc, #156]	@ (8001598 <StartDefaultTask+0x2ac>)
 80014fa:	f00b fe6f 	bl	800d1dc <rclc_executor_add_service>

	rclc_executor_spin(&executor);
 80014fe:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001502:	4618      	mov	r0, r3
 8001504:	f00c f890 	bl	800d628 <rclc_executor_spin>

	rmw_uros_sync_session(timeout_ms);
 8001508:	f8d7 01a8 	ldr.w	r0, [r7, #424]	@ 0x1a8
 800150c:	f00d f9ec 	bl	800e8e8 <rmw_uros_sync_session>

	//create message
	mpu6050_msg.header.frame_id = micro_ros_string_utilities_init("imu_frame");
 8001510:	4c28      	ldr	r4, [pc, #160]	@ (80015b4 <StartDefaultTask+0x2c8>)
 8001512:	463b      	mov	r3, r7
 8001514:	4928      	ldr	r1, [pc, #160]	@ (80015b8 <StartDefaultTask+0x2cc>)
 8001516:	4618      	mov	r0, r3
 8001518:	f009 fcba 	bl	800ae90 <micro_ros_string_utilities_init>
 800151c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001520:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8001524:	f104 0308 	add.w	r3, r4, #8
 8001528:	ca07      	ldmia	r2, {r0, r1, r2}
 800152a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for(;;)
	{
		osDelay(10);
 800152e:	200a      	movs	r0, #10
 8001530:	f006 fdb8 	bl	80080a4 <osDelay>
 8001534:	e7fb      	b.n	800152e <StartDefaultTask+0x242>
 8001536:	bf00      	nop
 8001538:	0800274d 	.word	0x0800274d
 800153c:	080026e9 	.word	0x080026e9
 8001540:	080026c9 	.word	0x080026c9
 8001544:	0800269d 	.word	0x0800269d
 8001548:	200049a8 	.word	0x200049a8
 800154c:	08001e4d 	.word	0x08001e4d
 8001550:	08001e91 	.word	0x08001e91
 8001554:	08001ec9 	.word	0x08001ec9
 8001558:	08001f35 	.word	0x08001f35
 800155c:	0801ae3c 	.word	0x0801ae3c
 8001560:	48000800 	.word	0x48000800
 8001564:	00989680 	.word	0x00989680
 8001568:	08000f59 	.word	0x08000f59
 800156c:	0801ae64 	.word	0x0801ae64
 8001570:	0801ae68 	.word	0x0801ae68
 8001574:	20000a3c 	.word	0x20000a3c
 8001578:	0801ae7c 	.word	0x0801ae7c
 800157c:	20000a44 	.word	0x20000a44
 8001580:	0801ae90 	.word	0x0801ae90
 8001584:	20000b88 	.word	0x20000b88
 8001588:	0801ae98 	.word	0x0801ae98
 800158c:	20000b8c 	.word	0x20000b8c
 8001590:	20000d89 	.word	0x20000d89
 8001594:	0801aea8 	.word	0x0801aea8
 8001598:	20000cd4 	.word	0x20000cd4
 800159c:	08001171 	.word	0x08001171
 80015a0:	20000cd0 	.word	0x20000cd0
 80015a4:	20000b90 	.word	0x20000b90
 80015a8:	08001221 	.word	0x08001221
 80015ac:	20000cdc 	.word	0x20000cdc
 80015b0:	20000cd8 	.word	0x20000cd8
 80015b4:	20000a48 	.word	0x20000a48
 80015b8:	0801aeb4 	.word	0x0801aeb4

080015bc <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	@ 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80015c8:	f007 fdae 	bl	8009128 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80015cc:	4b5a      	ldr	r3, [pc, #360]	@ (8001738 <pvPortMallocMicroROS+0x17c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80015d4:	f000 f986 	bl	80018e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80015d8:	4b58      	ldr	r3, [pc, #352]	@ (800173c <pvPortMallocMicroROS+0x180>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4013      	ands	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f040 8090 	bne.w	8001706 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d01e      	beq.n	800162a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80015ec:	2208      	movs	r2, #8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d015      	beq.n	800162a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f023 0307 	bic.w	r3, r3, #7
 8001604:	3308      	adds	r3, #8
 8001606:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00b      	beq.n	800162a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001616:	f383 8811 	msr	BASEPRI, r3
 800161a:	f3bf 8f6f 	isb	sy
 800161e:	f3bf 8f4f 	dsb	sy
 8001622:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	e7fd      	b.n	8001626 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d06a      	beq.n	8001706 <pvPortMallocMicroROS+0x14a>
 8001630:	4b43      	ldr	r3, [pc, #268]	@ (8001740 <pvPortMallocMicroROS+0x184>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	429a      	cmp	r2, r3
 8001638:	d865      	bhi.n	8001706 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800163a:	4b42      	ldr	r3, [pc, #264]	@ (8001744 <pvPortMallocMicroROS+0x188>)
 800163c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800163e:	4b41      	ldr	r3, [pc, #260]	@ (8001744 <pvPortMallocMicroROS+0x188>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001644:	e004      	b.n	8001650 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	429a      	cmp	r2, r3
 8001658:	d903      	bls.n	8001662 <pvPortMallocMicroROS+0xa6>
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f1      	bne.n	8001646 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001662:	4b35      	ldr	r3, [pc, #212]	@ (8001738 <pvPortMallocMicroROS+0x17c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001668:	429a      	cmp	r2, r3
 800166a:	d04c      	beq.n	8001706 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2208      	movs	r2, #8
 8001672:	4413      	add	r3, r2
 8001674:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	1ad2      	subs	r2, r2, r3
 8001686:	2308      	movs	r3, #8
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	429a      	cmp	r2, r3
 800168c:	d920      	bls.n	80016d0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800168e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00b      	beq.n	80016b8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80016a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016a4:	f383 8811 	msr	BASEPRI, r3
 80016a8:	f3bf 8f6f 	isb	sy
 80016ac:	f3bf 8f4f 	dsb	sy
 80016b0:	613b      	str	r3, [r7, #16]
}
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80016b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	1ad2      	subs	r2, r2, r3
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80016c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80016ca:	69b8      	ldr	r0, [r7, #24]
 80016cc:	f000 f96c 	bl	80019a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <pvPortMallocMicroROS+0x184>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	4a19      	ldr	r2, [pc, #100]	@ (8001740 <pvPortMallocMicroROS+0x184>)
 80016dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80016de:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <pvPortMallocMicroROS+0x184>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <pvPortMallocMicroROS+0x18c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d203      	bcs.n	80016f2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <pvPortMallocMicroROS+0x184>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a16      	ldr	r2, [pc, #88]	@ (8001748 <pvPortMallocMicroROS+0x18c>)
 80016f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80016f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	4b11      	ldr	r3, [pc, #68]	@ (800173c <pvPortMallocMicroROS+0x180>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001706:	f007 fd1d 	bl	8009144 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00b      	beq.n	800172c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001718:	f383 8811 	msr	BASEPRI, r3
 800171c:	f3bf 8f6f 	isb	sy
 8001720:	f3bf 8f4f 	dsb	sy
 8001724:	60fb      	str	r3, [r7, #12]
}
 8001726:	bf00      	nop
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800172c:	69fb      	ldr	r3, [r7, #28]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3728      	adds	r7, #40	@ 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200048d8 	.word	0x200048d8
 800173c:	200048e4 	.word	0x200048e4
 8001740:	200048dc 	.word	0x200048dc
 8001744:	200048d0 	.word	0x200048d0
 8001748:	200048e0 	.word	0x200048e0

0800174c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d04a      	beq.n	80017f4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800175e:	2308      	movs	r3, #8
 8001760:	425b      	negs	r3, r3
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	4413      	add	r3, r2
 8001766:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	4b22      	ldr	r3, [pc, #136]	@ (80017fc <vPortFreeMicroROS+0xb0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4013      	ands	r3, r2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10b      	bne.n	8001792 <vPortFreeMicroROS+0x46>
	__asm volatile
 800177a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800177e:	f383 8811 	msr	BASEPRI, r3
 8001782:	f3bf 8f6f 	isb	sy
 8001786:	f3bf 8f4f 	dsb	sy
 800178a:	60fb      	str	r3, [r7, #12]
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	e7fd      	b.n	800178e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00b      	beq.n	80017b2 <vPortFreeMicroROS+0x66>
	__asm volatile
 800179a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800179e:	f383 8811 	msr	BASEPRI, r3
 80017a2:	f3bf 8f6f 	isb	sy
 80017a6:	f3bf 8f4f 	dsb	sy
 80017aa:	60bb      	str	r3, [r7, #8]
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	e7fd      	b.n	80017ae <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <vPortFreeMicroROS+0xb0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d019      	beq.n	80017f4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d115      	bne.n	80017f4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <vPortFreeMicroROS+0xb0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	401a      	ands	r2, r3
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80017d8:	f007 fca6 	bl	8009128 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <vPortFreeMicroROS+0xb4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4413      	add	r3, r2
 80017e6:	4a06      	ldr	r2, [pc, #24]	@ (8001800 <vPortFreeMicroROS+0xb4>)
 80017e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80017ea:	6938      	ldr	r0, [r7, #16]
 80017ec:	f000 f8dc 	bl	80019a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80017f0:	f007 fca8 	bl	8009144 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80017f4:	bf00      	nop
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	200048e4 	.word	0x200048e4
 8001800:	200048dc 	.word	0x200048dc

08001804 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001804:	b480      	push	{r7}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001810:	2308      	movs	r3, #8
 8001812:	425b      	negs	r3, r3
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	4413      	add	r3, r2
 8001818:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <getBlockSize+0x38>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	43db      	mvns	r3, r3
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]

	return count;
 800182c:	68fb      	ldr	r3, [r7, #12]
}
 800182e:	4618      	mov	r0, r3
 8001830:	371c      	adds	r7, #28
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	200048e4 	.word	0x200048e4

08001840 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800184a:	f007 fc6d 	bl	8009128 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800184e:	6838      	ldr	r0, [r7, #0]
 8001850:	f7ff feb4 	bl	80015bc <pvPortMallocMicroROS>
 8001854:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d017      	beq.n	800188c <pvPortReallocMicroROS+0x4c>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d014      	beq.n	800188c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffce 	bl	8001804 <getBlockSize>
 8001868:	4603      	mov	r3, r0
 800186a:	2208      	movs	r2, #8
 800186c:	1a9b      	subs	r3, r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	429a      	cmp	r2, r3
 8001876:	d201      	bcs.n	800187c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	68b8      	ldr	r0, [r7, #8]
 8001882:	f018 f8d8 	bl	8019a36 <memcpy>

		vPortFreeMicroROS(pv);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ff60 	bl	800174c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800188c:	f007 fc5a 	bl	8009144 <xTaskResumeAll>

	return newmem;
 8001890:	68bb      	ldr	r3, [r7, #8]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80018a4:	f007 fc40 	bl	8009128 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80018b2:	6978      	ldr	r0, [r7, #20]
 80018b4:	f7ff fe82 	bl	80015bc <pvPortMallocMicroROS>
 80018b8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	613b      	str	r3, [r7, #16]

  	while(count--)
 80018be:	e004      	b.n	80018ca <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	613a      	str	r2, [r7, #16]
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	617a      	str	r2, [r7, #20]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f5      	bne.n	80018c0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80018d4:	f007 fc36 	bl	8009144 <xTaskResumeAll>
  	return mem;
 80018d8:	68fb      	ldr	r3, [r7, #12]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80018ea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80018f0:	4b27      	ldr	r3, [pc, #156]	@ (8001990 <prvHeapInit+0xac>)
 80018f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00c      	beq.n	8001918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	3307      	adds	r3, #7
 8001902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f023 0307 	bic.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	4a1f      	ldr	r2, [pc, #124]	@ (8001990 <prvHeapInit+0xac>)
 8001914:	4413      	add	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800191c:	4a1d      	ldr	r2, [pc, #116]	@ (8001994 <prvHeapInit+0xb0>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001922:	4b1c      	ldr	r3, [pc, #112]	@ (8001994 <prvHeapInit+0xb0>)
 8001924:	2200      	movs	r2, #0
 8001926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	4413      	add	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001930:	2208      	movs	r2, #8
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1a9b      	subs	r3, r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f023 0307 	bic.w	r3, r3, #7
 800193e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4a15      	ldr	r2, [pc, #84]	@ (8001998 <prvHeapInit+0xb4>)
 8001944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001946:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <prvHeapInit+0xb4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2200      	movs	r2, #0
 800194c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800194e:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <prvHeapInit+0xb4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	1ad2      	subs	r2, r2, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001964:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <prvHeapInit+0xb4>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4a0a      	ldr	r2, [pc, #40]	@ (800199c <prvHeapInit+0xb8>)
 8001972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4a09      	ldr	r2, [pc, #36]	@ (80019a0 <prvHeapInit+0xbc>)
 800197a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <prvHeapInit+0xc0>)
 800197e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001982:	601a      	str	r2, [r3, #0]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	20003cd0 	.word	0x20003cd0
 8001994:	200048d0 	.word	0x200048d0
 8001998:	200048d8 	.word	0x200048d8
 800199c:	200048e0 	.word	0x200048e0
 80019a0:	200048dc 	.word	0x200048dc
 80019a4:	200048e4 	.word	0x200048e4

080019a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80019b0:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <prvInsertBlockIntoFreeList+0xac>)
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e002      	b.n	80019bc <prvInsertBlockIntoFreeList+0x14>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d8f7      	bhi.n	80019b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	4413      	add	r3, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d108      	bne.n	80019ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	441a      	add	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	441a      	add	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d118      	bne.n	8001a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <prvInsertBlockIntoFreeList+0xb0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d00d      	beq.n	8001a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	441a      	add	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e008      	b.n	8001a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001a26:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <prvInsertBlockIntoFreeList+0xb0>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e003      	b.n	8001a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d002      	beq.n	8001a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	200048d0 	.word	0x200048d0
 8001a58:	200048d8 	.word	0x200048d8

08001a5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a62:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <MX_DMA_Init+0x60>)
 8001a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a66:	4a15      	ldr	r2, [pc, #84]	@ (8001abc <MX_DMA_Init+0x60>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a6e:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <MX_DMA_Init+0x60>)
 8001a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a7a:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <MX_DMA_Init+0x60>)
 8001a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001abc <MX_DMA_Init+0x60>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a86:	4b0d      	ldr	r3, [pc, #52]	@ (8001abc <MX_DMA_Init+0x60>)
 8001a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2105      	movs	r1, #5
 8001a96:	200b      	movs	r0, #11
 8001a98:	f000 ffc4 	bl	8002a24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a9c:	200b      	movs	r0, #11
 8001a9e:	f000 ffdb 	bl	8002a58 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2105      	movs	r1, #5
 8001aa6:	200c      	movs	r0, #12
 8001aa8:	f000 ffbc 	bl	8002a24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001aac:	200c      	movs	r0, #12
 8001aae:	f000 ffd3 	bl	8002a58 <HAL_NVIC_EnableIRQ>

}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000

08001ac0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	@ 0x28
 8001ac4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8001b94 <MX_GPIO_Init+0xd4>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ada:	4a2e      	ldr	r2, [pc, #184]	@ (8001b94 <MX_GPIO_Init+0xd4>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b94 <MX_GPIO_Init+0xd4>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aee:	4b29      	ldr	r3, [pc, #164]	@ (8001b94 <MX_GPIO_Init+0xd4>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af2:	4a28      	ldr	r2, [pc, #160]	@ (8001b94 <MX_GPIO_Init+0xd4>)
 8001af4:	f043 0320 	orr.w	r3, r3, #32
 8001af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afa:	4b26      	ldr	r3, [pc, #152]	@ (8001b94 <MX_GPIO_Init+0xd4>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afe:	f003 0320 	and.w	r3, r3, #32
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	4b23      	ldr	r3, [pc, #140]	@ (8001b94 <MX_GPIO_Init+0xd4>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0a:	4a22      	ldr	r2, [pc, #136]	@ (8001b94 <MX_GPIO_Init+0xd4>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b12:	4b20      	ldr	r3, [pc, #128]	@ (8001b94 <MX_GPIO_Init+0xd4>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b94 <MX_GPIO_Init+0xd4>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b22:	4a1c      	ldr	r2, [pc, #112]	@ (8001b94 <MX_GPIO_Init+0xd4>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b94 <MX_GPIO_Init+0xd4>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2120      	movs	r1, #32
 8001b3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b3e:	f001 fd53 	bl	80035e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b48:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	480f      	ldr	r0, [pc, #60]	@ (8001b98 <MX_GPIO_Init+0xd8>)
 8001b5a:	f001 fac9 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b5e:	2320      	movs	r3, #32
 8001b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b78:	f001 faba 	bl	80030f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2105      	movs	r1, #5
 8001b80:	2028      	movs	r0, #40	@ 0x28
 8001b82:	f000 ff4f 	bl	8002a24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b86:	2028      	movs	r0, #40	@ 0x28
 8001b88:	f000 ff66 	bl	8002a58 <HAL_NVIC_EnableIRQ>

}
 8001b8c:	bf00      	nop
 8001b8e:	3728      	adds	r7, #40	@ 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	48000800 	.word	0x48000800

08001b9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c14 <MX_I2C1_Init+0x78>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c18 <MX_I2C1_Init+0x7c>)
 8001baa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bac:	4b18      	ldr	r3, [pc, #96]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bbe:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bca:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bd6:	480e      	ldr	r0, [pc, #56]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bd8:	f001 fd5b 	bl	8003692 <HAL_I2C_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001be2:	f000 f92d 	bl	8001e40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001be6:	2100      	movs	r1, #0
 8001be8:	4809      	ldr	r0, [pc, #36]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bea:	f002 fb19 	bl	8004220 <HAL_I2CEx_ConfigAnalogFilter>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001bf4:	f000 f924 	bl	8001e40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bfc:	f002 fb5b 	bl	80042b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c06:	f000 f91b 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200048e8 	.word	0x200048e8
 8001c14:	40005400 	.word	0x40005400
 8001c18:	40621236 	.word	0x40621236

08001c1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b09e      	sub	sp, #120	@ 0x78
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	2254      	movs	r2, #84	@ 0x54
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f017 fe31 	bl	80198a4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc4 <HAL_I2C_MspInit+0xa8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d136      	bne.n	8001cba <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c4c:	2340      	movs	r3, #64	@ 0x40
 8001c4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 f9eb 	bl	8005034 <HAL_RCCEx_PeriphCLKConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c64:	f000 f8ec 	bl	8001e40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c68:	4b17      	ldr	r3, [pc, #92]	@ (8001cc8 <HAL_I2C_MspInit+0xac>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6c:	4a16      	ldr	r2, [pc, #88]	@ (8001cc8 <HAL_I2C_MspInit+0xac>)
 8001c6e:	f043 0302 	orr.w	r3, r3, #2
 8001c72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c74:	4b14      	ldr	r3, [pc, #80]	@ (8001cc8 <HAL_I2C_MspInit+0xac>)
 8001c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c80:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c84:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c86:	2312      	movs	r3, #18
 8001c88:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c92:	2304      	movs	r3, #4
 8001c94:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480b      	ldr	r0, [pc, #44]	@ (8001ccc <HAL_I2C_MspInit+0xb0>)
 8001c9e:	f001 fa27 	bl	80030f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ca2:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <HAL_I2C_MspInit+0xac>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca6:	4a08      	ldr	r2, [pc, #32]	@ (8001cc8 <HAL_I2C_MspInit+0xac>)
 8001ca8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cae:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <HAL_I2C_MspInit+0xac>)
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001cba:	bf00      	nop
 8001cbc:	3778      	adds	r7, #120	@ 0x78
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40005400 	.word	0x40005400
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	48000400 	.word	0x48000400

08001cd0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8001d0c <HAL_I2C_MspDeInit+0x3c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d10f      	bne.n	8001d02 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <HAL_I2C_MspDeInit+0x40>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <HAL_I2C_MspDeInit+0x40>)
 8001ce8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001cec:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001cee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cf2:	4808      	ldr	r0, [pc, #32]	@ (8001d14 <HAL_I2C_MspDeInit+0x44>)
 8001cf4:	f001 fb7e 	bl	80033f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001cf8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cfc:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <HAL_I2C_MspDeInit+0x44>)
 8001cfe:	f001 fb79 	bl	80033f4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40005400 	.word	0x40005400
 8001d10:	40021000 	.word	0x40021000
 8001d14:	48000400 	.word	0x48000400

08001d18 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <MX_IWDG_Init+0x34>)
 8001d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d50 <MX_IWDG_Init+0x38>)
 8001d20:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <MX_IWDG_Init+0x34>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001d28:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <MX_IWDG_Init+0x34>)
 8001d2a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001d2e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8001d30:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <MX_IWDG_Init+0x34>)
 8001d32:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001d36:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001d38:	4804      	ldr	r0, [pc, #16]	@ (8001d4c <MX_IWDG_Init+0x34>)
 8001d3a:	f002 fb08 	bl	800434e <HAL_IWDG_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001d44:	f000 f87c 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	2000493c 	.word	0x2000493c
 8001d50:	40003000 	.word	0x40003000

08001d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d58:	f000 fd75 	bl	8002846 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d5c:	f000 f812 	bl	8001d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d60:	f7ff feae 	bl	8001ac0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d64:	f7ff fe7a 	bl	8001a5c <MX_DMA_Init>
  MX_I2C1_Init();
 8001d68:	f7ff ff18 	bl	8001b9c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001d6c:	f000 fb8e 	bl	800248c <MX_LPUART1_UART_Init>
  MX_IWDG_Init();
 8001d70:	f7ff ffd2 	bl	8001d18 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d74:	f006 f8ba 	bl	8007eec <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001d78:	f7ff fa9c 	bl	80012b4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d7c:	f006 f8da 	bl	8007f34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <main+0x2c>

08001d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b094      	sub	sp, #80	@ 0x50
 8001d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8a:	f107 0318 	add.w	r3, r7, #24
 8001d8e:	2238      	movs	r2, #56	@ 0x38
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f017 fd86 	bl	80198a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001da6:	2000      	movs	r0, #0
 8001da8:	f002 fb30 	bl	800440c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001dac:	2309      	movs	r3, #9
 8001dae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001db0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001db4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001db6:	2301      	movs	r3, #1
 8001db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001dc2:	2306      	movs	r3, #6
 8001dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001dc6:	2355      	movs	r3, #85	@ 0x55
 8001dc8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd6:	f107 0318 	add.w	r3, r7, #24
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f002 fbca 	bl	8004574 <HAL_RCC_OscConfig>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001de6:	f000 f82b 	bl	8001e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dea:	230f      	movs	r3, #15
 8001dec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dee:	2303      	movs	r3, #3
 8001df0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2104      	movs	r1, #4
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 fec8 	bl	8004b98 <HAL_RCC_ClockConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e0e:	f000 f817 	bl	8001e40 <Error_Handler>
  }
}
 8001e12:	bf00      	nop
 8001e14:	3750      	adds	r7, #80	@ 0x50
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e2e:	f000 fd23 	bl	8002878 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40012c00 	.word	0x40012c00

08001e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e44:	b672      	cpsid	i
}
 8001e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <Error_Handler+0x8>

08001e4c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001e56:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <microros_allocate+0x3c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4413      	add	r3, r2
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <microros_allocate+0x3c>)
 8001e64:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <microros_allocate+0x40>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <microros_allocate+0x40>)
 8001e74:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff fba0 	bl	80015bc <pvPortMallocMicroROS>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000494c 	.word	0x2000494c
 8001e8c:	20004950 	.word	0x20004950

08001e90 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00c      	beq.n	8001eba <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff fcaf 	bl	8001804 <getBlockSize>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a06      	ldr	r2, [pc, #24]	@ (8001ec4 <microros_deallocate+0x34>)
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <microros_deallocate+0x34>)
 8001eb2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff fc49 	bl	800174c <vPortFreeMicroROS>
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20004950 	.word	0x20004950

08001ec8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001ed4:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <microros_reallocate+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	4413      	add	r3, r2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <microros_reallocate+0x64>)
 8001ee2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001ee4:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <microros_reallocate+0x68>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	4413      	add	r3, r2
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <microros_reallocate+0x68>)
 8001ef2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d104      	bne.n	8001f04 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001efa:	68b8      	ldr	r0, [r7, #8]
 8001efc:	f7ff fb5e 	bl	80015bc <pvPortMallocMicroROS>
 8001f00:	4603      	mov	r3, r0
 8001f02:	e00e      	b.n	8001f22 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7ff fc7d 	bl	8001804 <getBlockSize>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4a08      	ldr	r2, [pc, #32]	@ (8001f30 <microros_reallocate+0x68>)
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <microros_reallocate+0x68>)
 8001f16:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f7ff fc90 	bl	8001840 <pvPortReallocMicroROS>
 8001f20:	4603      	mov	r3, r0
  }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000494c 	.word	0x2000494c
 8001f30:	20004950 	.word	0x20004950

08001f34 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	fb02 f303 	mul.w	r3, r2, r3
 8001f48:	4a0c      	ldr	r2, [pc, #48]	@ (8001f7c <microros_zero_allocate+0x48>)
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <microros_zero_allocate+0x48>)
 8001f52:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	fb02 f303 	mul.w	r3, r2, r3
 8001f5c:	4a08      	ldr	r2, [pc, #32]	@ (8001f80 <microros_zero_allocate+0x4c>)
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	4413      	add	r3, r2
 8001f62:	461a      	mov	r2, r3
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <microros_zero_allocate+0x4c>)
 8001f66:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f7ff fc95 	bl	800189a <pvPortCallocMicroROS>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	2000494c 	.word	0x2000494c
 8001f80:	20004950 	.word	0x20004950
 8001f84:	00000000 	.word	0x00000000

08001f88 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001f88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001f9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f9e:	a320      	add	r3, pc, #128	@ (adr r3, 8002020 <UTILS_NanosecondsToTimespec+0x98>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	f7fe fe10 	bl	8000bc8 <__aeabi_ldivmod>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fb6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002020 <UTILS_NanosecondsToTimespec+0x98>)
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe fe04 	bl	8000bc8 <__aeabi_ldivmod>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	da20      	bge.n	800200e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4a11      	ldr	r2, [pc, #68]	@ (8002018 <UTILS_NanosecondsToTimespec+0x90>)
 8001fd2:	fb82 1203 	smull	r1, r2, r2, r3
 8001fd6:	1712      	asrs	r2, r2, #28
 8001fd8:	17db      	asrs	r3, r3, #31
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe6:	6979      	ldr	r1, [r7, #20]
 8001fe8:	17c8      	asrs	r0, r1, #31
 8001fea:	460c      	mov	r4, r1
 8001fec:	4605      	mov	r5, r0
 8001fee:	ebb2 0804 	subs.w	r8, r2, r4
 8001ff2:	eb63 0905 	sbc.w	r9, r3, r5
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	4906      	ldr	r1, [pc, #24]	@ (800201c <UTILS_NanosecondsToTimespec+0x94>)
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	441a      	add	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	609a      	str	r2, [r3, #8]
    }
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002018:	44b82fa1 	.word	0x44b82fa1
 800201c:	3b9aca00 	.word	0x3b9aca00
 8002020:	3b9aca00 	.word	0x3b9aca00
 8002024:	00000000 	.word	0x00000000

08002028 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800202c:	b08e      	sub	sp, #56	@ 0x38
 800202e:	af00      	add	r7, sp, #0
 8002030:	6278      	str	r0, [r7, #36]	@ 0x24
 8002032:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002034:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002038:	2300      	movs	r3, #0
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800204a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800204e:	4618      	mov	r0, r3
 8002050:	f007 faf4 	bl	800963c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002056:	17da      	asrs	r2, r3, #31
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	61fa      	str	r2, [r7, #28]
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	69b9      	ldr	r1, [r7, #24]
 8002066:	000b      	movs	r3, r1
 8002068:	2200      	movs	r2, #0
 800206a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800206e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002070:	2200      	movs	r2, #0
 8002072:	461c      	mov	r4, r3
 8002074:	4615      	mov	r5, r2
 8002076:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800207a:	1911      	adds	r1, r2, r4
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	416b      	adcs	r3, r5
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002086:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800208a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	f04f 0400 	mov.w	r4, #0
 8002096:	f04f 0500 	mov.w	r5, #0
 800209a:	015d      	lsls	r5, r3, #5
 800209c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80020a0:	0154      	lsls	r4, r2, #5
 80020a2:	4622      	mov	r2, r4
 80020a4:	462b      	mov	r3, r5
 80020a6:	ebb2 0800 	subs.w	r8, r2, r0
 80020aa:	eb63 0901 	sbc.w	r9, r3, r1
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80020ba:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80020be:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80020c2:	4690      	mov	r8, r2
 80020c4:	4699      	mov	r9, r3
 80020c6:	eb18 0a00 	adds.w	sl, r8, r0
 80020ca:	eb49 0b01 	adc.w	fp, r9, r1
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020da:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020de:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020e2:	ebb2 040a 	subs.w	r4, r2, sl
 80020e6:	603c      	str	r4, [r7, #0]
 80020e8:	eb63 030b 	sbc.w	r3, r3, fp
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020f2:	4623      	mov	r3, r4
 80020f4:	181b      	adds	r3, r3, r0
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	462b      	mov	r3, r5
 80020fa:	eb41 0303 	adc.w	r3, r1, r3
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	6a3a      	ldr	r2, [r7, #32]
 8002102:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002106:	f7ff ff3f 	bl	8001f88 <UTILS_NanosecondsToTimespec>

    return 0;
 800210a:	2300      	movs	r3, #0
 800210c:	4618      	mov	r0, r3
 800210e:	3738      	adds	r7, #56	@ 0x38
 8002110:	46bd      	mov	sp, r7
 8002112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <HAL_MspInit+0x50>)
 8002120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002122:	4a11      	ldr	r2, [pc, #68]	@ (8002168 <HAL_MspInit+0x50>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6613      	str	r3, [r2, #96]	@ 0x60
 800212a:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <HAL_MspInit+0x50>)
 800212c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <HAL_MspInit+0x50>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	4a0b      	ldr	r2, [pc, #44]	@ (8002168 <HAL_MspInit+0x50>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002140:	6593      	str	r3, [r2, #88]	@ 0x58
 8002142:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <HAL_MspInit+0x50>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	210f      	movs	r1, #15
 8002152:	f06f 0001 	mvn.w	r0, #1
 8002156:	f000 fc65 	bl	8002a24 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800215a:	f002 f9fb 	bl	8004554 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000

0800216c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08c      	sub	sp, #48	@ 0x30
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800217c:	4b2c      	ldr	r3, [pc, #176]	@ (8002230 <HAL_InitTick+0xc4>)
 800217e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002180:	4a2b      	ldr	r2, [pc, #172]	@ (8002230 <HAL_InitTick+0xc4>)
 8002182:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002186:	6613      	str	r3, [r2, #96]	@ 0x60
 8002188:	4b29      	ldr	r3, [pc, #164]	@ (8002230 <HAL_InitTick+0xc4>)
 800218a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002194:	f107 020c 	add.w	r2, r7, #12
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f002 fed0 	bl	8004f44 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80021a4:	f002 feb8 	bl	8004f18 <HAL_RCC_GetPCLK2Freq>
 80021a8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ac:	4a21      	ldr	r2, [pc, #132]	@ (8002234 <HAL_InitTick+0xc8>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	0c9b      	lsrs	r3, r3, #18
 80021b4:	3b01      	subs	r3, #1
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80021b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002238 <HAL_InitTick+0xcc>)
 80021ba:	4a20      	ldr	r2, [pc, #128]	@ (800223c <HAL_InitTick+0xd0>)
 80021bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80021be:	4b1e      	ldr	r3, [pc, #120]	@ (8002238 <HAL_InitTick+0xcc>)
 80021c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80021c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002238 <HAL_InitTick+0xcc>)
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80021cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <HAL_InitTick+0xcc>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d2:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <HAL_InitTick+0xcc>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80021d8:	4817      	ldr	r0, [pc, #92]	@ (8002238 <HAL_InitTick+0xcc>)
 80021da:	f003 f979 	bl	80054d0 <HAL_TIM_Base_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80021e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d11b      	bne.n	8002224 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80021ec:	4812      	ldr	r0, [pc, #72]	@ (8002238 <HAL_InitTick+0xcc>)
 80021ee:	f003 f9d1 	bl	8005594 <HAL_TIM_Base_Start_IT>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80021f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d111      	bne.n	8002224 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002200:	2019      	movs	r0, #25
 8002202:	f000 fc29 	bl	8002a58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b0f      	cmp	r3, #15
 800220a:	d808      	bhi.n	800221e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800220c:	2200      	movs	r2, #0
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	2019      	movs	r0, #25
 8002212:	f000 fc07 	bl	8002a24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002216:	4a0a      	ldr	r2, [pc, #40]	@ (8002240 <HAL_InitTick+0xd4>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	e002      	b.n	8002224 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002224:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002228:	4618      	mov	r0, r3
 800222a:	3730      	adds	r7, #48	@ 0x30
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	431bde83 	.word	0x431bde83
 8002238:	20004954 	.word	0x20004954
 800223c:	40012c00 	.word	0x40012c00
 8002240:	20000008 	.word	0x20000008

08002244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <NMI_Handler+0x4>

0800224c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <HardFault_Handler+0x4>

08002254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <MemManage_Handler+0x4>

0800225c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <BusFault_Handler+0x4>

08002264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <UsageFault_Handler+0x4>

0800226c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002280:	4802      	ldr	r0, [pc, #8]	@ (800228c <DMA1_Channel1_IRQHandler+0x10>)
 8002282:	f000 fdda 	bl	8002e3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20004a3c 	.word	0x20004a3c

08002290 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002294:	4802      	ldr	r0, [pc, #8]	@ (80022a0 <DMA1_Channel2_IRQHandler+0x10>)
 8002296:	f000 fdd0 	bl	8002e3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20004a9c 	.word	0x20004a9c

080022a4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022a8:	4802      	ldr	r0, [pc, #8]	@ (80022b4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80022aa:	f003 f9eb 	bl	8005684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20004954 	.word	0x20004954

080022b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80022bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80022c0:	f001 f9c4 	bl	800364c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80022cc:	4802      	ldr	r0, [pc, #8]	@ (80022d8 <LPUART1_IRQHandler+0x10>)
 80022ce:	f003 fdfd 	bl	8005ecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200049a8 	.word	0x200049a8

080022dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return 1;
 80022e0:	2301      	movs	r3, #1
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <_kill>:

int _kill(int pid, int sig)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022f6:	f017 fb69 	bl	80199cc <__errno>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2216      	movs	r2, #22
 80022fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002300:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <_exit>:

void _exit (int status)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002314:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ffe7 	bl	80022ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800231e:	bf00      	nop
 8002320:	e7fd      	b.n	800231e <_exit+0x12>

08002322 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b086      	sub	sp, #24
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	e00a      	b.n	800234a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002334:	f3af 8000 	nop.w
 8002338:	4601      	mov	r1, r0
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	60ba      	str	r2, [r7, #8]
 8002340:	b2ca      	uxtb	r2, r1
 8002342:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3301      	adds	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	429a      	cmp	r2, r3
 8002350:	dbf0      	blt.n	8002334 <_read+0x12>
  }

  return len;
 8002352:	687b      	ldr	r3, [r7, #4]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e009      	b.n	8002382 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	60ba      	str	r2, [r7, #8]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3301      	adds	r3, #1
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	429a      	cmp	r2, r3
 8002388:	dbf1      	blt.n	800236e <_write+0x12>
  }
  return len;
 800238a:	687b      	ldr	r3, [r7, #4]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_close>:

int _close(int file)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800239c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023bc:	605a      	str	r2, [r3, #4]
  return 0;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <_isatty>:

int _isatty(int file)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023d4:	2301      	movs	r3, #1
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002404:	4a14      	ldr	r2, [pc, #80]	@ (8002458 <_sbrk+0x5c>)
 8002406:	4b15      	ldr	r3, [pc, #84]	@ (800245c <_sbrk+0x60>)
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002410:	4b13      	ldr	r3, [pc, #76]	@ (8002460 <_sbrk+0x64>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002418:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <_sbrk+0x64>)
 800241a:	4a12      	ldr	r2, [pc, #72]	@ (8002464 <_sbrk+0x68>)
 800241c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800241e:	4b10      	ldr	r3, [pc, #64]	@ (8002460 <_sbrk+0x64>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	429a      	cmp	r2, r3
 800242a:	d207      	bcs.n	800243c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800242c:	f017 face 	bl	80199cc <__errno>
 8002430:	4603      	mov	r3, r0
 8002432:	220c      	movs	r2, #12
 8002434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800243a:	e009      	b.n	8002450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800243c:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002442:	4b07      	ldr	r3, [pc, #28]	@ (8002460 <_sbrk+0x64>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	4a05      	ldr	r2, [pc, #20]	@ (8002460 <_sbrk+0x64>)
 800244c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800244e:	68fb      	ldr	r3, [r7, #12]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20020000 	.word	0x20020000
 800245c:	00000400 	.word	0x00000400
 8002460:	200049a4 	.word	0x200049a4
 8002464:	2000bb30 	.word	0x2000bb30

08002468 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800246c:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <SystemInit+0x20>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002472:	4a05      	ldr	r2, [pc, #20]	@ (8002488 <SystemInit+0x20>)
 8002474:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002478:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002490:	4b20      	ldr	r3, [pc, #128]	@ (8002514 <MX_LPUART1_UART_Init+0x88>)
 8002492:	4a21      	ldr	r2, [pc, #132]	@ (8002518 <MX_LPUART1_UART_Init+0x8c>)
 8002494:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8002496:	4b1f      	ldr	r3, [pc, #124]	@ (8002514 <MX_LPUART1_UART_Init+0x88>)
 8002498:	4a20      	ldr	r2, [pc, #128]	@ (800251c <MX_LPUART1_UART_Init+0x90>)
 800249a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800249c:	4b1d      	ldr	r3, [pc, #116]	@ (8002514 <MX_LPUART1_UART_Init+0x88>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80024a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002514 <MX_LPUART1_UART_Init+0x88>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80024a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002514 <MX_LPUART1_UART_Init+0x88>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80024ae:	4b19      	ldr	r3, [pc, #100]	@ (8002514 <MX_LPUART1_UART_Init+0x88>)
 80024b0:	220c      	movs	r2, #12
 80024b2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b4:	4b17      	ldr	r3, [pc, #92]	@ (8002514 <MX_LPUART1_UART_Init+0x88>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ba:	4b16      	ldr	r3, [pc, #88]	@ (8002514 <MX_LPUART1_UART_Init+0x88>)
 80024bc:	2200      	movs	r2, #0
 80024be:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024c0:	4b14      	ldr	r3, [pc, #80]	@ (8002514 <MX_LPUART1_UART_Init+0x88>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024c6:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <MX_LPUART1_UART_Init+0x88>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80024cc:	4811      	ldr	r0, [pc, #68]	@ (8002514 <MX_LPUART1_UART_Init+0x88>)
 80024ce:	f003 fb4b 	bl	8005b68 <HAL_UART_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80024d8:	f7ff fcb2 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024dc:	2100      	movs	r1, #0
 80024de:	480d      	ldr	r0, [pc, #52]	@ (8002514 <MX_LPUART1_UART_Init+0x88>)
 80024e0:	f005 f85b 	bl	800759a <HAL_UARTEx_SetTxFifoThreshold>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80024ea:	f7ff fca9 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024ee:	2100      	movs	r1, #0
 80024f0:	4808      	ldr	r0, [pc, #32]	@ (8002514 <MX_LPUART1_UART_Init+0x88>)
 80024f2:	f005 f890 	bl	8007616 <HAL_UARTEx_SetRxFifoThreshold>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80024fc:	f7ff fca0 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002500:	4804      	ldr	r0, [pc, #16]	@ (8002514 <MX_LPUART1_UART_Init+0x88>)
 8002502:	f005 f811 	bl	8007528 <HAL_UARTEx_DisableFifoMode>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800250c:	f7ff fc98 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	200049a8 	.word	0x200049a8
 8002518:	40008000 	.word	0x40008000
 800251c:	001e8480 	.word	0x001e8480

08002520 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b09e      	sub	sp, #120	@ 0x78
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	2254      	movs	r2, #84	@ 0x54
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f017 f9af 	bl	80198a4 <memset>
  if(uartHandle->Instance==LPUART1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a4e      	ldr	r2, [pc, #312]	@ (8002684 <HAL_UART_MspInit+0x164>)
 800254c:	4293      	cmp	r3, r2
 800254e:	f040 8094 	bne.w	800267a <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002552:	2320      	movs	r3, #32
 8002554:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002556:	2300      	movs	r3, #0
 8002558:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800255a:	f107 0310 	add.w	r3, r7, #16
 800255e:	4618      	mov	r0, r3
 8002560:	f002 fd68 	bl	8005034 <HAL_RCCEx_PeriphCLKConfig>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800256a:	f7ff fc69 	bl	8001e40 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800256e:	4b46      	ldr	r3, [pc, #280]	@ (8002688 <HAL_UART_MspInit+0x168>)
 8002570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002572:	4a45      	ldr	r2, [pc, #276]	@ (8002688 <HAL_UART_MspInit+0x168>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800257a:	4b43      	ldr	r3, [pc, #268]	@ (8002688 <HAL_UART_MspInit+0x168>)
 800257c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002586:	4b40      	ldr	r3, [pc, #256]	@ (8002688 <HAL_UART_MspInit+0x168>)
 8002588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258a:	4a3f      	ldr	r2, [pc, #252]	@ (8002688 <HAL_UART_MspInit+0x168>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002592:	4b3d      	ldr	r3, [pc, #244]	@ (8002688 <HAL_UART_MspInit+0x168>)
 8002594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800259e:	230c      	movs	r3, #12
 80025a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80025ae:	230c      	movs	r3, #12
 80025b0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025b6:	4619      	mov	r1, r3
 80025b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025bc:	f000 fd98 	bl	80030f0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80025c0:	4b32      	ldr	r3, [pc, #200]	@ (800268c <HAL_UART_MspInit+0x16c>)
 80025c2:	4a33      	ldr	r2, [pc, #204]	@ (8002690 <HAL_UART_MspInit+0x170>)
 80025c4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80025c6:	4b31      	ldr	r3, [pc, #196]	@ (800268c <HAL_UART_MspInit+0x16c>)
 80025c8:	2222      	movs	r2, #34	@ 0x22
 80025ca:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025cc:	4b2f      	ldr	r3, [pc, #188]	@ (800268c <HAL_UART_MspInit+0x16c>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d2:	4b2e      	ldr	r3, [pc, #184]	@ (800268c <HAL_UART_MspInit+0x16c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025d8:	4b2c      	ldr	r3, [pc, #176]	@ (800268c <HAL_UART_MspInit+0x16c>)
 80025da:	2280      	movs	r2, #128	@ 0x80
 80025dc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025de:	4b2b      	ldr	r3, [pc, #172]	@ (800268c <HAL_UART_MspInit+0x16c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025e4:	4b29      	ldr	r3, [pc, #164]	@ (800268c <HAL_UART_MspInit+0x16c>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80025ea:	4b28      	ldr	r3, [pc, #160]	@ (800268c <HAL_UART_MspInit+0x16c>)
 80025ec:	2220      	movs	r2, #32
 80025ee:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80025f0:	4b26      	ldr	r3, [pc, #152]	@ (800268c <HAL_UART_MspInit+0x16c>)
 80025f2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80025f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80025f8:	4824      	ldr	r0, [pc, #144]	@ (800268c <HAL_UART_MspInit+0x16c>)
 80025fa:	f000 fa3b 	bl	8002a74 <HAL_DMA_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002604:	f7ff fc1c 	bl	8001e40 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a20      	ldr	r2, [pc, #128]	@ (800268c <HAL_UART_MspInit+0x16c>)
 800260c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002610:	4a1e      	ldr	r2, [pc, #120]	@ (800268c <HAL_UART_MspInit+0x16c>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002616:	4b1f      	ldr	r3, [pc, #124]	@ (8002694 <HAL_UART_MspInit+0x174>)
 8002618:	4a1f      	ldr	r2, [pc, #124]	@ (8002698 <HAL_UART_MspInit+0x178>)
 800261a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800261c:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <HAL_UART_MspInit+0x174>)
 800261e:	2223      	movs	r2, #35	@ 0x23
 8002620:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002622:	4b1c      	ldr	r3, [pc, #112]	@ (8002694 <HAL_UART_MspInit+0x174>)
 8002624:	2210      	movs	r2, #16
 8002626:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002628:	4b1a      	ldr	r3, [pc, #104]	@ (8002694 <HAL_UART_MspInit+0x174>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800262e:	4b19      	ldr	r3, [pc, #100]	@ (8002694 <HAL_UART_MspInit+0x174>)
 8002630:	2280      	movs	r2, #128	@ 0x80
 8002632:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002634:	4b17      	ldr	r3, [pc, #92]	@ (8002694 <HAL_UART_MspInit+0x174>)
 8002636:	2200      	movs	r2, #0
 8002638:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800263a:	4b16      	ldr	r3, [pc, #88]	@ (8002694 <HAL_UART_MspInit+0x174>)
 800263c:	2200      	movs	r2, #0
 800263e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002640:	4b14      	ldr	r3, [pc, #80]	@ (8002694 <HAL_UART_MspInit+0x174>)
 8002642:	2200      	movs	r2, #0
 8002644:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002646:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <HAL_UART_MspInit+0x174>)
 8002648:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800264c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800264e:	4811      	ldr	r0, [pc, #68]	@ (8002694 <HAL_UART_MspInit+0x174>)
 8002650:	f000 fa10 	bl	8002a74 <HAL_DMA_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 800265a:	f7ff fbf1 	bl	8001e40 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a0c      	ldr	r2, [pc, #48]	@ (8002694 <HAL_UART_MspInit+0x174>)
 8002662:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002664:	4a0b      	ldr	r2, [pc, #44]	@ (8002694 <HAL_UART_MspInit+0x174>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2105      	movs	r1, #5
 800266e:	205b      	movs	r0, #91	@ 0x5b
 8002670:	f000 f9d8 	bl	8002a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002674:	205b      	movs	r0, #91	@ 0x5b
 8002676:	f000 f9ef 	bl	8002a58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800267a:	bf00      	nop
 800267c:	3778      	adds	r7, #120	@ 0x78
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40008000 	.word	0x40008000
 8002688:	40021000 	.word	0x40021000
 800268c:	20004a3c 	.word	0x20004a3c
 8002690:	40020008 	.word	0x40020008
 8002694:	20004a9c 	.word	0x20004a9c
 8002698:	4002001c 	.word	0x4002001c

0800269c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80026aa:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80026ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026b0:	4904      	ldr	r1, [pc, #16]	@ (80026c4 <cubemx_transport_open+0x28>)
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f003 fb28 	bl	8005d08 <HAL_UART_Receive_DMA>
    return true;
 80026b8:	2301      	movs	r3, #1
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20004afc 	.word	0x20004afc

080026c8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80026d6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f003 fb61 	bl	8005da0 <HAL_UART_DMAStop>
    return true;
 80026de:	2301      	movs	r3, #1
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80026fc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002704:	2b20      	cmp	r3, #32
 8002706:	d11b      	bne.n	8002740 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	b29b      	uxth	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	6978      	ldr	r0, [r7, #20]
 8002712:	f003 fa79 	bl	8005c08 <HAL_UART_Transmit_DMA>
 8002716:	4603      	mov	r3, r0
 8002718:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800271a:	e002      	b.n	8002722 <cubemx_transport_write+0x3a>
            osDelay(1);
 800271c:	2001      	movs	r0, #1
 800271e:	f005 fcc1 	bl	80080a4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002722:	7cfb      	ldrb	r3, [r7, #19]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d104      	bne.n	8002732 <cubemx_transport_write+0x4a>
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272e:	2b20      	cmp	r3, #32
 8002730:	d1f4      	bne.n	800271c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8002732:	7cfb      	ldrb	r3, [r7, #19]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <cubemx_transport_write+0x54>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	e002      	b.n	8002742 <cubemx_transport_write+0x5a>
 800273c:	2300      	movs	r3, #0
 800273e:	e000      	b.n	8002742 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8002740:	2300      	movs	r3, #0
    }
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002760:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002766:	b672      	cpsid	i
}
 8002768:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002778:	4a1b      	ldr	r2, [pc, #108]	@ (80027e8 <cubemx_transport_read+0x9c>)
 800277a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800277c:	b662      	cpsie	i
}
 800277e:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	3301      	adds	r3, #1
 8002784:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002786:	2001      	movs	r0, #1
 8002788:	f005 fc8c 	bl	80080a4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800278c:	4b17      	ldr	r3, [pc, #92]	@ (80027ec <cubemx_transport_read+0xa0>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b15      	ldr	r3, [pc, #84]	@ (80027e8 <cubemx_transport_read+0x9c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d103      	bne.n	80027a0 <cubemx_transport_read+0x54>
 8002798:	69fa      	ldr	r2, [r7, #28]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	dbe2      	blt.n	8002766 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80027a4:	e011      	b.n	80027ca <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80027a6:	4b11      	ldr	r3, [pc, #68]	@ (80027ec <cubemx_transport_read+0xa0>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	440b      	add	r3, r1
 80027b0:	490f      	ldr	r1, [pc, #60]	@ (80027f0 <cubemx_transport_read+0xa4>)
 80027b2:	5c8a      	ldrb	r2, [r1, r2]
 80027b4:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80027b6:	4b0d      	ldr	r3, [pc, #52]	@ (80027ec <cubemx_transport_read+0xa0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3301      	adds	r3, #1
 80027bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027c0:	4a0a      	ldr	r2, [pc, #40]	@ (80027ec <cubemx_transport_read+0xa0>)
 80027c2:	6013      	str	r3, [r2, #0]
        wrote++;
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	3301      	adds	r3, #1
 80027c8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80027ca:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <cubemx_transport_read+0xa0>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <cubemx_transport_read+0x9c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d003      	beq.n	80027de <cubemx_transport_read+0x92>
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d3e3      	bcc.n	80027a6 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 80027de:	69bb      	ldr	r3, [r7, #24]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20005300 	.word	0x20005300
 80027ec:	200052fc 	.word	0x200052fc
 80027f0:	20004afc 	.word	0x20004afc

080027f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027f4:	480d      	ldr	r0, [pc, #52]	@ (800282c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027f8:	f7ff fe36 	bl	8002468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027fc:	480c      	ldr	r0, [pc, #48]	@ (8002830 <LoopForever+0x6>)
  ldr r1, =_edata
 80027fe:	490d      	ldr	r1, [pc, #52]	@ (8002834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002800:	4a0d      	ldr	r2, [pc, #52]	@ (8002838 <LoopForever+0xe>)
  movs r3, #0
 8002802:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002804:	e002      	b.n	800280c <LoopCopyDataInit>

08002806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280a:	3304      	adds	r3, #4

0800280c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800280c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800280e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002810:	d3f9      	bcc.n	8002806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002812:	4a0a      	ldr	r2, [pc, #40]	@ (800283c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002814:	4c0a      	ldr	r4, [pc, #40]	@ (8002840 <LoopForever+0x16>)
  movs r3, #0
 8002816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002818:	e001      	b.n	800281e <LoopFillZerobss>

0800281a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800281c:	3204      	adds	r2, #4

0800281e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800281e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002820:	d3fb      	bcc.n	800281a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002822:	f017 f8d9 	bl	80199d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002826:	f7ff fa95 	bl	8001d54 <main>

0800282a <LoopForever>:

LoopForever:
    b LoopForever
 800282a:	e7fe      	b.n	800282a <LoopForever>
  ldr   r0, =_estack
 800282c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002834:	20000a20 	.word	0x20000a20
  ldr r2, =_sidata
 8002838:	0801c858 	.word	0x0801c858
  ldr r2, =_sbss
 800283c:	20000a20 	.word	0x20000a20
  ldr r4, =_ebss
 8002840:	2000bb2c 	.word	0x2000bb2c

08002844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002844:	e7fe      	b.n	8002844 <ADC1_2_IRQHandler>

08002846 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002850:	2003      	movs	r0, #3
 8002852:	f000 f8dc 	bl	8002a0e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002856:	200f      	movs	r0, #15
 8002858:	f7ff fc88 	bl	800216c <HAL_InitTick>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	71fb      	strb	r3, [r7, #7]
 8002866:	e001      	b.n	800286c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002868:	f7ff fc56 	bl	8002118 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800286c:	79fb      	ldrb	r3, [r7, #7]

}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800287c:	4b05      	ldr	r3, [pc, #20]	@ (8002894 <HAL_IncTick+0x1c>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b05      	ldr	r3, [pc, #20]	@ (8002898 <HAL_IncTick+0x20>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4413      	add	r3, r2
 8002886:	4a03      	ldr	r2, [pc, #12]	@ (8002894 <HAL_IncTick+0x1c>)
 8002888:	6013      	str	r3, [r2, #0]
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	20005304 	.word	0x20005304
 8002898:	2000000c 	.word	0x2000000c

0800289c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return uwTick;
 80028a0:	4b03      	ldr	r3, [pc, #12]	@ (80028b0 <HAL_GetTick+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20005304 	.word	0x20005304

080028b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c4:	4b0c      	ldr	r3, [pc, #48]	@ (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028d0:	4013      	ands	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e6:	4a04      	ldr	r2, [pc, #16]	@ (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	60d3      	str	r3, [r2, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002900:	4b04      	ldr	r3, [pc, #16]	@ (8002914 <__NVIC_GetPriorityGrouping+0x18>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	f003 0307 	and.w	r3, r3, #7
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	2b00      	cmp	r3, #0
 8002928:	db0b      	blt.n	8002942 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	f003 021f 	and.w	r2, r3, #31
 8002930:	4907      	ldr	r1, [pc, #28]	@ (8002950 <__NVIC_EnableIRQ+0x38>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	2001      	movs	r0, #1
 800293a:	fa00 f202 	lsl.w	r2, r0, r2
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	e000e100 	.word	0xe000e100

08002954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	6039      	str	r1, [r7, #0]
 800295e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002964:	2b00      	cmp	r3, #0
 8002966:	db0a      	blt.n	800297e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	b2da      	uxtb	r2, r3
 800296c:	490c      	ldr	r1, [pc, #48]	@ (80029a0 <__NVIC_SetPriority+0x4c>)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	0112      	lsls	r2, r2, #4
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	440b      	add	r3, r1
 8002978:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800297c:	e00a      	b.n	8002994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	4908      	ldr	r1, [pc, #32]	@ (80029a4 <__NVIC_SetPriority+0x50>)
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	3b04      	subs	r3, #4
 800298c:	0112      	lsls	r2, r2, #4
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	440b      	add	r3, r1
 8002992:	761a      	strb	r2, [r3, #24]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000e100 	.word	0xe000e100
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b089      	sub	sp, #36	@ 0x24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f1c3 0307 	rsb	r3, r3, #7
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	bf28      	it	cs
 80029c6:	2304      	movcs	r3, #4
 80029c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3304      	adds	r3, #4
 80029ce:	2b06      	cmp	r3, #6
 80029d0:	d902      	bls.n	80029d8 <NVIC_EncodePriority+0x30>
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3b03      	subs	r3, #3
 80029d6:	e000      	b.n	80029da <NVIC_EncodePriority+0x32>
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43da      	mvns	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	401a      	ands	r2, r3
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fa01 f303 	lsl.w	r3, r1, r3
 80029fa:	43d9      	mvns	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	4313      	orrs	r3, r2
         );
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3724      	adds	r7, #36	@ 0x24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ff4c 	bl	80028b4 <__NVIC_SetPriorityGrouping>
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a32:	f7ff ff63 	bl	80028fc <__NVIC_GetPriorityGrouping>
 8002a36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	6978      	ldr	r0, [r7, #20]
 8002a3e:	f7ff ffb3 	bl	80029a8 <NVIC_EncodePriority>
 8002a42:	4602      	mov	r2, r0
 8002a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff82 	bl	8002954 <__NVIC_SetPriority>
}
 8002a50:	bf00      	nop
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ff56 	bl	8002918 <__NVIC_EnableIRQ>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e08d      	b.n	8002ba2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4b47      	ldr	r3, [pc, #284]	@ (8002bac <HAL_DMA_Init+0x138>)
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d80f      	bhi.n	8002ab2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	4b45      	ldr	r3, [pc, #276]	@ (8002bb0 <HAL_DMA_Init+0x13c>)
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4a45      	ldr	r2, [pc, #276]	@ (8002bb4 <HAL_DMA_Init+0x140>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	009a      	lsls	r2, r3, #2
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a42      	ldr	r2, [pc, #264]	@ (8002bb8 <HAL_DMA_Init+0x144>)
 8002aae:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ab0:	e00e      	b.n	8002ad0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b40      	ldr	r3, [pc, #256]	@ (8002bbc <HAL_DMA_Init+0x148>)
 8002aba:	4413      	add	r3, r2
 8002abc:	4a3d      	ldr	r2, [pc, #244]	@ (8002bb4 <HAL_DMA_Init+0x140>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	009a      	lsls	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a3c      	ldr	r2, [pc, #240]	@ (8002bc0 <HAL_DMA_Init+0x14c>)
 8002ace:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fa82 	bl	800302c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b30:	d102      	bne.n	8002b38 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b4c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d010      	beq.n	8002b78 <HAL_DMA_Init+0x104>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d80c      	bhi.n	8002b78 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 faa2 	bl	80030a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	e008      	b.n	8002b8a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40020407 	.word	0x40020407
 8002bb0:	bffdfff8 	.word	0xbffdfff8
 8002bb4:	cccccccd 	.word	0xcccccccd
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	bffdfbf8 	.word	0xbffdfbf8
 8002bc0:	40020400 	.word	0x40020400

08002bc4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_DMA_Start_IT+0x20>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e066      	b.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d155      	bne.n	8002ca4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0201 	bic.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f9c7 	bl	8002fb0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 020e 	orr.w	r2, r2, #14
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	e00f      	b.n	8002c5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0204 	bic.w	r2, r2, #4
 8002c4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 020a 	orr.w	r2, r2, #10
 8002c5a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d007      	beq.n	8002c7a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c78:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c90:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e005      	b.n	8002cb0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cac:	2302      	movs	r3, #2
 8002cae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b085      	sub	sp, #20
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d005      	beq.n	8002cde <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
 8002cdc:	e037      	b.n	8002d4e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 020e 	bic.w	r2, r2, #14
 8002cec:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cfc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0201 	bic.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d12:	f003 021f 	and.w	r2, r3, #31
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d20:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d2a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00c      	beq.n	8002d4e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d42:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d4c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d00d      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2204      	movs	r2, #4
 8002d88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
 8002d9e:	e047      	b.n	8002e30 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 020e 	bic.w	r2, r2, #14
 8002dae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ddc:	2101      	movs	r1, #1
 8002dde:	fa01 f202 	lsl.w	r2, r1, r2
 8002de2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002dec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00c      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e04:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e0e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	4798      	blx	r3
    }
  }
  return status;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d026      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x7a>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d021      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d107      	bne.n	8002e8e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0204 	bic.w	r2, r2, #4
 8002e8c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e92:	f003 021f 	and.w	r2, r3, #31
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	2104      	movs	r1, #4
 8002e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d071      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002eb2:	e06c      	b.n	8002f8e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d02e      	beq.n	8002f26 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d029      	beq.n	8002f26 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10b      	bne.n	8002ef8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 020a 	bic.w	r2, r2, #10
 8002eee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efc:	f003 021f 	and.w	r2, r3, #31
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	2102      	movs	r1, #2
 8002f06:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d038      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f24:	e033      	b.n	8002f8e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	2208      	movs	r2, #8
 8002f30:	409a      	lsls	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d02a      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d025      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 020e 	bic.w	r2, r2, #14
 8002f52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	2101      	movs	r1, #1
 8002f62:	fa01 f202 	lsl.w	r2, r1, r2
 8002f66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d004      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f8e:	bf00      	nop
 8002f90:	bf00      	nop
}
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002fc6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002fd8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fde:	f003 021f 	and.w	r2, r3, #31
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d108      	bne.n	8003010 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800300e:	e007      	b.n	8003020 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	60da      	str	r2, [r3, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	4b16      	ldr	r3, [pc, #88]	@ (8003094 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800303c:	429a      	cmp	r2, r3
 800303e:	d802      	bhi.n	8003046 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003040:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	e001      	b.n	800304a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003046:	4b15      	ldr	r3, [pc, #84]	@ (800309c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003048:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	3b08      	subs	r3, #8
 8003056:	4a12      	ldr	r2, [pc, #72]	@ (80030a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003064:	089b      	lsrs	r3, r3, #2
 8003066:	009a      	lsls	r2, r3, #2
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4413      	add	r3, r2
 800306c:	461a      	mov	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a0b      	ldr	r2, [pc, #44]	@ (80030a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003076:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	2201      	movs	r2, #1
 8003080:	409a      	lsls	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40020407 	.word	0x40020407
 8003098:	40020800 	.word	0x40020800
 800309c:	40020820 	.word	0x40020820
 80030a0:	cccccccd 	.word	0xcccccccd
 80030a4:	40020880 	.word	0x40020880

080030a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4b0b      	ldr	r3, [pc, #44]	@ (80030e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	461a      	mov	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a08      	ldr	r2, [pc, #32]	@ (80030ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80030ca:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	2201      	movs	r2, #1
 80030d6:	409a      	lsls	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	1000823f 	.word	0x1000823f
 80030ec:	40020940 	.word	0x40020940

080030f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030fe:	e15a      	b.n	80033b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2101      	movs	r1, #1
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	4013      	ands	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 814c 	beq.w	80033b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b01      	cmp	r3, #1
 8003122:	d005      	beq.n	8003130 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800312c:	2b02      	cmp	r3, #2
 800312e:	d130      	bne.n	8003192 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	2203      	movs	r2, #3
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003166:	2201      	movs	r2, #1
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4013      	ands	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	f003 0201 	and.w	r2, r3, #1
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b03      	cmp	r3, #3
 800319c:	d017      	beq.n	80031ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	2203      	movs	r2, #3
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d123      	bne.n	8003222 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	08da      	lsrs	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3208      	adds	r2, #8
 80031e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	220f      	movs	r2, #15
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4013      	ands	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	08da      	lsrs	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3208      	adds	r2, #8
 800321c:	6939      	ldr	r1, [r7, #16]
 800321e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	2203      	movs	r2, #3
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0203 	and.w	r2, r3, #3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 80a6 	beq.w	80033b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003264:	4b5b      	ldr	r3, [pc, #364]	@ (80033d4 <HAL_GPIO_Init+0x2e4>)
 8003266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003268:	4a5a      	ldr	r2, [pc, #360]	@ (80033d4 <HAL_GPIO_Init+0x2e4>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003270:	4b58      	ldr	r3, [pc, #352]	@ (80033d4 <HAL_GPIO_Init+0x2e4>)
 8003272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800327c:	4a56      	ldr	r2, [pc, #344]	@ (80033d8 <HAL_GPIO_Init+0x2e8>)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	089b      	lsrs	r3, r3, #2
 8003282:	3302      	adds	r3, #2
 8003284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003288:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	220f      	movs	r2, #15
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80032a6:	d01f      	beq.n	80032e8 <HAL_GPIO_Init+0x1f8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a4c      	ldr	r2, [pc, #304]	@ (80033dc <HAL_GPIO_Init+0x2ec>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d019      	beq.n	80032e4 <HAL_GPIO_Init+0x1f4>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a4b      	ldr	r2, [pc, #300]	@ (80033e0 <HAL_GPIO_Init+0x2f0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d013      	beq.n	80032e0 <HAL_GPIO_Init+0x1f0>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a4a      	ldr	r2, [pc, #296]	@ (80033e4 <HAL_GPIO_Init+0x2f4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00d      	beq.n	80032dc <HAL_GPIO_Init+0x1ec>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a49      	ldr	r2, [pc, #292]	@ (80033e8 <HAL_GPIO_Init+0x2f8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d007      	beq.n	80032d8 <HAL_GPIO_Init+0x1e8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a48      	ldr	r2, [pc, #288]	@ (80033ec <HAL_GPIO_Init+0x2fc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d101      	bne.n	80032d4 <HAL_GPIO_Init+0x1e4>
 80032d0:	2305      	movs	r3, #5
 80032d2:	e00a      	b.n	80032ea <HAL_GPIO_Init+0x1fa>
 80032d4:	2306      	movs	r3, #6
 80032d6:	e008      	b.n	80032ea <HAL_GPIO_Init+0x1fa>
 80032d8:	2304      	movs	r3, #4
 80032da:	e006      	b.n	80032ea <HAL_GPIO_Init+0x1fa>
 80032dc:	2303      	movs	r3, #3
 80032de:	e004      	b.n	80032ea <HAL_GPIO_Init+0x1fa>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e002      	b.n	80032ea <HAL_GPIO_Init+0x1fa>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <HAL_GPIO_Init+0x1fa>
 80032e8:	2300      	movs	r3, #0
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	f002 0203 	and.w	r2, r2, #3
 80032f0:	0092      	lsls	r2, r2, #2
 80032f2:	4093      	lsls	r3, r2
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032fa:	4937      	ldr	r1, [pc, #220]	@ (80033d8 <HAL_GPIO_Init+0x2e8>)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	3302      	adds	r3, #2
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003308:	4b39      	ldr	r3, [pc, #228]	@ (80033f0 <HAL_GPIO_Init+0x300>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	43db      	mvns	r3, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800332c:	4a30      	ldr	r2, [pc, #192]	@ (80033f0 <HAL_GPIO_Init+0x300>)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003332:	4b2f      	ldr	r3, [pc, #188]	@ (80033f0 <HAL_GPIO_Init+0x300>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003356:	4a26      	ldr	r2, [pc, #152]	@ (80033f0 <HAL_GPIO_Init+0x300>)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800335c:	4b24      	ldr	r3, [pc, #144]	@ (80033f0 <HAL_GPIO_Init+0x300>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	43db      	mvns	r3, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003380:	4a1b      	ldr	r2, [pc, #108]	@ (80033f0 <HAL_GPIO_Init+0x300>)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003386:	4b1a      	ldr	r3, [pc, #104]	@ (80033f0 <HAL_GPIO_Init+0x300>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	43db      	mvns	r3, r3
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033aa:	4a11      	ldr	r2, [pc, #68]	@ (80033f0 <HAL_GPIO_Init+0x300>)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	3301      	adds	r3, #1
 80033b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f47f ae9d 	bne.w	8003100 <HAL_GPIO_Init+0x10>
  }
}
 80033c6:	bf00      	nop
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40010000 	.word	0x40010000
 80033dc:	48000400 	.word	0x48000400
 80033e0:	48000800 	.word	0x48000800
 80033e4:	48000c00 	.word	0x48000c00
 80033e8:	48001000 	.word	0x48001000
 80033ec:	48001400 	.word	0x48001400
 80033f0:	40010400 	.word	0x40010400

080033f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003402:	e0bd      	b.n	8003580 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003404:	2201      	movs	r2, #1
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	4013      	ands	r3, r2
 8003410:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80b0 	beq.w	800357a <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800341a:	4a60      	ldr	r2, [pc, #384]	@ (800359c <HAL_GPIO_DeInit+0x1a8>)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	089b      	lsrs	r3, r3, #2
 8003420:	3302      	adds	r3, #2
 8003422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003426:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	220f      	movs	r2, #15
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4013      	ands	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003442:	d01f      	beq.n	8003484 <HAL_GPIO_DeInit+0x90>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a56      	ldr	r2, [pc, #344]	@ (80035a0 <HAL_GPIO_DeInit+0x1ac>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d019      	beq.n	8003480 <HAL_GPIO_DeInit+0x8c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a55      	ldr	r2, [pc, #340]	@ (80035a4 <HAL_GPIO_DeInit+0x1b0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <HAL_GPIO_DeInit+0x88>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a54      	ldr	r2, [pc, #336]	@ (80035a8 <HAL_GPIO_DeInit+0x1b4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00d      	beq.n	8003478 <HAL_GPIO_DeInit+0x84>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a53      	ldr	r2, [pc, #332]	@ (80035ac <HAL_GPIO_DeInit+0x1b8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d007      	beq.n	8003474 <HAL_GPIO_DeInit+0x80>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a52      	ldr	r2, [pc, #328]	@ (80035b0 <HAL_GPIO_DeInit+0x1bc>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d101      	bne.n	8003470 <HAL_GPIO_DeInit+0x7c>
 800346c:	2305      	movs	r3, #5
 800346e:	e00a      	b.n	8003486 <HAL_GPIO_DeInit+0x92>
 8003470:	2306      	movs	r3, #6
 8003472:	e008      	b.n	8003486 <HAL_GPIO_DeInit+0x92>
 8003474:	2304      	movs	r3, #4
 8003476:	e006      	b.n	8003486 <HAL_GPIO_DeInit+0x92>
 8003478:	2303      	movs	r3, #3
 800347a:	e004      	b.n	8003486 <HAL_GPIO_DeInit+0x92>
 800347c:	2302      	movs	r3, #2
 800347e:	e002      	b.n	8003486 <HAL_GPIO_DeInit+0x92>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <HAL_GPIO_DeInit+0x92>
 8003484:	2300      	movs	r3, #0
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	f002 0203 	and.w	r2, r2, #3
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	4093      	lsls	r3, r2
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	429a      	cmp	r2, r3
 8003494:	d132      	bne.n	80034fc <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003496:	4b47      	ldr	r3, [pc, #284]	@ (80035b4 <HAL_GPIO_DeInit+0x1c0>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	43db      	mvns	r3, r3
 800349e:	4945      	ldr	r1, [pc, #276]	@ (80035b4 <HAL_GPIO_DeInit+0x1c0>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80034a4:	4b43      	ldr	r3, [pc, #268]	@ (80035b4 <HAL_GPIO_DeInit+0x1c0>)
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	4941      	ldr	r1, [pc, #260]	@ (80035b4 <HAL_GPIO_DeInit+0x1c0>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80034b2:	4b40      	ldr	r3, [pc, #256]	@ (80035b4 <HAL_GPIO_DeInit+0x1c0>)
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	493e      	ldr	r1, [pc, #248]	@ (80035b4 <HAL_GPIO_DeInit+0x1c0>)
 80034bc:	4013      	ands	r3, r2
 80034be:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80034c0:	4b3c      	ldr	r3, [pc, #240]	@ (80035b4 <HAL_GPIO_DeInit+0x1c0>)
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	493a      	ldr	r1, [pc, #232]	@ (80035b4 <HAL_GPIO_DeInit+0x1c0>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	220f      	movs	r2, #15
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80034de:	4a2f      	ldr	r2, [pc, #188]	@ (800359c <HAL_GPIO_DeInit+0x1a8>)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	089b      	lsrs	r3, r3, #2
 80034e4:	3302      	adds	r3, #2
 80034e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	43da      	mvns	r2, r3
 80034ee:	482b      	ldr	r0, [pc, #172]	@ (800359c <HAL_GPIO_DeInit+0x1a8>)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	089b      	lsrs	r3, r3, #2
 80034f4:	400a      	ands	r2, r1
 80034f6:	3302      	adds	r3, #2
 80034f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	2103      	movs	r1, #3
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	08da      	lsrs	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3208      	adds	r2, #8
 8003518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	220f      	movs	r2, #15
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	08d2      	lsrs	r2, r2, #3
 8003530:	4019      	ands	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3208      	adds	r2, #8
 8003536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	2103      	movs	r1, #3
 8003544:	fa01 f303 	lsl.w	r3, r1, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	401a      	ands	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	2101      	movs	r1, #1
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	fa01 f303 	lsl.w	r3, r1, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	401a      	ands	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	2103      	movs	r1, #3
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	401a      	ands	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	609a      	str	r2, [r3, #8]
    }

    position++;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	3301      	adds	r3, #1
 800357e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	f47f af3b 	bne.w	8003404 <HAL_GPIO_DeInit+0x10>
  }
}
 800358e:	bf00      	nop
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	40010000 	.word	0x40010000
 80035a0:	48000400 	.word	0x48000400
 80035a4:	48000800 	.word	0x48000800
 80035a8:	48000c00 	.word	0x48000c00
 80035ac:	48001000 	.word	0x48001000
 80035b0:	48001400 	.word	0x48001400
 80035b4:	40010400 	.word	0x40010400

080035b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	887b      	ldrh	r3, [r7, #2]
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
 80035d4:	e001      	b.n	80035da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035da:	7bfb      	ldrb	r3, [r7, #15]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	807b      	strh	r3, [r7, #2]
 80035f4:	4613      	mov	r3, r2
 80035f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035f8:	787b      	ldrb	r3, [r7, #1]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035fe:	887a      	ldrh	r2, [r7, #2]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003604:	e002      	b.n	800360c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003606:	887a      	ldrh	r2, [r7, #2]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4013      	ands	r3, r2
 8003630:	041a      	lsls	r2, r3, #16
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	43d9      	mvns	r1, r3
 8003636:	887b      	ldrh	r3, [r7, #2]
 8003638:	400b      	ands	r3, r1
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	619a      	str	r2, [r3, #24]
}
 8003640:	bf00      	nop
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003656:	4b08      	ldr	r3, [pc, #32]	@ (8003678 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d006      	beq.n	8003670 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003662:	4a05      	ldr	r2, [pc, #20]	@ (8003678 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003664:	88fb      	ldrh	r3, [r7, #6]
 8003666:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	4618      	mov	r0, r3
 800366c:	f000 f806 	bl	800367c <HAL_GPIO_EXTI_Callback>
  }
}
 8003670:	bf00      	nop
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40010400 	.word	0x40010400

0800367c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e08d      	b.n	80037c0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7fe faaf 	bl	8001c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2224      	movs	r2, #36	@ 0x24
 80036c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d107      	bne.n	800370c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003708:	609a      	str	r2, [r3, #8]
 800370a:	e006      	b.n	800371a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003718:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d108      	bne.n	8003734 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	e007      	b.n	8003744 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003742:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003756:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003766:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69d9      	ldr	r1, [r3, #28]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1a      	ldr	r2, [r3, #32]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0201 	orr.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e021      	b.n	800381e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2224      	movs	r2, #36	@ 0x24
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0201 	bic.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fe fa6c 	bl	8001cd0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af02      	add	r7, sp, #8
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	4608      	mov	r0, r1
 8003832:	4611      	mov	r1, r2
 8003834:	461a      	mov	r2, r3
 8003836:	4603      	mov	r3, r0
 8003838:	817b      	strh	r3, [r7, #10]
 800383a:	460b      	mov	r3, r1
 800383c:	813b      	strh	r3, [r7, #8]
 800383e:	4613      	mov	r3, r2
 8003840:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b20      	cmp	r3, #32
 800384c:	f040 80f9 	bne.w	8003a42 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <HAL_I2C_Mem_Write+0x34>
 8003856:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003862:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0ed      	b.n	8003a44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_I2C_Mem_Write+0x4e>
 8003872:	2302      	movs	r3, #2
 8003874:	e0e6      	b.n	8003a44 <HAL_I2C_Mem_Write+0x21c>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800387e:	f7ff f80d 	bl	800289c <HAL_GetTick>
 8003882:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	2319      	movs	r3, #25
 800388a:	2201      	movs	r2, #1
 800388c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 facf 	bl	8003e34 <I2C_WaitOnFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0d1      	b.n	8003a44 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2221      	movs	r2, #33	@ 0x21
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2240      	movs	r2, #64	@ 0x40
 80038ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a3a      	ldr	r2, [r7, #32]
 80038ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80038c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038c8:	88f8      	ldrh	r0, [r7, #6]
 80038ca:	893a      	ldrh	r2, [r7, #8]
 80038cc:	8979      	ldrh	r1, [r7, #10]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	4603      	mov	r3, r0
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f9df 	bl	8003c9c <I2C_RequestMemoryWrite>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0a9      	b.n	8003a44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2bff      	cmp	r3, #255	@ 0xff
 80038f8:	d90e      	bls.n	8003918 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	22ff      	movs	r2, #255	@ 0xff
 80038fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003904:	b2da      	uxtb	r2, r3
 8003906:	8979      	ldrh	r1, [r7, #10]
 8003908:	2300      	movs	r3, #0
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 fc53 	bl	80041bc <I2C_TransferConfig>
 8003916:	e00f      	b.n	8003938 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003926:	b2da      	uxtb	r2, r3
 8003928:	8979      	ldrh	r1, [r7, #10]
 800392a:	2300      	movs	r3, #0
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fc42 	bl	80041bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fad2 	bl	8003ee6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e07b      	b.n	8003a44 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	781a      	ldrb	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d034      	beq.n	80039f0 <HAL_I2C_Mem_Write+0x1c8>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398a:	2b00      	cmp	r3, #0
 800398c:	d130      	bne.n	80039f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003994:	2200      	movs	r2, #0
 8003996:	2180      	movs	r1, #128	@ 0x80
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 fa4b 	bl	8003e34 <I2C_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e04d      	b.n	8003a44 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2bff      	cmp	r3, #255	@ 0xff
 80039b0:	d90e      	bls.n	80039d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	22ff      	movs	r2, #255	@ 0xff
 80039b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	8979      	ldrh	r1, [r7, #10]
 80039c0:	2300      	movs	r3, #0
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fbf7 	bl	80041bc <I2C_TransferConfig>
 80039ce:	e00f      	b.n	80039f0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	8979      	ldrh	r1, [r7, #10]
 80039e2:	2300      	movs	r3, #0
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fbe6 	bl	80041bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d19e      	bne.n	8003938 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 fab8 	bl	8003f74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e01a      	b.n	8003a44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2220      	movs	r2, #32
 8003a14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6859      	ldr	r1, [r3, #4]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b0a      	ldr	r3, [pc, #40]	@ (8003a4c <HAL_I2C_Mem_Write+0x224>)
 8003a22:	400b      	ands	r3, r1
 8003a24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e000      	b.n	8003a44 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a42:	2302      	movs	r3, #2
  }
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	fe00e800 	.word	0xfe00e800

08003a50 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	4608      	mov	r0, r1
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4603      	mov	r3, r0
 8003a60:	817b      	strh	r3, [r7, #10]
 8003a62:	460b      	mov	r3, r1
 8003a64:	813b      	strh	r3, [r7, #8]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	f040 80fd 	bne.w	8003c72 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <HAL_I2C_Mem_Read+0x34>
 8003a7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d105      	bne.n	8003a90 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a8a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0f1      	b.n	8003c74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_I2C_Mem_Read+0x4e>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e0ea      	b.n	8003c74 <HAL_I2C_Mem_Read+0x224>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003aa6:	f7fe fef9 	bl	800289c <HAL_GetTick>
 8003aaa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	2319      	movs	r3, #25
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f9bb 	bl	8003e34 <I2C_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0d5      	b.n	8003c74 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2222      	movs	r2, #34	@ 0x22
 8003acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2240      	movs	r2, #64	@ 0x40
 8003ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a3a      	ldr	r2, [r7, #32]
 8003ae2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003af0:	88f8      	ldrh	r0, [r7, #6]
 8003af2:	893a      	ldrh	r2, [r7, #8]
 8003af4:	8979      	ldrh	r1, [r7, #10]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	4603      	mov	r3, r0
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f91f 	bl	8003d44 <I2C_RequestMemoryRead>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0ad      	b.n	8003c74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2bff      	cmp	r3, #255	@ 0xff
 8003b20:	d90e      	bls.n	8003b40 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	22ff      	movs	r2, #255	@ 0xff
 8003b26:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	8979      	ldrh	r1, [r7, #10]
 8003b30:	4b52      	ldr	r3, [pc, #328]	@ (8003c7c <HAL_I2C_Mem_Read+0x22c>)
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 fb3f 	bl	80041bc <I2C_TransferConfig>
 8003b3e:	e00f      	b.n	8003b60 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	8979      	ldrh	r1, [r7, #10]
 8003b52:	4b4a      	ldr	r3, [pc, #296]	@ (8003c7c <HAL_I2C_Mem_Read+0x22c>)
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fb2e 	bl	80041bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b66:	2200      	movs	r2, #0
 8003b68:	2104      	movs	r1, #4
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f962 	bl	8003e34 <I2C_WaitOnFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e07c      	b.n	8003c74 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d034      	beq.n	8003c20 <HAL_I2C_Mem_Read+0x1d0>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d130      	bne.n	8003c20 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2180      	movs	r1, #128	@ 0x80
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f933 	bl	8003e34 <I2C_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e04d      	b.n	8003c74 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2bff      	cmp	r3, #255	@ 0xff
 8003be0:	d90e      	bls.n	8003c00 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	22ff      	movs	r2, #255	@ 0xff
 8003be6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	8979      	ldrh	r1, [r7, #10]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 fadf 	bl	80041bc <I2C_TransferConfig>
 8003bfe:	e00f      	b.n	8003c20 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	8979      	ldrh	r1, [r7, #10]
 8003c12:	2300      	movs	r3, #0
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 face 	bl	80041bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d19a      	bne.n	8003b60 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f9a0 	bl	8003f74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e01a      	b.n	8003c74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2220      	movs	r2, #32
 8003c44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6859      	ldr	r1, [r3, #4]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <HAL_I2C_Mem_Read+0x230>)
 8003c52:	400b      	ands	r3, r1
 8003c54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e000      	b.n	8003c74 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c72:	2302      	movs	r3, #2
  }
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	80002400 	.word	0x80002400
 8003c80:	fe00e800 	.word	0xfe00e800

08003c84 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	4608      	mov	r0, r1
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4603      	mov	r3, r0
 8003cac:	817b      	strh	r3, [r7, #10]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	813b      	strh	r3, [r7, #8]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	8979      	ldrh	r1, [r7, #10]
 8003cbc:	4b20      	ldr	r3, [pc, #128]	@ (8003d40 <I2C_RequestMemoryWrite+0xa4>)
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 fa79 	bl	80041bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	69b9      	ldr	r1, [r7, #24]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f909 	bl	8003ee6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e02c      	b.n	8003d38 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d105      	bne.n	8003cf0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ce4:	893b      	ldrh	r3, [r7, #8]
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cee:	e015      	b.n	8003d1c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cf0:	893b      	ldrh	r3, [r7, #8]
 8003cf2:	0a1b      	lsrs	r3, r3, #8
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	69b9      	ldr	r1, [r7, #24]
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f8ef 	bl	8003ee6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e012      	b.n	8003d38 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d12:	893b      	ldrh	r3, [r7, #8]
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	2200      	movs	r2, #0
 8003d24:	2180      	movs	r1, #128	@ 0x80
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f884 	bl	8003e34 <I2C_WaitOnFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	80002000 	.word	0x80002000

08003d44 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	4608      	mov	r0, r1
 8003d4e:	4611      	mov	r1, r2
 8003d50:	461a      	mov	r2, r3
 8003d52:	4603      	mov	r3, r0
 8003d54:	817b      	strh	r3, [r7, #10]
 8003d56:	460b      	mov	r3, r1
 8003d58:	813b      	strh	r3, [r7, #8]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d5e:	88fb      	ldrh	r3, [r7, #6]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	8979      	ldrh	r1, [r7, #10]
 8003d64:	4b20      	ldr	r3, [pc, #128]	@ (8003de8 <I2C_RequestMemoryRead+0xa4>)
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	2300      	movs	r3, #0
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 fa26 	bl	80041bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	69b9      	ldr	r1, [r7, #24]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f8b6 	bl	8003ee6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e02c      	b.n	8003dde <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d105      	bne.n	8003d96 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d8a:	893b      	ldrh	r3, [r7, #8]
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d94:	e015      	b.n	8003dc2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d96:	893b      	ldrh	r3, [r7, #8]
 8003d98:	0a1b      	lsrs	r3, r3, #8
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	69b9      	ldr	r1, [r7, #24]
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f89c 	bl	8003ee6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e012      	b.n	8003dde <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003db8:	893b      	ldrh	r3, [r7, #8]
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2140      	movs	r1, #64	@ 0x40
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f831 	bl	8003e34 <I2C_WaitOnFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	80002000 	.word	0x80002000

08003dec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d103      	bne.n	8003e0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2200      	movs	r2, #0
 8003e08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d007      	beq.n	8003e28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	619a      	str	r2, [r3, #24]
  }
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	4613      	mov	r3, r2
 8003e42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e44:	e03b      	b.n	8003ebe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	6839      	ldr	r1, [r7, #0]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f8d6 	bl	8003ffc <I2C_IsErrorOccurred>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e041      	b.n	8003ede <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e60:	d02d      	beq.n	8003ebe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e62:	f7fe fd1b 	bl	800289c <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d302      	bcc.n	8003e78 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d122      	bne.n	8003ebe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	4013      	ands	r3, r2
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d113      	bne.n	8003ebe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9a:	f043 0220 	orr.w	r2, r3, #32
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e00f      	b.n	8003ede <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699a      	ldr	r2, [r3, #24]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	bf0c      	ite	eq
 8003ece:	2301      	moveq	r3, #1
 8003ed0:	2300      	movne	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d0b4      	beq.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ef2:	e033      	b.n	8003f5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f87f 	bl	8003ffc <I2C_IsErrorOccurred>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e031      	b.n	8003f6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f0e:	d025      	beq.n	8003f5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f10:	f7fe fcc4 	bl	800289c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d302      	bcc.n	8003f26 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d11a      	bne.n	8003f5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d013      	beq.n	8003f5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f38:	f043 0220 	orr.w	r2, r3, #32
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e007      	b.n	8003f6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d1c4      	bne.n	8003ef4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f80:	e02f      	b.n	8003fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f838 	bl	8003ffc <I2C_IsErrorOccurred>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e02d      	b.n	8003ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f96:	f7fe fc81 	bl	800289c <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d302      	bcc.n	8003fac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d11a      	bne.n	8003fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d013      	beq.n	8003fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fbe:	f043 0220 	orr.w	r2, r3, #32
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e007      	b.n	8003ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d1c8      	bne.n	8003f82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	@ 0x28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	d068      	beq.n	80040fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2210      	movs	r2, #16
 800402e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004030:	e049      	b.n	80040c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004038:	d045      	beq.n	80040c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800403a:	f7fe fc2f 	bl	800289c <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	429a      	cmp	r2, r3
 8004048:	d302      	bcc.n	8004050 <I2C_IsErrorOccurred+0x54>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d13a      	bne.n	80040c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800405a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004062:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800406e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004072:	d121      	bne.n	80040b8 <I2C_IsErrorOccurred+0xbc>
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800407a:	d01d      	beq.n	80040b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800407c:	7cfb      	ldrb	r3, [r7, #19]
 800407e:	2b20      	cmp	r3, #32
 8004080:	d01a      	beq.n	80040b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004090:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004092:	f7fe fc03 	bl	800289c <HAL_GetTick>
 8004096:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004098:	e00e      	b.n	80040b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800409a:	f7fe fbff 	bl	800289c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b19      	cmp	r3, #25
 80040a6:	d907      	bls.n	80040b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	f043 0320 	orr.w	r3, r3, #32
 80040ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80040b6:	e006      	b.n	80040c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	d1e9      	bne.n	800409a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d003      	beq.n	80040dc <I2C_IsErrorOccurred+0xe0>
 80040d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0aa      	beq.n	8004032 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80040dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d103      	bne.n	80040ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2220      	movs	r2, #32
 80040ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	f043 0304 	orr.w	r3, r3, #4
 80040f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00b      	beq.n	8004124 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800411c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00b      	beq.n	8004146 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	f043 0308 	orr.w	r3, r3, #8
 8004134:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800413e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00b      	beq.n	8004168 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	f043 0302 	orr.w	r3, r3, #2
 8004156:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004160:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01c      	beq.n	80041aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f7ff fe3b 	bl	8003dec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6859      	ldr	r1, [r3, #4]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	4b0d      	ldr	r3, [pc, #52]	@ (80041b8 <I2C_IsErrorOccurred+0x1bc>)
 8004182:	400b      	ands	r3, r1
 8004184:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	431a      	orrs	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80041aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3728      	adds	r7, #40	@ 0x28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	fe00e800 	.word	0xfe00e800

080041bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	460b      	mov	r3, r1
 80041c8:	817b      	strh	r3, [r7, #10]
 80041ca:	4613      	mov	r3, r2
 80041cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041ce:	897b      	ldrh	r3, [r7, #10]
 80041d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041d4:	7a7b      	ldrb	r3, [r7, #9]
 80041d6:	041b      	lsls	r3, r3, #16
 80041d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	0d5b      	lsrs	r3, r3, #21
 80041f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80041fa:	4b08      	ldr	r3, [pc, #32]	@ (800421c <I2C_TransferConfig+0x60>)
 80041fc:	430b      	orrs	r3, r1
 80041fe:	43db      	mvns	r3, r3
 8004200:	ea02 0103 	and.w	r1, r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	430a      	orrs	r2, r1
 800420c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	03ff63ff 	.word	0x03ff63ff

08004220 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b20      	cmp	r3, #32
 8004234:	d138      	bne.n	80042a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004240:	2302      	movs	r3, #2
 8004242:	e032      	b.n	80042aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2224      	movs	r2, #36	@ 0x24
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0201 	bic.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004272:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6819      	ldr	r1, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	e000      	b.n	80042aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042a8:	2302      	movs	r3, #2
  }
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d139      	bne.n	8004340 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e033      	b.n	8004342 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2224      	movs	r2, #36	@ 0x24
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004308:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	e000      	b.n	8004342 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004340:	2302      	movs	r3, #2
  }
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e041      	b.n	80043e4 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8004368:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f245 5255 	movw	r2, #21845	@ 0x5555
 8004372:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6852      	ldr	r2, [r2, #4]
 800437c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6892      	ldr	r2, [r2, #8]
 8004386:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004388:	f7fe fa88 	bl	800289c <HAL_GetTick>
 800438c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800438e:	e00f      	b.n	80043b0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004390:	f7fe fa84 	bl	800289c <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b31      	cmp	r3, #49	@ 0x31
 800439c:	d908      	bls.n	80043b0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e019      	b.n	80043e4 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e8      	bne.n	8004390 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d005      	beq.n	80043d8 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	68d2      	ldr	r2, [r2, #12]
 80043d4:	611a      	str	r2, [r3, #16]
 80043d6:	e004      	b.n	80043e2 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80043e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80043fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d141      	bne.n	800449e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800441a:	4b4b      	ldr	r3, [pc, #300]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004426:	d131      	bne.n	800448c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004428:	4b47      	ldr	r3, [pc, #284]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800442e:	4a46      	ldr	r2, [pc, #280]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004430:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004434:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004438:	4b43      	ldr	r3, [pc, #268]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004440:	4a41      	ldr	r2, [pc, #260]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004442:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004446:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004448:	4b40      	ldr	r3, [pc, #256]	@ (800454c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2232      	movs	r2, #50	@ 0x32
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	4a3f      	ldr	r2, [pc, #252]	@ (8004550 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004454:	fba2 2303 	umull	r2, r3, r2, r3
 8004458:	0c9b      	lsrs	r3, r3, #18
 800445a:	3301      	adds	r3, #1
 800445c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800445e:	e002      	b.n	8004466 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3b01      	subs	r3, #1
 8004464:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004466:	4b38      	ldr	r3, [pc, #224]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800446e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004472:	d102      	bne.n	800447a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f2      	bne.n	8004460 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800447a:	4b33      	ldr	r3, [pc, #204]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004486:	d158      	bne.n	800453a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e057      	b.n	800453c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800448c:	4b2e      	ldr	r3, [pc, #184]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800448e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004492:	4a2d      	ldr	r2, [pc, #180]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004494:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004498:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800449c:	e04d      	b.n	800453a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044a4:	d141      	bne.n	800452a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044a6:	4b28      	ldr	r3, [pc, #160]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044b2:	d131      	bne.n	8004518 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044b4:	4b24      	ldr	r3, [pc, #144]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044ba:	4a23      	ldr	r2, [pc, #140]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044c4:	4b20      	ldr	r3, [pc, #128]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044d4:	4b1d      	ldr	r3, [pc, #116]	@ (800454c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2232      	movs	r2, #50	@ 0x32
 80044da:	fb02 f303 	mul.w	r3, r2, r3
 80044de:	4a1c      	ldr	r2, [pc, #112]	@ (8004550 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044e0:	fba2 2303 	umull	r2, r3, r2, r3
 80044e4:	0c9b      	lsrs	r3, r3, #18
 80044e6:	3301      	adds	r3, #1
 80044e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044ea:	e002      	b.n	80044f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044f2:	4b15      	ldr	r3, [pc, #84]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044fe:	d102      	bne.n	8004506 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f2      	bne.n	80044ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004506:	4b10      	ldr	r3, [pc, #64]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800450e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004512:	d112      	bne.n	800453a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e011      	b.n	800453c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004518:	4b0b      	ldr	r3, [pc, #44]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800451a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800451e:	4a0a      	ldr	r2, [pc, #40]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004524:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004528:	e007      	b.n	800453a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800452a:	4b07      	ldr	r3, [pc, #28]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004532:	4a05      	ldr	r2, [pc, #20]	@ (8004548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004534:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004538:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40007000 	.word	0x40007000
 800454c:	20000004 	.word	0x20000004
 8004550:	431bde83 	.word	0x431bde83

08004554 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004558:	4b05      	ldr	r3, [pc, #20]	@ (8004570 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4a04      	ldr	r2, [pc, #16]	@ (8004570 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800455e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004562:	6093      	str	r3, [r2, #8]
}
 8004564:	bf00      	nop
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40007000 	.word	0x40007000

08004574 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e2fe      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d075      	beq.n	800467e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004592:	4b97      	ldr	r3, [pc, #604]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800459c:	4b94      	ldr	r3, [pc, #592]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b0c      	cmp	r3, #12
 80045aa:	d102      	bne.n	80045b2 <HAL_RCC_OscConfig+0x3e>
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d002      	beq.n	80045b8 <HAL_RCC_OscConfig+0x44>
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d10b      	bne.n	80045d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b8:	4b8d      	ldr	r3, [pc, #564]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d05b      	beq.n	800467c <HAL_RCC_OscConfig+0x108>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d157      	bne.n	800467c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e2d9      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d8:	d106      	bne.n	80045e8 <HAL_RCC_OscConfig+0x74>
 80045da:	4b85      	ldr	r3, [pc, #532]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a84      	ldr	r2, [pc, #528]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 80045e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	e01d      	b.n	8004624 <HAL_RCC_OscConfig+0xb0>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045f0:	d10c      	bne.n	800460c <HAL_RCC_OscConfig+0x98>
 80045f2:	4b7f      	ldr	r3, [pc, #508]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a7e      	ldr	r2, [pc, #504]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 80045f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	4b7c      	ldr	r3, [pc, #496]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a7b      	ldr	r2, [pc, #492]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 8004604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e00b      	b.n	8004624 <HAL_RCC_OscConfig+0xb0>
 800460c:	4b78      	ldr	r3, [pc, #480]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a77      	ldr	r2, [pc, #476]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 8004612:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	4b75      	ldr	r3, [pc, #468]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a74      	ldr	r2, [pc, #464]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 800461e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d013      	beq.n	8004654 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fe f936 	bl	800289c <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004634:	f7fe f932 	bl	800289c <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b64      	cmp	r3, #100	@ 0x64
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e29e      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004646:	4b6a      	ldr	r3, [pc, #424]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0xc0>
 8004652:	e014      	b.n	800467e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fe f922 	bl	800289c <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800465c:	f7fe f91e 	bl	800289c <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b64      	cmp	r3, #100	@ 0x64
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e28a      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800466e:	4b60      	ldr	r3, [pc, #384]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0xe8>
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d075      	beq.n	8004776 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800468a:	4b59      	ldr	r3, [pc, #356]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 030c 	and.w	r3, r3, #12
 8004692:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004694:	4b56      	ldr	r3, [pc, #344]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	d102      	bne.n	80046aa <HAL_RCC_OscConfig+0x136>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d002      	beq.n	80046b0 <HAL_RCC_OscConfig+0x13c>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d11f      	bne.n	80046f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046b0:	4b4f      	ldr	r3, [pc, #316]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <HAL_RCC_OscConfig+0x154>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e25d      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c8:	4b49      	ldr	r3, [pc, #292]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	061b      	lsls	r3, r3, #24
 80046d6:	4946      	ldr	r1, [pc, #280]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80046dc:	4b45      	ldr	r3, [pc, #276]	@ (80047f4 <HAL_RCC_OscConfig+0x280>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fd fd43 	bl	800216c <HAL_InitTick>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d043      	beq.n	8004774 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e249      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d023      	beq.n	8004740 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f8:	4b3d      	ldr	r3, [pc, #244]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a3c      	ldr	r2, [pc, #240]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 80046fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004704:	f7fe f8ca 	bl	800289c <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800470c:	f7fe f8c6 	bl	800289c <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e232      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800471e:	4b34      	ldr	r3, [pc, #208]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800472a:	4b31      	ldr	r3, [pc, #196]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	061b      	lsls	r3, r3, #24
 8004738:	492d      	ldr	r1, [pc, #180]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 800473a:	4313      	orrs	r3, r2
 800473c:	604b      	str	r3, [r1, #4]
 800473e:	e01a      	b.n	8004776 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004740:	4b2b      	ldr	r3, [pc, #172]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a2a      	ldr	r2, [pc, #168]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 8004746:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800474a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474c:	f7fe f8a6 	bl	800289c <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004754:	f7fe f8a2 	bl	800289c <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e20e      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004766:	4b22      	ldr	r3, [pc, #136]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0x1e0>
 8004772:	e000      	b.n	8004776 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004774:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d041      	beq.n	8004806 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01c      	beq.n	80047c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800478a:	4b19      	ldr	r3, [pc, #100]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 800478c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004790:	4a17      	ldr	r2, [pc, #92]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479a:	f7fe f87f 	bl	800289c <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a2:	f7fe f87b 	bl	800289c <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e1e7      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047b4:	4b0e      	ldr	r3, [pc, #56]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 80047b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ef      	beq.n	80047a2 <HAL_RCC_OscConfig+0x22e>
 80047c2:	e020      	b.n	8004806 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047c4:	4b0a      	ldr	r3, [pc, #40]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 80047c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ca:	4a09      	ldr	r2, [pc, #36]	@ (80047f0 <HAL_RCC_OscConfig+0x27c>)
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d4:	f7fe f862 	bl	800289c <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047da:	e00d      	b.n	80047f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047dc:	f7fe f85e 	bl	800289c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d906      	bls.n	80047f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e1ca      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
 80047ee:	bf00      	nop
 80047f0:	40021000 	.word	0x40021000
 80047f4:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047f8:	4b8c      	ldr	r3, [pc, #560]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 80047fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1ea      	bne.n	80047dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80a6 	beq.w	8004960 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004814:	2300      	movs	r3, #0
 8004816:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004818:	4b84      	ldr	r3, [pc, #528]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 800481a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_RCC_OscConfig+0x2b4>
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <HAL_RCC_OscConfig+0x2b6>
 8004828:	2300      	movs	r3, #0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00d      	beq.n	800484a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 8004830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004832:	4a7e      	ldr	r2, [pc, #504]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 8004834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004838:	6593      	str	r3, [r2, #88]	@ 0x58
 800483a:	4b7c      	ldr	r3, [pc, #496]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 800483c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004846:	2301      	movs	r3, #1
 8004848:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800484a:	4b79      	ldr	r3, [pc, #484]	@ (8004a30 <HAL_RCC_OscConfig+0x4bc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d118      	bne.n	8004888 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004856:	4b76      	ldr	r3, [pc, #472]	@ (8004a30 <HAL_RCC_OscConfig+0x4bc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a75      	ldr	r2, [pc, #468]	@ (8004a30 <HAL_RCC_OscConfig+0x4bc>)
 800485c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004862:	f7fe f81b 	bl	800289c <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486a:	f7fe f817 	bl	800289c <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e183      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800487c:	4b6c      	ldr	r3, [pc, #432]	@ (8004a30 <HAL_RCC_OscConfig+0x4bc>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d108      	bne.n	80048a2 <HAL_RCC_OscConfig+0x32e>
 8004890:	4b66      	ldr	r3, [pc, #408]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004896:	4a65      	ldr	r2, [pc, #404]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048a0:	e024      	b.n	80048ec <HAL_RCC_OscConfig+0x378>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b05      	cmp	r3, #5
 80048a8:	d110      	bne.n	80048cc <HAL_RCC_OscConfig+0x358>
 80048aa:	4b60      	ldr	r3, [pc, #384]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 80048ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b0:	4a5e      	ldr	r2, [pc, #376]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 80048b2:	f043 0304 	orr.w	r3, r3, #4
 80048b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048ba:	4b5c      	ldr	r3, [pc, #368]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c0:	4a5a      	ldr	r2, [pc, #360]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048ca:	e00f      	b.n	80048ec <HAL_RCC_OscConfig+0x378>
 80048cc:	4b57      	ldr	r3, [pc, #348]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d2:	4a56      	ldr	r2, [pc, #344]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 80048d4:	f023 0301 	bic.w	r3, r3, #1
 80048d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048dc:	4b53      	ldr	r3, [pc, #332]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e2:	4a52      	ldr	r2, [pc, #328]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 80048e4:	f023 0304 	bic.w	r3, r3, #4
 80048e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d016      	beq.n	8004922 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f4:	f7fd ffd2 	bl	800289c <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048fa:	e00a      	b.n	8004912 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fc:	f7fd ffce 	bl	800289c <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e138      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004912:	4b46      	ldr	r3, [pc, #280]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 8004914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0ed      	beq.n	80048fc <HAL_RCC_OscConfig+0x388>
 8004920:	e015      	b.n	800494e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004922:	f7fd ffbb 	bl	800289c <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004928:	e00a      	b.n	8004940 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800492a:	f7fd ffb7 	bl	800289c <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e121      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004940:	4b3a      	ldr	r3, [pc, #232]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1ed      	bne.n	800492a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800494e:	7ffb      	ldrb	r3, [r7, #31]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d105      	bne.n	8004960 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004954:	4b35      	ldr	r3, [pc, #212]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 8004956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004958:	4a34      	ldr	r2, [pc, #208]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 800495a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800495e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0320 	and.w	r3, r3, #32
 8004968:	2b00      	cmp	r3, #0
 800496a:	d03c      	beq.n	80049e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01c      	beq.n	80049ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004974:	4b2d      	ldr	r3, [pc, #180]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 8004976:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800497a:	4a2c      	ldr	r2, [pc, #176]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004984:	f7fd ff8a 	bl	800289c <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800498c:	f7fd ff86 	bl	800289c <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e0f2      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800499e:	4b23      	ldr	r3, [pc, #140]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 80049a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0ef      	beq.n	800498c <HAL_RCC_OscConfig+0x418>
 80049ac:	e01b      	b.n	80049e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049ae:	4b1f      	ldr	r3, [pc, #124]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 80049b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049b4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049be:	f7fd ff6d 	bl	800289c <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049c6:	f7fd ff69 	bl	800289c <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e0d5      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049d8:	4b14      	ldr	r3, [pc, #80]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 80049da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1ef      	bne.n	80049c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 80c9 	beq.w	8004b82 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049f0:	4b0e      	ldr	r3, [pc, #56]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b0c      	cmp	r3, #12
 80049fa:	f000 8083 	beq.w	8004b04 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d15e      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a06:	4b09      	ldr	r3, [pc, #36]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a08      	ldr	r2, [pc, #32]	@ (8004a2c <HAL_RCC_OscConfig+0x4b8>)
 8004a0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a12:	f7fd ff43 	bl	800289c <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a18:	e00c      	b.n	8004a34 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1a:	f7fd ff3f 	bl	800289c <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d905      	bls.n	8004a34 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e0ab      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a34:	4b55      	ldr	r3, [pc, #340]	@ (8004b8c <HAL_RCC_OscConfig+0x618>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1ec      	bne.n	8004a1a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a40:	4b52      	ldr	r3, [pc, #328]	@ (8004b8c <HAL_RCC_OscConfig+0x618>)
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	4b52      	ldr	r3, [pc, #328]	@ (8004b90 <HAL_RCC_OscConfig+0x61c>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6a11      	ldr	r1, [r2, #32]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a50:	3a01      	subs	r2, #1
 8004a52:	0112      	lsls	r2, r2, #4
 8004a54:	4311      	orrs	r1, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004a5a:	0212      	lsls	r2, r2, #8
 8004a5c:	4311      	orrs	r1, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a62:	0852      	lsrs	r2, r2, #1
 8004a64:	3a01      	subs	r2, #1
 8004a66:	0552      	lsls	r2, r2, #21
 8004a68:	4311      	orrs	r1, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a6e:	0852      	lsrs	r2, r2, #1
 8004a70:	3a01      	subs	r2, #1
 8004a72:	0652      	lsls	r2, r2, #25
 8004a74:	4311      	orrs	r1, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a7a:	06d2      	lsls	r2, r2, #27
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	4943      	ldr	r1, [pc, #268]	@ (8004b8c <HAL_RCC_OscConfig+0x618>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a84:	4b41      	ldr	r3, [pc, #260]	@ (8004b8c <HAL_RCC_OscConfig+0x618>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a40      	ldr	r2, [pc, #256]	@ (8004b8c <HAL_RCC_OscConfig+0x618>)
 8004a8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a90:	4b3e      	ldr	r3, [pc, #248]	@ (8004b8c <HAL_RCC_OscConfig+0x618>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	4a3d      	ldr	r2, [pc, #244]	@ (8004b8c <HAL_RCC_OscConfig+0x618>)
 8004a96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fd fefe 	bl	800289c <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa4:	f7fd fefa 	bl	800289c <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e066      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab6:	4b35      	ldr	r3, [pc, #212]	@ (8004b8c <HAL_RCC_OscConfig+0x618>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0f0      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x530>
 8004ac2:	e05e      	b.n	8004b82 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac4:	4b31      	ldr	r3, [pc, #196]	@ (8004b8c <HAL_RCC_OscConfig+0x618>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a30      	ldr	r2, [pc, #192]	@ (8004b8c <HAL_RCC_OscConfig+0x618>)
 8004aca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fd fee4 	bl	800289c <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad8:	f7fd fee0 	bl	800289c <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e04c      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aea:	4b28      	ldr	r3, [pc, #160]	@ (8004b8c <HAL_RCC_OscConfig+0x618>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004af6:	4b25      	ldr	r3, [pc, #148]	@ (8004b8c <HAL_RCC_OscConfig+0x618>)
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	4924      	ldr	r1, [pc, #144]	@ (8004b8c <HAL_RCC_OscConfig+0x618>)
 8004afc:	4b25      	ldr	r3, [pc, #148]	@ (8004b94 <HAL_RCC_OscConfig+0x620>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	60cb      	str	r3, [r1, #12]
 8004b02:	e03e      	b.n	8004b82 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e039      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004b10:	4b1e      	ldr	r3, [pc, #120]	@ (8004b8c <HAL_RCC_OscConfig+0x618>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f003 0203 	and.w	r2, r3, #3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d12c      	bne.n	8004b7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d123      	bne.n	8004b7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b40:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d11b      	bne.n	8004b7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b50:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d113      	bne.n	8004b7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b60:	085b      	lsrs	r3, r3, #1
 8004b62:	3b01      	subs	r3, #1
 8004b64:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d109      	bne.n	8004b7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b74:	085b      	lsrs	r3, r3, #1
 8004b76:	3b01      	subs	r3, #1
 8004b78:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d001      	beq.n	8004b82 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3720      	adds	r7, #32
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	019f800c 	.word	0x019f800c
 8004b94:	feeefffc 	.word	0xfeeefffc

08004b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e11e      	b.n	8004dee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb0:	4b91      	ldr	r3, [pc, #580]	@ (8004df8 <HAL_RCC_ClockConfig+0x260>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d910      	bls.n	8004be0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bbe:	4b8e      	ldr	r3, [pc, #568]	@ (8004df8 <HAL_RCC_ClockConfig+0x260>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f023 020f 	bic.w	r2, r3, #15
 8004bc6:	498c      	ldr	r1, [pc, #560]	@ (8004df8 <HAL_RCC_ClockConfig+0x260>)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bce:	4b8a      	ldr	r3, [pc, #552]	@ (8004df8 <HAL_RCC_ClockConfig+0x260>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d001      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e106      	b.n	8004dee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d073      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d129      	bne.n	8004c48 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf4:	4b81      	ldr	r3, [pc, #516]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0f4      	b.n	8004dee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004c04:	f000 f9d0 	bl	8004fa8 <RCC_GetSysClockFreqFromPLLSource>
 8004c08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	4a7c      	ldr	r2, [pc, #496]	@ (8004e00 <HAL_RCC_ClockConfig+0x268>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d93f      	bls.n	8004c92 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c12:	4b7a      	ldr	r3, [pc, #488]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d009      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d033      	beq.n	8004c92 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d12f      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c32:	4b72      	ldr	r3, [pc, #456]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c3a:	4a70      	ldr	r2, [pc, #448]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004c3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c42:	2380      	movs	r3, #128	@ 0x80
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	e024      	b.n	8004c92 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d107      	bne.n	8004c60 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c50:	4b6a      	ldr	r3, [pc, #424]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d109      	bne.n	8004c70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0c6      	b.n	8004dee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c60:	4b66      	ldr	r3, [pc, #408]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0be      	b.n	8004dee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c70:	f000 f8ce 	bl	8004e10 <HAL_RCC_GetSysClockFreq>
 8004c74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4a61      	ldr	r2, [pc, #388]	@ (8004e00 <HAL_RCC_ClockConfig+0x268>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d909      	bls.n	8004c92 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c7e:	4b5f      	ldr	r3, [pc, #380]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c86:	4a5d      	ldr	r2, [pc, #372]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c8c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c8e:	2380      	movs	r3, #128	@ 0x80
 8004c90:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c92:	4b5a      	ldr	r3, [pc, #360]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f023 0203 	bic.w	r2, r3, #3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4957      	ldr	r1, [pc, #348]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca4:	f7fd fdfa 	bl	800289c <HAL_GetTick>
 8004ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004caa:	e00a      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cac:	f7fd fdf6 	bl	800289c <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e095      	b.n	8004dee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc2:	4b4e      	ldr	r3, [pc, #312]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 020c 	and.w	r2, r3, #12
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d1eb      	bne.n	8004cac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d023      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cec:	4b43      	ldr	r3, [pc, #268]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4a42      	ldr	r2, [pc, #264]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004cf2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004cf6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d007      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004d04:	4b3d      	ldr	r3, [pc, #244]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004d0c:	4a3b      	ldr	r2, [pc, #236]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004d0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d14:	4b39      	ldr	r3, [pc, #228]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	4936      	ldr	r1, [pc, #216]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	608b      	str	r3, [r1, #8]
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2b80      	cmp	r3, #128	@ 0x80
 8004d2c:	d105      	bne.n	8004d3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d2e:	4b33      	ldr	r3, [pc, #204]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	4a32      	ldr	r2, [pc, #200]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004d34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8004df8 <HAL_RCC_ClockConfig+0x260>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d21d      	bcs.n	8004d84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d48:	4b2b      	ldr	r3, [pc, #172]	@ (8004df8 <HAL_RCC_ClockConfig+0x260>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f023 020f 	bic.w	r2, r3, #15
 8004d50:	4929      	ldr	r1, [pc, #164]	@ (8004df8 <HAL_RCC_ClockConfig+0x260>)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d58:	f7fd fda0 	bl	800289c <HAL_GetTick>
 8004d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5e:	e00a      	b.n	8004d76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d60:	f7fd fd9c 	bl	800289c <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e03b      	b.n	8004dee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d76:	4b20      	ldr	r3, [pc, #128]	@ (8004df8 <HAL_RCC_ClockConfig+0x260>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d1ed      	bne.n	8004d60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d008      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d90:	4b1a      	ldr	r3, [pc, #104]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	4917      	ldr	r1, [pc, #92]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dae:	4b13      	ldr	r3, [pc, #76]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	490f      	ldr	r1, [pc, #60]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dc2:	f000 f825 	bl	8004e10 <HAL_RCC_GetSysClockFreq>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004dfc <HAL_RCC_ClockConfig+0x264>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	091b      	lsrs	r3, r3, #4
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	490c      	ldr	r1, [pc, #48]	@ (8004e04 <HAL_RCC_ClockConfig+0x26c>)
 8004dd4:	5ccb      	ldrb	r3, [r1, r3]
 8004dd6:	f003 031f 	and.w	r3, r3, #31
 8004dda:	fa22 f303 	lsr.w	r3, r2, r3
 8004dde:	4a0a      	ldr	r2, [pc, #40]	@ (8004e08 <HAL_RCC_ClockConfig+0x270>)
 8004de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004de2:	4b0a      	ldr	r3, [pc, #40]	@ (8004e0c <HAL_RCC_ClockConfig+0x274>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fd f9c0 	bl	800216c <HAL_InitTick>
 8004dec:	4603      	mov	r3, r0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40022000 	.word	0x40022000
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	04c4b400 	.word	0x04c4b400
 8004e04:	0801af1c 	.word	0x0801af1c
 8004e08:	20000004 	.word	0x20000004
 8004e0c:	20000008 	.word	0x20000008

08004e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e16:	4b2c      	ldr	r3, [pc, #176]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d102      	bne.n	8004e28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e22:	4b2a      	ldr	r3, [pc, #168]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	e047      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e28:	4b27      	ldr	r3, [pc, #156]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 030c 	and.w	r3, r3, #12
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d102      	bne.n	8004e3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e34:	4b26      	ldr	r3, [pc, #152]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	e03e      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004e3a:	4b23      	ldr	r3, [pc, #140]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	2b0c      	cmp	r3, #12
 8004e44:	d136      	bne.n	8004eb4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e46:	4b20      	ldr	r3, [pc, #128]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e50:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	091b      	lsrs	r3, r3, #4
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d10c      	bne.n	8004e7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e64:	4a1a      	ldr	r2, [pc, #104]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	4a16      	ldr	r2, [pc, #88]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e6e:	68d2      	ldr	r2, [r2, #12]
 8004e70:	0a12      	lsrs	r2, r2, #8
 8004e72:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e76:	fb02 f303 	mul.w	r3, r2, r3
 8004e7a:	617b      	str	r3, [r7, #20]
      break;
 8004e7c:	e00c      	b.n	8004e98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e7e:	4a13      	ldr	r2, [pc, #76]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	4a10      	ldr	r2, [pc, #64]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e88:	68d2      	ldr	r2, [r2, #12]
 8004e8a:	0a12      	lsrs	r2, r2, #8
 8004e8c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e90:	fb02 f303 	mul.w	r3, r2, r3
 8004e94:	617b      	str	r3, [r7, #20]
      break;
 8004e96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e98:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	0e5b      	lsrs	r3, r3, #25
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	e001      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004eb8:	693b      	ldr	r3, [r7, #16]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	00f42400 	.word	0x00f42400
 8004ed0:	016e3600 	.word	0x016e3600

08004ed4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ed8:	4b03      	ldr	r3, [pc, #12]	@ (8004ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eda:	681b      	ldr	r3, [r3, #0]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	20000004 	.word	0x20000004

08004eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ef0:	f7ff fff0 	bl	8004ed4 <HAL_RCC_GetHCLKFreq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b06      	ldr	r3, [pc, #24]	@ (8004f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	0a1b      	lsrs	r3, r3, #8
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	4904      	ldr	r1, [pc, #16]	@ (8004f14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f02:	5ccb      	ldrb	r3, [r1, r3]
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40021000 	.word	0x40021000
 8004f14:	0801af2c 	.word	0x0801af2c

08004f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f1c:	f7ff ffda 	bl	8004ed4 <HAL_RCC_GetHCLKFreq>
 8004f20:	4602      	mov	r2, r0
 8004f22:	4b06      	ldr	r3, [pc, #24]	@ (8004f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	0adb      	lsrs	r3, r3, #11
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	4904      	ldr	r1, [pc, #16]	@ (8004f40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f2e:	5ccb      	ldrb	r3, [r1, r3]
 8004f30:	f003 031f 	and.w	r3, r3, #31
 8004f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	0801af2c 	.word	0x0801af2c

08004f44 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	220f      	movs	r2, #15
 8004f52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004f54:	4b12      	ldr	r3, [pc, #72]	@ (8004fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 0203 	and.w	r2, r3, #3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004f60:	4b0f      	ldr	r3, [pc, #60]	@ (8004fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004f78:	4b09      	ldr	r3, [pc, #36]	@ (8004fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	08db      	lsrs	r3, r3, #3
 8004f7e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004f86:	4b07      	ldr	r3, [pc, #28]	@ (8004fa4 <HAL_RCC_GetClockConfig+0x60>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 020f 	and.w	r2, r3, #15
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	601a      	str	r2, [r3, #0]
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40022000 	.word	0x40022000

08004fa8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fae:	4b1e      	ldr	r3, [pc, #120]	@ (8005028 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005028 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	091b      	lsrs	r3, r3, #4
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d10c      	bne.n	8004fe6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fcc:	4a17      	ldr	r2, [pc, #92]	@ (800502c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd4:	4a14      	ldr	r2, [pc, #80]	@ (8005028 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fd6:	68d2      	ldr	r2, [r2, #12]
 8004fd8:	0a12      	lsrs	r2, r2, #8
 8004fda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fde:	fb02 f303 	mul.w	r3, r2, r3
 8004fe2:	617b      	str	r3, [r7, #20]
    break;
 8004fe4:	e00c      	b.n	8005000 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fe6:	4a12      	ldr	r2, [pc, #72]	@ (8005030 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fee:	4a0e      	ldr	r2, [pc, #56]	@ (8005028 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ff0:	68d2      	ldr	r2, [r2, #12]
 8004ff2:	0a12      	lsrs	r2, r2, #8
 8004ff4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ff8:	fb02 f303 	mul.w	r3, r2, r3
 8004ffc:	617b      	str	r3, [r7, #20]
    break;
 8004ffe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005000:	4b09      	ldr	r3, [pc, #36]	@ (8005028 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	0e5b      	lsrs	r3, r3, #25
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	3301      	adds	r3, #1
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	fbb2 f3f3 	udiv	r3, r2, r3
 8005018:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800501a:	687b      	ldr	r3, [r7, #4]
}
 800501c:	4618      	mov	r0, r3
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	40021000 	.word	0x40021000
 800502c:	016e3600 	.word	0x016e3600
 8005030:	00f42400 	.word	0x00f42400

08005034 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800503c:	2300      	movs	r3, #0
 800503e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005040:	2300      	movs	r3, #0
 8005042:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8098 	beq.w	8005182 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005052:	2300      	movs	r3, #0
 8005054:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005056:	4b43      	ldr	r3, [pc, #268]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800505a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10d      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005062:	4b40      	ldr	r3, [pc, #256]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005066:	4a3f      	ldr	r2, [pc, #252]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800506c:	6593      	str	r3, [r2, #88]	@ 0x58
 800506e:	4b3d      	ldr	r3, [pc, #244]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800507a:	2301      	movs	r3, #1
 800507c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800507e:	4b3a      	ldr	r3, [pc, #232]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a39      	ldr	r2, [pc, #228]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005088:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800508a:	f7fd fc07 	bl	800289c <HAL_GetTick>
 800508e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005090:	e009      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005092:	f7fd fc03 	bl	800289c <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d902      	bls.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	74fb      	strb	r3, [r7, #19]
        break;
 80050a4:	e005      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050a6:	4b30      	ldr	r3, [pc, #192]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0ef      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80050b2:	7cfb      	ldrb	r3, [r7, #19]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d159      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d01e      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d019      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050d4:	4b23      	ldr	r3, [pc, #140]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050e0:	4b20      	ldr	r3, [pc, #128]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e6:	4a1f      	ldr	r2, [pc, #124]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005100:	4a18      	ldr	r2, [pc, #96]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d016      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005112:	f7fd fbc3 	bl	800289c <HAL_GetTick>
 8005116:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005118:	e00b      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511a:	f7fd fbbf 	bl	800289c <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005128:	4293      	cmp	r3, r2
 800512a:	d902      	bls.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	74fb      	strb	r3, [r7, #19]
            break;
 8005130:	e006      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005132:	4b0c      	ldr	r3, [pc, #48]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ec      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005140:	7cfb      	ldrb	r3, [r7, #19]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10b      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005146:	4b07      	ldr	r3, [pc, #28]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005154:	4903      	ldr	r1, [pc, #12]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800515c:	e008      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800515e:	7cfb      	ldrb	r3, [r7, #19]
 8005160:	74bb      	strb	r3, [r7, #18]
 8005162:	e005      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005164:	40021000 	.word	0x40021000
 8005168:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516c:	7cfb      	ldrb	r3, [r7, #19]
 800516e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005170:	7c7b      	ldrb	r3, [r7, #17]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d105      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005176:	4ba7      	ldr	r3, [pc, #668]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517a:	4aa6      	ldr	r2, [pc, #664]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800517c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005180:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800518e:	4ba1      	ldr	r3, [pc, #644]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005194:	f023 0203 	bic.w	r2, r3, #3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	499d      	ldr	r1, [pc, #628]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051b0:	4b98      	ldr	r3, [pc, #608]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b6:	f023 020c 	bic.w	r2, r3, #12
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	4995      	ldr	r1, [pc, #596]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051d2:	4b90      	ldr	r3, [pc, #576]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	498c      	ldr	r1, [pc, #560]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051f4:	4b87      	ldr	r3, [pc, #540]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	4984      	ldr	r1, [pc, #528]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0310 	and.w	r3, r3, #16
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005216:	4b7f      	ldr	r3, [pc, #508]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	497b      	ldr	r1, [pc, #492]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005238:	4b76      	ldr	r3, [pc, #472]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800523e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	4973      	ldr	r1, [pc, #460]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800525a:	4b6e      	ldr	r3, [pc, #440]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005260:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	496a      	ldr	r1, [pc, #424]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800527c:	4b65      	ldr	r3, [pc, #404]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005282:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	4962      	ldr	r1, [pc, #392]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800529e:	4b5d      	ldr	r3, [pc, #372]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ac:	4959      	ldr	r1, [pc, #356]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052c0:	4b54      	ldr	r3, [pc, #336]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052c6:	f023 0203 	bic.w	r2, r3, #3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ce:	4951      	ldr	r1, [pc, #324]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052e2:	4b4c      	ldr	r3, [pc, #304]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f0:	4948      	ldr	r1, [pc, #288]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005300:	2b00      	cmp	r3, #0
 8005302:	d015      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005304:	4b43      	ldr	r3, [pc, #268]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800530a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005312:	4940      	ldr	r1, [pc, #256]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005322:	d105      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005324:	4b3b      	ldr	r3, [pc, #236]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	4a3a      	ldr	r2, [pc, #232]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800532a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800532e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005338:	2b00      	cmp	r3, #0
 800533a:	d015      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800533c:	4b35      	ldr	r3, [pc, #212]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005342:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534a:	4932      	ldr	r1, [pc, #200]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005356:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800535a:	d105      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800535c:	4b2d      	ldr	r3, [pc, #180]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	4a2c      	ldr	r2, [pc, #176]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005362:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005366:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d015      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005374:	4b27      	ldr	r3, [pc, #156]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005382:	4924      	ldr	r1, [pc, #144]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005392:	d105      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005394:	4b1f      	ldr	r3, [pc, #124]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	4a1e      	ldr	r2, [pc, #120]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800539a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800539e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d015      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053ac:	4b19      	ldr	r3, [pc, #100]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ba:	4916      	ldr	r1, [pc, #88]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053ca:	d105      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053cc:	4b11      	ldr	r3, [pc, #68]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	4a10      	ldr	r2, [pc, #64]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d019      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f2:	4908      	ldr	r1, [pc, #32]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005402:	d109      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005404:	4b03      	ldr	r3, [pc, #12]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	4a02      	ldr	r2, [pc, #8]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800540e:	60d3      	str	r3, [r2, #12]
 8005410:	e002      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005412:	bf00      	nop
 8005414:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d015      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005424:	4b29      	ldr	r3, [pc, #164]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005432:	4926      	ldr	r1, [pc, #152]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005434:	4313      	orrs	r3, r2
 8005436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005442:	d105      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005444:	4b21      	ldr	r3, [pc, #132]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	4a20      	ldr	r2, [pc, #128]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800544a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800544e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d015      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800545c:	4b1b      	ldr	r3, [pc, #108]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005462:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800546a:	4918      	ldr	r1, [pc, #96]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800547a:	d105      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800547c:	4b13      	ldr	r3, [pc, #76]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	4a12      	ldr	r2, [pc, #72]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005482:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005486:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d015      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005494:	4b0d      	ldr	r3, [pc, #52]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005496:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800549a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054a2:	490a      	ldr	r1, [pc, #40]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054b2:	d105      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b4:	4b05      	ldr	r3, [pc, #20]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4a04      	ldr	r2, [pc, #16]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80054c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000

080054d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e049      	b.n	8005576 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f841 	bl	800557e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3304      	adds	r3, #4
 800550c:	4619      	mov	r1, r3
 800550e:	4610      	mov	r0, r2
 8005510:	f000 fa30 	bl	8005974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
	...

08005594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d001      	beq.n	80055ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e054      	b.n	8005656 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0201 	orr.w	r2, r2, #1
 80055c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a26      	ldr	r2, [pc, #152]	@ (8005664 <HAL_TIM_Base_Start_IT+0xd0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d022      	beq.n	8005614 <HAL_TIM_Base_Start_IT+0x80>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055d6:	d01d      	beq.n	8005614 <HAL_TIM_Base_Start_IT+0x80>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a22      	ldr	r2, [pc, #136]	@ (8005668 <HAL_TIM_Base_Start_IT+0xd4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d018      	beq.n	8005614 <HAL_TIM_Base_Start_IT+0x80>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a21      	ldr	r2, [pc, #132]	@ (800566c <HAL_TIM_Base_Start_IT+0xd8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d013      	beq.n	8005614 <HAL_TIM_Base_Start_IT+0x80>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005670 <HAL_TIM_Base_Start_IT+0xdc>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00e      	beq.n	8005614 <HAL_TIM_Base_Start_IT+0x80>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005674 <HAL_TIM_Base_Start_IT+0xe0>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d009      	beq.n	8005614 <HAL_TIM_Base_Start_IT+0x80>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a1c      	ldr	r2, [pc, #112]	@ (8005678 <HAL_TIM_Base_Start_IT+0xe4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d004      	beq.n	8005614 <HAL_TIM_Base_Start_IT+0x80>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a1b      	ldr	r2, [pc, #108]	@ (800567c <HAL_TIM_Base_Start_IT+0xe8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d115      	bne.n	8005640 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	4b19      	ldr	r3, [pc, #100]	@ (8005680 <HAL_TIM_Base_Start_IT+0xec>)
 800561c:	4013      	ands	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b06      	cmp	r3, #6
 8005624:	d015      	beq.n	8005652 <HAL_TIM_Base_Start_IT+0xbe>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800562c:	d011      	beq.n	8005652 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f042 0201 	orr.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563e:	e008      	b.n	8005652 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	e000      	b.n	8005654 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005652:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40012c00 	.word	0x40012c00
 8005668:	40000400 	.word	0x40000400
 800566c:	40000800 	.word	0x40000800
 8005670:	40000c00 	.word	0x40000c00
 8005674:	40013400 	.word	0x40013400
 8005678:	40014000 	.word	0x40014000
 800567c:	40015000 	.word	0x40015000
 8005680:	00010007 	.word	0x00010007

08005684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d020      	beq.n	80056e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01b      	beq.n	80056e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0202 	mvn.w	r2, #2
 80056b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f931 	bl	8005936 <HAL_TIM_IC_CaptureCallback>
 80056d4:	e005      	b.n	80056e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f923 	bl	8005922 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f934 	bl	800594a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f003 0304 	and.w	r3, r3, #4
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d020      	beq.n	8005734 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01b      	beq.n	8005734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0204 	mvn.w	r2, #4
 8005704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2202      	movs	r2, #2
 800570a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f90b 	bl	8005936 <HAL_TIM_IC_CaptureCallback>
 8005720:	e005      	b.n	800572e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f8fd 	bl	8005922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f90e 	bl	800594a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f003 0308 	and.w	r3, r3, #8
 800573a:	2b00      	cmp	r3, #0
 800573c:	d020      	beq.n	8005780 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01b      	beq.n	8005780 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0208 	mvn.w	r2, #8
 8005750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2204      	movs	r2, #4
 8005756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f8e5 	bl	8005936 <HAL_TIM_IC_CaptureCallback>
 800576c:	e005      	b.n	800577a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f8d7 	bl	8005922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f8e8 	bl	800594a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f003 0310 	and.w	r3, r3, #16
 8005786:	2b00      	cmp	r3, #0
 8005788:	d020      	beq.n	80057cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01b      	beq.n	80057cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0210 	mvn.w	r2, #16
 800579c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2208      	movs	r2, #8
 80057a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f8bf 	bl	8005936 <HAL_TIM_IC_CaptureCallback>
 80057b8:	e005      	b.n	80057c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f8b1 	bl	8005922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f8c2 	bl	800594a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00c      	beq.n	80057f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d007      	beq.n	80057f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0201 	mvn.w	r2, #1
 80057e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fc fb16 	bl	8001e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d104      	bne.n	8005804 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00c      	beq.n	800581e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580a:	2b00      	cmp	r3, #0
 800580c:	d007      	beq.n	800581e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f969 	bl	8005af0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00c      	beq.n	8005842 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800583a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f961 	bl	8005b04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00c      	beq.n	8005866 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d007      	beq.n	8005866 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800585e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f87c 	bl	800595e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	f003 0320 	and.w	r3, r3, #32
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00c      	beq.n	800588a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d007      	beq.n	800588a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f06f 0220 	mvn.w	r2, #32
 8005882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f929 	bl	8005adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00c      	beq.n	80058ae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d007      	beq.n	80058ae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80058a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f935 	bl	8005b18 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00c      	beq.n	80058d2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d007      	beq.n	80058d2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80058ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f92d 	bl	8005b2c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00c      	beq.n	80058f6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d007      	beq.n	80058f6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80058ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f925 	bl	8005b40 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00c      	beq.n	800591a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d007      	beq.n	800591a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f91d 	bl	8005b54 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
	...

08005974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a4c      	ldr	r2, [pc, #304]	@ (8005ab8 <TIM_Base_SetConfig+0x144>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d017      	beq.n	80059bc <TIM_Base_SetConfig+0x48>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005992:	d013      	beq.n	80059bc <TIM_Base_SetConfig+0x48>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a49      	ldr	r2, [pc, #292]	@ (8005abc <TIM_Base_SetConfig+0x148>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00f      	beq.n	80059bc <TIM_Base_SetConfig+0x48>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a48      	ldr	r2, [pc, #288]	@ (8005ac0 <TIM_Base_SetConfig+0x14c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00b      	beq.n	80059bc <TIM_Base_SetConfig+0x48>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a47      	ldr	r2, [pc, #284]	@ (8005ac4 <TIM_Base_SetConfig+0x150>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d007      	beq.n	80059bc <TIM_Base_SetConfig+0x48>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a46      	ldr	r2, [pc, #280]	@ (8005ac8 <TIM_Base_SetConfig+0x154>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_Base_SetConfig+0x48>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a45      	ldr	r2, [pc, #276]	@ (8005acc <TIM_Base_SetConfig+0x158>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d108      	bne.n	80059ce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a39      	ldr	r2, [pc, #228]	@ (8005ab8 <TIM_Base_SetConfig+0x144>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d023      	beq.n	8005a1e <TIM_Base_SetConfig+0xaa>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059dc:	d01f      	beq.n	8005a1e <TIM_Base_SetConfig+0xaa>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a36      	ldr	r2, [pc, #216]	@ (8005abc <TIM_Base_SetConfig+0x148>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d01b      	beq.n	8005a1e <TIM_Base_SetConfig+0xaa>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a35      	ldr	r2, [pc, #212]	@ (8005ac0 <TIM_Base_SetConfig+0x14c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d017      	beq.n	8005a1e <TIM_Base_SetConfig+0xaa>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a34      	ldr	r2, [pc, #208]	@ (8005ac4 <TIM_Base_SetConfig+0x150>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d013      	beq.n	8005a1e <TIM_Base_SetConfig+0xaa>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a33      	ldr	r2, [pc, #204]	@ (8005ac8 <TIM_Base_SetConfig+0x154>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00f      	beq.n	8005a1e <TIM_Base_SetConfig+0xaa>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a33      	ldr	r2, [pc, #204]	@ (8005ad0 <TIM_Base_SetConfig+0x15c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00b      	beq.n	8005a1e <TIM_Base_SetConfig+0xaa>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a32      	ldr	r2, [pc, #200]	@ (8005ad4 <TIM_Base_SetConfig+0x160>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d007      	beq.n	8005a1e <TIM_Base_SetConfig+0xaa>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a31      	ldr	r2, [pc, #196]	@ (8005ad8 <TIM_Base_SetConfig+0x164>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d003      	beq.n	8005a1e <TIM_Base_SetConfig+0xaa>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a2c      	ldr	r2, [pc, #176]	@ (8005acc <TIM_Base_SetConfig+0x158>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d108      	bne.n	8005a30 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a18      	ldr	r2, [pc, #96]	@ (8005ab8 <TIM_Base_SetConfig+0x144>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d013      	beq.n	8005a84 <TIM_Base_SetConfig+0x110>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ac8 <TIM_Base_SetConfig+0x154>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00f      	beq.n	8005a84 <TIM_Base_SetConfig+0x110>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a1a      	ldr	r2, [pc, #104]	@ (8005ad0 <TIM_Base_SetConfig+0x15c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00b      	beq.n	8005a84 <TIM_Base_SetConfig+0x110>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a19      	ldr	r2, [pc, #100]	@ (8005ad4 <TIM_Base_SetConfig+0x160>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d007      	beq.n	8005a84 <TIM_Base_SetConfig+0x110>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a18      	ldr	r2, [pc, #96]	@ (8005ad8 <TIM_Base_SetConfig+0x164>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d003      	beq.n	8005a84 <TIM_Base_SetConfig+0x110>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a13      	ldr	r2, [pc, #76]	@ (8005acc <TIM_Base_SetConfig+0x158>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d103      	bne.n	8005a8c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d105      	bne.n	8005aaa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f023 0201 	bic.w	r2, r3, #1
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	611a      	str	r2, [r3, #16]
  }
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40012c00 	.word	0x40012c00
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40013400 	.word	0x40013400
 8005acc:	40015000 	.word	0x40015000
 8005ad0:	40014000 	.word	0x40014000
 8005ad4:	40014400 	.word	0x40014400
 8005ad8:	40014800 	.word	0x40014800

08005adc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e042      	b.n	8005c00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d106      	bne.n	8005b92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fc fcc7 	bl	8002520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2224      	movs	r2, #36	@ 0x24
 8005b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0201 	bic.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f001 f806 	bl	8006bc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fd07 	bl	80065cc <UART_SetConfig>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e01b      	b.n	8005c00 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005be6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f001 f885 	bl	8006d08 <UART_CheckIdleState>
 8005bfe:	4603      	mov	r3, r0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	@ 0x28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	4613      	mov	r3, r2
 8005c14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d167      	bne.n	8005cf0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d002      	beq.n	8005c2c <HAL_UART_Transmit_DMA+0x24>
 8005c26:	88fb      	ldrh	r3, [r7, #6]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e060      	b.n	8005cf2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	88fa      	ldrh	r2, [r7, #6]
 8005c3a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	88fa      	ldrh	r2, [r7, #6]
 8005c42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2221      	movs	r2, #33	@ 0x21
 8005c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d028      	beq.n	8005cb0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c62:	4a26      	ldr	r2, [pc, #152]	@ (8005cfc <HAL_UART_Transmit_DMA+0xf4>)
 8005c64:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c6a:	4a25      	ldr	r2, [pc, #148]	@ (8005d00 <HAL_UART_Transmit_DMA+0xf8>)
 8005c6c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c72:	4a24      	ldr	r2, [pc, #144]	@ (8005d04 <HAL_UART_Transmit_DMA+0xfc>)
 8005c74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c86:	4619      	mov	r1, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3328      	adds	r3, #40	@ 0x28
 8005c8e:	461a      	mov	r2, r3
 8005c90:	88fb      	ldrh	r3, [r7, #6]
 8005c92:	f7fc ff97 	bl	8002bc4 <HAL_DMA_Start_IT>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d009      	beq.n	8005cb0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2210      	movs	r2, #16
 8005ca0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e020      	b.n	8005cf2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2240      	movs	r2, #64	@ 0x40
 8005cb6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd8:	623a      	str	r2, [r7, #32]
 8005cda:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	69f9      	ldr	r1, [r7, #28]
 8005cde:	6a3a      	ldr	r2, [r7, #32]
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e5      	bne.n	8005cb8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	e000      	b.n	8005cf2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005cf0:	2302      	movs	r3, #2
  }
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3728      	adds	r7, #40	@ 0x28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	080071d3 	.word	0x080071d3
 8005d00:	0800726d 	.word	0x0800726d
 8005d04:	080073f3 	.word	0x080073f3

08005d08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08a      	sub	sp, #40	@ 0x28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	4613      	mov	r3, r2
 8005d14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d137      	bne.n	8005d90 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <HAL_UART_Receive_DMA+0x24>
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e030      	b.n	8005d92 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a18      	ldr	r2, [pc, #96]	@ (8005d9c <HAL_UART_Receive_DMA+0x94>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d01f      	beq.n	8005d80 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d018      	beq.n	8005d80 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	623b      	str	r3, [r7, #32]
 8005d6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	69f9      	ldr	r1, [r7, #28]
 8005d72:	6a3a      	ldr	r2, [r7, #32]
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e6      	bne.n	8005d4e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005d80:	88fb      	ldrh	r3, [r7, #6]
 8005d82:	461a      	mov	r2, r3
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f001 f8d6 	bl	8006f38 <UART_Start_Receive_DMA>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	e000      	b.n	8005d92 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d90:	2302      	movs	r3, #2
  }
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3728      	adds	r7, #40	@ 0x28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40008000 	.word	0x40008000

08005da0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b090      	sub	sp, #64	@ 0x40
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005db6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dc2:	2b80      	cmp	r3, #128	@ 0x80
 8005dc4:	d139      	bne.n	8005e3a <HAL_UART_DMAStop+0x9a>
 8005dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dc8:	2b21      	cmp	r3, #33	@ 0x21
 8005dca:	d136      	bne.n	8005e3a <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3308      	adds	r3, #8
 8005dea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005dec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e5      	bne.n	8005dcc <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d015      	beq.n	8005e34 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fc ff54 	bl	8002cba <HAL_DMA_Abort>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00d      	beq.n	8005e34 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fd f8bb 	bl	8002f98 <HAL_DMA_GetError>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b20      	cmp	r3, #32
 8005e26:	d105      	bne.n	8005e34 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2210      	movs	r2, #16
 8005e2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e047      	b.n	8005ec4 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f001 f925 	bl	8007084 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e44:	2b40      	cmp	r3, #64	@ 0x40
 8005e46:	d13c      	bne.n	8005ec2 <HAL_UART_DMAStop+0x122>
 8005e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4a:	2b22      	cmp	r3, #34	@ 0x22
 8005e4c:	d139      	bne.n	8005ec2 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3308      	adds	r3, #8
 8005e54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e6e:	61ba      	str	r2, [r7, #24]
 8005e70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	6979      	ldr	r1, [r7, #20]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e5      	bne.n	8005e4e <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d017      	beq.n	8005ebc <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fc ff11 	bl	8002cba <HAL_DMA_Abort>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00e      	beq.n	8005ebc <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fd f877 	bl	8002f98 <HAL_DMA_GetError>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b20      	cmp	r3, #32
 8005eae:	d105      	bne.n	8005ebc <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2210      	movs	r2, #16
 8005eb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e003      	b.n	8005ec4 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f001 f922 	bl	8007106 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3740      	adds	r7, #64	@ 0x40
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b0ba      	sub	sp, #232	@ 0xe8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ef2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005ef6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005efa:	4013      	ands	r3, r2
 8005efc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005f00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d11b      	bne.n	8005f40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d015      	beq.n	8005f40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f18:	f003 0320 	and.w	r3, r3, #32
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d105      	bne.n	8005f2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d009      	beq.n	8005f40 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 8300 	beq.w	8006536 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	4798      	blx	r3
      }
      return;
 8005f3e:	e2fa      	b.n	8006536 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 8123 	beq.w	8006190 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005f4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005f4e:	4b8d      	ldr	r3, [pc, #564]	@ (8006184 <HAL_UART_IRQHandler+0x2b8>)
 8005f50:	4013      	ands	r3, r2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d106      	bne.n	8005f64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005f56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005f5a:	4b8b      	ldr	r3, [pc, #556]	@ (8006188 <HAL_UART_IRQHandler+0x2bc>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 8116 	beq.w	8006190 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d011      	beq.n	8005f94 <HAL_UART_IRQHandler+0xc8>
 8005f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00b      	beq.n	8005f94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2201      	movs	r2, #1
 8005f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f8a:	f043 0201 	orr.w	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d011      	beq.n	8005fc4 <HAL_UART_IRQHandler+0xf8>
 8005fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00b      	beq.n	8005fc4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fba:	f043 0204 	orr.w	r2, r3, #4
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d011      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x128>
 8005fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00b      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2204      	movs	r2, #4
 8005fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fea:	f043 0202 	orr.w	r2, r3, #2
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d017      	beq.n	8006030 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b00      	cmp	r3, #0
 800600a:	d105      	bne.n	8006018 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800600c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006010:	4b5c      	ldr	r3, [pc, #368]	@ (8006184 <HAL_UART_IRQHandler+0x2b8>)
 8006012:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00b      	beq.n	8006030 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2208      	movs	r2, #8
 800601e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006026:	f043 0208 	orr.w	r2, r3, #8
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006034:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006038:	2b00      	cmp	r3, #0
 800603a:	d012      	beq.n	8006062 <HAL_UART_IRQHandler+0x196>
 800603c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006040:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00c      	beq.n	8006062 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006050:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006058:	f043 0220 	orr.w	r2, r3, #32
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 8266 	beq.w	800653a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800606e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b00      	cmp	r3, #0
 8006078:	d013      	beq.n	80060a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800607a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b00      	cmp	r3, #0
 8006084:	d105      	bne.n	8006092 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800608a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b6:	2b40      	cmp	r3, #64	@ 0x40
 80060b8:	d005      	beq.n	80060c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80060ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d054      	beq.n	8006170 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f001 f81d 	bl	8007106 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d6:	2b40      	cmp	r3, #64	@ 0x40
 80060d8:	d146      	bne.n	8006168 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3308      	adds	r3, #8
 80060e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80060f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3308      	adds	r3, #8
 8006102:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006106:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800610a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006112:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800611e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1d9      	bne.n	80060da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800612c:	2b00      	cmp	r3, #0
 800612e:	d017      	beq.n	8006160 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006136:	4a15      	ldr	r2, [pc, #84]	@ (800618c <HAL_UART_IRQHandler+0x2c0>)
 8006138:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006140:	4618      	mov	r0, r3
 8006142:	f7fc fe13 	bl	8002d6c <HAL_DMA_Abort_IT>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d019      	beq.n	8006180 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800615a:	4610      	mov	r0, r2
 800615c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800615e:	e00f      	b.n	8006180 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fa1d 	bl	80065a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006166:	e00b      	b.n	8006180 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fa19 	bl	80065a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616e:	e007      	b.n	8006180 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fa15 	bl	80065a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800617e:	e1dc      	b.n	800653a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006180:	bf00      	nop
    return;
 8006182:	e1da      	b.n	800653a <HAL_UART_IRQHandler+0x66e>
 8006184:	10000001 	.word	0x10000001
 8006188:	04000120 	.word	0x04000120
 800618c:	08007473 	.word	0x08007473

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006194:	2b01      	cmp	r3, #1
 8006196:	f040 8170 	bne.w	800647a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800619a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800619e:	f003 0310 	and.w	r3, r3, #16
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 8169 	beq.w	800647a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80061a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061ac:	f003 0310 	and.w	r3, r3, #16
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 8162 	beq.w	800647a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2210      	movs	r2, #16
 80061bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c8:	2b40      	cmp	r3, #64	@ 0x40
 80061ca:	f040 80d8 	bne.w	800637e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 80af 	beq.w	8006344 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80061ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061f0:	429a      	cmp	r2, r3
 80061f2:	f080 80a7 	bcs.w	8006344 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0320 	and.w	r3, r3, #32
 800620e:	2b00      	cmp	r3, #0
 8006210:	f040 8087 	bne.w	8006322 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800622c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800623e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006242:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800624a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800624e:	e841 2300 	strex	r3, r2, [r1]
 8006252:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006256:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1da      	bne.n	8006214 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3308      	adds	r3, #8
 8006264:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800626e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006270:	f023 0301 	bic.w	r3, r3, #1
 8006274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3308      	adds	r3, #8
 800627e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006282:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006286:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800628a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e1      	bne.n	800625e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3308      	adds	r3, #8
 80062a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80062aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3308      	adds	r3, #8
 80062ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80062be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80062c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80062c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80062cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e3      	bne.n	800629a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80062ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062f0:	f023 0310 	bic.w	r3, r3, #16
 80062f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	461a      	mov	r2, r3
 80062fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006302:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006304:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006308:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e4      	bne.n	80062e0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800631c:	4618      	mov	r0, r3
 800631e:	f7fc fccc 	bl	8002cba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2202      	movs	r2, #2
 8006326:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006334:	b29b      	uxth	r3, r3
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	b29b      	uxth	r3, r3
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f939 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006342:	e0fc      	b.n	800653e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800634a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800634e:	429a      	cmp	r2, r3
 8006350:	f040 80f5 	bne.w	800653e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b20      	cmp	r3, #32
 8006364:	f040 80eb 	bne.w	800653e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006374:	4619      	mov	r1, r3
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f91c 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
      return;
 800637c:	e0df      	b.n	800653e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800638a:	b29b      	uxth	r3, r3
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006398:	b29b      	uxth	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 80d1 	beq.w	8006542 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80063a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 80cc 	beq.w	8006542 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80063cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80063ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e4      	bne.n	80063aa <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3308      	adds	r3, #8
 80063e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	623b      	str	r3, [r7, #32]
   return(result);
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063f6:	f023 0301 	bic.w	r3, r3, #1
 80063fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3308      	adds	r3, #8
 8006404:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006408:	633a      	str	r2, [r7, #48]	@ 0x30
 800640a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800640e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006410:	e841 2300 	strex	r3, r2, [r1]
 8006414:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1e1      	bne.n	80063e0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2220      	movs	r2, #32
 8006420:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	60fb      	str	r3, [r7, #12]
   return(result);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f023 0310 	bic.w	r3, r3, #16
 8006444:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	461a      	mov	r2, r3
 800644e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006452:	61fb      	str	r3, [r7, #28]
 8006454:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	69b9      	ldr	r1, [r7, #24]
 8006458:	69fa      	ldr	r2, [r7, #28]
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	617b      	str	r3, [r7, #20]
   return(result);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e4      	bne.n	8006430 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2202      	movs	r2, #2
 800646a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800646c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f89e 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006478:	e063      	b.n	8006542 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800647a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800647e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00e      	beq.n	80064a4 <HAL_UART_IRQHandler+0x5d8>
 8006486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800648a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d008      	beq.n	80064a4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800649a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 f825 	bl	80074ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064a2:	e051      	b.n	8006548 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80064a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d014      	beq.n	80064da <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80064b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d105      	bne.n	80064c8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80064bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d008      	beq.n	80064da <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d03a      	beq.n	8006546 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	4798      	blx	r3
    }
    return;
 80064d8:	e035      	b.n	8006546 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d009      	beq.n	80064fa <HAL_UART_IRQHandler+0x62e>
 80064e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 ffcf 	bl	8007496 <UART_EndTransmit_IT>
    return;
 80064f8:	e026      	b.n	8006548 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80064fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d009      	beq.n	800651a <HAL_UART_IRQHandler+0x64e>
 8006506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800650a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fffe 	bl	8007514 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006518:	e016      	b.n	8006548 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800651a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800651e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d010      	beq.n	8006548 <HAL_UART_IRQHandler+0x67c>
 8006526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800652a:	2b00      	cmp	r3, #0
 800652c:	da0c      	bge.n	8006548 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 ffe6 	bl	8007500 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006534:	e008      	b.n	8006548 <HAL_UART_IRQHandler+0x67c>
      return;
 8006536:	bf00      	nop
 8006538:	e006      	b.n	8006548 <HAL_UART_IRQHandler+0x67c>
    return;
 800653a:	bf00      	nop
 800653c:	e004      	b.n	8006548 <HAL_UART_IRQHandler+0x67c>
      return;
 800653e:	bf00      	nop
 8006540:	e002      	b.n	8006548 <HAL_UART_IRQHandler+0x67c>
      return;
 8006542:	bf00      	nop
 8006544:	e000      	b.n	8006548 <HAL_UART_IRQHandler+0x67c>
    return;
 8006546:	bf00      	nop
  }
}
 8006548:	37e8      	adds	r7, #232	@ 0xe8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop

08006550 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	460b      	mov	r3, r1
 80065be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065d0:	b08c      	sub	sp, #48	@ 0x30
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	431a      	orrs	r2, r3
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	431a      	orrs	r2, r3
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	4baa      	ldr	r3, [pc, #680]	@ (80068a4 <UART_SetConfig+0x2d8>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	6812      	ldr	r2, [r2, #0]
 8006602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006604:	430b      	orrs	r3, r1
 8006606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a9f      	ldr	r2, [pc, #636]	@ (80068a8 <UART_SetConfig+0x2dc>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006634:	4313      	orrs	r3, r2
 8006636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006642:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	6812      	ldr	r2, [r2, #0]
 800664a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800664c:	430b      	orrs	r3, r1
 800664e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006656:	f023 010f 	bic.w	r1, r3, #15
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a90      	ldr	r2, [pc, #576]	@ (80068ac <UART_SetConfig+0x2e0>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d125      	bne.n	80066bc <UART_SetConfig+0xf0>
 8006670:	4b8f      	ldr	r3, [pc, #572]	@ (80068b0 <UART_SetConfig+0x2e4>)
 8006672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	2b03      	cmp	r3, #3
 800667c:	d81a      	bhi.n	80066b4 <UART_SetConfig+0xe8>
 800667e:	a201      	add	r2, pc, #4	@ (adr r2, 8006684 <UART_SetConfig+0xb8>)
 8006680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006684:	08006695 	.word	0x08006695
 8006688:	080066a5 	.word	0x080066a5
 800668c:	0800669d 	.word	0x0800669d
 8006690:	080066ad 	.word	0x080066ad
 8006694:	2301      	movs	r3, #1
 8006696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800669a:	e116      	b.n	80068ca <UART_SetConfig+0x2fe>
 800669c:	2302      	movs	r3, #2
 800669e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066a2:	e112      	b.n	80068ca <UART_SetConfig+0x2fe>
 80066a4:	2304      	movs	r3, #4
 80066a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066aa:	e10e      	b.n	80068ca <UART_SetConfig+0x2fe>
 80066ac:	2308      	movs	r3, #8
 80066ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b2:	e10a      	b.n	80068ca <UART_SetConfig+0x2fe>
 80066b4:	2310      	movs	r3, #16
 80066b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ba:	e106      	b.n	80068ca <UART_SetConfig+0x2fe>
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a7c      	ldr	r2, [pc, #496]	@ (80068b4 <UART_SetConfig+0x2e8>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d138      	bne.n	8006738 <UART_SetConfig+0x16c>
 80066c6:	4b7a      	ldr	r3, [pc, #488]	@ (80068b0 <UART_SetConfig+0x2e4>)
 80066c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066cc:	f003 030c 	and.w	r3, r3, #12
 80066d0:	2b0c      	cmp	r3, #12
 80066d2:	d82d      	bhi.n	8006730 <UART_SetConfig+0x164>
 80066d4:	a201      	add	r2, pc, #4	@ (adr r2, 80066dc <UART_SetConfig+0x110>)
 80066d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066da:	bf00      	nop
 80066dc:	08006711 	.word	0x08006711
 80066e0:	08006731 	.word	0x08006731
 80066e4:	08006731 	.word	0x08006731
 80066e8:	08006731 	.word	0x08006731
 80066ec:	08006721 	.word	0x08006721
 80066f0:	08006731 	.word	0x08006731
 80066f4:	08006731 	.word	0x08006731
 80066f8:	08006731 	.word	0x08006731
 80066fc:	08006719 	.word	0x08006719
 8006700:	08006731 	.word	0x08006731
 8006704:	08006731 	.word	0x08006731
 8006708:	08006731 	.word	0x08006731
 800670c:	08006729 	.word	0x08006729
 8006710:	2300      	movs	r3, #0
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006716:	e0d8      	b.n	80068ca <UART_SetConfig+0x2fe>
 8006718:	2302      	movs	r3, #2
 800671a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800671e:	e0d4      	b.n	80068ca <UART_SetConfig+0x2fe>
 8006720:	2304      	movs	r3, #4
 8006722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006726:	e0d0      	b.n	80068ca <UART_SetConfig+0x2fe>
 8006728:	2308      	movs	r3, #8
 800672a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800672e:	e0cc      	b.n	80068ca <UART_SetConfig+0x2fe>
 8006730:	2310      	movs	r3, #16
 8006732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006736:	e0c8      	b.n	80068ca <UART_SetConfig+0x2fe>
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a5e      	ldr	r2, [pc, #376]	@ (80068b8 <UART_SetConfig+0x2ec>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d125      	bne.n	800678e <UART_SetConfig+0x1c2>
 8006742:	4b5b      	ldr	r3, [pc, #364]	@ (80068b0 <UART_SetConfig+0x2e4>)
 8006744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006748:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800674c:	2b30      	cmp	r3, #48	@ 0x30
 800674e:	d016      	beq.n	800677e <UART_SetConfig+0x1b2>
 8006750:	2b30      	cmp	r3, #48	@ 0x30
 8006752:	d818      	bhi.n	8006786 <UART_SetConfig+0x1ba>
 8006754:	2b20      	cmp	r3, #32
 8006756:	d00a      	beq.n	800676e <UART_SetConfig+0x1a2>
 8006758:	2b20      	cmp	r3, #32
 800675a:	d814      	bhi.n	8006786 <UART_SetConfig+0x1ba>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <UART_SetConfig+0x19a>
 8006760:	2b10      	cmp	r3, #16
 8006762:	d008      	beq.n	8006776 <UART_SetConfig+0x1aa>
 8006764:	e00f      	b.n	8006786 <UART_SetConfig+0x1ba>
 8006766:	2300      	movs	r3, #0
 8006768:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800676c:	e0ad      	b.n	80068ca <UART_SetConfig+0x2fe>
 800676e:	2302      	movs	r3, #2
 8006770:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006774:	e0a9      	b.n	80068ca <UART_SetConfig+0x2fe>
 8006776:	2304      	movs	r3, #4
 8006778:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800677c:	e0a5      	b.n	80068ca <UART_SetConfig+0x2fe>
 800677e:	2308      	movs	r3, #8
 8006780:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006784:	e0a1      	b.n	80068ca <UART_SetConfig+0x2fe>
 8006786:	2310      	movs	r3, #16
 8006788:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800678c:	e09d      	b.n	80068ca <UART_SetConfig+0x2fe>
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a4a      	ldr	r2, [pc, #296]	@ (80068bc <UART_SetConfig+0x2f0>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d125      	bne.n	80067e4 <UART_SetConfig+0x218>
 8006798:	4b45      	ldr	r3, [pc, #276]	@ (80068b0 <UART_SetConfig+0x2e4>)
 800679a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800679e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80067a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80067a4:	d016      	beq.n	80067d4 <UART_SetConfig+0x208>
 80067a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80067a8:	d818      	bhi.n	80067dc <UART_SetConfig+0x210>
 80067aa:	2b80      	cmp	r3, #128	@ 0x80
 80067ac:	d00a      	beq.n	80067c4 <UART_SetConfig+0x1f8>
 80067ae:	2b80      	cmp	r3, #128	@ 0x80
 80067b0:	d814      	bhi.n	80067dc <UART_SetConfig+0x210>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <UART_SetConfig+0x1f0>
 80067b6:	2b40      	cmp	r3, #64	@ 0x40
 80067b8:	d008      	beq.n	80067cc <UART_SetConfig+0x200>
 80067ba:	e00f      	b.n	80067dc <UART_SetConfig+0x210>
 80067bc:	2300      	movs	r3, #0
 80067be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c2:	e082      	b.n	80068ca <UART_SetConfig+0x2fe>
 80067c4:	2302      	movs	r3, #2
 80067c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ca:	e07e      	b.n	80068ca <UART_SetConfig+0x2fe>
 80067cc:	2304      	movs	r3, #4
 80067ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067d2:	e07a      	b.n	80068ca <UART_SetConfig+0x2fe>
 80067d4:	2308      	movs	r3, #8
 80067d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067da:	e076      	b.n	80068ca <UART_SetConfig+0x2fe>
 80067dc:	2310      	movs	r3, #16
 80067de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067e2:	e072      	b.n	80068ca <UART_SetConfig+0x2fe>
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a35      	ldr	r2, [pc, #212]	@ (80068c0 <UART_SetConfig+0x2f4>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d12a      	bne.n	8006844 <UART_SetConfig+0x278>
 80067ee:	4b30      	ldr	r3, [pc, #192]	@ (80068b0 <UART_SetConfig+0x2e4>)
 80067f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067fc:	d01a      	beq.n	8006834 <UART_SetConfig+0x268>
 80067fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006802:	d81b      	bhi.n	800683c <UART_SetConfig+0x270>
 8006804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006808:	d00c      	beq.n	8006824 <UART_SetConfig+0x258>
 800680a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800680e:	d815      	bhi.n	800683c <UART_SetConfig+0x270>
 8006810:	2b00      	cmp	r3, #0
 8006812:	d003      	beq.n	800681c <UART_SetConfig+0x250>
 8006814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006818:	d008      	beq.n	800682c <UART_SetConfig+0x260>
 800681a:	e00f      	b.n	800683c <UART_SetConfig+0x270>
 800681c:	2300      	movs	r3, #0
 800681e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006822:	e052      	b.n	80068ca <UART_SetConfig+0x2fe>
 8006824:	2302      	movs	r3, #2
 8006826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800682a:	e04e      	b.n	80068ca <UART_SetConfig+0x2fe>
 800682c:	2304      	movs	r3, #4
 800682e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006832:	e04a      	b.n	80068ca <UART_SetConfig+0x2fe>
 8006834:	2308      	movs	r3, #8
 8006836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800683a:	e046      	b.n	80068ca <UART_SetConfig+0x2fe>
 800683c:	2310      	movs	r3, #16
 800683e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006842:	e042      	b.n	80068ca <UART_SetConfig+0x2fe>
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a17      	ldr	r2, [pc, #92]	@ (80068a8 <UART_SetConfig+0x2dc>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d13a      	bne.n	80068c4 <UART_SetConfig+0x2f8>
 800684e:	4b18      	ldr	r3, [pc, #96]	@ (80068b0 <UART_SetConfig+0x2e4>)
 8006850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006854:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006858:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800685c:	d01a      	beq.n	8006894 <UART_SetConfig+0x2c8>
 800685e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006862:	d81b      	bhi.n	800689c <UART_SetConfig+0x2d0>
 8006864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006868:	d00c      	beq.n	8006884 <UART_SetConfig+0x2b8>
 800686a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800686e:	d815      	bhi.n	800689c <UART_SetConfig+0x2d0>
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <UART_SetConfig+0x2b0>
 8006874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006878:	d008      	beq.n	800688c <UART_SetConfig+0x2c0>
 800687a:	e00f      	b.n	800689c <UART_SetConfig+0x2d0>
 800687c:	2300      	movs	r3, #0
 800687e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006882:	e022      	b.n	80068ca <UART_SetConfig+0x2fe>
 8006884:	2302      	movs	r3, #2
 8006886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800688a:	e01e      	b.n	80068ca <UART_SetConfig+0x2fe>
 800688c:	2304      	movs	r3, #4
 800688e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006892:	e01a      	b.n	80068ca <UART_SetConfig+0x2fe>
 8006894:	2308      	movs	r3, #8
 8006896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800689a:	e016      	b.n	80068ca <UART_SetConfig+0x2fe>
 800689c:	2310      	movs	r3, #16
 800689e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068a2:	e012      	b.n	80068ca <UART_SetConfig+0x2fe>
 80068a4:	cfff69f3 	.word	0xcfff69f3
 80068a8:	40008000 	.word	0x40008000
 80068ac:	40013800 	.word	0x40013800
 80068b0:	40021000 	.word	0x40021000
 80068b4:	40004400 	.word	0x40004400
 80068b8:	40004800 	.word	0x40004800
 80068bc:	40004c00 	.word	0x40004c00
 80068c0:	40005000 	.word	0x40005000
 80068c4:	2310      	movs	r3, #16
 80068c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4aae      	ldr	r2, [pc, #696]	@ (8006b88 <UART_SetConfig+0x5bc>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	f040 8097 	bne.w	8006a04 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80068da:	2b08      	cmp	r3, #8
 80068dc:	d823      	bhi.n	8006926 <UART_SetConfig+0x35a>
 80068de:	a201      	add	r2, pc, #4	@ (adr r2, 80068e4 <UART_SetConfig+0x318>)
 80068e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e4:	08006909 	.word	0x08006909
 80068e8:	08006927 	.word	0x08006927
 80068ec:	08006911 	.word	0x08006911
 80068f0:	08006927 	.word	0x08006927
 80068f4:	08006917 	.word	0x08006917
 80068f8:	08006927 	.word	0x08006927
 80068fc:	08006927 	.word	0x08006927
 8006900:	08006927 	.word	0x08006927
 8006904:	0800691f 	.word	0x0800691f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006908:	f7fe faf0 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 800690c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800690e:	e010      	b.n	8006932 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006910:	4b9e      	ldr	r3, [pc, #632]	@ (8006b8c <UART_SetConfig+0x5c0>)
 8006912:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006914:	e00d      	b.n	8006932 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006916:	f7fe fa7b 	bl	8004e10 <HAL_RCC_GetSysClockFreq>
 800691a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800691c:	e009      	b.n	8006932 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800691e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006922:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006924:	e005      	b.n	8006932 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006930:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 8130 	beq.w	8006b9a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693e:	4a94      	ldr	r2, [pc, #592]	@ (8006b90 <UART_SetConfig+0x5c4>)
 8006940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006944:	461a      	mov	r2, r3
 8006946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006948:	fbb3 f3f2 	udiv	r3, r3, r2
 800694c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	4613      	mov	r3, r2
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	4413      	add	r3, r2
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	429a      	cmp	r2, r3
 800695c:	d305      	bcc.n	800696a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	429a      	cmp	r2, r3
 8006968:	d903      	bls.n	8006972 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006970:	e113      	b.n	8006b9a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006974:	2200      	movs	r2, #0
 8006976:	60bb      	str	r3, [r7, #8]
 8006978:	60fa      	str	r2, [r7, #12]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697e:	4a84      	ldr	r2, [pc, #528]	@ (8006b90 <UART_SetConfig+0x5c4>)
 8006980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006984:	b29b      	uxth	r3, r3
 8006986:	2200      	movs	r2, #0
 8006988:	603b      	str	r3, [r7, #0]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006990:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006994:	f7fa f968 	bl	8000c68 <__aeabi_uldivmod>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4610      	mov	r0, r2
 800699e:	4619      	mov	r1, r3
 80069a0:	f04f 0200 	mov.w	r2, #0
 80069a4:	f04f 0300 	mov.w	r3, #0
 80069a8:	020b      	lsls	r3, r1, #8
 80069aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069ae:	0202      	lsls	r2, r0, #8
 80069b0:	6979      	ldr	r1, [r7, #20]
 80069b2:	6849      	ldr	r1, [r1, #4]
 80069b4:	0849      	lsrs	r1, r1, #1
 80069b6:	2000      	movs	r0, #0
 80069b8:	460c      	mov	r4, r1
 80069ba:	4605      	mov	r5, r0
 80069bc:	eb12 0804 	adds.w	r8, r2, r4
 80069c0:	eb43 0905 	adc.w	r9, r3, r5
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	469a      	mov	sl, r3
 80069cc:	4693      	mov	fp, r2
 80069ce:	4652      	mov	r2, sl
 80069d0:	465b      	mov	r3, fp
 80069d2:	4640      	mov	r0, r8
 80069d4:	4649      	mov	r1, r9
 80069d6:	f7fa f947 	bl	8000c68 <__aeabi_uldivmod>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	4613      	mov	r3, r2
 80069e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069e8:	d308      	bcc.n	80069fc <UART_SetConfig+0x430>
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069f0:	d204      	bcs.n	80069fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6a3a      	ldr	r2, [r7, #32]
 80069f8:	60da      	str	r2, [r3, #12]
 80069fa:	e0ce      	b.n	8006b9a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a02:	e0ca      	b.n	8006b9a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a0c:	d166      	bne.n	8006adc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006a0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d827      	bhi.n	8006a66 <UART_SetConfig+0x49a>
 8006a16:	a201      	add	r2, pc, #4	@ (adr r2, 8006a1c <UART_SetConfig+0x450>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a41 	.word	0x08006a41
 8006a20:	08006a49 	.word	0x08006a49
 8006a24:	08006a51 	.word	0x08006a51
 8006a28:	08006a67 	.word	0x08006a67
 8006a2c:	08006a57 	.word	0x08006a57
 8006a30:	08006a67 	.word	0x08006a67
 8006a34:	08006a67 	.word	0x08006a67
 8006a38:	08006a67 	.word	0x08006a67
 8006a3c:	08006a5f 	.word	0x08006a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a40:	f7fe fa54 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 8006a44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a46:	e014      	b.n	8006a72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a48:	f7fe fa66 	bl	8004f18 <HAL_RCC_GetPCLK2Freq>
 8006a4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a4e:	e010      	b.n	8006a72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a50:	4b4e      	ldr	r3, [pc, #312]	@ (8006b8c <UART_SetConfig+0x5c0>)
 8006a52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a54:	e00d      	b.n	8006a72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a56:	f7fe f9db 	bl	8004e10 <HAL_RCC_GetSysClockFreq>
 8006a5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a5c:	e009      	b.n	8006a72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a64:	e005      	b.n	8006a72 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8090 	beq.w	8006b9a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7e:	4a44      	ldr	r2, [pc, #272]	@ (8006b90 <UART_SetConfig+0x5c4>)
 8006a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a84:	461a      	mov	r2, r3
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a8c:	005a      	lsls	r2, r3, #1
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	085b      	lsrs	r3, r3, #1
 8006a94:	441a      	add	r2, r3
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	2b0f      	cmp	r3, #15
 8006aa4:	d916      	bls.n	8006ad4 <UART_SetConfig+0x508>
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aac:	d212      	bcs.n	8006ad4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f023 030f 	bic.w	r3, r3, #15
 8006ab6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	085b      	lsrs	r3, r3, #1
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	8bfb      	ldrh	r3, [r7, #30]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	8bfa      	ldrh	r2, [r7, #30]
 8006ad0:	60da      	str	r2, [r3, #12]
 8006ad2:	e062      	b.n	8006b9a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ada:	e05e      	b.n	8006b9a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006adc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d828      	bhi.n	8006b36 <UART_SetConfig+0x56a>
 8006ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8006aec <UART_SetConfig+0x520>)
 8006ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aea:	bf00      	nop
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b19 	.word	0x08006b19
 8006af4:	08006b21 	.word	0x08006b21
 8006af8:	08006b37 	.word	0x08006b37
 8006afc:	08006b27 	.word	0x08006b27
 8006b00:	08006b37 	.word	0x08006b37
 8006b04:	08006b37 	.word	0x08006b37
 8006b08:	08006b37 	.word	0x08006b37
 8006b0c:	08006b2f 	.word	0x08006b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b10:	f7fe f9ec 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 8006b14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b16:	e014      	b.n	8006b42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b18:	f7fe f9fe 	bl	8004f18 <HAL_RCC_GetPCLK2Freq>
 8006b1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b1e:	e010      	b.n	8006b42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b20:	4b1a      	ldr	r3, [pc, #104]	@ (8006b8c <UART_SetConfig+0x5c0>)
 8006b22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b24:	e00d      	b.n	8006b42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b26:	f7fe f973 	bl	8004e10 <HAL_RCC_GetSysClockFreq>
 8006b2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b2c:	e009      	b.n	8006b42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b34:	e005      	b.n	8006b42 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b40:	bf00      	nop
    }

    if (pclk != 0U)
 8006b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d028      	beq.n	8006b9a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4c:	4a10      	ldr	r2, [pc, #64]	@ (8006b90 <UART_SetConfig+0x5c4>)
 8006b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b52:	461a      	mov	r2, r3
 8006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b56:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	085b      	lsrs	r3, r3, #1
 8006b60:	441a      	add	r2, r3
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	2b0f      	cmp	r3, #15
 8006b70:	d910      	bls.n	8006b94 <UART_SetConfig+0x5c8>
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b78:	d20c      	bcs.n	8006b94 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	60da      	str	r2, [r3, #12]
 8006b84:	e009      	b.n	8006b9a <UART_SetConfig+0x5ce>
 8006b86:	bf00      	nop
 8006b88:	40008000 	.word	0x40008000
 8006b8c:	00f42400 	.word	0x00f42400
 8006b90:	0801af34 	.word	0x0801af34
      }
      else
      {
        ret = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2200      	movs	r2, #0
 8006bae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006bb6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3730      	adds	r7, #48	@ 0x30
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006bc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00a      	beq.n	8006bee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c58:	f003 0310 	and.w	r3, r3, #16
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7a:	f003 0320 	and.w	r3, r3, #32
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d01a      	beq.n	8006cda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cc2:	d10a      	bne.n	8006cda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00a      	beq.n	8006cfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	605a      	str	r2, [r3, #4]
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b098      	sub	sp, #96	@ 0x60
 8006d0c:	af02      	add	r7, sp, #8
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d18:	f7fb fdc0 	bl	800289c <HAL_GetTick>
 8006d1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0308 	and.w	r3, r3, #8
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d12f      	bne.n	8006d8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d34:	2200      	movs	r2, #0
 8006d36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f88e 	bl	8006e5c <UART_WaitOnFlagUntilTimeout>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d022      	beq.n	8006d8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4e:	e853 3f00 	ldrex	r3, [r3]
 8006d52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	461a      	mov	r2, r3
 8006d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d64:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d6c:	e841 2300 	strex	r3, r2, [r1]
 8006d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1e6      	bne.n	8006d46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e063      	b.n	8006e54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0304 	and.w	r3, r3, #4
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d149      	bne.n	8006e2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006da2:	2200      	movs	r2, #0
 8006da4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f857 	bl	8006e5c <UART_WaitOnFlagUntilTimeout>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d03c      	beq.n	8006e2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e6      	bne.n	8006db4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3308      	adds	r3, #8
 8006dec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	e853 3f00 	ldrex	r3, [r3]
 8006df4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f023 0301 	bic.w	r3, r3, #1
 8006dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3308      	adds	r3, #8
 8006e04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e06:	61fa      	str	r2, [r7, #28]
 8006e08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0a:	69b9      	ldr	r1, [r7, #24]
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	617b      	str	r3, [r7, #20]
   return(result);
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1e5      	bne.n	8006de6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e012      	b.n	8006e54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3758      	adds	r7, #88	@ 0x58
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e6c:	e04f      	b.n	8006f0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e74:	d04b      	beq.n	8006f0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e76:	f7fb fd11 	bl	800289c <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d302      	bcc.n	8006e8c <UART_WaitOnFlagUntilTimeout+0x30>
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e04e      	b.n	8006f2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0304 	and.w	r3, r3, #4
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d037      	beq.n	8006f0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b80      	cmp	r3, #128	@ 0x80
 8006ea2:	d034      	beq.n	8006f0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b40      	cmp	r3, #64	@ 0x40
 8006ea8:	d031      	beq.n	8006f0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	f003 0308 	and.w	r3, r3, #8
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d110      	bne.n	8006eda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2208      	movs	r2, #8
 8006ebe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 f920 	bl	8007106 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2208      	movs	r2, #8
 8006eca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e029      	b.n	8006f2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ee4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ee8:	d111      	bne.n	8006f0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ef2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 f906 	bl	8007106 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2220      	movs	r2, #32
 8006efe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e00f      	b.n	8006f2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	69da      	ldr	r2, [r3, #28]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	4013      	ands	r3, r2
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	bf0c      	ite	eq
 8006f1e:	2301      	moveq	r3, #1
 8006f20:	2300      	movne	r3, #0
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	461a      	mov	r2, r3
 8006f26:	79fb      	ldrb	r3, [r7, #7]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d0a0      	beq.n	8006e6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
	...

08006f38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b096      	sub	sp, #88	@ 0x58
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	4613      	mov	r3, r2
 8006f44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	88fa      	ldrh	r2, [r7, #6]
 8006f50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2222      	movs	r2, #34	@ 0x22
 8006f60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d02d      	beq.n	8006fca <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f74:	4a40      	ldr	r2, [pc, #256]	@ (8007078 <UART_Start_Receive_DMA+0x140>)
 8006f76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f7e:	4a3f      	ldr	r2, [pc, #252]	@ (800707c <UART_Start_Receive_DMA+0x144>)
 8006f80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f88:	4a3d      	ldr	r2, [pc, #244]	@ (8007080 <UART_Start_Receive_DMA+0x148>)
 8006f8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f92:	2200      	movs	r2, #0
 8006f94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3324      	adds	r3, #36	@ 0x24
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa8:	461a      	mov	r2, r3
 8006faa:	88fb      	ldrh	r3, [r7, #6]
 8006fac:	f7fb fe0a 	bl	8002bc4 <HAL_DMA_Start_IT>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d009      	beq.n	8006fca <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2210      	movs	r2, #16
 8006fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e051      	b.n	800706e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d018      	beq.n	8007004 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fda:	e853 3f00 	ldrex	r3, [r3]
 8006fde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fe6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ff2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ff6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ff8:	e841 2300 	strex	r3, r2, [r1]
 8006ffc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e6      	bne.n	8006fd2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3308      	adds	r3, #8
 800700a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007016:	f043 0301 	orr.w	r3, r3, #1
 800701a:	653b      	str	r3, [r7, #80]	@ 0x50
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3308      	adds	r3, #8
 8007022:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007024:	637a      	str	r2, [r7, #52]	@ 0x34
 8007026:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800702a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e5      	bne.n	8007004 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3308      	adds	r3, #8
 800703e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	613b      	str	r3, [r7, #16]
   return(result);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800704e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3308      	adds	r3, #8
 8007056:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007058:	623a      	str	r2, [r7, #32]
 800705a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	69f9      	ldr	r1, [r7, #28]
 800705e:	6a3a      	ldr	r2, [r7, #32]
 8007060:	e841 2300 	strex	r3, r2, [r1]
 8007064:	61bb      	str	r3, [r7, #24]
   return(result);
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e5      	bne.n	8007038 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3758      	adds	r7, #88	@ 0x58
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	08007289 	.word	0x08007289
 800707c:	080073b5 	.word	0x080073b5
 8007080:	080073f3 	.word	0x080073f3

08007084 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007084:	b480      	push	{r7}
 8007086:	b08f      	sub	sp, #60	@ 0x3c
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	61fb      	str	r3, [r7, #28]
   return(result);
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80070a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070ac:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1e6      	bne.n	800708c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3308      	adds	r3, #8
 80070c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80070d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3308      	adds	r3, #8
 80070dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070de:	61ba      	str	r2, [r7, #24]
 80070e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	6979      	ldr	r1, [r7, #20]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	613b      	str	r3, [r7, #16]
   return(result);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e5      	bne.n	80070be <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80070fa:	bf00      	nop
 80070fc:	373c      	adds	r7, #60	@ 0x3c
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007106:	b480      	push	{r7}
 8007108:	b095      	sub	sp, #84	@ 0x54
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007116:	e853 3f00 	ldrex	r3, [r3]
 800711a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	461a      	mov	r2, r3
 800712a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800712c:	643b      	str	r3, [r7, #64]	@ 0x40
 800712e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007130:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007132:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007134:	e841 2300 	strex	r3, r2, [r1]
 8007138:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800713a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e6      	bne.n	800710e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3308      	adds	r3, #8
 8007146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007156:	f023 0301 	bic.w	r3, r3, #1
 800715a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	3308      	adds	r3, #8
 8007162:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007164:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007166:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800716a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800716c:	e841 2300 	strex	r3, r2, [r1]
 8007170:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1e3      	bne.n	8007140 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800717c:	2b01      	cmp	r3, #1
 800717e:	d118      	bne.n	80071b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	e853 3f00 	ldrex	r3, [r3]
 800718c:	60bb      	str	r3, [r7, #8]
   return(result);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f023 0310 	bic.w	r3, r3, #16
 8007194:	647b      	str	r3, [r7, #68]	@ 0x44
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800719e:	61bb      	str	r3, [r7, #24]
 80071a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a2:	6979      	ldr	r1, [r7, #20]
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	e841 2300 	strex	r3, r2, [r1]
 80071aa:	613b      	str	r3, [r7, #16]
   return(result);
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e6      	bne.n	8007180 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80071c6:	bf00      	nop
 80071c8:	3754      	adds	r7, #84	@ 0x54
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b090      	sub	sp, #64	@ 0x40
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071de:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0320 	and.w	r3, r3, #32
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d137      	bne.n	800725e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80071ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071f0:	2200      	movs	r2, #0
 80071f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3308      	adds	r3, #8
 80071fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	623b      	str	r3, [r7, #32]
   return(result);
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800720c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800720e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3308      	adds	r3, #8
 8007214:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007216:	633a      	str	r2, [r7, #48]	@ 0x30
 8007218:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800721c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800721e:	e841 2300 	strex	r3, r2, [r1]
 8007222:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1e5      	bne.n	80071f6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800722a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	e853 3f00 	ldrex	r3, [r3]
 8007236:	60fb      	str	r3, [r7, #12]
   return(result);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800723e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007248:	61fb      	str	r3, [r7, #28]
 800724a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	69b9      	ldr	r1, [r7, #24]
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	617b      	str	r3, [r7, #20]
   return(result);
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e6      	bne.n	800722a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800725c:	e002      	b.n	8007264 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800725e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007260:	f7ff f976 	bl	8006550 <HAL_UART_TxCpltCallback>
}
 8007264:	bf00      	nop
 8007266:	3740      	adds	r7, #64	@ 0x40
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007278:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f7ff f972 	bl	8006564 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007280:	bf00      	nop
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b09c      	sub	sp, #112	@ 0x70
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007294:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d171      	bne.n	8007388 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80072a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	461a      	mov	r2, r3
 80072c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072d2:	e841 2300 	strex	r3, r2, [r1]
 80072d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1e6      	bne.n	80072ac <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3308      	adds	r3, #8
 80072e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072f0:	f023 0301 	bic.w	r3, r3, #1
 80072f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80072f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3308      	adds	r3, #8
 80072fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80072fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8007300:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007302:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007304:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007306:	e841 2300 	strex	r3, r2, [r1]
 800730a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800730c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1e5      	bne.n	80072de <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007312:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3308      	adds	r3, #8
 8007318:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	623b      	str	r3, [r7, #32]
   return(result);
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007328:	663b      	str	r3, [r7, #96]	@ 0x60
 800732a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3308      	adds	r3, #8
 8007330:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007332:	633a      	str	r2, [r7, #48]	@ 0x30
 8007334:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e5      	bne.n	8007312 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007348:	2220      	movs	r2, #32
 800734a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800734e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007352:	2b01      	cmp	r3, #1
 8007354:	d118      	bne.n	8007388 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007356:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	60fb      	str	r3, [r7, #12]
   return(result);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f023 0310 	bic.w	r3, r3, #16
 800736a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800736c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007374:	61fb      	str	r3, [r7, #28]
 8007376:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	69b9      	ldr	r1, [r7, #24]
 800737a:	69fa      	ldr	r2, [r7, #28]
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	617b      	str	r3, [r7, #20]
   return(result);
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e6      	bne.n	8007356 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800738a:	2200      	movs	r2, #0
 800738c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800738e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007392:	2b01      	cmp	r3, #1
 8007394:	d107      	bne.n	80073a6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007396:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007398:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800739c:	4619      	mov	r1, r3
 800739e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80073a0:	f7ff f908 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073a4:	e002      	b.n	80073ac <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80073a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80073a8:	f7ff f8e6 	bl	8006578 <HAL_UART_RxCpltCallback>
}
 80073ac:	bf00      	nop
 80073ae:	3770      	adds	r7, #112	@ 0x70
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d109      	bne.n	80073e4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80073d6:	085b      	lsrs	r3, r3, #1
 80073d8:	b29b      	uxth	r3, r3
 80073da:	4619      	mov	r1, r3
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f7ff f8e9 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073e2:	e002      	b.n	80073ea <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f7ff f8d1 	bl	800658c <HAL_UART_RxHalfCpltCallback>
}
 80073ea:	bf00      	nop
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b086      	sub	sp, #24
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073fe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007406:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800740e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800741a:	2b80      	cmp	r3, #128	@ 0x80
 800741c:	d109      	bne.n	8007432 <UART_DMAError+0x40>
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	2b21      	cmp	r3, #33	@ 0x21
 8007422:	d106      	bne.n	8007432 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	2200      	movs	r2, #0
 8007428:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800742c:	6978      	ldr	r0, [r7, #20]
 800742e:	f7ff fe29 	bl	8007084 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800743c:	2b40      	cmp	r3, #64	@ 0x40
 800743e:	d109      	bne.n	8007454 <UART_DMAError+0x62>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b22      	cmp	r3, #34	@ 0x22
 8007444:	d106      	bne.n	8007454 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2200      	movs	r2, #0
 800744a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800744e:	6978      	ldr	r0, [r7, #20]
 8007450:	f7ff fe59 	bl	8007106 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800745a:	f043 0210 	orr.w	r2, r3, #16
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007464:	6978      	ldr	r0, [r7, #20]
 8007466:	f7ff f89b 	bl	80065a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800746a:	bf00      	nop
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800747e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f7ff f889 	bl	80065a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800748e:	bf00      	nop
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b088      	sub	sp, #32
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074b2:	61fb      	str	r3, [r7, #28]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	61bb      	str	r3, [r7, #24]
 80074be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	6979      	ldr	r1, [r7, #20]
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	e841 2300 	strex	r3, r2, [r1]
 80074c8:	613b      	str	r3, [r7, #16]
   return(result);
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e6      	bne.n	800749e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff f836 	bl	8006550 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074e4:	bf00      	nop
 80074e6:	3720      	adds	r7, #32
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007536:	2b01      	cmp	r3, #1
 8007538:	d101      	bne.n	800753e <HAL_UARTEx_DisableFifoMode+0x16>
 800753a:	2302      	movs	r3, #2
 800753c:	e027      	b.n	800758e <HAL_UARTEx_DisableFifoMode+0x66>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2224      	movs	r2, #36	@ 0x24
 800754a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 0201 	bic.w	r2, r2, #1
 8007564:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800756c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2220      	movs	r2, #32
 8007580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d101      	bne.n	80075b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80075ae:	2302      	movs	r3, #2
 80075b0:	e02d      	b.n	800760e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2224      	movs	r2, #36	@ 0x24
 80075be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f022 0201 	bic.w	r2, r2, #1
 80075d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f850 	bl	8007694 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b084      	sub	sp, #16
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007626:	2b01      	cmp	r3, #1
 8007628:	d101      	bne.n	800762e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800762a:	2302      	movs	r3, #2
 800762c:	e02d      	b.n	800768a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2224      	movs	r2, #36	@ 0x24
 800763a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0201 	bic.w	r2, r2, #1
 8007654:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f812 	bl	8007694 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2220      	movs	r2, #32
 800767c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
	...

08007694 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d108      	bne.n	80076b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80076b4:	e031      	b.n	800771a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80076b6:	2308      	movs	r3, #8
 80076b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80076ba:	2308      	movs	r3, #8
 80076bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	0e5b      	lsrs	r3, r3, #25
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	0f5b      	lsrs	r3, r3, #29
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	f003 0307 	and.w	r3, r3, #7
 80076dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	7b3a      	ldrb	r2, [r7, #12]
 80076e2:	4911      	ldr	r1, [pc, #68]	@ (8007728 <UARTEx_SetNbDataToProcess+0x94>)
 80076e4:	5c8a      	ldrb	r2, [r1, r2]
 80076e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80076ea:	7b3a      	ldrb	r2, [r7, #12]
 80076ec:	490f      	ldr	r1, [pc, #60]	@ (800772c <UARTEx_SetNbDataToProcess+0x98>)
 80076ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
 80076fe:	7b7a      	ldrb	r2, [r7, #13]
 8007700:	4909      	ldr	r1, [pc, #36]	@ (8007728 <UARTEx_SetNbDataToProcess+0x94>)
 8007702:	5c8a      	ldrb	r2, [r1, r2]
 8007704:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007708:	7b7a      	ldrb	r2, [r7, #13]
 800770a:	4908      	ldr	r1, [pc, #32]	@ (800772c <UARTEx_SetNbDataToProcess+0x98>)
 800770c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800770e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007712:	b29a      	uxth	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800771a:	bf00      	nop
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	0801af4c 	.word	0x0801af4c
 800772c:	0801af54 	.word	0x0801af54

08007730 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af04      	add	r7, sp, #16
 8007736:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8007738:	2364      	movs	r3, #100	@ 0x64
 800773a:	9302      	str	r3, [sp, #8]
 800773c:	2301      	movs	r3, #1
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	f107 030f 	add.w	r3, r7, #15
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	2301      	movs	r3, #1
 8007748:	2275      	movs	r2, #117	@ 0x75
 800774a:	21d0      	movs	r1, #208	@ 0xd0
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7fc f97f 	bl	8003a50 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8007752:	7bfb      	ldrb	r3, [r7, #15]
 8007754:	2b68      	cmp	r3, #104	@ 0x68
 8007756:	d13d      	bne.n	80077d4 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800775c:	2364      	movs	r3, #100	@ 0x64
 800775e:	9302      	str	r3, [sp, #8]
 8007760:	2301      	movs	r3, #1
 8007762:	9301      	str	r3, [sp, #4]
 8007764:	f107 030e 	add.w	r3, r7, #14
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	2301      	movs	r3, #1
 800776c:	226b      	movs	r2, #107	@ 0x6b
 800776e:	21d0      	movs	r1, #208	@ 0xd0
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7fc f859 	bl	8003828 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8007776:	2307      	movs	r3, #7
 8007778:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800777a:	2364      	movs	r3, #100	@ 0x64
 800777c:	9302      	str	r3, [sp, #8]
 800777e:	2301      	movs	r3, #1
 8007780:	9301      	str	r3, [sp, #4]
 8007782:	f107 030e 	add.w	r3, r7, #14
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	2301      	movs	r3, #1
 800778a:	2219      	movs	r2, #25
 800778c:	21d0      	movs	r1, #208	@ 0xd0
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7fc f84a 	bl	8003828 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8007794:	2300      	movs	r3, #0
 8007796:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8007798:	2364      	movs	r3, #100	@ 0x64
 800779a:	9302      	str	r3, [sp, #8]
 800779c:	2301      	movs	r3, #1
 800779e:	9301      	str	r3, [sp, #4]
 80077a0:	f107 030e 	add.w	r3, r7, #14
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	2301      	movs	r3, #1
 80077a8:	221c      	movs	r2, #28
 80077aa:	21d0      	movs	r1, #208	@ 0xd0
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7fc f83b 	bl	8003828 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80077b6:	2364      	movs	r3, #100	@ 0x64
 80077b8:	9302      	str	r3, [sp, #8]
 80077ba:	2301      	movs	r3, #1
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	f107 030e 	add.w	r3, r7, #14
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	2301      	movs	r3, #1
 80077c6:	221b      	movs	r2, #27
 80077c8:	21d0      	movs	r1, #208	@ 0xd0
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7fc f82c 	bl	8003828 <HAL_I2C_Mem_Write>
        return 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	e000      	b.n	80077d6 <MPU6050_Init+0xa6>
    }
    return 1;
 80077d4:	2301      	movs	r3, #1
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80077e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077e4:	b094      	sub	sp, #80	@ 0x50
 80077e6:	af04      	add	r7, sp, #16
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80077ec:	2364      	movs	r3, #100	@ 0x64
 80077ee:	9302      	str	r3, [sp, #8]
 80077f0:	230e      	movs	r3, #14
 80077f2:	9301      	str	r3, [sp, #4]
 80077f4:	f107 0308 	add.w	r3, r7, #8
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	2301      	movs	r3, #1
 80077fc:	223b      	movs	r2, #59	@ 0x3b
 80077fe:	21d0      	movs	r1, #208	@ 0xd0
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7fc f925 	bl	8003a50 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8007806:	7a3b      	ldrb	r3, [r7, #8]
 8007808:	021b      	lsls	r3, r3, #8
 800780a:	b21a      	sxth	r2, r3
 800780c:	7a7b      	ldrb	r3, [r7, #9]
 800780e:	b21b      	sxth	r3, r3
 8007810:	4313      	orrs	r3, r2
 8007812:	b21a      	sxth	r2, r3
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8007818:	7abb      	ldrb	r3, [r7, #10]
 800781a:	021b      	lsls	r3, r3, #8
 800781c:	b21a      	sxth	r2, r3
 800781e:	7afb      	ldrb	r3, [r7, #11]
 8007820:	b21b      	sxth	r3, r3
 8007822:	4313      	orrs	r3, r2
 8007824:	b21a      	sxth	r2, r3
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800782a:	7b3b      	ldrb	r3, [r7, #12]
 800782c:	021b      	lsls	r3, r3, #8
 800782e:	b21a      	sxth	r2, r3
 8007830:	7b7b      	ldrb	r3, [r7, #13]
 8007832:	b21b      	sxth	r3, r3
 8007834:	4313      	orrs	r3, r2
 8007836:	b21a      	sxth	r2, r3
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800783c:	7bbb      	ldrb	r3, [r7, #14]
 800783e:	021b      	lsls	r3, r3, #8
 8007840:	b21a      	sxth	r2, r3
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	b21b      	sxth	r3, r3
 8007846:	4313      	orrs	r3, r2
 8007848:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800784a:	7c3b      	ldrb	r3, [r7, #16]
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	b21a      	sxth	r2, r3
 8007850:	7c7b      	ldrb	r3, [r7, #17]
 8007852:	b21b      	sxth	r3, r3
 8007854:	4313      	orrs	r3, r2
 8007856:	b21a      	sxth	r2, r3
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800785c:	7cbb      	ldrb	r3, [r7, #18]
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	b21a      	sxth	r2, r3
 8007862:	7cfb      	ldrb	r3, [r7, #19]
 8007864:	b21b      	sxth	r3, r3
 8007866:	4313      	orrs	r3, r2
 8007868:	b21a      	sxth	r2, r3
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800786e:	7d3b      	ldrb	r3, [r7, #20]
 8007870:	021b      	lsls	r3, r3, #8
 8007872:	b21a      	sxth	r2, r3
 8007874:	7d7b      	ldrb	r3, [r7, #21]
 8007876:	b21b      	sxth	r3, r3
 8007878:	4313      	orrs	r3, r2
 800787a:	b21a      	sxth	r2, r3
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007886:	4618      	mov	r0, r3
 8007888:	f7f8 fe84 	bl	8000594 <__aeabi_i2d>
 800788c:	f04f 0200 	mov.w	r2, #0
 8007890:	4bbd      	ldr	r3, [pc, #756]	@ (8007b88 <MPU6050_Read_All+0x3a8>)
 8007892:	f7f9 f813 	bl	80008bc <__aeabi_ddiv>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7f8 fe74 	bl	8000594 <__aeabi_i2d>
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	4bb5      	ldr	r3, [pc, #724]	@ (8007b88 <MPU6050_Read_All+0x3a8>)
 80078b2:	f7f9 f803 	bl	80008bc <__aeabi_ddiv>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7f8 fe64 	bl	8000594 <__aeabi_i2d>
 80078cc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007b70 <MPU6050_Read_All+0x390>)
 80078ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d2:	f7f8 fff3 	bl	80008bc <__aeabi_ddiv>
 80078d6:	4602      	mov	r2, r0
 80078d8:	460b      	mov	r3, r1
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80078e0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80078e4:	ee07 3a90 	vmov	s15, r3
 80078e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078ec:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8007b8c <MPU6050_Read_All+0x3ac>
 80078f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078f4:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8007b90 <MPU6050_Read_All+0x3b0>
 80078f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007908:	4618      	mov	r0, r3
 800790a:	f7f8 fe43 	bl	8000594 <__aeabi_i2d>
 800790e:	a39a      	add	r3, pc, #616	@ (adr r3, 8007b78 <MPU6050_Read_All+0x398>)
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f7f8 ffd2 	bl	80008bc <__aeabi_ddiv>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8007928:	4618      	mov	r0, r3
 800792a:	f7f8 fe33 	bl	8000594 <__aeabi_i2d>
 800792e:	a392      	add	r3, pc, #584	@ (adr r3, 8007b78 <MPU6050_Read_All+0x398>)
 8007930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007934:	f7f8 ffc2 	bl	80008bc <__aeabi_ddiv>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8007948:	4618      	mov	r0, r3
 800794a:	f7f8 fe23 	bl	8000594 <__aeabi_i2d>
 800794e:	a38a      	add	r3, pc, #552	@ (adr r3, 8007b78 <MPU6050_Read_All+0x398>)
 8007950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007954:	f7f8 ffb2 	bl	80008bc <__aeabi_ddiv>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8007962:	f7fa ff9b 	bl	800289c <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	4b8a      	ldr	r3, [pc, #552]	@ (8007b94 <MPU6050_Read_All+0x3b4>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	4618      	mov	r0, r3
 8007970:	f7f8 fe00 	bl	8000574 <__aeabi_ui2d>
 8007974:	f04f 0200 	mov.w	r2, #0
 8007978:	4b87      	ldr	r3, [pc, #540]	@ (8007b98 <MPU6050_Read_All+0x3b8>)
 800797a:	f7f8 ff9f 	bl	80008bc <__aeabi_ddiv>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8007986:	f7fa ff89 	bl	800289c <HAL_GetTick>
 800798a:	4603      	mov	r3, r0
 800798c:	4a81      	ldr	r2, [pc, #516]	@ (8007b94 <MPU6050_Read_All+0x3b4>)
 800798e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007996:	461a      	mov	r2, r3
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800799e:	fb03 f202 	mul.w	r2, r3, r2
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80079a8:	4619      	mov	r1, r3
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80079b0:	fb01 f303 	mul.w	r3, r1, r3
 80079b4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7f8 fdec 	bl	8000594 <__aeabi_i2d>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	ec43 2b10 	vmov	d0, r2, r3
 80079c4:	f012 fe7a 	bl	801a6bc <sqrt>
 80079c8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80079cc:	f04f 0200 	mov.w	r2, #0
 80079d0:	f04f 0300 	mov.w	r3, #0
 80079d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80079d8:	f7f9 f8ae 	bl	8000b38 <__aeabi_dcmpeq>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d11f      	bne.n	8007a22 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7f8 fdd3 	bl	8000594 <__aeabi_i2d>
 80079ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079f2:	f7f8 ff63 	bl	80008bc <__aeabi_ddiv>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	ec43 2b17 	vmov	d7, r2, r3
 80079fe:	eeb0 0a47 	vmov.f32	s0, s14
 8007a02:	eef0 0a67 	vmov.f32	s1, s15
 8007a06:	f012 fe87 	bl	801a718 <atan>
 8007a0a:	ec51 0b10 	vmov	r0, r1, d0
 8007a0e:	a35c      	add	r3, pc, #368	@ (adr r3, 8007b80 <MPU6050_Read_All+0x3a0>)
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	f7f8 fe28 	bl	8000668 <__aeabi_dmul>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8007a20:	e005      	b.n	8007a2e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8007a22:	f04f 0200 	mov.w	r2, #0
 8007a26:	f04f 0300 	mov.w	r3, #0
 8007a2a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a34:	425b      	negs	r3, r3
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7f8 fdac 	bl	8000594 <__aeabi_i2d>
 8007a3c:	4682      	mov	sl, r0
 8007a3e:	468b      	mov	fp, r1
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7f8 fda4 	bl	8000594 <__aeabi_i2d>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	ec43 2b11 	vmov	d1, r2, r3
 8007a54:	ec4b ab10 	vmov	d0, sl, fp
 8007a58:	f012 fe2e 	bl	801a6b8 <atan2>
 8007a5c:	ec51 0b10 	vmov	r0, r1, d0
 8007a60:	a347      	add	r3, pc, #284	@ (adr r3, 8007b80 <MPU6050_Read_All+0x3a0>)
 8007a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a66:	f7f8 fdff 	bl	8000668 <__aeabi_dmul>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8007a72:	f04f 0200 	mov.w	r2, #0
 8007a76:	4b49      	ldr	r3, [pc, #292]	@ (8007b9c <MPU6050_Read_All+0x3bc>)
 8007a78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007a7c:	f7f9 f866 	bl	8000b4c <__aeabi_dcmplt>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <MPU6050_Read_All+0x2bc>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	4b43      	ldr	r3, [pc, #268]	@ (8007ba0 <MPU6050_Read_All+0x3c0>)
 8007a92:	f7f9 f879 	bl	8000b88 <__aeabi_dcmpgt>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d114      	bne.n	8007ac6 <MPU6050_Read_All+0x2e6>
 8007a9c:	f04f 0200 	mov.w	r2, #0
 8007aa0:	4b3f      	ldr	r3, [pc, #252]	@ (8007ba0 <MPU6050_Read_All+0x3c0>)
 8007aa2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007aa6:	f7f9 f86f 	bl	8000b88 <__aeabi_dcmpgt>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d015      	beq.n	8007adc <MPU6050_Read_All+0x2fc>
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8007ab6:	f04f 0200 	mov.w	r2, #0
 8007aba:	4b38      	ldr	r3, [pc, #224]	@ (8007b9c <MPU6050_Read_All+0x3bc>)
 8007abc:	f7f9 f846 	bl	8000b4c <__aeabi_dcmplt>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00a      	beq.n	8007adc <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8007ac6:	4937      	ldr	r1, [pc, #220]	@ (8007ba4 <MPU6050_Read_All+0x3c4>)
 8007ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007acc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ad6:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8007ada:	e014      	b.n	8007b06 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8007ae2:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8007ae6:	eeb0 1a47 	vmov.f32	s2, s14
 8007aea:	eef0 1a67 	vmov.f32	s3, s15
 8007aee:	ed97 0b06 	vldr	d0, [r7, #24]
 8007af2:	482c      	ldr	r0, [pc, #176]	@ (8007ba4 <MPU6050_Read_All+0x3c4>)
 8007af4:	f000 f85a 	bl	8007bac <Kalman_getAngle>
 8007af8:	eeb0 7a40 	vmov.f32	s14, s0
 8007afc:	eef0 7a60 	vmov.f32	s15, s1
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007b0c:	4690      	mov	r8, r2
 8007b0e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8007b12:	f04f 0200 	mov.w	r2, #0
 8007b16:	4b22      	ldr	r3, [pc, #136]	@ (8007ba0 <MPU6050_Read_All+0x3c0>)
 8007b18:	4640      	mov	r0, r8
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	f7f9 f834 	bl	8000b88 <__aeabi_dcmpgt>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d008      	beq.n	8007b38 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007b2c:	4614      	mov	r4, r2
 8007b2e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8007b3e:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8007b42:	eeb0 1a47 	vmov.f32	s2, s14
 8007b46:	eef0 1a67 	vmov.f32	s3, s15
 8007b4a:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8007b4e:	4816      	ldr	r0, [pc, #88]	@ (8007ba8 <MPU6050_Read_All+0x3c8>)
 8007b50:	f000 f82c 	bl	8007bac <Kalman_getAngle>
 8007b54:	eeb0 7a40 	vmov.f32	s14, s0
 8007b58:	eef0 7a60 	vmov.f32	s15, s1
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 8007b62:	bf00      	nop
 8007b64:	3740      	adds	r7, #64	@ 0x40
 8007b66:	46bd      	mov	sp, r7
 8007b68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b6c:	f3af 8000 	nop.w
 8007b70:	00000000 	.word	0x00000000
 8007b74:	40cc2900 	.word	0x40cc2900
 8007b78:	00000000 	.word	0x00000000
 8007b7c:	40606000 	.word	0x40606000
 8007b80:	1a63c1f8 	.word	0x1a63c1f8
 8007b84:	404ca5dc 	.word	0x404ca5dc
 8007b88:	40d00000 	.word	0x40d00000
 8007b8c:	43aa0000 	.word	0x43aa0000
 8007b90:	42121eb8 	.word	0x42121eb8
 8007b94:	20005308 	.word	0x20005308
 8007b98:	408f4000 	.word	0x408f4000
 8007b9c:	c0568000 	.word	0xc0568000
 8007ba0:	40568000 	.word	0x40568000
 8007ba4:	20000058 	.word	0x20000058
 8007ba8:	20000010 	.word	0x20000010

08007bac <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8007bac:	b5b0      	push	{r4, r5, r7, lr}
 8007bae:	b096      	sub	sp, #88	@ 0x58
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	61f8      	str	r0, [r7, #28]
 8007bb4:	ed87 0b04 	vstr	d0, [r7, #16]
 8007bb8:	ed87 1b02 	vstr	d1, [r7, #8]
 8007bbc:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bca:	f7f8 fb95 	bl	80002f8 <__aeabi_dsub>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007bdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007be4:	f7f8 fd40 	bl	8000668 <__aeabi_dmul>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4620      	mov	r0, r4
 8007bee:	4629      	mov	r1, r5
 8007bf0:	f7f8 fb84 	bl	80002fc <__adddf3>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	69f9      	ldr	r1, [r7, #28]
 8007bfa:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c0e:	f7f8 fd2b 	bl	8000668 <__aeabi_dmul>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	4610      	mov	r0, r2
 8007c18:	4619      	mov	r1, r3
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007c20:	f7f8 fb6a 	bl	80002f8 <__aeabi_dsub>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	4610      	mov	r0, r2
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007c32:	f7f8 fb61 	bl	80002f8 <__aeabi_dsub>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	f7f8 fb5a 	bl	80002fc <__adddf3>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4619      	mov	r1, r3
 8007c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c54:	f7f8 fd08 	bl	8000668 <__aeabi_dmul>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	4629      	mov	r1, r5
 8007c60:	f7f8 fb4c 	bl	80002fc <__adddf3>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	69f9      	ldr	r1, [r7, #28]
 8007c6a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c7e:	f7f8 fcf3 	bl	8000668 <__aeabi_dmul>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4620      	mov	r0, r4
 8007c88:	4629      	mov	r1, r5
 8007c8a:	f7f8 fb35 	bl	80002f8 <__aeabi_dsub>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	69f9      	ldr	r1, [r7, #28]
 8007c94:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007ca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca8:	f7f8 fcde 	bl	8000668 <__aeabi_dmul>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	f7f8 fb20 	bl	80002f8 <__aeabi_dsub>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	69f9      	ldr	r1, [r7, #28]
 8007cbe:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd2:	f7f8 fcc9 	bl	8000668 <__aeabi_dmul>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	4620      	mov	r0, r4
 8007cdc:	4629      	mov	r1, r5
 8007cde:	f7f8 fb0d 	bl	80002fc <__adddf3>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	69f9      	ldr	r1, [r7, #28]
 8007ce8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007cf8:	f7f8 fb00 	bl	80002fc <__adddf3>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007d0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007d0e:	f7f8 fdd5 	bl	80008bc <__aeabi_ddiv>
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007d20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007d24:	f7f8 fdca 	bl	80008bc <__aeabi_ddiv>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007d36:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d3a:	f7f8 fadd 	bl	80002f8 <__aeabi_dsub>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007d4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007d50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007d54:	f7f8 fc88 	bl	8000668 <__aeabi_dmul>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	4629      	mov	r1, r5
 8007d60:	f7f8 facc 	bl	80002fc <__adddf3>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	69f9      	ldr	r1, [r7, #28]
 8007d6a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8007d74:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007d78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007d7c:	f7f8 fc74 	bl	8000668 <__aeabi_dmul>
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	4620      	mov	r0, r4
 8007d86:	4629      	mov	r1, r5
 8007d88:	f7f8 fab8 	bl	80002fc <__adddf3>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	69f9      	ldr	r1, [r7, #28]
 8007d92:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007d9c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007da6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8007db0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007db4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007db8:	f7f8 fc56 	bl	8000668 <__aeabi_dmul>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	f7f8 fa98 	bl	80002f8 <__aeabi_dsub>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	69f9      	ldr	r1, [r7, #28]
 8007dce:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8007dd8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007ddc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007de0:	f7f8 fc42 	bl	8000668 <__aeabi_dmul>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4620      	mov	r0, r4
 8007dea:	4629      	mov	r1, r5
 8007dec:	f7f8 fa84 	bl	80002f8 <__aeabi_dsub>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	69f9      	ldr	r1, [r7, #28]
 8007df6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8007e00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007e08:	f7f8 fc2e 	bl	8000668 <__aeabi_dmul>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4620      	mov	r0, r4
 8007e12:	4629      	mov	r1, r5
 8007e14:	f7f8 fa70 	bl	80002f8 <__aeabi_dsub>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	69f9      	ldr	r1, [r7, #28]
 8007e1e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8007e28:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007e2c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007e30:	f7f8 fc1a 	bl	8000668 <__aeabi_dmul>
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	4620      	mov	r0, r4
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	f7f8 fa5c 	bl	80002f8 <__aeabi_dsub>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	69f9      	ldr	r1, [r7, #28]
 8007e46:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007e50:	ec43 2b17 	vmov	d7, r2, r3
};
 8007e54:	eeb0 0a47 	vmov.f32	s0, s14
 8007e58:	eef0 0a67 	vmov.f32	s1, s15
 8007e5c:	3758      	adds	r7, #88	@ 0x58
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007e64 <__NVIC_SetPriority>:
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	6039      	str	r1, [r7, #0]
 8007e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	db0a      	blt.n	8007e8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	490c      	ldr	r1, [pc, #48]	@ (8007eb0 <__NVIC_SetPriority+0x4c>)
 8007e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e82:	0112      	lsls	r2, r2, #4
 8007e84:	b2d2      	uxtb	r2, r2
 8007e86:	440b      	add	r3, r1
 8007e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007e8c:	e00a      	b.n	8007ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	4908      	ldr	r1, [pc, #32]	@ (8007eb4 <__NVIC_SetPriority+0x50>)
 8007e94:	79fb      	ldrb	r3, [r7, #7]
 8007e96:	f003 030f 	and.w	r3, r3, #15
 8007e9a:	3b04      	subs	r3, #4
 8007e9c:	0112      	lsls	r2, r2, #4
 8007e9e:	b2d2      	uxtb	r2, r2
 8007ea0:	440b      	add	r3, r1
 8007ea2:	761a      	strb	r2, [r3, #24]
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	e000e100 	.word	0xe000e100
 8007eb4:	e000ed00 	.word	0xe000ed00

08007eb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007ebc:	4b05      	ldr	r3, [pc, #20]	@ (8007ed4 <SysTick_Handler+0x1c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007ec0:	f001 fd40 	bl	8009944 <xTaskGetSchedulerState>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d001      	beq.n	8007ece <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007eca:	f002 fb35 	bl	800a538 <xPortSysTickHandler>
  }
}
 8007ece:	bf00      	nop
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	e000e010 	.word	0xe000e010

08007ed8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007edc:	2100      	movs	r1, #0
 8007ede:	f06f 0004 	mvn.w	r0, #4
 8007ee2:	f7ff ffbf 	bl	8007e64 <__NVIC_SetPriority>
#endif
}
 8007ee6:	bf00      	nop
 8007ee8:	bd80      	pop	{r7, pc}
	...

08007eec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ef2:	f3ef 8305 	mrs	r3, IPSR
 8007ef6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ef8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007efe:	f06f 0305 	mvn.w	r3, #5
 8007f02:	607b      	str	r3, [r7, #4]
 8007f04:	e00c      	b.n	8007f20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f06:	4b0a      	ldr	r3, [pc, #40]	@ (8007f30 <osKernelInitialize+0x44>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d105      	bne.n	8007f1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f0e:	4b08      	ldr	r3, [pc, #32]	@ (8007f30 <osKernelInitialize+0x44>)
 8007f10:	2201      	movs	r2, #1
 8007f12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	607b      	str	r3, [r7, #4]
 8007f18:	e002      	b.n	8007f20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f20:	687b      	ldr	r3, [r7, #4]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	2000530c 	.word	0x2000530c

08007f34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f3a:	f3ef 8305 	mrs	r3, IPSR
 8007f3e:	603b      	str	r3, [r7, #0]
  return(result);
 8007f40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007f46:	f06f 0305 	mvn.w	r3, #5
 8007f4a:	607b      	str	r3, [r7, #4]
 8007f4c:	e010      	b.n	8007f70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f7c <osKernelStart+0x48>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d109      	bne.n	8007f6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007f56:	f7ff ffbf 	bl	8007ed8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007f5a:	4b08      	ldr	r3, [pc, #32]	@ (8007f7c <osKernelStart+0x48>)
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007f60:	f001 f87a 	bl	8009058 <vTaskStartScheduler>
      stat = osOK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	607b      	str	r3, [r7, #4]
 8007f68:	e002      	b.n	8007f70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007f6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f70:	687b      	ldr	r3, [r7, #4]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	2000530c 	.word	0x2000530c

08007f80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08e      	sub	sp, #56	@ 0x38
 8007f84:	af04      	add	r7, sp, #16
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f90:	f3ef 8305 	mrs	r3, IPSR
 8007f94:	617b      	str	r3, [r7, #20]
  return(result);
 8007f96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d17e      	bne.n	800809a <osThreadNew+0x11a>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d07b      	beq.n	800809a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007fa2:	2380      	movs	r3, #128	@ 0x80
 8007fa4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007fa6:	2318      	movs	r3, #24
 8007fa8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007faa:	2300      	movs	r3, #0
 8007fac:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007fae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007fb2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d045      	beq.n	8008046 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d002      	beq.n	8007fc8 <osThreadNew+0x48>
        name = attr->name;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d008      	beq.n	8007fee <osThreadNew+0x6e>
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	2b38      	cmp	r3, #56	@ 0x38
 8007fe0:	d805      	bhi.n	8007fee <osThreadNew+0x6e>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <osThreadNew+0x72>
        return (NULL);
 8007fee:	2300      	movs	r3, #0
 8007ff0:	e054      	b.n	800809c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	089b      	lsrs	r3, r3, #2
 8008000:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00e      	beq.n	8008028 <osThreadNew+0xa8>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	2b5b      	cmp	r3, #91	@ 0x5b
 8008010:	d90a      	bls.n	8008028 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008016:	2b00      	cmp	r3, #0
 8008018:	d006      	beq.n	8008028 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <osThreadNew+0xa8>
        mem = 1;
 8008022:	2301      	movs	r3, #1
 8008024:	61bb      	str	r3, [r7, #24]
 8008026:	e010      	b.n	800804a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10c      	bne.n	800804a <osThreadNew+0xca>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d108      	bne.n	800804a <osThreadNew+0xca>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d104      	bne.n	800804a <osThreadNew+0xca>
          mem = 0;
 8008040:	2300      	movs	r3, #0
 8008042:	61bb      	str	r3, [r7, #24]
 8008044:	e001      	b.n	800804a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008046:	2300      	movs	r3, #0
 8008048:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d110      	bne.n	8008072 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008058:	9202      	str	r2, [sp, #8]
 800805a:	9301      	str	r3, [sp, #4]
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	6a3a      	ldr	r2, [r7, #32]
 8008064:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 fe1a 	bl	8008ca0 <xTaskCreateStatic>
 800806c:	4603      	mov	r3, r0
 800806e:	613b      	str	r3, [r7, #16]
 8008070:	e013      	b.n	800809a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d110      	bne.n	800809a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	b29a      	uxth	r2, r3
 800807c:	f107 0310 	add.w	r3, r7, #16
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f000 fe68 	bl	8008d60 <xTaskCreate>
 8008090:	4603      	mov	r3, r0
 8008092:	2b01      	cmp	r3, #1
 8008094:	d001      	beq.n	800809a <osThreadNew+0x11a>
            hTask = NULL;
 8008096:	2300      	movs	r3, #0
 8008098:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800809a:	693b      	ldr	r3, [r7, #16]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3728      	adds	r7, #40	@ 0x28
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080ac:	f3ef 8305 	mrs	r3, IPSR
 80080b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80080b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d003      	beq.n	80080c0 <osDelay+0x1c>
    stat = osErrorISR;
 80080b8:	f06f 0305 	mvn.w	r3, #5
 80080bc:	60fb      	str	r3, [r7, #12]
 80080be:	e007      	b.n	80080d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 ff8e 	bl	8008fec <vTaskDelay>
    }
  }

  return (stat);
 80080d0:	68fb      	ldr	r3, [r7, #12]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
	...

080080dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	4a07      	ldr	r2, [pc, #28]	@ (8008108 <vApplicationGetIdleTaskMemory+0x2c>)
 80080ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	4a06      	ldr	r2, [pc, #24]	@ (800810c <vApplicationGetIdleTaskMemory+0x30>)
 80080f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2280      	movs	r2, #128	@ 0x80
 80080f8:	601a      	str	r2, [r3, #0]
}
 80080fa:	bf00      	nop
 80080fc:	3714      	adds	r7, #20
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	20005310 	.word	0x20005310
 800810c:	2000536c 	.word	0x2000536c

08008110 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4a07      	ldr	r2, [pc, #28]	@ (800813c <vApplicationGetTimerTaskMemory+0x2c>)
 8008120:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	4a06      	ldr	r2, [pc, #24]	@ (8008140 <vApplicationGetTimerTaskMemory+0x30>)
 8008126:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800812e:	601a      	str	r2, [r3, #0]
}
 8008130:	bf00      	nop
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	2000556c 	.word	0x2000556c
 8008140:	200055c8 	.word	0x200055c8

08008144 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f103 0208 	add.w	r2, r3, #8
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800815c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f103 0208 	add.w	r2, r3, #8
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f103 0208 	add.w	r2, r3, #8
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008192:	bf00      	nop
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800819e:	b480      	push	{r7}
 80081a0:	b085      	sub	sp, #20
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	689a      	ldr	r2, [r3, #8]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	601a      	str	r2, [r3, #0]
}
 80081da:	bf00      	nop
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081e6:	b480      	push	{r7}
 80081e8:	b085      	sub	sp, #20
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081fc:	d103      	bne.n	8008206 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	e00c      	b.n	8008220 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	3308      	adds	r3, #8
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	e002      	b.n	8008214 <vListInsert+0x2e>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	429a      	cmp	r2, r3
 800821e:	d2f6      	bcs.n	800820e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	601a      	str	r2, [r3, #0]
}
 800824c:	bf00      	nop
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6892      	ldr	r2, [r2, #8]
 800826e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	6852      	ldr	r2, [r2, #4]
 8008278:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	429a      	cmp	r2, r3
 8008282:	d103      	bne.n	800828c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	689a      	ldr	r2, [r3, #8]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	1e5a      	subs	r2, r3, #1
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10b      	bne.n	80082d8 <xQueueGenericReset+0x2c>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	60bb      	str	r3, [r7, #8]
}
 80082d2:	bf00      	nop
 80082d4:	bf00      	nop
 80082d6:	e7fd      	b.n	80082d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80082d8:	f002 f89e 	bl	800a418 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082e4:	68f9      	ldr	r1, [r7, #12]
 80082e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80082e8:	fb01 f303 	mul.w	r3, r1, r3
 80082ec:	441a      	add	r2, r3
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008308:	3b01      	subs	r3, #1
 800830a:	68f9      	ldr	r1, [r7, #12]
 800830c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800830e:	fb01 f303 	mul.w	r3, r1, r3
 8008312:	441a      	add	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	22ff      	movs	r2, #255	@ 0xff
 800831c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	22ff      	movs	r2, #255	@ 0xff
 8008324:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d114      	bne.n	8008358 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d01a      	beq.n	800836c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	3310      	adds	r3, #16
 800833a:	4618      	mov	r0, r3
 800833c:	f001 f91a 	bl	8009574 <xTaskRemoveFromEventList>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d012      	beq.n	800836c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008346:	4b0d      	ldr	r3, [pc, #52]	@ (800837c <xQueueGenericReset+0xd0>)
 8008348:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	e009      	b.n	800836c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3310      	adds	r3, #16
 800835c:	4618      	mov	r0, r3
 800835e:	f7ff fef1 	bl	8008144 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3324      	adds	r3, #36	@ 0x24
 8008366:	4618      	mov	r0, r3
 8008368:	f7ff feec 	bl	8008144 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800836c:	f002 f886 	bl	800a47c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008370:	2301      	movs	r3, #1
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	e000ed04 	.word	0xe000ed04

08008380 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08e      	sub	sp, #56	@ 0x38
 8008384:	af02      	add	r7, sp, #8
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10b      	bne.n	80083ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80083a6:	bf00      	nop
 80083a8:	bf00      	nop
 80083aa:	e7fd      	b.n	80083a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10b      	bne.n	80083ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop
 80083c8:	e7fd      	b.n	80083c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d002      	beq.n	80083d6 <xQueueGenericCreateStatic+0x56>
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <xQueueGenericCreateStatic+0x5a>
 80083d6:	2301      	movs	r3, #1
 80083d8:	e000      	b.n	80083dc <xQueueGenericCreateStatic+0x5c>
 80083da:	2300      	movs	r3, #0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10b      	bne.n	80083f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80083e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e4:	f383 8811 	msr	BASEPRI, r3
 80083e8:	f3bf 8f6f 	isb	sy
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	623b      	str	r3, [r7, #32]
}
 80083f2:	bf00      	nop
 80083f4:	bf00      	nop
 80083f6:	e7fd      	b.n	80083f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d102      	bne.n	8008404 <xQueueGenericCreateStatic+0x84>
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <xQueueGenericCreateStatic+0x88>
 8008404:	2301      	movs	r3, #1
 8008406:	e000      	b.n	800840a <xQueueGenericCreateStatic+0x8a>
 8008408:	2300      	movs	r3, #0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10b      	bne.n	8008426 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	61fb      	str	r3, [r7, #28]
}
 8008420:	bf00      	nop
 8008422:	bf00      	nop
 8008424:	e7fd      	b.n	8008422 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008426:	2350      	movs	r3, #80	@ 0x50
 8008428:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2b50      	cmp	r3, #80	@ 0x50
 800842e:	d00b      	beq.n	8008448 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	61bb      	str	r3, [r7, #24]
}
 8008442:	bf00      	nop
 8008444:	bf00      	nop
 8008446:	e7fd      	b.n	8008444 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008448:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800844e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00d      	beq.n	8008470 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800845c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	4613      	mov	r3, r2
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	68b9      	ldr	r1, [r7, #8]
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 f805 	bl	800847a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008472:	4618      	mov	r0, r3
 8008474:	3730      	adds	r7, #48	@ 0x30
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	60b9      	str	r1, [r7, #8]
 8008484:	607a      	str	r2, [r7, #4]
 8008486:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d103      	bne.n	8008496 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	e002      	b.n	800849c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084a8:	2101      	movs	r1, #1
 80084aa:	69b8      	ldr	r0, [r7, #24]
 80084ac:	f7ff fefe 	bl	80082ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	78fa      	ldrb	r2, [r7, #3]
 80084b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084b8:	bf00      	nop
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08e      	sub	sp, #56	@ 0x38
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084ce:	2300      	movs	r3, #0
 80084d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80084d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10b      	bne.n	80084f4 <xQueueGenericSend+0x34>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80084ee:	bf00      	nop
 80084f0:	bf00      	nop
 80084f2:	e7fd      	b.n	80084f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d103      	bne.n	8008502 <xQueueGenericSend+0x42>
 80084fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <xQueueGenericSend+0x46>
 8008502:	2301      	movs	r3, #1
 8008504:	e000      	b.n	8008508 <xQueueGenericSend+0x48>
 8008506:	2300      	movs	r3, #0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10b      	bne.n	8008524 <xQueueGenericSend+0x64>
	__asm volatile
 800850c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800851e:	bf00      	nop
 8008520:	bf00      	nop
 8008522:	e7fd      	b.n	8008520 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	2b02      	cmp	r3, #2
 8008528:	d103      	bne.n	8008532 <xQueueGenericSend+0x72>
 800852a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800852e:	2b01      	cmp	r3, #1
 8008530:	d101      	bne.n	8008536 <xQueueGenericSend+0x76>
 8008532:	2301      	movs	r3, #1
 8008534:	e000      	b.n	8008538 <xQueueGenericSend+0x78>
 8008536:	2300      	movs	r3, #0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10b      	bne.n	8008554 <xQueueGenericSend+0x94>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	623b      	str	r3, [r7, #32]
}
 800854e:	bf00      	nop
 8008550:	bf00      	nop
 8008552:	e7fd      	b.n	8008550 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008554:	f001 f9f6 	bl	8009944 <xTaskGetSchedulerState>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d102      	bne.n	8008564 <xQueueGenericSend+0xa4>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <xQueueGenericSend+0xa8>
 8008564:	2301      	movs	r3, #1
 8008566:	e000      	b.n	800856a <xQueueGenericSend+0xaa>
 8008568:	2300      	movs	r3, #0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10b      	bne.n	8008586 <xQueueGenericSend+0xc6>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	61fb      	str	r3, [r7, #28]
}
 8008580:	bf00      	nop
 8008582:	bf00      	nop
 8008584:	e7fd      	b.n	8008582 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008586:	f001 ff47 	bl	800a418 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800858a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800858e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008592:	429a      	cmp	r2, r3
 8008594:	d302      	bcc.n	800859c <xQueueGenericSend+0xdc>
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2b02      	cmp	r3, #2
 800859a:	d129      	bne.n	80085f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	68b9      	ldr	r1, [r7, #8]
 80085a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085a2:	f000 fa0f 	bl	80089c4 <prvCopyDataToQueue>
 80085a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d010      	beq.n	80085d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b2:	3324      	adds	r3, #36	@ 0x24
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 ffdd 	bl	8009574 <xTaskRemoveFromEventList>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d013      	beq.n	80085e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80085c0:	4b3f      	ldr	r3, [pc, #252]	@ (80086c0 <xQueueGenericSend+0x200>)
 80085c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	e00a      	b.n	80085e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80085d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d007      	beq.n	80085e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80085d8:	4b39      	ldr	r3, [pc, #228]	@ (80086c0 <xQueueGenericSend+0x200>)
 80085da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085de:	601a      	str	r2, [r3, #0]
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80085e8:	f001 ff48 	bl	800a47c <vPortExitCritical>
				return pdPASS;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e063      	b.n	80086b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d103      	bne.n	80085fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085f6:	f001 ff41 	bl	800a47c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80085fa:	2300      	movs	r3, #0
 80085fc:	e05c      	b.n	80086b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008600:	2b00      	cmp	r3, #0
 8008602:	d106      	bne.n	8008612 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008604:	f107 0314 	add.w	r3, r7, #20
 8008608:	4618      	mov	r0, r3
 800860a:	f001 f83f 	bl	800968c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800860e:	2301      	movs	r3, #1
 8008610:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008612:	f001 ff33 	bl	800a47c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008616:	f000 fd87 	bl	8009128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800861a:	f001 fefd 	bl	800a418 <vPortEnterCritical>
 800861e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008620:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008624:	b25b      	sxtb	r3, r3
 8008626:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800862a:	d103      	bne.n	8008634 <xQueueGenericSend+0x174>
 800862c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862e:	2200      	movs	r2, #0
 8008630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008636:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800863a:	b25b      	sxtb	r3, r3
 800863c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008640:	d103      	bne.n	800864a <xQueueGenericSend+0x18a>
 8008642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008644:	2200      	movs	r2, #0
 8008646:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800864a:	f001 ff17 	bl	800a47c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800864e:	1d3a      	adds	r2, r7, #4
 8008650:	f107 0314 	add.w	r3, r7, #20
 8008654:	4611      	mov	r1, r2
 8008656:	4618      	mov	r0, r3
 8008658:	f001 f82e 	bl	80096b8 <xTaskCheckForTimeOut>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d124      	bne.n	80086ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008662:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008664:	f000 faa6 	bl	8008bb4 <prvIsQueueFull>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d018      	beq.n	80086a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	3310      	adds	r3, #16
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	4611      	mov	r1, r2
 8008676:	4618      	mov	r0, r3
 8008678:	f000 ff2a 	bl	80094d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800867c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800867e:	f000 fa31 	bl	8008ae4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008682:	f000 fd5f 	bl	8009144 <xTaskResumeAll>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	f47f af7c 	bne.w	8008586 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800868e:	4b0c      	ldr	r3, [pc, #48]	@ (80086c0 <xQueueGenericSend+0x200>)
 8008690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008694:	601a      	str	r2, [r3, #0]
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	e772      	b.n	8008586 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80086a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086a2:	f000 fa1f 	bl	8008ae4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086a6:	f000 fd4d 	bl	8009144 <xTaskResumeAll>
 80086aa:	e76c      	b.n	8008586 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80086ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086ae:	f000 fa19 	bl	8008ae4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086b2:	f000 fd47 	bl	8009144 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80086b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3738      	adds	r7, #56	@ 0x38
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	e000ed04 	.word	0xe000ed04

080086c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b090      	sub	sp, #64	@ 0x40
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80086d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10b      	bne.n	80086f4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80086ee:	bf00      	nop
 80086f0:	bf00      	nop
 80086f2:	e7fd      	b.n	80086f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d103      	bne.n	8008702 <xQueueGenericSendFromISR+0x3e>
 80086fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d101      	bne.n	8008706 <xQueueGenericSendFromISR+0x42>
 8008702:	2301      	movs	r3, #1
 8008704:	e000      	b.n	8008708 <xQueueGenericSendFromISR+0x44>
 8008706:	2300      	movs	r3, #0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10b      	bne.n	8008724 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800870c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008710:	f383 8811 	msr	BASEPRI, r3
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800871e:	bf00      	nop
 8008720:	bf00      	nop
 8008722:	e7fd      	b.n	8008720 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2b02      	cmp	r3, #2
 8008728:	d103      	bne.n	8008732 <xQueueGenericSendFromISR+0x6e>
 800872a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800872e:	2b01      	cmp	r3, #1
 8008730:	d101      	bne.n	8008736 <xQueueGenericSendFromISR+0x72>
 8008732:	2301      	movs	r3, #1
 8008734:	e000      	b.n	8008738 <xQueueGenericSendFromISR+0x74>
 8008736:	2300      	movs	r3, #0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10b      	bne.n	8008754 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800873c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	623b      	str	r3, [r7, #32]
}
 800874e:	bf00      	nop
 8008750:	bf00      	nop
 8008752:	e7fd      	b.n	8008750 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008754:	f001 ff40 	bl	800a5d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008758:	f3ef 8211 	mrs	r2, BASEPRI
 800875c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	61fa      	str	r2, [r7, #28]
 800876e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008770:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008772:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008776:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800877c:	429a      	cmp	r2, r3
 800877e:	d302      	bcc.n	8008786 <xQueueGenericSendFromISR+0xc2>
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2b02      	cmp	r3, #2
 8008784:	d12f      	bne.n	80087e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008788:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800878c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008794:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	68b9      	ldr	r1, [r7, #8]
 800879a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800879c:	f000 f912 	bl	80089c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80087a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087a8:	d112      	bne.n	80087d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d016      	beq.n	80087e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b4:	3324      	adds	r3, #36	@ 0x24
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 fedc 	bl	8009574 <xTaskRemoveFromEventList>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00e      	beq.n	80087e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00b      	beq.n	80087e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	e007      	b.n	80087e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80087d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80087d4:	3301      	adds	r3, #1
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	b25a      	sxtb	r2, r3
 80087da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80087e0:	2301      	movs	r3, #1
 80087e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80087e4:	e001      	b.n	80087ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087e6:	2300      	movs	r3, #0
 80087e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80087f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3740      	adds	r7, #64	@ 0x40
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08c      	sub	sp, #48	@ 0x30
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800880c:	2300      	movs	r3, #0
 800880e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10b      	bne.n	8008832 <xQueueReceive+0x32>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	623b      	str	r3, [r7, #32]
}
 800882c:	bf00      	nop
 800882e:	bf00      	nop
 8008830:	e7fd      	b.n	800882e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d103      	bne.n	8008840 <xQueueReceive+0x40>
 8008838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800883c:	2b00      	cmp	r3, #0
 800883e:	d101      	bne.n	8008844 <xQueueReceive+0x44>
 8008840:	2301      	movs	r3, #1
 8008842:	e000      	b.n	8008846 <xQueueReceive+0x46>
 8008844:	2300      	movs	r3, #0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10b      	bne.n	8008862 <xQueueReceive+0x62>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	61fb      	str	r3, [r7, #28]
}
 800885c:	bf00      	nop
 800885e:	bf00      	nop
 8008860:	e7fd      	b.n	800885e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008862:	f001 f86f 	bl	8009944 <xTaskGetSchedulerState>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d102      	bne.n	8008872 <xQueueReceive+0x72>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <xQueueReceive+0x76>
 8008872:	2301      	movs	r3, #1
 8008874:	e000      	b.n	8008878 <xQueueReceive+0x78>
 8008876:	2300      	movs	r3, #0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10b      	bne.n	8008894 <xQueueReceive+0x94>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	61bb      	str	r3, [r7, #24]
}
 800888e:	bf00      	nop
 8008890:	bf00      	nop
 8008892:	e7fd      	b.n	8008890 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008894:	f001 fdc0 	bl	800a418 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800889c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800889e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d01f      	beq.n	80088e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088a4:	68b9      	ldr	r1, [r7, #8]
 80088a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088a8:	f000 f8f6 	bl	8008a98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ae:	1e5a      	subs	r2, r3, #1
 80088b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00f      	beq.n	80088dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088be:	3310      	adds	r3, #16
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 fe57 	bl	8009574 <xTaskRemoveFromEventList>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d007      	beq.n	80088dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088cc:	4b3c      	ldr	r3, [pc, #240]	@ (80089c0 <xQueueReceive+0x1c0>)
 80088ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088dc:	f001 fdce 	bl	800a47c <vPortExitCritical>
				return pdPASS;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e069      	b.n	80089b8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d103      	bne.n	80088f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088ea:	f001 fdc7 	bl	800a47c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e062      	b.n	80089b8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d106      	bne.n	8008906 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088f8:	f107 0310 	add.w	r3, r7, #16
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 fec5 	bl	800968c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008902:	2301      	movs	r3, #1
 8008904:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008906:	f001 fdb9 	bl	800a47c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800890a:	f000 fc0d 	bl	8009128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800890e:	f001 fd83 	bl	800a418 <vPortEnterCritical>
 8008912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008914:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008918:	b25b      	sxtb	r3, r3
 800891a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800891e:	d103      	bne.n	8008928 <xQueueReceive+0x128>
 8008920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800892e:	b25b      	sxtb	r3, r3
 8008930:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008934:	d103      	bne.n	800893e <xQueueReceive+0x13e>
 8008936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008938:	2200      	movs	r2, #0
 800893a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800893e:	f001 fd9d 	bl	800a47c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008942:	1d3a      	adds	r2, r7, #4
 8008944:	f107 0310 	add.w	r3, r7, #16
 8008948:	4611      	mov	r1, r2
 800894a:	4618      	mov	r0, r3
 800894c:	f000 feb4 	bl	80096b8 <xTaskCheckForTimeOut>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d123      	bne.n	800899e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008956:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008958:	f000 f916 	bl	8008b88 <prvIsQueueEmpty>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d017      	beq.n	8008992 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008964:	3324      	adds	r3, #36	@ 0x24
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	4611      	mov	r1, r2
 800896a:	4618      	mov	r0, r3
 800896c:	f000 fdb0 	bl	80094d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008970:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008972:	f000 f8b7 	bl	8008ae4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008976:	f000 fbe5 	bl	8009144 <xTaskResumeAll>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d189      	bne.n	8008894 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008980:	4b0f      	ldr	r3, [pc, #60]	@ (80089c0 <xQueueReceive+0x1c0>)
 8008982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	e780      	b.n	8008894 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008992:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008994:	f000 f8a6 	bl	8008ae4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008998:	f000 fbd4 	bl	8009144 <xTaskResumeAll>
 800899c:	e77a      	b.n	8008894 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800899e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089a0:	f000 f8a0 	bl	8008ae4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089a4:	f000 fbce 	bl	8009144 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089aa:	f000 f8ed 	bl	8008b88 <prvIsQueueEmpty>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f43f af6f 	beq.w	8008894 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3730      	adds	r7, #48	@ 0x30
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	e000ed04 	.word	0xe000ed04

080089c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089d0:	2300      	movs	r3, #0
 80089d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10d      	bne.n	80089fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d14d      	bne.n	8008a86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 ffc6 	bl	8009980 <xTaskPriorityDisinherit>
 80089f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	609a      	str	r2, [r3, #8]
 80089fc:	e043      	b.n	8008a86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d119      	bne.n	8008a38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6858      	ldr	r0, [r3, #4]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	68b9      	ldr	r1, [r7, #8]
 8008a10:	f011 f811 	bl	8019a36 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a1c:	441a      	add	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d32b      	bcc.n	8008a86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	605a      	str	r2, [r3, #4]
 8008a36:	e026      	b.n	8008a86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	68d8      	ldr	r0, [r3, #12]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a40:	461a      	mov	r2, r3
 8008a42:	68b9      	ldr	r1, [r7, #8]
 8008a44:	f010 fff7 	bl	8019a36 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	68da      	ldr	r2, [r3, #12]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a50:	425b      	negs	r3, r3
 8008a52:	441a      	add	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	68da      	ldr	r2, [r3, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d207      	bcs.n	8008a74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	689a      	ldr	r2, [r3, #8]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a6c:	425b      	negs	r3, r3
 8008a6e:	441a      	add	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d105      	bne.n	8008a86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	3b01      	subs	r3, #1
 8008a84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	1c5a      	adds	r2, r3, #1
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008a8e:	697b      	ldr	r3, [r7, #20]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3718      	adds	r7, #24
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d018      	beq.n	8008adc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68da      	ldr	r2, [r3, #12]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab2:	441a      	add	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68da      	ldr	r2, [r3, #12]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d303      	bcc.n	8008acc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68d9      	ldr	r1, [r3, #12]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	6838      	ldr	r0, [r7, #0]
 8008ad8:	f010 ffad 	bl	8019a36 <memcpy>
	}
}
 8008adc:	bf00      	nop
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008aec:	f001 fc94 	bl	800a418 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008af6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008af8:	e011      	b.n	8008b1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d012      	beq.n	8008b28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	3324      	adds	r3, #36	@ 0x24
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 fd34 	bl	8009574 <xTaskRemoveFromEventList>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b12:	f000 fe35 	bl	8009780 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	dce9      	bgt.n	8008afa <prvUnlockQueue+0x16>
 8008b26:	e000      	b.n	8008b2a <prvUnlockQueue+0x46>
					break;
 8008b28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	22ff      	movs	r2, #255	@ 0xff
 8008b2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008b32:	f001 fca3 	bl	800a47c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b36:	f001 fc6f 	bl	800a418 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b42:	e011      	b.n	8008b68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d012      	beq.n	8008b72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	3310      	adds	r3, #16
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 fd0f 	bl	8009574 <xTaskRemoveFromEventList>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b5c:	f000 fe10 	bl	8009780 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	dce9      	bgt.n	8008b44 <prvUnlockQueue+0x60>
 8008b70:	e000      	b.n	8008b74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	22ff      	movs	r2, #255	@ 0xff
 8008b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008b7c:	f001 fc7e 	bl	800a47c <vPortExitCritical>
}
 8008b80:	bf00      	nop
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b90:	f001 fc42 	bl	800a418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d102      	bne.n	8008ba2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	e001      	b.n	8008ba6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ba6:	f001 fc69 	bl	800a47c <vPortExitCritical>

	return xReturn;
 8008baa:	68fb      	ldr	r3, [r7, #12]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bbc:	f001 fc2c 	bl	800a418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d102      	bne.n	8008bd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	60fb      	str	r3, [r7, #12]
 8008bd0:	e001      	b.n	8008bd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bd6:	f001 fc51 	bl	800a47c <vPortExitCritical>

	return xReturn;
 8008bda:	68fb      	ldr	r3, [r7, #12]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60fb      	str	r3, [r7, #12]
 8008bf2:	e014      	b.n	8008c1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008bf4:	4a0f      	ldr	r2, [pc, #60]	@ (8008c34 <vQueueAddToRegistry+0x50>)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10b      	bne.n	8008c18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c00:	490c      	ldr	r1, [pc, #48]	@ (8008c34 <vQueueAddToRegistry+0x50>)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8008c34 <vQueueAddToRegistry+0x50>)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	00db      	lsls	r3, r3, #3
 8008c10:	4413      	add	r3, r2
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c16:	e006      	b.n	8008c26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	60fb      	str	r3, [r7, #12]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2b07      	cmp	r3, #7
 8008c22:	d9e7      	bls.n	8008bf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c24:	bf00      	nop
 8008c26:	bf00      	nop
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	200059c8 	.word	0x200059c8

08008c38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c48:	f001 fbe6 	bl	800a418 <vPortEnterCritical>
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c52:	b25b      	sxtb	r3, r3
 8008c54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c58:	d103      	bne.n	8008c62 <vQueueWaitForMessageRestricted+0x2a>
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c68:	b25b      	sxtb	r3, r3
 8008c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c6e:	d103      	bne.n	8008c78 <vQueueWaitForMessageRestricted+0x40>
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c78:	f001 fc00 	bl	800a47c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d106      	bne.n	8008c92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	3324      	adds	r3, #36	@ 0x24
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	68b9      	ldr	r1, [r7, #8]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 fc45 	bl	800951c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c92:	6978      	ldr	r0, [r7, #20]
 8008c94:	f7ff ff26 	bl	8008ae4 <prvUnlockQueue>
	}
 8008c98:	bf00      	nop
 8008c9a:	3718      	adds	r7, #24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b08e      	sub	sp, #56	@ 0x38
 8008ca4:	af04      	add	r7, sp, #16
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
 8008cac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10b      	bne.n	8008ccc <xTaskCreateStatic+0x2c>
	__asm volatile
 8008cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	623b      	str	r3, [r7, #32]
}
 8008cc6:	bf00      	nop
 8008cc8:	bf00      	nop
 8008cca:	e7fd      	b.n	8008cc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10b      	bne.n	8008cea <xTaskCreateStatic+0x4a>
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	61fb      	str	r3, [r7, #28]
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop
 8008ce8:	e7fd      	b.n	8008ce6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008cea:	235c      	movs	r3, #92	@ 0x5c
 8008cec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	2b5c      	cmp	r3, #92	@ 0x5c
 8008cf2:	d00b      	beq.n	8008d0c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	61bb      	str	r3, [r7, #24]
}
 8008d06:	bf00      	nop
 8008d08:	bf00      	nop
 8008d0a:	e7fd      	b.n	8008d08 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d01e      	beq.n	8008d52 <xTaskCreateStatic+0xb2>
 8008d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d01b      	beq.n	8008d52 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d22:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d26:	2202      	movs	r2, #2
 8008d28:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	9303      	str	r3, [sp, #12]
 8008d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d32:	9302      	str	r3, [sp, #8]
 8008d34:	f107 0314 	add.w	r3, r7, #20
 8008d38:	9301      	str	r3, [sp, #4]
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	68b9      	ldr	r1, [r7, #8]
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f000 f850 	bl	8008dea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008d4c:	f000 f8de 	bl	8008f0c <prvAddNewTaskToReadyList>
 8008d50:	e001      	b.n	8008d56 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008d52:	2300      	movs	r3, #0
 8008d54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d56:	697b      	ldr	r3, [r7, #20]
	}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3728      	adds	r7, #40	@ 0x28
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b08c      	sub	sp, #48	@ 0x30
 8008d64:	af04      	add	r7, sp, #16
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	603b      	str	r3, [r7, #0]
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d70:	88fb      	ldrh	r3, [r7, #6]
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4618      	mov	r0, r3
 8008d76:	f001 fc71 	bl	800a65c <pvPortMalloc>
 8008d7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00e      	beq.n	8008da0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d82:	205c      	movs	r0, #92	@ 0x5c
 8008d84:	f001 fc6a 	bl	800a65c <pvPortMalloc>
 8008d88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d003      	beq.n	8008d98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d96:	e005      	b.n	8008da4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d98:	6978      	ldr	r0, [r7, #20]
 8008d9a:	f001 fd2d 	bl	800a7f8 <vPortFree>
 8008d9e:	e001      	b.n	8008da4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008da0:	2300      	movs	r3, #0
 8008da2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d017      	beq.n	8008dda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008db2:	88fa      	ldrh	r2, [r7, #6]
 8008db4:	2300      	movs	r3, #0
 8008db6:	9303      	str	r3, [sp, #12]
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	9302      	str	r3, [sp, #8]
 8008dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dbe:	9301      	str	r3, [sp, #4]
 8008dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	68b9      	ldr	r1, [r7, #8]
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 f80e 	bl	8008dea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dce:	69f8      	ldr	r0, [r7, #28]
 8008dd0:	f000 f89c 	bl	8008f0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	61bb      	str	r3, [r7, #24]
 8008dd8:	e002      	b.n	8008de0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008dda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008dde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008de0:	69bb      	ldr	r3, [r7, #24]
	}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3720      	adds	r7, #32
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b088      	sub	sp, #32
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	60b9      	str	r1, [r7, #8]
 8008df4:	607a      	str	r2, [r7, #4]
 8008df6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	461a      	mov	r2, r3
 8008e02:	21a5      	movs	r1, #165	@ 0xa5
 8008e04:	f010 fd4e 	bl	80198a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008e12:	3b01      	subs	r3, #1
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	f023 0307 	bic.w	r3, r3, #7
 8008e20:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	f003 0307 	and.w	r3, r3, #7
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00b      	beq.n	8008e44 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e30:	f383 8811 	msr	BASEPRI, r3
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	617b      	str	r3, [r7, #20]
}
 8008e3e:	bf00      	nop
 8008e40:	bf00      	nop
 8008e42:	e7fd      	b.n	8008e40 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d01f      	beq.n	8008e8a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	61fb      	str	r3, [r7, #28]
 8008e4e:	e012      	b.n	8008e76 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	4413      	add	r3, r2
 8008e56:	7819      	ldrb	r1, [r3, #0]
 8008e58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	3334      	adds	r3, #52	@ 0x34
 8008e60:	460a      	mov	r2, r1
 8008e62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	4413      	add	r3, r2
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d006      	beq.n	8008e7e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	3301      	adds	r3, #1
 8008e74:	61fb      	str	r3, [r7, #28]
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	2b0f      	cmp	r3, #15
 8008e7a:	d9e9      	bls.n	8008e50 <prvInitialiseNewTask+0x66>
 8008e7c:	e000      	b.n	8008e80 <prvInitialiseNewTask+0x96>
			{
				break;
 8008e7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e88:	e003      	b.n	8008e92 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e94:	2b37      	cmp	r3, #55	@ 0x37
 8008e96:	d901      	bls.n	8008e9c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e98:	2337      	movs	r3, #55	@ 0x37
 8008e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ea6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eaa:	2200      	movs	r2, #0
 8008eac:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7ff f966 	bl	8008184 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eba:	3318      	adds	r3, #24
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff f961 	bl	8008184 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ec6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ed6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eda:	2200      	movs	r2, #0
 8008edc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	68f9      	ldr	r1, [r7, #12]
 8008eea:	69b8      	ldr	r0, [r7, #24]
 8008eec:	f001 f966 	bl	800a1bc <pxPortInitialiseStack>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008efe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f02:	bf00      	nop
 8008f04:	3720      	adds	r7, #32
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
	...

08008f0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f14:	f001 fa80 	bl	800a418 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f18:	4b2d      	ldr	r3, [pc, #180]	@ (8008fd0 <prvAddNewTaskToReadyList+0xc4>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	4a2c      	ldr	r2, [pc, #176]	@ (8008fd0 <prvAddNewTaskToReadyList+0xc4>)
 8008f20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f22:	4b2c      	ldr	r3, [pc, #176]	@ (8008fd4 <prvAddNewTaskToReadyList+0xc8>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d109      	bne.n	8008f3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8008fd4 <prvAddNewTaskToReadyList+0xc8>)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f30:	4b27      	ldr	r3, [pc, #156]	@ (8008fd0 <prvAddNewTaskToReadyList+0xc4>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d110      	bne.n	8008f5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f38:	f000 fc46 	bl	80097c8 <prvInitialiseTaskLists>
 8008f3c:	e00d      	b.n	8008f5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f3e:	4b26      	ldr	r3, [pc, #152]	@ (8008fd8 <prvAddNewTaskToReadyList+0xcc>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d109      	bne.n	8008f5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f46:	4b23      	ldr	r3, [pc, #140]	@ (8008fd4 <prvAddNewTaskToReadyList+0xc8>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d802      	bhi.n	8008f5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f54:	4a1f      	ldr	r2, [pc, #124]	@ (8008fd4 <prvAddNewTaskToReadyList+0xc8>)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f5a:	4b20      	ldr	r3, [pc, #128]	@ (8008fdc <prvAddNewTaskToReadyList+0xd0>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	4a1e      	ldr	r2, [pc, #120]	@ (8008fdc <prvAddNewTaskToReadyList+0xd0>)
 8008f62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f64:	4b1d      	ldr	r3, [pc, #116]	@ (8008fdc <prvAddNewTaskToReadyList+0xd0>)
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f70:	4b1b      	ldr	r3, [pc, #108]	@ (8008fe0 <prvAddNewTaskToReadyList+0xd4>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d903      	bls.n	8008f80 <prvAddNewTaskToReadyList+0x74>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f7c:	4a18      	ldr	r2, [pc, #96]	@ (8008fe0 <prvAddNewTaskToReadyList+0xd4>)
 8008f7e:	6013      	str	r3, [r2, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f84:	4613      	mov	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4a15      	ldr	r2, [pc, #84]	@ (8008fe4 <prvAddNewTaskToReadyList+0xd8>)
 8008f8e:	441a      	add	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	3304      	adds	r3, #4
 8008f94:	4619      	mov	r1, r3
 8008f96:	4610      	mov	r0, r2
 8008f98:	f7ff f901 	bl	800819e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f9c:	f001 fa6e 	bl	800a47c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8008fd8 <prvAddNewTaskToReadyList+0xcc>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00e      	beq.n	8008fc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd4 <prvAddNewTaskToReadyList+0xc8>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d207      	bcs.n	8008fc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8008fe8 <prvAddNewTaskToReadyList+0xdc>)
 8008fb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fc6:	bf00      	nop
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20005edc 	.word	0x20005edc
 8008fd4:	20005a08 	.word	0x20005a08
 8008fd8:	20005ee8 	.word	0x20005ee8
 8008fdc:	20005ef8 	.word	0x20005ef8
 8008fe0:	20005ee4 	.word	0x20005ee4
 8008fe4:	20005a0c 	.word	0x20005a0c
 8008fe8:	e000ed04 	.word	0xe000ed04

08008fec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d018      	beq.n	8009030 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ffe:	4b14      	ldr	r3, [pc, #80]	@ (8009050 <vTaskDelay+0x64>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00b      	beq.n	800901e <vTaskDelay+0x32>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	60bb      	str	r3, [r7, #8]
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop
 800901c:	e7fd      	b.n	800901a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800901e:	f000 f883 	bl	8009128 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009022:	2100      	movs	r1, #0
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fd1b 	bl	8009a60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800902a:	f000 f88b 	bl	8009144 <xTaskResumeAll>
 800902e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d107      	bne.n	8009046 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009036:	4b07      	ldr	r3, [pc, #28]	@ (8009054 <vTaskDelay+0x68>)
 8009038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800903c:	601a      	str	r2, [r3, #0]
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009046:	bf00      	nop
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20005f04 	.word	0x20005f04
 8009054:	e000ed04 	.word	0xe000ed04

08009058 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b08a      	sub	sp, #40	@ 0x28
 800905c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800905e:	2300      	movs	r3, #0
 8009060:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009062:	2300      	movs	r3, #0
 8009064:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009066:	463a      	mov	r2, r7
 8009068:	1d39      	adds	r1, r7, #4
 800906a:	f107 0308 	add.w	r3, r7, #8
 800906e:	4618      	mov	r0, r3
 8009070:	f7ff f834 	bl	80080dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	9202      	str	r2, [sp, #8]
 800907c:	9301      	str	r3, [sp, #4]
 800907e:	2300      	movs	r3, #0
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	2300      	movs	r3, #0
 8009084:	460a      	mov	r2, r1
 8009086:	4922      	ldr	r1, [pc, #136]	@ (8009110 <vTaskStartScheduler+0xb8>)
 8009088:	4822      	ldr	r0, [pc, #136]	@ (8009114 <vTaskStartScheduler+0xbc>)
 800908a:	f7ff fe09 	bl	8008ca0 <xTaskCreateStatic>
 800908e:	4603      	mov	r3, r0
 8009090:	4a21      	ldr	r2, [pc, #132]	@ (8009118 <vTaskStartScheduler+0xc0>)
 8009092:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009094:	4b20      	ldr	r3, [pc, #128]	@ (8009118 <vTaskStartScheduler+0xc0>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800909c:	2301      	movs	r3, #1
 800909e:	617b      	str	r3, [r7, #20]
 80090a0:	e001      	b.n	80090a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d102      	bne.n	80090b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80090ac:	f000 fd2c 	bl	8009b08 <xTimerCreateTimerTask>
 80090b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d116      	bne.n	80090e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80090b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090bc:	f383 8811 	msr	BASEPRI, r3
 80090c0:	f3bf 8f6f 	isb	sy
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	613b      	str	r3, [r7, #16]
}
 80090ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090cc:	4b13      	ldr	r3, [pc, #76]	@ (800911c <vTaskStartScheduler+0xc4>)
 80090ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090d4:	4b12      	ldr	r3, [pc, #72]	@ (8009120 <vTaskStartScheduler+0xc8>)
 80090d6:	2201      	movs	r2, #1
 80090d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80090da:	4b12      	ldr	r3, [pc, #72]	@ (8009124 <vTaskStartScheduler+0xcc>)
 80090dc:	2200      	movs	r2, #0
 80090de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090e0:	f001 f8f6 	bl	800a2d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090e4:	e00f      	b.n	8009106 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090ec:	d10b      	bne.n	8009106 <vTaskStartScheduler+0xae>
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	60fb      	str	r3, [r7, #12]
}
 8009100:	bf00      	nop
 8009102:	bf00      	nop
 8009104:	e7fd      	b.n	8009102 <vTaskStartScheduler+0xaa>
}
 8009106:	bf00      	nop
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	0801aec0 	.word	0x0801aec0
 8009114:	08009799 	.word	0x08009799
 8009118:	20005f00 	.word	0x20005f00
 800911c:	20005efc 	.word	0x20005efc
 8009120:	20005ee8 	.word	0x20005ee8
 8009124:	20005ee0 	.word	0x20005ee0

08009128 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009128:	b480      	push	{r7}
 800912a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800912c:	4b04      	ldr	r3, [pc, #16]	@ (8009140 <vTaskSuspendAll+0x18>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3301      	adds	r3, #1
 8009132:	4a03      	ldr	r2, [pc, #12]	@ (8009140 <vTaskSuspendAll+0x18>)
 8009134:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009136:	bf00      	nop
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	20005f04 	.word	0x20005f04

08009144 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800914a:	2300      	movs	r3, #0
 800914c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800914e:	2300      	movs	r3, #0
 8009150:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009152:	4b42      	ldr	r3, [pc, #264]	@ (800925c <xTaskResumeAll+0x118>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10b      	bne.n	8009172 <xTaskResumeAll+0x2e>
	__asm volatile
 800915a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	603b      	str	r3, [r7, #0]
}
 800916c:	bf00      	nop
 800916e:	bf00      	nop
 8009170:	e7fd      	b.n	800916e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009172:	f001 f951 	bl	800a418 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009176:	4b39      	ldr	r3, [pc, #228]	@ (800925c <xTaskResumeAll+0x118>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3b01      	subs	r3, #1
 800917c:	4a37      	ldr	r2, [pc, #220]	@ (800925c <xTaskResumeAll+0x118>)
 800917e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009180:	4b36      	ldr	r3, [pc, #216]	@ (800925c <xTaskResumeAll+0x118>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d162      	bne.n	800924e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009188:	4b35      	ldr	r3, [pc, #212]	@ (8009260 <xTaskResumeAll+0x11c>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d05e      	beq.n	800924e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009190:	e02f      	b.n	80091f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009192:	4b34      	ldr	r3, [pc, #208]	@ (8009264 <xTaskResumeAll+0x120>)
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3318      	adds	r3, #24
 800919e:	4618      	mov	r0, r3
 80091a0:	f7ff f85a 	bl	8008258 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3304      	adds	r3, #4
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7ff f855 	bl	8008258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091b2:	4b2d      	ldr	r3, [pc, #180]	@ (8009268 <xTaskResumeAll+0x124>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d903      	bls.n	80091c2 <xTaskResumeAll+0x7e>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091be:	4a2a      	ldr	r2, [pc, #168]	@ (8009268 <xTaskResumeAll+0x124>)
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c6:	4613      	mov	r3, r2
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	4413      	add	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4a27      	ldr	r2, [pc, #156]	@ (800926c <xTaskResumeAll+0x128>)
 80091d0:	441a      	add	r2, r3
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3304      	adds	r3, #4
 80091d6:	4619      	mov	r1, r3
 80091d8:	4610      	mov	r0, r2
 80091da:	f7fe ffe0 	bl	800819e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091e2:	4b23      	ldr	r3, [pc, #140]	@ (8009270 <xTaskResumeAll+0x12c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d302      	bcc.n	80091f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80091ec:	4b21      	ldr	r3, [pc, #132]	@ (8009274 <xTaskResumeAll+0x130>)
 80091ee:	2201      	movs	r2, #1
 80091f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091f2:	4b1c      	ldr	r3, [pc, #112]	@ (8009264 <xTaskResumeAll+0x120>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1cb      	bne.n	8009192 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009200:	f000 fb80 	bl	8009904 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009204:	4b1c      	ldr	r3, [pc, #112]	@ (8009278 <xTaskResumeAll+0x134>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d010      	beq.n	8009232 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009210:	f000 f846 	bl	80092a0 <xTaskIncrementTick>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800921a:	4b16      	ldr	r3, [pc, #88]	@ (8009274 <xTaskResumeAll+0x130>)
 800921c:	2201      	movs	r2, #1
 800921e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3b01      	subs	r3, #1
 8009224:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1f1      	bne.n	8009210 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800922c:	4b12      	ldr	r3, [pc, #72]	@ (8009278 <xTaskResumeAll+0x134>)
 800922e:	2200      	movs	r2, #0
 8009230:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009232:	4b10      	ldr	r3, [pc, #64]	@ (8009274 <xTaskResumeAll+0x130>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d009      	beq.n	800924e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800923a:	2301      	movs	r3, #1
 800923c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800923e:	4b0f      	ldr	r3, [pc, #60]	@ (800927c <xTaskResumeAll+0x138>)
 8009240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800924e:	f001 f915 	bl	800a47c <vPortExitCritical>

	return xAlreadyYielded;
 8009252:	68bb      	ldr	r3, [r7, #8]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	20005f04 	.word	0x20005f04
 8009260:	20005edc 	.word	0x20005edc
 8009264:	20005e9c 	.word	0x20005e9c
 8009268:	20005ee4 	.word	0x20005ee4
 800926c:	20005a0c 	.word	0x20005a0c
 8009270:	20005a08 	.word	0x20005a08
 8009274:	20005ef0 	.word	0x20005ef0
 8009278:	20005eec 	.word	0x20005eec
 800927c:	e000ed04 	.word	0xe000ed04

08009280 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009286:	4b05      	ldr	r3, [pc, #20]	@ (800929c <xTaskGetTickCount+0x1c>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800928c:	687b      	ldr	r3, [r7, #4]
}
 800928e:	4618      	mov	r0, r3
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	20005ee0 	.word	0x20005ee0

080092a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80092a6:	2300      	movs	r3, #0
 80092a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092aa:	4b4f      	ldr	r3, [pc, #316]	@ (80093e8 <xTaskIncrementTick+0x148>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f040 8090 	bne.w	80093d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092b4:	4b4d      	ldr	r3, [pc, #308]	@ (80093ec <xTaskIncrementTick+0x14c>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	3301      	adds	r3, #1
 80092ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092bc:	4a4b      	ldr	r2, [pc, #300]	@ (80093ec <xTaskIncrementTick+0x14c>)
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d121      	bne.n	800930c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80092c8:	4b49      	ldr	r3, [pc, #292]	@ (80093f0 <xTaskIncrementTick+0x150>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00b      	beq.n	80092ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80092d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	603b      	str	r3, [r7, #0]
}
 80092e4:	bf00      	nop
 80092e6:	bf00      	nop
 80092e8:	e7fd      	b.n	80092e6 <xTaskIncrementTick+0x46>
 80092ea:	4b41      	ldr	r3, [pc, #260]	@ (80093f0 <xTaskIncrementTick+0x150>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	60fb      	str	r3, [r7, #12]
 80092f0:	4b40      	ldr	r3, [pc, #256]	@ (80093f4 <xTaskIncrementTick+0x154>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a3e      	ldr	r2, [pc, #248]	@ (80093f0 <xTaskIncrementTick+0x150>)
 80092f6:	6013      	str	r3, [r2, #0]
 80092f8:	4a3e      	ldr	r2, [pc, #248]	@ (80093f4 <xTaskIncrementTick+0x154>)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6013      	str	r3, [r2, #0]
 80092fe:	4b3e      	ldr	r3, [pc, #248]	@ (80093f8 <xTaskIncrementTick+0x158>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3301      	adds	r3, #1
 8009304:	4a3c      	ldr	r2, [pc, #240]	@ (80093f8 <xTaskIncrementTick+0x158>)
 8009306:	6013      	str	r3, [r2, #0]
 8009308:	f000 fafc 	bl	8009904 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800930c:	4b3b      	ldr	r3, [pc, #236]	@ (80093fc <xTaskIncrementTick+0x15c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	693a      	ldr	r2, [r7, #16]
 8009312:	429a      	cmp	r2, r3
 8009314:	d349      	bcc.n	80093aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009316:	4b36      	ldr	r3, [pc, #216]	@ (80093f0 <xTaskIncrementTick+0x150>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d104      	bne.n	800932a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009320:	4b36      	ldr	r3, [pc, #216]	@ (80093fc <xTaskIncrementTick+0x15c>)
 8009322:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009326:	601a      	str	r2, [r3, #0]
					break;
 8009328:	e03f      	b.n	80093aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800932a:	4b31      	ldr	r3, [pc, #196]	@ (80093f0 <xTaskIncrementTick+0x150>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	429a      	cmp	r2, r3
 8009340:	d203      	bcs.n	800934a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009342:	4a2e      	ldr	r2, [pc, #184]	@ (80093fc <xTaskIncrementTick+0x15c>)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009348:	e02f      	b.n	80093aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	3304      	adds	r3, #4
 800934e:	4618      	mov	r0, r3
 8009350:	f7fe ff82 	bl	8008258 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009358:	2b00      	cmp	r3, #0
 800935a:	d004      	beq.n	8009366 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	3318      	adds	r3, #24
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe ff79 	bl	8008258 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800936a:	4b25      	ldr	r3, [pc, #148]	@ (8009400 <xTaskIncrementTick+0x160>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	429a      	cmp	r2, r3
 8009370:	d903      	bls.n	800937a <xTaskIncrementTick+0xda>
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009376:	4a22      	ldr	r2, [pc, #136]	@ (8009400 <xTaskIncrementTick+0x160>)
 8009378:	6013      	str	r3, [r2, #0]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800937e:	4613      	mov	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4a1f      	ldr	r2, [pc, #124]	@ (8009404 <xTaskIncrementTick+0x164>)
 8009388:	441a      	add	r2, r3
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	3304      	adds	r3, #4
 800938e:	4619      	mov	r1, r3
 8009390:	4610      	mov	r0, r2
 8009392:	f7fe ff04 	bl	800819e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800939a:	4b1b      	ldr	r3, [pc, #108]	@ (8009408 <xTaskIncrementTick+0x168>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d3b8      	bcc.n	8009316 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80093a4:	2301      	movs	r3, #1
 80093a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093a8:	e7b5      	b.n	8009316 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80093aa:	4b17      	ldr	r3, [pc, #92]	@ (8009408 <xTaskIncrementTick+0x168>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093b0:	4914      	ldr	r1, [pc, #80]	@ (8009404 <xTaskIncrementTick+0x164>)
 80093b2:	4613      	mov	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	440b      	add	r3, r1
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d901      	bls.n	80093c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80093c2:	2301      	movs	r3, #1
 80093c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80093c6:	4b11      	ldr	r3, [pc, #68]	@ (800940c <xTaskIncrementTick+0x16c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d007      	beq.n	80093de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80093ce:	2301      	movs	r3, #1
 80093d0:	617b      	str	r3, [r7, #20]
 80093d2:	e004      	b.n	80093de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80093d4:	4b0e      	ldr	r3, [pc, #56]	@ (8009410 <xTaskIncrementTick+0x170>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3301      	adds	r3, #1
 80093da:	4a0d      	ldr	r2, [pc, #52]	@ (8009410 <xTaskIncrementTick+0x170>)
 80093dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80093de:	697b      	ldr	r3, [r7, #20]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3718      	adds	r7, #24
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	20005f04 	.word	0x20005f04
 80093ec:	20005ee0 	.word	0x20005ee0
 80093f0:	20005e94 	.word	0x20005e94
 80093f4:	20005e98 	.word	0x20005e98
 80093f8:	20005ef4 	.word	0x20005ef4
 80093fc:	20005efc 	.word	0x20005efc
 8009400:	20005ee4 	.word	0x20005ee4
 8009404:	20005a0c 	.word	0x20005a0c
 8009408:	20005a08 	.word	0x20005a08
 800940c:	20005ef0 	.word	0x20005ef0
 8009410:	20005eec 	.word	0x20005eec

08009414 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800941a:	4b28      	ldr	r3, [pc, #160]	@ (80094bc <vTaskSwitchContext+0xa8>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d003      	beq.n	800942a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009422:	4b27      	ldr	r3, [pc, #156]	@ (80094c0 <vTaskSwitchContext+0xac>)
 8009424:	2201      	movs	r2, #1
 8009426:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009428:	e042      	b.n	80094b0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800942a:	4b25      	ldr	r3, [pc, #148]	@ (80094c0 <vTaskSwitchContext+0xac>)
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009430:	4b24      	ldr	r3, [pc, #144]	@ (80094c4 <vTaskSwitchContext+0xb0>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	60fb      	str	r3, [r7, #12]
 8009436:	e011      	b.n	800945c <vTaskSwitchContext+0x48>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10b      	bne.n	8009456 <vTaskSwitchContext+0x42>
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	607b      	str	r3, [r7, #4]
}
 8009450:	bf00      	nop
 8009452:	bf00      	nop
 8009454:	e7fd      	b.n	8009452 <vTaskSwitchContext+0x3e>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3b01      	subs	r3, #1
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	491a      	ldr	r1, [pc, #104]	@ (80094c8 <vTaskSwitchContext+0xb4>)
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	4613      	mov	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4413      	add	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	440b      	add	r3, r1
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0e3      	beq.n	8009438 <vTaskSwitchContext+0x24>
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	4613      	mov	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4413      	add	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4a13      	ldr	r2, [pc, #76]	@ (80094c8 <vTaskSwitchContext+0xb4>)
 800947c:	4413      	add	r3, r2
 800947e:	60bb      	str	r3, [r7, #8]
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	605a      	str	r2, [r3, #4]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	3308      	adds	r3, #8
 8009492:	429a      	cmp	r2, r3
 8009494:	d104      	bne.n	80094a0 <vTaskSwitchContext+0x8c>
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	605a      	str	r2, [r3, #4]
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	4a09      	ldr	r2, [pc, #36]	@ (80094cc <vTaskSwitchContext+0xb8>)
 80094a8:	6013      	str	r3, [r2, #0]
 80094aa:	4a06      	ldr	r2, [pc, #24]	@ (80094c4 <vTaskSwitchContext+0xb0>)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6013      	str	r3, [r2, #0]
}
 80094b0:	bf00      	nop
 80094b2:	3714      	adds	r7, #20
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	20005f04 	.word	0x20005f04
 80094c0:	20005ef0 	.word	0x20005ef0
 80094c4:	20005ee4 	.word	0x20005ee4
 80094c8:	20005a0c 	.word	0x20005a0c
 80094cc:	20005a08 	.word	0x20005a08

080094d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d10b      	bne.n	80094f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80094e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	60fb      	str	r3, [r7, #12]
}
 80094f2:	bf00      	nop
 80094f4:	bf00      	nop
 80094f6:	e7fd      	b.n	80094f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094f8:	4b07      	ldr	r3, [pc, #28]	@ (8009518 <vTaskPlaceOnEventList+0x48>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3318      	adds	r3, #24
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7fe fe70 	bl	80081e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009506:	2101      	movs	r1, #1
 8009508:	6838      	ldr	r0, [r7, #0]
 800950a:	f000 faa9 	bl	8009a60 <prvAddCurrentTaskToDelayedList>
}
 800950e:	bf00      	nop
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20005a08 	.word	0x20005a08

0800951c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10b      	bne.n	8009546 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800952e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	617b      	str	r3, [r7, #20]
}
 8009540:	bf00      	nop
 8009542:	bf00      	nop
 8009544:	e7fd      	b.n	8009542 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009546:	4b0a      	ldr	r3, [pc, #40]	@ (8009570 <vTaskPlaceOnEventListRestricted+0x54>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	3318      	adds	r3, #24
 800954c:	4619      	mov	r1, r3
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f7fe fe25 	bl	800819e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800955a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800955e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009560:	6879      	ldr	r1, [r7, #4]
 8009562:	68b8      	ldr	r0, [r7, #8]
 8009564:	f000 fa7c 	bl	8009a60 <prvAddCurrentTaskToDelayedList>
	}
 8009568:	bf00      	nop
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	20005a08 	.word	0x20005a08

08009574 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10b      	bne.n	80095a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	60fb      	str	r3, [r7, #12]
}
 800959c:	bf00      	nop
 800959e:	bf00      	nop
 80095a0:	e7fd      	b.n	800959e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	3318      	adds	r3, #24
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fe fe56 	bl	8008258 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009624 <xTaskRemoveFromEventList+0xb0>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d11d      	bne.n	80095f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	3304      	adds	r3, #4
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fe fe4d 	bl	8008258 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095c2:	4b19      	ldr	r3, [pc, #100]	@ (8009628 <xTaskRemoveFromEventList+0xb4>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d903      	bls.n	80095d2 <xTaskRemoveFromEventList+0x5e>
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ce:	4a16      	ldr	r2, [pc, #88]	@ (8009628 <xTaskRemoveFromEventList+0xb4>)
 80095d0:	6013      	str	r3, [r2, #0]
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095d6:	4613      	mov	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4a13      	ldr	r2, [pc, #76]	@ (800962c <xTaskRemoveFromEventList+0xb8>)
 80095e0:	441a      	add	r2, r3
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	3304      	adds	r3, #4
 80095e6:	4619      	mov	r1, r3
 80095e8:	4610      	mov	r0, r2
 80095ea:	f7fe fdd8 	bl	800819e <vListInsertEnd>
 80095ee:	e005      	b.n	80095fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	3318      	adds	r3, #24
 80095f4:	4619      	mov	r1, r3
 80095f6:	480e      	ldr	r0, [pc, #56]	@ (8009630 <xTaskRemoveFromEventList+0xbc>)
 80095f8:	f7fe fdd1 	bl	800819e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009600:	4b0c      	ldr	r3, [pc, #48]	@ (8009634 <xTaskRemoveFromEventList+0xc0>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009606:	429a      	cmp	r2, r3
 8009608:	d905      	bls.n	8009616 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800960a:	2301      	movs	r3, #1
 800960c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800960e:	4b0a      	ldr	r3, [pc, #40]	@ (8009638 <xTaskRemoveFromEventList+0xc4>)
 8009610:	2201      	movs	r2, #1
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	e001      	b.n	800961a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009616:	2300      	movs	r3, #0
 8009618:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800961a:	697b      	ldr	r3, [r7, #20]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	20005f04 	.word	0x20005f04
 8009628:	20005ee4 	.word	0x20005ee4
 800962c:	20005a0c 	.word	0x20005a0c
 8009630:	20005e9c 	.word	0x20005e9c
 8009634:	20005a08 	.word	0x20005a08
 8009638:	20005ef0 	.word	0x20005ef0

0800963c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10b      	bne.n	8009662 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	60fb      	str	r3, [r7, #12]
}
 800965c:	bf00      	nop
 800965e:	bf00      	nop
 8009660:	e7fd      	b.n	800965e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009662:	f000 fed9 	bl	800a418 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009666:	4b07      	ldr	r3, [pc, #28]	@ (8009684 <vTaskSetTimeOutState+0x48>)
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800966e:	4b06      	ldr	r3, [pc, #24]	@ (8009688 <vTaskSetTimeOutState+0x4c>)
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009676:	f000 ff01 	bl	800a47c <vPortExitCritical>
}
 800967a:	bf00      	nop
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	20005ef4 	.word	0x20005ef4
 8009688:	20005ee0 	.word	0x20005ee0

0800968c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009694:	4b06      	ldr	r3, [pc, #24]	@ (80096b0 <vTaskInternalSetTimeOutState+0x24>)
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800969c:	4b05      	ldr	r3, [pc, #20]	@ (80096b4 <vTaskInternalSetTimeOutState+0x28>)
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	605a      	str	r2, [r3, #4]
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	20005ef4 	.word	0x20005ef4
 80096b4:	20005ee0 	.word	0x20005ee0

080096b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10b      	bne.n	80096e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80096c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096cc:	f383 8811 	msr	BASEPRI, r3
 80096d0:	f3bf 8f6f 	isb	sy
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	613b      	str	r3, [r7, #16]
}
 80096da:	bf00      	nop
 80096dc:	bf00      	nop
 80096de:	e7fd      	b.n	80096dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10b      	bne.n	80096fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	60fb      	str	r3, [r7, #12]
}
 80096f8:	bf00      	nop
 80096fa:	bf00      	nop
 80096fc:	e7fd      	b.n	80096fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80096fe:	f000 fe8b 	bl	800a418 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009702:	4b1d      	ldr	r3, [pc, #116]	@ (8009778 <xTaskCheckForTimeOut+0xc0>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	69ba      	ldr	r2, [r7, #24]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800971a:	d102      	bne.n	8009722 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800971c:	2300      	movs	r3, #0
 800971e:	61fb      	str	r3, [r7, #28]
 8009720:	e023      	b.n	800976a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	4b15      	ldr	r3, [pc, #84]	@ (800977c <xTaskCheckForTimeOut+0xc4>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	429a      	cmp	r2, r3
 800972c:	d007      	beq.n	800973e <xTaskCheckForTimeOut+0x86>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	69ba      	ldr	r2, [r7, #24]
 8009734:	429a      	cmp	r2, r3
 8009736:	d302      	bcc.n	800973e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009738:	2301      	movs	r3, #1
 800973a:	61fb      	str	r3, [r7, #28]
 800973c:	e015      	b.n	800976a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	429a      	cmp	r2, r3
 8009746:	d20b      	bcs.n	8009760 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	1ad2      	subs	r2, r2, r3
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f7ff ff99 	bl	800968c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800975a:	2300      	movs	r3, #0
 800975c:	61fb      	str	r3, [r7, #28]
 800975e:	e004      	b.n	800976a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2200      	movs	r2, #0
 8009764:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009766:	2301      	movs	r3, #1
 8009768:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800976a:	f000 fe87 	bl	800a47c <vPortExitCritical>

	return xReturn;
 800976e:	69fb      	ldr	r3, [r7, #28]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3720      	adds	r7, #32
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	20005ee0 	.word	0x20005ee0
 800977c:	20005ef4 	.word	0x20005ef4

08009780 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009780:	b480      	push	{r7}
 8009782:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009784:	4b03      	ldr	r3, [pc, #12]	@ (8009794 <vTaskMissedYield+0x14>)
 8009786:	2201      	movs	r2, #1
 8009788:	601a      	str	r2, [r3, #0]
}
 800978a:	bf00      	nop
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	20005ef0 	.word	0x20005ef0

08009798 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097a0:	f000 f852 	bl	8009848 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097a4:	4b06      	ldr	r3, [pc, #24]	@ (80097c0 <prvIdleTask+0x28>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d9f9      	bls.n	80097a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80097ac:	4b05      	ldr	r3, [pc, #20]	@ (80097c4 <prvIdleTask+0x2c>)
 80097ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097bc:	e7f0      	b.n	80097a0 <prvIdleTask+0x8>
 80097be:	bf00      	nop
 80097c0:	20005a0c 	.word	0x20005a0c
 80097c4:	e000ed04 	.word	0xe000ed04

080097c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097ce:	2300      	movs	r3, #0
 80097d0:	607b      	str	r3, [r7, #4]
 80097d2:	e00c      	b.n	80097ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	4613      	mov	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4a12      	ldr	r2, [pc, #72]	@ (8009828 <prvInitialiseTaskLists+0x60>)
 80097e0:	4413      	add	r3, r2
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fe fcae 	bl	8008144 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	3301      	adds	r3, #1
 80097ec:	607b      	str	r3, [r7, #4]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b37      	cmp	r3, #55	@ 0x37
 80097f2:	d9ef      	bls.n	80097d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80097f4:	480d      	ldr	r0, [pc, #52]	@ (800982c <prvInitialiseTaskLists+0x64>)
 80097f6:	f7fe fca5 	bl	8008144 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80097fa:	480d      	ldr	r0, [pc, #52]	@ (8009830 <prvInitialiseTaskLists+0x68>)
 80097fc:	f7fe fca2 	bl	8008144 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009800:	480c      	ldr	r0, [pc, #48]	@ (8009834 <prvInitialiseTaskLists+0x6c>)
 8009802:	f7fe fc9f 	bl	8008144 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009806:	480c      	ldr	r0, [pc, #48]	@ (8009838 <prvInitialiseTaskLists+0x70>)
 8009808:	f7fe fc9c 	bl	8008144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800980c:	480b      	ldr	r0, [pc, #44]	@ (800983c <prvInitialiseTaskLists+0x74>)
 800980e:	f7fe fc99 	bl	8008144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009812:	4b0b      	ldr	r3, [pc, #44]	@ (8009840 <prvInitialiseTaskLists+0x78>)
 8009814:	4a05      	ldr	r2, [pc, #20]	@ (800982c <prvInitialiseTaskLists+0x64>)
 8009816:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009818:	4b0a      	ldr	r3, [pc, #40]	@ (8009844 <prvInitialiseTaskLists+0x7c>)
 800981a:	4a05      	ldr	r2, [pc, #20]	@ (8009830 <prvInitialiseTaskLists+0x68>)
 800981c:	601a      	str	r2, [r3, #0]
}
 800981e:	bf00      	nop
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20005a0c 	.word	0x20005a0c
 800982c:	20005e6c 	.word	0x20005e6c
 8009830:	20005e80 	.word	0x20005e80
 8009834:	20005e9c 	.word	0x20005e9c
 8009838:	20005eb0 	.word	0x20005eb0
 800983c:	20005ec8 	.word	0x20005ec8
 8009840:	20005e94 	.word	0x20005e94
 8009844:	20005e98 	.word	0x20005e98

08009848 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800984e:	e019      	b.n	8009884 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009850:	f000 fde2 	bl	800a418 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009854:	4b10      	ldr	r3, [pc, #64]	@ (8009898 <prvCheckTasksWaitingTermination+0x50>)
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3304      	adds	r3, #4
 8009860:	4618      	mov	r0, r3
 8009862:	f7fe fcf9 	bl	8008258 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009866:	4b0d      	ldr	r3, [pc, #52]	@ (800989c <prvCheckTasksWaitingTermination+0x54>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	3b01      	subs	r3, #1
 800986c:	4a0b      	ldr	r2, [pc, #44]	@ (800989c <prvCheckTasksWaitingTermination+0x54>)
 800986e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009870:	4b0b      	ldr	r3, [pc, #44]	@ (80098a0 <prvCheckTasksWaitingTermination+0x58>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	3b01      	subs	r3, #1
 8009876:	4a0a      	ldr	r2, [pc, #40]	@ (80098a0 <prvCheckTasksWaitingTermination+0x58>)
 8009878:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800987a:	f000 fdff 	bl	800a47c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f810 	bl	80098a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009884:	4b06      	ldr	r3, [pc, #24]	@ (80098a0 <prvCheckTasksWaitingTermination+0x58>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1e1      	bne.n	8009850 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800988c:	bf00      	nop
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20005eb0 	.word	0x20005eb0
 800989c:	20005edc 	.word	0x20005edc
 80098a0:	20005ec4 	.word	0x20005ec4

080098a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d108      	bne.n	80098c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 ff9c 	bl	800a7f8 <vPortFree>
				vPortFree( pxTCB );
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 ff99 	bl	800a7f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098c6:	e019      	b.n	80098fc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d103      	bne.n	80098da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 ff90 	bl	800a7f8 <vPortFree>
	}
 80098d8:	e010      	b.n	80098fc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	d00b      	beq.n	80098fc <prvDeleteTCB+0x58>
	__asm volatile
 80098e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	60fb      	str	r3, [r7, #12]
}
 80098f6:	bf00      	nop
 80098f8:	bf00      	nop
 80098fa:	e7fd      	b.n	80098f8 <prvDeleteTCB+0x54>
	}
 80098fc:	bf00      	nop
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800990a:	4b0c      	ldr	r3, [pc, #48]	@ (800993c <prvResetNextTaskUnblockTime+0x38>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d104      	bne.n	800991e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009914:	4b0a      	ldr	r3, [pc, #40]	@ (8009940 <prvResetNextTaskUnblockTime+0x3c>)
 8009916:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800991a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800991c:	e008      	b.n	8009930 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800991e:	4b07      	ldr	r3, [pc, #28]	@ (800993c <prvResetNextTaskUnblockTime+0x38>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	4a04      	ldr	r2, [pc, #16]	@ (8009940 <prvResetNextTaskUnblockTime+0x3c>)
 800992e:	6013      	str	r3, [r2, #0]
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	20005e94 	.word	0x20005e94
 8009940:	20005efc 	.word	0x20005efc

08009944 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800994a:	4b0b      	ldr	r3, [pc, #44]	@ (8009978 <xTaskGetSchedulerState+0x34>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d102      	bne.n	8009958 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009952:	2301      	movs	r3, #1
 8009954:	607b      	str	r3, [r7, #4]
 8009956:	e008      	b.n	800996a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009958:	4b08      	ldr	r3, [pc, #32]	@ (800997c <xTaskGetSchedulerState+0x38>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d102      	bne.n	8009966 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009960:	2302      	movs	r3, #2
 8009962:	607b      	str	r3, [r7, #4]
 8009964:	e001      	b.n	800996a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009966:	2300      	movs	r3, #0
 8009968:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800996a:	687b      	ldr	r3, [r7, #4]
	}
 800996c:	4618      	mov	r0, r3
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	20005ee8 	.word	0x20005ee8
 800997c:	20005f04 	.word	0x20005f04

08009980 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800998c:	2300      	movs	r3, #0
 800998e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d058      	beq.n	8009a48 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009996:	4b2f      	ldr	r3, [pc, #188]	@ (8009a54 <xTaskPriorityDisinherit+0xd4>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	429a      	cmp	r2, r3
 800999e:	d00b      	beq.n	80099b8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	60fb      	str	r3, [r7, #12]
}
 80099b2:	bf00      	nop
 80099b4:	bf00      	nop
 80099b6:	e7fd      	b.n	80099b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d10b      	bne.n	80099d8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	60bb      	str	r3, [r7, #8]
}
 80099d2:	bf00      	nop
 80099d4:	bf00      	nop
 80099d6:	e7fd      	b.n	80099d4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099dc:	1e5a      	subs	r2, r3, #1
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d02c      	beq.n	8009a48 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d128      	bne.n	8009a48 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	3304      	adds	r3, #4
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fe fc2c 	bl	8008258 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a18:	4b0f      	ldr	r3, [pc, #60]	@ (8009a58 <xTaskPriorityDisinherit+0xd8>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d903      	bls.n	8009a28 <xTaskPriorityDisinherit+0xa8>
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a24:	4a0c      	ldr	r2, [pc, #48]	@ (8009a58 <xTaskPriorityDisinherit+0xd8>)
 8009a26:	6013      	str	r3, [r2, #0]
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	4413      	add	r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4a09      	ldr	r2, [pc, #36]	@ (8009a5c <xTaskPriorityDisinherit+0xdc>)
 8009a36:	441a      	add	r2, r3
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	3304      	adds	r3, #4
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	4610      	mov	r0, r2
 8009a40:	f7fe fbad 	bl	800819e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a44:	2301      	movs	r3, #1
 8009a46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a48:	697b      	ldr	r3, [r7, #20]
	}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3718      	adds	r7, #24
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	20005a08 	.word	0x20005a08
 8009a58:	20005ee4 	.word	0x20005ee4
 8009a5c:	20005a0c 	.word	0x20005a0c

08009a60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a6a:	4b21      	ldr	r3, [pc, #132]	@ (8009af0 <prvAddCurrentTaskToDelayedList+0x90>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a70:	4b20      	ldr	r3, [pc, #128]	@ (8009af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3304      	adds	r3, #4
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fe fbee 	bl	8008258 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a82:	d10a      	bne.n	8009a9a <prvAddCurrentTaskToDelayedList+0x3a>
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d007      	beq.n	8009a9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8009af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3304      	adds	r3, #4
 8009a90:	4619      	mov	r1, r3
 8009a92:	4819      	ldr	r0, [pc, #100]	@ (8009af8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009a94:	f7fe fb83 	bl	800819e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a98:	e026      	b.n	8009ae8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009aa2:	4b14      	ldr	r3, [pc, #80]	@ (8009af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d209      	bcs.n	8009ac6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ab2:	4b12      	ldr	r3, [pc, #72]	@ (8009afc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8009af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3304      	adds	r3, #4
 8009abc:	4619      	mov	r1, r3
 8009abe:	4610      	mov	r0, r2
 8009ac0:	f7fe fb91 	bl	80081e6 <vListInsert>
}
 8009ac4:	e010      	b.n	8009ae8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8009b00 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	4b0a      	ldr	r3, [pc, #40]	@ (8009af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	f7fe fb87 	bl	80081e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8009b04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68ba      	ldr	r2, [r7, #8]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d202      	bcs.n	8009ae8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009ae2:	4a08      	ldr	r2, [pc, #32]	@ (8009b04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	6013      	str	r3, [r2, #0]
}
 8009ae8:	bf00      	nop
 8009aea:	3710      	adds	r7, #16
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	20005ee0 	.word	0x20005ee0
 8009af4:	20005a08 	.word	0x20005a08
 8009af8:	20005ec8 	.word	0x20005ec8
 8009afc:	20005e98 	.word	0x20005e98
 8009b00:	20005e94 	.word	0x20005e94
 8009b04:	20005efc 	.word	0x20005efc

08009b08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08a      	sub	sp, #40	@ 0x28
 8009b0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b12:	f000 fb13 	bl	800a13c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b16:	4b1d      	ldr	r3, [pc, #116]	@ (8009b8c <xTimerCreateTimerTask+0x84>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d021      	beq.n	8009b62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b22:	2300      	movs	r3, #0
 8009b24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b26:	1d3a      	adds	r2, r7, #4
 8009b28:	f107 0108 	add.w	r1, r7, #8
 8009b2c:	f107 030c 	add.w	r3, r7, #12
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fe faed 	bl	8008110 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b36:	6879      	ldr	r1, [r7, #4]
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	9202      	str	r2, [sp, #8]
 8009b3e:	9301      	str	r3, [sp, #4]
 8009b40:	2302      	movs	r3, #2
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	2300      	movs	r3, #0
 8009b46:	460a      	mov	r2, r1
 8009b48:	4911      	ldr	r1, [pc, #68]	@ (8009b90 <xTimerCreateTimerTask+0x88>)
 8009b4a:	4812      	ldr	r0, [pc, #72]	@ (8009b94 <xTimerCreateTimerTask+0x8c>)
 8009b4c:	f7ff f8a8 	bl	8008ca0 <xTaskCreateStatic>
 8009b50:	4603      	mov	r3, r0
 8009b52:	4a11      	ldr	r2, [pc, #68]	@ (8009b98 <xTimerCreateTimerTask+0x90>)
 8009b54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b56:	4b10      	ldr	r3, [pc, #64]	@ (8009b98 <xTimerCreateTimerTask+0x90>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d001      	beq.n	8009b62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10b      	bne.n	8009b80 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	613b      	str	r3, [r7, #16]
}
 8009b7a:	bf00      	nop
 8009b7c:	bf00      	nop
 8009b7e:	e7fd      	b.n	8009b7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b80:	697b      	ldr	r3, [r7, #20]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3718      	adds	r7, #24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20005f38 	.word	0x20005f38
 8009b90:	0801aec8 	.word	0x0801aec8
 8009b94:	08009cd5 	.word	0x08009cd5
 8009b98:	20005f3c 	.word	0x20005f3c

08009b9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08a      	sub	sp, #40	@ 0x28
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
 8009ba8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009baa:	2300      	movs	r3, #0
 8009bac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10b      	bne.n	8009bcc <xTimerGenericCommand+0x30>
	__asm volatile
 8009bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	623b      	str	r3, [r7, #32]
}
 8009bc6:	bf00      	nop
 8009bc8:	bf00      	nop
 8009bca:	e7fd      	b.n	8009bc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009bcc:	4b19      	ldr	r3, [pc, #100]	@ (8009c34 <xTimerGenericCommand+0x98>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d02a      	beq.n	8009c2a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b05      	cmp	r3, #5
 8009be4:	dc18      	bgt.n	8009c18 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009be6:	f7ff fead 	bl	8009944 <xTaskGetSchedulerState>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d109      	bne.n	8009c04 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009bf0:	4b10      	ldr	r3, [pc, #64]	@ (8009c34 <xTimerGenericCommand+0x98>)
 8009bf2:	6818      	ldr	r0, [r3, #0]
 8009bf4:	f107 0110 	add.w	r1, r7, #16
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bfc:	f7fe fc60 	bl	80084c0 <xQueueGenericSend>
 8009c00:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c02:	e012      	b.n	8009c2a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c04:	4b0b      	ldr	r3, [pc, #44]	@ (8009c34 <xTimerGenericCommand+0x98>)
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	f107 0110 	add.w	r1, r7, #16
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f7fe fc56 	bl	80084c0 <xQueueGenericSend>
 8009c14:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c16:	e008      	b.n	8009c2a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c18:	4b06      	ldr	r3, [pc, #24]	@ (8009c34 <xTimerGenericCommand+0x98>)
 8009c1a:	6818      	ldr	r0, [r3, #0]
 8009c1c:	f107 0110 	add.w	r1, r7, #16
 8009c20:	2300      	movs	r3, #0
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	f7fe fd4e 	bl	80086c4 <xQueueGenericSendFromISR>
 8009c28:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3728      	adds	r7, #40	@ 0x28
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20005f38 	.word	0x20005f38

08009c38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b088      	sub	sp, #32
 8009c3c:	af02      	add	r7, sp, #8
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c42:	4b23      	ldr	r3, [pc, #140]	@ (8009cd0 <prvProcessExpiredTimer+0x98>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	3304      	adds	r3, #4
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe fb01 	bl	8008258 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c5c:	f003 0304 	and.w	r3, r3, #4
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d023      	beq.n	8009cac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	699a      	ldr	r2, [r3, #24]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	18d1      	adds	r1, r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	683a      	ldr	r2, [r7, #0]
 8009c70:	6978      	ldr	r0, [r7, #20]
 8009c72:	f000 f8d5 	bl	8009e20 <prvInsertTimerInActiveList>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d020      	beq.n	8009cbe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	2300      	movs	r3, #0
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	2100      	movs	r1, #0
 8009c86:	6978      	ldr	r0, [r7, #20]
 8009c88:	f7ff ff88 	bl	8009b9c <xTimerGenericCommand>
 8009c8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d114      	bne.n	8009cbe <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	60fb      	str	r3, [r7, #12]
}
 8009ca6:	bf00      	nop
 8009ca8:	bf00      	nop
 8009caa:	e7fd      	b.n	8009ca8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cb2:	f023 0301 	bic.w	r3, r3, #1
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	6978      	ldr	r0, [r7, #20]
 8009cc4:	4798      	blx	r3
}
 8009cc6:	bf00      	nop
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20005f30 	.word	0x20005f30

08009cd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cdc:	f107 0308 	add.w	r3, r7, #8
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 f859 	bl	8009d98 <prvGetNextExpireTime>
 8009ce6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	4619      	mov	r1, r3
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f000 f805 	bl	8009cfc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009cf2:	f000 f8d7 	bl	8009ea4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cf6:	bf00      	nop
 8009cf8:	e7f0      	b.n	8009cdc <prvTimerTask+0x8>
	...

08009cfc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d06:	f7ff fa0f 	bl	8009128 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d0a:	f107 0308 	add.w	r3, r7, #8
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 f866 	bl	8009de0 <prvSampleTimeNow>
 8009d14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d130      	bne.n	8009d7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10a      	bne.n	8009d38 <prvProcessTimerOrBlockTask+0x3c>
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d806      	bhi.n	8009d38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d2a:	f7ff fa0b 	bl	8009144 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d2e:	68f9      	ldr	r1, [r7, #12]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7ff ff81 	bl	8009c38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d36:	e024      	b.n	8009d82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d008      	beq.n	8009d50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d3e:	4b13      	ldr	r3, [pc, #76]	@ (8009d8c <prvProcessTimerOrBlockTask+0x90>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d101      	bne.n	8009d4c <prvProcessTimerOrBlockTask+0x50>
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e000      	b.n	8009d4e <prvProcessTimerOrBlockTask+0x52>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d50:	4b0f      	ldr	r3, [pc, #60]	@ (8009d90 <prvProcessTimerOrBlockTask+0x94>)
 8009d52:	6818      	ldr	r0, [r3, #0]
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	683a      	ldr	r2, [r7, #0]
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	f7fe ff6b 	bl	8008c38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d62:	f7ff f9ef 	bl	8009144 <xTaskResumeAll>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10a      	bne.n	8009d82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d6c:	4b09      	ldr	r3, [pc, #36]	@ (8009d94 <prvProcessTimerOrBlockTask+0x98>)
 8009d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	f3bf 8f6f 	isb	sy
}
 8009d7c:	e001      	b.n	8009d82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d7e:	f7ff f9e1 	bl	8009144 <xTaskResumeAll>
}
 8009d82:	bf00      	nop
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20005f34 	.word	0x20005f34
 8009d90:	20005f38 	.word	0x20005f38
 8009d94:	e000ed04 	.word	0xe000ed04

08009d98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009da0:	4b0e      	ldr	r3, [pc, #56]	@ (8009ddc <prvGetNextExpireTime+0x44>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d101      	bne.n	8009dae <prvGetNextExpireTime+0x16>
 8009daa:	2201      	movs	r2, #1
 8009dac:	e000      	b.n	8009db0 <prvGetNextExpireTime+0x18>
 8009dae:	2200      	movs	r2, #0
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d105      	bne.n	8009dc8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009dbc:	4b07      	ldr	r3, [pc, #28]	@ (8009ddc <prvGetNextExpireTime+0x44>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	e001      	b.n	8009dcc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	20005f30 	.word	0x20005f30

08009de0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009de8:	f7ff fa4a 	bl	8009280 <xTaskGetTickCount>
 8009dec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009dee:	4b0b      	ldr	r3, [pc, #44]	@ (8009e1c <prvSampleTimeNow+0x3c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d205      	bcs.n	8009e04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009df8:	f000 f93a 	bl	800a070 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	601a      	str	r2, [r3, #0]
 8009e02:	e002      	b.n	8009e0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e0a:	4a04      	ldr	r2, [pc, #16]	@ (8009e1c <prvSampleTimeNow+0x3c>)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e10:	68fb      	ldr	r3, [r7, #12]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	20005f40 	.word	0x20005f40

08009e20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
 8009e2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d812      	bhi.n	8009e6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	1ad2      	subs	r2, r2, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d302      	bcc.n	8009e5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e54:	2301      	movs	r3, #1
 8009e56:	617b      	str	r3, [r7, #20]
 8009e58:	e01b      	b.n	8009e92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e5a:	4b10      	ldr	r3, [pc, #64]	@ (8009e9c <prvInsertTimerInActiveList+0x7c>)
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	3304      	adds	r3, #4
 8009e62:	4619      	mov	r1, r3
 8009e64:	4610      	mov	r0, r2
 8009e66:	f7fe f9be 	bl	80081e6 <vListInsert>
 8009e6a:	e012      	b.n	8009e92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d206      	bcs.n	8009e82 <prvInsertTimerInActiveList+0x62>
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d302      	bcc.n	8009e82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	617b      	str	r3, [r7, #20]
 8009e80:	e007      	b.n	8009e92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e82:	4b07      	ldr	r3, [pc, #28]	@ (8009ea0 <prvInsertTimerInActiveList+0x80>)
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	3304      	adds	r3, #4
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	4610      	mov	r0, r2
 8009e8e:	f7fe f9aa 	bl	80081e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e92:	697b      	ldr	r3, [r7, #20]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3718      	adds	r7, #24
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	20005f34 	.word	0x20005f34
 8009ea0:	20005f30 	.word	0x20005f30

08009ea4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b08e      	sub	sp, #56	@ 0x38
 8009ea8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009eaa:	e0ce      	b.n	800a04a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	da19      	bge.n	8009ee6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009eb2:	1d3b      	adds	r3, r7, #4
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10b      	bne.n	8009ed6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	61fb      	str	r3, [r7, #28]
}
 8009ed0:	bf00      	nop
 8009ed2:	bf00      	nop
 8009ed4:	e7fd      	b.n	8009ed2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009edc:	6850      	ldr	r0, [r2, #4]
 8009ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ee0:	6892      	ldr	r2, [r2, #8]
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f2c0 80ae 	blt.w	800a04a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef4:	695b      	ldr	r3, [r3, #20]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d004      	beq.n	8009f04 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efc:	3304      	adds	r3, #4
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fe f9aa 	bl	8008258 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f04:	463b      	mov	r3, r7
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7ff ff6a 	bl	8009de0 <prvSampleTimeNow>
 8009f0c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b09      	cmp	r3, #9
 8009f12:	f200 8097 	bhi.w	800a044 <prvProcessReceivedCommands+0x1a0>
 8009f16:	a201      	add	r2, pc, #4	@ (adr r2, 8009f1c <prvProcessReceivedCommands+0x78>)
 8009f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1c:	08009f45 	.word	0x08009f45
 8009f20:	08009f45 	.word	0x08009f45
 8009f24:	08009f45 	.word	0x08009f45
 8009f28:	08009fbb 	.word	0x08009fbb
 8009f2c:	08009fcf 	.word	0x08009fcf
 8009f30:	0800a01b 	.word	0x0800a01b
 8009f34:	08009f45 	.word	0x08009f45
 8009f38:	08009f45 	.word	0x08009f45
 8009f3c:	08009fbb 	.word	0x08009fbb
 8009f40:	08009fcf 	.word	0x08009fcf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f4a:	f043 0301 	orr.w	r3, r3, #1
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	18d1      	adds	r1, r2, r3
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f64:	f7ff ff5c 	bl	8009e20 <prvInsertTimerInActiveList>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d06c      	beq.n	800a048 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f70:	6a1b      	ldr	r3, [r3, #32]
 8009f72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f7c:	f003 0304 	and.w	r3, r3, #4
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d061      	beq.n	800a048 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f84:	68ba      	ldr	r2, [r7, #8]
 8009f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f88:	699b      	ldr	r3, [r3, #24]
 8009f8a:	441a      	add	r2, r3
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	2300      	movs	r3, #0
 8009f92:	2100      	movs	r1, #0
 8009f94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f96:	f7ff fe01 	bl	8009b9c <xTimerGenericCommand>
 8009f9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f9c:	6a3b      	ldr	r3, [r7, #32]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d152      	bne.n	800a048 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	61bb      	str	r3, [r7, #24]
}
 8009fb4:	bf00      	nop
 8009fb6:	bf00      	nop
 8009fb8:	e7fd      	b.n	8009fb6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fc0:	f023 0301 	bic.w	r3, r3, #1
 8009fc4:	b2da      	uxtb	r2, r3
 8009fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009fcc:	e03d      	b.n	800a04a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fd4:	f043 0301 	orr.w	r3, r3, #1
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fdc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10b      	bne.n	800a006 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	617b      	str	r3, [r7, #20]
}
 800a000:	bf00      	nop
 800a002:	bf00      	nop
 800a004:	e7fd      	b.n	800a002 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a008:	699a      	ldr	r2, [r3, #24]
 800a00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00c:	18d1      	adds	r1, r2, r3
 800a00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a012:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a014:	f7ff ff04 	bl	8009e20 <prvInsertTimerInActiveList>
					break;
 800a018:	e017      	b.n	800a04a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a01c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a020:	f003 0302 	and.w	r3, r3, #2
 800a024:	2b00      	cmp	r3, #0
 800a026:	d103      	bne.n	800a030 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a028:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a02a:	f000 fbe5 	bl	800a7f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a02e:	e00c      	b.n	800a04a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a032:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a036:	f023 0301 	bic.w	r3, r3, #1
 800a03a:	b2da      	uxtb	r2, r3
 800a03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a03e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a042:	e002      	b.n	800a04a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a044:	bf00      	nop
 800a046:	e000      	b.n	800a04a <prvProcessReceivedCommands+0x1a6>
					break;
 800a048:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a04a:	4b08      	ldr	r3, [pc, #32]	@ (800a06c <prvProcessReceivedCommands+0x1c8>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	1d39      	adds	r1, r7, #4
 800a050:	2200      	movs	r2, #0
 800a052:	4618      	mov	r0, r3
 800a054:	f7fe fbd4 	bl	8008800 <xQueueReceive>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f47f af26 	bne.w	8009eac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a060:	bf00      	nop
 800a062:	bf00      	nop
 800a064:	3730      	adds	r7, #48	@ 0x30
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20005f38 	.word	0x20005f38

0800a070 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b088      	sub	sp, #32
 800a074:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a076:	e049      	b.n	800a10c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a078:	4b2e      	ldr	r3, [pc, #184]	@ (800a134 <prvSwitchTimerLists+0xc4>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a082:	4b2c      	ldr	r3, [pc, #176]	@ (800a134 <prvSwitchTimerLists+0xc4>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	3304      	adds	r3, #4
 800a090:	4618      	mov	r0, r3
 800a092:	f7fe f8e1 	bl	8008258 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0a4:	f003 0304 	and.w	r3, r3, #4
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d02f      	beq.n	800a10c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	693a      	ldr	r2, [r7, #16]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d90e      	bls.n	800a0dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	68ba      	ldr	r2, [r7, #8]
 800a0c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0ca:	4b1a      	ldr	r3, [pc, #104]	@ (800a134 <prvSwitchTimerLists+0xc4>)
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	f7fe f886 	bl	80081e6 <vListInsert>
 800a0da:	e017      	b.n	800a10c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0dc:	2300      	movs	r3, #0
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f7ff fd58 	bl	8009b9c <xTimerGenericCommand>
 800a0ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10b      	bne.n	800a10c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	603b      	str	r3, [r7, #0]
}
 800a106:	bf00      	nop
 800a108:	bf00      	nop
 800a10a:	e7fd      	b.n	800a108 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a10c:	4b09      	ldr	r3, [pc, #36]	@ (800a134 <prvSwitchTimerLists+0xc4>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1b0      	bne.n	800a078 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a116:	4b07      	ldr	r3, [pc, #28]	@ (800a134 <prvSwitchTimerLists+0xc4>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a11c:	4b06      	ldr	r3, [pc, #24]	@ (800a138 <prvSwitchTimerLists+0xc8>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a04      	ldr	r2, [pc, #16]	@ (800a134 <prvSwitchTimerLists+0xc4>)
 800a122:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a124:	4a04      	ldr	r2, [pc, #16]	@ (800a138 <prvSwitchTimerLists+0xc8>)
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	6013      	str	r3, [r2, #0]
}
 800a12a:	bf00      	nop
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20005f30 	.word	0x20005f30
 800a138:	20005f34 	.word	0x20005f34

0800a13c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a142:	f000 f969 	bl	800a418 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a146:	4b15      	ldr	r3, [pc, #84]	@ (800a19c <prvCheckForValidListAndQueue+0x60>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d120      	bne.n	800a190 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a14e:	4814      	ldr	r0, [pc, #80]	@ (800a1a0 <prvCheckForValidListAndQueue+0x64>)
 800a150:	f7fd fff8 	bl	8008144 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a154:	4813      	ldr	r0, [pc, #76]	@ (800a1a4 <prvCheckForValidListAndQueue+0x68>)
 800a156:	f7fd fff5 	bl	8008144 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a15a:	4b13      	ldr	r3, [pc, #76]	@ (800a1a8 <prvCheckForValidListAndQueue+0x6c>)
 800a15c:	4a10      	ldr	r2, [pc, #64]	@ (800a1a0 <prvCheckForValidListAndQueue+0x64>)
 800a15e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a160:	4b12      	ldr	r3, [pc, #72]	@ (800a1ac <prvCheckForValidListAndQueue+0x70>)
 800a162:	4a10      	ldr	r2, [pc, #64]	@ (800a1a4 <prvCheckForValidListAndQueue+0x68>)
 800a164:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a166:	2300      	movs	r3, #0
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	4b11      	ldr	r3, [pc, #68]	@ (800a1b0 <prvCheckForValidListAndQueue+0x74>)
 800a16c:	4a11      	ldr	r2, [pc, #68]	@ (800a1b4 <prvCheckForValidListAndQueue+0x78>)
 800a16e:	2110      	movs	r1, #16
 800a170:	200a      	movs	r0, #10
 800a172:	f7fe f905 	bl	8008380 <xQueueGenericCreateStatic>
 800a176:	4603      	mov	r3, r0
 800a178:	4a08      	ldr	r2, [pc, #32]	@ (800a19c <prvCheckForValidListAndQueue+0x60>)
 800a17a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a17c:	4b07      	ldr	r3, [pc, #28]	@ (800a19c <prvCheckForValidListAndQueue+0x60>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d005      	beq.n	800a190 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a184:	4b05      	ldr	r3, [pc, #20]	@ (800a19c <prvCheckForValidListAndQueue+0x60>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	490b      	ldr	r1, [pc, #44]	@ (800a1b8 <prvCheckForValidListAndQueue+0x7c>)
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fe fd2a 	bl	8008be4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a190:	f000 f974 	bl	800a47c <vPortExitCritical>
}
 800a194:	bf00      	nop
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20005f38 	.word	0x20005f38
 800a1a0:	20005f08 	.word	0x20005f08
 800a1a4:	20005f1c 	.word	0x20005f1c
 800a1a8:	20005f30 	.word	0x20005f30
 800a1ac:	20005f34 	.word	0x20005f34
 800a1b0:	20005fe4 	.word	0x20005fe4
 800a1b4:	20005f44 	.word	0x20005f44
 800a1b8:	0801aed0 	.word	0x0801aed0

0800a1bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b085      	sub	sp, #20
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	3b04      	subs	r3, #4
 800a1cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a1d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	3b04      	subs	r3, #4
 800a1da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	f023 0201 	bic.w	r2, r3, #1
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	3b04      	subs	r3, #4
 800a1ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a1ec:	4a0c      	ldr	r2, [pc, #48]	@ (800a220 <pxPortInitialiseStack+0x64>)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3b14      	subs	r3, #20
 800a1f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3b04      	subs	r3, #4
 800a202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f06f 0202 	mvn.w	r2, #2
 800a20a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	3b20      	subs	r3, #32
 800a210:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a212:	68fb      	ldr	r3, [r7, #12]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3714      	adds	r7, #20
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	0800a225 	.word	0x0800a225

0800a224 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a22a:	2300      	movs	r3, #0
 800a22c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a22e:	4b13      	ldr	r3, [pc, #76]	@ (800a27c <prvTaskExitError+0x58>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a236:	d00b      	beq.n	800a250 <prvTaskExitError+0x2c>
	__asm volatile
 800a238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23c:	f383 8811 	msr	BASEPRI, r3
 800a240:	f3bf 8f6f 	isb	sy
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	60fb      	str	r3, [r7, #12]
}
 800a24a:	bf00      	nop
 800a24c:	bf00      	nop
 800a24e:	e7fd      	b.n	800a24c <prvTaskExitError+0x28>
	__asm volatile
 800a250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a254:	f383 8811 	msr	BASEPRI, r3
 800a258:	f3bf 8f6f 	isb	sy
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	60bb      	str	r3, [r7, #8]
}
 800a262:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a264:	bf00      	nop
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d0fc      	beq.n	800a266 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a26c:	bf00      	nop
 800a26e:	bf00      	nop
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	200000a0 	.word	0x200000a0

0800a280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a280:	4b07      	ldr	r3, [pc, #28]	@ (800a2a0 <pxCurrentTCBConst2>)
 800a282:	6819      	ldr	r1, [r3, #0]
 800a284:	6808      	ldr	r0, [r1, #0]
 800a286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28a:	f380 8809 	msr	PSP, r0
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f04f 0000 	mov.w	r0, #0
 800a296:	f380 8811 	msr	BASEPRI, r0
 800a29a:	4770      	bx	lr
 800a29c:	f3af 8000 	nop.w

0800a2a0 <pxCurrentTCBConst2>:
 800a2a0:	20005a08 	.word	0x20005a08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2a4:	bf00      	nop
 800a2a6:	bf00      	nop

0800a2a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2a8:	4808      	ldr	r0, [pc, #32]	@ (800a2cc <prvPortStartFirstTask+0x24>)
 800a2aa:	6800      	ldr	r0, [r0, #0]
 800a2ac:	6800      	ldr	r0, [r0, #0]
 800a2ae:	f380 8808 	msr	MSP, r0
 800a2b2:	f04f 0000 	mov.w	r0, #0
 800a2b6:	f380 8814 	msr	CONTROL, r0
 800a2ba:	b662      	cpsie	i
 800a2bc:	b661      	cpsie	f
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	df00      	svc	0
 800a2c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2ca:	bf00      	nop
 800a2cc:	e000ed08 	.word	0xe000ed08

0800a2d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a2d6:	4b47      	ldr	r3, [pc, #284]	@ (800a3f4 <xPortStartScheduler+0x124>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a47      	ldr	r2, [pc, #284]	@ (800a3f8 <xPortStartScheduler+0x128>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d10b      	bne.n	800a2f8 <xPortStartScheduler+0x28>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	613b      	str	r3, [r7, #16]
}
 800a2f2:	bf00      	nop
 800a2f4:	bf00      	nop
 800a2f6:	e7fd      	b.n	800a2f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a2f8:	4b3e      	ldr	r3, [pc, #248]	@ (800a3f4 <xPortStartScheduler+0x124>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a3f      	ldr	r2, [pc, #252]	@ (800a3fc <xPortStartScheduler+0x12c>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d10b      	bne.n	800a31a <xPortStartScheduler+0x4a>
	__asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	60fb      	str	r3, [r7, #12]
}
 800a314:	bf00      	nop
 800a316:	bf00      	nop
 800a318:	e7fd      	b.n	800a316 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a31a:	4b39      	ldr	r3, [pc, #228]	@ (800a400 <xPortStartScheduler+0x130>)
 800a31c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	b2db      	uxtb	r3, r3
 800a324:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	22ff      	movs	r2, #255	@ 0xff
 800a32a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	b2db      	uxtb	r3, r3
 800a332:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a334:	78fb      	ldrb	r3, [r7, #3]
 800a336:	b2db      	uxtb	r3, r3
 800a338:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a33c:	b2da      	uxtb	r2, r3
 800a33e:	4b31      	ldr	r3, [pc, #196]	@ (800a404 <xPortStartScheduler+0x134>)
 800a340:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a342:	4b31      	ldr	r3, [pc, #196]	@ (800a408 <xPortStartScheduler+0x138>)
 800a344:	2207      	movs	r2, #7
 800a346:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a348:	e009      	b.n	800a35e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a34a:	4b2f      	ldr	r3, [pc, #188]	@ (800a408 <xPortStartScheduler+0x138>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	3b01      	subs	r3, #1
 800a350:	4a2d      	ldr	r2, [pc, #180]	@ (800a408 <xPortStartScheduler+0x138>)
 800a352:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a354:	78fb      	ldrb	r3, [r7, #3]
 800a356:	b2db      	uxtb	r3, r3
 800a358:	005b      	lsls	r3, r3, #1
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a35e:	78fb      	ldrb	r3, [r7, #3]
 800a360:	b2db      	uxtb	r3, r3
 800a362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a366:	2b80      	cmp	r3, #128	@ 0x80
 800a368:	d0ef      	beq.n	800a34a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a36a:	4b27      	ldr	r3, [pc, #156]	@ (800a408 <xPortStartScheduler+0x138>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f1c3 0307 	rsb	r3, r3, #7
 800a372:	2b04      	cmp	r3, #4
 800a374:	d00b      	beq.n	800a38e <xPortStartScheduler+0xbe>
	__asm volatile
 800a376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	60bb      	str	r3, [r7, #8]
}
 800a388:	bf00      	nop
 800a38a:	bf00      	nop
 800a38c:	e7fd      	b.n	800a38a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a38e:	4b1e      	ldr	r3, [pc, #120]	@ (800a408 <xPortStartScheduler+0x138>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	021b      	lsls	r3, r3, #8
 800a394:	4a1c      	ldr	r2, [pc, #112]	@ (800a408 <xPortStartScheduler+0x138>)
 800a396:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a398:	4b1b      	ldr	r3, [pc, #108]	@ (800a408 <xPortStartScheduler+0x138>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a3a0:	4a19      	ldr	r2, [pc, #100]	@ (800a408 <xPortStartScheduler+0x138>)
 800a3a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	b2da      	uxtb	r2, r3
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3ac:	4b17      	ldr	r3, [pc, #92]	@ (800a40c <xPortStartScheduler+0x13c>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a16      	ldr	r2, [pc, #88]	@ (800a40c <xPortStartScheduler+0x13c>)
 800a3b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a3b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3b8:	4b14      	ldr	r3, [pc, #80]	@ (800a40c <xPortStartScheduler+0x13c>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a13      	ldr	r2, [pc, #76]	@ (800a40c <xPortStartScheduler+0x13c>)
 800a3be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a3c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3c4:	f000 f8da 	bl	800a57c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3c8:	4b11      	ldr	r3, [pc, #68]	@ (800a410 <xPortStartScheduler+0x140>)
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3ce:	f000 f8f9 	bl	800a5c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3d2:	4b10      	ldr	r3, [pc, #64]	@ (800a414 <xPortStartScheduler+0x144>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a0f      	ldr	r2, [pc, #60]	@ (800a414 <xPortStartScheduler+0x144>)
 800a3d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a3dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3de:	f7ff ff63 	bl	800a2a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a3e2:	f7ff f817 	bl	8009414 <vTaskSwitchContext>
	prvTaskExitError();
 800a3e6:	f7ff ff1d 	bl	800a224 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3718      	adds	r7, #24
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	e000ed00 	.word	0xe000ed00
 800a3f8:	410fc271 	.word	0x410fc271
 800a3fc:	410fc270 	.word	0x410fc270
 800a400:	e000e400 	.word	0xe000e400
 800a404:	20006034 	.word	0x20006034
 800a408:	20006038 	.word	0x20006038
 800a40c:	e000ed20 	.word	0xe000ed20
 800a410:	200000a0 	.word	0x200000a0
 800a414:	e000ef34 	.word	0xe000ef34

0800a418 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	607b      	str	r3, [r7, #4]
}
 800a430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a432:	4b10      	ldr	r3, [pc, #64]	@ (800a474 <vPortEnterCritical+0x5c>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3301      	adds	r3, #1
 800a438:	4a0e      	ldr	r2, [pc, #56]	@ (800a474 <vPortEnterCritical+0x5c>)
 800a43a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a43c:	4b0d      	ldr	r3, [pc, #52]	@ (800a474 <vPortEnterCritical+0x5c>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d110      	bne.n	800a466 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a444:	4b0c      	ldr	r3, [pc, #48]	@ (800a478 <vPortEnterCritical+0x60>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00b      	beq.n	800a466 <vPortEnterCritical+0x4e>
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	603b      	str	r3, [r7, #0]
}
 800a460:	bf00      	nop
 800a462:	bf00      	nop
 800a464:	e7fd      	b.n	800a462 <vPortEnterCritical+0x4a>
	}
}
 800a466:	bf00      	nop
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	200000a0 	.word	0x200000a0
 800a478:	e000ed04 	.word	0xe000ed04

0800a47c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a482:	4b12      	ldr	r3, [pc, #72]	@ (800a4cc <vPortExitCritical+0x50>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10b      	bne.n	800a4a2 <vPortExitCritical+0x26>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	607b      	str	r3, [r7, #4]
}
 800a49c:	bf00      	nop
 800a49e:	bf00      	nop
 800a4a0:	e7fd      	b.n	800a49e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a4a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a4cc <vPortExitCritical+0x50>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	4a08      	ldr	r2, [pc, #32]	@ (800a4cc <vPortExitCritical+0x50>)
 800a4aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4ac:	4b07      	ldr	r3, [pc, #28]	@ (800a4cc <vPortExitCritical+0x50>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d105      	bne.n	800a4c0 <vPortExitCritical+0x44>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	f383 8811 	msr	BASEPRI, r3
}
 800a4be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr
 800a4cc:	200000a0 	.word	0x200000a0

0800a4d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4d0:	f3ef 8009 	mrs	r0, PSP
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	4b15      	ldr	r3, [pc, #84]	@ (800a530 <pxCurrentTCBConst>)
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	f01e 0f10 	tst.w	lr, #16
 800a4e0:	bf08      	it	eq
 800a4e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a4e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ea:	6010      	str	r0, [r2, #0]
 800a4ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a4f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a4f4:	f380 8811 	msr	BASEPRI, r0
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f7fe ff88 	bl	8009414 <vTaskSwitchContext>
 800a504:	f04f 0000 	mov.w	r0, #0
 800a508:	f380 8811 	msr	BASEPRI, r0
 800a50c:	bc09      	pop	{r0, r3}
 800a50e:	6819      	ldr	r1, [r3, #0]
 800a510:	6808      	ldr	r0, [r1, #0]
 800a512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a516:	f01e 0f10 	tst.w	lr, #16
 800a51a:	bf08      	it	eq
 800a51c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a520:	f380 8809 	msr	PSP, r0
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	f3af 8000 	nop.w

0800a530 <pxCurrentTCBConst>:
 800a530:	20005a08 	.word	0x20005a08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a534:	bf00      	nop
 800a536:	bf00      	nop

0800a538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	607b      	str	r3, [r7, #4]
}
 800a550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a552:	f7fe fea5 	bl	80092a0 <xTaskIncrementTick>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d003      	beq.n	800a564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a55c:	4b06      	ldr	r3, [pc, #24]	@ (800a578 <xPortSysTickHandler+0x40>)
 800a55e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a562:	601a      	str	r2, [r3, #0]
 800a564:	2300      	movs	r3, #0
 800a566:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	f383 8811 	msr	BASEPRI, r3
}
 800a56e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a570:	bf00      	nop
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	e000ed04 	.word	0xe000ed04

0800a57c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a57c:	b480      	push	{r7}
 800a57e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a580:	4b0b      	ldr	r3, [pc, #44]	@ (800a5b0 <vPortSetupTimerInterrupt+0x34>)
 800a582:	2200      	movs	r2, #0
 800a584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a586:	4b0b      	ldr	r3, [pc, #44]	@ (800a5b4 <vPortSetupTimerInterrupt+0x38>)
 800a588:	2200      	movs	r2, #0
 800a58a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a58c:	4b0a      	ldr	r3, [pc, #40]	@ (800a5b8 <vPortSetupTimerInterrupt+0x3c>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a0a      	ldr	r2, [pc, #40]	@ (800a5bc <vPortSetupTimerInterrupt+0x40>)
 800a592:	fba2 2303 	umull	r2, r3, r2, r3
 800a596:	099b      	lsrs	r3, r3, #6
 800a598:	4a09      	ldr	r2, [pc, #36]	@ (800a5c0 <vPortSetupTimerInterrupt+0x44>)
 800a59a:	3b01      	subs	r3, #1
 800a59c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a59e:	4b04      	ldr	r3, [pc, #16]	@ (800a5b0 <vPortSetupTimerInterrupt+0x34>)
 800a5a0:	2207      	movs	r2, #7
 800a5a2:	601a      	str	r2, [r3, #0]
}
 800a5a4:	bf00      	nop
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	e000e010 	.word	0xe000e010
 800a5b4:	e000e018 	.word	0xe000e018
 800a5b8:	20000004 	.word	0x20000004
 800a5bc:	10624dd3 	.word	0x10624dd3
 800a5c0:	e000e014 	.word	0xe000e014

0800a5c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a5d4 <vPortEnableVFP+0x10>
 800a5c8:	6801      	ldr	r1, [r0, #0]
 800a5ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a5ce:	6001      	str	r1, [r0, #0]
 800a5d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a5d2:	bf00      	nop
 800a5d4:	e000ed88 	.word	0xe000ed88

0800a5d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a5de:	f3ef 8305 	mrs	r3, IPSR
 800a5e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b0f      	cmp	r3, #15
 800a5e8:	d915      	bls.n	800a616 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a5ea:	4a18      	ldr	r2, [pc, #96]	@ (800a64c <vPortValidateInterruptPriority+0x74>)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a5f4:	4b16      	ldr	r3, [pc, #88]	@ (800a650 <vPortValidateInterruptPriority+0x78>)
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	7afa      	ldrb	r2, [r7, #11]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d20b      	bcs.n	800a616 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	607b      	str	r3, [r7, #4]
}
 800a610:	bf00      	nop
 800a612:	bf00      	nop
 800a614:	e7fd      	b.n	800a612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a616:	4b0f      	ldr	r3, [pc, #60]	@ (800a654 <vPortValidateInterruptPriority+0x7c>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a61e:	4b0e      	ldr	r3, [pc, #56]	@ (800a658 <vPortValidateInterruptPriority+0x80>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	429a      	cmp	r2, r3
 800a624:	d90b      	bls.n	800a63e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	603b      	str	r3, [r7, #0]
}
 800a638:	bf00      	nop
 800a63a:	bf00      	nop
 800a63c:	e7fd      	b.n	800a63a <vPortValidateInterruptPriority+0x62>
	}
 800a63e:	bf00      	nop
 800a640:	3714      	adds	r7, #20
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	e000e3f0 	.word	0xe000e3f0
 800a650:	20006034 	.word	0x20006034
 800a654:	e000ed0c 	.word	0xe000ed0c
 800a658:	20006038 	.word	0x20006038

0800a65c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b08a      	sub	sp, #40	@ 0x28
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a664:	2300      	movs	r3, #0
 800a666:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a668:	f7fe fd5e 	bl	8009128 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a66c:	4b5c      	ldr	r3, [pc, #368]	@ (800a7e0 <pvPortMalloc+0x184>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a674:	f000 f924 	bl	800a8c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a678:	4b5a      	ldr	r3, [pc, #360]	@ (800a7e4 <pvPortMalloc+0x188>)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4013      	ands	r3, r2
 800a680:	2b00      	cmp	r3, #0
 800a682:	f040 8095 	bne.w	800a7b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d01e      	beq.n	800a6ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a68c:	2208      	movs	r2, #8
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4413      	add	r3, r2
 800a692:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f003 0307 	and.w	r3, r3, #7
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d015      	beq.n	800a6ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f023 0307 	bic.w	r3, r3, #7
 800a6a4:	3308      	adds	r3, #8
 800a6a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f003 0307 	and.w	r3, r3, #7
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00b      	beq.n	800a6ca <pvPortMalloc+0x6e>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	617b      	str	r3, [r7, #20]
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop
 800a6c8:	e7fd      	b.n	800a6c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d06f      	beq.n	800a7b0 <pvPortMalloc+0x154>
 800a6d0:	4b45      	ldr	r3, [pc, #276]	@ (800a7e8 <pvPortMalloc+0x18c>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d86a      	bhi.n	800a7b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a6da:	4b44      	ldr	r3, [pc, #272]	@ (800a7ec <pvPortMalloc+0x190>)
 800a6dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a6de:	4b43      	ldr	r3, [pc, #268]	@ (800a7ec <pvPortMalloc+0x190>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6e4:	e004      	b.n	800a6f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d903      	bls.n	800a702 <pvPortMalloc+0xa6>
 800a6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1f1      	bne.n	800a6e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a702:	4b37      	ldr	r3, [pc, #220]	@ (800a7e0 <pvPortMalloc+0x184>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a708:	429a      	cmp	r2, r3
 800a70a:	d051      	beq.n	800a7b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a70c:	6a3b      	ldr	r3, [r7, #32]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2208      	movs	r2, #8
 800a712:	4413      	add	r3, r2
 800a714:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	6a3b      	ldr	r3, [r7, #32]
 800a71c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	1ad2      	subs	r2, r2, r3
 800a726:	2308      	movs	r3, #8
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d920      	bls.n	800a770 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a72e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4413      	add	r3, r2
 800a734:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	f003 0307 	and.w	r3, r3, #7
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00b      	beq.n	800a758 <pvPortMalloc+0xfc>
	__asm volatile
 800a740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a744:	f383 8811 	msr	BASEPRI, r3
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	f3bf 8f4f 	dsb	sy
 800a750:	613b      	str	r3, [r7, #16]
}
 800a752:	bf00      	nop
 800a754:	bf00      	nop
 800a756:	e7fd      	b.n	800a754 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75a:	685a      	ldr	r2, [r3, #4]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	1ad2      	subs	r2, r2, r3
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a76a:	69b8      	ldr	r0, [r7, #24]
 800a76c:	f000 f90a 	bl	800a984 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a770:	4b1d      	ldr	r3, [pc, #116]	@ (800a7e8 <pvPortMalloc+0x18c>)
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	4a1b      	ldr	r2, [pc, #108]	@ (800a7e8 <pvPortMalloc+0x18c>)
 800a77c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a77e:	4b1a      	ldr	r3, [pc, #104]	@ (800a7e8 <pvPortMalloc+0x18c>)
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	4b1b      	ldr	r3, [pc, #108]	@ (800a7f0 <pvPortMalloc+0x194>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	429a      	cmp	r2, r3
 800a788:	d203      	bcs.n	800a792 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a78a:	4b17      	ldr	r3, [pc, #92]	@ (800a7e8 <pvPortMalloc+0x18c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a18      	ldr	r2, [pc, #96]	@ (800a7f0 <pvPortMalloc+0x194>)
 800a790:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a794:	685a      	ldr	r2, [r3, #4]
 800a796:	4b13      	ldr	r3, [pc, #76]	@ (800a7e4 <pvPortMalloc+0x188>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	431a      	orrs	r2, r3
 800a79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a7a6:	4b13      	ldr	r3, [pc, #76]	@ (800a7f4 <pvPortMalloc+0x198>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	4a11      	ldr	r2, [pc, #68]	@ (800a7f4 <pvPortMalloc+0x198>)
 800a7ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7b0:	f7fe fcc8 	bl	8009144 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	f003 0307 	and.w	r3, r3, #7
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00b      	beq.n	800a7d6 <pvPortMalloc+0x17a>
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	60fb      	str	r3, [r7, #12]
}
 800a7d0:	bf00      	nop
 800a7d2:	bf00      	nop
 800a7d4:	e7fd      	b.n	800a7d2 <pvPortMalloc+0x176>
	return pvReturn;
 800a7d6:	69fb      	ldr	r3, [r7, #28]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3728      	adds	r7, #40	@ 0x28
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	20006c44 	.word	0x20006c44
 800a7e4:	20006c58 	.word	0x20006c58
 800a7e8:	20006c48 	.word	0x20006c48
 800a7ec:	20006c3c 	.word	0x20006c3c
 800a7f0:	20006c4c 	.word	0x20006c4c
 800a7f4:	20006c50 	.word	0x20006c50

0800a7f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d04f      	beq.n	800a8aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a80a:	2308      	movs	r3, #8
 800a80c:	425b      	negs	r3, r3
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	4413      	add	r3, r2
 800a812:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	4b25      	ldr	r3, [pc, #148]	@ (800a8b4 <vPortFree+0xbc>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4013      	ands	r3, r2
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10b      	bne.n	800a83e <vPortFree+0x46>
	__asm volatile
 800a826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82a:	f383 8811 	msr	BASEPRI, r3
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	f3bf 8f4f 	dsb	sy
 800a836:	60fb      	str	r3, [r7, #12]
}
 800a838:	bf00      	nop
 800a83a:	bf00      	nop
 800a83c:	e7fd      	b.n	800a83a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00b      	beq.n	800a85e <vPortFree+0x66>
	__asm volatile
 800a846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	60bb      	str	r3, [r7, #8]
}
 800a858:	bf00      	nop
 800a85a:	bf00      	nop
 800a85c:	e7fd      	b.n	800a85a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	685a      	ldr	r2, [r3, #4]
 800a862:	4b14      	ldr	r3, [pc, #80]	@ (800a8b4 <vPortFree+0xbc>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4013      	ands	r3, r2
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d01e      	beq.n	800a8aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d11a      	bne.n	800a8aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	685a      	ldr	r2, [r3, #4]
 800a878:	4b0e      	ldr	r3, [pc, #56]	@ (800a8b4 <vPortFree+0xbc>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	43db      	mvns	r3, r3
 800a87e:	401a      	ands	r2, r3
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a884:	f7fe fc50 	bl	8009128 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	4b0a      	ldr	r3, [pc, #40]	@ (800a8b8 <vPortFree+0xc0>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4413      	add	r3, r2
 800a892:	4a09      	ldr	r2, [pc, #36]	@ (800a8b8 <vPortFree+0xc0>)
 800a894:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a896:	6938      	ldr	r0, [r7, #16]
 800a898:	f000 f874 	bl	800a984 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a89c:	4b07      	ldr	r3, [pc, #28]	@ (800a8bc <vPortFree+0xc4>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	4a06      	ldr	r2, [pc, #24]	@ (800a8bc <vPortFree+0xc4>)
 800a8a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a8a6:	f7fe fc4d 	bl	8009144 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8aa:	bf00      	nop
 800a8ac:	3718      	adds	r7, #24
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	20006c58 	.word	0x20006c58
 800a8b8:	20006c48 	.word	0x20006c48
 800a8bc:	20006c54 	.word	0x20006c54

0800a8c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a8c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a8ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8cc:	4b27      	ldr	r3, [pc, #156]	@ (800a96c <prvHeapInit+0xac>)
 800a8ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f003 0307 	and.w	r3, r3, #7
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00c      	beq.n	800a8f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	3307      	adds	r3, #7
 800a8de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f023 0307 	bic.w	r3, r3, #7
 800a8e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	4a1f      	ldr	r2, [pc, #124]	@ (800a96c <prvHeapInit+0xac>)
 800a8f0:	4413      	add	r3, r2
 800a8f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a8f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a970 <prvHeapInit+0xb0>)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a8fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a970 <prvHeapInit+0xb0>)
 800a900:	2200      	movs	r2, #0
 800a902:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	68ba      	ldr	r2, [r7, #8]
 800a908:	4413      	add	r3, r2
 800a90a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a90c:	2208      	movs	r2, #8
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	1a9b      	subs	r3, r3, r2
 800a912:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 0307 	bic.w	r3, r3, #7
 800a91a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	4a15      	ldr	r2, [pc, #84]	@ (800a974 <prvHeapInit+0xb4>)
 800a920:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a922:	4b14      	ldr	r3, [pc, #80]	@ (800a974 <prvHeapInit+0xb4>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2200      	movs	r2, #0
 800a928:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a92a:	4b12      	ldr	r3, [pc, #72]	@ (800a974 <prvHeapInit+0xb4>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2200      	movs	r2, #0
 800a930:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	1ad2      	subs	r2, r2, r3
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a940:	4b0c      	ldr	r3, [pc, #48]	@ (800a974 <prvHeapInit+0xb4>)
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	4a0a      	ldr	r2, [pc, #40]	@ (800a978 <prvHeapInit+0xb8>)
 800a94e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	4a09      	ldr	r2, [pc, #36]	@ (800a97c <prvHeapInit+0xbc>)
 800a956:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a958:	4b09      	ldr	r3, [pc, #36]	@ (800a980 <prvHeapInit+0xc0>)
 800a95a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a95e:	601a      	str	r2, [r3, #0]
}
 800a960:	bf00      	nop
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	2000603c 	.word	0x2000603c
 800a970:	20006c3c 	.word	0x20006c3c
 800a974:	20006c44 	.word	0x20006c44
 800a978:	20006c4c 	.word	0x20006c4c
 800a97c:	20006c48 	.word	0x20006c48
 800a980:	20006c58 	.word	0x20006c58

0800a984 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a98c:	4b28      	ldr	r3, [pc, #160]	@ (800aa30 <prvInsertBlockIntoFreeList+0xac>)
 800a98e:	60fb      	str	r3, [r7, #12]
 800a990:	e002      	b.n	800a998 <prvInsertBlockIntoFreeList+0x14>
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	60fb      	str	r3, [r7, #12]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d8f7      	bhi.n	800a992 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d108      	bne.n	800a9c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	685a      	ldr	r2, [r3, #4]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	441a      	add	r2, r3
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	441a      	add	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d118      	bne.n	800aa0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	4b15      	ldr	r3, [pc, #84]	@ (800aa34 <prvInsertBlockIntoFreeList+0xb0>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d00d      	beq.n	800aa02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	685a      	ldr	r2, [r3, #4]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	441a      	add	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	601a      	str	r2, [r3, #0]
 800aa00:	e008      	b.n	800aa14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa02:	4b0c      	ldr	r3, [pc, #48]	@ (800aa34 <prvInsertBlockIntoFreeList+0xb0>)
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	601a      	str	r2, [r3, #0]
 800aa0a:	e003      	b.n	800aa14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d002      	beq.n	800aa22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa22:	bf00      	nop
 800aa24:	3714      	adds	r7, #20
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	20006c3c 	.word	0x20006c3c
 800aa34:	20006c44 	.word	0x20006c44

0800aa38 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800aa38:	4b04      	ldr	r3, [pc, #16]	@ (800aa4c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	b10a      	cbz	r2, 800aa42 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800aa3e:	4803      	ldr	r0, [pc, #12]	@ (800aa4c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800aa40:	4770      	bx	lr
 800aa42:	4a03      	ldr	r2, [pc, #12]	@ (800aa50 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800aa44:	4801      	ldr	r0, [pc, #4]	@ (800aa4c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800aa46:	6812      	ldr	r2, [r2, #0]
 800aa48:	601a      	str	r2, [r3, #0]
 800aa4a:	4770      	bx	lr
 800aa4c:	200000ac 	.word	0x200000ac
 800aa50:	200003b4 	.word	0x200003b4

0800aa54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800aa54:	4a02      	ldr	r2, [pc, #8]	@ (800aa60 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800aa56:	4b03      	ldr	r3, [pc, #12]	@ (800aa64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800aa58:	6812      	ldr	r2, [r2, #0]
 800aa5a:	601a      	str	r2, [r3, #0]
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	200003b4 	.word	0x200003b4
 800aa64:	200000ac 	.word	0x200000ac

0800aa68 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800aa68:	f004 bf8c 	b.w	800f984 <geometry_msgs__msg__Twist__init>

0800aa6c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800aa6c:	f004 bfae 	b.w	800f9cc <geometry_msgs__msg__Twist__fini>

0800aa70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800aa70:	b510      	push	{r4, lr}
 800aa72:	f000 f819 	bl	800aaa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800aa76:	4c07      	ldr	r4, [pc, #28]	@ (800aa94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800aa78:	60e0      	str	r0, [r4, #12]
 800aa7a:	f000 f815 	bl	800aaa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800aa7e:	4b06      	ldr	r3, [pc, #24]	@ (800aa98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800aa80:	64a0      	str	r0, [r4, #72]	@ 0x48
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	b10a      	cbz	r2, 800aa8a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800aa86:	4804      	ldr	r0, [pc, #16]	@ (800aa98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800aa88:	bd10      	pop	{r4, pc}
 800aa8a:	4a04      	ldr	r2, [pc, #16]	@ (800aa9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800aa8c:	4802      	ldr	r0, [pc, #8]	@ (800aa98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800aa8e:	6812      	ldr	r2, [r2, #0]
 800aa90:	601a      	str	r2, [r3, #0]
 800aa92:	bd10      	pop	{r4, pc}
 800aa94:	200000b8 	.word	0x200000b8
 800aa98:	20000130 	.word	0x20000130
 800aa9c:	200003b8 	.word	0x200003b8

0800aaa0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800aaa0:	f004 bfa0 	b.w	800f9e4 <geometry_msgs__msg__Vector3__init>

0800aaa4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800aaa4:	f004 bfa2 	b.w	800f9ec <geometry_msgs__msg__Vector3__fini>

0800aaa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800aaa8:	4b04      	ldr	r3, [pc, #16]	@ (800aabc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	b10a      	cbz	r2, 800aab2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800aaae:	4803      	ldr	r0, [pc, #12]	@ (800aabc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800aab0:	4770      	bx	lr
 800aab2:	4a03      	ldr	r2, [pc, #12]	@ (800aac0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800aab4:	4801      	ldr	r0, [pc, #4]	@ (800aabc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800aab6:	6812      	ldr	r2, [r2, #0]
 800aab8:	601a      	str	r2, [r3, #0]
 800aaba:	4770      	bx	lr
 800aabc:	200001f0 	.word	0x200001f0
 800aac0:	200003b8 	.word	0x200003b8

0800aac4 <get_serialized_size_geometry_msgs__msg__Twist>:
 800aac4:	b570      	push	{r4, r5, r6, lr}
 800aac6:	4604      	mov	r4, r0
 800aac8:	b148      	cbz	r0, 800aade <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800aaca:	460d      	mov	r5, r1
 800aacc:	f000 f860 	bl	800ab90 <get_serialized_size_geometry_msgs__msg__Vector3>
 800aad0:	4606      	mov	r6, r0
 800aad2:	1829      	adds	r1, r5, r0
 800aad4:	f104 0018 	add.w	r0, r4, #24
 800aad8:	f000 f85a 	bl	800ab90 <get_serialized_size_geometry_msgs__msg__Vector3>
 800aadc:	4430      	add	r0, r6
 800aade:	bd70      	pop	{r4, r5, r6, pc}

0800aae0 <_Twist__cdr_deserialize>:
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	460c      	mov	r4, r1
 800aae4:	b189      	cbz	r1, 800ab0a <_Twist__cdr_deserialize+0x2a>
 800aae6:	4605      	mov	r5, r0
 800aae8:	f000 f8de 	bl	800aca8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800aaec:	6843      	ldr	r3, [r0, #4]
 800aaee:	4621      	mov	r1, r4
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	4798      	blx	r3
 800aaf6:	f000 f8d7 	bl	800aca8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800aafa:	6843      	ldr	r3, [r0, #4]
 800aafc:	f104 0118 	add.w	r1, r4, #24
 800ab00:	4628      	mov	r0, r5
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab08:	4718      	bx	r3
 800ab0a:	4608      	mov	r0, r1
 800ab0c:	bd70      	pop	{r4, r5, r6, pc}
 800ab0e:	bf00      	nop

0800ab10 <_Twist__cdr_serialize>:
 800ab10:	b510      	push	{r4, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	9101      	str	r1, [sp, #4]
 800ab16:	b190      	cbz	r0, 800ab3e <_Twist__cdr_serialize+0x2e>
 800ab18:	4604      	mov	r4, r0
 800ab1a:	f000 f8c5 	bl	800aca8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ab1e:	6843      	ldr	r3, [r0, #4]
 800ab20:	9901      	ldr	r1, [sp, #4]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	4620      	mov	r0, r4
 800ab26:	4798      	blx	r3
 800ab28:	f000 f8be 	bl	800aca8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ab2c:	6843      	ldr	r3, [r0, #4]
 800ab2e:	9901      	ldr	r1, [sp, #4]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f104 0018 	add.w	r0, r4, #24
 800ab36:	b002      	add	sp, #8
 800ab38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab3c:	4718      	bx	r3
 800ab3e:	b002      	add	sp, #8
 800ab40:	bd10      	pop	{r4, pc}
 800ab42:	bf00      	nop

0800ab44 <_Twist__get_serialized_size>:
 800ab44:	b538      	push	{r3, r4, r5, lr}
 800ab46:	4604      	mov	r4, r0
 800ab48:	b148      	cbz	r0, 800ab5e <_Twist__get_serialized_size+0x1a>
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	f000 f820 	bl	800ab90 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ab50:	4605      	mov	r5, r0
 800ab52:	4601      	mov	r1, r0
 800ab54:	f104 0018 	add.w	r0, r4, #24
 800ab58:	f000 f81a 	bl	800ab90 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ab5c:	4428      	add	r0, r5
 800ab5e:	bd38      	pop	{r3, r4, r5, pc}

0800ab60 <_Twist__max_serialized_size>:
 800ab60:	b510      	push	{r4, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	2301      	movs	r3, #1
 800ab66:	2100      	movs	r1, #0
 800ab68:	f10d 0007 	add.w	r0, sp, #7
 800ab6c:	f88d 3007 	strb.w	r3, [sp, #7]
 800ab70:	f000 f87e 	bl	800ac70 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ab74:	4604      	mov	r4, r0
 800ab76:	4601      	mov	r1, r0
 800ab78:	f10d 0007 	add.w	r0, sp, #7
 800ab7c:	f000 f878 	bl	800ac70 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ab80:	4420      	add	r0, r4
 800ab82:	b002      	add	sp, #8
 800ab84:	bd10      	pop	{r4, pc}
 800ab86:	bf00      	nop

0800ab88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ab88:	4800      	ldr	r0, [pc, #0]	@ (800ab8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800ab8a:	4770      	bx	lr
 800ab8c:	200001fc 	.word	0x200001fc

0800ab90 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800ab90:	b1b8      	cbz	r0, 800abc2 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800ab92:	b538      	push	{r3, r4, r5, lr}
 800ab94:	460d      	mov	r5, r1
 800ab96:	4628      	mov	r0, r5
 800ab98:	2108      	movs	r1, #8
 800ab9a:	f001 fcb1 	bl	800c500 <ucdr_alignment>
 800ab9e:	f105 0308 	add.w	r3, r5, #8
 800aba2:	181c      	adds	r4, r3, r0
 800aba4:	2108      	movs	r1, #8
 800aba6:	4620      	mov	r0, r4
 800aba8:	f001 fcaa 	bl	800c500 <ucdr_alignment>
 800abac:	3008      	adds	r0, #8
 800abae:	4404      	add	r4, r0
 800abb0:	2108      	movs	r1, #8
 800abb2:	4620      	mov	r0, r4
 800abb4:	f001 fca4 	bl	800c500 <ucdr_alignment>
 800abb8:	f1c5 0508 	rsb	r5, r5, #8
 800abbc:	4428      	add	r0, r5
 800abbe:	4420      	add	r0, r4
 800abc0:	bd38      	pop	{r3, r4, r5, pc}
 800abc2:	4770      	bx	lr

0800abc4 <_Vector3__cdr_deserialize>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	460c      	mov	r4, r1
 800abc8:	b171      	cbz	r1, 800abe8 <_Vector3__cdr_deserialize+0x24>
 800abca:	4605      	mov	r5, r0
 800abcc:	f001 faac 	bl	800c128 <ucdr_deserialize_double>
 800abd0:	f104 0108 	add.w	r1, r4, #8
 800abd4:	4628      	mov	r0, r5
 800abd6:	f001 faa7 	bl	800c128 <ucdr_deserialize_double>
 800abda:	f104 0110 	add.w	r1, r4, #16
 800abde:	4628      	mov	r0, r5
 800abe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abe4:	f001 baa0 	b.w	800c128 <ucdr_deserialize_double>
 800abe8:	4608      	mov	r0, r1
 800abea:	bd38      	pop	{r3, r4, r5, pc}

0800abec <_Vector3__cdr_serialize>:
 800abec:	b198      	cbz	r0, 800ac16 <_Vector3__cdr_serialize+0x2a>
 800abee:	b538      	push	{r3, r4, r5, lr}
 800abf0:	ed90 0b00 	vldr	d0, [r0]
 800abf4:	460d      	mov	r5, r1
 800abf6:	4604      	mov	r4, r0
 800abf8:	4608      	mov	r0, r1
 800abfa:	f001 f8f3 	bl	800bde4 <ucdr_serialize_double>
 800abfe:	ed94 0b02 	vldr	d0, [r4, #8]
 800ac02:	4628      	mov	r0, r5
 800ac04:	f001 f8ee 	bl	800bde4 <ucdr_serialize_double>
 800ac08:	ed94 0b04 	vldr	d0, [r4, #16]
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac12:	f001 b8e7 	b.w	800bde4 <ucdr_serialize_double>
 800ac16:	4770      	bx	lr

0800ac18 <_Vector3__get_serialized_size>:
 800ac18:	b198      	cbz	r0, 800ac42 <_Vector3__get_serialized_size+0x2a>
 800ac1a:	b510      	push	{r4, lr}
 800ac1c:	2108      	movs	r1, #8
 800ac1e:	2000      	movs	r0, #0
 800ac20:	f001 fc6e 	bl	800c500 <ucdr_alignment>
 800ac24:	f100 0408 	add.w	r4, r0, #8
 800ac28:	2108      	movs	r1, #8
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f001 fc68 	bl	800c500 <ucdr_alignment>
 800ac30:	3008      	adds	r0, #8
 800ac32:	4404      	add	r4, r0
 800ac34:	2108      	movs	r1, #8
 800ac36:	4620      	mov	r0, r4
 800ac38:	f001 fc62 	bl	800c500 <ucdr_alignment>
 800ac3c:	3008      	adds	r0, #8
 800ac3e:	4420      	add	r0, r4
 800ac40:	bd10      	pop	{r4, pc}
 800ac42:	4770      	bx	lr

0800ac44 <_Vector3__max_serialized_size>:
 800ac44:	b538      	push	{r3, r4, r5, lr}
 800ac46:	2108      	movs	r1, #8
 800ac48:	2000      	movs	r0, #0
 800ac4a:	f001 fc59 	bl	800c500 <ucdr_alignment>
 800ac4e:	f100 0508 	add.w	r5, r0, #8
 800ac52:	2108      	movs	r1, #8
 800ac54:	4628      	mov	r0, r5
 800ac56:	f001 fc53 	bl	800c500 <ucdr_alignment>
 800ac5a:	f100 0408 	add.w	r4, r0, #8
 800ac5e:	442c      	add	r4, r5
 800ac60:	2108      	movs	r1, #8
 800ac62:	4620      	mov	r0, r4
 800ac64:	f001 fc4c 	bl	800c500 <ucdr_alignment>
 800ac68:	3008      	adds	r0, #8
 800ac6a:	4420      	add	r0, r4
 800ac6c:	bd38      	pop	{r3, r4, r5, pc}
 800ac6e:	bf00      	nop

0800ac70 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	2301      	movs	r3, #1
 800ac74:	460c      	mov	r4, r1
 800ac76:	7003      	strb	r3, [r0, #0]
 800ac78:	2108      	movs	r1, #8
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f001 fc40 	bl	800c500 <ucdr_alignment>
 800ac80:	f104 0508 	add.w	r5, r4, #8
 800ac84:	1946      	adds	r6, r0, r5
 800ac86:	2108      	movs	r1, #8
 800ac88:	4630      	mov	r0, r6
 800ac8a:	f001 fc39 	bl	800c500 <ucdr_alignment>
 800ac8e:	f100 0508 	add.w	r5, r0, #8
 800ac92:	4435      	add	r5, r6
 800ac94:	2108      	movs	r1, #8
 800ac96:	4628      	mov	r0, r5
 800ac98:	f001 fc32 	bl	800c500 <ucdr_alignment>
 800ac9c:	f1c4 0408 	rsb	r4, r4, #8
 800aca0:	4420      	add	r0, r4
 800aca2:	4428      	add	r0, r5
 800aca4:	bd70      	pop	{r4, r5, r6, pc}
 800aca6:	bf00      	nop

0800aca8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800aca8:	4800      	ldr	r0, [pc, #0]	@ (800acac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800acaa:	4770      	bx	lr
 800acac:	20000224 	.word	0x20000224

0800acb0 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800acb0:	4b04      	ldr	r3, [pc, #16]	@ (800acc4 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	b10a      	cbz	r2, 800acba <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xa>
 800acb6:	4803      	ldr	r0, [pc, #12]	@ (800acc4 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800acb8:	4770      	bx	lr
 800acba:	4a03      	ldr	r2, [pc, #12]	@ (800acc8 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x18>)
 800acbc:	4801      	ldr	r0, [pc, #4]	@ (800acc4 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800acbe:	6812      	ldr	r2, [r2, #0]
 800acc0:	601a      	str	r2, [r3, #0]
 800acc2:	4770      	bx	lr
 800acc4:	20000254 	.word	0x20000254
 800acc8:	200003b4 	.word	0x200003b4

0800accc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800accc:	4b04      	ldr	r3, [pc, #16]	@ (800ace0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>)
 800acce:	4805      	ldr	r0, [pc, #20]	@ (800ace4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x18>)
 800acd0:	4905      	ldr	r1, [pc, #20]	@ (800ace8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x1c>)
 800acd2:	4a06      	ldr	r2, [pc, #24]	@ (800acec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	6003      	str	r3, [r0, #0]
 800acd8:	600b      	str	r3, [r1, #0]
 800acda:	6013      	str	r3, [r2, #0]
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	200003b4 	.word	0x200003b4
 800ace4:	20000270 	.word	0x20000270
 800ace8:	2000027c 	.word	0x2000027c
 800acec:	20000254 	.word	0x20000254

0800acf0 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_init_function>:
 800acf0:	f004 bf48 	b.w	800fb84 <imu_interfaces__srv__ImuCalibration_Request__init>

0800acf4 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_fini_function>:
 800acf4:	f004 bf58 	b.w	800fba8 <imu_interfaces__srv__ImuCalibration_Request__fini>

0800acf8 <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_init_function>:
 800acf8:	f004 bf5a 	b.w	800fbb0 <imu_interfaces__srv__ImuCalibration_Response__init>

0800acfc <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_fini_function>:
 800acfc:	f004 bf5c 	b.w	800fbb8 <imu_interfaces__srv__ImuCalibration_Response__fini>

0800ad00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800ad00:	b508      	push	{r3, lr}
 800ad02:	f004 fae1 	bl	800f2c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800ad06:	4b06      	ldr	r3, [pc, #24]	@ (800ad20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800ad08:	4906      	ldr	r1, [pc, #24]	@ (800ad24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x24>)
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	60c8      	str	r0, [r1, #12]
 800ad0e:	b10a      	cbz	r2, 800ad14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>
 800ad10:	4803      	ldr	r0, [pc, #12]	@ (800ad20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800ad12:	bd08      	pop	{r3, pc}
 800ad14:	4a04      	ldr	r2, [pc, #16]	@ (800ad28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x28>)
 800ad16:	4802      	ldr	r0, [pc, #8]	@ (800ad20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800ad18:	6812      	ldr	r2, [r2, #0]
 800ad1a:	601a      	str	r2, [r3, #0]
 800ad1c:	bd08      	pop	{r3, pc}
 800ad1e:	bf00      	nop
 800ad20:	200002c4 	.word	0x200002c4
 800ad24:	20000288 	.word	0x20000288
 800ad28:	200003b8 	.word	0x200003b8

0800ad2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800ad2c:	4b04      	ldr	r3, [pc, #16]	@ (800ad40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	b10a      	cbz	r2, 800ad36 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0xa>
 800ad32:	4803      	ldr	r0, [pc, #12]	@ (800ad40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800ad34:	4770      	bx	lr
 800ad36:	4a03      	ldr	r2, [pc, #12]	@ (800ad44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x18>)
 800ad38:	4801      	ldr	r0, [pc, #4]	@ (800ad40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800ad3a:	6812      	ldr	r2, [r2, #0]
 800ad3c:	601a      	str	r2, [r3, #0]
 800ad3e:	4770      	bx	lr
 800ad40:	2000030c 	.word	0x2000030c
 800ad44:	200003b8 	.word	0x200003b8

0800ad48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800ad48:	4b16      	ldr	r3, [pc, #88]	@ (800ada4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	b510      	push	{r4, lr}
 800ad4e:	b132      	cbz	r2, 800ad5e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x16>
 800ad50:	685c      	ldr	r4, [r3, #4]
 800ad52:	68a3      	ldr	r3, [r4, #8]
 800ad54:	b153      	cbz	r3, 800ad6c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x24>
 800ad56:	68e3      	ldr	r3, [r4, #12]
 800ad58:	b1a3      	cbz	r3, 800ad84 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x3c>
 800ad5a:	4812      	ldr	r0, [pc, #72]	@ (800ada4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800ad5c:	bd10      	pop	{r4, pc}
 800ad5e:	4a12      	ldr	r2, [pc, #72]	@ (800ada8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800ad60:	685c      	ldr	r4, [r3, #4]
 800ad62:	6812      	ldr	r2, [r2, #0]
 800ad64:	601a      	str	r2, [r3, #0]
 800ad66:	68a3      	ldr	r3, [r4, #8]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1f4      	bne.n	800ad56 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xe>
 800ad6c:	f004 faac 	bl	800f2c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800ad70:	4b0e      	ldr	r3, [pc, #56]	@ (800adac <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x64>)
 800ad72:	490f      	ldr	r1, [pc, #60]	@ (800adb0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x68>)
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	60c8      	str	r0, [r1, #12]
 800ad78:	b17a      	cbz	r2, 800ad9a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x52>
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	60a3      	str	r3, [r4, #8]
 800ad7e:	68e3      	ldr	r3, [r4, #12]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1ea      	bne.n	800ad5a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x12>
 800ad84:	4b0b      	ldr	r3, [pc, #44]	@ (800adb4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x6c>)
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	b11a      	cbz	r2, 800ad92 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4a>
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	4805      	ldr	r0, [pc, #20]	@ (800ada4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800ad8e:	60e3      	str	r3, [r4, #12]
 800ad90:	bd10      	pop	{r4, pc}
 800ad92:	4a05      	ldr	r2, [pc, #20]	@ (800ada8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800ad94:	6812      	ldr	r2, [r2, #0]
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	e7f7      	b.n	800ad8a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x42>
 800ad9a:	4a03      	ldr	r2, [pc, #12]	@ (800ada8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800ad9c:	6812      	ldr	r2, [r2, #0]
 800ad9e:	601a      	str	r2, [r3, #0]
 800ada0:	e7eb      	b.n	800ad7a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x32>
 800ada2:	bf00      	nop
 800ada4:	20000328 	.word	0x20000328
 800ada8:	200003b8 	.word	0x200003b8
 800adac:	200002c4 	.word	0x200002c4
 800adb0:	20000288 	.word	0x20000288
 800adb4:	2000030c 	.word	0x2000030c

0800adb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800adb8:	4800      	ldr	r0, [pc, #0]	@ (800adbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x4>)
 800adba:	4770      	bx	lr
 800adbc:	20000350 	.word	0x20000350

0800adc0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800adc0:	4800      	ldr	r0, [pc, #0]	@ (800adc4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x4>)
 800adc2:	4770      	bx	lr
 800adc4:	2000035c 	.word	0x2000035c

0800adc8 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request>:
 800adc8:	b108      	cbz	r0, 800adce <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request+0x6>
 800adca:	f004 bacf 	b.w	800f36c <get_serialized_size_sensor_msgs__msg__Imu>
 800adce:	4770      	bx	lr

0800add0 <_ImuCalibration_Request__max_serialized_size>:
 800add0:	b500      	push	{lr}
 800add2:	b083      	sub	sp, #12
 800add4:	2301      	movs	r3, #1
 800add6:	2100      	movs	r1, #0
 800add8:	f10d 0007 	add.w	r0, sp, #7
 800addc:	f88d 3007 	strb.w	r3, [sp, #7]
 800ade0:	f004 fb42 	bl	800f468 <max_serialized_size_sensor_msgs__msg__Imu>
 800ade4:	b003      	add	sp, #12
 800ade6:	f85d fb04 	ldr.w	pc, [sp], #4
 800adea:	bf00      	nop

0800adec <_ImuCalibration_Response__max_serialized_size>:
 800adec:	b508      	push	{r3, lr}
 800adee:	2101      	movs	r1, #1
 800adf0:	2000      	movs	r0, #0
 800adf2:	f001 fb85 	bl	800c500 <ucdr_alignment>
 800adf6:	3001      	adds	r0, #1
 800adf8:	bd08      	pop	{r3, pc}
 800adfa:	bf00      	nop

0800adfc <_ImuCalibration_Response__cdr_deserialize>:
 800adfc:	b109      	cbz	r1, 800ae02 <_ImuCalibration_Response__cdr_deserialize+0x6>
 800adfe:	f000 b881 	b.w	800af04 <ucdr_deserialize_bool>
 800ae02:	4608      	mov	r0, r1
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop

0800ae08 <_ImuCalibration_Request__get_serialized_size>:
 800ae08:	b110      	cbz	r0, 800ae10 <_ImuCalibration_Request__get_serialized_size+0x8>
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	f004 baae 	b.w	800f36c <get_serialized_size_sensor_msgs__msg__Imu>
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop

0800ae14 <_ImuCalibration_Request__cdr_deserialize>:
 800ae14:	b570      	push	{r4, r5, r6, lr}
 800ae16:	460c      	mov	r4, r1
 800ae18:	b149      	cbz	r1, 800ae2e <_ImuCalibration_Request__cdr_deserialize+0x1a>
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	f004 fb5e 	bl	800f4dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800ae20:	6843      	ldr	r3, [r0, #4]
 800ae22:	4621      	mov	r1, r4
 800ae24:	4628      	mov	r0, r5
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae2c:	4718      	bx	r3
 800ae2e:	4608      	mov	r0, r1
 800ae30:	bd70      	pop	{r4, r5, r6, pc}
 800ae32:	bf00      	nop

0800ae34 <_ImuCalibration_Request__cdr_serialize>:
 800ae34:	b158      	cbz	r0, 800ae4e <_ImuCalibration_Request__cdr_serialize+0x1a>
 800ae36:	b570      	push	{r4, r5, r6, lr}
 800ae38:	460d      	mov	r5, r1
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	f004 fb4e 	bl	800f4dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800ae40:	6843      	ldr	r3, [r0, #4]
 800ae42:	4629      	mov	r1, r5
 800ae44:	4620      	mov	r0, r4
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae4c:	4718      	bx	r3
 800ae4e:	4770      	bx	lr

0800ae50 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response>:
 800ae50:	b138      	cbz	r0, 800ae62 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response+0x12>
 800ae52:	b508      	push	{r3, lr}
 800ae54:	460b      	mov	r3, r1
 800ae56:	4618      	mov	r0, r3
 800ae58:	2101      	movs	r1, #1
 800ae5a:	f001 fb51 	bl	800c500 <ucdr_alignment>
 800ae5e:	3001      	adds	r0, #1
 800ae60:	bd08      	pop	{r3, pc}
 800ae62:	4770      	bx	lr

0800ae64 <_ImuCalibration_Response__cdr_serialize>:
 800ae64:	460a      	mov	r2, r1
 800ae66:	b118      	cbz	r0, 800ae70 <_ImuCalibration_Response__cdr_serialize+0xc>
 800ae68:	7801      	ldrb	r1, [r0, #0]
 800ae6a:	4610      	mov	r0, r2
 800ae6c:	f000 b834 	b.w	800aed8 <ucdr_serialize_bool>
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop

0800ae74 <_ImuCalibration_Response__get_serialized_size>:
 800ae74:	b130      	cbz	r0, 800ae84 <_ImuCalibration_Response__get_serialized_size+0x10>
 800ae76:	b508      	push	{r3, lr}
 800ae78:	2101      	movs	r1, #1
 800ae7a:	2000      	movs	r0, #0
 800ae7c:	f001 fb40 	bl	800c500 <ucdr_alignment>
 800ae80:	3001      	adds	r0, #1
 800ae82:	bd08      	pop	{r3, pc}
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop

0800ae88 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800ae88:	4800      	ldr	r0, [pc, #0]	@ (800ae8c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4>)
 800ae8a:	4770      	bx	lr
 800ae8c:	20000344 	.word	0x20000344

0800ae90 <micro_ros_string_utilities_init>:
 800ae90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae94:	b086      	sub	sp, #24
 800ae96:	460f      	mov	r7, r1
 800ae98:	4604      	mov	r4, r0
 800ae9a:	a801      	add	r0, sp, #4
 800ae9c:	f002 fd74 	bl	800d988 <rcutils_get_default_allocator>
 800aea0:	4638      	mov	r0, r7
 800aea2:	f7f5 f9c7 	bl	8000234 <strlen>
 800aea6:	f100 0801 	add.w	r8, r0, #1
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	9905      	ldr	r1, [sp, #20]
 800aeae:	4605      	mov	r5, r0
 800aeb0:	4640      	mov	r0, r8
 800aeb2:	4798      	blx	r3
 800aeb4:	4642      	mov	r2, r8
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	2100      	movs	r1, #0
 800aeba:	f00e fcf3 	bl	80198a4 <memset>
 800aebe:	462a      	mov	r2, r5
 800aec0:	4639      	mov	r1, r7
 800aec2:	4630      	mov	r0, r6
 800aec4:	f00e fdb7 	bl	8019a36 <memcpy>
 800aec8:	4620      	mov	r0, r4
 800aeca:	e9c4 6500 	strd	r6, r5, [r4]
 800aece:	f8c4 8008 	str.w	r8, [r4, #8]
 800aed2:	b006      	add	sp, #24
 800aed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aed8 <ucdr_serialize_bool>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	460d      	mov	r5, r1
 800aedc:	2101      	movs	r1, #1
 800aede:	4604      	mov	r4, r0
 800aee0:	f001 fac2 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800aee4:	b148      	cbz	r0, 800aefa <ucdr_serialize_bool+0x22>
 800aee6:	68a3      	ldr	r3, [r4, #8]
 800aee8:	701d      	strb	r5, [r3, #0]
 800aeea:	68a2      	ldr	r2, [r4, #8]
 800aeec:	6923      	ldr	r3, [r4, #16]
 800aeee:	2101      	movs	r1, #1
 800aef0:	440a      	add	r2, r1
 800aef2:	440b      	add	r3, r1
 800aef4:	60a2      	str	r2, [r4, #8]
 800aef6:	6123      	str	r3, [r4, #16]
 800aef8:	7561      	strb	r1, [r4, #21]
 800aefa:	7da0      	ldrb	r0, [r4, #22]
 800aefc:	f080 0001 	eor.w	r0, r0, #1
 800af00:	bd38      	pop	{r3, r4, r5, pc}
 800af02:	bf00      	nop

0800af04 <ucdr_deserialize_bool>:
 800af04:	b538      	push	{r3, r4, r5, lr}
 800af06:	460d      	mov	r5, r1
 800af08:	2101      	movs	r1, #1
 800af0a:	4604      	mov	r4, r0
 800af0c:	f001 faac 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800af10:	b160      	cbz	r0, 800af2c <ucdr_deserialize_bool+0x28>
 800af12:	68a2      	ldr	r2, [r4, #8]
 800af14:	6923      	ldr	r3, [r4, #16]
 800af16:	f812 1b01 	ldrb.w	r1, [r2], #1
 800af1a:	3900      	subs	r1, #0
 800af1c:	bf18      	it	ne
 800af1e:	2101      	movne	r1, #1
 800af20:	7029      	strb	r1, [r5, #0]
 800af22:	3301      	adds	r3, #1
 800af24:	2101      	movs	r1, #1
 800af26:	60a2      	str	r2, [r4, #8]
 800af28:	6123      	str	r3, [r4, #16]
 800af2a:	7561      	strb	r1, [r4, #21]
 800af2c:	7da0      	ldrb	r0, [r4, #22]
 800af2e:	f080 0001 	eor.w	r0, r0, #1
 800af32:	bd38      	pop	{r3, r4, r5, pc}

0800af34 <ucdr_serialize_uint8_t>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	460d      	mov	r5, r1
 800af38:	2101      	movs	r1, #1
 800af3a:	4604      	mov	r4, r0
 800af3c:	f001 fa94 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800af40:	b148      	cbz	r0, 800af56 <ucdr_serialize_uint8_t+0x22>
 800af42:	68a3      	ldr	r3, [r4, #8]
 800af44:	701d      	strb	r5, [r3, #0]
 800af46:	68a2      	ldr	r2, [r4, #8]
 800af48:	6923      	ldr	r3, [r4, #16]
 800af4a:	2101      	movs	r1, #1
 800af4c:	440a      	add	r2, r1
 800af4e:	440b      	add	r3, r1
 800af50:	60a2      	str	r2, [r4, #8]
 800af52:	6123      	str	r3, [r4, #16]
 800af54:	7561      	strb	r1, [r4, #21]
 800af56:	7da0      	ldrb	r0, [r4, #22]
 800af58:	f080 0001 	eor.w	r0, r0, #1
 800af5c:	bd38      	pop	{r3, r4, r5, pc}
 800af5e:	bf00      	nop

0800af60 <ucdr_deserialize_uint8_t>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	460d      	mov	r5, r1
 800af64:	2101      	movs	r1, #1
 800af66:	4604      	mov	r4, r0
 800af68:	f001 fa7e 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800af6c:	b150      	cbz	r0, 800af84 <ucdr_deserialize_uint8_t+0x24>
 800af6e:	68a3      	ldr	r3, [r4, #8]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	702b      	strb	r3, [r5, #0]
 800af74:	68a2      	ldr	r2, [r4, #8]
 800af76:	6923      	ldr	r3, [r4, #16]
 800af78:	2101      	movs	r1, #1
 800af7a:	440a      	add	r2, r1
 800af7c:	440b      	add	r3, r1
 800af7e:	60a2      	str	r2, [r4, #8]
 800af80:	6123      	str	r3, [r4, #16]
 800af82:	7561      	strb	r1, [r4, #21]
 800af84:	7da0      	ldrb	r0, [r4, #22]
 800af86:	f080 0001 	eor.w	r0, r0, #1
 800af8a:	bd38      	pop	{r3, r4, r5, pc}

0800af8c <ucdr_serialize_uint16_t>:
 800af8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af90:	b082      	sub	sp, #8
 800af92:	460b      	mov	r3, r1
 800af94:	2102      	movs	r1, #2
 800af96:	4604      	mov	r4, r0
 800af98:	f8ad 3006 	strh.w	r3, [sp, #6]
 800af9c:	f001 fab8 	bl	800c510 <ucdr_buffer_alignment>
 800afa0:	4601      	mov	r1, r0
 800afa2:	4620      	mov	r0, r4
 800afa4:	7d67      	ldrb	r7, [r4, #21]
 800afa6:	f001 faf7 	bl	800c598 <ucdr_advance_buffer>
 800afaa:	2102      	movs	r1, #2
 800afac:	4620      	mov	r0, r4
 800afae:	f001 fa4f 	bl	800c450 <ucdr_check_buffer_available_for>
 800afb2:	bb78      	cbnz	r0, 800b014 <ucdr_serialize_uint16_t+0x88>
 800afb4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800afb8:	42ab      	cmp	r3, r5
 800afba:	d926      	bls.n	800b00a <ucdr_serialize_uint16_t+0x7e>
 800afbc:	1b5e      	subs	r6, r3, r5
 800afbe:	60a3      	str	r3, [r4, #8]
 800afc0:	6923      	ldr	r3, [r4, #16]
 800afc2:	f1c6 0802 	rsb	r8, r6, #2
 800afc6:	4433      	add	r3, r6
 800afc8:	6123      	str	r3, [r4, #16]
 800afca:	4641      	mov	r1, r8
 800afcc:	4620      	mov	r0, r4
 800afce:	f001 fa4b 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d03b      	beq.n	800b04e <ucdr_serialize_uint16_t+0xc2>
 800afd6:	7d23      	ldrb	r3, [r4, #20]
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d04a      	beq.n	800b072 <ucdr_serialize_uint16_t+0xe6>
 800afdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800afe0:	702b      	strb	r3, [r5, #0]
 800afe2:	2e00      	cmp	r6, #0
 800afe4:	d040      	beq.n	800b068 <ucdr_serialize_uint16_t+0xdc>
 800afe6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800afea:	706b      	strb	r3, [r5, #1]
 800afec:	6923      	ldr	r3, [r4, #16]
 800afee:	68a2      	ldr	r2, [r4, #8]
 800aff0:	7da0      	ldrb	r0, [r4, #22]
 800aff2:	3302      	adds	r3, #2
 800aff4:	1b9e      	subs	r6, r3, r6
 800aff6:	4442      	add	r2, r8
 800aff8:	2302      	movs	r3, #2
 800affa:	f080 0001 	eor.w	r0, r0, #1
 800affe:	60a2      	str	r2, [r4, #8]
 800b000:	6126      	str	r6, [r4, #16]
 800b002:	7563      	strb	r3, [r4, #21]
 800b004:	b002      	add	sp, #8
 800b006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b00a:	2102      	movs	r1, #2
 800b00c:	4620      	mov	r0, r4
 800b00e:	f001 fa2b 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b012:	b190      	cbz	r0, 800b03a <ucdr_serialize_uint16_t+0xae>
 800b014:	7d23      	ldrb	r3, [r4, #20]
 800b016:	2b01      	cmp	r3, #1
 800b018:	68a3      	ldr	r3, [r4, #8]
 800b01a:	d014      	beq.n	800b046 <ucdr_serialize_uint16_t+0xba>
 800b01c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b020:	701a      	strb	r2, [r3, #0]
 800b022:	68a3      	ldr	r3, [r4, #8]
 800b024:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b028:	705a      	strb	r2, [r3, #1]
 800b02a:	68a2      	ldr	r2, [r4, #8]
 800b02c:	6923      	ldr	r3, [r4, #16]
 800b02e:	3202      	adds	r2, #2
 800b030:	3302      	adds	r3, #2
 800b032:	2102      	movs	r1, #2
 800b034:	60a2      	str	r2, [r4, #8]
 800b036:	6123      	str	r3, [r4, #16]
 800b038:	7561      	strb	r1, [r4, #21]
 800b03a:	7da0      	ldrb	r0, [r4, #22]
 800b03c:	f080 0001 	eor.w	r0, r0, #1
 800b040:	b002      	add	sp, #8
 800b042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b046:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b04a:	801a      	strh	r2, [r3, #0]
 800b04c:	e7ed      	b.n	800b02a <ucdr_serialize_uint16_t+0x9e>
 800b04e:	68a2      	ldr	r2, [r4, #8]
 800b050:	6923      	ldr	r3, [r4, #16]
 800b052:	7da0      	ldrb	r0, [r4, #22]
 800b054:	7567      	strb	r7, [r4, #21]
 800b056:	1b92      	subs	r2, r2, r6
 800b058:	1b9b      	subs	r3, r3, r6
 800b05a:	f080 0001 	eor.w	r0, r0, #1
 800b05e:	60a2      	str	r2, [r4, #8]
 800b060:	6123      	str	r3, [r4, #16]
 800b062:	b002      	add	sp, #8
 800b064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b068:	68a3      	ldr	r3, [r4, #8]
 800b06a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b06e:	701a      	strb	r2, [r3, #0]
 800b070:	e7bc      	b.n	800afec <ucdr_serialize_uint16_t+0x60>
 800b072:	4628      	mov	r0, r5
 800b074:	f10d 0506 	add.w	r5, sp, #6
 800b078:	4629      	mov	r1, r5
 800b07a:	4632      	mov	r2, r6
 800b07c:	f00e fcdb 	bl	8019a36 <memcpy>
 800b080:	68a0      	ldr	r0, [r4, #8]
 800b082:	4642      	mov	r2, r8
 800b084:	19a9      	adds	r1, r5, r6
 800b086:	f00e fcd6 	bl	8019a36 <memcpy>
 800b08a:	e7af      	b.n	800afec <ucdr_serialize_uint16_t+0x60>

0800b08c <ucdr_serialize_endian_uint16_t>:
 800b08c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b090:	b083      	sub	sp, #12
 800b092:	460d      	mov	r5, r1
 800b094:	2102      	movs	r1, #2
 800b096:	4604      	mov	r4, r0
 800b098:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b09c:	f001 fa38 	bl	800c510 <ucdr_buffer_alignment>
 800b0a0:	4601      	mov	r1, r0
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b0a8:	f001 fa76 	bl	800c598 <ucdr_advance_buffer>
 800b0ac:	2102      	movs	r1, #2
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f001 f9ce 	bl	800c450 <ucdr_check_buffer_available_for>
 800b0b4:	bb70      	cbnz	r0, 800b114 <ucdr_serialize_endian_uint16_t+0x88>
 800b0b6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b0ba:	42be      	cmp	r6, r7
 800b0bc:	d925      	bls.n	800b10a <ucdr_serialize_endian_uint16_t+0x7e>
 800b0be:	6923      	ldr	r3, [r4, #16]
 800b0c0:	60a6      	str	r6, [r4, #8]
 800b0c2:	1bf6      	subs	r6, r6, r7
 800b0c4:	4433      	add	r3, r6
 800b0c6:	f1c6 0902 	rsb	r9, r6, #2
 800b0ca:	6123      	str	r3, [r4, #16]
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f001 f9ca 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d039      	beq.n	800b14c <ucdr_serialize_endian_uint16_t+0xc0>
 800b0d8:	2d01      	cmp	r5, #1
 800b0da:	d04a      	beq.n	800b172 <ucdr_serialize_endian_uint16_t+0xe6>
 800b0dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b0e0:	703b      	strb	r3, [r7, #0]
 800b0e2:	2e00      	cmp	r6, #0
 800b0e4:	d040      	beq.n	800b168 <ucdr_serialize_endian_uint16_t+0xdc>
 800b0e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b0ea:	707b      	strb	r3, [r7, #1]
 800b0ec:	6923      	ldr	r3, [r4, #16]
 800b0ee:	68a2      	ldr	r2, [r4, #8]
 800b0f0:	7da0      	ldrb	r0, [r4, #22]
 800b0f2:	3302      	adds	r3, #2
 800b0f4:	444a      	add	r2, r9
 800b0f6:	1b9b      	subs	r3, r3, r6
 800b0f8:	2102      	movs	r1, #2
 800b0fa:	f080 0001 	eor.w	r0, r0, #1
 800b0fe:	60a2      	str	r2, [r4, #8]
 800b100:	6123      	str	r3, [r4, #16]
 800b102:	7561      	strb	r1, [r4, #21]
 800b104:	b003      	add	sp, #12
 800b106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b10a:	2102      	movs	r1, #2
 800b10c:	4620      	mov	r0, r4
 800b10e:	f001 f9ab 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b112:	b188      	cbz	r0, 800b138 <ucdr_serialize_endian_uint16_t+0xac>
 800b114:	2d01      	cmp	r5, #1
 800b116:	68a3      	ldr	r3, [r4, #8]
 800b118:	d014      	beq.n	800b144 <ucdr_serialize_endian_uint16_t+0xb8>
 800b11a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b11e:	701a      	strb	r2, [r3, #0]
 800b120:	68a3      	ldr	r3, [r4, #8]
 800b122:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b126:	705a      	strb	r2, [r3, #1]
 800b128:	68a2      	ldr	r2, [r4, #8]
 800b12a:	6923      	ldr	r3, [r4, #16]
 800b12c:	3202      	adds	r2, #2
 800b12e:	3302      	adds	r3, #2
 800b130:	2102      	movs	r1, #2
 800b132:	60a2      	str	r2, [r4, #8]
 800b134:	6123      	str	r3, [r4, #16]
 800b136:	7561      	strb	r1, [r4, #21]
 800b138:	7da0      	ldrb	r0, [r4, #22]
 800b13a:	f080 0001 	eor.w	r0, r0, #1
 800b13e:	b003      	add	sp, #12
 800b140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b144:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b148:	801a      	strh	r2, [r3, #0]
 800b14a:	e7ed      	b.n	800b128 <ucdr_serialize_endian_uint16_t+0x9c>
 800b14c:	68a2      	ldr	r2, [r4, #8]
 800b14e:	6923      	ldr	r3, [r4, #16]
 800b150:	7da0      	ldrb	r0, [r4, #22]
 800b152:	f884 8015 	strb.w	r8, [r4, #21]
 800b156:	1b92      	subs	r2, r2, r6
 800b158:	1b9b      	subs	r3, r3, r6
 800b15a:	f080 0001 	eor.w	r0, r0, #1
 800b15e:	60a2      	str	r2, [r4, #8]
 800b160:	6123      	str	r3, [r4, #16]
 800b162:	b003      	add	sp, #12
 800b164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b168:	68a3      	ldr	r3, [r4, #8]
 800b16a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b16e:	701a      	strb	r2, [r3, #0]
 800b170:	e7bc      	b.n	800b0ec <ucdr_serialize_endian_uint16_t+0x60>
 800b172:	f10d 0506 	add.w	r5, sp, #6
 800b176:	4629      	mov	r1, r5
 800b178:	4632      	mov	r2, r6
 800b17a:	4638      	mov	r0, r7
 800b17c:	f00e fc5b 	bl	8019a36 <memcpy>
 800b180:	68a0      	ldr	r0, [r4, #8]
 800b182:	464a      	mov	r2, r9
 800b184:	19a9      	adds	r1, r5, r6
 800b186:	f00e fc56 	bl	8019a36 <memcpy>
 800b18a:	e7af      	b.n	800b0ec <ucdr_serialize_endian_uint16_t+0x60>

0800b18c <ucdr_deserialize_uint16_t>:
 800b18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b190:	460d      	mov	r5, r1
 800b192:	2102      	movs	r1, #2
 800b194:	4604      	mov	r4, r0
 800b196:	f001 f9bb 	bl	800c510 <ucdr_buffer_alignment>
 800b19a:	4601      	mov	r1, r0
 800b19c:	4620      	mov	r0, r4
 800b19e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b1a2:	f001 f9f9 	bl	800c598 <ucdr_advance_buffer>
 800b1a6:	2102      	movs	r1, #2
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f001 f951 	bl	800c450 <ucdr_check_buffer_available_for>
 800b1ae:	bb60      	cbnz	r0, 800b20a <ucdr_deserialize_uint16_t+0x7e>
 800b1b0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b1b4:	42be      	cmp	r6, r7
 800b1b6:	d923      	bls.n	800b200 <ucdr_deserialize_uint16_t+0x74>
 800b1b8:	6923      	ldr	r3, [r4, #16]
 800b1ba:	60a6      	str	r6, [r4, #8]
 800b1bc:	1bf6      	subs	r6, r6, r7
 800b1be:	4433      	add	r3, r6
 800b1c0:	f1c6 0902 	rsb	r9, r6, #2
 800b1c4:	6123      	str	r3, [r4, #16]
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f001 f94d 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	d034      	beq.n	800b23c <ucdr_deserialize_uint16_t+0xb0>
 800b1d2:	7d23      	ldrb	r3, [r4, #20]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d042      	beq.n	800b25e <ucdr_deserialize_uint16_t+0xd2>
 800b1d8:	787b      	ldrb	r3, [r7, #1]
 800b1da:	702b      	strb	r3, [r5, #0]
 800b1dc:	2e00      	cmp	r6, #0
 800b1de:	d03a      	beq.n	800b256 <ucdr_deserialize_uint16_t+0xca>
 800b1e0:	783b      	ldrb	r3, [r7, #0]
 800b1e2:	706b      	strb	r3, [r5, #1]
 800b1e4:	6923      	ldr	r3, [r4, #16]
 800b1e6:	68a2      	ldr	r2, [r4, #8]
 800b1e8:	7da0      	ldrb	r0, [r4, #22]
 800b1ea:	2102      	movs	r1, #2
 800b1ec:	3302      	adds	r3, #2
 800b1ee:	444a      	add	r2, r9
 800b1f0:	1b9b      	subs	r3, r3, r6
 800b1f2:	7561      	strb	r1, [r4, #21]
 800b1f4:	60a2      	str	r2, [r4, #8]
 800b1f6:	6123      	str	r3, [r4, #16]
 800b1f8:	f080 0001 	eor.w	r0, r0, #1
 800b1fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b200:	2102      	movs	r1, #2
 800b202:	4620      	mov	r0, r4
 800b204:	f001 f930 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b208:	b180      	cbz	r0, 800b22c <ucdr_deserialize_uint16_t+0xa0>
 800b20a:	7d23      	ldrb	r3, [r4, #20]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	68a3      	ldr	r3, [r4, #8]
 800b210:	d011      	beq.n	800b236 <ucdr_deserialize_uint16_t+0xaa>
 800b212:	785b      	ldrb	r3, [r3, #1]
 800b214:	702b      	strb	r3, [r5, #0]
 800b216:	68a3      	ldr	r3, [r4, #8]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	706b      	strb	r3, [r5, #1]
 800b21c:	68a2      	ldr	r2, [r4, #8]
 800b21e:	6923      	ldr	r3, [r4, #16]
 800b220:	3202      	adds	r2, #2
 800b222:	3302      	adds	r3, #2
 800b224:	2102      	movs	r1, #2
 800b226:	60a2      	str	r2, [r4, #8]
 800b228:	6123      	str	r3, [r4, #16]
 800b22a:	7561      	strb	r1, [r4, #21]
 800b22c:	7da0      	ldrb	r0, [r4, #22]
 800b22e:	f080 0001 	eor.w	r0, r0, #1
 800b232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b236:	881b      	ldrh	r3, [r3, #0]
 800b238:	802b      	strh	r3, [r5, #0]
 800b23a:	e7ef      	b.n	800b21c <ucdr_deserialize_uint16_t+0x90>
 800b23c:	68a2      	ldr	r2, [r4, #8]
 800b23e:	6923      	ldr	r3, [r4, #16]
 800b240:	7da0      	ldrb	r0, [r4, #22]
 800b242:	f884 8015 	strb.w	r8, [r4, #21]
 800b246:	1b92      	subs	r2, r2, r6
 800b248:	1b9b      	subs	r3, r3, r6
 800b24a:	60a2      	str	r2, [r4, #8]
 800b24c:	6123      	str	r3, [r4, #16]
 800b24e:	f080 0001 	eor.w	r0, r0, #1
 800b252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b256:	68a3      	ldr	r3, [r4, #8]
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	706b      	strb	r3, [r5, #1]
 800b25c:	e7c2      	b.n	800b1e4 <ucdr_deserialize_uint16_t+0x58>
 800b25e:	4639      	mov	r1, r7
 800b260:	4632      	mov	r2, r6
 800b262:	4628      	mov	r0, r5
 800b264:	f00e fbe7 	bl	8019a36 <memcpy>
 800b268:	68a1      	ldr	r1, [r4, #8]
 800b26a:	464a      	mov	r2, r9
 800b26c:	19a8      	adds	r0, r5, r6
 800b26e:	f00e fbe2 	bl	8019a36 <memcpy>
 800b272:	e7b7      	b.n	800b1e4 <ucdr_deserialize_uint16_t+0x58>

0800b274 <ucdr_deserialize_endian_uint16_t>:
 800b274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b278:	460e      	mov	r6, r1
 800b27a:	2102      	movs	r1, #2
 800b27c:	4604      	mov	r4, r0
 800b27e:	4615      	mov	r5, r2
 800b280:	f001 f946 	bl	800c510 <ucdr_buffer_alignment>
 800b284:	4601      	mov	r1, r0
 800b286:	4620      	mov	r0, r4
 800b288:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b28c:	f001 f984 	bl	800c598 <ucdr_advance_buffer>
 800b290:	2102      	movs	r1, #2
 800b292:	4620      	mov	r0, r4
 800b294:	f001 f8dc 	bl	800c450 <ucdr_check_buffer_available_for>
 800b298:	bb70      	cbnz	r0, 800b2f8 <ucdr_deserialize_endian_uint16_t+0x84>
 800b29a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b29e:	4547      	cmp	r7, r8
 800b2a0:	d925      	bls.n	800b2ee <ucdr_deserialize_endian_uint16_t+0x7a>
 800b2a2:	6923      	ldr	r3, [r4, #16]
 800b2a4:	60a7      	str	r7, [r4, #8]
 800b2a6:	eba7 0708 	sub.w	r7, r7, r8
 800b2aa:	443b      	add	r3, r7
 800b2ac:	f1c7 0a02 	rsb	sl, r7, #2
 800b2b0:	6123      	str	r3, [r4, #16]
 800b2b2:	4651      	mov	r1, sl
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f001 f8d7 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d034      	beq.n	800b328 <ucdr_deserialize_endian_uint16_t+0xb4>
 800b2be:	2e01      	cmp	r6, #1
 800b2c0:	d043      	beq.n	800b34a <ucdr_deserialize_endian_uint16_t+0xd6>
 800b2c2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b2c6:	702b      	strb	r3, [r5, #0]
 800b2c8:	2f00      	cmp	r7, #0
 800b2ca:	d03a      	beq.n	800b342 <ucdr_deserialize_endian_uint16_t+0xce>
 800b2cc:	f898 3000 	ldrb.w	r3, [r8]
 800b2d0:	706b      	strb	r3, [r5, #1]
 800b2d2:	6923      	ldr	r3, [r4, #16]
 800b2d4:	68a2      	ldr	r2, [r4, #8]
 800b2d6:	7da0      	ldrb	r0, [r4, #22]
 800b2d8:	2102      	movs	r1, #2
 800b2da:	3302      	adds	r3, #2
 800b2dc:	4452      	add	r2, sl
 800b2de:	1bdb      	subs	r3, r3, r7
 800b2e0:	7561      	strb	r1, [r4, #21]
 800b2e2:	60a2      	str	r2, [r4, #8]
 800b2e4:	6123      	str	r3, [r4, #16]
 800b2e6:	f080 0001 	eor.w	r0, r0, #1
 800b2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ee:	2102      	movs	r1, #2
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f001 f8b9 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b2f6:	b178      	cbz	r0, 800b318 <ucdr_deserialize_endian_uint16_t+0xa4>
 800b2f8:	2e01      	cmp	r6, #1
 800b2fa:	68a3      	ldr	r3, [r4, #8]
 800b2fc:	d011      	beq.n	800b322 <ucdr_deserialize_endian_uint16_t+0xae>
 800b2fe:	785b      	ldrb	r3, [r3, #1]
 800b300:	702b      	strb	r3, [r5, #0]
 800b302:	68a3      	ldr	r3, [r4, #8]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	706b      	strb	r3, [r5, #1]
 800b308:	68a2      	ldr	r2, [r4, #8]
 800b30a:	6923      	ldr	r3, [r4, #16]
 800b30c:	3202      	adds	r2, #2
 800b30e:	3302      	adds	r3, #2
 800b310:	2102      	movs	r1, #2
 800b312:	60a2      	str	r2, [r4, #8]
 800b314:	6123      	str	r3, [r4, #16]
 800b316:	7561      	strb	r1, [r4, #21]
 800b318:	7da0      	ldrb	r0, [r4, #22]
 800b31a:	f080 0001 	eor.w	r0, r0, #1
 800b31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b322:	881b      	ldrh	r3, [r3, #0]
 800b324:	802b      	strh	r3, [r5, #0]
 800b326:	e7ef      	b.n	800b308 <ucdr_deserialize_endian_uint16_t+0x94>
 800b328:	68a2      	ldr	r2, [r4, #8]
 800b32a:	6923      	ldr	r3, [r4, #16]
 800b32c:	7da0      	ldrb	r0, [r4, #22]
 800b32e:	f884 9015 	strb.w	r9, [r4, #21]
 800b332:	1bd2      	subs	r2, r2, r7
 800b334:	1bdb      	subs	r3, r3, r7
 800b336:	60a2      	str	r2, [r4, #8]
 800b338:	6123      	str	r3, [r4, #16]
 800b33a:	f080 0001 	eor.w	r0, r0, #1
 800b33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b342:	68a3      	ldr	r3, [r4, #8]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	706b      	strb	r3, [r5, #1]
 800b348:	e7c3      	b.n	800b2d2 <ucdr_deserialize_endian_uint16_t+0x5e>
 800b34a:	4641      	mov	r1, r8
 800b34c:	463a      	mov	r2, r7
 800b34e:	4628      	mov	r0, r5
 800b350:	f00e fb71 	bl	8019a36 <memcpy>
 800b354:	68a1      	ldr	r1, [r4, #8]
 800b356:	4652      	mov	r2, sl
 800b358:	19e8      	adds	r0, r5, r7
 800b35a:	f00e fb6c 	bl	8019a36 <memcpy>
 800b35e:	e7b8      	b.n	800b2d2 <ucdr_deserialize_endian_uint16_t+0x5e>

0800b360 <ucdr_serialize_uint32_t>:
 800b360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b364:	b082      	sub	sp, #8
 800b366:	4604      	mov	r4, r0
 800b368:	9101      	str	r1, [sp, #4]
 800b36a:	2104      	movs	r1, #4
 800b36c:	f001 f8d0 	bl	800c510 <ucdr_buffer_alignment>
 800b370:	4601      	mov	r1, r0
 800b372:	4620      	mov	r0, r4
 800b374:	7d67      	ldrb	r7, [r4, #21]
 800b376:	f001 f90f 	bl	800c598 <ucdr_advance_buffer>
 800b37a:	2104      	movs	r1, #4
 800b37c:	4620      	mov	r0, r4
 800b37e:	f001 f867 	bl	800c450 <ucdr_check_buffer_available_for>
 800b382:	2800      	cmp	r0, #0
 800b384:	d139      	bne.n	800b3fa <ucdr_serialize_uint32_t+0x9a>
 800b386:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b38a:	42ab      	cmp	r3, r5
 800b38c:	d930      	bls.n	800b3f0 <ucdr_serialize_uint32_t+0x90>
 800b38e:	1b5e      	subs	r6, r3, r5
 800b390:	60a3      	str	r3, [r4, #8]
 800b392:	6923      	ldr	r3, [r4, #16]
 800b394:	f1c6 0804 	rsb	r8, r6, #4
 800b398:	4433      	add	r3, r6
 800b39a:	6123      	str	r3, [r4, #16]
 800b39c:	4641      	mov	r1, r8
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f001 f862 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d04c      	beq.n	800b442 <ucdr_serialize_uint32_t+0xe2>
 800b3a8:	7d23      	ldrb	r3, [r4, #20]
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d063      	beq.n	800b476 <ucdr_serialize_uint32_t+0x116>
 800b3ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b3b2:	702b      	strb	r3, [r5, #0]
 800b3b4:	2e00      	cmp	r6, #0
 800b3b6:	d051      	beq.n	800b45c <ucdr_serialize_uint32_t+0xfc>
 800b3b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b3bc:	706b      	strb	r3, [r5, #1]
 800b3be:	2e01      	cmp	r6, #1
 800b3c0:	d050      	beq.n	800b464 <ucdr_serialize_uint32_t+0x104>
 800b3c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b3c6:	70ab      	strb	r3, [r5, #2]
 800b3c8:	2e02      	cmp	r6, #2
 800b3ca:	d04f      	beq.n	800b46c <ucdr_serialize_uint32_t+0x10c>
 800b3cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b3d0:	70eb      	strb	r3, [r5, #3]
 800b3d2:	6923      	ldr	r3, [r4, #16]
 800b3d4:	68a2      	ldr	r2, [r4, #8]
 800b3d6:	7da0      	ldrb	r0, [r4, #22]
 800b3d8:	3304      	adds	r3, #4
 800b3da:	1b9e      	subs	r6, r3, r6
 800b3dc:	4442      	add	r2, r8
 800b3de:	2304      	movs	r3, #4
 800b3e0:	f080 0001 	eor.w	r0, r0, #1
 800b3e4:	60a2      	str	r2, [r4, #8]
 800b3e6:	6126      	str	r6, [r4, #16]
 800b3e8:	7563      	strb	r3, [r4, #21]
 800b3ea:	b002      	add	sp, #8
 800b3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3f0:	2104      	movs	r1, #4
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f001 f838 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b3f8:	b1d0      	cbz	r0, 800b430 <ucdr_serialize_uint32_t+0xd0>
 800b3fa:	7d23      	ldrb	r3, [r4, #20]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	68a3      	ldr	r3, [r4, #8]
 800b400:	d01c      	beq.n	800b43c <ucdr_serialize_uint32_t+0xdc>
 800b402:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b406:	701a      	strb	r2, [r3, #0]
 800b408:	68a3      	ldr	r3, [r4, #8]
 800b40a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b40e:	705a      	strb	r2, [r3, #1]
 800b410:	68a3      	ldr	r3, [r4, #8]
 800b412:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b416:	709a      	strb	r2, [r3, #2]
 800b418:	68a3      	ldr	r3, [r4, #8]
 800b41a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b41e:	70da      	strb	r2, [r3, #3]
 800b420:	68a2      	ldr	r2, [r4, #8]
 800b422:	6923      	ldr	r3, [r4, #16]
 800b424:	3204      	adds	r2, #4
 800b426:	3304      	adds	r3, #4
 800b428:	2104      	movs	r1, #4
 800b42a:	60a2      	str	r2, [r4, #8]
 800b42c:	6123      	str	r3, [r4, #16]
 800b42e:	7561      	strb	r1, [r4, #21]
 800b430:	7da0      	ldrb	r0, [r4, #22]
 800b432:	f080 0001 	eor.w	r0, r0, #1
 800b436:	b002      	add	sp, #8
 800b438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b43c:	9a01      	ldr	r2, [sp, #4]
 800b43e:	601a      	str	r2, [r3, #0]
 800b440:	e7ee      	b.n	800b420 <ucdr_serialize_uint32_t+0xc0>
 800b442:	68a2      	ldr	r2, [r4, #8]
 800b444:	6923      	ldr	r3, [r4, #16]
 800b446:	7da0      	ldrb	r0, [r4, #22]
 800b448:	7567      	strb	r7, [r4, #21]
 800b44a:	1b92      	subs	r2, r2, r6
 800b44c:	1b9b      	subs	r3, r3, r6
 800b44e:	f080 0001 	eor.w	r0, r0, #1
 800b452:	60a2      	str	r2, [r4, #8]
 800b454:	6123      	str	r3, [r4, #16]
 800b456:	b002      	add	sp, #8
 800b458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b45c:	68a3      	ldr	r3, [r4, #8]
 800b45e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b462:	701a      	strb	r2, [r3, #0]
 800b464:	68a3      	ldr	r3, [r4, #8]
 800b466:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b46a:	701a      	strb	r2, [r3, #0]
 800b46c:	68a3      	ldr	r3, [r4, #8]
 800b46e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b472:	701a      	strb	r2, [r3, #0]
 800b474:	e7ad      	b.n	800b3d2 <ucdr_serialize_uint32_t+0x72>
 800b476:	4628      	mov	r0, r5
 800b478:	ad01      	add	r5, sp, #4
 800b47a:	4629      	mov	r1, r5
 800b47c:	4632      	mov	r2, r6
 800b47e:	f00e fada 	bl	8019a36 <memcpy>
 800b482:	68a0      	ldr	r0, [r4, #8]
 800b484:	4642      	mov	r2, r8
 800b486:	19a9      	adds	r1, r5, r6
 800b488:	f00e fad5 	bl	8019a36 <memcpy>
 800b48c:	e7a1      	b.n	800b3d2 <ucdr_serialize_uint32_t+0x72>
 800b48e:	bf00      	nop

0800b490 <ucdr_serialize_endian_uint32_t>:
 800b490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b494:	b083      	sub	sp, #12
 800b496:	460d      	mov	r5, r1
 800b498:	2104      	movs	r1, #4
 800b49a:	4604      	mov	r4, r0
 800b49c:	9201      	str	r2, [sp, #4]
 800b49e:	f001 f837 	bl	800c510 <ucdr_buffer_alignment>
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b4aa:	f001 f875 	bl	800c598 <ucdr_advance_buffer>
 800b4ae:	2104      	movs	r1, #4
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f000 ffcd 	bl	800c450 <ucdr_check_buffer_available_for>
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	d138      	bne.n	800b52c <ucdr_serialize_endian_uint32_t+0x9c>
 800b4ba:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b4be:	42b7      	cmp	r7, r6
 800b4c0:	d92f      	bls.n	800b522 <ucdr_serialize_endian_uint32_t+0x92>
 800b4c2:	6923      	ldr	r3, [r4, #16]
 800b4c4:	60a7      	str	r7, [r4, #8]
 800b4c6:	1bbf      	subs	r7, r7, r6
 800b4c8:	443b      	add	r3, r7
 800b4ca:	f1c7 0904 	rsb	r9, r7, #4
 800b4ce:	6123      	str	r3, [r4, #16]
 800b4d0:	4649      	mov	r1, r9
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f000 ffc8 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d04a      	beq.n	800b572 <ucdr_serialize_endian_uint32_t+0xe2>
 800b4dc:	2d01      	cmp	r5, #1
 800b4de:	d063      	beq.n	800b5a8 <ucdr_serialize_endian_uint32_t+0x118>
 800b4e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b4e4:	7033      	strb	r3, [r6, #0]
 800b4e6:	2f00      	cmp	r7, #0
 800b4e8:	d051      	beq.n	800b58e <ucdr_serialize_endian_uint32_t+0xfe>
 800b4ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b4ee:	7073      	strb	r3, [r6, #1]
 800b4f0:	2f01      	cmp	r7, #1
 800b4f2:	d050      	beq.n	800b596 <ucdr_serialize_endian_uint32_t+0x106>
 800b4f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b4f8:	70b3      	strb	r3, [r6, #2]
 800b4fa:	2f02      	cmp	r7, #2
 800b4fc:	d04f      	beq.n	800b59e <ucdr_serialize_endian_uint32_t+0x10e>
 800b4fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b502:	70f3      	strb	r3, [r6, #3]
 800b504:	6923      	ldr	r3, [r4, #16]
 800b506:	68a2      	ldr	r2, [r4, #8]
 800b508:	7da0      	ldrb	r0, [r4, #22]
 800b50a:	3304      	adds	r3, #4
 800b50c:	444a      	add	r2, r9
 800b50e:	1bdb      	subs	r3, r3, r7
 800b510:	2104      	movs	r1, #4
 800b512:	f080 0001 	eor.w	r0, r0, #1
 800b516:	60a2      	str	r2, [r4, #8]
 800b518:	6123      	str	r3, [r4, #16]
 800b51a:	7561      	strb	r1, [r4, #21]
 800b51c:	b003      	add	sp, #12
 800b51e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b522:	2104      	movs	r1, #4
 800b524:	4620      	mov	r0, r4
 800b526:	f000 ff9f 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b52a:	b1c8      	cbz	r0, 800b560 <ucdr_serialize_endian_uint32_t+0xd0>
 800b52c:	2d01      	cmp	r5, #1
 800b52e:	68a3      	ldr	r3, [r4, #8]
 800b530:	d01c      	beq.n	800b56c <ucdr_serialize_endian_uint32_t+0xdc>
 800b532:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b536:	701a      	strb	r2, [r3, #0]
 800b538:	68a3      	ldr	r3, [r4, #8]
 800b53a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b53e:	705a      	strb	r2, [r3, #1]
 800b540:	68a3      	ldr	r3, [r4, #8]
 800b542:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b546:	709a      	strb	r2, [r3, #2]
 800b548:	68a3      	ldr	r3, [r4, #8]
 800b54a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b54e:	70da      	strb	r2, [r3, #3]
 800b550:	68a2      	ldr	r2, [r4, #8]
 800b552:	6923      	ldr	r3, [r4, #16]
 800b554:	3204      	adds	r2, #4
 800b556:	3304      	adds	r3, #4
 800b558:	2104      	movs	r1, #4
 800b55a:	60a2      	str	r2, [r4, #8]
 800b55c:	6123      	str	r3, [r4, #16]
 800b55e:	7561      	strb	r1, [r4, #21]
 800b560:	7da0      	ldrb	r0, [r4, #22]
 800b562:	f080 0001 	eor.w	r0, r0, #1
 800b566:	b003      	add	sp, #12
 800b568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b56c:	9a01      	ldr	r2, [sp, #4]
 800b56e:	601a      	str	r2, [r3, #0]
 800b570:	e7ee      	b.n	800b550 <ucdr_serialize_endian_uint32_t+0xc0>
 800b572:	68a2      	ldr	r2, [r4, #8]
 800b574:	6923      	ldr	r3, [r4, #16]
 800b576:	7da0      	ldrb	r0, [r4, #22]
 800b578:	f884 8015 	strb.w	r8, [r4, #21]
 800b57c:	1bd2      	subs	r2, r2, r7
 800b57e:	1bdb      	subs	r3, r3, r7
 800b580:	f080 0001 	eor.w	r0, r0, #1
 800b584:	60a2      	str	r2, [r4, #8]
 800b586:	6123      	str	r3, [r4, #16]
 800b588:	b003      	add	sp, #12
 800b58a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b58e:	68a3      	ldr	r3, [r4, #8]
 800b590:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b594:	701a      	strb	r2, [r3, #0]
 800b596:	68a3      	ldr	r3, [r4, #8]
 800b598:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b59c:	701a      	strb	r2, [r3, #0]
 800b59e:	68a3      	ldr	r3, [r4, #8]
 800b5a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b5a4:	701a      	strb	r2, [r3, #0]
 800b5a6:	e7ad      	b.n	800b504 <ucdr_serialize_endian_uint32_t+0x74>
 800b5a8:	ad01      	add	r5, sp, #4
 800b5aa:	4629      	mov	r1, r5
 800b5ac:	463a      	mov	r2, r7
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	f00e fa41 	bl	8019a36 <memcpy>
 800b5b4:	68a0      	ldr	r0, [r4, #8]
 800b5b6:	464a      	mov	r2, r9
 800b5b8:	19e9      	adds	r1, r5, r7
 800b5ba:	f00e fa3c 	bl	8019a36 <memcpy>
 800b5be:	e7a1      	b.n	800b504 <ucdr_serialize_endian_uint32_t+0x74>

0800b5c0 <ucdr_deserialize_uint32_t>:
 800b5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5c4:	460d      	mov	r5, r1
 800b5c6:	2104      	movs	r1, #4
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	f000 ffa1 	bl	800c510 <ucdr_buffer_alignment>
 800b5ce:	4601      	mov	r1, r0
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b5d6:	f000 ffdf 	bl	800c598 <ucdr_advance_buffer>
 800b5da:	2104      	movs	r1, #4
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f000 ff37 	bl	800c450 <ucdr_check_buffer_available_for>
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	d138      	bne.n	800b658 <ucdr_deserialize_uint32_t+0x98>
 800b5e6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b5ea:	42b7      	cmp	r7, r6
 800b5ec:	d92f      	bls.n	800b64e <ucdr_deserialize_uint32_t+0x8e>
 800b5ee:	6923      	ldr	r3, [r4, #16]
 800b5f0:	60a7      	str	r7, [r4, #8]
 800b5f2:	1bbf      	subs	r7, r7, r6
 800b5f4:	443b      	add	r3, r7
 800b5f6:	f1c7 0904 	rsb	r9, r7, #4
 800b5fa:	6123      	str	r3, [r4, #16]
 800b5fc:	4649      	mov	r1, r9
 800b5fe:	4620      	mov	r0, r4
 800b600:	f000 ff32 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b604:	2800      	cmp	r0, #0
 800b606:	d046      	beq.n	800b696 <ucdr_deserialize_uint32_t+0xd6>
 800b608:	7d23      	ldrb	r3, [r4, #20]
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d05c      	beq.n	800b6c8 <ucdr_deserialize_uint32_t+0x108>
 800b60e:	78f3      	ldrb	r3, [r6, #3]
 800b610:	702b      	strb	r3, [r5, #0]
 800b612:	2f00      	cmp	r7, #0
 800b614:	d04c      	beq.n	800b6b0 <ucdr_deserialize_uint32_t+0xf0>
 800b616:	78b3      	ldrb	r3, [r6, #2]
 800b618:	706b      	strb	r3, [r5, #1]
 800b61a:	2f01      	cmp	r7, #1
 800b61c:	f105 0302 	add.w	r3, r5, #2
 800b620:	d04a      	beq.n	800b6b8 <ucdr_deserialize_uint32_t+0xf8>
 800b622:	7873      	ldrb	r3, [r6, #1]
 800b624:	70ab      	strb	r3, [r5, #2]
 800b626:	2f02      	cmp	r7, #2
 800b628:	f105 0303 	add.w	r3, r5, #3
 800b62c:	d048      	beq.n	800b6c0 <ucdr_deserialize_uint32_t+0x100>
 800b62e:	7833      	ldrb	r3, [r6, #0]
 800b630:	70eb      	strb	r3, [r5, #3]
 800b632:	6923      	ldr	r3, [r4, #16]
 800b634:	68a2      	ldr	r2, [r4, #8]
 800b636:	7da0      	ldrb	r0, [r4, #22]
 800b638:	2104      	movs	r1, #4
 800b63a:	3304      	adds	r3, #4
 800b63c:	444a      	add	r2, r9
 800b63e:	1bdb      	subs	r3, r3, r7
 800b640:	7561      	strb	r1, [r4, #21]
 800b642:	60a2      	str	r2, [r4, #8]
 800b644:	6123      	str	r3, [r4, #16]
 800b646:	f080 0001 	eor.w	r0, r0, #1
 800b64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b64e:	2104      	movs	r1, #4
 800b650:	4620      	mov	r0, r4
 800b652:	f000 ff09 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b656:	b1b0      	cbz	r0, 800b686 <ucdr_deserialize_uint32_t+0xc6>
 800b658:	7d23      	ldrb	r3, [r4, #20]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	68a3      	ldr	r3, [r4, #8]
 800b65e:	d017      	beq.n	800b690 <ucdr_deserialize_uint32_t+0xd0>
 800b660:	78db      	ldrb	r3, [r3, #3]
 800b662:	702b      	strb	r3, [r5, #0]
 800b664:	68a3      	ldr	r3, [r4, #8]
 800b666:	789b      	ldrb	r3, [r3, #2]
 800b668:	706b      	strb	r3, [r5, #1]
 800b66a:	68a3      	ldr	r3, [r4, #8]
 800b66c:	785b      	ldrb	r3, [r3, #1]
 800b66e:	70ab      	strb	r3, [r5, #2]
 800b670:	68a3      	ldr	r3, [r4, #8]
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	70eb      	strb	r3, [r5, #3]
 800b676:	68a2      	ldr	r2, [r4, #8]
 800b678:	6923      	ldr	r3, [r4, #16]
 800b67a:	3204      	adds	r2, #4
 800b67c:	3304      	adds	r3, #4
 800b67e:	2104      	movs	r1, #4
 800b680:	60a2      	str	r2, [r4, #8]
 800b682:	6123      	str	r3, [r4, #16]
 800b684:	7561      	strb	r1, [r4, #21]
 800b686:	7da0      	ldrb	r0, [r4, #22]
 800b688:	f080 0001 	eor.w	r0, r0, #1
 800b68c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	602b      	str	r3, [r5, #0]
 800b694:	e7ef      	b.n	800b676 <ucdr_deserialize_uint32_t+0xb6>
 800b696:	68a2      	ldr	r2, [r4, #8]
 800b698:	6923      	ldr	r3, [r4, #16]
 800b69a:	7da0      	ldrb	r0, [r4, #22]
 800b69c:	f884 8015 	strb.w	r8, [r4, #21]
 800b6a0:	1bd2      	subs	r2, r2, r7
 800b6a2:	1bdb      	subs	r3, r3, r7
 800b6a4:	60a2      	str	r2, [r4, #8]
 800b6a6:	6123      	str	r3, [r4, #16]
 800b6a8:	f080 0001 	eor.w	r0, r0, #1
 800b6ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6b0:	68a3      	ldr	r3, [r4, #8]
 800b6b2:	789b      	ldrb	r3, [r3, #2]
 800b6b4:	706b      	strb	r3, [r5, #1]
 800b6b6:	1cab      	adds	r3, r5, #2
 800b6b8:	68a2      	ldr	r2, [r4, #8]
 800b6ba:	7852      	ldrb	r2, [r2, #1]
 800b6bc:	f803 2b01 	strb.w	r2, [r3], #1
 800b6c0:	68a2      	ldr	r2, [r4, #8]
 800b6c2:	7812      	ldrb	r2, [r2, #0]
 800b6c4:	701a      	strb	r2, [r3, #0]
 800b6c6:	e7b4      	b.n	800b632 <ucdr_deserialize_uint32_t+0x72>
 800b6c8:	4631      	mov	r1, r6
 800b6ca:	463a      	mov	r2, r7
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	f00e f9b2 	bl	8019a36 <memcpy>
 800b6d2:	68a1      	ldr	r1, [r4, #8]
 800b6d4:	464a      	mov	r2, r9
 800b6d6:	19e8      	adds	r0, r5, r7
 800b6d8:	f00e f9ad 	bl	8019a36 <memcpy>
 800b6dc:	e7a9      	b.n	800b632 <ucdr_deserialize_uint32_t+0x72>
 800b6de:	bf00      	nop

0800b6e0 <ucdr_deserialize_endian_uint32_t>:
 800b6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e4:	460e      	mov	r6, r1
 800b6e6:	2104      	movs	r1, #4
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	4615      	mov	r5, r2
 800b6ec:	f000 ff10 	bl	800c510 <ucdr_buffer_alignment>
 800b6f0:	4601      	mov	r1, r0
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b6f8:	f000 ff4e 	bl	800c598 <ucdr_advance_buffer>
 800b6fc:	2104      	movs	r1, #4
 800b6fe:	4620      	mov	r0, r4
 800b700:	f000 fea6 	bl	800c450 <ucdr_check_buffer_available_for>
 800b704:	2800      	cmp	r0, #0
 800b706:	d13c      	bne.n	800b782 <ucdr_deserialize_endian_uint32_t+0xa2>
 800b708:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b70c:	42bb      	cmp	r3, r7
 800b70e:	d933      	bls.n	800b778 <ucdr_deserialize_endian_uint32_t+0x98>
 800b710:	eba3 0807 	sub.w	r8, r3, r7
 800b714:	60a3      	str	r3, [r4, #8]
 800b716:	6923      	ldr	r3, [r4, #16]
 800b718:	f1c8 0a04 	rsb	sl, r8, #4
 800b71c:	4443      	add	r3, r8
 800b71e:	6123      	str	r3, [r4, #16]
 800b720:	4651      	mov	r1, sl
 800b722:	4620      	mov	r0, r4
 800b724:	f000 fea0 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b728:	2800      	cmp	r0, #0
 800b72a:	d048      	beq.n	800b7be <ucdr_deserialize_endian_uint32_t+0xde>
 800b72c:	2e01      	cmp	r6, #1
 800b72e:	d061      	beq.n	800b7f4 <ucdr_deserialize_endian_uint32_t+0x114>
 800b730:	78fb      	ldrb	r3, [r7, #3]
 800b732:	702b      	strb	r3, [r5, #0]
 800b734:	f1b8 0f00 	cmp.w	r8, #0
 800b738:	d050      	beq.n	800b7dc <ucdr_deserialize_endian_uint32_t+0xfc>
 800b73a:	78bb      	ldrb	r3, [r7, #2]
 800b73c:	706b      	strb	r3, [r5, #1]
 800b73e:	f1b8 0f01 	cmp.w	r8, #1
 800b742:	f105 0302 	add.w	r3, r5, #2
 800b746:	d04d      	beq.n	800b7e4 <ucdr_deserialize_endian_uint32_t+0x104>
 800b748:	787b      	ldrb	r3, [r7, #1]
 800b74a:	70ab      	strb	r3, [r5, #2]
 800b74c:	f1b8 0f02 	cmp.w	r8, #2
 800b750:	f105 0303 	add.w	r3, r5, #3
 800b754:	d04a      	beq.n	800b7ec <ucdr_deserialize_endian_uint32_t+0x10c>
 800b756:	783b      	ldrb	r3, [r7, #0]
 800b758:	70eb      	strb	r3, [r5, #3]
 800b75a:	6923      	ldr	r3, [r4, #16]
 800b75c:	68a2      	ldr	r2, [r4, #8]
 800b75e:	7da0      	ldrb	r0, [r4, #22]
 800b760:	2104      	movs	r1, #4
 800b762:	3304      	adds	r3, #4
 800b764:	4452      	add	r2, sl
 800b766:	eba3 0308 	sub.w	r3, r3, r8
 800b76a:	7561      	strb	r1, [r4, #21]
 800b76c:	60a2      	str	r2, [r4, #8]
 800b76e:	6123      	str	r3, [r4, #16]
 800b770:	f080 0001 	eor.w	r0, r0, #1
 800b774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b778:	2104      	movs	r1, #4
 800b77a:	4620      	mov	r0, r4
 800b77c:	f000 fe74 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b780:	b1a8      	cbz	r0, 800b7ae <ucdr_deserialize_endian_uint32_t+0xce>
 800b782:	2e01      	cmp	r6, #1
 800b784:	68a3      	ldr	r3, [r4, #8]
 800b786:	d017      	beq.n	800b7b8 <ucdr_deserialize_endian_uint32_t+0xd8>
 800b788:	78db      	ldrb	r3, [r3, #3]
 800b78a:	702b      	strb	r3, [r5, #0]
 800b78c:	68a3      	ldr	r3, [r4, #8]
 800b78e:	789b      	ldrb	r3, [r3, #2]
 800b790:	706b      	strb	r3, [r5, #1]
 800b792:	68a3      	ldr	r3, [r4, #8]
 800b794:	785b      	ldrb	r3, [r3, #1]
 800b796:	70ab      	strb	r3, [r5, #2]
 800b798:	68a3      	ldr	r3, [r4, #8]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	70eb      	strb	r3, [r5, #3]
 800b79e:	68a2      	ldr	r2, [r4, #8]
 800b7a0:	6923      	ldr	r3, [r4, #16]
 800b7a2:	3204      	adds	r2, #4
 800b7a4:	3304      	adds	r3, #4
 800b7a6:	2104      	movs	r1, #4
 800b7a8:	60a2      	str	r2, [r4, #8]
 800b7aa:	6123      	str	r3, [r4, #16]
 800b7ac:	7561      	strb	r1, [r4, #21]
 800b7ae:	7da0      	ldrb	r0, [r4, #22]
 800b7b0:	f080 0001 	eor.w	r0, r0, #1
 800b7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	602b      	str	r3, [r5, #0]
 800b7bc:	e7ef      	b.n	800b79e <ucdr_deserialize_endian_uint32_t+0xbe>
 800b7be:	68a2      	ldr	r2, [r4, #8]
 800b7c0:	6923      	ldr	r3, [r4, #16]
 800b7c2:	7da0      	ldrb	r0, [r4, #22]
 800b7c4:	f884 9015 	strb.w	r9, [r4, #21]
 800b7c8:	eba2 0208 	sub.w	r2, r2, r8
 800b7cc:	eba3 0308 	sub.w	r3, r3, r8
 800b7d0:	60a2      	str	r2, [r4, #8]
 800b7d2:	6123      	str	r3, [r4, #16]
 800b7d4:	f080 0001 	eor.w	r0, r0, #1
 800b7d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7dc:	68a3      	ldr	r3, [r4, #8]
 800b7de:	789b      	ldrb	r3, [r3, #2]
 800b7e0:	706b      	strb	r3, [r5, #1]
 800b7e2:	1cab      	adds	r3, r5, #2
 800b7e4:	68a2      	ldr	r2, [r4, #8]
 800b7e6:	7852      	ldrb	r2, [r2, #1]
 800b7e8:	f803 2b01 	strb.w	r2, [r3], #1
 800b7ec:	68a2      	ldr	r2, [r4, #8]
 800b7ee:	7812      	ldrb	r2, [r2, #0]
 800b7f0:	701a      	strb	r2, [r3, #0]
 800b7f2:	e7b2      	b.n	800b75a <ucdr_deserialize_endian_uint32_t+0x7a>
 800b7f4:	4639      	mov	r1, r7
 800b7f6:	4642      	mov	r2, r8
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	f00e f91c 	bl	8019a36 <memcpy>
 800b7fe:	68a1      	ldr	r1, [r4, #8]
 800b800:	4652      	mov	r2, sl
 800b802:	eb05 0008 	add.w	r0, r5, r8
 800b806:	f00e f916 	bl	8019a36 <memcpy>
 800b80a:	e7a6      	b.n	800b75a <ucdr_deserialize_endian_uint32_t+0x7a>

0800b80c <ucdr_serialize_uint64_t>:
 800b80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b810:	2108      	movs	r1, #8
 800b812:	b082      	sub	sp, #8
 800b814:	4604      	mov	r4, r0
 800b816:	e9cd 2300 	strd	r2, r3, [sp]
 800b81a:	f000 fe79 	bl	800c510 <ucdr_buffer_alignment>
 800b81e:	4601      	mov	r1, r0
 800b820:	4620      	mov	r0, r4
 800b822:	7d67      	ldrb	r7, [r4, #21]
 800b824:	f000 feb8 	bl	800c598 <ucdr_advance_buffer>
 800b828:	2108      	movs	r1, #8
 800b82a:	4620      	mov	r0, r4
 800b82c:	f000 fe10 	bl	800c450 <ucdr_check_buffer_available_for>
 800b830:	2800      	cmp	r0, #0
 800b832:	d14e      	bne.n	800b8d2 <ucdr_serialize_uint64_t+0xc6>
 800b834:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b838:	42ab      	cmp	r3, r5
 800b83a:	d945      	bls.n	800b8c8 <ucdr_serialize_uint64_t+0xbc>
 800b83c:	1b5e      	subs	r6, r3, r5
 800b83e:	60a3      	str	r3, [r4, #8]
 800b840:	6923      	ldr	r3, [r4, #16]
 800b842:	f1c6 0808 	rsb	r8, r6, #8
 800b846:	4433      	add	r3, r6
 800b848:	6123      	str	r3, [r4, #16]
 800b84a:	4641      	mov	r1, r8
 800b84c:	4620      	mov	r0, r4
 800b84e:	f000 fe0b 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b852:	2800      	cmp	r0, #0
 800b854:	d074      	beq.n	800b940 <ucdr_serialize_uint64_t+0x134>
 800b856:	7d23      	ldrb	r3, [r4, #20]
 800b858:	2b01      	cmp	r3, #1
 800b85a:	f000 809b 	beq.w	800b994 <ucdr_serialize_uint64_t+0x188>
 800b85e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b862:	702b      	strb	r3, [r5, #0]
 800b864:	2e00      	cmp	r6, #0
 800b866:	d078      	beq.n	800b95a <ucdr_serialize_uint64_t+0x14e>
 800b868:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b86c:	706b      	strb	r3, [r5, #1]
 800b86e:	2e01      	cmp	r6, #1
 800b870:	d077      	beq.n	800b962 <ucdr_serialize_uint64_t+0x156>
 800b872:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b876:	70ab      	strb	r3, [r5, #2]
 800b878:	2e02      	cmp	r6, #2
 800b87a:	d076      	beq.n	800b96a <ucdr_serialize_uint64_t+0x15e>
 800b87c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b880:	70eb      	strb	r3, [r5, #3]
 800b882:	2e03      	cmp	r6, #3
 800b884:	d075      	beq.n	800b972 <ucdr_serialize_uint64_t+0x166>
 800b886:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b88a:	712b      	strb	r3, [r5, #4]
 800b88c:	2e04      	cmp	r6, #4
 800b88e:	d074      	beq.n	800b97a <ucdr_serialize_uint64_t+0x16e>
 800b890:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b894:	716b      	strb	r3, [r5, #5]
 800b896:	2e05      	cmp	r6, #5
 800b898:	d073      	beq.n	800b982 <ucdr_serialize_uint64_t+0x176>
 800b89a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b89e:	71ab      	strb	r3, [r5, #6]
 800b8a0:	2e06      	cmp	r6, #6
 800b8a2:	d072      	beq.n	800b98a <ucdr_serialize_uint64_t+0x17e>
 800b8a4:	f89d 3000 	ldrb.w	r3, [sp]
 800b8a8:	71eb      	strb	r3, [r5, #7]
 800b8aa:	6923      	ldr	r3, [r4, #16]
 800b8ac:	68a2      	ldr	r2, [r4, #8]
 800b8ae:	7da0      	ldrb	r0, [r4, #22]
 800b8b0:	3308      	adds	r3, #8
 800b8b2:	1b9e      	subs	r6, r3, r6
 800b8b4:	4442      	add	r2, r8
 800b8b6:	2308      	movs	r3, #8
 800b8b8:	f080 0001 	eor.w	r0, r0, #1
 800b8bc:	60a2      	str	r2, [r4, #8]
 800b8be:	6126      	str	r6, [r4, #16]
 800b8c0:	7563      	strb	r3, [r4, #21]
 800b8c2:	b002      	add	sp, #8
 800b8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8c8:	2108      	movs	r1, #8
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f000 fdcc 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b8d0:	b350      	cbz	r0, 800b928 <ucdr_serialize_uint64_t+0x11c>
 800b8d2:	7d23      	ldrb	r3, [r4, #20]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d02d      	beq.n	800b934 <ucdr_serialize_uint64_t+0x128>
 800b8d8:	68a3      	ldr	r3, [r4, #8]
 800b8da:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b8de:	701a      	strb	r2, [r3, #0]
 800b8e0:	68a3      	ldr	r3, [r4, #8]
 800b8e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8e6:	705a      	strb	r2, [r3, #1]
 800b8e8:	68a3      	ldr	r3, [r4, #8]
 800b8ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b8ee:	709a      	strb	r2, [r3, #2]
 800b8f0:	68a3      	ldr	r3, [r4, #8]
 800b8f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b8f6:	70da      	strb	r2, [r3, #3]
 800b8f8:	68a3      	ldr	r3, [r4, #8]
 800b8fa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b8fe:	711a      	strb	r2, [r3, #4]
 800b900:	68a3      	ldr	r3, [r4, #8]
 800b902:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b906:	715a      	strb	r2, [r3, #5]
 800b908:	68a3      	ldr	r3, [r4, #8]
 800b90a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b90e:	719a      	strb	r2, [r3, #6]
 800b910:	68a3      	ldr	r3, [r4, #8]
 800b912:	f89d 2000 	ldrb.w	r2, [sp]
 800b916:	71da      	strb	r2, [r3, #7]
 800b918:	68a2      	ldr	r2, [r4, #8]
 800b91a:	6923      	ldr	r3, [r4, #16]
 800b91c:	3208      	adds	r2, #8
 800b91e:	3308      	adds	r3, #8
 800b920:	2108      	movs	r1, #8
 800b922:	60a2      	str	r2, [r4, #8]
 800b924:	6123      	str	r3, [r4, #16]
 800b926:	7561      	strb	r1, [r4, #21]
 800b928:	7da0      	ldrb	r0, [r4, #22]
 800b92a:	f080 0001 	eor.w	r0, r0, #1
 800b92e:	b002      	add	sp, #8
 800b930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b934:	466b      	mov	r3, sp
 800b936:	cb03      	ldmia	r3!, {r0, r1}
 800b938:	68a3      	ldr	r3, [r4, #8]
 800b93a:	6018      	str	r0, [r3, #0]
 800b93c:	6059      	str	r1, [r3, #4]
 800b93e:	e7eb      	b.n	800b918 <ucdr_serialize_uint64_t+0x10c>
 800b940:	68a2      	ldr	r2, [r4, #8]
 800b942:	6923      	ldr	r3, [r4, #16]
 800b944:	7da0      	ldrb	r0, [r4, #22]
 800b946:	7567      	strb	r7, [r4, #21]
 800b948:	1b92      	subs	r2, r2, r6
 800b94a:	1b9b      	subs	r3, r3, r6
 800b94c:	f080 0001 	eor.w	r0, r0, #1
 800b950:	60a2      	str	r2, [r4, #8]
 800b952:	6123      	str	r3, [r4, #16]
 800b954:	b002      	add	sp, #8
 800b956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b95a:	68a3      	ldr	r3, [r4, #8]
 800b95c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b960:	701a      	strb	r2, [r3, #0]
 800b962:	68a3      	ldr	r3, [r4, #8]
 800b964:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b968:	701a      	strb	r2, [r3, #0]
 800b96a:	68a3      	ldr	r3, [r4, #8]
 800b96c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b970:	701a      	strb	r2, [r3, #0]
 800b972:	68a3      	ldr	r3, [r4, #8]
 800b974:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b978:	701a      	strb	r2, [r3, #0]
 800b97a:	68a3      	ldr	r3, [r4, #8]
 800b97c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b980:	701a      	strb	r2, [r3, #0]
 800b982:	68a3      	ldr	r3, [r4, #8]
 800b984:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b988:	701a      	strb	r2, [r3, #0]
 800b98a:	68a3      	ldr	r3, [r4, #8]
 800b98c:	f89d 2000 	ldrb.w	r2, [sp]
 800b990:	701a      	strb	r2, [r3, #0]
 800b992:	e78a      	b.n	800b8aa <ucdr_serialize_uint64_t+0x9e>
 800b994:	4628      	mov	r0, r5
 800b996:	466d      	mov	r5, sp
 800b998:	4629      	mov	r1, r5
 800b99a:	4632      	mov	r2, r6
 800b99c:	f00e f84b 	bl	8019a36 <memcpy>
 800b9a0:	68a0      	ldr	r0, [r4, #8]
 800b9a2:	4642      	mov	r2, r8
 800b9a4:	19a9      	adds	r1, r5, r6
 800b9a6:	f00e f846 	bl	8019a36 <memcpy>
 800b9aa:	e77e      	b.n	800b8aa <ucdr_serialize_uint64_t+0x9e>

0800b9ac <ucdr_serialize_int16_t>:
 800b9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b0:	b082      	sub	sp, #8
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	2102      	movs	r1, #2
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b9bc:	f000 fda8 	bl	800c510 <ucdr_buffer_alignment>
 800b9c0:	4601      	mov	r1, r0
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	7d67      	ldrb	r7, [r4, #21]
 800b9c6:	f000 fde7 	bl	800c598 <ucdr_advance_buffer>
 800b9ca:	2102      	movs	r1, #2
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f000 fd3f 	bl	800c450 <ucdr_check_buffer_available_for>
 800b9d2:	bb78      	cbnz	r0, 800ba34 <ucdr_serialize_int16_t+0x88>
 800b9d4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b9d8:	42ab      	cmp	r3, r5
 800b9da:	d926      	bls.n	800ba2a <ucdr_serialize_int16_t+0x7e>
 800b9dc:	1b5e      	subs	r6, r3, r5
 800b9de:	60a3      	str	r3, [r4, #8]
 800b9e0:	6923      	ldr	r3, [r4, #16]
 800b9e2:	f1c6 0802 	rsb	r8, r6, #2
 800b9e6:	4433      	add	r3, r6
 800b9e8:	6123      	str	r3, [r4, #16]
 800b9ea:	4641      	mov	r1, r8
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f000 fd3b 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d03b      	beq.n	800ba6e <ucdr_serialize_int16_t+0xc2>
 800b9f6:	7d23      	ldrb	r3, [r4, #20]
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d04a      	beq.n	800ba92 <ucdr_serialize_int16_t+0xe6>
 800b9fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba00:	702b      	strb	r3, [r5, #0]
 800ba02:	2e00      	cmp	r6, #0
 800ba04:	d040      	beq.n	800ba88 <ucdr_serialize_int16_t+0xdc>
 800ba06:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ba0a:	706b      	strb	r3, [r5, #1]
 800ba0c:	6923      	ldr	r3, [r4, #16]
 800ba0e:	68a2      	ldr	r2, [r4, #8]
 800ba10:	7da0      	ldrb	r0, [r4, #22]
 800ba12:	3302      	adds	r3, #2
 800ba14:	1b9e      	subs	r6, r3, r6
 800ba16:	4442      	add	r2, r8
 800ba18:	2302      	movs	r3, #2
 800ba1a:	f080 0001 	eor.w	r0, r0, #1
 800ba1e:	60a2      	str	r2, [r4, #8]
 800ba20:	6126      	str	r6, [r4, #16]
 800ba22:	7563      	strb	r3, [r4, #21]
 800ba24:	b002      	add	sp, #8
 800ba26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba2a:	2102      	movs	r1, #2
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f000 fd1b 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800ba32:	b190      	cbz	r0, 800ba5a <ucdr_serialize_int16_t+0xae>
 800ba34:	7d23      	ldrb	r3, [r4, #20]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	68a3      	ldr	r3, [r4, #8]
 800ba3a:	d014      	beq.n	800ba66 <ucdr_serialize_int16_t+0xba>
 800ba3c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ba40:	701a      	strb	r2, [r3, #0]
 800ba42:	68a3      	ldr	r3, [r4, #8]
 800ba44:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba48:	705a      	strb	r2, [r3, #1]
 800ba4a:	68a2      	ldr	r2, [r4, #8]
 800ba4c:	6923      	ldr	r3, [r4, #16]
 800ba4e:	3202      	adds	r2, #2
 800ba50:	3302      	adds	r3, #2
 800ba52:	2102      	movs	r1, #2
 800ba54:	60a2      	str	r2, [r4, #8]
 800ba56:	6123      	str	r3, [r4, #16]
 800ba58:	7561      	strb	r1, [r4, #21]
 800ba5a:	7da0      	ldrb	r0, [r4, #22]
 800ba5c:	f080 0001 	eor.w	r0, r0, #1
 800ba60:	b002      	add	sp, #8
 800ba62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba66:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ba6a:	801a      	strh	r2, [r3, #0]
 800ba6c:	e7ed      	b.n	800ba4a <ucdr_serialize_int16_t+0x9e>
 800ba6e:	68a2      	ldr	r2, [r4, #8]
 800ba70:	6923      	ldr	r3, [r4, #16]
 800ba72:	7da0      	ldrb	r0, [r4, #22]
 800ba74:	7567      	strb	r7, [r4, #21]
 800ba76:	1b92      	subs	r2, r2, r6
 800ba78:	1b9b      	subs	r3, r3, r6
 800ba7a:	f080 0001 	eor.w	r0, r0, #1
 800ba7e:	60a2      	str	r2, [r4, #8]
 800ba80:	6123      	str	r3, [r4, #16]
 800ba82:	b002      	add	sp, #8
 800ba84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba88:	68a3      	ldr	r3, [r4, #8]
 800ba8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba8e:	701a      	strb	r2, [r3, #0]
 800ba90:	e7bc      	b.n	800ba0c <ucdr_serialize_int16_t+0x60>
 800ba92:	4628      	mov	r0, r5
 800ba94:	f10d 0506 	add.w	r5, sp, #6
 800ba98:	4629      	mov	r1, r5
 800ba9a:	4632      	mov	r2, r6
 800ba9c:	f00d ffcb 	bl	8019a36 <memcpy>
 800baa0:	68a0      	ldr	r0, [r4, #8]
 800baa2:	4642      	mov	r2, r8
 800baa4:	19a9      	adds	r1, r5, r6
 800baa6:	f00d ffc6 	bl	8019a36 <memcpy>
 800baaa:	e7af      	b.n	800ba0c <ucdr_serialize_int16_t+0x60>

0800baac <ucdr_deserialize_int16_t>:
 800baac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bab0:	460d      	mov	r5, r1
 800bab2:	2102      	movs	r1, #2
 800bab4:	4604      	mov	r4, r0
 800bab6:	f000 fd2b 	bl	800c510 <ucdr_buffer_alignment>
 800baba:	4601      	mov	r1, r0
 800babc:	4620      	mov	r0, r4
 800babe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bac2:	f000 fd69 	bl	800c598 <ucdr_advance_buffer>
 800bac6:	2102      	movs	r1, #2
 800bac8:	4620      	mov	r0, r4
 800baca:	f000 fcc1 	bl	800c450 <ucdr_check_buffer_available_for>
 800bace:	bb60      	cbnz	r0, 800bb2a <ucdr_deserialize_int16_t+0x7e>
 800bad0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bad4:	42be      	cmp	r6, r7
 800bad6:	d923      	bls.n	800bb20 <ucdr_deserialize_int16_t+0x74>
 800bad8:	6923      	ldr	r3, [r4, #16]
 800bada:	60a6      	str	r6, [r4, #8]
 800badc:	1bf6      	subs	r6, r6, r7
 800bade:	4433      	add	r3, r6
 800bae0:	f1c6 0902 	rsb	r9, r6, #2
 800bae4:	6123      	str	r3, [r4, #16]
 800bae6:	4649      	mov	r1, r9
 800bae8:	4620      	mov	r0, r4
 800baea:	f000 fcbd 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800baee:	2800      	cmp	r0, #0
 800baf0:	d034      	beq.n	800bb5c <ucdr_deserialize_int16_t+0xb0>
 800baf2:	7d23      	ldrb	r3, [r4, #20]
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d042      	beq.n	800bb7e <ucdr_deserialize_int16_t+0xd2>
 800baf8:	787b      	ldrb	r3, [r7, #1]
 800bafa:	702b      	strb	r3, [r5, #0]
 800bafc:	2e00      	cmp	r6, #0
 800bafe:	d03a      	beq.n	800bb76 <ucdr_deserialize_int16_t+0xca>
 800bb00:	783b      	ldrb	r3, [r7, #0]
 800bb02:	706b      	strb	r3, [r5, #1]
 800bb04:	6923      	ldr	r3, [r4, #16]
 800bb06:	68a2      	ldr	r2, [r4, #8]
 800bb08:	7da0      	ldrb	r0, [r4, #22]
 800bb0a:	2102      	movs	r1, #2
 800bb0c:	3302      	adds	r3, #2
 800bb0e:	444a      	add	r2, r9
 800bb10:	1b9b      	subs	r3, r3, r6
 800bb12:	7561      	strb	r1, [r4, #21]
 800bb14:	60a2      	str	r2, [r4, #8]
 800bb16:	6123      	str	r3, [r4, #16]
 800bb18:	f080 0001 	eor.w	r0, r0, #1
 800bb1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb20:	2102      	movs	r1, #2
 800bb22:	4620      	mov	r0, r4
 800bb24:	f000 fca0 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800bb28:	b180      	cbz	r0, 800bb4c <ucdr_deserialize_int16_t+0xa0>
 800bb2a:	7d23      	ldrb	r3, [r4, #20]
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	68a3      	ldr	r3, [r4, #8]
 800bb30:	d011      	beq.n	800bb56 <ucdr_deserialize_int16_t+0xaa>
 800bb32:	785b      	ldrb	r3, [r3, #1]
 800bb34:	702b      	strb	r3, [r5, #0]
 800bb36:	68a3      	ldr	r3, [r4, #8]
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	706b      	strb	r3, [r5, #1]
 800bb3c:	68a2      	ldr	r2, [r4, #8]
 800bb3e:	6923      	ldr	r3, [r4, #16]
 800bb40:	3202      	adds	r2, #2
 800bb42:	3302      	adds	r3, #2
 800bb44:	2102      	movs	r1, #2
 800bb46:	60a2      	str	r2, [r4, #8]
 800bb48:	6123      	str	r3, [r4, #16]
 800bb4a:	7561      	strb	r1, [r4, #21]
 800bb4c:	7da0      	ldrb	r0, [r4, #22]
 800bb4e:	f080 0001 	eor.w	r0, r0, #1
 800bb52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb56:	881b      	ldrh	r3, [r3, #0]
 800bb58:	802b      	strh	r3, [r5, #0]
 800bb5a:	e7ef      	b.n	800bb3c <ucdr_deserialize_int16_t+0x90>
 800bb5c:	68a2      	ldr	r2, [r4, #8]
 800bb5e:	6923      	ldr	r3, [r4, #16]
 800bb60:	7da0      	ldrb	r0, [r4, #22]
 800bb62:	f884 8015 	strb.w	r8, [r4, #21]
 800bb66:	1b92      	subs	r2, r2, r6
 800bb68:	1b9b      	subs	r3, r3, r6
 800bb6a:	60a2      	str	r2, [r4, #8]
 800bb6c:	6123      	str	r3, [r4, #16]
 800bb6e:	f080 0001 	eor.w	r0, r0, #1
 800bb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb76:	68a3      	ldr	r3, [r4, #8]
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	706b      	strb	r3, [r5, #1]
 800bb7c:	e7c2      	b.n	800bb04 <ucdr_deserialize_int16_t+0x58>
 800bb7e:	4639      	mov	r1, r7
 800bb80:	4632      	mov	r2, r6
 800bb82:	4628      	mov	r0, r5
 800bb84:	f00d ff57 	bl	8019a36 <memcpy>
 800bb88:	68a1      	ldr	r1, [r4, #8]
 800bb8a:	464a      	mov	r2, r9
 800bb8c:	19a8      	adds	r0, r5, r6
 800bb8e:	f00d ff52 	bl	8019a36 <memcpy>
 800bb92:	e7b7      	b.n	800bb04 <ucdr_deserialize_int16_t+0x58>

0800bb94 <ucdr_serialize_int32_t>:
 800bb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb98:	b082      	sub	sp, #8
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	9101      	str	r1, [sp, #4]
 800bb9e:	2104      	movs	r1, #4
 800bba0:	f000 fcb6 	bl	800c510 <ucdr_buffer_alignment>
 800bba4:	4601      	mov	r1, r0
 800bba6:	4620      	mov	r0, r4
 800bba8:	7d67      	ldrb	r7, [r4, #21]
 800bbaa:	f000 fcf5 	bl	800c598 <ucdr_advance_buffer>
 800bbae:	2104      	movs	r1, #4
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f000 fc4d 	bl	800c450 <ucdr_check_buffer_available_for>
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	d139      	bne.n	800bc2e <ucdr_serialize_int32_t+0x9a>
 800bbba:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bbbe:	42ab      	cmp	r3, r5
 800bbc0:	d930      	bls.n	800bc24 <ucdr_serialize_int32_t+0x90>
 800bbc2:	1b5e      	subs	r6, r3, r5
 800bbc4:	60a3      	str	r3, [r4, #8]
 800bbc6:	6923      	ldr	r3, [r4, #16]
 800bbc8:	f1c6 0804 	rsb	r8, r6, #4
 800bbcc:	4433      	add	r3, r6
 800bbce:	6123      	str	r3, [r4, #16]
 800bbd0:	4641      	mov	r1, r8
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f000 fc48 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d04c      	beq.n	800bc76 <ucdr_serialize_int32_t+0xe2>
 800bbdc:	7d23      	ldrb	r3, [r4, #20]
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d063      	beq.n	800bcaa <ucdr_serialize_int32_t+0x116>
 800bbe2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bbe6:	702b      	strb	r3, [r5, #0]
 800bbe8:	2e00      	cmp	r6, #0
 800bbea:	d051      	beq.n	800bc90 <ucdr_serialize_int32_t+0xfc>
 800bbec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bbf0:	706b      	strb	r3, [r5, #1]
 800bbf2:	2e01      	cmp	r6, #1
 800bbf4:	d050      	beq.n	800bc98 <ucdr_serialize_int32_t+0x104>
 800bbf6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bbfa:	70ab      	strb	r3, [r5, #2]
 800bbfc:	2e02      	cmp	r6, #2
 800bbfe:	d04f      	beq.n	800bca0 <ucdr_serialize_int32_t+0x10c>
 800bc00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bc04:	70eb      	strb	r3, [r5, #3]
 800bc06:	6923      	ldr	r3, [r4, #16]
 800bc08:	68a2      	ldr	r2, [r4, #8]
 800bc0a:	7da0      	ldrb	r0, [r4, #22]
 800bc0c:	3304      	adds	r3, #4
 800bc0e:	1b9e      	subs	r6, r3, r6
 800bc10:	4442      	add	r2, r8
 800bc12:	2304      	movs	r3, #4
 800bc14:	f080 0001 	eor.w	r0, r0, #1
 800bc18:	60a2      	str	r2, [r4, #8]
 800bc1a:	6126      	str	r6, [r4, #16]
 800bc1c:	7563      	strb	r3, [r4, #21]
 800bc1e:	b002      	add	sp, #8
 800bc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc24:	2104      	movs	r1, #4
 800bc26:	4620      	mov	r0, r4
 800bc28:	f000 fc1e 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800bc2c:	b1d0      	cbz	r0, 800bc64 <ucdr_serialize_int32_t+0xd0>
 800bc2e:	7d23      	ldrb	r3, [r4, #20]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	68a3      	ldr	r3, [r4, #8]
 800bc34:	d01c      	beq.n	800bc70 <ucdr_serialize_int32_t+0xdc>
 800bc36:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bc3a:	701a      	strb	r2, [r3, #0]
 800bc3c:	68a3      	ldr	r3, [r4, #8]
 800bc3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bc42:	705a      	strb	r2, [r3, #1]
 800bc44:	68a3      	ldr	r3, [r4, #8]
 800bc46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bc4a:	709a      	strb	r2, [r3, #2]
 800bc4c:	68a3      	ldr	r3, [r4, #8]
 800bc4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bc52:	70da      	strb	r2, [r3, #3]
 800bc54:	68a2      	ldr	r2, [r4, #8]
 800bc56:	6923      	ldr	r3, [r4, #16]
 800bc58:	3204      	adds	r2, #4
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	2104      	movs	r1, #4
 800bc5e:	60a2      	str	r2, [r4, #8]
 800bc60:	6123      	str	r3, [r4, #16]
 800bc62:	7561      	strb	r1, [r4, #21]
 800bc64:	7da0      	ldrb	r0, [r4, #22]
 800bc66:	f080 0001 	eor.w	r0, r0, #1
 800bc6a:	b002      	add	sp, #8
 800bc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc70:	9a01      	ldr	r2, [sp, #4]
 800bc72:	601a      	str	r2, [r3, #0]
 800bc74:	e7ee      	b.n	800bc54 <ucdr_serialize_int32_t+0xc0>
 800bc76:	68a2      	ldr	r2, [r4, #8]
 800bc78:	6923      	ldr	r3, [r4, #16]
 800bc7a:	7da0      	ldrb	r0, [r4, #22]
 800bc7c:	7567      	strb	r7, [r4, #21]
 800bc7e:	1b92      	subs	r2, r2, r6
 800bc80:	1b9b      	subs	r3, r3, r6
 800bc82:	f080 0001 	eor.w	r0, r0, #1
 800bc86:	60a2      	str	r2, [r4, #8]
 800bc88:	6123      	str	r3, [r4, #16]
 800bc8a:	b002      	add	sp, #8
 800bc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc90:	68a3      	ldr	r3, [r4, #8]
 800bc92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bc96:	701a      	strb	r2, [r3, #0]
 800bc98:	68a3      	ldr	r3, [r4, #8]
 800bc9a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bc9e:	701a      	strb	r2, [r3, #0]
 800bca0:	68a3      	ldr	r3, [r4, #8]
 800bca2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bca6:	701a      	strb	r2, [r3, #0]
 800bca8:	e7ad      	b.n	800bc06 <ucdr_serialize_int32_t+0x72>
 800bcaa:	4628      	mov	r0, r5
 800bcac:	ad01      	add	r5, sp, #4
 800bcae:	4629      	mov	r1, r5
 800bcb0:	4632      	mov	r2, r6
 800bcb2:	f00d fec0 	bl	8019a36 <memcpy>
 800bcb6:	68a0      	ldr	r0, [r4, #8]
 800bcb8:	4642      	mov	r2, r8
 800bcba:	19a9      	adds	r1, r5, r6
 800bcbc:	f00d febb 	bl	8019a36 <memcpy>
 800bcc0:	e7a1      	b.n	800bc06 <ucdr_serialize_int32_t+0x72>
 800bcc2:	bf00      	nop

0800bcc4 <ucdr_deserialize_int32_t>:
 800bcc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcc8:	460d      	mov	r5, r1
 800bcca:	2104      	movs	r1, #4
 800bccc:	4604      	mov	r4, r0
 800bcce:	f000 fc1f 	bl	800c510 <ucdr_buffer_alignment>
 800bcd2:	4601      	mov	r1, r0
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bcda:	f000 fc5d 	bl	800c598 <ucdr_advance_buffer>
 800bcde:	2104      	movs	r1, #4
 800bce0:	4620      	mov	r0, r4
 800bce2:	f000 fbb5 	bl	800c450 <ucdr_check_buffer_available_for>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d138      	bne.n	800bd5c <ucdr_deserialize_int32_t+0x98>
 800bcea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bcee:	42b7      	cmp	r7, r6
 800bcf0:	d92f      	bls.n	800bd52 <ucdr_deserialize_int32_t+0x8e>
 800bcf2:	6923      	ldr	r3, [r4, #16]
 800bcf4:	60a7      	str	r7, [r4, #8]
 800bcf6:	1bbf      	subs	r7, r7, r6
 800bcf8:	443b      	add	r3, r7
 800bcfa:	f1c7 0904 	rsb	r9, r7, #4
 800bcfe:	6123      	str	r3, [r4, #16]
 800bd00:	4649      	mov	r1, r9
 800bd02:	4620      	mov	r0, r4
 800bd04:	f000 fbb0 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	d046      	beq.n	800bd9a <ucdr_deserialize_int32_t+0xd6>
 800bd0c:	7d23      	ldrb	r3, [r4, #20]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d05c      	beq.n	800bdcc <ucdr_deserialize_int32_t+0x108>
 800bd12:	78f3      	ldrb	r3, [r6, #3]
 800bd14:	702b      	strb	r3, [r5, #0]
 800bd16:	2f00      	cmp	r7, #0
 800bd18:	d04c      	beq.n	800bdb4 <ucdr_deserialize_int32_t+0xf0>
 800bd1a:	78b3      	ldrb	r3, [r6, #2]
 800bd1c:	706b      	strb	r3, [r5, #1]
 800bd1e:	2f01      	cmp	r7, #1
 800bd20:	f105 0302 	add.w	r3, r5, #2
 800bd24:	d04a      	beq.n	800bdbc <ucdr_deserialize_int32_t+0xf8>
 800bd26:	7873      	ldrb	r3, [r6, #1]
 800bd28:	70ab      	strb	r3, [r5, #2]
 800bd2a:	2f02      	cmp	r7, #2
 800bd2c:	f105 0303 	add.w	r3, r5, #3
 800bd30:	d048      	beq.n	800bdc4 <ucdr_deserialize_int32_t+0x100>
 800bd32:	7833      	ldrb	r3, [r6, #0]
 800bd34:	70eb      	strb	r3, [r5, #3]
 800bd36:	6923      	ldr	r3, [r4, #16]
 800bd38:	68a2      	ldr	r2, [r4, #8]
 800bd3a:	7da0      	ldrb	r0, [r4, #22]
 800bd3c:	2104      	movs	r1, #4
 800bd3e:	3304      	adds	r3, #4
 800bd40:	444a      	add	r2, r9
 800bd42:	1bdb      	subs	r3, r3, r7
 800bd44:	7561      	strb	r1, [r4, #21]
 800bd46:	60a2      	str	r2, [r4, #8]
 800bd48:	6123      	str	r3, [r4, #16]
 800bd4a:	f080 0001 	eor.w	r0, r0, #1
 800bd4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd52:	2104      	movs	r1, #4
 800bd54:	4620      	mov	r0, r4
 800bd56:	f000 fb87 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800bd5a:	b1b0      	cbz	r0, 800bd8a <ucdr_deserialize_int32_t+0xc6>
 800bd5c:	7d23      	ldrb	r3, [r4, #20]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	68a3      	ldr	r3, [r4, #8]
 800bd62:	d017      	beq.n	800bd94 <ucdr_deserialize_int32_t+0xd0>
 800bd64:	78db      	ldrb	r3, [r3, #3]
 800bd66:	702b      	strb	r3, [r5, #0]
 800bd68:	68a3      	ldr	r3, [r4, #8]
 800bd6a:	789b      	ldrb	r3, [r3, #2]
 800bd6c:	706b      	strb	r3, [r5, #1]
 800bd6e:	68a3      	ldr	r3, [r4, #8]
 800bd70:	785b      	ldrb	r3, [r3, #1]
 800bd72:	70ab      	strb	r3, [r5, #2]
 800bd74:	68a3      	ldr	r3, [r4, #8]
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	70eb      	strb	r3, [r5, #3]
 800bd7a:	68a2      	ldr	r2, [r4, #8]
 800bd7c:	6923      	ldr	r3, [r4, #16]
 800bd7e:	3204      	adds	r2, #4
 800bd80:	3304      	adds	r3, #4
 800bd82:	2104      	movs	r1, #4
 800bd84:	60a2      	str	r2, [r4, #8]
 800bd86:	6123      	str	r3, [r4, #16]
 800bd88:	7561      	strb	r1, [r4, #21]
 800bd8a:	7da0      	ldrb	r0, [r4, #22]
 800bd8c:	f080 0001 	eor.w	r0, r0, #1
 800bd90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	602b      	str	r3, [r5, #0]
 800bd98:	e7ef      	b.n	800bd7a <ucdr_deserialize_int32_t+0xb6>
 800bd9a:	68a2      	ldr	r2, [r4, #8]
 800bd9c:	6923      	ldr	r3, [r4, #16]
 800bd9e:	7da0      	ldrb	r0, [r4, #22]
 800bda0:	f884 8015 	strb.w	r8, [r4, #21]
 800bda4:	1bd2      	subs	r2, r2, r7
 800bda6:	1bdb      	subs	r3, r3, r7
 800bda8:	60a2      	str	r2, [r4, #8]
 800bdaa:	6123      	str	r3, [r4, #16]
 800bdac:	f080 0001 	eor.w	r0, r0, #1
 800bdb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdb4:	68a3      	ldr	r3, [r4, #8]
 800bdb6:	789b      	ldrb	r3, [r3, #2]
 800bdb8:	706b      	strb	r3, [r5, #1]
 800bdba:	1cab      	adds	r3, r5, #2
 800bdbc:	68a2      	ldr	r2, [r4, #8]
 800bdbe:	7852      	ldrb	r2, [r2, #1]
 800bdc0:	f803 2b01 	strb.w	r2, [r3], #1
 800bdc4:	68a2      	ldr	r2, [r4, #8]
 800bdc6:	7812      	ldrb	r2, [r2, #0]
 800bdc8:	701a      	strb	r2, [r3, #0]
 800bdca:	e7b4      	b.n	800bd36 <ucdr_deserialize_int32_t+0x72>
 800bdcc:	4631      	mov	r1, r6
 800bdce:	463a      	mov	r2, r7
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	f00d fe30 	bl	8019a36 <memcpy>
 800bdd6:	68a1      	ldr	r1, [r4, #8]
 800bdd8:	464a      	mov	r2, r9
 800bdda:	19e8      	adds	r0, r5, r7
 800bddc:	f00d fe2b 	bl	8019a36 <memcpy>
 800bde0:	e7a9      	b.n	800bd36 <ucdr_deserialize_int32_t+0x72>
 800bde2:	bf00      	nop

0800bde4 <ucdr_serialize_double>:
 800bde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bde8:	2108      	movs	r1, #8
 800bdea:	b082      	sub	sp, #8
 800bdec:	4604      	mov	r4, r0
 800bdee:	ed8d 0b00 	vstr	d0, [sp]
 800bdf2:	f000 fb8d 	bl	800c510 <ucdr_buffer_alignment>
 800bdf6:	4601      	mov	r1, r0
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	7d67      	ldrb	r7, [r4, #21]
 800bdfc:	f000 fbcc 	bl	800c598 <ucdr_advance_buffer>
 800be00:	2108      	movs	r1, #8
 800be02:	4620      	mov	r0, r4
 800be04:	f000 fb24 	bl	800c450 <ucdr_check_buffer_available_for>
 800be08:	2800      	cmp	r0, #0
 800be0a:	d14e      	bne.n	800beaa <ucdr_serialize_double+0xc6>
 800be0c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800be10:	42ab      	cmp	r3, r5
 800be12:	d945      	bls.n	800bea0 <ucdr_serialize_double+0xbc>
 800be14:	1b5e      	subs	r6, r3, r5
 800be16:	60a3      	str	r3, [r4, #8]
 800be18:	6923      	ldr	r3, [r4, #16]
 800be1a:	f1c6 0808 	rsb	r8, r6, #8
 800be1e:	4433      	add	r3, r6
 800be20:	6123      	str	r3, [r4, #16]
 800be22:	4641      	mov	r1, r8
 800be24:	4620      	mov	r0, r4
 800be26:	f000 fb1f 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d074      	beq.n	800bf18 <ucdr_serialize_double+0x134>
 800be2e:	7d23      	ldrb	r3, [r4, #20]
 800be30:	2b01      	cmp	r3, #1
 800be32:	f000 809b 	beq.w	800bf6c <ucdr_serialize_double+0x188>
 800be36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800be3a:	702b      	strb	r3, [r5, #0]
 800be3c:	2e00      	cmp	r6, #0
 800be3e:	d078      	beq.n	800bf32 <ucdr_serialize_double+0x14e>
 800be40:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800be44:	706b      	strb	r3, [r5, #1]
 800be46:	2e01      	cmp	r6, #1
 800be48:	d077      	beq.n	800bf3a <ucdr_serialize_double+0x156>
 800be4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800be4e:	70ab      	strb	r3, [r5, #2]
 800be50:	2e02      	cmp	r6, #2
 800be52:	d076      	beq.n	800bf42 <ucdr_serialize_double+0x15e>
 800be54:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800be58:	70eb      	strb	r3, [r5, #3]
 800be5a:	2e03      	cmp	r6, #3
 800be5c:	d075      	beq.n	800bf4a <ucdr_serialize_double+0x166>
 800be5e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800be62:	712b      	strb	r3, [r5, #4]
 800be64:	2e04      	cmp	r6, #4
 800be66:	d074      	beq.n	800bf52 <ucdr_serialize_double+0x16e>
 800be68:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800be6c:	716b      	strb	r3, [r5, #5]
 800be6e:	2e05      	cmp	r6, #5
 800be70:	d073      	beq.n	800bf5a <ucdr_serialize_double+0x176>
 800be72:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800be76:	71ab      	strb	r3, [r5, #6]
 800be78:	2e06      	cmp	r6, #6
 800be7a:	d072      	beq.n	800bf62 <ucdr_serialize_double+0x17e>
 800be7c:	f89d 3000 	ldrb.w	r3, [sp]
 800be80:	71eb      	strb	r3, [r5, #7]
 800be82:	6923      	ldr	r3, [r4, #16]
 800be84:	68a2      	ldr	r2, [r4, #8]
 800be86:	7da0      	ldrb	r0, [r4, #22]
 800be88:	3308      	adds	r3, #8
 800be8a:	1b9e      	subs	r6, r3, r6
 800be8c:	4442      	add	r2, r8
 800be8e:	2308      	movs	r3, #8
 800be90:	f080 0001 	eor.w	r0, r0, #1
 800be94:	60a2      	str	r2, [r4, #8]
 800be96:	6126      	str	r6, [r4, #16]
 800be98:	7563      	strb	r3, [r4, #21]
 800be9a:	b002      	add	sp, #8
 800be9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bea0:	2108      	movs	r1, #8
 800bea2:	4620      	mov	r0, r4
 800bea4:	f000 fae0 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800bea8:	b350      	cbz	r0, 800bf00 <ucdr_serialize_double+0x11c>
 800beaa:	7d23      	ldrb	r3, [r4, #20]
 800beac:	2b01      	cmp	r3, #1
 800beae:	d02d      	beq.n	800bf0c <ucdr_serialize_double+0x128>
 800beb0:	68a3      	ldr	r3, [r4, #8]
 800beb2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800beb6:	701a      	strb	r2, [r3, #0]
 800beb8:	68a3      	ldr	r3, [r4, #8]
 800beba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bebe:	705a      	strb	r2, [r3, #1]
 800bec0:	68a3      	ldr	r3, [r4, #8]
 800bec2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bec6:	709a      	strb	r2, [r3, #2]
 800bec8:	68a3      	ldr	r3, [r4, #8]
 800beca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bece:	70da      	strb	r2, [r3, #3]
 800bed0:	68a3      	ldr	r3, [r4, #8]
 800bed2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bed6:	711a      	strb	r2, [r3, #4]
 800bed8:	68a3      	ldr	r3, [r4, #8]
 800beda:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bede:	715a      	strb	r2, [r3, #5]
 800bee0:	68a3      	ldr	r3, [r4, #8]
 800bee2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bee6:	719a      	strb	r2, [r3, #6]
 800bee8:	68a3      	ldr	r3, [r4, #8]
 800beea:	f89d 2000 	ldrb.w	r2, [sp]
 800beee:	71da      	strb	r2, [r3, #7]
 800bef0:	68a2      	ldr	r2, [r4, #8]
 800bef2:	6923      	ldr	r3, [r4, #16]
 800bef4:	3208      	adds	r2, #8
 800bef6:	3308      	adds	r3, #8
 800bef8:	2108      	movs	r1, #8
 800befa:	60a2      	str	r2, [r4, #8]
 800befc:	6123      	str	r3, [r4, #16]
 800befe:	7561      	strb	r1, [r4, #21]
 800bf00:	7da0      	ldrb	r0, [r4, #22]
 800bf02:	f080 0001 	eor.w	r0, r0, #1
 800bf06:	b002      	add	sp, #8
 800bf08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf0c:	466b      	mov	r3, sp
 800bf0e:	cb03      	ldmia	r3!, {r0, r1}
 800bf10:	68a3      	ldr	r3, [r4, #8]
 800bf12:	6018      	str	r0, [r3, #0]
 800bf14:	6059      	str	r1, [r3, #4]
 800bf16:	e7eb      	b.n	800bef0 <ucdr_serialize_double+0x10c>
 800bf18:	68a2      	ldr	r2, [r4, #8]
 800bf1a:	6923      	ldr	r3, [r4, #16]
 800bf1c:	7da0      	ldrb	r0, [r4, #22]
 800bf1e:	7567      	strb	r7, [r4, #21]
 800bf20:	1b92      	subs	r2, r2, r6
 800bf22:	1b9b      	subs	r3, r3, r6
 800bf24:	f080 0001 	eor.w	r0, r0, #1
 800bf28:	60a2      	str	r2, [r4, #8]
 800bf2a:	6123      	str	r3, [r4, #16]
 800bf2c:	b002      	add	sp, #8
 800bf2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf32:	68a3      	ldr	r3, [r4, #8]
 800bf34:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf38:	701a      	strb	r2, [r3, #0]
 800bf3a:	68a3      	ldr	r3, [r4, #8]
 800bf3c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bf40:	701a      	strb	r2, [r3, #0]
 800bf42:	68a3      	ldr	r3, [r4, #8]
 800bf44:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bf48:	701a      	strb	r2, [r3, #0]
 800bf4a:	68a3      	ldr	r3, [r4, #8]
 800bf4c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bf50:	701a      	strb	r2, [r3, #0]
 800bf52:	68a3      	ldr	r3, [r4, #8]
 800bf54:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bf58:	701a      	strb	r2, [r3, #0]
 800bf5a:	68a3      	ldr	r3, [r4, #8]
 800bf5c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bf60:	701a      	strb	r2, [r3, #0]
 800bf62:	68a3      	ldr	r3, [r4, #8]
 800bf64:	f89d 2000 	ldrb.w	r2, [sp]
 800bf68:	701a      	strb	r2, [r3, #0]
 800bf6a:	e78a      	b.n	800be82 <ucdr_serialize_double+0x9e>
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	466d      	mov	r5, sp
 800bf70:	4629      	mov	r1, r5
 800bf72:	4632      	mov	r2, r6
 800bf74:	f00d fd5f 	bl	8019a36 <memcpy>
 800bf78:	68a0      	ldr	r0, [r4, #8]
 800bf7a:	4642      	mov	r2, r8
 800bf7c:	19a9      	adds	r1, r5, r6
 800bf7e:	f00d fd5a 	bl	8019a36 <memcpy>
 800bf82:	e77e      	b.n	800be82 <ucdr_serialize_double+0x9e>

0800bf84 <ucdr_serialize_endian_double>:
 800bf84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf88:	460e      	mov	r6, r1
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	2108      	movs	r1, #8
 800bf8e:	4604      	mov	r4, r0
 800bf90:	ed8d 0b00 	vstr	d0, [sp]
 800bf94:	f000 fabc 	bl	800c510 <ucdr_buffer_alignment>
 800bf98:	4601      	mov	r1, r0
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bfa0:	f000 fafa 	bl	800c598 <ucdr_advance_buffer>
 800bfa4:	2108      	movs	r1, #8
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f000 fa52 	bl	800c450 <ucdr_check_buffer_available_for>
 800bfac:	2800      	cmp	r0, #0
 800bfae:	d14d      	bne.n	800c04c <ucdr_serialize_endian_double+0xc8>
 800bfb0:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800bfb4:	42bd      	cmp	r5, r7
 800bfb6:	d944      	bls.n	800c042 <ucdr_serialize_endian_double+0xbe>
 800bfb8:	6923      	ldr	r3, [r4, #16]
 800bfba:	60a5      	str	r5, [r4, #8]
 800bfbc:	1bed      	subs	r5, r5, r7
 800bfbe:	442b      	add	r3, r5
 800bfc0:	f1c5 0908 	rsb	r9, r5, #8
 800bfc4:	6123      	str	r3, [r4, #16]
 800bfc6:	4649      	mov	r1, r9
 800bfc8:	4620      	mov	r0, r4
 800bfca:	f000 fa4d 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d072      	beq.n	800c0b8 <ucdr_serialize_endian_double+0x134>
 800bfd2:	2e01      	cmp	r6, #1
 800bfd4:	f000 809b 	beq.w	800c10e <ucdr_serialize_endian_double+0x18a>
 800bfd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bfdc:	703b      	strb	r3, [r7, #0]
 800bfde:	2d00      	cmp	r5, #0
 800bfe0:	d078      	beq.n	800c0d4 <ucdr_serialize_endian_double+0x150>
 800bfe2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bfe6:	707b      	strb	r3, [r7, #1]
 800bfe8:	2d01      	cmp	r5, #1
 800bfea:	d077      	beq.n	800c0dc <ucdr_serialize_endian_double+0x158>
 800bfec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bff0:	70bb      	strb	r3, [r7, #2]
 800bff2:	2d02      	cmp	r5, #2
 800bff4:	d076      	beq.n	800c0e4 <ucdr_serialize_endian_double+0x160>
 800bff6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bffa:	70fb      	strb	r3, [r7, #3]
 800bffc:	2d03      	cmp	r5, #3
 800bffe:	d075      	beq.n	800c0ec <ucdr_serialize_endian_double+0x168>
 800c000:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c004:	713b      	strb	r3, [r7, #4]
 800c006:	2d04      	cmp	r5, #4
 800c008:	d074      	beq.n	800c0f4 <ucdr_serialize_endian_double+0x170>
 800c00a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c00e:	717b      	strb	r3, [r7, #5]
 800c010:	2d05      	cmp	r5, #5
 800c012:	d073      	beq.n	800c0fc <ucdr_serialize_endian_double+0x178>
 800c014:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c018:	71bb      	strb	r3, [r7, #6]
 800c01a:	2d06      	cmp	r5, #6
 800c01c:	d072      	beq.n	800c104 <ucdr_serialize_endian_double+0x180>
 800c01e:	f89d 3000 	ldrb.w	r3, [sp]
 800c022:	71fb      	strb	r3, [r7, #7]
 800c024:	6923      	ldr	r3, [r4, #16]
 800c026:	68a2      	ldr	r2, [r4, #8]
 800c028:	7da0      	ldrb	r0, [r4, #22]
 800c02a:	3308      	adds	r3, #8
 800c02c:	1b5d      	subs	r5, r3, r5
 800c02e:	444a      	add	r2, r9
 800c030:	2308      	movs	r3, #8
 800c032:	f080 0001 	eor.w	r0, r0, #1
 800c036:	60a2      	str	r2, [r4, #8]
 800c038:	6125      	str	r5, [r4, #16]
 800c03a:	7563      	strb	r3, [r4, #21]
 800c03c:	b003      	add	sp, #12
 800c03e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c042:	2108      	movs	r1, #8
 800c044:	4620      	mov	r0, r4
 800c046:	f000 fa0f 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800c04a:	b348      	cbz	r0, 800c0a0 <ucdr_serialize_endian_double+0x11c>
 800c04c:	2e01      	cmp	r6, #1
 800c04e:	d02d      	beq.n	800c0ac <ucdr_serialize_endian_double+0x128>
 800c050:	68a3      	ldr	r3, [r4, #8]
 800c052:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c056:	701a      	strb	r2, [r3, #0]
 800c058:	68a3      	ldr	r3, [r4, #8]
 800c05a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c05e:	705a      	strb	r2, [r3, #1]
 800c060:	68a3      	ldr	r3, [r4, #8]
 800c062:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c066:	709a      	strb	r2, [r3, #2]
 800c068:	68a3      	ldr	r3, [r4, #8]
 800c06a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c06e:	70da      	strb	r2, [r3, #3]
 800c070:	68a3      	ldr	r3, [r4, #8]
 800c072:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c076:	711a      	strb	r2, [r3, #4]
 800c078:	68a3      	ldr	r3, [r4, #8]
 800c07a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c07e:	715a      	strb	r2, [r3, #5]
 800c080:	68a3      	ldr	r3, [r4, #8]
 800c082:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c086:	719a      	strb	r2, [r3, #6]
 800c088:	68a3      	ldr	r3, [r4, #8]
 800c08a:	f89d 2000 	ldrb.w	r2, [sp]
 800c08e:	71da      	strb	r2, [r3, #7]
 800c090:	68a2      	ldr	r2, [r4, #8]
 800c092:	6923      	ldr	r3, [r4, #16]
 800c094:	3208      	adds	r2, #8
 800c096:	3308      	adds	r3, #8
 800c098:	2108      	movs	r1, #8
 800c09a:	60a2      	str	r2, [r4, #8]
 800c09c:	6123      	str	r3, [r4, #16]
 800c09e:	7561      	strb	r1, [r4, #21]
 800c0a0:	7da0      	ldrb	r0, [r4, #22]
 800c0a2:	f080 0001 	eor.w	r0, r0, #1
 800c0a6:	b003      	add	sp, #12
 800c0a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0ac:	466b      	mov	r3, sp
 800c0ae:	cb03      	ldmia	r3!, {r0, r1}
 800c0b0:	68a3      	ldr	r3, [r4, #8]
 800c0b2:	6018      	str	r0, [r3, #0]
 800c0b4:	6059      	str	r1, [r3, #4]
 800c0b6:	e7eb      	b.n	800c090 <ucdr_serialize_endian_double+0x10c>
 800c0b8:	68a2      	ldr	r2, [r4, #8]
 800c0ba:	6923      	ldr	r3, [r4, #16]
 800c0bc:	7da0      	ldrb	r0, [r4, #22]
 800c0be:	f884 8015 	strb.w	r8, [r4, #21]
 800c0c2:	1b52      	subs	r2, r2, r5
 800c0c4:	1b5b      	subs	r3, r3, r5
 800c0c6:	f080 0001 	eor.w	r0, r0, #1
 800c0ca:	60a2      	str	r2, [r4, #8]
 800c0cc:	6123      	str	r3, [r4, #16]
 800c0ce:	b003      	add	sp, #12
 800c0d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0d4:	68a3      	ldr	r3, [r4, #8]
 800c0d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c0da:	701a      	strb	r2, [r3, #0]
 800c0dc:	68a3      	ldr	r3, [r4, #8]
 800c0de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c0e2:	701a      	strb	r2, [r3, #0]
 800c0e4:	68a3      	ldr	r3, [r4, #8]
 800c0e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c0ea:	701a      	strb	r2, [r3, #0]
 800c0ec:	68a3      	ldr	r3, [r4, #8]
 800c0ee:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c0f2:	701a      	strb	r2, [r3, #0]
 800c0f4:	68a3      	ldr	r3, [r4, #8]
 800c0f6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c0fa:	701a      	strb	r2, [r3, #0]
 800c0fc:	68a3      	ldr	r3, [r4, #8]
 800c0fe:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c102:	701a      	strb	r2, [r3, #0]
 800c104:	68a3      	ldr	r3, [r4, #8]
 800c106:	f89d 2000 	ldrb.w	r2, [sp]
 800c10a:	701a      	strb	r2, [r3, #0]
 800c10c:	e78a      	b.n	800c024 <ucdr_serialize_endian_double+0xa0>
 800c10e:	466e      	mov	r6, sp
 800c110:	4631      	mov	r1, r6
 800c112:	462a      	mov	r2, r5
 800c114:	4638      	mov	r0, r7
 800c116:	f00d fc8e 	bl	8019a36 <memcpy>
 800c11a:	68a0      	ldr	r0, [r4, #8]
 800c11c:	464a      	mov	r2, r9
 800c11e:	1971      	adds	r1, r6, r5
 800c120:	f00d fc89 	bl	8019a36 <memcpy>
 800c124:	e77e      	b.n	800c024 <ucdr_serialize_endian_double+0xa0>
 800c126:	bf00      	nop

0800c128 <ucdr_deserialize_double>:
 800c128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c12c:	460d      	mov	r5, r1
 800c12e:	2108      	movs	r1, #8
 800c130:	4604      	mov	r4, r0
 800c132:	f000 f9ed 	bl	800c510 <ucdr_buffer_alignment>
 800c136:	4601      	mov	r1, r0
 800c138:	4620      	mov	r0, r4
 800c13a:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c13e:	f000 fa2b 	bl	800c598 <ucdr_advance_buffer>
 800c142:	2108      	movs	r1, #8
 800c144:	4620      	mov	r0, r4
 800c146:	f000 f983 	bl	800c450 <ucdr_check_buffer_available_for>
 800c14a:	2800      	cmp	r0, #0
 800c14c:	d151      	bne.n	800c1f2 <ucdr_deserialize_double+0xca>
 800c14e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c152:	42be      	cmp	r6, r7
 800c154:	d948      	bls.n	800c1e8 <ucdr_deserialize_double+0xc0>
 800c156:	6923      	ldr	r3, [r4, #16]
 800c158:	60a6      	str	r6, [r4, #8]
 800c15a:	1bf6      	subs	r6, r6, r7
 800c15c:	4433      	add	r3, r6
 800c15e:	f1c6 0808 	rsb	r8, r6, #8
 800c162:	6123      	str	r3, [r4, #16]
 800c164:	4641      	mov	r1, r8
 800c166:	4620      	mov	r0, r4
 800c168:	f000 f97e 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800c16c:	2800      	cmp	r0, #0
 800c16e:	d06d      	beq.n	800c24c <ucdr_deserialize_double+0x124>
 800c170:	7d23      	ldrb	r3, [r4, #20]
 800c172:	2b01      	cmp	r3, #1
 800c174:	f000 8093 	beq.w	800c29e <ucdr_deserialize_double+0x176>
 800c178:	79fb      	ldrb	r3, [r7, #7]
 800c17a:	702b      	strb	r3, [r5, #0]
 800c17c:	2e00      	cmp	r6, #0
 800c17e:	d072      	beq.n	800c266 <ucdr_deserialize_double+0x13e>
 800c180:	79bb      	ldrb	r3, [r7, #6]
 800c182:	706b      	strb	r3, [r5, #1]
 800c184:	2e01      	cmp	r6, #1
 800c186:	f105 0302 	add.w	r3, r5, #2
 800c18a:	d070      	beq.n	800c26e <ucdr_deserialize_double+0x146>
 800c18c:	797b      	ldrb	r3, [r7, #5]
 800c18e:	70ab      	strb	r3, [r5, #2]
 800c190:	2e02      	cmp	r6, #2
 800c192:	f105 0303 	add.w	r3, r5, #3
 800c196:	d06e      	beq.n	800c276 <ucdr_deserialize_double+0x14e>
 800c198:	793b      	ldrb	r3, [r7, #4]
 800c19a:	70eb      	strb	r3, [r5, #3]
 800c19c:	2e03      	cmp	r6, #3
 800c19e:	f105 0304 	add.w	r3, r5, #4
 800c1a2:	d06c      	beq.n	800c27e <ucdr_deserialize_double+0x156>
 800c1a4:	78fb      	ldrb	r3, [r7, #3]
 800c1a6:	712b      	strb	r3, [r5, #4]
 800c1a8:	2e04      	cmp	r6, #4
 800c1aa:	f105 0305 	add.w	r3, r5, #5
 800c1ae:	d06a      	beq.n	800c286 <ucdr_deserialize_double+0x15e>
 800c1b0:	78bb      	ldrb	r3, [r7, #2]
 800c1b2:	716b      	strb	r3, [r5, #5]
 800c1b4:	2e05      	cmp	r6, #5
 800c1b6:	f105 0306 	add.w	r3, r5, #6
 800c1ba:	d068      	beq.n	800c28e <ucdr_deserialize_double+0x166>
 800c1bc:	787b      	ldrb	r3, [r7, #1]
 800c1be:	71ab      	strb	r3, [r5, #6]
 800c1c0:	2e06      	cmp	r6, #6
 800c1c2:	f105 0307 	add.w	r3, r5, #7
 800c1c6:	d066      	beq.n	800c296 <ucdr_deserialize_double+0x16e>
 800c1c8:	783b      	ldrb	r3, [r7, #0]
 800c1ca:	71eb      	strb	r3, [r5, #7]
 800c1cc:	6923      	ldr	r3, [r4, #16]
 800c1ce:	68a2      	ldr	r2, [r4, #8]
 800c1d0:	7da0      	ldrb	r0, [r4, #22]
 800c1d2:	3308      	adds	r3, #8
 800c1d4:	1b9e      	subs	r6, r3, r6
 800c1d6:	2308      	movs	r3, #8
 800c1d8:	4442      	add	r2, r8
 800c1da:	7563      	strb	r3, [r4, #21]
 800c1dc:	60a2      	str	r2, [r4, #8]
 800c1de:	6126      	str	r6, [r4, #16]
 800c1e0:	f080 0001 	eor.w	r0, r0, #1
 800c1e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1e8:	2108      	movs	r1, #8
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	f000 f93c 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800c1f0:	b310      	cbz	r0, 800c238 <ucdr_deserialize_double+0x110>
 800c1f2:	7d23      	ldrb	r3, [r4, #20]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	68a3      	ldr	r3, [r4, #8]
 800c1f8:	d023      	beq.n	800c242 <ucdr_deserialize_double+0x11a>
 800c1fa:	79db      	ldrb	r3, [r3, #7]
 800c1fc:	702b      	strb	r3, [r5, #0]
 800c1fe:	68a3      	ldr	r3, [r4, #8]
 800c200:	799b      	ldrb	r3, [r3, #6]
 800c202:	706b      	strb	r3, [r5, #1]
 800c204:	68a3      	ldr	r3, [r4, #8]
 800c206:	795b      	ldrb	r3, [r3, #5]
 800c208:	70ab      	strb	r3, [r5, #2]
 800c20a:	68a3      	ldr	r3, [r4, #8]
 800c20c:	791b      	ldrb	r3, [r3, #4]
 800c20e:	70eb      	strb	r3, [r5, #3]
 800c210:	68a3      	ldr	r3, [r4, #8]
 800c212:	78db      	ldrb	r3, [r3, #3]
 800c214:	712b      	strb	r3, [r5, #4]
 800c216:	68a3      	ldr	r3, [r4, #8]
 800c218:	789b      	ldrb	r3, [r3, #2]
 800c21a:	716b      	strb	r3, [r5, #5]
 800c21c:	68a3      	ldr	r3, [r4, #8]
 800c21e:	785b      	ldrb	r3, [r3, #1]
 800c220:	71ab      	strb	r3, [r5, #6]
 800c222:	68a3      	ldr	r3, [r4, #8]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	71eb      	strb	r3, [r5, #7]
 800c228:	68a2      	ldr	r2, [r4, #8]
 800c22a:	6923      	ldr	r3, [r4, #16]
 800c22c:	3208      	adds	r2, #8
 800c22e:	3308      	adds	r3, #8
 800c230:	2108      	movs	r1, #8
 800c232:	60a2      	str	r2, [r4, #8]
 800c234:	6123      	str	r3, [r4, #16]
 800c236:	7561      	strb	r1, [r4, #21]
 800c238:	7da0      	ldrb	r0, [r4, #22]
 800c23a:	f080 0001 	eor.w	r0, r0, #1
 800c23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	606b      	str	r3, [r5, #4]
 800c248:	602a      	str	r2, [r5, #0]
 800c24a:	e7ed      	b.n	800c228 <ucdr_deserialize_double+0x100>
 800c24c:	68a2      	ldr	r2, [r4, #8]
 800c24e:	6923      	ldr	r3, [r4, #16]
 800c250:	7da0      	ldrb	r0, [r4, #22]
 800c252:	f884 9015 	strb.w	r9, [r4, #21]
 800c256:	1b92      	subs	r2, r2, r6
 800c258:	1b9b      	subs	r3, r3, r6
 800c25a:	60a2      	str	r2, [r4, #8]
 800c25c:	6123      	str	r3, [r4, #16]
 800c25e:	f080 0001 	eor.w	r0, r0, #1
 800c262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c266:	68a3      	ldr	r3, [r4, #8]
 800c268:	799b      	ldrb	r3, [r3, #6]
 800c26a:	706b      	strb	r3, [r5, #1]
 800c26c:	1cab      	adds	r3, r5, #2
 800c26e:	68a2      	ldr	r2, [r4, #8]
 800c270:	7952      	ldrb	r2, [r2, #5]
 800c272:	f803 2b01 	strb.w	r2, [r3], #1
 800c276:	68a2      	ldr	r2, [r4, #8]
 800c278:	7912      	ldrb	r2, [r2, #4]
 800c27a:	f803 2b01 	strb.w	r2, [r3], #1
 800c27e:	68a2      	ldr	r2, [r4, #8]
 800c280:	78d2      	ldrb	r2, [r2, #3]
 800c282:	f803 2b01 	strb.w	r2, [r3], #1
 800c286:	68a2      	ldr	r2, [r4, #8]
 800c288:	7892      	ldrb	r2, [r2, #2]
 800c28a:	f803 2b01 	strb.w	r2, [r3], #1
 800c28e:	68a2      	ldr	r2, [r4, #8]
 800c290:	7852      	ldrb	r2, [r2, #1]
 800c292:	f803 2b01 	strb.w	r2, [r3], #1
 800c296:	68a2      	ldr	r2, [r4, #8]
 800c298:	7812      	ldrb	r2, [r2, #0]
 800c29a:	701a      	strb	r2, [r3, #0]
 800c29c:	e796      	b.n	800c1cc <ucdr_deserialize_double+0xa4>
 800c29e:	4639      	mov	r1, r7
 800c2a0:	4632      	mov	r2, r6
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	f00d fbc7 	bl	8019a36 <memcpy>
 800c2a8:	68a1      	ldr	r1, [r4, #8]
 800c2aa:	4642      	mov	r2, r8
 800c2ac:	19a8      	adds	r0, r5, r6
 800c2ae:	f00d fbc2 	bl	8019a36 <memcpy>
 800c2b2:	e78b      	b.n	800c1cc <ucdr_deserialize_double+0xa4>

0800c2b4 <ucdr_deserialize_endian_double>:
 800c2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2b8:	460f      	mov	r7, r1
 800c2ba:	2108      	movs	r1, #8
 800c2bc:	4604      	mov	r4, r0
 800c2be:	4615      	mov	r5, r2
 800c2c0:	f000 f926 	bl	800c510 <ucdr_buffer_alignment>
 800c2c4:	4601      	mov	r1, r0
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c2cc:	f000 f964 	bl	800c598 <ucdr_advance_buffer>
 800c2d0:	2108      	movs	r1, #8
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f000 f8bc 	bl	800c450 <ucdr_check_buffer_available_for>
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	d159      	bne.n	800c390 <ucdr_deserialize_endian_double+0xdc>
 800c2dc:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800c2e0:	4546      	cmp	r6, r8
 800c2e2:	d950      	bls.n	800c386 <ucdr_deserialize_endian_double+0xd2>
 800c2e4:	6923      	ldr	r3, [r4, #16]
 800c2e6:	60a6      	str	r6, [r4, #8]
 800c2e8:	eba6 0608 	sub.w	r6, r6, r8
 800c2ec:	4433      	add	r3, r6
 800c2ee:	f1c6 0a08 	rsb	sl, r6, #8
 800c2f2:	6123      	str	r3, [r4, #16]
 800c2f4:	4651      	mov	r1, sl
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	f000 f8b6 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	d073      	beq.n	800c3e8 <ucdr_deserialize_endian_double+0x134>
 800c300:	2f01      	cmp	r7, #1
 800c302:	f000 809a 	beq.w	800c43a <ucdr_deserialize_endian_double+0x186>
 800c306:	f898 3007 	ldrb.w	r3, [r8, #7]
 800c30a:	702b      	strb	r3, [r5, #0]
 800c30c:	2e00      	cmp	r6, #0
 800c30e:	d078      	beq.n	800c402 <ucdr_deserialize_endian_double+0x14e>
 800c310:	f898 3006 	ldrb.w	r3, [r8, #6]
 800c314:	706b      	strb	r3, [r5, #1]
 800c316:	2e01      	cmp	r6, #1
 800c318:	f105 0302 	add.w	r3, r5, #2
 800c31c:	d075      	beq.n	800c40a <ucdr_deserialize_endian_double+0x156>
 800c31e:	f898 3005 	ldrb.w	r3, [r8, #5]
 800c322:	70ab      	strb	r3, [r5, #2]
 800c324:	2e02      	cmp	r6, #2
 800c326:	f105 0303 	add.w	r3, r5, #3
 800c32a:	d072      	beq.n	800c412 <ucdr_deserialize_endian_double+0x15e>
 800c32c:	f898 3004 	ldrb.w	r3, [r8, #4]
 800c330:	70eb      	strb	r3, [r5, #3]
 800c332:	2e03      	cmp	r6, #3
 800c334:	f105 0304 	add.w	r3, r5, #4
 800c338:	d06f      	beq.n	800c41a <ucdr_deserialize_endian_double+0x166>
 800c33a:	f898 3003 	ldrb.w	r3, [r8, #3]
 800c33e:	712b      	strb	r3, [r5, #4]
 800c340:	2e04      	cmp	r6, #4
 800c342:	f105 0305 	add.w	r3, r5, #5
 800c346:	d06c      	beq.n	800c422 <ucdr_deserialize_endian_double+0x16e>
 800c348:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c34c:	716b      	strb	r3, [r5, #5]
 800c34e:	2e05      	cmp	r6, #5
 800c350:	f105 0306 	add.w	r3, r5, #6
 800c354:	d069      	beq.n	800c42a <ucdr_deserialize_endian_double+0x176>
 800c356:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c35a:	71ab      	strb	r3, [r5, #6]
 800c35c:	2e06      	cmp	r6, #6
 800c35e:	f105 0307 	add.w	r3, r5, #7
 800c362:	d066      	beq.n	800c432 <ucdr_deserialize_endian_double+0x17e>
 800c364:	f898 3000 	ldrb.w	r3, [r8]
 800c368:	71eb      	strb	r3, [r5, #7]
 800c36a:	6923      	ldr	r3, [r4, #16]
 800c36c:	68a2      	ldr	r2, [r4, #8]
 800c36e:	7da0      	ldrb	r0, [r4, #22]
 800c370:	3308      	adds	r3, #8
 800c372:	1b9e      	subs	r6, r3, r6
 800c374:	2308      	movs	r3, #8
 800c376:	4452      	add	r2, sl
 800c378:	7563      	strb	r3, [r4, #21]
 800c37a:	60a2      	str	r2, [r4, #8]
 800c37c:	6126      	str	r6, [r4, #16]
 800c37e:	f080 0001 	eor.w	r0, r0, #1
 800c382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c386:	2108      	movs	r1, #8
 800c388:	4620      	mov	r0, r4
 800c38a:	f000 f86d 	bl	800c468 <ucdr_check_final_buffer_behavior>
 800c38e:	b308      	cbz	r0, 800c3d4 <ucdr_deserialize_endian_double+0x120>
 800c390:	2f01      	cmp	r7, #1
 800c392:	68a3      	ldr	r3, [r4, #8]
 800c394:	d023      	beq.n	800c3de <ucdr_deserialize_endian_double+0x12a>
 800c396:	79db      	ldrb	r3, [r3, #7]
 800c398:	702b      	strb	r3, [r5, #0]
 800c39a:	68a3      	ldr	r3, [r4, #8]
 800c39c:	799b      	ldrb	r3, [r3, #6]
 800c39e:	706b      	strb	r3, [r5, #1]
 800c3a0:	68a3      	ldr	r3, [r4, #8]
 800c3a2:	795b      	ldrb	r3, [r3, #5]
 800c3a4:	70ab      	strb	r3, [r5, #2]
 800c3a6:	68a3      	ldr	r3, [r4, #8]
 800c3a8:	791b      	ldrb	r3, [r3, #4]
 800c3aa:	70eb      	strb	r3, [r5, #3]
 800c3ac:	68a3      	ldr	r3, [r4, #8]
 800c3ae:	78db      	ldrb	r3, [r3, #3]
 800c3b0:	712b      	strb	r3, [r5, #4]
 800c3b2:	68a3      	ldr	r3, [r4, #8]
 800c3b4:	789b      	ldrb	r3, [r3, #2]
 800c3b6:	716b      	strb	r3, [r5, #5]
 800c3b8:	68a3      	ldr	r3, [r4, #8]
 800c3ba:	785b      	ldrb	r3, [r3, #1]
 800c3bc:	71ab      	strb	r3, [r5, #6]
 800c3be:	68a3      	ldr	r3, [r4, #8]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	71eb      	strb	r3, [r5, #7]
 800c3c4:	68a2      	ldr	r2, [r4, #8]
 800c3c6:	6923      	ldr	r3, [r4, #16]
 800c3c8:	3208      	adds	r2, #8
 800c3ca:	3308      	adds	r3, #8
 800c3cc:	2108      	movs	r1, #8
 800c3ce:	60a2      	str	r2, [r4, #8]
 800c3d0:	6123      	str	r3, [r4, #16]
 800c3d2:	7561      	strb	r1, [r4, #21]
 800c3d4:	7da0      	ldrb	r0, [r4, #22]
 800c3d6:	f080 0001 	eor.w	r0, r0, #1
 800c3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	606b      	str	r3, [r5, #4]
 800c3e4:	602a      	str	r2, [r5, #0]
 800c3e6:	e7ed      	b.n	800c3c4 <ucdr_deserialize_endian_double+0x110>
 800c3e8:	68a2      	ldr	r2, [r4, #8]
 800c3ea:	6923      	ldr	r3, [r4, #16]
 800c3ec:	7da0      	ldrb	r0, [r4, #22]
 800c3ee:	f884 9015 	strb.w	r9, [r4, #21]
 800c3f2:	1b92      	subs	r2, r2, r6
 800c3f4:	1b9b      	subs	r3, r3, r6
 800c3f6:	60a2      	str	r2, [r4, #8]
 800c3f8:	6123      	str	r3, [r4, #16]
 800c3fa:	f080 0001 	eor.w	r0, r0, #1
 800c3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c402:	68a3      	ldr	r3, [r4, #8]
 800c404:	799b      	ldrb	r3, [r3, #6]
 800c406:	706b      	strb	r3, [r5, #1]
 800c408:	1cab      	adds	r3, r5, #2
 800c40a:	68a2      	ldr	r2, [r4, #8]
 800c40c:	7952      	ldrb	r2, [r2, #5]
 800c40e:	f803 2b01 	strb.w	r2, [r3], #1
 800c412:	68a2      	ldr	r2, [r4, #8]
 800c414:	7912      	ldrb	r2, [r2, #4]
 800c416:	f803 2b01 	strb.w	r2, [r3], #1
 800c41a:	68a2      	ldr	r2, [r4, #8]
 800c41c:	78d2      	ldrb	r2, [r2, #3]
 800c41e:	f803 2b01 	strb.w	r2, [r3], #1
 800c422:	68a2      	ldr	r2, [r4, #8]
 800c424:	7892      	ldrb	r2, [r2, #2]
 800c426:	f803 2b01 	strb.w	r2, [r3], #1
 800c42a:	68a2      	ldr	r2, [r4, #8]
 800c42c:	7852      	ldrb	r2, [r2, #1]
 800c42e:	f803 2b01 	strb.w	r2, [r3], #1
 800c432:	68a2      	ldr	r2, [r4, #8]
 800c434:	7812      	ldrb	r2, [r2, #0]
 800c436:	701a      	strb	r2, [r3, #0]
 800c438:	e797      	b.n	800c36a <ucdr_deserialize_endian_double+0xb6>
 800c43a:	4641      	mov	r1, r8
 800c43c:	4632      	mov	r2, r6
 800c43e:	4628      	mov	r0, r5
 800c440:	f00d faf9 	bl	8019a36 <memcpy>
 800c444:	68a1      	ldr	r1, [r4, #8]
 800c446:	4652      	mov	r2, sl
 800c448:	19a8      	adds	r0, r5, r6
 800c44a:	f00d faf4 	bl	8019a36 <memcpy>
 800c44e:	e78c      	b.n	800c36a <ucdr_deserialize_endian_double+0xb6>

0800c450 <ucdr_check_buffer_available_for>:
 800c450:	7d83      	ldrb	r3, [r0, #22]
 800c452:	b93b      	cbnz	r3, 800c464 <ucdr_check_buffer_available_for+0x14>
 800c454:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c458:	4419      	add	r1, r3
 800c45a:	4288      	cmp	r0, r1
 800c45c:	bf34      	ite	cc
 800c45e:	2000      	movcc	r0, #0
 800c460:	2001      	movcs	r0, #1
 800c462:	4770      	bx	lr
 800c464:	2000      	movs	r0, #0
 800c466:	4770      	bx	lr

0800c468 <ucdr_check_final_buffer_behavior>:
 800c468:	7d83      	ldrb	r3, [r0, #22]
 800c46a:	b943      	cbnz	r3, 800c47e <ucdr_check_final_buffer_behavior+0x16>
 800c46c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c470:	4291      	cmp	r1, r2
 800c472:	b510      	push	{r4, lr}
 800c474:	4604      	mov	r4, r0
 800c476:	d205      	bcs.n	800c484 <ucdr_check_final_buffer_behavior+0x1c>
 800c478:	2301      	movs	r3, #1
 800c47a:	4618      	mov	r0, r3
 800c47c:	bd10      	pop	{r4, pc}
 800c47e:	2300      	movs	r3, #0
 800c480:	4618      	mov	r0, r3
 800c482:	4770      	bx	lr
 800c484:	6982      	ldr	r2, [r0, #24]
 800c486:	b13a      	cbz	r2, 800c498 <ucdr_check_final_buffer_behavior+0x30>
 800c488:	69c1      	ldr	r1, [r0, #28]
 800c48a:	4790      	blx	r2
 800c48c:	f080 0301 	eor.w	r3, r0, #1
 800c490:	b2db      	uxtb	r3, r3
 800c492:	75a0      	strb	r0, [r4, #22]
 800c494:	4618      	mov	r0, r3
 800c496:	bd10      	pop	{r4, pc}
 800c498:	2001      	movs	r0, #1
 800c49a:	75a0      	strb	r0, [r4, #22]
 800c49c:	e7fa      	b.n	800c494 <ucdr_check_final_buffer_behavior+0x2c>
 800c49e:	bf00      	nop

0800c4a0 <ucdr_set_on_full_buffer_callback>:
 800c4a0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c4a4:	4770      	bx	lr
 800c4a6:	bf00      	nop

0800c4a8 <ucdr_init_buffer_origin_offset_endian>:
 800c4a8:	b410      	push	{r4}
 800c4aa:	9c01      	ldr	r4, [sp, #4]
 800c4ac:	6001      	str	r1, [r0, #0]
 800c4ae:	440a      	add	r2, r1
 800c4b0:	6042      	str	r2, [r0, #4]
 800c4b2:	190a      	adds	r2, r1, r4
 800c4b4:	441c      	add	r4, r3
 800c4b6:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c4ba:	6082      	str	r2, [r0, #8]
 800c4bc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c4c0:	7503      	strb	r3, [r0, #20]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c4c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4cc:	7542      	strb	r2, [r0, #21]
 800c4ce:	7582      	strb	r2, [r0, #22]
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop

0800c4d4 <ucdr_init_buffer_origin_offset>:
 800c4d4:	b510      	push	{r4, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	9c04      	ldr	r4, [sp, #16]
 800c4da:	9400      	str	r4, [sp, #0]
 800c4dc:	2401      	movs	r4, #1
 800c4de:	9401      	str	r4, [sp, #4]
 800c4e0:	f7ff ffe2 	bl	800c4a8 <ucdr_init_buffer_origin_offset_endian>
 800c4e4:	b002      	add	sp, #8
 800c4e6:	bd10      	pop	{r4, pc}

0800c4e8 <ucdr_init_buffer_origin>:
 800c4e8:	b510      	push	{r4, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	2400      	movs	r4, #0
 800c4ee:	9400      	str	r4, [sp, #0]
 800c4f0:	f7ff fff0 	bl	800c4d4 <ucdr_init_buffer_origin_offset>
 800c4f4:	b002      	add	sp, #8
 800c4f6:	bd10      	pop	{r4, pc}

0800c4f8 <ucdr_init_buffer>:
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	f7ff bff5 	b.w	800c4e8 <ucdr_init_buffer_origin>
 800c4fe:	bf00      	nop

0800c500 <ucdr_alignment>:
 800c500:	fbb0 f3f1 	udiv	r3, r0, r1
 800c504:	fb03 0011 	mls	r0, r3, r1, r0
 800c508:	1a08      	subs	r0, r1, r0
 800c50a:	3901      	subs	r1, #1
 800c50c:	4008      	ands	r0, r1
 800c50e:	4770      	bx	lr

0800c510 <ucdr_buffer_alignment>:
 800c510:	7d43      	ldrb	r3, [r0, #21]
 800c512:	428b      	cmp	r3, r1
 800c514:	d208      	bcs.n	800c528 <ucdr_buffer_alignment+0x18>
 800c516:	6900      	ldr	r0, [r0, #16]
 800c518:	fbb0 f3f1 	udiv	r3, r0, r1
 800c51c:	fb01 0013 	mls	r0, r1, r3, r0
 800c520:	1a08      	subs	r0, r1, r0
 800c522:	3901      	subs	r1, #1
 800c524:	4008      	ands	r0, r1
 800c526:	4770      	bx	lr
 800c528:	2000      	movs	r0, #0
 800c52a:	4770      	bx	lr

0800c52c <ucdr_align_to>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4604      	mov	r4, r0
 800c530:	460d      	mov	r5, r1
 800c532:	f7ff ffed 	bl	800c510 <ucdr_buffer_alignment>
 800c536:	68a3      	ldr	r3, [r4, #8]
 800c538:	6921      	ldr	r1, [r4, #16]
 800c53a:	7565      	strb	r5, [r4, #21]
 800c53c:	181a      	adds	r2, r3, r0
 800c53e:	6863      	ldr	r3, [r4, #4]
 800c540:	4293      	cmp	r3, r2
 800c542:	4408      	add	r0, r1
 800c544:	bf28      	it	cs
 800c546:	4613      	movcs	r3, r2
 800c548:	6120      	str	r0, [r4, #16]
 800c54a:	60a3      	str	r3, [r4, #8]
 800c54c:	bd38      	pop	{r3, r4, r5, pc}
 800c54e:	bf00      	nop

0800c550 <ucdr_buffer_length>:
 800c550:	6882      	ldr	r2, [r0, #8]
 800c552:	6800      	ldr	r0, [r0, #0]
 800c554:	1a10      	subs	r0, r2, r0
 800c556:	4770      	bx	lr

0800c558 <ucdr_buffer_remaining>:
 800c558:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c55c:	1a10      	subs	r0, r2, r0
 800c55e:	4770      	bx	lr

0800c560 <ucdr_check_final_buffer_behavior_array>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	7d83      	ldrb	r3, [r0, #22]
 800c564:	b963      	cbnz	r3, 800c580 <ucdr_check_final_buffer_behavior_array+0x20>
 800c566:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	4604      	mov	r4, r0
 800c56e:	460d      	mov	r5, r1
 800c570:	d308      	bcc.n	800c584 <ucdr_check_final_buffer_behavior_array+0x24>
 800c572:	b139      	cbz	r1, 800c584 <ucdr_check_final_buffer_behavior_array+0x24>
 800c574:	6983      	ldr	r3, [r0, #24]
 800c576:	b163      	cbz	r3, 800c592 <ucdr_check_final_buffer_behavior_array+0x32>
 800c578:	69c1      	ldr	r1, [r0, #28]
 800c57a:	4798      	blx	r3
 800c57c:	75a0      	strb	r0, [r4, #22]
 800c57e:	b108      	cbz	r0, 800c584 <ucdr_check_final_buffer_behavior_array+0x24>
 800c580:	2000      	movs	r0, #0
 800c582:	bd38      	pop	{r3, r4, r5, pc}
 800c584:	4620      	mov	r0, r4
 800c586:	f7ff ffe7 	bl	800c558 <ucdr_buffer_remaining>
 800c58a:	42a8      	cmp	r0, r5
 800c58c:	bf28      	it	cs
 800c58e:	4628      	movcs	r0, r5
 800c590:	bd38      	pop	{r3, r4, r5, pc}
 800c592:	2301      	movs	r3, #1
 800c594:	7583      	strb	r3, [r0, #22]
 800c596:	e7f3      	b.n	800c580 <ucdr_check_final_buffer_behavior_array+0x20>

0800c598 <ucdr_advance_buffer>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	4604      	mov	r4, r0
 800c59c:	460d      	mov	r5, r1
 800c59e:	f7ff ff57 	bl	800c450 <ucdr_check_buffer_available_for>
 800c5a2:	b178      	cbz	r0, 800c5c4 <ucdr_advance_buffer+0x2c>
 800c5a4:	6923      	ldr	r3, [r4, #16]
 800c5a6:	68a2      	ldr	r2, [r4, #8]
 800c5a8:	442b      	add	r3, r5
 800c5aa:	6123      	str	r3, [r4, #16]
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	442a      	add	r2, r5
 800c5b0:	7563      	strb	r3, [r4, #21]
 800c5b2:	60a2      	str	r2, [r4, #8]
 800c5b4:	bd38      	pop	{r3, r4, r5, pc}
 800c5b6:	68a2      	ldr	r2, [r4, #8]
 800c5b8:	6923      	ldr	r3, [r4, #16]
 800c5ba:	4402      	add	r2, r0
 800c5bc:	4403      	add	r3, r0
 800c5be:	1a2d      	subs	r5, r5, r0
 800c5c0:	60a2      	str	r2, [r4, #8]
 800c5c2:	6123      	str	r3, [r4, #16]
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	f7ff ffc9 	bl	800c560 <ucdr_check_final_buffer_behavior_array>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d1f1      	bne.n	800c5b6 <ucdr_advance_buffer+0x1e>
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	7563      	strb	r3, [r4, #21]
 800c5d6:	bd38      	pop	{r3, r4, r5, pc}

0800c5d8 <rcl_get_zero_initialized_init_options>:
 800c5d8:	2000      	movs	r0, #0
 800c5da:	4770      	bx	lr

0800c5dc <rcl_init_options_init>:
 800c5dc:	b084      	sub	sp, #16
 800c5de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5e0:	b097      	sub	sp, #92	@ 0x5c
 800c5e2:	ae1d      	add	r6, sp, #116	@ 0x74
 800c5e4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	d058      	beq.n	800c69e <rcl_init_options_init+0xc2>
 800c5ec:	6803      	ldr	r3, [r0, #0]
 800c5ee:	4605      	mov	r5, r0
 800c5f0:	b133      	cbz	r3, 800c600 <rcl_init_options_init+0x24>
 800c5f2:	2464      	movs	r4, #100	@ 0x64
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	b017      	add	sp, #92	@ 0x5c
 800c5f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c5fc:	b004      	add	sp, #16
 800c5fe:	4770      	bx	lr
 800c600:	4630      	mov	r0, r6
 800c602:	f001 f9cf 	bl	800d9a4 <rcutils_allocator_is_valid>
 800c606:	2800      	cmp	r0, #0
 800c608:	d049      	beq.n	800c69e <rcl_init_options_init+0xc2>
 800c60a:	46b4      	mov	ip, r6
 800c60c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c610:	ac11      	add	r4, sp, #68	@ 0x44
 800c612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c614:	f8dc 3000 	ldr.w	r3, [ip]
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c61c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c61e:	2050      	movs	r0, #80	@ 0x50
 800c620:	4798      	blx	r3
 800c622:	4604      	mov	r4, r0
 800c624:	6028      	str	r0, [r5, #0]
 800c626:	2800      	cmp	r0, #0
 800c628:	d03b      	beq.n	800c6a2 <rcl_init_options_init+0xc6>
 800c62a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800c62e:	4686      	mov	lr, r0
 800c630:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c634:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c638:	f8dc 3000 	ldr.w	r3, [ip]
 800c63c:	f8ce 3000 	str.w	r3, [lr]
 800c640:	a802      	add	r0, sp, #8
 800c642:	f001 fa41 	bl	800dac8 <rmw_get_zero_initialized_init_options>
 800c646:	f10d 0e08 	add.w	lr, sp, #8
 800c64a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c64e:	f104 0c18 	add.w	ip, r4, #24
 800c652:	682f      	ldr	r7, [r5, #0]
 800c654:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c658:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c65c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c660:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c664:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c668:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c66c:	ac20      	add	r4, sp, #128	@ 0x80
 800c66e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c672:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c676:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c67a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c67e:	f107 0018 	add.w	r0, r7, #24
 800c682:	f001 fa4f 	bl	800db24 <rmw_init_options_init>
 800c686:	4604      	mov	r4, r0
 800c688:	2800      	cmp	r0, #0
 800c68a:	d0b3      	beq.n	800c5f4 <rcl_init_options_init+0x18>
 800c68c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c68e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c690:	6828      	ldr	r0, [r5, #0]
 800c692:	4798      	blx	r3
 800c694:	4620      	mov	r0, r4
 800c696:	f007 f9a5 	bl	80139e4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c69a:	4604      	mov	r4, r0
 800c69c:	e7aa      	b.n	800c5f4 <rcl_init_options_init+0x18>
 800c69e:	240b      	movs	r4, #11
 800c6a0:	e7a8      	b.n	800c5f4 <rcl_init_options_init+0x18>
 800c6a2:	240a      	movs	r4, #10
 800c6a4:	e7a6      	b.n	800c5f4 <rcl_init_options_init+0x18>
 800c6a6:	bf00      	nop

0800c6a8 <rcl_init_options_fini>:
 800c6a8:	b530      	push	{r4, r5, lr}
 800c6aa:	b087      	sub	sp, #28
 800c6ac:	b1f0      	cbz	r0, 800c6ec <rcl_init_options_fini+0x44>
 800c6ae:	6803      	ldr	r3, [r0, #0]
 800c6b0:	4604      	mov	r4, r0
 800c6b2:	b1db      	cbz	r3, 800c6ec <rcl_init_options_fini+0x44>
 800c6b4:	469c      	mov	ip, r3
 800c6b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c6ba:	f10d 0e04 	add.w	lr, sp, #4
 800c6be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c6c2:	f8dc 3000 	ldr.w	r3, [ip]
 800c6c6:	f8ce 3000 	str.w	r3, [lr]
 800c6ca:	a801      	add	r0, sp, #4
 800c6cc:	f001 f96a 	bl	800d9a4 <rcutils_allocator_is_valid>
 800c6d0:	b160      	cbz	r0, 800c6ec <rcl_init_options_fini+0x44>
 800c6d2:	6820      	ldr	r0, [r4, #0]
 800c6d4:	3018      	adds	r0, #24
 800c6d6:	f001 fad5 	bl	800dc84 <rmw_init_options_fini>
 800c6da:	4605      	mov	r5, r0
 800c6dc:	b950      	cbnz	r0, 800c6f4 <rcl_init_options_fini+0x4c>
 800c6de:	6820      	ldr	r0, [r4, #0]
 800c6e0:	9b02      	ldr	r3, [sp, #8]
 800c6e2:	9905      	ldr	r1, [sp, #20]
 800c6e4:	4798      	blx	r3
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	b007      	add	sp, #28
 800c6ea:	bd30      	pop	{r4, r5, pc}
 800c6ec:	250b      	movs	r5, #11
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	b007      	add	sp, #28
 800c6f2:	bd30      	pop	{r4, r5, pc}
 800c6f4:	f007 f976 	bl	80139e4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c6f8:	4605      	mov	r5, r0
 800c6fa:	e7f8      	b.n	800c6ee <rcl_init_options_fini+0x46>

0800c6fc <rcl_init_options_copy>:
 800c6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c700:	b094      	sub	sp, #80	@ 0x50
 800c702:	2800      	cmp	r0, #0
 800c704:	d058      	beq.n	800c7b8 <rcl_init_options_copy+0xbc>
 800c706:	4604      	mov	r4, r0
 800c708:	6800      	ldr	r0, [r0, #0]
 800c70a:	2800      	cmp	r0, #0
 800c70c:	d054      	beq.n	800c7b8 <rcl_init_options_copy+0xbc>
 800c70e:	460e      	mov	r6, r1
 800c710:	f001 f948 	bl	800d9a4 <rcutils_allocator_is_valid>
 800c714:	2800      	cmp	r0, #0
 800c716:	d04f      	beq.n	800c7b8 <rcl_init_options_copy+0xbc>
 800c718:	2e00      	cmp	r6, #0
 800c71a:	d04d      	beq.n	800c7b8 <rcl_init_options_copy+0xbc>
 800c71c:	6833      	ldr	r3, [r6, #0]
 800c71e:	b123      	cbz	r3, 800c72a <rcl_init_options_copy+0x2e>
 800c720:	2464      	movs	r4, #100	@ 0x64
 800c722:	4620      	mov	r0, r4
 800c724:	b014      	add	sp, #80	@ 0x50
 800c726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c72a:	6827      	ldr	r7, [r4, #0]
 800c72c:	46bc      	mov	ip, r7
 800c72e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c732:	ad0f      	add	r5, sp, #60	@ 0x3c
 800c734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c736:	f8dc 3000 	ldr.w	r3, [ip]
 800c73a:	f8d7 8000 	ldr.w	r8, [r7]
 800c73e:	602b      	str	r3, [r5, #0]
 800c740:	4619      	mov	r1, r3
 800c742:	2050      	movs	r0, #80	@ 0x50
 800c744:	47c0      	blx	r8
 800c746:	4605      	mov	r5, r0
 800c748:	6030      	str	r0, [r6, #0]
 800c74a:	b3d0      	cbz	r0, 800c7c2 <rcl_init_options_copy+0xc6>
 800c74c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800c750:	4686      	mov	lr, r0
 800c752:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c756:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c75a:	f8dc 3000 	ldr.w	r3, [ip]
 800c75e:	f8ce 3000 	str.w	r3, [lr]
 800c762:	4668      	mov	r0, sp
 800c764:	f001 f9b0 	bl	800dac8 <rmw_get_zero_initialized_init_options>
 800c768:	46ee      	mov	lr, sp
 800c76a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c76e:	f105 0c18 	add.w	ip, r5, #24
 800c772:	6824      	ldr	r4, [r4, #0]
 800c774:	6835      	ldr	r5, [r6, #0]
 800c776:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c77a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c77e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c782:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c786:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c78a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c78e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c792:	f104 0018 	add.w	r0, r4, #24
 800c796:	f105 0118 	add.w	r1, r5, #24
 800c79a:	f001 fa2b 	bl	800dbf4 <rmw_init_options_copy>
 800c79e:	4604      	mov	r4, r0
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	d0be      	beq.n	800c722 <rcl_init_options_copy+0x26>
 800c7a4:	f001 f90c 	bl	800d9c0 <rcutils_get_error_string>
 800c7a8:	f001 f922 	bl	800d9f0 <rcutils_reset_error>
 800c7ac:	4630      	mov	r0, r6
 800c7ae:	f7ff ff7b 	bl	800c6a8 <rcl_init_options_fini>
 800c7b2:	b140      	cbz	r0, 800c7c6 <rcl_init_options_copy+0xca>
 800c7b4:	4604      	mov	r4, r0
 800c7b6:	e7b4      	b.n	800c722 <rcl_init_options_copy+0x26>
 800c7b8:	240b      	movs	r4, #11
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	b014      	add	sp, #80	@ 0x50
 800c7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7c2:	240a      	movs	r4, #10
 800c7c4:	e7ad      	b.n	800c722 <rcl_init_options_copy+0x26>
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	b014      	add	sp, #80	@ 0x50
 800c7ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ce:	f007 b909 	b.w	80139e4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c7d2:	bf00      	nop

0800c7d4 <rcl_init_options_set_domain_id>:
 800c7d4:	b120      	cbz	r0, 800c7e0 <rcl_init_options_set_domain_id+0xc>
 800c7d6:	6803      	ldr	r3, [r0, #0]
 800c7d8:	b113      	cbz	r3, 800c7e0 <rcl_init_options_set_domain_id+0xc>
 800c7da:	6259      	str	r1, [r3, #36]	@ 0x24
 800c7dc:	2000      	movs	r0, #0
 800c7de:	4770      	bx	lr
 800c7e0:	200b      	movs	r0, #11
 800c7e2:	4770      	bx	lr

0800c7e4 <rcl_get_zero_initialized_publisher>:
 800c7e4:	4b01      	ldr	r3, [pc, #4]	@ (800c7ec <rcl_get_zero_initialized_publisher+0x8>)
 800c7e6:	6818      	ldr	r0, [r3, #0]
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop
 800c7ec:	0801b4ec 	.word	0x0801b4ec

0800c7f0 <rcl_publisher_init>:
 800c7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f4:	b088      	sub	sp, #32
 800c7f6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c7f8:	2d00      	cmp	r5, #0
 800c7fa:	d069      	beq.n	800c8d0 <rcl_publisher_init+0xe0>
 800c7fc:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c800:	4604      	mov	r4, r0
 800c802:	4648      	mov	r0, r9
 800c804:	460e      	mov	r6, r1
 800c806:	4690      	mov	r8, r2
 800c808:	461f      	mov	r7, r3
 800c80a:	f001 f8cb 	bl	800d9a4 <rcutils_allocator_is_valid>
 800c80e:	2800      	cmp	r0, #0
 800c810:	d05e      	beq.n	800c8d0 <rcl_publisher_init+0xe0>
 800c812:	2c00      	cmp	r4, #0
 800c814:	d05c      	beq.n	800c8d0 <rcl_publisher_init+0xe0>
 800c816:	f8d4 a000 	ldr.w	sl, [r4]
 800c81a:	f1ba 0f00 	cmp.w	sl, #0
 800c81e:	d004      	beq.n	800c82a <rcl_publisher_init+0x3a>
 800c820:	2764      	movs	r7, #100	@ 0x64
 800c822:	4638      	mov	r0, r7
 800c824:	b008      	add	sp, #32
 800c826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c82a:	4630      	mov	r0, r6
 800c82c:	f007 fbd4 	bl	8013fd8 <rcl_node_is_valid>
 800c830:	2800      	cmp	r0, #0
 800c832:	d052      	beq.n	800c8da <rcl_publisher_init+0xea>
 800c834:	f1b8 0f00 	cmp.w	r8, #0
 800c838:	d04a      	beq.n	800c8d0 <rcl_publisher_init+0xe0>
 800c83a:	2f00      	cmp	r7, #0
 800c83c:	d048      	beq.n	800c8d0 <rcl_publisher_init+0xe0>
 800c83e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800c842:	aa07      	add	r2, sp, #28
 800c844:	9205      	str	r2, [sp, #20]
 800c846:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800c84a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c84e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c852:	f8cd a01c 	str.w	sl, [sp, #28]
 800c856:	4639      	mov	r1, r7
 800c858:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c85c:	4630      	mov	r0, r6
 800c85e:	f007 fc0f 	bl	8014080 <rcl_node_resolve_name>
 800c862:	4607      	mov	r7, r0
 800c864:	2800      	cmp	r0, #0
 800c866:	d14f      	bne.n	800c908 <rcl_publisher_init+0x118>
 800c868:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c86a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c86c:	20c8      	movs	r0, #200	@ 0xc8
 800c86e:	4798      	blx	r3
 800c870:	6020      	str	r0, [r4, #0]
 800c872:	2800      	cmp	r0, #0
 800c874:	d04e      	beq.n	800c914 <rcl_publisher_init+0x124>
 800c876:	4630      	mov	r0, r6
 800c878:	f007 fbd0 	bl	801401c <rcl_node_get_rmw_handle>
 800c87c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c880:	9300      	str	r3, [sp, #0]
 800c882:	9a07      	ldr	r2, [sp, #28]
 800c884:	6827      	ldr	r7, [r4, #0]
 800c886:	462b      	mov	r3, r5
 800c888:	4641      	mov	r1, r8
 800c88a:	f001 fd23 	bl	800e2d4 <rmw_create_publisher>
 800c88e:	6823      	ldr	r3, [r4, #0]
 800c890:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800c894:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c898:	b370      	cbz	r0, 800c8f8 <rcl_publisher_init+0x108>
 800c89a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c89e:	f001 fdf7 	bl	800e490 <rmw_publisher_get_actual_qos>
 800c8a2:	6823      	ldr	r3, [r4, #0]
 800c8a4:	4607      	mov	r7, r0
 800c8a6:	b9d0      	cbnz	r0, 800c8de <rcl_publisher_init+0xee>
 800c8a8:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c8ac:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c8b0:	4629      	mov	r1, r5
 800c8b2:	2270      	movs	r2, #112	@ 0x70
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f00d f8be 	bl	8019a36 <memcpy>
 800c8ba:	6832      	ldr	r2, [r6, #0]
 800c8bc:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c8c0:	9807      	ldr	r0, [sp, #28]
 800c8c2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c8c4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c8c6:	4798      	blx	r3
 800c8c8:	4638      	mov	r0, r7
 800c8ca:	b008      	add	sp, #32
 800c8cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d0:	270b      	movs	r7, #11
 800c8d2:	4638      	mov	r0, r7
 800c8d4:	b008      	add	sp, #32
 800c8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8da:	27c8      	movs	r7, #200	@ 0xc8
 800c8dc:	e7a1      	b.n	800c822 <rcl_publisher_init+0x32>
 800c8de:	b18b      	cbz	r3, 800c904 <rcl_publisher_init+0x114>
 800c8e0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c8e4:	b142      	cbz	r2, 800c8f8 <rcl_publisher_init+0x108>
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f007 fb98 	bl	801401c <rcl_node_get_rmw_handle>
 800c8ec:	6823      	ldr	r3, [r4, #0]
 800c8ee:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c8f2:	f001 fddd 	bl	800e4b0 <rmw_destroy_publisher>
 800c8f6:	6823      	ldr	r3, [r4, #0]
 800c8f8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c8fa:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	4790      	blx	r2
 800c900:	2300      	movs	r3, #0
 800c902:	6023      	str	r3, [r4, #0]
 800c904:	2701      	movs	r7, #1
 800c906:	e7db      	b.n	800c8c0 <rcl_publisher_init+0xd0>
 800c908:	2867      	cmp	r0, #103	@ 0x67
 800c90a:	d0d9      	beq.n	800c8c0 <rcl_publisher_init+0xd0>
 800c90c:	2869      	cmp	r0, #105	@ 0x69
 800c90e:	d003      	beq.n	800c918 <rcl_publisher_init+0x128>
 800c910:	280a      	cmp	r0, #10
 800c912:	d1f7      	bne.n	800c904 <rcl_publisher_init+0x114>
 800c914:	270a      	movs	r7, #10
 800c916:	e7d3      	b.n	800c8c0 <rcl_publisher_init+0xd0>
 800c918:	2767      	movs	r7, #103	@ 0x67
 800c91a:	e7d1      	b.n	800c8c0 <rcl_publisher_init+0xd0>

0800c91c <rcl_publisher_get_default_options>:
 800c91c:	b570      	push	{r4, r5, r6, lr}
 800c91e:	4d14      	ldr	r5, [pc, #80]	@ (800c970 <rcl_publisher_get_default_options+0x54>)
 800c920:	4914      	ldr	r1, [pc, #80]	@ (800c974 <rcl_publisher_get_default_options+0x58>)
 800c922:	b088      	sub	sp, #32
 800c924:	4604      	mov	r4, r0
 800c926:	2250      	movs	r2, #80	@ 0x50
 800c928:	4628      	mov	r0, r5
 800c92a:	f00d f884 	bl	8019a36 <memcpy>
 800c92e:	a802      	add	r0, sp, #8
 800c930:	f001 f82a 	bl	800d988 <rcutils_get_default_allocator>
 800c934:	f10d 0c08 	add.w	ip, sp, #8
 800c938:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c93c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c940:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c944:	466e      	mov	r6, sp
 800c946:	f8dc 3000 	ldr.w	r3, [ip]
 800c94a:	f8ce 3000 	str.w	r3, [lr]
 800c94e:	4630      	mov	r0, r6
 800c950:	f001 f8ca 	bl	800dae8 <rmw_get_default_publisher_options>
 800c954:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c958:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c95c:	e883 0003 	stmia.w	r3, {r0, r1}
 800c960:	2270      	movs	r2, #112	@ 0x70
 800c962:	4629      	mov	r1, r5
 800c964:	4620      	mov	r0, r4
 800c966:	f00d f866 	bl	8019a36 <memcpy>
 800c96a:	4620      	mov	r0, r4
 800c96c:	b008      	add	sp, #32
 800c96e:	bd70      	pop	{r4, r5, r6, pc}
 800c970:	20006c60 	.word	0x20006c60
 800c974:	0801b4f0 	.word	0x0801b4f0

0800c978 <rcl_publish>:
 800c978:	b1f8      	cbz	r0, 800c9ba <rcl_publish+0x42>
 800c97a:	6803      	ldr	r3, [r0, #0]
 800c97c:	b570      	push	{r4, r5, r6, lr}
 800c97e:	4604      	mov	r4, r0
 800c980:	b1b3      	cbz	r3, 800c9b0 <rcl_publish+0x38>
 800c982:	4616      	mov	r6, r2
 800c984:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c988:	b192      	cbz	r2, 800c9b0 <rcl_publish+0x38>
 800c98a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c98e:	460d      	mov	r5, r1
 800c990:	f007 f846 	bl	8013a20 <rcl_context_is_valid>
 800c994:	b160      	cbz	r0, 800c9b0 <rcl_publish+0x38>
 800c996:	6823      	ldr	r3, [r4, #0]
 800c998:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c99c:	b140      	cbz	r0, 800c9b0 <rcl_publish+0x38>
 800c99e:	b155      	cbz	r5, 800c9b6 <rcl_publish+0x3e>
 800c9a0:	4632      	mov	r2, r6
 800c9a2:	4629      	mov	r1, r5
 800c9a4:	f001 fc36 	bl	800e214 <rmw_publish>
 800c9a8:	3800      	subs	r0, #0
 800c9aa:	bf18      	it	ne
 800c9ac:	2001      	movne	r0, #1
 800c9ae:	bd70      	pop	{r4, r5, r6, pc}
 800c9b0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c9b4:	bd70      	pop	{r4, r5, r6, pc}
 800c9b6:	200b      	movs	r0, #11
 800c9b8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c9be:	4770      	bx	lr

0800c9c0 <rcl_publisher_is_valid>:
 800c9c0:	b1a0      	cbz	r0, 800c9ec <rcl_publisher_is_valid+0x2c>
 800c9c2:	6803      	ldr	r3, [r0, #0]
 800c9c4:	b510      	push	{r4, lr}
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	b173      	cbz	r3, 800c9e8 <rcl_publisher_is_valid+0x28>
 800c9ca:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c9ce:	b15a      	cbz	r2, 800c9e8 <rcl_publisher_is_valid+0x28>
 800c9d0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c9d4:	f007 f824 	bl	8013a20 <rcl_context_is_valid>
 800c9d8:	b130      	cbz	r0, 800c9e8 <rcl_publisher_is_valid+0x28>
 800c9da:	6823      	ldr	r3, [r4, #0]
 800c9dc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c9e0:	3800      	subs	r0, #0
 800c9e2:	bf18      	it	ne
 800c9e4:	2001      	movne	r0, #1
 800c9e6:	bd10      	pop	{r4, pc}
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	bd10      	pop	{r4, pc}
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	4770      	bx	lr

0800c9f0 <rcl_publisher_is_valid_except_context>:
 800c9f0:	b130      	cbz	r0, 800ca00 <rcl_publisher_is_valid_except_context+0x10>
 800c9f2:	6800      	ldr	r0, [r0, #0]
 800c9f4:	b120      	cbz	r0, 800ca00 <rcl_publisher_is_valid_except_context+0x10>
 800c9f6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c9fa:	3800      	subs	r0, #0
 800c9fc:	bf18      	it	ne
 800c9fe:	2001      	movne	r0, #1
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop

0800ca04 <_rclc_check_for_new_data>:
 800ca04:	2800      	cmp	r0, #0
 800ca06:	d046      	beq.n	800ca96 <_rclc_check_for_new_data+0x92>
 800ca08:	b510      	push	{r4, lr}
 800ca0a:	7802      	ldrb	r2, [r0, #0]
 800ca0c:	b084      	sub	sp, #16
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2a0a      	cmp	r2, #10
 800ca12:	d842      	bhi.n	800ca9a <_rclc_check_for_new_data+0x96>
 800ca14:	e8df f002 	tbb	[pc, r2]
 800ca18:	14181212 	.word	0x14181212
 800ca1c:	06060614 	.word	0x06060614
 800ca20:	2e1a      	.short	0x2e1a
 800ca22:	16          	.byte	0x16
 800ca23:	00          	.byte	0x00
 800ca24:	6a0a      	ldr	r2, [r1, #32]
 800ca26:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ca28:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	1a12      	subs	r2, r2, r0
 800ca30:	bf18      	it	ne
 800ca32:	2201      	movne	r2, #1
 800ca34:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ca38:	b004      	add	sp, #16
 800ca3a:	bd10      	pop	{r4, pc}
 800ca3c:	680a      	ldr	r2, [r1, #0]
 800ca3e:	e7f2      	b.n	800ca26 <_rclc_check_for_new_data+0x22>
 800ca40:	698a      	ldr	r2, [r1, #24]
 800ca42:	e7f0      	b.n	800ca26 <_rclc_check_for_new_data+0x22>
 800ca44:	688a      	ldr	r2, [r1, #8]
 800ca46:	e7ee      	b.n	800ca26 <_rclc_check_for_new_data+0x22>
 800ca48:	690a      	ldr	r2, [r1, #16]
 800ca4a:	e7ec      	b.n	800ca26 <_rclc_check_for_new_data+0x22>
 800ca4c:	685c      	ldr	r4, [r3, #4]
 800ca4e:	4608      	mov	r0, r1
 800ca50:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800ca54:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800ca58:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800ca5c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800ca66:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800ca6a:	f104 0110 	add.w	r1, r4, #16
 800ca6e:	f009 f9b7 	bl	8015de0 <rcl_action_client_wait_set_get_entities_ready>
 800ca72:	e7e1      	b.n	800ca38 <_rclc_check_for_new_data+0x34>
 800ca74:	685c      	ldr	r4, [r3, #4]
 800ca76:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800ca7a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800ca7e:	e9cd 3200 	strd	r3, r2, [sp]
 800ca82:	4608      	mov	r0, r1
 800ca84:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800ca88:	f104 0220 	add.w	r2, r4, #32
 800ca8c:	f104 0110 	add.w	r1, r4, #16
 800ca90:	f009 fbbe 	bl	8016210 <rcl_action_server_wait_set_get_entities_ready>
 800ca94:	e7d0      	b.n	800ca38 <_rclc_check_for_new_data+0x34>
 800ca96:	200b      	movs	r0, #11
 800ca98:	4770      	bx	lr
 800ca9a:	2001      	movs	r0, #1
 800ca9c:	e7cc      	b.n	800ca38 <_rclc_check_for_new_data+0x34>
 800ca9e:	bf00      	nop

0800caa0 <_rclc_take_new_data>:
 800caa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caa2:	b09b      	sub	sp, #108	@ 0x6c
 800caa4:	2800      	cmp	r0, #0
 800caa6:	f000 8088 	beq.w	800cbba <_rclc_take_new_data+0x11a>
 800caaa:	7803      	ldrb	r3, [r0, #0]
 800caac:	4604      	mov	r4, r0
 800caae:	2b0a      	cmp	r3, #10
 800cab0:	f200 8167 	bhi.w	800cd82 <_rclc_take_new_data+0x2e2>
 800cab4:	e8df f003 	tbb	[pc, r3]
 800cab8:	44152d2d 	.word	0x44152d2d
 800cabc:	19191944 	.word	0x19191944
 800cac0:	065a      	.short	0x065a
 800cac2:	15          	.byte	0x15
 800cac3:	00          	.byte	0x00
 800cac4:	6840      	ldr	r0, [r0, #4]
 800cac6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f040 80b2 	bne.w	800cc34 <_rclc_take_new_data+0x194>
 800cad0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f040 80e4 	bne.w	800cca2 <_rclc_take_new_data+0x202>
 800cada:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d16f      	bne.n	800cbc2 <_rclc_take_new_data+0x122>
 800cae2:	2500      	movs	r5, #0
 800cae4:	4628      	mov	r0, r5
 800cae6:	b01b      	add	sp, #108	@ 0x6c
 800cae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caea:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800caec:	6a0b      	ldr	r3, [r1, #32]
 800caee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d0f5      	beq.n	800cae2 <_rclc_take_new_data+0x42>
 800caf6:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800cafa:	f104 0110 	add.w	r1, r4, #16
 800cafe:	f007 fd1b 	bl	8014538 <rcl_take_request>
 800cb02:	4605      	mov	r5, r0
 800cb04:	2800      	cmp	r0, #0
 800cb06:	d0ec      	beq.n	800cae2 <_rclc_take_new_data+0x42>
 800cb08:	f240 2359 	movw	r3, #601	@ 0x259
 800cb0c:	4298      	cmp	r0, r3
 800cb0e:	d013      	beq.n	800cb38 <_rclc_take_new_data+0x98>
 800cb10:	e029      	b.n	800cb66 <_rclc_take_new_data+0xc6>
 800cb12:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cb14:	680b      	ldr	r3, [r1, #0]
 800cb16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d0e1      	beq.n	800cae2 <_rclc_take_new_data+0x42>
 800cb1e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800cb22:	2300      	movs	r3, #0
 800cb24:	aa0a      	add	r2, sp, #40	@ 0x28
 800cb26:	f007 fd69 	bl	80145fc <rcl_take>
 800cb2a:	4605      	mov	r5, r0
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d0d9      	beq.n	800cae4 <_rclc_take_new_data+0x44>
 800cb30:	f240 1391 	movw	r3, #401	@ 0x191
 800cb34:	4298      	cmp	r0, r3
 800cb36:	d116      	bne.n	800cb66 <_rclc_take_new_data+0xc6>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800cb3e:	e7d1      	b.n	800cae4 <_rclc_take_new_data+0x44>
 800cb40:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cb42:	698b      	ldr	r3, [r1, #24]
 800cb44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d0ca      	beq.n	800cae2 <_rclc_take_new_data+0x42>
 800cb4c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800cb50:	f104 0110 	add.w	r1, r4, #16
 800cb54:	f006 fef4 	bl	8013940 <rcl_take_response>
 800cb58:	4605      	mov	r5, r0
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d0c1      	beq.n	800cae2 <_rclc_take_new_data+0x42>
 800cb5e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800cb62:	4298      	cmp	r0, r3
 800cb64:	d0be      	beq.n	800cae4 <_rclc_take_new_data+0x44>
 800cb66:	f000 ff43 	bl	800d9f0 <rcutils_reset_error>
 800cb6a:	e7bb      	b.n	800cae4 <_rclc_take_new_data+0x44>
 800cb6c:	6840      	ldr	r0, [r0, #4]
 800cb6e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d17d      	bne.n	800cc72 <_rclc_take_new_data+0x1d2>
 800cb76:	69c3      	ldr	r3, [r0, #28]
 800cb78:	b11b      	cbz	r3, 800cb82 <_rclc_take_new_data+0xe2>
 800cb7a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d144      	bne.n	800cc0c <_rclc_take_new_data+0x16c>
 800cb82:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f040 80ac 	bne.w	800cce4 <_rclc_take_new_data+0x244>
 800cb8c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d0a6      	beq.n	800cae2 <_rclc_take_new_data+0x42>
 800cb94:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800cb96:	a90a      	add	r1, sp, #40	@ 0x28
 800cb98:	3010      	adds	r0, #16
 800cb9a:	f008 fff9 	bl	8015b90 <rcl_action_take_result_response>
 800cb9e:	4605      	mov	r5, r0
 800cba0:	2800      	cmp	r0, #0
 800cba2:	d1e0      	bne.n	800cb66 <_rclc_take_new_data+0xc6>
 800cba4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cba8:	6860      	ldr	r0, [r4, #4]
 800cbaa:	f009 fc55 	bl	8016458 <rclc_action_find_handle_by_result_request_sequence_number>
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	d098      	beq.n	800cae4 <_rclc_take_new_data+0x44>
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800cbb8:	e794      	b.n	800cae4 <_rclc_take_new_data+0x44>
 800cbba:	250b      	movs	r5, #11
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	b01b      	add	sp, #108	@ 0x6c
 800cbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbc2:	ae04      	add	r6, sp, #16
 800cbc4:	aa0a      	add	r2, sp, #40	@ 0x28
 800cbc6:	3010      	adds	r0, #16
 800cbc8:	4631      	mov	r1, r6
 800cbca:	f009 fa55 	bl	8016078 <rcl_action_take_cancel_request>
 800cbce:	4605      	mov	r5, r0
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	d1c8      	bne.n	800cb66 <_rclc_take_new_data+0xc6>
 800cbd4:	6860      	ldr	r0, [r4, #4]
 800cbd6:	a90a      	add	r1, sp, #40	@ 0x28
 800cbd8:	f009 fbfc 	bl	80163d4 <rclc_action_find_goal_handle_by_uuid>
 800cbdc:	4607      	mov	r7, r0
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	f000 80bb 	beq.w	800cd5a <_rclc_take_new_data+0x2ba>
 800cbe4:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800cbe8:	2101      	movs	r1, #1
 800cbea:	f009 fb7d 	bl	80162e8 <rcl_action_transition_goal_state>
 800cbee:	2803      	cmp	r0, #3
 800cbf0:	4684      	mov	ip, r0
 800cbf2:	f040 80a7 	bne.w	800cd44 <_rclc_take_new_data+0x2a4>
 800cbf6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cbf8:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800cbfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cbfe:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cc02:	e884 0003 	stmia.w	r4, {r0, r1}
 800cc06:	f887 c008 	strb.w	ip, [r7, #8]
 800cc0a:	e76b      	b.n	800cae4 <_rclc_take_new_data+0x44>
 800cc0c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cc0e:	3010      	adds	r0, #16
 800cc10:	f009 f83e 	bl	8015c90 <rcl_action_take_feedback>
 800cc14:	4605      	mov	r5, r0
 800cc16:	2800      	cmp	r0, #0
 800cc18:	d1a5      	bne.n	800cb66 <_rclc_take_new_data+0xc6>
 800cc1a:	6860      	ldr	r0, [r4, #4]
 800cc1c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cc1e:	f009 fbd9 	bl	80163d4 <rclc_action_find_goal_handle_by_uuid>
 800cc22:	4603      	mov	r3, r0
 800cc24:	2800      	cmp	r0, #0
 800cc26:	f000 80a3 	beq.w	800cd70 <_rclc_take_new_data+0x2d0>
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	6860      	ldr	r0, [r4, #4]
 800cc2e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800cc32:	e7a6      	b.n	800cb82 <_rclc_take_new_data+0xe2>
 800cc34:	f009 fba8 	bl	8016388 <rclc_action_take_goal_handle>
 800cc38:	4606      	mov	r6, r0
 800cc3a:	6860      	ldr	r0, [r4, #4]
 800cc3c:	2e00      	cmp	r6, #0
 800cc3e:	f43f af47 	beq.w	800cad0 <_rclc_take_new_data+0x30>
 800cc42:	6070      	str	r0, [r6, #4]
 800cc44:	69f2      	ldr	r2, [r6, #28]
 800cc46:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800cc4a:	3010      	adds	r0, #16
 800cc4c:	f009 f95c 	bl	8015f08 <rcl_action_take_goal_request>
 800cc50:	4605      	mov	r5, r0
 800cc52:	2800      	cmp	r0, #0
 800cc54:	f040 808e 	bne.w	800cd74 <_rclc_take_new_data+0x2d4>
 800cc58:	69f7      	ldr	r7, [r6, #28]
 800cc5a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cc5c:	7235      	strb	r5, [r6, #8]
 800cc5e:	f8c6 0009 	str.w	r0, [r6, #9]
 800cc62:	f8c6 100d 	str.w	r1, [r6, #13]
 800cc66:	6860      	ldr	r0, [r4, #4]
 800cc68:	f8c6 2011 	str.w	r2, [r6, #17]
 800cc6c:	f8c6 3015 	str.w	r3, [r6, #21]
 800cc70:	e72e      	b.n	800cad0 <_rclc_take_new_data+0x30>
 800cc72:	aa04      	add	r2, sp, #16
 800cc74:	a90a      	add	r1, sp, #40	@ 0x28
 800cc76:	3010      	adds	r0, #16
 800cc78:	f008 ff12 	bl	8015aa0 <rcl_action_take_goal_response>
 800cc7c:	4605      	mov	r5, r0
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	f47f af71 	bne.w	800cb66 <_rclc_take_new_data+0xc6>
 800cc84:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cc88:	6860      	ldr	r0, [r4, #4]
 800cc8a:	f009 fbd3 	bl	8016434 <rclc_action_find_handle_by_goal_request_sequence_number>
 800cc8e:	b130      	cbz	r0, 800cc9e <_rclc_take_new_data+0x1fe>
 800cc90:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800cc94:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800cc98:	2201      	movs	r2, #1
 800cc9a:	f880 2020 	strb.w	r2, [r0, #32]
 800cc9e:	6860      	ldr	r0, [r4, #4]
 800cca0:	e769      	b.n	800cb76 <_rclc_take_new_data+0xd6>
 800cca2:	aa04      	add	r2, sp, #16
 800cca4:	3010      	adds	r0, #16
 800cca6:	a90a      	add	r1, sp, #40	@ 0x28
 800cca8:	f009 f9a6 	bl	8015ff8 <rcl_action_take_result_request>
 800ccac:	4605      	mov	r5, r0
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	f47f af59 	bne.w	800cb66 <_rclc_take_new_data+0xc6>
 800ccb4:	6860      	ldr	r0, [r4, #4]
 800ccb6:	a904      	add	r1, sp, #16
 800ccb8:	f009 fb8c 	bl	80163d4 <rclc_action_find_goal_handle_by_uuid>
 800ccbc:	4607      	mov	r7, r0
 800ccbe:	b160      	cbz	r0, 800ccda <_rclc_take_new_data+0x23a>
 800ccc0:	ad0a      	add	r5, sp, #40	@ 0x28
 800ccc2:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800ccc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccc8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ccca:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ccce:	f04f 0c02 	mov.w	ip, #2
 800ccd2:	e886 0003 	stmia.w	r6, {r0, r1}
 800ccd6:	f887 c008 	strb.w	ip, [r7, #8]
 800ccda:	6860      	ldr	r0, [r4, #4]
 800ccdc:	2300      	movs	r3, #0
 800ccde:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800cce2:	e6fa      	b.n	800cada <_rclc_take_new_data+0x3a>
 800cce4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800cce8:	a90a      	add	r1, sp, #40	@ 0x28
 800ccea:	3010      	adds	r0, #16
 800ccec:	f008 ff90 	bl	8015c10 <rcl_action_take_cancel_response>
 800ccf0:	4605      	mov	r5, r0
 800ccf2:	2800      	cmp	r0, #0
 800ccf4:	f47f af37 	bne.w	800cb66 <_rclc_take_new_data+0xc6>
 800ccf8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ccfc:	6860      	ldr	r0, [r4, #4]
 800ccfe:	f009 fbbd 	bl	801647c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800cd02:	4606      	mov	r6, r0
 800cd04:	6860      	ldr	r0, [r4, #4]
 800cd06:	2e00      	cmp	r6, #0
 800cd08:	f43f af40 	beq.w	800cb8c <_rclc_take_new_data+0xec>
 800cd0c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800cd0e:	2701      	movs	r7, #1
 800cd10:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	f43f af3a 	beq.w	800cb8c <_rclc_take_new_data+0xec>
 800cd18:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800cd1a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800cd1e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800cd22:	f009 fb57 	bl	80163d4 <rclc_action_find_goal_handle_by_uuid>
 800cd26:	b138      	cbz	r0, 800cd38 <_rclc_take_new_data+0x298>
 800cd28:	6860      	ldr	r0, [r4, #4]
 800cd2a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800cd2c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800cd30:	3501      	adds	r5, #1
 800cd32:	42ab      	cmp	r3, r5
 800cd34:	d8f0      	bhi.n	800cd18 <_rclc_take_new_data+0x278>
 800cd36:	e729      	b.n	800cb8c <_rclc_take_new_data+0xec>
 800cd38:	6860      	ldr	r0, [r4, #4]
 800cd3a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800cd3c:	3501      	adds	r5, #1
 800cd3e:	42ab      	cmp	r3, r5
 800cd40:	d8ea      	bhi.n	800cd18 <_rclc_take_new_data+0x278>
 800cd42:	e723      	b.n	800cb8c <_rclc_take_new_data+0xec>
 800cd44:	ab06      	add	r3, sp, #24
 800cd46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cd48:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cd4c:	2103      	movs	r1, #3
 800cd4e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800cd52:	6860      	ldr	r0, [r4, #4]
 800cd54:	f009 fc08 	bl	8016568 <rclc_action_server_goal_cancel_reject>
 800cd58:	e6c4      	b.n	800cae4 <_rclc_take_new_data+0x44>
 800cd5a:	ab06      	add	r3, sp, #24
 800cd5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cd5e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cd62:	2102      	movs	r1, #2
 800cd64:	e896 000c 	ldmia.w	r6, {r2, r3}
 800cd68:	6860      	ldr	r0, [r4, #4]
 800cd6a:	f009 fbfd 	bl	8016568 <rclc_action_server_goal_cancel_reject>
 800cd6e:	e6b9      	b.n	800cae4 <_rclc_take_new_data+0x44>
 800cd70:	6860      	ldr	r0, [r4, #4]
 800cd72:	e706      	b.n	800cb82 <_rclc_take_new_data+0xe2>
 800cd74:	6860      	ldr	r0, [r4, #4]
 800cd76:	4631      	mov	r1, r6
 800cd78:	f009 fb16 	bl	80163a8 <rclc_action_remove_used_goal_handle>
 800cd7c:	f000 fe38 	bl	800d9f0 <rcutils_reset_error>
 800cd80:	e6b0      	b.n	800cae4 <_rclc_take_new_data+0x44>
 800cd82:	2501      	movs	r5, #1
 800cd84:	e6ae      	b.n	800cae4 <_rclc_take_new_data+0x44>
 800cd86:	bf00      	nop

0800cd88 <_rclc_execute.part.0>:
 800cd88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd8a:	7803      	ldrb	r3, [r0, #0]
 800cd8c:	b087      	sub	sp, #28
 800cd8e:	4604      	mov	r4, r0
 800cd90:	2b0a      	cmp	r3, #10
 800cd92:	f200 8136 	bhi.w	800d002 <_rclc_execute.part.0+0x27a>
 800cd96:	e8df f003 	tbb	[pc, r3]
 800cd9a:	435e      	.short	0x435e
 800cd9c:	06a1664f 	.word	0x06a1664f
 800cda0:	6c1e0606 	.word	0x6c1e0606
 800cda4:	59          	.byte	0x59
 800cda5:	00          	.byte	0x00
 800cda6:	2b06      	cmp	r3, #6
 800cda8:	f000 8122 	beq.w	800cff0 <_rclc_execute.part.0+0x268>
 800cdac:	2b07      	cmp	r3, #7
 800cdae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cdb0:	f040 8118 	bne.w	800cfe4 <_rclc_execute.part.0+0x25c>
 800cdb4:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800cdb8:	6880      	ldr	r0, [r0, #8]
 800cdba:	4798      	blx	r3
 800cdbc:	f104 0110 	add.w	r1, r4, #16
 800cdc0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800cdc2:	6860      	ldr	r0, [r4, #4]
 800cdc4:	f007 fbf8 	bl	80145b8 <rcl_send_response>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	d033      	beq.n	800ce34 <_rclc_execute.part.0+0xac>
 800cdcc:	9005      	str	r0, [sp, #20]
 800cdce:	f000 fe0f 	bl	800d9f0 <rcutils_reset_error>
 800cdd2:	9805      	ldr	r0, [sp, #20]
 800cdd4:	e02e      	b.n	800ce34 <_rclc_execute.part.0+0xac>
 800cdd6:	6840      	ldr	r0, [r0, #4]
 800cdd8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f000 8086 	beq.w	800ceee <_rclc_execute.part.0+0x166>
 800cde2:	2600      	movs	r6, #0
 800cde4:	2701      	movs	r7, #1
 800cde6:	e004      	b.n	800cdf2 <_rclc_execute.part.0+0x6a>
 800cde8:	f009 faa8 	bl	801633c <rclc_action_send_result_request>
 800cdec:	b998      	cbnz	r0, 800ce16 <_rclc_execute.part.0+0x8e>
 800cdee:	722f      	strb	r7, [r5, #8]
 800cdf0:	6860      	ldr	r0, [r4, #4]
 800cdf2:	f009 fb55 	bl	80164a0 <rclc_action_find_first_handle_with_goal_response>
 800cdf6:	4605      	mov	r5, r0
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d077      	beq.n	800ceec <_rclc_execute.part.0+0x164>
 800cdfc:	6863      	ldr	r3, [r4, #4]
 800cdfe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ce06:	f885 6020 	strb.w	r6, [r5, #32]
 800ce0a:	4798      	blx	r3
 800ce0c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800ce10:	4628      	mov	r0, r5
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1e8      	bne.n	800cde8 <_rclc_execute.part.0+0x60>
 800ce16:	6860      	ldr	r0, [r4, #4]
 800ce18:	4629      	mov	r1, r5
 800ce1a:	f009 fac5 	bl	80163a8 <rclc_action_remove_used_goal_handle>
 800ce1e:	e7e7      	b.n	800cdf0 <_rclc_execute.part.0+0x68>
 800ce20:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ce24:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800ce28:	2d00      	cmp	r5, #0
 800ce2a:	f000 80c9 	beq.w	800cfc0 <_rclc_execute.part.0+0x238>
 800ce2e:	6880      	ldr	r0, [r0, #8]
 800ce30:	4798      	blx	r3
 800ce32:	2000      	movs	r0, #0
 800ce34:	b007      	add	sp, #28
 800ce36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce38:	6840      	ldr	r0, [r0, #4]
 800ce3a:	f007 feef 	bl	8014c1c <rcl_timer_call>
 800ce3e:	f240 3321 	movw	r3, #801	@ 0x321
 800ce42:	4298      	cmp	r0, r3
 800ce44:	d004      	beq.n	800ce50 <_rclc_execute.part.0+0xc8>
 800ce46:	2800      	cmp	r0, #0
 800ce48:	d0f4      	beq.n	800ce34 <_rclc_execute.part.0+0xac>
 800ce4a:	e7bf      	b.n	800cdcc <_rclc_execute.part.0+0x44>
 800ce4c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ce4e:	4798      	blx	r3
 800ce50:	2000      	movs	r0, #0
 800ce52:	b007      	add	sp, #28
 800ce54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce56:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ce5a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ce5c:	b925      	cbnz	r5, 800ce68 <_rclc_execute.part.0+0xe0>
 800ce5e:	4628      	mov	r0, r5
 800ce60:	4798      	blx	r3
 800ce62:	4628      	mov	r0, r5
 800ce64:	e7e6      	b.n	800ce34 <_rclc_execute.part.0+0xac>
 800ce66:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ce68:	68a0      	ldr	r0, [r4, #8]
 800ce6a:	4798      	blx	r3
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	b007      	add	sp, #28
 800ce70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce72:	6840      	ldr	r0, [r0, #4]
 800ce74:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800ce78:	bb3b      	cbnz	r3, 800ceca <_rclc_execute.part.0+0x142>
 800ce7a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d07b      	beq.n	800cf7a <_rclc_execute.part.0+0x1f2>
 800ce82:	f640 0634 	movw	r6, #2100	@ 0x834
 800ce86:	2701      	movs	r7, #1
 800ce88:	e007      	b.n	800ce9a <_rclc_execute.part.0+0x112>
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	f009 fb20 	bl	80164d0 <rclc_action_server_response_goal_request>
 800ce90:	6860      	ldr	r0, [r4, #4]
 800ce92:	4629      	mov	r1, r5
 800ce94:	f009 fa88 	bl	80163a8 <rclc_action_remove_used_goal_handle>
 800ce98:	6860      	ldr	r0, [r4, #4]
 800ce9a:	2100      	movs	r1, #0
 800ce9c:	f009 fab2 	bl	8016404 <rclc_action_find_first_handle_by_status>
 800cea0:	4605      	mov	r5, r0
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d066      	beq.n	800cf74 <_rclc_execute.part.0+0x1ec>
 800cea6:	6863      	ldr	r3, [r4, #4]
 800cea8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ceaa:	699b      	ldr	r3, [r3, #24]
 800ceac:	4798      	blx	r3
 800ceae:	42b0      	cmp	r0, r6
 800ceb0:	f04f 0100 	mov.w	r1, #0
 800ceb4:	d1e9      	bne.n	800ce8a <_rclc_execute.part.0+0x102>
 800ceb6:	2101      	movs	r1, #1
 800ceb8:	4628      	mov	r0, r5
 800ceba:	f009 fb09 	bl	80164d0 <rclc_action_server_response_goal_request>
 800cebe:	722f      	strb	r7, [r5, #8]
 800cec0:	e7ea      	b.n	800ce98 <_rclc_execute.part.0+0x110>
 800cec2:	6848      	ldr	r0, [r1, #4]
 800cec4:	f009 fa70 	bl	80163a8 <rclc_action_remove_used_goal_handle>
 800cec8:	6860      	ldr	r0, [r4, #4]
 800ceca:	f009 faa7 	bl	801641c <rclc_action_find_first_terminated_handle>
 800cece:	4601      	mov	r1, r0
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d1f6      	bne.n	800cec2 <_rclc_execute.part.0+0x13a>
 800ced4:	6860      	ldr	r0, [r4, #4]
 800ced6:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800ceda:	e7ce      	b.n	800ce7a <_rclc_execute.part.0+0xf2>
 800cedc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cede:	6880      	ldr	r0, [r0, #8]
 800cee0:	f104 0110 	add.w	r1, r4, #16
 800cee4:	4798      	blx	r3
 800cee6:	2000      	movs	r0, #0
 800cee8:	b007      	add	sp, #28
 800ceea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceec:	6860      	ldr	r0, [r4, #4]
 800ceee:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800cef2:	b18b      	cbz	r3, 800cf18 <_rclc_execute.part.0+0x190>
 800cef4:	68c5      	ldr	r5, [r0, #12]
 800cef6:	b32d      	cbz	r5, 800cf44 <_rclc_execute.part.0+0x1bc>
 800cef8:	2600      	movs	r6, #0
 800cefa:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800cefe:	b143      	cbz	r3, 800cf12 <_rclc_execute.part.0+0x18a>
 800cf00:	69c3      	ldr	r3, [r0, #28]
 800cf02:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800cf06:	b123      	cbz	r3, 800cf12 <_rclc_execute.part.0+0x18a>
 800cf08:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cf0a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	4798      	blx	r3
 800cf10:	6860      	ldr	r0, [r4, #4]
 800cf12:	682d      	ldr	r5, [r5, #0]
 800cf14:	2d00      	cmp	r5, #0
 800cf16:	d1f0      	bne.n	800cefa <_rclc_execute.part.0+0x172>
 800cf18:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800cf1c:	b193      	cbz	r3, 800cf44 <_rclc_execute.part.0+0x1bc>
 800cf1e:	68c5      	ldr	r5, [r0, #12]
 800cf20:	b185      	cbz	r5, 800cf44 <_rclc_execute.part.0+0x1bc>
 800cf22:	2600      	movs	r6, #0
 800cf24:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800cf28:	b14b      	cbz	r3, 800cf3e <_rclc_execute.part.0+0x1b6>
 800cf2a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800cf2c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800cf30:	b12b      	cbz	r3, 800cf3e <_rclc_execute.part.0+0x1b6>
 800cf32:	4628      	mov	r0, r5
 800cf34:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800cf38:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cf3a:	4798      	blx	r3
 800cf3c:	6860      	ldr	r0, [r4, #4]
 800cf3e:	682d      	ldr	r5, [r5, #0]
 800cf40:	2d00      	cmp	r5, #0
 800cf42:	d1ef      	bne.n	800cf24 <_rclc_execute.part.0+0x19c>
 800cf44:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d081      	beq.n	800ce50 <_rclc_execute.part.0+0xc8>
 800cf4c:	2700      	movs	r7, #0
 800cf4e:	e00b      	b.n	800cf68 <_rclc_execute.part.0+0x1e0>
 800cf50:	6863      	ldr	r3, [r4, #4]
 800cf52:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cf54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800cf56:	6a1e      	ldr	r6, [r3, #32]
 800cf58:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800cf5c:	47b0      	blx	r6
 800cf5e:	6860      	ldr	r0, [r4, #4]
 800cf60:	4629      	mov	r1, r5
 800cf62:	f009 fa21 	bl	80163a8 <rclc_action_remove_used_goal_handle>
 800cf66:	6860      	ldr	r0, [r4, #4]
 800cf68:	f009 faa6 	bl	80164b8 <rclc_action_find_first_handle_with_result_response>
 800cf6c:	4605      	mov	r5, r0
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	d1ee      	bne.n	800cf50 <_rclc_execute.part.0+0x1c8>
 800cf72:	e76d      	b.n	800ce50 <_rclc_execute.part.0+0xc8>
 800cf74:	6860      	ldr	r0, [r4, #4]
 800cf76:	f880 5020 	strb.w	r5, [r0, #32]
 800cf7a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f43f af66 	beq.w	800ce50 <_rclc_execute.part.0+0xc8>
 800cf84:	68c5      	ldr	r5, [r0, #12]
 800cf86:	b1b5      	cbz	r5, 800cfb6 <_rclc_execute.part.0+0x22e>
 800cf88:	2602      	movs	r6, #2
 800cf8a:	e001      	b.n	800cf90 <_rclc_execute.part.0+0x208>
 800cf8c:	682d      	ldr	r5, [r5, #0]
 800cf8e:	b195      	cbz	r5, 800cfb6 <_rclc_execute.part.0+0x22e>
 800cf90:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800cf94:	2b03      	cmp	r3, #3
 800cf96:	d1f9      	bne.n	800cf8c <_rclc_execute.part.0+0x204>
 800cf98:	69c3      	ldr	r3, [r0, #28]
 800cf9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	4798      	blx	r3
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800cfac:	b163      	cbz	r3, 800cfc8 <_rclc_execute.part.0+0x240>
 800cfae:	f009 faaf 	bl	8016510 <rclc_action_server_goal_cancel_accept>
 800cfb2:	6860      	ldr	r0, [r4, #4]
 800cfb4:	e7ea      	b.n	800cf8c <_rclc_execute.part.0+0x204>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	e739      	b.n	800ce34 <_rclc_execute.part.0+0xac>
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	4798      	blx	r3
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	e735      	b.n	800ce34 <_rclc_execute.part.0+0xac>
 800cfc8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800cfca:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cfce:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800cfd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfd6:	6860      	ldr	r0, [r4, #4]
 800cfd8:	2101      	movs	r1, #1
 800cfda:	f009 fac5 	bl	8016568 <rclc_action_server_goal_cancel_reject>
 800cfde:	722e      	strb	r6, [r5, #8]
 800cfe0:	6860      	ldr	r0, [r4, #4]
 800cfe2:	e7d3      	b.n	800cf8c <_rclc_execute.part.0+0x204>
 800cfe4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cfe6:	6880      	ldr	r0, [r0, #8]
 800cfe8:	4798      	blx	r3
 800cfea:	f104 0110 	add.w	r1, r4, #16
 800cfee:	e6e7      	b.n	800cdc0 <_rclc_execute.part.0+0x38>
 800cff0:	f100 0110 	add.w	r1, r0, #16
 800cff4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cff6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800cff8:	6880      	ldr	r0, [r0, #8]
 800cffa:	9105      	str	r1, [sp, #20]
 800cffc:	4798      	blx	r3
 800cffe:	9905      	ldr	r1, [sp, #20]
 800d000:	e6de      	b.n	800cdc0 <_rclc_execute.part.0+0x38>
 800d002:	2001      	movs	r0, #1
 800d004:	e716      	b.n	800ce34 <_rclc_execute.part.0+0xac>
 800d006:	bf00      	nop

0800d008 <rclc_executor_trigger_any>:
 800d008:	2800      	cmp	r0, #0
 800d00a:	d03f      	beq.n	800d08c <rclc_executor_trigger_any+0x84>
 800d00c:	2900      	cmp	r1, #0
 800d00e:	d03e      	beq.n	800d08e <rclc_executor_trigger_any+0x86>
 800d010:	4603      	mov	r3, r0
 800d012:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800d016:	2200      	movs	r2, #0
 800d018:	2800      	cmp	r0, #0
 800d01a:	d037      	beq.n	800d08c <rclc_executor_trigger_any+0x84>
 800d01c:	b430      	push	{r4, r5}
 800d01e:	f893 c000 	ldrb.w	ip, [r3]
 800d022:	f1bc 0f08 	cmp.w	ip, #8
 800d026:	d11e      	bne.n	800d066 <rclc_executor_trigger_any+0x5e>
 800d028:	685c      	ldr	r4, [r3, #4]
 800d02a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800d02c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800d030:	d105      	bne.n	800d03e <rclc_executor_trigger_any+0x36>
 800d032:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800d036:	b910      	cbnz	r0, 800d03e <rclc_executor_trigger_any+0x36>
 800d038:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800d03c:	b128      	cbz	r0, 800d04a <rclc_executor_trigger_any+0x42>
 800d03e:	bc30      	pop	{r4, r5}
 800d040:	4770      	bx	lr
 800d042:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800d046:	2800      	cmp	r0, #0
 800d048:	d1f9      	bne.n	800d03e <rclc_executor_trigger_any+0x36>
 800d04a:	3201      	adds	r2, #1
 800d04c:	4291      	cmp	r1, r2
 800d04e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d052:	d018      	beq.n	800d086 <rclc_executor_trigger_any+0x7e>
 800d054:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800d058:	2800      	cmp	r0, #0
 800d05a:	d0f0      	beq.n	800d03e <rclc_executor_trigger_any+0x36>
 800d05c:	f893 c000 	ldrb.w	ip, [r3]
 800d060:	f1bc 0f08 	cmp.w	ip, #8
 800d064:	d0e0      	beq.n	800d028 <rclc_executor_trigger_any+0x20>
 800d066:	f1bc 0f09 	cmp.w	ip, #9
 800d06a:	d1ea      	bne.n	800d042 <rclc_executor_trigger_any+0x3a>
 800d06c:	685c      	ldr	r4, [r3, #4]
 800d06e:	6a25      	ldr	r5, [r4, #32]
 800d070:	2d00      	cmp	r5, #0
 800d072:	d1e4      	bne.n	800d03e <rclc_executor_trigger_any+0x36>
 800d074:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800d078:	2800      	cmp	r0, #0
 800d07a:	d1e0      	bne.n	800d03e <rclc_executor_trigger_any+0x36>
 800d07c:	3201      	adds	r2, #1
 800d07e:	4291      	cmp	r1, r2
 800d080:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d084:	d1e6      	bne.n	800d054 <rclc_executor_trigger_any+0x4c>
 800d086:	2000      	movs	r0, #0
 800d088:	bc30      	pop	{r4, r5}
 800d08a:	4770      	bx	lr
 800d08c:	4770      	bx	lr
 800d08e:	4608      	mov	r0, r1
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop

0800d094 <rclc_executor_get_zero_initialized_executor>:
 800d094:	b510      	push	{r4, lr}
 800d096:	4903      	ldr	r1, [pc, #12]	@ (800d0a4 <rclc_executor_get_zero_initialized_executor+0x10>)
 800d098:	4604      	mov	r4, r0
 800d09a:	2288      	movs	r2, #136	@ 0x88
 800d09c:	f00c fccb 	bl	8019a36 <memcpy>
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	bd10      	pop	{r4, pc}
 800d0a4:	0801b540 	.word	0x0801b540

0800d0a8 <rclc_executor_init>:
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	d05f      	beq.n	800d16c <rclc_executor_init+0xc4>
 800d0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b0:	460c      	mov	r4, r1
 800d0b2:	b0b0      	sub	sp, #192	@ 0xc0
 800d0b4:	2900      	cmp	r1, #0
 800d0b6:	d051      	beq.n	800d15c <rclc_executor_init+0xb4>
 800d0b8:	4605      	mov	r5, r0
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	4616      	mov	r6, r2
 800d0be:	461f      	mov	r7, r3
 800d0c0:	f000 fc70 	bl	800d9a4 <rcutils_allocator_is_valid>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	d049      	beq.n	800d15c <rclc_executor_init+0xb4>
 800d0c8:	2e00      	cmp	r6, #0
 800d0ca:	d047      	beq.n	800d15c <rclc_executor_init+0xb4>
 800d0cc:	492c      	ldr	r1, [pc, #176]	@ (800d180 <rclc_executor_init+0xd8>)
 800d0ce:	2288      	movs	r2, #136	@ 0x88
 800d0d0:	a80e      	add	r0, sp, #56	@ 0x38
 800d0d2:	f00c fcb0 	bl	8019a36 <memcpy>
 800d0d6:	a90e      	add	r1, sp, #56	@ 0x38
 800d0d8:	2288      	movs	r2, #136	@ 0x88
 800d0da:	4628      	mov	r0, r5
 800d0dc:	f00c fcab 	bl	8019a36 <memcpy>
 800d0e0:	602c      	str	r4, [r5, #0]
 800d0e2:	4668      	mov	r0, sp
 800d0e4:	60ae      	str	r6, [r5, #8]
 800d0e6:	466c      	mov	r4, sp
 800d0e8:	f007 ff0a 	bl	8014f00 <rcl_get_zero_initialized_wait_set>
 800d0ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d0ee:	f105 0c14 	add.w	ip, r5, #20
 800d0f2:	f8d7 8000 	ldr.w	r8, [r7]
 800d0f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d0fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d0fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d102:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d106:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d178 <rclc_executor_init+0xd0>
 800d10a:	6823      	ldr	r3, [r4, #0]
 800d10c:	f8cc 3000 	str.w	r3, [ip]
 800d110:	6939      	ldr	r1, [r7, #16]
 800d112:	612f      	str	r7, [r5, #16]
 800d114:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800d118:	01b0      	lsls	r0, r6, #6
 800d11a:	47c0      	blx	r8
 800d11c:	6068      	str	r0, [r5, #4]
 800d11e:	b338      	cbz	r0, 800d170 <rclc_executor_init+0xc8>
 800d120:	2400      	movs	r4, #0
 800d122:	e000      	b.n	800d126 <rclc_executor_init+0x7e>
 800d124:	6868      	ldr	r0, [r5, #4]
 800d126:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d12a:	4631      	mov	r1, r6
 800d12c:	3401      	adds	r4, #1
 800d12e:	f000 faa3 	bl	800d678 <rclc_executor_handle_init>
 800d132:	42a6      	cmp	r6, r4
 800d134:	d1f6      	bne.n	800d124 <rclc_executor_init+0x7c>
 800d136:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800d13a:	f000 fa93 	bl	800d664 <rclc_executor_handle_counters_zero_init>
 800d13e:	4a11      	ldr	r2, [pc, #68]	@ (800d184 <rclc_executor_init+0xdc>)
 800d140:	686b      	ldr	r3, [r5, #4]
 800d142:	2000      	movs	r0, #0
 800d144:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800d148:	b163      	cbz	r3, 800d164 <rclc_executor_init+0xbc>
 800d14a:	692b      	ldr	r3, [r5, #16]
 800d14c:	b153      	cbz	r3, 800d164 <rclc_executor_init+0xbc>
 800d14e:	68ab      	ldr	r3, [r5, #8]
 800d150:	b143      	cbz	r3, 800d164 <rclc_executor_init+0xbc>
 800d152:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800d156:	b030      	add	sp, #192	@ 0xc0
 800d158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d15c:	200b      	movs	r0, #11
 800d15e:	b030      	add	sp, #192	@ 0xc0
 800d160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d164:	4618      	mov	r0, r3
 800d166:	b030      	add	sp, #192	@ 0xc0
 800d168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d16c:	200b      	movs	r0, #11
 800d16e:	4770      	bx	lr
 800d170:	200a      	movs	r0, #10
 800d172:	e7f4      	b.n	800d15e <rclc_executor_init+0xb6>
 800d174:	f3af 8000 	nop.w
 800d178:	3b9aca00 	.word	0x3b9aca00
 800d17c:	00000000 	.word	0x00000000
 800d180:	0801b540 	.word	0x0801b540
 800d184:	0800d009 	.word	0x0800d009

0800d188 <rclc_executor_add_timer>:
 800d188:	b300      	cbz	r0, 800d1cc <rclc_executor_add_timer+0x44>
 800d18a:	b1f9      	cbz	r1, 800d1cc <rclc_executor_add_timer+0x44>
 800d18c:	b538      	push	{r3, r4, r5, lr}
 800d18e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800d192:	4293      	cmp	r3, r2
 800d194:	4604      	mov	r4, r0
 800d196:	d301      	bcc.n	800d19c <rclc_executor_add_timer+0x14>
 800d198:	2001      	movs	r0, #1
 800d19a:	bd38      	pop	{r3, r4, r5, pc}
 800d19c:	6840      	ldr	r0, [r0, #4]
 800d19e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800d1a2:	019d      	lsls	r5, r3, #6
 800d1a4:	6051      	str	r1, [r2, #4]
 800d1a6:	2102      	movs	r1, #2
 800d1a8:	5341      	strh	r1, [r0, r5]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	2000      	movs	r0, #0
 800d1ae:	2101      	movs	r1, #1
 800d1b0:	f104 0514 	add.w	r5, r4, #20
 800d1b4:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800d1b6:	8711      	strh	r1, [r2, #56]	@ 0x38
 800d1b8:	4628      	mov	r0, r5
 800d1ba:	60e3      	str	r3, [r4, #12]
 800d1bc:	f007 feb4 	bl	8014f28 <rcl_wait_set_is_valid>
 800d1c0:	b930      	cbnz	r0, 800d1d0 <rclc_executor_add_timer+0x48>
 800d1c2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800d1ca:	bd38      	pop	{r3, r4, r5, pc}
 800d1cc:	200b      	movs	r0, #11
 800d1ce:	4770      	bx	lr
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	f007 feaf 	bl	8014f34 <rcl_wait_set_fini>
 800d1d6:	2800      	cmp	r0, #0
 800d1d8:	d0f3      	beq.n	800d1c2 <rclc_executor_add_timer+0x3a>
 800d1da:	bd38      	pop	{r3, r4, r5, pc}

0800d1dc <rclc_executor_add_service>:
 800d1dc:	b370      	cbz	r0, 800d23c <rclc_executor_add_service+0x60>
 800d1de:	b369      	cbz	r1, 800d23c <rclc_executor_add_service+0x60>
 800d1e0:	b362      	cbz	r2, 800d23c <rclc_executor_add_service+0x60>
 800d1e2:	b35b      	cbz	r3, 800d23c <rclc_executor_add_service+0x60>
 800d1e4:	b538      	push	{r3, r4, r5, lr}
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	9804      	ldr	r0, [sp, #16]
 800d1ea:	b378      	cbz	r0, 800d24c <rclc_executor_add_service+0x70>
 800d1ec:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 800d1f0:	42a8      	cmp	r0, r5
 800d1f2:	d301      	bcc.n	800d1f8 <rclc_executor_add_service+0x1c>
 800d1f4:	2001      	movs	r0, #1
 800d1f6:	bd38      	pop	{r3, r4, r5, pc}
 800d1f8:	6865      	ldr	r5, [r4, #4]
 800d1fa:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800d1fe:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800d202:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800d206:	9b04      	ldr	r3, [sp, #16]
 800d208:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800d20c:	2305      	movs	r3, #5
 800d20e:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800d212:	3001      	adds	r0, #1
 800d214:	f825 300e 	strh.w	r3, [r5, lr]
 800d218:	2201      	movs	r2, #1
 800d21a:	2300      	movs	r3, #0
 800d21c:	f104 0514 	add.w	r5, r4, #20
 800d220:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800d224:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800d228:	60e0      	str	r0, [r4, #12]
 800d22a:	4628      	mov	r0, r5
 800d22c:	f007 fe7c 	bl	8014f28 <rcl_wait_set_is_valid>
 800d230:	b930      	cbnz	r0, 800d240 <rclc_executor_add_service+0x64>
 800d232:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d234:	3301      	adds	r3, #1
 800d236:	2000      	movs	r0, #0
 800d238:	6563      	str	r3, [r4, #84]	@ 0x54
 800d23a:	bd38      	pop	{r3, r4, r5, pc}
 800d23c:	200b      	movs	r0, #11
 800d23e:	4770      	bx	lr
 800d240:	4628      	mov	r0, r5
 800d242:	f007 fe77 	bl	8014f34 <rcl_wait_set_fini>
 800d246:	2800      	cmp	r0, #0
 800d248:	d0f3      	beq.n	800d232 <rclc_executor_add_service+0x56>
 800d24a:	e7d4      	b.n	800d1f6 <rclc_executor_add_service+0x1a>
 800d24c:	200b      	movs	r0, #11
 800d24e:	bd38      	pop	{r3, r4, r5, pc}

0800d250 <rclc_executor_prepare>:
 800d250:	2800      	cmp	r0, #0
 800d252:	d044      	beq.n	800d2de <rclc_executor_prepare+0x8e>
 800d254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d256:	f100 0514 	add.w	r5, r0, #20
 800d25a:	b09b      	sub	sp, #108	@ 0x6c
 800d25c:	4604      	mov	r4, r0
 800d25e:	4628      	mov	r0, r5
 800d260:	f007 fe62 	bl	8014f28 <rcl_wait_set_is_valid>
 800d264:	b110      	cbz	r0, 800d26c <rclc_executor_prepare+0x1c>
 800d266:	2000      	movs	r0, #0
 800d268:	b01b      	add	sp, #108	@ 0x6c
 800d26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d26c:	4628      	mov	r0, r5
 800d26e:	f007 fe61 	bl	8014f34 <rcl_wait_set_fini>
 800d272:	2800      	cmp	r0, #0
 800d274:	d130      	bne.n	800d2d8 <rclc_executor_prepare+0x88>
 800d276:	a80c      	add	r0, sp, #48	@ 0x30
 800d278:	f007 fe42 	bl	8014f00 <rcl_get_zero_initialized_wait_set>
 800d27c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d280:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d284:	46ae      	mov	lr, r5
 800d286:	6927      	ldr	r7, [r4, #16]
 800d288:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d28c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d290:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d294:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d298:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d29c:	f8dc 3000 	ldr.w	r3, [ip]
 800d2a0:	f8ce 3000 	str.w	r3, [lr]
 800d2a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d2a6:	ae04      	add	r6, sp, #16
 800d2a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	6822      	ldr	r2, [r4, #0]
 800d2ae:	6033      	str	r3, [r6, #0]
 800d2b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2b2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800d2b4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d2b8:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800d2bc:	e9cd 2100 	strd	r2, r1, [sp]
 800d2c0:	4628      	mov	r0, r5
 800d2c2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800d2c4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d2c6:	f008 f933 	bl	8015530 <rcl_wait_set_init>
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	d0cc      	beq.n	800d268 <rclc_executor_prepare+0x18>
 800d2ce:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d2d0:	f000 fb8e 	bl	800d9f0 <rcutils_reset_error>
 800d2d4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d2d6:	e7c7      	b.n	800d268 <rclc_executor_prepare+0x18>
 800d2d8:	f000 fb8a 	bl	800d9f0 <rcutils_reset_error>
 800d2dc:	e7cb      	b.n	800d276 <rclc_executor_prepare+0x26>
 800d2de:	200b      	movs	r0, #11
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop

0800d2e4 <rclc_executor_spin_some.part.0>:
 800d2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e8:	f100 0614 	add.w	r6, r0, #20
 800d2ec:	b083      	sub	sp, #12
 800d2ee:	4691      	mov	r9, r2
 800d2f0:	4698      	mov	r8, r3
 800d2f2:	4605      	mov	r5, r0
 800d2f4:	f7ff ffac 	bl	800d250 <rclc_executor_prepare>
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	f007 fee7 	bl	80150cc <rcl_wait_set_clear>
 800d2fe:	4607      	mov	r7, r0
 800d300:	2800      	cmp	r0, #0
 800d302:	f040 80ed 	bne.w	800d4e0 <rclc_executor_spin_some.part.0+0x1fc>
 800d306:	68ab      	ldr	r3, [r5, #8]
 800d308:	4604      	mov	r4, r0
 800d30a:	b303      	cbz	r3, 800d34e <rclc_executor_spin_some.part.0+0x6a>
 800d30c:	6869      	ldr	r1, [r5, #4]
 800d30e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800d312:	01a2      	lsls	r2, r4, #6
 800d314:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800d318:	b1cb      	cbz	r3, 800d34e <rclc_executor_spin_some.part.0+0x6a>
 800d31a:	5c8b      	ldrb	r3, [r1, r2]
 800d31c:	2b0a      	cmp	r3, #10
 800d31e:	f200 80d8 	bhi.w	800d4d2 <rclc_executor_spin_some.part.0+0x1ee>
 800d322:	e8df f003 	tbb	[pc, r3]
 800d326:	9c9c      	.short	0x9c9c
 800d328:	068c8ca7 	.word	0x068c8ca7
 800d32c:	bdc90606 	.word	0xbdc90606
 800d330:	b2          	.byte	0xb2
 800d331:	00          	.byte	0x00
 800d332:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d336:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d33a:	4630      	mov	r0, r6
 800d33c:	f008 fa0e 	bl	801575c <rcl_wait_set_add_service>
 800d340:	2800      	cmp	r0, #0
 800d342:	f040 8086 	bne.w	800d452 <rclc_executor_spin_some.part.0+0x16e>
 800d346:	68ab      	ldr	r3, [r5, #8]
 800d348:	3401      	adds	r4, #1
 800d34a:	429c      	cmp	r4, r3
 800d34c:	d3de      	bcc.n	800d30c <rclc_executor_spin_some.part.0+0x28>
 800d34e:	4643      	mov	r3, r8
 800d350:	464a      	mov	r2, r9
 800d352:	4630      	mov	r0, r6
 800d354:	f008 fa30 	bl	80157b8 <rcl_wait>
 800d358:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f000 80c7 	beq.w	800d4f0 <rclc_executor_spin_some.part.0+0x20c>
 800d362:	2b01      	cmp	r3, #1
 800d364:	f040 80b5 	bne.w	800d4d2 <rclc_executor_spin_some.part.0+0x1ee>
 800d368:	68ab      	ldr	r3, [r5, #8]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	f000 8159 	beq.w	800d622 <rclc_executor_spin_some.part.0+0x33e>
 800d370:	2400      	movs	r4, #0
 800d372:	46a0      	mov	r8, r4
 800d374:	f240 1991 	movw	r9, #401	@ 0x191
 800d378:	e00a      	b.n	800d390 <rclc_executor_spin_some.part.0+0xac>
 800d37a:	f7ff fb43 	bl	800ca04 <_rclc_check_for_new_data>
 800d37e:	4604      	mov	r4, r0
 800d380:	b110      	cbz	r0, 800d388 <rclc_executor_spin_some.part.0+0xa4>
 800d382:	4548      	cmp	r0, r9
 800d384:	f040 80b2 	bne.w	800d4ec <rclc_executor_spin_some.part.0+0x208>
 800d388:	68ab      	ldr	r3, [r5, #8]
 800d38a:	4598      	cmp	r8, r3
 800d38c:	f080 8126 	bcs.w	800d5dc <rclc_executor_spin_some.part.0+0x2f8>
 800d390:	686a      	ldr	r2, [r5, #4]
 800d392:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d396:	4631      	mov	r1, r6
 800d398:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d39c:	f108 0801 	add.w	r8, r8, #1
 800d3a0:	f1bc 0f00 	cmp.w	ip, #0
 800d3a4:	d1e9      	bne.n	800d37a <rclc_executor_spin_some.part.0+0x96>
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	4610      	mov	r0, r2
 800d3aa:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d3ae:	4798      	blx	r3
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	f000 809b 	beq.w	800d4ec <rclc_executor_spin_some.part.0+0x208>
 800d3b6:	68ab      	ldr	r3, [r5, #8]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f000 8097 	beq.w	800d4ec <rclc_executor_spin_some.part.0+0x208>
 800d3be:	f04f 0800 	mov.w	r8, #0
 800d3c2:	f240 1991 	movw	r9, #401	@ 0x191
 800d3c6:	e009      	b.n	800d3dc <rclc_executor_spin_some.part.0+0xf8>
 800d3c8:	f7ff fb6a 	bl	800caa0 <_rclc_take_new_data>
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	b110      	cbz	r0, 800d3d6 <rclc_executor_spin_some.part.0+0xf2>
 800d3d0:	4548      	cmp	r0, r9
 800d3d2:	f040 808b 	bne.w	800d4ec <rclc_executor_spin_some.part.0+0x208>
 800d3d6:	68ab      	ldr	r3, [r5, #8]
 800d3d8:	4598      	cmp	r8, r3
 800d3da:	d209      	bcs.n	800d3f0 <rclc_executor_spin_some.part.0+0x10c>
 800d3dc:	6868      	ldr	r0, [r5, #4]
 800d3de:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d3e2:	4631      	mov	r1, r6
 800d3e4:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800d3e8:	f108 0801 	add.w	r8, r8, #1
 800d3ec:	2a00      	cmp	r2, #0
 800d3ee:	d1eb      	bne.n	800d3c8 <rclc_executor_spin_some.part.0+0xe4>
 800d3f0:	2600      	movs	r6, #0
 800d3f2:	b97b      	cbnz	r3, 800d414 <rclc_executor_spin_some.part.0+0x130>
 800d3f4:	e07a      	b.n	800d4ec <rclc_executor_spin_some.part.0+0x208>
 800d3f6:	f812 200c 	ldrb.w	r2, [r2, ip]
 800d3fa:	2a08      	cmp	r2, #8
 800d3fc:	f000 80fd 	beq.w	800d5fa <rclc_executor_spin_some.part.0+0x316>
 800d400:	2a09      	cmp	r2, #9
 800d402:	f000 80ef 	beq.w	800d5e4 <rclc_executor_spin_some.part.0+0x300>
 800d406:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800d40a:	b98a      	cbnz	r2, 800d430 <rclc_executor_spin_some.part.0+0x14c>
 800d40c:	3601      	adds	r6, #1
 800d40e:	429e      	cmp	r6, r3
 800d410:	d262      	bcs.n	800d4d8 <rclc_executor_spin_some.part.0+0x1f4>
 800d412:	2400      	movs	r4, #0
 800d414:	686a      	ldr	r2, [r5, #4]
 800d416:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d41a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800d41e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800d422:	2900      	cmp	r1, #0
 800d424:	d062      	beq.n	800d4ec <rclc_executor_spin_some.part.0+0x208>
 800d426:	7841      	ldrb	r1, [r0, #1]
 800d428:	2900      	cmp	r1, #0
 800d42a:	d0e4      	beq.n	800d3f6 <rclc_executor_spin_some.part.0+0x112>
 800d42c:	2901      	cmp	r1, #1
 800d42e:	d1ed      	bne.n	800d40c <rclc_executor_spin_some.part.0+0x128>
 800d430:	f7ff fcaa 	bl	800cd88 <_rclc_execute.part.0>
 800d434:	2800      	cmp	r0, #0
 800d436:	f040 80b6 	bne.w	800d5a6 <rclc_executor_spin_some.part.0+0x2c2>
 800d43a:	68ab      	ldr	r3, [r5, #8]
 800d43c:	e7e6      	b.n	800d40c <rclc_executor_spin_some.part.0+0x128>
 800d43e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d442:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d446:	4630      	mov	r0, r6
 800d448:	f008 f95c 	bl	8015704 <rcl_wait_set_add_client>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	f43f af7a 	beq.w	800d346 <rclc_executor_spin_some.part.0+0x62>
 800d452:	9001      	str	r0, [sp, #4]
 800d454:	f000 facc 	bl	800d9f0 <rcutils_reset_error>
 800d458:	9801      	ldr	r0, [sp, #4]
 800d45a:	4607      	mov	r7, r0
 800d45c:	e03c      	b.n	800d4d8 <rclc_executor_spin_some.part.0+0x1f4>
 800d45e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d462:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d466:	4630      	mov	r0, r6
 800d468:	f007 fe04 	bl	8015074 <rcl_wait_set_add_subscription>
 800d46c:	2800      	cmp	r0, #0
 800d46e:	f43f af6a 	beq.w	800d346 <rclc_executor_spin_some.part.0+0x62>
 800d472:	e7ee      	b.n	800d452 <rclc_executor_spin_some.part.0+0x16e>
 800d474:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d478:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d47c:	4630      	mov	r0, r6
 800d47e:	f008 f911 	bl	80156a4 <rcl_wait_set_add_timer>
 800d482:	2800      	cmp	r0, #0
 800d484:	f43f af5f 	beq.w	800d346 <rclc_executor_spin_some.part.0+0x62>
 800d488:	e7e3      	b.n	800d452 <rclc_executor_spin_some.part.0+0x16e>
 800d48a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d48e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d492:	4630      	mov	r0, r6
 800d494:	f008 f8da 	bl	801564c <rcl_wait_set_add_guard_condition>
 800d498:	2800      	cmp	r0, #0
 800d49a:	f43f af54 	beq.w	800d346 <rclc_executor_spin_some.part.0+0x62>
 800d49e:	e7d8      	b.n	800d452 <rclc_executor_spin_some.part.0+0x16e>
 800d4a0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d4a4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d4a8:	3110      	adds	r1, #16
 800d4aa:	4630      	mov	r0, r6
 800d4ac:	f008 fe5c 	bl	8016168 <rcl_action_wait_set_add_action_server>
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	f43f af48 	beq.w	800d346 <rclc_executor_spin_some.part.0+0x62>
 800d4b6:	e7cc      	b.n	800d452 <rclc_executor_spin_some.part.0+0x16e>
 800d4b8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d4bc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d4c0:	3110      	adds	r1, #16
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	4630      	mov	r0, r6
 800d4c6:	f008 fc27 	bl	8015d18 <rcl_action_wait_set_add_action_client>
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	f43f af3b 	beq.w	800d346 <rclc_executor_spin_some.part.0+0x62>
 800d4d0:	e7bf      	b.n	800d452 <rclc_executor_spin_some.part.0+0x16e>
 800d4d2:	f000 fa8d 	bl	800d9f0 <rcutils_reset_error>
 800d4d6:	2701      	movs	r7, #1
 800d4d8:	4638      	mov	r0, r7
 800d4da:	b003      	add	sp, #12
 800d4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4e0:	f000 fa86 	bl	800d9f0 <rcutils_reset_error>
 800d4e4:	4638      	mov	r0, r7
 800d4e6:	b003      	add	sp, #12
 800d4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ec:	4627      	mov	r7, r4
 800d4ee:	e7f3      	b.n	800d4d8 <rclc_executor_spin_some.part.0+0x1f4>
 800d4f0:	68ab      	ldr	r3, [r5, #8]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	f000 8092 	beq.w	800d61c <rclc_executor_spin_some.part.0+0x338>
 800d4f8:	2400      	movs	r4, #0
 800d4fa:	46a0      	mov	r8, r4
 800d4fc:	f240 1991 	movw	r9, #401	@ 0x191
 800d500:	e008      	b.n	800d514 <rclc_executor_spin_some.part.0+0x230>
 800d502:	f7ff fa7f 	bl	800ca04 <_rclc_check_for_new_data>
 800d506:	4604      	mov	r4, r0
 800d508:	b108      	cbz	r0, 800d50e <rclc_executor_spin_some.part.0+0x22a>
 800d50a:	4548      	cmp	r0, r9
 800d50c:	d1ee      	bne.n	800d4ec <rclc_executor_spin_some.part.0+0x208>
 800d50e:	68ab      	ldr	r3, [r5, #8]
 800d510:	4598      	cmp	r8, r3
 800d512:	d265      	bcs.n	800d5e0 <rclc_executor_spin_some.part.0+0x2fc>
 800d514:	686a      	ldr	r2, [r5, #4]
 800d516:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d51a:	4631      	mov	r1, r6
 800d51c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d520:	f108 0801 	add.w	r8, r8, #1
 800d524:	f1bc 0f00 	cmp.w	ip, #0
 800d528:	d1eb      	bne.n	800d502 <rclc_executor_spin_some.part.0+0x21e>
 800d52a:	4619      	mov	r1, r3
 800d52c:	4610      	mov	r0, r2
 800d52e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d532:	4798      	blx	r3
 800d534:	2800      	cmp	r0, #0
 800d536:	d0d9      	beq.n	800d4ec <rclc_executor_spin_some.part.0+0x208>
 800d538:	68ab      	ldr	r3, [r5, #8]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d0d6      	beq.n	800d4ec <rclc_executor_spin_some.part.0+0x208>
 800d53e:	f04f 0800 	mov.w	r8, #0
 800d542:	f240 1991 	movw	r9, #401	@ 0x191
 800d546:	f240 2a59 	movw	sl, #601	@ 0x259
 800d54a:	e00e      	b.n	800d56a <rclc_executor_spin_some.part.0+0x286>
 800d54c:	f813 300b 	ldrb.w	r3, [r3, fp]
 800d550:	2b08      	cmp	r3, #8
 800d552:	d033      	beq.n	800d5bc <rclc_executor_spin_some.part.0+0x2d8>
 800d554:	2b09      	cmp	r3, #9
 800d556:	d028      	beq.n	800d5aa <rclc_executor_spin_some.part.0+0x2c6>
 800d558:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800d55c:	b9fb      	cbnz	r3, 800d59e <rclc_executor_spin_some.part.0+0x2ba>
 800d55e:	68ab      	ldr	r3, [r5, #8]
 800d560:	f108 0801 	add.w	r8, r8, #1
 800d564:	4598      	cmp	r8, r3
 800d566:	d2b7      	bcs.n	800d4d8 <rclc_executor_spin_some.part.0+0x1f4>
 800d568:	2400      	movs	r4, #0
 800d56a:	6868      	ldr	r0, [r5, #4]
 800d56c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d570:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800d574:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d0b7      	beq.n	800d4ec <rclc_executor_spin_some.part.0+0x208>
 800d57c:	4631      	mov	r1, r6
 800d57e:	f7ff fa8f 	bl	800caa0 <_rclc_take_new_data>
 800d582:	b118      	cbz	r0, 800d58c <rclc_executor_spin_some.part.0+0x2a8>
 800d584:	4548      	cmp	r0, r9
 800d586:	d001      	beq.n	800d58c <rclc_executor_spin_some.part.0+0x2a8>
 800d588:	4550      	cmp	r0, sl
 800d58a:	d10c      	bne.n	800d5a6 <rclc_executor_spin_some.part.0+0x2c2>
 800d58c:	686b      	ldr	r3, [r5, #4]
 800d58e:	eb13 000b 	adds.w	r0, r3, fp
 800d592:	d021      	beq.n	800d5d8 <rclc_executor_spin_some.part.0+0x2f4>
 800d594:	7842      	ldrb	r2, [r0, #1]
 800d596:	2a00      	cmp	r2, #0
 800d598:	d0d8      	beq.n	800d54c <rclc_executor_spin_some.part.0+0x268>
 800d59a:	2a01      	cmp	r2, #1
 800d59c:	d1df      	bne.n	800d55e <rclc_executor_spin_some.part.0+0x27a>
 800d59e:	f7ff fbf3 	bl	800cd88 <_rclc_execute.part.0>
 800d5a2:	2800      	cmp	r0, #0
 800d5a4:	d0db      	beq.n	800d55e <rclc_executor_spin_some.part.0+0x27a>
 800d5a6:	4607      	mov	r7, r0
 800d5a8:	e796      	b.n	800d4d8 <rclc_executor_spin_some.part.0+0x1f4>
 800d5aa:	6843      	ldr	r3, [r0, #4]
 800d5ac:	6a1a      	ldr	r2, [r3, #32]
 800d5ae:	2a00      	cmp	r2, #0
 800d5b0:	d1f5      	bne.n	800d59e <rclc_executor_spin_some.part.0+0x2ba>
 800d5b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d0d1      	beq.n	800d55e <rclc_executor_spin_some.part.0+0x27a>
 800d5ba:	e7f0      	b.n	800d59e <rclc_executor_spin_some.part.0+0x2ba>
 800d5bc:	6843      	ldr	r3, [r0, #4]
 800d5be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d5c0:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800d5c4:	d1eb      	bne.n	800d59e <rclc_executor_spin_some.part.0+0x2ba>
 800d5c6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d5ca:	2a00      	cmp	r2, #0
 800d5cc:	d1e7      	bne.n	800d59e <rclc_executor_spin_some.part.0+0x2ba>
 800d5ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d0c3      	beq.n	800d55e <rclc_executor_spin_some.part.0+0x27a>
 800d5d6:	e7e2      	b.n	800d59e <rclc_executor_spin_some.part.0+0x2ba>
 800d5d8:	270b      	movs	r7, #11
 800d5da:	e77d      	b.n	800d4d8 <rclc_executor_spin_some.part.0+0x1f4>
 800d5dc:	686a      	ldr	r2, [r5, #4]
 800d5de:	e6e2      	b.n	800d3a6 <rclc_executor_spin_some.part.0+0xc2>
 800d5e0:	686a      	ldr	r2, [r5, #4]
 800d5e2:	e7a2      	b.n	800d52a <rclc_executor_spin_some.part.0+0x246>
 800d5e4:	6842      	ldr	r2, [r0, #4]
 800d5e6:	6a11      	ldr	r1, [r2, #32]
 800d5e8:	2900      	cmp	r1, #0
 800d5ea:	f47f af21 	bne.w	800d430 <rclc_executor_spin_some.part.0+0x14c>
 800d5ee:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800d5f2:	2a00      	cmp	r2, #0
 800d5f4:	f43f af0a 	beq.w	800d40c <rclc_executor_spin_some.part.0+0x128>
 800d5f8:	e71a      	b.n	800d430 <rclc_executor_spin_some.part.0+0x14c>
 800d5fa:	6842      	ldr	r2, [r0, #4]
 800d5fc:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800d5fe:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800d602:	f47f af15 	bne.w	800d430 <rclc_executor_spin_some.part.0+0x14c>
 800d606:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800d60a:	2900      	cmp	r1, #0
 800d60c:	f47f af10 	bne.w	800d430 <rclc_executor_spin_some.part.0+0x14c>
 800d610:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800d614:	2a00      	cmp	r2, #0
 800d616:	f43f aef9 	beq.w	800d40c <rclc_executor_spin_some.part.0+0x128>
 800d61a:	e709      	b.n	800d430 <rclc_executor_spin_some.part.0+0x14c>
 800d61c:	686a      	ldr	r2, [r5, #4]
 800d61e:	461c      	mov	r4, r3
 800d620:	e783      	b.n	800d52a <rclc_executor_spin_some.part.0+0x246>
 800d622:	686a      	ldr	r2, [r5, #4]
 800d624:	461c      	mov	r4, r3
 800d626:	e6be      	b.n	800d3a6 <rclc_executor_spin_some.part.0+0xc2>

0800d628 <rclc_executor_spin>:
 800d628:	b1d0      	cbz	r0, 800d660 <rclc_executor_spin+0x38>
 800d62a:	b510      	push	{r4, lr}
 800d62c:	4604      	mov	r4, r0
 800d62e:	b082      	sub	sp, #8
 800d630:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800d634:	6820      	ldr	r0, [r4, #0]
 800d636:	e9cd 2300 	strd	r2, r3, [sp]
 800d63a:	f006 f9f1 	bl	8013a20 <rcl_context_is_valid>
 800d63e:	4601      	mov	r1, r0
 800d640:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d644:	4620      	mov	r0, r4
 800d646:	b131      	cbz	r1, 800d656 <rclc_executor_spin+0x2e>
 800d648:	f7ff fe4c 	bl	800d2e4 <rclc_executor_spin_some.part.0>
 800d64c:	f030 0302 	bics.w	r3, r0, #2
 800d650:	d0ee      	beq.n	800d630 <rclc_executor_spin+0x8>
 800d652:	b002      	add	sp, #8
 800d654:	bd10      	pop	{r4, pc}
 800d656:	f000 f9cb 	bl	800d9f0 <rcutils_reset_error>
 800d65a:	2001      	movs	r0, #1
 800d65c:	b002      	add	sp, #8
 800d65e:	bd10      	pop	{r4, pc}
 800d660:	200b      	movs	r0, #11
 800d662:	4770      	bx	lr

0800d664 <rclc_executor_handle_counters_zero_init>:
 800d664:	b130      	cbz	r0, 800d674 <rclc_executor_handle_counters_zero_init+0x10>
 800d666:	b508      	push	{r3, lr}
 800d668:	2220      	movs	r2, #32
 800d66a:	2100      	movs	r1, #0
 800d66c:	f00c f91a 	bl	80198a4 <memset>
 800d670:	2000      	movs	r0, #0
 800d672:	bd08      	pop	{r3, pc}
 800d674:	200b      	movs	r0, #11
 800d676:	4770      	bx	lr

0800d678 <rclc_executor_handle_init>:
 800d678:	b168      	cbz	r0, 800d696 <rclc_executor_handle_init+0x1e>
 800d67a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800d6a0 <rclc_executor_handle_init+0x28>
 800d67e:	2300      	movs	r3, #0
 800d680:	220b      	movs	r2, #11
 800d682:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800d686:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800d68a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800d68e:	8002      	strh	r2, [r0, #0]
 800d690:	8703      	strh	r3, [r0, #56]	@ 0x38
 800d692:	4618      	mov	r0, r3
 800d694:	4770      	bx	lr
 800d696:	200b      	movs	r0, #11
 800d698:	4770      	bx	lr
 800d69a:	bf00      	nop
 800d69c:	f3af 8000 	nop.w
	...

0800d6a8 <rclc_support_init_with_options>:
 800d6a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6ac:	b083      	sub	sp, #12
 800d6ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d6b0:	b340      	cbz	r0, 800d704 <rclc_support_init_with_options+0x5c>
 800d6b2:	461d      	mov	r5, r3
 800d6b4:	b333      	cbz	r3, 800d704 <rclc_support_init_with_options+0x5c>
 800d6b6:	b32e      	cbz	r6, 800d704 <rclc_support_init_with_options+0x5c>
 800d6b8:	46e9      	mov	r9, sp
 800d6ba:	4604      	mov	r4, r0
 800d6bc:	4648      	mov	r0, r9
 800d6be:	460f      	mov	r7, r1
 800d6c0:	4690      	mov	r8, r2
 800d6c2:	f006 f9a3 	bl	8013a0c <rcl_get_zero_initialized_context>
 800d6c6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d6ca:	462a      	mov	r2, r5
 800d6cc:	e884 0003 	stmia.w	r4, {r0, r1}
 800d6d0:	4623      	mov	r3, r4
 800d6d2:	4641      	mov	r1, r8
 800d6d4:	4638      	mov	r0, r7
 800d6d6:	f006 fa09 	bl	8013aec <rcl_init>
 800d6da:	4605      	mov	r5, r0
 800d6dc:	b960      	cbnz	r0, 800d6f8 <rclc_support_init_with_options+0x50>
 800d6de:	60a6      	str	r6, [r4, #8]
 800d6e0:	4632      	mov	r2, r6
 800d6e2:	f104 010c 	add.w	r1, r4, #12
 800d6e6:	2003      	movs	r0, #3
 800d6e8:	f007 f808 	bl	80146fc <rcl_clock_init>
 800d6ec:	4605      	mov	r5, r0
 800d6ee:	b918      	cbnz	r0, 800d6f8 <rclc_support_init_with_options+0x50>
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	b003      	add	sp, #12
 800d6f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6f8:	f000 f97a 	bl	800d9f0 <rcutils_reset_error>
 800d6fc:	4628      	mov	r0, r5
 800d6fe:	b003      	add	sp, #12
 800d700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d704:	250b      	movs	r5, #11
 800d706:	4628      	mov	r0, r5
 800d708:	b003      	add	sp, #12
 800d70a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d70e:	bf00      	nop

0800d710 <rclc_node_init_default>:
 800d710:	b3b8      	cbz	r0, 800d782 <rclc_node_init_default+0x72>
 800d712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d716:	460d      	mov	r5, r1
 800d718:	b0a1      	sub	sp, #132	@ 0x84
 800d71a:	b329      	cbz	r1, 800d768 <rclc_node_init_default+0x58>
 800d71c:	4616      	mov	r6, r2
 800d71e:	b31a      	cbz	r2, 800d768 <rclc_node_init_default+0x58>
 800d720:	461f      	mov	r7, r3
 800d722:	b30b      	cbz	r3, 800d768 <rclc_node_init_default+0x58>
 800d724:	f10d 0810 	add.w	r8, sp, #16
 800d728:	4604      	mov	r4, r0
 800d72a:	4640      	mov	r0, r8
 800d72c:	f006 fb04 	bl	8013d38 <rcl_get_zero_initialized_node>
 800d730:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d734:	f10d 0918 	add.w	r9, sp, #24
 800d738:	e884 0003 	stmia.w	r4, {r0, r1}
 800d73c:	4648      	mov	r0, r9
 800d73e:	f006 fc73 	bl	8014028 <rcl_node_get_default_options>
 800d742:	4640      	mov	r0, r8
 800d744:	f006 faf8 	bl	8013d38 <rcl_get_zero_initialized_node>
 800d748:	f8cd 9000 	str.w	r9, [sp]
 800d74c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d750:	463b      	mov	r3, r7
 800d752:	e884 0003 	stmia.w	r4, {r0, r1}
 800d756:	4632      	mov	r2, r6
 800d758:	4629      	mov	r1, r5
 800d75a:	4620      	mov	r0, r4
 800d75c:	f006 faf6 	bl	8013d4c <rcl_node_init>
 800d760:	b930      	cbnz	r0, 800d770 <rclc_node_init_default+0x60>
 800d762:	b021      	add	sp, #132	@ 0x84
 800d764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d768:	200b      	movs	r0, #11
 800d76a:	b021      	add	sp, #132	@ 0x84
 800d76c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d770:	9003      	str	r0, [sp, #12]
 800d772:	f000 f93d 	bl	800d9f0 <rcutils_reset_error>
 800d776:	f000 f93b 	bl	800d9f0 <rcutils_reset_error>
 800d77a:	9803      	ldr	r0, [sp, #12]
 800d77c:	b021      	add	sp, #132	@ 0x84
 800d77e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d782:	200b      	movs	r0, #11
 800d784:	4770      	bx	lr
 800d786:	bf00      	nop

0800d788 <rclc_publisher_init_default>:
 800d788:	b368      	cbz	r0, 800d7e6 <rclc_publisher_init_default+0x5e>
 800d78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d78e:	460d      	mov	r5, r1
 800d790:	b0a0      	sub	sp, #128	@ 0x80
 800d792:	b321      	cbz	r1, 800d7de <rclc_publisher_init_default+0x56>
 800d794:	4616      	mov	r6, r2
 800d796:	b312      	cbz	r2, 800d7de <rclc_publisher_init_default+0x56>
 800d798:	461f      	mov	r7, r3
 800d79a:	b303      	cbz	r3, 800d7de <rclc_publisher_init_default+0x56>
 800d79c:	4604      	mov	r4, r0
 800d79e:	f7ff f821 	bl	800c7e4 <rcl_get_zero_initialized_publisher>
 800d7a2:	f10d 0810 	add.w	r8, sp, #16
 800d7a6:	6020      	str	r0, [r4, #0]
 800d7a8:	4640      	mov	r0, r8
 800d7aa:	f7ff f8b7 	bl	800c91c <rcl_publisher_get_default_options>
 800d7ae:	490f      	ldr	r1, [pc, #60]	@ (800d7ec <rclc_publisher_init_default+0x64>)
 800d7b0:	2250      	movs	r2, #80	@ 0x50
 800d7b2:	4640      	mov	r0, r8
 800d7b4:	f00c f93f 	bl	8019a36 <memcpy>
 800d7b8:	f8cd 8000 	str.w	r8, [sp]
 800d7bc:	463b      	mov	r3, r7
 800d7be:	4632      	mov	r2, r6
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	f7ff f814 	bl	800c7f0 <rcl_publisher_init>
 800d7c8:	b910      	cbnz	r0, 800d7d0 <rclc_publisher_init_default+0x48>
 800d7ca:	b020      	add	sp, #128	@ 0x80
 800d7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7d0:	9003      	str	r0, [sp, #12]
 800d7d2:	f000 f90d 	bl	800d9f0 <rcutils_reset_error>
 800d7d6:	9803      	ldr	r0, [sp, #12]
 800d7d8:	b020      	add	sp, #128	@ 0x80
 800d7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7de:	200b      	movs	r0, #11
 800d7e0:	b020      	add	sp, #128	@ 0x80
 800d7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7e6:	200b      	movs	r0, #11
 800d7e8:	4770      	bx	lr
 800d7ea:	bf00      	nop
 800d7ec:	0801b5c8 	.word	0x0801b5c8

0800d7f0 <rclc_publisher_init_best_effort>:
 800d7f0:	b368      	cbz	r0, 800d84e <rclc_publisher_init_best_effort+0x5e>
 800d7f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7f6:	460d      	mov	r5, r1
 800d7f8:	b0a0      	sub	sp, #128	@ 0x80
 800d7fa:	b321      	cbz	r1, 800d846 <rclc_publisher_init_best_effort+0x56>
 800d7fc:	4616      	mov	r6, r2
 800d7fe:	b312      	cbz	r2, 800d846 <rclc_publisher_init_best_effort+0x56>
 800d800:	461f      	mov	r7, r3
 800d802:	b303      	cbz	r3, 800d846 <rclc_publisher_init_best_effort+0x56>
 800d804:	4604      	mov	r4, r0
 800d806:	f7fe ffed 	bl	800c7e4 <rcl_get_zero_initialized_publisher>
 800d80a:	f10d 0810 	add.w	r8, sp, #16
 800d80e:	6020      	str	r0, [r4, #0]
 800d810:	4640      	mov	r0, r8
 800d812:	f7ff f883 	bl	800c91c <rcl_publisher_get_default_options>
 800d816:	490f      	ldr	r1, [pc, #60]	@ (800d854 <rclc_publisher_init_best_effort+0x64>)
 800d818:	2250      	movs	r2, #80	@ 0x50
 800d81a:	4640      	mov	r0, r8
 800d81c:	f00c f90b 	bl	8019a36 <memcpy>
 800d820:	f8cd 8000 	str.w	r8, [sp]
 800d824:	463b      	mov	r3, r7
 800d826:	4632      	mov	r2, r6
 800d828:	4629      	mov	r1, r5
 800d82a:	4620      	mov	r0, r4
 800d82c:	f7fe ffe0 	bl	800c7f0 <rcl_publisher_init>
 800d830:	b910      	cbnz	r0, 800d838 <rclc_publisher_init_best_effort+0x48>
 800d832:	b020      	add	sp, #128	@ 0x80
 800d834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d838:	9003      	str	r0, [sp, #12]
 800d83a:	f000 f8d9 	bl	800d9f0 <rcutils_reset_error>
 800d83e:	9803      	ldr	r0, [sp, #12]
 800d840:	b020      	add	sp, #128	@ 0x80
 800d842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d846:	200b      	movs	r0, #11
 800d848:	b020      	add	sp, #128	@ 0x80
 800d84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d84e:	200b      	movs	r0, #11
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
 800d854:	0801b618 	.word	0x0801b618

0800d858 <rclc_service_init_default>:
 800d858:	b368      	cbz	r0, 800d8b6 <rclc_service_init_default+0x5e>
 800d85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d85e:	460d      	mov	r5, r1
 800d860:	b09e      	sub	sp, #120	@ 0x78
 800d862:	b321      	cbz	r1, 800d8ae <rclc_service_init_default+0x56>
 800d864:	4616      	mov	r6, r2
 800d866:	b312      	cbz	r2, 800d8ae <rclc_service_init_default+0x56>
 800d868:	461f      	mov	r7, r3
 800d86a:	b303      	cbz	r3, 800d8ae <rclc_service_init_default+0x56>
 800d86c:	4604      	mov	r4, r0
 800d86e:	f006 fdab 	bl	80143c8 <rcl_get_zero_initialized_service>
 800d872:	f10d 0810 	add.w	r8, sp, #16
 800d876:	6020      	str	r0, [r4, #0]
 800d878:	4640      	mov	r0, r8
 800d87a:	f006 fe33 	bl	80144e4 <rcl_service_get_default_options>
 800d87e:	490f      	ldr	r1, [pc, #60]	@ (800d8bc <rclc_service_init_default+0x64>)
 800d880:	2250      	movs	r2, #80	@ 0x50
 800d882:	4640      	mov	r0, r8
 800d884:	f00c f8d7 	bl	8019a36 <memcpy>
 800d888:	f8cd 8000 	str.w	r8, [sp]
 800d88c:	463b      	mov	r3, r7
 800d88e:	4632      	mov	r2, r6
 800d890:	4629      	mov	r1, r5
 800d892:	4620      	mov	r0, r4
 800d894:	f006 fd9e 	bl	80143d4 <rcl_service_init>
 800d898:	b910      	cbnz	r0, 800d8a0 <rclc_service_init_default+0x48>
 800d89a:	b01e      	add	sp, #120	@ 0x78
 800d89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8a0:	9003      	str	r0, [sp, #12]
 800d8a2:	f000 f8a5 	bl	800d9f0 <rcutils_reset_error>
 800d8a6:	9803      	ldr	r0, [sp, #12]
 800d8a8:	b01e      	add	sp, #120	@ 0x78
 800d8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ae:	200b      	movs	r0, #11
 800d8b0:	b01e      	add	sp, #120	@ 0x78
 800d8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8b6:	200b      	movs	r0, #11
 800d8b8:	4770      	bx	lr
 800d8ba:	bf00      	nop
 800d8bc:	0801b668 	.word	0x0801b668

0800d8c0 <rclc_timer_init_default>:
 800d8c0:	b360      	cbz	r0, 800d91c <rclc_timer_init_default+0x5c>
 800d8c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8c6:	460e      	mov	r6, r1
 800d8c8:	b08a      	sub	sp, #40	@ 0x28
 800d8ca:	b319      	cbz	r1, 800d914 <rclc_timer_init_default+0x54>
 800d8cc:	4690      	mov	r8, r2
 800d8ce:	461f      	mov	r7, r3
 800d8d0:	4605      	mov	r5, r0
 800d8d2:	f007 f8f1 	bl	8014ab8 <rcl_get_zero_initialized_timer>
 800d8d6:	68b4      	ldr	r4, [r6, #8]
 800d8d8:	6028      	str	r0, [r5, #0]
 800d8da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d8dc:	f10d 0c0c 	add.w	ip, sp, #12
 800d8e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d8e4:	6823      	ldr	r3, [r4, #0]
 800d8e6:	f8cc 3000 	str.w	r3, [ip]
 800d8ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d8ec:	9302      	str	r3, [sp, #8]
 800d8ee:	e9cd 8700 	strd	r8, r7, [sp]
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	4632      	mov	r2, r6
 800d8f6:	f106 010c 	add.w	r1, r6, #12
 800d8fa:	f007 f8e5 	bl	8014ac8 <rcl_timer_init>
 800d8fe:	b910      	cbnz	r0, 800d906 <rclc_timer_init_default+0x46>
 800d900:	b00a      	add	sp, #40	@ 0x28
 800d902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d906:	9009      	str	r0, [sp, #36]	@ 0x24
 800d908:	f000 f872 	bl	800d9f0 <rcutils_reset_error>
 800d90c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d90e:	b00a      	add	sp, #40	@ 0x28
 800d910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d914:	200b      	movs	r0, #11
 800d916:	b00a      	add	sp, #40	@ 0x28
 800d918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d91c:	200b      	movs	r0, #11
 800d91e:	4770      	bx	lr

0800d920 <__default_zero_allocate>:
 800d920:	f00b bad6 	b.w	8018ed0 <calloc>

0800d924 <__default_reallocate>:
 800d924:	f00b bc74 	b.w	8019210 <realloc>

0800d928 <__default_deallocate>:
 800d928:	f00b bb50 	b.w	8018fcc <free>

0800d92c <__default_allocate>:
 800d92c:	f00b bb46 	b.w	8018fbc <malloc>

0800d930 <rcutils_get_zero_initialized_allocator>:
 800d930:	b510      	push	{r4, lr}
 800d932:	4c05      	ldr	r4, [pc, #20]	@ (800d948 <rcutils_get_zero_initialized_allocator+0x18>)
 800d934:	4686      	mov	lr, r0
 800d936:	4684      	mov	ip, r0
 800d938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d93a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d93e:	6823      	ldr	r3, [r4, #0]
 800d940:	f8cc 3000 	str.w	r3, [ip]
 800d944:	4670      	mov	r0, lr
 800d946:	bd10      	pop	{r4, pc}
 800d948:	0801b6b8 	.word	0x0801b6b8

0800d94c <rcutils_set_default_allocator>:
 800d94c:	b1a8      	cbz	r0, 800d97a <rcutils_set_default_allocator+0x2e>
 800d94e:	6802      	ldr	r2, [r0, #0]
 800d950:	b1a2      	cbz	r2, 800d97c <rcutils_set_default_allocator+0x30>
 800d952:	6841      	ldr	r1, [r0, #4]
 800d954:	b1a1      	cbz	r1, 800d980 <rcutils_set_default_allocator+0x34>
 800d956:	b410      	push	{r4}
 800d958:	68c4      	ldr	r4, [r0, #12]
 800d95a:	b164      	cbz	r4, 800d976 <rcutils_set_default_allocator+0x2a>
 800d95c:	6880      	ldr	r0, [r0, #8]
 800d95e:	b138      	cbz	r0, 800d970 <rcutils_set_default_allocator+0x24>
 800d960:	4b08      	ldr	r3, [pc, #32]	@ (800d984 <rcutils_set_default_allocator+0x38>)
 800d962:	601a      	str	r2, [r3, #0]
 800d964:	2200      	movs	r2, #0
 800d966:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d96a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d96e:	2001      	movs	r0, #1
 800d970:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d974:	4770      	bx	lr
 800d976:	4620      	mov	r0, r4
 800d978:	e7fa      	b.n	800d970 <rcutils_set_default_allocator+0x24>
 800d97a:	4770      	bx	lr
 800d97c:	4610      	mov	r0, r2
 800d97e:	4770      	bx	lr
 800d980:	4608      	mov	r0, r1
 800d982:	4770      	bx	lr
 800d984:	200003a0 	.word	0x200003a0

0800d988 <rcutils_get_default_allocator>:
 800d988:	b510      	push	{r4, lr}
 800d98a:	4c05      	ldr	r4, [pc, #20]	@ (800d9a0 <rcutils_get_default_allocator+0x18>)
 800d98c:	4686      	mov	lr, r0
 800d98e:	4684      	mov	ip, r0
 800d990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d992:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d996:	6823      	ldr	r3, [r4, #0]
 800d998:	f8cc 3000 	str.w	r3, [ip]
 800d99c:	4670      	mov	r0, lr
 800d99e:	bd10      	pop	{r4, pc}
 800d9a0:	200003a0 	.word	0x200003a0

0800d9a4 <rcutils_allocator_is_valid>:
 800d9a4:	b158      	cbz	r0, 800d9be <rcutils_allocator_is_valid+0x1a>
 800d9a6:	6803      	ldr	r3, [r0, #0]
 800d9a8:	b143      	cbz	r3, 800d9bc <rcutils_allocator_is_valid+0x18>
 800d9aa:	6843      	ldr	r3, [r0, #4]
 800d9ac:	b133      	cbz	r3, 800d9bc <rcutils_allocator_is_valid+0x18>
 800d9ae:	68c3      	ldr	r3, [r0, #12]
 800d9b0:	b123      	cbz	r3, 800d9bc <rcutils_allocator_is_valid+0x18>
 800d9b2:	6880      	ldr	r0, [r0, #8]
 800d9b4:	3800      	subs	r0, #0
 800d9b6:	bf18      	it	ne
 800d9b8:	2001      	movne	r0, #1
 800d9ba:	4770      	bx	lr
 800d9bc:	4618      	mov	r0, r3
 800d9be:	4770      	bx	lr

0800d9c0 <rcutils_get_error_string>:
 800d9c0:	4b06      	ldr	r3, [pc, #24]	@ (800d9dc <rcutils_get_error_string+0x1c>)
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	b13b      	cbz	r3, 800d9d6 <rcutils_get_error_string+0x16>
 800d9c6:	4b06      	ldr	r3, [pc, #24]	@ (800d9e0 <rcutils_get_error_string+0x20>)
 800d9c8:	781a      	ldrb	r2, [r3, #0]
 800d9ca:	b90a      	cbnz	r2, 800d9d0 <rcutils_get_error_string+0x10>
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	701a      	strb	r2, [r3, #0]
 800d9d0:	4b04      	ldr	r3, [pc, #16]	@ (800d9e4 <rcutils_get_error_string+0x24>)
 800d9d2:	7818      	ldrb	r0, [r3, #0]
 800d9d4:	4770      	bx	lr
 800d9d6:	4b04      	ldr	r3, [pc, #16]	@ (800d9e8 <rcutils_get_error_string+0x28>)
 800d9d8:	7818      	ldrb	r0, [r3, #0]
 800d9da:	4770      	bx	lr
 800d9dc:	20006cd0 	.word	0x20006cd0
 800d9e0:	20006ce9 	.word	0x20006ce9
 800d9e4:	20006ce8 	.word	0x20006ce8
 800d9e8:	0801b270 	.word	0x0801b270
 800d9ec:	00000000 	.word	0x00000000

0800d9f0 <rcutils_reset_error>:
 800d9f0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800da10 <rcutils_reset_error+0x20>
 800d9f4:	4a08      	ldr	r2, [pc, #32]	@ (800da18 <rcutils_reset_error+0x28>)
 800d9f6:	4809      	ldr	r0, [pc, #36]	@ (800da1c <rcutils_reset_error+0x2c>)
 800d9f8:	4909      	ldr	r1, [pc, #36]	@ (800da20 <rcutils_reset_error+0x30>)
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	8013      	strh	r3, [r2, #0]
 800d9fe:	ed82 7b02 	vstr	d7, [r2, #8]
 800da02:	4a08      	ldr	r2, [pc, #32]	@ (800da24 <rcutils_reset_error+0x34>)
 800da04:	7003      	strb	r3, [r0, #0]
 800da06:	700b      	strb	r3, [r1, #0]
 800da08:	7013      	strb	r3, [r2, #0]
 800da0a:	4770      	bx	lr
 800da0c:	f3af 8000 	nop.w
	...
 800da18:	20006cd8 	.word	0x20006cd8
 800da1c:	20006ce9 	.word	0x20006ce9
 800da20:	20006ce8 	.word	0x20006ce8
 800da24:	20006cd0 	.word	0x20006cd0

0800da28 <rcutils_system_time_now>:
 800da28:	b308      	cbz	r0, 800da6e <rcutils_system_time_now+0x46>
 800da2a:	b570      	push	{r4, r5, r6, lr}
 800da2c:	b084      	sub	sp, #16
 800da2e:	4604      	mov	r4, r0
 800da30:	4669      	mov	r1, sp
 800da32:	2001      	movs	r0, #1
 800da34:	f7f4 faf8 	bl	8002028 <clock_gettime>
 800da38:	e9dd 3500 	ldrd	r3, r5, [sp]
 800da3c:	2d00      	cmp	r5, #0
 800da3e:	db13      	blt.n	800da68 <rcutils_system_time_now+0x40>
 800da40:	9902      	ldr	r1, [sp, #8]
 800da42:	2900      	cmp	r1, #0
 800da44:	db0d      	blt.n	800da62 <rcutils_system_time_now+0x3a>
 800da46:	4e0b      	ldr	r6, [pc, #44]	@ (800da74 <rcutils_system_time_now+0x4c>)
 800da48:	fba3 3206 	umull	r3, r2, r3, r6
 800da4c:	185b      	adds	r3, r3, r1
 800da4e:	fb06 2205 	mla	r2, r6, r5, r2
 800da52:	f04f 0000 	mov.w	r0, #0
 800da56:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800da5a:	e9c4 3200 	strd	r3, r2, [r4]
 800da5e:	b004      	add	sp, #16
 800da60:	bd70      	pop	{r4, r5, r6, pc}
 800da62:	ea53 0205 	orrs.w	r2, r3, r5
 800da66:	d1ee      	bne.n	800da46 <rcutils_system_time_now+0x1e>
 800da68:	2002      	movs	r0, #2
 800da6a:	b004      	add	sp, #16
 800da6c:	bd70      	pop	{r4, r5, r6, pc}
 800da6e:	200b      	movs	r0, #11
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	3b9aca00 	.word	0x3b9aca00

0800da78 <rcutils_steady_time_now>:
 800da78:	b308      	cbz	r0, 800dabe <rcutils_steady_time_now+0x46>
 800da7a:	b570      	push	{r4, r5, r6, lr}
 800da7c:	b084      	sub	sp, #16
 800da7e:	4604      	mov	r4, r0
 800da80:	4669      	mov	r1, sp
 800da82:	2000      	movs	r0, #0
 800da84:	f7f4 fad0 	bl	8002028 <clock_gettime>
 800da88:	e9dd 3500 	ldrd	r3, r5, [sp]
 800da8c:	2d00      	cmp	r5, #0
 800da8e:	db13      	blt.n	800dab8 <rcutils_steady_time_now+0x40>
 800da90:	9902      	ldr	r1, [sp, #8]
 800da92:	2900      	cmp	r1, #0
 800da94:	db0d      	blt.n	800dab2 <rcutils_steady_time_now+0x3a>
 800da96:	4e0b      	ldr	r6, [pc, #44]	@ (800dac4 <rcutils_steady_time_now+0x4c>)
 800da98:	fba3 3206 	umull	r3, r2, r3, r6
 800da9c:	185b      	adds	r3, r3, r1
 800da9e:	fb06 2205 	mla	r2, r6, r5, r2
 800daa2:	f04f 0000 	mov.w	r0, #0
 800daa6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800daaa:	e9c4 3200 	strd	r3, r2, [r4]
 800daae:	b004      	add	sp, #16
 800dab0:	bd70      	pop	{r4, r5, r6, pc}
 800dab2:	ea53 0205 	orrs.w	r2, r3, r5
 800dab6:	d1ee      	bne.n	800da96 <rcutils_steady_time_now+0x1e>
 800dab8:	2002      	movs	r0, #2
 800daba:	b004      	add	sp, #16
 800dabc:	bd70      	pop	{r4, r5, r6, pc}
 800dabe:	200b      	movs	r0, #11
 800dac0:	4770      	bx	lr
 800dac2:	bf00      	nop
 800dac4:	3b9aca00 	.word	0x3b9aca00

0800dac8 <rmw_get_zero_initialized_init_options>:
 800dac8:	b510      	push	{r4, lr}
 800daca:	2238      	movs	r2, #56	@ 0x38
 800dacc:	4604      	mov	r4, r0
 800dace:	2100      	movs	r1, #0
 800dad0:	f00b fee8 	bl	80198a4 <memset>
 800dad4:	f104 0010 	add.w	r0, r4, #16
 800dad8:	f000 f80a 	bl	800daf0 <rmw_get_default_security_options>
 800dadc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dae0:	60e3      	str	r3, [r4, #12]
 800dae2:	4620      	mov	r0, r4
 800dae4:	bd10      	pop	{r4, pc}
 800dae6:	bf00      	nop

0800dae8 <rmw_get_default_publisher_options>:
 800dae8:	2200      	movs	r2, #0
 800daea:	6002      	str	r2, [r0, #0]
 800daec:	7102      	strb	r2, [r0, #4]
 800daee:	4770      	bx	lr

0800daf0 <rmw_get_default_security_options>:
 800daf0:	2200      	movs	r2, #0
 800daf2:	7002      	strb	r2, [r0, #0]
 800daf4:	6042      	str	r2, [r0, #4]
 800daf6:	4770      	bx	lr

0800daf8 <rmw_uros_set_custom_transport>:
 800daf8:	b470      	push	{r4, r5, r6}
 800dafa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800dafe:	b162      	cbz	r2, 800db1a <rmw_uros_set_custom_transport+0x22>
 800db00:	b15b      	cbz	r3, 800db1a <rmw_uros_set_custom_transport+0x22>
 800db02:	b155      	cbz	r5, 800db1a <rmw_uros_set_custom_transport+0x22>
 800db04:	b14e      	cbz	r6, 800db1a <rmw_uros_set_custom_transport+0x22>
 800db06:	4c06      	ldr	r4, [pc, #24]	@ (800db20 <rmw_uros_set_custom_transport+0x28>)
 800db08:	7020      	strb	r0, [r4, #0]
 800db0a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800db0e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800db12:	6166      	str	r6, [r4, #20]
 800db14:	2000      	movs	r0, #0
 800db16:	bc70      	pop	{r4, r5, r6}
 800db18:	4770      	bx	lr
 800db1a:	200b      	movs	r0, #11
 800db1c:	bc70      	pop	{r4, r5, r6}
 800db1e:	4770      	bx	lr
 800db20:	20006cec 	.word	0x20006cec

0800db24 <rmw_init_options_init>:
 800db24:	b084      	sub	sp, #16
 800db26:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db28:	b083      	sub	sp, #12
 800db2a:	ad09      	add	r5, sp, #36	@ 0x24
 800db2c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800db30:	b130      	cbz	r0, 800db40 <rmw_init_options_init+0x1c>
 800db32:	4604      	mov	r4, r0
 800db34:	4628      	mov	r0, r5
 800db36:	f7ff ff35 	bl	800d9a4 <rcutils_allocator_is_valid>
 800db3a:	b108      	cbz	r0, 800db40 <rmw_init_options_init+0x1c>
 800db3c:	68a6      	ldr	r6, [r4, #8]
 800db3e:	b12e      	cbz	r6, 800db4c <rmw_init_options_init+0x28>
 800db40:	200b      	movs	r0, #11
 800db42:	b003      	add	sp, #12
 800db44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800db48:	b004      	add	sp, #16
 800db4a:	4770      	bx	lr
 800db4c:	2200      	movs	r2, #0
 800db4e:	2300      	movs	r3, #0
 800db50:	e9c4 2300 	strd	r2, r3, [r4]
 800db54:	4b22      	ldr	r3, [pc, #136]	@ (800dbe0 <rmw_init_options_init+0xbc>)
 800db56:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800dbf0 <rmw_init_options_init+0xcc>
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	60a3      	str	r3, [r4, #8]
 800db5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db60:	f104 0c20 	add.w	ip, r4, #32
 800db64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db68:	466f      	mov	r7, sp
 800db6a:	682b      	ldr	r3, [r5, #0]
 800db6c:	f8cc 3000 	str.w	r3, [ip]
 800db70:	4638      	mov	r0, r7
 800db72:	f8c4 e01c 	str.w	lr, [r4, #28]
 800db76:	60e6      	str	r6, [r4, #12]
 800db78:	f7ff ffba 	bl	800daf0 <rmw_get_default_security_options>
 800db7c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800db80:	f104 0310 	add.w	r3, r4, #16
 800db84:	e883 0003 	stmia.w	r3, {r0, r1}
 800db88:	2203      	movs	r2, #3
 800db8a:	4816      	ldr	r0, [pc, #88]	@ (800dbe4 <rmw_init_options_init+0xc0>)
 800db8c:	4916      	ldr	r1, [pc, #88]	@ (800dbe8 <rmw_init_options_init+0xc4>)
 800db8e:	7626      	strb	r6, [r4, #24]
 800db90:	f000 ffbc 	bl	800eb0c <rmw_uxrce_init_init_options_impl_memory>
 800db94:	4813      	ldr	r0, [pc, #76]	@ (800dbe4 <rmw_init_options_init+0xc0>)
 800db96:	f009 fb1b 	bl	80171d0 <get_memory>
 800db9a:	b1f0      	cbz	r0, 800dbda <rmw_init_options_init+0xb6>
 800db9c:	4a13      	ldr	r2, [pc, #76]	@ (800dbec <rmw_init_options_init+0xc8>)
 800db9e:	6883      	ldr	r3, [r0, #8]
 800dba0:	6851      	ldr	r1, [r2, #4]
 800dba2:	7810      	ldrb	r0, [r2, #0]
 800dba4:	6363      	str	r3, [r4, #52]	@ 0x34
 800dba6:	7418      	strb	r0, [r3, #16]
 800dba8:	6159      	str	r1, [r3, #20]
 800dbaa:	68d1      	ldr	r1, [r2, #12]
 800dbac:	61d9      	str	r1, [r3, #28]
 800dbae:	6911      	ldr	r1, [r2, #16]
 800dbb0:	6219      	str	r1, [r3, #32]
 800dbb2:	6951      	ldr	r1, [r2, #20]
 800dbb4:	6892      	ldr	r2, [r2, #8]
 800dbb6:	619a      	str	r2, [r3, #24]
 800dbb8:	6259      	str	r1, [r3, #36]	@ 0x24
 800dbba:	f004 fd07 	bl	80125cc <uxr_nanos>
 800dbbe:	f00b fabb 	bl	8019138 <srand>
 800dbc2:	f00b fae7 	bl	8019194 <rand>
 800dbc6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dbc8:	6298      	str	r0, [r3, #40]	@ 0x28
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	d0f9      	beq.n	800dbc2 <rmw_init_options_init+0x9e>
 800dbce:	2000      	movs	r0, #0
 800dbd0:	b003      	add	sp, #12
 800dbd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dbd6:	b004      	add	sp, #16
 800dbd8:	4770      	bx	lr
 800dbda:	2001      	movs	r0, #1
 800dbdc:	e7b1      	b.n	800db42 <rmw_init_options_init+0x1e>
 800dbde:	bf00      	nop
 800dbe0:	0801c4b0 	.word	0x0801c4b0
 800dbe4:	2000b80c 	.word	0x2000b80c
 800dbe8:	20006fe0 	.word	0x20006fe0
 800dbec:	20006cec 	.word	0x20006cec
 800dbf0:	0801b6cc 	.word	0x0801b6cc

0800dbf4 <rmw_init_options_copy>:
 800dbf4:	b570      	push	{r4, r5, r6, lr}
 800dbf6:	b158      	cbz	r0, 800dc10 <rmw_init_options_copy+0x1c>
 800dbf8:	460d      	mov	r5, r1
 800dbfa:	b149      	cbz	r1, 800dc10 <rmw_init_options_copy+0x1c>
 800dbfc:	4604      	mov	r4, r0
 800dbfe:	6880      	ldr	r0, [r0, #8]
 800dc00:	b120      	cbz	r0, 800dc0c <rmw_init_options_copy+0x18>
 800dc02:	4b1e      	ldr	r3, [pc, #120]	@ (800dc7c <rmw_init_options_copy+0x88>)
 800dc04:	6819      	ldr	r1, [r3, #0]
 800dc06:	f7f2 fb0b 	bl	8000220 <strcmp>
 800dc0a:	bb90      	cbnz	r0, 800dc72 <rmw_init_options_copy+0x7e>
 800dc0c:	68ab      	ldr	r3, [r5, #8]
 800dc0e:	b113      	cbz	r3, 800dc16 <rmw_init_options_copy+0x22>
 800dc10:	250b      	movs	r5, #11
 800dc12:	4628      	mov	r0, r5
 800dc14:	bd70      	pop	{r4, r5, r6, pc}
 800dc16:	4623      	mov	r3, r4
 800dc18:	462a      	mov	r2, r5
 800dc1a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800dc1e:	f8d3 c000 	ldr.w	ip, [r3]
 800dc22:	6858      	ldr	r0, [r3, #4]
 800dc24:	6899      	ldr	r1, [r3, #8]
 800dc26:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800dc2a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800dc2e:	3310      	adds	r3, #16
 800dc30:	42b3      	cmp	r3, r6
 800dc32:	f8c2 c000 	str.w	ip, [r2]
 800dc36:	6050      	str	r0, [r2, #4]
 800dc38:	6091      	str	r1, [r2, #8]
 800dc3a:	f102 0210 	add.w	r2, r2, #16
 800dc3e:	d1ee      	bne.n	800dc1e <rmw_init_options_copy+0x2a>
 800dc40:	6819      	ldr	r1, [r3, #0]
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	480e      	ldr	r0, [pc, #56]	@ (800dc80 <rmw_init_options_copy+0x8c>)
 800dc46:	6053      	str	r3, [r2, #4]
 800dc48:	6011      	str	r1, [r2, #0]
 800dc4a:	f009 fac1 	bl	80171d0 <get_memory>
 800dc4e:	b198      	cbz	r0, 800dc78 <rmw_init_options_copy+0x84>
 800dc50:	6883      	ldr	r3, [r0, #8]
 800dc52:	636b      	str	r3, [r5, #52]	@ 0x34
 800dc54:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800dc56:	f102 0c10 	add.w	ip, r2, #16
 800dc5a:	f103 0410 	add.w	r4, r3, #16
 800dc5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dc62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc64:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800dc68:	2500      	movs	r5, #0
 800dc6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dc6e:	4628      	mov	r0, r5
 800dc70:	bd70      	pop	{r4, r5, r6, pc}
 800dc72:	250c      	movs	r5, #12
 800dc74:	4628      	mov	r0, r5
 800dc76:	bd70      	pop	{r4, r5, r6, pc}
 800dc78:	2501      	movs	r5, #1
 800dc7a:	e7ca      	b.n	800dc12 <rmw_init_options_copy+0x1e>
 800dc7c:	0801c4b0 	.word	0x0801c4b0
 800dc80:	2000b80c 	.word	0x2000b80c

0800dc84 <rmw_init_options_fini>:
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d03d      	beq.n	800dd04 <rmw_init_options_fini+0x80>
 800dc88:	b510      	push	{r4, lr}
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	b08e      	sub	sp, #56	@ 0x38
 800dc8e:	3020      	adds	r0, #32
 800dc90:	f7ff fe88 	bl	800d9a4 <rcutils_allocator_is_valid>
 800dc94:	b360      	cbz	r0, 800dcf0 <rmw_init_options_fini+0x6c>
 800dc96:	68a0      	ldr	r0, [r4, #8]
 800dc98:	b120      	cbz	r0, 800dca4 <rmw_init_options_fini+0x20>
 800dc9a:	4b1c      	ldr	r3, [pc, #112]	@ (800dd0c <rmw_init_options_fini+0x88>)
 800dc9c:	6819      	ldr	r1, [r3, #0]
 800dc9e:	f7f2 fabf 	bl	8000220 <strcmp>
 800dca2:	bb68      	cbnz	r0, 800dd00 <rmw_init_options_fini+0x7c>
 800dca4:	4b1a      	ldr	r3, [pc, #104]	@ (800dd10 <rmw_init_options_fini+0x8c>)
 800dca6:	6819      	ldr	r1, [r3, #0]
 800dca8:	b331      	cbz	r1, 800dcf8 <rmw_init_options_fini+0x74>
 800dcaa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800dcac:	e001      	b.n	800dcb2 <rmw_init_options_fini+0x2e>
 800dcae:	6849      	ldr	r1, [r1, #4]
 800dcb0:	b311      	cbz	r1, 800dcf8 <rmw_init_options_fini+0x74>
 800dcb2:	688b      	ldr	r3, [r1, #8]
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d1fa      	bne.n	800dcae <rmw_init_options_fini+0x2a>
 800dcb8:	4815      	ldr	r0, [pc, #84]	@ (800dd10 <rmw_init_options_fini+0x8c>)
 800dcba:	f009 fa99 	bl	80171f0 <put_memory>
 800dcbe:	4668      	mov	r0, sp
 800dcc0:	f7ff ff02 	bl	800dac8 <rmw_get_zero_initialized_init_options>
 800dcc4:	46ee      	mov	lr, sp
 800dcc6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dcca:	46a4      	mov	ip, r4
 800dccc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dcd0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dcd4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dcd8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dcdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dce0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800dce4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800dce8:	2300      	movs	r3, #0
 800dcea:	4618      	mov	r0, r3
 800dcec:	b00e      	add	sp, #56	@ 0x38
 800dcee:	bd10      	pop	{r4, pc}
 800dcf0:	230b      	movs	r3, #11
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	b00e      	add	sp, #56	@ 0x38
 800dcf6:	bd10      	pop	{r4, pc}
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	b00e      	add	sp, #56	@ 0x38
 800dcfe:	bd10      	pop	{r4, pc}
 800dd00:	230c      	movs	r3, #12
 800dd02:	e7f2      	b.n	800dcea <rmw_init_options_fini+0x66>
 800dd04:	230b      	movs	r3, #11
 800dd06:	4618      	mov	r0, r3
 800dd08:	4770      	bx	lr
 800dd0a:	bf00      	nop
 800dd0c:	0801c4b0 	.word	0x0801c4b0
 800dd10:	2000b80c 	.word	0x2000b80c

0800dd14 <rmw_init>:
 800dd14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd18:	b083      	sub	sp, #12
 800dd1a:	2800      	cmp	r0, #0
 800dd1c:	f000 80d3 	beq.w	800dec6 <rmw_init+0x1b2>
 800dd20:	460e      	mov	r6, r1
 800dd22:	2900      	cmp	r1, #0
 800dd24:	f000 80cf 	beq.w	800dec6 <rmw_init+0x1b2>
 800dd28:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800dd2a:	4605      	mov	r5, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f000 80ca 	beq.w	800dec6 <rmw_init+0x1b2>
 800dd32:	4b78      	ldr	r3, [pc, #480]	@ (800df14 <rmw_init+0x200>)
 800dd34:	6880      	ldr	r0, [r0, #8]
 800dd36:	681f      	ldr	r7, [r3, #0]
 800dd38:	b128      	cbz	r0, 800dd46 <rmw_init+0x32>
 800dd3a:	4639      	mov	r1, r7
 800dd3c:	f7f2 fa70 	bl	8000220 <strcmp>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	f040 80ca 	bne.w	800deda <rmw_init+0x1c6>
 800dd46:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dd4a:	4c73      	ldr	r4, [pc, #460]	@ (800df18 <rmw_init+0x204>)
 800dd4c:	4973      	ldr	r1, [pc, #460]	@ (800df1c <rmw_init+0x208>)
 800dd4e:	4874      	ldr	r0, [pc, #464]	@ (800df20 <rmw_init+0x20c>)
 800dd50:	60b7      	str	r7, [r6, #8]
 800dd52:	e9c6 2300 	strd	r2, r3, [r6]
 800dd56:	68eb      	ldr	r3, [r5, #12]
 800dd58:	64b3      	str	r3, [r6, #72]	@ 0x48
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	f000 fe76 	bl	800ea4c <rmw_uxrce_init_session_memory>
 800dd60:	4620      	mov	r0, r4
 800dd62:	4970      	ldr	r1, [pc, #448]	@ (800df24 <rmw_init+0x210>)
 800dd64:	2204      	movs	r2, #4
 800dd66:	f000 feb1 	bl	800eacc <rmw_uxrce_init_static_input_buffer_memory>
 800dd6a:	f04f 0800 	mov.w	r8, #0
 800dd6e:	486c      	ldr	r0, [pc, #432]	@ (800df20 <rmw_init+0x20c>)
 800dd70:	f884 800d 	strb.w	r8, [r4, #13]
 800dd74:	f009 fa2c 	bl	80171d0 <get_memory>
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	f000 80a9 	beq.w	800ded0 <rmw_init+0x1bc>
 800dd7e:	6884      	ldr	r4, [r0, #8]
 800dd80:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800dd82:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800dd84:	f890 c010 	ldrb.w	ip, [r0, #16]
 800dd88:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800dd8c:	9101      	str	r1, [sp, #4]
 800dd8e:	6a00      	ldr	r0, [r0, #32]
 800dd90:	9000      	str	r0, [sp, #0]
 800dd92:	f104 0910 	add.w	r9, r4, #16
 800dd96:	4661      	mov	r1, ip
 800dd98:	4648      	mov	r0, r9
 800dd9a:	f002 fb4d 	bl	8010438 <uxr_set_custom_transport_callbacks>
 800dd9e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800dda2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dda6:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800ddaa:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800ddae:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800ddb2:	495d      	ldr	r1, [pc, #372]	@ (800df28 <rmw_init+0x214>)
 800ddb4:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800ddb8:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800ddbc:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800ddc0:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800ddc4:	4859      	ldr	r0, [pc, #356]	@ (800df2c <rmw_init+0x218>)
 800ddc6:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800ddca:	2201      	movs	r2, #1
 800ddcc:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800ddce:	f000 fe1d 	bl	800ea0c <rmw_uxrce_init_node_memory>
 800ddd2:	4957      	ldr	r1, [pc, #348]	@ (800df30 <rmw_init+0x21c>)
 800ddd4:	4857      	ldr	r0, [pc, #348]	@ (800df34 <rmw_init+0x220>)
 800ddd6:	2205      	movs	r2, #5
 800ddd8:	f000 fdf8 	bl	800e9cc <rmw_uxrce_init_subscription_memory>
 800dddc:	4956      	ldr	r1, [pc, #344]	@ (800df38 <rmw_init+0x224>)
 800ddde:	4857      	ldr	r0, [pc, #348]	@ (800df3c <rmw_init+0x228>)
 800dde0:	220a      	movs	r2, #10
 800dde2:	f000 fdd3 	bl	800e98c <rmw_uxrce_init_publisher_memory>
 800dde6:	4956      	ldr	r1, [pc, #344]	@ (800df40 <rmw_init+0x22c>)
 800dde8:	4856      	ldr	r0, [pc, #344]	@ (800df44 <rmw_init+0x230>)
 800ddea:	2202      	movs	r2, #2
 800ddec:	f000 fd8e 	bl	800e90c <rmw_uxrce_init_service_memory>
 800ddf0:	4955      	ldr	r1, [pc, #340]	@ (800df48 <rmw_init+0x234>)
 800ddf2:	4856      	ldr	r0, [pc, #344]	@ (800df4c <rmw_init+0x238>)
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	f000 fda9 	bl	800e94c <rmw_uxrce_init_client_memory>
 800ddfa:	4955      	ldr	r1, [pc, #340]	@ (800df50 <rmw_init+0x23c>)
 800ddfc:	4855      	ldr	r0, [pc, #340]	@ (800df54 <rmw_init+0x240>)
 800ddfe:	220f      	movs	r2, #15
 800de00:	f000 fe44 	bl	800ea8c <rmw_uxrce_init_topic_memory>
 800de04:	4954      	ldr	r1, [pc, #336]	@ (800df58 <rmw_init+0x244>)
 800de06:	4855      	ldr	r0, [pc, #340]	@ (800df5c <rmw_init+0x248>)
 800de08:	2203      	movs	r2, #3
 800de0a:	f000 fe7f 	bl	800eb0c <rmw_uxrce_init_init_options_impl_memory>
 800de0e:	4954      	ldr	r1, [pc, #336]	@ (800df60 <rmw_init+0x24c>)
 800de10:	4854      	ldr	r0, [pc, #336]	@ (800df64 <rmw_init+0x250>)
 800de12:	2204      	movs	r2, #4
 800de14:	f000 fe9a 	bl	800eb4c <rmw_uxrce_init_wait_set_memory>
 800de18:	4953      	ldr	r1, [pc, #332]	@ (800df68 <rmw_init+0x254>)
 800de1a:	4854      	ldr	r0, [pc, #336]	@ (800df6c <rmw_init+0x258>)
 800de1c:	2204      	movs	r2, #4
 800de1e:	f000 feb5 	bl	800eb8c <rmw_uxrce_init_guard_condition_memory>
 800de22:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800de24:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800de26:	4642      	mov	r2, r8
 800de28:	f000 fd2a 	bl	800e880 <rmw_uxrce_transport_init>
 800de2c:	4607      	mov	r7, r0
 800de2e:	2800      	cmp	r0, #0
 800de30:	d158      	bne.n	800dee4 <rmw_init+0x1d0>
 800de32:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800de34:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800de38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800de3a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800de3e:	4628      	mov	r0, r5
 800de40:	f002 fd2e 	bl	80108a0 <uxr_init_session>
 800de44:	494a      	ldr	r1, [pc, #296]	@ (800df70 <rmw_init+0x25c>)
 800de46:	4622      	mov	r2, r4
 800de48:	4628      	mov	r0, r5
 800de4a:	f002 fd4d 	bl	80108e8 <uxr_set_topic_callback>
 800de4e:	4949      	ldr	r1, [pc, #292]	@ (800df74 <rmw_init+0x260>)
 800de50:	463a      	mov	r2, r7
 800de52:	4628      	mov	r0, r5
 800de54:	f002 fd44 	bl	80108e0 <uxr_set_status_callback>
 800de58:	4947      	ldr	r1, [pc, #284]	@ (800df78 <rmw_init+0x264>)
 800de5a:	463a      	mov	r2, r7
 800de5c:	4628      	mov	r0, r5
 800de5e:	f002 fd47 	bl	80108f0 <uxr_set_request_callback>
 800de62:	4946      	ldr	r1, [pc, #280]	@ (800df7c <rmw_init+0x268>)
 800de64:	463a      	mov	r2, r7
 800de66:	4628      	mov	r0, r5
 800de68:	f002 fd46 	bl	80108f8 <uxr_set_reply_callback>
 800de6c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800de70:	2304      	movs	r3, #4
 800de72:	0092      	lsls	r2, r2, #2
 800de74:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800de78:	4628      	mov	r0, r5
 800de7a:	f002 fd7b 	bl	8010974 <uxr_create_input_reliable_stream>
 800de7e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800de82:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800de86:	0092      	lsls	r2, r2, #2
 800de88:	2304      	movs	r3, #4
 800de8a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800de8e:	4628      	mov	r0, r5
 800de90:	f002 fd48 	bl	8010924 <uxr_create_output_reliable_stream>
 800de94:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800de98:	4628      	mov	r0, r5
 800de9a:	f002 fd65 	bl	8010968 <uxr_create_input_best_effort_stream>
 800de9e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800dea2:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800dea6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800deaa:	3114      	adds	r1, #20
 800deac:	4628      	mov	r0, r5
 800deae:	f002 fd27 	bl	8010900 <uxr_create_output_best_effort_stream>
 800deb2:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800deb6:	4628      	mov	r0, r5
 800deb8:	f003 fb1a 	bl	80114f0 <uxr_create_session>
 800debc:	b1f8      	cbz	r0, 800defe <rmw_init+0x1ea>
 800debe:	4638      	mov	r0, r7
 800dec0:	b003      	add	sp, #12
 800dec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dec6:	270b      	movs	r7, #11
 800dec8:	4638      	mov	r0, r7
 800deca:	b003      	add	sp, #12
 800decc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ded0:	2701      	movs	r7, #1
 800ded2:	4638      	mov	r0, r7
 800ded4:	b003      	add	sp, #12
 800ded6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800deda:	270c      	movs	r7, #12
 800dedc:	4638      	mov	r0, r7
 800dede:	b003      	add	sp, #12
 800dee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dee4:	4648      	mov	r0, r9
 800dee6:	f002 fae9 	bl	80104bc <uxr_close_custom_transport>
 800deea:	480d      	ldr	r0, [pc, #52]	@ (800df20 <rmw_init+0x20c>)
 800deec:	4621      	mov	r1, r4
 800deee:	f009 f97f 	bl	80171f0 <put_memory>
 800def2:	4638      	mov	r0, r7
 800def4:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800def8:	b003      	add	sp, #12
 800defa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800defe:	4648      	mov	r0, r9
 800df00:	f002 fadc 	bl	80104bc <uxr_close_custom_transport>
 800df04:	4806      	ldr	r0, [pc, #24]	@ (800df20 <rmw_init+0x20c>)
 800df06:	4621      	mov	r1, r4
 800df08:	f009 f972 	bl	80171f0 <put_memory>
 800df0c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800df0e:	2701      	movs	r7, #1
 800df10:	e7d5      	b.n	800debe <rmw_init+0x1aa>
 800df12:	bf00      	nop
 800df14:	0801c4b0 	.word	0x0801c4b0
 800df18:	2000b85c 	.word	0x2000b85c
 800df1c:	20007b08 	.word	0x20007b08
 800df20:	2000b84c 	.word	0x2000b84c
 800df24:	200090b0 	.word	0x200090b0
 800df28:	20007064 	.word	0x20007064
 800df2c:	2000b81c 	.word	0x2000b81c
 800df30:	2000b1b0 	.word	0x2000b1b0
 800df34:	2000b86c 	.word	0x2000b86c
 800df38:	20007108 	.word	0x20007108
 800df3c:	2000b82c 	.word	0x2000b82c
 800df40:	20007978 	.word	0x20007978
 800df44:	2000b83c 	.word	0x2000b83c
 800df48:	20006e98 	.word	0x20006e98
 800df4c:	20006e84 	.word	0x20006e84
 800df50:	2000b5e8 	.word	0x2000b5e8
 800df54:	2000b87c 	.word	0x2000b87c
 800df58:	20006fe0 	.word	0x20006fe0
 800df5c:	2000b80c 	.word	0x2000b80c
 800df60:	2000b78c 	.word	0x2000b78c
 800df64:	2000b88c 	.word	0x2000b88c
 800df68:	20006f60 	.word	0x20006f60
 800df6c:	2000b7fc 	.word	0x2000b7fc
 800df70:	08017009 	.word	0x08017009
 800df74:	08017001 	.word	0x08017001
 800df78:	080170a1 	.word	0x080170a1
 800df7c:	0801713d 	.word	0x0801713d

0800df80 <rmw_context_fini>:
 800df80:	4b17      	ldr	r3, [pc, #92]	@ (800dfe0 <rmw_context_fini+0x60>)
 800df82:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800df84:	b570      	push	{r4, r5, r6, lr}
 800df86:	681c      	ldr	r4, [r3, #0]
 800df88:	4605      	mov	r5, r0
 800df8a:	b334      	cbz	r4, 800dfda <rmw_context_fini+0x5a>
 800df8c:	2600      	movs	r6, #0
 800df8e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800df92:	6902      	ldr	r2, [r0, #16]
 800df94:	428a      	cmp	r2, r1
 800df96:	d018      	beq.n	800dfca <rmw_context_fini+0x4a>
 800df98:	2c00      	cmp	r4, #0
 800df9a:	d1f8      	bne.n	800df8e <rmw_context_fini+0xe>
 800df9c:	b189      	cbz	r1, 800dfc2 <rmw_context_fini+0x42>
 800df9e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800dfa2:	789b      	ldrb	r3, [r3, #2]
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800dfaa:	bf14      	ite	ne
 800dfac:	210a      	movne	r1, #10
 800dfae:	2100      	moveq	r1, #0
 800dfb0:	f003 fa76 	bl	80114a0 <uxr_delete_session_retries>
 800dfb4:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800dfb6:	f000 fe09 	bl	800ebcc <rmw_uxrce_fini_session_memory>
 800dfba:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800dfbc:	3010      	adds	r0, #16
 800dfbe:	f002 fa7d 	bl	80104bc <uxr_close_custom_transport>
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	bd70      	pop	{r4, r5, r6, pc}
 800dfca:	3018      	adds	r0, #24
 800dfcc:	f000 f89c 	bl	800e108 <rmw_destroy_node>
 800dfd0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800dfd2:	4606      	mov	r6, r0
 800dfd4:	2c00      	cmp	r4, #0
 800dfd6:	d1da      	bne.n	800df8e <rmw_context_fini+0xe>
 800dfd8:	e7e0      	b.n	800df9c <rmw_context_fini+0x1c>
 800dfda:	4626      	mov	r6, r4
 800dfdc:	e7de      	b.n	800df9c <rmw_context_fini+0x1c>
 800dfde:	bf00      	nop
 800dfe0:	2000b81c 	.word	0x2000b81c

0800dfe4 <create_node>:
 800dfe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfe8:	b083      	sub	sp, #12
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d05f      	beq.n	800e0ae <create_node+0xca>
 800dfee:	4606      	mov	r6, r0
 800dff0:	4835      	ldr	r0, [pc, #212]	@ (800e0c8 <create_node+0xe4>)
 800dff2:	460f      	mov	r7, r1
 800dff4:	4690      	mov	r8, r2
 800dff6:	461d      	mov	r5, r3
 800dff8:	f009 f8ea 	bl	80171d0 <get_memory>
 800dffc:	2800      	cmp	r0, #0
 800dffe:	d056      	beq.n	800e0ae <create_node+0xca>
 800e000:	6884      	ldr	r4, [r0, #8]
 800e002:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800e004:	6123      	str	r3, [r4, #16]
 800e006:	f009 f94b 	bl	80172a0 <rmw_get_implementation_identifier>
 800e00a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800e00e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e012:	f8c4 9020 	str.w	r9, [r4, #32]
 800e016:	4630      	mov	r0, r6
 800e018:	f7f2 f90c 	bl	8000234 <strlen>
 800e01c:	1c42      	adds	r2, r0, #1
 800e01e:	2a3c      	cmp	r2, #60	@ 0x3c
 800e020:	f104 0518 	add.w	r5, r4, #24
 800e024:	d840      	bhi.n	800e0a8 <create_node+0xc4>
 800e026:	4648      	mov	r0, r9
 800e028:	4631      	mov	r1, r6
 800e02a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800e02e:	f00b fd02 	bl	8019a36 <memcpy>
 800e032:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800e036:	4638      	mov	r0, r7
 800e038:	f7f2 f8fc 	bl	8000234 <strlen>
 800e03c:	1c42      	adds	r2, r0, #1
 800e03e:	2a3c      	cmp	r2, #60	@ 0x3c
 800e040:	d832      	bhi.n	800e0a8 <create_node+0xc4>
 800e042:	4639      	mov	r1, r7
 800e044:	4648      	mov	r0, r9
 800e046:	f00b fcf6 	bl	8019a36 <memcpy>
 800e04a:	6923      	ldr	r3, [r4, #16]
 800e04c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e050:	2101      	movs	r1, #1
 800e052:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800e056:	1842      	adds	r2, r0, r1
 800e058:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800e05c:	f002 fa32 	bl	80104c4 <uxr_object_id>
 800e060:	6160      	str	r0, [r4, #20]
 800e062:	783b      	ldrb	r3, [r7, #0]
 800e064:	2b2f      	cmp	r3, #47	@ 0x2f
 800e066:	d127      	bne.n	800e0b8 <create_node+0xd4>
 800e068:	787b      	ldrb	r3, [r7, #1]
 800e06a:	bb2b      	cbnz	r3, 800e0b8 <create_node+0xd4>
 800e06c:	4a17      	ldr	r2, [pc, #92]	@ (800e0cc <create_node+0xe8>)
 800e06e:	4818      	ldr	r0, [pc, #96]	@ (800e0d0 <create_node+0xec>)
 800e070:	4633      	mov	r3, r6
 800e072:	213c      	movs	r1, #60	@ 0x3c
 800e074:	f00b faa8 	bl	80195c8 <sniprintf>
 800e078:	6920      	ldr	r0, [r4, #16]
 800e07a:	4915      	ldr	r1, [pc, #84]	@ (800e0d0 <create_node+0xec>)
 800e07c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e080:	9100      	str	r1, [sp, #0]
 800e082:	2106      	movs	r1, #6
 800e084:	9101      	str	r1, [sp, #4]
 800e086:	6811      	ldr	r1, [r2, #0]
 800e088:	6962      	ldr	r2, [r4, #20]
 800e08a:	fa1f f388 	uxth.w	r3, r8
 800e08e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e092:	f002 f80d 	bl	80100b0 <uxr_buffer_create_participant_bin>
 800e096:	4602      	mov	r2, r0
 800e098:	6920      	ldr	r0, [r4, #16]
 800e09a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e09e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e0a2:	f000 ff0b 	bl	800eebc <run_xrce_session>
 800e0a6:	b918      	cbnz	r0, 800e0b0 <create_node+0xcc>
 800e0a8:	4628      	mov	r0, r5
 800e0aa:	f000 fd95 	bl	800ebd8 <rmw_uxrce_fini_node_memory>
 800e0ae:	2500      	movs	r5, #0
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	b003      	add	sp, #12
 800e0b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0b8:	4a06      	ldr	r2, [pc, #24]	@ (800e0d4 <create_node+0xf0>)
 800e0ba:	9600      	str	r6, [sp, #0]
 800e0bc:	463b      	mov	r3, r7
 800e0be:	213c      	movs	r1, #60	@ 0x3c
 800e0c0:	4803      	ldr	r0, [pc, #12]	@ (800e0d0 <create_node+0xec>)
 800e0c2:	f00b fa81 	bl	80195c8 <sniprintf>
 800e0c6:	e7d7      	b.n	800e078 <create_node+0x94>
 800e0c8:	2000b81c 	.word	0x2000b81c
 800e0cc:	0801b6e8 	.word	0x0801b6e8
 800e0d0:	20006d08 	.word	0x20006d08
 800e0d4:	0801b6d0 	.word	0x0801b6d0

0800e0d8 <rmw_create_node>:
 800e0d8:	b199      	cbz	r1, 800e102 <rmw_create_node+0x2a>
 800e0da:	780b      	ldrb	r3, [r1, #0]
 800e0dc:	468c      	mov	ip, r1
 800e0de:	b183      	cbz	r3, 800e102 <rmw_create_node+0x2a>
 800e0e0:	b410      	push	{r4}
 800e0e2:	4614      	mov	r4, r2
 800e0e4:	b14a      	cbz	r2, 800e0fa <rmw_create_node+0x22>
 800e0e6:	7813      	ldrb	r3, [r2, #0]
 800e0e8:	b13b      	cbz	r3, 800e0fa <rmw_create_node+0x22>
 800e0ea:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	4621      	mov	r1, r4
 800e0f0:	4660      	mov	r0, ip
 800e0f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0f6:	f7ff bf75 	b.w	800dfe4 <create_node>
 800e0fa:	2000      	movs	r0, #0
 800e0fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e100:	4770      	bx	lr
 800e102:	2000      	movs	r0, #0
 800e104:	4770      	bx	lr
 800e106:	bf00      	nop

0800e108 <rmw_destroy_node>:
 800e108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e10a:	b328      	cbz	r0, 800e158 <rmw_destroy_node+0x50>
 800e10c:	4607      	mov	r7, r0
 800e10e:	6800      	ldr	r0, [r0, #0]
 800e110:	b120      	cbz	r0, 800e11c <rmw_destroy_node+0x14>
 800e112:	4b36      	ldr	r3, [pc, #216]	@ (800e1ec <rmw_destroy_node+0xe4>)
 800e114:	6819      	ldr	r1, [r3, #0]
 800e116:	f7f2 f883 	bl	8000220 <strcmp>
 800e11a:	b9e8      	cbnz	r0, 800e158 <rmw_destroy_node+0x50>
 800e11c:	687d      	ldr	r5, [r7, #4]
 800e11e:	b1dd      	cbz	r5, 800e158 <rmw_destroy_node+0x50>
 800e120:	4b33      	ldr	r3, [pc, #204]	@ (800e1f0 <rmw_destroy_node+0xe8>)
 800e122:	681c      	ldr	r4, [r3, #0]
 800e124:	2c00      	cmp	r4, #0
 800e126:	d05f      	beq.n	800e1e8 <rmw_destroy_node+0xe0>
 800e128:	2600      	movs	r6, #0
 800e12a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e12e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800e132:	429d      	cmp	r5, r3
 800e134:	d013      	beq.n	800e15e <rmw_destroy_node+0x56>
 800e136:	2c00      	cmp	r4, #0
 800e138:	d1f7      	bne.n	800e12a <rmw_destroy_node+0x22>
 800e13a:	4b2e      	ldr	r3, [pc, #184]	@ (800e1f4 <rmw_destroy_node+0xec>)
 800e13c:	681c      	ldr	r4, [r3, #0]
 800e13e:	b1c4      	cbz	r4, 800e172 <rmw_destroy_node+0x6a>
 800e140:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e144:	6a0b      	ldr	r3, [r1, #32]
 800e146:	429d      	cmp	r5, r3
 800e148:	d1f9      	bne.n	800e13e <rmw_destroy_node+0x36>
 800e14a:	317c      	adds	r1, #124	@ 0x7c
 800e14c:	4638      	mov	r0, r7
 800e14e:	f000 fb37 	bl	800e7c0 <rmw_destroy_subscription>
 800e152:	2801      	cmp	r0, #1
 800e154:	4606      	mov	r6, r0
 800e156:	d1f2      	bne.n	800e13e <rmw_destroy_node+0x36>
 800e158:	2601      	movs	r6, #1
 800e15a:	4630      	mov	r0, r6
 800e15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e15e:	3184      	adds	r1, #132	@ 0x84
 800e160:	4638      	mov	r0, r7
 800e162:	f000 f9a5 	bl	800e4b0 <rmw_destroy_publisher>
 800e166:	2801      	cmp	r0, #1
 800e168:	4606      	mov	r6, r0
 800e16a:	d0f5      	beq.n	800e158 <rmw_destroy_node+0x50>
 800e16c:	2c00      	cmp	r4, #0
 800e16e:	d1dc      	bne.n	800e12a <rmw_destroy_node+0x22>
 800e170:	e7e3      	b.n	800e13a <rmw_destroy_node+0x32>
 800e172:	4b21      	ldr	r3, [pc, #132]	@ (800e1f8 <rmw_destroy_node+0xf0>)
 800e174:	681c      	ldr	r4, [r3, #0]
 800e176:	b16c      	cbz	r4, 800e194 <rmw_destroy_node+0x8c>
 800e178:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e17c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e17e:	429d      	cmp	r5, r3
 800e180:	d1f9      	bne.n	800e176 <rmw_destroy_node+0x6e>
 800e182:	317c      	adds	r1, #124	@ 0x7c
 800e184:	4638      	mov	r0, r7
 800e186:	f000 fab7 	bl	800e6f8 <rmw_destroy_service>
 800e18a:	2801      	cmp	r0, #1
 800e18c:	4606      	mov	r6, r0
 800e18e:	d0e3      	beq.n	800e158 <rmw_destroy_node+0x50>
 800e190:	2c00      	cmp	r4, #0
 800e192:	d1f1      	bne.n	800e178 <rmw_destroy_node+0x70>
 800e194:	4b19      	ldr	r3, [pc, #100]	@ (800e1fc <rmw_destroy_node+0xf4>)
 800e196:	681c      	ldr	r4, [r3, #0]
 800e198:	b16c      	cbz	r4, 800e1b6 <rmw_destroy_node+0xae>
 800e19a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e19e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e1a0:	429d      	cmp	r5, r3
 800e1a2:	d1f9      	bne.n	800e198 <rmw_destroy_node+0x90>
 800e1a4:	317c      	adds	r1, #124	@ 0x7c
 800e1a6:	4638      	mov	r0, r7
 800e1a8:	f009 f836 	bl	8017218 <rmw_destroy_client>
 800e1ac:	2801      	cmp	r0, #1
 800e1ae:	4606      	mov	r6, r0
 800e1b0:	d0d2      	beq.n	800e158 <rmw_destroy_node+0x50>
 800e1b2:	2c00      	cmp	r4, #0
 800e1b4:	d1f1      	bne.n	800e19a <rmw_destroy_node+0x92>
 800e1b6:	6928      	ldr	r0, [r5, #16]
 800e1b8:	696a      	ldr	r2, [r5, #20]
 800e1ba:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e1be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e1c2:	6819      	ldr	r1, [r3, #0]
 800e1c4:	f001 ff28 	bl	8010018 <uxr_buffer_delete_entity>
 800e1c8:	4602      	mov	r2, r0
 800e1ca:	6928      	ldr	r0, [r5, #16]
 800e1cc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e1d0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e1d4:	f000 fe72 	bl	800eebc <run_xrce_session>
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	bf08      	it	eq
 800e1dc:	2602      	moveq	r6, #2
 800e1de:	4638      	mov	r0, r7
 800e1e0:	f000 fcfa 	bl	800ebd8 <rmw_uxrce_fini_node_memory>
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1e8:	4626      	mov	r6, r4
 800e1ea:	e7a6      	b.n	800e13a <rmw_destroy_node+0x32>
 800e1ec:	0801c4b0 	.word	0x0801c4b0
 800e1f0:	2000b82c 	.word	0x2000b82c
 800e1f4:	2000b86c 	.word	0x2000b86c
 800e1f8:	2000b83c 	.word	0x2000b83c
 800e1fc:	20006e84 	.word	0x20006e84

0800e200 <rmw_node_get_graph_guard_condition>:
 800e200:	6843      	ldr	r3, [r0, #4]
 800e202:	6918      	ldr	r0, [r3, #16]
 800e204:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800e208:	4770      	bx	lr
 800e20a:	bf00      	nop

0800e20c <flush_session>:
 800e20c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e20e:	f002 bfa9 	b.w	8011164 <uxr_run_session_until_confirm_delivery>
 800e212:	bf00      	nop

0800e214 <rmw_publish>:
 800e214:	2800      	cmp	r0, #0
 800e216:	d053      	beq.n	800e2c0 <rmw_publish+0xac>
 800e218:	b570      	push	{r4, r5, r6, lr}
 800e21a:	460d      	mov	r5, r1
 800e21c:	b08e      	sub	sp, #56	@ 0x38
 800e21e:	2900      	cmp	r1, #0
 800e220:	d04b      	beq.n	800e2ba <rmw_publish+0xa6>
 800e222:	4604      	mov	r4, r0
 800e224:	6800      	ldr	r0, [r0, #0]
 800e226:	f000 ff63 	bl	800f0f0 <is_uxrce_rmw_identifier_valid>
 800e22a:	2800      	cmp	r0, #0
 800e22c:	d045      	beq.n	800e2ba <rmw_publish+0xa6>
 800e22e:	6866      	ldr	r6, [r4, #4]
 800e230:	2e00      	cmp	r6, #0
 800e232:	d042      	beq.n	800e2ba <rmw_publish+0xa6>
 800e234:	69b4      	ldr	r4, [r6, #24]
 800e236:	4628      	mov	r0, r5
 800e238:	6923      	ldr	r3, [r4, #16]
 800e23a:	4798      	blx	r3
 800e23c:	69f3      	ldr	r3, [r6, #28]
 800e23e:	9005      	str	r0, [sp, #20]
 800e240:	b113      	cbz	r3, 800e248 <rmw_publish+0x34>
 800e242:	a805      	add	r0, sp, #20
 800e244:	4798      	blx	r3
 800e246:	9805      	ldr	r0, [sp, #20]
 800e248:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e24c:	691b      	ldr	r3, [r3, #16]
 800e24e:	9000      	str	r0, [sp, #0]
 800e250:	6972      	ldr	r2, [r6, #20]
 800e252:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e254:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e258:	ab06      	add	r3, sp, #24
 800e25a:	f004 fa57 	bl	801270c <uxr_prepare_output_stream>
 800e25e:	b1d8      	cbz	r0, 800e298 <rmw_publish+0x84>
 800e260:	68a3      	ldr	r3, [r4, #8]
 800e262:	a906      	add	r1, sp, #24
 800e264:	4628      	mov	r0, r5
 800e266:	4798      	blx	r3
 800e268:	6a33      	ldr	r3, [r6, #32]
 800e26a:	4604      	mov	r4, r0
 800e26c:	b10b      	cbz	r3, 800e272 <rmw_publish+0x5e>
 800e26e:	a806      	add	r0, sp, #24
 800e270:	4798      	blx	r3
 800e272:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e276:	2b01      	cmp	r3, #1
 800e278:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e27c:	d022      	beq.n	800e2c4 <rmw_publish+0xb0>
 800e27e:	6918      	ldr	r0, [r3, #16]
 800e280:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e282:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e286:	f002 ff6d 	bl	8011164 <uxr_run_session_until_confirm_delivery>
 800e28a:	4020      	ands	r0, r4
 800e28c:	b2c4      	uxtb	r4, r0
 800e28e:	f084 0001 	eor.w	r0, r4, #1
 800e292:	b2c0      	uxtb	r0, r0
 800e294:	b00e      	add	sp, #56	@ 0x38
 800e296:	bd70      	pop	{r4, r5, r6, pc}
 800e298:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e29c:	6918      	ldr	r0, [r3, #16]
 800e29e:	9b05      	ldr	r3, [sp, #20]
 800e2a0:	9300      	str	r3, [sp, #0]
 800e2a2:	4b0b      	ldr	r3, [pc, #44]	@ (800e2d0 <rmw_publish+0xbc>)
 800e2a4:	9301      	str	r3, [sp, #4]
 800e2a6:	9602      	str	r6, [sp, #8]
 800e2a8:	6972      	ldr	r2, [r6, #20]
 800e2aa:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e2ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e2b0:	ab06      	add	r3, sp, #24
 800e2b2:	f004 fa5b 	bl	801276c <uxr_prepare_output_stream_fragmented>
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	d1d2      	bne.n	800e260 <rmw_publish+0x4c>
 800e2ba:	2001      	movs	r0, #1
 800e2bc:	b00e      	add	sp, #56	@ 0x38
 800e2be:	bd70      	pop	{r4, r5, r6, pc}
 800e2c0:	2001      	movs	r0, #1
 800e2c2:	4770      	bx	lr
 800e2c4:	6918      	ldr	r0, [r3, #16]
 800e2c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e2ca:	f002 fb8b 	bl	80109e4 <uxr_flash_output_streams>
 800e2ce:	e7de      	b.n	800e28e <rmw_publish+0x7a>
 800e2d0:	0800e20d 	.word	0x0800e20d

0800e2d4 <rmw_create_publisher>:
 800e2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d8:	b087      	sub	sp, #28
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	f000 80cc 	beq.w	800e478 <rmw_create_publisher+0x1a4>
 800e2e0:	460e      	mov	r6, r1
 800e2e2:	2900      	cmp	r1, #0
 800e2e4:	f000 80c8 	beq.w	800e478 <rmw_create_publisher+0x1a4>
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	6800      	ldr	r0, [r0, #0]
 800e2ec:	4615      	mov	r5, r2
 800e2ee:	4698      	mov	r8, r3
 800e2f0:	f000 fefe 	bl	800f0f0 <is_uxrce_rmw_identifier_valid>
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	f000 80bf 	beq.w	800e478 <rmw_create_publisher+0x1a4>
 800e2fa:	2d00      	cmp	r5, #0
 800e2fc:	f000 80bc 	beq.w	800e478 <rmw_create_publisher+0x1a4>
 800e300:	782b      	ldrb	r3, [r5, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	f000 80b8 	beq.w	800e478 <rmw_create_publisher+0x1a4>
 800e308:	f1b8 0f00 	cmp.w	r8, #0
 800e30c:	f000 80b4 	beq.w	800e478 <rmw_create_publisher+0x1a4>
 800e310:	485c      	ldr	r0, [pc, #368]	@ (800e484 <rmw_create_publisher+0x1b0>)
 800e312:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e316:	f008 ff5b 	bl	80171d0 <get_memory>
 800e31a:	2800      	cmp	r0, #0
 800e31c:	f000 80ac 	beq.w	800e478 <rmw_create_publisher+0x1a4>
 800e320:	6884      	ldr	r4, [r0, #8]
 800e322:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e326:	f008 ffbb 	bl	80172a0 <rmw_get_implementation_identifier>
 800e32a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800e32e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e332:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800e336:	4628      	mov	r0, r5
 800e338:	f7f1 ff7c 	bl	8000234 <strlen>
 800e33c:	3001      	adds	r0, #1
 800e33e:	283c      	cmp	r0, #60	@ 0x3c
 800e340:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800e344:	f200 8091 	bhi.w	800e46a <rmw_create_publisher+0x196>
 800e348:	4a4f      	ldr	r2, [pc, #316]	@ (800e488 <rmw_create_publisher+0x1b4>)
 800e34a:	462b      	mov	r3, r5
 800e34c:	213c      	movs	r1, #60	@ 0x3c
 800e34e:	4650      	mov	r0, sl
 800e350:	f00b f93a 	bl	80195c8 <sniprintf>
 800e354:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e358:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800e35a:	4641      	mov	r1, r8
 800e35c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800e360:	2250      	movs	r2, #80	@ 0x50
 800e362:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e366:	f00b fb66 	bl	8019a36 <memcpy>
 800e36a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e36e:	4947      	ldr	r1, [pc, #284]	@ (800e48c <rmw_create_publisher+0x1b8>)
 800e370:	2b02      	cmp	r3, #2
 800e372:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e376:	bf0c      	ite	eq
 800e378:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800e37c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800e380:	67a3      	str	r3, [r4, #120]	@ 0x78
 800e382:	2300      	movs	r3, #0
 800e384:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e388:	4630      	mov	r0, r6
 800e38a:	f000 febf 	bl	800f10c <get_message_typesupport_handle>
 800e38e:	2800      	cmp	r0, #0
 800e390:	d06b      	beq.n	800e46a <rmw_create_publisher+0x196>
 800e392:	6842      	ldr	r2, [r0, #4]
 800e394:	61a2      	str	r2, [r4, #24]
 800e396:	2a00      	cmp	r2, #0
 800e398:	d067      	beq.n	800e46a <rmw_create_publisher+0x196>
 800e39a:	4629      	mov	r1, r5
 800e39c:	4643      	mov	r3, r8
 800e39e:	4648      	mov	r0, r9
 800e3a0:	f008 ff84 	bl	80172ac <create_topic>
 800e3a4:	6260      	str	r0, [r4, #36]	@ 0x24
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	d063      	beq.n	800e472 <rmw_create_publisher+0x19e>
 800e3aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e3ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e3b2:	2103      	movs	r1, #3
 800e3b4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800e3b8:	1c42      	adds	r2, r0, #1
 800e3ba:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800e3be:	f002 f881 	bl	80104c4 <uxr_object_id>
 800e3c2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e3c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e3ca:	6120      	str	r0, [r4, #16]
 800e3cc:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800e3d0:	6910      	ldr	r0, [r2, #16]
 800e3d2:	2506      	movs	r5, #6
 800e3d4:	9500      	str	r5, [sp, #0]
 800e3d6:	6819      	ldr	r1, [r3, #0]
 800e3d8:	6922      	ldr	r2, [r4, #16]
 800e3da:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e3de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e3e2:	f001 fecd 	bl	8010180 <uxr_buffer_create_publisher_bin>
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e3ec:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e3f0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e3f4:	f000 fd62 	bl	800eebc <run_xrce_session>
 800e3f8:	b3b8      	cbz	r0, 800e46a <rmw_create_publisher+0x196>
 800e3fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e3fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e402:	2105      	movs	r1, #5
 800e404:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800e408:	1c42      	adds	r2, r0, #1
 800e40a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800e40e:	f002 f859 	bl	80104c4 <uxr_object_id>
 800e412:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e416:	6160      	str	r0, [r4, #20]
 800e418:	691e      	ldr	r6, [r3, #16]
 800e41a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e41e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800e422:	f10d 0a10 	add.w	sl, sp, #16
 800e426:	4641      	mov	r1, r8
 800e428:	4650      	mov	r0, sl
 800e42a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800e42e:	f000 fd61 	bl	800eef4 <convert_qos_profile>
 800e432:	9503      	str	r5, [sp, #12]
 800e434:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800e438:	9001      	str	r0, [sp, #4]
 800e43a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e43e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e442:	9300      	str	r3, [sp, #0]
 800e444:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800e448:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e44c:	f8d8 1000 	ldr.w	r1, [r8]
 800e450:	4630      	mov	r0, r6
 800e452:	f001 fec5 	bl	80101e0 <uxr_buffer_create_datawriter_bin>
 800e456:	4602      	mov	r2, r0
 800e458:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e45c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e460:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e464:	f000 fd2a 	bl	800eebc <run_xrce_session>
 800e468:	b938      	cbnz	r0, 800e47a <rmw_create_publisher+0x1a6>
 800e46a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e46c:	b108      	cbz	r0, 800e472 <rmw_create_publisher+0x19e>
 800e46e:	f000 fc23 	bl	800ecb8 <rmw_uxrce_fini_topic_memory>
 800e472:	4638      	mov	r0, r7
 800e474:	f000 fbc8 	bl	800ec08 <rmw_uxrce_fini_publisher_memory>
 800e478:	2700      	movs	r7, #0
 800e47a:	4638      	mov	r0, r7
 800e47c:	b007      	add	sp, #28
 800e47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e482:	bf00      	nop
 800e484:	2000b82c 	.word	0x2000b82c
 800e488:	0801b6e8 	.word	0x0801b6e8
 800e48c:	0801b050 	.word	0x0801b050

0800e490 <rmw_publisher_get_actual_qos>:
 800e490:	b150      	cbz	r0, 800e4a8 <rmw_publisher_get_actual_qos+0x18>
 800e492:	b508      	push	{r3, lr}
 800e494:	460b      	mov	r3, r1
 800e496:	b149      	cbz	r1, 800e4ac <rmw_publisher_get_actual_qos+0x1c>
 800e498:	6841      	ldr	r1, [r0, #4]
 800e49a:	2250      	movs	r2, #80	@ 0x50
 800e49c:	3128      	adds	r1, #40	@ 0x28
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f00b fac9 	bl	8019a36 <memcpy>
 800e4a4:	2000      	movs	r0, #0
 800e4a6:	bd08      	pop	{r3, pc}
 800e4a8:	200b      	movs	r0, #11
 800e4aa:	4770      	bx	lr
 800e4ac:	200b      	movs	r0, #11
 800e4ae:	bd08      	pop	{r3, pc}

0800e4b0 <rmw_destroy_publisher>:
 800e4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4b2:	b128      	cbz	r0, 800e4c0 <rmw_destroy_publisher+0x10>
 800e4b4:	4604      	mov	r4, r0
 800e4b6:	6800      	ldr	r0, [r0, #0]
 800e4b8:	460d      	mov	r5, r1
 800e4ba:	f000 fe19 	bl	800f0f0 <is_uxrce_rmw_identifier_valid>
 800e4be:	b910      	cbnz	r0, 800e4c6 <rmw_destroy_publisher+0x16>
 800e4c0:	2401      	movs	r4, #1
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4c6:	6863      	ldr	r3, [r4, #4]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d0f9      	beq.n	800e4c0 <rmw_destroy_publisher+0x10>
 800e4cc:	2d00      	cmp	r5, #0
 800e4ce:	d0f7      	beq.n	800e4c0 <rmw_destroy_publisher+0x10>
 800e4d0:	6828      	ldr	r0, [r5, #0]
 800e4d2:	f000 fe0d 	bl	800f0f0 <is_uxrce_rmw_identifier_valid>
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	d0f2      	beq.n	800e4c0 <rmw_destroy_publisher+0x10>
 800e4da:	686c      	ldr	r4, [r5, #4]
 800e4dc:	2c00      	cmp	r4, #0
 800e4de:	d0ef      	beq.n	800e4c0 <rmw_destroy_publisher+0x10>
 800e4e0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e4e2:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800e4e6:	f008 ff31 	bl	801734c <destroy_topic>
 800e4ea:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e4ee:	6962      	ldr	r2, [r4, #20]
 800e4f0:	6918      	ldr	r0, [r3, #16]
 800e4f2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e4f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e4fa:	6819      	ldr	r1, [r3, #0]
 800e4fc:	f001 fd8c 	bl	8010018 <uxr_buffer_delete_entity>
 800e500:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e504:	6922      	ldr	r2, [r4, #16]
 800e506:	691b      	ldr	r3, [r3, #16]
 800e508:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e50c:	4604      	mov	r4, r0
 800e50e:	6809      	ldr	r1, [r1, #0]
 800e510:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e514:	f001 fd80 	bl	8010018 <uxr_buffer_delete_entity>
 800e518:	693e      	ldr	r6, [r7, #16]
 800e51a:	4622      	mov	r2, r4
 800e51c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e520:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e524:	4604      	mov	r4, r0
 800e526:	4630      	mov	r0, r6
 800e528:	f000 fcc8 	bl	800eebc <run_xrce_session>
 800e52c:	693e      	ldr	r6, [r7, #16]
 800e52e:	4622      	mov	r2, r4
 800e530:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e534:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e538:	4604      	mov	r4, r0
 800e53a:	4630      	mov	r0, r6
 800e53c:	f000 fcbe 	bl	800eebc <run_xrce_session>
 800e540:	b12c      	cbz	r4, 800e54e <rmw_destroy_publisher+0x9e>
 800e542:	b120      	cbz	r0, 800e54e <rmw_destroy_publisher+0x9e>
 800e544:	2400      	movs	r4, #0
 800e546:	4628      	mov	r0, r5
 800e548:	f000 fb5e 	bl	800ec08 <rmw_uxrce_fini_publisher_memory>
 800e54c:	e7b9      	b.n	800e4c2 <rmw_destroy_publisher+0x12>
 800e54e:	2402      	movs	r4, #2
 800e550:	e7f9      	b.n	800e546 <rmw_destroy_publisher+0x96>
 800e552:	bf00      	nop

0800e554 <rmw_create_service>:
 800e554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e558:	b091      	sub	sp, #68	@ 0x44
 800e55a:	2800      	cmp	r0, #0
 800e55c:	f000 80ba 	beq.w	800e6d4 <rmw_create_service+0x180>
 800e560:	4689      	mov	r9, r1
 800e562:	2900      	cmp	r1, #0
 800e564:	f000 80b6 	beq.w	800e6d4 <rmw_create_service+0x180>
 800e568:	4606      	mov	r6, r0
 800e56a:	6800      	ldr	r0, [r0, #0]
 800e56c:	4614      	mov	r4, r2
 800e56e:	461d      	mov	r5, r3
 800e570:	f000 fdbe 	bl	800f0f0 <is_uxrce_rmw_identifier_valid>
 800e574:	2800      	cmp	r0, #0
 800e576:	f000 80ad 	beq.w	800e6d4 <rmw_create_service+0x180>
 800e57a:	2c00      	cmp	r4, #0
 800e57c:	f000 80aa 	beq.w	800e6d4 <rmw_create_service+0x180>
 800e580:	7823      	ldrb	r3, [r4, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	f000 80a6 	beq.w	800e6d4 <rmw_create_service+0x180>
 800e588:	2d00      	cmp	r5, #0
 800e58a:	f000 80a3 	beq.w	800e6d4 <rmw_create_service+0x180>
 800e58e:	4854      	ldr	r0, [pc, #336]	@ (800e6e0 <rmw_create_service+0x18c>)
 800e590:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800e594:	f008 fe1c 	bl	80171d0 <get_memory>
 800e598:	4606      	mov	r6, r0
 800e59a:	2800      	cmp	r0, #0
 800e59c:	f000 809b 	beq.w	800e6d6 <rmw_create_service+0x182>
 800e5a0:	6887      	ldr	r7, [r0, #8]
 800e5a2:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800e5a6:	f008 fe7b 	bl	80172a0 <rmw_get_implementation_identifier>
 800e5aa:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 800e5ae:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800e5b0:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	f7f1 fe3d 	bl	8000234 <strlen>
 800e5ba:	1c42      	adds	r2, r0, #1
 800e5bc:	2a3c      	cmp	r2, #60	@ 0x3c
 800e5be:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 800e5c2:	f200 8084 	bhi.w	800e6ce <rmw_create_service+0x17a>
 800e5c6:	4621      	mov	r1, r4
 800e5c8:	4650      	mov	r0, sl
 800e5ca:	f00b fa34 	bl	8019a36 <memcpy>
 800e5ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e5d2:	4629      	mov	r1, r5
 800e5d4:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 800e5d8:	677b      	str	r3, [r7, #116]	@ 0x74
 800e5da:	2250      	movs	r2, #80	@ 0x50
 800e5dc:	f107 0020 	add.w	r0, r7, #32
 800e5e0:	f00b fa29 	bl	8019a36 <memcpy>
 800e5e4:	493f      	ldr	r1, [pc, #252]	@ (800e6e4 <rmw_create_service+0x190>)
 800e5e6:	4648      	mov	r0, r9
 800e5e8:	f000 fd9c 	bl	800f124 <get_service_typesupport_handle>
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	d06e      	beq.n	800e6ce <rmw_create_service+0x17a>
 800e5f0:	6843      	ldr	r3, [r0, #4]
 800e5f2:	617b      	str	r3, [r7, #20]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d06a      	beq.n	800e6ce <rmw_create_service+0x17a>
 800e5f8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e5fc:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 800e6ec <rmw_create_service+0x198>
 800e600:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800e6f0 <rmw_create_service+0x19c>
 800e604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e608:	2108      	movs	r1, #8
 800e60a:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 800e60e:	1c42      	adds	r2, r0, #1
 800e610:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 800e614:	f001 ff56 	bl	80104c4 <uxr_object_id>
 800e618:	2364      	movs	r3, #100	@ 0x64
 800e61a:	6138      	str	r0, [r7, #16]
 800e61c:	4652      	mov	r2, sl
 800e61e:	6978      	ldr	r0, [r7, #20]
 800e620:	4649      	mov	r1, r9
 800e622:	f000 fcb3 	bl	800ef8c <generate_service_types>
 800e626:	2800      	cmp	r0, #0
 800e628:	d051      	beq.n	800e6ce <rmw_create_service+0x17a>
 800e62a:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 800e6f4 <rmw_create_service+0x1a0>
 800e62e:	4a2e      	ldr	r2, [pc, #184]	@ (800e6e8 <rmw_create_service+0x194>)
 800e630:	233c      	movs	r3, #60	@ 0x3c
 800e632:	4659      	mov	r1, fp
 800e634:	4620      	mov	r0, r4
 800e636:	f000 fc77 	bl	800ef28 <generate_service_topics>
 800e63a:	2800      	cmp	r0, #0
 800e63c:	d047      	beq.n	800e6ce <rmw_create_service+0x17a>
 800e63e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e642:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800e646:	a80c      	add	r0, sp, #48	@ 0x30
 800e648:	4629      	mov	r1, r5
 800e64a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e64e:	f000 fc51 	bl	800eef4 <convert_qos_profile>
 800e652:	4a25      	ldr	r2, [pc, #148]	@ (800e6e8 <rmw_create_service+0x194>)
 800e654:	9400      	str	r4, [sp, #0]
 800e656:	e9cd b203 	strd	fp, r2, [sp, #12]
 800e65a:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800e65e:	a80c      	add	r0, sp, #48	@ 0x30
 800e660:	c803      	ldmia	r0, {r0, r1}
 800e662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e664:	9005      	str	r0, [sp, #20]
 800e666:	9a08      	ldr	r2, [sp, #32]
 800e668:	f8ad 1018 	strh.w	r1, [sp, #24]
 800e66c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e670:	2306      	movs	r3, #6
 800e672:	9307      	str	r3, [sp, #28]
 800e674:	6811      	ldr	r1, [r2, #0]
 800e676:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e67a:	693a      	ldr	r2, [r7, #16]
 800e67c:	f001 fe26 	bl	80102cc <uxr_buffer_create_replier_bin>
 800e680:	4602      	mov	r2, r0
 800e682:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800e686:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e68a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e68e:	f000 fc15 	bl	800eebc <run_xrce_session>
 800e692:	b1e0      	cbz	r0, 800e6ce <rmw_create_service+0x17a>
 800e694:	7a2b      	ldrb	r3, [r5, #8]
 800e696:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800e69a:	2200      	movs	r2, #0
 800e69c:	2b02      	cmp	r3, #2
 800e69e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e6a2:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 800e6a6:	bf0c      	ite	eq
 800e6a8:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 800e6ac:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 800e6b0:	673a      	str	r2, [r7, #112]	@ 0x70
 800e6b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e6b4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e6b8:	ab0e      	add	r3, sp, #56	@ 0x38
 800e6ba:	9300      	str	r3, [sp, #0]
 800e6bc:	6811      	ldr	r1, [r2, #0]
 800e6be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6c0:	693a      	ldr	r2, [r7, #16]
 800e6c2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e6c6:	f001 ff2d 	bl	8010524 <uxr_buffer_request_data>
 800e6ca:	8338      	strh	r0, [r7, #24]
 800e6cc:	e003      	b.n	800e6d6 <rmw_create_service+0x182>
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	f000 fac6 	bl	800ec60 <rmw_uxrce_fini_service_memory>
 800e6d4:	2600      	movs	r6, #0
 800e6d6:	4630      	mov	r0, r6
 800e6d8:	b011      	add	sp, #68	@ 0x44
 800e6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6de:	bf00      	nop
 800e6e0:	2000b83c 	.word	0x2000b83c
 800e6e4:	0801b050 	.word	0x0801b050
 800e6e8:	20006de4 	.word	0x20006de4
 800e6ec:	20006e20 	.word	0x20006e20
 800e6f0:	20006d80 	.word	0x20006d80
 800e6f4:	20006d44 	.word	0x20006d44

0800e6f8 <rmw_destroy_service>:
 800e6f8:	b570      	push	{r4, r5, r6, lr}
 800e6fa:	b128      	cbz	r0, 800e708 <rmw_destroy_service+0x10>
 800e6fc:	4604      	mov	r4, r0
 800e6fe:	6800      	ldr	r0, [r0, #0]
 800e700:	460d      	mov	r5, r1
 800e702:	f000 fcf5 	bl	800f0f0 <is_uxrce_rmw_identifier_valid>
 800e706:	b910      	cbnz	r0, 800e70e <rmw_destroy_service+0x16>
 800e708:	2401      	movs	r4, #1
 800e70a:	4620      	mov	r0, r4
 800e70c:	bd70      	pop	{r4, r5, r6, pc}
 800e70e:	6863      	ldr	r3, [r4, #4]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d0f9      	beq.n	800e708 <rmw_destroy_service+0x10>
 800e714:	2d00      	cmp	r5, #0
 800e716:	d0f7      	beq.n	800e708 <rmw_destroy_service+0x10>
 800e718:	6828      	ldr	r0, [r5, #0]
 800e71a:	f000 fce9 	bl	800f0f0 <is_uxrce_rmw_identifier_valid>
 800e71e:	2800      	cmp	r0, #0
 800e720:	d0f2      	beq.n	800e708 <rmw_destroy_service+0x10>
 800e722:	686e      	ldr	r6, [r5, #4]
 800e724:	2e00      	cmp	r6, #0
 800e726:	d0ef      	beq.n	800e708 <rmw_destroy_service+0x10>
 800e728:	6864      	ldr	r4, [r4, #4]
 800e72a:	6932      	ldr	r2, [r6, #16]
 800e72c:	6920      	ldr	r0, [r4, #16]
 800e72e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e732:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e736:	6819      	ldr	r1, [r3, #0]
 800e738:	f001 ff2e 	bl	8010598 <uxr_buffer_cancel_data>
 800e73c:	4602      	mov	r2, r0
 800e73e:	6920      	ldr	r0, [r4, #16]
 800e740:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e744:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e748:	f000 fbb8 	bl	800eebc <run_xrce_session>
 800e74c:	6920      	ldr	r0, [r4, #16]
 800e74e:	6932      	ldr	r2, [r6, #16]
 800e750:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e754:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e758:	6819      	ldr	r1, [r3, #0]
 800e75a:	f001 fc5d 	bl	8010018 <uxr_buffer_delete_entity>
 800e75e:	4602      	mov	r2, r0
 800e760:	6920      	ldr	r0, [r4, #16]
 800e762:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e766:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e76a:	f000 fba7 	bl	800eebc <run_xrce_session>
 800e76e:	2800      	cmp	r0, #0
 800e770:	4628      	mov	r0, r5
 800e772:	bf14      	ite	ne
 800e774:	2400      	movne	r4, #0
 800e776:	2402      	moveq	r4, #2
 800e778:	f000 fa72 	bl	800ec60 <rmw_uxrce_fini_service_memory>
 800e77c:	e7c5      	b.n	800e70a <rmw_destroy_service+0x12>
 800e77e:	bf00      	nop

0800e780 <rmw_service_response_publisher_get_actual_qos>:
 800e780:	b150      	cbz	r0, 800e798 <rmw_service_response_publisher_get_actual_qos+0x18>
 800e782:	b508      	push	{r3, lr}
 800e784:	460b      	mov	r3, r1
 800e786:	b149      	cbz	r1, 800e79c <rmw_service_response_publisher_get_actual_qos+0x1c>
 800e788:	6841      	ldr	r1, [r0, #4]
 800e78a:	2250      	movs	r2, #80	@ 0x50
 800e78c:	3120      	adds	r1, #32
 800e78e:	4618      	mov	r0, r3
 800e790:	f00b f951 	bl	8019a36 <memcpy>
 800e794:	2000      	movs	r0, #0
 800e796:	bd08      	pop	{r3, pc}
 800e798:	200b      	movs	r0, #11
 800e79a:	4770      	bx	lr
 800e79c:	200b      	movs	r0, #11
 800e79e:	bd08      	pop	{r3, pc}

0800e7a0 <rmw_service_request_subscription_get_actual_qos>:
 800e7a0:	b150      	cbz	r0, 800e7b8 <rmw_service_request_subscription_get_actual_qos+0x18>
 800e7a2:	b508      	push	{r3, lr}
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	b149      	cbz	r1, 800e7bc <rmw_service_request_subscription_get_actual_qos+0x1c>
 800e7a8:	6841      	ldr	r1, [r0, #4]
 800e7aa:	2250      	movs	r2, #80	@ 0x50
 800e7ac:	3120      	adds	r1, #32
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f00b f941 	bl	8019a36 <memcpy>
 800e7b4:	2000      	movs	r0, #0
 800e7b6:	bd08      	pop	{r3, pc}
 800e7b8:	200b      	movs	r0, #11
 800e7ba:	4770      	bx	lr
 800e7bc:	200b      	movs	r0, #11
 800e7be:	bd08      	pop	{r3, pc}

0800e7c0 <rmw_destroy_subscription>:
 800e7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7c2:	b128      	cbz	r0, 800e7d0 <rmw_destroy_subscription+0x10>
 800e7c4:	4604      	mov	r4, r0
 800e7c6:	6800      	ldr	r0, [r0, #0]
 800e7c8:	460d      	mov	r5, r1
 800e7ca:	f000 fc91 	bl	800f0f0 <is_uxrce_rmw_identifier_valid>
 800e7ce:	b910      	cbnz	r0, 800e7d6 <rmw_destroy_subscription+0x16>
 800e7d0:	2401      	movs	r4, #1
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7d6:	6863      	ldr	r3, [r4, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d0f9      	beq.n	800e7d0 <rmw_destroy_subscription+0x10>
 800e7dc:	2d00      	cmp	r5, #0
 800e7de:	d0f7      	beq.n	800e7d0 <rmw_destroy_subscription+0x10>
 800e7e0:	6828      	ldr	r0, [r5, #0]
 800e7e2:	f000 fc85 	bl	800f0f0 <is_uxrce_rmw_identifier_valid>
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	d0f2      	beq.n	800e7d0 <rmw_destroy_subscription+0x10>
 800e7ea:	686c      	ldr	r4, [r5, #4]
 800e7ec:	2c00      	cmp	r4, #0
 800e7ee:	d0ef      	beq.n	800e7d0 <rmw_destroy_subscription+0x10>
 800e7f0:	6a26      	ldr	r6, [r4, #32]
 800e7f2:	6962      	ldr	r2, [r4, #20]
 800e7f4:	6930      	ldr	r0, [r6, #16]
 800e7f6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e7fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e7fe:	6819      	ldr	r1, [r3, #0]
 800e800:	f001 feca 	bl	8010598 <uxr_buffer_cancel_data>
 800e804:	4602      	mov	r2, r0
 800e806:	6930      	ldr	r0, [r6, #16]
 800e808:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e80c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e810:	f000 fb54 	bl	800eebc <run_xrce_session>
 800e814:	69e0      	ldr	r0, [r4, #28]
 800e816:	f008 fd99 	bl	801734c <destroy_topic>
 800e81a:	6a23      	ldr	r3, [r4, #32]
 800e81c:	6962      	ldr	r2, [r4, #20]
 800e81e:	6918      	ldr	r0, [r3, #16]
 800e820:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e824:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e828:	6819      	ldr	r1, [r3, #0]
 800e82a:	f001 fbf5 	bl	8010018 <uxr_buffer_delete_entity>
 800e82e:	6a23      	ldr	r3, [r4, #32]
 800e830:	6922      	ldr	r2, [r4, #16]
 800e832:	691b      	ldr	r3, [r3, #16]
 800e834:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e838:	4604      	mov	r4, r0
 800e83a:	6809      	ldr	r1, [r1, #0]
 800e83c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e840:	f001 fbea 	bl	8010018 <uxr_buffer_delete_entity>
 800e844:	6937      	ldr	r7, [r6, #16]
 800e846:	4622      	mov	r2, r4
 800e848:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800e84c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800e850:	4604      	mov	r4, r0
 800e852:	4638      	mov	r0, r7
 800e854:	f000 fb32 	bl	800eebc <run_xrce_session>
 800e858:	6936      	ldr	r6, [r6, #16]
 800e85a:	4622      	mov	r2, r4
 800e85c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e860:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e864:	4604      	mov	r4, r0
 800e866:	4630      	mov	r0, r6
 800e868:	f000 fb28 	bl	800eebc <run_xrce_session>
 800e86c:	b12c      	cbz	r4, 800e87a <rmw_destroy_subscription+0xba>
 800e86e:	b120      	cbz	r0, 800e87a <rmw_destroy_subscription+0xba>
 800e870:	2400      	movs	r4, #0
 800e872:	4628      	mov	r0, r5
 800e874:	f000 f9de 	bl	800ec34 <rmw_uxrce_fini_subscription_memory>
 800e878:	e7ab      	b.n	800e7d2 <rmw_destroy_subscription+0x12>
 800e87a:	2402      	movs	r4, #2
 800e87c:	e7f9      	b.n	800e872 <rmw_destroy_subscription+0xb2>
 800e87e:	bf00      	nop

0800e880 <rmw_uxrce_transport_init>:
 800e880:	b508      	push	{r3, lr}
 800e882:	b108      	cbz	r0, 800e888 <rmw_uxrce_transport_init+0x8>
 800e884:	f100 0210 	add.w	r2, r0, #16
 800e888:	b139      	cbz	r1, 800e89a <rmw_uxrce_transport_init+0x1a>
 800e88a:	6949      	ldr	r1, [r1, #20]
 800e88c:	4610      	mov	r0, r2
 800e88e:	f001 fde1 	bl	8010454 <uxr_init_custom_transport>
 800e892:	f080 0001 	eor.w	r0, r0, #1
 800e896:	b2c0      	uxtb	r0, r0
 800e898:	bd08      	pop	{r3, pc}
 800e89a:	4b04      	ldr	r3, [pc, #16]	@ (800e8ac <rmw_uxrce_transport_init+0x2c>)
 800e89c:	4610      	mov	r0, r2
 800e89e:	6859      	ldr	r1, [r3, #4]
 800e8a0:	f001 fdd8 	bl	8010454 <uxr_init_custom_transport>
 800e8a4:	f080 0001 	eor.w	r0, r0, #1
 800e8a8:	b2c0      	uxtb	r0, r0
 800e8aa:	bd08      	pop	{r3, pc}
 800e8ac:	20006cec 	.word	0x20006cec

0800e8b0 <rmw_uros_epoch_millis>:
 800e8b0:	4b05      	ldr	r3, [pc, #20]	@ (800e8c8 <rmw_uros_epoch_millis+0x18>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	b123      	cbz	r3, 800e8c0 <rmw_uros_epoch_millis+0x10>
 800e8b6:	6898      	ldr	r0, [r3, #8]
 800e8b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e8bc:	f002 b876 	b.w	80109ac <uxr_epoch_millis>
 800e8c0:	2000      	movs	r0, #0
 800e8c2:	2100      	movs	r1, #0
 800e8c4:	4770      	bx	lr
 800e8c6:	bf00      	nop
 800e8c8:	2000b84c 	.word	0x2000b84c

0800e8cc <rmw_uros_epoch_nanos>:
 800e8cc:	4b05      	ldr	r3, [pc, #20]	@ (800e8e4 <rmw_uros_epoch_nanos+0x18>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	b123      	cbz	r3, 800e8dc <rmw_uros_epoch_nanos+0x10>
 800e8d2:	6898      	ldr	r0, [r3, #8]
 800e8d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e8d8:	f002 b87a 	b.w	80109d0 <uxr_epoch_nanos>
 800e8dc:	2000      	movs	r0, #0
 800e8de:	2100      	movs	r1, #0
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop
 800e8e4:	2000b84c 	.word	0x2000b84c

0800e8e8 <rmw_uros_sync_session>:
 800e8e8:	b508      	push	{r3, lr}
 800e8ea:	4b07      	ldr	r3, [pc, #28]	@ (800e908 <rmw_uros_sync_session+0x20>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	b14b      	cbz	r3, 800e904 <rmw_uros_sync_session+0x1c>
 800e8f0:	4601      	mov	r1, r0
 800e8f2:	6898      	ldr	r0, [r3, #8]
 800e8f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e8f8:	f002 fcae 	bl	8011258 <uxr_sync_session>
 800e8fc:	f080 0001 	eor.w	r0, r0, #1
 800e900:	b2c0      	uxtb	r0, r0
 800e902:	bd08      	pop	{r3, pc}
 800e904:	2001      	movs	r0, #1
 800e906:	bd08      	pop	{r3, pc}
 800e908:	2000b84c 	.word	0x2000b84c

0800e90c <rmw_uxrce_init_service_memory>:
 800e90c:	b1e2      	cbz	r2, 800e948 <rmw_uxrce_init_service_memory+0x3c>
 800e90e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e912:	7b05      	ldrb	r5, [r0, #12]
 800e914:	4606      	mov	r6, r0
 800e916:	b9ad      	cbnz	r5, 800e944 <rmw_uxrce_init_service_memory+0x38>
 800e918:	23c8      	movs	r3, #200	@ 0xc8
 800e91a:	e9c0 5500 	strd	r5, r5, [r0]
 800e91e:	6083      	str	r3, [r0, #8]
 800e920:	f240 1301 	movw	r3, #257	@ 0x101
 800e924:	4617      	mov	r7, r2
 800e926:	8183      	strh	r3, [r0, #12]
 800e928:	460c      	mov	r4, r1
 800e92a:	46a8      	mov	r8, r5
 800e92c:	4621      	mov	r1, r4
 800e92e:	4630      	mov	r0, r6
 800e930:	3501      	adds	r5, #1
 800e932:	f008 fc5d 	bl	80171f0 <put_memory>
 800e936:	42af      	cmp	r7, r5
 800e938:	60a4      	str	r4, [r4, #8]
 800e93a:	f884 800c 	strb.w	r8, [r4, #12]
 800e93e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e942:	d1f3      	bne.n	800e92c <rmw_uxrce_init_service_memory+0x20>
 800e944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e948:	4770      	bx	lr
 800e94a:	bf00      	nop

0800e94c <rmw_uxrce_init_client_memory>:
 800e94c:	b1e2      	cbz	r2, 800e988 <rmw_uxrce_init_client_memory+0x3c>
 800e94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e952:	7b05      	ldrb	r5, [r0, #12]
 800e954:	4606      	mov	r6, r0
 800e956:	b9ad      	cbnz	r5, 800e984 <rmw_uxrce_init_client_memory+0x38>
 800e958:	23c8      	movs	r3, #200	@ 0xc8
 800e95a:	e9c0 5500 	strd	r5, r5, [r0]
 800e95e:	6083      	str	r3, [r0, #8]
 800e960:	f240 1301 	movw	r3, #257	@ 0x101
 800e964:	4617      	mov	r7, r2
 800e966:	8183      	strh	r3, [r0, #12]
 800e968:	460c      	mov	r4, r1
 800e96a:	46a8      	mov	r8, r5
 800e96c:	4621      	mov	r1, r4
 800e96e:	4630      	mov	r0, r6
 800e970:	3501      	adds	r5, #1
 800e972:	f008 fc3d 	bl	80171f0 <put_memory>
 800e976:	42af      	cmp	r7, r5
 800e978:	60a4      	str	r4, [r4, #8]
 800e97a:	f884 800c 	strb.w	r8, [r4, #12]
 800e97e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e982:	d1f3      	bne.n	800e96c <rmw_uxrce_init_client_memory+0x20>
 800e984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e988:	4770      	bx	lr
 800e98a:	bf00      	nop

0800e98c <rmw_uxrce_init_publisher_memory>:
 800e98c:	b1e2      	cbz	r2, 800e9c8 <rmw_uxrce_init_publisher_memory+0x3c>
 800e98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e992:	7b05      	ldrb	r5, [r0, #12]
 800e994:	4606      	mov	r6, r0
 800e996:	b9ad      	cbnz	r5, 800e9c4 <rmw_uxrce_init_publisher_memory+0x38>
 800e998:	23d8      	movs	r3, #216	@ 0xd8
 800e99a:	e9c0 5500 	strd	r5, r5, [r0]
 800e99e:	6083      	str	r3, [r0, #8]
 800e9a0:	f240 1301 	movw	r3, #257	@ 0x101
 800e9a4:	4617      	mov	r7, r2
 800e9a6:	8183      	strh	r3, [r0, #12]
 800e9a8:	460c      	mov	r4, r1
 800e9aa:	46a8      	mov	r8, r5
 800e9ac:	4621      	mov	r1, r4
 800e9ae:	4630      	mov	r0, r6
 800e9b0:	3501      	adds	r5, #1
 800e9b2:	f008 fc1d 	bl	80171f0 <put_memory>
 800e9b6:	42af      	cmp	r7, r5
 800e9b8:	60a4      	str	r4, [r4, #8]
 800e9ba:	f884 800c 	strb.w	r8, [r4, #12]
 800e9be:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e9c2:	d1f3      	bne.n	800e9ac <rmw_uxrce_init_publisher_memory+0x20>
 800e9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9c8:	4770      	bx	lr
 800e9ca:	bf00      	nop

0800e9cc <rmw_uxrce_init_subscription_memory>:
 800e9cc:	b1e2      	cbz	r2, 800ea08 <rmw_uxrce_init_subscription_memory+0x3c>
 800e9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d2:	7b05      	ldrb	r5, [r0, #12]
 800e9d4:	4606      	mov	r6, r0
 800e9d6:	b9ad      	cbnz	r5, 800ea04 <rmw_uxrce_init_subscription_memory+0x38>
 800e9d8:	23d8      	movs	r3, #216	@ 0xd8
 800e9da:	e9c0 5500 	strd	r5, r5, [r0]
 800e9de:	6083      	str	r3, [r0, #8]
 800e9e0:	f240 1301 	movw	r3, #257	@ 0x101
 800e9e4:	4617      	mov	r7, r2
 800e9e6:	8183      	strh	r3, [r0, #12]
 800e9e8:	460c      	mov	r4, r1
 800e9ea:	46a8      	mov	r8, r5
 800e9ec:	4621      	mov	r1, r4
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	3501      	adds	r5, #1
 800e9f2:	f008 fbfd 	bl	80171f0 <put_memory>
 800e9f6:	42af      	cmp	r7, r5
 800e9f8:	60a4      	str	r4, [r4, #8]
 800e9fa:	f884 800c 	strb.w	r8, [r4, #12]
 800e9fe:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ea02:	d1f3      	bne.n	800e9ec <rmw_uxrce_init_subscription_memory+0x20>
 800ea04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea08:	4770      	bx	lr
 800ea0a:	bf00      	nop

0800ea0c <rmw_uxrce_init_node_memory>:
 800ea0c:	b1e2      	cbz	r2, 800ea48 <rmw_uxrce_init_node_memory+0x3c>
 800ea0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea12:	7b05      	ldrb	r5, [r0, #12]
 800ea14:	4606      	mov	r6, r0
 800ea16:	b9ad      	cbnz	r5, 800ea44 <rmw_uxrce_init_node_memory+0x38>
 800ea18:	23a4      	movs	r3, #164	@ 0xa4
 800ea1a:	e9c0 5500 	strd	r5, r5, [r0]
 800ea1e:	6083      	str	r3, [r0, #8]
 800ea20:	f240 1301 	movw	r3, #257	@ 0x101
 800ea24:	4617      	mov	r7, r2
 800ea26:	8183      	strh	r3, [r0, #12]
 800ea28:	460c      	mov	r4, r1
 800ea2a:	46a8      	mov	r8, r5
 800ea2c:	4621      	mov	r1, r4
 800ea2e:	4630      	mov	r0, r6
 800ea30:	3501      	adds	r5, #1
 800ea32:	f008 fbdd 	bl	80171f0 <put_memory>
 800ea36:	42af      	cmp	r7, r5
 800ea38:	60a4      	str	r4, [r4, #8]
 800ea3a:	f884 800c 	strb.w	r8, [r4, #12]
 800ea3e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ea42:	d1f3      	bne.n	800ea2c <rmw_uxrce_init_node_memory+0x20>
 800ea44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea48:	4770      	bx	lr
 800ea4a:	bf00      	nop

0800ea4c <rmw_uxrce_init_session_memory>:
 800ea4c:	b1ea      	cbz	r2, 800ea8a <rmw_uxrce_init_session_memory+0x3e>
 800ea4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea52:	7b05      	ldrb	r5, [r0, #12]
 800ea54:	4606      	mov	r6, r0
 800ea56:	b9b5      	cbnz	r5, 800ea86 <rmw_uxrce_init_session_memory+0x3a>
 800ea58:	e9c0 5500 	strd	r5, r5, [r0]
 800ea5c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ea60:	f240 1301 	movw	r3, #257	@ 0x101
 800ea64:	4617      	mov	r7, r2
 800ea66:	f8c0 8008 	str.w	r8, [r0, #8]
 800ea6a:	460c      	mov	r4, r1
 800ea6c:	8183      	strh	r3, [r0, #12]
 800ea6e:	46a9      	mov	r9, r5
 800ea70:	4621      	mov	r1, r4
 800ea72:	4630      	mov	r0, r6
 800ea74:	3501      	adds	r5, #1
 800ea76:	f008 fbbb 	bl	80171f0 <put_memory>
 800ea7a:	42af      	cmp	r7, r5
 800ea7c:	60a4      	str	r4, [r4, #8]
 800ea7e:	f884 900c 	strb.w	r9, [r4, #12]
 800ea82:	4444      	add	r4, r8
 800ea84:	d1f4      	bne.n	800ea70 <rmw_uxrce_init_session_memory+0x24>
 800ea86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea8a:	4770      	bx	lr

0800ea8c <rmw_uxrce_init_topic_memory>:
 800ea8c:	b1e2      	cbz	r2, 800eac8 <rmw_uxrce_init_topic_memory+0x3c>
 800ea8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea92:	7b05      	ldrb	r5, [r0, #12]
 800ea94:	4606      	mov	r6, r0
 800ea96:	b9ad      	cbnz	r5, 800eac4 <rmw_uxrce_init_topic_memory+0x38>
 800ea98:	231c      	movs	r3, #28
 800ea9a:	e9c0 5500 	strd	r5, r5, [r0]
 800ea9e:	6083      	str	r3, [r0, #8]
 800eaa0:	f240 1301 	movw	r3, #257	@ 0x101
 800eaa4:	4617      	mov	r7, r2
 800eaa6:	8183      	strh	r3, [r0, #12]
 800eaa8:	460c      	mov	r4, r1
 800eaaa:	46a8      	mov	r8, r5
 800eaac:	4621      	mov	r1, r4
 800eaae:	4630      	mov	r0, r6
 800eab0:	3501      	adds	r5, #1
 800eab2:	f008 fb9d 	bl	80171f0 <put_memory>
 800eab6:	42af      	cmp	r7, r5
 800eab8:	60a4      	str	r4, [r4, #8]
 800eaba:	f884 800c 	strb.w	r8, [r4, #12]
 800eabe:	f104 041c 	add.w	r4, r4, #28
 800eac2:	d1f3      	bne.n	800eaac <rmw_uxrce_init_topic_memory+0x20>
 800eac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop

0800eacc <rmw_uxrce_init_static_input_buffer_memory>:
 800eacc:	b1ea      	cbz	r2, 800eb0a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800eace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ead2:	7b05      	ldrb	r5, [r0, #12]
 800ead4:	4606      	mov	r6, r0
 800ead6:	b9b5      	cbnz	r5, 800eb06 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ead8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800eadc:	e9c0 5500 	strd	r5, r5, [r0]
 800eae0:	6083      	str	r3, [r0, #8]
 800eae2:	f240 1301 	movw	r3, #257	@ 0x101
 800eae6:	4617      	mov	r7, r2
 800eae8:	8183      	strh	r3, [r0, #12]
 800eaea:	460c      	mov	r4, r1
 800eaec:	46a8      	mov	r8, r5
 800eaee:	4621      	mov	r1, r4
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	3501      	adds	r5, #1
 800eaf4:	f008 fb7c 	bl	80171f0 <put_memory>
 800eaf8:	42af      	cmp	r7, r5
 800eafa:	60a4      	str	r4, [r4, #8]
 800eafc:	f884 800c 	strb.w	r8, [r4, #12]
 800eb00:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800eb04:	d1f3      	bne.n	800eaee <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800eb06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb0a:	4770      	bx	lr

0800eb0c <rmw_uxrce_init_init_options_impl_memory>:
 800eb0c:	b1e2      	cbz	r2, 800eb48 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800eb0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb12:	7b05      	ldrb	r5, [r0, #12]
 800eb14:	4606      	mov	r6, r0
 800eb16:	b9ad      	cbnz	r5, 800eb44 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800eb18:	232c      	movs	r3, #44	@ 0x2c
 800eb1a:	e9c0 5500 	strd	r5, r5, [r0]
 800eb1e:	6083      	str	r3, [r0, #8]
 800eb20:	f240 1301 	movw	r3, #257	@ 0x101
 800eb24:	4617      	mov	r7, r2
 800eb26:	8183      	strh	r3, [r0, #12]
 800eb28:	460c      	mov	r4, r1
 800eb2a:	46a8      	mov	r8, r5
 800eb2c:	4621      	mov	r1, r4
 800eb2e:	4630      	mov	r0, r6
 800eb30:	3501      	adds	r5, #1
 800eb32:	f008 fb5d 	bl	80171f0 <put_memory>
 800eb36:	42af      	cmp	r7, r5
 800eb38:	60a4      	str	r4, [r4, #8]
 800eb3a:	f884 800c 	strb.w	r8, [r4, #12]
 800eb3e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800eb42:	d1f3      	bne.n	800eb2c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800eb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb48:	4770      	bx	lr
 800eb4a:	bf00      	nop

0800eb4c <rmw_uxrce_init_wait_set_memory>:
 800eb4c:	b1e2      	cbz	r2, 800eb88 <rmw_uxrce_init_wait_set_memory+0x3c>
 800eb4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb52:	7b05      	ldrb	r5, [r0, #12]
 800eb54:	4606      	mov	r6, r0
 800eb56:	b9ad      	cbnz	r5, 800eb84 <rmw_uxrce_init_wait_set_memory+0x38>
 800eb58:	231c      	movs	r3, #28
 800eb5a:	e9c0 5500 	strd	r5, r5, [r0]
 800eb5e:	6083      	str	r3, [r0, #8]
 800eb60:	f240 1301 	movw	r3, #257	@ 0x101
 800eb64:	4617      	mov	r7, r2
 800eb66:	8183      	strh	r3, [r0, #12]
 800eb68:	460c      	mov	r4, r1
 800eb6a:	46a8      	mov	r8, r5
 800eb6c:	4621      	mov	r1, r4
 800eb6e:	4630      	mov	r0, r6
 800eb70:	3501      	adds	r5, #1
 800eb72:	f008 fb3d 	bl	80171f0 <put_memory>
 800eb76:	42af      	cmp	r7, r5
 800eb78:	60a4      	str	r4, [r4, #8]
 800eb7a:	f884 800c 	strb.w	r8, [r4, #12]
 800eb7e:	f104 041c 	add.w	r4, r4, #28
 800eb82:	d1f3      	bne.n	800eb6c <rmw_uxrce_init_wait_set_memory+0x20>
 800eb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb88:	4770      	bx	lr
 800eb8a:	bf00      	nop

0800eb8c <rmw_uxrce_init_guard_condition_memory>:
 800eb8c:	b1e2      	cbz	r2, 800ebc8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800eb8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb92:	7b05      	ldrb	r5, [r0, #12]
 800eb94:	4606      	mov	r6, r0
 800eb96:	b9ad      	cbnz	r5, 800ebc4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800eb98:	2320      	movs	r3, #32
 800eb9a:	e9c0 5500 	strd	r5, r5, [r0]
 800eb9e:	6083      	str	r3, [r0, #8]
 800eba0:	f240 1301 	movw	r3, #257	@ 0x101
 800eba4:	4617      	mov	r7, r2
 800eba6:	8183      	strh	r3, [r0, #12]
 800eba8:	460c      	mov	r4, r1
 800ebaa:	46a8      	mov	r8, r5
 800ebac:	4621      	mov	r1, r4
 800ebae:	4630      	mov	r0, r6
 800ebb0:	3501      	adds	r5, #1
 800ebb2:	f008 fb1d 	bl	80171f0 <put_memory>
 800ebb6:	42af      	cmp	r7, r5
 800ebb8:	60a4      	str	r4, [r4, #8]
 800ebba:	f884 800c 	strb.w	r8, [r4, #12]
 800ebbe:	f104 0420 	add.w	r4, r4, #32
 800ebc2:	d1f3      	bne.n	800ebac <rmw_uxrce_init_guard_condition_memory+0x20>
 800ebc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebc8:	4770      	bx	lr
 800ebca:	bf00      	nop

0800ebcc <rmw_uxrce_fini_session_memory>:
 800ebcc:	4601      	mov	r1, r0
 800ebce:	4801      	ldr	r0, [pc, #4]	@ (800ebd4 <rmw_uxrce_fini_session_memory+0x8>)
 800ebd0:	f008 bb0e 	b.w	80171f0 <put_memory>
 800ebd4:	2000b84c 	.word	0x2000b84c

0800ebd8 <rmw_uxrce_fini_node_memory>:
 800ebd8:	b538      	push	{r3, r4, r5, lr}
 800ebda:	4604      	mov	r4, r0
 800ebdc:	6800      	ldr	r0, [r0, #0]
 800ebde:	b128      	cbz	r0, 800ebec <rmw_uxrce_fini_node_memory+0x14>
 800ebe0:	4b07      	ldr	r3, [pc, #28]	@ (800ec00 <rmw_uxrce_fini_node_memory+0x28>)
 800ebe2:	6819      	ldr	r1, [r3, #0]
 800ebe4:	f7f1 fb1c 	bl	8000220 <strcmp>
 800ebe8:	b940      	cbnz	r0, 800ebfc <rmw_uxrce_fini_node_memory+0x24>
 800ebea:	6020      	str	r0, [r4, #0]
 800ebec:	6861      	ldr	r1, [r4, #4]
 800ebee:	b129      	cbz	r1, 800ebfc <rmw_uxrce_fini_node_memory+0x24>
 800ebf0:	2500      	movs	r5, #0
 800ebf2:	4804      	ldr	r0, [pc, #16]	@ (800ec04 <rmw_uxrce_fini_node_memory+0x2c>)
 800ebf4:	610d      	str	r5, [r1, #16]
 800ebf6:	f008 fafb 	bl	80171f0 <put_memory>
 800ebfa:	6065      	str	r5, [r4, #4]
 800ebfc:	bd38      	pop	{r3, r4, r5, pc}
 800ebfe:	bf00      	nop
 800ec00:	0801c4b0 	.word	0x0801c4b0
 800ec04:	2000b81c 	.word	0x2000b81c

0800ec08 <rmw_uxrce_fini_publisher_memory>:
 800ec08:	b510      	push	{r4, lr}
 800ec0a:	4604      	mov	r4, r0
 800ec0c:	6800      	ldr	r0, [r0, #0]
 800ec0e:	b128      	cbz	r0, 800ec1c <rmw_uxrce_fini_publisher_memory+0x14>
 800ec10:	4b06      	ldr	r3, [pc, #24]	@ (800ec2c <rmw_uxrce_fini_publisher_memory+0x24>)
 800ec12:	6819      	ldr	r1, [r3, #0]
 800ec14:	f7f1 fb04 	bl	8000220 <strcmp>
 800ec18:	b938      	cbnz	r0, 800ec2a <rmw_uxrce_fini_publisher_memory+0x22>
 800ec1a:	6020      	str	r0, [r4, #0]
 800ec1c:	6861      	ldr	r1, [r4, #4]
 800ec1e:	b121      	cbz	r1, 800ec2a <rmw_uxrce_fini_publisher_memory+0x22>
 800ec20:	4803      	ldr	r0, [pc, #12]	@ (800ec30 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ec22:	f008 fae5 	bl	80171f0 <put_memory>
 800ec26:	2300      	movs	r3, #0
 800ec28:	6063      	str	r3, [r4, #4]
 800ec2a:	bd10      	pop	{r4, pc}
 800ec2c:	0801c4b0 	.word	0x0801c4b0
 800ec30:	2000b82c 	.word	0x2000b82c

0800ec34 <rmw_uxrce_fini_subscription_memory>:
 800ec34:	b510      	push	{r4, lr}
 800ec36:	4604      	mov	r4, r0
 800ec38:	6800      	ldr	r0, [r0, #0]
 800ec3a:	b128      	cbz	r0, 800ec48 <rmw_uxrce_fini_subscription_memory+0x14>
 800ec3c:	4b06      	ldr	r3, [pc, #24]	@ (800ec58 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ec3e:	6819      	ldr	r1, [r3, #0]
 800ec40:	f7f1 faee 	bl	8000220 <strcmp>
 800ec44:	b938      	cbnz	r0, 800ec56 <rmw_uxrce_fini_subscription_memory+0x22>
 800ec46:	6020      	str	r0, [r4, #0]
 800ec48:	6861      	ldr	r1, [r4, #4]
 800ec4a:	b121      	cbz	r1, 800ec56 <rmw_uxrce_fini_subscription_memory+0x22>
 800ec4c:	4803      	ldr	r0, [pc, #12]	@ (800ec5c <rmw_uxrce_fini_subscription_memory+0x28>)
 800ec4e:	f008 facf 	bl	80171f0 <put_memory>
 800ec52:	2300      	movs	r3, #0
 800ec54:	6063      	str	r3, [r4, #4]
 800ec56:	bd10      	pop	{r4, pc}
 800ec58:	0801c4b0 	.word	0x0801c4b0
 800ec5c:	2000b86c 	.word	0x2000b86c

0800ec60 <rmw_uxrce_fini_service_memory>:
 800ec60:	b510      	push	{r4, lr}
 800ec62:	4604      	mov	r4, r0
 800ec64:	6800      	ldr	r0, [r0, #0]
 800ec66:	b128      	cbz	r0, 800ec74 <rmw_uxrce_fini_service_memory+0x14>
 800ec68:	4b06      	ldr	r3, [pc, #24]	@ (800ec84 <rmw_uxrce_fini_service_memory+0x24>)
 800ec6a:	6819      	ldr	r1, [r3, #0]
 800ec6c:	f7f1 fad8 	bl	8000220 <strcmp>
 800ec70:	b938      	cbnz	r0, 800ec82 <rmw_uxrce_fini_service_memory+0x22>
 800ec72:	6020      	str	r0, [r4, #0]
 800ec74:	6861      	ldr	r1, [r4, #4]
 800ec76:	b121      	cbz	r1, 800ec82 <rmw_uxrce_fini_service_memory+0x22>
 800ec78:	4803      	ldr	r0, [pc, #12]	@ (800ec88 <rmw_uxrce_fini_service_memory+0x28>)
 800ec7a:	f008 fab9 	bl	80171f0 <put_memory>
 800ec7e:	2300      	movs	r3, #0
 800ec80:	6063      	str	r3, [r4, #4]
 800ec82:	bd10      	pop	{r4, pc}
 800ec84:	0801c4b0 	.word	0x0801c4b0
 800ec88:	2000b83c 	.word	0x2000b83c

0800ec8c <rmw_uxrce_fini_client_memory>:
 800ec8c:	b510      	push	{r4, lr}
 800ec8e:	4604      	mov	r4, r0
 800ec90:	6800      	ldr	r0, [r0, #0]
 800ec92:	b128      	cbz	r0, 800eca0 <rmw_uxrce_fini_client_memory+0x14>
 800ec94:	4b06      	ldr	r3, [pc, #24]	@ (800ecb0 <rmw_uxrce_fini_client_memory+0x24>)
 800ec96:	6819      	ldr	r1, [r3, #0]
 800ec98:	f7f1 fac2 	bl	8000220 <strcmp>
 800ec9c:	b938      	cbnz	r0, 800ecae <rmw_uxrce_fini_client_memory+0x22>
 800ec9e:	6020      	str	r0, [r4, #0]
 800eca0:	6861      	ldr	r1, [r4, #4]
 800eca2:	b121      	cbz	r1, 800ecae <rmw_uxrce_fini_client_memory+0x22>
 800eca4:	4803      	ldr	r0, [pc, #12]	@ (800ecb4 <rmw_uxrce_fini_client_memory+0x28>)
 800eca6:	f008 faa3 	bl	80171f0 <put_memory>
 800ecaa:	2300      	movs	r3, #0
 800ecac:	6063      	str	r3, [r4, #4]
 800ecae:	bd10      	pop	{r4, pc}
 800ecb0:	0801c4b0 	.word	0x0801c4b0
 800ecb4:	20006e84 	.word	0x20006e84

0800ecb8 <rmw_uxrce_fini_topic_memory>:
 800ecb8:	b510      	push	{r4, lr}
 800ecba:	4604      	mov	r4, r0
 800ecbc:	4621      	mov	r1, r4
 800ecbe:	4803      	ldr	r0, [pc, #12]	@ (800eccc <rmw_uxrce_fini_topic_memory+0x14>)
 800ecc0:	f008 fa96 	bl	80171f0 <put_memory>
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	61a3      	str	r3, [r4, #24]
 800ecc8:	bd10      	pop	{r4, pc}
 800ecca:	bf00      	nop
 800eccc:	2000b87c 	.word	0x2000b87c

0800ecd0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ecd0:	b082      	sub	sp, #8
 800ecd2:	b530      	push	{r4, r5, lr}
 800ecd4:	4925      	ldr	r1, [pc, #148]	@ (800ed6c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ecd6:	680d      	ldr	r5, [r1, #0]
 800ecd8:	ac03      	add	r4, sp, #12
 800ecda:	e884 000c 	stmia.w	r4, {r2, r3}
 800ecde:	461c      	mov	r4, r3
 800ece0:	2d00      	cmp	r5, #0
 800ece2:	d041      	beq.n	800ed68 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800ece4:	462b      	mov	r3, r5
 800ece6:	2100      	movs	r1, #0
 800ece8:	689a      	ldr	r2, [r3, #8]
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800ecf0:	4290      	cmp	r0, r2
 800ecf2:	bf08      	it	eq
 800ecf4:	3101      	addeq	r1, #1
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d1f6      	bne.n	800ece8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ecfa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ecfe:	2b02      	cmp	r3, #2
 800ed00:	d029      	beq.n	800ed56 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ed02:	d907      	bls.n	800ed14 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ed04:	2b03      	cmp	r3, #3
 800ed06:	d005      	beq.n	800ed14 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ed08:	2100      	movs	r1, #0
 800ed0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed0e:	4608      	mov	r0, r1
 800ed10:	b002      	add	sp, #8
 800ed12:	4770      	bx	lr
 800ed14:	b314      	cbz	r4, 800ed5c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ed16:	428c      	cmp	r4, r1
 800ed18:	d820      	bhi.n	800ed5c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ed1a:	2d00      	cmp	r5, #0
 800ed1c:	d0f4      	beq.n	800ed08 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ed1e:	2100      	movs	r1, #0
 800ed20:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800ed24:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800ed28:	e002      	b.n	800ed30 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800ed2a:	686d      	ldr	r5, [r5, #4]
 800ed2c:	2d00      	cmp	r5, #0
 800ed2e:	d0ec      	beq.n	800ed0a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ed30:	68ab      	ldr	r3, [r5, #8]
 800ed32:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800ed36:	4290      	cmp	r0, r2
 800ed38:	d1f7      	bne.n	800ed2a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ed3a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800ed3e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800ed42:	4562      	cmp	r2, ip
 800ed44:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ed48:	eb73 0e04 	sbcs.w	lr, r3, r4
 800ed4c:	daed      	bge.n	800ed2a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ed4e:	4694      	mov	ip, r2
 800ed50:	461c      	mov	r4, r3
 800ed52:	4629      	mov	r1, r5
 800ed54:	e7e9      	b.n	800ed2a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ed56:	b10c      	cbz	r4, 800ed5c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ed58:	428c      	cmp	r4, r1
 800ed5a:	d9d5      	bls.n	800ed08 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ed5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed60:	4802      	ldr	r0, [pc, #8]	@ (800ed6c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ed62:	b002      	add	sp, #8
 800ed64:	f008 ba34 	b.w	80171d0 <get_memory>
 800ed68:	4629      	mov	r1, r5
 800ed6a:	e7c6      	b.n	800ecfa <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800ed6c:	2000b85c 	.word	0x2000b85c

0800ed70 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800ed70:	4b11      	ldr	r3, [pc, #68]	@ (800edb8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	b530      	push	{r4, r5, lr}
 800ed76:	b1e3      	cbz	r3, 800edb2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800ed78:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800ed7c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800ed80:	2400      	movs	r4, #0
 800ed82:	e001      	b.n	800ed88 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ed84:	685b      	ldr	r3, [r3, #4]
 800ed86:	b193      	cbz	r3, 800edae <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800ed88:	689a      	ldr	r2, [r3, #8]
 800ed8a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800ed8e:	4288      	cmp	r0, r1
 800ed90:	d1f8      	bne.n	800ed84 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ed92:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800ed96:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800ed9a:	4571      	cmp	r1, lr
 800ed9c:	eb72 050c 	sbcs.w	r5, r2, ip
 800eda0:	daf0      	bge.n	800ed84 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800eda2:	461c      	mov	r4, r3
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	468e      	mov	lr, r1
 800eda8:	4694      	mov	ip, r2
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d1ec      	bne.n	800ed88 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800edae:	4620      	mov	r0, r4
 800edb0:	bd30      	pop	{r4, r5, pc}
 800edb2:	461c      	mov	r4, r3
 800edb4:	4620      	mov	r0, r4
 800edb6:	bd30      	pop	{r4, r5, pc}
 800edb8:	2000b85c 	.word	0x2000b85c
 800edbc:	00000000 	.word	0x00000000

0800edc0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800edc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edc4:	4b3c      	ldr	r3, [pc, #240]	@ (800eeb8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800edc6:	ed2d 8b06 	vpush	{d8-d10}
 800edca:	681f      	ldr	r7, [r3, #0]
 800edcc:	b08d      	sub	sp, #52	@ 0x34
 800edce:	f7ff fd7d 	bl	800e8cc <rmw_uros_epoch_nanos>
 800edd2:	2f00      	cmp	r7, #0
 800edd4:	d05d      	beq.n	800ee92 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800edd6:	46b8      	mov	r8, r7
 800edd8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800eea0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800eddc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ede0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ede4:	2b04      	cmp	r3, #4
 800ede6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800eea8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800edea:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800eeb0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800edee:	4681      	mov	r9, r0
 800edf0:	468a      	mov	sl, r1
 800edf2:	ac04      	add	r4, sp, #16
 800edf4:	d03f      	beq.n	800ee76 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800edf6:	2b05      	cmp	r3, #5
 800edf8:	d044      	beq.n	800ee84 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800edfa:	2b03      	cmp	r3, #3
 800edfc:	d03b      	beq.n	800ee76 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800edfe:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ee02:	ed8d ab06 	vstr	d10, [sp, #24]
 800ee06:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ee0a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800ee0e:	ab08      	add	r3, sp, #32
 800ee10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ee12:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ee16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ee1a:	f007 ff25 	bl	8016c68 <rmw_time_equal>
 800ee1e:	b118      	cbz	r0, 800ee28 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ee20:	ed8d 9b04 	vstr	d9, [sp, #16]
 800ee24:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ee28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ee2c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800ee30:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800ee34:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800ee38:	f007 ff6a 	bl	8016d10 <rmw_time_total_nsec>
 800ee3c:	1830      	adds	r0, r6, r0
 800ee3e:	eb47 0101 	adc.w	r1, r7, r1
 800ee42:	4548      	cmp	r0, r9
 800ee44:	eb71 030a 	sbcs.w	r3, r1, sl
 800ee48:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800ee4c:	db05      	blt.n	800ee5a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800ee4e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800ee52:	4591      	cmp	r9, r2
 800ee54:	eb7a 0303 	sbcs.w	r3, sl, r3
 800ee58:	da03      	bge.n	800ee62 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800ee5a:	4817      	ldr	r0, [pc, #92]	@ (800eeb8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ee5c:	4641      	mov	r1, r8
 800ee5e:	f008 f9c7 	bl	80171f0 <put_memory>
 800ee62:	f1bb 0f00 	cmp.w	fp, #0
 800ee66:	d014      	beq.n	800ee92 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ee68:	46d8      	mov	r8, fp
 800ee6a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ee6e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ee72:	2b04      	cmp	r3, #4
 800ee74:	d1bf      	bne.n	800edf6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800ee76:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800ee7a:	3340      	adds	r3, #64	@ 0x40
 800ee7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ee7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ee82:	e7c0      	b.n	800ee06 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800ee84:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800ee88:	3348      	adds	r3, #72	@ 0x48
 800ee8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ee8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ee90:	e7b9      	b.n	800ee06 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800ee92:	b00d      	add	sp, #52	@ 0x34
 800ee94:	ecbd 8b06 	vpop	{d8-d10}
 800ee98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee9c:	f3af 8000 	nop.w
	...
 800eea8:	00000001 	.word	0x00000001
 800eeac:	00000000 	.word	0x00000000
 800eeb0:	0000001e 	.word	0x0000001e
 800eeb4:	00000000 	.word	0x00000000
 800eeb8:	2000b85c 	.word	0x2000b85c

0800eebc <run_xrce_session>:
 800eebc:	b510      	push	{r4, lr}
 800eebe:	788c      	ldrb	r4, [r1, #2]
 800eec0:	b086      	sub	sp, #24
 800eec2:	2c01      	cmp	r4, #1
 800eec4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800eec8:	d00c      	beq.n	800eee4 <run_xrce_session+0x28>
 800eeca:	4619      	mov	r1, r3
 800eecc:	2301      	movs	r3, #1
 800eece:	9300      	str	r3, [sp, #0]
 800eed0:	f10d 020e 	add.w	r2, sp, #14
 800eed4:	f10d 0317 	add.w	r3, sp, #23
 800eed8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eedc:	f002 f968 	bl	80111b0 <uxr_run_session_until_all_status>
 800eee0:	b006      	add	sp, #24
 800eee2:	bd10      	pop	{r4, pc}
 800eee4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eee8:	f001 fd7c 	bl	80109e4 <uxr_flash_output_streams>
 800eeec:	4620      	mov	r0, r4
 800eeee:	b006      	add	sp, #24
 800eef0:	bd10      	pop	{r4, pc}
 800eef2:	bf00      	nop

0800eef4 <convert_qos_profile>:
 800eef4:	7a4a      	ldrb	r2, [r1, #9]
 800eef6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800eefa:	2a02      	cmp	r2, #2
 800eefc:	bf18      	it	ne
 800eefe:	2200      	movne	r2, #0
 800ef00:	7002      	strb	r2, [r0, #0]
 800ef02:	780a      	ldrb	r2, [r1, #0]
 800ef04:	8889      	ldrh	r1, [r1, #4]
 800ef06:	8081      	strh	r1, [r0, #4]
 800ef08:	f1ac 0c02 	sub.w	ip, ip, #2
 800ef0c:	f1a2 0202 	sub.w	r2, r2, #2
 800ef10:	fabc fc8c 	clz	ip, ip
 800ef14:	fab2 f282 	clz	r2, r2
 800ef18:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ef1c:	0952      	lsrs	r2, r2, #5
 800ef1e:	f880 c001 	strb.w	ip, [r0, #1]
 800ef22:	7082      	strb	r2, [r0, #2]
 800ef24:	4770      	bx	lr
 800ef26:	bf00      	nop

0800ef28 <generate_service_topics>:
 800ef28:	b570      	push	{r4, r5, r6, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	461c      	mov	r4, r3
 800ef2e:	4b12      	ldr	r3, [pc, #72]	@ (800ef78 <generate_service_topics+0x50>)
 800ef30:	9301      	str	r3, [sp, #4]
 800ef32:	4605      	mov	r5, r0
 800ef34:	4b11      	ldr	r3, [pc, #68]	@ (800ef7c <generate_service_topics+0x54>)
 800ef36:	9000      	str	r0, [sp, #0]
 800ef38:	4616      	mov	r6, r2
 800ef3a:	4608      	mov	r0, r1
 800ef3c:	4a10      	ldr	r2, [pc, #64]	@ (800ef80 <generate_service_topics+0x58>)
 800ef3e:	4621      	mov	r1, r4
 800ef40:	f00a fb42 	bl	80195c8 <sniprintf>
 800ef44:	4b0f      	ldr	r3, [pc, #60]	@ (800ef84 <generate_service_topics+0x5c>)
 800ef46:	9301      	str	r3, [sp, #4]
 800ef48:	4601      	mov	r1, r0
 800ef4a:	9500      	str	r5, [sp, #0]
 800ef4c:	4b0e      	ldr	r3, [pc, #56]	@ (800ef88 <generate_service_topics+0x60>)
 800ef4e:	4a0c      	ldr	r2, [pc, #48]	@ (800ef80 <generate_service_topics+0x58>)
 800ef50:	460d      	mov	r5, r1
 800ef52:	4630      	mov	r0, r6
 800ef54:	4621      	mov	r1, r4
 800ef56:	f00a fb37 	bl	80195c8 <sniprintf>
 800ef5a:	2d00      	cmp	r5, #0
 800ef5c:	db01      	blt.n	800ef62 <generate_service_topics+0x3a>
 800ef5e:	42ac      	cmp	r4, r5
 800ef60:	dc02      	bgt.n	800ef68 <generate_service_topics+0x40>
 800ef62:	2000      	movs	r0, #0
 800ef64:	b002      	add	sp, #8
 800ef66:	bd70      	pop	{r4, r5, r6, pc}
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	dbfa      	blt.n	800ef62 <generate_service_topics+0x3a>
 800ef6c:	4284      	cmp	r4, r0
 800ef6e:	bfd4      	ite	le
 800ef70:	2000      	movle	r0, #0
 800ef72:	2001      	movgt	r0, #1
 800ef74:	b002      	add	sp, #8
 800ef76:	bd70      	pop	{r4, r5, r6, pc}
 800ef78:	0801b70c 	.word	0x0801b70c
 800ef7c:	0801b708 	.word	0x0801b708
 800ef80:	0801b6e4 	.word	0x0801b6e4
 800ef84:	0801b700 	.word	0x0801b700
 800ef88:	0801b6fc 	.word	0x0801b6fc

0800ef8c <generate_service_types>:
 800ef8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef90:	4605      	mov	r5, r0
 800ef92:	b086      	sub	sp, #24
 800ef94:	6880      	ldr	r0, [r0, #8]
 800ef96:	460c      	mov	r4, r1
 800ef98:	4617      	mov	r7, r2
 800ef9a:	461e      	mov	r6, r3
 800ef9c:	4780      	blx	r0
 800ef9e:	68eb      	ldr	r3, [r5, #12]
 800efa0:	4680      	mov	r8, r0
 800efa2:	4798      	blx	r3
 800efa4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800efa8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800efac:	2300      	movs	r3, #0
 800efae:	7023      	strb	r3, [r4, #0]
 800efb0:	6813      	ldr	r3, [r2, #0]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d042      	beq.n	800f03c <generate_service_types+0xb0>
 800efb6:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800f050 <generate_service_types+0xc4>
 800efba:	4641      	mov	r1, r8
 800efbc:	4620      	mov	r0, r4
 800efbe:	4c22      	ldr	r4, [pc, #136]	@ (800f048 <generate_service_types+0xbc>)
 800efc0:	9405      	str	r4, [sp, #20]
 800efc2:	6852      	ldr	r2, [r2, #4]
 800efc4:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800f058 <generate_service_types+0xcc>
 800efc8:	9204      	str	r2, [sp, #16]
 800efca:	9100      	str	r1, [sp, #0]
 800efcc:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800efd0:	4a1e      	ldr	r2, [pc, #120]	@ (800f04c <generate_service_types+0xc0>)
 800efd2:	f8cd a004 	str.w	sl, [sp, #4]
 800efd6:	4631      	mov	r1, r6
 800efd8:	f00a faf6 	bl	80195c8 <sniprintf>
 800efdc:	2800      	cmp	r0, #0
 800efde:	db1f      	blt.n	800f020 <generate_service_types+0x94>
 800efe0:	2300      	movs	r3, #0
 800efe2:	703b      	strb	r3, [r7, #0]
 800efe4:	f8d9 3000 	ldr.w	r3, [r9]
 800efe8:	42b0      	cmp	r0, r6
 800efea:	bfac      	ite	ge
 800efec:	2500      	movge	r5, #0
 800efee:	2501      	movlt	r5, #1
 800eff0:	b1eb      	cbz	r3, 800f02e <generate_service_types+0xa2>
 800eff2:	4a17      	ldr	r2, [pc, #92]	@ (800f050 <generate_service_types+0xc4>)
 800eff4:	9405      	str	r4, [sp, #20]
 800eff6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800effa:	9200      	str	r2, [sp, #0]
 800effc:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800f000:	e9cd a401 	strd	sl, r4, [sp, #4]
 800f004:	4a11      	ldr	r2, [pc, #68]	@ (800f04c <generate_service_types+0xc0>)
 800f006:	4638      	mov	r0, r7
 800f008:	4631      	mov	r1, r6
 800f00a:	f00a fadd 	bl	80195c8 <sniprintf>
 800f00e:	2800      	cmp	r0, #0
 800f010:	db10      	blt.n	800f034 <generate_service_types+0xa8>
 800f012:	42b0      	cmp	r0, r6
 800f014:	bfb4      	ite	lt
 800f016:	4628      	movlt	r0, r5
 800f018:	2000      	movge	r0, #0
 800f01a:	b006      	add	sp, #24
 800f01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f020:	2300      	movs	r3, #0
 800f022:	703b      	strb	r3, [r7, #0]
 800f024:	f8d9 3000 	ldr.w	r3, [r9]
 800f028:	2500      	movs	r5, #0
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d1e1      	bne.n	800eff2 <generate_service_types+0x66>
 800f02e:	4b09      	ldr	r3, [pc, #36]	@ (800f054 <generate_service_types+0xc8>)
 800f030:	461a      	mov	r2, r3
 800f032:	e7df      	b.n	800eff4 <generate_service_types+0x68>
 800f034:	2000      	movs	r0, #0
 800f036:	b006      	add	sp, #24
 800f038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f03c:	4b05      	ldr	r3, [pc, #20]	@ (800f054 <generate_service_types+0xc8>)
 800f03e:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 800f050 <generate_service_types+0xc4>
 800f042:	4619      	mov	r1, r3
 800f044:	e7ba      	b.n	800efbc <generate_service_types+0x30>
 800f046:	bf00      	nop
 800f048:	0801b6ec 	.word	0x0801b6ec
 800f04c:	0801b6dc 	.word	0x0801b6dc
 800f050:	0801b6d8 	.word	0x0801b6d8
 800f054:	0801c53c 	.word	0x0801c53c
 800f058:	0801b6f0 	.word	0x0801b6f0

0800f05c <generate_type_name>:
 800f05c:	b530      	push	{r4, r5, lr}
 800f05e:	2300      	movs	r3, #0
 800f060:	700b      	strb	r3, [r1, #0]
 800f062:	6803      	ldr	r3, [r0, #0]
 800f064:	b087      	sub	sp, #28
 800f066:	4614      	mov	r4, r2
 800f068:	b1d3      	cbz	r3, 800f0a0 <generate_type_name+0x44>
 800f06a:	4a0f      	ldr	r2, [pc, #60]	@ (800f0a8 <generate_type_name+0x4c>)
 800f06c:	4615      	mov	r5, r2
 800f06e:	9203      	str	r2, [sp, #12]
 800f070:	9500      	str	r5, [sp, #0]
 800f072:	6842      	ldr	r2, [r0, #4]
 800f074:	480d      	ldr	r0, [pc, #52]	@ (800f0ac <generate_type_name+0x50>)
 800f076:	9001      	str	r0, [sp, #4]
 800f078:	4608      	mov	r0, r1
 800f07a:	490d      	ldr	r1, [pc, #52]	@ (800f0b0 <generate_type_name+0x54>)
 800f07c:	9204      	str	r2, [sp, #16]
 800f07e:	9105      	str	r1, [sp, #20]
 800f080:	9102      	str	r1, [sp, #8]
 800f082:	4a0c      	ldr	r2, [pc, #48]	@ (800f0b4 <generate_type_name+0x58>)
 800f084:	4621      	mov	r1, r4
 800f086:	f00a fa9f 	bl	80195c8 <sniprintf>
 800f08a:	2800      	cmp	r0, #0
 800f08c:	db05      	blt.n	800f09a <generate_type_name+0x3e>
 800f08e:	4284      	cmp	r4, r0
 800f090:	bfd4      	ite	le
 800f092:	2000      	movle	r0, #0
 800f094:	2001      	movgt	r0, #1
 800f096:	b007      	add	sp, #28
 800f098:	bd30      	pop	{r4, r5, pc}
 800f09a:	2000      	movs	r0, #0
 800f09c:	b007      	add	sp, #28
 800f09e:	bd30      	pop	{r4, r5, pc}
 800f0a0:	4b05      	ldr	r3, [pc, #20]	@ (800f0b8 <generate_type_name+0x5c>)
 800f0a2:	4a01      	ldr	r2, [pc, #4]	@ (800f0a8 <generate_type_name+0x4c>)
 800f0a4:	461d      	mov	r5, r3
 800f0a6:	e7e2      	b.n	800f06e <generate_type_name+0x12>
 800f0a8:	0801b6d8 	.word	0x0801b6d8
 800f0ac:	0801b6f0 	.word	0x0801b6f0
 800f0b0:	0801b6ec 	.word	0x0801b6ec
 800f0b4:	0801b6dc 	.word	0x0801b6dc
 800f0b8:	0801c53c 	.word	0x0801c53c

0800f0bc <generate_topic_name>:
 800f0bc:	b510      	push	{r4, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	4614      	mov	r4, r2
 800f0c2:	9000      	str	r0, [sp, #0]
 800f0c4:	4b08      	ldr	r3, [pc, #32]	@ (800f0e8 <generate_topic_name+0x2c>)
 800f0c6:	4a09      	ldr	r2, [pc, #36]	@ (800f0ec <generate_topic_name+0x30>)
 800f0c8:	4608      	mov	r0, r1
 800f0ca:	4621      	mov	r1, r4
 800f0cc:	f00a fa7c 	bl	80195c8 <sniprintf>
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	db05      	blt.n	800f0e0 <generate_topic_name+0x24>
 800f0d4:	4284      	cmp	r4, r0
 800f0d6:	bfd4      	ite	le
 800f0d8:	2000      	movle	r0, #0
 800f0da:	2001      	movgt	r0, #1
 800f0dc:	b002      	add	sp, #8
 800f0de:	bd10      	pop	{r4, pc}
 800f0e0:	2000      	movs	r0, #0
 800f0e2:	b002      	add	sp, #8
 800f0e4:	bd10      	pop	{r4, pc}
 800f0e6:	bf00      	nop
 800f0e8:	0801b714 	.word	0x0801b714
 800f0ec:	0801b6f4 	.word	0x0801b6f4

0800f0f0 <is_uxrce_rmw_identifier_valid>:
 800f0f0:	b510      	push	{r4, lr}
 800f0f2:	4604      	mov	r4, r0
 800f0f4:	b140      	cbz	r0, 800f108 <is_uxrce_rmw_identifier_valid+0x18>
 800f0f6:	f008 f8d3 	bl	80172a0 <rmw_get_implementation_identifier>
 800f0fa:	4601      	mov	r1, r0
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	f7f1 f88f 	bl	8000220 <strcmp>
 800f102:	fab0 f080 	clz	r0, r0
 800f106:	0940      	lsrs	r0, r0, #5
 800f108:	bd10      	pop	{r4, pc}
 800f10a:	bf00      	nop

0800f10c <get_message_typesupport_handle>:
 800f10c:	6883      	ldr	r3, [r0, #8]
 800f10e:	4718      	bx	r3

0800f110 <get_message_typesupport_handle_function>:
 800f110:	b510      	push	{r4, lr}
 800f112:	4604      	mov	r4, r0
 800f114:	6800      	ldr	r0, [r0, #0]
 800f116:	f7f1 f883 	bl	8000220 <strcmp>
 800f11a:	2800      	cmp	r0, #0
 800f11c:	bf0c      	ite	eq
 800f11e:	4620      	moveq	r0, r4
 800f120:	2000      	movne	r0, #0
 800f122:	bd10      	pop	{r4, pc}

0800f124 <get_service_typesupport_handle>:
 800f124:	6883      	ldr	r3, [r0, #8]
 800f126:	4718      	bx	r3

0800f128 <get_service_typesupport_handle_function>:
 800f128:	b510      	push	{r4, lr}
 800f12a:	4604      	mov	r4, r0
 800f12c:	6800      	ldr	r0, [r0, #0]
 800f12e:	f7f1 f877 	bl	8000220 <strcmp>
 800f132:	2800      	cmp	r0, #0
 800f134:	bf0c      	ite	eq
 800f136:	4620      	moveq	r0, r4
 800f138:	2000      	movne	r0, #0
 800f13a:	bd10      	pop	{r4, pc}

0800f13c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800f13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f140:	6805      	ldr	r5, [r0, #0]
 800f142:	4604      	mov	r4, r0
 800f144:	4628      	mov	r0, r5
 800f146:	460e      	mov	r6, r1
 800f148:	f7f1 f86a 	bl	8000220 <strcmp>
 800f14c:	b1c8      	cbz	r0, 800f182 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800f14e:	4b11      	ldr	r3, [pc, #68]	@ (800f194 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	429d      	cmp	r5, r3
 800f154:	d112      	bne.n	800f17c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f156:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f15a:	f8d8 4000 	ldr.w	r4, [r8]
 800f15e:	b16c      	cbz	r4, 800f17c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f160:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f164:	2700      	movs	r7, #0
 800f166:	3d04      	subs	r5, #4
 800f168:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f16c:	4631      	mov	r1, r6
 800f16e:	f7f1 f857 	bl	8000220 <strcmp>
 800f172:	00bb      	lsls	r3, r7, #2
 800f174:	b140      	cbz	r0, 800f188 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800f176:	3701      	adds	r7, #1
 800f178:	42bc      	cmp	r4, r7
 800f17a:	d1f5      	bne.n	800f168 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800f17c:	2000      	movs	r0, #0
 800f17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f182:	4620      	mov	r0, r4
 800f184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f188:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f18c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f190:	58d3      	ldr	r3, [r2, r3]
 800f192:	4718      	bx	r3
 800f194:	200003b4 	.word	0x200003b4

0800f198 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800f198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f19c:	6805      	ldr	r5, [r0, #0]
 800f19e:	4604      	mov	r4, r0
 800f1a0:	4628      	mov	r0, r5
 800f1a2:	460e      	mov	r6, r1
 800f1a4:	f7f1 f83c 	bl	8000220 <strcmp>
 800f1a8:	b1c8      	cbz	r0, 800f1de <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800f1aa:	4b11      	ldr	r3, [pc, #68]	@ (800f1f0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	429d      	cmp	r5, r3
 800f1b0:	d112      	bne.n	800f1d8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f1b2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f1b6:	f8d8 4000 	ldr.w	r4, [r8]
 800f1ba:	b16c      	cbz	r4, 800f1d8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f1bc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f1c0:	2700      	movs	r7, #0
 800f1c2:	3d04      	subs	r5, #4
 800f1c4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f1c8:	4631      	mov	r1, r6
 800f1ca:	f7f1 f829 	bl	8000220 <strcmp>
 800f1ce:	00bb      	lsls	r3, r7, #2
 800f1d0:	b140      	cbz	r0, 800f1e4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800f1d2:	3701      	adds	r7, #1
 800f1d4:	42bc      	cmp	r4, r7
 800f1d6:	d1f5      	bne.n	800f1c4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800f1d8:	2000      	movs	r0, #0
 800f1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1de:	4620      	mov	r0, r4
 800f1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1e4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f1e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ec:	58d3      	ldr	r3, [r2, r3]
 800f1ee:	4718      	bx	r3
 800f1f0:	200003b4 	.word	0x200003b4

0800f1f4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f1f4:	4b04      	ldr	r3, [pc, #16]	@ (800f208 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800f1f6:	681a      	ldr	r2, [r3, #0]
 800f1f8:	b10a      	cbz	r2, 800f1fe <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800f1fa:	4803      	ldr	r0, [pc, #12]	@ (800f208 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800f1fc:	4770      	bx	lr
 800f1fe:	4a03      	ldr	r2, [pc, #12]	@ (800f20c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800f200:	4801      	ldr	r0, [pc, #4]	@ (800f208 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800f202:	6812      	ldr	r2, [r2, #0]
 800f204:	601a      	str	r2, [r3, #0]
 800f206:	4770      	bx	lr
 800f208:	200003c4 	.word	0x200003c4
 800f20c:	200003b4 	.word	0x200003b4

0800f210 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f210:	4a02      	ldr	r2, [pc, #8]	@ (800f21c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800f212:	4b03      	ldr	r3, [pc, #12]	@ (800f220 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800f214:	6812      	ldr	r2, [r2, #0]
 800f216:	601a      	str	r2, [r3, #0]
 800f218:	4770      	bx	lr
 800f21a:	bf00      	nop
 800f21c:	200003b4 	.word	0x200003b4
 800f220:	200003c4 	.word	0x200003c4

0800f224 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800f224:	2009      	movs	r0, #9
 800f226:	4770      	bx	lr

0800f228 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800f228:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f22c:	4770      	bx	lr
 800f22e:	bf00      	nop

0800f230 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800f230:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f234:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f238:	e9c2 0100 	strd	r0, r1, [r2]
 800f23c:	4770      	bx	lr
 800f23e:	bf00      	nop

0800f240 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800f240:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f244:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f248:	e9c1 2300 	strd	r2, r3, [r1]
 800f24c:	4770      	bx	lr
 800f24e:	bf00      	nop

0800f250 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800f250:	f008 bbda 	b.w	8017a08 <sensor_msgs__msg__Imu__init>

0800f254 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800f254:	f008 bc2e 	b.w	8017ab4 <sensor_msgs__msg__Imu__fini>

0800f258 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800f258:	2009      	movs	r0, #9
 800f25a:	4770      	bx	lr

0800f25c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800f25c:	2009      	movs	r0, #9
 800f25e:	4770      	bx	lr

0800f260 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800f260:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f264:	4770      	bx	lr
 800f266:	bf00      	nop

0800f268 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800f268:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f26c:	4770      	bx	lr
 800f26e:	bf00      	nop

0800f270 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800f270:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f274:	4770      	bx	lr
 800f276:	bf00      	nop

0800f278 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800f278:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f27c:	4770      	bx	lr
 800f27e:	bf00      	nop

0800f280 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800f280:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop

0800f288 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800f288:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f28c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f290:	e9c2 0100 	strd	r0, r1, [r2]
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop

0800f298 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800f298:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f29c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f2a0:	e9c1 2300 	strd	r2, r3, [r1]
 800f2a4:	4770      	bx	lr
 800f2a6:	bf00      	nop

0800f2a8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800f2a8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f2ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2b0:	e9c2 0100 	strd	r0, r1, [r2]
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop

0800f2b8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800f2b8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f2bc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f2c0:	e9c1 2300 	strd	r2, r3, [r1]
 800f2c4:	4770      	bx	lr
 800f2c6:	bf00      	nop

0800f2c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f2c8:	b510      	push	{r4, lr}
 800f2ca:	f000 f90f 	bl	800f4ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f2ce:	4c0b      	ldr	r4, [pc, #44]	@ (800f2fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800f2d0:	60e0      	str	r0, [r4, #12]
 800f2d2:	f000 fb91 	bl	800f9f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800f2d6:	64a0      	str	r0, [r4, #72]	@ 0x48
 800f2d8:	f7fb fbe6 	bl	800aaa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f2dc:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800f2e0:	f7fb fbe2 	bl	800aaa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f2e4:	4b06      	ldr	r3, [pc, #24]	@ (800f300 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800f2e6:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800f2ea:	681a      	ldr	r2, [r3, #0]
 800f2ec:	b10a      	cbz	r2, 800f2f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800f2ee:	4804      	ldr	r0, [pc, #16]	@ (800f300 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800f2f0:	bd10      	pop	{r4, pc}
 800f2f2:	4a04      	ldr	r2, [pc, #16]	@ (800f304 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800f2f4:	4802      	ldr	r0, [pc, #8]	@ (800f300 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800f2f6:	6812      	ldr	r2, [r2, #0]
 800f2f8:	601a      	str	r2, [r3, #0]
 800f2fa:	bd10      	pop	{r4, pc}
 800f2fc:	200003d0 	.word	0x200003d0
 800f300:	20000574 	.word	0x20000574
 800f304:	200003b8 	.word	0x200003b8

0800f308 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800f308:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800f30c:	4680      	mov	r8, r0
 800f30e:	460f      	mov	r7, r1
 800f310:	f000 f910 	bl	800f534 <get_serialized_size_std_msgs__msg__Header>
 800f314:	183c      	adds	r4, r7, r0
 800f316:	4621      	mov	r1, r4
 800f318:	f108 0018 	add.w	r0, r8, #24
 800f31c:	f000 fb7a 	bl	800fa14 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800f320:	4404      	add	r4, r0
 800f322:	2108      	movs	r1, #8
 800f324:	4620      	mov	r0, r4
 800f326:	f7fd f8eb 	bl	800c500 <ucdr_alignment>
 800f32a:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800f32e:	4425      	add	r5, r4
 800f330:	4629      	mov	r1, r5
 800f332:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800f336:	f7fb fc2b 	bl	800ab90 <get_serialized_size_geometry_msgs__msg__Vector3>
 800f33a:	4405      	add	r5, r0
 800f33c:	2108      	movs	r1, #8
 800f33e:	4628      	mov	r0, r5
 800f340:	f7fd f8de 	bl	800c500 <ucdr_alignment>
 800f344:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800f348:	4425      	add	r5, r4
 800f34a:	4629      	mov	r1, r5
 800f34c:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800f350:	f7fb fc1e 	bl	800ab90 <get_serialized_size_geometry_msgs__msg__Vector3>
 800f354:	4405      	add	r5, r0
 800f356:	2108      	movs	r1, #8
 800f358:	4628      	mov	r0, r5
 800f35a:	f7fd f8d1 	bl	800c500 <ucdr_alignment>
 800f35e:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800f362:	4438      	add	r0, r7
 800f364:	4428      	add	r0, r5
 800f366:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800f36a:	bf00      	nop

0800f36c <get_serialized_size_sensor_msgs__msg__Imu>:
 800f36c:	b108      	cbz	r0, 800f372 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800f36e:	f7ff bfcb 	b.w	800f308 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800f372:	4770      	bx	lr

0800f374 <_Imu__get_serialized_size>:
 800f374:	b110      	cbz	r0, 800f37c <_Imu__get_serialized_size+0x8>
 800f376:	2100      	movs	r1, #0
 800f378:	f7ff bfc6 	b.w	800f308 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800f37c:	4770      	bx	lr
 800f37e:	bf00      	nop

0800f380 <_Imu__cdr_deserialize>:
 800f380:	b538      	push	{r3, r4, r5, lr}
 800f382:	460c      	mov	r4, r1
 800f384:	b399      	cbz	r1, 800f3ee <_Imu__cdr_deserialize+0x6e>
 800f386:	4605      	mov	r5, r0
 800f388:	f000 f956 	bl	800f638 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f38c:	6843      	ldr	r3, [r0, #4]
 800f38e:	4621      	mov	r1, r4
 800f390:	68db      	ldr	r3, [r3, #12]
 800f392:	4628      	mov	r0, r5
 800f394:	4798      	blx	r3
 800f396:	f000 fbf1 	bl	800fb7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800f39a:	6843      	ldr	r3, [r0, #4]
 800f39c:	f104 0118 	add.w	r1, r4, #24
 800f3a0:	68db      	ldr	r3, [r3, #12]
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	4798      	blx	r3
 800f3a6:	2209      	movs	r2, #9
 800f3a8:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	f000 fd85 	bl	800febc <ucdr_deserialize_array_double>
 800f3b2:	f7fb fc79 	bl	800aca8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f3b6:	6843      	ldr	r3, [r0, #4]
 800f3b8:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	4628      	mov	r0, r5
 800f3c0:	4798      	blx	r3
 800f3c2:	2209      	movs	r2, #9
 800f3c4:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	f000 fd77 	bl	800febc <ucdr_deserialize_array_double>
 800f3ce:	f7fb fc6b 	bl	800aca8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f3d2:	6843      	ldr	r3, [r0, #4]
 800f3d4:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800f3d8:	68db      	ldr	r3, [r3, #12]
 800f3da:	4628      	mov	r0, r5
 800f3dc:	4798      	blx	r3
 800f3de:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800f3e2:	4628      	mov	r0, r5
 800f3e4:	2209      	movs	r2, #9
 800f3e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3ea:	f000 bd67 	b.w	800febc <ucdr_deserialize_array_double>
 800f3ee:	4608      	mov	r0, r1
 800f3f0:	bd38      	pop	{r3, r4, r5, pc}
 800f3f2:	bf00      	nop

0800f3f4 <_Imu__cdr_serialize>:
 800f3f4:	2800      	cmp	r0, #0
 800f3f6:	d035      	beq.n	800f464 <_Imu__cdr_serialize+0x70>
 800f3f8:	b538      	push	{r3, r4, r5, lr}
 800f3fa:	460d      	mov	r5, r1
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	f000 f91b 	bl	800f638 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f402:	6843      	ldr	r3, [r0, #4]
 800f404:	4629      	mov	r1, r5
 800f406:	689b      	ldr	r3, [r3, #8]
 800f408:	4620      	mov	r0, r4
 800f40a:	4798      	blx	r3
 800f40c:	f000 fbb6 	bl	800fb7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800f410:	6843      	ldr	r3, [r0, #4]
 800f412:	4629      	mov	r1, r5
 800f414:	689b      	ldr	r3, [r3, #8]
 800f416:	f104 0018 	add.w	r0, r4, #24
 800f41a:	4798      	blx	r3
 800f41c:	2209      	movs	r2, #9
 800f41e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800f422:	4628      	mov	r0, r5
 800f424:	f000 fcf6 	bl	800fe14 <ucdr_serialize_array_double>
 800f428:	f7fb fc3e 	bl	800aca8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f42c:	6843      	ldr	r3, [r0, #4]
 800f42e:	4629      	mov	r1, r5
 800f430:	689b      	ldr	r3, [r3, #8]
 800f432:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800f436:	4798      	blx	r3
 800f438:	2209      	movs	r2, #9
 800f43a:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800f43e:	4628      	mov	r0, r5
 800f440:	f000 fce8 	bl	800fe14 <ucdr_serialize_array_double>
 800f444:	f7fb fc30 	bl	800aca8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f448:	6843      	ldr	r3, [r0, #4]
 800f44a:	4629      	mov	r1, r5
 800f44c:	689b      	ldr	r3, [r3, #8]
 800f44e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800f452:	4798      	blx	r3
 800f454:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800f458:	4628      	mov	r0, r5
 800f45a:	2209      	movs	r2, #9
 800f45c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f460:	f000 bcd8 	b.w	800fe14 <ucdr_serialize_array_double>
 800f464:	4770      	bx	lr
 800f466:	bf00      	nop

0800f468 <max_serialized_size_sensor_msgs__msg__Imu>:
 800f468:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800f46c:	2301      	movs	r3, #1
 800f46e:	7003      	strb	r3, [r0, #0]
 800f470:	4680      	mov	r8, r0
 800f472:	460f      	mov	r7, r1
 800f474:	f000 f8d6 	bl	800f624 <max_serialized_size_std_msgs__msg__Header>
 800f478:	183c      	adds	r4, r7, r0
 800f47a:	4621      	mov	r1, r4
 800f47c:	4640      	mov	r0, r8
 800f47e:	f000 fb5b 	bl	800fb38 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800f482:	4404      	add	r4, r0
 800f484:	2108      	movs	r1, #8
 800f486:	4620      	mov	r0, r4
 800f488:	f7fd f83a 	bl	800c500 <ucdr_alignment>
 800f48c:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800f490:	4425      	add	r5, r4
 800f492:	4629      	mov	r1, r5
 800f494:	4640      	mov	r0, r8
 800f496:	f7fb fbeb 	bl	800ac70 <max_serialized_size_geometry_msgs__msg__Vector3>
 800f49a:	4405      	add	r5, r0
 800f49c:	2108      	movs	r1, #8
 800f49e:	4628      	mov	r0, r5
 800f4a0:	f7fd f82e 	bl	800c500 <ucdr_alignment>
 800f4a4:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800f4a8:	4425      	add	r5, r4
 800f4aa:	4629      	mov	r1, r5
 800f4ac:	4640      	mov	r0, r8
 800f4ae:	f7fb fbdf 	bl	800ac70 <max_serialized_size_geometry_msgs__msg__Vector3>
 800f4b2:	4405      	add	r5, r0
 800f4b4:	2108      	movs	r1, #8
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	f7fd f822 	bl	800c500 <ucdr_alignment>
 800f4bc:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800f4c0:	4438      	add	r0, r7
 800f4c2:	4428      	add	r0, r5
 800f4c4:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800f4c8 <_Imu__max_serialized_size>:
 800f4c8:	b500      	push	{lr}
 800f4ca:	b083      	sub	sp, #12
 800f4cc:	2100      	movs	r1, #0
 800f4ce:	f10d 0007 	add.w	r0, sp, #7
 800f4d2:	f7ff ffc9 	bl	800f468 <max_serialized_size_sensor_msgs__msg__Imu>
 800f4d6:	b003      	add	sp, #12
 800f4d8:	f85d fb04 	ldr.w	pc, [sp], #4

0800f4dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f4dc:	4800      	ldr	r0, [pc, #0]	@ (800f4e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800f4de:	4770      	bx	lr
 800f4e0:	20000580 	.word	0x20000580

0800f4e4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800f4e4:	f008 bafa 	b.w	8017adc <std_msgs__msg__Header__init>

0800f4e8 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800f4e8:	f008 bb1c 	b.w	8017b24 <std_msgs__msg__Header__fini>

0800f4ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800f4ec:	b508      	push	{r3, lr}
 800f4ee:	f000 f9d3 	bl	800f898 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f4f2:	4b06      	ldr	r3, [pc, #24]	@ (800f50c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f4f4:	4906      	ldr	r1, [pc, #24]	@ (800f510 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	60c8      	str	r0, [r1, #12]
 800f4fa:	b10a      	cbz	r2, 800f500 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800f4fc:	4803      	ldr	r0, [pc, #12]	@ (800f50c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f4fe:	bd08      	pop	{r3, pc}
 800f500:	4a04      	ldr	r2, [pc, #16]	@ (800f514 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800f502:	4802      	ldr	r0, [pc, #8]	@ (800f50c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f504:	6812      	ldr	r2, [r2, #0]
 800f506:	601a      	str	r2, [r3, #0]
 800f508:	bd08      	pop	{r3, pc}
 800f50a:	bf00      	nop
 800f50c:	20000620 	.word	0x20000620
 800f510:	200005a8 	.word	0x200005a8
 800f514:	200003b8 	.word	0x200003b8

0800f518 <_Header__max_serialized_size>:
 800f518:	b500      	push	{lr}
 800f51a:	b083      	sub	sp, #12
 800f51c:	2301      	movs	r3, #1
 800f51e:	2100      	movs	r1, #0
 800f520:	f10d 0007 	add.w	r0, sp, #7
 800f524:	f88d 3007 	strb.w	r3, [sp, #7]
 800f528:	f000 fa14 	bl	800f954 <max_serialized_size_builtin_interfaces__msg__Time>
 800f52c:	b003      	add	sp, #12
 800f52e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f532:	bf00      	nop

0800f534 <get_serialized_size_std_msgs__msg__Header>:
 800f534:	b570      	push	{r4, r5, r6, lr}
 800f536:	4605      	mov	r5, r0
 800f538:	b168      	cbz	r0, 800f556 <get_serialized_size_std_msgs__msg__Header+0x22>
 800f53a:	460c      	mov	r4, r1
 800f53c:	f000 f9ba 	bl	800f8b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800f540:	1826      	adds	r6, r4, r0
 800f542:	2104      	movs	r1, #4
 800f544:	4630      	mov	r0, r6
 800f546:	f7fc ffdb 	bl	800c500 <ucdr_alignment>
 800f54a:	68e9      	ldr	r1, [r5, #12]
 800f54c:	f1c4 0405 	rsb	r4, r4, #5
 800f550:	440c      	add	r4, r1
 800f552:	4404      	add	r4, r0
 800f554:	19a0      	adds	r0, r4, r6
 800f556:	bd70      	pop	{r4, r5, r6, pc}

0800f558 <_Header__cdr_deserialize>:
 800f558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f55a:	460c      	mov	r4, r1
 800f55c:	b083      	sub	sp, #12
 800f55e:	b1e1      	cbz	r1, 800f59a <_Header__cdr_deserialize+0x42>
 800f560:	4606      	mov	r6, r0
 800f562:	f000 fa0b 	bl	800f97c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f566:	6843      	ldr	r3, [r0, #4]
 800f568:	4621      	mov	r1, r4
 800f56a:	68db      	ldr	r3, [r3, #12]
 800f56c:	4630      	mov	r0, r6
 800f56e:	4798      	blx	r3
 800f570:	6927      	ldr	r7, [r4, #16]
 800f572:	68a1      	ldr	r1, [r4, #8]
 800f574:	ab01      	add	r3, sp, #4
 800f576:	463a      	mov	r2, r7
 800f578:	4630      	mov	r0, r6
 800f57a:	f000 fd07 	bl	800ff8c <ucdr_deserialize_sequence_char>
 800f57e:	9b01      	ldr	r3, [sp, #4]
 800f580:	4605      	mov	r5, r0
 800f582:	b920      	cbnz	r0, 800f58e <_Header__cdr_deserialize+0x36>
 800f584:	429f      	cmp	r7, r3
 800f586:	d30c      	bcc.n	800f5a2 <_Header__cdr_deserialize+0x4a>
 800f588:	4628      	mov	r0, r5
 800f58a:	b003      	add	sp, #12
 800f58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f58e:	b103      	cbz	r3, 800f592 <_Header__cdr_deserialize+0x3a>
 800f590:	3b01      	subs	r3, #1
 800f592:	4628      	mov	r0, r5
 800f594:	60e3      	str	r3, [r4, #12]
 800f596:	b003      	add	sp, #12
 800f598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f59a:	460d      	mov	r5, r1
 800f59c:	4628      	mov	r0, r5
 800f59e:	b003      	add	sp, #12
 800f5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5a2:	2101      	movs	r1, #1
 800f5a4:	75b0      	strb	r0, [r6, #22]
 800f5a6:	7571      	strb	r1, [r6, #21]
 800f5a8:	4630      	mov	r0, r6
 800f5aa:	60e5      	str	r5, [r4, #12]
 800f5ac:	f7fc ffbe 	bl	800c52c <ucdr_align_to>
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	9901      	ldr	r1, [sp, #4]
 800f5b4:	f7fc fff0 	bl	800c598 <ucdr_advance_buffer>
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	b003      	add	sp, #12
 800f5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5be:	bf00      	nop

0800f5c0 <_Header__cdr_serialize>:
 800f5c0:	b1f8      	cbz	r0, 800f602 <_Header__cdr_serialize+0x42>
 800f5c2:	b570      	push	{r4, r5, r6, lr}
 800f5c4:	4604      	mov	r4, r0
 800f5c6:	460d      	mov	r5, r1
 800f5c8:	f000 f9d8 	bl	800f97c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f5cc:	6843      	ldr	r3, [r0, #4]
 800f5ce:	4629      	mov	r1, r5
 800f5d0:	689b      	ldr	r3, [r3, #8]
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	4798      	blx	r3
 800f5d6:	68a6      	ldr	r6, [r4, #8]
 800f5d8:	b156      	cbz	r6, 800f5f0 <_Header__cdr_serialize+0x30>
 800f5da:	4630      	mov	r0, r6
 800f5dc:	f7f0 fe2a 	bl	8000234 <strlen>
 800f5e0:	4631      	mov	r1, r6
 800f5e2:	60e0      	str	r0, [r4, #12]
 800f5e4:	1c42      	adds	r2, r0, #1
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f5ec:	f000 bcbc 	b.w	800ff68 <ucdr_serialize_sequence_char>
 800f5f0:	4630      	mov	r0, r6
 800f5f2:	60e0      	str	r0, [r4, #12]
 800f5f4:	4632      	mov	r2, r6
 800f5f6:	4631      	mov	r1, r6
 800f5f8:	4628      	mov	r0, r5
 800f5fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f5fe:	f000 bcb3 	b.w	800ff68 <ucdr_serialize_sequence_char>
 800f602:	4770      	bx	lr

0800f604 <_Header__get_serialized_size>:
 800f604:	b538      	push	{r3, r4, r5, lr}
 800f606:	4604      	mov	r4, r0
 800f608:	b150      	cbz	r0, 800f620 <_Header__get_serialized_size+0x1c>
 800f60a:	2100      	movs	r1, #0
 800f60c:	f000 f952 	bl	800f8b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800f610:	2104      	movs	r1, #4
 800f612:	4605      	mov	r5, r0
 800f614:	f7fc ff74 	bl	800c500 <ucdr_alignment>
 800f618:	68e2      	ldr	r2, [r4, #12]
 800f61a:	3205      	adds	r2, #5
 800f61c:	1953      	adds	r3, r2, r5
 800f61e:	4418      	add	r0, r3
 800f620:	bd38      	pop	{r3, r4, r5, pc}
 800f622:	bf00      	nop

0800f624 <max_serialized_size_std_msgs__msg__Header>:
 800f624:	b510      	push	{r4, lr}
 800f626:	2301      	movs	r3, #1
 800f628:	4604      	mov	r4, r0
 800f62a:	7003      	strb	r3, [r0, #0]
 800f62c:	f000 f992 	bl	800f954 <max_serialized_size_builtin_interfaces__msg__Time>
 800f630:	2300      	movs	r3, #0
 800f632:	7023      	strb	r3, [r4, #0]
 800f634:	bd10      	pop	{r4, pc}
 800f636:	bf00      	nop

0800f638 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800f638:	4800      	ldr	r0, [pc, #0]	@ (800f63c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800f63a:	4770      	bx	lr
 800f63c:	2000062c 	.word	0x2000062c

0800f640 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800f640:	4b04      	ldr	r3, [pc, #16]	@ (800f654 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	b10a      	cbz	r2, 800f64a <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa>
 800f646:	4803      	ldr	r0, [pc, #12]	@ (800f654 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800f648:	4770      	bx	lr
 800f64a:	4a03      	ldr	r2, [pc, #12]	@ (800f658 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x18>)
 800f64c:	4801      	ldr	r0, [pc, #4]	@ (800f654 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800f64e:	6812      	ldr	r2, [r2, #0]
 800f650:	601a      	str	r2, [r3, #0]
 800f652:	4770      	bx	lr
 800f654:	2000065c 	.word	0x2000065c
 800f658:	200003b4 	.word	0x200003b4

0800f65c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800f65c:	4b04      	ldr	r3, [pc, #16]	@ (800f670 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800f65e:	4805      	ldr	r0, [pc, #20]	@ (800f674 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 800f660:	4905      	ldr	r1, [pc, #20]	@ (800f678 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x1c>)
 800f662:	4a06      	ldr	r2, [pc, #24]	@ (800f67c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x20>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	6003      	str	r3, [r0, #0]
 800f668:	600b      	str	r3, [r1, #0]
 800f66a:	6013      	str	r3, [r2, #0]
 800f66c:	4770      	bx	lr
 800f66e:	bf00      	nop
 800f670:	200003b4 	.word	0x200003b4
 800f674:	20000678 	.word	0x20000678
 800f678:	20000684 	.word	0x20000684
 800f67c:	2000065c 	.word	0x2000065c

0800f680 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_init_function>:
 800f680:	f008 ba5c 	b.w	8017b3c <std_srvs__srv__SetBool_Request__init>

0800f684 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_fini_function>:
 800f684:	f008 ba5e 	b.w	8017b44 <std_srvs__srv__SetBool_Request__fini>

0800f688 <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_init_function>:
 800f688:	f008 ba5e 	b.w	8017b48 <std_srvs__srv__SetBool_Response__init>

0800f68c <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_fini_function>:
 800f68c:	f008 ba6e 	b.w	8017b6c <std_srvs__srv__SetBool_Response__fini>

0800f690 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800f690:	4b04      	ldr	r3, [pc, #16]	@ (800f6a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800f692:	681a      	ldr	r2, [r3, #0]
 800f694:	b10a      	cbz	r2, 800f69a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0xa>
 800f696:	4803      	ldr	r0, [pc, #12]	@ (800f6a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800f698:	4770      	bx	lr
 800f69a:	4a03      	ldr	r2, [pc, #12]	@ (800f6a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 800f69c:	4801      	ldr	r0, [pc, #4]	@ (800f6a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800f69e:	6812      	ldr	r2, [r2, #0]
 800f6a0:	601a      	str	r2, [r3, #0]
 800f6a2:	4770      	bx	lr
 800f6a4:	200006cc 	.word	0x200006cc
 800f6a8:	200003b8 	.word	0x200003b8

0800f6ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 800f6ac:	4b04      	ldr	r3, [pc, #16]	@ (800f6c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800f6ae:	681a      	ldr	r2, [r3, #0]
 800f6b0:	b10a      	cbz	r2, 800f6b6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0xa>
 800f6b2:	4803      	ldr	r0, [pc, #12]	@ (800f6c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800f6b4:	4770      	bx	lr
 800f6b6:	4a03      	ldr	r2, [pc, #12]	@ (800f6c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x18>)
 800f6b8:	4801      	ldr	r0, [pc, #4]	@ (800f6c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800f6ba:	6812      	ldr	r2, [r2, #0]
 800f6bc:	601a      	str	r2, [r3, #0]
 800f6be:	4770      	bx	lr
 800f6c0:	20000750 	.word	0x20000750
 800f6c4:	200003b8 	.word	0x200003b8

0800f6c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800f6c8:	4b13      	ldr	r3, [pc, #76]	@ (800f718 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800f6ca:	681a      	ldr	r2, [r3, #0]
 800f6cc:	b132      	cbz	r2, 800f6dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	689a      	ldr	r2, [r3, #8]
 800f6d2:	b152      	cbz	r2, 800f6ea <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x22>
 800f6d4:	68da      	ldr	r2, [r3, #12]
 800f6d6:	b182      	cbz	r2, 800f6fa <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x32>
 800f6d8:	480f      	ldr	r0, [pc, #60]	@ (800f718 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800f6da:	4770      	bx	lr
 800f6dc:	4a0f      	ldr	r2, [pc, #60]	@ (800f71c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800f6de:	6812      	ldr	r2, [r2, #0]
 800f6e0:	601a      	str	r2, [r3, #0]
 800f6e2:	685b      	ldr	r3, [r3, #4]
 800f6e4:	689a      	ldr	r2, [r3, #8]
 800f6e6:	2a00      	cmp	r2, #0
 800f6e8:	d1f4      	bne.n	800f6d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xc>
 800f6ea:	4a0d      	ldr	r2, [pc, #52]	@ (800f720 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x58>)
 800f6ec:	6811      	ldr	r1, [r2, #0]
 800f6ee:	b179      	cbz	r1, 800f710 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x48>
 800f6f0:	6852      	ldr	r2, [r2, #4]
 800f6f2:	609a      	str	r2, [r3, #8]
 800f6f4:	68da      	ldr	r2, [r3, #12]
 800f6f6:	2a00      	cmp	r2, #0
 800f6f8:	d1ee      	bne.n	800f6d8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x10>
 800f6fa:	4a0a      	ldr	r2, [pc, #40]	@ (800f724 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x5c>)
 800f6fc:	6811      	ldr	r1, [r2, #0]
 800f6fe:	b119      	cbz	r1, 800f708 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x40>
 800f700:	6852      	ldr	r2, [r2, #4]
 800f702:	4805      	ldr	r0, [pc, #20]	@ (800f718 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800f704:	60da      	str	r2, [r3, #12]
 800f706:	4770      	bx	lr
 800f708:	4904      	ldr	r1, [pc, #16]	@ (800f71c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800f70a:	6809      	ldr	r1, [r1, #0]
 800f70c:	6011      	str	r1, [r2, #0]
 800f70e:	e7f7      	b.n	800f700 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x38>
 800f710:	4902      	ldr	r1, [pc, #8]	@ (800f71c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800f712:	6809      	ldr	r1, [r1, #0]
 800f714:	6011      	str	r1, [r2, #0]
 800f716:	e7eb      	b.n	800f6f0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x28>
 800f718:	2000076c 	.word	0x2000076c
 800f71c:	200003b8 	.word	0x200003b8
 800f720:	200006cc 	.word	0x200006cc
 800f724:	20000750 	.word	0x20000750

0800f728 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800f728:	4800      	ldr	r0, [pc, #0]	@ (800f72c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x4>)
 800f72a:	4770      	bx	lr
 800f72c:	20000794 	.word	0x20000794

0800f730 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 800f730:	4800      	ldr	r0, [pc, #0]	@ (800f734 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x4>)
 800f732:	4770      	bx	lr
 800f734:	200007a0 	.word	0x200007a0

0800f738 <_SetBool_Request__max_serialized_size>:
 800f738:	b508      	push	{r3, lr}
 800f73a:	2101      	movs	r1, #1
 800f73c:	2000      	movs	r0, #0
 800f73e:	f7fc fedf 	bl	800c500 <ucdr_alignment>
 800f742:	3001      	adds	r0, #1
 800f744:	bd08      	pop	{r3, pc}
 800f746:	bf00      	nop

0800f748 <_SetBool_Request__cdr_deserialize>:
 800f748:	b109      	cbz	r1, 800f74e <_SetBool_Request__cdr_deserialize+0x6>
 800f74a:	f7fb bbdb 	b.w	800af04 <ucdr_deserialize_bool>
 800f74e:	4608      	mov	r0, r1
 800f750:	4770      	bx	lr
 800f752:	bf00      	nop

0800f754 <get_serialized_size_std_srvs__srv__SetBool_Request>:
 800f754:	b138      	cbz	r0, 800f766 <get_serialized_size_std_srvs__srv__SetBool_Request+0x12>
 800f756:	b508      	push	{r3, lr}
 800f758:	460b      	mov	r3, r1
 800f75a:	4618      	mov	r0, r3
 800f75c:	2101      	movs	r1, #1
 800f75e:	f7fc fecf 	bl	800c500 <ucdr_alignment>
 800f762:	3001      	adds	r0, #1
 800f764:	bd08      	pop	{r3, pc}
 800f766:	4770      	bx	lr

0800f768 <get_serialized_size_std_srvs__srv__SetBool_Response>:
 800f768:	b570      	push	{r4, r5, r6, lr}
 800f76a:	4605      	mov	r5, r0
 800f76c:	b180      	cbz	r0, 800f790 <get_serialized_size_std_srvs__srv__SetBool_Response+0x28>
 800f76e:	460c      	mov	r4, r1
 800f770:	4620      	mov	r0, r4
 800f772:	2101      	movs	r1, #1
 800f774:	f7fc fec4 	bl	800c500 <ucdr_alignment>
 800f778:	1c63      	adds	r3, r4, #1
 800f77a:	181e      	adds	r6, r3, r0
 800f77c:	2104      	movs	r1, #4
 800f77e:	4630      	mov	r0, r6
 800f780:	f7fc febe 	bl	800c500 <ucdr_alignment>
 800f784:	68a9      	ldr	r1, [r5, #8]
 800f786:	f1c4 0405 	rsb	r4, r4, #5
 800f78a:	440c      	add	r4, r1
 800f78c:	4404      	add	r4, r0
 800f78e:	19a0      	adds	r0, r4, r6
 800f790:	bd70      	pop	{r4, r5, r6, pc}
 800f792:	bf00      	nop

0800f794 <_SetBool_Request__cdr_serialize>:
 800f794:	460a      	mov	r2, r1
 800f796:	b118      	cbz	r0, 800f7a0 <_SetBool_Request__cdr_serialize+0xc>
 800f798:	7801      	ldrb	r1, [r0, #0]
 800f79a:	4610      	mov	r0, r2
 800f79c:	f7fb bb9c 	b.w	800aed8 <ucdr_serialize_bool>
 800f7a0:	4770      	bx	lr
 800f7a2:	bf00      	nop

0800f7a4 <_SetBool_Response__cdr_deserialize>:
 800f7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7a6:	460c      	mov	r4, r1
 800f7a8:	b083      	sub	sp, #12
 800f7aa:	b1b9      	cbz	r1, 800f7dc <_SetBool_Response__cdr_deserialize+0x38>
 800f7ac:	4606      	mov	r6, r0
 800f7ae:	f7fb fba9 	bl	800af04 <ucdr_deserialize_bool>
 800f7b2:	68e7      	ldr	r7, [r4, #12]
 800f7b4:	6861      	ldr	r1, [r4, #4]
 800f7b6:	ab01      	add	r3, sp, #4
 800f7b8:	463a      	mov	r2, r7
 800f7ba:	4630      	mov	r0, r6
 800f7bc:	f000 fbe6 	bl	800ff8c <ucdr_deserialize_sequence_char>
 800f7c0:	9b01      	ldr	r3, [sp, #4]
 800f7c2:	4605      	mov	r5, r0
 800f7c4:	b920      	cbnz	r0, 800f7d0 <_SetBool_Response__cdr_deserialize+0x2c>
 800f7c6:	429f      	cmp	r7, r3
 800f7c8:	d30c      	bcc.n	800f7e4 <_SetBool_Response__cdr_deserialize+0x40>
 800f7ca:	4628      	mov	r0, r5
 800f7cc:	b003      	add	sp, #12
 800f7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7d0:	b103      	cbz	r3, 800f7d4 <_SetBool_Response__cdr_deserialize+0x30>
 800f7d2:	3b01      	subs	r3, #1
 800f7d4:	4628      	mov	r0, r5
 800f7d6:	60a3      	str	r3, [r4, #8]
 800f7d8:	b003      	add	sp, #12
 800f7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7dc:	460d      	mov	r5, r1
 800f7de:	4628      	mov	r0, r5
 800f7e0:	b003      	add	sp, #12
 800f7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7e4:	2101      	movs	r1, #1
 800f7e6:	75b0      	strb	r0, [r6, #22]
 800f7e8:	7571      	strb	r1, [r6, #21]
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	60a5      	str	r5, [r4, #8]
 800f7ee:	f7fc fe9d 	bl	800c52c <ucdr_align_to>
 800f7f2:	4630      	mov	r0, r6
 800f7f4:	9901      	ldr	r1, [sp, #4]
 800f7f6:	f7fc fecf 	bl	800c598 <ucdr_advance_buffer>
 800f7fa:	4628      	mov	r0, r5
 800f7fc:	b003      	add	sp, #12
 800f7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f800 <_SetBool_Response__cdr_serialize>:
 800f800:	b1e0      	cbz	r0, 800f83c <_SetBool_Response__cdr_serialize+0x3c>
 800f802:	b570      	push	{r4, r5, r6, lr}
 800f804:	460d      	mov	r5, r1
 800f806:	4604      	mov	r4, r0
 800f808:	7801      	ldrb	r1, [r0, #0]
 800f80a:	4628      	mov	r0, r5
 800f80c:	f7fb fb64 	bl	800aed8 <ucdr_serialize_bool>
 800f810:	6866      	ldr	r6, [r4, #4]
 800f812:	b156      	cbz	r6, 800f82a <_SetBool_Response__cdr_serialize+0x2a>
 800f814:	4630      	mov	r0, r6
 800f816:	f7f0 fd0d 	bl	8000234 <strlen>
 800f81a:	4631      	mov	r1, r6
 800f81c:	60a0      	str	r0, [r4, #8]
 800f81e:	1c42      	adds	r2, r0, #1
 800f820:	4628      	mov	r0, r5
 800f822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f826:	f000 bb9f 	b.w	800ff68 <ucdr_serialize_sequence_char>
 800f82a:	4630      	mov	r0, r6
 800f82c:	60a0      	str	r0, [r4, #8]
 800f82e:	4632      	mov	r2, r6
 800f830:	4631      	mov	r1, r6
 800f832:	4628      	mov	r0, r5
 800f834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f838:	f000 bb96 	b.w	800ff68 <ucdr_serialize_sequence_char>
 800f83c:	4770      	bx	lr
 800f83e:	bf00      	nop

0800f840 <_SetBool_Request__get_serialized_size>:
 800f840:	b130      	cbz	r0, 800f850 <_SetBool_Request__get_serialized_size+0x10>
 800f842:	b508      	push	{r3, lr}
 800f844:	2101      	movs	r1, #1
 800f846:	2000      	movs	r0, #0
 800f848:	f7fc fe5a 	bl	800c500 <ucdr_alignment>
 800f84c:	3001      	adds	r0, #1
 800f84e:	bd08      	pop	{r3, pc}
 800f850:	4770      	bx	lr
 800f852:	bf00      	nop

0800f854 <_SetBool_Response__max_serialized_size>:
 800f854:	b508      	push	{r3, lr}
 800f856:	2101      	movs	r1, #1
 800f858:	2000      	movs	r0, #0
 800f85a:	f7fc fe51 	bl	800c500 <ucdr_alignment>
 800f85e:	3001      	adds	r0, #1
 800f860:	bd08      	pop	{r3, pc}
 800f862:	bf00      	nop

0800f864 <_SetBool_Response__get_serialized_size>:
 800f864:	b538      	push	{r3, r4, r5, lr}
 800f866:	4604      	mov	r4, r0
 800f868:	b160      	cbz	r0, 800f884 <_SetBool_Response__get_serialized_size+0x20>
 800f86a:	2101      	movs	r1, #1
 800f86c:	2000      	movs	r0, #0
 800f86e:	f7fc fe47 	bl	800c500 <ucdr_alignment>
 800f872:	1c45      	adds	r5, r0, #1
 800f874:	2104      	movs	r1, #4
 800f876:	4628      	mov	r0, r5
 800f878:	f7fc fe42 	bl	800c500 <ucdr_alignment>
 800f87c:	68a3      	ldr	r3, [r4, #8]
 800f87e:	3305      	adds	r3, #5
 800f880:	4418      	add	r0, r3
 800f882:	4428      	add	r0, r5
 800f884:	bd38      	pop	{r3, r4, r5, pc}
 800f886:	bf00      	nop

0800f888 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800f888:	4800      	ldr	r0, [pc, #0]	@ (800f88c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x4>)
 800f88a:	4770      	bx	lr
 800f88c:	20000788 	.word	0x20000788

0800f890 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800f890:	f008 b972 	b.w	8017b78 <builtin_interfaces__msg__Time__init>

0800f894 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800f894:	f008 b974 	b.w	8017b80 <builtin_interfaces__msg__Time__fini>

0800f898 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800f898:	4b04      	ldr	r3, [pc, #16]	@ (800f8ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f89a:	681a      	ldr	r2, [r3, #0]
 800f89c:	b10a      	cbz	r2, 800f8a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800f89e:	4803      	ldr	r0, [pc, #12]	@ (800f8ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f8a0:	4770      	bx	lr
 800f8a2:	4a03      	ldr	r2, [pc, #12]	@ (800f8b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800f8a4:	4801      	ldr	r0, [pc, #4]	@ (800f8ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f8a6:	6812      	ldr	r2, [r2, #0]
 800f8a8:	601a      	str	r2, [r3, #0]
 800f8aa:	4770      	bx	lr
 800f8ac:	2000085c 	.word	0x2000085c
 800f8b0:	200003b8 	.word	0x200003b8

0800f8b4 <get_serialized_size_builtin_interfaces__msg__Time>:
 800f8b4:	b180      	cbz	r0, 800f8d8 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800f8b6:	b538      	push	{r3, r4, r5, lr}
 800f8b8:	460d      	mov	r5, r1
 800f8ba:	4628      	mov	r0, r5
 800f8bc:	2104      	movs	r1, #4
 800f8be:	f7fc fe1f 	bl	800c500 <ucdr_alignment>
 800f8c2:	1d2b      	adds	r3, r5, #4
 800f8c4:	181c      	adds	r4, r3, r0
 800f8c6:	2104      	movs	r1, #4
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	f7fc fe19 	bl	800c500 <ucdr_alignment>
 800f8ce:	f1c5 0504 	rsb	r5, r5, #4
 800f8d2:	4428      	add	r0, r5
 800f8d4:	4420      	add	r0, r4
 800f8d6:	bd38      	pop	{r3, r4, r5, pc}
 800f8d8:	4770      	bx	lr
 800f8da:	bf00      	nop

0800f8dc <_Time__cdr_deserialize>:
 800f8dc:	b538      	push	{r3, r4, r5, lr}
 800f8de:	460c      	mov	r4, r1
 800f8e0:	b141      	cbz	r1, 800f8f4 <_Time__cdr_deserialize+0x18>
 800f8e2:	4605      	mov	r5, r0
 800f8e4:	f7fc f9ee 	bl	800bcc4 <ucdr_deserialize_int32_t>
 800f8e8:	1d21      	adds	r1, r4, #4
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8f0:	f7fb be66 	b.w	800b5c0 <ucdr_deserialize_uint32_t>
 800f8f4:	4608      	mov	r0, r1
 800f8f6:	bd38      	pop	{r3, r4, r5, pc}

0800f8f8 <_Time__cdr_serialize>:
 800f8f8:	b160      	cbz	r0, 800f914 <_Time__cdr_serialize+0x1c>
 800f8fa:	b538      	push	{r3, r4, r5, lr}
 800f8fc:	460d      	mov	r5, r1
 800f8fe:	4604      	mov	r4, r0
 800f900:	6801      	ldr	r1, [r0, #0]
 800f902:	4628      	mov	r0, r5
 800f904:	f7fc f946 	bl	800bb94 <ucdr_serialize_int32_t>
 800f908:	6861      	ldr	r1, [r4, #4]
 800f90a:	4628      	mov	r0, r5
 800f90c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f910:	f7fb bd26 	b.w	800b360 <ucdr_serialize_uint32_t>
 800f914:	4770      	bx	lr
 800f916:	bf00      	nop

0800f918 <_Time__get_serialized_size>:
 800f918:	b160      	cbz	r0, 800f934 <_Time__get_serialized_size+0x1c>
 800f91a:	b510      	push	{r4, lr}
 800f91c:	2104      	movs	r1, #4
 800f91e:	2000      	movs	r0, #0
 800f920:	f7fc fdee 	bl	800c500 <ucdr_alignment>
 800f924:	1d04      	adds	r4, r0, #4
 800f926:	2104      	movs	r1, #4
 800f928:	4620      	mov	r0, r4
 800f92a:	f7fc fde9 	bl	800c500 <ucdr_alignment>
 800f92e:	3004      	adds	r0, #4
 800f930:	4420      	add	r0, r4
 800f932:	bd10      	pop	{r4, pc}
 800f934:	4770      	bx	lr
 800f936:	bf00      	nop

0800f938 <_Time__max_serialized_size>:
 800f938:	b510      	push	{r4, lr}
 800f93a:	2104      	movs	r1, #4
 800f93c:	2000      	movs	r0, #0
 800f93e:	f7fc fddf 	bl	800c500 <ucdr_alignment>
 800f942:	1d04      	adds	r4, r0, #4
 800f944:	2104      	movs	r1, #4
 800f946:	4620      	mov	r0, r4
 800f948:	f7fc fdda 	bl	800c500 <ucdr_alignment>
 800f94c:	3004      	adds	r0, #4
 800f94e:	4420      	add	r0, r4
 800f950:	bd10      	pop	{r4, pc}
 800f952:	bf00      	nop

0800f954 <max_serialized_size_builtin_interfaces__msg__Time>:
 800f954:	b538      	push	{r3, r4, r5, lr}
 800f956:	460c      	mov	r4, r1
 800f958:	2301      	movs	r3, #1
 800f95a:	7003      	strb	r3, [r0, #0]
 800f95c:	2104      	movs	r1, #4
 800f95e:	4620      	mov	r0, r4
 800f960:	f7fc fdce 	bl	800c500 <ucdr_alignment>
 800f964:	1d25      	adds	r5, r4, #4
 800f966:	4405      	add	r5, r0
 800f968:	2104      	movs	r1, #4
 800f96a:	4628      	mov	r0, r5
 800f96c:	f7fc fdc8 	bl	800c500 <ucdr_alignment>
 800f970:	f1c4 0404 	rsb	r4, r4, #4
 800f974:	4420      	add	r0, r4
 800f976:	4428      	add	r0, r5
 800f978:	bd38      	pop	{r3, r4, r5, pc}
 800f97a:	bf00      	nop

0800f97c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800f97c:	4800      	ldr	r0, [pc, #0]	@ (800f980 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800f97e:	4770      	bx	lr
 800f980:	20000868 	.word	0x20000868

0800f984 <geometry_msgs__msg__Twist__init>:
 800f984:	b570      	push	{r4, r5, r6, lr}
 800f986:	4605      	mov	r5, r0
 800f988:	b1a8      	cbz	r0, 800f9b6 <geometry_msgs__msg__Twist__init+0x32>
 800f98a:	f000 f82b 	bl	800f9e4 <geometry_msgs__msg__Vector3__init>
 800f98e:	4604      	mov	r4, r0
 800f990:	b140      	cbz	r0, 800f9a4 <geometry_msgs__msg__Twist__init+0x20>
 800f992:	f105 0618 	add.w	r6, r5, #24
 800f996:	4630      	mov	r0, r6
 800f998:	f000 f824 	bl	800f9e4 <geometry_msgs__msg__Vector3__init>
 800f99c:	4604      	mov	r4, r0
 800f99e:	b168      	cbz	r0, 800f9bc <geometry_msgs__msg__Twist__init+0x38>
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	bd70      	pop	{r4, r5, r6, pc}
 800f9a4:	4628      	mov	r0, r5
 800f9a6:	f000 f821 	bl	800f9ec <geometry_msgs__msg__Vector3__fini>
 800f9aa:	f105 0018 	add.w	r0, r5, #24
 800f9ae:	f000 f81d 	bl	800f9ec <geometry_msgs__msg__Vector3__fini>
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	bd70      	pop	{r4, r5, r6, pc}
 800f9b6:	4604      	mov	r4, r0
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	bd70      	pop	{r4, r5, r6, pc}
 800f9bc:	4628      	mov	r0, r5
 800f9be:	f000 f815 	bl	800f9ec <geometry_msgs__msg__Vector3__fini>
 800f9c2:	4630      	mov	r0, r6
 800f9c4:	f000 f812 	bl	800f9ec <geometry_msgs__msg__Vector3__fini>
 800f9c8:	e7ea      	b.n	800f9a0 <geometry_msgs__msg__Twist__init+0x1c>
 800f9ca:	bf00      	nop

0800f9cc <geometry_msgs__msg__Twist__fini>:
 800f9cc:	b148      	cbz	r0, 800f9e2 <geometry_msgs__msg__Twist__fini+0x16>
 800f9ce:	b510      	push	{r4, lr}
 800f9d0:	4604      	mov	r4, r0
 800f9d2:	f000 f80b 	bl	800f9ec <geometry_msgs__msg__Vector3__fini>
 800f9d6:	f104 0018 	add.w	r0, r4, #24
 800f9da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9de:	f000 b805 	b.w	800f9ec <geometry_msgs__msg__Vector3__fini>
 800f9e2:	4770      	bx	lr

0800f9e4 <geometry_msgs__msg__Vector3__init>:
 800f9e4:	3800      	subs	r0, #0
 800f9e6:	bf18      	it	ne
 800f9e8:	2001      	movne	r0, #1
 800f9ea:	4770      	bx	lr

0800f9ec <geometry_msgs__msg__Vector3__fini>:
 800f9ec:	4770      	bx	lr
 800f9ee:	bf00      	nop

0800f9f0 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800f9f0:	f008 b8ca 	b.w	8017b88 <geometry_msgs__msg__Quaternion__init>

0800f9f4 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800f9f4:	f008 b8dc 	b.w	8017bb0 <geometry_msgs__msg__Quaternion__fini>

0800f9f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800f9f8:	4b04      	ldr	r3, [pc, #16]	@ (800fa0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800f9fa:	681a      	ldr	r2, [r3, #0]
 800f9fc:	b10a      	cbz	r2, 800fa02 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800f9fe:	4803      	ldr	r0, [pc, #12]	@ (800fa0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800fa00:	4770      	bx	lr
 800fa02:	4a03      	ldr	r2, [pc, #12]	@ (800fa10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800fa04:	4801      	ldr	r0, [pc, #4]	@ (800fa0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800fa06:	6812      	ldr	r2, [r2, #0]
 800fa08:	601a      	str	r2, [r3, #0]
 800fa0a:	4770      	bx	lr
 800fa0c:	20000980 	.word	0x20000980
 800fa10:	200003b8 	.word	0x200003b8

0800fa14 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800fa14:	b1f0      	cbz	r0, 800fa54 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800fa16:	b570      	push	{r4, r5, r6, lr}
 800fa18:	460d      	mov	r5, r1
 800fa1a:	4628      	mov	r0, r5
 800fa1c:	2108      	movs	r1, #8
 800fa1e:	f7fc fd6f 	bl	800c500 <ucdr_alignment>
 800fa22:	f105 0308 	add.w	r3, r5, #8
 800fa26:	181e      	adds	r6, r3, r0
 800fa28:	2108      	movs	r1, #8
 800fa2a:	4630      	mov	r0, r6
 800fa2c:	f7fc fd68 	bl	800c500 <ucdr_alignment>
 800fa30:	f100 0408 	add.w	r4, r0, #8
 800fa34:	4434      	add	r4, r6
 800fa36:	2108      	movs	r1, #8
 800fa38:	4620      	mov	r0, r4
 800fa3a:	f7fc fd61 	bl	800c500 <ucdr_alignment>
 800fa3e:	3008      	adds	r0, #8
 800fa40:	4404      	add	r4, r0
 800fa42:	2108      	movs	r1, #8
 800fa44:	4620      	mov	r0, r4
 800fa46:	f7fc fd5b 	bl	800c500 <ucdr_alignment>
 800fa4a:	f1c5 0508 	rsb	r5, r5, #8
 800fa4e:	4428      	add	r0, r5
 800fa50:	4420      	add	r0, r4
 800fa52:	bd70      	pop	{r4, r5, r6, pc}
 800fa54:	4770      	bx	lr
 800fa56:	bf00      	nop

0800fa58 <_Quaternion__cdr_deserialize>:
 800fa58:	b538      	push	{r3, r4, r5, lr}
 800fa5a:	460c      	mov	r4, r1
 800fa5c:	b199      	cbz	r1, 800fa86 <_Quaternion__cdr_deserialize+0x2e>
 800fa5e:	4605      	mov	r5, r0
 800fa60:	f7fc fb62 	bl	800c128 <ucdr_deserialize_double>
 800fa64:	f104 0108 	add.w	r1, r4, #8
 800fa68:	4628      	mov	r0, r5
 800fa6a:	f7fc fb5d 	bl	800c128 <ucdr_deserialize_double>
 800fa6e:	f104 0110 	add.w	r1, r4, #16
 800fa72:	4628      	mov	r0, r5
 800fa74:	f7fc fb58 	bl	800c128 <ucdr_deserialize_double>
 800fa78:	f104 0118 	add.w	r1, r4, #24
 800fa7c:	4628      	mov	r0, r5
 800fa7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa82:	f7fc bb51 	b.w	800c128 <ucdr_deserialize_double>
 800fa86:	4608      	mov	r0, r1
 800fa88:	bd38      	pop	{r3, r4, r5, pc}
 800fa8a:	bf00      	nop

0800fa8c <_Quaternion__cdr_serialize>:
 800fa8c:	b1c0      	cbz	r0, 800fac0 <_Quaternion__cdr_serialize+0x34>
 800fa8e:	b538      	push	{r3, r4, r5, lr}
 800fa90:	ed90 0b00 	vldr	d0, [r0]
 800fa94:	460d      	mov	r5, r1
 800fa96:	4604      	mov	r4, r0
 800fa98:	4608      	mov	r0, r1
 800fa9a:	f7fc f9a3 	bl	800bde4 <ucdr_serialize_double>
 800fa9e:	ed94 0b02 	vldr	d0, [r4, #8]
 800faa2:	4628      	mov	r0, r5
 800faa4:	f7fc f99e 	bl	800bde4 <ucdr_serialize_double>
 800faa8:	ed94 0b04 	vldr	d0, [r4, #16]
 800faac:	4628      	mov	r0, r5
 800faae:	f7fc f999 	bl	800bde4 <ucdr_serialize_double>
 800fab2:	ed94 0b06 	vldr	d0, [r4, #24]
 800fab6:	4628      	mov	r0, r5
 800fab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fabc:	f7fc b992 	b.w	800bde4 <ucdr_serialize_double>
 800fac0:	4770      	bx	lr
 800fac2:	bf00      	nop

0800fac4 <_Quaternion__get_serialized_size>:
 800fac4:	b1d0      	cbz	r0, 800fafc <_Quaternion__get_serialized_size+0x38>
 800fac6:	b538      	push	{r3, r4, r5, lr}
 800fac8:	2108      	movs	r1, #8
 800faca:	2000      	movs	r0, #0
 800facc:	f7fc fd18 	bl	800c500 <ucdr_alignment>
 800fad0:	f100 0508 	add.w	r5, r0, #8
 800fad4:	2108      	movs	r1, #8
 800fad6:	4628      	mov	r0, r5
 800fad8:	f7fc fd12 	bl	800c500 <ucdr_alignment>
 800fadc:	f100 0408 	add.w	r4, r0, #8
 800fae0:	442c      	add	r4, r5
 800fae2:	2108      	movs	r1, #8
 800fae4:	4620      	mov	r0, r4
 800fae6:	f7fc fd0b 	bl	800c500 <ucdr_alignment>
 800faea:	3008      	adds	r0, #8
 800faec:	4404      	add	r4, r0
 800faee:	2108      	movs	r1, #8
 800faf0:	4620      	mov	r0, r4
 800faf2:	f7fc fd05 	bl	800c500 <ucdr_alignment>
 800faf6:	3008      	adds	r0, #8
 800faf8:	4420      	add	r0, r4
 800fafa:	bd38      	pop	{r3, r4, r5, pc}
 800fafc:	4770      	bx	lr
 800fafe:	bf00      	nop

0800fb00 <_Quaternion__max_serialized_size>:
 800fb00:	b538      	push	{r3, r4, r5, lr}
 800fb02:	2108      	movs	r1, #8
 800fb04:	2000      	movs	r0, #0
 800fb06:	f7fc fcfb 	bl	800c500 <ucdr_alignment>
 800fb0a:	f100 0508 	add.w	r5, r0, #8
 800fb0e:	2108      	movs	r1, #8
 800fb10:	4628      	mov	r0, r5
 800fb12:	f7fc fcf5 	bl	800c500 <ucdr_alignment>
 800fb16:	f100 0408 	add.w	r4, r0, #8
 800fb1a:	442c      	add	r4, r5
 800fb1c:	2108      	movs	r1, #8
 800fb1e:	4620      	mov	r0, r4
 800fb20:	f7fc fcee 	bl	800c500 <ucdr_alignment>
 800fb24:	3008      	adds	r0, #8
 800fb26:	4404      	add	r4, r0
 800fb28:	2108      	movs	r1, #8
 800fb2a:	4620      	mov	r0, r4
 800fb2c:	f7fc fce8 	bl	800c500 <ucdr_alignment>
 800fb30:	3008      	adds	r0, #8
 800fb32:	4420      	add	r0, r4
 800fb34:	bd38      	pop	{r3, r4, r5, pc}
 800fb36:	bf00      	nop

0800fb38 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800fb38:	b570      	push	{r4, r5, r6, lr}
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	460c      	mov	r4, r1
 800fb3e:	7003      	strb	r3, [r0, #0]
 800fb40:	2108      	movs	r1, #8
 800fb42:	4620      	mov	r0, r4
 800fb44:	f7fc fcdc 	bl	800c500 <ucdr_alignment>
 800fb48:	f104 0508 	add.w	r5, r4, #8
 800fb4c:	1946      	adds	r6, r0, r5
 800fb4e:	2108      	movs	r1, #8
 800fb50:	4630      	mov	r0, r6
 800fb52:	f7fc fcd5 	bl	800c500 <ucdr_alignment>
 800fb56:	f100 0508 	add.w	r5, r0, #8
 800fb5a:	4435      	add	r5, r6
 800fb5c:	2108      	movs	r1, #8
 800fb5e:	4628      	mov	r0, r5
 800fb60:	f7fc fcce 	bl	800c500 <ucdr_alignment>
 800fb64:	3008      	adds	r0, #8
 800fb66:	4405      	add	r5, r0
 800fb68:	2108      	movs	r1, #8
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	f7fc fcc8 	bl	800c500 <ucdr_alignment>
 800fb70:	f1c4 0408 	rsb	r4, r4, #8
 800fb74:	4420      	add	r0, r4
 800fb76:	4428      	add	r0, r5
 800fb78:	bd70      	pop	{r4, r5, r6, pc}
 800fb7a:	bf00      	nop

0800fb7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800fb7c:	4800      	ldr	r0, [pc, #0]	@ (800fb80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800fb7e:	4770      	bx	lr
 800fb80:	2000098c 	.word	0x2000098c

0800fb84 <imu_interfaces__srv__ImuCalibration_Request__init>:
 800fb84:	b538      	push	{r3, r4, r5, lr}
 800fb86:	4604      	mov	r4, r0
 800fb88:	b128      	cbz	r0, 800fb96 <imu_interfaces__srv__ImuCalibration_Request__init+0x12>
 800fb8a:	f007 ff3d 	bl	8017a08 <sensor_msgs__msg__Imu__init>
 800fb8e:	4605      	mov	r5, r0
 800fb90:	b120      	cbz	r0, 800fb9c <imu_interfaces__srv__ImuCalibration_Request__init+0x18>
 800fb92:	4628      	mov	r0, r5
 800fb94:	bd38      	pop	{r3, r4, r5, pc}
 800fb96:	4605      	mov	r5, r0
 800fb98:	4628      	mov	r0, r5
 800fb9a:	bd38      	pop	{r3, r4, r5, pc}
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	f007 ff89 	bl	8017ab4 <sensor_msgs__msg__Imu__fini>
 800fba2:	4628      	mov	r0, r5
 800fba4:	bd38      	pop	{r3, r4, r5, pc}
 800fba6:	bf00      	nop

0800fba8 <imu_interfaces__srv__ImuCalibration_Request__fini>:
 800fba8:	b108      	cbz	r0, 800fbae <imu_interfaces__srv__ImuCalibration_Request__fini+0x6>
 800fbaa:	f007 bf83 	b.w	8017ab4 <sensor_msgs__msg__Imu__fini>
 800fbae:	4770      	bx	lr

0800fbb0 <imu_interfaces__srv__ImuCalibration_Response__init>:
 800fbb0:	3800      	subs	r0, #0
 800fbb2:	bf18      	it	ne
 800fbb4:	2001      	movne	r0, #1
 800fbb6:	4770      	bx	lr

0800fbb8 <imu_interfaces__srv__ImuCalibration_Response__fini>:
 800fbb8:	4770      	bx	lr
 800fbba:	bf00      	nop

0800fbbc <ucdr_serialize_endian_array_char>:
 800fbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbc0:	4619      	mov	r1, r3
 800fbc2:	461f      	mov	r7, r3
 800fbc4:	4605      	mov	r5, r0
 800fbc6:	4690      	mov	r8, r2
 800fbc8:	f7fc fc42 	bl	800c450 <ucdr_check_buffer_available_for>
 800fbcc:	b9e0      	cbnz	r0, 800fc08 <ucdr_serialize_endian_array_char+0x4c>
 800fbce:	463e      	mov	r6, r7
 800fbd0:	e009      	b.n	800fbe6 <ucdr_serialize_endian_array_char+0x2a>
 800fbd2:	68a8      	ldr	r0, [r5, #8]
 800fbd4:	f009 ff2f 	bl	8019a36 <memcpy>
 800fbd8:	68ab      	ldr	r3, [r5, #8]
 800fbda:	6928      	ldr	r0, [r5, #16]
 800fbdc:	4423      	add	r3, r4
 800fbde:	4420      	add	r0, r4
 800fbe0:	1b36      	subs	r6, r6, r4
 800fbe2:	60ab      	str	r3, [r5, #8]
 800fbe4:	6128      	str	r0, [r5, #16]
 800fbe6:	4631      	mov	r1, r6
 800fbe8:	2201      	movs	r2, #1
 800fbea:	4628      	mov	r0, r5
 800fbec:	f7fc fcb8 	bl	800c560 <ucdr_check_final_buffer_behavior_array>
 800fbf0:	1bb9      	subs	r1, r7, r6
 800fbf2:	4441      	add	r1, r8
 800fbf4:	4604      	mov	r4, r0
 800fbf6:	4602      	mov	r2, r0
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	d1ea      	bne.n	800fbd2 <ucdr_serialize_endian_array_char+0x16>
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	7da8      	ldrb	r0, [r5, #22]
 800fc00:	756b      	strb	r3, [r5, #21]
 800fc02:	4058      	eors	r0, r3
 800fc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc08:	463a      	mov	r2, r7
 800fc0a:	68a8      	ldr	r0, [r5, #8]
 800fc0c:	4641      	mov	r1, r8
 800fc0e:	f009 ff12 	bl	8019a36 <memcpy>
 800fc12:	68aa      	ldr	r2, [r5, #8]
 800fc14:	692b      	ldr	r3, [r5, #16]
 800fc16:	443a      	add	r2, r7
 800fc18:	443b      	add	r3, r7
 800fc1a:	60aa      	str	r2, [r5, #8]
 800fc1c:	612b      	str	r3, [r5, #16]
 800fc1e:	e7ed      	b.n	800fbfc <ucdr_serialize_endian_array_char+0x40>

0800fc20 <ucdr_deserialize_endian_array_char>:
 800fc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc24:	4619      	mov	r1, r3
 800fc26:	461f      	mov	r7, r3
 800fc28:	4605      	mov	r5, r0
 800fc2a:	4690      	mov	r8, r2
 800fc2c:	f7fc fc10 	bl	800c450 <ucdr_check_buffer_available_for>
 800fc30:	b9e0      	cbnz	r0, 800fc6c <ucdr_deserialize_endian_array_char+0x4c>
 800fc32:	463e      	mov	r6, r7
 800fc34:	e009      	b.n	800fc4a <ucdr_deserialize_endian_array_char+0x2a>
 800fc36:	68a9      	ldr	r1, [r5, #8]
 800fc38:	f009 fefd 	bl	8019a36 <memcpy>
 800fc3c:	68ab      	ldr	r3, [r5, #8]
 800fc3e:	6928      	ldr	r0, [r5, #16]
 800fc40:	4423      	add	r3, r4
 800fc42:	4420      	add	r0, r4
 800fc44:	1b36      	subs	r6, r6, r4
 800fc46:	60ab      	str	r3, [r5, #8]
 800fc48:	6128      	str	r0, [r5, #16]
 800fc4a:	2201      	movs	r2, #1
 800fc4c:	4631      	mov	r1, r6
 800fc4e:	4628      	mov	r0, r5
 800fc50:	f7fc fc86 	bl	800c560 <ucdr_check_final_buffer_behavior_array>
 800fc54:	4604      	mov	r4, r0
 800fc56:	1bb8      	subs	r0, r7, r6
 800fc58:	4440      	add	r0, r8
 800fc5a:	4622      	mov	r2, r4
 800fc5c:	2c00      	cmp	r4, #0
 800fc5e:	d1ea      	bne.n	800fc36 <ucdr_deserialize_endian_array_char+0x16>
 800fc60:	2301      	movs	r3, #1
 800fc62:	7da8      	ldrb	r0, [r5, #22]
 800fc64:	756b      	strb	r3, [r5, #21]
 800fc66:	4058      	eors	r0, r3
 800fc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc6c:	463a      	mov	r2, r7
 800fc6e:	68a9      	ldr	r1, [r5, #8]
 800fc70:	4640      	mov	r0, r8
 800fc72:	f009 fee0 	bl	8019a36 <memcpy>
 800fc76:	68aa      	ldr	r2, [r5, #8]
 800fc78:	692b      	ldr	r3, [r5, #16]
 800fc7a:	443a      	add	r2, r7
 800fc7c:	443b      	add	r3, r7
 800fc7e:	60aa      	str	r2, [r5, #8]
 800fc80:	612b      	str	r3, [r5, #16]
 800fc82:	e7ed      	b.n	800fc60 <ucdr_deserialize_endian_array_char+0x40>

0800fc84 <ucdr_serialize_array_uint8_t>:
 800fc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc88:	4688      	mov	r8, r1
 800fc8a:	4611      	mov	r1, r2
 800fc8c:	4617      	mov	r7, r2
 800fc8e:	4605      	mov	r5, r0
 800fc90:	f7fc fbde 	bl	800c450 <ucdr_check_buffer_available_for>
 800fc94:	b9e0      	cbnz	r0, 800fcd0 <ucdr_serialize_array_uint8_t+0x4c>
 800fc96:	463e      	mov	r6, r7
 800fc98:	e009      	b.n	800fcae <ucdr_serialize_array_uint8_t+0x2a>
 800fc9a:	68a8      	ldr	r0, [r5, #8]
 800fc9c:	f009 fecb 	bl	8019a36 <memcpy>
 800fca0:	68aa      	ldr	r2, [r5, #8]
 800fca2:	692b      	ldr	r3, [r5, #16]
 800fca4:	4422      	add	r2, r4
 800fca6:	4423      	add	r3, r4
 800fca8:	1b36      	subs	r6, r6, r4
 800fcaa:	60aa      	str	r2, [r5, #8]
 800fcac:	612b      	str	r3, [r5, #16]
 800fcae:	4631      	mov	r1, r6
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	4628      	mov	r0, r5
 800fcb4:	f7fc fc54 	bl	800c560 <ucdr_check_final_buffer_behavior_array>
 800fcb8:	1bb9      	subs	r1, r7, r6
 800fcba:	4441      	add	r1, r8
 800fcbc:	4604      	mov	r4, r0
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	d1ea      	bne.n	800fc9a <ucdr_serialize_array_uint8_t+0x16>
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	7da8      	ldrb	r0, [r5, #22]
 800fcc8:	756b      	strb	r3, [r5, #21]
 800fcca:	4058      	eors	r0, r3
 800fccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcd0:	463a      	mov	r2, r7
 800fcd2:	68a8      	ldr	r0, [r5, #8]
 800fcd4:	4641      	mov	r1, r8
 800fcd6:	f009 feae 	bl	8019a36 <memcpy>
 800fcda:	68aa      	ldr	r2, [r5, #8]
 800fcdc:	692b      	ldr	r3, [r5, #16]
 800fcde:	443a      	add	r2, r7
 800fce0:	443b      	add	r3, r7
 800fce2:	60aa      	str	r2, [r5, #8]
 800fce4:	612b      	str	r3, [r5, #16]
 800fce6:	e7ed      	b.n	800fcc4 <ucdr_serialize_array_uint8_t+0x40>

0800fce8 <ucdr_serialize_endian_array_uint8_t>:
 800fce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcec:	4619      	mov	r1, r3
 800fcee:	461f      	mov	r7, r3
 800fcf0:	4605      	mov	r5, r0
 800fcf2:	4690      	mov	r8, r2
 800fcf4:	f7fc fbac 	bl	800c450 <ucdr_check_buffer_available_for>
 800fcf8:	b9e0      	cbnz	r0, 800fd34 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800fcfa:	463e      	mov	r6, r7
 800fcfc:	e009      	b.n	800fd12 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800fcfe:	68a8      	ldr	r0, [r5, #8]
 800fd00:	f009 fe99 	bl	8019a36 <memcpy>
 800fd04:	68ab      	ldr	r3, [r5, #8]
 800fd06:	6928      	ldr	r0, [r5, #16]
 800fd08:	4423      	add	r3, r4
 800fd0a:	4420      	add	r0, r4
 800fd0c:	1b36      	subs	r6, r6, r4
 800fd0e:	60ab      	str	r3, [r5, #8]
 800fd10:	6128      	str	r0, [r5, #16]
 800fd12:	4631      	mov	r1, r6
 800fd14:	2201      	movs	r2, #1
 800fd16:	4628      	mov	r0, r5
 800fd18:	f7fc fc22 	bl	800c560 <ucdr_check_final_buffer_behavior_array>
 800fd1c:	1bb9      	subs	r1, r7, r6
 800fd1e:	4441      	add	r1, r8
 800fd20:	4604      	mov	r4, r0
 800fd22:	4602      	mov	r2, r0
 800fd24:	2800      	cmp	r0, #0
 800fd26:	d1ea      	bne.n	800fcfe <ucdr_serialize_endian_array_uint8_t+0x16>
 800fd28:	2301      	movs	r3, #1
 800fd2a:	7da8      	ldrb	r0, [r5, #22]
 800fd2c:	756b      	strb	r3, [r5, #21]
 800fd2e:	4058      	eors	r0, r3
 800fd30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd34:	463a      	mov	r2, r7
 800fd36:	68a8      	ldr	r0, [r5, #8]
 800fd38:	4641      	mov	r1, r8
 800fd3a:	f009 fe7c 	bl	8019a36 <memcpy>
 800fd3e:	68aa      	ldr	r2, [r5, #8]
 800fd40:	692b      	ldr	r3, [r5, #16]
 800fd42:	443a      	add	r2, r7
 800fd44:	443b      	add	r3, r7
 800fd46:	60aa      	str	r2, [r5, #8]
 800fd48:	612b      	str	r3, [r5, #16]
 800fd4a:	e7ed      	b.n	800fd28 <ucdr_serialize_endian_array_uint8_t+0x40>

0800fd4c <ucdr_deserialize_array_uint8_t>:
 800fd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd50:	4688      	mov	r8, r1
 800fd52:	4611      	mov	r1, r2
 800fd54:	4617      	mov	r7, r2
 800fd56:	4605      	mov	r5, r0
 800fd58:	f7fc fb7a 	bl	800c450 <ucdr_check_buffer_available_for>
 800fd5c:	b9e0      	cbnz	r0, 800fd98 <ucdr_deserialize_array_uint8_t+0x4c>
 800fd5e:	463e      	mov	r6, r7
 800fd60:	e009      	b.n	800fd76 <ucdr_deserialize_array_uint8_t+0x2a>
 800fd62:	68a9      	ldr	r1, [r5, #8]
 800fd64:	f009 fe67 	bl	8019a36 <memcpy>
 800fd68:	68aa      	ldr	r2, [r5, #8]
 800fd6a:	692b      	ldr	r3, [r5, #16]
 800fd6c:	4422      	add	r2, r4
 800fd6e:	4423      	add	r3, r4
 800fd70:	1b36      	subs	r6, r6, r4
 800fd72:	60aa      	str	r2, [r5, #8]
 800fd74:	612b      	str	r3, [r5, #16]
 800fd76:	2201      	movs	r2, #1
 800fd78:	4631      	mov	r1, r6
 800fd7a:	4628      	mov	r0, r5
 800fd7c:	f7fc fbf0 	bl	800c560 <ucdr_check_final_buffer_behavior_array>
 800fd80:	4604      	mov	r4, r0
 800fd82:	1bb8      	subs	r0, r7, r6
 800fd84:	4440      	add	r0, r8
 800fd86:	4622      	mov	r2, r4
 800fd88:	2c00      	cmp	r4, #0
 800fd8a:	d1ea      	bne.n	800fd62 <ucdr_deserialize_array_uint8_t+0x16>
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	7da8      	ldrb	r0, [r5, #22]
 800fd90:	756b      	strb	r3, [r5, #21]
 800fd92:	4058      	eors	r0, r3
 800fd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd98:	463a      	mov	r2, r7
 800fd9a:	68a9      	ldr	r1, [r5, #8]
 800fd9c:	4640      	mov	r0, r8
 800fd9e:	f009 fe4a 	bl	8019a36 <memcpy>
 800fda2:	68aa      	ldr	r2, [r5, #8]
 800fda4:	692b      	ldr	r3, [r5, #16]
 800fda6:	443a      	add	r2, r7
 800fda8:	443b      	add	r3, r7
 800fdaa:	60aa      	str	r2, [r5, #8]
 800fdac:	612b      	str	r3, [r5, #16]
 800fdae:	e7ed      	b.n	800fd8c <ucdr_deserialize_array_uint8_t+0x40>

0800fdb0 <ucdr_deserialize_endian_array_uint8_t>:
 800fdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	461f      	mov	r7, r3
 800fdb8:	4605      	mov	r5, r0
 800fdba:	4690      	mov	r8, r2
 800fdbc:	f7fc fb48 	bl	800c450 <ucdr_check_buffer_available_for>
 800fdc0:	b9e0      	cbnz	r0, 800fdfc <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800fdc2:	463e      	mov	r6, r7
 800fdc4:	e009      	b.n	800fdda <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800fdc6:	68a9      	ldr	r1, [r5, #8]
 800fdc8:	f009 fe35 	bl	8019a36 <memcpy>
 800fdcc:	68ab      	ldr	r3, [r5, #8]
 800fdce:	6928      	ldr	r0, [r5, #16]
 800fdd0:	4423      	add	r3, r4
 800fdd2:	4420      	add	r0, r4
 800fdd4:	1b36      	subs	r6, r6, r4
 800fdd6:	60ab      	str	r3, [r5, #8]
 800fdd8:	6128      	str	r0, [r5, #16]
 800fdda:	2201      	movs	r2, #1
 800fddc:	4631      	mov	r1, r6
 800fdde:	4628      	mov	r0, r5
 800fde0:	f7fc fbbe 	bl	800c560 <ucdr_check_final_buffer_behavior_array>
 800fde4:	4604      	mov	r4, r0
 800fde6:	1bb8      	subs	r0, r7, r6
 800fde8:	4440      	add	r0, r8
 800fdea:	4622      	mov	r2, r4
 800fdec:	2c00      	cmp	r4, #0
 800fdee:	d1ea      	bne.n	800fdc6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	7da8      	ldrb	r0, [r5, #22]
 800fdf4:	756b      	strb	r3, [r5, #21]
 800fdf6:	4058      	eors	r0, r3
 800fdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdfc:	463a      	mov	r2, r7
 800fdfe:	68a9      	ldr	r1, [r5, #8]
 800fe00:	4640      	mov	r0, r8
 800fe02:	f009 fe18 	bl	8019a36 <memcpy>
 800fe06:	68aa      	ldr	r2, [r5, #8]
 800fe08:	692b      	ldr	r3, [r5, #16]
 800fe0a:	443a      	add	r2, r7
 800fe0c:	443b      	add	r3, r7
 800fe0e:	60aa      	str	r2, [r5, #8]
 800fe10:	612b      	str	r3, [r5, #16]
 800fe12:	e7ed      	b.n	800fdf0 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800fe14 <ucdr_serialize_array_double>:
 800fe14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe18:	460e      	mov	r6, r1
 800fe1a:	2108      	movs	r1, #8
 800fe1c:	4604      	mov	r4, r0
 800fe1e:	4617      	mov	r7, r2
 800fe20:	f7fc fb76 	bl	800c510 <ucdr_buffer_alignment>
 800fe24:	4601      	mov	r1, r0
 800fe26:	4620      	mov	r0, r4
 800fe28:	7d65      	ldrb	r5, [r4, #21]
 800fe2a:	f7fc fbb5 	bl	800c598 <ucdr_advance_buffer>
 800fe2e:	7d21      	ldrb	r1, [r4, #20]
 800fe30:	7565      	strb	r5, [r4, #21]
 800fe32:	2901      	cmp	r1, #1
 800fe34:	d010      	beq.n	800fe58 <ucdr_serialize_array_double+0x44>
 800fe36:	b157      	cbz	r7, 800fe4e <ucdr_serialize_array_double+0x3a>
 800fe38:	2500      	movs	r5, #0
 800fe3a:	e000      	b.n	800fe3e <ucdr_serialize_array_double+0x2a>
 800fe3c:	7d21      	ldrb	r1, [r4, #20]
 800fe3e:	ecb6 0b02 	vldmia	r6!, {d0}
 800fe42:	4620      	mov	r0, r4
 800fe44:	3501      	adds	r5, #1
 800fe46:	f7fc f89d 	bl	800bf84 <ucdr_serialize_endian_double>
 800fe4a:	42af      	cmp	r7, r5
 800fe4c:	d1f6      	bne.n	800fe3c <ucdr_serialize_array_double+0x28>
 800fe4e:	7da0      	ldrb	r0, [r4, #22]
 800fe50:	f080 0001 	eor.w	r0, r0, #1
 800fe54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe58:	00ff      	lsls	r7, r7, #3
 800fe5a:	4639      	mov	r1, r7
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	f7fc faf7 	bl	800c450 <ucdr_check_buffer_available_for>
 800fe62:	b9f8      	cbnz	r0, 800fea4 <ucdr_serialize_array_double+0x90>
 800fe64:	46b8      	mov	r8, r7
 800fe66:	e00a      	b.n	800fe7e <ucdr_serialize_array_double+0x6a>
 800fe68:	68a0      	ldr	r0, [r4, #8]
 800fe6a:	f009 fde4 	bl	8019a36 <memcpy>
 800fe6e:	68a2      	ldr	r2, [r4, #8]
 800fe70:	6923      	ldr	r3, [r4, #16]
 800fe72:	442a      	add	r2, r5
 800fe74:	442b      	add	r3, r5
 800fe76:	eba8 0805 	sub.w	r8, r8, r5
 800fe7a:	60a2      	str	r2, [r4, #8]
 800fe7c:	6123      	str	r3, [r4, #16]
 800fe7e:	4641      	mov	r1, r8
 800fe80:	2208      	movs	r2, #8
 800fe82:	4620      	mov	r0, r4
 800fe84:	f7fc fb6c 	bl	800c560 <ucdr_check_final_buffer_behavior_array>
 800fe88:	eba7 0108 	sub.w	r1, r7, r8
 800fe8c:	4431      	add	r1, r6
 800fe8e:	4605      	mov	r5, r0
 800fe90:	4602      	mov	r2, r0
 800fe92:	2800      	cmp	r0, #0
 800fe94:	d1e8      	bne.n	800fe68 <ucdr_serialize_array_double+0x54>
 800fe96:	7da0      	ldrb	r0, [r4, #22]
 800fe98:	2308      	movs	r3, #8
 800fe9a:	7563      	strb	r3, [r4, #21]
 800fe9c:	f080 0001 	eor.w	r0, r0, #1
 800fea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fea4:	463a      	mov	r2, r7
 800fea6:	68a0      	ldr	r0, [r4, #8]
 800fea8:	4631      	mov	r1, r6
 800feaa:	f009 fdc4 	bl	8019a36 <memcpy>
 800feae:	68a2      	ldr	r2, [r4, #8]
 800feb0:	6923      	ldr	r3, [r4, #16]
 800feb2:	443a      	add	r2, r7
 800feb4:	441f      	add	r7, r3
 800feb6:	60a2      	str	r2, [r4, #8]
 800feb8:	6127      	str	r7, [r4, #16]
 800feba:	e7ec      	b.n	800fe96 <ucdr_serialize_array_double+0x82>

0800febc <ucdr_deserialize_array_double>:
 800febc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fec0:	460e      	mov	r6, r1
 800fec2:	2108      	movs	r1, #8
 800fec4:	4604      	mov	r4, r0
 800fec6:	4617      	mov	r7, r2
 800fec8:	f7fc fb22 	bl	800c510 <ucdr_buffer_alignment>
 800fecc:	4601      	mov	r1, r0
 800fece:	4620      	mov	r0, r4
 800fed0:	7d65      	ldrb	r5, [r4, #21]
 800fed2:	f7fc fb61 	bl	800c598 <ucdr_advance_buffer>
 800fed6:	7d21      	ldrb	r1, [r4, #20]
 800fed8:	7565      	strb	r5, [r4, #21]
 800feda:	2901      	cmp	r1, #1
 800fedc:	d011      	beq.n	800ff02 <ucdr_deserialize_array_double+0x46>
 800fede:	b15f      	cbz	r7, 800fef8 <ucdr_deserialize_array_double+0x3c>
 800fee0:	2500      	movs	r5, #0
 800fee2:	e000      	b.n	800fee6 <ucdr_deserialize_array_double+0x2a>
 800fee4:	7d21      	ldrb	r1, [r4, #20]
 800fee6:	4632      	mov	r2, r6
 800fee8:	4620      	mov	r0, r4
 800feea:	3501      	adds	r5, #1
 800feec:	f7fc f9e2 	bl	800c2b4 <ucdr_deserialize_endian_double>
 800fef0:	42af      	cmp	r7, r5
 800fef2:	f106 0608 	add.w	r6, r6, #8
 800fef6:	d1f5      	bne.n	800fee4 <ucdr_deserialize_array_double+0x28>
 800fef8:	7da0      	ldrb	r0, [r4, #22]
 800fefa:	f080 0001 	eor.w	r0, r0, #1
 800fefe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff02:	00ff      	lsls	r7, r7, #3
 800ff04:	4639      	mov	r1, r7
 800ff06:	4620      	mov	r0, r4
 800ff08:	f7fc faa2 	bl	800c450 <ucdr_check_buffer_available_for>
 800ff0c:	b9f8      	cbnz	r0, 800ff4e <ucdr_deserialize_array_double+0x92>
 800ff0e:	46b8      	mov	r8, r7
 800ff10:	e00a      	b.n	800ff28 <ucdr_deserialize_array_double+0x6c>
 800ff12:	68a1      	ldr	r1, [r4, #8]
 800ff14:	f009 fd8f 	bl	8019a36 <memcpy>
 800ff18:	68a2      	ldr	r2, [r4, #8]
 800ff1a:	6923      	ldr	r3, [r4, #16]
 800ff1c:	442a      	add	r2, r5
 800ff1e:	442b      	add	r3, r5
 800ff20:	eba8 0805 	sub.w	r8, r8, r5
 800ff24:	60a2      	str	r2, [r4, #8]
 800ff26:	6123      	str	r3, [r4, #16]
 800ff28:	2208      	movs	r2, #8
 800ff2a:	4641      	mov	r1, r8
 800ff2c:	4620      	mov	r0, r4
 800ff2e:	f7fc fb17 	bl	800c560 <ucdr_check_final_buffer_behavior_array>
 800ff32:	4605      	mov	r5, r0
 800ff34:	eba7 0008 	sub.w	r0, r7, r8
 800ff38:	4430      	add	r0, r6
 800ff3a:	462a      	mov	r2, r5
 800ff3c:	2d00      	cmp	r5, #0
 800ff3e:	d1e8      	bne.n	800ff12 <ucdr_deserialize_array_double+0x56>
 800ff40:	7da0      	ldrb	r0, [r4, #22]
 800ff42:	2308      	movs	r3, #8
 800ff44:	7563      	strb	r3, [r4, #21]
 800ff46:	f080 0001 	eor.w	r0, r0, #1
 800ff4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff4e:	463a      	mov	r2, r7
 800ff50:	68a1      	ldr	r1, [r4, #8]
 800ff52:	4630      	mov	r0, r6
 800ff54:	f009 fd6f 	bl	8019a36 <memcpy>
 800ff58:	68a2      	ldr	r2, [r4, #8]
 800ff5a:	6923      	ldr	r3, [r4, #16]
 800ff5c:	443a      	add	r2, r7
 800ff5e:	441f      	add	r7, r3
 800ff60:	60a2      	str	r2, [r4, #8]
 800ff62:	6127      	str	r7, [r4, #16]
 800ff64:	e7ec      	b.n	800ff40 <ucdr_deserialize_array_double+0x84>
 800ff66:	bf00      	nop

0800ff68 <ucdr_serialize_sequence_char>:
 800ff68:	b570      	push	{r4, r5, r6, lr}
 800ff6a:	4615      	mov	r5, r2
 800ff6c:	460e      	mov	r6, r1
 800ff6e:	7d01      	ldrb	r1, [r0, #20]
 800ff70:	4604      	mov	r4, r0
 800ff72:	f7fb fa8d 	bl	800b490 <ucdr_serialize_endian_uint32_t>
 800ff76:	b90d      	cbnz	r5, 800ff7c <ucdr_serialize_sequence_char+0x14>
 800ff78:	2001      	movs	r0, #1
 800ff7a:	bd70      	pop	{r4, r5, r6, pc}
 800ff7c:	7d21      	ldrb	r1, [r4, #20]
 800ff7e:	462b      	mov	r3, r5
 800ff80:	4632      	mov	r2, r6
 800ff82:	4620      	mov	r0, r4
 800ff84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff88:	f7ff be18 	b.w	800fbbc <ucdr_serialize_endian_array_char>

0800ff8c <ucdr_deserialize_sequence_char>:
 800ff8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff90:	461d      	mov	r5, r3
 800ff92:	4616      	mov	r6, r2
 800ff94:	460f      	mov	r7, r1
 800ff96:	461a      	mov	r2, r3
 800ff98:	7d01      	ldrb	r1, [r0, #20]
 800ff9a:	4604      	mov	r4, r0
 800ff9c:	f7fb fba0 	bl	800b6e0 <ucdr_deserialize_endian_uint32_t>
 800ffa0:	682b      	ldr	r3, [r5, #0]
 800ffa2:	429e      	cmp	r6, r3
 800ffa4:	bf3c      	itt	cc
 800ffa6:	2201      	movcc	r2, #1
 800ffa8:	75a2      	strbcc	r2, [r4, #22]
 800ffaa:	b913      	cbnz	r3, 800ffb2 <ucdr_deserialize_sequence_char+0x26>
 800ffac:	2001      	movs	r0, #1
 800ffae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffb2:	7d21      	ldrb	r1, [r4, #20]
 800ffb4:	463a      	mov	r2, r7
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffbc:	f7ff be30 	b.w	800fc20 <ucdr_deserialize_endian_array_char>

0800ffc0 <ucdr_serialize_sequence_uint8_t>:
 800ffc0:	b570      	push	{r4, r5, r6, lr}
 800ffc2:	4615      	mov	r5, r2
 800ffc4:	460e      	mov	r6, r1
 800ffc6:	7d01      	ldrb	r1, [r0, #20]
 800ffc8:	4604      	mov	r4, r0
 800ffca:	f7fb fa61 	bl	800b490 <ucdr_serialize_endian_uint32_t>
 800ffce:	b90d      	cbnz	r5, 800ffd4 <ucdr_serialize_sequence_uint8_t+0x14>
 800ffd0:	2001      	movs	r0, #1
 800ffd2:	bd70      	pop	{r4, r5, r6, pc}
 800ffd4:	7d21      	ldrb	r1, [r4, #20]
 800ffd6:	462b      	mov	r3, r5
 800ffd8:	4632      	mov	r2, r6
 800ffda:	4620      	mov	r0, r4
 800ffdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ffe0:	f7ff be82 	b.w	800fce8 <ucdr_serialize_endian_array_uint8_t>

0800ffe4 <ucdr_deserialize_sequence_uint8_t>:
 800ffe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffe8:	461d      	mov	r5, r3
 800ffea:	4616      	mov	r6, r2
 800ffec:	460f      	mov	r7, r1
 800ffee:	461a      	mov	r2, r3
 800fff0:	7d01      	ldrb	r1, [r0, #20]
 800fff2:	4604      	mov	r4, r0
 800fff4:	f7fb fb74 	bl	800b6e0 <ucdr_deserialize_endian_uint32_t>
 800fff8:	682b      	ldr	r3, [r5, #0]
 800fffa:	429e      	cmp	r6, r3
 800fffc:	bf3c      	itt	cc
 800fffe:	2201      	movcc	r2, #1
 8010000:	75a2      	strbcc	r2, [r4, #22]
 8010002:	b913      	cbnz	r3, 801000a <ucdr_deserialize_sequence_uint8_t+0x26>
 8010004:	2001      	movs	r0, #1
 8010006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801000a:	7d21      	ldrb	r1, [r4, #20]
 801000c:	463a      	mov	r2, r7
 801000e:	4620      	mov	r0, r4
 8010010:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010014:	f7ff becc 	b.w	800fdb0 <ucdr_deserialize_endian_array_uint8_t>

08010018 <uxr_buffer_delete_entity>:
 8010018:	b510      	push	{r4, lr}
 801001a:	2300      	movs	r3, #0
 801001c:	b08e      	sub	sp, #56	@ 0x38
 801001e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010022:	2303      	movs	r3, #3
 8010024:	9300      	str	r3, [sp, #0]
 8010026:	2204      	movs	r2, #4
 8010028:	ab06      	add	r3, sp, #24
 801002a:	4604      	mov	r4, r0
 801002c:	9103      	str	r1, [sp, #12]
 801002e:	f001 fb3d 	bl	80116ac <uxr_prepare_stream_to_write_submessage>
 8010032:	b918      	cbnz	r0, 801003c <uxr_buffer_delete_entity+0x24>
 8010034:	4604      	mov	r4, r0
 8010036:	4620      	mov	r0, r4
 8010038:	b00e      	add	sp, #56	@ 0x38
 801003a:	bd10      	pop	{r4, pc}
 801003c:	9902      	ldr	r1, [sp, #8]
 801003e:	aa05      	add	r2, sp, #20
 8010040:	4620      	mov	r0, r4
 8010042:	f001 fc69 	bl	8011918 <uxr_init_base_object_request>
 8010046:	a905      	add	r1, sp, #20
 8010048:	4604      	mov	r4, r0
 801004a:	a806      	add	r0, sp, #24
 801004c:	f003 fa94 	bl	8013578 <uxr_serialize_DELETE_Payload>
 8010050:	4620      	mov	r0, r4
 8010052:	b00e      	add	sp, #56	@ 0x38
 8010054:	bd10      	pop	{r4, pc}
 8010056:	bf00      	nop

08010058 <uxr_common_create_entity>:
 8010058:	b510      	push	{r4, lr}
 801005a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801005e:	b08c      	sub	sp, #48	@ 0x30
 8010060:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010064:	f1bc 0f01 	cmp.w	ip, #1
 8010068:	bf0c      	ite	eq
 801006a:	f003 0201 	andeq.w	r2, r3, #1
 801006e:	2200      	movne	r2, #0
 8010070:	330e      	adds	r3, #14
 8010072:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8010076:	9101      	str	r1, [sp, #4]
 8010078:	441a      	add	r2, r3
 801007a:	2301      	movs	r3, #1
 801007c:	9300      	str	r3, [sp, #0]
 801007e:	9903      	ldr	r1, [sp, #12]
 8010080:	ab04      	add	r3, sp, #16
 8010082:	b292      	uxth	r2, r2
 8010084:	4604      	mov	r4, r0
 8010086:	f001 fb11 	bl	80116ac <uxr_prepare_stream_to_write_submessage>
 801008a:	b918      	cbnz	r0, 8010094 <uxr_common_create_entity+0x3c>
 801008c:	4604      	mov	r4, r0
 801008e:	4620      	mov	r0, r4
 8010090:	b00c      	add	sp, #48	@ 0x30
 8010092:	bd10      	pop	{r4, pc}
 8010094:	9902      	ldr	r1, [sp, #8]
 8010096:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010098:	4620      	mov	r0, r4
 801009a:	f001 fc3d 	bl	8011918 <uxr_init_base_object_request>
 801009e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80100a0:	4604      	mov	r4, r0
 80100a2:	a804      	add	r0, sp, #16
 80100a4:	f003 f9c4 	bl	8013430 <uxr_serialize_CREATE_Payload>
 80100a8:	4620      	mov	r0, r4
 80100aa:	b00c      	add	sp, #48	@ 0x30
 80100ac:	bd10      	pop	{r4, pc}
 80100ae:	bf00      	nop

080100b0 <uxr_buffer_create_participant_bin>:
 80100b0:	b570      	push	{r4, r5, r6, lr}
 80100b2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80100b6:	ac11      	add	r4, sp, #68	@ 0x44
 80100b8:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80100bc:	2303      	movs	r3, #3
 80100be:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80100c2:	7223      	strb	r3, [r4, #8]
 80100c4:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80100c6:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80100ca:	2201      	movs	r2, #1
 80100cc:	2100      	movs	r1, #0
 80100ce:	4605      	mov	r5, r0
 80100d0:	7122      	strb	r2, [r4, #4]
 80100d2:	f88d 1014 	strb.w	r1, [sp, #20]
 80100d6:	b1cb      	cbz	r3, 801010c <uxr_buffer_create_participant_bin+0x5c>
 80100d8:	f88d 201c 	strb.w	r2, [sp, #28]
 80100dc:	9308      	str	r3, [sp, #32]
 80100de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80100e2:	a915      	add	r1, sp, #84	@ 0x54
 80100e4:	a809      	add	r0, sp, #36	@ 0x24
 80100e6:	f7fc fa07 	bl	800c4f8 <ucdr_init_buffer>
 80100ea:	a905      	add	r1, sp, #20
 80100ec:	a809      	add	r0, sp, #36	@ 0x24
 80100ee:	f002 fe39 	bl	8012d64 <uxr_serialize_OBJK_DomainParticipant_Binary>
 80100f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80100f4:	9600      	str	r6, [sp, #0]
 80100f6:	9401      	str	r4, [sp, #4]
 80100f8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80100fc:	60e3      	str	r3, [r4, #12]
 80100fe:	4628      	mov	r0, r5
 8010100:	b29b      	uxth	r3, r3
 8010102:	f7ff ffa9 	bl	8010058 <uxr_common_create_entity>
 8010106:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 801010a:	bd70      	pop	{r4, r5, r6, pc}
 801010c:	f88d 301c 	strb.w	r3, [sp, #28]
 8010110:	e7e5      	b.n	80100de <uxr_buffer_create_participant_bin+0x2e>
 8010112:	bf00      	nop

08010114 <uxr_buffer_create_topic_bin>:
 8010114:	b570      	push	{r4, r5, r6, lr}
 8010116:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 801011a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801011e:	9105      	str	r1, [sp, #20]
 8010120:	4605      	mov	r5, r0
 8010122:	a997      	add	r1, sp, #604	@ 0x25c
 8010124:	4618      	mov	r0, r3
 8010126:	2302      	movs	r3, #2
 8010128:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801012c:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8010130:	f000 f9ea 	bl	8010508 <uxr_object_id_to_raw>
 8010134:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8010136:	9306      	str	r3, [sp, #24]
 8010138:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 801013a:	930a      	str	r3, [sp, #40]	@ 0x28
 801013c:	2303      	movs	r3, #3
 801013e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010142:	2301      	movs	r3, #1
 8010144:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010148:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801014c:	a917      	add	r1, sp, #92	@ 0x5c
 801014e:	2300      	movs	r3, #0
 8010150:	a80b      	add	r0, sp, #44	@ 0x2c
 8010152:	f88d 301c 	strb.w	r3, [sp, #28]
 8010156:	f7fc f9cf 	bl	800c4f8 <ucdr_init_buffer>
 801015a:	a906      	add	r1, sp, #24
 801015c:	a80b      	add	r0, sp, #44	@ 0x2c
 801015e:	f002 fe23 	bl	8012da8 <uxr_serialize_OBJK_Topic_Binary>
 8010162:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010164:	9316      	str	r3, [sp, #88]	@ 0x58
 8010166:	ac13      	add	r4, sp, #76	@ 0x4c
 8010168:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801016c:	9600      	str	r6, [sp, #0]
 801016e:	9401      	str	r4, [sp, #4]
 8010170:	b29b      	uxth	r3, r3
 8010172:	4628      	mov	r0, r5
 8010174:	f7ff ff70 	bl	8010058 <uxr_common_create_entity>
 8010178:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 801017c:	bd70      	pop	{r4, r5, r6, pc}
 801017e:	bf00      	nop

08010180 <uxr_buffer_create_publisher_bin>:
 8010180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010182:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8010186:	4605      	mov	r5, r0
 8010188:	9105      	str	r1, [sp, #20]
 801018a:	4618      	mov	r0, r3
 801018c:	2603      	movs	r6, #3
 801018e:	a992      	add	r1, sp, #584	@ 0x248
 8010190:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010194:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8010198:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 801019c:	f000 f9b4 	bl	8010508 <uxr_object_id_to_raw>
 80101a0:	2300      	movs	r3, #0
 80101a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80101a6:	a912      	add	r1, sp, #72	@ 0x48
 80101a8:	a806      	add	r0, sp, #24
 80101aa:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80101ae:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80101b2:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 80101b6:	f7fc f99f 	bl	800c4f8 <ucdr_init_buffer>
 80101ba:	a993      	add	r1, sp, #588	@ 0x24c
 80101bc:	a806      	add	r0, sp, #24
 80101be:	f002 fea7 	bl	8012f10 <uxr_serialize_OBJK_Publisher_Binary>
 80101c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101c4:	9311      	str	r3, [sp, #68]	@ 0x44
 80101c6:	ac0e      	add	r4, sp, #56	@ 0x38
 80101c8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80101cc:	9700      	str	r7, [sp, #0]
 80101ce:	9401      	str	r4, [sp, #4]
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	4628      	mov	r0, r5
 80101d4:	f7ff ff40 	bl	8010058 <uxr_common_create_entity>
 80101d8:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 80101dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101de:	bf00      	nop

080101e0 <uxr_buffer_create_datawriter_bin>:
 80101e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101e4:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80101e8:	ac1d      	add	r4, sp, #116	@ 0x74
 80101ea:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80101ee:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 80101f2:	9105      	str	r1, [sp, #20]
 80101f4:	4606      	mov	r6, r0
 80101f6:	a9a1      	add	r1, sp, #644	@ 0x284
 80101f8:	4618      	mov	r0, r3
 80101fa:	2305      	movs	r3, #5
 80101fc:	7123      	strb	r3, [r4, #4]
 80101fe:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8010202:	2703      	movs	r7, #3
 8010204:	f000 f980 	bl	8010508 <uxr_object_id_to_raw>
 8010208:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 801020a:	7227      	strb	r7, [r4, #8]
 801020c:	a90e      	add	r1, sp, #56	@ 0x38
 801020e:	f000 f97b 	bl	8010508 <uxr_object_id_to_raw>
 8010212:	2300      	movs	r3, #0
 8010214:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010218:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 801021c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010220:	3d00      	subs	r5, #0
 8010222:	bf18      	it	ne
 8010224:	2501      	movne	r5, #1
 8010226:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801022a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801022e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010232:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010236:	2301      	movs	r3, #1
 8010238:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801023c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010240:	bb8a      	cbnz	r2, 80102a6 <uxr_buffer_create_datawriter_bin+0xc6>
 8010242:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010246:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801024a:	f04f 0c13 	mov.w	ip, #19
 801024e:	250b      	movs	r5, #11
 8010250:	2221      	movs	r2, #33	@ 0x21
 8010252:	2111      	movs	r1, #17
 8010254:	2009      	movs	r0, #9
 8010256:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801025a:	b923      	cbnz	r3, 8010266 <uxr_buffer_create_datawriter_bin+0x86>
 801025c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010260:	4672      	mov	r2, lr
 8010262:	4661      	mov	r1, ip
 8010264:	4628      	mov	r0, r5
 8010266:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801026a:	2b01      	cmp	r3, #1
 801026c:	d025      	beq.n	80102ba <uxr_buffer_create_datawriter_bin+0xda>
 801026e:	2b03      	cmp	r3, #3
 8010270:	d029      	beq.n	80102c6 <uxr_buffer_create_datawriter_bin+0xe6>
 8010272:	b32b      	cbz	r3, 80102c0 <uxr_buffer_create_datawriter_bin+0xe0>
 8010274:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010278:	a921      	add	r1, sp, #132	@ 0x84
 801027a:	a806      	add	r0, sp, #24
 801027c:	f7fc f93c 	bl	800c4f8 <ucdr_init_buffer>
 8010280:	a90e      	add	r1, sp, #56	@ 0x38
 8010282:	a806      	add	r0, sp, #24
 8010284:	f002 feba 	bl	8012ffc <uxr_serialize_OBJK_DataWriter_Binary>
 8010288:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801028a:	f8cd 8000 	str.w	r8, [sp]
 801028e:	9401      	str	r4, [sp, #4]
 8010290:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010294:	60e3      	str	r3, [r4, #12]
 8010296:	4630      	mov	r0, r6
 8010298:	b29b      	uxth	r3, r3
 801029a:	f7ff fedd 	bl	8010058 <uxr_common_create_entity>
 801029e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80102a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102a6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80102aa:	f04f 0c12 	mov.w	ip, #18
 80102ae:	250a      	movs	r5, #10
 80102b0:	2220      	movs	r2, #32
 80102b2:	2110      	movs	r1, #16
 80102b4:	2008      	movs	r0, #8
 80102b6:	2702      	movs	r7, #2
 80102b8:	e7cd      	b.n	8010256 <uxr_buffer_create_datawriter_bin+0x76>
 80102ba:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80102be:	e7d9      	b.n	8010274 <uxr_buffer_create_datawriter_bin+0x94>
 80102c0:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80102c4:	e7d6      	b.n	8010274 <uxr_buffer_create_datawriter_bin+0x94>
 80102c6:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80102ca:	e7d3      	b.n	8010274 <uxr_buffer_create_datawriter_bin+0x94>

080102cc <uxr_buffer_create_replier_bin>:
 80102cc:	b570      	push	{r4, r5, r6, lr}
 80102ce:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 80102d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80102d6:	9105      	str	r1, [sp, #20]
 80102d8:	4605      	mov	r5, r0
 80102da:	a999      	add	r1, sp, #612	@ 0x264
 80102dc:	4618      	mov	r0, r3
 80102de:	2308      	movs	r3, #8
 80102e0:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 80102e4:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 80102e8:	f000 f90e 	bl	8010508 <uxr_object_id_to_raw>
 80102ec:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 80102ee:	9306      	str	r3, [sp, #24]
 80102f0:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 80102f2:	9307      	str	r3, [sp, #28]
 80102f4:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 80102f6:	9308      	str	r3, [sp, #32]
 80102f8:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80102fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80102fc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80102fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8010300:	2301      	movs	r3, #1
 8010302:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010306:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801030a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801030e:	a919      	add	r1, sp, #100	@ 0x64
 8010310:	2303      	movs	r3, #3
 8010312:	a80d      	add	r0, sp, #52	@ 0x34
 8010314:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8010318:	f7fc f8ee 	bl	800c4f8 <ucdr_init_buffer>
 801031c:	a906      	add	r1, sp, #24
 801031e:	a80d      	add	r0, sp, #52	@ 0x34
 8010320:	f002 fe98 	bl	8013054 <uxr_serialize_OBJK_Replier_Binary>
 8010324:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010326:	9318      	str	r3, [sp, #96]	@ 0x60
 8010328:	ac15      	add	r4, sp, #84	@ 0x54
 801032a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801032e:	9600      	str	r6, [sp, #0]
 8010330:	9401      	str	r4, [sp, #4]
 8010332:	b29b      	uxth	r3, r3
 8010334:	4628      	mov	r0, r5
 8010336:	f7ff fe8f 	bl	8010058 <uxr_common_create_entity>
 801033a:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 801033e:	bd70      	pop	{r4, r5, r6, pc}

08010340 <get_custom_error>:
 8010340:	4b01      	ldr	r3, [pc, #4]	@ (8010348 <get_custom_error+0x8>)
 8010342:	7818      	ldrb	r0, [r3, #0]
 8010344:	4770      	bx	lr
 8010346:	bf00      	nop
 8010348:	2000b89c 	.word	0x2000b89c

0801034c <recv_custom_msg>:
 801034c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010350:	4693      	mov	fp, r2
 8010352:	b089      	sub	sp, #36	@ 0x24
 8010354:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8010358:	9305      	str	r3, [sp, #20]
 801035a:	468a      	mov	sl, r1
 801035c:	2100      	movs	r1, #0
 801035e:	4604      	mov	r4, r0
 8010360:	f88d 101e 	strb.w	r1, [sp, #30]
 8010364:	b322      	cbz	r2, 80103b0 <recv_custom_msg+0x64>
 8010366:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801036a:	f10d 081f 	add.w	r8, sp, #31
 801036e:	af05      	add	r7, sp, #20
 8010370:	f10d 061e 	add.w	r6, sp, #30
 8010374:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8010378:	e002      	b.n	8010380 <recv_custom_msg+0x34>
 801037a:	9b05      	ldr	r3, [sp, #20]
 801037c:	2b00      	cmp	r3, #0
 801037e:	dd0f      	ble.n	80103a0 <recv_custom_msg+0x54>
 8010380:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8010384:	4623      	mov	r3, r4
 8010386:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801038a:	e9cd 5600 	strd	r5, r6, [sp]
 801038e:	4622      	mov	r2, r4
 8010390:	4648      	mov	r0, r9
 8010392:	f001 fcef 	bl	8011d74 <uxr_read_framed_msg>
 8010396:	2800      	cmp	r0, #0
 8010398:	d0ef      	beq.n	801037a <recv_custom_msg+0x2e>
 801039a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801039e:	b1b3      	cbz	r3, 80103ce <recv_custom_msg+0x82>
 80103a0:	4b0f      	ldr	r3, [pc, #60]	@ (80103e0 <recv_custom_msg+0x94>)
 80103a2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80103a6:	701a      	strb	r2, [r3, #0]
 80103a8:	2000      	movs	r0, #0
 80103aa:	b009      	add	sp, #36	@ 0x24
 80103ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103b0:	f10d 021f 	add.w	r2, sp, #31
 80103b4:	9200      	str	r2, [sp, #0]
 80103b6:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80103ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80103be:	4601      	mov	r1, r0
 80103c0:	47a8      	blx	r5
 80103c2:	2800      	cmp	r0, #0
 80103c4:	d0ec      	beq.n	80103a0 <recv_custom_msg+0x54>
 80103c6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d1e8      	bne.n	80103a0 <recv_custom_msg+0x54>
 80103ce:	f8cb 0000 	str.w	r0, [fp]
 80103d2:	2001      	movs	r0, #1
 80103d4:	f8ca 4000 	str.w	r4, [sl]
 80103d8:	b009      	add	sp, #36	@ 0x24
 80103da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103de:	bf00      	nop
 80103e0:	2000b89c 	.word	0x2000b89c

080103e4 <send_custom_msg>:
 80103e4:	b530      	push	{r4, r5, lr}
 80103e6:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 80103ea:	b087      	sub	sp, #28
 80103ec:	4615      	mov	r5, r2
 80103ee:	b974      	cbnz	r4, 801040e <send_custom_msg+0x2a>
 80103f0:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 80103f4:	f10d 0317 	add.w	r3, sp, #23
 80103f8:	47a0      	blx	r4
 80103fa:	b108      	cbz	r0, 8010400 <send_custom_msg+0x1c>
 80103fc:	42a8      	cmp	r0, r5
 80103fe:	d015      	beq.n	801042c <send_custom_msg+0x48>
 8010400:	4b0c      	ldr	r3, [pc, #48]	@ (8010434 <send_custom_msg+0x50>)
 8010402:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010406:	701a      	strb	r2, [r3, #0]
 8010408:	2000      	movs	r0, #0
 801040a:	b007      	add	sp, #28
 801040c:	bd30      	pop	{r4, r5, pc}
 801040e:	460b      	mov	r3, r1
 8010410:	2200      	movs	r2, #0
 8010412:	f10d 0117 	add.w	r1, sp, #23
 8010416:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801041a:	4602      	mov	r2, r0
 801041c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8010420:	9500      	str	r5, [sp, #0]
 8010422:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8010426:	f001 faad 	bl	8011984 <uxr_write_framed_msg>
 801042a:	e7e6      	b.n	80103fa <send_custom_msg+0x16>
 801042c:	2001      	movs	r0, #1
 801042e:	b007      	add	sp, #28
 8010430:	bd30      	pop	{r4, r5, pc}
 8010432:	bf00      	nop
 8010434:	2000b89c 	.word	0x2000b89c

08010438 <uxr_set_custom_transport_callbacks>:
 8010438:	b410      	push	{r4}
 801043a:	9c01      	ldr	r4, [sp, #4]
 801043c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8010440:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8010444:	9b02      	ldr	r3, [sp, #8]
 8010446:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801044a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801044e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8010452:	4770      	bx	lr

08010454 <uxr_init_custom_transport>:
 8010454:	b538      	push	{r3, r4, r5, lr}
 8010456:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801045a:	b303      	cbz	r3, 801049e <uxr_init_custom_transport+0x4a>
 801045c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8010460:	4604      	mov	r4, r0
 8010462:	b1e2      	cbz	r2, 801049e <uxr_init_custom_transport+0x4a>
 8010464:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8010468:	b1ca      	cbz	r2, 801049e <uxr_init_custom_transport+0x4a>
 801046a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801046e:	b1b2      	cbz	r2, 801049e <uxr_init_custom_transport+0x4a>
 8010470:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8010474:	4798      	blx	r3
 8010476:	4605      	mov	r5, r0
 8010478:	b188      	cbz	r0, 801049e <uxr_init_custom_transport+0x4a>
 801047a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801047e:	b98b      	cbnz	r3, 80104a4 <uxr_init_custom_transport+0x50>
 8010480:	490b      	ldr	r1, [pc, #44]	@ (80104b0 <uxr_init_custom_transport+0x5c>)
 8010482:	4b0c      	ldr	r3, [pc, #48]	@ (80104b4 <uxr_init_custom_transport+0x60>)
 8010484:	4a0c      	ldr	r2, [pc, #48]	@ (80104b8 <uxr_init_custom_transport+0x64>)
 8010486:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801048a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801048e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8010492:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8010496:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801049a:	4628      	mov	r0, r5
 801049c:	bd38      	pop	{r3, r4, r5, pc}
 801049e:	2500      	movs	r5, #0
 80104a0:	4628      	mov	r0, r5
 80104a2:	bd38      	pop	{r3, r4, r5, pc}
 80104a4:	2100      	movs	r1, #0
 80104a6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80104aa:	f001 fa65 	bl	8011978 <uxr_init_framing_io>
 80104ae:	e7e7      	b.n	8010480 <uxr_init_custom_transport+0x2c>
 80104b0:	080103e5 	.word	0x080103e5
 80104b4:	0801034d 	.word	0x0801034d
 80104b8:	08010341 	.word	0x08010341

080104bc <uxr_close_custom_transport>:
 80104bc:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80104c0:	4718      	bx	r3
 80104c2:	bf00      	nop

080104c4 <uxr_object_id>:
 80104c4:	b082      	sub	sp, #8
 80104c6:	2300      	movs	r3, #0
 80104c8:	f88d 1006 	strb.w	r1, [sp, #6]
 80104cc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80104d0:	f360 030f 	bfi	r3, r0, #0, #16
 80104d4:	f362 431f 	bfi	r3, r2, #16, #16
 80104d8:	4618      	mov	r0, r3
 80104da:	b002      	add	sp, #8
 80104dc:	4770      	bx	lr
 80104de:	bf00      	nop

080104e0 <uxr_object_id_from_raw>:
 80104e0:	7843      	ldrb	r3, [r0, #1]
 80104e2:	7801      	ldrb	r1, [r0, #0]
 80104e4:	b082      	sub	sp, #8
 80104e6:	f003 020f 	and.w	r2, r3, #15
 80104ea:	f88d 2006 	strb.w	r2, [sp, #6]
 80104ee:	091b      	lsrs	r3, r3, #4
 80104f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80104f4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80104f8:	2000      	movs	r0, #0
 80104fa:	f363 000f 	bfi	r0, r3, #0, #16
 80104fe:	f362 401f 	bfi	r0, r2, #16, #16
 8010502:	b002      	add	sp, #8
 8010504:	4770      	bx	lr
 8010506:	bf00      	nop

08010508 <uxr_object_id_to_raw>:
 8010508:	4602      	mov	r2, r0
 801050a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801050e:	b082      	sub	sp, #8
 8010510:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010514:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010518:	f881 c000 	strb.w	ip, [r1]
 801051c:	7048      	strb	r0, [r1, #1]
 801051e:	b002      	add	sp, #8
 8010520:	4770      	bx	lr
 8010522:	bf00      	nop

08010524 <uxr_buffer_request_data>:
 8010524:	b530      	push	{r4, r5, lr}
 8010526:	b095      	sub	sp, #84	@ 0x54
 8010528:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801052c:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801052e:	9303      	str	r3, [sp, #12]
 8010530:	2200      	movs	r2, #0
 8010532:	2d00      	cmp	r5, #0
 8010534:	bf14      	ite	ne
 8010536:	2101      	movne	r1, #1
 8010538:	4611      	moveq	r1, r2
 801053a:	4604      	mov	r4, r0
 801053c:	f88d 301c 	strb.w	r3, [sp, #28]
 8010540:	f88d 201d 	strb.w	r2, [sp, #29]
 8010544:	f88d 201e 	strb.w	r2, [sp, #30]
 8010548:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801054c:	d021      	beq.n	8010592 <uxr_buffer_request_data+0x6e>
 801054e:	682a      	ldr	r2, [r5, #0]
 8010550:	686b      	ldr	r3, [r5, #4]
 8010552:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8010556:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801055a:	2210      	movs	r2, #16
 801055c:	2308      	movs	r3, #8
 801055e:	2100      	movs	r1, #0
 8010560:	e9cd 3100 	strd	r3, r1, [sp]
 8010564:	4620      	mov	r0, r4
 8010566:	9905      	ldr	r1, [sp, #20]
 8010568:	ab0c      	add	r3, sp, #48	@ 0x30
 801056a:	f001 f89f 	bl	80116ac <uxr_prepare_stream_to_write_submessage>
 801056e:	b918      	cbnz	r0, 8010578 <uxr_buffer_request_data+0x54>
 8010570:	4604      	mov	r4, r0
 8010572:	4620      	mov	r0, r4
 8010574:	b015      	add	sp, #84	@ 0x54
 8010576:	bd30      	pop	{r4, r5, pc}
 8010578:	9904      	ldr	r1, [sp, #16]
 801057a:	aa06      	add	r2, sp, #24
 801057c:	4620      	mov	r0, r4
 801057e:	f001 f9cb 	bl	8011918 <uxr_init_base_object_request>
 8010582:	a906      	add	r1, sp, #24
 8010584:	4604      	mov	r4, r0
 8010586:	a80c      	add	r0, sp, #48	@ 0x30
 8010588:	f003 f8a0 	bl	80136cc <uxr_serialize_READ_DATA_Payload>
 801058c:	4620      	mov	r0, r4
 801058e:	b015      	add	sp, #84	@ 0x54
 8010590:	bd30      	pop	{r4, r5, pc}
 8010592:	2208      	movs	r2, #8
 8010594:	e7e2      	b.n	801055c <uxr_buffer_request_data+0x38>
 8010596:	bf00      	nop

08010598 <uxr_buffer_cancel_data>:
 8010598:	b510      	push	{r4, lr}
 801059a:	b094      	sub	sp, #80	@ 0x50
 801059c:	2300      	movs	r3, #0
 801059e:	9202      	str	r2, [sp, #8]
 80105a0:	9205      	str	r2, [sp, #20]
 80105a2:	9301      	str	r3, [sp, #4]
 80105a4:	2201      	movs	r2, #1
 80105a6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80105aa:	f88d 301e 	strb.w	r3, [sp, #30]
 80105ae:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80105b2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80105b6:	2308      	movs	r3, #8
 80105b8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80105bc:	9300      	str	r3, [sp, #0]
 80105be:	2210      	movs	r2, #16
 80105c0:	ab0c      	add	r3, sp, #48	@ 0x30
 80105c2:	4604      	mov	r4, r0
 80105c4:	9103      	str	r1, [sp, #12]
 80105c6:	f001 f871 	bl	80116ac <uxr_prepare_stream_to_write_submessage>
 80105ca:	b918      	cbnz	r0, 80105d4 <uxr_buffer_cancel_data+0x3c>
 80105cc:	4604      	mov	r4, r0
 80105ce:	4620      	mov	r0, r4
 80105d0:	b014      	add	sp, #80	@ 0x50
 80105d2:	bd10      	pop	{r4, pc}
 80105d4:	9905      	ldr	r1, [sp, #20]
 80105d6:	aa06      	add	r2, sp, #24
 80105d8:	4620      	mov	r0, r4
 80105da:	f001 f99d 	bl	8011918 <uxr_init_base_object_request>
 80105de:	a906      	add	r1, sp, #24
 80105e0:	4604      	mov	r4, r0
 80105e2:	a80c      	add	r0, sp, #48	@ 0x30
 80105e4:	f003 f872 	bl	80136cc <uxr_serialize_READ_DATA_Payload>
 80105e8:	4620      	mov	r0, r4
 80105ea:	b014      	add	sp, #80	@ 0x50
 80105ec:	bd10      	pop	{r4, pc}
 80105ee:	bf00      	nop

080105f0 <read_submessage_format>:
 80105f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105f4:	b095      	sub	sp, #84	@ 0x54
 80105f6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 80105fa:	b113      	cbz	r3, 8010602 <read_submessage_format+0x12>
 80105fc:	b015      	add	sp, #84	@ 0x54
 80105fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010602:	460c      	mov	r4, r1
 8010604:	4615      	mov	r5, r2
 8010606:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801060a:	4607      	mov	r7, r0
 801060c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801060e:	9004      	str	r0, [sp, #16]
 8010610:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8010612:	9005      	str	r0, [sp, #20]
 8010614:	1a52      	subs	r2, r2, r1
 8010616:	a80c      	add	r0, sp, #48	@ 0x30
 8010618:	4699      	mov	r9, r3
 801061a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801061e:	f7fb ff6b 	bl	800c4f8 <ucdr_init_buffer>
 8010622:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010626:	a80c      	add	r0, sp, #48	@ 0x30
 8010628:	f7fb ff3a 	bl	800c4a0 <ucdr_set_on_full_buffer_callback>
 801062c:	69e2      	ldr	r2, [r4, #28]
 801062e:	b19a      	cbz	r2, 8010658 <read_submessage_format+0x68>
 8010630:	f1b8 0f07 	cmp.w	r8, #7
 8010634:	f882 9014 	strb.w	r9, [r2, #20]
 8010638:	d040      	beq.n	80106bc <read_submessage_format+0xcc>
 801063a:	f1b8 0f08 	cmp.w	r8, #8
 801063e:	d02e      	beq.n	801069e <read_submessage_format+0xae>
 8010640:	f1b8 0f06 	cmp.w	r8, #6
 8010644:	d011      	beq.n	801066a <read_submessage_format+0x7a>
 8010646:	2301      	movs	r3, #1
 8010648:	7513      	strb	r3, [r2, #20]
 801064a:	4629      	mov	r1, r5
 801064c:	4620      	mov	r0, r4
 801064e:	f7fb ffa3 	bl	800c598 <ucdr_advance_buffer>
 8010652:	b015      	add	sp, #84	@ 0x54
 8010654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010658:	f1b8 0f07 	cmp.w	r8, #7
 801065c:	d02e      	beq.n	80106bc <read_submessage_format+0xcc>
 801065e:	f1b8 0f08 	cmp.w	r8, #8
 8010662:	d01c      	beq.n	801069e <read_submessage_format+0xae>
 8010664:	f1b8 0f06 	cmp.w	r8, #6
 8010668:	d1ef      	bne.n	801064a <read_submessage_format+0x5a>
 801066a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 801066e:	f1b8 0f00 	cmp.w	r8, #0
 8010672:	d011      	beq.n	8010698 <read_submessage_format+0xa8>
 8010674:	ab0c      	add	r3, sp, #48	@ 0x30
 8010676:	e9cd 3500 	strd	r3, r5, [sp]
 801067a:	2306      	movs	r3, #6
 801067c:	f88d 3016 	strb.w	r3, [sp, #22]
 8010680:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010684:	9302      	str	r3, [sp, #8]
 8010686:	4632      	mov	r2, r6
 8010688:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801068c:	4638      	mov	r0, r7
 801068e:	47c0      	blx	r8
 8010690:	2301      	movs	r3, #1
 8010692:	69e2      	ldr	r2, [r4, #28]
 8010694:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010698:	2a00      	cmp	r2, #0
 801069a:	d1d4      	bne.n	8010646 <read_submessage_format+0x56>
 801069c:	e7d5      	b.n	801064a <read_submessage_format+0x5a>
 801069e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d0f8      	beq.n	8010698 <read_submessage_format+0xa8>
 80106a6:	a906      	add	r1, sp, #24
 80106a8:	a80c      	add	r0, sp, #48	@ 0x30
 80106aa:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80106ae:	f003 f8e1 	bl	8013874 <uxr_deserialize_SampleIdentity>
 80106b2:	b9a0      	cbnz	r0, 80106de <read_submessage_format+0xee>
 80106b4:	69e2      	ldr	r2, [r4, #28]
 80106b6:	2a00      	cmp	r2, #0
 80106b8:	d1c5      	bne.n	8010646 <read_submessage_format+0x56>
 80106ba:	e7c6      	b.n	801064a <read_submessage_format+0x5a>
 80106bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80106c0:	b13b      	cbz	r3, 80106d2 <read_submessage_format+0xe2>
 80106c2:	a906      	add	r1, sp, #24
 80106c4:	a80c      	add	r0, sp, #48	@ 0x30
 80106c6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80106ca:	f002 fd99 	bl	8013200 <uxr_deserialize_BaseObjectRequest>
 80106ce:	bb60      	cbnz	r0, 801072a <read_submessage_format+0x13a>
 80106d0:	69e2      	ldr	r2, [r4, #28]
 80106d2:	68a3      	ldr	r3, [r4, #8]
 80106d4:	442b      	add	r3, r5
 80106d6:	60a3      	str	r3, [r4, #8]
 80106d8:	2a00      	cmp	r2, #0
 80106da:	d1b4      	bne.n	8010646 <read_submessage_format+0x56>
 80106dc:	e7b5      	b.n	801064a <read_submessage_format+0x5a>
 80106de:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80106e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80106e4:	1a52      	subs	r2, r2, r1
 80106e6:	eba8 0803 	sub.w	r8, r8, r3
 80106ea:	a80c      	add	r0, sp, #48	@ 0x30
 80106ec:	f7fb ff04 	bl	800c4f8 <ucdr_init_buffer>
 80106f0:	44a8      	add	r8, r5
 80106f2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80106f6:	a80c      	add	r0, sp, #48	@ 0x30
 80106f8:	f7fb fed2 	bl	800c4a0 <ucdr_set_on_full_buffer_callback>
 80106fc:	fa1f f888 	uxth.w	r8, r8
 8010700:	ab0c      	add	r3, sp, #48	@ 0x30
 8010702:	9300      	str	r3, [sp, #0]
 8010704:	f8cd 8004 	str.w	r8, [sp, #4]
 8010708:	2108      	movs	r1, #8
 801070a:	f88d 1016 	strb.w	r1, [sp, #22]
 801070e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8010712:	9102      	str	r1, [sp, #8]
 8010714:	ab06      	add	r3, sp, #24
 8010716:	4632      	mov	r2, r6
 8010718:	9905      	ldr	r1, [sp, #20]
 801071a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 801071e:	4638      	mov	r0, r7
 8010720:	47b0      	blx	r6
 8010722:	2301      	movs	r3, #1
 8010724:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010728:	e7c4      	b.n	80106b4 <read_submessage_format+0xc4>
 801072a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801072e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010730:	1a52      	subs	r2, r2, r1
 8010732:	a80c      	add	r0, sp, #48	@ 0x30
 8010734:	eba8 0803 	sub.w	r8, r8, r3
 8010738:	f7fb fede 	bl	800c4f8 <ucdr_init_buffer>
 801073c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010740:	a80c      	add	r0, sp, #48	@ 0x30
 8010742:	f7fb fead 	bl	800c4a0 <ucdr_set_on_full_buffer_callback>
 8010746:	ab0c      	add	r3, sp, #48	@ 0x30
 8010748:	9300      	str	r3, [sp, #0]
 801074a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801074e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010752:	44a8      	add	r8, r5
 8010754:	fa1f f888 	uxth.w	r8, r8
 8010758:	f8cd 8004 	str.w	r8, [sp, #4]
 801075c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010760:	2107      	movs	r1, #7
 8010762:	f88d 1016 	strb.w	r1, [sp, #22]
 8010766:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 801076a:	9102      	str	r1, [sp, #8]
 801076c:	4632      	mov	r2, r6
 801076e:	b29b      	uxth	r3, r3
 8010770:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8010774:	9905      	ldr	r1, [sp, #20]
 8010776:	4638      	mov	r0, r7
 8010778:	47b0      	blx	r6
 801077a:	2301      	movs	r3, #1
 801077c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010780:	e7a6      	b.n	80106d0 <read_submessage_format+0xe0>
 8010782:	bf00      	nop

08010784 <on_get_fragmentation_info>:
 8010784:	b500      	push	{lr}
 8010786:	b08b      	sub	sp, #44	@ 0x2c
 8010788:	4601      	mov	r1, r0
 801078a:	2204      	movs	r2, #4
 801078c:	a802      	add	r0, sp, #8
 801078e:	f7fb feb3 	bl	800c4f8 <ucdr_init_buffer>
 8010792:	f10d 0305 	add.w	r3, sp, #5
 8010796:	f10d 0206 	add.w	r2, sp, #6
 801079a:	a901      	add	r1, sp, #4
 801079c:	a802      	add	r0, sp, #8
 801079e:	f001 fecf 	bl	8012540 <uxr_read_submessage_header>
 80107a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80107a6:	2b0d      	cmp	r3, #13
 80107a8:	d003      	beq.n	80107b2 <on_get_fragmentation_info+0x2e>
 80107aa:	2000      	movs	r0, #0
 80107ac:	b00b      	add	sp, #44	@ 0x2c
 80107ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80107b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80107b6:	f013 0f02 	tst.w	r3, #2
 80107ba:	bf14      	ite	ne
 80107bc:	2002      	movne	r0, #2
 80107be:	2001      	moveq	r0, #1
 80107c0:	b00b      	add	sp, #44	@ 0x2c
 80107c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80107c6:	bf00      	nop

080107c8 <read_submessage_get_info>:
 80107c8:	b570      	push	{r4, r5, r6, lr}
 80107ca:	2500      	movs	r5, #0
 80107cc:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80107d0:	4604      	mov	r4, r0
 80107d2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80107d6:	460e      	mov	r6, r1
 80107d8:	a810      	add	r0, sp, #64	@ 0x40
 80107da:	4629      	mov	r1, r5
 80107dc:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80107e0:	f009 f860 	bl	80198a4 <memset>
 80107e4:	a903      	add	r1, sp, #12
 80107e6:	4630      	mov	r0, r6
 80107e8:	f002 feb2 	bl	8013550 <uxr_deserialize_GET_INFO_Payload>
 80107ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80107f0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80107f4:	4620      	mov	r0, r4
 80107f6:	f001 f887 	bl	8011908 <uxr_session_header_offset>
 80107fa:	462b      	mov	r3, r5
 80107fc:	9000      	str	r0, [sp, #0]
 80107fe:	220c      	movs	r2, #12
 8010800:	a905      	add	r1, sp, #20
 8010802:	a808      	add	r0, sp, #32
 8010804:	f7fb fe66 	bl	800c4d4 <ucdr_init_buffer_origin_offset>
 8010808:	a910      	add	r1, sp, #64	@ 0x40
 801080a:	a808      	add	r0, sp, #32
 801080c:	f002 ff12 	bl	8013634 <uxr_serialize_INFO_Payload>
 8010810:	9b08      	ldr	r3, [sp, #32]
 8010812:	462a      	mov	r2, r5
 8010814:	4629      	mov	r1, r5
 8010816:	4620      	mov	r0, r4
 8010818:	f001 f820 	bl	801185c <uxr_stamp_session_header>
 801081c:	a808      	add	r0, sp, #32
 801081e:	f7fb fe97 	bl	800c550 <ucdr_buffer_length>
 8010822:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010824:	4602      	mov	r2, r0
 8010826:	a905      	add	r1, sp, #20
 8010828:	e9d3 0400 	ldrd	r0, r4, [r3]
 801082c:	47a0      	blx	r4
 801082e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010832:	bd70      	pop	{r4, r5, r6, pc}

08010834 <write_submessage_acknack.isra.0>:
 8010834:	b570      	push	{r4, r5, r6, lr}
 8010836:	b092      	sub	sp, #72	@ 0x48
 8010838:	4605      	mov	r5, r0
 801083a:	460e      	mov	r6, r1
 801083c:	4614      	mov	r4, r2
 801083e:	f001 f863 	bl	8011908 <uxr_session_header_offset>
 8010842:	a905      	add	r1, sp, #20
 8010844:	9000      	str	r0, [sp, #0]
 8010846:	2300      	movs	r3, #0
 8010848:	a80a      	add	r0, sp, #40	@ 0x28
 801084a:	2211      	movs	r2, #17
 801084c:	f7fb fe42 	bl	800c4d4 <ucdr_init_buffer_origin_offset>
 8010850:	2218      	movs	r2, #24
 8010852:	fb02 5404 	mla	r4, r2, r4, r5
 8010856:	2300      	movs	r3, #0
 8010858:	2205      	movs	r2, #5
 801085a:	3450      	adds	r4, #80	@ 0x50
 801085c:	210a      	movs	r1, #10
 801085e:	a80a      	add	r0, sp, #40	@ 0x28
 8010860:	f001 fe54 	bl	801250c <uxr_buffer_submessage_header>
 8010864:	a903      	add	r1, sp, #12
 8010866:	4620      	mov	r0, r4
 8010868:	f007 fb5e 	bl	8017f28 <uxr_compute_acknack>
 801086c:	ba40      	rev16	r0, r0
 801086e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010872:	a903      	add	r1, sp, #12
 8010874:	a80a      	add	r0, sp, #40	@ 0x28
 8010876:	f88d 6010 	strb.w	r6, [sp, #16]
 801087a:	f002 ff4b 	bl	8013714 <uxr_serialize_ACKNACK_Payload>
 801087e:	2200      	movs	r2, #0
 8010880:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010882:	4611      	mov	r1, r2
 8010884:	4628      	mov	r0, r5
 8010886:	f000 ffe9 	bl	801185c <uxr_stamp_session_header>
 801088a:	a80a      	add	r0, sp, #40	@ 0x28
 801088c:	f7fb fe60 	bl	800c550 <ucdr_buffer_length>
 8010890:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010892:	4602      	mov	r2, r0
 8010894:	a905      	add	r1, sp, #20
 8010896:	e9d3 0400 	ldrd	r0, r4, [r3]
 801089a:	47a0      	blx	r4
 801089c:	b012      	add	sp, #72	@ 0x48
 801089e:	bd70      	pop	{r4, r5, r6, pc}

080108a0 <uxr_init_session>:
 80108a0:	b510      	push	{r4, lr}
 80108a2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80108d8 <uxr_init_session+0x38>
 80108a6:	2300      	movs	r3, #0
 80108a8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80108ac:	4604      	mov	r4, r0
 80108ae:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80108b2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80108b6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80108ba:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80108be:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80108c2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80108c6:	2181      	movs	r1, #129	@ 0x81
 80108c8:	f000 ff34 	bl	8011734 <uxr_init_session_info>
 80108cc:	f104 0008 	add.w	r0, r4, #8
 80108d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108d4:	f001 bd36 	b.w	8012344 <uxr_init_stream_storage>
	...

080108e0 <uxr_set_status_callback>:
 80108e0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80108e4:	4770      	bx	lr
 80108e6:	bf00      	nop

080108e8 <uxr_set_topic_callback>:
 80108e8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80108ec:	4770      	bx	lr
 80108ee:	bf00      	nop

080108f0 <uxr_set_request_callback>:
 80108f0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80108f4:	4770      	bx	lr
 80108f6:	bf00      	nop

080108f8 <uxr_set_reply_callback>:
 80108f8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80108fc:	4770      	bx	lr
 80108fe:	bf00      	nop

08010900 <uxr_create_output_best_effort_stream>:
 8010900:	b510      	push	{r4, lr}
 8010902:	b084      	sub	sp, #16
 8010904:	e9cd 2100 	strd	r2, r1, [sp]
 8010908:	4604      	mov	r4, r0
 801090a:	f000 fffd 	bl	8011908 <uxr_session_header_offset>
 801090e:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010912:	4603      	mov	r3, r0
 8010914:	f104 0008 	add.w	r0, r4, #8
 8010918:	b004      	add	sp, #16
 801091a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801091e:	f001 bd5b 	b.w	80123d8 <uxr_add_output_best_effort_buffer>
 8010922:	bf00      	nop

08010924 <uxr_create_output_reliable_stream>:
 8010924:	b510      	push	{r4, lr}
 8010926:	b088      	sub	sp, #32
 8010928:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801092c:	4604      	mov	r4, r0
 801092e:	9303      	str	r3, [sp, #12]
 8010930:	f000 ffea 	bl	8011908 <uxr_session_header_offset>
 8010934:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010938:	9000      	str	r0, [sp, #0]
 801093a:	9905      	ldr	r1, [sp, #20]
 801093c:	f104 0008 	add.w	r0, r4, #8
 8010940:	f001 fd5e 	bl	8012400 <uxr_add_output_reliable_buffer>
 8010944:	2200      	movs	r2, #0
 8010946:	b2c3      	uxtb	r3, r0
 8010948:	f363 0207 	bfi	r2, r3, #0, #8
 801094c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010950:	f363 220f 	bfi	r2, r3, #8, #8
 8010954:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010958:	f363 4217 	bfi	r2, r3, #16, #8
 801095c:	0e03      	lsrs	r3, r0, #24
 801095e:	f363 621f 	bfi	r2, r3, #24, #8
 8010962:	4610      	mov	r0, r2
 8010964:	b008      	add	sp, #32
 8010966:	bd10      	pop	{r4, pc}

08010968 <uxr_create_input_best_effort_stream>:
 8010968:	b082      	sub	sp, #8
 801096a:	3008      	adds	r0, #8
 801096c:	b002      	add	sp, #8
 801096e:	f001 bd61 	b.w	8012434 <uxr_add_input_best_effort_buffer>
 8010972:	bf00      	nop

08010974 <uxr_create_input_reliable_stream>:
 8010974:	b510      	push	{r4, lr}
 8010976:	b084      	sub	sp, #16
 8010978:	4c0b      	ldr	r4, [pc, #44]	@ (80109a8 <uxr_create_input_reliable_stream+0x34>)
 801097a:	9400      	str	r4, [sp, #0]
 801097c:	3008      	adds	r0, #8
 801097e:	f001 fd6f 	bl	8012460 <uxr_add_input_reliable_buffer>
 8010982:	2200      	movs	r2, #0
 8010984:	b2c3      	uxtb	r3, r0
 8010986:	f363 0207 	bfi	r2, r3, #0, #8
 801098a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801098e:	f363 220f 	bfi	r2, r3, #8, #8
 8010992:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010996:	f363 4217 	bfi	r2, r3, #16, #8
 801099a:	0e03      	lsrs	r3, r0, #24
 801099c:	f363 621f 	bfi	r2, r3, #24, #8
 80109a0:	4610      	mov	r0, r2
 80109a2:	b004      	add	sp, #16
 80109a4:	bd10      	pop	{r4, pc}
 80109a6:	bf00      	nop
 80109a8:	08010785 	.word	0x08010785

080109ac <uxr_epoch_millis>:
 80109ac:	b510      	push	{r4, lr}
 80109ae:	4604      	mov	r4, r0
 80109b0:	f001 fe0c 	bl	80125cc <uxr_nanos>
 80109b4:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 80109b8:	1ac0      	subs	r0, r0, r3
 80109ba:	4a04      	ldr	r2, [pc, #16]	@ (80109cc <uxr_epoch_millis+0x20>)
 80109bc:	f04f 0300 	mov.w	r3, #0
 80109c0:	eb61 0104 	sbc.w	r1, r1, r4
 80109c4:	f7f0 f900 	bl	8000bc8 <__aeabi_ldivmod>
 80109c8:	bd10      	pop	{r4, pc}
 80109ca:	bf00      	nop
 80109cc:	000f4240 	.word	0x000f4240

080109d0 <uxr_epoch_nanos>:
 80109d0:	b510      	push	{r4, lr}
 80109d2:	4604      	mov	r4, r0
 80109d4:	f001 fdfa 	bl	80125cc <uxr_nanos>
 80109d8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80109dc:	1ac0      	subs	r0, r0, r3
 80109de:	eb61 0102 	sbc.w	r1, r1, r2
 80109e2:	bd10      	pop	{r4, pc}

080109e4 <uxr_flash_output_streams>:
 80109e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109e8:	7e03      	ldrb	r3, [r0, #24]
 80109ea:	b084      	sub	sp, #16
 80109ec:	4604      	mov	r4, r0
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d035      	beq.n	8010a5e <uxr_flash_output_streams+0x7a>
 80109f2:	f04f 0900 	mov.w	r9, #0
 80109f6:	4648      	mov	r0, r9
 80109f8:	f10d 0802 	add.w	r8, sp, #2
 80109fc:	af03      	add	r7, sp, #12
 80109fe:	ae02      	add	r6, sp, #8
 8010a00:	e006      	b.n	8010a10 <uxr_flash_output_streams+0x2c>
 8010a02:	7e23      	ldrb	r3, [r4, #24]
 8010a04:	f109 0901 	add.w	r9, r9, #1
 8010a08:	fa5f f089 	uxtb.w	r0, r9
 8010a0c:	4283      	cmp	r3, r0
 8010a0e:	d926      	bls.n	8010a5e <uxr_flash_output_streams+0x7a>
 8010a10:	2201      	movs	r2, #1
 8010a12:	4611      	mov	r1, r2
 8010a14:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010a18:	f001 fc40 	bl	801229c <uxr_stream_id>
 8010a1c:	3508      	adds	r5, #8
 8010a1e:	4684      	mov	ip, r0
 8010a20:	4643      	mov	r3, r8
 8010a22:	463a      	mov	r2, r7
 8010a24:	4631      	mov	r1, r6
 8010a26:	4628      	mov	r0, r5
 8010a28:	f8cd c004 	str.w	ip, [sp, #4]
 8010a2c:	f007 fb02 	bl	8018034 <uxr_prepare_best_effort_buffer_to_send>
 8010a30:	2800      	cmp	r0, #0
 8010a32:	d0e6      	beq.n	8010a02 <uxr_flash_output_streams+0x1e>
 8010a34:	9b02      	ldr	r3, [sp, #8]
 8010a36:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010a3a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010a3e:	4620      	mov	r0, r4
 8010a40:	f000 ff0c 	bl	801185c <uxr_stamp_session_header>
 8010a44:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010a46:	9a03      	ldr	r2, [sp, #12]
 8010a48:	685d      	ldr	r5, [r3, #4]
 8010a4a:	6818      	ldr	r0, [r3, #0]
 8010a4c:	9902      	ldr	r1, [sp, #8]
 8010a4e:	47a8      	blx	r5
 8010a50:	f109 0901 	add.w	r9, r9, #1
 8010a54:	7e23      	ldrb	r3, [r4, #24]
 8010a56:	fa5f f089 	uxtb.w	r0, r9
 8010a5a:	4283      	cmp	r3, r0
 8010a5c:	d8d8      	bhi.n	8010a10 <uxr_flash_output_streams+0x2c>
 8010a5e:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010a62:	b38b      	cbz	r3, 8010ac8 <uxr_flash_output_streams+0xe4>
 8010a64:	f04f 0900 	mov.w	r9, #0
 8010a68:	f10d 0802 	add.w	r8, sp, #2
 8010a6c:	af03      	add	r7, sp, #12
 8010a6e:	ae02      	add	r6, sp, #8
 8010a70:	4648      	mov	r0, r9
 8010a72:	2201      	movs	r2, #1
 8010a74:	2102      	movs	r1, #2
 8010a76:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010a7a:	f001 fc0f 	bl	801229c <uxr_stream_id>
 8010a7e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010a82:	3520      	adds	r5, #32
 8010a84:	9001      	str	r0, [sp, #4]
 8010a86:	e00d      	b.n	8010aa4 <uxr_flash_output_streams+0xc0>
 8010a88:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010a8c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010a90:	9b02      	ldr	r3, [sp, #8]
 8010a92:	f000 fee3 	bl	801185c <uxr_stamp_session_header>
 8010a96:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010a98:	9a03      	ldr	r2, [sp, #12]
 8010a9a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8010a9e:	9902      	ldr	r1, [sp, #8]
 8010aa0:	6818      	ldr	r0, [r3, #0]
 8010aa2:	47d0      	blx	sl
 8010aa4:	4643      	mov	r3, r8
 8010aa6:	463a      	mov	r2, r7
 8010aa8:	4631      	mov	r1, r6
 8010aaa:	4628      	mov	r0, r5
 8010aac:	f007 fce0 	bl	8018470 <uxr_prepare_next_reliable_buffer_to_send>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d1e7      	bne.n	8010a88 <uxr_flash_output_streams+0xa4>
 8010ab8:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010abc:	f109 0901 	add.w	r9, r9, #1
 8010ac0:	fa5f f089 	uxtb.w	r0, r9
 8010ac4:	4283      	cmp	r3, r0
 8010ac6:	d8d4      	bhi.n	8010a72 <uxr_flash_output_streams+0x8e>
 8010ac8:	b004      	add	sp, #16
 8010aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ace:	bf00      	nop

08010ad0 <read_submessage_info>:
 8010ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ad4:	460d      	mov	r5, r1
 8010ad6:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010ada:	4669      	mov	r1, sp
 8010adc:	4607      	mov	r7, r0
 8010ade:	4628      	mov	r0, r5
 8010ae0:	f002 fc44 	bl	801336c <uxr_deserialize_BaseObjectReply>
 8010ae4:	a902      	add	r1, sp, #8
 8010ae6:	4604      	mov	r4, r0
 8010ae8:	4628      	mov	r0, r5
 8010aea:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010aee:	f7fa fa09 	bl	800af04 <ucdr_deserialize_bool>
 8010af2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010af6:	4004      	ands	r4, r0
 8010af8:	b2e4      	uxtb	r4, r4
 8010afa:	b95b      	cbnz	r3, 8010b14 <read_submessage_info+0x44>
 8010afc:	a987      	add	r1, sp, #540	@ 0x21c
 8010afe:	4628      	mov	r0, r5
 8010b00:	f7fa fa00 	bl	800af04 <ucdr_deserialize_bool>
 8010b04:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010b08:	4606      	mov	r6, r0
 8010b0a:	b94b      	cbnz	r3, 8010b20 <read_submessage_info+0x50>
 8010b0c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b14:	a903      	add	r1, sp, #12
 8010b16:	4628      	mov	r0, r5
 8010b18:	f002 fad0 	bl	80130bc <uxr_deserialize_ObjectVariant>
 8010b1c:	4004      	ands	r4, r0
 8010b1e:	e7ed      	b.n	8010afc <read_submessage_info+0x2c>
 8010b20:	a988      	add	r1, sp, #544	@ 0x220
 8010b22:	4628      	mov	r0, r5
 8010b24:	f7fa fa1c 	bl	800af60 <ucdr_deserialize_uint8_t>
 8010b28:	4234      	tst	r4, r6
 8010b2a:	d0ef      	beq.n	8010b0c <read_submessage_info+0x3c>
 8010b2c:	2800      	cmp	r0, #0
 8010b2e:	d0ed      	beq.n	8010b0c <read_submessage_info+0x3c>
 8010b30:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010b34:	2b0d      	cmp	r3, #13
 8010b36:	d1e9      	bne.n	8010b0c <read_submessage_info+0x3c>
 8010b38:	a98a      	add	r1, sp, #552	@ 0x228
 8010b3a:	4628      	mov	r0, r5
 8010b3c:	f7fa ffb6 	bl	800baac <ucdr_deserialize_int16_t>
 8010b40:	b140      	cbz	r0, 8010b54 <read_submessage_info+0x84>
 8010b42:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	dd07      	ble.n	8010b5a <read_submessage_info+0x8a>
 8010b4a:	f1b8 0f00 	cmp.w	r8, #0
 8010b4e:	bf14      	ite	ne
 8010b50:	2001      	movne	r0, #1
 8010b52:	2002      	moveq	r0, #2
 8010b54:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8010b58:	e7d8      	b.n	8010b0c <read_submessage_info+0x3c>
 8010b5a:	2000      	movs	r0, #0
 8010b5c:	e7fa      	b.n	8010b54 <read_submessage_info+0x84>
 8010b5e:	bf00      	nop

08010b60 <read_submessage_list>:
 8010b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b64:	b097      	sub	sp, #92	@ 0x5c
 8010b66:	4ec1      	ldr	r6, [pc, #772]	@ (8010e6c <read_submessage_list+0x30c>)
 8010b68:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b6a:	4604      	mov	r4, r0
 8010b6c:	460d      	mov	r5, r1
 8010b6e:	f04f 0801 	mov.w	r8, #1
 8010b72:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8010b76:	aa0c      	add	r2, sp, #48	@ 0x30
 8010b78:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010b7c:	4628      	mov	r0, r5
 8010b7e:	f001 fcdf 	bl	8012540 <uxr_read_submessage_header>
 8010b82:	2800      	cmp	r0, #0
 8010b84:	f000 813e 	beq.w	8010e04 <read_submessage_list+0x2a4>
 8010b88:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8010b8c:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8010b90:	3b02      	subs	r3, #2
 8010b92:	2b0d      	cmp	r3, #13
 8010b94:	d8ed      	bhi.n	8010b72 <read_submessage_list+0x12>
 8010b96:	a101      	add	r1, pc, #4	@ (adr r1, 8010b9c <read_submessage_list+0x3c>)
 8010b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010b9c:	08010dfb 	.word	0x08010dfb
 8010ba0:	08010b73 	.word	0x08010b73
 8010ba4:	08010deb 	.word	0x08010deb
 8010ba8:	08010d89 	.word	0x08010d89
 8010bac:	08010d7f 	.word	0x08010d7f
 8010bb0:	08010b73 	.word	0x08010b73
 8010bb4:	08010b73 	.word	0x08010b73
 8010bb8:	08010cdf 	.word	0x08010cdf
 8010bbc:	08010c6f 	.word	0x08010c6f
 8010bc0:	08010c2f 	.word	0x08010c2f
 8010bc4:	08010b73 	.word	0x08010b73
 8010bc8:	08010b73 	.word	0x08010b73
 8010bcc:	08010b73 	.word	0x08010b73
 8010bd0:	08010bd5 	.word	0x08010bd5
 8010bd4:	a910      	add	r1, sp, #64	@ 0x40
 8010bd6:	4628      	mov	r0, r5
 8010bd8:	f002 fdfa 	bl	80137d0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010bdc:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8010be0:	f1b9 0f00 	cmp.w	r9, #0
 8010be4:	f000 8116 	beq.w	8010e14 <read_submessage_list+0x2b4>
 8010be8:	f001 fcf0 	bl	80125cc <uxr_nanos>
 8010bec:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8010bee:	4602      	mov	r2, r0
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8010bf4:	2100      	movs	r1, #0
 8010bf6:	468c      	mov	ip, r1
 8010bf8:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010bfc:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8010c00:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010c02:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8010c04:	468c      	mov	ip, r1
 8010c06:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010c0a:	46e2      	mov	sl, ip
 8010c0c:	46bc      	mov	ip, r7
 8010c0e:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8010c12:	fbc0 7106 	smlal	r7, r1, r0, r6
 8010c16:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8010c1a:	e9cd 7100 	strd	r7, r1, [sp]
 8010c1e:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8010c22:	9106      	str	r1, [sp, #24]
 8010c24:	4620      	mov	r0, r4
 8010c26:	47c8      	blx	r9
 8010c28:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8010c2c:	e7a1      	b.n	8010b72 <read_submessage_list+0x12>
 8010c2e:	a910      	add	r1, sp, #64	@ 0x40
 8010c30:	4628      	mov	r0, r5
 8010c32:	f002 fdad 	bl	8013790 <uxr_deserialize_HEARTBEAT_Payload>
 8010c36:	2100      	movs	r1, #0
 8010c38:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010c3c:	f001 fb58 	bl	80122f0 <uxr_stream_id_from_raw>
 8010c40:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010c44:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010c46:	4639      	mov	r1, r7
 8010c48:	f104 0008 	add.w	r0, r4, #8
 8010c4c:	f001 fc3e 	bl	80124cc <uxr_get_input_reliable_stream>
 8010c50:	2800      	cmp	r0, #0
 8010c52:	d08e      	beq.n	8010b72 <read_submessage_list+0x12>
 8010c54:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8010c58:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010c5c:	f007 f958 	bl	8017f10 <uxr_process_heartbeat>
 8010c60:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8010c64:	463a      	mov	r2, r7
 8010c66:	4620      	mov	r0, r4
 8010c68:	f7ff fde4 	bl	8010834 <write_submessage_acknack.isra.0>
 8010c6c:	e781      	b.n	8010b72 <read_submessage_list+0x12>
 8010c6e:	a910      	add	r1, sp, #64	@ 0x40
 8010c70:	4628      	mov	r0, r5
 8010c72:	f002 fd65 	bl	8013740 <uxr_deserialize_ACKNACK_Payload>
 8010c76:	2100      	movs	r1, #0
 8010c78:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010c7c:	f001 fb38 	bl	80122f0 <uxr_stream_id_from_raw>
 8010c80:	900d      	str	r0, [sp, #52]	@ 0x34
 8010c82:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010c86:	f104 0008 	add.w	r0, r4, #8
 8010c8a:	f001 fc0b 	bl	80124a4 <uxr_get_output_reliable_stream>
 8010c8e:	4607      	mov	r7, r0
 8010c90:	2800      	cmp	r0, #0
 8010c92:	f43f af6e 	beq.w	8010b72 <read_submessage_list+0x12>
 8010c96:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8010c9a:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8010c9e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8010ca2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010ca6:	b289      	uxth	r1, r1
 8010ca8:	f007 fc8c 	bl	80185c4 <uxr_process_acknack>
 8010cac:	4638      	mov	r0, r7
 8010cae:	f007 fc49 	bl	8018544 <uxr_begin_output_nack_buffer_it>
 8010cb2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010cb6:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8010cba:	e006      	b.n	8010cca <read_submessage_list+0x16a>
 8010cbc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010cbe:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010cc0:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8010cc4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010cc6:	6818      	ldr	r0, [r3, #0]
 8010cc8:	47c8      	blx	r9
 8010cca:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8010cce:	aa0f      	add	r2, sp, #60	@ 0x3c
 8010cd0:	4651      	mov	r1, sl
 8010cd2:	4638      	mov	r0, r7
 8010cd4:	f007 fc38 	bl	8018548 <uxr_next_reliable_nack_buffer_to_send>
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	d1ef      	bne.n	8010cbc <read_submessage_list+0x15c>
 8010cdc:	e749      	b.n	8010b72 <read_submessage_list+0x12>
 8010cde:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8010ce2:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8010ce6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010cea:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8010cee:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8010cf2:	4651      	mov	r1, sl
 8010cf4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010cf8:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8010cfc:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8010d00:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8010d04:	4628      	mov	r0, r5
 8010d06:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8010d0a:	f002 fa79 	bl	8013200 <uxr_deserialize_BaseObjectRequest>
 8010d0e:	4650      	mov	r0, sl
 8010d10:	a90f      	add	r1, sp, #60	@ 0x3c
 8010d12:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8010d16:	f000 fe1d 	bl	8011954 <uxr_parse_base_object_request>
 8010d1a:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8010d1e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010d20:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8010d24:	9110      	str	r1, [sp, #64]	@ 0x40
 8010d26:	3f04      	subs	r7, #4
 8010d28:	f009 090e 	and.w	r9, r9, #14
 8010d2c:	b2bf      	uxth	r7, r7
 8010d2e:	f1bb 0f00 	cmp.w	fp, #0
 8010d32:	d006      	beq.n	8010d42 <read_submessage_list+0x1e2>
 8010d34:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010d38:	9300      	str	r3, [sp, #0]
 8010d3a:	4652      	mov	r2, sl
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	4620      	mov	r0, r4
 8010d40:	47d8      	blx	fp
 8010d42:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010d44:	b16a      	cbz	r2, 8010d62 <read_submessage_list+0x202>
 8010d46:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010d48:	2100      	movs	r1, #0
 8010d4a:	3802      	subs	r0, #2
 8010d4c:	e002      	b.n	8010d54 <read_submessage_list+0x1f4>
 8010d4e:	3101      	adds	r1, #1
 8010d50:	4291      	cmp	r1, r2
 8010d52:	d006      	beq.n	8010d62 <read_submessage_list+0x202>
 8010d54:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010d58:	4553      	cmp	r3, sl
 8010d5a:	d1f8      	bne.n	8010d4e <read_submessage_list+0x1ee>
 8010d5c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010d5e:	2200      	movs	r2, #0
 8010d60:	545a      	strb	r2, [r3, r1]
 8010d62:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8010d66:	9102      	str	r1, [sp, #8]
 8010d68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010d6a:	9101      	str	r1, [sp, #4]
 8010d6c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010d6e:	9100      	str	r1, [sp, #0]
 8010d70:	464b      	mov	r3, r9
 8010d72:	463a      	mov	r2, r7
 8010d74:	4629      	mov	r1, r5
 8010d76:	4620      	mov	r0, r4
 8010d78:	f7ff fc3a 	bl	80105f0 <read_submessage_format>
 8010d7c:	e6f9      	b.n	8010b72 <read_submessage_list+0x12>
 8010d7e:	4629      	mov	r1, r5
 8010d80:	4620      	mov	r0, r4
 8010d82:	f7ff fea5 	bl	8010ad0 <read_submessage_info>
 8010d86:	e6f4      	b.n	8010b72 <read_submessage_list+0x12>
 8010d88:	2a00      	cmp	r2, #0
 8010d8a:	d03e      	beq.n	8010e0a <read_submessage_list+0x2aa>
 8010d8c:	a910      	add	r1, sp, #64	@ 0x40
 8010d8e:	4628      	mov	r0, r5
 8010d90:	f002 fc32 	bl	80135f8 <uxr_deserialize_STATUS_Payload>
 8010d94:	a90e      	add	r1, sp, #56	@ 0x38
 8010d96:	aa0d      	add	r2, sp, #52	@ 0x34
 8010d98:	a810      	add	r0, sp, #64	@ 0x40
 8010d9a:	f000 fddb 	bl	8011954 <uxr_parse_base_object_request>
 8010d9e:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8010da2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010da4:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8010da8:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8010dac:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010dae:	f1ba 0f00 	cmp.w	sl, #0
 8010db2:	d006      	beq.n	8010dc2 <read_submessage_list+0x262>
 8010db4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010db8:	9300      	str	r3, [sp, #0]
 8010dba:	463a      	mov	r2, r7
 8010dbc:	464b      	mov	r3, r9
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	47d0      	blx	sl
 8010dc2:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010dc4:	2a00      	cmp	r2, #0
 8010dc6:	f43f aed4 	beq.w	8010b72 <read_submessage_list+0x12>
 8010dca:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010dcc:	2100      	movs	r1, #0
 8010dce:	3802      	subs	r0, #2
 8010dd0:	e003      	b.n	8010dda <read_submessage_list+0x27a>
 8010dd2:	3101      	adds	r1, #1
 8010dd4:	4291      	cmp	r1, r2
 8010dd6:	f43f aecc 	beq.w	8010b72 <read_submessage_list+0x12>
 8010dda:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010dde:	42bb      	cmp	r3, r7
 8010de0:	d1f7      	bne.n	8010dd2 <read_submessage_list+0x272>
 8010de2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010de4:	f803 9001 	strb.w	r9, [r3, r1]
 8010de8:	e6c3      	b.n	8010b72 <read_submessage_list+0x12>
 8010dea:	2a00      	cmp	r2, #0
 8010dec:	f47f aec1 	bne.w	8010b72 <read_submessage_list+0x12>
 8010df0:	4629      	mov	r1, r5
 8010df2:	4620      	mov	r0, r4
 8010df4:	f000 fcf4 	bl	80117e0 <uxr_read_create_session_status>
 8010df8:	e6bb      	b.n	8010b72 <read_submessage_list+0x12>
 8010dfa:	4629      	mov	r1, r5
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	f7ff fce3 	bl	80107c8 <read_submessage_get_info>
 8010e02:	e6b6      	b.n	8010b72 <read_submessage_list+0x12>
 8010e04:	b017      	add	sp, #92	@ 0x5c
 8010e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e0a:	4629      	mov	r1, r5
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	f000 fcf3 	bl	80117f8 <uxr_read_delete_session_status>
 8010e12:	e6ae      	b.n	8010b72 <read_submessage_list+0x12>
 8010e14:	f001 fbda 	bl	80125cc <uxr_nanos>
 8010e18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010e1a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010e1c:	464f      	mov	r7, r9
 8010e1e:	fbc3 2706 	smlal	r2, r7, r3, r6
 8010e22:	1812      	adds	r2, r2, r0
 8010e24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010e26:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010e28:	eb47 0101 	adc.w	r1, r7, r1
 8010e2c:	464f      	mov	r7, r9
 8010e2e:	fbc3 0706 	smlal	r0, r7, r3, r6
 8010e32:	463b      	mov	r3, r7
 8010e34:	4684      	mov	ip, r0
 8010e36:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8010e3a:	fbc7 0906 	smlal	r0, r9, r7, r6
 8010e3e:	eb1c 0c00 	adds.w	ip, ip, r0
 8010e42:	464f      	mov	r7, r9
 8010e44:	eb43 0307 	adc.w	r3, r3, r7
 8010e48:	ebb2 0c0c 	subs.w	ip, r2, ip
 8010e4c:	eb61 0303 	sbc.w	r3, r1, r3
 8010e50:	0fda      	lsrs	r2, r3, #31
 8010e52:	eb12 020c 	adds.w	r2, r2, ip
 8010e56:	f143 0300 	adc.w	r3, r3, #0
 8010e5a:	0852      	lsrs	r2, r2, #1
 8010e5c:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8010e60:	105b      	asrs	r3, r3, #1
 8010e62:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8010e66:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8010e6a:	e6dd      	b.n	8010c28 <read_submessage_list+0xc8>
 8010e6c:	3b9aca00 	.word	0x3b9aca00

08010e70 <listen_message_reliably>:
 8010e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e74:	1e0b      	subs	r3, r1, #0
 8010e76:	b09d      	sub	sp, #116	@ 0x74
 8010e78:	bfb8      	it	lt
 8010e7a:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8010e7e:	4680      	mov	r8, r0
 8010e80:	9305      	str	r3, [sp, #20]
 8010e82:	f001 fb89 	bl	8012598 <uxr_millis>
 8010e86:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8010e8a:	4681      	mov	r9, r0
 8010e8c:	2a00      	cmp	r2, #0
 8010e8e:	f000 80a1 	beq.w	8010fd4 <listen_message_reliably+0x164>
 8010e92:	2600      	movs	r6, #0
 8010e94:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010e98:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010e9c:	9303      	str	r3, [sp, #12]
 8010e9e:	4630      	mov	r0, r6
 8010ea0:	460f      	mov	r7, r1
 8010ea2:	e00f      	b.n	8010ec4 <listen_message_reliably+0x54>
 8010ea4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8010ea8:	9903      	ldr	r1, [sp, #12]
 8010eaa:	455a      	cmp	r2, fp
 8010eac:	f106 0601 	add.w	r6, r6, #1
 8010eb0:	eb73 0101 	sbcs.w	r1, r3, r1
 8010eb4:	b2f0      	uxtb	r0, r6
 8010eb6:	da01      	bge.n	8010ebc <listen_message_reliably+0x4c>
 8010eb8:	4693      	mov	fp, r2
 8010eba:	9303      	str	r3, [sp, #12]
 8010ebc:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010ec0:	4283      	cmp	r3, r0
 8010ec2:	d960      	bls.n	8010f86 <listen_message_reliably+0x116>
 8010ec4:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010ec8:	2102      	movs	r1, #2
 8010eca:	2201      	movs	r2, #1
 8010ecc:	f001 f9e6 	bl	801229c <uxr_stream_id>
 8010ed0:	00e4      	lsls	r4, r4, #3
 8010ed2:	f104 0520 	add.w	r5, r4, #32
 8010ed6:	4445      	add	r5, r8
 8010ed8:	4601      	mov	r1, r0
 8010eda:	463b      	mov	r3, r7
 8010edc:	464a      	mov	r2, r9
 8010ede:	4628      	mov	r0, r5
 8010ee0:	9109      	str	r1, [sp, #36]	@ 0x24
 8010ee2:	f007 fb05 	bl	80184f0 <uxr_update_output_stream_heartbeat_timestamp>
 8010ee6:	eb08 0304 	add.w	r3, r8, r4
 8010eea:	2800      	cmp	r0, #0
 8010eec:	d0da      	beq.n	8010ea4 <listen_message_reliably+0x34>
 8010eee:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010ef2:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8010ef6:	9304      	str	r3, [sp, #16]
 8010ef8:	4640      	mov	r0, r8
 8010efa:	f000 fd05 	bl	8011908 <uxr_session_header_offset>
 8010efe:	3501      	adds	r5, #1
 8010f00:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8010f04:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010f08:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	2211      	movs	r2, #17
 8010f10:	9000      	str	r0, [sp, #0]
 8010f12:	a90c      	add	r1, sp, #48	@ 0x30
 8010f14:	4650      	mov	r0, sl
 8010f16:	f7fb fadd 	bl	800c4d4 <ucdr_init_buffer_origin_offset>
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	2205      	movs	r2, #5
 8010f1e:	210b      	movs	r1, #11
 8010f20:	4650      	mov	r0, sl
 8010f22:	f001 faf3 	bl	801250c <uxr_buffer_submessage_header>
 8010f26:	8968      	ldrh	r0, [r5, #10]
 8010f28:	2101      	movs	r1, #1
 8010f2a:	f007 fba3 	bl	8018674 <uxr_seq_num_add>
 8010f2e:	892b      	ldrh	r3, [r5, #8]
 8010f30:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8010f34:	4602      	mov	r2, r0
 8010f36:	9b04      	ldr	r3, [sp, #16]
 8010f38:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010f3c:	a90a      	add	r1, sp, #40	@ 0x28
 8010f3e:	4650      	mov	r0, sl
 8010f40:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010f44:	f002 fc10 	bl	8013768 <uxr_serialize_HEARTBEAT_Payload>
 8010f48:	2200      	movs	r2, #0
 8010f4a:	4611      	mov	r1, r2
 8010f4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010f4e:	4640      	mov	r0, r8
 8010f50:	f000 fc84 	bl	801185c <uxr_stamp_session_header>
 8010f54:	4650      	mov	r0, sl
 8010f56:	f7fb fafb 	bl	800c550 <ucdr_buffer_length>
 8010f5a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8010f5e:	4602      	mov	r2, r0
 8010f60:	a90c      	add	r1, sp, #48	@ 0x30
 8010f62:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010f66:	4444      	add	r4, r8
 8010f68:	47a8      	blx	r5
 8010f6a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8010f6e:	9903      	ldr	r1, [sp, #12]
 8010f70:	455a      	cmp	r2, fp
 8010f72:	f106 0601 	add.w	r6, r6, #1
 8010f76:	eb73 0101 	sbcs.w	r1, r3, r1
 8010f7a:	b2f0      	uxtb	r0, r6
 8010f7c:	db9c      	blt.n	8010eb8 <listen_message_reliably+0x48>
 8010f7e:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010f82:	4283      	cmp	r3, r0
 8010f84:	d89e      	bhi.n	8010ec4 <listen_message_reliably+0x54>
 8010f86:	9a03      	ldr	r2, [sp, #12]
 8010f88:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	bf08      	it	eq
 8010f90:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8010f94:	d01e      	beq.n	8010fd4 <listen_message_reliably+0x164>
 8010f96:	ebab 0309 	sub.w	r3, fp, r9
 8010f9a:	9905      	ldr	r1, [sp, #20]
 8010f9c:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	bf08      	it	eq
 8010fa4:	2301      	moveq	r3, #1
 8010fa6:	4299      	cmp	r1, r3
 8010fa8:	bfa8      	it	ge
 8010faa:	4619      	movge	r1, r3
 8010fac:	6894      	ldr	r4, [r2, #8]
 8010fae:	6810      	ldr	r0, [r2, #0]
 8010fb0:	4689      	mov	r9, r1
 8010fb2:	460b      	mov	r3, r1
 8010fb4:	aa08      	add	r2, sp, #32
 8010fb6:	a907      	add	r1, sp, #28
 8010fb8:	47a0      	blx	r4
 8010fba:	b968      	cbnz	r0, 8010fd8 <listen_message_reliably+0x168>
 8010fbc:	9b05      	ldr	r3, [sp, #20]
 8010fbe:	eba3 0309 	sub.w	r3, r3, r9
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	9305      	str	r3, [sp, #20]
 8010fc6:	f73f af5c 	bgt.w	8010e82 <listen_message_reliably+0x12>
 8010fca:	4604      	mov	r4, r0
 8010fcc:	4620      	mov	r0, r4
 8010fce:	b01d      	add	sp, #116	@ 0x74
 8010fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fd4:	9b05      	ldr	r3, [sp, #20]
 8010fd6:	e7e0      	b.n	8010f9a <listen_message_reliably+0x12a>
 8010fd8:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010fdc:	4604      	mov	r4, r0
 8010fde:	a80c      	add	r0, sp, #48	@ 0x30
 8010fe0:	f7fb fa8a 	bl	800c4f8 <ucdr_init_buffer>
 8010fe4:	2500      	movs	r5, #0
 8010fe6:	f10d 031a 	add.w	r3, sp, #26
 8010fea:	aa06      	add	r2, sp, #24
 8010fec:	a90c      	add	r1, sp, #48	@ 0x30
 8010fee:	4640      	mov	r0, r8
 8010ff0:	f88d 5018 	strb.w	r5, [sp, #24]
 8010ff4:	f000 fc46 	bl	8011884 <uxr_read_session_header>
 8010ff8:	b918      	cbnz	r0, 8011002 <listen_message_reliably+0x192>
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	b01d      	add	sp, #116	@ 0x74
 8010ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011002:	4629      	mov	r1, r5
 8011004:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011008:	f001 f972 	bl	80122f0 <uxr_stream_id_from_raw>
 801100c:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8011010:	2d01      	cmp	r5, #1
 8011012:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011016:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801101a:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801101e:	d04b      	beq.n	80110b8 <listen_message_reliably+0x248>
 8011020:	2d02      	cmp	r5, #2
 8011022:	d00f      	beq.n	8011044 <listen_message_reliably+0x1d4>
 8011024:	2d00      	cmp	r5, #0
 8011026:	d1e8      	bne.n	8010ffa <listen_message_reliably+0x18a>
 8011028:	4629      	mov	r1, r5
 801102a:	4628      	mov	r0, r5
 801102c:	f001 f960 	bl	80122f0 <uxr_stream_id_from_raw>
 8011030:	a90c      	add	r1, sp, #48	@ 0x30
 8011032:	4602      	mov	r2, r0
 8011034:	4640      	mov	r0, r8
 8011036:	920a      	str	r2, [sp, #40]	@ 0x28
 8011038:	f7ff fd92 	bl	8010b60 <read_submessage_list>
 801103c:	4620      	mov	r0, r4
 801103e:	b01d      	add	sp, #116	@ 0x74
 8011040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011044:	4631      	mov	r1, r6
 8011046:	f108 0008 	add.w	r0, r8, #8
 801104a:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 801104e:	f001 fa3d 	bl	80124cc <uxr_get_input_reliable_stream>
 8011052:	4607      	mov	r7, r0
 8011054:	b338      	cbz	r0, 80110a6 <listen_message_reliably+0x236>
 8011056:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011058:	9203      	str	r2, [sp, #12]
 801105a:	a80c      	add	r0, sp, #48	@ 0x30
 801105c:	f7fb fa7c 	bl	800c558 <ucdr_buffer_remaining>
 8011060:	4603      	mov	r3, r0
 8011062:	f10d 0019 	add.w	r0, sp, #25
 8011066:	9000      	str	r0, [sp, #0]
 8011068:	9a03      	ldr	r2, [sp, #12]
 801106a:	4651      	mov	r1, sl
 801106c:	4638      	mov	r0, r7
 801106e:	f006 fe55 	bl	8017d1c <uxr_receive_reliable_message>
 8011072:	b1c0      	cbz	r0, 80110a6 <listen_message_reliably+0x236>
 8011074:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011078:	b393      	cbz	r3, 80110e0 <listen_message_reliably+0x270>
 801107a:	ad14      	add	r5, sp, #80	@ 0x50
 801107c:	f04f 0a02 	mov.w	sl, #2
 8011080:	e00a      	b.n	8011098 <listen_message_reliably+0x228>
 8011082:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8011086:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 801108a:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801108e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011090:	4629      	mov	r1, r5
 8011092:	4640      	mov	r0, r8
 8011094:	f7ff fd64 	bl	8010b60 <read_submessage_list>
 8011098:	2204      	movs	r2, #4
 801109a:	4629      	mov	r1, r5
 801109c:	4638      	mov	r0, r7
 801109e:	f006 febd 	bl	8017e1c <uxr_next_input_reliable_buffer_available>
 80110a2:	2800      	cmp	r0, #0
 80110a4:	d1ed      	bne.n	8011082 <listen_message_reliably+0x212>
 80110a6:	4640      	mov	r0, r8
 80110a8:	4632      	mov	r2, r6
 80110aa:	4649      	mov	r1, r9
 80110ac:	f7ff fbc2 	bl	8010834 <write_submessage_acknack.isra.0>
 80110b0:	4620      	mov	r0, r4
 80110b2:	b01d      	add	sp, #116	@ 0x74
 80110b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110b8:	4631      	mov	r1, r6
 80110ba:	f108 0008 	add.w	r0, r8, #8
 80110be:	f001 f9fb 	bl	80124b8 <uxr_get_input_best_effort_stream>
 80110c2:	2800      	cmp	r0, #0
 80110c4:	d099      	beq.n	8010ffa <listen_message_reliably+0x18a>
 80110c6:	4651      	mov	r1, sl
 80110c8:	f006 fd94 	bl	8017bf4 <uxr_receive_best_effort_message>
 80110cc:	2800      	cmp	r0, #0
 80110ce:	d094      	beq.n	8010ffa <listen_message_reliably+0x18a>
 80110d0:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80110d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80110d6:	a90c      	add	r1, sp, #48	@ 0x30
 80110d8:	4640      	mov	r0, r8
 80110da:	f7ff fd41 	bl	8010b60 <read_submessage_list>
 80110de:	e78c      	b.n	8010ffa <listen_message_reliably+0x18a>
 80110e0:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80110e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80110e6:	a90c      	add	r1, sp, #48	@ 0x30
 80110e8:	4640      	mov	r0, r8
 80110ea:	f7ff fd39 	bl	8010b60 <read_submessage_list>
 80110ee:	e7c4      	b.n	801107a <listen_message_reliably+0x20a>

080110f0 <uxr_run_session_timeout>:
 80110f0:	b570      	push	{r4, r5, r6, lr}
 80110f2:	4604      	mov	r4, r0
 80110f4:	460d      	mov	r5, r1
 80110f6:	f001 fa4f 	bl	8012598 <uxr_millis>
 80110fa:	4606      	mov	r6, r0
 80110fc:	4620      	mov	r0, r4
 80110fe:	f7ff fc71 	bl	80109e4 <uxr_flash_output_streams>
 8011102:	4629      	mov	r1, r5
 8011104:	4620      	mov	r0, r4
 8011106:	f7ff feb3 	bl	8010e70 <listen_message_reliably>
 801110a:	f001 fa45 	bl	8012598 <uxr_millis>
 801110e:	1b83      	subs	r3, r0, r6
 8011110:	1ae9      	subs	r1, r5, r3
 8011112:	2900      	cmp	r1, #0
 8011114:	dcf6      	bgt.n	8011104 <uxr_run_session_timeout+0x14>
 8011116:	f104 0008 	add.w	r0, r4, #8
 801111a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801111e:	f001 b9df 	b.w	80124e0 <uxr_output_streams_confirmed>
 8011122:	bf00      	nop

08011124 <uxr_run_session_until_data>:
 8011124:	b570      	push	{r4, r5, r6, lr}
 8011126:	4604      	mov	r4, r0
 8011128:	460d      	mov	r5, r1
 801112a:	f001 fa35 	bl	8012598 <uxr_millis>
 801112e:	4606      	mov	r6, r0
 8011130:	4620      	mov	r0, r4
 8011132:	f7ff fc57 	bl	80109e4 <uxr_flash_output_streams>
 8011136:	2300      	movs	r3, #0
 8011138:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 801113c:	4629      	mov	r1, r5
 801113e:	e005      	b.n	801114c <uxr_run_session_until_data+0x28>
 8011140:	f001 fa2a 	bl	8012598 <uxr_millis>
 8011144:	1b83      	subs	r3, r0, r6
 8011146:	1ae9      	subs	r1, r5, r3
 8011148:	2900      	cmp	r1, #0
 801114a:	dd07      	ble.n	801115c <uxr_run_session_until_data+0x38>
 801114c:	4620      	mov	r0, r4
 801114e:	f7ff fe8f 	bl	8010e70 <listen_message_reliably>
 8011152:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011156:	2800      	cmp	r0, #0
 8011158:	d0f2      	beq.n	8011140 <uxr_run_session_until_data+0x1c>
 801115a:	bd70      	pop	{r4, r5, r6, pc}
 801115c:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011160:	bd70      	pop	{r4, r5, r6, pc}
 8011162:	bf00      	nop

08011164 <uxr_run_session_until_confirm_delivery>:
 8011164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011168:	4606      	mov	r6, r0
 801116a:	460d      	mov	r5, r1
 801116c:	f001 fa14 	bl	8012598 <uxr_millis>
 8011170:	4607      	mov	r7, r0
 8011172:	4630      	mov	r0, r6
 8011174:	f7ff fc36 	bl	80109e4 <uxr_flash_output_streams>
 8011178:	2d00      	cmp	r5, #0
 801117a:	f106 0808 	add.w	r8, r6, #8
 801117e:	bfa8      	it	ge
 8011180:	462c      	movge	r4, r5
 8011182:	da07      	bge.n	8011194 <uxr_run_session_until_confirm_delivery+0x30>
 8011184:	e00e      	b.n	80111a4 <uxr_run_session_until_confirm_delivery+0x40>
 8011186:	f7ff fe73 	bl	8010e70 <listen_message_reliably>
 801118a:	f001 fa05 	bl	8012598 <uxr_millis>
 801118e:	1bc3      	subs	r3, r0, r7
 8011190:	1aec      	subs	r4, r5, r3
 8011192:	d407      	bmi.n	80111a4 <uxr_run_session_until_confirm_delivery+0x40>
 8011194:	4640      	mov	r0, r8
 8011196:	f001 f9a3 	bl	80124e0 <uxr_output_streams_confirmed>
 801119a:	4603      	mov	r3, r0
 801119c:	4621      	mov	r1, r4
 801119e:	4630      	mov	r0, r6
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d0f0      	beq.n	8011186 <uxr_run_session_until_confirm_delivery+0x22>
 80111a4:	4640      	mov	r0, r8
 80111a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111aa:	f001 b999 	b.w	80124e0 <uxr_output_streams_confirmed>
 80111ae:	bf00      	nop

080111b0 <uxr_run_session_until_all_status>:
 80111b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111b4:	9c08      	ldr	r4, [sp, #32]
 80111b6:	4606      	mov	r6, r0
 80111b8:	460f      	mov	r7, r1
 80111ba:	4691      	mov	r9, r2
 80111bc:	461d      	mov	r5, r3
 80111be:	f7ff fc11 	bl	80109e4 <uxr_flash_output_streams>
 80111c2:	b124      	cbz	r4, 80111ce <uxr_run_session_until_all_status+0x1e>
 80111c4:	4622      	mov	r2, r4
 80111c6:	21ff      	movs	r1, #255	@ 0xff
 80111c8:	4628      	mov	r0, r5
 80111ca:	f008 fb6b 	bl	80198a4 <memset>
 80111ce:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 80111d2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80111d4:	f001 f9e0 	bl	8012598 <uxr_millis>
 80111d8:	3d01      	subs	r5, #1
 80111da:	f1a9 0902 	sub.w	r9, r9, #2
 80111de:	4680      	mov	r8, r0
 80111e0:	4639      	mov	r1, r7
 80111e2:	4630      	mov	r0, r6
 80111e4:	f7ff fe44 	bl	8010e70 <listen_message_reliably>
 80111e8:	f001 f9d6 	bl	8012598 <uxr_millis>
 80111ec:	eba0 0008 	sub.w	r0, r0, r8
 80111f0:	1a39      	subs	r1, r7, r0
 80111f2:	b344      	cbz	r4, 8011246 <uxr_run_session_until_all_status+0x96>
 80111f4:	4628      	mov	r0, r5
 80111f6:	46ac      	mov	ip, r5
 80111f8:	2301      	movs	r3, #1
 80111fa:	e002      	b.n	8011202 <uxr_run_session_until_all_status+0x52>
 80111fc:	42a3      	cmp	r3, r4
 80111fe:	d20d      	bcs.n	801121c <uxr_run_session_until_all_status+0x6c>
 8011200:	3301      	adds	r3, #1
 8011202:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8011206:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801120a:	d1f7      	bne.n	80111fc <uxr_run_session_until_all_status+0x4c>
 801120c:	42a3      	cmp	r3, r4
 801120e:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8011212:	d213      	bcs.n	801123c <uxr_run_session_until_all_status+0x8c>
 8011214:	2a00      	cmp	r2, #0
 8011216:	d0f3      	beq.n	8011200 <uxr_run_session_until_all_status+0x50>
 8011218:	2900      	cmp	r1, #0
 801121a:	dce2      	bgt.n	80111e2 <uxr_run_session_until_all_status+0x32>
 801121c:	2300      	movs	r3, #0
 801121e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011220:	442c      	add	r4, r5
 8011222:	e001      	b.n	8011228 <uxr_run_session_until_all_status+0x78>
 8011224:	2b01      	cmp	r3, #1
 8011226:	d812      	bhi.n	801124e <uxr_run_session_until_all_status+0x9e>
 8011228:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801122c:	4284      	cmp	r4, r0
 801122e:	d1f9      	bne.n	8011224 <uxr_run_session_until_all_status+0x74>
 8011230:	2b01      	cmp	r3, #1
 8011232:	bf8c      	ite	hi
 8011234:	2000      	movhi	r0, #0
 8011236:	2001      	movls	r0, #1
 8011238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801123c:	2900      	cmp	r1, #0
 801123e:	dded      	ble.n	801121c <uxr_run_session_until_all_status+0x6c>
 8011240:	2a00      	cmp	r2, #0
 8011242:	d1ce      	bne.n	80111e2 <uxr_run_session_until_all_status+0x32>
 8011244:	e7ea      	b.n	801121c <uxr_run_session_until_all_status+0x6c>
 8011246:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011248:	2001      	movs	r0, #1
 801124a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801124e:	2000      	movs	r0, #0
 8011250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011254:	0000      	movs	r0, r0
	...

08011258 <uxr_sync_session>:
 8011258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801125a:	b093      	sub	sp, #76	@ 0x4c
 801125c:	4604      	mov	r4, r0
 801125e:	460d      	mov	r5, r1
 8011260:	f000 fb52 	bl	8011908 <uxr_session_header_offset>
 8011264:	2214      	movs	r2, #20
 8011266:	eb0d 0102 	add.w	r1, sp, r2
 801126a:	9000      	str	r0, [sp, #0]
 801126c:	2300      	movs	r3, #0
 801126e:	a80a      	add	r0, sp, #40	@ 0x28
 8011270:	f7fb f930 	bl	800c4d4 <ucdr_init_buffer_origin_offset>
 8011274:	2300      	movs	r3, #0
 8011276:	2208      	movs	r2, #8
 8011278:	210e      	movs	r1, #14
 801127a:	a80a      	add	r0, sp, #40	@ 0x28
 801127c:	f001 f946 	bl	801250c <uxr_buffer_submessage_header>
 8011280:	f001 f9a4 	bl	80125cc <uxr_nanos>
 8011284:	a31c      	add	r3, pc, #112	@ (adr r3, 80112f8 <uxr_sync_session+0xa0>)
 8011286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801128a:	460e      	mov	r6, r1
 801128c:	4607      	mov	r7, r0
 801128e:	f7ef fc9b 	bl	8000bc8 <__aeabi_ldivmod>
 8011292:	4631      	mov	r1, r6
 8011294:	9003      	str	r0, [sp, #12]
 8011296:	a318      	add	r3, pc, #96	@ (adr r3, 80112f8 <uxr_sync_session+0xa0>)
 8011298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801129c:	4638      	mov	r0, r7
 801129e:	f7ef fc93 	bl	8000bc8 <__aeabi_ldivmod>
 80112a2:	a903      	add	r1, sp, #12
 80112a4:	a80a      	add	r0, sp, #40	@ 0x28
 80112a6:	9204      	str	r2, [sp, #16]
 80112a8:	f002 fa84 	bl	80137b4 <uxr_serialize_TIMESTAMP_Payload>
 80112ac:	2200      	movs	r2, #0
 80112ae:	4611      	mov	r1, r2
 80112b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80112b2:	4620      	mov	r0, r4
 80112b4:	f000 fad2 	bl	801185c <uxr_stamp_session_header>
 80112b8:	a80a      	add	r0, sp, #40	@ 0x28
 80112ba:	f7fb f949 	bl	800c550 <ucdr_buffer_length>
 80112be:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80112c0:	4602      	mov	r2, r0
 80112c2:	a905      	add	r1, sp, #20
 80112c4:	e9d3 0600 	ldrd	r0, r6, [r3]
 80112c8:	47b0      	blx	r6
 80112ca:	f001 f965 	bl	8012598 <uxr_millis>
 80112ce:	2300      	movs	r3, #0
 80112d0:	4606      	mov	r6, r0
 80112d2:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80112d6:	4629      	mov	r1, r5
 80112d8:	e000      	b.n	80112dc <uxr_sync_session+0x84>
 80112da:	b950      	cbnz	r0, 80112f2 <uxr_sync_session+0x9a>
 80112dc:	4620      	mov	r0, r4
 80112de:	f7ff fdc7 	bl	8010e70 <listen_message_reliably>
 80112e2:	f001 f959 	bl	8012598 <uxr_millis>
 80112e6:	1b83      	subs	r3, r0, r6
 80112e8:	1ae9      	subs	r1, r5, r3
 80112ea:	2900      	cmp	r1, #0
 80112ec:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 80112f0:	dcf3      	bgt.n	80112da <uxr_sync_session+0x82>
 80112f2:	b013      	add	sp, #76	@ 0x4c
 80112f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112f6:	bf00      	nop
 80112f8:	3b9aca00 	.word	0x3b9aca00
 80112fc:	00000000 	.word	0x00000000

08011300 <wait_session_status>:
 8011300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011304:	4604      	mov	r4, r0
 8011306:	b09d      	sub	sp, #116	@ 0x74
 8011308:	20ff      	movs	r0, #255	@ 0xff
 801130a:	7160      	strb	r0, [r4, #5]
 801130c:	9303      	str	r3, [sp, #12]
 801130e:	2b00      	cmp	r3, #0
 8011310:	f000 80b6 	beq.w	8011480 <wait_session_status+0x180>
 8011314:	468a      	mov	sl, r1
 8011316:	4691      	mov	r9, r2
 8011318:	f04f 0b00 	mov.w	fp, #0
 801131c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801131e:	464a      	mov	r2, r9
 8011320:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011324:	4651      	mov	r1, sl
 8011326:	47a8      	blx	r5
 8011328:	f001 f936 	bl	8012598 <uxr_millis>
 801132c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011330:	4605      	mov	r5, r0
 8011332:	e009      	b.n	8011348 <wait_session_status+0x48>
 8011334:	f001 f930 	bl	8012598 <uxr_millis>
 8011338:	1b40      	subs	r0, r0, r5
 801133a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801133e:	2b00      	cmp	r3, #0
 8011340:	dd40      	ble.n	80113c4 <wait_session_status+0xc4>
 8011342:	7960      	ldrb	r0, [r4, #5]
 8011344:	28ff      	cmp	r0, #255	@ 0xff
 8011346:	d145      	bne.n	80113d4 <wait_session_status+0xd4>
 8011348:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801134a:	a908      	add	r1, sp, #32
 801134c:	6896      	ldr	r6, [r2, #8]
 801134e:	6810      	ldr	r0, [r2, #0]
 8011350:	aa09      	add	r2, sp, #36	@ 0x24
 8011352:	47b0      	blx	r6
 8011354:	2800      	cmp	r0, #0
 8011356:	d0ed      	beq.n	8011334 <wait_session_status+0x34>
 8011358:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801135c:	a80c      	add	r0, sp, #48	@ 0x30
 801135e:	f7fb f8cb 	bl	800c4f8 <ucdr_init_buffer>
 8011362:	2600      	movs	r6, #0
 8011364:	f10d 031e 	add.w	r3, sp, #30
 8011368:	aa07      	add	r2, sp, #28
 801136a:	a90c      	add	r1, sp, #48	@ 0x30
 801136c:	4620      	mov	r0, r4
 801136e:	f88d 601c 	strb.w	r6, [sp, #28]
 8011372:	f000 fa87 	bl	8011884 <uxr_read_session_header>
 8011376:	2800      	cmp	r0, #0
 8011378:	d0dc      	beq.n	8011334 <wait_session_status+0x34>
 801137a:	4631      	mov	r1, r6
 801137c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011380:	f000 ffb6 	bl	80122f0 <uxr_stream_id_from_raw>
 8011384:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011388:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801138c:	9302      	str	r3, [sp, #8]
 801138e:	2f01      	cmp	r7, #1
 8011390:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8011394:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011398:	d05c      	beq.n	8011454 <wait_session_status+0x154>
 801139a:	2f02      	cmp	r7, #2
 801139c:	d020      	beq.n	80113e0 <wait_session_status+0xe0>
 801139e:	2f00      	cmp	r7, #0
 80113a0:	d1c8      	bne.n	8011334 <wait_session_status+0x34>
 80113a2:	4639      	mov	r1, r7
 80113a4:	4638      	mov	r0, r7
 80113a6:	f000 ffa3 	bl	80122f0 <uxr_stream_id_from_raw>
 80113aa:	a90c      	add	r1, sp, #48	@ 0x30
 80113ac:	4602      	mov	r2, r0
 80113ae:	900b      	str	r0, [sp, #44]	@ 0x2c
 80113b0:	4620      	mov	r0, r4
 80113b2:	f7ff fbd5 	bl	8010b60 <read_submessage_list>
 80113b6:	f001 f8ef 	bl	8012598 <uxr_millis>
 80113ba:	1b40      	subs	r0, r0, r5
 80113bc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	dcbe      	bgt.n	8011342 <wait_session_status+0x42>
 80113c4:	9b03      	ldr	r3, [sp, #12]
 80113c6:	7960      	ldrb	r0, [r4, #5]
 80113c8:	f10b 0b01 	add.w	fp, fp, #1
 80113cc:	455b      	cmp	r3, fp
 80113ce:	d001      	beq.n	80113d4 <wait_session_status+0xd4>
 80113d0:	28ff      	cmp	r0, #255	@ 0xff
 80113d2:	d0a3      	beq.n	801131c <wait_session_status+0x1c>
 80113d4:	38ff      	subs	r0, #255	@ 0xff
 80113d6:	bf18      	it	ne
 80113d8:	2001      	movne	r0, #1
 80113da:	b01d      	add	sp, #116	@ 0x74
 80113dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113e0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80113e4:	9304      	str	r3, [sp, #16]
 80113e6:	4631      	mov	r1, r6
 80113e8:	f104 0008 	add.w	r0, r4, #8
 80113ec:	f001 f86e 	bl	80124cc <uxr_get_input_reliable_stream>
 80113f0:	4680      	mov	r8, r0
 80113f2:	b348      	cbz	r0, 8011448 <wait_session_status+0x148>
 80113f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80113f6:	9205      	str	r2, [sp, #20]
 80113f8:	a80c      	add	r0, sp, #48	@ 0x30
 80113fa:	f7fb f8ad 	bl	800c558 <ucdr_buffer_remaining>
 80113fe:	4603      	mov	r3, r0
 8011400:	f10d 001d 	add.w	r0, sp, #29
 8011404:	9000      	str	r0, [sp, #0]
 8011406:	9a05      	ldr	r2, [sp, #20]
 8011408:	9902      	ldr	r1, [sp, #8]
 801140a:	4640      	mov	r0, r8
 801140c:	f006 fc86 	bl	8017d1c <uxr_receive_reliable_message>
 8011410:	b1d0      	cbz	r0, 8011448 <wait_session_status+0x148>
 8011412:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d03a      	beq.n	8011490 <wait_session_status+0x190>
 801141a:	9f04      	ldr	r7, [sp, #16]
 801141c:	e00a      	b.n	8011434 <wait_session_status+0x134>
 801141e:	f04f 0302 	mov.w	r3, #2
 8011422:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8011426:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801142a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801142e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011430:	f7ff fb96 	bl	8010b60 <read_submessage_list>
 8011434:	a914      	add	r1, sp, #80	@ 0x50
 8011436:	2204      	movs	r2, #4
 8011438:	4640      	mov	r0, r8
 801143a:	f006 fcef 	bl	8017e1c <uxr_next_input_reliable_buffer_available>
 801143e:	4603      	mov	r3, r0
 8011440:	a914      	add	r1, sp, #80	@ 0x50
 8011442:	4620      	mov	r0, r4
 8011444:	2b00      	cmp	r3, #0
 8011446:	d1ea      	bne.n	801141e <wait_session_status+0x11e>
 8011448:	9904      	ldr	r1, [sp, #16]
 801144a:	4632      	mov	r2, r6
 801144c:	4620      	mov	r0, r4
 801144e:	f7ff f9f1 	bl	8010834 <write_submessage_acknack.isra.0>
 8011452:	e76f      	b.n	8011334 <wait_session_status+0x34>
 8011454:	4631      	mov	r1, r6
 8011456:	f104 0008 	add.w	r0, r4, #8
 801145a:	f001 f82d 	bl	80124b8 <uxr_get_input_best_effort_stream>
 801145e:	2800      	cmp	r0, #0
 8011460:	f43f af68 	beq.w	8011334 <wait_session_status+0x34>
 8011464:	9902      	ldr	r1, [sp, #8]
 8011466:	f006 fbc5 	bl	8017bf4 <uxr_receive_best_effort_message>
 801146a:	2800      	cmp	r0, #0
 801146c:	f43f af62 	beq.w	8011334 <wait_session_status+0x34>
 8011470:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011474:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011476:	a90c      	add	r1, sp, #48	@ 0x30
 8011478:	4620      	mov	r0, r4
 801147a:	f7ff fb71 	bl	8010b60 <read_submessage_list>
 801147e:	e759      	b.n	8011334 <wait_session_status+0x34>
 8011480:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011482:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011486:	47a0      	blx	r4
 8011488:	2001      	movs	r0, #1
 801148a:	b01d      	add	sp, #116	@ 0x74
 801148c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011490:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011494:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011496:	a90c      	add	r1, sp, #48	@ 0x30
 8011498:	4620      	mov	r0, r4
 801149a:	f7ff fb61 	bl	8010b60 <read_submessage_list>
 801149e:	e7bc      	b.n	801141a <wait_session_status+0x11a>

080114a0 <uxr_delete_session_retries>:
 80114a0:	b530      	push	{r4, r5, lr}
 80114a2:	b08f      	sub	sp, #60	@ 0x3c
 80114a4:	4604      	mov	r4, r0
 80114a6:	460d      	mov	r5, r1
 80114a8:	f000 fa2e 	bl	8011908 <uxr_session_header_offset>
 80114ac:	2300      	movs	r3, #0
 80114ae:	2210      	movs	r2, #16
 80114b0:	9000      	str	r0, [sp, #0]
 80114b2:	a902      	add	r1, sp, #8
 80114b4:	a806      	add	r0, sp, #24
 80114b6:	f7fb f80d 	bl	800c4d4 <ucdr_init_buffer_origin_offset>
 80114ba:	a906      	add	r1, sp, #24
 80114bc:	4620      	mov	r0, r4
 80114be:	f000 f973 	bl	80117a8 <uxr_buffer_delete_session>
 80114c2:	2200      	movs	r2, #0
 80114c4:	4611      	mov	r1, r2
 80114c6:	9b06      	ldr	r3, [sp, #24]
 80114c8:	4620      	mov	r0, r4
 80114ca:	f000 f9c7 	bl	801185c <uxr_stamp_session_header>
 80114ce:	a806      	add	r0, sp, #24
 80114d0:	f7fb f83e 	bl	800c550 <ucdr_buffer_length>
 80114d4:	462b      	mov	r3, r5
 80114d6:	4602      	mov	r2, r0
 80114d8:	a902      	add	r1, sp, #8
 80114da:	4620      	mov	r0, r4
 80114dc:	f7ff ff10 	bl	8011300 <wait_session_status>
 80114e0:	b118      	cbz	r0, 80114ea <uxr_delete_session_retries+0x4a>
 80114e2:	7960      	ldrb	r0, [r4, #5]
 80114e4:	fab0 f080 	clz	r0, r0
 80114e8:	0940      	lsrs	r0, r0, #5
 80114ea:	b00f      	add	sp, #60	@ 0x3c
 80114ec:	bd30      	pop	{r4, r5, pc}
 80114ee:	bf00      	nop

080114f0 <uxr_create_session>:
 80114f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f4:	f100 0b08 	add.w	fp, r0, #8
 80114f8:	b0ab      	sub	sp, #172	@ 0xac
 80114fa:	4604      	mov	r4, r0
 80114fc:	4658      	mov	r0, fp
 80114fe:	f000 ff2b 	bl	8012358 <uxr_reset_stream_storage>
 8011502:	4620      	mov	r0, r4
 8011504:	f000 fa00 	bl	8011908 <uxr_session_header_offset>
 8011508:	2300      	movs	r3, #0
 801150a:	9000      	str	r0, [sp, #0]
 801150c:	221c      	movs	r2, #28
 801150e:	a90b      	add	r1, sp, #44	@ 0x2c
 8011510:	a812      	add	r0, sp, #72	@ 0x48
 8011512:	f7fa ffdf 	bl	800c4d4 <ucdr_init_buffer_origin_offset>
 8011516:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011518:	8a1a      	ldrh	r2, [r3, #16]
 801151a:	3a04      	subs	r2, #4
 801151c:	b292      	uxth	r2, r2
 801151e:	a912      	add	r1, sp, #72	@ 0x48
 8011520:	4620      	mov	r0, r4
 8011522:	f000 f917 	bl	8011754 <uxr_buffer_create_session>
 8011526:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011528:	4620      	mov	r0, r4
 801152a:	f000 f983 	bl	8011834 <uxr_stamp_create_session_header>
 801152e:	a812      	add	r0, sp, #72	@ 0x48
 8011530:	f7fb f80e 	bl	800c550 <ucdr_buffer_length>
 8011534:	23ff      	movs	r3, #255	@ 0xff
 8011536:	7163      	strb	r3, [r4, #5]
 8011538:	230a      	movs	r3, #10
 801153a:	46da      	mov	sl, fp
 801153c:	9303      	str	r3, [sp, #12]
 801153e:	4683      	mov	fp, r0
 8011540:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011542:	465a      	mov	r2, fp
 8011544:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011548:	a90b      	add	r1, sp, #44	@ 0x2c
 801154a:	47a8      	blx	r5
 801154c:	f001 f824 	bl	8012598 <uxr_millis>
 8011550:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011554:	4605      	mov	r5, r0
 8011556:	e009      	b.n	801156c <uxr_create_session+0x7c>
 8011558:	f001 f81e 	bl	8012598 <uxr_millis>
 801155c:	1b40      	subs	r0, r0, r5
 801155e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011562:	2b00      	cmp	r3, #0
 8011564:	7962      	ldrb	r2, [r4, #5]
 8011566:	dd38      	ble.n	80115da <uxr_create_session+0xea>
 8011568:	2aff      	cmp	r2, #255	@ 0xff
 801156a:	d13c      	bne.n	80115e6 <uxr_create_session+0xf6>
 801156c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801156e:	a907      	add	r1, sp, #28
 8011570:	6896      	ldr	r6, [r2, #8]
 8011572:	6810      	ldr	r0, [r2, #0]
 8011574:	aa08      	add	r2, sp, #32
 8011576:	47b0      	blx	r6
 8011578:	2800      	cmp	r0, #0
 801157a:	d0ed      	beq.n	8011558 <uxr_create_session+0x68>
 801157c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011580:	a81a      	add	r0, sp, #104	@ 0x68
 8011582:	f7fa ffb9 	bl	800c4f8 <ucdr_init_buffer>
 8011586:	2600      	movs	r6, #0
 8011588:	f10d 031a 	add.w	r3, sp, #26
 801158c:	aa06      	add	r2, sp, #24
 801158e:	a91a      	add	r1, sp, #104	@ 0x68
 8011590:	4620      	mov	r0, r4
 8011592:	f88d 6018 	strb.w	r6, [sp, #24]
 8011596:	f000 f975 	bl	8011884 <uxr_read_session_header>
 801159a:	2800      	cmp	r0, #0
 801159c:	d0dc      	beq.n	8011558 <uxr_create_session+0x68>
 801159e:	4631      	mov	r1, r6
 80115a0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80115a4:	f000 fea4 	bl	80122f0 <uxr_stream_id_from_raw>
 80115a8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80115ac:	2e01      	cmp	r6, #1
 80115ae:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80115b2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80115b6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80115ba:	d053      	beq.n	8011664 <uxr_create_session+0x174>
 80115bc:	2e02      	cmp	r6, #2
 80115be:	d018      	beq.n	80115f2 <uxr_create_session+0x102>
 80115c0:	2e00      	cmp	r6, #0
 80115c2:	d1c9      	bne.n	8011558 <uxr_create_session+0x68>
 80115c4:	4631      	mov	r1, r6
 80115c6:	4630      	mov	r0, r6
 80115c8:	f000 fe92 	bl	80122f0 <uxr_stream_id_from_raw>
 80115cc:	a91a      	add	r1, sp, #104	@ 0x68
 80115ce:	4602      	mov	r2, r0
 80115d0:	900a      	str	r0, [sp, #40]	@ 0x28
 80115d2:	4620      	mov	r0, r4
 80115d4:	f7ff fac4 	bl	8010b60 <read_submessage_list>
 80115d8:	e7be      	b.n	8011558 <uxr_create_session+0x68>
 80115da:	9b03      	ldr	r3, [sp, #12]
 80115dc:	3b01      	subs	r3, #1
 80115de:	9303      	str	r3, [sp, #12]
 80115e0:	d001      	beq.n	80115e6 <uxr_create_session+0xf6>
 80115e2:	2aff      	cmp	r2, #255	@ 0xff
 80115e4:	d0ac      	beq.n	8011540 <uxr_create_session+0x50>
 80115e6:	2a00      	cmp	r2, #0
 80115e8:	d051      	beq.n	801168e <uxr_create_session+0x19e>
 80115ea:	2000      	movs	r0, #0
 80115ec:	b02b      	add	sp, #172	@ 0xac
 80115ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115f2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80115f6:	9304      	str	r3, [sp, #16]
 80115f8:	4639      	mov	r1, r7
 80115fa:	4650      	mov	r0, sl
 80115fc:	f000 ff66 	bl	80124cc <uxr_get_input_reliable_stream>
 8011600:	4680      	mov	r8, r0
 8011602:	b348      	cbz	r0, 8011658 <uxr_create_session+0x168>
 8011604:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011606:	9205      	str	r2, [sp, #20]
 8011608:	a81a      	add	r0, sp, #104	@ 0x68
 801160a:	f7fa ffa5 	bl	800c558 <ucdr_buffer_remaining>
 801160e:	4603      	mov	r3, r0
 8011610:	f10d 0019 	add.w	r0, sp, #25
 8011614:	9000      	str	r0, [sp, #0]
 8011616:	9a05      	ldr	r2, [sp, #20]
 8011618:	4649      	mov	r1, r9
 801161a:	4640      	mov	r0, r8
 801161c:	f006 fb7e 	bl	8017d1c <uxr_receive_reliable_message>
 8011620:	b1d0      	cbz	r0, 8011658 <uxr_create_session+0x168>
 8011622:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d038      	beq.n	801169c <uxr_create_session+0x1ac>
 801162a:	9e04      	ldr	r6, [sp, #16]
 801162c:	e00a      	b.n	8011644 <uxr_create_session+0x154>
 801162e:	f04f 0302 	mov.w	r3, #2
 8011632:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8011636:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 801163a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801163e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011640:	f7ff fa8e 	bl	8010b60 <read_submessage_list>
 8011644:	a922      	add	r1, sp, #136	@ 0x88
 8011646:	2204      	movs	r2, #4
 8011648:	4640      	mov	r0, r8
 801164a:	f006 fbe7 	bl	8017e1c <uxr_next_input_reliable_buffer_available>
 801164e:	4603      	mov	r3, r0
 8011650:	a922      	add	r1, sp, #136	@ 0x88
 8011652:	4620      	mov	r0, r4
 8011654:	2b00      	cmp	r3, #0
 8011656:	d1ea      	bne.n	801162e <uxr_create_session+0x13e>
 8011658:	9904      	ldr	r1, [sp, #16]
 801165a:	463a      	mov	r2, r7
 801165c:	4620      	mov	r0, r4
 801165e:	f7ff f8e9 	bl	8010834 <write_submessage_acknack.isra.0>
 8011662:	e779      	b.n	8011558 <uxr_create_session+0x68>
 8011664:	4639      	mov	r1, r7
 8011666:	4650      	mov	r0, sl
 8011668:	f000 ff26 	bl	80124b8 <uxr_get_input_best_effort_stream>
 801166c:	2800      	cmp	r0, #0
 801166e:	f43f af73 	beq.w	8011558 <uxr_create_session+0x68>
 8011672:	4649      	mov	r1, r9
 8011674:	f006 fabe 	bl	8017bf4 <uxr_receive_best_effort_message>
 8011678:	2800      	cmp	r0, #0
 801167a:	f43f af6d 	beq.w	8011558 <uxr_create_session+0x68>
 801167e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011682:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011684:	a91a      	add	r1, sp, #104	@ 0x68
 8011686:	4620      	mov	r0, r4
 8011688:	f7ff fa6a 	bl	8010b60 <read_submessage_list>
 801168c:	e764      	b.n	8011558 <uxr_create_session+0x68>
 801168e:	4650      	mov	r0, sl
 8011690:	f000 fe62 	bl	8012358 <uxr_reset_stream_storage>
 8011694:	2001      	movs	r0, #1
 8011696:	b02b      	add	sp, #172	@ 0xac
 8011698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801169c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80116a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80116a2:	a91a      	add	r1, sp, #104	@ 0x68
 80116a4:	4620      	mov	r0, r4
 80116a6:	f7ff fa5b 	bl	8010b60 <read_submessage_list>
 80116aa:	e7be      	b.n	801162a <uxr_create_session+0x13a>

080116ac <uxr_prepare_stream_to_write_submessage>:
 80116ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116b0:	b082      	sub	sp, #8
 80116b2:	4682      	mov	sl, r0
 80116b4:	4610      	mov	r0, r2
 80116b6:	4615      	mov	r5, r2
 80116b8:	461e      	mov	r6, r3
 80116ba:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80116be:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80116c2:	9101      	str	r1, [sp, #4]
 80116c4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80116c8:	f000 ff60 	bl	801258c <uxr_submessage_padding>
 80116cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80116d0:	f105 0904 	add.w	r9, r5, #4
 80116d4:	2b01      	cmp	r3, #1
 80116d6:	4481      	add	r9, r0
 80116d8:	d01d      	beq.n	8011716 <uxr_prepare_stream_to_write_submessage+0x6a>
 80116da:	2b02      	cmp	r3, #2
 80116dc:	d116      	bne.n	801170c <uxr_prepare_stream_to_write_submessage+0x60>
 80116de:	4621      	mov	r1, r4
 80116e0:	f10a 0008 	add.w	r0, sl, #8
 80116e4:	f000 fede 	bl	80124a4 <uxr_get_output_reliable_stream>
 80116e8:	4604      	mov	r4, r0
 80116ea:	b158      	cbz	r0, 8011704 <uxr_prepare_stream_to_write_submessage+0x58>
 80116ec:	4649      	mov	r1, r9
 80116ee:	4632      	mov	r2, r6
 80116f0:	f006 fd50 	bl	8018194 <uxr_prepare_reliable_buffer_to_write>
 80116f4:	4604      	mov	r4, r0
 80116f6:	b12c      	cbz	r4, 8011704 <uxr_prepare_stream_to_write_submessage+0x58>
 80116f8:	4643      	mov	r3, r8
 80116fa:	b2aa      	uxth	r2, r5
 80116fc:	4639      	mov	r1, r7
 80116fe:	4630      	mov	r0, r6
 8011700:	f000 ff04 	bl	801250c <uxr_buffer_submessage_header>
 8011704:	4620      	mov	r0, r4
 8011706:	b002      	add	sp, #8
 8011708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801170c:	2400      	movs	r4, #0
 801170e:	4620      	mov	r0, r4
 8011710:	b002      	add	sp, #8
 8011712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011716:	4621      	mov	r1, r4
 8011718:	f10a 0008 	add.w	r0, sl, #8
 801171c:	f000 feba 	bl	8012494 <uxr_get_output_best_effort_stream>
 8011720:	4604      	mov	r4, r0
 8011722:	2800      	cmp	r0, #0
 8011724:	d0ee      	beq.n	8011704 <uxr_prepare_stream_to_write_submessage+0x58>
 8011726:	4649      	mov	r1, r9
 8011728:	4632      	mov	r2, r6
 801172a:	f006 fc63 	bl	8017ff4 <uxr_prepare_best_effort_buffer_to_write>
 801172e:	4604      	mov	r4, r0
 8011730:	e7e1      	b.n	80116f6 <uxr_prepare_stream_to_write_submessage+0x4a>
 8011732:	bf00      	nop

08011734 <uxr_init_session_info>:
 8011734:	0e13      	lsrs	r3, r2, #24
 8011736:	7043      	strb	r3, [r0, #1]
 8011738:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801173c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011740:	7001      	strb	r1, [r0, #0]
 8011742:	70c3      	strb	r3, [r0, #3]
 8011744:	2109      	movs	r1, #9
 8011746:	23ff      	movs	r3, #255	@ 0xff
 8011748:	f880 c002 	strb.w	ip, [r0, #2]
 801174c:	7102      	strb	r2, [r0, #4]
 801174e:	80c1      	strh	r1, [r0, #6]
 8011750:	7143      	strb	r3, [r0, #5]
 8011752:	4770      	bx	lr

08011754 <uxr_buffer_create_session>:
 8011754:	b530      	push	{r4, r5, lr}
 8011756:	b089      	sub	sp, #36	@ 0x24
 8011758:	2300      	movs	r3, #0
 801175a:	4d12      	ldr	r5, [pc, #72]	@ (80117a4 <uxr_buffer_create_session+0x50>)
 801175c:	9307      	str	r3, [sp, #28]
 801175e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011762:	2201      	movs	r2, #1
 8011764:	9301      	str	r3, [sp, #4]
 8011766:	80c2      	strh	r2, [r0, #6]
 8011768:	f88d 2004 	strb.w	r2, [sp, #4]
 801176c:	682a      	ldr	r2, [r5, #0]
 801176e:	9200      	str	r2, [sp, #0]
 8011770:	88aa      	ldrh	r2, [r5, #4]
 8011772:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011776:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801177a:	9202      	str	r2, [sp, #8]
 801177c:	460c      	mov	r4, r1
 801177e:	7802      	ldrb	r2, [r0, #0]
 8011780:	9303      	str	r3, [sp, #12]
 8011782:	4619      	mov	r1, r3
 8011784:	f88d 200c 	strb.w	r2, [sp, #12]
 8011788:	4620      	mov	r0, r4
 801178a:	2210      	movs	r2, #16
 801178c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011790:	9306      	str	r3, [sp, #24]
 8011792:	f000 febb 	bl	801250c <uxr_buffer_submessage_header>
 8011796:	4669      	mov	r1, sp
 8011798:	4620      	mov	r0, r4
 801179a:	f001 fe47 	bl	801342c <uxr_serialize_CREATE_CLIENT_Payload>
 801179e:	b009      	add	sp, #36	@ 0x24
 80117a0:	bd30      	pop	{r4, r5, pc}
 80117a2:	bf00      	nop
 80117a4:	0801aed8 	.word	0x0801aed8

080117a8 <uxr_buffer_delete_session>:
 80117a8:	b510      	push	{r4, lr}
 80117aa:	4b0c      	ldr	r3, [pc, #48]	@ (80117dc <uxr_buffer_delete_session+0x34>)
 80117ac:	b082      	sub	sp, #8
 80117ae:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 80117b2:	f8ad c006 	strh.w	ip, [sp, #6]
 80117b6:	460c      	mov	r4, r1
 80117b8:	2202      	movs	r2, #2
 80117ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80117be:	80c2      	strh	r2, [r0, #6]
 80117c0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80117c4:	2204      	movs	r2, #4
 80117c6:	2300      	movs	r3, #0
 80117c8:	2103      	movs	r1, #3
 80117ca:	4620      	mov	r0, r4
 80117cc:	f000 fe9e 	bl	801250c <uxr_buffer_submessage_header>
 80117d0:	a901      	add	r1, sp, #4
 80117d2:	4620      	mov	r0, r4
 80117d4:	f001 fed0 	bl	8013578 <uxr_serialize_DELETE_Payload>
 80117d8:	b002      	add	sp, #8
 80117da:	bd10      	pop	{r4, pc}
 80117dc:	0801aed8 	.word	0x0801aed8

080117e0 <uxr_read_create_session_status>:
 80117e0:	b510      	push	{r4, lr}
 80117e2:	b088      	sub	sp, #32
 80117e4:	4604      	mov	r4, r0
 80117e6:	4608      	mov	r0, r1
 80117e8:	a901      	add	r1, sp, #4
 80117ea:	f001 fed5 	bl	8013598 <uxr_deserialize_STATUS_AGENT_Payload>
 80117ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80117f2:	7163      	strb	r3, [r4, #5]
 80117f4:	b008      	add	sp, #32
 80117f6:	bd10      	pop	{r4, pc}

080117f8 <uxr_read_delete_session_status>:
 80117f8:	b510      	push	{r4, lr}
 80117fa:	4604      	mov	r4, r0
 80117fc:	b084      	sub	sp, #16
 80117fe:	4608      	mov	r0, r1
 8011800:	a902      	add	r1, sp, #8
 8011802:	f001 fef9 	bl	80135f8 <uxr_deserialize_STATUS_Payload>
 8011806:	88e3      	ldrh	r3, [r4, #6]
 8011808:	2b02      	cmp	r3, #2
 801180a:	d001      	beq.n	8011810 <uxr_read_delete_session_status+0x18>
 801180c:	b004      	add	sp, #16
 801180e:	bd10      	pop	{r4, pc}
 8011810:	f10d 000a 	add.w	r0, sp, #10
 8011814:	f7fe fe64 	bl	80104e0 <uxr_object_id_from_raw>
 8011818:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801181c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011820:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011824:	b29b      	uxth	r3, r3
 8011826:	2b02      	cmp	r3, #2
 8011828:	bf04      	itt	eq
 801182a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801182e:	7163      	strbeq	r3, [r4, #5]
 8011830:	b004      	add	sp, #16
 8011832:	bd10      	pop	{r4, pc}

08011834 <uxr_stamp_create_session_header>:
 8011834:	b510      	push	{r4, lr}
 8011836:	2208      	movs	r2, #8
 8011838:	b08a      	sub	sp, #40	@ 0x28
 801183a:	4604      	mov	r4, r0
 801183c:	eb0d 0002 	add.w	r0, sp, r2
 8011840:	f7fa fe5a 	bl	800c4f8 <ucdr_init_buffer>
 8011844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011848:	9400      	str	r4, [sp, #0]
 801184a:	2300      	movs	r3, #0
 801184c:	461a      	mov	r2, r3
 801184e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011852:	a802      	add	r0, sp, #8
 8011854:	f001 f854 	bl	8012900 <uxr_serialize_message_header>
 8011858:	b00a      	add	sp, #40	@ 0x28
 801185a:	bd10      	pop	{r4, pc}

0801185c <uxr_stamp_session_header>:
 801185c:	b530      	push	{r4, r5, lr}
 801185e:	b08d      	sub	sp, #52	@ 0x34
 8011860:	4604      	mov	r4, r0
 8011862:	460d      	mov	r5, r1
 8011864:	9203      	str	r2, [sp, #12]
 8011866:	4619      	mov	r1, r3
 8011868:	a804      	add	r0, sp, #16
 801186a:	2208      	movs	r2, #8
 801186c:	f7fa fe44 	bl	800c4f8 <ucdr_init_buffer>
 8011870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011874:	9b03      	ldr	r3, [sp, #12]
 8011876:	9400      	str	r4, [sp, #0]
 8011878:	462a      	mov	r2, r5
 801187a:	a804      	add	r0, sp, #16
 801187c:	f001 f840 	bl	8012900 <uxr_serialize_message_header>
 8011880:	b00d      	add	sp, #52	@ 0x34
 8011882:	bd30      	pop	{r4, r5, pc}

08011884 <uxr_read_session_header>:
 8011884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011888:	4607      	mov	r7, r0
 801188a:	b084      	sub	sp, #16
 801188c:	4608      	mov	r0, r1
 801188e:	460c      	mov	r4, r1
 8011890:	4615      	mov	r5, r2
 8011892:	461e      	mov	r6, r3
 8011894:	f7fa fe60 	bl	800c558 <ucdr_buffer_remaining>
 8011898:	2808      	cmp	r0, #8
 801189a:	d803      	bhi.n	80118a4 <uxr_read_session_header+0x20>
 801189c:	2000      	movs	r0, #0
 801189e:	b004      	add	sp, #16
 80118a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118a4:	f10d 080c 	add.w	r8, sp, #12
 80118a8:	4633      	mov	r3, r6
 80118aa:	462a      	mov	r2, r5
 80118ac:	f8cd 8000 	str.w	r8, [sp]
 80118b0:	4620      	mov	r0, r4
 80118b2:	f10d 010b 	add.w	r1, sp, #11
 80118b6:	f001 f841 	bl	801293c <uxr_deserialize_message_header>
 80118ba:	783a      	ldrb	r2, [r7, #0]
 80118bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80118c0:	4293      	cmp	r3, r2
 80118c2:	d1eb      	bne.n	801189c <uxr_read_session_header+0x18>
 80118c4:	061b      	lsls	r3, r3, #24
 80118c6:	d41c      	bmi.n	8011902 <uxr_read_session_header+0x7e>
 80118c8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80118cc:	787b      	ldrb	r3, [r7, #1]
 80118ce:	429a      	cmp	r2, r3
 80118d0:	d003      	beq.n	80118da <uxr_read_session_header+0x56>
 80118d2:	2001      	movs	r0, #1
 80118d4:	f080 0001 	eor.w	r0, r0, #1
 80118d8:	e7e1      	b.n	801189e <uxr_read_session_header+0x1a>
 80118da:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80118de:	78bb      	ldrb	r3, [r7, #2]
 80118e0:	429a      	cmp	r2, r3
 80118e2:	f107 0102 	add.w	r1, r7, #2
 80118e6:	d1f4      	bne.n	80118d2 <uxr_read_session_header+0x4e>
 80118e8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80118ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d1ee      	bne.n	80118d2 <uxr_read_session_header+0x4e>
 80118f4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80118f8:	784b      	ldrb	r3, [r1, #1]
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d1e9      	bne.n	80118d2 <uxr_read_session_header+0x4e>
 80118fe:	2000      	movs	r0, #0
 8011900:	e7e8      	b.n	80118d4 <uxr_read_session_header+0x50>
 8011902:	2001      	movs	r0, #1
 8011904:	e7cb      	b.n	801189e <uxr_read_session_header+0x1a>
 8011906:	bf00      	nop

08011908 <uxr_session_header_offset>:
 8011908:	f990 3000 	ldrsb.w	r3, [r0]
 801190c:	2b00      	cmp	r3, #0
 801190e:	bfac      	ite	ge
 8011910:	2008      	movge	r0, #8
 8011912:	2004      	movlt	r0, #4
 8011914:	4770      	bx	lr
 8011916:	bf00      	nop

08011918 <uxr_init_base_object_request>:
 8011918:	b510      	push	{r4, lr}
 801191a:	88c3      	ldrh	r3, [r0, #6]
 801191c:	b082      	sub	sp, #8
 801191e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8011922:	9101      	str	r1, [sp, #4]
 8011924:	f1a3 010a 	sub.w	r1, r3, #10
 8011928:	b289      	uxth	r1, r1
 801192a:	42a1      	cmp	r1, r4
 801192c:	d80e      	bhi.n	801194c <uxr_init_base_object_request+0x34>
 801192e:	3301      	adds	r3, #1
 8011930:	b29c      	uxth	r4, r3
 8011932:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011936:	b2db      	uxtb	r3, r3
 8011938:	80c4      	strh	r4, [r0, #6]
 801193a:	9801      	ldr	r0, [sp, #4]
 801193c:	7011      	strb	r1, [r2, #0]
 801193e:	7053      	strb	r3, [r2, #1]
 8011940:	1c91      	adds	r1, r2, #2
 8011942:	f7fe fde1 	bl	8010508 <uxr_object_id_to_raw>
 8011946:	4620      	mov	r0, r4
 8011948:	b002      	add	sp, #8
 801194a:	bd10      	pop	{r4, pc}
 801194c:	230a      	movs	r3, #10
 801194e:	2100      	movs	r1, #0
 8011950:	461c      	mov	r4, r3
 8011952:	e7f1      	b.n	8011938 <uxr_init_base_object_request+0x20>

08011954 <uxr_parse_base_object_request>:
 8011954:	b570      	push	{r4, r5, r6, lr}
 8011956:	4604      	mov	r4, r0
 8011958:	3002      	adds	r0, #2
 801195a:	460d      	mov	r5, r1
 801195c:	4616      	mov	r6, r2
 801195e:	f7fe fdbf 	bl	80104e0 <uxr_object_id_from_raw>
 8011962:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011966:	8028      	strh	r0, [r5, #0]
 8011968:	806b      	strh	r3, [r5, #2]
 801196a:	7822      	ldrb	r2, [r4, #0]
 801196c:	7863      	ldrb	r3, [r4, #1]
 801196e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011972:	8033      	strh	r3, [r6, #0]
 8011974:	bd70      	pop	{r4, r5, r6, pc}
 8011976:	bf00      	nop

08011978 <uxr_init_framing_io>:
 8011978:	2300      	movs	r3, #0
 801197a:	7041      	strb	r1, [r0, #1]
 801197c:	7003      	strb	r3, [r0, #0]
 801197e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011980:	4770      	bx	lr
 8011982:	bf00      	nop

08011984 <uxr_write_framed_msg>:
 8011984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011988:	4617      	mov	r7, r2
 801198a:	7842      	ldrb	r2, [r0, #1]
 801198c:	b083      	sub	sp, #12
 801198e:	460e      	mov	r6, r1
 8011990:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8011994:	469a      	mov	sl, r3
 8011996:	2901      	cmp	r1, #1
 8011998:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 801199c:	4604      	mov	r4, r0
 801199e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80119a2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80119a6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80119aa:	f240 8137 	bls.w	8011c1c <uxr_write_framed_msg+0x298>
 80119ae:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80119b2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80119b6:	2901      	cmp	r1, #1
 80119b8:	f04f 0202 	mov.w	r2, #2
 80119bc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80119c0:	f240 808f 	bls.w	8011ae2 <uxr_write_framed_msg+0x15e>
 80119c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80119c6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80119ca:	b2dd      	uxtb	r5, r3
 80119cc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80119d0:	2203      	movs	r2, #3
 80119d2:	2901      	cmp	r1, #1
 80119d4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80119d8:	f240 809a 	bls.w	8011b10 <uxr_write_framed_msg+0x18c>
 80119dc:	18a1      	adds	r1, r4, r2
 80119de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80119e0:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80119e4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80119e8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80119ec:	3201      	adds	r2, #1
 80119ee:	2801      	cmp	r0, #1
 80119f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80119f4:	f240 80a0 	bls.w	8011b38 <uxr_write_framed_msg+0x1b4>
 80119f8:	18a0      	adds	r0, r4, r2
 80119fa:	3201      	adds	r2, #1
 80119fc:	b2d2      	uxtb	r2, r2
 80119fe:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011a02:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	f000 80a9 	beq.w	8011b5e <uxr_write_framed_msg+0x1da>
 8011a0c:	f04f 0900 	mov.w	r9, #0
 8011a10:	46c8      	mov	r8, r9
 8011a12:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011a16:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011a1a:	2901      	cmp	r1, #1
 8011a1c:	f240 80c3 	bls.w	8011ba6 <uxr_write_framed_msg+0x222>
 8011a20:	2a29      	cmp	r2, #41	@ 0x29
 8011a22:	f200 809f 	bhi.w	8011b64 <uxr_write_framed_msg+0x1e0>
 8011a26:	18a1      	adds	r1, r4, r2
 8011a28:	3201      	adds	r2, #1
 8011a2a:	b2d2      	uxtb	r2, r2
 8011a2c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8011a30:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011a34:	ea89 0303 	eor.w	r3, r9, r3
 8011a38:	498c      	ldr	r1, [pc, #560]	@ (8011c6c <uxr_write_framed_msg+0x2e8>)
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	f108 0801 	add.w	r8, r8, #1
 8011a40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011a44:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8011a48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011a4a:	4543      	cmp	r3, r8
 8011a4c:	d8e1      	bhi.n	8011a12 <uxr_write_framed_msg+0x8e>
 8011a4e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011a52:	fa5f f889 	uxtb.w	r8, r9
 8011a56:	9301      	str	r3, [sp, #4]
 8011a58:	f04f 0900 	mov.w	r9, #0
 8011a5c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8011a60:	fa5f f18a 	uxtb.w	r1, sl
 8011a64:	2901      	cmp	r1, #1
 8011a66:	d921      	bls.n	8011aac <uxr_write_framed_msg+0x128>
 8011a68:	2a29      	cmp	r2, #41	@ 0x29
 8011a6a:	f240 80af 	bls.w	8011bcc <uxr_write_framed_msg+0x248>
 8011a6e:	2500      	movs	r5, #0
 8011a70:	e000      	b.n	8011a74 <uxr_write_framed_msg+0xf0>
 8011a72:	b160      	cbz	r0, 8011a8e <uxr_write_framed_msg+0x10a>
 8011a74:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011a78:	1b52      	subs	r2, r2, r5
 8011a7a:	465b      	mov	r3, fp
 8011a7c:	4421      	add	r1, r4
 8011a7e:	4638      	mov	r0, r7
 8011a80:	47b0      	blx	r6
 8011a82:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011a86:	4405      	add	r5, r0
 8011a88:	4295      	cmp	r5, r2
 8011a8a:	d3f2      	bcc.n	8011a72 <uxr_write_framed_msg+0xee>
 8011a8c:	d003      	beq.n	8011a96 <uxr_write_framed_msg+0x112>
 8011a8e:	2000      	movs	r0, #0
 8011a90:	b003      	add	sp, #12
 8011a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a96:	fa5f f18a 	uxtb.w	r1, sl
 8011a9a:	f04f 0300 	mov.w	r3, #0
 8011a9e:	2901      	cmp	r1, #1
 8011aa0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011aa4:	f04f 0200 	mov.w	r2, #0
 8011aa8:	f200 8090 	bhi.w	8011bcc <uxr_write_framed_msg+0x248>
 8011aac:	1c51      	adds	r1, r2, #1
 8011aae:	b2c9      	uxtb	r1, r1
 8011ab0:	2929      	cmp	r1, #41	@ 0x29
 8011ab2:	d8dc      	bhi.n	8011a6e <uxr_write_framed_msg+0xea>
 8011ab4:	18a5      	adds	r5, r4, r2
 8011ab6:	4421      	add	r1, r4
 8011ab8:	3202      	adds	r2, #2
 8011aba:	f088 0820 	eor.w	r8, r8, #32
 8011abe:	4648      	mov	r0, r9
 8011ac0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8011ac4:	b2d2      	uxtb	r2, r2
 8011ac6:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8011aca:	f04f 0901 	mov.w	r9, #1
 8011ace:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011ad2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011ad6:	2800      	cmp	r0, #0
 8011ad8:	f040 8085 	bne.w	8011be6 <uxr_write_framed_msg+0x262>
 8011adc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011ae0:	e7bc      	b.n	8011a5c <uxr_write_framed_msg+0xd8>
 8011ae2:	4611      	mov	r1, r2
 8011ae4:	f04f 0c03 	mov.w	ip, #3
 8011ae8:	2204      	movs	r2, #4
 8011aea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011aec:	4421      	add	r1, r4
 8011aee:	b2dd      	uxtb	r5, r3
 8011af0:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8011af4:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8011af8:	44a4      	add	ip, r4
 8011afa:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011afe:	f080 0020 	eor.w	r0, r0, #32
 8011b02:	2901      	cmp	r1, #1
 8011b04:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8011b08:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011b0c:	f63f af66 	bhi.w	80119dc <uxr_write_framed_msg+0x58>
 8011b10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011b12:	18a0      	adds	r0, r4, r2
 8011b14:	f085 0520 	eor.w	r5, r5, #32
 8011b18:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011b1c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011b20:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8011b24:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8011b28:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011b2c:	3202      	adds	r2, #2
 8011b2e:	2801      	cmp	r0, #1
 8011b30:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011b34:	f63f af60 	bhi.w	80119f8 <uxr_write_framed_msg+0x74>
 8011b38:	1c50      	adds	r0, r2, #1
 8011b3a:	18a5      	adds	r5, r4, r2
 8011b3c:	fa54 f080 	uxtab	r0, r4, r0
 8011b40:	3202      	adds	r2, #2
 8011b42:	f081 0120 	eor.w	r1, r1, #32
 8011b46:	b2d2      	uxtb	r2, r2
 8011b48:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011b4c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8011b50:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011b54:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	f47f af57 	bne.w	8011a0c <uxr_write_framed_msg+0x88>
 8011b5e:	9301      	str	r3, [sp, #4]
 8011b60:	4698      	mov	r8, r3
 8011b62:	e779      	b.n	8011a58 <uxr_write_framed_msg+0xd4>
 8011b64:	2500      	movs	r5, #0
 8011b66:	e001      	b.n	8011b6c <uxr_write_framed_msg+0x1e8>
 8011b68:	2800      	cmp	r0, #0
 8011b6a:	d090      	beq.n	8011a8e <uxr_write_framed_msg+0x10a>
 8011b6c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011b70:	1b52      	subs	r2, r2, r5
 8011b72:	465b      	mov	r3, fp
 8011b74:	4421      	add	r1, r4
 8011b76:	4638      	mov	r0, r7
 8011b78:	47b0      	blx	r6
 8011b7a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011b7e:	4405      	add	r5, r0
 8011b80:	4295      	cmp	r5, r2
 8011b82:	d3f1      	bcc.n	8011b68 <uxr_write_framed_msg+0x1e4>
 8011b84:	d183      	bne.n	8011a8e <uxr_write_framed_msg+0x10a>
 8011b86:	f04f 0300 	mov.w	r3, #0
 8011b8a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011b8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011b90:	4543      	cmp	r3, r8
 8011b92:	d964      	bls.n	8011c5e <uxr_write_framed_msg+0x2da>
 8011b94:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011b98:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011b9c:	2901      	cmp	r1, #1
 8011b9e:	f04f 0200 	mov.w	r2, #0
 8011ba2:	f63f af3d 	bhi.w	8011a20 <uxr_write_framed_msg+0x9c>
 8011ba6:	1c51      	adds	r1, r2, #1
 8011ba8:	b2c9      	uxtb	r1, r1
 8011baa:	2929      	cmp	r1, #41	@ 0x29
 8011bac:	d8da      	bhi.n	8011b64 <uxr_write_framed_msg+0x1e0>
 8011bae:	18a0      	adds	r0, r4, r2
 8011bb0:	4421      	add	r1, r4
 8011bb2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8011bb6:	3202      	adds	r2, #2
 8011bb8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8011bbc:	b2d2      	uxtb	r2, r2
 8011bbe:	f083 0020 	eor.w	r0, r3, #32
 8011bc2:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8011bc6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011bca:	e733      	b.n	8011a34 <uxr_write_framed_msg+0xb0>
 8011bcc:	18a1      	adds	r1, r4, r2
 8011bce:	3201      	adds	r2, #1
 8011bd0:	4648      	mov	r0, r9
 8011bd2:	b2d2      	uxtb	r2, r2
 8011bd4:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011bd8:	f04f 0901 	mov.w	r9, #1
 8011bdc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011be0:	2800      	cmp	r0, #0
 8011be2:	f43f af7b 	beq.w	8011adc <uxr_write_framed_msg+0x158>
 8011be6:	2500      	movs	r5, #0
 8011be8:	e002      	b.n	8011bf0 <uxr_write_framed_msg+0x26c>
 8011bea:	2800      	cmp	r0, #0
 8011bec:	f43f af4f 	beq.w	8011a8e <uxr_write_framed_msg+0x10a>
 8011bf0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011bf4:	1b52      	subs	r2, r2, r5
 8011bf6:	465b      	mov	r3, fp
 8011bf8:	4421      	add	r1, r4
 8011bfa:	4638      	mov	r0, r7
 8011bfc:	47b0      	blx	r6
 8011bfe:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011c02:	4405      	add	r5, r0
 8011c04:	4295      	cmp	r5, r2
 8011c06:	d3f0      	bcc.n	8011bea <uxr_write_framed_msg+0x266>
 8011c08:	f47f af41 	bne.w	8011a8e <uxr_write_framed_msg+0x10a>
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011c12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c14:	b298      	uxth	r0, r3
 8011c16:	b003      	add	sp, #12
 8011c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c1c:	217d      	movs	r1, #125	@ 0x7d
 8011c1e:	f082 0220 	eor.w	r2, r2, #32
 8011c22:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8011c26:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011c2a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8011c2e:	2901      	cmp	r1, #1
 8011c30:	f04f 0203 	mov.w	r2, #3
 8011c34:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011c38:	d804      	bhi.n	8011c44 <uxr_write_framed_msg+0x2c0>
 8011c3a:	4611      	mov	r1, r2
 8011c3c:	f04f 0c04 	mov.w	ip, #4
 8011c40:	2205      	movs	r2, #5
 8011c42:	e752      	b.n	8011aea <uxr_write_framed_msg+0x166>
 8011c44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c46:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8011c4a:	b2dd      	uxtb	r5, r3
 8011c4c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011c50:	2204      	movs	r2, #4
 8011c52:	2901      	cmp	r1, #1
 8011c54:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011c58:	f63f aec0 	bhi.w	80119dc <uxr_write_framed_msg+0x58>
 8011c5c:	e758      	b.n	8011b10 <uxr_write_framed_msg+0x18c>
 8011c5e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011c62:	fa5f f889 	uxtb.w	r8, r9
 8011c66:	9301      	str	r3, [sp, #4]
 8011c68:	2200      	movs	r2, #0
 8011c6a:	e6f5      	b.n	8011a58 <uxr_write_framed_msg+0xd4>
 8011c6c:	0801bcfc 	.word	0x0801bcfc

08011c70 <uxr_framing_read_transport>:
 8011c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c74:	4604      	mov	r4, r0
 8011c76:	b083      	sub	sp, #12
 8011c78:	461f      	mov	r7, r3
 8011c7a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8011c7e:	4689      	mov	r9, r1
 8011c80:	4692      	mov	sl, r2
 8011c82:	f000 fc89 	bl	8012598 <uxr_millis>
 8011c86:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011c8a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8011c8e:	42b3      	cmp	r3, r6
 8011c90:	4680      	mov	r8, r0
 8011c92:	d061      	beq.n	8011d58 <uxr_framing_read_transport+0xe8>
 8011c94:	d81c      	bhi.n	8011cd0 <uxr_framing_read_transport+0x60>
 8011c96:	1e75      	subs	r5, r6, #1
 8011c98:	1aed      	subs	r5, r5, r3
 8011c9a:	b2ed      	uxtb	r5, r5
 8011c9c:	2600      	movs	r6, #0
 8011c9e:	455d      	cmp	r5, fp
 8011ca0:	d81f      	bhi.n	8011ce2 <uxr_framing_read_transport+0x72>
 8011ca2:	19ab      	adds	r3, r5, r6
 8011ca4:	455b      	cmp	r3, fp
 8011ca6:	bf84      	itt	hi
 8011ca8:	ebab 0605 	subhi.w	r6, fp, r5
 8011cac:	b2f6      	uxtbhi	r6, r6
 8011cae:	b9ed      	cbnz	r5, 8011cec <uxr_framing_read_transport+0x7c>
 8011cb0:	f04f 0b00 	mov.w	fp, #0
 8011cb4:	f000 fc70 	bl	8012598 <uxr_millis>
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	eba0 0808 	sub.w	r8, r0, r8
 8011cbe:	eba3 0308 	sub.w	r3, r3, r8
 8011cc2:	4658      	mov	r0, fp
 8011cc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011cc8:	603b      	str	r3, [r7, #0]
 8011cca:	b003      	add	sp, #12
 8011ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cd0:	2e00      	cmp	r6, #0
 8011cd2:	d049      	beq.n	8011d68 <uxr_framing_read_transport+0xf8>
 8011cd4:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8011cd8:	b2ed      	uxtb	r5, r5
 8011cda:	3e01      	subs	r6, #1
 8011cdc:	455d      	cmp	r5, fp
 8011cde:	b2f6      	uxtb	r6, r6
 8011ce0:	d9df      	bls.n	8011ca2 <uxr_framing_read_transport+0x32>
 8011ce2:	fa5f f58b 	uxtb.w	r5, fp
 8011ce6:	2600      	movs	r6, #0
 8011ce8:	2d00      	cmp	r5, #0
 8011cea:	d0e1      	beq.n	8011cb0 <uxr_framing_read_transport+0x40>
 8011cec:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011cf0:	3102      	adds	r1, #2
 8011cf2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011cf4:	9300      	str	r3, [sp, #0]
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	4421      	add	r1, r4
 8011cfa:	462a      	mov	r2, r5
 8011cfc:	4650      	mov	r0, sl
 8011cfe:	47c8      	blx	r9
 8011d00:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011d04:	4a1a      	ldr	r2, [pc, #104]	@ (8011d70 <uxr_framing_read_transport+0x100>)
 8011d06:	4403      	add	r3, r0
 8011d08:	0859      	lsrs	r1, r3, #1
 8011d0a:	fba2 2101 	umull	r2, r1, r2, r1
 8011d0e:	0889      	lsrs	r1, r1, #2
 8011d10:	222a      	movs	r2, #42	@ 0x2a
 8011d12:	fb02 3111 	mls	r1, r2, r1, r3
 8011d16:	4683      	mov	fp, r0
 8011d18:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8011d1c:	2800      	cmp	r0, #0
 8011d1e:	d0c7      	beq.n	8011cb0 <uxr_framing_read_transport+0x40>
 8011d20:	42a8      	cmp	r0, r5
 8011d22:	d1c7      	bne.n	8011cb4 <uxr_framing_read_transport+0x44>
 8011d24:	2e00      	cmp	r6, #0
 8011d26:	d0c5      	beq.n	8011cb4 <uxr_framing_read_transport+0x44>
 8011d28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d2a:	9300      	str	r3, [sp, #0]
 8011d2c:	3102      	adds	r1, #2
 8011d2e:	4632      	mov	r2, r6
 8011d30:	4421      	add	r1, r4
 8011d32:	2300      	movs	r3, #0
 8011d34:	4650      	mov	r0, sl
 8011d36:	47c8      	blx	r9
 8011d38:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011d3c:	4a0c      	ldr	r2, [pc, #48]	@ (8011d70 <uxr_framing_read_transport+0x100>)
 8011d3e:	180b      	adds	r3, r1, r0
 8011d40:	0859      	lsrs	r1, r3, #1
 8011d42:	fba2 1201 	umull	r1, r2, r2, r1
 8011d46:	0892      	lsrs	r2, r2, #2
 8011d48:	212a      	movs	r1, #42	@ 0x2a
 8011d4a:	fb01 3312 	mls	r3, r1, r2, r3
 8011d4e:	eb00 0b05 	add.w	fp, r0, r5
 8011d52:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8011d56:	e7ad      	b.n	8011cb4 <uxr_framing_read_transport+0x44>
 8011d58:	2600      	movs	r6, #0
 8011d5a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8011d5e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8011d60:	d9bf      	bls.n	8011ce2 <uxr_framing_read_transport+0x72>
 8011d62:	2102      	movs	r1, #2
 8011d64:	2529      	movs	r5, #41	@ 0x29
 8011d66:	e7c4      	b.n	8011cf2 <uxr_framing_read_transport+0x82>
 8011d68:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8011d6c:	b2ed      	uxtb	r5, r5
 8011d6e:	e796      	b.n	8011c9e <uxr_framing_read_transport+0x2e>
 8011d70:	30c30c31 	.word	0x30c30c31

08011d74 <uxr_read_framed_msg>:
 8011d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d78:	461e      	mov	r6, r3
 8011d7a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8011d7e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8011d82:	429d      	cmp	r5, r3
 8011d84:	b083      	sub	sp, #12
 8011d86:	4604      	mov	r4, r0
 8011d88:	4688      	mov	r8, r1
 8011d8a:	4691      	mov	r9, r2
 8011d8c:	f000 8188 	beq.w	80120a0 <uxr_read_framed_msg+0x32c>
 8011d90:	7823      	ldrb	r3, [r4, #0]
 8011d92:	4dc1      	ldr	r5, [pc, #772]	@ (8012098 <uxr_read_framed_msg+0x324>)
 8011d94:	4fc1      	ldr	r7, [pc, #772]	@ (801209c <uxr_read_framed_msg+0x328>)
 8011d96:	2b07      	cmp	r3, #7
 8011d98:	d8fd      	bhi.n	8011d96 <uxr_read_framed_msg+0x22>
 8011d9a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011d9e:	0115      	.short	0x0115
 8011da0:	00d600f6 	.word	0x00d600f6
 8011da4:	009000b9 	.word	0x009000b9
 8011da8:	0030004d 	.word	0x0030004d
 8011dac:	0008      	.short	0x0008
 8011dae:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011db2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011db6:	4299      	cmp	r1, r3
 8011db8:	f000 814a 	beq.w	8012050 <uxr_read_framed_msg+0x2dc>
 8011dbc:	18e2      	adds	r2, r4, r3
 8011dbe:	7892      	ldrb	r2, [r2, #2]
 8011dc0:	2a7d      	cmp	r2, #125	@ 0x7d
 8011dc2:	f000 8199 	beq.w	80120f8 <uxr_read_framed_msg+0x384>
 8011dc6:	3301      	adds	r3, #1
 8011dc8:	0858      	lsrs	r0, r3, #1
 8011dca:	fba5 1000 	umull	r1, r0, r5, r0
 8011dce:	0880      	lsrs	r0, r0, #2
 8011dd0:	212a      	movs	r1, #42	@ 0x2a
 8011dd2:	fb01 3310 	mls	r3, r1, r0, r3
 8011dd6:	2a7e      	cmp	r2, #126	@ 0x7e
 8011dd8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011ddc:	f000 8252 	beq.w	8012284 <uxr_read_framed_msg+0x510>
 8011de0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8011de2:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8011de4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	2200      	movs	r2, #0
 8011dec:	4299      	cmp	r1, r3
 8011dee:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8011df0:	7022      	strb	r2, [r4, #0]
 8011df2:	f000 8179 	beq.w	80120e8 <uxr_read_framed_msg+0x374>
 8011df6:	2000      	movs	r0, #0
 8011df8:	b003      	add	sp, #12
 8011dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dfe:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011e02:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011e06:	4299      	cmp	r1, r3
 8011e08:	f000 8131 	beq.w	801206e <uxr_read_framed_msg+0x2fa>
 8011e0c:	18e2      	adds	r2, r4, r3
 8011e0e:	7890      	ldrb	r0, [r2, #2]
 8011e10:	287d      	cmp	r0, #125	@ 0x7d
 8011e12:	f000 8190 	beq.w	8012136 <uxr_read_framed_msg+0x3c2>
 8011e16:	3301      	adds	r3, #1
 8011e18:	085a      	lsrs	r2, r3, #1
 8011e1a:	fba5 1202 	umull	r1, r2, r5, r2
 8011e1e:	0892      	lsrs	r2, r2, #2
 8011e20:	212a      	movs	r1, #42	@ 0x2a
 8011e22:	fb01 3312 	mls	r3, r1, r2, r3
 8011e26:	287e      	cmp	r0, #126	@ 0x7e
 8011e28:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011e2c:	f000 821a 	beq.w	8012264 <uxr_read_framed_msg+0x4f0>
 8011e30:	2307      	movs	r3, #7
 8011e32:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8011e34:	7023      	strb	r3, [r4, #0]
 8011e36:	e7ae      	b.n	8011d96 <uxr_read_framed_msg+0x22>
 8011e38:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011e3a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011e3e:	459e      	cmp	lr, r3
 8011e40:	d938      	bls.n	8011eb4 <uxr_read_framed_msg+0x140>
 8011e42:	ee07 8a90 	vmov	s15, r8
 8011e46:	212a      	movs	r1, #42	@ 0x2a
 8011e48:	e020      	b.n	8011e8c <uxr_read_framed_msg+0x118>
 8011e4a:	f89b c002 	ldrb.w	ip, [fp, #2]
 8011e4e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8011e52:	f000 80d4 	beq.w	8011ffe <uxr_read_framed_msg+0x28a>
 8011e56:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8011e5a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011e5e:	f000 8219 	beq.w	8012294 <uxr_read_framed_msg+0x520>
 8011e62:	f806 c003 	strb.w	ip, [r6, r3]
 8011e66:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8011e6a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011e6c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011e70:	ea8a 000c 	eor.w	r0, sl, ip
 8011e74:	b2c0      	uxtb	r0, r0
 8011e76:	3301      	adds	r3, #1
 8011e78:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8011e7c:	b29b      	uxth	r3, r3
 8011e7e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8011e82:	4573      	cmp	r3, lr
 8011e84:	8663      	strh	r3, [r4, #50]	@ 0x32
 8011e86:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8011e88:	f080 8120 	bcs.w	80120cc <uxr_read_framed_msg+0x358>
 8011e8c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8011e90:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8011e94:	f100 0c01 	add.w	ip, r0, #1
 8011e98:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011e9c:	fba5 8202 	umull	r8, r2, r5, r2
 8011ea0:	0892      	lsrs	r2, r2, #2
 8011ea2:	4582      	cmp	sl, r0
 8011ea4:	eb04 0b00 	add.w	fp, r4, r0
 8011ea8:	fb01 c212 	mls	r2, r1, r2, ip
 8011eac:	d1cd      	bne.n	8011e4a <uxr_read_framed_msg+0xd6>
 8011eae:	ee17 8a90 	vmov	r8, s15
 8011eb2:	459e      	cmp	lr, r3
 8011eb4:	f040 8111 	bne.w	80120da <uxr_read_framed_msg+0x366>
 8011eb8:	2306      	movs	r3, #6
 8011eba:	7023      	strb	r3, [r4, #0]
 8011ebc:	e76b      	b.n	8011d96 <uxr_read_framed_msg+0x22>
 8011ebe:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011ec2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011ec6:	4298      	cmp	r0, r3
 8011ec8:	f000 80c2 	beq.w	8012050 <uxr_read_framed_msg+0x2dc>
 8011ecc:	18e2      	adds	r2, r4, r3
 8011ece:	7891      	ldrb	r1, [r2, #2]
 8011ed0:	297d      	cmp	r1, #125	@ 0x7d
 8011ed2:	f000 814c 	beq.w	801216e <uxr_read_framed_msg+0x3fa>
 8011ed6:	3301      	adds	r3, #1
 8011ed8:	085a      	lsrs	r2, r3, #1
 8011eda:	fba5 0202 	umull	r0, r2, r5, r2
 8011ede:	0892      	lsrs	r2, r2, #2
 8011ee0:	202a      	movs	r0, #42	@ 0x2a
 8011ee2:	fb00 3312 	mls	r3, r0, r2, r3
 8011ee6:	297e      	cmp	r1, #126	@ 0x7e
 8011ee8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011eec:	f000 81ca 	beq.w	8012284 <uxr_read_framed_msg+0x510>
 8011ef0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8011ef2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011ef6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	2000      	movs	r0, #0
 8011efc:	428b      	cmp	r3, r1
 8011efe:	8623      	strh	r3, [r4, #48]	@ 0x30
 8011f00:	8660      	strh	r0, [r4, #50]	@ 0x32
 8011f02:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8011f04:	f240 80df 	bls.w	80120c6 <uxr_read_framed_msg+0x352>
 8011f08:	7020      	strb	r0, [r4, #0]
 8011f0a:	b003      	add	sp, #12
 8011f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f10:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011f14:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011f18:	4299      	cmp	r1, r3
 8011f1a:	f000 80a8 	beq.w	801206e <uxr_read_framed_msg+0x2fa>
 8011f1e:	18e2      	adds	r2, r4, r3
 8011f20:	7890      	ldrb	r0, [r2, #2]
 8011f22:	287d      	cmp	r0, #125	@ 0x7d
 8011f24:	f000 8164 	beq.w	80121f0 <uxr_read_framed_msg+0x47c>
 8011f28:	3301      	adds	r3, #1
 8011f2a:	085a      	lsrs	r2, r3, #1
 8011f2c:	fba5 1202 	umull	r1, r2, r5, r2
 8011f30:	0892      	lsrs	r2, r2, #2
 8011f32:	212a      	movs	r1, #42	@ 0x2a
 8011f34:	fb01 3312 	mls	r3, r1, r2, r3
 8011f38:	287e      	cmp	r0, #126	@ 0x7e
 8011f3a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011f3e:	f000 8191 	beq.w	8012264 <uxr_read_framed_msg+0x4f0>
 8011f42:	2304      	movs	r3, #4
 8011f44:	8620      	strh	r0, [r4, #48]	@ 0x30
 8011f46:	7023      	strb	r3, [r4, #0]
 8011f48:	e725      	b.n	8011d96 <uxr_read_framed_msg+0x22>
 8011f4a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011f4e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011f52:	4290      	cmp	r0, r2
 8011f54:	f000 80b3 	beq.w	80120be <uxr_read_framed_msg+0x34a>
 8011f58:	18a3      	adds	r3, r4, r2
 8011f5a:	7899      	ldrb	r1, [r3, #2]
 8011f5c:	297d      	cmp	r1, #125	@ 0x7d
 8011f5e:	f000 8164 	beq.w	801222a <uxr_read_framed_msg+0x4b6>
 8011f62:	3201      	adds	r2, #1
 8011f64:	0850      	lsrs	r0, r2, #1
 8011f66:	fba5 3000 	umull	r3, r0, r5, r0
 8011f6a:	0880      	lsrs	r0, r0, #2
 8011f6c:	232a      	movs	r3, #42	@ 0x2a
 8011f6e:	fb03 2210 	mls	r2, r3, r0, r2
 8011f72:	297e      	cmp	r1, #126	@ 0x7e
 8011f74:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011f78:	f000 8188 	beq.w	801228c <uxr_read_framed_msg+0x518>
 8011f7c:	7863      	ldrb	r3, [r4, #1]
 8011f7e:	428b      	cmp	r3, r1
 8011f80:	bf0c      	ite	eq
 8011f82:	2303      	moveq	r3, #3
 8011f84:	2300      	movne	r3, #0
 8011f86:	7023      	strb	r3, [r4, #0]
 8011f88:	e705      	b.n	8011d96 <uxr_read_framed_msg+0x22>
 8011f8a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011f8e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011f92:	2200      	movs	r2, #0
 8011f94:	4299      	cmp	r1, r3
 8011f96:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8011f9a:	d06c      	beq.n	8012076 <uxr_read_framed_msg+0x302>
 8011f9c:	18e2      	adds	r2, r4, r3
 8011f9e:	7890      	ldrb	r0, [r2, #2]
 8011fa0:	287d      	cmp	r0, #125	@ 0x7d
 8011fa2:	f000 8101 	beq.w	80121a8 <uxr_read_framed_msg+0x434>
 8011fa6:	3301      	adds	r3, #1
 8011fa8:	085a      	lsrs	r2, r3, #1
 8011faa:	fba5 1202 	umull	r1, r2, r5, r2
 8011fae:	0892      	lsrs	r2, r2, #2
 8011fb0:	212a      	movs	r1, #42	@ 0x2a
 8011fb2:	fb01 3312 	mls	r3, r1, r2, r3
 8011fb6:	287e      	cmp	r0, #126	@ 0x7e
 8011fb8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8011fbc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011fc0:	d059      	beq.n	8012076 <uxr_read_framed_msg+0x302>
 8011fc2:	2302      	movs	r3, #2
 8011fc4:	7023      	strb	r3, [r4, #0]
 8011fc6:	e6e6      	b.n	8011d96 <uxr_read_framed_msg+0x22>
 8011fc8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8011fcc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011fd0:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8011fd4:	1c51      	adds	r1, r2, #1
 8011fd6:	084b      	lsrs	r3, r1, #1
 8011fd8:	fba5 c303 	umull	ip, r3, r5, r3
 8011fdc:	089b      	lsrs	r3, r3, #2
 8011fde:	fb0e 1313 	mls	r3, lr, r3, r1
 8011fe2:	4592      	cmp	sl, r2
 8011fe4:	eb04 0002 	add.w	r0, r4, r2
 8011fe8:	b2da      	uxtb	r2, r3
 8011fea:	f43f af04 	beq.w	8011df6 <uxr_read_framed_msg+0x82>
 8011fee:	7883      	ldrb	r3, [r0, #2]
 8011ff0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011ff4:	2b7e      	cmp	r3, #126	@ 0x7e
 8011ff6:	d1ed      	bne.n	8011fd4 <uxr_read_framed_msg+0x260>
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	7023      	strb	r3, [r4, #0]
 8011ffc:	e6cb      	b.n	8011d96 <uxr_read_framed_msg+0x22>
 8011ffe:	f100 0c01 	add.w	ip, r0, #1
 8012002:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012006:	fba5 8202 	umull	r8, r2, r5, r2
 801200a:	0892      	lsrs	r2, r2, #2
 801200c:	fb01 c212 	mls	r2, r1, r2, ip
 8012010:	eb04 0c02 	add.w	ip, r4, r2
 8012014:	b2d2      	uxtb	r2, r2
 8012016:	4592      	cmp	sl, r2
 8012018:	f100 0002 	add.w	r0, r0, #2
 801201c:	f43f af47 	beq.w	8011eae <uxr_read_framed_msg+0x13a>
 8012020:	0842      	lsrs	r2, r0, #1
 8012022:	f89c a002 	ldrb.w	sl, [ip, #2]
 8012026:	fba5 8202 	umull	r8, r2, r5, r2
 801202a:	0892      	lsrs	r2, r2, #2
 801202c:	fb01 0012 	mls	r0, r1, r2, r0
 8012030:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8012034:	f08a 0c20 	eor.w	ip, sl, #32
 8012038:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801203c:	f47f af11 	bne.w	8011e62 <uxr_read_framed_msg+0xee>
 8012040:	459e      	cmp	lr, r3
 8012042:	ee17 8a90 	vmov	r8, s15
 8012046:	f43f af37 	beq.w	8011eb8 <uxr_read_framed_msg+0x144>
 801204a:	2301      	movs	r3, #1
 801204c:	7023      	strb	r3, [r4, #0]
 801204e:	e6a2      	b.n	8011d96 <uxr_read_framed_msg+0x22>
 8012050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012052:	9300      	str	r3, [sp, #0]
 8012054:	2301      	movs	r3, #1
 8012056:	9301      	str	r3, [sp, #4]
 8012058:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801205a:	464a      	mov	r2, r9
 801205c:	4641      	mov	r1, r8
 801205e:	4620      	mov	r0, r4
 8012060:	f7ff fe06 	bl	8011c70 <uxr_framing_read_transport>
 8012064:	2800      	cmp	r0, #0
 8012066:	f43f aec6 	beq.w	8011df6 <uxr_read_framed_msg+0x82>
 801206a:	7823      	ldrb	r3, [r4, #0]
 801206c:	e693      	b.n	8011d96 <uxr_read_framed_msg+0x22>
 801206e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012070:	9300      	str	r3, [sp, #0]
 8012072:	2302      	movs	r3, #2
 8012074:	e7ef      	b.n	8012056 <uxr_read_framed_msg+0x2e2>
 8012076:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012078:	9300      	str	r3, [sp, #0]
 801207a:	2304      	movs	r3, #4
 801207c:	9301      	str	r3, [sp, #4]
 801207e:	464a      	mov	r2, r9
 8012080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012082:	4641      	mov	r1, r8
 8012084:	4620      	mov	r0, r4
 8012086:	f7ff fdf3 	bl	8011c70 <uxr_framing_read_transport>
 801208a:	2800      	cmp	r0, #0
 801208c:	d1ed      	bne.n	801206a <uxr_read_framed_msg+0x2f6>
 801208e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012092:	2b7e      	cmp	r3, #126	@ 0x7e
 8012094:	d0e9      	beq.n	801206a <uxr_read_framed_msg+0x2f6>
 8012096:	e6ae      	b.n	8011df6 <uxr_read_framed_msg+0x82>
 8012098:	30c30c31 	.word	0x30c30c31
 801209c:	0801bcfc 	.word	0x0801bcfc
 80120a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120a2:	9300      	str	r3, [sp, #0]
 80120a4:	2305      	movs	r3, #5
 80120a6:	9301      	str	r3, [sp, #4]
 80120a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80120aa:	f7ff fde1 	bl	8011c70 <uxr_framing_read_transport>
 80120ae:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80120b2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80120b6:	429a      	cmp	r2, r3
 80120b8:	f43f ae9d 	beq.w	8011df6 <uxr_read_framed_msg+0x82>
 80120bc:	e668      	b.n	8011d90 <uxr_read_framed_msg+0x1c>
 80120be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120c0:	9300      	str	r3, [sp, #0]
 80120c2:	2303      	movs	r3, #3
 80120c4:	e7c7      	b.n	8012056 <uxr_read_framed_msg+0x2e2>
 80120c6:	2305      	movs	r3, #5
 80120c8:	7023      	strb	r3, [r4, #0]
 80120ca:	e664      	b.n	8011d96 <uxr_read_framed_msg+0x22>
 80120cc:	ee17 8a90 	vmov	r8, s15
 80120d0:	f43f aef2 	beq.w	8011eb8 <uxr_read_framed_msg+0x144>
 80120d4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80120d8:	d08e      	beq.n	8011ff8 <uxr_read_framed_msg+0x284>
 80120da:	ebae 0303 	sub.w	r3, lr, r3
 80120de:	3302      	adds	r3, #2
 80120e0:	9301      	str	r3, [sp, #4]
 80120e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120e4:	9300      	str	r3, [sp, #0]
 80120e6:	e7b7      	b.n	8012058 <uxr_read_framed_msg+0x2e4>
 80120e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80120ea:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80120ee:	7013      	strb	r3, [r2, #0]
 80120f0:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80120f2:	b003      	add	sp, #12
 80120f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120f8:	f103 0c01 	add.w	ip, r3, #1
 80120fc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012100:	fba5 0202 	umull	r0, r2, r5, r2
 8012104:	0892      	lsrs	r2, r2, #2
 8012106:	202a      	movs	r0, #42	@ 0x2a
 8012108:	fb00 c212 	mls	r2, r0, r2, ip
 801210c:	fa5f fc82 	uxtb.w	ip, r2
 8012110:	4561      	cmp	r1, ip
 8012112:	d09d      	beq.n	8012050 <uxr_read_framed_msg+0x2dc>
 8012114:	3302      	adds	r3, #2
 8012116:	4422      	add	r2, r4
 8012118:	0859      	lsrs	r1, r3, #1
 801211a:	7892      	ldrb	r2, [r2, #2]
 801211c:	fba5 c101 	umull	ip, r1, r5, r1
 8012120:	0889      	lsrs	r1, r1, #2
 8012122:	fb00 3311 	mls	r3, r0, r1, r3
 8012126:	2a7e      	cmp	r2, #126	@ 0x7e
 8012128:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801212c:	f000 80aa 	beq.w	8012284 <uxr_read_framed_msg+0x510>
 8012130:	f082 0220 	eor.w	r2, r2, #32
 8012134:	e654      	b.n	8011de0 <uxr_read_framed_msg+0x6c>
 8012136:	1c58      	adds	r0, r3, #1
 8012138:	0842      	lsrs	r2, r0, #1
 801213a:	fba5 c202 	umull	ip, r2, r5, r2
 801213e:	0892      	lsrs	r2, r2, #2
 8012140:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012144:	fb0c 0212 	mls	r2, ip, r2, r0
 8012148:	b2d0      	uxtb	r0, r2
 801214a:	4281      	cmp	r1, r0
 801214c:	d08f      	beq.n	801206e <uxr_read_framed_msg+0x2fa>
 801214e:	4422      	add	r2, r4
 8012150:	3302      	adds	r3, #2
 8012152:	7890      	ldrb	r0, [r2, #2]
 8012154:	085a      	lsrs	r2, r3, #1
 8012156:	fba5 1202 	umull	r1, r2, r5, r2
 801215a:	0892      	lsrs	r2, r2, #2
 801215c:	fb0c 3312 	mls	r3, ip, r2, r3
 8012160:	287e      	cmp	r0, #126	@ 0x7e
 8012162:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012166:	d07d      	beq.n	8012264 <uxr_read_framed_msg+0x4f0>
 8012168:	f080 0020 	eor.w	r0, r0, #32
 801216c:	e660      	b.n	8011e30 <uxr_read_framed_msg+0xbc>
 801216e:	1c59      	adds	r1, r3, #1
 8012170:	084a      	lsrs	r2, r1, #1
 8012172:	fba5 c202 	umull	ip, r2, r5, r2
 8012176:	0892      	lsrs	r2, r2, #2
 8012178:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801217c:	fb0c 1212 	mls	r2, ip, r2, r1
 8012180:	b2d1      	uxtb	r1, r2
 8012182:	4288      	cmp	r0, r1
 8012184:	f43f af64 	beq.w	8012050 <uxr_read_framed_msg+0x2dc>
 8012188:	4422      	add	r2, r4
 801218a:	3302      	adds	r3, #2
 801218c:	7891      	ldrb	r1, [r2, #2]
 801218e:	085a      	lsrs	r2, r3, #1
 8012190:	fba5 0202 	umull	r0, r2, r5, r2
 8012194:	0892      	lsrs	r2, r2, #2
 8012196:	fb0c 3312 	mls	r3, ip, r2, r3
 801219a:	297e      	cmp	r1, #126	@ 0x7e
 801219c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80121a0:	d070      	beq.n	8012284 <uxr_read_framed_msg+0x510>
 80121a2:	f081 0120 	eor.w	r1, r1, #32
 80121a6:	e6a3      	b.n	8011ef0 <uxr_read_framed_msg+0x17c>
 80121a8:	f103 0c01 	add.w	ip, r3, #1
 80121ac:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80121b0:	fba5 0202 	umull	r0, r2, r5, r2
 80121b4:	0892      	lsrs	r2, r2, #2
 80121b6:	202a      	movs	r0, #42	@ 0x2a
 80121b8:	fb00 c212 	mls	r2, r0, r2, ip
 80121bc:	fa5f fc82 	uxtb.w	ip, r2
 80121c0:	4561      	cmp	r1, ip
 80121c2:	f43f af58 	beq.w	8012076 <uxr_read_framed_msg+0x302>
 80121c6:	4422      	add	r2, r4
 80121c8:	3302      	adds	r3, #2
 80121ca:	7891      	ldrb	r1, [r2, #2]
 80121cc:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80121d0:	085a      	lsrs	r2, r3, #1
 80121d2:	fba5 c202 	umull	ip, r2, r5, r2
 80121d6:	0892      	lsrs	r2, r2, #2
 80121d8:	fb00 3312 	mls	r3, r0, r2, r3
 80121dc:	297e      	cmp	r1, #126	@ 0x7e
 80121de:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80121e2:	f43f af48 	beq.w	8012076 <uxr_read_framed_msg+0x302>
 80121e6:	f081 0120 	eor.w	r1, r1, #32
 80121ea:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80121ee:	e6e8      	b.n	8011fc2 <uxr_read_framed_msg+0x24e>
 80121f0:	1c58      	adds	r0, r3, #1
 80121f2:	0842      	lsrs	r2, r0, #1
 80121f4:	fba5 c202 	umull	ip, r2, r5, r2
 80121f8:	0892      	lsrs	r2, r2, #2
 80121fa:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80121fe:	fb0c 0212 	mls	r2, ip, r2, r0
 8012202:	b2d0      	uxtb	r0, r2
 8012204:	4281      	cmp	r1, r0
 8012206:	f43f af32 	beq.w	801206e <uxr_read_framed_msg+0x2fa>
 801220a:	4422      	add	r2, r4
 801220c:	3302      	adds	r3, #2
 801220e:	7890      	ldrb	r0, [r2, #2]
 8012210:	085a      	lsrs	r2, r3, #1
 8012212:	fba5 1202 	umull	r1, r2, r5, r2
 8012216:	0892      	lsrs	r2, r2, #2
 8012218:	fb0c 3312 	mls	r3, ip, r2, r3
 801221c:	287e      	cmp	r0, #126	@ 0x7e
 801221e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012222:	d01f      	beq.n	8012264 <uxr_read_framed_msg+0x4f0>
 8012224:	f080 0020 	eor.w	r0, r0, #32
 8012228:	e68b      	b.n	8011f42 <uxr_read_framed_msg+0x1ce>
 801222a:	1c51      	adds	r1, r2, #1
 801222c:	084b      	lsrs	r3, r1, #1
 801222e:	fba5 c303 	umull	ip, r3, r5, r3
 8012232:	089b      	lsrs	r3, r3, #2
 8012234:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012238:	fb0c 1313 	mls	r3, ip, r3, r1
 801223c:	b2d9      	uxtb	r1, r3
 801223e:	4288      	cmp	r0, r1
 8012240:	f43f af3d 	beq.w	80120be <uxr_read_framed_msg+0x34a>
 8012244:	3202      	adds	r2, #2
 8012246:	4423      	add	r3, r4
 8012248:	0850      	lsrs	r0, r2, #1
 801224a:	789b      	ldrb	r3, [r3, #2]
 801224c:	fba5 1000 	umull	r1, r0, r5, r0
 8012250:	0880      	lsrs	r0, r0, #2
 8012252:	fb0c 2210 	mls	r2, ip, r0, r2
 8012256:	2b7e      	cmp	r3, #126	@ 0x7e
 8012258:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801225c:	d016      	beq.n	801228c <uxr_read_framed_msg+0x518>
 801225e:	f083 0120 	eor.w	r1, r3, #32
 8012262:	e68b      	b.n	8011f7c <uxr_read_framed_msg+0x208>
 8012264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012266:	9300      	str	r3, [sp, #0]
 8012268:	2302      	movs	r3, #2
 801226a:	9301      	str	r3, [sp, #4]
 801226c:	464a      	mov	r2, r9
 801226e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012270:	4641      	mov	r1, r8
 8012272:	4620      	mov	r0, r4
 8012274:	f7ff fcfc 	bl	8011c70 <uxr_framing_read_transport>
 8012278:	2800      	cmp	r0, #0
 801227a:	f47f aef6 	bne.w	801206a <uxr_read_framed_msg+0x2f6>
 801227e:	2301      	movs	r3, #1
 8012280:	7023      	strb	r3, [r4, #0]
 8012282:	e588      	b.n	8011d96 <uxr_read_framed_msg+0x22>
 8012284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012286:	9300      	str	r3, [sp, #0]
 8012288:	2301      	movs	r3, #1
 801228a:	e7ee      	b.n	801226a <uxr_read_framed_msg+0x4f6>
 801228c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801228e:	9300      	str	r3, [sp, #0]
 8012290:	2303      	movs	r3, #3
 8012292:	e7ea      	b.n	801226a <uxr_read_framed_msg+0x4f6>
 8012294:	ee17 8a90 	vmov	r8, s15
 8012298:	e6ae      	b.n	8011ff8 <uxr_read_framed_msg+0x284>
 801229a:	bf00      	nop

0801229c <uxr_stream_id>:
 801229c:	2901      	cmp	r1, #1
 801229e:	b082      	sub	sp, #8
 80122a0:	d01d      	beq.n	80122de <uxr_stream_id+0x42>
 80122a2:	2902      	cmp	r1, #2
 80122a4:	f04f 0c00 	mov.w	ip, #0
 80122a8:	d01e      	beq.n	80122e8 <uxr_stream_id+0x4c>
 80122aa:	2300      	movs	r3, #0
 80122ac:	f36c 0307 	bfi	r3, ip, #0, #8
 80122b0:	f360 230f 	bfi	r3, r0, #8, #8
 80122b4:	f361 4317 	bfi	r3, r1, #16, #8
 80122b8:	f362 631f 	bfi	r3, r2, #24, #8
 80122bc:	b2da      	uxtb	r2, r3
 80122be:	2000      	movs	r0, #0
 80122c0:	f362 0007 	bfi	r0, r2, #0, #8
 80122c4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80122c8:	f362 200f 	bfi	r0, r2, #8, #8
 80122cc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80122d0:	f362 4017 	bfi	r0, r2, #16, #8
 80122d4:	0e1b      	lsrs	r3, r3, #24
 80122d6:	f363 601f 	bfi	r0, r3, #24, #8
 80122da:	b002      	add	sp, #8
 80122dc:	4770      	bx	lr
 80122de:	f100 0c01 	add.w	ip, r0, #1
 80122e2:	fa5f fc8c 	uxtb.w	ip, ip
 80122e6:	e7e0      	b.n	80122aa <uxr_stream_id+0xe>
 80122e8:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80122ec:	e7dd      	b.n	80122aa <uxr_stream_id+0xe>
 80122ee:	bf00      	nop

080122f0 <uxr_stream_id_from_raw>:
 80122f0:	b082      	sub	sp, #8
 80122f2:	b130      	cbz	r0, 8012302 <uxr_stream_id_from_raw+0x12>
 80122f4:	0603      	lsls	r3, r0, #24
 80122f6:	d420      	bmi.n	801233a <uxr_stream_id_from_raw+0x4a>
 80122f8:	1e42      	subs	r2, r0, #1
 80122fa:	b2d2      	uxtb	r2, r2
 80122fc:	f04f 0c01 	mov.w	ip, #1
 8012300:	e001      	b.n	8012306 <uxr_stream_id_from_raw+0x16>
 8012302:	4684      	mov	ip, r0
 8012304:	4602      	mov	r2, r0
 8012306:	2300      	movs	r3, #0
 8012308:	f360 0307 	bfi	r3, r0, #0, #8
 801230c:	f362 230f 	bfi	r3, r2, #8, #8
 8012310:	f36c 4317 	bfi	r3, ip, #16, #8
 8012314:	f361 631f 	bfi	r3, r1, #24, #8
 8012318:	b2da      	uxtb	r2, r3
 801231a:	2000      	movs	r0, #0
 801231c:	f362 0007 	bfi	r0, r2, #0, #8
 8012320:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012324:	f362 200f 	bfi	r0, r2, #8, #8
 8012328:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801232c:	f362 4017 	bfi	r0, r2, #16, #8
 8012330:	0e1b      	lsrs	r3, r3, #24
 8012332:	f363 601f 	bfi	r0, r3, #24, #8
 8012336:	b002      	add	sp, #8
 8012338:	4770      	bx	lr
 801233a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801233e:	f04f 0c02 	mov.w	ip, #2
 8012342:	e7e0      	b.n	8012306 <uxr_stream_id_from_raw+0x16>

08012344 <uxr_init_stream_storage>:
 8012344:	2300      	movs	r3, #0
 8012346:	7403      	strb	r3, [r0, #16]
 8012348:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801234c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8012350:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8012354:	4770      	bx	lr
 8012356:	bf00      	nop

08012358 <uxr_reset_stream_storage>:
 8012358:	b570      	push	{r4, r5, r6, lr}
 801235a:	7c03      	ldrb	r3, [r0, #16]
 801235c:	4604      	mov	r4, r0
 801235e:	b153      	cbz	r3, 8012376 <uxr_reset_stream_storage+0x1e>
 8012360:	4606      	mov	r6, r0
 8012362:	2500      	movs	r5, #0
 8012364:	4630      	mov	r0, r6
 8012366:	f005 fe3f 	bl	8017fe8 <uxr_reset_output_best_effort_stream>
 801236a:	7c23      	ldrb	r3, [r4, #16]
 801236c:	3501      	adds	r5, #1
 801236e:	42ab      	cmp	r3, r5
 8012370:	f106 0610 	add.w	r6, r6, #16
 8012374:	d8f6      	bhi.n	8012364 <uxr_reset_stream_storage+0xc>
 8012376:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801237a:	b163      	cbz	r3, 8012396 <uxr_reset_stream_storage+0x3e>
 801237c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012380:	2500      	movs	r5, #0
 8012382:	4630      	mov	r0, r6
 8012384:	f005 fc32 	bl	8017bec <uxr_reset_input_best_effort_stream>
 8012388:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801238c:	3501      	adds	r5, #1
 801238e:	42ab      	cmp	r3, r5
 8012390:	f106 0602 	add.w	r6, r6, #2
 8012394:	d8f5      	bhi.n	8012382 <uxr_reset_stream_storage+0x2a>
 8012396:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801239a:	b163      	cbz	r3, 80123b6 <uxr_reset_stream_storage+0x5e>
 801239c:	f104 0618 	add.w	r6, r4, #24
 80123a0:	2500      	movs	r5, #0
 80123a2:	4630      	mov	r0, r6
 80123a4:	f005 fecc 	bl	8018140 <uxr_reset_output_reliable_stream>
 80123a8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80123ac:	3501      	adds	r5, #1
 80123ae:	42ab      	cmp	r3, r5
 80123b0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80123b4:	d8f5      	bhi.n	80123a2 <uxr_reset_stream_storage+0x4a>
 80123b6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80123ba:	b163      	cbz	r3, 80123d6 <uxr_reset_stream_storage+0x7e>
 80123bc:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80123c0:	2500      	movs	r5, #0
 80123c2:	4630      	mov	r0, r6
 80123c4:	f005 fc86 	bl	8017cd4 <uxr_reset_input_reliable_stream>
 80123c8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80123cc:	3501      	adds	r5, #1
 80123ce:	42ab      	cmp	r3, r5
 80123d0:	f106 0618 	add.w	r6, r6, #24
 80123d4:	d8f5      	bhi.n	80123c2 <uxr_reset_stream_storage+0x6a>
 80123d6:	bd70      	pop	{r4, r5, r6, pc}

080123d8 <uxr_add_output_best_effort_buffer>:
 80123d8:	b510      	push	{r4, lr}
 80123da:	7c04      	ldrb	r4, [r0, #16]
 80123dc:	f104 0c01 	add.w	ip, r4, #1
 80123e0:	b082      	sub	sp, #8
 80123e2:	f880 c010 	strb.w	ip, [r0, #16]
 80123e6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80123ea:	f005 fdf3 	bl	8017fd4 <uxr_init_output_best_effort_stream>
 80123ee:	2201      	movs	r2, #1
 80123f0:	4611      	mov	r1, r2
 80123f2:	4620      	mov	r0, r4
 80123f4:	b002      	add	sp, #8
 80123f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123fa:	f7ff bf4f 	b.w	801229c <uxr_stream_id>
 80123fe:	bf00      	nop

08012400 <uxr_add_output_reliable_buffer>:
 8012400:	b510      	push	{r4, lr}
 8012402:	b084      	sub	sp, #16
 8012404:	4684      	mov	ip, r0
 8012406:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801240a:	9000      	str	r0, [sp, #0]
 801240c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8012410:	2028      	movs	r0, #40	@ 0x28
 8012412:	fb00 c004 	mla	r0, r0, r4, ip
 8012416:	f104 0e01 	add.w	lr, r4, #1
 801241a:	3018      	adds	r0, #24
 801241c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8012420:	f005 fe56 	bl	80180d0 <uxr_init_output_reliable_stream>
 8012424:	2201      	movs	r2, #1
 8012426:	2102      	movs	r1, #2
 8012428:	4620      	mov	r0, r4
 801242a:	b004      	add	sp, #16
 801242c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012430:	f7ff bf34 	b.w	801229c <uxr_stream_id>

08012434 <uxr_add_input_best_effort_buffer>:
 8012434:	b510      	push	{r4, lr}
 8012436:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801243a:	4603      	mov	r3, r0
 801243c:	1c62      	adds	r2, r4, #1
 801243e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8012442:	b082      	sub	sp, #8
 8012444:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801244c:	f005 fbca 	bl	8017be4 <uxr_init_input_best_effort_stream>
 8012450:	2200      	movs	r2, #0
 8012452:	2101      	movs	r1, #1
 8012454:	4620      	mov	r0, r4
 8012456:	b002      	add	sp, #8
 8012458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801245c:	f7ff bf1e 	b.w	801229c <uxr_stream_id>

08012460 <uxr_add_input_reliable_buffer>:
 8012460:	b510      	push	{r4, lr}
 8012462:	b084      	sub	sp, #16
 8012464:	4684      	mov	ip, r0
 8012466:	9806      	ldr	r0, [sp, #24]
 8012468:	9000      	str	r0, [sp, #0]
 801246a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801246e:	2018      	movs	r0, #24
 8012470:	fb00 c004 	mla	r0, r0, r4, ip
 8012474:	f104 0e01 	add.w	lr, r4, #1
 8012478:	3048      	adds	r0, #72	@ 0x48
 801247a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801247e:	f005 fbfd 	bl	8017c7c <uxr_init_input_reliable_stream>
 8012482:	2200      	movs	r2, #0
 8012484:	2102      	movs	r1, #2
 8012486:	4620      	mov	r0, r4
 8012488:	b004      	add	sp, #16
 801248a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801248e:	f7ff bf05 	b.w	801229c <uxr_stream_id>
 8012492:	bf00      	nop

08012494 <uxr_get_output_best_effort_stream>:
 8012494:	7c03      	ldrb	r3, [r0, #16]
 8012496:	428b      	cmp	r3, r1
 8012498:	bf8c      	ite	hi
 801249a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801249e:	2000      	movls	r0, #0
 80124a0:	4770      	bx	lr
 80124a2:	bf00      	nop

080124a4 <uxr_get_output_reliable_stream>:
 80124a4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80124a8:	428b      	cmp	r3, r1
 80124aa:	bf83      	ittte	hi
 80124ac:	2328      	movhi	r3, #40	@ 0x28
 80124ae:	fb03 0001 	mlahi	r0, r3, r1, r0
 80124b2:	3018      	addhi	r0, #24
 80124b4:	2000      	movls	r0, #0
 80124b6:	4770      	bx	lr

080124b8 <uxr_get_input_best_effort_stream>:
 80124b8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80124bc:	428b      	cmp	r3, r1
 80124be:	bf86      	itte	hi
 80124c0:	3121      	addhi	r1, #33	@ 0x21
 80124c2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80124c6:	2000      	movls	r0, #0
 80124c8:	4770      	bx	lr
 80124ca:	bf00      	nop

080124cc <uxr_get_input_reliable_stream>:
 80124cc:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80124d0:	428b      	cmp	r3, r1
 80124d2:	bf83      	ittte	hi
 80124d4:	2318      	movhi	r3, #24
 80124d6:	fb03 0001 	mlahi	r0, r3, r1, r0
 80124da:	3048      	addhi	r0, #72	@ 0x48
 80124dc:	2000      	movls	r0, #0
 80124de:	4770      	bx	lr

080124e0 <uxr_output_streams_confirmed>:
 80124e0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80124e4:	b183      	cbz	r3, 8012508 <uxr_output_streams_confirmed+0x28>
 80124e6:	b570      	push	{r4, r5, r6, lr}
 80124e8:	4606      	mov	r6, r0
 80124ea:	f100 0518 	add.w	r5, r0, #24
 80124ee:	2400      	movs	r4, #0
 80124f0:	e001      	b.n	80124f6 <uxr_output_streams_confirmed+0x16>
 80124f2:	3528      	adds	r5, #40	@ 0x28
 80124f4:	b138      	cbz	r0, 8012506 <uxr_output_streams_confirmed+0x26>
 80124f6:	4628      	mov	r0, r5
 80124f8:	f006 f892 	bl	8018620 <uxr_is_output_up_to_date>
 80124fc:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8012500:	3401      	adds	r4, #1
 8012502:	42a3      	cmp	r3, r4
 8012504:	d8f5      	bhi.n	80124f2 <uxr_output_streams_confirmed+0x12>
 8012506:	bd70      	pop	{r4, r5, r6, pc}
 8012508:	2001      	movs	r0, #1
 801250a:	4770      	bx	lr

0801250c <uxr_buffer_submessage_header>:
 801250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801250e:	4604      	mov	r4, r0
 8012510:	460e      	mov	r6, r1
 8012512:	2104      	movs	r1, #4
 8012514:	4615      	mov	r5, r2
 8012516:	461f      	mov	r7, r3
 8012518:	f7fa f808 	bl	800c52c <ucdr_align_to>
 801251c:	2301      	movs	r3, #1
 801251e:	ea47 0203 	orr.w	r2, r7, r3
 8012522:	4631      	mov	r1, r6
 8012524:	7523      	strb	r3, [r4, #20]
 8012526:	4620      	mov	r0, r4
 8012528:	462b      	mov	r3, r5
 801252a:	f000 fa27 	bl	801297c <uxr_serialize_submessage_header>
 801252e:	4620      	mov	r0, r4
 8012530:	f7fa f812 	bl	800c558 <ucdr_buffer_remaining>
 8012534:	42a8      	cmp	r0, r5
 8012536:	bf34      	ite	cc
 8012538:	2000      	movcc	r0, #0
 801253a:	2001      	movcs	r0, #1
 801253c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801253e:	bf00      	nop

08012540 <uxr_read_submessage_header>:
 8012540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012544:	4604      	mov	r4, r0
 8012546:	460d      	mov	r5, r1
 8012548:	2104      	movs	r1, #4
 801254a:	4616      	mov	r6, r2
 801254c:	4698      	mov	r8, r3
 801254e:	f7f9 ffed 	bl	800c52c <ucdr_align_to>
 8012552:	4620      	mov	r0, r4
 8012554:	f7fa f800 	bl	800c558 <ucdr_buffer_remaining>
 8012558:	2803      	cmp	r0, #3
 801255a:	bf8c      	ite	hi
 801255c:	2701      	movhi	r7, #1
 801255e:	2700      	movls	r7, #0
 8012560:	d802      	bhi.n	8012568 <uxr_read_submessage_header+0x28>
 8012562:	4638      	mov	r0, r7
 8012564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012568:	4633      	mov	r3, r6
 801256a:	4642      	mov	r2, r8
 801256c:	4620      	mov	r0, r4
 801256e:	4629      	mov	r1, r5
 8012570:	f000 fa18 	bl	80129a4 <uxr_deserialize_submessage_header>
 8012574:	f898 3000 	ldrb.w	r3, [r8]
 8012578:	f003 0201 	and.w	r2, r3, #1
 801257c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8012580:	f888 3000 	strb.w	r3, [r8]
 8012584:	7522      	strb	r2, [r4, #20]
 8012586:	4638      	mov	r0, r7
 8012588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801258c <uxr_submessage_padding>:
 801258c:	f010 0003 	ands.w	r0, r0, #3
 8012590:	bf18      	it	ne
 8012592:	f1c0 0004 	rsbne	r0, r0, #4
 8012596:	4770      	bx	lr

08012598 <uxr_millis>:
 8012598:	b510      	push	{r4, lr}
 801259a:	b084      	sub	sp, #16
 801259c:	4669      	mov	r1, sp
 801259e:	2001      	movs	r0, #1
 80125a0:	f7ef fd42 	bl	8002028 <clock_gettime>
 80125a4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80125a8:	4906      	ldr	r1, [pc, #24]	@ (80125c4 <uxr_millis+0x2c>)
 80125aa:	fba0 0301 	umull	r0, r3, r0, r1
 80125ae:	1900      	adds	r0, r0, r4
 80125b0:	fb01 3102 	mla	r1, r1, r2, r3
 80125b4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80125b8:	4a03      	ldr	r2, [pc, #12]	@ (80125c8 <uxr_millis+0x30>)
 80125ba:	2300      	movs	r3, #0
 80125bc:	f7ee fb04 	bl	8000bc8 <__aeabi_ldivmod>
 80125c0:	b004      	add	sp, #16
 80125c2:	bd10      	pop	{r4, pc}
 80125c4:	3b9aca00 	.word	0x3b9aca00
 80125c8:	000f4240 	.word	0x000f4240

080125cc <uxr_nanos>:
 80125cc:	b510      	push	{r4, lr}
 80125ce:	b084      	sub	sp, #16
 80125d0:	4669      	mov	r1, sp
 80125d2:	2001      	movs	r0, #1
 80125d4:	f7ef fd28 	bl	8002028 <clock_gettime>
 80125d8:	4a06      	ldr	r2, [pc, #24]	@ (80125f4 <uxr_nanos+0x28>)
 80125da:	9800      	ldr	r0, [sp, #0]
 80125dc:	9902      	ldr	r1, [sp, #8]
 80125de:	9c01      	ldr	r4, [sp, #4]
 80125e0:	fba0 0302 	umull	r0, r3, r0, r2
 80125e4:	1840      	adds	r0, r0, r1
 80125e6:	fb02 3304 	mla	r3, r2, r4, r3
 80125ea:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80125ee:	b004      	add	sp, #16
 80125f0:	bd10      	pop	{r4, pc}
 80125f2:	bf00      	nop
 80125f4:	3b9aca00 	.word	0x3b9aca00

080125f8 <on_full_output_buffer_fragmented>:
 80125f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125fc:	460c      	mov	r4, r1
 80125fe:	b08a      	sub	sp, #40	@ 0x28
 8012600:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8012604:	4606      	mov	r6, r0
 8012606:	f104 0008 	add.w	r0, r4, #8
 801260a:	f7ff ff4b 	bl	80124a4 <uxr_get_output_reliable_stream>
 801260e:	4605      	mov	r5, r0
 8012610:	f006 f810 	bl	8018634 <get_available_free_slots>
 8012614:	b968      	cbnz	r0, 8012632 <on_full_output_buffer_fragmented+0x3a>
 8012616:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 801261a:	4620      	mov	r0, r4
 801261c:	4798      	blx	r3
 801261e:	b918      	cbnz	r0, 8012628 <on_full_output_buffer_fragmented+0x30>
 8012620:	2001      	movs	r0, #1
 8012622:	b00a      	add	sp, #40	@ 0x28
 8012624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012628:	4628      	mov	r0, r5
 801262a:	f006 f803 	bl	8018634 <get_available_free_slots>
 801262e:	2800      	cmp	r0, #0
 8012630:	d0f6      	beq.n	8012620 <on_full_output_buffer_fragmented+0x28>
 8012632:	8929      	ldrh	r1, [r5, #8]
 8012634:	89eb      	ldrh	r3, [r5, #14]
 8012636:	7b28      	ldrb	r0, [r5, #12]
 8012638:	686a      	ldr	r2, [r5, #4]
 801263a:	fbb2 f8f1 	udiv	r8, r2, r1
 801263e:	fbb3 f2f1 	udiv	r2, r3, r1
 8012642:	fb01 3112 	mls	r1, r1, r2, r3
 8012646:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 801264a:	b289      	uxth	r1, r1
 801264c:	fb08 f101 	mul.w	r1, r8, r1
 8012650:	30fc      	adds	r0, #252	@ 0xfc
 8012652:	f1a8 0804 	sub.w	r8, r8, #4
 8012656:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801265a:	4440      	add	r0, r8
 801265c:	b287      	uxth	r7, r0
 801265e:	1bdb      	subs	r3, r3, r7
 8012660:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8012664:	682b      	ldr	r3, [r5, #0]
 8012666:	3104      	adds	r1, #4
 8012668:	4419      	add	r1, r3
 801266a:	4642      	mov	r2, r8
 801266c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012670:	9300      	str	r3, [sp, #0]
 8012672:	a802      	add	r0, sp, #8
 8012674:	2300      	movs	r3, #0
 8012676:	f7f9 ff2d 	bl	800c4d4 <ucdr_init_buffer_origin_offset>
 801267a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801267e:	f102 0308 	add.w	r3, r2, #8
 8012682:	4543      	cmp	r3, r8
 8012684:	d928      	bls.n	80126d8 <on_full_output_buffer_fragmented+0xe0>
 8012686:	463a      	mov	r2, r7
 8012688:	2300      	movs	r3, #0
 801268a:	210d      	movs	r1, #13
 801268c:	a802      	add	r0, sp, #8
 801268e:	f7ff ff3d 	bl	801250c <uxr_buffer_submessage_header>
 8012692:	8929      	ldrh	r1, [r5, #8]
 8012694:	89eb      	ldrh	r3, [r5, #14]
 8012696:	fbb3 f2f1 	udiv	r2, r3, r1
 801269a:	fb01 3312 	mls	r3, r1, r2, r3
 801269e:	b29b      	uxth	r3, r3
 80126a0:	686a      	ldr	r2, [r5, #4]
 80126a2:	fbb2 f2f1 	udiv	r2, r2, r1
 80126a6:	fb02 f303 	mul.w	r3, r2, r3
 80126aa:	682a      	ldr	r2, [r5, #0]
 80126ac:	f842 8003 	str.w	r8, [r2, r3]
 80126b0:	89e8      	ldrh	r0, [r5, #14]
 80126b2:	2101      	movs	r1, #1
 80126b4:	f005 ffde 	bl	8018674 <uxr_seq_num_add>
 80126b8:	9904      	ldr	r1, [sp, #16]
 80126ba:	9a03      	ldr	r2, [sp, #12]
 80126bc:	81e8      	strh	r0, [r5, #14]
 80126be:	1a52      	subs	r2, r2, r1
 80126c0:	4630      	mov	r0, r6
 80126c2:	f7f9 ff19 	bl	800c4f8 <ucdr_init_buffer>
 80126c6:	4630      	mov	r0, r6
 80126c8:	490f      	ldr	r1, [pc, #60]	@ (8012708 <on_full_output_buffer_fragmented+0x110>)
 80126ca:	4622      	mov	r2, r4
 80126cc:	f7f9 fee8 	bl	800c4a0 <ucdr_set_on_full_buffer_callback>
 80126d0:	2000      	movs	r0, #0
 80126d2:	b00a      	add	sp, #40	@ 0x28
 80126d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126d8:	b292      	uxth	r2, r2
 80126da:	2302      	movs	r3, #2
 80126dc:	210d      	movs	r1, #13
 80126de:	a802      	add	r0, sp, #8
 80126e0:	f7ff ff14 	bl	801250c <uxr_buffer_submessage_header>
 80126e4:	8928      	ldrh	r0, [r5, #8]
 80126e6:	89eb      	ldrh	r3, [r5, #14]
 80126e8:	fbb3 f1f0 	udiv	r1, r3, r0
 80126ec:	fb00 3311 	mls	r3, r0, r1, r3
 80126f0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80126f4:	6869      	ldr	r1, [r5, #4]
 80126f6:	fbb1 f1f0 	udiv	r1, r1, r0
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	fb01 f303 	mul.w	r3, r1, r3
 8012700:	6829      	ldr	r1, [r5, #0]
 8012702:	3208      	adds	r2, #8
 8012704:	50ca      	str	r2, [r1, r3]
 8012706:	e7d3      	b.n	80126b0 <on_full_output_buffer_fragmented+0xb8>
 8012708:	080125f9 	.word	0x080125f9

0801270c <uxr_prepare_output_stream>:
 801270c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801270e:	b087      	sub	sp, #28
 8012710:	2707      	movs	r7, #7
 8012712:	9202      	str	r2, [sp, #8]
 8012714:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012716:	9103      	str	r1, [sp, #12]
 8012718:	2500      	movs	r5, #0
 801271a:	3204      	adds	r2, #4
 801271c:	e9cd 7500 	strd	r7, r5, [sp]
 8012720:	461c      	mov	r4, r3
 8012722:	4606      	mov	r6, r0
 8012724:	f7fe ffc2 	bl	80116ac <uxr_prepare_stream_to_write_submessage>
 8012728:	f080 0201 	eor.w	r2, r0, #1
 801272c:	b2d2      	uxtb	r2, r2
 801272e:	75a2      	strb	r2, [r4, #22]
 8012730:	b112      	cbz	r2, 8012738 <uxr_prepare_output_stream+0x2c>
 8012732:	4628      	mov	r0, r5
 8012734:	b007      	add	sp, #28
 8012736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012738:	aa05      	add	r2, sp, #20
 801273a:	9902      	ldr	r1, [sp, #8]
 801273c:	4630      	mov	r0, r6
 801273e:	f7ff f8eb 	bl	8011918 <uxr_init_base_object_request>
 8012742:	a905      	add	r1, sp, #20
 8012744:	4605      	mov	r5, r0
 8012746:	4620      	mov	r0, r4
 8012748:	f000 ffd4 	bl	80136f4 <uxr_serialize_WRITE_DATA_Payload_Data>
 801274c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012750:	69a6      	ldr	r6, [r4, #24]
 8012752:	69e7      	ldr	r7, [r4, #28]
 8012754:	1a52      	subs	r2, r2, r1
 8012756:	4620      	mov	r0, r4
 8012758:	f7f9 fece 	bl	800c4f8 <ucdr_init_buffer>
 801275c:	4620      	mov	r0, r4
 801275e:	463a      	mov	r2, r7
 8012760:	4631      	mov	r1, r6
 8012762:	f7f9 fe9d 	bl	800c4a0 <ucdr_set_on_full_buffer_callback>
 8012766:	4628      	mov	r0, r5
 8012768:	b007      	add	sp, #28
 801276a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801276c <uxr_prepare_output_stream_fragmented>:
 801276c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012770:	b091      	sub	sp, #68	@ 0x44
 8012772:	4605      	mov	r5, r0
 8012774:	9105      	str	r1, [sp, #20]
 8012776:	3008      	adds	r0, #8
 8012778:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801277c:	461e      	mov	r6, r3
 801277e:	9204      	str	r2, [sp, #16]
 8012780:	f7ff fe90 	bl	80124a4 <uxr_get_output_reliable_stream>
 8012784:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012788:	2b01      	cmp	r3, #1
 801278a:	f000 8091 	beq.w	80128b0 <uxr_prepare_output_stream_fragmented+0x144>
 801278e:	4604      	mov	r4, r0
 8012790:	2800      	cmp	r0, #0
 8012792:	f000 808d 	beq.w	80128b0 <uxr_prepare_output_stream_fragmented+0x144>
 8012796:	f005 ff4d 	bl	8018634 <get_available_free_slots>
 801279a:	2800      	cmp	r0, #0
 801279c:	f000 8083 	beq.w	80128a6 <uxr_prepare_output_stream_fragmented+0x13a>
 80127a0:	8922      	ldrh	r2, [r4, #8]
 80127a2:	89e7      	ldrh	r7, [r4, #14]
 80127a4:	fbb7 f9f2 	udiv	r9, r7, r2
 80127a8:	fb02 7919 	mls	r9, r2, r9, r7
 80127ac:	fa1f f989 	uxth.w	r9, r9
 80127b0:	6863      	ldr	r3, [r4, #4]
 80127b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80127b6:	6823      	ldr	r3, [r4, #0]
 80127b8:	9203      	str	r2, [sp, #12]
 80127ba:	fb02 f909 	mul.w	r9, r2, r9
 80127be:	f109 0904 	add.w	r9, r9, #4
 80127c2:	4499      	add	r9, r3
 80127c4:	7b23      	ldrb	r3, [r4, #12]
 80127c6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80127ca:	4543      	cmp	r3, r8
 80127cc:	f1a2 0b04 	sub.w	fp, r2, #4
 80127d0:	d37a      	bcc.n	80128c8 <uxr_prepare_output_stream_fragmented+0x15c>
 80127d2:	f1ab 0a04 	sub.w	sl, fp, #4
 80127d6:	ebaa 0a03 	sub.w	sl, sl, r3
 80127da:	465a      	mov	r2, fp
 80127dc:	2300      	movs	r3, #0
 80127de:	4649      	mov	r1, r9
 80127e0:	a808      	add	r0, sp, #32
 80127e2:	f8cd 8000 	str.w	r8, [sp]
 80127e6:	f7f9 fe75 	bl	800c4d4 <ucdr_init_buffer_origin_offset>
 80127ea:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80127ec:	fa1f fa8a 	uxth.w	sl, sl
 80127f0:	4652      	mov	r2, sl
 80127f2:	f103 0a08 	add.w	sl, r3, #8
 80127f6:	45da      	cmp	sl, fp
 80127f8:	bf34      	ite	cc
 80127fa:	2302      	movcc	r3, #2
 80127fc:	2300      	movcs	r3, #0
 80127fe:	210d      	movs	r1, #13
 8012800:	a808      	add	r0, sp, #32
 8012802:	f7ff fe83 	bl	801250c <uxr_buffer_submessage_header>
 8012806:	8921      	ldrh	r1, [r4, #8]
 8012808:	fbb7 f2f1 	udiv	r2, r7, r1
 801280c:	fb01 7212 	mls	r2, r1, r2, r7
 8012810:	b292      	uxth	r2, r2
 8012812:	6863      	ldr	r3, [r4, #4]
 8012814:	fbb3 f3f1 	udiv	r3, r3, r1
 8012818:	fb02 f303 	mul.w	r3, r2, r3
 801281c:	6822      	ldr	r2, [r4, #0]
 801281e:	4638      	mov	r0, r7
 8012820:	f842 b003 	str.w	fp, [r2, r3]
 8012824:	2101      	movs	r1, #1
 8012826:	f005 ff25 	bl	8018674 <uxr_seq_num_add>
 801282a:	9b03      	ldr	r3, [sp, #12]
 801282c:	f108 0104 	add.w	r1, r8, #4
 8012830:	f1a3 0208 	sub.w	r2, r3, #8
 8012834:	eba2 0208 	sub.w	r2, r2, r8
 8012838:	4449      	add	r1, r9
 801283a:	4607      	mov	r7, r0
 801283c:	4630      	mov	r0, r6
 801283e:	f7f9 fe5b 	bl	800c4f8 <ucdr_init_buffer>
 8012842:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012844:	81e7      	strh	r7, [r4, #14]
 8012846:	1d1a      	adds	r2, r3, #4
 8012848:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801284c:	bf28      	it	cs
 801284e:	2200      	movcs	r2, #0
 8012850:	2300      	movs	r3, #0
 8012852:	b292      	uxth	r2, r2
 8012854:	2107      	movs	r1, #7
 8012856:	4630      	mov	r0, r6
 8012858:	f7ff fe58 	bl	801250c <uxr_buffer_submessage_header>
 801285c:	9904      	ldr	r1, [sp, #16]
 801285e:	aa07      	add	r2, sp, #28
 8012860:	4628      	mov	r0, r5
 8012862:	f7ff f859 	bl	8011918 <uxr_init_base_object_request>
 8012866:	4604      	mov	r4, r0
 8012868:	b318      	cbz	r0, 80128b2 <uxr_prepare_output_stream_fragmented+0x146>
 801286a:	a907      	add	r1, sp, #28
 801286c:	4630      	mov	r0, r6
 801286e:	f000 ff41 	bl	80136f4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012872:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012876:	4630      	mov	r0, r6
 8012878:	1a52      	subs	r2, r2, r1
 801287a:	f7f9 fe3d 	bl	800c4f8 <ucdr_init_buffer>
 801287e:	9b05      	ldr	r3, [sp, #20]
 8012880:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012884:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012886:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801288a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801288c:	491b      	ldr	r1, [pc, #108]	@ (80128fc <uxr_prepare_output_stream_fragmented+0x190>)
 801288e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8012892:	4630      	mov	r0, r6
 8012894:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8012898:	462a      	mov	r2, r5
 801289a:	f7f9 fe01 	bl	800c4a0 <ucdr_set_on_full_buffer_callback>
 801289e:	4620      	mov	r0, r4
 80128a0:	b011      	add	sp, #68	@ 0x44
 80128a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128a6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80128a8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80128aa:	4628      	mov	r0, r5
 80128ac:	4798      	blx	r3
 80128ae:	b920      	cbnz	r0, 80128ba <uxr_prepare_output_stream_fragmented+0x14e>
 80128b0:	2400      	movs	r4, #0
 80128b2:	4620      	mov	r0, r4
 80128b4:	b011      	add	sp, #68	@ 0x44
 80128b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128ba:	4620      	mov	r0, r4
 80128bc:	f005 feba 	bl	8018634 <get_available_free_slots>
 80128c0:	2800      	cmp	r0, #0
 80128c2:	f47f af6d 	bne.w	80127a0 <uxr_prepare_output_stream_fragmented+0x34>
 80128c6:	e7f3      	b.n	80128b0 <uxr_prepare_output_stream_fragmented+0x144>
 80128c8:	4638      	mov	r0, r7
 80128ca:	2101      	movs	r1, #1
 80128cc:	f005 fed2 	bl	8018674 <uxr_seq_num_add>
 80128d0:	8921      	ldrh	r1, [r4, #8]
 80128d2:	fbb0 f2f1 	udiv	r2, r0, r1
 80128d6:	fb01 0912 	mls	r9, r1, r2, r0
 80128da:	fa1f f289 	uxth.w	r2, r9
 80128de:	6863      	ldr	r3, [r4, #4]
 80128e0:	fbb3 f9f1 	udiv	r9, r3, r1
 80128e4:	6823      	ldr	r3, [r4, #0]
 80128e6:	fb02 f909 	mul.w	r9, r2, r9
 80128ea:	f109 0904 	add.w	r9, r9, #4
 80128ee:	4499      	add	r9, r3
 80128f0:	4607      	mov	r7, r0
 80128f2:	7b23      	ldrb	r3, [r4, #12]
 80128f4:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80128f8:	e76b      	b.n	80127d2 <uxr_prepare_output_stream_fragmented+0x66>
 80128fa:	bf00      	nop
 80128fc:	080125f9 	.word	0x080125f9

08012900 <uxr_serialize_message_header>:
 8012900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012902:	b083      	sub	sp, #12
 8012904:	4616      	mov	r6, r2
 8012906:	4604      	mov	r4, r0
 8012908:	9301      	str	r3, [sp, #4]
 801290a:	460d      	mov	r5, r1
 801290c:	9f08      	ldr	r7, [sp, #32]
 801290e:	f7f8 fb11 	bl	800af34 <ucdr_serialize_uint8_t>
 8012912:	4631      	mov	r1, r6
 8012914:	4620      	mov	r0, r4
 8012916:	f7f8 fb0d 	bl	800af34 <ucdr_serialize_uint8_t>
 801291a:	9a01      	ldr	r2, [sp, #4]
 801291c:	2101      	movs	r1, #1
 801291e:	4620      	mov	r0, r4
 8012920:	f7f8 fbb4 	bl	800b08c <ucdr_serialize_endian_uint16_t>
 8012924:	062b      	lsls	r3, r5, #24
 8012926:	d501      	bpl.n	801292c <uxr_serialize_message_header+0x2c>
 8012928:	b003      	add	sp, #12
 801292a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801292c:	2204      	movs	r2, #4
 801292e:	4639      	mov	r1, r7
 8012930:	4620      	mov	r0, r4
 8012932:	b003      	add	sp, #12
 8012934:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012938:	f7fd b9a4 	b.w	800fc84 <ucdr_serialize_array_uint8_t>

0801293c <uxr_deserialize_message_header>:
 801293c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801293e:	b083      	sub	sp, #12
 8012940:	4616      	mov	r6, r2
 8012942:	4604      	mov	r4, r0
 8012944:	9301      	str	r3, [sp, #4]
 8012946:	460d      	mov	r5, r1
 8012948:	9f08      	ldr	r7, [sp, #32]
 801294a:	f7f8 fb09 	bl	800af60 <ucdr_deserialize_uint8_t>
 801294e:	4631      	mov	r1, r6
 8012950:	4620      	mov	r0, r4
 8012952:	f7f8 fb05 	bl	800af60 <ucdr_deserialize_uint8_t>
 8012956:	9a01      	ldr	r2, [sp, #4]
 8012958:	2101      	movs	r1, #1
 801295a:	4620      	mov	r0, r4
 801295c:	f7f8 fc8a 	bl	800b274 <ucdr_deserialize_endian_uint16_t>
 8012960:	f995 3000 	ldrsb.w	r3, [r5]
 8012964:	2b00      	cmp	r3, #0
 8012966:	da01      	bge.n	801296c <uxr_deserialize_message_header+0x30>
 8012968:	b003      	add	sp, #12
 801296a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801296c:	2204      	movs	r2, #4
 801296e:	4639      	mov	r1, r7
 8012970:	4620      	mov	r0, r4
 8012972:	b003      	add	sp, #12
 8012974:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012978:	f7fd b9e8 	b.w	800fd4c <ucdr_deserialize_array_uint8_t>

0801297c <uxr_serialize_submessage_header>:
 801297c:	b530      	push	{r4, r5, lr}
 801297e:	b083      	sub	sp, #12
 8012980:	4615      	mov	r5, r2
 8012982:	4604      	mov	r4, r0
 8012984:	9301      	str	r3, [sp, #4]
 8012986:	f7f8 fad5 	bl	800af34 <ucdr_serialize_uint8_t>
 801298a:	4629      	mov	r1, r5
 801298c:	4620      	mov	r0, r4
 801298e:	f7f8 fad1 	bl	800af34 <ucdr_serialize_uint8_t>
 8012992:	9a01      	ldr	r2, [sp, #4]
 8012994:	2101      	movs	r1, #1
 8012996:	4620      	mov	r0, r4
 8012998:	b003      	add	sp, #12
 801299a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801299e:	f7f8 bb75 	b.w	800b08c <ucdr_serialize_endian_uint16_t>
 80129a2:	bf00      	nop

080129a4 <uxr_deserialize_submessage_header>:
 80129a4:	b530      	push	{r4, r5, lr}
 80129a6:	b083      	sub	sp, #12
 80129a8:	4615      	mov	r5, r2
 80129aa:	4604      	mov	r4, r0
 80129ac:	9301      	str	r3, [sp, #4]
 80129ae:	f7f8 fad7 	bl	800af60 <ucdr_deserialize_uint8_t>
 80129b2:	4629      	mov	r1, r5
 80129b4:	4620      	mov	r0, r4
 80129b6:	f7f8 fad3 	bl	800af60 <ucdr_deserialize_uint8_t>
 80129ba:	9a01      	ldr	r2, [sp, #4]
 80129bc:	2101      	movs	r1, #1
 80129be:	4620      	mov	r0, r4
 80129c0:	b003      	add	sp, #12
 80129c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80129c6:	f7f8 bc55 	b.w	800b274 <ucdr_deserialize_endian_uint16_t>
 80129ca:	bf00      	nop

080129cc <uxr_serialize_CLIENT_Representation>:
 80129cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129d0:	2204      	movs	r2, #4
 80129d2:	460e      	mov	r6, r1
 80129d4:	4605      	mov	r5, r0
 80129d6:	f7fd f955 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 80129da:	2202      	movs	r2, #2
 80129dc:	4607      	mov	r7, r0
 80129de:	1d31      	adds	r1, r6, #4
 80129e0:	4628      	mov	r0, r5
 80129e2:	f7fd f94f 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 80129e6:	4038      	ands	r0, r7
 80129e8:	2202      	movs	r2, #2
 80129ea:	1db1      	adds	r1, r6, #6
 80129ec:	b2c7      	uxtb	r7, r0
 80129ee:	4628      	mov	r0, r5
 80129f0:	f7fd f948 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 80129f4:	2204      	movs	r2, #4
 80129f6:	4007      	ands	r7, r0
 80129f8:	f106 0108 	add.w	r1, r6, #8
 80129fc:	4628      	mov	r0, r5
 80129fe:	f7fd f941 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 8012a02:	7b31      	ldrb	r1, [r6, #12]
 8012a04:	4007      	ands	r7, r0
 8012a06:	4628      	mov	r0, r5
 8012a08:	f7f8 fa94 	bl	800af34 <ucdr_serialize_uint8_t>
 8012a0c:	7b71      	ldrb	r1, [r6, #13]
 8012a0e:	4007      	ands	r7, r0
 8012a10:	4628      	mov	r0, r5
 8012a12:	f7f8 fa61 	bl	800aed8 <ucdr_serialize_bool>
 8012a16:	7b73      	ldrb	r3, [r6, #13]
 8012a18:	ea07 0800 	and.w	r8, r7, r0
 8012a1c:	b93b      	cbnz	r3, 8012a2e <uxr_serialize_CLIENT_Representation+0x62>
 8012a1e:	8bb1      	ldrh	r1, [r6, #28]
 8012a20:	4628      	mov	r0, r5
 8012a22:	f7f8 fab3 	bl	800af8c <ucdr_serialize_uint16_t>
 8012a26:	ea08 0000 	and.w	r0, r8, r0
 8012a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a2e:	6931      	ldr	r1, [r6, #16]
 8012a30:	4628      	mov	r0, r5
 8012a32:	f7f8 fc95 	bl	800b360 <ucdr_serialize_uint32_t>
 8012a36:	6933      	ldr	r3, [r6, #16]
 8012a38:	b1e3      	cbz	r3, 8012a74 <uxr_serialize_CLIENT_Representation+0xa8>
 8012a3a:	b1c0      	cbz	r0, 8012a6e <uxr_serialize_CLIENT_Representation+0xa2>
 8012a3c:	4637      	mov	r7, r6
 8012a3e:	f04f 0900 	mov.w	r9, #0
 8012a42:	e001      	b.n	8012a48 <uxr_serialize_CLIENT_Representation+0x7c>
 8012a44:	3708      	adds	r7, #8
 8012a46:	b194      	cbz	r4, 8012a6e <uxr_serialize_CLIENT_Representation+0xa2>
 8012a48:	6979      	ldr	r1, [r7, #20]
 8012a4a:	4628      	mov	r0, r5
 8012a4c:	f005 f8b2 	bl	8017bb4 <ucdr_serialize_string>
 8012a50:	69b9      	ldr	r1, [r7, #24]
 8012a52:	4604      	mov	r4, r0
 8012a54:	4628      	mov	r0, r5
 8012a56:	f005 f8ad 	bl	8017bb4 <ucdr_serialize_string>
 8012a5a:	6933      	ldr	r3, [r6, #16]
 8012a5c:	f109 0901 	add.w	r9, r9, #1
 8012a60:	4004      	ands	r4, r0
 8012a62:	4599      	cmp	r9, r3
 8012a64:	b2e4      	uxtb	r4, r4
 8012a66:	d3ed      	bcc.n	8012a44 <uxr_serialize_CLIENT_Representation+0x78>
 8012a68:	ea08 0804 	and.w	r8, r8, r4
 8012a6c:	e7d7      	b.n	8012a1e <uxr_serialize_CLIENT_Representation+0x52>
 8012a6e:	f04f 0800 	mov.w	r8, #0
 8012a72:	e7d4      	b.n	8012a1e <uxr_serialize_CLIENT_Representation+0x52>
 8012a74:	ea08 0800 	and.w	r8, r8, r0
 8012a78:	e7d1      	b.n	8012a1e <uxr_serialize_CLIENT_Representation+0x52>
 8012a7a:	bf00      	nop

08012a7c <uxr_deserialize_CLIENT_Representation>:
 8012a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a80:	2204      	movs	r2, #4
 8012a82:	460c      	mov	r4, r1
 8012a84:	4605      	mov	r5, r0
 8012a86:	f7fd f961 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 8012a8a:	2202      	movs	r2, #2
 8012a8c:	4607      	mov	r7, r0
 8012a8e:	1d21      	adds	r1, r4, #4
 8012a90:	4628      	mov	r0, r5
 8012a92:	f7fd f95b 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 8012a96:	4038      	ands	r0, r7
 8012a98:	2202      	movs	r2, #2
 8012a9a:	1da1      	adds	r1, r4, #6
 8012a9c:	b2c6      	uxtb	r6, r0
 8012a9e:	4628      	mov	r0, r5
 8012aa0:	f7fd f954 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 8012aa4:	2204      	movs	r2, #4
 8012aa6:	4006      	ands	r6, r0
 8012aa8:	f104 0108 	add.w	r1, r4, #8
 8012aac:	4628      	mov	r0, r5
 8012aae:	f7fd f94d 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 8012ab2:	f104 010c 	add.w	r1, r4, #12
 8012ab6:	4006      	ands	r6, r0
 8012ab8:	4628      	mov	r0, r5
 8012aba:	f7f8 fa51 	bl	800af60 <ucdr_deserialize_uint8_t>
 8012abe:	f104 010d 	add.w	r1, r4, #13
 8012ac2:	ea06 0700 	and.w	r7, r6, r0
 8012ac6:	4628      	mov	r0, r5
 8012ac8:	f7f8 fa1c 	bl	800af04 <ucdr_deserialize_bool>
 8012acc:	7b63      	ldrb	r3, [r4, #13]
 8012ace:	4007      	ands	r7, r0
 8012ad0:	b93b      	cbnz	r3, 8012ae2 <uxr_deserialize_CLIENT_Representation+0x66>
 8012ad2:	f104 011c 	add.w	r1, r4, #28
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	f7f8 fb58 	bl	800b18c <ucdr_deserialize_uint16_t>
 8012adc:	4038      	ands	r0, r7
 8012ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ae2:	f104 0110 	add.w	r1, r4, #16
 8012ae6:	4628      	mov	r0, r5
 8012ae8:	f7f8 fd6a 	bl	800b5c0 <ucdr_deserialize_uint32_t>
 8012aec:	6923      	ldr	r3, [r4, #16]
 8012aee:	2b01      	cmp	r3, #1
 8012af0:	d903      	bls.n	8012afa <uxr_deserialize_CLIENT_Representation+0x7e>
 8012af2:	2301      	movs	r3, #1
 8012af4:	75ab      	strb	r3, [r5, #22]
 8012af6:	2700      	movs	r7, #0
 8012af8:	e7eb      	b.n	8012ad2 <uxr_deserialize_CLIENT_Representation+0x56>
 8012afa:	b30b      	cbz	r3, 8012b40 <uxr_deserialize_CLIENT_Representation+0xc4>
 8012afc:	2800      	cmp	r0, #0
 8012afe:	d0fa      	beq.n	8012af6 <uxr_deserialize_CLIENT_Representation+0x7a>
 8012b00:	46a0      	mov	r8, r4
 8012b02:	f04f 0900 	mov.w	r9, #0
 8012b06:	e001      	b.n	8012b0c <uxr_deserialize_CLIENT_Representation+0x90>
 8012b08:	2e00      	cmp	r6, #0
 8012b0a:	d0f4      	beq.n	8012af6 <uxr_deserialize_CLIENT_Representation+0x7a>
 8012b0c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b14:	4628      	mov	r0, r5
 8012b16:	f005 f85d 	bl	8017bd4 <ucdr_deserialize_string>
 8012b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b1e:	4606      	mov	r6, r0
 8012b20:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012b24:	4628      	mov	r0, r5
 8012b26:	f005 f855 	bl	8017bd4 <ucdr_deserialize_string>
 8012b2a:	6923      	ldr	r3, [r4, #16]
 8012b2c:	f109 0901 	add.w	r9, r9, #1
 8012b30:	4006      	ands	r6, r0
 8012b32:	4599      	cmp	r9, r3
 8012b34:	f108 0808 	add.w	r8, r8, #8
 8012b38:	b2f6      	uxtb	r6, r6
 8012b3a:	d3e5      	bcc.n	8012b08 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012b3c:	4037      	ands	r7, r6
 8012b3e:	e7c8      	b.n	8012ad2 <uxr_deserialize_CLIENT_Representation+0x56>
 8012b40:	4007      	ands	r7, r0
 8012b42:	e7c6      	b.n	8012ad2 <uxr_deserialize_CLIENT_Representation+0x56>

08012b44 <uxr_serialize_AGENT_Representation>:
 8012b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b48:	2204      	movs	r2, #4
 8012b4a:	460f      	mov	r7, r1
 8012b4c:	4605      	mov	r5, r0
 8012b4e:	f7fd f899 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 8012b52:	2202      	movs	r2, #2
 8012b54:	4604      	mov	r4, r0
 8012b56:	1d39      	adds	r1, r7, #4
 8012b58:	4628      	mov	r0, r5
 8012b5a:	f7fd f893 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 8012b5e:	4020      	ands	r0, r4
 8012b60:	2202      	movs	r2, #2
 8012b62:	1db9      	adds	r1, r7, #6
 8012b64:	b2c4      	uxtb	r4, r0
 8012b66:	4628      	mov	r0, r5
 8012b68:	f7fd f88c 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 8012b6c:	7a39      	ldrb	r1, [r7, #8]
 8012b6e:	4004      	ands	r4, r0
 8012b70:	4628      	mov	r0, r5
 8012b72:	f7f8 f9b1 	bl	800aed8 <ucdr_serialize_bool>
 8012b76:	7a3b      	ldrb	r3, [r7, #8]
 8012b78:	ea00 0804 	and.w	r8, r0, r4
 8012b7c:	b913      	cbnz	r3, 8012b84 <uxr_serialize_AGENT_Representation+0x40>
 8012b7e:	4640      	mov	r0, r8
 8012b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b84:	68f9      	ldr	r1, [r7, #12]
 8012b86:	4628      	mov	r0, r5
 8012b88:	f7f8 fbea 	bl	800b360 <ucdr_serialize_uint32_t>
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	b303      	cbz	r3, 8012bd2 <uxr_serialize_AGENT_Representation+0x8e>
 8012b90:	b1d0      	cbz	r0, 8012bc8 <uxr_serialize_AGENT_Representation+0x84>
 8012b92:	463e      	mov	r6, r7
 8012b94:	f04f 0900 	mov.w	r9, #0
 8012b98:	e001      	b.n	8012b9e <uxr_serialize_AGENT_Representation+0x5a>
 8012b9a:	3608      	adds	r6, #8
 8012b9c:	b1a4      	cbz	r4, 8012bc8 <uxr_serialize_AGENT_Representation+0x84>
 8012b9e:	6931      	ldr	r1, [r6, #16]
 8012ba0:	4628      	mov	r0, r5
 8012ba2:	f005 f807 	bl	8017bb4 <ucdr_serialize_string>
 8012ba6:	6971      	ldr	r1, [r6, #20]
 8012ba8:	4604      	mov	r4, r0
 8012baa:	4628      	mov	r0, r5
 8012bac:	f005 f802 	bl	8017bb4 <ucdr_serialize_string>
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	f109 0901 	add.w	r9, r9, #1
 8012bb6:	4004      	ands	r4, r0
 8012bb8:	4599      	cmp	r9, r3
 8012bba:	b2e4      	uxtb	r4, r4
 8012bbc:	d3ed      	bcc.n	8012b9a <uxr_serialize_AGENT_Representation+0x56>
 8012bbe:	ea08 0804 	and.w	r8, r8, r4
 8012bc2:	4640      	mov	r0, r8
 8012bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bc8:	f04f 0800 	mov.w	r8, #0
 8012bcc:	4640      	mov	r0, r8
 8012bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bd2:	ea08 0800 	and.w	r8, r8, r0
 8012bd6:	e7d2      	b.n	8012b7e <uxr_serialize_AGENT_Representation+0x3a>

08012bd8 <uxr_serialize_DATAWRITER_Representation>:
 8012bd8:	b570      	push	{r4, r5, r6, lr}
 8012bda:	460d      	mov	r5, r1
 8012bdc:	7809      	ldrb	r1, [r1, #0]
 8012bde:	4606      	mov	r6, r0
 8012be0:	f7f8 f9a8 	bl	800af34 <ucdr_serialize_uint8_t>
 8012be4:	4604      	mov	r4, r0
 8012be6:	b130      	cbz	r0, 8012bf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012be8:	782b      	ldrb	r3, [r5, #0]
 8012bea:	2b02      	cmp	r3, #2
 8012bec:	d00c      	beq.n	8012c08 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012bee:	2b03      	cmp	r3, #3
 8012bf0:	d010      	beq.n	8012c14 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8012bf2:	2b01      	cmp	r3, #1
 8012bf4:	d008      	beq.n	8012c08 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012bf6:	2202      	movs	r2, #2
 8012bf8:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012bfc:	4630      	mov	r0, r6
 8012bfe:	f7fd f841 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 8012c02:	4020      	ands	r0, r4
 8012c04:	b2c0      	uxtb	r0, r0
 8012c06:	bd70      	pop	{r4, r5, r6, pc}
 8012c08:	6869      	ldr	r1, [r5, #4]
 8012c0a:	4630      	mov	r0, r6
 8012c0c:	f004 ffd2 	bl	8017bb4 <ucdr_serialize_string>
 8012c10:	4604      	mov	r4, r0
 8012c12:	e7f0      	b.n	8012bf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012c14:	4629      	mov	r1, r5
 8012c16:	4630      	mov	r0, r6
 8012c18:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8012c1c:	3104      	adds	r1, #4
 8012c1e:	f7fd f9cf 	bl	800ffc0 <ucdr_serialize_sequence_uint8_t>
 8012c22:	4604      	mov	r4, r0
 8012c24:	e7e7      	b.n	8012bf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012c26:	bf00      	nop

08012c28 <uxr_serialize_ObjectVariant.part.0>:
 8012c28:	b570      	push	{r4, r5, r6, lr}
 8012c2a:	780b      	ldrb	r3, [r1, #0]
 8012c2c:	3b01      	subs	r3, #1
 8012c2e:	460c      	mov	r4, r1
 8012c30:	4605      	mov	r5, r0
 8012c32:	2b0d      	cmp	r3, #13
 8012c34:	d854      	bhi.n	8012ce0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012c36:	e8df f003 	tbb	[pc, r3]
 8012c3a:	0730      	.short	0x0730
 8012c3c:	07071b1b 	.word	0x07071b1b
 8012c40:	0c530707 	.word	0x0c530707
 8012c44:	494e0c0c 	.word	0x494e0c0c
 8012c48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c4c:	3104      	adds	r1, #4
 8012c4e:	f7ff bfc3 	b.w	8012bd8 <uxr_serialize_DATAWRITER_Representation>
 8012c52:	7909      	ldrb	r1, [r1, #4]
 8012c54:	f7f8 f96e 	bl	800af34 <ucdr_serialize_uint8_t>
 8012c58:	b1e8      	cbz	r0, 8012c96 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8012c5a:	7923      	ldrb	r3, [r4, #4]
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	d001      	beq.n	8012c64 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8012c60:	2b02      	cmp	r3, #2
 8012c62:	d13d      	bne.n	8012ce0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012c64:	68a1      	ldr	r1, [r4, #8]
 8012c66:	4628      	mov	r0, r5
 8012c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c6c:	f004 bfa2 	b.w	8017bb4 <ucdr_serialize_string>
 8012c70:	7909      	ldrb	r1, [r1, #4]
 8012c72:	f7f8 f95f 	bl	800af34 <ucdr_serialize_uint8_t>
 8012c76:	4606      	mov	r6, r0
 8012c78:	b120      	cbz	r0, 8012c84 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012c7a:	7923      	ldrb	r3, [r4, #4]
 8012c7c:	2b02      	cmp	r3, #2
 8012c7e:	d039      	beq.n	8012cf4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012c80:	2b03      	cmp	r3, #3
 8012c82:	d02f      	beq.n	8012ce4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8012c84:	2202      	movs	r2, #2
 8012c86:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8012c8a:	4628      	mov	r0, r5
 8012c8c:	f7fc fffa 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 8012c90:	4030      	ands	r0, r6
 8012c92:	b2c0      	uxtb	r0, r0
 8012c94:	bd70      	pop	{r4, r5, r6, pc}
 8012c96:	2000      	movs	r0, #0
 8012c98:	bd70      	pop	{r4, r5, r6, pc}
 8012c9a:	7909      	ldrb	r1, [r1, #4]
 8012c9c:	f7f8 f94a 	bl	800af34 <ucdr_serialize_uint8_t>
 8012ca0:	4606      	mov	r6, r0
 8012ca2:	b158      	cbz	r0, 8012cbc <uxr_serialize_ObjectVariant.part.0+0x94>
 8012ca4:	7923      	ldrb	r3, [r4, #4]
 8012ca6:	2b02      	cmp	r3, #2
 8012ca8:	d003      	beq.n	8012cb2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 8012caa:	2b03      	cmp	r3, #3
 8012cac:	d028      	beq.n	8012d00 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8012cae:	2b01      	cmp	r3, #1
 8012cb0:	d104      	bne.n	8012cbc <uxr_serialize_ObjectVariant.part.0+0x94>
 8012cb2:	68a1      	ldr	r1, [r4, #8]
 8012cb4:	4628      	mov	r0, r5
 8012cb6:	f004 ff7d 	bl	8017bb4 <ucdr_serialize_string>
 8012cba:	4606      	mov	r6, r0
 8012cbc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8012cc0:	4628      	mov	r0, r5
 8012cc2:	f7f8 fe73 	bl	800b9ac <ucdr_serialize_int16_t>
 8012cc6:	4030      	ands	r0, r6
 8012cc8:	b2c0      	uxtb	r0, r0
 8012cca:	bd70      	pop	{r4, r5, r6, pc}
 8012ccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012cd0:	3104      	adds	r1, #4
 8012cd2:	f7ff be7b 	b.w	80129cc <uxr_serialize_CLIENT_Representation>
 8012cd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012cda:	3104      	adds	r1, #4
 8012cdc:	f7ff bf32 	b.w	8012b44 <uxr_serialize_AGENT_Representation>
 8012ce0:	2001      	movs	r0, #1
 8012ce2:	bd70      	pop	{r4, r5, r6, pc}
 8012ce4:	68a2      	ldr	r2, [r4, #8]
 8012ce6:	f104 010c 	add.w	r1, r4, #12
 8012cea:	4628      	mov	r0, r5
 8012cec:	f7fd f968 	bl	800ffc0 <ucdr_serialize_sequence_uint8_t>
 8012cf0:	4606      	mov	r6, r0
 8012cf2:	e7c7      	b.n	8012c84 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012cf4:	68a1      	ldr	r1, [r4, #8]
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	f004 ff5c 	bl	8017bb4 <ucdr_serialize_string>
 8012cfc:	4606      	mov	r6, r0
 8012cfe:	e7c1      	b.n	8012c84 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012d00:	68a2      	ldr	r2, [r4, #8]
 8012d02:	f104 010c 	add.w	r1, r4, #12
 8012d06:	4628      	mov	r0, r5
 8012d08:	f7fd f95a 	bl	800ffc0 <ucdr_serialize_sequence_uint8_t>
 8012d0c:	4606      	mov	r6, r0
 8012d0e:	e7d5      	b.n	8012cbc <uxr_serialize_ObjectVariant.part.0+0x94>

08012d10 <uxr_deserialize_DATAWRITER_Representation>:
 8012d10:	b570      	push	{r4, r5, r6, lr}
 8012d12:	4606      	mov	r6, r0
 8012d14:	460d      	mov	r5, r1
 8012d16:	f7f8 f923 	bl	800af60 <ucdr_deserialize_uint8_t>
 8012d1a:	4604      	mov	r4, r0
 8012d1c:	b130      	cbz	r0, 8012d2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012d1e:	782b      	ldrb	r3, [r5, #0]
 8012d20:	2b02      	cmp	r3, #2
 8012d22:	d00c      	beq.n	8012d3e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012d24:	2b03      	cmp	r3, #3
 8012d26:	d012      	beq.n	8012d4e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012d28:	2b01      	cmp	r3, #1
 8012d2a:	d008      	beq.n	8012d3e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012d2c:	2202      	movs	r2, #2
 8012d2e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012d32:	4630      	mov	r0, r6
 8012d34:	f7fd f80a 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 8012d38:	4020      	ands	r0, r4
 8012d3a:	b2c0      	uxtb	r0, r0
 8012d3c:	bd70      	pop	{r4, r5, r6, pc}
 8012d3e:	6869      	ldr	r1, [r5, #4]
 8012d40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012d44:	4630      	mov	r0, r6
 8012d46:	f004 ff45 	bl	8017bd4 <ucdr_deserialize_string>
 8012d4a:	4604      	mov	r4, r0
 8012d4c:	e7ee      	b.n	8012d2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012d4e:	1d2b      	adds	r3, r5, #4
 8012d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012d54:	f105 0108 	add.w	r1, r5, #8
 8012d58:	4630      	mov	r0, r6
 8012d5a:	f7fd f943 	bl	800ffe4 <ucdr_deserialize_sequence_uint8_t>
 8012d5e:	4604      	mov	r4, r0
 8012d60:	e7e4      	b.n	8012d2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012d62:	bf00      	nop

08012d64 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012d64:	b570      	push	{r4, r5, r6, lr}
 8012d66:	460d      	mov	r5, r1
 8012d68:	7809      	ldrb	r1, [r1, #0]
 8012d6a:	4606      	mov	r6, r0
 8012d6c:	f7f8 f8b4 	bl	800aed8 <ucdr_serialize_bool>
 8012d70:	782b      	ldrb	r3, [r5, #0]
 8012d72:	4604      	mov	r4, r0
 8012d74:	b94b      	cbnz	r3, 8012d8a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012d76:	7a29      	ldrb	r1, [r5, #8]
 8012d78:	4630      	mov	r0, r6
 8012d7a:	f7f8 f8ad 	bl	800aed8 <ucdr_serialize_bool>
 8012d7e:	7a2b      	ldrb	r3, [r5, #8]
 8012d80:	4004      	ands	r4, r0
 8012d82:	b2e4      	uxtb	r4, r4
 8012d84:	b943      	cbnz	r3, 8012d98 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012d86:	4620      	mov	r0, r4
 8012d88:	bd70      	pop	{r4, r5, r6, pc}
 8012d8a:	6869      	ldr	r1, [r5, #4]
 8012d8c:	4630      	mov	r0, r6
 8012d8e:	f004 ff11 	bl	8017bb4 <ucdr_serialize_string>
 8012d92:	4004      	ands	r4, r0
 8012d94:	b2e4      	uxtb	r4, r4
 8012d96:	e7ee      	b.n	8012d76 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012d98:	68e9      	ldr	r1, [r5, #12]
 8012d9a:	4630      	mov	r0, r6
 8012d9c:	f004 ff0a 	bl	8017bb4 <ucdr_serialize_string>
 8012da0:	4004      	ands	r4, r0
 8012da2:	4620      	mov	r0, r4
 8012da4:	bd70      	pop	{r4, r5, r6, pc}
 8012da6:	bf00      	nop

08012da8 <uxr_serialize_OBJK_Topic_Binary>:
 8012da8:	b570      	push	{r4, r5, r6, lr}
 8012daa:	460d      	mov	r5, r1
 8012dac:	6809      	ldr	r1, [r1, #0]
 8012dae:	4606      	mov	r6, r0
 8012db0:	f004 ff00 	bl	8017bb4 <ucdr_serialize_string>
 8012db4:	7929      	ldrb	r1, [r5, #4]
 8012db6:	4604      	mov	r4, r0
 8012db8:	4630      	mov	r0, r6
 8012dba:	f7f8 f88d 	bl	800aed8 <ucdr_serialize_bool>
 8012dbe:	792b      	ldrb	r3, [r5, #4]
 8012dc0:	4004      	ands	r4, r0
 8012dc2:	b2e4      	uxtb	r4, r4
 8012dc4:	b943      	cbnz	r3, 8012dd8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8012dc6:	7b29      	ldrb	r1, [r5, #12]
 8012dc8:	4630      	mov	r0, r6
 8012dca:	f7f8 f885 	bl	800aed8 <ucdr_serialize_bool>
 8012dce:	7b2b      	ldrb	r3, [r5, #12]
 8012dd0:	4004      	ands	r4, r0
 8012dd2:	b93b      	cbnz	r3, 8012de4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	bd70      	pop	{r4, r5, r6, pc}
 8012dd8:	68a9      	ldr	r1, [r5, #8]
 8012dda:	4630      	mov	r0, r6
 8012ddc:	f004 feea 	bl	8017bb4 <ucdr_serialize_string>
 8012de0:	4004      	ands	r4, r0
 8012de2:	e7f0      	b.n	8012dc6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012de4:	6929      	ldr	r1, [r5, #16]
 8012de6:	4630      	mov	r0, r6
 8012de8:	f004 fee4 	bl	8017bb4 <ucdr_serialize_string>
 8012dec:	4004      	ands	r4, r0
 8012dee:	b2e4      	uxtb	r4, r4
 8012df0:	4620      	mov	r0, r4
 8012df2:	bd70      	pop	{r4, r5, r6, pc}

08012df4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012df8:	460c      	mov	r4, r1
 8012dfa:	7809      	ldrb	r1, [r1, #0]
 8012dfc:	4606      	mov	r6, r0
 8012dfe:	f7f8 f86b 	bl	800aed8 <ucdr_serialize_bool>
 8012e02:	7823      	ldrb	r3, [r4, #0]
 8012e04:	4605      	mov	r5, r0
 8012e06:	b96b      	cbnz	r3, 8012e24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012e08:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012e0c:	4630      	mov	r0, r6
 8012e0e:	f7f8 f863 	bl	800aed8 <ucdr_serialize_bool>
 8012e12:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012e16:	4005      	ands	r5, r0
 8012e18:	b2ed      	uxtb	r5, r5
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d169      	bne.n	8012ef2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012e1e:	4628      	mov	r0, r5
 8012e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e24:	6861      	ldr	r1, [r4, #4]
 8012e26:	4630      	mov	r0, r6
 8012e28:	f7f8 fa9a 	bl	800b360 <ucdr_serialize_uint32_t>
 8012e2c:	6863      	ldr	r3, [r4, #4]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d06b      	beq.n	8012f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8012e32:	2800      	cmp	r0, #0
 8012e34:	d067      	beq.n	8012f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012e36:	68a1      	ldr	r1, [r4, #8]
 8012e38:	4630      	mov	r0, r6
 8012e3a:	f004 febb 	bl	8017bb4 <ucdr_serialize_string>
 8012e3e:	6863      	ldr	r3, [r4, #4]
 8012e40:	2b01      	cmp	r3, #1
 8012e42:	d953      	bls.n	8012eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012e44:	2800      	cmp	r0, #0
 8012e46:	d05e      	beq.n	8012f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012e48:	68e1      	ldr	r1, [r4, #12]
 8012e4a:	4630      	mov	r0, r6
 8012e4c:	f004 feb2 	bl	8017bb4 <ucdr_serialize_string>
 8012e50:	6863      	ldr	r3, [r4, #4]
 8012e52:	2b02      	cmp	r3, #2
 8012e54:	d94a      	bls.n	8012eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012e56:	2800      	cmp	r0, #0
 8012e58:	d055      	beq.n	8012f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012e5a:	6921      	ldr	r1, [r4, #16]
 8012e5c:	4630      	mov	r0, r6
 8012e5e:	f004 fea9 	bl	8017bb4 <ucdr_serialize_string>
 8012e62:	6863      	ldr	r3, [r4, #4]
 8012e64:	2b03      	cmp	r3, #3
 8012e66:	d941      	bls.n	8012eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	d04c      	beq.n	8012f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012e6c:	6961      	ldr	r1, [r4, #20]
 8012e6e:	4630      	mov	r0, r6
 8012e70:	f004 fea0 	bl	8017bb4 <ucdr_serialize_string>
 8012e74:	6863      	ldr	r3, [r4, #4]
 8012e76:	2b04      	cmp	r3, #4
 8012e78:	d938      	bls.n	8012eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012e7a:	2800      	cmp	r0, #0
 8012e7c:	d043      	beq.n	8012f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012e7e:	69a1      	ldr	r1, [r4, #24]
 8012e80:	4630      	mov	r0, r6
 8012e82:	f004 fe97 	bl	8017bb4 <ucdr_serialize_string>
 8012e86:	6863      	ldr	r3, [r4, #4]
 8012e88:	2b05      	cmp	r3, #5
 8012e8a:	d92f      	bls.n	8012eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012e8c:	2800      	cmp	r0, #0
 8012e8e:	d03a      	beq.n	8012f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012e90:	69e1      	ldr	r1, [r4, #28]
 8012e92:	4630      	mov	r0, r6
 8012e94:	f004 fe8e 	bl	8017bb4 <ucdr_serialize_string>
 8012e98:	6863      	ldr	r3, [r4, #4]
 8012e9a:	2b06      	cmp	r3, #6
 8012e9c:	d926      	bls.n	8012eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012e9e:	b390      	cbz	r0, 8012f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ea0:	6a21      	ldr	r1, [r4, #32]
 8012ea2:	4630      	mov	r0, r6
 8012ea4:	f004 fe86 	bl	8017bb4 <ucdr_serialize_string>
 8012ea8:	6863      	ldr	r3, [r4, #4]
 8012eaa:	2b07      	cmp	r3, #7
 8012eac:	d91e      	bls.n	8012eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012eae:	b350      	cbz	r0, 8012f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012eb0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012eb2:	4630      	mov	r0, r6
 8012eb4:	f004 fe7e 	bl	8017bb4 <ucdr_serialize_string>
 8012eb8:	6863      	ldr	r3, [r4, #4]
 8012eba:	2b08      	cmp	r3, #8
 8012ebc:	d916      	bls.n	8012eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012ebe:	b310      	cbz	r0, 8012f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ec0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012ec2:	4630      	mov	r0, r6
 8012ec4:	f004 fe76 	bl	8017bb4 <ucdr_serialize_string>
 8012ec8:	6863      	ldr	r3, [r4, #4]
 8012eca:	2b09      	cmp	r3, #9
 8012ecc:	d90e      	bls.n	8012eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012ece:	b1d0      	cbz	r0, 8012f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ed0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012ed4:	2709      	movs	r7, #9
 8012ed6:	e000      	b.n	8012eda <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012ed8:	b1a8      	cbz	r0, 8012f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012eda:	f858 1b04 	ldr.w	r1, [r8], #4
 8012ede:	4630      	mov	r0, r6
 8012ee0:	f004 fe68 	bl	8017bb4 <ucdr_serialize_string>
 8012ee4:	6862      	ldr	r2, [r4, #4]
 8012ee6:	3701      	adds	r7, #1
 8012ee8:	4297      	cmp	r7, r2
 8012eea:	d3f5      	bcc.n	8012ed8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012eec:	4005      	ands	r5, r0
 8012eee:	b2ed      	uxtb	r5, r5
 8012ef0:	e78a      	b.n	8012e08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012ef2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012ef4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012ef8:	4630      	mov	r0, r6
 8012efa:	f7fd f861 	bl	800ffc0 <ucdr_serialize_sequence_uint8_t>
 8012efe:	4005      	ands	r5, r0
 8012f00:	4628      	mov	r0, r5
 8012f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f06:	2500      	movs	r5, #0
 8012f08:	e77e      	b.n	8012e08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012f0a:	4028      	ands	r0, r5
 8012f0c:	b2c5      	uxtb	r5, r0
 8012f0e:	e77b      	b.n	8012e08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012f10 <uxr_serialize_OBJK_Publisher_Binary>:
 8012f10:	b570      	push	{r4, r5, r6, lr}
 8012f12:	460d      	mov	r5, r1
 8012f14:	7809      	ldrb	r1, [r1, #0]
 8012f16:	4606      	mov	r6, r0
 8012f18:	f7f7 ffde 	bl	800aed8 <ucdr_serialize_bool>
 8012f1c:	782b      	ldrb	r3, [r5, #0]
 8012f1e:	4604      	mov	r4, r0
 8012f20:	b94b      	cbnz	r3, 8012f36 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012f22:	7a29      	ldrb	r1, [r5, #8]
 8012f24:	4630      	mov	r0, r6
 8012f26:	f7f7 ffd7 	bl	800aed8 <ucdr_serialize_bool>
 8012f2a:	7a2b      	ldrb	r3, [r5, #8]
 8012f2c:	4004      	ands	r4, r0
 8012f2e:	b2e4      	uxtb	r4, r4
 8012f30:	b943      	cbnz	r3, 8012f44 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012f32:	4620      	mov	r0, r4
 8012f34:	bd70      	pop	{r4, r5, r6, pc}
 8012f36:	6869      	ldr	r1, [r5, #4]
 8012f38:	4630      	mov	r0, r6
 8012f3a:	f004 fe3b 	bl	8017bb4 <ucdr_serialize_string>
 8012f3e:	4004      	ands	r4, r0
 8012f40:	b2e4      	uxtb	r4, r4
 8012f42:	e7ee      	b.n	8012f22 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012f44:	f105 010c 	add.w	r1, r5, #12
 8012f48:	4630      	mov	r0, r6
 8012f4a:	f7ff ff53 	bl	8012df4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012f4e:	4004      	ands	r4, r0
 8012f50:	4620      	mov	r0, r4
 8012f52:	bd70      	pop	{r4, r5, r6, pc}

08012f54 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012f54:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012f58:	4688      	mov	r8, r1
 8012f5a:	8809      	ldrh	r1, [r1, #0]
 8012f5c:	4681      	mov	r9, r0
 8012f5e:	f7f8 f815 	bl	800af8c <ucdr_serialize_uint16_t>
 8012f62:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012f66:	4606      	mov	r6, r0
 8012f68:	4648      	mov	r0, r9
 8012f6a:	f7f7 ffb5 	bl	800aed8 <ucdr_serialize_bool>
 8012f6e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012f72:	4006      	ands	r6, r0
 8012f74:	b2f5      	uxtb	r5, r6
 8012f76:	b9eb      	cbnz	r3, 8012fb4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012f78:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012f7c:	4648      	mov	r0, r9
 8012f7e:	f7f7 ffab 	bl	800aed8 <ucdr_serialize_bool>
 8012f82:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012f86:	4005      	ands	r5, r0
 8012f88:	bb7b      	cbnz	r3, 8012fea <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012f8a:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012f8e:	4648      	mov	r0, r9
 8012f90:	f7f7 ffa2 	bl	800aed8 <ucdr_serialize_bool>
 8012f94:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012f98:	4005      	ands	r5, r0
 8012f9a:	b9f3      	cbnz	r3, 8012fda <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012f9c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012fa0:	4648      	mov	r0, r9
 8012fa2:	f7f7 ff99 	bl	800aed8 <ucdr_serialize_bool>
 8012fa6:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012faa:	4005      	ands	r5, r0
 8012fac:	b94b      	cbnz	r3, 8012fc2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012fae:	4628      	mov	r0, r5
 8012fb0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012fb4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012fb8:	4648      	mov	r0, r9
 8012fba:	f7f7 ffe7 	bl	800af8c <ucdr_serialize_uint16_t>
 8012fbe:	4005      	ands	r5, r0
 8012fc0:	e7da      	b.n	8012f78 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012fc2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012fc6:	f108 011c 	add.w	r1, r8, #28
 8012fca:	4648      	mov	r0, r9
 8012fcc:	f7fc fff8 	bl	800ffc0 <ucdr_serialize_sequence_uint8_t>
 8012fd0:	4028      	ands	r0, r5
 8012fd2:	b2c5      	uxtb	r5, r0
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012fda:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012fde:	4648      	mov	r0, r9
 8012fe0:	f7f8 f9be 	bl	800b360 <ucdr_serialize_uint32_t>
 8012fe4:	4028      	ands	r0, r5
 8012fe6:	b2c5      	uxtb	r5, r0
 8012fe8:	e7d8      	b.n	8012f9c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012fea:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012fee:	4648      	mov	r0, r9
 8012ff0:	f7f8 f9b6 	bl	800b360 <ucdr_serialize_uint32_t>
 8012ff4:	4028      	ands	r0, r5
 8012ff6:	b2c5      	uxtb	r5, r0
 8012ff8:	e7c7      	b.n	8012f8a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012ffa:	bf00      	nop

08012ffc <uxr_serialize_OBJK_DataWriter_Binary>:
 8012ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ffe:	2202      	movs	r2, #2
 8013000:	460d      	mov	r5, r1
 8013002:	4606      	mov	r6, r0
 8013004:	f7fc fe3e 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 8013008:	78a9      	ldrb	r1, [r5, #2]
 801300a:	4604      	mov	r4, r0
 801300c:	4630      	mov	r0, r6
 801300e:	f7f7 ff63 	bl	800aed8 <ucdr_serialize_bool>
 8013012:	78ab      	ldrb	r3, [r5, #2]
 8013014:	4004      	ands	r4, r0
 8013016:	b2e4      	uxtb	r4, r4
 8013018:	b90b      	cbnz	r3, 801301e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801301a:	4620      	mov	r0, r4
 801301c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801301e:	f105 0108 	add.w	r1, r5, #8
 8013022:	4630      	mov	r0, r6
 8013024:	f7ff ff96 	bl	8012f54 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013028:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801302c:	4607      	mov	r7, r0
 801302e:	4630      	mov	r0, r6
 8013030:	f7f7 ff52 	bl	800aed8 <ucdr_serialize_bool>
 8013034:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013038:	4038      	ands	r0, r7
 801303a:	b2c7      	uxtb	r7, r0
 801303c:	b913      	cbnz	r3, 8013044 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801303e:	403c      	ands	r4, r7
 8013040:	4620      	mov	r0, r4
 8013042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013044:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8013048:	4630      	mov	r0, r6
 801304a:	f7f8 fbdf 	bl	800b80c <ucdr_serialize_uint64_t>
 801304e:	4007      	ands	r7, r0
 8013050:	e7f5      	b.n	801303e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8013052:	bf00      	nop

08013054 <uxr_serialize_OBJK_Replier_Binary>:
 8013054:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8013058:	460f      	mov	r7, r1
 801305a:	6809      	ldr	r1, [r1, #0]
 801305c:	4680      	mov	r8, r0
 801305e:	f004 fda9 	bl	8017bb4 <ucdr_serialize_string>
 8013062:	6879      	ldr	r1, [r7, #4]
 8013064:	4605      	mov	r5, r0
 8013066:	4640      	mov	r0, r8
 8013068:	f004 fda4 	bl	8017bb4 <ucdr_serialize_string>
 801306c:	68b9      	ldr	r1, [r7, #8]
 801306e:	4005      	ands	r5, r0
 8013070:	4640      	mov	r0, r8
 8013072:	f004 fd9f 	bl	8017bb4 <ucdr_serialize_string>
 8013076:	b2ec      	uxtb	r4, r5
 8013078:	4004      	ands	r4, r0
 801307a:	7b39      	ldrb	r1, [r7, #12]
 801307c:	4640      	mov	r0, r8
 801307e:	f7f7 ff2b 	bl	800aed8 <ucdr_serialize_bool>
 8013082:	7b3b      	ldrb	r3, [r7, #12]
 8013084:	4004      	ands	r4, r0
 8013086:	b94b      	cbnz	r3, 801309c <uxr_serialize_OBJK_Replier_Binary+0x48>
 8013088:	7d39      	ldrb	r1, [r7, #20]
 801308a:	4640      	mov	r0, r8
 801308c:	f7f7 ff24 	bl	800aed8 <ucdr_serialize_bool>
 8013090:	7d3b      	ldrb	r3, [r7, #20]
 8013092:	4004      	ands	r4, r0
 8013094:	b943      	cbnz	r3, 80130a8 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8013096:	4620      	mov	r0, r4
 8013098:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801309c:	6939      	ldr	r1, [r7, #16]
 801309e:	4640      	mov	r0, r8
 80130a0:	f004 fd88 	bl	8017bb4 <ucdr_serialize_string>
 80130a4:	4004      	ands	r4, r0
 80130a6:	e7ef      	b.n	8013088 <uxr_serialize_OBJK_Replier_Binary+0x34>
 80130a8:	69b9      	ldr	r1, [r7, #24]
 80130aa:	4640      	mov	r0, r8
 80130ac:	f004 fd82 	bl	8017bb4 <ucdr_serialize_string>
 80130b0:	4004      	ands	r4, r0
 80130b2:	b2e4      	uxtb	r4, r4
 80130b4:	4620      	mov	r0, r4
 80130b6:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 80130ba:	bf00      	nop

080130bc <uxr_deserialize_ObjectVariant>:
 80130bc:	b570      	push	{r4, r5, r6, lr}
 80130be:	4605      	mov	r5, r0
 80130c0:	460e      	mov	r6, r1
 80130c2:	f7f7 ff4d 	bl	800af60 <ucdr_deserialize_uint8_t>
 80130c6:	b168      	cbz	r0, 80130e4 <uxr_deserialize_ObjectVariant+0x28>
 80130c8:	7833      	ldrb	r3, [r6, #0]
 80130ca:	3b01      	subs	r3, #1
 80130cc:	4604      	mov	r4, r0
 80130ce:	2b0d      	cmp	r3, #13
 80130d0:	d809      	bhi.n	80130e6 <uxr_deserialize_ObjectVariant+0x2a>
 80130d2:	e8df f003 	tbb	[pc, r3]
 80130d6:	0a41      	.short	0x0a41
 80130d8:	0a0a2323 	.word	0x0a0a2323
 80130dc:	10080a0a 	.word	0x10080a0a
 80130e0:	565c1010 	.word	0x565c1010
 80130e4:	2400      	movs	r4, #0
 80130e6:	4620      	mov	r0, r4
 80130e8:	bd70      	pop	{r4, r5, r6, pc}
 80130ea:	1d31      	adds	r1, r6, #4
 80130ec:	4628      	mov	r0, r5
 80130ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130f2:	f7ff be0d 	b.w	8012d10 <uxr_deserialize_DATAWRITER_Representation>
 80130f6:	1d31      	adds	r1, r6, #4
 80130f8:	4628      	mov	r0, r5
 80130fa:	f7f7 ff31 	bl	800af60 <ucdr_deserialize_uint8_t>
 80130fe:	2800      	cmp	r0, #0
 8013100:	d0f0      	beq.n	80130e4 <uxr_deserialize_ObjectVariant+0x28>
 8013102:	7933      	ldrb	r3, [r6, #4]
 8013104:	2b01      	cmp	r3, #1
 8013106:	d001      	beq.n	801310c <uxr_deserialize_ObjectVariant+0x50>
 8013108:	2b02      	cmp	r3, #2
 801310a:	d1ec      	bne.n	80130e6 <uxr_deserialize_ObjectVariant+0x2a>
 801310c:	68b1      	ldr	r1, [r6, #8]
 801310e:	4628      	mov	r0, r5
 8013110:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013118:	f004 bd5c 	b.w	8017bd4 <ucdr_deserialize_string>
 801311c:	1d31      	adds	r1, r6, #4
 801311e:	4628      	mov	r0, r5
 8013120:	f7f7 ff1e 	bl	800af60 <ucdr_deserialize_uint8_t>
 8013124:	4604      	mov	r4, r0
 8013126:	b170      	cbz	r0, 8013146 <uxr_deserialize_ObjectVariant+0x8a>
 8013128:	7933      	ldrb	r3, [r6, #4]
 801312a:	2b02      	cmp	r3, #2
 801312c:	d04c      	beq.n	80131c8 <uxr_deserialize_ObjectVariant+0x10c>
 801312e:	2b03      	cmp	r3, #3
 8013130:	d109      	bne.n	8013146 <uxr_deserialize_ObjectVariant+0x8a>
 8013132:	f106 0308 	add.w	r3, r6, #8
 8013136:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801313a:	f106 010c 	add.w	r1, r6, #12
 801313e:	4628      	mov	r0, r5
 8013140:	f7fc ff50 	bl	800ffe4 <ucdr_deserialize_sequence_uint8_t>
 8013144:	4604      	mov	r4, r0
 8013146:	2202      	movs	r2, #2
 8013148:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801314c:	4628      	mov	r0, r5
 801314e:	f7fc fdfd 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 8013152:	4020      	ands	r0, r4
 8013154:	b2c4      	uxtb	r4, r0
 8013156:	e7c6      	b.n	80130e6 <uxr_deserialize_ObjectVariant+0x2a>
 8013158:	1d31      	adds	r1, r6, #4
 801315a:	4628      	mov	r0, r5
 801315c:	f7f7 ff00 	bl	800af60 <ucdr_deserialize_uint8_t>
 8013160:	4604      	mov	r4, r0
 8013162:	b130      	cbz	r0, 8013172 <uxr_deserialize_ObjectVariant+0xb6>
 8013164:	7933      	ldrb	r3, [r6, #4]
 8013166:	2b02      	cmp	r3, #2
 8013168:	d036      	beq.n	80131d8 <uxr_deserialize_ObjectVariant+0x11c>
 801316a:	2b03      	cmp	r3, #3
 801316c:	d03c      	beq.n	80131e8 <uxr_deserialize_ObjectVariant+0x12c>
 801316e:	2b01      	cmp	r3, #1
 8013170:	d032      	beq.n	80131d8 <uxr_deserialize_ObjectVariant+0x11c>
 8013172:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013176:	4628      	mov	r0, r5
 8013178:	f7f8 fc98 	bl	800baac <ucdr_deserialize_int16_t>
 801317c:	4020      	ands	r0, r4
 801317e:	b2c4      	uxtb	r4, r0
 8013180:	e7b1      	b.n	80130e6 <uxr_deserialize_ObjectVariant+0x2a>
 8013182:	1d31      	adds	r1, r6, #4
 8013184:	4628      	mov	r0, r5
 8013186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801318a:	f7ff bc77 	b.w	8012a7c <uxr_deserialize_CLIENT_Representation>
 801318e:	2204      	movs	r2, #4
 8013190:	18b1      	adds	r1, r6, r2
 8013192:	4628      	mov	r0, r5
 8013194:	f7fc fdda 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 8013198:	2202      	movs	r2, #2
 801319a:	f106 0108 	add.w	r1, r6, #8
 801319e:	4604      	mov	r4, r0
 80131a0:	4628      	mov	r0, r5
 80131a2:	f7fc fdd3 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 80131a6:	2202      	movs	r2, #2
 80131a8:	4004      	ands	r4, r0
 80131aa:	f106 010a 	add.w	r1, r6, #10
 80131ae:	4628      	mov	r0, r5
 80131b0:	f7fc fdcc 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 80131b4:	b2e4      	uxtb	r4, r4
 80131b6:	4603      	mov	r3, r0
 80131b8:	f106 010c 	add.w	r1, r6, #12
 80131bc:	4628      	mov	r0, r5
 80131be:	401c      	ands	r4, r3
 80131c0:	f7f7 fea0 	bl	800af04 <ucdr_deserialize_bool>
 80131c4:	4004      	ands	r4, r0
 80131c6:	e78e      	b.n	80130e6 <uxr_deserialize_ObjectVariant+0x2a>
 80131c8:	68b1      	ldr	r1, [r6, #8]
 80131ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80131ce:	4628      	mov	r0, r5
 80131d0:	f004 fd00 	bl	8017bd4 <ucdr_deserialize_string>
 80131d4:	4604      	mov	r4, r0
 80131d6:	e7b6      	b.n	8013146 <uxr_deserialize_ObjectVariant+0x8a>
 80131d8:	68b1      	ldr	r1, [r6, #8]
 80131da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80131de:	4628      	mov	r0, r5
 80131e0:	f004 fcf8 	bl	8017bd4 <ucdr_deserialize_string>
 80131e4:	4604      	mov	r4, r0
 80131e6:	e7c4      	b.n	8013172 <uxr_deserialize_ObjectVariant+0xb6>
 80131e8:	f106 0308 	add.w	r3, r6, #8
 80131ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80131f0:	f106 010c 	add.w	r1, r6, #12
 80131f4:	4628      	mov	r0, r5
 80131f6:	f7fc fef5 	bl	800ffe4 <ucdr_deserialize_sequence_uint8_t>
 80131fa:	4604      	mov	r4, r0
 80131fc:	e7b9      	b.n	8013172 <uxr_deserialize_ObjectVariant+0xb6>
 80131fe:	bf00      	nop

08013200 <uxr_deserialize_BaseObjectRequest>:
 8013200:	b570      	push	{r4, r5, r6, lr}
 8013202:	2202      	movs	r2, #2
 8013204:	4605      	mov	r5, r0
 8013206:	460e      	mov	r6, r1
 8013208:	f7fc fda0 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 801320c:	2202      	movs	r2, #2
 801320e:	4604      	mov	r4, r0
 8013210:	18b1      	adds	r1, r6, r2
 8013212:	4628      	mov	r0, r5
 8013214:	f7fc fd9a 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 8013218:	4020      	ands	r0, r4
 801321a:	b2c0      	uxtb	r0, r0
 801321c:	bd70      	pop	{r4, r5, r6, pc}
 801321e:	bf00      	nop

08013220 <uxr_serialize_ActivityInfoVariant>:
 8013220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013224:	460d      	mov	r5, r1
 8013226:	7809      	ldrb	r1, [r1, #0]
 8013228:	4607      	mov	r7, r0
 801322a:	f7f7 fe83 	bl	800af34 <ucdr_serialize_uint8_t>
 801322e:	4681      	mov	r9, r0
 8013230:	b138      	cbz	r0, 8013242 <uxr_serialize_ActivityInfoVariant+0x22>
 8013232:	782b      	ldrb	r3, [r5, #0]
 8013234:	2b06      	cmp	r3, #6
 8013236:	f000 8082 	beq.w	801333e <uxr_serialize_ActivityInfoVariant+0x11e>
 801323a:	2b0d      	cmp	r3, #13
 801323c:	d016      	beq.n	801326c <uxr_serialize_ActivityInfoVariant+0x4c>
 801323e:	2b05      	cmp	r3, #5
 8013240:	d002      	beq.n	8013248 <uxr_serialize_ActivityInfoVariant+0x28>
 8013242:	4648      	mov	r0, r9
 8013244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013248:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801324c:	4638      	mov	r0, r7
 801324e:	f7f8 fbad 	bl	800b9ac <ucdr_serialize_int16_t>
 8013252:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013256:	4681      	mov	r9, r0
 8013258:	4638      	mov	r0, r7
 801325a:	f7f8 fad7 	bl	800b80c <ucdr_serialize_uint64_t>
 801325e:	ea09 0000 	and.w	r0, r9, r0
 8013262:	fa5f f980 	uxtb.w	r9, r0
 8013266:	4648      	mov	r0, r9
 8013268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801326c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013270:	4638      	mov	r0, r7
 8013272:	f7f8 fb9b 	bl	800b9ac <ucdr_serialize_int16_t>
 8013276:	68e9      	ldr	r1, [r5, #12]
 8013278:	4681      	mov	r9, r0
 801327a:	4638      	mov	r0, r7
 801327c:	f7f8 f870 	bl	800b360 <ucdr_serialize_uint32_t>
 8013280:	68eb      	ldr	r3, [r5, #12]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d0eb      	beq.n	801325e <uxr_serialize_ActivityInfoVariant+0x3e>
 8013286:	b320      	cbz	r0, 80132d2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8013288:	f105 080c 	add.w	r8, r5, #12
 801328c:	2600      	movs	r6, #0
 801328e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8013292:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8013296:	f89a 1010 	ldrb.w	r1, [sl, #16]
 801329a:	4638      	mov	r0, r7
 801329c:	f7f7 fe4a 	bl	800af34 <ucdr_serialize_uint8_t>
 80132a0:	2800      	cmp	r0, #0
 80132a2:	d053      	beq.n	801334c <uxr_serialize_ActivityInfoVariant+0x12c>
 80132a4:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80132a8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80132ac:	0074      	lsls	r4, r6, #1
 80132ae:	00c9      	lsls	r1, r1, #3
 80132b0:	2b03      	cmp	r3, #3
 80132b2:	d854      	bhi.n	801335e <uxr_serialize_ActivityInfoVariant+0x13e>
 80132b4:	e8df f003 	tbb	[pc, r3]
 80132b8:	02102132 	.word	0x02102132
 80132bc:	4441      	add	r1, r8
 80132be:	4638      	mov	r0, r7
 80132c0:	6889      	ldr	r1, [r1, #8]
 80132c2:	f004 fc77 	bl	8017bb4 <ucdr_serialize_string>
 80132c6:	68ea      	ldr	r2, [r5, #12]
 80132c8:	3601      	adds	r6, #1
 80132ca:	4296      	cmp	r6, r2
 80132cc:	d242      	bcs.n	8013354 <uxr_serialize_ActivityInfoVariant+0x134>
 80132ce:	2800      	cmp	r0, #0
 80132d0:	d1dd      	bne.n	801328e <uxr_serialize_ActivityInfoVariant+0x6e>
 80132d2:	f04f 0900 	mov.w	r9, #0
 80132d6:	e7b4      	b.n	8013242 <uxr_serialize_ActivityInfoVariant+0x22>
 80132d8:	3108      	adds	r1, #8
 80132da:	4441      	add	r1, r8
 80132dc:	2210      	movs	r2, #16
 80132de:	4638      	mov	r0, r7
 80132e0:	f7fc fcd0 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 80132e4:	4434      	add	r4, r6
 80132e6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80132ea:	4604      	mov	r4, r0
 80132ec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80132ee:	4638      	mov	r0, r7
 80132f0:	f7f8 f836 	bl	800b360 <ucdr_serialize_uint32_t>
 80132f4:	4020      	ands	r0, r4
 80132f6:	b2c0      	uxtb	r0, r0
 80132f8:	e7e5      	b.n	80132c6 <uxr_serialize_ActivityInfoVariant+0xa6>
 80132fa:	3108      	adds	r1, #8
 80132fc:	4441      	add	r1, r8
 80132fe:	2204      	movs	r2, #4
 8013300:	4638      	mov	r0, r7
 8013302:	f7fc fcbf 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 8013306:	4434      	add	r4, r6
 8013308:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801330c:	4604      	mov	r4, r0
 801330e:	8b19      	ldrh	r1, [r3, #24]
 8013310:	4638      	mov	r0, r7
 8013312:	f7f7 fe3b 	bl	800af8c <ucdr_serialize_uint16_t>
 8013316:	4020      	ands	r0, r4
 8013318:	b2c0      	uxtb	r0, r0
 801331a:	e7d4      	b.n	80132c6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801331c:	3108      	adds	r1, #8
 801331e:	4441      	add	r1, r8
 8013320:	2202      	movs	r2, #2
 8013322:	4638      	mov	r0, r7
 8013324:	f7fc fcae 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 8013328:	4434      	add	r4, r6
 801332a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801332e:	4604      	mov	r4, r0
 8013330:	7d99      	ldrb	r1, [r3, #22]
 8013332:	4638      	mov	r0, r7
 8013334:	f7f7 fdfe 	bl	800af34 <ucdr_serialize_uint8_t>
 8013338:	4020      	ands	r0, r4
 801333a:	b2c0      	uxtb	r0, r0
 801333c:	e7c3      	b.n	80132c6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801333e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013342:	4638      	mov	r0, r7
 8013344:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013348:	f7f8 bb30 	b.w	800b9ac <ucdr_serialize_int16_t>
 801334c:	68ea      	ldr	r2, [r5, #12]
 801334e:	3601      	adds	r6, #1
 8013350:	42b2      	cmp	r2, r6
 8013352:	d8be      	bhi.n	80132d2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8013354:	ea09 0900 	and.w	r9, r9, r0
 8013358:	fa5f f989 	uxtb.w	r9, r9
 801335c:	e771      	b.n	8013242 <uxr_serialize_ActivityInfoVariant+0x22>
 801335e:	68eb      	ldr	r3, [r5, #12]
 8013360:	3601      	adds	r6, #1
 8013362:	429e      	cmp	r6, r3
 8013364:	f10a 0a18 	add.w	sl, sl, #24
 8013368:	d395      	bcc.n	8013296 <uxr_serialize_ActivityInfoVariant+0x76>
 801336a:	e76a      	b.n	8013242 <uxr_serialize_ActivityInfoVariant+0x22>

0801336c <uxr_deserialize_BaseObjectReply>:
 801336c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013370:	2202      	movs	r2, #2
 8013372:	4606      	mov	r6, r0
 8013374:	460f      	mov	r7, r1
 8013376:	f7fc fce9 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 801337a:	2202      	movs	r2, #2
 801337c:	18b9      	adds	r1, r7, r2
 801337e:	4605      	mov	r5, r0
 8013380:	4630      	mov	r0, r6
 8013382:	f7fc fce3 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 8013386:	1d39      	adds	r1, r7, #4
 8013388:	4680      	mov	r8, r0
 801338a:	4630      	mov	r0, r6
 801338c:	f7f7 fde8 	bl	800af60 <ucdr_deserialize_uint8_t>
 8013390:	1d79      	adds	r1, r7, #5
 8013392:	4604      	mov	r4, r0
 8013394:	4630      	mov	r0, r6
 8013396:	f7f7 fde3 	bl	800af60 <ucdr_deserialize_uint8_t>
 801339a:	ea05 0508 	and.w	r5, r5, r8
 801339e:	402c      	ands	r4, r5
 80133a0:	4020      	ands	r0, r4
 80133a2:	b2c0      	uxtb	r0, r0
 80133a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080133a8 <uxr_serialize_ReadSpecification>:
 80133a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133ac:	460e      	mov	r6, r1
 80133ae:	7809      	ldrb	r1, [r1, #0]
 80133b0:	4607      	mov	r7, r0
 80133b2:	f7f7 fdbf 	bl	800af34 <ucdr_serialize_uint8_t>
 80133b6:	7871      	ldrb	r1, [r6, #1]
 80133b8:	4604      	mov	r4, r0
 80133ba:	4638      	mov	r0, r7
 80133bc:	f7f7 fdba 	bl	800af34 <ucdr_serialize_uint8_t>
 80133c0:	78b1      	ldrb	r1, [r6, #2]
 80133c2:	4004      	ands	r4, r0
 80133c4:	4638      	mov	r0, r7
 80133c6:	f7f7 fd87 	bl	800aed8 <ucdr_serialize_bool>
 80133ca:	78b3      	ldrb	r3, [r6, #2]
 80133cc:	b2e4      	uxtb	r4, r4
 80133ce:	4004      	ands	r4, r0
 80133d0:	b94b      	cbnz	r3, 80133e6 <uxr_serialize_ReadSpecification+0x3e>
 80133d2:	7a31      	ldrb	r1, [r6, #8]
 80133d4:	4638      	mov	r0, r7
 80133d6:	f7f7 fd7f 	bl	800aed8 <ucdr_serialize_bool>
 80133da:	7a33      	ldrb	r3, [r6, #8]
 80133dc:	4004      	ands	r4, r0
 80133de:	b943      	cbnz	r3, 80133f2 <uxr_serialize_ReadSpecification+0x4a>
 80133e0:	4620      	mov	r0, r4
 80133e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133e6:	6871      	ldr	r1, [r6, #4]
 80133e8:	4638      	mov	r0, r7
 80133ea:	f004 fbe3 	bl	8017bb4 <ucdr_serialize_string>
 80133ee:	4004      	ands	r4, r0
 80133f0:	e7ef      	b.n	80133d2 <uxr_serialize_ReadSpecification+0x2a>
 80133f2:	8971      	ldrh	r1, [r6, #10]
 80133f4:	4638      	mov	r0, r7
 80133f6:	f7f7 fdc9 	bl	800af8c <ucdr_serialize_uint16_t>
 80133fa:	89b1      	ldrh	r1, [r6, #12]
 80133fc:	4605      	mov	r5, r0
 80133fe:	4638      	mov	r0, r7
 8013400:	f7f7 fdc4 	bl	800af8c <ucdr_serialize_uint16_t>
 8013404:	89f1      	ldrh	r1, [r6, #14]
 8013406:	4005      	ands	r5, r0
 8013408:	4638      	mov	r0, r7
 801340a:	f7f7 fdbf 	bl	800af8c <ucdr_serialize_uint16_t>
 801340e:	8a31      	ldrh	r1, [r6, #16]
 8013410:	4680      	mov	r8, r0
 8013412:	4638      	mov	r0, r7
 8013414:	f7f7 fdba 	bl	800af8c <ucdr_serialize_uint16_t>
 8013418:	b2ed      	uxtb	r5, r5
 801341a:	4025      	ands	r5, r4
 801341c:	ea08 0505 	and.w	r5, r8, r5
 8013420:	ea00 0405 	and.w	r4, r0, r5
 8013424:	4620      	mov	r0, r4
 8013426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801342a:	bf00      	nop

0801342c <uxr_serialize_CREATE_CLIENT_Payload>:
 801342c:	f7ff bace 	b.w	80129cc <uxr_serialize_CLIENT_Representation>

08013430 <uxr_serialize_CREATE_Payload>:
 8013430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013432:	2202      	movs	r2, #2
 8013434:	4607      	mov	r7, r0
 8013436:	460e      	mov	r6, r1
 8013438:	f7fc fc24 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 801343c:	2202      	movs	r2, #2
 801343e:	18b1      	adds	r1, r6, r2
 8013440:	4605      	mov	r5, r0
 8013442:	4638      	mov	r0, r7
 8013444:	f7fc fc1e 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 8013448:	7931      	ldrb	r1, [r6, #4]
 801344a:	4604      	mov	r4, r0
 801344c:	4638      	mov	r0, r7
 801344e:	f7f7 fd71 	bl	800af34 <ucdr_serialize_uint8_t>
 8013452:	b170      	cbz	r0, 8013472 <uxr_serialize_CREATE_Payload+0x42>
 8013454:	7933      	ldrb	r3, [r6, #4]
 8013456:	402c      	ands	r4, r5
 8013458:	3b01      	subs	r3, #1
 801345a:	b2e4      	uxtb	r4, r4
 801345c:	2b0d      	cmp	r3, #13
 801345e:	d809      	bhi.n	8013474 <uxr_serialize_CREATE_Payload+0x44>
 8013460:	e8df f003 	tbb	[pc, r3]
 8013464:	23230a4c 	.word	0x23230a4c
 8013468:	0a0a0a0a 	.word	0x0a0a0a0a
 801346c:	12121208 	.word	0x12121208
 8013470:	3e45      	.short	0x3e45
 8013472:	2400      	movs	r4, #0
 8013474:	4620      	mov	r0, r4
 8013476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013478:	f106 0108 	add.w	r1, r6, #8
 801347c:	4638      	mov	r0, r7
 801347e:	f7ff fbab 	bl	8012bd8 <uxr_serialize_DATAWRITER_Representation>
 8013482:	4004      	ands	r4, r0
 8013484:	4620      	mov	r0, r4
 8013486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013488:	7a31      	ldrb	r1, [r6, #8]
 801348a:	4638      	mov	r0, r7
 801348c:	f7f7 fd52 	bl	800af34 <ucdr_serialize_uint8_t>
 8013490:	2800      	cmp	r0, #0
 8013492:	d0ee      	beq.n	8013472 <uxr_serialize_CREATE_Payload+0x42>
 8013494:	7a33      	ldrb	r3, [r6, #8]
 8013496:	2b01      	cmp	r3, #1
 8013498:	d001      	beq.n	801349e <uxr_serialize_CREATE_Payload+0x6e>
 801349a:	2b02      	cmp	r3, #2
 801349c:	d1ea      	bne.n	8013474 <uxr_serialize_CREATE_Payload+0x44>
 801349e:	68f1      	ldr	r1, [r6, #12]
 80134a0:	4638      	mov	r0, r7
 80134a2:	f004 fb87 	bl	8017bb4 <ucdr_serialize_string>
 80134a6:	4004      	ands	r4, r0
 80134a8:	e7e4      	b.n	8013474 <uxr_serialize_CREATE_Payload+0x44>
 80134aa:	7a31      	ldrb	r1, [r6, #8]
 80134ac:	4638      	mov	r0, r7
 80134ae:	f7f7 fd41 	bl	800af34 <ucdr_serialize_uint8_t>
 80134b2:	4605      	mov	r5, r0
 80134b4:	b158      	cbz	r0, 80134ce <uxr_serialize_CREATE_Payload+0x9e>
 80134b6:	7a33      	ldrb	r3, [r6, #8]
 80134b8:	2b02      	cmp	r3, #2
 80134ba:	d034      	beq.n	8013526 <uxr_serialize_CREATE_Payload+0xf6>
 80134bc:	2b03      	cmp	r3, #3
 80134be:	d106      	bne.n	80134ce <uxr_serialize_CREATE_Payload+0x9e>
 80134c0:	68f2      	ldr	r2, [r6, #12]
 80134c2:	f106 0110 	add.w	r1, r6, #16
 80134c6:	4638      	mov	r0, r7
 80134c8:	f7fc fd7a 	bl	800ffc0 <ucdr_serialize_sequence_uint8_t>
 80134cc:	4605      	mov	r5, r0
 80134ce:	2202      	movs	r2, #2
 80134d0:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80134d4:	4638      	mov	r0, r7
 80134d6:	f7fc fbd5 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 80134da:	4028      	ands	r0, r5
 80134dc:	4004      	ands	r4, r0
 80134de:	e7c9      	b.n	8013474 <uxr_serialize_CREATE_Payload+0x44>
 80134e0:	f106 0108 	add.w	r1, r6, #8
 80134e4:	4638      	mov	r0, r7
 80134e6:	f7ff fa71 	bl	80129cc <uxr_serialize_CLIENT_Representation>
 80134ea:	4004      	ands	r4, r0
 80134ec:	e7c2      	b.n	8013474 <uxr_serialize_CREATE_Payload+0x44>
 80134ee:	f106 0108 	add.w	r1, r6, #8
 80134f2:	4638      	mov	r0, r7
 80134f4:	f7ff fb26 	bl	8012b44 <uxr_serialize_AGENT_Representation>
 80134f8:	4004      	ands	r4, r0
 80134fa:	e7bb      	b.n	8013474 <uxr_serialize_CREATE_Payload+0x44>
 80134fc:	7a31      	ldrb	r1, [r6, #8]
 80134fe:	4638      	mov	r0, r7
 8013500:	f7f7 fd18 	bl	800af34 <ucdr_serialize_uint8_t>
 8013504:	4605      	mov	r5, r0
 8013506:	b130      	cbz	r0, 8013516 <uxr_serialize_CREATE_Payload+0xe6>
 8013508:	7a33      	ldrb	r3, [r6, #8]
 801350a:	2b02      	cmp	r3, #2
 801350c:	d011      	beq.n	8013532 <uxr_serialize_CREATE_Payload+0x102>
 801350e:	2b03      	cmp	r3, #3
 8013510:	d015      	beq.n	801353e <uxr_serialize_CREATE_Payload+0x10e>
 8013512:	2b01      	cmp	r3, #1
 8013514:	d00d      	beq.n	8013532 <uxr_serialize_CREATE_Payload+0x102>
 8013516:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801351a:	4638      	mov	r0, r7
 801351c:	f7f8 fa46 	bl	800b9ac <ucdr_serialize_int16_t>
 8013520:	4028      	ands	r0, r5
 8013522:	4004      	ands	r4, r0
 8013524:	e7a6      	b.n	8013474 <uxr_serialize_CREATE_Payload+0x44>
 8013526:	68f1      	ldr	r1, [r6, #12]
 8013528:	4638      	mov	r0, r7
 801352a:	f004 fb43 	bl	8017bb4 <ucdr_serialize_string>
 801352e:	4605      	mov	r5, r0
 8013530:	e7cd      	b.n	80134ce <uxr_serialize_CREATE_Payload+0x9e>
 8013532:	68f1      	ldr	r1, [r6, #12]
 8013534:	4638      	mov	r0, r7
 8013536:	f004 fb3d 	bl	8017bb4 <ucdr_serialize_string>
 801353a:	4605      	mov	r5, r0
 801353c:	e7eb      	b.n	8013516 <uxr_serialize_CREATE_Payload+0xe6>
 801353e:	68f2      	ldr	r2, [r6, #12]
 8013540:	f106 0110 	add.w	r1, r6, #16
 8013544:	4638      	mov	r0, r7
 8013546:	f7fc fd3b 	bl	800ffc0 <ucdr_serialize_sequence_uint8_t>
 801354a:	4605      	mov	r5, r0
 801354c:	e7e3      	b.n	8013516 <uxr_serialize_CREATE_Payload+0xe6>
 801354e:	bf00      	nop

08013550 <uxr_deserialize_GET_INFO_Payload>:
 8013550:	b570      	push	{r4, r5, r6, lr}
 8013552:	2202      	movs	r2, #2
 8013554:	4605      	mov	r5, r0
 8013556:	460e      	mov	r6, r1
 8013558:	f7fc fbf8 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 801355c:	2202      	movs	r2, #2
 801355e:	18b1      	adds	r1, r6, r2
 8013560:	4604      	mov	r4, r0
 8013562:	4628      	mov	r0, r5
 8013564:	f7fc fbf2 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 8013568:	1d31      	adds	r1, r6, #4
 801356a:	4004      	ands	r4, r0
 801356c:	4628      	mov	r0, r5
 801356e:	f7f8 f827 	bl	800b5c0 <ucdr_deserialize_uint32_t>
 8013572:	b2e4      	uxtb	r4, r4
 8013574:	4020      	ands	r0, r4
 8013576:	bd70      	pop	{r4, r5, r6, pc}

08013578 <uxr_serialize_DELETE_Payload>:
 8013578:	b570      	push	{r4, r5, r6, lr}
 801357a:	2202      	movs	r2, #2
 801357c:	4605      	mov	r5, r0
 801357e:	460e      	mov	r6, r1
 8013580:	f7fc fb80 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 8013584:	2202      	movs	r2, #2
 8013586:	4604      	mov	r4, r0
 8013588:	18b1      	adds	r1, r6, r2
 801358a:	4628      	mov	r0, r5
 801358c:	f7fc fb7a 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 8013590:	4020      	ands	r0, r4
 8013592:	b2c0      	uxtb	r0, r0
 8013594:	bd70      	pop	{r4, r5, r6, pc}
 8013596:	bf00      	nop

08013598 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801359c:	4605      	mov	r5, r0
 801359e:	460e      	mov	r6, r1
 80135a0:	f7f7 fcde 	bl	800af60 <ucdr_deserialize_uint8_t>
 80135a4:	1c71      	adds	r1, r6, #1
 80135a6:	4604      	mov	r4, r0
 80135a8:	4628      	mov	r0, r5
 80135aa:	f7f7 fcd9 	bl	800af60 <ucdr_deserialize_uint8_t>
 80135ae:	2204      	movs	r2, #4
 80135b0:	18b1      	adds	r1, r6, r2
 80135b2:	4680      	mov	r8, r0
 80135b4:	4628      	mov	r0, r5
 80135b6:	f7fc fbc9 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 80135ba:	f106 0108 	add.w	r1, r6, #8
 80135be:	4607      	mov	r7, r0
 80135c0:	2202      	movs	r2, #2
 80135c2:	4628      	mov	r0, r5
 80135c4:	f7fc fbc2 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 80135c8:	ea04 0308 	and.w	r3, r4, r8
 80135cc:	b2db      	uxtb	r3, r3
 80135ce:	ea03 0407 	and.w	r4, r3, r7
 80135d2:	2202      	movs	r2, #2
 80135d4:	4607      	mov	r7, r0
 80135d6:	f106 010a 	add.w	r1, r6, #10
 80135da:	4628      	mov	r0, r5
 80135dc:	f7fc fbb6 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 80135e0:	f106 010c 	add.w	r1, r6, #12
 80135e4:	4603      	mov	r3, r0
 80135e6:	4628      	mov	r0, r5
 80135e8:	461d      	mov	r5, r3
 80135ea:	f7f7 fc8b 	bl	800af04 <ucdr_deserialize_bool>
 80135ee:	403c      	ands	r4, r7
 80135f0:	4025      	ands	r5, r4
 80135f2:	4028      	ands	r0, r5
 80135f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080135f8 <uxr_deserialize_STATUS_Payload>:
 80135f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135fc:	2202      	movs	r2, #2
 80135fe:	4606      	mov	r6, r0
 8013600:	460f      	mov	r7, r1
 8013602:	f7fc fba3 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 8013606:	2202      	movs	r2, #2
 8013608:	18b9      	adds	r1, r7, r2
 801360a:	4605      	mov	r5, r0
 801360c:	4630      	mov	r0, r6
 801360e:	f7fc fb9d 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 8013612:	1d39      	adds	r1, r7, #4
 8013614:	4680      	mov	r8, r0
 8013616:	4630      	mov	r0, r6
 8013618:	f7f7 fca2 	bl	800af60 <ucdr_deserialize_uint8_t>
 801361c:	1d79      	adds	r1, r7, #5
 801361e:	4604      	mov	r4, r0
 8013620:	4630      	mov	r0, r6
 8013622:	f7f7 fc9d 	bl	800af60 <ucdr_deserialize_uint8_t>
 8013626:	ea05 0508 	and.w	r5, r5, r8
 801362a:	402c      	ands	r4, r5
 801362c:	4020      	ands	r0, r4
 801362e:	b2c0      	uxtb	r0, r0
 8013630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013634 <uxr_serialize_INFO_Payload>:
 8013634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013638:	2202      	movs	r2, #2
 801363a:	460c      	mov	r4, r1
 801363c:	4605      	mov	r5, r0
 801363e:	f7fc fb21 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 8013642:	2202      	movs	r2, #2
 8013644:	18a1      	adds	r1, r4, r2
 8013646:	4680      	mov	r8, r0
 8013648:	4628      	mov	r0, r5
 801364a:	f7fc fb1b 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 801364e:	7921      	ldrb	r1, [r4, #4]
 8013650:	4607      	mov	r7, r0
 8013652:	4628      	mov	r0, r5
 8013654:	f7f7 fc6e 	bl	800af34 <ucdr_serialize_uint8_t>
 8013658:	7961      	ldrb	r1, [r4, #5]
 801365a:	4606      	mov	r6, r0
 801365c:	4628      	mov	r0, r5
 801365e:	f7f7 fc69 	bl	800af34 <ucdr_serialize_uint8_t>
 8013662:	ea08 0807 	and.w	r8, r8, r7
 8013666:	ea06 0608 	and.w	r6, r6, r8
 801366a:	4006      	ands	r6, r0
 801366c:	7a21      	ldrb	r1, [r4, #8]
 801366e:	4628      	mov	r0, r5
 8013670:	f7f7 fc32 	bl	800aed8 <ucdr_serialize_bool>
 8013674:	7a23      	ldrb	r3, [r4, #8]
 8013676:	b2f7      	uxtb	r7, r6
 8013678:	4606      	mov	r6, r0
 801367a:	b96b      	cbnz	r3, 8013698 <uxr_serialize_INFO_Payload+0x64>
 801367c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8013680:	4628      	mov	r0, r5
 8013682:	f7f7 fc29 	bl	800aed8 <ucdr_serialize_bool>
 8013686:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801368a:	4030      	ands	r0, r6
 801368c:	b2c6      	uxtb	r6, r0
 801368e:	b983      	cbnz	r3, 80136b2 <uxr_serialize_INFO_Payload+0x7e>
 8013690:	ea06 0007 	and.w	r0, r6, r7
 8013694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013698:	7b21      	ldrb	r1, [r4, #12]
 801369a:	4628      	mov	r0, r5
 801369c:	f7f7 fc4a 	bl	800af34 <ucdr_serialize_uint8_t>
 80136a0:	b188      	cbz	r0, 80136c6 <uxr_serialize_INFO_Payload+0x92>
 80136a2:	f104 010c 	add.w	r1, r4, #12
 80136a6:	4628      	mov	r0, r5
 80136a8:	f7ff fabe 	bl	8012c28 <uxr_serialize_ObjectVariant.part.0>
 80136ac:	4030      	ands	r0, r6
 80136ae:	b2c6      	uxtb	r6, r0
 80136b0:	e7e4      	b.n	801367c <uxr_serialize_INFO_Payload+0x48>
 80136b2:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80136b6:	4628      	mov	r0, r5
 80136b8:	f7ff fdb2 	bl	8013220 <uxr_serialize_ActivityInfoVariant>
 80136bc:	4006      	ands	r6, r0
 80136be:	ea06 0007 	and.w	r0, r6, r7
 80136c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136c6:	4606      	mov	r6, r0
 80136c8:	e7d8      	b.n	801367c <uxr_serialize_INFO_Payload+0x48>
 80136ca:	bf00      	nop

080136cc <uxr_serialize_READ_DATA_Payload>:
 80136cc:	b570      	push	{r4, r5, r6, lr}
 80136ce:	2202      	movs	r2, #2
 80136d0:	4605      	mov	r5, r0
 80136d2:	460e      	mov	r6, r1
 80136d4:	f7fc fad6 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 80136d8:	2202      	movs	r2, #2
 80136da:	18b1      	adds	r1, r6, r2
 80136dc:	4604      	mov	r4, r0
 80136de:	4628      	mov	r0, r5
 80136e0:	f7fc fad0 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 80136e4:	1d31      	adds	r1, r6, #4
 80136e6:	4004      	ands	r4, r0
 80136e8:	4628      	mov	r0, r5
 80136ea:	f7ff fe5d 	bl	80133a8 <uxr_serialize_ReadSpecification>
 80136ee:	b2e4      	uxtb	r4, r4
 80136f0:	4020      	ands	r0, r4
 80136f2:	bd70      	pop	{r4, r5, r6, pc}

080136f4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80136f4:	b570      	push	{r4, r5, r6, lr}
 80136f6:	2202      	movs	r2, #2
 80136f8:	4605      	mov	r5, r0
 80136fa:	460e      	mov	r6, r1
 80136fc:	f7fc fac2 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 8013700:	2202      	movs	r2, #2
 8013702:	4604      	mov	r4, r0
 8013704:	18b1      	adds	r1, r6, r2
 8013706:	4628      	mov	r0, r5
 8013708:	f7fc fabc 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 801370c:	4020      	ands	r0, r4
 801370e:	b2c0      	uxtb	r0, r0
 8013710:	bd70      	pop	{r4, r5, r6, pc}
 8013712:	bf00      	nop

08013714 <uxr_serialize_ACKNACK_Payload>:
 8013714:	b570      	push	{r4, r5, r6, lr}
 8013716:	460c      	mov	r4, r1
 8013718:	460e      	mov	r6, r1
 801371a:	f834 1b02 	ldrh.w	r1, [r4], #2
 801371e:	4605      	mov	r5, r0
 8013720:	f7f7 fc34 	bl	800af8c <ucdr_serialize_uint16_t>
 8013724:	2202      	movs	r2, #2
 8013726:	4621      	mov	r1, r4
 8013728:	4604      	mov	r4, r0
 801372a:	4628      	mov	r0, r5
 801372c:	f7fc faaa 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 8013730:	7931      	ldrb	r1, [r6, #4]
 8013732:	4004      	ands	r4, r0
 8013734:	4628      	mov	r0, r5
 8013736:	f7f7 fbfd 	bl	800af34 <ucdr_serialize_uint8_t>
 801373a:	b2e4      	uxtb	r4, r4
 801373c:	4020      	ands	r0, r4
 801373e:	bd70      	pop	{r4, r5, r6, pc}

08013740 <uxr_deserialize_ACKNACK_Payload>:
 8013740:	b570      	push	{r4, r5, r6, lr}
 8013742:	4605      	mov	r5, r0
 8013744:	460e      	mov	r6, r1
 8013746:	f7f7 fd21 	bl	800b18c <ucdr_deserialize_uint16_t>
 801374a:	2202      	movs	r2, #2
 801374c:	18b1      	adds	r1, r6, r2
 801374e:	4604      	mov	r4, r0
 8013750:	4628      	mov	r0, r5
 8013752:	f7fc fafb 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 8013756:	1d31      	adds	r1, r6, #4
 8013758:	4004      	ands	r4, r0
 801375a:	4628      	mov	r0, r5
 801375c:	f7f7 fc00 	bl	800af60 <ucdr_deserialize_uint8_t>
 8013760:	b2e4      	uxtb	r4, r4
 8013762:	4020      	ands	r0, r4
 8013764:	bd70      	pop	{r4, r5, r6, pc}
 8013766:	bf00      	nop

08013768 <uxr_serialize_HEARTBEAT_Payload>:
 8013768:	b570      	push	{r4, r5, r6, lr}
 801376a:	460d      	mov	r5, r1
 801376c:	8809      	ldrh	r1, [r1, #0]
 801376e:	4606      	mov	r6, r0
 8013770:	f7f7 fc0c 	bl	800af8c <ucdr_serialize_uint16_t>
 8013774:	8869      	ldrh	r1, [r5, #2]
 8013776:	4604      	mov	r4, r0
 8013778:	4630      	mov	r0, r6
 801377a:	f7f7 fc07 	bl	800af8c <ucdr_serialize_uint16_t>
 801377e:	7929      	ldrb	r1, [r5, #4]
 8013780:	4004      	ands	r4, r0
 8013782:	4630      	mov	r0, r6
 8013784:	f7f7 fbd6 	bl	800af34 <ucdr_serialize_uint8_t>
 8013788:	b2e4      	uxtb	r4, r4
 801378a:	4020      	ands	r0, r4
 801378c:	bd70      	pop	{r4, r5, r6, pc}
 801378e:	bf00      	nop

08013790 <uxr_deserialize_HEARTBEAT_Payload>:
 8013790:	b570      	push	{r4, r5, r6, lr}
 8013792:	4605      	mov	r5, r0
 8013794:	460e      	mov	r6, r1
 8013796:	f7f7 fcf9 	bl	800b18c <ucdr_deserialize_uint16_t>
 801379a:	1cb1      	adds	r1, r6, #2
 801379c:	4604      	mov	r4, r0
 801379e:	4628      	mov	r0, r5
 80137a0:	f7f7 fcf4 	bl	800b18c <ucdr_deserialize_uint16_t>
 80137a4:	1d31      	adds	r1, r6, #4
 80137a6:	4004      	ands	r4, r0
 80137a8:	4628      	mov	r0, r5
 80137aa:	f7f7 fbd9 	bl	800af60 <ucdr_deserialize_uint8_t>
 80137ae:	b2e4      	uxtb	r4, r4
 80137b0:	4020      	ands	r0, r4
 80137b2:	bd70      	pop	{r4, r5, r6, pc}

080137b4 <uxr_serialize_TIMESTAMP_Payload>:
 80137b4:	b570      	push	{r4, r5, r6, lr}
 80137b6:	460d      	mov	r5, r1
 80137b8:	6809      	ldr	r1, [r1, #0]
 80137ba:	4606      	mov	r6, r0
 80137bc:	f7f8 f9ea 	bl	800bb94 <ucdr_serialize_int32_t>
 80137c0:	6869      	ldr	r1, [r5, #4]
 80137c2:	4604      	mov	r4, r0
 80137c4:	4630      	mov	r0, r6
 80137c6:	f7f7 fdcb 	bl	800b360 <ucdr_serialize_uint32_t>
 80137ca:	4020      	ands	r0, r4
 80137cc:	b2c0      	uxtb	r0, r0
 80137ce:	bd70      	pop	{r4, r5, r6, pc}

080137d0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80137d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137d4:	4605      	mov	r5, r0
 80137d6:	460e      	mov	r6, r1
 80137d8:	f7f8 fa74 	bl	800bcc4 <ucdr_deserialize_int32_t>
 80137dc:	1d31      	adds	r1, r6, #4
 80137de:	4607      	mov	r7, r0
 80137e0:	4628      	mov	r0, r5
 80137e2:	f7f7 feed 	bl	800b5c0 <ucdr_deserialize_uint32_t>
 80137e6:	f106 0108 	add.w	r1, r6, #8
 80137ea:	4680      	mov	r8, r0
 80137ec:	4628      	mov	r0, r5
 80137ee:	f7f8 fa69 	bl	800bcc4 <ucdr_deserialize_int32_t>
 80137f2:	f106 010c 	add.w	r1, r6, #12
 80137f6:	4604      	mov	r4, r0
 80137f8:	4628      	mov	r0, r5
 80137fa:	f7f7 fee1 	bl	800b5c0 <ucdr_deserialize_uint32_t>
 80137fe:	ea07 0708 	and.w	r7, r7, r8
 8013802:	403c      	ands	r4, r7
 8013804:	f106 0110 	add.w	r1, r6, #16
 8013808:	4004      	ands	r4, r0
 801380a:	4628      	mov	r0, r5
 801380c:	f7f8 fa5a 	bl	800bcc4 <ucdr_deserialize_int32_t>
 8013810:	f106 0114 	add.w	r1, r6, #20
 8013814:	4607      	mov	r7, r0
 8013816:	4628      	mov	r0, r5
 8013818:	f7f7 fed2 	bl	800b5c0 <ucdr_deserialize_uint32_t>
 801381c:	b2e4      	uxtb	r4, r4
 801381e:	403c      	ands	r4, r7
 8013820:	4020      	ands	r0, r4
 8013822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013826:	bf00      	nop

08013828 <uxr_serialize_SampleIdentity>:
 8013828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801382c:	220c      	movs	r2, #12
 801382e:	4604      	mov	r4, r0
 8013830:	460d      	mov	r5, r1
 8013832:	f7fc fa27 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 8013836:	2203      	movs	r2, #3
 8013838:	f105 010c 	add.w	r1, r5, #12
 801383c:	4607      	mov	r7, r0
 801383e:	4620      	mov	r0, r4
 8013840:	f7fc fa20 	bl	800fc84 <ucdr_serialize_array_uint8_t>
 8013844:	7be9      	ldrb	r1, [r5, #15]
 8013846:	4680      	mov	r8, r0
 8013848:	4620      	mov	r0, r4
 801384a:	f7f7 fb73 	bl	800af34 <ucdr_serialize_uint8_t>
 801384e:	6929      	ldr	r1, [r5, #16]
 8013850:	4606      	mov	r6, r0
 8013852:	4620      	mov	r0, r4
 8013854:	f7f8 f99e 	bl	800bb94 <ucdr_serialize_int32_t>
 8013858:	6969      	ldr	r1, [r5, #20]
 801385a:	4603      	mov	r3, r0
 801385c:	4620      	mov	r0, r4
 801385e:	ea07 0708 	and.w	r7, r7, r8
 8013862:	461c      	mov	r4, r3
 8013864:	f7f7 fd7c 	bl	800b360 <ucdr_serialize_uint32_t>
 8013868:	403e      	ands	r6, r7
 801386a:	4034      	ands	r4, r6
 801386c:	4020      	ands	r0, r4
 801386e:	b2c0      	uxtb	r0, r0
 8013870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013874 <uxr_deserialize_SampleIdentity>:
 8013874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013878:	220c      	movs	r2, #12
 801387a:	4604      	mov	r4, r0
 801387c:	460d      	mov	r5, r1
 801387e:	f7fc fa65 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 8013882:	2203      	movs	r2, #3
 8013884:	f105 010c 	add.w	r1, r5, #12
 8013888:	4607      	mov	r7, r0
 801388a:	4620      	mov	r0, r4
 801388c:	f7fc fa5e 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 8013890:	f105 010f 	add.w	r1, r5, #15
 8013894:	4680      	mov	r8, r0
 8013896:	4620      	mov	r0, r4
 8013898:	f7f7 fb62 	bl	800af60 <ucdr_deserialize_uint8_t>
 801389c:	f105 0110 	add.w	r1, r5, #16
 80138a0:	4606      	mov	r6, r0
 80138a2:	4620      	mov	r0, r4
 80138a4:	f7f8 fa0e 	bl	800bcc4 <ucdr_deserialize_int32_t>
 80138a8:	f105 0114 	add.w	r1, r5, #20
 80138ac:	4603      	mov	r3, r0
 80138ae:	4620      	mov	r0, r4
 80138b0:	ea07 0708 	and.w	r7, r7, r8
 80138b4:	461c      	mov	r4, r3
 80138b6:	f7f7 fe83 	bl	800b5c0 <ucdr_deserialize_uint32_t>
 80138ba:	403e      	ands	r6, r7
 80138bc:	4034      	ands	r4, r6
 80138be:	4020      	ands	r0, r4
 80138c0:	b2c0      	uxtb	r0, r0
 80138c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138c6:	bf00      	nop

080138c8 <rcl_client_get_rmw_handle>:
 80138c8:	b118      	cbz	r0, 80138d2 <rcl_client_get_rmw_handle+0xa>
 80138ca:	6800      	ldr	r0, [r0, #0]
 80138cc:	b108      	cbz	r0, 80138d2 <rcl_client_get_rmw_handle+0xa>
 80138ce:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80138d2:	4770      	bx	lr

080138d4 <rcl_send_request>:
 80138d4:	b570      	push	{r4, r5, r6, lr}
 80138d6:	b082      	sub	sp, #8
 80138d8:	b1e8      	cbz	r0, 8013916 <rcl_send_request+0x42>
 80138da:	4604      	mov	r4, r0
 80138dc:	6800      	ldr	r0, [r0, #0]
 80138de:	b1d0      	cbz	r0, 8013916 <rcl_send_request+0x42>
 80138e0:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80138e4:	b1bb      	cbz	r3, 8013916 <rcl_send_request+0x42>
 80138e6:	460e      	mov	r6, r1
 80138e8:	b1d1      	cbz	r1, 8013920 <rcl_send_request+0x4c>
 80138ea:	4615      	mov	r5, r2
 80138ec:	b1c2      	cbz	r2, 8013920 <rcl_send_request+0x4c>
 80138ee:	2105      	movs	r1, #5
 80138f0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80138f4:	f002 fe58 	bl	80165a8 <__atomic_load_8>
 80138f8:	6823      	ldr	r3, [r4, #0]
 80138fa:	e9c5 0100 	strd	r0, r1, [r5]
 80138fe:	462a      	mov	r2, r5
 8013900:	4631      	mov	r1, r6
 8013902:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013906:	f003 fd43 	bl	8017390 <rmw_send_request>
 801390a:	4606      	mov	r6, r0
 801390c:	b160      	cbz	r0, 8013928 <rcl_send_request+0x54>
 801390e:	2601      	movs	r6, #1
 8013910:	4630      	mov	r0, r6
 8013912:	b002      	add	sp, #8
 8013914:	bd70      	pop	{r4, r5, r6, pc}
 8013916:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801391a:	4630      	mov	r0, r6
 801391c:	b002      	add	sp, #8
 801391e:	bd70      	pop	{r4, r5, r6, pc}
 8013920:	260b      	movs	r6, #11
 8013922:	4630      	mov	r0, r6
 8013924:	b002      	add	sp, #8
 8013926:	bd70      	pop	{r4, r5, r6, pc}
 8013928:	6820      	ldr	r0, [r4, #0]
 801392a:	2105      	movs	r1, #5
 801392c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013930:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013934:	9100      	str	r1, [sp, #0]
 8013936:	f002 fea3 	bl	8016680 <__atomic_exchange_8>
 801393a:	4630      	mov	r0, r6
 801393c:	b002      	add	sp, #8
 801393e:	bd70      	pop	{r4, r5, r6, pc}

08013940 <rcl_take_response>:
 8013940:	b570      	push	{r4, r5, r6, lr}
 8013942:	468e      	mov	lr, r1
 8013944:	460c      	mov	r4, r1
 8013946:	4616      	mov	r6, r2
 8013948:	4605      	mov	r5, r0
 801394a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801394e:	b08c      	sub	sp, #48	@ 0x30
 8013950:	f10d 0c18 	add.w	ip, sp, #24
 8013954:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013958:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801395c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013960:	b35d      	cbz	r5, 80139ba <rcl_take_response+0x7a>
 8013962:	682b      	ldr	r3, [r5, #0]
 8013964:	b34b      	cbz	r3, 80139ba <rcl_take_response+0x7a>
 8013966:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801396a:	b330      	cbz	r0, 80139ba <rcl_take_response+0x7a>
 801396c:	b346      	cbz	r6, 80139c0 <rcl_take_response+0x80>
 801396e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80139c8 <rcl_take_response+0x88>
 8013972:	2300      	movs	r3, #0
 8013974:	f88d 3007 	strb.w	r3, [sp, #7]
 8013978:	4632      	mov	r2, r6
 801397a:	f10d 0307 	add.w	r3, sp, #7
 801397e:	a902      	add	r1, sp, #8
 8013980:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013984:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013988:	f003 fe0a 	bl	80175a0 <rmw_take_response>
 801398c:	4605      	mov	r5, r0
 801398e:	b9c8      	cbnz	r0, 80139c4 <rcl_take_response+0x84>
 8013990:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013994:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8013998:	2a00      	cmp	r2, #0
 801399a:	bf08      	it	eq
 801399c:	461d      	moveq	r5, r3
 801399e:	f10d 0e18 	add.w	lr, sp, #24
 80139a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80139a6:	46a4      	mov	ip, r4
 80139a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80139ac:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80139b0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80139b4:	4628      	mov	r0, r5
 80139b6:	b00c      	add	sp, #48	@ 0x30
 80139b8:	bd70      	pop	{r4, r5, r6, pc}
 80139ba:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80139be:	e7ee      	b.n	801399e <rcl_take_response+0x5e>
 80139c0:	250b      	movs	r5, #11
 80139c2:	e7ec      	b.n	801399e <rcl_take_response+0x5e>
 80139c4:	2501      	movs	r5, #1
 80139c6:	e7ea      	b.n	801399e <rcl_take_response+0x5e>
	...

080139d0 <rcl_client_is_valid>:
 80139d0:	b130      	cbz	r0, 80139e0 <rcl_client_is_valid+0x10>
 80139d2:	6800      	ldr	r0, [r0, #0]
 80139d4:	b120      	cbz	r0, 80139e0 <rcl_client_is_valid+0x10>
 80139d6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80139da:	3800      	subs	r0, #0
 80139dc:	bf18      	it	ne
 80139de:	2001      	movne	r0, #1
 80139e0:	4770      	bx	lr
 80139e2:	bf00      	nop

080139e4 <rcl_convert_rmw_ret_to_rcl_ret>:
 80139e4:	280b      	cmp	r0, #11
 80139e6:	dc0d      	bgt.n	8013a04 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80139e8:	2800      	cmp	r0, #0
 80139ea:	db09      	blt.n	8013a00 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80139ec:	280b      	cmp	r0, #11
 80139ee:	d807      	bhi.n	8013a00 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80139f0:	e8df f000 	tbb	[pc, r0]
 80139f4:	07060607 	.word	0x07060607
 80139f8:	06060606 	.word	0x06060606
 80139fc:	07070606 	.word	0x07070606
 8013a00:	2001      	movs	r0, #1
 8013a02:	4770      	bx	lr
 8013a04:	28cb      	cmp	r0, #203	@ 0xcb
 8013a06:	bf18      	it	ne
 8013a08:	2001      	movne	r0, #1
 8013a0a:	4770      	bx	lr

08013a0c <rcl_get_zero_initialized_context>:
 8013a0c:	4a03      	ldr	r2, [pc, #12]	@ (8013a1c <rcl_get_zero_initialized_context+0x10>)
 8013a0e:	4603      	mov	r3, r0
 8013a10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013a14:	e883 0003 	stmia.w	r3, {r0, r1}
 8013a18:	4618      	mov	r0, r3
 8013a1a:	4770      	bx	lr
 8013a1c:	0801befc 	.word	0x0801befc

08013a20 <rcl_context_is_valid>:
 8013a20:	b118      	cbz	r0, 8013a2a <rcl_context_is_valid+0xa>
 8013a22:	6840      	ldr	r0, [r0, #4]
 8013a24:	3800      	subs	r0, #0
 8013a26:	bf18      	it	ne
 8013a28:	2001      	movne	r0, #1
 8013a2a:	4770      	bx	lr

08013a2c <__cleanup_context>:
 8013a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a30:	4606      	mov	r6, r0
 8013a32:	6800      	ldr	r0, [r0, #0]
 8013a34:	2300      	movs	r3, #0
 8013a36:	6073      	str	r3, [r6, #4]
 8013a38:	2800      	cmp	r0, #0
 8013a3a:	d049      	beq.n	8013ad0 <__cleanup_context+0xa4>
 8013a3c:	6947      	ldr	r7, [r0, #20]
 8013a3e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013a42:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8013a46:	b137      	cbz	r7, 8013a56 <__cleanup_context+0x2a>
 8013a48:	3014      	adds	r0, #20
 8013a4a:	f7f8 fe2d 	bl	800c6a8 <rcl_init_options_fini>
 8013a4e:	4607      	mov	r7, r0
 8013a50:	2800      	cmp	r0, #0
 8013a52:	d144      	bne.n	8013ade <__cleanup_context+0xb2>
 8013a54:	6830      	ldr	r0, [r6, #0]
 8013a56:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013a58:	b143      	cbz	r3, 8013a6c <__cleanup_context+0x40>
 8013a5a:	3028      	adds	r0, #40	@ 0x28
 8013a5c:	f7fa fa90 	bl	800df80 <rmw_context_fini>
 8013a60:	b118      	cbz	r0, 8013a6a <__cleanup_context+0x3e>
 8013a62:	2f00      	cmp	r7, #0
 8013a64:	d03e      	beq.n	8013ae4 <__cleanup_context+0xb8>
 8013a66:	f7f9 ffc3 	bl	800d9f0 <rcutils_reset_error>
 8013a6a:	6830      	ldr	r0, [r6, #0]
 8013a6c:	6a03      	ldr	r3, [r0, #32]
 8013a6e:	b1db      	cbz	r3, 8013aa8 <__cleanup_context+0x7c>
 8013a70:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8013a74:	2a01      	cmp	r2, #1
 8013a76:	f17c 0100 	sbcs.w	r1, ip, #0
 8013a7a:	db11      	blt.n	8013aa0 <__cleanup_context+0x74>
 8013a7c:	2400      	movs	r4, #0
 8013a7e:	4625      	mov	r5, r4
 8013a80:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013a84:	4649      	mov	r1, r9
 8013a86:	b1b8      	cbz	r0, 8013ab8 <__cleanup_context+0x8c>
 8013a88:	47c0      	blx	r8
 8013a8a:	6833      	ldr	r3, [r6, #0]
 8013a8c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8013a90:	3401      	adds	r4, #1
 8013a92:	f145 0500 	adc.w	r5, r5, #0
 8013a96:	4294      	cmp	r4, r2
 8013a98:	eb75 010c 	sbcs.w	r1, r5, ip
 8013a9c:	6a1b      	ldr	r3, [r3, #32]
 8013a9e:	dbef      	blt.n	8013a80 <__cleanup_context+0x54>
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	4649      	mov	r1, r9
 8013aa4:	47c0      	blx	r8
 8013aa6:	6830      	ldr	r0, [r6, #0]
 8013aa8:	4649      	mov	r1, r9
 8013aaa:	47c0      	blx	r8
 8013aac:	2300      	movs	r3, #0
 8013aae:	e9c6 3300 	strd	r3, r3, [r6]
 8013ab2:	4638      	mov	r0, r7
 8013ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ab8:	3401      	adds	r4, #1
 8013aba:	f145 0500 	adc.w	r5, r5, #0
 8013abe:	4294      	cmp	r4, r2
 8013ac0:	eb75 010c 	sbcs.w	r1, r5, ip
 8013ac4:	dbdc      	blt.n	8013a80 <__cleanup_context+0x54>
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	4649      	mov	r1, r9
 8013aca:	47c0      	blx	r8
 8013acc:	6830      	ldr	r0, [r6, #0]
 8013ace:	e7eb      	b.n	8013aa8 <__cleanup_context+0x7c>
 8013ad0:	4607      	mov	r7, r0
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	e9c6 3300 	strd	r3, r3, [r6]
 8013ad8:	4638      	mov	r0, r7
 8013ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ade:	f7f9 ff87 	bl	800d9f0 <rcutils_reset_error>
 8013ae2:	e7b7      	b.n	8013a54 <__cleanup_context+0x28>
 8013ae4:	f7ff ff7e 	bl	80139e4 <rcl_convert_rmw_ret_to_rcl_ret>
 8013ae8:	4607      	mov	r7, r0
 8013aea:	e7bc      	b.n	8013a66 <__cleanup_context+0x3a>

08013aec <rcl_init>:
 8013aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013af0:	1e05      	subs	r5, r0, #0
 8013af2:	b09e      	sub	sp, #120	@ 0x78
 8013af4:	460e      	mov	r6, r1
 8013af6:	4690      	mov	r8, r2
 8013af8:	461f      	mov	r7, r3
 8013afa:	f340 809c 	ble.w	8013c36 <rcl_init+0x14a>
 8013afe:	2900      	cmp	r1, #0
 8013b00:	f000 809c 	beq.w	8013c3c <rcl_init+0x150>
 8013b04:	f1a1 0e04 	sub.w	lr, r1, #4
 8013b08:	f04f 0c00 	mov.w	ip, #0
 8013b0c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8013b10:	f10c 0c01 	add.w	ip, ip, #1
 8013b14:	2c00      	cmp	r4, #0
 8013b16:	f000 8091 	beq.w	8013c3c <rcl_init+0x150>
 8013b1a:	4565      	cmp	r5, ip
 8013b1c:	d1f6      	bne.n	8013b0c <rcl_init+0x20>
 8013b1e:	f1b8 0f00 	cmp.w	r8, #0
 8013b22:	f000 808b 	beq.w	8013c3c <rcl_init+0x150>
 8013b26:	f8d8 4000 	ldr.w	r4, [r8]
 8013b2a:	2c00      	cmp	r4, #0
 8013b2c:	f000 8086 	beq.w	8013c3c <rcl_init+0x150>
 8013b30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013b32:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8013b36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b3a:	6823      	ldr	r3, [r4, #0]
 8013b3c:	f8cc 3000 	str.w	r3, [ip]
 8013b40:	a819      	add	r0, sp, #100	@ 0x64
 8013b42:	f7f9 ff2f 	bl	800d9a4 <rcutils_allocator_is_valid>
 8013b46:	2800      	cmp	r0, #0
 8013b48:	d078      	beq.n	8013c3c <rcl_init+0x150>
 8013b4a:	2f00      	cmp	r7, #0
 8013b4c:	d076      	beq.n	8013c3c <rcl_init+0x150>
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d178      	bne.n	8013c46 <rcl_init+0x15a>
 8013b54:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8013b58:	2178      	movs	r1, #120	@ 0x78
 8013b5a:	2001      	movs	r0, #1
 8013b5c:	4798      	blx	r3
 8013b5e:	4604      	mov	r4, r0
 8013b60:	6038      	str	r0, [r7, #0]
 8013b62:	2800      	cmp	r0, #0
 8013b64:	f000 80b6 	beq.w	8013cd4 <rcl_init+0x1e8>
 8013b68:	a802      	add	r0, sp, #8
 8013b6a:	f003 f86d 	bl	8016c48 <rmw_get_zero_initialized_context>
 8013b6e:	a902      	add	r1, sp, #8
 8013b70:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013b74:	2250      	movs	r2, #80	@ 0x50
 8013b76:	ac19      	add	r4, sp, #100	@ 0x64
 8013b78:	f005 ff5d 	bl	8019a36 <memcpy>
 8013b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013b7e:	f8d7 e000 	ldr.w	lr, [r7]
 8013b82:	46f4      	mov	ip, lr
 8013b84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b88:	6823      	ldr	r3, [r4, #0]
 8013b8a:	f8cc 3000 	str.w	r3, [ip]
 8013b8e:	f10e 0114 	add.w	r1, lr, #20
 8013b92:	4640      	mov	r0, r8
 8013b94:	f7f8 fdb2 	bl	800c6fc <rcl_init_options_copy>
 8013b98:	4604      	mov	r4, r0
 8013b9a:	2800      	cmp	r0, #0
 8013b9c:	d144      	bne.n	8013c28 <rcl_init+0x13c>
 8013b9e:	f8d7 9000 	ldr.w	r9, [r7]
 8013ba2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8013ba6:	f8c9 0020 	str.w	r0, [r9, #32]
 8013baa:	f8c9 5018 	str.w	r5, [r9, #24]
 8013bae:	f8c9 801c 	str.w	r8, [r9, #28]
 8013bb2:	2d00      	cmp	r5, #0
 8013bb4:	d04e      	beq.n	8013c54 <rcl_init+0x168>
 8013bb6:	2e00      	cmp	r6, #0
 8013bb8:	d04c      	beq.n	8013c54 <rcl_init+0x168>
 8013bba:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8013bbe:	2104      	movs	r1, #4
 8013bc0:	4628      	mov	r0, r5
 8013bc2:	4798      	blx	r3
 8013bc4:	f8c9 0020 	str.w	r0, [r9, #32]
 8013bc8:	f8d7 9000 	ldr.w	r9, [r7]
 8013bcc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013bd0:	46ca      	mov	sl, r9
 8013bd2:	b343      	cbz	r3, 8013c26 <rcl_init+0x13a>
 8013bd4:	2d01      	cmp	r5, #1
 8013bd6:	f178 0300 	sbcs.w	r3, r8, #0
 8013bda:	db3b      	blt.n	8013c54 <rcl_init+0x168>
 8013bdc:	2400      	movs	r4, #0
 8013bde:	3e04      	subs	r6, #4
 8013be0:	46a1      	mov	r9, r4
 8013be2:	e00b      	b.n	8013bfc <rcl_init+0x110>
 8013be4:	6831      	ldr	r1, [r6, #0]
 8013be6:	f005 ff26 	bl	8019a36 <memcpy>
 8013bea:	3401      	adds	r4, #1
 8013bec:	f149 0900 	adc.w	r9, r9, #0
 8013bf0:	45c8      	cmp	r8, r9
 8013bf2:	bf08      	it	eq
 8013bf4:	42a5      	cmpeq	r5, r4
 8013bf6:	d02b      	beq.n	8013c50 <rcl_init+0x164>
 8013bf8:	f8d7 a000 	ldr.w	sl, [r7]
 8013bfc:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8013c00:	f7ec fb18 	bl	8000234 <strlen>
 8013c04:	1c42      	adds	r2, r0, #1
 8013c06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013c08:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8013c0a:	f8da a020 	ldr.w	sl, [sl, #32]
 8013c0e:	9201      	str	r2, [sp, #4]
 8013c10:	4610      	mov	r0, r2
 8013c12:	4798      	blx	r3
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8013c1a:	6a1b      	ldr	r3, [r3, #32]
 8013c1c:	9a01      	ldr	r2, [sp, #4]
 8013c1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013c22:	2800      	cmp	r0, #0
 8013c24:	d1de      	bne.n	8013be4 <rcl_init+0xf8>
 8013c26:	240a      	movs	r4, #10
 8013c28:	4638      	mov	r0, r7
 8013c2a:	f7ff feff 	bl	8013a2c <__cleanup_context>
 8013c2e:	4620      	mov	r0, r4
 8013c30:	b01e      	add	sp, #120	@ 0x78
 8013c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c36:	2900      	cmp	r1, #0
 8013c38:	f43f af71 	beq.w	8013b1e <rcl_init+0x32>
 8013c3c:	240b      	movs	r4, #11
 8013c3e:	4620      	mov	r0, r4
 8013c40:	b01e      	add	sp, #120	@ 0x78
 8013c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c46:	2464      	movs	r4, #100	@ 0x64
 8013c48:	4620      	mov	r0, r4
 8013c4a:	b01e      	add	sp, #120	@ 0x78
 8013c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c50:	f8d7 9000 	ldr.w	r9, [r7]
 8013c54:	4926      	ldr	r1, [pc, #152]	@ (8013cf0 <rcl_init+0x204>)
 8013c56:	680b      	ldr	r3, [r1, #0]
 8013c58:	3301      	adds	r3, #1
 8013c5a:	d036      	beq.n	8013cca <rcl_init+0x1de>
 8013c5c:	600b      	str	r3, [r1, #0]
 8013c5e:	461a      	mov	r2, r3
 8013c60:	2400      	movs	r4, #0
 8013c62:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013c66:	607b      	str	r3, [r7, #4]
 8013c68:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013c6a:	3301      	adds	r3, #1
 8013c6c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8013c70:	d034      	beq.n	8013cdc <rcl_init+0x1f0>
 8013c72:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8013c76:	b93b      	cbnz	r3, 8013c88 <rcl_init+0x19c>
 8013c78:	3030      	adds	r0, #48	@ 0x30
 8013c7a:	f000 f83b 	bl	8013cf4 <rcl_get_localhost_only>
 8013c7e:	4604      	mov	r4, r0
 8013c80:	2800      	cmp	r0, #0
 8013c82:	d1d1      	bne.n	8013c28 <rcl_init+0x13c>
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	6958      	ldr	r0, [r3, #20]
 8013c88:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8013c8a:	aa18      	add	r2, sp, #96	@ 0x60
 8013c8c:	a917      	add	r1, sp, #92	@ 0x5c
 8013c8e:	f001 f925 	bl	8014edc <rcl_validate_enclave_name>
 8013c92:	4604      	mov	r4, r0
 8013c94:	2800      	cmp	r0, #0
 8013c96:	d1c7      	bne.n	8013c28 <rcl_init+0x13c>
 8013c98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013c9a:	b9eb      	cbnz	r3, 8013cd8 <rcl_init+0x1ec>
 8013c9c:	6839      	ldr	r1, [r7, #0]
 8013c9e:	694b      	ldr	r3, [r1, #20]
 8013ca0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8013ca2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8013ca6:	f000 fb3f 	bl	8014328 <rcl_get_security_options_from_environment>
 8013caa:	4604      	mov	r4, r0
 8013cac:	2800      	cmp	r0, #0
 8013cae:	d1bb      	bne.n	8013c28 <rcl_init+0x13c>
 8013cb0:	6839      	ldr	r1, [r7, #0]
 8013cb2:	6948      	ldr	r0, [r1, #20]
 8013cb4:	3128      	adds	r1, #40	@ 0x28
 8013cb6:	3018      	adds	r0, #24
 8013cb8:	f7fa f82c 	bl	800dd14 <rmw_init>
 8013cbc:	4604      	mov	r4, r0
 8013cbe:	2800      	cmp	r0, #0
 8013cc0:	d0bd      	beq.n	8013c3e <rcl_init+0x152>
 8013cc2:	f7ff fe8f 	bl	80139e4 <rcl_convert_rmw_ret_to_rcl_ret>
 8013cc6:	4604      	mov	r4, r0
 8013cc8:	e7ae      	b.n	8013c28 <rcl_init+0x13c>
 8013cca:	2201      	movs	r2, #1
 8013ccc:	461c      	mov	r4, r3
 8013cce:	600a      	str	r2, [r1, #0]
 8013cd0:	4613      	mov	r3, r2
 8013cd2:	e7c6      	b.n	8013c62 <rcl_init+0x176>
 8013cd4:	240a      	movs	r4, #10
 8013cd6:	e7b2      	b.n	8013c3e <rcl_init+0x152>
 8013cd8:	2401      	movs	r4, #1
 8013cda:	e7a5      	b.n	8013c28 <rcl_init+0x13c>
 8013cdc:	3024      	adds	r0, #36	@ 0x24
 8013cde:	f004 fce9 	bl	80186b4 <rcl_get_default_domain_id>
 8013ce2:	4604      	mov	r4, r0
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	d19f      	bne.n	8013c28 <rcl_init+0x13c>
 8013ce8:	683b      	ldr	r3, [r7, #0]
 8013cea:	6958      	ldr	r0, [r3, #20]
 8013cec:	e7c1      	b.n	8013c72 <rcl_init+0x186>
 8013cee:	bf00      	nop
 8013cf0:	2000b8a0 	.word	0x2000b8a0

08013cf4 <rcl_get_localhost_only>:
 8013cf4:	b510      	push	{r4, lr}
 8013cf6:	b082      	sub	sp, #8
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	9301      	str	r3, [sp, #4]
 8013cfc:	b1b8      	cbz	r0, 8013d2e <rcl_get_localhost_only+0x3a>
 8013cfe:	4604      	mov	r4, r0
 8013d00:	a901      	add	r1, sp, #4
 8013d02:	480c      	ldr	r0, [pc, #48]	@ (8013d34 <rcl_get_localhost_only+0x40>)
 8013d04:	f002 fcf4 	bl	80166f0 <rcutils_get_env>
 8013d08:	b110      	cbz	r0, 8013d10 <rcl_get_localhost_only+0x1c>
 8013d0a:	2001      	movs	r0, #1
 8013d0c:	b002      	add	sp, #8
 8013d0e:	bd10      	pop	{r4, pc}
 8013d10:	9b01      	ldr	r3, [sp, #4]
 8013d12:	b113      	cbz	r3, 8013d1a <rcl_get_localhost_only+0x26>
 8013d14:	781a      	ldrb	r2, [r3, #0]
 8013d16:	2a31      	cmp	r2, #49	@ 0x31
 8013d18:	d004      	beq.n	8013d24 <rcl_get_localhost_only+0x30>
 8013d1a:	2302      	movs	r3, #2
 8013d1c:	2000      	movs	r0, #0
 8013d1e:	7023      	strb	r3, [r4, #0]
 8013d20:	b002      	add	sp, #8
 8013d22:	bd10      	pop	{r4, pc}
 8013d24:	785b      	ldrb	r3, [r3, #1]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d1f7      	bne.n	8013d1a <rcl_get_localhost_only+0x26>
 8013d2a:	2301      	movs	r3, #1
 8013d2c:	e7f6      	b.n	8013d1c <rcl_get_localhost_only+0x28>
 8013d2e:	200b      	movs	r0, #11
 8013d30:	b002      	add	sp, #8
 8013d32:	bd10      	pop	{r4, pc}
 8013d34:	0801bf04 	.word	0x0801bf04

08013d38 <rcl_get_zero_initialized_node>:
 8013d38:	4a03      	ldr	r2, [pc, #12]	@ (8013d48 <rcl_get_zero_initialized_node+0x10>)
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013d40:	e883 0003 	stmia.w	r3, {r0, r1}
 8013d44:	4618      	mov	r0, r3
 8013d46:	4770      	bx	lr
 8013d48:	0801bf20 	.word	0x0801bf20

08013d4c <rcl_node_init>:
 8013d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d50:	b0a9      	sub	sp, #164	@ 0xa4
 8013d52:	4604      	mov	r4, r0
 8013d54:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8013d58:	a823      	add	r0, sp, #140	@ 0x8c
 8013d5a:	460e      	mov	r6, r1
 8013d5c:	4615      	mov	r5, r2
 8013d5e:	461f      	mov	r7, r3
 8013d60:	f004 ff1c 	bl	8018b9c <rcl_guard_condition_get_default_options>
 8013d64:	f1b8 0f00 	cmp.w	r8, #0
 8013d68:	f000 80e6 	beq.w	8013f38 <rcl_node_init+0x1ec>
 8013d6c:	4640      	mov	r0, r8
 8013d6e:	f7f9 fe19 	bl	800d9a4 <rcutils_allocator_is_valid>
 8013d72:	2800      	cmp	r0, #0
 8013d74:	f000 80e0 	beq.w	8013f38 <rcl_node_init+0x1ec>
 8013d78:	2e00      	cmp	r6, #0
 8013d7a:	f000 80dd 	beq.w	8013f38 <rcl_node_init+0x1ec>
 8013d7e:	2d00      	cmp	r5, #0
 8013d80:	f000 80da 	beq.w	8013f38 <rcl_node_init+0x1ec>
 8013d84:	2c00      	cmp	r4, #0
 8013d86:	f000 80d7 	beq.w	8013f38 <rcl_node_init+0x1ec>
 8013d8a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013d8e:	f1b9 0f00 	cmp.w	r9, #0
 8013d92:	f040 80fd 	bne.w	8013f90 <rcl_node_init+0x244>
 8013d96:	2f00      	cmp	r7, #0
 8013d98:	f000 80ce 	beq.w	8013f38 <rcl_node_init+0x1ec>
 8013d9c:	4638      	mov	r0, r7
 8013d9e:	f7ff fe3f 	bl	8013a20 <rcl_context_is_valid>
 8013da2:	4682      	mov	sl, r0
 8013da4:	2800      	cmp	r0, #0
 8013da6:	f000 80cd 	beq.w	8013f44 <rcl_node_init+0x1f8>
 8013daa:	464a      	mov	r2, r9
 8013dac:	a922      	add	r1, sp, #136	@ 0x88
 8013dae:	4630      	mov	r0, r6
 8013db0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8013db4:	f003 f8c6 	bl	8016f44 <rmw_validate_node_name>
 8013db8:	4681      	mov	r9, r0
 8013dba:	2800      	cmp	r0, #0
 8013dbc:	f040 80be 	bne.w	8013f3c <rcl_node_init+0x1f0>
 8013dc0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013dc2:	2800      	cmp	r0, #0
 8013dc4:	f040 80f0 	bne.w	8013fa8 <rcl_node_init+0x25c>
 8013dc8:	4628      	mov	r0, r5
 8013dca:	f7ec fa33 	bl	8000234 <strlen>
 8013dce:	2800      	cmp	r0, #0
 8013dd0:	f040 80bb 	bne.w	8013f4a <rcl_node_init+0x1fe>
 8013dd4:	4d7c      	ldr	r5, [pc, #496]	@ (8013fc8 <rcl_node_init+0x27c>)
 8013dd6:	a922      	add	r1, sp, #136	@ 0x88
 8013dd8:	2200      	movs	r2, #0
 8013dda:	4628      	mov	r0, r5
 8013ddc:	f003 f894 	bl	8016f08 <rmw_validate_namespace>
 8013de0:	4681      	mov	r9, r0
 8013de2:	2800      	cmp	r0, #0
 8013de4:	f040 80aa 	bne.w	8013f3c <rcl_node_init+0x1f0>
 8013de8:	4682      	mov	sl, r0
 8013dea:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013dec:	2800      	cmp	r0, #0
 8013dee:	f040 80e0 	bne.w	8013fb2 <rcl_node_init+0x266>
 8013df2:	f8d8 3000 	ldr.w	r3, [r8]
 8013df6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013dfa:	2078      	movs	r0, #120	@ 0x78
 8013dfc:	4798      	blx	r3
 8013dfe:	4681      	mov	r9, r0
 8013e00:	6060      	str	r0, [r4, #4]
 8013e02:	2800      	cmp	r0, #0
 8013e04:	f000 80ca 	beq.w	8013f9c <rcl_node_init+0x250>
 8013e08:	2200      	movs	r2, #0
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8013e10:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8013e14:	a808      	add	r0, sp, #32
 8013e16:	f000 f907 	bl	8014028 <rcl_node_get_default_options>
 8013e1a:	a908      	add	r1, sp, #32
 8013e1c:	4648      	mov	r0, r9
 8013e1e:	2268      	movs	r2, #104	@ 0x68
 8013e20:	f005 fe09 	bl	8019a36 <memcpy>
 8013e24:	6861      	ldr	r1, [r4, #4]
 8013e26:	6027      	str	r7, [r4, #0]
 8013e28:	4640      	mov	r0, r8
 8013e2a:	f000 f90b 	bl	8014044 <rcl_node_options_copy>
 8013e2e:	2800      	cmp	r0, #0
 8013e30:	d158      	bne.n	8013ee4 <rcl_node_init+0x198>
 8013e32:	4628      	mov	r0, r5
 8013e34:	f7ec f9fe 	bl	8000234 <strlen>
 8013e38:	4428      	add	r0, r5
 8013e3a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8013e3e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8013e42:	2b2f      	cmp	r3, #47	@ 0x2f
 8013e44:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013e48:	9300      	str	r3, [sp, #0]
 8013e4a:	bf0c      	ite	eq
 8013e4c:	4b5f      	ldreq	r3, [pc, #380]	@ (8013fcc <rcl_node_init+0x280>)
 8013e4e:	4b60      	ldrne	r3, [pc, #384]	@ (8013fd0 <rcl_node_init+0x284>)
 8013e50:	9302      	str	r3, [sp, #8]
 8013e52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013e56:	9301      	str	r3, [sp, #4]
 8013e58:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013e5c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013e60:	f002 fc6e 	bl	8016740 <rcutils_format_string_limit>
 8013e64:	6823      	ldr	r3, [r4, #0]
 8013e66:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8013e6a:	6818      	ldr	r0, [r3, #0]
 8013e6c:	4631      	mov	r1, r6
 8013e6e:	3028      	adds	r0, #40	@ 0x28
 8013e70:	462a      	mov	r2, r5
 8013e72:	6866      	ldr	r6, [r4, #4]
 8013e74:	f7fa f930 	bl	800e0d8 <rmw_create_node>
 8013e78:	6863      	ldr	r3, [r4, #4]
 8013e7a:	66b0      	str	r0, [r6, #104]	@ 0x68
 8013e7c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013e7e:	2800      	cmp	r0, #0
 8013e80:	d032      	beq.n	8013ee8 <rcl_node_init+0x19c>
 8013e82:	f7fa f9bd 	bl	800e200 <rmw_node_get_graph_guard_condition>
 8013e86:	4681      	mov	r9, r0
 8013e88:	b360      	cbz	r0, 8013ee4 <rcl_node_init+0x198>
 8013e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8013e8e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013e92:	6866      	ldr	r6, [r4, #4]
 8013e94:	2008      	movs	r0, #8
 8013e96:	4798      	blx	r3
 8013e98:	6863      	ldr	r3, [r4, #4]
 8013e9a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8013e9c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8013ea0:	f1bb 0f00 	cmp.w	fp, #0
 8013ea4:	d020      	beq.n	8013ee8 <rcl_node_init+0x19c>
 8013ea6:	a806      	add	r0, sp, #24
 8013ea8:	f004 fd9c 	bl	80189e4 <rcl_get_zero_initialized_guard_condition>
 8013eac:	a806      	add	r0, sp, #24
 8013eae:	c803      	ldmia	r0, {r0, r1}
 8013eb0:	6863      	ldr	r3, [r4, #4]
 8013eb2:	46c4      	mov	ip, r8
 8013eb4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8013eb8:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013ebc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013ec0:	ae23      	add	r6, sp, #140	@ 0x8c
 8013ec2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013ec4:	f8dc 3000 	ldr.w	r3, [ip]
 8013ec8:	6033      	str	r3, [r6, #0]
 8013eca:	ab28      	add	r3, sp, #160	@ 0xa0
 8013ecc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013ed0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013ed4:	4649      	mov	r1, r9
 8013ed6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013ed8:	463a      	mov	r2, r7
 8013eda:	4670      	mov	r0, lr
 8013edc:	f004 fdd8 	bl	8018a90 <rcl_guard_condition_init_from_rmw>
 8013ee0:	4681      	mov	r9, r0
 8013ee2:	b328      	cbz	r0, 8013f30 <rcl_node_init+0x1e4>
 8013ee4:	6863      	ldr	r3, [r4, #4]
 8013ee6:	b1f3      	cbz	r3, 8013f26 <rcl_node_init+0x1da>
 8013ee8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8013eea:	b128      	cbz	r0, 8013ef8 <rcl_node_init+0x1ac>
 8013eec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013ef0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013ef4:	4798      	blx	r3
 8013ef6:	6863      	ldr	r3, [r4, #4]
 8013ef8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013efa:	b110      	cbz	r0, 8013f02 <rcl_node_init+0x1b6>
 8013efc:	f7fa f904 	bl	800e108 <rmw_destroy_node>
 8013f00:	6863      	ldr	r3, [r4, #4]
 8013f02:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013f04:	b148      	cbz	r0, 8013f1a <rcl_node_init+0x1ce>
 8013f06:	f004 fe23 	bl	8018b50 <rcl_guard_condition_fini>
 8013f0a:	6863      	ldr	r3, [r4, #4]
 8013f0c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013f10:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013f12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013f16:	4798      	blx	r3
 8013f18:	6863      	ldr	r3, [r4, #4]
 8013f1a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013f24:	4798      	blx	r3
 8013f26:	2300      	movs	r3, #0
 8013f28:	e9c4 3300 	strd	r3, r3, [r4]
 8013f2c:	f04f 0901 	mov.w	r9, #1
 8013f30:	f1ba 0f00 	cmp.w	sl, #0
 8013f34:	d125      	bne.n	8013f82 <rcl_node_init+0x236>
 8013f36:	e001      	b.n	8013f3c <rcl_node_init+0x1f0>
 8013f38:	f04f 090b 	mov.w	r9, #11
 8013f3c:	4648      	mov	r0, r9
 8013f3e:	b029      	add	sp, #164	@ 0xa4
 8013f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f44:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8013f48:	e7f8      	b.n	8013f3c <rcl_node_init+0x1f0>
 8013f4a:	782b      	ldrb	r3, [r5, #0]
 8013f4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8013f4e:	f43f af42 	beq.w	8013dd6 <rcl_node_init+0x8a>
 8013f52:	9503      	str	r5, [sp, #12]
 8013f54:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013f58:	9300      	str	r3, [sp, #0]
 8013f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8013fd4 <rcl_node_init+0x288>)
 8013f5c:	9302      	str	r3, [sp, #8]
 8013f5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013f62:	9301      	str	r3, [sp, #4]
 8013f64:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013f68:	f002 fbea 	bl	8016740 <rcutils_format_string_limit>
 8013f6c:	4605      	mov	r5, r0
 8013f6e:	b340      	cbz	r0, 8013fc2 <rcl_node_init+0x276>
 8013f70:	2200      	movs	r2, #0
 8013f72:	a922      	add	r1, sp, #136	@ 0x88
 8013f74:	9222      	str	r2, [sp, #136]	@ 0x88
 8013f76:	f002 ffc7 	bl	8016f08 <rmw_validate_namespace>
 8013f7a:	4681      	mov	r9, r0
 8013f7c:	2800      	cmp	r0, #0
 8013f7e:	f43f af34 	beq.w	8013dea <rcl_node_init+0x9e>
 8013f82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013f86:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013f8a:	4628      	mov	r0, r5
 8013f8c:	4798      	blx	r3
 8013f8e:	e7d5      	b.n	8013f3c <rcl_node_init+0x1f0>
 8013f90:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8013f94:	4648      	mov	r0, r9
 8013f96:	b029      	add	sp, #164	@ 0xa4
 8013f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f9c:	f04f 090a 	mov.w	r9, #10
 8013fa0:	f1ba 0f00 	cmp.w	sl, #0
 8013fa4:	d1ed      	bne.n	8013f82 <rcl_node_init+0x236>
 8013fa6:	e7c9      	b.n	8013f3c <rcl_node_init+0x1f0>
 8013fa8:	f003 f81e 	bl	8016fe8 <rmw_node_name_validation_result_string>
 8013fac:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8013fb0:	e7c4      	b.n	8013f3c <rcl_node_init+0x1f0>
 8013fb2:	f002 ffbb 	bl	8016f2c <rmw_namespace_validation_result_string>
 8013fb6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8013fba:	f1ba 0f00 	cmp.w	sl, #0
 8013fbe:	d1e0      	bne.n	8013f82 <rcl_node_init+0x236>
 8013fc0:	e7bc      	b.n	8013f3c <rcl_node_init+0x1f0>
 8013fc2:	f04f 090a 	mov.w	r9, #10
 8013fc6:	e7b9      	b.n	8013f3c <rcl_node_init+0x1f0>
 8013fc8:	0801b6cc 	.word	0x0801b6cc
 8013fcc:	0801b6f4 	.word	0x0801b6f4
 8013fd0:	0801b6d0 	.word	0x0801b6d0
 8013fd4:	0801bf1c 	.word	0x0801bf1c

08013fd8 <rcl_node_is_valid>:
 8013fd8:	b130      	cbz	r0, 8013fe8 <rcl_node_is_valid+0x10>
 8013fda:	6843      	ldr	r3, [r0, #4]
 8013fdc:	b123      	cbz	r3, 8013fe8 <rcl_node_is_valid+0x10>
 8013fde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013fe0:	b113      	cbz	r3, 8013fe8 <rcl_node_is_valid+0x10>
 8013fe2:	6800      	ldr	r0, [r0, #0]
 8013fe4:	f7ff bd1c 	b.w	8013a20 <rcl_context_is_valid>
 8013fe8:	2000      	movs	r0, #0
 8013fea:	4770      	bx	lr

08013fec <rcl_node_get_name>:
 8013fec:	b120      	cbz	r0, 8013ff8 <rcl_node_get_name+0xc>
 8013fee:	6840      	ldr	r0, [r0, #4]
 8013ff0:	b110      	cbz	r0, 8013ff8 <rcl_node_get_name+0xc>
 8013ff2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013ff4:	b100      	cbz	r0, 8013ff8 <rcl_node_get_name+0xc>
 8013ff6:	6880      	ldr	r0, [r0, #8]
 8013ff8:	4770      	bx	lr
 8013ffa:	bf00      	nop

08013ffc <rcl_node_get_namespace>:
 8013ffc:	b120      	cbz	r0, 8014008 <rcl_node_get_namespace+0xc>
 8013ffe:	6840      	ldr	r0, [r0, #4]
 8014000:	b110      	cbz	r0, 8014008 <rcl_node_get_namespace+0xc>
 8014002:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014004:	b100      	cbz	r0, 8014008 <rcl_node_get_namespace+0xc>
 8014006:	68c0      	ldr	r0, [r0, #12]
 8014008:	4770      	bx	lr
 801400a:	bf00      	nop

0801400c <rcl_node_get_options>:
 801400c:	b128      	cbz	r0, 801401a <rcl_node_get_options+0xe>
 801400e:	6840      	ldr	r0, [r0, #4]
 8014010:	b118      	cbz	r0, 801401a <rcl_node_get_options+0xe>
 8014012:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8014014:	2b00      	cmp	r3, #0
 8014016:	bf08      	it	eq
 8014018:	2000      	moveq	r0, #0
 801401a:	4770      	bx	lr

0801401c <rcl_node_get_rmw_handle>:
 801401c:	b110      	cbz	r0, 8014024 <rcl_node_get_rmw_handle+0x8>
 801401e:	6840      	ldr	r0, [r0, #4]
 8014020:	b100      	cbz	r0, 8014024 <rcl_node_get_rmw_handle+0x8>
 8014022:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014024:	4770      	bx	lr
 8014026:	bf00      	nop

08014028 <rcl_node_get_default_options>:
 8014028:	b510      	push	{r4, lr}
 801402a:	2268      	movs	r2, #104	@ 0x68
 801402c:	4604      	mov	r4, r0
 801402e:	2100      	movs	r1, #0
 8014030:	f005 fc38 	bl	80198a4 <memset>
 8014034:	4620      	mov	r0, r4
 8014036:	f7f9 fca7 	bl	800d988 <rcutils_get_default_allocator>
 801403a:	2301      	movs	r3, #1
 801403c:	7523      	strb	r3, [r4, #20]
 801403e:	4620      	mov	r0, r4
 8014040:	bd10      	pop	{r4, pc}
 8014042:	bf00      	nop

08014044 <rcl_node_options_copy>:
 8014044:	b1d0      	cbz	r0, 801407c <rcl_node_options_copy+0x38>
 8014046:	b570      	push	{r4, r5, r6, lr}
 8014048:	460c      	mov	r4, r1
 801404a:	b1a9      	cbz	r1, 8014078 <rcl_node_options_copy+0x34>
 801404c:	4288      	cmp	r0, r1
 801404e:	4684      	mov	ip, r0
 8014050:	d012      	beq.n	8014078 <rcl_node_options_copy+0x34>
 8014052:	4605      	mov	r5, r0
 8014054:	8a86      	ldrh	r6, [r0, #20]
 8014056:	468e      	mov	lr, r1
 8014058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801405a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801405e:	682b      	ldr	r3, [r5, #0]
 8014060:	f8ce 3000 	str.w	r3, [lr]
 8014064:	f10c 0118 	add.w	r1, ip, #24
 8014068:	2250      	movs	r2, #80	@ 0x50
 801406a:	82a6      	strh	r6, [r4, #20]
 801406c:	f104 0018 	add.w	r0, r4, #24
 8014070:	f005 fce1 	bl	8019a36 <memcpy>
 8014074:	2000      	movs	r0, #0
 8014076:	bd70      	pop	{r4, r5, r6, pc}
 8014078:	200b      	movs	r0, #11
 801407a:	bd70      	pop	{r4, r5, r6, pc}
 801407c:	200b      	movs	r0, #11
 801407e:	4770      	bx	lr

08014080 <rcl_node_resolve_name>:
 8014080:	b082      	sub	sp, #8
 8014082:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014086:	b091      	sub	sp, #68	@ 0x44
 8014088:	ac1a      	add	r4, sp, #104	@ 0x68
 801408a:	e884 000c 	stmia.w	r4, {r2, r3}
 801408e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8014092:	2800      	cmp	r0, #0
 8014094:	d03b      	beq.n	801410e <rcl_node_resolve_name+0x8e>
 8014096:	460c      	mov	r4, r1
 8014098:	4605      	mov	r5, r0
 801409a:	f7ff ffb7 	bl	801400c <rcl_node_get_options>
 801409e:	2800      	cmp	r0, #0
 80140a0:	d037      	beq.n	8014112 <rcl_node_resolve_name+0x92>
 80140a2:	4628      	mov	r0, r5
 80140a4:	f7ff ffa2 	bl	8013fec <rcl_node_get_name>
 80140a8:	4606      	mov	r6, r0
 80140aa:	4628      	mov	r0, r5
 80140ac:	f7ff ffa6 	bl	8013ffc <rcl_node_get_namespace>
 80140b0:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80140b4:	4681      	mov	r9, r0
 80140b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80140ba:	ad0b      	add	r5, sp, #44	@ 0x2c
 80140bc:	46ac      	mov	ip, r5
 80140be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80140c2:	f8de 3000 	ldr.w	r3, [lr]
 80140c6:	f8cc 3000 	str.w	r3, [ip]
 80140ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80140cc:	b1fb      	cbz	r3, 801410e <rcl_node_resolve_name+0x8e>
 80140ce:	468a      	mov	sl, r1
 80140d0:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 80140d4:	f002 fc8c 	bl	80169f0 <rcutils_get_zero_initialized_string_map>
 80140d8:	ab10      	add	r3, sp, #64	@ 0x40
 80140da:	9008      	str	r0, [sp, #32]
 80140dc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80140e0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80140e4:	2100      	movs	r1, #0
 80140e6:	e895 000c 	ldmia.w	r5, {r2, r3}
 80140ea:	a808      	add	r0, sp, #32
 80140ec:	f002 fcf8 	bl	8016ae0 <rcutils_string_map_init>
 80140f0:	4607      	mov	r7, r0
 80140f2:	b180      	cbz	r0, 8014116 <rcl_node_resolve_name+0x96>
 80140f4:	f7f9 fc64 	bl	800d9c0 <rcutils_get_error_string>
 80140f8:	f7f9 fc7a 	bl	800d9f0 <rcutils_reset_error>
 80140fc:	2f0a      	cmp	r7, #10
 80140fe:	bf18      	it	ne
 8014100:	2701      	movne	r7, #1
 8014102:	4638      	mov	r0, r7
 8014104:	b011      	add	sp, #68	@ 0x44
 8014106:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801410a:	b002      	add	sp, #8
 801410c:	4770      	bx	lr
 801410e:	270b      	movs	r7, #11
 8014110:	e7f7      	b.n	8014102 <rcl_node_resolve_name+0x82>
 8014112:	2701      	movs	r7, #1
 8014114:	e7f5      	b.n	8014102 <rcl_node_resolve_name+0x82>
 8014116:	9009      	str	r0, [sp, #36]	@ 0x24
 8014118:	9007      	str	r0, [sp, #28]
 801411a:	a808      	add	r0, sp, #32
 801411c:	f004 fc5c 	bl	80189d8 <rcl_get_default_topic_name_substitutions>
 8014120:	4607      	mov	r7, r0
 8014122:	b1a8      	cbz	r0, 8014150 <rcl_node_resolve_name+0xd0>
 8014124:	280a      	cmp	r0, #10
 8014126:	9c07      	ldr	r4, [sp, #28]
 8014128:	d000      	beq.n	801412c <rcl_node_resolve_name+0xac>
 801412a:	2701      	movs	r7, #1
 801412c:	a808      	add	r0, sp, #32
 801412e:	f002 fd17 	bl	8016b60 <rcutils_string_map_fini>
 8014132:	2800      	cmp	r0, #0
 8014134:	d13d      	bne.n	80141b2 <rcl_node_resolve_name+0x132>
 8014136:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014138:	4659      	mov	r1, fp
 801413a:	47d0      	blx	sl
 801413c:	4659      	mov	r1, fp
 801413e:	4620      	mov	r0, r4
 8014140:	47d0      	blx	sl
 8014142:	f1b8 0f00 	cmp.w	r8, #0
 8014146:	d0dc      	beq.n	8014102 <rcl_node_resolve_name+0x82>
 8014148:	2f67      	cmp	r7, #103	@ 0x67
 801414a:	bf08      	it	eq
 801414c:	2768      	moveq	r7, #104	@ 0x68
 801414e:	e7d8      	b.n	8014102 <rcl_node_resolve_name+0x82>
 8014150:	ab09      	add	r3, sp, #36	@ 0x24
 8014152:	9305      	str	r3, [sp, #20]
 8014154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014156:	46ec      	mov	ip, sp
 8014158:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801415c:	682b      	ldr	r3, [r5, #0]
 801415e:	f8cc 3000 	str.w	r3, [ip]
 8014162:	464a      	mov	r2, r9
 8014164:	4631      	mov	r1, r6
 8014166:	4620      	mov	r0, r4
 8014168:	ab08      	add	r3, sp, #32
 801416a:	f004 fad7 	bl	801871c <rcl_expand_topic_name>
 801416e:	4607      	mov	r7, r0
 8014170:	b9b8      	cbnz	r0, 80141a2 <rcl_node_resolve_name+0x122>
 8014172:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014174:	9009      	str	r0, [sp, #36]	@ 0x24
 8014176:	4602      	mov	r2, r0
 8014178:	a90a      	add	r1, sp, #40	@ 0x28
 801417a:	4620      	mov	r0, r4
 801417c:	f002 fe00 	bl	8016d80 <rmw_validate_full_topic_name>
 8014180:	b988      	cbnz	r0, 80141a6 <rcl_node_resolve_name+0x126>
 8014182:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014184:	b9d5      	cbnz	r5, 80141bc <rcl_node_resolve_name+0x13c>
 8014186:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014188:	a808      	add	r0, sp, #32
 801418a:	601c      	str	r4, [r3, #0]
 801418c:	f002 fce8 	bl	8016b60 <rcutils_string_map_fini>
 8014190:	4607      	mov	r7, r0
 8014192:	b1a8      	cbz	r0, 80141c0 <rcl_node_resolve_name+0x140>
 8014194:	f7f9 fc14 	bl	800d9c0 <rcutils_get_error_string>
 8014198:	462c      	mov	r4, r5
 801419a:	f7f9 fc29 	bl	800d9f0 <rcutils_reset_error>
 801419e:	2701      	movs	r7, #1
 80141a0:	e7c9      	b.n	8014136 <rcl_node_resolve_name+0xb6>
 80141a2:	9c07      	ldr	r4, [sp, #28]
 80141a4:	e7c2      	b.n	801412c <rcl_node_resolve_name+0xac>
 80141a6:	f7f9 fc0b 	bl	800d9c0 <rcutils_get_error_string>
 80141aa:	2701      	movs	r7, #1
 80141ac:	f7f9 fc20 	bl	800d9f0 <rcutils_reset_error>
 80141b0:	e7bc      	b.n	801412c <rcl_node_resolve_name+0xac>
 80141b2:	f7f9 fc05 	bl	800d9c0 <rcutils_get_error_string>
 80141b6:	f7f9 fc1b 	bl	800d9f0 <rcutils_reset_error>
 80141ba:	e7bc      	b.n	8014136 <rcl_node_resolve_name+0xb6>
 80141bc:	2767      	movs	r7, #103	@ 0x67
 80141be:	e7b5      	b.n	801412c <rcl_node_resolve_name+0xac>
 80141c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80141c2:	4659      	mov	r1, fp
 80141c4:	47d0      	blx	sl
 80141c6:	4659      	mov	r1, fp
 80141c8:	4638      	mov	r0, r7
 80141ca:	47d0      	blx	sl
 80141cc:	e799      	b.n	8014102 <rcl_node_resolve_name+0x82>
 80141ce:	bf00      	nop

080141d0 <exact_match_lookup>:
 80141d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141d2:	f102 0708 	add.w	r7, r2, #8
 80141d6:	460b      	mov	r3, r1
 80141d8:	4614      	mov	r4, r2
 80141da:	4606      	mov	r6, r0
 80141dc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80141e0:	b085      	sub	sp, #20
 80141e2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80141e6:	4618      	mov	r0, r3
 80141e8:	4919      	ldr	r1, [pc, #100]	@ (8014250 <exact_match_lookup+0x80>)
 80141ea:	e894 000c 	ldmia.w	r4, {r2, r3}
 80141ee:	f002 fa99 	bl	8016724 <rcutils_join_path>
 80141f2:	7833      	ldrb	r3, [r6, #0]
 80141f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80141f6:	4605      	mov	r5, r0
 80141f8:	d023      	beq.n	8014242 <exact_match_lookup+0x72>
 80141fa:	f104 030c 	add.w	r3, r4, #12
 80141fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014202:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014206:	1c70      	adds	r0, r6, #1
 8014208:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801420c:	f002 fa90 	bl	8016730 <rcutils_to_native_path>
 8014210:	4606      	mov	r6, r0
 8014212:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014216:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801421a:	4631      	mov	r1, r6
 801421c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014220:	4628      	mov	r0, r5
 8014222:	f002 fa7f 	bl	8016724 <rcutils_join_path>
 8014226:	6862      	ldr	r2, [r4, #4]
 8014228:	6921      	ldr	r1, [r4, #16]
 801422a:	4603      	mov	r3, r0
 801422c:	4630      	mov	r0, r6
 801422e:	461e      	mov	r6, r3
 8014230:	4790      	blx	r2
 8014232:	4628      	mov	r0, r5
 8014234:	6863      	ldr	r3, [r4, #4]
 8014236:	6921      	ldr	r1, [r4, #16]
 8014238:	4798      	blx	r3
 801423a:	4635      	mov	r5, r6
 801423c:	4628      	mov	r0, r5
 801423e:	b005      	add	sp, #20
 8014240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014242:	7873      	ldrb	r3, [r6, #1]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d1d8      	bne.n	80141fa <exact_match_lookup+0x2a>
 8014248:	4628      	mov	r0, r5
 801424a:	b005      	add	sp, #20
 801424c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801424e:	bf00      	nop
 8014250:	0801bf64 	.word	0x0801bf64

08014254 <rcl_get_secure_root>:
 8014254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014258:	b085      	sub	sp, #20
 801425a:	b168      	cbz	r0, 8014278 <rcl_get_secure_root+0x24>
 801425c:	4607      	mov	r7, r0
 801425e:	4608      	mov	r0, r1
 8014260:	460c      	mov	r4, r1
 8014262:	f7f9 fb9f 	bl	800d9a4 <rcutils_allocator_is_valid>
 8014266:	b138      	cbz	r0, 8014278 <rcl_get_secure_root+0x24>
 8014268:	2300      	movs	r3, #0
 801426a:	482d      	ldr	r0, [pc, #180]	@ (8014320 <rcl_get_secure_root+0xcc>)
 801426c:	9303      	str	r3, [sp, #12]
 801426e:	a903      	add	r1, sp, #12
 8014270:	f002 fa3e 	bl	80166f0 <rcutils_get_env>
 8014274:	4605      	mov	r5, r0
 8014276:	b120      	cbz	r0, 8014282 <rcl_get_secure_root+0x2e>
 8014278:	2500      	movs	r5, #0
 801427a:	4628      	mov	r0, r5
 801427c:	b005      	add	sp, #20
 801427e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014282:	9b03      	ldr	r3, [sp, #12]
 8014284:	781a      	ldrb	r2, [r3, #0]
 8014286:	2a00      	cmp	r2, #0
 8014288:	d0f6      	beq.n	8014278 <rcl_get_secure_root+0x24>
 801428a:	f104 090c 	add.w	r9, r4, #12
 801428e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014292:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014296:	4618      	mov	r0, r3
 8014298:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801429c:	f002 fb6a 	bl	8016974 <rcutils_strdup>
 80142a0:	4680      	mov	r8, r0
 80142a2:	2800      	cmp	r0, #0
 80142a4:	d0e8      	beq.n	8014278 <rcl_get_secure_root+0x24>
 80142a6:	481f      	ldr	r0, [pc, #124]	@ (8014324 <rcl_get_secure_root+0xd0>)
 80142a8:	9503      	str	r5, [sp, #12]
 80142aa:	a903      	add	r1, sp, #12
 80142ac:	f002 fa20 	bl	80166f0 <rcutils_get_env>
 80142b0:	b160      	cbz	r0, 80142cc <rcl_get_secure_root+0x78>
 80142b2:	2600      	movs	r6, #0
 80142b4:	6863      	ldr	r3, [r4, #4]
 80142b6:	6921      	ldr	r1, [r4, #16]
 80142b8:	4630      	mov	r0, r6
 80142ba:	4798      	blx	r3
 80142bc:	4640      	mov	r0, r8
 80142be:	6863      	ldr	r3, [r4, #4]
 80142c0:	6921      	ldr	r1, [r4, #16]
 80142c2:	4798      	blx	r3
 80142c4:	4628      	mov	r0, r5
 80142c6:	b005      	add	sp, #20
 80142c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142cc:	9b03      	ldr	r3, [sp, #12]
 80142ce:	781e      	ldrb	r6, [r3, #0]
 80142d0:	b1f6      	cbz	r6, 8014310 <rcl_get_secure_root+0xbc>
 80142d2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80142d6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80142da:	4618      	mov	r0, r3
 80142dc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80142e0:	f002 fb48 	bl	8016974 <rcutils_strdup>
 80142e4:	4606      	mov	r6, r0
 80142e6:	2800      	cmp	r0, #0
 80142e8:	d0e3      	beq.n	80142b2 <rcl_get_secure_root+0x5e>
 80142ea:	4622      	mov	r2, r4
 80142ec:	4641      	mov	r1, r8
 80142ee:	f7ff ff6f 	bl	80141d0 <exact_match_lookup>
 80142f2:	4605      	mov	r5, r0
 80142f4:	2d00      	cmp	r5, #0
 80142f6:	d0dd      	beq.n	80142b4 <rcl_get_secure_root+0x60>
 80142f8:	4628      	mov	r0, r5
 80142fa:	f002 fa11 	bl	8016720 <rcutils_is_directory>
 80142fe:	4603      	mov	r3, r0
 8014300:	2800      	cmp	r0, #0
 8014302:	d1d7      	bne.n	80142b4 <rcl_get_secure_root+0x60>
 8014304:	4628      	mov	r0, r5
 8014306:	6921      	ldr	r1, [r4, #16]
 8014308:	461d      	mov	r5, r3
 801430a:	6863      	ldr	r3, [r4, #4]
 801430c:	4798      	blx	r3
 801430e:	e7d1      	b.n	80142b4 <rcl_get_secure_root+0x60>
 8014310:	4622      	mov	r2, r4
 8014312:	4638      	mov	r0, r7
 8014314:	4641      	mov	r1, r8
 8014316:	f7ff ff5b 	bl	80141d0 <exact_match_lookup>
 801431a:	4605      	mov	r5, r0
 801431c:	e7ea      	b.n	80142f4 <rcl_get_secure_root+0xa0>
 801431e:	bf00      	nop
 8014320:	0801bf70 	.word	0x0801bf70
 8014324:	0801bf88 	.word	0x0801bf88

08014328 <rcl_get_security_options_from_environment>:
 8014328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801432c:	b082      	sub	sp, #8
 801432e:	2300      	movs	r3, #0
 8014330:	4606      	mov	r6, r0
 8014332:	460f      	mov	r7, r1
 8014334:	4820      	ldr	r0, [pc, #128]	@ (80143b8 <rcl_get_security_options_from_environment+0x90>)
 8014336:	9301      	str	r3, [sp, #4]
 8014338:	a901      	add	r1, sp, #4
 801433a:	4690      	mov	r8, r2
 801433c:	f002 f9d8 	bl	80166f0 <rcutils_get_env>
 8014340:	b120      	cbz	r0, 801434c <rcl_get_security_options_from_environment+0x24>
 8014342:	2501      	movs	r5, #1
 8014344:	4628      	mov	r0, r5
 8014346:	b002      	add	sp, #8
 8014348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801434c:	491b      	ldr	r1, [pc, #108]	@ (80143bc <rcl_get_security_options_from_environment+0x94>)
 801434e:	4604      	mov	r4, r0
 8014350:	9801      	ldr	r0, [sp, #4]
 8014352:	f7eb ff65 	bl	8000220 <strcmp>
 8014356:	4605      	mov	r5, r0
 8014358:	b9e8      	cbnz	r0, 8014396 <rcl_get_security_options_from_environment+0x6e>
 801435a:	9001      	str	r0, [sp, #4]
 801435c:	f1b8 0f00 	cmp.w	r8, #0
 8014360:	d020      	beq.n	80143a4 <rcl_get_security_options_from_environment+0x7c>
 8014362:	4817      	ldr	r0, [pc, #92]	@ (80143c0 <rcl_get_security_options_from_environment+0x98>)
 8014364:	a901      	add	r1, sp, #4
 8014366:	f002 f9c3 	bl	80166f0 <rcutils_get_env>
 801436a:	2800      	cmp	r0, #0
 801436c:	d1e9      	bne.n	8014342 <rcl_get_security_options_from_environment+0x1a>
 801436e:	4915      	ldr	r1, [pc, #84]	@ (80143c4 <rcl_get_security_options_from_environment+0x9c>)
 8014370:	9801      	ldr	r0, [sp, #4]
 8014372:	f7eb ff55 	bl	8000220 <strcmp>
 8014376:	fab0 f080 	clz	r0, r0
 801437a:	0940      	lsrs	r0, r0, #5
 801437c:	f888 0000 	strb.w	r0, [r8]
 8014380:	4639      	mov	r1, r7
 8014382:	4630      	mov	r0, r6
 8014384:	f7ff ff66 	bl	8014254 <rcl_get_secure_root>
 8014388:	b170      	cbz	r0, 80143a8 <rcl_get_security_options_from_environment+0x80>
 801438a:	f8c8 0004 	str.w	r0, [r8, #4]
 801438e:	4628      	mov	r0, r5
 8014390:	b002      	add	sp, #8
 8014392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014396:	4625      	mov	r5, r4
 8014398:	4628      	mov	r0, r5
 801439a:	f888 4000 	strb.w	r4, [r8]
 801439e:	b002      	add	sp, #8
 80143a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143a4:	250b      	movs	r5, #11
 80143a6:	e7cd      	b.n	8014344 <rcl_get_security_options_from_environment+0x1c>
 80143a8:	f898 5000 	ldrb.w	r5, [r8]
 80143ac:	f1a5 0501 	sub.w	r5, r5, #1
 80143b0:	fab5 f585 	clz	r5, r5
 80143b4:	096d      	lsrs	r5, r5, #5
 80143b6:	e7c5      	b.n	8014344 <rcl_get_security_options_from_environment+0x1c>
 80143b8:	0801bf28 	.word	0x0801bf28
 80143bc:	0801bf3c 	.word	0x0801bf3c
 80143c0:	0801bf44 	.word	0x0801bf44
 80143c4:	0801bf5c 	.word	0x0801bf5c

080143c8 <rcl_get_zero_initialized_service>:
 80143c8:	4b01      	ldr	r3, [pc, #4]	@ (80143d0 <rcl_get_zero_initialized_service+0x8>)
 80143ca:	6818      	ldr	r0, [r3, #0]
 80143cc:	4770      	bx	lr
 80143ce:	bf00      	nop
 80143d0:	0801bfa8 	.word	0x0801bfa8

080143d4 <rcl_service_init>:
 80143d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80143d8:	b089      	sub	sp, #36	@ 0x24
 80143da:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80143dc:	b1c5      	cbz	r5, 8014410 <rcl_service_init+0x3c>
 80143de:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 80143e2:	4604      	mov	r4, r0
 80143e4:	4648      	mov	r0, r9
 80143e6:	4688      	mov	r8, r1
 80143e8:	4617      	mov	r7, r2
 80143ea:	461e      	mov	r6, r3
 80143ec:	f7f9 fada 	bl	800d9a4 <rcutils_allocator_is_valid>
 80143f0:	b170      	cbz	r0, 8014410 <rcl_service_init+0x3c>
 80143f2:	b16c      	cbz	r4, 8014410 <rcl_service_init+0x3c>
 80143f4:	4640      	mov	r0, r8
 80143f6:	f7ff fdef 	bl	8013fd8 <rcl_node_is_valid>
 80143fa:	2800      	cmp	r0, #0
 80143fc:	d058      	beq.n	80144b0 <rcl_service_init+0xdc>
 80143fe:	b13f      	cbz	r7, 8014410 <rcl_service_init+0x3c>
 8014400:	b136      	cbz	r6, 8014410 <rcl_service_init+0x3c>
 8014402:	6823      	ldr	r3, [r4, #0]
 8014404:	b14b      	cbz	r3, 801441a <rcl_service_init+0x46>
 8014406:	2664      	movs	r6, #100	@ 0x64
 8014408:	4630      	mov	r0, r6
 801440a:	b009      	add	sp, #36	@ 0x24
 801440c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014410:	260b      	movs	r6, #11
 8014412:	4630      	mov	r0, r6
 8014414:	b009      	add	sp, #36	@ 0x24
 8014416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801441a:	aa07      	add	r2, sp, #28
 801441c:	9205      	str	r2, [sp, #20]
 801441e:	2201      	movs	r2, #1
 8014420:	9304      	str	r3, [sp, #16]
 8014422:	9203      	str	r2, [sp, #12]
 8014424:	9307      	str	r3, [sp, #28]
 8014426:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 801442a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801442e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014432:	4631      	mov	r1, r6
 8014434:	e899 000c 	ldmia.w	r9, {r2, r3}
 8014438:	4640      	mov	r0, r8
 801443a:	f7ff fe21 	bl	8014080 <rcl_node_resolve_name>
 801443e:	2800      	cmp	r0, #0
 8014440:	d145      	bne.n	80144ce <rcl_service_init+0xfa>
 8014442:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8014444:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8014446:	f44f 7088 	mov.w	r0, #272	@ 0x110
 801444a:	4798      	blx	r3
 801444c:	6020      	str	r0, [r4, #0]
 801444e:	2800      	cmp	r0, #0
 8014450:	d043      	beq.n	80144da <rcl_service_init+0x106>
 8014452:	4640      	mov	r0, r8
 8014454:	f7ff fde2 	bl	801401c <rcl_node_get_rmw_handle>
 8014458:	462b      	mov	r3, r5
 801445a:	9a07      	ldr	r2, [sp, #28]
 801445c:	6826      	ldr	r6, [r4, #0]
 801445e:	4639      	mov	r1, r7
 8014460:	f7fa f878 	bl	800e554 <rmw_create_service>
 8014464:	6823      	ldr	r3, [r4, #0]
 8014466:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 801446a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801446e:	b330      	cbz	r0, 80144be <rcl_service_init+0xea>
 8014470:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8014474:	f7fa f994 	bl	800e7a0 <rmw_service_request_subscription_get_actual_qos>
 8014478:	b9f8      	cbnz	r0, 80144ba <rcl_service_init+0xe6>
 801447a:	6821      	ldr	r1, [r4, #0]
 801447c:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8014480:	31b8      	adds	r1, #184	@ 0xb8
 8014482:	f7fa f97d 	bl	800e780 <rmw_service_response_publisher_get_actual_qos>
 8014486:	4606      	mov	r6, r0
 8014488:	b9b8      	cbnz	r0, 80144ba <rcl_service_init+0xe6>
 801448a:	6820      	ldr	r0, [r4, #0]
 801448c:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8014490:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8014494:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8014498:	2268      	movs	r2, #104	@ 0x68
 801449a:	4629      	mov	r1, r5
 801449c:	f005 facb 	bl	8019a36 <memcpy>
 80144a0:	9807      	ldr	r0, [sp, #28]
 80144a2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80144a4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80144a6:	4798      	blx	r3
 80144a8:	4630      	mov	r0, r6
 80144aa:	b009      	add	sp, #36	@ 0x24
 80144ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144b0:	26c8      	movs	r6, #200	@ 0xc8
 80144b2:	4630      	mov	r0, r6
 80144b4:	b009      	add	sp, #36	@ 0x24
 80144b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144ba:	6823      	ldr	r3, [r4, #0]
 80144bc:	b12b      	cbz	r3, 80144ca <rcl_service_init+0xf6>
 80144be:	4618      	mov	r0, r3
 80144c0:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80144c2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80144c4:	4790      	blx	r2
 80144c6:	2300      	movs	r3, #0
 80144c8:	6023      	str	r3, [r4, #0]
 80144ca:	2601      	movs	r6, #1
 80144cc:	e7e8      	b.n	80144a0 <rcl_service_init+0xcc>
 80144ce:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 80144d2:	2b01      	cmp	r3, #1
 80144d4:	d903      	bls.n	80144de <rcl_service_init+0x10a>
 80144d6:	280a      	cmp	r0, #10
 80144d8:	d1f7      	bne.n	80144ca <rcl_service_init+0xf6>
 80144da:	260a      	movs	r6, #10
 80144dc:	e7e0      	b.n	80144a0 <rcl_service_init+0xcc>
 80144de:	2668      	movs	r6, #104	@ 0x68
 80144e0:	e7de      	b.n	80144a0 <rcl_service_init+0xcc>
 80144e2:	bf00      	nop

080144e4 <rcl_service_get_default_options>:
 80144e4:	b530      	push	{r4, r5, lr}
 80144e6:	4d0f      	ldr	r5, [pc, #60]	@ (8014524 <rcl_service_get_default_options+0x40>)
 80144e8:	490f      	ldr	r1, [pc, #60]	@ (8014528 <rcl_service_get_default_options+0x44>)
 80144ea:	b087      	sub	sp, #28
 80144ec:	4604      	mov	r4, r0
 80144ee:	2250      	movs	r2, #80	@ 0x50
 80144f0:	4628      	mov	r0, r5
 80144f2:	f005 faa0 	bl	8019a36 <memcpy>
 80144f6:	4668      	mov	r0, sp
 80144f8:	f7f9 fa46 	bl	800d988 <rcutils_get_default_allocator>
 80144fc:	46ec      	mov	ip, sp
 80144fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014502:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8014506:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801450a:	2268      	movs	r2, #104	@ 0x68
 801450c:	f8dc 3000 	ldr.w	r3, [ip]
 8014510:	f8ce 3000 	str.w	r3, [lr]
 8014514:	4629      	mov	r1, r5
 8014516:	4620      	mov	r0, r4
 8014518:	f005 fa8d 	bl	8019a36 <memcpy>
 801451c:	4620      	mov	r0, r4
 801451e:	b007      	add	sp, #28
 8014520:	bd30      	pop	{r4, r5, pc}
 8014522:	bf00      	nop
 8014524:	2000b8a8 	.word	0x2000b8a8
 8014528:	0801bfb0 	.word	0x0801bfb0

0801452c <rcl_service_get_rmw_handle>:
 801452c:	b118      	cbz	r0, 8014536 <rcl_service_get_rmw_handle+0xa>
 801452e:	6800      	ldr	r0, [r0, #0]
 8014530:	b108      	cbz	r0, 8014536 <rcl_service_get_rmw_handle+0xa>
 8014532:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014536:	4770      	bx	lr

08014538 <rcl_take_request>:
 8014538:	b570      	push	{r4, r5, r6, lr}
 801453a:	468e      	mov	lr, r1
 801453c:	460c      	mov	r4, r1
 801453e:	4616      	mov	r6, r2
 8014540:	4605      	mov	r5, r0
 8014542:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014546:	b08c      	sub	sp, #48	@ 0x30
 8014548:	f10d 0c18 	add.w	ip, sp, #24
 801454c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014550:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014554:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014558:	b30d      	cbz	r5, 801459e <rcl_take_request+0x66>
 801455a:	682b      	ldr	r3, [r5, #0]
 801455c:	b1fb      	cbz	r3, 801459e <rcl_take_request+0x66>
 801455e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014562:	b1e0      	cbz	r0, 801459e <rcl_take_request+0x66>
 8014564:	b336      	cbz	r6, 80145b4 <rcl_take_request+0x7c>
 8014566:	2300      	movs	r3, #0
 8014568:	f88d 3007 	strb.w	r3, [sp, #7]
 801456c:	4632      	mov	r2, r6
 801456e:	f10d 0307 	add.w	r3, sp, #7
 8014572:	a902      	add	r1, sp, #8
 8014574:	f002 ff5a 	bl	801742c <rmw_take_request>
 8014578:	4605      	mov	r5, r0
 801457a:	b198      	cbz	r0, 80145a4 <rcl_take_request+0x6c>
 801457c:	280a      	cmp	r0, #10
 801457e:	bf18      	it	ne
 8014580:	2501      	movne	r5, #1
 8014582:	f10d 0e18 	add.w	lr, sp, #24
 8014586:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801458a:	46a4      	mov	ip, r4
 801458c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014590:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014594:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014598:	4628      	mov	r0, r5
 801459a:	b00c      	add	sp, #48	@ 0x30
 801459c:	bd70      	pop	{r4, r5, r6, pc}
 801459e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80145a2:	e7ee      	b.n	8014582 <rcl_take_request+0x4a>
 80145a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80145a8:	f240 2359 	movw	r3, #601	@ 0x259
 80145ac:	2a00      	cmp	r2, #0
 80145ae:	bf08      	it	eq
 80145b0:	461d      	moveq	r5, r3
 80145b2:	e7e6      	b.n	8014582 <rcl_take_request+0x4a>
 80145b4:	250b      	movs	r5, #11
 80145b6:	e7e4      	b.n	8014582 <rcl_take_request+0x4a>

080145b8 <rcl_send_response>:
 80145b8:	b170      	cbz	r0, 80145d8 <rcl_send_response+0x20>
 80145ba:	6800      	ldr	r0, [r0, #0]
 80145bc:	b160      	cbz	r0, 80145d8 <rcl_send_response+0x20>
 80145be:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80145c2:	b148      	cbz	r0, 80145d8 <rcl_send_response+0x20>
 80145c4:	b159      	cbz	r1, 80145de <rcl_send_response+0x26>
 80145c6:	b510      	push	{r4, lr}
 80145c8:	b15a      	cbz	r2, 80145e2 <rcl_send_response+0x2a>
 80145ca:	f002 ff8d 	bl	80174e8 <rmw_send_response>
 80145ce:	b110      	cbz	r0, 80145d6 <rcl_send_response+0x1e>
 80145d0:	2802      	cmp	r0, #2
 80145d2:	bf18      	it	ne
 80145d4:	2001      	movne	r0, #1
 80145d6:	bd10      	pop	{r4, pc}
 80145d8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80145dc:	4770      	bx	lr
 80145de:	200b      	movs	r0, #11
 80145e0:	4770      	bx	lr
 80145e2:	200b      	movs	r0, #11
 80145e4:	bd10      	pop	{r4, pc}
 80145e6:	bf00      	nop

080145e8 <rcl_service_is_valid>:
 80145e8:	b130      	cbz	r0, 80145f8 <rcl_service_is_valid+0x10>
 80145ea:	6800      	ldr	r0, [r0, #0]
 80145ec:	b120      	cbz	r0, 80145f8 <rcl_service_is_valid+0x10>
 80145ee:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80145f2:	3800      	subs	r0, #0
 80145f4:	bf18      	it	ne
 80145f6:	2001      	movne	r0, #1
 80145f8:	4770      	bx	lr
 80145fa:	bf00      	nop

080145fc <rcl_take>:
 80145fc:	2800      	cmp	r0, #0
 80145fe:	d04a      	beq.n	8014696 <rcl_take+0x9a>
 8014600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014604:	4604      	mov	r4, r0
 8014606:	6800      	ldr	r0, [r0, #0]
 8014608:	b0a4      	sub	sp, #144	@ 0x90
 801460a:	2800      	cmp	r0, #0
 801460c:	d03b      	beq.n	8014686 <rcl_take+0x8a>
 801460e:	461f      	mov	r7, r3
 8014610:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8014614:	2b00      	cmp	r3, #0
 8014616:	d036      	beq.n	8014686 <rcl_take+0x8a>
 8014618:	460e      	mov	r6, r1
 801461a:	2900      	cmp	r1, #0
 801461c:	d039      	beq.n	8014692 <rcl_take+0x96>
 801461e:	4615      	mov	r5, r2
 8014620:	2a00      	cmp	r2, #0
 8014622:	d03c      	beq.n	801469e <rcl_take+0xa2>
 8014624:	a802      	add	r0, sp, #8
 8014626:	f002 fba3 	bl	8016d70 <rmw_get_zero_initialized_message_info>
 801462a:	f10d 0c08 	add.w	ip, sp, #8
 801462e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014632:	46ae      	mov	lr, r5
 8014634:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014638:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801463c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014640:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014644:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014648:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801464c:	f04f 0800 	mov.w	r8, #0
 8014650:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8014654:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8014658:	6822      	ldr	r2, [r4, #0]
 801465a:	462b      	mov	r3, r5
 801465c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8014660:	9700      	str	r7, [sp, #0]
 8014662:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8014666:	4631      	mov	r1, r6
 8014668:	f002 ffe4 	bl	8017634 <rmw_take_with_info>
 801466c:	4603      	mov	r3, r0
 801466e:	b9c0      	cbnz	r0, 80146a2 <rcl_take+0xa6>
 8014670:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8014674:	f240 1291 	movw	r2, #401	@ 0x191
 8014678:	2900      	cmp	r1, #0
 801467a:	bf08      	it	eq
 801467c:	4613      	moveq	r3, r2
 801467e:	4618      	mov	r0, r3
 8014680:	b024      	add	sp, #144	@ 0x90
 8014682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014686:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801468a:	4618      	mov	r0, r3
 801468c:	b024      	add	sp, #144	@ 0x90
 801468e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014692:	230b      	movs	r3, #11
 8014694:	e7f3      	b.n	801467e <rcl_take+0x82>
 8014696:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801469a:	4618      	mov	r0, r3
 801469c:	4770      	bx	lr
 801469e:	ad14      	add	r5, sp, #80	@ 0x50
 80146a0:	e7c0      	b.n	8014624 <rcl_take+0x28>
 80146a2:	f7ff f99f 	bl	80139e4 <rcl_convert_rmw_ret_to_rcl_ret>
 80146a6:	4603      	mov	r3, r0
 80146a8:	e7e9      	b.n	801467e <rcl_take+0x82>
 80146aa:	bf00      	nop

080146ac <rcl_subscription_get_rmw_handle>:
 80146ac:	b118      	cbz	r0, 80146b6 <rcl_subscription_get_rmw_handle+0xa>
 80146ae:	6800      	ldr	r0, [r0, #0]
 80146b0:	b108      	cbz	r0, 80146b6 <rcl_subscription_get_rmw_handle+0xa>
 80146b2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80146b6:	4770      	bx	lr

080146b8 <rcl_subscription_is_valid>:
 80146b8:	b130      	cbz	r0, 80146c8 <rcl_subscription_is_valid+0x10>
 80146ba:	6800      	ldr	r0, [r0, #0]
 80146bc:	b120      	cbz	r0, 80146c8 <rcl_subscription_is_valid+0x10>
 80146be:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80146c2:	3800      	subs	r0, #0
 80146c4:	bf18      	it	ne
 80146c6:	2001      	movne	r0, #1
 80146c8:	4770      	bx	lr
 80146ca:	bf00      	nop

080146cc <rcl_get_system_time>:
 80146cc:	4608      	mov	r0, r1
 80146ce:	f7f9 b9ab 	b.w	800da28 <rcutils_system_time_now>
 80146d2:	bf00      	nop

080146d4 <rcl_get_steady_time>:
 80146d4:	4608      	mov	r0, r1
 80146d6:	f7f9 b9cf 	b.w	800da78 <rcutils_steady_time_now>
 80146da:	bf00      	nop

080146dc <rcl_get_ros_time>:
 80146dc:	7a03      	ldrb	r3, [r0, #8]
 80146de:	b510      	push	{r4, lr}
 80146e0:	460c      	mov	r4, r1
 80146e2:	b133      	cbz	r3, 80146f2 <rcl_get_ros_time+0x16>
 80146e4:	2105      	movs	r1, #5
 80146e6:	f001 ff5f 	bl	80165a8 <__atomic_load_8>
 80146ea:	e9c4 0100 	strd	r0, r1, [r4]
 80146ee:	2000      	movs	r0, #0
 80146f0:	bd10      	pop	{r4, pc}
 80146f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146f6:	4608      	mov	r0, r1
 80146f8:	f7f9 b996 	b.w	800da28 <rcutils_system_time_now>

080146fc <rcl_clock_init>:
 80146fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146fe:	4605      	mov	r5, r0
 8014700:	4610      	mov	r0, r2
 8014702:	4614      	mov	r4, r2
 8014704:	460e      	mov	r6, r1
 8014706:	f7f9 f94d 	bl	800d9a4 <rcutils_allocator_is_valid>
 801470a:	b128      	cbz	r0, 8014718 <rcl_clock_init+0x1c>
 801470c:	2d03      	cmp	r5, #3
 801470e:	d803      	bhi.n	8014718 <rcl_clock_init+0x1c>
 8014710:	e8df f005 	tbb	[pc, r5]
 8014714:	06532e1d 	.word	0x06532e1d
 8014718:	f04f 0c0b 	mov.w	ip, #11
 801471c:	4660      	mov	r0, ip
 801471e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014720:	2e00      	cmp	r6, #0
 8014722:	d0f9      	beq.n	8014718 <rcl_clock_init+0x1c>
 8014724:	2c00      	cmp	r4, #0
 8014726:	d0f7      	beq.n	8014718 <rcl_clock_init+0x1c>
 8014728:	2300      	movs	r3, #0
 801472a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801472e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80147e4 <rcl_clock_init+0xe8>
 8014732:	6133      	str	r3, [r6, #16]
 8014734:	f106 0514 	add.w	r5, r6, #20
 8014738:	469c      	mov	ip, r3
 801473a:	2703      	movs	r7, #3
 801473c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801473e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014740:	6823      	ldr	r3, [r4, #0]
 8014742:	602b      	str	r3, [r5, #0]
 8014744:	7037      	strb	r7, [r6, #0]
 8014746:	f8c6 e00c 	str.w	lr, [r6, #12]
 801474a:	4660      	mov	r0, ip
 801474c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801474e:	2e00      	cmp	r6, #0
 8014750:	d0e2      	beq.n	8014718 <rcl_clock_init+0x1c>
 8014752:	2300      	movs	r3, #0
 8014754:	7033      	strb	r3, [r6, #0]
 8014756:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801475a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801475e:	469c      	mov	ip, r3
 8014760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014762:	f106 0514 	add.w	r5, r6, #20
 8014766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014768:	6823      	ldr	r3, [r4, #0]
 801476a:	602b      	str	r3, [r5, #0]
 801476c:	4660      	mov	r0, ip
 801476e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014770:	2e00      	cmp	r6, #0
 8014772:	d0d1      	beq.n	8014718 <rcl_clock_init+0x1c>
 8014774:	2c00      	cmp	r4, #0
 8014776:	d0cf      	beq.n	8014718 <rcl_clock_init+0x1c>
 8014778:	2700      	movs	r7, #0
 801477a:	7037      	strb	r7, [r6, #0]
 801477c:	46a4      	mov	ip, r4
 801477e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014782:	f106 0514 	add.w	r5, r6, #20
 8014786:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801478a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801478e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014790:	f8dc 3000 	ldr.w	r3, [ip]
 8014794:	602b      	str	r3, [r5, #0]
 8014796:	6921      	ldr	r1, [r4, #16]
 8014798:	6823      	ldr	r3, [r4, #0]
 801479a:	2010      	movs	r0, #16
 801479c:	4798      	blx	r3
 801479e:	6130      	str	r0, [r6, #16]
 80147a0:	b1d0      	cbz	r0, 80147d8 <rcl_clock_init+0xdc>
 80147a2:	2200      	movs	r2, #0
 80147a4:	2300      	movs	r3, #0
 80147a6:	e9c0 2300 	strd	r2, r3, [r0]
 80147aa:	2301      	movs	r3, #1
 80147ac:	7207      	strb	r7, [r0, #8]
 80147ae:	4a0c      	ldr	r2, [pc, #48]	@ (80147e0 <rcl_clock_init+0xe4>)
 80147b0:	7033      	strb	r3, [r6, #0]
 80147b2:	46bc      	mov	ip, r7
 80147b4:	60f2      	str	r2, [r6, #12]
 80147b6:	4660      	mov	r0, ip
 80147b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147ba:	2e00      	cmp	r6, #0
 80147bc:	d0ac      	beq.n	8014718 <rcl_clock_init+0x1c>
 80147be:	2c00      	cmp	r4, #0
 80147c0:	d0aa      	beq.n	8014718 <rcl_clock_init+0x1c>
 80147c2:	2300      	movs	r3, #0
 80147c4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80147c8:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80147e8 <rcl_clock_init+0xec>
 80147cc:	6133      	str	r3, [r6, #16]
 80147ce:	f106 0514 	add.w	r5, r6, #20
 80147d2:	469c      	mov	ip, r3
 80147d4:	2702      	movs	r7, #2
 80147d6:	e7b1      	b.n	801473c <rcl_clock_init+0x40>
 80147d8:	f04f 0c0a 	mov.w	ip, #10
 80147dc:	e79e      	b.n	801471c <rcl_clock_init+0x20>
 80147de:	bf00      	nop
 80147e0:	080146dd 	.word	0x080146dd
 80147e4:	080146d5 	.word	0x080146d5
 80147e8:	080146cd 	.word	0x080146cd

080147ec <rcl_clock_get_now>:
 80147ec:	b140      	cbz	r0, 8014800 <rcl_clock_get_now+0x14>
 80147ee:	b139      	cbz	r1, 8014800 <rcl_clock_get_now+0x14>
 80147f0:	7803      	ldrb	r3, [r0, #0]
 80147f2:	b11b      	cbz	r3, 80147fc <rcl_clock_get_now+0x10>
 80147f4:	68c3      	ldr	r3, [r0, #12]
 80147f6:	b10b      	cbz	r3, 80147fc <rcl_clock_get_now+0x10>
 80147f8:	6900      	ldr	r0, [r0, #16]
 80147fa:	4718      	bx	r3
 80147fc:	2001      	movs	r0, #1
 80147fe:	4770      	bx	lr
 8014800:	200b      	movs	r0, #11
 8014802:	4770      	bx	lr

08014804 <rcl_clock_add_jump_callback>:
 8014804:	b082      	sub	sp, #8
 8014806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801480a:	a906      	add	r1, sp, #24
 801480c:	e881 000c 	stmia.w	r1, {r2, r3}
 8014810:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8014814:	b320      	cbz	r0, 8014860 <rcl_clock_add_jump_callback+0x5c>
 8014816:	4604      	mov	r4, r0
 8014818:	3014      	adds	r0, #20
 801481a:	f7f9 f8c3 	bl	800d9a4 <rcutils_allocator_is_valid>
 801481e:	b1f8      	cbz	r0, 8014860 <rcl_clock_add_jump_callback+0x5c>
 8014820:	b1f6      	cbz	r6, 8014860 <rcl_clock_add_jump_callback+0x5c>
 8014822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014824:	2b00      	cmp	r3, #0
 8014826:	db1b      	blt.n	8014860 <rcl_clock_add_jump_callback+0x5c>
 8014828:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801482c:	2a01      	cmp	r2, #1
 801482e:	f173 0300 	sbcs.w	r3, r3, #0
 8014832:	da15      	bge.n	8014860 <rcl_clock_add_jump_callback+0x5c>
 8014834:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8014838:	2f00      	cmp	r7, #0
 801483a:	d042      	beq.n	80148c2 <rcl_clock_add_jump_callback+0xbe>
 801483c:	2300      	movs	r3, #0
 801483e:	4602      	mov	r2, r0
 8014840:	e003      	b.n	801484a <rcl_clock_add_jump_callback+0x46>
 8014842:	42bb      	cmp	r3, r7
 8014844:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8014848:	d011      	beq.n	801486e <rcl_clock_add_jump_callback+0x6a>
 801484a:	6811      	ldr	r1, [r2, #0]
 801484c:	42b1      	cmp	r1, r6
 801484e:	f103 0301 	add.w	r3, r3, #1
 8014852:	d1f6      	bne.n	8014842 <rcl_clock_add_jump_callback+0x3e>
 8014854:	6a11      	ldr	r1, [r2, #32]
 8014856:	42a9      	cmp	r1, r5
 8014858:	d1f3      	bne.n	8014842 <rcl_clock_add_jump_callback+0x3e>
 801485a:	f04f 0e01 	mov.w	lr, #1
 801485e:	e001      	b.n	8014864 <rcl_clock_add_jump_callback+0x60>
 8014860:	f04f 0e0b 	mov.w	lr, #11
 8014864:	4670      	mov	r0, lr
 8014866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801486a:	b002      	add	sp, #8
 801486c:	4770      	bx	lr
 801486e:	3301      	adds	r3, #1
 8014870:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014874:	00d9      	lsls	r1, r3, #3
 8014876:	69e3      	ldr	r3, [r4, #28]
 8014878:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801487a:	4798      	blx	r3
 801487c:	b1f0      	cbz	r0, 80148bc <rcl_clock_add_jump_callback+0xb8>
 801487e:	68a3      	ldr	r3, [r4, #8]
 8014880:	6060      	str	r0, [r4, #4]
 8014882:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8014886:	f10d 0c18 	add.w	ip, sp, #24
 801488a:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 801488e:	f103 0801 	add.w	r8, r3, #1
 8014892:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8014896:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801489a:	f106 0708 	add.w	r7, r6, #8
 801489e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80148a0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80148a4:	f04f 0e00 	mov.w	lr, #0
 80148a8:	e887 0003 	stmia.w	r7, {r0, r1}
 80148ac:	6235      	str	r5, [r6, #32]
 80148ae:	4670      	mov	r0, lr
 80148b0:	f8c4 8008 	str.w	r8, [r4, #8]
 80148b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148b8:	b002      	add	sp, #8
 80148ba:	4770      	bx	lr
 80148bc:	f04f 0e0a 	mov.w	lr, #10
 80148c0:	e7d0      	b.n	8014864 <rcl_clock_add_jump_callback+0x60>
 80148c2:	2128      	movs	r1, #40	@ 0x28
 80148c4:	e7d7      	b.n	8014876 <rcl_clock_add_jump_callback+0x72>
 80148c6:	bf00      	nop

080148c8 <rcl_clock_remove_jump_callback>:
 80148c8:	2800      	cmp	r0, #0
 80148ca:	d057      	beq.n	801497c <rcl_clock_remove_jump_callback+0xb4>
 80148cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148d0:	4605      	mov	r5, r0
 80148d2:	3014      	adds	r0, #20
 80148d4:	4688      	mov	r8, r1
 80148d6:	4692      	mov	sl, r2
 80148d8:	f7f9 f864 	bl	800d9a4 <rcutils_allocator_is_valid>
 80148dc:	2800      	cmp	r0, #0
 80148de:	d03b      	beq.n	8014958 <rcl_clock_remove_jump_callback+0x90>
 80148e0:	f1b8 0f00 	cmp.w	r8, #0
 80148e4:	d038      	beq.n	8014958 <rcl_clock_remove_jump_callback+0x90>
 80148e6:	68ae      	ldr	r6, [r5, #8]
 80148e8:	b166      	cbz	r6, 8014904 <rcl_clock_remove_jump_callback+0x3c>
 80148ea:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80148ee:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 80148f2:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 80148f6:	464c      	mov	r4, r9
 80148f8:	6823      	ldr	r3, [r4, #0]
 80148fa:	4543      	cmp	r3, r8
 80148fc:	d005      	beq.n	801490a <rcl_clock_remove_jump_callback+0x42>
 80148fe:	3428      	adds	r4, #40	@ 0x28
 8014900:	42a7      	cmp	r7, r4
 8014902:	d1f9      	bne.n	80148f8 <rcl_clock_remove_jump_callback+0x30>
 8014904:	2001      	movs	r0, #1
 8014906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801490a:	6a23      	ldr	r3, [r4, #32]
 801490c:	3428      	adds	r4, #40	@ 0x28
 801490e:	42bc      	cmp	r4, r7
 8014910:	d02d      	beq.n	801496e <rcl_clock_remove_jump_callback+0xa6>
 8014912:	4553      	cmp	r3, sl
 8014914:	d1f0      	bne.n	80148f8 <rcl_clock_remove_jump_callback+0x30>
 8014916:	46a6      	mov	lr, r4
 8014918:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801491c:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8014920:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014924:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014928:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801492c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014930:	3428      	adds	r4, #40	@ 0x28
 8014932:	42a7      	cmp	r7, r4
 8014934:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014938:	d1ed      	bne.n	8014916 <rcl_clock_remove_jump_callback+0x4e>
 801493a:	3e01      	subs	r6, #1
 801493c:	60ae      	str	r6, [r5, #8]
 801493e:	b176      	cbz	r6, 801495e <rcl_clock_remove_jump_callback+0x96>
 8014940:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8014944:	69eb      	ldr	r3, [r5, #28]
 8014946:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8014948:	00f1      	lsls	r1, r6, #3
 801494a:	4648      	mov	r0, r9
 801494c:	4798      	blx	r3
 801494e:	b1b8      	cbz	r0, 8014980 <rcl_clock_remove_jump_callback+0xb8>
 8014950:	6068      	str	r0, [r5, #4]
 8014952:	2000      	movs	r0, #0
 8014954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014958:	200b      	movs	r0, #11
 801495a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801495e:	4648      	mov	r0, r9
 8014960:	69ab      	ldr	r3, [r5, #24]
 8014962:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8014964:	4798      	blx	r3
 8014966:	606e      	str	r6, [r5, #4]
 8014968:	4630      	mov	r0, r6
 801496a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801496e:	4553      	cmp	r3, sl
 8014970:	d1c8      	bne.n	8014904 <rcl_clock_remove_jump_callback+0x3c>
 8014972:	3e01      	subs	r6, #1
 8014974:	60ae      	str	r6, [r5, #8]
 8014976:	2e00      	cmp	r6, #0
 8014978:	d1e2      	bne.n	8014940 <rcl_clock_remove_jump_callback+0x78>
 801497a:	e7f0      	b.n	801495e <rcl_clock_remove_jump_callback+0x96>
 801497c:	200b      	movs	r0, #11
 801497e:	4770      	bx	lr
 8014980:	200a      	movs	r0, #10
 8014982:	e7ea      	b.n	801495a <rcl_clock_remove_jump_callback+0x92>

08014984 <_rcl_timer_time_jump>:
 8014984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014988:	4605      	mov	r5, r0
 801498a:	b084      	sub	sp, #16
 801498c:	4614      	mov	r4, r2
 801498e:	b131      	cbz	r1, 801499e <_rcl_timer_time_jump+0x1a>
 8014990:	7803      	ldrb	r3, [r0, #0]
 8014992:	3b02      	subs	r3, #2
 8014994:	2b01      	cmp	r3, #1
 8014996:	d93f      	bls.n	8014a18 <_rcl_timer_time_jump+0x94>
 8014998:	b004      	add	sp, #16
 801499a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801499e:	6813      	ldr	r3, [r2, #0]
 80149a0:	a902      	add	r1, sp, #8
 80149a2:	6818      	ldr	r0, [r3, #0]
 80149a4:	f7ff ff22 	bl	80147ec <rcl_clock_get_now>
 80149a8:	2800      	cmp	r0, #0
 80149aa:	d1f5      	bne.n	8014998 <_rcl_timer_time_jump+0x14>
 80149ac:	6820      	ldr	r0, [r4, #0]
 80149ae:	2105      	movs	r1, #5
 80149b0:	3020      	adds	r0, #32
 80149b2:	f001 fdf9 	bl	80165a8 <__atomic_load_8>
 80149b6:	6823      	ldr	r3, [r4, #0]
 80149b8:	4681      	mov	r9, r0
 80149ba:	4688      	mov	r8, r1
 80149bc:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80149c0:	2105      	movs	r1, #5
 80149c2:	f001 fdf1 	bl	80165a8 <__atomic_load_8>
 80149c6:	4607      	mov	r7, r0
 80149c8:	6820      	ldr	r0, [r4, #0]
 80149ca:	460e      	mov	r6, r1
 80149cc:	3018      	adds	r0, #24
 80149ce:	2105      	movs	r1, #5
 80149d0:	f001 fdea 	bl	80165a8 <__atomic_load_8>
 80149d4:	782b      	ldrb	r3, [r5, #0]
 80149d6:	9a02      	ldr	r2, [sp, #8]
 80149d8:	3b02      	subs	r3, #2
 80149da:	2b01      	cmp	r3, #1
 80149dc:	460d      	mov	r5, r1
 80149de:	9b03      	ldr	r3, [sp, #12]
 80149e0:	4682      	mov	sl, r0
 80149e2:	d937      	bls.n	8014a54 <_rcl_timer_time_jump+0xd0>
 80149e4:	42ba      	cmp	r2, r7
 80149e6:	eb73 0106 	sbcs.w	r1, r3, r6
 80149ea:	da5f      	bge.n	8014aac <_rcl_timer_time_jump+0x128>
 80149ec:	454a      	cmp	r2, r9
 80149ee:	eb73 0108 	sbcs.w	r1, r3, r8
 80149f2:	dad1      	bge.n	8014998 <_rcl_timer_time_jump+0x14>
 80149f4:	6820      	ldr	r0, [r4, #0]
 80149f6:	eb1a 0202 	adds.w	r2, sl, r2
 80149fa:	eb43 0305 	adc.w	r3, r3, r5
 80149fe:	2505      	movs	r5, #5
 8014a00:	3028      	adds	r0, #40	@ 0x28
 8014a02:	9500      	str	r5, [sp, #0]
 8014a04:	f001 fe06 	bl	8016614 <__atomic_store_8>
 8014a08:	6820      	ldr	r0, [r4, #0]
 8014a0a:	9500      	str	r5, [sp, #0]
 8014a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a10:	3020      	adds	r0, #32
 8014a12:	f001 fdff 	bl	8016614 <__atomic_store_8>
 8014a16:	e7bf      	b.n	8014998 <_rcl_timer_time_jump+0x14>
 8014a18:	6813      	ldr	r3, [r2, #0]
 8014a1a:	a902      	add	r1, sp, #8
 8014a1c:	6818      	ldr	r0, [r3, #0]
 8014a1e:	f7ff fee5 	bl	80147ec <rcl_clock_get_now>
 8014a22:	2800      	cmp	r0, #0
 8014a24:	d1b8      	bne.n	8014998 <_rcl_timer_time_jump+0x14>
 8014a26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a2a:	4313      	orrs	r3, r2
 8014a2c:	d0b4      	beq.n	8014998 <_rcl_timer_time_jump+0x14>
 8014a2e:	6820      	ldr	r0, [r4, #0]
 8014a30:	2105      	movs	r1, #5
 8014a32:	3028      	adds	r0, #40	@ 0x28
 8014a34:	f001 fdb8 	bl	80165a8 <__atomic_load_8>
 8014a38:	9d02      	ldr	r5, [sp, #8]
 8014a3a:	9b03      	ldr	r3, [sp, #12]
 8014a3c:	4602      	mov	r2, r0
 8014a3e:	6820      	ldr	r0, [r4, #0]
 8014a40:	1b52      	subs	r2, r2, r5
 8014a42:	f04f 0405 	mov.w	r4, #5
 8014a46:	9400      	str	r4, [sp, #0]
 8014a48:	eb61 0303 	sbc.w	r3, r1, r3
 8014a4c:	3030      	adds	r0, #48	@ 0x30
 8014a4e:	f001 fde1 	bl	8016614 <__atomic_store_8>
 8014a52:	e7a1      	b.n	8014998 <_rcl_timer_time_jump+0x14>
 8014a54:	4313      	orrs	r3, r2
 8014a56:	d09f      	beq.n	8014998 <_rcl_timer_time_jump+0x14>
 8014a58:	6820      	ldr	r0, [r4, #0]
 8014a5a:	f04f 0805 	mov.w	r8, #5
 8014a5e:	2300      	movs	r3, #0
 8014a60:	f8cd 8000 	str.w	r8, [sp]
 8014a64:	3030      	adds	r0, #48	@ 0x30
 8014a66:	2200      	movs	r2, #0
 8014a68:	f001 fe0a 	bl	8016680 <__atomic_exchange_8>
 8014a6c:	ea51 0300 	orrs.w	r3, r1, r0
 8014a70:	4606      	mov	r6, r0
 8014a72:	460f      	mov	r7, r1
 8014a74:	d090      	beq.n	8014998 <_rcl_timer_time_jump+0x14>
 8014a76:	9a02      	ldr	r2, [sp, #8]
 8014a78:	9b03      	ldr	r3, [sp, #12]
 8014a7a:	f8cd 8000 	str.w	r8, [sp]
 8014a7e:	1a12      	subs	r2, r2, r0
 8014a80:	6820      	ldr	r0, [r4, #0]
 8014a82:	eb63 0301 	sbc.w	r3, r3, r1
 8014a86:	eb12 020a 	adds.w	r2, r2, sl
 8014a8a:	eb43 0305 	adc.w	r3, r3, r5
 8014a8e:	3028      	adds	r0, #40	@ 0x28
 8014a90:	f001 fdc0 	bl	8016614 <__atomic_store_8>
 8014a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a98:	f8cd 8000 	str.w	r8, [sp]
 8014a9c:	6820      	ldr	r0, [r4, #0]
 8014a9e:	1b92      	subs	r2, r2, r6
 8014aa0:	eb63 0307 	sbc.w	r3, r3, r7
 8014aa4:	3020      	adds	r0, #32
 8014aa6:	f001 fdb5 	bl	8016614 <__atomic_store_8>
 8014aaa:	e775      	b.n	8014998 <_rcl_timer_time_jump+0x14>
 8014aac:	6820      	ldr	r0, [r4, #0]
 8014aae:	3008      	adds	r0, #8
 8014ab0:	f004 f890 	bl	8018bd4 <rcl_trigger_guard_condition>
 8014ab4:	e770      	b.n	8014998 <_rcl_timer_time_jump+0x14>
 8014ab6:	bf00      	nop

08014ab8 <rcl_get_zero_initialized_timer>:
 8014ab8:	4b01      	ldr	r3, [pc, #4]	@ (8014ac0 <rcl_get_zero_initialized_timer+0x8>)
 8014aba:	6818      	ldr	r0, [r3, #0]
 8014abc:	4770      	bx	lr
 8014abe:	bf00      	nop
 8014ac0:	0801c000 	.word	0x0801c000
 8014ac4:	00000000 	.word	0x00000000

08014ac8 <rcl_timer_init>:
 8014ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014acc:	b0aa      	sub	sp, #168	@ 0xa8
 8014ace:	4604      	mov	r4, r0
 8014ad0:	a835      	add	r0, sp, #212	@ 0xd4
 8014ad2:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8014ad6:	460d      	mov	r5, r1
 8014ad8:	4692      	mov	sl, r2
 8014ada:	f7f8 ff63 	bl	800d9a4 <rcutils_allocator_is_valid>
 8014ade:	2800      	cmp	r0, #0
 8014ae0:	d064      	beq.n	8014bac <rcl_timer_init+0xe4>
 8014ae2:	2c00      	cmp	r4, #0
 8014ae4:	d062      	beq.n	8014bac <rcl_timer_init+0xe4>
 8014ae6:	2d00      	cmp	r5, #0
 8014ae8:	d060      	beq.n	8014bac <rcl_timer_init+0xe4>
 8014aea:	2f00      	cmp	r7, #0
 8014aec:	db5e      	blt.n	8014bac <rcl_timer_init+0xe4>
 8014aee:	6823      	ldr	r3, [r4, #0]
 8014af0:	b123      	cbz	r3, 8014afc <rcl_timer_init+0x34>
 8014af2:	2664      	movs	r6, #100	@ 0x64
 8014af4:	4630      	mov	r0, r6
 8014af6:	b02a      	add	sp, #168	@ 0xa8
 8014af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014afc:	a908      	add	r1, sp, #32
 8014afe:	4628      	mov	r0, r5
 8014b00:	f7ff fe74 	bl	80147ec <rcl_clock_get_now>
 8014b04:	4606      	mov	r6, r0
 8014b06:	2800      	cmp	r0, #0
 8014b08:	d1f4      	bne.n	8014af4 <rcl_timer_init+0x2c>
 8014b0a:	ae06      	add	r6, sp, #24
 8014b0c:	4630      	mov	r0, r6
 8014b0e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8014b12:	f003 ff67 	bl	80189e4 <rcl_get_zero_initialized_guard_condition>
 8014b16:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014b1a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8014b1e:	ae0b      	add	r6, sp, #44	@ 0x2c
 8014b20:	e889 0003 	stmia.w	r9, {r0, r1}
 8014b24:	4630      	mov	r0, r6
 8014b26:	f004 f839 	bl	8018b9c <rcl_guard_condition_get_default_options>
 8014b2a:	ab0d      	add	r3, sp, #52	@ 0x34
 8014b2c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014b30:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014b34:	4651      	mov	r1, sl
 8014b36:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014b3a:	4648      	mov	r0, r9
 8014b3c:	f003 ff5c 	bl	80189f8 <rcl_guard_condition_init>
 8014b40:	4606      	mov	r6, r0
 8014b42:	2800      	cmp	r0, #0
 8014b44:	d1d6      	bne.n	8014af4 <rcl_timer_init+0x2c>
 8014b46:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014b48:	781b      	ldrb	r3, [r3, #0]
 8014b4a:	2b01      	cmp	r3, #1
 8014b4c:	d033      	beq.n	8014bb6 <rcl_timer_init+0xee>
 8014b4e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8014b50:	911a      	str	r1, [sp, #104]	@ 0x68
 8014b52:	4642      	mov	r2, r8
 8014b54:	463b      	mov	r3, r7
 8014b56:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8014b5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014b5e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8014c10 <rcl_timer_init+0x148>
 8014b62:	eb12 0008 	adds.w	r0, r2, r8
 8014b66:	eb47 0103 	adc.w	r1, r7, r3
 8014b6a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8014b6e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8014b72:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8014b76:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8014b7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014b7e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8014b82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b86:	f8de 3000 	ldr.w	r3, [lr]
 8014b8a:	f8cc 3000 	str.w	r3, [ip]
 8014b8e:	f04f 0a00 	mov.w	sl, #0
 8014b92:	4619      	mov	r1, r3
 8014b94:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8014b98:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8014b9a:	2050      	movs	r0, #80	@ 0x50
 8014b9c:	4798      	blx	r3
 8014b9e:	6020      	str	r0, [r4, #0]
 8014ba0:	b358      	cbz	r0, 8014bfa <rcl_timer_init+0x132>
 8014ba2:	2250      	movs	r2, #80	@ 0x50
 8014ba4:	a916      	add	r1, sp, #88	@ 0x58
 8014ba6:	f004 ff46 	bl	8019a36 <memcpy>
 8014baa:	e7a3      	b.n	8014af4 <rcl_timer_init+0x2c>
 8014bac:	260b      	movs	r6, #11
 8014bae:	4630      	mov	r0, r6
 8014bb0:	b02a      	add	sp, #168	@ 0xa8
 8014bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bb6:	2001      	movs	r0, #1
 8014bb8:	2100      	movs	r1, #0
 8014bba:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8014bbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014bc2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8014bc6:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8014bca:	4a13      	ldr	r2, [pc, #76]	@ (8014c18 <rcl_timer_init+0x150>)
 8014bcc:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8014bd0:	9405      	str	r4, [sp, #20]
 8014bd2:	9204      	str	r2, [sp, #16]
 8014bd4:	ab12      	add	r3, sp, #72	@ 0x48
 8014bd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014bd8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014bdc:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014be0:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8014be4:	4628      	mov	r0, r5
 8014be6:	f7ff fe0d 	bl	8014804 <rcl_clock_add_jump_callback>
 8014bea:	4682      	mov	sl, r0
 8014bec:	2800      	cmp	r0, #0
 8014bee:	d0ae      	beq.n	8014b4e <rcl_timer_init+0x86>
 8014bf0:	4648      	mov	r0, r9
 8014bf2:	f003 ffad 	bl	8018b50 <rcl_guard_condition_fini>
 8014bf6:	4656      	mov	r6, sl
 8014bf8:	e77c      	b.n	8014af4 <rcl_timer_init+0x2c>
 8014bfa:	4648      	mov	r0, r9
 8014bfc:	f003 ffa8 	bl	8018b50 <rcl_guard_condition_fini>
 8014c00:	4905      	ldr	r1, [pc, #20]	@ (8014c18 <rcl_timer_init+0x150>)
 8014c02:	4622      	mov	r2, r4
 8014c04:	4628      	mov	r0, r5
 8014c06:	f7ff fe5f 	bl	80148c8 <rcl_clock_remove_jump_callback>
 8014c0a:	260a      	movs	r6, #10
 8014c0c:	e772      	b.n	8014af4 <rcl_timer_init+0x2c>
 8014c0e:	bf00      	nop
	...
 8014c18:	08014985 	.word	0x08014985

08014c1c <rcl_timer_call>:
 8014c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c20:	b087      	sub	sp, #28
 8014c22:	2800      	cmp	r0, #0
 8014c24:	d06d      	beq.n	8014d02 <rcl_timer_call+0xe6>
 8014c26:	6803      	ldr	r3, [r0, #0]
 8014c28:	4604      	mov	r4, r0
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d063      	beq.n	8014cf6 <rcl_timer_call+0xda>
 8014c2e:	f3bf 8f5b 	dmb	ish
 8014c32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014c36:	f3bf 8f5b 	dmb	ish
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d150      	bne.n	8014ce0 <rcl_timer_call+0xc4>
 8014c3e:	6803      	ldr	r3, [r0, #0]
 8014c40:	a904      	add	r1, sp, #16
 8014c42:	6818      	ldr	r0, [r3, #0]
 8014c44:	f7ff fdd2 	bl	80147ec <rcl_clock_get_now>
 8014c48:	4605      	mov	r5, r0
 8014c4a:	2800      	cmp	r0, #0
 8014c4c:	d14a      	bne.n	8014ce4 <rcl_timer_call+0xc8>
 8014c4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	db4a      	blt.n	8014cec <rcl_timer_call+0xd0>
 8014c56:	6820      	ldr	r0, [r4, #0]
 8014c58:	f04f 0a05 	mov.w	sl, #5
 8014c5c:	f8cd a000 	str.w	sl, [sp]
 8014c60:	3020      	adds	r0, #32
 8014c62:	f001 fd0d 	bl	8016680 <__atomic_exchange_8>
 8014c66:	6823      	ldr	r3, [r4, #0]
 8014c68:	f3bf 8f5b 	dmb	ish
 8014c6c:	4680      	mov	r8, r0
 8014c6e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8014c72:	f3bf 8f5b 	dmb	ish
 8014c76:	6820      	ldr	r0, [r4, #0]
 8014c78:	4689      	mov	r9, r1
 8014c7a:	3028      	adds	r0, #40	@ 0x28
 8014c7c:	4651      	mov	r1, sl
 8014c7e:	f001 fc93 	bl	80165a8 <__atomic_load_8>
 8014c82:	4606      	mov	r6, r0
 8014c84:	6820      	ldr	r0, [r4, #0]
 8014c86:	460f      	mov	r7, r1
 8014c88:	3018      	adds	r0, #24
 8014c8a:	4651      	mov	r1, sl
 8014c8c:	f001 fc8c 	bl	80165a8 <__atomic_load_8>
 8014c90:	1836      	adds	r6, r6, r0
 8014c92:	4602      	mov	r2, r0
 8014c94:	4682      	mov	sl, r0
 8014c96:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8014c9a:	eb47 0701 	adc.w	r7, r7, r1
 8014c9e:	4286      	cmp	r6, r0
 8014ca0:	460b      	mov	r3, r1
 8014ca2:	eb77 010c 	sbcs.w	r1, r7, ip
 8014ca6:	da04      	bge.n	8014cb2 <rcl_timer_call+0x96>
 8014ca8:	ea53 0102 	orrs.w	r1, r3, r2
 8014cac:	d12e      	bne.n	8014d0c <rcl_timer_call+0xf0>
 8014cae:	4606      	mov	r6, r0
 8014cb0:	4667      	mov	r7, ip
 8014cb2:	6820      	ldr	r0, [r4, #0]
 8014cb4:	2105      	movs	r1, #5
 8014cb6:	4632      	mov	r2, r6
 8014cb8:	463b      	mov	r3, r7
 8014cba:	3028      	adds	r0, #40	@ 0x28
 8014cbc:	9100      	str	r1, [sp, #0]
 8014cbe:	f001 fca9 	bl	8016614 <__atomic_store_8>
 8014cc2:	f1bb 0f00 	cmp.w	fp, #0
 8014cc6:	d00d      	beq.n	8014ce4 <rcl_timer_call+0xc8>
 8014cc8:	9a04      	ldr	r2, [sp, #16]
 8014cca:	9b05      	ldr	r3, [sp, #20]
 8014ccc:	ebb2 0208 	subs.w	r2, r2, r8
 8014cd0:	4620      	mov	r0, r4
 8014cd2:	eb63 0309 	sbc.w	r3, r3, r9
 8014cd6:	47d8      	blx	fp
 8014cd8:	4628      	mov	r0, r5
 8014cda:	b007      	add	sp, #28
 8014cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ce0:	f240 3521 	movw	r5, #801	@ 0x321
 8014ce4:	4628      	mov	r0, r5
 8014ce6:	b007      	add	sp, #28
 8014ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cec:	2501      	movs	r5, #1
 8014cee:	4628      	mov	r0, r5
 8014cf0:	b007      	add	sp, #28
 8014cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cf6:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8014cfa:	4628      	mov	r0, r5
 8014cfc:	b007      	add	sp, #28
 8014cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d02:	250b      	movs	r5, #11
 8014d04:	4628      	mov	r0, r5
 8014d06:	b007      	add	sp, #28
 8014d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d0c:	1b80      	subs	r0, r0, r6
 8014d0e:	eb6c 0107 	sbc.w	r1, ip, r7
 8014d12:	3801      	subs	r0, #1
 8014d14:	f161 0100 	sbc.w	r1, r1, #0
 8014d18:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014d1c:	f7eb ff54 	bl	8000bc8 <__aeabi_ldivmod>
 8014d20:	9b02      	ldr	r3, [sp, #8]
 8014d22:	3001      	adds	r0, #1
 8014d24:	f141 0100 	adc.w	r1, r1, #0
 8014d28:	fb00 f303 	mul.w	r3, r0, r3
 8014d2c:	fb01 330a 	mla	r3, r1, sl, r3
 8014d30:	fba0 0a0a 	umull	r0, sl, r0, sl
 8014d34:	1986      	adds	r6, r0, r6
 8014d36:	4453      	add	r3, sl
 8014d38:	eb43 0707 	adc.w	r7, r3, r7
 8014d3c:	e7b9      	b.n	8014cb2 <rcl_timer_call+0x96>
 8014d3e:	bf00      	nop

08014d40 <rcl_timer_is_ready>:
 8014d40:	b570      	push	{r4, r5, r6, lr}
 8014d42:	b082      	sub	sp, #8
 8014d44:	b378      	cbz	r0, 8014da6 <rcl_timer_is_ready+0x66>
 8014d46:	6803      	ldr	r3, [r0, #0]
 8014d48:	4604      	mov	r4, r0
 8014d4a:	b383      	cbz	r3, 8014dae <rcl_timer_is_ready+0x6e>
 8014d4c:	460d      	mov	r5, r1
 8014d4e:	b351      	cbz	r1, 8014da6 <rcl_timer_is_ready+0x66>
 8014d50:	f3bf 8f5b 	dmb	ish
 8014d54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014d58:	f3bf 8f5b 	dmb	ish
 8014d5c:	b953      	cbnz	r3, 8014d74 <rcl_timer_is_ready+0x34>
 8014d5e:	6803      	ldr	r3, [r0, #0]
 8014d60:	4669      	mov	r1, sp
 8014d62:	6818      	ldr	r0, [r3, #0]
 8014d64:	f7ff fd42 	bl	80147ec <rcl_clock_get_now>
 8014d68:	4606      	mov	r6, r0
 8014d6a:	b140      	cbz	r0, 8014d7e <rcl_timer_is_ready+0x3e>
 8014d6c:	f240 3321 	movw	r3, #801	@ 0x321
 8014d70:	4298      	cmp	r0, r3
 8014d72:	d101      	bne.n	8014d78 <rcl_timer_is_ready+0x38>
 8014d74:	2600      	movs	r6, #0
 8014d76:	702e      	strb	r6, [r5, #0]
 8014d78:	4630      	mov	r0, r6
 8014d7a:	b002      	add	sp, #8
 8014d7c:	bd70      	pop	{r4, r5, r6, pc}
 8014d7e:	6820      	ldr	r0, [r4, #0]
 8014d80:	2105      	movs	r1, #5
 8014d82:	3028      	adds	r0, #40	@ 0x28
 8014d84:	f001 fc10 	bl	80165a8 <__atomic_load_8>
 8014d88:	9b00      	ldr	r3, [sp, #0]
 8014d8a:	1ac0      	subs	r0, r0, r3
 8014d8c:	9b01      	ldr	r3, [sp, #4]
 8014d8e:	eb61 0103 	sbc.w	r1, r1, r3
 8014d92:	2801      	cmp	r0, #1
 8014d94:	f171 0300 	sbcs.w	r3, r1, #0
 8014d98:	bfb4      	ite	lt
 8014d9a:	2301      	movlt	r3, #1
 8014d9c:	2300      	movge	r3, #0
 8014d9e:	4630      	mov	r0, r6
 8014da0:	702b      	strb	r3, [r5, #0]
 8014da2:	b002      	add	sp, #8
 8014da4:	bd70      	pop	{r4, r5, r6, pc}
 8014da6:	260b      	movs	r6, #11
 8014da8:	4630      	mov	r0, r6
 8014daa:	b002      	add	sp, #8
 8014dac:	bd70      	pop	{r4, r5, r6, pc}
 8014dae:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8014db2:	e7e1      	b.n	8014d78 <rcl_timer_is_ready+0x38>

08014db4 <rcl_timer_get_time_until_next_call>:
 8014db4:	b570      	push	{r4, r5, r6, lr}
 8014db6:	b082      	sub	sp, #8
 8014db8:	b330      	cbz	r0, 8014e08 <rcl_timer_get_time_until_next_call+0x54>
 8014dba:	6803      	ldr	r3, [r0, #0]
 8014dbc:	4604      	mov	r4, r0
 8014dbe:	b33b      	cbz	r3, 8014e10 <rcl_timer_get_time_until_next_call+0x5c>
 8014dc0:	460d      	mov	r5, r1
 8014dc2:	b309      	cbz	r1, 8014e08 <rcl_timer_get_time_until_next_call+0x54>
 8014dc4:	f3bf 8f5b 	dmb	ish
 8014dc8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014dcc:	f3bf 8f5b 	dmb	ish
 8014dd0:	b9ab      	cbnz	r3, 8014dfe <rcl_timer_get_time_until_next_call+0x4a>
 8014dd2:	6803      	ldr	r3, [r0, #0]
 8014dd4:	4669      	mov	r1, sp
 8014dd6:	6818      	ldr	r0, [r3, #0]
 8014dd8:	f7ff fd08 	bl	80147ec <rcl_clock_get_now>
 8014ddc:	4606      	mov	r6, r0
 8014dde:	b958      	cbnz	r0, 8014df8 <rcl_timer_get_time_until_next_call+0x44>
 8014de0:	6820      	ldr	r0, [r4, #0]
 8014de2:	2105      	movs	r1, #5
 8014de4:	3028      	adds	r0, #40	@ 0x28
 8014de6:	f001 fbdf 	bl	80165a8 <__atomic_load_8>
 8014dea:	9b00      	ldr	r3, [sp, #0]
 8014dec:	1ac0      	subs	r0, r0, r3
 8014dee:	9b01      	ldr	r3, [sp, #4]
 8014df0:	6028      	str	r0, [r5, #0]
 8014df2:	eb61 0103 	sbc.w	r1, r1, r3
 8014df6:	6069      	str	r1, [r5, #4]
 8014df8:	4630      	mov	r0, r6
 8014dfa:	b002      	add	sp, #8
 8014dfc:	bd70      	pop	{r4, r5, r6, pc}
 8014dfe:	f240 3621 	movw	r6, #801	@ 0x321
 8014e02:	4630      	mov	r0, r6
 8014e04:	b002      	add	sp, #8
 8014e06:	bd70      	pop	{r4, r5, r6, pc}
 8014e08:	260b      	movs	r6, #11
 8014e0a:	4630      	mov	r0, r6
 8014e0c:	b002      	add	sp, #8
 8014e0e:	bd70      	pop	{r4, r5, r6, pc}
 8014e10:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8014e14:	e7f0      	b.n	8014df8 <rcl_timer_get_time_until_next_call+0x44>
 8014e16:	bf00      	nop

08014e18 <rcl_timer_get_guard_condition>:
 8014e18:	b130      	cbz	r0, 8014e28 <rcl_timer_get_guard_condition+0x10>
 8014e1a:	6800      	ldr	r0, [r0, #0]
 8014e1c:	b120      	cbz	r0, 8014e28 <rcl_timer_get_guard_condition+0x10>
 8014e1e:	68c3      	ldr	r3, [r0, #12]
 8014e20:	b10b      	cbz	r3, 8014e26 <rcl_timer_get_guard_condition+0xe>
 8014e22:	3008      	adds	r0, #8
 8014e24:	4770      	bx	lr
 8014e26:	4618      	mov	r0, r3
 8014e28:	4770      	bx	lr
 8014e2a:	bf00      	nop

08014e2c <rcl_validate_enclave_name_with_size>:
 8014e2c:	b378      	cbz	r0, 8014e8e <rcl_validate_enclave_name_with_size+0x62>
 8014e2e:	b570      	push	{r4, r5, r6, lr}
 8014e30:	4615      	mov	r5, r2
 8014e32:	b0c2      	sub	sp, #264	@ 0x108
 8014e34:	b302      	cbz	r2, 8014e78 <rcl_validate_enclave_name_with_size+0x4c>
 8014e36:	461e      	mov	r6, r3
 8014e38:	466a      	mov	r2, sp
 8014e3a:	ab01      	add	r3, sp, #4
 8014e3c:	460c      	mov	r4, r1
 8014e3e:	f002 f815 	bl	8016e6c <rmw_validate_namespace_with_size>
 8014e42:	4684      	mov	ip, r0
 8014e44:	b9e8      	cbnz	r0, 8014e82 <rcl_validate_enclave_name_with_size+0x56>
 8014e46:	9b00      	ldr	r3, [sp, #0]
 8014e48:	b923      	cbnz	r3, 8014e54 <rcl_validate_enclave_name_with_size+0x28>
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	602b      	str	r3, [r5, #0]
 8014e4e:	4660      	mov	r0, ip
 8014e50:	b042      	add	sp, #264	@ 0x108
 8014e52:	bd70      	pop	{r4, r5, r6, pc}
 8014e54:	2b07      	cmp	r3, #7
 8014e56:	d007      	beq.n	8014e68 <rcl_validate_enclave_name_with_size+0x3c>
 8014e58:	1e5a      	subs	r2, r3, #1
 8014e5a:	2a05      	cmp	r2, #5
 8014e5c:	d833      	bhi.n	8014ec6 <rcl_validate_enclave_name_with_size+0x9a>
 8014e5e:	e8df f002 	tbb	[pc, r2]
 8014e62:	2c2f      	.short	0x2c2f
 8014e64:	1a232629 	.word	0x1a232629
 8014e68:	2cff      	cmp	r4, #255	@ 0xff
 8014e6a:	d9ee      	bls.n	8014e4a <rcl_validate_enclave_name_with_size+0x1e>
 8014e6c:	602b      	str	r3, [r5, #0]
 8014e6e:	2e00      	cmp	r6, #0
 8014e70:	d0ed      	beq.n	8014e4e <rcl_validate_enclave_name_with_size+0x22>
 8014e72:	23fe      	movs	r3, #254	@ 0xfe
 8014e74:	6033      	str	r3, [r6, #0]
 8014e76:	e7ea      	b.n	8014e4e <rcl_validate_enclave_name_with_size+0x22>
 8014e78:	f04f 0c0b 	mov.w	ip, #11
 8014e7c:	4660      	mov	r0, ip
 8014e7e:	b042      	add	sp, #264	@ 0x108
 8014e80:	bd70      	pop	{r4, r5, r6, pc}
 8014e82:	f7fe fdaf 	bl	80139e4 <rcl_convert_rmw_ret_to_rcl_ret>
 8014e86:	4684      	mov	ip, r0
 8014e88:	4660      	mov	r0, ip
 8014e8a:	b042      	add	sp, #264	@ 0x108
 8014e8c:	bd70      	pop	{r4, r5, r6, pc}
 8014e8e:	f04f 0c0b 	mov.w	ip, #11
 8014e92:	4660      	mov	r0, ip
 8014e94:	4770      	bx	lr
 8014e96:	2306      	movs	r3, #6
 8014e98:	602b      	str	r3, [r5, #0]
 8014e9a:	2e00      	cmp	r6, #0
 8014e9c:	d0d7      	beq.n	8014e4e <rcl_validate_enclave_name_with_size+0x22>
 8014e9e:	9b01      	ldr	r3, [sp, #4]
 8014ea0:	6033      	str	r3, [r6, #0]
 8014ea2:	4660      	mov	r0, ip
 8014ea4:	b042      	add	sp, #264	@ 0x108
 8014ea6:	bd70      	pop	{r4, r5, r6, pc}
 8014ea8:	2305      	movs	r3, #5
 8014eaa:	602b      	str	r3, [r5, #0]
 8014eac:	e7f5      	b.n	8014e9a <rcl_validate_enclave_name_with_size+0x6e>
 8014eae:	2304      	movs	r3, #4
 8014eb0:	602b      	str	r3, [r5, #0]
 8014eb2:	e7f2      	b.n	8014e9a <rcl_validate_enclave_name_with_size+0x6e>
 8014eb4:	2303      	movs	r3, #3
 8014eb6:	602b      	str	r3, [r5, #0]
 8014eb8:	e7ef      	b.n	8014e9a <rcl_validate_enclave_name_with_size+0x6e>
 8014eba:	2302      	movs	r3, #2
 8014ebc:	602b      	str	r3, [r5, #0]
 8014ebe:	e7ec      	b.n	8014e9a <rcl_validate_enclave_name_with_size+0x6e>
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	602b      	str	r3, [r5, #0]
 8014ec4:	e7e9      	b.n	8014e9a <rcl_validate_enclave_name_with_size+0x6e>
 8014ec6:	4a04      	ldr	r2, [pc, #16]	@ (8014ed8 <rcl_validate_enclave_name_with_size+0xac>)
 8014ec8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014ecc:	a802      	add	r0, sp, #8
 8014ece:	f001 fd25 	bl	801691c <rcutils_snprintf>
 8014ed2:	f04f 0c01 	mov.w	ip, #1
 8014ed6:	e7ba      	b.n	8014e4e <rcl_validate_enclave_name_with_size+0x22>
 8014ed8:	0801c004 	.word	0x0801c004

08014edc <rcl_validate_enclave_name>:
 8014edc:	b168      	cbz	r0, 8014efa <rcl_validate_enclave_name+0x1e>
 8014ede:	b570      	push	{r4, r5, r6, lr}
 8014ee0:	460d      	mov	r5, r1
 8014ee2:	4616      	mov	r6, r2
 8014ee4:	4604      	mov	r4, r0
 8014ee6:	f7eb f9a5 	bl	8000234 <strlen>
 8014eea:	4633      	mov	r3, r6
 8014eec:	4601      	mov	r1, r0
 8014eee:	462a      	mov	r2, r5
 8014ef0:	4620      	mov	r0, r4
 8014ef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ef6:	f7ff bf99 	b.w	8014e2c <rcl_validate_enclave_name_with_size>
 8014efa:	200b      	movs	r0, #11
 8014efc:	4770      	bx	lr
 8014efe:	bf00      	nop

08014f00 <rcl_get_zero_initialized_wait_set>:
 8014f00:	b510      	push	{r4, lr}
 8014f02:	4c08      	ldr	r4, [pc, #32]	@ (8014f24 <rcl_get_zero_initialized_wait_set+0x24>)
 8014f04:	4686      	mov	lr, r0
 8014f06:	4684      	mov	ip, r0
 8014f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f1a:	6823      	ldr	r3, [r4, #0]
 8014f1c:	f8cc 3000 	str.w	r3, [ip]
 8014f20:	4670      	mov	r0, lr
 8014f22:	bd10      	pop	{r4, pc}
 8014f24:	0801c064 	.word	0x0801c064

08014f28 <rcl_wait_set_is_valid>:
 8014f28:	b118      	cbz	r0, 8014f32 <rcl_wait_set_is_valid+0xa>
 8014f2a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014f2c:	3800      	subs	r0, #0
 8014f2e:	bf18      	it	ne
 8014f30:	2001      	movne	r0, #1
 8014f32:	4770      	bx	lr

08014f34 <rcl_wait_set_fini>:
 8014f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f38:	b082      	sub	sp, #8
 8014f3a:	2800      	cmp	r0, #0
 8014f3c:	f000 8095 	beq.w	801506a <rcl_wait_set_fini+0x136>
 8014f40:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014f42:	4604      	mov	r4, r0
 8014f44:	2e00      	cmp	r6, #0
 8014f46:	f000 808c 	beq.w	8015062 <rcl_wait_set_fini+0x12e>
 8014f4a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8014f4c:	f002 fd48 	bl	80179e0 <rmw_destroy_wait_set>
 8014f50:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014f52:	1e06      	subs	r6, r0, #0
 8014f54:	bf18      	it	ne
 8014f56:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8014f5a:	2d00      	cmp	r5, #0
 8014f5c:	f000 8081 	beq.w	8015062 <rcl_wait_set_fini+0x12e>
 8014f60:	6820      	ldr	r0, [r4, #0]
 8014f62:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014f66:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014f68:	2700      	movs	r7, #0
 8014f6a:	6067      	str	r7, [r4, #4]
 8014f6c:	602f      	str	r7, [r5, #0]
 8014f6e:	b120      	cbz	r0, 8014f7a <rcl_wait_set_fini+0x46>
 8014f70:	9101      	str	r1, [sp, #4]
 8014f72:	47c0      	blx	r8
 8014f74:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014f76:	9901      	ldr	r1, [sp, #4]
 8014f78:	6027      	str	r7, [r4, #0]
 8014f7a:	68a8      	ldr	r0, [r5, #8]
 8014f7c:	b120      	cbz	r0, 8014f88 <rcl_wait_set_fini+0x54>
 8014f7e:	47c0      	blx	r8
 8014f80:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014f82:	2300      	movs	r3, #0
 8014f84:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8014f88:	68a0      	ldr	r0, [r4, #8]
 8014f8a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014f8c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014f8e:	f04f 0800 	mov.w	r8, #0
 8014f92:	f8c4 800c 	str.w	r8, [r4, #12]
 8014f96:	f8c5 800c 	str.w	r8, [r5, #12]
 8014f9a:	b128      	cbz	r0, 8014fa8 <rcl_wait_set_fini+0x74>
 8014f9c:	47b8      	blx	r7
 8014f9e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014fa0:	f8c4 8008 	str.w	r8, [r4, #8]
 8014fa4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014fa6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014fa8:	6968      	ldr	r0, [r5, #20]
 8014faa:	f04f 0800 	mov.w	r8, #0
 8014fae:	f8c5 8010 	str.w	r8, [r5, #16]
 8014fb2:	b128      	cbz	r0, 8014fc0 <rcl_wait_set_fini+0x8c>
 8014fb4:	47b8      	blx	r7
 8014fb6:	f8c5 8014 	str.w	r8, [r5, #20]
 8014fba:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014fbc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014fbe:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014fc0:	6920      	ldr	r0, [r4, #16]
 8014fc2:	f04f 0800 	mov.w	r8, #0
 8014fc6:	f8c4 8014 	str.w	r8, [r4, #20]
 8014fca:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8014fce:	b128      	cbz	r0, 8014fdc <rcl_wait_set_fini+0xa8>
 8014fd0:	47b8      	blx	r7
 8014fd2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014fd4:	f8c4 8010 	str.w	r8, [r4, #16]
 8014fd8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014fda:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014fdc:	69a0      	ldr	r0, [r4, #24]
 8014fde:	f04f 0800 	mov.w	r8, #0
 8014fe2:	f8c4 801c 	str.w	r8, [r4, #28]
 8014fe6:	f8c5 8018 	str.w	r8, [r5, #24]
 8014fea:	b128      	cbz	r0, 8014ff8 <rcl_wait_set_fini+0xc4>
 8014fec:	9101      	str	r1, [sp, #4]
 8014fee:	47b8      	blx	r7
 8014ff0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014ff2:	9901      	ldr	r1, [sp, #4]
 8014ff4:	f8c4 8018 	str.w	r8, [r4, #24]
 8014ff8:	6a28      	ldr	r0, [r5, #32]
 8014ffa:	b120      	cbz	r0, 8015006 <rcl_wait_set_fini+0xd2>
 8014ffc:	47b8      	blx	r7
 8014ffe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015000:	2300      	movs	r3, #0
 8015002:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015006:	6a20      	ldr	r0, [r4, #32]
 8015008:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801500c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801500e:	2700      	movs	r7, #0
 8015010:	6267      	str	r7, [r4, #36]	@ 0x24
 8015012:	626f      	str	r7, [r5, #36]	@ 0x24
 8015014:	b120      	cbz	r0, 8015020 <rcl_wait_set_fini+0xec>
 8015016:	9101      	str	r1, [sp, #4]
 8015018:	47c0      	blx	r8
 801501a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801501c:	9901      	ldr	r1, [sp, #4]
 801501e:	6227      	str	r7, [r4, #32]
 8015020:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8015022:	b120      	cbz	r0, 801502e <rcl_wait_set_fini+0xfa>
 8015024:	47c0      	blx	r8
 8015026:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015028:	2300      	movs	r3, #0
 801502a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801502e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015030:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015034:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015036:	2700      	movs	r7, #0
 8015038:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801503a:	632f      	str	r7, [r5, #48]	@ 0x30
 801503c:	b120      	cbz	r0, 8015048 <rcl_wait_set_fini+0x114>
 801503e:	9101      	str	r1, [sp, #4]
 8015040:	47c0      	blx	r8
 8015042:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015044:	9901      	ldr	r1, [sp, #4]
 8015046:	62a7      	str	r7, [r4, #40]	@ 0x28
 8015048:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801504a:	b120      	cbz	r0, 8015056 <rcl_wait_set_fini+0x122>
 801504c:	47c0      	blx	r8
 801504e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015050:	2300      	movs	r3, #0
 8015052:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8015056:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015058:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801505a:	4628      	mov	r0, r5
 801505c:	4798      	blx	r3
 801505e:	2300      	movs	r3, #0
 8015060:	6323      	str	r3, [r4, #48]	@ 0x30
 8015062:	4630      	mov	r0, r6
 8015064:	b002      	add	sp, #8
 8015066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801506a:	260b      	movs	r6, #11
 801506c:	4630      	mov	r0, r6
 801506e:	b002      	add	sp, #8
 8015070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015074 <rcl_wait_set_add_subscription>:
 8015074:	b318      	cbz	r0, 80150be <rcl_wait_set_add_subscription+0x4a>
 8015076:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015078:	b570      	push	{r4, r5, r6, lr}
 801507a:	4604      	mov	r4, r0
 801507c:	b30b      	cbz	r3, 80150c2 <rcl_wait_set_add_subscription+0x4e>
 801507e:	b319      	cbz	r1, 80150c8 <rcl_wait_set_add_subscription+0x54>
 8015080:	681d      	ldr	r5, [r3, #0]
 8015082:	6840      	ldr	r0, [r0, #4]
 8015084:	4285      	cmp	r5, r0
 8015086:	d217      	bcs.n	80150b8 <rcl_wait_set_add_subscription+0x44>
 8015088:	6820      	ldr	r0, [r4, #0]
 801508a:	1c6e      	adds	r6, r5, #1
 801508c:	601e      	str	r6, [r3, #0]
 801508e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015092:	b102      	cbz	r2, 8015096 <rcl_wait_set_add_subscription+0x22>
 8015094:	6015      	str	r5, [r2, #0]
 8015096:	4608      	mov	r0, r1
 8015098:	f7ff fb08 	bl	80146ac <rcl_subscription_get_rmw_handle>
 801509c:	b150      	cbz	r0, 80150b4 <rcl_wait_set_add_subscription+0x40>
 801509e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80150a0:	6842      	ldr	r2, [r0, #4]
 80150a2:	689b      	ldr	r3, [r3, #8]
 80150a4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80150a8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80150aa:	6853      	ldr	r3, [r2, #4]
 80150ac:	3301      	adds	r3, #1
 80150ae:	2000      	movs	r0, #0
 80150b0:	6053      	str	r3, [r2, #4]
 80150b2:	bd70      	pop	{r4, r5, r6, pc}
 80150b4:	2001      	movs	r0, #1
 80150b6:	bd70      	pop	{r4, r5, r6, pc}
 80150b8:	f240 3086 	movw	r0, #902	@ 0x386
 80150bc:	bd70      	pop	{r4, r5, r6, pc}
 80150be:	200b      	movs	r0, #11
 80150c0:	4770      	bx	lr
 80150c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80150c6:	bd70      	pop	{r4, r5, r6, pc}
 80150c8:	200b      	movs	r0, #11
 80150ca:	bd70      	pop	{r4, r5, r6, pc}

080150cc <rcl_wait_set_clear>:
 80150cc:	2800      	cmp	r0, #0
 80150ce:	d073      	beq.n	80151b8 <rcl_wait_set_clear+0xec>
 80150d0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80150d2:	b510      	push	{r4, lr}
 80150d4:	4604      	mov	r4, r0
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d070      	beq.n	80151bc <rcl_wait_set_clear+0xf0>
 80150da:	6800      	ldr	r0, [r0, #0]
 80150dc:	b138      	cbz	r0, 80150ee <rcl_wait_set_clear+0x22>
 80150de:	6862      	ldr	r2, [r4, #4]
 80150e0:	2100      	movs	r1, #0
 80150e2:	0092      	lsls	r2, r2, #2
 80150e4:	f004 fbde 	bl	80198a4 <memset>
 80150e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80150ea:	2200      	movs	r2, #0
 80150ec:	601a      	str	r2, [r3, #0]
 80150ee:	68a0      	ldr	r0, [r4, #8]
 80150f0:	b138      	cbz	r0, 8015102 <rcl_wait_set_clear+0x36>
 80150f2:	68e2      	ldr	r2, [r4, #12]
 80150f4:	2100      	movs	r1, #0
 80150f6:	0092      	lsls	r2, r2, #2
 80150f8:	f004 fbd4 	bl	80198a4 <memset>
 80150fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80150fe:	2200      	movs	r2, #0
 8015100:	60da      	str	r2, [r3, #12]
 8015102:	69a0      	ldr	r0, [r4, #24]
 8015104:	b138      	cbz	r0, 8015116 <rcl_wait_set_clear+0x4a>
 8015106:	69e2      	ldr	r2, [r4, #28]
 8015108:	2100      	movs	r1, #0
 801510a:	0092      	lsls	r2, r2, #2
 801510c:	f004 fbca 	bl	80198a4 <memset>
 8015110:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015112:	2200      	movs	r2, #0
 8015114:	619a      	str	r2, [r3, #24]
 8015116:	6a20      	ldr	r0, [r4, #32]
 8015118:	b138      	cbz	r0, 801512a <rcl_wait_set_clear+0x5e>
 801511a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801511c:	2100      	movs	r1, #0
 801511e:	0092      	lsls	r2, r2, #2
 8015120:	f004 fbc0 	bl	80198a4 <memset>
 8015124:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015126:	2200      	movs	r2, #0
 8015128:	625a      	str	r2, [r3, #36]	@ 0x24
 801512a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801512c:	b138      	cbz	r0, 801513e <rcl_wait_set_clear+0x72>
 801512e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015130:	2100      	movs	r1, #0
 8015132:	0092      	lsls	r2, r2, #2
 8015134:	f004 fbb6 	bl	80198a4 <memset>
 8015138:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801513a:	2200      	movs	r2, #0
 801513c:	631a      	str	r2, [r3, #48]	@ 0x30
 801513e:	6920      	ldr	r0, [r4, #16]
 8015140:	b138      	cbz	r0, 8015152 <rcl_wait_set_clear+0x86>
 8015142:	6962      	ldr	r2, [r4, #20]
 8015144:	2100      	movs	r1, #0
 8015146:	0092      	lsls	r2, r2, #2
 8015148:	f004 fbac 	bl	80198a4 <memset>
 801514c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801514e:	2200      	movs	r2, #0
 8015150:	641a      	str	r2, [r3, #64]	@ 0x40
 8015152:	6898      	ldr	r0, [r3, #8]
 8015154:	b138      	cbz	r0, 8015166 <rcl_wait_set_clear+0x9a>
 8015156:	685a      	ldr	r2, [r3, #4]
 8015158:	2100      	movs	r1, #0
 801515a:	0092      	lsls	r2, r2, #2
 801515c:	f004 fba2 	bl	80198a4 <memset>
 8015160:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015162:	2200      	movs	r2, #0
 8015164:	605a      	str	r2, [r3, #4]
 8015166:	6958      	ldr	r0, [r3, #20]
 8015168:	b138      	cbz	r0, 801517a <rcl_wait_set_clear+0xae>
 801516a:	691a      	ldr	r2, [r3, #16]
 801516c:	2100      	movs	r1, #0
 801516e:	0092      	lsls	r2, r2, #2
 8015170:	f004 fb98 	bl	80198a4 <memset>
 8015174:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015176:	2200      	movs	r2, #0
 8015178:	611a      	str	r2, [r3, #16]
 801517a:	6a18      	ldr	r0, [r3, #32]
 801517c:	b138      	cbz	r0, 801518e <rcl_wait_set_clear+0xc2>
 801517e:	69da      	ldr	r2, [r3, #28]
 8015180:	2100      	movs	r1, #0
 8015182:	0092      	lsls	r2, r2, #2
 8015184:	f004 fb8e 	bl	80198a4 <memset>
 8015188:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801518a:	2200      	movs	r2, #0
 801518c:	61da      	str	r2, [r3, #28]
 801518e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015190:	b138      	cbz	r0, 80151a2 <rcl_wait_set_clear+0xd6>
 8015192:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015194:	2100      	movs	r1, #0
 8015196:	0092      	lsls	r2, r2, #2
 8015198:	f004 fb84 	bl	80198a4 <memset>
 801519c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801519e:	2200      	movs	r2, #0
 80151a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80151a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80151a4:	b138      	cbz	r0, 80151b6 <rcl_wait_set_clear+0xea>
 80151a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80151a8:	2100      	movs	r1, #0
 80151aa:	0092      	lsls	r2, r2, #2
 80151ac:	f004 fb7a 	bl	80198a4 <memset>
 80151b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80151b2:	2000      	movs	r0, #0
 80151b4:	6358      	str	r0, [r3, #52]	@ 0x34
 80151b6:	bd10      	pop	{r4, pc}
 80151b8:	200b      	movs	r0, #11
 80151ba:	4770      	bx	lr
 80151bc:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80151c0:	bd10      	pop	{r4, pc}
 80151c2:	bf00      	nop

080151c4 <rcl_wait_set_resize>:
 80151c4:	2800      	cmp	r0, #0
 80151c6:	f000 8185 	beq.w	80154d4 <rcl_wait_set_resize+0x310>
 80151ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151ce:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80151d0:	b083      	sub	sp, #12
 80151d2:	4605      	mov	r5, r0
 80151d4:	2c00      	cmp	r4, #0
 80151d6:	f000 817f 	beq.w	80154d8 <rcl_wait_set_resize+0x314>
 80151da:	f04f 0900 	mov.w	r9, #0
 80151de:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80151e2:	461f      	mov	r7, r3
 80151e4:	4688      	mov	r8, r1
 80151e6:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80151ea:	4616      	mov	r6, r2
 80151ec:	f8c0 9004 	str.w	r9, [r0, #4]
 80151f0:	f8c4 9000 	str.w	r9, [r4]
 80151f4:	2900      	cmp	r1, #0
 80151f6:	f000 80bd 	beq.w	8015374 <rcl_wait_set_resize+0x1b0>
 80151fa:	008c      	lsls	r4, r1, #2
 80151fc:	6800      	ldr	r0, [r0, #0]
 80151fe:	9301      	str	r3, [sp, #4]
 8015200:	4652      	mov	r2, sl
 8015202:	4621      	mov	r1, r4
 8015204:	4798      	blx	r3
 8015206:	9b01      	ldr	r3, [sp, #4]
 8015208:	6028      	str	r0, [r5, #0]
 801520a:	2800      	cmp	r0, #0
 801520c:	f000 80cb 	beq.w	80153a6 <rcl_wait_set_resize+0x1e2>
 8015210:	4622      	mov	r2, r4
 8015212:	4649      	mov	r1, r9
 8015214:	9301      	str	r3, [sp, #4]
 8015216:	f004 fb45 	bl	80198a4 <memset>
 801521a:	f8c5 8004 	str.w	r8, [r5, #4]
 801521e:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8015222:	9b01      	ldr	r3, [sp, #4]
 8015224:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8015228:	f8c8 9004 	str.w	r9, [r8, #4]
 801522c:	4652      	mov	r2, sl
 801522e:	4621      	mov	r1, r4
 8015230:	4798      	blx	r3
 8015232:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015234:	f8c8 0008 	str.w	r0, [r8, #8]
 8015238:	689b      	ldr	r3, [r3, #8]
 801523a:	2b00      	cmp	r3, #0
 801523c:	f000 80ac 	beq.w	8015398 <rcl_wait_set_resize+0x1d4>
 8015240:	4622      	mov	r2, r4
 8015242:	4649      	mov	r1, r9
 8015244:	4618      	mov	r0, r3
 8015246:	f004 fb2d 	bl	80198a4 <memset>
 801524a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801524c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015250:	f04f 0800 	mov.w	r8, #0
 8015254:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8015258:	f8c5 800c 	str.w	r8, [r5, #12]
 801525c:	f8c4 800c 	str.w	r8, [r4, #12]
 8015260:	2e00      	cmp	r6, #0
 8015262:	f040 80a4 	bne.w	80153ae <rcl_wait_set_resize+0x1ea>
 8015266:	68a8      	ldr	r0, [r5, #8]
 8015268:	b128      	cbz	r0, 8015276 <rcl_wait_set_resize+0xb2>
 801526a:	4649      	mov	r1, r9
 801526c:	4790      	blx	r2
 801526e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015270:	60ae      	str	r6, [r5, #8]
 8015272:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015276:	f04f 0800 	mov.w	r8, #0
 801527a:	19f6      	adds	r6, r6, r7
 801527c:	f8c4 8010 	str.w	r8, [r4, #16]
 8015280:	f040 80ac 	bne.w	80153dc <rcl_wait_set_resize+0x218>
 8015284:	6960      	ldr	r0, [r4, #20]
 8015286:	b130      	cbz	r0, 8015296 <rcl_wait_set_resize+0xd2>
 8015288:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801528a:	4649      	mov	r1, r9
 801528c:	4798      	blx	r3
 801528e:	6166      	str	r6, [r4, #20]
 8015290:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015292:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015296:	2600      	movs	r6, #0
 8015298:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801529c:	616e      	str	r6, [r5, #20]
 801529e:	6426      	str	r6, [r4, #64]	@ 0x40
 80152a0:	2f00      	cmp	r7, #0
 80152a2:	f040 80ad 	bne.w	8015400 <rcl_wait_set_resize+0x23c>
 80152a6:	6928      	ldr	r0, [r5, #16]
 80152a8:	b138      	cbz	r0, 80152ba <rcl_wait_set_resize+0xf6>
 80152aa:	4649      	mov	r1, r9
 80152ac:	47d0      	blx	sl
 80152ae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80152b0:	612f      	str	r7, [r5, #16]
 80152b2:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80152b6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80152ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80152bc:	2600      	movs	r6, #0
 80152be:	61ee      	str	r6, [r5, #28]
 80152c0:	61a6      	str	r6, [r4, #24]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	f040 80af 	bne.w	8015426 <rcl_wait_set_resize+0x262>
 80152c8:	69a8      	ldr	r0, [r5, #24]
 80152ca:	b120      	cbz	r0, 80152d6 <rcl_wait_set_resize+0x112>
 80152cc:	4649      	mov	r1, r9
 80152ce:	47d0      	blx	sl
 80152d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80152d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80152d4:	61ab      	str	r3, [r5, #24]
 80152d6:	6a20      	ldr	r0, [r4, #32]
 80152d8:	b128      	cbz	r0, 80152e6 <rcl_wait_set_resize+0x122>
 80152da:	4649      	mov	r1, r9
 80152dc:	47d0      	blx	sl
 80152de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80152e0:	2300      	movs	r3, #0
 80152e2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80152e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80152e8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80152ea:	2600      	movs	r6, #0
 80152ec:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80152f0:	626e      	str	r6, [r5, #36]	@ 0x24
 80152f2:	6266      	str	r6, [r4, #36]	@ 0x24
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	f000 80b6 	beq.w	8015466 <rcl_wait_set_resize+0x2a2>
 80152fa:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80152fe:	6a28      	ldr	r0, [r5, #32]
 8015300:	463a      	mov	r2, r7
 8015302:	4651      	mov	r1, sl
 8015304:	47c8      	blx	r9
 8015306:	6228      	str	r0, [r5, #32]
 8015308:	2800      	cmp	r0, #0
 801530a:	d04c      	beq.n	80153a6 <rcl_wait_set_resize+0x1e2>
 801530c:	4652      	mov	r2, sl
 801530e:	4631      	mov	r1, r6
 8015310:	f004 fac8 	bl	80198a4 <memset>
 8015314:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015316:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015318:	626b      	str	r3, [r5, #36]	@ 0x24
 801531a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801531c:	62a6      	str	r6, [r4, #40]	@ 0x28
 801531e:	463a      	mov	r2, r7
 8015320:	4651      	mov	r1, sl
 8015322:	47c8      	blx	r9
 8015324:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015326:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8015328:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801532a:	2c00      	cmp	r4, #0
 801532c:	f000 80f0 	beq.w	8015510 <rcl_wait_set_resize+0x34c>
 8015330:	4620      	mov	r0, r4
 8015332:	4652      	mov	r2, sl
 8015334:	4631      	mov	r1, r6
 8015336:	f004 fab5 	bl	80198a4 <memset>
 801533a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801533c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801533e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015340:	2600      	movs	r6, #0
 8015342:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8015346:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8015348:	6326      	str	r6, [r4, #48]	@ 0x30
 801534a:	2b00      	cmp	r3, #0
 801534c:	f040 809d 	bne.w	801548a <rcl_wait_set_resize+0x2c6>
 8015350:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015352:	b120      	cbz	r0, 801535e <rcl_wait_set_resize+0x19a>
 8015354:	4639      	mov	r1, r7
 8015356:	47c0      	blx	r8
 8015358:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801535a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801535c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801535e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015360:	b310      	cbz	r0, 80153a8 <rcl_wait_set_resize+0x1e4>
 8015362:	4639      	mov	r1, r7
 8015364:	47c0      	blx	r8
 8015366:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015368:	2000      	movs	r0, #0
 801536a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801536e:	b003      	add	sp, #12
 8015370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015374:	6800      	ldr	r0, [r0, #0]
 8015376:	b120      	cbz	r0, 8015382 <rcl_wait_set_resize+0x1be>
 8015378:	4651      	mov	r1, sl
 801537a:	47d8      	blx	fp
 801537c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801537e:	f8c5 8000 	str.w	r8, [r5]
 8015382:	68a0      	ldr	r0, [r4, #8]
 8015384:	2800      	cmp	r0, #0
 8015386:	f43f af61 	beq.w	801524c <rcl_wait_set_resize+0x88>
 801538a:	4651      	mov	r1, sl
 801538c:	47d8      	blx	fp
 801538e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015390:	2300      	movs	r3, #0
 8015392:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8015396:	e759      	b.n	801524c <rcl_wait_set_resize+0x88>
 8015398:	6828      	ldr	r0, [r5, #0]
 801539a:	9301      	str	r3, [sp, #4]
 801539c:	4651      	mov	r1, sl
 801539e:	47d8      	blx	fp
 80153a0:	9b01      	ldr	r3, [sp, #4]
 80153a2:	e9c5 3300 	strd	r3, r3, [r5]
 80153a6:	200a      	movs	r0, #10
 80153a8:	b003      	add	sp, #12
 80153aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153ae:	00b4      	lsls	r4, r6, #2
 80153b0:	68a8      	ldr	r0, [r5, #8]
 80153b2:	464a      	mov	r2, r9
 80153b4:	4621      	mov	r1, r4
 80153b6:	4798      	blx	r3
 80153b8:	60a8      	str	r0, [r5, #8]
 80153ba:	2800      	cmp	r0, #0
 80153bc:	d0f3      	beq.n	80153a6 <rcl_wait_set_resize+0x1e2>
 80153be:	4622      	mov	r2, r4
 80153c0:	4641      	mov	r1, r8
 80153c2:	f004 fa6f 	bl	80198a4 <memset>
 80153c6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80153c8:	60ee      	str	r6, [r5, #12]
 80153ca:	f04f 0800 	mov.w	r8, #0
 80153ce:	19f6      	adds	r6, r6, r7
 80153d0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80153d4:	f8c4 8010 	str.w	r8, [r4, #16]
 80153d8:	f43f af54 	beq.w	8015284 <rcl_wait_set_resize+0xc0>
 80153dc:	00b6      	lsls	r6, r6, #2
 80153de:	464a      	mov	r2, r9
 80153e0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80153e2:	6960      	ldr	r0, [r4, #20]
 80153e4:	4631      	mov	r1, r6
 80153e6:	4798      	blx	r3
 80153e8:	4681      	mov	r9, r0
 80153ea:	6160      	str	r0, [r4, #20]
 80153ec:	2800      	cmp	r0, #0
 80153ee:	d076      	beq.n	80154de <rcl_wait_set_resize+0x31a>
 80153f0:	4632      	mov	r2, r6
 80153f2:	4641      	mov	r1, r8
 80153f4:	f004 fa56 	bl	80198a4 <memset>
 80153f8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80153fa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80153fe:	e74a      	b.n	8015296 <rcl_wait_set_resize+0xd2>
 8015400:	00bc      	lsls	r4, r7, #2
 8015402:	6928      	ldr	r0, [r5, #16]
 8015404:	464a      	mov	r2, r9
 8015406:	4621      	mov	r1, r4
 8015408:	47c0      	blx	r8
 801540a:	6128      	str	r0, [r5, #16]
 801540c:	2800      	cmp	r0, #0
 801540e:	d0ca      	beq.n	80153a6 <rcl_wait_set_resize+0x1e2>
 8015410:	4622      	mov	r2, r4
 8015412:	4631      	mov	r1, r6
 8015414:	f004 fa46 	bl	80198a4 <memset>
 8015418:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801541a:	616f      	str	r7, [r5, #20]
 801541c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015420:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015424:	e749      	b.n	80152ba <rcl_wait_set_resize+0xf6>
 8015426:	009c      	lsls	r4, r3, #2
 8015428:	69a8      	ldr	r0, [r5, #24]
 801542a:	464a      	mov	r2, r9
 801542c:	4621      	mov	r1, r4
 801542e:	47c0      	blx	r8
 8015430:	61a8      	str	r0, [r5, #24]
 8015432:	2800      	cmp	r0, #0
 8015434:	d0b7      	beq.n	80153a6 <rcl_wait_set_resize+0x1e2>
 8015436:	4622      	mov	r2, r4
 8015438:	4631      	mov	r1, r6
 801543a:	f004 fa33 	bl	80198a4 <memset>
 801543e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8015440:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015442:	61eb      	str	r3, [r5, #28]
 8015444:	6a38      	ldr	r0, [r7, #32]
 8015446:	61fe      	str	r6, [r7, #28]
 8015448:	464a      	mov	r2, r9
 801544a:	4621      	mov	r1, r4
 801544c:	47c0      	blx	r8
 801544e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015450:	6238      	str	r0, [r7, #32]
 8015452:	6a1f      	ldr	r7, [r3, #32]
 8015454:	2f00      	cmp	r7, #0
 8015456:	d054      	beq.n	8015502 <rcl_wait_set_resize+0x33e>
 8015458:	4622      	mov	r2, r4
 801545a:	4631      	mov	r1, r6
 801545c:	4638      	mov	r0, r7
 801545e:	f004 fa21 	bl	80198a4 <memset>
 8015462:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015464:	e73f      	b.n	80152e6 <rcl_wait_set_resize+0x122>
 8015466:	6a28      	ldr	r0, [r5, #32]
 8015468:	b120      	cbz	r0, 8015474 <rcl_wait_set_resize+0x2b0>
 801546a:	4639      	mov	r1, r7
 801546c:	47c0      	blx	r8
 801546e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015470:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015472:	622b      	str	r3, [r5, #32]
 8015474:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015476:	2800      	cmp	r0, #0
 8015478:	f43f af60 	beq.w	801533c <rcl_wait_set_resize+0x178>
 801547c:	4639      	mov	r1, r7
 801547e:	47c0      	blx	r8
 8015480:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015482:	2300      	movs	r3, #0
 8015484:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015488:	e758      	b.n	801533c <rcl_wait_set_resize+0x178>
 801548a:	009c      	lsls	r4, r3, #2
 801548c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801548e:	463a      	mov	r2, r7
 8015490:	4621      	mov	r1, r4
 8015492:	47c8      	blx	r9
 8015494:	62a8      	str	r0, [r5, #40]	@ 0x28
 8015496:	2800      	cmp	r0, #0
 8015498:	d085      	beq.n	80153a6 <rcl_wait_set_resize+0x1e2>
 801549a:	4622      	mov	r2, r4
 801549c:	4631      	mov	r1, r6
 801549e:	f004 fa01 	bl	80198a4 <memset>
 80154a2:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80154a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80154a8:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80154aa:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80154ae:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80154b2:	463a      	mov	r2, r7
 80154b4:	4621      	mov	r1, r4
 80154b6:	47c8      	blx	r9
 80154b8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80154ba:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80154be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80154c0:	b36b      	cbz	r3, 801551e <rcl_wait_set_resize+0x35a>
 80154c2:	4622      	mov	r2, r4
 80154c4:	4631      	mov	r1, r6
 80154c6:	4618      	mov	r0, r3
 80154c8:	f004 f9ec 	bl	80198a4 <memset>
 80154cc:	4630      	mov	r0, r6
 80154ce:	b003      	add	sp, #12
 80154d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154d4:	200b      	movs	r0, #11
 80154d6:	4770      	bx	lr
 80154d8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80154dc:	e764      	b.n	80153a8 <rcl_wait_set_resize+0x1e4>
 80154de:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80154e0:	68a8      	ldr	r0, [r5, #8]
 80154e2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80154e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80154e6:	4798      	blx	r3
 80154e8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80154ea:	6928      	ldr	r0, [r5, #16]
 80154ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80154ee:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80154f0:	f8c5 900c 	str.w	r9, [r5, #12]
 80154f4:	f8c5 9008 	str.w	r9, [r5, #8]
 80154f8:	4790      	blx	r2
 80154fa:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80154fe:	200a      	movs	r0, #10
 8015500:	e752      	b.n	80153a8 <rcl_wait_set_resize+0x1e4>
 8015502:	69a8      	ldr	r0, [r5, #24]
 8015504:	4649      	mov	r1, r9
 8015506:	47d0      	blx	sl
 8015508:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801550c:	200a      	movs	r0, #10
 801550e:	e74b      	b.n	80153a8 <rcl_wait_set_resize+0x1e4>
 8015510:	6a28      	ldr	r0, [r5, #32]
 8015512:	4639      	mov	r1, r7
 8015514:	47c0      	blx	r8
 8015516:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801551a:	200a      	movs	r0, #10
 801551c:	e744      	b.n	80153a8 <rcl_wait_set_resize+0x1e4>
 801551e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015520:	9301      	str	r3, [sp, #4]
 8015522:	4639      	mov	r1, r7
 8015524:	47c0      	blx	r8
 8015526:	9b01      	ldr	r3, [sp, #4]
 8015528:	200a      	movs	r0, #10
 801552a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801552e:	e73b      	b.n	80153a8 <rcl_wait_set_resize+0x1e4>

08015530 <rcl_wait_set_init>:
 8015530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015534:	b084      	sub	sp, #16
 8015536:	4604      	mov	r4, r0
 8015538:	a810      	add	r0, sp, #64	@ 0x40
 801553a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801553e:	460f      	mov	r7, r1
 8015540:	4690      	mov	r8, r2
 8015542:	4699      	mov	r9, r3
 8015544:	f7f8 fa2e 	bl	800d9a4 <rcutils_allocator_is_valid>
 8015548:	2800      	cmp	r0, #0
 801554a:	d06b      	beq.n	8015624 <rcl_wait_set_init+0xf4>
 801554c:	2c00      	cmp	r4, #0
 801554e:	d069      	beq.n	8015624 <rcl_wait_set_init+0xf4>
 8015550:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015552:	b125      	cbz	r5, 801555e <rcl_wait_set_init+0x2e>
 8015554:	2564      	movs	r5, #100	@ 0x64
 8015556:	4628      	mov	r0, r5
 8015558:	b004      	add	sp, #16
 801555a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801555e:	f1ba 0f00 	cmp.w	sl, #0
 8015562:	d05f      	beq.n	8015624 <rcl_wait_set_init+0xf4>
 8015564:	4650      	mov	r0, sl
 8015566:	f7fe fa5b 	bl	8013a20 <rcl_context_is_valid>
 801556a:	2800      	cmp	r0, #0
 801556c:	d067      	beq.n	801563e <rcl_wait_set_init+0x10e>
 801556e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015570:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8015572:	205c      	movs	r0, #92	@ 0x5c
 8015574:	4798      	blx	r3
 8015576:	6320      	str	r0, [r4, #48]	@ 0x30
 8015578:	2800      	cmp	r0, #0
 801557a:	d062      	beq.n	8015642 <rcl_wait_set_init+0x112>
 801557c:	4629      	mov	r1, r5
 801557e:	225c      	movs	r2, #92	@ 0x5c
 8015580:	f004 f990 	bl	80198a4 <memset>
 8015584:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8015588:	eb03 0e02 	add.w	lr, r3, r2
 801558c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801558e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015590:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015594:	449e      	add	lr, r3
 8015596:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801559a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801559e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80155a2:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80155a6:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 80155aa:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 80155ae:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 80155b2:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 80155b6:	f8da a000 	ldr.w	sl, [sl]
 80155ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80155bc:	44c6      	add	lr, r8
 80155be:	f8dc 3000 	ldr.w	r3, [ip]
 80155c2:	602b      	str	r3, [r5, #0]
 80155c4:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80155c8:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80155cc:	f002 f9fe 	bl	80179cc <rmw_create_wait_set>
 80155d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80155d2:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80155d4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80155d6:	b350      	cbz	r0, 801562e <rcl_wait_set_init+0xfe>
 80155d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80155da:	9302      	str	r3, [sp, #8]
 80155dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80155de:	9301      	str	r3, [sp, #4]
 80155e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80155e2:	9300      	str	r3, [sp, #0]
 80155e4:	4642      	mov	r2, r8
 80155e6:	464b      	mov	r3, r9
 80155e8:	4639      	mov	r1, r7
 80155ea:	4620      	mov	r0, r4
 80155ec:	f7ff fdea 	bl	80151c4 <rcl_wait_set_resize>
 80155f0:	4605      	mov	r5, r0
 80155f2:	2800      	cmp	r0, #0
 80155f4:	d0af      	beq.n	8015556 <rcl_wait_set_init+0x26>
 80155f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80155f8:	bb2b      	cbnz	r3, 8015646 <rcl_wait_set_init+0x116>
 80155fa:	2600      	movs	r6, #0
 80155fc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8015600:	9600      	str	r6, [sp, #0]
 8015602:	4633      	mov	r3, r6
 8015604:	4632      	mov	r2, r6
 8015606:	4631      	mov	r1, r6
 8015608:	4620      	mov	r0, r4
 801560a:	f7ff fddb 	bl	80151c4 <rcl_wait_set_resize>
 801560e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015610:	2800      	cmp	r0, #0
 8015612:	d0a0      	beq.n	8015556 <rcl_wait_set_init+0x26>
 8015614:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8015616:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8015618:	4798      	blx	r3
 801561a:	4628      	mov	r0, r5
 801561c:	6326      	str	r6, [r4, #48]	@ 0x30
 801561e:	b004      	add	sp, #16
 8015620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015624:	250b      	movs	r5, #11
 8015626:	4628      	mov	r0, r5
 8015628:	b004      	add	sp, #16
 801562a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801562e:	2501      	movs	r5, #1
 8015630:	f002 f9d6 	bl	80179e0 <rmw_destroy_wait_set>
 8015634:	2800      	cmp	r0, #0
 8015636:	bf18      	it	ne
 8015638:	f44f 7561 	movne.w	r5, #900	@ 0x384
 801563c:	e7dd      	b.n	80155fa <rcl_wait_set_init+0xca>
 801563e:	2565      	movs	r5, #101	@ 0x65
 8015640:	e789      	b.n	8015556 <rcl_wait_set_init+0x26>
 8015642:	250a      	movs	r5, #10
 8015644:	e787      	b.n	8015556 <rcl_wait_set_init+0x26>
 8015646:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015648:	e7f2      	b.n	8015630 <rcl_wait_set_init+0x100>
 801564a:	bf00      	nop

0801564c <rcl_wait_set_add_guard_condition>:
 801564c:	b318      	cbz	r0, 8015696 <rcl_wait_set_add_guard_condition+0x4a>
 801564e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015650:	b570      	push	{r4, r5, r6, lr}
 8015652:	4604      	mov	r4, r0
 8015654:	b30b      	cbz	r3, 801569a <rcl_wait_set_add_guard_condition+0x4e>
 8015656:	b319      	cbz	r1, 80156a0 <rcl_wait_set_add_guard_condition+0x54>
 8015658:	68dd      	ldr	r5, [r3, #12]
 801565a:	68c0      	ldr	r0, [r0, #12]
 801565c:	4285      	cmp	r5, r0
 801565e:	d217      	bcs.n	8015690 <rcl_wait_set_add_guard_condition+0x44>
 8015660:	68a0      	ldr	r0, [r4, #8]
 8015662:	1c6e      	adds	r6, r5, #1
 8015664:	60de      	str	r6, [r3, #12]
 8015666:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801566a:	b102      	cbz	r2, 801566e <rcl_wait_set_add_guard_condition+0x22>
 801566c:	6015      	str	r5, [r2, #0]
 801566e:	4608      	mov	r0, r1
 8015670:	f003 fac0 	bl	8018bf4 <rcl_guard_condition_get_rmw_handle>
 8015674:	b150      	cbz	r0, 801568c <rcl_wait_set_add_guard_condition+0x40>
 8015676:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015678:	6842      	ldr	r2, [r0, #4]
 801567a:	695b      	ldr	r3, [r3, #20]
 801567c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015680:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015682:	6913      	ldr	r3, [r2, #16]
 8015684:	3301      	adds	r3, #1
 8015686:	2000      	movs	r0, #0
 8015688:	6113      	str	r3, [r2, #16]
 801568a:	bd70      	pop	{r4, r5, r6, pc}
 801568c:	2001      	movs	r0, #1
 801568e:	bd70      	pop	{r4, r5, r6, pc}
 8015690:	f240 3086 	movw	r0, #902	@ 0x386
 8015694:	bd70      	pop	{r4, r5, r6, pc}
 8015696:	200b      	movs	r0, #11
 8015698:	4770      	bx	lr
 801569a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801569e:	bd70      	pop	{r4, r5, r6, pc}
 80156a0:	200b      	movs	r0, #11
 80156a2:	bd70      	pop	{r4, r5, r6, pc}

080156a4 <rcl_wait_set_add_timer>:
 80156a4:	b328      	cbz	r0, 80156f2 <rcl_wait_set_add_timer+0x4e>
 80156a6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80156a8:	b570      	push	{r4, r5, r6, lr}
 80156aa:	4604      	mov	r4, r0
 80156ac:	b31b      	cbz	r3, 80156f6 <rcl_wait_set_add_timer+0x52>
 80156ae:	b329      	cbz	r1, 80156fc <rcl_wait_set_add_timer+0x58>
 80156b0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80156b2:	6965      	ldr	r5, [r4, #20]
 80156b4:	42a8      	cmp	r0, r5
 80156b6:	d219      	bcs.n	80156ec <rcl_wait_set_add_timer+0x48>
 80156b8:	6925      	ldr	r5, [r4, #16]
 80156ba:	1c46      	adds	r6, r0, #1
 80156bc:	641e      	str	r6, [r3, #64]	@ 0x40
 80156be:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80156c2:	b102      	cbz	r2, 80156c6 <rcl_wait_set_add_timer+0x22>
 80156c4:	6010      	str	r0, [r2, #0]
 80156c6:	4608      	mov	r0, r1
 80156c8:	f7ff fba6 	bl	8014e18 <rcl_timer_get_guard_condition>
 80156cc:	b168      	cbz	r0, 80156ea <rcl_wait_set_add_timer+0x46>
 80156ce:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80156d0:	68e3      	ldr	r3, [r4, #12]
 80156d2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80156d4:	3b01      	subs	r3, #1
 80156d6:	441d      	add	r5, r3
 80156d8:	f003 fa8c 	bl	8018bf4 <rcl_guard_condition_get_rmw_handle>
 80156dc:	b180      	cbz	r0, 8015700 <rcl_wait_set_add_timer+0x5c>
 80156de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80156e0:	6842      	ldr	r2, [r0, #4]
 80156e2:	695b      	ldr	r3, [r3, #20]
 80156e4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80156e8:	2000      	movs	r0, #0
 80156ea:	bd70      	pop	{r4, r5, r6, pc}
 80156ec:	f240 3086 	movw	r0, #902	@ 0x386
 80156f0:	bd70      	pop	{r4, r5, r6, pc}
 80156f2:	200b      	movs	r0, #11
 80156f4:	4770      	bx	lr
 80156f6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80156fa:	bd70      	pop	{r4, r5, r6, pc}
 80156fc:	200b      	movs	r0, #11
 80156fe:	bd70      	pop	{r4, r5, r6, pc}
 8015700:	2001      	movs	r0, #1
 8015702:	bd70      	pop	{r4, r5, r6, pc}

08015704 <rcl_wait_set_add_client>:
 8015704:	b318      	cbz	r0, 801574e <rcl_wait_set_add_client+0x4a>
 8015706:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015708:	b570      	push	{r4, r5, r6, lr}
 801570a:	4604      	mov	r4, r0
 801570c:	b30b      	cbz	r3, 8015752 <rcl_wait_set_add_client+0x4e>
 801570e:	b319      	cbz	r1, 8015758 <rcl_wait_set_add_client+0x54>
 8015710:	699d      	ldr	r5, [r3, #24]
 8015712:	69c0      	ldr	r0, [r0, #28]
 8015714:	4285      	cmp	r5, r0
 8015716:	d217      	bcs.n	8015748 <rcl_wait_set_add_client+0x44>
 8015718:	69a0      	ldr	r0, [r4, #24]
 801571a:	1c6e      	adds	r6, r5, #1
 801571c:	619e      	str	r6, [r3, #24]
 801571e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015722:	b102      	cbz	r2, 8015726 <rcl_wait_set_add_client+0x22>
 8015724:	6015      	str	r5, [r2, #0]
 8015726:	4608      	mov	r0, r1
 8015728:	f7fe f8ce 	bl	80138c8 <rcl_client_get_rmw_handle>
 801572c:	b150      	cbz	r0, 8015744 <rcl_wait_set_add_client+0x40>
 801572e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015730:	6842      	ldr	r2, [r0, #4]
 8015732:	6a1b      	ldr	r3, [r3, #32]
 8015734:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015738:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801573a:	69d3      	ldr	r3, [r2, #28]
 801573c:	3301      	adds	r3, #1
 801573e:	2000      	movs	r0, #0
 8015740:	61d3      	str	r3, [r2, #28]
 8015742:	bd70      	pop	{r4, r5, r6, pc}
 8015744:	2001      	movs	r0, #1
 8015746:	bd70      	pop	{r4, r5, r6, pc}
 8015748:	f240 3086 	movw	r0, #902	@ 0x386
 801574c:	bd70      	pop	{r4, r5, r6, pc}
 801574e:	200b      	movs	r0, #11
 8015750:	4770      	bx	lr
 8015752:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015756:	bd70      	pop	{r4, r5, r6, pc}
 8015758:	200b      	movs	r0, #11
 801575a:	bd70      	pop	{r4, r5, r6, pc}

0801575c <rcl_wait_set_add_service>:
 801575c:	b318      	cbz	r0, 80157a6 <rcl_wait_set_add_service+0x4a>
 801575e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015760:	b570      	push	{r4, r5, r6, lr}
 8015762:	4604      	mov	r4, r0
 8015764:	b30b      	cbz	r3, 80157aa <rcl_wait_set_add_service+0x4e>
 8015766:	b319      	cbz	r1, 80157b0 <rcl_wait_set_add_service+0x54>
 8015768:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801576a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801576c:	4285      	cmp	r5, r0
 801576e:	d217      	bcs.n	80157a0 <rcl_wait_set_add_service+0x44>
 8015770:	6a20      	ldr	r0, [r4, #32]
 8015772:	1c6e      	adds	r6, r5, #1
 8015774:	625e      	str	r6, [r3, #36]	@ 0x24
 8015776:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801577a:	b102      	cbz	r2, 801577e <rcl_wait_set_add_service+0x22>
 801577c:	6015      	str	r5, [r2, #0]
 801577e:	4608      	mov	r0, r1
 8015780:	f7fe fed4 	bl	801452c <rcl_service_get_rmw_handle>
 8015784:	b150      	cbz	r0, 801579c <rcl_wait_set_add_service+0x40>
 8015786:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015788:	6842      	ldr	r2, [r0, #4]
 801578a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801578c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015790:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015792:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8015794:	3301      	adds	r3, #1
 8015796:	2000      	movs	r0, #0
 8015798:	6293      	str	r3, [r2, #40]	@ 0x28
 801579a:	bd70      	pop	{r4, r5, r6, pc}
 801579c:	2001      	movs	r0, #1
 801579e:	bd70      	pop	{r4, r5, r6, pc}
 80157a0:	f240 3086 	movw	r0, #902	@ 0x386
 80157a4:	bd70      	pop	{r4, r5, r6, pc}
 80157a6:	200b      	movs	r0, #11
 80157a8:	4770      	bx	lr
 80157aa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80157ae:	bd70      	pop	{r4, r5, r6, pc}
 80157b0:	200b      	movs	r0, #11
 80157b2:	bd70      	pop	{r4, r5, r6, pc}
 80157b4:	0000      	movs	r0, r0
	...

080157b8 <rcl_wait>:
 80157b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157bc:	ed2d 8b02 	vpush	{d8}
 80157c0:	b08d      	sub	sp, #52	@ 0x34
 80157c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80157c6:	2800      	cmp	r0, #0
 80157c8:	f000 8143 	beq.w	8015a52 <rcl_wait+0x29a>
 80157cc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80157ce:	4605      	mov	r5, r0
 80157d0:	2e00      	cmp	r6, #0
 80157d2:	f000 8112 	beq.w	80159fa <rcl_wait+0x242>
 80157d6:	6843      	ldr	r3, [r0, #4]
 80157d8:	b983      	cbnz	r3, 80157fc <rcl_wait+0x44>
 80157da:	68eb      	ldr	r3, [r5, #12]
 80157dc:	b973      	cbnz	r3, 80157fc <rcl_wait+0x44>
 80157de:	696b      	ldr	r3, [r5, #20]
 80157e0:	b963      	cbnz	r3, 80157fc <rcl_wait+0x44>
 80157e2:	69eb      	ldr	r3, [r5, #28]
 80157e4:	b953      	cbnz	r3, 80157fc <rcl_wait+0x44>
 80157e6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80157e8:	b943      	cbnz	r3, 80157fc <rcl_wait+0x44>
 80157ea:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80157ec:	b933      	cbnz	r3, 80157fc <rcl_wait+0x44>
 80157ee:	f240 3085 	movw	r0, #901	@ 0x385
 80157f2:	b00d      	add	sp, #52	@ 0x34
 80157f4:	ecbd 8b02 	vpop	{d8}
 80157f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157fc:	9b04      	ldr	r3, [sp, #16]
 80157fe:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8015800:	2b01      	cmp	r3, #1
 8015802:	9b05      	ldr	r3, [sp, #20]
 8015804:	f173 0300 	sbcs.w	r3, r3, #0
 8015808:	f2c0 80f0 	blt.w	80159ec <rcl_wait+0x234>
 801580c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8015810:	4643      	mov	r3, r8
 8015812:	2a00      	cmp	r2, #0
 8015814:	f000 8133 	beq.w	8015a7e <rcl_wait+0x2c6>
 8015818:	2400      	movs	r4, #0
 801581a:	4613      	mov	r3, r2
 801581c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8015a90 <rcl_wait+0x2d8>
 8015820:	46a2      	mov	sl, r4
 8015822:	46a3      	mov	fp, r4
 8015824:	f240 3921 	movw	r9, #801	@ 0x321
 8015828:	4632      	mov	r2, r6
 801582a:	e014      	b.n	8015856 <rcl_wait+0x9e>
 801582c:	2800      	cmp	r0, #0
 801582e:	d1e0      	bne.n	80157f2 <rcl_wait+0x3a>
 8015830:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015834:	4542      	cmp	r2, r8
 8015836:	eb73 0107 	sbcs.w	r1, r3, r7
 801583a:	da03      	bge.n	8015844 <rcl_wait+0x8c>
 801583c:	4690      	mov	r8, r2
 801583e:	461f      	mov	r7, r3
 8015840:	f04f 0b01 	mov.w	fp, #1
 8015844:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015846:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015848:	3401      	adds	r4, #1
 801584a:	f14a 0a00 	adc.w	sl, sl, #0
 801584e:	429c      	cmp	r4, r3
 8015850:	f17a 0100 	sbcs.w	r1, sl, #0
 8015854:	d228      	bcs.n	80158a8 <rcl_wait+0xf0>
 8015856:	6928      	ldr	r0, [r5, #16]
 8015858:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801585c:	a908      	add	r1, sp, #32
 801585e:	00a6      	lsls	r6, r4, #2
 8015860:	2800      	cmp	r0, #0
 8015862:	d0f1      	beq.n	8015848 <rcl_wait+0x90>
 8015864:	68eb      	ldr	r3, [r5, #12]
 8015866:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801586a:	4423      	add	r3, r4
 801586c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8015870:	f1be 0f00 	cmp.w	lr, #0
 8015874:	d006      	beq.n	8015884 <rcl_wait+0xcc>
 8015876:	6913      	ldr	r3, [r2, #16]
 8015878:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801587c:	3301      	adds	r3, #1
 801587e:	6113      	str	r3, [r2, #16]
 8015880:	692b      	ldr	r3, [r5, #16]
 8015882:	5998      	ldr	r0, [r3, r6]
 8015884:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015888:	f7ff fa94 	bl	8014db4 <rcl_timer_get_time_until_next_call>
 801588c:	4548      	cmp	r0, r9
 801588e:	d1cd      	bne.n	801582c <rcl_wait+0x74>
 8015890:	692b      	ldr	r3, [r5, #16]
 8015892:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015894:	2100      	movs	r1, #0
 8015896:	5199      	str	r1, [r3, r6]
 8015898:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801589a:	3401      	adds	r4, #1
 801589c:	f14a 0a00 	adc.w	sl, sl, #0
 80158a0:	429c      	cmp	r4, r3
 80158a2:	f17a 0100 	sbcs.w	r1, sl, #0
 80158a6:	d3d6      	bcc.n	8015856 <rcl_wait+0x9e>
 80158a8:	4616      	mov	r6, r2
 80158aa:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80158ae:	4313      	orrs	r3, r2
 80158b0:	46d9      	mov	r9, fp
 80158b2:	f040 80a9 	bne.w	8015a08 <rcl_wait+0x250>
 80158b6:	2300      	movs	r3, #0
 80158b8:	2200      	movs	r2, #0
 80158ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80158be:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80158c2:	ab08      	add	r3, sp, #32
 80158c4:	9302      	str	r3, [sp, #8]
 80158c6:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80158c8:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80158cc:	e9cd 3200 	strd	r3, r2, [sp]
 80158d0:	f106 0110 	add.w	r1, r6, #16
 80158d4:	f106 031c 	add.w	r3, r6, #28
 80158d8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80158dc:	1d30      	adds	r0, r6, #4
 80158de:	f001 fefd 	bl	80176dc <rmw_wait>
 80158e2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80158e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80158e6:	4680      	mov	r8, r0
 80158e8:	b1ca      	cbz	r2, 801591e <rcl_wait+0x166>
 80158ea:	2400      	movs	r4, #0
 80158ec:	4627      	mov	r7, r4
 80158ee:	692a      	ldr	r2, [r5, #16]
 80158f0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80158f4:	f10d 011f 	add.w	r1, sp, #31
 80158f8:	00a6      	lsls	r6, r4, #2
 80158fa:	b160      	cbz	r0, 8015916 <rcl_wait+0x15e>
 80158fc:	f88d 701f 	strb.w	r7, [sp, #31]
 8015900:	f7ff fa1e 	bl	8014d40 <rcl_timer_is_ready>
 8015904:	2800      	cmp	r0, #0
 8015906:	f47f af74 	bne.w	80157f2 <rcl_wait+0x3a>
 801590a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801590e:	b90b      	cbnz	r3, 8015914 <rcl_wait+0x15c>
 8015910:	692a      	ldr	r2, [r5, #16]
 8015912:	5193      	str	r3, [r2, r6]
 8015914:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015916:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015918:	3401      	adds	r4, #1
 801591a:	42a2      	cmp	r2, r4
 801591c:	d8e7      	bhi.n	80158ee <rcl_wait+0x136>
 801591e:	f038 0002 	bics.w	r0, r8, #2
 8015922:	f040 8090 	bne.w	8015a46 <rcl_wait+0x28e>
 8015926:	686e      	ldr	r6, [r5, #4]
 8015928:	4602      	mov	r2, r0
 801592a:	b91e      	cbnz	r6, 8015934 <rcl_wait+0x17c>
 801592c:	e00d      	b.n	801594a <rcl_wait+0x192>
 801592e:	3201      	adds	r2, #1
 8015930:	42b2      	cmp	r2, r6
 8015932:	d00a      	beq.n	801594a <rcl_wait+0x192>
 8015934:	6899      	ldr	r1, [r3, #8]
 8015936:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801593a:	2900      	cmp	r1, #0
 801593c:	d1f7      	bne.n	801592e <rcl_wait+0x176>
 801593e:	682c      	ldr	r4, [r5, #0]
 8015940:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015944:	3201      	adds	r2, #1
 8015946:	42b2      	cmp	r2, r6
 8015948:	d1f4      	bne.n	8015934 <rcl_wait+0x17c>
 801594a:	68ee      	ldr	r6, [r5, #12]
 801594c:	2200      	movs	r2, #0
 801594e:	b91e      	cbnz	r6, 8015958 <rcl_wait+0x1a0>
 8015950:	e00d      	b.n	801596e <rcl_wait+0x1b6>
 8015952:	3201      	adds	r2, #1
 8015954:	42b2      	cmp	r2, r6
 8015956:	d00a      	beq.n	801596e <rcl_wait+0x1b6>
 8015958:	6959      	ldr	r1, [r3, #20]
 801595a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801595e:	2900      	cmp	r1, #0
 8015960:	d1f7      	bne.n	8015952 <rcl_wait+0x19a>
 8015962:	68ac      	ldr	r4, [r5, #8]
 8015964:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015968:	3201      	adds	r2, #1
 801596a:	42b2      	cmp	r2, r6
 801596c:	d1f4      	bne.n	8015958 <rcl_wait+0x1a0>
 801596e:	69ee      	ldr	r6, [r5, #28]
 8015970:	2200      	movs	r2, #0
 8015972:	b91e      	cbnz	r6, 801597c <rcl_wait+0x1c4>
 8015974:	e00d      	b.n	8015992 <rcl_wait+0x1da>
 8015976:	3201      	adds	r2, #1
 8015978:	42b2      	cmp	r2, r6
 801597a:	d00a      	beq.n	8015992 <rcl_wait+0x1da>
 801597c:	6a19      	ldr	r1, [r3, #32]
 801597e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015982:	2900      	cmp	r1, #0
 8015984:	d1f7      	bne.n	8015976 <rcl_wait+0x1be>
 8015986:	69ac      	ldr	r4, [r5, #24]
 8015988:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801598c:	3201      	adds	r2, #1
 801598e:	42b2      	cmp	r2, r6
 8015990:	d1f4      	bne.n	801597c <rcl_wait+0x1c4>
 8015992:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8015994:	2200      	movs	r2, #0
 8015996:	b91e      	cbnz	r6, 80159a0 <rcl_wait+0x1e8>
 8015998:	e00d      	b.n	80159b6 <rcl_wait+0x1fe>
 801599a:	3201      	adds	r2, #1
 801599c:	4296      	cmp	r6, r2
 801599e:	d00a      	beq.n	80159b6 <rcl_wait+0x1fe>
 80159a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80159a2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80159a6:	2900      	cmp	r1, #0
 80159a8:	d1f7      	bne.n	801599a <rcl_wait+0x1e2>
 80159aa:	6a2c      	ldr	r4, [r5, #32]
 80159ac:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80159b0:	3201      	adds	r2, #1
 80159b2:	4296      	cmp	r6, r2
 80159b4:	d1f4      	bne.n	80159a0 <rcl_wait+0x1e8>
 80159b6:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80159b8:	2200      	movs	r2, #0
 80159ba:	b91e      	cbnz	r6, 80159c4 <rcl_wait+0x20c>
 80159bc:	e00d      	b.n	80159da <rcl_wait+0x222>
 80159be:	3201      	adds	r2, #1
 80159c0:	42b2      	cmp	r2, r6
 80159c2:	d00a      	beq.n	80159da <rcl_wait+0x222>
 80159c4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80159c6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80159ca:	2900      	cmp	r1, #0
 80159cc:	d1f7      	bne.n	80159be <rcl_wait+0x206>
 80159ce:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80159d0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80159d4:	3201      	adds	r2, #1
 80159d6:	42b2      	cmp	r2, r6
 80159d8:	d1f4      	bne.n	80159c4 <rcl_wait+0x20c>
 80159da:	f1b8 0f02 	cmp.w	r8, #2
 80159de:	f47f af08 	bne.w	80157f2 <rcl_wait+0x3a>
 80159e2:	464b      	mov	r3, r9
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	bf08      	it	eq
 80159e8:	2002      	moveq	r0, #2
 80159ea:	e702      	b.n	80157f2 <rcl_wait+0x3a>
 80159ec:	2a00      	cmp	r2, #0
 80159ee:	d03a      	beq.n	8015a66 <rcl_wait+0x2ae>
 80159f0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80159f4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80159f8:	e70e      	b.n	8015818 <rcl_wait+0x60>
 80159fa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80159fe:	b00d      	add	sp, #52	@ 0x34
 8015a00:	ecbd 8b02 	vpop	{d8}
 8015a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a08:	9b04      	ldr	r3, [sp, #16]
 8015a0a:	2b01      	cmp	r3, #1
 8015a0c:	9b05      	ldr	r3, [sp, #20]
 8015a0e:	f173 0300 	sbcs.w	r3, r3, #0
 8015a12:	db24      	blt.n	8015a5e <rcl_wait+0x2a6>
 8015a14:	2f00      	cmp	r7, #0
 8015a16:	bfbc      	itt	lt
 8015a18:	f04f 0800 	movlt.w	r8, #0
 8015a1c:	4647      	movlt	r7, r8
 8015a1e:	a31e      	add	r3, pc, #120	@ (adr r3, 8015a98 <rcl_wait+0x2e0>)
 8015a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a24:	4640      	mov	r0, r8
 8015a26:	4639      	mov	r1, r7
 8015a28:	f7eb f8ce 	bl	8000bc8 <__aeabi_ldivmod>
 8015a2c:	a31a      	add	r3, pc, #104	@ (adr r3, 8015a98 <rcl_wait+0x2e0>)
 8015a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a32:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015a36:	4640      	mov	r0, r8
 8015a38:	4639      	mov	r1, r7
 8015a3a:	f7eb f8c5 	bl	8000bc8 <__aeabi_ldivmod>
 8015a3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015a42:	ab08      	add	r3, sp, #32
 8015a44:	e73e      	b.n	80158c4 <rcl_wait+0x10c>
 8015a46:	2001      	movs	r0, #1
 8015a48:	b00d      	add	sp, #52	@ 0x34
 8015a4a:	ecbd 8b02 	vpop	{d8}
 8015a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a52:	200b      	movs	r0, #11
 8015a54:	b00d      	add	sp, #52	@ 0x34
 8015a56:	ecbd 8b02 	vpop	{d8}
 8015a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a5e:	465b      	mov	r3, fp
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d1d7      	bne.n	8015a14 <rcl_wait+0x25c>
 8015a64:	e72e      	b.n	80158c4 <rcl_wait+0x10c>
 8015a66:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015a6a:	430b      	orrs	r3, r1
 8015a6c:	bf08      	it	eq
 8015a6e:	4691      	moveq	r9, r2
 8015a70:	f43f af21 	beq.w	80158b6 <rcl_wait+0xfe>
 8015a74:	9b04      	ldr	r3, [sp, #16]
 8015a76:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015a7a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015a7e:	2b01      	cmp	r3, #1
 8015a80:	9b05      	ldr	r3, [sp, #20]
 8015a82:	f173 0300 	sbcs.w	r3, r3, #0
 8015a86:	f04f 0300 	mov.w	r3, #0
 8015a8a:	4699      	mov	r9, r3
 8015a8c:	dac2      	bge.n	8015a14 <rcl_wait+0x25c>
 8015a8e:	e719      	b.n	80158c4 <rcl_wait+0x10c>
 8015a90:	ffffffff 	.word	0xffffffff
 8015a94:	7fffffff 	.word	0x7fffffff
 8015a98:	3b9aca00 	.word	0x3b9aca00
 8015a9c:	00000000 	.word	0x00000000

08015aa0 <rcl_action_take_goal_response>:
 8015aa0:	2800      	cmp	r0, #0
 8015aa2:	d039      	beq.n	8015b18 <rcl_action_take_goal_response+0x78>
 8015aa4:	b570      	push	{r4, r5, r6, lr}
 8015aa6:	4604      	mov	r4, r0
 8015aa8:	6800      	ldr	r0, [r0, #0]
 8015aaa:	b380      	cbz	r0, 8015b0e <rcl_action_take_goal_response+0x6e>
 8015aac:	460d      	mov	r5, r1
 8015aae:	4616      	mov	r6, r2
 8015ab0:	f7fd ff8e 	bl	80139d0 <rcl_client_is_valid>
 8015ab4:	b330      	cbz	r0, 8015b04 <rcl_action_take_goal_response+0x64>
 8015ab6:	6820      	ldr	r0, [r4, #0]
 8015ab8:	3004      	adds	r0, #4
 8015aba:	f7fd ff89 	bl	80139d0 <rcl_client_is_valid>
 8015abe:	b308      	cbz	r0, 8015b04 <rcl_action_take_goal_response+0x64>
 8015ac0:	6820      	ldr	r0, [r4, #0]
 8015ac2:	3008      	adds	r0, #8
 8015ac4:	f7fd ff84 	bl	80139d0 <rcl_client_is_valid>
 8015ac8:	b1e0      	cbz	r0, 8015b04 <rcl_action_take_goal_response+0x64>
 8015aca:	6820      	ldr	r0, [r4, #0]
 8015acc:	300c      	adds	r0, #12
 8015ace:	f7fe fdf3 	bl	80146b8 <rcl_subscription_is_valid>
 8015ad2:	b1b8      	cbz	r0, 8015b04 <rcl_action_take_goal_response+0x64>
 8015ad4:	6820      	ldr	r0, [r4, #0]
 8015ad6:	3010      	adds	r0, #16
 8015ad8:	f7fe fdee 	bl	80146b8 <rcl_subscription_is_valid>
 8015adc:	b190      	cbz	r0, 8015b04 <rcl_action_take_goal_response+0x64>
 8015ade:	b1cd      	cbz	r5, 8015b14 <rcl_action_take_goal_response+0x74>
 8015ae0:	b1c6      	cbz	r6, 8015b14 <rcl_action_take_goal_response+0x74>
 8015ae2:	6820      	ldr	r0, [r4, #0]
 8015ae4:	4632      	mov	r2, r6
 8015ae6:	4629      	mov	r1, r5
 8015ae8:	f7fd ff2a 	bl	8013940 <rcl_take_response>
 8015aec:	b148      	cbz	r0, 8015b02 <rcl_action_take_goal_response+0x62>
 8015aee:	280a      	cmp	r0, #10
 8015af0:	d007      	beq.n	8015b02 <rcl_action_take_goal_response+0x62>
 8015af2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015af6:	f640 0337 	movw	r3, #2103	@ 0x837
 8015afa:	4290      	cmp	r0, r2
 8015afc:	bf0c      	ite	eq
 8015afe:	4618      	moveq	r0, r3
 8015b00:	2001      	movne	r0, #1
 8015b02:	bd70      	pop	{r4, r5, r6, pc}
 8015b04:	f7f7 ff74 	bl	800d9f0 <rcutils_reset_error>
 8015b08:	f640 0036 	movw	r0, #2102	@ 0x836
 8015b0c:	bd70      	pop	{r4, r5, r6, pc}
 8015b0e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015b12:	bd70      	pop	{r4, r5, r6, pc}
 8015b14:	200b      	movs	r0, #11
 8015b16:	bd70      	pop	{r4, r5, r6, pc}
 8015b18:	f640 0036 	movw	r0, #2102	@ 0x836
 8015b1c:	4770      	bx	lr
 8015b1e:	bf00      	nop

08015b20 <rcl_action_send_result_request>:
 8015b20:	b390      	cbz	r0, 8015b88 <rcl_action_send_result_request+0x68>
 8015b22:	b570      	push	{r4, r5, r6, lr}
 8015b24:	4604      	mov	r4, r0
 8015b26:	6800      	ldr	r0, [r0, #0]
 8015b28:	b348      	cbz	r0, 8015b7e <rcl_action_send_result_request+0x5e>
 8015b2a:	460d      	mov	r5, r1
 8015b2c:	4616      	mov	r6, r2
 8015b2e:	f7fd ff4f 	bl	80139d0 <rcl_client_is_valid>
 8015b32:	b1f8      	cbz	r0, 8015b74 <rcl_action_send_result_request+0x54>
 8015b34:	6820      	ldr	r0, [r4, #0]
 8015b36:	3004      	adds	r0, #4
 8015b38:	f7fd ff4a 	bl	80139d0 <rcl_client_is_valid>
 8015b3c:	b1d0      	cbz	r0, 8015b74 <rcl_action_send_result_request+0x54>
 8015b3e:	6820      	ldr	r0, [r4, #0]
 8015b40:	3008      	adds	r0, #8
 8015b42:	f7fd ff45 	bl	80139d0 <rcl_client_is_valid>
 8015b46:	b1a8      	cbz	r0, 8015b74 <rcl_action_send_result_request+0x54>
 8015b48:	6820      	ldr	r0, [r4, #0]
 8015b4a:	300c      	adds	r0, #12
 8015b4c:	f7fe fdb4 	bl	80146b8 <rcl_subscription_is_valid>
 8015b50:	b180      	cbz	r0, 8015b74 <rcl_action_send_result_request+0x54>
 8015b52:	6820      	ldr	r0, [r4, #0]
 8015b54:	3010      	adds	r0, #16
 8015b56:	f7fe fdaf 	bl	80146b8 <rcl_subscription_is_valid>
 8015b5a:	b158      	cbz	r0, 8015b74 <rcl_action_send_result_request+0x54>
 8015b5c:	b195      	cbz	r5, 8015b84 <rcl_action_send_result_request+0x64>
 8015b5e:	b18e      	cbz	r6, 8015b84 <rcl_action_send_result_request+0x64>
 8015b60:	6820      	ldr	r0, [r4, #0]
 8015b62:	4632      	mov	r2, r6
 8015b64:	4629      	mov	r1, r5
 8015b66:	3008      	adds	r0, #8
 8015b68:	f7fd feb4 	bl	80138d4 <rcl_send_request>
 8015b6c:	3800      	subs	r0, #0
 8015b6e:	bf18      	it	ne
 8015b70:	2001      	movne	r0, #1
 8015b72:	bd70      	pop	{r4, r5, r6, pc}
 8015b74:	f7f7 ff3c 	bl	800d9f0 <rcutils_reset_error>
 8015b78:	f640 0036 	movw	r0, #2102	@ 0x836
 8015b7c:	bd70      	pop	{r4, r5, r6, pc}
 8015b7e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015b82:	bd70      	pop	{r4, r5, r6, pc}
 8015b84:	200b      	movs	r0, #11
 8015b86:	bd70      	pop	{r4, r5, r6, pc}
 8015b88:	f640 0036 	movw	r0, #2102	@ 0x836
 8015b8c:	4770      	bx	lr
 8015b8e:	bf00      	nop

08015b90 <rcl_action_take_result_response>:
 8015b90:	2800      	cmp	r0, #0
 8015b92:	d03a      	beq.n	8015c0a <rcl_action_take_result_response+0x7a>
 8015b94:	b570      	push	{r4, r5, r6, lr}
 8015b96:	4604      	mov	r4, r0
 8015b98:	6800      	ldr	r0, [r0, #0]
 8015b9a:	b388      	cbz	r0, 8015c00 <rcl_action_take_result_response+0x70>
 8015b9c:	460d      	mov	r5, r1
 8015b9e:	4616      	mov	r6, r2
 8015ba0:	f7fd ff16 	bl	80139d0 <rcl_client_is_valid>
 8015ba4:	b338      	cbz	r0, 8015bf6 <rcl_action_take_result_response+0x66>
 8015ba6:	6820      	ldr	r0, [r4, #0]
 8015ba8:	3004      	adds	r0, #4
 8015baa:	f7fd ff11 	bl	80139d0 <rcl_client_is_valid>
 8015bae:	b310      	cbz	r0, 8015bf6 <rcl_action_take_result_response+0x66>
 8015bb0:	6820      	ldr	r0, [r4, #0]
 8015bb2:	3008      	adds	r0, #8
 8015bb4:	f7fd ff0c 	bl	80139d0 <rcl_client_is_valid>
 8015bb8:	b1e8      	cbz	r0, 8015bf6 <rcl_action_take_result_response+0x66>
 8015bba:	6820      	ldr	r0, [r4, #0]
 8015bbc:	300c      	adds	r0, #12
 8015bbe:	f7fe fd7b 	bl	80146b8 <rcl_subscription_is_valid>
 8015bc2:	b1c0      	cbz	r0, 8015bf6 <rcl_action_take_result_response+0x66>
 8015bc4:	6820      	ldr	r0, [r4, #0]
 8015bc6:	3010      	adds	r0, #16
 8015bc8:	f7fe fd76 	bl	80146b8 <rcl_subscription_is_valid>
 8015bcc:	b198      	cbz	r0, 8015bf6 <rcl_action_take_result_response+0x66>
 8015bce:	b1d5      	cbz	r5, 8015c06 <rcl_action_take_result_response+0x76>
 8015bd0:	b1ce      	cbz	r6, 8015c06 <rcl_action_take_result_response+0x76>
 8015bd2:	6820      	ldr	r0, [r4, #0]
 8015bd4:	4632      	mov	r2, r6
 8015bd6:	4629      	mov	r1, r5
 8015bd8:	3008      	adds	r0, #8
 8015bda:	f7fd feb1 	bl	8013940 <rcl_take_response>
 8015bde:	b148      	cbz	r0, 8015bf4 <rcl_action_take_result_response+0x64>
 8015be0:	280a      	cmp	r0, #10
 8015be2:	d007      	beq.n	8015bf4 <rcl_action_take_result_response+0x64>
 8015be4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015be8:	f640 0337 	movw	r3, #2103	@ 0x837
 8015bec:	4290      	cmp	r0, r2
 8015bee:	bf0c      	ite	eq
 8015bf0:	4618      	moveq	r0, r3
 8015bf2:	2001      	movne	r0, #1
 8015bf4:	bd70      	pop	{r4, r5, r6, pc}
 8015bf6:	f7f7 fefb 	bl	800d9f0 <rcutils_reset_error>
 8015bfa:	f640 0036 	movw	r0, #2102	@ 0x836
 8015bfe:	bd70      	pop	{r4, r5, r6, pc}
 8015c00:	f640 0036 	movw	r0, #2102	@ 0x836
 8015c04:	bd70      	pop	{r4, r5, r6, pc}
 8015c06:	200b      	movs	r0, #11
 8015c08:	bd70      	pop	{r4, r5, r6, pc}
 8015c0a:	f640 0036 	movw	r0, #2102	@ 0x836
 8015c0e:	4770      	bx	lr

08015c10 <rcl_action_take_cancel_response>:
 8015c10:	2800      	cmp	r0, #0
 8015c12:	d03a      	beq.n	8015c8a <rcl_action_take_cancel_response+0x7a>
 8015c14:	b570      	push	{r4, r5, r6, lr}
 8015c16:	4604      	mov	r4, r0
 8015c18:	6800      	ldr	r0, [r0, #0]
 8015c1a:	b388      	cbz	r0, 8015c80 <rcl_action_take_cancel_response+0x70>
 8015c1c:	460d      	mov	r5, r1
 8015c1e:	4616      	mov	r6, r2
 8015c20:	f7fd fed6 	bl	80139d0 <rcl_client_is_valid>
 8015c24:	b338      	cbz	r0, 8015c76 <rcl_action_take_cancel_response+0x66>
 8015c26:	6820      	ldr	r0, [r4, #0]
 8015c28:	3004      	adds	r0, #4
 8015c2a:	f7fd fed1 	bl	80139d0 <rcl_client_is_valid>
 8015c2e:	b310      	cbz	r0, 8015c76 <rcl_action_take_cancel_response+0x66>
 8015c30:	6820      	ldr	r0, [r4, #0]
 8015c32:	3008      	adds	r0, #8
 8015c34:	f7fd fecc 	bl	80139d0 <rcl_client_is_valid>
 8015c38:	b1e8      	cbz	r0, 8015c76 <rcl_action_take_cancel_response+0x66>
 8015c3a:	6820      	ldr	r0, [r4, #0]
 8015c3c:	300c      	adds	r0, #12
 8015c3e:	f7fe fd3b 	bl	80146b8 <rcl_subscription_is_valid>
 8015c42:	b1c0      	cbz	r0, 8015c76 <rcl_action_take_cancel_response+0x66>
 8015c44:	6820      	ldr	r0, [r4, #0]
 8015c46:	3010      	adds	r0, #16
 8015c48:	f7fe fd36 	bl	80146b8 <rcl_subscription_is_valid>
 8015c4c:	b198      	cbz	r0, 8015c76 <rcl_action_take_cancel_response+0x66>
 8015c4e:	b1d5      	cbz	r5, 8015c86 <rcl_action_take_cancel_response+0x76>
 8015c50:	b1ce      	cbz	r6, 8015c86 <rcl_action_take_cancel_response+0x76>
 8015c52:	6820      	ldr	r0, [r4, #0]
 8015c54:	4632      	mov	r2, r6
 8015c56:	4629      	mov	r1, r5
 8015c58:	3004      	adds	r0, #4
 8015c5a:	f7fd fe71 	bl	8013940 <rcl_take_response>
 8015c5e:	b148      	cbz	r0, 8015c74 <rcl_action_take_cancel_response+0x64>
 8015c60:	280a      	cmp	r0, #10
 8015c62:	d007      	beq.n	8015c74 <rcl_action_take_cancel_response+0x64>
 8015c64:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015c68:	f640 0337 	movw	r3, #2103	@ 0x837
 8015c6c:	4290      	cmp	r0, r2
 8015c6e:	bf0c      	ite	eq
 8015c70:	4618      	moveq	r0, r3
 8015c72:	2001      	movne	r0, #1
 8015c74:	bd70      	pop	{r4, r5, r6, pc}
 8015c76:	f7f7 febb 	bl	800d9f0 <rcutils_reset_error>
 8015c7a:	f640 0036 	movw	r0, #2102	@ 0x836
 8015c7e:	bd70      	pop	{r4, r5, r6, pc}
 8015c80:	f640 0036 	movw	r0, #2102	@ 0x836
 8015c84:	bd70      	pop	{r4, r5, r6, pc}
 8015c86:	200b      	movs	r0, #11
 8015c88:	bd70      	pop	{r4, r5, r6, pc}
 8015c8a:	f640 0036 	movw	r0, #2102	@ 0x836
 8015c8e:	4770      	bx	lr

08015c90 <rcl_action_take_feedback>:
 8015c90:	2800      	cmp	r0, #0
 8015c92:	d038      	beq.n	8015d06 <rcl_action_take_feedback+0x76>
 8015c94:	b530      	push	{r4, r5, lr}
 8015c96:	4604      	mov	r4, r0
 8015c98:	6800      	ldr	r0, [r0, #0]
 8015c9a:	b091      	sub	sp, #68	@ 0x44
 8015c9c:	b378      	cbz	r0, 8015cfe <rcl_action_take_feedback+0x6e>
 8015c9e:	460d      	mov	r5, r1
 8015ca0:	f7fd fe96 	bl	80139d0 <rcl_client_is_valid>
 8015ca4:	b328      	cbz	r0, 8015cf2 <rcl_action_take_feedback+0x62>
 8015ca6:	6820      	ldr	r0, [r4, #0]
 8015ca8:	3004      	adds	r0, #4
 8015caa:	f7fd fe91 	bl	80139d0 <rcl_client_is_valid>
 8015cae:	b300      	cbz	r0, 8015cf2 <rcl_action_take_feedback+0x62>
 8015cb0:	6820      	ldr	r0, [r4, #0]
 8015cb2:	3008      	adds	r0, #8
 8015cb4:	f7fd fe8c 	bl	80139d0 <rcl_client_is_valid>
 8015cb8:	b1d8      	cbz	r0, 8015cf2 <rcl_action_take_feedback+0x62>
 8015cba:	6820      	ldr	r0, [r4, #0]
 8015cbc:	300c      	adds	r0, #12
 8015cbe:	f7fe fcfb 	bl	80146b8 <rcl_subscription_is_valid>
 8015cc2:	b1b0      	cbz	r0, 8015cf2 <rcl_action_take_feedback+0x62>
 8015cc4:	6820      	ldr	r0, [r4, #0]
 8015cc6:	3010      	adds	r0, #16
 8015cc8:	f7fe fcf6 	bl	80146b8 <rcl_subscription_is_valid>
 8015ccc:	b188      	cbz	r0, 8015cf2 <rcl_action_take_feedback+0x62>
 8015cce:	b1ed      	cbz	r5, 8015d0c <rcl_action_take_feedback+0x7c>
 8015cd0:	6820      	ldr	r0, [r4, #0]
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	466a      	mov	r2, sp
 8015cd6:	4629      	mov	r1, r5
 8015cd8:	300c      	adds	r0, #12
 8015cda:	f7fe fc8f 	bl	80145fc <rcl_take>
 8015cde:	b160      	cbz	r0, 8015cfa <rcl_action_take_feedback+0x6a>
 8015ce0:	f240 1391 	movw	r3, #401	@ 0x191
 8015ce4:	4298      	cmp	r0, r3
 8015ce6:	d014      	beq.n	8015d12 <rcl_action_take_feedback+0x82>
 8015ce8:	280a      	cmp	r0, #10
 8015cea:	bf18      	it	ne
 8015cec:	2001      	movne	r0, #1
 8015cee:	b011      	add	sp, #68	@ 0x44
 8015cf0:	bd30      	pop	{r4, r5, pc}
 8015cf2:	f7f7 fe7d 	bl	800d9f0 <rcutils_reset_error>
 8015cf6:	f640 0036 	movw	r0, #2102	@ 0x836
 8015cfa:	b011      	add	sp, #68	@ 0x44
 8015cfc:	bd30      	pop	{r4, r5, pc}
 8015cfe:	f640 0036 	movw	r0, #2102	@ 0x836
 8015d02:	b011      	add	sp, #68	@ 0x44
 8015d04:	bd30      	pop	{r4, r5, pc}
 8015d06:	f640 0036 	movw	r0, #2102	@ 0x836
 8015d0a:	4770      	bx	lr
 8015d0c:	200b      	movs	r0, #11
 8015d0e:	b011      	add	sp, #68	@ 0x44
 8015d10:	bd30      	pop	{r4, r5, pc}
 8015d12:	f640 0037 	movw	r0, #2103	@ 0x837
 8015d16:	e7f0      	b.n	8015cfa <rcl_action_take_feedback+0x6a>

08015d18 <rcl_action_wait_set_add_action_client>:
 8015d18:	2800      	cmp	r0, #0
 8015d1a:	d048      	beq.n	8015dae <rcl_action_wait_set_add_action_client+0x96>
 8015d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d1e:	460c      	mov	r4, r1
 8015d20:	2900      	cmp	r1, #0
 8015d22:	d03c      	beq.n	8015d9e <rcl_action_wait_set_add_action_client+0x86>
 8015d24:	4605      	mov	r5, r0
 8015d26:	6808      	ldr	r0, [r1, #0]
 8015d28:	2800      	cmp	r0, #0
 8015d2a:	d038      	beq.n	8015d9e <rcl_action_wait_set_add_action_client+0x86>
 8015d2c:	4617      	mov	r7, r2
 8015d2e:	461e      	mov	r6, r3
 8015d30:	f7fd fe4e 	bl	80139d0 <rcl_client_is_valid>
 8015d34:	b3b0      	cbz	r0, 8015da4 <rcl_action_wait_set_add_action_client+0x8c>
 8015d36:	6820      	ldr	r0, [r4, #0]
 8015d38:	3004      	adds	r0, #4
 8015d3a:	f7fd fe49 	bl	80139d0 <rcl_client_is_valid>
 8015d3e:	b388      	cbz	r0, 8015da4 <rcl_action_wait_set_add_action_client+0x8c>
 8015d40:	6820      	ldr	r0, [r4, #0]
 8015d42:	3008      	adds	r0, #8
 8015d44:	f7fd fe44 	bl	80139d0 <rcl_client_is_valid>
 8015d48:	b360      	cbz	r0, 8015da4 <rcl_action_wait_set_add_action_client+0x8c>
 8015d4a:	6820      	ldr	r0, [r4, #0]
 8015d4c:	300c      	adds	r0, #12
 8015d4e:	f7fe fcb3 	bl	80146b8 <rcl_subscription_is_valid>
 8015d52:	b338      	cbz	r0, 8015da4 <rcl_action_wait_set_add_action_client+0x8c>
 8015d54:	6820      	ldr	r0, [r4, #0]
 8015d56:	3010      	adds	r0, #16
 8015d58:	f7fe fcae 	bl	80146b8 <rcl_subscription_is_valid>
 8015d5c:	b310      	cbz	r0, 8015da4 <rcl_action_wait_set_add_action_client+0x8c>
 8015d5e:	6821      	ldr	r1, [r4, #0]
 8015d60:	4628      	mov	r0, r5
 8015d62:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8015d66:	f7ff fccd 	bl	8015704 <rcl_wait_set_add_client>
 8015d6a:	b9b8      	cbnz	r0, 8015d9c <rcl_action_wait_set_add_action_client+0x84>
 8015d6c:	6821      	ldr	r1, [r4, #0]
 8015d6e:	4628      	mov	r0, r5
 8015d70:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8015d74:	3104      	adds	r1, #4
 8015d76:	f7ff fcc5 	bl	8015704 <rcl_wait_set_add_client>
 8015d7a:	b978      	cbnz	r0, 8015d9c <rcl_action_wait_set_add_action_client+0x84>
 8015d7c:	6821      	ldr	r1, [r4, #0]
 8015d7e:	4628      	mov	r0, r5
 8015d80:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8015d84:	3108      	adds	r1, #8
 8015d86:	f7ff fcbd 	bl	8015704 <rcl_wait_set_add_client>
 8015d8a:	b938      	cbnz	r0, 8015d9c <rcl_action_wait_set_add_action_client+0x84>
 8015d8c:	6821      	ldr	r1, [r4, #0]
 8015d8e:	4628      	mov	r0, r5
 8015d90:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8015d94:	310c      	adds	r1, #12
 8015d96:	f7ff f96d 	bl	8015074 <rcl_wait_set_add_subscription>
 8015d9a:	b158      	cbz	r0, 8015db4 <rcl_action_wait_set_add_action_client+0x9c>
 8015d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d9e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015da4:	f7f7 fe24 	bl	800d9f0 <rcutils_reset_error>
 8015da8:	f640 0036 	movw	r0, #2102	@ 0x836
 8015dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015dae:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015db2:	4770      	bx	lr
 8015db4:	6821      	ldr	r1, [r4, #0]
 8015db6:	4628      	mov	r0, r5
 8015db8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8015dbc:	3110      	adds	r1, #16
 8015dbe:	f7ff f959 	bl	8015074 <rcl_wait_set_add_subscription>
 8015dc2:	2800      	cmp	r0, #0
 8015dc4:	d1ea      	bne.n	8015d9c <rcl_action_wait_set_add_action_client+0x84>
 8015dc6:	b11f      	cbz	r7, 8015dd0 <rcl_action_wait_set_add_action_client+0xb8>
 8015dc8:	6823      	ldr	r3, [r4, #0]
 8015dca:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8015dce:	603b      	str	r3, [r7, #0]
 8015dd0:	2e00      	cmp	r6, #0
 8015dd2:	d0e3      	beq.n	8015d9c <rcl_action_wait_set_add_action_client+0x84>
 8015dd4:	6823      	ldr	r3, [r4, #0]
 8015dd6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8015dda:	6033      	str	r3, [r6, #0]
 8015ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015dde:	bf00      	nop

08015de0 <rcl_action_client_wait_set_get_entities_ready>:
 8015de0:	2800      	cmp	r0, #0
 8015de2:	f000 808d 	beq.w	8015f00 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8015de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dea:	460c      	mov	r4, r1
 8015dec:	2900      	cmp	r1, #0
 8015dee:	d077      	beq.n	8015ee0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015df0:	4605      	mov	r5, r0
 8015df2:	6808      	ldr	r0, [r1, #0]
 8015df4:	2800      	cmp	r0, #0
 8015df6:	d073      	beq.n	8015ee0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015df8:	4616      	mov	r6, r2
 8015dfa:	461f      	mov	r7, r3
 8015dfc:	f7fd fde8 	bl	80139d0 <rcl_client_is_valid>
 8015e00:	2800      	cmp	r0, #0
 8015e02:	d071      	beq.n	8015ee8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015e04:	6820      	ldr	r0, [r4, #0]
 8015e06:	3004      	adds	r0, #4
 8015e08:	f7fd fde2 	bl	80139d0 <rcl_client_is_valid>
 8015e0c:	2800      	cmp	r0, #0
 8015e0e:	d06b      	beq.n	8015ee8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015e10:	6820      	ldr	r0, [r4, #0]
 8015e12:	3008      	adds	r0, #8
 8015e14:	f7fd fddc 	bl	80139d0 <rcl_client_is_valid>
 8015e18:	2800      	cmp	r0, #0
 8015e1a:	d065      	beq.n	8015ee8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015e1c:	6820      	ldr	r0, [r4, #0]
 8015e1e:	300c      	adds	r0, #12
 8015e20:	f7fe fc4a 	bl	80146b8 <rcl_subscription_is_valid>
 8015e24:	2800      	cmp	r0, #0
 8015e26:	d05f      	beq.n	8015ee8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015e28:	6820      	ldr	r0, [r4, #0]
 8015e2a:	3010      	adds	r0, #16
 8015e2c:	f7fe fc44 	bl	80146b8 <rcl_subscription_is_valid>
 8015e30:	2800      	cmp	r0, #0
 8015e32:	d059      	beq.n	8015ee8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015e34:	2e00      	cmp	r6, #0
 8015e36:	d060      	beq.n	8015efa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015e38:	2f00      	cmp	r7, #0
 8015e3a:	d05e      	beq.n	8015efa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015e3c:	9b06      	ldr	r3, [sp, #24]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d05b      	beq.n	8015efa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015e42:	9b07      	ldr	r3, [sp, #28]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d058      	beq.n	8015efa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015e48:	9b08      	ldr	r3, [sp, #32]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d055      	beq.n	8015efa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015e4e:	6823      	ldr	r3, [r4, #0]
 8015e50:	686a      	ldr	r2, [r5, #4]
 8015e52:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8015e56:	428a      	cmp	r2, r1
 8015e58:	d94c      	bls.n	8015ef4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015e5a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8015e5e:	4282      	cmp	r2, r0
 8015e60:	d948      	bls.n	8015ef4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015e62:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8015e66:	69ea      	ldr	r2, [r5, #28]
 8015e68:	42a2      	cmp	r2, r4
 8015e6a:	d943      	bls.n	8015ef4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015e6c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8015e70:	4562      	cmp	r2, ip
 8015e72:	d93f      	bls.n	8015ef4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015e74:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8015e78:	4572      	cmp	r2, lr
 8015e7a:	d93b      	bls.n	8015ef4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015e7c:	69aa      	ldr	r2, [r5, #24]
 8015e7e:	682d      	ldr	r5, [r5, #0]
 8015e80:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8015e84:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8015e88:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8015e8c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8015e90:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8015e94:	f103 0c0c 	add.w	ip, r3, #12
 8015e98:	eba5 050c 	sub.w	r5, r5, ip
 8015e9c:	fab5 f585 	clz	r5, r5
 8015ea0:	096d      	lsrs	r5, r5, #5
 8015ea2:	7035      	strb	r5, [r6, #0]
 8015ea4:	f103 0510 	add.w	r5, r3, #16
 8015ea8:	1b64      	subs	r4, r4, r5
 8015eaa:	fab4 f484 	clz	r4, r4
 8015eae:	0964      	lsrs	r4, r4, #5
 8015eb0:	703c      	strb	r4, [r7, #0]
 8015eb2:	eba3 0008 	sub.w	r0, r3, r8
 8015eb6:	1d1c      	adds	r4, r3, #4
 8015eb8:	3308      	adds	r3, #8
 8015eba:	1ad3      	subs	r3, r2, r3
 8015ebc:	fab0 f080 	clz	r0, r0
 8015ec0:	9a06      	ldr	r2, [sp, #24]
 8015ec2:	0940      	lsrs	r0, r0, #5
 8015ec4:	1b09      	subs	r1, r1, r4
 8015ec6:	7010      	strb	r0, [r2, #0]
 8015ec8:	fab1 f181 	clz	r1, r1
 8015ecc:	9a07      	ldr	r2, [sp, #28]
 8015ece:	0949      	lsrs	r1, r1, #5
 8015ed0:	7011      	strb	r1, [r2, #0]
 8015ed2:	fab3 f383 	clz	r3, r3
 8015ed6:	9a08      	ldr	r2, [sp, #32]
 8015ed8:	095b      	lsrs	r3, r3, #5
 8015eda:	2000      	movs	r0, #0
 8015edc:	7013      	strb	r3, [r2, #0]
 8015ede:	e001      	b.n	8015ee4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8015ee0:	f640 0036 	movw	r0, #2102	@ 0x836
 8015ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ee8:	f7f7 fd82 	bl	800d9f0 <rcutils_reset_error>
 8015eec:	f640 0036 	movw	r0, #2102	@ 0x836
 8015ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ef4:	2001      	movs	r0, #1
 8015ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015efa:	200b      	movs	r0, #11
 8015efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f00:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015f04:	4770      	bx	lr
 8015f06:	bf00      	nop

08015f08 <rcl_action_take_goal_request>:
 8015f08:	2800      	cmp	r0, #0
 8015f0a:	d039      	beq.n	8015f80 <rcl_action_take_goal_request+0x78>
 8015f0c:	b570      	push	{r4, r5, r6, lr}
 8015f0e:	4604      	mov	r4, r0
 8015f10:	6800      	ldr	r0, [r0, #0]
 8015f12:	b380      	cbz	r0, 8015f76 <rcl_action_take_goal_request+0x6e>
 8015f14:	460d      	mov	r5, r1
 8015f16:	4616      	mov	r6, r2
 8015f18:	f7fe fb66 	bl	80145e8 <rcl_service_is_valid>
 8015f1c:	b330      	cbz	r0, 8015f6c <rcl_action_take_goal_request+0x64>
 8015f1e:	6820      	ldr	r0, [r4, #0]
 8015f20:	3004      	adds	r0, #4
 8015f22:	f7fe fb61 	bl	80145e8 <rcl_service_is_valid>
 8015f26:	b308      	cbz	r0, 8015f6c <rcl_action_take_goal_request+0x64>
 8015f28:	6820      	ldr	r0, [r4, #0]
 8015f2a:	3008      	adds	r0, #8
 8015f2c:	f7fe fb5c 	bl	80145e8 <rcl_service_is_valid>
 8015f30:	b1e0      	cbz	r0, 8015f6c <rcl_action_take_goal_request+0x64>
 8015f32:	6820      	ldr	r0, [r4, #0]
 8015f34:	300c      	adds	r0, #12
 8015f36:	f7f6 fd43 	bl	800c9c0 <rcl_publisher_is_valid>
 8015f3a:	b1b8      	cbz	r0, 8015f6c <rcl_action_take_goal_request+0x64>
 8015f3c:	6820      	ldr	r0, [r4, #0]
 8015f3e:	3010      	adds	r0, #16
 8015f40:	f7f6 fd3e 	bl	800c9c0 <rcl_publisher_is_valid>
 8015f44:	b190      	cbz	r0, 8015f6c <rcl_action_take_goal_request+0x64>
 8015f46:	b1cd      	cbz	r5, 8015f7c <rcl_action_take_goal_request+0x74>
 8015f48:	b1c6      	cbz	r6, 8015f7c <rcl_action_take_goal_request+0x74>
 8015f4a:	6820      	ldr	r0, [r4, #0]
 8015f4c:	4632      	mov	r2, r6
 8015f4e:	4629      	mov	r1, r5
 8015f50:	f7fe faf2 	bl	8014538 <rcl_take_request>
 8015f54:	b148      	cbz	r0, 8015f6a <rcl_action_take_goal_request+0x62>
 8015f56:	280a      	cmp	r0, #10
 8015f58:	d007      	beq.n	8015f6a <rcl_action_take_goal_request+0x62>
 8015f5a:	f240 2259 	movw	r2, #601	@ 0x259
 8015f5e:	f640 0399 	movw	r3, #2201	@ 0x899
 8015f62:	4290      	cmp	r0, r2
 8015f64:	bf0c      	ite	eq
 8015f66:	4618      	moveq	r0, r3
 8015f68:	2001      	movne	r0, #1
 8015f6a:	bd70      	pop	{r4, r5, r6, pc}
 8015f6c:	f7f7 fd40 	bl	800d9f0 <rcutils_reset_error>
 8015f70:	f640 0098 	movw	r0, #2200	@ 0x898
 8015f74:	bd70      	pop	{r4, r5, r6, pc}
 8015f76:	f640 0098 	movw	r0, #2200	@ 0x898
 8015f7a:	bd70      	pop	{r4, r5, r6, pc}
 8015f7c:	200b      	movs	r0, #11
 8015f7e:	bd70      	pop	{r4, r5, r6, pc}
 8015f80:	f640 0098 	movw	r0, #2200	@ 0x898
 8015f84:	4770      	bx	lr
 8015f86:	bf00      	nop

08015f88 <rcl_action_send_goal_response>:
 8015f88:	b390      	cbz	r0, 8015ff0 <rcl_action_send_goal_response+0x68>
 8015f8a:	b570      	push	{r4, r5, r6, lr}
 8015f8c:	4604      	mov	r4, r0
 8015f8e:	6800      	ldr	r0, [r0, #0]
 8015f90:	b348      	cbz	r0, 8015fe6 <rcl_action_send_goal_response+0x5e>
 8015f92:	460d      	mov	r5, r1
 8015f94:	4616      	mov	r6, r2
 8015f96:	f7fe fb27 	bl	80145e8 <rcl_service_is_valid>
 8015f9a:	b1f8      	cbz	r0, 8015fdc <rcl_action_send_goal_response+0x54>
 8015f9c:	6820      	ldr	r0, [r4, #0]
 8015f9e:	3004      	adds	r0, #4
 8015fa0:	f7fe fb22 	bl	80145e8 <rcl_service_is_valid>
 8015fa4:	b1d0      	cbz	r0, 8015fdc <rcl_action_send_goal_response+0x54>
 8015fa6:	6820      	ldr	r0, [r4, #0]
 8015fa8:	3008      	adds	r0, #8
 8015faa:	f7fe fb1d 	bl	80145e8 <rcl_service_is_valid>
 8015fae:	b1a8      	cbz	r0, 8015fdc <rcl_action_send_goal_response+0x54>
 8015fb0:	6820      	ldr	r0, [r4, #0]
 8015fb2:	300c      	adds	r0, #12
 8015fb4:	f7f6 fd04 	bl	800c9c0 <rcl_publisher_is_valid>
 8015fb8:	b180      	cbz	r0, 8015fdc <rcl_action_send_goal_response+0x54>
 8015fba:	6820      	ldr	r0, [r4, #0]
 8015fbc:	3010      	adds	r0, #16
 8015fbe:	f7f6 fcff 	bl	800c9c0 <rcl_publisher_is_valid>
 8015fc2:	b158      	cbz	r0, 8015fdc <rcl_action_send_goal_response+0x54>
 8015fc4:	b195      	cbz	r5, 8015fec <rcl_action_send_goal_response+0x64>
 8015fc6:	b18e      	cbz	r6, 8015fec <rcl_action_send_goal_response+0x64>
 8015fc8:	6820      	ldr	r0, [r4, #0]
 8015fca:	4632      	mov	r2, r6
 8015fcc:	4629      	mov	r1, r5
 8015fce:	f7fe faf3 	bl	80145b8 <rcl_send_response>
 8015fd2:	b110      	cbz	r0, 8015fda <rcl_action_send_goal_response+0x52>
 8015fd4:	2802      	cmp	r0, #2
 8015fd6:	bf18      	it	ne
 8015fd8:	2001      	movne	r0, #1
 8015fda:	bd70      	pop	{r4, r5, r6, pc}
 8015fdc:	f7f7 fd08 	bl	800d9f0 <rcutils_reset_error>
 8015fe0:	f640 0098 	movw	r0, #2200	@ 0x898
 8015fe4:	bd70      	pop	{r4, r5, r6, pc}
 8015fe6:	f640 0098 	movw	r0, #2200	@ 0x898
 8015fea:	bd70      	pop	{r4, r5, r6, pc}
 8015fec:	200b      	movs	r0, #11
 8015fee:	bd70      	pop	{r4, r5, r6, pc}
 8015ff0:	f640 0098 	movw	r0, #2200	@ 0x898
 8015ff4:	4770      	bx	lr
 8015ff6:	bf00      	nop

08015ff8 <rcl_action_take_result_request>:
 8015ff8:	2800      	cmp	r0, #0
 8015ffa:	d03a      	beq.n	8016072 <rcl_action_take_result_request+0x7a>
 8015ffc:	b570      	push	{r4, r5, r6, lr}
 8015ffe:	4604      	mov	r4, r0
 8016000:	6800      	ldr	r0, [r0, #0]
 8016002:	b388      	cbz	r0, 8016068 <rcl_action_take_result_request+0x70>
 8016004:	460d      	mov	r5, r1
 8016006:	4616      	mov	r6, r2
 8016008:	f7fe faee 	bl	80145e8 <rcl_service_is_valid>
 801600c:	b338      	cbz	r0, 801605e <rcl_action_take_result_request+0x66>
 801600e:	6820      	ldr	r0, [r4, #0]
 8016010:	3004      	adds	r0, #4
 8016012:	f7fe fae9 	bl	80145e8 <rcl_service_is_valid>
 8016016:	b310      	cbz	r0, 801605e <rcl_action_take_result_request+0x66>
 8016018:	6820      	ldr	r0, [r4, #0]
 801601a:	3008      	adds	r0, #8
 801601c:	f7fe fae4 	bl	80145e8 <rcl_service_is_valid>
 8016020:	b1e8      	cbz	r0, 801605e <rcl_action_take_result_request+0x66>
 8016022:	6820      	ldr	r0, [r4, #0]
 8016024:	300c      	adds	r0, #12
 8016026:	f7f6 fccb 	bl	800c9c0 <rcl_publisher_is_valid>
 801602a:	b1c0      	cbz	r0, 801605e <rcl_action_take_result_request+0x66>
 801602c:	6820      	ldr	r0, [r4, #0]
 801602e:	3010      	adds	r0, #16
 8016030:	f7f6 fcc6 	bl	800c9c0 <rcl_publisher_is_valid>
 8016034:	b198      	cbz	r0, 801605e <rcl_action_take_result_request+0x66>
 8016036:	b1d5      	cbz	r5, 801606e <rcl_action_take_result_request+0x76>
 8016038:	b1ce      	cbz	r6, 801606e <rcl_action_take_result_request+0x76>
 801603a:	6820      	ldr	r0, [r4, #0]
 801603c:	4632      	mov	r2, r6
 801603e:	4629      	mov	r1, r5
 8016040:	3008      	adds	r0, #8
 8016042:	f7fe fa79 	bl	8014538 <rcl_take_request>
 8016046:	b148      	cbz	r0, 801605c <rcl_action_take_result_request+0x64>
 8016048:	280a      	cmp	r0, #10
 801604a:	d007      	beq.n	801605c <rcl_action_take_result_request+0x64>
 801604c:	f240 2259 	movw	r2, #601	@ 0x259
 8016050:	f640 0399 	movw	r3, #2201	@ 0x899
 8016054:	4290      	cmp	r0, r2
 8016056:	bf0c      	ite	eq
 8016058:	4618      	moveq	r0, r3
 801605a:	2001      	movne	r0, #1
 801605c:	bd70      	pop	{r4, r5, r6, pc}
 801605e:	f7f7 fcc7 	bl	800d9f0 <rcutils_reset_error>
 8016062:	f640 0098 	movw	r0, #2200	@ 0x898
 8016066:	bd70      	pop	{r4, r5, r6, pc}
 8016068:	f640 0098 	movw	r0, #2200	@ 0x898
 801606c:	bd70      	pop	{r4, r5, r6, pc}
 801606e:	200b      	movs	r0, #11
 8016070:	bd70      	pop	{r4, r5, r6, pc}
 8016072:	f640 0098 	movw	r0, #2200	@ 0x898
 8016076:	4770      	bx	lr

08016078 <rcl_action_take_cancel_request>:
 8016078:	2800      	cmp	r0, #0
 801607a:	d03a      	beq.n	80160f2 <rcl_action_take_cancel_request+0x7a>
 801607c:	b570      	push	{r4, r5, r6, lr}
 801607e:	4604      	mov	r4, r0
 8016080:	6800      	ldr	r0, [r0, #0]
 8016082:	b388      	cbz	r0, 80160e8 <rcl_action_take_cancel_request+0x70>
 8016084:	460d      	mov	r5, r1
 8016086:	4616      	mov	r6, r2
 8016088:	f7fe faae 	bl	80145e8 <rcl_service_is_valid>
 801608c:	b338      	cbz	r0, 80160de <rcl_action_take_cancel_request+0x66>
 801608e:	6820      	ldr	r0, [r4, #0]
 8016090:	3004      	adds	r0, #4
 8016092:	f7fe faa9 	bl	80145e8 <rcl_service_is_valid>
 8016096:	b310      	cbz	r0, 80160de <rcl_action_take_cancel_request+0x66>
 8016098:	6820      	ldr	r0, [r4, #0]
 801609a:	3008      	adds	r0, #8
 801609c:	f7fe faa4 	bl	80145e8 <rcl_service_is_valid>
 80160a0:	b1e8      	cbz	r0, 80160de <rcl_action_take_cancel_request+0x66>
 80160a2:	6820      	ldr	r0, [r4, #0]
 80160a4:	300c      	adds	r0, #12
 80160a6:	f7f6 fc8b 	bl	800c9c0 <rcl_publisher_is_valid>
 80160aa:	b1c0      	cbz	r0, 80160de <rcl_action_take_cancel_request+0x66>
 80160ac:	6820      	ldr	r0, [r4, #0]
 80160ae:	3010      	adds	r0, #16
 80160b0:	f7f6 fc86 	bl	800c9c0 <rcl_publisher_is_valid>
 80160b4:	b198      	cbz	r0, 80160de <rcl_action_take_cancel_request+0x66>
 80160b6:	b1d5      	cbz	r5, 80160ee <rcl_action_take_cancel_request+0x76>
 80160b8:	b1ce      	cbz	r6, 80160ee <rcl_action_take_cancel_request+0x76>
 80160ba:	6820      	ldr	r0, [r4, #0]
 80160bc:	4632      	mov	r2, r6
 80160be:	4629      	mov	r1, r5
 80160c0:	3004      	adds	r0, #4
 80160c2:	f7fe fa39 	bl	8014538 <rcl_take_request>
 80160c6:	b148      	cbz	r0, 80160dc <rcl_action_take_cancel_request+0x64>
 80160c8:	280a      	cmp	r0, #10
 80160ca:	d007      	beq.n	80160dc <rcl_action_take_cancel_request+0x64>
 80160cc:	f240 2259 	movw	r2, #601	@ 0x259
 80160d0:	f640 0399 	movw	r3, #2201	@ 0x899
 80160d4:	4290      	cmp	r0, r2
 80160d6:	bf0c      	ite	eq
 80160d8:	4618      	moveq	r0, r3
 80160da:	2001      	movne	r0, #1
 80160dc:	bd70      	pop	{r4, r5, r6, pc}
 80160de:	f7f7 fc87 	bl	800d9f0 <rcutils_reset_error>
 80160e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80160e6:	bd70      	pop	{r4, r5, r6, pc}
 80160e8:	f640 0098 	movw	r0, #2200	@ 0x898
 80160ec:	bd70      	pop	{r4, r5, r6, pc}
 80160ee:	200b      	movs	r0, #11
 80160f0:	bd70      	pop	{r4, r5, r6, pc}
 80160f2:	f640 0098 	movw	r0, #2200	@ 0x898
 80160f6:	4770      	bx	lr

080160f8 <rcl_action_send_cancel_response>:
 80160f8:	b398      	cbz	r0, 8016162 <rcl_action_send_cancel_response+0x6a>
 80160fa:	b570      	push	{r4, r5, r6, lr}
 80160fc:	4604      	mov	r4, r0
 80160fe:	6800      	ldr	r0, [r0, #0]
 8016100:	b350      	cbz	r0, 8016158 <rcl_action_send_cancel_response+0x60>
 8016102:	460d      	mov	r5, r1
 8016104:	4616      	mov	r6, r2
 8016106:	f7fe fa6f 	bl	80145e8 <rcl_service_is_valid>
 801610a:	b300      	cbz	r0, 801614e <rcl_action_send_cancel_response+0x56>
 801610c:	6820      	ldr	r0, [r4, #0]
 801610e:	3004      	adds	r0, #4
 8016110:	f7fe fa6a 	bl	80145e8 <rcl_service_is_valid>
 8016114:	b1d8      	cbz	r0, 801614e <rcl_action_send_cancel_response+0x56>
 8016116:	6820      	ldr	r0, [r4, #0]
 8016118:	3008      	adds	r0, #8
 801611a:	f7fe fa65 	bl	80145e8 <rcl_service_is_valid>
 801611e:	b1b0      	cbz	r0, 801614e <rcl_action_send_cancel_response+0x56>
 8016120:	6820      	ldr	r0, [r4, #0]
 8016122:	300c      	adds	r0, #12
 8016124:	f7f6 fc4c 	bl	800c9c0 <rcl_publisher_is_valid>
 8016128:	b188      	cbz	r0, 801614e <rcl_action_send_cancel_response+0x56>
 801612a:	6820      	ldr	r0, [r4, #0]
 801612c:	3010      	adds	r0, #16
 801612e:	f7f6 fc47 	bl	800c9c0 <rcl_publisher_is_valid>
 8016132:	b160      	cbz	r0, 801614e <rcl_action_send_cancel_response+0x56>
 8016134:	b19d      	cbz	r5, 801615e <rcl_action_send_cancel_response+0x66>
 8016136:	b196      	cbz	r6, 801615e <rcl_action_send_cancel_response+0x66>
 8016138:	6820      	ldr	r0, [r4, #0]
 801613a:	4632      	mov	r2, r6
 801613c:	4629      	mov	r1, r5
 801613e:	3004      	adds	r0, #4
 8016140:	f7fe fa3a 	bl	80145b8 <rcl_send_response>
 8016144:	b110      	cbz	r0, 801614c <rcl_action_send_cancel_response+0x54>
 8016146:	2802      	cmp	r0, #2
 8016148:	bf18      	it	ne
 801614a:	2001      	movne	r0, #1
 801614c:	bd70      	pop	{r4, r5, r6, pc}
 801614e:	f7f7 fc4f 	bl	800d9f0 <rcutils_reset_error>
 8016152:	f640 0098 	movw	r0, #2200	@ 0x898
 8016156:	bd70      	pop	{r4, r5, r6, pc}
 8016158:	f640 0098 	movw	r0, #2200	@ 0x898
 801615c:	bd70      	pop	{r4, r5, r6, pc}
 801615e:	200b      	movs	r0, #11
 8016160:	bd70      	pop	{r4, r5, r6, pc}
 8016162:	f640 0098 	movw	r0, #2200	@ 0x898
 8016166:	4770      	bx	lr

08016168 <rcl_action_wait_set_add_action_server>:
 8016168:	2800      	cmp	r0, #0
 801616a:	d04d      	beq.n	8016208 <rcl_action_wait_set_add_action_server+0xa0>
 801616c:	b570      	push	{r4, r5, r6, lr}
 801616e:	460c      	mov	r4, r1
 8016170:	b159      	cbz	r1, 801618a <rcl_action_wait_set_add_action_server+0x22>
 8016172:	4605      	mov	r5, r0
 8016174:	6808      	ldr	r0, [r1, #0]
 8016176:	b140      	cbz	r0, 801618a <rcl_action_wait_set_add_action_server+0x22>
 8016178:	4616      	mov	r6, r2
 801617a:	f7fe fa35 	bl	80145e8 <rcl_service_is_valid>
 801617e:	b120      	cbz	r0, 801618a <rcl_action_wait_set_add_action_server+0x22>
 8016180:	6820      	ldr	r0, [r4, #0]
 8016182:	3004      	adds	r0, #4
 8016184:	f7fe fa30 	bl	80145e8 <rcl_service_is_valid>
 8016188:	b910      	cbnz	r0, 8016190 <rcl_action_wait_set_add_action_server+0x28>
 801618a:	f640 0098 	movw	r0, #2200	@ 0x898
 801618e:	bd70      	pop	{r4, r5, r6, pc}
 8016190:	6820      	ldr	r0, [r4, #0]
 8016192:	3008      	adds	r0, #8
 8016194:	f7fe fa28 	bl	80145e8 <rcl_service_is_valid>
 8016198:	2800      	cmp	r0, #0
 801619a:	d0f6      	beq.n	801618a <rcl_action_wait_set_add_action_server+0x22>
 801619c:	6820      	ldr	r0, [r4, #0]
 801619e:	300c      	adds	r0, #12
 80161a0:	f7f6 fc26 	bl	800c9f0 <rcl_publisher_is_valid_except_context>
 80161a4:	2800      	cmp	r0, #0
 80161a6:	d0f0      	beq.n	801618a <rcl_action_wait_set_add_action_server+0x22>
 80161a8:	6820      	ldr	r0, [r4, #0]
 80161aa:	3010      	adds	r0, #16
 80161ac:	f7f6 fc20 	bl	800c9f0 <rcl_publisher_is_valid_except_context>
 80161b0:	2800      	cmp	r0, #0
 80161b2:	d0ea      	beq.n	801618a <rcl_action_wait_set_add_action_server+0x22>
 80161b4:	6821      	ldr	r1, [r4, #0]
 80161b6:	4628      	mov	r0, r5
 80161b8:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80161bc:	f7ff face 	bl	801575c <rcl_wait_set_add_service>
 80161c0:	2800      	cmp	r0, #0
 80161c2:	d1e4      	bne.n	801618e <rcl_action_wait_set_add_action_server+0x26>
 80161c4:	6821      	ldr	r1, [r4, #0]
 80161c6:	4628      	mov	r0, r5
 80161c8:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80161cc:	3104      	adds	r1, #4
 80161ce:	f7ff fac5 	bl	801575c <rcl_wait_set_add_service>
 80161d2:	2800      	cmp	r0, #0
 80161d4:	d1db      	bne.n	801618e <rcl_action_wait_set_add_action_server+0x26>
 80161d6:	6821      	ldr	r1, [r4, #0]
 80161d8:	4628      	mov	r0, r5
 80161da:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80161de:	3108      	adds	r1, #8
 80161e0:	f7ff fabc 	bl	801575c <rcl_wait_set_add_service>
 80161e4:	2800      	cmp	r0, #0
 80161e6:	d1d2      	bne.n	801618e <rcl_action_wait_set_add_action_server+0x26>
 80161e8:	6821      	ldr	r1, [r4, #0]
 80161ea:	4628      	mov	r0, r5
 80161ec:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80161f0:	3114      	adds	r1, #20
 80161f2:	f7ff fa57 	bl	80156a4 <rcl_wait_set_add_timer>
 80161f6:	2800      	cmp	r0, #0
 80161f8:	d1c9      	bne.n	801618e <rcl_action_wait_set_add_action_server+0x26>
 80161fa:	2e00      	cmp	r6, #0
 80161fc:	d0c7      	beq.n	801618e <rcl_action_wait_set_add_action_server+0x26>
 80161fe:	6823      	ldr	r3, [r4, #0]
 8016200:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8016204:	6033      	str	r3, [r6, #0]
 8016206:	bd70      	pop	{r4, r5, r6, pc}
 8016208:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801620c:	4770      	bx	lr
 801620e:	bf00      	nop

08016210 <rcl_action_server_wait_set_get_entities_ready>:
 8016210:	2800      	cmp	r0, #0
 8016212:	d05a      	beq.n	80162ca <rcl_action_server_wait_set_get_entities_ready+0xba>
 8016214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016216:	460c      	mov	r4, r1
 8016218:	b161      	cbz	r1, 8016234 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801621a:	4605      	mov	r5, r0
 801621c:	6808      	ldr	r0, [r1, #0]
 801621e:	b148      	cbz	r0, 8016234 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016220:	4616      	mov	r6, r2
 8016222:	461f      	mov	r7, r3
 8016224:	f7fe f9e0 	bl	80145e8 <rcl_service_is_valid>
 8016228:	b120      	cbz	r0, 8016234 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801622a:	6820      	ldr	r0, [r4, #0]
 801622c:	3004      	adds	r0, #4
 801622e:	f7fe f9db 	bl	80145e8 <rcl_service_is_valid>
 8016232:	b910      	cbnz	r0, 801623a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8016234:	f640 0098 	movw	r0, #2200	@ 0x898
 8016238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801623a:	6820      	ldr	r0, [r4, #0]
 801623c:	3008      	adds	r0, #8
 801623e:	f7fe f9d3 	bl	80145e8 <rcl_service_is_valid>
 8016242:	2800      	cmp	r0, #0
 8016244:	d0f6      	beq.n	8016234 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016246:	6820      	ldr	r0, [r4, #0]
 8016248:	300c      	adds	r0, #12
 801624a:	f7f6 fbd1 	bl	800c9f0 <rcl_publisher_is_valid_except_context>
 801624e:	2800      	cmp	r0, #0
 8016250:	d0f0      	beq.n	8016234 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016252:	6820      	ldr	r0, [r4, #0]
 8016254:	3010      	adds	r0, #16
 8016256:	f7f6 fbcb 	bl	800c9f0 <rcl_publisher_is_valid_except_context>
 801625a:	2800      	cmp	r0, #0
 801625c:	d0ea      	beq.n	8016234 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801625e:	b3be      	cbz	r6, 80162d0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016260:	b3b7      	cbz	r7, 80162d0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016262:	9b06      	ldr	r3, [sp, #24]
 8016264:	b3a3      	cbz	r3, 80162d0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016266:	9b07      	ldr	r3, [sp, #28]
 8016268:	b393      	cbz	r3, 80162d0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801626a:	6821      	ldr	r1, [r4, #0]
 801626c:	692a      	ldr	r2, [r5, #16]
 801626e:	6a2c      	ldr	r4, [r5, #32]
 8016270:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8016274:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8016278:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801627c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8016280:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8016284:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8016288:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801628c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8016290:	1a64      	subs	r4, r4, r1
 8016292:	fab4 f484 	clz	r4, r4
 8016296:	0964      	lsrs	r4, r4, #5
 8016298:	7034      	strb	r4, [r6, #0]
 801629a:	1d0c      	adds	r4, r1, #4
 801629c:	1b1b      	subs	r3, r3, r4
 801629e:	fab3 f383 	clz	r3, r3
 80162a2:	095b      	lsrs	r3, r3, #5
 80162a4:	f101 0408 	add.w	r4, r1, #8
 80162a8:	703b      	strb	r3, [r7, #0]
 80162aa:	f101 0314 	add.w	r3, r1, #20
 80162ae:	1b01      	subs	r1, r0, r4
 80162b0:	1ad3      	subs	r3, r2, r3
 80162b2:	fab1 f181 	clz	r1, r1
 80162b6:	9a06      	ldr	r2, [sp, #24]
 80162b8:	0949      	lsrs	r1, r1, #5
 80162ba:	7011      	strb	r1, [r2, #0]
 80162bc:	fab3 f383 	clz	r3, r3
 80162c0:	9a07      	ldr	r2, [sp, #28]
 80162c2:	095b      	lsrs	r3, r3, #5
 80162c4:	2000      	movs	r0, #0
 80162c6:	7013      	strb	r3, [r2, #0]
 80162c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162ca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80162ce:	4770      	bx	lr
 80162d0:	200b      	movs	r0, #11
 80162d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080162d4 <_execute_event_handler>:
 80162d4:	2002      	movs	r0, #2
 80162d6:	4770      	bx	lr

080162d8 <_cancel_goal_event_handler>:
 80162d8:	2003      	movs	r0, #3
 80162da:	4770      	bx	lr

080162dc <_succeed_event_handler>:
 80162dc:	2004      	movs	r0, #4
 80162de:	4770      	bx	lr

080162e0 <_abort_event_handler>:
 80162e0:	2006      	movs	r0, #6
 80162e2:	4770      	bx	lr

080162e4 <_canceled_event_handler>:
 80162e4:	2005      	movs	r0, #5
 80162e6:	4770      	bx	lr

080162e8 <rcl_action_transition_goal_state>:
 80162e8:	b2c2      	uxtb	r2, r0
 80162ea:	2a06      	cmp	r2, #6
 80162ec:	d80c      	bhi.n	8016308 <rcl_action_transition_goal_state+0x20>
 80162ee:	2904      	cmp	r1, #4
 80162f0:	d80a      	bhi.n	8016308 <rcl_action_transition_goal_state+0x20>
 80162f2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80162f6:	b410      	push	{r4}
 80162f8:	1853      	adds	r3, r2, r1
 80162fa:	4c06      	ldr	r4, [pc, #24]	@ (8016314 <rcl_action_transition_goal_state+0x2c>)
 80162fc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016300:	b123      	cbz	r3, 801630c <rcl_action_transition_goal_state+0x24>
 8016302:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016306:	4718      	bx	r3
 8016308:	2000      	movs	r0, #0
 801630a:	4770      	bx	lr
 801630c:	2000      	movs	r0, #0
 801630e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016312:	4770      	bx	lr
 8016314:	0801c098 	.word	0x0801c098

08016318 <rcl_action_get_zero_initialized_cancel_response>:
 8016318:	b510      	push	{r4, lr}
 801631a:	4c07      	ldr	r4, [pc, #28]	@ (8016338 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801631c:	4686      	mov	lr, r0
 801631e:	4684      	mov	ip, r0
 8016320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016322:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016328:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801632c:	6823      	ldr	r3, [r4, #0]
 801632e:	f8cc 3000 	str.w	r3, [ip]
 8016332:	4670      	mov	r0, lr
 8016334:	bd10      	pop	{r4, pc}
 8016336:	bf00      	nop
 8016338:	0801c124 	.word	0x0801c124

0801633c <rclc_action_send_result_request>:
 801633c:	b1d0      	cbz	r0, 8016374 <rclc_action_send_result_request+0x38>
 801633e:	b500      	push	{lr}
 8016340:	4684      	mov	ip, r0
 8016342:	b087      	sub	sp, #28
 8016344:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8016348:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801634c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8016350:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8016354:	f10d 0e08 	add.w	lr, sp, #8
 8016358:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801635c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8016360:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8016364:	a902      	add	r1, sp, #8
 8016366:	3010      	adds	r0, #16
 8016368:	f7ff fbda 	bl	8015b20 <rcl_action_send_result_request>
 801636c:	b920      	cbnz	r0, 8016378 <rclc_action_send_result_request+0x3c>
 801636e:	b007      	add	sp, #28
 8016370:	f85d fb04 	ldr.w	pc, [sp], #4
 8016374:	200b      	movs	r0, #11
 8016376:	4770      	bx	lr
 8016378:	9001      	str	r0, [sp, #4]
 801637a:	f7f7 fb39 	bl	800d9f0 <rcutils_reset_error>
 801637e:	9801      	ldr	r0, [sp, #4]
 8016380:	b007      	add	sp, #28
 8016382:	f85d fb04 	ldr.w	pc, [sp], #4
 8016386:	bf00      	nop

08016388 <rclc_action_take_goal_handle>:
 8016388:	b160      	cbz	r0, 80163a4 <rclc_action_take_goal_handle+0x1c>
 801638a:	6883      	ldr	r3, [r0, #8]
 801638c:	b143      	cbz	r3, 80163a0 <rclc_action_take_goal_handle+0x18>
 801638e:	6819      	ldr	r1, [r3, #0]
 8016390:	6081      	str	r1, [r0, #8]
 8016392:	2200      	movs	r2, #0
 8016394:	721a      	strb	r2, [r3, #8]
 8016396:	68c1      	ldr	r1, [r0, #12]
 8016398:	6019      	str	r1, [r3, #0]
 801639a:	621a      	str	r2, [r3, #32]
 801639c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801639e:	60c3      	str	r3, [r0, #12]
 80163a0:	4618      	mov	r0, r3
 80163a2:	4770      	bx	lr
 80163a4:	4603      	mov	r3, r0
 80163a6:	e7fb      	b.n	80163a0 <rclc_action_take_goal_handle+0x18>

080163a8 <rclc_action_remove_used_goal_handle>:
 80163a8:	b180      	cbz	r0, 80163cc <rclc_action_remove_used_goal_handle+0x24>
 80163aa:	b179      	cbz	r1, 80163cc <rclc_action_remove_used_goal_handle+0x24>
 80163ac:	68c3      	ldr	r3, [r0, #12]
 80163ae:	4299      	cmp	r1, r3
 80163b0:	d00d      	beq.n	80163ce <rclc_action_remove_used_goal_handle+0x26>
 80163b2:	b12b      	cbz	r3, 80163c0 <rclc_action_remove_used_goal_handle+0x18>
 80163b4:	681a      	ldr	r2, [r3, #0]
 80163b6:	4291      	cmp	r1, r2
 80163b8:	d003      	beq.n	80163c2 <rclc_action_remove_used_goal_handle+0x1a>
 80163ba:	4613      	mov	r3, r2
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d1f9      	bne.n	80163b4 <rclc_action_remove_used_goal_handle+0xc>
 80163c0:	4770      	bx	lr
 80163c2:	680a      	ldr	r2, [r1, #0]
 80163c4:	601a      	str	r2, [r3, #0]
 80163c6:	6883      	ldr	r3, [r0, #8]
 80163c8:	600b      	str	r3, [r1, #0]
 80163ca:	6081      	str	r1, [r0, #8]
 80163cc:	4770      	bx	lr
 80163ce:	680b      	ldr	r3, [r1, #0]
 80163d0:	60c3      	str	r3, [r0, #12]
 80163d2:	e7f8      	b.n	80163c6 <rclc_action_remove_used_goal_handle+0x1e>

080163d4 <rclc_action_find_goal_handle_by_uuid>:
 80163d4:	b538      	push	{r3, r4, r5, lr}
 80163d6:	b180      	cbz	r0, 80163fa <rclc_action_find_goal_handle_by_uuid+0x26>
 80163d8:	460d      	mov	r5, r1
 80163da:	b181      	cbz	r1, 80163fe <rclc_action_find_goal_handle_by_uuid+0x2a>
 80163dc:	68c4      	ldr	r4, [r0, #12]
 80163de:	b914      	cbnz	r4, 80163e6 <rclc_action_find_goal_handle_by_uuid+0x12>
 80163e0:	e009      	b.n	80163f6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80163e2:	6824      	ldr	r4, [r4, #0]
 80163e4:	b13c      	cbz	r4, 80163f6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80163e6:	f104 0009 	add.w	r0, r4, #9
 80163ea:	2210      	movs	r2, #16
 80163ec:	4629      	mov	r1, r5
 80163ee:	f003 fa2f 	bl	8019850 <memcmp>
 80163f2:	2800      	cmp	r0, #0
 80163f4:	d1f5      	bne.n	80163e2 <rclc_action_find_goal_handle_by_uuid+0xe>
 80163f6:	4620      	mov	r0, r4
 80163f8:	bd38      	pop	{r3, r4, r5, pc}
 80163fa:	4604      	mov	r4, r0
 80163fc:	e7fb      	b.n	80163f6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80163fe:	460c      	mov	r4, r1
 8016400:	e7f9      	b.n	80163f6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016402:	bf00      	nop

08016404 <rclc_action_find_first_handle_by_status>:
 8016404:	b140      	cbz	r0, 8016418 <rclc_action_find_first_handle_by_status+0x14>
 8016406:	68c0      	ldr	r0, [r0, #12]
 8016408:	b910      	cbnz	r0, 8016410 <rclc_action_find_first_handle_by_status+0xc>
 801640a:	e005      	b.n	8016418 <rclc_action_find_first_handle_by_status+0x14>
 801640c:	6800      	ldr	r0, [r0, #0]
 801640e:	b118      	cbz	r0, 8016418 <rclc_action_find_first_handle_by_status+0x14>
 8016410:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016414:	428b      	cmp	r3, r1
 8016416:	d1f9      	bne.n	801640c <rclc_action_find_first_handle_by_status+0x8>
 8016418:	4770      	bx	lr
 801641a:	bf00      	nop

0801641c <rclc_action_find_first_terminated_handle>:
 801641c:	b140      	cbz	r0, 8016430 <rclc_action_find_first_terminated_handle+0x14>
 801641e:	68c0      	ldr	r0, [r0, #12]
 8016420:	b910      	cbnz	r0, 8016428 <rclc_action_find_first_terminated_handle+0xc>
 8016422:	e005      	b.n	8016430 <rclc_action_find_first_terminated_handle+0x14>
 8016424:	6800      	ldr	r0, [r0, #0]
 8016426:	b118      	cbz	r0, 8016430 <rclc_action_find_first_terminated_handle+0x14>
 8016428:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801642c:	2b03      	cmp	r3, #3
 801642e:	ddf9      	ble.n	8016424 <rclc_action_find_first_terminated_handle+0x8>
 8016430:	4770      	bx	lr
 8016432:	bf00      	nop

08016434 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8016434:	b170      	cbz	r0, 8016454 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016436:	68c0      	ldr	r0, [r0, #12]
 8016438:	b160      	cbz	r0, 8016454 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801643a:	b410      	push	{r4}
 801643c:	e001      	b.n	8016442 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801643e:	6800      	ldr	r0, [r0, #0]
 8016440:	b128      	cbz	r0, 801644e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8016442:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8016446:	4299      	cmp	r1, r3
 8016448:	bf08      	it	eq
 801644a:	4294      	cmpeq	r4, r2
 801644c:	d1f7      	bne.n	801643e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801644e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016452:	4770      	bx	lr
 8016454:	4770      	bx	lr
 8016456:	bf00      	nop

08016458 <rclc_action_find_handle_by_result_request_sequence_number>:
 8016458:	b170      	cbz	r0, 8016478 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801645a:	68c0      	ldr	r0, [r0, #12]
 801645c:	b160      	cbz	r0, 8016478 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801645e:	b410      	push	{r4}
 8016460:	e001      	b.n	8016466 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8016462:	6800      	ldr	r0, [r0, #0]
 8016464:	b128      	cbz	r0, 8016472 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8016466:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801646a:	4299      	cmp	r1, r3
 801646c:	bf08      	it	eq
 801646e:	4294      	cmpeq	r4, r2
 8016470:	d1f7      	bne.n	8016462 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8016472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016476:	4770      	bx	lr
 8016478:	4770      	bx	lr
 801647a:	bf00      	nop

0801647c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801647c:	b170      	cbz	r0, 801649c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801647e:	68c0      	ldr	r0, [r0, #12]
 8016480:	b160      	cbz	r0, 801649c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016482:	b410      	push	{r4}
 8016484:	e001      	b.n	801648a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8016486:	6800      	ldr	r0, [r0, #0]
 8016488:	b128      	cbz	r0, 8016496 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801648a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801648e:	4299      	cmp	r1, r3
 8016490:	bf08      	it	eq
 8016492:	4294      	cmpeq	r4, r2
 8016494:	d1f7      	bne.n	8016486 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8016496:	f85d 4b04 	ldr.w	r4, [sp], #4
 801649a:	4770      	bx	lr
 801649c:	4770      	bx	lr
 801649e:	bf00      	nop

080164a0 <rclc_action_find_first_handle_with_goal_response>:
 80164a0:	b140      	cbz	r0, 80164b4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80164a2:	68c0      	ldr	r0, [r0, #12]
 80164a4:	b910      	cbnz	r0, 80164ac <rclc_action_find_first_handle_with_goal_response+0xc>
 80164a6:	e005      	b.n	80164b4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80164a8:	6800      	ldr	r0, [r0, #0]
 80164aa:	b118      	cbz	r0, 80164b4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80164ac:	f890 3020 	ldrb.w	r3, [r0, #32]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d0f9      	beq.n	80164a8 <rclc_action_find_first_handle_with_goal_response+0x8>
 80164b4:	4770      	bx	lr
 80164b6:	bf00      	nop

080164b8 <rclc_action_find_first_handle_with_result_response>:
 80164b8:	b140      	cbz	r0, 80164cc <rclc_action_find_first_handle_with_result_response+0x14>
 80164ba:	68c0      	ldr	r0, [r0, #12]
 80164bc:	b910      	cbnz	r0, 80164c4 <rclc_action_find_first_handle_with_result_response+0xc>
 80164be:	e005      	b.n	80164cc <rclc_action_find_first_handle_with_result_response+0x14>
 80164c0:	6800      	ldr	r0, [r0, #0]
 80164c2:	b118      	cbz	r0, 80164cc <rclc_action_find_first_handle_with_result_response+0x14>
 80164c4:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d0f9      	beq.n	80164c0 <rclc_action_find_first_handle_with_result_response+0x8>
 80164cc:	4770      	bx	lr
 80164ce:	bf00      	nop

080164d0 <rclc_action_server_response_goal_request>:
 80164d0:	b198      	cbz	r0, 80164fa <rclc_action_server_response_goal_request+0x2a>
 80164d2:	b510      	push	{r4, lr}
 80164d4:	6844      	ldr	r4, [r0, #4]
 80164d6:	b086      	sub	sp, #24
 80164d8:	2200      	movs	r2, #0
 80164da:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80164de:	460b      	mov	r3, r1
 80164e0:	9205      	str	r2, [sp, #20]
 80164e2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80164e6:	aa03      	add	r2, sp, #12
 80164e8:	f104 0010 	add.w	r0, r4, #16
 80164ec:	f88d 300c 	strb.w	r3, [sp, #12]
 80164f0:	f7ff fd4a 	bl	8015f88 <rcl_action_send_goal_response>
 80164f4:	b918      	cbnz	r0, 80164fe <rclc_action_server_response_goal_request+0x2e>
 80164f6:	b006      	add	sp, #24
 80164f8:	bd10      	pop	{r4, pc}
 80164fa:	200b      	movs	r0, #11
 80164fc:	4770      	bx	lr
 80164fe:	9001      	str	r0, [sp, #4]
 8016500:	f7f7 fa76 	bl	800d9f0 <rcutils_reset_error>
 8016504:	9801      	ldr	r0, [sp, #4]
 8016506:	b006      	add	sp, #24
 8016508:	bd10      	pop	{r4, pc}
 801650a:	bf00      	nop
 801650c:	0000      	movs	r0, r0
	...

08016510 <rclc_action_server_goal_cancel_accept>:
 8016510:	b310      	cbz	r0, 8016558 <rclc_action_server_goal_cancel_accept+0x48>
 8016512:	b510      	push	{r4, lr}
 8016514:	b090      	sub	sp, #64	@ 0x40
 8016516:	4604      	mov	r4, r0
 8016518:	a806      	add	r0, sp, #24
 801651a:	f7ff fefd 	bl	8016318 <rcl_action_get_zero_initialized_cancel_response>
 801651e:	2300      	movs	r3, #0
 8016520:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8016524:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8016528:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801652c:	f88d 3018 	strb.w	r3, [sp, #24]
 8016530:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8016534:	f8cd d01c 	str.w	sp, [sp, #28]
 8016538:	46ec      	mov	ip, sp
 801653a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801653e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8016560 <rclc_action_server_goal_cancel_accept+0x50>
 8016542:	6860      	ldr	r0, [r4, #4]
 8016544:	aa06      	add	r2, sp, #24
 8016546:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801654a:	3010      	adds	r0, #16
 801654c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016550:	f7ff fdd2 	bl	80160f8 <rcl_action_send_cancel_response>
 8016554:	b010      	add	sp, #64	@ 0x40
 8016556:	bd10      	pop	{r4, pc}
 8016558:	200b      	movs	r0, #11
 801655a:	4770      	bx	lr
 801655c:	f3af 8000 	nop.w
 8016560:	00000001 	.word	0x00000001
 8016564:	00000001 	.word	0x00000001

08016568 <rclc_action_server_goal_cancel_reject>:
 8016568:	b082      	sub	sp, #8
 801656a:	b530      	push	{r4, r5, lr}
 801656c:	b08b      	sub	sp, #44	@ 0x2c
 801656e:	ac0e      	add	r4, sp, #56	@ 0x38
 8016570:	e884 000c 	stmia.w	r4, {r2, r3}
 8016574:	b188      	cbz	r0, 801659a <rclc_action_server_goal_cancel_reject+0x32>
 8016576:	4604      	mov	r4, r0
 8016578:	a801      	add	r0, sp, #4
 801657a:	460d      	mov	r5, r1
 801657c:	f7ff fecc 	bl	8016318 <rcl_action_get_zero_initialized_cancel_response>
 8016580:	aa01      	add	r2, sp, #4
 8016582:	a90e      	add	r1, sp, #56	@ 0x38
 8016584:	f104 0010 	add.w	r0, r4, #16
 8016588:	f88d 5004 	strb.w	r5, [sp, #4]
 801658c:	f7ff fdb4 	bl	80160f8 <rcl_action_send_cancel_response>
 8016590:	b00b      	add	sp, #44	@ 0x2c
 8016592:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016596:	b002      	add	sp, #8
 8016598:	4770      	bx	lr
 801659a:	200b      	movs	r0, #11
 801659c:	b00b      	add	sp, #44	@ 0x2c
 801659e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80165a2:	b002      	add	sp, #8
 80165a4:	4770      	bx	lr
 80165a6:	bf00      	nop

080165a8 <__atomic_load_8>:
 80165a8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80165ac:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80165b0:	4a15      	ldr	r2, [pc, #84]	@ (8016608 <__atomic_load_8+0x60>)
 80165b2:	4b16      	ldr	r3, [pc, #88]	@ (801660c <__atomic_load_8+0x64>)
 80165b4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80165b8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80165bc:	fb02 f101 	mul.w	r1, r2, r1
 80165c0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80165c4:	fba3 2301 	umull	r2, r3, r3, r1
 80165c8:	091b      	lsrs	r3, r3, #4
 80165ca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80165ce:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80165d2:	b4d0      	push	{r4, r6, r7}
 80165d4:	4c0e      	ldr	r4, [pc, #56]	@ (8016610 <__atomic_load_8+0x68>)
 80165d6:	1ac9      	subs	r1, r1, r3
 80165d8:	1862      	adds	r2, r4, r1
 80165da:	f04f 0c01 	mov.w	ip, #1
 80165de:	e8d2 3f4f 	ldrexb	r3, [r2]
 80165e2:	e8c2 cf46 	strexb	r6, ip, [r2]
 80165e6:	2e00      	cmp	r6, #0
 80165e8:	d1f9      	bne.n	80165de <__atomic_load_8+0x36>
 80165ea:	f3bf 8f5b 	dmb	ish
 80165ee:	b2db      	uxtb	r3, r3
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d1f4      	bne.n	80165de <__atomic_load_8+0x36>
 80165f4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80165f8:	f3bf 8f5b 	dmb	ish
 80165fc:	5463      	strb	r3, [r4, r1]
 80165fe:	4630      	mov	r0, r6
 8016600:	4639      	mov	r1, r7
 8016602:	bcd0      	pop	{r4, r6, r7}
 8016604:	4770      	bx	lr
 8016606:	bf00      	nop
 8016608:	27d4eb2d 	.word	0x27d4eb2d
 801660c:	b21642c9 	.word	0xb21642c9
 8016610:	2000b910 	.word	0x2000b910

08016614 <__atomic_store_8>:
 8016614:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016618:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801661c:	b570      	push	{r4, r5, r6, lr}
 801661e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016622:	4c14      	ldr	r4, [pc, #80]	@ (8016674 <__atomic_store_8+0x60>)
 8016624:	4d14      	ldr	r5, [pc, #80]	@ (8016678 <__atomic_store_8+0x64>)
 8016626:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801662a:	fb04 f101 	mul.w	r1, r4, r1
 801662e:	4c13      	ldr	r4, [pc, #76]	@ (801667c <__atomic_store_8+0x68>)
 8016630:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016634:	fba4 4e01 	umull	r4, lr, r4, r1
 8016638:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801663c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8016640:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8016644:	eba1 0e0e 	sub.w	lr, r1, lr
 8016648:	eb05 0c0e 	add.w	ip, r5, lr
 801664c:	f04f 0401 	mov.w	r4, #1
 8016650:	e8dc 1f4f 	ldrexb	r1, [ip]
 8016654:	e8cc 4f46 	strexb	r6, r4, [ip]
 8016658:	2e00      	cmp	r6, #0
 801665a:	d1f9      	bne.n	8016650 <__atomic_store_8+0x3c>
 801665c:	f3bf 8f5b 	dmb	ish
 8016660:	b2c9      	uxtb	r1, r1
 8016662:	2900      	cmp	r1, #0
 8016664:	d1f4      	bne.n	8016650 <__atomic_store_8+0x3c>
 8016666:	e9c0 2300 	strd	r2, r3, [r0]
 801666a:	f3bf 8f5b 	dmb	ish
 801666e:	f805 100e 	strb.w	r1, [r5, lr]
 8016672:	bd70      	pop	{r4, r5, r6, pc}
 8016674:	27d4eb2d 	.word	0x27d4eb2d
 8016678:	2000b910 	.word	0x2000b910
 801667c:	b21642c9 	.word	0xb21642c9

08016680 <__atomic_exchange_8>:
 8016680:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8016684:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8016688:	4916      	ldr	r1, [pc, #88]	@ (80166e4 <__atomic_exchange_8+0x64>)
 801668a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801668e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8016692:	fb01 fc0c 	mul.w	ip, r1, ip
 8016696:	4914      	ldr	r1, [pc, #80]	@ (80166e8 <__atomic_exchange_8+0x68>)
 8016698:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801669c:	b570      	push	{r4, r5, r6, lr}
 801669e:	4605      	mov	r5, r0
 80166a0:	fba1 010c 	umull	r0, r1, r1, ip
 80166a4:	0909      	lsrs	r1, r1, #4
 80166a6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80166aa:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80166ae:	4e0f      	ldr	r6, [pc, #60]	@ (80166ec <__atomic_exchange_8+0x6c>)
 80166b0:	ebac 0c01 	sub.w	ip, ip, r1
 80166b4:	eb06 010c 	add.w	r1, r6, ip
 80166b8:	f04f 0e01 	mov.w	lr, #1
 80166bc:	e8d1 4f4f 	ldrexb	r4, [r1]
 80166c0:	e8c1 ef40 	strexb	r0, lr, [r1]
 80166c4:	2800      	cmp	r0, #0
 80166c6:	d1f9      	bne.n	80166bc <__atomic_exchange_8+0x3c>
 80166c8:	f3bf 8f5b 	dmb	ish
 80166cc:	b2e4      	uxtb	r4, r4
 80166ce:	2c00      	cmp	r4, #0
 80166d0:	d1f4      	bne.n	80166bc <__atomic_exchange_8+0x3c>
 80166d2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80166d6:	e9c5 2300 	strd	r2, r3, [r5]
 80166da:	f3bf 8f5b 	dmb	ish
 80166de:	f806 400c 	strb.w	r4, [r6, ip]
 80166e2:	bd70      	pop	{r4, r5, r6, pc}
 80166e4:	27d4eb2d 	.word	0x27d4eb2d
 80166e8:	b21642c9 	.word	0xb21642c9
 80166ec:	2000b910 	.word	0x2000b910

080166f0 <rcutils_get_env>:
 80166f0:	b168      	cbz	r0, 801670e <rcutils_get_env+0x1e>
 80166f2:	b510      	push	{r4, lr}
 80166f4:	460c      	mov	r4, r1
 80166f6:	b129      	cbz	r1, 8016704 <rcutils_get_env+0x14>
 80166f8:	f002 fc18 	bl	8018f2c <getenv>
 80166fc:	b120      	cbz	r0, 8016708 <rcutils_get_env+0x18>
 80166fe:	6020      	str	r0, [r4, #0]
 8016700:	2000      	movs	r0, #0
 8016702:	bd10      	pop	{r4, pc}
 8016704:	4803      	ldr	r0, [pc, #12]	@ (8016714 <rcutils_get_env+0x24>)
 8016706:	bd10      	pop	{r4, pc}
 8016708:	4b03      	ldr	r3, [pc, #12]	@ (8016718 <rcutils_get_env+0x28>)
 801670a:	6023      	str	r3, [r4, #0]
 801670c:	bd10      	pop	{r4, pc}
 801670e:	4803      	ldr	r0, [pc, #12]	@ (801671c <rcutils_get_env+0x2c>)
 8016710:	4770      	bx	lr
 8016712:	bf00      	nop
 8016714:	0801c164 	.word	0x0801c164
 8016718:	0801c53c 	.word	0x0801c53c
 801671c:	0801c148 	.word	0x0801c148

08016720 <rcutils_is_directory>:
 8016720:	2000      	movs	r0, #0
 8016722:	4770      	bx	lr

08016724 <rcutils_join_path>:
 8016724:	b082      	sub	sp, #8
 8016726:	e88d 000c 	stmia.w	sp, {r2, r3}
 801672a:	2000      	movs	r0, #0
 801672c:	b002      	add	sp, #8
 801672e:	4770      	bx	lr

08016730 <rcutils_to_native_path>:
 8016730:	b084      	sub	sp, #16
 8016732:	a801      	add	r0, sp, #4
 8016734:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016738:	b004      	add	sp, #16
 801673a:	2000      	movs	r0, #0
 801673c:	4770      	bx	lr
 801673e:	bf00      	nop

08016740 <rcutils_format_string_limit>:
 8016740:	b40f      	push	{r0, r1, r2, r3}
 8016742:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016744:	b083      	sub	sp, #12
 8016746:	ac08      	add	r4, sp, #32
 8016748:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801674a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801674e:	b34e      	cbz	r6, 80167a4 <rcutils_format_string_limit+0x64>
 8016750:	a808      	add	r0, sp, #32
 8016752:	f7f7 f927 	bl	800d9a4 <rcutils_allocator_is_valid>
 8016756:	b328      	cbz	r0, 80167a4 <rcutils_format_string_limit+0x64>
 8016758:	2100      	movs	r1, #0
 801675a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801675c:	4632      	mov	r2, r6
 801675e:	4608      	mov	r0, r1
 8016760:	e9cd 3300 	strd	r3, r3, [sp]
 8016764:	f000 f8f4 	bl	8016950 <rcutils_vsnprintf>
 8016768:	1c43      	adds	r3, r0, #1
 801676a:	4605      	mov	r5, r0
 801676c:	d01a      	beq.n	80167a4 <rcutils_format_string_limit+0x64>
 801676e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016770:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016772:	1c47      	adds	r7, r0, #1
 8016774:	429f      	cmp	r7, r3
 8016776:	bf84      	itt	hi
 8016778:	461f      	movhi	r7, r3
 801677a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801677e:	4638      	mov	r0, r7
 8016780:	9b08      	ldr	r3, [sp, #32]
 8016782:	4798      	blx	r3
 8016784:	4604      	mov	r4, r0
 8016786:	b168      	cbz	r0, 80167a4 <rcutils_format_string_limit+0x64>
 8016788:	9b01      	ldr	r3, [sp, #4]
 801678a:	4632      	mov	r2, r6
 801678c:	4639      	mov	r1, r7
 801678e:	f000 f8df 	bl	8016950 <rcutils_vsnprintf>
 8016792:	2800      	cmp	r0, #0
 8016794:	db02      	blt.n	801679c <rcutils_format_string_limit+0x5c>
 8016796:	2300      	movs	r3, #0
 8016798:	5563      	strb	r3, [r4, r5]
 801679a:	e004      	b.n	80167a6 <rcutils_format_string_limit+0x66>
 801679c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801679e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80167a0:	4620      	mov	r0, r4
 80167a2:	4798      	blx	r3
 80167a4:	2400      	movs	r4, #0
 80167a6:	4620      	mov	r0, r4
 80167a8:	b003      	add	sp, #12
 80167aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80167ae:	b004      	add	sp, #16
 80167b0:	4770      	bx	lr
 80167b2:	bf00      	nop

080167b4 <rcutils_repl_str>:
 80167b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167b8:	ed2d 8b02 	vpush	{d8}
 80167bc:	b087      	sub	sp, #28
 80167be:	4680      	mov	r8, r0
 80167c0:	4608      	mov	r0, r1
 80167c2:	f8cd 8004 	str.w	r8, [sp, #4]
 80167c6:	ee08 2a10 	vmov	s16, r2
 80167ca:	468a      	mov	sl, r1
 80167cc:	4699      	mov	r9, r3
 80167ce:	f7e9 fd31 	bl	8000234 <strlen>
 80167d2:	2600      	movs	r6, #0
 80167d4:	4647      	mov	r7, r8
 80167d6:	9002      	str	r0, [sp, #8]
 80167d8:	46b3      	mov	fp, r6
 80167da:	2510      	movs	r5, #16
 80167dc:	46b0      	mov	r8, r6
 80167de:	e01d      	b.n	801681c <rcutils_repl_str+0x68>
 80167e0:	f10b 0b01 	add.w	fp, fp, #1
 80167e4:	455e      	cmp	r6, fp
 80167e6:	d211      	bcs.n	801680c <rcutils_repl_str+0x58>
 80167e8:	442e      	add	r6, r5
 80167ea:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80167ee:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80167f2:	00b1      	lsls	r1, r6, #2
 80167f4:	4798      	blx	r3
 80167f6:	2800      	cmp	r0, #0
 80167f8:	f000 8088 	beq.w	801690c <rcutils_repl_str+0x158>
 80167fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016800:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8016804:	4680      	mov	r8, r0
 8016806:	bf28      	it	cs
 8016808:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801680c:	9a01      	ldr	r2, [sp, #4]
 801680e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8016812:	1aa2      	subs	r2, r4, r2
 8016814:	f843 2c04 	str.w	r2, [r3, #-4]
 8016818:	9b02      	ldr	r3, [sp, #8]
 801681a:	18e7      	adds	r7, r4, r3
 801681c:	4651      	mov	r1, sl
 801681e:	4638      	mov	r0, r7
 8016820:	f003 f867 	bl	80198f2 <strstr>
 8016824:	4604      	mov	r4, r0
 8016826:	4640      	mov	r0, r8
 8016828:	2c00      	cmp	r4, #0
 801682a:	d1d9      	bne.n	80167e0 <rcutils_repl_str+0x2c>
 801682c:	46b8      	mov	r8, r7
 801682e:	4607      	mov	r7, r0
 8016830:	4640      	mov	r0, r8
 8016832:	f7e9 fcff 	bl	8000234 <strlen>
 8016836:	9b01      	ldr	r3, [sp, #4]
 8016838:	eba8 0303 	sub.w	r3, r8, r3
 801683c:	181c      	adds	r4, r3, r0
 801683e:	9404      	str	r4, [sp, #16]
 8016840:	f1bb 0f00 	cmp.w	fp, #0
 8016844:	d04a      	beq.n	80168dc <rcutils_repl_str+0x128>
 8016846:	ee18 0a10 	vmov	r0, s16
 801684a:	f7e9 fcf3 	bl	8000234 <strlen>
 801684e:	9b02      	ldr	r3, [sp, #8]
 8016850:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016854:	1ac3      	subs	r3, r0, r3
 8016856:	fb0b 4303 	mla	r3, fp, r3, r4
 801685a:	461a      	mov	r2, r3
 801685c:	9305      	str	r3, [sp, #20]
 801685e:	4606      	mov	r6, r0
 8016860:	f8d9 3000 	ldr.w	r3, [r9]
 8016864:	1c50      	adds	r0, r2, #1
 8016866:	4798      	blx	r3
 8016868:	9003      	str	r0, [sp, #12]
 801686a:	2800      	cmp	r0, #0
 801686c:	d04f      	beq.n	801690e <rcutils_repl_str+0x15a>
 801686e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016872:	683a      	ldr	r2, [r7, #0]
 8016874:	4641      	mov	r1, r8
 8016876:	f003 f8de 	bl	8019a36 <memcpy>
 801687a:	683d      	ldr	r5, [r7, #0]
 801687c:	9b03      	ldr	r3, [sp, #12]
 801687e:	9701      	str	r7, [sp, #4]
 8016880:	46ba      	mov	sl, r7
 8016882:	441d      	add	r5, r3
 8016884:	9f02      	ldr	r7, [sp, #8]
 8016886:	f8cd 9008 	str.w	r9, [sp, #8]
 801688a:	2401      	movs	r4, #1
 801688c:	46d1      	mov	r9, sl
 801688e:	ee18 aa10 	vmov	sl, s16
 8016892:	e00a      	b.n	80168aa <rcutils_repl_str+0xf6>
 8016894:	f8d9 5000 	ldr.w	r5, [r9]
 8016898:	1aaa      	subs	r2, r5, r2
 801689a:	1885      	adds	r5, r0, r2
 801689c:	f003 f8cb 	bl	8019a36 <memcpy>
 80168a0:	45a3      	cmp	fp, r4
 80168a2:	f104 0201 	add.w	r2, r4, #1
 80168a6:	d935      	bls.n	8016914 <rcutils_repl_str+0x160>
 80168a8:	4614      	mov	r4, r2
 80168aa:	4632      	mov	r2, r6
 80168ac:	4651      	mov	r1, sl
 80168ae:	4628      	mov	r0, r5
 80168b0:	f003 f8c1 	bl	8019a36 <memcpy>
 80168b4:	f859 2b04 	ldr.w	r2, [r9], #4
 80168b8:	45a3      	cmp	fp, r4
 80168ba:	443a      	add	r2, r7
 80168bc:	eb05 0006 	add.w	r0, r5, r6
 80168c0:	eb08 0102 	add.w	r1, r8, r2
 80168c4:	d1e6      	bne.n	8016894 <rcutils_repl_str+0xe0>
 80168c6:	9b04      	ldr	r3, [sp, #16]
 80168c8:	1a9a      	subs	r2, r3, r2
 80168ca:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80168ce:	f003 f8b2 	bl	8019a36 <memcpy>
 80168d2:	9a03      	ldr	r2, [sp, #12]
 80168d4:	9905      	ldr	r1, [sp, #20]
 80168d6:	2300      	movs	r3, #0
 80168d8:	5453      	strb	r3, [r2, r1]
 80168da:	e00b      	b.n	80168f4 <rcutils_repl_str+0x140>
 80168dc:	4620      	mov	r0, r4
 80168de:	f8d9 3000 	ldr.w	r3, [r9]
 80168e2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80168e6:	3001      	adds	r0, #1
 80168e8:	4798      	blx	r3
 80168ea:	9003      	str	r0, [sp, #12]
 80168ec:	b110      	cbz	r0, 80168f4 <rcutils_repl_str+0x140>
 80168ee:	9901      	ldr	r1, [sp, #4]
 80168f0:	f003 f899 	bl	8019a26 <strcpy>
 80168f4:	4638      	mov	r0, r7
 80168f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80168fa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80168fe:	4798      	blx	r3
 8016900:	9803      	ldr	r0, [sp, #12]
 8016902:	b007      	add	sp, #28
 8016904:	ecbd 8b02 	vpop	{d8}
 8016908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801690c:	4647      	mov	r7, r8
 801690e:	2300      	movs	r3, #0
 8016910:	9303      	str	r3, [sp, #12]
 8016912:	e7ef      	b.n	80168f4 <rcutils_repl_str+0x140>
 8016914:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016918:	e7db      	b.n	80168d2 <rcutils_repl_str+0x11e>
 801691a:	bf00      	nop

0801691c <rcutils_snprintf>:
 801691c:	b40c      	push	{r2, r3}
 801691e:	b530      	push	{r4, r5, lr}
 8016920:	b083      	sub	sp, #12
 8016922:	ab06      	add	r3, sp, #24
 8016924:	f853 2b04 	ldr.w	r2, [r3], #4
 8016928:	9301      	str	r3, [sp, #4]
 801692a:	b152      	cbz	r2, 8016942 <rcutils_snprintf+0x26>
 801692c:	b138      	cbz	r0, 801693e <rcutils_snprintf+0x22>
 801692e:	b141      	cbz	r1, 8016942 <rcutils_snprintf+0x26>
 8016930:	f002 feec 	bl	801970c <vsniprintf>
 8016934:	b003      	add	sp, #12
 8016936:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801693a:	b002      	add	sp, #8
 801693c:	4770      	bx	lr
 801693e:	2900      	cmp	r1, #0
 8016940:	d0f6      	beq.n	8016930 <rcutils_snprintf+0x14>
 8016942:	f003 f843 	bl	80199cc <__errno>
 8016946:	2316      	movs	r3, #22
 8016948:	6003      	str	r3, [r0, #0]
 801694a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801694e:	e7f1      	b.n	8016934 <rcutils_snprintf+0x18>

08016950 <rcutils_vsnprintf>:
 8016950:	b570      	push	{r4, r5, r6, lr}
 8016952:	b13a      	cbz	r2, 8016964 <rcutils_vsnprintf+0x14>
 8016954:	b120      	cbz	r0, 8016960 <rcutils_vsnprintf+0x10>
 8016956:	b129      	cbz	r1, 8016964 <rcutils_vsnprintf+0x14>
 8016958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801695c:	f002 bed6 	b.w	801970c <vsniprintf>
 8016960:	2900      	cmp	r1, #0
 8016962:	d0f9      	beq.n	8016958 <rcutils_vsnprintf+0x8>
 8016964:	f003 f832 	bl	80199cc <__errno>
 8016968:	2316      	movs	r3, #22
 801696a:	6003      	str	r3, [r0, #0]
 801696c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016970:	bd70      	pop	{r4, r5, r6, pc}
 8016972:	bf00      	nop

08016974 <rcutils_strdup>:
 8016974:	b084      	sub	sp, #16
 8016976:	b570      	push	{r4, r5, r6, lr}
 8016978:	b082      	sub	sp, #8
 801697a:	ac07      	add	r4, sp, #28
 801697c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016980:	4605      	mov	r5, r0
 8016982:	b1b0      	cbz	r0, 80169b2 <rcutils_strdup+0x3e>
 8016984:	f7e9 fc56 	bl	8000234 <strlen>
 8016988:	1c42      	adds	r2, r0, #1
 801698a:	9b07      	ldr	r3, [sp, #28]
 801698c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801698e:	9201      	str	r2, [sp, #4]
 8016990:	4606      	mov	r6, r0
 8016992:	4610      	mov	r0, r2
 8016994:	4798      	blx	r3
 8016996:	4604      	mov	r4, r0
 8016998:	b128      	cbz	r0, 80169a6 <rcutils_strdup+0x32>
 801699a:	9a01      	ldr	r2, [sp, #4]
 801699c:	4629      	mov	r1, r5
 801699e:	f003 f84a 	bl	8019a36 <memcpy>
 80169a2:	2300      	movs	r3, #0
 80169a4:	55a3      	strb	r3, [r4, r6]
 80169a6:	4620      	mov	r0, r4
 80169a8:	b002      	add	sp, #8
 80169aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169ae:	b004      	add	sp, #16
 80169b0:	4770      	bx	lr
 80169b2:	4604      	mov	r4, r0
 80169b4:	e7f7      	b.n	80169a6 <rcutils_strdup+0x32>
 80169b6:	bf00      	nop

080169b8 <rcutils_strndup>:
 80169b8:	b082      	sub	sp, #8
 80169ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169bc:	ac06      	add	r4, sp, #24
 80169be:	e884 000c 	stmia.w	r4, {r2, r3}
 80169c2:	4605      	mov	r5, r0
 80169c4:	b188      	cbz	r0, 80169ea <rcutils_strndup+0x32>
 80169c6:	1c4f      	adds	r7, r1, #1
 80169c8:	460e      	mov	r6, r1
 80169ca:	4638      	mov	r0, r7
 80169cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80169ce:	4790      	blx	r2
 80169d0:	4604      	mov	r4, r0
 80169d2:	b128      	cbz	r0, 80169e0 <rcutils_strndup+0x28>
 80169d4:	463a      	mov	r2, r7
 80169d6:	4629      	mov	r1, r5
 80169d8:	f003 f82d 	bl	8019a36 <memcpy>
 80169dc:	2300      	movs	r3, #0
 80169de:	55a3      	strb	r3, [r4, r6]
 80169e0:	4620      	mov	r0, r4
 80169e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80169e6:	b002      	add	sp, #8
 80169e8:	4770      	bx	lr
 80169ea:	4604      	mov	r4, r0
 80169ec:	e7f8      	b.n	80169e0 <rcutils_strndup+0x28>
 80169ee:	bf00      	nop

080169f0 <rcutils_get_zero_initialized_string_map>:
 80169f0:	4b01      	ldr	r3, [pc, #4]	@ (80169f8 <rcutils_get_zero_initialized_string_map+0x8>)
 80169f2:	2000      	movs	r0, #0
 80169f4:	6018      	str	r0, [r3, #0]
 80169f6:	4770      	bx	lr
 80169f8:	2000b928 	.word	0x2000b928

080169fc <rcutils_string_map_reserve>:
 80169fc:	2800      	cmp	r0, #0
 80169fe:	d05f      	beq.n	8016ac0 <rcutils_string_map_reserve+0xc4>
 8016a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a04:	460c      	mov	r4, r1
 8016a06:	6801      	ldr	r1, [r0, #0]
 8016a08:	b082      	sub	sp, #8
 8016a0a:	4605      	mov	r5, r0
 8016a0c:	b129      	cbz	r1, 8016a1a <rcutils_string_map_reserve+0x1e>
 8016a0e:	68cb      	ldr	r3, [r1, #12]
 8016a10:	42a3      	cmp	r3, r4
 8016a12:	d906      	bls.n	8016a22 <rcutils_string_map_reserve+0x26>
 8016a14:	461c      	mov	r4, r3
 8016a16:	2900      	cmp	r1, #0
 8016a18:	d1f9      	bne.n	8016a0e <rcutils_string_map_reserve+0x12>
 8016a1a:	201f      	movs	r0, #31
 8016a1c:	b002      	add	sp, #8
 8016a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a22:	688b      	ldr	r3, [r1, #8]
 8016a24:	42a3      	cmp	r3, r4
 8016a26:	d047      	beq.n	8016ab8 <rcutils_string_map_reserve+0xbc>
 8016a28:	6a0e      	ldr	r6, [r1, #32]
 8016a2a:	2c00      	cmp	r4, #0
 8016a2c:	d034      	beq.n	8016a98 <rcutils_string_map_reserve+0x9c>
 8016a2e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8016a32:	d243      	bcs.n	8016abc <rcutils_string_map_reserve+0xc0>
 8016a34:	00a7      	lsls	r7, r4, #2
 8016a36:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8016a3a:	6808      	ldr	r0, [r1, #0]
 8016a3c:	4632      	mov	r2, r6
 8016a3e:	4639      	mov	r1, r7
 8016a40:	47c0      	blx	r8
 8016a42:	2800      	cmp	r0, #0
 8016a44:	d03a      	beq.n	8016abc <rcutils_string_map_reserve+0xc0>
 8016a46:	682b      	ldr	r3, [r5, #0]
 8016a48:	4632      	mov	r2, r6
 8016a4a:	6018      	str	r0, [r3, #0]
 8016a4c:	4639      	mov	r1, r7
 8016a4e:	6858      	ldr	r0, [r3, #4]
 8016a50:	47c0      	blx	r8
 8016a52:	2800      	cmp	r0, #0
 8016a54:	d032      	beq.n	8016abc <rcutils_string_map_reserve+0xc0>
 8016a56:	682d      	ldr	r5, [r5, #0]
 8016a58:	68ab      	ldr	r3, [r5, #8]
 8016a5a:	6068      	str	r0, [r5, #4]
 8016a5c:	42a3      	cmp	r3, r4
 8016a5e:	d226      	bcs.n	8016aae <rcutils_string_map_reserve+0xb2>
 8016a60:	682a      	ldr	r2, [r5, #0]
 8016a62:	eb00 0c07 	add.w	ip, r0, r7
 8016a66:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8016a6a:	45e6      	cmp	lr, ip
 8016a6c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8016a70:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8016a74:	d203      	bcs.n	8016a7e <rcutils_string_map_reserve+0x82>
 8016a76:	eb02 0c07 	add.w	ip, r2, r7
 8016a7a:	4566      	cmp	r6, ip
 8016a7c:	d322      	bcc.n	8016ac4 <rcutils_string_map_reserve+0xc8>
 8016a7e:	1ae3      	subs	r3, r4, r3
 8016a80:	009a      	lsls	r2, r3, #2
 8016a82:	4670      	mov	r0, lr
 8016a84:	2100      	movs	r1, #0
 8016a86:	9201      	str	r2, [sp, #4]
 8016a88:	f002 ff0c 	bl	80198a4 <memset>
 8016a8c:	9a01      	ldr	r2, [sp, #4]
 8016a8e:	2100      	movs	r1, #0
 8016a90:	4630      	mov	r0, r6
 8016a92:	f002 ff07 	bl	80198a4 <memset>
 8016a96:	e00a      	b.n	8016aae <rcutils_string_map_reserve+0xb2>
 8016a98:	694f      	ldr	r7, [r1, #20]
 8016a9a:	6808      	ldr	r0, [r1, #0]
 8016a9c:	4631      	mov	r1, r6
 8016a9e:	47b8      	blx	r7
 8016aa0:	682b      	ldr	r3, [r5, #0]
 8016aa2:	4631      	mov	r1, r6
 8016aa4:	6858      	ldr	r0, [r3, #4]
 8016aa6:	601c      	str	r4, [r3, #0]
 8016aa8:	47b8      	blx	r7
 8016aaa:	682d      	ldr	r5, [r5, #0]
 8016aac:	606c      	str	r4, [r5, #4]
 8016aae:	2000      	movs	r0, #0
 8016ab0:	60ac      	str	r4, [r5, #8]
 8016ab2:	b002      	add	sp, #8
 8016ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ab8:	2000      	movs	r0, #0
 8016aba:	e7af      	b.n	8016a1c <rcutils_string_map_reserve+0x20>
 8016abc:	200a      	movs	r0, #10
 8016abe:	e7ad      	b.n	8016a1c <rcutils_string_map_reserve+0x20>
 8016ac0:	200b      	movs	r0, #11
 8016ac2:	4770      	bx	lr
 8016ac4:	1f0b      	subs	r3, r1, #4
 8016ac6:	4418      	add	r0, r3
 8016ac8:	4413      	add	r3, r2
 8016aca:	3a04      	subs	r2, #4
 8016acc:	4417      	add	r7, r2
 8016ace:	2200      	movs	r2, #0
 8016ad0:	f843 2f04 	str.w	r2, [r3, #4]!
 8016ad4:	42bb      	cmp	r3, r7
 8016ad6:	f840 2f04 	str.w	r2, [r0, #4]!
 8016ada:	d1f9      	bne.n	8016ad0 <rcutils_string_map_reserve+0xd4>
 8016adc:	e7e7      	b.n	8016aae <rcutils_string_map_reserve+0xb2>
 8016ade:	bf00      	nop

08016ae0 <rcutils_string_map_init>:
 8016ae0:	b082      	sub	sp, #8
 8016ae2:	b570      	push	{r4, r5, r6, lr}
 8016ae4:	ac04      	add	r4, sp, #16
 8016ae6:	e884 000c 	stmia.w	r4, {r2, r3}
 8016aea:	b380      	cbz	r0, 8016b4e <rcutils_string_map_init+0x6e>
 8016aec:	6806      	ldr	r6, [r0, #0]
 8016aee:	4604      	mov	r4, r0
 8016af0:	b12e      	cbz	r6, 8016afe <rcutils_string_map_init+0x1e>
 8016af2:	251e      	movs	r5, #30
 8016af4:	4628      	mov	r0, r5
 8016af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016afa:	b002      	add	sp, #8
 8016afc:	4770      	bx	lr
 8016afe:	a804      	add	r0, sp, #16
 8016b00:	460d      	mov	r5, r1
 8016b02:	f7f6 ff4f 	bl	800d9a4 <rcutils_allocator_is_valid>
 8016b06:	b310      	cbz	r0, 8016b4e <rcutils_string_map_init+0x6e>
 8016b08:	9b04      	ldr	r3, [sp, #16]
 8016b0a:	9908      	ldr	r1, [sp, #32]
 8016b0c:	2024      	movs	r0, #36	@ 0x24
 8016b0e:	4798      	blx	r3
 8016b10:	6020      	str	r0, [r4, #0]
 8016b12:	b310      	cbz	r0, 8016b5a <rcutils_string_map_init+0x7a>
 8016b14:	f10d 0e10 	add.w	lr, sp, #16
 8016b18:	e9c0 6600 	strd	r6, r6, [r0]
 8016b1c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8016b20:	f100 0c10 	add.w	ip, r0, #16
 8016b24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016b28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b2c:	f8de 3000 	ldr.w	r3, [lr]
 8016b30:	f8cc 3000 	str.w	r3, [ip]
 8016b34:	4629      	mov	r1, r5
 8016b36:	4620      	mov	r0, r4
 8016b38:	f7ff ff60 	bl	80169fc <rcutils_string_map_reserve>
 8016b3c:	4605      	mov	r5, r0
 8016b3e:	2800      	cmp	r0, #0
 8016b40:	d0d8      	beq.n	8016af4 <rcutils_string_map_init+0x14>
 8016b42:	9b05      	ldr	r3, [sp, #20]
 8016b44:	9908      	ldr	r1, [sp, #32]
 8016b46:	6820      	ldr	r0, [r4, #0]
 8016b48:	4798      	blx	r3
 8016b4a:	6026      	str	r6, [r4, #0]
 8016b4c:	e7d2      	b.n	8016af4 <rcutils_string_map_init+0x14>
 8016b4e:	250b      	movs	r5, #11
 8016b50:	4628      	mov	r0, r5
 8016b52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b56:	b002      	add	sp, #8
 8016b58:	4770      	bx	lr
 8016b5a:	250a      	movs	r5, #10
 8016b5c:	e7ca      	b.n	8016af4 <rcutils_string_map_init+0x14>
 8016b5e:	bf00      	nop

08016b60 <rcutils_string_map_fini>:
 8016b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b64:	b082      	sub	sp, #8
 8016b66:	2800      	cmp	r0, #0
 8016b68:	d03a      	beq.n	8016be0 <rcutils_string_map_fini+0x80>
 8016b6a:	6804      	ldr	r4, [r0, #0]
 8016b6c:	4606      	mov	r6, r0
 8016b6e:	2c00      	cmp	r4, #0
 8016b70:	d032      	beq.n	8016bd8 <rcutils_string_map_fini+0x78>
 8016b72:	68a3      	ldr	r3, [r4, #8]
 8016b74:	b32b      	cbz	r3, 8016bc2 <rcutils_string_map_fini+0x62>
 8016b76:	2500      	movs	r5, #0
 8016b78:	6822      	ldr	r2, [r4, #0]
 8016b7a:	462f      	mov	r7, r5
 8016b7c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016b80:	b1e0      	cbz	r0, 8016bbc <rcutils_string_map_fini+0x5c>
 8016b82:	6a21      	ldr	r1, [r4, #32]
 8016b84:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8016b88:	9101      	str	r1, [sp, #4]
 8016b8a:	47c0      	blx	r8
 8016b8c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016b90:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016b94:	9901      	ldr	r1, [sp, #4]
 8016b96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016b9a:	47c0      	blx	r8
 8016b9c:	68e3      	ldr	r3, [r4, #12]
 8016b9e:	6862      	ldr	r2, [r4, #4]
 8016ba0:	3b01      	subs	r3, #1
 8016ba2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016ba6:	60e3      	str	r3, [r4, #12]
 8016ba8:	6834      	ldr	r4, [r6, #0]
 8016baa:	68a3      	ldr	r3, [r4, #8]
 8016bac:	3501      	adds	r5, #1
 8016bae:	429d      	cmp	r5, r3
 8016bb0:	d207      	bcs.n	8016bc2 <rcutils_string_map_fini+0x62>
 8016bb2:	6822      	ldr	r2, [r4, #0]
 8016bb4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016bb8:	2800      	cmp	r0, #0
 8016bba:	d1e2      	bne.n	8016b82 <rcutils_string_map_fini+0x22>
 8016bbc:	3501      	adds	r5, #1
 8016bbe:	429d      	cmp	r5, r3
 8016bc0:	d3dc      	bcc.n	8016b7c <rcutils_string_map_fini+0x1c>
 8016bc2:	2100      	movs	r1, #0
 8016bc4:	4630      	mov	r0, r6
 8016bc6:	f7ff ff19 	bl	80169fc <rcutils_string_map_reserve>
 8016bca:	4604      	mov	r4, r0
 8016bcc:	b920      	cbnz	r0, 8016bd8 <rcutils_string_map_fini+0x78>
 8016bce:	6830      	ldr	r0, [r6, #0]
 8016bd0:	6943      	ldr	r3, [r0, #20]
 8016bd2:	6a01      	ldr	r1, [r0, #32]
 8016bd4:	4798      	blx	r3
 8016bd6:	6034      	str	r4, [r6, #0]
 8016bd8:	4620      	mov	r0, r4
 8016bda:	b002      	add	sp, #8
 8016bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016be0:	240b      	movs	r4, #11
 8016be2:	4620      	mov	r0, r4
 8016be4:	b002      	add	sp, #8
 8016be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bea:	bf00      	nop

08016bec <rcutils_string_map_getn>:
 8016bec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bf0:	b300      	cbz	r0, 8016c34 <rcutils_string_map_getn+0x48>
 8016bf2:	6807      	ldr	r7, [r0, #0]
 8016bf4:	b1ff      	cbz	r7, 8016c36 <rcutils_string_map_getn+0x4a>
 8016bf6:	4688      	mov	r8, r1
 8016bf8:	b1e1      	cbz	r1, 8016c34 <rcutils_string_map_getn+0x48>
 8016bfa:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8016bfe:	683e      	ldr	r6, [r7, #0]
 8016c00:	f1ba 0f00 	cmp.w	sl, #0
 8016c04:	d016      	beq.n	8016c34 <rcutils_string_map_getn+0x48>
 8016c06:	4691      	mov	r9, r2
 8016c08:	3e04      	subs	r6, #4
 8016c0a:	2400      	movs	r4, #0
 8016c0c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8016c10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016c14:	4628      	mov	r0, r5
 8016c16:	3401      	adds	r4, #1
 8016c18:	b155      	cbz	r5, 8016c30 <rcutils_string_map_getn+0x44>
 8016c1a:	f7e9 fb0b 	bl	8000234 <strlen>
 8016c1e:	4548      	cmp	r0, r9
 8016c20:	4602      	mov	r2, r0
 8016c22:	4629      	mov	r1, r5
 8016c24:	bf38      	it	cc
 8016c26:	464a      	movcc	r2, r9
 8016c28:	4640      	mov	r0, r8
 8016c2a:	f002 fe50 	bl	80198ce <strncmp>
 8016c2e:	b128      	cbz	r0, 8016c3c <rcutils_string_map_getn+0x50>
 8016c30:	45a2      	cmp	sl, r4
 8016c32:	d1eb      	bne.n	8016c0c <rcutils_string_map_getn+0x20>
 8016c34:	2700      	movs	r7, #0
 8016c36:	4638      	mov	r0, r7
 8016c38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	f853 700b 	ldr.w	r7, [r3, fp]
 8016c42:	4638      	mov	r0, r7
 8016c44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016c48 <rmw_get_zero_initialized_context>:
 8016c48:	b510      	push	{r4, lr}
 8016c4a:	4604      	mov	r4, r0
 8016c4c:	3010      	adds	r0, #16
 8016c4e:	f7f6 ff3b 	bl	800dac8 <rmw_get_zero_initialized_init_options>
 8016c52:	2300      	movs	r3, #0
 8016c54:	2000      	movs	r0, #0
 8016c56:	2100      	movs	r1, #0
 8016c58:	e9c4 0100 	strd	r0, r1, [r4]
 8016c5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8016c60:	60a3      	str	r3, [r4, #8]
 8016c62:	4620      	mov	r0, r4
 8016c64:	bd10      	pop	{r4, pc}
 8016c66:	bf00      	nop

08016c68 <rmw_time_equal>:
 8016c68:	b4f0      	push	{r4, r5, r6, r7}
 8016c6a:	b084      	sub	sp, #16
 8016c6c:	ac04      	add	r4, sp, #16
 8016c6e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016c72:	4603      	mov	r3, r0
 8016c74:	4924      	ldr	r1, [pc, #144]	@ (8016d08 <rmw_time_equal+0xa0>)
 8016c76:	9e03      	ldr	r6, [sp, #12]
 8016c78:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016c7c:	2202      	movs	r2, #2
 8016c7e:	4299      	cmp	r1, r3
 8016c80:	41aa      	sbcs	r2, r5
 8016c82:	d330      	bcc.n	8016ce6 <rmw_time_equal+0x7e>
 8016c84:	4c21      	ldr	r4, [pc, #132]	@ (8016d0c <rmw_time_equal+0xa4>)
 8016c86:	fba3 3204 	umull	r3, r2, r3, r4
 8016c8a:	fb04 2205 	mla	r2, r4, r5, r2
 8016c8e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016c92:	43dd      	mvns	r5, r3
 8016c94:	1a8c      	subs	r4, r1, r2
 8016c96:	4285      	cmp	r5, r0
 8016c98:	41b4      	sbcs	r4, r6
 8016c9a:	d332      	bcc.n	8016d02 <rmw_time_equal+0x9a>
 8016c9c:	eb10 0c03 	adds.w	ip, r0, r3
 8016ca0:	eb42 0106 	adc.w	r1, r2, r6
 8016ca4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8016ca8:	4817      	ldr	r0, [pc, #92]	@ (8016d08 <rmw_time_equal+0xa0>)
 8016caa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8016cac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016cae:	2202      	movs	r2, #2
 8016cb0:	4298      	cmp	r0, r3
 8016cb2:	41b2      	sbcs	r2, r6
 8016cb4:	d31c      	bcc.n	8016cf0 <rmw_time_equal+0x88>
 8016cb6:	4c15      	ldr	r4, [pc, #84]	@ (8016d0c <rmw_time_equal+0xa4>)
 8016cb8:	fba3 3204 	umull	r3, r2, r3, r4
 8016cbc:	fb04 2206 	mla	r2, r4, r6, r2
 8016cc0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016cc4:	43de      	mvns	r6, r3
 8016cc6:	1a84      	subs	r4, r0, r2
 8016cc8:	42ae      	cmp	r6, r5
 8016cca:	41bc      	sbcs	r4, r7
 8016ccc:	d315      	bcc.n	8016cfa <rmw_time_equal+0x92>
 8016cce:	195b      	adds	r3, r3, r5
 8016cd0:	eb42 0207 	adc.w	r2, r2, r7
 8016cd4:	428a      	cmp	r2, r1
 8016cd6:	bf08      	it	eq
 8016cd8:	4563      	cmpeq	r3, ip
 8016cda:	bf0c      	ite	eq
 8016cdc:	2001      	moveq	r0, #1
 8016cde:	2000      	movne	r0, #0
 8016ce0:	b004      	add	sp, #16
 8016ce2:	bcf0      	pop	{r4, r5, r6, r7}
 8016ce4:	4770      	bx	lr
 8016ce6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016cea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016cee:	e7d9      	b.n	8016ca4 <rmw_time_equal+0x3c>
 8016cf0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016cf4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016cf8:	e7ec      	b.n	8016cd4 <rmw_time_equal+0x6c>
 8016cfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016cfe:	4602      	mov	r2, r0
 8016d00:	e7e8      	b.n	8016cd4 <rmw_time_equal+0x6c>
 8016d02:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016d06:	e7cd      	b.n	8016ca4 <rmw_time_equal+0x3c>
 8016d08:	25c17d04 	.word	0x25c17d04
 8016d0c:	3b9aca00 	.word	0x3b9aca00

08016d10 <rmw_time_total_nsec>:
 8016d10:	b470      	push	{r4, r5, r6}
 8016d12:	b085      	sub	sp, #20
 8016d14:	ac04      	add	r4, sp, #16
 8016d16:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	4912      	ldr	r1, [pc, #72]	@ (8016d68 <rmw_time_total_nsec+0x58>)
 8016d1e:	9e03      	ldr	r6, [sp, #12]
 8016d20:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016d24:	2202      	movs	r2, #2
 8016d26:	4299      	cmp	r1, r3
 8016d28:	41aa      	sbcs	r2, r5
 8016d2a:	d311      	bcc.n	8016d50 <rmw_time_total_nsec+0x40>
 8016d2c:	4c0f      	ldr	r4, [pc, #60]	@ (8016d6c <rmw_time_total_nsec+0x5c>)
 8016d2e:	fba3 3204 	umull	r3, r2, r3, r4
 8016d32:	fb04 2205 	mla	r2, r4, r5, r2
 8016d36:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016d3a:	43dd      	mvns	r5, r3
 8016d3c:	1a8c      	subs	r4, r1, r2
 8016d3e:	4285      	cmp	r5, r0
 8016d40:	41b4      	sbcs	r4, r6
 8016d42:	d30c      	bcc.n	8016d5e <rmw_time_total_nsec+0x4e>
 8016d44:	1818      	adds	r0, r3, r0
 8016d46:	eb42 0106 	adc.w	r1, r2, r6
 8016d4a:	b005      	add	sp, #20
 8016d4c:	bc70      	pop	{r4, r5, r6}
 8016d4e:	4770      	bx	lr
 8016d50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016d54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016d58:	b005      	add	sp, #20
 8016d5a:	bc70      	pop	{r4, r5, r6}
 8016d5c:	4770      	bx	lr
 8016d5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016d62:	b005      	add	sp, #20
 8016d64:	bc70      	pop	{r4, r5, r6}
 8016d66:	4770      	bx	lr
 8016d68:	25c17d04 	.word	0x25c17d04
 8016d6c:	3b9aca00 	.word	0x3b9aca00

08016d70 <rmw_get_zero_initialized_message_info>:
 8016d70:	b510      	push	{r4, lr}
 8016d72:	2240      	movs	r2, #64	@ 0x40
 8016d74:	4604      	mov	r4, r0
 8016d76:	2100      	movs	r1, #0
 8016d78:	f002 fd94 	bl	80198a4 <memset>
 8016d7c:	4620      	mov	r0, r4
 8016d7e:	bd10      	pop	{r4, pc}

08016d80 <rmw_validate_full_topic_name>:
 8016d80:	2800      	cmp	r0, #0
 8016d82:	d057      	beq.n	8016e34 <rmw_validate_full_topic_name+0xb4>
 8016d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d88:	460d      	mov	r5, r1
 8016d8a:	2900      	cmp	r1, #0
 8016d8c:	d054      	beq.n	8016e38 <rmw_validate_full_topic_name+0xb8>
 8016d8e:	4616      	mov	r6, r2
 8016d90:	4604      	mov	r4, r0
 8016d92:	f7e9 fa4f 	bl	8000234 <strlen>
 8016d96:	b148      	cbz	r0, 8016dac <rmw_validate_full_topic_name+0x2c>
 8016d98:	7823      	ldrb	r3, [r4, #0]
 8016d9a:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d9c:	d00d      	beq.n	8016dba <rmw_validate_full_topic_name+0x3a>
 8016d9e:	2302      	movs	r3, #2
 8016da0:	602b      	str	r3, [r5, #0]
 8016da2:	b13e      	cbz	r6, 8016db4 <rmw_validate_full_topic_name+0x34>
 8016da4:	2000      	movs	r0, #0
 8016da6:	6030      	str	r0, [r6, #0]
 8016da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dac:	2301      	movs	r3, #1
 8016dae:	602b      	str	r3, [r5, #0]
 8016db0:	2e00      	cmp	r6, #0
 8016db2:	d1f7      	bne.n	8016da4 <rmw_validate_full_topic_name+0x24>
 8016db4:	2000      	movs	r0, #0
 8016db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dba:	1e43      	subs	r3, r0, #1
 8016dbc:	5ce2      	ldrb	r2, [r4, r3]
 8016dbe:	2a2f      	cmp	r2, #47	@ 0x2f
 8016dc0:	d03c      	beq.n	8016e3c <rmw_validate_full_topic_name+0xbc>
 8016dc2:	1e63      	subs	r3, r4, #1
 8016dc4:	eb03 0800 	add.w	r8, r3, r0
 8016dc8:	f1c4 0e01 	rsb	lr, r4, #1
 8016dcc:	eb0e 0703 	add.w	r7, lr, r3
 8016dd0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8016dd4:	f021 0220 	bic.w	r2, r1, #32
 8016dd8:	3a41      	subs	r2, #65	@ 0x41
 8016dda:	2a19      	cmp	r2, #25
 8016ddc:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8016de0:	d90b      	bls.n	8016dfa <rmw_validate_full_topic_name+0x7a>
 8016de2:	295f      	cmp	r1, #95	@ 0x5f
 8016de4:	d009      	beq.n	8016dfa <rmw_validate_full_topic_name+0x7a>
 8016de6:	f1bc 0f0a 	cmp.w	ip, #10
 8016dea:	d906      	bls.n	8016dfa <rmw_validate_full_topic_name+0x7a>
 8016dec:	2304      	movs	r3, #4
 8016dee:	602b      	str	r3, [r5, #0]
 8016df0:	2e00      	cmp	r6, #0
 8016df2:	d0df      	beq.n	8016db4 <rmw_validate_full_topic_name+0x34>
 8016df4:	6037      	str	r7, [r6, #0]
 8016df6:	2000      	movs	r0, #0
 8016df8:	e7d6      	b.n	8016da8 <rmw_validate_full_topic_name+0x28>
 8016dfa:	4543      	cmp	r3, r8
 8016dfc:	d1e6      	bne.n	8016dcc <rmw_validate_full_topic_name+0x4c>
 8016dfe:	4f1a      	ldr	r7, [pc, #104]	@ (8016e68 <rmw_validate_full_topic_name+0xe8>)
 8016e00:	2301      	movs	r3, #1
 8016e02:	e004      	b.n	8016e0e <rmw_validate_full_topic_name+0x8e>
 8016e04:	4298      	cmp	r0, r3
 8016e06:	f104 0401 	add.w	r4, r4, #1
 8016e0a:	d91c      	bls.n	8016e46 <rmw_validate_full_topic_name+0xc6>
 8016e0c:	4613      	mov	r3, r2
 8016e0e:	4298      	cmp	r0, r3
 8016e10:	f103 0201 	add.w	r2, r3, #1
 8016e14:	d0f6      	beq.n	8016e04 <rmw_validate_full_topic_name+0x84>
 8016e16:	7821      	ldrb	r1, [r4, #0]
 8016e18:	292f      	cmp	r1, #47	@ 0x2f
 8016e1a:	d1f3      	bne.n	8016e04 <rmw_validate_full_topic_name+0x84>
 8016e1c:	7861      	ldrb	r1, [r4, #1]
 8016e1e:	292f      	cmp	r1, #47	@ 0x2f
 8016e20:	d01c      	beq.n	8016e5c <rmw_validate_full_topic_name+0xdc>
 8016e22:	5dc9      	ldrb	r1, [r1, r7]
 8016e24:	0749      	lsls	r1, r1, #29
 8016e26:	d5ed      	bpl.n	8016e04 <rmw_validate_full_topic_name+0x84>
 8016e28:	2206      	movs	r2, #6
 8016e2a:	602a      	str	r2, [r5, #0]
 8016e2c:	2e00      	cmp	r6, #0
 8016e2e:	d0c1      	beq.n	8016db4 <rmw_validate_full_topic_name+0x34>
 8016e30:	6033      	str	r3, [r6, #0]
 8016e32:	e7bf      	b.n	8016db4 <rmw_validate_full_topic_name+0x34>
 8016e34:	200b      	movs	r0, #11
 8016e36:	4770      	bx	lr
 8016e38:	200b      	movs	r0, #11
 8016e3a:	e7b5      	b.n	8016da8 <rmw_validate_full_topic_name+0x28>
 8016e3c:	2203      	movs	r2, #3
 8016e3e:	602a      	str	r2, [r5, #0]
 8016e40:	2e00      	cmp	r6, #0
 8016e42:	d1f5      	bne.n	8016e30 <rmw_validate_full_topic_name+0xb0>
 8016e44:	e7b6      	b.n	8016db4 <rmw_validate_full_topic_name+0x34>
 8016e46:	28f7      	cmp	r0, #247	@ 0xf7
 8016e48:	d802      	bhi.n	8016e50 <rmw_validate_full_topic_name+0xd0>
 8016e4a:	2000      	movs	r0, #0
 8016e4c:	6028      	str	r0, [r5, #0]
 8016e4e:	e7ab      	b.n	8016da8 <rmw_validate_full_topic_name+0x28>
 8016e50:	2307      	movs	r3, #7
 8016e52:	602b      	str	r3, [r5, #0]
 8016e54:	2e00      	cmp	r6, #0
 8016e56:	d0ad      	beq.n	8016db4 <rmw_validate_full_topic_name+0x34>
 8016e58:	23f6      	movs	r3, #246	@ 0xf6
 8016e5a:	e7e9      	b.n	8016e30 <rmw_validate_full_topic_name+0xb0>
 8016e5c:	2205      	movs	r2, #5
 8016e5e:	602a      	str	r2, [r5, #0]
 8016e60:	2e00      	cmp	r6, #0
 8016e62:	d1e5      	bne.n	8016e30 <rmw_validate_full_topic_name+0xb0>
 8016e64:	e7a6      	b.n	8016db4 <rmw_validate_full_topic_name+0x34>
 8016e66:	bf00      	nop
 8016e68:	0801c652 	.word	0x0801c652

08016e6c <rmw_validate_namespace_with_size>:
 8016e6c:	b340      	cbz	r0, 8016ec0 <rmw_validate_namespace_with_size+0x54>
 8016e6e:	b570      	push	{r4, r5, r6, lr}
 8016e70:	4614      	mov	r4, r2
 8016e72:	b0c2      	sub	sp, #264	@ 0x108
 8016e74:	b332      	cbz	r2, 8016ec4 <rmw_validate_namespace_with_size+0x58>
 8016e76:	2901      	cmp	r1, #1
 8016e78:	460d      	mov	r5, r1
 8016e7a:	461e      	mov	r6, r3
 8016e7c:	d102      	bne.n	8016e84 <rmw_validate_namespace_with_size+0x18>
 8016e7e:	7803      	ldrb	r3, [r0, #0]
 8016e80:	2b2f      	cmp	r3, #47	@ 0x2f
 8016e82:	d012      	beq.n	8016eaa <rmw_validate_namespace_with_size+0x3e>
 8016e84:	aa01      	add	r2, sp, #4
 8016e86:	4669      	mov	r1, sp
 8016e88:	f7ff ff7a 	bl	8016d80 <rmw_validate_full_topic_name>
 8016e8c:	b978      	cbnz	r0, 8016eae <rmw_validate_namespace_with_size+0x42>
 8016e8e:	9b00      	ldr	r3, [sp, #0]
 8016e90:	b14b      	cbz	r3, 8016ea6 <rmw_validate_namespace_with_size+0x3a>
 8016e92:	2b07      	cmp	r3, #7
 8016e94:	d007      	beq.n	8016ea6 <rmw_validate_namespace_with_size+0x3a>
 8016e96:	1e5a      	subs	r2, r3, #1
 8016e98:	2a05      	cmp	r2, #5
 8016e9a:	d82b      	bhi.n	8016ef4 <rmw_validate_namespace_with_size+0x88>
 8016e9c:	e8df f002 	tbb	[pc, r2]
 8016ea0:	1e212427 	.word	0x1e212427
 8016ea4:	141b      	.short	0x141b
 8016ea6:	2df5      	cmp	r5, #245	@ 0xf5
 8016ea8:	d803      	bhi.n	8016eb2 <rmw_validate_namespace_with_size+0x46>
 8016eaa:	2000      	movs	r0, #0
 8016eac:	6020      	str	r0, [r4, #0]
 8016eae:	b042      	add	sp, #264	@ 0x108
 8016eb0:	bd70      	pop	{r4, r5, r6, pc}
 8016eb2:	2307      	movs	r3, #7
 8016eb4:	6023      	str	r3, [r4, #0]
 8016eb6:	2e00      	cmp	r6, #0
 8016eb8:	d0f9      	beq.n	8016eae <rmw_validate_namespace_with_size+0x42>
 8016eba:	23f4      	movs	r3, #244	@ 0xf4
 8016ebc:	6033      	str	r3, [r6, #0]
 8016ebe:	e7f6      	b.n	8016eae <rmw_validate_namespace_with_size+0x42>
 8016ec0:	200b      	movs	r0, #11
 8016ec2:	4770      	bx	lr
 8016ec4:	200b      	movs	r0, #11
 8016ec6:	e7f2      	b.n	8016eae <rmw_validate_namespace_with_size+0x42>
 8016ec8:	2306      	movs	r3, #6
 8016eca:	6023      	str	r3, [r4, #0]
 8016ecc:	2e00      	cmp	r6, #0
 8016ece:	d0ee      	beq.n	8016eae <rmw_validate_namespace_with_size+0x42>
 8016ed0:	9b01      	ldr	r3, [sp, #4]
 8016ed2:	6033      	str	r3, [r6, #0]
 8016ed4:	e7eb      	b.n	8016eae <rmw_validate_namespace_with_size+0x42>
 8016ed6:	2305      	movs	r3, #5
 8016ed8:	6023      	str	r3, [r4, #0]
 8016eda:	e7f7      	b.n	8016ecc <rmw_validate_namespace_with_size+0x60>
 8016edc:	2304      	movs	r3, #4
 8016ede:	6023      	str	r3, [r4, #0]
 8016ee0:	e7f4      	b.n	8016ecc <rmw_validate_namespace_with_size+0x60>
 8016ee2:	2303      	movs	r3, #3
 8016ee4:	6023      	str	r3, [r4, #0]
 8016ee6:	e7f1      	b.n	8016ecc <rmw_validate_namespace_with_size+0x60>
 8016ee8:	2302      	movs	r3, #2
 8016eea:	6023      	str	r3, [r4, #0]
 8016eec:	e7ee      	b.n	8016ecc <rmw_validate_namespace_with_size+0x60>
 8016eee:	2301      	movs	r3, #1
 8016ef0:	6023      	str	r3, [r4, #0]
 8016ef2:	e7eb      	b.n	8016ecc <rmw_validate_namespace_with_size+0x60>
 8016ef4:	4a03      	ldr	r2, [pc, #12]	@ (8016f04 <rmw_validate_namespace_with_size+0x98>)
 8016ef6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016efa:	a802      	add	r0, sp, #8
 8016efc:	f7ff fd0e 	bl	801691c <rcutils_snprintf>
 8016f00:	2001      	movs	r0, #1
 8016f02:	e7d4      	b.n	8016eae <rmw_validate_namespace_with_size+0x42>
 8016f04:	0801c180 	.word	0x0801c180

08016f08 <rmw_validate_namespace>:
 8016f08:	b168      	cbz	r0, 8016f26 <rmw_validate_namespace+0x1e>
 8016f0a:	b570      	push	{r4, r5, r6, lr}
 8016f0c:	460d      	mov	r5, r1
 8016f0e:	4616      	mov	r6, r2
 8016f10:	4604      	mov	r4, r0
 8016f12:	f7e9 f98f 	bl	8000234 <strlen>
 8016f16:	4633      	mov	r3, r6
 8016f18:	4601      	mov	r1, r0
 8016f1a:	462a      	mov	r2, r5
 8016f1c:	4620      	mov	r0, r4
 8016f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f22:	f7ff bfa3 	b.w	8016e6c <rmw_validate_namespace_with_size>
 8016f26:	200b      	movs	r0, #11
 8016f28:	4770      	bx	lr
 8016f2a:	bf00      	nop

08016f2c <rmw_namespace_validation_result_string>:
 8016f2c:	2807      	cmp	r0, #7
 8016f2e:	bf9a      	itte	ls
 8016f30:	4b02      	ldrls	r3, [pc, #8]	@ (8016f3c <rmw_namespace_validation_result_string+0x10>)
 8016f32:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016f36:	4802      	ldrhi	r0, [pc, #8]	@ (8016f40 <rmw_namespace_validation_result_string+0x14>)
 8016f38:	4770      	bx	lr
 8016f3a:	bf00      	nop
 8016f3c:	0801c378 	.word	0x0801c378
 8016f40:	0801c1d0 	.word	0x0801c1d0

08016f44 <rmw_validate_node_name>:
 8016f44:	2800      	cmp	r0, #0
 8016f46:	d03b      	beq.n	8016fc0 <rmw_validate_node_name+0x7c>
 8016f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f4c:	460d      	mov	r5, r1
 8016f4e:	2900      	cmp	r1, #0
 8016f50:	d038      	beq.n	8016fc4 <rmw_validate_node_name+0x80>
 8016f52:	4616      	mov	r6, r2
 8016f54:	4604      	mov	r4, r0
 8016f56:	f7e9 f96d 	bl	8000234 <strlen>
 8016f5a:	b1e0      	cbz	r0, 8016f96 <rmw_validate_node_name+0x52>
 8016f5c:	1e63      	subs	r3, r4, #1
 8016f5e:	eb03 0800 	add.w	r8, r3, r0
 8016f62:	f1c4 0101 	rsb	r1, r4, #1
 8016f66:	18cf      	adds	r7, r1, r3
 8016f68:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8016f6c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8016f70:	f02e 0c20 	bic.w	ip, lr, #32
 8016f74:	2a09      	cmp	r2, #9
 8016f76:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8016f7a:	d914      	bls.n	8016fa6 <rmw_validate_node_name+0x62>
 8016f7c:	f1bc 0f19 	cmp.w	ip, #25
 8016f80:	d911      	bls.n	8016fa6 <rmw_validate_node_name+0x62>
 8016f82:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8016f86:	d00e      	beq.n	8016fa6 <rmw_validate_node_name+0x62>
 8016f88:	2302      	movs	r3, #2
 8016f8a:	602b      	str	r3, [r5, #0]
 8016f8c:	b106      	cbz	r6, 8016f90 <rmw_validate_node_name+0x4c>
 8016f8e:	6037      	str	r7, [r6, #0]
 8016f90:	2000      	movs	r0, #0
 8016f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f96:	2301      	movs	r3, #1
 8016f98:	602b      	str	r3, [r5, #0]
 8016f9a:	2e00      	cmp	r6, #0
 8016f9c:	d0f8      	beq.n	8016f90 <rmw_validate_node_name+0x4c>
 8016f9e:	2000      	movs	r0, #0
 8016fa0:	6030      	str	r0, [r6, #0]
 8016fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fa6:	4543      	cmp	r3, r8
 8016fa8:	d1dd      	bne.n	8016f66 <rmw_validate_node_name+0x22>
 8016faa:	7822      	ldrb	r2, [r4, #0]
 8016fac:	4b0d      	ldr	r3, [pc, #52]	@ (8016fe4 <rmw_validate_node_name+0xa0>)
 8016fae:	5cd3      	ldrb	r3, [r2, r3]
 8016fb0:	f013 0304 	ands.w	r3, r3, #4
 8016fb4:	d110      	bne.n	8016fd8 <rmw_validate_node_name+0x94>
 8016fb6:	28ff      	cmp	r0, #255	@ 0xff
 8016fb8:	d806      	bhi.n	8016fc8 <rmw_validate_node_name+0x84>
 8016fba:	602b      	str	r3, [r5, #0]
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	e7e8      	b.n	8016f92 <rmw_validate_node_name+0x4e>
 8016fc0:	200b      	movs	r0, #11
 8016fc2:	4770      	bx	lr
 8016fc4:	200b      	movs	r0, #11
 8016fc6:	e7e4      	b.n	8016f92 <rmw_validate_node_name+0x4e>
 8016fc8:	2204      	movs	r2, #4
 8016fca:	602a      	str	r2, [r5, #0]
 8016fcc:	2e00      	cmp	r6, #0
 8016fce:	d0df      	beq.n	8016f90 <rmw_validate_node_name+0x4c>
 8016fd0:	22fe      	movs	r2, #254	@ 0xfe
 8016fd2:	6032      	str	r2, [r6, #0]
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	e7dc      	b.n	8016f92 <rmw_validate_node_name+0x4e>
 8016fd8:	2303      	movs	r3, #3
 8016fda:	602b      	str	r3, [r5, #0]
 8016fdc:	2e00      	cmp	r6, #0
 8016fde:	d1de      	bne.n	8016f9e <rmw_validate_node_name+0x5a>
 8016fe0:	e7d6      	b.n	8016f90 <rmw_validate_node_name+0x4c>
 8016fe2:	bf00      	nop
 8016fe4:	0801c652 	.word	0x0801c652

08016fe8 <rmw_node_name_validation_result_string>:
 8016fe8:	2804      	cmp	r0, #4
 8016fea:	bf9a      	itte	ls
 8016fec:	4b02      	ldrls	r3, [pc, #8]	@ (8016ff8 <rmw_node_name_validation_result_string+0x10>)
 8016fee:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016ff2:	4802      	ldrhi	r0, [pc, #8]	@ (8016ffc <rmw_node_name_validation_result_string+0x14>)
 8016ff4:	4770      	bx	lr
 8016ff6:	bf00      	nop
 8016ff8:	0801c484 	.word	0x0801c484
 8016ffc:	0801c398 	.word	0x0801c398

08017000 <on_status>:
 8017000:	b082      	sub	sp, #8
 8017002:	b002      	add	sp, #8
 8017004:	4770      	bx	lr
 8017006:	bf00      	nop

08017008 <on_topic>:
 8017008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801700c:	4a22      	ldr	r2, [pc, #136]	@ (8017098 <on_topic+0x90>)
 801700e:	b094      	sub	sp, #80	@ 0x50
 8017010:	6812      	ldr	r2, [r2, #0]
 8017012:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8017014:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017018:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801701c:	b3c2      	cbz	r2, 8017090 <on_topic+0x88>
 801701e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8017022:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8017026:	e001      	b.n	801702c <on_topic+0x24>
 8017028:	6852      	ldr	r2, [r2, #4]
 801702a:	b38a      	cbz	r2, 8017090 <on_topic+0x88>
 801702c:	6894      	ldr	r4, [r2, #8]
 801702e:	8aa3      	ldrh	r3, [r4, #20]
 8017030:	428b      	cmp	r3, r1
 8017032:	d1f9      	bne.n	8017028 <on_topic+0x20>
 8017034:	7da3      	ldrb	r3, [r4, #22]
 8017036:	4283      	cmp	r3, r0
 8017038:	d1f6      	bne.n	8017028 <on_topic+0x20>
 801703a:	2248      	movs	r2, #72	@ 0x48
 801703c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017040:	4668      	mov	r0, sp
 8017042:	f002 fcf8 	bl	8019a36 <memcpy>
 8017046:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801704a:	cb0c      	ldmia	r3, {r2, r3}
 801704c:	4620      	mov	r0, r4
 801704e:	f7f7 fe3f 	bl	800ecd0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017052:	4607      	mov	r7, r0
 8017054:	b1e0      	cbz	r0, 8017090 <on_topic+0x88>
 8017056:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801705a:	4632      	mov	r2, r6
 801705c:	4628      	mov	r0, r5
 801705e:	f108 0110 	add.w	r1, r8, #16
 8017062:	f7f8 fe73 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 8017066:	b930      	cbnz	r0, 8017076 <on_topic+0x6e>
 8017068:	480c      	ldr	r0, [pc, #48]	@ (801709c <on_topic+0x94>)
 801706a:	4639      	mov	r1, r7
 801706c:	b014      	add	sp, #80	@ 0x50
 801706e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017072:	f000 b8bd 	b.w	80171f0 <put_memory>
 8017076:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801707a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801707e:	f7f7 fc25 	bl	800e8cc <rmw_uros_epoch_nanos>
 8017082:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8017086:	2305      	movs	r3, #5
 8017088:	e942 0102 	strd	r0, r1, [r2, #-8]
 801708c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8017090:	b014      	add	sp, #80	@ 0x50
 8017092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017096:	bf00      	nop
 8017098:	2000b86c 	.word	0x2000b86c
 801709c:	2000b85c 	.word	0x2000b85c

080170a0 <on_request>:
 80170a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170a4:	4823      	ldr	r0, [pc, #140]	@ (8017134 <on_request+0x94>)
 80170a6:	b094      	sub	sp, #80	@ 0x50
 80170a8:	6800      	ldr	r0, [r0, #0]
 80170aa:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80170ac:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80170b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80170b2:	2800      	cmp	r0, #0
 80170b4:	d03b      	beq.n	801712e <on_request+0x8e>
 80170b6:	461d      	mov	r5, r3
 80170b8:	e001      	b.n	80170be <on_request+0x1e>
 80170ba:	6840      	ldr	r0, [r0, #4]
 80170bc:	b3b8      	cbz	r0, 801712e <on_request+0x8e>
 80170be:	6884      	ldr	r4, [r0, #8]
 80170c0:	8b21      	ldrh	r1, [r4, #24]
 80170c2:	4291      	cmp	r1, r2
 80170c4:	d1f9      	bne.n	80170ba <on_request+0x1a>
 80170c6:	2248      	movs	r2, #72	@ 0x48
 80170c8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80170cc:	4668      	mov	r0, sp
 80170ce:	f002 fcb2 	bl	8019a36 <memcpy>
 80170d2:	f104 0320 	add.w	r3, r4, #32
 80170d6:	cb0c      	ldmia	r3, {r2, r3}
 80170d8:	4620      	mov	r0, r4
 80170da:	f7f7 fdf9 	bl	800ecd0 <rmw_uxrce_get_static_input_buffer_for_entity>
 80170de:	4680      	mov	r8, r0
 80170e0:	b328      	cbz	r0, 801712e <on_request+0x8e>
 80170e2:	4638      	mov	r0, r7
 80170e4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80170e8:	4632      	mov	r2, r6
 80170ea:	f107 0110 	add.w	r1, r7, #16
 80170ee:	f7f8 fe2d 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 80170f2:	b930      	cbnz	r0, 8017102 <on_request+0x62>
 80170f4:	4810      	ldr	r0, [pc, #64]	@ (8017138 <on_request+0x98>)
 80170f6:	4641      	mov	r1, r8
 80170f8:	b014      	add	sp, #80	@ 0x50
 80170fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170fe:	f000 b877 	b.w	80171f0 <put_memory>
 8017102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017104:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8017108:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801710c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017110:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017114:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017118:	e88c 0003 	stmia.w	ip, {r0, r1}
 801711c:	f7f7 fbd6 	bl	800e8cc <rmw_uros_epoch_nanos>
 8017120:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017124:	2303      	movs	r3, #3
 8017126:	e942 0102 	strd	r0, r1, [r2, #-8]
 801712a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801712e:	b014      	add	sp, #80	@ 0x50
 8017130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017134:	2000b83c 	.word	0x2000b83c
 8017138:	2000b85c 	.word	0x2000b85c

0801713c <on_reply>:
 801713c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017140:	4821      	ldr	r0, [pc, #132]	@ (80171c8 <on_reply+0x8c>)
 8017142:	b094      	sub	sp, #80	@ 0x50
 8017144:	6800      	ldr	r0, [r0, #0]
 8017146:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017148:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801714c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801714e:	b3b8      	cbz	r0, 80171c0 <on_reply+0x84>
 8017150:	461d      	mov	r5, r3
 8017152:	e001      	b.n	8017158 <on_reply+0x1c>
 8017154:	6840      	ldr	r0, [r0, #4]
 8017156:	b398      	cbz	r0, 80171c0 <on_reply+0x84>
 8017158:	6884      	ldr	r4, [r0, #8]
 801715a:	8b21      	ldrh	r1, [r4, #24]
 801715c:	4291      	cmp	r1, r2
 801715e:	d1f9      	bne.n	8017154 <on_reply+0x18>
 8017160:	2248      	movs	r2, #72	@ 0x48
 8017162:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017166:	4668      	mov	r0, sp
 8017168:	f002 fc65 	bl	8019a36 <memcpy>
 801716c:	f104 0320 	add.w	r3, r4, #32
 8017170:	cb0c      	ldmia	r3, {r2, r3}
 8017172:	4620      	mov	r0, r4
 8017174:	f7f7 fdac 	bl	800ecd0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017178:	4680      	mov	r8, r0
 801717a:	b308      	cbz	r0, 80171c0 <on_reply+0x84>
 801717c:	4638      	mov	r0, r7
 801717e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017182:	4632      	mov	r2, r6
 8017184:	f107 0110 	add.w	r1, r7, #16
 8017188:	f7f8 fde0 	bl	800fd4c <ucdr_deserialize_array_uint8_t>
 801718c:	b930      	cbnz	r0, 801719c <on_reply+0x60>
 801718e:	480f      	ldr	r0, [pc, #60]	@ (80171cc <on_reply+0x90>)
 8017190:	4641      	mov	r1, r8
 8017192:	b014      	add	sp, #80	@ 0x50
 8017194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017198:	f000 b82a 	b.w	80171f0 <put_memory>
 801719c:	2200      	movs	r2, #0
 801719e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80171a2:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80171a6:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80171aa:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80171ae:	f7f7 fb8d 	bl	800e8cc <rmw_uros_epoch_nanos>
 80171b2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80171b6:	2304      	movs	r3, #4
 80171b8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80171bc:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80171c0:	b014      	add	sp, #80	@ 0x50
 80171c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171c6:	bf00      	nop
 80171c8:	20006e84 	.word	0x20006e84
 80171cc:	2000b85c 	.word	0x2000b85c

080171d0 <get_memory>:
 80171d0:	4603      	mov	r3, r0
 80171d2:	6840      	ldr	r0, [r0, #4]
 80171d4:	b158      	cbz	r0, 80171ee <get_memory+0x1e>
 80171d6:	6842      	ldr	r2, [r0, #4]
 80171d8:	605a      	str	r2, [r3, #4]
 80171da:	b10a      	cbz	r2, 80171e0 <get_memory+0x10>
 80171dc:	2100      	movs	r1, #0
 80171de:	6011      	str	r1, [r2, #0]
 80171e0:	681a      	ldr	r2, [r3, #0]
 80171e2:	6042      	str	r2, [r0, #4]
 80171e4:	b102      	cbz	r2, 80171e8 <get_memory+0x18>
 80171e6:	6010      	str	r0, [r2, #0]
 80171e8:	2200      	movs	r2, #0
 80171ea:	6002      	str	r2, [r0, #0]
 80171ec:	6018      	str	r0, [r3, #0]
 80171ee:	4770      	bx	lr

080171f0 <put_memory>:
 80171f0:	680b      	ldr	r3, [r1, #0]
 80171f2:	b10b      	cbz	r3, 80171f8 <put_memory+0x8>
 80171f4:	684a      	ldr	r2, [r1, #4]
 80171f6:	605a      	str	r2, [r3, #4]
 80171f8:	684a      	ldr	r2, [r1, #4]
 80171fa:	b102      	cbz	r2, 80171fe <put_memory+0xe>
 80171fc:	6013      	str	r3, [r2, #0]
 80171fe:	6803      	ldr	r3, [r0, #0]
 8017200:	428b      	cmp	r3, r1
 8017202:	6843      	ldr	r3, [r0, #4]
 8017204:	bf08      	it	eq
 8017206:	6002      	streq	r2, [r0, #0]
 8017208:	604b      	str	r3, [r1, #4]
 801720a:	b103      	cbz	r3, 801720e <put_memory+0x1e>
 801720c:	6019      	str	r1, [r3, #0]
 801720e:	2300      	movs	r3, #0
 8017210:	600b      	str	r3, [r1, #0]
 8017212:	6041      	str	r1, [r0, #4]
 8017214:	4770      	bx	lr
 8017216:	bf00      	nop

08017218 <rmw_destroy_client>:
 8017218:	b570      	push	{r4, r5, r6, lr}
 801721a:	b128      	cbz	r0, 8017228 <rmw_destroy_client+0x10>
 801721c:	4604      	mov	r4, r0
 801721e:	6800      	ldr	r0, [r0, #0]
 8017220:	460d      	mov	r5, r1
 8017222:	f7f7 ff65 	bl	800f0f0 <is_uxrce_rmw_identifier_valid>
 8017226:	b910      	cbnz	r0, 801722e <rmw_destroy_client+0x16>
 8017228:	2401      	movs	r4, #1
 801722a:	4620      	mov	r0, r4
 801722c:	bd70      	pop	{r4, r5, r6, pc}
 801722e:	6863      	ldr	r3, [r4, #4]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d0f9      	beq.n	8017228 <rmw_destroy_client+0x10>
 8017234:	2d00      	cmp	r5, #0
 8017236:	d0f7      	beq.n	8017228 <rmw_destroy_client+0x10>
 8017238:	6828      	ldr	r0, [r5, #0]
 801723a:	f7f7 ff59 	bl	800f0f0 <is_uxrce_rmw_identifier_valid>
 801723e:	2800      	cmp	r0, #0
 8017240:	d0f2      	beq.n	8017228 <rmw_destroy_client+0x10>
 8017242:	686e      	ldr	r6, [r5, #4]
 8017244:	2e00      	cmp	r6, #0
 8017246:	d0ef      	beq.n	8017228 <rmw_destroy_client+0x10>
 8017248:	6864      	ldr	r4, [r4, #4]
 801724a:	6932      	ldr	r2, [r6, #16]
 801724c:	6920      	ldr	r0, [r4, #16]
 801724e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017252:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017256:	6819      	ldr	r1, [r3, #0]
 8017258:	f7f9 f99e 	bl	8010598 <uxr_buffer_cancel_data>
 801725c:	4602      	mov	r2, r0
 801725e:	6920      	ldr	r0, [r4, #16]
 8017260:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017264:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017268:	f7f7 fe28 	bl	800eebc <run_xrce_session>
 801726c:	6920      	ldr	r0, [r4, #16]
 801726e:	6932      	ldr	r2, [r6, #16]
 8017270:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017274:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017278:	6819      	ldr	r1, [r3, #0]
 801727a:	f7f8 fecd 	bl	8010018 <uxr_buffer_delete_entity>
 801727e:	4602      	mov	r2, r0
 8017280:	6920      	ldr	r0, [r4, #16]
 8017282:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017286:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801728a:	f7f7 fe17 	bl	800eebc <run_xrce_session>
 801728e:	2800      	cmp	r0, #0
 8017290:	4628      	mov	r0, r5
 8017292:	bf14      	ite	ne
 8017294:	2400      	movne	r4, #0
 8017296:	2402      	moveq	r4, #2
 8017298:	f7f7 fcf8 	bl	800ec8c <rmw_uxrce_fini_client_memory>
 801729c:	e7c5      	b.n	801722a <rmw_destroy_client+0x12>
 801729e:	bf00      	nop

080172a0 <rmw_get_implementation_identifier>:
 80172a0:	4b01      	ldr	r3, [pc, #4]	@ (80172a8 <rmw_get_implementation_identifier+0x8>)
 80172a2:	6818      	ldr	r0, [r3, #0]
 80172a4:	4770      	bx	lr
 80172a6:	bf00      	nop
 80172a8:	0801c4b0 	.word	0x0801c4b0

080172ac <create_topic>:
 80172ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172b0:	4605      	mov	r5, r0
 80172b2:	b084      	sub	sp, #16
 80172b4:	4822      	ldr	r0, [pc, #136]	@ (8017340 <create_topic+0x94>)
 80172b6:	460f      	mov	r7, r1
 80172b8:	4616      	mov	r6, r2
 80172ba:	f7ff ff89 	bl	80171d0 <get_memory>
 80172be:	4604      	mov	r4, r0
 80172c0:	2800      	cmp	r0, #0
 80172c2:	d039      	beq.n	8017338 <create_topic+0x8c>
 80172c4:	692b      	ldr	r3, [r5, #16]
 80172c6:	6884      	ldr	r4, [r0, #8]
 80172c8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8017348 <create_topic+0x9c>
 80172cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80172d0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80172d4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80172d8:	1c42      	adds	r2, r0, #1
 80172da:	2102      	movs	r1, #2
 80172dc:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80172e0:	f7f9 f8f0 	bl	80104c4 <uxr_object_id>
 80172e4:	223c      	movs	r2, #60	@ 0x3c
 80172e6:	6120      	str	r0, [r4, #16]
 80172e8:	4641      	mov	r1, r8
 80172ea:	4638      	mov	r0, r7
 80172ec:	f7f7 fee6 	bl	800f0bc <generate_topic_name>
 80172f0:	b1f0      	cbz	r0, 8017330 <create_topic+0x84>
 80172f2:	4f14      	ldr	r7, [pc, #80]	@ (8017344 <create_topic+0x98>)
 80172f4:	4630      	mov	r0, r6
 80172f6:	2264      	movs	r2, #100	@ 0x64
 80172f8:	4639      	mov	r1, r7
 80172fa:	f7f7 feaf 	bl	800f05c <generate_type_name>
 80172fe:	b1b8      	cbz	r0, 8017330 <create_topic+0x84>
 8017300:	6928      	ldr	r0, [r5, #16]
 8017302:	2306      	movs	r3, #6
 8017304:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8017308:	f8cd 8000 	str.w	r8, [sp]
 801730c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8017310:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017314:	6811      	ldr	r1, [r2, #0]
 8017316:	696b      	ldr	r3, [r5, #20]
 8017318:	6922      	ldr	r2, [r4, #16]
 801731a:	f7f8 fefb 	bl	8010114 <uxr_buffer_create_topic_bin>
 801731e:	4602      	mov	r2, r0
 8017320:	6928      	ldr	r0, [r5, #16]
 8017322:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017326:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801732a:	f7f7 fdc7 	bl	800eebc <run_xrce_session>
 801732e:	b918      	cbnz	r0, 8017338 <create_topic+0x8c>
 8017330:	4620      	mov	r0, r4
 8017332:	f7f7 fcc1 	bl	800ecb8 <rmw_uxrce_fini_topic_memory>
 8017336:	2400      	movs	r4, #0
 8017338:	4620      	mov	r0, r4
 801733a:	b004      	add	sp, #16
 801733c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017340:	2000b87c 	.word	0x2000b87c
 8017344:	2000b968 	.word	0x2000b968
 8017348:	2000b92c 	.word	0x2000b92c

0801734c <destroy_topic>:
 801734c:	b538      	push	{r3, r4, r5, lr}
 801734e:	6985      	ldr	r5, [r0, #24]
 8017350:	b1d5      	cbz	r5, 8017388 <destroy_topic+0x3c>
 8017352:	4604      	mov	r4, r0
 8017354:	6928      	ldr	r0, [r5, #16]
 8017356:	6922      	ldr	r2, [r4, #16]
 8017358:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801735c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017360:	6819      	ldr	r1, [r3, #0]
 8017362:	f7f8 fe59 	bl	8010018 <uxr_buffer_delete_entity>
 8017366:	4602      	mov	r2, r0
 8017368:	6928      	ldr	r0, [r5, #16]
 801736a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801736e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017372:	f7f7 fda3 	bl	800eebc <run_xrce_session>
 8017376:	2800      	cmp	r0, #0
 8017378:	4620      	mov	r0, r4
 801737a:	bf14      	ite	ne
 801737c:	2400      	movne	r4, #0
 801737e:	2402      	moveq	r4, #2
 8017380:	f7f7 fc9a 	bl	800ecb8 <rmw_uxrce_fini_topic_memory>
 8017384:	4620      	mov	r0, r4
 8017386:	bd38      	pop	{r3, r4, r5, pc}
 8017388:	2401      	movs	r4, #1
 801738a:	4620      	mov	r0, r4
 801738c:	bd38      	pop	{r3, r4, r5, pc}
 801738e:	bf00      	nop

08017390 <rmw_send_request>:
 8017390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017394:	4604      	mov	r4, r0
 8017396:	6800      	ldr	r0, [r0, #0]
 8017398:	b08b      	sub	sp, #44	@ 0x2c
 801739a:	460e      	mov	r6, r1
 801739c:	4615      	mov	r5, r2
 801739e:	b128      	cbz	r0, 80173ac <rmw_send_request+0x1c>
 80173a0:	4b21      	ldr	r3, [pc, #132]	@ (8017428 <rmw_send_request+0x98>)
 80173a2:	6819      	ldr	r1, [r3, #0]
 80173a4:	f7e8 ff3c 	bl	8000220 <strcmp>
 80173a8:	2800      	cmp	r0, #0
 80173aa:	d139      	bne.n	8017420 <rmw_send_request+0x90>
 80173ac:	6864      	ldr	r4, [r4, #4]
 80173ae:	6963      	ldr	r3, [r4, #20]
 80173b0:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80173b4:	689b      	ldr	r3, [r3, #8]
 80173b6:	4798      	blx	r3
 80173b8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80173bc:	4630      	mov	r0, r6
 80173be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80173c2:	4798      	blx	r3
 80173c4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80173c8:	9000      	str	r0, [sp, #0]
 80173ca:	6922      	ldr	r2, [r4, #16]
 80173cc:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80173ce:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80173d2:	ab02      	add	r3, sp, #8
 80173d4:	f7fb f99a 	bl	801270c <uxr_prepare_output_stream>
 80173d8:	2700      	movs	r7, #0
 80173da:	6028      	str	r0, [r5, #0]
 80173dc:	606f      	str	r7, [r5, #4]
 80173de:	b198      	cbz	r0, 8017408 <rmw_send_request+0x78>
 80173e0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80173e4:	a902      	add	r1, sp, #8
 80173e6:	4630      	mov	r0, r6
 80173e8:	4798      	blx	r3
 80173ea:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80173ee:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80173f2:	2b01      	cmp	r3, #1
 80173f4:	d00c      	beq.n	8017410 <rmw_send_request+0x80>
 80173f6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80173f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80173fc:	f7f9 feb2 	bl	8011164 <uxr_run_session_until_confirm_delivery>
 8017400:	4638      	mov	r0, r7
 8017402:	b00b      	add	sp, #44	@ 0x2c
 8017404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017408:	2001      	movs	r0, #1
 801740a:	b00b      	add	sp, #44	@ 0x2c
 801740c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017410:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017414:	f7f9 fae6 	bl	80109e4 <uxr_flash_output_streams>
 8017418:	4638      	mov	r0, r7
 801741a:	b00b      	add	sp, #44	@ 0x2c
 801741c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017420:	200c      	movs	r0, #12
 8017422:	b00b      	add	sp, #44	@ 0x2c
 8017424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017428:	0801c4b0 	.word	0x0801c4b0

0801742c <rmw_take_request>:
 801742c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017430:	4605      	mov	r5, r0
 8017432:	6800      	ldr	r0, [r0, #0]
 8017434:	b089      	sub	sp, #36	@ 0x24
 8017436:	460c      	mov	r4, r1
 8017438:	4690      	mov	r8, r2
 801743a:	461e      	mov	r6, r3
 801743c:	b128      	cbz	r0, 801744a <rmw_take_request+0x1e>
 801743e:	4b28      	ldr	r3, [pc, #160]	@ (80174e0 <rmw_take_request+0xb4>)
 8017440:	6819      	ldr	r1, [r3, #0]
 8017442:	f7e8 feed 	bl	8000220 <strcmp>
 8017446:	2800      	cmp	r0, #0
 8017448:	d146      	bne.n	80174d8 <rmw_take_request+0xac>
 801744a:	b10e      	cbz	r6, 8017450 <rmw_take_request+0x24>
 801744c:	2300      	movs	r3, #0
 801744e:	7033      	strb	r3, [r6, #0]
 8017450:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017454:	f7f7 fcb4 	bl	800edc0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017458:	4648      	mov	r0, r9
 801745a:	f7f7 fc89 	bl	800ed70 <rmw_uxrce_find_static_input_buffer_by_owner>
 801745e:	4607      	mov	r7, r0
 8017460:	b3b0      	cbz	r0, 80174d0 <rmw_take_request+0xa4>
 8017462:	6885      	ldr	r5, [r0, #8]
 8017464:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8017468:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801746c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017470:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8017474:	7423      	strb	r3, [r4, #16]
 8017476:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801747a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801747e:	74e2      	strb	r2, [r4, #19]
 8017480:	f8a4 3011 	strh.w	r3, [r4, #17]
 8017484:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8017488:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801748c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8017490:	61e1      	str	r1, [r4, #28]
 8017492:	6162      	str	r2, [r4, #20]
 8017494:	61a3      	str	r3, [r4, #24]
 8017496:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801749a:	689b      	ldr	r3, [r3, #8]
 801749c:	4798      	blx	r3
 801749e:	6844      	ldr	r4, [r0, #4]
 80174a0:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80174a4:	f105 0110 	add.w	r1, r5, #16
 80174a8:	4668      	mov	r0, sp
 80174aa:	f7f5 f825 	bl	800c4f8 <ucdr_init_buffer>
 80174ae:	68e3      	ldr	r3, [r4, #12]
 80174b0:	4641      	mov	r1, r8
 80174b2:	4668      	mov	r0, sp
 80174b4:	4798      	blx	r3
 80174b6:	4639      	mov	r1, r7
 80174b8:	4604      	mov	r4, r0
 80174ba:	480a      	ldr	r0, [pc, #40]	@ (80174e4 <rmw_take_request+0xb8>)
 80174bc:	f7ff fe98 	bl	80171f0 <put_memory>
 80174c0:	b106      	cbz	r6, 80174c4 <rmw_take_request+0x98>
 80174c2:	7034      	strb	r4, [r6, #0]
 80174c4:	f084 0001 	eor.w	r0, r4, #1
 80174c8:	b2c0      	uxtb	r0, r0
 80174ca:	b009      	add	sp, #36	@ 0x24
 80174cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174d0:	2001      	movs	r0, #1
 80174d2:	b009      	add	sp, #36	@ 0x24
 80174d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174d8:	200c      	movs	r0, #12
 80174da:	b009      	add	sp, #36	@ 0x24
 80174dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174e0:	0801c4b0 	.word	0x0801c4b0
 80174e4:	2000b85c 	.word	0x2000b85c

080174e8 <rmw_send_response>:
 80174e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174ea:	4605      	mov	r5, r0
 80174ec:	6800      	ldr	r0, [r0, #0]
 80174ee:	b091      	sub	sp, #68	@ 0x44
 80174f0:	460c      	mov	r4, r1
 80174f2:	4616      	mov	r6, r2
 80174f4:	b128      	cbz	r0, 8017502 <rmw_send_response+0x1a>
 80174f6:	4b29      	ldr	r3, [pc, #164]	@ (801759c <rmw_send_response+0xb4>)
 80174f8:	6819      	ldr	r1, [r3, #0]
 80174fa:	f7e8 fe91 	bl	8000220 <strcmp>
 80174fe:	2800      	cmp	r0, #0
 8017500:	d141      	bne.n	8017586 <rmw_send_response+0x9e>
 8017502:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8017506:	9306      	str	r3, [sp, #24]
 8017508:	4623      	mov	r3, r4
 801750a:	9207      	str	r2, [sp, #28]
 801750c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017510:	686d      	ldr	r5, [r5, #4]
 8017512:	789b      	ldrb	r3, [r3, #2]
 8017514:	68a1      	ldr	r1, [r4, #8]
 8017516:	f88d 2017 	strb.w	r2, [sp, #23]
 801751a:	f88d 3016 	strb.w	r3, [sp, #22]
 801751e:	68e2      	ldr	r2, [r4, #12]
 8017520:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8017524:	6860      	ldr	r0, [r4, #4]
 8017526:	f8ad 3014 	strh.w	r3, [sp, #20]
 801752a:	ab02      	add	r3, sp, #8
 801752c:	c307      	stmia	r3!, {r0, r1, r2}
 801752e:	696b      	ldr	r3, [r5, #20]
 8017530:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8017532:	68db      	ldr	r3, [r3, #12]
 8017534:	4798      	blx	r3
 8017536:	6844      	ldr	r4, [r0, #4]
 8017538:	4630      	mov	r0, r6
 801753a:	6923      	ldr	r3, [r4, #16]
 801753c:	4798      	blx	r3
 801753e:	f100 0318 	add.w	r3, r0, #24
 8017542:	6938      	ldr	r0, [r7, #16]
 8017544:	9300      	str	r3, [sp, #0]
 8017546:	692a      	ldr	r2, [r5, #16]
 8017548:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801754a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801754e:	ab08      	add	r3, sp, #32
 8017550:	f7fb f8dc 	bl	801270c <uxr_prepare_output_stream>
 8017554:	b910      	cbnz	r0, 801755c <rmw_send_response+0x74>
 8017556:	2001      	movs	r0, #1
 8017558:	b011      	add	sp, #68	@ 0x44
 801755a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801755c:	a902      	add	r1, sp, #8
 801755e:	a808      	add	r0, sp, #32
 8017560:	f7fc f962 	bl	8013828 <uxr_serialize_SampleIdentity>
 8017564:	68a3      	ldr	r3, [r4, #8]
 8017566:	a908      	add	r1, sp, #32
 8017568:	4630      	mov	r0, r6
 801756a:	4798      	blx	r3
 801756c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8017570:	6938      	ldr	r0, [r7, #16]
 8017572:	2b01      	cmp	r3, #1
 8017574:	d00a      	beq.n	801758c <rmw_send_response+0xa4>
 8017576:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8017578:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801757c:	f7f9 fdf2 	bl	8011164 <uxr_run_session_until_confirm_delivery>
 8017580:	2000      	movs	r0, #0
 8017582:	b011      	add	sp, #68	@ 0x44
 8017584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017586:	200c      	movs	r0, #12
 8017588:	b011      	add	sp, #68	@ 0x44
 801758a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801758c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017590:	f7f9 fa28 	bl	80109e4 <uxr_flash_output_streams>
 8017594:	2000      	movs	r0, #0
 8017596:	b011      	add	sp, #68	@ 0x44
 8017598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801759a:	bf00      	nop
 801759c:	0801c4b0 	.word	0x0801c4b0

080175a0 <rmw_take_response>:
 80175a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175a4:	4604      	mov	r4, r0
 80175a6:	6800      	ldr	r0, [r0, #0]
 80175a8:	b088      	sub	sp, #32
 80175aa:	4688      	mov	r8, r1
 80175ac:	4617      	mov	r7, r2
 80175ae:	461d      	mov	r5, r3
 80175b0:	b120      	cbz	r0, 80175bc <rmw_take_response+0x1c>
 80175b2:	4b1e      	ldr	r3, [pc, #120]	@ (801762c <rmw_take_response+0x8c>)
 80175b4:	6819      	ldr	r1, [r3, #0]
 80175b6:	f7e8 fe33 	bl	8000220 <strcmp>
 80175ba:	bb78      	cbnz	r0, 801761c <rmw_take_response+0x7c>
 80175bc:	b10d      	cbz	r5, 80175c2 <rmw_take_response+0x22>
 80175be:	2300      	movs	r3, #0
 80175c0:	702b      	strb	r3, [r5, #0]
 80175c2:	6864      	ldr	r4, [r4, #4]
 80175c4:	f7f7 fbfc 	bl	800edc0 <rmw_uxrce_clean_expired_static_input_buffer>
 80175c8:	4620      	mov	r0, r4
 80175ca:	f7f7 fbd1 	bl	800ed70 <rmw_uxrce_find_static_input_buffer_by_owner>
 80175ce:	4606      	mov	r6, r0
 80175d0:	b340      	cbz	r0, 8017624 <rmw_take_response+0x84>
 80175d2:	6963      	ldr	r3, [r4, #20]
 80175d4:	6884      	ldr	r4, [r0, #8]
 80175d6:	68db      	ldr	r3, [r3, #12]
 80175d8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80175dc:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80175e0:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80175e4:	4798      	blx	r3
 80175e6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80175ea:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80175ee:	f104 0110 	add.w	r1, r4, #16
 80175f2:	4668      	mov	r0, sp
 80175f4:	f7f4 ff80 	bl	800c4f8 <ucdr_init_buffer>
 80175f8:	4639      	mov	r1, r7
 80175fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80175fe:	4668      	mov	r0, sp
 8017600:	4798      	blx	r3
 8017602:	4631      	mov	r1, r6
 8017604:	4604      	mov	r4, r0
 8017606:	480a      	ldr	r0, [pc, #40]	@ (8017630 <rmw_take_response+0x90>)
 8017608:	f7ff fdf2 	bl	80171f0 <put_memory>
 801760c:	b105      	cbz	r5, 8017610 <rmw_take_response+0x70>
 801760e:	702c      	strb	r4, [r5, #0]
 8017610:	f084 0001 	eor.w	r0, r4, #1
 8017614:	b2c0      	uxtb	r0, r0
 8017616:	b008      	add	sp, #32
 8017618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801761c:	200c      	movs	r0, #12
 801761e:	b008      	add	sp, #32
 8017620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017624:	2001      	movs	r0, #1
 8017626:	b008      	add	sp, #32
 8017628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801762c:	0801c4b0 	.word	0x0801c4b0
 8017630:	2000b85c 	.word	0x2000b85c

08017634 <rmw_take_with_info>:
 8017634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017636:	4604      	mov	r4, r0
 8017638:	6800      	ldr	r0, [r0, #0]
 801763a:	b089      	sub	sp, #36	@ 0x24
 801763c:	460f      	mov	r7, r1
 801763e:	4615      	mov	r5, r2
 8017640:	b128      	cbz	r0, 801764e <rmw_take_with_info+0x1a>
 8017642:	4b24      	ldr	r3, [pc, #144]	@ (80176d4 <rmw_take_with_info+0xa0>)
 8017644:	6819      	ldr	r1, [r3, #0]
 8017646:	f7e8 fdeb 	bl	8000220 <strcmp>
 801764a:	2800      	cmp	r0, #0
 801764c:	d13e      	bne.n	80176cc <rmw_take_with_info+0x98>
 801764e:	b305      	cbz	r5, 8017692 <rmw_take_with_info+0x5e>
 8017650:	6864      	ldr	r4, [r4, #4]
 8017652:	2300      	movs	r3, #0
 8017654:	702b      	strb	r3, [r5, #0]
 8017656:	f7f7 fbb3 	bl	800edc0 <rmw_uxrce_clean_expired_static_input_buffer>
 801765a:	4620      	mov	r0, r4
 801765c:	f7f7 fb88 	bl	800ed70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017660:	4606      	mov	r6, r0
 8017662:	b1f0      	cbz	r0, 80176a2 <rmw_take_with_info+0x6e>
 8017664:	6881      	ldr	r1, [r0, #8]
 8017666:	4668      	mov	r0, sp
 8017668:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801766c:	3110      	adds	r1, #16
 801766e:	f7f4 ff43 	bl	800c4f8 <ucdr_init_buffer>
 8017672:	69a3      	ldr	r3, [r4, #24]
 8017674:	4639      	mov	r1, r7
 8017676:	68db      	ldr	r3, [r3, #12]
 8017678:	4668      	mov	r0, sp
 801767a:	4798      	blx	r3
 801767c:	4631      	mov	r1, r6
 801767e:	4604      	mov	r4, r0
 8017680:	4815      	ldr	r0, [pc, #84]	@ (80176d8 <rmw_take_with_info+0xa4>)
 8017682:	f7ff fdb5 	bl	80171f0 <put_memory>
 8017686:	702c      	strb	r4, [r5, #0]
 8017688:	f084 0001 	eor.w	r0, r4, #1
 801768c:	b2c0      	uxtb	r0, r0
 801768e:	b009      	add	sp, #36	@ 0x24
 8017690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017692:	6864      	ldr	r4, [r4, #4]
 8017694:	f7f7 fb94 	bl	800edc0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017698:	4620      	mov	r0, r4
 801769a:	f7f7 fb69 	bl	800ed70 <rmw_uxrce_find_static_input_buffer_by_owner>
 801769e:	4605      	mov	r5, r0
 80176a0:	b910      	cbnz	r0, 80176a8 <rmw_take_with_info+0x74>
 80176a2:	2001      	movs	r0, #1
 80176a4:	b009      	add	sp, #36	@ 0x24
 80176a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176a8:	68a9      	ldr	r1, [r5, #8]
 80176aa:	4668      	mov	r0, sp
 80176ac:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80176b0:	3110      	adds	r1, #16
 80176b2:	f7f4 ff21 	bl	800c4f8 <ucdr_init_buffer>
 80176b6:	69a3      	ldr	r3, [r4, #24]
 80176b8:	4639      	mov	r1, r7
 80176ba:	68db      	ldr	r3, [r3, #12]
 80176bc:	4668      	mov	r0, sp
 80176be:	4798      	blx	r3
 80176c0:	4629      	mov	r1, r5
 80176c2:	4604      	mov	r4, r0
 80176c4:	4804      	ldr	r0, [pc, #16]	@ (80176d8 <rmw_take_with_info+0xa4>)
 80176c6:	f7ff fd93 	bl	80171f0 <put_memory>
 80176ca:	e7dd      	b.n	8017688 <rmw_take_with_info+0x54>
 80176cc:	200c      	movs	r0, #12
 80176ce:	b009      	add	sp, #36	@ 0x24
 80176d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176d2:	bf00      	nop
 80176d4:	0801c4b0 	.word	0x0801c4b0
 80176d8:	2000b85c 	.word	0x2000b85c

080176dc <rmw_wait>:
 80176dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80176e0:	b089      	sub	sp, #36	@ 0x24
 80176e2:	4605      	mov	r5, r0
 80176e4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80176e6:	460e      	mov	r6, r1
 80176e8:	4698      	mov	r8, r3
 80176ea:	4691      	mov	r9, r2
 80176ec:	2a00      	cmp	r2, #0
 80176ee:	f000 810a 	beq.w	8017906 <rmw_wait+0x22a>
 80176f2:	b16c      	cbz	r4, 8017710 <rmw_wait+0x34>
 80176f4:	4bae      	ldr	r3, [pc, #696]	@ (80179b0 <rmw_wait+0x2d4>)
 80176f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80176f8:	af04      	add	r7, sp, #16
 80176fa:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80176fe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017702:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017706:	f7ff faaf 	bl	8016c68 <rmw_time_equal>
 801770a:	2800      	cmp	r0, #0
 801770c:	f000 8127 	beq.w	801795e <rmw_wait+0x282>
 8017710:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017714:	f7f7 fb54 	bl	800edc0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017718:	4ba6      	ldr	r3, [pc, #664]	@ (80179b4 <rmw_wait+0x2d8>)
 801771a:	681c      	ldr	r4, [r3, #0]
 801771c:	b14c      	cbz	r4, 8017732 <rmw_wait+0x56>
 801771e:	4623      	mov	r3, r4
 8017720:	2100      	movs	r1, #0
 8017722:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8017726:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801772a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801772e:	2b00      	cmp	r3, #0
 8017730:	d1f7      	bne.n	8017722 <rmw_wait+0x46>
 8017732:	f1b9 0f00 	cmp.w	r9, #0
 8017736:	d011      	beq.n	801775c <rmw_wait+0x80>
 8017738:	f8d9 1000 	ldr.w	r1, [r9]
 801773c:	b171      	cbz	r1, 801775c <rmw_wait+0x80>
 801773e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8017742:	2300      	movs	r3, #0
 8017744:	2001      	movs	r0, #1
 8017746:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801774a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801774c:	6912      	ldr	r2, [r2, #16]
 801774e:	3301      	adds	r3, #1
 8017750:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017754:	4299      	cmp	r1, r3
 8017756:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801775a:	d1f4      	bne.n	8017746 <rmw_wait+0x6a>
 801775c:	f1b8 0f00 	cmp.w	r8, #0
 8017760:	d011      	beq.n	8017786 <rmw_wait+0xaa>
 8017762:	f8d8 1000 	ldr.w	r1, [r8]
 8017766:	b171      	cbz	r1, 8017786 <rmw_wait+0xaa>
 8017768:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801776c:	2300      	movs	r3, #0
 801776e:	2001      	movs	r0, #1
 8017770:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017774:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017776:	6912      	ldr	r2, [r2, #16]
 8017778:	3301      	adds	r3, #1
 801777a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801777e:	4299      	cmp	r1, r3
 8017780:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017784:	d1f4      	bne.n	8017770 <rmw_wait+0x94>
 8017786:	b185      	cbz	r5, 80177aa <rmw_wait+0xce>
 8017788:	6829      	ldr	r1, [r5, #0]
 801778a:	b171      	cbz	r1, 80177aa <rmw_wait+0xce>
 801778c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8017790:	2300      	movs	r3, #0
 8017792:	2001      	movs	r0, #1
 8017794:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017798:	6a12      	ldr	r2, [r2, #32]
 801779a:	6912      	ldr	r2, [r2, #16]
 801779c:	3301      	adds	r3, #1
 801779e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80177a2:	4299      	cmp	r1, r3
 80177a4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80177a8:	d1f4      	bne.n	8017794 <rmw_wait+0xb8>
 80177aa:	b34c      	cbz	r4, 8017800 <rmw_wait+0x124>
 80177ac:	4622      	mov	r2, r4
 80177ae:	2300      	movs	r3, #0
 80177b0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80177b4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80177b8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80177bc:	440b      	add	r3, r1
 80177be:	b2db      	uxtb	r3, r3
 80177c0:	2a00      	cmp	r2, #0
 80177c2:	d1f5      	bne.n	80177b0 <rmw_wait+0xd4>
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	f000 8084 	beq.w	80178d2 <rmw_wait+0x1f6>
 80177ca:	1c7a      	adds	r2, r7, #1
 80177cc:	d00d      	beq.n	80177ea <rmw_wait+0x10e>
 80177ce:	ee07 7a90 	vmov	s15, r7
 80177d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80177d6:	ee07 3a90 	vmov	s15, r3
 80177da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80177de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80177e2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80177e6:	ee17 7a90 	vmov	r7, s15
 80177ea:	68a0      	ldr	r0, [r4, #8]
 80177ec:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80177f0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	f040 8090 	bne.w	801791a <rmw_wait+0x23e>
 80177fa:	6864      	ldr	r4, [r4, #4]
 80177fc:	2c00      	cmp	r4, #0
 80177fe:	d1f4      	bne.n	80177ea <rmw_wait+0x10e>
 8017800:	f1b9 0f00 	cmp.w	r9, #0
 8017804:	f000 80bc 	beq.w	8017980 <rmw_wait+0x2a4>
 8017808:	f8d9 7000 	ldr.w	r7, [r9]
 801780c:	2f00      	cmp	r7, #0
 801780e:	f000 808e 	beq.w	801792e <rmw_wait+0x252>
 8017812:	2400      	movs	r4, #0
 8017814:	4627      	mov	r7, r4
 8017816:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801781a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801781e:	f7f7 faa7 	bl	800ed70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017822:	2800      	cmp	r0, #0
 8017824:	d05f      	beq.n	80178e6 <rmw_wait+0x20a>
 8017826:	f8d9 3000 	ldr.w	r3, [r9]
 801782a:	3401      	adds	r4, #1
 801782c:	42a3      	cmp	r3, r4
 801782e:	f04f 0701 	mov.w	r7, #1
 8017832:	d8f0      	bhi.n	8017816 <rmw_wait+0x13a>
 8017834:	f1b8 0f00 	cmp.w	r8, #0
 8017838:	d012      	beq.n	8017860 <rmw_wait+0x184>
 801783a:	f8d8 3000 	ldr.w	r3, [r8]
 801783e:	b17b      	cbz	r3, 8017860 <rmw_wait+0x184>
 8017840:	2400      	movs	r4, #0
 8017842:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017846:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801784a:	f7f7 fa91 	bl	800ed70 <rmw_uxrce_find_static_input_buffer_by_owner>
 801784e:	2800      	cmp	r0, #0
 8017850:	d051      	beq.n	80178f6 <rmw_wait+0x21a>
 8017852:	f8d8 3000 	ldr.w	r3, [r8]
 8017856:	3401      	adds	r4, #1
 8017858:	42a3      	cmp	r3, r4
 801785a:	f04f 0701 	mov.w	r7, #1
 801785e:	d8f0      	bhi.n	8017842 <rmw_wait+0x166>
 8017860:	b1dd      	cbz	r5, 801789a <rmw_wait+0x1be>
 8017862:	682b      	ldr	r3, [r5, #0]
 8017864:	b1cb      	cbz	r3, 801789a <rmw_wait+0x1be>
 8017866:	2400      	movs	r4, #0
 8017868:	686b      	ldr	r3, [r5, #4]
 801786a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801786e:	f7f7 fa7f 	bl	800ed70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017872:	b158      	cbz	r0, 801788c <rmw_wait+0x1b0>
 8017874:	682b      	ldr	r3, [r5, #0]
 8017876:	3401      	adds	r4, #1
 8017878:	42a3      	cmp	r3, r4
 801787a:	d969      	bls.n	8017950 <rmw_wait+0x274>
 801787c:	686b      	ldr	r3, [r5, #4]
 801787e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017882:	2701      	movs	r7, #1
 8017884:	f7f7 fa74 	bl	800ed70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017888:	2800      	cmp	r0, #0
 801788a:	d1f3      	bne.n	8017874 <rmw_wait+0x198>
 801788c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017890:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017894:	3401      	adds	r4, #1
 8017896:	42a3      	cmp	r3, r4
 8017898:	d8e6      	bhi.n	8017868 <rmw_wait+0x18c>
 801789a:	b1a6      	cbz	r6, 80178c6 <rmw_wait+0x1ea>
 801789c:	6834      	ldr	r4, [r6, #0]
 801789e:	b194      	cbz	r4, 80178c6 <rmw_wait+0x1ea>
 80178a0:	2300      	movs	r3, #0
 80178a2:	461d      	mov	r5, r3
 80178a4:	e004      	b.n	80178b0 <rmw_wait+0x1d4>
 80178a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80178aa:	3301      	adds	r3, #1
 80178ac:	42a3      	cmp	r3, r4
 80178ae:	d00a      	beq.n	80178c6 <rmw_wait+0x1ea>
 80178b0:	6870      	ldr	r0, [r6, #4]
 80178b2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80178b6:	7c0a      	ldrb	r2, [r1, #16]
 80178b8:	2a00      	cmp	r2, #0
 80178ba:	d0f4      	beq.n	80178a6 <rmw_wait+0x1ca>
 80178bc:	3301      	adds	r3, #1
 80178be:	42a3      	cmp	r3, r4
 80178c0:	740d      	strb	r5, [r1, #16]
 80178c2:	4617      	mov	r7, r2
 80178c4:	d1f4      	bne.n	80178b0 <rmw_wait+0x1d4>
 80178c6:	2f00      	cmp	r7, #0
 80178c8:	d03e      	beq.n	8017948 <rmw_wait+0x26c>
 80178ca:	2000      	movs	r0, #0
 80178cc:	b009      	add	sp, #36	@ 0x24
 80178ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178d2:	68a0      	ldr	r0, [r4, #8]
 80178d4:	2100      	movs	r1, #0
 80178d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80178da:	f7f9 fc09 	bl	80110f0 <uxr_run_session_timeout>
 80178de:	6864      	ldr	r4, [r4, #4]
 80178e0:	2c00      	cmp	r4, #0
 80178e2:	d1f6      	bne.n	80178d2 <rmw_wait+0x1f6>
 80178e4:	e78c      	b.n	8017800 <rmw_wait+0x124>
 80178e6:	e9d9 3200 	ldrd	r3, r2, [r9]
 80178ea:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80178ee:	3401      	adds	r4, #1
 80178f0:	42a3      	cmp	r3, r4
 80178f2:	d890      	bhi.n	8017816 <rmw_wait+0x13a>
 80178f4:	e79e      	b.n	8017834 <rmw_wait+0x158>
 80178f6:	e9d8 3200 	ldrd	r3, r2, [r8]
 80178fa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80178fe:	3401      	adds	r4, #1
 8017900:	429c      	cmp	r4, r3
 8017902:	d39e      	bcc.n	8017842 <rmw_wait+0x166>
 8017904:	e7ac      	b.n	8017860 <rmw_wait+0x184>
 8017906:	2b00      	cmp	r3, #0
 8017908:	f47f aef3 	bne.w	80176f2 <rmw_wait+0x16>
 801790c:	2800      	cmp	r0, #0
 801790e:	f47f aef0 	bne.w	80176f2 <rmw_wait+0x16>
 8017912:	2900      	cmp	r1, #0
 8017914:	f47f aeed 	bne.w	80176f2 <rmw_wait+0x16>
 8017918:	e7d7      	b.n	80178ca <rmw_wait+0x1ee>
 801791a:	4639      	mov	r1, r7
 801791c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017920:	f7f9 fc00 	bl	8011124 <uxr_run_session_until_data>
 8017924:	6864      	ldr	r4, [r4, #4]
 8017926:	2c00      	cmp	r4, #0
 8017928:	f47f af5f 	bne.w	80177ea <rmw_wait+0x10e>
 801792c:	e768      	b.n	8017800 <rmw_wait+0x124>
 801792e:	f1b8 0f00 	cmp.w	r8, #0
 8017932:	d032      	beq.n	801799a <rmw_wait+0x2be>
 8017934:	f8d8 3000 	ldr.w	r3, [r8]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d181      	bne.n	8017840 <rmw_wait+0x164>
 801793c:	461f      	mov	r7, r3
 801793e:	2d00      	cmp	r5, #0
 8017940:	d18f      	bne.n	8017862 <rmw_wait+0x186>
 8017942:	462f      	mov	r7, r5
 8017944:	2e00      	cmp	r6, #0
 8017946:	d1a9      	bne.n	801789c <rmw_wait+0x1c0>
 8017948:	2002      	movs	r0, #2
 801794a:	b009      	add	sp, #36	@ 0x24
 801794c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017950:	2e00      	cmp	r6, #0
 8017952:	d0ba      	beq.n	80178ca <rmw_wait+0x1ee>
 8017954:	6834      	ldr	r4, [r6, #0]
 8017956:	2701      	movs	r7, #1
 8017958:	2c00      	cmp	r4, #0
 801795a:	d1a1      	bne.n	80178a0 <rmw_wait+0x1c4>
 801795c:	e7b5      	b.n	80178ca <rmw_wait+0x1ee>
 801795e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017962:	f7ff f9d5 	bl	8016d10 <rmw_time_total_nsec>
 8017966:	2300      	movs	r3, #0
 8017968:	4a13      	ldr	r2, [pc, #76]	@ (80179b8 <rmw_wait+0x2dc>)
 801796a:	f7e9 f97d 	bl	8000c68 <__aeabi_uldivmod>
 801796e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8017972:	f171 0300 	sbcs.w	r3, r1, #0
 8017976:	4607      	mov	r7, r0
 8017978:	bfa8      	it	ge
 801797a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801797e:	e6c9      	b.n	8017714 <rmw_wait+0x38>
 8017980:	f1b8 0f00 	cmp.w	r8, #0
 8017984:	d009      	beq.n	801799a <rmw_wait+0x2be>
 8017986:	f8d8 3000 	ldr.w	r3, [r8]
 801798a:	464f      	mov	r7, r9
 801798c:	2b00      	cmp	r3, #0
 801798e:	f47f af57 	bne.w	8017840 <rmw_wait+0x164>
 8017992:	2d00      	cmp	r5, #0
 8017994:	f47f af65 	bne.w	8017862 <rmw_wait+0x186>
 8017998:	e7d3      	b.n	8017942 <rmw_wait+0x266>
 801799a:	b17d      	cbz	r5, 80179bc <rmw_wait+0x2e0>
 801799c:	682b      	ldr	r3, [r5, #0]
 801799e:	4647      	mov	r7, r8
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	f47f af60 	bne.w	8017866 <rmw_wait+0x18a>
 80179a6:	2e00      	cmp	r6, #0
 80179a8:	f47f af78 	bne.w	801789c <rmw_wait+0x1c0>
 80179ac:	e7cc      	b.n	8017948 <rmw_wait+0x26c>
 80179ae:	bf00      	nop
 80179b0:	0801aee8 	.word	0x0801aee8
 80179b4:	2000b84c 	.word	0x2000b84c
 80179b8:	000f4240 	.word	0x000f4240
 80179bc:	2e00      	cmp	r6, #0
 80179be:	d0c3      	beq.n	8017948 <rmw_wait+0x26c>
 80179c0:	6834      	ldr	r4, [r6, #0]
 80179c2:	462f      	mov	r7, r5
 80179c4:	2c00      	cmp	r4, #0
 80179c6:	f47f af6b 	bne.w	80178a0 <rmw_wait+0x1c4>
 80179ca:	e7bd      	b.n	8017948 <rmw_wait+0x26c>

080179cc <rmw_create_wait_set>:
 80179cc:	b508      	push	{r3, lr}
 80179ce:	4803      	ldr	r0, [pc, #12]	@ (80179dc <rmw_create_wait_set+0x10>)
 80179d0:	f7ff fbfe 	bl	80171d0 <get_memory>
 80179d4:	b108      	cbz	r0, 80179da <rmw_create_wait_set+0xe>
 80179d6:	6880      	ldr	r0, [r0, #8]
 80179d8:	3010      	adds	r0, #16
 80179da:	bd08      	pop	{r3, pc}
 80179dc:	2000b88c 	.word	0x2000b88c

080179e0 <rmw_destroy_wait_set>:
 80179e0:	b508      	push	{r3, lr}
 80179e2:	4b08      	ldr	r3, [pc, #32]	@ (8017a04 <rmw_destroy_wait_set+0x24>)
 80179e4:	6819      	ldr	r1, [r3, #0]
 80179e6:	b911      	cbnz	r1, 80179ee <rmw_destroy_wait_set+0xe>
 80179e8:	e00a      	b.n	8017a00 <rmw_destroy_wait_set+0x20>
 80179ea:	6849      	ldr	r1, [r1, #4]
 80179ec:	b141      	cbz	r1, 8017a00 <rmw_destroy_wait_set+0x20>
 80179ee:	688b      	ldr	r3, [r1, #8]
 80179f0:	3310      	adds	r3, #16
 80179f2:	4298      	cmp	r0, r3
 80179f4:	d1f9      	bne.n	80179ea <rmw_destroy_wait_set+0xa>
 80179f6:	4803      	ldr	r0, [pc, #12]	@ (8017a04 <rmw_destroy_wait_set+0x24>)
 80179f8:	f7ff fbfa 	bl	80171f0 <put_memory>
 80179fc:	2000      	movs	r0, #0
 80179fe:	bd08      	pop	{r3, pc}
 8017a00:	2001      	movs	r0, #1
 8017a02:	bd08      	pop	{r3, pc}
 8017a04:	2000b88c 	.word	0x2000b88c

08017a08 <sensor_msgs__msg__Imu__init>:
 8017a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a0c:	4605      	mov	r5, r0
 8017a0e:	b3c0      	cbz	r0, 8017a82 <sensor_msgs__msg__Imu__init+0x7a>
 8017a10:	f000 f864 	bl	8017adc <std_msgs__msg__Header__init>
 8017a14:	4604      	mov	r4, r0
 8017a16:	b310      	cbz	r0, 8017a5e <sensor_msgs__msg__Imu__init+0x56>
 8017a18:	f105 0618 	add.w	r6, r5, #24
 8017a1c:	4630      	mov	r0, r6
 8017a1e:	f000 f8b3 	bl	8017b88 <geometry_msgs__msg__Quaternion__init>
 8017a22:	4604      	mov	r4, r0
 8017a24:	2800      	cmp	r0, #0
 8017a26:	d040      	beq.n	8017aaa <sensor_msgs__msg__Imu__init+0xa2>
 8017a28:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 8017a2c:	4638      	mov	r0, r7
 8017a2e:	f7f7 ffd9 	bl	800f9e4 <geometry_msgs__msg__Vector3__init>
 8017a32:	4604      	mov	r4, r0
 8017a34:	b348      	cbz	r0, 8017a8a <sensor_msgs__msg__Imu__init+0x82>
 8017a36:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 8017a3a:	4640      	mov	r0, r8
 8017a3c:	f7f7 ffd2 	bl	800f9e4 <geometry_msgs__msg__Vector3__init>
 8017a40:	4604      	mov	r4, r0
 8017a42:	b9d8      	cbnz	r0, 8017a7c <sensor_msgs__msg__Imu__init+0x74>
 8017a44:	4628      	mov	r0, r5
 8017a46:	f000 f86d 	bl	8017b24 <std_msgs__msg__Header__fini>
 8017a4a:	4630      	mov	r0, r6
 8017a4c:	f000 f8b0 	bl	8017bb0 <geometry_msgs__msg__Quaternion__fini>
 8017a50:	4638      	mov	r0, r7
 8017a52:	f7f7 ffcb 	bl	800f9ec <geometry_msgs__msg__Vector3__fini>
 8017a56:	4640      	mov	r0, r8
 8017a58:	f7f7 ffc8 	bl	800f9ec <geometry_msgs__msg__Vector3__fini>
 8017a5c:	e00e      	b.n	8017a7c <sensor_msgs__msg__Imu__init+0x74>
 8017a5e:	4628      	mov	r0, r5
 8017a60:	f000 f860 	bl	8017b24 <std_msgs__msg__Header__fini>
 8017a64:	f105 0018 	add.w	r0, r5, #24
 8017a68:	f000 f8a2 	bl	8017bb0 <geometry_msgs__msg__Quaternion__fini>
 8017a6c:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8017a70:	f7f7 ffbc 	bl	800f9ec <geometry_msgs__msg__Vector3__fini>
 8017a74:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8017a78:	f7f7 ffb8 	bl	800f9ec <geometry_msgs__msg__Vector3__fini>
 8017a7c:	4620      	mov	r0, r4
 8017a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a82:	4604      	mov	r4, r0
 8017a84:	4620      	mov	r0, r4
 8017a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a8a:	4628      	mov	r0, r5
 8017a8c:	f000 f84a 	bl	8017b24 <std_msgs__msg__Header__fini>
 8017a90:	4630      	mov	r0, r6
 8017a92:	f000 f88d 	bl	8017bb0 <geometry_msgs__msg__Quaternion__fini>
 8017a96:	4638      	mov	r0, r7
 8017a98:	f7f7 ffa8 	bl	800f9ec <geometry_msgs__msg__Vector3__fini>
 8017a9c:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8017aa0:	f7f7 ffa4 	bl	800f9ec <geometry_msgs__msg__Vector3__fini>
 8017aa4:	4620      	mov	r0, r4
 8017aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017aaa:	4628      	mov	r0, r5
 8017aac:	f000 f83a 	bl	8017b24 <std_msgs__msg__Header__fini>
 8017ab0:	4630      	mov	r0, r6
 8017ab2:	e7d9      	b.n	8017a68 <sensor_msgs__msg__Imu__init+0x60>

08017ab4 <sensor_msgs__msg__Imu__fini>:
 8017ab4:	b188      	cbz	r0, 8017ada <sensor_msgs__msg__Imu__fini+0x26>
 8017ab6:	b510      	push	{r4, lr}
 8017ab8:	4604      	mov	r4, r0
 8017aba:	f000 f833 	bl	8017b24 <std_msgs__msg__Header__fini>
 8017abe:	f104 0018 	add.w	r0, r4, #24
 8017ac2:	f000 f875 	bl	8017bb0 <geometry_msgs__msg__Quaternion__fini>
 8017ac6:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8017aca:	f7f7 ff8f 	bl	800f9ec <geometry_msgs__msg__Vector3__fini>
 8017ace:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8017ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ad6:	f7f7 bf89 	b.w	800f9ec <geometry_msgs__msg__Vector3__fini>
 8017ada:	4770      	bx	lr

08017adc <std_msgs__msg__Header__init>:
 8017adc:	b570      	push	{r4, r5, r6, lr}
 8017ade:	4605      	mov	r5, r0
 8017ae0:	b1a8      	cbz	r0, 8017b0e <std_msgs__msg__Header__init+0x32>
 8017ae2:	f000 f849 	bl	8017b78 <builtin_interfaces__msg__Time__init>
 8017ae6:	4604      	mov	r4, r0
 8017ae8:	b140      	cbz	r0, 8017afc <std_msgs__msg__Header__init+0x20>
 8017aea:	f105 0608 	add.w	r6, r5, #8
 8017aee:	4630      	mov	r0, r6
 8017af0:	f001 f990 	bl	8018e14 <rosidl_runtime_c__String__init>
 8017af4:	4604      	mov	r4, r0
 8017af6:	b168      	cbz	r0, 8017b14 <std_msgs__msg__Header__init+0x38>
 8017af8:	4620      	mov	r0, r4
 8017afa:	bd70      	pop	{r4, r5, r6, pc}
 8017afc:	4628      	mov	r0, r5
 8017afe:	f000 f83f 	bl	8017b80 <builtin_interfaces__msg__Time__fini>
 8017b02:	f105 0008 	add.w	r0, r5, #8
 8017b06:	f001 f99b 	bl	8018e40 <rosidl_runtime_c__String__fini>
 8017b0a:	4620      	mov	r0, r4
 8017b0c:	bd70      	pop	{r4, r5, r6, pc}
 8017b0e:	4604      	mov	r4, r0
 8017b10:	4620      	mov	r0, r4
 8017b12:	bd70      	pop	{r4, r5, r6, pc}
 8017b14:	4628      	mov	r0, r5
 8017b16:	f000 f833 	bl	8017b80 <builtin_interfaces__msg__Time__fini>
 8017b1a:	4630      	mov	r0, r6
 8017b1c:	f001 f990 	bl	8018e40 <rosidl_runtime_c__String__fini>
 8017b20:	e7ea      	b.n	8017af8 <std_msgs__msg__Header__init+0x1c>
 8017b22:	bf00      	nop

08017b24 <std_msgs__msg__Header__fini>:
 8017b24:	b148      	cbz	r0, 8017b3a <std_msgs__msg__Header__fini+0x16>
 8017b26:	b510      	push	{r4, lr}
 8017b28:	4604      	mov	r4, r0
 8017b2a:	f000 f829 	bl	8017b80 <builtin_interfaces__msg__Time__fini>
 8017b2e:	f104 0008 	add.w	r0, r4, #8
 8017b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b36:	f001 b983 	b.w	8018e40 <rosidl_runtime_c__String__fini>
 8017b3a:	4770      	bx	lr

08017b3c <std_srvs__srv__SetBool_Request__init>:
 8017b3c:	3800      	subs	r0, #0
 8017b3e:	bf18      	it	ne
 8017b40:	2001      	movne	r0, #1
 8017b42:	4770      	bx	lr

08017b44 <std_srvs__srv__SetBool_Request__fini>:
 8017b44:	4770      	bx	lr
 8017b46:	bf00      	nop

08017b48 <std_srvs__srv__SetBool_Response__init>:
 8017b48:	b538      	push	{r3, r4, r5, lr}
 8017b4a:	b138      	cbz	r0, 8017b5c <std_srvs__srv__SetBool_Response__init+0x14>
 8017b4c:	1d05      	adds	r5, r0, #4
 8017b4e:	4628      	mov	r0, r5
 8017b50:	f001 f960 	bl	8018e14 <rosidl_runtime_c__String__init>
 8017b54:	4604      	mov	r4, r0
 8017b56:	b120      	cbz	r0, 8017b62 <std_srvs__srv__SetBool_Response__init+0x1a>
 8017b58:	4620      	mov	r0, r4
 8017b5a:	bd38      	pop	{r3, r4, r5, pc}
 8017b5c:	4604      	mov	r4, r0
 8017b5e:	4620      	mov	r0, r4
 8017b60:	bd38      	pop	{r3, r4, r5, pc}
 8017b62:	4628      	mov	r0, r5
 8017b64:	f001 f96c 	bl	8018e40 <rosidl_runtime_c__String__fini>
 8017b68:	4620      	mov	r0, r4
 8017b6a:	bd38      	pop	{r3, r4, r5, pc}

08017b6c <std_srvs__srv__SetBool_Response__fini>:
 8017b6c:	b110      	cbz	r0, 8017b74 <std_srvs__srv__SetBool_Response__fini+0x8>
 8017b6e:	3004      	adds	r0, #4
 8017b70:	f001 b966 	b.w	8018e40 <rosidl_runtime_c__String__fini>
 8017b74:	4770      	bx	lr
 8017b76:	bf00      	nop

08017b78 <builtin_interfaces__msg__Time__init>:
 8017b78:	3800      	subs	r0, #0
 8017b7a:	bf18      	it	ne
 8017b7c:	2001      	movne	r0, #1
 8017b7e:	4770      	bx	lr

08017b80 <builtin_interfaces__msg__Time__fini>:
 8017b80:	4770      	bx	lr
 8017b82:	bf00      	nop
 8017b84:	0000      	movs	r0, r0
	...

08017b88 <geometry_msgs__msg__Quaternion__init>:
 8017b88:	b160      	cbz	r0, 8017ba4 <geometry_msgs__msg__Quaternion__init+0x1c>
 8017b8a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8017ba8 <geometry_msgs__msg__Quaternion__init+0x20>
 8017b8e:	2200      	movs	r2, #0
 8017b90:	2300      	movs	r3, #0
 8017b92:	e9c0 2300 	strd	r2, r3, [r0]
 8017b96:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017b9a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017b9e:	ed80 7b06 	vstr	d7, [r0, #24]
 8017ba2:	2001      	movs	r0, #1
 8017ba4:	4770      	bx	lr
 8017ba6:	bf00      	nop
 8017ba8:	00000000 	.word	0x00000000
 8017bac:	3ff00000 	.word	0x3ff00000

08017bb0 <geometry_msgs__msg__Quaternion__fini>:
 8017bb0:	4770      	bx	lr
 8017bb2:	bf00      	nop

08017bb4 <ucdr_serialize_string>:
 8017bb4:	b510      	push	{r4, lr}
 8017bb6:	b082      	sub	sp, #8
 8017bb8:	4604      	mov	r4, r0
 8017bba:	4608      	mov	r0, r1
 8017bbc:	9101      	str	r1, [sp, #4]
 8017bbe:	f7e8 fb39 	bl	8000234 <strlen>
 8017bc2:	9901      	ldr	r1, [sp, #4]
 8017bc4:	1c42      	adds	r2, r0, #1
 8017bc6:	4620      	mov	r0, r4
 8017bc8:	b002      	add	sp, #8
 8017bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bce:	f7f8 b9cb 	b.w	800ff68 <ucdr_serialize_sequence_char>
 8017bd2:	bf00      	nop

08017bd4 <ucdr_deserialize_string>:
 8017bd4:	b500      	push	{lr}
 8017bd6:	b083      	sub	sp, #12
 8017bd8:	ab01      	add	r3, sp, #4
 8017bda:	f7f8 f9d7 	bl	800ff8c <ucdr_deserialize_sequence_char>
 8017bde:	b003      	add	sp, #12
 8017be0:	f85d fb04 	ldr.w	pc, [sp], #4

08017be4 <uxr_init_input_best_effort_stream>:
 8017be4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017be8:	8003      	strh	r3, [r0, #0]
 8017bea:	4770      	bx	lr

08017bec <uxr_reset_input_best_effort_stream>:
 8017bec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017bf0:	8003      	strh	r3, [r0, #0]
 8017bf2:	4770      	bx	lr

08017bf4 <uxr_receive_best_effort_message>:
 8017bf4:	b538      	push	{r3, r4, r5, lr}
 8017bf6:	4604      	mov	r4, r0
 8017bf8:	8800      	ldrh	r0, [r0, #0]
 8017bfa:	460d      	mov	r5, r1
 8017bfc:	f000 fd42 	bl	8018684 <uxr_seq_num_cmp>
 8017c00:	4603      	mov	r3, r0
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8017c08:	bfb8      	it	lt
 8017c0a:	8025      	strhlt	r5, [r4, #0]
 8017c0c:	bd38      	pop	{r3, r4, r5, pc}
 8017c0e:	bf00      	nop

08017c10 <on_full_input_buffer>:
 8017c10:	b570      	push	{r4, r5, r6, lr}
 8017c12:	4605      	mov	r5, r0
 8017c14:	460c      	mov	r4, r1
 8017c16:	682b      	ldr	r3, [r5, #0]
 8017c18:	6809      	ldr	r1, [r1, #0]
 8017c1a:	8920      	ldrh	r0, [r4, #8]
 8017c1c:	6862      	ldr	r2, [r4, #4]
 8017c1e:	fbb2 f2f0 	udiv	r2, r2, r0
 8017c22:	eba3 0c01 	sub.w	ip, r3, r1
 8017c26:	fbbc fcf2 	udiv	ip, ip, r2
 8017c2a:	f10c 0c01 	add.w	ip, ip, #1
 8017c2e:	fa1f f38c 	uxth.w	r3, ip
 8017c32:	fbb3 f6f0 	udiv	r6, r3, r0
 8017c36:	fb00 3316 	mls	r3, r0, r6, r3
 8017c3a:	b29b      	uxth	r3, r3
 8017c3c:	fb02 f303 	mul.w	r3, r2, r3
 8017c40:	1d18      	adds	r0, r3, #4
 8017c42:	4408      	add	r0, r1
 8017c44:	7d26      	ldrb	r6, [r4, #20]
 8017c46:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8017c4a:	b116      	cbz	r6, 8017c52 <on_full_input_buffer+0x42>
 8017c4c:	2600      	movs	r6, #0
 8017c4e:	f840 6c04 	str.w	r6, [r0, #-4]
 8017c52:	2a03      	cmp	r2, #3
 8017c54:	d801      	bhi.n	8017c5a <on_full_input_buffer+0x4a>
 8017c56:	2001      	movs	r0, #1
 8017c58:	bd70      	pop	{r4, r5, r6, pc}
 8017c5a:	3308      	adds	r3, #8
 8017c5c:	4419      	add	r1, r3
 8017c5e:	4628      	mov	r0, r5
 8017c60:	692b      	ldr	r3, [r5, #16]
 8017c62:	3a04      	subs	r2, #4
 8017c64:	f7f4 fc40 	bl	800c4e8 <ucdr_init_buffer_origin>
 8017c68:	4628      	mov	r0, r5
 8017c6a:	4903      	ldr	r1, [pc, #12]	@ (8017c78 <on_full_input_buffer+0x68>)
 8017c6c:	4622      	mov	r2, r4
 8017c6e:	f7f4 fc17 	bl	800c4a0 <ucdr_set_on_full_buffer_callback>
 8017c72:	2000      	movs	r0, #0
 8017c74:	bd70      	pop	{r4, r5, r6, pc}
 8017c76:	bf00      	nop
 8017c78:	08017c11 	.word	0x08017c11

08017c7c <uxr_init_input_reliable_stream>:
 8017c7c:	b500      	push	{lr}
 8017c7e:	e9c0 1200 	strd	r1, r2, [r0]
 8017c82:	f04f 0e00 	mov.w	lr, #0
 8017c86:	9a01      	ldr	r2, [sp, #4]
 8017c88:	8103      	strh	r3, [r0, #8]
 8017c8a:	6102      	str	r2, [r0, #16]
 8017c8c:	f880 e014 	strb.w	lr, [r0, #20]
 8017c90:	b1d3      	cbz	r3, 8017cc8 <uxr_init_input_reliable_stream+0x4c>
 8017c92:	f8c1 e000 	str.w	lr, [r1]
 8017c96:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017c9a:	f1bc 0f01 	cmp.w	ip, #1
 8017c9e:	d913      	bls.n	8017cc8 <uxr_init_input_reliable_stream+0x4c>
 8017ca0:	2301      	movs	r3, #1
 8017ca2:	fbb3 f1fc 	udiv	r1, r3, ip
 8017ca6:	fb0c 3111 	mls	r1, ip, r1, r3
 8017caa:	b289      	uxth	r1, r1
 8017cac:	6842      	ldr	r2, [r0, #4]
 8017cae:	fbb2 f2fc 	udiv	r2, r2, ip
 8017cb2:	fb01 f202 	mul.w	r2, r1, r2
 8017cb6:	6801      	ldr	r1, [r0, #0]
 8017cb8:	f841 e002 	str.w	lr, [r1, r2]
 8017cbc:	3301      	adds	r3, #1
 8017cbe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017cc2:	b29b      	uxth	r3, r3
 8017cc4:	459c      	cmp	ip, r3
 8017cc6:	d8ec      	bhi.n	8017ca2 <uxr_init_input_reliable_stream+0x26>
 8017cc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017ccc:	60c3      	str	r3, [r0, #12]
 8017cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8017cd2:	bf00      	nop

08017cd4 <uxr_reset_input_reliable_stream>:
 8017cd4:	8901      	ldrh	r1, [r0, #8]
 8017cd6:	b1e9      	cbz	r1, 8017d14 <uxr_reset_input_reliable_stream+0x40>
 8017cd8:	f04f 0c00 	mov.w	ip, #0
 8017cdc:	b500      	push	{lr}
 8017cde:	4663      	mov	r3, ip
 8017ce0:	46e6      	mov	lr, ip
 8017ce2:	fbb3 f2f1 	udiv	r2, r3, r1
 8017ce6:	fb01 3312 	mls	r3, r1, r2, r3
 8017cea:	b29b      	uxth	r3, r3
 8017cec:	6842      	ldr	r2, [r0, #4]
 8017cee:	fbb2 f2f1 	udiv	r2, r2, r1
 8017cf2:	fb02 f303 	mul.w	r3, r2, r3
 8017cf6:	6802      	ldr	r2, [r0, #0]
 8017cf8:	f842 e003 	str.w	lr, [r2, r3]
 8017cfc:	f10c 0c01 	add.w	ip, ip, #1
 8017d00:	8901      	ldrh	r1, [r0, #8]
 8017d02:	fa1f f38c 	uxth.w	r3, ip
 8017d06:	4299      	cmp	r1, r3
 8017d08:	d8eb      	bhi.n	8017ce2 <uxr_reset_input_reliable_stream+0xe>
 8017d0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017d0e:	60c3      	str	r3, [r0, #12]
 8017d10:	f85d fb04 	ldr.w	pc, [sp], #4
 8017d14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017d18:	60c3      	str	r3, [r0, #12]
 8017d1a:	4770      	bx	lr

08017d1c <uxr_receive_reliable_message>:
 8017d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d20:	4604      	mov	r4, r0
 8017d22:	460d      	mov	r5, r1
 8017d24:	8901      	ldrh	r1, [r0, #8]
 8017d26:	8980      	ldrh	r0, [r0, #12]
 8017d28:	4690      	mov	r8, r2
 8017d2a:	461f      	mov	r7, r3
 8017d2c:	f000 fca2 	bl	8018674 <uxr_seq_num_add>
 8017d30:	4629      	mov	r1, r5
 8017d32:	4606      	mov	r6, r0
 8017d34:	89a0      	ldrh	r0, [r4, #12]
 8017d36:	f000 fca5 	bl	8018684 <uxr_seq_num_cmp>
 8017d3a:	2800      	cmp	r0, #0
 8017d3c:	db0a      	blt.n	8017d54 <uxr_receive_reliable_message+0x38>
 8017d3e:	2600      	movs	r6, #0
 8017d40:	89e0      	ldrh	r0, [r4, #14]
 8017d42:	4629      	mov	r1, r5
 8017d44:	f000 fc9e 	bl	8018684 <uxr_seq_num_cmp>
 8017d48:	2800      	cmp	r0, #0
 8017d4a:	da00      	bge.n	8017d4e <uxr_receive_reliable_message+0x32>
 8017d4c:	81e5      	strh	r5, [r4, #14]
 8017d4e:	4630      	mov	r0, r6
 8017d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d54:	4630      	mov	r0, r6
 8017d56:	4629      	mov	r1, r5
 8017d58:	f000 fc94 	bl	8018684 <uxr_seq_num_cmp>
 8017d5c:	2800      	cmp	r0, #0
 8017d5e:	dbee      	blt.n	8017d3e <uxr_receive_reliable_message+0x22>
 8017d60:	6923      	ldr	r3, [r4, #16]
 8017d62:	4640      	mov	r0, r8
 8017d64:	4798      	blx	r3
 8017d66:	2101      	movs	r1, #1
 8017d68:	4681      	mov	r9, r0
 8017d6a:	89a0      	ldrh	r0, [r4, #12]
 8017d6c:	f000 fc82 	bl	8018674 <uxr_seq_num_add>
 8017d70:	f1b9 0f00 	cmp.w	r9, #0
 8017d74:	d101      	bne.n	8017d7a <uxr_receive_reliable_message+0x5e>
 8017d76:	4285      	cmp	r5, r0
 8017d78:	d047      	beq.n	8017e0a <uxr_receive_reliable_message+0xee>
 8017d7a:	8922      	ldrh	r2, [r4, #8]
 8017d7c:	fbb5 f0f2 	udiv	r0, r5, r2
 8017d80:	fb02 5010 	mls	r0, r2, r0, r5
 8017d84:	b280      	uxth	r0, r0
 8017d86:	6863      	ldr	r3, [r4, #4]
 8017d88:	fbb3 f3f2 	udiv	r3, r3, r2
 8017d8c:	fb00 f303 	mul.w	r3, r0, r3
 8017d90:	6820      	ldr	r0, [r4, #0]
 8017d92:	3304      	adds	r3, #4
 8017d94:	4418      	add	r0, r3
 8017d96:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d1cf      	bne.n	8017d3e <uxr_receive_reliable_message+0x22>
 8017d9e:	4641      	mov	r1, r8
 8017da0:	463a      	mov	r2, r7
 8017da2:	f001 fe48 	bl	8019a36 <memcpy>
 8017da6:	8921      	ldrh	r1, [r4, #8]
 8017da8:	fbb5 f2f1 	udiv	r2, r5, r1
 8017dac:	fb01 5212 	mls	r2, r1, r2, r5
 8017db0:	b292      	uxth	r2, r2
 8017db2:	6863      	ldr	r3, [r4, #4]
 8017db4:	fbb3 f3f1 	udiv	r3, r3, r1
 8017db8:	fb02 f303 	mul.w	r3, r2, r3
 8017dbc:	6822      	ldr	r2, [r4, #0]
 8017dbe:	50d7      	str	r7, [r2, r3]
 8017dc0:	9a08      	ldr	r2, [sp, #32]
 8017dc2:	2301      	movs	r3, #1
 8017dc4:	7013      	strb	r3, [r2, #0]
 8017dc6:	f1b9 0f00 	cmp.w	r9, #0
 8017dca:	d0b8      	beq.n	8017d3e <uxr_receive_reliable_message+0x22>
 8017dcc:	89a6      	ldrh	r6, [r4, #12]
 8017dce:	4630      	mov	r0, r6
 8017dd0:	2101      	movs	r1, #1
 8017dd2:	f000 fc4f 	bl	8018674 <uxr_seq_num_add>
 8017dd6:	8922      	ldrh	r2, [r4, #8]
 8017dd8:	6863      	ldr	r3, [r4, #4]
 8017dda:	fbb3 f3f2 	udiv	r3, r3, r2
 8017dde:	4606      	mov	r6, r0
 8017de0:	fbb0 f0f2 	udiv	r0, r0, r2
 8017de4:	fb02 6010 	mls	r0, r2, r0, r6
 8017de8:	b280      	uxth	r0, r0
 8017dea:	fb00 f303 	mul.w	r3, r0, r3
 8017dee:	6820      	ldr	r0, [r4, #0]
 8017df0:	3304      	adds	r3, #4
 8017df2:	4418      	add	r0, r3
 8017df4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d0a0      	beq.n	8017d3e <uxr_receive_reliable_message+0x22>
 8017dfc:	6923      	ldr	r3, [r4, #16]
 8017dfe:	4798      	blx	r3
 8017e00:	2802      	cmp	r0, #2
 8017e02:	d008      	beq.n	8017e16 <uxr_receive_reliable_message+0xfa>
 8017e04:	2801      	cmp	r0, #1
 8017e06:	d0e2      	beq.n	8017dce <uxr_receive_reliable_message+0xb2>
 8017e08:	e799      	b.n	8017d3e <uxr_receive_reliable_message+0x22>
 8017e0a:	9b08      	ldr	r3, [sp, #32]
 8017e0c:	81a5      	strh	r5, [r4, #12]
 8017e0e:	2601      	movs	r6, #1
 8017e10:	f883 9000 	strb.w	r9, [r3]
 8017e14:	e794      	b.n	8017d40 <uxr_receive_reliable_message+0x24>
 8017e16:	2601      	movs	r6, #1
 8017e18:	e792      	b.n	8017d40 <uxr_receive_reliable_message+0x24>
 8017e1a:	bf00      	nop

08017e1c <uxr_next_input_reliable_buffer_available>:
 8017e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e20:	4604      	mov	r4, r0
 8017e22:	460f      	mov	r7, r1
 8017e24:	8980      	ldrh	r0, [r0, #12]
 8017e26:	2101      	movs	r1, #1
 8017e28:	4690      	mov	r8, r2
 8017e2a:	f000 fc23 	bl	8018674 <uxr_seq_num_add>
 8017e2e:	8922      	ldrh	r2, [r4, #8]
 8017e30:	fbb0 f6f2 	udiv	r6, r0, r2
 8017e34:	fb02 0616 	mls	r6, r2, r6, r0
 8017e38:	b2b6      	uxth	r6, r6
 8017e3a:	6863      	ldr	r3, [r4, #4]
 8017e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017e40:	fb06 f303 	mul.w	r3, r6, r3
 8017e44:	6826      	ldr	r6, [r4, #0]
 8017e46:	3304      	adds	r3, #4
 8017e48:	441e      	add	r6, r3
 8017e4a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8017e4e:	f1b9 0f00 	cmp.w	r9, #0
 8017e52:	d023      	beq.n	8017e9c <uxr_next_input_reliable_buffer_available+0x80>
 8017e54:	6923      	ldr	r3, [r4, #16]
 8017e56:	4605      	mov	r5, r0
 8017e58:	4630      	mov	r0, r6
 8017e5a:	4798      	blx	r3
 8017e5c:	4682      	mov	sl, r0
 8017e5e:	b300      	cbz	r0, 8017ea2 <uxr_next_input_reliable_buffer_available+0x86>
 8017e60:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8017e64:	2101      	movs	r1, #1
 8017e66:	4650      	mov	r0, sl
 8017e68:	f000 fc04 	bl	8018674 <uxr_seq_num_add>
 8017e6c:	8921      	ldrh	r1, [r4, #8]
 8017e6e:	fbb0 f2f1 	udiv	r2, r0, r1
 8017e72:	4682      	mov	sl, r0
 8017e74:	fb01 0212 	mls	r2, r1, r2, r0
 8017e78:	e9d4 0300 	ldrd	r0, r3, [r4]
 8017e7c:	b292      	uxth	r2, r2
 8017e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017e82:	fb02 f303 	mul.w	r3, r2, r3
 8017e86:	3304      	adds	r3, #4
 8017e88:	4418      	add	r0, r3
 8017e8a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017e8e:	b12b      	cbz	r3, 8017e9c <uxr_next_input_reliable_buffer_available+0x80>
 8017e90:	6923      	ldr	r3, [r4, #16]
 8017e92:	4798      	blx	r3
 8017e94:	2802      	cmp	r0, #2
 8017e96:	d01b      	beq.n	8017ed0 <uxr_next_input_reliable_buffer_available+0xb4>
 8017e98:	2801      	cmp	r0, #1
 8017e9a:	d0e3      	beq.n	8017e64 <uxr_next_input_reliable_buffer_available+0x48>
 8017e9c:	2000      	movs	r0, #0
 8017e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ea2:	464a      	mov	r2, r9
 8017ea4:	4631      	mov	r1, r6
 8017ea6:	4638      	mov	r0, r7
 8017ea8:	f7f4 fb26 	bl	800c4f8 <ucdr_init_buffer>
 8017eac:	8921      	ldrh	r1, [r4, #8]
 8017eae:	fbb5 f2f1 	udiv	r2, r5, r1
 8017eb2:	fb01 5212 	mls	r2, r1, r2, r5
 8017eb6:	b292      	uxth	r2, r2
 8017eb8:	6863      	ldr	r3, [r4, #4]
 8017eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ebe:	fb02 f303 	mul.w	r3, r2, r3
 8017ec2:	6822      	ldr	r2, [r4, #0]
 8017ec4:	f842 a003 	str.w	sl, [r2, r3]
 8017ec8:	2001      	movs	r0, #1
 8017eca:	81a5      	strh	r5, [r4, #12]
 8017ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ed0:	8920      	ldrh	r0, [r4, #8]
 8017ed2:	fbb5 f3f0 	udiv	r3, r5, r0
 8017ed6:	fb00 5513 	mls	r5, r0, r3, r5
 8017eda:	b2ad      	uxth	r5, r5
 8017edc:	6863      	ldr	r3, [r4, #4]
 8017ede:	fbb3 f3f0 	udiv	r3, r3, r0
 8017ee2:	fb03 f505 	mul.w	r5, r3, r5
 8017ee6:	6823      	ldr	r3, [r4, #0]
 8017ee8:	2000      	movs	r0, #0
 8017eea:	5158      	str	r0, [r3, r5]
 8017eec:	eb06 0108 	add.w	r1, r6, r8
 8017ef0:	eba9 0208 	sub.w	r2, r9, r8
 8017ef4:	4638      	mov	r0, r7
 8017ef6:	f7f4 faff 	bl	800c4f8 <ucdr_init_buffer>
 8017efa:	4638      	mov	r0, r7
 8017efc:	4903      	ldr	r1, [pc, #12]	@ (8017f0c <uxr_next_input_reliable_buffer_available+0xf0>)
 8017efe:	4622      	mov	r2, r4
 8017f00:	f7f4 face 	bl	800c4a0 <ucdr_set_on_full_buffer_callback>
 8017f04:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8017f08:	2001      	movs	r0, #1
 8017f0a:	e7c8      	b.n	8017e9e <uxr_next_input_reliable_buffer_available+0x82>
 8017f0c:	08017c11 	.word	0x08017c11

08017f10 <uxr_process_heartbeat>:
 8017f10:	b538      	push	{r3, r4, r5, lr}
 8017f12:	4611      	mov	r1, r2
 8017f14:	4604      	mov	r4, r0
 8017f16:	89c0      	ldrh	r0, [r0, #14]
 8017f18:	4615      	mov	r5, r2
 8017f1a:	f000 fbb3 	bl	8018684 <uxr_seq_num_cmp>
 8017f1e:	2800      	cmp	r0, #0
 8017f20:	bfb8      	it	lt
 8017f22:	81e5      	strhlt	r5, [r4, #14]
 8017f24:	bd38      	pop	{r3, r4, r5, pc}
 8017f26:	bf00      	nop

08017f28 <uxr_compute_acknack>:
 8017f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f2c:	8903      	ldrh	r3, [r0, #8]
 8017f2e:	8985      	ldrh	r5, [r0, #12]
 8017f30:	4604      	mov	r4, r0
 8017f32:	460e      	mov	r6, r1
 8017f34:	b1d3      	cbz	r3, 8017f6c <uxr_compute_acknack+0x44>
 8017f36:	4628      	mov	r0, r5
 8017f38:	2701      	movs	r7, #1
 8017f3a:	e003      	b.n	8017f44 <uxr_compute_acknack+0x1c>
 8017f3c:	4567      	cmp	r7, ip
 8017f3e:	d215      	bcs.n	8017f6c <uxr_compute_acknack+0x44>
 8017f40:	89a0      	ldrh	r0, [r4, #12]
 8017f42:	3701      	adds	r7, #1
 8017f44:	b2b9      	uxth	r1, r7
 8017f46:	f000 fb95 	bl	8018674 <uxr_seq_num_add>
 8017f4a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017f4e:	fbb0 f3fc 	udiv	r3, r0, ip
 8017f52:	fb0c 0313 	mls	r3, ip, r3, r0
 8017f56:	b29a      	uxth	r2, r3
 8017f58:	e9d4 1300 	ldrd	r1, r3, [r4]
 8017f5c:	fbb3 f3fc 	udiv	r3, r3, ip
 8017f60:	fb02 f303 	mul.w	r3, r2, r3
 8017f64:	58cb      	ldr	r3, [r1, r3]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d1e8      	bne.n	8017f3c <uxr_compute_acknack+0x14>
 8017f6a:	4605      	mov	r5, r0
 8017f6c:	8035      	strh	r5, [r6, #0]
 8017f6e:	2101      	movs	r1, #1
 8017f70:	4628      	mov	r0, r5
 8017f72:	89e7      	ldrh	r7, [r4, #14]
 8017f74:	f000 fb82 	bl	801867c <uxr_seq_num_sub>
 8017f78:	4601      	mov	r1, r0
 8017f7a:	4638      	mov	r0, r7
 8017f7c:	f000 fb7e 	bl	801867c <uxr_seq_num_sub>
 8017f80:	4605      	mov	r5, r0
 8017f82:	b318      	cbz	r0, 8017fcc <uxr_compute_acknack+0xa4>
 8017f84:	f04f 0900 	mov.w	r9, #0
 8017f88:	464f      	mov	r7, r9
 8017f8a:	f04f 0801 	mov.w	r8, #1
 8017f8e:	fa1f f189 	uxth.w	r1, r9
 8017f92:	8830      	ldrh	r0, [r6, #0]
 8017f94:	f000 fb6e 	bl	8018674 <uxr_seq_num_add>
 8017f98:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017f9c:	fbb0 f3fc 	udiv	r3, r0, ip
 8017fa0:	e9d4 1200 	ldrd	r1, r2, [r4]
 8017fa4:	fb03 001c 	mls	r0, r3, ip, r0
 8017fa8:	b283      	uxth	r3, r0
 8017faa:	fbb2 f2fc 	udiv	r2, r2, ip
 8017fae:	fb02 f303 	mul.w	r3, r2, r3
 8017fb2:	fa08 f209 	lsl.w	r2, r8, r9
 8017fb6:	58cb      	ldr	r3, [r1, r3]
 8017fb8:	f109 0901 	add.w	r9, r9, #1
 8017fbc:	b90b      	cbnz	r3, 8017fc2 <uxr_compute_acknack+0x9a>
 8017fbe:	4317      	orrs	r7, r2
 8017fc0:	b2bf      	uxth	r7, r7
 8017fc2:	454d      	cmp	r5, r9
 8017fc4:	d1e3      	bne.n	8017f8e <uxr_compute_acknack+0x66>
 8017fc6:	4638      	mov	r0, r7
 8017fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017fcc:	4607      	mov	r7, r0
 8017fce:	4638      	mov	r0, r7
 8017fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017fd4 <uxr_init_output_best_effort_stream>:
 8017fd4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8017fd8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8017fdc:	6001      	str	r1, [r0, #0]
 8017fde:	7303      	strb	r3, [r0, #12]
 8017fe0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8017fe4:	4770      	bx	lr
 8017fe6:	bf00      	nop

08017fe8 <uxr_reset_output_best_effort_stream>:
 8017fe8:	7b02      	ldrb	r2, [r0, #12]
 8017fea:	6042      	str	r2, [r0, #4]
 8017fec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017ff0:	81c3      	strh	r3, [r0, #14]
 8017ff2:	4770      	bx	lr

08017ff4 <uxr_prepare_best_effort_buffer_to_write>:
 8017ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ff6:	4604      	mov	r4, r0
 8017ff8:	b083      	sub	sp, #12
 8017ffa:	6840      	ldr	r0, [r0, #4]
 8017ffc:	460d      	mov	r5, r1
 8017ffe:	4616      	mov	r6, r2
 8018000:	f7fa fac4 	bl	801258c <uxr_submessage_padding>
 8018004:	6863      	ldr	r3, [r4, #4]
 8018006:	4418      	add	r0, r3
 8018008:	68a3      	ldr	r3, [r4, #8]
 801800a:	1942      	adds	r2, r0, r5
 801800c:	4293      	cmp	r3, r2
 801800e:	bf2c      	ite	cs
 8018010:	2701      	movcs	r7, #1
 8018012:	2700      	movcc	r7, #0
 8018014:	d202      	bcs.n	801801c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018016:	4638      	mov	r0, r7
 8018018:	b003      	add	sp, #12
 801801a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801801c:	9000      	str	r0, [sp, #0]
 801801e:	6821      	ldr	r1, [r4, #0]
 8018020:	4630      	mov	r0, r6
 8018022:	2300      	movs	r3, #0
 8018024:	f7f4 fa56 	bl	800c4d4 <ucdr_init_buffer_origin_offset>
 8018028:	6861      	ldr	r1, [r4, #4]
 801802a:	4638      	mov	r0, r7
 801802c:	4429      	add	r1, r5
 801802e:	6061      	str	r1, [r4, #4]
 8018030:	b003      	add	sp, #12
 8018032:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018034 <uxr_prepare_best_effort_buffer_to_send>:
 8018034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018038:	4604      	mov	r4, r0
 801803a:	461d      	mov	r5, r3
 801803c:	6840      	ldr	r0, [r0, #4]
 801803e:	7b23      	ldrb	r3, [r4, #12]
 8018040:	4298      	cmp	r0, r3
 8018042:	bf8c      	ite	hi
 8018044:	2601      	movhi	r6, #1
 8018046:	2600      	movls	r6, #0
 8018048:	d802      	bhi.n	8018050 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801804a:	4630      	mov	r0, r6
 801804c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018050:	4688      	mov	r8, r1
 8018052:	89e0      	ldrh	r0, [r4, #14]
 8018054:	2101      	movs	r1, #1
 8018056:	4617      	mov	r7, r2
 8018058:	f000 fb0c 	bl	8018674 <uxr_seq_num_add>
 801805c:	6823      	ldr	r3, [r4, #0]
 801805e:	81e0      	strh	r0, [r4, #14]
 8018060:	8028      	strh	r0, [r5, #0]
 8018062:	f8c8 3000 	str.w	r3, [r8]
 8018066:	6863      	ldr	r3, [r4, #4]
 8018068:	603b      	str	r3, [r7, #0]
 801806a:	7b23      	ldrb	r3, [r4, #12]
 801806c:	6063      	str	r3, [r4, #4]
 801806e:	4630      	mov	r0, r6
 8018070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018074 <on_full_output_buffer>:
 8018074:	b538      	push	{r3, r4, r5, lr}
 8018076:	6802      	ldr	r2, [r0, #0]
 8018078:	460c      	mov	r4, r1
 801807a:	6809      	ldr	r1, [r1, #0]
 801807c:	8923      	ldrh	r3, [r4, #8]
 801807e:	eba2 0c01 	sub.w	ip, r2, r1
 8018082:	6862      	ldr	r2, [r4, #4]
 8018084:	fbb2 f2f3 	udiv	r2, r2, r3
 8018088:	fbbc fcf2 	udiv	ip, ip, r2
 801808c:	f10c 0c01 	add.w	ip, ip, #1
 8018090:	fa1f fc8c 	uxth.w	ip, ip
 8018094:	fbbc fef3 	udiv	lr, ip, r3
 8018098:	fb03 c31e 	mls	r3, r3, lr, ip
 801809c:	b29b      	uxth	r3, r3
 801809e:	fb02 f303 	mul.w	r3, r2, r3
 80180a2:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80180a6:	58ca      	ldr	r2, [r1, r3]
 80180a8:	4463      	add	r3, ip
 80180aa:	eba2 020c 	sub.w	r2, r2, ip
 80180ae:	3308      	adds	r3, #8
 80180b0:	4605      	mov	r5, r0
 80180b2:	4419      	add	r1, r3
 80180b4:	3a04      	subs	r2, #4
 80180b6:	6903      	ldr	r3, [r0, #16]
 80180b8:	f7f4 fa16 	bl	800c4e8 <ucdr_init_buffer_origin>
 80180bc:	4628      	mov	r0, r5
 80180be:	4903      	ldr	r1, [pc, #12]	@ (80180cc <on_full_output_buffer+0x58>)
 80180c0:	4622      	mov	r2, r4
 80180c2:	f7f4 f9ed 	bl	800c4a0 <ucdr_set_on_full_buffer_callback>
 80180c6:	2000      	movs	r0, #0
 80180c8:	bd38      	pop	{r3, r4, r5, pc}
 80180ca:	bf00      	nop
 80180cc:	08018075 	.word	0x08018075

080180d0 <uxr_init_output_reliable_stream>:
 80180d0:	b410      	push	{r4}
 80180d2:	f89d c004 	ldrb.w	ip, [sp, #4]
 80180d6:	8103      	strh	r3, [r0, #8]
 80180d8:	e9c0 1200 	strd	r1, r2, [r0]
 80180dc:	f880 c00c 	strb.w	ip, [r0, #12]
 80180e0:	b1d3      	cbz	r3, 8018118 <uxr_init_output_reliable_stream+0x48>
 80180e2:	f8c1 c000 	str.w	ip, [r1]
 80180e6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80180ea:	f1bc 0f01 	cmp.w	ip, #1
 80180ee:	d913      	bls.n	8018118 <uxr_init_output_reliable_stream+0x48>
 80180f0:	2301      	movs	r3, #1
 80180f2:	fbb3 f1fc 	udiv	r1, r3, ip
 80180f6:	fb0c 3111 	mls	r1, ip, r1, r3
 80180fa:	b289      	uxth	r1, r1
 80180fc:	6842      	ldr	r2, [r0, #4]
 80180fe:	6804      	ldr	r4, [r0, #0]
 8018100:	fbb2 f2fc 	udiv	r2, r2, ip
 8018104:	fb01 f202 	mul.w	r2, r1, r2
 8018108:	7b01      	ldrb	r1, [r0, #12]
 801810a:	50a1      	str	r1, [r4, r2]
 801810c:	3301      	adds	r3, #1
 801810e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018112:	b29b      	uxth	r3, r3
 8018114:	459c      	cmp	ip, r3
 8018116:	d8ec      	bhi.n	80180f2 <uxr_init_output_reliable_stream+0x22>
 8018118:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801811c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018120:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018124:	4905      	ldr	r1, [pc, #20]	@ (801813c <uxr_init_output_reliable_stream+0x6c>)
 8018126:	f85d 4b04 	ldr.w	r4, [sp], #4
 801812a:	f8c0 100e 	str.w	r1, [r0, #14]
 801812e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018132:	2300      	movs	r3, #0
 8018134:	8242      	strh	r2, [r0, #18]
 8018136:	8403      	strh	r3, [r0, #32]
 8018138:	4770      	bx	lr
 801813a:	bf00      	nop
 801813c:	ffff0000 	.word	0xffff0000

08018140 <uxr_reset_output_reliable_stream>:
 8018140:	8901      	ldrh	r1, [r0, #8]
 8018142:	b1b1      	cbz	r1, 8018172 <uxr_reset_output_reliable_stream+0x32>
 8018144:	f04f 0c00 	mov.w	ip, #0
 8018148:	4663      	mov	r3, ip
 801814a:	fbb3 f2f1 	udiv	r2, r3, r1
 801814e:	fb01 3312 	mls	r3, r1, r2, r3
 8018152:	b29b      	uxth	r3, r3
 8018154:	6842      	ldr	r2, [r0, #4]
 8018156:	fbb2 f2f1 	udiv	r2, r2, r1
 801815a:	6801      	ldr	r1, [r0, #0]
 801815c:	fb02 f303 	mul.w	r3, r2, r3
 8018160:	7b02      	ldrb	r2, [r0, #12]
 8018162:	50ca      	str	r2, [r1, r3]
 8018164:	f10c 0c01 	add.w	ip, ip, #1
 8018168:	8901      	ldrh	r1, [r0, #8]
 801816a:	fa1f f38c 	uxth.w	r3, ip
 801816e:	4299      	cmp	r1, r3
 8018170:	d8eb      	bhi.n	801814a <uxr_reset_output_reliable_stream+0xa>
 8018172:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018176:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801817a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801817e:	4904      	ldr	r1, [pc, #16]	@ (8018190 <uxr_reset_output_reliable_stream+0x50>)
 8018180:	f8c0 100e 	str.w	r1, [r0, #14]
 8018184:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018188:	2300      	movs	r3, #0
 801818a:	8242      	strh	r2, [r0, #18]
 801818c:	8403      	strh	r3, [r0, #32]
 801818e:	4770      	bx	lr
 8018190:	ffff0000 	.word	0xffff0000

08018194 <uxr_prepare_reliable_buffer_to_write>:
 8018194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018198:	4604      	mov	r4, r0
 801819a:	b091      	sub	sp, #68	@ 0x44
 801819c:	8900      	ldrh	r0, [r0, #8]
 801819e:	89e6      	ldrh	r6, [r4, #14]
 80181a0:	6823      	ldr	r3, [r4, #0]
 80181a2:	9204      	str	r2, [sp, #16]
 80181a4:	fbb6 f2f0 	udiv	r2, r6, r0
 80181a8:	fb00 6212 	mls	r2, r0, r2, r6
 80181ac:	b292      	uxth	r2, r2
 80181ae:	6865      	ldr	r5, [r4, #4]
 80181b0:	fbb5 f5f0 	udiv	r5, r5, r0
 80181b4:	fb05 3202 	mla	r2, r5, r2, r3
 80181b8:	3204      	adds	r2, #4
 80181ba:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80181be:	f894 900c 	ldrb.w	r9, [r4, #12]
 80181c2:	9203      	str	r2, [sp, #12]
 80181c4:	468b      	mov	fp, r1
 80181c6:	1f2f      	subs	r7, r5, #4
 80181c8:	2800      	cmp	r0, #0
 80181ca:	f000 814c 	beq.w	8018466 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80181ce:	f04f 0c00 	mov.w	ip, #0
 80181d2:	46e2      	mov	sl, ip
 80181d4:	4661      	mov	r1, ip
 80181d6:	fbb1 f2f0 	udiv	r2, r1, r0
 80181da:	fb00 1212 	mls	r2, r0, r2, r1
 80181de:	b292      	uxth	r2, r2
 80181e0:	fb05 f202 	mul.w	r2, r5, r2
 80181e4:	f10c 0c01 	add.w	ip, ip, #1
 80181e8:	589a      	ldr	r2, [r3, r2]
 80181ea:	454a      	cmp	r2, r9
 80181ec:	bf08      	it	eq
 80181ee:	f10a 0a01 	addeq.w	sl, sl, #1
 80181f2:	fa1f f18c 	uxth.w	r1, ip
 80181f6:	bf08      	it	eq
 80181f8:	fa1f fa8a 	uxtheq.w	sl, sl
 80181fc:	4281      	cmp	r1, r0
 80181fe:	d3ea      	bcc.n	80181d6 <uxr_prepare_reliable_buffer_to_write+0x42>
 8018200:	4640      	mov	r0, r8
 8018202:	2104      	movs	r1, #4
 8018204:	f8cd a014 	str.w	sl, [sp, #20]
 8018208:	f7f4 f97a 	bl	800c500 <ucdr_alignment>
 801820c:	4480      	add	r8, r0
 801820e:	eb08 020b 	add.w	r2, r8, fp
 8018212:	42ba      	cmp	r2, r7
 8018214:	f240 80cd 	bls.w	80183b2 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8018218:	7b22      	ldrb	r2, [r4, #12]
 801821a:	445a      	add	r2, fp
 801821c:	42ba      	cmp	r2, r7
 801821e:	f240 80b5 	bls.w	801838c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8018222:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8018226:	33fc      	adds	r3, #252	@ 0xfc
 8018228:	b2ba      	uxth	r2, r7
 801822a:	4413      	add	r3, r2
 801822c:	b29b      	uxth	r3, r3
 801822e:	fb0a f903 	mul.w	r9, sl, r3
 8018232:	45d9      	cmp	r9, fp
 8018234:	9305      	str	r3, [sp, #20]
 8018236:	9306      	str	r3, [sp, #24]
 8018238:	f0c0 80b7 	bcc.w	80183aa <uxr_prepare_reliable_buffer_to_write+0x216>
 801823c:	f108 0304 	add.w	r3, r8, #4
 8018240:	42bb      	cmp	r3, r7
 8018242:	f080 80db 	bcs.w	80183fc <uxr_prepare_reliable_buffer_to_write+0x268>
 8018246:	f1a2 0904 	sub.w	r9, r2, #4
 801824a:	eba9 0908 	sub.w	r9, r9, r8
 801824e:	9b05      	ldr	r3, [sp, #20]
 8018250:	fa1f f989 	uxth.w	r9, r9
 8018254:	ebab 0b09 	sub.w	fp, fp, r9
 8018258:	fbbb f2f3 	udiv	r2, fp, r3
 801825c:	fb03 b312 	mls	r3, r3, r2, fp
 8018260:	2b00      	cmp	r3, #0
 8018262:	f000 80c8 	beq.w	80183f6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8018266:	3201      	adds	r2, #1
 8018268:	b292      	uxth	r2, r2
 801826a:	9306      	str	r3, [sp, #24]
 801826c:	4552      	cmp	r2, sl
 801826e:	f200 809c 	bhi.w	80183aa <uxr_prepare_reliable_buffer_to_write+0x216>
 8018272:	f10d 0b20 	add.w	fp, sp, #32
 8018276:	2a00      	cmp	r2, #0
 8018278:	d042      	beq.n	8018300 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801827a:	f8cd 801c 	str.w	r8, [sp, #28]
 801827e:	f04f 0a00 	mov.w	sl, #0
 8018282:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018286:	9505      	str	r5, [sp, #20]
 8018288:	f10d 0b20 	add.w	fp, sp, #32
 801828c:	4615      	mov	r5, r2
 801828e:	e000      	b.n	8018292 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8018290:	46c1      	mov	r9, r8
 8018292:	8920      	ldrh	r0, [r4, #8]
 8018294:	fbb6 f2f0 	udiv	r2, r6, r0
 8018298:	fb00 6112 	mls	r1, r0, r2, r6
 801829c:	b28a      	uxth	r2, r1
 801829e:	6863      	ldr	r3, [r4, #4]
 80182a0:	fbb3 f1f0 	udiv	r1, r3, r0
 80182a4:	6823      	ldr	r3, [r4, #0]
 80182a6:	fb02 f101 	mul.w	r1, r2, r1
 80182aa:	3104      	adds	r1, #4
 80182ac:	4419      	add	r1, r3
 80182ae:	4658      	mov	r0, fp
 80182b0:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80182b4:	9200      	str	r2, [sp, #0]
 80182b6:	2300      	movs	r3, #0
 80182b8:	463a      	mov	r2, r7
 80182ba:	f7f4 f90b 	bl	800c4d4 <ucdr_init_buffer_origin_offset>
 80182be:	464a      	mov	r2, r9
 80182c0:	2300      	movs	r3, #0
 80182c2:	210d      	movs	r1, #13
 80182c4:	4658      	mov	r0, fp
 80182c6:	f7fa f921 	bl	801250c <uxr_buffer_submessage_header>
 80182ca:	8921      	ldrh	r1, [r4, #8]
 80182cc:	fbb6 f2f1 	udiv	r2, r6, r1
 80182d0:	fb01 6212 	mls	r2, r1, r2, r6
 80182d4:	b292      	uxth	r2, r2
 80182d6:	6863      	ldr	r3, [r4, #4]
 80182d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80182dc:	fb02 f303 	mul.w	r3, r2, r3
 80182e0:	6822      	ldr	r2, [r4, #0]
 80182e2:	4630      	mov	r0, r6
 80182e4:	50d7      	str	r7, [r2, r3]
 80182e6:	2101      	movs	r1, #1
 80182e8:	f000 f9c4 	bl	8018674 <uxr_seq_num_add>
 80182ec:	f10a 0a01 	add.w	sl, sl, #1
 80182f0:	fa1f f38a 	uxth.w	r3, sl
 80182f4:	429d      	cmp	r5, r3
 80182f6:	4606      	mov	r6, r0
 80182f8:	d8ca      	bhi.n	8018290 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80182fa:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80182fe:	9d05      	ldr	r5, [sp, #20]
 8018300:	8920      	ldrh	r0, [r4, #8]
 8018302:	fbb6 f3f0 	udiv	r3, r6, r0
 8018306:	fb00 6313 	mls	r3, r0, r3, r6
 801830a:	b299      	uxth	r1, r3
 801830c:	6863      	ldr	r3, [r4, #4]
 801830e:	fbb3 f3f0 	udiv	r3, r3, r0
 8018312:	fb01 f303 	mul.w	r3, r1, r3
 8018316:	6821      	ldr	r1, [r4, #0]
 8018318:	3304      	adds	r3, #4
 801831a:	4419      	add	r1, r3
 801831c:	463a      	mov	r2, r7
 801831e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8018322:	9000      	str	r0, [sp, #0]
 8018324:	2300      	movs	r3, #0
 8018326:	4658      	mov	r0, fp
 8018328:	f7f4 f8d4 	bl	800c4d4 <ucdr_init_buffer_origin_offset>
 801832c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8018330:	4658      	mov	r0, fp
 8018332:	fa1f f289 	uxth.w	r2, r9
 8018336:	2302      	movs	r3, #2
 8018338:	210d      	movs	r1, #13
 801833a:	f7fa f8e7 	bl	801250c <uxr_buffer_submessage_header>
 801833e:	9b03      	ldr	r3, [sp, #12]
 8018340:	8927      	ldrh	r7, [r4, #8]
 8018342:	7b20      	ldrb	r0, [r4, #12]
 8018344:	f108 0104 	add.w	r1, r8, #4
 8018348:	440b      	add	r3, r1
 801834a:	4619      	mov	r1, r3
 801834c:	fbb6 f3f7 	udiv	r3, r6, r7
 8018350:	fb07 6313 	mls	r3, r7, r3, r6
 8018354:	f1a5 0208 	sub.w	r2, r5, #8
 8018358:	b29d      	uxth	r5, r3
 801835a:	3004      	adds	r0, #4
 801835c:	6863      	ldr	r3, [r4, #4]
 801835e:	fbb3 f3f7 	udiv	r3, r3, r7
 8018362:	fb05 f303 	mul.w	r3, r5, r3
 8018366:	6825      	ldr	r5, [r4, #0]
 8018368:	4448      	add	r0, r9
 801836a:	50e8      	str	r0, [r5, r3]
 801836c:	9d04      	ldr	r5, [sp, #16]
 801836e:	eba2 0208 	sub.w	r2, r2, r8
 8018372:	4628      	mov	r0, r5
 8018374:	f7f4 f8c0 	bl	800c4f8 <ucdr_init_buffer>
 8018378:	4628      	mov	r0, r5
 801837a:	493c      	ldr	r1, [pc, #240]	@ (801846c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801837c:	4622      	mov	r2, r4
 801837e:	f7f4 f88f 	bl	800c4a0 <ucdr_set_on_full_buffer_callback>
 8018382:	2001      	movs	r0, #1
 8018384:	81e6      	strh	r6, [r4, #14]
 8018386:	b011      	add	sp, #68	@ 0x44
 8018388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801838c:	2101      	movs	r1, #1
 801838e:	89e0      	ldrh	r0, [r4, #14]
 8018390:	f000 f970 	bl	8018674 <uxr_seq_num_add>
 8018394:	8921      	ldrh	r1, [r4, #8]
 8018396:	4605      	mov	r5, r0
 8018398:	8a60      	ldrh	r0, [r4, #18]
 801839a:	f000 f96b 	bl	8018674 <uxr_seq_num_add>
 801839e:	4601      	mov	r1, r0
 80183a0:	4628      	mov	r0, r5
 80183a2:	f000 f96f 	bl	8018684 <uxr_seq_num_cmp>
 80183a6:	2800      	cmp	r0, #0
 80183a8:	dd42      	ble.n	8018430 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80183aa:	2000      	movs	r0, #0
 80183ac:	b011      	add	sp, #68	@ 0x44
 80183ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183b2:	8921      	ldrh	r1, [r4, #8]
 80183b4:	8a60      	ldrh	r0, [r4, #18]
 80183b6:	9205      	str	r2, [sp, #20]
 80183b8:	f000 f95c 	bl	8018674 <uxr_seq_num_add>
 80183bc:	4601      	mov	r1, r0
 80183be:	4630      	mov	r0, r6
 80183c0:	f000 f960 	bl	8018684 <uxr_seq_num_cmp>
 80183c4:	2800      	cmp	r0, #0
 80183c6:	9a05      	ldr	r2, [sp, #20]
 80183c8:	dcef      	bgt.n	80183aa <uxr_prepare_reliable_buffer_to_write+0x216>
 80183ca:	8927      	ldrh	r7, [r4, #8]
 80183cc:	fbb6 f3f7 	udiv	r3, r6, r7
 80183d0:	fb07 6313 	mls	r3, r7, r3, r6
 80183d4:	b29d      	uxth	r5, r3
 80183d6:	6863      	ldr	r3, [r4, #4]
 80183d8:	6824      	ldr	r4, [r4, #0]
 80183da:	fbb3 f3f7 	udiv	r3, r3, r7
 80183de:	fb05 f303 	mul.w	r3, r5, r3
 80183e2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80183e6:	50e2      	str	r2, [r4, r3]
 80183e8:	2300      	movs	r3, #0
 80183ea:	f8cd 8000 	str.w	r8, [sp]
 80183ee:	f7f4 f871 	bl	800c4d4 <ucdr_init_buffer_origin_offset>
 80183f2:	2001      	movs	r0, #1
 80183f4:	e7da      	b.n	80183ac <uxr_prepare_reliable_buffer_to_write+0x218>
 80183f6:	b293      	uxth	r3, r2
 80183f8:	461a      	mov	r2, r3
 80183fa:	e737      	b.n	801826c <uxr_prepare_reliable_buffer_to_write+0xd8>
 80183fc:	4630      	mov	r0, r6
 80183fe:	2101      	movs	r1, #1
 8018400:	9207      	str	r2, [sp, #28]
 8018402:	f000 f937 	bl	8018674 <uxr_seq_num_add>
 8018406:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801840a:	fbb0 f1fc 	udiv	r1, r0, ip
 801840e:	fb0c 0111 	mls	r1, ip, r1, r0
 8018412:	4606      	mov	r6, r0
 8018414:	b288      	uxth	r0, r1
 8018416:	6863      	ldr	r3, [r4, #4]
 8018418:	fbb3 f1fc 	udiv	r1, r3, ip
 801841c:	6823      	ldr	r3, [r4, #0]
 801841e:	9a07      	ldr	r2, [sp, #28]
 8018420:	fb00 f101 	mul.w	r1, r0, r1
 8018424:	3104      	adds	r1, #4
 8018426:	440b      	add	r3, r1
 8018428:	9303      	str	r3, [sp, #12]
 801842a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801842e:	e70a      	b.n	8018246 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8018430:	8921      	ldrh	r1, [r4, #8]
 8018432:	fbb5 f3f1 	udiv	r3, r5, r1
 8018436:	fb01 5313 	mls	r3, r1, r3, r5
 801843a:	b29a      	uxth	r2, r3
 801843c:	6863      	ldr	r3, [r4, #4]
 801843e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018442:	6821      	ldr	r1, [r4, #0]
 8018444:	9804      	ldr	r0, [sp, #16]
 8018446:	fb02 f303 	mul.w	r3, r2, r3
 801844a:	3304      	adds	r3, #4
 801844c:	7b22      	ldrb	r2, [r4, #12]
 801844e:	4419      	add	r1, r3
 8018450:	445a      	add	r2, fp
 8018452:	f841 2c04 	str.w	r2, [r1, #-4]
 8018456:	7b23      	ldrb	r3, [r4, #12]
 8018458:	9300      	str	r3, [sp, #0]
 801845a:	2300      	movs	r3, #0
 801845c:	f7f4 f83a 	bl	800c4d4 <ucdr_init_buffer_origin_offset>
 8018460:	81e5      	strh	r5, [r4, #14]
 8018462:	2001      	movs	r0, #1
 8018464:	e7a2      	b.n	80183ac <uxr_prepare_reliable_buffer_to_write+0x218>
 8018466:	4682      	mov	sl, r0
 8018468:	e6ca      	b.n	8018200 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801846a:	bf00      	nop
 801846c:	08018075 	.word	0x08018075

08018470 <uxr_prepare_next_reliable_buffer_to_send>:
 8018470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018472:	4604      	mov	r4, r0
 8018474:	460f      	mov	r7, r1
 8018476:	8a00      	ldrh	r0, [r0, #16]
 8018478:	2101      	movs	r1, #1
 801847a:	4616      	mov	r6, r2
 801847c:	461d      	mov	r5, r3
 801847e:	f000 f8f9 	bl	8018674 <uxr_seq_num_add>
 8018482:	8028      	strh	r0, [r5, #0]
 8018484:	8922      	ldrh	r2, [r4, #8]
 8018486:	fbb0 f3f2 	udiv	r3, r0, r2
 801848a:	fb02 0c13 	mls	ip, r2, r3, r0
 801848e:	fa1f fc8c 	uxth.w	ip, ip
 8018492:	6863      	ldr	r3, [r4, #4]
 8018494:	fbb3 f3f2 	udiv	r3, r3, r2
 8018498:	fb0c fc03 	mul.w	ip, ip, r3
 801849c:	6823      	ldr	r3, [r4, #0]
 801849e:	89e1      	ldrh	r1, [r4, #14]
 80184a0:	f10c 0c04 	add.w	ip, ip, #4
 80184a4:	4463      	add	r3, ip
 80184a6:	603b      	str	r3, [r7, #0]
 80184a8:	6823      	ldr	r3, [r4, #0]
 80184aa:	449c      	add	ip, r3
 80184ac:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80184b0:	6033      	str	r3, [r6, #0]
 80184b2:	f000 f8e7 	bl	8018684 <uxr_seq_num_cmp>
 80184b6:	2800      	cmp	r0, #0
 80184b8:	dd01      	ble.n	80184be <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80184ba:	2000      	movs	r0, #0
 80184bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80184be:	7b23      	ldrb	r3, [r4, #12]
 80184c0:	6832      	ldr	r2, [r6, #0]
 80184c2:	429a      	cmp	r2, r3
 80184c4:	d9f9      	bls.n	80184ba <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80184c6:	8a61      	ldrh	r1, [r4, #18]
 80184c8:	8a20      	ldrh	r0, [r4, #16]
 80184ca:	f000 f8d7 	bl	801867c <uxr_seq_num_sub>
 80184ce:	8923      	ldrh	r3, [r4, #8]
 80184d0:	4283      	cmp	r3, r0
 80184d2:	d0f2      	beq.n	80184ba <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80184d4:	8828      	ldrh	r0, [r5, #0]
 80184d6:	89e3      	ldrh	r3, [r4, #14]
 80184d8:	8220      	strh	r0, [r4, #16]
 80184da:	4298      	cmp	r0, r3
 80184dc:	d001      	beq.n	80184e2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80184de:	2001      	movs	r0, #1
 80184e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80184e2:	2101      	movs	r1, #1
 80184e4:	f000 f8c6 	bl	8018674 <uxr_seq_num_add>
 80184e8:	81e0      	strh	r0, [r4, #14]
 80184ea:	2001      	movs	r0, #1
 80184ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80184ee:	bf00      	nop

080184f0 <uxr_update_output_stream_heartbeat_timestamp>:
 80184f0:	b570      	push	{r4, r5, r6, lr}
 80184f2:	8a01      	ldrh	r1, [r0, #16]
 80184f4:	4604      	mov	r4, r0
 80184f6:	8a40      	ldrh	r0, [r0, #18]
 80184f8:	4615      	mov	r5, r2
 80184fa:	461e      	mov	r6, r3
 80184fc:	f000 f8c2 	bl	8018684 <uxr_seq_num_cmp>
 8018500:	2800      	cmp	r0, #0
 8018502:	db07      	blt.n	8018514 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018504:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018508:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801850c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018510:	2000      	movs	r0, #0
 8018512:	bd70      	pop	{r4, r5, r6, pc}
 8018514:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018518:	b940      	cbnz	r0, 801852c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801851a:	2301      	movs	r3, #1
 801851c:	f884 3020 	strb.w	r3, [r4, #32]
 8018520:	3564      	adds	r5, #100	@ 0x64
 8018522:	f146 0600 	adc.w	r6, r6, #0
 8018526:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801852a:	bd70      	pop	{r4, r5, r6, pc}
 801852c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018530:	4295      	cmp	r5, r2
 8018532:	eb76 0303 	sbcs.w	r3, r6, r3
 8018536:	bfa5      	ittet	ge
 8018538:	3001      	addge	r0, #1
 801853a:	f884 0020 	strbge.w	r0, [r4, #32]
 801853e:	2000      	movlt	r0, #0
 8018540:	2001      	movge	r0, #1
 8018542:	e7ed      	b.n	8018520 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08018544 <uxr_begin_output_nack_buffer_it>:
 8018544:	8a40      	ldrh	r0, [r0, #18]
 8018546:	4770      	bx	lr

08018548 <uxr_next_reliable_nack_buffer_to_send>:
 8018548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801854c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8018550:	b082      	sub	sp, #8
 8018552:	f1b8 0f00 	cmp.w	r8, #0
 8018556:	d011      	beq.n	801857c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8018558:	4604      	mov	r4, r0
 801855a:	8818      	ldrh	r0, [r3, #0]
 801855c:	460e      	mov	r6, r1
 801855e:	4617      	mov	r7, r2
 8018560:	461d      	mov	r5, r3
 8018562:	2101      	movs	r1, #1
 8018564:	f000 f886 	bl	8018674 <uxr_seq_num_add>
 8018568:	8028      	strh	r0, [r5, #0]
 801856a:	8a21      	ldrh	r1, [r4, #16]
 801856c:	f000 f88a 	bl	8018684 <uxr_seq_num_cmp>
 8018570:	2800      	cmp	r0, #0
 8018572:	dd07      	ble.n	8018584 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8018574:	f04f 0800 	mov.w	r8, #0
 8018578:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801857c:	4640      	mov	r0, r8
 801857e:	b002      	add	sp, #8
 8018580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018584:	8921      	ldrh	r1, [r4, #8]
 8018586:	8828      	ldrh	r0, [r5, #0]
 8018588:	6823      	ldr	r3, [r4, #0]
 801858a:	fbb0 f2f1 	udiv	r2, r0, r1
 801858e:	fb01 0c12 	mls	ip, r1, r2, r0
 8018592:	fa1f f28c 	uxth.w	r2, ip
 8018596:	9301      	str	r3, [sp, #4]
 8018598:	6863      	ldr	r3, [r4, #4]
 801859a:	fbb3 fcf1 	udiv	ip, r3, r1
 801859e:	9b01      	ldr	r3, [sp, #4]
 80185a0:	fb02 fc0c 	mul.w	ip, r2, ip
 80185a4:	f10c 0c04 	add.w	ip, ip, #4
 80185a8:	4463      	add	r3, ip
 80185aa:	6033      	str	r3, [r6, #0]
 80185ac:	6823      	ldr	r3, [r4, #0]
 80185ae:	4463      	add	r3, ip
 80185b0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80185b4:	603b      	str	r3, [r7, #0]
 80185b6:	7b22      	ldrb	r2, [r4, #12]
 80185b8:	429a      	cmp	r2, r3
 80185ba:	d0d2      	beq.n	8018562 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80185bc:	4640      	mov	r0, r8
 80185be:	b002      	add	sp, #8
 80185c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080185c4 <uxr_process_acknack>:
 80185c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185c6:	4604      	mov	r4, r0
 80185c8:	460e      	mov	r6, r1
 80185ca:	4610      	mov	r0, r2
 80185cc:	2101      	movs	r1, #1
 80185ce:	f000 f855 	bl	801867c <uxr_seq_num_sub>
 80185d2:	8a61      	ldrh	r1, [r4, #18]
 80185d4:	f000 f852 	bl	801867c <uxr_seq_num_sub>
 80185d8:	b1c0      	cbz	r0, 801860c <uxr_process_acknack+0x48>
 80185da:	4605      	mov	r5, r0
 80185dc:	2700      	movs	r7, #0
 80185de:	2101      	movs	r1, #1
 80185e0:	8a60      	ldrh	r0, [r4, #18]
 80185e2:	f000 f847 	bl	8018674 <uxr_seq_num_add>
 80185e6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80185ea:	fbb0 f1fc 	udiv	r1, r0, ip
 80185ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80185f2:	fb0c 0111 	mls	r1, ip, r1, r0
 80185f6:	b289      	uxth	r1, r1
 80185f8:	3701      	adds	r7, #1
 80185fa:	fbb3 f3fc 	udiv	r3, r3, ip
 80185fe:	fb01 f303 	mul.w	r3, r1, r3
 8018602:	42bd      	cmp	r5, r7
 8018604:	7b21      	ldrb	r1, [r4, #12]
 8018606:	8260      	strh	r0, [r4, #18]
 8018608:	50d1      	str	r1, [r2, r3]
 801860a:	d1e8      	bne.n	80185de <uxr_process_acknack+0x1a>
 801860c:	3e00      	subs	r6, #0
 801860e:	f04f 0300 	mov.w	r3, #0
 8018612:	bf18      	it	ne
 8018614:	2601      	movne	r6, #1
 8018616:	f884 3020 	strb.w	r3, [r4, #32]
 801861a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801861e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018620 <uxr_is_output_up_to_date>:
 8018620:	8a01      	ldrh	r1, [r0, #16]
 8018622:	8a40      	ldrh	r0, [r0, #18]
 8018624:	b508      	push	{r3, lr}
 8018626:	f000 f82d 	bl	8018684 <uxr_seq_num_cmp>
 801862a:	fab0 f080 	clz	r0, r0
 801862e:	0940      	lsrs	r0, r0, #5
 8018630:	bd08      	pop	{r3, pc}
 8018632:	bf00      	nop

08018634 <get_available_free_slots>:
 8018634:	8902      	ldrh	r2, [r0, #8]
 8018636:	b1da      	cbz	r2, 8018670 <get_available_free_slots+0x3c>
 8018638:	b530      	push	{r4, r5, lr}
 801863a:	2100      	movs	r1, #0
 801863c:	6843      	ldr	r3, [r0, #4]
 801863e:	6805      	ldr	r5, [r0, #0]
 8018640:	7b04      	ldrb	r4, [r0, #12]
 8018642:	fbb3 fef2 	udiv	lr, r3, r2
 8018646:	4608      	mov	r0, r1
 8018648:	460b      	mov	r3, r1
 801864a:	fbb3 fcf2 	udiv	ip, r3, r2
 801864e:	fb02 331c 	mls	r3, r2, ip, r3
 8018652:	b29b      	uxth	r3, r3
 8018654:	fb0e f303 	mul.w	r3, lr, r3
 8018658:	3101      	adds	r1, #1
 801865a:	f855 c003 	ldr.w	ip, [r5, r3]
 801865e:	4564      	cmp	r4, ip
 8018660:	bf08      	it	eq
 8018662:	3001      	addeq	r0, #1
 8018664:	b28b      	uxth	r3, r1
 8018666:	bf08      	it	eq
 8018668:	b280      	uxtheq	r0, r0
 801866a:	4293      	cmp	r3, r2
 801866c:	d3ed      	bcc.n	801864a <get_available_free_slots+0x16>
 801866e:	bd30      	pop	{r4, r5, pc}
 8018670:	4610      	mov	r0, r2
 8018672:	4770      	bx	lr

08018674 <uxr_seq_num_add>:
 8018674:	4408      	add	r0, r1
 8018676:	b280      	uxth	r0, r0
 8018678:	4770      	bx	lr
 801867a:	bf00      	nop

0801867c <uxr_seq_num_sub>:
 801867c:	1a40      	subs	r0, r0, r1
 801867e:	b280      	uxth	r0, r0
 8018680:	4770      	bx	lr
 8018682:	bf00      	nop

08018684 <uxr_seq_num_cmp>:
 8018684:	4288      	cmp	r0, r1
 8018686:	d011      	beq.n	80186ac <uxr_seq_num_cmp+0x28>
 8018688:	d309      	bcc.n	801869e <uxr_seq_num_cmp+0x1a>
 801868a:	4288      	cmp	r0, r1
 801868c:	d910      	bls.n	80186b0 <uxr_seq_num_cmp+0x2c>
 801868e:	1a40      	subs	r0, r0, r1
 8018690:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8018694:	bfd4      	ite	le
 8018696:	2001      	movle	r0, #1
 8018698:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801869c:	4770      	bx	lr
 801869e:	1a0b      	subs	r3, r1, r0
 80186a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80186a4:	daf1      	bge.n	801868a <uxr_seq_num_cmp+0x6>
 80186a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80186aa:	4770      	bx	lr
 80186ac:	2000      	movs	r0, #0
 80186ae:	4770      	bx	lr
 80186b0:	2001      	movs	r0, #1
 80186b2:	4770      	bx	lr

080186b4 <rcl_get_default_domain_id>:
 80186b4:	b530      	push	{r4, r5, lr}
 80186b6:	b083      	sub	sp, #12
 80186b8:	2300      	movs	r3, #0
 80186ba:	9300      	str	r3, [sp, #0]
 80186bc:	b1d0      	cbz	r0, 80186f4 <rcl_get_default_domain_id+0x40>
 80186be:	4604      	mov	r4, r0
 80186c0:	4669      	mov	r1, sp
 80186c2:	4815      	ldr	r0, [pc, #84]	@ (8018718 <rcl_get_default_domain_id+0x64>)
 80186c4:	f7fe f814 	bl	80166f0 <rcutils_get_env>
 80186c8:	4602      	mov	r2, r0
 80186ca:	b110      	cbz	r0, 80186d2 <rcl_get_default_domain_id+0x1e>
 80186cc:	2001      	movs	r0, #1
 80186ce:	b003      	add	sp, #12
 80186d0:	bd30      	pop	{r4, r5, pc}
 80186d2:	9b00      	ldr	r3, [sp, #0]
 80186d4:	b18b      	cbz	r3, 80186fa <rcl_get_default_domain_id+0x46>
 80186d6:	7818      	ldrb	r0, [r3, #0]
 80186d8:	2800      	cmp	r0, #0
 80186da:	d0f8      	beq.n	80186ce <rcl_get_default_domain_id+0x1a>
 80186dc:	a901      	add	r1, sp, #4
 80186de:	4618      	mov	r0, r3
 80186e0:	9201      	str	r2, [sp, #4]
 80186e2:	f000 fe39 	bl	8019358 <strtoul>
 80186e6:	4605      	mov	r5, r0
 80186e8:	b150      	cbz	r0, 8018700 <rcl_get_default_domain_id+0x4c>
 80186ea:	1c43      	adds	r3, r0, #1
 80186ec:	d00d      	beq.n	801870a <rcl_get_default_domain_id+0x56>
 80186ee:	6025      	str	r5, [r4, #0]
 80186f0:	2000      	movs	r0, #0
 80186f2:	e7ec      	b.n	80186ce <rcl_get_default_domain_id+0x1a>
 80186f4:	200b      	movs	r0, #11
 80186f6:	b003      	add	sp, #12
 80186f8:	bd30      	pop	{r4, r5, pc}
 80186fa:	4618      	mov	r0, r3
 80186fc:	b003      	add	sp, #12
 80186fe:	bd30      	pop	{r4, r5, pc}
 8018700:	9b01      	ldr	r3, [sp, #4]
 8018702:	781b      	ldrb	r3, [r3, #0]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d0f2      	beq.n	80186ee <rcl_get_default_domain_id+0x3a>
 8018708:	e7e0      	b.n	80186cc <rcl_get_default_domain_id+0x18>
 801870a:	f001 f95f 	bl	80199cc <__errno>
 801870e:	6803      	ldr	r3, [r0, #0]
 8018710:	2b22      	cmp	r3, #34	@ 0x22
 8018712:	d1ec      	bne.n	80186ee <rcl_get_default_domain_id+0x3a>
 8018714:	e7da      	b.n	80186cc <rcl_get_default_domain_id+0x18>
 8018716:	bf00      	nop
 8018718:	0801c4b4 	.word	0x0801c4b4

0801871c <rcl_expand_topic_name>:
 801871c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018720:	b08b      	sub	sp, #44	@ 0x2c
 8018722:	9306      	str	r3, [sp, #24]
 8018724:	2800      	cmp	r0, #0
 8018726:	f000 80ad 	beq.w	8018884 <rcl_expand_topic_name+0x168>
 801872a:	460e      	mov	r6, r1
 801872c:	2900      	cmp	r1, #0
 801872e:	f000 80a9 	beq.w	8018884 <rcl_expand_topic_name+0x168>
 8018732:	4617      	mov	r7, r2
 8018734:	2a00      	cmp	r2, #0
 8018736:	f000 80a5 	beq.w	8018884 <rcl_expand_topic_name+0x168>
 801873a:	2b00      	cmp	r3, #0
 801873c:	f000 80a2 	beq.w	8018884 <rcl_expand_topic_name+0x168>
 8018740:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018742:	2b00      	cmp	r3, #0
 8018744:	f000 809e 	beq.w	8018884 <rcl_expand_topic_name+0x168>
 8018748:	2200      	movs	r2, #0
 801874a:	a909      	add	r1, sp, #36	@ 0x24
 801874c:	4680      	mov	r8, r0
 801874e:	f000 fa57 	bl	8018c00 <rcl_validate_topic_name>
 8018752:	4604      	mov	r4, r0
 8018754:	2800      	cmp	r0, #0
 8018756:	f040 8096 	bne.w	8018886 <rcl_expand_topic_name+0x16a>
 801875a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801875c:	2b00      	cmp	r3, #0
 801875e:	f040 809a 	bne.w	8018896 <rcl_expand_topic_name+0x17a>
 8018762:	4602      	mov	r2, r0
 8018764:	a909      	add	r1, sp, #36	@ 0x24
 8018766:	4630      	mov	r0, r6
 8018768:	f7fe fbec 	bl	8016f44 <rmw_validate_node_name>
 801876c:	2800      	cmp	r0, #0
 801876e:	f040 808e 	bne.w	801888e <rcl_expand_topic_name+0x172>
 8018772:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018774:	2a00      	cmp	r2, #0
 8018776:	f040 8093 	bne.w	80188a0 <rcl_expand_topic_name+0x184>
 801877a:	a909      	add	r1, sp, #36	@ 0x24
 801877c:	4638      	mov	r0, r7
 801877e:	f7fe fbc3 	bl	8016f08 <rmw_validate_namespace>
 8018782:	2800      	cmp	r0, #0
 8018784:	f040 8083 	bne.w	801888e <rcl_expand_topic_name+0x172>
 8018788:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801878a:	2c00      	cmp	r4, #0
 801878c:	f040 80ed 	bne.w	801896a <rcl_expand_topic_name+0x24e>
 8018790:	217b      	movs	r1, #123	@ 0x7b
 8018792:	4640      	mov	r0, r8
 8018794:	f001 f88e 	bl	80198b4 <strchr>
 8018798:	f898 3000 	ldrb.w	r3, [r8]
 801879c:	2b2f      	cmp	r3, #47	@ 0x2f
 801879e:	4605      	mov	r5, r0
 80187a0:	f000 809e 	beq.w	80188e0 <rcl_expand_topic_name+0x1c4>
 80187a4:	2b7e      	cmp	r3, #126	@ 0x7e
 80187a6:	f040 80a2 	bne.w	80188ee <rcl_expand_topic_name+0x1d2>
 80187aa:	4638      	mov	r0, r7
 80187ac:	f7e7 fd42 	bl	8000234 <strlen>
 80187b0:	4a82      	ldr	r2, [pc, #520]	@ (80189bc <rcl_expand_topic_name+0x2a0>)
 80187b2:	4b83      	ldr	r3, [pc, #524]	@ (80189c0 <rcl_expand_topic_name+0x2a4>)
 80187b4:	2801      	cmp	r0, #1
 80187b6:	bf18      	it	ne
 80187b8:	4613      	movne	r3, r2
 80187ba:	9302      	str	r3, [sp, #8]
 80187bc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80187be:	9300      	str	r3, [sp, #0]
 80187c0:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80187c4:	f108 0301 	add.w	r3, r8, #1
 80187c8:	9305      	str	r3, [sp, #20]
 80187ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80187ce:	9301      	str	r3, [sp, #4]
 80187d0:	ab14      	add	r3, sp, #80	@ 0x50
 80187d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80187d4:	f7fd ffb4 	bl	8016740 <rcutils_format_string_limit>
 80187d8:	4682      	mov	sl, r0
 80187da:	2800      	cmp	r0, #0
 80187dc:	f000 80c7 	beq.w	801896e <rcl_expand_topic_name+0x252>
 80187e0:	2d00      	cmp	r5, #0
 80187e2:	f000 80a2 	beq.w	801892a <rcl_expand_topic_name+0x20e>
 80187e6:	217b      	movs	r1, #123	@ 0x7b
 80187e8:	f001 f864 	bl	80198b4 <strchr>
 80187ec:	46d1      	mov	r9, sl
 80187ee:	4605      	mov	r5, r0
 80187f0:	9407      	str	r4, [sp, #28]
 80187f2:	46d3      	mov	fp, sl
 80187f4:	464c      	mov	r4, r9
 80187f6:	2d00      	cmp	r5, #0
 80187f8:	f000 80be 	beq.w	8018978 <rcl_expand_topic_name+0x25c>
 80187fc:	217d      	movs	r1, #125	@ 0x7d
 80187fe:	4620      	mov	r0, r4
 8018800:	f001 f858 	bl	80198b4 <strchr>
 8018804:	eba0 0905 	sub.w	r9, r0, r5
 8018808:	f109 0a01 	add.w	sl, r9, #1
 801880c:	486d      	ldr	r0, [pc, #436]	@ (80189c4 <rcl_expand_topic_name+0x2a8>)
 801880e:	4652      	mov	r2, sl
 8018810:	4629      	mov	r1, r5
 8018812:	f001 f85c 	bl	80198ce <strncmp>
 8018816:	2800      	cmp	r0, #0
 8018818:	d067      	beq.n	80188ea <rcl_expand_topic_name+0x1ce>
 801881a:	486b      	ldr	r0, [pc, #428]	@ (80189c8 <rcl_expand_topic_name+0x2ac>)
 801881c:	4652      	mov	r2, sl
 801881e:	4629      	mov	r1, r5
 8018820:	f001 f855 	bl	80198ce <strncmp>
 8018824:	b130      	cbz	r0, 8018834 <rcl_expand_topic_name+0x118>
 8018826:	4869      	ldr	r0, [pc, #420]	@ (80189cc <rcl_expand_topic_name+0x2b0>)
 8018828:	4652      	mov	r2, sl
 801882a:	4629      	mov	r1, r5
 801882c:	f001 f84f 	bl	80198ce <strncmp>
 8018830:	2800      	cmp	r0, #0
 8018832:	d137      	bne.n	80188a4 <rcl_expand_topic_name+0x188>
 8018834:	46b9      	mov	r9, r7
 8018836:	ab16      	add	r3, sp, #88	@ 0x58
 8018838:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801883c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018840:	ab14      	add	r3, sp, #80	@ 0x50
 8018842:	4628      	mov	r0, r5
 8018844:	cb0c      	ldmia	r3, {r2, r3}
 8018846:	4651      	mov	r1, sl
 8018848:	f7fe f8b6 	bl	80169b8 <rcutils_strndup>
 801884c:	4605      	mov	r5, r0
 801884e:	2800      	cmp	r0, #0
 8018850:	f000 809c 	beq.w	801898c <rcl_expand_topic_name+0x270>
 8018854:	464a      	mov	r2, r9
 8018856:	4620      	mov	r0, r4
 8018858:	ab14      	add	r3, sp, #80	@ 0x50
 801885a:	4629      	mov	r1, r5
 801885c:	f7fd ffaa 	bl	80167b4 <rcutils_repl_str>
 8018860:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018862:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018864:	4604      	mov	r4, r0
 8018866:	4628      	mov	r0, r5
 8018868:	4798      	blx	r3
 801886a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801886c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801886e:	4658      	mov	r0, fp
 8018870:	4798      	blx	r3
 8018872:	2c00      	cmp	r4, #0
 8018874:	d07b      	beq.n	801896e <rcl_expand_topic_name+0x252>
 8018876:	217b      	movs	r1, #123	@ 0x7b
 8018878:	4620      	mov	r0, r4
 801887a:	f001 f81b 	bl	80198b4 <strchr>
 801887e:	46a3      	mov	fp, r4
 8018880:	4605      	mov	r5, r0
 8018882:	e7b8      	b.n	80187f6 <rcl_expand_topic_name+0xda>
 8018884:	240b      	movs	r4, #11
 8018886:	4620      	mov	r0, r4
 8018888:	b00b      	add	sp, #44	@ 0x2c
 801888a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801888e:	f7fb f8a9 	bl	80139e4 <rcl_convert_rmw_ret_to_rcl_ret>
 8018892:	4604      	mov	r4, r0
 8018894:	e7f7      	b.n	8018886 <rcl_expand_topic_name+0x16a>
 8018896:	2467      	movs	r4, #103	@ 0x67
 8018898:	4620      	mov	r0, r4
 801889a:	b00b      	add	sp, #44	@ 0x2c
 801889c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188a0:	24c9      	movs	r4, #201	@ 0xc9
 80188a2:	e7f0      	b.n	8018886 <rcl_expand_topic_name+0x16a>
 80188a4:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80188a8:	9806      	ldr	r0, [sp, #24]
 80188aa:	1c69      	adds	r1, r5, #1
 80188ac:	f7fe f99e 	bl	8016bec <rcutils_string_map_getn>
 80188b0:	4681      	mov	r9, r0
 80188b2:	2800      	cmp	r0, #0
 80188b4:	d1bf      	bne.n	8018836 <rcl_expand_topic_name+0x11a>
 80188b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80188b8:	aa16      	add	r2, sp, #88	@ 0x58
 80188ba:	6018      	str	r0, [r3, #0]
 80188bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80188be:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80188c2:	ab14      	add	r3, sp, #80	@ 0x50
 80188c4:	cb0c      	ldmia	r3, {r2, r3}
 80188c6:	4651      	mov	r1, sl
 80188c8:	4628      	mov	r0, r5
 80188ca:	f7fe f875 	bl	80169b8 <rcutils_strndup>
 80188ce:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80188d0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80188d2:	4798      	blx	r3
 80188d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80188d6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80188d8:	4658      	mov	r0, fp
 80188da:	2469      	movs	r4, #105	@ 0x69
 80188dc:	4798      	blx	r3
 80188de:	e7d2      	b.n	8018886 <rcl_expand_topic_name+0x16a>
 80188e0:	2800      	cmp	r0, #0
 80188e2:	d05b      	beq.n	801899c <rcl_expand_topic_name+0x280>
 80188e4:	46c1      	mov	r9, r8
 80188e6:	46a2      	mov	sl, r4
 80188e8:	e782      	b.n	80187f0 <rcl_expand_topic_name+0xd4>
 80188ea:	46b1      	mov	r9, r6
 80188ec:	e7a3      	b.n	8018836 <rcl_expand_topic_name+0x11a>
 80188ee:	2800      	cmp	r0, #0
 80188f0:	d1f8      	bne.n	80188e4 <rcl_expand_topic_name+0x1c8>
 80188f2:	4638      	mov	r0, r7
 80188f4:	f7e7 fc9e 	bl	8000234 <strlen>
 80188f8:	4a35      	ldr	r2, [pc, #212]	@ (80189d0 <rcl_expand_topic_name+0x2b4>)
 80188fa:	4b36      	ldr	r3, [pc, #216]	@ (80189d4 <rcl_expand_topic_name+0x2b8>)
 80188fc:	f8cd 8010 	str.w	r8, [sp, #16]
 8018900:	2801      	cmp	r0, #1
 8018902:	bf18      	it	ne
 8018904:	4613      	movne	r3, r2
 8018906:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801890a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801890e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018910:	9703      	str	r7, [sp, #12]
 8018912:	9200      	str	r2, [sp, #0]
 8018914:	ab14      	add	r3, sp, #80	@ 0x50
 8018916:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018918:	f7fd ff12 	bl	8016740 <rcutils_format_string_limit>
 801891c:	4682      	mov	sl, r0
 801891e:	4653      	mov	r3, sl
 8018920:	b32b      	cbz	r3, 801896e <rcl_expand_topic_name+0x252>
 8018922:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018924:	f8c3 a000 	str.w	sl, [r3]
 8018928:	e7ad      	b.n	8018886 <rcl_expand_topic_name+0x16a>
 801892a:	f89a 3000 	ldrb.w	r3, [sl]
 801892e:	2b2f      	cmp	r3, #47	@ 0x2f
 8018930:	d0f7      	beq.n	8018922 <rcl_expand_topic_name+0x206>
 8018932:	4638      	mov	r0, r7
 8018934:	f7e7 fc7e 	bl	8000234 <strlen>
 8018938:	4a25      	ldr	r2, [pc, #148]	@ (80189d0 <rcl_expand_topic_name+0x2b4>)
 801893a:	4b26      	ldr	r3, [pc, #152]	@ (80189d4 <rcl_expand_topic_name+0x2b8>)
 801893c:	f8cd a010 	str.w	sl, [sp, #16]
 8018940:	2801      	cmp	r0, #1
 8018942:	bf18      	it	ne
 8018944:	4613      	movne	r3, r2
 8018946:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801894a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801894e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018950:	9703      	str	r7, [sp, #12]
 8018952:	9200      	str	r2, [sp, #0]
 8018954:	ab14      	add	r3, sp, #80	@ 0x50
 8018956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018958:	f7fd fef2 	bl	8016740 <rcutils_format_string_limit>
 801895c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801895e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018960:	4605      	mov	r5, r0
 8018962:	4650      	mov	r0, sl
 8018964:	4798      	blx	r3
 8018966:	46aa      	mov	sl, r5
 8018968:	e7d9      	b.n	801891e <rcl_expand_topic_name+0x202>
 801896a:	24ca      	movs	r4, #202	@ 0xca
 801896c:	e78b      	b.n	8018886 <rcl_expand_topic_name+0x16a>
 801896e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018970:	2300      	movs	r3, #0
 8018972:	6013      	str	r3, [r2, #0]
 8018974:	240a      	movs	r4, #10
 8018976:	e786      	b.n	8018886 <rcl_expand_topic_name+0x16a>
 8018978:	465b      	mov	r3, fp
 801897a:	9c07      	ldr	r4, [sp, #28]
 801897c:	46da      	mov	sl, fp
 801897e:	2b00      	cmp	r3, #0
 8018980:	d1d3      	bne.n	801892a <rcl_expand_topic_name+0x20e>
 8018982:	f898 3000 	ldrb.w	r3, [r8]
 8018986:	2b2f      	cmp	r3, #47	@ 0x2f
 8018988:	d0cb      	beq.n	8018922 <rcl_expand_topic_name+0x206>
 801898a:	e7b2      	b.n	80188f2 <rcl_expand_topic_name+0x1d6>
 801898c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8018990:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018992:	6015      	str	r5, [r2, #0]
 8018994:	4658      	mov	r0, fp
 8018996:	4798      	blx	r3
 8018998:	240a      	movs	r4, #10
 801899a:	e774      	b.n	8018886 <rcl_expand_topic_name+0x16a>
 801899c:	ab17      	add	r3, sp, #92	@ 0x5c
 801899e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80189a2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80189a6:	ab14      	add	r3, sp, #80	@ 0x50
 80189a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80189aa:	4640      	mov	r0, r8
 80189ac:	f7fd ffe2 	bl	8016974 <rcutils_strdup>
 80189b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80189b2:	2800      	cmp	r0, #0
 80189b4:	6018      	str	r0, [r3, #0]
 80189b6:	bf08      	it	eq
 80189b8:	240a      	moveq	r4, #10
 80189ba:	e764      	b.n	8018886 <rcl_expand_topic_name+0x16a>
 80189bc:	0801c4c4 	.word	0x0801c4c4
 80189c0:	0801b6e4 	.word	0x0801b6e4
 80189c4:	0801c4cc 	.word	0x0801c4cc
 80189c8:	0801c4d4 	.word	0x0801c4d4
 80189cc:	0801c4dc 	.word	0x0801c4dc
 80189d0:	0801b6d0 	.word	0x0801b6d0
 80189d4:	0801b6f4 	.word	0x0801b6f4

080189d8 <rcl_get_default_topic_name_substitutions>:
 80189d8:	2800      	cmp	r0, #0
 80189da:	bf0c      	ite	eq
 80189dc:	200b      	moveq	r0, #11
 80189de:	2000      	movne	r0, #0
 80189e0:	4770      	bx	lr
 80189e2:	bf00      	nop

080189e4 <rcl_get_zero_initialized_guard_condition>:
 80189e4:	4a03      	ldr	r2, [pc, #12]	@ (80189f4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80189e6:	4603      	mov	r3, r0
 80189e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80189ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80189f0:	4618      	mov	r0, r3
 80189f2:	4770      	bx	lr
 80189f4:	0801c4e8 	.word	0x0801c4e8

080189f8 <rcl_guard_condition_init>:
 80189f8:	b082      	sub	sp, #8
 80189fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189fc:	b087      	sub	sp, #28
 80189fe:	ac0c      	add	r4, sp, #48	@ 0x30
 8018a00:	e884 000c 	stmia.w	r4, {r2, r3}
 8018a04:	46a6      	mov	lr, r4
 8018a06:	460d      	mov	r5, r1
 8018a08:	4604      	mov	r4, r0
 8018a0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018a0e:	f10d 0c04 	add.w	ip, sp, #4
 8018a12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018a16:	f8de 3000 	ldr.w	r3, [lr]
 8018a1a:	f8cc 3000 	str.w	r3, [ip]
 8018a1e:	a801      	add	r0, sp, #4
 8018a20:	f7f4 ffc0 	bl	800d9a4 <rcutils_allocator_is_valid>
 8018a24:	b338      	cbz	r0, 8018a76 <rcl_guard_condition_init+0x7e>
 8018a26:	b334      	cbz	r4, 8018a76 <rcl_guard_condition_init+0x7e>
 8018a28:	6866      	ldr	r6, [r4, #4]
 8018a2a:	b9ee      	cbnz	r6, 8018a68 <rcl_guard_condition_init+0x70>
 8018a2c:	b31d      	cbz	r5, 8018a76 <rcl_guard_condition_init+0x7e>
 8018a2e:	4628      	mov	r0, r5
 8018a30:	f7fa fff6 	bl	8013a20 <rcl_context_is_valid>
 8018a34:	b308      	cbz	r0, 8018a7a <rcl_guard_condition_init+0x82>
 8018a36:	9b01      	ldr	r3, [sp, #4]
 8018a38:	9905      	ldr	r1, [sp, #20]
 8018a3a:	201c      	movs	r0, #28
 8018a3c:	4798      	blx	r3
 8018a3e:	4607      	mov	r7, r0
 8018a40:	6060      	str	r0, [r4, #4]
 8018a42:	b310      	cbz	r0, 8018a8a <rcl_guard_condition_init+0x92>
 8018a44:	6828      	ldr	r0, [r5, #0]
 8018a46:	3028      	adds	r0, #40	@ 0x28
 8018a48:	f000 f9ac 	bl	8018da4 <rmw_create_guard_condition>
 8018a4c:	6038      	str	r0, [r7, #0]
 8018a4e:	6860      	ldr	r0, [r4, #4]
 8018a50:	6805      	ldr	r5, [r0, #0]
 8018a52:	b1a5      	cbz	r5, 8018a7e <rcl_guard_condition_init+0x86>
 8018a54:	2301      	movs	r3, #1
 8018a56:	ac01      	add	r4, sp, #4
 8018a58:	7103      	strb	r3, [r0, #4]
 8018a5a:	f100 0708 	add.w	r7, r0, #8
 8018a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018a60:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018a62:	6823      	ldr	r3, [r4, #0]
 8018a64:	603b      	str	r3, [r7, #0]
 8018a66:	e000      	b.n	8018a6a <rcl_guard_condition_init+0x72>
 8018a68:	2664      	movs	r6, #100	@ 0x64
 8018a6a:	4630      	mov	r0, r6
 8018a6c:	b007      	add	sp, #28
 8018a6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018a72:	b002      	add	sp, #8
 8018a74:	4770      	bx	lr
 8018a76:	260b      	movs	r6, #11
 8018a78:	e7f7      	b.n	8018a6a <rcl_guard_condition_init+0x72>
 8018a7a:	2665      	movs	r6, #101	@ 0x65
 8018a7c:	e7f5      	b.n	8018a6a <rcl_guard_condition_init+0x72>
 8018a7e:	9b02      	ldr	r3, [sp, #8]
 8018a80:	9905      	ldr	r1, [sp, #20]
 8018a82:	4798      	blx	r3
 8018a84:	2601      	movs	r6, #1
 8018a86:	6065      	str	r5, [r4, #4]
 8018a88:	e7ef      	b.n	8018a6a <rcl_guard_condition_init+0x72>
 8018a8a:	260a      	movs	r6, #10
 8018a8c:	e7ed      	b.n	8018a6a <rcl_guard_condition_init+0x72>
 8018a8e:	bf00      	nop

08018a90 <rcl_guard_condition_init_from_rmw>:
 8018a90:	b082      	sub	sp, #8
 8018a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a96:	b086      	sub	sp, #24
 8018a98:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018a9c:	4604      	mov	r4, r0
 8018a9e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8018aa2:	460e      	mov	r6, r1
 8018aa4:	4617      	mov	r7, r2
 8018aa6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018aaa:	f10d 0e04 	add.w	lr, sp, #4
 8018aae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018ab2:	f8dc 3000 	ldr.w	r3, [ip]
 8018ab6:	f8ce 3000 	str.w	r3, [lr]
 8018aba:	a801      	add	r0, sp, #4
 8018abc:	f7f4 ff72 	bl	800d9a4 <rcutils_allocator_is_valid>
 8018ac0:	b350      	cbz	r0, 8018b18 <rcl_guard_condition_init_from_rmw+0x88>
 8018ac2:	b34c      	cbz	r4, 8018b18 <rcl_guard_condition_init_from_rmw+0x88>
 8018ac4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018ac8:	f1b8 0f00 	cmp.w	r8, #0
 8018acc:	d11e      	bne.n	8018b0c <rcl_guard_condition_init_from_rmw+0x7c>
 8018ace:	b31f      	cbz	r7, 8018b18 <rcl_guard_condition_init_from_rmw+0x88>
 8018ad0:	4638      	mov	r0, r7
 8018ad2:	f7fa ffa5 	bl	8013a20 <rcl_context_is_valid>
 8018ad6:	b328      	cbz	r0, 8018b24 <rcl_guard_condition_init_from_rmw+0x94>
 8018ad8:	9b01      	ldr	r3, [sp, #4]
 8018ada:	9905      	ldr	r1, [sp, #20]
 8018adc:	201c      	movs	r0, #28
 8018ade:	4798      	blx	r3
 8018ae0:	4605      	mov	r5, r0
 8018ae2:	6060      	str	r0, [r4, #4]
 8018ae4:	b358      	cbz	r0, 8018b3e <rcl_guard_condition_init_from_rmw+0xae>
 8018ae6:	b1fe      	cbz	r6, 8018b28 <rcl_guard_condition_init_from_rmw+0x98>
 8018ae8:	6006      	str	r6, [r0, #0]
 8018aea:	f880 8004 	strb.w	r8, [r0, #4]
 8018aee:	ac01      	add	r4, sp, #4
 8018af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018af2:	f105 0c08 	add.w	ip, r5, #8
 8018af6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018afa:	6823      	ldr	r3, [r4, #0]
 8018afc:	f8cc 3000 	str.w	r3, [ip]
 8018b00:	2000      	movs	r0, #0
 8018b02:	b006      	add	sp, #24
 8018b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018b08:	b002      	add	sp, #8
 8018b0a:	4770      	bx	lr
 8018b0c:	2064      	movs	r0, #100	@ 0x64
 8018b0e:	b006      	add	sp, #24
 8018b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018b14:	b002      	add	sp, #8
 8018b16:	4770      	bx	lr
 8018b18:	200b      	movs	r0, #11
 8018b1a:	b006      	add	sp, #24
 8018b1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018b20:	b002      	add	sp, #8
 8018b22:	4770      	bx	lr
 8018b24:	2065      	movs	r0, #101	@ 0x65
 8018b26:	e7f2      	b.n	8018b0e <rcl_guard_condition_init_from_rmw+0x7e>
 8018b28:	6838      	ldr	r0, [r7, #0]
 8018b2a:	3028      	adds	r0, #40	@ 0x28
 8018b2c:	f000 f93a 	bl	8018da4 <rmw_create_guard_condition>
 8018b30:	6028      	str	r0, [r5, #0]
 8018b32:	6865      	ldr	r5, [r4, #4]
 8018b34:	682e      	ldr	r6, [r5, #0]
 8018b36:	b126      	cbz	r6, 8018b42 <rcl_guard_condition_init_from_rmw+0xb2>
 8018b38:	2301      	movs	r3, #1
 8018b3a:	712b      	strb	r3, [r5, #4]
 8018b3c:	e7d7      	b.n	8018aee <rcl_guard_condition_init_from_rmw+0x5e>
 8018b3e:	200a      	movs	r0, #10
 8018b40:	e7e5      	b.n	8018b0e <rcl_guard_condition_init_from_rmw+0x7e>
 8018b42:	4628      	mov	r0, r5
 8018b44:	9b02      	ldr	r3, [sp, #8]
 8018b46:	9905      	ldr	r1, [sp, #20]
 8018b48:	4798      	blx	r3
 8018b4a:	6066      	str	r6, [r4, #4]
 8018b4c:	2001      	movs	r0, #1
 8018b4e:	e7de      	b.n	8018b0e <rcl_guard_condition_init_from_rmw+0x7e>

08018b50 <rcl_guard_condition_fini>:
 8018b50:	b570      	push	{r4, r5, r6, lr}
 8018b52:	b082      	sub	sp, #8
 8018b54:	b1f0      	cbz	r0, 8018b94 <rcl_guard_condition_fini+0x44>
 8018b56:	6843      	ldr	r3, [r0, #4]
 8018b58:	4604      	mov	r4, r0
 8018b5a:	b163      	cbz	r3, 8018b76 <rcl_guard_condition_fini+0x26>
 8018b5c:	6818      	ldr	r0, [r3, #0]
 8018b5e:	68de      	ldr	r6, [r3, #12]
 8018b60:	6999      	ldr	r1, [r3, #24]
 8018b62:	b160      	cbz	r0, 8018b7e <rcl_guard_condition_fini+0x2e>
 8018b64:	791d      	ldrb	r5, [r3, #4]
 8018b66:	b965      	cbnz	r5, 8018b82 <rcl_guard_condition_fini+0x32>
 8018b68:	4618      	mov	r0, r3
 8018b6a:	47b0      	blx	r6
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	4628      	mov	r0, r5
 8018b70:	6063      	str	r3, [r4, #4]
 8018b72:	b002      	add	sp, #8
 8018b74:	bd70      	pop	{r4, r5, r6, pc}
 8018b76:	461d      	mov	r5, r3
 8018b78:	4628      	mov	r0, r5
 8018b7a:	b002      	add	sp, #8
 8018b7c:	bd70      	pop	{r4, r5, r6, pc}
 8018b7e:	4605      	mov	r5, r0
 8018b80:	e7f2      	b.n	8018b68 <rcl_guard_condition_fini+0x18>
 8018b82:	9101      	str	r1, [sp, #4]
 8018b84:	f000 f922 	bl	8018dcc <rmw_destroy_guard_condition>
 8018b88:	1e05      	subs	r5, r0, #0
 8018b8a:	6863      	ldr	r3, [r4, #4]
 8018b8c:	9901      	ldr	r1, [sp, #4]
 8018b8e:	bf18      	it	ne
 8018b90:	2501      	movne	r5, #1
 8018b92:	e7e9      	b.n	8018b68 <rcl_guard_condition_fini+0x18>
 8018b94:	250b      	movs	r5, #11
 8018b96:	4628      	mov	r0, r5
 8018b98:	b002      	add	sp, #8
 8018b9a:	bd70      	pop	{r4, r5, r6, pc}

08018b9c <rcl_guard_condition_get_default_options>:
 8018b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b9e:	b087      	sub	sp, #28
 8018ba0:	4606      	mov	r6, r0
 8018ba2:	4668      	mov	r0, sp
 8018ba4:	f7f4 fef0 	bl	800d988 <rcutils_get_default_allocator>
 8018ba8:	4b09      	ldr	r3, [pc, #36]	@ (8018bd0 <rcl_guard_condition_get_default_options+0x34>)
 8018baa:	46ee      	mov	lr, sp
 8018bac:	469c      	mov	ip, r3
 8018bae:	461d      	mov	r5, r3
 8018bb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018bb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018bba:	4634      	mov	r4, r6
 8018bbc:	f8de 7000 	ldr.w	r7, [lr]
 8018bc0:	f8cc 7000 	str.w	r7, [ip]
 8018bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018bc6:	4630      	mov	r0, r6
 8018bc8:	6027      	str	r7, [r4, #0]
 8018bca:	b007      	add	sp, #28
 8018bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bce:	bf00      	nop
 8018bd0:	2000b9cc 	.word	0x2000b9cc

08018bd4 <rcl_trigger_guard_condition>:
 8018bd4:	b148      	cbz	r0, 8018bea <rcl_trigger_guard_condition+0x16>
 8018bd6:	b508      	push	{r3, lr}
 8018bd8:	6843      	ldr	r3, [r0, #4]
 8018bda:	b143      	cbz	r3, 8018bee <rcl_trigger_guard_condition+0x1a>
 8018bdc:	6818      	ldr	r0, [r3, #0]
 8018bde:	f000 f909 	bl	8018df4 <rmw_trigger_guard_condition>
 8018be2:	3800      	subs	r0, #0
 8018be4:	bf18      	it	ne
 8018be6:	2001      	movne	r0, #1
 8018be8:	bd08      	pop	{r3, pc}
 8018bea:	200b      	movs	r0, #11
 8018bec:	4770      	bx	lr
 8018bee:	200b      	movs	r0, #11
 8018bf0:	bd08      	pop	{r3, pc}
 8018bf2:	bf00      	nop

08018bf4 <rcl_guard_condition_get_rmw_handle>:
 8018bf4:	b110      	cbz	r0, 8018bfc <rcl_guard_condition_get_rmw_handle+0x8>
 8018bf6:	6840      	ldr	r0, [r0, #4]
 8018bf8:	b100      	cbz	r0, 8018bfc <rcl_guard_condition_get_rmw_handle+0x8>
 8018bfa:	6800      	ldr	r0, [r0, #0]
 8018bfc:	4770      	bx	lr
 8018bfe:	bf00      	nop

08018c00 <rcl_validate_topic_name>:
 8018c00:	2800      	cmp	r0, #0
 8018c02:	d07a      	beq.n	8018cfa <rcl_validate_topic_name+0xfa>
 8018c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c08:	460e      	mov	r6, r1
 8018c0a:	2900      	cmp	r1, #0
 8018c0c:	d07c      	beq.n	8018d08 <rcl_validate_topic_name+0x108>
 8018c0e:	4617      	mov	r7, r2
 8018c10:	4605      	mov	r5, r0
 8018c12:	f7e7 fb0f 	bl	8000234 <strlen>
 8018c16:	b1b0      	cbz	r0, 8018c46 <rcl_validate_topic_name+0x46>
 8018c18:	f895 9000 	ldrb.w	r9, [r5]
 8018c1c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8018da0 <rcl_validate_topic_name+0x1a0>
 8018c20:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8018c24:	f013 0304 	ands.w	r3, r3, #4
 8018c28:	d169      	bne.n	8018cfe <rcl_validate_topic_name+0xfe>
 8018c2a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8018c2e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8018c32:	2a2f      	cmp	r2, #47	@ 0x2f
 8018c34:	d10e      	bne.n	8018c54 <rcl_validate_topic_name+0x54>
 8018c36:	2202      	movs	r2, #2
 8018c38:	6032      	str	r2, [r6, #0]
 8018c3a:	b36f      	cbz	r7, 8018c98 <rcl_validate_topic_name+0x98>
 8018c3c:	f8c7 8000 	str.w	r8, [r7]
 8018c40:	4618      	mov	r0, r3
 8018c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c46:	2301      	movs	r3, #1
 8018c48:	6033      	str	r3, [r6, #0]
 8018c4a:	b32f      	cbz	r7, 8018c98 <rcl_validate_topic_name+0x98>
 8018c4c:	2000      	movs	r0, #0
 8018c4e:	6038      	str	r0, [r7, #0]
 8018c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c54:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8018c58:	461c      	mov	r4, r3
 8018c5a:	4619      	mov	r1, r3
 8018c5c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8018c60:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8018c64:	f1be 0f09 	cmp.w	lr, #9
 8018c68:	d919      	bls.n	8018c9e <rcl_validate_topic_name+0x9e>
 8018c6a:	f022 0e20 	bic.w	lr, r2, #32
 8018c6e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8018c72:	f1be 0f19 	cmp.w	lr, #25
 8018c76:	d912      	bls.n	8018c9e <rcl_validate_topic_name+0x9e>
 8018c78:	2a5f      	cmp	r2, #95	@ 0x5f
 8018c7a:	d019      	beq.n	8018cb0 <rcl_validate_topic_name+0xb0>
 8018c7c:	2a2f      	cmp	r2, #47	@ 0x2f
 8018c7e:	d051      	beq.n	8018d24 <rcl_validate_topic_name+0x124>
 8018c80:	2a7e      	cmp	r2, #126	@ 0x7e
 8018c82:	d048      	beq.n	8018d16 <rcl_validate_topic_name+0x116>
 8018c84:	2a7b      	cmp	r2, #123	@ 0x7b
 8018c86:	d054      	beq.n	8018d32 <rcl_validate_topic_name+0x132>
 8018c88:	2a7d      	cmp	r2, #125	@ 0x7d
 8018c8a:	d161      	bne.n	8018d50 <rcl_validate_topic_name+0x150>
 8018c8c:	2c00      	cmp	r4, #0
 8018c8e:	d155      	bne.n	8018d3c <rcl_validate_topic_name+0x13c>
 8018c90:	2305      	movs	r3, #5
 8018c92:	6033      	str	r3, [r6, #0]
 8018c94:	b107      	cbz	r7, 8018c98 <rcl_validate_topic_name+0x98>
 8018c96:	6039      	str	r1, [r7, #0]
 8018c98:	2000      	movs	r0, #0
 8018c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c9e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018ca2:	0752      	lsls	r2, r2, #29
 8018ca4:	d504      	bpl.n	8018cb0 <rcl_validate_topic_name+0xb0>
 8018ca6:	b11c      	cbz	r4, 8018cb0 <rcl_validate_topic_name+0xb0>
 8018ca8:	b111      	cbz	r1, 8018cb0 <rcl_validate_topic_name+0xb0>
 8018caa:	1e4a      	subs	r2, r1, #1
 8018cac:	429a      	cmp	r2, r3
 8018cae:	d02d      	beq.n	8018d0c <rcl_validate_topic_name+0x10c>
 8018cb0:	3101      	adds	r1, #1
 8018cb2:	4288      	cmp	r0, r1
 8018cb4:	d1d2      	bne.n	8018c5c <rcl_validate_topic_name+0x5c>
 8018cb6:	2c00      	cmp	r4, #0
 8018cb8:	d145      	bne.n	8018d46 <rcl_validate_topic_name+0x146>
 8018cba:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8018cbe:	d04f      	beq.n	8018d60 <rcl_validate_topic_name+0x160>
 8018cc0:	4620      	mov	r0, r4
 8018cc2:	2301      	movs	r3, #1
 8018cc4:	e006      	b.n	8018cd4 <rcl_validate_topic_name+0xd4>
 8018cc6:	428b      	cmp	r3, r1
 8018cc8:	f105 0501 	add.w	r5, r5, #1
 8018ccc:	f103 0201 	add.w	r2, r3, #1
 8018cd0:	d236      	bcs.n	8018d40 <rcl_validate_topic_name+0x140>
 8018cd2:	4613      	mov	r3, r2
 8018cd4:	4580      	cmp	r8, r0
 8018cd6:	f100 0001 	add.w	r0, r0, #1
 8018cda:	d0f4      	beq.n	8018cc6 <rcl_validate_topic_name+0xc6>
 8018cdc:	782a      	ldrb	r2, [r5, #0]
 8018cde:	2a2f      	cmp	r2, #47	@ 0x2f
 8018ce0:	d1f1      	bne.n	8018cc6 <rcl_validate_topic_name+0xc6>
 8018ce2:	786a      	ldrb	r2, [r5, #1]
 8018ce4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018ce8:	0754      	lsls	r4, r2, #29
 8018cea:	d5ec      	bpl.n	8018cc6 <rcl_validate_topic_name+0xc6>
 8018cec:	2204      	movs	r2, #4
 8018cee:	6032      	str	r2, [r6, #0]
 8018cf0:	2f00      	cmp	r7, #0
 8018cf2:	d0d1      	beq.n	8018c98 <rcl_validate_topic_name+0x98>
 8018cf4:	603b      	str	r3, [r7, #0]
 8018cf6:	2000      	movs	r0, #0
 8018cf8:	e7aa      	b.n	8018c50 <rcl_validate_topic_name+0x50>
 8018cfa:	200b      	movs	r0, #11
 8018cfc:	4770      	bx	lr
 8018cfe:	2304      	movs	r3, #4
 8018d00:	6033      	str	r3, [r6, #0]
 8018d02:	2f00      	cmp	r7, #0
 8018d04:	d1a2      	bne.n	8018c4c <rcl_validate_topic_name+0x4c>
 8018d06:	e7c7      	b.n	8018c98 <rcl_validate_topic_name+0x98>
 8018d08:	200b      	movs	r0, #11
 8018d0a:	e7a1      	b.n	8018c50 <rcl_validate_topic_name+0x50>
 8018d0c:	2309      	movs	r3, #9
 8018d0e:	6033      	str	r3, [r6, #0]
 8018d10:	2f00      	cmp	r7, #0
 8018d12:	d1c0      	bne.n	8018c96 <rcl_validate_topic_name+0x96>
 8018d14:	e7c0      	b.n	8018c98 <rcl_validate_topic_name+0x98>
 8018d16:	2900      	cmp	r1, #0
 8018d18:	d0ca      	beq.n	8018cb0 <rcl_validate_topic_name+0xb0>
 8018d1a:	2306      	movs	r3, #6
 8018d1c:	6033      	str	r3, [r6, #0]
 8018d1e:	2f00      	cmp	r7, #0
 8018d20:	d1b9      	bne.n	8018c96 <rcl_validate_topic_name+0x96>
 8018d22:	e7b9      	b.n	8018c98 <rcl_validate_topic_name+0x98>
 8018d24:	2c00      	cmp	r4, #0
 8018d26:	d0c3      	beq.n	8018cb0 <rcl_validate_topic_name+0xb0>
 8018d28:	2308      	movs	r3, #8
 8018d2a:	6033      	str	r3, [r6, #0]
 8018d2c:	2f00      	cmp	r7, #0
 8018d2e:	d1b2      	bne.n	8018c96 <rcl_validate_topic_name+0x96>
 8018d30:	e7b2      	b.n	8018c98 <rcl_validate_topic_name+0x98>
 8018d32:	2c00      	cmp	r4, #0
 8018d34:	d1f8      	bne.n	8018d28 <rcl_validate_topic_name+0x128>
 8018d36:	460b      	mov	r3, r1
 8018d38:	2401      	movs	r4, #1
 8018d3a:	e7b9      	b.n	8018cb0 <rcl_validate_topic_name+0xb0>
 8018d3c:	2400      	movs	r4, #0
 8018d3e:	e7b7      	b.n	8018cb0 <rcl_validate_topic_name+0xb0>
 8018d40:	2000      	movs	r0, #0
 8018d42:	6030      	str	r0, [r6, #0]
 8018d44:	e784      	b.n	8018c50 <rcl_validate_topic_name+0x50>
 8018d46:	2205      	movs	r2, #5
 8018d48:	6032      	str	r2, [r6, #0]
 8018d4a:	2f00      	cmp	r7, #0
 8018d4c:	d1d2      	bne.n	8018cf4 <rcl_validate_topic_name+0xf4>
 8018d4e:	e7a3      	b.n	8018c98 <rcl_validate_topic_name+0x98>
 8018d50:	2c00      	cmp	r4, #0
 8018d52:	bf14      	ite	ne
 8018d54:	2308      	movne	r3, #8
 8018d56:	2303      	moveq	r3, #3
 8018d58:	6033      	str	r3, [r6, #0]
 8018d5a:	2f00      	cmp	r7, #0
 8018d5c:	d19b      	bne.n	8018c96 <rcl_validate_topic_name+0x96>
 8018d5e:	e79b      	b.n	8018c98 <rcl_validate_topic_name+0x98>
 8018d60:	2301      	movs	r3, #1
 8018d62:	e00a      	b.n	8018d7a <rcl_validate_topic_name+0x17a>
 8018d64:	2c01      	cmp	r4, #1
 8018d66:	d013      	beq.n	8018d90 <rcl_validate_topic_name+0x190>
 8018d68:	4299      	cmp	r1, r3
 8018d6a:	f104 0401 	add.w	r4, r4, #1
 8018d6e:	f105 0501 	add.w	r5, r5, #1
 8018d72:	f103 0201 	add.w	r2, r3, #1
 8018d76:	d9e3      	bls.n	8018d40 <rcl_validate_topic_name+0x140>
 8018d78:	4613      	mov	r3, r2
 8018d7a:	45a0      	cmp	r8, r4
 8018d7c:	d0f4      	beq.n	8018d68 <rcl_validate_topic_name+0x168>
 8018d7e:	782a      	ldrb	r2, [r5, #0]
 8018d80:	2a2f      	cmp	r2, #47	@ 0x2f
 8018d82:	d1ef      	bne.n	8018d64 <rcl_validate_topic_name+0x164>
 8018d84:	786a      	ldrb	r2, [r5, #1]
 8018d86:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018d8a:	0752      	lsls	r2, r2, #29
 8018d8c:	d5ec      	bpl.n	8018d68 <rcl_validate_topic_name+0x168>
 8018d8e:	e7ad      	b.n	8018cec <rcl_validate_topic_name+0xec>
 8018d90:	2307      	movs	r3, #7
 8018d92:	6033      	str	r3, [r6, #0]
 8018d94:	2f00      	cmp	r7, #0
 8018d96:	f43f af7f 	beq.w	8018c98 <rcl_validate_topic_name+0x98>
 8018d9a:	603c      	str	r4, [r7, #0]
 8018d9c:	2000      	movs	r0, #0
 8018d9e:	e757      	b.n	8018c50 <rcl_validate_topic_name+0x50>
 8018da0:	0801c652 	.word	0x0801c652

08018da4 <rmw_create_guard_condition>:
 8018da4:	b538      	push	{r3, r4, r5, lr}
 8018da6:	4605      	mov	r5, r0
 8018da8:	4807      	ldr	r0, [pc, #28]	@ (8018dc8 <rmw_create_guard_condition+0x24>)
 8018daa:	f7fe fa11 	bl	80171d0 <get_memory>
 8018dae:	b148      	cbz	r0, 8018dc4 <rmw_create_guard_condition+0x20>
 8018db0:	6884      	ldr	r4, [r0, #8]
 8018db2:	2300      	movs	r3, #0
 8018db4:	7423      	strb	r3, [r4, #16]
 8018db6:	61e5      	str	r5, [r4, #28]
 8018db8:	f7fe fa72 	bl	80172a0 <rmw_get_implementation_identifier>
 8018dbc:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8018dc0:	f104 0014 	add.w	r0, r4, #20
 8018dc4:	bd38      	pop	{r3, r4, r5, pc}
 8018dc6:	bf00      	nop
 8018dc8:	2000b7fc 	.word	0x2000b7fc

08018dcc <rmw_destroy_guard_condition>:
 8018dcc:	b508      	push	{r3, lr}
 8018dce:	4b08      	ldr	r3, [pc, #32]	@ (8018df0 <rmw_destroy_guard_condition+0x24>)
 8018dd0:	6819      	ldr	r1, [r3, #0]
 8018dd2:	b911      	cbnz	r1, 8018dda <rmw_destroy_guard_condition+0xe>
 8018dd4:	e00a      	b.n	8018dec <rmw_destroy_guard_condition+0x20>
 8018dd6:	6849      	ldr	r1, [r1, #4]
 8018dd8:	b141      	cbz	r1, 8018dec <rmw_destroy_guard_condition+0x20>
 8018dda:	688b      	ldr	r3, [r1, #8]
 8018ddc:	3314      	adds	r3, #20
 8018dde:	4298      	cmp	r0, r3
 8018de0:	d1f9      	bne.n	8018dd6 <rmw_destroy_guard_condition+0xa>
 8018de2:	4803      	ldr	r0, [pc, #12]	@ (8018df0 <rmw_destroy_guard_condition+0x24>)
 8018de4:	f7fe fa04 	bl	80171f0 <put_memory>
 8018de8:	2000      	movs	r0, #0
 8018dea:	bd08      	pop	{r3, pc}
 8018dec:	2001      	movs	r0, #1
 8018dee:	bd08      	pop	{r3, pc}
 8018df0:	2000b7fc 	.word	0x2000b7fc

08018df4 <rmw_trigger_guard_condition>:
 8018df4:	b160      	cbz	r0, 8018e10 <rmw_trigger_guard_condition+0x1c>
 8018df6:	b510      	push	{r4, lr}
 8018df8:	4604      	mov	r4, r0
 8018dfa:	6800      	ldr	r0, [r0, #0]
 8018dfc:	f7f6 f978 	bl	800f0f0 <is_uxrce_rmw_identifier_valid>
 8018e00:	b908      	cbnz	r0, 8018e06 <rmw_trigger_guard_condition+0x12>
 8018e02:	2001      	movs	r0, #1
 8018e04:	bd10      	pop	{r4, pc}
 8018e06:	6863      	ldr	r3, [r4, #4]
 8018e08:	2201      	movs	r2, #1
 8018e0a:	741a      	strb	r2, [r3, #16]
 8018e0c:	2000      	movs	r0, #0
 8018e0e:	bd10      	pop	{r4, pc}
 8018e10:	2001      	movs	r0, #1
 8018e12:	4770      	bx	lr

08018e14 <rosidl_runtime_c__String__init>:
 8018e14:	b510      	push	{r4, lr}
 8018e16:	4604      	mov	r4, r0
 8018e18:	b086      	sub	sp, #24
 8018e1a:	b170      	cbz	r0, 8018e3a <rosidl_runtime_c__String__init+0x26>
 8018e1c:	a801      	add	r0, sp, #4
 8018e1e:	f7f4 fdb3 	bl	800d988 <rcutils_get_default_allocator>
 8018e22:	9b01      	ldr	r3, [sp, #4]
 8018e24:	9905      	ldr	r1, [sp, #20]
 8018e26:	2001      	movs	r0, #1
 8018e28:	4798      	blx	r3
 8018e2a:	6020      	str	r0, [r4, #0]
 8018e2c:	b128      	cbz	r0, 8018e3a <rosidl_runtime_c__String__init+0x26>
 8018e2e:	2100      	movs	r1, #0
 8018e30:	2201      	movs	r2, #1
 8018e32:	7001      	strb	r1, [r0, #0]
 8018e34:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8018e38:	4610      	mov	r0, r2
 8018e3a:	b006      	add	sp, #24
 8018e3c:	bd10      	pop	{r4, pc}
 8018e3e:	bf00      	nop

08018e40 <rosidl_runtime_c__String__fini>:
 8018e40:	b320      	cbz	r0, 8018e8c <rosidl_runtime_c__String__fini+0x4c>
 8018e42:	b510      	push	{r4, lr}
 8018e44:	6803      	ldr	r3, [r0, #0]
 8018e46:	b086      	sub	sp, #24
 8018e48:	4604      	mov	r4, r0
 8018e4a:	b173      	cbz	r3, 8018e6a <rosidl_runtime_c__String__fini+0x2a>
 8018e4c:	6883      	ldr	r3, [r0, #8]
 8018e4e:	b1f3      	cbz	r3, 8018e8e <rosidl_runtime_c__String__fini+0x4e>
 8018e50:	a801      	add	r0, sp, #4
 8018e52:	f7f4 fd99 	bl	800d988 <rcutils_get_default_allocator>
 8018e56:	9b02      	ldr	r3, [sp, #8]
 8018e58:	9905      	ldr	r1, [sp, #20]
 8018e5a:	6820      	ldr	r0, [r4, #0]
 8018e5c:	4798      	blx	r3
 8018e5e:	2300      	movs	r3, #0
 8018e60:	e9c4 3300 	strd	r3, r3, [r4]
 8018e64:	60a3      	str	r3, [r4, #8]
 8018e66:	b006      	add	sp, #24
 8018e68:	bd10      	pop	{r4, pc}
 8018e6a:	6843      	ldr	r3, [r0, #4]
 8018e6c:	b9db      	cbnz	r3, 8018ea6 <rosidl_runtime_c__String__fini+0x66>
 8018e6e:	6883      	ldr	r3, [r0, #8]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d0f8      	beq.n	8018e66 <rosidl_runtime_c__String__fini+0x26>
 8018e74:	4b12      	ldr	r3, [pc, #72]	@ (8018ec0 <rosidl_runtime_c__String__fini+0x80>)
 8018e76:	4813      	ldr	r0, [pc, #76]	@ (8018ec4 <rosidl_runtime_c__String__fini+0x84>)
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	2251      	movs	r2, #81	@ 0x51
 8018e7c:	68db      	ldr	r3, [r3, #12]
 8018e7e:	2101      	movs	r1, #1
 8018e80:	f000 fb82 	bl	8019588 <fwrite>
 8018e84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018e88:	f000 f83e 	bl	8018f08 <exit>
 8018e8c:	4770      	bx	lr
 8018e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8018ec0 <rosidl_runtime_c__String__fini+0x80>)
 8018e90:	480d      	ldr	r0, [pc, #52]	@ (8018ec8 <rosidl_runtime_c__String__fini+0x88>)
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	224c      	movs	r2, #76	@ 0x4c
 8018e96:	68db      	ldr	r3, [r3, #12]
 8018e98:	2101      	movs	r1, #1
 8018e9a:	f000 fb75 	bl	8019588 <fwrite>
 8018e9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018ea2:	f000 f831 	bl	8018f08 <exit>
 8018ea6:	4b06      	ldr	r3, [pc, #24]	@ (8018ec0 <rosidl_runtime_c__String__fini+0x80>)
 8018ea8:	4808      	ldr	r0, [pc, #32]	@ (8018ecc <rosidl_runtime_c__String__fini+0x8c>)
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	224e      	movs	r2, #78	@ 0x4e
 8018eae:	68db      	ldr	r3, [r3, #12]
 8018eb0:	2101      	movs	r1, #1
 8018eb2:	f000 fb69 	bl	8019588 <fwrite>
 8018eb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018eba:	f000 f825 	bl	8018f08 <exit>
 8018ebe:	bf00      	nop
 8018ec0:	200009c0 	.word	0x200009c0
 8018ec4:	0801c590 	.word	0x0801c590
 8018ec8:	0801c4f0 	.word	0x0801c4f0
 8018ecc:	0801c540 	.word	0x0801c540

08018ed0 <calloc>:
 8018ed0:	4b02      	ldr	r3, [pc, #8]	@ (8018edc <calloc+0xc>)
 8018ed2:	460a      	mov	r2, r1
 8018ed4:	4601      	mov	r1, r0
 8018ed6:	6818      	ldr	r0, [r3, #0]
 8018ed8:	f000 b802 	b.w	8018ee0 <_calloc_r>
 8018edc:	200009c0 	.word	0x200009c0

08018ee0 <_calloc_r>:
 8018ee0:	b570      	push	{r4, r5, r6, lr}
 8018ee2:	fba1 5402 	umull	r5, r4, r1, r2
 8018ee6:	b93c      	cbnz	r4, 8018ef8 <_calloc_r+0x18>
 8018ee8:	4629      	mov	r1, r5
 8018eea:	f000 f899 	bl	8019020 <_malloc_r>
 8018eee:	4606      	mov	r6, r0
 8018ef0:	b928      	cbnz	r0, 8018efe <_calloc_r+0x1e>
 8018ef2:	2600      	movs	r6, #0
 8018ef4:	4630      	mov	r0, r6
 8018ef6:	bd70      	pop	{r4, r5, r6, pc}
 8018ef8:	220c      	movs	r2, #12
 8018efa:	6002      	str	r2, [r0, #0]
 8018efc:	e7f9      	b.n	8018ef2 <_calloc_r+0x12>
 8018efe:	462a      	mov	r2, r5
 8018f00:	4621      	mov	r1, r4
 8018f02:	f000 fccf 	bl	80198a4 <memset>
 8018f06:	e7f5      	b.n	8018ef4 <_calloc_r+0x14>

08018f08 <exit>:
 8018f08:	b508      	push	{r3, lr}
 8018f0a:	4b06      	ldr	r3, [pc, #24]	@ (8018f24 <exit+0x1c>)
 8018f0c:	4604      	mov	r4, r0
 8018f0e:	b113      	cbz	r3, 8018f16 <exit+0xe>
 8018f10:	2100      	movs	r1, #0
 8018f12:	f3af 8000 	nop.w
 8018f16:	4b04      	ldr	r3, [pc, #16]	@ (8018f28 <exit+0x20>)
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	b103      	cbz	r3, 8018f1e <exit+0x16>
 8018f1c:	4798      	blx	r3
 8018f1e:	4620      	mov	r0, r4
 8018f20:	f7e9 f9f4 	bl	800230c <_exit>
 8018f24:	00000000 	.word	0x00000000
 8018f28:	2000bb20 	.word	0x2000bb20

08018f2c <getenv>:
 8018f2c:	b507      	push	{r0, r1, r2, lr}
 8018f2e:	4b04      	ldr	r3, [pc, #16]	@ (8018f40 <getenv+0x14>)
 8018f30:	4601      	mov	r1, r0
 8018f32:	aa01      	add	r2, sp, #4
 8018f34:	6818      	ldr	r0, [r3, #0]
 8018f36:	f000 f805 	bl	8018f44 <_findenv_r>
 8018f3a:	b003      	add	sp, #12
 8018f3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018f40:	200009c0 	.word	0x200009c0

08018f44 <_findenv_r>:
 8018f44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f48:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8018fb8 <_findenv_r+0x74>
 8018f4c:	4606      	mov	r6, r0
 8018f4e:	4689      	mov	r9, r1
 8018f50:	4617      	mov	r7, r2
 8018f52:	f000 fd9d 	bl	8019a90 <__env_lock>
 8018f56:	f8da 4000 	ldr.w	r4, [sl]
 8018f5a:	b134      	cbz	r4, 8018f6a <_findenv_r+0x26>
 8018f5c:	464b      	mov	r3, r9
 8018f5e:	4698      	mov	r8, r3
 8018f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f64:	b13a      	cbz	r2, 8018f76 <_findenv_r+0x32>
 8018f66:	2a3d      	cmp	r2, #61	@ 0x3d
 8018f68:	d1f9      	bne.n	8018f5e <_findenv_r+0x1a>
 8018f6a:	4630      	mov	r0, r6
 8018f6c:	f000 fd96 	bl	8019a9c <__env_unlock>
 8018f70:	2000      	movs	r0, #0
 8018f72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f76:	eba8 0809 	sub.w	r8, r8, r9
 8018f7a:	46a3      	mov	fp, r4
 8018f7c:	f854 0b04 	ldr.w	r0, [r4], #4
 8018f80:	2800      	cmp	r0, #0
 8018f82:	d0f2      	beq.n	8018f6a <_findenv_r+0x26>
 8018f84:	4642      	mov	r2, r8
 8018f86:	4649      	mov	r1, r9
 8018f88:	f000 fca1 	bl	80198ce <strncmp>
 8018f8c:	2800      	cmp	r0, #0
 8018f8e:	d1f4      	bne.n	8018f7a <_findenv_r+0x36>
 8018f90:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018f94:	eb03 0508 	add.w	r5, r3, r8
 8018f98:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018f9c:	2b3d      	cmp	r3, #61	@ 0x3d
 8018f9e:	d1ec      	bne.n	8018f7a <_findenv_r+0x36>
 8018fa0:	f8da 3000 	ldr.w	r3, [sl]
 8018fa4:	ebab 0303 	sub.w	r3, fp, r3
 8018fa8:	109b      	asrs	r3, r3, #2
 8018faa:	4630      	mov	r0, r6
 8018fac:	603b      	str	r3, [r7, #0]
 8018fae:	f000 fd75 	bl	8019a9c <__env_unlock>
 8018fb2:	1c68      	adds	r0, r5, #1
 8018fb4:	e7dd      	b.n	8018f72 <_findenv_r+0x2e>
 8018fb6:	bf00      	nop
 8018fb8:	20000000 	.word	0x20000000

08018fbc <malloc>:
 8018fbc:	4b02      	ldr	r3, [pc, #8]	@ (8018fc8 <malloc+0xc>)
 8018fbe:	4601      	mov	r1, r0
 8018fc0:	6818      	ldr	r0, [r3, #0]
 8018fc2:	f000 b82d 	b.w	8019020 <_malloc_r>
 8018fc6:	bf00      	nop
 8018fc8:	200009c0 	.word	0x200009c0

08018fcc <free>:
 8018fcc:	4b02      	ldr	r3, [pc, #8]	@ (8018fd8 <free+0xc>)
 8018fce:	4601      	mov	r1, r0
 8018fd0:	6818      	ldr	r0, [r3, #0]
 8018fd2:	f000 bd69 	b.w	8019aa8 <_free_r>
 8018fd6:	bf00      	nop
 8018fd8:	200009c0 	.word	0x200009c0

08018fdc <sbrk_aligned>:
 8018fdc:	b570      	push	{r4, r5, r6, lr}
 8018fde:	4e0f      	ldr	r6, [pc, #60]	@ (801901c <sbrk_aligned+0x40>)
 8018fe0:	460c      	mov	r4, r1
 8018fe2:	6831      	ldr	r1, [r6, #0]
 8018fe4:	4605      	mov	r5, r0
 8018fe6:	b911      	cbnz	r1, 8018fee <sbrk_aligned+0x12>
 8018fe8:	f000 fcce 	bl	8019988 <_sbrk_r>
 8018fec:	6030      	str	r0, [r6, #0]
 8018fee:	4621      	mov	r1, r4
 8018ff0:	4628      	mov	r0, r5
 8018ff2:	f000 fcc9 	bl	8019988 <_sbrk_r>
 8018ff6:	1c43      	adds	r3, r0, #1
 8018ff8:	d103      	bne.n	8019002 <sbrk_aligned+0x26>
 8018ffa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018ffe:	4620      	mov	r0, r4
 8019000:	bd70      	pop	{r4, r5, r6, pc}
 8019002:	1cc4      	adds	r4, r0, #3
 8019004:	f024 0403 	bic.w	r4, r4, #3
 8019008:	42a0      	cmp	r0, r4
 801900a:	d0f8      	beq.n	8018ffe <sbrk_aligned+0x22>
 801900c:	1a21      	subs	r1, r4, r0
 801900e:	4628      	mov	r0, r5
 8019010:	f000 fcba 	bl	8019988 <_sbrk_r>
 8019014:	3001      	adds	r0, #1
 8019016:	d1f2      	bne.n	8018ffe <sbrk_aligned+0x22>
 8019018:	e7ef      	b.n	8018ffa <sbrk_aligned+0x1e>
 801901a:	bf00      	nop
 801901c:	2000b9e0 	.word	0x2000b9e0

08019020 <_malloc_r>:
 8019020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019024:	1ccd      	adds	r5, r1, #3
 8019026:	f025 0503 	bic.w	r5, r5, #3
 801902a:	3508      	adds	r5, #8
 801902c:	2d0c      	cmp	r5, #12
 801902e:	bf38      	it	cc
 8019030:	250c      	movcc	r5, #12
 8019032:	2d00      	cmp	r5, #0
 8019034:	4606      	mov	r6, r0
 8019036:	db01      	blt.n	801903c <_malloc_r+0x1c>
 8019038:	42a9      	cmp	r1, r5
 801903a:	d904      	bls.n	8019046 <_malloc_r+0x26>
 801903c:	230c      	movs	r3, #12
 801903e:	6033      	str	r3, [r6, #0]
 8019040:	2000      	movs	r0, #0
 8019042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019046:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801911c <_malloc_r+0xfc>
 801904a:	f000 f869 	bl	8019120 <__malloc_lock>
 801904e:	f8d8 3000 	ldr.w	r3, [r8]
 8019052:	461c      	mov	r4, r3
 8019054:	bb44      	cbnz	r4, 80190a8 <_malloc_r+0x88>
 8019056:	4629      	mov	r1, r5
 8019058:	4630      	mov	r0, r6
 801905a:	f7ff ffbf 	bl	8018fdc <sbrk_aligned>
 801905e:	1c43      	adds	r3, r0, #1
 8019060:	4604      	mov	r4, r0
 8019062:	d158      	bne.n	8019116 <_malloc_r+0xf6>
 8019064:	f8d8 4000 	ldr.w	r4, [r8]
 8019068:	4627      	mov	r7, r4
 801906a:	2f00      	cmp	r7, #0
 801906c:	d143      	bne.n	80190f6 <_malloc_r+0xd6>
 801906e:	2c00      	cmp	r4, #0
 8019070:	d04b      	beq.n	801910a <_malloc_r+0xea>
 8019072:	6823      	ldr	r3, [r4, #0]
 8019074:	4639      	mov	r1, r7
 8019076:	4630      	mov	r0, r6
 8019078:	eb04 0903 	add.w	r9, r4, r3
 801907c:	f000 fc84 	bl	8019988 <_sbrk_r>
 8019080:	4581      	cmp	r9, r0
 8019082:	d142      	bne.n	801910a <_malloc_r+0xea>
 8019084:	6821      	ldr	r1, [r4, #0]
 8019086:	1a6d      	subs	r5, r5, r1
 8019088:	4629      	mov	r1, r5
 801908a:	4630      	mov	r0, r6
 801908c:	f7ff ffa6 	bl	8018fdc <sbrk_aligned>
 8019090:	3001      	adds	r0, #1
 8019092:	d03a      	beq.n	801910a <_malloc_r+0xea>
 8019094:	6823      	ldr	r3, [r4, #0]
 8019096:	442b      	add	r3, r5
 8019098:	6023      	str	r3, [r4, #0]
 801909a:	f8d8 3000 	ldr.w	r3, [r8]
 801909e:	685a      	ldr	r2, [r3, #4]
 80190a0:	bb62      	cbnz	r2, 80190fc <_malloc_r+0xdc>
 80190a2:	f8c8 7000 	str.w	r7, [r8]
 80190a6:	e00f      	b.n	80190c8 <_malloc_r+0xa8>
 80190a8:	6822      	ldr	r2, [r4, #0]
 80190aa:	1b52      	subs	r2, r2, r5
 80190ac:	d420      	bmi.n	80190f0 <_malloc_r+0xd0>
 80190ae:	2a0b      	cmp	r2, #11
 80190b0:	d917      	bls.n	80190e2 <_malloc_r+0xc2>
 80190b2:	1961      	adds	r1, r4, r5
 80190b4:	42a3      	cmp	r3, r4
 80190b6:	6025      	str	r5, [r4, #0]
 80190b8:	bf18      	it	ne
 80190ba:	6059      	strne	r1, [r3, #4]
 80190bc:	6863      	ldr	r3, [r4, #4]
 80190be:	bf08      	it	eq
 80190c0:	f8c8 1000 	streq.w	r1, [r8]
 80190c4:	5162      	str	r2, [r4, r5]
 80190c6:	604b      	str	r3, [r1, #4]
 80190c8:	4630      	mov	r0, r6
 80190ca:	f000 f82f 	bl	801912c <__malloc_unlock>
 80190ce:	f104 000b 	add.w	r0, r4, #11
 80190d2:	1d23      	adds	r3, r4, #4
 80190d4:	f020 0007 	bic.w	r0, r0, #7
 80190d8:	1ac2      	subs	r2, r0, r3
 80190da:	bf1c      	itt	ne
 80190dc:	1a1b      	subne	r3, r3, r0
 80190de:	50a3      	strne	r3, [r4, r2]
 80190e0:	e7af      	b.n	8019042 <_malloc_r+0x22>
 80190e2:	6862      	ldr	r2, [r4, #4]
 80190e4:	42a3      	cmp	r3, r4
 80190e6:	bf0c      	ite	eq
 80190e8:	f8c8 2000 	streq.w	r2, [r8]
 80190ec:	605a      	strne	r2, [r3, #4]
 80190ee:	e7eb      	b.n	80190c8 <_malloc_r+0xa8>
 80190f0:	4623      	mov	r3, r4
 80190f2:	6864      	ldr	r4, [r4, #4]
 80190f4:	e7ae      	b.n	8019054 <_malloc_r+0x34>
 80190f6:	463c      	mov	r4, r7
 80190f8:	687f      	ldr	r7, [r7, #4]
 80190fa:	e7b6      	b.n	801906a <_malloc_r+0x4a>
 80190fc:	461a      	mov	r2, r3
 80190fe:	685b      	ldr	r3, [r3, #4]
 8019100:	42a3      	cmp	r3, r4
 8019102:	d1fb      	bne.n	80190fc <_malloc_r+0xdc>
 8019104:	2300      	movs	r3, #0
 8019106:	6053      	str	r3, [r2, #4]
 8019108:	e7de      	b.n	80190c8 <_malloc_r+0xa8>
 801910a:	230c      	movs	r3, #12
 801910c:	6033      	str	r3, [r6, #0]
 801910e:	4630      	mov	r0, r6
 8019110:	f000 f80c 	bl	801912c <__malloc_unlock>
 8019114:	e794      	b.n	8019040 <_malloc_r+0x20>
 8019116:	6005      	str	r5, [r0, #0]
 8019118:	e7d6      	b.n	80190c8 <_malloc_r+0xa8>
 801911a:	bf00      	nop
 801911c:	2000b9e4 	.word	0x2000b9e4

08019120 <__malloc_lock>:
 8019120:	4801      	ldr	r0, [pc, #4]	@ (8019128 <__malloc_lock+0x8>)
 8019122:	f000 bc7e 	b.w	8019a22 <__retarget_lock_acquire_recursive>
 8019126:	bf00      	nop
 8019128:	2000bb29 	.word	0x2000bb29

0801912c <__malloc_unlock>:
 801912c:	4801      	ldr	r0, [pc, #4]	@ (8019134 <__malloc_unlock+0x8>)
 801912e:	f000 bc79 	b.w	8019a24 <__retarget_lock_release_recursive>
 8019132:	bf00      	nop
 8019134:	2000bb29 	.word	0x2000bb29

08019138 <srand>:
 8019138:	b538      	push	{r3, r4, r5, lr}
 801913a:	4b10      	ldr	r3, [pc, #64]	@ (801917c <srand+0x44>)
 801913c:	681d      	ldr	r5, [r3, #0]
 801913e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019140:	4604      	mov	r4, r0
 8019142:	b9b3      	cbnz	r3, 8019172 <srand+0x3a>
 8019144:	2018      	movs	r0, #24
 8019146:	f7ff ff39 	bl	8018fbc <malloc>
 801914a:	4602      	mov	r2, r0
 801914c:	6328      	str	r0, [r5, #48]	@ 0x30
 801914e:	b920      	cbnz	r0, 801915a <srand+0x22>
 8019150:	4b0b      	ldr	r3, [pc, #44]	@ (8019180 <srand+0x48>)
 8019152:	480c      	ldr	r0, [pc, #48]	@ (8019184 <srand+0x4c>)
 8019154:	2146      	movs	r1, #70	@ 0x46
 8019156:	f000 fc7d 	bl	8019a54 <__assert_func>
 801915a:	490b      	ldr	r1, [pc, #44]	@ (8019188 <srand+0x50>)
 801915c:	4b0b      	ldr	r3, [pc, #44]	@ (801918c <srand+0x54>)
 801915e:	e9c0 1300 	strd	r1, r3, [r0]
 8019162:	4b0b      	ldr	r3, [pc, #44]	@ (8019190 <srand+0x58>)
 8019164:	6083      	str	r3, [r0, #8]
 8019166:	230b      	movs	r3, #11
 8019168:	8183      	strh	r3, [r0, #12]
 801916a:	2100      	movs	r1, #0
 801916c:	2001      	movs	r0, #1
 801916e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019172:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019174:	2200      	movs	r2, #0
 8019176:	611c      	str	r4, [r3, #16]
 8019178:	615a      	str	r2, [r3, #20]
 801917a:	bd38      	pop	{r3, r4, r5, pc}
 801917c:	200009c0 	.word	0x200009c0
 8019180:	0801c5e2 	.word	0x0801c5e2
 8019184:	0801c5f9 	.word	0x0801c5f9
 8019188:	abcd330e 	.word	0xabcd330e
 801918c:	e66d1234 	.word	0xe66d1234
 8019190:	0005deec 	.word	0x0005deec

08019194 <rand>:
 8019194:	4b16      	ldr	r3, [pc, #88]	@ (80191f0 <rand+0x5c>)
 8019196:	b510      	push	{r4, lr}
 8019198:	681c      	ldr	r4, [r3, #0]
 801919a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801919c:	b9b3      	cbnz	r3, 80191cc <rand+0x38>
 801919e:	2018      	movs	r0, #24
 80191a0:	f7ff ff0c 	bl	8018fbc <malloc>
 80191a4:	4602      	mov	r2, r0
 80191a6:	6320      	str	r0, [r4, #48]	@ 0x30
 80191a8:	b920      	cbnz	r0, 80191b4 <rand+0x20>
 80191aa:	4b12      	ldr	r3, [pc, #72]	@ (80191f4 <rand+0x60>)
 80191ac:	4812      	ldr	r0, [pc, #72]	@ (80191f8 <rand+0x64>)
 80191ae:	2152      	movs	r1, #82	@ 0x52
 80191b0:	f000 fc50 	bl	8019a54 <__assert_func>
 80191b4:	4911      	ldr	r1, [pc, #68]	@ (80191fc <rand+0x68>)
 80191b6:	4b12      	ldr	r3, [pc, #72]	@ (8019200 <rand+0x6c>)
 80191b8:	e9c0 1300 	strd	r1, r3, [r0]
 80191bc:	4b11      	ldr	r3, [pc, #68]	@ (8019204 <rand+0x70>)
 80191be:	6083      	str	r3, [r0, #8]
 80191c0:	230b      	movs	r3, #11
 80191c2:	8183      	strh	r3, [r0, #12]
 80191c4:	2100      	movs	r1, #0
 80191c6:	2001      	movs	r0, #1
 80191c8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80191cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80191ce:	480e      	ldr	r0, [pc, #56]	@ (8019208 <rand+0x74>)
 80191d0:	690b      	ldr	r3, [r1, #16]
 80191d2:	694c      	ldr	r4, [r1, #20]
 80191d4:	4a0d      	ldr	r2, [pc, #52]	@ (801920c <rand+0x78>)
 80191d6:	4358      	muls	r0, r3
 80191d8:	fb02 0004 	mla	r0, r2, r4, r0
 80191dc:	fba3 3202 	umull	r3, r2, r3, r2
 80191e0:	3301      	adds	r3, #1
 80191e2:	eb40 0002 	adc.w	r0, r0, r2
 80191e6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80191ea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80191ee:	bd10      	pop	{r4, pc}
 80191f0:	200009c0 	.word	0x200009c0
 80191f4:	0801c5e2 	.word	0x0801c5e2
 80191f8:	0801c5f9 	.word	0x0801c5f9
 80191fc:	abcd330e 	.word	0xabcd330e
 8019200:	e66d1234 	.word	0xe66d1234
 8019204:	0005deec 	.word	0x0005deec
 8019208:	5851f42d 	.word	0x5851f42d
 801920c:	4c957f2d 	.word	0x4c957f2d

08019210 <realloc>:
 8019210:	4b02      	ldr	r3, [pc, #8]	@ (801921c <realloc+0xc>)
 8019212:	460a      	mov	r2, r1
 8019214:	4601      	mov	r1, r0
 8019216:	6818      	ldr	r0, [r3, #0]
 8019218:	f000 b802 	b.w	8019220 <_realloc_r>
 801921c:	200009c0 	.word	0x200009c0

08019220 <_realloc_r>:
 8019220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019224:	4680      	mov	r8, r0
 8019226:	4615      	mov	r5, r2
 8019228:	460c      	mov	r4, r1
 801922a:	b921      	cbnz	r1, 8019236 <_realloc_r+0x16>
 801922c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019230:	4611      	mov	r1, r2
 8019232:	f7ff bef5 	b.w	8019020 <_malloc_r>
 8019236:	b92a      	cbnz	r2, 8019244 <_realloc_r+0x24>
 8019238:	f000 fc36 	bl	8019aa8 <_free_r>
 801923c:	2400      	movs	r4, #0
 801923e:	4620      	mov	r0, r4
 8019240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019244:	f000 fc7a 	bl	8019b3c <_malloc_usable_size_r>
 8019248:	4285      	cmp	r5, r0
 801924a:	4606      	mov	r6, r0
 801924c:	d802      	bhi.n	8019254 <_realloc_r+0x34>
 801924e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8019252:	d8f4      	bhi.n	801923e <_realloc_r+0x1e>
 8019254:	4629      	mov	r1, r5
 8019256:	4640      	mov	r0, r8
 8019258:	f7ff fee2 	bl	8019020 <_malloc_r>
 801925c:	4607      	mov	r7, r0
 801925e:	2800      	cmp	r0, #0
 8019260:	d0ec      	beq.n	801923c <_realloc_r+0x1c>
 8019262:	42b5      	cmp	r5, r6
 8019264:	462a      	mov	r2, r5
 8019266:	4621      	mov	r1, r4
 8019268:	bf28      	it	cs
 801926a:	4632      	movcs	r2, r6
 801926c:	f000 fbe3 	bl	8019a36 <memcpy>
 8019270:	4621      	mov	r1, r4
 8019272:	4640      	mov	r0, r8
 8019274:	f000 fc18 	bl	8019aa8 <_free_r>
 8019278:	463c      	mov	r4, r7
 801927a:	e7e0      	b.n	801923e <_realloc_r+0x1e>

0801927c <_strtoul_l.constprop.0>:
 801927c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019280:	4e34      	ldr	r6, [pc, #208]	@ (8019354 <_strtoul_l.constprop.0+0xd8>)
 8019282:	4686      	mov	lr, r0
 8019284:	460d      	mov	r5, r1
 8019286:	4628      	mov	r0, r5
 8019288:	f815 4b01 	ldrb.w	r4, [r5], #1
 801928c:	5d37      	ldrb	r7, [r6, r4]
 801928e:	f017 0708 	ands.w	r7, r7, #8
 8019292:	d1f8      	bne.n	8019286 <_strtoul_l.constprop.0+0xa>
 8019294:	2c2d      	cmp	r4, #45	@ 0x2d
 8019296:	d12f      	bne.n	80192f8 <_strtoul_l.constprop.0+0x7c>
 8019298:	782c      	ldrb	r4, [r5, #0]
 801929a:	2701      	movs	r7, #1
 801929c:	1c85      	adds	r5, r0, #2
 801929e:	f033 0010 	bics.w	r0, r3, #16
 80192a2:	d109      	bne.n	80192b8 <_strtoul_l.constprop.0+0x3c>
 80192a4:	2c30      	cmp	r4, #48	@ 0x30
 80192a6:	d12c      	bne.n	8019302 <_strtoul_l.constprop.0+0x86>
 80192a8:	7828      	ldrb	r0, [r5, #0]
 80192aa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80192ae:	2858      	cmp	r0, #88	@ 0x58
 80192b0:	d127      	bne.n	8019302 <_strtoul_l.constprop.0+0x86>
 80192b2:	786c      	ldrb	r4, [r5, #1]
 80192b4:	2310      	movs	r3, #16
 80192b6:	3502      	adds	r5, #2
 80192b8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80192bc:	2600      	movs	r6, #0
 80192be:	fbb8 f8f3 	udiv	r8, r8, r3
 80192c2:	fb03 f908 	mul.w	r9, r3, r8
 80192c6:	ea6f 0909 	mvn.w	r9, r9
 80192ca:	4630      	mov	r0, r6
 80192cc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80192d0:	f1bc 0f09 	cmp.w	ip, #9
 80192d4:	d81c      	bhi.n	8019310 <_strtoul_l.constprop.0+0x94>
 80192d6:	4664      	mov	r4, ip
 80192d8:	42a3      	cmp	r3, r4
 80192da:	dd2a      	ble.n	8019332 <_strtoul_l.constprop.0+0xb6>
 80192dc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80192e0:	d007      	beq.n	80192f2 <_strtoul_l.constprop.0+0x76>
 80192e2:	4580      	cmp	r8, r0
 80192e4:	d322      	bcc.n	801932c <_strtoul_l.constprop.0+0xb0>
 80192e6:	d101      	bne.n	80192ec <_strtoul_l.constprop.0+0x70>
 80192e8:	45a1      	cmp	r9, r4
 80192ea:	db1f      	blt.n	801932c <_strtoul_l.constprop.0+0xb0>
 80192ec:	fb00 4003 	mla	r0, r0, r3, r4
 80192f0:	2601      	movs	r6, #1
 80192f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80192f6:	e7e9      	b.n	80192cc <_strtoul_l.constprop.0+0x50>
 80192f8:	2c2b      	cmp	r4, #43	@ 0x2b
 80192fa:	bf04      	itt	eq
 80192fc:	782c      	ldrbeq	r4, [r5, #0]
 80192fe:	1c85      	addeq	r5, r0, #2
 8019300:	e7cd      	b.n	801929e <_strtoul_l.constprop.0+0x22>
 8019302:	2b00      	cmp	r3, #0
 8019304:	d1d8      	bne.n	80192b8 <_strtoul_l.constprop.0+0x3c>
 8019306:	2c30      	cmp	r4, #48	@ 0x30
 8019308:	bf0c      	ite	eq
 801930a:	2308      	moveq	r3, #8
 801930c:	230a      	movne	r3, #10
 801930e:	e7d3      	b.n	80192b8 <_strtoul_l.constprop.0+0x3c>
 8019310:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019314:	f1bc 0f19 	cmp.w	ip, #25
 8019318:	d801      	bhi.n	801931e <_strtoul_l.constprop.0+0xa2>
 801931a:	3c37      	subs	r4, #55	@ 0x37
 801931c:	e7dc      	b.n	80192d8 <_strtoul_l.constprop.0+0x5c>
 801931e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019322:	f1bc 0f19 	cmp.w	ip, #25
 8019326:	d804      	bhi.n	8019332 <_strtoul_l.constprop.0+0xb6>
 8019328:	3c57      	subs	r4, #87	@ 0x57
 801932a:	e7d5      	b.n	80192d8 <_strtoul_l.constprop.0+0x5c>
 801932c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8019330:	e7df      	b.n	80192f2 <_strtoul_l.constprop.0+0x76>
 8019332:	1c73      	adds	r3, r6, #1
 8019334:	d106      	bne.n	8019344 <_strtoul_l.constprop.0+0xc8>
 8019336:	2322      	movs	r3, #34	@ 0x22
 8019338:	f8ce 3000 	str.w	r3, [lr]
 801933c:	4630      	mov	r0, r6
 801933e:	b932      	cbnz	r2, 801934e <_strtoul_l.constprop.0+0xd2>
 8019340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019344:	b107      	cbz	r7, 8019348 <_strtoul_l.constprop.0+0xcc>
 8019346:	4240      	negs	r0, r0
 8019348:	2a00      	cmp	r2, #0
 801934a:	d0f9      	beq.n	8019340 <_strtoul_l.constprop.0+0xc4>
 801934c:	b106      	cbz	r6, 8019350 <_strtoul_l.constprop.0+0xd4>
 801934e:	1e69      	subs	r1, r5, #1
 8019350:	6011      	str	r1, [r2, #0]
 8019352:	e7f5      	b.n	8019340 <_strtoul_l.constprop.0+0xc4>
 8019354:	0801c652 	.word	0x0801c652

08019358 <strtoul>:
 8019358:	4613      	mov	r3, r2
 801935a:	460a      	mov	r2, r1
 801935c:	4601      	mov	r1, r0
 801935e:	4802      	ldr	r0, [pc, #8]	@ (8019368 <strtoul+0x10>)
 8019360:	6800      	ldr	r0, [r0, #0]
 8019362:	f7ff bf8b 	b.w	801927c <_strtoul_l.constprop.0>
 8019366:	bf00      	nop
 8019368:	200009c0 	.word	0x200009c0

0801936c <std>:
 801936c:	2300      	movs	r3, #0
 801936e:	b510      	push	{r4, lr}
 8019370:	4604      	mov	r4, r0
 8019372:	e9c0 3300 	strd	r3, r3, [r0]
 8019376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801937a:	6083      	str	r3, [r0, #8]
 801937c:	8181      	strh	r1, [r0, #12]
 801937e:	6643      	str	r3, [r0, #100]	@ 0x64
 8019380:	81c2      	strh	r2, [r0, #14]
 8019382:	6183      	str	r3, [r0, #24]
 8019384:	4619      	mov	r1, r3
 8019386:	2208      	movs	r2, #8
 8019388:	305c      	adds	r0, #92	@ 0x5c
 801938a:	f000 fa8b 	bl	80198a4 <memset>
 801938e:	4b0d      	ldr	r3, [pc, #52]	@ (80193c4 <std+0x58>)
 8019390:	6263      	str	r3, [r4, #36]	@ 0x24
 8019392:	4b0d      	ldr	r3, [pc, #52]	@ (80193c8 <std+0x5c>)
 8019394:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019396:	4b0d      	ldr	r3, [pc, #52]	@ (80193cc <std+0x60>)
 8019398:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801939a:	4b0d      	ldr	r3, [pc, #52]	@ (80193d0 <std+0x64>)
 801939c:	6323      	str	r3, [r4, #48]	@ 0x30
 801939e:	4b0d      	ldr	r3, [pc, #52]	@ (80193d4 <std+0x68>)
 80193a0:	6224      	str	r4, [r4, #32]
 80193a2:	429c      	cmp	r4, r3
 80193a4:	d006      	beq.n	80193b4 <std+0x48>
 80193a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80193aa:	4294      	cmp	r4, r2
 80193ac:	d002      	beq.n	80193b4 <std+0x48>
 80193ae:	33d0      	adds	r3, #208	@ 0xd0
 80193b0:	429c      	cmp	r4, r3
 80193b2:	d105      	bne.n	80193c0 <std+0x54>
 80193b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80193b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193bc:	f000 bb30 	b.w	8019a20 <__retarget_lock_init_recursive>
 80193c0:	bd10      	pop	{r4, pc}
 80193c2:	bf00      	nop
 80193c4:	08019631 	.word	0x08019631
 80193c8:	08019653 	.word	0x08019653
 80193cc:	0801968b 	.word	0x0801968b
 80193d0:	080196af 	.word	0x080196af
 80193d4:	2000b9e8 	.word	0x2000b9e8

080193d8 <stdio_exit_handler>:
 80193d8:	4a02      	ldr	r2, [pc, #8]	@ (80193e4 <stdio_exit_handler+0xc>)
 80193da:	4903      	ldr	r1, [pc, #12]	@ (80193e8 <stdio_exit_handler+0x10>)
 80193dc:	4803      	ldr	r0, [pc, #12]	@ (80193ec <stdio_exit_handler+0x14>)
 80193de:	f000 b869 	b.w	80194b4 <_fwalk_sglue>
 80193e2:	bf00      	nop
 80193e4:	200009b4 	.word	0x200009b4
 80193e8:	0801a4a5 	.word	0x0801a4a5
 80193ec:	200009c4 	.word	0x200009c4

080193f0 <cleanup_stdio>:
 80193f0:	6841      	ldr	r1, [r0, #4]
 80193f2:	4b0c      	ldr	r3, [pc, #48]	@ (8019424 <cleanup_stdio+0x34>)
 80193f4:	4299      	cmp	r1, r3
 80193f6:	b510      	push	{r4, lr}
 80193f8:	4604      	mov	r4, r0
 80193fa:	d001      	beq.n	8019400 <cleanup_stdio+0x10>
 80193fc:	f001 f852 	bl	801a4a4 <_fflush_r>
 8019400:	68a1      	ldr	r1, [r4, #8]
 8019402:	4b09      	ldr	r3, [pc, #36]	@ (8019428 <cleanup_stdio+0x38>)
 8019404:	4299      	cmp	r1, r3
 8019406:	d002      	beq.n	801940e <cleanup_stdio+0x1e>
 8019408:	4620      	mov	r0, r4
 801940a:	f001 f84b 	bl	801a4a4 <_fflush_r>
 801940e:	68e1      	ldr	r1, [r4, #12]
 8019410:	4b06      	ldr	r3, [pc, #24]	@ (801942c <cleanup_stdio+0x3c>)
 8019412:	4299      	cmp	r1, r3
 8019414:	d004      	beq.n	8019420 <cleanup_stdio+0x30>
 8019416:	4620      	mov	r0, r4
 8019418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801941c:	f001 b842 	b.w	801a4a4 <_fflush_r>
 8019420:	bd10      	pop	{r4, pc}
 8019422:	bf00      	nop
 8019424:	2000b9e8 	.word	0x2000b9e8
 8019428:	2000ba50 	.word	0x2000ba50
 801942c:	2000bab8 	.word	0x2000bab8

08019430 <global_stdio_init.part.0>:
 8019430:	b510      	push	{r4, lr}
 8019432:	4b0b      	ldr	r3, [pc, #44]	@ (8019460 <global_stdio_init.part.0+0x30>)
 8019434:	4c0b      	ldr	r4, [pc, #44]	@ (8019464 <global_stdio_init.part.0+0x34>)
 8019436:	4a0c      	ldr	r2, [pc, #48]	@ (8019468 <global_stdio_init.part.0+0x38>)
 8019438:	601a      	str	r2, [r3, #0]
 801943a:	4620      	mov	r0, r4
 801943c:	2200      	movs	r2, #0
 801943e:	2104      	movs	r1, #4
 8019440:	f7ff ff94 	bl	801936c <std>
 8019444:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019448:	2201      	movs	r2, #1
 801944a:	2109      	movs	r1, #9
 801944c:	f7ff ff8e 	bl	801936c <std>
 8019450:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019454:	2202      	movs	r2, #2
 8019456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801945a:	2112      	movs	r1, #18
 801945c:	f7ff bf86 	b.w	801936c <std>
 8019460:	2000bb20 	.word	0x2000bb20
 8019464:	2000b9e8 	.word	0x2000b9e8
 8019468:	080193d9 	.word	0x080193d9

0801946c <__sfp_lock_acquire>:
 801946c:	4801      	ldr	r0, [pc, #4]	@ (8019474 <__sfp_lock_acquire+0x8>)
 801946e:	f000 bad8 	b.w	8019a22 <__retarget_lock_acquire_recursive>
 8019472:	bf00      	nop
 8019474:	2000bb2a 	.word	0x2000bb2a

08019478 <__sfp_lock_release>:
 8019478:	4801      	ldr	r0, [pc, #4]	@ (8019480 <__sfp_lock_release+0x8>)
 801947a:	f000 bad3 	b.w	8019a24 <__retarget_lock_release_recursive>
 801947e:	bf00      	nop
 8019480:	2000bb2a 	.word	0x2000bb2a

08019484 <__sinit>:
 8019484:	b510      	push	{r4, lr}
 8019486:	4604      	mov	r4, r0
 8019488:	f7ff fff0 	bl	801946c <__sfp_lock_acquire>
 801948c:	6a23      	ldr	r3, [r4, #32]
 801948e:	b11b      	cbz	r3, 8019498 <__sinit+0x14>
 8019490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019494:	f7ff bff0 	b.w	8019478 <__sfp_lock_release>
 8019498:	4b04      	ldr	r3, [pc, #16]	@ (80194ac <__sinit+0x28>)
 801949a:	6223      	str	r3, [r4, #32]
 801949c:	4b04      	ldr	r3, [pc, #16]	@ (80194b0 <__sinit+0x2c>)
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d1f5      	bne.n	8019490 <__sinit+0xc>
 80194a4:	f7ff ffc4 	bl	8019430 <global_stdio_init.part.0>
 80194a8:	e7f2      	b.n	8019490 <__sinit+0xc>
 80194aa:	bf00      	nop
 80194ac:	080193f1 	.word	0x080193f1
 80194b0:	2000bb20 	.word	0x2000bb20

080194b4 <_fwalk_sglue>:
 80194b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80194b8:	4607      	mov	r7, r0
 80194ba:	4688      	mov	r8, r1
 80194bc:	4614      	mov	r4, r2
 80194be:	2600      	movs	r6, #0
 80194c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80194c4:	f1b9 0901 	subs.w	r9, r9, #1
 80194c8:	d505      	bpl.n	80194d6 <_fwalk_sglue+0x22>
 80194ca:	6824      	ldr	r4, [r4, #0]
 80194cc:	2c00      	cmp	r4, #0
 80194ce:	d1f7      	bne.n	80194c0 <_fwalk_sglue+0xc>
 80194d0:	4630      	mov	r0, r6
 80194d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80194d6:	89ab      	ldrh	r3, [r5, #12]
 80194d8:	2b01      	cmp	r3, #1
 80194da:	d907      	bls.n	80194ec <_fwalk_sglue+0x38>
 80194dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80194e0:	3301      	adds	r3, #1
 80194e2:	d003      	beq.n	80194ec <_fwalk_sglue+0x38>
 80194e4:	4629      	mov	r1, r5
 80194e6:	4638      	mov	r0, r7
 80194e8:	47c0      	blx	r8
 80194ea:	4306      	orrs	r6, r0
 80194ec:	3568      	adds	r5, #104	@ 0x68
 80194ee:	e7e9      	b.n	80194c4 <_fwalk_sglue+0x10>

080194f0 <_fwrite_r>:
 80194f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80194f4:	9c08      	ldr	r4, [sp, #32]
 80194f6:	468a      	mov	sl, r1
 80194f8:	4690      	mov	r8, r2
 80194fa:	fb02 f903 	mul.w	r9, r2, r3
 80194fe:	4606      	mov	r6, r0
 8019500:	b118      	cbz	r0, 801950a <_fwrite_r+0x1a>
 8019502:	6a03      	ldr	r3, [r0, #32]
 8019504:	b90b      	cbnz	r3, 801950a <_fwrite_r+0x1a>
 8019506:	f7ff ffbd 	bl	8019484 <__sinit>
 801950a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801950c:	07dd      	lsls	r5, r3, #31
 801950e:	d405      	bmi.n	801951c <_fwrite_r+0x2c>
 8019510:	89a3      	ldrh	r3, [r4, #12]
 8019512:	0598      	lsls	r0, r3, #22
 8019514:	d402      	bmi.n	801951c <_fwrite_r+0x2c>
 8019516:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019518:	f000 fa83 	bl	8019a22 <__retarget_lock_acquire_recursive>
 801951c:	89a3      	ldrh	r3, [r4, #12]
 801951e:	0719      	lsls	r1, r3, #28
 8019520:	d516      	bpl.n	8019550 <_fwrite_r+0x60>
 8019522:	6923      	ldr	r3, [r4, #16]
 8019524:	b1a3      	cbz	r3, 8019550 <_fwrite_r+0x60>
 8019526:	2500      	movs	r5, #0
 8019528:	454d      	cmp	r5, r9
 801952a:	d01f      	beq.n	801956c <_fwrite_r+0x7c>
 801952c:	68a7      	ldr	r7, [r4, #8]
 801952e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8019532:	3f01      	subs	r7, #1
 8019534:	2f00      	cmp	r7, #0
 8019536:	60a7      	str	r7, [r4, #8]
 8019538:	da04      	bge.n	8019544 <_fwrite_r+0x54>
 801953a:	69a3      	ldr	r3, [r4, #24]
 801953c:	429f      	cmp	r7, r3
 801953e:	db0f      	blt.n	8019560 <_fwrite_r+0x70>
 8019540:	290a      	cmp	r1, #10
 8019542:	d00d      	beq.n	8019560 <_fwrite_r+0x70>
 8019544:	6823      	ldr	r3, [r4, #0]
 8019546:	1c5a      	adds	r2, r3, #1
 8019548:	6022      	str	r2, [r4, #0]
 801954a:	7019      	strb	r1, [r3, #0]
 801954c:	3501      	adds	r5, #1
 801954e:	e7eb      	b.n	8019528 <_fwrite_r+0x38>
 8019550:	4621      	mov	r1, r4
 8019552:	4630      	mov	r0, r6
 8019554:	f000 f926 	bl	80197a4 <__swsetup_r>
 8019558:	2800      	cmp	r0, #0
 801955a:	d0e4      	beq.n	8019526 <_fwrite_r+0x36>
 801955c:	2500      	movs	r5, #0
 801955e:	e005      	b.n	801956c <_fwrite_r+0x7c>
 8019560:	4622      	mov	r2, r4
 8019562:	4630      	mov	r0, r6
 8019564:	f000 f8e0 	bl	8019728 <__swbuf_r>
 8019568:	3001      	adds	r0, #1
 801956a:	d1ef      	bne.n	801954c <_fwrite_r+0x5c>
 801956c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801956e:	07da      	lsls	r2, r3, #31
 8019570:	d405      	bmi.n	801957e <_fwrite_r+0x8e>
 8019572:	89a3      	ldrh	r3, [r4, #12]
 8019574:	059b      	lsls	r3, r3, #22
 8019576:	d402      	bmi.n	801957e <_fwrite_r+0x8e>
 8019578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801957a:	f000 fa53 	bl	8019a24 <__retarget_lock_release_recursive>
 801957e:	fbb5 f0f8 	udiv	r0, r5, r8
 8019582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08019588 <fwrite>:
 8019588:	b507      	push	{r0, r1, r2, lr}
 801958a:	9300      	str	r3, [sp, #0]
 801958c:	4613      	mov	r3, r2
 801958e:	460a      	mov	r2, r1
 8019590:	4601      	mov	r1, r0
 8019592:	4803      	ldr	r0, [pc, #12]	@ (80195a0 <fwrite+0x18>)
 8019594:	6800      	ldr	r0, [r0, #0]
 8019596:	f7ff ffab 	bl	80194f0 <_fwrite_r>
 801959a:	b003      	add	sp, #12
 801959c:	f85d fb04 	ldr.w	pc, [sp], #4
 80195a0:	200009c0 	.word	0x200009c0

080195a4 <iprintf>:
 80195a4:	b40f      	push	{r0, r1, r2, r3}
 80195a6:	b507      	push	{r0, r1, r2, lr}
 80195a8:	4906      	ldr	r1, [pc, #24]	@ (80195c4 <iprintf+0x20>)
 80195aa:	ab04      	add	r3, sp, #16
 80195ac:	6808      	ldr	r0, [r1, #0]
 80195ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80195b2:	6881      	ldr	r1, [r0, #8]
 80195b4:	9301      	str	r3, [sp, #4]
 80195b6:	f000 fc4b 	bl	8019e50 <_vfiprintf_r>
 80195ba:	b003      	add	sp, #12
 80195bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80195c0:	b004      	add	sp, #16
 80195c2:	4770      	bx	lr
 80195c4:	200009c0 	.word	0x200009c0

080195c8 <sniprintf>:
 80195c8:	b40c      	push	{r2, r3}
 80195ca:	b530      	push	{r4, r5, lr}
 80195cc:	4b17      	ldr	r3, [pc, #92]	@ (801962c <sniprintf+0x64>)
 80195ce:	1e0c      	subs	r4, r1, #0
 80195d0:	681d      	ldr	r5, [r3, #0]
 80195d2:	b09d      	sub	sp, #116	@ 0x74
 80195d4:	da08      	bge.n	80195e8 <sniprintf+0x20>
 80195d6:	238b      	movs	r3, #139	@ 0x8b
 80195d8:	602b      	str	r3, [r5, #0]
 80195da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80195de:	b01d      	add	sp, #116	@ 0x74
 80195e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80195e4:	b002      	add	sp, #8
 80195e6:	4770      	bx	lr
 80195e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80195ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80195f0:	bf14      	ite	ne
 80195f2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80195f6:	4623      	moveq	r3, r4
 80195f8:	9304      	str	r3, [sp, #16]
 80195fa:	9307      	str	r3, [sp, #28]
 80195fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019600:	9002      	str	r0, [sp, #8]
 8019602:	9006      	str	r0, [sp, #24]
 8019604:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019608:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801960a:	ab21      	add	r3, sp, #132	@ 0x84
 801960c:	a902      	add	r1, sp, #8
 801960e:	4628      	mov	r0, r5
 8019610:	9301      	str	r3, [sp, #4]
 8019612:	f000 faf7 	bl	8019c04 <_svfiprintf_r>
 8019616:	1c43      	adds	r3, r0, #1
 8019618:	bfbc      	itt	lt
 801961a:	238b      	movlt	r3, #139	@ 0x8b
 801961c:	602b      	strlt	r3, [r5, #0]
 801961e:	2c00      	cmp	r4, #0
 8019620:	d0dd      	beq.n	80195de <sniprintf+0x16>
 8019622:	9b02      	ldr	r3, [sp, #8]
 8019624:	2200      	movs	r2, #0
 8019626:	701a      	strb	r2, [r3, #0]
 8019628:	e7d9      	b.n	80195de <sniprintf+0x16>
 801962a:	bf00      	nop
 801962c:	200009c0 	.word	0x200009c0

08019630 <__sread>:
 8019630:	b510      	push	{r4, lr}
 8019632:	460c      	mov	r4, r1
 8019634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019638:	f000 f994 	bl	8019964 <_read_r>
 801963c:	2800      	cmp	r0, #0
 801963e:	bfab      	itete	ge
 8019640:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019642:	89a3      	ldrhlt	r3, [r4, #12]
 8019644:	181b      	addge	r3, r3, r0
 8019646:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801964a:	bfac      	ite	ge
 801964c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801964e:	81a3      	strhlt	r3, [r4, #12]
 8019650:	bd10      	pop	{r4, pc}

08019652 <__swrite>:
 8019652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019656:	461f      	mov	r7, r3
 8019658:	898b      	ldrh	r3, [r1, #12]
 801965a:	05db      	lsls	r3, r3, #23
 801965c:	4605      	mov	r5, r0
 801965e:	460c      	mov	r4, r1
 8019660:	4616      	mov	r6, r2
 8019662:	d505      	bpl.n	8019670 <__swrite+0x1e>
 8019664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019668:	2302      	movs	r3, #2
 801966a:	2200      	movs	r2, #0
 801966c:	f000 f968 	bl	8019940 <_lseek_r>
 8019670:	89a3      	ldrh	r3, [r4, #12]
 8019672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019676:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801967a:	81a3      	strh	r3, [r4, #12]
 801967c:	4632      	mov	r2, r6
 801967e:	463b      	mov	r3, r7
 8019680:	4628      	mov	r0, r5
 8019682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019686:	f000 b98f 	b.w	80199a8 <_write_r>

0801968a <__sseek>:
 801968a:	b510      	push	{r4, lr}
 801968c:	460c      	mov	r4, r1
 801968e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019692:	f000 f955 	bl	8019940 <_lseek_r>
 8019696:	1c43      	adds	r3, r0, #1
 8019698:	89a3      	ldrh	r3, [r4, #12]
 801969a:	bf15      	itete	ne
 801969c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801969e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80196a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80196a6:	81a3      	strheq	r3, [r4, #12]
 80196a8:	bf18      	it	ne
 80196aa:	81a3      	strhne	r3, [r4, #12]
 80196ac:	bd10      	pop	{r4, pc}

080196ae <__sclose>:
 80196ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196b2:	f000 b935 	b.w	8019920 <_close_r>

080196b6 <_vsniprintf_r>:
 80196b6:	b530      	push	{r4, r5, lr}
 80196b8:	4614      	mov	r4, r2
 80196ba:	2c00      	cmp	r4, #0
 80196bc:	b09b      	sub	sp, #108	@ 0x6c
 80196be:	4605      	mov	r5, r0
 80196c0:	461a      	mov	r2, r3
 80196c2:	da05      	bge.n	80196d0 <_vsniprintf_r+0x1a>
 80196c4:	238b      	movs	r3, #139	@ 0x8b
 80196c6:	6003      	str	r3, [r0, #0]
 80196c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80196cc:	b01b      	add	sp, #108	@ 0x6c
 80196ce:	bd30      	pop	{r4, r5, pc}
 80196d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80196d4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80196d8:	bf14      	ite	ne
 80196da:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80196de:	4623      	moveq	r3, r4
 80196e0:	9302      	str	r3, [sp, #8]
 80196e2:	9305      	str	r3, [sp, #20]
 80196e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80196e8:	9100      	str	r1, [sp, #0]
 80196ea:	9104      	str	r1, [sp, #16]
 80196ec:	f8ad 300e 	strh.w	r3, [sp, #14]
 80196f0:	4669      	mov	r1, sp
 80196f2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80196f4:	f000 fa86 	bl	8019c04 <_svfiprintf_r>
 80196f8:	1c43      	adds	r3, r0, #1
 80196fa:	bfbc      	itt	lt
 80196fc:	238b      	movlt	r3, #139	@ 0x8b
 80196fe:	602b      	strlt	r3, [r5, #0]
 8019700:	2c00      	cmp	r4, #0
 8019702:	d0e3      	beq.n	80196cc <_vsniprintf_r+0x16>
 8019704:	9b00      	ldr	r3, [sp, #0]
 8019706:	2200      	movs	r2, #0
 8019708:	701a      	strb	r2, [r3, #0]
 801970a:	e7df      	b.n	80196cc <_vsniprintf_r+0x16>

0801970c <vsniprintf>:
 801970c:	b507      	push	{r0, r1, r2, lr}
 801970e:	9300      	str	r3, [sp, #0]
 8019710:	4613      	mov	r3, r2
 8019712:	460a      	mov	r2, r1
 8019714:	4601      	mov	r1, r0
 8019716:	4803      	ldr	r0, [pc, #12]	@ (8019724 <vsniprintf+0x18>)
 8019718:	6800      	ldr	r0, [r0, #0]
 801971a:	f7ff ffcc 	bl	80196b6 <_vsniprintf_r>
 801971e:	b003      	add	sp, #12
 8019720:	f85d fb04 	ldr.w	pc, [sp], #4
 8019724:	200009c0 	.word	0x200009c0

08019728 <__swbuf_r>:
 8019728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801972a:	460e      	mov	r6, r1
 801972c:	4614      	mov	r4, r2
 801972e:	4605      	mov	r5, r0
 8019730:	b118      	cbz	r0, 801973a <__swbuf_r+0x12>
 8019732:	6a03      	ldr	r3, [r0, #32]
 8019734:	b90b      	cbnz	r3, 801973a <__swbuf_r+0x12>
 8019736:	f7ff fea5 	bl	8019484 <__sinit>
 801973a:	69a3      	ldr	r3, [r4, #24]
 801973c:	60a3      	str	r3, [r4, #8]
 801973e:	89a3      	ldrh	r3, [r4, #12]
 8019740:	071a      	lsls	r2, r3, #28
 8019742:	d501      	bpl.n	8019748 <__swbuf_r+0x20>
 8019744:	6923      	ldr	r3, [r4, #16]
 8019746:	b943      	cbnz	r3, 801975a <__swbuf_r+0x32>
 8019748:	4621      	mov	r1, r4
 801974a:	4628      	mov	r0, r5
 801974c:	f000 f82a 	bl	80197a4 <__swsetup_r>
 8019750:	b118      	cbz	r0, 801975a <__swbuf_r+0x32>
 8019752:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019756:	4638      	mov	r0, r7
 8019758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801975a:	6823      	ldr	r3, [r4, #0]
 801975c:	6922      	ldr	r2, [r4, #16]
 801975e:	1a98      	subs	r0, r3, r2
 8019760:	6963      	ldr	r3, [r4, #20]
 8019762:	b2f6      	uxtb	r6, r6
 8019764:	4283      	cmp	r3, r0
 8019766:	4637      	mov	r7, r6
 8019768:	dc05      	bgt.n	8019776 <__swbuf_r+0x4e>
 801976a:	4621      	mov	r1, r4
 801976c:	4628      	mov	r0, r5
 801976e:	f000 fe99 	bl	801a4a4 <_fflush_r>
 8019772:	2800      	cmp	r0, #0
 8019774:	d1ed      	bne.n	8019752 <__swbuf_r+0x2a>
 8019776:	68a3      	ldr	r3, [r4, #8]
 8019778:	3b01      	subs	r3, #1
 801977a:	60a3      	str	r3, [r4, #8]
 801977c:	6823      	ldr	r3, [r4, #0]
 801977e:	1c5a      	adds	r2, r3, #1
 8019780:	6022      	str	r2, [r4, #0]
 8019782:	701e      	strb	r6, [r3, #0]
 8019784:	6962      	ldr	r2, [r4, #20]
 8019786:	1c43      	adds	r3, r0, #1
 8019788:	429a      	cmp	r2, r3
 801978a:	d004      	beq.n	8019796 <__swbuf_r+0x6e>
 801978c:	89a3      	ldrh	r3, [r4, #12]
 801978e:	07db      	lsls	r3, r3, #31
 8019790:	d5e1      	bpl.n	8019756 <__swbuf_r+0x2e>
 8019792:	2e0a      	cmp	r6, #10
 8019794:	d1df      	bne.n	8019756 <__swbuf_r+0x2e>
 8019796:	4621      	mov	r1, r4
 8019798:	4628      	mov	r0, r5
 801979a:	f000 fe83 	bl	801a4a4 <_fflush_r>
 801979e:	2800      	cmp	r0, #0
 80197a0:	d0d9      	beq.n	8019756 <__swbuf_r+0x2e>
 80197a2:	e7d6      	b.n	8019752 <__swbuf_r+0x2a>

080197a4 <__swsetup_r>:
 80197a4:	b538      	push	{r3, r4, r5, lr}
 80197a6:	4b29      	ldr	r3, [pc, #164]	@ (801984c <__swsetup_r+0xa8>)
 80197a8:	4605      	mov	r5, r0
 80197aa:	6818      	ldr	r0, [r3, #0]
 80197ac:	460c      	mov	r4, r1
 80197ae:	b118      	cbz	r0, 80197b8 <__swsetup_r+0x14>
 80197b0:	6a03      	ldr	r3, [r0, #32]
 80197b2:	b90b      	cbnz	r3, 80197b8 <__swsetup_r+0x14>
 80197b4:	f7ff fe66 	bl	8019484 <__sinit>
 80197b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80197bc:	0719      	lsls	r1, r3, #28
 80197be:	d422      	bmi.n	8019806 <__swsetup_r+0x62>
 80197c0:	06da      	lsls	r2, r3, #27
 80197c2:	d407      	bmi.n	80197d4 <__swsetup_r+0x30>
 80197c4:	2209      	movs	r2, #9
 80197c6:	602a      	str	r2, [r5, #0]
 80197c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80197cc:	81a3      	strh	r3, [r4, #12]
 80197ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80197d2:	e033      	b.n	801983c <__swsetup_r+0x98>
 80197d4:	0758      	lsls	r0, r3, #29
 80197d6:	d512      	bpl.n	80197fe <__swsetup_r+0x5a>
 80197d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80197da:	b141      	cbz	r1, 80197ee <__swsetup_r+0x4a>
 80197dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80197e0:	4299      	cmp	r1, r3
 80197e2:	d002      	beq.n	80197ea <__swsetup_r+0x46>
 80197e4:	4628      	mov	r0, r5
 80197e6:	f000 f95f 	bl	8019aa8 <_free_r>
 80197ea:	2300      	movs	r3, #0
 80197ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80197ee:	89a3      	ldrh	r3, [r4, #12]
 80197f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80197f4:	81a3      	strh	r3, [r4, #12]
 80197f6:	2300      	movs	r3, #0
 80197f8:	6063      	str	r3, [r4, #4]
 80197fa:	6923      	ldr	r3, [r4, #16]
 80197fc:	6023      	str	r3, [r4, #0]
 80197fe:	89a3      	ldrh	r3, [r4, #12]
 8019800:	f043 0308 	orr.w	r3, r3, #8
 8019804:	81a3      	strh	r3, [r4, #12]
 8019806:	6923      	ldr	r3, [r4, #16]
 8019808:	b94b      	cbnz	r3, 801981e <__swsetup_r+0x7a>
 801980a:	89a3      	ldrh	r3, [r4, #12]
 801980c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019814:	d003      	beq.n	801981e <__swsetup_r+0x7a>
 8019816:	4621      	mov	r1, r4
 8019818:	4628      	mov	r0, r5
 801981a:	f000 fea3 	bl	801a564 <__smakebuf_r>
 801981e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019822:	f013 0201 	ands.w	r2, r3, #1
 8019826:	d00a      	beq.n	801983e <__swsetup_r+0x9a>
 8019828:	2200      	movs	r2, #0
 801982a:	60a2      	str	r2, [r4, #8]
 801982c:	6962      	ldr	r2, [r4, #20]
 801982e:	4252      	negs	r2, r2
 8019830:	61a2      	str	r2, [r4, #24]
 8019832:	6922      	ldr	r2, [r4, #16]
 8019834:	b942      	cbnz	r2, 8019848 <__swsetup_r+0xa4>
 8019836:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801983a:	d1c5      	bne.n	80197c8 <__swsetup_r+0x24>
 801983c:	bd38      	pop	{r3, r4, r5, pc}
 801983e:	0799      	lsls	r1, r3, #30
 8019840:	bf58      	it	pl
 8019842:	6962      	ldrpl	r2, [r4, #20]
 8019844:	60a2      	str	r2, [r4, #8]
 8019846:	e7f4      	b.n	8019832 <__swsetup_r+0x8e>
 8019848:	2000      	movs	r0, #0
 801984a:	e7f7      	b.n	801983c <__swsetup_r+0x98>
 801984c:	200009c0 	.word	0x200009c0

08019850 <memcmp>:
 8019850:	b510      	push	{r4, lr}
 8019852:	3901      	subs	r1, #1
 8019854:	4402      	add	r2, r0
 8019856:	4290      	cmp	r0, r2
 8019858:	d101      	bne.n	801985e <memcmp+0xe>
 801985a:	2000      	movs	r0, #0
 801985c:	e005      	b.n	801986a <memcmp+0x1a>
 801985e:	7803      	ldrb	r3, [r0, #0]
 8019860:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019864:	42a3      	cmp	r3, r4
 8019866:	d001      	beq.n	801986c <memcmp+0x1c>
 8019868:	1b18      	subs	r0, r3, r4
 801986a:	bd10      	pop	{r4, pc}
 801986c:	3001      	adds	r0, #1
 801986e:	e7f2      	b.n	8019856 <memcmp+0x6>

08019870 <memmove>:
 8019870:	4288      	cmp	r0, r1
 8019872:	b510      	push	{r4, lr}
 8019874:	eb01 0402 	add.w	r4, r1, r2
 8019878:	d902      	bls.n	8019880 <memmove+0x10>
 801987a:	4284      	cmp	r4, r0
 801987c:	4623      	mov	r3, r4
 801987e:	d807      	bhi.n	8019890 <memmove+0x20>
 8019880:	1e43      	subs	r3, r0, #1
 8019882:	42a1      	cmp	r1, r4
 8019884:	d008      	beq.n	8019898 <memmove+0x28>
 8019886:	f811 2b01 	ldrb.w	r2, [r1], #1
 801988a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801988e:	e7f8      	b.n	8019882 <memmove+0x12>
 8019890:	4402      	add	r2, r0
 8019892:	4601      	mov	r1, r0
 8019894:	428a      	cmp	r2, r1
 8019896:	d100      	bne.n	801989a <memmove+0x2a>
 8019898:	bd10      	pop	{r4, pc}
 801989a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801989e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80198a2:	e7f7      	b.n	8019894 <memmove+0x24>

080198a4 <memset>:
 80198a4:	4402      	add	r2, r0
 80198a6:	4603      	mov	r3, r0
 80198a8:	4293      	cmp	r3, r2
 80198aa:	d100      	bne.n	80198ae <memset+0xa>
 80198ac:	4770      	bx	lr
 80198ae:	f803 1b01 	strb.w	r1, [r3], #1
 80198b2:	e7f9      	b.n	80198a8 <memset+0x4>

080198b4 <strchr>:
 80198b4:	b2c9      	uxtb	r1, r1
 80198b6:	4603      	mov	r3, r0
 80198b8:	4618      	mov	r0, r3
 80198ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80198be:	b112      	cbz	r2, 80198c6 <strchr+0x12>
 80198c0:	428a      	cmp	r2, r1
 80198c2:	d1f9      	bne.n	80198b8 <strchr+0x4>
 80198c4:	4770      	bx	lr
 80198c6:	2900      	cmp	r1, #0
 80198c8:	bf18      	it	ne
 80198ca:	2000      	movne	r0, #0
 80198cc:	4770      	bx	lr

080198ce <strncmp>:
 80198ce:	b510      	push	{r4, lr}
 80198d0:	b16a      	cbz	r2, 80198ee <strncmp+0x20>
 80198d2:	3901      	subs	r1, #1
 80198d4:	1884      	adds	r4, r0, r2
 80198d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80198da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80198de:	429a      	cmp	r2, r3
 80198e0:	d103      	bne.n	80198ea <strncmp+0x1c>
 80198e2:	42a0      	cmp	r0, r4
 80198e4:	d001      	beq.n	80198ea <strncmp+0x1c>
 80198e6:	2a00      	cmp	r2, #0
 80198e8:	d1f5      	bne.n	80198d6 <strncmp+0x8>
 80198ea:	1ad0      	subs	r0, r2, r3
 80198ec:	bd10      	pop	{r4, pc}
 80198ee:	4610      	mov	r0, r2
 80198f0:	e7fc      	b.n	80198ec <strncmp+0x1e>

080198f2 <strstr>:
 80198f2:	780a      	ldrb	r2, [r1, #0]
 80198f4:	b570      	push	{r4, r5, r6, lr}
 80198f6:	b96a      	cbnz	r2, 8019914 <strstr+0x22>
 80198f8:	bd70      	pop	{r4, r5, r6, pc}
 80198fa:	429a      	cmp	r2, r3
 80198fc:	d109      	bne.n	8019912 <strstr+0x20>
 80198fe:	460c      	mov	r4, r1
 8019900:	4605      	mov	r5, r0
 8019902:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019906:	2b00      	cmp	r3, #0
 8019908:	d0f6      	beq.n	80198f8 <strstr+0x6>
 801990a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801990e:	429e      	cmp	r6, r3
 8019910:	d0f7      	beq.n	8019902 <strstr+0x10>
 8019912:	3001      	adds	r0, #1
 8019914:	7803      	ldrb	r3, [r0, #0]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d1ef      	bne.n	80198fa <strstr+0x8>
 801991a:	4618      	mov	r0, r3
 801991c:	e7ec      	b.n	80198f8 <strstr+0x6>
	...

08019920 <_close_r>:
 8019920:	b538      	push	{r3, r4, r5, lr}
 8019922:	4d06      	ldr	r5, [pc, #24]	@ (801993c <_close_r+0x1c>)
 8019924:	2300      	movs	r3, #0
 8019926:	4604      	mov	r4, r0
 8019928:	4608      	mov	r0, r1
 801992a:	602b      	str	r3, [r5, #0]
 801992c:	f7e8 fd32 	bl	8002394 <_close>
 8019930:	1c43      	adds	r3, r0, #1
 8019932:	d102      	bne.n	801993a <_close_r+0x1a>
 8019934:	682b      	ldr	r3, [r5, #0]
 8019936:	b103      	cbz	r3, 801993a <_close_r+0x1a>
 8019938:	6023      	str	r3, [r4, #0]
 801993a:	bd38      	pop	{r3, r4, r5, pc}
 801993c:	2000bb24 	.word	0x2000bb24

08019940 <_lseek_r>:
 8019940:	b538      	push	{r3, r4, r5, lr}
 8019942:	4d07      	ldr	r5, [pc, #28]	@ (8019960 <_lseek_r+0x20>)
 8019944:	4604      	mov	r4, r0
 8019946:	4608      	mov	r0, r1
 8019948:	4611      	mov	r1, r2
 801994a:	2200      	movs	r2, #0
 801994c:	602a      	str	r2, [r5, #0]
 801994e:	461a      	mov	r2, r3
 8019950:	f7e8 fd47 	bl	80023e2 <_lseek>
 8019954:	1c43      	adds	r3, r0, #1
 8019956:	d102      	bne.n	801995e <_lseek_r+0x1e>
 8019958:	682b      	ldr	r3, [r5, #0]
 801995a:	b103      	cbz	r3, 801995e <_lseek_r+0x1e>
 801995c:	6023      	str	r3, [r4, #0]
 801995e:	bd38      	pop	{r3, r4, r5, pc}
 8019960:	2000bb24 	.word	0x2000bb24

08019964 <_read_r>:
 8019964:	b538      	push	{r3, r4, r5, lr}
 8019966:	4d07      	ldr	r5, [pc, #28]	@ (8019984 <_read_r+0x20>)
 8019968:	4604      	mov	r4, r0
 801996a:	4608      	mov	r0, r1
 801996c:	4611      	mov	r1, r2
 801996e:	2200      	movs	r2, #0
 8019970:	602a      	str	r2, [r5, #0]
 8019972:	461a      	mov	r2, r3
 8019974:	f7e8 fcd5 	bl	8002322 <_read>
 8019978:	1c43      	adds	r3, r0, #1
 801997a:	d102      	bne.n	8019982 <_read_r+0x1e>
 801997c:	682b      	ldr	r3, [r5, #0]
 801997e:	b103      	cbz	r3, 8019982 <_read_r+0x1e>
 8019980:	6023      	str	r3, [r4, #0]
 8019982:	bd38      	pop	{r3, r4, r5, pc}
 8019984:	2000bb24 	.word	0x2000bb24

08019988 <_sbrk_r>:
 8019988:	b538      	push	{r3, r4, r5, lr}
 801998a:	4d06      	ldr	r5, [pc, #24]	@ (80199a4 <_sbrk_r+0x1c>)
 801998c:	2300      	movs	r3, #0
 801998e:	4604      	mov	r4, r0
 8019990:	4608      	mov	r0, r1
 8019992:	602b      	str	r3, [r5, #0]
 8019994:	f7e8 fd32 	bl	80023fc <_sbrk>
 8019998:	1c43      	adds	r3, r0, #1
 801999a:	d102      	bne.n	80199a2 <_sbrk_r+0x1a>
 801999c:	682b      	ldr	r3, [r5, #0]
 801999e:	b103      	cbz	r3, 80199a2 <_sbrk_r+0x1a>
 80199a0:	6023      	str	r3, [r4, #0]
 80199a2:	bd38      	pop	{r3, r4, r5, pc}
 80199a4:	2000bb24 	.word	0x2000bb24

080199a8 <_write_r>:
 80199a8:	b538      	push	{r3, r4, r5, lr}
 80199aa:	4d07      	ldr	r5, [pc, #28]	@ (80199c8 <_write_r+0x20>)
 80199ac:	4604      	mov	r4, r0
 80199ae:	4608      	mov	r0, r1
 80199b0:	4611      	mov	r1, r2
 80199b2:	2200      	movs	r2, #0
 80199b4:	602a      	str	r2, [r5, #0]
 80199b6:	461a      	mov	r2, r3
 80199b8:	f7e8 fcd0 	bl	800235c <_write>
 80199bc:	1c43      	adds	r3, r0, #1
 80199be:	d102      	bne.n	80199c6 <_write_r+0x1e>
 80199c0:	682b      	ldr	r3, [r5, #0]
 80199c2:	b103      	cbz	r3, 80199c6 <_write_r+0x1e>
 80199c4:	6023      	str	r3, [r4, #0]
 80199c6:	bd38      	pop	{r3, r4, r5, pc}
 80199c8:	2000bb24 	.word	0x2000bb24

080199cc <__errno>:
 80199cc:	4b01      	ldr	r3, [pc, #4]	@ (80199d4 <__errno+0x8>)
 80199ce:	6818      	ldr	r0, [r3, #0]
 80199d0:	4770      	bx	lr
 80199d2:	bf00      	nop
 80199d4:	200009c0 	.word	0x200009c0

080199d8 <__libc_init_array>:
 80199d8:	b570      	push	{r4, r5, r6, lr}
 80199da:	4d0d      	ldr	r5, [pc, #52]	@ (8019a10 <__libc_init_array+0x38>)
 80199dc:	4c0d      	ldr	r4, [pc, #52]	@ (8019a14 <__libc_init_array+0x3c>)
 80199de:	1b64      	subs	r4, r4, r5
 80199e0:	10a4      	asrs	r4, r4, #2
 80199e2:	2600      	movs	r6, #0
 80199e4:	42a6      	cmp	r6, r4
 80199e6:	d109      	bne.n	80199fc <__libc_init_array+0x24>
 80199e8:	4d0b      	ldr	r5, [pc, #44]	@ (8019a18 <__libc_init_array+0x40>)
 80199ea:	4c0c      	ldr	r4, [pc, #48]	@ (8019a1c <__libc_init_array+0x44>)
 80199ec:	f001 f9d6 	bl	801ad9c <_init>
 80199f0:	1b64      	subs	r4, r4, r5
 80199f2:	10a4      	asrs	r4, r4, #2
 80199f4:	2600      	movs	r6, #0
 80199f6:	42a6      	cmp	r6, r4
 80199f8:	d105      	bne.n	8019a06 <__libc_init_array+0x2e>
 80199fa:	bd70      	pop	{r4, r5, r6, pc}
 80199fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a00:	4798      	blx	r3
 8019a02:	3601      	adds	r6, #1
 8019a04:	e7ee      	b.n	80199e4 <__libc_init_array+0xc>
 8019a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a0a:	4798      	blx	r3
 8019a0c:	3601      	adds	r6, #1
 8019a0e:	e7f2      	b.n	80199f6 <__libc_init_array+0x1e>
 8019a10:	0801c840 	.word	0x0801c840
 8019a14:	0801c840 	.word	0x0801c840
 8019a18:	0801c840 	.word	0x0801c840
 8019a1c:	0801c854 	.word	0x0801c854

08019a20 <__retarget_lock_init_recursive>:
 8019a20:	4770      	bx	lr

08019a22 <__retarget_lock_acquire_recursive>:
 8019a22:	4770      	bx	lr

08019a24 <__retarget_lock_release_recursive>:
 8019a24:	4770      	bx	lr

08019a26 <strcpy>:
 8019a26:	4603      	mov	r3, r0
 8019a28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019a2c:	f803 2b01 	strb.w	r2, [r3], #1
 8019a30:	2a00      	cmp	r2, #0
 8019a32:	d1f9      	bne.n	8019a28 <strcpy+0x2>
 8019a34:	4770      	bx	lr

08019a36 <memcpy>:
 8019a36:	440a      	add	r2, r1
 8019a38:	4291      	cmp	r1, r2
 8019a3a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8019a3e:	d100      	bne.n	8019a42 <memcpy+0xc>
 8019a40:	4770      	bx	lr
 8019a42:	b510      	push	{r4, lr}
 8019a44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019a48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019a4c:	4291      	cmp	r1, r2
 8019a4e:	d1f9      	bne.n	8019a44 <memcpy+0xe>
 8019a50:	bd10      	pop	{r4, pc}
	...

08019a54 <__assert_func>:
 8019a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019a56:	4614      	mov	r4, r2
 8019a58:	461a      	mov	r2, r3
 8019a5a:	4b09      	ldr	r3, [pc, #36]	@ (8019a80 <__assert_func+0x2c>)
 8019a5c:	681b      	ldr	r3, [r3, #0]
 8019a5e:	4605      	mov	r5, r0
 8019a60:	68d8      	ldr	r0, [r3, #12]
 8019a62:	b954      	cbnz	r4, 8019a7a <__assert_func+0x26>
 8019a64:	4b07      	ldr	r3, [pc, #28]	@ (8019a84 <__assert_func+0x30>)
 8019a66:	461c      	mov	r4, r3
 8019a68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019a6c:	9100      	str	r1, [sp, #0]
 8019a6e:	462b      	mov	r3, r5
 8019a70:	4905      	ldr	r1, [pc, #20]	@ (8019a88 <__assert_func+0x34>)
 8019a72:	f000 fd3f 	bl	801a4f4 <fiprintf>
 8019a76:	f000 fdd3 	bl	801a620 <abort>
 8019a7a:	4b04      	ldr	r3, [pc, #16]	@ (8019a8c <__assert_func+0x38>)
 8019a7c:	e7f4      	b.n	8019a68 <__assert_func+0x14>
 8019a7e:	bf00      	nop
 8019a80:	200009c0 	.word	0x200009c0
 8019a84:	0801c78d 	.word	0x0801c78d
 8019a88:	0801c75f 	.word	0x0801c75f
 8019a8c:	0801c752 	.word	0x0801c752

08019a90 <__env_lock>:
 8019a90:	4801      	ldr	r0, [pc, #4]	@ (8019a98 <__env_lock+0x8>)
 8019a92:	f7ff bfc6 	b.w	8019a22 <__retarget_lock_acquire_recursive>
 8019a96:	bf00      	nop
 8019a98:	2000bb28 	.word	0x2000bb28

08019a9c <__env_unlock>:
 8019a9c:	4801      	ldr	r0, [pc, #4]	@ (8019aa4 <__env_unlock+0x8>)
 8019a9e:	f7ff bfc1 	b.w	8019a24 <__retarget_lock_release_recursive>
 8019aa2:	bf00      	nop
 8019aa4:	2000bb28 	.word	0x2000bb28

08019aa8 <_free_r>:
 8019aa8:	b538      	push	{r3, r4, r5, lr}
 8019aaa:	4605      	mov	r5, r0
 8019aac:	2900      	cmp	r1, #0
 8019aae:	d041      	beq.n	8019b34 <_free_r+0x8c>
 8019ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019ab4:	1f0c      	subs	r4, r1, #4
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	bfb8      	it	lt
 8019aba:	18e4      	addlt	r4, r4, r3
 8019abc:	f7ff fb30 	bl	8019120 <__malloc_lock>
 8019ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8019b38 <_free_r+0x90>)
 8019ac2:	6813      	ldr	r3, [r2, #0]
 8019ac4:	b933      	cbnz	r3, 8019ad4 <_free_r+0x2c>
 8019ac6:	6063      	str	r3, [r4, #4]
 8019ac8:	6014      	str	r4, [r2, #0]
 8019aca:	4628      	mov	r0, r5
 8019acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019ad0:	f7ff bb2c 	b.w	801912c <__malloc_unlock>
 8019ad4:	42a3      	cmp	r3, r4
 8019ad6:	d908      	bls.n	8019aea <_free_r+0x42>
 8019ad8:	6820      	ldr	r0, [r4, #0]
 8019ada:	1821      	adds	r1, r4, r0
 8019adc:	428b      	cmp	r3, r1
 8019ade:	bf01      	itttt	eq
 8019ae0:	6819      	ldreq	r1, [r3, #0]
 8019ae2:	685b      	ldreq	r3, [r3, #4]
 8019ae4:	1809      	addeq	r1, r1, r0
 8019ae6:	6021      	streq	r1, [r4, #0]
 8019ae8:	e7ed      	b.n	8019ac6 <_free_r+0x1e>
 8019aea:	461a      	mov	r2, r3
 8019aec:	685b      	ldr	r3, [r3, #4]
 8019aee:	b10b      	cbz	r3, 8019af4 <_free_r+0x4c>
 8019af0:	42a3      	cmp	r3, r4
 8019af2:	d9fa      	bls.n	8019aea <_free_r+0x42>
 8019af4:	6811      	ldr	r1, [r2, #0]
 8019af6:	1850      	adds	r0, r2, r1
 8019af8:	42a0      	cmp	r0, r4
 8019afa:	d10b      	bne.n	8019b14 <_free_r+0x6c>
 8019afc:	6820      	ldr	r0, [r4, #0]
 8019afe:	4401      	add	r1, r0
 8019b00:	1850      	adds	r0, r2, r1
 8019b02:	4283      	cmp	r3, r0
 8019b04:	6011      	str	r1, [r2, #0]
 8019b06:	d1e0      	bne.n	8019aca <_free_r+0x22>
 8019b08:	6818      	ldr	r0, [r3, #0]
 8019b0a:	685b      	ldr	r3, [r3, #4]
 8019b0c:	6053      	str	r3, [r2, #4]
 8019b0e:	4408      	add	r0, r1
 8019b10:	6010      	str	r0, [r2, #0]
 8019b12:	e7da      	b.n	8019aca <_free_r+0x22>
 8019b14:	d902      	bls.n	8019b1c <_free_r+0x74>
 8019b16:	230c      	movs	r3, #12
 8019b18:	602b      	str	r3, [r5, #0]
 8019b1a:	e7d6      	b.n	8019aca <_free_r+0x22>
 8019b1c:	6820      	ldr	r0, [r4, #0]
 8019b1e:	1821      	adds	r1, r4, r0
 8019b20:	428b      	cmp	r3, r1
 8019b22:	bf04      	itt	eq
 8019b24:	6819      	ldreq	r1, [r3, #0]
 8019b26:	685b      	ldreq	r3, [r3, #4]
 8019b28:	6063      	str	r3, [r4, #4]
 8019b2a:	bf04      	itt	eq
 8019b2c:	1809      	addeq	r1, r1, r0
 8019b2e:	6021      	streq	r1, [r4, #0]
 8019b30:	6054      	str	r4, [r2, #4]
 8019b32:	e7ca      	b.n	8019aca <_free_r+0x22>
 8019b34:	bd38      	pop	{r3, r4, r5, pc}
 8019b36:	bf00      	nop
 8019b38:	2000b9e4 	.word	0x2000b9e4

08019b3c <_malloc_usable_size_r>:
 8019b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b40:	1f18      	subs	r0, r3, #4
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	bfbc      	itt	lt
 8019b46:	580b      	ldrlt	r3, [r1, r0]
 8019b48:	18c0      	addlt	r0, r0, r3
 8019b4a:	4770      	bx	lr

08019b4c <__ssputs_r>:
 8019b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b50:	688e      	ldr	r6, [r1, #8]
 8019b52:	461f      	mov	r7, r3
 8019b54:	42be      	cmp	r6, r7
 8019b56:	680b      	ldr	r3, [r1, #0]
 8019b58:	4682      	mov	sl, r0
 8019b5a:	460c      	mov	r4, r1
 8019b5c:	4690      	mov	r8, r2
 8019b5e:	d82d      	bhi.n	8019bbc <__ssputs_r+0x70>
 8019b60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019b64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019b68:	d026      	beq.n	8019bb8 <__ssputs_r+0x6c>
 8019b6a:	6965      	ldr	r5, [r4, #20]
 8019b6c:	6909      	ldr	r1, [r1, #16]
 8019b6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019b72:	eba3 0901 	sub.w	r9, r3, r1
 8019b76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019b7a:	1c7b      	adds	r3, r7, #1
 8019b7c:	444b      	add	r3, r9
 8019b7e:	106d      	asrs	r5, r5, #1
 8019b80:	429d      	cmp	r5, r3
 8019b82:	bf38      	it	cc
 8019b84:	461d      	movcc	r5, r3
 8019b86:	0553      	lsls	r3, r2, #21
 8019b88:	d527      	bpl.n	8019bda <__ssputs_r+0x8e>
 8019b8a:	4629      	mov	r1, r5
 8019b8c:	f7ff fa48 	bl	8019020 <_malloc_r>
 8019b90:	4606      	mov	r6, r0
 8019b92:	b360      	cbz	r0, 8019bee <__ssputs_r+0xa2>
 8019b94:	6921      	ldr	r1, [r4, #16]
 8019b96:	464a      	mov	r2, r9
 8019b98:	f7ff ff4d 	bl	8019a36 <memcpy>
 8019b9c:	89a3      	ldrh	r3, [r4, #12]
 8019b9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019ba6:	81a3      	strh	r3, [r4, #12]
 8019ba8:	6126      	str	r6, [r4, #16]
 8019baa:	6165      	str	r5, [r4, #20]
 8019bac:	444e      	add	r6, r9
 8019bae:	eba5 0509 	sub.w	r5, r5, r9
 8019bb2:	6026      	str	r6, [r4, #0]
 8019bb4:	60a5      	str	r5, [r4, #8]
 8019bb6:	463e      	mov	r6, r7
 8019bb8:	42be      	cmp	r6, r7
 8019bba:	d900      	bls.n	8019bbe <__ssputs_r+0x72>
 8019bbc:	463e      	mov	r6, r7
 8019bbe:	6820      	ldr	r0, [r4, #0]
 8019bc0:	4632      	mov	r2, r6
 8019bc2:	4641      	mov	r1, r8
 8019bc4:	f7ff fe54 	bl	8019870 <memmove>
 8019bc8:	68a3      	ldr	r3, [r4, #8]
 8019bca:	1b9b      	subs	r3, r3, r6
 8019bcc:	60a3      	str	r3, [r4, #8]
 8019bce:	6823      	ldr	r3, [r4, #0]
 8019bd0:	4433      	add	r3, r6
 8019bd2:	6023      	str	r3, [r4, #0]
 8019bd4:	2000      	movs	r0, #0
 8019bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bda:	462a      	mov	r2, r5
 8019bdc:	f7ff fb20 	bl	8019220 <_realloc_r>
 8019be0:	4606      	mov	r6, r0
 8019be2:	2800      	cmp	r0, #0
 8019be4:	d1e0      	bne.n	8019ba8 <__ssputs_r+0x5c>
 8019be6:	6921      	ldr	r1, [r4, #16]
 8019be8:	4650      	mov	r0, sl
 8019bea:	f7ff ff5d 	bl	8019aa8 <_free_r>
 8019bee:	230c      	movs	r3, #12
 8019bf0:	f8ca 3000 	str.w	r3, [sl]
 8019bf4:	89a3      	ldrh	r3, [r4, #12]
 8019bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019bfa:	81a3      	strh	r3, [r4, #12]
 8019bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019c00:	e7e9      	b.n	8019bd6 <__ssputs_r+0x8a>
	...

08019c04 <_svfiprintf_r>:
 8019c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c08:	4698      	mov	r8, r3
 8019c0a:	898b      	ldrh	r3, [r1, #12]
 8019c0c:	061b      	lsls	r3, r3, #24
 8019c0e:	b09d      	sub	sp, #116	@ 0x74
 8019c10:	4607      	mov	r7, r0
 8019c12:	460d      	mov	r5, r1
 8019c14:	4614      	mov	r4, r2
 8019c16:	d510      	bpl.n	8019c3a <_svfiprintf_r+0x36>
 8019c18:	690b      	ldr	r3, [r1, #16]
 8019c1a:	b973      	cbnz	r3, 8019c3a <_svfiprintf_r+0x36>
 8019c1c:	2140      	movs	r1, #64	@ 0x40
 8019c1e:	f7ff f9ff 	bl	8019020 <_malloc_r>
 8019c22:	6028      	str	r0, [r5, #0]
 8019c24:	6128      	str	r0, [r5, #16]
 8019c26:	b930      	cbnz	r0, 8019c36 <_svfiprintf_r+0x32>
 8019c28:	230c      	movs	r3, #12
 8019c2a:	603b      	str	r3, [r7, #0]
 8019c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019c30:	b01d      	add	sp, #116	@ 0x74
 8019c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c36:	2340      	movs	r3, #64	@ 0x40
 8019c38:	616b      	str	r3, [r5, #20]
 8019c3a:	2300      	movs	r3, #0
 8019c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8019c3e:	2320      	movs	r3, #32
 8019c40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019c44:	f8cd 800c 	str.w	r8, [sp, #12]
 8019c48:	2330      	movs	r3, #48	@ 0x30
 8019c4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019de8 <_svfiprintf_r+0x1e4>
 8019c4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019c52:	f04f 0901 	mov.w	r9, #1
 8019c56:	4623      	mov	r3, r4
 8019c58:	469a      	mov	sl, r3
 8019c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c5e:	b10a      	cbz	r2, 8019c64 <_svfiprintf_r+0x60>
 8019c60:	2a25      	cmp	r2, #37	@ 0x25
 8019c62:	d1f9      	bne.n	8019c58 <_svfiprintf_r+0x54>
 8019c64:	ebba 0b04 	subs.w	fp, sl, r4
 8019c68:	d00b      	beq.n	8019c82 <_svfiprintf_r+0x7e>
 8019c6a:	465b      	mov	r3, fp
 8019c6c:	4622      	mov	r2, r4
 8019c6e:	4629      	mov	r1, r5
 8019c70:	4638      	mov	r0, r7
 8019c72:	f7ff ff6b 	bl	8019b4c <__ssputs_r>
 8019c76:	3001      	adds	r0, #1
 8019c78:	f000 80a7 	beq.w	8019dca <_svfiprintf_r+0x1c6>
 8019c7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019c7e:	445a      	add	r2, fp
 8019c80:	9209      	str	r2, [sp, #36]	@ 0x24
 8019c82:	f89a 3000 	ldrb.w	r3, [sl]
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	f000 809f 	beq.w	8019dca <_svfiprintf_r+0x1c6>
 8019c8c:	2300      	movs	r3, #0
 8019c8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c96:	f10a 0a01 	add.w	sl, sl, #1
 8019c9a:	9304      	str	r3, [sp, #16]
 8019c9c:	9307      	str	r3, [sp, #28]
 8019c9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019ca2:	931a      	str	r3, [sp, #104]	@ 0x68
 8019ca4:	4654      	mov	r4, sl
 8019ca6:	2205      	movs	r2, #5
 8019ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019cac:	484e      	ldr	r0, [pc, #312]	@ (8019de8 <_svfiprintf_r+0x1e4>)
 8019cae:	f7e6 facf 	bl	8000250 <memchr>
 8019cb2:	9a04      	ldr	r2, [sp, #16]
 8019cb4:	b9d8      	cbnz	r0, 8019cee <_svfiprintf_r+0xea>
 8019cb6:	06d0      	lsls	r0, r2, #27
 8019cb8:	bf44      	itt	mi
 8019cba:	2320      	movmi	r3, #32
 8019cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019cc0:	0711      	lsls	r1, r2, #28
 8019cc2:	bf44      	itt	mi
 8019cc4:	232b      	movmi	r3, #43	@ 0x2b
 8019cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019cca:	f89a 3000 	ldrb.w	r3, [sl]
 8019cce:	2b2a      	cmp	r3, #42	@ 0x2a
 8019cd0:	d015      	beq.n	8019cfe <_svfiprintf_r+0xfa>
 8019cd2:	9a07      	ldr	r2, [sp, #28]
 8019cd4:	4654      	mov	r4, sl
 8019cd6:	2000      	movs	r0, #0
 8019cd8:	f04f 0c0a 	mov.w	ip, #10
 8019cdc:	4621      	mov	r1, r4
 8019cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ce2:	3b30      	subs	r3, #48	@ 0x30
 8019ce4:	2b09      	cmp	r3, #9
 8019ce6:	d94b      	bls.n	8019d80 <_svfiprintf_r+0x17c>
 8019ce8:	b1b0      	cbz	r0, 8019d18 <_svfiprintf_r+0x114>
 8019cea:	9207      	str	r2, [sp, #28]
 8019cec:	e014      	b.n	8019d18 <_svfiprintf_r+0x114>
 8019cee:	eba0 0308 	sub.w	r3, r0, r8
 8019cf2:	fa09 f303 	lsl.w	r3, r9, r3
 8019cf6:	4313      	orrs	r3, r2
 8019cf8:	9304      	str	r3, [sp, #16]
 8019cfa:	46a2      	mov	sl, r4
 8019cfc:	e7d2      	b.n	8019ca4 <_svfiprintf_r+0xa0>
 8019cfe:	9b03      	ldr	r3, [sp, #12]
 8019d00:	1d19      	adds	r1, r3, #4
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	9103      	str	r1, [sp, #12]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	bfbb      	ittet	lt
 8019d0a:	425b      	neglt	r3, r3
 8019d0c:	f042 0202 	orrlt.w	r2, r2, #2
 8019d10:	9307      	strge	r3, [sp, #28]
 8019d12:	9307      	strlt	r3, [sp, #28]
 8019d14:	bfb8      	it	lt
 8019d16:	9204      	strlt	r2, [sp, #16]
 8019d18:	7823      	ldrb	r3, [r4, #0]
 8019d1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8019d1c:	d10a      	bne.n	8019d34 <_svfiprintf_r+0x130>
 8019d1e:	7863      	ldrb	r3, [r4, #1]
 8019d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8019d22:	d132      	bne.n	8019d8a <_svfiprintf_r+0x186>
 8019d24:	9b03      	ldr	r3, [sp, #12]
 8019d26:	1d1a      	adds	r2, r3, #4
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	9203      	str	r2, [sp, #12]
 8019d2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019d30:	3402      	adds	r4, #2
 8019d32:	9305      	str	r3, [sp, #20]
 8019d34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019df8 <_svfiprintf_r+0x1f4>
 8019d38:	7821      	ldrb	r1, [r4, #0]
 8019d3a:	2203      	movs	r2, #3
 8019d3c:	4650      	mov	r0, sl
 8019d3e:	f7e6 fa87 	bl	8000250 <memchr>
 8019d42:	b138      	cbz	r0, 8019d54 <_svfiprintf_r+0x150>
 8019d44:	9b04      	ldr	r3, [sp, #16]
 8019d46:	eba0 000a 	sub.w	r0, r0, sl
 8019d4a:	2240      	movs	r2, #64	@ 0x40
 8019d4c:	4082      	lsls	r2, r0
 8019d4e:	4313      	orrs	r3, r2
 8019d50:	3401      	adds	r4, #1
 8019d52:	9304      	str	r3, [sp, #16]
 8019d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d58:	4824      	ldr	r0, [pc, #144]	@ (8019dec <_svfiprintf_r+0x1e8>)
 8019d5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019d5e:	2206      	movs	r2, #6
 8019d60:	f7e6 fa76 	bl	8000250 <memchr>
 8019d64:	2800      	cmp	r0, #0
 8019d66:	d036      	beq.n	8019dd6 <_svfiprintf_r+0x1d2>
 8019d68:	4b21      	ldr	r3, [pc, #132]	@ (8019df0 <_svfiprintf_r+0x1ec>)
 8019d6a:	bb1b      	cbnz	r3, 8019db4 <_svfiprintf_r+0x1b0>
 8019d6c:	9b03      	ldr	r3, [sp, #12]
 8019d6e:	3307      	adds	r3, #7
 8019d70:	f023 0307 	bic.w	r3, r3, #7
 8019d74:	3308      	adds	r3, #8
 8019d76:	9303      	str	r3, [sp, #12]
 8019d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019d7a:	4433      	add	r3, r6
 8019d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8019d7e:	e76a      	b.n	8019c56 <_svfiprintf_r+0x52>
 8019d80:	fb0c 3202 	mla	r2, ip, r2, r3
 8019d84:	460c      	mov	r4, r1
 8019d86:	2001      	movs	r0, #1
 8019d88:	e7a8      	b.n	8019cdc <_svfiprintf_r+0xd8>
 8019d8a:	2300      	movs	r3, #0
 8019d8c:	3401      	adds	r4, #1
 8019d8e:	9305      	str	r3, [sp, #20]
 8019d90:	4619      	mov	r1, r3
 8019d92:	f04f 0c0a 	mov.w	ip, #10
 8019d96:	4620      	mov	r0, r4
 8019d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d9c:	3a30      	subs	r2, #48	@ 0x30
 8019d9e:	2a09      	cmp	r2, #9
 8019da0:	d903      	bls.n	8019daa <_svfiprintf_r+0x1a6>
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d0c6      	beq.n	8019d34 <_svfiprintf_r+0x130>
 8019da6:	9105      	str	r1, [sp, #20]
 8019da8:	e7c4      	b.n	8019d34 <_svfiprintf_r+0x130>
 8019daa:	fb0c 2101 	mla	r1, ip, r1, r2
 8019dae:	4604      	mov	r4, r0
 8019db0:	2301      	movs	r3, #1
 8019db2:	e7f0      	b.n	8019d96 <_svfiprintf_r+0x192>
 8019db4:	ab03      	add	r3, sp, #12
 8019db6:	9300      	str	r3, [sp, #0]
 8019db8:	462a      	mov	r2, r5
 8019dba:	4b0e      	ldr	r3, [pc, #56]	@ (8019df4 <_svfiprintf_r+0x1f0>)
 8019dbc:	a904      	add	r1, sp, #16
 8019dbe:	4638      	mov	r0, r7
 8019dc0:	f3af 8000 	nop.w
 8019dc4:	1c42      	adds	r2, r0, #1
 8019dc6:	4606      	mov	r6, r0
 8019dc8:	d1d6      	bne.n	8019d78 <_svfiprintf_r+0x174>
 8019dca:	89ab      	ldrh	r3, [r5, #12]
 8019dcc:	065b      	lsls	r3, r3, #25
 8019dce:	f53f af2d 	bmi.w	8019c2c <_svfiprintf_r+0x28>
 8019dd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019dd4:	e72c      	b.n	8019c30 <_svfiprintf_r+0x2c>
 8019dd6:	ab03      	add	r3, sp, #12
 8019dd8:	9300      	str	r3, [sp, #0]
 8019dda:	462a      	mov	r2, r5
 8019ddc:	4b05      	ldr	r3, [pc, #20]	@ (8019df4 <_svfiprintf_r+0x1f0>)
 8019dde:	a904      	add	r1, sp, #16
 8019de0:	4638      	mov	r0, r7
 8019de2:	f000 f9bb 	bl	801a15c <_printf_i>
 8019de6:	e7ed      	b.n	8019dc4 <_svfiprintf_r+0x1c0>
 8019de8:	0801c78e 	.word	0x0801c78e
 8019dec:	0801c798 	.word	0x0801c798
 8019df0:	00000000 	.word	0x00000000
 8019df4:	08019b4d 	.word	0x08019b4d
 8019df8:	0801c794 	.word	0x0801c794

08019dfc <__sfputc_r>:
 8019dfc:	6893      	ldr	r3, [r2, #8]
 8019dfe:	3b01      	subs	r3, #1
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	b410      	push	{r4}
 8019e04:	6093      	str	r3, [r2, #8]
 8019e06:	da08      	bge.n	8019e1a <__sfputc_r+0x1e>
 8019e08:	6994      	ldr	r4, [r2, #24]
 8019e0a:	42a3      	cmp	r3, r4
 8019e0c:	db01      	blt.n	8019e12 <__sfputc_r+0x16>
 8019e0e:	290a      	cmp	r1, #10
 8019e10:	d103      	bne.n	8019e1a <__sfputc_r+0x1e>
 8019e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e16:	f7ff bc87 	b.w	8019728 <__swbuf_r>
 8019e1a:	6813      	ldr	r3, [r2, #0]
 8019e1c:	1c58      	adds	r0, r3, #1
 8019e1e:	6010      	str	r0, [r2, #0]
 8019e20:	7019      	strb	r1, [r3, #0]
 8019e22:	4608      	mov	r0, r1
 8019e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e28:	4770      	bx	lr

08019e2a <__sfputs_r>:
 8019e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e2c:	4606      	mov	r6, r0
 8019e2e:	460f      	mov	r7, r1
 8019e30:	4614      	mov	r4, r2
 8019e32:	18d5      	adds	r5, r2, r3
 8019e34:	42ac      	cmp	r4, r5
 8019e36:	d101      	bne.n	8019e3c <__sfputs_r+0x12>
 8019e38:	2000      	movs	r0, #0
 8019e3a:	e007      	b.n	8019e4c <__sfputs_r+0x22>
 8019e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e40:	463a      	mov	r2, r7
 8019e42:	4630      	mov	r0, r6
 8019e44:	f7ff ffda 	bl	8019dfc <__sfputc_r>
 8019e48:	1c43      	adds	r3, r0, #1
 8019e4a:	d1f3      	bne.n	8019e34 <__sfputs_r+0xa>
 8019e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019e50 <_vfiprintf_r>:
 8019e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e54:	460d      	mov	r5, r1
 8019e56:	b09d      	sub	sp, #116	@ 0x74
 8019e58:	4614      	mov	r4, r2
 8019e5a:	4698      	mov	r8, r3
 8019e5c:	4606      	mov	r6, r0
 8019e5e:	b118      	cbz	r0, 8019e68 <_vfiprintf_r+0x18>
 8019e60:	6a03      	ldr	r3, [r0, #32]
 8019e62:	b90b      	cbnz	r3, 8019e68 <_vfiprintf_r+0x18>
 8019e64:	f7ff fb0e 	bl	8019484 <__sinit>
 8019e68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019e6a:	07d9      	lsls	r1, r3, #31
 8019e6c:	d405      	bmi.n	8019e7a <_vfiprintf_r+0x2a>
 8019e6e:	89ab      	ldrh	r3, [r5, #12]
 8019e70:	059a      	lsls	r2, r3, #22
 8019e72:	d402      	bmi.n	8019e7a <_vfiprintf_r+0x2a>
 8019e74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019e76:	f7ff fdd4 	bl	8019a22 <__retarget_lock_acquire_recursive>
 8019e7a:	89ab      	ldrh	r3, [r5, #12]
 8019e7c:	071b      	lsls	r3, r3, #28
 8019e7e:	d501      	bpl.n	8019e84 <_vfiprintf_r+0x34>
 8019e80:	692b      	ldr	r3, [r5, #16]
 8019e82:	b99b      	cbnz	r3, 8019eac <_vfiprintf_r+0x5c>
 8019e84:	4629      	mov	r1, r5
 8019e86:	4630      	mov	r0, r6
 8019e88:	f7ff fc8c 	bl	80197a4 <__swsetup_r>
 8019e8c:	b170      	cbz	r0, 8019eac <_vfiprintf_r+0x5c>
 8019e8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019e90:	07dc      	lsls	r4, r3, #31
 8019e92:	d504      	bpl.n	8019e9e <_vfiprintf_r+0x4e>
 8019e94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019e98:	b01d      	add	sp, #116	@ 0x74
 8019e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e9e:	89ab      	ldrh	r3, [r5, #12]
 8019ea0:	0598      	lsls	r0, r3, #22
 8019ea2:	d4f7      	bmi.n	8019e94 <_vfiprintf_r+0x44>
 8019ea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019ea6:	f7ff fdbd 	bl	8019a24 <__retarget_lock_release_recursive>
 8019eaa:	e7f3      	b.n	8019e94 <_vfiprintf_r+0x44>
 8019eac:	2300      	movs	r3, #0
 8019eae:	9309      	str	r3, [sp, #36]	@ 0x24
 8019eb0:	2320      	movs	r3, #32
 8019eb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019eb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8019eba:	2330      	movs	r3, #48	@ 0x30
 8019ebc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a06c <_vfiprintf_r+0x21c>
 8019ec0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019ec4:	f04f 0901 	mov.w	r9, #1
 8019ec8:	4623      	mov	r3, r4
 8019eca:	469a      	mov	sl, r3
 8019ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ed0:	b10a      	cbz	r2, 8019ed6 <_vfiprintf_r+0x86>
 8019ed2:	2a25      	cmp	r2, #37	@ 0x25
 8019ed4:	d1f9      	bne.n	8019eca <_vfiprintf_r+0x7a>
 8019ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8019eda:	d00b      	beq.n	8019ef4 <_vfiprintf_r+0xa4>
 8019edc:	465b      	mov	r3, fp
 8019ede:	4622      	mov	r2, r4
 8019ee0:	4629      	mov	r1, r5
 8019ee2:	4630      	mov	r0, r6
 8019ee4:	f7ff ffa1 	bl	8019e2a <__sfputs_r>
 8019ee8:	3001      	adds	r0, #1
 8019eea:	f000 80a7 	beq.w	801a03c <_vfiprintf_r+0x1ec>
 8019eee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019ef0:	445a      	add	r2, fp
 8019ef2:	9209      	str	r2, [sp, #36]	@ 0x24
 8019ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	f000 809f 	beq.w	801a03c <_vfiprintf_r+0x1ec>
 8019efe:	2300      	movs	r3, #0
 8019f00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019f08:	f10a 0a01 	add.w	sl, sl, #1
 8019f0c:	9304      	str	r3, [sp, #16]
 8019f0e:	9307      	str	r3, [sp, #28]
 8019f10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019f14:	931a      	str	r3, [sp, #104]	@ 0x68
 8019f16:	4654      	mov	r4, sl
 8019f18:	2205      	movs	r2, #5
 8019f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f1e:	4853      	ldr	r0, [pc, #332]	@ (801a06c <_vfiprintf_r+0x21c>)
 8019f20:	f7e6 f996 	bl	8000250 <memchr>
 8019f24:	9a04      	ldr	r2, [sp, #16]
 8019f26:	b9d8      	cbnz	r0, 8019f60 <_vfiprintf_r+0x110>
 8019f28:	06d1      	lsls	r1, r2, #27
 8019f2a:	bf44      	itt	mi
 8019f2c:	2320      	movmi	r3, #32
 8019f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019f32:	0713      	lsls	r3, r2, #28
 8019f34:	bf44      	itt	mi
 8019f36:	232b      	movmi	r3, #43	@ 0x2b
 8019f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8019f40:	2b2a      	cmp	r3, #42	@ 0x2a
 8019f42:	d015      	beq.n	8019f70 <_vfiprintf_r+0x120>
 8019f44:	9a07      	ldr	r2, [sp, #28]
 8019f46:	4654      	mov	r4, sl
 8019f48:	2000      	movs	r0, #0
 8019f4a:	f04f 0c0a 	mov.w	ip, #10
 8019f4e:	4621      	mov	r1, r4
 8019f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019f54:	3b30      	subs	r3, #48	@ 0x30
 8019f56:	2b09      	cmp	r3, #9
 8019f58:	d94b      	bls.n	8019ff2 <_vfiprintf_r+0x1a2>
 8019f5a:	b1b0      	cbz	r0, 8019f8a <_vfiprintf_r+0x13a>
 8019f5c:	9207      	str	r2, [sp, #28]
 8019f5e:	e014      	b.n	8019f8a <_vfiprintf_r+0x13a>
 8019f60:	eba0 0308 	sub.w	r3, r0, r8
 8019f64:	fa09 f303 	lsl.w	r3, r9, r3
 8019f68:	4313      	orrs	r3, r2
 8019f6a:	9304      	str	r3, [sp, #16]
 8019f6c:	46a2      	mov	sl, r4
 8019f6e:	e7d2      	b.n	8019f16 <_vfiprintf_r+0xc6>
 8019f70:	9b03      	ldr	r3, [sp, #12]
 8019f72:	1d19      	adds	r1, r3, #4
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	9103      	str	r1, [sp, #12]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	bfbb      	ittet	lt
 8019f7c:	425b      	neglt	r3, r3
 8019f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8019f82:	9307      	strge	r3, [sp, #28]
 8019f84:	9307      	strlt	r3, [sp, #28]
 8019f86:	bfb8      	it	lt
 8019f88:	9204      	strlt	r2, [sp, #16]
 8019f8a:	7823      	ldrb	r3, [r4, #0]
 8019f8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8019f8e:	d10a      	bne.n	8019fa6 <_vfiprintf_r+0x156>
 8019f90:	7863      	ldrb	r3, [r4, #1]
 8019f92:	2b2a      	cmp	r3, #42	@ 0x2a
 8019f94:	d132      	bne.n	8019ffc <_vfiprintf_r+0x1ac>
 8019f96:	9b03      	ldr	r3, [sp, #12]
 8019f98:	1d1a      	adds	r2, r3, #4
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	9203      	str	r2, [sp, #12]
 8019f9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019fa2:	3402      	adds	r4, #2
 8019fa4:	9305      	str	r3, [sp, #20]
 8019fa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a07c <_vfiprintf_r+0x22c>
 8019faa:	7821      	ldrb	r1, [r4, #0]
 8019fac:	2203      	movs	r2, #3
 8019fae:	4650      	mov	r0, sl
 8019fb0:	f7e6 f94e 	bl	8000250 <memchr>
 8019fb4:	b138      	cbz	r0, 8019fc6 <_vfiprintf_r+0x176>
 8019fb6:	9b04      	ldr	r3, [sp, #16]
 8019fb8:	eba0 000a 	sub.w	r0, r0, sl
 8019fbc:	2240      	movs	r2, #64	@ 0x40
 8019fbe:	4082      	lsls	r2, r0
 8019fc0:	4313      	orrs	r3, r2
 8019fc2:	3401      	adds	r4, #1
 8019fc4:	9304      	str	r3, [sp, #16]
 8019fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fca:	4829      	ldr	r0, [pc, #164]	@ (801a070 <_vfiprintf_r+0x220>)
 8019fcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019fd0:	2206      	movs	r2, #6
 8019fd2:	f7e6 f93d 	bl	8000250 <memchr>
 8019fd6:	2800      	cmp	r0, #0
 8019fd8:	d03f      	beq.n	801a05a <_vfiprintf_r+0x20a>
 8019fda:	4b26      	ldr	r3, [pc, #152]	@ (801a074 <_vfiprintf_r+0x224>)
 8019fdc:	bb1b      	cbnz	r3, 801a026 <_vfiprintf_r+0x1d6>
 8019fde:	9b03      	ldr	r3, [sp, #12]
 8019fe0:	3307      	adds	r3, #7
 8019fe2:	f023 0307 	bic.w	r3, r3, #7
 8019fe6:	3308      	adds	r3, #8
 8019fe8:	9303      	str	r3, [sp, #12]
 8019fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019fec:	443b      	add	r3, r7
 8019fee:	9309      	str	r3, [sp, #36]	@ 0x24
 8019ff0:	e76a      	b.n	8019ec8 <_vfiprintf_r+0x78>
 8019ff2:	fb0c 3202 	mla	r2, ip, r2, r3
 8019ff6:	460c      	mov	r4, r1
 8019ff8:	2001      	movs	r0, #1
 8019ffa:	e7a8      	b.n	8019f4e <_vfiprintf_r+0xfe>
 8019ffc:	2300      	movs	r3, #0
 8019ffe:	3401      	adds	r4, #1
 801a000:	9305      	str	r3, [sp, #20]
 801a002:	4619      	mov	r1, r3
 801a004:	f04f 0c0a 	mov.w	ip, #10
 801a008:	4620      	mov	r0, r4
 801a00a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a00e:	3a30      	subs	r2, #48	@ 0x30
 801a010:	2a09      	cmp	r2, #9
 801a012:	d903      	bls.n	801a01c <_vfiprintf_r+0x1cc>
 801a014:	2b00      	cmp	r3, #0
 801a016:	d0c6      	beq.n	8019fa6 <_vfiprintf_r+0x156>
 801a018:	9105      	str	r1, [sp, #20]
 801a01a:	e7c4      	b.n	8019fa6 <_vfiprintf_r+0x156>
 801a01c:	fb0c 2101 	mla	r1, ip, r1, r2
 801a020:	4604      	mov	r4, r0
 801a022:	2301      	movs	r3, #1
 801a024:	e7f0      	b.n	801a008 <_vfiprintf_r+0x1b8>
 801a026:	ab03      	add	r3, sp, #12
 801a028:	9300      	str	r3, [sp, #0]
 801a02a:	462a      	mov	r2, r5
 801a02c:	4b12      	ldr	r3, [pc, #72]	@ (801a078 <_vfiprintf_r+0x228>)
 801a02e:	a904      	add	r1, sp, #16
 801a030:	4630      	mov	r0, r6
 801a032:	f3af 8000 	nop.w
 801a036:	4607      	mov	r7, r0
 801a038:	1c78      	adds	r0, r7, #1
 801a03a:	d1d6      	bne.n	8019fea <_vfiprintf_r+0x19a>
 801a03c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a03e:	07d9      	lsls	r1, r3, #31
 801a040:	d405      	bmi.n	801a04e <_vfiprintf_r+0x1fe>
 801a042:	89ab      	ldrh	r3, [r5, #12]
 801a044:	059a      	lsls	r2, r3, #22
 801a046:	d402      	bmi.n	801a04e <_vfiprintf_r+0x1fe>
 801a048:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a04a:	f7ff fceb 	bl	8019a24 <__retarget_lock_release_recursive>
 801a04e:	89ab      	ldrh	r3, [r5, #12]
 801a050:	065b      	lsls	r3, r3, #25
 801a052:	f53f af1f 	bmi.w	8019e94 <_vfiprintf_r+0x44>
 801a056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a058:	e71e      	b.n	8019e98 <_vfiprintf_r+0x48>
 801a05a:	ab03      	add	r3, sp, #12
 801a05c:	9300      	str	r3, [sp, #0]
 801a05e:	462a      	mov	r2, r5
 801a060:	4b05      	ldr	r3, [pc, #20]	@ (801a078 <_vfiprintf_r+0x228>)
 801a062:	a904      	add	r1, sp, #16
 801a064:	4630      	mov	r0, r6
 801a066:	f000 f879 	bl	801a15c <_printf_i>
 801a06a:	e7e4      	b.n	801a036 <_vfiprintf_r+0x1e6>
 801a06c:	0801c78e 	.word	0x0801c78e
 801a070:	0801c798 	.word	0x0801c798
 801a074:	00000000 	.word	0x00000000
 801a078:	08019e2b 	.word	0x08019e2b
 801a07c:	0801c794 	.word	0x0801c794

0801a080 <_printf_common>:
 801a080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a084:	4616      	mov	r6, r2
 801a086:	4698      	mov	r8, r3
 801a088:	688a      	ldr	r2, [r1, #8]
 801a08a:	690b      	ldr	r3, [r1, #16]
 801a08c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a090:	4293      	cmp	r3, r2
 801a092:	bfb8      	it	lt
 801a094:	4613      	movlt	r3, r2
 801a096:	6033      	str	r3, [r6, #0]
 801a098:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a09c:	4607      	mov	r7, r0
 801a09e:	460c      	mov	r4, r1
 801a0a0:	b10a      	cbz	r2, 801a0a6 <_printf_common+0x26>
 801a0a2:	3301      	adds	r3, #1
 801a0a4:	6033      	str	r3, [r6, #0]
 801a0a6:	6823      	ldr	r3, [r4, #0]
 801a0a8:	0699      	lsls	r1, r3, #26
 801a0aa:	bf42      	ittt	mi
 801a0ac:	6833      	ldrmi	r3, [r6, #0]
 801a0ae:	3302      	addmi	r3, #2
 801a0b0:	6033      	strmi	r3, [r6, #0]
 801a0b2:	6825      	ldr	r5, [r4, #0]
 801a0b4:	f015 0506 	ands.w	r5, r5, #6
 801a0b8:	d106      	bne.n	801a0c8 <_printf_common+0x48>
 801a0ba:	f104 0a19 	add.w	sl, r4, #25
 801a0be:	68e3      	ldr	r3, [r4, #12]
 801a0c0:	6832      	ldr	r2, [r6, #0]
 801a0c2:	1a9b      	subs	r3, r3, r2
 801a0c4:	42ab      	cmp	r3, r5
 801a0c6:	dc26      	bgt.n	801a116 <_printf_common+0x96>
 801a0c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a0cc:	6822      	ldr	r2, [r4, #0]
 801a0ce:	3b00      	subs	r3, #0
 801a0d0:	bf18      	it	ne
 801a0d2:	2301      	movne	r3, #1
 801a0d4:	0692      	lsls	r2, r2, #26
 801a0d6:	d42b      	bmi.n	801a130 <_printf_common+0xb0>
 801a0d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a0dc:	4641      	mov	r1, r8
 801a0de:	4638      	mov	r0, r7
 801a0e0:	47c8      	blx	r9
 801a0e2:	3001      	adds	r0, #1
 801a0e4:	d01e      	beq.n	801a124 <_printf_common+0xa4>
 801a0e6:	6823      	ldr	r3, [r4, #0]
 801a0e8:	6922      	ldr	r2, [r4, #16]
 801a0ea:	f003 0306 	and.w	r3, r3, #6
 801a0ee:	2b04      	cmp	r3, #4
 801a0f0:	bf02      	ittt	eq
 801a0f2:	68e5      	ldreq	r5, [r4, #12]
 801a0f4:	6833      	ldreq	r3, [r6, #0]
 801a0f6:	1aed      	subeq	r5, r5, r3
 801a0f8:	68a3      	ldr	r3, [r4, #8]
 801a0fa:	bf0c      	ite	eq
 801a0fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a100:	2500      	movne	r5, #0
 801a102:	4293      	cmp	r3, r2
 801a104:	bfc4      	itt	gt
 801a106:	1a9b      	subgt	r3, r3, r2
 801a108:	18ed      	addgt	r5, r5, r3
 801a10a:	2600      	movs	r6, #0
 801a10c:	341a      	adds	r4, #26
 801a10e:	42b5      	cmp	r5, r6
 801a110:	d11a      	bne.n	801a148 <_printf_common+0xc8>
 801a112:	2000      	movs	r0, #0
 801a114:	e008      	b.n	801a128 <_printf_common+0xa8>
 801a116:	2301      	movs	r3, #1
 801a118:	4652      	mov	r2, sl
 801a11a:	4641      	mov	r1, r8
 801a11c:	4638      	mov	r0, r7
 801a11e:	47c8      	blx	r9
 801a120:	3001      	adds	r0, #1
 801a122:	d103      	bne.n	801a12c <_printf_common+0xac>
 801a124:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a12c:	3501      	adds	r5, #1
 801a12e:	e7c6      	b.n	801a0be <_printf_common+0x3e>
 801a130:	18e1      	adds	r1, r4, r3
 801a132:	1c5a      	adds	r2, r3, #1
 801a134:	2030      	movs	r0, #48	@ 0x30
 801a136:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a13a:	4422      	add	r2, r4
 801a13c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a140:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a144:	3302      	adds	r3, #2
 801a146:	e7c7      	b.n	801a0d8 <_printf_common+0x58>
 801a148:	2301      	movs	r3, #1
 801a14a:	4622      	mov	r2, r4
 801a14c:	4641      	mov	r1, r8
 801a14e:	4638      	mov	r0, r7
 801a150:	47c8      	blx	r9
 801a152:	3001      	adds	r0, #1
 801a154:	d0e6      	beq.n	801a124 <_printf_common+0xa4>
 801a156:	3601      	adds	r6, #1
 801a158:	e7d9      	b.n	801a10e <_printf_common+0x8e>
	...

0801a15c <_printf_i>:
 801a15c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a160:	7e0f      	ldrb	r7, [r1, #24]
 801a162:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a164:	2f78      	cmp	r7, #120	@ 0x78
 801a166:	4691      	mov	r9, r2
 801a168:	4680      	mov	r8, r0
 801a16a:	460c      	mov	r4, r1
 801a16c:	469a      	mov	sl, r3
 801a16e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a172:	d807      	bhi.n	801a184 <_printf_i+0x28>
 801a174:	2f62      	cmp	r7, #98	@ 0x62
 801a176:	d80a      	bhi.n	801a18e <_printf_i+0x32>
 801a178:	2f00      	cmp	r7, #0
 801a17a:	f000 80d2 	beq.w	801a322 <_printf_i+0x1c6>
 801a17e:	2f58      	cmp	r7, #88	@ 0x58
 801a180:	f000 80b9 	beq.w	801a2f6 <_printf_i+0x19a>
 801a184:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a188:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a18c:	e03a      	b.n	801a204 <_printf_i+0xa8>
 801a18e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a192:	2b15      	cmp	r3, #21
 801a194:	d8f6      	bhi.n	801a184 <_printf_i+0x28>
 801a196:	a101      	add	r1, pc, #4	@ (adr r1, 801a19c <_printf_i+0x40>)
 801a198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a19c:	0801a1f5 	.word	0x0801a1f5
 801a1a0:	0801a209 	.word	0x0801a209
 801a1a4:	0801a185 	.word	0x0801a185
 801a1a8:	0801a185 	.word	0x0801a185
 801a1ac:	0801a185 	.word	0x0801a185
 801a1b0:	0801a185 	.word	0x0801a185
 801a1b4:	0801a209 	.word	0x0801a209
 801a1b8:	0801a185 	.word	0x0801a185
 801a1bc:	0801a185 	.word	0x0801a185
 801a1c0:	0801a185 	.word	0x0801a185
 801a1c4:	0801a185 	.word	0x0801a185
 801a1c8:	0801a309 	.word	0x0801a309
 801a1cc:	0801a233 	.word	0x0801a233
 801a1d0:	0801a2c3 	.word	0x0801a2c3
 801a1d4:	0801a185 	.word	0x0801a185
 801a1d8:	0801a185 	.word	0x0801a185
 801a1dc:	0801a32b 	.word	0x0801a32b
 801a1e0:	0801a185 	.word	0x0801a185
 801a1e4:	0801a233 	.word	0x0801a233
 801a1e8:	0801a185 	.word	0x0801a185
 801a1ec:	0801a185 	.word	0x0801a185
 801a1f0:	0801a2cb 	.word	0x0801a2cb
 801a1f4:	6833      	ldr	r3, [r6, #0]
 801a1f6:	1d1a      	adds	r2, r3, #4
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	6032      	str	r2, [r6, #0]
 801a1fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a200:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a204:	2301      	movs	r3, #1
 801a206:	e09d      	b.n	801a344 <_printf_i+0x1e8>
 801a208:	6833      	ldr	r3, [r6, #0]
 801a20a:	6820      	ldr	r0, [r4, #0]
 801a20c:	1d19      	adds	r1, r3, #4
 801a20e:	6031      	str	r1, [r6, #0]
 801a210:	0606      	lsls	r6, r0, #24
 801a212:	d501      	bpl.n	801a218 <_printf_i+0xbc>
 801a214:	681d      	ldr	r5, [r3, #0]
 801a216:	e003      	b.n	801a220 <_printf_i+0xc4>
 801a218:	0645      	lsls	r5, r0, #25
 801a21a:	d5fb      	bpl.n	801a214 <_printf_i+0xb8>
 801a21c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a220:	2d00      	cmp	r5, #0
 801a222:	da03      	bge.n	801a22c <_printf_i+0xd0>
 801a224:	232d      	movs	r3, #45	@ 0x2d
 801a226:	426d      	negs	r5, r5
 801a228:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a22c:	4859      	ldr	r0, [pc, #356]	@ (801a394 <_printf_i+0x238>)
 801a22e:	230a      	movs	r3, #10
 801a230:	e011      	b.n	801a256 <_printf_i+0xfa>
 801a232:	6821      	ldr	r1, [r4, #0]
 801a234:	6833      	ldr	r3, [r6, #0]
 801a236:	0608      	lsls	r0, r1, #24
 801a238:	f853 5b04 	ldr.w	r5, [r3], #4
 801a23c:	d402      	bmi.n	801a244 <_printf_i+0xe8>
 801a23e:	0649      	lsls	r1, r1, #25
 801a240:	bf48      	it	mi
 801a242:	b2ad      	uxthmi	r5, r5
 801a244:	2f6f      	cmp	r7, #111	@ 0x6f
 801a246:	4853      	ldr	r0, [pc, #332]	@ (801a394 <_printf_i+0x238>)
 801a248:	6033      	str	r3, [r6, #0]
 801a24a:	bf14      	ite	ne
 801a24c:	230a      	movne	r3, #10
 801a24e:	2308      	moveq	r3, #8
 801a250:	2100      	movs	r1, #0
 801a252:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a256:	6866      	ldr	r6, [r4, #4]
 801a258:	60a6      	str	r6, [r4, #8]
 801a25a:	2e00      	cmp	r6, #0
 801a25c:	bfa2      	ittt	ge
 801a25e:	6821      	ldrge	r1, [r4, #0]
 801a260:	f021 0104 	bicge.w	r1, r1, #4
 801a264:	6021      	strge	r1, [r4, #0]
 801a266:	b90d      	cbnz	r5, 801a26c <_printf_i+0x110>
 801a268:	2e00      	cmp	r6, #0
 801a26a:	d04b      	beq.n	801a304 <_printf_i+0x1a8>
 801a26c:	4616      	mov	r6, r2
 801a26e:	fbb5 f1f3 	udiv	r1, r5, r3
 801a272:	fb03 5711 	mls	r7, r3, r1, r5
 801a276:	5dc7      	ldrb	r7, [r0, r7]
 801a278:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a27c:	462f      	mov	r7, r5
 801a27e:	42bb      	cmp	r3, r7
 801a280:	460d      	mov	r5, r1
 801a282:	d9f4      	bls.n	801a26e <_printf_i+0x112>
 801a284:	2b08      	cmp	r3, #8
 801a286:	d10b      	bne.n	801a2a0 <_printf_i+0x144>
 801a288:	6823      	ldr	r3, [r4, #0]
 801a28a:	07df      	lsls	r7, r3, #31
 801a28c:	d508      	bpl.n	801a2a0 <_printf_i+0x144>
 801a28e:	6923      	ldr	r3, [r4, #16]
 801a290:	6861      	ldr	r1, [r4, #4]
 801a292:	4299      	cmp	r1, r3
 801a294:	bfde      	ittt	le
 801a296:	2330      	movle	r3, #48	@ 0x30
 801a298:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a29c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801a2a0:	1b92      	subs	r2, r2, r6
 801a2a2:	6122      	str	r2, [r4, #16]
 801a2a4:	f8cd a000 	str.w	sl, [sp]
 801a2a8:	464b      	mov	r3, r9
 801a2aa:	aa03      	add	r2, sp, #12
 801a2ac:	4621      	mov	r1, r4
 801a2ae:	4640      	mov	r0, r8
 801a2b0:	f7ff fee6 	bl	801a080 <_printf_common>
 801a2b4:	3001      	adds	r0, #1
 801a2b6:	d14a      	bne.n	801a34e <_printf_i+0x1f2>
 801a2b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a2bc:	b004      	add	sp, #16
 801a2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2c2:	6823      	ldr	r3, [r4, #0]
 801a2c4:	f043 0320 	orr.w	r3, r3, #32
 801a2c8:	6023      	str	r3, [r4, #0]
 801a2ca:	4833      	ldr	r0, [pc, #204]	@ (801a398 <_printf_i+0x23c>)
 801a2cc:	2778      	movs	r7, #120	@ 0x78
 801a2ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a2d2:	6823      	ldr	r3, [r4, #0]
 801a2d4:	6831      	ldr	r1, [r6, #0]
 801a2d6:	061f      	lsls	r7, r3, #24
 801a2d8:	f851 5b04 	ldr.w	r5, [r1], #4
 801a2dc:	d402      	bmi.n	801a2e4 <_printf_i+0x188>
 801a2de:	065f      	lsls	r7, r3, #25
 801a2e0:	bf48      	it	mi
 801a2e2:	b2ad      	uxthmi	r5, r5
 801a2e4:	6031      	str	r1, [r6, #0]
 801a2e6:	07d9      	lsls	r1, r3, #31
 801a2e8:	bf44      	itt	mi
 801a2ea:	f043 0320 	orrmi.w	r3, r3, #32
 801a2ee:	6023      	strmi	r3, [r4, #0]
 801a2f0:	b11d      	cbz	r5, 801a2fa <_printf_i+0x19e>
 801a2f2:	2310      	movs	r3, #16
 801a2f4:	e7ac      	b.n	801a250 <_printf_i+0xf4>
 801a2f6:	4827      	ldr	r0, [pc, #156]	@ (801a394 <_printf_i+0x238>)
 801a2f8:	e7e9      	b.n	801a2ce <_printf_i+0x172>
 801a2fa:	6823      	ldr	r3, [r4, #0]
 801a2fc:	f023 0320 	bic.w	r3, r3, #32
 801a300:	6023      	str	r3, [r4, #0]
 801a302:	e7f6      	b.n	801a2f2 <_printf_i+0x196>
 801a304:	4616      	mov	r6, r2
 801a306:	e7bd      	b.n	801a284 <_printf_i+0x128>
 801a308:	6833      	ldr	r3, [r6, #0]
 801a30a:	6825      	ldr	r5, [r4, #0]
 801a30c:	6961      	ldr	r1, [r4, #20]
 801a30e:	1d18      	adds	r0, r3, #4
 801a310:	6030      	str	r0, [r6, #0]
 801a312:	062e      	lsls	r6, r5, #24
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	d501      	bpl.n	801a31c <_printf_i+0x1c0>
 801a318:	6019      	str	r1, [r3, #0]
 801a31a:	e002      	b.n	801a322 <_printf_i+0x1c6>
 801a31c:	0668      	lsls	r0, r5, #25
 801a31e:	d5fb      	bpl.n	801a318 <_printf_i+0x1bc>
 801a320:	8019      	strh	r1, [r3, #0]
 801a322:	2300      	movs	r3, #0
 801a324:	6123      	str	r3, [r4, #16]
 801a326:	4616      	mov	r6, r2
 801a328:	e7bc      	b.n	801a2a4 <_printf_i+0x148>
 801a32a:	6833      	ldr	r3, [r6, #0]
 801a32c:	1d1a      	adds	r2, r3, #4
 801a32e:	6032      	str	r2, [r6, #0]
 801a330:	681e      	ldr	r6, [r3, #0]
 801a332:	6862      	ldr	r2, [r4, #4]
 801a334:	2100      	movs	r1, #0
 801a336:	4630      	mov	r0, r6
 801a338:	f7e5 ff8a 	bl	8000250 <memchr>
 801a33c:	b108      	cbz	r0, 801a342 <_printf_i+0x1e6>
 801a33e:	1b80      	subs	r0, r0, r6
 801a340:	6060      	str	r0, [r4, #4]
 801a342:	6863      	ldr	r3, [r4, #4]
 801a344:	6123      	str	r3, [r4, #16]
 801a346:	2300      	movs	r3, #0
 801a348:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a34c:	e7aa      	b.n	801a2a4 <_printf_i+0x148>
 801a34e:	6923      	ldr	r3, [r4, #16]
 801a350:	4632      	mov	r2, r6
 801a352:	4649      	mov	r1, r9
 801a354:	4640      	mov	r0, r8
 801a356:	47d0      	blx	sl
 801a358:	3001      	adds	r0, #1
 801a35a:	d0ad      	beq.n	801a2b8 <_printf_i+0x15c>
 801a35c:	6823      	ldr	r3, [r4, #0]
 801a35e:	079b      	lsls	r3, r3, #30
 801a360:	d413      	bmi.n	801a38a <_printf_i+0x22e>
 801a362:	68e0      	ldr	r0, [r4, #12]
 801a364:	9b03      	ldr	r3, [sp, #12]
 801a366:	4298      	cmp	r0, r3
 801a368:	bfb8      	it	lt
 801a36a:	4618      	movlt	r0, r3
 801a36c:	e7a6      	b.n	801a2bc <_printf_i+0x160>
 801a36e:	2301      	movs	r3, #1
 801a370:	4632      	mov	r2, r6
 801a372:	4649      	mov	r1, r9
 801a374:	4640      	mov	r0, r8
 801a376:	47d0      	blx	sl
 801a378:	3001      	adds	r0, #1
 801a37a:	d09d      	beq.n	801a2b8 <_printf_i+0x15c>
 801a37c:	3501      	adds	r5, #1
 801a37e:	68e3      	ldr	r3, [r4, #12]
 801a380:	9903      	ldr	r1, [sp, #12]
 801a382:	1a5b      	subs	r3, r3, r1
 801a384:	42ab      	cmp	r3, r5
 801a386:	dcf2      	bgt.n	801a36e <_printf_i+0x212>
 801a388:	e7eb      	b.n	801a362 <_printf_i+0x206>
 801a38a:	2500      	movs	r5, #0
 801a38c:	f104 0619 	add.w	r6, r4, #25
 801a390:	e7f5      	b.n	801a37e <_printf_i+0x222>
 801a392:	bf00      	nop
 801a394:	0801c79f 	.word	0x0801c79f
 801a398:	0801c7b0 	.word	0x0801c7b0

0801a39c <__sflush_r>:
 801a39c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3a4:	0716      	lsls	r6, r2, #28
 801a3a6:	4605      	mov	r5, r0
 801a3a8:	460c      	mov	r4, r1
 801a3aa:	d454      	bmi.n	801a456 <__sflush_r+0xba>
 801a3ac:	684b      	ldr	r3, [r1, #4]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	dc02      	bgt.n	801a3b8 <__sflush_r+0x1c>
 801a3b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	dd48      	ble.n	801a44a <__sflush_r+0xae>
 801a3b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a3ba:	2e00      	cmp	r6, #0
 801a3bc:	d045      	beq.n	801a44a <__sflush_r+0xae>
 801a3be:	2300      	movs	r3, #0
 801a3c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a3c4:	682f      	ldr	r7, [r5, #0]
 801a3c6:	6a21      	ldr	r1, [r4, #32]
 801a3c8:	602b      	str	r3, [r5, #0]
 801a3ca:	d030      	beq.n	801a42e <__sflush_r+0x92>
 801a3cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a3ce:	89a3      	ldrh	r3, [r4, #12]
 801a3d0:	0759      	lsls	r1, r3, #29
 801a3d2:	d505      	bpl.n	801a3e0 <__sflush_r+0x44>
 801a3d4:	6863      	ldr	r3, [r4, #4]
 801a3d6:	1ad2      	subs	r2, r2, r3
 801a3d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a3da:	b10b      	cbz	r3, 801a3e0 <__sflush_r+0x44>
 801a3dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a3de:	1ad2      	subs	r2, r2, r3
 801a3e0:	2300      	movs	r3, #0
 801a3e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a3e4:	6a21      	ldr	r1, [r4, #32]
 801a3e6:	4628      	mov	r0, r5
 801a3e8:	47b0      	blx	r6
 801a3ea:	1c43      	adds	r3, r0, #1
 801a3ec:	89a3      	ldrh	r3, [r4, #12]
 801a3ee:	d106      	bne.n	801a3fe <__sflush_r+0x62>
 801a3f0:	6829      	ldr	r1, [r5, #0]
 801a3f2:	291d      	cmp	r1, #29
 801a3f4:	d82b      	bhi.n	801a44e <__sflush_r+0xb2>
 801a3f6:	4a2a      	ldr	r2, [pc, #168]	@ (801a4a0 <__sflush_r+0x104>)
 801a3f8:	410a      	asrs	r2, r1
 801a3fa:	07d6      	lsls	r6, r2, #31
 801a3fc:	d427      	bmi.n	801a44e <__sflush_r+0xb2>
 801a3fe:	2200      	movs	r2, #0
 801a400:	6062      	str	r2, [r4, #4]
 801a402:	04d9      	lsls	r1, r3, #19
 801a404:	6922      	ldr	r2, [r4, #16]
 801a406:	6022      	str	r2, [r4, #0]
 801a408:	d504      	bpl.n	801a414 <__sflush_r+0x78>
 801a40a:	1c42      	adds	r2, r0, #1
 801a40c:	d101      	bne.n	801a412 <__sflush_r+0x76>
 801a40e:	682b      	ldr	r3, [r5, #0]
 801a410:	b903      	cbnz	r3, 801a414 <__sflush_r+0x78>
 801a412:	6560      	str	r0, [r4, #84]	@ 0x54
 801a414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a416:	602f      	str	r7, [r5, #0]
 801a418:	b1b9      	cbz	r1, 801a44a <__sflush_r+0xae>
 801a41a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a41e:	4299      	cmp	r1, r3
 801a420:	d002      	beq.n	801a428 <__sflush_r+0x8c>
 801a422:	4628      	mov	r0, r5
 801a424:	f7ff fb40 	bl	8019aa8 <_free_r>
 801a428:	2300      	movs	r3, #0
 801a42a:	6363      	str	r3, [r4, #52]	@ 0x34
 801a42c:	e00d      	b.n	801a44a <__sflush_r+0xae>
 801a42e:	2301      	movs	r3, #1
 801a430:	4628      	mov	r0, r5
 801a432:	47b0      	blx	r6
 801a434:	4602      	mov	r2, r0
 801a436:	1c50      	adds	r0, r2, #1
 801a438:	d1c9      	bne.n	801a3ce <__sflush_r+0x32>
 801a43a:	682b      	ldr	r3, [r5, #0]
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d0c6      	beq.n	801a3ce <__sflush_r+0x32>
 801a440:	2b1d      	cmp	r3, #29
 801a442:	d001      	beq.n	801a448 <__sflush_r+0xac>
 801a444:	2b16      	cmp	r3, #22
 801a446:	d11e      	bne.n	801a486 <__sflush_r+0xea>
 801a448:	602f      	str	r7, [r5, #0]
 801a44a:	2000      	movs	r0, #0
 801a44c:	e022      	b.n	801a494 <__sflush_r+0xf8>
 801a44e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a452:	b21b      	sxth	r3, r3
 801a454:	e01b      	b.n	801a48e <__sflush_r+0xf2>
 801a456:	690f      	ldr	r7, [r1, #16]
 801a458:	2f00      	cmp	r7, #0
 801a45a:	d0f6      	beq.n	801a44a <__sflush_r+0xae>
 801a45c:	0793      	lsls	r3, r2, #30
 801a45e:	680e      	ldr	r6, [r1, #0]
 801a460:	bf08      	it	eq
 801a462:	694b      	ldreq	r3, [r1, #20]
 801a464:	600f      	str	r7, [r1, #0]
 801a466:	bf18      	it	ne
 801a468:	2300      	movne	r3, #0
 801a46a:	eba6 0807 	sub.w	r8, r6, r7
 801a46e:	608b      	str	r3, [r1, #8]
 801a470:	f1b8 0f00 	cmp.w	r8, #0
 801a474:	dde9      	ble.n	801a44a <__sflush_r+0xae>
 801a476:	6a21      	ldr	r1, [r4, #32]
 801a478:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a47a:	4643      	mov	r3, r8
 801a47c:	463a      	mov	r2, r7
 801a47e:	4628      	mov	r0, r5
 801a480:	47b0      	blx	r6
 801a482:	2800      	cmp	r0, #0
 801a484:	dc08      	bgt.n	801a498 <__sflush_r+0xfc>
 801a486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a48a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a48e:	81a3      	strh	r3, [r4, #12]
 801a490:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a498:	4407      	add	r7, r0
 801a49a:	eba8 0800 	sub.w	r8, r8, r0
 801a49e:	e7e7      	b.n	801a470 <__sflush_r+0xd4>
 801a4a0:	dfbffffe 	.word	0xdfbffffe

0801a4a4 <_fflush_r>:
 801a4a4:	b538      	push	{r3, r4, r5, lr}
 801a4a6:	690b      	ldr	r3, [r1, #16]
 801a4a8:	4605      	mov	r5, r0
 801a4aa:	460c      	mov	r4, r1
 801a4ac:	b913      	cbnz	r3, 801a4b4 <_fflush_r+0x10>
 801a4ae:	2500      	movs	r5, #0
 801a4b0:	4628      	mov	r0, r5
 801a4b2:	bd38      	pop	{r3, r4, r5, pc}
 801a4b4:	b118      	cbz	r0, 801a4be <_fflush_r+0x1a>
 801a4b6:	6a03      	ldr	r3, [r0, #32]
 801a4b8:	b90b      	cbnz	r3, 801a4be <_fflush_r+0x1a>
 801a4ba:	f7fe ffe3 	bl	8019484 <__sinit>
 801a4be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d0f3      	beq.n	801a4ae <_fflush_r+0xa>
 801a4c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a4c8:	07d0      	lsls	r0, r2, #31
 801a4ca:	d404      	bmi.n	801a4d6 <_fflush_r+0x32>
 801a4cc:	0599      	lsls	r1, r3, #22
 801a4ce:	d402      	bmi.n	801a4d6 <_fflush_r+0x32>
 801a4d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a4d2:	f7ff faa6 	bl	8019a22 <__retarget_lock_acquire_recursive>
 801a4d6:	4628      	mov	r0, r5
 801a4d8:	4621      	mov	r1, r4
 801a4da:	f7ff ff5f 	bl	801a39c <__sflush_r>
 801a4de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a4e0:	07da      	lsls	r2, r3, #31
 801a4e2:	4605      	mov	r5, r0
 801a4e4:	d4e4      	bmi.n	801a4b0 <_fflush_r+0xc>
 801a4e6:	89a3      	ldrh	r3, [r4, #12]
 801a4e8:	059b      	lsls	r3, r3, #22
 801a4ea:	d4e1      	bmi.n	801a4b0 <_fflush_r+0xc>
 801a4ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a4ee:	f7ff fa99 	bl	8019a24 <__retarget_lock_release_recursive>
 801a4f2:	e7dd      	b.n	801a4b0 <_fflush_r+0xc>

0801a4f4 <fiprintf>:
 801a4f4:	b40e      	push	{r1, r2, r3}
 801a4f6:	b503      	push	{r0, r1, lr}
 801a4f8:	4601      	mov	r1, r0
 801a4fa:	ab03      	add	r3, sp, #12
 801a4fc:	4805      	ldr	r0, [pc, #20]	@ (801a514 <fiprintf+0x20>)
 801a4fe:	f853 2b04 	ldr.w	r2, [r3], #4
 801a502:	6800      	ldr	r0, [r0, #0]
 801a504:	9301      	str	r3, [sp, #4]
 801a506:	f7ff fca3 	bl	8019e50 <_vfiprintf_r>
 801a50a:	b002      	add	sp, #8
 801a50c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a510:	b003      	add	sp, #12
 801a512:	4770      	bx	lr
 801a514:	200009c0 	.word	0x200009c0

0801a518 <__swhatbuf_r>:
 801a518:	b570      	push	{r4, r5, r6, lr}
 801a51a:	460c      	mov	r4, r1
 801a51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a520:	2900      	cmp	r1, #0
 801a522:	b096      	sub	sp, #88	@ 0x58
 801a524:	4615      	mov	r5, r2
 801a526:	461e      	mov	r6, r3
 801a528:	da0d      	bge.n	801a546 <__swhatbuf_r+0x2e>
 801a52a:	89a3      	ldrh	r3, [r4, #12]
 801a52c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a530:	f04f 0100 	mov.w	r1, #0
 801a534:	bf14      	ite	ne
 801a536:	2340      	movne	r3, #64	@ 0x40
 801a538:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a53c:	2000      	movs	r0, #0
 801a53e:	6031      	str	r1, [r6, #0]
 801a540:	602b      	str	r3, [r5, #0]
 801a542:	b016      	add	sp, #88	@ 0x58
 801a544:	bd70      	pop	{r4, r5, r6, pc}
 801a546:	466a      	mov	r2, sp
 801a548:	f000 f848 	bl	801a5dc <_fstat_r>
 801a54c:	2800      	cmp	r0, #0
 801a54e:	dbec      	blt.n	801a52a <__swhatbuf_r+0x12>
 801a550:	9901      	ldr	r1, [sp, #4]
 801a552:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a556:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a55a:	4259      	negs	r1, r3
 801a55c:	4159      	adcs	r1, r3
 801a55e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a562:	e7eb      	b.n	801a53c <__swhatbuf_r+0x24>

0801a564 <__smakebuf_r>:
 801a564:	898b      	ldrh	r3, [r1, #12]
 801a566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a568:	079d      	lsls	r5, r3, #30
 801a56a:	4606      	mov	r6, r0
 801a56c:	460c      	mov	r4, r1
 801a56e:	d507      	bpl.n	801a580 <__smakebuf_r+0x1c>
 801a570:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a574:	6023      	str	r3, [r4, #0]
 801a576:	6123      	str	r3, [r4, #16]
 801a578:	2301      	movs	r3, #1
 801a57a:	6163      	str	r3, [r4, #20]
 801a57c:	b003      	add	sp, #12
 801a57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a580:	ab01      	add	r3, sp, #4
 801a582:	466a      	mov	r2, sp
 801a584:	f7ff ffc8 	bl	801a518 <__swhatbuf_r>
 801a588:	9f00      	ldr	r7, [sp, #0]
 801a58a:	4605      	mov	r5, r0
 801a58c:	4639      	mov	r1, r7
 801a58e:	4630      	mov	r0, r6
 801a590:	f7fe fd46 	bl	8019020 <_malloc_r>
 801a594:	b948      	cbnz	r0, 801a5aa <__smakebuf_r+0x46>
 801a596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a59a:	059a      	lsls	r2, r3, #22
 801a59c:	d4ee      	bmi.n	801a57c <__smakebuf_r+0x18>
 801a59e:	f023 0303 	bic.w	r3, r3, #3
 801a5a2:	f043 0302 	orr.w	r3, r3, #2
 801a5a6:	81a3      	strh	r3, [r4, #12]
 801a5a8:	e7e2      	b.n	801a570 <__smakebuf_r+0xc>
 801a5aa:	89a3      	ldrh	r3, [r4, #12]
 801a5ac:	6020      	str	r0, [r4, #0]
 801a5ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a5b2:	81a3      	strh	r3, [r4, #12]
 801a5b4:	9b01      	ldr	r3, [sp, #4]
 801a5b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a5ba:	b15b      	cbz	r3, 801a5d4 <__smakebuf_r+0x70>
 801a5bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a5c0:	4630      	mov	r0, r6
 801a5c2:	f000 f81d 	bl	801a600 <_isatty_r>
 801a5c6:	b128      	cbz	r0, 801a5d4 <__smakebuf_r+0x70>
 801a5c8:	89a3      	ldrh	r3, [r4, #12]
 801a5ca:	f023 0303 	bic.w	r3, r3, #3
 801a5ce:	f043 0301 	orr.w	r3, r3, #1
 801a5d2:	81a3      	strh	r3, [r4, #12]
 801a5d4:	89a3      	ldrh	r3, [r4, #12]
 801a5d6:	431d      	orrs	r5, r3
 801a5d8:	81a5      	strh	r5, [r4, #12]
 801a5da:	e7cf      	b.n	801a57c <__smakebuf_r+0x18>

0801a5dc <_fstat_r>:
 801a5dc:	b538      	push	{r3, r4, r5, lr}
 801a5de:	4d07      	ldr	r5, [pc, #28]	@ (801a5fc <_fstat_r+0x20>)
 801a5e0:	2300      	movs	r3, #0
 801a5e2:	4604      	mov	r4, r0
 801a5e4:	4608      	mov	r0, r1
 801a5e6:	4611      	mov	r1, r2
 801a5e8:	602b      	str	r3, [r5, #0]
 801a5ea:	f7e7 fedf 	bl	80023ac <_fstat>
 801a5ee:	1c43      	adds	r3, r0, #1
 801a5f0:	d102      	bne.n	801a5f8 <_fstat_r+0x1c>
 801a5f2:	682b      	ldr	r3, [r5, #0]
 801a5f4:	b103      	cbz	r3, 801a5f8 <_fstat_r+0x1c>
 801a5f6:	6023      	str	r3, [r4, #0]
 801a5f8:	bd38      	pop	{r3, r4, r5, pc}
 801a5fa:	bf00      	nop
 801a5fc:	2000bb24 	.word	0x2000bb24

0801a600 <_isatty_r>:
 801a600:	b538      	push	{r3, r4, r5, lr}
 801a602:	4d06      	ldr	r5, [pc, #24]	@ (801a61c <_isatty_r+0x1c>)
 801a604:	2300      	movs	r3, #0
 801a606:	4604      	mov	r4, r0
 801a608:	4608      	mov	r0, r1
 801a60a:	602b      	str	r3, [r5, #0]
 801a60c:	f7e7 fede 	bl	80023cc <_isatty>
 801a610:	1c43      	adds	r3, r0, #1
 801a612:	d102      	bne.n	801a61a <_isatty_r+0x1a>
 801a614:	682b      	ldr	r3, [r5, #0]
 801a616:	b103      	cbz	r3, 801a61a <_isatty_r+0x1a>
 801a618:	6023      	str	r3, [r4, #0]
 801a61a:	bd38      	pop	{r3, r4, r5, pc}
 801a61c:	2000bb24 	.word	0x2000bb24

0801a620 <abort>:
 801a620:	b508      	push	{r3, lr}
 801a622:	2006      	movs	r0, #6
 801a624:	f000 f82c 	bl	801a680 <raise>
 801a628:	2001      	movs	r0, #1
 801a62a:	f7e7 fe6f 	bl	800230c <_exit>

0801a62e <_raise_r>:
 801a62e:	291f      	cmp	r1, #31
 801a630:	b538      	push	{r3, r4, r5, lr}
 801a632:	4605      	mov	r5, r0
 801a634:	460c      	mov	r4, r1
 801a636:	d904      	bls.n	801a642 <_raise_r+0x14>
 801a638:	2316      	movs	r3, #22
 801a63a:	6003      	str	r3, [r0, #0]
 801a63c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a640:	bd38      	pop	{r3, r4, r5, pc}
 801a642:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a644:	b112      	cbz	r2, 801a64c <_raise_r+0x1e>
 801a646:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a64a:	b94b      	cbnz	r3, 801a660 <_raise_r+0x32>
 801a64c:	4628      	mov	r0, r5
 801a64e:	f000 f831 	bl	801a6b4 <_getpid_r>
 801a652:	4622      	mov	r2, r4
 801a654:	4601      	mov	r1, r0
 801a656:	4628      	mov	r0, r5
 801a658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a65c:	f000 b818 	b.w	801a690 <_kill_r>
 801a660:	2b01      	cmp	r3, #1
 801a662:	d00a      	beq.n	801a67a <_raise_r+0x4c>
 801a664:	1c59      	adds	r1, r3, #1
 801a666:	d103      	bne.n	801a670 <_raise_r+0x42>
 801a668:	2316      	movs	r3, #22
 801a66a:	6003      	str	r3, [r0, #0]
 801a66c:	2001      	movs	r0, #1
 801a66e:	e7e7      	b.n	801a640 <_raise_r+0x12>
 801a670:	2100      	movs	r1, #0
 801a672:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a676:	4620      	mov	r0, r4
 801a678:	4798      	blx	r3
 801a67a:	2000      	movs	r0, #0
 801a67c:	e7e0      	b.n	801a640 <_raise_r+0x12>
	...

0801a680 <raise>:
 801a680:	4b02      	ldr	r3, [pc, #8]	@ (801a68c <raise+0xc>)
 801a682:	4601      	mov	r1, r0
 801a684:	6818      	ldr	r0, [r3, #0]
 801a686:	f7ff bfd2 	b.w	801a62e <_raise_r>
 801a68a:	bf00      	nop
 801a68c:	200009c0 	.word	0x200009c0

0801a690 <_kill_r>:
 801a690:	b538      	push	{r3, r4, r5, lr}
 801a692:	4d07      	ldr	r5, [pc, #28]	@ (801a6b0 <_kill_r+0x20>)
 801a694:	2300      	movs	r3, #0
 801a696:	4604      	mov	r4, r0
 801a698:	4608      	mov	r0, r1
 801a69a:	4611      	mov	r1, r2
 801a69c:	602b      	str	r3, [r5, #0]
 801a69e:	f7e7 fe25 	bl	80022ec <_kill>
 801a6a2:	1c43      	adds	r3, r0, #1
 801a6a4:	d102      	bne.n	801a6ac <_kill_r+0x1c>
 801a6a6:	682b      	ldr	r3, [r5, #0]
 801a6a8:	b103      	cbz	r3, 801a6ac <_kill_r+0x1c>
 801a6aa:	6023      	str	r3, [r4, #0]
 801a6ac:	bd38      	pop	{r3, r4, r5, pc}
 801a6ae:	bf00      	nop
 801a6b0:	2000bb24 	.word	0x2000bb24

0801a6b4 <_getpid_r>:
 801a6b4:	f7e7 be12 	b.w	80022dc <_getpid>

0801a6b8 <atan2>:
 801a6b8:	f000 baaa 	b.w	801ac10 <__ieee754_atan2>

0801a6bc <sqrt>:
 801a6bc:	b538      	push	{r3, r4, r5, lr}
 801a6be:	ed2d 8b02 	vpush	{d8}
 801a6c2:	ec55 4b10 	vmov	r4, r5, d0
 801a6c6:	f000 f9c7 	bl	801aa58 <__ieee754_sqrt>
 801a6ca:	4622      	mov	r2, r4
 801a6cc:	462b      	mov	r3, r5
 801a6ce:	4620      	mov	r0, r4
 801a6d0:	4629      	mov	r1, r5
 801a6d2:	eeb0 8a40 	vmov.f32	s16, s0
 801a6d6:	eef0 8a60 	vmov.f32	s17, s1
 801a6da:	f7e6 fa5f 	bl	8000b9c <__aeabi_dcmpun>
 801a6de:	b990      	cbnz	r0, 801a706 <sqrt+0x4a>
 801a6e0:	2200      	movs	r2, #0
 801a6e2:	2300      	movs	r3, #0
 801a6e4:	4620      	mov	r0, r4
 801a6e6:	4629      	mov	r1, r5
 801a6e8:	f7e6 fa30 	bl	8000b4c <__aeabi_dcmplt>
 801a6ec:	b158      	cbz	r0, 801a706 <sqrt+0x4a>
 801a6ee:	f7ff f96d 	bl	80199cc <__errno>
 801a6f2:	2321      	movs	r3, #33	@ 0x21
 801a6f4:	6003      	str	r3, [r0, #0]
 801a6f6:	2200      	movs	r2, #0
 801a6f8:	2300      	movs	r3, #0
 801a6fa:	4610      	mov	r0, r2
 801a6fc:	4619      	mov	r1, r3
 801a6fe:	f7e6 f8dd 	bl	80008bc <__aeabi_ddiv>
 801a702:	ec41 0b18 	vmov	d8, r0, r1
 801a706:	eeb0 0a48 	vmov.f32	s0, s16
 801a70a:	eef0 0a68 	vmov.f32	s1, s17
 801a70e:	ecbd 8b02 	vpop	{d8}
 801a712:	bd38      	pop	{r3, r4, r5, pc}
 801a714:	0000      	movs	r0, r0
	...

0801a718 <atan>:
 801a718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a71c:	ec55 4b10 	vmov	r4, r5, d0
 801a720:	4bbf      	ldr	r3, [pc, #764]	@ (801aa20 <atan+0x308>)
 801a722:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801a726:	429e      	cmp	r6, r3
 801a728:	46ab      	mov	fp, r5
 801a72a:	d918      	bls.n	801a75e <atan+0x46>
 801a72c:	4bbd      	ldr	r3, [pc, #756]	@ (801aa24 <atan+0x30c>)
 801a72e:	429e      	cmp	r6, r3
 801a730:	d801      	bhi.n	801a736 <atan+0x1e>
 801a732:	d109      	bne.n	801a748 <atan+0x30>
 801a734:	b144      	cbz	r4, 801a748 <atan+0x30>
 801a736:	4622      	mov	r2, r4
 801a738:	462b      	mov	r3, r5
 801a73a:	4620      	mov	r0, r4
 801a73c:	4629      	mov	r1, r5
 801a73e:	f7e5 fddd 	bl	80002fc <__adddf3>
 801a742:	4604      	mov	r4, r0
 801a744:	460d      	mov	r5, r1
 801a746:	e006      	b.n	801a756 <atan+0x3e>
 801a748:	f1bb 0f00 	cmp.w	fp, #0
 801a74c:	f340 812b 	ble.w	801a9a6 <atan+0x28e>
 801a750:	a597      	add	r5, pc, #604	@ (adr r5, 801a9b0 <atan+0x298>)
 801a752:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a756:	ec45 4b10 	vmov	d0, r4, r5
 801a75a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a75e:	4bb2      	ldr	r3, [pc, #712]	@ (801aa28 <atan+0x310>)
 801a760:	429e      	cmp	r6, r3
 801a762:	d813      	bhi.n	801a78c <atan+0x74>
 801a764:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801a768:	429e      	cmp	r6, r3
 801a76a:	d80c      	bhi.n	801a786 <atan+0x6e>
 801a76c:	a392      	add	r3, pc, #584	@ (adr r3, 801a9b8 <atan+0x2a0>)
 801a76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a772:	4620      	mov	r0, r4
 801a774:	4629      	mov	r1, r5
 801a776:	f7e5 fdc1 	bl	80002fc <__adddf3>
 801a77a:	4bac      	ldr	r3, [pc, #688]	@ (801aa2c <atan+0x314>)
 801a77c:	2200      	movs	r2, #0
 801a77e:	f7e6 fa03 	bl	8000b88 <__aeabi_dcmpgt>
 801a782:	2800      	cmp	r0, #0
 801a784:	d1e7      	bne.n	801a756 <atan+0x3e>
 801a786:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801a78a:	e029      	b.n	801a7e0 <atan+0xc8>
 801a78c:	f000 f95c 	bl	801aa48 <fabs>
 801a790:	4ba7      	ldr	r3, [pc, #668]	@ (801aa30 <atan+0x318>)
 801a792:	429e      	cmp	r6, r3
 801a794:	ec55 4b10 	vmov	r4, r5, d0
 801a798:	f200 80bc 	bhi.w	801a914 <atan+0x1fc>
 801a79c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801a7a0:	429e      	cmp	r6, r3
 801a7a2:	f200 809e 	bhi.w	801a8e2 <atan+0x1ca>
 801a7a6:	4622      	mov	r2, r4
 801a7a8:	462b      	mov	r3, r5
 801a7aa:	4620      	mov	r0, r4
 801a7ac:	4629      	mov	r1, r5
 801a7ae:	f7e5 fda5 	bl	80002fc <__adddf3>
 801a7b2:	4b9e      	ldr	r3, [pc, #632]	@ (801aa2c <atan+0x314>)
 801a7b4:	2200      	movs	r2, #0
 801a7b6:	f7e5 fd9f 	bl	80002f8 <__aeabi_dsub>
 801a7ba:	2200      	movs	r2, #0
 801a7bc:	4606      	mov	r6, r0
 801a7be:	460f      	mov	r7, r1
 801a7c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a7c4:	4620      	mov	r0, r4
 801a7c6:	4629      	mov	r1, r5
 801a7c8:	f7e5 fd98 	bl	80002fc <__adddf3>
 801a7cc:	4602      	mov	r2, r0
 801a7ce:	460b      	mov	r3, r1
 801a7d0:	4630      	mov	r0, r6
 801a7d2:	4639      	mov	r1, r7
 801a7d4:	f7e6 f872 	bl	80008bc <__aeabi_ddiv>
 801a7d8:	f04f 0a00 	mov.w	sl, #0
 801a7dc:	4604      	mov	r4, r0
 801a7de:	460d      	mov	r5, r1
 801a7e0:	4622      	mov	r2, r4
 801a7e2:	462b      	mov	r3, r5
 801a7e4:	4620      	mov	r0, r4
 801a7e6:	4629      	mov	r1, r5
 801a7e8:	f7e5 ff3e 	bl	8000668 <__aeabi_dmul>
 801a7ec:	4602      	mov	r2, r0
 801a7ee:	460b      	mov	r3, r1
 801a7f0:	4680      	mov	r8, r0
 801a7f2:	4689      	mov	r9, r1
 801a7f4:	f7e5 ff38 	bl	8000668 <__aeabi_dmul>
 801a7f8:	a371      	add	r3, pc, #452	@ (adr r3, 801a9c0 <atan+0x2a8>)
 801a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7fe:	4606      	mov	r6, r0
 801a800:	460f      	mov	r7, r1
 801a802:	f7e5 ff31 	bl	8000668 <__aeabi_dmul>
 801a806:	a370      	add	r3, pc, #448	@ (adr r3, 801a9c8 <atan+0x2b0>)
 801a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a80c:	f7e5 fd76 	bl	80002fc <__adddf3>
 801a810:	4632      	mov	r2, r6
 801a812:	463b      	mov	r3, r7
 801a814:	f7e5 ff28 	bl	8000668 <__aeabi_dmul>
 801a818:	a36d      	add	r3, pc, #436	@ (adr r3, 801a9d0 <atan+0x2b8>)
 801a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a81e:	f7e5 fd6d 	bl	80002fc <__adddf3>
 801a822:	4632      	mov	r2, r6
 801a824:	463b      	mov	r3, r7
 801a826:	f7e5 ff1f 	bl	8000668 <__aeabi_dmul>
 801a82a:	a36b      	add	r3, pc, #428	@ (adr r3, 801a9d8 <atan+0x2c0>)
 801a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a830:	f7e5 fd64 	bl	80002fc <__adddf3>
 801a834:	4632      	mov	r2, r6
 801a836:	463b      	mov	r3, r7
 801a838:	f7e5 ff16 	bl	8000668 <__aeabi_dmul>
 801a83c:	a368      	add	r3, pc, #416	@ (adr r3, 801a9e0 <atan+0x2c8>)
 801a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a842:	f7e5 fd5b 	bl	80002fc <__adddf3>
 801a846:	4632      	mov	r2, r6
 801a848:	463b      	mov	r3, r7
 801a84a:	f7e5 ff0d 	bl	8000668 <__aeabi_dmul>
 801a84e:	a366      	add	r3, pc, #408	@ (adr r3, 801a9e8 <atan+0x2d0>)
 801a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a854:	f7e5 fd52 	bl	80002fc <__adddf3>
 801a858:	4642      	mov	r2, r8
 801a85a:	464b      	mov	r3, r9
 801a85c:	f7e5 ff04 	bl	8000668 <__aeabi_dmul>
 801a860:	a363      	add	r3, pc, #396	@ (adr r3, 801a9f0 <atan+0x2d8>)
 801a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a866:	4680      	mov	r8, r0
 801a868:	4689      	mov	r9, r1
 801a86a:	4630      	mov	r0, r6
 801a86c:	4639      	mov	r1, r7
 801a86e:	f7e5 fefb 	bl	8000668 <__aeabi_dmul>
 801a872:	a361      	add	r3, pc, #388	@ (adr r3, 801a9f8 <atan+0x2e0>)
 801a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a878:	f7e5 fd3e 	bl	80002f8 <__aeabi_dsub>
 801a87c:	4632      	mov	r2, r6
 801a87e:	463b      	mov	r3, r7
 801a880:	f7e5 fef2 	bl	8000668 <__aeabi_dmul>
 801a884:	a35e      	add	r3, pc, #376	@ (adr r3, 801aa00 <atan+0x2e8>)
 801a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a88a:	f7e5 fd35 	bl	80002f8 <__aeabi_dsub>
 801a88e:	4632      	mov	r2, r6
 801a890:	463b      	mov	r3, r7
 801a892:	f7e5 fee9 	bl	8000668 <__aeabi_dmul>
 801a896:	a35c      	add	r3, pc, #368	@ (adr r3, 801aa08 <atan+0x2f0>)
 801a898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a89c:	f7e5 fd2c 	bl	80002f8 <__aeabi_dsub>
 801a8a0:	4632      	mov	r2, r6
 801a8a2:	463b      	mov	r3, r7
 801a8a4:	f7e5 fee0 	bl	8000668 <__aeabi_dmul>
 801a8a8:	a359      	add	r3, pc, #356	@ (adr r3, 801aa10 <atan+0x2f8>)
 801a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8ae:	f7e5 fd23 	bl	80002f8 <__aeabi_dsub>
 801a8b2:	4632      	mov	r2, r6
 801a8b4:	463b      	mov	r3, r7
 801a8b6:	f7e5 fed7 	bl	8000668 <__aeabi_dmul>
 801a8ba:	4602      	mov	r2, r0
 801a8bc:	460b      	mov	r3, r1
 801a8be:	4640      	mov	r0, r8
 801a8c0:	4649      	mov	r1, r9
 801a8c2:	f7e5 fd1b 	bl	80002fc <__adddf3>
 801a8c6:	4622      	mov	r2, r4
 801a8c8:	462b      	mov	r3, r5
 801a8ca:	f7e5 fecd 	bl	8000668 <__aeabi_dmul>
 801a8ce:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801a8d2:	4602      	mov	r2, r0
 801a8d4:	460b      	mov	r3, r1
 801a8d6:	d148      	bne.n	801a96a <atan+0x252>
 801a8d8:	4620      	mov	r0, r4
 801a8da:	4629      	mov	r1, r5
 801a8dc:	f7e5 fd0c 	bl	80002f8 <__aeabi_dsub>
 801a8e0:	e72f      	b.n	801a742 <atan+0x2a>
 801a8e2:	4b52      	ldr	r3, [pc, #328]	@ (801aa2c <atan+0x314>)
 801a8e4:	2200      	movs	r2, #0
 801a8e6:	4620      	mov	r0, r4
 801a8e8:	4629      	mov	r1, r5
 801a8ea:	f7e5 fd05 	bl	80002f8 <__aeabi_dsub>
 801a8ee:	4b4f      	ldr	r3, [pc, #316]	@ (801aa2c <atan+0x314>)
 801a8f0:	4606      	mov	r6, r0
 801a8f2:	460f      	mov	r7, r1
 801a8f4:	2200      	movs	r2, #0
 801a8f6:	4620      	mov	r0, r4
 801a8f8:	4629      	mov	r1, r5
 801a8fa:	f7e5 fcff 	bl	80002fc <__adddf3>
 801a8fe:	4602      	mov	r2, r0
 801a900:	460b      	mov	r3, r1
 801a902:	4630      	mov	r0, r6
 801a904:	4639      	mov	r1, r7
 801a906:	f7e5 ffd9 	bl	80008bc <__aeabi_ddiv>
 801a90a:	f04f 0a01 	mov.w	sl, #1
 801a90e:	4604      	mov	r4, r0
 801a910:	460d      	mov	r5, r1
 801a912:	e765      	b.n	801a7e0 <atan+0xc8>
 801a914:	4b47      	ldr	r3, [pc, #284]	@ (801aa34 <atan+0x31c>)
 801a916:	429e      	cmp	r6, r3
 801a918:	d21c      	bcs.n	801a954 <atan+0x23c>
 801a91a:	4b47      	ldr	r3, [pc, #284]	@ (801aa38 <atan+0x320>)
 801a91c:	2200      	movs	r2, #0
 801a91e:	4620      	mov	r0, r4
 801a920:	4629      	mov	r1, r5
 801a922:	f7e5 fce9 	bl	80002f8 <__aeabi_dsub>
 801a926:	4b44      	ldr	r3, [pc, #272]	@ (801aa38 <atan+0x320>)
 801a928:	4606      	mov	r6, r0
 801a92a:	460f      	mov	r7, r1
 801a92c:	2200      	movs	r2, #0
 801a92e:	4620      	mov	r0, r4
 801a930:	4629      	mov	r1, r5
 801a932:	f7e5 fe99 	bl	8000668 <__aeabi_dmul>
 801a936:	4b3d      	ldr	r3, [pc, #244]	@ (801aa2c <atan+0x314>)
 801a938:	2200      	movs	r2, #0
 801a93a:	f7e5 fcdf 	bl	80002fc <__adddf3>
 801a93e:	4602      	mov	r2, r0
 801a940:	460b      	mov	r3, r1
 801a942:	4630      	mov	r0, r6
 801a944:	4639      	mov	r1, r7
 801a946:	f7e5 ffb9 	bl	80008bc <__aeabi_ddiv>
 801a94a:	f04f 0a02 	mov.w	sl, #2
 801a94e:	4604      	mov	r4, r0
 801a950:	460d      	mov	r5, r1
 801a952:	e745      	b.n	801a7e0 <atan+0xc8>
 801a954:	4622      	mov	r2, r4
 801a956:	462b      	mov	r3, r5
 801a958:	4938      	ldr	r1, [pc, #224]	@ (801aa3c <atan+0x324>)
 801a95a:	2000      	movs	r0, #0
 801a95c:	f7e5 ffae 	bl	80008bc <__aeabi_ddiv>
 801a960:	f04f 0a03 	mov.w	sl, #3
 801a964:	4604      	mov	r4, r0
 801a966:	460d      	mov	r5, r1
 801a968:	e73a      	b.n	801a7e0 <atan+0xc8>
 801a96a:	4b35      	ldr	r3, [pc, #212]	@ (801aa40 <atan+0x328>)
 801a96c:	4e35      	ldr	r6, [pc, #212]	@ (801aa44 <atan+0x32c>)
 801a96e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a972:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a976:	f7e5 fcbf 	bl	80002f8 <__aeabi_dsub>
 801a97a:	4622      	mov	r2, r4
 801a97c:	462b      	mov	r3, r5
 801a97e:	f7e5 fcbb 	bl	80002f8 <__aeabi_dsub>
 801a982:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801a986:	4602      	mov	r2, r0
 801a988:	460b      	mov	r3, r1
 801a98a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a98e:	f7e5 fcb3 	bl	80002f8 <__aeabi_dsub>
 801a992:	f1bb 0f00 	cmp.w	fp, #0
 801a996:	4604      	mov	r4, r0
 801a998:	460d      	mov	r5, r1
 801a99a:	f6bf aedc 	bge.w	801a756 <atan+0x3e>
 801a99e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a9a2:	461d      	mov	r5, r3
 801a9a4:	e6d7      	b.n	801a756 <atan+0x3e>
 801a9a6:	a51c      	add	r5, pc, #112	@ (adr r5, 801aa18 <atan+0x300>)
 801a9a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a9ac:	e6d3      	b.n	801a756 <atan+0x3e>
 801a9ae:	bf00      	nop
 801a9b0:	54442d18 	.word	0x54442d18
 801a9b4:	3ff921fb 	.word	0x3ff921fb
 801a9b8:	8800759c 	.word	0x8800759c
 801a9bc:	7e37e43c 	.word	0x7e37e43c
 801a9c0:	e322da11 	.word	0xe322da11
 801a9c4:	3f90ad3a 	.word	0x3f90ad3a
 801a9c8:	24760deb 	.word	0x24760deb
 801a9cc:	3fa97b4b 	.word	0x3fa97b4b
 801a9d0:	a0d03d51 	.word	0xa0d03d51
 801a9d4:	3fb10d66 	.word	0x3fb10d66
 801a9d8:	c54c206e 	.word	0xc54c206e
 801a9dc:	3fb745cd 	.word	0x3fb745cd
 801a9e0:	920083ff 	.word	0x920083ff
 801a9e4:	3fc24924 	.word	0x3fc24924
 801a9e8:	5555550d 	.word	0x5555550d
 801a9ec:	3fd55555 	.word	0x3fd55555
 801a9f0:	2c6a6c2f 	.word	0x2c6a6c2f
 801a9f4:	bfa2b444 	.word	0xbfa2b444
 801a9f8:	52defd9a 	.word	0x52defd9a
 801a9fc:	3fadde2d 	.word	0x3fadde2d
 801aa00:	af749a6d 	.word	0xaf749a6d
 801aa04:	3fb3b0f2 	.word	0x3fb3b0f2
 801aa08:	fe231671 	.word	0xfe231671
 801aa0c:	3fbc71c6 	.word	0x3fbc71c6
 801aa10:	9998ebc4 	.word	0x9998ebc4
 801aa14:	3fc99999 	.word	0x3fc99999
 801aa18:	54442d18 	.word	0x54442d18
 801aa1c:	bff921fb 	.word	0xbff921fb
 801aa20:	440fffff 	.word	0x440fffff
 801aa24:	7ff00000 	.word	0x7ff00000
 801aa28:	3fdbffff 	.word	0x3fdbffff
 801aa2c:	3ff00000 	.word	0x3ff00000
 801aa30:	3ff2ffff 	.word	0x3ff2ffff
 801aa34:	40038000 	.word	0x40038000
 801aa38:	3ff80000 	.word	0x3ff80000
 801aa3c:	bff00000 	.word	0xbff00000
 801aa40:	0801c7c8 	.word	0x0801c7c8
 801aa44:	0801c7e8 	.word	0x0801c7e8

0801aa48 <fabs>:
 801aa48:	ec51 0b10 	vmov	r0, r1, d0
 801aa4c:	4602      	mov	r2, r0
 801aa4e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801aa52:	ec43 2b10 	vmov	d0, r2, r3
 801aa56:	4770      	bx	lr

0801aa58 <__ieee754_sqrt>:
 801aa58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa5c:	4a68      	ldr	r2, [pc, #416]	@ (801ac00 <__ieee754_sqrt+0x1a8>)
 801aa5e:	ec55 4b10 	vmov	r4, r5, d0
 801aa62:	43aa      	bics	r2, r5
 801aa64:	462b      	mov	r3, r5
 801aa66:	4621      	mov	r1, r4
 801aa68:	d110      	bne.n	801aa8c <__ieee754_sqrt+0x34>
 801aa6a:	4622      	mov	r2, r4
 801aa6c:	4620      	mov	r0, r4
 801aa6e:	4629      	mov	r1, r5
 801aa70:	f7e5 fdfa 	bl	8000668 <__aeabi_dmul>
 801aa74:	4602      	mov	r2, r0
 801aa76:	460b      	mov	r3, r1
 801aa78:	4620      	mov	r0, r4
 801aa7a:	4629      	mov	r1, r5
 801aa7c:	f7e5 fc3e 	bl	80002fc <__adddf3>
 801aa80:	4604      	mov	r4, r0
 801aa82:	460d      	mov	r5, r1
 801aa84:	ec45 4b10 	vmov	d0, r4, r5
 801aa88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa8c:	2d00      	cmp	r5, #0
 801aa8e:	dc0e      	bgt.n	801aaae <__ieee754_sqrt+0x56>
 801aa90:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801aa94:	4322      	orrs	r2, r4
 801aa96:	d0f5      	beq.n	801aa84 <__ieee754_sqrt+0x2c>
 801aa98:	b19d      	cbz	r5, 801aac2 <__ieee754_sqrt+0x6a>
 801aa9a:	4622      	mov	r2, r4
 801aa9c:	4620      	mov	r0, r4
 801aa9e:	4629      	mov	r1, r5
 801aaa0:	f7e5 fc2a 	bl	80002f8 <__aeabi_dsub>
 801aaa4:	4602      	mov	r2, r0
 801aaa6:	460b      	mov	r3, r1
 801aaa8:	f7e5 ff08 	bl	80008bc <__aeabi_ddiv>
 801aaac:	e7e8      	b.n	801aa80 <__ieee754_sqrt+0x28>
 801aaae:	152a      	asrs	r2, r5, #20
 801aab0:	d115      	bne.n	801aade <__ieee754_sqrt+0x86>
 801aab2:	2000      	movs	r0, #0
 801aab4:	e009      	b.n	801aaca <__ieee754_sqrt+0x72>
 801aab6:	0acb      	lsrs	r3, r1, #11
 801aab8:	3a15      	subs	r2, #21
 801aaba:	0549      	lsls	r1, r1, #21
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	d0fa      	beq.n	801aab6 <__ieee754_sqrt+0x5e>
 801aac0:	e7f7      	b.n	801aab2 <__ieee754_sqrt+0x5a>
 801aac2:	462a      	mov	r2, r5
 801aac4:	e7fa      	b.n	801aabc <__ieee754_sqrt+0x64>
 801aac6:	005b      	lsls	r3, r3, #1
 801aac8:	3001      	adds	r0, #1
 801aaca:	02dc      	lsls	r4, r3, #11
 801aacc:	d5fb      	bpl.n	801aac6 <__ieee754_sqrt+0x6e>
 801aace:	1e44      	subs	r4, r0, #1
 801aad0:	1b12      	subs	r2, r2, r4
 801aad2:	f1c0 0420 	rsb	r4, r0, #32
 801aad6:	fa21 f404 	lsr.w	r4, r1, r4
 801aada:	4323      	orrs	r3, r4
 801aadc:	4081      	lsls	r1, r0
 801aade:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801aae2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801aae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801aaea:	07d2      	lsls	r2, r2, #31
 801aaec:	bf5c      	itt	pl
 801aaee:	005b      	lslpl	r3, r3, #1
 801aaf0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801aaf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801aaf8:	bf58      	it	pl
 801aafa:	0049      	lslpl	r1, r1, #1
 801aafc:	2600      	movs	r6, #0
 801aafe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801ab02:	106d      	asrs	r5, r5, #1
 801ab04:	0049      	lsls	r1, r1, #1
 801ab06:	2016      	movs	r0, #22
 801ab08:	4632      	mov	r2, r6
 801ab0a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801ab0e:	1917      	adds	r7, r2, r4
 801ab10:	429f      	cmp	r7, r3
 801ab12:	bfde      	ittt	le
 801ab14:	193a      	addle	r2, r7, r4
 801ab16:	1bdb      	suble	r3, r3, r7
 801ab18:	1936      	addle	r6, r6, r4
 801ab1a:	0fcf      	lsrs	r7, r1, #31
 801ab1c:	3801      	subs	r0, #1
 801ab1e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801ab22:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801ab26:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801ab2a:	d1f0      	bne.n	801ab0e <__ieee754_sqrt+0xb6>
 801ab2c:	4604      	mov	r4, r0
 801ab2e:	2720      	movs	r7, #32
 801ab30:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801ab34:	429a      	cmp	r2, r3
 801ab36:	eb00 0e0c 	add.w	lr, r0, ip
 801ab3a:	db02      	blt.n	801ab42 <__ieee754_sqrt+0xea>
 801ab3c:	d113      	bne.n	801ab66 <__ieee754_sqrt+0x10e>
 801ab3e:	458e      	cmp	lr, r1
 801ab40:	d811      	bhi.n	801ab66 <__ieee754_sqrt+0x10e>
 801ab42:	f1be 0f00 	cmp.w	lr, #0
 801ab46:	eb0e 000c 	add.w	r0, lr, ip
 801ab4a:	da42      	bge.n	801abd2 <__ieee754_sqrt+0x17a>
 801ab4c:	2800      	cmp	r0, #0
 801ab4e:	db40      	blt.n	801abd2 <__ieee754_sqrt+0x17a>
 801ab50:	f102 0801 	add.w	r8, r2, #1
 801ab54:	1a9b      	subs	r3, r3, r2
 801ab56:	458e      	cmp	lr, r1
 801ab58:	bf88      	it	hi
 801ab5a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801ab5e:	eba1 010e 	sub.w	r1, r1, lr
 801ab62:	4464      	add	r4, ip
 801ab64:	4642      	mov	r2, r8
 801ab66:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801ab6a:	3f01      	subs	r7, #1
 801ab6c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801ab70:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801ab74:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801ab78:	d1dc      	bne.n	801ab34 <__ieee754_sqrt+0xdc>
 801ab7a:	4319      	orrs	r1, r3
 801ab7c:	d01b      	beq.n	801abb6 <__ieee754_sqrt+0x15e>
 801ab7e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801ac04 <__ieee754_sqrt+0x1ac>
 801ab82:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801ac08 <__ieee754_sqrt+0x1b0>
 801ab86:	e9da 0100 	ldrd	r0, r1, [sl]
 801ab8a:	e9db 2300 	ldrd	r2, r3, [fp]
 801ab8e:	f7e5 fbb3 	bl	80002f8 <__aeabi_dsub>
 801ab92:	e9da 8900 	ldrd	r8, r9, [sl]
 801ab96:	4602      	mov	r2, r0
 801ab98:	460b      	mov	r3, r1
 801ab9a:	4640      	mov	r0, r8
 801ab9c:	4649      	mov	r1, r9
 801ab9e:	f7e5 ffdf 	bl	8000b60 <__aeabi_dcmple>
 801aba2:	b140      	cbz	r0, 801abb6 <__ieee754_sqrt+0x15e>
 801aba4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801aba8:	e9da 0100 	ldrd	r0, r1, [sl]
 801abac:	e9db 2300 	ldrd	r2, r3, [fp]
 801abb0:	d111      	bne.n	801abd6 <__ieee754_sqrt+0x17e>
 801abb2:	3601      	adds	r6, #1
 801abb4:	463c      	mov	r4, r7
 801abb6:	1072      	asrs	r2, r6, #1
 801abb8:	0863      	lsrs	r3, r4, #1
 801abba:	07f1      	lsls	r1, r6, #31
 801abbc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801abc0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801abc4:	bf48      	it	mi
 801abc6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801abca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801abce:	4618      	mov	r0, r3
 801abd0:	e756      	b.n	801aa80 <__ieee754_sqrt+0x28>
 801abd2:	4690      	mov	r8, r2
 801abd4:	e7be      	b.n	801ab54 <__ieee754_sqrt+0xfc>
 801abd6:	f7e5 fb91 	bl	80002fc <__adddf3>
 801abda:	e9da 8900 	ldrd	r8, r9, [sl]
 801abde:	4602      	mov	r2, r0
 801abe0:	460b      	mov	r3, r1
 801abe2:	4640      	mov	r0, r8
 801abe4:	4649      	mov	r1, r9
 801abe6:	f7e5 ffb1 	bl	8000b4c <__aeabi_dcmplt>
 801abea:	b120      	cbz	r0, 801abf6 <__ieee754_sqrt+0x19e>
 801abec:	1ca0      	adds	r0, r4, #2
 801abee:	bf08      	it	eq
 801abf0:	3601      	addeq	r6, #1
 801abf2:	3402      	adds	r4, #2
 801abf4:	e7df      	b.n	801abb6 <__ieee754_sqrt+0x15e>
 801abf6:	1c63      	adds	r3, r4, #1
 801abf8:	f023 0401 	bic.w	r4, r3, #1
 801abfc:	e7db      	b.n	801abb6 <__ieee754_sqrt+0x15e>
 801abfe:	bf00      	nop
 801ac00:	7ff00000 	.word	0x7ff00000
 801ac04:	20000a18 	.word	0x20000a18
 801ac08:	20000a10 	.word	0x20000a10
 801ac0c:	00000000 	.word	0x00000000

0801ac10 <__ieee754_atan2>:
 801ac10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac14:	ec57 6b11 	vmov	r6, r7, d1
 801ac18:	4273      	negs	r3, r6
 801ac1a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801ad98 <__ieee754_atan2+0x188>
 801ac1e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801ac22:	4333      	orrs	r3, r6
 801ac24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801ac28:	4543      	cmp	r3, r8
 801ac2a:	ec51 0b10 	vmov	r0, r1, d0
 801ac2e:	4635      	mov	r5, r6
 801ac30:	d809      	bhi.n	801ac46 <__ieee754_atan2+0x36>
 801ac32:	4244      	negs	r4, r0
 801ac34:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801ac38:	4304      	orrs	r4, r0
 801ac3a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801ac3e:	4544      	cmp	r4, r8
 801ac40:	468e      	mov	lr, r1
 801ac42:	4681      	mov	r9, r0
 801ac44:	d907      	bls.n	801ac56 <__ieee754_atan2+0x46>
 801ac46:	4632      	mov	r2, r6
 801ac48:	463b      	mov	r3, r7
 801ac4a:	f7e5 fb57 	bl	80002fc <__adddf3>
 801ac4e:	ec41 0b10 	vmov	d0, r0, r1
 801ac52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac56:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801ac5a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801ac5e:	4334      	orrs	r4, r6
 801ac60:	d103      	bne.n	801ac6a <__ieee754_atan2+0x5a>
 801ac62:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac66:	f7ff bd57 	b.w	801a718 <atan>
 801ac6a:	17bc      	asrs	r4, r7, #30
 801ac6c:	f004 0402 	and.w	r4, r4, #2
 801ac70:	ea53 0909 	orrs.w	r9, r3, r9
 801ac74:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801ac78:	d107      	bne.n	801ac8a <__ieee754_atan2+0x7a>
 801ac7a:	2c02      	cmp	r4, #2
 801ac7c:	d05f      	beq.n	801ad3e <__ieee754_atan2+0x12e>
 801ac7e:	2c03      	cmp	r4, #3
 801ac80:	d1e5      	bne.n	801ac4e <__ieee754_atan2+0x3e>
 801ac82:	a141      	add	r1, pc, #260	@ (adr r1, 801ad88 <__ieee754_atan2+0x178>)
 801ac84:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac88:	e7e1      	b.n	801ac4e <__ieee754_atan2+0x3e>
 801ac8a:	4315      	orrs	r5, r2
 801ac8c:	d106      	bne.n	801ac9c <__ieee754_atan2+0x8c>
 801ac8e:	f1be 0f00 	cmp.w	lr, #0
 801ac92:	da5f      	bge.n	801ad54 <__ieee754_atan2+0x144>
 801ac94:	a13e      	add	r1, pc, #248	@ (adr r1, 801ad90 <__ieee754_atan2+0x180>)
 801ac96:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac9a:	e7d8      	b.n	801ac4e <__ieee754_atan2+0x3e>
 801ac9c:	4542      	cmp	r2, r8
 801ac9e:	d10f      	bne.n	801acc0 <__ieee754_atan2+0xb0>
 801aca0:	4293      	cmp	r3, r2
 801aca2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801aca6:	d107      	bne.n	801acb8 <__ieee754_atan2+0xa8>
 801aca8:	2c02      	cmp	r4, #2
 801acaa:	d84c      	bhi.n	801ad46 <__ieee754_atan2+0x136>
 801acac:	4b34      	ldr	r3, [pc, #208]	@ (801ad80 <__ieee754_atan2+0x170>)
 801acae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801acb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801acb6:	e7ca      	b.n	801ac4e <__ieee754_atan2+0x3e>
 801acb8:	2c02      	cmp	r4, #2
 801acba:	d848      	bhi.n	801ad4e <__ieee754_atan2+0x13e>
 801acbc:	4b31      	ldr	r3, [pc, #196]	@ (801ad84 <__ieee754_atan2+0x174>)
 801acbe:	e7f6      	b.n	801acae <__ieee754_atan2+0x9e>
 801acc0:	4543      	cmp	r3, r8
 801acc2:	d0e4      	beq.n	801ac8e <__ieee754_atan2+0x7e>
 801acc4:	1a9b      	subs	r3, r3, r2
 801acc6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801acca:	ea4f 5223 	mov.w	r2, r3, asr #20
 801acce:	da1e      	bge.n	801ad0e <__ieee754_atan2+0xfe>
 801acd0:	2f00      	cmp	r7, #0
 801acd2:	da01      	bge.n	801acd8 <__ieee754_atan2+0xc8>
 801acd4:	323c      	adds	r2, #60	@ 0x3c
 801acd6:	db1e      	blt.n	801ad16 <__ieee754_atan2+0x106>
 801acd8:	4632      	mov	r2, r6
 801acda:	463b      	mov	r3, r7
 801acdc:	f7e5 fdee 	bl	80008bc <__aeabi_ddiv>
 801ace0:	ec41 0b10 	vmov	d0, r0, r1
 801ace4:	f7ff feb0 	bl	801aa48 <fabs>
 801ace8:	f7ff fd16 	bl	801a718 <atan>
 801acec:	ec51 0b10 	vmov	r0, r1, d0
 801acf0:	2c01      	cmp	r4, #1
 801acf2:	d013      	beq.n	801ad1c <__ieee754_atan2+0x10c>
 801acf4:	2c02      	cmp	r4, #2
 801acf6:	d015      	beq.n	801ad24 <__ieee754_atan2+0x114>
 801acf8:	2c00      	cmp	r4, #0
 801acfa:	d0a8      	beq.n	801ac4e <__ieee754_atan2+0x3e>
 801acfc:	a318      	add	r3, pc, #96	@ (adr r3, 801ad60 <__ieee754_atan2+0x150>)
 801acfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad02:	f7e5 faf9 	bl	80002f8 <__aeabi_dsub>
 801ad06:	a318      	add	r3, pc, #96	@ (adr r3, 801ad68 <__ieee754_atan2+0x158>)
 801ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad0c:	e014      	b.n	801ad38 <__ieee754_atan2+0x128>
 801ad0e:	a118      	add	r1, pc, #96	@ (adr r1, 801ad70 <__ieee754_atan2+0x160>)
 801ad10:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad14:	e7ec      	b.n	801acf0 <__ieee754_atan2+0xe0>
 801ad16:	2000      	movs	r0, #0
 801ad18:	2100      	movs	r1, #0
 801ad1a:	e7e9      	b.n	801acf0 <__ieee754_atan2+0xe0>
 801ad1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ad20:	4619      	mov	r1, r3
 801ad22:	e794      	b.n	801ac4e <__ieee754_atan2+0x3e>
 801ad24:	a30e      	add	r3, pc, #56	@ (adr r3, 801ad60 <__ieee754_atan2+0x150>)
 801ad26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad2a:	f7e5 fae5 	bl	80002f8 <__aeabi_dsub>
 801ad2e:	4602      	mov	r2, r0
 801ad30:	460b      	mov	r3, r1
 801ad32:	a10d      	add	r1, pc, #52	@ (adr r1, 801ad68 <__ieee754_atan2+0x158>)
 801ad34:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad38:	f7e5 fade 	bl	80002f8 <__aeabi_dsub>
 801ad3c:	e787      	b.n	801ac4e <__ieee754_atan2+0x3e>
 801ad3e:	a10a      	add	r1, pc, #40	@ (adr r1, 801ad68 <__ieee754_atan2+0x158>)
 801ad40:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad44:	e783      	b.n	801ac4e <__ieee754_atan2+0x3e>
 801ad46:	a10c      	add	r1, pc, #48	@ (adr r1, 801ad78 <__ieee754_atan2+0x168>)
 801ad48:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad4c:	e77f      	b.n	801ac4e <__ieee754_atan2+0x3e>
 801ad4e:	2000      	movs	r0, #0
 801ad50:	2100      	movs	r1, #0
 801ad52:	e77c      	b.n	801ac4e <__ieee754_atan2+0x3e>
 801ad54:	a106      	add	r1, pc, #24	@ (adr r1, 801ad70 <__ieee754_atan2+0x160>)
 801ad56:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad5a:	e778      	b.n	801ac4e <__ieee754_atan2+0x3e>
 801ad5c:	f3af 8000 	nop.w
 801ad60:	33145c07 	.word	0x33145c07
 801ad64:	3ca1a626 	.word	0x3ca1a626
 801ad68:	54442d18 	.word	0x54442d18
 801ad6c:	400921fb 	.word	0x400921fb
 801ad70:	54442d18 	.word	0x54442d18
 801ad74:	3ff921fb 	.word	0x3ff921fb
 801ad78:	54442d18 	.word	0x54442d18
 801ad7c:	3fe921fb 	.word	0x3fe921fb
 801ad80:	0801c820 	.word	0x0801c820
 801ad84:	0801c808 	.word	0x0801c808
 801ad88:	54442d18 	.word	0x54442d18
 801ad8c:	c00921fb 	.word	0xc00921fb
 801ad90:	54442d18 	.word	0x54442d18
 801ad94:	bff921fb 	.word	0xbff921fb
 801ad98:	7ff00000 	.word	0x7ff00000

0801ad9c <_init>:
 801ad9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad9e:	bf00      	nop
 801ada0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ada2:	bc08      	pop	{r3}
 801ada4:	469e      	mov	lr, r3
 801ada6:	4770      	bx	lr

0801ada8 <_fini>:
 801ada8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adaa:	bf00      	nop
 801adac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801adae:	bc08      	pop	{r3}
 801adb0:	469e      	mov	lr, r3
 801adb2:	4770      	bx	lr
