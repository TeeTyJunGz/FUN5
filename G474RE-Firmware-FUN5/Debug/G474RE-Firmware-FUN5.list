
G474RE-Firmware-FUN5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d9c4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a80  0801dba8  0801dba8  0001eba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f628  0801f628  00021a20  2**0
                  CONTENTS
  4 .ARM          00000008  0801f628  0801f628  00020628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f630  0801f630  00021a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0801f630  0801f630  00020630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f644  0801f644  00020644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a20  20000000  0801f648  00021000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b3c4  20000a20  08020068  00021a20  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000bde4  08020068  00021de4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021a20  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d1ae  00000000  00000000  00021a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e16  00000000  00000000  0004ebfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022f8  00000000  00000000  00054a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b0c  00000000  00000000  00056d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000304e7  00000000  00000000  0005881c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d303  00000000  00000000  00088d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012db0c  00000000  00000000  000b6006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001e3b12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a514  00000000  00000000  001e3b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001ee09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000a20 	.word	0x20000a20
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801db8c 	.word	0x0801db8c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000a24 	.word	0x20000a24
 800021c:	0801db8c 	.word	0x0801db8c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000be6:	f000 b9b5 	b.w	8000f54 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f84d 	bl	8000c98 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f840 	bl	8000c98 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f82f 	bl	8000c98 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f821 	bl	8000c98 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	@ 0x30
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f01b fb8f 	bl	801c694 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f76:	4b39      	ldr	r3, [pc, #228]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f7e:	4b37      	ldr	r3, [pc, #220]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f80:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f86:	4b35      	ldr	r3, [pc, #212]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8c:	4b33      	ldr	r3, [pc, #204]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f92:	4b32      	ldr	r3, [pc, #200]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f98:	4b30      	ldr	r3, [pc, #192]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fa4:	4b2d      	ldr	r3, [pc, #180]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000faa:	4b2c      	ldr	r3, [pc, #176]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb6:	4b29      	ldr	r3, [pc, #164]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbe:	4b27      	ldr	r3, [pc, #156]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc4:	4b25      	ldr	r3, [pc, #148]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fca:	4b24      	ldr	r3, [pc, #144]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fd2:	4b22      	ldr	r3, [pc, #136]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000fd8:	4b20      	ldr	r3, [pc, #128]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe0:	481e      	ldr	r0, [pc, #120]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fe2:	f002 fe8d 	bl	8003d00 <HAL_ADC_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000fec:	f001 fed6 	bl	8002d9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ff4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4818      	ldr	r0, [pc, #96]	@ (800105c <MX_ADC1_Init+0x104>)
 8000ffc:	f004 fa48 	bl	8005490 <HAL_ADCEx_MultiModeConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001006:	f001 fec9 	bl	8002d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <MX_ADC1_Init+0x108>)
 800100c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100e:	2306      	movs	r3, #6
 8001010:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001012:	2307      	movs	r3, #7
 8001014:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001016:	237f      	movs	r3, #127	@ 0x7f
 8001018:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800101a:	2304      	movs	r3, #4
 800101c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	4619      	mov	r1, r3
 8001026:	480d      	ldr	r0, [pc, #52]	@ (800105c <MX_ADC1_Init+0x104>)
 8001028:	f003 fb82 	bl	8004730 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001032:	f001 feb3 	bl	8002d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <MX_ADC1_Init+0x10c>)
 8001038:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800103a:	230c      	movs	r3, #12
 800103c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	4619      	mov	r1, r3
 8001042:	4806      	ldr	r0, [pc, #24]	@ (800105c <MX_ADC1_Init+0x104>)
 8001044:	f003 fb74 	bl	8004730 <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800104e:	f001 fea5 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	3730      	adds	r7, #48	@ 0x30
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000a3c 	.word	0x20000a3c
 8001060:	04300002 	.word	0x04300002
 8001064:	08600004 	.word	0x08600004

08001068 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b09e      	sub	sp, #120	@ 0x78
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	2254      	movs	r2, #84	@ 0x54
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f01b fb03 	bl	801c694 <memset>
  if(adcHandle->Instance==ADC1)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001096:	d167      	bne.n	8001168 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001098:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800109c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800109e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010a2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4618      	mov	r0, r3
 80010aa:	f006 feb9 	bl	8007e20 <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010b4:	f001 fe72 	bl	8002d9c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b27      	ldr	r3, [pc, #156]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d4:	4a26      	ldr	r2, [pc, #152]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010dc:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010e8:	2303      	movs	r3, #3
 80010ea:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ec:	2303      	movs	r3, #3
 80010ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fe:	f004 feed 	bl	8005edc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001104:	4a1c      	ldr	r2, [pc, #112]	@ (8001178 <HAL_ADC_MspInit+0x110>)
 8001106:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001108:	4b1a      	ldr	r3, [pc, #104]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 800110a:	2205      	movs	r2, #5
 800110c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001114:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800111a:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 800111c:	2280      	movs	r2, #128	@ 0x80
 800111e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001120:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001122:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001126:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001128:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 800112a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800112e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001130:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001132:	2220      	movs	r2, #32
 8001134:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001136:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800113c:	480d      	ldr	r0, [pc, #52]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 800113e:	f004 fb8f 	bl	8005860 <HAL_DMA_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001148:	f001 fe28 	bl	8002d9c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a09      	ldr	r2, [pc, #36]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001150:	655a      	str	r2, [r3, #84]	@ 0x54
 8001152:	4a08      	ldr	r2, [pc, #32]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2105      	movs	r1, #5
 800115c:	2012      	movs	r0, #18
 800115e:	f004 fb57 	bl	8005810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001162:	2012      	movs	r0, #18
 8001164:	f004 fb6e 	bl	8005844 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001168:	bf00      	nop
 800116a:	3778      	adds	r7, #120	@ 0x78
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000
 8001174:	20000aa8 	.word	0x20000aa8
 8001178:	40020030 	.word	0x40020030
 800117c:	00000000 	.word	0x00000000

08001180 <calculate_gyro_angles>:
double Kalman_Angle(KalmanFilter_t* kf, double new_angle, double new_rate, float DT);

void ADC_Averaged();
void Read_Buttons();

void calculate_gyro_angles(double Ax, double Ay, double Az, double Gx, double Gy, double Gz, float DT) {
 8001180:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001184:	b08e      	sub	sp, #56	@ 0x38
 8001186:	af00      	add	r7, sp, #0
 8001188:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 800118c:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001190:	ed87 2b08 	vstr	d2, [r7, #32]
 8001194:	ed87 3b06 	vstr	d3, [r7, #24]
 8001198:	ed87 4b04 	vstr	d4, [r7, #16]
 800119c:	ed87 5b02 	vstr	d5, [r7, #8]
 80011a0:	ed87 6a01 	vstr	s12, [r7, #4]

	rotation_gyro.roll += (Gx * RAD_TO_DEG) * DT;
 80011a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80011a6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001324 <calculate_gyro_angles+0x1a4>)
 80011b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011b4:	f7ff fa58 	bl	8000668 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	a355      	add	r3, pc, #340	@ (adr r3, 8001318 <calculate_gyro_angles+0x198>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fb79 	bl	80008bc <__aeabi_ddiv>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4690      	mov	r8, r2
 80011d0:	4699      	mov	r9, r3
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff f9f0 	bl	80005b8 <__aeabi_f2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4640      	mov	r0, r8
 80011de:	4649      	mov	r1, r9
 80011e0:	f7ff fa42 	bl	8000668 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4620      	mov	r0, r4
 80011ea:	4629      	mov	r1, r5
 80011ec:	f7ff f886 	bl	80002fc <__adddf3>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	494a      	ldr	r1, [pc, #296]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80011f6:	e9c1 2300 	strd	r2, r3, [r1]
	rotation_gyro.pitch += (Gy * RAD_TO_DEG) * DT;
 80011fa:	4b49      	ldr	r3, [pc, #292]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80011fc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	4b47      	ldr	r3, [pc, #284]	@ (8001324 <calculate_gyro_angles+0x1a4>)
 8001206:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800120a:	f7ff fa2d 	bl	8000668 <__aeabi_dmul>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	a340      	add	r3, pc, #256	@ (adr r3, 8001318 <calculate_gyro_angles+0x198>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff fb4e 	bl	80008bc <__aeabi_ddiv>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff f9c5 	bl	80005b8 <__aeabi_f2d>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4640      	mov	r0, r8
 8001234:	4649      	mov	r1, r9
 8001236:	f7ff fa17 	bl	8000668 <__aeabi_dmul>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4620      	mov	r0, r4
 8001240:	4629      	mov	r1, r5
 8001242:	f7ff f85b 	bl	80002fc <__adddf3>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4935      	ldr	r1, [pc, #212]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 800124c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rotation_gyro.yaw += (Gz * RAD_TO_DEG) * DT;
 8001250:	4b33      	ldr	r3, [pc, #204]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 8001252:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b32      	ldr	r3, [pc, #200]	@ (8001324 <calculate_gyro_angles+0x1a4>)
 800125c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001260:	f7ff fa02 	bl	8000668 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	a32a      	add	r3, pc, #168	@ (adr r3, 8001318 <calculate_gyro_angles+0x198>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	f7ff fb23 	bl	80008bc <__aeabi_ddiv>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4690      	mov	r8, r2
 800127c:	4699      	mov	r9, r3
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff f99a 	bl	80005b8 <__aeabi_f2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4640      	mov	r0, r8
 800128a:	4649      	mov	r1, r9
 800128c:	f7ff f9ec 	bl	8000668 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4620      	mov	r0, r4
 8001296:	4629      	mov	r1, r5
 8001298:	f7ff f830 	bl	80002fc <__adddf3>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	491f      	ldr	r1, [pc, #124]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80012a2:	e9c1 2304 	strd	r2, r3, [r1, #16]

    if (rotation_gyro.yaw > 180.0){
 80012a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80012a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <calculate_gyro_angles+0x1a4>)
 80012b2:	f7ff fc69 	bl	8000b88 <__aeabi_dcmpgt>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00d      	beq.n	80012d8 <calculate_gyro_angles+0x158>
    	rotation_gyro.yaw -= 360.0;
 80012bc:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80012be:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <calculate_gyro_angles+0x1a8>)
 80012c8:	f7ff f816 	bl	80002f8 <__aeabi_dsub>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4913      	ldr	r1, [pc, #76]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80012d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }
    else if (rotation_gyro.yaw < -180.0){
    	rotation_gyro.yaw += 360.0;
    }
}
 80012d6:	e018      	b.n	800130a <calculate_gyro_angles+0x18a>
    else if (rotation_gyro.yaw < -180.0){
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80012da:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b12      	ldr	r3, [pc, #72]	@ (800132c <calculate_gyro_angles+0x1ac>)
 80012e4:	f7ff fc32 	bl	8000b4c <__aeabi_dcmplt>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d100      	bne.n	80012f0 <calculate_gyro_angles+0x170>
}
 80012ee:	e00c      	b.n	800130a <calculate_gyro_angles+0x18a>
    	rotation_gyro.yaw += 360.0;
 80012f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 80012f2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <calculate_gyro_angles+0x1a8>)
 80012fc:	f7fe fffe 	bl	80002fc <__adddf3>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4906      	ldr	r1, [pc, #24]	@ (8001320 <calculate_gyro_angles+0x1a0>)
 8001306:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800130a:	bf00      	nop
 800130c:	3738      	adds	r7, #56	@ 0x38
 800130e:	46bd      	mov	sp, r7
 8001310:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001314:	f3af 8000 	nop.w
 8001318:	54442d18 	.word	0x54442d18
 800131c:	400921fb 	.word	0x400921fb
 8001320:	20000e88 	.word	0x20000e88
 8001324:	40668000 	.word	0x40668000
 8001328:	40768000 	.word	0x40768000
 800132c:	c0668000 	.word	0xc0668000

08001330 <calculate_accl_angles>:

void calculate_accl_angles(double Ax, double Ay, double Az, double Gx, double Gy, double Gz, float DT) {
 8001330:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001334:	b094      	sub	sp, #80	@ 0x50
 8001336:	af00      	add	r7, sp, #0
 8001338:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 800133c:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001340:	ed87 2b08 	vstr	d2, [r7, #32]
 8001344:	ed87 3b06 	vstr	d3, [r7, #24]
 8001348:	ed87 4b04 	vstr	d4, [r7, #16]
 800134c:	ed87 5b02 	vstr	d5, [r7, #8]
 8001350:	ed87 6a01 	vstr	s12, [r7, #4]

    double roll_acc = atan2(Ay, Az) * RAD_TO_DEG;
 8001354:	ed97 1b08 	vldr	d1, [r7, #32]
 8001358:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800135c:	f01c f8a4 	bl	801d4a8 <atan2>
 8001360:	ec51 0b10 	vmov	r0, r1, d0
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	4b63      	ldr	r3, [pc, #396]	@ (80014f8 <calculate_accl_angles+0x1c8>)
 800136a:	f7ff f97d 	bl	8000668 <__aeabi_dmul>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	a35e      	add	r3, pc, #376	@ (adr r3, 80014f0 <calculate_accl_angles+0x1c0>)
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7ff fa9e 	bl	80008bc <__aeabi_ddiv>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double pitch_acc = atan2(-Ax, sqrt(Ay * Ay + Az * Az)) * RAD_TO_DEG;
 8001388:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 800138a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800138c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001394:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001398:	f7ff f966 	bl	8000668 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4690      	mov	r8, r2
 80013a2:	4699      	mov	r9, r3
 80013a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013ac:	f7ff f95c 	bl	8000668 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4640      	mov	r0, r8
 80013b6:	4649      	mov	r1, r9
 80013b8:	f7fe ffa0 	bl	80002fc <__adddf3>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	ec43 2b17 	vmov	d7, r2, r3
 80013c4:	eeb0 0a47 	vmov.f32	s0, s14
 80013c8:	eef0 0a67 	vmov.f32	s1, s15
 80013cc:	f01c f86e 	bl	801d4ac <sqrt>
 80013d0:	eeb0 7a40 	vmov.f32	s14, s0
 80013d4:	eef0 7a60 	vmov.f32	s15, s1
 80013d8:	eeb0 1a47 	vmov.f32	s2, s14
 80013dc:	eef0 1a67 	vmov.f32	s3, s15
 80013e0:	ec45 4b10 	vmov	d0, r4, r5
 80013e4:	f01c f860 	bl	801d4a8 <atan2>
 80013e8:	ec51 0b10 	vmov	r0, r1, d0
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	4b41      	ldr	r3, [pc, #260]	@ (80014f8 <calculate_accl_angles+0x1c8>)
 80013f2:	f7ff f939 	bl	8000668 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	a33c      	add	r3, pc, #240	@ (adr r3, 80014f0 <calculate_accl_angles+0x1c0>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7ff fa5a 	bl	80008bc <__aeabi_ddiv>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double yaw_acc = (Gz * RAD_TO_DEG) * DT;
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	4b38      	ldr	r3, [pc, #224]	@ (80014f8 <calculate_accl_angles+0x1c8>)
 8001416:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800141a:	f7ff f925 	bl	8000668 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	a332      	add	r3, pc, #200	@ (adr r3, 80014f0 <calculate_accl_angles+0x1c0>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7ff fa46 	bl	80008bc <__aeabi_ddiv>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4614      	mov	r4, r2
 8001436:	461d      	mov	r5, r3
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff f8bd 	bl	80005b8 <__aeabi_f2d>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4620      	mov	r0, r4
 8001444:	4629      	mov	r1, r5
 8001446:	f7ff f90f 	bl	8000668 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    rotation_accl.roll = roll_acc;
 8001452:	492a      	ldr	r1, [pc, #168]	@ (80014fc <calculate_accl_angles+0x1cc>)
 8001454:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001458:	e9c1 2300 	strd	r2, r3, [r1]
    rotation_accl.pitch = pitch_acc;
 800145c:	4927      	ldr	r1, [pc, #156]	@ (80014fc <calculate_accl_angles+0x1cc>)
 800145e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001462:	e9c1 2302 	strd	r2, r3, [r1, #8]
    rotation_accl.yaw += yaw_acc;
 8001466:	4b25      	ldr	r3, [pc, #148]	@ (80014fc <calculate_accl_angles+0x1cc>)
 8001468:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800146c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001470:	f7fe ff44 	bl	80002fc <__adddf3>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4920      	ldr	r1, [pc, #128]	@ (80014fc <calculate_accl_angles+0x1cc>)
 800147a:	e9c1 2304 	strd	r2, r3, [r1, #16]

    if (rotation_accl.yaw > 180.0){
 800147e:	4b1f      	ldr	r3, [pc, #124]	@ (80014fc <calculate_accl_angles+0x1cc>)
 8001480:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <calculate_accl_angles+0x1c8>)
 800148a:	f7ff fb7d 	bl	8000b88 <__aeabi_dcmpgt>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00d      	beq.n	80014b0 <calculate_accl_angles+0x180>
    	rotation_accl.yaw -= 360.0;
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <calculate_accl_angles+0x1cc>)
 8001496:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <calculate_accl_angles+0x1d0>)
 80014a0:	f7fe ff2a 	bl	80002f8 <__aeabi_dsub>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4914      	ldr	r1, [pc, #80]	@ (80014fc <calculate_accl_angles+0x1cc>)
 80014aa:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }
    else if (rotation_accl.yaw < -180.0){
    	rotation_accl.yaw += 360.0;
    }
}
 80014ae:	e018      	b.n	80014e2 <calculate_accl_angles+0x1b2>
    else if (rotation_accl.yaw < -180.0){
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <calculate_accl_angles+0x1cc>)
 80014b2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <calculate_accl_angles+0x1d4>)
 80014bc:	f7ff fb46 	bl	8000b4c <__aeabi_dcmplt>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d100      	bne.n	80014c8 <calculate_accl_angles+0x198>
}
 80014c6:	e00c      	b.n	80014e2 <calculate_accl_angles+0x1b2>
    	rotation_accl.yaw += 360.0;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <calculate_accl_angles+0x1cc>)
 80014ca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001500 <calculate_accl_angles+0x1d0>)
 80014d4:	f7fe ff12 	bl	80002fc <__adddf3>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4907      	ldr	r1, [pc, #28]	@ (80014fc <calculate_accl_angles+0x1cc>)
 80014de:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80014e2:	bf00      	nop
 80014e4:	3750      	adds	r7, #80	@ 0x50
 80014e6:	46bd      	mov	sp, r7
 80014e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014ec:	f3af 8000 	nop.w
 80014f0:	54442d18 	.word	0x54442d18
 80014f4:	400921fb 	.word	0x400921fb
 80014f8:	40668000 	.word	0x40668000
 80014fc:	20000ea0 	.word	0x20000ea0
 8001500:	40768000 	.word	0x40768000
 8001504:	c0668000 	.word	0xc0668000

08001508 <calculate_kalm_angles>:

void calculate_kalm_angles(double Ax, double Ay, double Az, double Gx, double Gy, double Gz, float DT) {
 8001508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800150c:	b096      	sub	sp, #88	@ 0x58
 800150e:	af00      	add	r7, sp, #0
 8001510:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001514:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001518:	ed87 2b08 	vstr	d2, [r7, #32]
 800151c:	ed87 3b06 	vstr	d3, [r7, #24]
 8001520:	ed87 4b04 	vstr	d4, [r7, #16]
 8001524:	ed87 5b02 	vstr	d5, [r7, #8]
 8001528:	ed87 6a01 	vstr	s12, [r7, #4]

	double angleX = atan(Ay / sqrt(Ax * Ax + Az * Az)) * RAD_TO_DEG;
 800152c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001530:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001534:	f7ff f898 	bl	8000668 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4690      	mov	r8, r2
 800153e:	4699      	mov	r9, r3
 8001540:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001544:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001548:	f7ff f88e 	bl	8000668 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4640      	mov	r0, r8
 8001552:	4649      	mov	r1, r9
 8001554:	f7fe fed2 	bl	80002fc <__adddf3>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	ec43 2b17 	vmov	d7, r2, r3
 8001560:	eeb0 0a47 	vmov.f32	s0, s14
 8001564:	eef0 0a67 	vmov.f32	s1, s15
 8001568:	f01b ffa0 	bl	801d4ac <sqrt>
 800156c:	ec53 2b10 	vmov	r2, r3, d0
 8001570:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001574:	f7ff f9a2 	bl	80008bc <__aeabi_ddiv>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	ec43 2b17 	vmov	d7, r2, r3
 8001580:	eeb0 0a47 	vmov.f32	s0, s14
 8001584:	eef0 0a67 	vmov.f32	s1, s15
 8001588:	f01b ffbe 	bl	801d508 <atan>
 800158c:	ec51 0b10 	vmov	r0, r1, d0
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b70      	ldr	r3, [pc, #448]	@ (8001758 <calculate_kalm_angles+0x250>)
 8001596:	f7ff f867 	bl	8000668 <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8001750 <calculate_kalm_angles+0x248>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	f7ff f988 	bl	80008bc <__aeabi_ddiv>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double angleY = atan2(-Ax, sqrt(Ay * Ay + Az * Az)) * RAD_TO_DEG;
 80015b4:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 80015b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015b8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80015bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80015c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80015c4:	f7ff f850 	bl	8000668 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4690      	mov	r8, r2
 80015ce:	4699      	mov	r9, r3
 80015d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015d8:	f7ff f846 	bl	8000668 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4640      	mov	r0, r8
 80015e2:	4649      	mov	r1, r9
 80015e4:	f7fe fe8a 	bl	80002fc <__adddf3>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	ec43 2b17 	vmov	d7, r2, r3
 80015f0:	eeb0 0a47 	vmov.f32	s0, s14
 80015f4:	eef0 0a67 	vmov.f32	s1, s15
 80015f8:	f01b ff58 	bl	801d4ac <sqrt>
 80015fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001600:	eef0 7a60 	vmov.f32	s15, s1
 8001604:	eeb0 1a47 	vmov.f32	s2, s14
 8001608:	eef0 1a67 	vmov.f32	s3, s15
 800160c:	ec45 4b10 	vmov	d0, r4, r5
 8001610:	f01b ff4a 	bl	801d4a8 <atan2>
 8001614:	ec51 0b10 	vmov	r0, r1, d0
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	4b4e      	ldr	r3, [pc, #312]	@ (8001758 <calculate_kalm_angles+0x250>)
 800161e:	f7ff f823 	bl	8000668 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	a349      	add	r3, pc, #292	@ (adr r3, 8001750 <calculate_kalm_angles+0x248>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f7ff f944 	bl	80008bc <__aeabi_ddiv>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	double ratedX = Gx;
 800163c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001640:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double ratedY = Gy;
 8001644:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001648:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	rotation_kalm.roll = Kalman_Angle(&kalmanX, angleX, ratedX, DT);
 800164c:	ed97 2a01 	vldr	s4, [r7, #4]
 8001650:	ed97 1b10 	vldr	d1, [r7, #64]	@ 0x40
 8001654:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8001658:	4840      	ldr	r0, [pc, #256]	@ (800175c <calculate_kalm_angles+0x254>)
 800165a:	f000 f8dd 	bl	8001818 <Kalman_Angle>
 800165e:	eeb0 7a40 	vmov.f32	s14, s0
 8001662:	eef0 7a60 	vmov.f32	s15, s1
 8001666:	4b3e      	ldr	r3, [pc, #248]	@ (8001760 <calculate_kalm_angles+0x258>)
 8001668:	ed83 7b00 	vstr	d7, [r3]
	rotation_kalm.pitch = Kalman_Angle(&kalmanY, angleY, ratedY, DT);
 800166c:	ed97 2a01 	vldr	s4, [r7, #4]
 8001670:	ed97 1b0e 	vldr	d1, [r7, #56]	@ 0x38
 8001674:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8001678:	483a      	ldr	r0, [pc, #232]	@ (8001764 <calculate_kalm_angles+0x25c>)
 800167a:	f000 f8cd 	bl	8001818 <Kalman_Angle>
 800167e:	eeb0 7a40 	vmov.f32	s14, s0
 8001682:	eef0 7a60 	vmov.f32	s15, s1
 8001686:	4b36      	ldr	r3, [pc, #216]	@ (8001760 <calculate_kalm_angles+0x258>)
 8001688:	ed83 7b02 	vstr	d7, [r3, #8]
	rotation_kalm.yaw += (Gz * RAD_TO_DEG) * DT;
 800168c:	4b34      	ldr	r3, [pc, #208]	@ (8001760 <calculate_kalm_angles+0x258>)
 800168e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	4b30      	ldr	r3, [pc, #192]	@ (8001758 <calculate_kalm_angles+0x250>)
 8001698:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800169c:	f7fe ffe4 	bl	8000668 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	a329      	add	r3, pc, #164	@ (adr r3, 8001750 <calculate_kalm_angles+0x248>)
 80016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ae:	f7ff f905 	bl	80008bc <__aeabi_ddiv>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4690      	mov	r8, r2
 80016b8:	4699      	mov	r9, r3
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7fe ff7c 	bl	80005b8 <__aeabi_f2d>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4640      	mov	r0, r8
 80016c6:	4649      	mov	r1, r9
 80016c8:	f7fe ffce 	bl	8000668 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4620      	mov	r0, r4
 80016d2:	4629      	mov	r1, r5
 80016d4:	f7fe fe12 	bl	80002fc <__adddf3>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4920      	ldr	r1, [pc, #128]	@ (8001760 <calculate_kalm_angles+0x258>)
 80016de:	e9c1 2304 	strd	r2, r3, [r1, #16]

    if (rotation_kalm.yaw > 180.0){
 80016e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <calculate_kalm_angles+0x258>)
 80016e4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <calculate_kalm_angles+0x250>)
 80016ee:	f7ff fa4b 	bl	8000b88 <__aeabi_dcmpgt>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00d      	beq.n	8001714 <calculate_kalm_angles+0x20c>
    	rotation_kalm.yaw -= 360.0;
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <calculate_kalm_angles+0x258>)
 80016fa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <calculate_kalm_angles+0x260>)
 8001704:	f7fe fdf8 	bl	80002f8 <__aeabi_dsub>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4914      	ldr	r1, [pc, #80]	@ (8001760 <calculate_kalm_angles+0x258>)
 800170e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }
    else if (rotation_kalm.yaw < -180.0){
    	rotation_kalm.yaw += 360.0;
    }
}
 8001712:	e018      	b.n	8001746 <calculate_kalm_angles+0x23e>
    else if (rotation_kalm.yaw < -180.0){
 8001714:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <calculate_kalm_angles+0x258>)
 8001716:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	4b13      	ldr	r3, [pc, #76]	@ (800176c <calculate_kalm_angles+0x264>)
 8001720:	f7ff fa14 	bl	8000b4c <__aeabi_dcmplt>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d100      	bne.n	800172c <calculate_kalm_angles+0x224>
}
 800172a:	e00c      	b.n	8001746 <calculate_kalm_angles+0x23e>
    	rotation_kalm.yaw += 360.0;
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <calculate_kalm_angles+0x258>)
 800172e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <calculate_kalm_angles+0x260>)
 8001738:	f7fe fde0 	bl	80002fc <__adddf3>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4907      	ldr	r1, [pc, #28]	@ (8001760 <calculate_kalm_angles+0x258>)
 8001742:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001746:	bf00      	nop
 8001748:	3758      	adds	r7, #88	@ 0x58
 800174a:	46bd      	mov	sp, r7
 800174c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001750:	54442d18 	.word	0x54442d18
 8001754:	400921fb 	.word	0x400921fb
 8001758:	40668000 	.word	0x40668000
 800175c:	20000ee8 	.word	0x20000ee8
 8001760:	20000eb8 	.word	0x20000eb8
 8001764:	20000f38 	.word	0x20000f38
 8001768:	40768000 	.word	0x40768000
 800176c:	c0668000 	.word	0xc0668000

08001770 <Kalman_Init>:

void Kalman_Init(KalmanFilter_t* kf) {
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    kf->Q_angle = 0.001f;
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	a321      	add	r3, pc, #132	@ (adr r3, 8001800 <Kalman_Init+0x90>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	e9c1 2300 	strd	r2, r3, [r1]
    kf->Q_bias  = 0.003f;
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	a320      	add	r3, pc, #128	@ (adr r3, 8001808 <Kalman_Init+0x98>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    kf->R_measure = 0.03f;
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	a31f      	add	r3, pc, #124	@ (adr r3, 8001810 <Kalman_Init+0xa0>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	e9c1 2304 	strd	r2, r3, [r1, #16]

    kf->angle = 0.0f;
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    kf->bias = 0.0f;
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	e9c1 2308 	strd	r2, r3, [r1, #32]

    kf->P[0][0] = 0.0f;
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    kf->P[0][1] = 0.0f;
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    kf->P[1][0] = 0.0f;
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    kf->P[1][1] = 0.0f;
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	f3af 8000 	nop.w
 8001800:	e0000000 	.word	0xe0000000
 8001804:	3f50624d 	.word	0x3f50624d
 8001808:	c0000000 	.word	0xc0000000
 800180c:	3f689374 	.word	0x3f689374
 8001810:	e0000000 	.word	0xe0000000
 8001814:	3f9eb851 	.word	0x3f9eb851

08001818 <Kalman_Angle>:

double Kalman_Angle(KalmanFilter_t* kf, double new_angle, double new_rate, float DT){
 8001818:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800181c:	b092      	sub	sp, #72	@ 0x48
 800181e:	af00      	add	r7, sp, #0
 8001820:	6178      	str	r0, [r7, #20]
 8001822:	ed87 0b02 	vstr	d0, [r7, #8]
 8001826:	ed87 1b00 	vstr	d1, [r7]
 800182a:	ed87 2a04 	vstr	s4, [r7, #16]

    kf->rate = new_rate - kf->bias;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001834:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001838:	f7fe fd5e 	bl	80002f8 <__aeabi_dsub>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	6979      	ldr	r1, [r7, #20]
 8001842:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    kf->angle += DT * kf->rate;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800184c:	6938      	ldr	r0, [r7, #16]
 800184e:	f7fe feb3 	bl	80005b8 <__aeabi_f2d>
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001858:	f7fe ff06 	bl	8000668 <__aeabi_dmul>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4620      	mov	r0, r4
 8001862:	4629      	mov	r1, r5
 8001864:	f7fe fd4a 	bl	80002fc <__adddf3>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	6979      	ldr	r1, [r7, #20]
 800186e:	e9c1 2306 	strd	r2, r3, [r1, #24]

    kf->P[0][0] += DT * (DT * kf->P[1][1] - kf->P[0][1] - kf->P[1][0] + kf->Q_angle);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001878:	6938      	ldr	r0, [r7, #16]
 800187a:	f7fe fe9d 	bl	80005b8 <__aeabi_f2d>
 800187e:	4680      	mov	r8, r0
 8001880:	4689      	mov	r9, r1
 8001882:	6938      	ldr	r0, [r7, #16]
 8001884:	f7fe fe98 	bl	80005b8 <__aeabi_f2d>
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800188e:	f7fe feeb 	bl	8000668 <__aeabi_dmul>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80018a0:	f7fe fd2a 	bl	80002f8 <__aeabi_dsub>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80018b2:	f7fe fd21 	bl	80002f8 <__aeabi_dsub>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe fd1a 	bl	80002fc <__adddf3>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4640      	mov	r0, r8
 80018ce:	4649      	mov	r1, r9
 80018d0:	f7fe feca 	bl	8000668 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4620      	mov	r0, r4
 80018da:	4629      	mov	r1, r5
 80018dc:	f7fe fd0e 	bl	80002fc <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	6979      	ldr	r1, [r7, #20]
 80018e6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    kf->P[0][1] -= DT * kf->P[1][1];
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80018f0:	6938      	ldr	r0, [r7, #16]
 80018f2:	f7fe fe61 	bl	80005b8 <__aeabi_f2d>
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80018fc:	f7fe feb4 	bl	8000668 <__aeabi_dmul>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4620      	mov	r0, r4
 8001906:	4629      	mov	r1, r5
 8001908:	f7fe fcf6 	bl	80002f8 <__aeabi_dsub>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	6979      	ldr	r1, [r7, #20]
 8001912:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    kf->P[1][0] -= DT * kf->P[1][1];
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 800191c:	6938      	ldr	r0, [r7, #16]
 800191e:	f7fe fe4b 	bl	80005b8 <__aeabi_f2d>
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001928:	f7fe fe9e 	bl	8000668 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4620      	mov	r0, r4
 8001932:	4629      	mov	r1, r5
 8001934:	f7fe fce0 	bl	80002f8 <__aeabi_dsub>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	6979      	ldr	r1, [r7, #20]
 800193e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    kf->P[1][1] += kf->Q_bias * DT;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800194e:	6938      	ldr	r0, [r7, #16]
 8001950:	f7fe fe32 	bl	80005b8 <__aeabi_f2d>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4640      	mov	r0, r8
 800195a:	4649      	mov	r1, r9
 800195c:	f7fe fe84 	bl	8000668 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4620      	mov	r0, r4
 8001966:	4629      	mov	r1, r5
 8001968:	f7fe fcc8 	bl	80002fc <__adddf3>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	6979      	ldr	r1, [r7, #20]
 8001972:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

    double S = kf->P[0][0] + kf->R_measure;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001982:	f7fe fcbb 	bl	80002fc <__adddf3>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double K[2];
    K[0] = kf->P[0][0] / S;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001994:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001998:	f7fe ff90 	bl	80008bc <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    K[1] = kf->P[1][0] / S;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80019aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80019ae:	f7fe ff85 	bl	80008bc <__aeabi_ddiv>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    double y = new_angle - kf->angle;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019c4:	f7fe fc98 	bl	80002f8 <__aeabi_dsub>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    kf->angle += K[0] * y;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80019d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80019de:	f7fe fe43 	bl	8000668 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4620      	mov	r0, r4
 80019e8:	4629      	mov	r1, r5
 80019ea:	f7fe fc87 	bl	80002fc <__adddf3>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	6979      	ldr	r1, [r7, #20]
 80019f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    kf->bias += K[1] * y;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80019fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a02:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a06:	f7fe fe2f 	bl	8000668 <__aeabi_dmul>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4620      	mov	r0, r4
 8001a10:	4629      	mov	r1, r5
 8001a12:	f7fe fc73 	bl	80002fc <__adddf3>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	6979      	ldr	r1, [r7, #20]
 8001a1c:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = kf->P[0][0];
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a26:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double P01_temp = kf->P[0][1];
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001a30:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    kf->P[0][0] -= K[0] * P00_temp;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001a3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a42:	f7fe fe11 	bl	8000668 <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	f7fe fc53 	bl	80002f8 <__aeabi_dsub>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	6979      	ldr	r1, [r7, #20]
 8001a58:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    kf->P[0][1] -= K[0] * P01_temp;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001a62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a6a:	f7fe fdfd 	bl	8000668 <__aeabi_dmul>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4620      	mov	r0, r4
 8001a74:	4629      	mov	r1, r5
 8001a76:	f7fe fc3f 	bl	80002f8 <__aeabi_dsub>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	6979      	ldr	r1, [r7, #20]
 8001a80:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    kf->P[1][0] -= K[1] * P00_temp;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001a8a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a92:	f7fe fde9 	bl	8000668 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	f7fe fc2b 	bl	80002f8 <__aeabi_dsub>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	6979      	ldr	r1, [r7, #20]
 8001aa8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    kf->P[1][1] -= K[1] * P01_temp;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 8001ab2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001aba:	f7fe fdd5 	bl	8000668 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	f7fe fc17 	bl	80002f8 <__aeabi_dsub>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	6979      	ldr	r1, [r7, #20]
 8001ad0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

    return kf->angle;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ada:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ade:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae2:	eef0 0a67 	vmov.f32	s1, s15
 8001ae6:	3748      	adds	r7, #72	@ 0x48
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001af0 <timer_callback>:

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001af0:	b5b0      	push	{r4, r5, r7, lr}
 8001af2:	ed2d 8b04 	vpush	{d8-d9}
 8001af6:	b094      	sub	sp, #80	@ 0x50
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	e9c7 2300 	strd	r2, r3, [r7]

	if (timer != NULL) {
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8209 	beq.w	8001f1a <timer_callback+0x42a>
		uint32_t i2cError = HAL_I2C_GetError(&hi2c1);
 8001b08:	48b5      	ldr	r0, [pc, #724]	@ (8001de0 <timer_callback+0x2f0>)
 8001b0a:	f004 ffb1 	bl	8006a70 <HAL_I2C_GetError>
 8001b0e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		if (i2cError == HAL_I2C_ERROR_NONE){
 8001b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 81dc 	bne.w	8001ed0 <timer_callback+0x3e0>
			if (is_calib || on_calib){
 8001b18:	4bb2      	ldr	r3, [pc, #712]	@ (8001de4 <timer_callback+0x2f4>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d104      	bne.n	8001b2a <timer_callback+0x3a>
 8001b20:	4bb1      	ldr	r3, [pc, #708]	@ (8001de8 <timer_callback+0x2f8>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 81ef 	beq.w	8001f08 <timer_callback+0x418>

				MPU6050_Read_All(&hi2c1, &MPU6050);
 8001b2a:	49b0      	ldr	r1, [pc, #704]	@ (8001dec <timer_callback+0x2fc>)
 8001b2c:	48ac      	ldr	r0, [pc, #688]	@ (8001de0 <timer_callback+0x2f0>)
 8001b2e:	f008 fd4f 	bl	800a5d0 <MPU6050_Read_All>
				ADC_Averaged();
 8001b32:	f000 fab1 	bl	8002098 <ADC_Averaged>
				Read_Buttons();
 8001b36:	f000 fafb 	bl	8002130 <Read_Buttons>

				double Ax = (GRAVITY * MPU6050.Ax) - accl_offset.x;
 8001b3a:	4bac      	ldr	r3, [pc, #688]	@ (8001dec <timer_callback+0x2fc>)
 8001b3c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b40:	a3a3      	add	r3, pc, #652	@ (adr r3, 8001dd0 <timer_callback+0x2e0>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	f7fe fd8f 	bl	8000668 <__aeabi_dmul>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	4ba7      	ldr	r3, [pc, #668]	@ (8001df0 <timer_callback+0x300>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fbce 	bl	80002f8 <__aeabi_dsub>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
				double Ay = (GRAVITY * MPU6050.Ay) - accl_offset.y;
 8001b64:	4ba1      	ldr	r3, [pc, #644]	@ (8001dec <timer_callback+0x2fc>)
 8001b66:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001b6a:	a399      	add	r3, pc, #612	@ (adr r3, 8001dd0 <timer_callback+0x2e0>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe fd7a 	bl	8000668 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4b9c      	ldr	r3, [pc, #624]	@ (8001df0 <timer_callback+0x300>)
 8001b7e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b82:	f7fe fbb9 	bl	80002f8 <__aeabi_dsub>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
				double Az = (GRAVITY * MPU6050.Az) - accl_offset.z;
 8001b8e:	4b97      	ldr	r3, [pc, #604]	@ (8001dec <timer_callback+0x2fc>)
 8001b90:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b94:	a38e      	add	r3, pc, #568	@ (adr r3, 8001dd0 <timer_callback+0x2e0>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	f7fe fd65 	bl	8000668 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4b92      	ldr	r3, [pc, #584]	@ (8001df0 <timer_callback+0x300>)
 8001ba8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001bac:	f7fe fba4 	bl	80002f8 <__aeabi_dsub>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

				double Gx = (DEG_TO_RAD * MPU6050.Gx) - gyro_offset.x;
 8001bb8:	4b8c      	ldr	r3, [pc, #560]	@ (8001dec <timer_callback+0x2fc>)
 8001bba:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001bbe:	a386      	add	r3, pc, #536	@ (adr r3, 8001dd8 <timer_callback+0x2e8>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fd50 	bl	8000668 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4b88      	ldr	r3, [pc, #544]	@ (8001df4 <timer_callback+0x304>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	f7fe fb8f 	bl	80002f8 <__aeabi_dsub>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
				double Gy = (DEG_TO_RAD * MPU6050.Gy) - gyro_offset.y;
 8001be2:	4b82      	ldr	r3, [pc, #520]	@ (8001dec <timer_callback+0x2fc>)
 8001be4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001be8:	a37b      	add	r3, pc, #492	@ (adr r3, 8001dd8 <timer_callback+0x2e8>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	f7fe fd3b 	bl	8000668 <__aeabi_dmul>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4b7e      	ldr	r3, [pc, #504]	@ (8001df4 <timer_callback+0x304>)
 8001bfc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c00:	f7fe fb7a 	bl	80002f8 <__aeabi_dsub>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	e9c7 2308 	strd	r2, r3, [r7, #32]
				double Gz = (DEG_TO_RAD * MPU6050.Gz) - gyro_offset.z;
 8001c0c:	4b77      	ldr	r3, [pc, #476]	@ (8001dec <timer_callback+0x2fc>)
 8001c0e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001c12:	a371      	add	r3, pc, #452	@ (adr r3, 8001dd8 <timer_callback+0x2e8>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	f7fe fd26 	bl	8000668 <__aeabi_dmul>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	4b73      	ldr	r3, [pc, #460]	@ (8001df4 <timer_callback+0x304>)
 8001c26:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c2a:	f7fe fb65 	bl	80002f8 <__aeabi_dsub>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	e9c7 2306 	strd	r2, r3, [r7, #24]

				mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 8001c36:	f00f fd33 	bl	80116a0 <rmw_uros_epoch_millis>
 8001c3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	f7fe ffc1 	bl	8000bc8 <__aeabi_ldivmod>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4b6b      	ldr	r3, [pc, #428]	@ (8001df8 <timer_callback+0x308>)
 8001c4c:	601a      	str	r2, [r3, #0]
				mpu6050_msg.header.stamp.nanosec = rmw_uros_epoch_nanos();
 8001c4e:	f00f fd35 	bl	80116bc <rmw_uros_epoch_nanos>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4b68      	ldr	r3, [pc, #416]	@ (8001df8 <timer_callback+0x308>)
 8001c58:	605a      	str	r2, [r3, #4]

				mpu6050_msg.linear_acceleration.x = Ax;
 8001c5a:	4967      	ldr	r1, [pc, #412]	@ (8001df8 <timer_callback+0x308>)
 8001c5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c60:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
				mpu6050_msg.linear_acceleration.y = Ay;
 8001c64:	4964      	ldr	r1, [pc, #400]	@ (8001df8 <timer_callback+0x308>)
 8001c66:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001c6a:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
				mpu6050_msg.linear_acceleration.z = Az;
 8001c6e:	4962      	ldr	r1, [pc, #392]	@ (8001df8 <timer_callback+0x308>)
 8001c70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c74:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

				mpu6050_msg.angular_velocity.x = Gx;
 8001c78:	495f      	ldr	r1, [pc, #380]	@ (8001df8 <timer_callback+0x308>)
 8001c7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c7e:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
				mpu6050_msg.angular_velocity.y = Gy;
 8001c82:	495d      	ldr	r1, [pc, #372]	@ (8001df8 <timer_callback+0x308>)
 8001c84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c88:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
				mpu6050_msg.angular_velocity.z = Gz;
 8001c8c:	495a      	ldr	r1, [pc, #360]	@ (8001df8 <timer_callback+0x308>)
 8001c8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c92:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

				rcl_ret_t ret = rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL);
 8001c96:	2200      	movs	r2, #0
 8001c98:	4957      	ldr	r1, [pc, #348]	@ (8001df8 <timer_callback+0x308>)
 8001c9a:	4858      	ldr	r0, [pc, #352]	@ (8001dfc <timer_callback+0x30c>)
 8001c9c:	f00d fd64 	bl	800f768 <rcl_publish>
 8001ca0:	6178      	str	r0, [r7, #20]
				if (ret != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <timer_callback+0x1c2>
 8001ca8:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8001cac:	4854      	ldr	r0, [pc, #336]	@ (8001e00 <timer_callback+0x310>)
 8001cae:	f01a fb71 	bl	801c394 <iprintf>

				rotation_real.roll = MPU6050.KalmanAngleX;
 8001cb2:	4b4e      	ldr	r3, [pc, #312]	@ (8001dec <timer_callback+0x2fc>)
 8001cb4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001cb8:	4952      	ldr	r1, [pc, #328]	@ (8001e04 <timer_callback+0x314>)
 8001cba:	e9c1 2300 	strd	r2, r3, [r1]
				rotation_real.pitch = MPU6050.KalmanAngleY;
 8001cbe:	4b4b      	ldr	r3, [pc, #300]	@ (8001dec <timer_callback+0x2fc>)
 8001cc0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001cc4:	494f      	ldr	r1, [pc, #316]	@ (8001e04 <timer_callback+0x314>)
 8001cc6:	e9c1 2302 	strd	r2, r3, [r1, #8]

				calculate_gyro_angles(Ax/GRAVITY, Ay/GRAVITY, Az/GRAVITY, Gx, Gy, Gz, 0.01);
 8001cca:	a341      	add	r3, pc, #260	@ (adr r3, 8001dd0 <timer_callback+0x2e0>)
 8001ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001cd4:	f7fe fdf2 	bl	80008bc <__aeabi_ddiv>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	ec43 2b18 	vmov	d8, r2, r3
 8001ce0:	a33b      	add	r3, pc, #236	@ (adr r3, 8001dd0 <timer_callback+0x2e0>)
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001cea:	f7fe fde7 	bl	80008bc <__aeabi_ddiv>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	ec43 2b19 	vmov	d9, r2, r3
 8001cf6:	a336      	add	r3, pc, #216	@ (adr r3, 8001dd0 <timer_callback+0x2e0>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001d00:	f7fe fddc 	bl	80008bc <__aeabi_ddiv>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	ec43 2b17 	vmov	d7, r2, r3
 8001d0c:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8001e08 <timer_callback+0x318>
 8001d10:	ed97 5b06 	vldr	d5, [r7, #24]
 8001d14:	ed97 4b08 	vldr	d4, [r7, #32]
 8001d18:	ed97 3b0a 	vldr	d3, [r7, #40]	@ 0x28
 8001d1c:	eeb0 2a47 	vmov.f32	s4, s14
 8001d20:	eef0 2a67 	vmov.f32	s5, s15
 8001d24:	eeb0 1a49 	vmov.f32	s2, s18
 8001d28:	eef0 1a69 	vmov.f32	s3, s19
 8001d2c:	eeb0 0a48 	vmov.f32	s0, s16
 8001d30:	eef0 0a68 	vmov.f32	s1, s17
 8001d34:	f7ff fa24 	bl	8001180 <calculate_gyro_angles>
				calculate_accl_angles(Ax/GRAVITY, Ay/GRAVITY, Az/GRAVITY, Gx, Gy, Gz, 0.01);
 8001d38:	a325      	add	r3, pc, #148	@ (adr r3, 8001dd0 <timer_callback+0x2e0>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d42:	f7fe fdbb 	bl	80008bc <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	ec43 2b18 	vmov	d8, r2, r3
 8001d4e:	a320      	add	r3, pc, #128	@ (adr r3, 8001dd0 <timer_callback+0x2e0>)
 8001d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d54:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001d58:	f7fe fdb0 	bl	80008bc <__aeabi_ddiv>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	ec43 2b19 	vmov	d9, r2, r3
 8001d64:	a31a      	add	r3, pc, #104	@ (adr r3, 8001dd0 <timer_callback+0x2e0>)
 8001d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001d6e:	f7fe fda5 	bl	80008bc <__aeabi_ddiv>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	ec43 2b17 	vmov	d7, r2, r3
 8001d7a:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 8001e08 <timer_callback+0x318>
 8001d7e:	ed97 5b06 	vldr	d5, [r7, #24]
 8001d82:	ed97 4b08 	vldr	d4, [r7, #32]
 8001d86:	ed97 3b0a 	vldr	d3, [r7, #40]	@ 0x28
 8001d8a:	eeb0 2a47 	vmov.f32	s4, s14
 8001d8e:	eef0 2a67 	vmov.f32	s5, s15
 8001d92:	eeb0 1a49 	vmov.f32	s2, s18
 8001d96:	eef0 1a69 	vmov.f32	s3, s19
 8001d9a:	eeb0 0a48 	vmov.f32	s0, s16
 8001d9e:	eef0 0a68 	vmov.f32	s1, s17
 8001da2:	f7ff fac5 	bl	8001330 <calculate_accl_angles>
				calculate_kalm_angles(Ax/GRAVITY, Ay/GRAVITY, Az/GRAVITY, Gx, Gy, Gz, 0.01);
 8001da6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001dd0 <timer_callback+0x2e0>)
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001db0:	f7fe fd84 	bl	80008bc <__aeabi_ddiv>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	ec43 2b18 	vmov	d8, r2, r3
 8001dbc:	a304      	add	r3, pc, #16	@ (adr r3, 8001dd0 <timer_callback+0x2e0>)
 8001dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001dc6:	f7fe fd79 	bl	80008bc <__aeabi_ddiv>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	e01e      	b.n	8001e0c <timer_callback+0x31c>
 8001dce:	bf00      	nop
 8001dd0:	3a92a305 	.word	0x3a92a305
 8001dd4:	40239d01 	.word	0x40239d01
 8001dd8:	a2529d39 	.word	0xa2529d39
 8001ddc:	3f91df46 	.word	0x3f91df46
 8001de0:	20004ba0 	.word	0x20004ba0
 8001de4:	20000f88 	.word	0x20000f88
 8001de8:	20000f89 	.word	0x20000f89
 8001dec:	20000df8 	.word	0x20000df8
 8001df0:	20000e58 	.word	0x20000e58
 8001df4:	20000e70 	.word	0x20000e70
 8001df8:	20000b18 	.word	0x20000b18
 8001dfc:	20000b10 	.word	0x20000b10
 8001e00:	0801dbb4 	.word	0x0801dbb4
 8001e04:	20000ed0 	.word	0x20000ed0
 8001e08:	3c23d70a 	.word	0x3c23d70a
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	ec43 2b19 	vmov	d9, r2, r3
 8001e12:	a351      	add	r3, pc, #324	@ (adr r3, 8001f58 <timer_callback+0x468>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001e1c:	f7fe fd4e 	bl	80008bc <__aeabi_ddiv>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	ec43 2b17 	vmov	d7, r2, r3
 8001e28:	ed9f 6a41 	vldr	s12, [pc, #260]	@ 8001f30 <timer_callback+0x440>
 8001e2c:	ed97 5b06 	vldr	d5, [r7, #24]
 8001e30:	ed97 4b08 	vldr	d4, [r7, #32]
 8001e34:	ed97 3b0a 	vldr	d3, [r7, #40]	@ 0x28
 8001e38:	eeb0 2a47 	vmov.f32	s4, s14
 8001e3c:	eef0 2a67 	vmov.f32	s5, s15
 8001e40:	eeb0 1a49 	vmov.f32	s2, s18
 8001e44:	eef0 1a69 	vmov.f32	s3, s19
 8001e48:	eeb0 0a48 	vmov.f32	s0, s16
 8001e4c:	eef0 0a68 	vmov.f32	s1, s17
 8001e50:	f7ff fb5a 	bl	8001508 <calculate_kalm_angles>

				cmd_vel_msg.linear.x = rotation_kalm.roll * DEG_TO_RAD;
 8001e54:	4b37      	ldr	r3, [pc, #220]	@ (8001f34 <timer_callback+0x444>)
 8001e56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e5a:	a333      	add	r3, pc, #204	@ (adr r3, 8001f28 <timer_callback+0x438>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fc02 	bl	8000668 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	4b31      	ldr	r3, [pc, #196]	@ (8001f38 <timer_callback+0x448>)
 8001e72:	f7fe fd23 	bl	80008bc <__aeabi_ddiv>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4930      	ldr	r1, [pc, #192]	@ (8001f3c <timer_callback+0x44c>)
 8001e7c:	e9c1 2300 	strd	r2, r3, [r1]
				cmd_vel_msg.angular.z = -(rotation_kalm.pitch * DEG_TO_RAD);
 8001e80:	4b2c      	ldr	r3, [pc, #176]	@ (8001f34 <timer_callback+0x444>)
 8001e82:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e86:	a328      	add	r3, pc, #160	@ (adr r3, 8001f28 <timer_callback+0x438>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fbec 	bl	8000668 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <timer_callback+0x448>)
 8001e9e:	f7fe fd0d 	bl	80008bc <__aeabi_ddiv>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4614      	mov	r4, r2
 8001ea8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001eac:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <timer_callback+0x44c>)
 8001eae:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28

				rcl_ret_t rett = rcl_publish(&cmd_vel_publisher, &cmd_vel_msg, NULL);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4921      	ldr	r1, [pc, #132]	@ (8001f3c <timer_callback+0x44c>)
 8001eb6:	4822      	ldr	r0, [pc, #136]	@ (8001f40 <timer_callback+0x450>)
 8001eb8:	f00d fc56 	bl	800f768 <rcl_publish>
 8001ebc:	6138      	str	r0, [r7, #16]
				if (rett != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d021      	beq.n	8001f08 <timer_callback+0x418>
 8001ec4:	f240 1143 	movw	r1, #323	@ 0x143
 8001ec8:	481e      	ldr	r0, [pc, #120]	@ (8001f44 <timer_callback+0x454>)
 8001eca:	f01a fa63 	bl	801c394 <iprintf>
 8001ece:	e01b      	b.n	8001f08 <timer_callback+0x418>
			}
		}
		else
		{
			static uint32_t timestamp = 0;
			if (timestamp <= HAL_GetTick()){
 8001ed0:	f001 fca4 	bl	800381c <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f48 <timer_callback+0x458>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d314      	bcc.n	8001f08 <timer_callback+0x418>
				timestamp = HAL_GetTick() + 1000;
 8001ede:	f001 fc9d 	bl	800381c <HAL_GetTick>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001ee8:	4a17      	ldr	r2, [pc, #92]	@ (8001f48 <timer_callback+0x458>)
 8001eea:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001eec:	2120      	movs	r1, #32
 8001eee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef2:	f004 fa87 	bl	8006404 <HAL_GPIO_TogglePin>
				HAL_I2C_DeInit(&hi2c1);
 8001ef6:	4815      	ldr	r0, [pc, #84]	@ (8001f4c <timer_callback+0x45c>)
 8001ef8:	f004 fb5c 	bl	80065b4 <HAL_I2C_DeInit>
				HAL_I2C_Init(&hi2c1);
 8001efc:	4813      	ldr	r0, [pc, #76]	@ (8001f4c <timer_callback+0x45c>)
 8001efe:	f004 fabe 	bl	800647e <HAL_I2C_Init>
				MPU6050_Init(&hi2c1);
 8001f02:	4812      	ldr	r0, [pc, #72]	@ (8001f4c <timer_callback+0x45c>)
 8001f04:	f008 fb0a 	bl	800a51c <MPU6050_Init>
			}
		}

	    HAL_IWDG_Refresh(&hiwdg);
 8001f08:	4811      	ldr	r0, [pc, #68]	@ (8001f50 <timer_callback+0x460>)
 8001f0a:	f005 f965 	bl	80071d8 <HAL_IWDG_Refresh>
	    cc++;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <timer_callback+0x464>)
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	3301      	adds	r3, #1
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <timer_callback+0x464>)
 8001f18:	801a      	strh	r2, [r3, #0]
	}
}
 8001f1a:	bf00      	nop
 8001f1c:	3750      	adds	r7, #80	@ 0x50
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	ecbd 8b04 	vpop	{d8-d9}
 8001f24:	bdb0      	pop	{r4, r5, r7, pc}
 8001f26:	bf00      	nop
 8001f28:	54442d18 	.word	0x54442d18
 8001f2c:	400921fb 	.word	0x400921fb
 8001f30:	3c23d70a 	.word	0x3c23d70a
 8001f34:	20000eb8 	.word	0x20000eb8
 8001f38:	40668000 	.word	0x40668000
 8001f3c:	20000c60 	.word	0x20000c60
 8001f40:	20000c58 	.word	0x20000c58
 8001f44:	0801dbb4 	.word	0x0801dbb4
 8001f48:	20003f84 	.word	0x20003f84
 8001f4c:	20004ba0 	.word	0x20004ba0
 8001f50:	20004bf4 	.word	0x20004bf4
 8001f54:	20000e50 	.word	0x20000e50
 8001f58:	3a92a305 	.word	0x3a92a305
 8001f5c:	40239d01 	.word	0x40239d01

08001f60 <imu_calib_service_callback>:

void imu_calib_service_callback(const void * request_msg, void * response_msg){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  // Cast messages to expected types
  imu_interfaces__srv__ImuCalibration_Request * req_in =
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	617b      	str	r3, [r7, #20]
    (imu_interfaces__srv__ImuCalibration_Request *) request_msg;
  imu_interfaces__srv__ImuCalibration_Response * res_in =
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	613b      	str	r3, [r7, #16]
    (imu_interfaces__srv__ImuCalibration_Response *) response_msg;

  size_t accl_size = sizeof(req_in->imu_calib.linear_acceleration_covariance);
 8001f72:	2348      	movs	r3, #72	@ 0x48
 8001f74:	60fb      	str	r3, [r7, #12]
  size_t gyro_size = sizeof(req_in->imu_calib.angular_velocity_covariance);
 8001f76:	2348      	movs	r3, #72	@ 0x48
 8001f78:	60bb      	str	r3, [r7, #8]
  memcpy(mpu6050_msg.linear_acceleration_covariance, req_in->imu_calib.linear_acceleration_covariance, accl_size);
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	33f8      	adds	r3, #248	@ 0xf8
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4619      	mov	r1, r3
 8001f82:	481e      	ldr	r0, [pc, #120]	@ (8001ffc <imu_calib_service_callback+0x9c>)
 8001f84:	f01a fc4f 	bl	801c826 <memcpy>
  memcpy(mpu6050_msg.angular_velocity_covariance, req_in->imu_calib.angular_velocity_covariance, gyro_size);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	3398      	adds	r3, #152	@ 0x98
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	481b      	ldr	r0, [pc, #108]	@ (8002000 <imu_calib_service_callback+0xa0>)
 8001f92:	f01a fc48 	bl	801c826 <memcpy>

  accl_offset.x = req_in->imu_calib.linear_acceleration.x;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8001f9c:	4919      	ldr	r1, [pc, #100]	@ (8002004 <imu_calib_service_callback+0xa4>)
 8001f9e:	e9c1 2300 	strd	r2, r3, [r1]
  accl_offset.y = req_in->imu_calib.linear_acceleration.y;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 8001fa8:	4916      	ldr	r1, [pc, #88]	@ (8002004 <imu_calib_service_callback+0xa4>)
 8001faa:	e9c1 2302 	strd	r2, r3, [r1, #8]
  accl_offset.z = req_in->imu_calib.linear_acceleration.z;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8001fb4:	4913      	ldr	r1, [pc, #76]	@ (8002004 <imu_calib_service_callback+0xa4>)
 8001fb6:	e9c1 2304 	strd	r2, r3, [r1, #16]

  gyro_offset.x = req_in->imu_calib.angular_velocity.x;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8001fc0:	4911      	ldr	r1, [pc, #68]	@ (8002008 <imu_calib_service_callback+0xa8>)
 8001fc2:	e9c1 2300 	strd	r2, r3, [r1]
  gyro_offset.y = req_in->imu_calib.angular_velocity.y;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001fcc:	490e      	ldr	r1, [pc, #56]	@ (8002008 <imu_calib_service_callback+0xa8>)
 8001fce:	e9c1 2302 	strd	r2, r3, [r1, #8]
  gyro_offset.z = req_in->imu_calib.angular_velocity.z;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001fd8:	490b      	ldr	r1, [pc, #44]	@ (8002008 <imu_calib_service_callback+0xa8>)
 8001fda:	e9c1 2304 	strd	r2, r3, [r1, #16]

  is_calib = true;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <imu_calib_service_callback+0xac>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
  res_in->success = true;
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001fea:	2120      	movs	r1, #32
 8001fec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ff0:	f004 fa08 	bl	8006404 <HAL_GPIO_TogglePin>

}
 8001ff4:	bf00      	nop
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000c10 	.word	0x20000c10
 8002000:	20000bb0 	.word	0x20000bb0
 8002004:	20000e58 	.word	0x20000e58
 8002008:	20000e70 	.word	0x20000e70
 800200c:	20000f88 	.word	0x20000f88

08002010 <imu_status_service_callback>:

void imu_status_service_callback(const void * request_msg, void * response_msg){
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  // Cast messages to expected types
  std_srvs__srv__SetBool_Request * req_in =
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	617b      	str	r3, [r7, #20]
    (std_srvs__srv__SetBool_Request *) request_msg;
  std_srvs__srv__SetBool_Response * res_in =
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	613b      	str	r3, [r7, #16]
    (std_srvs__srv__SetBool_Response *) response_msg;

  if (req_in->data){
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d020      	beq.n	800206c <imu_status_service_callback+0x5c>
	  uint32_t i2cError = HAL_I2C_GetError(&hi2c1);
 800202a:	4815      	ldr	r0, [pc, #84]	@ (8002080 <imu_status_service_callback+0x70>)
 800202c:	f004 fd20 	bl	8006a70 <HAL_I2C_GetError>
 8002030:	60f8      	str	r0, [r7, #12]
	  if (i2cError == HAL_I2C_ERROR_NONE) {
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10c      	bne.n	8002052 <imu_status_service_callback+0x42>
	      res_in->success = true;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
	      res_in->message.data = "MPU6050 is connected.";
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4a10      	ldr	r2, [pc, #64]	@ (8002084 <imu_status_service_callback+0x74>)
 8002042:	605a      	str	r2, [r3, #4]
		  cs++;
 8002044:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <imu_status_service_callback+0x78>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	3301      	adds	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <imu_status_service_callback+0x78>)
 800204e:	801a      	strh	r2, [r3, #0]
  else{
      res_in->success = false;
      res_in->message.data = "Request false.";
  }

}
 8002050:	e012      	b.n	8002078 <imu_status_service_callback+0x68>
	      res_in->success = false;
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
	      res_in->message.data = "MPU6050 is not connect, Error with I2C interfaces.";
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4a0c      	ldr	r2, [pc, #48]	@ (800208c <imu_status_service_callback+0x7c>)
 800205c:	605a      	str	r2, [r3, #4]
		  ct++;
 800205e:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <imu_status_service_callback+0x80>)
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	b29a      	uxth	r2, r3
 8002066:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <imu_status_service_callback+0x80>)
 8002068:	801a      	strh	r2, [r3, #0]
}
 800206a:	e005      	b.n	8002078 <imu_status_service_callback+0x68>
      res_in->success = false;
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
      res_in->message.data = "Request false.";
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4a07      	ldr	r2, [pc, #28]	@ (8002094 <imu_status_service_callback+0x84>)
 8002076:	605a      	str	r2, [r3, #4]
}
 8002078:	bf00      	nop
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20004ba0 	.word	0x20004ba0
 8002084:	0801dbd0 	.word	0x0801dbd0
 8002088:	20000e52 	.word	0x20000e52
 800208c:	0801dbe8 	.word	0x0801dbe8
 8002090:	20000e54 	.word	0x20000e54
 8002094:	0801dc1c 	.word	0x0801dc1c

08002098 <ADC_Averaged>:

void ADC_Averaged()
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 40; i++)
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	e017      	b.n	80020d4 <ADC_Averaged+0x3c>
	{
		ADC_SumAPot[0] += ADCBuffer[2*i];
 80020a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002120 <ADC_Averaged+0x88>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	0052      	lsls	r2, r2, #1
 80020ac:	491d      	ldr	r1, [pc, #116]	@ (8002124 <ADC_Averaged+0x8c>)
 80020ae:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80020b2:	4413      	add	r3, r2
 80020b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002120 <ADC_Averaged+0x88>)
 80020b6:	6013      	str	r3, [r2, #0]
		ADC_SumAPot[1] += ADCBuffer[1+(2*i)];
 80020b8:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <ADC_Averaged+0x88>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	0052      	lsls	r2, r2, #1
 80020c0:	3201      	adds	r2, #1
 80020c2:	4918      	ldr	r1, [pc, #96]	@ (8002124 <ADC_Averaged+0x8c>)
 80020c4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80020c8:	4413      	add	r3, r2
 80020ca:	4a15      	ldr	r2, [pc, #84]	@ (8002120 <ADC_Averaged+0x88>)
 80020cc:	6053      	str	r3, [r2, #4]
	for (int i = 0; i < 40; i++)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3301      	adds	r3, #1
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b27      	cmp	r3, #39	@ 0x27
 80020d8:	dde4      	ble.n	80020a4 <ADC_Averaged+0xc>
	}

	for (int i = 0; i < 2; i++)
 80020da:	2300      	movs	r3, #0
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	e015      	b.n	800210c <ADC_Averaged+0x74>
	{
		ADC_Average[i] = ADC_SumAPot[i] / 40;
 80020e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002120 <ADC_Averaged+0x88>)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002128 <ADC_Averaged+0x90>)
 80020ea:	fb82 1203 	smull	r1, r2, r2, r3
 80020ee:	1112      	asrs	r2, r2, #4
 80020f0:	17db      	asrs	r3, r3, #31
 80020f2:	1ad2      	subs	r2, r2, r3
 80020f4:	490d      	ldr	r1, [pc, #52]	@ (800212c <ADC_Averaged+0x94>)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ADC_SumAPot[i] = 0;
 80020fc:	4a08      	ldr	r2, [pc, #32]	@ (8002120 <ADC_Averaged+0x88>)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2100      	movs	r1, #0
 8002102:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 2; i++)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b01      	cmp	r3, #1
 8002110:	dde6      	ble.n	80020e0 <ADC_Averaged+0x48>
	}
}
 8002112:	bf00      	nop
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	20001034 	.word	0x20001034
 8002124:	20000f8c 	.word	0x20000f8c
 8002128:	66666667 	.word	0x66666667
 800212c:	2000102c 	.word	0x2000102c

08002130 <Read_Buttons>:

void Read_Buttons()
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
	joy.A = HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin);
 8002134:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002138:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800213c:	f004 f932 	bl	80063a4 <HAL_GPIO_ReadPin>
 8002140:	4603      	mov	r3, r0
 8002142:	461a      	mov	r2, r3
 8002144:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <Read_Buttons+0x60>)
 8002146:	701a      	strb	r2, [r3, #0]
	joy.B = HAL_GPIO_ReadPin(B_GPIO_Port, B_Pin);
 8002148:	2108      	movs	r1, #8
 800214a:	4812      	ldr	r0, [pc, #72]	@ (8002194 <Read_Buttons+0x64>)
 800214c:	f004 f92a 	bl	80063a4 <HAL_GPIO_ReadPin>
 8002150:	4603      	mov	r3, r0
 8002152:	461a      	mov	r2, r3
 8002154:	4b0e      	ldr	r3, [pc, #56]	@ (8002190 <Read_Buttons+0x60>)
 8002156:	705a      	strb	r2, [r3, #1]
	joy.C = HAL_GPIO_ReadPin(C_GPIO_Port, C_Pin);
 8002158:	2120      	movs	r1, #32
 800215a:	480e      	ldr	r0, [pc, #56]	@ (8002194 <Read_Buttons+0x64>)
 800215c:	f004 f922 	bl	80063a4 <HAL_GPIO_ReadPin>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <Read_Buttons+0x60>)
 8002166:	709a      	strb	r2, [r3, #2]
	joy.D = HAL_GPIO_ReadPin(D_GPIO_Port, D_Pin);
 8002168:	2110      	movs	r1, #16
 800216a:	480a      	ldr	r0, [pc, #40]	@ (8002194 <Read_Buttons+0x64>)
 800216c:	f004 f91a 	bl	80063a4 <HAL_GPIO_ReadPin>
 8002170:	4603      	mov	r3, r0
 8002172:	461a      	mov	r2, r3
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <Read_Buttons+0x60>)
 8002176:	70da      	strb	r2, [r3, #3]
	joy.K = HAL_GPIO_ReadPin(K_GPIO_Port, K_Pin);
 8002178:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800217c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002180:	f004 f910 	bl	80063a4 <HAL_GPIO_ReadPin>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	4b01      	ldr	r3, [pc, #4]	@ (8002190 <Read_Buttons+0x60>)
 800218a:	711a      	strb	r2, [r3, #4]
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	2000103c 	.word	0x2000103c
 8002194:	48000400 	.word	0x48000400

08002198 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  while (MPU6050_Init(&hi2c1) == 1);
 800219c:	bf00      	nop
 800219e:	480f      	ldr	r0, [pc, #60]	@ (80021dc <MX_FREERTOS_Init+0x44>)
 80021a0:	f008 f9bc 	bl	800a51c <MPU6050_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d0f9      	beq.n	800219e <MX_FREERTOS_Init+0x6>
  Kalman_Init(&kalmanX);
 80021aa:	480d      	ldr	r0, [pc, #52]	@ (80021e0 <MX_FREERTOS_Init+0x48>)
 80021ac:	f7ff fae0 	bl	8001770 <Kalman_Init>
  Kalman_Init(&kalmanY);
 80021b0:	480c      	ldr	r0, [pc, #48]	@ (80021e4 <MX_FREERTOS_Init+0x4c>)
 80021b2:	f7ff fadd 	bl	8001770 <Kalman_Init>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80021b6:	217f      	movs	r1, #127	@ 0x7f
 80021b8:	480b      	ldr	r0, [pc, #44]	@ (80021e8 <MX_FREERTOS_Init+0x50>)
 80021ba:	f003 f8d5 	bl	8005368 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 80);
 80021be:	2250      	movs	r2, #80	@ 0x50
 80021c0:	490a      	ldr	r1, [pc, #40]	@ (80021ec <MX_FREERTOS_Init+0x54>)
 80021c2:	4809      	ldr	r0, [pc, #36]	@ (80021e8 <MX_FREERTOS_Init+0x50>)
 80021c4:	f001 ff58 	bl	8004078 <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80021c8:	4a09      	ldr	r2, [pc, #36]	@ (80021f0 <MX_FREERTOS_Init+0x58>)
 80021ca:	2100      	movs	r1, #0
 80021cc:	4809      	ldr	r0, [pc, #36]	@ (80021f4 <MX_FREERTOS_Init+0x5c>)
 80021ce:	f008 fdcf 	bl	800ad70 <osThreadNew>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4a08      	ldr	r2, [pc, #32]	@ (80021f8 <MX_FREERTOS_Init+0x60>)
 80021d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20004ba0 	.word	0x20004ba0
 80021e0:	20000ee8 	.word	0x20000ee8
 80021e4:	20000f38 	.word	0x20000f38
 80021e8:	20000a3c 	.word	0x20000a3c
 80021ec:	20000f8c 	.word	0x20000f8c
 80021f0:	0801dce8 	.word	0x0801dce8
 80021f4:	080021fd 	.word	0x080021fd
 80021f8:	20001044 	.word	0x20001044

080021fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80021fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002200:	b0f0      	sub	sp, #448	@ 0x1c0
 8002202:	af02      	add	r7, sp, #8
 8002204:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8002208:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800220c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	// micro-ROS configuration

	rmw_uros_set_custom_transport(
 800220e:	4b8e      	ldr	r3, [pc, #568]	@ (8002448 <StartDefaultTask+0x24c>)
 8002210:	9301      	str	r3, [sp, #4]
 8002212:	4b8e      	ldr	r3, [pc, #568]	@ (800244c <StartDefaultTask+0x250>)
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	4b8e      	ldr	r3, [pc, #568]	@ (8002450 <StartDefaultTask+0x254>)
 8002218:	4a8e      	ldr	r2, [pc, #568]	@ (8002454 <StartDefaultTask+0x258>)
 800221a:	498f      	ldr	r1, [pc, #572]	@ (8002458 <StartDefaultTask+0x25c>)
 800221c:	2001      	movs	r0, #1
 800221e:	f00e fb63 	bl	80108e8 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002222:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8002226:	4618      	mov	r0, r3
 8002228:	f00e fa7a 	bl	8010720 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 800222c:	4b8b      	ldr	r3, [pc, #556]	@ (800245c <StartDefaultTask+0x260>)
 800222e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	freeRTOS_allocator.deallocate = microros_deallocate;
 8002232:	4b8b      	ldr	r3, [pc, #556]	@ (8002460 <StartDefaultTask+0x264>)
 8002234:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
	freeRTOS_allocator.reallocate = microros_reallocate;
 8002238:	4b8a      	ldr	r3, [pc, #552]	@ (8002464 <StartDefaultTask+0x268>)
 800223a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800223e:	4b8a      	ldr	r3, [pc, #552]	@ (8002468 <StartDefaultTask+0x26c>)
 8002240:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002244:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8002248:	4618      	mov	r0, r3
 800224a:	f00e fa77 	bl	801073c <rcutils_set_default_allocator>
 800224e:	4603      	mov	r3, r0
 8002250:	f083 0301 	eor.w	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d004      	beq.n	8002264 <StartDefaultTask+0x68>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 800225a:	f240 11f3 	movw	r1, #499	@ 0x1f3
 800225e:	4883      	ldr	r0, [pc, #524]	@ (800246c <StartDefaultTask+0x270>)
 8002260:	f01a f898 	bl	801c394 <iprintf>
	}

	GPIO_PinState B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8002264:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002268:	4881      	ldr	r0, [pc, #516]	@ (8002470 <StartDefaultTask+0x274>)
 800226a:	f004 f89b 	bl	80063a4 <HAL_GPIO_ReadPin>
 800226e:	4603      	mov	r3, r0
 8002270:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
	rclc_support_t support;
	rclc_executor_t executor;
	rcl_allocator_t allocator;
	rcl_init_options_t init_options;

	const unsigned int timer_period = RCL_MS_TO_NS(10);
 8002274:	4b7f      	ldr	r3, [pc, #508]	@ (8002474 <StartDefaultTask+0x278>)
 8002276:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
	const int timeout_ms = 5000;
 800227a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800227e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	int executor_num = 2;
 8002282:	2302      	movs	r3, #2
 8002284:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

	// Get message type support
	const rosidl_message_type_support_t * imu_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu);
 8002288:	f00f feac 	bl	8011fe4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800228c:	f8c7 01a4 	str.w	r0, [r7, #420]	@ 0x1a4

	const rosidl_message_type_support_t * cmd_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist);
 8002290:	f00b faca 	bl	800d828 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8002294:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0

	const rosidl_service_type_support_t * imu_calib_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(imu_interfaces, srv, ImuCalibration);
 8002298:	f00b fc02 	bl	800daa0 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>
 800229c:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c

	const rosidl_service_type_support_t * imu_status_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, SetBool);
 80022a0:	f010 f8c6 	bl	8012430 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>
 80022a4:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

	allocator = rcl_get_default_allocator();
 80022a8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80022ac:	f5a3 7486 	sub.w	r4, r3, #268	@ 0x10c
 80022b0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80022b4:	4618      	mov	r0, r3
 80022b6:	f00e fa5f 	bl	8010778 <rcutils_get_default_allocator>
 80022ba:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80022be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022c2:	461d      	mov	r5, r3
 80022c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c8:	682b      	ldr	r3, [r5, #0]
 80022ca:	6023      	str	r3, [r4, #0]

	executor = rclc_executor_get_zero_initialized_executor();
 80022cc:	463b      	mov	r3, r7
 80022ce:	4618      	mov	r0, r3
 80022d0:	f00d fdd8 	bl	800fe84 <rclc_executor_get_zero_initialized_executor>
 80022d4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80022d8:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 80022dc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80022e0:	4611      	mov	r1, r2
 80022e2:	2288      	movs	r2, #136	@ 0x88
 80022e4:	4618      	mov	r0, r3
 80022e6:	f01a fa9e 	bl	801c826 <memcpy>

	init_options = rcl_get_zero_initialized_init_options();
 80022ea:	f00d f86d 	bl	800f3c8 <rcl_get_zero_initialized_init_options>
 80022ee:	4602      	mov	r2, r0
 80022f0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80022f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80022f8:	601a      	str	r2, [r3, #0]

	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 80022fa:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80022fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002302:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8002306:	466d      	mov	r5, sp
 8002308:	f103 020c 	add.w	r2, r3, #12
 800230c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002310:	e885 0003 	stmia.w	r5, {r0, r1}
 8002314:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002316:	4620      	mov	r0, r4
 8002318:	f00d f858 	bl	800f3cc <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 69));
 800231c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002320:	2145      	movs	r1, #69	@ 0x45
 8002322:	4618      	mov	r0, r3
 8002324:	f00d f94e 	bl	800f5c4 <rcl_init_options_set_domain_id>

	//create support init_options
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8002328:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800232c:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 8002330:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	4613      	mov	r3, r2
 8002338:	2200      	movs	r2, #0
 800233a:	2100      	movs	r1, #0
 800233c:	f00e f8ac 	bl	8010498 <rclc_support_init_with_options>

	//create timer
	rclc_timer_init_default(&mpu6050_timer, &support, timer_period, timer_callback);
 8002340:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002344:	2200      	movs	r2, #0
 8002346:	4698      	mov	r8, r3
 8002348:	4691      	mov	r9, r2
 800234a:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 800234e:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8002352:	4b49      	ldr	r3, [pc, #292]	@ (8002478 <StartDefaultTask+0x27c>)
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	4642      	mov	r2, r8
 8002358:	464b      	mov	r3, r9
 800235a:	f00e f9a9 	bl	80106b0 <rclc_timer_init_default>

	// create node
	rclc_node_init_default(&node, "G474RE_MPU6050_node", "", &support);
 800235e:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8002362:	4a46      	ldr	r2, [pc, #280]	@ (800247c <StartDefaultTask+0x280>)
 8002364:	4946      	ldr	r1, [pc, #280]	@ (8002480 <StartDefaultTask+0x284>)
 8002366:	4847      	ldr	r0, [pc, #284]	@ (8002484 <StartDefaultTask+0x288>)
 8002368:	f00e f8ca 	bl	8010500 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_best_effort(&mpu6050_publisher, &node, imu_type_support, "mpu6050_publisher");
 800236c:	4b46      	ldr	r3, [pc, #280]	@ (8002488 <StartDefaultTask+0x28c>)
 800236e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8002372:	4944      	ldr	r1, [pc, #272]	@ (8002484 <StartDefaultTask+0x288>)
 8002374:	4845      	ldr	r0, [pc, #276]	@ (800248c <StartDefaultTask+0x290>)
 8002376:	f00e f933 	bl	80105e0 <rclc_publisher_init_best_effort>
	rclc_publisher_init_default(&cmd_vel_publisher, &node, cmd_type_support, "cmd_vel");
 800237a:	4b45      	ldr	r3, [pc, #276]	@ (8002490 <StartDefaultTask+0x294>)
 800237c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8002380:	4940      	ldr	r1, [pc, #256]	@ (8002484 <StartDefaultTask+0x288>)
 8002382:	4844      	ldr	r0, [pc, #272]	@ (8002494 <StartDefaultTask+0x298>)
 8002384:	f00e f8f8 	bl	8010578 <rclc_publisher_init_default>

	//create subscriber


	//create service server
	if (B1 == GPIO_PIN_RESET) {
 8002388:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10c      	bne.n	80023aa <StartDefaultTask+0x1ae>
		rclc_service_init_default(&imu_calibration_server, &node, imu_calib_type_support, "imu_calibration");
 8002390:	4b41      	ldr	r3, [pc, #260]	@ (8002498 <StartDefaultTask+0x29c>)
 8002392:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002396:	493b      	ldr	r1, [pc, #236]	@ (8002484 <StartDefaultTask+0x288>)
 8002398:	4840      	ldr	r0, [pc, #256]	@ (800249c <StartDefaultTask+0x2a0>)
 800239a:	f00e f955 	bl	8010648 <rclc_service_init_default>
		executor_num++;
 800239e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80023a2:	3301      	adds	r3, #1
 80023a4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 80023a8:	e002      	b.n	80023b0 <StartDefaultTask+0x1b4>
	}
	else{
		on_calib = true;
 80023aa:	4b3d      	ldr	r3, [pc, #244]	@ (80024a0 <StartDefaultTask+0x2a4>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]
	}

	rclc_service_init_default(&imu_status_server, &node, imu_status_type_support, "imu/status");
 80023b0:	4b3c      	ldr	r3, [pc, #240]	@ (80024a4 <StartDefaultTask+0x2a8>)
 80023b2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80023b6:	4933      	ldr	r1, [pc, #204]	@ (8002484 <StartDefaultTask+0x288>)
 80023b8:	483b      	ldr	r0, [pc, #236]	@ (80024a8 <StartDefaultTask+0x2ac>)
 80023ba:	f00e f945 	bl	8010648 <rclc_service_init_default>
	//create service client


	//create executor
	rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 80023be:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80023c2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80023c6:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 80023ca:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80023ce:	f00d fd63 	bl	800fe98 <rclc_executor_init>

	rclc_executor_add_timer(&executor, &mpu6050_timer);
 80023d2:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80023d6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f00d fdcb 	bl	800ff78 <rclc_executor_add_timer>
	if (B1 == GPIO_PIN_RESET) rclc_executor_add_service(&executor, &imu_calibration_server, &imu_calibration_request, &imu_calibration_response, imu_calib_service_callback);
 80023e2:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d108      	bne.n	80023fc <StartDefaultTask+0x200>
 80023ea:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80023ee:	4b2f      	ldr	r3, [pc, #188]	@ (80024ac <StartDefaultTask+0x2b0>)
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	4b2f      	ldr	r3, [pc, #188]	@ (80024b0 <StartDefaultTask+0x2b4>)
 80023f4:	4a2f      	ldr	r2, [pc, #188]	@ (80024b4 <StartDefaultTask+0x2b8>)
 80023f6:	4929      	ldr	r1, [pc, #164]	@ (800249c <StartDefaultTask+0x2a0>)
 80023f8:	f00d fde8 	bl	800ffcc <rclc_executor_add_service>
	rclc_executor_add_service(&executor, &imu_status_server, &imu_status_request, &imu_status_response, imu_status_service_callback);
 80023fc:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8002400:	4b2d      	ldr	r3, [pc, #180]	@ (80024b8 <StartDefaultTask+0x2bc>)
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	4b2d      	ldr	r3, [pc, #180]	@ (80024bc <StartDefaultTask+0x2c0>)
 8002406:	4a2e      	ldr	r2, [pc, #184]	@ (80024c0 <StartDefaultTask+0x2c4>)
 8002408:	4927      	ldr	r1, [pc, #156]	@ (80024a8 <StartDefaultTask+0x2ac>)
 800240a:	f00d fddf 	bl	800ffcc <rclc_executor_add_service>

	rclc_executor_spin(&executor);
 800240e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002412:	4618      	mov	r0, r3
 8002414:	f00e f800 	bl	8010418 <rclc_executor_spin>

	rmw_uros_sync_session(timeout_ms);
 8002418:	f8d7 01a8 	ldr.w	r0, [r7, #424]	@ 0x1a8
 800241c:	f00f f95c 	bl	80116d8 <rmw_uros_sync_session>

	//create message
	mpu6050_msg.header.frame_id = micro_ros_string_utilities_init("imu_frame");
 8002420:	4c28      	ldr	r4, [pc, #160]	@ (80024c4 <StartDefaultTask+0x2c8>)
 8002422:	463b      	mov	r3, r7
 8002424:	4928      	ldr	r1, [pc, #160]	@ (80024c8 <StartDefaultTask+0x2cc>)
 8002426:	4618      	mov	r0, r3
 8002428:	f00b fc2a 	bl	800dc80 <micro_ros_string_utilities_init>
 800242c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8002430:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8002434:	f104 0308 	add.w	r3, r4, #8
 8002438:	ca07      	ldmia	r2, {r0, r1, r2}
 800243a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for(;;)
	{
		osDelay(10);
 800243e:	200a      	movs	r0, #10
 8002440:	f008 fd28 	bl	800ae94 <osDelay>
 8002444:	e7fb      	b.n	800243e <StartDefaultTask+0x242>
 8002446:	bf00      	nop
 8002448:	080036cd 	.word	0x080036cd
 800244c:	08003669 	.word	0x08003669
 8002450:	08003649 	.word	0x08003649
 8002454:	0800361d 	.word	0x0800361d
 8002458:	20004c60 	.word	0x20004c60
 800245c:	08002da9 	.word	0x08002da9
 8002460:	08002ded 	.word	0x08002ded
 8002464:	08002e25 	.word	0x08002e25
 8002468:	08002e91 	.word	0x08002e91
 800246c:	0801dc2c 	.word	0x0801dc2c
 8002470:	48000800 	.word	0x48000800
 8002474:	00989680 	.word	0x00989680
 8002478:	08001af1 	.word	0x08001af1
 800247c:	0801dc54 	.word	0x0801dc54
 8002480:	0801dc58 	.word	0x0801dc58
 8002484:	20000b08 	.word	0x20000b08
 8002488:	0801dc6c 	.word	0x0801dc6c
 800248c:	20000b10 	.word	0x20000b10
 8002490:	0801dc80 	.word	0x0801dc80
 8002494:	20000c58 	.word	0x20000c58
 8002498:	0801dc88 	.word	0x0801dc88
 800249c:	20000c90 	.word	0x20000c90
 80024a0:	20000f89 	.word	0x20000f89
 80024a4:	0801dc98 	.word	0x0801dc98
 80024a8:	20000ddc 	.word	0x20000ddc
 80024ac:	08001f61 	.word	0x08001f61
 80024b0:	20000dd8 	.word	0x20000dd8
 80024b4:	20000c98 	.word	0x20000c98
 80024b8:	08002011 	.word	0x08002011
 80024bc:	20000de4 	.word	0x20000de4
 80024c0:	20000de0 	.word	0x20000de0
 80024c4:	20000b18 	.word	0x20000b18
 80024c8:	0801dca4 	.word	0x0801dca4

080024cc <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	@ 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80024d8:	f009 fd1e 	bl	800bf18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80024dc:	4b5a      	ldr	r3, [pc, #360]	@ (8002648 <pvPortMallocMicroROS+0x17c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80024e4:	f000 f986 	bl	80027f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80024e8:	4b58      	ldr	r3, [pc, #352]	@ (800264c <pvPortMallocMicroROS+0x180>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f040 8090 	bne.w	8002616 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d01e      	beq.n	800253a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80024fc:	2208      	movs	r2, #8
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	2b00      	cmp	r3, #0
 800250c:	d015      	beq.n	800253a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f023 0307 	bic.w	r3, r3, #7
 8002514:	3308      	adds	r3, #8
 8002516:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002526:	f383 8811 	msr	BASEPRI, r3
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	e7fd      	b.n	8002536 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d06a      	beq.n	8002616 <pvPortMallocMicroROS+0x14a>
 8002540:	4b43      	ldr	r3, [pc, #268]	@ (8002650 <pvPortMallocMicroROS+0x184>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	429a      	cmp	r2, r3
 8002548:	d865      	bhi.n	8002616 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800254a:	4b42      	ldr	r3, [pc, #264]	@ (8002654 <pvPortMallocMicroROS+0x188>)
 800254c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800254e:	4b41      	ldr	r3, [pc, #260]	@ (8002654 <pvPortMallocMicroROS+0x188>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002554:	e004      	b.n	8002560 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	429a      	cmp	r2, r3
 8002568:	d903      	bls.n	8002572 <pvPortMallocMicroROS+0xa6>
 800256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f1      	bne.n	8002556 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002572:	4b35      	ldr	r3, [pc, #212]	@ (8002648 <pvPortMallocMicroROS+0x17c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002578:	429a      	cmp	r2, r3
 800257a:	d04c      	beq.n	8002616 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2208      	movs	r2, #8
 8002582:	4413      	add	r3, r2
 8002584:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	1ad2      	subs	r2, r2, r3
 8002596:	2308      	movs	r3, #8
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	429a      	cmp	r2, r3
 800259c:	d920      	bls.n	80025e0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800259e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00b      	beq.n	80025c8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	613b      	str	r3, [r7, #16]
}
 80025c2:	bf00      	nop
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	1ad2      	subs	r2, r2, r3
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80025da:	69b8      	ldr	r0, [r7, #24]
 80025dc:	f000 f96c 	bl	80028b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80025e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <pvPortMallocMicroROS+0x184>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	4a19      	ldr	r2, [pc, #100]	@ (8002650 <pvPortMallocMicroROS+0x184>)
 80025ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80025ee:	4b18      	ldr	r3, [pc, #96]	@ (8002650 <pvPortMallocMicroROS+0x184>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <pvPortMallocMicroROS+0x18c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d203      	bcs.n	8002602 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80025fa:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <pvPortMallocMicroROS+0x184>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a16      	ldr	r2, [pc, #88]	@ (8002658 <pvPortMallocMicroROS+0x18c>)
 8002600:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	4b11      	ldr	r3, [pc, #68]	@ (800264c <pvPortMallocMicroROS+0x180>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	431a      	orrs	r2, r3
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002616:	f009 fc8d 	bl	800bf34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00b      	beq.n	800263c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8002624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002628:	f383 8811 	msr	BASEPRI, r3
 800262c:	f3bf 8f6f 	isb	sy
 8002630:	f3bf 8f4f 	dsb	sy
 8002634:	60fb      	str	r3, [r7, #12]
}
 8002636:	bf00      	nop
 8002638:	bf00      	nop
 800263a:	e7fd      	b.n	8002638 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800263c:	69fb      	ldr	r3, [r7, #28]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3728      	adds	r7, #40	@ 0x28
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20004b90 	.word	0x20004b90
 800264c:	20004b9c 	.word	0x20004b9c
 8002650:	20004b94 	.word	0x20004b94
 8002654:	20004b88 	.word	0x20004b88
 8002658:	20004b98 	.word	0x20004b98

0800265c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d04a      	beq.n	8002704 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800266e:	2308      	movs	r3, #8
 8002670:	425b      	negs	r3, r3
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4413      	add	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	4b22      	ldr	r3, [pc, #136]	@ (800270c <vPortFreeMicroROS+0xb0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10b      	bne.n	80026a2 <vPortFreeMicroROS+0x46>
	__asm volatile
 800268a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800268e:	f383 8811 	msr	BASEPRI, r3
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	f3bf 8f4f 	dsb	sy
 800269a:	60fb      	str	r3, [r7, #12]
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	e7fd      	b.n	800269e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <vPortFreeMicroROS+0x66>
	__asm volatile
 80026aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ae:	f383 8811 	msr	BASEPRI, r3
 80026b2:	f3bf 8f6f 	isb	sy
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	60bb      	str	r3, [r7, #8]
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	e7fd      	b.n	80026be <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	4b11      	ldr	r3, [pc, #68]	@ (800270c <vPortFreeMicroROS+0xb0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d019      	beq.n	8002704 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d115      	bne.n	8002704 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <vPortFreeMicroROS+0xb0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	401a      	ands	r2, r3
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80026e8:	f009 fc16 	bl	800bf18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	4b07      	ldr	r3, [pc, #28]	@ (8002710 <vPortFreeMicroROS+0xb4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4413      	add	r3, r2
 80026f6:	4a06      	ldr	r2, [pc, #24]	@ (8002710 <vPortFreeMicroROS+0xb4>)
 80026f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80026fa:	6938      	ldr	r0, [r7, #16]
 80026fc:	f000 f8dc 	bl	80028b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002700:	f009 fc18 	bl	800bf34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002704:	bf00      	nop
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20004b9c 	.word	0x20004b9c
 8002710:	20004b94 	.word	0x20004b94

08002714 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002720:	2308      	movs	r3, #8
 8002722:	425b      	negs	r3, r3
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	4413      	add	r3, r2
 8002728:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	4b06      	ldr	r3, [pc, #24]	@ (800274c <getBlockSize+0x38>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	43db      	mvns	r3, r3
 8002738:	4013      	ands	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

	return count;
 800273c:	68fb      	ldr	r3, [r7, #12]
}
 800273e:	4618      	mov	r0, r3
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20004b9c 	.word	0x20004b9c

08002750 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800275a:	f009 fbdd 	bl	800bf18 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800275e:	6838      	ldr	r0, [r7, #0]
 8002760:	f7ff feb4 	bl	80024cc <pvPortMallocMicroROS>
 8002764:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d017      	beq.n	800279c <pvPortReallocMicroROS+0x4c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d014      	beq.n	800279c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ffce 	bl	8002714 <getBlockSize>
 8002778:	4603      	mov	r3, r0
 800277a:	2208      	movs	r2, #8
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	429a      	cmp	r2, r3
 8002786:	d201      	bcs.n	800278c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	68b8      	ldr	r0, [r7, #8]
 8002792:	f01a f848 	bl	801c826 <memcpy>

		vPortFreeMicroROS(pv);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ff60 	bl	800265c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800279c:	f009 fbca 	bl	800bf34 <xTaskResumeAll>

	return newmem;
 80027a0:	68bb      	ldr	r3, [r7, #8]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80027b4:	f009 fbb0 	bl	800bf18 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	fb02 f303 	mul.w	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80027c2:	6978      	ldr	r0, [r7, #20]
 80027c4:	f7ff fe82 	bl	80024cc <pvPortMallocMicroROS>
 80027c8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	613b      	str	r3, [r7, #16]

  	while(count--)
 80027ce:	e004      	b.n	80027da <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	613a      	str	r2, [r7, #16]
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	1e5a      	subs	r2, r3, #1
 80027de:	617a      	str	r2, [r7, #20]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f5      	bne.n	80027d0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80027e4:	f009 fba6 	bl	800bf34 <xTaskResumeAll>
  	return mem;
 80027e8:	68fb      	ldr	r3, [r7, #12]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80027fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80027fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002800:	4b27      	ldr	r3, [pc, #156]	@ (80028a0 <prvHeapInit+0xac>)
 8002802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3307      	adds	r3, #7
 8002812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0307 	bic.w	r3, r3, #7
 800281a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	4a1f      	ldr	r2, [pc, #124]	@ (80028a0 <prvHeapInit+0xac>)
 8002824:	4413      	add	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800282c:	4a1d      	ldr	r2, [pc, #116]	@ (80028a4 <prvHeapInit+0xb0>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002832:	4b1c      	ldr	r3, [pc, #112]	@ (80028a4 <prvHeapInit+0xb0>)
 8002834:	2200      	movs	r2, #0
 8002836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	4413      	add	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002840:	2208      	movs	r2, #8
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f023 0307 	bic.w	r3, r3, #7
 800284e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4a15      	ldr	r2, [pc, #84]	@ (80028a8 <prvHeapInit+0xb4>)
 8002854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002856:	4b14      	ldr	r3, [pc, #80]	@ (80028a8 <prvHeapInit+0xb4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800285e:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <prvHeapInit+0xb4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	1ad2      	subs	r2, r2, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002874:	4b0c      	ldr	r3, [pc, #48]	@ (80028a8 <prvHeapInit+0xb4>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a0a      	ldr	r2, [pc, #40]	@ (80028ac <prvHeapInit+0xb8>)
 8002882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a09      	ldr	r2, [pc, #36]	@ (80028b0 <prvHeapInit+0xbc>)
 800288a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800288c:	4b09      	ldr	r3, [pc, #36]	@ (80028b4 <prvHeapInit+0xc0>)
 800288e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002892:	601a      	str	r2, [r3, #0]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	20003f88 	.word	0x20003f88
 80028a4:	20004b88 	.word	0x20004b88
 80028a8:	20004b90 	.word	0x20004b90
 80028ac:	20004b98 	.word	0x20004b98
 80028b0:	20004b94 	.word	0x20004b94
 80028b4:	20004b9c 	.word	0x20004b9c

080028b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80028c0:	4b28      	ldr	r3, [pc, #160]	@ (8002964 <prvInsertBlockIntoFreeList+0xac>)
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	e002      	b.n	80028cc <prvInsertBlockIntoFreeList+0x14>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d8f7      	bhi.n	80028c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	4413      	add	r3, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d108      	bne.n	80028fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	441a      	add	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	441a      	add	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d118      	bne.n	8002940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <prvInsertBlockIntoFreeList+0xb0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d00d      	beq.n	8002936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	441a      	add	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	e008      	b.n	8002948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002936:	4b0c      	ldr	r3, [pc, #48]	@ (8002968 <prvInsertBlockIntoFreeList+0xb0>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e003      	b.n	8002948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	429a      	cmp	r2, r3
 800294e:	d002      	beq.n	8002956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20004b88 	.word	0x20004b88
 8002968:	20004b90 	.word	0x20004b90

0800296c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002972:	4b1a      	ldr	r3, [pc, #104]	@ (80029dc <MX_DMA_Init+0x70>)
 8002974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002976:	4a19      	ldr	r2, [pc, #100]	@ (80029dc <MX_DMA_Init+0x70>)
 8002978:	f043 0304 	orr.w	r3, r3, #4
 800297c:	6493      	str	r3, [r2, #72]	@ 0x48
 800297e:	4b17      	ldr	r3, [pc, #92]	@ (80029dc <MX_DMA_Init+0x70>)
 8002980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	607b      	str	r3, [r7, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800298a:	4b14      	ldr	r3, [pc, #80]	@ (80029dc <MX_DMA_Init+0x70>)
 800298c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800298e:	4a13      	ldr	r2, [pc, #76]	@ (80029dc <MX_DMA_Init+0x70>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6493      	str	r3, [r2, #72]	@ 0x48
 8002996:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <MX_DMA_Init+0x70>)
 8002998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2105      	movs	r1, #5
 80029a6:	200b      	movs	r0, #11
 80029a8:	f002 ff32 	bl	8005810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80029ac:	200b      	movs	r0, #11
 80029ae:	f002 ff49 	bl	8005844 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2105      	movs	r1, #5
 80029b6:	200c      	movs	r0, #12
 80029b8:	f002 ff2a 	bl	8005810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80029bc:	200c      	movs	r0, #12
 80029be:	f002 ff41 	bl	8005844 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2105      	movs	r1, #5
 80029c6:	200d      	movs	r0, #13
 80029c8:	f002 ff22 	bl	8005810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80029cc:	200d      	movs	r0, #13
 80029ce:	f002 ff39 	bl	8005844 <HAL_NVIC_EnableIRQ>

}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000

080029e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	@ 0x28
 80029e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	60da      	str	r2, [r3, #12]
 80029f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ae8 <MX_GPIO_Init+0x108>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fa:	4a3b      	ldr	r2, [pc, #236]	@ (8002ae8 <MX_GPIO_Init+0x108>)
 80029fc:	f043 0304 	orr.w	r3, r3, #4
 8002a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a02:	4b39      	ldr	r3, [pc, #228]	@ (8002ae8 <MX_GPIO_Init+0x108>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a0e:	4b36      	ldr	r3, [pc, #216]	@ (8002ae8 <MX_GPIO_Init+0x108>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a12:	4a35      	ldr	r2, [pc, #212]	@ (8002ae8 <MX_GPIO_Init+0x108>)
 8002a14:	f043 0320 	orr.w	r3, r3, #32
 8002a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a1a:	4b33      	ldr	r3, [pc, #204]	@ (8002ae8 <MX_GPIO_Init+0x108>)
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a26:	4b30      	ldr	r3, [pc, #192]	@ (8002ae8 <MX_GPIO_Init+0x108>)
 8002a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2a:	4a2f      	ldr	r2, [pc, #188]	@ (8002ae8 <MX_GPIO_Init+0x108>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a32:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae8 <MX_GPIO_Init+0x108>)
 8002a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae8 <MX_GPIO_Init+0x108>)
 8002a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a42:	4a29      	ldr	r2, [pc, #164]	@ (8002ae8 <MX_GPIO_Init+0x108>)
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a4a:	4b27      	ldr	r3, [pc, #156]	@ (8002ae8 <MX_GPIO_Init+0x108>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2120      	movs	r1, #32
 8002a5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a5e:	f003 fcb9 	bl	80063d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a72:	f107 0314 	add.w	r3, r7, #20
 8002a76:	4619      	mov	r1, r3
 8002a78:	481c      	ldr	r0, [pc, #112]	@ (8002aec <MX_GPIO_Init+0x10c>)
 8002a7a:	f003 fa2f 	bl	8005edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002a7e:	2320      	movs	r3, #32
 8002a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a82:	2301      	movs	r3, #1
 8002a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002a8e:	f107 0314 	add.w	r3, r7, #20
 8002a92:	4619      	mov	r1, r3
 8002a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a98:	f003 fa20 	bl	8005edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = K_Pin|A_Pin;
 8002a9c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aaa:	f107 0314 	add.w	r3, r7, #20
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ab4:	f003 fa12 	bl	8005edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = B_Pin|D_Pin|C_Pin;
 8002ab8:	2338      	movs	r3, #56	@ 0x38
 8002aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4809      	ldr	r0, [pc, #36]	@ (8002af0 <MX_GPIO_Init+0x110>)
 8002acc:	f003 fa06 	bl	8005edc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2105      	movs	r1, #5
 8002ad4:	2028      	movs	r0, #40	@ 0x28
 8002ad6:	f002 fe9b 	bl	8005810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ada:	2028      	movs	r0, #40	@ 0x28
 8002adc:	f002 feb2 	bl	8005844 <HAL_NVIC_EnableIRQ>

}
 8002ae0:	bf00      	nop
 8002ae2:	3728      	adds	r7, #40	@ 0x28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	48000800 	.word	0x48000800
 8002af0:	48000400 	.word	0x48000400

08002af4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002af8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b68 <MX_I2C1_Init+0x74>)
 8002afa:	4a1c      	ldr	r2, [pc, #112]	@ (8002b6c <MX_I2C1_Init+0x78>)
 8002afc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 8002afe:	4b1a      	ldr	r3, [pc, #104]	@ (8002b68 <MX_I2C1_Init+0x74>)
 8002b00:	4a1b      	ldr	r2, [pc, #108]	@ (8002b70 <MX_I2C1_Init+0x7c>)
 8002b02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b04:	4b18      	ldr	r3, [pc, #96]	@ (8002b68 <MX_I2C1_Init+0x74>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b0a:	4b17      	ldr	r3, [pc, #92]	@ (8002b68 <MX_I2C1_Init+0x74>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b10:	4b15      	ldr	r3, [pc, #84]	@ (8002b68 <MX_I2C1_Init+0x74>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b16:	4b14      	ldr	r3, [pc, #80]	@ (8002b68 <MX_I2C1_Init+0x74>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b1c:	4b12      	ldr	r3, [pc, #72]	@ (8002b68 <MX_I2C1_Init+0x74>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b22:	4b11      	ldr	r3, [pc, #68]	@ (8002b68 <MX_I2C1_Init+0x74>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b28:	4b0f      	ldr	r3, [pc, #60]	@ (8002b68 <MX_I2C1_Init+0x74>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b2e:	480e      	ldr	r0, [pc, #56]	@ (8002b68 <MX_I2C1_Init+0x74>)
 8002b30:	f003 fca5 	bl	800647e <HAL_I2C_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b3a:	f000 f92f 	bl	8002d9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4809      	ldr	r0, [pc, #36]	@ (8002b68 <MX_I2C1_Init+0x74>)
 8002b42:	f004 fa63 	bl	800700c <HAL_I2CEx_ConfigAnalogFilter>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b4c:	f000 f926 	bl	8002d9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b50:	2100      	movs	r1, #0
 8002b52:	4805      	ldr	r0, [pc, #20]	@ (8002b68 <MX_I2C1_Init+0x74>)
 8002b54:	f004 faa5 	bl	80070a2 <HAL_I2CEx_ConfigDigitalFilter>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b5e:	f000 f91d 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20004ba0 	.word	0x20004ba0
 8002b6c:	40005400 	.word	0x40005400
 8002b70:	40621236 	.word	0x40621236

08002b74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b09e      	sub	sp, #120	@ 0x78
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b8c:	f107 0310 	add.w	r3, r7, #16
 8002b90:	2254      	movs	r2, #84	@ 0x54
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f019 fd7d 	bl	801c694 <memset>
  if(i2cHandle->Instance==I2C1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8002c1c <HAL_I2C_MspInit+0xa8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d136      	bne.n	8002c12 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ba4:	2340      	movs	r3, #64	@ 0x40
 8002ba6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bac:	f107 0310 	add.w	r3, r7, #16
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f005 f935 	bl	8007e20 <HAL_RCCEx_PeriphCLKConfig>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002bbc:	f000 f8ee 	bl	8002d9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc0:	4b17      	ldr	r3, [pc, #92]	@ (8002c20 <HAL_I2C_MspInit+0xac>)
 8002bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc4:	4a16      	ldr	r2, [pc, #88]	@ (8002c20 <HAL_I2C_MspInit+0xac>)
 8002bc6:	f043 0302 	orr.w	r3, r3, #2
 8002bca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bcc:	4b14      	ldr	r3, [pc, #80]	@ (8002c20 <HAL_I2C_MspInit+0xac>)
 8002bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bd8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bdc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bde:	2312      	movs	r3, #18
 8002be0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be6:	2300      	movs	r3, #0
 8002be8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bea:	2304      	movs	r3, #4
 8002bec:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bee:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	480b      	ldr	r0, [pc, #44]	@ (8002c24 <HAL_I2C_MspInit+0xb0>)
 8002bf6:	f003 f971 	bl	8005edc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bfa:	4b09      	ldr	r3, [pc, #36]	@ (8002c20 <HAL_I2C_MspInit+0xac>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfe:	4a08      	ldr	r2, [pc, #32]	@ (8002c20 <HAL_I2C_MspInit+0xac>)
 8002c00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c04:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c06:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <HAL_I2C_MspInit+0xac>)
 8002c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002c12:	bf00      	nop
 8002c14:	3778      	adds	r7, #120	@ 0x78
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40005400 	.word	0x40005400
 8002c20:	40021000 	.word	0x40021000
 8002c24:	48000400 	.word	0x48000400

08002c28 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0b      	ldr	r2, [pc, #44]	@ (8002c64 <HAL_I2C_MspDeInit+0x3c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10f      	bne.n	8002c5a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <HAL_I2C_MspDeInit+0x40>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c68 <HAL_I2C_MspDeInit+0x40>)
 8002c40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c44:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002c46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c4a:	4808      	ldr	r0, [pc, #32]	@ (8002c6c <HAL_I2C_MspDeInit+0x44>)
 8002c4c:	f003 fac8 	bl	80061e0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002c50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c54:	4805      	ldr	r0, [pc, #20]	@ (8002c6c <HAL_I2C_MspDeInit+0x44>)
 8002c56:	f003 fac3 	bl	80061e0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40005400 	.word	0x40005400
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	48000400 	.word	0x48000400

08002c70 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002c74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <MX_IWDG_Init+0x34>)
 8002c76:	4a0c      	ldr	r2, [pc, #48]	@ (8002ca8 <MX_IWDG_Init+0x38>)
 8002c78:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca4 <MX_IWDG_Init+0x34>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8002c80:	4b08      	ldr	r3, [pc, #32]	@ (8002ca4 <MX_IWDG_Init+0x34>)
 8002c82:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002c86:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8002c88:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <MX_IWDG_Init+0x34>)
 8002c8a:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8002c8e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002c90:	4804      	ldr	r0, [pc, #16]	@ (8002ca4 <MX_IWDG_Init+0x34>)
 8002c92:	f004 fa52 	bl	800713a <HAL_IWDG_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8002c9c:	f000 f87e 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20004bf4 	.word	0x20004bf4
 8002ca8:	40003000 	.word	0x40003000

08002cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cb0:	f000 fd89 	bl	80037c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cb4:	f000 f814 	bl	8002ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cb8:	f7ff fe92 	bl	80029e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002cbc:	f7ff fe56 	bl	800296c <MX_DMA_Init>
  MX_I2C1_Init();
 8002cc0:	f7ff ff18 	bl	8002af4 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8002cc4:	f000 fba2 	bl	800340c <MX_LPUART1_UART_Init>
  MX_IWDG_Init();
 8002cc8:	f7ff ffd2 	bl	8002c70 <MX_IWDG_Init>
  MX_ADC1_Init();
 8002ccc:	f7fe f944 	bl	8000f58 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002cd0:	f008 f804 	bl	800acdc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002cd4:	f7ff fa60 	bl	8002198 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002cd8:	f008 f824 	bl	800ad24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <main+0x30>

08002ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b094      	sub	sp, #80	@ 0x50
 8002ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ce6:	f107 0318 	add.w	r3, r7, #24
 8002cea:	2238      	movs	r2, #56	@ 0x38
 8002cec:	2100      	movs	r1, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f019 fcd0 	bl	801c694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cf4:	1d3b      	adds	r3, r7, #4
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
 8002d00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002d02:	2000      	movs	r0, #0
 8002d04:	f004 fa78 	bl	80071f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002d08:	2309      	movs	r3, #9
 8002d0a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d10:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d12:	2301      	movs	r3, #1
 8002d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d16:	2302      	movs	r3, #2
 8002d18:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8002d1e:	2306      	movs	r3, #6
 8002d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002d22:	2355      	movs	r3, #85	@ 0x55
 8002d24:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d26:	2302      	movs	r3, #2
 8002d28:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d32:	f107 0318 	add.w	r3, r7, #24
 8002d36:	4618      	mov	r0, r3
 8002d38:	f004 fb12 	bl	8007360 <HAL_RCC_OscConfig>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002d42:	f000 f82b 	bl	8002d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d46:	230f      	movs	r3, #15
 8002d48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002d5a:	1d3b      	adds	r3, r7, #4
 8002d5c:	2104      	movs	r1, #4
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 fe10 	bl	8007984 <HAL_RCC_ClockConfig>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002d6a:	f000 f817 	bl	8002d9c <Error_Handler>
  }
}
 8002d6e:	bf00      	nop
 8002d70:	3750      	adds	r7, #80	@ 0x50
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a04      	ldr	r2, [pc, #16]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d101      	bne.n	8002d8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d8a:	f000 fd35 	bl	80037f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40012c00 	.word	0x40012c00

08002d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002da0:	b672      	cpsid	i
}
 8002da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002da4:	bf00      	nop
 8002da6:	e7fd      	b.n	8002da4 <Error_Handler+0x8>

08002da8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002db2:	4b0c      	ldr	r3, [pc, #48]	@ (8002de4 <microros_allocate+0x3c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4413      	add	r3, r2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b09      	ldr	r3, [pc, #36]	@ (8002de4 <microros_allocate+0x3c>)
 8002dc0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002dc2:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <microros_allocate+0x40>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4413      	add	r3, r2
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <microros_allocate+0x40>)
 8002dd0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff fb7a 	bl	80024cc <pvPortMallocMicroROS>
 8002dd8:	4603      	mov	r3, r0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20004c04 	.word	0x20004c04
 8002de8:	20004c08 	.word	0x20004c08

08002dec <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00c      	beq.n	8002e16 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff fc89 	bl	8002714 <getBlockSize>
 8002e02:	4603      	mov	r3, r0
 8002e04:	4a06      	ldr	r2, [pc, #24]	@ (8002e20 <microros_deallocate+0x34>)
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <microros_deallocate+0x34>)
 8002e0e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff fc23 	bl	800265c <vPortFreeMicroROS>
  }
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20004c08 	.word	0x20004c08

08002e24 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002e30:	4b15      	ldr	r3, [pc, #84]	@ (8002e88 <microros_reallocate+0x64>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4413      	add	r3, r2
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <microros_reallocate+0x64>)
 8002e3e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002e40:	4b12      	ldr	r3, [pc, #72]	@ (8002e8c <microros_reallocate+0x68>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4413      	add	r3, r2
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e8c <microros_reallocate+0x68>)
 8002e4e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d104      	bne.n	8002e60 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002e56:	68b8      	ldr	r0, [r7, #8]
 8002e58:	f7ff fb38 	bl	80024cc <pvPortMallocMicroROS>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	e00e      	b.n	8002e7e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f7ff fc57 	bl	8002714 <getBlockSize>
 8002e66:	4603      	mov	r3, r0
 8002e68:	4a08      	ldr	r2, [pc, #32]	@ (8002e8c <microros_reallocate+0x68>)
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <microros_reallocate+0x68>)
 8002e72:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7ff fc6a 	bl	8002750 <pvPortReallocMicroROS>
 8002e7c:	4603      	mov	r3, r0
  }
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20004c04 	.word	0x20004c04
 8002e8c:	20004c08 	.word	0x20004c08

08002e90 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	fb02 f303 	mul.w	r3, r2, r3
 8002ea4:	4a0c      	ldr	r2, [pc, #48]	@ (8002ed8 <microros_zero_allocate+0x48>)
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <microros_zero_allocate+0x48>)
 8002eae:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	fb02 f303 	mul.w	r3, r2, r3
 8002eb8:	4a08      	ldr	r2, [pc, #32]	@ (8002edc <microros_zero_allocate+0x4c>)
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <microros_zero_allocate+0x4c>)
 8002ec2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f7ff fc6f 	bl	80027aa <pvPortCallocMicroROS>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20004c04 	.word	0x20004c04
 8002edc:	20004c08 	.word	0x20004c08

08002ee0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002ee0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002ef2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ef6:	a320      	add	r3, pc, #128	@ (adr r3, 8002f78 <UTILS_NanosecondsToTimespec+0x98>)
 8002ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efc:	f7fd fe64 	bl	8000bc8 <__aeabi_ldivmod>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002f0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f0e:	a31a      	add	r3, pc, #104	@ (adr r3, 8002f78 <UTILS_NanosecondsToTimespec+0x98>)
 8002f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f14:	f7fd fe58 	bl	8000bc8 <__aeabi_ldivmod>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	da20      	bge.n	8002f66 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4a11      	ldr	r2, [pc, #68]	@ (8002f70 <UTILS_NanosecondsToTimespec+0x90>)
 8002f2a:	fb82 1203 	smull	r1, r2, r2, r3
 8002f2e:	1712      	asrs	r2, r2, #28
 8002f30:	17db      	asrs	r3, r3, #31
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	6979      	ldr	r1, [r7, #20]
 8002f40:	17c8      	asrs	r0, r1, #31
 8002f42:	460c      	mov	r4, r1
 8002f44:	4605      	mov	r5, r0
 8002f46:	ebb2 0804 	subs.w	r8, r2, r4
 8002f4a:	eb63 0905 	sbc.w	r9, r3, r5
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	4906      	ldr	r1, [pc, #24]	@ (8002f74 <UTILS_NanosecondsToTimespec+0x94>)
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	441a      	add	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	609a      	str	r2, [r3, #8]
    }
}
 8002f66:	bf00      	nop
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f70:	44b82fa1 	.word	0x44b82fa1
 8002f74:	3b9aca00 	.word	0x3b9aca00
 8002f78:	3b9aca00 	.word	0x3b9aca00
 8002f7c:	00000000 	.word	0x00000000

08002f80 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f84:	b08e      	sub	sp, #56	@ 0x38
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6278      	str	r0, [r7, #36]	@ 0x24
 8002f8a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002f8c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002f90:	2300      	movs	r3, #0
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002fa2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f009 fa40 	bl	800c42c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fae:	17da      	asrs	r2, r3, #31
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	61fa      	str	r2, [r7, #28]
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	69b9      	ldr	r1, [r7, #24]
 8002fbe:	000b      	movs	r3, r1
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc8:	2200      	movs	r2, #0
 8002fca:	461c      	mov	r4, r3
 8002fcc:	4615      	mov	r5, r2
 8002fce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002fd2:	1911      	adds	r1, r2, r4
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	416b      	adcs	r3, r5
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002fde:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002fe2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	f04f 0400 	mov.w	r4, #0
 8002fee:	f04f 0500 	mov.w	r5, #0
 8002ff2:	015d      	lsls	r5, r3, #5
 8002ff4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002ff8:	0154      	lsls	r4, r2, #5
 8002ffa:	4622      	mov	r2, r4
 8002ffc:	462b      	mov	r3, r5
 8002ffe:	ebb2 0800 	subs.w	r8, r2, r0
 8003002:	eb63 0901 	sbc.w	r9, r3, r1
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003012:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003016:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800301a:	4690      	mov	r8, r2
 800301c:	4699      	mov	r9, r3
 800301e:	eb18 0a00 	adds.w	sl, r8, r0
 8003022:	eb49 0b01 	adc.w	fp, r9, r1
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003032:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003036:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800303a:	ebb2 040a 	subs.w	r4, r2, sl
 800303e:	603c      	str	r4, [r7, #0]
 8003040:	eb63 030b 	sbc.w	r3, r3, fp
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	e9d7 4500 	ldrd	r4, r5, [r7]
 800304a:	4623      	mov	r3, r4
 800304c:	181b      	adds	r3, r3, r0
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	462b      	mov	r3, r5
 8003052:	eb41 0303 	adc.w	r3, r1, r3
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	6a3a      	ldr	r2, [r7, #32]
 800305a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800305e:	f7ff ff3f 	bl	8002ee0 <UTILS_NanosecondsToTimespec>

    return 0;
 8003062:	2300      	movs	r3, #0
 8003064:	4618      	mov	r0, r3
 8003066:	3738      	adds	r7, #56	@ 0x38
 8003068:	46bd      	mov	sp, r7
 800306a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003076:	4b12      	ldr	r3, [pc, #72]	@ (80030c0 <HAL_MspInit+0x50>)
 8003078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800307a:	4a11      	ldr	r2, [pc, #68]	@ (80030c0 <HAL_MspInit+0x50>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	6613      	str	r3, [r2, #96]	@ 0x60
 8003082:	4b0f      	ldr	r3, [pc, #60]	@ (80030c0 <HAL_MspInit+0x50>)
 8003084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	607b      	str	r3, [r7, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800308e:	4b0c      	ldr	r3, [pc, #48]	@ (80030c0 <HAL_MspInit+0x50>)
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	4a0b      	ldr	r2, [pc, #44]	@ (80030c0 <HAL_MspInit+0x50>)
 8003094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003098:	6593      	str	r3, [r2, #88]	@ 0x58
 800309a:	4b09      	ldr	r3, [pc, #36]	@ (80030c0 <HAL_MspInit+0x50>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030a6:	2200      	movs	r2, #0
 80030a8:	210f      	movs	r1, #15
 80030aa:	f06f 0001 	mvn.w	r0, #1
 80030ae:	f002 fbaf 	bl	8005810 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80030b2:	f004 f945 	bl	8007340 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40021000 	.word	0x40021000

080030c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08c      	sub	sp, #48	@ 0x30
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80030d4:	4b2c      	ldr	r3, [pc, #176]	@ (8003188 <HAL_InitTick+0xc4>)
 80030d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003188 <HAL_InitTick+0xc4>)
 80030da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80030de:	6613      	str	r3, [r2, #96]	@ 0x60
 80030e0:	4b29      	ldr	r3, [pc, #164]	@ (8003188 <HAL_InitTick+0xc4>)
 80030e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030ec:	f107 020c 	add.w	r2, r7, #12
 80030f0:	f107 0310 	add.w	r3, r7, #16
 80030f4:	4611      	mov	r1, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f004 fe1a 	bl	8007d30 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80030fc:	f004 fe02 	bl	8007d04 <HAL_RCC_GetPCLK2Freq>
 8003100:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003104:	4a21      	ldr	r2, [pc, #132]	@ (800318c <HAL_InitTick+0xc8>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	0c9b      	lsrs	r3, r3, #18
 800310c:	3b01      	subs	r3, #1
 800310e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003110:	4b1f      	ldr	r3, [pc, #124]	@ (8003190 <HAL_InitTick+0xcc>)
 8003112:	4a20      	ldr	r2, [pc, #128]	@ (8003194 <HAL_InitTick+0xd0>)
 8003114:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003116:	4b1e      	ldr	r3, [pc, #120]	@ (8003190 <HAL_InitTick+0xcc>)
 8003118:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800311c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800311e:	4a1c      	ldr	r2, [pc, #112]	@ (8003190 <HAL_InitTick+0xcc>)
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003124:	4b1a      	ldr	r3, [pc, #104]	@ (8003190 <HAL_InitTick+0xcc>)
 8003126:	2200      	movs	r2, #0
 8003128:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800312a:	4b19      	ldr	r3, [pc, #100]	@ (8003190 <HAL_InitTick+0xcc>)
 800312c:	2200      	movs	r2, #0
 800312e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8003130:	4817      	ldr	r0, [pc, #92]	@ (8003190 <HAL_InitTick+0xcc>)
 8003132:	f005 f8c3 	bl	80082bc <HAL_TIM_Base_Init>
 8003136:	4603      	mov	r3, r0
 8003138:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800313c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003140:	2b00      	cmp	r3, #0
 8003142:	d11b      	bne.n	800317c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003144:	4812      	ldr	r0, [pc, #72]	@ (8003190 <HAL_InitTick+0xcc>)
 8003146:	f005 f91b 	bl	8008380 <HAL_TIM_Base_Start_IT>
 800314a:	4603      	mov	r3, r0
 800314c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003150:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003154:	2b00      	cmp	r3, #0
 8003156:	d111      	bne.n	800317c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003158:	2019      	movs	r0, #25
 800315a:	f002 fb73 	bl	8005844 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b0f      	cmp	r3, #15
 8003162:	d808      	bhi.n	8003176 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003164:	2200      	movs	r2, #0
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	2019      	movs	r0, #25
 800316a:	f002 fb51 	bl	8005810 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800316e:	4a0a      	ldr	r2, [pc, #40]	@ (8003198 <HAL_InitTick+0xd4>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	e002      	b.n	800317c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800317c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003180:	4618      	mov	r0, r3
 8003182:	3730      	adds	r7, #48	@ 0x30
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000
 800318c:	431bde83 	.word	0x431bde83
 8003190:	20004c0c 	.word	0x20004c0c
 8003194:	40012c00 	.word	0x40012c00
 8003198:	20000008 	.word	0x20000008

0800319c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031a0:	bf00      	nop
 80031a2:	e7fd      	b.n	80031a0 <NMI_Handler+0x4>

080031a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031a8:	bf00      	nop
 80031aa:	e7fd      	b.n	80031a8 <HardFault_Handler+0x4>

080031ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031b0:	bf00      	nop
 80031b2:	e7fd      	b.n	80031b0 <MemManage_Handler+0x4>

080031b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031b8:	bf00      	nop
 80031ba:	e7fd      	b.n	80031b8 <BusFault_Handler+0x4>

080031bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031c0:	bf00      	nop
 80031c2:	e7fd      	b.n	80031c0 <UsageFault_Handler+0x4>

080031c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80031d8:	4802      	ldr	r0, [pc, #8]	@ (80031e4 <DMA1_Channel1_IRQHandler+0x10>)
 80031da:	f002 fd24 	bl	8005c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20004cf4 	.word	0x20004cf4

080031e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80031ec:	4802      	ldr	r0, [pc, #8]	@ (80031f8 <DMA1_Channel2_IRQHandler+0x10>)
 80031ee:	f002 fd1a 	bl	8005c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20004d54 	.word	0x20004d54

080031fc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003200:	4802      	ldr	r0, [pc, #8]	@ (800320c <DMA1_Channel3_IRQHandler+0x10>)
 8003202:	f002 fd10 	bl	8005c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000aa8 	.word	0x20000aa8

08003210 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003214:	4802      	ldr	r0, [pc, #8]	@ (8003220 <ADC1_2_IRQHandler+0x10>)
 8003216:	f001 f803 	bl	8004220 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000a3c 	.word	0x20000a3c

08003224 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003228:	4802      	ldr	r0, [pc, #8]	@ (8003234 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800322a:	f005 f921 	bl	8008470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20004c0c 	.word	0x20004c0c

08003238 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800323c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003240:	f003 f8fa 	bl	8006438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}

08003248 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800324c:	4802      	ldr	r0, [pc, #8]	@ (8003258 <LPUART1_IRQHandler+0x10>)
 800324e:	f005 fd33 	bl	8008cb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20004c60 	.word	0x20004c60

0800325c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return 1;
 8003260:	2301      	movs	r3, #1
}
 8003262:	4618      	mov	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <_kill>:

int _kill(int pid, int sig)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003276:	f019 faa1 	bl	801c7bc <__errno>
 800327a:	4603      	mov	r3, r0
 800327c:	2216      	movs	r2, #22
 800327e:	601a      	str	r2, [r3, #0]
  return -1;
 8003280:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <_exit>:

void _exit (int status)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003294:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff ffe7 	bl	800326c <_kill>
  while (1) {}    /* Make sure we hang here */
 800329e:	bf00      	nop
 80032a0:	e7fd      	b.n	800329e <_exit+0x12>

080032a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b086      	sub	sp, #24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	e00a      	b.n	80032ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032b4:	f3af 8000 	nop.w
 80032b8:	4601      	mov	r1, r0
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	60ba      	str	r2, [r7, #8]
 80032c0:	b2ca      	uxtb	r2, r1
 80032c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	3301      	adds	r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	dbf0      	blt.n	80032b4 <_read+0x12>
  }

  return len;
 80032d2:	687b      	ldr	r3, [r7, #4]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	e009      	b.n	8003302 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	60ba      	str	r2, [r7, #8]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	3301      	adds	r3, #1
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	429a      	cmp	r2, r3
 8003308:	dbf1      	blt.n	80032ee <_write+0x12>
  }
  return len;
 800330a:	687b      	ldr	r3, [r7, #4]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <_close>:

int _close(int file)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800331c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800333c:	605a      	str	r2, [r3, #4]
  return 0;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <_isatty>:

int _isatty(int file)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003354:	2301      	movs	r3, #1
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003362:	b480      	push	{r7}
 8003364:	b085      	sub	sp, #20
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003384:	4a14      	ldr	r2, [pc, #80]	@ (80033d8 <_sbrk+0x5c>)
 8003386:	4b15      	ldr	r3, [pc, #84]	@ (80033dc <_sbrk+0x60>)
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003390:	4b13      	ldr	r3, [pc, #76]	@ (80033e0 <_sbrk+0x64>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d102      	bne.n	800339e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003398:	4b11      	ldr	r3, [pc, #68]	@ (80033e0 <_sbrk+0x64>)
 800339a:	4a12      	ldr	r2, [pc, #72]	@ (80033e4 <_sbrk+0x68>)
 800339c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800339e:	4b10      	ldr	r3, [pc, #64]	@ (80033e0 <_sbrk+0x64>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4413      	add	r3, r2
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d207      	bcs.n	80033bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033ac:	f019 fa06 	bl	801c7bc <__errno>
 80033b0:	4603      	mov	r3, r0
 80033b2:	220c      	movs	r2, #12
 80033b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033ba:	e009      	b.n	80033d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033bc:	4b08      	ldr	r3, [pc, #32]	@ (80033e0 <_sbrk+0x64>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033c2:	4b07      	ldr	r3, [pc, #28]	@ (80033e0 <_sbrk+0x64>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	4a05      	ldr	r2, [pc, #20]	@ (80033e0 <_sbrk+0x64>)
 80033cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033ce:	68fb      	ldr	r3, [r7, #12]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	20020000 	.word	0x20020000
 80033dc:	00000400 	.word	0x00000400
 80033e0:	20004c5c 	.word	0x20004c5c
 80033e4:	2000bde8 	.word	0x2000bde8

080033e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80033ec:	4b06      	ldr	r3, [pc, #24]	@ (8003408 <SystemInit+0x20>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f2:	4a05      	ldr	r2, [pc, #20]	@ (8003408 <SystemInit+0x20>)
 80033f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003410:	4b20      	ldr	r3, [pc, #128]	@ (8003494 <MX_LPUART1_UART_Init+0x88>)
 8003412:	4a21      	ldr	r2, [pc, #132]	@ (8003498 <MX_LPUART1_UART_Init+0x8c>)
 8003414:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8003416:	4b1f      	ldr	r3, [pc, #124]	@ (8003494 <MX_LPUART1_UART_Init+0x88>)
 8003418:	4a20      	ldr	r2, [pc, #128]	@ (800349c <MX_LPUART1_UART_Init+0x90>)
 800341a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800341c:	4b1d      	ldr	r3, [pc, #116]	@ (8003494 <MX_LPUART1_UART_Init+0x88>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003422:	4b1c      	ldr	r3, [pc, #112]	@ (8003494 <MX_LPUART1_UART_Init+0x88>)
 8003424:	2200      	movs	r2, #0
 8003426:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003428:	4b1a      	ldr	r3, [pc, #104]	@ (8003494 <MX_LPUART1_UART_Init+0x88>)
 800342a:	2200      	movs	r2, #0
 800342c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800342e:	4b19      	ldr	r3, [pc, #100]	@ (8003494 <MX_LPUART1_UART_Init+0x88>)
 8003430:	220c      	movs	r2, #12
 8003432:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003434:	4b17      	ldr	r3, [pc, #92]	@ (8003494 <MX_LPUART1_UART_Init+0x88>)
 8003436:	2200      	movs	r2, #0
 8003438:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800343a:	4b16      	ldr	r3, [pc, #88]	@ (8003494 <MX_LPUART1_UART_Init+0x88>)
 800343c:	2200      	movs	r2, #0
 800343e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003440:	4b14      	ldr	r3, [pc, #80]	@ (8003494 <MX_LPUART1_UART_Init+0x88>)
 8003442:	2200      	movs	r2, #0
 8003444:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003446:	4b13      	ldr	r3, [pc, #76]	@ (8003494 <MX_LPUART1_UART_Init+0x88>)
 8003448:	2200      	movs	r2, #0
 800344a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800344c:	4811      	ldr	r0, [pc, #68]	@ (8003494 <MX_LPUART1_UART_Init+0x88>)
 800344e:	f005 fa81 	bl	8008954 <HAL_UART_Init>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8003458:	f7ff fca0 	bl	8002d9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800345c:	2100      	movs	r1, #0
 800345e:	480d      	ldr	r0, [pc, #52]	@ (8003494 <MX_LPUART1_UART_Init+0x88>)
 8003460:	f006 ff91 	bl	800a386 <HAL_UARTEx_SetTxFifoThreshold>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800346a:	f7ff fc97 	bl	8002d9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800346e:	2100      	movs	r1, #0
 8003470:	4808      	ldr	r0, [pc, #32]	@ (8003494 <MX_LPUART1_UART_Init+0x88>)
 8003472:	f006 ffc6 	bl	800a402 <HAL_UARTEx_SetRxFifoThreshold>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800347c:	f7ff fc8e 	bl	8002d9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003480:	4804      	ldr	r0, [pc, #16]	@ (8003494 <MX_LPUART1_UART_Init+0x88>)
 8003482:	f006 ff47 	bl	800a314 <HAL_UARTEx_DisableFifoMode>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800348c:	f7ff fc86 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003490:	bf00      	nop
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20004c60 	.word	0x20004c60
 8003498:	40008000 	.word	0x40008000
 800349c:	001e8480 	.word	0x001e8480

080034a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b09e      	sub	sp, #120	@ 0x78
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	60da      	str	r2, [r3, #12]
 80034b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034b8:	f107 0310 	add.w	r3, r7, #16
 80034bc:	2254      	movs	r2, #84	@ 0x54
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f019 f8e7 	bl	801c694 <memset>
  if(uartHandle->Instance==LPUART1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a4e      	ldr	r2, [pc, #312]	@ (8003604 <HAL_UART_MspInit+0x164>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	f040 8094 	bne.w	80035fa <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80034d2:	2320      	movs	r3, #32
 80034d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80034d6:	2300      	movs	r3, #0
 80034d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034da:	f107 0310 	add.w	r3, r7, #16
 80034de:	4618      	mov	r0, r3
 80034e0:	f004 fc9e 	bl	8007e20 <HAL_RCCEx_PeriphCLKConfig>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80034ea:	f7ff fc57 	bl	8002d9c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80034ee:	4b46      	ldr	r3, [pc, #280]	@ (8003608 <HAL_UART_MspInit+0x168>)
 80034f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f2:	4a45      	ldr	r2, [pc, #276]	@ (8003608 <HAL_UART_MspInit+0x168>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80034fa:	4b43      	ldr	r3, [pc, #268]	@ (8003608 <HAL_UART_MspInit+0x168>)
 80034fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003506:	4b40      	ldr	r3, [pc, #256]	@ (8003608 <HAL_UART_MspInit+0x168>)
 8003508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350a:	4a3f      	ldr	r2, [pc, #252]	@ (8003608 <HAL_UART_MspInit+0x168>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003512:	4b3d      	ldr	r3, [pc, #244]	@ (8003608 <HAL_UART_MspInit+0x168>)
 8003514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800351e:	230c      	movs	r3, #12
 8003520:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003522:	2302      	movs	r3, #2
 8003524:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352a:	2300      	movs	r3, #0
 800352c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800352e:	230c      	movs	r3, #12
 8003530:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003532:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003536:	4619      	mov	r1, r3
 8003538:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800353c:	f002 fcce 	bl	8005edc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8003540:	4b32      	ldr	r3, [pc, #200]	@ (800360c <HAL_UART_MspInit+0x16c>)
 8003542:	4a33      	ldr	r2, [pc, #204]	@ (8003610 <HAL_UART_MspInit+0x170>)
 8003544:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003546:	4b31      	ldr	r3, [pc, #196]	@ (800360c <HAL_UART_MspInit+0x16c>)
 8003548:	2222      	movs	r2, #34	@ 0x22
 800354a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800354c:	4b2f      	ldr	r3, [pc, #188]	@ (800360c <HAL_UART_MspInit+0x16c>)
 800354e:	2200      	movs	r2, #0
 8003550:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003552:	4b2e      	ldr	r3, [pc, #184]	@ (800360c <HAL_UART_MspInit+0x16c>)
 8003554:	2200      	movs	r2, #0
 8003556:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003558:	4b2c      	ldr	r3, [pc, #176]	@ (800360c <HAL_UART_MspInit+0x16c>)
 800355a:	2280      	movs	r2, #128	@ 0x80
 800355c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800355e:	4b2b      	ldr	r3, [pc, #172]	@ (800360c <HAL_UART_MspInit+0x16c>)
 8003560:	2200      	movs	r2, #0
 8003562:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003564:	4b29      	ldr	r3, [pc, #164]	@ (800360c <HAL_UART_MspInit+0x16c>)
 8003566:	2200      	movs	r2, #0
 8003568:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800356a:	4b28      	ldr	r3, [pc, #160]	@ (800360c <HAL_UART_MspInit+0x16c>)
 800356c:	2220      	movs	r2, #32
 800356e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003570:	4b26      	ldr	r3, [pc, #152]	@ (800360c <HAL_UART_MspInit+0x16c>)
 8003572:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003576:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003578:	4824      	ldr	r0, [pc, #144]	@ (800360c <HAL_UART_MspInit+0x16c>)
 800357a:	f002 f971 	bl	8005860 <HAL_DMA_Init>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8003584:	f7ff fc0a 	bl	8002d9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a20      	ldr	r2, [pc, #128]	@ (800360c <HAL_UART_MspInit+0x16c>)
 800358c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003590:	4a1e      	ldr	r2, [pc, #120]	@ (800360c <HAL_UART_MspInit+0x16c>)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8003596:	4b1f      	ldr	r3, [pc, #124]	@ (8003614 <HAL_UART_MspInit+0x174>)
 8003598:	4a1f      	ldr	r2, [pc, #124]	@ (8003618 <HAL_UART_MspInit+0x178>)
 800359a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800359c:	4b1d      	ldr	r3, [pc, #116]	@ (8003614 <HAL_UART_MspInit+0x174>)
 800359e:	2223      	movs	r2, #35	@ 0x23
 80035a0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003614 <HAL_UART_MspInit+0x174>)
 80035a4:	2210      	movs	r2, #16
 80035a6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003614 <HAL_UART_MspInit+0x174>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035ae:	4b19      	ldr	r3, [pc, #100]	@ (8003614 <HAL_UART_MspInit+0x174>)
 80035b0:	2280      	movs	r2, #128	@ 0x80
 80035b2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035b4:	4b17      	ldr	r3, [pc, #92]	@ (8003614 <HAL_UART_MspInit+0x174>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035ba:	4b16      	ldr	r3, [pc, #88]	@ (8003614 <HAL_UART_MspInit+0x174>)
 80035bc:	2200      	movs	r2, #0
 80035be:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80035c0:	4b14      	ldr	r3, [pc, #80]	@ (8003614 <HAL_UART_MspInit+0x174>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80035c6:	4b13      	ldr	r3, [pc, #76]	@ (8003614 <HAL_UART_MspInit+0x174>)
 80035c8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80035cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80035ce:	4811      	ldr	r0, [pc, #68]	@ (8003614 <HAL_UART_MspInit+0x174>)
 80035d0:	f002 f946 	bl	8005860 <HAL_DMA_Init>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 80035da:	f7ff fbdf 	bl	8002d9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003614 <HAL_UART_MspInit+0x174>)
 80035e2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80035e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003614 <HAL_UART_MspInit+0x174>)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80035ea:	2200      	movs	r2, #0
 80035ec:	2105      	movs	r1, #5
 80035ee:	205b      	movs	r0, #91	@ 0x5b
 80035f0:	f002 f90e 	bl	8005810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80035f4:	205b      	movs	r0, #91	@ 0x5b
 80035f6:	f002 f925 	bl	8005844 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80035fa:	bf00      	nop
 80035fc:	3778      	adds	r7, #120	@ 0x78
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40008000 	.word	0x40008000
 8003608:	40021000 	.word	0x40021000
 800360c:	20004cf4 	.word	0x20004cf4
 8003610:	40020008 	.word	0x40020008
 8003614:	20004d54 	.word	0x20004d54
 8003618:	4002001c 	.word	0x4002001c

0800361c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800362a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800362c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003630:	4904      	ldr	r1, [pc, #16]	@ (8003644 <cubemx_transport_open+0x28>)
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f005 fa5e 	bl	8008af4 <HAL_UART_Receive_DMA>
    return true;
 8003638:	2301      	movs	r3, #1
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20004db4 	.word	0x20004db4

08003648 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003656:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f005 fa97 	bl	8008b8c <HAL_UART_DMAStop>
    return true;
 800365e:	2301      	movs	r3, #1
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800367c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003684:	2b20      	cmp	r3, #32
 8003686:	d11b      	bne.n	80036c0 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	b29b      	uxth	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	6978      	ldr	r0, [r7, #20]
 8003692:	f005 f9af 	bl	80089f4 <HAL_UART_Transmit_DMA>
 8003696:	4603      	mov	r3, r0
 8003698:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800369a:	e002      	b.n	80036a2 <cubemx_transport_write+0x3a>
            osDelay(1);
 800369c:	2001      	movs	r0, #1
 800369e:	f007 fbf9 	bl	800ae94 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80036a2:	7cfb      	ldrb	r3, [r7, #19]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d104      	bne.n	80036b2 <cubemx_transport_write+0x4a>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d1f4      	bne.n	800369c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 80036b2:	7cfb      	ldrb	r3, [r7, #19]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <cubemx_transport_write+0x54>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	e002      	b.n	80036c2 <cubemx_transport_write+0x5a>
 80036bc:	2300      	movs	r3, #0
 80036be:	e000      	b.n	80036c2 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 80036c0:	2300      	movs	r3, #0
    }
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80036e0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80036e6:	b672      	cpsid	i
}
 80036e8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80036f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003768 <cubemx_transport_read+0x9c>)
 80036fa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036fc:	b662      	cpsie	i
}
 80036fe:	bf00      	nop
        __enable_irq();
        ms_used++;
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	3301      	adds	r3, #1
 8003704:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8003706:	2001      	movs	r0, #1
 8003708:	f007 fbc4 	bl	800ae94 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800370c:	4b17      	ldr	r3, [pc, #92]	@ (800376c <cubemx_transport_read+0xa0>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b15      	ldr	r3, [pc, #84]	@ (8003768 <cubemx_transport_read+0x9c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d103      	bne.n	8003720 <cubemx_transport_read+0x54>
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	dbe2      	blt.n	80036e6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8003724:	e011      	b.n	800374a <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8003726:	4b11      	ldr	r3, [pc, #68]	@ (800376c <cubemx_transport_read+0xa0>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	440b      	add	r3, r1
 8003730:	490f      	ldr	r1, [pc, #60]	@ (8003770 <cubemx_transport_read+0xa4>)
 8003732:	5c8a      	ldrb	r2, [r1, r2]
 8003734:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8003736:	4b0d      	ldr	r3, [pc, #52]	@ (800376c <cubemx_transport_read+0xa0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003740:	4a0a      	ldr	r2, [pc, #40]	@ (800376c <cubemx_transport_read+0xa0>)
 8003742:	6013      	str	r3, [r2, #0]
        wrote++;
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	3301      	adds	r3, #1
 8003748:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800374a:	4b08      	ldr	r3, [pc, #32]	@ (800376c <cubemx_transport_read+0xa0>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <cubemx_transport_read+0x9c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d003      	beq.n	800375e <cubemx_transport_read+0x92>
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	429a      	cmp	r2, r3
 800375c:	d3e3      	bcc.n	8003726 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 800375e:	69bb      	ldr	r3, [r7, #24]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	200055b8 	.word	0x200055b8
 800376c:	200055b4 	.word	0x200055b4
 8003770:	20004db4 	.word	0x20004db4

08003774 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003774:	480d      	ldr	r0, [pc, #52]	@ (80037ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003776:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003778:	f7ff fe36 	bl	80033e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800377c:	480c      	ldr	r0, [pc, #48]	@ (80037b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800377e:	490d      	ldr	r1, [pc, #52]	@ (80037b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003780:	4a0d      	ldr	r2, [pc, #52]	@ (80037b8 <LoopForever+0xe>)
  movs r3, #0
 8003782:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003784:	e002      	b.n	800378c <LoopCopyDataInit>

08003786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800378a:	3304      	adds	r3, #4

0800378c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800378c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800378e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003790:	d3f9      	bcc.n	8003786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003792:	4a0a      	ldr	r2, [pc, #40]	@ (80037bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003794:	4c0a      	ldr	r4, [pc, #40]	@ (80037c0 <LoopForever+0x16>)
  movs r3, #0
 8003796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003798:	e001      	b.n	800379e <LoopFillZerobss>

0800379a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800379a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800379c:	3204      	adds	r2, #4

0800379e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800379e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037a0:	d3fb      	bcc.n	800379a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037a2:	f019 f811 	bl	801c7c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037a6:	f7ff fa81 	bl	8002cac <main>

080037aa <LoopForever>:

LoopForever:
    b LoopForever
 80037aa:	e7fe      	b.n	80037aa <LoopForever>
  ldr   r0, =_estack
 80037ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037b4:	20000a20 	.word	0x20000a20
  ldr r2, =_sidata
 80037b8:	0801f648 	.word	0x0801f648
  ldr r2, =_sbss
 80037bc:	20000a20 	.word	0x20000a20
  ldr r4, =_ebss
 80037c0:	2000bde4 	.word	0x2000bde4

080037c4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037c4:	e7fe      	b.n	80037c4 <ADC3_IRQHandler>

080037c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037d0:	2003      	movs	r0, #3
 80037d2:	f002 f812 	bl	80057fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037d6:	200f      	movs	r0, #15
 80037d8:	f7ff fc74 	bl	80030c4 <HAL_InitTick>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	71fb      	strb	r3, [r7, #7]
 80037e6:	e001      	b.n	80037ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037e8:	f7ff fc42 	bl	8003070 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037ec:	79fb      	ldrb	r3, [r7, #7]

}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037fc:	4b05      	ldr	r3, [pc, #20]	@ (8003814 <HAL_IncTick+0x1c>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	4b05      	ldr	r3, [pc, #20]	@ (8003818 <HAL_IncTick+0x20>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4413      	add	r3, r2
 8003806:	4a03      	ldr	r2, [pc, #12]	@ (8003814 <HAL_IncTick+0x1c>)
 8003808:	6013      	str	r3, [r2, #0]
}
 800380a:	bf00      	nop
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	200055bc 	.word	0x200055bc
 8003818:	2000000c 	.word	0x2000000c

0800381c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return uwTick;
 8003820:	4b03      	ldr	r3, [pc, #12]	@ (8003830 <HAL_GetTick+0x14>)
 8003822:	681b      	ldr	r3, [r3, #0]
}
 8003824:	4618      	mov	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	200055bc 	.word	0x200055bc

08003834 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	609a      	str	r2, [r3, #8]
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	609a      	str	r2, [r3, #8]
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003890:	4618      	mov	r0, r3
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3360      	adds	r3, #96	@ 0x60
 80038ae:	461a      	mov	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4b08      	ldr	r3, [pc, #32]	@ (80038e0 <LL_ADC_SetOffset+0x44>)
 80038be:	4013      	ands	r3, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80038d4:	bf00      	nop
 80038d6:	371c      	adds	r7, #28
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	03fff000 	.word	0x03fff000

080038e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3360      	adds	r3, #96	@ 0x60
 80038f2:	461a      	mov	r2, r3
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3360      	adds	r3, #96	@ 0x60
 8003920:	461a      	mov	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	431a      	orrs	r2, r3
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003946:	b480      	push	{r7}
 8003948:	b087      	sub	sp, #28
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3360      	adds	r3, #96	@ 0x60
 8003956:	461a      	mov	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	431a      	orrs	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003970:	bf00      	nop
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	3360      	adds	r3, #96	@ 0x60
 800398c:	461a      	mov	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	615a      	str	r2, [r3, #20]
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b087      	sub	sp, #28
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3330      	adds	r3, #48	@ 0x30
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	4413      	add	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	211f      	movs	r1, #31
 8003a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	401a      	ands	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	0e9b      	lsrs	r3, r3, #26
 8003a36:	f003 011f 	and.w	r1, r3, #31
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	fa01 f303 	lsl.w	r3, r1, r3
 8003a44:	431a      	orrs	r2, r3
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a62:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3314      	adds	r3, #20
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	0e5b      	lsrs	r3, r3, #25
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	4413      	add	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	0d1b      	lsrs	r3, r3, #20
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	2107      	movs	r1, #7
 8003aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	401a      	ands	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	0d1b      	lsrs	r3, r3, #20
 8003ab6:	f003 031f 	and.w	r3, r3, #31
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aec:	43db      	mvns	r3, r3
 8003aee:	401a      	ands	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f003 0318 	and.w	r3, r3, #24
 8003af6:	4908      	ldr	r1, [pc, #32]	@ (8003b18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003af8:	40d9      	lsrs	r1, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	400b      	ands	r3, r1
 8003afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b02:	431a      	orrs	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003b0a:	bf00      	nop
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	0007ffff 	.word	0x0007ffff

08003b1c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 031f 	and.w	r3, r3, #31
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003b64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6093      	str	r3, [r2, #8]
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b8c:	d101      	bne.n	8003b92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003bb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bb4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bdc:	d101      	bne.n	8003be2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c04:	f043 0201 	orr.w	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c2c:	f043 0202 	orr.w	r2, r3, #2
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <LL_ADC_IsEnabled+0x18>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <LL_ADC_IsEnabled+0x1a>
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d101      	bne.n	8003c7e <LL_ADC_IsDisableOngoing+0x18>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <LL_ADC_IsDisableOngoing+0x1a>
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ca0:	f043 0204 	orr.w	r2, r3, #4
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d101      	bne.n	8003ccc <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d101      	bne.n	8003cf2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d00:	b590      	push	{r4, r7, lr}
 8003d02:	b089      	sub	sp, #36	@ 0x24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e1a9      	b.n	800406e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d109      	bne.n	8003d3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7fd f99d 	bl	8001068 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff ff19 	bl	8003b78 <LL_ADC_IsDeepPowerDownEnabled>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d004      	beq.n	8003d56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff feff 	bl	8003b54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff ff34 	bl	8003bc8 <LL_ADC_IsInternalRegulatorEnabled>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d115      	bne.n	8003d92 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff ff18 	bl	8003ba0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d70:	4b9c      	ldr	r3, [pc, #624]	@ (8003fe4 <HAL_ADC_Init+0x2e4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	4a9c      	ldr	r2, [pc, #624]	@ (8003fe8 <HAL_ADC_Init+0x2e8>)
 8003d78:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7c:	099b      	lsrs	r3, r3, #6
 8003d7e:	3301      	adds	r3, #1
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d84:	e002      	b.n	8003d8c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f9      	bne.n	8003d86 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff ff16 	bl	8003bc8 <LL_ADC_IsInternalRegulatorEnabled>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10d      	bne.n	8003dbe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da6:	f043 0210 	orr.w	r2, r3, #16
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db2:	f043 0201 	orr.w	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff ff76 	bl	8003cb4 <LL_ADC_REG_IsConversionOngoing>
 8003dc8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f040 8142 	bne.w	800405c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f040 813e 	bne.w	800405c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003de8:	f043 0202 	orr.w	r2, r3, #2
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff ff23 	bl	8003c40 <LL_ADC_IsEnabled>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d141      	bne.n	8003e84 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e08:	d004      	beq.n	8003e14 <HAL_ADC_Init+0x114>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a77      	ldr	r2, [pc, #476]	@ (8003fec <HAL_ADC_Init+0x2ec>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d10f      	bne.n	8003e34 <HAL_ADC_Init+0x134>
 8003e14:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e18:	f7ff ff12 	bl	8003c40 <LL_ADC_IsEnabled>
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	4873      	ldr	r0, [pc, #460]	@ (8003fec <HAL_ADC_Init+0x2ec>)
 8003e20:	f7ff ff0e 	bl	8003c40 <LL_ADC_IsEnabled>
 8003e24:	4603      	mov	r3, r0
 8003e26:	4323      	orrs	r3, r4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	e012      	b.n	8003e5a <HAL_ADC_Init+0x15a>
 8003e34:	486e      	ldr	r0, [pc, #440]	@ (8003ff0 <HAL_ADC_Init+0x2f0>)
 8003e36:	f7ff ff03 	bl	8003c40 <LL_ADC_IsEnabled>
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	486d      	ldr	r0, [pc, #436]	@ (8003ff4 <HAL_ADC_Init+0x2f4>)
 8003e3e:	f7ff feff 	bl	8003c40 <LL_ADC_IsEnabled>
 8003e42:	4603      	mov	r3, r0
 8003e44:	431c      	orrs	r4, r3
 8003e46:	486c      	ldr	r0, [pc, #432]	@ (8003ff8 <HAL_ADC_Init+0x2f8>)
 8003e48:	f7ff fefa 	bl	8003c40 <LL_ADC_IsEnabled>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	4323      	orrs	r3, r4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	bf0c      	ite	eq
 8003e54:	2301      	moveq	r3, #1
 8003e56:	2300      	movne	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d012      	beq.n	8003e84 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e66:	d004      	beq.n	8003e72 <HAL_ADC_Init+0x172>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a5f      	ldr	r2, [pc, #380]	@ (8003fec <HAL_ADC_Init+0x2ec>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d101      	bne.n	8003e76 <HAL_ADC_Init+0x176>
 8003e72:	4a62      	ldr	r2, [pc, #392]	@ (8003ffc <HAL_ADC_Init+0x2fc>)
 8003e74:	e000      	b.n	8003e78 <HAL_ADC_Init+0x178>
 8003e76:	4a62      	ldr	r2, [pc, #392]	@ (8004000 <HAL_ADC_Init+0x300>)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4610      	mov	r0, r2
 8003e80:	f7ff fcd8 	bl	8003834 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	7f5b      	ldrb	r3, [r3, #29]
 8003e88:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e8e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003e94:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003e9a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ea2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d106      	bne.n	8003ec0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	045b      	lsls	r3, r3, #17
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d009      	beq.n	8003edc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ecc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	4b48      	ldr	r3, [pc, #288]	@ (8004004 <HAL_ADC_Init+0x304>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	69b9      	ldr	r1, [r7, #24]
 8003eec:	430b      	orrs	r3, r1
 8003eee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff fee5 	bl	8003cda <LL_ADC_INJ_IsConversionOngoing>
 8003f10:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d17f      	bne.n	8004018 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d17c      	bne.n	8004018 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f22:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f2a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f3a:	f023 0302 	bic.w	r3, r3, #2
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	69b9      	ldr	r1, [r7, #24]
 8003f44:	430b      	orrs	r3, r1
 8003f46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d017      	beq.n	8003f80 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003f5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003f68:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003f6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6911      	ldr	r1, [r2, #16]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003f7e:	e013      	b.n	8003fa8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003f8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003fa0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fa4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d12a      	bne.n	8004008 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003fbc:	f023 0304 	bic.w	r3, r3, #4
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003fc8:	4311      	orrs	r1, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003fce:	4311      	orrs	r1, r2
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0201 	orr.w	r2, r2, #1
 8003fe0:	611a      	str	r2, [r3, #16]
 8003fe2:	e019      	b.n	8004018 <HAL_ADC_Init+0x318>
 8003fe4:	20000004 	.word	0x20000004
 8003fe8:	053e2d63 	.word	0x053e2d63
 8003fec:	50000100 	.word	0x50000100
 8003ff0:	50000400 	.word	0x50000400
 8003ff4:	50000500 	.word	0x50000500
 8003ff8:	50000600 	.word	0x50000600
 8003ffc:	50000300 	.word	0x50000300
 8004000:	50000700 	.word	0x50000700
 8004004:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d10c      	bne.n	800403a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004026:	f023 010f 	bic.w	r1, r3, #15
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	1e5a      	subs	r2, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	631a      	str	r2, [r3, #48]	@ 0x30
 8004038:	e007      	b.n	800404a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 020f 	bic.w	r2, r2, #15
 8004048:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404e:	f023 0303 	bic.w	r3, r3, #3
 8004052:	f043 0201 	orr.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	65da      	str	r2, [r3, #92]	@ 0x5c
 800405a:	e007      	b.n	800406c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004060:	f043 0210 	orr.w	r2, r3, #16
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800406c:	7ffb      	ldrb	r3, [r7, #31]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3724      	adds	r7, #36	@ 0x24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd90      	pop	{r4, r7, pc}
 8004076:	bf00      	nop

08004078 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800408c:	d004      	beq.n	8004098 <HAL_ADC_Start_DMA+0x20>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a5a      	ldr	r2, [pc, #360]	@ (80041fc <HAL_ADC_Start_DMA+0x184>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d101      	bne.n	800409c <HAL_ADC_Start_DMA+0x24>
 8004098:	4b59      	ldr	r3, [pc, #356]	@ (8004200 <HAL_ADC_Start_DMA+0x188>)
 800409a:	e000      	b.n	800409e <HAL_ADC_Start_DMA+0x26>
 800409c:	4b59      	ldr	r3, [pc, #356]	@ (8004204 <HAL_ADC_Start_DMA+0x18c>)
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff fd3c 	bl	8003b1c <LL_ADC_GetMultimode>
 80040a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fe02 	bl	8003cb4 <LL_ADC_REG_IsConversionOngoing>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f040 809b 	bne.w	80041ee <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_ADC_Start_DMA+0x4e>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e096      	b.n	80041f4 <HAL_ADC_Start_DMA+0x17c>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a4d      	ldr	r2, [pc, #308]	@ (8004208 <HAL_ADC_Start_DMA+0x190>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d008      	beq.n	80040ea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	2b05      	cmp	r3, #5
 80040e2:	d002      	beq.n	80040ea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	2b09      	cmp	r3, #9
 80040e8:	d17a      	bne.n	80041e0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 ff60 	bl	8004fb0 <ADC_Enable>
 80040f0:	4603      	mov	r3, r0
 80040f2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d16d      	bne.n	80041d6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a3a      	ldr	r2, [pc, #232]	@ (80041fc <HAL_ADC_Start_DMA+0x184>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d009      	beq.n	800412c <HAL_ADC_Start_DMA+0xb4>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a3b      	ldr	r2, [pc, #236]	@ (800420c <HAL_ADC_Start_DMA+0x194>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d002      	beq.n	8004128 <HAL_ADC_Start_DMA+0xb0>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	e003      	b.n	8004130 <HAL_ADC_Start_DMA+0xb8>
 8004128:	4b39      	ldr	r3, [pc, #228]	@ (8004210 <HAL_ADC_Start_DMA+0x198>)
 800412a:	e001      	b.n	8004130 <HAL_ADC_Start_DMA+0xb8>
 800412c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	4293      	cmp	r3, r2
 8004136:	d002      	beq.n	800413e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d105      	bne.n	800414a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004142:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d006      	beq.n	8004164 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800415a:	f023 0206 	bic.w	r2, r3, #6
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	661a      	str	r2, [r3, #96]	@ 0x60
 8004162:	e002      	b.n	800416a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416e:	4a29      	ldr	r2, [pc, #164]	@ (8004214 <HAL_ADC_Start_DMA+0x19c>)
 8004170:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004176:	4a28      	ldr	r2, [pc, #160]	@ (8004218 <HAL_ADC_Start_DMA+0x1a0>)
 8004178:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800417e:	4a27      	ldr	r2, [pc, #156]	@ (800421c <HAL_ADC_Start_DMA+0x1a4>)
 8004180:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	221c      	movs	r2, #28
 8004188:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0210 	orr.w	r2, r2, #16
 80041a0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0201 	orr.w	r2, r2, #1
 80041b0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3340      	adds	r3, #64	@ 0x40
 80041bc:	4619      	mov	r1, r3
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f001 fbf5 	bl	80059b0 <HAL_DMA_Start_IT>
 80041c6:	4603      	mov	r3, r0
 80041c8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fd5c 	bl	8003c8c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80041d4:	e00d      	b.n	80041f2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80041de:	e008      	b.n	80041f2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80041ec:	e001      	b.n	80041f2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80041ee:	2302      	movs	r3, #2
 80041f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80041f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	50000100 	.word	0x50000100
 8004200:	50000300 	.word	0x50000300
 8004204:	50000700 	.word	0x50000700
 8004208:	50000600 	.word	0x50000600
 800420c:	50000500 	.word	0x50000500
 8004210:	50000400 	.word	0x50000400
 8004214:	0800519b 	.word	0x0800519b
 8004218:	08005273 	.word	0x08005273
 800421c:	0800528f 	.word	0x0800528f

08004220 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08a      	sub	sp, #40	@ 0x28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004228:	2300      	movs	r3, #0
 800422a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004244:	d004      	beq.n	8004250 <HAL_ADC_IRQHandler+0x30>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a8e      	ldr	r2, [pc, #568]	@ (8004484 <HAL_ADC_IRQHandler+0x264>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d101      	bne.n	8004254 <HAL_ADC_IRQHandler+0x34>
 8004250:	4b8d      	ldr	r3, [pc, #564]	@ (8004488 <HAL_ADC_IRQHandler+0x268>)
 8004252:	e000      	b.n	8004256 <HAL_ADC_IRQHandler+0x36>
 8004254:	4b8d      	ldr	r3, [pc, #564]	@ (800448c <HAL_ADC_IRQHandler+0x26c>)
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fc60 	bl	8003b1c <LL_ADC_GetMultimode>
 800425c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d017      	beq.n	8004298 <HAL_ADC_IRQHandler+0x78>
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d012      	beq.n	8004298 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	2b00      	cmp	r3, #0
 800427c:	d105      	bne.n	800428a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004282:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f001 f8f6 	bl	800547c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2202      	movs	r2, #2
 8004296:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d004      	beq.n	80042ac <HAL_ADC_IRQHandler+0x8c>
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10b      	bne.n	80042c4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8094 	beq.w	80043e0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 808e 	beq.w	80043e0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d105      	bne.n	80042dc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fb79 	bl	80039d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d072      	beq.n	80043d2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a64      	ldr	r2, [pc, #400]	@ (8004484 <HAL_ADC_IRQHandler+0x264>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d009      	beq.n	800430a <HAL_ADC_IRQHandler+0xea>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a65      	ldr	r2, [pc, #404]	@ (8004490 <HAL_ADC_IRQHandler+0x270>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d002      	beq.n	8004306 <HAL_ADC_IRQHandler+0xe6>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	e003      	b.n	800430e <HAL_ADC_IRQHandler+0xee>
 8004306:	4b63      	ldr	r3, [pc, #396]	@ (8004494 <HAL_ADC_IRQHandler+0x274>)
 8004308:	e001      	b.n	800430e <HAL_ADC_IRQHandler+0xee>
 800430a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6812      	ldr	r2, [r2, #0]
 8004312:	4293      	cmp	r3, r2
 8004314:	d008      	beq.n	8004328 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2b05      	cmp	r3, #5
 8004320:	d002      	beq.n	8004328 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b09      	cmp	r3, #9
 8004326:	d104      	bne.n	8004332 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	623b      	str	r3, [r7, #32]
 8004330:	e014      	b.n	800435c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a53      	ldr	r2, [pc, #332]	@ (8004484 <HAL_ADC_IRQHandler+0x264>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d009      	beq.n	8004350 <HAL_ADC_IRQHandler+0x130>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a53      	ldr	r2, [pc, #332]	@ (8004490 <HAL_ADC_IRQHandler+0x270>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d002      	beq.n	800434c <HAL_ADC_IRQHandler+0x12c>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	e003      	b.n	8004354 <HAL_ADC_IRQHandler+0x134>
 800434c:	4b51      	ldr	r3, [pc, #324]	@ (8004494 <HAL_ADC_IRQHandler+0x274>)
 800434e:	e001      	b.n	8004354 <HAL_ADC_IRQHandler+0x134>
 8004350:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004354:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d135      	bne.n	80043d2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b08      	cmp	r3, #8
 8004372:	d12e      	bne.n	80043d2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff fc9b 	bl	8003cb4 <LL_ADC_REG_IsConversionOngoing>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d11a      	bne.n	80043ba <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 020c 	bic.w	r2, r2, #12
 8004392:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004398:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d112      	bne.n	80043d2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b0:	f043 0201 	orr.w	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043b8:	e00b      	b.n	80043d2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043be:	f043 0210 	orr.w	r2, r3, #16
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ca:	f043 0201 	orr.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f984 	bl	80046e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	220c      	movs	r2, #12
 80043de:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d004      	beq.n	80043f4 <HAL_ADC_IRQHandler+0x1d4>
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 80b3 	beq.w	8004566 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 80ad 	beq.w	8004566 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	2b00      	cmp	r3, #0
 8004416:	d105      	bne.n	8004424 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff fb14 	bl	8003a56 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800442e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff facf 	bl	80039d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800443a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a10      	ldr	r2, [pc, #64]	@ (8004484 <HAL_ADC_IRQHandler+0x264>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d009      	beq.n	800445a <HAL_ADC_IRQHandler+0x23a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a11      	ldr	r2, [pc, #68]	@ (8004490 <HAL_ADC_IRQHandler+0x270>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d002      	beq.n	8004456 <HAL_ADC_IRQHandler+0x236>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	e003      	b.n	800445e <HAL_ADC_IRQHandler+0x23e>
 8004456:	4b0f      	ldr	r3, [pc, #60]	@ (8004494 <HAL_ADC_IRQHandler+0x274>)
 8004458:	e001      	b.n	800445e <HAL_ADC_IRQHandler+0x23e>
 800445a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	4293      	cmp	r3, r2
 8004464:	d008      	beq.n	8004478 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2b06      	cmp	r3, #6
 8004470:	d002      	beq.n	8004478 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b07      	cmp	r3, #7
 8004476:	d10f      	bne.n	8004498 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	623b      	str	r3, [r7, #32]
 8004480:	e01f      	b.n	80044c2 <HAL_ADC_IRQHandler+0x2a2>
 8004482:	bf00      	nop
 8004484:	50000100 	.word	0x50000100
 8004488:	50000300 	.word	0x50000300
 800448c:	50000700 	.word	0x50000700
 8004490:	50000500 	.word	0x50000500
 8004494:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a8b      	ldr	r2, [pc, #556]	@ (80046cc <HAL_ADC_IRQHandler+0x4ac>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d009      	beq.n	80044b6 <HAL_ADC_IRQHandler+0x296>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a8a      	ldr	r2, [pc, #552]	@ (80046d0 <HAL_ADC_IRQHandler+0x4b0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d002      	beq.n	80044b2 <HAL_ADC_IRQHandler+0x292>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	e003      	b.n	80044ba <HAL_ADC_IRQHandler+0x29a>
 80044b2:	4b88      	ldr	r3, [pc, #544]	@ (80046d4 <HAL_ADC_IRQHandler+0x4b4>)
 80044b4:	e001      	b.n	80044ba <HAL_ADC_IRQHandler+0x29a>
 80044b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80044ba:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d047      	beq.n	8004558 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d007      	beq.n	80044e2 <HAL_ADC_IRQHandler+0x2c2>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d03f      	beq.n	8004558 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d13a      	bne.n	8004558 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ec:	2b40      	cmp	r3, #64	@ 0x40
 80044ee:	d133      	bne.n	8004558 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d12e      	bne.n	8004558 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fbeb 	bl	8003cda <LL_ADC_INJ_IsConversionOngoing>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d11a      	bne.n	8004540 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004518:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d112      	bne.n	8004558 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004536:	f043 0201 	orr.w	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800453e:	e00b      	b.n	8004558 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004544:	f043 0210 	orr.w	r2, r3, #16
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004550:	f043 0201 	orr.w	r2, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 ff67 	bl	800542c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2260      	movs	r2, #96	@ 0x60
 8004564:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800456c:	2b00      	cmp	r3, #0
 800456e:	d011      	beq.n	8004594 <HAL_ADC_IRQHandler+0x374>
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00c      	beq.n	8004594 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800457e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f8be 	bl	8004708 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2280      	movs	r2, #128	@ 0x80
 8004592:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d012      	beq.n	80045c4 <HAL_ADC_IRQHandler+0x3a4>
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00d      	beq.n	80045c4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 ff4d 	bl	8005454 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d012      	beq.n	80045f4 <HAL_ADC_IRQHandler+0x3d4>
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00d      	beq.n	80045f4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045dc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 ff3f 	bl	8005468 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f003 0310 	and.w	r3, r3, #16
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d043      	beq.n	8004686 <HAL_ADC_IRQHandler+0x466>
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b00      	cmp	r3, #0
 8004606:	d03e      	beq.n	8004686 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460c:	2b00      	cmp	r3, #0
 800460e:	d102      	bne.n	8004616 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8004610:	2301      	movs	r3, #1
 8004612:	627b      	str	r3, [r7, #36]	@ 0x24
 8004614:	e021      	b.n	800465a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d015      	beq.n	8004648 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004624:	d004      	beq.n	8004630 <HAL_ADC_IRQHandler+0x410>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a28      	ldr	r2, [pc, #160]	@ (80046cc <HAL_ADC_IRQHandler+0x4ac>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d101      	bne.n	8004634 <HAL_ADC_IRQHandler+0x414>
 8004630:	4b29      	ldr	r3, [pc, #164]	@ (80046d8 <HAL_ADC_IRQHandler+0x4b8>)
 8004632:	e000      	b.n	8004636 <HAL_ADC_IRQHandler+0x416>
 8004634:	4b29      	ldr	r3, [pc, #164]	@ (80046dc <HAL_ADC_IRQHandler+0x4bc>)
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fa7e 	bl	8003b38 <LL_ADC_GetMultiDMATransfer>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00b      	beq.n	800465a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004642:	2301      	movs	r3, #1
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24
 8004646:	e008      	b.n	800465a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004656:	2301      	movs	r3, #1
 8004658:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	2b01      	cmp	r3, #1
 800465e:	d10e      	bne.n	800467e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004664:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004670:	f043 0202 	orr.w	r2, r3, #2
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f84f 	bl	800471c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2210      	movs	r2, #16
 8004684:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800468c:	2b00      	cmp	r3, #0
 800468e:	d018      	beq.n	80046c2 <HAL_ADC_IRQHandler+0x4a2>
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004696:	2b00      	cmp	r3, #0
 8004698:	d013      	beq.n	80046c2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800469e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046aa:	f043 0208 	orr.w	r2, r3, #8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046ba:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 febf 	bl	8005440 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80046c2:	bf00      	nop
 80046c4:	3728      	adds	r7, #40	@ 0x28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	50000100 	.word	0x50000100
 80046d0:	50000500 	.word	0x50000500
 80046d4:	50000400 	.word	0x50000400
 80046d8:	50000300 	.word	0x50000300
 80046dc:	50000700 	.word	0x50000700

080046e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b0b6      	sub	sp, #216	@ 0xd8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800474a:	2b01      	cmp	r3, #1
 800474c:	d102      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x24>
 800474e:	2302      	movs	r3, #2
 8004750:	f000 bc13 	b.w	8004f7a <HAL_ADC_ConfigChannel+0x84a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff faa7 	bl	8003cb4 <LL_ADC_REG_IsConversionOngoing>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	f040 83f3 	bne.w	8004f54 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6859      	ldr	r1, [r3, #4]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	f7ff f93f 	bl	80039fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fa95 	bl	8003cb4 <LL_ADC_REG_IsConversionOngoing>
 800478a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff faa1 	bl	8003cda <LL_ADC_INJ_IsConversionOngoing>
 8004798:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800479c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f040 81d9 	bne.w	8004b58 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f040 81d4 	bne.w	8004b58 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047b8:	d10f      	bne.n	80047da <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2200      	movs	r2, #0
 80047c4:	4619      	mov	r1, r3
 80047c6:	f7ff f959 	bl	8003a7c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff f8ed 	bl	80039b2 <LL_ADC_SetSamplingTimeCommonConfig>
 80047d8:	e00e      	b.n	80047f8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6819      	ldr	r1, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	461a      	mov	r2, r3
 80047e8:	f7ff f948 	bl	8003a7c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff f8dd 	bl	80039b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	695a      	ldr	r2, [r3, #20]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	08db      	lsrs	r3, r3, #3
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b04      	cmp	r3, #4
 8004818:	d022      	beq.n	8004860 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6919      	ldr	r1, [r3, #16]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800482a:	f7ff f837 	bl	800389c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6919      	ldr	r1, [r3, #16]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	461a      	mov	r2, r3
 800483c:	f7ff f883 	bl	8003946 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6818      	ldr	r0, [r3, #0]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800484c:	2b01      	cmp	r3, #1
 800484e:	d102      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x126>
 8004850:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004854:	e000      	b.n	8004858 <HAL_ADC_ConfigChannel+0x128>
 8004856:	2300      	movs	r3, #0
 8004858:	461a      	mov	r2, r3
 800485a:	f7ff f88f 	bl	800397c <LL_ADC_SetOffsetSaturation>
 800485e:	e17b      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2100      	movs	r1, #0
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff f83c 	bl	80038e4 <LL_ADC_GetOffsetChannel>
 800486c:	4603      	mov	r3, r0
 800486e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10a      	bne.n	800488c <HAL_ADC_ConfigChannel+0x15c>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2100      	movs	r1, #0
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff f831 	bl	80038e4 <LL_ADC_GetOffsetChannel>
 8004882:	4603      	mov	r3, r0
 8004884:	0e9b      	lsrs	r3, r3, #26
 8004886:	f003 021f 	and.w	r2, r3, #31
 800488a:	e01e      	b.n	80048ca <HAL_ADC_ConfigChannel+0x19a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2100      	movs	r1, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff f826 	bl	80038e4 <LL_ADC_GetOffsetChannel>
 8004898:	4603      	mov	r3, r0
 800489a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80048a2:	fa93 f3a3 	rbit	r3, r3
 80048a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80048ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80048b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80048ba:	2320      	movs	r3, #32
 80048bc:	e004      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80048be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048c2:	fab3 f383 	clz	r3, r3
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d105      	bne.n	80048e2 <HAL_ADC_ConfigChannel+0x1b2>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	0e9b      	lsrs	r3, r3, #26
 80048dc:	f003 031f 	and.w	r3, r3, #31
 80048e0:	e018      	b.n	8004914 <HAL_ADC_ConfigChannel+0x1e4>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048ee:	fa93 f3a3 	rbit	r3, r3
 80048f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80048f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80048fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004906:	2320      	movs	r3, #32
 8004908:	e004      	b.n	8004914 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800490a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800490e:	fab3 f383 	clz	r3, r3
 8004912:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004914:	429a      	cmp	r2, r3
 8004916:	d106      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2200      	movs	r2, #0
 800491e:	2100      	movs	r1, #0
 8004920:	4618      	mov	r0, r3
 8004922:	f7fe fff5 	bl	8003910 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2101      	movs	r1, #1
 800492c:	4618      	mov	r0, r3
 800492e:	f7fe ffd9 	bl	80038e4 <LL_ADC_GetOffsetChannel>
 8004932:	4603      	mov	r3, r0
 8004934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10a      	bne.n	8004952 <HAL_ADC_ConfigChannel+0x222>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2101      	movs	r1, #1
 8004942:	4618      	mov	r0, r3
 8004944:	f7fe ffce 	bl	80038e4 <LL_ADC_GetOffsetChannel>
 8004948:	4603      	mov	r3, r0
 800494a:	0e9b      	lsrs	r3, r3, #26
 800494c:	f003 021f 	and.w	r2, r3, #31
 8004950:	e01e      	b.n	8004990 <HAL_ADC_ConfigChannel+0x260>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2101      	movs	r1, #1
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe ffc3 	bl	80038e4 <LL_ADC_GetOffsetChannel>
 800495e:	4603      	mov	r3, r0
 8004960:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004964:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004968:	fa93 f3a3 	rbit	r3, r3
 800496c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004970:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004974:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004980:	2320      	movs	r3, #32
 8004982:	e004      	b.n	800498e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004984:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004988:	fab3 f383 	clz	r3, r3
 800498c:	b2db      	uxtb	r3, r3
 800498e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004998:	2b00      	cmp	r3, #0
 800499a:	d105      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x278>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	0e9b      	lsrs	r3, r3, #26
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	e018      	b.n	80049da <HAL_ADC_ConfigChannel+0x2aa>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049b4:	fa93 f3a3 	rbit	r3, r3
 80049b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80049bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80049c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80049cc:	2320      	movs	r3, #32
 80049ce:	e004      	b.n	80049da <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80049d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049d4:	fab3 f383 	clz	r3, r3
 80049d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049da:	429a      	cmp	r2, r3
 80049dc:	d106      	bne.n	80049ec <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2200      	movs	r2, #0
 80049e4:	2101      	movs	r1, #1
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fe ff92 	bl	8003910 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2102      	movs	r1, #2
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fe ff76 	bl	80038e4 <LL_ADC_GetOffsetChannel>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10a      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x2e8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2102      	movs	r1, #2
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fe ff6b 	bl	80038e4 <LL_ADC_GetOffsetChannel>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	0e9b      	lsrs	r3, r3, #26
 8004a12:	f003 021f 	and.w	r2, r3, #31
 8004a16:	e01e      	b.n	8004a56 <HAL_ADC_ConfigChannel+0x326>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2102      	movs	r1, #2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe ff60 	bl	80038e4 <LL_ADC_GetOffsetChannel>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a2e:	fa93 f3a3 	rbit	r3, r3
 8004a32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004a3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004a46:	2320      	movs	r3, #32
 8004a48:	e004      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004a4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a4e:	fab3 f383 	clz	r3, r3
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d105      	bne.n	8004a6e <HAL_ADC_ConfigChannel+0x33e>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	0e9b      	lsrs	r3, r3, #26
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	e016      	b.n	8004a9c <HAL_ADC_ConfigChannel+0x36c>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a7a:	fa93 f3a3 	rbit	r3, r3
 8004a7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004a80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004a86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004a8e:	2320      	movs	r3, #32
 8004a90:	e004      	b.n	8004a9c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004a92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a96:	fab3 f383 	clz	r3, r3
 8004a9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d106      	bne.n	8004aae <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2102      	movs	r1, #2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fe ff31 	bl	8003910 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2103      	movs	r1, #3
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fe ff15 	bl	80038e4 <LL_ADC_GetOffsetChannel>
 8004aba:	4603      	mov	r3, r0
 8004abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x3aa>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2103      	movs	r1, #3
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe ff0a 	bl	80038e4 <LL_ADC_GetOffsetChannel>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	0e9b      	lsrs	r3, r3, #26
 8004ad4:	f003 021f 	and.w	r2, r3, #31
 8004ad8:	e017      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x3da>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2103      	movs	r1, #3
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fe feff 	bl	80038e4 <LL_ADC_GetOffsetChannel>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aec:	fa93 f3a3 	rbit	r3, r3
 8004af0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004af2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004af4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004af6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004afc:	2320      	movs	r3, #32
 8004afe:	e003      	b.n	8004b08 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004b00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b02:	fab3 f383 	clz	r3, r3
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d105      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x3f2>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	0e9b      	lsrs	r3, r3, #26
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	e011      	b.n	8004b46 <HAL_ADC_ConfigChannel+0x416>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b2a:	fa93 f3a3 	rbit	r3, r3
 8004b2e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004b30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004b34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004b3a:	2320      	movs	r3, #32
 8004b3c:	e003      	b.n	8004b46 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004b3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b40:	fab3 f383 	clz	r3, r3
 8004b44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d106      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2103      	movs	r1, #3
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fe fedc 	bl	8003910 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff f86f 	bl	8003c40 <LL_ADC_IsEnabled>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f040 813d 	bne.w	8004de4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6818      	ldr	r0, [r3, #0]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6819      	ldr	r1, [r3, #0]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	461a      	mov	r2, r3
 8004b78:	f7fe ffac 	bl	8003ad4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4aa2      	ldr	r2, [pc, #648]	@ (8004e0c <HAL_ADC_ConfigChannel+0x6dc>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	f040 812e 	bne.w	8004de4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10b      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x480>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	0e9b      	lsrs	r3, r3, #26
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	2b09      	cmp	r3, #9
 8004ba6:	bf94      	ite	ls
 8004ba8:	2301      	movls	r3, #1
 8004baa:	2300      	movhi	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e019      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x4b4>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bb8:	fa93 f3a3 	rbit	r3, r3
 8004bbc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004bbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bc0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004bc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004bc8:	2320      	movs	r3, #32
 8004bca:	e003      	b.n	8004bd4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004bcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bce:	fab3 f383 	clz	r3, r3
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	f003 031f 	and.w	r3, r3, #31
 8004bda:	2b09      	cmp	r3, #9
 8004bdc:	bf94      	ite	ls
 8004bde:	2301      	movls	r3, #1
 8004be0:	2300      	movhi	r3, #0
 8004be2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d079      	beq.n	8004cdc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d107      	bne.n	8004c04 <HAL_ADC_ConfigChannel+0x4d4>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	0e9b      	lsrs	r3, r3, #26
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	069b      	lsls	r3, r3, #26
 8004bfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c02:	e015      	b.n	8004c30 <HAL_ADC_ConfigChannel+0x500>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c0c:	fa93 f3a3 	rbit	r3, r3
 8004c10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004c12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c14:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004c1c:	2320      	movs	r3, #32
 8004c1e:	e003      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c22:	fab3 f383 	clz	r3, r3
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	3301      	adds	r3, #1
 8004c2a:	069b      	lsls	r3, r3, #26
 8004c2c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d109      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x520>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	0e9b      	lsrs	r3, r3, #26
 8004c42:	3301      	adds	r3, #1
 8004c44:	f003 031f 	and.w	r3, r3, #31
 8004c48:	2101      	movs	r1, #1
 8004c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4e:	e017      	b.n	8004c80 <HAL_ADC_ConfigChannel+0x550>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c58:	fa93 f3a3 	rbit	r3, r3
 8004c5c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c60:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004c68:	2320      	movs	r3, #32
 8004c6a:	e003      	b.n	8004c74 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004c6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c6e:	fab3 f383 	clz	r3, r3
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	3301      	adds	r3, #1
 8004c76:	f003 031f 	and.w	r3, r3, #31
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c80:	ea42 0103 	orr.w	r1, r2, r3
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <HAL_ADC_ConfigChannel+0x576>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	0e9b      	lsrs	r3, r3, #26
 8004c96:	3301      	adds	r3, #1
 8004c98:	f003 021f 	and.w	r2, r3, #31
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	4413      	add	r3, r2
 8004ca2:	051b      	lsls	r3, r3, #20
 8004ca4:	e018      	b.n	8004cd8 <HAL_ADC_ConfigChannel+0x5a8>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cae:	fa93 f3a3 	rbit	r3, r3
 8004cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004cbe:	2320      	movs	r3, #32
 8004cc0:	e003      	b.n	8004cca <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cc4:	fab3 f383 	clz	r3, r3
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	3301      	adds	r3, #1
 8004ccc:	f003 021f 	and.w	r2, r3, #31
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	4413      	add	r3, r2
 8004cd6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	e07e      	b.n	8004dda <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d107      	bne.n	8004cf8 <HAL_ADC_ConfigChannel+0x5c8>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	0e9b      	lsrs	r3, r3, #26
 8004cee:	3301      	adds	r3, #1
 8004cf0:	069b      	lsls	r3, r3, #26
 8004cf2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cf6:	e015      	b.n	8004d24 <HAL_ADC_ConfigChannel+0x5f4>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d00:	fa93 f3a3 	rbit	r3, r3
 8004d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d08:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004d10:	2320      	movs	r3, #32
 8004d12:	e003      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d16:	fab3 f383 	clz	r3, r3
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	069b      	lsls	r3, r3, #26
 8004d20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d109      	bne.n	8004d44 <HAL_ADC_ConfigChannel+0x614>
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	0e9b      	lsrs	r3, r3, #26
 8004d36:	3301      	adds	r3, #1
 8004d38:	f003 031f 	and.w	r3, r3, #31
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d42:	e017      	b.n	8004d74 <HAL_ADC_ConfigChannel+0x644>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	fa93 f3a3 	rbit	r3, r3
 8004d50:	61fb      	str	r3, [r7, #28]
  return result;
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004d5c:	2320      	movs	r3, #32
 8004d5e:	e003      	b.n	8004d68 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	fab3 f383 	clz	r3, r3
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	3301      	adds	r3, #1
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	2101      	movs	r1, #1
 8004d70:	fa01 f303 	lsl.w	r3, r1, r3
 8004d74:	ea42 0103 	orr.w	r1, r2, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10d      	bne.n	8004da0 <HAL_ADC_ConfigChannel+0x670>
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	0e9b      	lsrs	r3, r3, #26
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	f003 021f 	and.w	r2, r3, #31
 8004d90:	4613      	mov	r3, r2
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	4413      	add	r3, r2
 8004d96:	3b1e      	subs	r3, #30
 8004d98:	051b      	lsls	r3, r3, #20
 8004d9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d9e:	e01b      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0x6a8>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	fa93 f3a3 	rbit	r3, r3
 8004dac:	613b      	str	r3, [r7, #16]
  return result;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004db8:	2320      	movs	r3, #32
 8004dba:	e003      	b.n	8004dc4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	fab3 f383 	clz	r3, r3
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	f003 021f 	and.w	r2, r3, #31
 8004dca:	4613      	mov	r3, r2
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	4413      	add	r3, r2
 8004dd0:	3b1e      	subs	r3, #30
 8004dd2:	051b      	lsls	r3, r3, #20
 8004dd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dd8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dde:	4619      	mov	r1, r3
 8004de0:	f7fe fe4c 	bl	8003a7c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	4b09      	ldr	r3, [pc, #36]	@ (8004e10 <HAL_ADC_ConfigChannel+0x6e0>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80be 	beq.w	8004f6e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dfa:	d004      	beq.n	8004e06 <HAL_ADC_ConfigChannel+0x6d6>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a04      	ldr	r2, [pc, #16]	@ (8004e14 <HAL_ADC_ConfigChannel+0x6e4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d10a      	bne.n	8004e1c <HAL_ADC_ConfigChannel+0x6ec>
 8004e06:	4b04      	ldr	r3, [pc, #16]	@ (8004e18 <HAL_ADC_ConfigChannel+0x6e8>)
 8004e08:	e009      	b.n	8004e1e <HAL_ADC_ConfigChannel+0x6ee>
 8004e0a:	bf00      	nop
 8004e0c:	407f0000 	.word	0x407f0000
 8004e10:	80080000 	.word	0x80080000
 8004e14:	50000100 	.word	0x50000100
 8004e18:	50000300 	.word	0x50000300
 8004e1c:	4b59      	ldr	r3, [pc, #356]	@ (8004f84 <HAL_ADC_ConfigChannel+0x854>)
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fe fd2e 	bl	8003880 <LL_ADC_GetCommonPathInternalCh>
 8004e24:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a56      	ldr	r2, [pc, #344]	@ (8004f88 <HAL_ADC_ConfigChannel+0x858>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_ADC_ConfigChannel+0x70c>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a55      	ldr	r2, [pc, #340]	@ (8004f8c <HAL_ADC_ConfigChannel+0x85c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d13a      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d134      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e50:	d005      	beq.n	8004e5e <HAL_ADC_ConfigChannel+0x72e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a4e      	ldr	r2, [pc, #312]	@ (8004f90 <HAL_ADC_ConfigChannel+0x860>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	f040 8085 	bne.w	8004f68 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e66:	d004      	beq.n	8004e72 <HAL_ADC_ConfigChannel+0x742>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a49      	ldr	r2, [pc, #292]	@ (8004f94 <HAL_ADC_ConfigChannel+0x864>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d101      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0x746>
 8004e72:	4a49      	ldr	r2, [pc, #292]	@ (8004f98 <HAL_ADC_ConfigChannel+0x868>)
 8004e74:	e000      	b.n	8004e78 <HAL_ADC_ConfigChannel+0x748>
 8004e76:	4a43      	ldr	r2, [pc, #268]	@ (8004f84 <HAL_ADC_ConfigChannel+0x854>)
 8004e78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e80:	4619      	mov	r1, r3
 8004e82:	4610      	mov	r0, r2
 8004e84:	f7fe fce9 	bl	800385a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e88:	4b44      	ldr	r3, [pc, #272]	@ (8004f9c <HAL_ADC_ConfigChannel+0x86c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	099b      	lsrs	r3, r3, #6
 8004e8e:	4a44      	ldr	r2, [pc, #272]	@ (8004fa0 <HAL_ADC_ConfigChannel+0x870>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	099b      	lsrs	r3, r3, #6
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	4613      	mov	r3, r2
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ea2:	e002      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1f9      	bne.n	8004ea4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004eb0:	e05a      	b.n	8004f68 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a3b      	ldr	r2, [pc, #236]	@ (8004fa4 <HAL_ADC_ConfigChannel+0x874>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d125      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ebc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ec0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d11f      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a31      	ldr	r2, [pc, #196]	@ (8004f94 <HAL_ADC_ConfigChannel+0x864>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d104      	bne.n	8004edc <HAL_ADC_ConfigChannel+0x7ac>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a34      	ldr	r2, [pc, #208]	@ (8004fa8 <HAL_ADC_ConfigChannel+0x878>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d047      	beq.n	8004f6c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ee4:	d004      	beq.n	8004ef0 <HAL_ADC_ConfigChannel+0x7c0>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a2a      	ldr	r2, [pc, #168]	@ (8004f94 <HAL_ADC_ConfigChannel+0x864>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d101      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x7c4>
 8004ef0:	4a29      	ldr	r2, [pc, #164]	@ (8004f98 <HAL_ADC_ConfigChannel+0x868>)
 8004ef2:	e000      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x7c6>
 8004ef4:	4a23      	ldr	r2, [pc, #140]	@ (8004f84 <HAL_ADC_ConfigChannel+0x854>)
 8004ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004efa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f7fe fcaa 	bl	800385a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f06:	e031      	b.n	8004f6c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a27      	ldr	r2, [pc, #156]	@ (8004fac <HAL_ADC_ConfigChannel+0x87c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d12d      	bne.n	8004f6e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d127      	bne.n	8004f6e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1c      	ldr	r2, [pc, #112]	@ (8004f94 <HAL_ADC_ConfigChannel+0x864>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d022      	beq.n	8004f6e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f30:	d004      	beq.n	8004f3c <HAL_ADC_ConfigChannel+0x80c>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a17      	ldr	r2, [pc, #92]	@ (8004f94 <HAL_ADC_ConfigChannel+0x864>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d101      	bne.n	8004f40 <HAL_ADC_ConfigChannel+0x810>
 8004f3c:	4a16      	ldr	r2, [pc, #88]	@ (8004f98 <HAL_ADC_ConfigChannel+0x868>)
 8004f3e:	e000      	b.n	8004f42 <HAL_ADC_ConfigChannel+0x812>
 8004f40:	4a10      	ldr	r2, [pc, #64]	@ (8004f84 <HAL_ADC_ConfigChannel+0x854>)
 8004f42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	f7fe fc84 	bl	800385a <LL_ADC_SetCommonPathInternalCh>
 8004f52:	e00c      	b.n	8004f6e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f58:	f043 0220 	orr.w	r2, r3, #32
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004f66:	e002      	b.n	8004f6e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f68:	bf00      	nop
 8004f6a:	e000      	b.n	8004f6e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f76:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	37d8      	adds	r7, #216	@ 0xd8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	50000700 	.word	0x50000700
 8004f88:	c3210000 	.word	0xc3210000
 8004f8c:	90c00010 	.word	0x90c00010
 8004f90:	50000600 	.word	0x50000600
 8004f94:	50000100 	.word	0x50000100
 8004f98:	50000300 	.word	0x50000300
 8004f9c:	20000004 	.word	0x20000004
 8004fa0:	053e2d63 	.word	0x053e2d63
 8004fa4:	c7520000 	.word	0xc7520000
 8004fa8:	50000500 	.word	0x50000500
 8004fac:	cb840000 	.word	0xcb840000

08004fb0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fe fe3d 	bl	8003c40 <LL_ADC_IsEnabled>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d176      	bne.n	80050ba <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	4b3c      	ldr	r3, [pc, #240]	@ (80050c4 <ADC_Enable+0x114>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00d      	beq.n	8004ff6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fde:	f043 0210 	orr.w	r2, r3, #16
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fea:	f043 0201 	orr.w	r2, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e062      	b.n	80050bc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe fdf8 	bl	8003bf0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005008:	d004      	beq.n	8005014 <ADC_Enable+0x64>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a2e      	ldr	r2, [pc, #184]	@ (80050c8 <ADC_Enable+0x118>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d101      	bne.n	8005018 <ADC_Enable+0x68>
 8005014:	4b2d      	ldr	r3, [pc, #180]	@ (80050cc <ADC_Enable+0x11c>)
 8005016:	e000      	b.n	800501a <ADC_Enable+0x6a>
 8005018:	4b2d      	ldr	r3, [pc, #180]	@ (80050d0 <ADC_Enable+0x120>)
 800501a:	4618      	mov	r0, r3
 800501c:	f7fe fc30 	bl	8003880 <LL_ADC_GetCommonPathInternalCh>
 8005020:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005022:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005026:	2b00      	cmp	r3, #0
 8005028:	d013      	beq.n	8005052 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800502a:	4b2a      	ldr	r3, [pc, #168]	@ (80050d4 <ADC_Enable+0x124>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	099b      	lsrs	r3, r3, #6
 8005030:	4a29      	ldr	r2, [pc, #164]	@ (80050d8 <ADC_Enable+0x128>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	099b      	lsrs	r3, r3, #6
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	4613      	mov	r3, r2
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005044:	e002      	b.n	800504c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	3b01      	subs	r3, #1
 800504a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f9      	bne.n	8005046 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005052:	f7fe fbe3 	bl	800381c <HAL_GetTick>
 8005056:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005058:	e028      	b.n	80050ac <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f7fe fdee 	bl	8003c40 <LL_ADC_IsEnabled>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d104      	bne.n	8005074 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f7fe fdbe 	bl	8003bf0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005074:	f7fe fbd2 	bl	800381c <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d914      	bls.n	80050ac <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b01      	cmp	r3, #1
 800508e:	d00d      	beq.n	80050ac <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005094:	f043 0210 	orr.w	r2, r3, #16
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050a0:	f043 0201 	orr.w	r2, r3, #1
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e007      	b.n	80050bc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d1cf      	bne.n	800505a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	8000003f 	.word	0x8000003f
 80050c8:	50000100 	.word	0x50000100
 80050cc:	50000300 	.word	0x50000300
 80050d0:	50000700 	.word	0x50000700
 80050d4:	20000004 	.word	0x20000004
 80050d8:	053e2d63 	.word	0x053e2d63

080050dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fe fdbc 	bl	8003c66 <LL_ADC_IsDisableOngoing>
 80050ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fe fda3 	bl	8003c40 <LL_ADC_IsEnabled>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d047      	beq.n	8005190 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d144      	bne.n	8005190 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f003 030d 	and.w	r3, r3, #13
 8005110:	2b01      	cmp	r3, #1
 8005112:	d10c      	bne.n	800512e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f7fe fd7d 	bl	8003c18 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2203      	movs	r2, #3
 8005124:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005126:	f7fe fb79 	bl	800381c <HAL_GetTick>
 800512a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800512c:	e029      	b.n	8005182 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005132:	f043 0210 	orr.w	r2, r3, #16
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800513e:	f043 0201 	orr.w	r2, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e023      	b.n	8005192 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800514a:	f7fe fb67 	bl	800381c <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d914      	bls.n	8005182 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00d      	beq.n	8005182 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800516a:	f043 0210 	orr.w	r2, r3, #16
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005176:	f043 0201 	orr.w	r2, r3, #1
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e007      	b.n	8005192 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1dc      	bne.n	800514a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b084      	sub	sp, #16
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d14b      	bne.n	800524c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d021      	beq.n	8005212 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe fc00 	bl	80039d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d032      	beq.n	8005244 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d12b      	bne.n	8005244 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d11f      	bne.n	8005244 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005208:	f043 0201 	orr.w	r2, r3, #1
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005210:	e018      	b.n	8005244 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d111      	bne.n	8005244 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005224:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005230:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d105      	bne.n	8005244 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800523c:	f043 0201 	orr.w	r2, r3, #1
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f7ff fa4b 	bl	80046e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800524a:	e00e      	b.n	800526a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7ff fa5f 	bl	800471c <HAL_ADC_ErrorCallback>
}
 800525e:	e004      	b.n	800526a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	4798      	blx	r3
}
 800526a:	bf00      	nop
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f7ff fa37 	bl	80046f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005286:	bf00      	nop
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ac:	f043 0204 	orr.w	r2, r3, #4
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f7ff fa31 	bl	800471c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052ba:	bf00      	nop
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <LL_ADC_IsEnabled>:
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d101      	bne.n	80052da <LL_ADC_IsEnabled+0x18>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <LL_ADC_IsEnabled+0x1a>
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <LL_ADC_StartCalibration>:
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80052fa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005304:	4313      	orrs	r3, r2
 8005306:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	609a      	str	r2, [r3, #8]
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <LL_ADC_IsCalibrationOnGoing>:
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800532a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800532e:	d101      	bne.n	8005334 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005330:	2301      	movs	r3, #1
 8005332:	e000      	b.n	8005336 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <LL_ADC_REG_IsConversionOngoing>:
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b04      	cmp	r3, #4
 8005354:	d101      	bne.n	800535a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005372:	2300      	movs	r3, #0
 8005374:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_ADCEx_Calibration_Start+0x1c>
 8005380:	2302      	movs	r3, #2
 8005382:	e04d      	b.n	8005420 <HAL_ADCEx_Calibration_Start+0xb8>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff fea5 	bl	80050dc <ADC_Disable>
 8005392:	4603      	mov	r3, r0
 8005394:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005396:	7bfb      	ldrb	r3, [r7, #15]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d136      	bne.n	800540a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80053a4:	f023 0302 	bic.w	r3, r3, #2
 80053a8:	f043 0202 	orr.w	r2, r3, #2
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6839      	ldr	r1, [r7, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff ff96 	bl	80052e8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80053bc:	e014      	b.n	80053e8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	3301      	adds	r3, #1
 80053c2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4a18      	ldr	r2, [pc, #96]	@ (8005428 <HAL_ADCEx_Calibration_Start+0xc0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d90d      	bls.n	80053e8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053d0:	f023 0312 	bic.w	r3, r3, #18
 80053d4:	f043 0210 	orr.w	r2, r3, #16
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e01b      	b.n	8005420 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff ff94 	bl	800531a <LL_ADC_IsCalibrationOnGoing>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1e2      	bne.n	80053be <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053fc:	f023 0303 	bic.w	r3, r3, #3
 8005400:	f043 0201 	orr.w	r2, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005408:	e005      	b.n	8005416 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800540e:	f043 0210 	orr.w	r2, r3, #16
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800541e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	0004de01 	.word	0x0004de01

0800542c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005490:	b590      	push	{r4, r7, lr}
 8005492:	b0a1      	sub	sp, #132	@ 0x84
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e0e7      	b.n	800567e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80054b6:	2300      	movs	r3, #0
 80054b8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80054ba:	2300      	movs	r3, #0
 80054bc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054c6:	d102      	bne.n	80054ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80054c8:	4b6f      	ldr	r3, [pc, #444]	@ (8005688 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80054ca:	60bb      	str	r3, [r7, #8]
 80054cc:	e009      	b.n	80054e2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a6e      	ldr	r2, [pc, #440]	@ (800568c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d102      	bne.n	80054de <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80054d8:	4b6d      	ldr	r3, [pc, #436]	@ (8005690 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80054da:	60bb      	str	r3, [r7, #8]
 80054dc:	e001      	b.n	80054e2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80054de:	2300      	movs	r3, #0
 80054e0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10b      	bne.n	8005500 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ec:	f043 0220 	orr.w	r2, r3, #32
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e0be      	b.n	800567e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff ff1d 	bl	8005342 <LL_ADC_REG_IsConversionOngoing>
 8005508:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff ff17 	bl	8005342 <LL_ADC_REG_IsConversionOngoing>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	f040 80a0 	bne.w	800565c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800551c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800551e:	2b00      	cmp	r3, #0
 8005520:	f040 809c 	bne.w	800565c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800552c:	d004      	beq.n	8005538 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a55      	ldr	r2, [pc, #340]	@ (8005688 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d101      	bne.n	800553c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005538:	4b56      	ldr	r3, [pc, #344]	@ (8005694 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800553a:	e000      	b.n	800553e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800553c:	4b56      	ldr	r3, [pc, #344]	@ (8005698 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800553e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d04b      	beq.n	80055e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005548:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	6859      	ldr	r1, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800555a:	035b      	lsls	r3, r3, #13
 800555c:	430b      	orrs	r3, r1
 800555e:	431a      	orrs	r2, r3
 8005560:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005562:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800556c:	d004      	beq.n	8005578 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a45      	ldr	r2, [pc, #276]	@ (8005688 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d10f      	bne.n	8005598 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005578:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800557c:	f7ff fea1 	bl	80052c2 <LL_ADC_IsEnabled>
 8005580:	4604      	mov	r4, r0
 8005582:	4841      	ldr	r0, [pc, #260]	@ (8005688 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005584:	f7ff fe9d 	bl	80052c2 <LL_ADC_IsEnabled>
 8005588:	4603      	mov	r3, r0
 800558a:	4323      	orrs	r3, r4
 800558c:	2b00      	cmp	r3, #0
 800558e:	bf0c      	ite	eq
 8005590:	2301      	moveq	r3, #1
 8005592:	2300      	movne	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	e012      	b.n	80055be <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005598:	483c      	ldr	r0, [pc, #240]	@ (800568c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800559a:	f7ff fe92 	bl	80052c2 <LL_ADC_IsEnabled>
 800559e:	4604      	mov	r4, r0
 80055a0:	483b      	ldr	r0, [pc, #236]	@ (8005690 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80055a2:	f7ff fe8e 	bl	80052c2 <LL_ADC_IsEnabled>
 80055a6:	4603      	mov	r3, r0
 80055a8:	431c      	orrs	r4, r3
 80055aa:	483c      	ldr	r0, [pc, #240]	@ (800569c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80055ac:	f7ff fe89 	bl	80052c2 <LL_ADC_IsEnabled>
 80055b0:	4603      	mov	r3, r0
 80055b2:	4323      	orrs	r3, r4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	bf0c      	ite	eq
 80055b8:	2301      	moveq	r3, #1
 80055ba:	2300      	movne	r3, #0
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d056      	beq.n	8005670 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80055c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80055ca:	f023 030f 	bic.w	r3, r3, #15
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	6811      	ldr	r1, [r2, #0]
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	6892      	ldr	r2, [r2, #8]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	431a      	orrs	r2, r3
 80055da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055dc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80055de:	e047      	b.n	8005670 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80055e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055f4:	d004      	beq.n	8005600 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a23      	ldr	r2, [pc, #140]	@ (8005688 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d10f      	bne.n	8005620 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005600:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005604:	f7ff fe5d 	bl	80052c2 <LL_ADC_IsEnabled>
 8005608:	4604      	mov	r4, r0
 800560a:	481f      	ldr	r0, [pc, #124]	@ (8005688 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800560c:	f7ff fe59 	bl	80052c2 <LL_ADC_IsEnabled>
 8005610:	4603      	mov	r3, r0
 8005612:	4323      	orrs	r3, r4
 8005614:	2b00      	cmp	r3, #0
 8005616:	bf0c      	ite	eq
 8005618:	2301      	moveq	r3, #1
 800561a:	2300      	movne	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	e012      	b.n	8005646 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005620:	481a      	ldr	r0, [pc, #104]	@ (800568c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005622:	f7ff fe4e 	bl	80052c2 <LL_ADC_IsEnabled>
 8005626:	4604      	mov	r4, r0
 8005628:	4819      	ldr	r0, [pc, #100]	@ (8005690 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800562a:	f7ff fe4a 	bl	80052c2 <LL_ADC_IsEnabled>
 800562e:	4603      	mov	r3, r0
 8005630:	431c      	orrs	r4, r3
 8005632:	481a      	ldr	r0, [pc, #104]	@ (800569c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005634:	f7ff fe45 	bl	80052c2 <LL_ADC_IsEnabled>
 8005638:	4603      	mov	r3, r0
 800563a:	4323      	orrs	r3, r4
 800563c:	2b00      	cmp	r3, #0
 800563e:	bf0c      	ite	eq
 8005640:	2301      	moveq	r3, #1
 8005642:	2300      	movne	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d012      	beq.n	8005670 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800564a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005652:	f023 030f 	bic.w	r3, r3, #15
 8005656:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005658:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800565a:	e009      	b.n	8005670 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005660:	f043 0220 	orr.w	r2, r3, #32
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800566e:	e000      	b.n	8005672 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005670:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800567a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800567e:	4618      	mov	r0, r3
 8005680:	3784      	adds	r7, #132	@ 0x84
 8005682:	46bd      	mov	sp, r7
 8005684:	bd90      	pop	{r4, r7, pc}
 8005686:	bf00      	nop
 8005688:	50000100 	.word	0x50000100
 800568c:	50000400 	.word	0x50000400
 8005690:	50000500 	.word	0x50000500
 8005694:	50000300 	.word	0x50000300
 8005698:	50000700 	.word	0x50000700
 800569c:	50000600 	.word	0x50000600

080056a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056b0:	4b0c      	ldr	r3, [pc, #48]	@ (80056e4 <__NVIC_SetPriorityGrouping+0x44>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80056bc:	4013      	ands	r3, r2
 80056be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80056cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056d2:	4a04      	ldr	r2, [pc, #16]	@ (80056e4 <__NVIC_SetPriorityGrouping+0x44>)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	60d3      	str	r3, [r2, #12]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	e000ed00 	.word	0xe000ed00

080056e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056ec:	4b04      	ldr	r3, [pc, #16]	@ (8005700 <__NVIC_GetPriorityGrouping+0x18>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	0a1b      	lsrs	r3, r3, #8
 80056f2:	f003 0307 	and.w	r3, r3, #7
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	e000ed00 	.word	0xe000ed00

08005704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800570e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005712:	2b00      	cmp	r3, #0
 8005714:	db0b      	blt.n	800572e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	f003 021f 	and.w	r2, r3, #31
 800571c:	4907      	ldr	r1, [pc, #28]	@ (800573c <__NVIC_EnableIRQ+0x38>)
 800571e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	2001      	movs	r0, #1
 8005726:	fa00 f202 	lsl.w	r2, r0, r2
 800572a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	e000e100 	.word	0xe000e100

08005740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	6039      	str	r1, [r7, #0]
 800574a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800574c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005750:	2b00      	cmp	r3, #0
 8005752:	db0a      	blt.n	800576a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	b2da      	uxtb	r2, r3
 8005758:	490c      	ldr	r1, [pc, #48]	@ (800578c <__NVIC_SetPriority+0x4c>)
 800575a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800575e:	0112      	lsls	r2, r2, #4
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	440b      	add	r3, r1
 8005764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005768:	e00a      	b.n	8005780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	b2da      	uxtb	r2, r3
 800576e:	4908      	ldr	r1, [pc, #32]	@ (8005790 <__NVIC_SetPriority+0x50>)
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	3b04      	subs	r3, #4
 8005778:	0112      	lsls	r2, r2, #4
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	440b      	add	r3, r1
 800577e:	761a      	strb	r2, [r3, #24]
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	e000e100 	.word	0xe000e100
 8005790:	e000ed00 	.word	0xe000ed00

08005794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005794:	b480      	push	{r7}
 8005796:	b089      	sub	sp, #36	@ 0x24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f1c3 0307 	rsb	r3, r3, #7
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	bf28      	it	cs
 80057b2:	2304      	movcs	r3, #4
 80057b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	3304      	adds	r3, #4
 80057ba:	2b06      	cmp	r3, #6
 80057bc:	d902      	bls.n	80057c4 <NVIC_EncodePriority+0x30>
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	3b03      	subs	r3, #3
 80057c2:	e000      	b.n	80057c6 <NVIC_EncodePriority+0x32>
 80057c4:	2300      	movs	r3, #0
 80057c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	43da      	mvns	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	401a      	ands	r2, r3
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	fa01 f303 	lsl.w	r3, r1, r3
 80057e6:	43d9      	mvns	r1, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057ec:	4313      	orrs	r3, r2
         );
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3724      	adds	r7, #36	@ 0x24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff ff4c 	bl	80056a0 <__NVIC_SetPriorityGrouping>
}
 8005808:	bf00      	nop
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	4603      	mov	r3, r0
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800581e:	f7ff ff63 	bl	80056e8 <__NVIC_GetPriorityGrouping>
 8005822:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	6978      	ldr	r0, [r7, #20]
 800582a:	f7ff ffb3 	bl	8005794 <NVIC_EncodePriority>
 800582e:	4602      	mov	r2, r0
 8005830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005834:	4611      	mov	r1, r2
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff ff82 	bl	8005740 <__NVIC_SetPriority>
}
 800583c:	bf00      	nop
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800584e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff ff56 	bl	8005704 <__NVIC_EnableIRQ>
}
 8005858:	bf00      	nop
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e08d      	b.n	800598e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	4b47      	ldr	r3, [pc, #284]	@ (8005998 <HAL_DMA_Init+0x138>)
 800587a:	429a      	cmp	r2, r3
 800587c:	d80f      	bhi.n	800589e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	4b45      	ldr	r3, [pc, #276]	@ (800599c <HAL_DMA_Init+0x13c>)
 8005886:	4413      	add	r3, r2
 8005888:	4a45      	ldr	r2, [pc, #276]	@ (80059a0 <HAL_DMA_Init+0x140>)
 800588a:	fba2 2303 	umull	r2, r3, r2, r3
 800588e:	091b      	lsrs	r3, r3, #4
 8005890:	009a      	lsls	r2, r3, #2
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a42      	ldr	r2, [pc, #264]	@ (80059a4 <HAL_DMA_Init+0x144>)
 800589a:	641a      	str	r2, [r3, #64]	@ 0x40
 800589c:	e00e      	b.n	80058bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	4b40      	ldr	r3, [pc, #256]	@ (80059a8 <HAL_DMA_Init+0x148>)
 80058a6:	4413      	add	r3, r2
 80058a8:	4a3d      	ldr	r2, [pc, #244]	@ (80059a0 <HAL_DMA_Init+0x140>)
 80058aa:	fba2 2303 	umull	r2, r3, r2, r3
 80058ae:	091b      	lsrs	r3, r3, #4
 80058b0:	009a      	lsls	r2, r3, #2
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a3c      	ldr	r2, [pc, #240]	@ (80059ac <HAL_DMA_Init+0x14c>)
 80058ba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80058d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80058e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fa82 	bl	8005e18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800591c:	d102      	bne.n	8005924 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005938:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d010      	beq.n	8005964 <HAL_DMA_Init+0x104>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b04      	cmp	r3, #4
 8005948:	d80c      	bhi.n	8005964 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 faa2 	bl	8005e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005960:	605a      	str	r2, [r3, #4]
 8005962:	e008      	b.n	8005976 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	40020407 	.word	0x40020407
 800599c:	bffdfff8 	.word	0xbffdfff8
 80059a0:	cccccccd 	.word	0xcccccccd
 80059a4:	40020000 	.word	0x40020000
 80059a8:	bffdfbf8 	.word	0xbffdfbf8
 80059ac:	40020400 	.word	0x40020400

080059b0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_DMA_Start_IT+0x20>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e066      	b.n	8005a9e <HAL_DMA_Start_IT+0xee>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d155      	bne.n	8005a90 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0201 	bic.w	r2, r2, #1
 8005a00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f9c7 	bl	8005d9c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d008      	beq.n	8005a28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 020e 	orr.w	r2, r2, #14
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	e00f      	b.n	8005a48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0204 	bic.w	r2, r2, #4
 8005a36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 020a 	orr.w	r2, r2, #10
 8005a46:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a64:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d007      	beq.n	8005a7e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a7c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0201 	orr.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	e005      	b.n	8005a9c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005a98:	2302      	movs	r3, #2
 8005a9a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b085      	sub	sp, #20
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d005      	beq.n	8005aca <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
 8005ac8:	e037      	b.n	8005b3a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 020e 	bic.w	r2, r2, #14
 8005ad8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ae8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0201 	bic.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afe:	f003 021f 	and.w	r2, r3, #31
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b06:	2101      	movs	r1, #1
 8005b08:	fa01 f202 	lsl.w	r2, r1, r2
 8005b0c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b16:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00c      	beq.n	8005b3a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b2e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005b38:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d00d      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2204      	movs	r2, #4
 8005b74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	73fb      	strb	r3, [r7, #15]
 8005b8a:	e047      	b.n	8005c1c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 020e 	bic.w	r2, r2, #14
 8005b9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0201 	bic.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc0:	f003 021f 	and.w	r2, r3, #31
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc8:	2101      	movs	r1, #1
 8005bca:	fa01 f202 	lsl.w	r2, r1, r2
 8005bce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005bd8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00c      	beq.n	8005bfc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bf0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005bfa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	4798      	blx	r3
    }
  }
  return status;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c42:	f003 031f 	and.w	r3, r3, #31
 8005c46:	2204      	movs	r2, #4
 8005c48:	409a      	lsls	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d026      	beq.n	8005ca0 <HAL_DMA_IRQHandler+0x7a>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d021      	beq.n	8005ca0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d107      	bne.n	8005c7a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0204 	bic.w	r2, r2, #4
 8005c78:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7e:	f003 021f 	and.w	r2, r3, #31
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c86:	2104      	movs	r1, #4
 8005c88:	fa01 f202 	lsl.w	r2, r1, r2
 8005c8c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d071      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005c9e:	e06c      	b.n	8005d7a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca4:	f003 031f 	and.w	r3, r3, #31
 8005ca8:	2202      	movs	r2, #2
 8005caa:	409a      	lsls	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d02e      	beq.n	8005d12 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d029      	beq.n	8005d12 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10b      	bne.n	8005ce4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 020a 	bic.w	r2, r2, #10
 8005cda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce8:	f003 021f 	and.w	r2, r3, #31
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf0:	2102      	movs	r1, #2
 8005cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8005cf6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d038      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005d10:	e033      	b.n	8005d7a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d16:	f003 031f 	and.w	r3, r3, #31
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	409a      	lsls	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4013      	ands	r3, r2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d02a      	beq.n	8005d7c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f003 0308 	and.w	r3, r3, #8
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d025      	beq.n	8005d7c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 020e 	bic.w	r2, r2, #14
 8005d3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d44:	f003 021f 	and.w	r2, r3, #31
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d004      	beq.n	8005d7c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005d7a:	bf00      	nop
 8005d7c:	bf00      	nop
}
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005db2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d004      	beq.n	8005dc6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005dc4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dca:	f003 021f 	and.w	r2, r3, #31
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b10      	cmp	r3, #16
 8005de8:	d108      	bne.n	8005dfc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005dfa:	e007      	b.n	8005e0c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	60da      	str	r2, [r3, #12]
}
 8005e0c:	bf00      	nop
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	4b16      	ldr	r3, [pc, #88]	@ (8005e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d802      	bhi.n	8005e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005e2c:	4b15      	ldr	r3, [pc, #84]	@ (8005e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e001      	b.n	8005e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005e32:	4b15      	ldr	r3, [pc, #84]	@ (8005e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005e34:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	3b08      	subs	r3, #8
 8005e42:	4a12      	ldr	r2, [pc, #72]	@ (8005e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005e44:	fba2 2303 	umull	r2, r3, r2, r3
 8005e48:	091b      	lsrs	r3, r3, #4
 8005e4a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e50:	089b      	lsrs	r3, r3, #2
 8005e52:	009a      	lsls	r2, r3, #2
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	4413      	add	r3, r2
 8005e58:	461a      	mov	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a0b      	ldr	r2, [pc, #44]	@ (8005e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005e62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f003 031f 	and.w	r3, r3, #31
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	409a      	lsls	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005e72:	bf00      	nop
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	40020407 	.word	0x40020407
 8005e84:	40020800 	.word	0x40020800
 8005e88:	40020820 	.word	0x40020820
 8005e8c:	cccccccd 	.word	0xcccccccd
 8005e90:	40020880 	.word	0x40020880

08005e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005ea8:	4413      	add	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	461a      	mov	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a08      	ldr	r2, [pc, #32]	@ (8005ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005eb6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	f003 031f 	and.w	r3, r3, #31
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	409a      	lsls	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005ec8:	bf00      	nop
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	1000823f 	.word	0x1000823f
 8005ed8:	40020940 	.word	0x40020940

08005edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005eea:	e15a      	b.n	80061a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef8:	4013      	ands	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 814c 	beq.w	800619c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f003 0303 	and.w	r3, r3, #3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d005      	beq.n	8005f1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d130      	bne.n	8005f7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	2203      	movs	r2, #3
 8005f28:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4013      	ands	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f52:	2201      	movs	r2, #1
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	43db      	mvns	r3, r3
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	091b      	lsrs	r3, r3, #4
 8005f68:	f003 0201 	and.w	r2, r3, #1
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d017      	beq.n	8005fba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	2203      	movs	r2, #3
 8005f96:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9a:	43db      	mvns	r3, r3
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	689a      	ldr	r2, [r3, #8]
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d123      	bne.n	800600e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	08da      	lsrs	r2, r3, #3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3208      	adds	r2, #8
 8005fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	220f      	movs	r2, #15
 8005fde:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	691a      	ldr	r2, [r3, #16]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	08da      	lsrs	r2, r3, #3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3208      	adds	r2, #8
 8006008:	6939      	ldr	r1, [r7, #16]
 800600a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	2203      	movs	r2, #3
 800601a:	fa02 f303 	lsl.w	r3, r2, r3
 800601e:	43db      	mvns	r3, r3
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	4013      	ands	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f003 0203 	and.w	r2, r3, #3
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	fa02 f303 	lsl.w	r3, r2, r3
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 80a6 	beq.w	800619c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006050:	4b5b      	ldr	r3, [pc, #364]	@ (80061c0 <HAL_GPIO_Init+0x2e4>)
 8006052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006054:	4a5a      	ldr	r2, [pc, #360]	@ (80061c0 <HAL_GPIO_Init+0x2e4>)
 8006056:	f043 0301 	orr.w	r3, r3, #1
 800605a:	6613      	str	r3, [r2, #96]	@ 0x60
 800605c:	4b58      	ldr	r3, [pc, #352]	@ (80061c0 <HAL_GPIO_Init+0x2e4>)
 800605e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	60bb      	str	r3, [r7, #8]
 8006066:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006068:	4a56      	ldr	r2, [pc, #344]	@ (80061c4 <HAL_GPIO_Init+0x2e8>)
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	089b      	lsrs	r3, r3, #2
 800606e:	3302      	adds	r3, #2
 8006070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006074:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f003 0303 	and.w	r3, r3, #3
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	220f      	movs	r2, #15
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	43db      	mvns	r3, r3
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	4013      	ands	r3, r2
 800608a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006092:	d01f      	beq.n	80060d4 <HAL_GPIO_Init+0x1f8>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a4c      	ldr	r2, [pc, #304]	@ (80061c8 <HAL_GPIO_Init+0x2ec>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d019      	beq.n	80060d0 <HAL_GPIO_Init+0x1f4>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a4b      	ldr	r2, [pc, #300]	@ (80061cc <HAL_GPIO_Init+0x2f0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d013      	beq.n	80060cc <HAL_GPIO_Init+0x1f0>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a4a      	ldr	r2, [pc, #296]	@ (80061d0 <HAL_GPIO_Init+0x2f4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00d      	beq.n	80060c8 <HAL_GPIO_Init+0x1ec>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a49      	ldr	r2, [pc, #292]	@ (80061d4 <HAL_GPIO_Init+0x2f8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d007      	beq.n	80060c4 <HAL_GPIO_Init+0x1e8>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a48      	ldr	r2, [pc, #288]	@ (80061d8 <HAL_GPIO_Init+0x2fc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d101      	bne.n	80060c0 <HAL_GPIO_Init+0x1e4>
 80060bc:	2305      	movs	r3, #5
 80060be:	e00a      	b.n	80060d6 <HAL_GPIO_Init+0x1fa>
 80060c0:	2306      	movs	r3, #6
 80060c2:	e008      	b.n	80060d6 <HAL_GPIO_Init+0x1fa>
 80060c4:	2304      	movs	r3, #4
 80060c6:	e006      	b.n	80060d6 <HAL_GPIO_Init+0x1fa>
 80060c8:	2303      	movs	r3, #3
 80060ca:	e004      	b.n	80060d6 <HAL_GPIO_Init+0x1fa>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e002      	b.n	80060d6 <HAL_GPIO_Init+0x1fa>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e000      	b.n	80060d6 <HAL_GPIO_Init+0x1fa>
 80060d4:	2300      	movs	r3, #0
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	f002 0203 	and.w	r2, r2, #3
 80060dc:	0092      	lsls	r2, r2, #2
 80060de:	4093      	lsls	r3, r2
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060e6:	4937      	ldr	r1, [pc, #220]	@ (80061c4 <HAL_GPIO_Init+0x2e8>)
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	089b      	lsrs	r3, r3, #2
 80060ec:	3302      	adds	r3, #2
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060f4:	4b39      	ldr	r3, [pc, #228]	@ (80061dc <HAL_GPIO_Init+0x300>)
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	43db      	mvns	r3, r3
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4013      	ands	r3, r2
 8006102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006118:	4a30      	ldr	r2, [pc, #192]	@ (80061dc <HAL_GPIO_Init+0x300>)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800611e:	4b2f      	ldr	r3, [pc, #188]	@ (80061dc <HAL_GPIO_Init+0x300>)
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	43db      	mvns	r3, r3
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4013      	ands	r3, r2
 800612c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4313      	orrs	r3, r2
 8006140:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006142:	4a26      	ldr	r2, [pc, #152]	@ (80061dc <HAL_GPIO_Init+0x300>)
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006148:	4b24      	ldr	r3, [pc, #144]	@ (80061dc <HAL_GPIO_Init+0x300>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	43db      	mvns	r3, r3
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4013      	ands	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800616c:	4a1b      	ldr	r2, [pc, #108]	@ (80061dc <HAL_GPIO_Init+0x300>)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006172:	4b1a      	ldr	r3, [pc, #104]	@ (80061dc <HAL_GPIO_Init+0x300>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	43db      	mvns	r3, r3
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4013      	ands	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006196:	4a11      	ldr	r2, [pc, #68]	@ (80061dc <HAL_GPIO_Init+0x300>)
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	3301      	adds	r3, #1
 80061a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	fa22 f303 	lsr.w	r3, r2, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f47f ae9d 	bne.w	8005eec <HAL_GPIO_Init+0x10>
  }
}
 80061b2:	bf00      	nop
 80061b4:	bf00      	nop
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	40021000 	.word	0x40021000
 80061c4:	40010000 	.word	0x40010000
 80061c8:	48000400 	.word	0x48000400
 80061cc:	48000800 	.word	0x48000800
 80061d0:	48000c00 	.word	0x48000c00
 80061d4:	48001000 	.word	0x48001000
 80061d8:	48001400 	.word	0x48001400
 80061dc:	40010400 	.word	0x40010400

080061e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80061ee:	e0bd      	b.n	800636c <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80061f0:	2201      	movs	r2, #1
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	4013      	ands	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 80b0 	beq.w	8006366 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8006206:	4a60      	ldr	r2, [pc, #384]	@ (8006388 <HAL_GPIO_DeInit+0x1a8>)
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	089b      	lsrs	r3, r3, #2
 800620c:	3302      	adds	r3, #2
 800620e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006212:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	220f      	movs	r2, #15
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	4013      	ands	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800622e:	d01f      	beq.n	8006270 <HAL_GPIO_DeInit+0x90>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a56      	ldr	r2, [pc, #344]	@ (800638c <HAL_GPIO_DeInit+0x1ac>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d019      	beq.n	800626c <HAL_GPIO_DeInit+0x8c>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a55      	ldr	r2, [pc, #340]	@ (8006390 <HAL_GPIO_DeInit+0x1b0>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d013      	beq.n	8006268 <HAL_GPIO_DeInit+0x88>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a54      	ldr	r2, [pc, #336]	@ (8006394 <HAL_GPIO_DeInit+0x1b4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d00d      	beq.n	8006264 <HAL_GPIO_DeInit+0x84>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a53      	ldr	r2, [pc, #332]	@ (8006398 <HAL_GPIO_DeInit+0x1b8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d007      	beq.n	8006260 <HAL_GPIO_DeInit+0x80>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a52      	ldr	r2, [pc, #328]	@ (800639c <HAL_GPIO_DeInit+0x1bc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d101      	bne.n	800625c <HAL_GPIO_DeInit+0x7c>
 8006258:	2305      	movs	r3, #5
 800625a:	e00a      	b.n	8006272 <HAL_GPIO_DeInit+0x92>
 800625c:	2306      	movs	r3, #6
 800625e:	e008      	b.n	8006272 <HAL_GPIO_DeInit+0x92>
 8006260:	2304      	movs	r3, #4
 8006262:	e006      	b.n	8006272 <HAL_GPIO_DeInit+0x92>
 8006264:	2303      	movs	r3, #3
 8006266:	e004      	b.n	8006272 <HAL_GPIO_DeInit+0x92>
 8006268:	2302      	movs	r3, #2
 800626a:	e002      	b.n	8006272 <HAL_GPIO_DeInit+0x92>
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <HAL_GPIO_DeInit+0x92>
 8006270:	2300      	movs	r3, #0
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	f002 0203 	and.w	r2, r2, #3
 8006278:	0092      	lsls	r2, r2, #2
 800627a:	4093      	lsls	r3, r2
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	429a      	cmp	r2, r3
 8006280:	d132      	bne.n	80062e8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006282:	4b47      	ldr	r3, [pc, #284]	@ (80063a0 <HAL_GPIO_DeInit+0x1c0>)
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	43db      	mvns	r3, r3
 800628a:	4945      	ldr	r1, [pc, #276]	@ (80063a0 <HAL_GPIO_DeInit+0x1c0>)
 800628c:	4013      	ands	r3, r2
 800628e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006290:	4b43      	ldr	r3, [pc, #268]	@ (80063a0 <HAL_GPIO_DeInit+0x1c0>)
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	43db      	mvns	r3, r3
 8006298:	4941      	ldr	r1, [pc, #260]	@ (80063a0 <HAL_GPIO_DeInit+0x1c0>)
 800629a:	4013      	ands	r3, r2
 800629c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800629e:	4b40      	ldr	r3, [pc, #256]	@ (80063a0 <HAL_GPIO_DeInit+0x1c0>)
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	43db      	mvns	r3, r3
 80062a6:	493e      	ldr	r1, [pc, #248]	@ (80063a0 <HAL_GPIO_DeInit+0x1c0>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80062ac:	4b3c      	ldr	r3, [pc, #240]	@ (80063a0 <HAL_GPIO_DeInit+0x1c0>)
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	43db      	mvns	r3, r3
 80062b4:	493a      	ldr	r1, [pc, #232]	@ (80063a0 <HAL_GPIO_DeInit+0x1c0>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f003 0303 	and.w	r3, r3, #3
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	220f      	movs	r2, #15
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80062ca:	4a2f      	ldr	r2, [pc, #188]	@ (8006388 <HAL_GPIO_DeInit+0x1a8>)
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	089b      	lsrs	r3, r3, #2
 80062d0:	3302      	adds	r3, #2
 80062d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	43da      	mvns	r2, r3
 80062da:	482b      	ldr	r0, [pc, #172]	@ (8006388 <HAL_GPIO_DeInit+0x1a8>)
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	089b      	lsrs	r3, r3, #2
 80062e0:	400a      	ands	r2, r1
 80062e2:	3302      	adds	r3, #2
 80062e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	2103      	movs	r1, #3
 80062f2:	fa01 f303 	lsl.w	r3, r1, r3
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	08da      	lsrs	r2, r3, #3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3208      	adds	r2, #8
 8006304:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	220f      	movs	r2, #15
 8006312:	fa02 f303 	lsl.w	r3, r2, r3
 8006316:	43db      	mvns	r3, r3
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	08d2      	lsrs	r2, r2, #3
 800631c:	4019      	ands	r1, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3208      	adds	r2, #8
 8006322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	2103      	movs	r1, #3
 8006330:	fa01 f303 	lsl.w	r3, r1, r3
 8006334:	43db      	mvns	r3, r3
 8006336:	401a      	ands	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	2101      	movs	r1, #1
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	fa01 f303 	lsl.w	r3, r1, r3
 8006348:	43db      	mvns	r3, r3
 800634a:	401a      	ands	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	2103      	movs	r1, #3
 800635a:	fa01 f303 	lsl.w	r3, r1, r3
 800635e:	43db      	mvns	r3, r3
 8006360:	401a      	ands	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	3301      	adds	r3, #1
 800636a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	fa22 f303 	lsr.w	r3, r2, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	f47f af3b 	bne.w	80061f0 <HAL_GPIO_DeInit+0x10>
  }
}
 800637a:	bf00      	nop
 800637c:	bf00      	nop
 800637e:	371c      	adds	r7, #28
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	40010000 	.word	0x40010000
 800638c:	48000400 	.word	0x48000400
 8006390:	48000800 	.word	0x48000800
 8006394:	48000c00 	.word	0x48000c00
 8006398:	48001000 	.word	0x48001000
 800639c:	48001400 	.word	0x48001400
 80063a0:	40010400 	.word	0x40010400

080063a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	887b      	ldrh	r3, [r7, #2]
 80063b6:	4013      	ands	r3, r2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063bc:	2301      	movs	r3, #1
 80063be:	73fb      	strb	r3, [r7, #15]
 80063c0:	e001      	b.n	80063c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063c2:	2300      	movs	r3, #0
 80063c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	807b      	strh	r3, [r7, #2]
 80063e0:	4613      	mov	r3, r2
 80063e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063e4:	787b      	ldrb	r3, [r7, #1]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80063ea:	887a      	ldrh	r2, [r7, #2]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80063f0:	e002      	b.n	80063f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80063f2:	887a      	ldrh	r2, [r7, #2]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006416:	887a      	ldrh	r2, [r7, #2]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4013      	ands	r3, r2
 800641c:	041a      	lsls	r2, r3, #16
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	43d9      	mvns	r1, r3
 8006422:	887b      	ldrh	r3, [r7, #2]
 8006424:	400b      	ands	r3, r1
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	619a      	str	r2, [r3, #24]
}
 800642c:	bf00      	nop
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006442:	4b08      	ldr	r3, [pc, #32]	@ (8006464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006444:	695a      	ldr	r2, [r3, #20]
 8006446:	88fb      	ldrh	r3, [r7, #6]
 8006448:	4013      	ands	r3, r2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d006      	beq.n	800645c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800644e:	4a05      	ldr	r2, [pc, #20]	@ (8006464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006450:	88fb      	ldrh	r3, [r7, #6]
 8006452:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f806 	bl	8006468 <HAL_GPIO_EXTI_Callback>
  }
}
 800645c:	bf00      	nop
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40010400 	.word	0x40010400

08006468 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b082      	sub	sp, #8
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e08d      	b.n	80065ac <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d106      	bne.n	80064aa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7fc fb65 	bl	8002b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2224      	movs	r2, #36	@ 0x24
 80064ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0201 	bic.w	r2, r2, #1
 80064c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80064ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80064de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d107      	bne.n	80064f8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064f4:	609a      	str	r2, [r3, #8]
 80064f6:	e006      	b.n	8006506 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006504:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	2b02      	cmp	r3, #2
 800650c:	d108      	bne.n	8006520 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800651c:	605a      	str	r2, [r3, #4]
 800651e:	e007      	b.n	8006530 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800652e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800653e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006542:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006552:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691a      	ldr	r2, [r3, #16]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	69d9      	ldr	r1, [r3, #28]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1a      	ldr	r2, [r3, #32]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0201 	orr.w	r2, r2, #1
 800658c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2220      	movs	r2, #32
 8006598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e021      	b.n	800660a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2224      	movs	r2, #36	@ 0x24
 80065ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 0201 	bic.w	r2, r2, #1
 80065dc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7fc fb22 	bl	8002c28 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af02      	add	r7, sp, #8
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	4608      	mov	r0, r1
 800661e:	4611      	mov	r1, r2
 8006620:	461a      	mov	r2, r3
 8006622:	4603      	mov	r3, r0
 8006624:	817b      	strh	r3, [r7, #10]
 8006626:	460b      	mov	r3, r1
 8006628:	813b      	strh	r3, [r7, #8]
 800662a:	4613      	mov	r3, r2
 800662c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b20      	cmp	r3, #32
 8006638:	f040 80f9 	bne.w	800682e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <HAL_I2C_Mem_Write+0x34>
 8006642:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006644:	2b00      	cmp	r3, #0
 8006646:	d105      	bne.n	8006654 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800664e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e0ed      	b.n	8006830 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800665a:	2b01      	cmp	r3, #1
 800665c:	d101      	bne.n	8006662 <HAL_I2C_Mem_Write+0x4e>
 800665e:	2302      	movs	r3, #2
 8006660:	e0e6      	b.n	8006830 <HAL_I2C_Mem_Write+0x21c>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800666a:	f7fd f8d7 	bl	800381c <HAL_GetTick>
 800666e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	2319      	movs	r3, #25
 8006676:	2201      	movs	r2, #1
 8006678:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 facf 	bl	8006c20 <I2C_WaitOnFlagUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e0d1      	b.n	8006830 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2221      	movs	r2, #33	@ 0x21
 8006690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2240      	movs	r2, #64	@ 0x40
 8006698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a3a      	ldr	r2, [r7, #32]
 80066a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80066ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066b4:	88f8      	ldrh	r0, [r7, #6]
 80066b6:	893a      	ldrh	r2, [r7, #8]
 80066b8:	8979      	ldrh	r1, [r7, #10]
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	9301      	str	r3, [sp, #4]
 80066be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	4603      	mov	r3, r0
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 f9df 	bl	8006a88 <I2C_RequestMemoryWrite>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d005      	beq.n	80066dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e0a9      	b.n	8006830 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	2bff      	cmp	r3, #255	@ 0xff
 80066e4:	d90e      	bls.n	8006704 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	22ff      	movs	r2, #255	@ 0xff
 80066ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	8979      	ldrh	r1, [r7, #10]
 80066f4:	2300      	movs	r3, #0
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 fc53 	bl	8006fa8 <I2C_TransferConfig>
 8006702:	e00f      	b.n	8006724 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006708:	b29a      	uxth	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006712:	b2da      	uxtb	r2, r3
 8006714:	8979      	ldrh	r1, [r7, #10]
 8006716:	2300      	movs	r3, #0
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 fc42 	bl	8006fa8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 fad2 	bl	8006cd2 <I2C_WaitOnTXISFlagUntilTimeout>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e07b      	b.n	8006830 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673c:	781a      	ldrb	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006760:	3b01      	subs	r3, #1
 8006762:	b29a      	uxth	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800676c:	b29b      	uxth	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d034      	beq.n	80067dc <HAL_I2C_Mem_Write+0x1c8>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006776:	2b00      	cmp	r3, #0
 8006778:	d130      	bne.n	80067dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006780:	2200      	movs	r2, #0
 8006782:	2180      	movs	r1, #128	@ 0x80
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 fa4b 	bl	8006c20 <I2C_WaitOnFlagUntilTimeout>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e04d      	b.n	8006830 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006798:	b29b      	uxth	r3, r3
 800679a:	2bff      	cmp	r3, #255	@ 0xff
 800679c:	d90e      	bls.n	80067bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	22ff      	movs	r2, #255	@ 0xff
 80067a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	8979      	ldrh	r1, [r7, #10]
 80067ac:	2300      	movs	r3, #0
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 fbf7 	bl	8006fa8 <I2C_TransferConfig>
 80067ba:	e00f      	b.n	80067dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	8979      	ldrh	r1, [r7, #10]
 80067ce:	2300      	movs	r3, #0
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 fbe6 	bl	8006fa8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d19e      	bne.n	8006724 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 fab8 	bl	8006d60 <I2C_WaitOnSTOPFlagUntilTimeout>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e01a      	b.n	8006830 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2220      	movs	r2, #32
 8006800:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6859      	ldr	r1, [r3, #4]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	4b0a      	ldr	r3, [pc, #40]	@ (8006838 <HAL_I2C_Mem_Write+0x224>)
 800680e:	400b      	ands	r3, r1
 8006810:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2220      	movs	r2, #32
 8006816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	e000      	b.n	8006830 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800682e:	2302      	movs	r3, #2
  }
}
 8006830:	4618      	mov	r0, r3
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	fe00e800 	.word	0xfe00e800

0800683c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b088      	sub	sp, #32
 8006840:	af02      	add	r7, sp, #8
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	4608      	mov	r0, r1
 8006846:	4611      	mov	r1, r2
 8006848:	461a      	mov	r2, r3
 800684a:	4603      	mov	r3, r0
 800684c:	817b      	strh	r3, [r7, #10]
 800684e:	460b      	mov	r3, r1
 8006850:	813b      	strh	r3, [r7, #8]
 8006852:	4613      	mov	r3, r2
 8006854:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b20      	cmp	r3, #32
 8006860:	f040 80fd 	bne.w	8006a5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <HAL_I2C_Mem_Read+0x34>
 800686a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800686c:	2b00      	cmp	r3, #0
 800686e:	d105      	bne.n	800687c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006876:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e0f1      	b.n	8006a60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006882:	2b01      	cmp	r3, #1
 8006884:	d101      	bne.n	800688a <HAL_I2C_Mem_Read+0x4e>
 8006886:	2302      	movs	r3, #2
 8006888:	e0ea      	b.n	8006a60 <HAL_I2C_Mem_Read+0x224>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006892:	f7fc ffc3 	bl	800381c <HAL_GetTick>
 8006896:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	2319      	movs	r3, #25
 800689e:	2201      	movs	r2, #1
 80068a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 f9bb 	bl	8006c20 <I2C_WaitOnFlagUntilTimeout>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e0d5      	b.n	8006a60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2222      	movs	r2, #34	@ 0x22
 80068b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2240      	movs	r2, #64	@ 0x40
 80068c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a3a      	ldr	r2, [r7, #32]
 80068ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80068d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068dc:	88f8      	ldrh	r0, [r7, #6]
 80068de:	893a      	ldrh	r2, [r7, #8]
 80068e0:	8979      	ldrh	r1, [r7, #10]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	9301      	str	r3, [sp, #4]
 80068e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	4603      	mov	r3, r0
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 f91f 	bl	8006b30 <I2C_RequestMemoryRead>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d005      	beq.n	8006904 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e0ad      	b.n	8006a60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006908:	b29b      	uxth	r3, r3
 800690a:	2bff      	cmp	r3, #255	@ 0xff
 800690c:	d90e      	bls.n	800692c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	22ff      	movs	r2, #255	@ 0xff
 8006912:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006918:	b2da      	uxtb	r2, r3
 800691a:	8979      	ldrh	r1, [r7, #10]
 800691c:	4b52      	ldr	r3, [pc, #328]	@ (8006a68 <HAL_I2C_Mem_Read+0x22c>)
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 fb3f 	bl	8006fa8 <I2C_TransferConfig>
 800692a:	e00f      	b.n	800694c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006930:	b29a      	uxth	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800693a:	b2da      	uxtb	r2, r3
 800693c:	8979      	ldrh	r1, [r7, #10]
 800693e:	4b4a      	ldr	r3, [pc, #296]	@ (8006a68 <HAL_I2C_Mem_Read+0x22c>)
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 fb2e 	bl	8006fa8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006952:	2200      	movs	r2, #0
 8006954:	2104      	movs	r1, #4
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 f962 	bl	8006c20 <I2C_WaitOnFlagUntilTimeout>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e07c      	b.n	8006a60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006982:	3b01      	subs	r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800698e:	b29b      	uxth	r3, r3
 8006990:	3b01      	subs	r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d034      	beq.n	8006a0c <HAL_I2C_Mem_Read+0x1d0>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d130      	bne.n	8006a0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b0:	2200      	movs	r2, #0
 80069b2:	2180      	movs	r1, #128	@ 0x80
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f933 	bl	8006c20 <I2C_WaitOnFlagUntilTimeout>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e04d      	b.n	8006a60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	2bff      	cmp	r3, #255	@ 0xff
 80069cc:	d90e      	bls.n	80069ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	22ff      	movs	r2, #255	@ 0xff
 80069d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	8979      	ldrh	r1, [r7, #10]
 80069dc:	2300      	movs	r3, #0
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 fadf 	bl	8006fa8 <I2C_TransferConfig>
 80069ea:	e00f      	b.n	8006a0c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	8979      	ldrh	r1, [r7, #10]
 80069fe:	2300      	movs	r3, #0
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 face 	bl	8006fa8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d19a      	bne.n	800694c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 f9a0 	bl	8006d60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e01a      	b.n	8006a60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6859      	ldr	r1, [r3, #4]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a6c <HAL_I2C_Mem_Read+0x230>)
 8006a3e:	400b      	ands	r3, r1
 8006a40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e000      	b.n	8006a60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006a5e:	2302      	movs	r3, #2
  }
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	80002400 	.word	0x80002400
 8006a6c:	fe00e800 	.word	0xfe00e800

08006a70 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af02      	add	r7, sp, #8
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	4608      	mov	r0, r1
 8006a92:	4611      	mov	r1, r2
 8006a94:	461a      	mov	r2, r3
 8006a96:	4603      	mov	r3, r0
 8006a98:	817b      	strh	r3, [r7, #10]
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	813b      	strh	r3, [r7, #8]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006aa2:	88fb      	ldrh	r3, [r7, #6]
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	8979      	ldrh	r1, [r7, #10]
 8006aa8:	4b20      	ldr	r3, [pc, #128]	@ (8006b2c <I2C_RequestMemoryWrite+0xa4>)
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 fa79 	bl	8006fa8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ab6:	69fa      	ldr	r2, [r7, #28]
 8006ab8:	69b9      	ldr	r1, [r7, #24]
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 f909 	bl	8006cd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e02c      	b.n	8006b24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d105      	bne.n	8006adc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ad0:	893b      	ldrh	r3, [r7, #8]
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ada:	e015      	b.n	8006b08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006adc:	893b      	ldrh	r3, [r7, #8]
 8006ade:	0a1b      	lsrs	r3, r3, #8
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	69b9      	ldr	r1, [r7, #24]
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 f8ef 	bl	8006cd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e012      	b.n	8006b24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006afe:	893b      	ldrh	r3, [r7, #8]
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2180      	movs	r1, #128	@ 0x80
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 f884 	bl	8006c20 <I2C_WaitOnFlagUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	80002000 	.word	0x80002000

08006b30 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	4608      	mov	r0, r1
 8006b3a:	4611      	mov	r1, r2
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	4603      	mov	r3, r0
 8006b40:	817b      	strh	r3, [r7, #10]
 8006b42:	460b      	mov	r3, r1
 8006b44:	813b      	strh	r3, [r7, #8]
 8006b46:	4613      	mov	r3, r2
 8006b48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006b4a:	88fb      	ldrh	r3, [r7, #6]
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	8979      	ldrh	r1, [r7, #10]
 8006b50:	4b20      	ldr	r3, [pc, #128]	@ (8006bd4 <I2C_RequestMemoryRead+0xa4>)
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	2300      	movs	r3, #0
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 fa26 	bl	8006fa8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b5c:	69fa      	ldr	r2, [r7, #28]
 8006b5e:	69b9      	ldr	r1, [r7, #24]
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 f8b6 	bl	8006cd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e02c      	b.n	8006bca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b70:	88fb      	ldrh	r3, [r7, #6]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d105      	bne.n	8006b82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b76:	893b      	ldrh	r3, [r7, #8]
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b80:	e015      	b.n	8006bae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b82:	893b      	ldrh	r3, [r7, #8]
 8006b84:	0a1b      	lsrs	r3, r3, #8
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b90:	69fa      	ldr	r2, [r7, #28]
 8006b92:	69b9      	ldr	r1, [r7, #24]
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f89c 	bl	8006cd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e012      	b.n	8006bca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ba4:	893b      	ldrh	r3, [r7, #8]
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2140      	movs	r1, #64	@ 0x40
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f831 	bl	8006c20 <I2C_WaitOnFlagUntilTimeout>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e000      	b.n	8006bca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	80002000 	.word	0x80002000

08006bd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d103      	bne.n	8006bf6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d007      	beq.n	8006c14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699a      	ldr	r2, [r3, #24]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 0201 	orr.w	r2, r2, #1
 8006c12:	619a      	str	r2, [r3, #24]
  }
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c30:	e03b      	b.n	8006caa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 f8d6 	bl	8006de8 <I2C_IsErrorOccurred>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e041      	b.n	8006cca <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c4c:	d02d      	beq.n	8006caa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c4e:	f7fc fde5 	bl	800381c <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d302      	bcc.n	8006c64 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d122      	bne.n	8006caa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699a      	ldr	r2, [r3, #24]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	bf0c      	ite	eq
 8006c74:	2301      	moveq	r3, #1
 8006c76:	2300      	movne	r3, #0
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d113      	bne.n	8006caa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c86:	f043 0220 	orr.w	r2, r3, #32
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e00f      	b.n	8006cca <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	699a      	ldr	r2, [r3, #24]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	bf0c      	ite	eq
 8006cba:	2301      	moveq	r3, #1
 8006cbc:	2300      	movne	r3, #0
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	79fb      	ldrb	r3, [r7, #7]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d0b4      	beq.n	8006c32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	60f8      	str	r0, [r7, #12]
 8006cda:	60b9      	str	r1, [r7, #8]
 8006cdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006cde:	e033      	b.n	8006d48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f87f 	bl	8006de8 <I2C_IsErrorOccurred>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e031      	b.n	8006d58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cfa:	d025      	beq.n	8006d48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cfc:	f7fc fd8e 	bl	800381c <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d302      	bcc.n	8006d12 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d11a      	bne.n	8006d48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d013      	beq.n	8006d48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d24:	f043 0220 	orr.w	r2, r3, #32
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e007      	b.n	8006d58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d1c4      	bne.n	8006ce0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d6c:	e02f      	b.n	8006dce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	68b9      	ldr	r1, [r7, #8]
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f000 f838 	bl	8006de8 <I2C_IsErrorOccurred>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e02d      	b.n	8006dde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d82:	f7fc fd4b 	bl	800381c <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d302      	bcc.n	8006d98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d11a      	bne.n	8006dce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	d013      	beq.n	8006dce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006daa:	f043 0220 	orr.w	r2, r3, #32
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2220      	movs	r2, #32
 8006db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e007      	b.n	8006dde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	f003 0320 	and.w	r3, r3, #32
 8006dd8:	2b20      	cmp	r3, #32
 8006dda:	d1c8      	bne.n	8006d6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
	...

08006de8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08a      	sub	sp, #40	@ 0x28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d068      	beq.n	8006ee6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2210      	movs	r2, #16
 8006e1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e1c:	e049      	b.n	8006eb2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e24:	d045      	beq.n	8006eb2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006e26:	f7fc fcf9 	bl	800381c <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d302      	bcc.n	8006e3c <I2C_IsErrorOccurred+0x54>
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d13a      	bne.n	8006eb2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e5e:	d121      	bne.n	8006ea4 <I2C_IsErrorOccurred+0xbc>
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e66:	d01d      	beq.n	8006ea4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006e68:	7cfb      	ldrb	r3, [r7, #19]
 8006e6a:	2b20      	cmp	r3, #32
 8006e6c:	d01a      	beq.n	8006ea4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e7c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006e7e:	f7fc fccd 	bl	800381c <HAL_GetTick>
 8006e82:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e84:	e00e      	b.n	8006ea4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006e86:	f7fc fcc9 	bl	800381c <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b19      	cmp	r3, #25
 8006e92:	d907      	bls.n	8006ea4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	f043 0320 	orr.w	r3, r3, #32
 8006e9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006ea2:	e006      	b.n	8006eb2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	f003 0320 	and.w	r3, r3, #32
 8006eae:	2b20      	cmp	r3, #32
 8006eb0:	d1e9      	bne.n	8006e86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	f003 0320 	and.w	r3, r3, #32
 8006ebc:	2b20      	cmp	r3, #32
 8006ebe:	d003      	beq.n	8006ec8 <I2C_IsErrorOccurred+0xe0>
 8006ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0aa      	beq.n	8006e1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d103      	bne.n	8006ed8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	f043 0304 	orr.w	r3, r3, #4
 8006ede:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00b      	beq.n	8006f10 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	f043 0301 	orr.w	r3, r3, #1
 8006efe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00b      	beq.n	8006f32 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	f043 0308 	orr.w	r3, r3, #8
 8006f20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006f2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00b      	beq.n	8006f54 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	f043 0302 	orr.w	r3, r3, #2
 8006f42:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006f54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d01c      	beq.n	8006f96 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f7ff fe3b 	bl	8006bd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6859      	ldr	r1, [r3, #4]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006fa4 <I2C_IsErrorOccurred+0x1bc>)
 8006f6e:	400b      	ands	r3, r1
 8006f70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2220      	movs	r2, #32
 8006f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006f96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3728      	adds	r7, #40	@ 0x28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	fe00e800 	.word	0xfe00e800

08006fa8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	607b      	str	r3, [r7, #4]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	817b      	strh	r3, [r7, #10]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fba:	897b      	ldrh	r3, [r7, #10]
 8006fbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006fc0:	7a7b      	ldrb	r3, [r7, #9]
 8006fc2:	041b      	lsls	r3, r3, #16
 8006fc4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fc8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006fd6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	0d5b      	lsrs	r3, r3, #21
 8006fe2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006fe6:	4b08      	ldr	r3, [pc, #32]	@ (8007008 <I2C_TransferConfig+0x60>)
 8006fe8:	430b      	orrs	r3, r1
 8006fea:	43db      	mvns	r3, r3
 8006fec:	ea02 0103 	and.w	r1, r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	03ff63ff 	.word	0x03ff63ff

0800700c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b20      	cmp	r3, #32
 8007020:	d138      	bne.n	8007094 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007028:	2b01      	cmp	r3, #1
 800702a:	d101      	bne.n	8007030 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800702c:	2302      	movs	r3, #2
 800702e:	e032      	b.n	8007096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2224      	movs	r2, #36	@ 0x24
 800703c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0201 	bic.w	r2, r2, #1
 800704e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800705e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6819      	ldr	r1, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0201 	orr.w	r2, r2, #1
 800707e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2220      	movs	r2, #32
 8007084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	e000      	b.n	8007096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007094:	2302      	movs	r3, #2
  }
}
 8007096:	4618      	mov	r0, r3
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b085      	sub	sp, #20
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	d139      	bne.n	800712c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80070c2:	2302      	movs	r3, #2
 80070c4:	e033      	b.n	800712e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2224      	movs	r2, #36	@ 0x24
 80070d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0201 	bic.w	r2, r2, #1
 80070e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80070f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	021b      	lsls	r3, r3, #8
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0201 	orr.w	r2, r2, #1
 8007116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2220      	movs	r2, #32
 800711c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	e000      	b.n	800712e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800712c:	2302      	movs	r3, #2
  }
}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e041      	b.n	80071d0 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8007154:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f245 5255 	movw	r2, #21845	@ 0x5555
 800715e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6852      	ldr	r2, [r2, #4]
 8007168:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6892      	ldr	r2, [r2, #8]
 8007172:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007174:	f7fc fb52 	bl	800381c <HAL_GetTick>
 8007178:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800717a:	e00f      	b.n	800719c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800717c:	f7fc fb4e 	bl	800381c <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b31      	cmp	r3, #49	@ 0x31
 8007188:	d908      	bls.n	800719c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f003 0307 	and.w	r3, r3, #7
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e019      	b.n	80071d0 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1e8      	bne.n	800717c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	691a      	ldr	r2, [r3, #16]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d005      	beq.n	80071c4 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	68d2      	ldr	r2, [r2, #12]
 80071c0:	611a      	str	r2, [r3, #16]
 80071c2:	e004      	b.n	80071ce <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80071cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80071e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d141      	bne.n	800728a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007206:	4b4b      	ldr	r3, [pc, #300]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800720e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007212:	d131      	bne.n	8007278 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007214:	4b47      	ldr	r3, [pc, #284]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800721a:	4a46      	ldr	r2, [pc, #280]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800721c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007220:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007224:	4b43      	ldr	r3, [pc, #268]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800722c:	4a41      	ldr	r2, [pc, #260]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800722e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007232:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007234:	4b40      	ldr	r3, [pc, #256]	@ (8007338 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2232      	movs	r2, #50	@ 0x32
 800723a:	fb02 f303 	mul.w	r3, r2, r3
 800723e:	4a3f      	ldr	r2, [pc, #252]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007240:	fba2 2303 	umull	r2, r3, r2, r3
 8007244:	0c9b      	lsrs	r3, r3, #18
 8007246:	3301      	adds	r3, #1
 8007248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800724a:	e002      	b.n	8007252 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	3b01      	subs	r3, #1
 8007250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007252:	4b38      	ldr	r3, [pc, #224]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800725a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800725e:	d102      	bne.n	8007266 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1f2      	bne.n	800724c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007266:	4b33      	ldr	r3, [pc, #204]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800726e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007272:	d158      	bne.n	8007326 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e057      	b.n	8007328 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007278:	4b2e      	ldr	r3, [pc, #184]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800727a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800727e:	4a2d      	ldr	r2, [pc, #180]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007284:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007288:	e04d      	b.n	8007326 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007290:	d141      	bne.n	8007316 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007292:	4b28      	ldr	r3, [pc, #160]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800729a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800729e:	d131      	bne.n	8007304 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072a0:	4b24      	ldr	r3, [pc, #144]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072a6:	4a23      	ldr	r2, [pc, #140]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80072b0:	4b20      	ldr	r3, [pc, #128]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80072b8:	4a1e      	ldr	r2, [pc, #120]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80072be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80072c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007338 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2232      	movs	r2, #50	@ 0x32
 80072c6:	fb02 f303 	mul.w	r3, r2, r3
 80072ca:	4a1c      	ldr	r2, [pc, #112]	@ (800733c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80072cc:	fba2 2303 	umull	r2, r3, r2, r3
 80072d0:	0c9b      	lsrs	r3, r3, #18
 80072d2:	3301      	adds	r3, #1
 80072d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072d6:	e002      	b.n	80072de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3b01      	subs	r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072de:	4b15      	ldr	r3, [pc, #84]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072ea:	d102      	bne.n	80072f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1f2      	bne.n	80072d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80072f2:	4b10      	ldr	r3, [pc, #64]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072fe:	d112      	bne.n	8007326 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e011      	b.n	8007328 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007304:	4b0b      	ldr	r3, [pc, #44]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800730a:	4a0a      	ldr	r2, [pc, #40]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800730c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007310:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007314:	e007      	b.n	8007326 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007316:	4b07      	ldr	r3, [pc, #28]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800731e:	4a05      	ldr	r2, [pc, #20]	@ (8007334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007320:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007324:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	40007000 	.word	0x40007000
 8007338:	20000004 	.word	0x20000004
 800733c:	431bde83 	.word	0x431bde83

08007340 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007344:	4b05      	ldr	r3, [pc, #20]	@ (800735c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	4a04      	ldr	r2, [pc, #16]	@ (800735c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800734a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800734e:	6093      	str	r3, [r2, #8]
}
 8007350:	bf00      	nop
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40007000 	.word	0x40007000

08007360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b088      	sub	sp, #32
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e2fe      	b.n	8007970 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d075      	beq.n	800746a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800737e:	4b97      	ldr	r3, [pc, #604]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f003 030c 	and.w	r3, r3, #12
 8007386:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007388:	4b94      	ldr	r3, [pc, #592]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f003 0303 	and.w	r3, r3, #3
 8007390:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	2b0c      	cmp	r3, #12
 8007396:	d102      	bne.n	800739e <HAL_RCC_OscConfig+0x3e>
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	2b03      	cmp	r3, #3
 800739c:	d002      	beq.n	80073a4 <HAL_RCC_OscConfig+0x44>
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d10b      	bne.n	80073bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073a4:	4b8d      	ldr	r3, [pc, #564]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d05b      	beq.n	8007468 <HAL_RCC_OscConfig+0x108>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d157      	bne.n	8007468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e2d9      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073c4:	d106      	bne.n	80073d4 <HAL_RCC_OscConfig+0x74>
 80073c6:	4b85      	ldr	r3, [pc, #532]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a84      	ldr	r2, [pc, #528]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 80073cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073d0:	6013      	str	r3, [r2, #0]
 80073d2:	e01d      	b.n	8007410 <HAL_RCC_OscConfig+0xb0>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073dc:	d10c      	bne.n	80073f8 <HAL_RCC_OscConfig+0x98>
 80073de:	4b7f      	ldr	r3, [pc, #508]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a7e      	ldr	r2, [pc, #504]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 80073e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	4b7c      	ldr	r3, [pc, #496]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a7b      	ldr	r2, [pc, #492]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 80073f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073f4:	6013      	str	r3, [r2, #0]
 80073f6:	e00b      	b.n	8007410 <HAL_RCC_OscConfig+0xb0>
 80073f8:	4b78      	ldr	r3, [pc, #480]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a77      	ldr	r2, [pc, #476]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 80073fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	4b75      	ldr	r3, [pc, #468]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a74      	ldr	r2, [pc, #464]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 800740a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800740e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d013      	beq.n	8007440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007418:	f7fc fa00 	bl	800381c <HAL_GetTick>
 800741c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800741e:	e008      	b.n	8007432 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007420:	f7fc f9fc 	bl	800381c <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b64      	cmp	r3, #100	@ 0x64
 800742c:	d901      	bls.n	8007432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e29e      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007432:	4b6a      	ldr	r3, [pc, #424]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0f0      	beq.n	8007420 <HAL_RCC_OscConfig+0xc0>
 800743e:	e014      	b.n	800746a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007440:	f7fc f9ec 	bl	800381c <HAL_GetTick>
 8007444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007446:	e008      	b.n	800745a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007448:	f7fc f9e8 	bl	800381c <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b64      	cmp	r3, #100	@ 0x64
 8007454:	d901      	bls.n	800745a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e28a      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800745a:	4b60      	ldr	r3, [pc, #384]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1f0      	bne.n	8007448 <HAL_RCC_OscConfig+0xe8>
 8007466:	e000      	b.n	800746a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d075      	beq.n	8007562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007476:	4b59      	ldr	r3, [pc, #356]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 030c 	and.w	r3, r3, #12
 800747e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007480:	4b56      	ldr	r3, [pc, #344]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f003 0303 	and.w	r3, r3, #3
 8007488:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	2b0c      	cmp	r3, #12
 800748e:	d102      	bne.n	8007496 <HAL_RCC_OscConfig+0x136>
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2b02      	cmp	r3, #2
 8007494:	d002      	beq.n	800749c <HAL_RCC_OscConfig+0x13c>
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	2b04      	cmp	r3, #4
 800749a:	d11f      	bne.n	80074dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800749c:	4b4f      	ldr	r3, [pc, #316]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d005      	beq.n	80074b4 <HAL_RCC_OscConfig+0x154>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e25d      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074b4:	4b49      	ldr	r3, [pc, #292]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	061b      	lsls	r3, r3, #24
 80074c2:	4946      	ldr	r1, [pc, #280]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80074c8:	4b45      	ldr	r3, [pc, #276]	@ (80075e0 <HAL_RCC_OscConfig+0x280>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7fb fdf9 	bl	80030c4 <HAL_InitTick>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d043      	beq.n	8007560 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e249      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d023      	beq.n	800752c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074e4:	4b3d      	ldr	r3, [pc, #244]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a3c      	ldr	r2, [pc, #240]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 80074ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f0:	f7fc f994 	bl	800381c <HAL_GetTick>
 80074f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074f6:	e008      	b.n	800750a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074f8:	f7fc f990 	bl	800381c <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d901      	bls.n	800750a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e232      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800750a:	4b34      	ldr	r3, [pc, #208]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0f0      	beq.n	80074f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007516:	4b31      	ldr	r3, [pc, #196]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	061b      	lsls	r3, r3, #24
 8007524:	492d      	ldr	r1, [pc, #180]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 8007526:	4313      	orrs	r3, r2
 8007528:	604b      	str	r3, [r1, #4]
 800752a:	e01a      	b.n	8007562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800752c:	4b2b      	ldr	r3, [pc, #172]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a2a      	ldr	r2, [pc, #168]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 8007532:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007538:	f7fc f970 	bl	800381c <HAL_GetTick>
 800753c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800753e:	e008      	b.n	8007552 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007540:	f7fc f96c 	bl	800381c <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b02      	cmp	r3, #2
 800754c:	d901      	bls.n	8007552 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e20e      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007552:	4b22      	ldr	r3, [pc, #136]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1f0      	bne.n	8007540 <HAL_RCC_OscConfig+0x1e0>
 800755e:	e000      	b.n	8007562 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007560:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	2b00      	cmp	r3, #0
 800756c:	d041      	beq.n	80075f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d01c      	beq.n	80075b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007576:	4b19      	ldr	r3, [pc, #100]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 8007578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800757c:	4a17      	ldr	r2, [pc, #92]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 800757e:	f043 0301 	orr.w	r3, r3, #1
 8007582:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007586:	f7fc f949 	bl	800381c <HAL_GetTick>
 800758a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800758c:	e008      	b.n	80075a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800758e:	f7fc f945 	bl	800381c <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	2b02      	cmp	r3, #2
 800759a:	d901      	bls.n	80075a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e1e7      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075a0:	4b0e      	ldr	r3, [pc, #56]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 80075a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0ef      	beq.n	800758e <HAL_RCC_OscConfig+0x22e>
 80075ae:	e020      	b.n	80075f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075b0:	4b0a      	ldr	r3, [pc, #40]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 80075b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075b6:	4a09      	ldr	r2, [pc, #36]	@ (80075dc <HAL_RCC_OscConfig+0x27c>)
 80075b8:	f023 0301 	bic.w	r3, r3, #1
 80075bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075c0:	f7fc f92c 	bl	800381c <HAL_GetTick>
 80075c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075c6:	e00d      	b.n	80075e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075c8:	f7fc f928 	bl	800381c <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d906      	bls.n	80075e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e1ca      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
 80075da:	bf00      	nop
 80075dc:	40021000 	.word	0x40021000
 80075e0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075e4:	4b8c      	ldr	r3, [pc, #560]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 80075e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1ea      	bne.n	80075c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0304 	and.w	r3, r3, #4
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 80a6 	beq.w	800774c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007600:	2300      	movs	r3, #0
 8007602:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007604:	4b84      	ldr	r3, [pc, #528]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 8007606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <HAL_RCC_OscConfig+0x2b4>
 8007610:	2301      	movs	r3, #1
 8007612:	e000      	b.n	8007616 <HAL_RCC_OscConfig+0x2b6>
 8007614:	2300      	movs	r3, #0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00d      	beq.n	8007636 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800761a:	4b7f      	ldr	r3, [pc, #508]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 800761c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800761e:	4a7e      	ldr	r2, [pc, #504]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 8007620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007624:	6593      	str	r3, [r2, #88]	@ 0x58
 8007626:	4b7c      	ldr	r3, [pc, #496]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 8007628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800762a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800762e:	60fb      	str	r3, [r7, #12]
 8007630:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007632:	2301      	movs	r3, #1
 8007634:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007636:	4b79      	ldr	r3, [pc, #484]	@ (800781c <HAL_RCC_OscConfig+0x4bc>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800763e:	2b00      	cmp	r3, #0
 8007640:	d118      	bne.n	8007674 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007642:	4b76      	ldr	r3, [pc, #472]	@ (800781c <HAL_RCC_OscConfig+0x4bc>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a75      	ldr	r2, [pc, #468]	@ (800781c <HAL_RCC_OscConfig+0x4bc>)
 8007648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800764c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800764e:	f7fc f8e5 	bl	800381c <HAL_GetTick>
 8007652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007654:	e008      	b.n	8007668 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007656:	f7fc f8e1 	bl	800381c <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d901      	bls.n	8007668 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e183      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007668:	4b6c      	ldr	r3, [pc, #432]	@ (800781c <HAL_RCC_OscConfig+0x4bc>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007670:	2b00      	cmp	r3, #0
 8007672:	d0f0      	beq.n	8007656 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d108      	bne.n	800768e <HAL_RCC_OscConfig+0x32e>
 800767c:	4b66      	ldr	r3, [pc, #408]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 800767e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007682:	4a65      	ldr	r2, [pc, #404]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 8007684:	f043 0301 	orr.w	r3, r3, #1
 8007688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800768c:	e024      	b.n	80076d8 <HAL_RCC_OscConfig+0x378>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	2b05      	cmp	r3, #5
 8007694:	d110      	bne.n	80076b8 <HAL_RCC_OscConfig+0x358>
 8007696:	4b60      	ldr	r3, [pc, #384]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 8007698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800769c:	4a5e      	ldr	r2, [pc, #376]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 800769e:	f043 0304 	orr.w	r3, r3, #4
 80076a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076a6:	4b5c      	ldr	r3, [pc, #368]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 80076a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076ac:	4a5a      	ldr	r2, [pc, #360]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 80076ae:	f043 0301 	orr.w	r3, r3, #1
 80076b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076b6:	e00f      	b.n	80076d8 <HAL_RCC_OscConfig+0x378>
 80076b8:	4b57      	ldr	r3, [pc, #348]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 80076ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076be:	4a56      	ldr	r2, [pc, #344]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 80076c0:	f023 0301 	bic.w	r3, r3, #1
 80076c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076c8:	4b53      	ldr	r3, [pc, #332]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 80076ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076ce:	4a52      	ldr	r2, [pc, #328]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 80076d0:	f023 0304 	bic.w	r3, r3, #4
 80076d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d016      	beq.n	800770e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076e0:	f7fc f89c 	bl	800381c <HAL_GetTick>
 80076e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076e6:	e00a      	b.n	80076fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076e8:	f7fc f898 	bl	800381c <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e138      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076fe:	4b46      	ldr	r3, [pc, #280]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 8007700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d0ed      	beq.n	80076e8 <HAL_RCC_OscConfig+0x388>
 800770c:	e015      	b.n	800773a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800770e:	f7fc f885 	bl	800381c <HAL_GetTick>
 8007712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007714:	e00a      	b.n	800772c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007716:	f7fc f881 	bl	800381c <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007724:	4293      	cmp	r3, r2
 8007726:	d901      	bls.n	800772c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e121      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800772c:	4b3a      	ldr	r3, [pc, #232]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 800772e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1ed      	bne.n	8007716 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800773a:	7ffb      	ldrb	r3, [r7, #31]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d105      	bne.n	800774c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007740:	4b35      	ldr	r3, [pc, #212]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 8007742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007744:	4a34      	ldr	r2, [pc, #208]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 8007746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800774a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d03c      	beq.n	80077d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d01c      	beq.n	800779a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007760:	4b2d      	ldr	r3, [pc, #180]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 8007762:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007766:	4a2c      	ldr	r2, [pc, #176]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 8007768:	f043 0301 	orr.w	r3, r3, #1
 800776c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007770:	f7fc f854 	bl	800381c <HAL_GetTick>
 8007774:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007776:	e008      	b.n	800778a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007778:	f7fc f850 	bl	800381c <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	2b02      	cmp	r3, #2
 8007784:	d901      	bls.n	800778a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e0f2      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800778a:	4b23      	ldr	r3, [pc, #140]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 800778c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007790:	f003 0302 	and.w	r3, r3, #2
 8007794:	2b00      	cmp	r3, #0
 8007796:	d0ef      	beq.n	8007778 <HAL_RCC_OscConfig+0x418>
 8007798:	e01b      	b.n	80077d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800779a:	4b1f      	ldr	r3, [pc, #124]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 800779c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 80077a2:	f023 0301 	bic.w	r3, r3, #1
 80077a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077aa:	f7fc f837 	bl	800381c <HAL_GetTick>
 80077ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077b0:	e008      	b.n	80077c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077b2:	f7fc f833 	bl	800381c <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d901      	bls.n	80077c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e0d5      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077c4:	4b14      	ldr	r3, [pc, #80]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 80077c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1ef      	bne.n	80077b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 80c9 	beq.w	800796e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f003 030c 	and.w	r3, r3, #12
 80077e4:	2b0c      	cmp	r3, #12
 80077e6:	f000 8083 	beq.w	80078f0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d15e      	bne.n	80078b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077f2:	4b09      	ldr	r3, [pc, #36]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a08      	ldr	r2, [pc, #32]	@ (8007818 <HAL_RCC_OscConfig+0x4b8>)
 80077f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077fe:	f7fc f80d 	bl	800381c <HAL_GetTick>
 8007802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007804:	e00c      	b.n	8007820 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007806:	f7fc f809 	bl	800381c <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	2b02      	cmp	r3, #2
 8007812:	d905      	bls.n	8007820 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e0ab      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
 8007818:	40021000 	.word	0x40021000
 800781c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007820:	4b55      	ldr	r3, [pc, #340]	@ (8007978 <HAL_RCC_OscConfig+0x618>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1ec      	bne.n	8007806 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800782c:	4b52      	ldr	r3, [pc, #328]	@ (8007978 <HAL_RCC_OscConfig+0x618>)
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	4b52      	ldr	r3, [pc, #328]	@ (800797c <HAL_RCC_OscConfig+0x61c>)
 8007832:	4013      	ands	r3, r2
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	6a11      	ldr	r1, [r2, #32]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800783c:	3a01      	subs	r2, #1
 800783e:	0112      	lsls	r2, r2, #4
 8007840:	4311      	orrs	r1, r2
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007846:	0212      	lsls	r2, r2, #8
 8007848:	4311      	orrs	r1, r2
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800784e:	0852      	lsrs	r2, r2, #1
 8007850:	3a01      	subs	r2, #1
 8007852:	0552      	lsls	r2, r2, #21
 8007854:	4311      	orrs	r1, r2
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800785a:	0852      	lsrs	r2, r2, #1
 800785c:	3a01      	subs	r2, #1
 800785e:	0652      	lsls	r2, r2, #25
 8007860:	4311      	orrs	r1, r2
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007866:	06d2      	lsls	r2, r2, #27
 8007868:	430a      	orrs	r2, r1
 800786a:	4943      	ldr	r1, [pc, #268]	@ (8007978 <HAL_RCC_OscConfig+0x618>)
 800786c:	4313      	orrs	r3, r2
 800786e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007870:	4b41      	ldr	r3, [pc, #260]	@ (8007978 <HAL_RCC_OscConfig+0x618>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a40      	ldr	r2, [pc, #256]	@ (8007978 <HAL_RCC_OscConfig+0x618>)
 8007876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800787a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800787c:	4b3e      	ldr	r3, [pc, #248]	@ (8007978 <HAL_RCC_OscConfig+0x618>)
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	4a3d      	ldr	r2, [pc, #244]	@ (8007978 <HAL_RCC_OscConfig+0x618>)
 8007882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007886:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007888:	f7fb ffc8 	bl	800381c <HAL_GetTick>
 800788c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800788e:	e008      	b.n	80078a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007890:	f7fb ffc4 	bl	800381c <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	2b02      	cmp	r3, #2
 800789c:	d901      	bls.n	80078a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e066      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078a2:	4b35      	ldr	r3, [pc, #212]	@ (8007978 <HAL_RCC_OscConfig+0x618>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0f0      	beq.n	8007890 <HAL_RCC_OscConfig+0x530>
 80078ae:	e05e      	b.n	800796e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078b0:	4b31      	ldr	r3, [pc, #196]	@ (8007978 <HAL_RCC_OscConfig+0x618>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a30      	ldr	r2, [pc, #192]	@ (8007978 <HAL_RCC_OscConfig+0x618>)
 80078b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078bc:	f7fb ffae 	bl	800381c <HAL_GetTick>
 80078c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078c2:	e008      	b.n	80078d6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078c4:	f7fb ffaa 	bl	800381c <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d901      	bls.n	80078d6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e04c      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078d6:	4b28      	ldr	r3, [pc, #160]	@ (8007978 <HAL_RCC_OscConfig+0x618>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1f0      	bne.n	80078c4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80078e2:	4b25      	ldr	r3, [pc, #148]	@ (8007978 <HAL_RCC_OscConfig+0x618>)
 80078e4:	68da      	ldr	r2, [r3, #12]
 80078e6:	4924      	ldr	r1, [pc, #144]	@ (8007978 <HAL_RCC_OscConfig+0x618>)
 80078e8:	4b25      	ldr	r3, [pc, #148]	@ (8007980 <HAL_RCC_OscConfig+0x620>)
 80078ea:	4013      	ands	r3, r2
 80078ec:	60cb      	str	r3, [r1, #12]
 80078ee:	e03e      	b.n	800796e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d101      	bne.n	80078fc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e039      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80078fc:	4b1e      	ldr	r3, [pc, #120]	@ (8007978 <HAL_RCC_OscConfig+0x618>)
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f003 0203 	and.w	r2, r3, #3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	429a      	cmp	r2, r3
 800790e:	d12c      	bne.n	800796a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800791a:	3b01      	subs	r3, #1
 800791c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800791e:	429a      	cmp	r2, r3
 8007920:	d123      	bne.n	800796a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800792e:	429a      	cmp	r2, r3
 8007930:	d11b      	bne.n	800796a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800793e:	429a      	cmp	r2, r3
 8007940:	d113      	bne.n	800796a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800794c:	085b      	lsrs	r3, r3, #1
 800794e:	3b01      	subs	r3, #1
 8007950:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007952:	429a      	cmp	r2, r3
 8007954:	d109      	bne.n	800796a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007960:	085b      	lsrs	r3, r3, #1
 8007962:	3b01      	subs	r3, #1
 8007964:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007966:	429a      	cmp	r2, r3
 8007968:	d001      	beq.n	800796e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e000      	b.n	8007970 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3720      	adds	r7, #32
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	40021000 	.word	0x40021000
 800797c:	019f800c 	.word	0x019f800c
 8007980:	feeefffc 	.word	0xfeeefffc

08007984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800798e:	2300      	movs	r3, #0
 8007990:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e11e      	b.n	8007bda <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800799c:	4b91      	ldr	r3, [pc, #580]	@ (8007be4 <HAL_RCC_ClockConfig+0x260>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 030f 	and.w	r3, r3, #15
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d910      	bls.n	80079cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079aa:	4b8e      	ldr	r3, [pc, #568]	@ (8007be4 <HAL_RCC_ClockConfig+0x260>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f023 020f 	bic.w	r2, r3, #15
 80079b2:	498c      	ldr	r1, [pc, #560]	@ (8007be4 <HAL_RCC_ClockConfig+0x260>)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ba:	4b8a      	ldr	r3, [pc, #552]	@ (8007be4 <HAL_RCC_ClockConfig+0x260>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d001      	beq.n	80079cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e106      	b.n	8007bda <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d073      	beq.n	8007ac0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d129      	bne.n	8007a34 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079e0:	4b81      	ldr	r3, [pc, #516]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e0f4      	b.n	8007bda <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80079f0:	f000 f9d0 	bl	8007d94 <RCC_GetSysClockFreqFromPLLSource>
 80079f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	4a7c      	ldr	r2, [pc, #496]	@ (8007bec <HAL_RCC_ClockConfig+0x268>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d93f      	bls.n	8007a7e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80079fe:	4b7a      	ldr	r3, [pc, #488]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d009      	beq.n	8007a1e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d033      	beq.n	8007a7e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d12f      	bne.n	8007a7e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a1e:	4b72      	ldr	r3, [pc, #456]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a26:	4a70      	ldr	r2, [pc, #448]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007a2e:	2380      	movs	r3, #128	@ 0x80
 8007a30:	617b      	str	r3, [r7, #20]
 8007a32:	e024      	b.n	8007a7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d107      	bne.n	8007a4c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a3c:	4b6a      	ldr	r3, [pc, #424]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d109      	bne.n	8007a5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e0c6      	b.n	8007bda <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a4c:	4b66      	ldr	r3, [pc, #408]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e0be      	b.n	8007bda <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007a5c:	f000 f8ce 	bl	8007bfc <HAL_RCC_GetSysClockFreq>
 8007a60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	4a61      	ldr	r2, [pc, #388]	@ (8007bec <HAL_RCC_ClockConfig+0x268>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d909      	bls.n	8007a7e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a6a:	4b5f      	ldr	r3, [pc, #380]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a72:	4a5d      	ldr	r2, [pc, #372]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007a7a:	2380      	movs	r3, #128	@ 0x80
 8007a7c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a7e:	4b5a      	ldr	r3, [pc, #360]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f023 0203 	bic.w	r2, r3, #3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	4957      	ldr	r1, [pc, #348]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a90:	f7fb fec4 	bl	800381c <HAL_GetTick>
 8007a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a96:	e00a      	b.n	8007aae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a98:	f7fb fec0 	bl	800381c <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e095      	b.n	8007bda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aae:	4b4e      	ldr	r3, [pc, #312]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f003 020c 	and.w	r2, r3, #12
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d1eb      	bne.n	8007a98 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0302 	and.w	r3, r3, #2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d023      	beq.n	8007b14 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d005      	beq.n	8007ae4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ad8:	4b43      	ldr	r3, [pc, #268]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	4a42      	ldr	r2, [pc, #264]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007ade:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007ae2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0308 	and.w	r3, r3, #8
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d007      	beq.n	8007b00 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007af0:	4b3d      	ldr	r3, [pc, #244]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007af8:	4a3b      	ldr	r2, [pc, #236]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007afa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007afe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b00:	4b39      	ldr	r3, [pc, #228]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	4936      	ldr	r1, [pc, #216]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	608b      	str	r3, [r1, #8]
 8007b12:	e008      	b.n	8007b26 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	2b80      	cmp	r3, #128	@ 0x80
 8007b18:	d105      	bne.n	8007b26 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007b1a:	4b33      	ldr	r3, [pc, #204]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	4a32      	ldr	r2, [pc, #200]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007b20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b24:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b26:	4b2f      	ldr	r3, [pc, #188]	@ (8007be4 <HAL_RCC_ClockConfig+0x260>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 030f 	and.w	r3, r3, #15
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d21d      	bcs.n	8007b70 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b34:	4b2b      	ldr	r3, [pc, #172]	@ (8007be4 <HAL_RCC_ClockConfig+0x260>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f023 020f 	bic.w	r2, r3, #15
 8007b3c:	4929      	ldr	r1, [pc, #164]	@ (8007be4 <HAL_RCC_ClockConfig+0x260>)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007b44:	f7fb fe6a 	bl	800381c <HAL_GetTick>
 8007b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b4a:	e00a      	b.n	8007b62 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b4c:	f7fb fe66 	bl	800381c <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d901      	bls.n	8007b62 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e03b      	b.n	8007bda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b62:	4b20      	ldr	r3, [pc, #128]	@ (8007be4 <HAL_RCC_ClockConfig+0x260>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 030f 	and.w	r3, r3, #15
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d1ed      	bne.n	8007b4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0304 	and.w	r3, r3, #4
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d008      	beq.n	8007b8e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	4917      	ldr	r1, [pc, #92]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0308 	and.w	r3, r3, #8
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d009      	beq.n	8007bae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b9a:	4b13      	ldr	r3, [pc, #76]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	490f      	ldr	r1, [pc, #60]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007bae:	f000 f825 	bl	8007bfc <HAL_RCC_GetSysClockFreq>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8007be8 <HAL_RCC_ClockConfig+0x264>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	091b      	lsrs	r3, r3, #4
 8007bba:	f003 030f 	and.w	r3, r3, #15
 8007bbe:	490c      	ldr	r1, [pc, #48]	@ (8007bf0 <HAL_RCC_ClockConfig+0x26c>)
 8007bc0:	5ccb      	ldrb	r3, [r1, r3]
 8007bc2:	f003 031f 	and.w	r3, r3, #31
 8007bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bca:	4a0a      	ldr	r2, [pc, #40]	@ (8007bf4 <HAL_RCC_ClockConfig+0x270>)
 8007bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007bce:	4b0a      	ldr	r3, [pc, #40]	@ (8007bf8 <HAL_RCC_ClockConfig+0x274>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fb fa76 	bl	80030c4 <HAL_InitTick>
 8007bd8:	4603      	mov	r3, r0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	40022000 	.word	0x40022000
 8007be8:	40021000 	.word	0x40021000
 8007bec:	04c4b400 	.word	0x04c4b400
 8007bf0:	0801dd0c 	.word	0x0801dd0c
 8007bf4:	20000004 	.word	0x20000004
 8007bf8:	20000008 	.word	0x20000008

08007bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007c02:	4b2c      	ldr	r3, [pc, #176]	@ (8007cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f003 030c 	and.w	r3, r3, #12
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	d102      	bne.n	8007c14 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8007cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c10:	613b      	str	r3, [r7, #16]
 8007c12:	e047      	b.n	8007ca4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007c14:	4b27      	ldr	r3, [pc, #156]	@ (8007cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f003 030c 	and.w	r3, r3, #12
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	d102      	bne.n	8007c26 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007c20:	4b26      	ldr	r3, [pc, #152]	@ (8007cbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007c22:	613b      	str	r3, [r7, #16]
 8007c24:	e03e      	b.n	8007ca4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007c26:	4b23      	ldr	r3, [pc, #140]	@ (8007cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f003 030c 	and.w	r3, r3, #12
 8007c2e:	2b0c      	cmp	r3, #12
 8007c30:	d136      	bne.n	8007ca0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c32:	4b20      	ldr	r3, [pc, #128]	@ (8007cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f003 0303 	and.w	r3, r3, #3
 8007c3a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8007cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	091b      	lsrs	r3, r3, #4
 8007c42:	f003 030f 	and.w	r3, r3, #15
 8007c46:	3301      	adds	r3, #1
 8007c48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	d10c      	bne.n	8007c6a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c50:	4a1a      	ldr	r2, [pc, #104]	@ (8007cbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c58:	4a16      	ldr	r2, [pc, #88]	@ (8007cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c5a:	68d2      	ldr	r2, [r2, #12]
 8007c5c:	0a12      	lsrs	r2, r2, #8
 8007c5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007c62:	fb02 f303 	mul.w	r3, r2, r3
 8007c66:	617b      	str	r3, [r7, #20]
      break;
 8007c68:	e00c      	b.n	8007c84 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c6a:	4a13      	ldr	r2, [pc, #76]	@ (8007cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c72:	4a10      	ldr	r2, [pc, #64]	@ (8007cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c74:	68d2      	ldr	r2, [r2, #12]
 8007c76:	0a12      	lsrs	r2, r2, #8
 8007c78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007c7c:	fb02 f303 	mul.w	r3, r2, r3
 8007c80:	617b      	str	r3, [r7, #20]
      break;
 8007c82:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007c84:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	0e5b      	lsrs	r3, r3, #25
 8007c8a:	f003 0303 	and.w	r3, r3, #3
 8007c8e:	3301      	adds	r3, #1
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c9c:	613b      	str	r3, [r7, #16]
 8007c9e:	e001      	b.n	8007ca4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007ca4:	693b      	ldr	r3, [r7, #16]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	371c      	adds	r7, #28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	40021000 	.word	0x40021000
 8007cb8:	00f42400 	.word	0x00f42400
 8007cbc:	016e3600 	.word	0x016e3600

08007cc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cc4:	4b03      	ldr	r3, [pc, #12]	@ (8007cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	20000004 	.word	0x20000004

08007cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007cdc:	f7ff fff0 	bl	8007cc0 <HAL_RCC_GetHCLKFreq>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	4b06      	ldr	r3, [pc, #24]	@ (8007cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	0a1b      	lsrs	r3, r3, #8
 8007ce8:	f003 0307 	and.w	r3, r3, #7
 8007cec:	4904      	ldr	r1, [pc, #16]	@ (8007d00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007cee:	5ccb      	ldrb	r3, [r1, r3]
 8007cf0:	f003 031f 	and.w	r3, r3, #31
 8007cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	40021000 	.word	0x40021000
 8007d00:	0801dd1c 	.word	0x0801dd1c

08007d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007d08:	f7ff ffda 	bl	8007cc0 <HAL_RCC_GetHCLKFreq>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	4b06      	ldr	r3, [pc, #24]	@ (8007d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	0adb      	lsrs	r3, r3, #11
 8007d14:	f003 0307 	and.w	r3, r3, #7
 8007d18:	4904      	ldr	r1, [pc, #16]	@ (8007d2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d1a:	5ccb      	ldrb	r3, [r1, r3]
 8007d1c:	f003 031f 	and.w	r3, r3, #31
 8007d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	40021000 	.word	0x40021000
 8007d2c:	0801dd1c 	.word	0x0801dd1c

08007d30 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	220f      	movs	r2, #15
 8007d3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007d40:	4b12      	ldr	r3, [pc, #72]	@ (8007d8c <HAL_RCC_GetClockConfig+0x5c>)
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 0203 	and.w	r2, r3, #3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8007d8c <HAL_RCC_GetClockConfig+0x5c>)
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007d58:	4b0c      	ldr	r3, [pc, #48]	@ (8007d8c <HAL_RCC_GetClockConfig+0x5c>)
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007d64:	4b09      	ldr	r3, [pc, #36]	@ (8007d8c <HAL_RCC_GetClockConfig+0x5c>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	08db      	lsrs	r3, r3, #3
 8007d6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007d72:	4b07      	ldr	r3, [pc, #28]	@ (8007d90 <HAL_RCC_GetClockConfig+0x60>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 020f 	and.w	r2, r3, #15
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	601a      	str	r2, [r3, #0]
}
 8007d7e:	bf00      	nop
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	40021000 	.word	0x40021000
 8007d90:	40022000 	.word	0x40022000

08007d94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b087      	sub	sp, #28
 8007d98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8007e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007da4:	4b1b      	ldr	r3, [pc, #108]	@ (8007e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	091b      	lsrs	r3, r3, #4
 8007daa:	f003 030f 	and.w	r3, r3, #15
 8007dae:	3301      	adds	r3, #1
 8007db0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d10c      	bne.n	8007dd2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007db8:	4a17      	ldr	r2, [pc, #92]	@ (8007e18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc0:	4a14      	ldr	r2, [pc, #80]	@ (8007e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007dc2:	68d2      	ldr	r2, [r2, #12]
 8007dc4:	0a12      	lsrs	r2, r2, #8
 8007dc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007dca:	fb02 f303 	mul.w	r3, r2, r3
 8007dce:	617b      	str	r3, [r7, #20]
    break;
 8007dd0:	e00c      	b.n	8007dec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007dd2:	4a12      	ldr	r2, [pc, #72]	@ (8007e1c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dda:	4a0e      	ldr	r2, [pc, #56]	@ (8007e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ddc:	68d2      	ldr	r2, [r2, #12]
 8007dde:	0a12      	lsrs	r2, r2, #8
 8007de0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007de4:	fb02 f303 	mul.w	r3, r2, r3
 8007de8:	617b      	str	r3, [r7, #20]
    break;
 8007dea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007dec:	4b09      	ldr	r3, [pc, #36]	@ (8007e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	0e5b      	lsrs	r3, r3, #25
 8007df2:	f003 0303 	and.w	r3, r3, #3
 8007df6:	3301      	adds	r3, #1
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e04:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007e06:	687b      	ldr	r3, [r7, #4]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	371c      	adds	r7, #28
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	40021000 	.word	0x40021000
 8007e18:	016e3600 	.word	0x016e3600
 8007e1c:	00f42400 	.word	0x00f42400

08007e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e28:	2300      	movs	r3, #0
 8007e2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 8098 	beq.w	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e42:	4b43      	ldr	r3, [pc, #268]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10d      	bne.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e4e:	4b40      	ldr	r3, [pc, #256]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e52:	4a3f      	ldr	r2, [pc, #252]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e58:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e62:	60bb      	str	r3, [r7, #8]
 8007e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e66:	2301      	movs	r3, #1
 8007e68:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a39      	ldr	r2, [pc, #228]	@ (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e76:	f7fb fcd1 	bl	800381c <HAL_GetTick>
 8007e7a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e7c:	e009      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e7e:	f7fb fccd 	bl	800381c <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d902      	bls.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	74fb      	strb	r3, [r7, #19]
        break;
 8007e90:	e005      	b.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e92:	4b30      	ldr	r3, [pc, #192]	@ (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0ef      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007e9e:	7cfb      	ldrb	r3, [r7, #19]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d159      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007eae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d01e      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d019      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ec0:	4b23      	ldr	r3, [pc, #140]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007eca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ecc:	4b20      	ldr	r3, [pc, #128]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ed8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007edc:	4b1c      	ldr	r3, [pc, #112]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007eec:	4a18      	ldr	r2, [pc, #96]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d016      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007efe:	f7fb fc8d 	bl	800381c <HAL_GetTick>
 8007f02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f04:	e00b      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f06:	f7fb fc89 	bl	800381c <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d902      	bls.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	74fb      	strb	r3, [r7, #19]
            break;
 8007f1c:	e006      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d0ec      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007f2c:	7cfb      	ldrb	r3, [r7, #19]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10b      	bne.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f32:	4b07      	ldr	r3, [pc, #28]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f40:	4903      	ldr	r1, [pc, #12]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007f48:	e008      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f4a:	7cfb      	ldrb	r3, [r7, #19]
 8007f4c:	74bb      	strb	r3, [r7, #18]
 8007f4e:	e005      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007f50:	40021000 	.word	0x40021000
 8007f54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f58:	7cfb      	ldrb	r3, [r7, #19]
 8007f5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f5c:	7c7b      	ldrb	r3, [r7, #17]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d105      	bne.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f62:	4ba7      	ldr	r3, [pc, #668]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f66:	4aa6      	ldr	r2, [pc, #664]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f6c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00a      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f7a:	4ba1      	ldr	r3, [pc, #644]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f80:	f023 0203 	bic.w	r2, r3, #3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	499d      	ldr	r1, [pc, #628]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00a      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f9c:	4b98      	ldr	r3, [pc, #608]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fa2:	f023 020c 	bic.w	r2, r3, #12
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	4995      	ldr	r1, [pc, #596]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0304 	and.w	r3, r3, #4
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007fbe:	4b90      	ldr	r3, [pc, #576]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fc4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	498c      	ldr	r1, [pc, #560]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0308 	and.w	r3, r3, #8
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00a      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007fe0:	4b87      	ldr	r3, [pc, #540]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fe6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	4984      	ldr	r1, [pc, #528]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0310 	and.w	r3, r3, #16
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00a      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008002:	4b7f      	ldr	r3, [pc, #508]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008008:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	497b      	ldr	r1, [pc, #492]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008012:	4313      	orrs	r3, r2
 8008014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0320 	and.w	r3, r3, #32
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00a      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008024:	4b76      	ldr	r3, [pc, #472]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800802a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	4973      	ldr	r1, [pc, #460]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008034:	4313      	orrs	r3, r2
 8008036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008046:	4b6e      	ldr	r3, [pc, #440]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800804c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	496a      	ldr	r1, [pc, #424]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008056:	4313      	orrs	r3, r2
 8008058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00a      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008068:	4b65      	ldr	r3, [pc, #404]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800806a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800806e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	4962      	ldr	r1, [pc, #392]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008078:	4313      	orrs	r3, r2
 800807a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800808a:	4b5d      	ldr	r3, [pc, #372]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800808c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008090:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008098:	4959      	ldr	r1, [pc, #356]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800809a:	4313      	orrs	r3, r2
 800809c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00a      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080ac:	4b54      	ldr	r3, [pc, #336]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080b2:	f023 0203 	bic.w	r2, r3, #3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ba:	4951      	ldr	r1, [pc, #324]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080ce:	4b4c      	ldr	r3, [pc, #304]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080dc:	4948      	ldr	r1, [pc, #288]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d015      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080f0:	4b43      	ldr	r3, [pc, #268]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080fe:	4940      	ldr	r1, [pc, #256]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008100:	4313      	orrs	r3, r2
 8008102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800810e:	d105      	bne.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008110:	4b3b      	ldr	r3, [pc, #236]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	4a3a      	ldr	r2, [pc, #232]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800811a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008124:	2b00      	cmp	r3, #0
 8008126:	d015      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008128:	4b35      	ldr	r3, [pc, #212]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800812a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800812e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008136:	4932      	ldr	r1, [pc, #200]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008138:	4313      	orrs	r3, r2
 800813a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008142:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008146:	d105      	bne.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008148:	4b2d      	ldr	r3, [pc, #180]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	4a2c      	ldr	r2, [pc, #176]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800814e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008152:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d015      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008160:	4b27      	ldr	r3, [pc, #156]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008166:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816e:	4924      	ldr	r1, [pc, #144]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008170:	4313      	orrs	r3, r2
 8008172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800817e:	d105      	bne.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008180:	4b1f      	ldr	r3, [pc, #124]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	4a1e      	ldr	r2, [pc, #120]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800818a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d015      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008198:	4b19      	ldr	r3, [pc, #100]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800819a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800819e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a6:	4916      	ldr	r1, [pc, #88]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081b6:	d105      	bne.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081b8:	4b11      	ldr	r3, [pc, #68]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	4a10      	ldr	r2, [pc, #64]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d019      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081de:	4908      	ldr	r1, [pc, #32]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081e0:	4313      	orrs	r3, r2
 80081e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081ee:	d109      	bne.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081f0:	4b03      	ldr	r3, [pc, #12]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	4a02      	ldr	r2, [pc, #8]	@ (8008200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081fa:	60d3      	str	r3, [r2, #12]
 80081fc:	e002      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80081fe:	bf00      	nop
 8008200:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d015      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008210:	4b29      	ldr	r3, [pc, #164]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008216:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800821e:	4926      	ldr	r1, [pc, #152]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008220:	4313      	orrs	r3, r2
 8008222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800822a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800822e:	d105      	bne.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008230:	4b21      	ldr	r3, [pc, #132]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	4a20      	ldr	r2, [pc, #128]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800823a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d015      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008248:	4b1b      	ldr	r3, [pc, #108]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800824a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800824e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008256:	4918      	ldr	r1, [pc, #96]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008258:	4313      	orrs	r3, r2
 800825a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008266:	d105      	bne.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008268:	4b13      	ldr	r3, [pc, #76]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	4a12      	ldr	r2, [pc, #72]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800826e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008272:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d015      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008280:	4b0d      	ldr	r3, [pc, #52]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008282:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008286:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800828e:	490a      	ldr	r1, [pc, #40]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008290:	4313      	orrs	r3, r2
 8008292:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800829a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800829e:	d105      	bne.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082a0:	4b05      	ldr	r3, [pc, #20]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	4a04      	ldr	r2, [pc, #16]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80082a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80082ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	40021000 	.word	0x40021000

080082bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e049      	b.n	8008362 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d106      	bne.n	80082e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f841 	bl	800836a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	3304      	adds	r3, #4
 80082f8:	4619      	mov	r1, r3
 80082fa:	4610      	mov	r0, r2
 80082fc:	f000 fa30 	bl	8008760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008372:	bf00      	nop
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
	...

08008380 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b01      	cmp	r3, #1
 8008392:	d001      	beq.n	8008398 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e054      	b.n	8008442 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2202      	movs	r2, #2
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68da      	ldr	r2, [r3, #12]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0201 	orr.w	r2, r2, #1
 80083ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a26      	ldr	r2, [pc, #152]	@ (8008450 <HAL_TIM_Base_Start_IT+0xd0>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d022      	beq.n	8008400 <HAL_TIM_Base_Start_IT+0x80>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083c2:	d01d      	beq.n	8008400 <HAL_TIM_Base_Start_IT+0x80>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a22      	ldr	r2, [pc, #136]	@ (8008454 <HAL_TIM_Base_Start_IT+0xd4>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d018      	beq.n	8008400 <HAL_TIM_Base_Start_IT+0x80>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a21      	ldr	r2, [pc, #132]	@ (8008458 <HAL_TIM_Base_Start_IT+0xd8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d013      	beq.n	8008400 <HAL_TIM_Base_Start_IT+0x80>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a1f      	ldr	r2, [pc, #124]	@ (800845c <HAL_TIM_Base_Start_IT+0xdc>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d00e      	beq.n	8008400 <HAL_TIM_Base_Start_IT+0x80>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a1e      	ldr	r2, [pc, #120]	@ (8008460 <HAL_TIM_Base_Start_IT+0xe0>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d009      	beq.n	8008400 <HAL_TIM_Base_Start_IT+0x80>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008464 <HAL_TIM_Base_Start_IT+0xe4>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d004      	beq.n	8008400 <HAL_TIM_Base_Start_IT+0x80>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a1b      	ldr	r2, [pc, #108]	@ (8008468 <HAL_TIM_Base_Start_IT+0xe8>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d115      	bne.n	800842c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689a      	ldr	r2, [r3, #8]
 8008406:	4b19      	ldr	r3, [pc, #100]	@ (800846c <HAL_TIM_Base_Start_IT+0xec>)
 8008408:	4013      	ands	r3, r2
 800840a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2b06      	cmp	r3, #6
 8008410:	d015      	beq.n	800843e <HAL_TIM_Base_Start_IT+0xbe>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008418:	d011      	beq.n	800843e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f042 0201 	orr.w	r2, r2, #1
 8008428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800842a:	e008      	b.n	800843e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0201 	orr.w	r2, r2, #1
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	e000      	b.n	8008440 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800843e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	40012c00 	.word	0x40012c00
 8008454:	40000400 	.word	0x40000400
 8008458:	40000800 	.word	0x40000800
 800845c:	40000c00 	.word	0x40000c00
 8008460:	40013400 	.word	0x40013400
 8008464:	40014000 	.word	0x40014000
 8008468:	40015000 	.word	0x40015000
 800846c:	00010007 	.word	0x00010007

08008470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d020      	beq.n	80084d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f003 0302 	and.w	r3, r3, #2
 8008498:	2b00      	cmp	r3, #0
 800849a:	d01b      	beq.n	80084d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f06f 0202 	mvn.w	r2, #2
 80084a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	f003 0303 	and.w	r3, r3, #3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f931 	bl	8008722 <HAL_TIM_IC_CaptureCallback>
 80084c0:	e005      	b.n	80084ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f923 	bl	800870e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f934 	bl	8008736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	f003 0304 	and.w	r3, r3, #4
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d020      	beq.n	8008520 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f003 0304 	and.w	r3, r3, #4
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d01b      	beq.n	8008520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f06f 0204 	mvn.w	r2, #4
 80084f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2202      	movs	r2, #2
 80084f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f90b 	bl	8008722 <HAL_TIM_IC_CaptureCallback>
 800850c:	e005      	b.n	800851a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f8fd 	bl	800870e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f90e 	bl	8008736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f003 0308 	and.w	r3, r3, #8
 8008526:	2b00      	cmp	r3, #0
 8008528:	d020      	beq.n	800856c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f003 0308 	and.w	r3, r3, #8
 8008530:	2b00      	cmp	r3, #0
 8008532:	d01b      	beq.n	800856c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f06f 0208 	mvn.w	r2, #8
 800853c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2204      	movs	r2, #4
 8008542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	69db      	ldr	r3, [r3, #28]
 800854a:	f003 0303 	and.w	r3, r3, #3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f8e5 	bl	8008722 <HAL_TIM_IC_CaptureCallback>
 8008558:	e005      	b.n	8008566 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f8d7 	bl	800870e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f8e8 	bl	8008736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	f003 0310 	and.w	r3, r3, #16
 8008572:	2b00      	cmp	r3, #0
 8008574:	d020      	beq.n	80085b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f003 0310 	and.w	r3, r3, #16
 800857c:	2b00      	cmp	r3, #0
 800857e:	d01b      	beq.n	80085b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f06f 0210 	mvn.w	r2, #16
 8008588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2208      	movs	r2, #8
 800858e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800859a:	2b00      	cmp	r3, #0
 800859c:	d003      	beq.n	80085a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f8bf 	bl	8008722 <HAL_TIM_IC_CaptureCallback>
 80085a4:	e005      	b.n	80085b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f8b1 	bl	800870e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f8c2 	bl	8008736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00c      	beq.n	80085dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d007      	beq.n	80085dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f06f 0201 	mvn.w	r2, #1
 80085d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7fa fbce 	bl	8002d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d104      	bne.n	80085f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00c      	beq.n	800860a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d007      	beq.n	800860a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 f969 	bl	80088dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00c      	beq.n	800862e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800861a:	2b00      	cmp	r3, #0
 800861c:	d007      	beq.n	800862e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f961 	bl	80088f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00c      	beq.n	8008652 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800863e:	2b00      	cmp	r3, #0
 8008640:	d007      	beq.n	8008652 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800864a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f87c 	bl	800874a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	f003 0320 	and.w	r3, r3, #32
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00c      	beq.n	8008676 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f003 0320 	and.w	r3, r3, #32
 8008662:	2b00      	cmp	r3, #0
 8008664:	d007      	beq.n	8008676 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f06f 0220 	mvn.w	r2, #32
 800866e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f929 	bl	80088c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00c      	beq.n	800869a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d007      	beq.n	800869a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f935 	bl	8008904 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00c      	beq.n	80086be <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d007      	beq.n	80086be <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80086b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 f92d 	bl	8008918 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00c      	beq.n	80086e2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d007      	beq.n	80086e2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80086da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f925 	bl	800892c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00c      	beq.n	8008706 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d007      	beq.n	8008706 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80086fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f91d 	bl	8008940 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008706:	bf00      	nop
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008716:	bf00      	nop
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008722:	b480      	push	{r7}
 8008724:	b083      	sub	sp, #12
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800872a:	bf00      	nop
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008736:	b480      	push	{r7}
 8008738:	b083      	sub	sp, #12
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008752:	bf00      	nop
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
	...

08008760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a4c      	ldr	r2, [pc, #304]	@ (80088a4 <TIM_Base_SetConfig+0x144>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d017      	beq.n	80087a8 <TIM_Base_SetConfig+0x48>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800877e:	d013      	beq.n	80087a8 <TIM_Base_SetConfig+0x48>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a49      	ldr	r2, [pc, #292]	@ (80088a8 <TIM_Base_SetConfig+0x148>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d00f      	beq.n	80087a8 <TIM_Base_SetConfig+0x48>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a48      	ldr	r2, [pc, #288]	@ (80088ac <TIM_Base_SetConfig+0x14c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d00b      	beq.n	80087a8 <TIM_Base_SetConfig+0x48>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a47      	ldr	r2, [pc, #284]	@ (80088b0 <TIM_Base_SetConfig+0x150>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d007      	beq.n	80087a8 <TIM_Base_SetConfig+0x48>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a46      	ldr	r2, [pc, #280]	@ (80088b4 <TIM_Base_SetConfig+0x154>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d003      	beq.n	80087a8 <TIM_Base_SetConfig+0x48>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a45      	ldr	r2, [pc, #276]	@ (80088b8 <TIM_Base_SetConfig+0x158>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d108      	bne.n	80087ba <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a39      	ldr	r2, [pc, #228]	@ (80088a4 <TIM_Base_SetConfig+0x144>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d023      	beq.n	800880a <TIM_Base_SetConfig+0xaa>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087c8:	d01f      	beq.n	800880a <TIM_Base_SetConfig+0xaa>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a36      	ldr	r2, [pc, #216]	@ (80088a8 <TIM_Base_SetConfig+0x148>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d01b      	beq.n	800880a <TIM_Base_SetConfig+0xaa>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a35      	ldr	r2, [pc, #212]	@ (80088ac <TIM_Base_SetConfig+0x14c>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d017      	beq.n	800880a <TIM_Base_SetConfig+0xaa>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a34      	ldr	r2, [pc, #208]	@ (80088b0 <TIM_Base_SetConfig+0x150>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d013      	beq.n	800880a <TIM_Base_SetConfig+0xaa>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a33      	ldr	r2, [pc, #204]	@ (80088b4 <TIM_Base_SetConfig+0x154>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d00f      	beq.n	800880a <TIM_Base_SetConfig+0xaa>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a33      	ldr	r2, [pc, #204]	@ (80088bc <TIM_Base_SetConfig+0x15c>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d00b      	beq.n	800880a <TIM_Base_SetConfig+0xaa>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a32      	ldr	r2, [pc, #200]	@ (80088c0 <TIM_Base_SetConfig+0x160>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d007      	beq.n	800880a <TIM_Base_SetConfig+0xaa>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a31      	ldr	r2, [pc, #196]	@ (80088c4 <TIM_Base_SetConfig+0x164>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d003      	beq.n	800880a <TIM_Base_SetConfig+0xaa>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a2c      	ldr	r2, [pc, #176]	@ (80088b8 <TIM_Base_SetConfig+0x158>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d108      	bne.n	800881c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	4313      	orrs	r3, r2
 800881a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	4313      	orrs	r3, r2
 8008828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	689a      	ldr	r2, [r3, #8]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a18      	ldr	r2, [pc, #96]	@ (80088a4 <TIM_Base_SetConfig+0x144>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d013      	beq.n	8008870 <TIM_Base_SetConfig+0x110>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a1a      	ldr	r2, [pc, #104]	@ (80088b4 <TIM_Base_SetConfig+0x154>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d00f      	beq.n	8008870 <TIM_Base_SetConfig+0x110>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a1a      	ldr	r2, [pc, #104]	@ (80088bc <TIM_Base_SetConfig+0x15c>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d00b      	beq.n	8008870 <TIM_Base_SetConfig+0x110>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a19      	ldr	r2, [pc, #100]	@ (80088c0 <TIM_Base_SetConfig+0x160>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d007      	beq.n	8008870 <TIM_Base_SetConfig+0x110>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a18      	ldr	r2, [pc, #96]	@ (80088c4 <TIM_Base_SetConfig+0x164>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d003      	beq.n	8008870 <TIM_Base_SetConfig+0x110>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a13      	ldr	r2, [pc, #76]	@ (80088b8 <TIM_Base_SetConfig+0x158>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d103      	bne.n	8008878 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	691a      	ldr	r2, [r3, #16]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b01      	cmp	r3, #1
 8008888:	d105      	bne.n	8008896 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	f023 0201 	bic.w	r2, r3, #1
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	611a      	str	r2, [r3, #16]
  }
}
 8008896:	bf00      	nop
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	40012c00 	.word	0x40012c00
 80088a8:	40000400 	.word	0x40000400
 80088ac:	40000800 	.word	0x40000800
 80088b0:	40000c00 	.word	0x40000c00
 80088b4:	40013400 	.word	0x40013400
 80088b8:	40015000 	.word	0x40015000
 80088bc:	40014000 	.word	0x40014000
 80088c0:	40014400 	.word	0x40014400
 80088c4:	40014800 	.word	0x40014800

080088c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d101      	bne.n	8008966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e042      	b.n	80089ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800896c:	2b00      	cmp	r3, #0
 800896e:	d106      	bne.n	800897e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7fa fd91 	bl	80034a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2224      	movs	r2, #36	@ 0x24
 8008982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0201 	bic.w	r2, r2, #1
 8008994:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 f806 	bl	80099b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fd07 	bl	80093b8 <UART_SetConfig>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d101      	bne.n	80089b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e01b      	b.n	80089ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	689a      	ldr	r2, [r3, #8]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f042 0201 	orr.w	r2, r2, #1
 80089e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f001 f885 	bl	8009af4 <UART_CheckIdleState>
 80089ea:	4603      	mov	r3, r0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b08a      	sub	sp, #40	@ 0x28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	4613      	mov	r3, r2
 8008a00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a08:	2b20      	cmp	r3, #32
 8008a0a:	d167      	bne.n	8008adc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d002      	beq.n	8008a18 <HAL_UART_Transmit_DMA+0x24>
 8008a12:	88fb      	ldrh	r3, [r7, #6]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e060      	b.n	8008ade <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	88fa      	ldrh	r2, [r7, #6]
 8008a26:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	88fa      	ldrh	r2, [r7, #6]
 8008a2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2221      	movs	r2, #33	@ 0x21
 8008a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d028      	beq.n	8008a9c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a4e:	4a26      	ldr	r2, [pc, #152]	@ (8008ae8 <HAL_UART_Transmit_DMA+0xf4>)
 8008a50:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a56:	4a25      	ldr	r2, [pc, #148]	@ (8008aec <HAL_UART_Transmit_DMA+0xf8>)
 8008a58:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a5e:	4a24      	ldr	r2, [pc, #144]	@ (8008af0 <HAL_UART_Transmit_DMA+0xfc>)
 8008a60:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a66:	2200      	movs	r2, #0
 8008a68:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a72:	4619      	mov	r1, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3328      	adds	r3, #40	@ 0x28
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	88fb      	ldrh	r3, [r7, #6]
 8008a7e:	f7fc ff97 	bl	80059b0 <HAL_DMA_Start_IT>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d009      	beq.n	8008a9c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2210      	movs	r2, #16
 8008a8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e020      	b.n	8008ade <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2240      	movs	r2, #64	@ 0x40
 8008aa2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	e853 3f00 	ldrex	r3, [r3]
 8008ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ac4:	623a      	str	r2, [r7, #32]
 8008ac6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac8:	69f9      	ldr	r1, [r7, #28]
 8008aca:	6a3a      	ldr	r2, [r7, #32]
 8008acc:	e841 2300 	strex	r3, r2, [r1]
 8008ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e5      	bne.n	8008aa4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	e000      	b.n	8008ade <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008adc:	2302      	movs	r3, #2
  }
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3728      	adds	r7, #40	@ 0x28
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	08009fbf 	.word	0x08009fbf
 8008aec:	0800a059 	.word	0x0800a059
 8008af0:	0800a1df 	.word	0x0800a1df

08008af4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b08a      	sub	sp, #40	@ 0x28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	4613      	mov	r3, r2
 8008b00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b08:	2b20      	cmp	r3, #32
 8008b0a:	d137      	bne.n	8008b7c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <HAL_UART_Receive_DMA+0x24>
 8008b12:	88fb      	ldrh	r3, [r7, #6]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e030      	b.n	8008b7e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a18      	ldr	r2, [pc, #96]	@ (8008b88 <HAL_UART_Receive_DMA+0x94>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d01f      	beq.n	8008b6c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d018      	beq.n	8008b6c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	e853 3f00 	ldrex	r3, [r3]
 8008b46:	613b      	str	r3, [r7, #16]
   return(result);
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	461a      	mov	r2, r3
 8008b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b58:	623b      	str	r3, [r7, #32]
 8008b5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5c:	69f9      	ldr	r1, [r7, #28]
 8008b5e:	6a3a      	ldr	r2, [r7, #32]
 8008b60:	e841 2300 	strex	r3, r2, [r1]
 8008b64:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1e6      	bne.n	8008b3a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008b6c:	88fb      	ldrh	r3, [r7, #6]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	68b9      	ldr	r1, [r7, #8]
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f001 f8d6 	bl	8009d24 <UART_Start_Receive_DMA>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	e000      	b.n	8008b7e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008b7c:	2302      	movs	r3, #2
  }
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3728      	adds	r7, #40	@ 0x28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	40008000 	.word	0x40008000

08008b8c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b090      	sub	sp, #64	@ 0x40
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ba2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bae:	2b80      	cmp	r3, #128	@ 0x80
 8008bb0:	d139      	bne.n	8008c26 <HAL_UART_DMAStop+0x9a>
 8008bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bb4:	2b21      	cmp	r3, #33	@ 0x21
 8008bb6:	d136      	bne.n	8008c26 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	e853 3f00 	ldrex	r3, [r3]
 8008bc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3308      	adds	r3, #8
 8008bd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008bda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008be0:	e841 2300 	strex	r3, r2, [r1]
 8008be4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1e5      	bne.n	8008bb8 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d015      	beq.n	8008c20 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fc ff54 	bl	8005aa6 <HAL_DMA_Abort>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00d      	beq.n	8008c20 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7fd f8bb 	bl	8005d84 <HAL_DMA_GetError>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b20      	cmp	r3, #32
 8008c12:	d105      	bne.n	8008c20 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2210      	movs	r2, #16
 8008c18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e047      	b.n	8008cb0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 f925 	bl	8009e70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c30:	2b40      	cmp	r3, #64	@ 0x40
 8008c32:	d13c      	bne.n	8008cae <HAL_UART_DMAStop+0x122>
 8008c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c36:	2b22      	cmp	r3, #34	@ 0x22
 8008c38:	d139      	bne.n	8008cae <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3308      	adds	r3, #8
 8008c40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	e853 3f00 	ldrex	r3, [r3]
 8008c48:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3308      	adds	r3, #8
 8008c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c5a:	61ba      	str	r2, [r7, #24]
 8008c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5e:	6979      	ldr	r1, [r7, #20]
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	e841 2300 	strex	r3, r2, [r1]
 8008c66:	613b      	str	r3, [r7, #16]
   return(result);
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1e5      	bne.n	8008c3a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d017      	beq.n	8008ca8 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fc ff11 	bl	8005aa6 <HAL_DMA_Abort>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00e      	beq.n	8008ca8 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fd f877 	bl	8005d84 <HAL_DMA_GetError>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b20      	cmp	r3, #32
 8008c9a:	d105      	bne.n	8008ca8 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2210      	movs	r2, #16
 8008ca0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e003      	b.n	8008cb0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f001 f922 	bl	8009ef2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3740      	adds	r7, #64	@ 0x40
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b0ba      	sub	sp, #232	@ 0xe8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008cde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008ce2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008cec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d11b      	bne.n	8008d2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cf8:	f003 0320 	and.w	r3, r3, #32
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d015      	beq.n	8008d2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d04:	f003 0320 	and.w	r3, r3, #32
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d105      	bne.n	8008d18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d009      	beq.n	8008d2c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 8300 	beq.w	8009322 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	4798      	blx	r3
      }
      return;
 8008d2a:	e2fa      	b.n	8009322 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008d2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 8123 	beq.w	8008f7c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008d3a:	4b8d      	ldr	r3, [pc, #564]	@ (8008f70 <HAL_UART_IRQHandler+0x2b8>)
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d106      	bne.n	8008d50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008d46:	4b8b      	ldr	r3, [pc, #556]	@ (8008f74 <HAL_UART_IRQHandler+0x2bc>)
 8008d48:	4013      	ands	r3, r2
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f000 8116 	beq.w	8008f7c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d011      	beq.n	8008d80 <HAL_UART_IRQHandler+0xc8>
 8008d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00b      	beq.n	8008d80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d76:	f043 0201 	orr.w	r2, r3, #1
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d84:	f003 0302 	and.w	r3, r3, #2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d011      	beq.n	8008db0 <HAL_UART_IRQHandler+0xf8>
 8008d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d90:	f003 0301 	and.w	r3, r3, #1
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00b      	beq.n	8008db0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2202      	movs	r2, #2
 8008d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008da6:	f043 0204 	orr.w	r2, r3, #4
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008db4:	f003 0304 	and.w	r3, r3, #4
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d011      	beq.n	8008de0 <HAL_UART_IRQHandler+0x128>
 8008dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00b      	beq.n	8008de0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2204      	movs	r2, #4
 8008dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dd6:	f043 0202 	orr.w	r2, r3, #2
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de4:	f003 0308 	and.w	r3, r3, #8
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d017      	beq.n	8008e1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008df0:	f003 0320 	and.w	r3, r3, #32
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d105      	bne.n	8008e04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008df8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8008f70 <HAL_UART_IRQHandler+0x2b8>)
 8008dfe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00b      	beq.n	8008e1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2208      	movs	r2, #8
 8008e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e12:	f043 0208 	orr.w	r2, r3, #8
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d012      	beq.n	8008e4e <HAL_UART_IRQHandler+0x196>
 8008e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00c      	beq.n	8008e4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e44:	f043 0220 	orr.w	r2, r3, #32
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 8266 	beq.w	8009326 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e5e:	f003 0320 	and.w	r3, r3, #32
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d013      	beq.n	8008e8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e6a:	f003 0320 	and.w	r3, r3, #32
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d105      	bne.n	8008e7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d007      	beq.n	8008e8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ea2:	2b40      	cmp	r3, #64	@ 0x40
 8008ea4:	d005      	beq.n	8008eb2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008eaa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d054      	beq.n	8008f5c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 f81d 	bl	8009ef2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ec2:	2b40      	cmp	r3, #64	@ 0x40
 8008ec4:	d146      	bne.n	8008f54 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3308      	adds	r3, #8
 8008ecc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ed4:	e853 3f00 	ldrex	r3, [r3]
 8008ed8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3308      	adds	r3, #8
 8008eee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008ef2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008efe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f02:	e841 2300 	strex	r3, r2, [r1]
 8008f06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1d9      	bne.n	8008ec6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d017      	beq.n	8008f4c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f22:	4a15      	ldr	r2, [pc, #84]	@ (8008f78 <HAL_UART_IRQHandler+0x2c0>)
 8008f24:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fc fe13 	bl	8005b58 <HAL_DMA_Abort_IT>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d019      	beq.n	8008f6c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008f46:	4610      	mov	r0, r2
 8008f48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f4a:	e00f      	b.n	8008f6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fa1d 	bl	800938c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f52:	e00b      	b.n	8008f6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fa19 	bl	800938c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f5a:	e007      	b.n	8008f6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fa15 	bl	800938c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008f6a:	e1dc      	b.n	8009326 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f6c:	bf00      	nop
    return;
 8008f6e:	e1da      	b.n	8009326 <HAL_UART_IRQHandler+0x66e>
 8008f70:	10000001 	.word	0x10000001
 8008f74:	04000120 	.word	0x04000120
 8008f78:	0800a25f 	.word	0x0800a25f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	f040 8170 	bne.w	8009266 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f8a:	f003 0310 	and.w	r3, r3, #16
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 8169 	beq.w	8009266 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f98:	f003 0310 	and.w	r3, r3, #16
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 8162 	beq.w	8009266 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2210      	movs	r2, #16
 8008fa8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fb4:	2b40      	cmp	r3, #64	@ 0x40
 8008fb6:	f040 80d8 	bne.w	800916a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f000 80af 	beq.w	8009130 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	f080 80a7 	bcs.w	8009130 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fe8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0320 	and.w	r3, r3, #32
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f040 8087 	bne.w	800910e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009008:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800900c:	e853 3f00 	ldrex	r3, [r3]
 8009010:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009014:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800901c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	461a      	mov	r2, r3
 8009026:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800902a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800902e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009032:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009036:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800903a:	e841 2300 	strex	r3, r2, [r1]
 800903e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009042:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1da      	bne.n	8009000 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3308      	adds	r3, #8
 8009050:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009054:	e853 3f00 	ldrex	r3, [r3]
 8009058:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800905a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800905c:	f023 0301 	bic.w	r3, r3, #1
 8009060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3308      	adds	r3, #8
 800906a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800906e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009072:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009074:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009076:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009080:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1e1      	bne.n	800904a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3308      	adds	r3, #8
 800908c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009090:	e853 3f00 	ldrex	r3, [r3]
 8009094:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009098:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800909c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3308      	adds	r3, #8
 80090a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80090aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80090ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80090b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090b2:	e841 2300 	strex	r3, r2, [r1]
 80090b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80090b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1e3      	bne.n	8009086 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2220      	movs	r2, #32
 80090c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090d4:	e853 3f00 	ldrex	r3, [r3]
 80090d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80090da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090dc:	f023 0310 	bic.w	r3, r3, #16
 80090e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	461a      	mov	r2, r3
 80090ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1e4      	bne.n	80090cc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009108:	4618      	mov	r0, r3
 800910a:	f7fc fccc 	bl	8005aa6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2202      	movs	r2, #2
 8009112:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009120:	b29b      	uxth	r3, r3
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	b29b      	uxth	r3, r3
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f939 	bl	80093a0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800912e:	e0fc      	b.n	800932a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800913a:	429a      	cmp	r2, r3
 800913c:	f040 80f5 	bne.w	800932a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0320 	and.w	r3, r3, #32
 800914e:	2b20      	cmp	r3, #32
 8009150:	f040 80eb 	bne.w	800932a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2202      	movs	r2, #2
 8009158:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009160:	4619      	mov	r1, r3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f91c 	bl	80093a0 <HAL_UARTEx_RxEventCallback>
      return;
 8009168:	e0df      	b.n	800932a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009176:	b29b      	uxth	r3, r3
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009184:	b29b      	uxth	r3, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 80d1 	beq.w	800932e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800918c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009190:	2b00      	cmp	r3, #0
 8009192:	f000 80cc 	beq.w	800932e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919e:	e853 3f00 	ldrex	r3, [r3]
 80091a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	461a      	mov	r2, r3
 80091b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80091b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80091ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091c0:	e841 2300 	strex	r3, r2, [r1]
 80091c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1e4      	bne.n	8009196 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3308      	adds	r3, #8
 80091d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d6:	e853 3f00 	ldrex	r3, [r3]
 80091da:	623b      	str	r3, [r7, #32]
   return(result);
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091e2:	f023 0301 	bic.w	r3, r3, #1
 80091e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3308      	adds	r3, #8
 80091f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80091f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80091f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091fc:	e841 2300 	strex	r3, r2, [r1]
 8009200:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1e1      	bne.n	80091cc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2220      	movs	r2, #32
 800920c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	e853 3f00 	ldrex	r3, [r3]
 8009228:	60fb      	str	r3, [r7, #12]
   return(result);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f023 0310 	bic.w	r3, r3, #16
 8009230:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	461a      	mov	r2, r3
 800923a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800923e:	61fb      	str	r3, [r7, #28]
 8009240:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009242:	69b9      	ldr	r1, [r7, #24]
 8009244:	69fa      	ldr	r2, [r7, #28]
 8009246:	e841 2300 	strex	r3, r2, [r1]
 800924a:	617b      	str	r3, [r7, #20]
   return(result);
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1e4      	bne.n	800921c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2202      	movs	r2, #2
 8009256:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009258:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800925c:	4619      	mov	r1, r3
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f89e 	bl	80093a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009264:	e063      	b.n	800932e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800926a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00e      	beq.n	8009290 <HAL_UART_IRQHandler+0x5d8>
 8009272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d008      	beq.n	8009290 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009286:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f001 f825 	bl	800a2d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800928e:	e051      	b.n	8009334 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009298:	2b00      	cmp	r3, #0
 800929a:	d014      	beq.n	80092c6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800929c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d105      	bne.n	80092b4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80092a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d008      	beq.n	80092c6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d03a      	beq.n	8009332 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	4798      	blx	r3
    }
    return;
 80092c4:	e035      	b.n	8009332 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80092c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d009      	beq.n	80092e6 <HAL_UART_IRQHandler+0x62e>
 80092d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d003      	beq.n	80092e6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 ffcf 	bl	800a282 <UART_EndTransmit_IT>
    return;
 80092e4:	e026      	b.n	8009334 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80092e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d009      	beq.n	8009306 <HAL_UART_IRQHandler+0x64e>
 80092f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092f6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d003      	beq.n	8009306 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fffe 	bl	800a300 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009304:	e016      	b.n	8009334 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800930a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d010      	beq.n	8009334 <HAL_UART_IRQHandler+0x67c>
 8009312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009316:	2b00      	cmp	r3, #0
 8009318:	da0c      	bge.n	8009334 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 ffe6 	bl	800a2ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009320:	e008      	b.n	8009334 <HAL_UART_IRQHandler+0x67c>
      return;
 8009322:	bf00      	nop
 8009324:	e006      	b.n	8009334 <HAL_UART_IRQHandler+0x67c>
    return;
 8009326:	bf00      	nop
 8009328:	e004      	b.n	8009334 <HAL_UART_IRQHandler+0x67c>
      return;
 800932a:	bf00      	nop
 800932c:	e002      	b.n	8009334 <HAL_UART_IRQHandler+0x67c>
      return;
 800932e:	bf00      	nop
 8009330:	e000      	b.n	8009334 <HAL_UART_IRQHandler+0x67c>
    return;
 8009332:	bf00      	nop
  }
}
 8009334:	37e8      	adds	r7, #232	@ 0xe8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop

0800933c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	460b      	mov	r3, r1
 80093aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093bc:	b08c      	sub	sp, #48	@ 0x30
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	689a      	ldr	r2, [r3, #8]
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	431a      	orrs	r2, r3
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	431a      	orrs	r2, r3
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	69db      	ldr	r3, [r3, #28]
 80093dc:	4313      	orrs	r3, r2
 80093de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	4baa      	ldr	r3, [pc, #680]	@ (8009690 <UART_SetConfig+0x2d8>)
 80093e8:	4013      	ands	r3, r2
 80093ea:	697a      	ldr	r2, [r7, #20]
 80093ec:	6812      	ldr	r2, [r2, #0]
 80093ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093f0:	430b      	orrs	r3, r1
 80093f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a9f      	ldr	r2, [pc, #636]	@ (8009694 <UART_SetConfig+0x2dc>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d004      	beq.n	8009424 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	6a1b      	ldr	r3, [r3, #32]
 800941e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009420:	4313      	orrs	r3, r2
 8009422:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800942e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009432:	697a      	ldr	r2, [r7, #20]
 8009434:	6812      	ldr	r2, [r2, #0]
 8009436:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009438:	430b      	orrs	r3, r1
 800943a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009442:	f023 010f 	bic.w	r1, r3, #15
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	430a      	orrs	r2, r1
 8009450:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a90      	ldr	r2, [pc, #576]	@ (8009698 <UART_SetConfig+0x2e0>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d125      	bne.n	80094a8 <UART_SetConfig+0xf0>
 800945c:	4b8f      	ldr	r3, [pc, #572]	@ (800969c <UART_SetConfig+0x2e4>)
 800945e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009462:	f003 0303 	and.w	r3, r3, #3
 8009466:	2b03      	cmp	r3, #3
 8009468:	d81a      	bhi.n	80094a0 <UART_SetConfig+0xe8>
 800946a:	a201      	add	r2, pc, #4	@ (adr r2, 8009470 <UART_SetConfig+0xb8>)
 800946c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009470:	08009481 	.word	0x08009481
 8009474:	08009491 	.word	0x08009491
 8009478:	08009489 	.word	0x08009489
 800947c:	08009499 	.word	0x08009499
 8009480:	2301      	movs	r3, #1
 8009482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009486:	e116      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009488:	2302      	movs	r3, #2
 800948a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800948e:	e112      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009490:	2304      	movs	r3, #4
 8009492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009496:	e10e      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009498:	2308      	movs	r3, #8
 800949a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800949e:	e10a      	b.n	80096b6 <UART_SetConfig+0x2fe>
 80094a0:	2310      	movs	r3, #16
 80094a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094a6:	e106      	b.n	80096b6 <UART_SetConfig+0x2fe>
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a7c      	ldr	r2, [pc, #496]	@ (80096a0 <UART_SetConfig+0x2e8>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d138      	bne.n	8009524 <UART_SetConfig+0x16c>
 80094b2:	4b7a      	ldr	r3, [pc, #488]	@ (800969c <UART_SetConfig+0x2e4>)
 80094b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094b8:	f003 030c 	and.w	r3, r3, #12
 80094bc:	2b0c      	cmp	r3, #12
 80094be:	d82d      	bhi.n	800951c <UART_SetConfig+0x164>
 80094c0:	a201      	add	r2, pc, #4	@ (adr r2, 80094c8 <UART_SetConfig+0x110>)
 80094c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c6:	bf00      	nop
 80094c8:	080094fd 	.word	0x080094fd
 80094cc:	0800951d 	.word	0x0800951d
 80094d0:	0800951d 	.word	0x0800951d
 80094d4:	0800951d 	.word	0x0800951d
 80094d8:	0800950d 	.word	0x0800950d
 80094dc:	0800951d 	.word	0x0800951d
 80094e0:	0800951d 	.word	0x0800951d
 80094e4:	0800951d 	.word	0x0800951d
 80094e8:	08009505 	.word	0x08009505
 80094ec:	0800951d 	.word	0x0800951d
 80094f0:	0800951d 	.word	0x0800951d
 80094f4:	0800951d 	.word	0x0800951d
 80094f8:	08009515 	.word	0x08009515
 80094fc:	2300      	movs	r3, #0
 80094fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009502:	e0d8      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009504:	2302      	movs	r3, #2
 8009506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800950a:	e0d4      	b.n	80096b6 <UART_SetConfig+0x2fe>
 800950c:	2304      	movs	r3, #4
 800950e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009512:	e0d0      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009514:	2308      	movs	r3, #8
 8009516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800951a:	e0cc      	b.n	80096b6 <UART_SetConfig+0x2fe>
 800951c:	2310      	movs	r3, #16
 800951e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009522:	e0c8      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a5e      	ldr	r2, [pc, #376]	@ (80096a4 <UART_SetConfig+0x2ec>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d125      	bne.n	800957a <UART_SetConfig+0x1c2>
 800952e:	4b5b      	ldr	r3, [pc, #364]	@ (800969c <UART_SetConfig+0x2e4>)
 8009530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009534:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009538:	2b30      	cmp	r3, #48	@ 0x30
 800953a:	d016      	beq.n	800956a <UART_SetConfig+0x1b2>
 800953c:	2b30      	cmp	r3, #48	@ 0x30
 800953e:	d818      	bhi.n	8009572 <UART_SetConfig+0x1ba>
 8009540:	2b20      	cmp	r3, #32
 8009542:	d00a      	beq.n	800955a <UART_SetConfig+0x1a2>
 8009544:	2b20      	cmp	r3, #32
 8009546:	d814      	bhi.n	8009572 <UART_SetConfig+0x1ba>
 8009548:	2b00      	cmp	r3, #0
 800954a:	d002      	beq.n	8009552 <UART_SetConfig+0x19a>
 800954c:	2b10      	cmp	r3, #16
 800954e:	d008      	beq.n	8009562 <UART_SetConfig+0x1aa>
 8009550:	e00f      	b.n	8009572 <UART_SetConfig+0x1ba>
 8009552:	2300      	movs	r3, #0
 8009554:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009558:	e0ad      	b.n	80096b6 <UART_SetConfig+0x2fe>
 800955a:	2302      	movs	r3, #2
 800955c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009560:	e0a9      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009562:	2304      	movs	r3, #4
 8009564:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009568:	e0a5      	b.n	80096b6 <UART_SetConfig+0x2fe>
 800956a:	2308      	movs	r3, #8
 800956c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009570:	e0a1      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009572:	2310      	movs	r3, #16
 8009574:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009578:	e09d      	b.n	80096b6 <UART_SetConfig+0x2fe>
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a4a      	ldr	r2, [pc, #296]	@ (80096a8 <UART_SetConfig+0x2f0>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d125      	bne.n	80095d0 <UART_SetConfig+0x218>
 8009584:	4b45      	ldr	r3, [pc, #276]	@ (800969c <UART_SetConfig+0x2e4>)
 8009586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800958a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800958e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009590:	d016      	beq.n	80095c0 <UART_SetConfig+0x208>
 8009592:	2bc0      	cmp	r3, #192	@ 0xc0
 8009594:	d818      	bhi.n	80095c8 <UART_SetConfig+0x210>
 8009596:	2b80      	cmp	r3, #128	@ 0x80
 8009598:	d00a      	beq.n	80095b0 <UART_SetConfig+0x1f8>
 800959a:	2b80      	cmp	r3, #128	@ 0x80
 800959c:	d814      	bhi.n	80095c8 <UART_SetConfig+0x210>
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d002      	beq.n	80095a8 <UART_SetConfig+0x1f0>
 80095a2:	2b40      	cmp	r3, #64	@ 0x40
 80095a4:	d008      	beq.n	80095b8 <UART_SetConfig+0x200>
 80095a6:	e00f      	b.n	80095c8 <UART_SetConfig+0x210>
 80095a8:	2300      	movs	r3, #0
 80095aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095ae:	e082      	b.n	80096b6 <UART_SetConfig+0x2fe>
 80095b0:	2302      	movs	r3, #2
 80095b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095b6:	e07e      	b.n	80096b6 <UART_SetConfig+0x2fe>
 80095b8:	2304      	movs	r3, #4
 80095ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095be:	e07a      	b.n	80096b6 <UART_SetConfig+0x2fe>
 80095c0:	2308      	movs	r3, #8
 80095c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095c6:	e076      	b.n	80096b6 <UART_SetConfig+0x2fe>
 80095c8:	2310      	movs	r3, #16
 80095ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095ce:	e072      	b.n	80096b6 <UART_SetConfig+0x2fe>
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a35      	ldr	r2, [pc, #212]	@ (80096ac <UART_SetConfig+0x2f4>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d12a      	bne.n	8009630 <UART_SetConfig+0x278>
 80095da:	4b30      	ldr	r3, [pc, #192]	@ (800969c <UART_SetConfig+0x2e4>)
 80095dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095e8:	d01a      	beq.n	8009620 <UART_SetConfig+0x268>
 80095ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095ee:	d81b      	bhi.n	8009628 <UART_SetConfig+0x270>
 80095f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095f4:	d00c      	beq.n	8009610 <UART_SetConfig+0x258>
 80095f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095fa:	d815      	bhi.n	8009628 <UART_SetConfig+0x270>
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d003      	beq.n	8009608 <UART_SetConfig+0x250>
 8009600:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009604:	d008      	beq.n	8009618 <UART_SetConfig+0x260>
 8009606:	e00f      	b.n	8009628 <UART_SetConfig+0x270>
 8009608:	2300      	movs	r3, #0
 800960a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800960e:	e052      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009610:	2302      	movs	r3, #2
 8009612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009616:	e04e      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009618:	2304      	movs	r3, #4
 800961a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800961e:	e04a      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009620:	2308      	movs	r3, #8
 8009622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009626:	e046      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009628:	2310      	movs	r3, #16
 800962a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800962e:	e042      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a17      	ldr	r2, [pc, #92]	@ (8009694 <UART_SetConfig+0x2dc>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d13a      	bne.n	80096b0 <UART_SetConfig+0x2f8>
 800963a:	4b18      	ldr	r3, [pc, #96]	@ (800969c <UART_SetConfig+0x2e4>)
 800963c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009640:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009644:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009648:	d01a      	beq.n	8009680 <UART_SetConfig+0x2c8>
 800964a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800964e:	d81b      	bhi.n	8009688 <UART_SetConfig+0x2d0>
 8009650:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009654:	d00c      	beq.n	8009670 <UART_SetConfig+0x2b8>
 8009656:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800965a:	d815      	bhi.n	8009688 <UART_SetConfig+0x2d0>
 800965c:	2b00      	cmp	r3, #0
 800965e:	d003      	beq.n	8009668 <UART_SetConfig+0x2b0>
 8009660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009664:	d008      	beq.n	8009678 <UART_SetConfig+0x2c0>
 8009666:	e00f      	b.n	8009688 <UART_SetConfig+0x2d0>
 8009668:	2300      	movs	r3, #0
 800966a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800966e:	e022      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009670:	2302      	movs	r3, #2
 8009672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009676:	e01e      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009678:	2304      	movs	r3, #4
 800967a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800967e:	e01a      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009680:	2308      	movs	r3, #8
 8009682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009686:	e016      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009688:	2310      	movs	r3, #16
 800968a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800968e:	e012      	b.n	80096b6 <UART_SetConfig+0x2fe>
 8009690:	cfff69f3 	.word	0xcfff69f3
 8009694:	40008000 	.word	0x40008000
 8009698:	40013800 	.word	0x40013800
 800969c:	40021000 	.word	0x40021000
 80096a0:	40004400 	.word	0x40004400
 80096a4:	40004800 	.word	0x40004800
 80096a8:	40004c00 	.word	0x40004c00
 80096ac:	40005000 	.word	0x40005000
 80096b0:	2310      	movs	r3, #16
 80096b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4aae      	ldr	r2, [pc, #696]	@ (8009974 <UART_SetConfig+0x5bc>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	f040 8097 	bne.w	80097f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80096c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80096c6:	2b08      	cmp	r3, #8
 80096c8:	d823      	bhi.n	8009712 <UART_SetConfig+0x35a>
 80096ca:	a201      	add	r2, pc, #4	@ (adr r2, 80096d0 <UART_SetConfig+0x318>)
 80096cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d0:	080096f5 	.word	0x080096f5
 80096d4:	08009713 	.word	0x08009713
 80096d8:	080096fd 	.word	0x080096fd
 80096dc:	08009713 	.word	0x08009713
 80096e0:	08009703 	.word	0x08009703
 80096e4:	08009713 	.word	0x08009713
 80096e8:	08009713 	.word	0x08009713
 80096ec:	08009713 	.word	0x08009713
 80096f0:	0800970b 	.word	0x0800970b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096f4:	f7fe faf0 	bl	8007cd8 <HAL_RCC_GetPCLK1Freq>
 80096f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096fa:	e010      	b.n	800971e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096fc:	4b9e      	ldr	r3, [pc, #632]	@ (8009978 <UART_SetConfig+0x5c0>)
 80096fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009700:	e00d      	b.n	800971e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009702:	f7fe fa7b 	bl	8007bfc <HAL_RCC_GetSysClockFreq>
 8009706:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009708:	e009      	b.n	800971e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800970a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800970e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009710:	e005      	b.n	800971e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009712:	2300      	movs	r3, #0
 8009714:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800971c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800971e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009720:	2b00      	cmp	r3, #0
 8009722:	f000 8130 	beq.w	8009986 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800972a:	4a94      	ldr	r2, [pc, #592]	@ (800997c <UART_SetConfig+0x5c4>)
 800972c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009730:	461a      	mov	r2, r3
 8009732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009734:	fbb3 f3f2 	udiv	r3, r3, r2
 8009738:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	4613      	mov	r3, r2
 8009740:	005b      	lsls	r3, r3, #1
 8009742:	4413      	add	r3, r2
 8009744:	69ba      	ldr	r2, [r7, #24]
 8009746:	429a      	cmp	r2, r3
 8009748:	d305      	bcc.n	8009756 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009750:	69ba      	ldr	r2, [r7, #24]
 8009752:	429a      	cmp	r2, r3
 8009754:	d903      	bls.n	800975e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800975c:	e113      	b.n	8009986 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800975e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009760:	2200      	movs	r2, #0
 8009762:	60bb      	str	r3, [r7, #8]
 8009764:	60fa      	str	r2, [r7, #12]
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800976a:	4a84      	ldr	r2, [pc, #528]	@ (800997c <UART_SetConfig+0x5c4>)
 800976c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009770:	b29b      	uxth	r3, r3
 8009772:	2200      	movs	r2, #0
 8009774:	603b      	str	r3, [r7, #0]
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800977c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009780:	f7f7 fa72 	bl	8000c68 <__aeabi_uldivmod>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	4610      	mov	r0, r2
 800978a:	4619      	mov	r1, r3
 800978c:	f04f 0200 	mov.w	r2, #0
 8009790:	f04f 0300 	mov.w	r3, #0
 8009794:	020b      	lsls	r3, r1, #8
 8009796:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800979a:	0202      	lsls	r2, r0, #8
 800979c:	6979      	ldr	r1, [r7, #20]
 800979e:	6849      	ldr	r1, [r1, #4]
 80097a0:	0849      	lsrs	r1, r1, #1
 80097a2:	2000      	movs	r0, #0
 80097a4:	460c      	mov	r4, r1
 80097a6:	4605      	mov	r5, r0
 80097a8:	eb12 0804 	adds.w	r8, r2, r4
 80097ac:	eb43 0905 	adc.w	r9, r3, r5
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	469a      	mov	sl, r3
 80097b8:	4693      	mov	fp, r2
 80097ba:	4652      	mov	r2, sl
 80097bc:	465b      	mov	r3, fp
 80097be:	4640      	mov	r0, r8
 80097c0:	4649      	mov	r1, r9
 80097c2:	f7f7 fa51 	bl	8000c68 <__aeabi_uldivmod>
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	4613      	mov	r3, r2
 80097cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80097ce:	6a3b      	ldr	r3, [r7, #32]
 80097d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097d4:	d308      	bcc.n	80097e8 <UART_SetConfig+0x430>
 80097d6:	6a3b      	ldr	r3, [r7, #32]
 80097d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097dc:	d204      	bcs.n	80097e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6a3a      	ldr	r2, [r7, #32]
 80097e4:	60da      	str	r2, [r3, #12]
 80097e6:	e0ce      	b.n	8009986 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80097ee:	e0ca      	b.n	8009986 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	69db      	ldr	r3, [r3, #28]
 80097f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097f8:	d166      	bne.n	80098c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80097fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80097fe:	2b08      	cmp	r3, #8
 8009800:	d827      	bhi.n	8009852 <UART_SetConfig+0x49a>
 8009802:	a201      	add	r2, pc, #4	@ (adr r2, 8009808 <UART_SetConfig+0x450>)
 8009804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009808:	0800982d 	.word	0x0800982d
 800980c:	08009835 	.word	0x08009835
 8009810:	0800983d 	.word	0x0800983d
 8009814:	08009853 	.word	0x08009853
 8009818:	08009843 	.word	0x08009843
 800981c:	08009853 	.word	0x08009853
 8009820:	08009853 	.word	0x08009853
 8009824:	08009853 	.word	0x08009853
 8009828:	0800984b 	.word	0x0800984b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800982c:	f7fe fa54 	bl	8007cd8 <HAL_RCC_GetPCLK1Freq>
 8009830:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009832:	e014      	b.n	800985e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009834:	f7fe fa66 	bl	8007d04 <HAL_RCC_GetPCLK2Freq>
 8009838:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800983a:	e010      	b.n	800985e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800983c:	4b4e      	ldr	r3, [pc, #312]	@ (8009978 <UART_SetConfig+0x5c0>)
 800983e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009840:	e00d      	b.n	800985e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009842:	f7fe f9db 	bl	8007bfc <HAL_RCC_GetSysClockFreq>
 8009846:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009848:	e009      	b.n	800985e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800984a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800984e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009850:	e005      	b.n	800985e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009852:	2300      	movs	r3, #0
 8009854:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800985c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800985e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 8090 	beq.w	8009986 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986a:	4a44      	ldr	r2, [pc, #272]	@ (800997c <UART_SetConfig+0x5c4>)
 800986c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009870:	461a      	mov	r2, r3
 8009872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009874:	fbb3 f3f2 	udiv	r3, r3, r2
 8009878:	005a      	lsls	r2, r3, #1
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	085b      	lsrs	r3, r3, #1
 8009880:	441a      	add	r2, r3
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	fbb2 f3f3 	udiv	r3, r2, r3
 800988a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800988c:	6a3b      	ldr	r3, [r7, #32]
 800988e:	2b0f      	cmp	r3, #15
 8009890:	d916      	bls.n	80098c0 <UART_SetConfig+0x508>
 8009892:	6a3b      	ldr	r3, [r7, #32]
 8009894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009898:	d212      	bcs.n	80098c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	b29b      	uxth	r3, r3
 800989e:	f023 030f 	bic.w	r3, r3, #15
 80098a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098a4:	6a3b      	ldr	r3, [r7, #32]
 80098a6:	085b      	lsrs	r3, r3, #1
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	f003 0307 	and.w	r3, r3, #7
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	8bfb      	ldrh	r3, [r7, #30]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	8bfa      	ldrh	r2, [r7, #30]
 80098bc:	60da      	str	r2, [r3, #12]
 80098be:	e062      	b.n	8009986 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80098c6:	e05e      	b.n	8009986 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80098c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80098cc:	2b08      	cmp	r3, #8
 80098ce:	d828      	bhi.n	8009922 <UART_SetConfig+0x56a>
 80098d0:	a201      	add	r2, pc, #4	@ (adr r2, 80098d8 <UART_SetConfig+0x520>)
 80098d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d6:	bf00      	nop
 80098d8:	080098fd 	.word	0x080098fd
 80098dc:	08009905 	.word	0x08009905
 80098e0:	0800990d 	.word	0x0800990d
 80098e4:	08009923 	.word	0x08009923
 80098e8:	08009913 	.word	0x08009913
 80098ec:	08009923 	.word	0x08009923
 80098f0:	08009923 	.word	0x08009923
 80098f4:	08009923 	.word	0x08009923
 80098f8:	0800991b 	.word	0x0800991b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098fc:	f7fe f9ec 	bl	8007cd8 <HAL_RCC_GetPCLK1Freq>
 8009900:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009902:	e014      	b.n	800992e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009904:	f7fe f9fe 	bl	8007d04 <HAL_RCC_GetPCLK2Freq>
 8009908:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800990a:	e010      	b.n	800992e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800990c:	4b1a      	ldr	r3, [pc, #104]	@ (8009978 <UART_SetConfig+0x5c0>)
 800990e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009910:	e00d      	b.n	800992e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009912:	f7fe f973 	bl	8007bfc <HAL_RCC_GetSysClockFreq>
 8009916:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009918:	e009      	b.n	800992e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800991a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800991e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009920:	e005      	b.n	800992e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009922:	2300      	movs	r3, #0
 8009924:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800992c:	bf00      	nop
    }

    if (pclk != 0U)
 800992e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009930:	2b00      	cmp	r3, #0
 8009932:	d028      	beq.n	8009986 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009938:	4a10      	ldr	r2, [pc, #64]	@ (800997c <UART_SetConfig+0x5c4>)
 800993a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800993e:	461a      	mov	r2, r3
 8009940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009942:	fbb3 f2f2 	udiv	r2, r3, r2
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	085b      	lsrs	r3, r3, #1
 800994c:	441a      	add	r2, r3
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	fbb2 f3f3 	udiv	r3, r2, r3
 8009956:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009958:	6a3b      	ldr	r3, [r7, #32]
 800995a:	2b0f      	cmp	r3, #15
 800995c:	d910      	bls.n	8009980 <UART_SetConfig+0x5c8>
 800995e:	6a3b      	ldr	r3, [r7, #32]
 8009960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009964:	d20c      	bcs.n	8009980 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	b29a      	uxth	r2, r3
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	60da      	str	r2, [r3, #12]
 8009970:	e009      	b.n	8009986 <UART_SetConfig+0x5ce>
 8009972:	bf00      	nop
 8009974:	40008000 	.word	0x40008000
 8009978:	00f42400 	.word	0x00f42400
 800997c:	0801dd24 	.word	0x0801dd24
      }
      else
      {
        ret = HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	2201      	movs	r2, #1
 800998a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	2201      	movs	r2, #1
 8009992:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2200      	movs	r2, #0
 800999a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	2200      	movs	r2, #0
 80099a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80099a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3730      	adds	r7, #48	@ 0x30
 80099aa:	46bd      	mov	sp, r7
 80099ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080099b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099bc:	f003 0308 	and.w	r3, r3, #8
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00a      	beq.n	80099da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	430a      	orrs	r2, r1
 80099d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00a      	beq.n	80099fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	430a      	orrs	r2, r1
 80099fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a00:	f003 0302 	and.w	r3, r3, #2
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00a      	beq.n	8009a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a22:	f003 0304 	and.w	r3, r3, #4
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	430a      	orrs	r2, r1
 8009a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a44:	f003 0310 	and.w	r3, r3, #16
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00a      	beq.n	8009a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	430a      	orrs	r2, r1
 8009a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a66:	f003 0320 	and.w	r3, r3, #32
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00a      	beq.n	8009a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	430a      	orrs	r2, r1
 8009a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d01a      	beq.n	8009ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	430a      	orrs	r2, r1
 8009aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009aae:	d10a      	bne.n	8009ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00a      	beq.n	8009ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	605a      	str	r2, [r3, #4]
  }
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b098      	sub	sp, #96	@ 0x60
 8009af8:	af02      	add	r7, sp, #8
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b04:	f7f9 fe8a 	bl	800381c <HAL_GetTick>
 8009b08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0308 	and.w	r3, r3, #8
 8009b14:	2b08      	cmp	r3, #8
 8009b16:	d12f      	bne.n	8009b78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b20:	2200      	movs	r2, #0
 8009b22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f88e 	bl	8009c48 <UART_WaitOnFlagUntilTimeout>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d022      	beq.n	8009b78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3a:	e853 3f00 	ldrex	r3, [r3]
 8009b3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b46:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b52:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b58:	e841 2300 	strex	r3, r2, [r1]
 8009b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1e6      	bne.n	8009b32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2220      	movs	r2, #32
 8009b68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e063      	b.n	8009c40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 0304 	and.w	r3, r3, #4
 8009b82:	2b04      	cmp	r3, #4
 8009b84:	d149      	bne.n	8009c1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b86:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f857 	bl	8009c48 <UART_WaitOnFlagUntilTimeout>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d03c      	beq.n	8009c1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba8:	e853 3f00 	ldrex	r3, [r3]
 8009bac:	623b      	str	r3, [r7, #32]
   return(result);
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bc6:	e841 2300 	strex	r3, r2, [r1]
 8009bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1e6      	bne.n	8009ba0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	3308      	adds	r3, #8
 8009bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	e853 3f00 	ldrex	r3, [r3]
 8009be0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f023 0301 	bic.w	r3, r3, #1
 8009be8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	3308      	adds	r3, #8
 8009bf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bf2:	61fa      	str	r2, [r7, #28]
 8009bf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf6:	69b9      	ldr	r1, [r7, #24]
 8009bf8:	69fa      	ldr	r2, [r7, #28]
 8009bfa:	e841 2300 	strex	r3, r2, [r1]
 8009bfe:	617b      	str	r3, [r7, #20]
   return(result);
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1e5      	bne.n	8009bd2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2220      	movs	r2, #32
 8009c0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c16:	2303      	movs	r3, #3
 8009c18:	e012      	b.n	8009c40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2220      	movs	r2, #32
 8009c1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2220      	movs	r2, #32
 8009c26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3758      	adds	r7, #88	@ 0x58
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	603b      	str	r3, [r7, #0]
 8009c54:	4613      	mov	r3, r2
 8009c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c58:	e04f      	b.n	8009cfa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c60:	d04b      	beq.n	8009cfa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c62:	f7f9 fddb 	bl	800381c <HAL_GetTick>
 8009c66:	4602      	mov	r2, r0
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	69ba      	ldr	r2, [r7, #24]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d302      	bcc.n	8009c78 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d101      	bne.n	8009c7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e04e      	b.n	8009d1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 0304 	and.w	r3, r3, #4
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d037      	beq.n	8009cfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	2b80      	cmp	r3, #128	@ 0x80
 8009c8e:	d034      	beq.n	8009cfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	2b40      	cmp	r3, #64	@ 0x40
 8009c94:	d031      	beq.n	8009cfa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	69db      	ldr	r3, [r3, #28]
 8009c9c:	f003 0308 	and.w	r3, r3, #8
 8009ca0:	2b08      	cmp	r3, #8
 8009ca2:	d110      	bne.n	8009cc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2208      	movs	r2, #8
 8009caa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 f920 	bl	8009ef2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2208      	movs	r2, #8
 8009cb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e029      	b.n	8009d1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	69db      	ldr	r3, [r3, #28]
 8009ccc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009cd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cd4:	d111      	bne.n	8009cfa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 f906 	bl	8009ef2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	e00f      	b.n	8009d1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	69da      	ldr	r2, [r3, #28]
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	4013      	ands	r3, r2
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	bf0c      	ite	eq
 8009d0a:	2301      	moveq	r3, #1
 8009d0c:	2300      	movne	r3, #0
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	461a      	mov	r2, r3
 8009d12:	79fb      	ldrb	r3, [r7, #7]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d0a0      	beq.n	8009c5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
	...

08009d24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b096      	sub	sp, #88	@ 0x58
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	68ba      	ldr	r2, [r7, #8]
 8009d36:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	88fa      	ldrh	r2, [r7, #6]
 8009d3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2222      	movs	r2, #34	@ 0x22
 8009d4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d02d      	beq.n	8009db6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d60:	4a40      	ldr	r2, [pc, #256]	@ (8009e64 <UART_Start_Receive_DMA+0x140>)
 8009d62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d6a:	4a3f      	ldr	r2, [pc, #252]	@ (8009e68 <UART_Start_Receive_DMA+0x144>)
 8009d6c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d74:	4a3d      	ldr	r2, [pc, #244]	@ (8009e6c <UART_Start_Receive_DMA+0x148>)
 8009d76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d7e:	2200      	movs	r2, #0
 8009d80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	3324      	adds	r3, #36	@ 0x24
 8009d8e:	4619      	mov	r1, r3
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d94:	461a      	mov	r2, r3
 8009d96:	88fb      	ldrh	r3, [r7, #6]
 8009d98:	f7fb fe0a 	bl	80059b0 <HAL_DMA_Start_IT>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d009      	beq.n	8009db6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2210      	movs	r2, #16
 8009da6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2220      	movs	r2, #32
 8009dae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e051      	b.n	8009e5a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d018      	beq.n	8009df0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc6:	e853 3f00 	ldrex	r3, [r3]
 8009dca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009dd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dde:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009de2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009de4:	e841 2300 	strex	r3, r2, [r1]
 8009de8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009dea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1e6      	bne.n	8009dbe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3308      	adds	r3, #8
 8009df6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfa:	e853 3f00 	ldrex	r3, [r3]
 8009dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e02:	f043 0301 	orr.w	r3, r3, #1
 8009e06:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	3308      	adds	r3, #8
 8009e0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009e10:	637a      	str	r2, [r7, #52]	@ 0x34
 8009e12:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e18:	e841 2300 	strex	r3, r2, [r1]
 8009e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1e5      	bne.n	8009df0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	3308      	adds	r3, #8
 8009e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	e853 3f00 	ldrex	r3, [r3]
 8009e32:	613b      	str	r3, [r7, #16]
   return(result);
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	3308      	adds	r3, #8
 8009e42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e44:	623a      	str	r2, [r7, #32]
 8009e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e48:	69f9      	ldr	r1, [r7, #28]
 8009e4a:	6a3a      	ldr	r2, [r7, #32]
 8009e4c:	e841 2300 	strex	r3, r2, [r1]
 8009e50:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1e5      	bne.n	8009e24 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3758      	adds	r7, #88	@ 0x58
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	0800a075 	.word	0x0800a075
 8009e68:	0800a1a1 	.word	0x0800a1a1
 8009e6c:	0800a1df 	.word	0x0800a1df

08009e70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b08f      	sub	sp, #60	@ 0x3c
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7e:	6a3b      	ldr	r3, [r7, #32]
 8009e80:	e853 3f00 	ldrex	r3, [r3]
 8009e84:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	461a      	mov	r2, r3
 8009e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e98:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e9e:	e841 2300 	strex	r3, r2, [r1]
 8009ea2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1e6      	bne.n	8009e78 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	3308      	adds	r3, #8
 8009eb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	e853 3f00 	ldrex	r3, [r3]
 8009eb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009ec0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	3308      	adds	r3, #8
 8009ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eca:	61ba      	str	r2, [r7, #24]
 8009ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ece:	6979      	ldr	r1, [r7, #20]
 8009ed0:	69ba      	ldr	r2, [r7, #24]
 8009ed2:	e841 2300 	strex	r3, r2, [r1]
 8009ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1e5      	bne.n	8009eaa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2220      	movs	r2, #32
 8009ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009ee6:	bf00      	nop
 8009ee8:	373c      	adds	r7, #60	@ 0x3c
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b095      	sub	sp, #84	@ 0x54
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f02:	e853 3f00 	ldrex	r3, [r3]
 8009f06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	461a      	mov	r2, r3
 8009f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f18:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f20:	e841 2300 	strex	r3, r2, [r1]
 8009f24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1e6      	bne.n	8009efa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3308      	adds	r3, #8
 8009f32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	e853 3f00 	ldrex	r3, [r3]
 8009f3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f42:	f023 0301 	bic.w	r3, r3, #1
 8009f46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3308      	adds	r3, #8
 8009f4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f58:	e841 2300 	strex	r3, r2, [r1]
 8009f5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1e3      	bne.n	8009f2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d118      	bne.n	8009f9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	e853 3f00 	ldrex	r3, [r3]
 8009f78:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	f023 0310 	bic.w	r3, r3, #16
 8009f80:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	461a      	mov	r2, r3
 8009f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f8a:	61bb      	str	r3, [r7, #24]
 8009f8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8e:	6979      	ldr	r1, [r7, #20]
 8009f90:	69ba      	ldr	r2, [r7, #24]
 8009f92:	e841 2300 	strex	r3, r2, [r1]
 8009f96:	613b      	str	r3, [r7, #16]
   return(result);
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1e6      	bne.n	8009f6c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009fb2:	bf00      	nop
 8009fb4:	3754      	adds	r7, #84	@ 0x54
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr

08009fbe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b090      	sub	sp, #64	@ 0x40
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 0320 	and.w	r3, r3, #32
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d137      	bne.n	800a04a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	3308      	adds	r3, #8
 8009fe8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fec:	e853 3f00 	ldrex	r3, [r3]
 8009ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	3308      	adds	r3, #8
 800a000:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a002:	633a      	str	r2, [r7, #48]	@ 0x30
 800a004:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a006:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a00a:	e841 2300 	strex	r3, r2, [r1]
 800a00e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1e5      	bne.n	8009fe2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	e853 3f00 	ldrex	r3, [r3]
 800a022:	60fb      	str	r3, [r7, #12]
   return(result);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a02a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a02c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	461a      	mov	r2, r3
 800a032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a034:	61fb      	str	r3, [r7, #28]
 800a036:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a038:	69b9      	ldr	r1, [r7, #24]
 800a03a:	69fa      	ldr	r2, [r7, #28]
 800a03c:	e841 2300 	strex	r3, r2, [r1]
 800a040:	617b      	str	r3, [r7, #20]
   return(result);
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1e6      	bne.n	800a016 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a048:	e002      	b.n	800a050 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a04a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a04c:	f7ff f976 	bl	800933c <HAL_UART_TxCpltCallback>
}
 800a050:	bf00      	nop
 800a052:	3740      	adds	r7, #64	@ 0x40
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a064:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f7ff f972 	bl	8009350 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a06c:	bf00      	nop
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b09c      	sub	sp, #112	@ 0x70
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a080:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 0320 	and.w	r3, r3, #32
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d171      	bne.n	800a174 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a090:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a092:	2200      	movs	r2, #0
 800a094:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0a0:	e853 3f00 	ldrex	r3, [r3]
 800a0a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a0a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a0b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a0bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a0be:	e841 2300 	strex	r3, r2, [r1]
 800a0c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a0c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1e6      	bne.n	800a098 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	3308      	adds	r3, #8
 800a0d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d4:	e853 3f00 	ldrex	r3, [r3]
 800a0d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0dc:	f023 0301 	bic.w	r3, r3, #1
 800a0e0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a0e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3308      	adds	r3, #8
 800a0e8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a0ea:	647a      	str	r2, [r7, #68]	@ 0x44
 800a0ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0f2:	e841 2300 	strex	r3, r2, [r1]
 800a0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1e5      	bne.n	800a0ca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3308      	adds	r3, #8
 800a104:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a108:	e853 3f00 	ldrex	r3, [r3]
 800a10c:	623b      	str	r3, [r7, #32]
   return(result);
 800a10e:	6a3b      	ldr	r3, [r7, #32]
 800a110:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a114:	663b      	str	r3, [r7, #96]	@ 0x60
 800a116:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3308      	adds	r3, #8
 800a11c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a11e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a120:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a122:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a126:	e841 2300 	strex	r3, r2, [r1]
 800a12a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1e5      	bne.n	800a0fe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a134:	2220      	movs	r2, #32
 800a136:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a13a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a13c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d118      	bne.n	800a174 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	e853 3f00 	ldrex	r3, [r3]
 800a14e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f023 0310 	bic.w	r3, r3, #16
 800a156:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a158:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	461a      	mov	r2, r3
 800a15e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a160:	61fb      	str	r3, [r7, #28]
 800a162:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a164:	69b9      	ldr	r1, [r7, #24]
 800a166:	69fa      	ldr	r2, [r7, #28]
 800a168:	e841 2300 	strex	r3, r2, [r1]
 800a16c:	617b      	str	r3, [r7, #20]
   return(result);
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1e6      	bne.n	800a142 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a174:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a176:	2200      	movs	r2, #0
 800a178:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a17a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a17c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d107      	bne.n	800a192 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a184:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a188:	4619      	mov	r1, r3
 800a18a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a18c:	f7ff f908 	bl	80093a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a190:	e002      	b.n	800a198 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a192:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a194:	f7ff f8e6 	bl	8009364 <HAL_UART_RxCpltCallback>
}
 800a198:	bf00      	nop
 800a19a:	3770      	adds	r7, #112	@ 0x70
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d109      	bne.n	800a1d0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a1c2:	085b      	lsrs	r3, r3, #1
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f7ff f8e9 	bl	80093a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1ce:	e002      	b.n	800a1d6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f7ff f8d1 	bl	8009378 <HAL_UART_RxHalfCpltCallback>
}
 800a1d6:	bf00      	nop
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b086      	sub	sp, #24
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1f2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a206:	2b80      	cmp	r3, #128	@ 0x80
 800a208:	d109      	bne.n	800a21e <UART_DMAError+0x40>
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	2b21      	cmp	r3, #33	@ 0x21
 800a20e:	d106      	bne.n	800a21e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	2200      	movs	r2, #0
 800a214:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a218:	6978      	ldr	r0, [r7, #20]
 800a21a:	f7ff fe29 	bl	8009e70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a228:	2b40      	cmp	r3, #64	@ 0x40
 800a22a:	d109      	bne.n	800a240 <UART_DMAError+0x62>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2b22      	cmp	r3, #34	@ 0x22
 800a230:	d106      	bne.n	800a240 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	2200      	movs	r2, #0
 800a236:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a23a:	6978      	ldr	r0, [r7, #20]
 800a23c:	f7ff fe59 	bl	8009ef2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a246:	f043 0210 	orr.w	r2, r3, #16
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a250:	6978      	ldr	r0, [r7, #20]
 800a252:	f7ff f89b 	bl	800938c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a256:	bf00      	nop
 800a258:	3718      	adds	r7, #24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b084      	sub	sp, #16
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a26a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f7ff f889 	bl	800938c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a27a:	bf00      	nop
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b088      	sub	sp, #32
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	e853 3f00 	ldrex	r3, [r3]
 800a296:	60bb      	str	r3, [r7, #8]
   return(result);
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a29e:	61fb      	str	r3, [r7, #28]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	61bb      	str	r3, [r7, #24]
 800a2aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ac:	6979      	ldr	r1, [r7, #20]
 800a2ae:	69ba      	ldr	r2, [r7, #24]
 800a2b0:	e841 2300 	strex	r3, r2, [r1]
 800a2b4:	613b      	str	r3, [r7, #16]
   return(result);
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1e6      	bne.n	800a28a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2220      	movs	r2, #32
 800a2c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7ff f836 	bl	800933c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2d0:	bf00      	nop
 800a2d2:	3720      	adds	r7, #32
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a308:	bf00      	nop
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a314:	b480      	push	{r7}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a322:	2b01      	cmp	r3, #1
 800a324:	d101      	bne.n	800a32a <HAL_UARTEx_DisableFifoMode+0x16>
 800a326:	2302      	movs	r3, #2
 800a328:	e027      	b.n	800a37a <HAL_UARTEx_DisableFifoMode+0x66>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2201      	movs	r2, #1
 800a32e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2224      	movs	r2, #36	@ 0x24
 800a336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f022 0201 	bic.w	r2, r2, #1
 800a350:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a358:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2220      	movs	r2, #32
 800a36c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3714      	adds	r7, #20
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b084      	sub	sp, #16
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a396:	2b01      	cmp	r3, #1
 800a398:	d101      	bne.n	800a39e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a39a:	2302      	movs	r3, #2
 800a39c:	e02d      	b.n	800a3fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2224      	movs	r2, #36	@ 0x24
 800a3aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f022 0201 	bic.w	r2, r2, #1
 800a3c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	430a      	orrs	r2, r1
 800a3d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f850 	bl	800a480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2220      	movs	r2, #32
 800a3ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b084      	sub	sp, #16
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a412:	2b01      	cmp	r3, #1
 800a414:	d101      	bne.n	800a41a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a416:	2302      	movs	r3, #2
 800a418:	e02d      	b.n	800a476 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2201      	movs	r2, #1
 800a41e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2224      	movs	r2, #36	@ 0x24
 800a426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f022 0201 	bic.w	r2, r2, #1
 800a440:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	683a      	ldr	r2, [r7, #0]
 800a452:	430a      	orrs	r2, r1
 800a454:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f812 	bl	800a480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68fa      	ldr	r2, [r7, #12]
 800a462:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2220      	movs	r2, #32
 800a468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
	...

0800a480 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d108      	bne.n	800a4a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a4a0:	e031      	b.n	800a506 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a4a2:	2308      	movs	r3, #8
 800a4a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a4a6:	2308      	movs	r3, #8
 800a4a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	0e5b      	lsrs	r3, r3, #25
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	f003 0307 	and.w	r3, r3, #7
 800a4b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	0f5b      	lsrs	r3, r3, #29
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	f003 0307 	and.w	r3, r3, #7
 800a4c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4ca:	7bbb      	ldrb	r3, [r7, #14]
 800a4cc:	7b3a      	ldrb	r2, [r7, #12]
 800a4ce:	4911      	ldr	r1, [pc, #68]	@ (800a514 <UARTEx_SetNbDataToProcess+0x94>)
 800a4d0:	5c8a      	ldrb	r2, [r1, r2]
 800a4d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4d6:	7b3a      	ldrb	r2, [r7, #12]
 800a4d8:	490f      	ldr	r1, [pc, #60]	@ (800a518 <UARTEx_SetNbDataToProcess+0x98>)
 800a4da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4e8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ea:	7b7a      	ldrb	r2, [r7, #13]
 800a4ec:	4909      	ldr	r1, [pc, #36]	@ (800a514 <UARTEx_SetNbDataToProcess+0x94>)
 800a4ee:	5c8a      	ldrb	r2, [r1, r2]
 800a4f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a4f4:	7b7a      	ldrb	r2, [r7, #13]
 800a4f6:	4908      	ldr	r1, [pc, #32]	@ (800a518 <UARTEx_SetNbDataToProcess+0x98>)
 800a4f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a506:	bf00      	nop
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	0801dd3c 	.word	0x0801dd3c
 800a518:	0801dd44 	.word	0x0801dd44

0800a51c <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b088      	sub	sp, #32
 800a520:	af04      	add	r7, sp, #16
 800a522:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800a524:	2364      	movs	r3, #100	@ 0x64
 800a526:	9302      	str	r3, [sp, #8]
 800a528:	2301      	movs	r3, #1
 800a52a:	9301      	str	r3, [sp, #4]
 800a52c:	f107 030f 	add.w	r3, r7, #15
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	2301      	movs	r3, #1
 800a534:	2275      	movs	r2, #117	@ 0x75
 800a536:	21d0      	movs	r1, #208	@ 0xd0
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f7fc f97f 	bl	800683c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
 800a540:	2b68      	cmp	r3, #104	@ 0x68
 800a542:	d13d      	bne.n	800a5c0 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800a544:	2300      	movs	r3, #0
 800a546:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800a548:	2364      	movs	r3, #100	@ 0x64
 800a54a:	9302      	str	r3, [sp, #8]
 800a54c:	2301      	movs	r3, #1
 800a54e:	9301      	str	r3, [sp, #4]
 800a550:	f107 030e 	add.w	r3, r7, #14
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	2301      	movs	r3, #1
 800a558:	226b      	movs	r2, #107	@ 0x6b
 800a55a:	21d0      	movs	r1, #208	@ 0xd0
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7fc f859 	bl	8006614 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800a562:	2307      	movs	r3, #7
 800a564:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800a566:	2364      	movs	r3, #100	@ 0x64
 800a568:	9302      	str	r3, [sp, #8]
 800a56a:	2301      	movs	r3, #1
 800a56c:	9301      	str	r3, [sp, #4]
 800a56e:	f107 030e 	add.w	r3, r7, #14
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	2301      	movs	r3, #1
 800a576:	2219      	movs	r2, #25
 800a578:	21d0      	movs	r1, #208	@ 0xd0
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7fc f84a 	bl	8006614 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800a580:	2300      	movs	r3, #0
 800a582:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800a584:	2364      	movs	r3, #100	@ 0x64
 800a586:	9302      	str	r3, [sp, #8]
 800a588:	2301      	movs	r3, #1
 800a58a:	9301      	str	r3, [sp, #4]
 800a58c:	f107 030e 	add.w	r3, r7, #14
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	2301      	movs	r3, #1
 800a594:	221c      	movs	r2, #28
 800a596:	21d0      	movs	r1, #208	@ 0xd0
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f7fc f83b 	bl	8006614 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800a5a2:	2364      	movs	r3, #100	@ 0x64
 800a5a4:	9302      	str	r3, [sp, #8]
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	9301      	str	r3, [sp, #4]
 800a5aa:	f107 030e 	add.w	r3, r7, #14
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	221b      	movs	r2, #27
 800a5b4:	21d0      	movs	r1, #208	@ 0xd0
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7fc f82c 	bl	8006614 <HAL_I2C_Mem_Write>
        return 0;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	e000      	b.n	800a5c2 <MPU6050_Init+0xa6>
    }
    return 1;
 800a5c0:	2301      	movs	r3, #1
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	0000      	movs	r0, r0
 800a5cc:	0000      	movs	r0, r0
	...

0800a5d0 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 800a5d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5d4:	b094      	sub	sp, #80	@ 0x50
 800a5d6:	af04      	add	r7, sp, #16
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800a5dc:	2364      	movs	r3, #100	@ 0x64
 800a5de:	9302      	str	r3, [sp, #8]
 800a5e0:	230e      	movs	r3, #14
 800a5e2:	9301      	str	r3, [sp, #4]
 800a5e4:	f107 0308 	add.w	r3, r7, #8
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	223b      	movs	r2, #59	@ 0x3b
 800a5ee:	21d0      	movs	r1, #208	@ 0xd0
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f7fc f923 	bl	800683c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800a5f6:	7a3b      	ldrb	r3, [r7, #8]
 800a5f8:	021b      	lsls	r3, r3, #8
 800a5fa:	b21a      	sxth	r2, r3
 800a5fc:	7a7b      	ldrb	r3, [r7, #9]
 800a5fe:	b21b      	sxth	r3, r3
 800a600:	4313      	orrs	r3, r2
 800a602:	b21a      	sxth	r2, r3
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800a608:	7abb      	ldrb	r3, [r7, #10]
 800a60a:	021b      	lsls	r3, r3, #8
 800a60c:	b21a      	sxth	r2, r3
 800a60e:	7afb      	ldrb	r3, [r7, #11]
 800a610:	b21b      	sxth	r3, r3
 800a612:	4313      	orrs	r3, r2
 800a614:	b21a      	sxth	r2, r3
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800a61a:	7b3b      	ldrb	r3, [r7, #12]
 800a61c:	021b      	lsls	r3, r3, #8
 800a61e:	b21a      	sxth	r2, r3
 800a620:	7b7b      	ldrb	r3, [r7, #13]
 800a622:	b21b      	sxth	r3, r3
 800a624:	4313      	orrs	r3, r2
 800a626:	b21a      	sxth	r2, r3
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800a62c:	7bbb      	ldrb	r3, [r7, #14]
 800a62e:	021b      	lsls	r3, r3, #8
 800a630:	b21a      	sxth	r2, r3
 800a632:	7bfb      	ldrb	r3, [r7, #15]
 800a634:	b21b      	sxth	r3, r3
 800a636:	4313      	orrs	r3, r2
 800a638:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800a63a:	7c3b      	ldrb	r3, [r7, #16]
 800a63c:	021b      	lsls	r3, r3, #8
 800a63e:	b21a      	sxth	r2, r3
 800a640:	7c7b      	ldrb	r3, [r7, #17]
 800a642:	b21b      	sxth	r3, r3
 800a644:	4313      	orrs	r3, r2
 800a646:	b21a      	sxth	r2, r3
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800a64c:	7cbb      	ldrb	r3, [r7, #18]
 800a64e:	021b      	lsls	r3, r3, #8
 800a650:	b21a      	sxth	r2, r3
 800a652:	7cfb      	ldrb	r3, [r7, #19]
 800a654:	b21b      	sxth	r3, r3
 800a656:	4313      	orrs	r3, r2
 800a658:	b21a      	sxth	r2, r3
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800a65e:	7d3b      	ldrb	r3, [r7, #20]
 800a660:	021b      	lsls	r3, r3, #8
 800a662:	b21a      	sxth	r2, r3
 800a664:	7d7b      	ldrb	r3, [r7, #21]
 800a666:	b21b      	sxth	r3, r3
 800a668:	4313      	orrs	r3, r2
 800a66a:	b21a      	sxth	r2, r3
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a676:	4618      	mov	r0, r3
 800a678:	f7f5 ff8c 	bl	8000594 <__aeabi_i2d>
 800a67c:	f04f 0200 	mov.w	r2, #0
 800a680:	4bbd      	ldr	r3, [pc, #756]	@ (800a978 <MPU6050_Read_All+0x3a8>)
 800a682:	f7f6 f91b 	bl	80008bc <__aeabi_ddiv>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	6839      	ldr	r1, [r7, #0]
 800a68c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a696:	4618      	mov	r0, r3
 800a698:	f7f5 ff7c 	bl	8000594 <__aeabi_i2d>
 800a69c:	f04f 0200 	mov.w	r2, #0
 800a6a0:	4bb5      	ldr	r3, [pc, #724]	@ (800a978 <MPU6050_Read_All+0x3a8>)
 800a6a2:	f7f6 f90b 	bl	80008bc <__aeabi_ddiv>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	6839      	ldr	r1, [r7, #0]
 800a6ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7f5 ff6c 	bl	8000594 <__aeabi_i2d>
 800a6bc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a960 <MPU6050_Read_All+0x390>)
 800a6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c2:	f7f6 f8fb 	bl	80008bc <__aeabi_ddiv>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	6839      	ldr	r1, [r7, #0]
 800a6cc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 800a6d0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a6d4:	ee07 3a90 	vmov	s15, r3
 800a6d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a6dc:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 800a97c <MPU6050_Read_All+0x3ac>
 800a6e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a6e4:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 800a980 <MPU6050_Read_All+0x3b0>
 800a6e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7f5 ff4b 	bl	8000594 <__aeabi_i2d>
 800a6fe:	a39a      	add	r3, pc, #616	@ (adr r3, 800a968 <MPU6050_Read_All+0x398>)
 800a700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a704:	f7f6 f8da 	bl	80008bc <__aeabi_ddiv>
 800a708:	4602      	mov	r2, r0
 800a70a:	460b      	mov	r3, r1
 800a70c:	6839      	ldr	r1, [r7, #0]
 800a70e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800a718:	4618      	mov	r0, r3
 800a71a:	f7f5 ff3b 	bl	8000594 <__aeabi_i2d>
 800a71e:	a392      	add	r3, pc, #584	@ (adr r3, 800a968 <MPU6050_Read_All+0x398>)
 800a720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a724:	f7f6 f8ca 	bl	80008bc <__aeabi_ddiv>
 800a728:	4602      	mov	r2, r0
 800a72a:	460b      	mov	r3, r1
 800a72c:	6839      	ldr	r1, [r7, #0]
 800a72e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800a738:	4618      	mov	r0, r3
 800a73a:	f7f5 ff2b 	bl	8000594 <__aeabi_i2d>
 800a73e:	a38a      	add	r3, pc, #552	@ (adr r3, 800a968 <MPU6050_Read_All+0x398>)
 800a740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a744:	f7f6 f8ba 	bl	80008bc <__aeabi_ddiv>
 800a748:	4602      	mov	r2, r0
 800a74a:	460b      	mov	r3, r1
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800a752:	f7f9 f863 	bl	800381c <HAL_GetTick>
 800a756:	4602      	mov	r2, r0
 800a758:	4b8a      	ldr	r3, [pc, #552]	@ (800a984 <MPU6050_Read_All+0x3b4>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	4618      	mov	r0, r3
 800a760:	f7f5 ff08 	bl	8000574 <__aeabi_ui2d>
 800a764:	f04f 0200 	mov.w	r2, #0
 800a768:	4b87      	ldr	r3, [pc, #540]	@ (800a988 <MPU6050_Read_All+0x3b8>)
 800a76a:	f7f6 f8a7 	bl	80008bc <__aeabi_ddiv>
 800a76e:	4602      	mov	r2, r0
 800a770:	460b      	mov	r3, r1
 800a772:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 800a776:	f7f9 f851 	bl	800381c <HAL_GetTick>
 800a77a:	4603      	mov	r3, r0
 800a77c:	4a81      	ldr	r2, [pc, #516]	@ (800a984 <MPU6050_Read_All+0x3b4>)
 800a77e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a786:	461a      	mov	r2, r3
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a78e:	fb03 f202 	mul.w	r2, r3, r2
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a798:	4619      	mov	r1, r3
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a7a0:	fb01 f303 	mul.w	r3, r1, r3
 800a7a4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7f5 fef4 	bl	8000594 <__aeabi_i2d>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	ec43 2b10 	vmov	d0, r2, r3
 800a7b4:	f012 fe7a 	bl	801d4ac <sqrt>
 800a7b8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 800a7bc:	f04f 0200 	mov.w	r2, #0
 800a7c0:	f04f 0300 	mov.w	r3, #0
 800a7c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a7c8:	f7f6 f9b6 	bl	8000b38 <__aeabi_dcmpeq>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d11f      	bne.n	800a812 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7f5 fedb 	bl	8000594 <__aeabi_i2d>
 800a7de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a7e2:	f7f6 f86b 	bl	80008bc <__aeabi_ddiv>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	ec43 2b17 	vmov	d7, r2, r3
 800a7ee:	eeb0 0a47 	vmov.f32	s0, s14
 800a7f2:	eef0 0a67 	vmov.f32	s1, s15
 800a7f6:	f012 fe87 	bl	801d508 <atan>
 800a7fa:	ec51 0b10 	vmov	r0, r1, d0
 800a7fe:	a35c      	add	r3, pc, #368	@ (adr r3, 800a970 <MPU6050_Read_All+0x3a0>)
 800a800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a804:	f7f5 ff30 	bl	8000668 <__aeabi_dmul>
 800a808:	4602      	mov	r2, r0
 800a80a:	460b      	mov	r3, r1
 800a80c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 800a810:	e005      	b.n	800a81e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 800a812:	f04f 0200 	mov.w	r2, #0
 800a816:	f04f 0300 	mov.w	r3, #0
 800a81a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a824:	425b      	negs	r3, r3
 800a826:	4618      	mov	r0, r3
 800a828:	f7f5 feb4 	bl	8000594 <__aeabi_i2d>
 800a82c:	4682      	mov	sl, r0
 800a82e:	468b      	mov	fp, r1
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a836:	4618      	mov	r0, r3
 800a838:	f7f5 feac 	bl	8000594 <__aeabi_i2d>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	ec43 2b11 	vmov	d1, r2, r3
 800a844:	ec4b ab10 	vmov	d0, sl, fp
 800a848:	f012 fe2e 	bl	801d4a8 <atan2>
 800a84c:	ec51 0b10 	vmov	r0, r1, d0
 800a850:	a347      	add	r3, pc, #284	@ (adr r3, 800a970 <MPU6050_Read_All+0x3a0>)
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	f7f5 ff07 	bl	8000668 <__aeabi_dmul>
 800a85a:	4602      	mov	r2, r0
 800a85c:	460b      	mov	r3, r1
 800a85e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800a862:	f04f 0200 	mov.w	r2, #0
 800a866:	4b49      	ldr	r3, [pc, #292]	@ (800a98c <MPU6050_Read_All+0x3bc>)
 800a868:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a86c:	f7f6 f96e 	bl	8000b4c <__aeabi_dcmplt>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00a      	beq.n	800a88c <MPU6050_Read_All+0x2bc>
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800a87c:	f04f 0200 	mov.w	r2, #0
 800a880:	4b43      	ldr	r3, [pc, #268]	@ (800a990 <MPU6050_Read_All+0x3c0>)
 800a882:	f7f6 f981 	bl	8000b88 <__aeabi_dcmpgt>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d114      	bne.n	800a8b6 <MPU6050_Read_All+0x2e6>
 800a88c:	f04f 0200 	mov.w	r2, #0
 800a890:	4b3f      	ldr	r3, [pc, #252]	@ (800a990 <MPU6050_Read_All+0x3c0>)
 800a892:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a896:	f7f6 f977 	bl	8000b88 <__aeabi_dcmpgt>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d015      	beq.n	800a8cc <MPU6050_Read_All+0x2fc>
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800a8a6:	f04f 0200 	mov.w	r2, #0
 800a8aa:	4b38      	ldr	r3, [pc, #224]	@ (800a98c <MPU6050_Read_All+0x3bc>)
 800a8ac:	f7f6 f94e 	bl	8000b4c <__aeabi_dcmplt>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00a      	beq.n	800a8cc <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 800a8b6:	4937      	ldr	r1, [pc, #220]	@ (800a994 <MPU6050_Read_All+0x3c4>)
 800a8b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a8bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 800a8c0:	6839      	ldr	r1, [r7, #0]
 800a8c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a8c6:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800a8ca:	e014      	b.n	800a8f6 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800a8d2:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800a8d6:	eeb0 1a47 	vmov.f32	s2, s14
 800a8da:	eef0 1a67 	vmov.f32	s3, s15
 800a8de:	ed97 0b06 	vldr	d0, [r7, #24]
 800a8e2:	482c      	ldr	r0, [pc, #176]	@ (800a994 <MPU6050_Read_All+0x3c4>)
 800a8e4:	f000 f85a 	bl	800a99c <Kalman_getAngle>
 800a8e8:	eeb0 7a40 	vmov.f32	s14, s0
 800a8ec:	eef0 7a60 	vmov.f32	s15, s1
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800a8fc:	4690      	mov	r8, r2
 800a8fe:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800a902:	f04f 0200 	mov.w	r2, #0
 800a906:	4b22      	ldr	r3, [pc, #136]	@ (800a990 <MPU6050_Read_All+0x3c0>)
 800a908:	4640      	mov	r0, r8
 800a90a:	4649      	mov	r1, r9
 800a90c:	f7f6 f93c 	bl	8000b88 <__aeabi_dcmpgt>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d008      	beq.n	800a928 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800a91c:	4614      	mov	r4, r2
 800a91e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800a92e:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800a932:	eeb0 1a47 	vmov.f32	s2, s14
 800a936:	eef0 1a67 	vmov.f32	s3, s15
 800a93a:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 800a93e:	4816      	ldr	r0, [pc, #88]	@ (800a998 <MPU6050_Read_All+0x3c8>)
 800a940:	f000 f82c 	bl	800a99c <Kalman_getAngle>
 800a944:	eeb0 7a40 	vmov.f32	s14, s0
 800a948:	eef0 7a60 	vmov.f32	s15, s1
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 800a952:	bf00      	nop
 800a954:	3740      	adds	r7, #64	@ 0x40
 800a956:	46bd      	mov	sp, r7
 800a958:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a95c:	f3af 8000 	nop.w
 800a960:	00000000 	.word	0x00000000
 800a964:	40cc2900 	.word	0x40cc2900
 800a968:	00000000 	.word	0x00000000
 800a96c:	40606000 	.word	0x40606000
 800a970:	1a63c1f8 	.word	0x1a63c1f8
 800a974:	404ca5dc 	.word	0x404ca5dc
 800a978:	40d00000 	.word	0x40d00000
 800a97c:	43aa0000 	.word	0x43aa0000
 800a980:	42121eb8 	.word	0x42121eb8
 800a984:	200055c0 	.word	0x200055c0
 800a988:	408f4000 	.word	0x408f4000
 800a98c:	c0568000 	.word	0xc0568000
 800a990:	40568000 	.word	0x40568000
 800a994:	20000058 	.word	0x20000058
 800a998:	20000010 	.word	0x20000010

0800a99c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800a99c:	b5b0      	push	{r4, r5, r7, lr}
 800a99e:	b096      	sub	sp, #88	@ 0x58
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	61f8      	str	r0, [r7, #28]
 800a9a4:	ed87 0b04 	vstr	d0, [r7, #16]
 800a9a8:	ed87 1b02 	vstr	d1, [r7, #8]
 800a9ac:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a9ba:	f7f5 fc9d 	bl	80002f8 <__aeabi_dsub>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800a9cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a9d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9d4:	f7f5 fe48 	bl	8000668 <__aeabi_dmul>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	4620      	mov	r0, r4
 800a9de:	4629      	mov	r1, r5
 800a9e0:	f7f5 fc8c 	bl	80002fc <__adddf3>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	69f9      	ldr	r1, [r7, #28]
 800a9ea:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800a9fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9fe:	f7f5 fe33 	bl	8000668 <__aeabi_dmul>
 800aa02:	4602      	mov	r2, r0
 800aa04:	460b      	mov	r3, r1
 800aa06:	4610      	mov	r0, r2
 800aa08:	4619      	mov	r1, r3
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800aa10:	f7f5 fc72 	bl	80002f8 <__aeabi_dsub>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	4610      	mov	r0, r2
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800aa22:	f7f5 fc69 	bl	80002f8 <__aeabi_dsub>
 800aa26:	4602      	mov	r2, r0
 800aa28:	460b      	mov	r3, r1
 800aa2a:	4610      	mov	r0, r2
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa34:	f7f5 fc62 	bl	80002fc <__adddf3>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	4610      	mov	r0, r2
 800aa3e:	4619      	mov	r1, r3
 800aa40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa44:	f7f5 fe10 	bl	8000668 <__aeabi_dmul>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	4629      	mov	r1, r5
 800aa50:	f7f5 fc54 	bl	80002fc <__adddf3>
 800aa54:	4602      	mov	r2, r0
 800aa56:	460b      	mov	r3, r1
 800aa58:	69f9      	ldr	r1, [r7, #28]
 800aa5a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800aa6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa6e:	f7f5 fdfb 	bl	8000668 <__aeabi_dmul>
 800aa72:	4602      	mov	r2, r0
 800aa74:	460b      	mov	r3, r1
 800aa76:	4620      	mov	r0, r4
 800aa78:	4629      	mov	r1, r5
 800aa7a:	f7f5 fc3d 	bl	80002f8 <__aeabi_dsub>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	69f9      	ldr	r1, [r7, #28]
 800aa84:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800aa94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa98:	f7f5 fde6 	bl	8000668 <__aeabi_dmul>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	f7f5 fc28 	bl	80002f8 <__aeabi_dsub>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	460b      	mov	r3, r1
 800aaac:	69f9      	ldr	r1, [r7, #28]
 800aaae:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800aabe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aac2:	f7f5 fdd1 	bl	8000668 <__aeabi_dmul>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4620      	mov	r0, r4
 800aacc:	4629      	mov	r1, r5
 800aace:	f7f5 fc15 	bl	80002fc <__adddf3>
 800aad2:	4602      	mov	r2, r0
 800aad4:	460b      	mov	r3, r1
 800aad6:	69f9      	ldr	r1, [r7, #28]
 800aad8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800aae8:	f7f5 fc08 	bl	80002fc <__adddf3>
 800aaec:	4602      	mov	r2, r0
 800aaee:	460b      	mov	r3, r1
 800aaf0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800aafa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800aafe:	f7f5 fedd 	bl	80008bc <__aeabi_ddiv>
 800ab02:	4602      	mov	r2, r0
 800ab04:	460b      	mov	r3, r1
 800ab06:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ab10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ab14:	f7f5 fed2 	bl	80008bc <__aeabi_ddiv>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800ab26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ab2a:	f7f5 fbe5 	bl	80002f8 <__aeabi_dsub>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	460b      	mov	r3, r1
 800ab32:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800ab3c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ab40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ab44:	f7f5 fd90 	bl	8000668 <__aeabi_dmul>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	4629      	mov	r1, r5
 800ab50:	f7f5 fbd4 	bl	80002fc <__adddf3>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	69f9      	ldr	r1, [r7, #28]
 800ab5a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800ab64:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ab68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ab6c:	f7f5 fd7c 	bl	8000668 <__aeabi_dmul>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4620      	mov	r0, r4
 800ab76:	4629      	mov	r1, r5
 800ab78:	f7f5 fbc0 	bl	80002fc <__adddf3>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	69f9      	ldr	r1, [r7, #28]
 800ab82:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800ab8c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800ab96:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800aba0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800aba4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800aba8:	f7f5 fd5e 	bl	8000668 <__aeabi_dmul>
 800abac:	4602      	mov	r2, r0
 800abae:	460b      	mov	r3, r1
 800abb0:	4620      	mov	r0, r4
 800abb2:	4629      	mov	r1, r5
 800abb4:	f7f5 fba0 	bl	80002f8 <__aeabi_dsub>
 800abb8:	4602      	mov	r2, r0
 800abba:	460b      	mov	r3, r1
 800abbc:	69f9      	ldr	r1, [r7, #28]
 800abbe:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800abc8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800abcc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800abd0:	f7f5 fd4a 	bl	8000668 <__aeabi_dmul>
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	4620      	mov	r0, r4
 800abda:	4629      	mov	r1, r5
 800abdc:	f7f5 fb8c 	bl	80002f8 <__aeabi_dsub>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	69f9      	ldr	r1, [r7, #28]
 800abe6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800abf0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800abf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800abf8:	f7f5 fd36 	bl	8000668 <__aeabi_dmul>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4620      	mov	r0, r4
 800ac02:	4629      	mov	r1, r5
 800ac04:	f7f5 fb78 	bl	80002f8 <__aeabi_dsub>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	69f9      	ldr	r1, [r7, #28]
 800ac0e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 800ac18:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ac1c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ac20:	f7f5 fd22 	bl	8000668 <__aeabi_dmul>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	4620      	mov	r0, r4
 800ac2a:	4629      	mov	r1, r5
 800ac2c:	f7f5 fb64 	bl	80002f8 <__aeabi_dsub>
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	69f9      	ldr	r1, [r7, #28]
 800ac36:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800ac40:	ec43 2b17 	vmov	d7, r2, r3
};
 800ac44:	eeb0 0a47 	vmov.f32	s0, s14
 800ac48:	eef0 0a67 	vmov.f32	s1, s15
 800ac4c:	3758      	adds	r7, #88	@ 0x58
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ac54 <__NVIC_SetPriority>:
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	6039      	str	r1, [r7, #0]
 800ac5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	db0a      	blt.n	800ac7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	b2da      	uxtb	r2, r3
 800ac6c:	490c      	ldr	r1, [pc, #48]	@ (800aca0 <__NVIC_SetPriority+0x4c>)
 800ac6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac72:	0112      	lsls	r2, r2, #4
 800ac74:	b2d2      	uxtb	r2, r2
 800ac76:	440b      	add	r3, r1
 800ac78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ac7c:	e00a      	b.n	800ac94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	b2da      	uxtb	r2, r3
 800ac82:	4908      	ldr	r1, [pc, #32]	@ (800aca4 <__NVIC_SetPriority+0x50>)
 800ac84:	79fb      	ldrb	r3, [r7, #7]
 800ac86:	f003 030f 	and.w	r3, r3, #15
 800ac8a:	3b04      	subs	r3, #4
 800ac8c:	0112      	lsls	r2, r2, #4
 800ac8e:	b2d2      	uxtb	r2, r2
 800ac90:	440b      	add	r3, r1
 800ac92:	761a      	strb	r2, [r3, #24]
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	e000e100 	.word	0xe000e100
 800aca4:	e000ed00 	.word	0xe000ed00

0800aca8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800aca8:	b580      	push	{r7, lr}
 800acaa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800acac:	4b05      	ldr	r3, [pc, #20]	@ (800acc4 <SysTick_Handler+0x1c>)
 800acae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800acb0:	f001 fd40 	bl	800c734 <xTaskGetSchedulerState>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d001      	beq.n	800acbe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800acba:	f002 fb35 	bl	800d328 <xPortSysTickHandler>
  }
}
 800acbe:	bf00      	nop
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	e000e010 	.word	0xe000e010

0800acc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800acc8:	b580      	push	{r7, lr}
 800acca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800accc:	2100      	movs	r1, #0
 800acce:	f06f 0004 	mvn.w	r0, #4
 800acd2:	f7ff ffbf 	bl	800ac54 <__NVIC_SetPriority>
#endif
}
 800acd6:	bf00      	nop
 800acd8:	bd80      	pop	{r7, pc}
	...

0800acdc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ace2:	f3ef 8305 	mrs	r3, IPSR
 800ace6:	603b      	str	r3, [r7, #0]
  return(result);
 800ace8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acea:	2b00      	cmp	r3, #0
 800acec:	d003      	beq.n	800acf6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800acee:	f06f 0305 	mvn.w	r3, #5
 800acf2:	607b      	str	r3, [r7, #4]
 800acf4:	e00c      	b.n	800ad10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800acf6:	4b0a      	ldr	r3, [pc, #40]	@ (800ad20 <osKernelInitialize+0x44>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d105      	bne.n	800ad0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800acfe:	4b08      	ldr	r3, [pc, #32]	@ (800ad20 <osKernelInitialize+0x44>)
 800ad00:	2201      	movs	r2, #1
 800ad02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ad04:	2300      	movs	r3, #0
 800ad06:	607b      	str	r3, [r7, #4]
 800ad08:	e002      	b.n	800ad10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ad0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad10:	687b      	ldr	r3, [r7, #4]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	200055c4 	.word	0x200055c4

0800ad24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad2a:	f3ef 8305 	mrs	r3, IPSR
 800ad2e:	603b      	str	r3, [r7, #0]
  return(result);
 800ad30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d003      	beq.n	800ad3e <osKernelStart+0x1a>
    stat = osErrorISR;
 800ad36:	f06f 0305 	mvn.w	r3, #5
 800ad3a:	607b      	str	r3, [r7, #4]
 800ad3c:	e010      	b.n	800ad60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ad3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ad6c <osKernelStart+0x48>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d109      	bne.n	800ad5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ad46:	f7ff ffbf 	bl	800acc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ad4a:	4b08      	ldr	r3, [pc, #32]	@ (800ad6c <osKernelStart+0x48>)
 800ad4c:	2202      	movs	r2, #2
 800ad4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ad50:	f001 f87a 	bl	800be48 <vTaskStartScheduler>
      stat = osOK;
 800ad54:	2300      	movs	r3, #0
 800ad56:	607b      	str	r3, [r7, #4]
 800ad58:	e002      	b.n	800ad60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ad5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad60:	687b      	ldr	r3, [r7, #4]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	200055c4 	.word	0x200055c4

0800ad70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b08e      	sub	sp, #56	@ 0x38
 800ad74:	af04      	add	r7, sp, #16
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad80:	f3ef 8305 	mrs	r3, IPSR
 800ad84:	617b      	str	r3, [r7, #20]
  return(result);
 800ad86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d17e      	bne.n	800ae8a <osThreadNew+0x11a>
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d07b      	beq.n	800ae8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ad92:	2380      	movs	r3, #128	@ 0x80
 800ad94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ad96:	2318      	movs	r3, #24
 800ad98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ad9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ada2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d045      	beq.n	800ae36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d002      	beq.n	800adb8 <osThreadNew+0x48>
        name = attr->name;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	699b      	ldr	r3, [r3, #24]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d002      	beq.n	800adc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	699b      	ldr	r3, [r3, #24]
 800adc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d008      	beq.n	800adde <osThreadNew+0x6e>
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	2b38      	cmp	r3, #56	@ 0x38
 800add0:	d805      	bhi.n	800adde <osThreadNew+0x6e>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	f003 0301 	and.w	r3, r3, #1
 800adda:	2b00      	cmp	r3, #0
 800addc:	d001      	beq.n	800ade2 <osThreadNew+0x72>
        return (NULL);
 800adde:	2300      	movs	r3, #0
 800ade0:	e054      	b.n	800ae8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	695b      	ldr	r3, [r3, #20]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d003      	beq.n	800adf2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	695b      	ldr	r3, [r3, #20]
 800adee:	089b      	lsrs	r3, r3, #2
 800adf0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00e      	beq.n	800ae18 <osThreadNew+0xa8>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	2b5b      	cmp	r3, #91	@ 0x5b
 800ae00:	d90a      	bls.n	800ae18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d006      	beq.n	800ae18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	695b      	ldr	r3, [r3, #20]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d002      	beq.n	800ae18 <osThreadNew+0xa8>
        mem = 1;
 800ae12:	2301      	movs	r3, #1
 800ae14:	61bb      	str	r3, [r7, #24]
 800ae16:	e010      	b.n	800ae3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d10c      	bne.n	800ae3a <osThreadNew+0xca>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d108      	bne.n	800ae3a <osThreadNew+0xca>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d104      	bne.n	800ae3a <osThreadNew+0xca>
          mem = 0;
 800ae30:	2300      	movs	r3, #0
 800ae32:	61bb      	str	r3, [r7, #24]
 800ae34:	e001      	b.n	800ae3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d110      	bne.n	800ae62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae48:	9202      	str	r2, [sp, #8]
 800ae4a:	9301      	str	r3, [sp, #4]
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	6a3a      	ldr	r2, [r7, #32]
 800ae54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f000 fe1a 	bl	800ba90 <xTaskCreateStatic>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	613b      	str	r3, [r7, #16]
 800ae60:	e013      	b.n	800ae8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d110      	bne.n	800ae8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ae68:	6a3b      	ldr	r3, [r7, #32]
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	f107 0310 	add.w	r3, r7, #16
 800ae70:	9301      	str	r3, [sp, #4]
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f000 fe68 	bl	800bb50 <xTaskCreate>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d001      	beq.n	800ae8a <osThreadNew+0x11a>
            hTask = NULL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ae8a:	693b      	ldr	r3, [r7, #16]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3728      	adds	r7, #40	@ 0x28
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae9c:	f3ef 8305 	mrs	r3, IPSR
 800aea0:	60bb      	str	r3, [r7, #8]
  return(result);
 800aea2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d003      	beq.n	800aeb0 <osDelay+0x1c>
    stat = osErrorISR;
 800aea8:	f06f 0305 	mvn.w	r3, #5
 800aeac:	60fb      	str	r3, [r7, #12]
 800aeae:	e007      	b.n	800aec0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d002      	beq.n	800aec0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 ff8e 	bl	800bddc <vTaskDelay>
    }
  }

  return (stat);
 800aec0:	68fb      	ldr	r3, [r7, #12]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
	...

0800aecc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	4a07      	ldr	r2, [pc, #28]	@ (800aef8 <vApplicationGetIdleTaskMemory+0x2c>)
 800aedc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	4a06      	ldr	r2, [pc, #24]	@ (800aefc <vApplicationGetIdleTaskMemory+0x30>)
 800aee2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2280      	movs	r2, #128	@ 0x80
 800aee8:	601a      	str	r2, [r3, #0]
}
 800aeea:	bf00      	nop
 800aeec:	3714      	adds	r7, #20
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	200055c8 	.word	0x200055c8
 800aefc:	20005624 	.word	0x20005624

0800af00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	4a07      	ldr	r2, [pc, #28]	@ (800af2c <vApplicationGetTimerTaskMemory+0x2c>)
 800af10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	4a06      	ldr	r2, [pc, #24]	@ (800af30 <vApplicationGetTimerTaskMemory+0x30>)
 800af16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800af1e:	601a      	str	r2, [r3, #0]
}
 800af20:	bf00      	nop
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	20005824 	.word	0x20005824
 800af30:	20005880 	.word	0x20005880

0800af34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f103 0208 	add.w	r2, r3, #8
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f103 0208 	add.w	r2, r3, #8
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f103 0208 	add.w	r2, r3, #8
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af82:	bf00      	nop
 800af84:	370c      	adds	r7, #12
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr

0800af8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af8e:	b480      	push	{r7}
 800af90:	b085      	sub	sp, #20
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	689a      	ldr	r2, [r3, #8]
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	1c5a      	adds	r2, r3, #1
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	601a      	str	r2, [r3, #0]
}
 800afca:	bf00      	nop
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800afd6:	b480      	push	{r7}
 800afd8:	b085      	sub	sp, #20
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
 800afde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afec:	d103      	bne.n	800aff6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	60fb      	str	r3, [r7, #12]
 800aff4:	e00c      	b.n	800b010 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	3308      	adds	r3, #8
 800affa:	60fb      	str	r3, [r7, #12]
 800affc:	e002      	b.n	800b004 <vListInsert+0x2e>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	60fb      	str	r3, [r7, #12]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d2f6      	bcs.n	800affe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	685a      	ldr	r2, [r3, #4]
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	683a      	ldr	r2, [r7, #0]
 800b01e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	683a      	ldr	r2, [r7, #0]
 800b02a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	1c5a      	adds	r2, r3, #1
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	601a      	str	r2, [r3, #0]
}
 800b03c:	bf00      	nop
 800b03e:	3714      	adds	r7, #20
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	6892      	ldr	r2, [r2, #8]
 800b05e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	6852      	ldr	r2, [r2, #4]
 800b068:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	429a      	cmp	r2, r3
 800b072:	d103      	bne.n	800b07c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	689a      	ldr	r2, [r3, #8]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	1e5a      	subs	r2, r3, #1
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3714      	adds	r7, #20
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10b      	bne.n	800b0c8 <xQueueGenericReset+0x2c>
	__asm volatile
 800b0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b4:	f383 8811 	msr	BASEPRI, r3
 800b0b8:	f3bf 8f6f 	isb	sy
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	60bb      	str	r3, [r7, #8]
}
 800b0c2:	bf00      	nop
 800b0c4:	bf00      	nop
 800b0c6:	e7fd      	b.n	800b0c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b0c8:	f002 f89e 	bl	800d208 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0d4:	68f9      	ldr	r1, [r7, #12]
 800b0d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b0d8:	fb01 f303 	mul.w	r3, r1, r3
 800b0dc:	441a      	add	r2, r3
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	68f9      	ldr	r1, [r7, #12]
 800b0fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b0fe:	fb01 f303 	mul.w	r3, r1, r3
 800b102:	441a      	add	r2, r3
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	22ff      	movs	r2, #255	@ 0xff
 800b10c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	22ff      	movs	r2, #255	@ 0xff
 800b114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d114      	bne.n	800b148 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d01a      	beq.n	800b15c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	3310      	adds	r3, #16
 800b12a:	4618      	mov	r0, r3
 800b12c:	f001 f91a 	bl	800c364 <xTaskRemoveFromEventList>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d012      	beq.n	800b15c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b136:	4b0d      	ldr	r3, [pc, #52]	@ (800b16c <xQueueGenericReset+0xd0>)
 800b138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b13c:	601a      	str	r2, [r3, #0]
 800b13e:	f3bf 8f4f 	dsb	sy
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	e009      	b.n	800b15c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	3310      	adds	r3, #16
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7ff fef1 	bl	800af34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3324      	adds	r3, #36	@ 0x24
 800b156:	4618      	mov	r0, r3
 800b158:	f7ff feec 	bl	800af34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b15c:	f002 f886 	bl	800d26c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b160:	2301      	movs	r3, #1
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	e000ed04 	.word	0xe000ed04

0800b170 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b170:	b580      	push	{r7, lr}
 800b172:	b08e      	sub	sp, #56	@ 0x38
 800b174:	af02      	add	r7, sp, #8
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
 800b17c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10b      	bne.n	800b19c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b188:	f383 8811 	msr	BASEPRI, r3
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b196:	bf00      	nop
 800b198:	bf00      	nop
 800b19a:	e7fd      	b.n	800b198 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10b      	bne.n	800b1ba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a6:	f383 8811 	msr	BASEPRI, r3
 800b1aa:	f3bf 8f6f 	isb	sy
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b1b4:	bf00      	nop
 800b1b6:	bf00      	nop
 800b1b8:	e7fd      	b.n	800b1b6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <xQueueGenericCreateStatic+0x56>
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d001      	beq.n	800b1ca <xQueueGenericCreateStatic+0x5a>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e000      	b.n	800b1cc <xQueueGenericCreateStatic+0x5c>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10b      	bne.n	800b1e8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	623b      	str	r3, [r7, #32]
}
 800b1e2:	bf00      	nop
 800b1e4:	bf00      	nop
 800b1e6:	e7fd      	b.n	800b1e4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d102      	bne.n	800b1f4 <xQueueGenericCreateStatic+0x84>
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d101      	bne.n	800b1f8 <xQueueGenericCreateStatic+0x88>
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e000      	b.n	800b1fa <xQueueGenericCreateStatic+0x8a>
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d10b      	bne.n	800b216 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b202:	f383 8811 	msr	BASEPRI, r3
 800b206:	f3bf 8f6f 	isb	sy
 800b20a:	f3bf 8f4f 	dsb	sy
 800b20e:	61fb      	str	r3, [r7, #28]
}
 800b210:	bf00      	nop
 800b212:	bf00      	nop
 800b214:	e7fd      	b.n	800b212 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b216:	2350      	movs	r3, #80	@ 0x50
 800b218:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2b50      	cmp	r3, #80	@ 0x50
 800b21e:	d00b      	beq.n	800b238 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	61bb      	str	r3, [r7, #24]
}
 800b232:	bf00      	nop
 800b234:	bf00      	nop
 800b236:	e7fd      	b.n	800b234 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b238:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00d      	beq.n	800b260 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b246:	2201      	movs	r2, #1
 800b248:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b24c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	4613      	mov	r3, r2
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	68b9      	ldr	r1, [r7, #8]
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f000 f805 	bl	800b26a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b262:	4618      	mov	r0, r3
 800b264:	3730      	adds	r7, #48	@ 0x30
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b084      	sub	sp, #16
 800b26e:	af00      	add	r7, sp, #0
 800b270:	60f8      	str	r0, [r7, #12]
 800b272:	60b9      	str	r1, [r7, #8]
 800b274:	607a      	str	r2, [r7, #4]
 800b276:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d103      	bne.n	800b286 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	69ba      	ldr	r2, [r7, #24]
 800b282:	601a      	str	r2, [r3, #0]
 800b284:	e002      	b.n	800b28c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	68ba      	ldr	r2, [r7, #8]
 800b296:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b298:	2101      	movs	r1, #1
 800b29a:	69b8      	ldr	r0, [r7, #24]
 800b29c:	f7ff fefe 	bl	800b09c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	78fa      	ldrb	r2, [r7, #3]
 800b2a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b2a8:	bf00      	nop
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b08e      	sub	sp, #56	@ 0x38
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
 800b2bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d10b      	bne.n	800b2e4 <xQueueGenericSend+0x34>
	__asm volatile
 800b2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b2de:	bf00      	nop
 800b2e0:	bf00      	nop
 800b2e2:	e7fd      	b.n	800b2e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d103      	bne.n	800b2f2 <xQueueGenericSend+0x42>
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d101      	bne.n	800b2f6 <xQueueGenericSend+0x46>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e000      	b.n	800b2f8 <xQueueGenericSend+0x48>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10b      	bne.n	800b314 <xQueueGenericSend+0x64>
	__asm volatile
 800b2fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b300:	f383 8811 	msr	BASEPRI, r3
 800b304:	f3bf 8f6f 	isb	sy
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b30e:	bf00      	nop
 800b310:	bf00      	nop
 800b312:	e7fd      	b.n	800b310 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	2b02      	cmp	r3, #2
 800b318:	d103      	bne.n	800b322 <xQueueGenericSend+0x72>
 800b31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d101      	bne.n	800b326 <xQueueGenericSend+0x76>
 800b322:	2301      	movs	r3, #1
 800b324:	e000      	b.n	800b328 <xQueueGenericSend+0x78>
 800b326:	2300      	movs	r3, #0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d10b      	bne.n	800b344 <xQueueGenericSend+0x94>
	__asm volatile
 800b32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b330:	f383 8811 	msr	BASEPRI, r3
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	623b      	str	r3, [r7, #32]
}
 800b33e:	bf00      	nop
 800b340:	bf00      	nop
 800b342:	e7fd      	b.n	800b340 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b344:	f001 f9f6 	bl	800c734 <xTaskGetSchedulerState>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d102      	bne.n	800b354 <xQueueGenericSend+0xa4>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d101      	bne.n	800b358 <xQueueGenericSend+0xa8>
 800b354:	2301      	movs	r3, #1
 800b356:	e000      	b.n	800b35a <xQueueGenericSend+0xaa>
 800b358:	2300      	movs	r3, #0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d10b      	bne.n	800b376 <xQueueGenericSend+0xc6>
	__asm volatile
 800b35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	61fb      	str	r3, [r7, #28]
}
 800b370:	bf00      	nop
 800b372:	bf00      	nop
 800b374:	e7fd      	b.n	800b372 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b376:	f001 ff47 	bl	800d208 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b382:	429a      	cmp	r2, r3
 800b384:	d302      	bcc.n	800b38c <xQueueGenericSend+0xdc>
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	2b02      	cmp	r3, #2
 800b38a:	d129      	bne.n	800b3e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	68b9      	ldr	r1, [r7, #8]
 800b390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b392:	f000 fa0f 	bl	800b7b4 <prvCopyDataToQueue>
 800b396:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d010      	beq.n	800b3c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a2:	3324      	adds	r3, #36	@ 0x24
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f000 ffdd 	bl	800c364 <xTaskRemoveFromEventList>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d013      	beq.n	800b3d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b3b0:	4b3f      	ldr	r3, [pc, #252]	@ (800b4b0 <xQueueGenericSend+0x200>)
 800b3b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3b6:	601a      	str	r2, [r3, #0]
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	e00a      	b.n	800b3d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d007      	beq.n	800b3d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b3c8:	4b39      	ldr	r3, [pc, #228]	@ (800b4b0 <xQueueGenericSend+0x200>)
 800b3ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3ce:	601a      	str	r2, [r3, #0]
 800b3d0:	f3bf 8f4f 	dsb	sy
 800b3d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b3d8:	f001 ff48 	bl	800d26c <vPortExitCritical>
				return pdPASS;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e063      	b.n	800b4a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d103      	bne.n	800b3ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3e6:	f001 ff41 	bl	800d26c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	e05c      	b.n	800b4a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d106      	bne.n	800b402 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3f4:	f107 0314 	add.w	r3, r7, #20
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f001 f83f 	bl	800c47c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3fe:	2301      	movs	r3, #1
 800b400:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b402:	f001 ff33 	bl	800d26c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b406:	f000 fd87 	bl	800bf18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b40a:	f001 fefd 	bl	800d208 <vPortEnterCritical>
 800b40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b410:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b414:	b25b      	sxtb	r3, r3
 800b416:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b41a:	d103      	bne.n	800b424 <xQueueGenericSend+0x174>
 800b41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41e:	2200      	movs	r2, #0
 800b420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b426:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b42a:	b25b      	sxtb	r3, r3
 800b42c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b430:	d103      	bne.n	800b43a <xQueueGenericSend+0x18a>
 800b432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b434:	2200      	movs	r2, #0
 800b436:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b43a:	f001 ff17 	bl	800d26c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b43e:	1d3a      	adds	r2, r7, #4
 800b440:	f107 0314 	add.w	r3, r7, #20
 800b444:	4611      	mov	r1, r2
 800b446:	4618      	mov	r0, r3
 800b448:	f001 f82e 	bl	800c4a8 <xTaskCheckForTimeOut>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d124      	bne.n	800b49c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b452:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b454:	f000 faa6 	bl	800b9a4 <prvIsQueueFull>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d018      	beq.n	800b490 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b460:	3310      	adds	r3, #16
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	4611      	mov	r1, r2
 800b466:	4618      	mov	r0, r3
 800b468:	f000 ff2a 	bl	800c2c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b46c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b46e:	f000 fa31 	bl	800b8d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b472:	f000 fd5f 	bl	800bf34 <xTaskResumeAll>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f47f af7c 	bne.w	800b376 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b47e:	4b0c      	ldr	r3, [pc, #48]	@ (800b4b0 <xQueueGenericSend+0x200>)
 800b480:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b484:	601a      	str	r2, [r3, #0]
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	f3bf 8f6f 	isb	sy
 800b48e:	e772      	b.n	800b376 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b490:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b492:	f000 fa1f 	bl	800b8d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b496:	f000 fd4d 	bl	800bf34 <xTaskResumeAll>
 800b49a:	e76c      	b.n	800b376 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b49c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b49e:	f000 fa19 	bl	800b8d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b4a2:	f000 fd47 	bl	800bf34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b4a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3738      	adds	r7, #56	@ 0x38
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	e000ed04 	.word	0xe000ed04

0800b4b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b090      	sub	sp, #64	@ 0x40
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
 800b4c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d10b      	bne.n	800b4e4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d0:	f383 8811 	msr	BASEPRI, r3
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b4de:	bf00      	nop
 800b4e0:	bf00      	nop
 800b4e2:	e7fd      	b.n	800b4e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d103      	bne.n	800b4f2 <xQueueGenericSendFromISR+0x3e>
 800b4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d101      	bne.n	800b4f6 <xQueueGenericSendFromISR+0x42>
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e000      	b.n	800b4f8 <xQueueGenericSendFromISR+0x44>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d10b      	bne.n	800b514 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b4fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b500:	f383 8811 	msr	BASEPRI, r3
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b50e:	bf00      	nop
 800b510:	bf00      	nop
 800b512:	e7fd      	b.n	800b510 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	2b02      	cmp	r3, #2
 800b518:	d103      	bne.n	800b522 <xQueueGenericSendFromISR+0x6e>
 800b51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b51c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d101      	bne.n	800b526 <xQueueGenericSendFromISR+0x72>
 800b522:	2301      	movs	r3, #1
 800b524:	e000      	b.n	800b528 <xQueueGenericSendFromISR+0x74>
 800b526:	2300      	movs	r3, #0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10b      	bne.n	800b544 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b530:	f383 8811 	msr	BASEPRI, r3
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	f3bf 8f4f 	dsb	sy
 800b53c:	623b      	str	r3, [r7, #32]
}
 800b53e:	bf00      	nop
 800b540:	bf00      	nop
 800b542:	e7fd      	b.n	800b540 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b544:	f001 ff40 	bl	800d3c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b548:	f3ef 8211 	mrs	r2, BASEPRI
 800b54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	61fa      	str	r2, [r7, #28]
 800b55e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b560:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b562:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b566:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d302      	bcc.n	800b576 <xQueueGenericSendFromISR+0xc2>
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	2b02      	cmp	r3, #2
 800b574:	d12f      	bne.n	800b5d6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b578:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b57c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b584:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b586:	683a      	ldr	r2, [r7, #0]
 800b588:	68b9      	ldr	r1, [r7, #8]
 800b58a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b58c:	f000 f912 	bl	800b7b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b590:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b594:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b598:	d112      	bne.n	800b5c0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b59c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d016      	beq.n	800b5d0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a4:	3324      	adds	r3, #36	@ 0x24
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f000 fedc 	bl	800c364 <xTaskRemoveFromEventList>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00e      	beq.n	800b5d0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00b      	beq.n	800b5d0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	601a      	str	r2, [r3, #0]
 800b5be:	e007      	b.n	800b5d0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b5c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	b25a      	sxtb	r2, r3
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b5d4:	e001      	b.n	800b5da <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5dc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b5e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b5e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3740      	adds	r7, #64	@ 0x40
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b08c      	sub	sp, #48	@ 0x30
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b606:	2b00      	cmp	r3, #0
 800b608:	d10b      	bne.n	800b622 <xQueueReceive+0x32>
	__asm volatile
 800b60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	623b      	str	r3, [r7, #32]
}
 800b61c:	bf00      	nop
 800b61e:	bf00      	nop
 800b620:	e7fd      	b.n	800b61e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d103      	bne.n	800b630 <xQueueReceive+0x40>
 800b628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b62a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d101      	bne.n	800b634 <xQueueReceive+0x44>
 800b630:	2301      	movs	r3, #1
 800b632:	e000      	b.n	800b636 <xQueueReceive+0x46>
 800b634:	2300      	movs	r3, #0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10b      	bne.n	800b652 <xQueueReceive+0x62>
	__asm volatile
 800b63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	61fb      	str	r3, [r7, #28]
}
 800b64c:	bf00      	nop
 800b64e:	bf00      	nop
 800b650:	e7fd      	b.n	800b64e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b652:	f001 f86f 	bl	800c734 <xTaskGetSchedulerState>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d102      	bne.n	800b662 <xQueueReceive+0x72>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d101      	bne.n	800b666 <xQueueReceive+0x76>
 800b662:	2301      	movs	r3, #1
 800b664:	e000      	b.n	800b668 <xQueueReceive+0x78>
 800b666:	2300      	movs	r3, #0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10b      	bne.n	800b684 <xQueueReceive+0x94>
	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	61bb      	str	r3, [r7, #24]
}
 800b67e:	bf00      	nop
 800b680:	bf00      	nop
 800b682:	e7fd      	b.n	800b680 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b684:	f001 fdc0 	bl	800d208 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b68a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b68c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b690:	2b00      	cmp	r3, #0
 800b692:	d01f      	beq.n	800b6d4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b694:	68b9      	ldr	r1, [r7, #8]
 800b696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b698:	f000 f8f6 	bl	800b888 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69e:	1e5a      	subs	r2, r3, #1
 800b6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00f      	beq.n	800b6cc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ae:	3310      	adds	r3, #16
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f000 fe57 	bl	800c364 <xTaskRemoveFromEventList>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d007      	beq.n	800b6cc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b6bc:	4b3c      	ldr	r3, [pc, #240]	@ (800b7b0 <xQueueReceive+0x1c0>)
 800b6be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6c2:	601a      	str	r2, [r3, #0]
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6cc:	f001 fdce 	bl	800d26c <vPortExitCritical>
				return pdPASS;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e069      	b.n	800b7a8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d103      	bne.n	800b6e2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6da:	f001 fdc7 	bl	800d26c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	e062      	b.n	800b7a8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d106      	bne.n	800b6f6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6e8:	f107 0310 	add.w	r3, r7, #16
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f000 fec5 	bl	800c47c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6f6:	f001 fdb9 	bl	800d26c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6fa:	f000 fc0d 	bl	800bf18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6fe:	f001 fd83 	bl	800d208 <vPortEnterCritical>
 800b702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b704:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b708:	b25b      	sxtb	r3, r3
 800b70a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b70e:	d103      	bne.n	800b718 <xQueueReceive+0x128>
 800b710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b712:	2200      	movs	r2, #0
 800b714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b71a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b71e:	b25b      	sxtb	r3, r3
 800b720:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b724:	d103      	bne.n	800b72e <xQueueReceive+0x13e>
 800b726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b72e:	f001 fd9d 	bl	800d26c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b732:	1d3a      	adds	r2, r7, #4
 800b734:	f107 0310 	add.w	r3, r7, #16
 800b738:	4611      	mov	r1, r2
 800b73a:	4618      	mov	r0, r3
 800b73c:	f000 feb4 	bl	800c4a8 <xTaskCheckForTimeOut>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d123      	bne.n	800b78e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b748:	f000 f916 	bl	800b978 <prvIsQueueEmpty>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d017      	beq.n	800b782 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b754:	3324      	adds	r3, #36	@ 0x24
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	4611      	mov	r1, r2
 800b75a:	4618      	mov	r0, r3
 800b75c:	f000 fdb0 	bl	800c2c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b760:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b762:	f000 f8b7 	bl	800b8d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b766:	f000 fbe5 	bl	800bf34 <xTaskResumeAll>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d189      	bne.n	800b684 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b770:	4b0f      	ldr	r3, [pc, #60]	@ (800b7b0 <xQueueReceive+0x1c0>)
 800b772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b776:	601a      	str	r2, [r3, #0]
 800b778:	f3bf 8f4f 	dsb	sy
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	e780      	b.n	800b684 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b782:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b784:	f000 f8a6 	bl	800b8d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b788:	f000 fbd4 	bl	800bf34 <xTaskResumeAll>
 800b78c:	e77a      	b.n	800b684 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b78e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b790:	f000 f8a0 	bl	800b8d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b794:	f000 fbce 	bl	800bf34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b798:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b79a:	f000 f8ed 	bl	800b978 <prvIsQueueEmpty>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f43f af6f 	beq.w	800b684 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b7a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3730      	adds	r7, #48	@ 0x30
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	e000ed04 	.word	0xe000ed04

0800b7b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b086      	sub	sp, #24
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10d      	bne.n	800b7ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d14d      	bne.n	800b876 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f000 ffc6 	bl	800c770 <xTaskPriorityDisinherit>
 800b7e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	609a      	str	r2, [r3, #8]
 800b7ec:	e043      	b.n	800b876 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d119      	bne.n	800b828 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6858      	ldr	r0, [r3, #4]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	68b9      	ldr	r1, [r7, #8]
 800b800:	f011 f811 	bl	801c826 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	685a      	ldr	r2, [r3, #4]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b80c:	441a      	add	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	685a      	ldr	r2, [r3, #4]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d32b      	bcc.n	800b876 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	605a      	str	r2, [r3, #4]
 800b826:	e026      	b.n	800b876 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	68d8      	ldr	r0, [r3, #12]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b830:	461a      	mov	r2, r3
 800b832:	68b9      	ldr	r1, [r7, #8]
 800b834:	f010 fff7 	bl	801c826 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	68da      	ldr	r2, [r3, #12]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b840:	425b      	negs	r3, r3
 800b842:	441a      	add	r2, r3
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	68da      	ldr	r2, [r3, #12]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	429a      	cmp	r2, r3
 800b852:	d207      	bcs.n	800b864 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	689a      	ldr	r2, [r3, #8]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b85c:	425b      	negs	r3, r3
 800b85e:	441a      	add	r2, r3
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b02      	cmp	r3, #2
 800b868:	d105      	bne.n	800b876 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	3b01      	subs	r3, #1
 800b874:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	1c5a      	adds	r2, r3, #1
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b87e:	697b      	ldr	r3, [r7, #20]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3718      	adds	r7, #24
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b896:	2b00      	cmp	r3, #0
 800b898:	d018      	beq.n	800b8cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	68da      	ldr	r2, [r3, #12]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8a2:	441a      	add	r2, r3
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	68da      	ldr	r2, [r3, #12]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d303      	bcc.n	800b8bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	68d9      	ldr	r1, [r3, #12]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	6838      	ldr	r0, [r7, #0]
 800b8c8:	f010 ffad 	bl	801c826 <memcpy>
	}
}
 800b8cc:	bf00      	nop
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b8dc:	f001 fc94 	bl	800d208 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b8e8:	e011      	b.n	800b90e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d012      	beq.n	800b918 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	3324      	adds	r3, #36	@ 0x24
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f000 fd34 	bl	800c364 <xTaskRemoveFromEventList>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b902:	f000 fe35 	bl	800c570 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b906:	7bfb      	ldrb	r3, [r7, #15]
 800b908:	3b01      	subs	r3, #1
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b90e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b912:	2b00      	cmp	r3, #0
 800b914:	dce9      	bgt.n	800b8ea <prvUnlockQueue+0x16>
 800b916:	e000      	b.n	800b91a <prvUnlockQueue+0x46>
					break;
 800b918:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	22ff      	movs	r2, #255	@ 0xff
 800b91e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b922:	f001 fca3 	bl	800d26c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b926:	f001 fc6f 	bl	800d208 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b930:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b932:	e011      	b.n	800b958 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	691b      	ldr	r3, [r3, #16]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d012      	beq.n	800b962 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	3310      	adds	r3, #16
 800b940:	4618      	mov	r0, r3
 800b942:	f000 fd0f 	bl	800c364 <xTaskRemoveFromEventList>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d001      	beq.n	800b950 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b94c:	f000 fe10 	bl	800c570 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b950:	7bbb      	ldrb	r3, [r7, #14]
 800b952:	3b01      	subs	r3, #1
 800b954:	b2db      	uxtb	r3, r3
 800b956:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	dce9      	bgt.n	800b934 <prvUnlockQueue+0x60>
 800b960:	e000      	b.n	800b964 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b962:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	22ff      	movs	r2, #255	@ 0xff
 800b968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b96c:	f001 fc7e 	bl	800d26c <vPortExitCritical>
}
 800b970:	bf00      	nop
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b980:	f001 fc42 	bl	800d208 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d102      	bne.n	800b992 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b98c:	2301      	movs	r3, #1
 800b98e:	60fb      	str	r3, [r7, #12]
 800b990:	e001      	b.n	800b996 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b992:	2300      	movs	r3, #0
 800b994:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b996:	f001 fc69 	bl	800d26c <vPortExitCritical>

	return xReturn;
 800b99a:	68fb      	ldr	r3, [r7, #12]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3710      	adds	r7, #16
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b9ac:	f001 fc2c 	bl	800d208 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d102      	bne.n	800b9c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	60fb      	str	r3, [r7, #12]
 800b9c0:	e001      	b.n	800b9c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b9c6:	f001 fc51 	bl	800d26c <vPortExitCritical>

	return xReturn;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3710      	adds	r7, #16
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b9de:	2300      	movs	r3, #0
 800b9e0:	60fb      	str	r3, [r7, #12]
 800b9e2:	e014      	b.n	800ba0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b9e4:	4a0f      	ldr	r2, [pc, #60]	@ (800ba24 <vQueueAddToRegistry+0x50>)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10b      	bne.n	800ba08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b9f0:	490c      	ldr	r1, [pc, #48]	@ (800ba24 <vQueueAddToRegistry+0x50>)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	683a      	ldr	r2, [r7, #0]
 800b9f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b9fa:	4a0a      	ldr	r2, [pc, #40]	@ (800ba24 <vQueueAddToRegistry+0x50>)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	00db      	lsls	r3, r3, #3
 800ba00:	4413      	add	r3, r2
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ba06:	e006      	b.n	800ba16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	60fb      	str	r3, [r7, #12]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2b07      	cmp	r3, #7
 800ba12:	d9e7      	bls.n	800b9e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ba14:	bf00      	nop
 800ba16:	bf00      	nop
 800ba18:	3714      	adds	r7, #20
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	20005c80 	.word	0x20005c80

0800ba28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ba38:	f001 fbe6 	bl	800d208 <vPortEnterCritical>
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba42:	b25b      	sxtb	r3, r3
 800ba44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba48:	d103      	bne.n	800ba52 <vQueueWaitForMessageRestricted+0x2a>
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba58:	b25b      	sxtb	r3, r3
 800ba5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba5e:	d103      	bne.n	800ba68 <vQueueWaitForMessageRestricted+0x40>
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ba68:	f001 fc00 	bl	800d26c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d106      	bne.n	800ba82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	3324      	adds	r3, #36	@ 0x24
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	68b9      	ldr	r1, [r7, #8]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f000 fc45 	bl	800c30c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ba82:	6978      	ldr	r0, [r7, #20]
 800ba84:	f7ff ff26 	bl	800b8d4 <prvUnlockQueue>
	}
 800ba88:	bf00      	nop
 800ba8a:	3718      	adds	r7, #24
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b08e      	sub	sp, #56	@ 0x38
 800ba94:	af04      	add	r7, sp, #16
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
 800ba9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ba9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10b      	bne.n	800babc <xTaskCreateStatic+0x2c>
	__asm volatile
 800baa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	623b      	str	r3, [r7, #32]
}
 800bab6:	bf00      	nop
 800bab8:	bf00      	nop
 800baba:	e7fd      	b.n	800bab8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800babc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d10b      	bne.n	800bada <xTaskCreateStatic+0x4a>
	__asm volatile
 800bac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bac6:	f383 8811 	msr	BASEPRI, r3
 800baca:	f3bf 8f6f 	isb	sy
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	61fb      	str	r3, [r7, #28]
}
 800bad4:	bf00      	nop
 800bad6:	bf00      	nop
 800bad8:	e7fd      	b.n	800bad6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bada:	235c      	movs	r3, #92	@ 0x5c
 800badc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	2b5c      	cmp	r3, #92	@ 0x5c
 800bae2:	d00b      	beq.n	800bafc <xTaskCreateStatic+0x6c>
	__asm volatile
 800bae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae8:	f383 8811 	msr	BASEPRI, r3
 800baec:	f3bf 8f6f 	isb	sy
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	61bb      	str	r3, [r7, #24]
}
 800baf6:	bf00      	nop
 800baf8:	bf00      	nop
 800bafa:	e7fd      	b.n	800baf8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bafc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d01e      	beq.n	800bb42 <xTaskCreateStatic+0xb2>
 800bb04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d01b      	beq.n	800bb42 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb0c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb12:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb16:	2202      	movs	r2, #2
 800bb18:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	9303      	str	r3, [sp, #12]
 800bb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb22:	9302      	str	r3, [sp, #8]
 800bb24:	f107 0314 	add.w	r3, r7, #20
 800bb28:	9301      	str	r3, [sp, #4]
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	68b9      	ldr	r1, [r7, #8]
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f000 f850 	bl	800bbda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bb3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bb3c:	f000 f8de 	bl	800bcfc <prvAddNewTaskToReadyList>
 800bb40:	e001      	b.n	800bb46 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bb42:	2300      	movs	r3, #0
 800bb44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bb46:	697b      	ldr	r3, [r7, #20]
	}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3728      	adds	r7, #40	@ 0x28
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b08c      	sub	sp, #48	@ 0x30
 800bb54:	af04      	add	r7, sp, #16
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	603b      	str	r3, [r7, #0]
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bb60:	88fb      	ldrh	r3, [r7, #6]
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	4618      	mov	r0, r3
 800bb66:	f001 fc71 	bl	800d44c <pvPortMalloc>
 800bb6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00e      	beq.n	800bb90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bb72:	205c      	movs	r0, #92	@ 0x5c
 800bb74:	f001 fc6a 	bl	800d44c <pvPortMalloc>
 800bb78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d003      	beq.n	800bb88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	697a      	ldr	r2, [r7, #20]
 800bb84:	631a      	str	r2, [r3, #48]	@ 0x30
 800bb86:	e005      	b.n	800bb94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bb88:	6978      	ldr	r0, [r7, #20]
 800bb8a:	f001 fd2d 	bl	800d5e8 <vPortFree>
 800bb8e:	e001      	b.n	800bb94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bb90:	2300      	movs	r3, #0
 800bb92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d017      	beq.n	800bbca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bba2:	88fa      	ldrh	r2, [r7, #6]
 800bba4:	2300      	movs	r3, #0
 800bba6:	9303      	str	r3, [sp, #12]
 800bba8:	69fb      	ldr	r3, [r7, #28]
 800bbaa:	9302      	str	r3, [sp, #8]
 800bbac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbae:	9301      	str	r3, [sp, #4]
 800bbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	68b9      	ldr	r1, [r7, #8]
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f000 f80e 	bl	800bbda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bbbe:	69f8      	ldr	r0, [r7, #28]
 800bbc0:	f000 f89c 	bl	800bcfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	61bb      	str	r3, [r7, #24]
 800bbc8:	e002      	b.n	800bbd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bbca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bbce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bbd0:	69bb      	ldr	r3, [r7, #24]
	}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3720      	adds	r7, #32
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b088      	sub	sp, #32
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	60f8      	str	r0, [r7, #12]
 800bbe2:	60b9      	str	r1, [r7, #8]
 800bbe4:	607a      	str	r2, [r7, #4]
 800bbe6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bbe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	21a5      	movs	r1, #165	@ 0xa5
 800bbf4:	f010 fd4e 	bl	801c694 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bbf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bc02:	3b01      	subs	r3, #1
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4413      	add	r3, r2
 800bc08:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	f023 0307 	bic.w	r3, r3, #7
 800bc10:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	f003 0307 	and.w	r3, r3, #7
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00b      	beq.n	800bc34 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bc1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc20:	f383 8811 	msr	BASEPRI, r3
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	617b      	str	r3, [r7, #20]
}
 800bc2e:	bf00      	nop
 800bc30:	bf00      	nop
 800bc32:	e7fd      	b.n	800bc30 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d01f      	beq.n	800bc7a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	61fb      	str	r3, [r7, #28]
 800bc3e:	e012      	b.n	800bc66 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bc40:	68ba      	ldr	r2, [r7, #8]
 800bc42:	69fb      	ldr	r3, [r7, #28]
 800bc44:	4413      	add	r3, r2
 800bc46:	7819      	ldrb	r1, [r3, #0]
 800bc48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc4a:	69fb      	ldr	r3, [r7, #28]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	3334      	adds	r3, #52	@ 0x34
 800bc50:	460a      	mov	r2, r1
 800bc52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	4413      	add	r3, r2
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d006      	beq.n	800bc6e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	3301      	adds	r3, #1
 800bc64:	61fb      	str	r3, [r7, #28]
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	2b0f      	cmp	r3, #15
 800bc6a:	d9e9      	bls.n	800bc40 <prvInitialiseNewTask+0x66>
 800bc6c:	e000      	b.n	800bc70 <prvInitialiseNewTask+0x96>
			{
				break;
 800bc6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bc70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc72:	2200      	movs	r2, #0
 800bc74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bc78:	e003      	b.n	800bc82 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bc82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc84:	2b37      	cmp	r3, #55	@ 0x37
 800bc86:	d901      	bls.n	800bc8c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bc88:	2337      	movs	r3, #55	@ 0x37
 800bc8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bc8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc90:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc96:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bc9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca0:	3304      	adds	r3, #4
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7ff f966 	bl	800af74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcaa:	3318      	adds	r3, #24
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7ff f961 	bl	800af74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bcb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bcbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcc6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcca:	2200      	movs	r2, #0
 800bccc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bcce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bcd6:	683a      	ldr	r2, [r7, #0]
 800bcd8:	68f9      	ldr	r1, [r7, #12]
 800bcda:	69b8      	ldr	r0, [r7, #24]
 800bcdc:	f001 f966 	bl	800cfac <pxPortInitialiseStack>
 800bce0:	4602      	mov	r2, r0
 800bce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d002      	beq.n	800bcf2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bcec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcf2:	bf00      	nop
 800bcf4:	3720      	adds	r7, #32
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
	...

0800bcfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bd04:	f001 fa80 	bl	800d208 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bd08:	4b2d      	ldr	r3, [pc, #180]	@ (800bdc0 <prvAddNewTaskToReadyList+0xc4>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	4a2c      	ldr	r2, [pc, #176]	@ (800bdc0 <prvAddNewTaskToReadyList+0xc4>)
 800bd10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bd12:	4b2c      	ldr	r3, [pc, #176]	@ (800bdc4 <prvAddNewTaskToReadyList+0xc8>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d109      	bne.n	800bd2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bd1a:	4a2a      	ldr	r2, [pc, #168]	@ (800bdc4 <prvAddNewTaskToReadyList+0xc8>)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bd20:	4b27      	ldr	r3, [pc, #156]	@ (800bdc0 <prvAddNewTaskToReadyList+0xc4>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d110      	bne.n	800bd4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bd28:	f000 fc46 	bl	800c5b8 <prvInitialiseTaskLists>
 800bd2c:	e00d      	b.n	800bd4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bd2e:	4b26      	ldr	r3, [pc, #152]	@ (800bdc8 <prvAddNewTaskToReadyList+0xcc>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d109      	bne.n	800bd4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bd36:	4b23      	ldr	r3, [pc, #140]	@ (800bdc4 <prvAddNewTaskToReadyList+0xc8>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d802      	bhi.n	800bd4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bd44:	4a1f      	ldr	r2, [pc, #124]	@ (800bdc4 <prvAddNewTaskToReadyList+0xc8>)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bd4a:	4b20      	ldr	r3, [pc, #128]	@ (800bdcc <prvAddNewTaskToReadyList+0xd0>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	4a1e      	ldr	r2, [pc, #120]	@ (800bdcc <prvAddNewTaskToReadyList+0xd0>)
 800bd52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bd54:	4b1d      	ldr	r3, [pc, #116]	@ (800bdcc <prvAddNewTaskToReadyList+0xd0>)
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd60:	4b1b      	ldr	r3, [pc, #108]	@ (800bdd0 <prvAddNewTaskToReadyList+0xd4>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d903      	bls.n	800bd70 <prvAddNewTaskToReadyList+0x74>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd6c:	4a18      	ldr	r2, [pc, #96]	@ (800bdd0 <prvAddNewTaskToReadyList+0xd4>)
 800bd6e:	6013      	str	r3, [r2, #0]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd74:	4613      	mov	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	4413      	add	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	4a15      	ldr	r2, [pc, #84]	@ (800bdd4 <prvAddNewTaskToReadyList+0xd8>)
 800bd7e:	441a      	add	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	3304      	adds	r3, #4
 800bd84:	4619      	mov	r1, r3
 800bd86:	4610      	mov	r0, r2
 800bd88:	f7ff f901 	bl	800af8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bd8c:	f001 fa6e 	bl	800d26c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bd90:	4b0d      	ldr	r3, [pc, #52]	@ (800bdc8 <prvAddNewTaskToReadyList+0xcc>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00e      	beq.n	800bdb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bd98:	4b0a      	ldr	r3, [pc, #40]	@ (800bdc4 <prvAddNewTaskToReadyList+0xc8>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d207      	bcs.n	800bdb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bda6:	4b0c      	ldr	r3, [pc, #48]	@ (800bdd8 <prvAddNewTaskToReadyList+0xdc>)
 800bda8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdac:	601a      	str	r2, [r3, #0]
 800bdae:	f3bf 8f4f 	dsb	sy
 800bdb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bdb6:	bf00      	nop
 800bdb8:	3708      	adds	r7, #8
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	20006194 	.word	0x20006194
 800bdc4:	20005cc0 	.word	0x20005cc0
 800bdc8:	200061a0 	.word	0x200061a0
 800bdcc:	200061b0 	.word	0x200061b0
 800bdd0:	2000619c 	.word	0x2000619c
 800bdd4:	20005cc4 	.word	0x20005cc4
 800bdd8:	e000ed04 	.word	0xe000ed04

0800bddc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bde4:	2300      	movs	r3, #0
 800bde6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d018      	beq.n	800be20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bdee:	4b14      	ldr	r3, [pc, #80]	@ (800be40 <vTaskDelay+0x64>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00b      	beq.n	800be0e <vTaskDelay+0x32>
	__asm volatile
 800bdf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdfa:	f383 8811 	msr	BASEPRI, r3
 800bdfe:	f3bf 8f6f 	isb	sy
 800be02:	f3bf 8f4f 	dsb	sy
 800be06:	60bb      	str	r3, [r7, #8]
}
 800be08:	bf00      	nop
 800be0a:	bf00      	nop
 800be0c:	e7fd      	b.n	800be0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800be0e:	f000 f883 	bl	800bf18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800be12:	2100      	movs	r1, #0
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 fd1b 	bl	800c850 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800be1a:	f000 f88b 	bl	800bf34 <xTaskResumeAll>
 800be1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d107      	bne.n	800be36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800be26:	4b07      	ldr	r3, [pc, #28]	@ (800be44 <vTaskDelay+0x68>)
 800be28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be2c:	601a      	str	r2, [r3, #0]
 800be2e:	f3bf 8f4f 	dsb	sy
 800be32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be36:	bf00      	nop
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	200061bc 	.word	0x200061bc
 800be44:	e000ed04 	.word	0xe000ed04

0800be48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b08a      	sub	sp, #40	@ 0x28
 800be4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800be4e:	2300      	movs	r3, #0
 800be50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800be52:	2300      	movs	r3, #0
 800be54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800be56:	463a      	mov	r2, r7
 800be58:	1d39      	adds	r1, r7, #4
 800be5a:	f107 0308 	add.w	r3, r7, #8
 800be5e:	4618      	mov	r0, r3
 800be60:	f7ff f834 	bl	800aecc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800be64:	6839      	ldr	r1, [r7, #0]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	9202      	str	r2, [sp, #8]
 800be6c:	9301      	str	r3, [sp, #4]
 800be6e:	2300      	movs	r3, #0
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	2300      	movs	r3, #0
 800be74:	460a      	mov	r2, r1
 800be76:	4922      	ldr	r1, [pc, #136]	@ (800bf00 <vTaskStartScheduler+0xb8>)
 800be78:	4822      	ldr	r0, [pc, #136]	@ (800bf04 <vTaskStartScheduler+0xbc>)
 800be7a:	f7ff fe09 	bl	800ba90 <xTaskCreateStatic>
 800be7e:	4603      	mov	r3, r0
 800be80:	4a21      	ldr	r2, [pc, #132]	@ (800bf08 <vTaskStartScheduler+0xc0>)
 800be82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800be84:	4b20      	ldr	r3, [pc, #128]	@ (800bf08 <vTaskStartScheduler+0xc0>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d002      	beq.n	800be92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800be8c:	2301      	movs	r3, #1
 800be8e:	617b      	str	r3, [r7, #20]
 800be90:	e001      	b.n	800be96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800be92:	2300      	movs	r3, #0
 800be94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d102      	bne.n	800bea2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800be9c:	f000 fd2c 	bl	800c8f8 <xTimerCreateTimerTask>
 800bea0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d116      	bne.n	800bed6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800bea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beac:	f383 8811 	msr	BASEPRI, r3
 800beb0:	f3bf 8f6f 	isb	sy
 800beb4:	f3bf 8f4f 	dsb	sy
 800beb8:	613b      	str	r3, [r7, #16]
}
 800beba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bebc:	4b13      	ldr	r3, [pc, #76]	@ (800bf0c <vTaskStartScheduler+0xc4>)
 800bebe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bec2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bec4:	4b12      	ldr	r3, [pc, #72]	@ (800bf10 <vTaskStartScheduler+0xc8>)
 800bec6:	2201      	movs	r2, #1
 800bec8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800beca:	4b12      	ldr	r3, [pc, #72]	@ (800bf14 <vTaskStartScheduler+0xcc>)
 800becc:	2200      	movs	r2, #0
 800bece:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bed0:	f001 f8f6 	bl	800d0c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bed4:	e00f      	b.n	800bef6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bedc:	d10b      	bne.n	800bef6 <vTaskStartScheduler+0xae>
	__asm volatile
 800bede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	60fb      	str	r3, [r7, #12]
}
 800bef0:	bf00      	nop
 800bef2:	bf00      	nop
 800bef4:	e7fd      	b.n	800bef2 <vTaskStartScheduler+0xaa>
}
 800bef6:	bf00      	nop
 800bef8:	3718      	adds	r7, #24
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	0801dcb0 	.word	0x0801dcb0
 800bf04:	0800c589 	.word	0x0800c589
 800bf08:	200061b8 	.word	0x200061b8
 800bf0c:	200061b4 	.word	0x200061b4
 800bf10:	200061a0 	.word	0x200061a0
 800bf14:	20006198 	.word	0x20006198

0800bf18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bf18:	b480      	push	{r7}
 800bf1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bf1c:	4b04      	ldr	r3, [pc, #16]	@ (800bf30 <vTaskSuspendAll+0x18>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	3301      	adds	r3, #1
 800bf22:	4a03      	ldr	r2, [pc, #12]	@ (800bf30 <vTaskSuspendAll+0x18>)
 800bf24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bf26:	bf00      	nop
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr
 800bf30:	200061bc 	.word	0x200061bc

0800bf34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bf42:	4b42      	ldr	r3, [pc, #264]	@ (800c04c <xTaskResumeAll+0x118>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d10b      	bne.n	800bf62 <xTaskResumeAll+0x2e>
	__asm volatile
 800bf4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf4e:	f383 8811 	msr	BASEPRI, r3
 800bf52:	f3bf 8f6f 	isb	sy
 800bf56:	f3bf 8f4f 	dsb	sy
 800bf5a:	603b      	str	r3, [r7, #0]
}
 800bf5c:	bf00      	nop
 800bf5e:	bf00      	nop
 800bf60:	e7fd      	b.n	800bf5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bf62:	f001 f951 	bl	800d208 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bf66:	4b39      	ldr	r3, [pc, #228]	@ (800c04c <xTaskResumeAll+0x118>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	4a37      	ldr	r2, [pc, #220]	@ (800c04c <xTaskResumeAll+0x118>)
 800bf6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf70:	4b36      	ldr	r3, [pc, #216]	@ (800c04c <xTaskResumeAll+0x118>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d162      	bne.n	800c03e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bf78:	4b35      	ldr	r3, [pc, #212]	@ (800c050 <xTaskResumeAll+0x11c>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d05e      	beq.n	800c03e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf80:	e02f      	b.n	800bfe2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf82:	4b34      	ldr	r3, [pc, #208]	@ (800c054 <xTaskResumeAll+0x120>)
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3318      	adds	r3, #24
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7ff f85a 	bl	800b048 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	3304      	adds	r3, #4
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7ff f855 	bl	800b048 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfa2:	4b2d      	ldr	r3, [pc, #180]	@ (800c058 <xTaskResumeAll+0x124>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d903      	bls.n	800bfb2 <xTaskResumeAll+0x7e>
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfae:	4a2a      	ldr	r2, [pc, #168]	@ (800c058 <xTaskResumeAll+0x124>)
 800bfb0:	6013      	str	r3, [r2, #0]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	4413      	add	r3, r2
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	4a27      	ldr	r2, [pc, #156]	@ (800c05c <xTaskResumeAll+0x128>)
 800bfc0:	441a      	add	r2, r3
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	3304      	adds	r3, #4
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	4610      	mov	r0, r2
 800bfca:	f7fe ffe0 	bl	800af8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfd2:	4b23      	ldr	r3, [pc, #140]	@ (800c060 <xTaskResumeAll+0x12c>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d302      	bcc.n	800bfe2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bfdc:	4b21      	ldr	r3, [pc, #132]	@ (800c064 <xTaskResumeAll+0x130>)
 800bfde:	2201      	movs	r2, #1
 800bfe0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bfe2:	4b1c      	ldr	r3, [pc, #112]	@ (800c054 <xTaskResumeAll+0x120>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d1cb      	bne.n	800bf82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d001      	beq.n	800bff4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bff0:	f000 fb80 	bl	800c6f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bff4:	4b1c      	ldr	r3, [pc, #112]	@ (800c068 <xTaskResumeAll+0x134>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d010      	beq.n	800c022 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c000:	f000 f846 	bl	800c090 <xTaskIncrementTick>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d002      	beq.n	800c010 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c00a:	4b16      	ldr	r3, [pc, #88]	@ (800c064 <xTaskResumeAll+0x130>)
 800c00c:	2201      	movs	r2, #1
 800c00e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	3b01      	subs	r3, #1
 800c014:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d1f1      	bne.n	800c000 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c01c:	4b12      	ldr	r3, [pc, #72]	@ (800c068 <xTaskResumeAll+0x134>)
 800c01e:	2200      	movs	r2, #0
 800c020:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c022:	4b10      	ldr	r3, [pc, #64]	@ (800c064 <xTaskResumeAll+0x130>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d009      	beq.n	800c03e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c02a:	2301      	movs	r3, #1
 800c02c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c02e:	4b0f      	ldr	r3, [pc, #60]	@ (800c06c <xTaskResumeAll+0x138>)
 800c030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c034:	601a      	str	r2, [r3, #0]
 800c036:	f3bf 8f4f 	dsb	sy
 800c03a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c03e:	f001 f915 	bl	800d26c <vPortExitCritical>

	return xAlreadyYielded;
 800c042:	68bb      	ldr	r3, [r7, #8]
}
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	200061bc 	.word	0x200061bc
 800c050:	20006194 	.word	0x20006194
 800c054:	20006154 	.word	0x20006154
 800c058:	2000619c 	.word	0x2000619c
 800c05c:	20005cc4 	.word	0x20005cc4
 800c060:	20005cc0 	.word	0x20005cc0
 800c064:	200061a8 	.word	0x200061a8
 800c068:	200061a4 	.word	0x200061a4
 800c06c:	e000ed04 	.word	0xe000ed04

0800c070 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c076:	4b05      	ldr	r3, [pc, #20]	@ (800c08c <xTaskGetTickCount+0x1c>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c07c:	687b      	ldr	r3, [r7, #4]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	370c      	adds	r7, #12
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	20006198 	.word	0x20006198

0800c090 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c096:	2300      	movs	r3, #0
 800c098:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c09a:	4b4f      	ldr	r3, [pc, #316]	@ (800c1d8 <xTaskIncrementTick+0x148>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f040 8090 	bne.w	800c1c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c0a4:	4b4d      	ldr	r3, [pc, #308]	@ (800c1dc <xTaskIncrementTick+0x14c>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c0ac:	4a4b      	ldr	r2, [pc, #300]	@ (800c1dc <xTaskIncrementTick+0x14c>)
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d121      	bne.n	800c0fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c0b8:	4b49      	ldr	r3, [pc, #292]	@ (800c1e0 <xTaskIncrementTick+0x150>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00b      	beq.n	800c0da <xTaskIncrementTick+0x4a>
	__asm volatile
 800c0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c6:	f383 8811 	msr	BASEPRI, r3
 800c0ca:	f3bf 8f6f 	isb	sy
 800c0ce:	f3bf 8f4f 	dsb	sy
 800c0d2:	603b      	str	r3, [r7, #0]
}
 800c0d4:	bf00      	nop
 800c0d6:	bf00      	nop
 800c0d8:	e7fd      	b.n	800c0d6 <xTaskIncrementTick+0x46>
 800c0da:	4b41      	ldr	r3, [pc, #260]	@ (800c1e0 <xTaskIncrementTick+0x150>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	60fb      	str	r3, [r7, #12]
 800c0e0:	4b40      	ldr	r3, [pc, #256]	@ (800c1e4 <xTaskIncrementTick+0x154>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a3e      	ldr	r2, [pc, #248]	@ (800c1e0 <xTaskIncrementTick+0x150>)
 800c0e6:	6013      	str	r3, [r2, #0]
 800c0e8:	4a3e      	ldr	r2, [pc, #248]	@ (800c1e4 <xTaskIncrementTick+0x154>)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	6013      	str	r3, [r2, #0]
 800c0ee:	4b3e      	ldr	r3, [pc, #248]	@ (800c1e8 <xTaskIncrementTick+0x158>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	4a3c      	ldr	r2, [pc, #240]	@ (800c1e8 <xTaskIncrementTick+0x158>)
 800c0f6:	6013      	str	r3, [r2, #0]
 800c0f8:	f000 fafc 	bl	800c6f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c0fc:	4b3b      	ldr	r3, [pc, #236]	@ (800c1ec <xTaskIncrementTick+0x15c>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	693a      	ldr	r2, [r7, #16]
 800c102:	429a      	cmp	r2, r3
 800c104:	d349      	bcc.n	800c19a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c106:	4b36      	ldr	r3, [pc, #216]	@ (800c1e0 <xTaskIncrementTick+0x150>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d104      	bne.n	800c11a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c110:	4b36      	ldr	r3, [pc, #216]	@ (800c1ec <xTaskIncrementTick+0x15c>)
 800c112:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c116:	601a      	str	r2, [r3, #0]
					break;
 800c118:	e03f      	b.n	800c19a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c11a:	4b31      	ldr	r3, [pc, #196]	@ (800c1e0 <xTaskIncrementTick+0x150>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c12a:	693a      	ldr	r2, [r7, #16]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d203      	bcs.n	800c13a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c132:	4a2e      	ldr	r2, [pc, #184]	@ (800c1ec <xTaskIncrementTick+0x15c>)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c138:	e02f      	b.n	800c19a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	3304      	adds	r3, #4
 800c13e:	4618      	mov	r0, r3
 800c140:	f7fe ff82 	bl	800b048 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d004      	beq.n	800c156 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	3318      	adds	r3, #24
 800c150:	4618      	mov	r0, r3
 800c152:	f7fe ff79 	bl	800b048 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c15a:	4b25      	ldr	r3, [pc, #148]	@ (800c1f0 <xTaskIncrementTick+0x160>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d903      	bls.n	800c16a <xTaskIncrementTick+0xda>
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c166:	4a22      	ldr	r2, [pc, #136]	@ (800c1f0 <xTaskIncrementTick+0x160>)
 800c168:	6013      	str	r3, [r2, #0]
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c16e:	4613      	mov	r3, r2
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	4413      	add	r3, r2
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	4a1f      	ldr	r2, [pc, #124]	@ (800c1f4 <xTaskIncrementTick+0x164>)
 800c178:	441a      	add	r2, r3
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	3304      	adds	r3, #4
 800c17e:	4619      	mov	r1, r3
 800c180:	4610      	mov	r0, r2
 800c182:	f7fe ff04 	bl	800af8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c18a:	4b1b      	ldr	r3, [pc, #108]	@ (800c1f8 <xTaskIncrementTick+0x168>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c190:	429a      	cmp	r2, r3
 800c192:	d3b8      	bcc.n	800c106 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c194:	2301      	movs	r3, #1
 800c196:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c198:	e7b5      	b.n	800c106 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c19a:	4b17      	ldr	r3, [pc, #92]	@ (800c1f8 <xTaskIncrementTick+0x168>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1a0:	4914      	ldr	r1, [pc, #80]	@ (800c1f4 <xTaskIncrementTick+0x164>)
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	4413      	add	r3, r2
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	440b      	add	r3, r1
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d901      	bls.n	800c1b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c1b6:	4b11      	ldr	r3, [pc, #68]	@ (800c1fc <xTaskIncrementTick+0x16c>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d007      	beq.n	800c1ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	617b      	str	r3, [r7, #20]
 800c1c2:	e004      	b.n	800c1ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c1c4:	4b0e      	ldr	r3, [pc, #56]	@ (800c200 <xTaskIncrementTick+0x170>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	4a0d      	ldr	r2, [pc, #52]	@ (800c200 <xTaskIncrementTick+0x170>)
 800c1cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c1ce:	697b      	ldr	r3, [r7, #20]
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3718      	adds	r7, #24
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	200061bc 	.word	0x200061bc
 800c1dc:	20006198 	.word	0x20006198
 800c1e0:	2000614c 	.word	0x2000614c
 800c1e4:	20006150 	.word	0x20006150
 800c1e8:	200061ac 	.word	0x200061ac
 800c1ec:	200061b4 	.word	0x200061b4
 800c1f0:	2000619c 	.word	0x2000619c
 800c1f4:	20005cc4 	.word	0x20005cc4
 800c1f8:	20005cc0 	.word	0x20005cc0
 800c1fc:	200061a8 	.word	0x200061a8
 800c200:	200061a4 	.word	0x200061a4

0800c204 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c20a:	4b28      	ldr	r3, [pc, #160]	@ (800c2ac <vTaskSwitchContext+0xa8>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d003      	beq.n	800c21a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c212:	4b27      	ldr	r3, [pc, #156]	@ (800c2b0 <vTaskSwitchContext+0xac>)
 800c214:	2201      	movs	r2, #1
 800c216:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c218:	e042      	b.n	800c2a0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800c21a:	4b25      	ldr	r3, [pc, #148]	@ (800c2b0 <vTaskSwitchContext+0xac>)
 800c21c:	2200      	movs	r2, #0
 800c21e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c220:	4b24      	ldr	r3, [pc, #144]	@ (800c2b4 <vTaskSwitchContext+0xb0>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	60fb      	str	r3, [r7, #12]
 800c226:	e011      	b.n	800c24c <vTaskSwitchContext+0x48>
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d10b      	bne.n	800c246 <vTaskSwitchContext+0x42>
	__asm volatile
 800c22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c232:	f383 8811 	msr	BASEPRI, r3
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	607b      	str	r3, [r7, #4]
}
 800c240:	bf00      	nop
 800c242:	bf00      	nop
 800c244:	e7fd      	b.n	800c242 <vTaskSwitchContext+0x3e>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	3b01      	subs	r3, #1
 800c24a:	60fb      	str	r3, [r7, #12]
 800c24c:	491a      	ldr	r1, [pc, #104]	@ (800c2b8 <vTaskSwitchContext+0xb4>)
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	4613      	mov	r3, r2
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	4413      	add	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	440b      	add	r3, r1
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d0e3      	beq.n	800c228 <vTaskSwitchContext+0x24>
 800c260:	68fa      	ldr	r2, [r7, #12]
 800c262:	4613      	mov	r3, r2
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	4413      	add	r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	4a13      	ldr	r2, [pc, #76]	@ (800c2b8 <vTaskSwitchContext+0xb4>)
 800c26c:	4413      	add	r3, r2
 800c26e:	60bb      	str	r3, [r7, #8]
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	685a      	ldr	r2, [r3, #4]
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	605a      	str	r2, [r3, #4]
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	685a      	ldr	r2, [r3, #4]
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	3308      	adds	r3, #8
 800c282:	429a      	cmp	r2, r3
 800c284:	d104      	bne.n	800c290 <vTaskSwitchContext+0x8c>
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	685a      	ldr	r2, [r3, #4]
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	605a      	str	r2, [r3, #4]
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	4a09      	ldr	r2, [pc, #36]	@ (800c2bc <vTaskSwitchContext+0xb8>)
 800c298:	6013      	str	r3, [r2, #0]
 800c29a:	4a06      	ldr	r2, [pc, #24]	@ (800c2b4 <vTaskSwitchContext+0xb0>)
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	6013      	str	r3, [r2, #0]
}
 800c2a0:	bf00      	nop
 800c2a2:	3714      	adds	r7, #20
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr
 800c2ac:	200061bc 	.word	0x200061bc
 800c2b0:	200061a8 	.word	0x200061a8
 800c2b4:	2000619c 	.word	0x2000619c
 800c2b8:	20005cc4 	.word	0x20005cc4
 800c2bc:	20005cc0 	.word	0x20005cc0

0800c2c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d10b      	bne.n	800c2e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	60fb      	str	r3, [r7, #12]
}
 800c2e2:	bf00      	nop
 800c2e4:	bf00      	nop
 800c2e6:	e7fd      	b.n	800c2e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c2e8:	4b07      	ldr	r3, [pc, #28]	@ (800c308 <vTaskPlaceOnEventList+0x48>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	3318      	adds	r3, #24
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f7fe fe70 	bl	800afd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c2f6:	2101      	movs	r1, #1
 800c2f8:	6838      	ldr	r0, [r7, #0]
 800c2fa:	f000 faa9 	bl	800c850 <prvAddCurrentTaskToDelayedList>
}
 800c2fe:	bf00      	nop
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	20005cc0 	.word	0x20005cc0

0800c30c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b086      	sub	sp, #24
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d10b      	bne.n	800c336 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	617b      	str	r3, [r7, #20]
}
 800c330:	bf00      	nop
 800c332:	bf00      	nop
 800c334:	e7fd      	b.n	800c332 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c336:	4b0a      	ldr	r3, [pc, #40]	@ (800c360 <vTaskPlaceOnEventListRestricted+0x54>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	3318      	adds	r3, #24
 800c33c:	4619      	mov	r1, r3
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f7fe fe25 	bl	800af8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d002      	beq.n	800c350 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c34a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c34e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c350:	6879      	ldr	r1, [r7, #4]
 800c352:	68b8      	ldr	r0, [r7, #8]
 800c354:	f000 fa7c 	bl	800c850 <prvAddCurrentTaskToDelayedList>
	}
 800c358:	bf00      	nop
 800c35a:	3718      	adds	r7, #24
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	20005cc0 	.word	0x20005cc0

0800c364 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b086      	sub	sp, #24
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d10b      	bne.n	800c392 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	60fb      	str	r3, [r7, #12]
}
 800c38c:	bf00      	nop
 800c38e:	bf00      	nop
 800c390:	e7fd      	b.n	800c38e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	3318      	adds	r3, #24
 800c396:	4618      	mov	r0, r3
 800c398:	f7fe fe56 	bl	800b048 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c39c:	4b1d      	ldr	r3, [pc, #116]	@ (800c414 <xTaskRemoveFromEventList+0xb0>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d11d      	bne.n	800c3e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7fe fe4d 	bl	800b048 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3b2:	4b19      	ldr	r3, [pc, #100]	@ (800c418 <xTaskRemoveFromEventList+0xb4>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d903      	bls.n	800c3c2 <xTaskRemoveFromEventList+0x5e>
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3be:	4a16      	ldr	r2, [pc, #88]	@ (800c418 <xTaskRemoveFromEventList+0xb4>)
 800c3c0:	6013      	str	r3, [r2, #0]
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	4413      	add	r3, r2
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	4a13      	ldr	r2, [pc, #76]	@ (800c41c <xTaskRemoveFromEventList+0xb8>)
 800c3d0:	441a      	add	r2, r3
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	3304      	adds	r3, #4
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	4610      	mov	r0, r2
 800c3da:	f7fe fdd8 	bl	800af8e <vListInsertEnd>
 800c3de:	e005      	b.n	800c3ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	3318      	adds	r3, #24
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	480e      	ldr	r0, [pc, #56]	@ (800c420 <xTaskRemoveFromEventList+0xbc>)
 800c3e8:	f7fe fdd1 	bl	800af8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3f0:	4b0c      	ldr	r3, [pc, #48]	@ (800c424 <xTaskRemoveFromEventList+0xc0>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d905      	bls.n	800c406 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c3fe:	4b0a      	ldr	r3, [pc, #40]	@ (800c428 <xTaskRemoveFromEventList+0xc4>)
 800c400:	2201      	movs	r2, #1
 800c402:	601a      	str	r2, [r3, #0]
 800c404:	e001      	b.n	800c40a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c406:	2300      	movs	r3, #0
 800c408:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c40a:	697b      	ldr	r3, [r7, #20]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3718      	adds	r7, #24
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	200061bc 	.word	0x200061bc
 800c418:	2000619c 	.word	0x2000619c
 800c41c:	20005cc4 	.word	0x20005cc4
 800c420:	20006154 	.word	0x20006154
 800c424:	20005cc0 	.word	0x20005cc0
 800c428:	200061a8 	.word	0x200061a8

0800c42c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d10b      	bne.n	800c452 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800c43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c43e:	f383 8811 	msr	BASEPRI, r3
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	f3bf 8f4f 	dsb	sy
 800c44a:	60fb      	str	r3, [r7, #12]
}
 800c44c:	bf00      	nop
 800c44e:	bf00      	nop
 800c450:	e7fd      	b.n	800c44e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800c452:	f000 fed9 	bl	800d208 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c456:	4b07      	ldr	r3, [pc, #28]	@ (800c474 <vTaskSetTimeOutState+0x48>)
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800c45e:	4b06      	ldr	r3, [pc, #24]	@ (800c478 <vTaskSetTimeOutState+0x4c>)
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800c466:	f000 ff01 	bl	800d26c <vPortExitCritical>
}
 800c46a:	bf00      	nop
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	200061ac 	.word	0x200061ac
 800c478:	20006198 	.word	0x20006198

0800c47c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c484:	4b06      	ldr	r3, [pc, #24]	@ (800c4a0 <vTaskInternalSetTimeOutState+0x24>)
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c48c:	4b05      	ldr	r3, [pc, #20]	@ (800c4a4 <vTaskInternalSetTimeOutState+0x28>)
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	605a      	str	r2, [r3, #4]
}
 800c494:	bf00      	nop
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr
 800c4a0:	200061ac 	.word	0x200061ac
 800c4a4:	20006198 	.word	0x20006198

0800c4a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b088      	sub	sp, #32
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d10b      	bne.n	800c4d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4bc:	f383 8811 	msr	BASEPRI, r3
 800c4c0:	f3bf 8f6f 	isb	sy
 800c4c4:	f3bf 8f4f 	dsb	sy
 800c4c8:	613b      	str	r3, [r7, #16]
}
 800c4ca:	bf00      	nop
 800c4cc:	bf00      	nop
 800c4ce:	e7fd      	b.n	800c4cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d10b      	bne.n	800c4ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4da:	f383 8811 	msr	BASEPRI, r3
 800c4de:	f3bf 8f6f 	isb	sy
 800c4e2:	f3bf 8f4f 	dsb	sy
 800c4e6:	60fb      	str	r3, [r7, #12]
}
 800c4e8:	bf00      	nop
 800c4ea:	bf00      	nop
 800c4ec:	e7fd      	b.n	800c4ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c4ee:	f000 fe8b 	bl	800d208 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c4f2:	4b1d      	ldr	r3, [pc, #116]	@ (800c568 <xTaskCheckForTimeOut+0xc0>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	69ba      	ldr	r2, [r7, #24]
 800c4fe:	1ad3      	subs	r3, r2, r3
 800c500:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c50a:	d102      	bne.n	800c512 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c50c:	2300      	movs	r3, #0
 800c50e:	61fb      	str	r3, [r7, #28]
 800c510:	e023      	b.n	800c55a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	4b15      	ldr	r3, [pc, #84]	@ (800c56c <xTaskCheckForTimeOut+0xc4>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d007      	beq.n	800c52e <xTaskCheckForTimeOut+0x86>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	69ba      	ldr	r2, [r7, #24]
 800c524:	429a      	cmp	r2, r3
 800c526:	d302      	bcc.n	800c52e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c528:	2301      	movs	r3, #1
 800c52a:	61fb      	str	r3, [r7, #28]
 800c52c:	e015      	b.n	800c55a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	697a      	ldr	r2, [r7, #20]
 800c534:	429a      	cmp	r2, r3
 800c536:	d20b      	bcs.n	800c550 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	1ad2      	subs	r2, r2, r3
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f7ff ff99 	bl	800c47c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c54a:	2300      	movs	r3, #0
 800c54c:	61fb      	str	r3, [r7, #28]
 800c54e:	e004      	b.n	800c55a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	2200      	movs	r2, #0
 800c554:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c556:	2301      	movs	r3, #1
 800c558:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c55a:	f000 fe87 	bl	800d26c <vPortExitCritical>

	return xReturn;
 800c55e:	69fb      	ldr	r3, [r7, #28]
}
 800c560:	4618      	mov	r0, r3
 800c562:	3720      	adds	r7, #32
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	20006198 	.word	0x20006198
 800c56c:	200061ac 	.word	0x200061ac

0800c570 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c570:	b480      	push	{r7}
 800c572:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c574:	4b03      	ldr	r3, [pc, #12]	@ (800c584 <vTaskMissedYield+0x14>)
 800c576:	2201      	movs	r2, #1
 800c578:	601a      	str	r2, [r3, #0]
}
 800c57a:	bf00      	nop
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr
 800c584:	200061a8 	.word	0x200061a8

0800c588 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c590:	f000 f852 	bl	800c638 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c594:	4b06      	ldr	r3, [pc, #24]	@ (800c5b0 <prvIdleTask+0x28>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d9f9      	bls.n	800c590 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c59c:	4b05      	ldr	r3, [pc, #20]	@ (800c5b4 <prvIdleTask+0x2c>)
 800c59e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5a2:	601a      	str	r2, [r3, #0]
 800c5a4:	f3bf 8f4f 	dsb	sy
 800c5a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c5ac:	e7f0      	b.n	800c590 <prvIdleTask+0x8>
 800c5ae:	bf00      	nop
 800c5b0:	20005cc4 	.word	0x20005cc4
 800c5b4:	e000ed04 	.word	0xe000ed04

0800c5b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5be:	2300      	movs	r3, #0
 800c5c0:	607b      	str	r3, [r7, #4]
 800c5c2:	e00c      	b.n	800c5de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	4413      	add	r3, r2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	4a12      	ldr	r2, [pc, #72]	@ (800c618 <prvInitialiseTaskLists+0x60>)
 800c5d0:	4413      	add	r3, r2
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fe fcae 	bl	800af34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	3301      	adds	r3, #1
 800c5dc:	607b      	str	r3, [r7, #4]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2b37      	cmp	r3, #55	@ 0x37
 800c5e2:	d9ef      	bls.n	800c5c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c5e4:	480d      	ldr	r0, [pc, #52]	@ (800c61c <prvInitialiseTaskLists+0x64>)
 800c5e6:	f7fe fca5 	bl	800af34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c5ea:	480d      	ldr	r0, [pc, #52]	@ (800c620 <prvInitialiseTaskLists+0x68>)
 800c5ec:	f7fe fca2 	bl	800af34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c5f0:	480c      	ldr	r0, [pc, #48]	@ (800c624 <prvInitialiseTaskLists+0x6c>)
 800c5f2:	f7fe fc9f 	bl	800af34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c5f6:	480c      	ldr	r0, [pc, #48]	@ (800c628 <prvInitialiseTaskLists+0x70>)
 800c5f8:	f7fe fc9c 	bl	800af34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c5fc:	480b      	ldr	r0, [pc, #44]	@ (800c62c <prvInitialiseTaskLists+0x74>)
 800c5fe:	f7fe fc99 	bl	800af34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c602:	4b0b      	ldr	r3, [pc, #44]	@ (800c630 <prvInitialiseTaskLists+0x78>)
 800c604:	4a05      	ldr	r2, [pc, #20]	@ (800c61c <prvInitialiseTaskLists+0x64>)
 800c606:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c608:	4b0a      	ldr	r3, [pc, #40]	@ (800c634 <prvInitialiseTaskLists+0x7c>)
 800c60a:	4a05      	ldr	r2, [pc, #20]	@ (800c620 <prvInitialiseTaskLists+0x68>)
 800c60c:	601a      	str	r2, [r3, #0]
}
 800c60e:	bf00      	nop
 800c610:	3708      	adds	r7, #8
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	20005cc4 	.word	0x20005cc4
 800c61c:	20006124 	.word	0x20006124
 800c620:	20006138 	.word	0x20006138
 800c624:	20006154 	.word	0x20006154
 800c628:	20006168 	.word	0x20006168
 800c62c:	20006180 	.word	0x20006180
 800c630:	2000614c 	.word	0x2000614c
 800c634:	20006150 	.word	0x20006150

0800c638 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c63e:	e019      	b.n	800c674 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c640:	f000 fde2 	bl	800d208 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c644:	4b10      	ldr	r3, [pc, #64]	@ (800c688 <prvCheckTasksWaitingTermination+0x50>)
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	68db      	ldr	r3, [r3, #12]
 800c64a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	3304      	adds	r3, #4
 800c650:	4618      	mov	r0, r3
 800c652:	f7fe fcf9 	bl	800b048 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c656:	4b0d      	ldr	r3, [pc, #52]	@ (800c68c <prvCheckTasksWaitingTermination+0x54>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	3b01      	subs	r3, #1
 800c65c:	4a0b      	ldr	r2, [pc, #44]	@ (800c68c <prvCheckTasksWaitingTermination+0x54>)
 800c65e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c660:	4b0b      	ldr	r3, [pc, #44]	@ (800c690 <prvCheckTasksWaitingTermination+0x58>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	3b01      	subs	r3, #1
 800c666:	4a0a      	ldr	r2, [pc, #40]	@ (800c690 <prvCheckTasksWaitingTermination+0x58>)
 800c668:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c66a:	f000 fdff 	bl	800d26c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 f810 	bl	800c694 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c674:	4b06      	ldr	r3, [pc, #24]	@ (800c690 <prvCheckTasksWaitingTermination+0x58>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1e1      	bne.n	800c640 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c67c:	bf00      	nop
 800c67e:	bf00      	nop
 800c680:	3708      	adds	r7, #8
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	20006168 	.word	0x20006168
 800c68c:	20006194 	.word	0x20006194
 800c690:	2000617c 	.word	0x2000617c

0800c694 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d108      	bne.n	800c6b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f000 ff9c 	bl	800d5e8 <vPortFree>
				vPortFree( pxTCB );
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 ff99 	bl	800d5e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c6b6:	e019      	b.n	800c6ec <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d103      	bne.n	800c6ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 ff90 	bl	800d5e8 <vPortFree>
	}
 800c6c8:	e010      	b.n	800c6ec <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	d00b      	beq.n	800c6ec <prvDeleteTCB+0x58>
	__asm volatile
 800c6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d8:	f383 8811 	msr	BASEPRI, r3
 800c6dc:	f3bf 8f6f 	isb	sy
 800c6e0:	f3bf 8f4f 	dsb	sy
 800c6e4:	60fb      	str	r3, [r7, #12]
}
 800c6e6:	bf00      	nop
 800c6e8:	bf00      	nop
 800c6ea:	e7fd      	b.n	800c6e8 <prvDeleteTCB+0x54>
	}
 800c6ec:	bf00      	nop
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6fa:	4b0c      	ldr	r3, [pc, #48]	@ (800c72c <prvResetNextTaskUnblockTime+0x38>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d104      	bne.n	800c70e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c704:	4b0a      	ldr	r3, [pc, #40]	@ (800c730 <prvResetNextTaskUnblockTime+0x3c>)
 800c706:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c70a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c70c:	e008      	b.n	800c720 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c70e:	4b07      	ldr	r3, [pc, #28]	@ (800c72c <prvResetNextTaskUnblockTime+0x38>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	4a04      	ldr	r2, [pc, #16]	@ (800c730 <prvResetNextTaskUnblockTime+0x3c>)
 800c71e:	6013      	str	r3, [r2, #0]
}
 800c720:	bf00      	nop
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	2000614c 	.word	0x2000614c
 800c730:	200061b4 	.word	0x200061b4

0800c734 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c73a:	4b0b      	ldr	r3, [pc, #44]	@ (800c768 <xTaskGetSchedulerState+0x34>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d102      	bne.n	800c748 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c742:	2301      	movs	r3, #1
 800c744:	607b      	str	r3, [r7, #4]
 800c746:	e008      	b.n	800c75a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c748:	4b08      	ldr	r3, [pc, #32]	@ (800c76c <xTaskGetSchedulerState+0x38>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d102      	bne.n	800c756 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c750:	2302      	movs	r3, #2
 800c752:	607b      	str	r3, [r7, #4]
 800c754:	e001      	b.n	800c75a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c756:	2300      	movs	r3, #0
 800c758:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c75a:	687b      	ldr	r3, [r7, #4]
	}
 800c75c:	4618      	mov	r0, r3
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr
 800c768:	200061a0 	.word	0x200061a0
 800c76c:	200061bc 	.word	0x200061bc

0800c770 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c770:	b580      	push	{r7, lr}
 800c772:	b086      	sub	sp, #24
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c77c:	2300      	movs	r3, #0
 800c77e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d058      	beq.n	800c838 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c786:	4b2f      	ldr	r3, [pc, #188]	@ (800c844 <xTaskPriorityDisinherit+0xd4>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	693a      	ldr	r2, [r7, #16]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d00b      	beq.n	800c7a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	60fb      	str	r3, [r7, #12]
}
 800c7a2:	bf00      	nop
 800c7a4:	bf00      	nop
 800c7a6:	e7fd      	b.n	800c7a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d10b      	bne.n	800c7c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b4:	f383 8811 	msr	BASEPRI, r3
 800c7b8:	f3bf 8f6f 	isb	sy
 800c7bc:	f3bf 8f4f 	dsb	sy
 800c7c0:	60bb      	str	r3, [r7, #8]
}
 800c7c2:	bf00      	nop
 800c7c4:	bf00      	nop
 800c7c6:	e7fd      	b.n	800c7c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7cc:	1e5a      	subs	r2, r3, #1
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d02c      	beq.n	800c838 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d128      	bne.n	800c838 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7fe fc2c 	bl	800b048 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c808:	4b0f      	ldr	r3, [pc, #60]	@ (800c848 <xTaskPriorityDisinherit+0xd8>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d903      	bls.n	800c818 <xTaskPriorityDisinherit+0xa8>
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c814:	4a0c      	ldr	r2, [pc, #48]	@ (800c848 <xTaskPriorityDisinherit+0xd8>)
 800c816:	6013      	str	r3, [r2, #0]
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c81c:	4613      	mov	r3, r2
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	4413      	add	r3, r2
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	4a09      	ldr	r2, [pc, #36]	@ (800c84c <xTaskPriorityDisinherit+0xdc>)
 800c826:	441a      	add	r2, r3
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	3304      	adds	r3, #4
 800c82c:	4619      	mov	r1, r3
 800c82e:	4610      	mov	r0, r2
 800c830:	f7fe fbad 	bl	800af8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c834:	2301      	movs	r3, #1
 800c836:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c838:	697b      	ldr	r3, [r7, #20]
	}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3718      	adds	r7, #24
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	20005cc0 	.word	0x20005cc0
 800c848:	2000619c 	.word	0x2000619c
 800c84c:	20005cc4 	.word	0x20005cc4

0800c850 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c85a:	4b21      	ldr	r3, [pc, #132]	@ (800c8e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c860:	4b20      	ldr	r3, [pc, #128]	@ (800c8e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	3304      	adds	r3, #4
 800c866:	4618      	mov	r0, r3
 800c868:	f7fe fbee 	bl	800b048 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c872:	d10a      	bne.n	800c88a <prvAddCurrentTaskToDelayedList+0x3a>
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d007      	beq.n	800c88a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c87a:	4b1a      	ldr	r3, [pc, #104]	@ (800c8e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	3304      	adds	r3, #4
 800c880:	4619      	mov	r1, r3
 800c882:	4819      	ldr	r0, [pc, #100]	@ (800c8e8 <prvAddCurrentTaskToDelayedList+0x98>)
 800c884:	f7fe fb83 	bl	800af8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c888:	e026      	b.n	800c8d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c88a:	68fa      	ldr	r2, [r7, #12]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	4413      	add	r3, r2
 800c890:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c892:	4b14      	ldr	r3, [pc, #80]	@ (800c8e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c89a:	68ba      	ldr	r2, [r7, #8]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d209      	bcs.n	800c8b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c8a2:	4b12      	ldr	r3, [pc, #72]	@ (800c8ec <prvAddCurrentTaskToDelayedList+0x9c>)
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	4b0f      	ldr	r3, [pc, #60]	@ (800c8e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	3304      	adds	r3, #4
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	f7fe fb91 	bl	800afd6 <vListInsert>
}
 800c8b4:	e010      	b.n	800c8d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c8b6:	4b0e      	ldr	r3, [pc, #56]	@ (800c8f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	4b0a      	ldr	r3, [pc, #40]	@ (800c8e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	3304      	adds	r3, #4
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	4610      	mov	r0, r2
 800c8c4:	f7fe fb87 	bl	800afd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c8c8:	4b0a      	ldr	r3, [pc, #40]	@ (800c8f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	68ba      	ldr	r2, [r7, #8]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d202      	bcs.n	800c8d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c8d2:	4a08      	ldr	r2, [pc, #32]	@ (800c8f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	6013      	str	r3, [r2, #0]
}
 800c8d8:	bf00      	nop
 800c8da:	3710      	adds	r7, #16
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	20006198 	.word	0x20006198
 800c8e4:	20005cc0 	.word	0x20005cc0
 800c8e8:	20006180 	.word	0x20006180
 800c8ec:	20006150 	.word	0x20006150
 800c8f0:	2000614c 	.word	0x2000614c
 800c8f4:	200061b4 	.word	0x200061b4

0800c8f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b08a      	sub	sp, #40	@ 0x28
 800c8fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c8fe:	2300      	movs	r3, #0
 800c900:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c902:	f000 fb13 	bl	800cf2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c906:	4b1d      	ldr	r3, [pc, #116]	@ (800c97c <xTimerCreateTimerTask+0x84>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d021      	beq.n	800c952 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c90e:	2300      	movs	r3, #0
 800c910:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c912:	2300      	movs	r3, #0
 800c914:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c916:	1d3a      	adds	r2, r7, #4
 800c918:	f107 0108 	add.w	r1, r7, #8
 800c91c:	f107 030c 	add.w	r3, r7, #12
 800c920:	4618      	mov	r0, r3
 800c922:	f7fe faed 	bl	800af00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c926:	6879      	ldr	r1, [r7, #4]
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	9202      	str	r2, [sp, #8]
 800c92e:	9301      	str	r3, [sp, #4]
 800c930:	2302      	movs	r3, #2
 800c932:	9300      	str	r3, [sp, #0]
 800c934:	2300      	movs	r3, #0
 800c936:	460a      	mov	r2, r1
 800c938:	4911      	ldr	r1, [pc, #68]	@ (800c980 <xTimerCreateTimerTask+0x88>)
 800c93a:	4812      	ldr	r0, [pc, #72]	@ (800c984 <xTimerCreateTimerTask+0x8c>)
 800c93c:	f7ff f8a8 	bl	800ba90 <xTaskCreateStatic>
 800c940:	4603      	mov	r3, r0
 800c942:	4a11      	ldr	r2, [pc, #68]	@ (800c988 <xTimerCreateTimerTask+0x90>)
 800c944:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c946:	4b10      	ldr	r3, [pc, #64]	@ (800c988 <xTimerCreateTimerTask+0x90>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d001      	beq.n	800c952 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c94e:	2301      	movs	r3, #1
 800c950:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d10b      	bne.n	800c970 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c95c:	f383 8811 	msr	BASEPRI, r3
 800c960:	f3bf 8f6f 	isb	sy
 800c964:	f3bf 8f4f 	dsb	sy
 800c968:	613b      	str	r3, [r7, #16]
}
 800c96a:	bf00      	nop
 800c96c:	bf00      	nop
 800c96e:	e7fd      	b.n	800c96c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c970:	697b      	ldr	r3, [r7, #20]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3718      	adds	r7, #24
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	200061f0 	.word	0x200061f0
 800c980:	0801dcb8 	.word	0x0801dcb8
 800c984:	0800cac5 	.word	0x0800cac5
 800c988:	200061f4 	.word	0x200061f4

0800c98c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b08a      	sub	sp, #40	@ 0x28
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
 800c998:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c99a:	2300      	movs	r3, #0
 800c99c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d10b      	bne.n	800c9bc <xTimerGenericCommand+0x30>
	__asm volatile
 800c9a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a8:	f383 8811 	msr	BASEPRI, r3
 800c9ac:	f3bf 8f6f 	isb	sy
 800c9b0:	f3bf 8f4f 	dsb	sy
 800c9b4:	623b      	str	r3, [r7, #32]
}
 800c9b6:	bf00      	nop
 800c9b8:	bf00      	nop
 800c9ba:	e7fd      	b.n	800c9b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c9bc:	4b19      	ldr	r3, [pc, #100]	@ (800ca24 <xTimerGenericCommand+0x98>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d02a      	beq.n	800ca1a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	2b05      	cmp	r3, #5
 800c9d4:	dc18      	bgt.n	800ca08 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c9d6:	f7ff fead 	bl	800c734 <xTaskGetSchedulerState>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d109      	bne.n	800c9f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c9e0:	4b10      	ldr	r3, [pc, #64]	@ (800ca24 <xTimerGenericCommand+0x98>)
 800c9e2:	6818      	ldr	r0, [r3, #0]
 800c9e4:	f107 0110 	add.w	r1, r7, #16
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9ec:	f7fe fc60 	bl	800b2b0 <xQueueGenericSend>
 800c9f0:	6278      	str	r0, [r7, #36]	@ 0x24
 800c9f2:	e012      	b.n	800ca1a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c9f4:	4b0b      	ldr	r3, [pc, #44]	@ (800ca24 <xTimerGenericCommand+0x98>)
 800c9f6:	6818      	ldr	r0, [r3, #0]
 800c9f8:	f107 0110 	add.w	r1, r7, #16
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f7fe fc56 	bl	800b2b0 <xQueueGenericSend>
 800ca04:	6278      	str	r0, [r7, #36]	@ 0x24
 800ca06:	e008      	b.n	800ca1a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ca08:	4b06      	ldr	r3, [pc, #24]	@ (800ca24 <xTimerGenericCommand+0x98>)
 800ca0a:	6818      	ldr	r0, [r3, #0]
 800ca0c:	f107 0110 	add.w	r1, r7, #16
 800ca10:	2300      	movs	r3, #0
 800ca12:	683a      	ldr	r2, [r7, #0]
 800ca14:	f7fe fd4e 	bl	800b4b4 <xQueueGenericSendFromISR>
 800ca18:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3728      	adds	r7, #40	@ 0x28
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	200061f0 	.word	0x200061f0

0800ca28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b088      	sub	sp, #32
 800ca2c:	af02      	add	r7, sp, #8
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca32:	4b23      	ldr	r3, [pc, #140]	@ (800cac0 <prvProcessExpiredTimer+0x98>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	3304      	adds	r3, #4
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7fe fb01 	bl	800b048 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca4c:	f003 0304 	and.w	r3, r3, #4
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d023      	beq.n	800ca9c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	699a      	ldr	r2, [r3, #24]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	18d1      	adds	r1, r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	683a      	ldr	r2, [r7, #0]
 800ca60:	6978      	ldr	r0, [r7, #20]
 800ca62:	f000 f8d5 	bl	800cc10 <prvInsertTimerInActiveList>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d020      	beq.n	800caae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	9300      	str	r3, [sp, #0]
 800ca70:	2300      	movs	r3, #0
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	2100      	movs	r1, #0
 800ca76:	6978      	ldr	r0, [r7, #20]
 800ca78:	f7ff ff88 	bl	800c98c <xTimerGenericCommand>
 800ca7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d114      	bne.n	800caae <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ca84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca88:	f383 8811 	msr	BASEPRI, r3
 800ca8c:	f3bf 8f6f 	isb	sy
 800ca90:	f3bf 8f4f 	dsb	sy
 800ca94:	60fb      	str	r3, [r7, #12]
}
 800ca96:	bf00      	nop
 800ca98:	bf00      	nop
 800ca9a:	e7fd      	b.n	800ca98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800caa2:	f023 0301 	bic.w	r3, r3, #1
 800caa6:	b2da      	uxtb	r2, r3
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	6a1b      	ldr	r3, [r3, #32]
 800cab2:	6978      	ldr	r0, [r7, #20]
 800cab4:	4798      	blx	r3
}
 800cab6:	bf00      	nop
 800cab8:	3718      	adds	r7, #24
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	200061e8 	.word	0x200061e8

0800cac4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cacc:	f107 0308 	add.w	r3, r7, #8
 800cad0:	4618      	mov	r0, r3
 800cad2:	f000 f859 	bl	800cb88 <prvGetNextExpireTime>
 800cad6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	4619      	mov	r1, r3
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	f000 f805 	bl	800caec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cae2:	f000 f8d7 	bl	800cc94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cae6:	bf00      	nop
 800cae8:	e7f0      	b.n	800cacc <prvTimerTask+0x8>
	...

0800caec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800caf6:	f7ff fa0f 	bl	800bf18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cafa:	f107 0308 	add.w	r3, r7, #8
 800cafe:	4618      	mov	r0, r3
 800cb00:	f000 f866 	bl	800cbd0 <prvSampleTimeNow>
 800cb04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d130      	bne.n	800cb6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d10a      	bne.n	800cb28 <prvProcessTimerOrBlockTask+0x3c>
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d806      	bhi.n	800cb28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cb1a:	f7ff fa0b 	bl	800bf34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cb1e:	68f9      	ldr	r1, [r7, #12]
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f7ff ff81 	bl	800ca28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cb26:	e024      	b.n	800cb72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d008      	beq.n	800cb40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cb2e:	4b13      	ldr	r3, [pc, #76]	@ (800cb7c <prvProcessTimerOrBlockTask+0x90>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d101      	bne.n	800cb3c <prvProcessTimerOrBlockTask+0x50>
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e000      	b.n	800cb3e <prvProcessTimerOrBlockTask+0x52>
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cb40:	4b0f      	ldr	r3, [pc, #60]	@ (800cb80 <prvProcessTimerOrBlockTask+0x94>)
 800cb42:	6818      	ldr	r0, [r3, #0]
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	1ad3      	subs	r3, r2, r3
 800cb4a:	683a      	ldr	r2, [r7, #0]
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	f7fe ff6b 	bl	800ba28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cb52:	f7ff f9ef 	bl	800bf34 <xTaskResumeAll>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d10a      	bne.n	800cb72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cb5c:	4b09      	ldr	r3, [pc, #36]	@ (800cb84 <prvProcessTimerOrBlockTask+0x98>)
 800cb5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb62:	601a      	str	r2, [r3, #0]
 800cb64:	f3bf 8f4f 	dsb	sy
 800cb68:	f3bf 8f6f 	isb	sy
}
 800cb6c:	e001      	b.n	800cb72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cb6e:	f7ff f9e1 	bl	800bf34 <xTaskResumeAll>
}
 800cb72:	bf00      	nop
 800cb74:	3710      	adds	r7, #16
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	200061ec 	.word	0x200061ec
 800cb80:	200061f0 	.word	0x200061f0
 800cb84:	e000ed04 	.word	0xe000ed04

0800cb88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cb90:	4b0e      	ldr	r3, [pc, #56]	@ (800cbcc <prvGetNextExpireTime+0x44>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d101      	bne.n	800cb9e <prvGetNextExpireTime+0x16>
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	e000      	b.n	800cba0 <prvGetNextExpireTime+0x18>
 800cb9e:	2200      	movs	r2, #0
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d105      	bne.n	800cbb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cbac:	4b07      	ldr	r3, [pc, #28]	@ (800cbcc <prvGetNextExpireTime+0x44>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	60fb      	str	r3, [r7, #12]
 800cbb6:	e001      	b.n	800cbbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3714      	adds	r7, #20
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
 800cbca:	bf00      	nop
 800cbcc:	200061e8 	.word	0x200061e8

0800cbd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cbd8:	f7ff fa4a 	bl	800c070 <xTaskGetTickCount>
 800cbdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cbde:	4b0b      	ldr	r3, [pc, #44]	@ (800cc0c <prvSampleTimeNow+0x3c>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d205      	bcs.n	800cbf4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cbe8:	f000 f93a 	bl	800ce60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	601a      	str	r2, [r3, #0]
 800cbf2:	e002      	b.n	800cbfa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cbfa:	4a04      	ldr	r2, [pc, #16]	@ (800cc0c <prvSampleTimeNow+0x3c>)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cc00:	68fb      	ldr	r3, [r7, #12]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	200061f8 	.word	0x200061f8

0800cc10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	607a      	str	r2, [r7, #4]
 800cc1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	68ba      	ldr	r2, [r7, #8]
 800cc26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cc2e:	68ba      	ldr	r2, [r7, #8]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d812      	bhi.n	800cc5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	1ad2      	subs	r2, r2, r3
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	699b      	ldr	r3, [r3, #24]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d302      	bcc.n	800cc4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cc44:	2301      	movs	r3, #1
 800cc46:	617b      	str	r3, [r7, #20]
 800cc48:	e01b      	b.n	800cc82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cc4a:	4b10      	ldr	r3, [pc, #64]	@ (800cc8c <prvInsertTimerInActiveList+0x7c>)
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	3304      	adds	r3, #4
 800cc52:	4619      	mov	r1, r3
 800cc54:	4610      	mov	r0, r2
 800cc56:	f7fe f9be 	bl	800afd6 <vListInsert>
 800cc5a:	e012      	b.n	800cc82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d206      	bcs.n	800cc72 <prvInsertTimerInActiveList+0x62>
 800cc64:	68ba      	ldr	r2, [r7, #8]
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d302      	bcc.n	800cc72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	617b      	str	r3, [r7, #20]
 800cc70:	e007      	b.n	800cc82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc72:	4b07      	ldr	r3, [pc, #28]	@ (800cc90 <prvInsertTimerInActiveList+0x80>)
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	3304      	adds	r3, #4
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	4610      	mov	r0, r2
 800cc7e:	f7fe f9aa 	bl	800afd6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cc82:	697b      	ldr	r3, [r7, #20]
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3718      	adds	r7, #24
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	200061ec 	.word	0x200061ec
 800cc90:	200061e8 	.word	0x200061e8

0800cc94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b08e      	sub	sp, #56	@ 0x38
 800cc98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cc9a:	e0ce      	b.n	800ce3a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	da19      	bge.n	800ccd6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cca2:	1d3b      	adds	r3, r7, #4
 800cca4:	3304      	adds	r3, #4
 800cca6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d10b      	bne.n	800ccc6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ccae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	61fb      	str	r3, [r7, #28]
}
 800ccc0:	bf00      	nop
 800ccc2:	bf00      	nop
 800ccc4:	e7fd      	b.n	800ccc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ccc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cccc:	6850      	ldr	r0, [r2, #4]
 800ccce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccd0:	6892      	ldr	r2, [r2, #8]
 800ccd2:	4611      	mov	r1, r2
 800ccd4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f2c0 80ae 	blt.w	800ce3a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cce4:	695b      	ldr	r3, [r3, #20]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d004      	beq.n	800ccf4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ccea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccec:	3304      	adds	r3, #4
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7fe f9aa 	bl	800b048 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ccf4:	463b      	mov	r3, r7
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7ff ff6a 	bl	800cbd0 <prvSampleTimeNow>
 800ccfc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2b09      	cmp	r3, #9
 800cd02:	f200 8097 	bhi.w	800ce34 <prvProcessReceivedCommands+0x1a0>
 800cd06:	a201      	add	r2, pc, #4	@ (adr r2, 800cd0c <prvProcessReceivedCommands+0x78>)
 800cd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd0c:	0800cd35 	.word	0x0800cd35
 800cd10:	0800cd35 	.word	0x0800cd35
 800cd14:	0800cd35 	.word	0x0800cd35
 800cd18:	0800cdab 	.word	0x0800cdab
 800cd1c:	0800cdbf 	.word	0x0800cdbf
 800cd20:	0800ce0b 	.word	0x0800ce0b
 800cd24:	0800cd35 	.word	0x0800cd35
 800cd28:	0800cd35 	.word	0x0800cd35
 800cd2c:	0800cdab 	.word	0x0800cdab
 800cd30:	0800cdbf 	.word	0x0800cdbf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd3a:	f043 0301 	orr.w	r3, r3, #1
 800cd3e:	b2da      	uxtb	r2, r3
 800cd40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cd46:	68ba      	ldr	r2, [r7, #8]
 800cd48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd4a:	699b      	ldr	r3, [r3, #24]
 800cd4c:	18d1      	adds	r1, r2, r3
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd54:	f7ff ff5c 	bl	800cc10 <prvInsertTimerInActiveList>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d06c      	beq.n	800ce38 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd60:	6a1b      	ldr	r3, [r3, #32]
 800cd62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd6c:	f003 0304 	and.w	r3, r3, #4
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d061      	beq.n	800ce38 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cd74:	68ba      	ldr	r2, [r7, #8]
 800cd76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd78:	699b      	ldr	r3, [r3, #24]
 800cd7a:	441a      	add	r2, r3
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	2300      	movs	r3, #0
 800cd82:	2100      	movs	r1, #0
 800cd84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd86:	f7ff fe01 	bl	800c98c <xTimerGenericCommand>
 800cd8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cd8c:	6a3b      	ldr	r3, [r7, #32]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d152      	bne.n	800ce38 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cd92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd96:	f383 8811 	msr	BASEPRI, r3
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	61bb      	str	r3, [r7, #24]
}
 800cda4:	bf00      	nop
 800cda6:	bf00      	nop
 800cda8:	e7fd      	b.n	800cda6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cdaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cdb0:	f023 0301 	bic.w	r3, r3, #1
 800cdb4:	b2da      	uxtb	r2, r3
 800cdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cdbc:	e03d      	b.n	800ce3a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cdbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cdc4:	f043 0301 	orr.w	r3, r3, #1
 800cdc8:	b2da      	uxtb	r2, r3
 800cdca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cdd0:	68ba      	ldr	r2, [r7, #8]
 800cdd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdd4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cdd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdd8:	699b      	ldr	r3, [r3, #24]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d10b      	bne.n	800cdf6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cdde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde2:	f383 8811 	msr	BASEPRI, r3
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	617b      	str	r3, [r7, #20]
}
 800cdf0:	bf00      	nop
 800cdf2:	bf00      	nop
 800cdf4:	e7fd      	b.n	800cdf2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cdf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf8:	699a      	ldr	r2, [r3, #24]
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdfc:	18d1      	adds	r1, r2, r3
 800cdfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce04:	f7ff ff04 	bl	800cc10 <prvInsertTimerInActiveList>
					break;
 800ce08:	e017      	b.n	800ce3a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ce0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce10:	f003 0302 	and.w	r3, r3, #2
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d103      	bne.n	800ce20 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ce18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce1a:	f000 fbe5 	bl	800d5e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ce1e:	e00c      	b.n	800ce3a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce26:	f023 0301 	bic.w	r3, r3, #1
 800ce2a:	b2da      	uxtb	r2, r3
 800ce2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ce32:	e002      	b.n	800ce3a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ce34:	bf00      	nop
 800ce36:	e000      	b.n	800ce3a <prvProcessReceivedCommands+0x1a6>
					break;
 800ce38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce3a:	4b08      	ldr	r3, [pc, #32]	@ (800ce5c <prvProcessReceivedCommands+0x1c8>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	1d39      	adds	r1, r7, #4
 800ce40:	2200      	movs	r2, #0
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fe fbd4 	bl	800b5f0 <xQueueReceive>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	f47f af26 	bne.w	800cc9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ce50:	bf00      	nop
 800ce52:	bf00      	nop
 800ce54:	3730      	adds	r7, #48	@ 0x30
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	200061f0 	.word	0x200061f0

0800ce60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b088      	sub	sp, #32
 800ce64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce66:	e049      	b.n	800cefc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce68:	4b2e      	ldr	r3, [pc, #184]	@ (800cf24 <prvSwitchTimerLists+0xc4>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce72:	4b2c      	ldr	r3, [pc, #176]	@ (800cf24 <prvSwitchTimerLists+0xc4>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	3304      	adds	r3, #4
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7fe f8e1 	bl	800b048 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	6a1b      	ldr	r3, [r3, #32]
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce94:	f003 0304 	and.w	r3, r3, #4
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d02f      	beq.n	800cefc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	699b      	ldr	r3, [r3, #24]
 800cea0:	693a      	ldr	r2, [r7, #16]
 800cea2:	4413      	add	r3, r2
 800cea4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cea6:	68ba      	ldr	r2, [r7, #8]
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d90e      	bls.n	800cecc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	68ba      	ldr	r2, [r7, #8]
 800ceb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	68fa      	ldr	r2, [r7, #12]
 800ceb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ceba:	4b1a      	ldr	r3, [pc, #104]	@ (800cf24 <prvSwitchTimerLists+0xc4>)
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	3304      	adds	r3, #4
 800cec2:	4619      	mov	r1, r3
 800cec4:	4610      	mov	r0, r2
 800cec6:	f7fe f886 	bl	800afd6 <vListInsert>
 800ceca:	e017      	b.n	800cefc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cecc:	2300      	movs	r3, #0
 800cece:	9300      	str	r3, [sp, #0]
 800ced0:	2300      	movs	r3, #0
 800ced2:	693a      	ldr	r2, [r7, #16]
 800ced4:	2100      	movs	r1, #0
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f7ff fd58 	bl	800c98c <xTimerGenericCommand>
 800cedc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d10b      	bne.n	800cefc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cee8:	f383 8811 	msr	BASEPRI, r3
 800ceec:	f3bf 8f6f 	isb	sy
 800cef0:	f3bf 8f4f 	dsb	sy
 800cef4:	603b      	str	r3, [r7, #0]
}
 800cef6:	bf00      	nop
 800cef8:	bf00      	nop
 800cefa:	e7fd      	b.n	800cef8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cefc:	4b09      	ldr	r3, [pc, #36]	@ (800cf24 <prvSwitchTimerLists+0xc4>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d1b0      	bne.n	800ce68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cf06:	4b07      	ldr	r3, [pc, #28]	@ (800cf24 <prvSwitchTimerLists+0xc4>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cf0c:	4b06      	ldr	r3, [pc, #24]	@ (800cf28 <prvSwitchTimerLists+0xc8>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a04      	ldr	r2, [pc, #16]	@ (800cf24 <prvSwitchTimerLists+0xc4>)
 800cf12:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cf14:	4a04      	ldr	r2, [pc, #16]	@ (800cf28 <prvSwitchTimerLists+0xc8>)
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	6013      	str	r3, [r2, #0]
}
 800cf1a:	bf00      	nop
 800cf1c:	3718      	adds	r7, #24
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	200061e8 	.word	0x200061e8
 800cf28:	200061ec 	.word	0x200061ec

0800cf2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cf32:	f000 f969 	bl	800d208 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cf36:	4b15      	ldr	r3, [pc, #84]	@ (800cf8c <prvCheckForValidListAndQueue+0x60>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d120      	bne.n	800cf80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cf3e:	4814      	ldr	r0, [pc, #80]	@ (800cf90 <prvCheckForValidListAndQueue+0x64>)
 800cf40:	f7fd fff8 	bl	800af34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cf44:	4813      	ldr	r0, [pc, #76]	@ (800cf94 <prvCheckForValidListAndQueue+0x68>)
 800cf46:	f7fd fff5 	bl	800af34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cf4a:	4b13      	ldr	r3, [pc, #76]	@ (800cf98 <prvCheckForValidListAndQueue+0x6c>)
 800cf4c:	4a10      	ldr	r2, [pc, #64]	@ (800cf90 <prvCheckForValidListAndQueue+0x64>)
 800cf4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cf50:	4b12      	ldr	r3, [pc, #72]	@ (800cf9c <prvCheckForValidListAndQueue+0x70>)
 800cf52:	4a10      	ldr	r2, [pc, #64]	@ (800cf94 <prvCheckForValidListAndQueue+0x68>)
 800cf54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cf56:	2300      	movs	r3, #0
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	4b11      	ldr	r3, [pc, #68]	@ (800cfa0 <prvCheckForValidListAndQueue+0x74>)
 800cf5c:	4a11      	ldr	r2, [pc, #68]	@ (800cfa4 <prvCheckForValidListAndQueue+0x78>)
 800cf5e:	2110      	movs	r1, #16
 800cf60:	200a      	movs	r0, #10
 800cf62:	f7fe f905 	bl	800b170 <xQueueGenericCreateStatic>
 800cf66:	4603      	mov	r3, r0
 800cf68:	4a08      	ldr	r2, [pc, #32]	@ (800cf8c <prvCheckForValidListAndQueue+0x60>)
 800cf6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cf6c:	4b07      	ldr	r3, [pc, #28]	@ (800cf8c <prvCheckForValidListAndQueue+0x60>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d005      	beq.n	800cf80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cf74:	4b05      	ldr	r3, [pc, #20]	@ (800cf8c <prvCheckForValidListAndQueue+0x60>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	490b      	ldr	r1, [pc, #44]	@ (800cfa8 <prvCheckForValidListAndQueue+0x7c>)
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7fe fd2a 	bl	800b9d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf80:	f000 f974 	bl	800d26c <vPortExitCritical>
}
 800cf84:	bf00      	nop
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	200061f0 	.word	0x200061f0
 800cf90:	200061c0 	.word	0x200061c0
 800cf94:	200061d4 	.word	0x200061d4
 800cf98:	200061e8 	.word	0x200061e8
 800cf9c:	200061ec 	.word	0x200061ec
 800cfa0:	2000629c 	.word	0x2000629c
 800cfa4:	200061fc 	.word	0x200061fc
 800cfa8:	0801dcc0 	.word	0x0801dcc0

0800cfac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cfac:	b480      	push	{r7}
 800cfae:	b085      	sub	sp, #20
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	3b04      	subs	r3, #4
 800cfbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cfc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	3b04      	subs	r3, #4
 800cfca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	f023 0201 	bic.w	r2, r3, #1
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	3b04      	subs	r3, #4
 800cfda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cfdc:	4a0c      	ldr	r2, [pc, #48]	@ (800d010 <pxPortInitialiseStack+0x64>)
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	3b14      	subs	r3, #20
 800cfe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	3b04      	subs	r3, #4
 800cff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f06f 0202 	mvn.w	r2, #2
 800cffa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	3b20      	subs	r3, #32
 800d000:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d002:	68fb      	ldr	r3, [r7, #12]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3714      	adds	r7, #20
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr
 800d010:	0800d015 	.word	0x0800d015

0800d014 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d014:	b480      	push	{r7}
 800d016:	b085      	sub	sp, #20
 800d018:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d01a:	2300      	movs	r3, #0
 800d01c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d01e:	4b13      	ldr	r3, [pc, #76]	@ (800d06c <prvTaskExitError+0x58>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d026:	d00b      	beq.n	800d040 <prvTaskExitError+0x2c>
	__asm volatile
 800d028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02c:	f383 8811 	msr	BASEPRI, r3
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	f3bf 8f4f 	dsb	sy
 800d038:	60fb      	str	r3, [r7, #12]
}
 800d03a:	bf00      	nop
 800d03c:	bf00      	nop
 800d03e:	e7fd      	b.n	800d03c <prvTaskExitError+0x28>
	__asm volatile
 800d040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d044:	f383 8811 	msr	BASEPRI, r3
 800d048:	f3bf 8f6f 	isb	sy
 800d04c:	f3bf 8f4f 	dsb	sy
 800d050:	60bb      	str	r3, [r7, #8]
}
 800d052:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d054:	bf00      	nop
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d0fc      	beq.n	800d056 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d05c:	bf00      	nop
 800d05e:	bf00      	nop
 800d060:	3714      	adds	r7, #20
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr
 800d06a:	bf00      	nop
 800d06c:	200000a0 	.word	0x200000a0

0800d070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d070:	4b07      	ldr	r3, [pc, #28]	@ (800d090 <pxCurrentTCBConst2>)
 800d072:	6819      	ldr	r1, [r3, #0]
 800d074:	6808      	ldr	r0, [r1, #0]
 800d076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07a:	f380 8809 	msr	PSP, r0
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	f04f 0000 	mov.w	r0, #0
 800d086:	f380 8811 	msr	BASEPRI, r0
 800d08a:	4770      	bx	lr
 800d08c:	f3af 8000 	nop.w

0800d090 <pxCurrentTCBConst2>:
 800d090:	20005cc0 	.word	0x20005cc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d094:	bf00      	nop
 800d096:	bf00      	nop

0800d098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d098:	4808      	ldr	r0, [pc, #32]	@ (800d0bc <prvPortStartFirstTask+0x24>)
 800d09a:	6800      	ldr	r0, [r0, #0]
 800d09c:	6800      	ldr	r0, [r0, #0]
 800d09e:	f380 8808 	msr	MSP, r0
 800d0a2:	f04f 0000 	mov.w	r0, #0
 800d0a6:	f380 8814 	msr	CONTROL, r0
 800d0aa:	b662      	cpsie	i
 800d0ac:	b661      	cpsie	f
 800d0ae:	f3bf 8f4f 	dsb	sy
 800d0b2:	f3bf 8f6f 	isb	sy
 800d0b6:	df00      	svc	0
 800d0b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d0ba:	bf00      	nop
 800d0bc:	e000ed08 	.word	0xe000ed08

0800d0c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b086      	sub	sp, #24
 800d0c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d0c6:	4b47      	ldr	r3, [pc, #284]	@ (800d1e4 <xPortStartScheduler+0x124>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4a47      	ldr	r2, [pc, #284]	@ (800d1e8 <xPortStartScheduler+0x128>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d10b      	bne.n	800d0e8 <xPortStartScheduler+0x28>
	__asm volatile
 800d0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d4:	f383 8811 	msr	BASEPRI, r3
 800d0d8:	f3bf 8f6f 	isb	sy
 800d0dc:	f3bf 8f4f 	dsb	sy
 800d0e0:	613b      	str	r3, [r7, #16]
}
 800d0e2:	bf00      	nop
 800d0e4:	bf00      	nop
 800d0e6:	e7fd      	b.n	800d0e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d0e8:	4b3e      	ldr	r3, [pc, #248]	@ (800d1e4 <xPortStartScheduler+0x124>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a3f      	ldr	r2, [pc, #252]	@ (800d1ec <xPortStartScheduler+0x12c>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d10b      	bne.n	800d10a <xPortStartScheduler+0x4a>
	__asm volatile
 800d0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f6:	f383 8811 	msr	BASEPRI, r3
 800d0fa:	f3bf 8f6f 	isb	sy
 800d0fe:	f3bf 8f4f 	dsb	sy
 800d102:	60fb      	str	r3, [r7, #12]
}
 800d104:	bf00      	nop
 800d106:	bf00      	nop
 800d108:	e7fd      	b.n	800d106 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d10a:	4b39      	ldr	r3, [pc, #228]	@ (800d1f0 <xPortStartScheduler+0x130>)
 800d10c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	b2db      	uxtb	r3, r3
 800d114:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	22ff      	movs	r2, #255	@ 0xff
 800d11a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	b2db      	uxtb	r3, r3
 800d122:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d124:	78fb      	ldrb	r3, [r7, #3]
 800d126:	b2db      	uxtb	r3, r3
 800d128:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d12c:	b2da      	uxtb	r2, r3
 800d12e:	4b31      	ldr	r3, [pc, #196]	@ (800d1f4 <xPortStartScheduler+0x134>)
 800d130:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d132:	4b31      	ldr	r3, [pc, #196]	@ (800d1f8 <xPortStartScheduler+0x138>)
 800d134:	2207      	movs	r2, #7
 800d136:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d138:	e009      	b.n	800d14e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d13a:	4b2f      	ldr	r3, [pc, #188]	@ (800d1f8 <xPortStartScheduler+0x138>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	3b01      	subs	r3, #1
 800d140:	4a2d      	ldr	r2, [pc, #180]	@ (800d1f8 <xPortStartScheduler+0x138>)
 800d142:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d144:	78fb      	ldrb	r3, [r7, #3]
 800d146:	b2db      	uxtb	r3, r3
 800d148:	005b      	lsls	r3, r3, #1
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d14e:	78fb      	ldrb	r3, [r7, #3]
 800d150:	b2db      	uxtb	r3, r3
 800d152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d156:	2b80      	cmp	r3, #128	@ 0x80
 800d158:	d0ef      	beq.n	800d13a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d15a:	4b27      	ldr	r3, [pc, #156]	@ (800d1f8 <xPortStartScheduler+0x138>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f1c3 0307 	rsb	r3, r3, #7
 800d162:	2b04      	cmp	r3, #4
 800d164:	d00b      	beq.n	800d17e <xPortStartScheduler+0xbe>
	__asm volatile
 800d166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d16a:	f383 8811 	msr	BASEPRI, r3
 800d16e:	f3bf 8f6f 	isb	sy
 800d172:	f3bf 8f4f 	dsb	sy
 800d176:	60bb      	str	r3, [r7, #8]
}
 800d178:	bf00      	nop
 800d17a:	bf00      	nop
 800d17c:	e7fd      	b.n	800d17a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d17e:	4b1e      	ldr	r3, [pc, #120]	@ (800d1f8 <xPortStartScheduler+0x138>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	021b      	lsls	r3, r3, #8
 800d184:	4a1c      	ldr	r2, [pc, #112]	@ (800d1f8 <xPortStartScheduler+0x138>)
 800d186:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d188:	4b1b      	ldr	r3, [pc, #108]	@ (800d1f8 <xPortStartScheduler+0x138>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d190:	4a19      	ldr	r2, [pc, #100]	@ (800d1f8 <xPortStartScheduler+0x138>)
 800d192:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	b2da      	uxtb	r2, r3
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d19c:	4b17      	ldr	r3, [pc, #92]	@ (800d1fc <xPortStartScheduler+0x13c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a16      	ldr	r2, [pc, #88]	@ (800d1fc <xPortStartScheduler+0x13c>)
 800d1a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d1a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d1a8:	4b14      	ldr	r3, [pc, #80]	@ (800d1fc <xPortStartScheduler+0x13c>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a13      	ldr	r2, [pc, #76]	@ (800d1fc <xPortStartScheduler+0x13c>)
 800d1ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d1b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d1b4:	f000 f8da 	bl	800d36c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d1b8:	4b11      	ldr	r3, [pc, #68]	@ (800d200 <xPortStartScheduler+0x140>)
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d1be:	f000 f8f9 	bl	800d3b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d1c2:	4b10      	ldr	r3, [pc, #64]	@ (800d204 <xPortStartScheduler+0x144>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a0f      	ldr	r2, [pc, #60]	@ (800d204 <xPortStartScheduler+0x144>)
 800d1c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d1cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d1ce:	f7ff ff63 	bl	800d098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d1d2:	f7ff f817 	bl	800c204 <vTaskSwitchContext>
	prvTaskExitError();
 800d1d6:	f7ff ff1d 	bl	800d014 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d1da:	2300      	movs	r3, #0
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3718      	adds	r7, #24
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	e000ed00 	.word	0xe000ed00
 800d1e8:	410fc271 	.word	0x410fc271
 800d1ec:	410fc270 	.word	0x410fc270
 800d1f0:	e000e400 	.word	0xe000e400
 800d1f4:	200062ec 	.word	0x200062ec
 800d1f8:	200062f0 	.word	0x200062f0
 800d1fc:	e000ed20 	.word	0xe000ed20
 800d200:	200000a0 	.word	0x200000a0
 800d204:	e000ef34 	.word	0xe000ef34

0800d208 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
	__asm volatile
 800d20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d212:	f383 8811 	msr	BASEPRI, r3
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	607b      	str	r3, [r7, #4]
}
 800d220:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d222:	4b10      	ldr	r3, [pc, #64]	@ (800d264 <vPortEnterCritical+0x5c>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	3301      	adds	r3, #1
 800d228:	4a0e      	ldr	r2, [pc, #56]	@ (800d264 <vPortEnterCritical+0x5c>)
 800d22a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d22c:	4b0d      	ldr	r3, [pc, #52]	@ (800d264 <vPortEnterCritical+0x5c>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2b01      	cmp	r3, #1
 800d232:	d110      	bne.n	800d256 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d234:	4b0c      	ldr	r3, [pc, #48]	@ (800d268 <vPortEnterCritical+0x60>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d00b      	beq.n	800d256 <vPortEnterCritical+0x4e>
	__asm volatile
 800d23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d242:	f383 8811 	msr	BASEPRI, r3
 800d246:	f3bf 8f6f 	isb	sy
 800d24a:	f3bf 8f4f 	dsb	sy
 800d24e:	603b      	str	r3, [r7, #0]
}
 800d250:	bf00      	nop
 800d252:	bf00      	nop
 800d254:	e7fd      	b.n	800d252 <vPortEnterCritical+0x4a>
	}
}
 800d256:	bf00      	nop
 800d258:	370c      	adds	r7, #12
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	200000a0 	.word	0x200000a0
 800d268:	e000ed04 	.word	0xe000ed04

0800d26c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d272:	4b12      	ldr	r3, [pc, #72]	@ (800d2bc <vPortExitCritical+0x50>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d10b      	bne.n	800d292 <vPortExitCritical+0x26>
	__asm volatile
 800d27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d27e:	f383 8811 	msr	BASEPRI, r3
 800d282:	f3bf 8f6f 	isb	sy
 800d286:	f3bf 8f4f 	dsb	sy
 800d28a:	607b      	str	r3, [r7, #4]
}
 800d28c:	bf00      	nop
 800d28e:	bf00      	nop
 800d290:	e7fd      	b.n	800d28e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d292:	4b0a      	ldr	r3, [pc, #40]	@ (800d2bc <vPortExitCritical+0x50>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	3b01      	subs	r3, #1
 800d298:	4a08      	ldr	r2, [pc, #32]	@ (800d2bc <vPortExitCritical+0x50>)
 800d29a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d29c:	4b07      	ldr	r3, [pc, #28]	@ (800d2bc <vPortExitCritical+0x50>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d105      	bne.n	800d2b0 <vPortExitCritical+0x44>
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	f383 8811 	msr	BASEPRI, r3
}
 800d2ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d2b0:	bf00      	nop
 800d2b2:	370c      	adds	r7, #12
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr
 800d2bc:	200000a0 	.word	0x200000a0

0800d2c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d2c0:	f3ef 8009 	mrs	r0, PSP
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	4b15      	ldr	r3, [pc, #84]	@ (800d320 <pxCurrentTCBConst>)
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	f01e 0f10 	tst.w	lr, #16
 800d2d0:	bf08      	it	eq
 800d2d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d2d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2da:	6010      	str	r0, [r2, #0]
 800d2dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d2e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d2e4:	f380 8811 	msr	BASEPRI, r0
 800d2e8:	f3bf 8f4f 	dsb	sy
 800d2ec:	f3bf 8f6f 	isb	sy
 800d2f0:	f7fe ff88 	bl	800c204 <vTaskSwitchContext>
 800d2f4:	f04f 0000 	mov.w	r0, #0
 800d2f8:	f380 8811 	msr	BASEPRI, r0
 800d2fc:	bc09      	pop	{r0, r3}
 800d2fe:	6819      	ldr	r1, [r3, #0]
 800d300:	6808      	ldr	r0, [r1, #0]
 800d302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d306:	f01e 0f10 	tst.w	lr, #16
 800d30a:	bf08      	it	eq
 800d30c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d310:	f380 8809 	msr	PSP, r0
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	f3af 8000 	nop.w

0800d320 <pxCurrentTCBConst>:
 800d320:	20005cc0 	.word	0x20005cc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d324:	bf00      	nop
 800d326:	bf00      	nop

0800d328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
	__asm volatile
 800d32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d332:	f383 8811 	msr	BASEPRI, r3
 800d336:	f3bf 8f6f 	isb	sy
 800d33a:	f3bf 8f4f 	dsb	sy
 800d33e:	607b      	str	r3, [r7, #4]
}
 800d340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d342:	f7fe fea5 	bl	800c090 <xTaskIncrementTick>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d003      	beq.n	800d354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d34c:	4b06      	ldr	r3, [pc, #24]	@ (800d368 <xPortSysTickHandler+0x40>)
 800d34e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d352:	601a      	str	r2, [r3, #0]
 800d354:	2300      	movs	r3, #0
 800d356:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	f383 8811 	msr	BASEPRI, r3
}
 800d35e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d360:	bf00      	nop
 800d362:	3708      	adds	r7, #8
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	e000ed04 	.word	0xe000ed04

0800d36c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d36c:	b480      	push	{r7}
 800d36e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d370:	4b0b      	ldr	r3, [pc, #44]	@ (800d3a0 <vPortSetupTimerInterrupt+0x34>)
 800d372:	2200      	movs	r2, #0
 800d374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d376:	4b0b      	ldr	r3, [pc, #44]	@ (800d3a4 <vPortSetupTimerInterrupt+0x38>)
 800d378:	2200      	movs	r2, #0
 800d37a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d37c:	4b0a      	ldr	r3, [pc, #40]	@ (800d3a8 <vPortSetupTimerInterrupt+0x3c>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a0a      	ldr	r2, [pc, #40]	@ (800d3ac <vPortSetupTimerInterrupt+0x40>)
 800d382:	fba2 2303 	umull	r2, r3, r2, r3
 800d386:	099b      	lsrs	r3, r3, #6
 800d388:	4a09      	ldr	r2, [pc, #36]	@ (800d3b0 <vPortSetupTimerInterrupt+0x44>)
 800d38a:	3b01      	subs	r3, #1
 800d38c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d38e:	4b04      	ldr	r3, [pc, #16]	@ (800d3a0 <vPortSetupTimerInterrupt+0x34>)
 800d390:	2207      	movs	r2, #7
 800d392:	601a      	str	r2, [r3, #0]
}
 800d394:	bf00      	nop
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop
 800d3a0:	e000e010 	.word	0xe000e010
 800d3a4:	e000e018 	.word	0xe000e018
 800d3a8:	20000004 	.word	0x20000004
 800d3ac:	10624dd3 	.word	0x10624dd3
 800d3b0:	e000e014 	.word	0xe000e014

0800d3b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d3b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d3c4 <vPortEnableVFP+0x10>
 800d3b8:	6801      	ldr	r1, [r0, #0]
 800d3ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d3be:	6001      	str	r1, [r0, #0]
 800d3c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d3c2:	bf00      	nop
 800d3c4:	e000ed88 	.word	0xe000ed88

0800d3c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b085      	sub	sp, #20
 800d3cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d3ce:	f3ef 8305 	mrs	r3, IPSR
 800d3d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2b0f      	cmp	r3, #15
 800d3d8:	d915      	bls.n	800d406 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d3da:	4a18      	ldr	r2, [pc, #96]	@ (800d43c <vPortValidateInterruptPriority+0x74>)
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	4413      	add	r3, r2
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d3e4:	4b16      	ldr	r3, [pc, #88]	@ (800d440 <vPortValidateInterruptPriority+0x78>)
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	7afa      	ldrb	r2, [r7, #11]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d20b      	bcs.n	800d406 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3f2:	f383 8811 	msr	BASEPRI, r3
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	607b      	str	r3, [r7, #4]
}
 800d400:	bf00      	nop
 800d402:	bf00      	nop
 800d404:	e7fd      	b.n	800d402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d406:	4b0f      	ldr	r3, [pc, #60]	@ (800d444 <vPortValidateInterruptPriority+0x7c>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d40e:	4b0e      	ldr	r3, [pc, #56]	@ (800d448 <vPortValidateInterruptPriority+0x80>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	429a      	cmp	r2, r3
 800d414:	d90b      	bls.n	800d42e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d41a:	f383 8811 	msr	BASEPRI, r3
 800d41e:	f3bf 8f6f 	isb	sy
 800d422:	f3bf 8f4f 	dsb	sy
 800d426:	603b      	str	r3, [r7, #0]
}
 800d428:	bf00      	nop
 800d42a:	bf00      	nop
 800d42c:	e7fd      	b.n	800d42a <vPortValidateInterruptPriority+0x62>
	}
 800d42e:	bf00      	nop
 800d430:	3714      	adds	r7, #20
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop
 800d43c:	e000e3f0 	.word	0xe000e3f0
 800d440:	200062ec 	.word	0x200062ec
 800d444:	e000ed0c 	.word	0xe000ed0c
 800d448:	200062f0 	.word	0x200062f0

0800d44c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b08a      	sub	sp, #40	@ 0x28
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d454:	2300      	movs	r3, #0
 800d456:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d458:	f7fe fd5e 	bl	800bf18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d45c:	4b5c      	ldr	r3, [pc, #368]	@ (800d5d0 <pvPortMalloc+0x184>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d101      	bne.n	800d468 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d464:	f000 f924 	bl	800d6b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d468:	4b5a      	ldr	r3, [pc, #360]	@ (800d5d4 <pvPortMalloc+0x188>)
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	4013      	ands	r3, r2
 800d470:	2b00      	cmp	r3, #0
 800d472:	f040 8095 	bne.w	800d5a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d01e      	beq.n	800d4ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d47c:	2208      	movs	r2, #8
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	4413      	add	r3, r2
 800d482:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f003 0307 	and.w	r3, r3, #7
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d015      	beq.n	800d4ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f023 0307 	bic.w	r3, r3, #7
 800d494:	3308      	adds	r3, #8
 800d496:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f003 0307 	and.w	r3, r3, #7
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d00b      	beq.n	800d4ba <pvPortMalloc+0x6e>
	__asm volatile
 800d4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a6:	f383 8811 	msr	BASEPRI, r3
 800d4aa:	f3bf 8f6f 	isb	sy
 800d4ae:	f3bf 8f4f 	dsb	sy
 800d4b2:	617b      	str	r3, [r7, #20]
}
 800d4b4:	bf00      	nop
 800d4b6:	bf00      	nop
 800d4b8:	e7fd      	b.n	800d4b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d06f      	beq.n	800d5a0 <pvPortMalloc+0x154>
 800d4c0:	4b45      	ldr	r3, [pc, #276]	@ (800d5d8 <pvPortMalloc+0x18c>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	687a      	ldr	r2, [r7, #4]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d86a      	bhi.n	800d5a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d4ca:	4b44      	ldr	r3, [pc, #272]	@ (800d5dc <pvPortMalloc+0x190>)
 800d4cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d4ce:	4b43      	ldr	r3, [pc, #268]	@ (800d5dc <pvPortMalloc+0x190>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d4d4:	e004      	b.n	800d4e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d903      	bls.n	800d4f2 <pvPortMalloc+0xa6>
 800d4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d1f1      	bne.n	800d4d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d4f2:	4b37      	ldr	r3, [pc, #220]	@ (800d5d0 <pvPortMalloc+0x184>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d051      	beq.n	800d5a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d4fc:	6a3b      	ldr	r3, [r7, #32]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	2208      	movs	r2, #8
 800d502:	4413      	add	r3, r2
 800d504:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	6a3b      	ldr	r3, [r7, #32]
 800d50c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d510:	685a      	ldr	r2, [r3, #4]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	1ad2      	subs	r2, r2, r3
 800d516:	2308      	movs	r3, #8
 800d518:	005b      	lsls	r3, r3, #1
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d920      	bls.n	800d560 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d51e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	4413      	add	r3, r2
 800d524:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d526:	69bb      	ldr	r3, [r7, #24]
 800d528:	f003 0307 	and.w	r3, r3, #7
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00b      	beq.n	800d548 <pvPortMalloc+0xfc>
	__asm volatile
 800d530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d534:	f383 8811 	msr	BASEPRI, r3
 800d538:	f3bf 8f6f 	isb	sy
 800d53c:	f3bf 8f4f 	dsb	sy
 800d540:	613b      	str	r3, [r7, #16]
}
 800d542:	bf00      	nop
 800d544:	bf00      	nop
 800d546:	e7fd      	b.n	800d544 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54a:	685a      	ldr	r2, [r3, #4]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	1ad2      	subs	r2, r2, r3
 800d550:	69bb      	ldr	r3, [r7, #24]
 800d552:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d55a:	69b8      	ldr	r0, [r7, #24]
 800d55c:	f000 f90a 	bl	800d774 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d560:	4b1d      	ldr	r3, [pc, #116]	@ (800d5d8 <pvPortMalloc+0x18c>)
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	1ad3      	subs	r3, r2, r3
 800d56a:	4a1b      	ldr	r2, [pc, #108]	@ (800d5d8 <pvPortMalloc+0x18c>)
 800d56c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d56e:	4b1a      	ldr	r3, [pc, #104]	@ (800d5d8 <pvPortMalloc+0x18c>)
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	4b1b      	ldr	r3, [pc, #108]	@ (800d5e0 <pvPortMalloc+0x194>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	429a      	cmp	r2, r3
 800d578:	d203      	bcs.n	800d582 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d57a:	4b17      	ldr	r3, [pc, #92]	@ (800d5d8 <pvPortMalloc+0x18c>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4a18      	ldr	r2, [pc, #96]	@ (800d5e0 <pvPortMalloc+0x194>)
 800d580:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d584:	685a      	ldr	r2, [r3, #4]
 800d586:	4b13      	ldr	r3, [pc, #76]	@ (800d5d4 <pvPortMalloc+0x188>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	431a      	orrs	r2, r3
 800d58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d58e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d592:	2200      	movs	r2, #0
 800d594:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d596:	4b13      	ldr	r3, [pc, #76]	@ (800d5e4 <pvPortMalloc+0x198>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	3301      	adds	r3, #1
 800d59c:	4a11      	ldr	r2, [pc, #68]	@ (800d5e4 <pvPortMalloc+0x198>)
 800d59e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d5a0:	f7fe fcc8 	bl	800bf34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5a4:	69fb      	ldr	r3, [r7, #28]
 800d5a6:	f003 0307 	and.w	r3, r3, #7
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d00b      	beq.n	800d5c6 <pvPortMalloc+0x17a>
	__asm volatile
 800d5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b2:	f383 8811 	msr	BASEPRI, r3
 800d5b6:	f3bf 8f6f 	isb	sy
 800d5ba:	f3bf 8f4f 	dsb	sy
 800d5be:	60fb      	str	r3, [r7, #12]
}
 800d5c0:	bf00      	nop
 800d5c2:	bf00      	nop
 800d5c4:	e7fd      	b.n	800d5c2 <pvPortMalloc+0x176>
	return pvReturn;
 800d5c6:	69fb      	ldr	r3, [r7, #28]
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3728      	adds	r7, #40	@ 0x28
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	20006efc 	.word	0x20006efc
 800d5d4:	20006f10 	.word	0x20006f10
 800d5d8:	20006f00 	.word	0x20006f00
 800d5dc:	20006ef4 	.word	0x20006ef4
 800d5e0:	20006f04 	.word	0x20006f04
 800d5e4:	20006f08 	.word	0x20006f08

0800d5e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b086      	sub	sp, #24
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d04f      	beq.n	800d69a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d5fa:	2308      	movs	r3, #8
 800d5fc:	425b      	negs	r3, r3
 800d5fe:	697a      	ldr	r2, [r7, #20]
 800d600:	4413      	add	r3, r2
 800d602:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	685a      	ldr	r2, [r3, #4]
 800d60c:	4b25      	ldr	r3, [pc, #148]	@ (800d6a4 <vPortFree+0xbc>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4013      	ands	r3, r2
 800d612:	2b00      	cmp	r3, #0
 800d614:	d10b      	bne.n	800d62e <vPortFree+0x46>
	__asm volatile
 800d616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d61a:	f383 8811 	msr	BASEPRI, r3
 800d61e:	f3bf 8f6f 	isb	sy
 800d622:	f3bf 8f4f 	dsb	sy
 800d626:	60fb      	str	r3, [r7, #12]
}
 800d628:	bf00      	nop
 800d62a:	bf00      	nop
 800d62c:	e7fd      	b.n	800d62a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d00b      	beq.n	800d64e <vPortFree+0x66>
	__asm volatile
 800d636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d63a:	f383 8811 	msr	BASEPRI, r3
 800d63e:	f3bf 8f6f 	isb	sy
 800d642:	f3bf 8f4f 	dsb	sy
 800d646:	60bb      	str	r3, [r7, #8]
}
 800d648:	bf00      	nop
 800d64a:	bf00      	nop
 800d64c:	e7fd      	b.n	800d64a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	685a      	ldr	r2, [r3, #4]
 800d652:	4b14      	ldr	r3, [pc, #80]	@ (800d6a4 <vPortFree+0xbc>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4013      	ands	r3, r2
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d01e      	beq.n	800d69a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d11a      	bne.n	800d69a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	685a      	ldr	r2, [r3, #4]
 800d668:	4b0e      	ldr	r3, [pc, #56]	@ (800d6a4 <vPortFree+0xbc>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	43db      	mvns	r3, r3
 800d66e:	401a      	ands	r2, r3
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d674:	f7fe fc50 	bl	800bf18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	685a      	ldr	r2, [r3, #4]
 800d67c:	4b0a      	ldr	r3, [pc, #40]	@ (800d6a8 <vPortFree+0xc0>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4413      	add	r3, r2
 800d682:	4a09      	ldr	r2, [pc, #36]	@ (800d6a8 <vPortFree+0xc0>)
 800d684:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d686:	6938      	ldr	r0, [r7, #16]
 800d688:	f000 f874 	bl	800d774 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d68c:	4b07      	ldr	r3, [pc, #28]	@ (800d6ac <vPortFree+0xc4>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	3301      	adds	r3, #1
 800d692:	4a06      	ldr	r2, [pc, #24]	@ (800d6ac <vPortFree+0xc4>)
 800d694:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d696:	f7fe fc4d 	bl	800bf34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d69a:	bf00      	nop
 800d69c:	3718      	adds	r7, #24
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	20006f10 	.word	0x20006f10
 800d6a8:	20006f00 	.word	0x20006f00
 800d6ac:	20006f0c 	.word	0x20006f0c

0800d6b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b085      	sub	sp, #20
 800d6b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d6b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800d6ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d6bc:	4b27      	ldr	r3, [pc, #156]	@ (800d75c <prvHeapInit+0xac>)
 800d6be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f003 0307 	and.w	r3, r3, #7
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00c      	beq.n	800d6e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	3307      	adds	r3, #7
 800d6ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f023 0307 	bic.w	r3, r3, #7
 800d6d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d6d8:	68ba      	ldr	r2, [r7, #8]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	1ad3      	subs	r3, r2, r3
 800d6de:	4a1f      	ldr	r2, [pc, #124]	@ (800d75c <prvHeapInit+0xac>)
 800d6e0:	4413      	add	r3, r2
 800d6e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d6e8:	4a1d      	ldr	r2, [pc, #116]	@ (800d760 <prvHeapInit+0xb0>)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d6ee:	4b1c      	ldr	r3, [pc, #112]	@ (800d760 <prvHeapInit+0xb0>)
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	68ba      	ldr	r2, [r7, #8]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d6fc:	2208      	movs	r2, #8
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	1a9b      	subs	r3, r3, r2
 800d702:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f023 0307 	bic.w	r3, r3, #7
 800d70a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	4a15      	ldr	r2, [pc, #84]	@ (800d764 <prvHeapInit+0xb4>)
 800d710:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d712:	4b14      	ldr	r3, [pc, #80]	@ (800d764 <prvHeapInit+0xb4>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	2200      	movs	r2, #0
 800d718:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d71a:	4b12      	ldr	r3, [pc, #72]	@ (800d764 <prvHeapInit+0xb4>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2200      	movs	r2, #0
 800d720:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	1ad2      	subs	r2, r2, r3
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d730:	4b0c      	ldr	r3, [pc, #48]	@ (800d764 <prvHeapInit+0xb4>)
 800d732:	681a      	ldr	r2, [r3, #0]
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	4a0a      	ldr	r2, [pc, #40]	@ (800d768 <prvHeapInit+0xb8>)
 800d73e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	4a09      	ldr	r2, [pc, #36]	@ (800d76c <prvHeapInit+0xbc>)
 800d746:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d748:	4b09      	ldr	r3, [pc, #36]	@ (800d770 <prvHeapInit+0xc0>)
 800d74a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d74e:	601a      	str	r2, [r3, #0]
}
 800d750:	bf00      	nop
 800d752:	3714      	adds	r7, #20
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr
 800d75c:	200062f4 	.word	0x200062f4
 800d760:	20006ef4 	.word	0x20006ef4
 800d764:	20006efc 	.word	0x20006efc
 800d768:	20006f04 	.word	0x20006f04
 800d76c:	20006f00 	.word	0x20006f00
 800d770:	20006f10 	.word	0x20006f10

0800d774 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d774:	b480      	push	{r7}
 800d776:	b085      	sub	sp, #20
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d77c:	4b28      	ldr	r3, [pc, #160]	@ (800d820 <prvInsertBlockIntoFreeList+0xac>)
 800d77e:	60fb      	str	r3, [r7, #12]
 800d780:	e002      	b.n	800d788 <prvInsertBlockIntoFreeList+0x14>
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	60fb      	str	r3, [r7, #12]
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d8f7      	bhi.n	800d782 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	68ba      	ldr	r2, [r7, #8]
 800d79c:	4413      	add	r3, r2
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d108      	bne.n	800d7b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	685a      	ldr	r2, [r3, #4]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	441a      	add	r2, r3
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	441a      	add	r2, r3
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d118      	bne.n	800d7fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	4b15      	ldr	r3, [pc, #84]	@ (800d824 <prvInsertBlockIntoFreeList+0xb0>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d00d      	beq.n	800d7f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	685a      	ldr	r2, [r3, #4]
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	441a      	add	r2, r3
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	601a      	str	r2, [r3, #0]
 800d7f0:	e008      	b.n	800d804 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d7f2:	4b0c      	ldr	r3, [pc, #48]	@ (800d824 <prvInsertBlockIntoFreeList+0xb0>)
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	601a      	str	r2, [r3, #0]
 800d7fa:	e003      	b.n	800d804 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d804:	68fa      	ldr	r2, [r7, #12]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d002      	beq.n	800d812 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	687a      	ldr	r2, [r7, #4]
 800d810:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d812:	bf00      	nop
 800d814:	3714      	adds	r7, #20
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr
 800d81e:	bf00      	nop
 800d820:	20006ef4 	.word	0x20006ef4
 800d824:	20006efc 	.word	0x20006efc

0800d828 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800d828:	4b04      	ldr	r3, [pc, #16]	@ (800d83c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	b10a      	cbz	r2, 800d832 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800d82e:	4803      	ldr	r0, [pc, #12]	@ (800d83c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800d830:	4770      	bx	lr
 800d832:	4a03      	ldr	r2, [pc, #12]	@ (800d840 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800d834:	4801      	ldr	r0, [pc, #4]	@ (800d83c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800d836:	6812      	ldr	r2, [r2, #0]
 800d838:	601a      	str	r2, [r3, #0]
 800d83a:	4770      	bx	lr
 800d83c:	200000ac 	.word	0x200000ac
 800d840:	200003b4 	.word	0x200003b4

0800d844 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800d844:	4a02      	ldr	r2, [pc, #8]	@ (800d850 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800d846:	4b03      	ldr	r3, [pc, #12]	@ (800d854 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800d848:	6812      	ldr	r2, [r2, #0]
 800d84a:	601a      	str	r2, [r3, #0]
 800d84c:	4770      	bx	lr
 800d84e:	bf00      	nop
 800d850:	200003b4 	.word	0x200003b4
 800d854:	200000ac 	.word	0x200000ac

0800d858 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800d858:	f004 bf8c 	b.w	8012774 <geometry_msgs__msg__Twist__init>

0800d85c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800d85c:	f004 bfae 	b.w	80127bc <geometry_msgs__msg__Twist__fini>

0800d860 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800d860:	b510      	push	{r4, lr}
 800d862:	f000 f819 	bl	800d898 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d866:	4c07      	ldr	r4, [pc, #28]	@ (800d884 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800d868:	60e0      	str	r0, [r4, #12]
 800d86a:	f000 f815 	bl	800d898 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d86e:	4b06      	ldr	r3, [pc, #24]	@ (800d888 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800d870:	64a0      	str	r0, [r4, #72]	@ 0x48
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	b10a      	cbz	r2, 800d87a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800d876:	4804      	ldr	r0, [pc, #16]	@ (800d888 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800d878:	bd10      	pop	{r4, pc}
 800d87a:	4a04      	ldr	r2, [pc, #16]	@ (800d88c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800d87c:	4802      	ldr	r0, [pc, #8]	@ (800d888 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800d87e:	6812      	ldr	r2, [r2, #0]
 800d880:	601a      	str	r2, [r3, #0]
 800d882:	bd10      	pop	{r4, pc}
 800d884:	200000b8 	.word	0x200000b8
 800d888:	20000130 	.word	0x20000130
 800d88c:	200003b8 	.word	0x200003b8

0800d890 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800d890:	f004 bfa0 	b.w	80127d4 <geometry_msgs__msg__Vector3__init>

0800d894 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800d894:	f004 bfa2 	b.w	80127dc <geometry_msgs__msg__Vector3__fini>

0800d898 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800d898:	4b04      	ldr	r3, [pc, #16]	@ (800d8ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	b10a      	cbz	r2, 800d8a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800d89e:	4803      	ldr	r0, [pc, #12]	@ (800d8ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800d8a0:	4770      	bx	lr
 800d8a2:	4a03      	ldr	r2, [pc, #12]	@ (800d8b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800d8a4:	4801      	ldr	r0, [pc, #4]	@ (800d8ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800d8a6:	6812      	ldr	r2, [r2, #0]
 800d8a8:	601a      	str	r2, [r3, #0]
 800d8aa:	4770      	bx	lr
 800d8ac:	200001f0 	.word	0x200001f0
 800d8b0:	200003b8 	.word	0x200003b8

0800d8b4 <get_serialized_size_geometry_msgs__msg__Twist>:
 800d8b4:	b570      	push	{r4, r5, r6, lr}
 800d8b6:	4604      	mov	r4, r0
 800d8b8:	b148      	cbz	r0, 800d8ce <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800d8ba:	460d      	mov	r5, r1
 800d8bc:	f000 f860 	bl	800d980 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d8c0:	4606      	mov	r6, r0
 800d8c2:	1829      	adds	r1, r5, r0
 800d8c4:	f104 0018 	add.w	r0, r4, #24
 800d8c8:	f000 f85a 	bl	800d980 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d8cc:	4430      	add	r0, r6
 800d8ce:	bd70      	pop	{r4, r5, r6, pc}

0800d8d0 <_Twist__cdr_deserialize>:
 800d8d0:	b570      	push	{r4, r5, r6, lr}
 800d8d2:	460c      	mov	r4, r1
 800d8d4:	b189      	cbz	r1, 800d8fa <_Twist__cdr_deserialize+0x2a>
 800d8d6:	4605      	mov	r5, r0
 800d8d8:	f000 f8de 	bl	800da98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d8dc:	6843      	ldr	r3, [r0, #4]
 800d8de:	4621      	mov	r1, r4
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	4798      	blx	r3
 800d8e6:	f000 f8d7 	bl	800da98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d8ea:	6843      	ldr	r3, [r0, #4]
 800d8ec:	f104 0118 	add.w	r1, r4, #24
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	68db      	ldr	r3, [r3, #12]
 800d8f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d8f8:	4718      	bx	r3
 800d8fa:	4608      	mov	r0, r1
 800d8fc:	bd70      	pop	{r4, r5, r6, pc}
 800d8fe:	bf00      	nop

0800d900 <_Twist__cdr_serialize>:
 800d900:	b510      	push	{r4, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	9101      	str	r1, [sp, #4]
 800d906:	b190      	cbz	r0, 800d92e <_Twist__cdr_serialize+0x2e>
 800d908:	4604      	mov	r4, r0
 800d90a:	f000 f8c5 	bl	800da98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d90e:	6843      	ldr	r3, [r0, #4]
 800d910:	9901      	ldr	r1, [sp, #4]
 800d912:	689b      	ldr	r3, [r3, #8]
 800d914:	4620      	mov	r0, r4
 800d916:	4798      	blx	r3
 800d918:	f000 f8be 	bl	800da98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d91c:	6843      	ldr	r3, [r0, #4]
 800d91e:	9901      	ldr	r1, [sp, #4]
 800d920:	689b      	ldr	r3, [r3, #8]
 800d922:	f104 0018 	add.w	r0, r4, #24
 800d926:	b002      	add	sp, #8
 800d928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d92c:	4718      	bx	r3
 800d92e:	b002      	add	sp, #8
 800d930:	bd10      	pop	{r4, pc}
 800d932:	bf00      	nop

0800d934 <_Twist__get_serialized_size>:
 800d934:	b538      	push	{r3, r4, r5, lr}
 800d936:	4604      	mov	r4, r0
 800d938:	b148      	cbz	r0, 800d94e <_Twist__get_serialized_size+0x1a>
 800d93a:	2100      	movs	r1, #0
 800d93c:	f000 f820 	bl	800d980 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d940:	4605      	mov	r5, r0
 800d942:	4601      	mov	r1, r0
 800d944:	f104 0018 	add.w	r0, r4, #24
 800d948:	f000 f81a 	bl	800d980 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d94c:	4428      	add	r0, r5
 800d94e:	bd38      	pop	{r3, r4, r5, pc}

0800d950 <_Twist__max_serialized_size>:
 800d950:	b510      	push	{r4, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	2301      	movs	r3, #1
 800d956:	2100      	movs	r1, #0
 800d958:	f10d 0007 	add.w	r0, sp, #7
 800d95c:	f88d 3007 	strb.w	r3, [sp, #7]
 800d960:	f000 f87e 	bl	800da60 <max_serialized_size_geometry_msgs__msg__Vector3>
 800d964:	4604      	mov	r4, r0
 800d966:	4601      	mov	r1, r0
 800d968:	f10d 0007 	add.w	r0, sp, #7
 800d96c:	f000 f878 	bl	800da60 <max_serialized_size_geometry_msgs__msg__Vector3>
 800d970:	4420      	add	r0, r4
 800d972:	b002      	add	sp, #8
 800d974:	bd10      	pop	{r4, pc}
 800d976:	bf00      	nop

0800d978 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800d978:	4800      	ldr	r0, [pc, #0]	@ (800d97c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800d97a:	4770      	bx	lr
 800d97c:	200001fc 	.word	0x200001fc

0800d980 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800d980:	b1b8      	cbz	r0, 800d9b2 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800d982:	b538      	push	{r3, r4, r5, lr}
 800d984:	460d      	mov	r5, r1
 800d986:	4628      	mov	r0, r5
 800d988:	2108      	movs	r1, #8
 800d98a:	f001 fcb1 	bl	800f2f0 <ucdr_alignment>
 800d98e:	f105 0308 	add.w	r3, r5, #8
 800d992:	181c      	adds	r4, r3, r0
 800d994:	2108      	movs	r1, #8
 800d996:	4620      	mov	r0, r4
 800d998:	f001 fcaa 	bl	800f2f0 <ucdr_alignment>
 800d99c:	3008      	adds	r0, #8
 800d99e:	4404      	add	r4, r0
 800d9a0:	2108      	movs	r1, #8
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	f001 fca4 	bl	800f2f0 <ucdr_alignment>
 800d9a8:	f1c5 0508 	rsb	r5, r5, #8
 800d9ac:	4428      	add	r0, r5
 800d9ae:	4420      	add	r0, r4
 800d9b0:	bd38      	pop	{r3, r4, r5, pc}
 800d9b2:	4770      	bx	lr

0800d9b4 <_Vector3__cdr_deserialize>:
 800d9b4:	b538      	push	{r3, r4, r5, lr}
 800d9b6:	460c      	mov	r4, r1
 800d9b8:	b171      	cbz	r1, 800d9d8 <_Vector3__cdr_deserialize+0x24>
 800d9ba:	4605      	mov	r5, r0
 800d9bc:	f001 faac 	bl	800ef18 <ucdr_deserialize_double>
 800d9c0:	f104 0108 	add.w	r1, r4, #8
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	f001 faa7 	bl	800ef18 <ucdr_deserialize_double>
 800d9ca:	f104 0110 	add.w	r1, r4, #16
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9d4:	f001 baa0 	b.w	800ef18 <ucdr_deserialize_double>
 800d9d8:	4608      	mov	r0, r1
 800d9da:	bd38      	pop	{r3, r4, r5, pc}

0800d9dc <_Vector3__cdr_serialize>:
 800d9dc:	b198      	cbz	r0, 800da06 <_Vector3__cdr_serialize+0x2a>
 800d9de:	b538      	push	{r3, r4, r5, lr}
 800d9e0:	ed90 0b00 	vldr	d0, [r0]
 800d9e4:	460d      	mov	r5, r1
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	4608      	mov	r0, r1
 800d9ea:	f001 f8f3 	bl	800ebd4 <ucdr_serialize_double>
 800d9ee:	ed94 0b02 	vldr	d0, [r4, #8]
 800d9f2:	4628      	mov	r0, r5
 800d9f4:	f001 f8ee 	bl	800ebd4 <ucdr_serialize_double>
 800d9f8:	ed94 0b04 	vldr	d0, [r4, #16]
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da02:	f001 b8e7 	b.w	800ebd4 <ucdr_serialize_double>
 800da06:	4770      	bx	lr

0800da08 <_Vector3__get_serialized_size>:
 800da08:	b198      	cbz	r0, 800da32 <_Vector3__get_serialized_size+0x2a>
 800da0a:	b510      	push	{r4, lr}
 800da0c:	2108      	movs	r1, #8
 800da0e:	2000      	movs	r0, #0
 800da10:	f001 fc6e 	bl	800f2f0 <ucdr_alignment>
 800da14:	f100 0408 	add.w	r4, r0, #8
 800da18:	2108      	movs	r1, #8
 800da1a:	4620      	mov	r0, r4
 800da1c:	f001 fc68 	bl	800f2f0 <ucdr_alignment>
 800da20:	3008      	adds	r0, #8
 800da22:	4404      	add	r4, r0
 800da24:	2108      	movs	r1, #8
 800da26:	4620      	mov	r0, r4
 800da28:	f001 fc62 	bl	800f2f0 <ucdr_alignment>
 800da2c:	3008      	adds	r0, #8
 800da2e:	4420      	add	r0, r4
 800da30:	bd10      	pop	{r4, pc}
 800da32:	4770      	bx	lr

0800da34 <_Vector3__max_serialized_size>:
 800da34:	b538      	push	{r3, r4, r5, lr}
 800da36:	2108      	movs	r1, #8
 800da38:	2000      	movs	r0, #0
 800da3a:	f001 fc59 	bl	800f2f0 <ucdr_alignment>
 800da3e:	f100 0508 	add.w	r5, r0, #8
 800da42:	2108      	movs	r1, #8
 800da44:	4628      	mov	r0, r5
 800da46:	f001 fc53 	bl	800f2f0 <ucdr_alignment>
 800da4a:	f100 0408 	add.w	r4, r0, #8
 800da4e:	442c      	add	r4, r5
 800da50:	2108      	movs	r1, #8
 800da52:	4620      	mov	r0, r4
 800da54:	f001 fc4c 	bl	800f2f0 <ucdr_alignment>
 800da58:	3008      	adds	r0, #8
 800da5a:	4420      	add	r0, r4
 800da5c:	bd38      	pop	{r3, r4, r5, pc}
 800da5e:	bf00      	nop

0800da60 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800da60:	b570      	push	{r4, r5, r6, lr}
 800da62:	2301      	movs	r3, #1
 800da64:	460c      	mov	r4, r1
 800da66:	7003      	strb	r3, [r0, #0]
 800da68:	2108      	movs	r1, #8
 800da6a:	4620      	mov	r0, r4
 800da6c:	f001 fc40 	bl	800f2f0 <ucdr_alignment>
 800da70:	f104 0508 	add.w	r5, r4, #8
 800da74:	1946      	adds	r6, r0, r5
 800da76:	2108      	movs	r1, #8
 800da78:	4630      	mov	r0, r6
 800da7a:	f001 fc39 	bl	800f2f0 <ucdr_alignment>
 800da7e:	f100 0508 	add.w	r5, r0, #8
 800da82:	4435      	add	r5, r6
 800da84:	2108      	movs	r1, #8
 800da86:	4628      	mov	r0, r5
 800da88:	f001 fc32 	bl	800f2f0 <ucdr_alignment>
 800da8c:	f1c4 0408 	rsb	r4, r4, #8
 800da90:	4420      	add	r0, r4
 800da92:	4428      	add	r0, r5
 800da94:	bd70      	pop	{r4, r5, r6, pc}
 800da96:	bf00      	nop

0800da98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800da98:	4800      	ldr	r0, [pc, #0]	@ (800da9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800da9a:	4770      	bx	lr
 800da9c:	20000224 	.word	0x20000224

0800daa0 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800daa0:	4b04      	ldr	r3, [pc, #16]	@ (800dab4 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	b10a      	cbz	r2, 800daaa <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xa>
 800daa6:	4803      	ldr	r0, [pc, #12]	@ (800dab4 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800daa8:	4770      	bx	lr
 800daaa:	4a03      	ldr	r2, [pc, #12]	@ (800dab8 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x18>)
 800daac:	4801      	ldr	r0, [pc, #4]	@ (800dab4 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800daae:	6812      	ldr	r2, [r2, #0]
 800dab0:	601a      	str	r2, [r3, #0]
 800dab2:	4770      	bx	lr
 800dab4:	20000254 	.word	0x20000254
 800dab8:	200003b4 	.word	0x200003b4

0800dabc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800dabc:	4b04      	ldr	r3, [pc, #16]	@ (800dad0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>)
 800dabe:	4805      	ldr	r0, [pc, #20]	@ (800dad4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x18>)
 800dac0:	4905      	ldr	r1, [pc, #20]	@ (800dad8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x1c>)
 800dac2:	4a06      	ldr	r2, [pc, #24]	@ (800dadc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	6003      	str	r3, [r0, #0]
 800dac8:	600b      	str	r3, [r1, #0]
 800daca:	6013      	str	r3, [r2, #0]
 800dacc:	4770      	bx	lr
 800dace:	bf00      	nop
 800dad0:	200003b4 	.word	0x200003b4
 800dad4:	20000270 	.word	0x20000270
 800dad8:	2000027c 	.word	0x2000027c
 800dadc:	20000254 	.word	0x20000254

0800dae0 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_init_function>:
 800dae0:	f004 bf48 	b.w	8012974 <imu_interfaces__srv__ImuCalibration_Request__init>

0800dae4 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_fini_function>:
 800dae4:	f004 bf58 	b.w	8012998 <imu_interfaces__srv__ImuCalibration_Request__fini>

0800dae8 <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_init_function>:
 800dae8:	f004 bf5a 	b.w	80129a0 <imu_interfaces__srv__ImuCalibration_Response__init>

0800daec <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_fini_function>:
 800daec:	f004 bf5c 	b.w	80129a8 <imu_interfaces__srv__ImuCalibration_Response__fini>

0800daf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800daf0:	b508      	push	{r3, lr}
 800daf2:	f004 fae1 	bl	80120b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800daf6:	4b06      	ldr	r3, [pc, #24]	@ (800db10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800daf8:	4906      	ldr	r1, [pc, #24]	@ (800db14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x24>)
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	60c8      	str	r0, [r1, #12]
 800dafe:	b10a      	cbz	r2, 800db04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>
 800db00:	4803      	ldr	r0, [pc, #12]	@ (800db10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800db02:	bd08      	pop	{r3, pc}
 800db04:	4a04      	ldr	r2, [pc, #16]	@ (800db18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x28>)
 800db06:	4802      	ldr	r0, [pc, #8]	@ (800db10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800db08:	6812      	ldr	r2, [r2, #0]
 800db0a:	601a      	str	r2, [r3, #0]
 800db0c:	bd08      	pop	{r3, pc}
 800db0e:	bf00      	nop
 800db10:	200002c4 	.word	0x200002c4
 800db14:	20000288 	.word	0x20000288
 800db18:	200003b8 	.word	0x200003b8

0800db1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800db1c:	4b04      	ldr	r3, [pc, #16]	@ (800db30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	b10a      	cbz	r2, 800db26 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0xa>
 800db22:	4803      	ldr	r0, [pc, #12]	@ (800db30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800db24:	4770      	bx	lr
 800db26:	4a03      	ldr	r2, [pc, #12]	@ (800db34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x18>)
 800db28:	4801      	ldr	r0, [pc, #4]	@ (800db30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800db2a:	6812      	ldr	r2, [r2, #0]
 800db2c:	601a      	str	r2, [r3, #0]
 800db2e:	4770      	bx	lr
 800db30:	2000030c 	.word	0x2000030c
 800db34:	200003b8 	.word	0x200003b8

0800db38 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800db38:	4b16      	ldr	r3, [pc, #88]	@ (800db94 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800db3a:	681a      	ldr	r2, [r3, #0]
 800db3c:	b510      	push	{r4, lr}
 800db3e:	b132      	cbz	r2, 800db4e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x16>
 800db40:	685c      	ldr	r4, [r3, #4]
 800db42:	68a3      	ldr	r3, [r4, #8]
 800db44:	b153      	cbz	r3, 800db5c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x24>
 800db46:	68e3      	ldr	r3, [r4, #12]
 800db48:	b1a3      	cbz	r3, 800db74 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x3c>
 800db4a:	4812      	ldr	r0, [pc, #72]	@ (800db94 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800db4c:	bd10      	pop	{r4, pc}
 800db4e:	4a12      	ldr	r2, [pc, #72]	@ (800db98 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800db50:	685c      	ldr	r4, [r3, #4]
 800db52:	6812      	ldr	r2, [r2, #0]
 800db54:	601a      	str	r2, [r3, #0]
 800db56:	68a3      	ldr	r3, [r4, #8]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d1f4      	bne.n	800db46 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xe>
 800db5c:	f004 faac 	bl	80120b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800db60:	4b0e      	ldr	r3, [pc, #56]	@ (800db9c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x64>)
 800db62:	490f      	ldr	r1, [pc, #60]	@ (800dba0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x68>)
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	60c8      	str	r0, [r1, #12]
 800db68:	b17a      	cbz	r2, 800db8a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x52>
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	60a3      	str	r3, [r4, #8]
 800db6e:	68e3      	ldr	r3, [r4, #12]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d1ea      	bne.n	800db4a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x12>
 800db74:	4b0b      	ldr	r3, [pc, #44]	@ (800dba4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x6c>)
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	b11a      	cbz	r2, 800db82 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4a>
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	4805      	ldr	r0, [pc, #20]	@ (800db94 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800db7e:	60e3      	str	r3, [r4, #12]
 800db80:	bd10      	pop	{r4, pc}
 800db82:	4a05      	ldr	r2, [pc, #20]	@ (800db98 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800db84:	6812      	ldr	r2, [r2, #0]
 800db86:	601a      	str	r2, [r3, #0]
 800db88:	e7f7      	b.n	800db7a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x42>
 800db8a:	4a03      	ldr	r2, [pc, #12]	@ (800db98 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800db8c:	6812      	ldr	r2, [r2, #0]
 800db8e:	601a      	str	r2, [r3, #0]
 800db90:	e7eb      	b.n	800db6a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x32>
 800db92:	bf00      	nop
 800db94:	20000328 	.word	0x20000328
 800db98:	200003b8 	.word	0x200003b8
 800db9c:	200002c4 	.word	0x200002c4
 800dba0:	20000288 	.word	0x20000288
 800dba4:	2000030c 	.word	0x2000030c

0800dba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800dba8:	4800      	ldr	r0, [pc, #0]	@ (800dbac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x4>)
 800dbaa:	4770      	bx	lr
 800dbac:	20000350 	.word	0x20000350

0800dbb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800dbb0:	4800      	ldr	r0, [pc, #0]	@ (800dbb4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x4>)
 800dbb2:	4770      	bx	lr
 800dbb4:	2000035c 	.word	0x2000035c

0800dbb8 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request>:
 800dbb8:	b108      	cbz	r0, 800dbbe <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request+0x6>
 800dbba:	f004 bacf 	b.w	801215c <get_serialized_size_sensor_msgs__msg__Imu>
 800dbbe:	4770      	bx	lr

0800dbc0 <_ImuCalibration_Request__max_serialized_size>:
 800dbc0:	b500      	push	{lr}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	2100      	movs	r1, #0
 800dbc8:	f10d 0007 	add.w	r0, sp, #7
 800dbcc:	f88d 3007 	strb.w	r3, [sp, #7]
 800dbd0:	f004 fb42 	bl	8012258 <max_serialized_size_sensor_msgs__msg__Imu>
 800dbd4:	b003      	add	sp, #12
 800dbd6:	f85d fb04 	ldr.w	pc, [sp], #4
 800dbda:	bf00      	nop

0800dbdc <_ImuCalibration_Response__max_serialized_size>:
 800dbdc:	b508      	push	{r3, lr}
 800dbde:	2101      	movs	r1, #1
 800dbe0:	2000      	movs	r0, #0
 800dbe2:	f001 fb85 	bl	800f2f0 <ucdr_alignment>
 800dbe6:	3001      	adds	r0, #1
 800dbe8:	bd08      	pop	{r3, pc}
 800dbea:	bf00      	nop

0800dbec <_ImuCalibration_Response__cdr_deserialize>:
 800dbec:	b109      	cbz	r1, 800dbf2 <_ImuCalibration_Response__cdr_deserialize+0x6>
 800dbee:	f000 b881 	b.w	800dcf4 <ucdr_deserialize_bool>
 800dbf2:	4608      	mov	r0, r1
 800dbf4:	4770      	bx	lr
 800dbf6:	bf00      	nop

0800dbf8 <_ImuCalibration_Request__get_serialized_size>:
 800dbf8:	b110      	cbz	r0, 800dc00 <_ImuCalibration_Request__get_serialized_size+0x8>
 800dbfa:	2100      	movs	r1, #0
 800dbfc:	f004 baae 	b.w	801215c <get_serialized_size_sensor_msgs__msg__Imu>
 800dc00:	4770      	bx	lr
 800dc02:	bf00      	nop

0800dc04 <_ImuCalibration_Request__cdr_deserialize>:
 800dc04:	b570      	push	{r4, r5, r6, lr}
 800dc06:	460c      	mov	r4, r1
 800dc08:	b149      	cbz	r1, 800dc1e <_ImuCalibration_Request__cdr_deserialize+0x1a>
 800dc0a:	4605      	mov	r5, r0
 800dc0c:	f004 fb5e 	bl	80122cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800dc10:	6843      	ldr	r3, [r0, #4]
 800dc12:	4621      	mov	r1, r4
 800dc14:	4628      	mov	r0, r5
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc1c:	4718      	bx	r3
 800dc1e:	4608      	mov	r0, r1
 800dc20:	bd70      	pop	{r4, r5, r6, pc}
 800dc22:	bf00      	nop

0800dc24 <_ImuCalibration_Request__cdr_serialize>:
 800dc24:	b158      	cbz	r0, 800dc3e <_ImuCalibration_Request__cdr_serialize+0x1a>
 800dc26:	b570      	push	{r4, r5, r6, lr}
 800dc28:	460d      	mov	r5, r1
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	f004 fb4e 	bl	80122cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800dc30:	6843      	ldr	r3, [r0, #4]
 800dc32:	4629      	mov	r1, r5
 800dc34:	4620      	mov	r0, r4
 800dc36:	689b      	ldr	r3, [r3, #8]
 800dc38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc3c:	4718      	bx	r3
 800dc3e:	4770      	bx	lr

0800dc40 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response>:
 800dc40:	b138      	cbz	r0, 800dc52 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response+0x12>
 800dc42:	b508      	push	{r3, lr}
 800dc44:	460b      	mov	r3, r1
 800dc46:	4618      	mov	r0, r3
 800dc48:	2101      	movs	r1, #1
 800dc4a:	f001 fb51 	bl	800f2f0 <ucdr_alignment>
 800dc4e:	3001      	adds	r0, #1
 800dc50:	bd08      	pop	{r3, pc}
 800dc52:	4770      	bx	lr

0800dc54 <_ImuCalibration_Response__cdr_serialize>:
 800dc54:	460a      	mov	r2, r1
 800dc56:	b118      	cbz	r0, 800dc60 <_ImuCalibration_Response__cdr_serialize+0xc>
 800dc58:	7801      	ldrb	r1, [r0, #0]
 800dc5a:	4610      	mov	r0, r2
 800dc5c:	f000 b834 	b.w	800dcc8 <ucdr_serialize_bool>
 800dc60:	4770      	bx	lr
 800dc62:	bf00      	nop

0800dc64 <_ImuCalibration_Response__get_serialized_size>:
 800dc64:	b130      	cbz	r0, 800dc74 <_ImuCalibration_Response__get_serialized_size+0x10>
 800dc66:	b508      	push	{r3, lr}
 800dc68:	2101      	movs	r1, #1
 800dc6a:	2000      	movs	r0, #0
 800dc6c:	f001 fb40 	bl	800f2f0 <ucdr_alignment>
 800dc70:	3001      	adds	r0, #1
 800dc72:	bd08      	pop	{r3, pc}
 800dc74:	4770      	bx	lr
 800dc76:	bf00      	nop

0800dc78 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800dc78:	4800      	ldr	r0, [pc, #0]	@ (800dc7c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4>)
 800dc7a:	4770      	bx	lr
 800dc7c:	20000344 	.word	0x20000344

0800dc80 <micro_ros_string_utilities_init>:
 800dc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc84:	b086      	sub	sp, #24
 800dc86:	460f      	mov	r7, r1
 800dc88:	4604      	mov	r4, r0
 800dc8a:	a801      	add	r0, sp, #4
 800dc8c:	f002 fd74 	bl	8010778 <rcutils_get_default_allocator>
 800dc90:	4638      	mov	r0, r7
 800dc92:	f7f2 facf 	bl	8000234 <strlen>
 800dc96:	f100 0801 	add.w	r8, r0, #1
 800dc9a:	9b01      	ldr	r3, [sp, #4]
 800dc9c:	9905      	ldr	r1, [sp, #20]
 800dc9e:	4605      	mov	r5, r0
 800dca0:	4640      	mov	r0, r8
 800dca2:	4798      	blx	r3
 800dca4:	4642      	mov	r2, r8
 800dca6:	4606      	mov	r6, r0
 800dca8:	2100      	movs	r1, #0
 800dcaa:	f00e fcf3 	bl	801c694 <memset>
 800dcae:	462a      	mov	r2, r5
 800dcb0:	4639      	mov	r1, r7
 800dcb2:	4630      	mov	r0, r6
 800dcb4:	f00e fdb7 	bl	801c826 <memcpy>
 800dcb8:	4620      	mov	r0, r4
 800dcba:	e9c4 6500 	strd	r6, r5, [r4]
 800dcbe:	f8c4 8008 	str.w	r8, [r4, #8]
 800dcc2:	b006      	add	sp, #24
 800dcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dcc8 <ucdr_serialize_bool>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	460d      	mov	r5, r1
 800dccc:	2101      	movs	r1, #1
 800dcce:	4604      	mov	r4, r0
 800dcd0:	f001 fac2 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800dcd4:	b148      	cbz	r0, 800dcea <ucdr_serialize_bool+0x22>
 800dcd6:	68a3      	ldr	r3, [r4, #8]
 800dcd8:	701d      	strb	r5, [r3, #0]
 800dcda:	68a2      	ldr	r2, [r4, #8]
 800dcdc:	6923      	ldr	r3, [r4, #16]
 800dcde:	2101      	movs	r1, #1
 800dce0:	440a      	add	r2, r1
 800dce2:	440b      	add	r3, r1
 800dce4:	60a2      	str	r2, [r4, #8]
 800dce6:	6123      	str	r3, [r4, #16]
 800dce8:	7561      	strb	r1, [r4, #21]
 800dcea:	7da0      	ldrb	r0, [r4, #22]
 800dcec:	f080 0001 	eor.w	r0, r0, #1
 800dcf0:	bd38      	pop	{r3, r4, r5, pc}
 800dcf2:	bf00      	nop

0800dcf4 <ucdr_deserialize_bool>:
 800dcf4:	b538      	push	{r3, r4, r5, lr}
 800dcf6:	460d      	mov	r5, r1
 800dcf8:	2101      	movs	r1, #1
 800dcfa:	4604      	mov	r4, r0
 800dcfc:	f001 faac 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800dd00:	b160      	cbz	r0, 800dd1c <ucdr_deserialize_bool+0x28>
 800dd02:	68a2      	ldr	r2, [r4, #8]
 800dd04:	6923      	ldr	r3, [r4, #16]
 800dd06:	f812 1b01 	ldrb.w	r1, [r2], #1
 800dd0a:	3900      	subs	r1, #0
 800dd0c:	bf18      	it	ne
 800dd0e:	2101      	movne	r1, #1
 800dd10:	7029      	strb	r1, [r5, #0]
 800dd12:	3301      	adds	r3, #1
 800dd14:	2101      	movs	r1, #1
 800dd16:	60a2      	str	r2, [r4, #8]
 800dd18:	6123      	str	r3, [r4, #16]
 800dd1a:	7561      	strb	r1, [r4, #21]
 800dd1c:	7da0      	ldrb	r0, [r4, #22]
 800dd1e:	f080 0001 	eor.w	r0, r0, #1
 800dd22:	bd38      	pop	{r3, r4, r5, pc}

0800dd24 <ucdr_serialize_uint8_t>:
 800dd24:	b538      	push	{r3, r4, r5, lr}
 800dd26:	460d      	mov	r5, r1
 800dd28:	2101      	movs	r1, #1
 800dd2a:	4604      	mov	r4, r0
 800dd2c:	f001 fa94 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800dd30:	b148      	cbz	r0, 800dd46 <ucdr_serialize_uint8_t+0x22>
 800dd32:	68a3      	ldr	r3, [r4, #8]
 800dd34:	701d      	strb	r5, [r3, #0]
 800dd36:	68a2      	ldr	r2, [r4, #8]
 800dd38:	6923      	ldr	r3, [r4, #16]
 800dd3a:	2101      	movs	r1, #1
 800dd3c:	440a      	add	r2, r1
 800dd3e:	440b      	add	r3, r1
 800dd40:	60a2      	str	r2, [r4, #8]
 800dd42:	6123      	str	r3, [r4, #16]
 800dd44:	7561      	strb	r1, [r4, #21]
 800dd46:	7da0      	ldrb	r0, [r4, #22]
 800dd48:	f080 0001 	eor.w	r0, r0, #1
 800dd4c:	bd38      	pop	{r3, r4, r5, pc}
 800dd4e:	bf00      	nop

0800dd50 <ucdr_deserialize_uint8_t>:
 800dd50:	b538      	push	{r3, r4, r5, lr}
 800dd52:	460d      	mov	r5, r1
 800dd54:	2101      	movs	r1, #1
 800dd56:	4604      	mov	r4, r0
 800dd58:	f001 fa7e 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800dd5c:	b150      	cbz	r0, 800dd74 <ucdr_deserialize_uint8_t+0x24>
 800dd5e:	68a3      	ldr	r3, [r4, #8]
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	702b      	strb	r3, [r5, #0]
 800dd64:	68a2      	ldr	r2, [r4, #8]
 800dd66:	6923      	ldr	r3, [r4, #16]
 800dd68:	2101      	movs	r1, #1
 800dd6a:	440a      	add	r2, r1
 800dd6c:	440b      	add	r3, r1
 800dd6e:	60a2      	str	r2, [r4, #8]
 800dd70:	6123      	str	r3, [r4, #16]
 800dd72:	7561      	strb	r1, [r4, #21]
 800dd74:	7da0      	ldrb	r0, [r4, #22]
 800dd76:	f080 0001 	eor.w	r0, r0, #1
 800dd7a:	bd38      	pop	{r3, r4, r5, pc}

0800dd7c <ucdr_serialize_uint16_t>:
 800dd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd80:	b082      	sub	sp, #8
 800dd82:	460b      	mov	r3, r1
 800dd84:	2102      	movs	r1, #2
 800dd86:	4604      	mov	r4, r0
 800dd88:	f8ad 3006 	strh.w	r3, [sp, #6]
 800dd8c:	f001 fab8 	bl	800f300 <ucdr_buffer_alignment>
 800dd90:	4601      	mov	r1, r0
 800dd92:	4620      	mov	r0, r4
 800dd94:	7d67      	ldrb	r7, [r4, #21]
 800dd96:	f001 faf7 	bl	800f388 <ucdr_advance_buffer>
 800dd9a:	2102      	movs	r1, #2
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	f001 fa4f 	bl	800f240 <ucdr_check_buffer_available_for>
 800dda2:	bb78      	cbnz	r0, 800de04 <ucdr_serialize_uint16_t+0x88>
 800dda4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dda8:	42ab      	cmp	r3, r5
 800ddaa:	d926      	bls.n	800ddfa <ucdr_serialize_uint16_t+0x7e>
 800ddac:	1b5e      	subs	r6, r3, r5
 800ddae:	60a3      	str	r3, [r4, #8]
 800ddb0:	6923      	ldr	r3, [r4, #16]
 800ddb2:	f1c6 0802 	rsb	r8, r6, #2
 800ddb6:	4433      	add	r3, r6
 800ddb8:	6123      	str	r3, [r4, #16]
 800ddba:	4641      	mov	r1, r8
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	f001 fa4b 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800ddc2:	2800      	cmp	r0, #0
 800ddc4:	d03b      	beq.n	800de3e <ucdr_serialize_uint16_t+0xc2>
 800ddc6:	7d23      	ldrb	r3, [r4, #20]
 800ddc8:	2b01      	cmp	r3, #1
 800ddca:	d04a      	beq.n	800de62 <ucdr_serialize_uint16_t+0xe6>
 800ddcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ddd0:	702b      	strb	r3, [r5, #0]
 800ddd2:	2e00      	cmp	r6, #0
 800ddd4:	d040      	beq.n	800de58 <ucdr_serialize_uint16_t+0xdc>
 800ddd6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ddda:	706b      	strb	r3, [r5, #1]
 800dddc:	6923      	ldr	r3, [r4, #16]
 800ddde:	68a2      	ldr	r2, [r4, #8]
 800dde0:	7da0      	ldrb	r0, [r4, #22]
 800dde2:	3302      	adds	r3, #2
 800dde4:	1b9e      	subs	r6, r3, r6
 800dde6:	4442      	add	r2, r8
 800dde8:	2302      	movs	r3, #2
 800ddea:	f080 0001 	eor.w	r0, r0, #1
 800ddee:	60a2      	str	r2, [r4, #8]
 800ddf0:	6126      	str	r6, [r4, #16]
 800ddf2:	7563      	strb	r3, [r4, #21]
 800ddf4:	b002      	add	sp, #8
 800ddf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddfa:	2102      	movs	r1, #2
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	f001 fa2b 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800de02:	b190      	cbz	r0, 800de2a <ucdr_serialize_uint16_t+0xae>
 800de04:	7d23      	ldrb	r3, [r4, #20]
 800de06:	2b01      	cmp	r3, #1
 800de08:	68a3      	ldr	r3, [r4, #8]
 800de0a:	d014      	beq.n	800de36 <ucdr_serialize_uint16_t+0xba>
 800de0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800de10:	701a      	strb	r2, [r3, #0]
 800de12:	68a3      	ldr	r3, [r4, #8]
 800de14:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800de18:	705a      	strb	r2, [r3, #1]
 800de1a:	68a2      	ldr	r2, [r4, #8]
 800de1c:	6923      	ldr	r3, [r4, #16]
 800de1e:	3202      	adds	r2, #2
 800de20:	3302      	adds	r3, #2
 800de22:	2102      	movs	r1, #2
 800de24:	60a2      	str	r2, [r4, #8]
 800de26:	6123      	str	r3, [r4, #16]
 800de28:	7561      	strb	r1, [r4, #21]
 800de2a:	7da0      	ldrb	r0, [r4, #22]
 800de2c:	f080 0001 	eor.w	r0, r0, #1
 800de30:	b002      	add	sp, #8
 800de32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de36:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800de3a:	801a      	strh	r2, [r3, #0]
 800de3c:	e7ed      	b.n	800de1a <ucdr_serialize_uint16_t+0x9e>
 800de3e:	68a2      	ldr	r2, [r4, #8]
 800de40:	6923      	ldr	r3, [r4, #16]
 800de42:	7da0      	ldrb	r0, [r4, #22]
 800de44:	7567      	strb	r7, [r4, #21]
 800de46:	1b92      	subs	r2, r2, r6
 800de48:	1b9b      	subs	r3, r3, r6
 800de4a:	f080 0001 	eor.w	r0, r0, #1
 800de4e:	60a2      	str	r2, [r4, #8]
 800de50:	6123      	str	r3, [r4, #16]
 800de52:	b002      	add	sp, #8
 800de54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de58:	68a3      	ldr	r3, [r4, #8]
 800de5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800de5e:	701a      	strb	r2, [r3, #0]
 800de60:	e7bc      	b.n	800dddc <ucdr_serialize_uint16_t+0x60>
 800de62:	4628      	mov	r0, r5
 800de64:	f10d 0506 	add.w	r5, sp, #6
 800de68:	4629      	mov	r1, r5
 800de6a:	4632      	mov	r2, r6
 800de6c:	f00e fcdb 	bl	801c826 <memcpy>
 800de70:	68a0      	ldr	r0, [r4, #8]
 800de72:	4642      	mov	r2, r8
 800de74:	19a9      	adds	r1, r5, r6
 800de76:	f00e fcd6 	bl	801c826 <memcpy>
 800de7a:	e7af      	b.n	800dddc <ucdr_serialize_uint16_t+0x60>

0800de7c <ucdr_serialize_endian_uint16_t>:
 800de7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de80:	b083      	sub	sp, #12
 800de82:	460d      	mov	r5, r1
 800de84:	2102      	movs	r1, #2
 800de86:	4604      	mov	r4, r0
 800de88:	f8ad 2006 	strh.w	r2, [sp, #6]
 800de8c:	f001 fa38 	bl	800f300 <ucdr_buffer_alignment>
 800de90:	4601      	mov	r1, r0
 800de92:	4620      	mov	r0, r4
 800de94:	f894 8015 	ldrb.w	r8, [r4, #21]
 800de98:	f001 fa76 	bl	800f388 <ucdr_advance_buffer>
 800de9c:	2102      	movs	r1, #2
 800de9e:	4620      	mov	r0, r4
 800dea0:	f001 f9ce 	bl	800f240 <ucdr_check_buffer_available_for>
 800dea4:	bb70      	cbnz	r0, 800df04 <ucdr_serialize_endian_uint16_t+0x88>
 800dea6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800deaa:	42be      	cmp	r6, r7
 800deac:	d925      	bls.n	800defa <ucdr_serialize_endian_uint16_t+0x7e>
 800deae:	6923      	ldr	r3, [r4, #16]
 800deb0:	60a6      	str	r6, [r4, #8]
 800deb2:	1bf6      	subs	r6, r6, r7
 800deb4:	4433      	add	r3, r6
 800deb6:	f1c6 0902 	rsb	r9, r6, #2
 800deba:	6123      	str	r3, [r4, #16]
 800debc:	4649      	mov	r1, r9
 800debe:	4620      	mov	r0, r4
 800dec0:	f001 f9ca 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d039      	beq.n	800df3c <ucdr_serialize_endian_uint16_t+0xc0>
 800dec8:	2d01      	cmp	r5, #1
 800deca:	d04a      	beq.n	800df62 <ucdr_serialize_endian_uint16_t+0xe6>
 800decc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ded0:	703b      	strb	r3, [r7, #0]
 800ded2:	2e00      	cmp	r6, #0
 800ded4:	d040      	beq.n	800df58 <ucdr_serialize_endian_uint16_t+0xdc>
 800ded6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800deda:	707b      	strb	r3, [r7, #1]
 800dedc:	6923      	ldr	r3, [r4, #16]
 800dede:	68a2      	ldr	r2, [r4, #8]
 800dee0:	7da0      	ldrb	r0, [r4, #22]
 800dee2:	3302      	adds	r3, #2
 800dee4:	444a      	add	r2, r9
 800dee6:	1b9b      	subs	r3, r3, r6
 800dee8:	2102      	movs	r1, #2
 800deea:	f080 0001 	eor.w	r0, r0, #1
 800deee:	60a2      	str	r2, [r4, #8]
 800def0:	6123      	str	r3, [r4, #16]
 800def2:	7561      	strb	r1, [r4, #21]
 800def4:	b003      	add	sp, #12
 800def6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800defa:	2102      	movs	r1, #2
 800defc:	4620      	mov	r0, r4
 800defe:	f001 f9ab 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800df02:	b188      	cbz	r0, 800df28 <ucdr_serialize_endian_uint16_t+0xac>
 800df04:	2d01      	cmp	r5, #1
 800df06:	68a3      	ldr	r3, [r4, #8]
 800df08:	d014      	beq.n	800df34 <ucdr_serialize_endian_uint16_t+0xb8>
 800df0a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800df0e:	701a      	strb	r2, [r3, #0]
 800df10:	68a3      	ldr	r3, [r4, #8]
 800df12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df16:	705a      	strb	r2, [r3, #1]
 800df18:	68a2      	ldr	r2, [r4, #8]
 800df1a:	6923      	ldr	r3, [r4, #16]
 800df1c:	3202      	adds	r2, #2
 800df1e:	3302      	adds	r3, #2
 800df20:	2102      	movs	r1, #2
 800df22:	60a2      	str	r2, [r4, #8]
 800df24:	6123      	str	r3, [r4, #16]
 800df26:	7561      	strb	r1, [r4, #21]
 800df28:	7da0      	ldrb	r0, [r4, #22]
 800df2a:	f080 0001 	eor.w	r0, r0, #1
 800df2e:	b003      	add	sp, #12
 800df30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df34:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800df38:	801a      	strh	r2, [r3, #0]
 800df3a:	e7ed      	b.n	800df18 <ucdr_serialize_endian_uint16_t+0x9c>
 800df3c:	68a2      	ldr	r2, [r4, #8]
 800df3e:	6923      	ldr	r3, [r4, #16]
 800df40:	7da0      	ldrb	r0, [r4, #22]
 800df42:	f884 8015 	strb.w	r8, [r4, #21]
 800df46:	1b92      	subs	r2, r2, r6
 800df48:	1b9b      	subs	r3, r3, r6
 800df4a:	f080 0001 	eor.w	r0, r0, #1
 800df4e:	60a2      	str	r2, [r4, #8]
 800df50:	6123      	str	r3, [r4, #16]
 800df52:	b003      	add	sp, #12
 800df54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df58:	68a3      	ldr	r3, [r4, #8]
 800df5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df5e:	701a      	strb	r2, [r3, #0]
 800df60:	e7bc      	b.n	800dedc <ucdr_serialize_endian_uint16_t+0x60>
 800df62:	f10d 0506 	add.w	r5, sp, #6
 800df66:	4629      	mov	r1, r5
 800df68:	4632      	mov	r2, r6
 800df6a:	4638      	mov	r0, r7
 800df6c:	f00e fc5b 	bl	801c826 <memcpy>
 800df70:	68a0      	ldr	r0, [r4, #8]
 800df72:	464a      	mov	r2, r9
 800df74:	19a9      	adds	r1, r5, r6
 800df76:	f00e fc56 	bl	801c826 <memcpy>
 800df7a:	e7af      	b.n	800dedc <ucdr_serialize_endian_uint16_t+0x60>

0800df7c <ucdr_deserialize_uint16_t>:
 800df7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df80:	460d      	mov	r5, r1
 800df82:	2102      	movs	r1, #2
 800df84:	4604      	mov	r4, r0
 800df86:	f001 f9bb 	bl	800f300 <ucdr_buffer_alignment>
 800df8a:	4601      	mov	r1, r0
 800df8c:	4620      	mov	r0, r4
 800df8e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800df92:	f001 f9f9 	bl	800f388 <ucdr_advance_buffer>
 800df96:	2102      	movs	r1, #2
 800df98:	4620      	mov	r0, r4
 800df9a:	f001 f951 	bl	800f240 <ucdr_check_buffer_available_for>
 800df9e:	bb60      	cbnz	r0, 800dffa <ucdr_deserialize_uint16_t+0x7e>
 800dfa0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800dfa4:	42be      	cmp	r6, r7
 800dfa6:	d923      	bls.n	800dff0 <ucdr_deserialize_uint16_t+0x74>
 800dfa8:	6923      	ldr	r3, [r4, #16]
 800dfaa:	60a6      	str	r6, [r4, #8]
 800dfac:	1bf6      	subs	r6, r6, r7
 800dfae:	4433      	add	r3, r6
 800dfb0:	f1c6 0902 	rsb	r9, r6, #2
 800dfb4:	6123      	str	r3, [r4, #16]
 800dfb6:	4649      	mov	r1, r9
 800dfb8:	4620      	mov	r0, r4
 800dfba:	f001 f94d 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	d034      	beq.n	800e02c <ucdr_deserialize_uint16_t+0xb0>
 800dfc2:	7d23      	ldrb	r3, [r4, #20]
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d042      	beq.n	800e04e <ucdr_deserialize_uint16_t+0xd2>
 800dfc8:	787b      	ldrb	r3, [r7, #1]
 800dfca:	702b      	strb	r3, [r5, #0]
 800dfcc:	2e00      	cmp	r6, #0
 800dfce:	d03a      	beq.n	800e046 <ucdr_deserialize_uint16_t+0xca>
 800dfd0:	783b      	ldrb	r3, [r7, #0]
 800dfd2:	706b      	strb	r3, [r5, #1]
 800dfd4:	6923      	ldr	r3, [r4, #16]
 800dfd6:	68a2      	ldr	r2, [r4, #8]
 800dfd8:	7da0      	ldrb	r0, [r4, #22]
 800dfda:	2102      	movs	r1, #2
 800dfdc:	3302      	adds	r3, #2
 800dfde:	444a      	add	r2, r9
 800dfe0:	1b9b      	subs	r3, r3, r6
 800dfe2:	7561      	strb	r1, [r4, #21]
 800dfe4:	60a2      	str	r2, [r4, #8]
 800dfe6:	6123      	str	r3, [r4, #16]
 800dfe8:	f080 0001 	eor.w	r0, r0, #1
 800dfec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dff0:	2102      	movs	r1, #2
 800dff2:	4620      	mov	r0, r4
 800dff4:	f001 f930 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800dff8:	b180      	cbz	r0, 800e01c <ucdr_deserialize_uint16_t+0xa0>
 800dffa:	7d23      	ldrb	r3, [r4, #20]
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	68a3      	ldr	r3, [r4, #8]
 800e000:	d011      	beq.n	800e026 <ucdr_deserialize_uint16_t+0xaa>
 800e002:	785b      	ldrb	r3, [r3, #1]
 800e004:	702b      	strb	r3, [r5, #0]
 800e006:	68a3      	ldr	r3, [r4, #8]
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	706b      	strb	r3, [r5, #1]
 800e00c:	68a2      	ldr	r2, [r4, #8]
 800e00e:	6923      	ldr	r3, [r4, #16]
 800e010:	3202      	adds	r2, #2
 800e012:	3302      	adds	r3, #2
 800e014:	2102      	movs	r1, #2
 800e016:	60a2      	str	r2, [r4, #8]
 800e018:	6123      	str	r3, [r4, #16]
 800e01a:	7561      	strb	r1, [r4, #21]
 800e01c:	7da0      	ldrb	r0, [r4, #22]
 800e01e:	f080 0001 	eor.w	r0, r0, #1
 800e022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e026:	881b      	ldrh	r3, [r3, #0]
 800e028:	802b      	strh	r3, [r5, #0]
 800e02a:	e7ef      	b.n	800e00c <ucdr_deserialize_uint16_t+0x90>
 800e02c:	68a2      	ldr	r2, [r4, #8]
 800e02e:	6923      	ldr	r3, [r4, #16]
 800e030:	7da0      	ldrb	r0, [r4, #22]
 800e032:	f884 8015 	strb.w	r8, [r4, #21]
 800e036:	1b92      	subs	r2, r2, r6
 800e038:	1b9b      	subs	r3, r3, r6
 800e03a:	60a2      	str	r2, [r4, #8]
 800e03c:	6123      	str	r3, [r4, #16]
 800e03e:	f080 0001 	eor.w	r0, r0, #1
 800e042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e046:	68a3      	ldr	r3, [r4, #8]
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	706b      	strb	r3, [r5, #1]
 800e04c:	e7c2      	b.n	800dfd4 <ucdr_deserialize_uint16_t+0x58>
 800e04e:	4639      	mov	r1, r7
 800e050:	4632      	mov	r2, r6
 800e052:	4628      	mov	r0, r5
 800e054:	f00e fbe7 	bl	801c826 <memcpy>
 800e058:	68a1      	ldr	r1, [r4, #8]
 800e05a:	464a      	mov	r2, r9
 800e05c:	19a8      	adds	r0, r5, r6
 800e05e:	f00e fbe2 	bl	801c826 <memcpy>
 800e062:	e7b7      	b.n	800dfd4 <ucdr_deserialize_uint16_t+0x58>

0800e064 <ucdr_deserialize_endian_uint16_t>:
 800e064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e068:	460e      	mov	r6, r1
 800e06a:	2102      	movs	r1, #2
 800e06c:	4604      	mov	r4, r0
 800e06e:	4615      	mov	r5, r2
 800e070:	f001 f946 	bl	800f300 <ucdr_buffer_alignment>
 800e074:	4601      	mov	r1, r0
 800e076:	4620      	mov	r0, r4
 800e078:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e07c:	f001 f984 	bl	800f388 <ucdr_advance_buffer>
 800e080:	2102      	movs	r1, #2
 800e082:	4620      	mov	r0, r4
 800e084:	f001 f8dc 	bl	800f240 <ucdr_check_buffer_available_for>
 800e088:	bb70      	cbnz	r0, 800e0e8 <ucdr_deserialize_endian_uint16_t+0x84>
 800e08a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800e08e:	4547      	cmp	r7, r8
 800e090:	d925      	bls.n	800e0de <ucdr_deserialize_endian_uint16_t+0x7a>
 800e092:	6923      	ldr	r3, [r4, #16]
 800e094:	60a7      	str	r7, [r4, #8]
 800e096:	eba7 0708 	sub.w	r7, r7, r8
 800e09a:	443b      	add	r3, r7
 800e09c:	f1c7 0a02 	rsb	sl, r7, #2
 800e0a0:	6123      	str	r3, [r4, #16]
 800e0a2:	4651      	mov	r1, sl
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	f001 f8d7 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d034      	beq.n	800e118 <ucdr_deserialize_endian_uint16_t+0xb4>
 800e0ae:	2e01      	cmp	r6, #1
 800e0b0:	d043      	beq.n	800e13a <ucdr_deserialize_endian_uint16_t+0xd6>
 800e0b2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e0b6:	702b      	strb	r3, [r5, #0]
 800e0b8:	2f00      	cmp	r7, #0
 800e0ba:	d03a      	beq.n	800e132 <ucdr_deserialize_endian_uint16_t+0xce>
 800e0bc:	f898 3000 	ldrb.w	r3, [r8]
 800e0c0:	706b      	strb	r3, [r5, #1]
 800e0c2:	6923      	ldr	r3, [r4, #16]
 800e0c4:	68a2      	ldr	r2, [r4, #8]
 800e0c6:	7da0      	ldrb	r0, [r4, #22]
 800e0c8:	2102      	movs	r1, #2
 800e0ca:	3302      	adds	r3, #2
 800e0cc:	4452      	add	r2, sl
 800e0ce:	1bdb      	subs	r3, r3, r7
 800e0d0:	7561      	strb	r1, [r4, #21]
 800e0d2:	60a2      	str	r2, [r4, #8]
 800e0d4:	6123      	str	r3, [r4, #16]
 800e0d6:	f080 0001 	eor.w	r0, r0, #1
 800e0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0de:	2102      	movs	r1, #2
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f001 f8b9 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800e0e6:	b178      	cbz	r0, 800e108 <ucdr_deserialize_endian_uint16_t+0xa4>
 800e0e8:	2e01      	cmp	r6, #1
 800e0ea:	68a3      	ldr	r3, [r4, #8]
 800e0ec:	d011      	beq.n	800e112 <ucdr_deserialize_endian_uint16_t+0xae>
 800e0ee:	785b      	ldrb	r3, [r3, #1]
 800e0f0:	702b      	strb	r3, [r5, #0]
 800e0f2:	68a3      	ldr	r3, [r4, #8]
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	706b      	strb	r3, [r5, #1]
 800e0f8:	68a2      	ldr	r2, [r4, #8]
 800e0fa:	6923      	ldr	r3, [r4, #16]
 800e0fc:	3202      	adds	r2, #2
 800e0fe:	3302      	adds	r3, #2
 800e100:	2102      	movs	r1, #2
 800e102:	60a2      	str	r2, [r4, #8]
 800e104:	6123      	str	r3, [r4, #16]
 800e106:	7561      	strb	r1, [r4, #21]
 800e108:	7da0      	ldrb	r0, [r4, #22]
 800e10a:	f080 0001 	eor.w	r0, r0, #1
 800e10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e112:	881b      	ldrh	r3, [r3, #0]
 800e114:	802b      	strh	r3, [r5, #0]
 800e116:	e7ef      	b.n	800e0f8 <ucdr_deserialize_endian_uint16_t+0x94>
 800e118:	68a2      	ldr	r2, [r4, #8]
 800e11a:	6923      	ldr	r3, [r4, #16]
 800e11c:	7da0      	ldrb	r0, [r4, #22]
 800e11e:	f884 9015 	strb.w	r9, [r4, #21]
 800e122:	1bd2      	subs	r2, r2, r7
 800e124:	1bdb      	subs	r3, r3, r7
 800e126:	60a2      	str	r2, [r4, #8]
 800e128:	6123      	str	r3, [r4, #16]
 800e12a:	f080 0001 	eor.w	r0, r0, #1
 800e12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e132:	68a3      	ldr	r3, [r4, #8]
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	706b      	strb	r3, [r5, #1]
 800e138:	e7c3      	b.n	800e0c2 <ucdr_deserialize_endian_uint16_t+0x5e>
 800e13a:	4641      	mov	r1, r8
 800e13c:	463a      	mov	r2, r7
 800e13e:	4628      	mov	r0, r5
 800e140:	f00e fb71 	bl	801c826 <memcpy>
 800e144:	68a1      	ldr	r1, [r4, #8]
 800e146:	4652      	mov	r2, sl
 800e148:	19e8      	adds	r0, r5, r7
 800e14a:	f00e fb6c 	bl	801c826 <memcpy>
 800e14e:	e7b8      	b.n	800e0c2 <ucdr_deserialize_endian_uint16_t+0x5e>

0800e150 <ucdr_serialize_uint32_t>:
 800e150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e154:	b082      	sub	sp, #8
 800e156:	4604      	mov	r4, r0
 800e158:	9101      	str	r1, [sp, #4]
 800e15a:	2104      	movs	r1, #4
 800e15c:	f001 f8d0 	bl	800f300 <ucdr_buffer_alignment>
 800e160:	4601      	mov	r1, r0
 800e162:	4620      	mov	r0, r4
 800e164:	7d67      	ldrb	r7, [r4, #21]
 800e166:	f001 f90f 	bl	800f388 <ucdr_advance_buffer>
 800e16a:	2104      	movs	r1, #4
 800e16c:	4620      	mov	r0, r4
 800e16e:	f001 f867 	bl	800f240 <ucdr_check_buffer_available_for>
 800e172:	2800      	cmp	r0, #0
 800e174:	d139      	bne.n	800e1ea <ucdr_serialize_uint32_t+0x9a>
 800e176:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e17a:	42ab      	cmp	r3, r5
 800e17c:	d930      	bls.n	800e1e0 <ucdr_serialize_uint32_t+0x90>
 800e17e:	1b5e      	subs	r6, r3, r5
 800e180:	60a3      	str	r3, [r4, #8]
 800e182:	6923      	ldr	r3, [r4, #16]
 800e184:	f1c6 0804 	rsb	r8, r6, #4
 800e188:	4433      	add	r3, r6
 800e18a:	6123      	str	r3, [r4, #16]
 800e18c:	4641      	mov	r1, r8
 800e18e:	4620      	mov	r0, r4
 800e190:	f001 f862 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800e194:	2800      	cmp	r0, #0
 800e196:	d04c      	beq.n	800e232 <ucdr_serialize_uint32_t+0xe2>
 800e198:	7d23      	ldrb	r3, [r4, #20]
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d063      	beq.n	800e266 <ucdr_serialize_uint32_t+0x116>
 800e19e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e1a2:	702b      	strb	r3, [r5, #0]
 800e1a4:	2e00      	cmp	r6, #0
 800e1a6:	d051      	beq.n	800e24c <ucdr_serialize_uint32_t+0xfc>
 800e1a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e1ac:	706b      	strb	r3, [r5, #1]
 800e1ae:	2e01      	cmp	r6, #1
 800e1b0:	d050      	beq.n	800e254 <ucdr_serialize_uint32_t+0x104>
 800e1b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e1b6:	70ab      	strb	r3, [r5, #2]
 800e1b8:	2e02      	cmp	r6, #2
 800e1ba:	d04f      	beq.n	800e25c <ucdr_serialize_uint32_t+0x10c>
 800e1bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e1c0:	70eb      	strb	r3, [r5, #3]
 800e1c2:	6923      	ldr	r3, [r4, #16]
 800e1c4:	68a2      	ldr	r2, [r4, #8]
 800e1c6:	7da0      	ldrb	r0, [r4, #22]
 800e1c8:	3304      	adds	r3, #4
 800e1ca:	1b9e      	subs	r6, r3, r6
 800e1cc:	4442      	add	r2, r8
 800e1ce:	2304      	movs	r3, #4
 800e1d0:	f080 0001 	eor.w	r0, r0, #1
 800e1d4:	60a2      	str	r2, [r4, #8]
 800e1d6:	6126      	str	r6, [r4, #16]
 800e1d8:	7563      	strb	r3, [r4, #21]
 800e1da:	b002      	add	sp, #8
 800e1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1e0:	2104      	movs	r1, #4
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	f001 f838 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800e1e8:	b1d0      	cbz	r0, 800e220 <ucdr_serialize_uint32_t+0xd0>
 800e1ea:	7d23      	ldrb	r3, [r4, #20]
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	68a3      	ldr	r3, [r4, #8]
 800e1f0:	d01c      	beq.n	800e22c <ucdr_serialize_uint32_t+0xdc>
 800e1f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e1f6:	701a      	strb	r2, [r3, #0]
 800e1f8:	68a3      	ldr	r3, [r4, #8]
 800e1fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e1fe:	705a      	strb	r2, [r3, #1]
 800e200:	68a3      	ldr	r3, [r4, #8]
 800e202:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e206:	709a      	strb	r2, [r3, #2]
 800e208:	68a3      	ldr	r3, [r4, #8]
 800e20a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e20e:	70da      	strb	r2, [r3, #3]
 800e210:	68a2      	ldr	r2, [r4, #8]
 800e212:	6923      	ldr	r3, [r4, #16]
 800e214:	3204      	adds	r2, #4
 800e216:	3304      	adds	r3, #4
 800e218:	2104      	movs	r1, #4
 800e21a:	60a2      	str	r2, [r4, #8]
 800e21c:	6123      	str	r3, [r4, #16]
 800e21e:	7561      	strb	r1, [r4, #21]
 800e220:	7da0      	ldrb	r0, [r4, #22]
 800e222:	f080 0001 	eor.w	r0, r0, #1
 800e226:	b002      	add	sp, #8
 800e228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e22c:	9a01      	ldr	r2, [sp, #4]
 800e22e:	601a      	str	r2, [r3, #0]
 800e230:	e7ee      	b.n	800e210 <ucdr_serialize_uint32_t+0xc0>
 800e232:	68a2      	ldr	r2, [r4, #8]
 800e234:	6923      	ldr	r3, [r4, #16]
 800e236:	7da0      	ldrb	r0, [r4, #22]
 800e238:	7567      	strb	r7, [r4, #21]
 800e23a:	1b92      	subs	r2, r2, r6
 800e23c:	1b9b      	subs	r3, r3, r6
 800e23e:	f080 0001 	eor.w	r0, r0, #1
 800e242:	60a2      	str	r2, [r4, #8]
 800e244:	6123      	str	r3, [r4, #16]
 800e246:	b002      	add	sp, #8
 800e248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e24c:	68a3      	ldr	r3, [r4, #8]
 800e24e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e252:	701a      	strb	r2, [r3, #0]
 800e254:	68a3      	ldr	r3, [r4, #8]
 800e256:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e25a:	701a      	strb	r2, [r3, #0]
 800e25c:	68a3      	ldr	r3, [r4, #8]
 800e25e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e262:	701a      	strb	r2, [r3, #0]
 800e264:	e7ad      	b.n	800e1c2 <ucdr_serialize_uint32_t+0x72>
 800e266:	4628      	mov	r0, r5
 800e268:	ad01      	add	r5, sp, #4
 800e26a:	4629      	mov	r1, r5
 800e26c:	4632      	mov	r2, r6
 800e26e:	f00e fada 	bl	801c826 <memcpy>
 800e272:	68a0      	ldr	r0, [r4, #8]
 800e274:	4642      	mov	r2, r8
 800e276:	19a9      	adds	r1, r5, r6
 800e278:	f00e fad5 	bl	801c826 <memcpy>
 800e27c:	e7a1      	b.n	800e1c2 <ucdr_serialize_uint32_t+0x72>
 800e27e:	bf00      	nop

0800e280 <ucdr_serialize_endian_uint32_t>:
 800e280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e284:	b083      	sub	sp, #12
 800e286:	460d      	mov	r5, r1
 800e288:	2104      	movs	r1, #4
 800e28a:	4604      	mov	r4, r0
 800e28c:	9201      	str	r2, [sp, #4]
 800e28e:	f001 f837 	bl	800f300 <ucdr_buffer_alignment>
 800e292:	4601      	mov	r1, r0
 800e294:	4620      	mov	r0, r4
 800e296:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e29a:	f001 f875 	bl	800f388 <ucdr_advance_buffer>
 800e29e:	2104      	movs	r1, #4
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	f000 ffcd 	bl	800f240 <ucdr_check_buffer_available_for>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d138      	bne.n	800e31c <ucdr_serialize_endian_uint32_t+0x9c>
 800e2aa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e2ae:	42b7      	cmp	r7, r6
 800e2b0:	d92f      	bls.n	800e312 <ucdr_serialize_endian_uint32_t+0x92>
 800e2b2:	6923      	ldr	r3, [r4, #16]
 800e2b4:	60a7      	str	r7, [r4, #8]
 800e2b6:	1bbf      	subs	r7, r7, r6
 800e2b8:	443b      	add	r3, r7
 800e2ba:	f1c7 0904 	rsb	r9, r7, #4
 800e2be:	6123      	str	r3, [r4, #16]
 800e2c0:	4649      	mov	r1, r9
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	f000 ffc8 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800e2c8:	2800      	cmp	r0, #0
 800e2ca:	d04a      	beq.n	800e362 <ucdr_serialize_endian_uint32_t+0xe2>
 800e2cc:	2d01      	cmp	r5, #1
 800e2ce:	d063      	beq.n	800e398 <ucdr_serialize_endian_uint32_t+0x118>
 800e2d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e2d4:	7033      	strb	r3, [r6, #0]
 800e2d6:	2f00      	cmp	r7, #0
 800e2d8:	d051      	beq.n	800e37e <ucdr_serialize_endian_uint32_t+0xfe>
 800e2da:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e2de:	7073      	strb	r3, [r6, #1]
 800e2e0:	2f01      	cmp	r7, #1
 800e2e2:	d050      	beq.n	800e386 <ucdr_serialize_endian_uint32_t+0x106>
 800e2e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e2e8:	70b3      	strb	r3, [r6, #2]
 800e2ea:	2f02      	cmp	r7, #2
 800e2ec:	d04f      	beq.n	800e38e <ucdr_serialize_endian_uint32_t+0x10e>
 800e2ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e2f2:	70f3      	strb	r3, [r6, #3]
 800e2f4:	6923      	ldr	r3, [r4, #16]
 800e2f6:	68a2      	ldr	r2, [r4, #8]
 800e2f8:	7da0      	ldrb	r0, [r4, #22]
 800e2fa:	3304      	adds	r3, #4
 800e2fc:	444a      	add	r2, r9
 800e2fe:	1bdb      	subs	r3, r3, r7
 800e300:	2104      	movs	r1, #4
 800e302:	f080 0001 	eor.w	r0, r0, #1
 800e306:	60a2      	str	r2, [r4, #8]
 800e308:	6123      	str	r3, [r4, #16]
 800e30a:	7561      	strb	r1, [r4, #21]
 800e30c:	b003      	add	sp, #12
 800e30e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e312:	2104      	movs	r1, #4
 800e314:	4620      	mov	r0, r4
 800e316:	f000 ff9f 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800e31a:	b1c8      	cbz	r0, 800e350 <ucdr_serialize_endian_uint32_t+0xd0>
 800e31c:	2d01      	cmp	r5, #1
 800e31e:	68a3      	ldr	r3, [r4, #8]
 800e320:	d01c      	beq.n	800e35c <ucdr_serialize_endian_uint32_t+0xdc>
 800e322:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e326:	701a      	strb	r2, [r3, #0]
 800e328:	68a3      	ldr	r3, [r4, #8]
 800e32a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e32e:	705a      	strb	r2, [r3, #1]
 800e330:	68a3      	ldr	r3, [r4, #8]
 800e332:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e336:	709a      	strb	r2, [r3, #2]
 800e338:	68a3      	ldr	r3, [r4, #8]
 800e33a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e33e:	70da      	strb	r2, [r3, #3]
 800e340:	68a2      	ldr	r2, [r4, #8]
 800e342:	6923      	ldr	r3, [r4, #16]
 800e344:	3204      	adds	r2, #4
 800e346:	3304      	adds	r3, #4
 800e348:	2104      	movs	r1, #4
 800e34a:	60a2      	str	r2, [r4, #8]
 800e34c:	6123      	str	r3, [r4, #16]
 800e34e:	7561      	strb	r1, [r4, #21]
 800e350:	7da0      	ldrb	r0, [r4, #22]
 800e352:	f080 0001 	eor.w	r0, r0, #1
 800e356:	b003      	add	sp, #12
 800e358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e35c:	9a01      	ldr	r2, [sp, #4]
 800e35e:	601a      	str	r2, [r3, #0]
 800e360:	e7ee      	b.n	800e340 <ucdr_serialize_endian_uint32_t+0xc0>
 800e362:	68a2      	ldr	r2, [r4, #8]
 800e364:	6923      	ldr	r3, [r4, #16]
 800e366:	7da0      	ldrb	r0, [r4, #22]
 800e368:	f884 8015 	strb.w	r8, [r4, #21]
 800e36c:	1bd2      	subs	r2, r2, r7
 800e36e:	1bdb      	subs	r3, r3, r7
 800e370:	f080 0001 	eor.w	r0, r0, #1
 800e374:	60a2      	str	r2, [r4, #8]
 800e376:	6123      	str	r3, [r4, #16]
 800e378:	b003      	add	sp, #12
 800e37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e37e:	68a3      	ldr	r3, [r4, #8]
 800e380:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e384:	701a      	strb	r2, [r3, #0]
 800e386:	68a3      	ldr	r3, [r4, #8]
 800e388:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e38c:	701a      	strb	r2, [r3, #0]
 800e38e:	68a3      	ldr	r3, [r4, #8]
 800e390:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e394:	701a      	strb	r2, [r3, #0]
 800e396:	e7ad      	b.n	800e2f4 <ucdr_serialize_endian_uint32_t+0x74>
 800e398:	ad01      	add	r5, sp, #4
 800e39a:	4629      	mov	r1, r5
 800e39c:	463a      	mov	r2, r7
 800e39e:	4630      	mov	r0, r6
 800e3a0:	f00e fa41 	bl	801c826 <memcpy>
 800e3a4:	68a0      	ldr	r0, [r4, #8]
 800e3a6:	464a      	mov	r2, r9
 800e3a8:	19e9      	adds	r1, r5, r7
 800e3aa:	f00e fa3c 	bl	801c826 <memcpy>
 800e3ae:	e7a1      	b.n	800e2f4 <ucdr_serialize_endian_uint32_t+0x74>

0800e3b0 <ucdr_deserialize_uint32_t>:
 800e3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3b4:	460d      	mov	r5, r1
 800e3b6:	2104      	movs	r1, #4
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	f000 ffa1 	bl	800f300 <ucdr_buffer_alignment>
 800e3be:	4601      	mov	r1, r0
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e3c6:	f000 ffdf 	bl	800f388 <ucdr_advance_buffer>
 800e3ca:	2104      	movs	r1, #4
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f000 ff37 	bl	800f240 <ucdr_check_buffer_available_for>
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	d138      	bne.n	800e448 <ucdr_deserialize_uint32_t+0x98>
 800e3d6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e3da:	42b7      	cmp	r7, r6
 800e3dc:	d92f      	bls.n	800e43e <ucdr_deserialize_uint32_t+0x8e>
 800e3de:	6923      	ldr	r3, [r4, #16]
 800e3e0:	60a7      	str	r7, [r4, #8]
 800e3e2:	1bbf      	subs	r7, r7, r6
 800e3e4:	443b      	add	r3, r7
 800e3e6:	f1c7 0904 	rsb	r9, r7, #4
 800e3ea:	6123      	str	r3, [r4, #16]
 800e3ec:	4649      	mov	r1, r9
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	f000 ff32 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d046      	beq.n	800e486 <ucdr_deserialize_uint32_t+0xd6>
 800e3f8:	7d23      	ldrb	r3, [r4, #20]
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d05c      	beq.n	800e4b8 <ucdr_deserialize_uint32_t+0x108>
 800e3fe:	78f3      	ldrb	r3, [r6, #3]
 800e400:	702b      	strb	r3, [r5, #0]
 800e402:	2f00      	cmp	r7, #0
 800e404:	d04c      	beq.n	800e4a0 <ucdr_deserialize_uint32_t+0xf0>
 800e406:	78b3      	ldrb	r3, [r6, #2]
 800e408:	706b      	strb	r3, [r5, #1]
 800e40a:	2f01      	cmp	r7, #1
 800e40c:	f105 0302 	add.w	r3, r5, #2
 800e410:	d04a      	beq.n	800e4a8 <ucdr_deserialize_uint32_t+0xf8>
 800e412:	7873      	ldrb	r3, [r6, #1]
 800e414:	70ab      	strb	r3, [r5, #2]
 800e416:	2f02      	cmp	r7, #2
 800e418:	f105 0303 	add.w	r3, r5, #3
 800e41c:	d048      	beq.n	800e4b0 <ucdr_deserialize_uint32_t+0x100>
 800e41e:	7833      	ldrb	r3, [r6, #0]
 800e420:	70eb      	strb	r3, [r5, #3]
 800e422:	6923      	ldr	r3, [r4, #16]
 800e424:	68a2      	ldr	r2, [r4, #8]
 800e426:	7da0      	ldrb	r0, [r4, #22]
 800e428:	2104      	movs	r1, #4
 800e42a:	3304      	adds	r3, #4
 800e42c:	444a      	add	r2, r9
 800e42e:	1bdb      	subs	r3, r3, r7
 800e430:	7561      	strb	r1, [r4, #21]
 800e432:	60a2      	str	r2, [r4, #8]
 800e434:	6123      	str	r3, [r4, #16]
 800e436:	f080 0001 	eor.w	r0, r0, #1
 800e43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e43e:	2104      	movs	r1, #4
 800e440:	4620      	mov	r0, r4
 800e442:	f000 ff09 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800e446:	b1b0      	cbz	r0, 800e476 <ucdr_deserialize_uint32_t+0xc6>
 800e448:	7d23      	ldrb	r3, [r4, #20]
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	68a3      	ldr	r3, [r4, #8]
 800e44e:	d017      	beq.n	800e480 <ucdr_deserialize_uint32_t+0xd0>
 800e450:	78db      	ldrb	r3, [r3, #3]
 800e452:	702b      	strb	r3, [r5, #0]
 800e454:	68a3      	ldr	r3, [r4, #8]
 800e456:	789b      	ldrb	r3, [r3, #2]
 800e458:	706b      	strb	r3, [r5, #1]
 800e45a:	68a3      	ldr	r3, [r4, #8]
 800e45c:	785b      	ldrb	r3, [r3, #1]
 800e45e:	70ab      	strb	r3, [r5, #2]
 800e460:	68a3      	ldr	r3, [r4, #8]
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	70eb      	strb	r3, [r5, #3]
 800e466:	68a2      	ldr	r2, [r4, #8]
 800e468:	6923      	ldr	r3, [r4, #16]
 800e46a:	3204      	adds	r2, #4
 800e46c:	3304      	adds	r3, #4
 800e46e:	2104      	movs	r1, #4
 800e470:	60a2      	str	r2, [r4, #8]
 800e472:	6123      	str	r3, [r4, #16]
 800e474:	7561      	strb	r1, [r4, #21]
 800e476:	7da0      	ldrb	r0, [r4, #22]
 800e478:	f080 0001 	eor.w	r0, r0, #1
 800e47c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	602b      	str	r3, [r5, #0]
 800e484:	e7ef      	b.n	800e466 <ucdr_deserialize_uint32_t+0xb6>
 800e486:	68a2      	ldr	r2, [r4, #8]
 800e488:	6923      	ldr	r3, [r4, #16]
 800e48a:	7da0      	ldrb	r0, [r4, #22]
 800e48c:	f884 8015 	strb.w	r8, [r4, #21]
 800e490:	1bd2      	subs	r2, r2, r7
 800e492:	1bdb      	subs	r3, r3, r7
 800e494:	60a2      	str	r2, [r4, #8]
 800e496:	6123      	str	r3, [r4, #16]
 800e498:	f080 0001 	eor.w	r0, r0, #1
 800e49c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4a0:	68a3      	ldr	r3, [r4, #8]
 800e4a2:	789b      	ldrb	r3, [r3, #2]
 800e4a4:	706b      	strb	r3, [r5, #1]
 800e4a6:	1cab      	adds	r3, r5, #2
 800e4a8:	68a2      	ldr	r2, [r4, #8]
 800e4aa:	7852      	ldrb	r2, [r2, #1]
 800e4ac:	f803 2b01 	strb.w	r2, [r3], #1
 800e4b0:	68a2      	ldr	r2, [r4, #8]
 800e4b2:	7812      	ldrb	r2, [r2, #0]
 800e4b4:	701a      	strb	r2, [r3, #0]
 800e4b6:	e7b4      	b.n	800e422 <ucdr_deserialize_uint32_t+0x72>
 800e4b8:	4631      	mov	r1, r6
 800e4ba:	463a      	mov	r2, r7
 800e4bc:	4628      	mov	r0, r5
 800e4be:	f00e f9b2 	bl	801c826 <memcpy>
 800e4c2:	68a1      	ldr	r1, [r4, #8]
 800e4c4:	464a      	mov	r2, r9
 800e4c6:	19e8      	adds	r0, r5, r7
 800e4c8:	f00e f9ad 	bl	801c826 <memcpy>
 800e4cc:	e7a9      	b.n	800e422 <ucdr_deserialize_uint32_t+0x72>
 800e4ce:	bf00      	nop

0800e4d0 <ucdr_deserialize_endian_uint32_t>:
 800e4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d4:	460e      	mov	r6, r1
 800e4d6:	2104      	movs	r1, #4
 800e4d8:	4604      	mov	r4, r0
 800e4da:	4615      	mov	r5, r2
 800e4dc:	f000 ff10 	bl	800f300 <ucdr_buffer_alignment>
 800e4e0:	4601      	mov	r1, r0
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e4e8:	f000 ff4e 	bl	800f388 <ucdr_advance_buffer>
 800e4ec:	2104      	movs	r1, #4
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	f000 fea6 	bl	800f240 <ucdr_check_buffer_available_for>
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	d13c      	bne.n	800e572 <ucdr_deserialize_endian_uint32_t+0xa2>
 800e4f8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e4fc:	42bb      	cmp	r3, r7
 800e4fe:	d933      	bls.n	800e568 <ucdr_deserialize_endian_uint32_t+0x98>
 800e500:	eba3 0807 	sub.w	r8, r3, r7
 800e504:	60a3      	str	r3, [r4, #8]
 800e506:	6923      	ldr	r3, [r4, #16]
 800e508:	f1c8 0a04 	rsb	sl, r8, #4
 800e50c:	4443      	add	r3, r8
 800e50e:	6123      	str	r3, [r4, #16]
 800e510:	4651      	mov	r1, sl
 800e512:	4620      	mov	r0, r4
 800e514:	f000 fea0 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800e518:	2800      	cmp	r0, #0
 800e51a:	d048      	beq.n	800e5ae <ucdr_deserialize_endian_uint32_t+0xde>
 800e51c:	2e01      	cmp	r6, #1
 800e51e:	d061      	beq.n	800e5e4 <ucdr_deserialize_endian_uint32_t+0x114>
 800e520:	78fb      	ldrb	r3, [r7, #3]
 800e522:	702b      	strb	r3, [r5, #0]
 800e524:	f1b8 0f00 	cmp.w	r8, #0
 800e528:	d050      	beq.n	800e5cc <ucdr_deserialize_endian_uint32_t+0xfc>
 800e52a:	78bb      	ldrb	r3, [r7, #2]
 800e52c:	706b      	strb	r3, [r5, #1]
 800e52e:	f1b8 0f01 	cmp.w	r8, #1
 800e532:	f105 0302 	add.w	r3, r5, #2
 800e536:	d04d      	beq.n	800e5d4 <ucdr_deserialize_endian_uint32_t+0x104>
 800e538:	787b      	ldrb	r3, [r7, #1]
 800e53a:	70ab      	strb	r3, [r5, #2]
 800e53c:	f1b8 0f02 	cmp.w	r8, #2
 800e540:	f105 0303 	add.w	r3, r5, #3
 800e544:	d04a      	beq.n	800e5dc <ucdr_deserialize_endian_uint32_t+0x10c>
 800e546:	783b      	ldrb	r3, [r7, #0]
 800e548:	70eb      	strb	r3, [r5, #3]
 800e54a:	6923      	ldr	r3, [r4, #16]
 800e54c:	68a2      	ldr	r2, [r4, #8]
 800e54e:	7da0      	ldrb	r0, [r4, #22]
 800e550:	2104      	movs	r1, #4
 800e552:	3304      	adds	r3, #4
 800e554:	4452      	add	r2, sl
 800e556:	eba3 0308 	sub.w	r3, r3, r8
 800e55a:	7561      	strb	r1, [r4, #21]
 800e55c:	60a2      	str	r2, [r4, #8]
 800e55e:	6123      	str	r3, [r4, #16]
 800e560:	f080 0001 	eor.w	r0, r0, #1
 800e564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e568:	2104      	movs	r1, #4
 800e56a:	4620      	mov	r0, r4
 800e56c:	f000 fe74 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800e570:	b1a8      	cbz	r0, 800e59e <ucdr_deserialize_endian_uint32_t+0xce>
 800e572:	2e01      	cmp	r6, #1
 800e574:	68a3      	ldr	r3, [r4, #8]
 800e576:	d017      	beq.n	800e5a8 <ucdr_deserialize_endian_uint32_t+0xd8>
 800e578:	78db      	ldrb	r3, [r3, #3]
 800e57a:	702b      	strb	r3, [r5, #0]
 800e57c:	68a3      	ldr	r3, [r4, #8]
 800e57e:	789b      	ldrb	r3, [r3, #2]
 800e580:	706b      	strb	r3, [r5, #1]
 800e582:	68a3      	ldr	r3, [r4, #8]
 800e584:	785b      	ldrb	r3, [r3, #1]
 800e586:	70ab      	strb	r3, [r5, #2]
 800e588:	68a3      	ldr	r3, [r4, #8]
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	70eb      	strb	r3, [r5, #3]
 800e58e:	68a2      	ldr	r2, [r4, #8]
 800e590:	6923      	ldr	r3, [r4, #16]
 800e592:	3204      	adds	r2, #4
 800e594:	3304      	adds	r3, #4
 800e596:	2104      	movs	r1, #4
 800e598:	60a2      	str	r2, [r4, #8]
 800e59a:	6123      	str	r3, [r4, #16]
 800e59c:	7561      	strb	r1, [r4, #21]
 800e59e:	7da0      	ldrb	r0, [r4, #22]
 800e5a0:	f080 0001 	eor.w	r0, r0, #1
 800e5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	602b      	str	r3, [r5, #0]
 800e5ac:	e7ef      	b.n	800e58e <ucdr_deserialize_endian_uint32_t+0xbe>
 800e5ae:	68a2      	ldr	r2, [r4, #8]
 800e5b0:	6923      	ldr	r3, [r4, #16]
 800e5b2:	7da0      	ldrb	r0, [r4, #22]
 800e5b4:	f884 9015 	strb.w	r9, [r4, #21]
 800e5b8:	eba2 0208 	sub.w	r2, r2, r8
 800e5bc:	eba3 0308 	sub.w	r3, r3, r8
 800e5c0:	60a2      	str	r2, [r4, #8]
 800e5c2:	6123      	str	r3, [r4, #16]
 800e5c4:	f080 0001 	eor.w	r0, r0, #1
 800e5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5cc:	68a3      	ldr	r3, [r4, #8]
 800e5ce:	789b      	ldrb	r3, [r3, #2]
 800e5d0:	706b      	strb	r3, [r5, #1]
 800e5d2:	1cab      	adds	r3, r5, #2
 800e5d4:	68a2      	ldr	r2, [r4, #8]
 800e5d6:	7852      	ldrb	r2, [r2, #1]
 800e5d8:	f803 2b01 	strb.w	r2, [r3], #1
 800e5dc:	68a2      	ldr	r2, [r4, #8]
 800e5de:	7812      	ldrb	r2, [r2, #0]
 800e5e0:	701a      	strb	r2, [r3, #0]
 800e5e2:	e7b2      	b.n	800e54a <ucdr_deserialize_endian_uint32_t+0x7a>
 800e5e4:	4639      	mov	r1, r7
 800e5e6:	4642      	mov	r2, r8
 800e5e8:	4628      	mov	r0, r5
 800e5ea:	f00e f91c 	bl	801c826 <memcpy>
 800e5ee:	68a1      	ldr	r1, [r4, #8]
 800e5f0:	4652      	mov	r2, sl
 800e5f2:	eb05 0008 	add.w	r0, r5, r8
 800e5f6:	f00e f916 	bl	801c826 <memcpy>
 800e5fa:	e7a6      	b.n	800e54a <ucdr_deserialize_endian_uint32_t+0x7a>

0800e5fc <ucdr_serialize_uint64_t>:
 800e5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e600:	2108      	movs	r1, #8
 800e602:	b082      	sub	sp, #8
 800e604:	4604      	mov	r4, r0
 800e606:	e9cd 2300 	strd	r2, r3, [sp]
 800e60a:	f000 fe79 	bl	800f300 <ucdr_buffer_alignment>
 800e60e:	4601      	mov	r1, r0
 800e610:	4620      	mov	r0, r4
 800e612:	7d67      	ldrb	r7, [r4, #21]
 800e614:	f000 feb8 	bl	800f388 <ucdr_advance_buffer>
 800e618:	2108      	movs	r1, #8
 800e61a:	4620      	mov	r0, r4
 800e61c:	f000 fe10 	bl	800f240 <ucdr_check_buffer_available_for>
 800e620:	2800      	cmp	r0, #0
 800e622:	d14e      	bne.n	800e6c2 <ucdr_serialize_uint64_t+0xc6>
 800e624:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e628:	42ab      	cmp	r3, r5
 800e62a:	d945      	bls.n	800e6b8 <ucdr_serialize_uint64_t+0xbc>
 800e62c:	1b5e      	subs	r6, r3, r5
 800e62e:	60a3      	str	r3, [r4, #8]
 800e630:	6923      	ldr	r3, [r4, #16]
 800e632:	f1c6 0808 	rsb	r8, r6, #8
 800e636:	4433      	add	r3, r6
 800e638:	6123      	str	r3, [r4, #16]
 800e63a:	4641      	mov	r1, r8
 800e63c:	4620      	mov	r0, r4
 800e63e:	f000 fe0b 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800e642:	2800      	cmp	r0, #0
 800e644:	d074      	beq.n	800e730 <ucdr_serialize_uint64_t+0x134>
 800e646:	7d23      	ldrb	r3, [r4, #20]
 800e648:	2b01      	cmp	r3, #1
 800e64a:	f000 809b 	beq.w	800e784 <ucdr_serialize_uint64_t+0x188>
 800e64e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e652:	702b      	strb	r3, [r5, #0]
 800e654:	2e00      	cmp	r6, #0
 800e656:	d078      	beq.n	800e74a <ucdr_serialize_uint64_t+0x14e>
 800e658:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e65c:	706b      	strb	r3, [r5, #1]
 800e65e:	2e01      	cmp	r6, #1
 800e660:	d077      	beq.n	800e752 <ucdr_serialize_uint64_t+0x156>
 800e662:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e666:	70ab      	strb	r3, [r5, #2]
 800e668:	2e02      	cmp	r6, #2
 800e66a:	d076      	beq.n	800e75a <ucdr_serialize_uint64_t+0x15e>
 800e66c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e670:	70eb      	strb	r3, [r5, #3]
 800e672:	2e03      	cmp	r6, #3
 800e674:	d075      	beq.n	800e762 <ucdr_serialize_uint64_t+0x166>
 800e676:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e67a:	712b      	strb	r3, [r5, #4]
 800e67c:	2e04      	cmp	r6, #4
 800e67e:	d074      	beq.n	800e76a <ucdr_serialize_uint64_t+0x16e>
 800e680:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e684:	716b      	strb	r3, [r5, #5]
 800e686:	2e05      	cmp	r6, #5
 800e688:	d073      	beq.n	800e772 <ucdr_serialize_uint64_t+0x176>
 800e68a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e68e:	71ab      	strb	r3, [r5, #6]
 800e690:	2e06      	cmp	r6, #6
 800e692:	d072      	beq.n	800e77a <ucdr_serialize_uint64_t+0x17e>
 800e694:	f89d 3000 	ldrb.w	r3, [sp]
 800e698:	71eb      	strb	r3, [r5, #7]
 800e69a:	6923      	ldr	r3, [r4, #16]
 800e69c:	68a2      	ldr	r2, [r4, #8]
 800e69e:	7da0      	ldrb	r0, [r4, #22]
 800e6a0:	3308      	adds	r3, #8
 800e6a2:	1b9e      	subs	r6, r3, r6
 800e6a4:	4442      	add	r2, r8
 800e6a6:	2308      	movs	r3, #8
 800e6a8:	f080 0001 	eor.w	r0, r0, #1
 800e6ac:	60a2      	str	r2, [r4, #8]
 800e6ae:	6126      	str	r6, [r4, #16]
 800e6b0:	7563      	strb	r3, [r4, #21]
 800e6b2:	b002      	add	sp, #8
 800e6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6b8:	2108      	movs	r1, #8
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	f000 fdcc 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800e6c0:	b350      	cbz	r0, 800e718 <ucdr_serialize_uint64_t+0x11c>
 800e6c2:	7d23      	ldrb	r3, [r4, #20]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d02d      	beq.n	800e724 <ucdr_serialize_uint64_t+0x128>
 800e6c8:	68a3      	ldr	r3, [r4, #8]
 800e6ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e6ce:	701a      	strb	r2, [r3, #0]
 800e6d0:	68a3      	ldr	r3, [r4, #8]
 800e6d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e6d6:	705a      	strb	r2, [r3, #1]
 800e6d8:	68a3      	ldr	r3, [r4, #8]
 800e6da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e6de:	709a      	strb	r2, [r3, #2]
 800e6e0:	68a3      	ldr	r3, [r4, #8]
 800e6e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e6e6:	70da      	strb	r2, [r3, #3]
 800e6e8:	68a3      	ldr	r3, [r4, #8]
 800e6ea:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e6ee:	711a      	strb	r2, [r3, #4]
 800e6f0:	68a3      	ldr	r3, [r4, #8]
 800e6f2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e6f6:	715a      	strb	r2, [r3, #5]
 800e6f8:	68a3      	ldr	r3, [r4, #8]
 800e6fa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e6fe:	719a      	strb	r2, [r3, #6]
 800e700:	68a3      	ldr	r3, [r4, #8]
 800e702:	f89d 2000 	ldrb.w	r2, [sp]
 800e706:	71da      	strb	r2, [r3, #7]
 800e708:	68a2      	ldr	r2, [r4, #8]
 800e70a:	6923      	ldr	r3, [r4, #16]
 800e70c:	3208      	adds	r2, #8
 800e70e:	3308      	adds	r3, #8
 800e710:	2108      	movs	r1, #8
 800e712:	60a2      	str	r2, [r4, #8]
 800e714:	6123      	str	r3, [r4, #16]
 800e716:	7561      	strb	r1, [r4, #21]
 800e718:	7da0      	ldrb	r0, [r4, #22]
 800e71a:	f080 0001 	eor.w	r0, r0, #1
 800e71e:	b002      	add	sp, #8
 800e720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e724:	466b      	mov	r3, sp
 800e726:	cb03      	ldmia	r3!, {r0, r1}
 800e728:	68a3      	ldr	r3, [r4, #8]
 800e72a:	6018      	str	r0, [r3, #0]
 800e72c:	6059      	str	r1, [r3, #4]
 800e72e:	e7eb      	b.n	800e708 <ucdr_serialize_uint64_t+0x10c>
 800e730:	68a2      	ldr	r2, [r4, #8]
 800e732:	6923      	ldr	r3, [r4, #16]
 800e734:	7da0      	ldrb	r0, [r4, #22]
 800e736:	7567      	strb	r7, [r4, #21]
 800e738:	1b92      	subs	r2, r2, r6
 800e73a:	1b9b      	subs	r3, r3, r6
 800e73c:	f080 0001 	eor.w	r0, r0, #1
 800e740:	60a2      	str	r2, [r4, #8]
 800e742:	6123      	str	r3, [r4, #16]
 800e744:	b002      	add	sp, #8
 800e746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e74a:	68a3      	ldr	r3, [r4, #8]
 800e74c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e750:	701a      	strb	r2, [r3, #0]
 800e752:	68a3      	ldr	r3, [r4, #8]
 800e754:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e758:	701a      	strb	r2, [r3, #0]
 800e75a:	68a3      	ldr	r3, [r4, #8]
 800e75c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e760:	701a      	strb	r2, [r3, #0]
 800e762:	68a3      	ldr	r3, [r4, #8]
 800e764:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e768:	701a      	strb	r2, [r3, #0]
 800e76a:	68a3      	ldr	r3, [r4, #8]
 800e76c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e770:	701a      	strb	r2, [r3, #0]
 800e772:	68a3      	ldr	r3, [r4, #8]
 800e774:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e778:	701a      	strb	r2, [r3, #0]
 800e77a:	68a3      	ldr	r3, [r4, #8]
 800e77c:	f89d 2000 	ldrb.w	r2, [sp]
 800e780:	701a      	strb	r2, [r3, #0]
 800e782:	e78a      	b.n	800e69a <ucdr_serialize_uint64_t+0x9e>
 800e784:	4628      	mov	r0, r5
 800e786:	466d      	mov	r5, sp
 800e788:	4629      	mov	r1, r5
 800e78a:	4632      	mov	r2, r6
 800e78c:	f00e f84b 	bl	801c826 <memcpy>
 800e790:	68a0      	ldr	r0, [r4, #8]
 800e792:	4642      	mov	r2, r8
 800e794:	19a9      	adds	r1, r5, r6
 800e796:	f00e f846 	bl	801c826 <memcpy>
 800e79a:	e77e      	b.n	800e69a <ucdr_serialize_uint64_t+0x9e>

0800e79c <ucdr_serialize_int16_t>:
 800e79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7a0:	b082      	sub	sp, #8
 800e7a2:	460b      	mov	r3, r1
 800e7a4:	2102      	movs	r1, #2
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e7ac:	f000 fda8 	bl	800f300 <ucdr_buffer_alignment>
 800e7b0:	4601      	mov	r1, r0
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	7d67      	ldrb	r7, [r4, #21]
 800e7b6:	f000 fde7 	bl	800f388 <ucdr_advance_buffer>
 800e7ba:	2102      	movs	r1, #2
 800e7bc:	4620      	mov	r0, r4
 800e7be:	f000 fd3f 	bl	800f240 <ucdr_check_buffer_available_for>
 800e7c2:	bb78      	cbnz	r0, 800e824 <ucdr_serialize_int16_t+0x88>
 800e7c4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e7c8:	42ab      	cmp	r3, r5
 800e7ca:	d926      	bls.n	800e81a <ucdr_serialize_int16_t+0x7e>
 800e7cc:	1b5e      	subs	r6, r3, r5
 800e7ce:	60a3      	str	r3, [r4, #8]
 800e7d0:	6923      	ldr	r3, [r4, #16]
 800e7d2:	f1c6 0802 	rsb	r8, r6, #2
 800e7d6:	4433      	add	r3, r6
 800e7d8:	6123      	str	r3, [r4, #16]
 800e7da:	4641      	mov	r1, r8
 800e7dc:	4620      	mov	r0, r4
 800e7de:	f000 fd3b 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	d03b      	beq.n	800e85e <ucdr_serialize_int16_t+0xc2>
 800e7e6:	7d23      	ldrb	r3, [r4, #20]
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d04a      	beq.n	800e882 <ucdr_serialize_int16_t+0xe6>
 800e7ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e7f0:	702b      	strb	r3, [r5, #0]
 800e7f2:	2e00      	cmp	r6, #0
 800e7f4:	d040      	beq.n	800e878 <ucdr_serialize_int16_t+0xdc>
 800e7f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e7fa:	706b      	strb	r3, [r5, #1]
 800e7fc:	6923      	ldr	r3, [r4, #16]
 800e7fe:	68a2      	ldr	r2, [r4, #8]
 800e800:	7da0      	ldrb	r0, [r4, #22]
 800e802:	3302      	adds	r3, #2
 800e804:	1b9e      	subs	r6, r3, r6
 800e806:	4442      	add	r2, r8
 800e808:	2302      	movs	r3, #2
 800e80a:	f080 0001 	eor.w	r0, r0, #1
 800e80e:	60a2      	str	r2, [r4, #8]
 800e810:	6126      	str	r6, [r4, #16]
 800e812:	7563      	strb	r3, [r4, #21]
 800e814:	b002      	add	sp, #8
 800e816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e81a:	2102      	movs	r1, #2
 800e81c:	4620      	mov	r0, r4
 800e81e:	f000 fd1b 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800e822:	b190      	cbz	r0, 800e84a <ucdr_serialize_int16_t+0xae>
 800e824:	7d23      	ldrb	r3, [r4, #20]
 800e826:	2b01      	cmp	r3, #1
 800e828:	68a3      	ldr	r3, [r4, #8]
 800e82a:	d014      	beq.n	800e856 <ucdr_serialize_int16_t+0xba>
 800e82c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e830:	701a      	strb	r2, [r3, #0]
 800e832:	68a3      	ldr	r3, [r4, #8]
 800e834:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e838:	705a      	strb	r2, [r3, #1]
 800e83a:	68a2      	ldr	r2, [r4, #8]
 800e83c:	6923      	ldr	r3, [r4, #16]
 800e83e:	3202      	adds	r2, #2
 800e840:	3302      	adds	r3, #2
 800e842:	2102      	movs	r1, #2
 800e844:	60a2      	str	r2, [r4, #8]
 800e846:	6123      	str	r3, [r4, #16]
 800e848:	7561      	strb	r1, [r4, #21]
 800e84a:	7da0      	ldrb	r0, [r4, #22]
 800e84c:	f080 0001 	eor.w	r0, r0, #1
 800e850:	b002      	add	sp, #8
 800e852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e856:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e85a:	801a      	strh	r2, [r3, #0]
 800e85c:	e7ed      	b.n	800e83a <ucdr_serialize_int16_t+0x9e>
 800e85e:	68a2      	ldr	r2, [r4, #8]
 800e860:	6923      	ldr	r3, [r4, #16]
 800e862:	7da0      	ldrb	r0, [r4, #22]
 800e864:	7567      	strb	r7, [r4, #21]
 800e866:	1b92      	subs	r2, r2, r6
 800e868:	1b9b      	subs	r3, r3, r6
 800e86a:	f080 0001 	eor.w	r0, r0, #1
 800e86e:	60a2      	str	r2, [r4, #8]
 800e870:	6123      	str	r3, [r4, #16]
 800e872:	b002      	add	sp, #8
 800e874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e878:	68a3      	ldr	r3, [r4, #8]
 800e87a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e87e:	701a      	strb	r2, [r3, #0]
 800e880:	e7bc      	b.n	800e7fc <ucdr_serialize_int16_t+0x60>
 800e882:	4628      	mov	r0, r5
 800e884:	f10d 0506 	add.w	r5, sp, #6
 800e888:	4629      	mov	r1, r5
 800e88a:	4632      	mov	r2, r6
 800e88c:	f00d ffcb 	bl	801c826 <memcpy>
 800e890:	68a0      	ldr	r0, [r4, #8]
 800e892:	4642      	mov	r2, r8
 800e894:	19a9      	adds	r1, r5, r6
 800e896:	f00d ffc6 	bl	801c826 <memcpy>
 800e89a:	e7af      	b.n	800e7fc <ucdr_serialize_int16_t+0x60>

0800e89c <ucdr_deserialize_int16_t>:
 800e89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8a0:	460d      	mov	r5, r1
 800e8a2:	2102      	movs	r1, #2
 800e8a4:	4604      	mov	r4, r0
 800e8a6:	f000 fd2b 	bl	800f300 <ucdr_buffer_alignment>
 800e8aa:	4601      	mov	r1, r0
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e8b2:	f000 fd69 	bl	800f388 <ucdr_advance_buffer>
 800e8b6:	2102      	movs	r1, #2
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	f000 fcc1 	bl	800f240 <ucdr_check_buffer_available_for>
 800e8be:	bb60      	cbnz	r0, 800e91a <ucdr_deserialize_int16_t+0x7e>
 800e8c0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e8c4:	42be      	cmp	r6, r7
 800e8c6:	d923      	bls.n	800e910 <ucdr_deserialize_int16_t+0x74>
 800e8c8:	6923      	ldr	r3, [r4, #16]
 800e8ca:	60a6      	str	r6, [r4, #8]
 800e8cc:	1bf6      	subs	r6, r6, r7
 800e8ce:	4433      	add	r3, r6
 800e8d0:	f1c6 0902 	rsb	r9, r6, #2
 800e8d4:	6123      	str	r3, [r4, #16]
 800e8d6:	4649      	mov	r1, r9
 800e8d8:	4620      	mov	r0, r4
 800e8da:	f000 fcbd 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	d034      	beq.n	800e94c <ucdr_deserialize_int16_t+0xb0>
 800e8e2:	7d23      	ldrb	r3, [r4, #20]
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d042      	beq.n	800e96e <ucdr_deserialize_int16_t+0xd2>
 800e8e8:	787b      	ldrb	r3, [r7, #1]
 800e8ea:	702b      	strb	r3, [r5, #0]
 800e8ec:	2e00      	cmp	r6, #0
 800e8ee:	d03a      	beq.n	800e966 <ucdr_deserialize_int16_t+0xca>
 800e8f0:	783b      	ldrb	r3, [r7, #0]
 800e8f2:	706b      	strb	r3, [r5, #1]
 800e8f4:	6923      	ldr	r3, [r4, #16]
 800e8f6:	68a2      	ldr	r2, [r4, #8]
 800e8f8:	7da0      	ldrb	r0, [r4, #22]
 800e8fa:	2102      	movs	r1, #2
 800e8fc:	3302      	adds	r3, #2
 800e8fe:	444a      	add	r2, r9
 800e900:	1b9b      	subs	r3, r3, r6
 800e902:	7561      	strb	r1, [r4, #21]
 800e904:	60a2      	str	r2, [r4, #8]
 800e906:	6123      	str	r3, [r4, #16]
 800e908:	f080 0001 	eor.w	r0, r0, #1
 800e90c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e910:	2102      	movs	r1, #2
 800e912:	4620      	mov	r0, r4
 800e914:	f000 fca0 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800e918:	b180      	cbz	r0, 800e93c <ucdr_deserialize_int16_t+0xa0>
 800e91a:	7d23      	ldrb	r3, [r4, #20]
 800e91c:	2b01      	cmp	r3, #1
 800e91e:	68a3      	ldr	r3, [r4, #8]
 800e920:	d011      	beq.n	800e946 <ucdr_deserialize_int16_t+0xaa>
 800e922:	785b      	ldrb	r3, [r3, #1]
 800e924:	702b      	strb	r3, [r5, #0]
 800e926:	68a3      	ldr	r3, [r4, #8]
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	706b      	strb	r3, [r5, #1]
 800e92c:	68a2      	ldr	r2, [r4, #8]
 800e92e:	6923      	ldr	r3, [r4, #16]
 800e930:	3202      	adds	r2, #2
 800e932:	3302      	adds	r3, #2
 800e934:	2102      	movs	r1, #2
 800e936:	60a2      	str	r2, [r4, #8]
 800e938:	6123      	str	r3, [r4, #16]
 800e93a:	7561      	strb	r1, [r4, #21]
 800e93c:	7da0      	ldrb	r0, [r4, #22]
 800e93e:	f080 0001 	eor.w	r0, r0, #1
 800e942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e946:	881b      	ldrh	r3, [r3, #0]
 800e948:	802b      	strh	r3, [r5, #0]
 800e94a:	e7ef      	b.n	800e92c <ucdr_deserialize_int16_t+0x90>
 800e94c:	68a2      	ldr	r2, [r4, #8]
 800e94e:	6923      	ldr	r3, [r4, #16]
 800e950:	7da0      	ldrb	r0, [r4, #22]
 800e952:	f884 8015 	strb.w	r8, [r4, #21]
 800e956:	1b92      	subs	r2, r2, r6
 800e958:	1b9b      	subs	r3, r3, r6
 800e95a:	60a2      	str	r2, [r4, #8]
 800e95c:	6123      	str	r3, [r4, #16]
 800e95e:	f080 0001 	eor.w	r0, r0, #1
 800e962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e966:	68a3      	ldr	r3, [r4, #8]
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	706b      	strb	r3, [r5, #1]
 800e96c:	e7c2      	b.n	800e8f4 <ucdr_deserialize_int16_t+0x58>
 800e96e:	4639      	mov	r1, r7
 800e970:	4632      	mov	r2, r6
 800e972:	4628      	mov	r0, r5
 800e974:	f00d ff57 	bl	801c826 <memcpy>
 800e978:	68a1      	ldr	r1, [r4, #8]
 800e97a:	464a      	mov	r2, r9
 800e97c:	19a8      	adds	r0, r5, r6
 800e97e:	f00d ff52 	bl	801c826 <memcpy>
 800e982:	e7b7      	b.n	800e8f4 <ucdr_deserialize_int16_t+0x58>

0800e984 <ucdr_serialize_int32_t>:
 800e984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e988:	b082      	sub	sp, #8
 800e98a:	4604      	mov	r4, r0
 800e98c:	9101      	str	r1, [sp, #4]
 800e98e:	2104      	movs	r1, #4
 800e990:	f000 fcb6 	bl	800f300 <ucdr_buffer_alignment>
 800e994:	4601      	mov	r1, r0
 800e996:	4620      	mov	r0, r4
 800e998:	7d67      	ldrb	r7, [r4, #21]
 800e99a:	f000 fcf5 	bl	800f388 <ucdr_advance_buffer>
 800e99e:	2104      	movs	r1, #4
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	f000 fc4d 	bl	800f240 <ucdr_check_buffer_available_for>
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	d139      	bne.n	800ea1e <ucdr_serialize_int32_t+0x9a>
 800e9aa:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e9ae:	42ab      	cmp	r3, r5
 800e9b0:	d930      	bls.n	800ea14 <ucdr_serialize_int32_t+0x90>
 800e9b2:	1b5e      	subs	r6, r3, r5
 800e9b4:	60a3      	str	r3, [r4, #8]
 800e9b6:	6923      	ldr	r3, [r4, #16]
 800e9b8:	f1c6 0804 	rsb	r8, r6, #4
 800e9bc:	4433      	add	r3, r6
 800e9be:	6123      	str	r3, [r4, #16]
 800e9c0:	4641      	mov	r1, r8
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f000 fc48 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800e9c8:	2800      	cmp	r0, #0
 800e9ca:	d04c      	beq.n	800ea66 <ucdr_serialize_int32_t+0xe2>
 800e9cc:	7d23      	ldrb	r3, [r4, #20]
 800e9ce:	2b01      	cmp	r3, #1
 800e9d0:	d063      	beq.n	800ea9a <ucdr_serialize_int32_t+0x116>
 800e9d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e9d6:	702b      	strb	r3, [r5, #0]
 800e9d8:	2e00      	cmp	r6, #0
 800e9da:	d051      	beq.n	800ea80 <ucdr_serialize_int32_t+0xfc>
 800e9dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e9e0:	706b      	strb	r3, [r5, #1]
 800e9e2:	2e01      	cmp	r6, #1
 800e9e4:	d050      	beq.n	800ea88 <ucdr_serialize_int32_t+0x104>
 800e9e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e9ea:	70ab      	strb	r3, [r5, #2]
 800e9ec:	2e02      	cmp	r6, #2
 800e9ee:	d04f      	beq.n	800ea90 <ucdr_serialize_int32_t+0x10c>
 800e9f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e9f4:	70eb      	strb	r3, [r5, #3]
 800e9f6:	6923      	ldr	r3, [r4, #16]
 800e9f8:	68a2      	ldr	r2, [r4, #8]
 800e9fa:	7da0      	ldrb	r0, [r4, #22]
 800e9fc:	3304      	adds	r3, #4
 800e9fe:	1b9e      	subs	r6, r3, r6
 800ea00:	4442      	add	r2, r8
 800ea02:	2304      	movs	r3, #4
 800ea04:	f080 0001 	eor.w	r0, r0, #1
 800ea08:	60a2      	str	r2, [r4, #8]
 800ea0a:	6126      	str	r6, [r4, #16]
 800ea0c:	7563      	strb	r3, [r4, #21]
 800ea0e:	b002      	add	sp, #8
 800ea10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea14:	2104      	movs	r1, #4
 800ea16:	4620      	mov	r0, r4
 800ea18:	f000 fc1e 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800ea1c:	b1d0      	cbz	r0, 800ea54 <ucdr_serialize_int32_t+0xd0>
 800ea1e:	7d23      	ldrb	r3, [r4, #20]
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	68a3      	ldr	r3, [r4, #8]
 800ea24:	d01c      	beq.n	800ea60 <ucdr_serialize_int32_t+0xdc>
 800ea26:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ea2a:	701a      	strb	r2, [r3, #0]
 800ea2c:	68a3      	ldr	r3, [r4, #8]
 800ea2e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea32:	705a      	strb	r2, [r3, #1]
 800ea34:	68a3      	ldr	r3, [r4, #8]
 800ea36:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ea3a:	709a      	strb	r2, [r3, #2]
 800ea3c:	68a3      	ldr	r3, [r4, #8]
 800ea3e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ea42:	70da      	strb	r2, [r3, #3]
 800ea44:	68a2      	ldr	r2, [r4, #8]
 800ea46:	6923      	ldr	r3, [r4, #16]
 800ea48:	3204      	adds	r2, #4
 800ea4a:	3304      	adds	r3, #4
 800ea4c:	2104      	movs	r1, #4
 800ea4e:	60a2      	str	r2, [r4, #8]
 800ea50:	6123      	str	r3, [r4, #16]
 800ea52:	7561      	strb	r1, [r4, #21]
 800ea54:	7da0      	ldrb	r0, [r4, #22]
 800ea56:	f080 0001 	eor.w	r0, r0, #1
 800ea5a:	b002      	add	sp, #8
 800ea5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea60:	9a01      	ldr	r2, [sp, #4]
 800ea62:	601a      	str	r2, [r3, #0]
 800ea64:	e7ee      	b.n	800ea44 <ucdr_serialize_int32_t+0xc0>
 800ea66:	68a2      	ldr	r2, [r4, #8]
 800ea68:	6923      	ldr	r3, [r4, #16]
 800ea6a:	7da0      	ldrb	r0, [r4, #22]
 800ea6c:	7567      	strb	r7, [r4, #21]
 800ea6e:	1b92      	subs	r2, r2, r6
 800ea70:	1b9b      	subs	r3, r3, r6
 800ea72:	f080 0001 	eor.w	r0, r0, #1
 800ea76:	60a2      	str	r2, [r4, #8]
 800ea78:	6123      	str	r3, [r4, #16]
 800ea7a:	b002      	add	sp, #8
 800ea7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea80:	68a3      	ldr	r3, [r4, #8]
 800ea82:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea86:	701a      	strb	r2, [r3, #0]
 800ea88:	68a3      	ldr	r3, [r4, #8]
 800ea8a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ea8e:	701a      	strb	r2, [r3, #0]
 800ea90:	68a3      	ldr	r3, [r4, #8]
 800ea92:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ea96:	701a      	strb	r2, [r3, #0]
 800ea98:	e7ad      	b.n	800e9f6 <ucdr_serialize_int32_t+0x72>
 800ea9a:	4628      	mov	r0, r5
 800ea9c:	ad01      	add	r5, sp, #4
 800ea9e:	4629      	mov	r1, r5
 800eaa0:	4632      	mov	r2, r6
 800eaa2:	f00d fec0 	bl	801c826 <memcpy>
 800eaa6:	68a0      	ldr	r0, [r4, #8]
 800eaa8:	4642      	mov	r2, r8
 800eaaa:	19a9      	adds	r1, r5, r6
 800eaac:	f00d febb 	bl	801c826 <memcpy>
 800eab0:	e7a1      	b.n	800e9f6 <ucdr_serialize_int32_t+0x72>
 800eab2:	bf00      	nop

0800eab4 <ucdr_deserialize_int32_t>:
 800eab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eab8:	460d      	mov	r5, r1
 800eaba:	2104      	movs	r1, #4
 800eabc:	4604      	mov	r4, r0
 800eabe:	f000 fc1f 	bl	800f300 <ucdr_buffer_alignment>
 800eac2:	4601      	mov	r1, r0
 800eac4:	4620      	mov	r0, r4
 800eac6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eaca:	f000 fc5d 	bl	800f388 <ucdr_advance_buffer>
 800eace:	2104      	movs	r1, #4
 800ead0:	4620      	mov	r0, r4
 800ead2:	f000 fbb5 	bl	800f240 <ucdr_check_buffer_available_for>
 800ead6:	2800      	cmp	r0, #0
 800ead8:	d138      	bne.n	800eb4c <ucdr_deserialize_int32_t+0x98>
 800eada:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800eade:	42b7      	cmp	r7, r6
 800eae0:	d92f      	bls.n	800eb42 <ucdr_deserialize_int32_t+0x8e>
 800eae2:	6923      	ldr	r3, [r4, #16]
 800eae4:	60a7      	str	r7, [r4, #8]
 800eae6:	1bbf      	subs	r7, r7, r6
 800eae8:	443b      	add	r3, r7
 800eaea:	f1c7 0904 	rsb	r9, r7, #4
 800eaee:	6123      	str	r3, [r4, #16]
 800eaf0:	4649      	mov	r1, r9
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	f000 fbb0 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	d046      	beq.n	800eb8a <ucdr_deserialize_int32_t+0xd6>
 800eafc:	7d23      	ldrb	r3, [r4, #20]
 800eafe:	2b01      	cmp	r3, #1
 800eb00:	d05c      	beq.n	800ebbc <ucdr_deserialize_int32_t+0x108>
 800eb02:	78f3      	ldrb	r3, [r6, #3]
 800eb04:	702b      	strb	r3, [r5, #0]
 800eb06:	2f00      	cmp	r7, #0
 800eb08:	d04c      	beq.n	800eba4 <ucdr_deserialize_int32_t+0xf0>
 800eb0a:	78b3      	ldrb	r3, [r6, #2]
 800eb0c:	706b      	strb	r3, [r5, #1]
 800eb0e:	2f01      	cmp	r7, #1
 800eb10:	f105 0302 	add.w	r3, r5, #2
 800eb14:	d04a      	beq.n	800ebac <ucdr_deserialize_int32_t+0xf8>
 800eb16:	7873      	ldrb	r3, [r6, #1]
 800eb18:	70ab      	strb	r3, [r5, #2]
 800eb1a:	2f02      	cmp	r7, #2
 800eb1c:	f105 0303 	add.w	r3, r5, #3
 800eb20:	d048      	beq.n	800ebb4 <ucdr_deserialize_int32_t+0x100>
 800eb22:	7833      	ldrb	r3, [r6, #0]
 800eb24:	70eb      	strb	r3, [r5, #3]
 800eb26:	6923      	ldr	r3, [r4, #16]
 800eb28:	68a2      	ldr	r2, [r4, #8]
 800eb2a:	7da0      	ldrb	r0, [r4, #22]
 800eb2c:	2104      	movs	r1, #4
 800eb2e:	3304      	adds	r3, #4
 800eb30:	444a      	add	r2, r9
 800eb32:	1bdb      	subs	r3, r3, r7
 800eb34:	7561      	strb	r1, [r4, #21]
 800eb36:	60a2      	str	r2, [r4, #8]
 800eb38:	6123      	str	r3, [r4, #16]
 800eb3a:	f080 0001 	eor.w	r0, r0, #1
 800eb3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb42:	2104      	movs	r1, #4
 800eb44:	4620      	mov	r0, r4
 800eb46:	f000 fb87 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800eb4a:	b1b0      	cbz	r0, 800eb7a <ucdr_deserialize_int32_t+0xc6>
 800eb4c:	7d23      	ldrb	r3, [r4, #20]
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	68a3      	ldr	r3, [r4, #8]
 800eb52:	d017      	beq.n	800eb84 <ucdr_deserialize_int32_t+0xd0>
 800eb54:	78db      	ldrb	r3, [r3, #3]
 800eb56:	702b      	strb	r3, [r5, #0]
 800eb58:	68a3      	ldr	r3, [r4, #8]
 800eb5a:	789b      	ldrb	r3, [r3, #2]
 800eb5c:	706b      	strb	r3, [r5, #1]
 800eb5e:	68a3      	ldr	r3, [r4, #8]
 800eb60:	785b      	ldrb	r3, [r3, #1]
 800eb62:	70ab      	strb	r3, [r5, #2]
 800eb64:	68a3      	ldr	r3, [r4, #8]
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	70eb      	strb	r3, [r5, #3]
 800eb6a:	68a2      	ldr	r2, [r4, #8]
 800eb6c:	6923      	ldr	r3, [r4, #16]
 800eb6e:	3204      	adds	r2, #4
 800eb70:	3304      	adds	r3, #4
 800eb72:	2104      	movs	r1, #4
 800eb74:	60a2      	str	r2, [r4, #8]
 800eb76:	6123      	str	r3, [r4, #16]
 800eb78:	7561      	strb	r1, [r4, #21]
 800eb7a:	7da0      	ldrb	r0, [r4, #22]
 800eb7c:	f080 0001 	eor.w	r0, r0, #1
 800eb80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	602b      	str	r3, [r5, #0]
 800eb88:	e7ef      	b.n	800eb6a <ucdr_deserialize_int32_t+0xb6>
 800eb8a:	68a2      	ldr	r2, [r4, #8]
 800eb8c:	6923      	ldr	r3, [r4, #16]
 800eb8e:	7da0      	ldrb	r0, [r4, #22]
 800eb90:	f884 8015 	strb.w	r8, [r4, #21]
 800eb94:	1bd2      	subs	r2, r2, r7
 800eb96:	1bdb      	subs	r3, r3, r7
 800eb98:	60a2      	str	r2, [r4, #8]
 800eb9a:	6123      	str	r3, [r4, #16]
 800eb9c:	f080 0001 	eor.w	r0, r0, #1
 800eba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eba4:	68a3      	ldr	r3, [r4, #8]
 800eba6:	789b      	ldrb	r3, [r3, #2]
 800eba8:	706b      	strb	r3, [r5, #1]
 800ebaa:	1cab      	adds	r3, r5, #2
 800ebac:	68a2      	ldr	r2, [r4, #8]
 800ebae:	7852      	ldrb	r2, [r2, #1]
 800ebb0:	f803 2b01 	strb.w	r2, [r3], #1
 800ebb4:	68a2      	ldr	r2, [r4, #8]
 800ebb6:	7812      	ldrb	r2, [r2, #0]
 800ebb8:	701a      	strb	r2, [r3, #0]
 800ebba:	e7b4      	b.n	800eb26 <ucdr_deserialize_int32_t+0x72>
 800ebbc:	4631      	mov	r1, r6
 800ebbe:	463a      	mov	r2, r7
 800ebc0:	4628      	mov	r0, r5
 800ebc2:	f00d fe30 	bl	801c826 <memcpy>
 800ebc6:	68a1      	ldr	r1, [r4, #8]
 800ebc8:	464a      	mov	r2, r9
 800ebca:	19e8      	adds	r0, r5, r7
 800ebcc:	f00d fe2b 	bl	801c826 <memcpy>
 800ebd0:	e7a9      	b.n	800eb26 <ucdr_deserialize_int32_t+0x72>
 800ebd2:	bf00      	nop

0800ebd4 <ucdr_serialize_double>:
 800ebd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebd8:	2108      	movs	r1, #8
 800ebda:	b082      	sub	sp, #8
 800ebdc:	4604      	mov	r4, r0
 800ebde:	ed8d 0b00 	vstr	d0, [sp]
 800ebe2:	f000 fb8d 	bl	800f300 <ucdr_buffer_alignment>
 800ebe6:	4601      	mov	r1, r0
 800ebe8:	4620      	mov	r0, r4
 800ebea:	7d67      	ldrb	r7, [r4, #21]
 800ebec:	f000 fbcc 	bl	800f388 <ucdr_advance_buffer>
 800ebf0:	2108      	movs	r1, #8
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f000 fb24 	bl	800f240 <ucdr_check_buffer_available_for>
 800ebf8:	2800      	cmp	r0, #0
 800ebfa:	d14e      	bne.n	800ec9a <ucdr_serialize_double+0xc6>
 800ebfc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ec00:	42ab      	cmp	r3, r5
 800ec02:	d945      	bls.n	800ec90 <ucdr_serialize_double+0xbc>
 800ec04:	1b5e      	subs	r6, r3, r5
 800ec06:	60a3      	str	r3, [r4, #8]
 800ec08:	6923      	ldr	r3, [r4, #16]
 800ec0a:	f1c6 0808 	rsb	r8, r6, #8
 800ec0e:	4433      	add	r3, r6
 800ec10:	6123      	str	r3, [r4, #16]
 800ec12:	4641      	mov	r1, r8
 800ec14:	4620      	mov	r0, r4
 800ec16:	f000 fb1f 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800ec1a:	2800      	cmp	r0, #0
 800ec1c:	d074      	beq.n	800ed08 <ucdr_serialize_double+0x134>
 800ec1e:	7d23      	ldrb	r3, [r4, #20]
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	f000 809b 	beq.w	800ed5c <ucdr_serialize_double+0x188>
 800ec26:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ec2a:	702b      	strb	r3, [r5, #0]
 800ec2c:	2e00      	cmp	r6, #0
 800ec2e:	d078      	beq.n	800ed22 <ucdr_serialize_double+0x14e>
 800ec30:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ec34:	706b      	strb	r3, [r5, #1]
 800ec36:	2e01      	cmp	r6, #1
 800ec38:	d077      	beq.n	800ed2a <ucdr_serialize_double+0x156>
 800ec3a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ec3e:	70ab      	strb	r3, [r5, #2]
 800ec40:	2e02      	cmp	r6, #2
 800ec42:	d076      	beq.n	800ed32 <ucdr_serialize_double+0x15e>
 800ec44:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ec48:	70eb      	strb	r3, [r5, #3]
 800ec4a:	2e03      	cmp	r6, #3
 800ec4c:	d075      	beq.n	800ed3a <ucdr_serialize_double+0x166>
 800ec4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ec52:	712b      	strb	r3, [r5, #4]
 800ec54:	2e04      	cmp	r6, #4
 800ec56:	d074      	beq.n	800ed42 <ucdr_serialize_double+0x16e>
 800ec58:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800ec5c:	716b      	strb	r3, [r5, #5]
 800ec5e:	2e05      	cmp	r6, #5
 800ec60:	d073      	beq.n	800ed4a <ucdr_serialize_double+0x176>
 800ec62:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ec66:	71ab      	strb	r3, [r5, #6]
 800ec68:	2e06      	cmp	r6, #6
 800ec6a:	d072      	beq.n	800ed52 <ucdr_serialize_double+0x17e>
 800ec6c:	f89d 3000 	ldrb.w	r3, [sp]
 800ec70:	71eb      	strb	r3, [r5, #7]
 800ec72:	6923      	ldr	r3, [r4, #16]
 800ec74:	68a2      	ldr	r2, [r4, #8]
 800ec76:	7da0      	ldrb	r0, [r4, #22]
 800ec78:	3308      	adds	r3, #8
 800ec7a:	1b9e      	subs	r6, r3, r6
 800ec7c:	4442      	add	r2, r8
 800ec7e:	2308      	movs	r3, #8
 800ec80:	f080 0001 	eor.w	r0, r0, #1
 800ec84:	60a2      	str	r2, [r4, #8]
 800ec86:	6126      	str	r6, [r4, #16]
 800ec88:	7563      	strb	r3, [r4, #21]
 800ec8a:	b002      	add	sp, #8
 800ec8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec90:	2108      	movs	r1, #8
 800ec92:	4620      	mov	r0, r4
 800ec94:	f000 fae0 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800ec98:	b350      	cbz	r0, 800ecf0 <ucdr_serialize_double+0x11c>
 800ec9a:	7d23      	ldrb	r3, [r4, #20]
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	d02d      	beq.n	800ecfc <ucdr_serialize_double+0x128>
 800eca0:	68a3      	ldr	r3, [r4, #8]
 800eca2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800eca6:	701a      	strb	r2, [r3, #0]
 800eca8:	68a3      	ldr	r3, [r4, #8]
 800ecaa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ecae:	705a      	strb	r2, [r3, #1]
 800ecb0:	68a3      	ldr	r3, [r4, #8]
 800ecb2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ecb6:	709a      	strb	r2, [r3, #2]
 800ecb8:	68a3      	ldr	r3, [r4, #8]
 800ecba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ecbe:	70da      	strb	r2, [r3, #3]
 800ecc0:	68a3      	ldr	r3, [r4, #8]
 800ecc2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ecc6:	711a      	strb	r2, [r3, #4]
 800ecc8:	68a3      	ldr	r3, [r4, #8]
 800ecca:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ecce:	715a      	strb	r2, [r3, #5]
 800ecd0:	68a3      	ldr	r3, [r4, #8]
 800ecd2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ecd6:	719a      	strb	r2, [r3, #6]
 800ecd8:	68a3      	ldr	r3, [r4, #8]
 800ecda:	f89d 2000 	ldrb.w	r2, [sp]
 800ecde:	71da      	strb	r2, [r3, #7]
 800ece0:	68a2      	ldr	r2, [r4, #8]
 800ece2:	6923      	ldr	r3, [r4, #16]
 800ece4:	3208      	adds	r2, #8
 800ece6:	3308      	adds	r3, #8
 800ece8:	2108      	movs	r1, #8
 800ecea:	60a2      	str	r2, [r4, #8]
 800ecec:	6123      	str	r3, [r4, #16]
 800ecee:	7561      	strb	r1, [r4, #21]
 800ecf0:	7da0      	ldrb	r0, [r4, #22]
 800ecf2:	f080 0001 	eor.w	r0, r0, #1
 800ecf6:	b002      	add	sp, #8
 800ecf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecfc:	466b      	mov	r3, sp
 800ecfe:	cb03      	ldmia	r3!, {r0, r1}
 800ed00:	68a3      	ldr	r3, [r4, #8]
 800ed02:	6018      	str	r0, [r3, #0]
 800ed04:	6059      	str	r1, [r3, #4]
 800ed06:	e7eb      	b.n	800ece0 <ucdr_serialize_double+0x10c>
 800ed08:	68a2      	ldr	r2, [r4, #8]
 800ed0a:	6923      	ldr	r3, [r4, #16]
 800ed0c:	7da0      	ldrb	r0, [r4, #22]
 800ed0e:	7567      	strb	r7, [r4, #21]
 800ed10:	1b92      	subs	r2, r2, r6
 800ed12:	1b9b      	subs	r3, r3, r6
 800ed14:	f080 0001 	eor.w	r0, r0, #1
 800ed18:	60a2      	str	r2, [r4, #8]
 800ed1a:	6123      	str	r3, [r4, #16]
 800ed1c:	b002      	add	sp, #8
 800ed1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed22:	68a3      	ldr	r3, [r4, #8]
 800ed24:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ed28:	701a      	strb	r2, [r3, #0]
 800ed2a:	68a3      	ldr	r3, [r4, #8]
 800ed2c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ed30:	701a      	strb	r2, [r3, #0]
 800ed32:	68a3      	ldr	r3, [r4, #8]
 800ed34:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ed38:	701a      	strb	r2, [r3, #0]
 800ed3a:	68a3      	ldr	r3, [r4, #8]
 800ed3c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ed40:	701a      	strb	r2, [r3, #0]
 800ed42:	68a3      	ldr	r3, [r4, #8]
 800ed44:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ed48:	701a      	strb	r2, [r3, #0]
 800ed4a:	68a3      	ldr	r3, [r4, #8]
 800ed4c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ed50:	701a      	strb	r2, [r3, #0]
 800ed52:	68a3      	ldr	r3, [r4, #8]
 800ed54:	f89d 2000 	ldrb.w	r2, [sp]
 800ed58:	701a      	strb	r2, [r3, #0]
 800ed5a:	e78a      	b.n	800ec72 <ucdr_serialize_double+0x9e>
 800ed5c:	4628      	mov	r0, r5
 800ed5e:	466d      	mov	r5, sp
 800ed60:	4629      	mov	r1, r5
 800ed62:	4632      	mov	r2, r6
 800ed64:	f00d fd5f 	bl	801c826 <memcpy>
 800ed68:	68a0      	ldr	r0, [r4, #8]
 800ed6a:	4642      	mov	r2, r8
 800ed6c:	19a9      	adds	r1, r5, r6
 800ed6e:	f00d fd5a 	bl	801c826 <memcpy>
 800ed72:	e77e      	b.n	800ec72 <ucdr_serialize_double+0x9e>

0800ed74 <ucdr_serialize_endian_double>:
 800ed74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed78:	460e      	mov	r6, r1
 800ed7a:	b083      	sub	sp, #12
 800ed7c:	2108      	movs	r1, #8
 800ed7e:	4604      	mov	r4, r0
 800ed80:	ed8d 0b00 	vstr	d0, [sp]
 800ed84:	f000 fabc 	bl	800f300 <ucdr_buffer_alignment>
 800ed88:	4601      	mov	r1, r0
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ed90:	f000 fafa 	bl	800f388 <ucdr_advance_buffer>
 800ed94:	2108      	movs	r1, #8
 800ed96:	4620      	mov	r0, r4
 800ed98:	f000 fa52 	bl	800f240 <ucdr_check_buffer_available_for>
 800ed9c:	2800      	cmp	r0, #0
 800ed9e:	d14d      	bne.n	800ee3c <ucdr_serialize_endian_double+0xc8>
 800eda0:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800eda4:	42bd      	cmp	r5, r7
 800eda6:	d944      	bls.n	800ee32 <ucdr_serialize_endian_double+0xbe>
 800eda8:	6923      	ldr	r3, [r4, #16]
 800edaa:	60a5      	str	r5, [r4, #8]
 800edac:	1bed      	subs	r5, r5, r7
 800edae:	442b      	add	r3, r5
 800edb0:	f1c5 0908 	rsb	r9, r5, #8
 800edb4:	6123      	str	r3, [r4, #16]
 800edb6:	4649      	mov	r1, r9
 800edb8:	4620      	mov	r0, r4
 800edba:	f000 fa4d 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800edbe:	2800      	cmp	r0, #0
 800edc0:	d072      	beq.n	800eea8 <ucdr_serialize_endian_double+0x134>
 800edc2:	2e01      	cmp	r6, #1
 800edc4:	f000 809b 	beq.w	800eefe <ucdr_serialize_endian_double+0x18a>
 800edc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800edcc:	703b      	strb	r3, [r7, #0]
 800edce:	2d00      	cmp	r5, #0
 800edd0:	d078      	beq.n	800eec4 <ucdr_serialize_endian_double+0x150>
 800edd2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800edd6:	707b      	strb	r3, [r7, #1]
 800edd8:	2d01      	cmp	r5, #1
 800edda:	d077      	beq.n	800eecc <ucdr_serialize_endian_double+0x158>
 800eddc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ede0:	70bb      	strb	r3, [r7, #2]
 800ede2:	2d02      	cmp	r5, #2
 800ede4:	d076      	beq.n	800eed4 <ucdr_serialize_endian_double+0x160>
 800ede6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800edea:	70fb      	strb	r3, [r7, #3]
 800edec:	2d03      	cmp	r5, #3
 800edee:	d075      	beq.n	800eedc <ucdr_serialize_endian_double+0x168>
 800edf0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800edf4:	713b      	strb	r3, [r7, #4]
 800edf6:	2d04      	cmp	r5, #4
 800edf8:	d074      	beq.n	800eee4 <ucdr_serialize_endian_double+0x170>
 800edfa:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800edfe:	717b      	strb	r3, [r7, #5]
 800ee00:	2d05      	cmp	r5, #5
 800ee02:	d073      	beq.n	800eeec <ucdr_serialize_endian_double+0x178>
 800ee04:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ee08:	71bb      	strb	r3, [r7, #6]
 800ee0a:	2d06      	cmp	r5, #6
 800ee0c:	d072      	beq.n	800eef4 <ucdr_serialize_endian_double+0x180>
 800ee0e:	f89d 3000 	ldrb.w	r3, [sp]
 800ee12:	71fb      	strb	r3, [r7, #7]
 800ee14:	6923      	ldr	r3, [r4, #16]
 800ee16:	68a2      	ldr	r2, [r4, #8]
 800ee18:	7da0      	ldrb	r0, [r4, #22]
 800ee1a:	3308      	adds	r3, #8
 800ee1c:	1b5d      	subs	r5, r3, r5
 800ee1e:	444a      	add	r2, r9
 800ee20:	2308      	movs	r3, #8
 800ee22:	f080 0001 	eor.w	r0, r0, #1
 800ee26:	60a2      	str	r2, [r4, #8]
 800ee28:	6125      	str	r5, [r4, #16]
 800ee2a:	7563      	strb	r3, [r4, #21]
 800ee2c:	b003      	add	sp, #12
 800ee2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee32:	2108      	movs	r1, #8
 800ee34:	4620      	mov	r0, r4
 800ee36:	f000 fa0f 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800ee3a:	b348      	cbz	r0, 800ee90 <ucdr_serialize_endian_double+0x11c>
 800ee3c:	2e01      	cmp	r6, #1
 800ee3e:	d02d      	beq.n	800ee9c <ucdr_serialize_endian_double+0x128>
 800ee40:	68a3      	ldr	r3, [r4, #8]
 800ee42:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ee46:	701a      	strb	r2, [r3, #0]
 800ee48:	68a3      	ldr	r3, [r4, #8]
 800ee4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ee4e:	705a      	strb	r2, [r3, #1]
 800ee50:	68a3      	ldr	r3, [r4, #8]
 800ee52:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ee56:	709a      	strb	r2, [r3, #2]
 800ee58:	68a3      	ldr	r3, [r4, #8]
 800ee5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ee5e:	70da      	strb	r2, [r3, #3]
 800ee60:	68a3      	ldr	r3, [r4, #8]
 800ee62:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ee66:	711a      	strb	r2, [r3, #4]
 800ee68:	68a3      	ldr	r3, [r4, #8]
 800ee6a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ee6e:	715a      	strb	r2, [r3, #5]
 800ee70:	68a3      	ldr	r3, [r4, #8]
 800ee72:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ee76:	719a      	strb	r2, [r3, #6]
 800ee78:	68a3      	ldr	r3, [r4, #8]
 800ee7a:	f89d 2000 	ldrb.w	r2, [sp]
 800ee7e:	71da      	strb	r2, [r3, #7]
 800ee80:	68a2      	ldr	r2, [r4, #8]
 800ee82:	6923      	ldr	r3, [r4, #16]
 800ee84:	3208      	adds	r2, #8
 800ee86:	3308      	adds	r3, #8
 800ee88:	2108      	movs	r1, #8
 800ee8a:	60a2      	str	r2, [r4, #8]
 800ee8c:	6123      	str	r3, [r4, #16]
 800ee8e:	7561      	strb	r1, [r4, #21]
 800ee90:	7da0      	ldrb	r0, [r4, #22]
 800ee92:	f080 0001 	eor.w	r0, r0, #1
 800ee96:	b003      	add	sp, #12
 800ee98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee9c:	466b      	mov	r3, sp
 800ee9e:	cb03      	ldmia	r3!, {r0, r1}
 800eea0:	68a3      	ldr	r3, [r4, #8]
 800eea2:	6018      	str	r0, [r3, #0]
 800eea4:	6059      	str	r1, [r3, #4]
 800eea6:	e7eb      	b.n	800ee80 <ucdr_serialize_endian_double+0x10c>
 800eea8:	68a2      	ldr	r2, [r4, #8]
 800eeaa:	6923      	ldr	r3, [r4, #16]
 800eeac:	7da0      	ldrb	r0, [r4, #22]
 800eeae:	f884 8015 	strb.w	r8, [r4, #21]
 800eeb2:	1b52      	subs	r2, r2, r5
 800eeb4:	1b5b      	subs	r3, r3, r5
 800eeb6:	f080 0001 	eor.w	r0, r0, #1
 800eeba:	60a2      	str	r2, [r4, #8]
 800eebc:	6123      	str	r3, [r4, #16]
 800eebe:	b003      	add	sp, #12
 800eec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eec4:	68a3      	ldr	r3, [r4, #8]
 800eec6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eeca:	701a      	strb	r2, [r3, #0]
 800eecc:	68a3      	ldr	r3, [r4, #8]
 800eece:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800eed2:	701a      	strb	r2, [r3, #0]
 800eed4:	68a3      	ldr	r3, [r4, #8]
 800eed6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eeda:	701a      	strb	r2, [r3, #0]
 800eedc:	68a3      	ldr	r3, [r4, #8]
 800eede:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800eee2:	701a      	strb	r2, [r3, #0]
 800eee4:	68a3      	ldr	r3, [r4, #8]
 800eee6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800eeea:	701a      	strb	r2, [r3, #0]
 800eeec:	68a3      	ldr	r3, [r4, #8]
 800eeee:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800eef2:	701a      	strb	r2, [r3, #0]
 800eef4:	68a3      	ldr	r3, [r4, #8]
 800eef6:	f89d 2000 	ldrb.w	r2, [sp]
 800eefa:	701a      	strb	r2, [r3, #0]
 800eefc:	e78a      	b.n	800ee14 <ucdr_serialize_endian_double+0xa0>
 800eefe:	466e      	mov	r6, sp
 800ef00:	4631      	mov	r1, r6
 800ef02:	462a      	mov	r2, r5
 800ef04:	4638      	mov	r0, r7
 800ef06:	f00d fc8e 	bl	801c826 <memcpy>
 800ef0a:	68a0      	ldr	r0, [r4, #8]
 800ef0c:	464a      	mov	r2, r9
 800ef0e:	1971      	adds	r1, r6, r5
 800ef10:	f00d fc89 	bl	801c826 <memcpy>
 800ef14:	e77e      	b.n	800ee14 <ucdr_serialize_endian_double+0xa0>
 800ef16:	bf00      	nop

0800ef18 <ucdr_deserialize_double>:
 800ef18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef1c:	460d      	mov	r5, r1
 800ef1e:	2108      	movs	r1, #8
 800ef20:	4604      	mov	r4, r0
 800ef22:	f000 f9ed 	bl	800f300 <ucdr_buffer_alignment>
 800ef26:	4601      	mov	r1, r0
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ef2e:	f000 fa2b 	bl	800f388 <ucdr_advance_buffer>
 800ef32:	2108      	movs	r1, #8
 800ef34:	4620      	mov	r0, r4
 800ef36:	f000 f983 	bl	800f240 <ucdr_check_buffer_available_for>
 800ef3a:	2800      	cmp	r0, #0
 800ef3c:	d151      	bne.n	800efe2 <ucdr_deserialize_double+0xca>
 800ef3e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ef42:	42be      	cmp	r6, r7
 800ef44:	d948      	bls.n	800efd8 <ucdr_deserialize_double+0xc0>
 800ef46:	6923      	ldr	r3, [r4, #16]
 800ef48:	60a6      	str	r6, [r4, #8]
 800ef4a:	1bf6      	subs	r6, r6, r7
 800ef4c:	4433      	add	r3, r6
 800ef4e:	f1c6 0808 	rsb	r8, r6, #8
 800ef52:	6123      	str	r3, [r4, #16]
 800ef54:	4641      	mov	r1, r8
 800ef56:	4620      	mov	r0, r4
 800ef58:	f000 f97e 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d06d      	beq.n	800f03c <ucdr_deserialize_double+0x124>
 800ef60:	7d23      	ldrb	r3, [r4, #20]
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	f000 8093 	beq.w	800f08e <ucdr_deserialize_double+0x176>
 800ef68:	79fb      	ldrb	r3, [r7, #7]
 800ef6a:	702b      	strb	r3, [r5, #0]
 800ef6c:	2e00      	cmp	r6, #0
 800ef6e:	d072      	beq.n	800f056 <ucdr_deserialize_double+0x13e>
 800ef70:	79bb      	ldrb	r3, [r7, #6]
 800ef72:	706b      	strb	r3, [r5, #1]
 800ef74:	2e01      	cmp	r6, #1
 800ef76:	f105 0302 	add.w	r3, r5, #2
 800ef7a:	d070      	beq.n	800f05e <ucdr_deserialize_double+0x146>
 800ef7c:	797b      	ldrb	r3, [r7, #5]
 800ef7e:	70ab      	strb	r3, [r5, #2]
 800ef80:	2e02      	cmp	r6, #2
 800ef82:	f105 0303 	add.w	r3, r5, #3
 800ef86:	d06e      	beq.n	800f066 <ucdr_deserialize_double+0x14e>
 800ef88:	793b      	ldrb	r3, [r7, #4]
 800ef8a:	70eb      	strb	r3, [r5, #3]
 800ef8c:	2e03      	cmp	r6, #3
 800ef8e:	f105 0304 	add.w	r3, r5, #4
 800ef92:	d06c      	beq.n	800f06e <ucdr_deserialize_double+0x156>
 800ef94:	78fb      	ldrb	r3, [r7, #3]
 800ef96:	712b      	strb	r3, [r5, #4]
 800ef98:	2e04      	cmp	r6, #4
 800ef9a:	f105 0305 	add.w	r3, r5, #5
 800ef9e:	d06a      	beq.n	800f076 <ucdr_deserialize_double+0x15e>
 800efa0:	78bb      	ldrb	r3, [r7, #2]
 800efa2:	716b      	strb	r3, [r5, #5]
 800efa4:	2e05      	cmp	r6, #5
 800efa6:	f105 0306 	add.w	r3, r5, #6
 800efaa:	d068      	beq.n	800f07e <ucdr_deserialize_double+0x166>
 800efac:	787b      	ldrb	r3, [r7, #1]
 800efae:	71ab      	strb	r3, [r5, #6]
 800efb0:	2e06      	cmp	r6, #6
 800efb2:	f105 0307 	add.w	r3, r5, #7
 800efb6:	d066      	beq.n	800f086 <ucdr_deserialize_double+0x16e>
 800efb8:	783b      	ldrb	r3, [r7, #0]
 800efba:	71eb      	strb	r3, [r5, #7]
 800efbc:	6923      	ldr	r3, [r4, #16]
 800efbe:	68a2      	ldr	r2, [r4, #8]
 800efc0:	7da0      	ldrb	r0, [r4, #22]
 800efc2:	3308      	adds	r3, #8
 800efc4:	1b9e      	subs	r6, r3, r6
 800efc6:	2308      	movs	r3, #8
 800efc8:	4442      	add	r2, r8
 800efca:	7563      	strb	r3, [r4, #21]
 800efcc:	60a2      	str	r2, [r4, #8]
 800efce:	6126      	str	r6, [r4, #16]
 800efd0:	f080 0001 	eor.w	r0, r0, #1
 800efd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efd8:	2108      	movs	r1, #8
 800efda:	4620      	mov	r0, r4
 800efdc:	f000 f93c 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800efe0:	b310      	cbz	r0, 800f028 <ucdr_deserialize_double+0x110>
 800efe2:	7d23      	ldrb	r3, [r4, #20]
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	68a3      	ldr	r3, [r4, #8]
 800efe8:	d023      	beq.n	800f032 <ucdr_deserialize_double+0x11a>
 800efea:	79db      	ldrb	r3, [r3, #7]
 800efec:	702b      	strb	r3, [r5, #0]
 800efee:	68a3      	ldr	r3, [r4, #8]
 800eff0:	799b      	ldrb	r3, [r3, #6]
 800eff2:	706b      	strb	r3, [r5, #1]
 800eff4:	68a3      	ldr	r3, [r4, #8]
 800eff6:	795b      	ldrb	r3, [r3, #5]
 800eff8:	70ab      	strb	r3, [r5, #2]
 800effa:	68a3      	ldr	r3, [r4, #8]
 800effc:	791b      	ldrb	r3, [r3, #4]
 800effe:	70eb      	strb	r3, [r5, #3]
 800f000:	68a3      	ldr	r3, [r4, #8]
 800f002:	78db      	ldrb	r3, [r3, #3]
 800f004:	712b      	strb	r3, [r5, #4]
 800f006:	68a3      	ldr	r3, [r4, #8]
 800f008:	789b      	ldrb	r3, [r3, #2]
 800f00a:	716b      	strb	r3, [r5, #5]
 800f00c:	68a3      	ldr	r3, [r4, #8]
 800f00e:	785b      	ldrb	r3, [r3, #1]
 800f010:	71ab      	strb	r3, [r5, #6]
 800f012:	68a3      	ldr	r3, [r4, #8]
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	71eb      	strb	r3, [r5, #7]
 800f018:	68a2      	ldr	r2, [r4, #8]
 800f01a:	6923      	ldr	r3, [r4, #16]
 800f01c:	3208      	adds	r2, #8
 800f01e:	3308      	adds	r3, #8
 800f020:	2108      	movs	r1, #8
 800f022:	60a2      	str	r2, [r4, #8]
 800f024:	6123      	str	r3, [r4, #16]
 800f026:	7561      	strb	r1, [r4, #21]
 800f028:	7da0      	ldrb	r0, [r4, #22]
 800f02a:	f080 0001 	eor.w	r0, r0, #1
 800f02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f032:	681a      	ldr	r2, [r3, #0]
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	606b      	str	r3, [r5, #4]
 800f038:	602a      	str	r2, [r5, #0]
 800f03a:	e7ed      	b.n	800f018 <ucdr_deserialize_double+0x100>
 800f03c:	68a2      	ldr	r2, [r4, #8]
 800f03e:	6923      	ldr	r3, [r4, #16]
 800f040:	7da0      	ldrb	r0, [r4, #22]
 800f042:	f884 9015 	strb.w	r9, [r4, #21]
 800f046:	1b92      	subs	r2, r2, r6
 800f048:	1b9b      	subs	r3, r3, r6
 800f04a:	60a2      	str	r2, [r4, #8]
 800f04c:	6123      	str	r3, [r4, #16]
 800f04e:	f080 0001 	eor.w	r0, r0, #1
 800f052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f056:	68a3      	ldr	r3, [r4, #8]
 800f058:	799b      	ldrb	r3, [r3, #6]
 800f05a:	706b      	strb	r3, [r5, #1]
 800f05c:	1cab      	adds	r3, r5, #2
 800f05e:	68a2      	ldr	r2, [r4, #8]
 800f060:	7952      	ldrb	r2, [r2, #5]
 800f062:	f803 2b01 	strb.w	r2, [r3], #1
 800f066:	68a2      	ldr	r2, [r4, #8]
 800f068:	7912      	ldrb	r2, [r2, #4]
 800f06a:	f803 2b01 	strb.w	r2, [r3], #1
 800f06e:	68a2      	ldr	r2, [r4, #8]
 800f070:	78d2      	ldrb	r2, [r2, #3]
 800f072:	f803 2b01 	strb.w	r2, [r3], #1
 800f076:	68a2      	ldr	r2, [r4, #8]
 800f078:	7892      	ldrb	r2, [r2, #2]
 800f07a:	f803 2b01 	strb.w	r2, [r3], #1
 800f07e:	68a2      	ldr	r2, [r4, #8]
 800f080:	7852      	ldrb	r2, [r2, #1]
 800f082:	f803 2b01 	strb.w	r2, [r3], #1
 800f086:	68a2      	ldr	r2, [r4, #8]
 800f088:	7812      	ldrb	r2, [r2, #0]
 800f08a:	701a      	strb	r2, [r3, #0]
 800f08c:	e796      	b.n	800efbc <ucdr_deserialize_double+0xa4>
 800f08e:	4639      	mov	r1, r7
 800f090:	4632      	mov	r2, r6
 800f092:	4628      	mov	r0, r5
 800f094:	f00d fbc7 	bl	801c826 <memcpy>
 800f098:	68a1      	ldr	r1, [r4, #8]
 800f09a:	4642      	mov	r2, r8
 800f09c:	19a8      	adds	r0, r5, r6
 800f09e:	f00d fbc2 	bl	801c826 <memcpy>
 800f0a2:	e78b      	b.n	800efbc <ucdr_deserialize_double+0xa4>

0800f0a4 <ucdr_deserialize_endian_double>:
 800f0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0a8:	460f      	mov	r7, r1
 800f0aa:	2108      	movs	r1, #8
 800f0ac:	4604      	mov	r4, r0
 800f0ae:	4615      	mov	r5, r2
 800f0b0:	f000 f926 	bl	800f300 <ucdr_buffer_alignment>
 800f0b4:	4601      	mov	r1, r0
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f0bc:	f000 f964 	bl	800f388 <ucdr_advance_buffer>
 800f0c0:	2108      	movs	r1, #8
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	f000 f8bc 	bl	800f240 <ucdr_check_buffer_available_for>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	d159      	bne.n	800f180 <ucdr_deserialize_endian_double+0xdc>
 800f0cc:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800f0d0:	4546      	cmp	r6, r8
 800f0d2:	d950      	bls.n	800f176 <ucdr_deserialize_endian_double+0xd2>
 800f0d4:	6923      	ldr	r3, [r4, #16]
 800f0d6:	60a6      	str	r6, [r4, #8]
 800f0d8:	eba6 0608 	sub.w	r6, r6, r8
 800f0dc:	4433      	add	r3, r6
 800f0de:	f1c6 0a08 	rsb	sl, r6, #8
 800f0e2:	6123      	str	r3, [r4, #16]
 800f0e4:	4651      	mov	r1, sl
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f000 f8b6 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800f0ec:	2800      	cmp	r0, #0
 800f0ee:	d073      	beq.n	800f1d8 <ucdr_deserialize_endian_double+0x134>
 800f0f0:	2f01      	cmp	r7, #1
 800f0f2:	f000 809a 	beq.w	800f22a <ucdr_deserialize_endian_double+0x186>
 800f0f6:	f898 3007 	ldrb.w	r3, [r8, #7]
 800f0fa:	702b      	strb	r3, [r5, #0]
 800f0fc:	2e00      	cmp	r6, #0
 800f0fe:	d078      	beq.n	800f1f2 <ucdr_deserialize_endian_double+0x14e>
 800f100:	f898 3006 	ldrb.w	r3, [r8, #6]
 800f104:	706b      	strb	r3, [r5, #1]
 800f106:	2e01      	cmp	r6, #1
 800f108:	f105 0302 	add.w	r3, r5, #2
 800f10c:	d075      	beq.n	800f1fa <ucdr_deserialize_endian_double+0x156>
 800f10e:	f898 3005 	ldrb.w	r3, [r8, #5]
 800f112:	70ab      	strb	r3, [r5, #2]
 800f114:	2e02      	cmp	r6, #2
 800f116:	f105 0303 	add.w	r3, r5, #3
 800f11a:	d072      	beq.n	800f202 <ucdr_deserialize_endian_double+0x15e>
 800f11c:	f898 3004 	ldrb.w	r3, [r8, #4]
 800f120:	70eb      	strb	r3, [r5, #3]
 800f122:	2e03      	cmp	r6, #3
 800f124:	f105 0304 	add.w	r3, r5, #4
 800f128:	d06f      	beq.n	800f20a <ucdr_deserialize_endian_double+0x166>
 800f12a:	f898 3003 	ldrb.w	r3, [r8, #3]
 800f12e:	712b      	strb	r3, [r5, #4]
 800f130:	2e04      	cmp	r6, #4
 800f132:	f105 0305 	add.w	r3, r5, #5
 800f136:	d06c      	beq.n	800f212 <ucdr_deserialize_endian_double+0x16e>
 800f138:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f13c:	716b      	strb	r3, [r5, #5]
 800f13e:	2e05      	cmp	r6, #5
 800f140:	f105 0306 	add.w	r3, r5, #6
 800f144:	d069      	beq.n	800f21a <ucdr_deserialize_endian_double+0x176>
 800f146:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f14a:	71ab      	strb	r3, [r5, #6]
 800f14c:	2e06      	cmp	r6, #6
 800f14e:	f105 0307 	add.w	r3, r5, #7
 800f152:	d066      	beq.n	800f222 <ucdr_deserialize_endian_double+0x17e>
 800f154:	f898 3000 	ldrb.w	r3, [r8]
 800f158:	71eb      	strb	r3, [r5, #7]
 800f15a:	6923      	ldr	r3, [r4, #16]
 800f15c:	68a2      	ldr	r2, [r4, #8]
 800f15e:	7da0      	ldrb	r0, [r4, #22]
 800f160:	3308      	adds	r3, #8
 800f162:	1b9e      	subs	r6, r3, r6
 800f164:	2308      	movs	r3, #8
 800f166:	4452      	add	r2, sl
 800f168:	7563      	strb	r3, [r4, #21]
 800f16a:	60a2      	str	r2, [r4, #8]
 800f16c:	6126      	str	r6, [r4, #16]
 800f16e:	f080 0001 	eor.w	r0, r0, #1
 800f172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f176:	2108      	movs	r1, #8
 800f178:	4620      	mov	r0, r4
 800f17a:	f000 f86d 	bl	800f258 <ucdr_check_final_buffer_behavior>
 800f17e:	b308      	cbz	r0, 800f1c4 <ucdr_deserialize_endian_double+0x120>
 800f180:	2f01      	cmp	r7, #1
 800f182:	68a3      	ldr	r3, [r4, #8]
 800f184:	d023      	beq.n	800f1ce <ucdr_deserialize_endian_double+0x12a>
 800f186:	79db      	ldrb	r3, [r3, #7]
 800f188:	702b      	strb	r3, [r5, #0]
 800f18a:	68a3      	ldr	r3, [r4, #8]
 800f18c:	799b      	ldrb	r3, [r3, #6]
 800f18e:	706b      	strb	r3, [r5, #1]
 800f190:	68a3      	ldr	r3, [r4, #8]
 800f192:	795b      	ldrb	r3, [r3, #5]
 800f194:	70ab      	strb	r3, [r5, #2]
 800f196:	68a3      	ldr	r3, [r4, #8]
 800f198:	791b      	ldrb	r3, [r3, #4]
 800f19a:	70eb      	strb	r3, [r5, #3]
 800f19c:	68a3      	ldr	r3, [r4, #8]
 800f19e:	78db      	ldrb	r3, [r3, #3]
 800f1a0:	712b      	strb	r3, [r5, #4]
 800f1a2:	68a3      	ldr	r3, [r4, #8]
 800f1a4:	789b      	ldrb	r3, [r3, #2]
 800f1a6:	716b      	strb	r3, [r5, #5]
 800f1a8:	68a3      	ldr	r3, [r4, #8]
 800f1aa:	785b      	ldrb	r3, [r3, #1]
 800f1ac:	71ab      	strb	r3, [r5, #6]
 800f1ae:	68a3      	ldr	r3, [r4, #8]
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	71eb      	strb	r3, [r5, #7]
 800f1b4:	68a2      	ldr	r2, [r4, #8]
 800f1b6:	6923      	ldr	r3, [r4, #16]
 800f1b8:	3208      	adds	r2, #8
 800f1ba:	3308      	adds	r3, #8
 800f1bc:	2108      	movs	r1, #8
 800f1be:	60a2      	str	r2, [r4, #8]
 800f1c0:	6123      	str	r3, [r4, #16]
 800f1c2:	7561      	strb	r1, [r4, #21]
 800f1c4:	7da0      	ldrb	r0, [r4, #22]
 800f1c6:	f080 0001 	eor.w	r0, r0, #1
 800f1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	606b      	str	r3, [r5, #4]
 800f1d4:	602a      	str	r2, [r5, #0]
 800f1d6:	e7ed      	b.n	800f1b4 <ucdr_deserialize_endian_double+0x110>
 800f1d8:	68a2      	ldr	r2, [r4, #8]
 800f1da:	6923      	ldr	r3, [r4, #16]
 800f1dc:	7da0      	ldrb	r0, [r4, #22]
 800f1de:	f884 9015 	strb.w	r9, [r4, #21]
 800f1e2:	1b92      	subs	r2, r2, r6
 800f1e4:	1b9b      	subs	r3, r3, r6
 800f1e6:	60a2      	str	r2, [r4, #8]
 800f1e8:	6123      	str	r3, [r4, #16]
 800f1ea:	f080 0001 	eor.w	r0, r0, #1
 800f1ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1f2:	68a3      	ldr	r3, [r4, #8]
 800f1f4:	799b      	ldrb	r3, [r3, #6]
 800f1f6:	706b      	strb	r3, [r5, #1]
 800f1f8:	1cab      	adds	r3, r5, #2
 800f1fa:	68a2      	ldr	r2, [r4, #8]
 800f1fc:	7952      	ldrb	r2, [r2, #5]
 800f1fe:	f803 2b01 	strb.w	r2, [r3], #1
 800f202:	68a2      	ldr	r2, [r4, #8]
 800f204:	7912      	ldrb	r2, [r2, #4]
 800f206:	f803 2b01 	strb.w	r2, [r3], #1
 800f20a:	68a2      	ldr	r2, [r4, #8]
 800f20c:	78d2      	ldrb	r2, [r2, #3]
 800f20e:	f803 2b01 	strb.w	r2, [r3], #1
 800f212:	68a2      	ldr	r2, [r4, #8]
 800f214:	7892      	ldrb	r2, [r2, #2]
 800f216:	f803 2b01 	strb.w	r2, [r3], #1
 800f21a:	68a2      	ldr	r2, [r4, #8]
 800f21c:	7852      	ldrb	r2, [r2, #1]
 800f21e:	f803 2b01 	strb.w	r2, [r3], #1
 800f222:	68a2      	ldr	r2, [r4, #8]
 800f224:	7812      	ldrb	r2, [r2, #0]
 800f226:	701a      	strb	r2, [r3, #0]
 800f228:	e797      	b.n	800f15a <ucdr_deserialize_endian_double+0xb6>
 800f22a:	4641      	mov	r1, r8
 800f22c:	4632      	mov	r2, r6
 800f22e:	4628      	mov	r0, r5
 800f230:	f00d faf9 	bl	801c826 <memcpy>
 800f234:	68a1      	ldr	r1, [r4, #8]
 800f236:	4652      	mov	r2, sl
 800f238:	19a8      	adds	r0, r5, r6
 800f23a:	f00d faf4 	bl	801c826 <memcpy>
 800f23e:	e78c      	b.n	800f15a <ucdr_deserialize_endian_double+0xb6>

0800f240 <ucdr_check_buffer_available_for>:
 800f240:	7d83      	ldrb	r3, [r0, #22]
 800f242:	b93b      	cbnz	r3, 800f254 <ucdr_check_buffer_available_for+0x14>
 800f244:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f248:	4419      	add	r1, r3
 800f24a:	4288      	cmp	r0, r1
 800f24c:	bf34      	ite	cc
 800f24e:	2000      	movcc	r0, #0
 800f250:	2001      	movcs	r0, #1
 800f252:	4770      	bx	lr
 800f254:	2000      	movs	r0, #0
 800f256:	4770      	bx	lr

0800f258 <ucdr_check_final_buffer_behavior>:
 800f258:	7d83      	ldrb	r3, [r0, #22]
 800f25a:	b943      	cbnz	r3, 800f26e <ucdr_check_final_buffer_behavior+0x16>
 800f25c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f260:	4291      	cmp	r1, r2
 800f262:	b510      	push	{r4, lr}
 800f264:	4604      	mov	r4, r0
 800f266:	d205      	bcs.n	800f274 <ucdr_check_final_buffer_behavior+0x1c>
 800f268:	2301      	movs	r3, #1
 800f26a:	4618      	mov	r0, r3
 800f26c:	bd10      	pop	{r4, pc}
 800f26e:	2300      	movs	r3, #0
 800f270:	4618      	mov	r0, r3
 800f272:	4770      	bx	lr
 800f274:	6982      	ldr	r2, [r0, #24]
 800f276:	b13a      	cbz	r2, 800f288 <ucdr_check_final_buffer_behavior+0x30>
 800f278:	69c1      	ldr	r1, [r0, #28]
 800f27a:	4790      	blx	r2
 800f27c:	f080 0301 	eor.w	r3, r0, #1
 800f280:	b2db      	uxtb	r3, r3
 800f282:	75a0      	strb	r0, [r4, #22]
 800f284:	4618      	mov	r0, r3
 800f286:	bd10      	pop	{r4, pc}
 800f288:	2001      	movs	r0, #1
 800f28a:	75a0      	strb	r0, [r4, #22]
 800f28c:	e7fa      	b.n	800f284 <ucdr_check_final_buffer_behavior+0x2c>
 800f28e:	bf00      	nop

0800f290 <ucdr_set_on_full_buffer_callback>:
 800f290:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop

0800f298 <ucdr_init_buffer_origin_offset_endian>:
 800f298:	b410      	push	{r4}
 800f29a:	9c01      	ldr	r4, [sp, #4]
 800f29c:	6001      	str	r1, [r0, #0]
 800f29e:	440a      	add	r2, r1
 800f2a0:	6042      	str	r2, [r0, #4]
 800f2a2:	190a      	adds	r2, r1, r4
 800f2a4:	441c      	add	r4, r3
 800f2a6:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800f2aa:	6082      	str	r2, [r0, #8]
 800f2ac:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f2b0:	7503      	strb	r3, [r0, #20]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800f2b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2bc:	7542      	strb	r2, [r0, #21]
 800f2be:	7582      	strb	r2, [r0, #22]
 800f2c0:	4770      	bx	lr
 800f2c2:	bf00      	nop

0800f2c4 <ucdr_init_buffer_origin_offset>:
 800f2c4:	b510      	push	{r4, lr}
 800f2c6:	b082      	sub	sp, #8
 800f2c8:	9c04      	ldr	r4, [sp, #16]
 800f2ca:	9400      	str	r4, [sp, #0]
 800f2cc:	2401      	movs	r4, #1
 800f2ce:	9401      	str	r4, [sp, #4]
 800f2d0:	f7ff ffe2 	bl	800f298 <ucdr_init_buffer_origin_offset_endian>
 800f2d4:	b002      	add	sp, #8
 800f2d6:	bd10      	pop	{r4, pc}

0800f2d8 <ucdr_init_buffer_origin>:
 800f2d8:	b510      	push	{r4, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	2400      	movs	r4, #0
 800f2de:	9400      	str	r4, [sp, #0]
 800f2e0:	f7ff fff0 	bl	800f2c4 <ucdr_init_buffer_origin_offset>
 800f2e4:	b002      	add	sp, #8
 800f2e6:	bd10      	pop	{r4, pc}

0800f2e8 <ucdr_init_buffer>:
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	f7ff bff5 	b.w	800f2d8 <ucdr_init_buffer_origin>
 800f2ee:	bf00      	nop

0800f2f0 <ucdr_alignment>:
 800f2f0:	fbb0 f3f1 	udiv	r3, r0, r1
 800f2f4:	fb03 0011 	mls	r0, r3, r1, r0
 800f2f8:	1a08      	subs	r0, r1, r0
 800f2fa:	3901      	subs	r1, #1
 800f2fc:	4008      	ands	r0, r1
 800f2fe:	4770      	bx	lr

0800f300 <ucdr_buffer_alignment>:
 800f300:	7d43      	ldrb	r3, [r0, #21]
 800f302:	428b      	cmp	r3, r1
 800f304:	d208      	bcs.n	800f318 <ucdr_buffer_alignment+0x18>
 800f306:	6900      	ldr	r0, [r0, #16]
 800f308:	fbb0 f3f1 	udiv	r3, r0, r1
 800f30c:	fb01 0013 	mls	r0, r1, r3, r0
 800f310:	1a08      	subs	r0, r1, r0
 800f312:	3901      	subs	r1, #1
 800f314:	4008      	ands	r0, r1
 800f316:	4770      	bx	lr
 800f318:	2000      	movs	r0, #0
 800f31a:	4770      	bx	lr

0800f31c <ucdr_align_to>:
 800f31c:	b538      	push	{r3, r4, r5, lr}
 800f31e:	4604      	mov	r4, r0
 800f320:	460d      	mov	r5, r1
 800f322:	f7ff ffed 	bl	800f300 <ucdr_buffer_alignment>
 800f326:	68a3      	ldr	r3, [r4, #8]
 800f328:	6921      	ldr	r1, [r4, #16]
 800f32a:	7565      	strb	r5, [r4, #21]
 800f32c:	181a      	adds	r2, r3, r0
 800f32e:	6863      	ldr	r3, [r4, #4]
 800f330:	4293      	cmp	r3, r2
 800f332:	4408      	add	r0, r1
 800f334:	bf28      	it	cs
 800f336:	4613      	movcs	r3, r2
 800f338:	6120      	str	r0, [r4, #16]
 800f33a:	60a3      	str	r3, [r4, #8]
 800f33c:	bd38      	pop	{r3, r4, r5, pc}
 800f33e:	bf00      	nop

0800f340 <ucdr_buffer_length>:
 800f340:	6882      	ldr	r2, [r0, #8]
 800f342:	6800      	ldr	r0, [r0, #0]
 800f344:	1a10      	subs	r0, r2, r0
 800f346:	4770      	bx	lr

0800f348 <ucdr_buffer_remaining>:
 800f348:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800f34c:	1a10      	subs	r0, r2, r0
 800f34e:	4770      	bx	lr

0800f350 <ucdr_check_final_buffer_behavior_array>:
 800f350:	b538      	push	{r3, r4, r5, lr}
 800f352:	7d83      	ldrb	r3, [r0, #22]
 800f354:	b963      	cbnz	r3, 800f370 <ucdr_check_final_buffer_behavior_array+0x20>
 800f356:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	4604      	mov	r4, r0
 800f35e:	460d      	mov	r5, r1
 800f360:	d308      	bcc.n	800f374 <ucdr_check_final_buffer_behavior_array+0x24>
 800f362:	b139      	cbz	r1, 800f374 <ucdr_check_final_buffer_behavior_array+0x24>
 800f364:	6983      	ldr	r3, [r0, #24]
 800f366:	b163      	cbz	r3, 800f382 <ucdr_check_final_buffer_behavior_array+0x32>
 800f368:	69c1      	ldr	r1, [r0, #28]
 800f36a:	4798      	blx	r3
 800f36c:	75a0      	strb	r0, [r4, #22]
 800f36e:	b108      	cbz	r0, 800f374 <ucdr_check_final_buffer_behavior_array+0x24>
 800f370:	2000      	movs	r0, #0
 800f372:	bd38      	pop	{r3, r4, r5, pc}
 800f374:	4620      	mov	r0, r4
 800f376:	f7ff ffe7 	bl	800f348 <ucdr_buffer_remaining>
 800f37a:	42a8      	cmp	r0, r5
 800f37c:	bf28      	it	cs
 800f37e:	4628      	movcs	r0, r5
 800f380:	bd38      	pop	{r3, r4, r5, pc}
 800f382:	2301      	movs	r3, #1
 800f384:	7583      	strb	r3, [r0, #22]
 800f386:	e7f3      	b.n	800f370 <ucdr_check_final_buffer_behavior_array+0x20>

0800f388 <ucdr_advance_buffer>:
 800f388:	b538      	push	{r3, r4, r5, lr}
 800f38a:	4604      	mov	r4, r0
 800f38c:	460d      	mov	r5, r1
 800f38e:	f7ff ff57 	bl	800f240 <ucdr_check_buffer_available_for>
 800f392:	b178      	cbz	r0, 800f3b4 <ucdr_advance_buffer+0x2c>
 800f394:	6923      	ldr	r3, [r4, #16]
 800f396:	68a2      	ldr	r2, [r4, #8]
 800f398:	442b      	add	r3, r5
 800f39a:	6123      	str	r3, [r4, #16]
 800f39c:	2301      	movs	r3, #1
 800f39e:	442a      	add	r2, r5
 800f3a0:	7563      	strb	r3, [r4, #21]
 800f3a2:	60a2      	str	r2, [r4, #8]
 800f3a4:	bd38      	pop	{r3, r4, r5, pc}
 800f3a6:	68a2      	ldr	r2, [r4, #8]
 800f3a8:	6923      	ldr	r3, [r4, #16]
 800f3aa:	4402      	add	r2, r0
 800f3ac:	4403      	add	r3, r0
 800f3ae:	1a2d      	subs	r5, r5, r0
 800f3b0:	60a2      	str	r2, [r4, #8]
 800f3b2:	6123      	str	r3, [r4, #16]
 800f3b4:	4629      	mov	r1, r5
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	4620      	mov	r0, r4
 800f3ba:	f7ff ffc9 	bl	800f350 <ucdr_check_final_buffer_behavior_array>
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	d1f1      	bne.n	800f3a6 <ucdr_advance_buffer+0x1e>
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	7563      	strb	r3, [r4, #21]
 800f3c6:	bd38      	pop	{r3, r4, r5, pc}

0800f3c8 <rcl_get_zero_initialized_init_options>:
 800f3c8:	2000      	movs	r0, #0
 800f3ca:	4770      	bx	lr

0800f3cc <rcl_init_options_init>:
 800f3cc:	b084      	sub	sp, #16
 800f3ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3d0:	b097      	sub	sp, #92	@ 0x5c
 800f3d2:	ae1d      	add	r6, sp, #116	@ 0x74
 800f3d4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800f3d8:	2800      	cmp	r0, #0
 800f3da:	d058      	beq.n	800f48e <rcl_init_options_init+0xc2>
 800f3dc:	6803      	ldr	r3, [r0, #0]
 800f3de:	4605      	mov	r5, r0
 800f3e0:	b133      	cbz	r3, 800f3f0 <rcl_init_options_init+0x24>
 800f3e2:	2464      	movs	r4, #100	@ 0x64
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	b017      	add	sp, #92	@ 0x5c
 800f3e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f3ec:	b004      	add	sp, #16
 800f3ee:	4770      	bx	lr
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	f001 f9cf 	bl	8010794 <rcutils_allocator_is_valid>
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	d049      	beq.n	800f48e <rcl_init_options_init+0xc2>
 800f3fa:	46b4      	mov	ip, r6
 800f3fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f400:	ac11      	add	r4, sp, #68	@ 0x44
 800f402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f404:	f8dc 3000 	ldr.w	r3, [ip]
 800f408:	6023      	str	r3, [r4, #0]
 800f40a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800f40c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f40e:	2050      	movs	r0, #80	@ 0x50
 800f410:	4798      	blx	r3
 800f412:	4604      	mov	r4, r0
 800f414:	6028      	str	r0, [r5, #0]
 800f416:	2800      	cmp	r0, #0
 800f418:	d03b      	beq.n	800f492 <rcl_init_options_init+0xc6>
 800f41a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800f41e:	4686      	mov	lr, r0
 800f420:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f424:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f428:	f8dc 3000 	ldr.w	r3, [ip]
 800f42c:	f8ce 3000 	str.w	r3, [lr]
 800f430:	a802      	add	r0, sp, #8
 800f432:	f001 fa41 	bl	80108b8 <rmw_get_zero_initialized_init_options>
 800f436:	f10d 0e08 	add.w	lr, sp, #8
 800f43a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f43e:	f104 0c18 	add.w	ip, r4, #24
 800f442:	682f      	ldr	r7, [r5, #0]
 800f444:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f448:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f44c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f450:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f454:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f458:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f45c:	ac20      	add	r4, sp, #128	@ 0x80
 800f45e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f462:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f466:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f46a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800f46e:	f107 0018 	add.w	r0, r7, #24
 800f472:	f001 fa4f 	bl	8010914 <rmw_init_options_init>
 800f476:	4604      	mov	r4, r0
 800f478:	2800      	cmp	r0, #0
 800f47a:	d0b3      	beq.n	800f3e4 <rcl_init_options_init+0x18>
 800f47c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800f47e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f480:	6828      	ldr	r0, [r5, #0]
 800f482:	4798      	blx	r3
 800f484:	4620      	mov	r0, r4
 800f486:	f007 f9a5 	bl	80167d4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f48a:	4604      	mov	r4, r0
 800f48c:	e7aa      	b.n	800f3e4 <rcl_init_options_init+0x18>
 800f48e:	240b      	movs	r4, #11
 800f490:	e7a8      	b.n	800f3e4 <rcl_init_options_init+0x18>
 800f492:	240a      	movs	r4, #10
 800f494:	e7a6      	b.n	800f3e4 <rcl_init_options_init+0x18>
 800f496:	bf00      	nop

0800f498 <rcl_init_options_fini>:
 800f498:	b530      	push	{r4, r5, lr}
 800f49a:	b087      	sub	sp, #28
 800f49c:	b1f0      	cbz	r0, 800f4dc <rcl_init_options_fini+0x44>
 800f49e:	6803      	ldr	r3, [r0, #0]
 800f4a0:	4604      	mov	r4, r0
 800f4a2:	b1db      	cbz	r3, 800f4dc <rcl_init_options_fini+0x44>
 800f4a4:	469c      	mov	ip, r3
 800f4a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f4aa:	f10d 0e04 	add.w	lr, sp, #4
 800f4ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f4b2:	f8dc 3000 	ldr.w	r3, [ip]
 800f4b6:	f8ce 3000 	str.w	r3, [lr]
 800f4ba:	a801      	add	r0, sp, #4
 800f4bc:	f001 f96a 	bl	8010794 <rcutils_allocator_is_valid>
 800f4c0:	b160      	cbz	r0, 800f4dc <rcl_init_options_fini+0x44>
 800f4c2:	6820      	ldr	r0, [r4, #0]
 800f4c4:	3018      	adds	r0, #24
 800f4c6:	f001 fad5 	bl	8010a74 <rmw_init_options_fini>
 800f4ca:	4605      	mov	r5, r0
 800f4cc:	b950      	cbnz	r0, 800f4e4 <rcl_init_options_fini+0x4c>
 800f4ce:	6820      	ldr	r0, [r4, #0]
 800f4d0:	9b02      	ldr	r3, [sp, #8]
 800f4d2:	9905      	ldr	r1, [sp, #20]
 800f4d4:	4798      	blx	r3
 800f4d6:	4628      	mov	r0, r5
 800f4d8:	b007      	add	sp, #28
 800f4da:	bd30      	pop	{r4, r5, pc}
 800f4dc:	250b      	movs	r5, #11
 800f4de:	4628      	mov	r0, r5
 800f4e0:	b007      	add	sp, #28
 800f4e2:	bd30      	pop	{r4, r5, pc}
 800f4e4:	f007 f976 	bl	80167d4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f4e8:	4605      	mov	r5, r0
 800f4ea:	e7f8      	b.n	800f4de <rcl_init_options_fini+0x46>

0800f4ec <rcl_init_options_copy>:
 800f4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4f0:	b094      	sub	sp, #80	@ 0x50
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	d058      	beq.n	800f5a8 <rcl_init_options_copy+0xbc>
 800f4f6:	4604      	mov	r4, r0
 800f4f8:	6800      	ldr	r0, [r0, #0]
 800f4fa:	2800      	cmp	r0, #0
 800f4fc:	d054      	beq.n	800f5a8 <rcl_init_options_copy+0xbc>
 800f4fe:	460e      	mov	r6, r1
 800f500:	f001 f948 	bl	8010794 <rcutils_allocator_is_valid>
 800f504:	2800      	cmp	r0, #0
 800f506:	d04f      	beq.n	800f5a8 <rcl_init_options_copy+0xbc>
 800f508:	2e00      	cmp	r6, #0
 800f50a:	d04d      	beq.n	800f5a8 <rcl_init_options_copy+0xbc>
 800f50c:	6833      	ldr	r3, [r6, #0]
 800f50e:	b123      	cbz	r3, 800f51a <rcl_init_options_copy+0x2e>
 800f510:	2464      	movs	r4, #100	@ 0x64
 800f512:	4620      	mov	r0, r4
 800f514:	b014      	add	sp, #80	@ 0x50
 800f516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f51a:	6827      	ldr	r7, [r4, #0]
 800f51c:	46bc      	mov	ip, r7
 800f51e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f522:	ad0f      	add	r5, sp, #60	@ 0x3c
 800f524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f526:	f8dc 3000 	ldr.w	r3, [ip]
 800f52a:	f8d7 8000 	ldr.w	r8, [r7]
 800f52e:	602b      	str	r3, [r5, #0]
 800f530:	4619      	mov	r1, r3
 800f532:	2050      	movs	r0, #80	@ 0x50
 800f534:	47c0      	blx	r8
 800f536:	4605      	mov	r5, r0
 800f538:	6030      	str	r0, [r6, #0]
 800f53a:	b3d0      	cbz	r0, 800f5b2 <rcl_init_options_copy+0xc6>
 800f53c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800f540:	4686      	mov	lr, r0
 800f542:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f546:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f54a:	f8dc 3000 	ldr.w	r3, [ip]
 800f54e:	f8ce 3000 	str.w	r3, [lr]
 800f552:	4668      	mov	r0, sp
 800f554:	f001 f9b0 	bl	80108b8 <rmw_get_zero_initialized_init_options>
 800f558:	46ee      	mov	lr, sp
 800f55a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f55e:	f105 0c18 	add.w	ip, r5, #24
 800f562:	6824      	ldr	r4, [r4, #0]
 800f564:	6835      	ldr	r5, [r6, #0]
 800f566:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f56a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f56e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f572:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f576:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f57a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f57e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f582:	f104 0018 	add.w	r0, r4, #24
 800f586:	f105 0118 	add.w	r1, r5, #24
 800f58a:	f001 fa2b 	bl	80109e4 <rmw_init_options_copy>
 800f58e:	4604      	mov	r4, r0
 800f590:	2800      	cmp	r0, #0
 800f592:	d0be      	beq.n	800f512 <rcl_init_options_copy+0x26>
 800f594:	f001 f90c 	bl	80107b0 <rcutils_get_error_string>
 800f598:	f001 f922 	bl	80107e0 <rcutils_reset_error>
 800f59c:	4630      	mov	r0, r6
 800f59e:	f7ff ff7b 	bl	800f498 <rcl_init_options_fini>
 800f5a2:	b140      	cbz	r0, 800f5b6 <rcl_init_options_copy+0xca>
 800f5a4:	4604      	mov	r4, r0
 800f5a6:	e7b4      	b.n	800f512 <rcl_init_options_copy+0x26>
 800f5a8:	240b      	movs	r4, #11
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	b014      	add	sp, #80	@ 0x50
 800f5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5b2:	240a      	movs	r4, #10
 800f5b4:	e7ad      	b.n	800f512 <rcl_init_options_copy+0x26>
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	b014      	add	sp, #80	@ 0x50
 800f5ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5be:	f007 b909 	b.w	80167d4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f5c2:	bf00      	nop

0800f5c4 <rcl_init_options_set_domain_id>:
 800f5c4:	b120      	cbz	r0, 800f5d0 <rcl_init_options_set_domain_id+0xc>
 800f5c6:	6803      	ldr	r3, [r0, #0]
 800f5c8:	b113      	cbz	r3, 800f5d0 <rcl_init_options_set_domain_id+0xc>
 800f5ca:	6259      	str	r1, [r3, #36]	@ 0x24
 800f5cc:	2000      	movs	r0, #0
 800f5ce:	4770      	bx	lr
 800f5d0:	200b      	movs	r0, #11
 800f5d2:	4770      	bx	lr

0800f5d4 <rcl_get_zero_initialized_publisher>:
 800f5d4:	4b01      	ldr	r3, [pc, #4]	@ (800f5dc <rcl_get_zero_initialized_publisher+0x8>)
 800f5d6:	6818      	ldr	r0, [r3, #0]
 800f5d8:	4770      	bx	lr
 800f5da:	bf00      	nop
 800f5dc:	0801e2dc 	.word	0x0801e2dc

0800f5e0 <rcl_publisher_init>:
 800f5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5e4:	b088      	sub	sp, #32
 800f5e6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800f5e8:	2d00      	cmp	r5, #0
 800f5ea:	d069      	beq.n	800f6c0 <rcl_publisher_init+0xe0>
 800f5ec:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800f5f0:	4604      	mov	r4, r0
 800f5f2:	4648      	mov	r0, r9
 800f5f4:	460e      	mov	r6, r1
 800f5f6:	4690      	mov	r8, r2
 800f5f8:	461f      	mov	r7, r3
 800f5fa:	f001 f8cb 	bl	8010794 <rcutils_allocator_is_valid>
 800f5fe:	2800      	cmp	r0, #0
 800f600:	d05e      	beq.n	800f6c0 <rcl_publisher_init+0xe0>
 800f602:	2c00      	cmp	r4, #0
 800f604:	d05c      	beq.n	800f6c0 <rcl_publisher_init+0xe0>
 800f606:	f8d4 a000 	ldr.w	sl, [r4]
 800f60a:	f1ba 0f00 	cmp.w	sl, #0
 800f60e:	d004      	beq.n	800f61a <rcl_publisher_init+0x3a>
 800f610:	2764      	movs	r7, #100	@ 0x64
 800f612:	4638      	mov	r0, r7
 800f614:	b008      	add	sp, #32
 800f616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f61a:	4630      	mov	r0, r6
 800f61c:	f007 fbd4 	bl	8016dc8 <rcl_node_is_valid>
 800f620:	2800      	cmp	r0, #0
 800f622:	d052      	beq.n	800f6ca <rcl_publisher_init+0xea>
 800f624:	f1b8 0f00 	cmp.w	r8, #0
 800f628:	d04a      	beq.n	800f6c0 <rcl_publisher_init+0xe0>
 800f62a:	2f00      	cmp	r7, #0
 800f62c:	d048      	beq.n	800f6c0 <rcl_publisher_init+0xe0>
 800f62e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800f632:	aa07      	add	r2, sp, #28
 800f634:	9205      	str	r2, [sp, #20]
 800f636:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800f63a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f63e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f642:	f8cd a01c 	str.w	sl, [sp, #28]
 800f646:	4639      	mov	r1, r7
 800f648:	e899 000c 	ldmia.w	r9, {r2, r3}
 800f64c:	4630      	mov	r0, r6
 800f64e:	f007 fc0f 	bl	8016e70 <rcl_node_resolve_name>
 800f652:	4607      	mov	r7, r0
 800f654:	2800      	cmp	r0, #0
 800f656:	d14f      	bne.n	800f6f8 <rcl_publisher_init+0x118>
 800f658:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800f65a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800f65c:	20c8      	movs	r0, #200	@ 0xc8
 800f65e:	4798      	blx	r3
 800f660:	6020      	str	r0, [r4, #0]
 800f662:	2800      	cmp	r0, #0
 800f664:	d04e      	beq.n	800f704 <rcl_publisher_init+0x124>
 800f666:	4630      	mov	r0, r6
 800f668:	f007 fbd0 	bl	8016e0c <rcl_node_get_rmw_handle>
 800f66c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800f670:	9300      	str	r3, [sp, #0]
 800f672:	9a07      	ldr	r2, [sp, #28]
 800f674:	6827      	ldr	r7, [r4, #0]
 800f676:	462b      	mov	r3, r5
 800f678:	4641      	mov	r1, r8
 800f67a:	f001 fd23 	bl	80110c4 <rmw_create_publisher>
 800f67e:	6823      	ldr	r3, [r4, #0]
 800f680:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800f684:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800f688:	b370      	cbz	r0, 800f6e8 <rcl_publisher_init+0x108>
 800f68a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800f68e:	f001 fdf7 	bl	8011280 <rmw_publisher_get_actual_qos>
 800f692:	6823      	ldr	r3, [r4, #0]
 800f694:	4607      	mov	r7, r0
 800f696:	b9d0      	cbnz	r0, 800f6ce <rcl_publisher_init+0xee>
 800f698:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800f69c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800f6a0:	4629      	mov	r1, r5
 800f6a2:	2270      	movs	r2, #112	@ 0x70
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f00d f8be 	bl	801c826 <memcpy>
 800f6aa:	6832      	ldr	r2, [r6, #0]
 800f6ac:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800f6b0:	9807      	ldr	r0, [sp, #28]
 800f6b2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800f6b4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800f6b6:	4798      	blx	r3
 800f6b8:	4638      	mov	r0, r7
 800f6ba:	b008      	add	sp, #32
 800f6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6c0:	270b      	movs	r7, #11
 800f6c2:	4638      	mov	r0, r7
 800f6c4:	b008      	add	sp, #32
 800f6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6ca:	27c8      	movs	r7, #200	@ 0xc8
 800f6cc:	e7a1      	b.n	800f612 <rcl_publisher_init+0x32>
 800f6ce:	b18b      	cbz	r3, 800f6f4 <rcl_publisher_init+0x114>
 800f6d0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800f6d4:	b142      	cbz	r2, 800f6e8 <rcl_publisher_init+0x108>
 800f6d6:	4630      	mov	r0, r6
 800f6d8:	f007 fb98 	bl	8016e0c <rcl_node_get_rmw_handle>
 800f6dc:	6823      	ldr	r3, [r4, #0]
 800f6de:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800f6e2:	f001 fddd 	bl	80112a0 <rmw_destroy_publisher>
 800f6e6:	6823      	ldr	r3, [r4, #0]
 800f6e8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800f6ea:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	4790      	blx	r2
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	6023      	str	r3, [r4, #0]
 800f6f4:	2701      	movs	r7, #1
 800f6f6:	e7db      	b.n	800f6b0 <rcl_publisher_init+0xd0>
 800f6f8:	2867      	cmp	r0, #103	@ 0x67
 800f6fa:	d0d9      	beq.n	800f6b0 <rcl_publisher_init+0xd0>
 800f6fc:	2869      	cmp	r0, #105	@ 0x69
 800f6fe:	d003      	beq.n	800f708 <rcl_publisher_init+0x128>
 800f700:	280a      	cmp	r0, #10
 800f702:	d1f7      	bne.n	800f6f4 <rcl_publisher_init+0x114>
 800f704:	270a      	movs	r7, #10
 800f706:	e7d3      	b.n	800f6b0 <rcl_publisher_init+0xd0>
 800f708:	2767      	movs	r7, #103	@ 0x67
 800f70a:	e7d1      	b.n	800f6b0 <rcl_publisher_init+0xd0>

0800f70c <rcl_publisher_get_default_options>:
 800f70c:	b570      	push	{r4, r5, r6, lr}
 800f70e:	4d14      	ldr	r5, [pc, #80]	@ (800f760 <rcl_publisher_get_default_options+0x54>)
 800f710:	4914      	ldr	r1, [pc, #80]	@ (800f764 <rcl_publisher_get_default_options+0x58>)
 800f712:	b088      	sub	sp, #32
 800f714:	4604      	mov	r4, r0
 800f716:	2250      	movs	r2, #80	@ 0x50
 800f718:	4628      	mov	r0, r5
 800f71a:	f00d f884 	bl	801c826 <memcpy>
 800f71e:	a802      	add	r0, sp, #8
 800f720:	f001 f82a 	bl	8010778 <rcutils_get_default_allocator>
 800f724:	f10d 0c08 	add.w	ip, sp, #8
 800f728:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f72c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800f730:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f734:	466e      	mov	r6, sp
 800f736:	f8dc 3000 	ldr.w	r3, [ip]
 800f73a:	f8ce 3000 	str.w	r3, [lr]
 800f73e:	4630      	mov	r0, r6
 800f740:	f001 f8ca 	bl	80108d8 <rmw_get_default_publisher_options>
 800f744:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f748:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800f74c:	e883 0003 	stmia.w	r3, {r0, r1}
 800f750:	2270      	movs	r2, #112	@ 0x70
 800f752:	4629      	mov	r1, r5
 800f754:	4620      	mov	r0, r4
 800f756:	f00d f866 	bl	801c826 <memcpy>
 800f75a:	4620      	mov	r0, r4
 800f75c:	b008      	add	sp, #32
 800f75e:	bd70      	pop	{r4, r5, r6, pc}
 800f760:	20006f18 	.word	0x20006f18
 800f764:	0801e2e0 	.word	0x0801e2e0

0800f768 <rcl_publish>:
 800f768:	b1f8      	cbz	r0, 800f7aa <rcl_publish+0x42>
 800f76a:	6803      	ldr	r3, [r0, #0]
 800f76c:	b570      	push	{r4, r5, r6, lr}
 800f76e:	4604      	mov	r4, r0
 800f770:	b1b3      	cbz	r3, 800f7a0 <rcl_publish+0x38>
 800f772:	4616      	mov	r6, r2
 800f774:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800f778:	b192      	cbz	r2, 800f7a0 <rcl_publish+0x38>
 800f77a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800f77e:	460d      	mov	r5, r1
 800f780:	f007 f846 	bl	8016810 <rcl_context_is_valid>
 800f784:	b160      	cbz	r0, 800f7a0 <rcl_publish+0x38>
 800f786:	6823      	ldr	r3, [r4, #0]
 800f788:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800f78c:	b140      	cbz	r0, 800f7a0 <rcl_publish+0x38>
 800f78e:	b155      	cbz	r5, 800f7a6 <rcl_publish+0x3e>
 800f790:	4632      	mov	r2, r6
 800f792:	4629      	mov	r1, r5
 800f794:	f001 fc36 	bl	8011004 <rmw_publish>
 800f798:	3800      	subs	r0, #0
 800f79a:	bf18      	it	ne
 800f79c:	2001      	movne	r0, #1
 800f79e:	bd70      	pop	{r4, r5, r6, pc}
 800f7a0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800f7a4:	bd70      	pop	{r4, r5, r6, pc}
 800f7a6:	200b      	movs	r0, #11
 800f7a8:	bd70      	pop	{r4, r5, r6, pc}
 800f7aa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800f7ae:	4770      	bx	lr

0800f7b0 <rcl_publisher_is_valid>:
 800f7b0:	b1a0      	cbz	r0, 800f7dc <rcl_publisher_is_valid+0x2c>
 800f7b2:	6803      	ldr	r3, [r0, #0]
 800f7b4:	b510      	push	{r4, lr}
 800f7b6:	4604      	mov	r4, r0
 800f7b8:	b173      	cbz	r3, 800f7d8 <rcl_publisher_is_valid+0x28>
 800f7ba:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800f7be:	b15a      	cbz	r2, 800f7d8 <rcl_publisher_is_valid+0x28>
 800f7c0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800f7c4:	f007 f824 	bl	8016810 <rcl_context_is_valid>
 800f7c8:	b130      	cbz	r0, 800f7d8 <rcl_publisher_is_valid+0x28>
 800f7ca:	6823      	ldr	r3, [r4, #0]
 800f7cc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800f7d0:	3800      	subs	r0, #0
 800f7d2:	bf18      	it	ne
 800f7d4:	2001      	movne	r0, #1
 800f7d6:	bd10      	pop	{r4, pc}
 800f7d8:	2000      	movs	r0, #0
 800f7da:	bd10      	pop	{r4, pc}
 800f7dc:	2000      	movs	r0, #0
 800f7de:	4770      	bx	lr

0800f7e0 <rcl_publisher_is_valid_except_context>:
 800f7e0:	b130      	cbz	r0, 800f7f0 <rcl_publisher_is_valid_except_context+0x10>
 800f7e2:	6800      	ldr	r0, [r0, #0]
 800f7e4:	b120      	cbz	r0, 800f7f0 <rcl_publisher_is_valid_except_context+0x10>
 800f7e6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800f7ea:	3800      	subs	r0, #0
 800f7ec:	bf18      	it	ne
 800f7ee:	2001      	movne	r0, #1
 800f7f0:	4770      	bx	lr
 800f7f2:	bf00      	nop

0800f7f4 <_rclc_check_for_new_data>:
 800f7f4:	2800      	cmp	r0, #0
 800f7f6:	d046      	beq.n	800f886 <_rclc_check_for_new_data+0x92>
 800f7f8:	b510      	push	{r4, lr}
 800f7fa:	7802      	ldrb	r2, [r0, #0]
 800f7fc:	b084      	sub	sp, #16
 800f7fe:	4603      	mov	r3, r0
 800f800:	2a0a      	cmp	r2, #10
 800f802:	d842      	bhi.n	800f88a <_rclc_check_for_new_data+0x96>
 800f804:	e8df f002 	tbb	[pc, r2]
 800f808:	14181212 	.word	0x14181212
 800f80c:	06060614 	.word	0x06060614
 800f810:	2e1a      	.short	0x2e1a
 800f812:	16          	.byte	0x16
 800f813:	00          	.byte	0x00
 800f814:	6a0a      	ldr	r2, [r1, #32]
 800f816:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f818:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f81c:	2000      	movs	r0, #0
 800f81e:	1a12      	subs	r2, r2, r0
 800f820:	bf18      	it	ne
 800f822:	2201      	movne	r2, #1
 800f824:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f828:	b004      	add	sp, #16
 800f82a:	bd10      	pop	{r4, pc}
 800f82c:	680a      	ldr	r2, [r1, #0]
 800f82e:	e7f2      	b.n	800f816 <_rclc_check_for_new_data+0x22>
 800f830:	698a      	ldr	r2, [r1, #24]
 800f832:	e7f0      	b.n	800f816 <_rclc_check_for_new_data+0x22>
 800f834:	688a      	ldr	r2, [r1, #8]
 800f836:	e7ee      	b.n	800f816 <_rclc_check_for_new_data+0x22>
 800f838:	690a      	ldr	r2, [r1, #16]
 800f83a:	e7ec      	b.n	800f816 <_rclc_check_for_new_data+0x22>
 800f83c:	685c      	ldr	r4, [r3, #4]
 800f83e:	4608      	mov	r0, r1
 800f840:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800f844:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800f848:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800f84c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f850:	9300      	str	r3, [sp, #0]
 800f852:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800f856:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800f85a:	f104 0110 	add.w	r1, r4, #16
 800f85e:	f009 f9b7 	bl	8018bd0 <rcl_action_client_wait_set_get_entities_ready>
 800f862:	e7e1      	b.n	800f828 <_rclc_check_for_new_data+0x34>
 800f864:	685c      	ldr	r4, [r3, #4]
 800f866:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800f86a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800f86e:	e9cd 3200 	strd	r3, r2, [sp]
 800f872:	4608      	mov	r0, r1
 800f874:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800f878:	f104 0220 	add.w	r2, r4, #32
 800f87c:	f104 0110 	add.w	r1, r4, #16
 800f880:	f009 fbbe 	bl	8019000 <rcl_action_server_wait_set_get_entities_ready>
 800f884:	e7d0      	b.n	800f828 <_rclc_check_for_new_data+0x34>
 800f886:	200b      	movs	r0, #11
 800f888:	4770      	bx	lr
 800f88a:	2001      	movs	r0, #1
 800f88c:	e7cc      	b.n	800f828 <_rclc_check_for_new_data+0x34>
 800f88e:	bf00      	nop

0800f890 <_rclc_take_new_data>:
 800f890:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f892:	b09b      	sub	sp, #108	@ 0x6c
 800f894:	2800      	cmp	r0, #0
 800f896:	f000 8088 	beq.w	800f9aa <_rclc_take_new_data+0x11a>
 800f89a:	7803      	ldrb	r3, [r0, #0]
 800f89c:	4604      	mov	r4, r0
 800f89e:	2b0a      	cmp	r3, #10
 800f8a0:	f200 8167 	bhi.w	800fb72 <_rclc_take_new_data+0x2e2>
 800f8a4:	e8df f003 	tbb	[pc, r3]
 800f8a8:	44152d2d 	.word	0x44152d2d
 800f8ac:	19191944 	.word	0x19191944
 800f8b0:	065a      	.short	0x065a
 800f8b2:	15          	.byte	0x15
 800f8b3:	00          	.byte	0x00
 800f8b4:	6840      	ldr	r0, [r0, #4]
 800f8b6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	f040 80b2 	bne.w	800fa24 <_rclc_take_new_data+0x194>
 800f8c0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	f040 80e4 	bne.w	800fa92 <_rclc_take_new_data+0x202>
 800f8ca:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d16f      	bne.n	800f9b2 <_rclc_take_new_data+0x122>
 800f8d2:	2500      	movs	r5, #0
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	b01b      	add	sp, #108	@ 0x6c
 800f8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8da:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f8dc:	6a0b      	ldr	r3, [r1, #32]
 800f8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d0f5      	beq.n	800f8d2 <_rclc_take_new_data+0x42>
 800f8e6:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800f8ea:	f104 0110 	add.w	r1, r4, #16
 800f8ee:	f007 fd1b 	bl	8017328 <rcl_take_request>
 800f8f2:	4605      	mov	r5, r0
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	d0ec      	beq.n	800f8d2 <_rclc_take_new_data+0x42>
 800f8f8:	f240 2359 	movw	r3, #601	@ 0x259
 800f8fc:	4298      	cmp	r0, r3
 800f8fe:	d013      	beq.n	800f928 <_rclc_take_new_data+0x98>
 800f900:	e029      	b.n	800f956 <_rclc_take_new_data+0xc6>
 800f902:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f904:	680b      	ldr	r3, [r1, #0]
 800f906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d0e1      	beq.n	800f8d2 <_rclc_take_new_data+0x42>
 800f90e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800f912:	2300      	movs	r3, #0
 800f914:	aa0a      	add	r2, sp, #40	@ 0x28
 800f916:	f007 fd69 	bl	80173ec <rcl_take>
 800f91a:	4605      	mov	r5, r0
 800f91c:	2800      	cmp	r0, #0
 800f91e:	d0d9      	beq.n	800f8d4 <_rclc_take_new_data+0x44>
 800f920:	f240 1391 	movw	r3, #401	@ 0x191
 800f924:	4298      	cmp	r0, r3
 800f926:	d116      	bne.n	800f956 <_rclc_take_new_data+0xc6>
 800f928:	2300      	movs	r3, #0
 800f92a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800f92e:	e7d1      	b.n	800f8d4 <_rclc_take_new_data+0x44>
 800f930:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f932:	698b      	ldr	r3, [r1, #24]
 800f934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d0ca      	beq.n	800f8d2 <_rclc_take_new_data+0x42>
 800f93c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800f940:	f104 0110 	add.w	r1, r4, #16
 800f944:	f006 fef4 	bl	8016730 <rcl_take_response>
 800f948:	4605      	mov	r5, r0
 800f94a:	2800      	cmp	r0, #0
 800f94c:	d0c1      	beq.n	800f8d2 <_rclc_take_new_data+0x42>
 800f94e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f952:	4298      	cmp	r0, r3
 800f954:	d0be      	beq.n	800f8d4 <_rclc_take_new_data+0x44>
 800f956:	f000 ff43 	bl	80107e0 <rcutils_reset_error>
 800f95a:	e7bb      	b.n	800f8d4 <_rclc_take_new_data+0x44>
 800f95c:	6840      	ldr	r0, [r0, #4]
 800f95e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800f962:	2b00      	cmp	r3, #0
 800f964:	d17d      	bne.n	800fa62 <_rclc_take_new_data+0x1d2>
 800f966:	69c3      	ldr	r3, [r0, #28]
 800f968:	b11b      	cbz	r3, 800f972 <_rclc_take_new_data+0xe2>
 800f96a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d144      	bne.n	800f9fc <_rclc_take_new_data+0x16c>
 800f972:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f976:	2b00      	cmp	r3, #0
 800f978:	f040 80ac 	bne.w	800fad4 <_rclc_take_new_data+0x244>
 800f97c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800f980:	2b00      	cmp	r3, #0
 800f982:	d0a6      	beq.n	800f8d2 <_rclc_take_new_data+0x42>
 800f984:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800f986:	a90a      	add	r1, sp, #40	@ 0x28
 800f988:	3010      	adds	r0, #16
 800f98a:	f008 fff9 	bl	8018980 <rcl_action_take_result_response>
 800f98e:	4605      	mov	r5, r0
 800f990:	2800      	cmp	r0, #0
 800f992:	d1e0      	bne.n	800f956 <_rclc_take_new_data+0xc6>
 800f994:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f998:	6860      	ldr	r0, [r4, #4]
 800f99a:	f009 fc55 	bl	8019248 <rclc_action_find_handle_by_result_request_sequence_number>
 800f99e:	2800      	cmp	r0, #0
 800f9a0:	d098      	beq.n	800f8d4 <_rclc_take_new_data+0x44>
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800f9a8:	e794      	b.n	800f8d4 <_rclc_take_new_data+0x44>
 800f9aa:	250b      	movs	r5, #11
 800f9ac:	4628      	mov	r0, r5
 800f9ae:	b01b      	add	sp, #108	@ 0x6c
 800f9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9b2:	ae04      	add	r6, sp, #16
 800f9b4:	aa0a      	add	r2, sp, #40	@ 0x28
 800f9b6:	3010      	adds	r0, #16
 800f9b8:	4631      	mov	r1, r6
 800f9ba:	f009 fa55 	bl	8018e68 <rcl_action_take_cancel_request>
 800f9be:	4605      	mov	r5, r0
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	d1c8      	bne.n	800f956 <_rclc_take_new_data+0xc6>
 800f9c4:	6860      	ldr	r0, [r4, #4]
 800f9c6:	a90a      	add	r1, sp, #40	@ 0x28
 800f9c8:	f009 fbfc 	bl	80191c4 <rclc_action_find_goal_handle_by_uuid>
 800f9cc:	4607      	mov	r7, r0
 800f9ce:	2800      	cmp	r0, #0
 800f9d0:	f000 80bb 	beq.w	800fb4a <_rclc_take_new_data+0x2ba>
 800f9d4:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800f9d8:	2101      	movs	r1, #1
 800f9da:	f009 fb7d 	bl	80190d8 <rcl_action_transition_goal_state>
 800f9de:	2803      	cmp	r0, #3
 800f9e0:	4684      	mov	ip, r0
 800f9e2:	f040 80a7 	bne.w	800fb34 <_rclc_take_new_data+0x2a4>
 800f9e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f9e8:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800f9ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f9ee:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f9f2:	e884 0003 	stmia.w	r4, {r0, r1}
 800f9f6:	f887 c008 	strb.w	ip, [r7, #8]
 800f9fa:	e76b      	b.n	800f8d4 <_rclc_take_new_data+0x44>
 800f9fc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f9fe:	3010      	adds	r0, #16
 800fa00:	f009 f83e 	bl	8018a80 <rcl_action_take_feedback>
 800fa04:	4605      	mov	r5, r0
 800fa06:	2800      	cmp	r0, #0
 800fa08:	d1a5      	bne.n	800f956 <_rclc_take_new_data+0xc6>
 800fa0a:	6860      	ldr	r0, [r4, #4]
 800fa0c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800fa0e:	f009 fbd9 	bl	80191c4 <rclc_action_find_goal_handle_by_uuid>
 800fa12:	4603      	mov	r3, r0
 800fa14:	2800      	cmp	r0, #0
 800fa16:	f000 80a3 	beq.w	800fb60 <_rclc_take_new_data+0x2d0>
 800fa1a:	2201      	movs	r2, #1
 800fa1c:	6860      	ldr	r0, [r4, #4]
 800fa1e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800fa22:	e7a6      	b.n	800f972 <_rclc_take_new_data+0xe2>
 800fa24:	f009 fba8 	bl	8019178 <rclc_action_take_goal_handle>
 800fa28:	4606      	mov	r6, r0
 800fa2a:	6860      	ldr	r0, [r4, #4]
 800fa2c:	2e00      	cmp	r6, #0
 800fa2e:	f43f af47 	beq.w	800f8c0 <_rclc_take_new_data+0x30>
 800fa32:	6070      	str	r0, [r6, #4]
 800fa34:	69f2      	ldr	r2, [r6, #28]
 800fa36:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800fa3a:	3010      	adds	r0, #16
 800fa3c:	f009 f95c 	bl	8018cf8 <rcl_action_take_goal_request>
 800fa40:	4605      	mov	r5, r0
 800fa42:	2800      	cmp	r0, #0
 800fa44:	f040 808e 	bne.w	800fb64 <_rclc_take_new_data+0x2d4>
 800fa48:	69f7      	ldr	r7, [r6, #28]
 800fa4a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fa4c:	7235      	strb	r5, [r6, #8]
 800fa4e:	f8c6 0009 	str.w	r0, [r6, #9]
 800fa52:	f8c6 100d 	str.w	r1, [r6, #13]
 800fa56:	6860      	ldr	r0, [r4, #4]
 800fa58:	f8c6 2011 	str.w	r2, [r6, #17]
 800fa5c:	f8c6 3015 	str.w	r3, [r6, #21]
 800fa60:	e72e      	b.n	800f8c0 <_rclc_take_new_data+0x30>
 800fa62:	aa04      	add	r2, sp, #16
 800fa64:	a90a      	add	r1, sp, #40	@ 0x28
 800fa66:	3010      	adds	r0, #16
 800fa68:	f008 ff12 	bl	8018890 <rcl_action_take_goal_response>
 800fa6c:	4605      	mov	r5, r0
 800fa6e:	2800      	cmp	r0, #0
 800fa70:	f47f af71 	bne.w	800f956 <_rclc_take_new_data+0xc6>
 800fa74:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fa78:	6860      	ldr	r0, [r4, #4]
 800fa7a:	f009 fbd3 	bl	8019224 <rclc_action_find_handle_by_goal_request_sequence_number>
 800fa7e:	b130      	cbz	r0, 800fa8e <_rclc_take_new_data+0x1fe>
 800fa80:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800fa84:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800fa88:	2201      	movs	r2, #1
 800fa8a:	f880 2020 	strb.w	r2, [r0, #32]
 800fa8e:	6860      	ldr	r0, [r4, #4]
 800fa90:	e769      	b.n	800f966 <_rclc_take_new_data+0xd6>
 800fa92:	aa04      	add	r2, sp, #16
 800fa94:	3010      	adds	r0, #16
 800fa96:	a90a      	add	r1, sp, #40	@ 0x28
 800fa98:	f009 f9a6 	bl	8018de8 <rcl_action_take_result_request>
 800fa9c:	4605      	mov	r5, r0
 800fa9e:	2800      	cmp	r0, #0
 800faa0:	f47f af59 	bne.w	800f956 <_rclc_take_new_data+0xc6>
 800faa4:	6860      	ldr	r0, [r4, #4]
 800faa6:	a904      	add	r1, sp, #16
 800faa8:	f009 fb8c 	bl	80191c4 <rclc_action_find_goal_handle_by_uuid>
 800faac:	4607      	mov	r7, r0
 800faae:	b160      	cbz	r0, 800faca <_rclc_take_new_data+0x23a>
 800fab0:	ad0a      	add	r5, sp, #40	@ 0x28
 800fab2:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800fab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fab8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800faba:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fabe:	f04f 0c02 	mov.w	ip, #2
 800fac2:	e886 0003 	stmia.w	r6, {r0, r1}
 800fac6:	f887 c008 	strb.w	ip, [r7, #8]
 800faca:	6860      	ldr	r0, [r4, #4]
 800facc:	2300      	movs	r3, #0
 800face:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800fad2:	e6fa      	b.n	800f8ca <_rclc_take_new_data+0x3a>
 800fad4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800fad8:	a90a      	add	r1, sp, #40	@ 0x28
 800fada:	3010      	adds	r0, #16
 800fadc:	f008 ff90 	bl	8018a00 <rcl_action_take_cancel_response>
 800fae0:	4605      	mov	r5, r0
 800fae2:	2800      	cmp	r0, #0
 800fae4:	f47f af37 	bne.w	800f956 <_rclc_take_new_data+0xc6>
 800fae8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800faec:	6860      	ldr	r0, [r4, #4]
 800faee:	f009 fbbd 	bl	801926c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800faf2:	4606      	mov	r6, r0
 800faf4:	6860      	ldr	r0, [r4, #4]
 800faf6:	2e00      	cmp	r6, #0
 800faf8:	f43f af40 	beq.w	800f97c <_rclc_take_new_data+0xec>
 800fafc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800fafe:	2701      	movs	r7, #1
 800fb00:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	f43f af3a 	beq.w	800f97c <_rclc_take_new_data+0xec>
 800fb08:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800fb0a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800fb0e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800fb12:	f009 fb57 	bl	80191c4 <rclc_action_find_goal_handle_by_uuid>
 800fb16:	b138      	cbz	r0, 800fb28 <_rclc_take_new_data+0x298>
 800fb18:	6860      	ldr	r0, [r4, #4]
 800fb1a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800fb1c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800fb20:	3501      	adds	r5, #1
 800fb22:	42ab      	cmp	r3, r5
 800fb24:	d8f0      	bhi.n	800fb08 <_rclc_take_new_data+0x278>
 800fb26:	e729      	b.n	800f97c <_rclc_take_new_data+0xec>
 800fb28:	6860      	ldr	r0, [r4, #4]
 800fb2a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800fb2c:	3501      	adds	r5, #1
 800fb2e:	42ab      	cmp	r3, r5
 800fb30:	d8ea      	bhi.n	800fb08 <_rclc_take_new_data+0x278>
 800fb32:	e723      	b.n	800f97c <_rclc_take_new_data+0xec>
 800fb34:	ab06      	add	r3, sp, #24
 800fb36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb38:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fb3c:	2103      	movs	r1, #3
 800fb3e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800fb42:	6860      	ldr	r0, [r4, #4]
 800fb44:	f009 fc08 	bl	8019358 <rclc_action_server_goal_cancel_reject>
 800fb48:	e6c4      	b.n	800f8d4 <_rclc_take_new_data+0x44>
 800fb4a:	ab06      	add	r3, sp, #24
 800fb4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb4e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fb52:	2102      	movs	r1, #2
 800fb54:	e896 000c 	ldmia.w	r6, {r2, r3}
 800fb58:	6860      	ldr	r0, [r4, #4]
 800fb5a:	f009 fbfd 	bl	8019358 <rclc_action_server_goal_cancel_reject>
 800fb5e:	e6b9      	b.n	800f8d4 <_rclc_take_new_data+0x44>
 800fb60:	6860      	ldr	r0, [r4, #4]
 800fb62:	e706      	b.n	800f972 <_rclc_take_new_data+0xe2>
 800fb64:	6860      	ldr	r0, [r4, #4]
 800fb66:	4631      	mov	r1, r6
 800fb68:	f009 fb16 	bl	8019198 <rclc_action_remove_used_goal_handle>
 800fb6c:	f000 fe38 	bl	80107e0 <rcutils_reset_error>
 800fb70:	e6b0      	b.n	800f8d4 <_rclc_take_new_data+0x44>
 800fb72:	2501      	movs	r5, #1
 800fb74:	e6ae      	b.n	800f8d4 <_rclc_take_new_data+0x44>
 800fb76:	bf00      	nop

0800fb78 <_rclc_execute.part.0>:
 800fb78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb7a:	7803      	ldrb	r3, [r0, #0]
 800fb7c:	b087      	sub	sp, #28
 800fb7e:	4604      	mov	r4, r0
 800fb80:	2b0a      	cmp	r3, #10
 800fb82:	f200 8136 	bhi.w	800fdf2 <_rclc_execute.part.0+0x27a>
 800fb86:	e8df f003 	tbb	[pc, r3]
 800fb8a:	435e      	.short	0x435e
 800fb8c:	06a1664f 	.word	0x06a1664f
 800fb90:	6c1e0606 	.word	0x6c1e0606
 800fb94:	59          	.byte	0x59
 800fb95:	00          	.byte	0x00
 800fb96:	2b06      	cmp	r3, #6
 800fb98:	f000 8122 	beq.w	800fde0 <_rclc_execute.part.0+0x268>
 800fb9c:	2b07      	cmp	r3, #7
 800fb9e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fba0:	f040 8118 	bne.w	800fdd4 <_rclc_execute.part.0+0x25c>
 800fba4:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800fba8:	6880      	ldr	r0, [r0, #8]
 800fbaa:	4798      	blx	r3
 800fbac:	f104 0110 	add.w	r1, r4, #16
 800fbb0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800fbb2:	6860      	ldr	r0, [r4, #4]
 800fbb4:	f007 fbf8 	bl	80173a8 <rcl_send_response>
 800fbb8:	2800      	cmp	r0, #0
 800fbba:	d033      	beq.n	800fc24 <_rclc_execute.part.0+0xac>
 800fbbc:	9005      	str	r0, [sp, #20]
 800fbbe:	f000 fe0f 	bl	80107e0 <rcutils_reset_error>
 800fbc2:	9805      	ldr	r0, [sp, #20]
 800fbc4:	e02e      	b.n	800fc24 <_rclc_execute.part.0+0xac>
 800fbc6:	6840      	ldr	r0, [r0, #4]
 800fbc8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	f000 8086 	beq.w	800fcde <_rclc_execute.part.0+0x166>
 800fbd2:	2600      	movs	r6, #0
 800fbd4:	2701      	movs	r7, #1
 800fbd6:	e004      	b.n	800fbe2 <_rclc_execute.part.0+0x6a>
 800fbd8:	f009 faa8 	bl	801912c <rclc_action_send_result_request>
 800fbdc:	b998      	cbnz	r0, 800fc06 <_rclc_execute.part.0+0x8e>
 800fbde:	722f      	strb	r7, [r5, #8]
 800fbe0:	6860      	ldr	r0, [r4, #4]
 800fbe2:	f009 fb55 	bl	8019290 <rclc_action_find_first_handle_with_goal_response>
 800fbe6:	4605      	mov	r5, r0
 800fbe8:	2800      	cmp	r0, #0
 800fbea:	d077      	beq.n	800fcdc <_rclc_execute.part.0+0x164>
 800fbec:	6863      	ldr	r3, [r4, #4]
 800fbee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fbf0:	699b      	ldr	r3, [r3, #24]
 800fbf2:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800fbf6:	f885 6020 	strb.w	r6, [r5, #32]
 800fbfa:	4798      	blx	r3
 800fbfc:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800fc00:	4628      	mov	r0, r5
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d1e8      	bne.n	800fbd8 <_rclc_execute.part.0+0x60>
 800fc06:	6860      	ldr	r0, [r4, #4]
 800fc08:	4629      	mov	r1, r5
 800fc0a:	f009 fac5 	bl	8019198 <rclc_action_remove_used_goal_handle>
 800fc0e:	e7e7      	b.n	800fbe0 <_rclc_execute.part.0+0x68>
 800fc10:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800fc14:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800fc18:	2d00      	cmp	r5, #0
 800fc1a:	f000 80c9 	beq.w	800fdb0 <_rclc_execute.part.0+0x238>
 800fc1e:	6880      	ldr	r0, [r0, #8]
 800fc20:	4798      	blx	r3
 800fc22:	2000      	movs	r0, #0
 800fc24:	b007      	add	sp, #28
 800fc26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc28:	6840      	ldr	r0, [r0, #4]
 800fc2a:	f007 feef 	bl	8017a0c <rcl_timer_call>
 800fc2e:	f240 3321 	movw	r3, #801	@ 0x321
 800fc32:	4298      	cmp	r0, r3
 800fc34:	d004      	beq.n	800fc40 <_rclc_execute.part.0+0xc8>
 800fc36:	2800      	cmp	r0, #0
 800fc38:	d0f4      	beq.n	800fc24 <_rclc_execute.part.0+0xac>
 800fc3a:	e7bf      	b.n	800fbbc <_rclc_execute.part.0+0x44>
 800fc3c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fc3e:	4798      	blx	r3
 800fc40:	2000      	movs	r0, #0
 800fc42:	b007      	add	sp, #28
 800fc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc46:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800fc4a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fc4c:	b925      	cbnz	r5, 800fc58 <_rclc_execute.part.0+0xe0>
 800fc4e:	4628      	mov	r0, r5
 800fc50:	4798      	blx	r3
 800fc52:	4628      	mov	r0, r5
 800fc54:	e7e6      	b.n	800fc24 <_rclc_execute.part.0+0xac>
 800fc56:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fc58:	68a0      	ldr	r0, [r4, #8]
 800fc5a:	4798      	blx	r3
 800fc5c:	2000      	movs	r0, #0
 800fc5e:	b007      	add	sp, #28
 800fc60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc62:	6840      	ldr	r0, [r0, #4]
 800fc64:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800fc68:	bb3b      	cbnz	r3, 800fcba <_rclc_execute.part.0+0x142>
 800fc6a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d07b      	beq.n	800fd6a <_rclc_execute.part.0+0x1f2>
 800fc72:	f640 0634 	movw	r6, #2100	@ 0x834
 800fc76:	2701      	movs	r7, #1
 800fc78:	e007      	b.n	800fc8a <_rclc_execute.part.0+0x112>
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	f009 fb20 	bl	80192c0 <rclc_action_server_response_goal_request>
 800fc80:	6860      	ldr	r0, [r4, #4]
 800fc82:	4629      	mov	r1, r5
 800fc84:	f009 fa88 	bl	8019198 <rclc_action_remove_used_goal_handle>
 800fc88:	6860      	ldr	r0, [r4, #4]
 800fc8a:	2100      	movs	r1, #0
 800fc8c:	f009 fab2 	bl	80191f4 <rclc_action_find_first_handle_by_status>
 800fc90:	4605      	mov	r5, r0
 800fc92:	2800      	cmp	r0, #0
 800fc94:	d066      	beq.n	800fd64 <_rclc_execute.part.0+0x1ec>
 800fc96:	6863      	ldr	r3, [r4, #4]
 800fc98:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fc9a:	699b      	ldr	r3, [r3, #24]
 800fc9c:	4798      	blx	r3
 800fc9e:	42b0      	cmp	r0, r6
 800fca0:	f04f 0100 	mov.w	r1, #0
 800fca4:	d1e9      	bne.n	800fc7a <_rclc_execute.part.0+0x102>
 800fca6:	2101      	movs	r1, #1
 800fca8:	4628      	mov	r0, r5
 800fcaa:	f009 fb09 	bl	80192c0 <rclc_action_server_response_goal_request>
 800fcae:	722f      	strb	r7, [r5, #8]
 800fcb0:	e7ea      	b.n	800fc88 <_rclc_execute.part.0+0x110>
 800fcb2:	6848      	ldr	r0, [r1, #4]
 800fcb4:	f009 fa70 	bl	8019198 <rclc_action_remove_used_goal_handle>
 800fcb8:	6860      	ldr	r0, [r4, #4]
 800fcba:	f009 faa7 	bl	801920c <rclc_action_find_first_terminated_handle>
 800fcbe:	4601      	mov	r1, r0
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	d1f6      	bne.n	800fcb2 <_rclc_execute.part.0+0x13a>
 800fcc4:	6860      	ldr	r0, [r4, #4]
 800fcc6:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800fcca:	e7ce      	b.n	800fc6a <_rclc_execute.part.0+0xf2>
 800fccc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fcce:	6880      	ldr	r0, [r0, #8]
 800fcd0:	f104 0110 	add.w	r1, r4, #16
 800fcd4:	4798      	blx	r3
 800fcd6:	2000      	movs	r0, #0
 800fcd8:	b007      	add	sp, #28
 800fcda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcdc:	6860      	ldr	r0, [r4, #4]
 800fcde:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fce2:	b18b      	cbz	r3, 800fd08 <_rclc_execute.part.0+0x190>
 800fce4:	68c5      	ldr	r5, [r0, #12]
 800fce6:	b32d      	cbz	r5, 800fd34 <_rclc_execute.part.0+0x1bc>
 800fce8:	2600      	movs	r6, #0
 800fcea:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800fcee:	b143      	cbz	r3, 800fd02 <_rclc_execute.part.0+0x18a>
 800fcf0:	69c3      	ldr	r3, [r0, #28]
 800fcf2:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800fcf6:	b123      	cbz	r3, 800fd02 <_rclc_execute.part.0+0x18a>
 800fcf8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800fcfa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fcfc:	4628      	mov	r0, r5
 800fcfe:	4798      	blx	r3
 800fd00:	6860      	ldr	r0, [r4, #4]
 800fd02:	682d      	ldr	r5, [r5, #0]
 800fd04:	2d00      	cmp	r5, #0
 800fd06:	d1f0      	bne.n	800fcea <_rclc_execute.part.0+0x172>
 800fd08:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800fd0c:	b193      	cbz	r3, 800fd34 <_rclc_execute.part.0+0x1bc>
 800fd0e:	68c5      	ldr	r5, [r0, #12]
 800fd10:	b185      	cbz	r5, 800fd34 <_rclc_execute.part.0+0x1bc>
 800fd12:	2600      	movs	r6, #0
 800fd14:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800fd18:	b14b      	cbz	r3, 800fd2e <_rclc_execute.part.0+0x1b6>
 800fd1a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800fd1c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800fd20:	b12b      	cbz	r3, 800fd2e <_rclc_execute.part.0+0x1b6>
 800fd22:	4628      	mov	r0, r5
 800fd24:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800fd28:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fd2a:	4798      	blx	r3
 800fd2c:	6860      	ldr	r0, [r4, #4]
 800fd2e:	682d      	ldr	r5, [r5, #0]
 800fd30:	2d00      	cmp	r5, #0
 800fd32:	d1ef      	bne.n	800fd14 <_rclc_execute.part.0+0x19c>
 800fd34:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d081      	beq.n	800fc40 <_rclc_execute.part.0+0xc8>
 800fd3c:	2700      	movs	r7, #0
 800fd3e:	e00b      	b.n	800fd58 <_rclc_execute.part.0+0x1e0>
 800fd40:	6863      	ldr	r3, [r4, #4]
 800fd42:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fd44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800fd46:	6a1e      	ldr	r6, [r3, #32]
 800fd48:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800fd4c:	47b0      	blx	r6
 800fd4e:	6860      	ldr	r0, [r4, #4]
 800fd50:	4629      	mov	r1, r5
 800fd52:	f009 fa21 	bl	8019198 <rclc_action_remove_used_goal_handle>
 800fd56:	6860      	ldr	r0, [r4, #4]
 800fd58:	f009 faa6 	bl	80192a8 <rclc_action_find_first_handle_with_result_response>
 800fd5c:	4605      	mov	r5, r0
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	d1ee      	bne.n	800fd40 <_rclc_execute.part.0+0x1c8>
 800fd62:	e76d      	b.n	800fc40 <_rclc_execute.part.0+0xc8>
 800fd64:	6860      	ldr	r0, [r4, #4]
 800fd66:	f880 5020 	strb.w	r5, [r0, #32]
 800fd6a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	f43f af66 	beq.w	800fc40 <_rclc_execute.part.0+0xc8>
 800fd74:	68c5      	ldr	r5, [r0, #12]
 800fd76:	b1b5      	cbz	r5, 800fda6 <_rclc_execute.part.0+0x22e>
 800fd78:	2602      	movs	r6, #2
 800fd7a:	e001      	b.n	800fd80 <_rclc_execute.part.0+0x208>
 800fd7c:	682d      	ldr	r5, [r5, #0]
 800fd7e:	b195      	cbz	r5, 800fda6 <_rclc_execute.part.0+0x22e>
 800fd80:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800fd84:	2b03      	cmp	r3, #3
 800fd86:	d1f9      	bne.n	800fd7c <_rclc_execute.part.0+0x204>
 800fd88:	69c3      	ldr	r3, [r0, #28]
 800fd8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fd8c:	4628      	mov	r0, r5
 800fd8e:	4798      	blx	r3
 800fd90:	4603      	mov	r3, r0
 800fd92:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800fd96:	4628      	mov	r0, r5
 800fd98:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800fd9c:	b163      	cbz	r3, 800fdb8 <_rclc_execute.part.0+0x240>
 800fd9e:	f009 faaf 	bl	8019300 <rclc_action_server_goal_cancel_accept>
 800fda2:	6860      	ldr	r0, [r4, #4]
 800fda4:	e7ea      	b.n	800fd7c <_rclc_execute.part.0+0x204>
 800fda6:	2300      	movs	r3, #0
 800fda8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800fdac:	4618      	mov	r0, r3
 800fdae:	e739      	b.n	800fc24 <_rclc_execute.part.0+0xac>
 800fdb0:	4628      	mov	r0, r5
 800fdb2:	4798      	blx	r3
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	e735      	b.n	800fc24 <_rclc_execute.part.0+0xac>
 800fdb8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800fdba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fdbe:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800fdc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdc6:	6860      	ldr	r0, [r4, #4]
 800fdc8:	2101      	movs	r1, #1
 800fdca:	f009 fac5 	bl	8019358 <rclc_action_server_goal_cancel_reject>
 800fdce:	722e      	strb	r6, [r5, #8]
 800fdd0:	6860      	ldr	r0, [r4, #4]
 800fdd2:	e7d3      	b.n	800fd7c <_rclc_execute.part.0+0x204>
 800fdd4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800fdd6:	6880      	ldr	r0, [r0, #8]
 800fdd8:	4798      	blx	r3
 800fdda:	f104 0110 	add.w	r1, r4, #16
 800fdde:	e6e7      	b.n	800fbb0 <_rclc_execute.part.0+0x38>
 800fde0:	f100 0110 	add.w	r1, r0, #16
 800fde4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fde6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800fde8:	6880      	ldr	r0, [r0, #8]
 800fdea:	9105      	str	r1, [sp, #20]
 800fdec:	4798      	blx	r3
 800fdee:	9905      	ldr	r1, [sp, #20]
 800fdf0:	e6de      	b.n	800fbb0 <_rclc_execute.part.0+0x38>
 800fdf2:	2001      	movs	r0, #1
 800fdf4:	e716      	b.n	800fc24 <_rclc_execute.part.0+0xac>
 800fdf6:	bf00      	nop

0800fdf8 <rclc_executor_trigger_any>:
 800fdf8:	2800      	cmp	r0, #0
 800fdfa:	d03f      	beq.n	800fe7c <rclc_executor_trigger_any+0x84>
 800fdfc:	2900      	cmp	r1, #0
 800fdfe:	d03e      	beq.n	800fe7e <rclc_executor_trigger_any+0x86>
 800fe00:	4603      	mov	r3, r0
 800fe02:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800fe06:	2200      	movs	r2, #0
 800fe08:	2800      	cmp	r0, #0
 800fe0a:	d037      	beq.n	800fe7c <rclc_executor_trigger_any+0x84>
 800fe0c:	b430      	push	{r4, r5}
 800fe0e:	f893 c000 	ldrb.w	ip, [r3]
 800fe12:	f1bc 0f08 	cmp.w	ip, #8
 800fe16:	d11e      	bne.n	800fe56 <rclc_executor_trigger_any+0x5e>
 800fe18:	685c      	ldr	r4, [r3, #4]
 800fe1a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800fe1c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800fe20:	d105      	bne.n	800fe2e <rclc_executor_trigger_any+0x36>
 800fe22:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800fe26:	b910      	cbnz	r0, 800fe2e <rclc_executor_trigger_any+0x36>
 800fe28:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800fe2c:	b128      	cbz	r0, 800fe3a <rclc_executor_trigger_any+0x42>
 800fe2e:	bc30      	pop	{r4, r5}
 800fe30:	4770      	bx	lr
 800fe32:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800fe36:	2800      	cmp	r0, #0
 800fe38:	d1f9      	bne.n	800fe2e <rclc_executor_trigger_any+0x36>
 800fe3a:	3201      	adds	r2, #1
 800fe3c:	4291      	cmp	r1, r2
 800fe3e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800fe42:	d018      	beq.n	800fe76 <rclc_executor_trigger_any+0x7e>
 800fe44:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800fe48:	2800      	cmp	r0, #0
 800fe4a:	d0f0      	beq.n	800fe2e <rclc_executor_trigger_any+0x36>
 800fe4c:	f893 c000 	ldrb.w	ip, [r3]
 800fe50:	f1bc 0f08 	cmp.w	ip, #8
 800fe54:	d0e0      	beq.n	800fe18 <rclc_executor_trigger_any+0x20>
 800fe56:	f1bc 0f09 	cmp.w	ip, #9
 800fe5a:	d1ea      	bne.n	800fe32 <rclc_executor_trigger_any+0x3a>
 800fe5c:	685c      	ldr	r4, [r3, #4]
 800fe5e:	6a25      	ldr	r5, [r4, #32]
 800fe60:	2d00      	cmp	r5, #0
 800fe62:	d1e4      	bne.n	800fe2e <rclc_executor_trigger_any+0x36>
 800fe64:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	d1e0      	bne.n	800fe2e <rclc_executor_trigger_any+0x36>
 800fe6c:	3201      	adds	r2, #1
 800fe6e:	4291      	cmp	r1, r2
 800fe70:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800fe74:	d1e6      	bne.n	800fe44 <rclc_executor_trigger_any+0x4c>
 800fe76:	2000      	movs	r0, #0
 800fe78:	bc30      	pop	{r4, r5}
 800fe7a:	4770      	bx	lr
 800fe7c:	4770      	bx	lr
 800fe7e:	4608      	mov	r0, r1
 800fe80:	4770      	bx	lr
 800fe82:	bf00      	nop

0800fe84 <rclc_executor_get_zero_initialized_executor>:
 800fe84:	b510      	push	{r4, lr}
 800fe86:	4903      	ldr	r1, [pc, #12]	@ (800fe94 <rclc_executor_get_zero_initialized_executor+0x10>)
 800fe88:	4604      	mov	r4, r0
 800fe8a:	2288      	movs	r2, #136	@ 0x88
 800fe8c:	f00c fccb 	bl	801c826 <memcpy>
 800fe90:	4620      	mov	r0, r4
 800fe92:	bd10      	pop	{r4, pc}
 800fe94:	0801e330 	.word	0x0801e330

0800fe98 <rclc_executor_init>:
 800fe98:	2800      	cmp	r0, #0
 800fe9a:	d05f      	beq.n	800ff5c <rclc_executor_init+0xc4>
 800fe9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fea0:	460c      	mov	r4, r1
 800fea2:	b0b0      	sub	sp, #192	@ 0xc0
 800fea4:	2900      	cmp	r1, #0
 800fea6:	d051      	beq.n	800ff4c <rclc_executor_init+0xb4>
 800fea8:	4605      	mov	r5, r0
 800feaa:	4618      	mov	r0, r3
 800feac:	4616      	mov	r6, r2
 800feae:	461f      	mov	r7, r3
 800feb0:	f000 fc70 	bl	8010794 <rcutils_allocator_is_valid>
 800feb4:	2800      	cmp	r0, #0
 800feb6:	d049      	beq.n	800ff4c <rclc_executor_init+0xb4>
 800feb8:	2e00      	cmp	r6, #0
 800feba:	d047      	beq.n	800ff4c <rclc_executor_init+0xb4>
 800febc:	492c      	ldr	r1, [pc, #176]	@ (800ff70 <rclc_executor_init+0xd8>)
 800febe:	2288      	movs	r2, #136	@ 0x88
 800fec0:	a80e      	add	r0, sp, #56	@ 0x38
 800fec2:	f00c fcb0 	bl	801c826 <memcpy>
 800fec6:	a90e      	add	r1, sp, #56	@ 0x38
 800fec8:	2288      	movs	r2, #136	@ 0x88
 800feca:	4628      	mov	r0, r5
 800fecc:	f00c fcab 	bl	801c826 <memcpy>
 800fed0:	602c      	str	r4, [r5, #0]
 800fed2:	4668      	mov	r0, sp
 800fed4:	60ae      	str	r6, [r5, #8]
 800fed6:	466c      	mov	r4, sp
 800fed8:	f007 ff0a 	bl	8017cf0 <rcl_get_zero_initialized_wait_set>
 800fedc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fede:	f105 0c14 	add.w	ip, r5, #20
 800fee2:	f8d7 8000 	ldr.w	r8, [r7]
 800fee6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800feea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800feec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fef2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fef6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800ff68 <rclc_executor_init+0xd0>
 800fefa:	6823      	ldr	r3, [r4, #0]
 800fefc:	f8cc 3000 	str.w	r3, [ip]
 800ff00:	6939      	ldr	r1, [r7, #16]
 800ff02:	612f      	str	r7, [r5, #16]
 800ff04:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800ff08:	01b0      	lsls	r0, r6, #6
 800ff0a:	47c0      	blx	r8
 800ff0c:	6068      	str	r0, [r5, #4]
 800ff0e:	b338      	cbz	r0, 800ff60 <rclc_executor_init+0xc8>
 800ff10:	2400      	movs	r4, #0
 800ff12:	e000      	b.n	800ff16 <rclc_executor_init+0x7e>
 800ff14:	6868      	ldr	r0, [r5, #4]
 800ff16:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800ff1a:	4631      	mov	r1, r6
 800ff1c:	3401      	adds	r4, #1
 800ff1e:	f000 faa3 	bl	8010468 <rclc_executor_handle_init>
 800ff22:	42a6      	cmp	r6, r4
 800ff24:	d1f6      	bne.n	800ff14 <rclc_executor_init+0x7c>
 800ff26:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800ff2a:	f000 fa93 	bl	8010454 <rclc_executor_handle_counters_zero_init>
 800ff2e:	4a11      	ldr	r2, [pc, #68]	@ (800ff74 <rclc_executor_init+0xdc>)
 800ff30:	686b      	ldr	r3, [r5, #4]
 800ff32:	2000      	movs	r0, #0
 800ff34:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800ff38:	b163      	cbz	r3, 800ff54 <rclc_executor_init+0xbc>
 800ff3a:	692b      	ldr	r3, [r5, #16]
 800ff3c:	b153      	cbz	r3, 800ff54 <rclc_executor_init+0xbc>
 800ff3e:	68ab      	ldr	r3, [r5, #8]
 800ff40:	b143      	cbz	r3, 800ff54 <rclc_executor_init+0xbc>
 800ff42:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800ff46:	b030      	add	sp, #192	@ 0xc0
 800ff48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff4c:	200b      	movs	r0, #11
 800ff4e:	b030      	add	sp, #192	@ 0xc0
 800ff50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff54:	4618      	mov	r0, r3
 800ff56:	b030      	add	sp, #192	@ 0xc0
 800ff58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff5c:	200b      	movs	r0, #11
 800ff5e:	4770      	bx	lr
 800ff60:	200a      	movs	r0, #10
 800ff62:	e7f4      	b.n	800ff4e <rclc_executor_init+0xb6>
 800ff64:	f3af 8000 	nop.w
 800ff68:	3b9aca00 	.word	0x3b9aca00
 800ff6c:	00000000 	.word	0x00000000
 800ff70:	0801e330 	.word	0x0801e330
 800ff74:	0800fdf9 	.word	0x0800fdf9

0800ff78 <rclc_executor_add_timer>:
 800ff78:	b300      	cbz	r0, 800ffbc <rclc_executor_add_timer+0x44>
 800ff7a:	b1f9      	cbz	r1, 800ffbc <rclc_executor_add_timer+0x44>
 800ff7c:	b538      	push	{r3, r4, r5, lr}
 800ff7e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800ff82:	4293      	cmp	r3, r2
 800ff84:	4604      	mov	r4, r0
 800ff86:	d301      	bcc.n	800ff8c <rclc_executor_add_timer+0x14>
 800ff88:	2001      	movs	r0, #1
 800ff8a:	bd38      	pop	{r3, r4, r5, pc}
 800ff8c:	6840      	ldr	r0, [r0, #4]
 800ff8e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800ff92:	019d      	lsls	r5, r3, #6
 800ff94:	6051      	str	r1, [r2, #4]
 800ff96:	2102      	movs	r1, #2
 800ff98:	5341      	strh	r1, [r0, r5]
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	2000      	movs	r0, #0
 800ff9e:	2101      	movs	r1, #1
 800ffa0:	f104 0514 	add.w	r5, r4, #20
 800ffa4:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800ffa6:	8711      	strh	r1, [r2, #56]	@ 0x38
 800ffa8:	4628      	mov	r0, r5
 800ffaa:	60e3      	str	r3, [r4, #12]
 800ffac:	f007 feb4 	bl	8017d18 <rcl_wait_set_is_valid>
 800ffb0:	b930      	cbnz	r0, 800ffc0 <rclc_executor_add_timer+0x48>
 800ffb2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	2000      	movs	r0, #0
 800ffb8:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800ffba:	bd38      	pop	{r3, r4, r5, pc}
 800ffbc:	200b      	movs	r0, #11
 800ffbe:	4770      	bx	lr
 800ffc0:	4628      	mov	r0, r5
 800ffc2:	f007 feaf 	bl	8017d24 <rcl_wait_set_fini>
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	d0f3      	beq.n	800ffb2 <rclc_executor_add_timer+0x3a>
 800ffca:	bd38      	pop	{r3, r4, r5, pc}

0800ffcc <rclc_executor_add_service>:
 800ffcc:	b370      	cbz	r0, 801002c <rclc_executor_add_service+0x60>
 800ffce:	b369      	cbz	r1, 801002c <rclc_executor_add_service+0x60>
 800ffd0:	b362      	cbz	r2, 801002c <rclc_executor_add_service+0x60>
 800ffd2:	b35b      	cbz	r3, 801002c <rclc_executor_add_service+0x60>
 800ffd4:	b538      	push	{r3, r4, r5, lr}
 800ffd6:	4604      	mov	r4, r0
 800ffd8:	9804      	ldr	r0, [sp, #16]
 800ffda:	b378      	cbz	r0, 801003c <rclc_executor_add_service+0x70>
 800ffdc:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 800ffe0:	42a8      	cmp	r0, r5
 800ffe2:	d301      	bcc.n	800ffe8 <rclc_executor_add_service+0x1c>
 800ffe4:	2001      	movs	r0, #1
 800ffe6:	bd38      	pop	{r3, r4, r5, pc}
 800ffe8:	6865      	ldr	r5, [r4, #4]
 800ffea:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800ffee:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800fff2:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800fff6:	9b04      	ldr	r3, [sp, #16]
 800fff8:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800fffc:	2305      	movs	r3, #5
 800fffe:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8010002:	3001      	adds	r0, #1
 8010004:	f825 300e 	strh.w	r3, [r5, lr]
 8010008:	2201      	movs	r2, #1
 801000a:	2300      	movs	r3, #0
 801000c:	f104 0514 	add.w	r5, r4, #20
 8010010:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 8010014:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 8010018:	60e0      	str	r0, [r4, #12]
 801001a:	4628      	mov	r0, r5
 801001c:	f007 fe7c 	bl	8017d18 <rcl_wait_set_is_valid>
 8010020:	b930      	cbnz	r0, 8010030 <rclc_executor_add_service+0x64>
 8010022:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8010024:	3301      	adds	r3, #1
 8010026:	2000      	movs	r0, #0
 8010028:	6563      	str	r3, [r4, #84]	@ 0x54
 801002a:	bd38      	pop	{r3, r4, r5, pc}
 801002c:	200b      	movs	r0, #11
 801002e:	4770      	bx	lr
 8010030:	4628      	mov	r0, r5
 8010032:	f007 fe77 	bl	8017d24 <rcl_wait_set_fini>
 8010036:	2800      	cmp	r0, #0
 8010038:	d0f3      	beq.n	8010022 <rclc_executor_add_service+0x56>
 801003a:	e7d4      	b.n	800ffe6 <rclc_executor_add_service+0x1a>
 801003c:	200b      	movs	r0, #11
 801003e:	bd38      	pop	{r3, r4, r5, pc}

08010040 <rclc_executor_prepare>:
 8010040:	2800      	cmp	r0, #0
 8010042:	d044      	beq.n	80100ce <rclc_executor_prepare+0x8e>
 8010044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010046:	f100 0514 	add.w	r5, r0, #20
 801004a:	b09b      	sub	sp, #108	@ 0x6c
 801004c:	4604      	mov	r4, r0
 801004e:	4628      	mov	r0, r5
 8010050:	f007 fe62 	bl	8017d18 <rcl_wait_set_is_valid>
 8010054:	b110      	cbz	r0, 801005c <rclc_executor_prepare+0x1c>
 8010056:	2000      	movs	r0, #0
 8010058:	b01b      	add	sp, #108	@ 0x6c
 801005a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801005c:	4628      	mov	r0, r5
 801005e:	f007 fe61 	bl	8017d24 <rcl_wait_set_fini>
 8010062:	2800      	cmp	r0, #0
 8010064:	d130      	bne.n	80100c8 <rclc_executor_prepare+0x88>
 8010066:	a80c      	add	r0, sp, #48	@ 0x30
 8010068:	f007 fe42 	bl	8017cf0 <rcl_get_zero_initialized_wait_set>
 801006c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8010070:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010074:	46ae      	mov	lr, r5
 8010076:	6927      	ldr	r7, [r4, #16]
 8010078:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801007c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010080:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010084:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010088:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801008c:	f8dc 3000 	ldr.w	r3, [ip]
 8010090:	f8ce 3000 	str.w	r3, [lr]
 8010094:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010096:	ae04      	add	r6, sp, #16
 8010098:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	6822      	ldr	r2, [r4, #0]
 801009e:	6033      	str	r3, [r6, #0]
 80100a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80100a2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80100a4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80100a8:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 80100ac:	e9cd 2100 	strd	r2, r1, [sp]
 80100b0:	4628      	mov	r0, r5
 80100b2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80100b4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80100b6:	f008 f933 	bl	8018320 <rcl_wait_set_init>
 80100ba:	2800      	cmp	r0, #0
 80100bc:	d0cc      	beq.n	8010058 <rclc_executor_prepare+0x18>
 80100be:	900b      	str	r0, [sp, #44]	@ 0x2c
 80100c0:	f000 fb8e 	bl	80107e0 <rcutils_reset_error>
 80100c4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80100c6:	e7c7      	b.n	8010058 <rclc_executor_prepare+0x18>
 80100c8:	f000 fb8a 	bl	80107e0 <rcutils_reset_error>
 80100cc:	e7cb      	b.n	8010066 <rclc_executor_prepare+0x26>
 80100ce:	200b      	movs	r0, #11
 80100d0:	4770      	bx	lr
 80100d2:	bf00      	nop

080100d4 <rclc_executor_spin_some.part.0>:
 80100d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d8:	f100 0614 	add.w	r6, r0, #20
 80100dc:	b083      	sub	sp, #12
 80100de:	4691      	mov	r9, r2
 80100e0:	4698      	mov	r8, r3
 80100e2:	4605      	mov	r5, r0
 80100e4:	f7ff ffac 	bl	8010040 <rclc_executor_prepare>
 80100e8:	4630      	mov	r0, r6
 80100ea:	f007 fee7 	bl	8017ebc <rcl_wait_set_clear>
 80100ee:	4607      	mov	r7, r0
 80100f0:	2800      	cmp	r0, #0
 80100f2:	f040 80ed 	bne.w	80102d0 <rclc_executor_spin_some.part.0+0x1fc>
 80100f6:	68ab      	ldr	r3, [r5, #8]
 80100f8:	4604      	mov	r4, r0
 80100fa:	b303      	cbz	r3, 801013e <rclc_executor_spin_some.part.0+0x6a>
 80100fc:	6869      	ldr	r1, [r5, #4]
 80100fe:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8010102:	01a2      	lsls	r2, r4, #6
 8010104:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8010108:	b1cb      	cbz	r3, 801013e <rclc_executor_spin_some.part.0+0x6a>
 801010a:	5c8b      	ldrb	r3, [r1, r2]
 801010c:	2b0a      	cmp	r3, #10
 801010e:	f200 80d8 	bhi.w	80102c2 <rclc_executor_spin_some.part.0+0x1ee>
 8010112:	e8df f003 	tbb	[pc, r3]
 8010116:	9c9c      	.short	0x9c9c
 8010118:	068c8ca7 	.word	0x068c8ca7
 801011c:	bdc90606 	.word	0xbdc90606
 8010120:	b2          	.byte	0xb2
 8010121:	00          	.byte	0x00
 8010122:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010126:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801012a:	4630      	mov	r0, r6
 801012c:	f008 fa0e 	bl	801854c <rcl_wait_set_add_service>
 8010130:	2800      	cmp	r0, #0
 8010132:	f040 8086 	bne.w	8010242 <rclc_executor_spin_some.part.0+0x16e>
 8010136:	68ab      	ldr	r3, [r5, #8]
 8010138:	3401      	adds	r4, #1
 801013a:	429c      	cmp	r4, r3
 801013c:	d3de      	bcc.n	80100fc <rclc_executor_spin_some.part.0+0x28>
 801013e:	4643      	mov	r3, r8
 8010140:	464a      	mov	r2, r9
 8010142:	4630      	mov	r0, r6
 8010144:	f008 fa30 	bl	80185a8 <rcl_wait>
 8010148:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 801014c:	2b00      	cmp	r3, #0
 801014e:	f000 80c7 	beq.w	80102e0 <rclc_executor_spin_some.part.0+0x20c>
 8010152:	2b01      	cmp	r3, #1
 8010154:	f040 80b5 	bne.w	80102c2 <rclc_executor_spin_some.part.0+0x1ee>
 8010158:	68ab      	ldr	r3, [r5, #8]
 801015a:	2b00      	cmp	r3, #0
 801015c:	f000 8159 	beq.w	8010412 <rclc_executor_spin_some.part.0+0x33e>
 8010160:	2400      	movs	r4, #0
 8010162:	46a0      	mov	r8, r4
 8010164:	f240 1991 	movw	r9, #401	@ 0x191
 8010168:	e00a      	b.n	8010180 <rclc_executor_spin_some.part.0+0xac>
 801016a:	f7ff fb43 	bl	800f7f4 <_rclc_check_for_new_data>
 801016e:	4604      	mov	r4, r0
 8010170:	b110      	cbz	r0, 8010178 <rclc_executor_spin_some.part.0+0xa4>
 8010172:	4548      	cmp	r0, r9
 8010174:	f040 80b2 	bne.w	80102dc <rclc_executor_spin_some.part.0+0x208>
 8010178:	68ab      	ldr	r3, [r5, #8]
 801017a:	4598      	cmp	r8, r3
 801017c:	f080 8126 	bcs.w	80103cc <rclc_executor_spin_some.part.0+0x2f8>
 8010180:	686a      	ldr	r2, [r5, #4]
 8010182:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8010186:	4631      	mov	r1, r6
 8010188:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801018c:	f108 0801 	add.w	r8, r8, #1
 8010190:	f1bc 0f00 	cmp.w	ip, #0
 8010194:	d1e9      	bne.n	801016a <rclc_executor_spin_some.part.0+0x96>
 8010196:	4619      	mov	r1, r3
 8010198:	4610      	mov	r0, r2
 801019a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 801019e:	4798      	blx	r3
 80101a0:	2800      	cmp	r0, #0
 80101a2:	f000 809b 	beq.w	80102dc <rclc_executor_spin_some.part.0+0x208>
 80101a6:	68ab      	ldr	r3, [r5, #8]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	f000 8097 	beq.w	80102dc <rclc_executor_spin_some.part.0+0x208>
 80101ae:	f04f 0800 	mov.w	r8, #0
 80101b2:	f240 1991 	movw	r9, #401	@ 0x191
 80101b6:	e009      	b.n	80101cc <rclc_executor_spin_some.part.0+0xf8>
 80101b8:	f7ff fb6a 	bl	800f890 <_rclc_take_new_data>
 80101bc:	4604      	mov	r4, r0
 80101be:	b110      	cbz	r0, 80101c6 <rclc_executor_spin_some.part.0+0xf2>
 80101c0:	4548      	cmp	r0, r9
 80101c2:	f040 808b 	bne.w	80102dc <rclc_executor_spin_some.part.0+0x208>
 80101c6:	68ab      	ldr	r3, [r5, #8]
 80101c8:	4598      	cmp	r8, r3
 80101ca:	d209      	bcs.n	80101e0 <rclc_executor_spin_some.part.0+0x10c>
 80101cc:	6868      	ldr	r0, [r5, #4]
 80101ce:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80101d2:	4631      	mov	r1, r6
 80101d4:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 80101d8:	f108 0801 	add.w	r8, r8, #1
 80101dc:	2a00      	cmp	r2, #0
 80101de:	d1eb      	bne.n	80101b8 <rclc_executor_spin_some.part.0+0xe4>
 80101e0:	2600      	movs	r6, #0
 80101e2:	b97b      	cbnz	r3, 8010204 <rclc_executor_spin_some.part.0+0x130>
 80101e4:	e07a      	b.n	80102dc <rclc_executor_spin_some.part.0+0x208>
 80101e6:	f812 200c 	ldrb.w	r2, [r2, ip]
 80101ea:	2a08      	cmp	r2, #8
 80101ec:	f000 80fd 	beq.w	80103ea <rclc_executor_spin_some.part.0+0x316>
 80101f0:	2a09      	cmp	r2, #9
 80101f2:	f000 80ef 	beq.w	80103d4 <rclc_executor_spin_some.part.0+0x300>
 80101f6:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 80101fa:	b98a      	cbnz	r2, 8010220 <rclc_executor_spin_some.part.0+0x14c>
 80101fc:	3601      	adds	r6, #1
 80101fe:	429e      	cmp	r6, r3
 8010200:	d262      	bcs.n	80102c8 <rclc_executor_spin_some.part.0+0x1f4>
 8010202:	2400      	movs	r4, #0
 8010204:	686a      	ldr	r2, [r5, #4]
 8010206:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 801020a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 801020e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8010212:	2900      	cmp	r1, #0
 8010214:	d062      	beq.n	80102dc <rclc_executor_spin_some.part.0+0x208>
 8010216:	7841      	ldrb	r1, [r0, #1]
 8010218:	2900      	cmp	r1, #0
 801021a:	d0e4      	beq.n	80101e6 <rclc_executor_spin_some.part.0+0x112>
 801021c:	2901      	cmp	r1, #1
 801021e:	d1ed      	bne.n	80101fc <rclc_executor_spin_some.part.0+0x128>
 8010220:	f7ff fcaa 	bl	800fb78 <_rclc_execute.part.0>
 8010224:	2800      	cmp	r0, #0
 8010226:	f040 80b6 	bne.w	8010396 <rclc_executor_spin_some.part.0+0x2c2>
 801022a:	68ab      	ldr	r3, [r5, #8]
 801022c:	e7e6      	b.n	80101fc <rclc_executor_spin_some.part.0+0x128>
 801022e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010232:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010236:	4630      	mov	r0, r6
 8010238:	f008 f95c 	bl	80184f4 <rcl_wait_set_add_client>
 801023c:	2800      	cmp	r0, #0
 801023e:	f43f af7a 	beq.w	8010136 <rclc_executor_spin_some.part.0+0x62>
 8010242:	9001      	str	r0, [sp, #4]
 8010244:	f000 facc 	bl	80107e0 <rcutils_reset_error>
 8010248:	9801      	ldr	r0, [sp, #4]
 801024a:	4607      	mov	r7, r0
 801024c:	e03c      	b.n	80102c8 <rclc_executor_spin_some.part.0+0x1f4>
 801024e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010252:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010256:	4630      	mov	r0, r6
 8010258:	f007 fe04 	bl	8017e64 <rcl_wait_set_add_subscription>
 801025c:	2800      	cmp	r0, #0
 801025e:	f43f af6a 	beq.w	8010136 <rclc_executor_spin_some.part.0+0x62>
 8010262:	e7ee      	b.n	8010242 <rclc_executor_spin_some.part.0+0x16e>
 8010264:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010268:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801026c:	4630      	mov	r0, r6
 801026e:	f008 f911 	bl	8018494 <rcl_wait_set_add_timer>
 8010272:	2800      	cmp	r0, #0
 8010274:	f43f af5f 	beq.w	8010136 <rclc_executor_spin_some.part.0+0x62>
 8010278:	e7e3      	b.n	8010242 <rclc_executor_spin_some.part.0+0x16e>
 801027a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801027e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010282:	4630      	mov	r0, r6
 8010284:	f008 f8da 	bl	801843c <rcl_wait_set_add_guard_condition>
 8010288:	2800      	cmp	r0, #0
 801028a:	f43f af54 	beq.w	8010136 <rclc_executor_spin_some.part.0+0x62>
 801028e:	e7d8      	b.n	8010242 <rclc_executor_spin_some.part.0+0x16e>
 8010290:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010294:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010298:	3110      	adds	r1, #16
 801029a:	4630      	mov	r0, r6
 801029c:	f008 fe5c 	bl	8018f58 <rcl_action_wait_set_add_action_server>
 80102a0:	2800      	cmp	r0, #0
 80102a2:	f43f af48 	beq.w	8010136 <rclc_executor_spin_some.part.0+0x62>
 80102a6:	e7cc      	b.n	8010242 <rclc_executor_spin_some.part.0+0x16e>
 80102a8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80102ac:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80102b0:	3110      	adds	r1, #16
 80102b2:	2300      	movs	r3, #0
 80102b4:	4630      	mov	r0, r6
 80102b6:	f008 fc27 	bl	8018b08 <rcl_action_wait_set_add_action_client>
 80102ba:	2800      	cmp	r0, #0
 80102bc:	f43f af3b 	beq.w	8010136 <rclc_executor_spin_some.part.0+0x62>
 80102c0:	e7bf      	b.n	8010242 <rclc_executor_spin_some.part.0+0x16e>
 80102c2:	f000 fa8d 	bl	80107e0 <rcutils_reset_error>
 80102c6:	2701      	movs	r7, #1
 80102c8:	4638      	mov	r0, r7
 80102ca:	b003      	add	sp, #12
 80102cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102d0:	f000 fa86 	bl	80107e0 <rcutils_reset_error>
 80102d4:	4638      	mov	r0, r7
 80102d6:	b003      	add	sp, #12
 80102d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102dc:	4627      	mov	r7, r4
 80102de:	e7f3      	b.n	80102c8 <rclc_executor_spin_some.part.0+0x1f4>
 80102e0:	68ab      	ldr	r3, [r5, #8]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	f000 8092 	beq.w	801040c <rclc_executor_spin_some.part.0+0x338>
 80102e8:	2400      	movs	r4, #0
 80102ea:	46a0      	mov	r8, r4
 80102ec:	f240 1991 	movw	r9, #401	@ 0x191
 80102f0:	e008      	b.n	8010304 <rclc_executor_spin_some.part.0+0x230>
 80102f2:	f7ff fa7f 	bl	800f7f4 <_rclc_check_for_new_data>
 80102f6:	4604      	mov	r4, r0
 80102f8:	b108      	cbz	r0, 80102fe <rclc_executor_spin_some.part.0+0x22a>
 80102fa:	4548      	cmp	r0, r9
 80102fc:	d1ee      	bne.n	80102dc <rclc_executor_spin_some.part.0+0x208>
 80102fe:	68ab      	ldr	r3, [r5, #8]
 8010300:	4598      	cmp	r8, r3
 8010302:	d265      	bcs.n	80103d0 <rclc_executor_spin_some.part.0+0x2fc>
 8010304:	686a      	ldr	r2, [r5, #4]
 8010306:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 801030a:	4631      	mov	r1, r6
 801030c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8010310:	f108 0801 	add.w	r8, r8, #1
 8010314:	f1bc 0f00 	cmp.w	ip, #0
 8010318:	d1eb      	bne.n	80102f2 <rclc_executor_spin_some.part.0+0x21e>
 801031a:	4619      	mov	r1, r3
 801031c:	4610      	mov	r0, r2
 801031e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8010322:	4798      	blx	r3
 8010324:	2800      	cmp	r0, #0
 8010326:	d0d9      	beq.n	80102dc <rclc_executor_spin_some.part.0+0x208>
 8010328:	68ab      	ldr	r3, [r5, #8]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d0d6      	beq.n	80102dc <rclc_executor_spin_some.part.0+0x208>
 801032e:	f04f 0800 	mov.w	r8, #0
 8010332:	f240 1991 	movw	r9, #401	@ 0x191
 8010336:	f240 2a59 	movw	sl, #601	@ 0x259
 801033a:	e00e      	b.n	801035a <rclc_executor_spin_some.part.0+0x286>
 801033c:	f813 300b 	ldrb.w	r3, [r3, fp]
 8010340:	2b08      	cmp	r3, #8
 8010342:	d033      	beq.n	80103ac <rclc_executor_spin_some.part.0+0x2d8>
 8010344:	2b09      	cmp	r3, #9
 8010346:	d028      	beq.n	801039a <rclc_executor_spin_some.part.0+0x2c6>
 8010348:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 801034c:	b9fb      	cbnz	r3, 801038e <rclc_executor_spin_some.part.0+0x2ba>
 801034e:	68ab      	ldr	r3, [r5, #8]
 8010350:	f108 0801 	add.w	r8, r8, #1
 8010354:	4598      	cmp	r8, r3
 8010356:	d2b7      	bcs.n	80102c8 <rclc_executor_spin_some.part.0+0x1f4>
 8010358:	2400      	movs	r4, #0
 801035a:	6868      	ldr	r0, [r5, #4]
 801035c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8010360:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8010364:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8010368:	2b00      	cmp	r3, #0
 801036a:	d0b7      	beq.n	80102dc <rclc_executor_spin_some.part.0+0x208>
 801036c:	4631      	mov	r1, r6
 801036e:	f7ff fa8f 	bl	800f890 <_rclc_take_new_data>
 8010372:	b118      	cbz	r0, 801037c <rclc_executor_spin_some.part.0+0x2a8>
 8010374:	4548      	cmp	r0, r9
 8010376:	d001      	beq.n	801037c <rclc_executor_spin_some.part.0+0x2a8>
 8010378:	4550      	cmp	r0, sl
 801037a:	d10c      	bne.n	8010396 <rclc_executor_spin_some.part.0+0x2c2>
 801037c:	686b      	ldr	r3, [r5, #4]
 801037e:	eb13 000b 	adds.w	r0, r3, fp
 8010382:	d021      	beq.n	80103c8 <rclc_executor_spin_some.part.0+0x2f4>
 8010384:	7842      	ldrb	r2, [r0, #1]
 8010386:	2a00      	cmp	r2, #0
 8010388:	d0d8      	beq.n	801033c <rclc_executor_spin_some.part.0+0x268>
 801038a:	2a01      	cmp	r2, #1
 801038c:	d1df      	bne.n	801034e <rclc_executor_spin_some.part.0+0x27a>
 801038e:	f7ff fbf3 	bl	800fb78 <_rclc_execute.part.0>
 8010392:	2800      	cmp	r0, #0
 8010394:	d0db      	beq.n	801034e <rclc_executor_spin_some.part.0+0x27a>
 8010396:	4607      	mov	r7, r0
 8010398:	e796      	b.n	80102c8 <rclc_executor_spin_some.part.0+0x1f4>
 801039a:	6843      	ldr	r3, [r0, #4]
 801039c:	6a1a      	ldr	r2, [r3, #32]
 801039e:	2a00      	cmp	r2, #0
 80103a0:	d1f5      	bne.n	801038e <rclc_executor_spin_some.part.0+0x2ba>
 80103a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d0d1      	beq.n	801034e <rclc_executor_spin_some.part.0+0x27a>
 80103aa:	e7f0      	b.n	801038e <rclc_executor_spin_some.part.0+0x2ba>
 80103ac:	6843      	ldr	r3, [r0, #4]
 80103ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80103b0:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80103b4:	d1eb      	bne.n	801038e <rclc_executor_spin_some.part.0+0x2ba>
 80103b6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80103ba:	2a00      	cmp	r2, #0
 80103bc:	d1e7      	bne.n	801038e <rclc_executor_spin_some.part.0+0x2ba>
 80103be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d0c3      	beq.n	801034e <rclc_executor_spin_some.part.0+0x27a>
 80103c6:	e7e2      	b.n	801038e <rclc_executor_spin_some.part.0+0x2ba>
 80103c8:	270b      	movs	r7, #11
 80103ca:	e77d      	b.n	80102c8 <rclc_executor_spin_some.part.0+0x1f4>
 80103cc:	686a      	ldr	r2, [r5, #4]
 80103ce:	e6e2      	b.n	8010196 <rclc_executor_spin_some.part.0+0xc2>
 80103d0:	686a      	ldr	r2, [r5, #4]
 80103d2:	e7a2      	b.n	801031a <rclc_executor_spin_some.part.0+0x246>
 80103d4:	6842      	ldr	r2, [r0, #4]
 80103d6:	6a11      	ldr	r1, [r2, #32]
 80103d8:	2900      	cmp	r1, #0
 80103da:	f47f af21 	bne.w	8010220 <rclc_executor_spin_some.part.0+0x14c>
 80103de:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 80103e2:	2a00      	cmp	r2, #0
 80103e4:	f43f af0a 	beq.w	80101fc <rclc_executor_spin_some.part.0+0x128>
 80103e8:	e71a      	b.n	8010220 <rclc_executor_spin_some.part.0+0x14c>
 80103ea:	6842      	ldr	r2, [r0, #4]
 80103ec:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80103ee:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 80103f2:	f47f af15 	bne.w	8010220 <rclc_executor_spin_some.part.0+0x14c>
 80103f6:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 80103fa:	2900      	cmp	r1, #0
 80103fc:	f47f af10 	bne.w	8010220 <rclc_executor_spin_some.part.0+0x14c>
 8010400:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8010404:	2a00      	cmp	r2, #0
 8010406:	f43f aef9 	beq.w	80101fc <rclc_executor_spin_some.part.0+0x128>
 801040a:	e709      	b.n	8010220 <rclc_executor_spin_some.part.0+0x14c>
 801040c:	686a      	ldr	r2, [r5, #4]
 801040e:	461c      	mov	r4, r3
 8010410:	e783      	b.n	801031a <rclc_executor_spin_some.part.0+0x246>
 8010412:	686a      	ldr	r2, [r5, #4]
 8010414:	461c      	mov	r4, r3
 8010416:	e6be      	b.n	8010196 <rclc_executor_spin_some.part.0+0xc2>

08010418 <rclc_executor_spin>:
 8010418:	b1d0      	cbz	r0, 8010450 <rclc_executor_spin+0x38>
 801041a:	b510      	push	{r4, lr}
 801041c:	4604      	mov	r4, r0
 801041e:	b082      	sub	sp, #8
 8010420:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 8010424:	6820      	ldr	r0, [r4, #0]
 8010426:	e9cd 2300 	strd	r2, r3, [sp]
 801042a:	f006 f9f1 	bl	8016810 <rcl_context_is_valid>
 801042e:	4601      	mov	r1, r0
 8010430:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010434:	4620      	mov	r0, r4
 8010436:	b131      	cbz	r1, 8010446 <rclc_executor_spin+0x2e>
 8010438:	f7ff fe4c 	bl	80100d4 <rclc_executor_spin_some.part.0>
 801043c:	f030 0302 	bics.w	r3, r0, #2
 8010440:	d0ee      	beq.n	8010420 <rclc_executor_spin+0x8>
 8010442:	b002      	add	sp, #8
 8010444:	bd10      	pop	{r4, pc}
 8010446:	f000 f9cb 	bl	80107e0 <rcutils_reset_error>
 801044a:	2001      	movs	r0, #1
 801044c:	b002      	add	sp, #8
 801044e:	bd10      	pop	{r4, pc}
 8010450:	200b      	movs	r0, #11
 8010452:	4770      	bx	lr

08010454 <rclc_executor_handle_counters_zero_init>:
 8010454:	b130      	cbz	r0, 8010464 <rclc_executor_handle_counters_zero_init+0x10>
 8010456:	b508      	push	{r3, lr}
 8010458:	2220      	movs	r2, #32
 801045a:	2100      	movs	r1, #0
 801045c:	f00c f91a 	bl	801c694 <memset>
 8010460:	2000      	movs	r0, #0
 8010462:	bd08      	pop	{r3, pc}
 8010464:	200b      	movs	r0, #11
 8010466:	4770      	bx	lr

08010468 <rclc_executor_handle_init>:
 8010468:	b168      	cbz	r0, 8010486 <rclc_executor_handle_init+0x1e>
 801046a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8010490 <rclc_executor_handle_init+0x28>
 801046e:	2300      	movs	r3, #0
 8010470:	220b      	movs	r2, #11
 8010472:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 8010476:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801047a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 801047e:	8002      	strh	r2, [r0, #0]
 8010480:	8703      	strh	r3, [r0, #56]	@ 0x38
 8010482:	4618      	mov	r0, r3
 8010484:	4770      	bx	lr
 8010486:	200b      	movs	r0, #11
 8010488:	4770      	bx	lr
 801048a:	bf00      	nop
 801048c:	f3af 8000 	nop.w
	...

08010498 <rclc_support_init_with_options>:
 8010498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801049c:	b083      	sub	sp, #12
 801049e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80104a0:	b340      	cbz	r0, 80104f4 <rclc_support_init_with_options+0x5c>
 80104a2:	461d      	mov	r5, r3
 80104a4:	b333      	cbz	r3, 80104f4 <rclc_support_init_with_options+0x5c>
 80104a6:	b32e      	cbz	r6, 80104f4 <rclc_support_init_with_options+0x5c>
 80104a8:	46e9      	mov	r9, sp
 80104aa:	4604      	mov	r4, r0
 80104ac:	4648      	mov	r0, r9
 80104ae:	460f      	mov	r7, r1
 80104b0:	4690      	mov	r8, r2
 80104b2:	f006 f9a3 	bl	80167fc <rcl_get_zero_initialized_context>
 80104b6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80104ba:	462a      	mov	r2, r5
 80104bc:	e884 0003 	stmia.w	r4, {r0, r1}
 80104c0:	4623      	mov	r3, r4
 80104c2:	4641      	mov	r1, r8
 80104c4:	4638      	mov	r0, r7
 80104c6:	f006 fa09 	bl	80168dc <rcl_init>
 80104ca:	4605      	mov	r5, r0
 80104cc:	b960      	cbnz	r0, 80104e8 <rclc_support_init_with_options+0x50>
 80104ce:	60a6      	str	r6, [r4, #8]
 80104d0:	4632      	mov	r2, r6
 80104d2:	f104 010c 	add.w	r1, r4, #12
 80104d6:	2003      	movs	r0, #3
 80104d8:	f007 f808 	bl	80174ec <rcl_clock_init>
 80104dc:	4605      	mov	r5, r0
 80104de:	b918      	cbnz	r0, 80104e8 <rclc_support_init_with_options+0x50>
 80104e0:	4628      	mov	r0, r5
 80104e2:	b003      	add	sp, #12
 80104e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104e8:	f000 f97a 	bl	80107e0 <rcutils_reset_error>
 80104ec:	4628      	mov	r0, r5
 80104ee:	b003      	add	sp, #12
 80104f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104f4:	250b      	movs	r5, #11
 80104f6:	4628      	mov	r0, r5
 80104f8:	b003      	add	sp, #12
 80104fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104fe:	bf00      	nop

08010500 <rclc_node_init_default>:
 8010500:	b3b8      	cbz	r0, 8010572 <rclc_node_init_default+0x72>
 8010502:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010506:	460d      	mov	r5, r1
 8010508:	b0a1      	sub	sp, #132	@ 0x84
 801050a:	b329      	cbz	r1, 8010558 <rclc_node_init_default+0x58>
 801050c:	4616      	mov	r6, r2
 801050e:	b31a      	cbz	r2, 8010558 <rclc_node_init_default+0x58>
 8010510:	461f      	mov	r7, r3
 8010512:	b30b      	cbz	r3, 8010558 <rclc_node_init_default+0x58>
 8010514:	f10d 0810 	add.w	r8, sp, #16
 8010518:	4604      	mov	r4, r0
 801051a:	4640      	mov	r0, r8
 801051c:	f006 fb04 	bl	8016b28 <rcl_get_zero_initialized_node>
 8010520:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010524:	f10d 0918 	add.w	r9, sp, #24
 8010528:	e884 0003 	stmia.w	r4, {r0, r1}
 801052c:	4648      	mov	r0, r9
 801052e:	f006 fc73 	bl	8016e18 <rcl_node_get_default_options>
 8010532:	4640      	mov	r0, r8
 8010534:	f006 faf8 	bl	8016b28 <rcl_get_zero_initialized_node>
 8010538:	f8cd 9000 	str.w	r9, [sp]
 801053c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010540:	463b      	mov	r3, r7
 8010542:	e884 0003 	stmia.w	r4, {r0, r1}
 8010546:	4632      	mov	r2, r6
 8010548:	4629      	mov	r1, r5
 801054a:	4620      	mov	r0, r4
 801054c:	f006 faf6 	bl	8016b3c <rcl_node_init>
 8010550:	b930      	cbnz	r0, 8010560 <rclc_node_init_default+0x60>
 8010552:	b021      	add	sp, #132	@ 0x84
 8010554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010558:	200b      	movs	r0, #11
 801055a:	b021      	add	sp, #132	@ 0x84
 801055c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010560:	9003      	str	r0, [sp, #12]
 8010562:	f000 f93d 	bl	80107e0 <rcutils_reset_error>
 8010566:	f000 f93b 	bl	80107e0 <rcutils_reset_error>
 801056a:	9803      	ldr	r0, [sp, #12]
 801056c:	b021      	add	sp, #132	@ 0x84
 801056e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010572:	200b      	movs	r0, #11
 8010574:	4770      	bx	lr
 8010576:	bf00      	nop

08010578 <rclc_publisher_init_default>:
 8010578:	b368      	cbz	r0, 80105d6 <rclc_publisher_init_default+0x5e>
 801057a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801057e:	460d      	mov	r5, r1
 8010580:	b0a0      	sub	sp, #128	@ 0x80
 8010582:	b321      	cbz	r1, 80105ce <rclc_publisher_init_default+0x56>
 8010584:	4616      	mov	r6, r2
 8010586:	b312      	cbz	r2, 80105ce <rclc_publisher_init_default+0x56>
 8010588:	461f      	mov	r7, r3
 801058a:	b303      	cbz	r3, 80105ce <rclc_publisher_init_default+0x56>
 801058c:	4604      	mov	r4, r0
 801058e:	f7ff f821 	bl	800f5d4 <rcl_get_zero_initialized_publisher>
 8010592:	f10d 0810 	add.w	r8, sp, #16
 8010596:	6020      	str	r0, [r4, #0]
 8010598:	4640      	mov	r0, r8
 801059a:	f7ff f8b7 	bl	800f70c <rcl_publisher_get_default_options>
 801059e:	490f      	ldr	r1, [pc, #60]	@ (80105dc <rclc_publisher_init_default+0x64>)
 80105a0:	2250      	movs	r2, #80	@ 0x50
 80105a2:	4640      	mov	r0, r8
 80105a4:	f00c f93f 	bl	801c826 <memcpy>
 80105a8:	f8cd 8000 	str.w	r8, [sp]
 80105ac:	463b      	mov	r3, r7
 80105ae:	4632      	mov	r2, r6
 80105b0:	4629      	mov	r1, r5
 80105b2:	4620      	mov	r0, r4
 80105b4:	f7ff f814 	bl	800f5e0 <rcl_publisher_init>
 80105b8:	b910      	cbnz	r0, 80105c0 <rclc_publisher_init_default+0x48>
 80105ba:	b020      	add	sp, #128	@ 0x80
 80105bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105c0:	9003      	str	r0, [sp, #12]
 80105c2:	f000 f90d 	bl	80107e0 <rcutils_reset_error>
 80105c6:	9803      	ldr	r0, [sp, #12]
 80105c8:	b020      	add	sp, #128	@ 0x80
 80105ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ce:	200b      	movs	r0, #11
 80105d0:	b020      	add	sp, #128	@ 0x80
 80105d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105d6:	200b      	movs	r0, #11
 80105d8:	4770      	bx	lr
 80105da:	bf00      	nop
 80105dc:	0801e3b8 	.word	0x0801e3b8

080105e0 <rclc_publisher_init_best_effort>:
 80105e0:	b368      	cbz	r0, 801063e <rclc_publisher_init_best_effort+0x5e>
 80105e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105e6:	460d      	mov	r5, r1
 80105e8:	b0a0      	sub	sp, #128	@ 0x80
 80105ea:	b321      	cbz	r1, 8010636 <rclc_publisher_init_best_effort+0x56>
 80105ec:	4616      	mov	r6, r2
 80105ee:	b312      	cbz	r2, 8010636 <rclc_publisher_init_best_effort+0x56>
 80105f0:	461f      	mov	r7, r3
 80105f2:	b303      	cbz	r3, 8010636 <rclc_publisher_init_best_effort+0x56>
 80105f4:	4604      	mov	r4, r0
 80105f6:	f7fe ffed 	bl	800f5d4 <rcl_get_zero_initialized_publisher>
 80105fa:	f10d 0810 	add.w	r8, sp, #16
 80105fe:	6020      	str	r0, [r4, #0]
 8010600:	4640      	mov	r0, r8
 8010602:	f7ff f883 	bl	800f70c <rcl_publisher_get_default_options>
 8010606:	490f      	ldr	r1, [pc, #60]	@ (8010644 <rclc_publisher_init_best_effort+0x64>)
 8010608:	2250      	movs	r2, #80	@ 0x50
 801060a:	4640      	mov	r0, r8
 801060c:	f00c f90b 	bl	801c826 <memcpy>
 8010610:	f8cd 8000 	str.w	r8, [sp]
 8010614:	463b      	mov	r3, r7
 8010616:	4632      	mov	r2, r6
 8010618:	4629      	mov	r1, r5
 801061a:	4620      	mov	r0, r4
 801061c:	f7fe ffe0 	bl	800f5e0 <rcl_publisher_init>
 8010620:	b910      	cbnz	r0, 8010628 <rclc_publisher_init_best_effort+0x48>
 8010622:	b020      	add	sp, #128	@ 0x80
 8010624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010628:	9003      	str	r0, [sp, #12]
 801062a:	f000 f8d9 	bl	80107e0 <rcutils_reset_error>
 801062e:	9803      	ldr	r0, [sp, #12]
 8010630:	b020      	add	sp, #128	@ 0x80
 8010632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010636:	200b      	movs	r0, #11
 8010638:	b020      	add	sp, #128	@ 0x80
 801063a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801063e:	200b      	movs	r0, #11
 8010640:	4770      	bx	lr
 8010642:	bf00      	nop
 8010644:	0801e408 	.word	0x0801e408

08010648 <rclc_service_init_default>:
 8010648:	b368      	cbz	r0, 80106a6 <rclc_service_init_default+0x5e>
 801064a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801064e:	460d      	mov	r5, r1
 8010650:	b09e      	sub	sp, #120	@ 0x78
 8010652:	b321      	cbz	r1, 801069e <rclc_service_init_default+0x56>
 8010654:	4616      	mov	r6, r2
 8010656:	b312      	cbz	r2, 801069e <rclc_service_init_default+0x56>
 8010658:	461f      	mov	r7, r3
 801065a:	b303      	cbz	r3, 801069e <rclc_service_init_default+0x56>
 801065c:	4604      	mov	r4, r0
 801065e:	f006 fdab 	bl	80171b8 <rcl_get_zero_initialized_service>
 8010662:	f10d 0810 	add.w	r8, sp, #16
 8010666:	6020      	str	r0, [r4, #0]
 8010668:	4640      	mov	r0, r8
 801066a:	f006 fe33 	bl	80172d4 <rcl_service_get_default_options>
 801066e:	490f      	ldr	r1, [pc, #60]	@ (80106ac <rclc_service_init_default+0x64>)
 8010670:	2250      	movs	r2, #80	@ 0x50
 8010672:	4640      	mov	r0, r8
 8010674:	f00c f8d7 	bl	801c826 <memcpy>
 8010678:	f8cd 8000 	str.w	r8, [sp]
 801067c:	463b      	mov	r3, r7
 801067e:	4632      	mov	r2, r6
 8010680:	4629      	mov	r1, r5
 8010682:	4620      	mov	r0, r4
 8010684:	f006 fd9e 	bl	80171c4 <rcl_service_init>
 8010688:	b910      	cbnz	r0, 8010690 <rclc_service_init_default+0x48>
 801068a:	b01e      	add	sp, #120	@ 0x78
 801068c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010690:	9003      	str	r0, [sp, #12]
 8010692:	f000 f8a5 	bl	80107e0 <rcutils_reset_error>
 8010696:	9803      	ldr	r0, [sp, #12]
 8010698:	b01e      	add	sp, #120	@ 0x78
 801069a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801069e:	200b      	movs	r0, #11
 80106a0:	b01e      	add	sp, #120	@ 0x78
 80106a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106a6:	200b      	movs	r0, #11
 80106a8:	4770      	bx	lr
 80106aa:	bf00      	nop
 80106ac:	0801e458 	.word	0x0801e458

080106b0 <rclc_timer_init_default>:
 80106b0:	b360      	cbz	r0, 801070c <rclc_timer_init_default+0x5c>
 80106b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106b6:	460e      	mov	r6, r1
 80106b8:	b08a      	sub	sp, #40	@ 0x28
 80106ba:	b319      	cbz	r1, 8010704 <rclc_timer_init_default+0x54>
 80106bc:	4690      	mov	r8, r2
 80106be:	461f      	mov	r7, r3
 80106c0:	4605      	mov	r5, r0
 80106c2:	f007 f8f1 	bl	80178a8 <rcl_get_zero_initialized_timer>
 80106c6:	68b4      	ldr	r4, [r6, #8]
 80106c8:	6028      	str	r0, [r5, #0]
 80106ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80106cc:	f10d 0c0c 	add.w	ip, sp, #12
 80106d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80106d4:	6823      	ldr	r3, [r4, #0]
 80106d6:	f8cc 3000 	str.w	r3, [ip]
 80106da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80106dc:	9302      	str	r3, [sp, #8]
 80106de:	e9cd 8700 	strd	r8, r7, [sp]
 80106e2:	4628      	mov	r0, r5
 80106e4:	4632      	mov	r2, r6
 80106e6:	f106 010c 	add.w	r1, r6, #12
 80106ea:	f007 f8e5 	bl	80178b8 <rcl_timer_init>
 80106ee:	b910      	cbnz	r0, 80106f6 <rclc_timer_init_default+0x46>
 80106f0:	b00a      	add	sp, #40	@ 0x28
 80106f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106f6:	9009      	str	r0, [sp, #36]	@ 0x24
 80106f8:	f000 f872 	bl	80107e0 <rcutils_reset_error>
 80106fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80106fe:	b00a      	add	sp, #40	@ 0x28
 8010700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010704:	200b      	movs	r0, #11
 8010706:	b00a      	add	sp, #40	@ 0x28
 8010708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801070c:	200b      	movs	r0, #11
 801070e:	4770      	bx	lr

08010710 <__default_zero_allocate>:
 8010710:	f00b bad6 	b.w	801bcc0 <calloc>

08010714 <__default_reallocate>:
 8010714:	f00b bc74 	b.w	801c000 <realloc>

08010718 <__default_deallocate>:
 8010718:	f00b bb50 	b.w	801bdbc <free>

0801071c <__default_allocate>:
 801071c:	f00b bb46 	b.w	801bdac <malloc>

08010720 <rcutils_get_zero_initialized_allocator>:
 8010720:	b510      	push	{r4, lr}
 8010722:	4c05      	ldr	r4, [pc, #20]	@ (8010738 <rcutils_get_zero_initialized_allocator+0x18>)
 8010724:	4686      	mov	lr, r0
 8010726:	4684      	mov	ip, r0
 8010728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801072a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801072e:	6823      	ldr	r3, [r4, #0]
 8010730:	f8cc 3000 	str.w	r3, [ip]
 8010734:	4670      	mov	r0, lr
 8010736:	bd10      	pop	{r4, pc}
 8010738:	0801e4a8 	.word	0x0801e4a8

0801073c <rcutils_set_default_allocator>:
 801073c:	b1a8      	cbz	r0, 801076a <rcutils_set_default_allocator+0x2e>
 801073e:	6802      	ldr	r2, [r0, #0]
 8010740:	b1a2      	cbz	r2, 801076c <rcutils_set_default_allocator+0x30>
 8010742:	6841      	ldr	r1, [r0, #4]
 8010744:	b1a1      	cbz	r1, 8010770 <rcutils_set_default_allocator+0x34>
 8010746:	b410      	push	{r4}
 8010748:	68c4      	ldr	r4, [r0, #12]
 801074a:	b164      	cbz	r4, 8010766 <rcutils_set_default_allocator+0x2a>
 801074c:	6880      	ldr	r0, [r0, #8]
 801074e:	b138      	cbz	r0, 8010760 <rcutils_set_default_allocator+0x24>
 8010750:	4b08      	ldr	r3, [pc, #32]	@ (8010774 <rcutils_set_default_allocator+0x38>)
 8010752:	601a      	str	r2, [r3, #0]
 8010754:	2200      	movs	r2, #0
 8010756:	e9c3 4203 	strd	r4, r2, [r3, #12]
 801075a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 801075e:	2001      	movs	r0, #1
 8010760:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010764:	4770      	bx	lr
 8010766:	4620      	mov	r0, r4
 8010768:	e7fa      	b.n	8010760 <rcutils_set_default_allocator+0x24>
 801076a:	4770      	bx	lr
 801076c:	4610      	mov	r0, r2
 801076e:	4770      	bx	lr
 8010770:	4608      	mov	r0, r1
 8010772:	4770      	bx	lr
 8010774:	200003a0 	.word	0x200003a0

08010778 <rcutils_get_default_allocator>:
 8010778:	b510      	push	{r4, lr}
 801077a:	4c05      	ldr	r4, [pc, #20]	@ (8010790 <rcutils_get_default_allocator+0x18>)
 801077c:	4686      	mov	lr, r0
 801077e:	4684      	mov	ip, r0
 8010780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010782:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010786:	6823      	ldr	r3, [r4, #0]
 8010788:	f8cc 3000 	str.w	r3, [ip]
 801078c:	4670      	mov	r0, lr
 801078e:	bd10      	pop	{r4, pc}
 8010790:	200003a0 	.word	0x200003a0

08010794 <rcutils_allocator_is_valid>:
 8010794:	b158      	cbz	r0, 80107ae <rcutils_allocator_is_valid+0x1a>
 8010796:	6803      	ldr	r3, [r0, #0]
 8010798:	b143      	cbz	r3, 80107ac <rcutils_allocator_is_valid+0x18>
 801079a:	6843      	ldr	r3, [r0, #4]
 801079c:	b133      	cbz	r3, 80107ac <rcutils_allocator_is_valid+0x18>
 801079e:	68c3      	ldr	r3, [r0, #12]
 80107a0:	b123      	cbz	r3, 80107ac <rcutils_allocator_is_valid+0x18>
 80107a2:	6880      	ldr	r0, [r0, #8]
 80107a4:	3800      	subs	r0, #0
 80107a6:	bf18      	it	ne
 80107a8:	2001      	movne	r0, #1
 80107aa:	4770      	bx	lr
 80107ac:	4618      	mov	r0, r3
 80107ae:	4770      	bx	lr

080107b0 <rcutils_get_error_string>:
 80107b0:	4b06      	ldr	r3, [pc, #24]	@ (80107cc <rcutils_get_error_string+0x1c>)
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	b13b      	cbz	r3, 80107c6 <rcutils_get_error_string+0x16>
 80107b6:	4b06      	ldr	r3, [pc, #24]	@ (80107d0 <rcutils_get_error_string+0x20>)
 80107b8:	781a      	ldrb	r2, [r3, #0]
 80107ba:	b90a      	cbnz	r2, 80107c0 <rcutils_get_error_string+0x10>
 80107bc:	2201      	movs	r2, #1
 80107be:	701a      	strb	r2, [r3, #0]
 80107c0:	4b04      	ldr	r3, [pc, #16]	@ (80107d4 <rcutils_get_error_string+0x24>)
 80107c2:	7818      	ldrb	r0, [r3, #0]
 80107c4:	4770      	bx	lr
 80107c6:	4b04      	ldr	r3, [pc, #16]	@ (80107d8 <rcutils_get_error_string+0x28>)
 80107c8:	7818      	ldrb	r0, [r3, #0]
 80107ca:	4770      	bx	lr
 80107cc:	20006f88 	.word	0x20006f88
 80107d0:	20006fa1 	.word	0x20006fa1
 80107d4:	20006fa0 	.word	0x20006fa0
 80107d8:	0801e060 	.word	0x0801e060
 80107dc:	00000000 	.word	0x00000000

080107e0 <rcutils_reset_error>:
 80107e0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8010800 <rcutils_reset_error+0x20>
 80107e4:	4a08      	ldr	r2, [pc, #32]	@ (8010808 <rcutils_reset_error+0x28>)
 80107e6:	4809      	ldr	r0, [pc, #36]	@ (801080c <rcutils_reset_error+0x2c>)
 80107e8:	4909      	ldr	r1, [pc, #36]	@ (8010810 <rcutils_reset_error+0x30>)
 80107ea:	2300      	movs	r3, #0
 80107ec:	8013      	strh	r3, [r2, #0]
 80107ee:	ed82 7b02 	vstr	d7, [r2, #8]
 80107f2:	4a08      	ldr	r2, [pc, #32]	@ (8010814 <rcutils_reset_error+0x34>)
 80107f4:	7003      	strb	r3, [r0, #0]
 80107f6:	700b      	strb	r3, [r1, #0]
 80107f8:	7013      	strb	r3, [r2, #0]
 80107fa:	4770      	bx	lr
 80107fc:	f3af 8000 	nop.w
	...
 8010808:	20006f90 	.word	0x20006f90
 801080c:	20006fa1 	.word	0x20006fa1
 8010810:	20006fa0 	.word	0x20006fa0
 8010814:	20006f88 	.word	0x20006f88

08010818 <rcutils_system_time_now>:
 8010818:	b308      	cbz	r0, 801085e <rcutils_system_time_now+0x46>
 801081a:	b570      	push	{r4, r5, r6, lr}
 801081c:	b084      	sub	sp, #16
 801081e:	4604      	mov	r4, r0
 8010820:	4669      	mov	r1, sp
 8010822:	2001      	movs	r0, #1
 8010824:	f7f2 fbac 	bl	8002f80 <clock_gettime>
 8010828:	e9dd 3500 	ldrd	r3, r5, [sp]
 801082c:	2d00      	cmp	r5, #0
 801082e:	db13      	blt.n	8010858 <rcutils_system_time_now+0x40>
 8010830:	9902      	ldr	r1, [sp, #8]
 8010832:	2900      	cmp	r1, #0
 8010834:	db0d      	blt.n	8010852 <rcutils_system_time_now+0x3a>
 8010836:	4e0b      	ldr	r6, [pc, #44]	@ (8010864 <rcutils_system_time_now+0x4c>)
 8010838:	fba3 3206 	umull	r3, r2, r3, r6
 801083c:	185b      	adds	r3, r3, r1
 801083e:	fb06 2205 	mla	r2, r6, r5, r2
 8010842:	f04f 0000 	mov.w	r0, #0
 8010846:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 801084a:	e9c4 3200 	strd	r3, r2, [r4]
 801084e:	b004      	add	sp, #16
 8010850:	bd70      	pop	{r4, r5, r6, pc}
 8010852:	ea53 0205 	orrs.w	r2, r3, r5
 8010856:	d1ee      	bne.n	8010836 <rcutils_system_time_now+0x1e>
 8010858:	2002      	movs	r0, #2
 801085a:	b004      	add	sp, #16
 801085c:	bd70      	pop	{r4, r5, r6, pc}
 801085e:	200b      	movs	r0, #11
 8010860:	4770      	bx	lr
 8010862:	bf00      	nop
 8010864:	3b9aca00 	.word	0x3b9aca00

08010868 <rcutils_steady_time_now>:
 8010868:	b308      	cbz	r0, 80108ae <rcutils_steady_time_now+0x46>
 801086a:	b570      	push	{r4, r5, r6, lr}
 801086c:	b084      	sub	sp, #16
 801086e:	4604      	mov	r4, r0
 8010870:	4669      	mov	r1, sp
 8010872:	2000      	movs	r0, #0
 8010874:	f7f2 fb84 	bl	8002f80 <clock_gettime>
 8010878:	e9dd 3500 	ldrd	r3, r5, [sp]
 801087c:	2d00      	cmp	r5, #0
 801087e:	db13      	blt.n	80108a8 <rcutils_steady_time_now+0x40>
 8010880:	9902      	ldr	r1, [sp, #8]
 8010882:	2900      	cmp	r1, #0
 8010884:	db0d      	blt.n	80108a2 <rcutils_steady_time_now+0x3a>
 8010886:	4e0b      	ldr	r6, [pc, #44]	@ (80108b4 <rcutils_steady_time_now+0x4c>)
 8010888:	fba3 3206 	umull	r3, r2, r3, r6
 801088c:	185b      	adds	r3, r3, r1
 801088e:	fb06 2205 	mla	r2, r6, r5, r2
 8010892:	f04f 0000 	mov.w	r0, #0
 8010896:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 801089a:	e9c4 3200 	strd	r3, r2, [r4]
 801089e:	b004      	add	sp, #16
 80108a0:	bd70      	pop	{r4, r5, r6, pc}
 80108a2:	ea53 0205 	orrs.w	r2, r3, r5
 80108a6:	d1ee      	bne.n	8010886 <rcutils_steady_time_now+0x1e>
 80108a8:	2002      	movs	r0, #2
 80108aa:	b004      	add	sp, #16
 80108ac:	bd70      	pop	{r4, r5, r6, pc}
 80108ae:	200b      	movs	r0, #11
 80108b0:	4770      	bx	lr
 80108b2:	bf00      	nop
 80108b4:	3b9aca00 	.word	0x3b9aca00

080108b8 <rmw_get_zero_initialized_init_options>:
 80108b8:	b510      	push	{r4, lr}
 80108ba:	2238      	movs	r2, #56	@ 0x38
 80108bc:	4604      	mov	r4, r0
 80108be:	2100      	movs	r1, #0
 80108c0:	f00b fee8 	bl	801c694 <memset>
 80108c4:	f104 0010 	add.w	r0, r4, #16
 80108c8:	f000 f80a 	bl	80108e0 <rmw_get_default_security_options>
 80108cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80108d0:	60e3      	str	r3, [r4, #12]
 80108d2:	4620      	mov	r0, r4
 80108d4:	bd10      	pop	{r4, pc}
 80108d6:	bf00      	nop

080108d8 <rmw_get_default_publisher_options>:
 80108d8:	2200      	movs	r2, #0
 80108da:	6002      	str	r2, [r0, #0]
 80108dc:	7102      	strb	r2, [r0, #4]
 80108de:	4770      	bx	lr

080108e0 <rmw_get_default_security_options>:
 80108e0:	2200      	movs	r2, #0
 80108e2:	7002      	strb	r2, [r0, #0]
 80108e4:	6042      	str	r2, [r0, #4]
 80108e6:	4770      	bx	lr

080108e8 <rmw_uros_set_custom_transport>:
 80108e8:	b470      	push	{r4, r5, r6}
 80108ea:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80108ee:	b162      	cbz	r2, 801090a <rmw_uros_set_custom_transport+0x22>
 80108f0:	b15b      	cbz	r3, 801090a <rmw_uros_set_custom_transport+0x22>
 80108f2:	b155      	cbz	r5, 801090a <rmw_uros_set_custom_transport+0x22>
 80108f4:	b14e      	cbz	r6, 801090a <rmw_uros_set_custom_transport+0x22>
 80108f6:	4c06      	ldr	r4, [pc, #24]	@ (8010910 <rmw_uros_set_custom_transport+0x28>)
 80108f8:	7020      	strb	r0, [r4, #0]
 80108fa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80108fe:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010902:	6166      	str	r6, [r4, #20]
 8010904:	2000      	movs	r0, #0
 8010906:	bc70      	pop	{r4, r5, r6}
 8010908:	4770      	bx	lr
 801090a:	200b      	movs	r0, #11
 801090c:	bc70      	pop	{r4, r5, r6}
 801090e:	4770      	bx	lr
 8010910:	20006fa4 	.word	0x20006fa4

08010914 <rmw_init_options_init>:
 8010914:	b084      	sub	sp, #16
 8010916:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010918:	b083      	sub	sp, #12
 801091a:	ad09      	add	r5, sp, #36	@ 0x24
 801091c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010920:	b130      	cbz	r0, 8010930 <rmw_init_options_init+0x1c>
 8010922:	4604      	mov	r4, r0
 8010924:	4628      	mov	r0, r5
 8010926:	f7ff ff35 	bl	8010794 <rcutils_allocator_is_valid>
 801092a:	b108      	cbz	r0, 8010930 <rmw_init_options_init+0x1c>
 801092c:	68a6      	ldr	r6, [r4, #8]
 801092e:	b12e      	cbz	r6, 801093c <rmw_init_options_init+0x28>
 8010930:	200b      	movs	r0, #11
 8010932:	b003      	add	sp, #12
 8010934:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010938:	b004      	add	sp, #16
 801093a:	4770      	bx	lr
 801093c:	2200      	movs	r2, #0
 801093e:	2300      	movs	r3, #0
 8010940:	e9c4 2300 	strd	r2, r3, [r4]
 8010944:	4b22      	ldr	r3, [pc, #136]	@ (80109d0 <rmw_init_options_init+0xbc>)
 8010946:	f8df e098 	ldr.w	lr, [pc, #152]	@ 80109e0 <rmw_init_options_init+0xcc>
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	60a3      	str	r3, [r4, #8]
 801094e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010950:	f104 0c20 	add.w	ip, r4, #32
 8010954:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010958:	466f      	mov	r7, sp
 801095a:	682b      	ldr	r3, [r5, #0]
 801095c:	f8cc 3000 	str.w	r3, [ip]
 8010960:	4638      	mov	r0, r7
 8010962:	f8c4 e01c 	str.w	lr, [r4, #28]
 8010966:	60e6      	str	r6, [r4, #12]
 8010968:	f7ff ffba 	bl	80108e0 <rmw_get_default_security_options>
 801096c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010970:	f104 0310 	add.w	r3, r4, #16
 8010974:	e883 0003 	stmia.w	r3, {r0, r1}
 8010978:	2203      	movs	r2, #3
 801097a:	4816      	ldr	r0, [pc, #88]	@ (80109d4 <rmw_init_options_init+0xc0>)
 801097c:	4916      	ldr	r1, [pc, #88]	@ (80109d8 <rmw_init_options_init+0xc4>)
 801097e:	7626      	strb	r6, [r4, #24]
 8010980:	f000 ffbc 	bl	80118fc <rmw_uxrce_init_init_options_impl_memory>
 8010984:	4813      	ldr	r0, [pc, #76]	@ (80109d4 <rmw_init_options_init+0xc0>)
 8010986:	f009 fb1b 	bl	8019fc0 <get_memory>
 801098a:	b1f0      	cbz	r0, 80109ca <rmw_init_options_init+0xb6>
 801098c:	4a13      	ldr	r2, [pc, #76]	@ (80109dc <rmw_init_options_init+0xc8>)
 801098e:	6883      	ldr	r3, [r0, #8]
 8010990:	6851      	ldr	r1, [r2, #4]
 8010992:	7810      	ldrb	r0, [r2, #0]
 8010994:	6363      	str	r3, [r4, #52]	@ 0x34
 8010996:	7418      	strb	r0, [r3, #16]
 8010998:	6159      	str	r1, [r3, #20]
 801099a:	68d1      	ldr	r1, [r2, #12]
 801099c:	61d9      	str	r1, [r3, #28]
 801099e:	6911      	ldr	r1, [r2, #16]
 80109a0:	6219      	str	r1, [r3, #32]
 80109a2:	6951      	ldr	r1, [r2, #20]
 80109a4:	6892      	ldr	r2, [r2, #8]
 80109a6:	619a      	str	r2, [r3, #24]
 80109a8:	6259      	str	r1, [r3, #36]	@ 0x24
 80109aa:	f004 fd07 	bl	80153bc <uxr_nanos>
 80109ae:	f00b fabb 	bl	801bf28 <srand>
 80109b2:	f00b fae7 	bl	801bf84 <rand>
 80109b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80109b8:	6298      	str	r0, [r3, #40]	@ 0x28
 80109ba:	2800      	cmp	r0, #0
 80109bc:	d0f9      	beq.n	80109b2 <rmw_init_options_init+0x9e>
 80109be:	2000      	movs	r0, #0
 80109c0:	b003      	add	sp, #12
 80109c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80109c6:	b004      	add	sp, #16
 80109c8:	4770      	bx	lr
 80109ca:	2001      	movs	r0, #1
 80109cc:	e7b1      	b.n	8010932 <rmw_init_options_init+0x1e>
 80109ce:	bf00      	nop
 80109d0:	0801f2a0 	.word	0x0801f2a0
 80109d4:	2000bac4 	.word	0x2000bac4
 80109d8:	20007298 	.word	0x20007298
 80109dc:	20006fa4 	.word	0x20006fa4
 80109e0:	0801e4bc 	.word	0x0801e4bc

080109e4 <rmw_init_options_copy>:
 80109e4:	b570      	push	{r4, r5, r6, lr}
 80109e6:	b158      	cbz	r0, 8010a00 <rmw_init_options_copy+0x1c>
 80109e8:	460d      	mov	r5, r1
 80109ea:	b149      	cbz	r1, 8010a00 <rmw_init_options_copy+0x1c>
 80109ec:	4604      	mov	r4, r0
 80109ee:	6880      	ldr	r0, [r0, #8]
 80109f0:	b120      	cbz	r0, 80109fc <rmw_init_options_copy+0x18>
 80109f2:	4b1e      	ldr	r3, [pc, #120]	@ (8010a6c <rmw_init_options_copy+0x88>)
 80109f4:	6819      	ldr	r1, [r3, #0]
 80109f6:	f7ef fc13 	bl	8000220 <strcmp>
 80109fa:	bb90      	cbnz	r0, 8010a62 <rmw_init_options_copy+0x7e>
 80109fc:	68ab      	ldr	r3, [r5, #8]
 80109fe:	b113      	cbz	r3, 8010a06 <rmw_init_options_copy+0x22>
 8010a00:	250b      	movs	r5, #11
 8010a02:	4628      	mov	r0, r5
 8010a04:	bd70      	pop	{r4, r5, r6, pc}
 8010a06:	4623      	mov	r3, r4
 8010a08:	462a      	mov	r2, r5
 8010a0a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8010a0e:	f8d3 c000 	ldr.w	ip, [r3]
 8010a12:	6858      	ldr	r0, [r3, #4]
 8010a14:	6899      	ldr	r1, [r3, #8]
 8010a16:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8010a1a:	f8c2 e00c 	str.w	lr, [r2, #12]
 8010a1e:	3310      	adds	r3, #16
 8010a20:	42b3      	cmp	r3, r6
 8010a22:	f8c2 c000 	str.w	ip, [r2]
 8010a26:	6050      	str	r0, [r2, #4]
 8010a28:	6091      	str	r1, [r2, #8]
 8010a2a:	f102 0210 	add.w	r2, r2, #16
 8010a2e:	d1ee      	bne.n	8010a0e <rmw_init_options_copy+0x2a>
 8010a30:	6819      	ldr	r1, [r3, #0]
 8010a32:	685b      	ldr	r3, [r3, #4]
 8010a34:	480e      	ldr	r0, [pc, #56]	@ (8010a70 <rmw_init_options_copy+0x8c>)
 8010a36:	6053      	str	r3, [r2, #4]
 8010a38:	6011      	str	r1, [r2, #0]
 8010a3a:	f009 fac1 	bl	8019fc0 <get_memory>
 8010a3e:	b198      	cbz	r0, 8010a68 <rmw_init_options_copy+0x84>
 8010a40:	6883      	ldr	r3, [r0, #8]
 8010a42:	636b      	str	r3, [r5, #52]	@ 0x34
 8010a44:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8010a46:	f102 0c10 	add.w	ip, r2, #16
 8010a4a:	f103 0410 	add.w	r4, r3, #16
 8010a4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a54:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8010a58:	2500      	movs	r5, #0
 8010a5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010a5e:	4628      	mov	r0, r5
 8010a60:	bd70      	pop	{r4, r5, r6, pc}
 8010a62:	250c      	movs	r5, #12
 8010a64:	4628      	mov	r0, r5
 8010a66:	bd70      	pop	{r4, r5, r6, pc}
 8010a68:	2501      	movs	r5, #1
 8010a6a:	e7ca      	b.n	8010a02 <rmw_init_options_copy+0x1e>
 8010a6c:	0801f2a0 	.word	0x0801f2a0
 8010a70:	2000bac4 	.word	0x2000bac4

08010a74 <rmw_init_options_fini>:
 8010a74:	2800      	cmp	r0, #0
 8010a76:	d03d      	beq.n	8010af4 <rmw_init_options_fini+0x80>
 8010a78:	b510      	push	{r4, lr}
 8010a7a:	4604      	mov	r4, r0
 8010a7c:	b08e      	sub	sp, #56	@ 0x38
 8010a7e:	3020      	adds	r0, #32
 8010a80:	f7ff fe88 	bl	8010794 <rcutils_allocator_is_valid>
 8010a84:	b360      	cbz	r0, 8010ae0 <rmw_init_options_fini+0x6c>
 8010a86:	68a0      	ldr	r0, [r4, #8]
 8010a88:	b120      	cbz	r0, 8010a94 <rmw_init_options_fini+0x20>
 8010a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8010afc <rmw_init_options_fini+0x88>)
 8010a8c:	6819      	ldr	r1, [r3, #0]
 8010a8e:	f7ef fbc7 	bl	8000220 <strcmp>
 8010a92:	bb68      	cbnz	r0, 8010af0 <rmw_init_options_fini+0x7c>
 8010a94:	4b1a      	ldr	r3, [pc, #104]	@ (8010b00 <rmw_init_options_fini+0x8c>)
 8010a96:	6819      	ldr	r1, [r3, #0]
 8010a98:	b331      	cbz	r1, 8010ae8 <rmw_init_options_fini+0x74>
 8010a9a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8010a9c:	e001      	b.n	8010aa2 <rmw_init_options_fini+0x2e>
 8010a9e:	6849      	ldr	r1, [r1, #4]
 8010aa0:	b311      	cbz	r1, 8010ae8 <rmw_init_options_fini+0x74>
 8010aa2:	688b      	ldr	r3, [r1, #8]
 8010aa4:	429a      	cmp	r2, r3
 8010aa6:	d1fa      	bne.n	8010a9e <rmw_init_options_fini+0x2a>
 8010aa8:	4815      	ldr	r0, [pc, #84]	@ (8010b00 <rmw_init_options_fini+0x8c>)
 8010aaa:	f009 fa99 	bl	8019fe0 <put_memory>
 8010aae:	4668      	mov	r0, sp
 8010ab0:	f7ff ff02 	bl	80108b8 <rmw_get_zero_initialized_init_options>
 8010ab4:	46ee      	mov	lr, sp
 8010ab6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010aba:	46a4      	mov	ip, r4
 8010abc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ac0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010ac4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ac8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010acc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ad0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010ad4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010ad8:	2300      	movs	r3, #0
 8010ada:	4618      	mov	r0, r3
 8010adc:	b00e      	add	sp, #56	@ 0x38
 8010ade:	bd10      	pop	{r4, pc}
 8010ae0:	230b      	movs	r3, #11
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	b00e      	add	sp, #56	@ 0x38
 8010ae6:	bd10      	pop	{r4, pc}
 8010ae8:	2301      	movs	r3, #1
 8010aea:	4618      	mov	r0, r3
 8010aec:	b00e      	add	sp, #56	@ 0x38
 8010aee:	bd10      	pop	{r4, pc}
 8010af0:	230c      	movs	r3, #12
 8010af2:	e7f2      	b.n	8010ada <rmw_init_options_fini+0x66>
 8010af4:	230b      	movs	r3, #11
 8010af6:	4618      	mov	r0, r3
 8010af8:	4770      	bx	lr
 8010afa:	bf00      	nop
 8010afc:	0801f2a0 	.word	0x0801f2a0
 8010b00:	2000bac4 	.word	0x2000bac4

08010b04 <rmw_init>:
 8010b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b08:	b083      	sub	sp, #12
 8010b0a:	2800      	cmp	r0, #0
 8010b0c:	f000 80d3 	beq.w	8010cb6 <rmw_init+0x1b2>
 8010b10:	460e      	mov	r6, r1
 8010b12:	2900      	cmp	r1, #0
 8010b14:	f000 80cf 	beq.w	8010cb6 <rmw_init+0x1b2>
 8010b18:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010b1a:	4605      	mov	r5, r0
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	f000 80ca 	beq.w	8010cb6 <rmw_init+0x1b2>
 8010b22:	4b78      	ldr	r3, [pc, #480]	@ (8010d04 <rmw_init+0x200>)
 8010b24:	6880      	ldr	r0, [r0, #8]
 8010b26:	681f      	ldr	r7, [r3, #0]
 8010b28:	b128      	cbz	r0, 8010b36 <rmw_init+0x32>
 8010b2a:	4639      	mov	r1, r7
 8010b2c:	f7ef fb78 	bl	8000220 <strcmp>
 8010b30:	2800      	cmp	r0, #0
 8010b32:	f040 80ca 	bne.w	8010cca <rmw_init+0x1c6>
 8010b36:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010b3a:	4c73      	ldr	r4, [pc, #460]	@ (8010d08 <rmw_init+0x204>)
 8010b3c:	4973      	ldr	r1, [pc, #460]	@ (8010d0c <rmw_init+0x208>)
 8010b3e:	4874      	ldr	r0, [pc, #464]	@ (8010d10 <rmw_init+0x20c>)
 8010b40:	60b7      	str	r7, [r6, #8]
 8010b42:	e9c6 2300 	strd	r2, r3, [r6]
 8010b46:	68eb      	ldr	r3, [r5, #12]
 8010b48:	64b3      	str	r3, [r6, #72]	@ 0x48
 8010b4a:	2201      	movs	r2, #1
 8010b4c:	f000 fe76 	bl	801183c <rmw_uxrce_init_session_memory>
 8010b50:	4620      	mov	r0, r4
 8010b52:	4970      	ldr	r1, [pc, #448]	@ (8010d14 <rmw_init+0x210>)
 8010b54:	2204      	movs	r2, #4
 8010b56:	f000 feb1 	bl	80118bc <rmw_uxrce_init_static_input_buffer_memory>
 8010b5a:	f04f 0800 	mov.w	r8, #0
 8010b5e:	486c      	ldr	r0, [pc, #432]	@ (8010d10 <rmw_init+0x20c>)
 8010b60:	f884 800d 	strb.w	r8, [r4, #13]
 8010b64:	f009 fa2c 	bl	8019fc0 <get_memory>
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	f000 80a9 	beq.w	8010cc0 <rmw_init+0x1bc>
 8010b6e:	6884      	ldr	r4, [r0, #8]
 8010b70:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8010b72:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8010b74:	f890 c010 	ldrb.w	ip, [r0, #16]
 8010b78:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8010b7c:	9101      	str	r1, [sp, #4]
 8010b7e:	6a00      	ldr	r0, [r0, #32]
 8010b80:	9000      	str	r0, [sp, #0]
 8010b82:	f104 0910 	add.w	r9, r4, #16
 8010b86:	4661      	mov	r1, ip
 8010b88:	4648      	mov	r0, r9
 8010b8a:	f002 fb4d 	bl	8013228 <uxr_set_custom_transport_callbacks>
 8010b8e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8010b92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010b96:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8010b9a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8010b9e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8010ba2:	495d      	ldr	r1, [pc, #372]	@ (8010d18 <rmw_init+0x214>)
 8010ba4:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8010ba8:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8010bac:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8010bb0:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8010bb4:	4859      	ldr	r0, [pc, #356]	@ (8010d1c <rmw_init+0x218>)
 8010bb6:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8010bba:	2201      	movs	r2, #1
 8010bbc:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8010bbe:	f000 fe1d 	bl	80117fc <rmw_uxrce_init_node_memory>
 8010bc2:	4957      	ldr	r1, [pc, #348]	@ (8010d20 <rmw_init+0x21c>)
 8010bc4:	4857      	ldr	r0, [pc, #348]	@ (8010d24 <rmw_init+0x220>)
 8010bc6:	2205      	movs	r2, #5
 8010bc8:	f000 fdf8 	bl	80117bc <rmw_uxrce_init_subscription_memory>
 8010bcc:	4956      	ldr	r1, [pc, #344]	@ (8010d28 <rmw_init+0x224>)
 8010bce:	4857      	ldr	r0, [pc, #348]	@ (8010d2c <rmw_init+0x228>)
 8010bd0:	220a      	movs	r2, #10
 8010bd2:	f000 fdd3 	bl	801177c <rmw_uxrce_init_publisher_memory>
 8010bd6:	4956      	ldr	r1, [pc, #344]	@ (8010d30 <rmw_init+0x22c>)
 8010bd8:	4856      	ldr	r0, [pc, #344]	@ (8010d34 <rmw_init+0x230>)
 8010bda:	2202      	movs	r2, #2
 8010bdc:	f000 fd8e 	bl	80116fc <rmw_uxrce_init_service_memory>
 8010be0:	4955      	ldr	r1, [pc, #340]	@ (8010d38 <rmw_init+0x234>)
 8010be2:	4856      	ldr	r0, [pc, #344]	@ (8010d3c <rmw_init+0x238>)
 8010be4:	2201      	movs	r2, #1
 8010be6:	f000 fda9 	bl	801173c <rmw_uxrce_init_client_memory>
 8010bea:	4955      	ldr	r1, [pc, #340]	@ (8010d40 <rmw_init+0x23c>)
 8010bec:	4855      	ldr	r0, [pc, #340]	@ (8010d44 <rmw_init+0x240>)
 8010bee:	220f      	movs	r2, #15
 8010bf0:	f000 fe44 	bl	801187c <rmw_uxrce_init_topic_memory>
 8010bf4:	4954      	ldr	r1, [pc, #336]	@ (8010d48 <rmw_init+0x244>)
 8010bf6:	4855      	ldr	r0, [pc, #340]	@ (8010d4c <rmw_init+0x248>)
 8010bf8:	2203      	movs	r2, #3
 8010bfa:	f000 fe7f 	bl	80118fc <rmw_uxrce_init_init_options_impl_memory>
 8010bfe:	4954      	ldr	r1, [pc, #336]	@ (8010d50 <rmw_init+0x24c>)
 8010c00:	4854      	ldr	r0, [pc, #336]	@ (8010d54 <rmw_init+0x250>)
 8010c02:	2204      	movs	r2, #4
 8010c04:	f000 fe9a 	bl	801193c <rmw_uxrce_init_wait_set_memory>
 8010c08:	4953      	ldr	r1, [pc, #332]	@ (8010d58 <rmw_init+0x254>)
 8010c0a:	4854      	ldr	r0, [pc, #336]	@ (8010d5c <rmw_init+0x258>)
 8010c0c:	2204      	movs	r2, #4
 8010c0e:	f000 feb5 	bl	801197c <rmw_uxrce_init_guard_condition_memory>
 8010c12:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8010c14:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8010c16:	4642      	mov	r2, r8
 8010c18:	f000 fd2a 	bl	8011670 <rmw_uxrce_transport_init>
 8010c1c:	4607      	mov	r7, r0
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	d158      	bne.n	8010cd4 <rmw_init+0x1d0>
 8010c22:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8010c24:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8010c28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010c2a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8010c2e:	4628      	mov	r0, r5
 8010c30:	f002 fd2e 	bl	8013690 <uxr_init_session>
 8010c34:	494a      	ldr	r1, [pc, #296]	@ (8010d60 <rmw_init+0x25c>)
 8010c36:	4622      	mov	r2, r4
 8010c38:	4628      	mov	r0, r5
 8010c3a:	f002 fd4d 	bl	80136d8 <uxr_set_topic_callback>
 8010c3e:	4949      	ldr	r1, [pc, #292]	@ (8010d64 <rmw_init+0x260>)
 8010c40:	463a      	mov	r2, r7
 8010c42:	4628      	mov	r0, r5
 8010c44:	f002 fd44 	bl	80136d0 <uxr_set_status_callback>
 8010c48:	4947      	ldr	r1, [pc, #284]	@ (8010d68 <rmw_init+0x264>)
 8010c4a:	463a      	mov	r2, r7
 8010c4c:	4628      	mov	r0, r5
 8010c4e:	f002 fd47 	bl	80136e0 <uxr_set_request_callback>
 8010c52:	4946      	ldr	r1, [pc, #280]	@ (8010d6c <rmw_init+0x268>)
 8010c54:	463a      	mov	r2, r7
 8010c56:	4628      	mov	r0, r5
 8010c58:	f002 fd46 	bl	80136e8 <uxr_set_reply_callback>
 8010c5c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010c60:	2304      	movs	r3, #4
 8010c62:	0092      	lsls	r2, r2, #2
 8010c64:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8010c68:	4628      	mov	r0, r5
 8010c6a:	f002 fd7b 	bl	8013764 <uxr_create_input_reliable_stream>
 8010c6e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010c72:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8010c76:	0092      	lsls	r2, r2, #2
 8010c78:	2304      	movs	r3, #4
 8010c7a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8010c7e:	4628      	mov	r0, r5
 8010c80:	f002 fd48 	bl	8013714 <uxr_create_output_reliable_stream>
 8010c84:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8010c88:	4628      	mov	r0, r5
 8010c8a:	f002 fd65 	bl	8013758 <uxr_create_input_best_effort_stream>
 8010c8e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8010c92:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8010c96:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010c9a:	3114      	adds	r1, #20
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	f002 fd27 	bl	80136f0 <uxr_create_output_best_effort_stream>
 8010ca2:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8010ca6:	4628      	mov	r0, r5
 8010ca8:	f003 fb1a 	bl	80142e0 <uxr_create_session>
 8010cac:	b1f8      	cbz	r0, 8010cee <rmw_init+0x1ea>
 8010cae:	4638      	mov	r0, r7
 8010cb0:	b003      	add	sp, #12
 8010cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cb6:	270b      	movs	r7, #11
 8010cb8:	4638      	mov	r0, r7
 8010cba:	b003      	add	sp, #12
 8010cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cc0:	2701      	movs	r7, #1
 8010cc2:	4638      	mov	r0, r7
 8010cc4:	b003      	add	sp, #12
 8010cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cca:	270c      	movs	r7, #12
 8010ccc:	4638      	mov	r0, r7
 8010cce:	b003      	add	sp, #12
 8010cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cd4:	4648      	mov	r0, r9
 8010cd6:	f002 fae9 	bl	80132ac <uxr_close_custom_transport>
 8010cda:	480d      	ldr	r0, [pc, #52]	@ (8010d10 <rmw_init+0x20c>)
 8010cdc:	4621      	mov	r1, r4
 8010cde:	f009 f97f 	bl	8019fe0 <put_memory>
 8010ce2:	4638      	mov	r0, r7
 8010ce4:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8010ce8:	b003      	add	sp, #12
 8010cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cee:	4648      	mov	r0, r9
 8010cf0:	f002 fadc 	bl	80132ac <uxr_close_custom_transport>
 8010cf4:	4806      	ldr	r0, [pc, #24]	@ (8010d10 <rmw_init+0x20c>)
 8010cf6:	4621      	mov	r1, r4
 8010cf8:	f009 f972 	bl	8019fe0 <put_memory>
 8010cfc:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8010cfe:	2701      	movs	r7, #1
 8010d00:	e7d5      	b.n	8010cae <rmw_init+0x1aa>
 8010d02:	bf00      	nop
 8010d04:	0801f2a0 	.word	0x0801f2a0
 8010d08:	2000bb14 	.word	0x2000bb14
 8010d0c:	20007dc0 	.word	0x20007dc0
 8010d10:	2000bb04 	.word	0x2000bb04
 8010d14:	20009368 	.word	0x20009368
 8010d18:	2000731c 	.word	0x2000731c
 8010d1c:	2000bad4 	.word	0x2000bad4
 8010d20:	2000b468 	.word	0x2000b468
 8010d24:	2000bb24 	.word	0x2000bb24
 8010d28:	200073c0 	.word	0x200073c0
 8010d2c:	2000bae4 	.word	0x2000bae4
 8010d30:	20007c30 	.word	0x20007c30
 8010d34:	2000baf4 	.word	0x2000baf4
 8010d38:	20007150 	.word	0x20007150
 8010d3c:	2000713c 	.word	0x2000713c
 8010d40:	2000b8a0 	.word	0x2000b8a0
 8010d44:	2000bb34 	.word	0x2000bb34
 8010d48:	20007298 	.word	0x20007298
 8010d4c:	2000bac4 	.word	0x2000bac4
 8010d50:	2000ba44 	.word	0x2000ba44
 8010d54:	2000bb44 	.word	0x2000bb44
 8010d58:	20007218 	.word	0x20007218
 8010d5c:	2000bab4 	.word	0x2000bab4
 8010d60:	08019df9 	.word	0x08019df9
 8010d64:	08019df1 	.word	0x08019df1
 8010d68:	08019e91 	.word	0x08019e91
 8010d6c:	08019f2d 	.word	0x08019f2d

08010d70 <rmw_context_fini>:
 8010d70:	4b17      	ldr	r3, [pc, #92]	@ (8010dd0 <rmw_context_fini+0x60>)
 8010d72:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8010d74:	b570      	push	{r4, r5, r6, lr}
 8010d76:	681c      	ldr	r4, [r3, #0]
 8010d78:	4605      	mov	r5, r0
 8010d7a:	b334      	cbz	r4, 8010dca <rmw_context_fini+0x5a>
 8010d7c:	2600      	movs	r6, #0
 8010d7e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8010d82:	6902      	ldr	r2, [r0, #16]
 8010d84:	428a      	cmp	r2, r1
 8010d86:	d018      	beq.n	8010dba <rmw_context_fini+0x4a>
 8010d88:	2c00      	cmp	r4, #0
 8010d8a:	d1f8      	bne.n	8010d7e <rmw_context_fini+0xe>
 8010d8c:	b189      	cbz	r1, 8010db2 <rmw_context_fini+0x42>
 8010d8e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8010d92:	789b      	ldrb	r3, [r3, #2]
 8010d94:	2b01      	cmp	r3, #1
 8010d96:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8010d9a:	bf14      	ite	ne
 8010d9c:	210a      	movne	r1, #10
 8010d9e:	2100      	moveq	r1, #0
 8010da0:	f003 fa76 	bl	8014290 <uxr_delete_session_retries>
 8010da4:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8010da6:	f000 fe09 	bl	80119bc <rmw_uxrce_fini_session_memory>
 8010daa:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8010dac:	3010      	adds	r0, #16
 8010dae:	f002 fa7d 	bl	80132ac <uxr_close_custom_transport>
 8010db2:	2300      	movs	r3, #0
 8010db4:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8010db6:	4630      	mov	r0, r6
 8010db8:	bd70      	pop	{r4, r5, r6, pc}
 8010dba:	3018      	adds	r0, #24
 8010dbc:	f000 f89c 	bl	8010ef8 <rmw_destroy_node>
 8010dc0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8010dc2:	4606      	mov	r6, r0
 8010dc4:	2c00      	cmp	r4, #0
 8010dc6:	d1da      	bne.n	8010d7e <rmw_context_fini+0xe>
 8010dc8:	e7e0      	b.n	8010d8c <rmw_context_fini+0x1c>
 8010dca:	4626      	mov	r6, r4
 8010dcc:	e7de      	b.n	8010d8c <rmw_context_fini+0x1c>
 8010dce:	bf00      	nop
 8010dd0:	2000bad4 	.word	0x2000bad4

08010dd4 <create_node>:
 8010dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010dd8:	b083      	sub	sp, #12
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d05f      	beq.n	8010e9e <create_node+0xca>
 8010dde:	4606      	mov	r6, r0
 8010de0:	4835      	ldr	r0, [pc, #212]	@ (8010eb8 <create_node+0xe4>)
 8010de2:	460f      	mov	r7, r1
 8010de4:	4690      	mov	r8, r2
 8010de6:	461d      	mov	r5, r3
 8010de8:	f009 f8ea 	bl	8019fc0 <get_memory>
 8010dec:	2800      	cmp	r0, #0
 8010dee:	d056      	beq.n	8010e9e <create_node+0xca>
 8010df0:	6884      	ldr	r4, [r0, #8]
 8010df2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8010df4:	6123      	str	r3, [r4, #16]
 8010df6:	f009 f94b 	bl	801a090 <rmw_get_implementation_identifier>
 8010dfa:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8010dfe:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8010e02:	f8c4 9020 	str.w	r9, [r4, #32]
 8010e06:	4630      	mov	r0, r6
 8010e08:	f7ef fa14 	bl	8000234 <strlen>
 8010e0c:	1c42      	adds	r2, r0, #1
 8010e0e:	2a3c      	cmp	r2, #60	@ 0x3c
 8010e10:	f104 0518 	add.w	r5, r4, #24
 8010e14:	d840      	bhi.n	8010e98 <create_node+0xc4>
 8010e16:	4648      	mov	r0, r9
 8010e18:	4631      	mov	r1, r6
 8010e1a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8010e1e:	f00b fd02 	bl	801c826 <memcpy>
 8010e22:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8010e26:	4638      	mov	r0, r7
 8010e28:	f7ef fa04 	bl	8000234 <strlen>
 8010e2c:	1c42      	adds	r2, r0, #1
 8010e2e:	2a3c      	cmp	r2, #60	@ 0x3c
 8010e30:	d832      	bhi.n	8010e98 <create_node+0xc4>
 8010e32:	4639      	mov	r1, r7
 8010e34:	4648      	mov	r0, r9
 8010e36:	f00b fcf6 	bl	801c826 <memcpy>
 8010e3a:	6923      	ldr	r3, [r4, #16]
 8010e3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010e40:	2101      	movs	r1, #1
 8010e42:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8010e46:	1842      	adds	r2, r0, r1
 8010e48:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8010e4c:	f002 fa32 	bl	80132b4 <uxr_object_id>
 8010e50:	6160      	str	r0, [r4, #20]
 8010e52:	783b      	ldrb	r3, [r7, #0]
 8010e54:	2b2f      	cmp	r3, #47	@ 0x2f
 8010e56:	d127      	bne.n	8010ea8 <create_node+0xd4>
 8010e58:	787b      	ldrb	r3, [r7, #1]
 8010e5a:	bb2b      	cbnz	r3, 8010ea8 <create_node+0xd4>
 8010e5c:	4a17      	ldr	r2, [pc, #92]	@ (8010ebc <create_node+0xe8>)
 8010e5e:	4818      	ldr	r0, [pc, #96]	@ (8010ec0 <create_node+0xec>)
 8010e60:	4633      	mov	r3, r6
 8010e62:	213c      	movs	r1, #60	@ 0x3c
 8010e64:	f00b faa8 	bl	801c3b8 <sniprintf>
 8010e68:	6920      	ldr	r0, [r4, #16]
 8010e6a:	4915      	ldr	r1, [pc, #84]	@ (8010ec0 <create_node+0xec>)
 8010e6c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8010e70:	9100      	str	r1, [sp, #0]
 8010e72:	2106      	movs	r1, #6
 8010e74:	9101      	str	r1, [sp, #4]
 8010e76:	6811      	ldr	r1, [r2, #0]
 8010e78:	6962      	ldr	r2, [r4, #20]
 8010e7a:	fa1f f388 	uxth.w	r3, r8
 8010e7e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010e82:	f002 f80d 	bl	8012ea0 <uxr_buffer_create_participant_bin>
 8010e86:	4602      	mov	r2, r0
 8010e88:	6920      	ldr	r0, [r4, #16]
 8010e8a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010e8e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010e92:	f000 ff0b 	bl	8011cac <run_xrce_session>
 8010e96:	b918      	cbnz	r0, 8010ea0 <create_node+0xcc>
 8010e98:	4628      	mov	r0, r5
 8010e9a:	f000 fd95 	bl	80119c8 <rmw_uxrce_fini_node_memory>
 8010e9e:	2500      	movs	r5, #0
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	b003      	add	sp, #12
 8010ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ea8:	4a06      	ldr	r2, [pc, #24]	@ (8010ec4 <create_node+0xf0>)
 8010eaa:	9600      	str	r6, [sp, #0]
 8010eac:	463b      	mov	r3, r7
 8010eae:	213c      	movs	r1, #60	@ 0x3c
 8010eb0:	4803      	ldr	r0, [pc, #12]	@ (8010ec0 <create_node+0xec>)
 8010eb2:	f00b fa81 	bl	801c3b8 <sniprintf>
 8010eb6:	e7d7      	b.n	8010e68 <create_node+0x94>
 8010eb8:	2000bad4 	.word	0x2000bad4
 8010ebc:	0801e4d8 	.word	0x0801e4d8
 8010ec0:	20006fc0 	.word	0x20006fc0
 8010ec4:	0801e4c0 	.word	0x0801e4c0

08010ec8 <rmw_create_node>:
 8010ec8:	b199      	cbz	r1, 8010ef2 <rmw_create_node+0x2a>
 8010eca:	780b      	ldrb	r3, [r1, #0]
 8010ecc:	468c      	mov	ip, r1
 8010ece:	b183      	cbz	r3, 8010ef2 <rmw_create_node+0x2a>
 8010ed0:	b410      	push	{r4}
 8010ed2:	4614      	mov	r4, r2
 8010ed4:	b14a      	cbz	r2, 8010eea <rmw_create_node+0x22>
 8010ed6:	7813      	ldrb	r3, [r2, #0]
 8010ed8:	b13b      	cbz	r3, 8010eea <rmw_create_node+0x22>
 8010eda:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8010edc:	4603      	mov	r3, r0
 8010ede:	4621      	mov	r1, r4
 8010ee0:	4660      	mov	r0, ip
 8010ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ee6:	f7ff bf75 	b.w	8010dd4 <create_node>
 8010eea:	2000      	movs	r0, #0
 8010eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ef0:	4770      	bx	lr
 8010ef2:	2000      	movs	r0, #0
 8010ef4:	4770      	bx	lr
 8010ef6:	bf00      	nop

08010ef8 <rmw_destroy_node>:
 8010ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010efa:	b328      	cbz	r0, 8010f48 <rmw_destroy_node+0x50>
 8010efc:	4607      	mov	r7, r0
 8010efe:	6800      	ldr	r0, [r0, #0]
 8010f00:	b120      	cbz	r0, 8010f0c <rmw_destroy_node+0x14>
 8010f02:	4b36      	ldr	r3, [pc, #216]	@ (8010fdc <rmw_destroy_node+0xe4>)
 8010f04:	6819      	ldr	r1, [r3, #0]
 8010f06:	f7ef f98b 	bl	8000220 <strcmp>
 8010f0a:	b9e8      	cbnz	r0, 8010f48 <rmw_destroy_node+0x50>
 8010f0c:	687d      	ldr	r5, [r7, #4]
 8010f0e:	b1dd      	cbz	r5, 8010f48 <rmw_destroy_node+0x50>
 8010f10:	4b33      	ldr	r3, [pc, #204]	@ (8010fe0 <rmw_destroy_node+0xe8>)
 8010f12:	681c      	ldr	r4, [r3, #0]
 8010f14:	2c00      	cmp	r4, #0
 8010f16:	d05f      	beq.n	8010fd8 <rmw_destroy_node+0xe0>
 8010f18:	2600      	movs	r6, #0
 8010f1a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010f1e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8010f22:	429d      	cmp	r5, r3
 8010f24:	d013      	beq.n	8010f4e <rmw_destroy_node+0x56>
 8010f26:	2c00      	cmp	r4, #0
 8010f28:	d1f7      	bne.n	8010f1a <rmw_destroy_node+0x22>
 8010f2a:	4b2e      	ldr	r3, [pc, #184]	@ (8010fe4 <rmw_destroy_node+0xec>)
 8010f2c:	681c      	ldr	r4, [r3, #0]
 8010f2e:	b1c4      	cbz	r4, 8010f62 <rmw_destroy_node+0x6a>
 8010f30:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010f34:	6a0b      	ldr	r3, [r1, #32]
 8010f36:	429d      	cmp	r5, r3
 8010f38:	d1f9      	bne.n	8010f2e <rmw_destroy_node+0x36>
 8010f3a:	317c      	adds	r1, #124	@ 0x7c
 8010f3c:	4638      	mov	r0, r7
 8010f3e:	f000 fb37 	bl	80115b0 <rmw_destroy_subscription>
 8010f42:	2801      	cmp	r0, #1
 8010f44:	4606      	mov	r6, r0
 8010f46:	d1f2      	bne.n	8010f2e <rmw_destroy_node+0x36>
 8010f48:	2601      	movs	r6, #1
 8010f4a:	4630      	mov	r0, r6
 8010f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f4e:	3184      	adds	r1, #132	@ 0x84
 8010f50:	4638      	mov	r0, r7
 8010f52:	f000 f9a5 	bl	80112a0 <rmw_destroy_publisher>
 8010f56:	2801      	cmp	r0, #1
 8010f58:	4606      	mov	r6, r0
 8010f5a:	d0f5      	beq.n	8010f48 <rmw_destroy_node+0x50>
 8010f5c:	2c00      	cmp	r4, #0
 8010f5e:	d1dc      	bne.n	8010f1a <rmw_destroy_node+0x22>
 8010f60:	e7e3      	b.n	8010f2a <rmw_destroy_node+0x32>
 8010f62:	4b21      	ldr	r3, [pc, #132]	@ (8010fe8 <rmw_destroy_node+0xf0>)
 8010f64:	681c      	ldr	r4, [r3, #0]
 8010f66:	b16c      	cbz	r4, 8010f84 <rmw_destroy_node+0x8c>
 8010f68:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010f6c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8010f6e:	429d      	cmp	r5, r3
 8010f70:	d1f9      	bne.n	8010f66 <rmw_destroy_node+0x6e>
 8010f72:	317c      	adds	r1, #124	@ 0x7c
 8010f74:	4638      	mov	r0, r7
 8010f76:	f000 fab7 	bl	80114e8 <rmw_destroy_service>
 8010f7a:	2801      	cmp	r0, #1
 8010f7c:	4606      	mov	r6, r0
 8010f7e:	d0e3      	beq.n	8010f48 <rmw_destroy_node+0x50>
 8010f80:	2c00      	cmp	r4, #0
 8010f82:	d1f1      	bne.n	8010f68 <rmw_destroy_node+0x70>
 8010f84:	4b19      	ldr	r3, [pc, #100]	@ (8010fec <rmw_destroy_node+0xf4>)
 8010f86:	681c      	ldr	r4, [r3, #0]
 8010f88:	b16c      	cbz	r4, 8010fa6 <rmw_destroy_node+0xae>
 8010f8a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010f8e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8010f90:	429d      	cmp	r5, r3
 8010f92:	d1f9      	bne.n	8010f88 <rmw_destroy_node+0x90>
 8010f94:	317c      	adds	r1, #124	@ 0x7c
 8010f96:	4638      	mov	r0, r7
 8010f98:	f009 f836 	bl	801a008 <rmw_destroy_client>
 8010f9c:	2801      	cmp	r0, #1
 8010f9e:	4606      	mov	r6, r0
 8010fa0:	d0d2      	beq.n	8010f48 <rmw_destroy_node+0x50>
 8010fa2:	2c00      	cmp	r4, #0
 8010fa4:	d1f1      	bne.n	8010f8a <rmw_destroy_node+0x92>
 8010fa6:	6928      	ldr	r0, [r5, #16]
 8010fa8:	696a      	ldr	r2, [r5, #20]
 8010faa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010fae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010fb2:	6819      	ldr	r1, [r3, #0]
 8010fb4:	f001 ff28 	bl	8012e08 <uxr_buffer_delete_entity>
 8010fb8:	4602      	mov	r2, r0
 8010fba:	6928      	ldr	r0, [r5, #16]
 8010fbc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010fc0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010fc4:	f000 fe72 	bl	8011cac <run_xrce_session>
 8010fc8:	2800      	cmp	r0, #0
 8010fca:	bf08      	it	eq
 8010fcc:	2602      	moveq	r6, #2
 8010fce:	4638      	mov	r0, r7
 8010fd0:	f000 fcfa 	bl	80119c8 <rmw_uxrce_fini_node_memory>
 8010fd4:	4630      	mov	r0, r6
 8010fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fd8:	4626      	mov	r6, r4
 8010fda:	e7a6      	b.n	8010f2a <rmw_destroy_node+0x32>
 8010fdc:	0801f2a0 	.word	0x0801f2a0
 8010fe0:	2000bae4 	.word	0x2000bae4
 8010fe4:	2000bb24 	.word	0x2000bb24
 8010fe8:	2000baf4 	.word	0x2000baf4
 8010fec:	2000713c 	.word	0x2000713c

08010ff0 <rmw_node_get_graph_guard_condition>:
 8010ff0:	6843      	ldr	r3, [r0, #4]
 8010ff2:	6918      	ldr	r0, [r3, #16]
 8010ff4:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8010ff8:	4770      	bx	lr
 8010ffa:	bf00      	nop

08010ffc <flush_session>:
 8010ffc:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8010ffe:	f002 bfa9 	b.w	8013f54 <uxr_run_session_until_confirm_delivery>
 8011002:	bf00      	nop

08011004 <rmw_publish>:
 8011004:	2800      	cmp	r0, #0
 8011006:	d053      	beq.n	80110b0 <rmw_publish+0xac>
 8011008:	b570      	push	{r4, r5, r6, lr}
 801100a:	460d      	mov	r5, r1
 801100c:	b08e      	sub	sp, #56	@ 0x38
 801100e:	2900      	cmp	r1, #0
 8011010:	d04b      	beq.n	80110aa <rmw_publish+0xa6>
 8011012:	4604      	mov	r4, r0
 8011014:	6800      	ldr	r0, [r0, #0]
 8011016:	f000 ff63 	bl	8011ee0 <is_uxrce_rmw_identifier_valid>
 801101a:	2800      	cmp	r0, #0
 801101c:	d045      	beq.n	80110aa <rmw_publish+0xa6>
 801101e:	6866      	ldr	r6, [r4, #4]
 8011020:	2e00      	cmp	r6, #0
 8011022:	d042      	beq.n	80110aa <rmw_publish+0xa6>
 8011024:	69b4      	ldr	r4, [r6, #24]
 8011026:	4628      	mov	r0, r5
 8011028:	6923      	ldr	r3, [r4, #16]
 801102a:	4798      	blx	r3
 801102c:	69f3      	ldr	r3, [r6, #28]
 801102e:	9005      	str	r0, [sp, #20]
 8011030:	b113      	cbz	r3, 8011038 <rmw_publish+0x34>
 8011032:	a805      	add	r0, sp, #20
 8011034:	4798      	blx	r3
 8011036:	9805      	ldr	r0, [sp, #20]
 8011038:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801103c:	691b      	ldr	r3, [r3, #16]
 801103e:	9000      	str	r0, [sp, #0]
 8011040:	6972      	ldr	r2, [r6, #20]
 8011042:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8011044:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011048:	ab06      	add	r3, sp, #24
 801104a:	f004 fa57 	bl	80154fc <uxr_prepare_output_stream>
 801104e:	b1d8      	cbz	r0, 8011088 <rmw_publish+0x84>
 8011050:	68a3      	ldr	r3, [r4, #8]
 8011052:	a906      	add	r1, sp, #24
 8011054:	4628      	mov	r0, r5
 8011056:	4798      	blx	r3
 8011058:	6a33      	ldr	r3, [r6, #32]
 801105a:	4604      	mov	r4, r0
 801105c:	b10b      	cbz	r3, 8011062 <rmw_publish+0x5e>
 801105e:	a806      	add	r0, sp, #24
 8011060:	4798      	blx	r3
 8011062:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8011066:	2b01      	cmp	r3, #1
 8011068:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801106c:	d022      	beq.n	80110b4 <rmw_publish+0xb0>
 801106e:	6918      	ldr	r0, [r3, #16]
 8011070:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8011072:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011076:	f002 ff6d 	bl	8013f54 <uxr_run_session_until_confirm_delivery>
 801107a:	4020      	ands	r0, r4
 801107c:	b2c4      	uxtb	r4, r0
 801107e:	f084 0001 	eor.w	r0, r4, #1
 8011082:	b2c0      	uxtb	r0, r0
 8011084:	b00e      	add	sp, #56	@ 0x38
 8011086:	bd70      	pop	{r4, r5, r6, pc}
 8011088:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801108c:	6918      	ldr	r0, [r3, #16]
 801108e:	9b05      	ldr	r3, [sp, #20]
 8011090:	9300      	str	r3, [sp, #0]
 8011092:	4b0b      	ldr	r3, [pc, #44]	@ (80110c0 <rmw_publish+0xbc>)
 8011094:	9301      	str	r3, [sp, #4]
 8011096:	9602      	str	r6, [sp, #8]
 8011098:	6972      	ldr	r2, [r6, #20]
 801109a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 801109c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80110a0:	ab06      	add	r3, sp, #24
 80110a2:	f004 fa5b 	bl	801555c <uxr_prepare_output_stream_fragmented>
 80110a6:	2800      	cmp	r0, #0
 80110a8:	d1d2      	bne.n	8011050 <rmw_publish+0x4c>
 80110aa:	2001      	movs	r0, #1
 80110ac:	b00e      	add	sp, #56	@ 0x38
 80110ae:	bd70      	pop	{r4, r5, r6, pc}
 80110b0:	2001      	movs	r0, #1
 80110b2:	4770      	bx	lr
 80110b4:	6918      	ldr	r0, [r3, #16]
 80110b6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80110ba:	f002 fb8b 	bl	80137d4 <uxr_flash_output_streams>
 80110be:	e7de      	b.n	801107e <rmw_publish+0x7a>
 80110c0:	08010ffd 	.word	0x08010ffd

080110c4 <rmw_create_publisher>:
 80110c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c8:	b087      	sub	sp, #28
 80110ca:	2800      	cmp	r0, #0
 80110cc:	f000 80cc 	beq.w	8011268 <rmw_create_publisher+0x1a4>
 80110d0:	460e      	mov	r6, r1
 80110d2:	2900      	cmp	r1, #0
 80110d4:	f000 80c8 	beq.w	8011268 <rmw_create_publisher+0x1a4>
 80110d8:	4604      	mov	r4, r0
 80110da:	6800      	ldr	r0, [r0, #0]
 80110dc:	4615      	mov	r5, r2
 80110de:	4698      	mov	r8, r3
 80110e0:	f000 fefe 	bl	8011ee0 <is_uxrce_rmw_identifier_valid>
 80110e4:	2800      	cmp	r0, #0
 80110e6:	f000 80bf 	beq.w	8011268 <rmw_create_publisher+0x1a4>
 80110ea:	2d00      	cmp	r5, #0
 80110ec:	f000 80bc 	beq.w	8011268 <rmw_create_publisher+0x1a4>
 80110f0:	782b      	ldrb	r3, [r5, #0]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	f000 80b8 	beq.w	8011268 <rmw_create_publisher+0x1a4>
 80110f8:	f1b8 0f00 	cmp.w	r8, #0
 80110fc:	f000 80b4 	beq.w	8011268 <rmw_create_publisher+0x1a4>
 8011100:	485c      	ldr	r0, [pc, #368]	@ (8011274 <rmw_create_publisher+0x1b0>)
 8011102:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011106:	f008 ff5b 	bl	8019fc0 <get_memory>
 801110a:	2800      	cmp	r0, #0
 801110c:	f000 80ac 	beq.w	8011268 <rmw_create_publisher+0x1a4>
 8011110:	6884      	ldr	r4, [r0, #8]
 8011112:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8011116:	f008 ffbb 	bl	801a090 <rmw_get_implementation_identifier>
 801111a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 801111e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8011122:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8011126:	4628      	mov	r0, r5
 8011128:	f7ef f884 	bl	8000234 <strlen>
 801112c:	3001      	adds	r0, #1
 801112e:	283c      	cmp	r0, #60	@ 0x3c
 8011130:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 8011134:	f200 8091 	bhi.w	801125a <rmw_create_publisher+0x196>
 8011138:	4a4f      	ldr	r2, [pc, #316]	@ (8011278 <rmw_create_publisher+0x1b4>)
 801113a:	462b      	mov	r3, r5
 801113c:	213c      	movs	r1, #60	@ 0x3c
 801113e:	4650      	mov	r0, sl
 8011140:	f00b f93a 	bl	801c3b8 <sniprintf>
 8011144:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011148:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801114a:	4641      	mov	r1, r8
 801114c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8011150:	2250      	movs	r2, #80	@ 0x50
 8011152:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011156:	f00b fb66 	bl	801c826 <memcpy>
 801115a:	f898 3008 	ldrb.w	r3, [r8, #8]
 801115e:	4947      	ldr	r1, [pc, #284]	@ (801127c <rmw_create_publisher+0x1b8>)
 8011160:	2b02      	cmp	r3, #2
 8011162:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011166:	bf0c      	ite	eq
 8011168:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 801116c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8011170:	67a3      	str	r3, [r4, #120]	@ 0x78
 8011172:	2300      	movs	r3, #0
 8011174:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8011178:	4630      	mov	r0, r6
 801117a:	f000 febf 	bl	8011efc <get_message_typesupport_handle>
 801117e:	2800      	cmp	r0, #0
 8011180:	d06b      	beq.n	801125a <rmw_create_publisher+0x196>
 8011182:	6842      	ldr	r2, [r0, #4]
 8011184:	61a2      	str	r2, [r4, #24]
 8011186:	2a00      	cmp	r2, #0
 8011188:	d067      	beq.n	801125a <rmw_create_publisher+0x196>
 801118a:	4629      	mov	r1, r5
 801118c:	4643      	mov	r3, r8
 801118e:	4648      	mov	r0, r9
 8011190:	f008 ff84 	bl	801a09c <create_topic>
 8011194:	6260      	str	r0, [r4, #36]	@ 0x24
 8011196:	2800      	cmp	r0, #0
 8011198:	d063      	beq.n	8011262 <rmw_create_publisher+0x19e>
 801119a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801119e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80111a2:	2103      	movs	r1, #3
 80111a4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 80111a8:	1c42      	adds	r2, r0, #1
 80111aa:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 80111ae:	f002 f881 	bl	80132b4 <uxr_object_id>
 80111b2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80111b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80111ba:	6120      	str	r0, [r4, #16]
 80111bc:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80111c0:	6910      	ldr	r0, [r2, #16]
 80111c2:	2506      	movs	r5, #6
 80111c4:	9500      	str	r5, [sp, #0]
 80111c6:	6819      	ldr	r1, [r3, #0]
 80111c8:	6922      	ldr	r2, [r4, #16]
 80111ca:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80111ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80111d2:	f001 fecd 	bl	8012f70 <uxr_buffer_create_publisher_bin>
 80111d6:	4602      	mov	r2, r0
 80111d8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80111dc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80111e0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80111e4:	f000 fd62 	bl	8011cac <run_xrce_session>
 80111e8:	b3b8      	cbz	r0, 801125a <rmw_create_publisher+0x196>
 80111ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80111ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80111f2:	2105      	movs	r1, #5
 80111f4:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 80111f8:	1c42      	adds	r2, r0, #1
 80111fa:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 80111fe:	f002 f859 	bl	80132b4 <uxr_object_id>
 8011202:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011206:	6160      	str	r0, [r4, #20]
 8011208:	691e      	ldr	r6, [r3, #16]
 801120a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801120e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8011212:	f10d 0a10 	add.w	sl, sp, #16
 8011216:	4641      	mov	r1, r8
 8011218:	4650      	mov	r0, sl
 801121a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 801121e:	f000 fd61 	bl	8011ce4 <convert_qos_profile>
 8011222:	9503      	str	r5, [sp, #12]
 8011224:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8011228:	9001      	str	r0, [sp, #4]
 801122a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801122e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011232:	9300      	str	r3, [sp, #0]
 8011234:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8011238:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801123c:	f8d8 1000 	ldr.w	r1, [r8]
 8011240:	4630      	mov	r0, r6
 8011242:	f001 fec5 	bl	8012fd0 <uxr_buffer_create_datawriter_bin>
 8011246:	4602      	mov	r2, r0
 8011248:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801124c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011250:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011254:	f000 fd2a 	bl	8011cac <run_xrce_session>
 8011258:	b938      	cbnz	r0, 801126a <rmw_create_publisher+0x1a6>
 801125a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801125c:	b108      	cbz	r0, 8011262 <rmw_create_publisher+0x19e>
 801125e:	f000 fc23 	bl	8011aa8 <rmw_uxrce_fini_topic_memory>
 8011262:	4638      	mov	r0, r7
 8011264:	f000 fbc8 	bl	80119f8 <rmw_uxrce_fini_publisher_memory>
 8011268:	2700      	movs	r7, #0
 801126a:	4638      	mov	r0, r7
 801126c:	b007      	add	sp, #28
 801126e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011272:	bf00      	nop
 8011274:	2000bae4 	.word	0x2000bae4
 8011278:	0801e4d8 	.word	0x0801e4d8
 801127c:	0801de40 	.word	0x0801de40

08011280 <rmw_publisher_get_actual_qos>:
 8011280:	b150      	cbz	r0, 8011298 <rmw_publisher_get_actual_qos+0x18>
 8011282:	b508      	push	{r3, lr}
 8011284:	460b      	mov	r3, r1
 8011286:	b149      	cbz	r1, 801129c <rmw_publisher_get_actual_qos+0x1c>
 8011288:	6841      	ldr	r1, [r0, #4]
 801128a:	2250      	movs	r2, #80	@ 0x50
 801128c:	3128      	adds	r1, #40	@ 0x28
 801128e:	4618      	mov	r0, r3
 8011290:	f00b fac9 	bl	801c826 <memcpy>
 8011294:	2000      	movs	r0, #0
 8011296:	bd08      	pop	{r3, pc}
 8011298:	200b      	movs	r0, #11
 801129a:	4770      	bx	lr
 801129c:	200b      	movs	r0, #11
 801129e:	bd08      	pop	{r3, pc}

080112a0 <rmw_destroy_publisher>:
 80112a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112a2:	b128      	cbz	r0, 80112b0 <rmw_destroy_publisher+0x10>
 80112a4:	4604      	mov	r4, r0
 80112a6:	6800      	ldr	r0, [r0, #0]
 80112a8:	460d      	mov	r5, r1
 80112aa:	f000 fe19 	bl	8011ee0 <is_uxrce_rmw_identifier_valid>
 80112ae:	b910      	cbnz	r0, 80112b6 <rmw_destroy_publisher+0x16>
 80112b0:	2401      	movs	r4, #1
 80112b2:	4620      	mov	r0, r4
 80112b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112b6:	6863      	ldr	r3, [r4, #4]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d0f9      	beq.n	80112b0 <rmw_destroy_publisher+0x10>
 80112bc:	2d00      	cmp	r5, #0
 80112be:	d0f7      	beq.n	80112b0 <rmw_destroy_publisher+0x10>
 80112c0:	6828      	ldr	r0, [r5, #0]
 80112c2:	f000 fe0d 	bl	8011ee0 <is_uxrce_rmw_identifier_valid>
 80112c6:	2800      	cmp	r0, #0
 80112c8:	d0f2      	beq.n	80112b0 <rmw_destroy_publisher+0x10>
 80112ca:	686c      	ldr	r4, [r5, #4]
 80112cc:	2c00      	cmp	r4, #0
 80112ce:	d0ef      	beq.n	80112b0 <rmw_destroy_publisher+0x10>
 80112d0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80112d2:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 80112d6:	f008 ff31 	bl	801a13c <destroy_topic>
 80112da:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80112de:	6962      	ldr	r2, [r4, #20]
 80112e0:	6918      	ldr	r0, [r3, #16]
 80112e2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80112e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80112ea:	6819      	ldr	r1, [r3, #0]
 80112ec:	f001 fd8c 	bl	8012e08 <uxr_buffer_delete_entity>
 80112f0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80112f4:	6922      	ldr	r2, [r4, #16]
 80112f6:	691b      	ldr	r3, [r3, #16]
 80112f8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80112fc:	4604      	mov	r4, r0
 80112fe:	6809      	ldr	r1, [r1, #0]
 8011300:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011304:	f001 fd80 	bl	8012e08 <uxr_buffer_delete_entity>
 8011308:	693e      	ldr	r6, [r7, #16]
 801130a:	4622      	mov	r2, r4
 801130c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8011310:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8011314:	4604      	mov	r4, r0
 8011316:	4630      	mov	r0, r6
 8011318:	f000 fcc8 	bl	8011cac <run_xrce_session>
 801131c:	693e      	ldr	r6, [r7, #16]
 801131e:	4622      	mov	r2, r4
 8011320:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8011324:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8011328:	4604      	mov	r4, r0
 801132a:	4630      	mov	r0, r6
 801132c:	f000 fcbe 	bl	8011cac <run_xrce_session>
 8011330:	b12c      	cbz	r4, 801133e <rmw_destroy_publisher+0x9e>
 8011332:	b120      	cbz	r0, 801133e <rmw_destroy_publisher+0x9e>
 8011334:	2400      	movs	r4, #0
 8011336:	4628      	mov	r0, r5
 8011338:	f000 fb5e 	bl	80119f8 <rmw_uxrce_fini_publisher_memory>
 801133c:	e7b9      	b.n	80112b2 <rmw_destroy_publisher+0x12>
 801133e:	2402      	movs	r4, #2
 8011340:	e7f9      	b.n	8011336 <rmw_destroy_publisher+0x96>
 8011342:	bf00      	nop

08011344 <rmw_create_service>:
 8011344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011348:	b091      	sub	sp, #68	@ 0x44
 801134a:	2800      	cmp	r0, #0
 801134c:	f000 80ba 	beq.w	80114c4 <rmw_create_service+0x180>
 8011350:	4689      	mov	r9, r1
 8011352:	2900      	cmp	r1, #0
 8011354:	f000 80b6 	beq.w	80114c4 <rmw_create_service+0x180>
 8011358:	4606      	mov	r6, r0
 801135a:	6800      	ldr	r0, [r0, #0]
 801135c:	4614      	mov	r4, r2
 801135e:	461d      	mov	r5, r3
 8011360:	f000 fdbe 	bl	8011ee0 <is_uxrce_rmw_identifier_valid>
 8011364:	2800      	cmp	r0, #0
 8011366:	f000 80ad 	beq.w	80114c4 <rmw_create_service+0x180>
 801136a:	2c00      	cmp	r4, #0
 801136c:	f000 80aa 	beq.w	80114c4 <rmw_create_service+0x180>
 8011370:	7823      	ldrb	r3, [r4, #0]
 8011372:	2b00      	cmp	r3, #0
 8011374:	f000 80a6 	beq.w	80114c4 <rmw_create_service+0x180>
 8011378:	2d00      	cmp	r5, #0
 801137a:	f000 80a3 	beq.w	80114c4 <rmw_create_service+0x180>
 801137e:	4854      	ldr	r0, [pc, #336]	@ (80114d0 <rmw_create_service+0x18c>)
 8011380:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8011384:	f008 fe1c 	bl	8019fc0 <get_memory>
 8011388:	4606      	mov	r6, r0
 801138a:	2800      	cmp	r0, #0
 801138c:	f000 809b 	beq.w	80114c6 <rmw_create_service+0x182>
 8011390:	6887      	ldr	r7, [r0, #8]
 8011392:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8011396:	f008 fe7b 	bl	801a090 <rmw_get_implementation_identifier>
 801139a:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 801139e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80113a0:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 80113a4:	4620      	mov	r0, r4
 80113a6:	f7ee ff45 	bl	8000234 <strlen>
 80113aa:	1c42      	adds	r2, r0, #1
 80113ac:	2a3c      	cmp	r2, #60	@ 0x3c
 80113ae:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 80113b2:	f200 8084 	bhi.w	80114be <rmw_create_service+0x17a>
 80113b6:	4621      	mov	r1, r4
 80113b8:	4650      	mov	r0, sl
 80113ba:	f00b fa34 	bl	801c826 <memcpy>
 80113be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80113c2:	4629      	mov	r1, r5
 80113c4:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 80113c8:	677b      	str	r3, [r7, #116]	@ 0x74
 80113ca:	2250      	movs	r2, #80	@ 0x50
 80113cc:	f107 0020 	add.w	r0, r7, #32
 80113d0:	f00b fa29 	bl	801c826 <memcpy>
 80113d4:	493f      	ldr	r1, [pc, #252]	@ (80114d4 <rmw_create_service+0x190>)
 80113d6:	4648      	mov	r0, r9
 80113d8:	f000 fd9c 	bl	8011f14 <get_service_typesupport_handle>
 80113dc:	2800      	cmp	r0, #0
 80113de:	d06e      	beq.n	80114be <rmw_create_service+0x17a>
 80113e0:	6843      	ldr	r3, [r0, #4]
 80113e2:	617b      	str	r3, [r7, #20]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d06a      	beq.n	80114be <rmw_create_service+0x17a>
 80113e8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80113ec:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 80114dc <rmw_create_service+0x198>
 80113f0:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 80114e0 <rmw_create_service+0x19c>
 80113f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80113f8:	2108      	movs	r1, #8
 80113fa:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 80113fe:	1c42      	adds	r2, r0, #1
 8011400:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 8011404:	f001 ff56 	bl	80132b4 <uxr_object_id>
 8011408:	2364      	movs	r3, #100	@ 0x64
 801140a:	6138      	str	r0, [r7, #16]
 801140c:	4652      	mov	r2, sl
 801140e:	6978      	ldr	r0, [r7, #20]
 8011410:	4649      	mov	r1, r9
 8011412:	f000 fcb3 	bl	8011d7c <generate_service_types>
 8011416:	2800      	cmp	r0, #0
 8011418:	d051      	beq.n	80114be <rmw_create_service+0x17a>
 801141a:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 80114e4 <rmw_create_service+0x1a0>
 801141e:	4a2e      	ldr	r2, [pc, #184]	@ (80114d8 <rmw_create_service+0x194>)
 8011420:	233c      	movs	r3, #60	@ 0x3c
 8011422:	4659      	mov	r1, fp
 8011424:	4620      	mov	r0, r4
 8011426:	f000 fc77 	bl	8011d18 <generate_service_topics>
 801142a:	2800      	cmp	r0, #0
 801142c:	d047      	beq.n	80114be <rmw_create_service+0x17a>
 801142e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011432:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8011436:	a80c      	add	r0, sp, #48	@ 0x30
 8011438:	4629      	mov	r1, r5
 801143a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801143e:	f000 fc51 	bl	8011ce4 <convert_qos_profile>
 8011442:	4a25      	ldr	r2, [pc, #148]	@ (80114d8 <rmw_create_service+0x194>)
 8011444:	9400      	str	r4, [sp, #0]
 8011446:	e9cd b203 	strd	fp, r2, [sp, #12]
 801144a:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801144e:	a80c      	add	r0, sp, #48	@ 0x30
 8011450:	c803      	ldmia	r0, {r0, r1}
 8011452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011454:	9005      	str	r0, [sp, #20]
 8011456:	9a08      	ldr	r2, [sp, #32]
 8011458:	f8ad 1018 	strh.w	r1, [sp, #24]
 801145c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011460:	2306      	movs	r3, #6
 8011462:	9307      	str	r3, [sp, #28]
 8011464:	6811      	ldr	r1, [r2, #0]
 8011466:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801146a:	693a      	ldr	r2, [r7, #16]
 801146c:	f001 fe26 	bl	80130bc <uxr_buffer_create_replier_bin>
 8011470:	4602      	mov	r2, r0
 8011472:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8011476:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801147a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801147e:	f000 fc15 	bl	8011cac <run_xrce_session>
 8011482:	b1e0      	cbz	r0, 80114be <rmw_create_service+0x17a>
 8011484:	7a2b      	ldrb	r3, [r5, #8]
 8011486:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801148a:	2200      	movs	r2, #0
 801148c:	2b02      	cmp	r3, #2
 801148e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011492:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 8011496:	bf0c      	ite	eq
 8011498:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 801149c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 80114a0:	673a      	str	r2, [r7, #112]	@ 0x70
 80114a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80114a4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80114a8:	ab0e      	add	r3, sp, #56	@ 0x38
 80114aa:	9300      	str	r3, [sp, #0]
 80114ac:	6811      	ldr	r1, [r2, #0]
 80114ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80114b0:	693a      	ldr	r2, [r7, #16]
 80114b2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80114b6:	f001 ff2d 	bl	8013314 <uxr_buffer_request_data>
 80114ba:	8338      	strh	r0, [r7, #24]
 80114bc:	e003      	b.n	80114c6 <rmw_create_service+0x182>
 80114be:	4630      	mov	r0, r6
 80114c0:	f000 fac6 	bl	8011a50 <rmw_uxrce_fini_service_memory>
 80114c4:	2600      	movs	r6, #0
 80114c6:	4630      	mov	r0, r6
 80114c8:	b011      	add	sp, #68	@ 0x44
 80114ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114ce:	bf00      	nop
 80114d0:	2000baf4 	.word	0x2000baf4
 80114d4:	0801de40 	.word	0x0801de40
 80114d8:	2000709c 	.word	0x2000709c
 80114dc:	200070d8 	.word	0x200070d8
 80114e0:	20007038 	.word	0x20007038
 80114e4:	20006ffc 	.word	0x20006ffc

080114e8 <rmw_destroy_service>:
 80114e8:	b570      	push	{r4, r5, r6, lr}
 80114ea:	b128      	cbz	r0, 80114f8 <rmw_destroy_service+0x10>
 80114ec:	4604      	mov	r4, r0
 80114ee:	6800      	ldr	r0, [r0, #0]
 80114f0:	460d      	mov	r5, r1
 80114f2:	f000 fcf5 	bl	8011ee0 <is_uxrce_rmw_identifier_valid>
 80114f6:	b910      	cbnz	r0, 80114fe <rmw_destroy_service+0x16>
 80114f8:	2401      	movs	r4, #1
 80114fa:	4620      	mov	r0, r4
 80114fc:	bd70      	pop	{r4, r5, r6, pc}
 80114fe:	6863      	ldr	r3, [r4, #4]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d0f9      	beq.n	80114f8 <rmw_destroy_service+0x10>
 8011504:	2d00      	cmp	r5, #0
 8011506:	d0f7      	beq.n	80114f8 <rmw_destroy_service+0x10>
 8011508:	6828      	ldr	r0, [r5, #0]
 801150a:	f000 fce9 	bl	8011ee0 <is_uxrce_rmw_identifier_valid>
 801150e:	2800      	cmp	r0, #0
 8011510:	d0f2      	beq.n	80114f8 <rmw_destroy_service+0x10>
 8011512:	686e      	ldr	r6, [r5, #4]
 8011514:	2e00      	cmp	r6, #0
 8011516:	d0ef      	beq.n	80114f8 <rmw_destroy_service+0x10>
 8011518:	6864      	ldr	r4, [r4, #4]
 801151a:	6932      	ldr	r2, [r6, #16]
 801151c:	6920      	ldr	r0, [r4, #16]
 801151e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011522:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011526:	6819      	ldr	r1, [r3, #0]
 8011528:	f001 ff2e 	bl	8013388 <uxr_buffer_cancel_data>
 801152c:	4602      	mov	r2, r0
 801152e:	6920      	ldr	r0, [r4, #16]
 8011530:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011534:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011538:	f000 fbb8 	bl	8011cac <run_xrce_session>
 801153c:	6920      	ldr	r0, [r4, #16]
 801153e:	6932      	ldr	r2, [r6, #16]
 8011540:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011544:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011548:	6819      	ldr	r1, [r3, #0]
 801154a:	f001 fc5d 	bl	8012e08 <uxr_buffer_delete_entity>
 801154e:	4602      	mov	r2, r0
 8011550:	6920      	ldr	r0, [r4, #16]
 8011552:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011556:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801155a:	f000 fba7 	bl	8011cac <run_xrce_session>
 801155e:	2800      	cmp	r0, #0
 8011560:	4628      	mov	r0, r5
 8011562:	bf14      	ite	ne
 8011564:	2400      	movne	r4, #0
 8011566:	2402      	moveq	r4, #2
 8011568:	f000 fa72 	bl	8011a50 <rmw_uxrce_fini_service_memory>
 801156c:	e7c5      	b.n	80114fa <rmw_destroy_service+0x12>
 801156e:	bf00      	nop

08011570 <rmw_service_response_publisher_get_actual_qos>:
 8011570:	b150      	cbz	r0, 8011588 <rmw_service_response_publisher_get_actual_qos+0x18>
 8011572:	b508      	push	{r3, lr}
 8011574:	460b      	mov	r3, r1
 8011576:	b149      	cbz	r1, 801158c <rmw_service_response_publisher_get_actual_qos+0x1c>
 8011578:	6841      	ldr	r1, [r0, #4]
 801157a:	2250      	movs	r2, #80	@ 0x50
 801157c:	3120      	adds	r1, #32
 801157e:	4618      	mov	r0, r3
 8011580:	f00b f951 	bl	801c826 <memcpy>
 8011584:	2000      	movs	r0, #0
 8011586:	bd08      	pop	{r3, pc}
 8011588:	200b      	movs	r0, #11
 801158a:	4770      	bx	lr
 801158c:	200b      	movs	r0, #11
 801158e:	bd08      	pop	{r3, pc}

08011590 <rmw_service_request_subscription_get_actual_qos>:
 8011590:	b150      	cbz	r0, 80115a8 <rmw_service_request_subscription_get_actual_qos+0x18>
 8011592:	b508      	push	{r3, lr}
 8011594:	460b      	mov	r3, r1
 8011596:	b149      	cbz	r1, 80115ac <rmw_service_request_subscription_get_actual_qos+0x1c>
 8011598:	6841      	ldr	r1, [r0, #4]
 801159a:	2250      	movs	r2, #80	@ 0x50
 801159c:	3120      	adds	r1, #32
 801159e:	4618      	mov	r0, r3
 80115a0:	f00b f941 	bl	801c826 <memcpy>
 80115a4:	2000      	movs	r0, #0
 80115a6:	bd08      	pop	{r3, pc}
 80115a8:	200b      	movs	r0, #11
 80115aa:	4770      	bx	lr
 80115ac:	200b      	movs	r0, #11
 80115ae:	bd08      	pop	{r3, pc}

080115b0 <rmw_destroy_subscription>:
 80115b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115b2:	b128      	cbz	r0, 80115c0 <rmw_destroy_subscription+0x10>
 80115b4:	4604      	mov	r4, r0
 80115b6:	6800      	ldr	r0, [r0, #0]
 80115b8:	460d      	mov	r5, r1
 80115ba:	f000 fc91 	bl	8011ee0 <is_uxrce_rmw_identifier_valid>
 80115be:	b910      	cbnz	r0, 80115c6 <rmw_destroy_subscription+0x16>
 80115c0:	2401      	movs	r4, #1
 80115c2:	4620      	mov	r0, r4
 80115c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115c6:	6863      	ldr	r3, [r4, #4]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d0f9      	beq.n	80115c0 <rmw_destroy_subscription+0x10>
 80115cc:	2d00      	cmp	r5, #0
 80115ce:	d0f7      	beq.n	80115c0 <rmw_destroy_subscription+0x10>
 80115d0:	6828      	ldr	r0, [r5, #0]
 80115d2:	f000 fc85 	bl	8011ee0 <is_uxrce_rmw_identifier_valid>
 80115d6:	2800      	cmp	r0, #0
 80115d8:	d0f2      	beq.n	80115c0 <rmw_destroy_subscription+0x10>
 80115da:	686c      	ldr	r4, [r5, #4]
 80115dc:	2c00      	cmp	r4, #0
 80115de:	d0ef      	beq.n	80115c0 <rmw_destroy_subscription+0x10>
 80115e0:	6a26      	ldr	r6, [r4, #32]
 80115e2:	6962      	ldr	r2, [r4, #20]
 80115e4:	6930      	ldr	r0, [r6, #16]
 80115e6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80115ea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80115ee:	6819      	ldr	r1, [r3, #0]
 80115f0:	f001 feca 	bl	8013388 <uxr_buffer_cancel_data>
 80115f4:	4602      	mov	r2, r0
 80115f6:	6930      	ldr	r0, [r6, #16]
 80115f8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80115fc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011600:	f000 fb54 	bl	8011cac <run_xrce_session>
 8011604:	69e0      	ldr	r0, [r4, #28]
 8011606:	f008 fd99 	bl	801a13c <destroy_topic>
 801160a:	6a23      	ldr	r3, [r4, #32]
 801160c:	6962      	ldr	r2, [r4, #20]
 801160e:	6918      	ldr	r0, [r3, #16]
 8011610:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011614:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011618:	6819      	ldr	r1, [r3, #0]
 801161a:	f001 fbf5 	bl	8012e08 <uxr_buffer_delete_entity>
 801161e:	6a23      	ldr	r3, [r4, #32]
 8011620:	6922      	ldr	r2, [r4, #16]
 8011622:	691b      	ldr	r3, [r3, #16]
 8011624:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8011628:	4604      	mov	r4, r0
 801162a:	6809      	ldr	r1, [r1, #0]
 801162c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011630:	f001 fbea 	bl	8012e08 <uxr_buffer_delete_entity>
 8011634:	6937      	ldr	r7, [r6, #16]
 8011636:	4622      	mov	r2, r4
 8011638:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801163c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8011640:	4604      	mov	r4, r0
 8011642:	4638      	mov	r0, r7
 8011644:	f000 fb32 	bl	8011cac <run_xrce_session>
 8011648:	6936      	ldr	r6, [r6, #16]
 801164a:	4622      	mov	r2, r4
 801164c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8011650:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8011654:	4604      	mov	r4, r0
 8011656:	4630      	mov	r0, r6
 8011658:	f000 fb28 	bl	8011cac <run_xrce_session>
 801165c:	b12c      	cbz	r4, 801166a <rmw_destroy_subscription+0xba>
 801165e:	b120      	cbz	r0, 801166a <rmw_destroy_subscription+0xba>
 8011660:	2400      	movs	r4, #0
 8011662:	4628      	mov	r0, r5
 8011664:	f000 f9de 	bl	8011a24 <rmw_uxrce_fini_subscription_memory>
 8011668:	e7ab      	b.n	80115c2 <rmw_destroy_subscription+0x12>
 801166a:	2402      	movs	r4, #2
 801166c:	e7f9      	b.n	8011662 <rmw_destroy_subscription+0xb2>
 801166e:	bf00      	nop

08011670 <rmw_uxrce_transport_init>:
 8011670:	b508      	push	{r3, lr}
 8011672:	b108      	cbz	r0, 8011678 <rmw_uxrce_transport_init+0x8>
 8011674:	f100 0210 	add.w	r2, r0, #16
 8011678:	b139      	cbz	r1, 801168a <rmw_uxrce_transport_init+0x1a>
 801167a:	6949      	ldr	r1, [r1, #20]
 801167c:	4610      	mov	r0, r2
 801167e:	f001 fde1 	bl	8013244 <uxr_init_custom_transport>
 8011682:	f080 0001 	eor.w	r0, r0, #1
 8011686:	b2c0      	uxtb	r0, r0
 8011688:	bd08      	pop	{r3, pc}
 801168a:	4b04      	ldr	r3, [pc, #16]	@ (801169c <rmw_uxrce_transport_init+0x2c>)
 801168c:	4610      	mov	r0, r2
 801168e:	6859      	ldr	r1, [r3, #4]
 8011690:	f001 fdd8 	bl	8013244 <uxr_init_custom_transport>
 8011694:	f080 0001 	eor.w	r0, r0, #1
 8011698:	b2c0      	uxtb	r0, r0
 801169a:	bd08      	pop	{r3, pc}
 801169c:	20006fa4 	.word	0x20006fa4

080116a0 <rmw_uros_epoch_millis>:
 80116a0:	4b05      	ldr	r3, [pc, #20]	@ (80116b8 <rmw_uros_epoch_millis+0x18>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	b123      	cbz	r3, 80116b0 <rmw_uros_epoch_millis+0x10>
 80116a6:	6898      	ldr	r0, [r3, #8]
 80116a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80116ac:	f002 b876 	b.w	801379c <uxr_epoch_millis>
 80116b0:	2000      	movs	r0, #0
 80116b2:	2100      	movs	r1, #0
 80116b4:	4770      	bx	lr
 80116b6:	bf00      	nop
 80116b8:	2000bb04 	.word	0x2000bb04

080116bc <rmw_uros_epoch_nanos>:
 80116bc:	4b05      	ldr	r3, [pc, #20]	@ (80116d4 <rmw_uros_epoch_nanos+0x18>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	b123      	cbz	r3, 80116cc <rmw_uros_epoch_nanos+0x10>
 80116c2:	6898      	ldr	r0, [r3, #8]
 80116c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80116c8:	f002 b87a 	b.w	80137c0 <uxr_epoch_nanos>
 80116cc:	2000      	movs	r0, #0
 80116ce:	2100      	movs	r1, #0
 80116d0:	4770      	bx	lr
 80116d2:	bf00      	nop
 80116d4:	2000bb04 	.word	0x2000bb04

080116d8 <rmw_uros_sync_session>:
 80116d8:	b508      	push	{r3, lr}
 80116da:	4b07      	ldr	r3, [pc, #28]	@ (80116f8 <rmw_uros_sync_session+0x20>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	b14b      	cbz	r3, 80116f4 <rmw_uros_sync_session+0x1c>
 80116e0:	4601      	mov	r1, r0
 80116e2:	6898      	ldr	r0, [r3, #8]
 80116e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80116e8:	f002 fcae 	bl	8014048 <uxr_sync_session>
 80116ec:	f080 0001 	eor.w	r0, r0, #1
 80116f0:	b2c0      	uxtb	r0, r0
 80116f2:	bd08      	pop	{r3, pc}
 80116f4:	2001      	movs	r0, #1
 80116f6:	bd08      	pop	{r3, pc}
 80116f8:	2000bb04 	.word	0x2000bb04

080116fc <rmw_uxrce_init_service_memory>:
 80116fc:	b1e2      	cbz	r2, 8011738 <rmw_uxrce_init_service_memory+0x3c>
 80116fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011702:	7b05      	ldrb	r5, [r0, #12]
 8011704:	4606      	mov	r6, r0
 8011706:	b9ad      	cbnz	r5, 8011734 <rmw_uxrce_init_service_memory+0x38>
 8011708:	23c8      	movs	r3, #200	@ 0xc8
 801170a:	e9c0 5500 	strd	r5, r5, [r0]
 801170e:	6083      	str	r3, [r0, #8]
 8011710:	f240 1301 	movw	r3, #257	@ 0x101
 8011714:	4617      	mov	r7, r2
 8011716:	8183      	strh	r3, [r0, #12]
 8011718:	460c      	mov	r4, r1
 801171a:	46a8      	mov	r8, r5
 801171c:	4621      	mov	r1, r4
 801171e:	4630      	mov	r0, r6
 8011720:	3501      	adds	r5, #1
 8011722:	f008 fc5d 	bl	8019fe0 <put_memory>
 8011726:	42af      	cmp	r7, r5
 8011728:	60a4      	str	r4, [r4, #8]
 801172a:	f884 800c 	strb.w	r8, [r4, #12]
 801172e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011732:	d1f3      	bne.n	801171c <rmw_uxrce_init_service_memory+0x20>
 8011734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011738:	4770      	bx	lr
 801173a:	bf00      	nop

0801173c <rmw_uxrce_init_client_memory>:
 801173c:	b1e2      	cbz	r2, 8011778 <rmw_uxrce_init_client_memory+0x3c>
 801173e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011742:	7b05      	ldrb	r5, [r0, #12]
 8011744:	4606      	mov	r6, r0
 8011746:	b9ad      	cbnz	r5, 8011774 <rmw_uxrce_init_client_memory+0x38>
 8011748:	23c8      	movs	r3, #200	@ 0xc8
 801174a:	e9c0 5500 	strd	r5, r5, [r0]
 801174e:	6083      	str	r3, [r0, #8]
 8011750:	f240 1301 	movw	r3, #257	@ 0x101
 8011754:	4617      	mov	r7, r2
 8011756:	8183      	strh	r3, [r0, #12]
 8011758:	460c      	mov	r4, r1
 801175a:	46a8      	mov	r8, r5
 801175c:	4621      	mov	r1, r4
 801175e:	4630      	mov	r0, r6
 8011760:	3501      	adds	r5, #1
 8011762:	f008 fc3d 	bl	8019fe0 <put_memory>
 8011766:	42af      	cmp	r7, r5
 8011768:	60a4      	str	r4, [r4, #8]
 801176a:	f884 800c 	strb.w	r8, [r4, #12]
 801176e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011772:	d1f3      	bne.n	801175c <rmw_uxrce_init_client_memory+0x20>
 8011774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011778:	4770      	bx	lr
 801177a:	bf00      	nop

0801177c <rmw_uxrce_init_publisher_memory>:
 801177c:	b1e2      	cbz	r2, 80117b8 <rmw_uxrce_init_publisher_memory+0x3c>
 801177e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011782:	7b05      	ldrb	r5, [r0, #12]
 8011784:	4606      	mov	r6, r0
 8011786:	b9ad      	cbnz	r5, 80117b4 <rmw_uxrce_init_publisher_memory+0x38>
 8011788:	23d8      	movs	r3, #216	@ 0xd8
 801178a:	e9c0 5500 	strd	r5, r5, [r0]
 801178e:	6083      	str	r3, [r0, #8]
 8011790:	f240 1301 	movw	r3, #257	@ 0x101
 8011794:	4617      	mov	r7, r2
 8011796:	8183      	strh	r3, [r0, #12]
 8011798:	460c      	mov	r4, r1
 801179a:	46a8      	mov	r8, r5
 801179c:	4621      	mov	r1, r4
 801179e:	4630      	mov	r0, r6
 80117a0:	3501      	adds	r5, #1
 80117a2:	f008 fc1d 	bl	8019fe0 <put_memory>
 80117a6:	42af      	cmp	r7, r5
 80117a8:	60a4      	str	r4, [r4, #8]
 80117aa:	f884 800c 	strb.w	r8, [r4, #12]
 80117ae:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80117b2:	d1f3      	bne.n	801179c <rmw_uxrce_init_publisher_memory+0x20>
 80117b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117b8:	4770      	bx	lr
 80117ba:	bf00      	nop

080117bc <rmw_uxrce_init_subscription_memory>:
 80117bc:	b1e2      	cbz	r2, 80117f8 <rmw_uxrce_init_subscription_memory+0x3c>
 80117be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117c2:	7b05      	ldrb	r5, [r0, #12]
 80117c4:	4606      	mov	r6, r0
 80117c6:	b9ad      	cbnz	r5, 80117f4 <rmw_uxrce_init_subscription_memory+0x38>
 80117c8:	23d8      	movs	r3, #216	@ 0xd8
 80117ca:	e9c0 5500 	strd	r5, r5, [r0]
 80117ce:	6083      	str	r3, [r0, #8]
 80117d0:	f240 1301 	movw	r3, #257	@ 0x101
 80117d4:	4617      	mov	r7, r2
 80117d6:	8183      	strh	r3, [r0, #12]
 80117d8:	460c      	mov	r4, r1
 80117da:	46a8      	mov	r8, r5
 80117dc:	4621      	mov	r1, r4
 80117de:	4630      	mov	r0, r6
 80117e0:	3501      	adds	r5, #1
 80117e2:	f008 fbfd 	bl	8019fe0 <put_memory>
 80117e6:	42af      	cmp	r7, r5
 80117e8:	60a4      	str	r4, [r4, #8]
 80117ea:	f884 800c 	strb.w	r8, [r4, #12]
 80117ee:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80117f2:	d1f3      	bne.n	80117dc <rmw_uxrce_init_subscription_memory+0x20>
 80117f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117f8:	4770      	bx	lr
 80117fa:	bf00      	nop

080117fc <rmw_uxrce_init_node_memory>:
 80117fc:	b1e2      	cbz	r2, 8011838 <rmw_uxrce_init_node_memory+0x3c>
 80117fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011802:	7b05      	ldrb	r5, [r0, #12]
 8011804:	4606      	mov	r6, r0
 8011806:	b9ad      	cbnz	r5, 8011834 <rmw_uxrce_init_node_memory+0x38>
 8011808:	23a4      	movs	r3, #164	@ 0xa4
 801180a:	e9c0 5500 	strd	r5, r5, [r0]
 801180e:	6083      	str	r3, [r0, #8]
 8011810:	f240 1301 	movw	r3, #257	@ 0x101
 8011814:	4617      	mov	r7, r2
 8011816:	8183      	strh	r3, [r0, #12]
 8011818:	460c      	mov	r4, r1
 801181a:	46a8      	mov	r8, r5
 801181c:	4621      	mov	r1, r4
 801181e:	4630      	mov	r0, r6
 8011820:	3501      	adds	r5, #1
 8011822:	f008 fbdd 	bl	8019fe0 <put_memory>
 8011826:	42af      	cmp	r7, r5
 8011828:	60a4      	str	r4, [r4, #8]
 801182a:	f884 800c 	strb.w	r8, [r4, #12]
 801182e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8011832:	d1f3      	bne.n	801181c <rmw_uxrce_init_node_memory+0x20>
 8011834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011838:	4770      	bx	lr
 801183a:	bf00      	nop

0801183c <rmw_uxrce_init_session_memory>:
 801183c:	b1ea      	cbz	r2, 801187a <rmw_uxrce_init_session_memory+0x3e>
 801183e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011842:	7b05      	ldrb	r5, [r0, #12]
 8011844:	4606      	mov	r6, r0
 8011846:	b9b5      	cbnz	r5, 8011876 <rmw_uxrce_init_session_memory+0x3a>
 8011848:	e9c0 5500 	strd	r5, r5, [r0]
 801184c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8011850:	f240 1301 	movw	r3, #257	@ 0x101
 8011854:	4617      	mov	r7, r2
 8011856:	f8c0 8008 	str.w	r8, [r0, #8]
 801185a:	460c      	mov	r4, r1
 801185c:	8183      	strh	r3, [r0, #12]
 801185e:	46a9      	mov	r9, r5
 8011860:	4621      	mov	r1, r4
 8011862:	4630      	mov	r0, r6
 8011864:	3501      	adds	r5, #1
 8011866:	f008 fbbb 	bl	8019fe0 <put_memory>
 801186a:	42af      	cmp	r7, r5
 801186c:	60a4      	str	r4, [r4, #8]
 801186e:	f884 900c 	strb.w	r9, [r4, #12]
 8011872:	4444      	add	r4, r8
 8011874:	d1f4      	bne.n	8011860 <rmw_uxrce_init_session_memory+0x24>
 8011876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801187a:	4770      	bx	lr

0801187c <rmw_uxrce_init_topic_memory>:
 801187c:	b1e2      	cbz	r2, 80118b8 <rmw_uxrce_init_topic_memory+0x3c>
 801187e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011882:	7b05      	ldrb	r5, [r0, #12]
 8011884:	4606      	mov	r6, r0
 8011886:	b9ad      	cbnz	r5, 80118b4 <rmw_uxrce_init_topic_memory+0x38>
 8011888:	231c      	movs	r3, #28
 801188a:	e9c0 5500 	strd	r5, r5, [r0]
 801188e:	6083      	str	r3, [r0, #8]
 8011890:	f240 1301 	movw	r3, #257	@ 0x101
 8011894:	4617      	mov	r7, r2
 8011896:	8183      	strh	r3, [r0, #12]
 8011898:	460c      	mov	r4, r1
 801189a:	46a8      	mov	r8, r5
 801189c:	4621      	mov	r1, r4
 801189e:	4630      	mov	r0, r6
 80118a0:	3501      	adds	r5, #1
 80118a2:	f008 fb9d 	bl	8019fe0 <put_memory>
 80118a6:	42af      	cmp	r7, r5
 80118a8:	60a4      	str	r4, [r4, #8]
 80118aa:	f884 800c 	strb.w	r8, [r4, #12]
 80118ae:	f104 041c 	add.w	r4, r4, #28
 80118b2:	d1f3      	bne.n	801189c <rmw_uxrce_init_topic_memory+0x20>
 80118b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118b8:	4770      	bx	lr
 80118ba:	bf00      	nop

080118bc <rmw_uxrce_init_static_input_buffer_memory>:
 80118bc:	b1ea      	cbz	r2, 80118fa <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80118be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118c2:	7b05      	ldrb	r5, [r0, #12]
 80118c4:	4606      	mov	r6, r0
 80118c6:	b9b5      	cbnz	r5, 80118f6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80118c8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 80118cc:	e9c0 5500 	strd	r5, r5, [r0]
 80118d0:	6083      	str	r3, [r0, #8]
 80118d2:	f240 1301 	movw	r3, #257	@ 0x101
 80118d6:	4617      	mov	r7, r2
 80118d8:	8183      	strh	r3, [r0, #12]
 80118da:	460c      	mov	r4, r1
 80118dc:	46a8      	mov	r8, r5
 80118de:	4621      	mov	r1, r4
 80118e0:	4630      	mov	r0, r6
 80118e2:	3501      	adds	r5, #1
 80118e4:	f008 fb7c 	bl	8019fe0 <put_memory>
 80118e8:	42af      	cmp	r7, r5
 80118ea:	60a4      	str	r4, [r4, #8]
 80118ec:	f884 800c 	strb.w	r8, [r4, #12]
 80118f0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 80118f4:	d1f3      	bne.n	80118de <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80118f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118fa:	4770      	bx	lr

080118fc <rmw_uxrce_init_init_options_impl_memory>:
 80118fc:	b1e2      	cbz	r2, 8011938 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 80118fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011902:	7b05      	ldrb	r5, [r0, #12]
 8011904:	4606      	mov	r6, r0
 8011906:	b9ad      	cbnz	r5, 8011934 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8011908:	232c      	movs	r3, #44	@ 0x2c
 801190a:	e9c0 5500 	strd	r5, r5, [r0]
 801190e:	6083      	str	r3, [r0, #8]
 8011910:	f240 1301 	movw	r3, #257	@ 0x101
 8011914:	4617      	mov	r7, r2
 8011916:	8183      	strh	r3, [r0, #12]
 8011918:	460c      	mov	r4, r1
 801191a:	46a8      	mov	r8, r5
 801191c:	4621      	mov	r1, r4
 801191e:	4630      	mov	r0, r6
 8011920:	3501      	adds	r5, #1
 8011922:	f008 fb5d 	bl	8019fe0 <put_memory>
 8011926:	42af      	cmp	r7, r5
 8011928:	60a4      	str	r4, [r4, #8]
 801192a:	f884 800c 	strb.w	r8, [r4, #12]
 801192e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8011932:	d1f3      	bne.n	801191c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8011934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011938:	4770      	bx	lr
 801193a:	bf00      	nop

0801193c <rmw_uxrce_init_wait_set_memory>:
 801193c:	b1e2      	cbz	r2, 8011978 <rmw_uxrce_init_wait_set_memory+0x3c>
 801193e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011942:	7b05      	ldrb	r5, [r0, #12]
 8011944:	4606      	mov	r6, r0
 8011946:	b9ad      	cbnz	r5, 8011974 <rmw_uxrce_init_wait_set_memory+0x38>
 8011948:	231c      	movs	r3, #28
 801194a:	e9c0 5500 	strd	r5, r5, [r0]
 801194e:	6083      	str	r3, [r0, #8]
 8011950:	f240 1301 	movw	r3, #257	@ 0x101
 8011954:	4617      	mov	r7, r2
 8011956:	8183      	strh	r3, [r0, #12]
 8011958:	460c      	mov	r4, r1
 801195a:	46a8      	mov	r8, r5
 801195c:	4621      	mov	r1, r4
 801195e:	4630      	mov	r0, r6
 8011960:	3501      	adds	r5, #1
 8011962:	f008 fb3d 	bl	8019fe0 <put_memory>
 8011966:	42af      	cmp	r7, r5
 8011968:	60a4      	str	r4, [r4, #8]
 801196a:	f884 800c 	strb.w	r8, [r4, #12]
 801196e:	f104 041c 	add.w	r4, r4, #28
 8011972:	d1f3      	bne.n	801195c <rmw_uxrce_init_wait_set_memory+0x20>
 8011974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011978:	4770      	bx	lr
 801197a:	bf00      	nop

0801197c <rmw_uxrce_init_guard_condition_memory>:
 801197c:	b1e2      	cbz	r2, 80119b8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801197e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011982:	7b05      	ldrb	r5, [r0, #12]
 8011984:	4606      	mov	r6, r0
 8011986:	b9ad      	cbnz	r5, 80119b4 <rmw_uxrce_init_guard_condition_memory+0x38>
 8011988:	2320      	movs	r3, #32
 801198a:	e9c0 5500 	strd	r5, r5, [r0]
 801198e:	6083      	str	r3, [r0, #8]
 8011990:	f240 1301 	movw	r3, #257	@ 0x101
 8011994:	4617      	mov	r7, r2
 8011996:	8183      	strh	r3, [r0, #12]
 8011998:	460c      	mov	r4, r1
 801199a:	46a8      	mov	r8, r5
 801199c:	4621      	mov	r1, r4
 801199e:	4630      	mov	r0, r6
 80119a0:	3501      	adds	r5, #1
 80119a2:	f008 fb1d 	bl	8019fe0 <put_memory>
 80119a6:	42af      	cmp	r7, r5
 80119a8:	60a4      	str	r4, [r4, #8]
 80119aa:	f884 800c 	strb.w	r8, [r4, #12]
 80119ae:	f104 0420 	add.w	r4, r4, #32
 80119b2:	d1f3      	bne.n	801199c <rmw_uxrce_init_guard_condition_memory+0x20>
 80119b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119b8:	4770      	bx	lr
 80119ba:	bf00      	nop

080119bc <rmw_uxrce_fini_session_memory>:
 80119bc:	4601      	mov	r1, r0
 80119be:	4801      	ldr	r0, [pc, #4]	@ (80119c4 <rmw_uxrce_fini_session_memory+0x8>)
 80119c0:	f008 bb0e 	b.w	8019fe0 <put_memory>
 80119c4:	2000bb04 	.word	0x2000bb04

080119c8 <rmw_uxrce_fini_node_memory>:
 80119c8:	b538      	push	{r3, r4, r5, lr}
 80119ca:	4604      	mov	r4, r0
 80119cc:	6800      	ldr	r0, [r0, #0]
 80119ce:	b128      	cbz	r0, 80119dc <rmw_uxrce_fini_node_memory+0x14>
 80119d0:	4b07      	ldr	r3, [pc, #28]	@ (80119f0 <rmw_uxrce_fini_node_memory+0x28>)
 80119d2:	6819      	ldr	r1, [r3, #0]
 80119d4:	f7ee fc24 	bl	8000220 <strcmp>
 80119d8:	b940      	cbnz	r0, 80119ec <rmw_uxrce_fini_node_memory+0x24>
 80119da:	6020      	str	r0, [r4, #0]
 80119dc:	6861      	ldr	r1, [r4, #4]
 80119de:	b129      	cbz	r1, 80119ec <rmw_uxrce_fini_node_memory+0x24>
 80119e0:	2500      	movs	r5, #0
 80119e2:	4804      	ldr	r0, [pc, #16]	@ (80119f4 <rmw_uxrce_fini_node_memory+0x2c>)
 80119e4:	610d      	str	r5, [r1, #16]
 80119e6:	f008 fafb 	bl	8019fe0 <put_memory>
 80119ea:	6065      	str	r5, [r4, #4]
 80119ec:	bd38      	pop	{r3, r4, r5, pc}
 80119ee:	bf00      	nop
 80119f0:	0801f2a0 	.word	0x0801f2a0
 80119f4:	2000bad4 	.word	0x2000bad4

080119f8 <rmw_uxrce_fini_publisher_memory>:
 80119f8:	b510      	push	{r4, lr}
 80119fa:	4604      	mov	r4, r0
 80119fc:	6800      	ldr	r0, [r0, #0]
 80119fe:	b128      	cbz	r0, 8011a0c <rmw_uxrce_fini_publisher_memory+0x14>
 8011a00:	4b06      	ldr	r3, [pc, #24]	@ (8011a1c <rmw_uxrce_fini_publisher_memory+0x24>)
 8011a02:	6819      	ldr	r1, [r3, #0]
 8011a04:	f7ee fc0c 	bl	8000220 <strcmp>
 8011a08:	b938      	cbnz	r0, 8011a1a <rmw_uxrce_fini_publisher_memory+0x22>
 8011a0a:	6020      	str	r0, [r4, #0]
 8011a0c:	6861      	ldr	r1, [r4, #4]
 8011a0e:	b121      	cbz	r1, 8011a1a <rmw_uxrce_fini_publisher_memory+0x22>
 8011a10:	4803      	ldr	r0, [pc, #12]	@ (8011a20 <rmw_uxrce_fini_publisher_memory+0x28>)
 8011a12:	f008 fae5 	bl	8019fe0 <put_memory>
 8011a16:	2300      	movs	r3, #0
 8011a18:	6063      	str	r3, [r4, #4]
 8011a1a:	bd10      	pop	{r4, pc}
 8011a1c:	0801f2a0 	.word	0x0801f2a0
 8011a20:	2000bae4 	.word	0x2000bae4

08011a24 <rmw_uxrce_fini_subscription_memory>:
 8011a24:	b510      	push	{r4, lr}
 8011a26:	4604      	mov	r4, r0
 8011a28:	6800      	ldr	r0, [r0, #0]
 8011a2a:	b128      	cbz	r0, 8011a38 <rmw_uxrce_fini_subscription_memory+0x14>
 8011a2c:	4b06      	ldr	r3, [pc, #24]	@ (8011a48 <rmw_uxrce_fini_subscription_memory+0x24>)
 8011a2e:	6819      	ldr	r1, [r3, #0]
 8011a30:	f7ee fbf6 	bl	8000220 <strcmp>
 8011a34:	b938      	cbnz	r0, 8011a46 <rmw_uxrce_fini_subscription_memory+0x22>
 8011a36:	6020      	str	r0, [r4, #0]
 8011a38:	6861      	ldr	r1, [r4, #4]
 8011a3a:	b121      	cbz	r1, 8011a46 <rmw_uxrce_fini_subscription_memory+0x22>
 8011a3c:	4803      	ldr	r0, [pc, #12]	@ (8011a4c <rmw_uxrce_fini_subscription_memory+0x28>)
 8011a3e:	f008 facf 	bl	8019fe0 <put_memory>
 8011a42:	2300      	movs	r3, #0
 8011a44:	6063      	str	r3, [r4, #4]
 8011a46:	bd10      	pop	{r4, pc}
 8011a48:	0801f2a0 	.word	0x0801f2a0
 8011a4c:	2000bb24 	.word	0x2000bb24

08011a50 <rmw_uxrce_fini_service_memory>:
 8011a50:	b510      	push	{r4, lr}
 8011a52:	4604      	mov	r4, r0
 8011a54:	6800      	ldr	r0, [r0, #0]
 8011a56:	b128      	cbz	r0, 8011a64 <rmw_uxrce_fini_service_memory+0x14>
 8011a58:	4b06      	ldr	r3, [pc, #24]	@ (8011a74 <rmw_uxrce_fini_service_memory+0x24>)
 8011a5a:	6819      	ldr	r1, [r3, #0]
 8011a5c:	f7ee fbe0 	bl	8000220 <strcmp>
 8011a60:	b938      	cbnz	r0, 8011a72 <rmw_uxrce_fini_service_memory+0x22>
 8011a62:	6020      	str	r0, [r4, #0]
 8011a64:	6861      	ldr	r1, [r4, #4]
 8011a66:	b121      	cbz	r1, 8011a72 <rmw_uxrce_fini_service_memory+0x22>
 8011a68:	4803      	ldr	r0, [pc, #12]	@ (8011a78 <rmw_uxrce_fini_service_memory+0x28>)
 8011a6a:	f008 fab9 	bl	8019fe0 <put_memory>
 8011a6e:	2300      	movs	r3, #0
 8011a70:	6063      	str	r3, [r4, #4]
 8011a72:	bd10      	pop	{r4, pc}
 8011a74:	0801f2a0 	.word	0x0801f2a0
 8011a78:	2000baf4 	.word	0x2000baf4

08011a7c <rmw_uxrce_fini_client_memory>:
 8011a7c:	b510      	push	{r4, lr}
 8011a7e:	4604      	mov	r4, r0
 8011a80:	6800      	ldr	r0, [r0, #0]
 8011a82:	b128      	cbz	r0, 8011a90 <rmw_uxrce_fini_client_memory+0x14>
 8011a84:	4b06      	ldr	r3, [pc, #24]	@ (8011aa0 <rmw_uxrce_fini_client_memory+0x24>)
 8011a86:	6819      	ldr	r1, [r3, #0]
 8011a88:	f7ee fbca 	bl	8000220 <strcmp>
 8011a8c:	b938      	cbnz	r0, 8011a9e <rmw_uxrce_fini_client_memory+0x22>
 8011a8e:	6020      	str	r0, [r4, #0]
 8011a90:	6861      	ldr	r1, [r4, #4]
 8011a92:	b121      	cbz	r1, 8011a9e <rmw_uxrce_fini_client_memory+0x22>
 8011a94:	4803      	ldr	r0, [pc, #12]	@ (8011aa4 <rmw_uxrce_fini_client_memory+0x28>)
 8011a96:	f008 faa3 	bl	8019fe0 <put_memory>
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	6063      	str	r3, [r4, #4]
 8011a9e:	bd10      	pop	{r4, pc}
 8011aa0:	0801f2a0 	.word	0x0801f2a0
 8011aa4:	2000713c 	.word	0x2000713c

08011aa8 <rmw_uxrce_fini_topic_memory>:
 8011aa8:	b510      	push	{r4, lr}
 8011aaa:	4604      	mov	r4, r0
 8011aac:	4621      	mov	r1, r4
 8011aae:	4803      	ldr	r0, [pc, #12]	@ (8011abc <rmw_uxrce_fini_topic_memory+0x14>)
 8011ab0:	f008 fa96 	bl	8019fe0 <put_memory>
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	61a3      	str	r3, [r4, #24]
 8011ab8:	bd10      	pop	{r4, pc}
 8011aba:	bf00      	nop
 8011abc:	2000bb34 	.word	0x2000bb34

08011ac0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8011ac0:	b082      	sub	sp, #8
 8011ac2:	b530      	push	{r4, r5, lr}
 8011ac4:	4925      	ldr	r1, [pc, #148]	@ (8011b5c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8011ac6:	680d      	ldr	r5, [r1, #0]
 8011ac8:	ac03      	add	r4, sp, #12
 8011aca:	e884 000c 	stmia.w	r4, {r2, r3}
 8011ace:	461c      	mov	r4, r3
 8011ad0:	2d00      	cmp	r5, #0
 8011ad2:	d041      	beq.n	8011b58 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8011ad4:	462b      	mov	r3, r5
 8011ad6:	2100      	movs	r1, #0
 8011ad8:	689a      	ldr	r2, [r3, #8]
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8011ae0:	4290      	cmp	r0, r2
 8011ae2:	bf08      	it	eq
 8011ae4:	3101      	addeq	r1, #1
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d1f6      	bne.n	8011ad8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8011aea:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011aee:	2b02      	cmp	r3, #2
 8011af0:	d029      	beq.n	8011b46 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8011af2:	d907      	bls.n	8011b04 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8011af4:	2b03      	cmp	r3, #3
 8011af6:	d005      	beq.n	8011b04 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8011af8:	2100      	movs	r1, #0
 8011afa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011afe:	4608      	mov	r0, r1
 8011b00:	b002      	add	sp, #8
 8011b02:	4770      	bx	lr
 8011b04:	b314      	cbz	r4, 8011b4c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011b06:	428c      	cmp	r4, r1
 8011b08:	d820      	bhi.n	8011b4c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011b0a:	2d00      	cmp	r5, #0
 8011b0c:	d0f4      	beq.n	8011af8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8011b0e:	2100      	movs	r1, #0
 8011b10:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8011b14:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8011b18:	e002      	b.n	8011b20 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8011b1a:	686d      	ldr	r5, [r5, #4]
 8011b1c:	2d00      	cmp	r5, #0
 8011b1e:	d0ec      	beq.n	8011afa <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8011b20:	68ab      	ldr	r3, [r5, #8]
 8011b22:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8011b26:	4290      	cmp	r0, r2
 8011b28:	d1f7      	bne.n	8011b1a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011b2a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8011b2e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8011b32:	4562      	cmp	r2, ip
 8011b34:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011b38:	eb73 0e04 	sbcs.w	lr, r3, r4
 8011b3c:	daed      	bge.n	8011b1a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011b3e:	4694      	mov	ip, r2
 8011b40:	461c      	mov	r4, r3
 8011b42:	4629      	mov	r1, r5
 8011b44:	e7e9      	b.n	8011b1a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011b46:	b10c      	cbz	r4, 8011b4c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011b48:	428c      	cmp	r4, r1
 8011b4a:	d9d5      	bls.n	8011af8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8011b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b50:	4802      	ldr	r0, [pc, #8]	@ (8011b5c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8011b52:	b002      	add	sp, #8
 8011b54:	f008 ba34 	b.w	8019fc0 <get_memory>
 8011b58:	4629      	mov	r1, r5
 8011b5a:	e7c6      	b.n	8011aea <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8011b5c:	2000bb14 	.word	0x2000bb14

08011b60 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8011b60:	4b11      	ldr	r3, [pc, #68]	@ (8011ba8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	b530      	push	{r4, r5, lr}
 8011b66:	b1e3      	cbz	r3, 8011ba2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8011b68:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8011b6c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8011b70:	2400      	movs	r4, #0
 8011b72:	e001      	b.n	8011b78 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8011b74:	685b      	ldr	r3, [r3, #4]
 8011b76:	b193      	cbz	r3, 8011b9e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 8011b78:	689a      	ldr	r2, [r3, #8]
 8011b7a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8011b7e:	4288      	cmp	r0, r1
 8011b80:	d1f8      	bne.n	8011b74 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8011b82:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8011b86:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 8011b8a:	4571      	cmp	r1, lr
 8011b8c:	eb72 050c 	sbcs.w	r5, r2, ip
 8011b90:	daf0      	bge.n	8011b74 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8011b92:	461c      	mov	r4, r3
 8011b94:	685b      	ldr	r3, [r3, #4]
 8011b96:	468e      	mov	lr, r1
 8011b98:	4694      	mov	ip, r2
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d1ec      	bne.n	8011b78 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8011b9e:	4620      	mov	r0, r4
 8011ba0:	bd30      	pop	{r4, r5, pc}
 8011ba2:	461c      	mov	r4, r3
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	bd30      	pop	{r4, r5, pc}
 8011ba8:	2000bb14 	.word	0x2000bb14
 8011bac:	00000000 	.word	0x00000000

08011bb0 <rmw_uxrce_clean_expired_static_input_buffer>:
 8011bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb4:	4b3c      	ldr	r3, [pc, #240]	@ (8011ca8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8011bb6:	ed2d 8b06 	vpush	{d8-d10}
 8011bba:	681f      	ldr	r7, [r3, #0]
 8011bbc:	b08d      	sub	sp, #52	@ 0x34
 8011bbe:	f7ff fd7d 	bl	80116bc <rmw_uros_epoch_nanos>
 8011bc2:	2f00      	cmp	r7, #0
 8011bc4:	d05d      	beq.n	8011c82 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8011bc6:	46b8      	mov	r8, r7
 8011bc8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 8011c90 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8011bcc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011bd0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8011bd4:	2b04      	cmp	r3, #4
 8011bd6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 8011c98 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8011bda:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 8011ca0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8011bde:	4681      	mov	r9, r0
 8011be0:	468a      	mov	sl, r1
 8011be2:	ac04      	add	r4, sp, #16
 8011be4:	d03f      	beq.n	8011c66 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8011be6:	2b05      	cmp	r3, #5
 8011be8:	d044      	beq.n	8011c74 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8011bea:	2b03      	cmp	r3, #3
 8011bec:	d03b      	beq.n	8011c66 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8011bee:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011bf2:	ed8d ab06 	vstr	d10, [sp, #24]
 8011bf6:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011bfa:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8011bfe:	ab08      	add	r3, sp, #32
 8011c00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011c02:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011c06:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011c0a:	f007 ff25 	bl	8019a58 <rmw_time_equal>
 8011c0e:	b118      	cbz	r0, 8011c18 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8011c10:	ed8d 9b04 	vstr	d9, [sp, #16]
 8011c14:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011c18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011c1c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8011c20:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 8011c24:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8011c28:	f007 ff6a 	bl	8019b00 <rmw_time_total_nsec>
 8011c2c:	1830      	adds	r0, r6, r0
 8011c2e:	eb47 0101 	adc.w	r1, r7, r1
 8011c32:	4548      	cmp	r0, r9
 8011c34:	eb71 030a 	sbcs.w	r3, r1, sl
 8011c38:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8011c3c:	db05      	blt.n	8011c4a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8011c3e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8011c42:	4591      	cmp	r9, r2
 8011c44:	eb7a 0303 	sbcs.w	r3, sl, r3
 8011c48:	da03      	bge.n	8011c52 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8011c4a:	4817      	ldr	r0, [pc, #92]	@ (8011ca8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8011c4c:	4641      	mov	r1, r8
 8011c4e:	f008 f9c7 	bl	8019fe0 <put_memory>
 8011c52:	f1bb 0f00 	cmp.w	fp, #0
 8011c56:	d014      	beq.n	8011c82 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8011c58:	46d8      	mov	r8, fp
 8011c5a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011c5e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8011c62:	2b04      	cmp	r3, #4
 8011c64:	d1bf      	bne.n	8011be6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8011c66:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8011c6a:	3340      	adds	r3, #64	@ 0x40
 8011c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011c6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011c72:	e7c0      	b.n	8011bf6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8011c74:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8011c78:	3348      	adds	r3, #72	@ 0x48
 8011c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011c80:	e7b9      	b.n	8011bf6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8011c82:	b00d      	add	sp, #52	@ 0x34
 8011c84:	ecbd 8b06 	vpop	{d8-d10}
 8011c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c8c:	f3af 8000 	nop.w
	...
 8011c98:	00000001 	.word	0x00000001
 8011c9c:	00000000 	.word	0x00000000
 8011ca0:	0000001e 	.word	0x0000001e
 8011ca4:	00000000 	.word	0x00000000
 8011ca8:	2000bb14 	.word	0x2000bb14

08011cac <run_xrce_session>:
 8011cac:	b510      	push	{r4, lr}
 8011cae:	788c      	ldrb	r4, [r1, #2]
 8011cb0:	b086      	sub	sp, #24
 8011cb2:	2c01      	cmp	r4, #1
 8011cb4:	f8ad 200e 	strh.w	r2, [sp, #14]
 8011cb8:	d00c      	beq.n	8011cd4 <run_xrce_session+0x28>
 8011cba:	4619      	mov	r1, r3
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	9300      	str	r3, [sp, #0]
 8011cc0:	f10d 020e 	add.w	r2, sp, #14
 8011cc4:	f10d 0317 	add.w	r3, sp, #23
 8011cc8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011ccc:	f002 f968 	bl	8013fa0 <uxr_run_session_until_all_status>
 8011cd0:	b006      	add	sp, #24
 8011cd2:	bd10      	pop	{r4, pc}
 8011cd4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011cd8:	f001 fd7c 	bl	80137d4 <uxr_flash_output_streams>
 8011cdc:	4620      	mov	r0, r4
 8011cde:	b006      	add	sp, #24
 8011ce0:	bd10      	pop	{r4, pc}
 8011ce2:	bf00      	nop

08011ce4 <convert_qos_profile>:
 8011ce4:	7a4a      	ldrb	r2, [r1, #9]
 8011ce6:	f891 c008 	ldrb.w	ip, [r1, #8]
 8011cea:	2a02      	cmp	r2, #2
 8011cec:	bf18      	it	ne
 8011cee:	2200      	movne	r2, #0
 8011cf0:	7002      	strb	r2, [r0, #0]
 8011cf2:	780a      	ldrb	r2, [r1, #0]
 8011cf4:	8889      	ldrh	r1, [r1, #4]
 8011cf6:	8081      	strh	r1, [r0, #4]
 8011cf8:	f1ac 0c02 	sub.w	ip, ip, #2
 8011cfc:	f1a2 0202 	sub.w	r2, r2, #2
 8011d00:	fabc fc8c 	clz	ip, ip
 8011d04:	fab2 f282 	clz	r2, r2
 8011d08:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8011d0c:	0952      	lsrs	r2, r2, #5
 8011d0e:	f880 c001 	strb.w	ip, [r0, #1]
 8011d12:	7082      	strb	r2, [r0, #2]
 8011d14:	4770      	bx	lr
 8011d16:	bf00      	nop

08011d18 <generate_service_topics>:
 8011d18:	b570      	push	{r4, r5, r6, lr}
 8011d1a:	b082      	sub	sp, #8
 8011d1c:	461c      	mov	r4, r3
 8011d1e:	4b12      	ldr	r3, [pc, #72]	@ (8011d68 <generate_service_topics+0x50>)
 8011d20:	9301      	str	r3, [sp, #4]
 8011d22:	4605      	mov	r5, r0
 8011d24:	4b11      	ldr	r3, [pc, #68]	@ (8011d6c <generate_service_topics+0x54>)
 8011d26:	9000      	str	r0, [sp, #0]
 8011d28:	4616      	mov	r6, r2
 8011d2a:	4608      	mov	r0, r1
 8011d2c:	4a10      	ldr	r2, [pc, #64]	@ (8011d70 <generate_service_topics+0x58>)
 8011d2e:	4621      	mov	r1, r4
 8011d30:	f00a fb42 	bl	801c3b8 <sniprintf>
 8011d34:	4b0f      	ldr	r3, [pc, #60]	@ (8011d74 <generate_service_topics+0x5c>)
 8011d36:	9301      	str	r3, [sp, #4]
 8011d38:	4601      	mov	r1, r0
 8011d3a:	9500      	str	r5, [sp, #0]
 8011d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8011d78 <generate_service_topics+0x60>)
 8011d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8011d70 <generate_service_topics+0x58>)
 8011d40:	460d      	mov	r5, r1
 8011d42:	4630      	mov	r0, r6
 8011d44:	4621      	mov	r1, r4
 8011d46:	f00a fb37 	bl	801c3b8 <sniprintf>
 8011d4a:	2d00      	cmp	r5, #0
 8011d4c:	db01      	blt.n	8011d52 <generate_service_topics+0x3a>
 8011d4e:	42ac      	cmp	r4, r5
 8011d50:	dc02      	bgt.n	8011d58 <generate_service_topics+0x40>
 8011d52:	2000      	movs	r0, #0
 8011d54:	b002      	add	sp, #8
 8011d56:	bd70      	pop	{r4, r5, r6, pc}
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	dbfa      	blt.n	8011d52 <generate_service_topics+0x3a>
 8011d5c:	4284      	cmp	r4, r0
 8011d5e:	bfd4      	ite	le
 8011d60:	2000      	movle	r0, #0
 8011d62:	2001      	movgt	r0, #1
 8011d64:	b002      	add	sp, #8
 8011d66:	bd70      	pop	{r4, r5, r6, pc}
 8011d68:	0801e4fc 	.word	0x0801e4fc
 8011d6c:	0801e4f8 	.word	0x0801e4f8
 8011d70:	0801e4d4 	.word	0x0801e4d4
 8011d74:	0801e4f0 	.word	0x0801e4f0
 8011d78:	0801e4ec 	.word	0x0801e4ec

08011d7c <generate_service_types>:
 8011d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d80:	4605      	mov	r5, r0
 8011d82:	b086      	sub	sp, #24
 8011d84:	6880      	ldr	r0, [r0, #8]
 8011d86:	460c      	mov	r4, r1
 8011d88:	4617      	mov	r7, r2
 8011d8a:	461e      	mov	r6, r3
 8011d8c:	4780      	blx	r0
 8011d8e:	68eb      	ldr	r3, [r5, #12]
 8011d90:	4680      	mov	r8, r0
 8011d92:	4798      	blx	r3
 8011d94:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8011d98:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	7023      	strb	r3, [r4, #0]
 8011da0:	6813      	ldr	r3, [r2, #0]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d042      	beq.n	8011e2c <generate_service_types+0xb0>
 8011da6:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8011e40 <generate_service_types+0xc4>
 8011daa:	4641      	mov	r1, r8
 8011dac:	4620      	mov	r0, r4
 8011dae:	4c22      	ldr	r4, [pc, #136]	@ (8011e38 <generate_service_types+0xbc>)
 8011db0:	9405      	str	r4, [sp, #20]
 8011db2:	6852      	ldr	r2, [r2, #4]
 8011db4:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8011e48 <generate_service_types+0xcc>
 8011db8:	9204      	str	r2, [sp, #16]
 8011dba:	9100      	str	r1, [sp, #0]
 8011dbc:	e9cd 4802 	strd	r4, r8, [sp, #8]
 8011dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8011e3c <generate_service_types+0xc0>)
 8011dc2:	f8cd a004 	str.w	sl, [sp, #4]
 8011dc6:	4631      	mov	r1, r6
 8011dc8:	f00a faf6 	bl	801c3b8 <sniprintf>
 8011dcc:	2800      	cmp	r0, #0
 8011dce:	db1f      	blt.n	8011e10 <generate_service_types+0x94>
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	703b      	strb	r3, [r7, #0]
 8011dd4:	f8d9 3000 	ldr.w	r3, [r9]
 8011dd8:	42b0      	cmp	r0, r6
 8011dda:	bfac      	ite	ge
 8011ddc:	2500      	movge	r5, #0
 8011dde:	2501      	movlt	r5, #1
 8011de0:	b1eb      	cbz	r3, 8011e1e <generate_service_types+0xa2>
 8011de2:	4a17      	ldr	r2, [pc, #92]	@ (8011e40 <generate_service_types+0xc4>)
 8011de4:	9405      	str	r4, [sp, #20]
 8011de6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011dea:	9200      	str	r2, [sp, #0]
 8011dec:	e9cd 8103 	strd	r8, r1, [sp, #12]
 8011df0:	e9cd a401 	strd	sl, r4, [sp, #4]
 8011df4:	4a11      	ldr	r2, [pc, #68]	@ (8011e3c <generate_service_types+0xc0>)
 8011df6:	4638      	mov	r0, r7
 8011df8:	4631      	mov	r1, r6
 8011dfa:	f00a fadd 	bl	801c3b8 <sniprintf>
 8011dfe:	2800      	cmp	r0, #0
 8011e00:	db10      	blt.n	8011e24 <generate_service_types+0xa8>
 8011e02:	42b0      	cmp	r0, r6
 8011e04:	bfb4      	ite	lt
 8011e06:	4628      	movlt	r0, r5
 8011e08:	2000      	movge	r0, #0
 8011e0a:	b006      	add	sp, #24
 8011e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e10:	2300      	movs	r3, #0
 8011e12:	703b      	strb	r3, [r7, #0]
 8011e14:	f8d9 3000 	ldr.w	r3, [r9]
 8011e18:	2500      	movs	r5, #0
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d1e1      	bne.n	8011de2 <generate_service_types+0x66>
 8011e1e:	4b09      	ldr	r3, [pc, #36]	@ (8011e44 <generate_service_types+0xc8>)
 8011e20:	461a      	mov	r2, r3
 8011e22:	e7df      	b.n	8011de4 <generate_service_types+0x68>
 8011e24:	2000      	movs	r0, #0
 8011e26:	b006      	add	sp, #24
 8011e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e2c:	4b05      	ldr	r3, [pc, #20]	@ (8011e44 <generate_service_types+0xc8>)
 8011e2e:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 8011e40 <generate_service_types+0xc4>
 8011e32:	4619      	mov	r1, r3
 8011e34:	e7ba      	b.n	8011dac <generate_service_types+0x30>
 8011e36:	bf00      	nop
 8011e38:	0801e4dc 	.word	0x0801e4dc
 8011e3c:	0801e4cc 	.word	0x0801e4cc
 8011e40:	0801e4c8 	.word	0x0801e4c8
 8011e44:	0801f32c 	.word	0x0801f32c
 8011e48:	0801e4e0 	.word	0x0801e4e0

08011e4c <generate_type_name>:
 8011e4c:	b530      	push	{r4, r5, lr}
 8011e4e:	2300      	movs	r3, #0
 8011e50:	700b      	strb	r3, [r1, #0]
 8011e52:	6803      	ldr	r3, [r0, #0]
 8011e54:	b087      	sub	sp, #28
 8011e56:	4614      	mov	r4, r2
 8011e58:	b1d3      	cbz	r3, 8011e90 <generate_type_name+0x44>
 8011e5a:	4a0f      	ldr	r2, [pc, #60]	@ (8011e98 <generate_type_name+0x4c>)
 8011e5c:	4615      	mov	r5, r2
 8011e5e:	9203      	str	r2, [sp, #12]
 8011e60:	9500      	str	r5, [sp, #0]
 8011e62:	6842      	ldr	r2, [r0, #4]
 8011e64:	480d      	ldr	r0, [pc, #52]	@ (8011e9c <generate_type_name+0x50>)
 8011e66:	9001      	str	r0, [sp, #4]
 8011e68:	4608      	mov	r0, r1
 8011e6a:	490d      	ldr	r1, [pc, #52]	@ (8011ea0 <generate_type_name+0x54>)
 8011e6c:	9204      	str	r2, [sp, #16]
 8011e6e:	9105      	str	r1, [sp, #20]
 8011e70:	9102      	str	r1, [sp, #8]
 8011e72:	4a0c      	ldr	r2, [pc, #48]	@ (8011ea4 <generate_type_name+0x58>)
 8011e74:	4621      	mov	r1, r4
 8011e76:	f00a fa9f 	bl	801c3b8 <sniprintf>
 8011e7a:	2800      	cmp	r0, #0
 8011e7c:	db05      	blt.n	8011e8a <generate_type_name+0x3e>
 8011e7e:	4284      	cmp	r4, r0
 8011e80:	bfd4      	ite	le
 8011e82:	2000      	movle	r0, #0
 8011e84:	2001      	movgt	r0, #1
 8011e86:	b007      	add	sp, #28
 8011e88:	bd30      	pop	{r4, r5, pc}
 8011e8a:	2000      	movs	r0, #0
 8011e8c:	b007      	add	sp, #28
 8011e8e:	bd30      	pop	{r4, r5, pc}
 8011e90:	4b05      	ldr	r3, [pc, #20]	@ (8011ea8 <generate_type_name+0x5c>)
 8011e92:	4a01      	ldr	r2, [pc, #4]	@ (8011e98 <generate_type_name+0x4c>)
 8011e94:	461d      	mov	r5, r3
 8011e96:	e7e2      	b.n	8011e5e <generate_type_name+0x12>
 8011e98:	0801e4c8 	.word	0x0801e4c8
 8011e9c:	0801e4e0 	.word	0x0801e4e0
 8011ea0:	0801e4dc 	.word	0x0801e4dc
 8011ea4:	0801e4cc 	.word	0x0801e4cc
 8011ea8:	0801f32c 	.word	0x0801f32c

08011eac <generate_topic_name>:
 8011eac:	b510      	push	{r4, lr}
 8011eae:	b082      	sub	sp, #8
 8011eb0:	4614      	mov	r4, r2
 8011eb2:	9000      	str	r0, [sp, #0]
 8011eb4:	4b08      	ldr	r3, [pc, #32]	@ (8011ed8 <generate_topic_name+0x2c>)
 8011eb6:	4a09      	ldr	r2, [pc, #36]	@ (8011edc <generate_topic_name+0x30>)
 8011eb8:	4608      	mov	r0, r1
 8011eba:	4621      	mov	r1, r4
 8011ebc:	f00a fa7c 	bl	801c3b8 <sniprintf>
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	db05      	blt.n	8011ed0 <generate_topic_name+0x24>
 8011ec4:	4284      	cmp	r4, r0
 8011ec6:	bfd4      	ite	le
 8011ec8:	2000      	movle	r0, #0
 8011eca:	2001      	movgt	r0, #1
 8011ecc:	b002      	add	sp, #8
 8011ece:	bd10      	pop	{r4, pc}
 8011ed0:	2000      	movs	r0, #0
 8011ed2:	b002      	add	sp, #8
 8011ed4:	bd10      	pop	{r4, pc}
 8011ed6:	bf00      	nop
 8011ed8:	0801e504 	.word	0x0801e504
 8011edc:	0801e4e4 	.word	0x0801e4e4

08011ee0 <is_uxrce_rmw_identifier_valid>:
 8011ee0:	b510      	push	{r4, lr}
 8011ee2:	4604      	mov	r4, r0
 8011ee4:	b140      	cbz	r0, 8011ef8 <is_uxrce_rmw_identifier_valid+0x18>
 8011ee6:	f008 f8d3 	bl	801a090 <rmw_get_implementation_identifier>
 8011eea:	4601      	mov	r1, r0
 8011eec:	4620      	mov	r0, r4
 8011eee:	f7ee f997 	bl	8000220 <strcmp>
 8011ef2:	fab0 f080 	clz	r0, r0
 8011ef6:	0940      	lsrs	r0, r0, #5
 8011ef8:	bd10      	pop	{r4, pc}
 8011efa:	bf00      	nop

08011efc <get_message_typesupport_handle>:
 8011efc:	6883      	ldr	r3, [r0, #8]
 8011efe:	4718      	bx	r3

08011f00 <get_message_typesupport_handle_function>:
 8011f00:	b510      	push	{r4, lr}
 8011f02:	4604      	mov	r4, r0
 8011f04:	6800      	ldr	r0, [r0, #0]
 8011f06:	f7ee f98b 	bl	8000220 <strcmp>
 8011f0a:	2800      	cmp	r0, #0
 8011f0c:	bf0c      	ite	eq
 8011f0e:	4620      	moveq	r0, r4
 8011f10:	2000      	movne	r0, #0
 8011f12:	bd10      	pop	{r4, pc}

08011f14 <get_service_typesupport_handle>:
 8011f14:	6883      	ldr	r3, [r0, #8]
 8011f16:	4718      	bx	r3

08011f18 <get_service_typesupport_handle_function>:
 8011f18:	b510      	push	{r4, lr}
 8011f1a:	4604      	mov	r4, r0
 8011f1c:	6800      	ldr	r0, [r0, #0]
 8011f1e:	f7ee f97f 	bl	8000220 <strcmp>
 8011f22:	2800      	cmp	r0, #0
 8011f24:	bf0c      	ite	eq
 8011f26:	4620      	moveq	r0, r4
 8011f28:	2000      	movne	r0, #0
 8011f2a:	bd10      	pop	{r4, pc}

08011f2c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8011f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f30:	6805      	ldr	r5, [r0, #0]
 8011f32:	4604      	mov	r4, r0
 8011f34:	4628      	mov	r0, r5
 8011f36:	460e      	mov	r6, r1
 8011f38:	f7ee f972 	bl	8000220 <strcmp>
 8011f3c:	b1c8      	cbz	r0, 8011f72 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8011f3e:	4b11      	ldr	r3, [pc, #68]	@ (8011f84 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	429d      	cmp	r5, r3
 8011f44:	d112      	bne.n	8011f6c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8011f46:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8011f4a:	f8d8 4000 	ldr.w	r4, [r8]
 8011f4e:	b16c      	cbz	r4, 8011f6c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8011f50:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011f54:	2700      	movs	r7, #0
 8011f56:	3d04      	subs	r5, #4
 8011f58:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8011f5c:	4631      	mov	r1, r6
 8011f5e:	f7ee f95f 	bl	8000220 <strcmp>
 8011f62:	00bb      	lsls	r3, r7, #2
 8011f64:	b140      	cbz	r0, 8011f78 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8011f66:	3701      	adds	r7, #1
 8011f68:	42bc      	cmp	r4, r7
 8011f6a:	d1f5      	bne.n	8011f58 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8011f6c:	2000      	movs	r0, #0
 8011f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f72:	4620      	mov	r0, r4
 8011f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f78:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f80:	58d3      	ldr	r3, [r2, r3]
 8011f82:	4718      	bx	r3
 8011f84:	200003b4 	.word	0x200003b4

08011f88 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8011f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f8c:	6805      	ldr	r5, [r0, #0]
 8011f8e:	4604      	mov	r4, r0
 8011f90:	4628      	mov	r0, r5
 8011f92:	460e      	mov	r6, r1
 8011f94:	f7ee f944 	bl	8000220 <strcmp>
 8011f98:	b1c8      	cbz	r0, 8011fce <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 8011f9a:	4b11      	ldr	r3, [pc, #68]	@ (8011fe0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	429d      	cmp	r5, r3
 8011fa0:	d112      	bne.n	8011fc8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8011fa2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8011fa6:	f8d8 4000 	ldr.w	r4, [r8]
 8011faa:	b16c      	cbz	r4, 8011fc8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8011fac:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011fb0:	2700      	movs	r7, #0
 8011fb2:	3d04      	subs	r5, #4
 8011fb4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8011fb8:	4631      	mov	r1, r6
 8011fba:	f7ee f931 	bl	8000220 <strcmp>
 8011fbe:	00bb      	lsls	r3, r7, #2
 8011fc0:	b140      	cbz	r0, 8011fd4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 8011fc2:	3701      	adds	r7, #1
 8011fc4:	42bc      	cmp	r4, r7
 8011fc6:	d1f5      	bne.n	8011fb4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8011fc8:	2000      	movs	r0, #0
 8011fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fce:	4620      	mov	r0, r4
 8011fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fd4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fdc:	58d3      	ldr	r3, [r2, r3]
 8011fde:	4718      	bx	r3
 8011fe0:	200003b4 	.word	0x200003b4

08011fe4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8011fe4:	4b04      	ldr	r3, [pc, #16]	@ (8011ff8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8011fe6:	681a      	ldr	r2, [r3, #0]
 8011fe8:	b10a      	cbz	r2, 8011fee <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 8011fea:	4803      	ldr	r0, [pc, #12]	@ (8011ff8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8011fec:	4770      	bx	lr
 8011fee:	4a03      	ldr	r2, [pc, #12]	@ (8011ffc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 8011ff0:	4801      	ldr	r0, [pc, #4]	@ (8011ff8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8011ff2:	6812      	ldr	r2, [r2, #0]
 8011ff4:	601a      	str	r2, [r3, #0]
 8011ff6:	4770      	bx	lr
 8011ff8:	200003c4 	.word	0x200003c4
 8011ffc:	200003b4 	.word	0x200003b4

08012000 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8012000:	4a02      	ldr	r2, [pc, #8]	@ (801200c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 8012002:	4b03      	ldr	r3, [pc, #12]	@ (8012010 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 8012004:	6812      	ldr	r2, [r2, #0]
 8012006:	601a      	str	r2, [r3, #0]
 8012008:	4770      	bx	lr
 801200a:	bf00      	nop
 801200c:	200003b4 	.word	0x200003b4
 8012010:	200003c4 	.word	0x200003c4

08012014 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 8012014:	2009      	movs	r0, #9
 8012016:	4770      	bx	lr

08012018 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 8012018:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801201c:	4770      	bx	lr
 801201e:	bf00      	nop

08012020 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 8012020:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012024:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012028:	e9c2 0100 	strd	r0, r1, [r2]
 801202c:	4770      	bx	lr
 801202e:	bf00      	nop

08012030 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 8012030:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012034:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012038:	e9c1 2300 	strd	r2, r3, [r1]
 801203c:	4770      	bx	lr
 801203e:	bf00      	nop

08012040 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 8012040:	f008 bbda 	b.w	801a7f8 <sensor_msgs__msg__Imu__init>

08012044 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 8012044:	f008 bc2e 	b.w	801a8a4 <sensor_msgs__msg__Imu__fini>

08012048 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 8012048:	2009      	movs	r0, #9
 801204a:	4770      	bx	lr

0801204c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 801204c:	2009      	movs	r0, #9
 801204e:	4770      	bx	lr

08012050 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 8012050:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop

08012058 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 8012058:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801205c:	4770      	bx	lr
 801205e:	bf00      	nop

08012060 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 8012060:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012064:	4770      	bx	lr
 8012066:	bf00      	nop

08012068 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 8012068:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801206c:	4770      	bx	lr
 801206e:	bf00      	nop

08012070 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 8012070:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012074:	4770      	bx	lr
 8012076:	bf00      	nop

08012078 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 8012078:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801207c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012080:	e9c2 0100 	strd	r0, r1, [r2]
 8012084:	4770      	bx	lr
 8012086:	bf00      	nop

08012088 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 8012088:	e9d2 2300 	ldrd	r2, r3, [r2]
 801208c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012090:	e9c1 2300 	strd	r2, r3, [r1]
 8012094:	4770      	bx	lr
 8012096:	bf00      	nop

08012098 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 8012098:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801209c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120a0:	e9c2 0100 	strd	r0, r1, [r2]
 80120a4:	4770      	bx	lr
 80120a6:	bf00      	nop

080120a8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 80120a8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80120ac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80120b0:	e9c1 2300 	strd	r2, r3, [r1]
 80120b4:	4770      	bx	lr
 80120b6:	bf00      	nop

080120b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 80120b8:	b510      	push	{r4, lr}
 80120ba:	f000 f90f 	bl	80122dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80120be:	4c0b      	ldr	r4, [pc, #44]	@ (80120ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 80120c0:	60e0      	str	r0, [r4, #12]
 80120c2:	f000 fb91 	bl	80127e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80120c6:	64a0      	str	r0, [r4, #72]	@ 0x48
 80120c8:	f7fb fbe6 	bl	800d898 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80120cc:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 80120d0:	f7fb fbe2 	bl	800d898 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80120d4:	4b06      	ldr	r3, [pc, #24]	@ (80120f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 80120d6:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 80120da:	681a      	ldr	r2, [r3, #0]
 80120dc:	b10a      	cbz	r2, 80120e2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 80120de:	4804      	ldr	r0, [pc, #16]	@ (80120f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 80120e0:	bd10      	pop	{r4, pc}
 80120e2:	4a04      	ldr	r2, [pc, #16]	@ (80120f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 80120e4:	4802      	ldr	r0, [pc, #8]	@ (80120f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 80120e6:	6812      	ldr	r2, [r2, #0]
 80120e8:	601a      	str	r2, [r3, #0]
 80120ea:	bd10      	pop	{r4, pc}
 80120ec:	200003d0 	.word	0x200003d0
 80120f0:	20000574 	.word	0x20000574
 80120f4:	200003b8 	.word	0x200003b8

080120f8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 80120f8:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 80120fc:	4680      	mov	r8, r0
 80120fe:	460f      	mov	r7, r1
 8012100:	f000 f910 	bl	8012324 <get_serialized_size_std_msgs__msg__Header>
 8012104:	183c      	adds	r4, r7, r0
 8012106:	4621      	mov	r1, r4
 8012108:	f108 0018 	add.w	r0, r8, #24
 801210c:	f000 fb7a 	bl	8012804 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8012110:	4404      	add	r4, r0
 8012112:	2108      	movs	r1, #8
 8012114:	4620      	mov	r0, r4
 8012116:	f7fd f8eb 	bl	800f2f0 <ucdr_alignment>
 801211a:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 801211e:	4425      	add	r5, r4
 8012120:	4629      	mov	r1, r5
 8012122:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 8012126:	f7fb fc2b 	bl	800d980 <get_serialized_size_geometry_msgs__msg__Vector3>
 801212a:	4405      	add	r5, r0
 801212c:	2108      	movs	r1, #8
 801212e:	4628      	mov	r0, r5
 8012130:	f7fd f8de 	bl	800f2f0 <ucdr_alignment>
 8012134:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 8012138:	4425      	add	r5, r4
 801213a:	4629      	mov	r1, r5
 801213c:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 8012140:	f7fb fc1e 	bl	800d980 <get_serialized_size_geometry_msgs__msg__Vector3>
 8012144:	4405      	add	r5, r0
 8012146:	2108      	movs	r1, #8
 8012148:	4628      	mov	r0, r5
 801214a:	f7fd f8d1 	bl	800f2f0 <ucdr_alignment>
 801214e:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 8012152:	4438      	add	r0, r7
 8012154:	4428      	add	r0, r5
 8012156:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801215a:	bf00      	nop

0801215c <get_serialized_size_sensor_msgs__msg__Imu>:
 801215c:	b108      	cbz	r0, 8012162 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 801215e:	f7ff bfcb 	b.w	80120f8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8012162:	4770      	bx	lr

08012164 <_Imu__get_serialized_size>:
 8012164:	b110      	cbz	r0, 801216c <_Imu__get_serialized_size+0x8>
 8012166:	2100      	movs	r1, #0
 8012168:	f7ff bfc6 	b.w	80120f8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 801216c:	4770      	bx	lr
 801216e:	bf00      	nop

08012170 <_Imu__cdr_deserialize>:
 8012170:	b538      	push	{r3, r4, r5, lr}
 8012172:	460c      	mov	r4, r1
 8012174:	b399      	cbz	r1, 80121de <_Imu__cdr_deserialize+0x6e>
 8012176:	4605      	mov	r5, r0
 8012178:	f000 f956 	bl	8012428 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801217c:	6843      	ldr	r3, [r0, #4]
 801217e:	4621      	mov	r1, r4
 8012180:	68db      	ldr	r3, [r3, #12]
 8012182:	4628      	mov	r0, r5
 8012184:	4798      	blx	r3
 8012186:	f000 fbf1 	bl	801296c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801218a:	6843      	ldr	r3, [r0, #4]
 801218c:	f104 0118 	add.w	r1, r4, #24
 8012190:	68db      	ldr	r3, [r3, #12]
 8012192:	4628      	mov	r0, r5
 8012194:	4798      	blx	r3
 8012196:	2209      	movs	r2, #9
 8012198:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 801219c:	4628      	mov	r0, r5
 801219e:	f000 fd85 	bl	8012cac <ucdr_deserialize_array_double>
 80121a2:	f7fb fc79 	bl	800da98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80121a6:	6843      	ldr	r3, [r0, #4]
 80121a8:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 80121ac:	68db      	ldr	r3, [r3, #12]
 80121ae:	4628      	mov	r0, r5
 80121b0:	4798      	blx	r3
 80121b2:	2209      	movs	r2, #9
 80121b4:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 80121b8:	4628      	mov	r0, r5
 80121ba:	f000 fd77 	bl	8012cac <ucdr_deserialize_array_double>
 80121be:	f7fb fc6b 	bl	800da98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80121c2:	6843      	ldr	r3, [r0, #4]
 80121c4:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 80121c8:	68db      	ldr	r3, [r3, #12]
 80121ca:	4628      	mov	r0, r5
 80121cc:	4798      	blx	r3
 80121ce:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 80121d2:	4628      	mov	r0, r5
 80121d4:	2209      	movs	r2, #9
 80121d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121da:	f000 bd67 	b.w	8012cac <ucdr_deserialize_array_double>
 80121de:	4608      	mov	r0, r1
 80121e0:	bd38      	pop	{r3, r4, r5, pc}
 80121e2:	bf00      	nop

080121e4 <_Imu__cdr_serialize>:
 80121e4:	2800      	cmp	r0, #0
 80121e6:	d035      	beq.n	8012254 <_Imu__cdr_serialize+0x70>
 80121e8:	b538      	push	{r3, r4, r5, lr}
 80121ea:	460d      	mov	r5, r1
 80121ec:	4604      	mov	r4, r0
 80121ee:	f000 f91b 	bl	8012428 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80121f2:	6843      	ldr	r3, [r0, #4]
 80121f4:	4629      	mov	r1, r5
 80121f6:	689b      	ldr	r3, [r3, #8]
 80121f8:	4620      	mov	r0, r4
 80121fa:	4798      	blx	r3
 80121fc:	f000 fbb6 	bl	801296c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8012200:	6843      	ldr	r3, [r0, #4]
 8012202:	4629      	mov	r1, r5
 8012204:	689b      	ldr	r3, [r3, #8]
 8012206:	f104 0018 	add.w	r0, r4, #24
 801220a:	4798      	blx	r3
 801220c:	2209      	movs	r2, #9
 801220e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8012212:	4628      	mov	r0, r5
 8012214:	f000 fcf6 	bl	8012c04 <ucdr_serialize_array_double>
 8012218:	f7fb fc3e 	bl	800da98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801221c:	6843      	ldr	r3, [r0, #4]
 801221e:	4629      	mov	r1, r5
 8012220:	689b      	ldr	r3, [r3, #8]
 8012222:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8012226:	4798      	blx	r3
 8012228:	2209      	movs	r2, #9
 801222a:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 801222e:	4628      	mov	r0, r5
 8012230:	f000 fce8 	bl	8012c04 <ucdr_serialize_array_double>
 8012234:	f7fb fc30 	bl	800da98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012238:	6843      	ldr	r3, [r0, #4]
 801223a:	4629      	mov	r1, r5
 801223c:	689b      	ldr	r3, [r3, #8]
 801223e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8012242:	4798      	blx	r3
 8012244:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8012248:	4628      	mov	r0, r5
 801224a:	2209      	movs	r2, #9
 801224c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012250:	f000 bcd8 	b.w	8012c04 <ucdr_serialize_array_double>
 8012254:	4770      	bx	lr
 8012256:	bf00      	nop

08012258 <max_serialized_size_sensor_msgs__msg__Imu>:
 8012258:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801225c:	2301      	movs	r3, #1
 801225e:	7003      	strb	r3, [r0, #0]
 8012260:	4680      	mov	r8, r0
 8012262:	460f      	mov	r7, r1
 8012264:	f000 f8d6 	bl	8012414 <max_serialized_size_std_msgs__msg__Header>
 8012268:	183c      	adds	r4, r7, r0
 801226a:	4621      	mov	r1, r4
 801226c:	4640      	mov	r0, r8
 801226e:	f000 fb5b 	bl	8012928 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8012272:	4404      	add	r4, r0
 8012274:	2108      	movs	r1, #8
 8012276:	4620      	mov	r0, r4
 8012278:	f7fd f83a 	bl	800f2f0 <ucdr_alignment>
 801227c:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 8012280:	4425      	add	r5, r4
 8012282:	4629      	mov	r1, r5
 8012284:	4640      	mov	r0, r8
 8012286:	f7fb fbeb 	bl	800da60 <max_serialized_size_geometry_msgs__msg__Vector3>
 801228a:	4405      	add	r5, r0
 801228c:	2108      	movs	r1, #8
 801228e:	4628      	mov	r0, r5
 8012290:	f7fd f82e 	bl	800f2f0 <ucdr_alignment>
 8012294:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 8012298:	4425      	add	r5, r4
 801229a:	4629      	mov	r1, r5
 801229c:	4640      	mov	r0, r8
 801229e:	f7fb fbdf 	bl	800da60 <max_serialized_size_geometry_msgs__msg__Vector3>
 80122a2:	4405      	add	r5, r0
 80122a4:	2108      	movs	r1, #8
 80122a6:	4628      	mov	r0, r5
 80122a8:	f7fd f822 	bl	800f2f0 <ucdr_alignment>
 80122ac:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 80122b0:	4438      	add	r0, r7
 80122b2:	4428      	add	r0, r5
 80122b4:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

080122b8 <_Imu__max_serialized_size>:
 80122b8:	b500      	push	{lr}
 80122ba:	b083      	sub	sp, #12
 80122bc:	2100      	movs	r1, #0
 80122be:	f10d 0007 	add.w	r0, sp, #7
 80122c2:	f7ff ffc9 	bl	8012258 <max_serialized_size_sensor_msgs__msg__Imu>
 80122c6:	b003      	add	sp, #12
 80122c8:	f85d fb04 	ldr.w	pc, [sp], #4

080122cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 80122cc:	4800      	ldr	r0, [pc, #0]	@ (80122d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 80122ce:	4770      	bx	lr
 80122d0:	20000580 	.word	0x20000580

080122d4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 80122d4:	f008 bafa 	b.w	801a8cc <std_msgs__msg__Header__init>

080122d8 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 80122d8:	f008 bb1c 	b.w	801a914 <std_msgs__msg__Header__fini>

080122dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80122dc:	b508      	push	{r3, lr}
 80122de:	f000 f9d3 	bl	8012688 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80122e2:	4b06      	ldr	r3, [pc, #24]	@ (80122fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80122e4:	4906      	ldr	r1, [pc, #24]	@ (8012300 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 80122e6:	681a      	ldr	r2, [r3, #0]
 80122e8:	60c8      	str	r0, [r1, #12]
 80122ea:	b10a      	cbz	r2, 80122f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 80122ec:	4803      	ldr	r0, [pc, #12]	@ (80122fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80122ee:	bd08      	pop	{r3, pc}
 80122f0:	4a04      	ldr	r2, [pc, #16]	@ (8012304 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 80122f2:	4802      	ldr	r0, [pc, #8]	@ (80122fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80122f4:	6812      	ldr	r2, [r2, #0]
 80122f6:	601a      	str	r2, [r3, #0]
 80122f8:	bd08      	pop	{r3, pc}
 80122fa:	bf00      	nop
 80122fc:	20000620 	.word	0x20000620
 8012300:	200005a8 	.word	0x200005a8
 8012304:	200003b8 	.word	0x200003b8

08012308 <_Header__max_serialized_size>:
 8012308:	b500      	push	{lr}
 801230a:	b083      	sub	sp, #12
 801230c:	2301      	movs	r3, #1
 801230e:	2100      	movs	r1, #0
 8012310:	f10d 0007 	add.w	r0, sp, #7
 8012314:	f88d 3007 	strb.w	r3, [sp, #7]
 8012318:	f000 fa14 	bl	8012744 <max_serialized_size_builtin_interfaces__msg__Time>
 801231c:	b003      	add	sp, #12
 801231e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012322:	bf00      	nop

08012324 <get_serialized_size_std_msgs__msg__Header>:
 8012324:	b570      	push	{r4, r5, r6, lr}
 8012326:	4605      	mov	r5, r0
 8012328:	b168      	cbz	r0, 8012346 <get_serialized_size_std_msgs__msg__Header+0x22>
 801232a:	460c      	mov	r4, r1
 801232c:	f000 f9ba 	bl	80126a4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012330:	1826      	adds	r6, r4, r0
 8012332:	2104      	movs	r1, #4
 8012334:	4630      	mov	r0, r6
 8012336:	f7fc ffdb 	bl	800f2f0 <ucdr_alignment>
 801233a:	68e9      	ldr	r1, [r5, #12]
 801233c:	f1c4 0405 	rsb	r4, r4, #5
 8012340:	440c      	add	r4, r1
 8012342:	4404      	add	r4, r0
 8012344:	19a0      	adds	r0, r4, r6
 8012346:	bd70      	pop	{r4, r5, r6, pc}

08012348 <_Header__cdr_deserialize>:
 8012348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801234a:	460c      	mov	r4, r1
 801234c:	b083      	sub	sp, #12
 801234e:	b1e1      	cbz	r1, 801238a <_Header__cdr_deserialize+0x42>
 8012350:	4606      	mov	r6, r0
 8012352:	f000 fa0b 	bl	801276c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012356:	6843      	ldr	r3, [r0, #4]
 8012358:	4621      	mov	r1, r4
 801235a:	68db      	ldr	r3, [r3, #12]
 801235c:	4630      	mov	r0, r6
 801235e:	4798      	blx	r3
 8012360:	6927      	ldr	r7, [r4, #16]
 8012362:	68a1      	ldr	r1, [r4, #8]
 8012364:	ab01      	add	r3, sp, #4
 8012366:	463a      	mov	r2, r7
 8012368:	4630      	mov	r0, r6
 801236a:	f000 fd07 	bl	8012d7c <ucdr_deserialize_sequence_char>
 801236e:	9b01      	ldr	r3, [sp, #4]
 8012370:	4605      	mov	r5, r0
 8012372:	b920      	cbnz	r0, 801237e <_Header__cdr_deserialize+0x36>
 8012374:	429f      	cmp	r7, r3
 8012376:	d30c      	bcc.n	8012392 <_Header__cdr_deserialize+0x4a>
 8012378:	4628      	mov	r0, r5
 801237a:	b003      	add	sp, #12
 801237c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801237e:	b103      	cbz	r3, 8012382 <_Header__cdr_deserialize+0x3a>
 8012380:	3b01      	subs	r3, #1
 8012382:	4628      	mov	r0, r5
 8012384:	60e3      	str	r3, [r4, #12]
 8012386:	b003      	add	sp, #12
 8012388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801238a:	460d      	mov	r5, r1
 801238c:	4628      	mov	r0, r5
 801238e:	b003      	add	sp, #12
 8012390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012392:	2101      	movs	r1, #1
 8012394:	75b0      	strb	r0, [r6, #22]
 8012396:	7571      	strb	r1, [r6, #21]
 8012398:	4630      	mov	r0, r6
 801239a:	60e5      	str	r5, [r4, #12]
 801239c:	f7fc ffbe 	bl	800f31c <ucdr_align_to>
 80123a0:	4630      	mov	r0, r6
 80123a2:	9901      	ldr	r1, [sp, #4]
 80123a4:	f7fc fff0 	bl	800f388 <ucdr_advance_buffer>
 80123a8:	4628      	mov	r0, r5
 80123aa:	b003      	add	sp, #12
 80123ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123ae:	bf00      	nop

080123b0 <_Header__cdr_serialize>:
 80123b0:	b1f8      	cbz	r0, 80123f2 <_Header__cdr_serialize+0x42>
 80123b2:	b570      	push	{r4, r5, r6, lr}
 80123b4:	4604      	mov	r4, r0
 80123b6:	460d      	mov	r5, r1
 80123b8:	f000 f9d8 	bl	801276c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80123bc:	6843      	ldr	r3, [r0, #4]
 80123be:	4629      	mov	r1, r5
 80123c0:	689b      	ldr	r3, [r3, #8]
 80123c2:	4620      	mov	r0, r4
 80123c4:	4798      	blx	r3
 80123c6:	68a6      	ldr	r6, [r4, #8]
 80123c8:	b156      	cbz	r6, 80123e0 <_Header__cdr_serialize+0x30>
 80123ca:	4630      	mov	r0, r6
 80123cc:	f7ed ff32 	bl	8000234 <strlen>
 80123d0:	4631      	mov	r1, r6
 80123d2:	60e0      	str	r0, [r4, #12]
 80123d4:	1c42      	adds	r2, r0, #1
 80123d6:	4628      	mov	r0, r5
 80123d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123dc:	f000 bcbc 	b.w	8012d58 <ucdr_serialize_sequence_char>
 80123e0:	4630      	mov	r0, r6
 80123e2:	60e0      	str	r0, [r4, #12]
 80123e4:	4632      	mov	r2, r6
 80123e6:	4631      	mov	r1, r6
 80123e8:	4628      	mov	r0, r5
 80123ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123ee:	f000 bcb3 	b.w	8012d58 <ucdr_serialize_sequence_char>
 80123f2:	4770      	bx	lr

080123f4 <_Header__get_serialized_size>:
 80123f4:	b538      	push	{r3, r4, r5, lr}
 80123f6:	4604      	mov	r4, r0
 80123f8:	b150      	cbz	r0, 8012410 <_Header__get_serialized_size+0x1c>
 80123fa:	2100      	movs	r1, #0
 80123fc:	f000 f952 	bl	80126a4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012400:	2104      	movs	r1, #4
 8012402:	4605      	mov	r5, r0
 8012404:	f7fc ff74 	bl	800f2f0 <ucdr_alignment>
 8012408:	68e2      	ldr	r2, [r4, #12]
 801240a:	3205      	adds	r2, #5
 801240c:	1953      	adds	r3, r2, r5
 801240e:	4418      	add	r0, r3
 8012410:	bd38      	pop	{r3, r4, r5, pc}
 8012412:	bf00      	nop

08012414 <max_serialized_size_std_msgs__msg__Header>:
 8012414:	b510      	push	{r4, lr}
 8012416:	2301      	movs	r3, #1
 8012418:	4604      	mov	r4, r0
 801241a:	7003      	strb	r3, [r0, #0]
 801241c:	f000 f992 	bl	8012744 <max_serialized_size_builtin_interfaces__msg__Time>
 8012420:	2300      	movs	r3, #0
 8012422:	7023      	strb	r3, [r4, #0]
 8012424:	bd10      	pop	{r4, pc}
 8012426:	bf00      	nop

08012428 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8012428:	4800      	ldr	r0, [pc, #0]	@ (801242c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801242a:	4770      	bx	lr
 801242c:	2000062c 	.word	0x2000062c

08012430 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 8012430:	4b04      	ldr	r3, [pc, #16]	@ (8012444 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 8012432:	681a      	ldr	r2, [r3, #0]
 8012434:	b10a      	cbz	r2, 801243a <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa>
 8012436:	4803      	ldr	r0, [pc, #12]	@ (8012444 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 8012438:	4770      	bx	lr
 801243a:	4a03      	ldr	r2, [pc, #12]	@ (8012448 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x18>)
 801243c:	4801      	ldr	r0, [pc, #4]	@ (8012444 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 801243e:	6812      	ldr	r2, [r2, #0]
 8012440:	601a      	str	r2, [r3, #0]
 8012442:	4770      	bx	lr
 8012444:	2000065c 	.word	0x2000065c
 8012448:	200003b4 	.word	0x200003b4

0801244c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 801244c:	4b04      	ldr	r3, [pc, #16]	@ (8012460 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 801244e:	4805      	ldr	r0, [pc, #20]	@ (8012464 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 8012450:	4905      	ldr	r1, [pc, #20]	@ (8012468 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x1c>)
 8012452:	4a06      	ldr	r2, [pc, #24]	@ (801246c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x20>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	6003      	str	r3, [r0, #0]
 8012458:	600b      	str	r3, [r1, #0]
 801245a:	6013      	str	r3, [r2, #0]
 801245c:	4770      	bx	lr
 801245e:	bf00      	nop
 8012460:	200003b4 	.word	0x200003b4
 8012464:	20000678 	.word	0x20000678
 8012468:	20000684 	.word	0x20000684
 801246c:	2000065c 	.word	0x2000065c

08012470 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_init_function>:
 8012470:	f008 ba5c 	b.w	801a92c <std_srvs__srv__SetBool_Request__init>

08012474 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_fini_function>:
 8012474:	f008 ba5e 	b.w	801a934 <std_srvs__srv__SetBool_Request__fini>

08012478 <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_init_function>:
 8012478:	f008 ba5e 	b.w	801a938 <std_srvs__srv__SetBool_Response__init>

0801247c <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_fini_function>:
 801247c:	f008 ba6e 	b.w	801a95c <std_srvs__srv__SetBool_Response__fini>

08012480 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 8012480:	4b04      	ldr	r3, [pc, #16]	@ (8012494 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 8012482:	681a      	ldr	r2, [r3, #0]
 8012484:	b10a      	cbz	r2, 801248a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0xa>
 8012486:	4803      	ldr	r0, [pc, #12]	@ (8012494 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 8012488:	4770      	bx	lr
 801248a:	4a03      	ldr	r2, [pc, #12]	@ (8012498 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 801248c:	4801      	ldr	r0, [pc, #4]	@ (8012494 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 801248e:	6812      	ldr	r2, [r2, #0]
 8012490:	601a      	str	r2, [r3, #0]
 8012492:	4770      	bx	lr
 8012494:	200006cc 	.word	0x200006cc
 8012498:	200003b8 	.word	0x200003b8

0801249c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 801249c:	4b04      	ldr	r3, [pc, #16]	@ (80124b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 801249e:	681a      	ldr	r2, [r3, #0]
 80124a0:	b10a      	cbz	r2, 80124a6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0xa>
 80124a2:	4803      	ldr	r0, [pc, #12]	@ (80124b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 80124a4:	4770      	bx	lr
 80124a6:	4a03      	ldr	r2, [pc, #12]	@ (80124b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x18>)
 80124a8:	4801      	ldr	r0, [pc, #4]	@ (80124b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 80124aa:	6812      	ldr	r2, [r2, #0]
 80124ac:	601a      	str	r2, [r3, #0]
 80124ae:	4770      	bx	lr
 80124b0:	20000750 	.word	0x20000750
 80124b4:	200003b8 	.word	0x200003b8

080124b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 80124b8:	4b13      	ldr	r3, [pc, #76]	@ (8012508 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 80124ba:	681a      	ldr	r2, [r3, #0]
 80124bc:	b132      	cbz	r2, 80124cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	689a      	ldr	r2, [r3, #8]
 80124c2:	b152      	cbz	r2, 80124da <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x22>
 80124c4:	68da      	ldr	r2, [r3, #12]
 80124c6:	b182      	cbz	r2, 80124ea <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x32>
 80124c8:	480f      	ldr	r0, [pc, #60]	@ (8012508 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 80124ca:	4770      	bx	lr
 80124cc:	4a0f      	ldr	r2, [pc, #60]	@ (801250c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 80124ce:	6812      	ldr	r2, [r2, #0]
 80124d0:	601a      	str	r2, [r3, #0]
 80124d2:	685b      	ldr	r3, [r3, #4]
 80124d4:	689a      	ldr	r2, [r3, #8]
 80124d6:	2a00      	cmp	r2, #0
 80124d8:	d1f4      	bne.n	80124c4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xc>
 80124da:	4a0d      	ldr	r2, [pc, #52]	@ (8012510 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x58>)
 80124dc:	6811      	ldr	r1, [r2, #0]
 80124de:	b179      	cbz	r1, 8012500 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x48>
 80124e0:	6852      	ldr	r2, [r2, #4]
 80124e2:	609a      	str	r2, [r3, #8]
 80124e4:	68da      	ldr	r2, [r3, #12]
 80124e6:	2a00      	cmp	r2, #0
 80124e8:	d1ee      	bne.n	80124c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x10>
 80124ea:	4a0a      	ldr	r2, [pc, #40]	@ (8012514 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x5c>)
 80124ec:	6811      	ldr	r1, [r2, #0]
 80124ee:	b119      	cbz	r1, 80124f8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x40>
 80124f0:	6852      	ldr	r2, [r2, #4]
 80124f2:	4805      	ldr	r0, [pc, #20]	@ (8012508 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 80124f4:	60da      	str	r2, [r3, #12]
 80124f6:	4770      	bx	lr
 80124f8:	4904      	ldr	r1, [pc, #16]	@ (801250c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 80124fa:	6809      	ldr	r1, [r1, #0]
 80124fc:	6011      	str	r1, [r2, #0]
 80124fe:	e7f7      	b.n	80124f0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x38>
 8012500:	4902      	ldr	r1, [pc, #8]	@ (801250c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 8012502:	6809      	ldr	r1, [r1, #0]
 8012504:	6011      	str	r1, [r2, #0]
 8012506:	e7eb      	b.n	80124e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x28>
 8012508:	2000076c 	.word	0x2000076c
 801250c:	200003b8 	.word	0x200003b8
 8012510:	200006cc 	.word	0x200006cc
 8012514:	20000750 	.word	0x20000750

08012518 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 8012518:	4800      	ldr	r0, [pc, #0]	@ (801251c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x4>)
 801251a:	4770      	bx	lr
 801251c:	20000794 	.word	0x20000794

08012520 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 8012520:	4800      	ldr	r0, [pc, #0]	@ (8012524 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x4>)
 8012522:	4770      	bx	lr
 8012524:	200007a0 	.word	0x200007a0

08012528 <_SetBool_Request__max_serialized_size>:
 8012528:	b508      	push	{r3, lr}
 801252a:	2101      	movs	r1, #1
 801252c:	2000      	movs	r0, #0
 801252e:	f7fc fedf 	bl	800f2f0 <ucdr_alignment>
 8012532:	3001      	adds	r0, #1
 8012534:	bd08      	pop	{r3, pc}
 8012536:	bf00      	nop

08012538 <_SetBool_Request__cdr_deserialize>:
 8012538:	b109      	cbz	r1, 801253e <_SetBool_Request__cdr_deserialize+0x6>
 801253a:	f7fb bbdb 	b.w	800dcf4 <ucdr_deserialize_bool>
 801253e:	4608      	mov	r0, r1
 8012540:	4770      	bx	lr
 8012542:	bf00      	nop

08012544 <get_serialized_size_std_srvs__srv__SetBool_Request>:
 8012544:	b138      	cbz	r0, 8012556 <get_serialized_size_std_srvs__srv__SetBool_Request+0x12>
 8012546:	b508      	push	{r3, lr}
 8012548:	460b      	mov	r3, r1
 801254a:	4618      	mov	r0, r3
 801254c:	2101      	movs	r1, #1
 801254e:	f7fc fecf 	bl	800f2f0 <ucdr_alignment>
 8012552:	3001      	adds	r0, #1
 8012554:	bd08      	pop	{r3, pc}
 8012556:	4770      	bx	lr

08012558 <get_serialized_size_std_srvs__srv__SetBool_Response>:
 8012558:	b570      	push	{r4, r5, r6, lr}
 801255a:	4605      	mov	r5, r0
 801255c:	b180      	cbz	r0, 8012580 <get_serialized_size_std_srvs__srv__SetBool_Response+0x28>
 801255e:	460c      	mov	r4, r1
 8012560:	4620      	mov	r0, r4
 8012562:	2101      	movs	r1, #1
 8012564:	f7fc fec4 	bl	800f2f0 <ucdr_alignment>
 8012568:	1c63      	adds	r3, r4, #1
 801256a:	181e      	adds	r6, r3, r0
 801256c:	2104      	movs	r1, #4
 801256e:	4630      	mov	r0, r6
 8012570:	f7fc febe 	bl	800f2f0 <ucdr_alignment>
 8012574:	68a9      	ldr	r1, [r5, #8]
 8012576:	f1c4 0405 	rsb	r4, r4, #5
 801257a:	440c      	add	r4, r1
 801257c:	4404      	add	r4, r0
 801257e:	19a0      	adds	r0, r4, r6
 8012580:	bd70      	pop	{r4, r5, r6, pc}
 8012582:	bf00      	nop

08012584 <_SetBool_Request__cdr_serialize>:
 8012584:	460a      	mov	r2, r1
 8012586:	b118      	cbz	r0, 8012590 <_SetBool_Request__cdr_serialize+0xc>
 8012588:	7801      	ldrb	r1, [r0, #0]
 801258a:	4610      	mov	r0, r2
 801258c:	f7fb bb9c 	b.w	800dcc8 <ucdr_serialize_bool>
 8012590:	4770      	bx	lr
 8012592:	bf00      	nop

08012594 <_SetBool_Response__cdr_deserialize>:
 8012594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012596:	460c      	mov	r4, r1
 8012598:	b083      	sub	sp, #12
 801259a:	b1b9      	cbz	r1, 80125cc <_SetBool_Response__cdr_deserialize+0x38>
 801259c:	4606      	mov	r6, r0
 801259e:	f7fb fba9 	bl	800dcf4 <ucdr_deserialize_bool>
 80125a2:	68e7      	ldr	r7, [r4, #12]
 80125a4:	6861      	ldr	r1, [r4, #4]
 80125a6:	ab01      	add	r3, sp, #4
 80125a8:	463a      	mov	r2, r7
 80125aa:	4630      	mov	r0, r6
 80125ac:	f000 fbe6 	bl	8012d7c <ucdr_deserialize_sequence_char>
 80125b0:	9b01      	ldr	r3, [sp, #4]
 80125b2:	4605      	mov	r5, r0
 80125b4:	b920      	cbnz	r0, 80125c0 <_SetBool_Response__cdr_deserialize+0x2c>
 80125b6:	429f      	cmp	r7, r3
 80125b8:	d30c      	bcc.n	80125d4 <_SetBool_Response__cdr_deserialize+0x40>
 80125ba:	4628      	mov	r0, r5
 80125bc:	b003      	add	sp, #12
 80125be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125c0:	b103      	cbz	r3, 80125c4 <_SetBool_Response__cdr_deserialize+0x30>
 80125c2:	3b01      	subs	r3, #1
 80125c4:	4628      	mov	r0, r5
 80125c6:	60a3      	str	r3, [r4, #8]
 80125c8:	b003      	add	sp, #12
 80125ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125cc:	460d      	mov	r5, r1
 80125ce:	4628      	mov	r0, r5
 80125d0:	b003      	add	sp, #12
 80125d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125d4:	2101      	movs	r1, #1
 80125d6:	75b0      	strb	r0, [r6, #22]
 80125d8:	7571      	strb	r1, [r6, #21]
 80125da:	4630      	mov	r0, r6
 80125dc:	60a5      	str	r5, [r4, #8]
 80125de:	f7fc fe9d 	bl	800f31c <ucdr_align_to>
 80125e2:	4630      	mov	r0, r6
 80125e4:	9901      	ldr	r1, [sp, #4]
 80125e6:	f7fc fecf 	bl	800f388 <ucdr_advance_buffer>
 80125ea:	4628      	mov	r0, r5
 80125ec:	b003      	add	sp, #12
 80125ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080125f0 <_SetBool_Response__cdr_serialize>:
 80125f0:	b1e0      	cbz	r0, 801262c <_SetBool_Response__cdr_serialize+0x3c>
 80125f2:	b570      	push	{r4, r5, r6, lr}
 80125f4:	460d      	mov	r5, r1
 80125f6:	4604      	mov	r4, r0
 80125f8:	7801      	ldrb	r1, [r0, #0]
 80125fa:	4628      	mov	r0, r5
 80125fc:	f7fb fb64 	bl	800dcc8 <ucdr_serialize_bool>
 8012600:	6866      	ldr	r6, [r4, #4]
 8012602:	b156      	cbz	r6, 801261a <_SetBool_Response__cdr_serialize+0x2a>
 8012604:	4630      	mov	r0, r6
 8012606:	f7ed fe15 	bl	8000234 <strlen>
 801260a:	4631      	mov	r1, r6
 801260c:	60a0      	str	r0, [r4, #8]
 801260e:	1c42      	adds	r2, r0, #1
 8012610:	4628      	mov	r0, r5
 8012612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012616:	f000 bb9f 	b.w	8012d58 <ucdr_serialize_sequence_char>
 801261a:	4630      	mov	r0, r6
 801261c:	60a0      	str	r0, [r4, #8]
 801261e:	4632      	mov	r2, r6
 8012620:	4631      	mov	r1, r6
 8012622:	4628      	mov	r0, r5
 8012624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012628:	f000 bb96 	b.w	8012d58 <ucdr_serialize_sequence_char>
 801262c:	4770      	bx	lr
 801262e:	bf00      	nop

08012630 <_SetBool_Request__get_serialized_size>:
 8012630:	b130      	cbz	r0, 8012640 <_SetBool_Request__get_serialized_size+0x10>
 8012632:	b508      	push	{r3, lr}
 8012634:	2101      	movs	r1, #1
 8012636:	2000      	movs	r0, #0
 8012638:	f7fc fe5a 	bl	800f2f0 <ucdr_alignment>
 801263c:	3001      	adds	r0, #1
 801263e:	bd08      	pop	{r3, pc}
 8012640:	4770      	bx	lr
 8012642:	bf00      	nop

08012644 <_SetBool_Response__max_serialized_size>:
 8012644:	b508      	push	{r3, lr}
 8012646:	2101      	movs	r1, #1
 8012648:	2000      	movs	r0, #0
 801264a:	f7fc fe51 	bl	800f2f0 <ucdr_alignment>
 801264e:	3001      	adds	r0, #1
 8012650:	bd08      	pop	{r3, pc}
 8012652:	bf00      	nop

08012654 <_SetBool_Response__get_serialized_size>:
 8012654:	b538      	push	{r3, r4, r5, lr}
 8012656:	4604      	mov	r4, r0
 8012658:	b160      	cbz	r0, 8012674 <_SetBool_Response__get_serialized_size+0x20>
 801265a:	2101      	movs	r1, #1
 801265c:	2000      	movs	r0, #0
 801265e:	f7fc fe47 	bl	800f2f0 <ucdr_alignment>
 8012662:	1c45      	adds	r5, r0, #1
 8012664:	2104      	movs	r1, #4
 8012666:	4628      	mov	r0, r5
 8012668:	f7fc fe42 	bl	800f2f0 <ucdr_alignment>
 801266c:	68a3      	ldr	r3, [r4, #8]
 801266e:	3305      	adds	r3, #5
 8012670:	4418      	add	r0, r3
 8012672:	4428      	add	r0, r5
 8012674:	bd38      	pop	{r3, r4, r5, pc}
 8012676:	bf00      	nop

08012678 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 8012678:	4800      	ldr	r0, [pc, #0]	@ (801267c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x4>)
 801267a:	4770      	bx	lr
 801267c:	20000788 	.word	0x20000788

08012680 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8012680:	f008 b972 	b.w	801a968 <builtin_interfaces__msg__Time__init>

08012684 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8012684:	f008 b974 	b.w	801a970 <builtin_interfaces__msg__Time__fini>

08012688 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012688:	4b04      	ldr	r3, [pc, #16]	@ (801269c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 801268a:	681a      	ldr	r2, [r3, #0]
 801268c:	b10a      	cbz	r2, 8012692 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 801268e:	4803      	ldr	r0, [pc, #12]	@ (801269c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012690:	4770      	bx	lr
 8012692:	4a03      	ldr	r2, [pc, #12]	@ (80126a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8012694:	4801      	ldr	r0, [pc, #4]	@ (801269c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012696:	6812      	ldr	r2, [r2, #0]
 8012698:	601a      	str	r2, [r3, #0]
 801269a:	4770      	bx	lr
 801269c:	2000085c 	.word	0x2000085c
 80126a0:	200003b8 	.word	0x200003b8

080126a4 <get_serialized_size_builtin_interfaces__msg__Time>:
 80126a4:	b180      	cbz	r0, 80126c8 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 80126a6:	b538      	push	{r3, r4, r5, lr}
 80126a8:	460d      	mov	r5, r1
 80126aa:	4628      	mov	r0, r5
 80126ac:	2104      	movs	r1, #4
 80126ae:	f7fc fe1f 	bl	800f2f0 <ucdr_alignment>
 80126b2:	1d2b      	adds	r3, r5, #4
 80126b4:	181c      	adds	r4, r3, r0
 80126b6:	2104      	movs	r1, #4
 80126b8:	4620      	mov	r0, r4
 80126ba:	f7fc fe19 	bl	800f2f0 <ucdr_alignment>
 80126be:	f1c5 0504 	rsb	r5, r5, #4
 80126c2:	4428      	add	r0, r5
 80126c4:	4420      	add	r0, r4
 80126c6:	bd38      	pop	{r3, r4, r5, pc}
 80126c8:	4770      	bx	lr
 80126ca:	bf00      	nop

080126cc <_Time__cdr_deserialize>:
 80126cc:	b538      	push	{r3, r4, r5, lr}
 80126ce:	460c      	mov	r4, r1
 80126d0:	b141      	cbz	r1, 80126e4 <_Time__cdr_deserialize+0x18>
 80126d2:	4605      	mov	r5, r0
 80126d4:	f7fc f9ee 	bl	800eab4 <ucdr_deserialize_int32_t>
 80126d8:	1d21      	adds	r1, r4, #4
 80126da:	4628      	mov	r0, r5
 80126dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126e0:	f7fb be66 	b.w	800e3b0 <ucdr_deserialize_uint32_t>
 80126e4:	4608      	mov	r0, r1
 80126e6:	bd38      	pop	{r3, r4, r5, pc}

080126e8 <_Time__cdr_serialize>:
 80126e8:	b160      	cbz	r0, 8012704 <_Time__cdr_serialize+0x1c>
 80126ea:	b538      	push	{r3, r4, r5, lr}
 80126ec:	460d      	mov	r5, r1
 80126ee:	4604      	mov	r4, r0
 80126f0:	6801      	ldr	r1, [r0, #0]
 80126f2:	4628      	mov	r0, r5
 80126f4:	f7fc f946 	bl	800e984 <ucdr_serialize_int32_t>
 80126f8:	6861      	ldr	r1, [r4, #4]
 80126fa:	4628      	mov	r0, r5
 80126fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012700:	f7fb bd26 	b.w	800e150 <ucdr_serialize_uint32_t>
 8012704:	4770      	bx	lr
 8012706:	bf00      	nop

08012708 <_Time__get_serialized_size>:
 8012708:	b160      	cbz	r0, 8012724 <_Time__get_serialized_size+0x1c>
 801270a:	b510      	push	{r4, lr}
 801270c:	2104      	movs	r1, #4
 801270e:	2000      	movs	r0, #0
 8012710:	f7fc fdee 	bl	800f2f0 <ucdr_alignment>
 8012714:	1d04      	adds	r4, r0, #4
 8012716:	2104      	movs	r1, #4
 8012718:	4620      	mov	r0, r4
 801271a:	f7fc fde9 	bl	800f2f0 <ucdr_alignment>
 801271e:	3004      	adds	r0, #4
 8012720:	4420      	add	r0, r4
 8012722:	bd10      	pop	{r4, pc}
 8012724:	4770      	bx	lr
 8012726:	bf00      	nop

08012728 <_Time__max_serialized_size>:
 8012728:	b510      	push	{r4, lr}
 801272a:	2104      	movs	r1, #4
 801272c:	2000      	movs	r0, #0
 801272e:	f7fc fddf 	bl	800f2f0 <ucdr_alignment>
 8012732:	1d04      	adds	r4, r0, #4
 8012734:	2104      	movs	r1, #4
 8012736:	4620      	mov	r0, r4
 8012738:	f7fc fdda 	bl	800f2f0 <ucdr_alignment>
 801273c:	3004      	adds	r0, #4
 801273e:	4420      	add	r0, r4
 8012740:	bd10      	pop	{r4, pc}
 8012742:	bf00      	nop

08012744 <max_serialized_size_builtin_interfaces__msg__Time>:
 8012744:	b538      	push	{r3, r4, r5, lr}
 8012746:	460c      	mov	r4, r1
 8012748:	2301      	movs	r3, #1
 801274a:	7003      	strb	r3, [r0, #0]
 801274c:	2104      	movs	r1, #4
 801274e:	4620      	mov	r0, r4
 8012750:	f7fc fdce 	bl	800f2f0 <ucdr_alignment>
 8012754:	1d25      	adds	r5, r4, #4
 8012756:	4405      	add	r5, r0
 8012758:	2104      	movs	r1, #4
 801275a:	4628      	mov	r0, r5
 801275c:	f7fc fdc8 	bl	800f2f0 <ucdr_alignment>
 8012760:	f1c4 0404 	rsb	r4, r4, #4
 8012764:	4420      	add	r0, r4
 8012766:	4428      	add	r0, r5
 8012768:	bd38      	pop	{r3, r4, r5, pc}
 801276a:	bf00      	nop

0801276c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 801276c:	4800      	ldr	r0, [pc, #0]	@ (8012770 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 801276e:	4770      	bx	lr
 8012770:	20000868 	.word	0x20000868

08012774 <geometry_msgs__msg__Twist__init>:
 8012774:	b570      	push	{r4, r5, r6, lr}
 8012776:	4605      	mov	r5, r0
 8012778:	b1a8      	cbz	r0, 80127a6 <geometry_msgs__msg__Twist__init+0x32>
 801277a:	f000 f82b 	bl	80127d4 <geometry_msgs__msg__Vector3__init>
 801277e:	4604      	mov	r4, r0
 8012780:	b140      	cbz	r0, 8012794 <geometry_msgs__msg__Twist__init+0x20>
 8012782:	f105 0618 	add.w	r6, r5, #24
 8012786:	4630      	mov	r0, r6
 8012788:	f000 f824 	bl	80127d4 <geometry_msgs__msg__Vector3__init>
 801278c:	4604      	mov	r4, r0
 801278e:	b168      	cbz	r0, 80127ac <geometry_msgs__msg__Twist__init+0x38>
 8012790:	4620      	mov	r0, r4
 8012792:	bd70      	pop	{r4, r5, r6, pc}
 8012794:	4628      	mov	r0, r5
 8012796:	f000 f821 	bl	80127dc <geometry_msgs__msg__Vector3__fini>
 801279a:	f105 0018 	add.w	r0, r5, #24
 801279e:	f000 f81d 	bl	80127dc <geometry_msgs__msg__Vector3__fini>
 80127a2:	4620      	mov	r0, r4
 80127a4:	bd70      	pop	{r4, r5, r6, pc}
 80127a6:	4604      	mov	r4, r0
 80127a8:	4620      	mov	r0, r4
 80127aa:	bd70      	pop	{r4, r5, r6, pc}
 80127ac:	4628      	mov	r0, r5
 80127ae:	f000 f815 	bl	80127dc <geometry_msgs__msg__Vector3__fini>
 80127b2:	4630      	mov	r0, r6
 80127b4:	f000 f812 	bl	80127dc <geometry_msgs__msg__Vector3__fini>
 80127b8:	e7ea      	b.n	8012790 <geometry_msgs__msg__Twist__init+0x1c>
 80127ba:	bf00      	nop

080127bc <geometry_msgs__msg__Twist__fini>:
 80127bc:	b148      	cbz	r0, 80127d2 <geometry_msgs__msg__Twist__fini+0x16>
 80127be:	b510      	push	{r4, lr}
 80127c0:	4604      	mov	r4, r0
 80127c2:	f000 f80b 	bl	80127dc <geometry_msgs__msg__Vector3__fini>
 80127c6:	f104 0018 	add.w	r0, r4, #24
 80127ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127ce:	f000 b805 	b.w	80127dc <geometry_msgs__msg__Vector3__fini>
 80127d2:	4770      	bx	lr

080127d4 <geometry_msgs__msg__Vector3__init>:
 80127d4:	3800      	subs	r0, #0
 80127d6:	bf18      	it	ne
 80127d8:	2001      	movne	r0, #1
 80127da:	4770      	bx	lr

080127dc <geometry_msgs__msg__Vector3__fini>:
 80127dc:	4770      	bx	lr
 80127de:	bf00      	nop

080127e0 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 80127e0:	f008 b8ca 	b.w	801a978 <geometry_msgs__msg__Quaternion__init>

080127e4 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 80127e4:	f008 b8dc 	b.w	801a9a0 <geometry_msgs__msg__Quaternion__fini>

080127e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 80127e8:	4b04      	ldr	r3, [pc, #16]	@ (80127fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 80127ea:	681a      	ldr	r2, [r3, #0]
 80127ec:	b10a      	cbz	r2, 80127f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 80127ee:	4803      	ldr	r0, [pc, #12]	@ (80127fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 80127f0:	4770      	bx	lr
 80127f2:	4a03      	ldr	r2, [pc, #12]	@ (8012800 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 80127f4:	4801      	ldr	r0, [pc, #4]	@ (80127fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 80127f6:	6812      	ldr	r2, [r2, #0]
 80127f8:	601a      	str	r2, [r3, #0]
 80127fa:	4770      	bx	lr
 80127fc:	20000980 	.word	0x20000980
 8012800:	200003b8 	.word	0x200003b8

08012804 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8012804:	b1f0      	cbz	r0, 8012844 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 8012806:	b570      	push	{r4, r5, r6, lr}
 8012808:	460d      	mov	r5, r1
 801280a:	4628      	mov	r0, r5
 801280c:	2108      	movs	r1, #8
 801280e:	f7fc fd6f 	bl	800f2f0 <ucdr_alignment>
 8012812:	f105 0308 	add.w	r3, r5, #8
 8012816:	181e      	adds	r6, r3, r0
 8012818:	2108      	movs	r1, #8
 801281a:	4630      	mov	r0, r6
 801281c:	f7fc fd68 	bl	800f2f0 <ucdr_alignment>
 8012820:	f100 0408 	add.w	r4, r0, #8
 8012824:	4434      	add	r4, r6
 8012826:	2108      	movs	r1, #8
 8012828:	4620      	mov	r0, r4
 801282a:	f7fc fd61 	bl	800f2f0 <ucdr_alignment>
 801282e:	3008      	adds	r0, #8
 8012830:	4404      	add	r4, r0
 8012832:	2108      	movs	r1, #8
 8012834:	4620      	mov	r0, r4
 8012836:	f7fc fd5b 	bl	800f2f0 <ucdr_alignment>
 801283a:	f1c5 0508 	rsb	r5, r5, #8
 801283e:	4428      	add	r0, r5
 8012840:	4420      	add	r0, r4
 8012842:	bd70      	pop	{r4, r5, r6, pc}
 8012844:	4770      	bx	lr
 8012846:	bf00      	nop

08012848 <_Quaternion__cdr_deserialize>:
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	460c      	mov	r4, r1
 801284c:	b199      	cbz	r1, 8012876 <_Quaternion__cdr_deserialize+0x2e>
 801284e:	4605      	mov	r5, r0
 8012850:	f7fc fb62 	bl	800ef18 <ucdr_deserialize_double>
 8012854:	f104 0108 	add.w	r1, r4, #8
 8012858:	4628      	mov	r0, r5
 801285a:	f7fc fb5d 	bl	800ef18 <ucdr_deserialize_double>
 801285e:	f104 0110 	add.w	r1, r4, #16
 8012862:	4628      	mov	r0, r5
 8012864:	f7fc fb58 	bl	800ef18 <ucdr_deserialize_double>
 8012868:	f104 0118 	add.w	r1, r4, #24
 801286c:	4628      	mov	r0, r5
 801286e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012872:	f7fc bb51 	b.w	800ef18 <ucdr_deserialize_double>
 8012876:	4608      	mov	r0, r1
 8012878:	bd38      	pop	{r3, r4, r5, pc}
 801287a:	bf00      	nop

0801287c <_Quaternion__cdr_serialize>:
 801287c:	b1c0      	cbz	r0, 80128b0 <_Quaternion__cdr_serialize+0x34>
 801287e:	b538      	push	{r3, r4, r5, lr}
 8012880:	ed90 0b00 	vldr	d0, [r0]
 8012884:	460d      	mov	r5, r1
 8012886:	4604      	mov	r4, r0
 8012888:	4608      	mov	r0, r1
 801288a:	f7fc f9a3 	bl	800ebd4 <ucdr_serialize_double>
 801288e:	ed94 0b02 	vldr	d0, [r4, #8]
 8012892:	4628      	mov	r0, r5
 8012894:	f7fc f99e 	bl	800ebd4 <ucdr_serialize_double>
 8012898:	ed94 0b04 	vldr	d0, [r4, #16]
 801289c:	4628      	mov	r0, r5
 801289e:	f7fc f999 	bl	800ebd4 <ucdr_serialize_double>
 80128a2:	ed94 0b06 	vldr	d0, [r4, #24]
 80128a6:	4628      	mov	r0, r5
 80128a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128ac:	f7fc b992 	b.w	800ebd4 <ucdr_serialize_double>
 80128b0:	4770      	bx	lr
 80128b2:	bf00      	nop

080128b4 <_Quaternion__get_serialized_size>:
 80128b4:	b1d0      	cbz	r0, 80128ec <_Quaternion__get_serialized_size+0x38>
 80128b6:	b538      	push	{r3, r4, r5, lr}
 80128b8:	2108      	movs	r1, #8
 80128ba:	2000      	movs	r0, #0
 80128bc:	f7fc fd18 	bl	800f2f0 <ucdr_alignment>
 80128c0:	f100 0508 	add.w	r5, r0, #8
 80128c4:	2108      	movs	r1, #8
 80128c6:	4628      	mov	r0, r5
 80128c8:	f7fc fd12 	bl	800f2f0 <ucdr_alignment>
 80128cc:	f100 0408 	add.w	r4, r0, #8
 80128d0:	442c      	add	r4, r5
 80128d2:	2108      	movs	r1, #8
 80128d4:	4620      	mov	r0, r4
 80128d6:	f7fc fd0b 	bl	800f2f0 <ucdr_alignment>
 80128da:	3008      	adds	r0, #8
 80128dc:	4404      	add	r4, r0
 80128de:	2108      	movs	r1, #8
 80128e0:	4620      	mov	r0, r4
 80128e2:	f7fc fd05 	bl	800f2f0 <ucdr_alignment>
 80128e6:	3008      	adds	r0, #8
 80128e8:	4420      	add	r0, r4
 80128ea:	bd38      	pop	{r3, r4, r5, pc}
 80128ec:	4770      	bx	lr
 80128ee:	bf00      	nop

080128f0 <_Quaternion__max_serialized_size>:
 80128f0:	b538      	push	{r3, r4, r5, lr}
 80128f2:	2108      	movs	r1, #8
 80128f4:	2000      	movs	r0, #0
 80128f6:	f7fc fcfb 	bl	800f2f0 <ucdr_alignment>
 80128fa:	f100 0508 	add.w	r5, r0, #8
 80128fe:	2108      	movs	r1, #8
 8012900:	4628      	mov	r0, r5
 8012902:	f7fc fcf5 	bl	800f2f0 <ucdr_alignment>
 8012906:	f100 0408 	add.w	r4, r0, #8
 801290a:	442c      	add	r4, r5
 801290c:	2108      	movs	r1, #8
 801290e:	4620      	mov	r0, r4
 8012910:	f7fc fcee 	bl	800f2f0 <ucdr_alignment>
 8012914:	3008      	adds	r0, #8
 8012916:	4404      	add	r4, r0
 8012918:	2108      	movs	r1, #8
 801291a:	4620      	mov	r0, r4
 801291c:	f7fc fce8 	bl	800f2f0 <ucdr_alignment>
 8012920:	3008      	adds	r0, #8
 8012922:	4420      	add	r0, r4
 8012924:	bd38      	pop	{r3, r4, r5, pc}
 8012926:	bf00      	nop

08012928 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8012928:	b570      	push	{r4, r5, r6, lr}
 801292a:	2301      	movs	r3, #1
 801292c:	460c      	mov	r4, r1
 801292e:	7003      	strb	r3, [r0, #0]
 8012930:	2108      	movs	r1, #8
 8012932:	4620      	mov	r0, r4
 8012934:	f7fc fcdc 	bl	800f2f0 <ucdr_alignment>
 8012938:	f104 0508 	add.w	r5, r4, #8
 801293c:	1946      	adds	r6, r0, r5
 801293e:	2108      	movs	r1, #8
 8012940:	4630      	mov	r0, r6
 8012942:	f7fc fcd5 	bl	800f2f0 <ucdr_alignment>
 8012946:	f100 0508 	add.w	r5, r0, #8
 801294a:	4435      	add	r5, r6
 801294c:	2108      	movs	r1, #8
 801294e:	4628      	mov	r0, r5
 8012950:	f7fc fcce 	bl	800f2f0 <ucdr_alignment>
 8012954:	3008      	adds	r0, #8
 8012956:	4405      	add	r5, r0
 8012958:	2108      	movs	r1, #8
 801295a:	4628      	mov	r0, r5
 801295c:	f7fc fcc8 	bl	800f2f0 <ucdr_alignment>
 8012960:	f1c4 0408 	rsb	r4, r4, #8
 8012964:	4420      	add	r0, r4
 8012966:	4428      	add	r0, r5
 8012968:	bd70      	pop	{r4, r5, r6, pc}
 801296a:	bf00      	nop

0801296c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 801296c:	4800      	ldr	r0, [pc, #0]	@ (8012970 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 801296e:	4770      	bx	lr
 8012970:	2000098c 	.word	0x2000098c

08012974 <imu_interfaces__srv__ImuCalibration_Request__init>:
 8012974:	b538      	push	{r3, r4, r5, lr}
 8012976:	4604      	mov	r4, r0
 8012978:	b128      	cbz	r0, 8012986 <imu_interfaces__srv__ImuCalibration_Request__init+0x12>
 801297a:	f007 ff3d 	bl	801a7f8 <sensor_msgs__msg__Imu__init>
 801297e:	4605      	mov	r5, r0
 8012980:	b120      	cbz	r0, 801298c <imu_interfaces__srv__ImuCalibration_Request__init+0x18>
 8012982:	4628      	mov	r0, r5
 8012984:	bd38      	pop	{r3, r4, r5, pc}
 8012986:	4605      	mov	r5, r0
 8012988:	4628      	mov	r0, r5
 801298a:	bd38      	pop	{r3, r4, r5, pc}
 801298c:	4620      	mov	r0, r4
 801298e:	f007 ff89 	bl	801a8a4 <sensor_msgs__msg__Imu__fini>
 8012992:	4628      	mov	r0, r5
 8012994:	bd38      	pop	{r3, r4, r5, pc}
 8012996:	bf00      	nop

08012998 <imu_interfaces__srv__ImuCalibration_Request__fini>:
 8012998:	b108      	cbz	r0, 801299e <imu_interfaces__srv__ImuCalibration_Request__fini+0x6>
 801299a:	f007 bf83 	b.w	801a8a4 <sensor_msgs__msg__Imu__fini>
 801299e:	4770      	bx	lr

080129a0 <imu_interfaces__srv__ImuCalibration_Response__init>:
 80129a0:	3800      	subs	r0, #0
 80129a2:	bf18      	it	ne
 80129a4:	2001      	movne	r0, #1
 80129a6:	4770      	bx	lr

080129a8 <imu_interfaces__srv__ImuCalibration_Response__fini>:
 80129a8:	4770      	bx	lr
 80129aa:	bf00      	nop

080129ac <ucdr_serialize_endian_array_char>:
 80129ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129b0:	4619      	mov	r1, r3
 80129b2:	461f      	mov	r7, r3
 80129b4:	4605      	mov	r5, r0
 80129b6:	4690      	mov	r8, r2
 80129b8:	f7fc fc42 	bl	800f240 <ucdr_check_buffer_available_for>
 80129bc:	b9e0      	cbnz	r0, 80129f8 <ucdr_serialize_endian_array_char+0x4c>
 80129be:	463e      	mov	r6, r7
 80129c0:	e009      	b.n	80129d6 <ucdr_serialize_endian_array_char+0x2a>
 80129c2:	68a8      	ldr	r0, [r5, #8]
 80129c4:	f009 ff2f 	bl	801c826 <memcpy>
 80129c8:	68ab      	ldr	r3, [r5, #8]
 80129ca:	6928      	ldr	r0, [r5, #16]
 80129cc:	4423      	add	r3, r4
 80129ce:	4420      	add	r0, r4
 80129d0:	1b36      	subs	r6, r6, r4
 80129d2:	60ab      	str	r3, [r5, #8]
 80129d4:	6128      	str	r0, [r5, #16]
 80129d6:	4631      	mov	r1, r6
 80129d8:	2201      	movs	r2, #1
 80129da:	4628      	mov	r0, r5
 80129dc:	f7fc fcb8 	bl	800f350 <ucdr_check_final_buffer_behavior_array>
 80129e0:	1bb9      	subs	r1, r7, r6
 80129e2:	4441      	add	r1, r8
 80129e4:	4604      	mov	r4, r0
 80129e6:	4602      	mov	r2, r0
 80129e8:	2800      	cmp	r0, #0
 80129ea:	d1ea      	bne.n	80129c2 <ucdr_serialize_endian_array_char+0x16>
 80129ec:	2301      	movs	r3, #1
 80129ee:	7da8      	ldrb	r0, [r5, #22]
 80129f0:	756b      	strb	r3, [r5, #21]
 80129f2:	4058      	eors	r0, r3
 80129f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129f8:	463a      	mov	r2, r7
 80129fa:	68a8      	ldr	r0, [r5, #8]
 80129fc:	4641      	mov	r1, r8
 80129fe:	f009 ff12 	bl	801c826 <memcpy>
 8012a02:	68aa      	ldr	r2, [r5, #8]
 8012a04:	692b      	ldr	r3, [r5, #16]
 8012a06:	443a      	add	r2, r7
 8012a08:	443b      	add	r3, r7
 8012a0a:	60aa      	str	r2, [r5, #8]
 8012a0c:	612b      	str	r3, [r5, #16]
 8012a0e:	e7ed      	b.n	80129ec <ucdr_serialize_endian_array_char+0x40>

08012a10 <ucdr_deserialize_endian_array_char>:
 8012a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a14:	4619      	mov	r1, r3
 8012a16:	461f      	mov	r7, r3
 8012a18:	4605      	mov	r5, r0
 8012a1a:	4690      	mov	r8, r2
 8012a1c:	f7fc fc10 	bl	800f240 <ucdr_check_buffer_available_for>
 8012a20:	b9e0      	cbnz	r0, 8012a5c <ucdr_deserialize_endian_array_char+0x4c>
 8012a22:	463e      	mov	r6, r7
 8012a24:	e009      	b.n	8012a3a <ucdr_deserialize_endian_array_char+0x2a>
 8012a26:	68a9      	ldr	r1, [r5, #8]
 8012a28:	f009 fefd 	bl	801c826 <memcpy>
 8012a2c:	68ab      	ldr	r3, [r5, #8]
 8012a2e:	6928      	ldr	r0, [r5, #16]
 8012a30:	4423      	add	r3, r4
 8012a32:	4420      	add	r0, r4
 8012a34:	1b36      	subs	r6, r6, r4
 8012a36:	60ab      	str	r3, [r5, #8]
 8012a38:	6128      	str	r0, [r5, #16]
 8012a3a:	2201      	movs	r2, #1
 8012a3c:	4631      	mov	r1, r6
 8012a3e:	4628      	mov	r0, r5
 8012a40:	f7fc fc86 	bl	800f350 <ucdr_check_final_buffer_behavior_array>
 8012a44:	4604      	mov	r4, r0
 8012a46:	1bb8      	subs	r0, r7, r6
 8012a48:	4440      	add	r0, r8
 8012a4a:	4622      	mov	r2, r4
 8012a4c:	2c00      	cmp	r4, #0
 8012a4e:	d1ea      	bne.n	8012a26 <ucdr_deserialize_endian_array_char+0x16>
 8012a50:	2301      	movs	r3, #1
 8012a52:	7da8      	ldrb	r0, [r5, #22]
 8012a54:	756b      	strb	r3, [r5, #21]
 8012a56:	4058      	eors	r0, r3
 8012a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a5c:	463a      	mov	r2, r7
 8012a5e:	68a9      	ldr	r1, [r5, #8]
 8012a60:	4640      	mov	r0, r8
 8012a62:	f009 fee0 	bl	801c826 <memcpy>
 8012a66:	68aa      	ldr	r2, [r5, #8]
 8012a68:	692b      	ldr	r3, [r5, #16]
 8012a6a:	443a      	add	r2, r7
 8012a6c:	443b      	add	r3, r7
 8012a6e:	60aa      	str	r2, [r5, #8]
 8012a70:	612b      	str	r3, [r5, #16]
 8012a72:	e7ed      	b.n	8012a50 <ucdr_deserialize_endian_array_char+0x40>

08012a74 <ucdr_serialize_array_uint8_t>:
 8012a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a78:	4688      	mov	r8, r1
 8012a7a:	4611      	mov	r1, r2
 8012a7c:	4617      	mov	r7, r2
 8012a7e:	4605      	mov	r5, r0
 8012a80:	f7fc fbde 	bl	800f240 <ucdr_check_buffer_available_for>
 8012a84:	b9e0      	cbnz	r0, 8012ac0 <ucdr_serialize_array_uint8_t+0x4c>
 8012a86:	463e      	mov	r6, r7
 8012a88:	e009      	b.n	8012a9e <ucdr_serialize_array_uint8_t+0x2a>
 8012a8a:	68a8      	ldr	r0, [r5, #8]
 8012a8c:	f009 fecb 	bl	801c826 <memcpy>
 8012a90:	68aa      	ldr	r2, [r5, #8]
 8012a92:	692b      	ldr	r3, [r5, #16]
 8012a94:	4422      	add	r2, r4
 8012a96:	4423      	add	r3, r4
 8012a98:	1b36      	subs	r6, r6, r4
 8012a9a:	60aa      	str	r2, [r5, #8]
 8012a9c:	612b      	str	r3, [r5, #16]
 8012a9e:	4631      	mov	r1, r6
 8012aa0:	2201      	movs	r2, #1
 8012aa2:	4628      	mov	r0, r5
 8012aa4:	f7fc fc54 	bl	800f350 <ucdr_check_final_buffer_behavior_array>
 8012aa8:	1bb9      	subs	r1, r7, r6
 8012aaa:	4441      	add	r1, r8
 8012aac:	4604      	mov	r4, r0
 8012aae:	4602      	mov	r2, r0
 8012ab0:	2800      	cmp	r0, #0
 8012ab2:	d1ea      	bne.n	8012a8a <ucdr_serialize_array_uint8_t+0x16>
 8012ab4:	2301      	movs	r3, #1
 8012ab6:	7da8      	ldrb	r0, [r5, #22]
 8012ab8:	756b      	strb	r3, [r5, #21]
 8012aba:	4058      	eors	r0, r3
 8012abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ac0:	463a      	mov	r2, r7
 8012ac2:	68a8      	ldr	r0, [r5, #8]
 8012ac4:	4641      	mov	r1, r8
 8012ac6:	f009 feae 	bl	801c826 <memcpy>
 8012aca:	68aa      	ldr	r2, [r5, #8]
 8012acc:	692b      	ldr	r3, [r5, #16]
 8012ace:	443a      	add	r2, r7
 8012ad0:	443b      	add	r3, r7
 8012ad2:	60aa      	str	r2, [r5, #8]
 8012ad4:	612b      	str	r3, [r5, #16]
 8012ad6:	e7ed      	b.n	8012ab4 <ucdr_serialize_array_uint8_t+0x40>

08012ad8 <ucdr_serialize_endian_array_uint8_t>:
 8012ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012adc:	4619      	mov	r1, r3
 8012ade:	461f      	mov	r7, r3
 8012ae0:	4605      	mov	r5, r0
 8012ae2:	4690      	mov	r8, r2
 8012ae4:	f7fc fbac 	bl	800f240 <ucdr_check_buffer_available_for>
 8012ae8:	b9e0      	cbnz	r0, 8012b24 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8012aea:	463e      	mov	r6, r7
 8012aec:	e009      	b.n	8012b02 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8012aee:	68a8      	ldr	r0, [r5, #8]
 8012af0:	f009 fe99 	bl	801c826 <memcpy>
 8012af4:	68ab      	ldr	r3, [r5, #8]
 8012af6:	6928      	ldr	r0, [r5, #16]
 8012af8:	4423      	add	r3, r4
 8012afa:	4420      	add	r0, r4
 8012afc:	1b36      	subs	r6, r6, r4
 8012afe:	60ab      	str	r3, [r5, #8]
 8012b00:	6128      	str	r0, [r5, #16]
 8012b02:	4631      	mov	r1, r6
 8012b04:	2201      	movs	r2, #1
 8012b06:	4628      	mov	r0, r5
 8012b08:	f7fc fc22 	bl	800f350 <ucdr_check_final_buffer_behavior_array>
 8012b0c:	1bb9      	subs	r1, r7, r6
 8012b0e:	4441      	add	r1, r8
 8012b10:	4604      	mov	r4, r0
 8012b12:	4602      	mov	r2, r0
 8012b14:	2800      	cmp	r0, #0
 8012b16:	d1ea      	bne.n	8012aee <ucdr_serialize_endian_array_uint8_t+0x16>
 8012b18:	2301      	movs	r3, #1
 8012b1a:	7da8      	ldrb	r0, [r5, #22]
 8012b1c:	756b      	strb	r3, [r5, #21]
 8012b1e:	4058      	eors	r0, r3
 8012b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b24:	463a      	mov	r2, r7
 8012b26:	68a8      	ldr	r0, [r5, #8]
 8012b28:	4641      	mov	r1, r8
 8012b2a:	f009 fe7c 	bl	801c826 <memcpy>
 8012b2e:	68aa      	ldr	r2, [r5, #8]
 8012b30:	692b      	ldr	r3, [r5, #16]
 8012b32:	443a      	add	r2, r7
 8012b34:	443b      	add	r3, r7
 8012b36:	60aa      	str	r2, [r5, #8]
 8012b38:	612b      	str	r3, [r5, #16]
 8012b3a:	e7ed      	b.n	8012b18 <ucdr_serialize_endian_array_uint8_t+0x40>

08012b3c <ucdr_deserialize_array_uint8_t>:
 8012b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b40:	4688      	mov	r8, r1
 8012b42:	4611      	mov	r1, r2
 8012b44:	4617      	mov	r7, r2
 8012b46:	4605      	mov	r5, r0
 8012b48:	f7fc fb7a 	bl	800f240 <ucdr_check_buffer_available_for>
 8012b4c:	b9e0      	cbnz	r0, 8012b88 <ucdr_deserialize_array_uint8_t+0x4c>
 8012b4e:	463e      	mov	r6, r7
 8012b50:	e009      	b.n	8012b66 <ucdr_deserialize_array_uint8_t+0x2a>
 8012b52:	68a9      	ldr	r1, [r5, #8]
 8012b54:	f009 fe67 	bl	801c826 <memcpy>
 8012b58:	68aa      	ldr	r2, [r5, #8]
 8012b5a:	692b      	ldr	r3, [r5, #16]
 8012b5c:	4422      	add	r2, r4
 8012b5e:	4423      	add	r3, r4
 8012b60:	1b36      	subs	r6, r6, r4
 8012b62:	60aa      	str	r2, [r5, #8]
 8012b64:	612b      	str	r3, [r5, #16]
 8012b66:	2201      	movs	r2, #1
 8012b68:	4631      	mov	r1, r6
 8012b6a:	4628      	mov	r0, r5
 8012b6c:	f7fc fbf0 	bl	800f350 <ucdr_check_final_buffer_behavior_array>
 8012b70:	4604      	mov	r4, r0
 8012b72:	1bb8      	subs	r0, r7, r6
 8012b74:	4440      	add	r0, r8
 8012b76:	4622      	mov	r2, r4
 8012b78:	2c00      	cmp	r4, #0
 8012b7a:	d1ea      	bne.n	8012b52 <ucdr_deserialize_array_uint8_t+0x16>
 8012b7c:	2301      	movs	r3, #1
 8012b7e:	7da8      	ldrb	r0, [r5, #22]
 8012b80:	756b      	strb	r3, [r5, #21]
 8012b82:	4058      	eors	r0, r3
 8012b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b88:	463a      	mov	r2, r7
 8012b8a:	68a9      	ldr	r1, [r5, #8]
 8012b8c:	4640      	mov	r0, r8
 8012b8e:	f009 fe4a 	bl	801c826 <memcpy>
 8012b92:	68aa      	ldr	r2, [r5, #8]
 8012b94:	692b      	ldr	r3, [r5, #16]
 8012b96:	443a      	add	r2, r7
 8012b98:	443b      	add	r3, r7
 8012b9a:	60aa      	str	r2, [r5, #8]
 8012b9c:	612b      	str	r3, [r5, #16]
 8012b9e:	e7ed      	b.n	8012b7c <ucdr_deserialize_array_uint8_t+0x40>

08012ba0 <ucdr_deserialize_endian_array_uint8_t>:
 8012ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	461f      	mov	r7, r3
 8012ba8:	4605      	mov	r5, r0
 8012baa:	4690      	mov	r8, r2
 8012bac:	f7fc fb48 	bl	800f240 <ucdr_check_buffer_available_for>
 8012bb0:	b9e0      	cbnz	r0, 8012bec <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8012bb2:	463e      	mov	r6, r7
 8012bb4:	e009      	b.n	8012bca <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8012bb6:	68a9      	ldr	r1, [r5, #8]
 8012bb8:	f009 fe35 	bl	801c826 <memcpy>
 8012bbc:	68ab      	ldr	r3, [r5, #8]
 8012bbe:	6928      	ldr	r0, [r5, #16]
 8012bc0:	4423      	add	r3, r4
 8012bc2:	4420      	add	r0, r4
 8012bc4:	1b36      	subs	r6, r6, r4
 8012bc6:	60ab      	str	r3, [r5, #8]
 8012bc8:	6128      	str	r0, [r5, #16]
 8012bca:	2201      	movs	r2, #1
 8012bcc:	4631      	mov	r1, r6
 8012bce:	4628      	mov	r0, r5
 8012bd0:	f7fc fbbe 	bl	800f350 <ucdr_check_final_buffer_behavior_array>
 8012bd4:	4604      	mov	r4, r0
 8012bd6:	1bb8      	subs	r0, r7, r6
 8012bd8:	4440      	add	r0, r8
 8012bda:	4622      	mov	r2, r4
 8012bdc:	2c00      	cmp	r4, #0
 8012bde:	d1ea      	bne.n	8012bb6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012be0:	2301      	movs	r3, #1
 8012be2:	7da8      	ldrb	r0, [r5, #22]
 8012be4:	756b      	strb	r3, [r5, #21]
 8012be6:	4058      	eors	r0, r3
 8012be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bec:	463a      	mov	r2, r7
 8012bee:	68a9      	ldr	r1, [r5, #8]
 8012bf0:	4640      	mov	r0, r8
 8012bf2:	f009 fe18 	bl	801c826 <memcpy>
 8012bf6:	68aa      	ldr	r2, [r5, #8]
 8012bf8:	692b      	ldr	r3, [r5, #16]
 8012bfa:	443a      	add	r2, r7
 8012bfc:	443b      	add	r3, r7
 8012bfe:	60aa      	str	r2, [r5, #8]
 8012c00:	612b      	str	r3, [r5, #16]
 8012c02:	e7ed      	b.n	8012be0 <ucdr_deserialize_endian_array_uint8_t+0x40>

08012c04 <ucdr_serialize_array_double>:
 8012c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c08:	460e      	mov	r6, r1
 8012c0a:	2108      	movs	r1, #8
 8012c0c:	4604      	mov	r4, r0
 8012c0e:	4617      	mov	r7, r2
 8012c10:	f7fc fb76 	bl	800f300 <ucdr_buffer_alignment>
 8012c14:	4601      	mov	r1, r0
 8012c16:	4620      	mov	r0, r4
 8012c18:	7d65      	ldrb	r5, [r4, #21]
 8012c1a:	f7fc fbb5 	bl	800f388 <ucdr_advance_buffer>
 8012c1e:	7d21      	ldrb	r1, [r4, #20]
 8012c20:	7565      	strb	r5, [r4, #21]
 8012c22:	2901      	cmp	r1, #1
 8012c24:	d010      	beq.n	8012c48 <ucdr_serialize_array_double+0x44>
 8012c26:	b157      	cbz	r7, 8012c3e <ucdr_serialize_array_double+0x3a>
 8012c28:	2500      	movs	r5, #0
 8012c2a:	e000      	b.n	8012c2e <ucdr_serialize_array_double+0x2a>
 8012c2c:	7d21      	ldrb	r1, [r4, #20]
 8012c2e:	ecb6 0b02 	vldmia	r6!, {d0}
 8012c32:	4620      	mov	r0, r4
 8012c34:	3501      	adds	r5, #1
 8012c36:	f7fc f89d 	bl	800ed74 <ucdr_serialize_endian_double>
 8012c3a:	42af      	cmp	r7, r5
 8012c3c:	d1f6      	bne.n	8012c2c <ucdr_serialize_array_double+0x28>
 8012c3e:	7da0      	ldrb	r0, [r4, #22]
 8012c40:	f080 0001 	eor.w	r0, r0, #1
 8012c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c48:	00ff      	lsls	r7, r7, #3
 8012c4a:	4639      	mov	r1, r7
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	f7fc faf7 	bl	800f240 <ucdr_check_buffer_available_for>
 8012c52:	b9f8      	cbnz	r0, 8012c94 <ucdr_serialize_array_double+0x90>
 8012c54:	46b8      	mov	r8, r7
 8012c56:	e00a      	b.n	8012c6e <ucdr_serialize_array_double+0x6a>
 8012c58:	68a0      	ldr	r0, [r4, #8]
 8012c5a:	f009 fde4 	bl	801c826 <memcpy>
 8012c5e:	68a2      	ldr	r2, [r4, #8]
 8012c60:	6923      	ldr	r3, [r4, #16]
 8012c62:	442a      	add	r2, r5
 8012c64:	442b      	add	r3, r5
 8012c66:	eba8 0805 	sub.w	r8, r8, r5
 8012c6a:	60a2      	str	r2, [r4, #8]
 8012c6c:	6123      	str	r3, [r4, #16]
 8012c6e:	4641      	mov	r1, r8
 8012c70:	2208      	movs	r2, #8
 8012c72:	4620      	mov	r0, r4
 8012c74:	f7fc fb6c 	bl	800f350 <ucdr_check_final_buffer_behavior_array>
 8012c78:	eba7 0108 	sub.w	r1, r7, r8
 8012c7c:	4431      	add	r1, r6
 8012c7e:	4605      	mov	r5, r0
 8012c80:	4602      	mov	r2, r0
 8012c82:	2800      	cmp	r0, #0
 8012c84:	d1e8      	bne.n	8012c58 <ucdr_serialize_array_double+0x54>
 8012c86:	7da0      	ldrb	r0, [r4, #22]
 8012c88:	2308      	movs	r3, #8
 8012c8a:	7563      	strb	r3, [r4, #21]
 8012c8c:	f080 0001 	eor.w	r0, r0, #1
 8012c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c94:	463a      	mov	r2, r7
 8012c96:	68a0      	ldr	r0, [r4, #8]
 8012c98:	4631      	mov	r1, r6
 8012c9a:	f009 fdc4 	bl	801c826 <memcpy>
 8012c9e:	68a2      	ldr	r2, [r4, #8]
 8012ca0:	6923      	ldr	r3, [r4, #16]
 8012ca2:	443a      	add	r2, r7
 8012ca4:	441f      	add	r7, r3
 8012ca6:	60a2      	str	r2, [r4, #8]
 8012ca8:	6127      	str	r7, [r4, #16]
 8012caa:	e7ec      	b.n	8012c86 <ucdr_serialize_array_double+0x82>

08012cac <ucdr_deserialize_array_double>:
 8012cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cb0:	460e      	mov	r6, r1
 8012cb2:	2108      	movs	r1, #8
 8012cb4:	4604      	mov	r4, r0
 8012cb6:	4617      	mov	r7, r2
 8012cb8:	f7fc fb22 	bl	800f300 <ucdr_buffer_alignment>
 8012cbc:	4601      	mov	r1, r0
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	7d65      	ldrb	r5, [r4, #21]
 8012cc2:	f7fc fb61 	bl	800f388 <ucdr_advance_buffer>
 8012cc6:	7d21      	ldrb	r1, [r4, #20]
 8012cc8:	7565      	strb	r5, [r4, #21]
 8012cca:	2901      	cmp	r1, #1
 8012ccc:	d011      	beq.n	8012cf2 <ucdr_deserialize_array_double+0x46>
 8012cce:	b15f      	cbz	r7, 8012ce8 <ucdr_deserialize_array_double+0x3c>
 8012cd0:	2500      	movs	r5, #0
 8012cd2:	e000      	b.n	8012cd6 <ucdr_deserialize_array_double+0x2a>
 8012cd4:	7d21      	ldrb	r1, [r4, #20]
 8012cd6:	4632      	mov	r2, r6
 8012cd8:	4620      	mov	r0, r4
 8012cda:	3501      	adds	r5, #1
 8012cdc:	f7fc f9e2 	bl	800f0a4 <ucdr_deserialize_endian_double>
 8012ce0:	42af      	cmp	r7, r5
 8012ce2:	f106 0608 	add.w	r6, r6, #8
 8012ce6:	d1f5      	bne.n	8012cd4 <ucdr_deserialize_array_double+0x28>
 8012ce8:	7da0      	ldrb	r0, [r4, #22]
 8012cea:	f080 0001 	eor.w	r0, r0, #1
 8012cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cf2:	00ff      	lsls	r7, r7, #3
 8012cf4:	4639      	mov	r1, r7
 8012cf6:	4620      	mov	r0, r4
 8012cf8:	f7fc faa2 	bl	800f240 <ucdr_check_buffer_available_for>
 8012cfc:	b9f8      	cbnz	r0, 8012d3e <ucdr_deserialize_array_double+0x92>
 8012cfe:	46b8      	mov	r8, r7
 8012d00:	e00a      	b.n	8012d18 <ucdr_deserialize_array_double+0x6c>
 8012d02:	68a1      	ldr	r1, [r4, #8]
 8012d04:	f009 fd8f 	bl	801c826 <memcpy>
 8012d08:	68a2      	ldr	r2, [r4, #8]
 8012d0a:	6923      	ldr	r3, [r4, #16]
 8012d0c:	442a      	add	r2, r5
 8012d0e:	442b      	add	r3, r5
 8012d10:	eba8 0805 	sub.w	r8, r8, r5
 8012d14:	60a2      	str	r2, [r4, #8]
 8012d16:	6123      	str	r3, [r4, #16]
 8012d18:	2208      	movs	r2, #8
 8012d1a:	4641      	mov	r1, r8
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f7fc fb17 	bl	800f350 <ucdr_check_final_buffer_behavior_array>
 8012d22:	4605      	mov	r5, r0
 8012d24:	eba7 0008 	sub.w	r0, r7, r8
 8012d28:	4430      	add	r0, r6
 8012d2a:	462a      	mov	r2, r5
 8012d2c:	2d00      	cmp	r5, #0
 8012d2e:	d1e8      	bne.n	8012d02 <ucdr_deserialize_array_double+0x56>
 8012d30:	7da0      	ldrb	r0, [r4, #22]
 8012d32:	2308      	movs	r3, #8
 8012d34:	7563      	strb	r3, [r4, #21]
 8012d36:	f080 0001 	eor.w	r0, r0, #1
 8012d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d3e:	463a      	mov	r2, r7
 8012d40:	68a1      	ldr	r1, [r4, #8]
 8012d42:	4630      	mov	r0, r6
 8012d44:	f009 fd6f 	bl	801c826 <memcpy>
 8012d48:	68a2      	ldr	r2, [r4, #8]
 8012d4a:	6923      	ldr	r3, [r4, #16]
 8012d4c:	443a      	add	r2, r7
 8012d4e:	441f      	add	r7, r3
 8012d50:	60a2      	str	r2, [r4, #8]
 8012d52:	6127      	str	r7, [r4, #16]
 8012d54:	e7ec      	b.n	8012d30 <ucdr_deserialize_array_double+0x84>
 8012d56:	bf00      	nop

08012d58 <ucdr_serialize_sequence_char>:
 8012d58:	b570      	push	{r4, r5, r6, lr}
 8012d5a:	4615      	mov	r5, r2
 8012d5c:	460e      	mov	r6, r1
 8012d5e:	7d01      	ldrb	r1, [r0, #20]
 8012d60:	4604      	mov	r4, r0
 8012d62:	f7fb fa8d 	bl	800e280 <ucdr_serialize_endian_uint32_t>
 8012d66:	b90d      	cbnz	r5, 8012d6c <ucdr_serialize_sequence_char+0x14>
 8012d68:	2001      	movs	r0, #1
 8012d6a:	bd70      	pop	{r4, r5, r6, pc}
 8012d6c:	7d21      	ldrb	r1, [r4, #20]
 8012d6e:	462b      	mov	r3, r5
 8012d70:	4632      	mov	r2, r6
 8012d72:	4620      	mov	r0, r4
 8012d74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d78:	f7ff be18 	b.w	80129ac <ucdr_serialize_endian_array_char>

08012d7c <ucdr_deserialize_sequence_char>:
 8012d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d80:	461d      	mov	r5, r3
 8012d82:	4616      	mov	r6, r2
 8012d84:	460f      	mov	r7, r1
 8012d86:	461a      	mov	r2, r3
 8012d88:	7d01      	ldrb	r1, [r0, #20]
 8012d8a:	4604      	mov	r4, r0
 8012d8c:	f7fb fba0 	bl	800e4d0 <ucdr_deserialize_endian_uint32_t>
 8012d90:	682b      	ldr	r3, [r5, #0]
 8012d92:	429e      	cmp	r6, r3
 8012d94:	bf3c      	itt	cc
 8012d96:	2201      	movcc	r2, #1
 8012d98:	75a2      	strbcc	r2, [r4, #22]
 8012d9a:	b913      	cbnz	r3, 8012da2 <ucdr_deserialize_sequence_char+0x26>
 8012d9c:	2001      	movs	r0, #1
 8012d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012da2:	7d21      	ldrb	r1, [r4, #20]
 8012da4:	463a      	mov	r2, r7
 8012da6:	4620      	mov	r0, r4
 8012da8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012dac:	f7ff be30 	b.w	8012a10 <ucdr_deserialize_endian_array_char>

08012db0 <ucdr_serialize_sequence_uint8_t>:
 8012db0:	b570      	push	{r4, r5, r6, lr}
 8012db2:	4615      	mov	r5, r2
 8012db4:	460e      	mov	r6, r1
 8012db6:	7d01      	ldrb	r1, [r0, #20]
 8012db8:	4604      	mov	r4, r0
 8012dba:	f7fb fa61 	bl	800e280 <ucdr_serialize_endian_uint32_t>
 8012dbe:	b90d      	cbnz	r5, 8012dc4 <ucdr_serialize_sequence_uint8_t+0x14>
 8012dc0:	2001      	movs	r0, #1
 8012dc2:	bd70      	pop	{r4, r5, r6, pc}
 8012dc4:	7d21      	ldrb	r1, [r4, #20]
 8012dc6:	462b      	mov	r3, r5
 8012dc8:	4632      	mov	r2, r6
 8012dca:	4620      	mov	r0, r4
 8012dcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012dd0:	f7ff be82 	b.w	8012ad8 <ucdr_serialize_endian_array_uint8_t>

08012dd4 <ucdr_deserialize_sequence_uint8_t>:
 8012dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dd8:	461d      	mov	r5, r3
 8012dda:	4616      	mov	r6, r2
 8012ddc:	460f      	mov	r7, r1
 8012dde:	461a      	mov	r2, r3
 8012de0:	7d01      	ldrb	r1, [r0, #20]
 8012de2:	4604      	mov	r4, r0
 8012de4:	f7fb fb74 	bl	800e4d0 <ucdr_deserialize_endian_uint32_t>
 8012de8:	682b      	ldr	r3, [r5, #0]
 8012dea:	429e      	cmp	r6, r3
 8012dec:	bf3c      	itt	cc
 8012dee:	2201      	movcc	r2, #1
 8012df0:	75a2      	strbcc	r2, [r4, #22]
 8012df2:	b913      	cbnz	r3, 8012dfa <ucdr_deserialize_sequence_uint8_t+0x26>
 8012df4:	2001      	movs	r0, #1
 8012df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dfa:	7d21      	ldrb	r1, [r4, #20]
 8012dfc:	463a      	mov	r2, r7
 8012dfe:	4620      	mov	r0, r4
 8012e00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e04:	f7ff becc 	b.w	8012ba0 <ucdr_deserialize_endian_array_uint8_t>

08012e08 <uxr_buffer_delete_entity>:
 8012e08:	b510      	push	{r4, lr}
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	b08e      	sub	sp, #56	@ 0x38
 8012e0e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012e12:	2303      	movs	r3, #3
 8012e14:	9300      	str	r3, [sp, #0]
 8012e16:	2204      	movs	r2, #4
 8012e18:	ab06      	add	r3, sp, #24
 8012e1a:	4604      	mov	r4, r0
 8012e1c:	9103      	str	r1, [sp, #12]
 8012e1e:	f001 fb3d 	bl	801449c <uxr_prepare_stream_to_write_submessage>
 8012e22:	b918      	cbnz	r0, 8012e2c <uxr_buffer_delete_entity+0x24>
 8012e24:	4604      	mov	r4, r0
 8012e26:	4620      	mov	r0, r4
 8012e28:	b00e      	add	sp, #56	@ 0x38
 8012e2a:	bd10      	pop	{r4, pc}
 8012e2c:	9902      	ldr	r1, [sp, #8]
 8012e2e:	aa05      	add	r2, sp, #20
 8012e30:	4620      	mov	r0, r4
 8012e32:	f001 fc69 	bl	8014708 <uxr_init_base_object_request>
 8012e36:	a905      	add	r1, sp, #20
 8012e38:	4604      	mov	r4, r0
 8012e3a:	a806      	add	r0, sp, #24
 8012e3c:	f003 fa94 	bl	8016368 <uxr_serialize_DELETE_Payload>
 8012e40:	4620      	mov	r0, r4
 8012e42:	b00e      	add	sp, #56	@ 0x38
 8012e44:	bd10      	pop	{r4, pc}
 8012e46:	bf00      	nop

08012e48 <uxr_common_create_entity>:
 8012e48:	b510      	push	{r4, lr}
 8012e4a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012e4e:	b08c      	sub	sp, #48	@ 0x30
 8012e50:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012e54:	f1bc 0f01 	cmp.w	ip, #1
 8012e58:	bf0c      	ite	eq
 8012e5a:	f003 0201 	andeq.w	r2, r3, #1
 8012e5e:	2200      	movne	r2, #0
 8012e60:	330e      	adds	r3, #14
 8012e62:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8012e66:	9101      	str	r1, [sp, #4]
 8012e68:	441a      	add	r2, r3
 8012e6a:	2301      	movs	r3, #1
 8012e6c:	9300      	str	r3, [sp, #0]
 8012e6e:	9903      	ldr	r1, [sp, #12]
 8012e70:	ab04      	add	r3, sp, #16
 8012e72:	b292      	uxth	r2, r2
 8012e74:	4604      	mov	r4, r0
 8012e76:	f001 fb11 	bl	801449c <uxr_prepare_stream_to_write_submessage>
 8012e7a:	b918      	cbnz	r0, 8012e84 <uxr_common_create_entity+0x3c>
 8012e7c:	4604      	mov	r4, r0
 8012e7e:	4620      	mov	r0, r4
 8012e80:	b00c      	add	sp, #48	@ 0x30
 8012e82:	bd10      	pop	{r4, pc}
 8012e84:	9902      	ldr	r1, [sp, #8]
 8012e86:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012e88:	4620      	mov	r0, r4
 8012e8a:	f001 fc3d 	bl	8014708 <uxr_init_base_object_request>
 8012e8e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012e90:	4604      	mov	r4, r0
 8012e92:	a804      	add	r0, sp, #16
 8012e94:	f003 f9c4 	bl	8016220 <uxr_serialize_CREATE_Payload>
 8012e98:	4620      	mov	r0, r4
 8012e9a:	b00c      	add	sp, #48	@ 0x30
 8012e9c:	bd10      	pop	{r4, pc}
 8012e9e:	bf00      	nop

08012ea0 <uxr_buffer_create_participant_bin>:
 8012ea0:	b570      	push	{r4, r5, r6, lr}
 8012ea2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8012ea6:	ac11      	add	r4, sp, #68	@ 0x44
 8012ea8:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8012eac:	2303      	movs	r3, #3
 8012eae:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012eb2:	7223      	strb	r3, [r4, #8]
 8012eb4:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8012eb6:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8012eba:	2201      	movs	r2, #1
 8012ebc:	2100      	movs	r1, #0
 8012ebe:	4605      	mov	r5, r0
 8012ec0:	7122      	strb	r2, [r4, #4]
 8012ec2:	f88d 1014 	strb.w	r1, [sp, #20]
 8012ec6:	b1cb      	cbz	r3, 8012efc <uxr_buffer_create_participant_bin+0x5c>
 8012ec8:	f88d 201c 	strb.w	r2, [sp, #28]
 8012ecc:	9308      	str	r3, [sp, #32]
 8012ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012ed2:	a915      	add	r1, sp, #84	@ 0x54
 8012ed4:	a809      	add	r0, sp, #36	@ 0x24
 8012ed6:	f7fc fa07 	bl	800f2e8 <ucdr_init_buffer>
 8012eda:	a905      	add	r1, sp, #20
 8012edc:	a809      	add	r0, sp, #36	@ 0x24
 8012ede:	f002 fe39 	bl	8015b54 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8012ee2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012ee4:	9600      	str	r6, [sp, #0]
 8012ee6:	9401      	str	r4, [sp, #4]
 8012ee8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012eec:	60e3      	str	r3, [r4, #12]
 8012eee:	4628      	mov	r0, r5
 8012ef0:	b29b      	uxth	r3, r3
 8012ef2:	f7ff ffa9 	bl	8012e48 <uxr_common_create_entity>
 8012ef6:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8012efa:	bd70      	pop	{r4, r5, r6, pc}
 8012efc:	f88d 301c 	strb.w	r3, [sp, #28]
 8012f00:	e7e5      	b.n	8012ece <uxr_buffer_create_participant_bin+0x2e>
 8012f02:	bf00      	nop

08012f04 <uxr_buffer_create_topic_bin>:
 8012f04:	b570      	push	{r4, r5, r6, lr}
 8012f06:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8012f0a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012f0e:	9105      	str	r1, [sp, #20]
 8012f10:	4605      	mov	r5, r0
 8012f12:	a997      	add	r1, sp, #604	@ 0x25c
 8012f14:	4618      	mov	r0, r3
 8012f16:	2302      	movs	r3, #2
 8012f18:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8012f1c:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8012f20:	f000 f9ea 	bl	80132f8 <uxr_object_id_to_raw>
 8012f24:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8012f26:	9306      	str	r3, [sp, #24]
 8012f28:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8012f2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f2c:	2303      	movs	r3, #3
 8012f2e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8012f32:	2301      	movs	r3, #1
 8012f34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012f38:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8012f3c:	a917      	add	r1, sp, #92	@ 0x5c
 8012f3e:	2300      	movs	r3, #0
 8012f40:	a80b      	add	r0, sp, #44	@ 0x2c
 8012f42:	f88d 301c 	strb.w	r3, [sp, #28]
 8012f46:	f7fc f9cf 	bl	800f2e8 <ucdr_init_buffer>
 8012f4a:	a906      	add	r1, sp, #24
 8012f4c:	a80b      	add	r0, sp, #44	@ 0x2c
 8012f4e:	f002 fe23 	bl	8015b98 <uxr_serialize_OBJK_Topic_Binary>
 8012f52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f54:	9316      	str	r3, [sp, #88]	@ 0x58
 8012f56:	ac13      	add	r4, sp, #76	@ 0x4c
 8012f58:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012f5c:	9600      	str	r6, [sp, #0]
 8012f5e:	9401      	str	r4, [sp, #4]
 8012f60:	b29b      	uxth	r3, r3
 8012f62:	4628      	mov	r0, r5
 8012f64:	f7ff ff70 	bl	8012e48 <uxr_common_create_entity>
 8012f68:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8012f6c:	bd70      	pop	{r4, r5, r6, pc}
 8012f6e:	bf00      	nop

08012f70 <uxr_buffer_create_publisher_bin>:
 8012f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f72:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8012f76:	4605      	mov	r5, r0
 8012f78:	9105      	str	r1, [sp, #20]
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	2603      	movs	r6, #3
 8012f7e:	a992      	add	r1, sp, #584	@ 0x248
 8012f80:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012f84:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8012f88:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8012f8c:	f000 f9b4 	bl	80132f8 <uxr_object_id_to_raw>
 8012f90:	2300      	movs	r3, #0
 8012f92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012f96:	a912      	add	r1, sp, #72	@ 0x48
 8012f98:	a806      	add	r0, sp, #24
 8012f9a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8012f9e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8012fa2:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8012fa6:	f7fc f99f 	bl	800f2e8 <ucdr_init_buffer>
 8012faa:	a993      	add	r1, sp, #588	@ 0x24c
 8012fac:	a806      	add	r0, sp, #24
 8012fae:	f002 fea7 	bl	8015d00 <uxr_serialize_OBJK_Publisher_Binary>
 8012fb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012fb4:	9311      	str	r3, [sp, #68]	@ 0x44
 8012fb6:	ac0e      	add	r4, sp, #56	@ 0x38
 8012fb8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012fbc:	9700      	str	r7, [sp, #0]
 8012fbe:	9401      	str	r4, [sp, #4]
 8012fc0:	b29b      	uxth	r3, r3
 8012fc2:	4628      	mov	r0, r5
 8012fc4:	f7ff ff40 	bl	8012e48 <uxr_common_create_entity>
 8012fc8:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8012fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fce:	bf00      	nop

08012fd0 <uxr_buffer_create_datawriter_bin>:
 8012fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fd4:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012fd8:	ac1d      	add	r4, sp, #116	@ 0x74
 8012fda:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012fde:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8012fe2:	9105      	str	r1, [sp, #20]
 8012fe4:	4606      	mov	r6, r0
 8012fe6:	a9a1      	add	r1, sp, #644	@ 0x284
 8012fe8:	4618      	mov	r0, r3
 8012fea:	2305      	movs	r3, #5
 8012fec:	7123      	strb	r3, [r4, #4]
 8012fee:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8012ff2:	2703      	movs	r7, #3
 8012ff4:	f000 f980 	bl	80132f8 <uxr_object_id_to_raw>
 8012ff8:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8012ffa:	7227      	strb	r7, [r4, #8]
 8012ffc:	a90e      	add	r1, sp, #56	@ 0x38
 8012ffe:	f000 f97b 	bl	80132f8 <uxr_object_id_to_raw>
 8013002:	2300      	movs	r3, #0
 8013004:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8013008:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 801300c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8013010:	3d00      	subs	r5, #0
 8013012:	bf18      	it	ne
 8013014:	2501      	movne	r5, #1
 8013016:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801301a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801301e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8013022:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8013026:	2301      	movs	r3, #1
 8013028:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801302c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8013030:	bb8a      	cbnz	r2, 8013096 <uxr_buffer_create_datawriter_bin+0xc6>
 8013032:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8013036:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801303a:	f04f 0c13 	mov.w	ip, #19
 801303e:	250b      	movs	r5, #11
 8013040:	2221      	movs	r2, #33	@ 0x21
 8013042:	2111      	movs	r1, #17
 8013044:	2009      	movs	r0, #9
 8013046:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801304a:	b923      	cbnz	r3, 8013056 <uxr_buffer_create_datawriter_bin+0x86>
 801304c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8013050:	4672      	mov	r2, lr
 8013052:	4661      	mov	r1, ip
 8013054:	4628      	mov	r0, r5
 8013056:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801305a:	2b01      	cmp	r3, #1
 801305c:	d025      	beq.n	80130aa <uxr_buffer_create_datawriter_bin+0xda>
 801305e:	2b03      	cmp	r3, #3
 8013060:	d029      	beq.n	80130b6 <uxr_buffer_create_datawriter_bin+0xe6>
 8013062:	b32b      	cbz	r3, 80130b0 <uxr_buffer_create_datawriter_bin+0xe0>
 8013064:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013068:	a921      	add	r1, sp, #132	@ 0x84
 801306a:	a806      	add	r0, sp, #24
 801306c:	f7fc f93c 	bl	800f2e8 <ucdr_init_buffer>
 8013070:	a90e      	add	r1, sp, #56	@ 0x38
 8013072:	a806      	add	r0, sp, #24
 8013074:	f002 feba 	bl	8015dec <uxr_serialize_OBJK_DataWriter_Binary>
 8013078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801307a:	f8cd 8000 	str.w	r8, [sp]
 801307e:	9401      	str	r4, [sp, #4]
 8013080:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013084:	60e3      	str	r3, [r4, #12]
 8013086:	4630      	mov	r0, r6
 8013088:	b29b      	uxth	r3, r3
 801308a:	f7ff fedd 	bl	8012e48 <uxr_common_create_entity>
 801308e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8013092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013096:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801309a:	f04f 0c12 	mov.w	ip, #18
 801309e:	250a      	movs	r5, #10
 80130a0:	2220      	movs	r2, #32
 80130a2:	2110      	movs	r1, #16
 80130a4:	2008      	movs	r0, #8
 80130a6:	2702      	movs	r7, #2
 80130a8:	e7cd      	b.n	8013046 <uxr_buffer_create_datawriter_bin+0x76>
 80130aa:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80130ae:	e7d9      	b.n	8013064 <uxr_buffer_create_datawriter_bin+0x94>
 80130b0:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80130b4:	e7d6      	b.n	8013064 <uxr_buffer_create_datawriter_bin+0x94>
 80130b6:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80130ba:	e7d3      	b.n	8013064 <uxr_buffer_create_datawriter_bin+0x94>

080130bc <uxr_buffer_create_replier_bin>:
 80130bc:	b570      	push	{r4, r5, r6, lr}
 80130be:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 80130c2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80130c6:	9105      	str	r1, [sp, #20]
 80130c8:	4605      	mov	r5, r0
 80130ca:	a999      	add	r1, sp, #612	@ 0x264
 80130cc:	4618      	mov	r0, r3
 80130ce:	2308      	movs	r3, #8
 80130d0:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 80130d4:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 80130d8:	f000 f90e 	bl	80132f8 <uxr_object_id_to_raw>
 80130dc:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 80130de:	9306      	str	r3, [sp, #24]
 80130e0:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 80130e2:	9307      	str	r3, [sp, #28]
 80130e4:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 80130e6:	9308      	str	r3, [sp, #32]
 80130e8:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80130ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80130ec:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80130ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80130f0:	2301      	movs	r3, #1
 80130f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80130f6:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80130fa:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80130fe:	a919      	add	r1, sp, #100	@ 0x64
 8013100:	2303      	movs	r3, #3
 8013102:	a80d      	add	r0, sp, #52	@ 0x34
 8013104:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8013108:	f7fc f8ee 	bl	800f2e8 <ucdr_init_buffer>
 801310c:	a906      	add	r1, sp, #24
 801310e:	a80d      	add	r0, sp, #52	@ 0x34
 8013110:	f002 fe98 	bl	8015e44 <uxr_serialize_OBJK_Replier_Binary>
 8013114:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013116:	9318      	str	r3, [sp, #96]	@ 0x60
 8013118:	ac15      	add	r4, sp, #84	@ 0x54
 801311a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801311e:	9600      	str	r6, [sp, #0]
 8013120:	9401      	str	r4, [sp, #4]
 8013122:	b29b      	uxth	r3, r3
 8013124:	4628      	mov	r0, r5
 8013126:	f7ff fe8f 	bl	8012e48 <uxr_common_create_entity>
 801312a:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 801312e:	bd70      	pop	{r4, r5, r6, pc}

08013130 <get_custom_error>:
 8013130:	4b01      	ldr	r3, [pc, #4]	@ (8013138 <get_custom_error+0x8>)
 8013132:	7818      	ldrb	r0, [r3, #0]
 8013134:	4770      	bx	lr
 8013136:	bf00      	nop
 8013138:	2000bb54 	.word	0x2000bb54

0801313c <recv_custom_msg>:
 801313c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013140:	4693      	mov	fp, r2
 8013142:	b089      	sub	sp, #36	@ 0x24
 8013144:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8013148:	9305      	str	r3, [sp, #20]
 801314a:	468a      	mov	sl, r1
 801314c:	2100      	movs	r1, #0
 801314e:	4604      	mov	r4, r0
 8013150:	f88d 101e 	strb.w	r1, [sp, #30]
 8013154:	b322      	cbz	r2, 80131a0 <recv_custom_msg+0x64>
 8013156:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801315a:	f10d 081f 	add.w	r8, sp, #31
 801315e:	af05      	add	r7, sp, #20
 8013160:	f10d 061e 	add.w	r6, sp, #30
 8013164:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8013168:	e002      	b.n	8013170 <recv_custom_msg+0x34>
 801316a:	9b05      	ldr	r3, [sp, #20]
 801316c:	2b00      	cmp	r3, #0
 801316e:	dd0f      	ble.n	8013190 <recv_custom_msg+0x54>
 8013170:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8013174:	4623      	mov	r3, r4
 8013176:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801317a:	e9cd 5600 	strd	r5, r6, [sp]
 801317e:	4622      	mov	r2, r4
 8013180:	4648      	mov	r0, r9
 8013182:	f001 fcef 	bl	8014b64 <uxr_read_framed_msg>
 8013186:	2800      	cmp	r0, #0
 8013188:	d0ef      	beq.n	801316a <recv_custom_msg+0x2e>
 801318a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801318e:	b1b3      	cbz	r3, 80131be <recv_custom_msg+0x82>
 8013190:	4b0f      	ldr	r3, [pc, #60]	@ (80131d0 <recv_custom_msg+0x94>)
 8013192:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013196:	701a      	strb	r2, [r3, #0]
 8013198:	2000      	movs	r0, #0
 801319a:	b009      	add	sp, #36	@ 0x24
 801319c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131a0:	f10d 021f 	add.w	r2, sp, #31
 80131a4:	9200      	str	r2, [sp, #0]
 80131a6:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80131aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80131ae:	4601      	mov	r1, r0
 80131b0:	47a8      	blx	r5
 80131b2:	2800      	cmp	r0, #0
 80131b4:	d0ec      	beq.n	8013190 <recv_custom_msg+0x54>
 80131b6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d1e8      	bne.n	8013190 <recv_custom_msg+0x54>
 80131be:	f8cb 0000 	str.w	r0, [fp]
 80131c2:	2001      	movs	r0, #1
 80131c4:	f8ca 4000 	str.w	r4, [sl]
 80131c8:	b009      	add	sp, #36	@ 0x24
 80131ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ce:	bf00      	nop
 80131d0:	2000bb54 	.word	0x2000bb54

080131d4 <send_custom_msg>:
 80131d4:	b530      	push	{r4, r5, lr}
 80131d6:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 80131da:	b087      	sub	sp, #28
 80131dc:	4615      	mov	r5, r2
 80131de:	b974      	cbnz	r4, 80131fe <send_custom_msg+0x2a>
 80131e0:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 80131e4:	f10d 0317 	add.w	r3, sp, #23
 80131e8:	47a0      	blx	r4
 80131ea:	b108      	cbz	r0, 80131f0 <send_custom_msg+0x1c>
 80131ec:	42a8      	cmp	r0, r5
 80131ee:	d015      	beq.n	801321c <send_custom_msg+0x48>
 80131f0:	4b0c      	ldr	r3, [pc, #48]	@ (8013224 <send_custom_msg+0x50>)
 80131f2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80131f6:	701a      	strb	r2, [r3, #0]
 80131f8:	2000      	movs	r0, #0
 80131fa:	b007      	add	sp, #28
 80131fc:	bd30      	pop	{r4, r5, pc}
 80131fe:	460b      	mov	r3, r1
 8013200:	2200      	movs	r2, #0
 8013202:	f10d 0117 	add.w	r1, sp, #23
 8013206:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801320a:	4602      	mov	r2, r0
 801320c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8013210:	9500      	str	r5, [sp, #0]
 8013212:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8013216:	f001 faad 	bl	8014774 <uxr_write_framed_msg>
 801321a:	e7e6      	b.n	80131ea <send_custom_msg+0x16>
 801321c:	2001      	movs	r0, #1
 801321e:	b007      	add	sp, #28
 8013220:	bd30      	pop	{r4, r5, pc}
 8013222:	bf00      	nop
 8013224:	2000bb54 	.word	0x2000bb54

08013228 <uxr_set_custom_transport_callbacks>:
 8013228:	b410      	push	{r4}
 801322a:	9c01      	ldr	r4, [sp, #4]
 801322c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8013230:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8013234:	9b02      	ldr	r3, [sp, #8]
 8013236:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801323a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801323e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8013242:	4770      	bx	lr

08013244 <uxr_init_custom_transport>:
 8013244:	b538      	push	{r3, r4, r5, lr}
 8013246:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801324a:	b303      	cbz	r3, 801328e <uxr_init_custom_transport+0x4a>
 801324c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8013250:	4604      	mov	r4, r0
 8013252:	b1e2      	cbz	r2, 801328e <uxr_init_custom_transport+0x4a>
 8013254:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8013258:	b1ca      	cbz	r2, 801328e <uxr_init_custom_transport+0x4a>
 801325a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801325e:	b1b2      	cbz	r2, 801328e <uxr_init_custom_transport+0x4a>
 8013260:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8013264:	4798      	blx	r3
 8013266:	4605      	mov	r5, r0
 8013268:	b188      	cbz	r0, 801328e <uxr_init_custom_transport+0x4a>
 801326a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801326e:	b98b      	cbnz	r3, 8013294 <uxr_init_custom_transport+0x50>
 8013270:	490b      	ldr	r1, [pc, #44]	@ (80132a0 <uxr_init_custom_transport+0x5c>)
 8013272:	4b0c      	ldr	r3, [pc, #48]	@ (80132a4 <uxr_init_custom_transport+0x60>)
 8013274:	4a0c      	ldr	r2, [pc, #48]	@ (80132a8 <uxr_init_custom_transport+0x64>)
 8013276:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801327a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801327e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8013282:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8013286:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801328a:	4628      	mov	r0, r5
 801328c:	bd38      	pop	{r3, r4, r5, pc}
 801328e:	2500      	movs	r5, #0
 8013290:	4628      	mov	r0, r5
 8013292:	bd38      	pop	{r3, r4, r5, pc}
 8013294:	2100      	movs	r1, #0
 8013296:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801329a:	f001 fa65 	bl	8014768 <uxr_init_framing_io>
 801329e:	e7e7      	b.n	8013270 <uxr_init_custom_transport+0x2c>
 80132a0:	080131d5 	.word	0x080131d5
 80132a4:	0801313d 	.word	0x0801313d
 80132a8:	08013131 	.word	0x08013131

080132ac <uxr_close_custom_transport>:
 80132ac:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80132b0:	4718      	bx	r3
 80132b2:	bf00      	nop

080132b4 <uxr_object_id>:
 80132b4:	b082      	sub	sp, #8
 80132b6:	2300      	movs	r3, #0
 80132b8:	f88d 1006 	strb.w	r1, [sp, #6]
 80132bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80132c0:	f360 030f 	bfi	r3, r0, #0, #16
 80132c4:	f362 431f 	bfi	r3, r2, #16, #16
 80132c8:	4618      	mov	r0, r3
 80132ca:	b002      	add	sp, #8
 80132cc:	4770      	bx	lr
 80132ce:	bf00      	nop

080132d0 <uxr_object_id_from_raw>:
 80132d0:	7843      	ldrb	r3, [r0, #1]
 80132d2:	7801      	ldrb	r1, [r0, #0]
 80132d4:	b082      	sub	sp, #8
 80132d6:	f003 020f 	and.w	r2, r3, #15
 80132da:	f88d 2006 	strb.w	r2, [sp, #6]
 80132de:	091b      	lsrs	r3, r3, #4
 80132e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80132e4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80132e8:	2000      	movs	r0, #0
 80132ea:	f363 000f 	bfi	r0, r3, #0, #16
 80132ee:	f362 401f 	bfi	r0, r2, #16, #16
 80132f2:	b002      	add	sp, #8
 80132f4:	4770      	bx	lr
 80132f6:	bf00      	nop

080132f8 <uxr_object_id_to_raw>:
 80132f8:	4602      	mov	r2, r0
 80132fa:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80132fe:	b082      	sub	sp, #8
 8013300:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8013304:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8013308:	f881 c000 	strb.w	ip, [r1]
 801330c:	7048      	strb	r0, [r1, #1]
 801330e:	b002      	add	sp, #8
 8013310:	4770      	bx	lr
 8013312:	bf00      	nop

08013314 <uxr_buffer_request_data>:
 8013314:	b530      	push	{r4, r5, lr}
 8013316:	b095      	sub	sp, #84	@ 0x54
 8013318:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801331c:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801331e:	9303      	str	r3, [sp, #12]
 8013320:	2200      	movs	r2, #0
 8013322:	2d00      	cmp	r5, #0
 8013324:	bf14      	ite	ne
 8013326:	2101      	movne	r1, #1
 8013328:	4611      	moveq	r1, r2
 801332a:	4604      	mov	r4, r0
 801332c:	f88d 301c 	strb.w	r3, [sp, #28]
 8013330:	f88d 201d 	strb.w	r2, [sp, #29]
 8013334:	f88d 201e 	strb.w	r2, [sp, #30]
 8013338:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801333c:	d021      	beq.n	8013382 <uxr_buffer_request_data+0x6e>
 801333e:	682a      	ldr	r2, [r5, #0]
 8013340:	686b      	ldr	r3, [r5, #4]
 8013342:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8013346:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801334a:	2210      	movs	r2, #16
 801334c:	2308      	movs	r3, #8
 801334e:	2100      	movs	r1, #0
 8013350:	e9cd 3100 	strd	r3, r1, [sp]
 8013354:	4620      	mov	r0, r4
 8013356:	9905      	ldr	r1, [sp, #20]
 8013358:	ab0c      	add	r3, sp, #48	@ 0x30
 801335a:	f001 f89f 	bl	801449c <uxr_prepare_stream_to_write_submessage>
 801335e:	b918      	cbnz	r0, 8013368 <uxr_buffer_request_data+0x54>
 8013360:	4604      	mov	r4, r0
 8013362:	4620      	mov	r0, r4
 8013364:	b015      	add	sp, #84	@ 0x54
 8013366:	bd30      	pop	{r4, r5, pc}
 8013368:	9904      	ldr	r1, [sp, #16]
 801336a:	aa06      	add	r2, sp, #24
 801336c:	4620      	mov	r0, r4
 801336e:	f001 f9cb 	bl	8014708 <uxr_init_base_object_request>
 8013372:	a906      	add	r1, sp, #24
 8013374:	4604      	mov	r4, r0
 8013376:	a80c      	add	r0, sp, #48	@ 0x30
 8013378:	f003 f8a0 	bl	80164bc <uxr_serialize_READ_DATA_Payload>
 801337c:	4620      	mov	r0, r4
 801337e:	b015      	add	sp, #84	@ 0x54
 8013380:	bd30      	pop	{r4, r5, pc}
 8013382:	2208      	movs	r2, #8
 8013384:	e7e2      	b.n	801334c <uxr_buffer_request_data+0x38>
 8013386:	bf00      	nop

08013388 <uxr_buffer_cancel_data>:
 8013388:	b510      	push	{r4, lr}
 801338a:	b094      	sub	sp, #80	@ 0x50
 801338c:	2300      	movs	r3, #0
 801338e:	9202      	str	r2, [sp, #8]
 8013390:	9205      	str	r2, [sp, #20]
 8013392:	9301      	str	r3, [sp, #4]
 8013394:	2201      	movs	r2, #1
 8013396:	f8ad 301c 	strh.w	r3, [sp, #28]
 801339a:	f88d 301e 	strb.w	r3, [sp, #30]
 801339e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80133a2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80133a6:	2308      	movs	r3, #8
 80133a8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80133ac:	9300      	str	r3, [sp, #0]
 80133ae:	2210      	movs	r2, #16
 80133b0:	ab0c      	add	r3, sp, #48	@ 0x30
 80133b2:	4604      	mov	r4, r0
 80133b4:	9103      	str	r1, [sp, #12]
 80133b6:	f001 f871 	bl	801449c <uxr_prepare_stream_to_write_submessage>
 80133ba:	b918      	cbnz	r0, 80133c4 <uxr_buffer_cancel_data+0x3c>
 80133bc:	4604      	mov	r4, r0
 80133be:	4620      	mov	r0, r4
 80133c0:	b014      	add	sp, #80	@ 0x50
 80133c2:	bd10      	pop	{r4, pc}
 80133c4:	9905      	ldr	r1, [sp, #20]
 80133c6:	aa06      	add	r2, sp, #24
 80133c8:	4620      	mov	r0, r4
 80133ca:	f001 f99d 	bl	8014708 <uxr_init_base_object_request>
 80133ce:	a906      	add	r1, sp, #24
 80133d0:	4604      	mov	r4, r0
 80133d2:	a80c      	add	r0, sp, #48	@ 0x30
 80133d4:	f003 f872 	bl	80164bc <uxr_serialize_READ_DATA_Payload>
 80133d8:	4620      	mov	r0, r4
 80133da:	b014      	add	sp, #80	@ 0x50
 80133dc:	bd10      	pop	{r4, pc}
 80133de:	bf00      	nop

080133e0 <read_submessage_format>:
 80133e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133e4:	b095      	sub	sp, #84	@ 0x54
 80133e6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 80133ea:	b113      	cbz	r3, 80133f2 <read_submessage_format+0x12>
 80133ec:	b015      	add	sp, #84	@ 0x54
 80133ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133f2:	460c      	mov	r4, r1
 80133f4:	4615      	mov	r5, r2
 80133f6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80133fa:	4607      	mov	r7, r0
 80133fc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80133fe:	9004      	str	r0, [sp, #16]
 8013400:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8013402:	9005      	str	r0, [sp, #20]
 8013404:	1a52      	subs	r2, r2, r1
 8013406:	a80c      	add	r0, sp, #48	@ 0x30
 8013408:	4699      	mov	r9, r3
 801340a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801340e:	f7fb ff6b 	bl	800f2e8 <ucdr_init_buffer>
 8013412:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013416:	a80c      	add	r0, sp, #48	@ 0x30
 8013418:	f7fb ff3a 	bl	800f290 <ucdr_set_on_full_buffer_callback>
 801341c:	69e2      	ldr	r2, [r4, #28]
 801341e:	b19a      	cbz	r2, 8013448 <read_submessage_format+0x68>
 8013420:	f1b8 0f07 	cmp.w	r8, #7
 8013424:	f882 9014 	strb.w	r9, [r2, #20]
 8013428:	d040      	beq.n	80134ac <read_submessage_format+0xcc>
 801342a:	f1b8 0f08 	cmp.w	r8, #8
 801342e:	d02e      	beq.n	801348e <read_submessage_format+0xae>
 8013430:	f1b8 0f06 	cmp.w	r8, #6
 8013434:	d011      	beq.n	801345a <read_submessage_format+0x7a>
 8013436:	2301      	movs	r3, #1
 8013438:	7513      	strb	r3, [r2, #20]
 801343a:	4629      	mov	r1, r5
 801343c:	4620      	mov	r0, r4
 801343e:	f7fb ffa3 	bl	800f388 <ucdr_advance_buffer>
 8013442:	b015      	add	sp, #84	@ 0x54
 8013444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013448:	f1b8 0f07 	cmp.w	r8, #7
 801344c:	d02e      	beq.n	80134ac <read_submessage_format+0xcc>
 801344e:	f1b8 0f08 	cmp.w	r8, #8
 8013452:	d01c      	beq.n	801348e <read_submessage_format+0xae>
 8013454:	f1b8 0f06 	cmp.w	r8, #6
 8013458:	d1ef      	bne.n	801343a <read_submessage_format+0x5a>
 801345a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 801345e:	f1b8 0f00 	cmp.w	r8, #0
 8013462:	d011      	beq.n	8013488 <read_submessage_format+0xa8>
 8013464:	ab0c      	add	r3, sp, #48	@ 0x30
 8013466:	e9cd 3500 	strd	r3, r5, [sp]
 801346a:	2306      	movs	r3, #6
 801346c:	f88d 3016 	strb.w	r3, [sp, #22]
 8013470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013474:	9302      	str	r3, [sp, #8]
 8013476:	4632      	mov	r2, r6
 8013478:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801347c:	4638      	mov	r0, r7
 801347e:	47c0      	blx	r8
 8013480:	2301      	movs	r3, #1
 8013482:	69e2      	ldr	r2, [r4, #28]
 8013484:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8013488:	2a00      	cmp	r2, #0
 801348a:	d1d4      	bne.n	8013436 <read_submessage_format+0x56>
 801348c:	e7d5      	b.n	801343a <read_submessage_format+0x5a>
 801348e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013492:	2b00      	cmp	r3, #0
 8013494:	d0f8      	beq.n	8013488 <read_submessage_format+0xa8>
 8013496:	a906      	add	r1, sp, #24
 8013498:	a80c      	add	r0, sp, #48	@ 0x30
 801349a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801349e:	f003 f8e1 	bl	8016664 <uxr_deserialize_SampleIdentity>
 80134a2:	b9a0      	cbnz	r0, 80134ce <read_submessage_format+0xee>
 80134a4:	69e2      	ldr	r2, [r4, #28]
 80134a6:	2a00      	cmp	r2, #0
 80134a8:	d1c5      	bne.n	8013436 <read_submessage_format+0x56>
 80134aa:	e7c6      	b.n	801343a <read_submessage_format+0x5a>
 80134ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80134b0:	b13b      	cbz	r3, 80134c2 <read_submessage_format+0xe2>
 80134b2:	a906      	add	r1, sp, #24
 80134b4:	a80c      	add	r0, sp, #48	@ 0x30
 80134b6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80134ba:	f002 fd99 	bl	8015ff0 <uxr_deserialize_BaseObjectRequest>
 80134be:	bb60      	cbnz	r0, 801351a <read_submessage_format+0x13a>
 80134c0:	69e2      	ldr	r2, [r4, #28]
 80134c2:	68a3      	ldr	r3, [r4, #8]
 80134c4:	442b      	add	r3, r5
 80134c6:	60a3      	str	r3, [r4, #8]
 80134c8:	2a00      	cmp	r2, #0
 80134ca:	d1b4      	bne.n	8013436 <read_submessage_format+0x56>
 80134cc:	e7b5      	b.n	801343a <read_submessage_format+0x5a>
 80134ce:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80134d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80134d4:	1a52      	subs	r2, r2, r1
 80134d6:	eba8 0803 	sub.w	r8, r8, r3
 80134da:	a80c      	add	r0, sp, #48	@ 0x30
 80134dc:	f7fb ff04 	bl	800f2e8 <ucdr_init_buffer>
 80134e0:	44a8      	add	r8, r5
 80134e2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80134e6:	a80c      	add	r0, sp, #48	@ 0x30
 80134e8:	f7fb fed2 	bl	800f290 <ucdr_set_on_full_buffer_callback>
 80134ec:	fa1f f888 	uxth.w	r8, r8
 80134f0:	ab0c      	add	r3, sp, #48	@ 0x30
 80134f2:	9300      	str	r3, [sp, #0]
 80134f4:	f8cd 8004 	str.w	r8, [sp, #4]
 80134f8:	2108      	movs	r1, #8
 80134fa:	f88d 1016 	strb.w	r1, [sp, #22]
 80134fe:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8013502:	9102      	str	r1, [sp, #8]
 8013504:	ab06      	add	r3, sp, #24
 8013506:	4632      	mov	r2, r6
 8013508:	9905      	ldr	r1, [sp, #20]
 801350a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 801350e:	4638      	mov	r0, r7
 8013510:	47b0      	blx	r6
 8013512:	2301      	movs	r3, #1
 8013514:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8013518:	e7c4      	b.n	80134a4 <read_submessage_format+0xc4>
 801351a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801351e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013520:	1a52      	subs	r2, r2, r1
 8013522:	a80c      	add	r0, sp, #48	@ 0x30
 8013524:	eba8 0803 	sub.w	r8, r8, r3
 8013528:	f7fb fede 	bl	800f2e8 <ucdr_init_buffer>
 801352c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013530:	a80c      	add	r0, sp, #48	@ 0x30
 8013532:	f7fb fead 	bl	800f290 <ucdr_set_on_full_buffer_callback>
 8013536:	ab0c      	add	r3, sp, #48	@ 0x30
 8013538:	9300      	str	r3, [sp, #0]
 801353a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801353e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013542:	44a8      	add	r8, r5
 8013544:	fa1f f888 	uxth.w	r8, r8
 8013548:	f8cd 8004 	str.w	r8, [sp, #4]
 801354c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013550:	2107      	movs	r1, #7
 8013552:	f88d 1016 	strb.w	r1, [sp, #22]
 8013556:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 801355a:	9102      	str	r1, [sp, #8]
 801355c:	4632      	mov	r2, r6
 801355e:	b29b      	uxth	r3, r3
 8013560:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8013564:	9905      	ldr	r1, [sp, #20]
 8013566:	4638      	mov	r0, r7
 8013568:	47b0      	blx	r6
 801356a:	2301      	movs	r3, #1
 801356c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8013570:	e7a6      	b.n	80134c0 <read_submessage_format+0xe0>
 8013572:	bf00      	nop

08013574 <on_get_fragmentation_info>:
 8013574:	b500      	push	{lr}
 8013576:	b08b      	sub	sp, #44	@ 0x2c
 8013578:	4601      	mov	r1, r0
 801357a:	2204      	movs	r2, #4
 801357c:	a802      	add	r0, sp, #8
 801357e:	f7fb feb3 	bl	800f2e8 <ucdr_init_buffer>
 8013582:	f10d 0305 	add.w	r3, sp, #5
 8013586:	f10d 0206 	add.w	r2, sp, #6
 801358a:	a901      	add	r1, sp, #4
 801358c:	a802      	add	r0, sp, #8
 801358e:	f001 fecf 	bl	8015330 <uxr_read_submessage_header>
 8013592:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013596:	2b0d      	cmp	r3, #13
 8013598:	d003      	beq.n	80135a2 <on_get_fragmentation_info+0x2e>
 801359a:	2000      	movs	r0, #0
 801359c:	b00b      	add	sp, #44	@ 0x2c
 801359e:	f85d fb04 	ldr.w	pc, [sp], #4
 80135a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80135a6:	f013 0f02 	tst.w	r3, #2
 80135aa:	bf14      	ite	ne
 80135ac:	2002      	movne	r0, #2
 80135ae:	2001      	moveq	r0, #1
 80135b0:	b00b      	add	sp, #44	@ 0x2c
 80135b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80135b6:	bf00      	nop

080135b8 <read_submessage_get_info>:
 80135b8:	b570      	push	{r4, r5, r6, lr}
 80135ba:	2500      	movs	r5, #0
 80135bc:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80135c0:	4604      	mov	r4, r0
 80135c2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80135c6:	460e      	mov	r6, r1
 80135c8:	a810      	add	r0, sp, #64	@ 0x40
 80135ca:	4629      	mov	r1, r5
 80135cc:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80135d0:	f009 f860 	bl	801c694 <memset>
 80135d4:	a903      	add	r1, sp, #12
 80135d6:	4630      	mov	r0, r6
 80135d8:	f002 feb2 	bl	8016340 <uxr_deserialize_GET_INFO_Payload>
 80135dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80135e0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80135e4:	4620      	mov	r0, r4
 80135e6:	f001 f887 	bl	80146f8 <uxr_session_header_offset>
 80135ea:	462b      	mov	r3, r5
 80135ec:	9000      	str	r0, [sp, #0]
 80135ee:	220c      	movs	r2, #12
 80135f0:	a905      	add	r1, sp, #20
 80135f2:	a808      	add	r0, sp, #32
 80135f4:	f7fb fe66 	bl	800f2c4 <ucdr_init_buffer_origin_offset>
 80135f8:	a910      	add	r1, sp, #64	@ 0x40
 80135fa:	a808      	add	r0, sp, #32
 80135fc:	f002 ff12 	bl	8016424 <uxr_serialize_INFO_Payload>
 8013600:	9b08      	ldr	r3, [sp, #32]
 8013602:	462a      	mov	r2, r5
 8013604:	4629      	mov	r1, r5
 8013606:	4620      	mov	r0, r4
 8013608:	f001 f820 	bl	801464c <uxr_stamp_session_header>
 801360c:	a808      	add	r0, sp, #32
 801360e:	f7fb fe97 	bl	800f340 <ucdr_buffer_length>
 8013612:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013614:	4602      	mov	r2, r0
 8013616:	a905      	add	r1, sp, #20
 8013618:	e9d3 0400 	ldrd	r0, r4, [r3]
 801361c:	47a0      	blx	r4
 801361e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8013622:	bd70      	pop	{r4, r5, r6, pc}

08013624 <write_submessage_acknack.isra.0>:
 8013624:	b570      	push	{r4, r5, r6, lr}
 8013626:	b092      	sub	sp, #72	@ 0x48
 8013628:	4605      	mov	r5, r0
 801362a:	460e      	mov	r6, r1
 801362c:	4614      	mov	r4, r2
 801362e:	f001 f863 	bl	80146f8 <uxr_session_header_offset>
 8013632:	a905      	add	r1, sp, #20
 8013634:	9000      	str	r0, [sp, #0]
 8013636:	2300      	movs	r3, #0
 8013638:	a80a      	add	r0, sp, #40	@ 0x28
 801363a:	2211      	movs	r2, #17
 801363c:	f7fb fe42 	bl	800f2c4 <ucdr_init_buffer_origin_offset>
 8013640:	2218      	movs	r2, #24
 8013642:	fb02 5404 	mla	r4, r2, r4, r5
 8013646:	2300      	movs	r3, #0
 8013648:	2205      	movs	r2, #5
 801364a:	3450      	adds	r4, #80	@ 0x50
 801364c:	210a      	movs	r1, #10
 801364e:	a80a      	add	r0, sp, #40	@ 0x28
 8013650:	f001 fe54 	bl	80152fc <uxr_buffer_submessage_header>
 8013654:	a903      	add	r1, sp, #12
 8013656:	4620      	mov	r0, r4
 8013658:	f007 fb5e 	bl	801ad18 <uxr_compute_acknack>
 801365c:	ba40      	rev16	r0, r0
 801365e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8013662:	a903      	add	r1, sp, #12
 8013664:	a80a      	add	r0, sp, #40	@ 0x28
 8013666:	f88d 6010 	strb.w	r6, [sp, #16]
 801366a:	f002 ff4b 	bl	8016504 <uxr_serialize_ACKNACK_Payload>
 801366e:	2200      	movs	r2, #0
 8013670:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013672:	4611      	mov	r1, r2
 8013674:	4628      	mov	r0, r5
 8013676:	f000 ffe9 	bl	801464c <uxr_stamp_session_header>
 801367a:	a80a      	add	r0, sp, #40	@ 0x28
 801367c:	f7fb fe60 	bl	800f340 <ucdr_buffer_length>
 8013680:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8013682:	4602      	mov	r2, r0
 8013684:	a905      	add	r1, sp, #20
 8013686:	e9d3 0400 	ldrd	r0, r4, [r3]
 801368a:	47a0      	blx	r4
 801368c:	b012      	add	sp, #72	@ 0x48
 801368e:	bd70      	pop	{r4, r5, r6, pc}

08013690 <uxr_init_session>:
 8013690:	b510      	push	{r4, lr}
 8013692:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80136c8 <uxr_init_session+0x38>
 8013696:	2300      	movs	r3, #0
 8013698:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801369c:	4604      	mov	r4, r0
 801369e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80136a2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80136a6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80136aa:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80136ae:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80136b2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80136b6:	2181      	movs	r1, #129	@ 0x81
 80136b8:	f000 ff34 	bl	8014524 <uxr_init_session_info>
 80136bc:	f104 0008 	add.w	r0, r4, #8
 80136c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136c4:	f001 bd36 	b.w	8015134 <uxr_init_stream_storage>
	...

080136d0 <uxr_set_status_callback>:
 80136d0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80136d4:	4770      	bx	lr
 80136d6:	bf00      	nop

080136d8 <uxr_set_topic_callback>:
 80136d8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80136dc:	4770      	bx	lr
 80136de:	bf00      	nop

080136e0 <uxr_set_request_callback>:
 80136e0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80136e4:	4770      	bx	lr
 80136e6:	bf00      	nop

080136e8 <uxr_set_reply_callback>:
 80136e8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80136ec:	4770      	bx	lr
 80136ee:	bf00      	nop

080136f0 <uxr_create_output_best_effort_stream>:
 80136f0:	b510      	push	{r4, lr}
 80136f2:	b084      	sub	sp, #16
 80136f4:	e9cd 2100 	strd	r2, r1, [sp]
 80136f8:	4604      	mov	r4, r0
 80136fa:	f000 fffd 	bl	80146f8 <uxr_session_header_offset>
 80136fe:	e9dd 2100 	ldrd	r2, r1, [sp]
 8013702:	4603      	mov	r3, r0
 8013704:	f104 0008 	add.w	r0, r4, #8
 8013708:	b004      	add	sp, #16
 801370a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801370e:	f001 bd5b 	b.w	80151c8 <uxr_add_output_best_effort_buffer>
 8013712:	bf00      	nop

08013714 <uxr_create_output_reliable_stream>:
 8013714:	b510      	push	{r4, lr}
 8013716:	b088      	sub	sp, #32
 8013718:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801371c:	4604      	mov	r4, r0
 801371e:	9303      	str	r3, [sp, #12]
 8013720:	f000 ffea 	bl	80146f8 <uxr_session_header_offset>
 8013724:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8013728:	9000      	str	r0, [sp, #0]
 801372a:	9905      	ldr	r1, [sp, #20]
 801372c:	f104 0008 	add.w	r0, r4, #8
 8013730:	f001 fd5e 	bl	80151f0 <uxr_add_output_reliable_buffer>
 8013734:	2200      	movs	r2, #0
 8013736:	b2c3      	uxtb	r3, r0
 8013738:	f363 0207 	bfi	r2, r3, #0, #8
 801373c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013740:	f363 220f 	bfi	r2, r3, #8, #8
 8013744:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013748:	f363 4217 	bfi	r2, r3, #16, #8
 801374c:	0e03      	lsrs	r3, r0, #24
 801374e:	f363 621f 	bfi	r2, r3, #24, #8
 8013752:	4610      	mov	r0, r2
 8013754:	b008      	add	sp, #32
 8013756:	bd10      	pop	{r4, pc}

08013758 <uxr_create_input_best_effort_stream>:
 8013758:	b082      	sub	sp, #8
 801375a:	3008      	adds	r0, #8
 801375c:	b002      	add	sp, #8
 801375e:	f001 bd61 	b.w	8015224 <uxr_add_input_best_effort_buffer>
 8013762:	bf00      	nop

08013764 <uxr_create_input_reliable_stream>:
 8013764:	b510      	push	{r4, lr}
 8013766:	b084      	sub	sp, #16
 8013768:	4c0b      	ldr	r4, [pc, #44]	@ (8013798 <uxr_create_input_reliable_stream+0x34>)
 801376a:	9400      	str	r4, [sp, #0]
 801376c:	3008      	adds	r0, #8
 801376e:	f001 fd6f 	bl	8015250 <uxr_add_input_reliable_buffer>
 8013772:	2200      	movs	r2, #0
 8013774:	b2c3      	uxtb	r3, r0
 8013776:	f363 0207 	bfi	r2, r3, #0, #8
 801377a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801377e:	f363 220f 	bfi	r2, r3, #8, #8
 8013782:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013786:	f363 4217 	bfi	r2, r3, #16, #8
 801378a:	0e03      	lsrs	r3, r0, #24
 801378c:	f363 621f 	bfi	r2, r3, #24, #8
 8013790:	4610      	mov	r0, r2
 8013792:	b004      	add	sp, #16
 8013794:	bd10      	pop	{r4, pc}
 8013796:	bf00      	nop
 8013798:	08013575 	.word	0x08013575

0801379c <uxr_epoch_millis>:
 801379c:	b510      	push	{r4, lr}
 801379e:	4604      	mov	r4, r0
 80137a0:	f001 fe0c 	bl	80153bc <uxr_nanos>
 80137a4:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 80137a8:	1ac0      	subs	r0, r0, r3
 80137aa:	4a04      	ldr	r2, [pc, #16]	@ (80137bc <uxr_epoch_millis+0x20>)
 80137ac:	f04f 0300 	mov.w	r3, #0
 80137b0:	eb61 0104 	sbc.w	r1, r1, r4
 80137b4:	f7ed fa08 	bl	8000bc8 <__aeabi_ldivmod>
 80137b8:	bd10      	pop	{r4, pc}
 80137ba:	bf00      	nop
 80137bc:	000f4240 	.word	0x000f4240

080137c0 <uxr_epoch_nanos>:
 80137c0:	b510      	push	{r4, lr}
 80137c2:	4604      	mov	r4, r0
 80137c4:	f001 fdfa 	bl	80153bc <uxr_nanos>
 80137c8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80137cc:	1ac0      	subs	r0, r0, r3
 80137ce:	eb61 0102 	sbc.w	r1, r1, r2
 80137d2:	bd10      	pop	{r4, pc}

080137d4 <uxr_flash_output_streams>:
 80137d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137d8:	7e03      	ldrb	r3, [r0, #24]
 80137da:	b084      	sub	sp, #16
 80137dc:	4604      	mov	r4, r0
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d035      	beq.n	801384e <uxr_flash_output_streams+0x7a>
 80137e2:	f04f 0900 	mov.w	r9, #0
 80137e6:	4648      	mov	r0, r9
 80137e8:	f10d 0802 	add.w	r8, sp, #2
 80137ec:	af03      	add	r7, sp, #12
 80137ee:	ae02      	add	r6, sp, #8
 80137f0:	e006      	b.n	8013800 <uxr_flash_output_streams+0x2c>
 80137f2:	7e23      	ldrb	r3, [r4, #24]
 80137f4:	f109 0901 	add.w	r9, r9, #1
 80137f8:	fa5f f089 	uxtb.w	r0, r9
 80137fc:	4283      	cmp	r3, r0
 80137fe:	d926      	bls.n	801384e <uxr_flash_output_streams+0x7a>
 8013800:	2201      	movs	r2, #1
 8013802:	4611      	mov	r1, r2
 8013804:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8013808:	f001 fc40 	bl	801508c <uxr_stream_id>
 801380c:	3508      	adds	r5, #8
 801380e:	4684      	mov	ip, r0
 8013810:	4643      	mov	r3, r8
 8013812:	463a      	mov	r2, r7
 8013814:	4631      	mov	r1, r6
 8013816:	4628      	mov	r0, r5
 8013818:	f8cd c004 	str.w	ip, [sp, #4]
 801381c:	f007 fb02 	bl	801ae24 <uxr_prepare_best_effort_buffer_to_send>
 8013820:	2800      	cmp	r0, #0
 8013822:	d0e6      	beq.n	80137f2 <uxr_flash_output_streams+0x1e>
 8013824:	9b02      	ldr	r3, [sp, #8]
 8013826:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801382a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801382e:	4620      	mov	r0, r4
 8013830:	f000 ff0c 	bl	801464c <uxr_stamp_session_header>
 8013834:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013836:	9a03      	ldr	r2, [sp, #12]
 8013838:	685d      	ldr	r5, [r3, #4]
 801383a:	6818      	ldr	r0, [r3, #0]
 801383c:	9902      	ldr	r1, [sp, #8]
 801383e:	47a8      	blx	r5
 8013840:	f109 0901 	add.w	r9, r9, #1
 8013844:	7e23      	ldrb	r3, [r4, #24]
 8013846:	fa5f f089 	uxtb.w	r0, r9
 801384a:	4283      	cmp	r3, r0
 801384c:	d8d8      	bhi.n	8013800 <uxr_flash_output_streams+0x2c>
 801384e:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8013852:	b38b      	cbz	r3, 80138b8 <uxr_flash_output_streams+0xe4>
 8013854:	f04f 0900 	mov.w	r9, #0
 8013858:	f10d 0802 	add.w	r8, sp, #2
 801385c:	af03      	add	r7, sp, #12
 801385e:	ae02      	add	r6, sp, #8
 8013860:	4648      	mov	r0, r9
 8013862:	2201      	movs	r2, #1
 8013864:	2102      	movs	r1, #2
 8013866:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801386a:	f001 fc0f 	bl	801508c <uxr_stream_id>
 801386e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8013872:	3520      	adds	r5, #32
 8013874:	9001      	str	r0, [sp, #4]
 8013876:	e00d      	b.n	8013894 <uxr_flash_output_streams+0xc0>
 8013878:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801387c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013880:	9b02      	ldr	r3, [sp, #8]
 8013882:	f000 fee3 	bl	801464c <uxr_stamp_session_header>
 8013886:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013888:	9a03      	ldr	r2, [sp, #12]
 801388a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801388e:	9902      	ldr	r1, [sp, #8]
 8013890:	6818      	ldr	r0, [r3, #0]
 8013892:	47d0      	blx	sl
 8013894:	4643      	mov	r3, r8
 8013896:	463a      	mov	r2, r7
 8013898:	4631      	mov	r1, r6
 801389a:	4628      	mov	r0, r5
 801389c:	f007 fce0 	bl	801b260 <uxr_prepare_next_reliable_buffer_to_send>
 80138a0:	4603      	mov	r3, r0
 80138a2:	4620      	mov	r0, r4
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d1e7      	bne.n	8013878 <uxr_flash_output_streams+0xa4>
 80138a8:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80138ac:	f109 0901 	add.w	r9, r9, #1
 80138b0:	fa5f f089 	uxtb.w	r0, r9
 80138b4:	4283      	cmp	r3, r0
 80138b6:	d8d4      	bhi.n	8013862 <uxr_flash_output_streams+0x8e>
 80138b8:	b004      	add	sp, #16
 80138ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138be:	bf00      	nop

080138c0 <read_submessage_info>:
 80138c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138c4:	460d      	mov	r5, r1
 80138c6:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80138ca:	4669      	mov	r1, sp
 80138cc:	4607      	mov	r7, r0
 80138ce:	4628      	mov	r0, r5
 80138d0:	f002 fc44 	bl	801615c <uxr_deserialize_BaseObjectReply>
 80138d4:	a902      	add	r1, sp, #8
 80138d6:	4604      	mov	r4, r0
 80138d8:	4628      	mov	r0, r5
 80138da:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80138de:	f7fa fa09 	bl	800dcf4 <ucdr_deserialize_bool>
 80138e2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80138e6:	4004      	ands	r4, r0
 80138e8:	b2e4      	uxtb	r4, r4
 80138ea:	b95b      	cbnz	r3, 8013904 <read_submessage_info+0x44>
 80138ec:	a987      	add	r1, sp, #540	@ 0x21c
 80138ee:	4628      	mov	r0, r5
 80138f0:	f7fa fa00 	bl	800dcf4 <ucdr_deserialize_bool>
 80138f4:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80138f8:	4606      	mov	r6, r0
 80138fa:	b94b      	cbnz	r3, 8013910 <read_submessage_info+0x50>
 80138fc:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8013900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013904:	a903      	add	r1, sp, #12
 8013906:	4628      	mov	r0, r5
 8013908:	f002 fad0 	bl	8015eac <uxr_deserialize_ObjectVariant>
 801390c:	4004      	ands	r4, r0
 801390e:	e7ed      	b.n	80138ec <read_submessage_info+0x2c>
 8013910:	a988      	add	r1, sp, #544	@ 0x220
 8013912:	4628      	mov	r0, r5
 8013914:	f7fa fa1c 	bl	800dd50 <ucdr_deserialize_uint8_t>
 8013918:	4234      	tst	r4, r6
 801391a:	d0ef      	beq.n	80138fc <read_submessage_info+0x3c>
 801391c:	2800      	cmp	r0, #0
 801391e:	d0ed      	beq.n	80138fc <read_submessage_info+0x3c>
 8013920:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8013924:	2b0d      	cmp	r3, #13
 8013926:	d1e9      	bne.n	80138fc <read_submessage_info+0x3c>
 8013928:	a98a      	add	r1, sp, #552	@ 0x228
 801392a:	4628      	mov	r0, r5
 801392c:	f7fa ffb6 	bl	800e89c <ucdr_deserialize_int16_t>
 8013930:	b140      	cbz	r0, 8013944 <read_submessage_info+0x84>
 8013932:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8013936:	2b00      	cmp	r3, #0
 8013938:	dd07      	ble.n	801394a <read_submessage_info+0x8a>
 801393a:	f1b8 0f00 	cmp.w	r8, #0
 801393e:	bf14      	ite	ne
 8013940:	2001      	movne	r0, #1
 8013942:	2002      	moveq	r0, #2
 8013944:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8013948:	e7d8      	b.n	80138fc <read_submessage_info+0x3c>
 801394a:	2000      	movs	r0, #0
 801394c:	e7fa      	b.n	8013944 <read_submessage_info+0x84>
 801394e:	bf00      	nop

08013950 <read_submessage_list>:
 8013950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013954:	b097      	sub	sp, #92	@ 0x5c
 8013956:	4ec1      	ldr	r6, [pc, #772]	@ (8013c5c <read_submessage_list+0x30c>)
 8013958:	9209      	str	r2, [sp, #36]	@ 0x24
 801395a:	4604      	mov	r4, r0
 801395c:	460d      	mov	r5, r1
 801395e:	f04f 0801 	mov.w	r8, #1
 8013962:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8013966:	aa0c      	add	r2, sp, #48	@ 0x30
 8013968:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 801396c:	4628      	mov	r0, r5
 801396e:	f001 fcdf 	bl	8015330 <uxr_read_submessage_header>
 8013972:	2800      	cmp	r0, #0
 8013974:	f000 813e 	beq.w	8013bf4 <read_submessage_list+0x2a4>
 8013978:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 801397c:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8013980:	3b02      	subs	r3, #2
 8013982:	2b0d      	cmp	r3, #13
 8013984:	d8ed      	bhi.n	8013962 <read_submessage_list+0x12>
 8013986:	a101      	add	r1, pc, #4	@ (adr r1, 801398c <read_submessage_list+0x3c>)
 8013988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801398c:	08013beb 	.word	0x08013beb
 8013990:	08013963 	.word	0x08013963
 8013994:	08013bdb 	.word	0x08013bdb
 8013998:	08013b79 	.word	0x08013b79
 801399c:	08013b6f 	.word	0x08013b6f
 80139a0:	08013963 	.word	0x08013963
 80139a4:	08013963 	.word	0x08013963
 80139a8:	08013acf 	.word	0x08013acf
 80139ac:	08013a5f 	.word	0x08013a5f
 80139b0:	08013a1f 	.word	0x08013a1f
 80139b4:	08013963 	.word	0x08013963
 80139b8:	08013963 	.word	0x08013963
 80139bc:	08013963 	.word	0x08013963
 80139c0:	080139c5 	.word	0x080139c5
 80139c4:	a910      	add	r1, sp, #64	@ 0x40
 80139c6:	4628      	mov	r0, r5
 80139c8:	f002 fdfa 	bl	80165c0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80139cc:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 80139d0:	f1b9 0f00 	cmp.w	r9, #0
 80139d4:	f000 8116 	beq.w	8013c04 <read_submessage_list+0x2b4>
 80139d8:	f001 fcf0 	bl	80153bc <uxr_nanos>
 80139dc:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80139de:	4602      	mov	r2, r0
 80139e0:	460b      	mov	r3, r1
 80139e2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80139e4:	2100      	movs	r1, #0
 80139e6:	468c      	mov	ip, r1
 80139e8:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80139ec:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80139f0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80139f2:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80139f4:	468c      	mov	ip, r1
 80139f6:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80139fa:	46e2      	mov	sl, ip
 80139fc:	46bc      	mov	ip, r7
 80139fe:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8013a02:	fbc0 7106 	smlal	r7, r1, r0, r6
 8013a06:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8013a0a:	e9cd 7100 	strd	r7, r1, [sp]
 8013a0e:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8013a12:	9106      	str	r1, [sp, #24]
 8013a14:	4620      	mov	r0, r4
 8013a16:	47c8      	blx	r9
 8013a18:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8013a1c:	e7a1      	b.n	8013962 <read_submessage_list+0x12>
 8013a1e:	a910      	add	r1, sp, #64	@ 0x40
 8013a20:	4628      	mov	r0, r5
 8013a22:	f002 fdad 	bl	8016580 <uxr_deserialize_HEARTBEAT_Payload>
 8013a26:	2100      	movs	r1, #0
 8013a28:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8013a2c:	f001 fb58 	bl	80150e0 <uxr_stream_id_from_raw>
 8013a30:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8013a34:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013a36:	4639      	mov	r1, r7
 8013a38:	f104 0008 	add.w	r0, r4, #8
 8013a3c:	f001 fc3e 	bl	80152bc <uxr_get_input_reliable_stream>
 8013a40:	2800      	cmp	r0, #0
 8013a42:	d08e      	beq.n	8013962 <read_submessage_list+0x12>
 8013a44:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8013a48:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8013a4c:	f007 f958 	bl	801ad00 <uxr_process_heartbeat>
 8013a50:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8013a54:	463a      	mov	r2, r7
 8013a56:	4620      	mov	r0, r4
 8013a58:	f7ff fde4 	bl	8013624 <write_submessage_acknack.isra.0>
 8013a5c:	e781      	b.n	8013962 <read_submessage_list+0x12>
 8013a5e:	a910      	add	r1, sp, #64	@ 0x40
 8013a60:	4628      	mov	r0, r5
 8013a62:	f002 fd65 	bl	8016530 <uxr_deserialize_ACKNACK_Payload>
 8013a66:	2100      	movs	r1, #0
 8013a68:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8013a6c:	f001 fb38 	bl	80150e0 <uxr_stream_id_from_raw>
 8013a70:	900d      	str	r0, [sp, #52]	@ 0x34
 8013a72:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8013a76:	f104 0008 	add.w	r0, r4, #8
 8013a7a:	f001 fc0b 	bl	8015294 <uxr_get_output_reliable_stream>
 8013a7e:	4607      	mov	r7, r0
 8013a80:	2800      	cmp	r0, #0
 8013a82:	f43f af6e 	beq.w	8013962 <read_submessage_list+0x12>
 8013a86:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8013a8a:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8013a8e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8013a92:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8013a96:	b289      	uxth	r1, r1
 8013a98:	f007 fc8c 	bl	801b3b4 <uxr_process_acknack>
 8013a9c:	4638      	mov	r0, r7
 8013a9e:	f007 fc49 	bl	801b334 <uxr_begin_output_nack_buffer_it>
 8013aa2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8013aa6:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8013aaa:	e006      	b.n	8013aba <read_submessage_list+0x16a>
 8013aac:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013aae:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013ab0:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013ab4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013ab6:	6818      	ldr	r0, [r3, #0]
 8013ab8:	47c8      	blx	r9
 8013aba:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8013abe:	aa0f      	add	r2, sp, #60	@ 0x3c
 8013ac0:	4651      	mov	r1, sl
 8013ac2:	4638      	mov	r0, r7
 8013ac4:	f007 fc38 	bl	801b338 <uxr_next_reliable_nack_buffer_to_send>
 8013ac8:	2800      	cmp	r0, #0
 8013aca:	d1ef      	bne.n	8013aac <read_submessage_list+0x15c>
 8013acc:	e749      	b.n	8013962 <read_submessage_list+0x12>
 8013ace:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8013ad2:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8013ad6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8013ada:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8013ade:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8013ae2:	4651      	mov	r1, sl
 8013ae4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013ae8:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8013aec:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8013af0:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8013af4:	4628      	mov	r0, r5
 8013af6:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8013afa:	f002 fa79 	bl	8015ff0 <uxr_deserialize_BaseObjectRequest>
 8013afe:	4650      	mov	r0, sl
 8013b00:	a90f      	add	r1, sp, #60	@ 0x3c
 8013b02:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8013b06:	f000 fe1d 	bl	8014744 <uxr_parse_base_object_request>
 8013b0a:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8013b0e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013b10:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8013b14:	9110      	str	r1, [sp, #64]	@ 0x40
 8013b16:	3f04      	subs	r7, #4
 8013b18:	f009 090e 	and.w	r9, r9, #14
 8013b1c:	b2bf      	uxth	r7, r7
 8013b1e:	f1bb 0f00 	cmp.w	fp, #0
 8013b22:	d006      	beq.n	8013b32 <read_submessage_list+0x1e2>
 8013b24:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8013b28:	9300      	str	r3, [sp, #0]
 8013b2a:	4652      	mov	r2, sl
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	4620      	mov	r0, r4
 8013b30:	47d8      	blx	fp
 8013b32:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8013b34:	b16a      	cbz	r2, 8013b52 <read_submessage_list+0x202>
 8013b36:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8013b38:	2100      	movs	r1, #0
 8013b3a:	3802      	subs	r0, #2
 8013b3c:	e002      	b.n	8013b44 <read_submessage_list+0x1f4>
 8013b3e:	3101      	adds	r1, #1
 8013b40:	4291      	cmp	r1, r2
 8013b42:	d006      	beq.n	8013b52 <read_submessage_list+0x202>
 8013b44:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8013b48:	4553      	cmp	r3, sl
 8013b4a:	d1f8      	bne.n	8013b3e <read_submessage_list+0x1ee>
 8013b4c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8013b4e:	2200      	movs	r2, #0
 8013b50:	545a      	strb	r2, [r3, r1]
 8013b52:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8013b56:	9102      	str	r1, [sp, #8]
 8013b58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013b5a:	9101      	str	r1, [sp, #4]
 8013b5c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8013b5e:	9100      	str	r1, [sp, #0]
 8013b60:	464b      	mov	r3, r9
 8013b62:	463a      	mov	r2, r7
 8013b64:	4629      	mov	r1, r5
 8013b66:	4620      	mov	r0, r4
 8013b68:	f7ff fc3a 	bl	80133e0 <read_submessage_format>
 8013b6c:	e6f9      	b.n	8013962 <read_submessage_list+0x12>
 8013b6e:	4629      	mov	r1, r5
 8013b70:	4620      	mov	r0, r4
 8013b72:	f7ff fea5 	bl	80138c0 <read_submessage_info>
 8013b76:	e6f4      	b.n	8013962 <read_submessage_list+0x12>
 8013b78:	2a00      	cmp	r2, #0
 8013b7a:	d03e      	beq.n	8013bfa <read_submessage_list+0x2aa>
 8013b7c:	a910      	add	r1, sp, #64	@ 0x40
 8013b7e:	4628      	mov	r0, r5
 8013b80:	f002 fc32 	bl	80163e8 <uxr_deserialize_STATUS_Payload>
 8013b84:	a90e      	add	r1, sp, #56	@ 0x38
 8013b86:	aa0d      	add	r2, sp, #52	@ 0x34
 8013b88:	a810      	add	r0, sp, #64	@ 0x40
 8013b8a:	f000 fddb 	bl	8014744 <uxr_parse_base_object_request>
 8013b8e:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8013b92:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013b94:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8013b98:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8013b9c:	910f      	str	r1, [sp, #60]	@ 0x3c
 8013b9e:	f1ba 0f00 	cmp.w	sl, #0
 8013ba2:	d006      	beq.n	8013bb2 <read_submessage_list+0x262>
 8013ba4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8013ba8:	9300      	str	r3, [sp, #0]
 8013baa:	463a      	mov	r2, r7
 8013bac:	464b      	mov	r3, r9
 8013bae:	4620      	mov	r0, r4
 8013bb0:	47d0      	blx	sl
 8013bb2:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8013bb4:	2a00      	cmp	r2, #0
 8013bb6:	f43f aed4 	beq.w	8013962 <read_submessage_list+0x12>
 8013bba:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8013bbc:	2100      	movs	r1, #0
 8013bbe:	3802      	subs	r0, #2
 8013bc0:	e003      	b.n	8013bca <read_submessage_list+0x27a>
 8013bc2:	3101      	adds	r1, #1
 8013bc4:	4291      	cmp	r1, r2
 8013bc6:	f43f aecc 	beq.w	8013962 <read_submessage_list+0x12>
 8013bca:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8013bce:	42bb      	cmp	r3, r7
 8013bd0:	d1f7      	bne.n	8013bc2 <read_submessage_list+0x272>
 8013bd2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8013bd4:	f803 9001 	strb.w	r9, [r3, r1]
 8013bd8:	e6c3      	b.n	8013962 <read_submessage_list+0x12>
 8013bda:	2a00      	cmp	r2, #0
 8013bdc:	f47f aec1 	bne.w	8013962 <read_submessage_list+0x12>
 8013be0:	4629      	mov	r1, r5
 8013be2:	4620      	mov	r0, r4
 8013be4:	f000 fcf4 	bl	80145d0 <uxr_read_create_session_status>
 8013be8:	e6bb      	b.n	8013962 <read_submessage_list+0x12>
 8013bea:	4629      	mov	r1, r5
 8013bec:	4620      	mov	r0, r4
 8013bee:	f7ff fce3 	bl	80135b8 <read_submessage_get_info>
 8013bf2:	e6b6      	b.n	8013962 <read_submessage_list+0x12>
 8013bf4:	b017      	add	sp, #92	@ 0x5c
 8013bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bfa:	4629      	mov	r1, r5
 8013bfc:	4620      	mov	r0, r4
 8013bfe:	f000 fcf3 	bl	80145e8 <uxr_read_delete_session_status>
 8013c02:	e6ae      	b.n	8013962 <read_submessage_list+0x12>
 8013c04:	f001 fbda 	bl	80153bc <uxr_nanos>
 8013c08:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013c0a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8013c0c:	464f      	mov	r7, r9
 8013c0e:	fbc3 2706 	smlal	r2, r7, r3, r6
 8013c12:	1812      	adds	r2, r2, r0
 8013c14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013c16:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8013c18:	eb47 0101 	adc.w	r1, r7, r1
 8013c1c:	464f      	mov	r7, r9
 8013c1e:	fbc3 0706 	smlal	r0, r7, r3, r6
 8013c22:	463b      	mov	r3, r7
 8013c24:	4684      	mov	ip, r0
 8013c26:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8013c2a:	fbc7 0906 	smlal	r0, r9, r7, r6
 8013c2e:	eb1c 0c00 	adds.w	ip, ip, r0
 8013c32:	464f      	mov	r7, r9
 8013c34:	eb43 0307 	adc.w	r3, r3, r7
 8013c38:	ebb2 0c0c 	subs.w	ip, r2, ip
 8013c3c:	eb61 0303 	sbc.w	r3, r1, r3
 8013c40:	0fda      	lsrs	r2, r3, #31
 8013c42:	eb12 020c 	adds.w	r2, r2, ip
 8013c46:	f143 0300 	adc.w	r3, r3, #0
 8013c4a:	0852      	lsrs	r2, r2, #1
 8013c4c:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8013c50:	105b      	asrs	r3, r3, #1
 8013c52:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8013c56:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8013c5a:	e6dd      	b.n	8013a18 <read_submessage_list+0xc8>
 8013c5c:	3b9aca00 	.word	0x3b9aca00

08013c60 <listen_message_reliably>:
 8013c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c64:	1e0b      	subs	r3, r1, #0
 8013c66:	b09d      	sub	sp, #116	@ 0x74
 8013c68:	bfb8      	it	lt
 8013c6a:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8013c6e:	4680      	mov	r8, r0
 8013c70:	9305      	str	r3, [sp, #20]
 8013c72:	f001 fb89 	bl	8015388 <uxr_millis>
 8013c76:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8013c7a:	4681      	mov	r9, r0
 8013c7c:	2a00      	cmp	r2, #0
 8013c7e:	f000 80a1 	beq.w	8013dc4 <listen_message_reliably+0x164>
 8013c82:	2600      	movs	r6, #0
 8013c84:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013c88:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8013c8c:	9303      	str	r3, [sp, #12]
 8013c8e:	4630      	mov	r0, r6
 8013c90:	460f      	mov	r7, r1
 8013c92:	e00f      	b.n	8013cb4 <listen_message_reliably+0x54>
 8013c94:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013c98:	9903      	ldr	r1, [sp, #12]
 8013c9a:	455a      	cmp	r2, fp
 8013c9c:	f106 0601 	add.w	r6, r6, #1
 8013ca0:	eb73 0101 	sbcs.w	r1, r3, r1
 8013ca4:	b2f0      	uxtb	r0, r6
 8013ca6:	da01      	bge.n	8013cac <listen_message_reliably+0x4c>
 8013ca8:	4693      	mov	fp, r2
 8013caa:	9303      	str	r3, [sp, #12]
 8013cac:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8013cb0:	4283      	cmp	r3, r0
 8013cb2:	d960      	bls.n	8013d76 <listen_message_reliably+0x116>
 8013cb4:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8013cb8:	2102      	movs	r1, #2
 8013cba:	2201      	movs	r2, #1
 8013cbc:	f001 f9e6 	bl	801508c <uxr_stream_id>
 8013cc0:	00e4      	lsls	r4, r4, #3
 8013cc2:	f104 0520 	add.w	r5, r4, #32
 8013cc6:	4445      	add	r5, r8
 8013cc8:	4601      	mov	r1, r0
 8013cca:	463b      	mov	r3, r7
 8013ccc:	464a      	mov	r2, r9
 8013cce:	4628      	mov	r0, r5
 8013cd0:	9109      	str	r1, [sp, #36]	@ 0x24
 8013cd2:	f007 fb05 	bl	801b2e0 <uxr_update_output_stream_heartbeat_timestamp>
 8013cd6:	eb08 0304 	add.w	r3, r8, r4
 8013cda:	2800      	cmp	r0, #0
 8013cdc:	d0da      	beq.n	8013c94 <listen_message_reliably+0x34>
 8013cde:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013ce2:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8013ce6:	9304      	str	r3, [sp, #16]
 8013ce8:	4640      	mov	r0, r8
 8013cea:	f000 fd05 	bl	80146f8 <uxr_session_header_offset>
 8013cee:	3501      	adds	r5, #1
 8013cf0:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8013cf4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8013cf8:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	2211      	movs	r2, #17
 8013d00:	9000      	str	r0, [sp, #0]
 8013d02:	a90c      	add	r1, sp, #48	@ 0x30
 8013d04:	4650      	mov	r0, sl
 8013d06:	f7fb fadd 	bl	800f2c4 <ucdr_init_buffer_origin_offset>
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	2205      	movs	r2, #5
 8013d0e:	210b      	movs	r1, #11
 8013d10:	4650      	mov	r0, sl
 8013d12:	f001 faf3 	bl	80152fc <uxr_buffer_submessage_header>
 8013d16:	8968      	ldrh	r0, [r5, #10]
 8013d18:	2101      	movs	r1, #1
 8013d1a:	f007 fba3 	bl	801b464 <uxr_seq_num_add>
 8013d1e:	892b      	ldrh	r3, [r5, #8]
 8013d20:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8013d24:	4602      	mov	r2, r0
 8013d26:	9b04      	ldr	r3, [sp, #16]
 8013d28:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8013d2c:	a90a      	add	r1, sp, #40	@ 0x28
 8013d2e:	4650      	mov	r0, sl
 8013d30:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8013d34:	f002 fc10 	bl	8016558 <uxr_serialize_HEARTBEAT_Payload>
 8013d38:	2200      	movs	r2, #0
 8013d3a:	4611      	mov	r1, r2
 8013d3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013d3e:	4640      	mov	r0, r8
 8013d40:	f000 fc84 	bl	801464c <uxr_stamp_session_header>
 8013d44:	4650      	mov	r0, sl
 8013d46:	f7fb fafb 	bl	800f340 <ucdr_buffer_length>
 8013d4a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8013d4e:	4602      	mov	r2, r0
 8013d50:	a90c      	add	r1, sp, #48	@ 0x30
 8013d52:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013d56:	4444      	add	r4, r8
 8013d58:	47a8      	blx	r5
 8013d5a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8013d5e:	9903      	ldr	r1, [sp, #12]
 8013d60:	455a      	cmp	r2, fp
 8013d62:	f106 0601 	add.w	r6, r6, #1
 8013d66:	eb73 0101 	sbcs.w	r1, r3, r1
 8013d6a:	b2f0      	uxtb	r0, r6
 8013d6c:	db9c      	blt.n	8013ca8 <listen_message_reliably+0x48>
 8013d6e:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8013d72:	4283      	cmp	r3, r0
 8013d74:	d89e      	bhi.n	8013cb4 <listen_message_reliably+0x54>
 8013d76:	9a03      	ldr	r2, [sp, #12]
 8013d78:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013d7c:	429a      	cmp	r2, r3
 8013d7e:	bf08      	it	eq
 8013d80:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8013d84:	d01e      	beq.n	8013dc4 <listen_message_reliably+0x164>
 8013d86:	ebab 0309 	sub.w	r3, fp, r9
 8013d8a:	9905      	ldr	r1, [sp, #20]
 8013d8c:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	bf08      	it	eq
 8013d94:	2301      	moveq	r3, #1
 8013d96:	4299      	cmp	r1, r3
 8013d98:	bfa8      	it	ge
 8013d9a:	4619      	movge	r1, r3
 8013d9c:	6894      	ldr	r4, [r2, #8]
 8013d9e:	6810      	ldr	r0, [r2, #0]
 8013da0:	4689      	mov	r9, r1
 8013da2:	460b      	mov	r3, r1
 8013da4:	aa08      	add	r2, sp, #32
 8013da6:	a907      	add	r1, sp, #28
 8013da8:	47a0      	blx	r4
 8013daa:	b968      	cbnz	r0, 8013dc8 <listen_message_reliably+0x168>
 8013dac:	9b05      	ldr	r3, [sp, #20]
 8013dae:	eba3 0309 	sub.w	r3, r3, r9
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	9305      	str	r3, [sp, #20]
 8013db6:	f73f af5c 	bgt.w	8013c72 <listen_message_reliably+0x12>
 8013dba:	4604      	mov	r4, r0
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	b01d      	add	sp, #116	@ 0x74
 8013dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dc4:	9b05      	ldr	r3, [sp, #20]
 8013dc6:	e7e0      	b.n	8013d8a <listen_message_reliably+0x12a>
 8013dc8:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013dcc:	4604      	mov	r4, r0
 8013dce:	a80c      	add	r0, sp, #48	@ 0x30
 8013dd0:	f7fb fa8a 	bl	800f2e8 <ucdr_init_buffer>
 8013dd4:	2500      	movs	r5, #0
 8013dd6:	f10d 031a 	add.w	r3, sp, #26
 8013dda:	aa06      	add	r2, sp, #24
 8013ddc:	a90c      	add	r1, sp, #48	@ 0x30
 8013dde:	4640      	mov	r0, r8
 8013de0:	f88d 5018 	strb.w	r5, [sp, #24]
 8013de4:	f000 fc46 	bl	8014674 <uxr_read_session_header>
 8013de8:	b918      	cbnz	r0, 8013df2 <listen_message_reliably+0x192>
 8013dea:	4620      	mov	r0, r4
 8013dec:	b01d      	add	sp, #116	@ 0x74
 8013dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013df2:	4629      	mov	r1, r5
 8013df4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013df8:	f001 f972 	bl	80150e0 <uxr_stream_id_from_raw>
 8013dfc:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8013e00:	2d01      	cmp	r5, #1
 8013e02:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8013e06:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8013e0a:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013e0e:	d04b      	beq.n	8013ea8 <listen_message_reliably+0x248>
 8013e10:	2d02      	cmp	r5, #2
 8013e12:	d00f      	beq.n	8013e34 <listen_message_reliably+0x1d4>
 8013e14:	2d00      	cmp	r5, #0
 8013e16:	d1e8      	bne.n	8013dea <listen_message_reliably+0x18a>
 8013e18:	4629      	mov	r1, r5
 8013e1a:	4628      	mov	r0, r5
 8013e1c:	f001 f960 	bl	80150e0 <uxr_stream_id_from_raw>
 8013e20:	a90c      	add	r1, sp, #48	@ 0x30
 8013e22:	4602      	mov	r2, r0
 8013e24:	4640      	mov	r0, r8
 8013e26:	920a      	str	r2, [sp, #40]	@ 0x28
 8013e28:	f7ff fd92 	bl	8013950 <read_submessage_list>
 8013e2c:	4620      	mov	r0, r4
 8013e2e:	b01d      	add	sp, #116	@ 0x74
 8013e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e34:	4631      	mov	r1, r6
 8013e36:	f108 0008 	add.w	r0, r8, #8
 8013e3a:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8013e3e:	f001 fa3d 	bl	80152bc <uxr_get_input_reliable_stream>
 8013e42:	4607      	mov	r7, r0
 8013e44:	b338      	cbz	r0, 8013e96 <listen_message_reliably+0x236>
 8013e46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013e48:	9203      	str	r2, [sp, #12]
 8013e4a:	a80c      	add	r0, sp, #48	@ 0x30
 8013e4c:	f7fb fa7c 	bl	800f348 <ucdr_buffer_remaining>
 8013e50:	4603      	mov	r3, r0
 8013e52:	f10d 0019 	add.w	r0, sp, #25
 8013e56:	9000      	str	r0, [sp, #0]
 8013e58:	9a03      	ldr	r2, [sp, #12]
 8013e5a:	4651      	mov	r1, sl
 8013e5c:	4638      	mov	r0, r7
 8013e5e:	f006 fe55 	bl	801ab0c <uxr_receive_reliable_message>
 8013e62:	b1c0      	cbz	r0, 8013e96 <listen_message_reliably+0x236>
 8013e64:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013e68:	b393      	cbz	r3, 8013ed0 <listen_message_reliably+0x270>
 8013e6a:	ad14      	add	r5, sp, #80	@ 0x50
 8013e6c:	f04f 0a02 	mov.w	sl, #2
 8013e70:	e00a      	b.n	8013e88 <listen_message_reliably+0x228>
 8013e72:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8013e76:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8013e7a:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8013e7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013e80:	4629      	mov	r1, r5
 8013e82:	4640      	mov	r0, r8
 8013e84:	f7ff fd64 	bl	8013950 <read_submessage_list>
 8013e88:	2204      	movs	r2, #4
 8013e8a:	4629      	mov	r1, r5
 8013e8c:	4638      	mov	r0, r7
 8013e8e:	f006 febd 	bl	801ac0c <uxr_next_input_reliable_buffer_available>
 8013e92:	2800      	cmp	r0, #0
 8013e94:	d1ed      	bne.n	8013e72 <listen_message_reliably+0x212>
 8013e96:	4640      	mov	r0, r8
 8013e98:	4632      	mov	r2, r6
 8013e9a:	4649      	mov	r1, r9
 8013e9c:	f7ff fbc2 	bl	8013624 <write_submessage_acknack.isra.0>
 8013ea0:	4620      	mov	r0, r4
 8013ea2:	b01d      	add	sp, #116	@ 0x74
 8013ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ea8:	4631      	mov	r1, r6
 8013eaa:	f108 0008 	add.w	r0, r8, #8
 8013eae:	f001 f9fb 	bl	80152a8 <uxr_get_input_best_effort_stream>
 8013eb2:	2800      	cmp	r0, #0
 8013eb4:	d099      	beq.n	8013dea <listen_message_reliably+0x18a>
 8013eb6:	4651      	mov	r1, sl
 8013eb8:	f006 fd94 	bl	801a9e4 <uxr_receive_best_effort_message>
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	d094      	beq.n	8013dea <listen_message_reliably+0x18a>
 8013ec0:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8013ec4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013ec6:	a90c      	add	r1, sp, #48	@ 0x30
 8013ec8:	4640      	mov	r0, r8
 8013eca:	f7ff fd41 	bl	8013950 <read_submessage_list>
 8013ece:	e78c      	b.n	8013dea <listen_message_reliably+0x18a>
 8013ed0:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8013ed4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013ed6:	a90c      	add	r1, sp, #48	@ 0x30
 8013ed8:	4640      	mov	r0, r8
 8013eda:	f7ff fd39 	bl	8013950 <read_submessage_list>
 8013ede:	e7c4      	b.n	8013e6a <listen_message_reliably+0x20a>

08013ee0 <uxr_run_session_timeout>:
 8013ee0:	b570      	push	{r4, r5, r6, lr}
 8013ee2:	4604      	mov	r4, r0
 8013ee4:	460d      	mov	r5, r1
 8013ee6:	f001 fa4f 	bl	8015388 <uxr_millis>
 8013eea:	4606      	mov	r6, r0
 8013eec:	4620      	mov	r0, r4
 8013eee:	f7ff fc71 	bl	80137d4 <uxr_flash_output_streams>
 8013ef2:	4629      	mov	r1, r5
 8013ef4:	4620      	mov	r0, r4
 8013ef6:	f7ff feb3 	bl	8013c60 <listen_message_reliably>
 8013efa:	f001 fa45 	bl	8015388 <uxr_millis>
 8013efe:	1b83      	subs	r3, r0, r6
 8013f00:	1ae9      	subs	r1, r5, r3
 8013f02:	2900      	cmp	r1, #0
 8013f04:	dcf6      	bgt.n	8013ef4 <uxr_run_session_timeout+0x14>
 8013f06:	f104 0008 	add.w	r0, r4, #8
 8013f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f0e:	f001 b9df 	b.w	80152d0 <uxr_output_streams_confirmed>
 8013f12:	bf00      	nop

08013f14 <uxr_run_session_until_data>:
 8013f14:	b570      	push	{r4, r5, r6, lr}
 8013f16:	4604      	mov	r4, r0
 8013f18:	460d      	mov	r5, r1
 8013f1a:	f001 fa35 	bl	8015388 <uxr_millis>
 8013f1e:	4606      	mov	r6, r0
 8013f20:	4620      	mov	r0, r4
 8013f22:	f7ff fc57 	bl	80137d4 <uxr_flash_output_streams>
 8013f26:	2300      	movs	r3, #0
 8013f28:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8013f2c:	4629      	mov	r1, r5
 8013f2e:	e005      	b.n	8013f3c <uxr_run_session_until_data+0x28>
 8013f30:	f001 fa2a 	bl	8015388 <uxr_millis>
 8013f34:	1b83      	subs	r3, r0, r6
 8013f36:	1ae9      	subs	r1, r5, r3
 8013f38:	2900      	cmp	r1, #0
 8013f3a:	dd07      	ble.n	8013f4c <uxr_run_session_until_data+0x38>
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	f7ff fe8f 	bl	8013c60 <listen_message_reliably>
 8013f42:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8013f46:	2800      	cmp	r0, #0
 8013f48:	d0f2      	beq.n	8013f30 <uxr_run_session_until_data+0x1c>
 8013f4a:	bd70      	pop	{r4, r5, r6, pc}
 8013f4c:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8013f50:	bd70      	pop	{r4, r5, r6, pc}
 8013f52:	bf00      	nop

08013f54 <uxr_run_session_until_confirm_delivery>:
 8013f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f58:	4606      	mov	r6, r0
 8013f5a:	460d      	mov	r5, r1
 8013f5c:	f001 fa14 	bl	8015388 <uxr_millis>
 8013f60:	4607      	mov	r7, r0
 8013f62:	4630      	mov	r0, r6
 8013f64:	f7ff fc36 	bl	80137d4 <uxr_flash_output_streams>
 8013f68:	2d00      	cmp	r5, #0
 8013f6a:	f106 0808 	add.w	r8, r6, #8
 8013f6e:	bfa8      	it	ge
 8013f70:	462c      	movge	r4, r5
 8013f72:	da07      	bge.n	8013f84 <uxr_run_session_until_confirm_delivery+0x30>
 8013f74:	e00e      	b.n	8013f94 <uxr_run_session_until_confirm_delivery+0x40>
 8013f76:	f7ff fe73 	bl	8013c60 <listen_message_reliably>
 8013f7a:	f001 fa05 	bl	8015388 <uxr_millis>
 8013f7e:	1bc3      	subs	r3, r0, r7
 8013f80:	1aec      	subs	r4, r5, r3
 8013f82:	d407      	bmi.n	8013f94 <uxr_run_session_until_confirm_delivery+0x40>
 8013f84:	4640      	mov	r0, r8
 8013f86:	f001 f9a3 	bl	80152d0 <uxr_output_streams_confirmed>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	4621      	mov	r1, r4
 8013f8e:	4630      	mov	r0, r6
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d0f0      	beq.n	8013f76 <uxr_run_session_until_confirm_delivery+0x22>
 8013f94:	4640      	mov	r0, r8
 8013f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f9a:	f001 b999 	b.w	80152d0 <uxr_output_streams_confirmed>
 8013f9e:	bf00      	nop

08013fa0 <uxr_run_session_until_all_status>:
 8013fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fa4:	9c08      	ldr	r4, [sp, #32]
 8013fa6:	4606      	mov	r6, r0
 8013fa8:	460f      	mov	r7, r1
 8013faa:	4691      	mov	r9, r2
 8013fac:	461d      	mov	r5, r3
 8013fae:	f7ff fc11 	bl	80137d4 <uxr_flash_output_streams>
 8013fb2:	b124      	cbz	r4, 8013fbe <uxr_run_session_until_all_status+0x1e>
 8013fb4:	4622      	mov	r2, r4
 8013fb6:	21ff      	movs	r1, #255	@ 0xff
 8013fb8:	4628      	mov	r0, r5
 8013fba:	f008 fb6b 	bl	801c694 <memset>
 8013fbe:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8013fc2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8013fc4:	f001 f9e0 	bl	8015388 <uxr_millis>
 8013fc8:	3d01      	subs	r5, #1
 8013fca:	f1a9 0902 	sub.w	r9, r9, #2
 8013fce:	4680      	mov	r8, r0
 8013fd0:	4639      	mov	r1, r7
 8013fd2:	4630      	mov	r0, r6
 8013fd4:	f7ff fe44 	bl	8013c60 <listen_message_reliably>
 8013fd8:	f001 f9d6 	bl	8015388 <uxr_millis>
 8013fdc:	eba0 0008 	sub.w	r0, r0, r8
 8013fe0:	1a39      	subs	r1, r7, r0
 8013fe2:	b344      	cbz	r4, 8014036 <uxr_run_session_until_all_status+0x96>
 8013fe4:	4628      	mov	r0, r5
 8013fe6:	46ac      	mov	ip, r5
 8013fe8:	2301      	movs	r3, #1
 8013fea:	e002      	b.n	8013ff2 <uxr_run_session_until_all_status+0x52>
 8013fec:	42a3      	cmp	r3, r4
 8013fee:	d20d      	bcs.n	801400c <uxr_run_session_until_all_status+0x6c>
 8013ff0:	3301      	adds	r3, #1
 8013ff2:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8013ff6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8013ffa:	d1f7      	bne.n	8013fec <uxr_run_session_until_all_status+0x4c>
 8013ffc:	42a3      	cmp	r3, r4
 8013ffe:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8014002:	d213      	bcs.n	801402c <uxr_run_session_until_all_status+0x8c>
 8014004:	2a00      	cmp	r2, #0
 8014006:	d0f3      	beq.n	8013ff0 <uxr_run_session_until_all_status+0x50>
 8014008:	2900      	cmp	r1, #0
 801400a:	dce2      	bgt.n	8013fd2 <uxr_run_session_until_all_status+0x32>
 801400c:	2300      	movs	r3, #0
 801400e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8014010:	442c      	add	r4, r5
 8014012:	e001      	b.n	8014018 <uxr_run_session_until_all_status+0x78>
 8014014:	2b01      	cmp	r3, #1
 8014016:	d812      	bhi.n	801403e <uxr_run_session_until_all_status+0x9e>
 8014018:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801401c:	4284      	cmp	r4, r0
 801401e:	d1f9      	bne.n	8014014 <uxr_run_session_until_all_status+0x74>
 8014020:	2b01      	cmp	r3, #1
 8014022:	bf8c      	ite	hi
 8014024:	2000      	movhi	r0, #0
 8014026:	2001      	movls	r0, #1
 8014028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801402c:	2900      	cmp	r1, #0
 801402e:	dded      	ble.n	801400c <uxr_run_session_until_all_status+0x6c>
 8014030:	2a00      	cmp	r2, #0
 8014032:	d1ce      	bne.n	8013fd2 <uxr_run_session_until_all_status+0x32>
 8014034:	e7ea      	b.n	801400c <uxr_run_session_until_all_status+0x6c>
 8014036:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8014038:	2001      	movs	r0, #1
 801403a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801403e:	2000      	movs	r0, #0
 8014040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014044:	0000      	movs	r0, r0
	...

08014048 <uxr_sync_session>:
 8014048:	b5f0      	push	{r4, r5, r6, r7, lr}
 801404a:	b093      	sub	sp, #76	@ 0x4c
 801404c:	4604      	mov	r4, r0
 801404e:	460d      	mov	r5, r1
 8014050:	f000 fb52 	bl	80146f8 <uxr_session_header_offset>
 8014054:	2214      	movs	r2, #20
 8014056:	eb0d 0102 	add.w	r1, sp, r2
 801405a:	9000      	str	r0, [sp, #0]
 801405c:	2300      	movs	r3, #0
 801405e:	a80a      	add	r0, sp, #40	@ 0x28
 8014060:	f7fb f930 	bl	800f2c4 <ucdr_init_buffer_origin_offset>
 8014064:	2300      	movs	r3, #0
 8014066:	2208      	movs	r2, #8
 8014068:	210e      	movs	r1, #14
 801406a:	a80a      	add	r0, sp, #40	@ 0x28
 801406c:	f001 f946 	bl	80152fc <uxr_buffer_submessage_header>
 8014070:	f001 f9a4 	bl	80153bc <uxr_nanos>
 8014074:	a31c      	add	r3, pc, #112	@ (adr r3, 80140e8 <uxr_sync_session+0xa0>)
 8014076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801407a:	460e      	mov	r6, r1
 801407c:	4607      	mov	r7, r0
 801407e:	f7ec fda3 	bl	8000bc8 <__aeabi_ldivmod>
 8014082:	4631      	mov	r1, r6
 8014084:	9003      	str	r0, [sp, #12]
 8014086:	a318      	add	r3, pc, #96	@ (adr r3, 80140e8 <uxr_sync_session+0xa0>)
 8014088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801408c:	4638      	mov	r0, r7
 801408e:	f7ec fd9b 	bl	8000bc8 <__aeabi_ldivmod>
 8014092:	a903      	add	r1, sp, #12
 8014094:	a80a      	add	r0, sp, #40	@ 0x28
 8014096:	9204      	str	r2, [sp, #16]
 8014098:	f002 fa84 	bl	80165a4 <uxr_serialize_TIMESTAMP_Payload>
 801409c:	2200      	movs	r2, #0
 801409e:	4611      	mov	r1, r2
 80140a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80140a2:	4620      	mov	r0, r4
 80140a4:	f000 fad2 	bl	801464c <uxr_stamp_session_header>
 80140a8:	a80a      	add	r0, sp, #40	@ 0x28
 80140aa:	f7fb f949 	bl	800f340 <ucdr_buffer_length>
 80140ae:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80140b0:	4602      	mov	r2, r0
 80140b2:	a905      	add	r1, sp, #20
 80140b4:	e9d3 0600 	ldrd	r0, r6, [r3]
 80140b8:	47b0      	blx	r6
 80140ba:	f001 f965 	bl	8015388 <uxr_millis>
 80140be:	2300      	movs	r3, #0
 80140c0:	4606      	mov	r6, r0
 80140c2:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80140c6:	4629      	mov	r1, r5
 80140c8:	e000      	b.n	80140cc <uxr_sync_session+0x84>
 80140ca:	b950      	cbnz	r0, 80140e2 <uxr_sync_session+0x9a>
 80140cc:	4620      	mov	r0, r4
 80140ce:	f7ff fdc7 	bl	8013c60 <listen_message_reliably>
 80140d2:	f001 f959 	bl	8015388 <uxr_millis>
 80140d6:	1b83      	subs	r3, r0, r6
 80140d8:	1ae9      	subs	r1, r5, r3
 80140da:	2900      	cmp	r1, #0
 80140dc:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 80140e0:	dcf3      	bgt.n	80140ca <uxr_sync_session+0x82>
 80140e2:	b013      	add	sp, #76	@ 0x4c
 80140e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140e6:	bf00      	nop
 80140e8:	3b9aca00 	.word	0x3b9aca00
 80140ec:	00000000 	.word	0x00000000

080140f0 <wait_session_status>:
 80140f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140f4:	4604      	mov	r4, r0
 80140f6:	b09d      	sub	sp, #116	@ 0x74
 80140f8:	20ff      	movs	r0, #255	@ 0xff
 80140fa:	7160      	strb	r0, [r4, #5]
 80140fc:	9303      	str	r3, [sp, #12]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	f000 80b6 	beq.w	8014270 <wait_session_status+0x180>
 8014104:	468a      	mov	sl, r1
 8014106:	4691      	mov	r9, r2
 8014108:	f04f 0b00 	mov.w	fp, #0
 801410c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801410e:	464a      	mov	r2, r9
 8014110:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014114:	4651      	mov	r1, sl
 8014116:	47a8      	blx	r5
 8014118:	f001 f936 	bl	8015388 <uxr_millis>
 801411c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014120:	4605      	mov	r5, r0
 8014122:	e009      	b.n	8014138 <wait_session_status+0x48>
 8014124:	f001 f930 	bl	8015388 <uxr_millis>
 8014128:	1b40      	subs	r0, r0, r5
 801412a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801412e:	2b00      	cmp	r3, #0
 8014130:	dd40      	ble.n	80141b4 <wait_session_status+0xc4>
 8014132:	7960      	ldrb	r0, [r4, #5]
 8014134:	28ff      	cmp	r0, #255	@ 0xff
 8014136:	d145      	bne.n	80141c4 <wait_session_status+0xd4>
 8014138:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801413a:	a908      	add	r1, sp, #32
 801413c:	6896      	ldr	r6, [r2, #8]
 801413e:	6810      	ldr	r0, [r2, #0]
 8014140:	aa09      	add	r2, sp, #36	@ 0x24
 8014142:	47b0      	blx	r6
 8014144:	2800      	cmp	r0, #0
 8014146:	d0ed      	beq.n	8014124 <wait_session_status+0x34>
 8014148:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801414c:	a80c      	add	r0, sp, #48	@ 0x30
 801414e:	f7fb f8cb 	bl	800f2e8 <ucdr_init_buffer>
 8014152:	2600      	movs	r6, #0
 8014154:	f10d 031e 	add.w	r3, sp, #30
 8014158:	aa07      	add	r2, sp, #28
 801415a:	a90c      	add	r1, sp, #48	@ 0x30
 801415c:	4620      	mov	r0, r4
 801415e:	f88d 601c 	strb.w	r6, [sp, #28]
 8014162:	f000 fa87 	bl	8014674 <uxr_read_session_header>
 8014166:	2800      	cmp	r0, #0
 8014168:	d0dc      	beq.n	8014124 <wait_session_status+0x34>
 801416a:	4631      	mov	r1, r6
 801416c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8014170:	f000 ffb6 	bl	80150e0 <uxr_stream_id_from_raw>
 8014174:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8014178:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801417c:	9302      	str	r3, [sp, #8]
 801417e:	2f01      	cmp	r7, #1
 8014180:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8014184:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8014188:	d05c      	beq.n	8014244 <wait_session_status+0x154>
 801418a:	2f02      	cmp	r7, #2
 801418c:	d020      	beq.n	80141d0 <wait_session_status+0xe0>
 801418e:	2f00      	cmp	r7, #0
 8014190:	d1c8      	bne.n	8014124 <wait_session_status+0x34>
 8014192:	4639      	mov	r1, r7
 8014194:	4638      	mov	r0, r7
 8014196:	f000 ffa3 	bl	80150e0 <uxr_stream_id_from_raw>
 801419a:	a90c      	add	r1, sp, #48	@ 0x30
 801419c:	4602      	mov	r2, r0
 801419e:	900b      	str	r0, [sp, #44]	@ 0x2c
 80141a0:	4620      	mov	r0, r4
 80141a2:	f7ff fbd5 	bl	8013950 <read_submessage_list>
 80141a6:	f001 f8ef 	bl	8015388 <uxr_millis>
 80141aa:	1b40      	subs	r0, r0, r5
 80141ac:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	dcbe      	bgt.n	8014132 <wait_session_status+0x42>
 80141b4:	9b03      	ldr	r3, [sp, #12]
 80141b6:	7960      	ldrb	r0, [r4, #5]
 80141b8:	f10b 0b01 	add.w	fp, fp, #1
 80141bc:	455b      	cmp	r3, fp
 80141be:	d001      	beq.n	80141c4 <wait_session_status+0xd4>
 80141c0:	28ff      	cmp	r0, #255	@ 0xff
 80141c2:	d0a3      	beq.n	801410c <wait_session_status+0x1c>
 80141c4:	38ff      	subs	r0, #255	@ 0xff
 80141c6:	bf18      	it	ne
 80141c8:	2001      	movne	r0, #1
 80141ca:	b01d      	add	sp, #116	@ 0x74
 80141cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141d0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80141d4:	9304      	str	r3, [sp, #16]
 80141d6:	4631      	mov	r1, r6
 80141d8:	f104 0008 	add.w	r0, r4, #8
 80141dc:	f001 f86e 	bl	80152bc <uxr_get_input_reliable_stream>
 80141e0:	4680      	mov	r8, r0
 80141e2:	b348      	cbz	r0, 8014238 <wait_session_status+0x148>
 80141e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80141e6:	9205      	str	r2, [sp, #20]
 80141e8:	a80c      	add	r0, sp, #48	@ 0x30
 80141ea:	f7fb f8ad 	bl	800f348 <ucdr_buffer_remaining>
 80141ee:	4603      	mov	r3, r0
 80141f0:	f10d 001d 	add.w	r0, sp, #29
 80141f4:	9000      	str	r0, [sp, #0]
 80141f6:	9a05      	ldr	r2, [sp, #20]
 80141f8:	9902      	ldr	r1, [sp, #8]
 80141fa:	4640      	mov	r0, r8
 80141fc:	f006 fc86 	bl	801ab0c <uxr_receive_reliable_message>
 8014200:	b1d0      	cbz	r0, 8014238 <wait_session_status+0x148>
 8014202:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d03a      	beq.n	8014280 <wait_session_status+0x190>
 801420a:	9f04      	ldr	r7, [sp, #16]
 801420c:	e00a      	b.n	8014224 <wait_session_status+0x134>
 801420e:	f04f 0302 	mov.w	r3, #2
 8014212:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8014216:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801421a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801421e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014220:	f7ff fb96 	bl	8013950 <read_submessage_list>
 8014224:	a914      	add	r1, sp, #80	@ 0x50
 8014226:	2204      	movs	r2, #4
 8014228:	4640      	mov	r0, r8
 801422a:	f006 fcef 	bl	801ac0c <uxr_next_input_reliable_buffer_available>
 801422e:	4603      	mov	r3, r0
 8014230:	a914      	add	r1, sp, #80	@ 0x50
 8014232:	4620      	mov	r0, r4
 8014234:	2b00      	cmp	r3, #0
 8014236:	d1ea      	bne.n	801420e <wait_session_status+0x11e>
 8014238:	9904      	ldr	r1, [sp, #16]
 801423a:	4632      	mov	r2, r6
 801423c:	4620      	mov	r0, r4
 801423e:	f7ff f9f1 	bl	8013624 <write_submessage_acknack.isra.0>
 8014242:	e76f      	b.n	8014124 <wait_session_status+0x34>
 8014244:	4631      	mov	r1, r6
 8014246:	f104 0008 	add.w	r0, r4, #8
 801424a:	f001 f82d 	bl	80152a8 <uxr_get_input_best_effort_stream>
 801424e:	2800      	cmp	r0, #0
 8014250:	f43f af68 	beq.w	8014124 <wait_session_status+0x34>
 8014254:	9902      	ldr	r1, [sp, #8]
 8014256:	f006 fbc5 	bl	801a9e4 <uxr_receive_best_effort_message>
 801425a:	2800      	cmp	r0, #0
 801425c:	f43f af62 	beq.w	8014124 <wait_session_status+0x34>
 8014260:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8014264:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014266:	a90c      	add	r1, sp, #48	@ 0x30
 8014268:	4620      	mov	r0, r4
 801426a:	f7ff fb71 	bl	8013950 <read_submessage_list>
 801426e:	e759      	b.n	8014124 <wait_session_status+0x34>
 8014270:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014272:	e9d3 0400 	ldrd	r0, r4, [r3]
 8014276:	47a0      	blx	r4
 8014278:	2001      	movs	r0, #1
 801427a:	b01d      	add	sp, #116	@ 0x74
 801427c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014280:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8014284:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014286:	a90c      	add	r1, sp, #48	@ 0x30
 8014288:	4620      	mov	r0, r4
 801428a:	f7ff fb61 	bl	8013950 <read_submessage_list>
 801428e:	e7bc      	b.n	801420a <wait_session_status+0x11a>

08014290 <uxr_delete_session_retries>:
 8014290:	b530      	push	{r4, r5, lr}
 8014292:	b08f      	sub	sp, #60	@ 0x3c
 8014294:	4604      	mov	r4, r0
 8014296:	460d      	mov	r5, r1
 8014298:	f000 fa2e 	bl	80146f8 <uxr_session_header_offset>
 801429c:	2300      	movs	r3, #0
 801429e:	2210      	movs	r2, #16
 80142a0:	9000      	str	r0, [sp, #0]
 80142a2:	a902      	add	r1, sp, #8
 80142a4:	a806      	add	r0, sp, #24
 80142a6:	f7fb f80d 	bl	800f2c4 <ucdr_init_buffer_origin_offset>
 80142aa:	a906      	add	r1, sp, #24
 80142ac:	4620      	mov	r0, r4
 80142ae:	f000 f973 	bl	8014598 <uxr_buffer_delete_session>
 80142b2:	2200      	movs	r2, #0
 80142b4:	4611      	mov	r1, r2
 80142b6:	9b06      	ldr	r3, [sp, #24]
 80142b8:	4620      	mov	r0, r4
 80142ba:	f000 f9c7 	bl	801464c <uxr_stamp_session_header>
 80142be:	a806      	add	r0, sp, #24
 80142c0:	f7fb f83e 	bl	800f340 <ucdr_buffer_length>
 80142c4:	462b      	mov	r3, r5
 80142c6:	4602      	mov	r2, r0
 80142c8:	a902      	add	r1, sp, #8
 80142ca:	4620      	mov	r0, r4
 80142cc:	f7ff ff10 	bl	80140f0 <wait_session_status>
 80142d0:	b118      	cbz	r0, 80142da <uxr_delete_session_retries+0x4a>
 80142d2:	7960      	ldrb	r0, [r4, #5]
 80142d4:	fab0 f080 	clz	r0, r0
 80142d8:	0940      	lsrs	r0, r0, #5
 80142da:	b00f      	add	sp, #60	@ 0x3c
 80142dc:	bd30      	pop	{r4, r5, pc}
 80142de:	bf00      	nop

080142e0 <uxr_create_session>:
 80142e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142e4:	f100 0b08 	add.w	fp, r0, #8
 80142e8:	b0ab      	sub	sp, #172	@ 0xac
 80142ea:	4604      	mov	r4, r0
 80142ec:	4658      	mov	r0, fp
 80142ee:	f000 ff2b 	bl	8015148 <uxr_reset_stream_storage>
 80142f2:	4620      	mov	r0, r4
 80142f4:	f000 fa00 	bl	80146f8 <uxr_session_header_offset>
 80142f8:	2300      	movs	r3, #0
 80142fa:	9000      	str	r0, [sp, #0]
 80142fc:	221c      	movs	r2, #28
 80142fe:	a90b      	add	r1, sp, #44	@ 0x2c
 8014300:	a812      	add	r0, sp, #72	@ 0x48
 8014302:	f7fa ffdf 	bl	800f2c4 <ucdr_init_buffer_origin_offset>
 8014306:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014308:	8a1a      	ldrh	r2, [r3, #16]
 801430a:	3a04      	subs	r2, #4
 801430c:	b292      	uxth	r2, r2
 801430e:	a912      	add	r1, sp, #72	@ 0x48
 8014310:	4620      	mov	r0, r4
 8014312:	f000 f917 	bl	8014544 <uxr_buffer_create_session>
 8014316:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014318:	4620      	mov	r0, r4
 801431a:	f000 f983 	bl	8014624 <uxr_stamp_create_session_header>
 801431e:	a812      	add	r0, sp, #72	@ 0x48
 8014320:	f7fb f80e 	bl	800f340 <ucdr_buffer_length>
 8014324:	23ff      	movs	r3, #255	@ 0xff
 8014326:	7163      	strb	r3, [r4, #5]
 8014328:	230a      	movs	r3, #10
 801432a:	46da      	mov	sl, fp
 801432c:	9303      	str	r3, [sp, #12]
 801432e:	4683      	mov	fp, r0
 8014330:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014332:	465a      	mov	r2, fp
 8014334:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014338:	a90b      	add	r1, sp, #44	@ 0x2c
 801433a:	47a8      	blx	r5
 801433c:	f001 f824 	bl	8015388 <uxr_millis>
 8014340:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014344:	4605      	mov	r5, r0
 8014346:	e009      	b.n	801435c <uxr_create_session+0x7c>
 8014348:	f001 f81e 	bl	8015388 <uxr_millis>
 801434c:	1b40      	subs	r0, r0, r5
 801434e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8014352:	2b00      	cmp	r3, #0
 8014354:	7962      	ldrb	r2, [r4, #5]
 8014356:	dd38      	ble.n	80143ca <uxr_create_session+0xea>
 8014358:	2aff      	cmp	r2, #255	@ 0xff
 801435a:	d13c      	bne.n	80143d6 <uxr_create_session+0xf6>
 801435c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801435e:	a907      	add	r1, sp, #28
 8014360:	6896      	ldr	r6, [r2, #8]
 8014362:	6810      	ldr	r0, [r2, #0]
 8014364:	aa08      	add	r2, sp, #32
 8014366:	47b0      	blx	r6
 8014368:	2800      	cmp	r0, #0
 801436a:	d0ed      	beq.n	8014348 <uxr_create_session+0x68>
 801436c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8014370:	a81a      	add	r0, sp, #104	@ 0x68
 8014372:	f7fa ffb9 	bl	800f2e8 <ucdr_init_buffer>
 8014376:	2600      	movs	r6, #0
 8014378:	f10d 031a 	add.w	r3, sp, #26
 801437c:	aa06      	add	r2, sp, #24
 801437e:	a91a      	add	r1, sp, #104	@ 0x68
 8014380:	4620      	mov	r0, r4
 8014382:	f88d 6018 	strb.w	r6, [sp, #24]
 8014386:	f000 f975 	bl	8014674 <uxr_read_session_header>
 801438a:	2800      	cmp	r0, #0
 801438c:	d0dc      	beq.n	8014348 <uxr_create_session+0x68>
 801438e:	4631      	mov	r1, r6
 8014390:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014394:	f000 fea4 	bl	80150e0 <uxr_stream_id_from_raw>
 8014398:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801439c:	2e01      	cmp	r6, #1
 801439e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80143a2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80143a6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80143aa:	d053      	beq.n	8014454 <uxr_create_session+0x174>
 80143ac:	2e02      	cmp	r6, #2
 80143ae:	d018      	beq.n	80143e2 <uxr_create_session+0x102>
 80143b0:	2e00      	cmp	r6, #0
 80143b2:	d1c9      	bne.n	8014348 <uxr_create_session+0x68>
 80143b4:	4631      	mov	r1, r6
 80143b6:	4630      	mov	r0, r6
 80143b8:	f000 fe92 	bl	80150e0 <uxr_stream_id_from_raw>
 80143bc:	a91a      	add	r1, sp, #104	@ 0x68
 80143be:	4602      	mov	r2, r0
 80143c0:	900a      	str	r0, [sp, #40]	@ 0x28
 80143c2:	4620      	mov	r0, r4
 80143c4:	f7ff fac4 	bl	8013950 <read_submessage_list>
 80143c8:	e7be      	b.n	8014348 <uxr_create_session+0x68>
 80143ca:	9b03      	ldr	r3, [sp, #12]
 80143cc:	3b01      	subs	r3, #1
 80143ce:	9303      	str	r3, [sp, #12]
 80143d0:	d001      	beq.n	80143d6 <uxr_create_session+0xf6>
 80143d2:	2aff      	cmp	r2, #255	@ 0xff
 80143d4:	d0ac      	beq.n	8014330 <uxr_create_session+0x50>
 80143d6:	2a00      	cmp	r2, #0
 80143d8:	d051      	beq.n	801447e <uxr_create_session+0x19e>
 80143da:	2000      	movs	r0, #0
 80143dc:	b02b      	add	sp, #172	@ 0xac
 80143de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143e2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80143e6:	9304      	str	r3, [sp, #16]
 80143e8:	4639      	mov	r1, r7
 80143ea:	4650      	mov	r0, sl
 80143ec:	f000 ff66 	bl	80152bc <uxr_get_input_reliable_stream>
 80143f0:	4680      	mov	r8, r0
 80143f2:	b348      	cbz	r0, 8014448 <uxr_create_session+0x168>
 80143f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80143f6:	9205      	str	r2, [sp, #20]
 80143f8:	a81a      	add	r0, sp, #104	@ 0x68
 80143fa:	f7fa ffa5 	bl	800f348 <ucdr_buffer_remaining>
 80143fe:	4603      	mov	r3, r0
 8014400:	f10d 0019 	add.w	r0, sp, #25
 8014404:	9000      	str	r0, [sp, #0]
 8014406:	9a05      	ldr	r2, [sp, #20]
 8014408:	4649      	mov	r1, r9
 801440a:	4640      	mov	r0, r8
 801440c:	f006 fb7e 	bl	801ab0c <uxr_receive_reliable_message>
 8014410:	b1d0      	cbz	r0, 8014448 <uxr_create_session+0x168>
 8014412:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d038      	beq.n	801448c <uxr_create_session+0x1ac>
 801441a:	9e04      	ldr	r6, [sp, #16]
 801441c:	e00a      	b.n	8014434 <uxr_create_session+0x154>
 801441e:	f04f 0302 	mov.w	r3, #2
 8014422:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8014426:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 801442a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801442e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014430:	f7ff fa8e 	bl	8013950 <read_submessage_list>
 8014434:	a922      	add	r1, sp, #136	@ 0x88
 8014436:	2204      	movs	r2, #4
 8014438:	4640      	mov	r0, r8
 801443a:	f006 fbe7 	bl	801ac0c <uxr_next_input_reliable_buffer_available>
 801443e:	4603      	mov	r3, r0
 8014440:	a922      	add	r1, sp, #136	@ 0x88
 8014442:	4620      	mov	r0, r4
 8014444:	2b00      	cmp	r3, #0
 8014446:	d1ea      	bne.n	801441e <uxr_create_session+0x13e>
 8014448:	9904      	ldr	r1, [sp, #16]
 801444a:	463a      	mov	r2, r7
 801444c:	4620      	mov	r0, r4
 801444e:	f7ff f8e9 	bl	8013624 <write_submessage_acknack.isra.0>
 8014452:	e779      	b.n	8014348 <uxr_create_session+0x68>
 8014454:	4639      	mov	r1, r7
 8014456:	4650      	mov	r0, sl
 8014458:	f000 ff26 	bl	80152a8 <uxr_get_input_best_effort_stream>
 801445c:	2800      	cmp	r0, #0
 801445e:	f43f af73 	beq.w	8014348 <uxr_create_session+0x68>
 8014462:	4649      	mov	r1, r9
 8014464:	f006 fabe 	bl	801a9e4 <uxr_receive_best_effort_message>
 8014468:	2800      	cmp	r0, #0
 801446a:	f43f af6d 	beq.w	8014348 <uxr_create_session+0x68>
 801446e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8014472:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014474:	a91a      	add	r1, sp, #104	@ 0x68
 8014476:	4620      	mov	r0, r4
 8014478:	f7ff fa6a 	bl	8013950 <read_submessage_list>
 801447c:	e764      	b.n	8014348 <uxr_create_session+0x68>
 801447e:	4650      	mov	r0, sl
 8014480:	f000 fe62 	bl	8015148 <uxr_reset_stream_storage>
 8014484:	2001      	movs	r0, #1
 8014486:	b02b      	add	sp, #172	@ 0xac
 8014488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801448c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8014490:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014492:	a91a      	add	r1, sp, #104	@ 0x68
 8014494:	4620      	mov	r0, r4
 8014496:	f7ff fa5b 	bl	8013950 <read_submessage_list>
 801449a:	e7be      	b.n	801441a <uxr_create_session+0x13a>

0801449c <uxr_prepare_stream_to_write_submessage>:
 801449c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144a0:	b082      	sub	sp, #8
 80144a2:	4682      	mov	sl, r0
 80144a4:	4610      	mov	r0, r2
 80144a6:	4615      	mov	r5, r2
 80144a8:	461e      	mov	r6, r3
 80144aa:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80144ae:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80144b2:	9101      	str	r1, [sp, #4]
 80144b4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80144b8:	f000 ff60 	bl	801537c <uxr_submessage_padding>
 80144bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80144c0:	f105 0904 	add.w	r9, r5, #4
 80144c4:	2b01      	cmp	r3, #1
 80144c6:	4481      	add	r9, r0
 80144c8:	d01d      	beq.n	8014506 <uxr_prepare_stream_to_write_submessage+0x6a>
 80144ca:	2b02      	cmp	r3, #2
 80144cc:	d116      	bne.n	80144fc <uxr_prepare_stream_to_write_submessage+0x60>
 80144ce:	4621      	mov	r1, r4
 80144d0:	f10a 0008 	add.w	r0, sl, #8
 80144d4:	f000 fede 	bl	8015294 <uxr_get_output_reliable_stream>
 80144d8:	4604      	mov	r4, r0
 80144da:	b158      	cbz	r0, 80144f4 <uxr_prepare_stream_to_write_submessage+0x58>
 80144dc:	4649      	mov	r1, r9
 80144de:	4632      	mov	r2, r6
 80144e0:	f006 fd50 	bl	801af84 <uxr_prepare_reliable_buffer_to_write>
 80144e4:	4604      	mov	r4, r0
 80144e6:	b12c      	cbz	r4, 80144f4 <uxr_prepare_stream_to_write_submessage+0x58>
 80144e8:	4643      	mov	r3, r8
 80144ea:	b2aa      	uxth	r2, r5
 80144ec:	4639      	mov	r1, r7
 80144ee:	4630      	mov	r0, r6
 80144f0:	f000 ff04 	bl	80152fc <uxr_buffer_submessage_header>
 80144f4:	4620      	mov	r0, r4
 80144f6:	b002      	add	sp, #8
 80144f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144fc:	2400      	movs	r4, #0
 80144fe:	4620      	mov	r0, r4
 8014500:	b002      	add	sp, #8
 8014502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014506:	4621      	mov	r1, r4
 8014508:	f10a 0008 	add.w	r0, sl, #8
 801450c:	f000 feba 	bl	8015284 <uxr_get_output_best_effort_stream>
 8014510:	4604      	mov	r4, r0
 8014512:	2800      	cmp	r0, #0
 8014514:	d0ee      	beq.n	80144f4 <uxr_prepare_stream_to_write_submessage+0x58>
 8014516:	4649      	mov	r1, r9
 8014518:	4632      	mov	r2, r6
 801451a:	f006 fc63 	bl	801ade4 <uxr_prepare_best_effort_buffer_to_write>
 801451e:	4604      	mov	r4, r0
 8014520:	e7e1      	b.n	80144e6 <uxr_prepare_stream_to_write_submessage+0x4a>
 8014522:	bf00      	nop

08014524 <uxr_init_session_info>:
 8014524:	0e13      	lsrs	r3, r2, #24
 8014526:	7043      	strb	r3, [r0, #1]
 8014528:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801452c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014530:	7001      	strb	r1, [r0, #0]
 8014532:	70c3      	strb	r3, [r0, #3]
 8014534:	2109      	movs	r1, #9
 8014536:	23ff      	movs	r3, #255	@ 0xff
 8014538:	f880 c002 	strb.w	ip, [r0, #2]
 801453c:	7102      	strb	r2, [r0, #4]
 801453e:	80c1      	strh	r1, [r0, #6]
 8014540:	7143      	strb	r3, [r0, #5]
 8014542:	4770      	bx	lr

08014544 <uxr_buffer_create_session>:
 8014544:	b530      	push	{r4, r5, lr}
 8014546:	b089      	sub	sp, #36	@ 0x24
 8014548:	2300      	movs	r3, #0
 801454a:	4d12      	ldr	r5, [pc, #72]	@ (8014594 <uxr_buffer_create_session+0x50>)
 801454c:	9307      	str	r3, [sp, #28]
 801454e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014552:	2201      	movs	r2, #1
 8014554:	9301      	str	r3, [sp, #4]
 8014556:	80c2      	strh	r2, [r0, #6]
 8014558:	f88d 2004 	strb.w	r2, [sp, #4]
 801455c:	682a      	ldr	r2, [r5, #0]
 801455e:	9200      	str	r2, [sp, #0]
 8014560:	88aa      	ldrh	r2, [r5, #4]
 8014562:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014566:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801456a:	9202      	str	r2, [sp, #8]
 801456c:	460c      	mov	r4, r1
 801456e:	7802      	ldrb	r2, [r0, #0]
 8014570:	9303      	str	r3, [sp, #12]
 8014572:	4619      	mov	r1, r3
 8014574:	f88d 200c 	strb.w	r2, [sp, #12]
 8014578:	4620      	mov	r0, r4
 801457a:	2210      	movs	r2, #16
 801457c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8014580:	9306      	str	r3, [sp, #24]
 8014582:	f000 febb 	bl	80152fc <uxr_buffer_submessage_header>
 8014586:	4669      	mov	r1, sp
 8014588:	4620      	mov	r0, r4
 801458a:	f001 fe47 	bl	801621c <uxr_serialize_CREATE_CLIENT_Payload>
 801458e:	b009      	add	sp, #36	@ 0x24
 8014590:	bd30      	pop	{r4, r5, pc}
 8014592:	bf00      	nop
 8014594:	0801dcc8 	.word	0x0801dcc8

08014598 <uxr_buffer_delete_session>:
 8014598:	b510      	push	{r4, lr}
 801459a:	4b0c      	ldr	r3, [pc, #48]	@ (80145cc <uxr_buffer_delete_session+0x34>)
 801459c:	b082      	sub	sp, #8
 801459e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 80145a2:	f8ad c006 	strh.w	ip, [sp, #6]
 80145a6:	460c      	mov	r4, r1
 80145a8:	2202      	movs	r2, #2
 80145aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80145ae:	80c2      	strh	r2, [r0, #6]
 80145b0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80145b4:	2204      	movs	r2, #4
 80145b6:	2300      	movs	r3, #0
 80145b8:	2103      	movs	r1, #3
 80145ba:	4620      	mov	r0, r4
 80145bc:	f000 fe9e 	bl	80152fc <uxr_buffer_submessage_header>
 80145c0:	a901      	add	r1, sp, #4
 80145c2:	4620      	mov	r0, r4
 80145c4:	f001 fed0 	bl	8016368 <uxr_serialize_DELETE_Payload>
 80145c8:	b002      	add	sp, #8
 80145ca:	bd10      	pop	{r4, pc}
 80145cc:	0801dcc8 	.word	0x0801dcc8

080145d0 <uxr_read_create_session_status>:
 80145d0:	b510      	push	{r4, lr}
 80145d2:	b088      	sub	sp, #32
 80145d4:	4604      	mov	r4, r0
 80145d6:	4608      	mov	r0, r1
 80145d8:	a901      	add	r1, sp, #4
 80145da:	f001 fed5 	bl	8016388 <uxr_deserialize_STATUS_AGENT_Payload>
 80145de:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80145e2:	7163      	strb	r3, [r4, #5]
 80145e4:	b008      	add	sp, #32
 80145e6:	bd10      	pop	{r4, pc}

080145e8 <uxr_read_delete_session_status>:
 80145e8:	b510      	push	{r4, lr}
 80145ea:	4604      	mov	r4, r0
 80145ec:	b084      	sub	sp, #16
 80145ee:	4608      	mov	r0, r1
 80145f0:	a902      	add	r1, sp, #8
 80145f2:	f001 fef9 	bl	80163e8 <uxr_deserialize_STATUS_Payload>
 80145f6:	88e3      	ldrh	r3, [r4, #6]
 80145f8:	2b02      	cmp	r3, #2
 80145fa:	d001      	beq.n	8014600 <uxr_read_delete_session_status+0x18>
 80145fc:	b004      	add	sp, #16
 80145fe:	bd10      	pop	{r4, pc}
 8014600:	f10d 000a 	add.w	r0, sp, #10
 8014604:	f7fe fe64 	bl	80132d0 <uxr_object_id_from_raw>
 8014608:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801460c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8014610:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014614:	b29b      	uxth	r3, r3
 8014616:	2b02      	cmp	r3, #2
 8014618:	bf04      	itt	eq
 801461a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801461e:	7163      	strbeq	r3, [r4, #5]
 8014620:	b004      	add	sp, #16
 8014622:	bd10      	pop	{r4, pc}

08014624 <uxr_stamp_create_session_header>:
 8014624:	b510      	push	{r4, lr}
 8014626:	2208      	movs	r2, #8
 8014628:	b08a      	sub	sp, #40	@ 0x28
 801462a:	4604      	mov	r4, r0
 801462c:	eb0d 0002 	add.w	r0, sp, r2
 8014630:	f7fa fe5a 	bl	800f2e8 <ucdr_init_buffer>
 8014634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014638:	9400      	str	r4, [sp, #0]
 801463a:	2300      	movs	r3, #0
 801463c:	461a      	mov	r2, r3
 801463e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8014642:	a802      	add	r0, sp, #8
 8014644:	f001 f854 	bl	80156f0 <uxr_serialize_message_header>
 8014648:	b00a      	add	sp, #40	@ 0x28
 801464a:	bd10      	pop	{r4, pc}

0801464c <uxr_stamp_session_header>:
 801464c:	b530      	push	{r4, r5, lr}
 801464e:	b08d      	sub	sp, #52	@ 0x34
 8014650:	4604      	mov	r4, r0
 8014652:	460d      	mov	r5, r1
 8014654:	9203      	str	r2, [sp, #12]
 8014656:	4619      	mov	r1, r3
 8014658:	a804      	add	r0, sp, #16
 801465a:	2208      	movs	r2, #8
 801465c:	f7fa fe44 	bl	800f2e8 <ucdr_init_buffer>
 8014660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014664:	9b03      	ldr	r3, [sp, #12]
 8014666:	9400      	str	r4, [sp, #0]
 8014668:	462a      	mov	r2, r5
 801466a:	a804      	add	r0, sp, #16
 801466c:	f001 f840 	bl	80156f0 <uxr_serialize_message_header>
 8014670:	b00d      	add	sp, #52	@ 0x34
 8014672:	bd30      	pop	{r4, r5, pc}

08014674 <uxr_read_session_header>:
 8014674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014678:	4607      	mov	r7, r0
 801467a:	b084      	sub	sp, #16
 801467c:	4608      	mov	r0, r1
 801467e:	460c      	mov	r4, r1
 8014680:	4615      	mov	r5, r2
 8014682:	461e      	mov	r6, r3
 8014684:	f7fa fe60 	bl	800f348 <ucdr_buffer_remaining>
 8014688:	2808      	cmp	r0, #8
 801468a:	d803      	bhi.n	8014694 <uxr_read_session_header+0x20>
 801468c:	2000      	movs	r0, #0
 801468e:	b004      	add	sp, #16
 8014690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014694:	f10d 080c 	add.w	r8, sp, #12
 8014698:	4633      	mov	r3, r6
 801469a:	462a      	mov	r2, r5
 801469c:	f8cd 8000 	str.w	r8, [sp]
 80146a0:	4620      	mov	r0, r4
 80146a2:	f10d 010b 	add.w	r1, sp, #11
 80146a6:	f001 f841 	bl	801572c <uxr_deserialize_message_header>
 80146aa:	783a      	ldrb	r2, [r7, #0]
 80146ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80146b0:	4293      	cmp	r3, r2
 80146b2:	d1eb      	bne.n	801468c <uxr_read_session_header+0x18>
 80146b4:	061b      	lsls	r3, r3, #24
 80146b6:	d41c      	bmi.n	80146f2 <uxr_read_session_header+0x7e>
 80146b8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80146bc:	787b      	ldrb	r3, [r7, #1]
 80146be:	429a      	cmp	r2, r3
 80146c0:	d003      	beq.n	80146ca <uxr_read_session_header+0x56>
 80146c2:	2001      	movs	r0, #1
 80146c4:	f080 0001 	eor.w	r0, r0, #1
 80146c8:	e7e1      	b.n	801468e <uxr_read_session_header+0x1a>
 80146ca:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80146ce:	78bb      	ldrb	r3, [r7, #2]
 80146d0:	429a      	cmp	r2, r3
 80146d2:	f107 0102 	add.w	r1, r7, #2
 80146d6:	d1f4      	bne.n	80146c2 <uxr_read_session_header+0x4e>
 80146d8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80146dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80146e0:	429a      	cmp	r2, r3
 80146e2:	d1ee      	bne.n	80146c2 <uxr_read_session_header+0x4e>
 80146e4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80146e8:	784b      	ldrb	r3, [r1, #1]
 80146ea:	429a      	cmp	r2, r3
 80146ec:	d1e9      	bne.n	80146c2 <uxr_read_session_header+0x4e>
 80146ee:	2000      	movs	r0, #0
 80146f0:	e7e8      	b.n	80146c4 <uxr_read_session_header+0x50>
 80146f2:	2001      	movs	r0, #1
 80146f4:	e7cb      	b.n	801468e <uxr_read_session_header+0x1a>
 80146f6:	bf00      	nop

080146f8 <uxr_session_header_offset>:
 80146f8:	f990 3000 	ldrsb.w	r3, [r0]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	bfac      	ite	ge
 8014700:	2008      	movge	r0, #8
 8014702:	2004      	movlt	r0, #4
 8014704:	4770      	bx	lr
 8014706:	bf00      	nop

08014708 <uxr_init_base_object_request>:
 8014708:	b510      	push	{r4, lr}
 801470a:	88c3      	ldrh	r3, [r0, #6]
 801470c:	b082      	sub	sp, #8
 801470e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8014712:	9101      	str	r1, [sp, #4]
 8014714:	f1a3 010a 	sub.w	r1, r3, #10
 8014718:	b289      	uxth	r1, r1
 801471a:	42a1      	cmp	r1, r4
 801471c:	d80e      	bhi.n	801473c <uxr_init_base_object_request+0x34>
 801471e:	3301      	adds	r3, #1
 8014720:	b29c      	uxth	r4, r3
 8014722:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014726:	b2db      	uxtb	r3, r3
 8014728:	80c4      	strh	r4, [r0, #6]
 801472a:	9801      	ldr	r0, [sp, #4]
 801472c:	7011      	strb	r1, [r2, #0]
 801472e:	7053      	strb	r3, [r2, #1]
 8014730:	1c91      	adds	r1, r2, #2
 8014732:	f7fe fde1 	bl	80132f8 <uxr_object_id_to_raw>
 8014736:	4620      	mov	r0, r4
 8014738:	b002      	add	sp, #8
 801473a:	bd10      	pop	{r4, pc}
 801473c:	230a      	movs	r3, #10
 801473e:	2100      	movs	r1, #0
 8014740:	461c      	mov	r4, r3
 8014742:	e7f1      	b.n	8014728 <uxr_init_base_object_request+0x20>

08014744 <uxr_parse_base_object_request>:
 8014744:	b570      	push	{r4, r5, r6, lr}
 8014746:	4604      	mov	r4, r0
 8014748:	3002      	adds	r0, #2
 801474a:	460d      	mov	r5, r1
 801474c:	4616      	mov	r6, r2
 801474e:	f7fe fdbf 	bl	80132d0 <uxr_object_id_from_raw>
 8014752:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8014756:	8028      	strh	r0, [r5, #0]
 8014758:	806b      	strh	r3, [r5, #2]
 801475a:	7822      	ldrb	r2, [r4, #0]
 801475c:	7863      	ldrb	r3, [r4, #1]
 801475e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014762:	8033      	strh	r3, [r6, #0]
 8014764:	bd70      	pop	{r4, r5, r6, pc}
 8014766:	bf00      	nop

08014768 <uxr_init_framing_io>:
 8014768:	2300      	movs	r3, #0
 801476a:	7041      	strb	r1, [r0, #1]
 801476c:	7003      	strb	r3, [r0, #0]
 801476e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014770:	4770      	bx	lr
 8014772:	bf00      	nop

08014774 <uxr_write_framed_msg>:
 8014774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014778:	4617      	mov	r7, r2
 801477a:	7842      	ldrb	r2, [r0, #1]
 801477c:	b083      	sub	sp, #12
 801477e:	460e      	mov	r6, r1
 8014780:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8014784:	469a      	mov	sl, r3
 8014786:	2901      	cmp	r1, #1
 8014788:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 801478c:	4604      	mov	r4, r0
 801478e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014792:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8014796:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801479a:	f240 8137 	bls.w	8014a0c <uxr_write_framed_msg+0x298>
 801479e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80147a2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80147a6:	2901      	cmp	r1, #1
 80147a8:	f04f 0202 	mov.w	r2, #2
 80147ac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80147b0:	f240 808f 	bls.w	80148d2 <uxr_write_framed_msg+0x15e>
 80147b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80147b6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80147ba:	b2dd      	uxtb	r5, r3
 80147bc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80147c0:	2203      	movs	r2, #3
 80147c2:	2901      	cmp	r1, #1
 80147c4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80147c8:	f240 809a 	bls.w	8014900 <uxr_write_framed_msg+0x18c>
 80147cc:	18a1      	adds	r1, r4, r2
 80147ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80147d0:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80147d4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80147d8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80147dc:	3201      	adds	r2, #1
 80147de:	2801      	cmp	r0, #1
 80147e0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80147e4:	f240 80a0 	bls.w	8014928 <uxr_write_framed_msg+0x1b4>
 80147e8:	18a0      	adds	r0, r4, r2
 80147ea:	3201      	adds	r2, #1
 80147ec:	b2d2      	uxtb	r2, r2
 80147ee:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80147f2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	f000 80a9 	beq.w	801494e <uxr_write_framed_msg+0x1da>
 80147fc:	f04f 0900 	mov.w	r9, #0
 8014800:	46c8      	mov	r8, r9
 8014802:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014806:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801480a:	2901      	cmp	r1, #1
 801480c:	f240 80c3 	bls.w	8014996 <uxr_write_framed_msg+0x222>
 8014810:	2a29      	cmp	r2, #41	@ 0x29
 8014812:	f200 809f 	bhi.w	8014954 <uxr_write_framed_msg+0x1e0>
 8014816:	18a1      	adds	r1, r4, r2
 8014818:	3201      	adds	r2, #1
 801481a:	b2d2      	uxtb	r2, r2
 801481c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8014820:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014824:	ea89 0303 	eor.w	r3, r9, r3
 8014828:	498c      	ldr	r1, [pc, #560]	@ (8014a5c <uxr_write_framed_msg+0x2e8>)
 801482a:	b2db      	uxtb	r3, r3
 801482c:	f108 0801 	add.w	r8, r8, #1
 8014830:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014834:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8014838:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801483a:	4543      	cmp	r3, r8
 801483c:	d8e1      	bhi.n	8014802 <uxr_write_framed_msg+0x8e>
 801483e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014842:	fa5f f889 	uxtb.w	r8, r9
 8014846:	9301      	str	r3, [sp, #4]
 8014848:	f04f 0900 	mov.w	r9, #0
 801484c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8014850:	fa5f f18a 	uxtb.w	r1, sl
 8014854:	2901      	cmp	r1, #1
 8014856:	d921      	bls.n	801489c <uxr_write_framed_msg+0x128>
 8014858:	2a29      	cmp	r2, #41	@ 0x29
 801485a:	f240 80af 	bls.w	80149bc <uxr_write_framed_msg+0x248>
 801485e:	2500      	movs	r5, #0
 8014860:	e000      	b.n	8014864 <uxr_write_framed_msg+0xf0>
 8014862:	b160      	cbz	r0, 801487e <uxr_write_framed_msg+0x10a>
 8014864:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014868:	1b52      	subs	r2, r2, r5
 801486a:	465b      	mov	r3, fp
 801486c:	4421      	add	r1, r4
 801486e:	4638      	mov	r0, r7
 8014870:	47b0      	blx	r6
 8014872:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014876:	4405      	add	r5, r0
 8014878:	4295      	cmp	r5, r2
 801487a:	d3f2      	bcc.n	8014862 <uxr_write_framed_msg+0xee>
 801487c:	d003      	beq.n	8014886 <uxr_write_framed_msg+0x112>
 801487e:	2000      	movs	r0, #0
 8014880:	b003      	add	sp, #12
 8014882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014886:	fa5f f18a 	uxtb.w	r1, sl
 801488a:	f04f 0300 	mov.w	r3, #0
 801488e:	2901      	cmp	r1, #1
 8014890:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014894:	f04f 0200 	mov.w	r2, #0
 8014898:	f200 8090 	bhi.w	80149bc <uxr_write_framed_msg+0x248>
 801489c:	1c51      	adds	r1, r2, #1
 801489e:	b2c9      	uxtb	r1, r1
 80148a0:	2929      	cmp	r1, #41	@ 0x29
 80148a2:	d8dc      	bhi.n	801485e <uxr_write_framed_msg+0xea>
 80148a4:	18a5      	adds	r5, r4, r2
 80148a6:	4421      	add	r1, r4
 80148a8:	3202      	adds	r2, #2
 80148aa:	f088 0820 	eor.w	r8, r8, #32
 80148ae:	4648      	mov	r0, r9
 80148b0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80148b4:	b2d2      	uxtb	r2, r2
 80148b6:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 80148ba:	f04f 0901 	mov.w	r9, #1
 80148be:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80148c2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80148c6:	2800      	cmp	r0, #0
 80148c8:	f040 8085 	bne.w	80149d6 <uxr_write_framed_msg+0x262>
 80148cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80148d0:	e7bc      	b.n	801484c <uxr_write_framed_msg+0xd8>
 80148d2:	4611      	mov	r1, r2
 80148d4:	f04f 0c03 	mov.w	ip, #3
 80148d8:	2204      	movs	r2, #4
 80148da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80148dc:	4421      	add	r1, r4
 80148de:	b2dd      	uxtb	r5, r3
 80148e0:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80148e4:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 80148e8:	44a4      	add	ip, r4
 80148ea:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80148ee:	f080 0020 	eor.w	r0, r0, #32
 80148f2:	2901      	cmp	r1, #1
 80148f4:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80148f8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80148fc:	f63f af66 	bhi.w	80147cc <uxr_write_framed_msg+0x58>
 8014900:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014902:	18a0      	adds	r0, r4, r2
 8014904:	f085 0520 	eor.w	r5, r5, #32
 8014908:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801490c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014910:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8014914:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8014918:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801491c:	3202      	adds	r2, #2
 801491e:	2801      	cmp	r0, #1
 8014920:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014924:	f63f af60 	bhi.w	80147e8 <uxr_write_framed_msg+0x74>
 8014928:	1c50      	adds	r0, r2, #1
 801492a:	18a5      	adds	r5, r4, r2
 801492c:	fa54 f080 	uxtab	r0, r4, r0
 8014930:	3202      	adds	r2, #2
 8014932:	f081 0120 	eor.w	r1, r1, #32
 8014936:	b2d2      	uxtb	r2, r2
 8014938:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801493c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8014940:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014944:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014948:	2b00      	cmp	r3, #0
 801494a:	f47f af57 	bne.w	80147fc <uxr_write_framed_msg+0x88>
 801494e:	9301      	str	r3, [sp, #4]
 8014950:	4698      	mov	r8, r3
 8014952:	e779      	b.n	8014848 <uxr_write_framed_msg+0xd4>
 8014954:	2500      	movs	r5, #0
 8014956:	e001      	b.n	801495c <uxr_write_framed_msg+0x1e8>
 8014958:	2800      	cmp	r0, #0
 801495a:	d090      	beq.n	801487e <uxr_write_framed_msg+0x10a>
 801495c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014960:	1b52      	subs	r2, r2, r5
 8014962:	465b      	mov	r3, fp
 8014964:	4421      	add	r1, r4
 8014966:	4638      	mov	r0, r7
 8014968:	47b0      	blx	r6
 801496a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801496e:	4405      	add	r5, r0
 8014970:	4295      	cmp	r5, r2
 8014972:	d3f1      	bcc.n	8014958 <uxr_write_framed_msg+0x1e4>
 8014974:	d183      	bne.n	801487e <uxr_write_framed_msg+0x10a>
 8014976:	f04f 0300 	mov.w	r3, #0
 801497a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801497e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014980:	4543      	cmp	r3, r8
 8014982:	d964      	bls.n	8014a4e <uxr_write_framed_msg+0x2da>
 8014984:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014988:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801498c:	2901      	cmp	r1, #1
 801498e:	f04f 0200 	mov.w	r2, #0
 8014992:	f63f af3d 	bhi.w	8014810 <uxr_write_framed_msg+0x9c>
 8014996:	1c51      	adds	r1, r2, #1
 8014998:	b2c9      	uxtb	r1, r1
 801499a:	2929      	cmp	r1, #41	@ 0x29
 801499c:	d8da      	bhi.n	8014954 <uxr_write_framed_msg+0x1e0>
 801499e:	18a0      	adds	r0, r4, r2
 80149a0:	4421      	add	r1, r4
 80149a2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80149a6:	3202      	adds	r2, #2
 80149a8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80149ac:	b2d2      	uxtb	r2, r2
 80149ae:	f083 0020 	eor.w	r0, r3, #32
 80149b2:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80149b6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80149ba:	e733      	b.n	8014824 <uxr_write_framed_msg+0xb0>
 80149bc:	18a1      	adds	r1, r4, r2
 80149be:	3201      	adds	r2, #1
 80149c0:	4648      	mov	r0, r9
 80149c2:	b2d2      	uxtb	r2, r2
 80149c4:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80149c8:	f04f 0901 	mov.w	r9, #1
 80149cc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80149d0:	2800      	cmp	r0, #0
 80149d2:	f43f af7b 	beq.w	80148cc <uxr_write_framed_msg+0x158>
 80149d6:	2500      	movs	r5, #0
 80149d8:	e002      	b.n	80149e0 <uxr_write_framed_msg+0x26c>
 80149da:	2800      	cmp	r0, #0
 80149dc:	f43f af4f 	beq.w	801487e <uxr_write_framed_msg+0x10a>
 80149e0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80149e4:	1b52      	subs	r2, r2, r5
 80149e6:	465b      	mov	r3, fp
 80149e8:	4421      	add	r1, r4
 80149ea:	4638      	mov	r0, r7
 80149ec:	47b0      	blx	r6
 80149ee:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80149f2:	4405      	add	r5, r0
 80149f4:	4295      	cmp	r5, r2
 80149f6:	d3f0      	bcc.n	80149da <uxr_write_framed_msg+0x266>
 80149f8:	f47f af41 	bne.w	801487e <uxr_write_framed_msg+0x10a>
 80149fc:	2300      	movs	r3, #0
 80149fe:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014a02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014a04:	b298      	uxth	r0, r3
 8014a06:	b003      	add	sp, #12
 8014a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a0c:	217d      	movs	r1, #125	@ 0x7d
 8014a0e:	f082 0220 	eor.w	r2, r2, #32
 8014a12:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8014a16:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014a1a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8014a1e:	2901      	cmp	r1, #1
 8014a20:	f04f 0203 	mov.w	r2, #3
 8014a24:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014a28:	d804      	bhi.n	8014a34 <uxr_write_framed_msg+0x2c0>
 8014a2a:	4611      	mov	r1, r2
 8014a2c:	f04f 0c04 	mov.w	ip, #4
 8014a30:	2205      	movs	r2, #5
 8014a32:	e752      	b.n	80148da <uxr_write_framed_msg+0x166>
 8014a34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014a36:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8014a3a:	b2dd      	uxtb	r5, r3
 8014a3c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014a40:	2204      	movs	r2, #4
 8014a42:	2901      	cmp	r1, #1
 8014a44:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014a48:	f63f aec0 	bhi.w	80147cc <uxr_write_framed_msg+0x58>
 8014a4c:	e758      	b.n	8014900 <uxr_write_framed_msg+0x18c>
 8014a4e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014a52:	fa5f f889 	uxtb.w	r8, r9
 8014a56:	9301      	str	r3, [sp, #4]
 8014a58:	2200      	movs	r2, #0
 8014a5a:	e6f5      	b.n	8014848 <uxr_write_framed_msg+0xd4>
 8014a5c:	0801eaec 	.word	0x0801eaec

08014a60 <uxr_framing_read_transport>:
 8014a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a64:	4604      	mov	r4, r0
 8014a66:	b083      	sub	sp, #12
 8014a68:	461f      	mov	r7, r3
 8014a6a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8014a6e:	4689      	mov	r9, r1
 8014a70:	4692      	mov	sl, r2
 8014a72:	f000 fc89 	bl	8015388 <uxr_millis>
 8014a76:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014a7a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8014a7e:	42b3      	cmp	r3, r6
 8014a80:	4680      	mov	r8, r0
 8014a82:	d061      	beq.n	8014b48 <uxr_framing_read_transport+0xe8>
 8014a84:	d81c      	bhi.n	8014ac0 <uxr_framing_read_transport+0x60>
 8014a86:	1e75      	subs	r5, r6, #1
 8014a88:	1aed      	subs	r5, r5, r3
 8014a8a:	b2ed      	uxtb	r5, r5
 8014a8c:	2600      	movs	r6, #0
 8014a8e:	455d      	cmp	r5, fp
 8014a90:	d81f      	bhi.n	8014ad2 <uxr_framing_read_transport+0x72>
 8014a92:	19ab      	adds	r3, r5, r6
 8014a94:	455b      	cmp	r3, fp
 8014a96:	bf84      	itt	hi
 8014a98:	ebab 0605 	subhi.w	r6, fp, r5
 8014a9c:	b2f6      	uxtbhi	r6, r6
 8014a9e:	b9ed      	cbnz	r5, 8014adc <uxr_framing_read_transport+0x7c>
 8014aa0:	f04f 0b00 	mov.w	fp, #0
 8014aa4:	f000 fc70 	bl	8015388 <uxr_millis>
 8014aa8:	683b      	ldr	r3, [r7, #0]
 8014aaa:	eba0 0808 	sub.w	r8, r0, r8
 8014aae:	eba3 0308 	sub.w	r3, r3, r8
 8014ab2:	4658      	mov	r0, fp
 8014ab4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014ab8:	603b      	str	r3, [r7, #0]
 8014aba:	b003      	add	sp, #12
 8014abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac0:	2e00      	cmp	r6, #0
 8014ac2:	d049      	beq.n	8014b58 <uxr_framing_read_transport+0xf8>
 8014ac4:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8014ac8:	b2ed      	uxtb	r5, r5
 8014aca:	3e01      	subs	r6, #1
 8014acc:	455d      	cmp	r5, fp
 8014ace:	b2f6      	uxtb	r6, r6
 8014ad0:	d9df      	bls.n	8014a92 <uxr_framing_read_transport+0x32>
 8014ad2:	fa5f f58b 	uxtb.w	r5, fp
 8014ad6:	2600      	movs	r6, #0
 8014ad8:	2d00      	cmp	r5, #0
 8014ada:	d0e1      	beq.n	8014aa0 <uxr_framing_read_transport+0x40>
 8014adc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014ae0:	3102      	adds	r1, #2
 8014ae2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014ae4:	9300      	str	r3, [sp, #0]
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	4421      	add	r1, r4
 8014aea:	462a      	mov	r2, r5
 8014aec:	4650      	mov	r0, sl
 8014aee:	47c8      	blx	r9
 8014af0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014af4:	4a1a      	ldr	r2, [pc, #104]	@ (8014b60 <uxr_framing_read_transport+0x100>)
 8014af6:	4403      	add	r3, r0
 8014af8:	0859      	lsrs	r1, r3, #1
 8014afa:	fba2 2101 	umull	r2, r1, r2, r1
 8014afe:	0889      	lsrs	r1, r1, #2
 8014b00:	222a      	movs	r2, #42	@ 0x2a
 8014b02:	fb02 3111 	mls	r1, r2, r1, r3
 8014b06:	4683      	mov	fp, r0
 8014b08:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8014b0c:	2800      	cmp	r0, #0
 8014b0e:	d0c7      	beq.n	8014aa0 <uxr_framing_read_transport+0x40>
 8014b10:	42a8      	cmp	r0, r5
 8014b12:	d1c7      	bne.n	8014aa4 <uxr_framing_read_transport+0x44>
 8014b14:	2e00      	cmp	r6, #0
 8014b16:	d0c5      	beq.n	8014aa4 <uxr_framing_read_transport+0x44>
 8014b18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014b1a:	9300      	str	r3, [sp, #0]
 8014b1c:	3102      	adds	r1, #2
 8014b1e:	4632      	mov	r2, r6
 8014b20:	4421      	add	r1, r4
 8014b22:	2300      	movs	r3, #0
 8014b24:	4650      	mov	r0, sl
 8014b26:	47c8      	blx	r9
 8014b28:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8014b60 <uxr_framing_read_transport+0x100>)
 8014b2e:	180b      	adds	r3, r1, r0
 8014b30:	0859      	lsrs	r1, r3, #1
 8014b32:	fba2 1201 	umull	r1, r2, r2, r1
 8014b36:	0892      	lsrs	r2, r2, #2
 8014b38:	212a      	movs	r1, #42	@ 0x2a
 8014b3a:	fb01 3312 	mls	r3, r1, r2, r3
 8014b3e:	eb00 0b05 	add.w	fp, r0, r5
 8014b42:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8014b46:	e7ad      	b.n	8014aa4 <uxr_framing_read_transport+0x44>
 8014b48:	2600      	movs	r6, #0
 8014b4a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8014b4e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8014b50:	d9bf      	bls.n	8014ad2 <uxr_framing_read_transport+0x72>
 8014b52:	2102      	movs	r1, #2
 8014b54:	2529      	movs	r5, #41	@ 0x29
 8014b56:	e7c4      	b.n	8014ae2 <uxr_framing_read_transport+0x82>
 8014b58:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8014b5c:	b2ed      	uxtb	r5, r5
 8014b5e:	e796      	b.n	8014a8e <uxr_framing_read_transport+0x2e>
 8014b60:	30c30c31 	.word	0x30c30c31

08014b64 <uxr_read_framed_msg>:
 8014b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b68:	461e      	mov	r6, r3
 8014b6a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8014b6e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8014b72:	429d      	cmp	r5, r3
 8014b74:	b083      	sub	sp, #12
 8014b76:	4604      	mov	r4, r0
 8014b78:	4688      	mov	r8, r1
 8014b7a:	4691      	mov	r9, r2
 8014b7c:	f000 8188 	beq.w	8014e90 <uxr_read_framed_msg+0x32c>
 8014b80:	7823      	ldrb	r3, [r4, #0]
 8014b82:	4dc1      	ldr	r5, [pc, #772]	@ (8014e88 <uxr_read_framed_msg+0x324>)
 8014b84:	4fc1      	ldr	r7, [pc, #772]	@ (8014e8c <uxr_read_framed_msg+0x328>)
 8014b86:	2b07      	cmp	r3, #7
 8014b88:	d8fd      	bhi.n	8014b86 <uxr_read_framed_msg+0x22>
 8014b8a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014b8e:	0115      	.short	0x0115
 8014b90:	00d600f6 	.word	0x00d600f6
 8014b94:	009000b9 	.word	0x009000b9
 8014b98:	0030004d 	.word	0x0030004d
 8014b9c:	0008      	.short	0x0008
 8014b9e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014ba2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014ba6:	4299      	cmp	r1, r3
 8014ba8:	f000 814a 	beq.w	8014e40 <uxr_read_framed_msg+0x2dc>
 8014bac:	18e2      	adds	r2, r4, r3
 8014bae:	7892      	ldrb	r2, [r2, #2]
 8014bb0:	2a7d      	cmp	r2, #125	@ 0x7d
 8014bb2:	f000 8199 	beq.w	8014ee8 <uxr_read_framed_msg+0x384>
 8014bb6:	3301      	adds	r3, #1
 8014bb8:	0858      	lsrs	r0, r3, #1
 8014bba:	fba5 1000 	umull	r1, r0, r5, r0
 8014bbe:	0880      	lsrs	r0, r0, #2
 8014bc0:	212a      	movs	r1, #42	@ 0x2a
 8014bc2:	fb01 3310 	mls	r3, r1, r0, r3
 8014bc6:	2a7e      	cmp	r2, #126	@ 0x7e
 8014bc8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014bcc:	f000 8252 	beq.w	8015074 <uxr_read_framed_msg+0x510>
 8014bd0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8014bd2:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8014bd4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014bd8:	b29b      	uxth	r3, r3
 8014bda:	2200      	movs	r2, #0
 8014bdc:	4299      	cmp	r1, r3
 8014bde:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8014be0:	7022      	strb	r2, [r4, #0]
 8014be2:	f000 8179 	beq.w	8014ed8 <uxr_read_framed_msg+0x374>
 8014be6:	2000      	movs	r0, #0
 8014be8:	b003      	add	sp, #12
 8014bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bee:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014bf2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014bf6:	4299      	cmp	r1, r3
 8014bf8:	f000 8131 	beq.w	8014e5e <uxr_read_framed_msg+0x2fa>
 8014bfc:	18e2      	adds	r2, r4, r3
 8014bfe:	7890      	ldrb	r0, [r2, #2]
 8014c00:	287d      	cmp	r0, #125	@ 0x7d
 8014c02:	f000 8190 	beq.w	8014f26 <uxr_read_framed_msg+0x3c2>
 8014c06:	3301      	adds	r3, #1
 8014c08:	085a      	lsrs	r2, r3, #1
 8014c0a:	fba5 1202 	umull	r1, r2, r5, r2
 8014c0e:	0892      	lsrs	r2, r2, #2
 8014c10:	212a      	movs	r1, #42	@ 0x2a
 8014c12:	fb01 3312 	mls	r3, r1, r2, r3
 8014c16:	287e      	cmp	r0, #126	@ 0x7e
 8014c18:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014c1c:	f000 821a 	beq.w	8015054 <uxr_read_framed_msg+0x4f0>
 8014c20:	2307      	movs	r3, #7
 8014c22:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8014c24:	7023      	strb	r3, [r4, #0]
 8014c26:	e7ae      	b.n	8014b86 <uxr_read_framed_msg+0x22>
 8014c28:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014c2a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8014c2e:	459e      	cmp	lr, r3
 8014c30:	d938      	bls.n	8014ca4 <uxr_read_framed_msg+0x140>
 8014c32:	ee07 8a90 	vmov	s15, r8
 8014c36:	212a      	movs	r1, #42	@ 0x2a
 8014c38:	e020      	b.n	8014c7c <uxr_read_framed_msg+0x118>
 8014c3a:	f89b c002 	ldrb.w	ip, [fp, #2]
 8014c3e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8014c42:	f000 80d4 	beq.w	8014dee <uxr_read_framed_msg+0x28a>
 8014c46:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8014c4a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014c4e:	f000 8219 	beq.w	8015084 <uxr_read_framed_msg+0x520>
 8014c52:	f806 c003 	strb.w	ip, [r6, r3]
 8014c56:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8014c5a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014c5c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8014c60:	ea8a 000c 	eor.w	r0, sl, ip
 8014c64:	b2c0      	uxtb	r0, r0
 8014c66:	3301      	adds	r3, #1
 8014c68:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8014c6c:	b29b      	uxth	r3, r3
 8014c6e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8014c72:	4573      	cmp	r3, lr
 8014c74:	8663      	strh	r3, [r4, #50]	@ 0x32
 8014c76:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8014c78:	f080 8120 	bcs.w	8014ebc <uxr_read_framed_msg+0x358>
 8014c7c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8014c80:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8014c84:	f100 0c01 	add.w	ip, r0, #1
 8014c88:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014c8c:	fba5 8202 	umull	r8, r2, r5, r2
 8014c90:	0892      	lsrs	r2, r2, #2
 8014c92:	4582      	cmp	sl, r0
 8014c94:	eb04 0b00 	add.w	fp, r4, r0
 8014c98:	fb01 c212 	mls	r2, r1, r2, ip
 8014c9c:	d1cd      	bne.n	8014c3a <uxr_read_framed_msg+0xd6>
 8014c9e:	ee17 8a90 	vmov	r8, s15
 8014ca2:	459e      	cmp	lr, r3
 8014ca4:	f040 8111 	bne.w	8014eca <uxr_read_framed_msg+0x366>
 8014ca8:	2306      	movs	r3, #6
 8014caa:	7023      	strb	r3, [r4, #0]
 8014cac:	e76b      	b.n	8014b86 <uxr_read_framed_msg+0x22>
 8014cae:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014cb2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014cb6:	4298      	cmp	r0, r3
 8014cb8:	f000 80c2 	beq.w	8014e40 <uxr_read_framed_msg+0x2dc>
 8014cbc:	18e2      	adds	r2, r4, r3
 8014cbe:	7891      	ldrb	r1, [r2, #2]
 8014cc0:	297d      	cmp	r1, #125	@ 0x7d
 8014cc2:	f000 814c 	beq.w	8014f5e <uxr_read_framed_msg+0x3fa>
 8014cc6:	3301      	adds	r3, #1
 8014cc8:	085a      	lsrs	r2, r3, #1
 8014cca:	fba5 0202 	umull	r0, r2, r5, r2
 8014cce:	0892      	lsrs	r2, r2, #2
 8014cd0:	202a      	movs	r0, #42	@ 0x2a
 8014cd2:	fb00 3312 	mls	r3, r0, r2, r3
 8014cd6:	297e      	cmp	r1, #126	@ 0x7e
 8014cd8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014cdc:	f000 81ca 	beq.w	8015074 <uxr_read_framed_msg+0x510>
 8014ce0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8014ce2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014ce6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014ce8:	b29b      	uxth	r3, r3
 8014cea:	2000      	movs	r0, #0
 8014cec:	428b      	cmp	r3, r1
 8014cee:	8623      	strh	r3, [r4, #48]	@ 0x30
 8014cf0:	8660      	strh	r0, [r4, #50]	@ 0x32
 8014cf2:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8014cf4:	f240 80df 	bls.w	8014eb6 <uxr_read_framed_msg+0x352>
 8014cf8:	7020      	strb	r0, [r4, #0]
 8014cfa:	b003      	add	sp, #12
 8014cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d00:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014d04:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014d08:	4299      	cmp	r1, r3
 8014d0a:	f000 80a8 	beq.w	8014e5e <uxr_read_framed_msg+0x2fa>
 8014d0e:	18e2      	adds	r2, r4, r3
 8014d10:	7890      	ldrb	r0, [r2, #2]
 8014d12:	287d      	cmp	r0, #125	@ 0x7d
 8014d14:	f000 8164 	beq.w	8014fe0 <uxr_read_framed_msg+0x47c>
 8014d18:	3301      	adds	r3, #1
 8014d1a:	085a      	lsrs	r2, r3, #1
 8014d1c:	fba5 1202 	umull	r1, r2, r5, r2
 8014d20:	0892      	lsrs	r2, r2, #2
 8014d22:	212a      	movs	r1, #42	@ 0x2a
 8014d24:	fb01 3312 	mls	r3, r1, r2, r3
 8014d28:	287e      	cmp	r0, #126	@ 0x7e
 8014d2a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014d2e:	f000 8191 	beq.w	8015054 <uxr_read_framed_msg+0x4f0>
 8014d32:	2304      	movs	r3, #4
 8014d34:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014d36:	7023      	strb	r3, [r4, #0]
 8014d38:	e725      	b.n	8014b86 <uxr_read_framed_msg+0x22>
 8014d3a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014d3e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014d42:	4290      	cmp	r0, r2
 8014d44:	f000 80b3 	beq.w	8014eae <uxr_read_framed_msg+0x34a>
 8014d48:	18a3      	adds	r3, r4, r2
 8014d4a:	7899      	ldrb	r1, [r3, #2]
 8014d4c:	297d      	cmp	r1, #125	@ 0x7d
 8014d4e:	f000 8164 	beq.w	801501a <uxr_read_framed_msg+0x4b6>
 8014d52:	3201      	adds	r2, #1
 8014d54:	0850      	lsrs	r0, r2, #1
 8014d56:	fba5 3000 	umull	r3, r0, r5, r0
 8014d5a:	0880      	lsrs	r0, r0, #2
 8014d5c:	232a      	movs	r3, #42	@ 0x2a
 8014d5e:	fb03 2210 	mls	r2, r3, r0, r2
 8014d62:	297e      	cmp	r1, #126	@ 0x7e
 8014d64:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014d68:	f000 8188 	beq.w	801507c <uxr_read_framed_msg+0x518>
 8014d6c:	7863      	ldrb	r3, [r4, #1]
 8014d6e:	428b      	cmp	r3, r1
 8014d70:	bf0c      	ite	eq
 8014d72:	2303      	moveq	r3, #3
 8014d74:	2300      	movne	r3, #0
 8014d76:	7023      	strb	r3, [r4, #0]
 8014d78:	e705      	b.n	8014b86 <uxr_read_framed_msg+0x22>
 8014d7a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014d7e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014d82:	2200      	movs	r2, #0
 8014d84:	4299      	cmp	r1, r3
 8014d86:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8014d8a:	d06c      	beq.n	8014e66 <uxr_read_framed_msg+0x302>
 8014d8c:	18e2      	adds	r2, r4, r3
 8014d8e:	7890      	ldrb	r0, [r2, #2]
 8014d90:	287d      	cmp	r0, #125	@ 0x7d
 8014d92:	f000 8101 	beq.w	8014f98 <uxr_read_framed_msg+0x434>
 8014d96:	3301      	adds	r3, #1
 8014d98:	085a      	lsrs	r2, r3, #1
 8014d9a:	fba5 1202 	umull	r1, r2, r5, r2
 8014d9e:	0892      	lsrs	r2, r2, #2
 8014da0:	212a      	movs	r1, #42	@ 0x2a
 8014da2:	fb01 3312 	mls	r3, r1, r2, r3
 8014da6:	287e      	cmp	r0, #126	@ 0x7e
 8014da8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8014dac:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014db0:	d059      	beq.n	8014e66 <uxr_read_framed_msg+0x302>
 8014db2:	2302      	movs	r3, #2
 8014db4:	7023      	strb	r3, [r4, #0]
 8014db6:	e6e6      	b.n	8014b86 <uxr_read_framed_msg+0x22>
 8014db8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8014dbc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014dc0:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8014dc4:	1c51      	adds	r1, r2, #1
 8014dc6:	084b      	lsrs	r3, r1, #1
 8014dc8:	fba5 c303 	umull	ip, r3, r5, r3
 8014dcc:	089b      	lsrs	r3, r3, #2
 8014dce:	fb0e 1313 	mls	r3, lr, r3, r1
 8014dd2:	4592      	cmp	sl, r2
 8014dd4:	eb04 0002 	add.w	r0, r4, r2
 8014dd8:	b2da      	uxtb	r2, r3
 8014dda:	f43f af04 	beq.w	8014be6 <uxr_read_framed_msg+0x82>
 8014dde:	7883      	ldrb	r3, [r0, #2]
 8014de0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014de4:	2b7e      	cmp	r3, #126	@ 0x7e
 8014de6:	d1ed      	bne.n	8014dc4 <uxr_read_framed_msg+0x260>
 8014de8:	2301      	movs	r3, #1
 8014dea:	7023      	strb	r3, [r4, #0]
 8014dec:	e6cb      	b.n	8014b86 <uxr_read_framed_msg+0x22>
 8014dee:	f100 0c01 	add.w	ip, r0, #1
 8014df2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014df6:	fba5 8202 	umull	r8, r2, r5, r2
 8014dfa:	0892      	lsrs	r2, r2, #2
 8014dfc:	fb01 c212 	mls	r2, r1, r2, ip
 8014e00:	eb04 0c02 	add.w	ip, r4, r2
 8014e04:	b2d2      	uxtb	r2, r2
 8014e06:	4592      	cmp	sl, r2
 8014e08:	f100 0002 	add.w	r0, r0, #2
 8014e0c:	f43f af47 	beq.w	8014c9e <uxr_read_framed_msg+0x13a>
 8014e10:	0842      	lsrs	r2, r0, #1
 8014e12:	f89c a002 	ldrb.w	sl, [ip, #2]
 8014e16:	fba5 8202 	umull	r8, r2, r5, r2
 8014e1a:	0892      	lsrs	r2, r2, #2
 8014e1c:	fb01 0012 	mls	r0, r1, r2, r0
 8014e20:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8014e24:	f08a 0c20 	eor.w	ip, sl, #32
 8014e28:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8014e2c:	f47f af11 	bne.w	8014c52 <uxr_read_framed_msg+0xee>
 8014e30:	459e      	cmp	lr, r3
 8014e32:	ee17 8a90 	vmov	r8, s15
 8014e36:	f43f af37 	beq.w	8014ca8 <uxr_read_framed_msg+0x144>
 8014e3a:	2301      	movs	r3, #1
 8014e3c:	7023      	strb	r3, [r4, #0]
 8014e3e:	e6a2      	b.n	8014b86 <uxr_read_framed_msg+0x22>
 8014e40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014e42:	9300      	str	r3, [sp, #0]
 8014e44:	2301      	movs	r3, #1
 8014e46:	9301      	str	r3, [sp, #4]
 8014e48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e4a:	464a      	mov	r2, r9
 8014e4c:	4641      	mov	r1, r8
 8014e4e:	4620      	mov	r0, r4
 8014e50:	f7ff fe06 	bl	8014a60 <uxr_framing_read_transport>
 8014e54:	2800      	cmp	r0, #0
 8014e56:	f43f aec6 	beq.w	8014be6 <uxr_read_framed_msg+0x82>
 8014e5a:	7823      	ldrb	r3, [r4, #0]
 8014e5c:	e693      	b.n	8014b86 <uxr_read_framed_msg+0x22>
 8014e5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014e60:	9300      	str	r3, [sp, #0]
 8014e62:	2302      	movs	r3, #2
 8014e64:	e7ef      	b.n	8014e46 <uxr_read_framed_msg+0x2e2>
 8014e66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014e68:	9300      	str	r3, [sp, #0]
 8014e6a:	2304      	movs	r3, #4
 8014e6c:	9301      	str	r3, [sp, #4]
 8014e6e:	464a      	mov	r2, r9
 8014e70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e72:	4641      	mov	r1, r8
 8014e74:	4620      	mov	r0, r4
 8014e76:	f7ff fdf3 	bl	8014a60 <uxr_framing_read_transport>
 8014e7a:	2800      	cmp	r0, #0
 8014e7c:	d1ed      	bne.n	8014e5a <uxr_read_framed_msg+0x2f6>
 8014e7e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8014e82:	2b7e      	cmp	r3, #126	@ 0x7e
 8014e84:	d0e9      	beq.n	8014e5a <uxr_read_framed_msg+0x2f6>
 8014e86:	e6ae      	b.n	8014be6 <uxr_read_framed_msg+0x82>
 8014e88:	30c30c31 	.word	0x30c30c31
 8014e8c:	0801eaec 	.word	0x0801eaec
 8014e90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014e92:	9300      	str	r3, [sp, #0]
 8014e94:	2305      	movs	r3, #5
 8014e96:	9301      	str	r3, [sp, #4]
 8014e98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e9a:	f7ff fde1 	bl	8014a60 <uxr_framing_read_transport>
 8014e9e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014ea2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014ea6:	429a      	cmp	r2, r3
 8014ea8:	f43f ae9d 	beq.w	8014be6 <uxr_read_framed_msg+0x82>
 8014eac:	e668      	b.n	8014b80 <uxr_read_framed_msg+0x1c>
 8014eae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014eb0:	9300      	str	r3, [sp, #0]
 8014eb2:	2303      	movs	r3, #3
 8014eb4:	e7c7      	b.n	8014e46 <uxr_read_framed_msg+0x2e2>
 8014eb6:	2305      	movs	r3, #5
 8014eb8:	7023      	strb	r3, [r4, #0]
 8014eba:	e664      	b.n	8014b86 <uxr_read_framed_msg+0x22>
 8014ebc:	ee17 8a90 	vmov	r8, s15
 8014ec0:	f43f aef2 	beq.w	8014ca8 <uxr_read_framed_msg+0x144>
 8014ec4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8014ec8:	d08e      	beq.n	8014de8 <uxr_read_framed_msg+0x284>
 8014eca:	ebae 0303 	sub.w	r3, lr, r3
 8014ece:	3302      	adds	r3, #2
 8014ed0:	9301      	str	r3, [sp, #4]
 8014ed2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014ed4:	9300      	str	r3, [sp, #0]
 8014ed6:	e7b7      	b.n	8014e48 <uxr_read_framed_msg+0x2e4>
 8014ed8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014eda:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8014ede:	7013      	strb	r3, [r2, #0]
 8014ee0:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8014ee2:	b003      	add	sp, #12
 8014ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ee8:	f103 0c01 	add.w	ip, r3, #1
 8014eec:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014ef0:	fba5 0202 	umull	r0, r2, r5, r2
 8014ef4:	0892      	lsrs	r2, r2, #2
 8014ef6:	202a      	movs	r0, #42	@ 0x2a
 8014ef8:	fb00 c212 	mls	r2, r0, r2, ip
 8014efc:	fa5f fc82 	uxtb.w	ip, r2
 8014f00:	4561      	cmp	r1, ip
 8014f02:	d09d      	beq.n	8014e40 <uxr_read_framed_msg+0x2dc>
 8014f04:	3302      	adds	r3, #2
 8014f06:	4422      	add	r2, r4
 8014f08:	0859      	lsrs	r1, r3, #1
 8014f0a:	7892      	ldrb	r2, [r2, #2]
 8014f0c:	fba5 c101 	umull	ip, r1, r5, r1
 8014f10:	0889      	lsrs	r1, r1, #2
 8014f12:	fb00 3311 	mls	r3, r0, r1, r3
 8014f16:	2a7e      	cmp	r2, #126	@ 0x7e
 8014f18:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014f1c:	f000 80aa 	beq.w	8015074 <uxr_read_framed_msg+0x510>
 8014f20:	f082 0220 	eor.w	r2, r2, #32
 8014f24:	e654      	b.n	8014bd0 <uxr_read_framed_msg+0x6c>
 8014f26:	1c58      	adds	r0, r3, #1
 8014f28:	0842      	lsrs	r2, r0, #1
 8014f2a:	fba5 c202 	umull	ip, r2, r5, r2
 8014f2e:	0892      	lsrs	r2, r2, #2
 8014f30:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014f34:	fb0c 0212 	mls	r2, ip, r2, r0
 8014f38:	b2d0      	uxtb	r0, r2
 8014f3a:	4281      	cmp	r1, r0
 8014f3c:	d08f      	beq.n	8014e5e <uxr_read_framed_msg+0x2fa>
 8014f3e:	4422      	add	r2, r4
 8014f40:	3302      	adds	r3, #2
 8014f42:	7890      	ldrb	r0, [r2, #2]
 8014f44:	085a      	lsrs	r2, r3, #1
 8014f46:	fba5 1202 	umull	r1, r2, r5, r2
 8014f4a:	0892      	lsrs	r2, r2, #2
 8014f4c:	fb0c 3312 	mls	r3, ip, r2, r3
 8014f50:	287e      	cmp	r0, #126	@ 0x7e
 8014f52:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014f56:	d07d      	beq.n	8015054 <uxr_read_framed_msg+0x4f0>
 8014f58:	f080 0020 	eor.w	r0, r0, #32
 8014f5c:	e660      	b.n	8014c20 <uxr_read_framed_msg+0xbc>
 8014f5e:	1c59      	adds	r1, r3, #1
 8014f60:	084a      	lsrs	r2, r1, #1
 8014f62:	fba5 c202 	umull	ip, r2, r5, r2
 8014f66:	0892      	lsrs	r2, r2, #2
 8014f68:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014f6c:	fb0c 1212 	mls	r2, ip, r2, r1
 8014f70:	b2d1      	uxtb	r1, r2
 8014f72:	4288      	cmp	r0, r1
 8014f74:	f43f af64 	beq.w	8014e40 <uxr_read_framed_msg+0x2dc>
 8014f78:	4422      	add	r2, r4
 8014f7a:	3302      	adds	r3, #2
 8014f7c:	7891      	ldrb	r1, [r2, #2]
 8014f7e:	085a      	lsrs	r2, r3, #1
 8014f80:	fba5 0202 	umull	r0, r2, r5, r2
 8014f84:	0892      	lsrs	r2, r2, #2
 8014f86:	fb0c 3312 	mls	r3, ip, r2, r3
 8014f8a:	297e      	cmp	r1, #126	@ 0x7e
 8014f8c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014f90:	d070      	beq.n	8015074 <uxr_read_framed_msg+0x510>
 8014f92:	f081 0120 	eor.w	r1, r1, #32
 8014f96:	e6a3      	b.n	8014ce0 <uxr_read_framed_msg+0x17c>
 8014f98:	f103 0c01 	add.w	ip, r3, #1
 8014f9c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014fa0:	fba5 0202 	umull	r0, r2, r5, r2
 8014fa4:	0892      	lsrs	r2, r2, #2
 8014fa6:	202a      	movs	r0, #42	@ 0x2a
 8014fa8:	fb00 c212 	mls	r2, r0, r2, ip
 8014fac:	fa5f fc82 	uxtb.w	ip, r2
 8014fb0:	4561      	cmp	r1, ip
 8014fb2:	f43f af58 	beq.w	8014e66 <uxr_read_framed_msg+0x302>
 8014fb6:	4422      	add	r2, r4
 8014fb8:	3302      	adds	r3, #2
 8014fba:	7891      	ldrb	r1, [r2, #2]
 8014fbc:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8014fc0:	085a      	lsrs	r2, r3, #1
 8014fc2:	fba5 c202 	umull	ip, r2, r5, r2
 8014fc6:	0892      	lsrs	r2, r2, #2
 8014fc8:	fb00 3312 	mls	r3, r0, r2, r3
 8014fcc:	297e      	cmp	r1, #126	@ 0x7e
 8014fce:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014fd2:	f43f af48 	beq.w	8014e66 <uxr_read_framed_msg+0x302>
 8014fd6:	f081 0120 	eor.w	r1, r1, #32
 8014fda:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8014fde:	e6e8      	b.n	8014db2 <uxr_read_framed_msg+0x24e>
 8014fe0:	1c58      	adds	r0, r3, #1
 8014fe2:	0842      	lsrs	r2, r0, #1
 8014fe4:	fba5 c202 	umull	ip, r2, r5, r2
 8014fe8:	0892      	lsrs	r2, r2, #2
 8014fea:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014fee:	fb0c 0212 	mls	r2, ip, r2, r0
 8014ff2:	b2d0      	uxtb	r0, r2
 8014ff4:	4281      	cmp	r1, r0
 8014ff6:	f43f af32 	beq.w	8014e5e <uxr_read_framed_msg+0x2fa>
 8014ffa:	4422      	add	r2, r4
 8014ffc:	3302      	adds	r3, #2
 8014ffe:	7890      	ldrb	r0, [r2, #2]
 8015000:	085a      	lsrs	r2, r3, #1
 8015002:	fba5 1202 	umull	r1, r2, r5, r2
 8015006:	0892      	lsrs	r2, r2, #2
 8015008:	fb0c 3312 	mls	r3, ip, r2, r3
 801500c:	287e      	cmp	r0, #126	@ 0x7e
 801500e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015012:	d01f      	beq.n	8015054 <uxr_read_framed_msg+0x4f0>
 8015014:	f080 0020 	eor.w	r0, r0, #32
 8015018:	e68b      	b.n	8014d32 <uxr_read_framed_msg+0x1ce>
 801501a:	1c51      	adds	r1, r2, #1
 801501c:	084b      	lsrs	r3, r1, #1
 801501e:	fba5 c303 	umull	ip, r3, r5, r3
 8015022:	089b      	lsrs	r3, r3, #2
 8015024:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015028:	fb0c 1313 	mls	r3, ip, r3, r1
 801502c:	b2d9      	uxtb	r1, r3
 801502e:	4288      	cmp	r0, r1
 8015030:	f43f af3d 	beq.w	8014eae <uxr_read_framed_msg+0x34a>
 8015034:	3202      	adds	r2, #2
 8015036:	4423      	add	r3, r4
 8015038:	0850      	lsrs	r0, r2, #1
 801503a:	789b      	ldrb	r3, [r3, #2]
 801503c:	fba5 1000 	umull	r1, r0, r5, r0
 8015040:	0880      	lsrs	r0, r0, #2
 8015042:	fb0c 2210 	mls	r2, ip, r0, r2
 8015046:	2b7e      	cmp	r3, #126	@ 0x7e
 8015048:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801504c:	d016      	beq.n	801507c <uxr_read_framed_msg+0x518>
 801504e:	f083 0120 	eor.w	r1, r3, #32
 8015052:	e68b      	b.n	8014d6c <uxr_read_framed_msg+0x208>
 8015054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015056:	9300      	str	r3, [sp, #0]
 8015058:	2302      	movs	r3, #2
 801505a:	9301      	str	r3, [sp, #4]
 801505c:	464a      	mov	r2, r9
 801505e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015060:	4641      	mov	r1, r8
 8015062:	4620      	mov	r0, r4
 8015064:	f7ff fcfc 	bl	8014a60 <uxr_framing_read_transport>
 8015068:	2800      	cmp	r0, #0
 801506a:	f47f aef6 	bne.w	8014e5a <uxr_read_framed_msg+0x2f6>
 801506e:	2301      	movs	r3, #1
 8015070:	7023      	strb	r3, [r4, #0]
 8015072:	e588      	b.n	8014b86 <uxr_read_framed_msg+0x22>
 8015074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015076:	9300      	str	r3, [sp, #0]
 8015078:	2301      	movs	r3, #1
 801507a:	e7ee      	b.n	801505a <uxr_read_framed_msg+0x4f6>
 801507c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801507e:	9300      	str	r3, [sp, #0]
 8015080:	2303      	movs	r3, #3
 8015082:	e7ea      	b.n	801505a <uxr_read_framed_msg+0x4f6>
 8015084:	ee17 8a90 	vmov	r8, s15
 8015088:	e6ae      	b.n	8014de8 <uxr_read_framed_msg+0x284>
 801508a:	bf00      	nop

0801508c <uxr_stream_id>:
 801508c:	2901      	cmp	r1, #1
 801508e:	b082      	sub	sp, #8
 8015090:	d01d      	beq.n	80150ce <uxr_stream_id+0x42>
 8015092:	2902      	cmp	r1, #2
 8015094:	f04f 0c00 	mov.w	ip, #0
 8015098:	d01e      	beq.n	80150d8 <uxr_stream_id+0x4c>
 801509a:	2300      	movs	r3, #0
 801509c:	f36c 0307 	bfi	r3, ip, #0, #8
 80150a0:	f360 230f 	bfi	r3, r0, #8, #8
 80150a4:	f361 4317 	bfi	r3, r1, #16, #8
 80150a8:	f362 631f 	bfi	r3, r2, #24, #8
 80150ac:	b2da      	uxtb	r2, r3
 80150ae:	2000      	movs	r0, #0
 80150b0:	f362 0007 	bfi	r0, r2, #0, #8
 80150b4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80150b8:	f362 200f 	bfi	r0, r2, #8, #8
 80150bc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80150c0:	f362 4017 	bfi	r0, r2, #16, #8
 80150c4:	0e1b      	lsrs	r3, r3, #24
 80150c6:	f363 601f 	bfi	r0, r3, #24, #8
 80150ca:	b002      	add	sp, #8
 80150cc:	4770      	bx	lr
 80150ce:	f100 0c01 	add.w	ip, r0, #1
 80150d2:	fa5f fc8c 	uxtb.w	ip, ip
 80150d6:	e7e0      	b.n	801509a <uxr_stream_id+0xe>
 80150d8:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80150dc:	e7dd      	b.n	801509a <uxr_stream_id+0xe>
 80150de:	bf00      	nop

080150e0 <uxr_stream_id_from_raw>:
 80150e0:	b082      	sub	sp, #8
 80150e2:	b130      	cbz	r0, 80150f2 <uxr_stream_id_from_raw+0x12>
 80150e4:	0603      	lsls	r3, r0, #24
 80150e6:	d420      	bmi.n	801512a <uxr_stream_id_from_raw+0x4a>
 80150e8:	1e42      	subs	r2, r0, #1
 80150ea:	b2d2      	uxtb	r2, r2
 80150ec:	f04f 0c01 	mov.w	ip, #1
 80150f0:	e001      	b.n	80150f6 <uxr_stream_id_from_raw+0x16>
 80150f2:	4684      	mov	ip, r0
 80150f4:	4602      	mov	r2, r0
 80150f6:	2300      	movs	r3, #0
 80150f8:	f360 0307 	bfi	r3, r0, #0, #8
 80150fc:	f362 230f 	bfi	r3, r2, #8, #8
 8015100:	f36c 4317 	bfi	r3, ip, #16, #8
 8015104:	f361 631f 	bfi	r3, r1, #24, #8
 8015108:	b2da      	uxtb	r2, r3
 801510a:	2000      	movs	r0, #0
 801510c:	f362 0007 	bfi	r0, r2, #0, #8
 8015110:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015114:	f362 200f 	bfi	r0, r2, #8, #8
 8015118:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801511c:	f362 4017 	bfi	r0, r2, #16, #8
 8015120:	0e1b      	lsrs	r3, r3, #24
 8015122:	f363 601f 	bfi	r0, r3, #24, #8
 8015126:	b002      	add	sp, #8
 8015128:	4770      	bx	lr
 801512a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801512e:	f04f 0c02 	mov.w	ip, #2
 8015132:	e7e0      	b.n	80150f6 <uxr_stream_id_from_raw+0x16>

08015134 <uxr_init_stream_storage>:
 8015134:	2300      	movs	r3, #0
 8015136:	7403      	strb	r3, [r0, #16]
 8015138:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801513c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8015140:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8015144:	4770      	bx	lr
 8015146:	bf00      	nop

08015148 <uxr_reset_stream_storage>:
 8015148:	b570      	push	{r4, r5, r6, lr}
 801514a:	7c03      	ldrb	r3, [r0, #16]
 801514c:	4604      	mov	r4, r0
 801514e:	b153      	cbz	r3, 8015166 <uxr_reset_stream_storage+0x1e>
 8015150:	4606      	mov	r6, r0
 8015152:	2500      	movs	r5, #0
 8015154:	4630      	mov	r0, r6
 8015156:	f005 fe3f 	bl	801add8 <uxr_reset_output_best_effort_stream>
 801515a:	7c23      	ldrb	r3, [r4, #16]
 801515c:	3501      	adds	r5, #1
 801515e:	42ab      	cmp	r3, r5
 8015160:	f106 0610 	add.w	r6, r6, #16
 8015164:	d8f6      	bhi.n	8015154 <uxr_reset_stream_storage+0xc>
 8015166:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801516a:	b163      	cbz	r3, 8015186 <uxr_reset_stream_storage+0x3e>
 801516c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015170:	2500      	movs	r5, #0
 8015172:	4630      	mov	r0, r6
 8015174:	f005 fc32 	bl	801a9dc <uxr_reset_input_best_effort_stream>
 8015178:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801517c:	3501      	adds	r5, #1
 801517e:	42ab      	cmp	r3, r5
 8015180:	f106 0602 	add.w	r6, r6, #2
 8015184:	d8f5      	bhi.n	8015172 <uxr_reset_stream_storage+0x2a>
 8015186:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801518a:	b163      	cbz	r3, 80151a6 <uxr_reset_stream_storage+0x5e>
 801518c:	f104 0618 	add.w	r6, r4, #24
 8015190:	2500      	movs	r5, #0
 8015192:	4630      	mov	r0, r6
 8015194:	f005 fecc 	bl	801af30 <uxr_reset_output_reliable_stream>
 8015198:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801519c:	3501      	adds	r5, #1
 801519e:	42ab      	cmp	r3, r5
 80151a0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80151a4:	d8f5      	bhi.n	8015192 <uxr_reset_stream_storage+0x4a>
 80151a6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80151aa:	b163      	cbz	r3, 80151c6 <uxr_reset_stream_storage+0x7e>
 80151ac:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80151b0:	2500      	movs	r5, #0
 80151b2:	4630      	mov	r0, r6
 80151b4:	f005 fc86 	bl	801aac4 <uxr_reset_input_reliable_stream>
 80151b8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80151bc:	3501      	adds	r5, #1
 80151be:	42ab      	cmp	r3, r5
 80151c0:	f106 0618 	add.w	r6, r6, #24
 80151c4:	d8f5      	bhi.n	80151b2 <uxr_reset_stream_storage+0x6a>
 80151c6:	bd70      	pop	{r4, r5, r6, pc}

080151c8 <uxr_add_output_best_effort_buffer>:
 80151c8:	b510      	push	{r4, lr}
 80151ca:	7c04      	ldrb	r4, [r0, #16]
 80151cc:	f104 0c01 	add.w	ip, r4, #1
 80151d0:	b082      	sub	sp, #8
 80151d2:	f880 c010 	strb.w	ip, [r0, #16]
 80151d6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80151da:	f005 fdf3 	bl	801adc4 <uxr_init_output_best_effort_stream>
 80151de:	2201      	movs	r2, #1
 80151e0:	4611      	mov	r1, r2
 80151e2:	4620      	mov	r0, r4
 80151e4:	b002      	add	sp, #8
 80151e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151ea:	f7ff bf4f 	b.w	801508c <uxr_stream_id>
 80151ee:	bf00      	nop

080151f0 <uxr_add_output_reliable_buffer>:
 80151f0:	b510      	push	{r4, lr}
 80151f2:	b084      	sub	sp, #16
 80151f4:	4684      	mov	ip, r0
 80151f6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80151fa:	9000      	str	r0, [sp, #0]
 80151fc:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8015200:	2028      	movs	r0, #40	@ 0x28
 8015202:	fb00 c004 	mla	r0, r0, r4, ip
 8015206:	f104 0e01 	add.w	lr, r4, #1
 801520a:	3018      	adds	r0, #24
 801520c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8015210:	f005 fe56 	bl	801aec0 <uxr_init_output_reliable_stream>
 8015214:	2201      	movs	r2, #1
 8015216:	2102      	movs	r1, #2
 8015218:	4620      	mov	r0, r4
 801521a:	b004      	add	sp, #16
 801521c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015220:	f7ff bf34 	b.w	801508c <uxr_stream_id>

08015224 <uxr_add_input_best_effort_buffer>:
 8015224:	b510      	push	{r4, lr}
 8015226:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801522a:	4603      	mov	r3, r0
 801522c:	1c62      	adds	r2, r4, #1
 801522e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8015232:	b082      	sub	sp, #8
 8015234:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8015238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801523c:	f005 fbca 	bl	801a9d4 <uxr_init_input_best_effort_stream>
 8015240:	2200      	movs	r2, #0
 8015242:	2101      	movs	r1, #1
 8015244:	4620      	mov	r0, r4
 8015246:	b002      	add	sp, #8
 8015248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801524c:	f7ff bf1e 	b.w	801508c <uxr_stream_id>

08015250 <uxr_add_input_reliable_buffer>:
 8015250:	b510      	push	{r4, lr}
 8015252:	b084      	sub	sp, #16
 8015254:	4684      	mov	ip, r0
 8015256:	9806      	ldr	r0, [sp, #24]
 8015258:	9000      	str	r0, [sp, #0]
 801525a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801525e:	2018      	movs	r0, #24
 8015260:	fb00 c004 	mla	r0, r0, r4, ip
 8015264:	f104 0e01 	add.w	lr, r4, #1
 8015268:	3048      	adds	r0, #72	@ 0x48
 801526a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801526e:	f005 fbfd 	bl	801aa6c <uxr_init_input_reliable_stream>
 8015272:	2200      	movs	r2, #0
 8015274:	2102      	movs	r1, #2
 8015276:	4620      	mov	r0, r4
 8015278:	b004      	add	sp, #16
 801527a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801527e:	f7ff bf05 	b.w	801508c <uxr_stream_id>
 8015282:	bf00      	nop

08015284 <uxr_get_output_best_effort_stream>:
 8015284:	7c03      	ldrb	r3, [r0, #16]
 8015286:	428b      	cmp	r3, r1
 8015288:	bf8c      	ite	hi
 801528a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801528e:	2000      	movls	r0, #0
 8015290:	4770      	bx	lr
 8015292:	bf00      	nop

08015294 <uxr_get_output_reliable_stream>:
 8015294:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8015298:	428b      	cmp	r3, r1
 801529a:	bf83      	ittte	hi
 801529c:	2328      	movhi	r3, #40	@ 0x28
 801529e:	fb03 0001 	mlahi	r0, r3, r1, r0
 80152a2:	3018      	addhi	r0, #24
 80152a4:	2000      	movls	r0, #0
 80152a6:	4770      	bx	lr

080152a8 <uxr_get_input_best_effort_stream>:
 80152a8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80152ac:	428b      	cmp	r3, r1
 80152ae:	bf86      	itte	hi
 80152b0:	3121      	addhi	r1, #33	@ 0x21
 80152b2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80152b6:	2000      	movls	r0, #0
 80152b8:	4770      	bx	lr
 80152ba:	bf00      	nop

080152bc <uxr_get_input_reliable_stream>:
 80152bc:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80152c0:	428b      	cmp	r3, r1
 80152c2:	bf83      	ittte	hi
 80152c4:	2318      	movhi	r3, #24
 80152c6:	fb03 0001 	mlahi	r0, r3, r1, r0
 80152ca:	3048      	addhi	r0, #72	@ 0x48
 80152cc:	2000      	movls	r0, #0
 80152ce:	4770      	bx	lr

080152d0 <uxr_output_streams_confirmed>:
 80152d0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80152d4:	b183      	cbz	r3, 80152f8 <uxr_output_streams_confirmed+0x28>
 80152d6:	b570      	push	{r4, r5, r6, lr}
 80152d8:	4606      	mov	r6, r0
 80152da:	f100 0518 	add.w	r5, r0, #24
 80152de:	2400      	movs	r4, #0
 80152e0:	e001      	b.n	80152e6 <uxr_output_streams_confirmed+0x16>
 80152e2:	3528      	adds	r5, #40	@ 0x28
 80152e4:	b138      	cbz	r0, 80152f6 <uxr_output_streams_confirmed+0x26>
 80152e6:	4628      	mov	r0, r5
 80152e8:	f006 f892 	bl	801b410 <uxr_is_output_up_to_date>
 80152ec:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80152f0:	3401      	adds	r4, #1
 80152f2:	42a3      	cmp	r3, r4
 80152f4:	d8f5      	bhi.n	80152e2 <uxr_output_streams_confirmed+0x12>
 80152f6:	bd70      	pop	{r4, r5, r6, pc}
 80152f8:	2001      	movs	r0, #1
 80152fa:	4770      	bx	lr

080152fc <uxr_buffer_submessage_header>:
 80152fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152fe:	4604      	mov	r4, r0
 8015300:	460e      	mov	r6, r1
 8015302:	2104      	movs	r1, #4
 8015304:	4615      	mov	r5, r2
 8015306:	461f      	mov	r7, r3
 8015308:	f7fa f808 	bl	800f31c <ucdr_align_to>
 801530c:	2301      	movs	r3, #1
 801530e:	ea47 0203 	orr.w	r2, r7, r3
 8015312:	4631      	mov	r1, r6
 8015314:	7523      	strb	r3, [r4, #20]
 8015316:	4620      	mov	r0, r4
 8015318:	462b      	mov	r3, r5
 801531a:	f000 fa27 	bl	801576c <uxr_serialize_submessage_header>
 801531e:	4620      	mov	r0, r4
 8015320:	f7fa f812 	bl	800f348 <ucdr_buffer_remaining>
 8015324:	42a8      	cmp	r0, r5
 8015326:	bf34      	ite	cc
 8015328:	2000      	movcc	r0, #0
 801532a:	2001      	movcs	r0, #1
 801532c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801532e:	bf00      	nop

08015330 <uxr_read_submessage_header>:
 8015330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015334:	4604      	mov	r4, r0
 8015336:	460d      	mov	r5, r1
 8015338:	2104      	movs	r1, #4
 801533a:	4616      	mov	r6, r2
 801533c:	4698      	mov	r8, r3
 801533e:	f7f9 ffed 	bl	800f31c <ucdr_align_to>
 8015342:	4620      	mov	r0, r4
 8015344:	f7fa f800 	bl	800f348 <ucdr_buffer_remaining>
 8015348:	2803      	cmp	r0, #3
 801534a:	bf8c      	ite	hi
 801534c:	2701      	movhi	r7, #1
 801534e:	2700      	movls	r7, #0
 8015350:	d802      	bhi.n	8015358 <uxr_read_submessage_header+0x28>
 8015352:	4638      	mov	r0, r7
 8015354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015358:	4633      	mov	r3, r6
 801535a:	4642      	mov	r2, r8
 801535c:	4620      	mov	r0, r4
 801535e:	4629      	mov	r1, r5
 8015360:	f000 fa18 	bl	8015794 <uxr_deserialize_submessage_header>
 8015364:	f898 3000 	ldrb.w	r3, [r8]
 8015368:	f003 0201 	and.w	r2, r3, #1
 801536c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8015370:	f888 3000 	strb.w	r3, [r8]
 8015374:	7522      	strb	r2, [r4, #20]
 8015376:	4638      	mov	r0, r7
 8015378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801537c <uxr_submessage_padding>:
 801537c:	f010 0003 	ands.w	r0, r0, #3
 8015380:	bf18      	it	ne
 8015382:	f1c0 0004 	rsbne	r0, r0, #4
 8015386:	4770      	bx	lr

08015388 <uxr_millis>:
 8015388:	b510      	push	{r4, lr}
 801538a:	b084      	sub	sp, #16
 801538c:	4669      	mov	r1, sp
 801538e:	2001      	movs	r0, #1
 8015390:	f7ed fdf6 	bl	8002f80 <clock_gettime>
 8015394:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8015398:	4906      	ldr	r1, [pc, #24]	@ (80153b4 <uxr_millis+0x2c>)
 801539a:	fba0 0301 	umull	r0, r3, r0, r1
 801539e:	1900      	adds	r0, r0, r4
 80153a0:	fb01 3102 	mla	r1, r1, r2, r3
 80153a4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80153a8:	4a03      	ldr	r2, [pc, #12]	@ (80153b8 <uxr_millis+0x30>)
 80153aa:	2300      	movs	r3, #0
 80153ac:	f7eb fc0c 	bl	8000bc8 <__aeabi_ldivmod>
 80153b0:	b004      	add	sp, #16
 80153b2:	bd10      	pop	{r4, pc}
 80153b4:	3b9aca00 	.word	0x3b9aca00
 80153b8:	000f4240 	.word	0x000f4240

080153bc <uxr_nanos>:
 80153bc:	b510      	push	{r4, lr}
 80153be:	b084      	sub	sp, #16
 80153c0:	4669      	mov	r1, sp
 80153c2:	2001      	movs	r0, #1
 80153c4:	f7ed fddc 	bl	8002f80 <clock_gettime>
 80153c8:	4a06      	ldr	r2, [pc, #24]	@ (80153e4 <uxr_nanos+0x28>)
 80153ca:	9800      	ldr	r0, [sp, #0]
 80153cc:	9902      	ldr	r1, [sp, #8]
 80153ce:	9c01      	ldr	r4, [sp, #4]
 80153d0:	fba0 0302 	umull	r0, r3, r0, r2
 80153d4:	1840      	adds	r0, r0, r1
 80153d6:	fb02 3304 	mla	r3, r2, r4, r3
 80153da:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80153de:	b004      	add	sp, #16
 80153e0:	bd10      	pop	{r4, pc}
 80153e2:	bf00      	nop
 80153e4:	3b9aca00 	.word	0x3b9aca00

080153e8 <on_full_output_buffer_fragmented>:
 80153e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153ec:	460c      	mov	r4, r1
 80153ee:	b08a      	sub	sp, #40	@ 0x28
 80153f0:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80153f4:	4606      	mov	r6, r0
 80153f6:	f104 0008 	add.w	r0, r4, #8
 80153fa:	f7ff ff4b 	bl	8015294 <uxr_get_output_reliable_stream>
 80153fe:	4605      	mov	r5, r0
 8015400:	f006 f810 	bl	801b424 <get_available_free_slots>
 8015404:	b968      	cbnz	r0, 8015422 <on_full_output_buffer_fragmented+0x3a>
 8015406:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 801540a:	4620      	mov	r0, r4
 801540c:	4798      	blx	r3
 801540e:	b918      	cbnz	r0, 8015418 <on_full_output_buffer_fragmented+0x30>
 8015410:	2001      	movs	r0, #1
 8015412:	b00a      	add	sp, #40	@ 0x28
 8015414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015418:	4628      	mov	r0, r5
 801541a:	f006 f803 	bl	801b424 <get_available_free_slots>
 801541e:	2800      	cmp	r0, #0
 8015420:	d0f6      	beq.n	8015410 <on_full_output_buffer_fragmented+0x28>
 8015422:	8929      	ldrh	r1, [r5, #8]
 8015424:	89eb      	ldrh	r3, [r5, #14]
 8015426:	7b28      	ldrb	r0, [r5, #12]
 8015428:	686a      	ldr	r2, [r5, #4]
 801542a:	fbb2 f8f1 	udiv	r8, r2, r1
 801542e:	fbb3 f2f1 	udiv	r2, r3, r1
 8015432:	fb01 3112 	mls	r1, r1, r2, r3
 8015436:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 801543a:	b289      	uxth	r1, r1
 801543c:	fb08 f101 	mul.w	r1, r8, r1
 8015440:	30fc      	adds	r0, #252	@ 0xfc
 8015442:	f1a8 0804 	sub.w	r8, r8, #4
 8015446:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801544a:	4440      	add	r0, r8
 801544c:	b287      	uxth	r7, r0
 801544e:	1bdb      	subs	r3, r3, r7
 8015450:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8015454:	682b      	ldr	r3, [r5, #0]
 8015456:	3104      	adds	r1, #4
 8015458:	4419      	add	r1, r3
 801545a:	4642      	mov	r2, r8
 801545c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015460:	9300      	str	r3, [sp, #0]
 8015462:	a802      	add	r0, sp, #8
 8015464:	2300      	movs	r3, #0
 8015466:	f7f9 ff2d 	bl	800f2c4 <ucdr_init_buffer_origin_offset>
 801546a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801546e:	f102 0308 	add.w	r3, r2, #8
 8015472:	4543      	cmp	r3, r8
 8015474:	d928      	bls.n	80154c8 <on_full_output_buffer_fragmented+0xe0>
 8015476:	463a      	mov	r2, r7
 8015478:	2300      	movs	r3, #0
 801547a:	210d      	movs	r1, #13
 801547c:	a802      	add	r0, sp, #8
 801547e:	f7ff ff3d 	bl	80152fc <uxr_buffer_submessage_header>
 8015482:	8929      	ldrh	r1, [r5, #8]
 8015484:	89eb      	ldrh	r3, [r5, #14]
 8015486:	fbb3 f2f1 	udiv	r2, r3, r1
 801548a:	fb01 3312 	mls	r3, r1, r2, r3
 801548e:	b29b      	uxth	r3, r3
 8015490:	686a      	ldr	r2, [r5, #4]
 8015492:	fbb2 f2f1 	udiv	r2, r2, r1
 8015496:	fb02 f303 	mul.w	r3, r2, r3
 801549a:	682a      	ldr	r2, [r5, #0]
 801549c:	f842 8003 	str.w	r8, [r2, r3]
 80154a0:	89e8      	ldrh	r0, [r5, #14]
 80154a2:	2101      	movs	r1, #1
 80154a4:	f005 ffde 	bl	801b464 <uxr_seq_num_add>
 80154a8:	9904      	ldr	r1, [sp, #16]
 80154aa:	9a03      	ldr	r2, [sp, #12]
 80154ac:	81e8      	strh	r0, [r5, #14]
 80154ae:	1a52      	subs	r2, r2, r1
 80154b0:	4630      	mov	r0, r6
 80154b2:	f7f9 ff19 	bl	800f2e8 <ucdr_init_buffer>
 80154b6:	4630      	mov	r0, r6
 80154b8:	490f      	ldr	r1, [pc, #60]	@ (80154f8 <on_full_output_buffer_fragmented+0x110>)
 80154ba:	4622      	mov	r2, r4
 80154bc:	f7f9 fee8 	bl	800f290 <ucdr_set_on_full_buffer_callback>
 80154c0:	2000      	movs	r0, #0
 80154c2:	b00a      	add	sp, #40	@ 0x28
 80154c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154c8:	b292      	uxth	r2, r2
 80154ca:	2302      	movs	r3, #2
 80154cc:	210d      	movs	r1, #13
 80154ce:	a802      	add	r0, sp, #8
 80154d0:	f7ff ff14 	bl	80152fc <uxr_buffer_submessage_header>
 80154d4:	8928      	ldrh	r0, [r5, #8]
 80154d6:	89eb      	ldrh	r3, [r5, #14]
 80154d8:	fbb3 f1f0 	udiv	r1, r3, r0
 80154dc:	fb00 3311 	mls	r3, r0, r1, r3
 80154e0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80154e4:	6869      	ldr	r1, [r5, #4]
 80154e6:	fbb1 f1f0 	udiv	r1, r1, r0
 80154ea:	b29b      	uxth	r3, r3
 80154ec:	fb01 f303 	mul.w	r3, r1, r3
 80154f0:	6829      	ldr	r1, [r5, #0]
 80154f2:	3208      	adds	r2, #8
 80154f4:	50ca      	str	r2, [r1, r3]
 80154f6:	e7d3      	b.n	80154a0 <on_full_output_buffer_fragmented+0xb8>
 80154f8:	080153e9 	.word	0x080153e9

080154fc <uxr_prepare_output_stream>:
 80154fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154fe:	b087      	sub	sp, #28
 8015500:	2707      	movs	r7, #7
 8015502:	9202      	str	r2, [sp, #8]
 8015504:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015506:	9103      	str	r1, [sp, #12]
 8015508:	2500      	movs	r5, #0
 801550a:	3204      	adds	r2, #4
 801550c:	e9cd 7500 	strd	r7, r5, [sp]
 8015510:	461c      	mov	r4, r3
 8015512:	4606      	mov	r6, r0
 8015514:	f7fe ffc2 	bl	801449c <uxr_prepare_stream_to_write_submessage>
 8015518:	f080 0201 	eor.w	r2, r0, #1
 801551c:	b2d2      	uxtb	r2, r2
 801551e:	75a2      	strb	r2, [r4, #22]
 8015520:	b112      	cbz	r2, 8015528 <uxr_prepare_output_stream+0x2c>
 8015522:	4628      	mov	r0, r5
 8015524:	b007      	add	sp, #28
 8015526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015528:	aa05      	add	r2, sp, #20
 801552a:	9902      	ldr	r1, [sp, #8]
 801552c:	4630      	mov	r0, r6
 801552e:	f7ff f8eb 	bl	8014708 <uxr_init_base_object_request>
 8015532:	a905      	add	r1, sp, #20
 8015534:	4605      	mov	r5, r0
 8015536:	4620      	mov	r0, r4
 8015538:	f000 ffd4 	bl	80164e4 <uxr_serialize_WRITE_DATA_Payload_Data>
 801553c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8015540:	69a6      	ldr	r6, [r4, #24]
 8015542:	69e7      	ldr	r7, [r4, #28]
 8015544:	1a52      	subs	r2, r2, r1
 8015546:	4620      	mov	r0, r4
 8015548:	f7f9 fece 	bl	800f2e8 <ucdr_init_buffer>
 801554c:	4620      	mov	r0, r4
 801554e:	463a      	mov	r2, r7
 8015550:	4631      	mov	r1, r6
 8015552:	f7f9 fe9d 	bl	800f290 <ucdr_set_on_full_buffer_callback>
 8015556:	4628      	mov	r0, r5
 8015558:	b007      	add	sp, #28
 801555a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801555c <uxr_prepare_output_stream_fragmented>:
 801555c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015560:	b091      	sub	sp, #68	@ 0x44
 8015562:	4605      	mov	r5, r0
 8015564:	9105      	str	r1, [sp, #20]
 8015566:	3008      	adds	r0, #8
 8015568:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801556c:	461e      	mov	r6, r3
 801556e:	9204      	str	r2, [sp, #16]
 8015570:	f7ff fe90 	bl	8015294 <uxr_get_output_reliable_stream>
 8015574:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8015578:	2b01      	cmp	r3, #1
 801557a:	f000 8091 	beq.w	80156a0 <uxr_prepare_output_stream_fragmented+0x144>
 801557e:	4604      	mov	r4, r0
 8015580:	2800      	cmp	r0, #0
 8015582:	f000 808d 	beq.w	80156a0 <uxr_prepare_output_stream_fragmented+0x144>
 8015586:	f005 ff4d 	bl	801b424 <get_available_free_slots>
 801558a:	2800      	cmp	r0, #0
 801558c:	f000 8083 	beq.w	8015696 <uxr_prepare_output_stream_fragmented+0x13a>
 8015590:	8922      	ldrh	r2, [r4, #8]
 8015592:	89e7      	ldrh	r7, [r4, #14]
 8015594:	fbb7 f9f2 	udiv	r9, r7, r2
 8015598:	fb02 7919 	mls	r9, r2, r9, r7
 801559c:	fa1f f989 	uxth.w	r9, r9
 80155a0:	6863      	ldr	r3, [r4, #4]
 80155a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80155a6:	6823      	ldr	r3, [r4, #0]
 80155a8:	9203      	str	r2, [sp, #12]
 80155aa:	fb02 f909 	mul.w	r9, r2, r9
 80155ae:	f109 0904 	add.w	r9, r9, #4
 80155b2:	4499      	add	r9, r3
 80155b4:	7b23      	ldrb	r3, [r4, #12]
 80155b6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80155ba:	4543      	cmp	r3, r8
 80155bc:	f1a2 0b04 	sub.w	fp, r2, #4
 80155c0:	d37a      	bcc.n	80156b8 <uxr_prepare_output_stream_fragmented+0x15c>
 80155c2:	f1ab 0a04 	sub.w	sl, fp, #4
 80155c6:	ebaa 0a03 	sub.w	sl, sl, r3
 80155ca:	465a      	mov	r2, fp
 80155cc:	2300      	movs	r3, #0
 80155ce:	4649      	mov	r1, r9
 80155d0:	a808      	add	r0, sp, #32
 80155d2:	f8cd 8000 	str.w	r8, [sp]
 80155d6:	f7f9 fe75 	bl	800f2c4 <ucdr_init_buffer_origin_offset>
 80155da:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80155dc:	fa1f fa8a 	uxth.w	sl, sl
 80155e0:	4652      	mov	r2, sl
 80155e2:	f103 0a08 	add.w	sl, r3, #8
 80155e6:	45da      	cmp	sl, fp
 80155e8:	bf34      	ite	cc
 80155ea:	2302      	movcc	r3, #2
 80155ec:	2300      	movcs	r3, #0
 80155ee:	210d      	movs	r1, #13
 80155f0:	a808      	add	r0, sp, #32
 80155f2:	f7ff fe83 	bl	80152fc <uxr_buffer_submessage_header>
 80155f6:	8921      	ldrh	r1, [r4, #8]
 80155f8:	fbb7 f2f1 	udiv	r2, r7, r1
 80155fc:	fb01 7212 	mls	r2, r1, r2, r7
 8015600:	b292      	uxth	r2, r2
 8015602:	6863      	ldr	r3, [r4, #4]
 8015604:	fbb3 f3f1 	udiv	r3, r3, r1
 8015608:	fb02 f303 	mul.w	r3, r2, r3
 801560c:	6822      	ldr	r2, [r4, #0]
 801560e:	4638      	mov	r0, r7
 8015610:	f842 b003 	str.w	fp, [r2, r3]
 8015614:	2101      	movs	r1, #1
 8015616:	f005 ff25 	bl	801b464 <uxr_seq_num_add>
 801561a:	9b03      	ldr	r3, [sp, #12]
 801561c:	f108 0104 	add.w	r1, r8, #4
 8015620:	f1a3 0208 	sub.w	r2, r3, #8
 8015624:	eba2 0208 	sub.w	r2, r2, r8
 8015628:	4449      	add	r1, r9
 801562a:	4607      	mov	r7, r0
 801562c:	4630      	mov	r0, r6
 801562e:	f7f9 fe5b 	bl	800f2e8 <ucdr_init_buffer>
 8015632:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8015634:	81e7      	strh	r7, [r4, #14]
 8015636:	1d1a      	adds	r2, r3, #4
 8015638:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801563c:	bf28      	it	cs
 801563e:	2200      	movcs	r2, #0
 8015640:	2300      	movs	r3, #0
 8015642:	b292      	uxth	r2, r2
 8015644:	2107      	movs	r1, #7
 8015646:	4630      	mov	r0, r6
 8015648:	f7ff fe58 	bl	80152fc <uxr_buffer_submessage_header>
 801564c:	9904      	ldr	r1, [sp, #16]
 801564e:	aa07      	add	r2, sp, #28
 8015650:	4628      	mov	r0, r5
 8015652:	f7ff f859 	bl	8014708 <uxr_init_base_object_request>
 8015656:	4604      	mov	r4, r0
 8015658:	b318      	cbz	r0, 80156a2 <uxr_prepare_output_stream_fragmented+0x146>
 801565a:	a907      	add	r1, sp, #28
 801565c:	4630      	mov	r0, r6
 801565e:	f000 ff41 	bl	80164e4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8015662:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8015666:	4630      	mov	r0, r6
 8015668:	1a52      	subs	r2, r2, r1
 801566a:	f7f9 fe3d 	bl	800f2e8 <ucdr_init_buffer>
 801566e:	9b05      	ldr	r3, [sp, #20]
 8015670:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8015674:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8015676:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801567a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801567c:	491b      	ldr	r1, [pc, #108]	@ (80156ec <uxr_prepare_output_stream_fragmented+0x190>)
 801567e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8015682:	4630      	mov	r0, r6
 8015684:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8015688:	462a      	mov	r2, r5
 801568a:	f7f9 fe01 	bl	800f290 <ucdr_set_on_full_buffer_callback>
 801568e:	4620      	mov	r0, r4
 8015690:	b011      	add	sp, #68	@ 0x44
 8015692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015696:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8015698:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801569a:	4628      	mov	r0, r5
 801569c:	4798      	blx	r3
 801569e:	b920      	cbnz	r0, 80156aa <uxr_prepare_output_stream_fragmented+0x14e>
 80156a0:	2400      	movs	r4, #0
 80156a2:	4620      	mov	r0, r4
 80156a4:	b011      	add	sp, #68	@ 0x44
 80156a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156aa:	4620      	mov	r0, r4
 80156ac:	f005 feba 	bl	801b424 <get_available_free_slots>
 80156b0:	2800      	cmp	r0, #0
 80156b2:	f47f af6d 	bne.w	8015590 <uxr_prepare_output_stream_fragmented+0x34>
 80156b6:	e7f3      	b.n	80156a0 <uxr_prepare_output_stream_fragmented+0x144>
 80156b8:	4638      	mov	r0, r7
 80156ba:	2101      	movs	r1, #1
 80156bc:	f005 fed2 	bl	801b464 <uxr_seq_num_add>
 80156c0:	8921      	ldrh	r1, [r4, #8]
 80156c2:	fbb0 f2f1 	udiv	r2, r0, r1
 80156c6:	fb01 0912 	mls	r9, r1, r2, r0
 80156ca:	fa1f f289 	uxth.w	r2, r9
 80156ce:	6863      	ldr	r3, [r4, #4]
 80156d0:	fbb3 f9f1 	udiv	r9, r3, r1
 80156d4:	6823      	ldr	r3, [r4, #0]
 80156d6:	fb02 f909 	mul.w	r9, r2, r9
 80156da:	f109 0904 	add.w	r9, r9, #4
 80156de:	4499      	add	r9, r3
 80156e0:	4607      	mov	r7, r0
 80156e2:	7b23      	ldrb	r3, [r4, #12]
 80156e4:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80156e8:	e76b      	b.n	80155c2 <uxr_prepare_output_stream_fragmented+0x66>
 80156ea:	bf00      	nop
 80156ec:	080153e9 	.word	0x080153e9

080156f0 <uxr_serialize_message_header>:
 80156f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156f2:	b083      	sub	sp, #12
 80156f4:	4616      	mov	r6, r2
 80156f6:	4604      	mov	r4, r0
 80156f8:	9301      	str	r3, [sp, #4]
 80156fa:	460d      	mov	r5, r1
 80156fc:	9f08      	ldr	r7, [sp, #32]
 80156fe:	f7f8 fb11 	bl	800dd24 <ucdr_serialize_uint8_t>
 8015702:	4631      	mov	r1, r6
 8015704:	4620      	mov	r0, r4
 8015706:	f7f8 fb0d 	bl	800dd24 <ucdr_serialize_uint8_t>
 801570a:	9a01      	ldr	r2, [sp, #4]
 801570c:	2101      	movs	r1, #1
 801570e:	4620      	mov	r0, r4
 8015710:	f7f8 fbb4 	bl	800de7c <ucdr_serialize_endian_uint16_t>
 8015714:	062b      	lsls	r3, r5, #24
 8015716:	d501      	bpl.n	801571c <uxr_serialize_message_header+0x2c>
 8015718:	b003      	add	sp, #12
 801571a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801571c:	2204      	movs	r2, #4
 801571e:	4639      	mov	r1, r7
 8015720:	4620      	mov	r0, r4
 8015722:	b003      	add	sp, #12
 8015724:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015728:	f7fd b9a4 	b.w	8012a74 <ucdr_serialize_array_uint8_t>

0801572c <uxr_deserialize_message_header>:
 801572c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801572e:	b083      	sub	sp, #12
 8015730:	4616      	mov	r6, r2
 8015732:	4604      	mov	r4, r0
 8015734:	9301      	str	r3, [sp, #4]
 8015736:	460d      	mov	r5, r1
 8015738:	9f08      	ldr	r7, [sp, #32]
 801573a:	f7f8 fb09 	bl	800dd50 <ucdr_deserialize_uint8_t>
 801573e:	4631      	mov	r1, r6
 8015740:	4620      	mov	r0, r4
 8015742:	f7f8 fb05 	bl	800dd50 <ucdr_deserialize_uint8_t>
 8015746:	9a01      	ldr	r2, [sp, #4]
 8015748:	2101      	movs	r1, #1
 801574a:	4620      	mov	r0, r4
 801574c:	f7f8 fc8a 	bl	800e064 <ucdr_deserialize_endian_uint16_t>
 8015750:	f995 3000 	ldrsb.w	r3, [r5]
 8015754:	2b00      	cmp	r3, #0
 8015756:	da01      	bge.n	801575c <uxr_deserialize_message_header+0x30>
 8015758:	b003      	add	sp, #12
 801575a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801575c:	2204      	movs	r2, #4
 801575e:	4639      	mov	r1, r7
 8015760:	4620      	mov	r0, r4
 8015762:	b003      	add	sp, #12
 8015764:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015768:	f7fd b9e8 	b.w	8012b3c <ucdr_deserialize_array_uint8_t>

0801576c <uxr_serialize_submessage_header>:
 801576c:	b530      	push	{r4, r5, lr}
 801576e:	b083      	sub	sp, #12
 8015770:	4615      	mov	r5, r2
 8015772:	4604      	mov	r4, r0
 8015774:	9301      	str	r3, [sp, #4]
 8015776:	f7f8 fad5 	bl	800dd24 <ucdr_serialize_uint8_t>
 801577a:	4629      	mov	r1, r5
 801577c:	4620      	mov	r0, r4
 801577e:	f7f8 fad1 	bl	800dd24 <ucdr_serialize_uint8_t>
 8015782:	9a01      	ldr	r2, [sp, #4]
 8015784:	2101      	movs	r1, #1
 8015786:	4620      	mov	r0, r4
 8015788:	b003      	add	sp, #12
 801578a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801578e:	f7f8 bb75 	b.w	800de7c <ucdr_serialize_endian_uint16_t>
 8015792:	bf00      	nop

08015794 <uxr_deserialize_submessage_header>:
 8015794:	b530      	push	{r4, r5, lr}
 8015796:	b083      	sub	sp, #12
 8015798:	4615      	mov	r5, r2
 801579a:	4604      	mov	r4, r0
 801579c:	9301      	str	r3, [sp, #4]
 801579e:	f7f8 fad7 	bl	800dd50 <ucdr_deserialize_uint8_t>
 80157a2:	4629      	mov	r1, r5
 80157a4:	4620      	mov	r0, r4
 80157a6:	f7f8 fad3 	bl	800dd50 <ucdr_deserialize_uint8_t>
 80157aa:	9a01      	ldr	r2, [sp, #4]
 80157ac:	2101      	movs	r1, #1
 80157ae:	4620      	mov	r0, r4
 80157b0:	b003      	add	sp, #12
 80157b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80157b6:	f7f8 bc55 	b.w	800e064 <ucdr_deserialize_endian_uint16_t>
 80157ba:	bf00      	nop

080157bc <uxr_serialize_CLIENT_Representation>:
 80157bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157c0:	2204      	movs	r2, #4
 80157c2:	460e      	mov	r6, r1
 80157c4:	4605      	mov	r5, r0
 80157c6:	f7fd f955 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 80157ca:	2202      	movs	r2, #2
 80157cc:	4607      	mov	r7, r0
 80157ce:	1d31      	adds	r1, r6, #4
 80157d0:	4628      	mov	r0, r5
 80157d2:	f7fd f94f 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 80157d6:	4038      	ands	r0, r7
 80157d8:	2202      	movs	r2, #2
 80157da:	1db1      	adds	r1, r6, #6
 80157dc:	b2c7      	uxtb	r7, r0
 80157de:	4628      	mov	r0, r5
 80157e0:	f7fd f948 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 80157e4:	2204      	movs	r2, #4
 80157e6:	4007      	ands	r7, r0
 80157e8:	f106 0108 	add.w	r1, r6, #8
 80157ec:	4628      	mov	r0, r5
 80157ee:	f7fd f941 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 80157f2:	7b31      	ldrb	r1, [r6, #12]
 80157f4:	4007      	ands	r7, r0
 80157f6:	4628      	mov	r0, r5
 80157f8:	f7f8 fa94 	bl	800dd24 <ucdr_serialize_uint8_t>
 80157fc:	7b71      	ldrb	r1, [r6, #13]
 80157fe:	4007      	ands	r7, r0
 8015800:	4628      	mov	r0, r5
 8015802:	f7f8 fa61 	bl	800dcc8 <ucdr_serialize_bool>
 8015806:	7b73      	ldrb	r3, [r6, #13]
 8015808:	ea07 0800 	and.w	r8, r7, r0
 801580c:	b93b      	cbnz	r3, 801581e <uxr_serialize_CLIENT_Representation+0x62>
 801580e:	8bb1      	ldrh	r1, [r6, #28]
 8015810:	4628      	mov	r0, r5
 8015812:	f7f8 fab3 	bl	800dd7c <ucdr_serialize_uint16_t>
 8015816:	ea08 0000 	and.w	r0, r8, r0
 801581a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801581e:	6931      	ldr	r1, [r6, #16]
 8015820:	4628      	mov	r0, r5
 8015822:	f7f8 fc95 	bl	800e150 <ucdr_serialize_uint32_t>
 8015826:	6933      	ldr	r3, [r6, #16]
 8015828:	b1e3      	cbz	r3, 8015864 <uxr_serialize_CLIENT_Representation+0xa8>
 801582a:	b1c0      	cbz	r0, 801585e <uxr_serialize_CLIENT_Representation+0xa2>
 801582c:	4637      	mov	r7, r6
 801582e:	f04f 0900 	mov.w	r9, #0
 8015832:	e001      	b.n	8015838 <uxr_serialize_CLIENT_Representation+0x7c>
 8015834:	3708      	adds	r7, #8
 8015836:	b194      	cbz	r4, 801585e <uxr_serialize_CLIENT_Representation+0xa2>
 8015838:	6979      	ldr	r1, [r7, #20]
 801583a:	4628      	mov	r0, r5
 801583c:	f005 f8b2 	bl	801a9a4 <ucdr_serialize_string>
 8015840:	69b9      	ldr	r1, [r7, #24]
 8015842:	4604      	mov	r4, r0
 8015844:	4628      	mov	r0, r5
 8015846:	f005 f8ad 	bl	801a9a4 <ucdr_serialize_string>
 801584a:	6933      	ldr	r3, [r6, #16]
 801584c:	f109 0901 	add.w	r9, r9, #1
 8015850:	4004      	ands	r4, r0
 8015852:	4599      	cmp	r9, r3
 8015854:	b2e4      	uxtb	r4, r4
 8015856:	d3ed      	bcc.n	8015834 <uxr_serialize_CLIENT_Representation+0x78>
 8015858:	ea08 0804 	and.w	r8, r8, r4
 801585c:	e7d7      	b.n	801580e <uxr_serialize_CLIENT_Representation+0x52>
 801585e:	f04f 0800 	mov.w	r8, #0
 8015862:	e7d4      	b.n	801580e <uxr_serialize_CLIENT_Representation+0x52>
 8015864:	ea08 0800 	and.w	r8, r8, r0
 8015868:	e7d1      	b.n	801580e <uxr_serialize_CLIENT_Representation+0x52>
 801586a:	bf00      	nop

0801586c <uxr_deserialize_CLIENT_Representation>:
 801586c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015870:	2204      	movs	r2, #4
 8015872:	460c      	mov	r4, r1
 8015874:	4605      	mov	r5, r0
 8015876:	f7fd f961 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 801587a:	2202      	movs	r2, #2
 801587c:	4607      	mov	r7, r0
 801587e:	1d21      	adds	r1, r4, #4
 8015880:	4628      	mov	r0, r5
 8015882:	f7fd f95b 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8015886:	4038      	ands	r0, r7
 8015888:	2202      	movs	r2, #2
 801588a:	1da1      	adds	r1, r4, #6
 801588c:	b2c6      	uxtb	r6, r0
 801588e:	4628      	mov	r0, r5
 8015890:	f7fd f954 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8015894:	2204      	movs	r2, #4
 8015896:	4006      	ands	r6, r0
 8015898:	f104 0108 	add.w	r1, r4, #8
 801589c:	4628      	mov	r0, r5
 801589e:	f7fd f94d 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 80158a2:	f104 010c 	add.w	r1, r4, #12
 80158a6:	4006      	ands	r6, r0
 80158a8:	4628      	mov	r0, r5
 80158aa:	f7f8 fa51 	bl	800dd50 <ucdr_deserialize_uint8_t>
 80158ae:	f104 010d 	add.w	r1, r4, #13
 80158b2:	ea06 0700 	and.w	r7, r6, r0
 80158b6:	4628      	mov	r0, r5
 80158b8:	f7f8 fa1c 	bl	800dcf4 <ucdr_deserialize_bool>
 80158bc:	7b63      	ldrb	r3, [r4, #13]
 80158be:	4007      	ands	r7, r0
 80158c0:	b93b      	cbnz	r3, 80158d2 <uxr_deserialize_CLIENT_Representation+0x66>
 80158c2:	f104 011c 	add.w	r1, r4, #28
 80158c6:	4628      	mov	r0, r5
 80158c8:	f7f8 fb58 	bl	800df7c <ucdr_deserialize_uint16_t>
 80158cc:	4038      	ands	r0, r7
 80158ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158d2:	f104 0110 	add.w	r1, r4, #16
 80158d6:	4628      	mov	r0, r5
 80158d8:	f7f8 fd6a 	bl	800e3b0 <ucdr_deserialize_uint32_t>
 80158dc:	6923      	ldr	r3, [r4, #16]
 80158de:	2b01      	cmp	r3, #1
 80158e0:	d903      	bls.n	80158ea <uxr_deserialize_CLIENT_Representation+0x7e>
 80158e2:	2301      	movs	r3, #1
 80158e4:	75ab      	strb	r3, [r5, #22]
 80158e6:	2700      	movs	r7, #0
 80158e8:	e7eb      	b.n	80158c2 <uxr_deserialize_CLIENT_Representation+0x56>
 80158ea:	b30b      	cbz	r3, 8015930 <uxr_deserialize_CLIENT_Representation+0xc4>
 80158ec:	2800      	cmp	r0, #0
 80158ee:	d0fa      	beq.n	80158e6 <uxr_deserialize_CLIENT_Representation+0x7a>
 80158f0:	46a0      	mov	r8, r4
 80158f2:	f04f 0900 	mov.w	r9, #0
 80158f6:	e001      	b.n	80158fc <uxr_deserialize_CLIENT_Representation+0x90>
 80158f8:	2e00      	cmp	r6, #0
 80158fa:	d0f4      	beq.n	80158e6 <uxr_deserialize_CLIENT_Representation+0x7a>
 80158fc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015900:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015904:	4628      	mov	r0, r5
 8015906:	f005 f85d 	bl	801a9c4 <ucdr_deserialize_string>
 801590a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801590e:	4606      	mov	r6, r0
 8015910:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8015914:	4628      	mov	r0, r5
 8015916:	f005 f855 	bl	801a9c4 <ucdr_deserialize_string>
 801591a:	6923      	ldr	r3, [r4, #16]
 801591c:	f109 0901 	add.w	r9, r9, #1
 8015920:	4006      	ands	r6, r0
 8015922:	4599      	cmp	r9, r3
 8015924:	f108 0808 	add.w	r8, r8, #8
 8015928:	b2f6      	uxtb	r6, r6
 801592a:	d3e5      	bcc.n	80158f8 <uxr_deserialize_CLIENT_Representation+0x8c>
 801592c:	4037      	ands	r7, r6
 801592e:	e7c8      	b.n	80158c2 <uxr_deserialize_CLIENT_Representation+0x56>
 8015930:	4007      	ands	r7, r0
 8015932:	e7c6      	b.n	80158c2 <uxr_deserialize_CLIENT_Representation+0x56>

08015934 <uxr_serialize_AGENT_Representation>:
 8015934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015938:	2204      	movs	r2, #4
 801593a:	460f      	mov	r7, r1
 801593c:	4605      	mov	r5, r0
 801593e:	f7fd f899 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 8015942:	2202      	movs	r2, #2
 8015944:	4604      	mov	r4, r0
 8015946:	1d39      	adds	r1, r7, #4
 8015948:	4628      	mov	r0, r5
 801594a:	f7fd f893 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 801594e:	4020      	ands	r0, r4
 8015950:	2202      	movs	r2, #2
 8015952:	1db9      	adds	r1, r7, #6
 8015954:	b2c4      	uxtb	r4, r0
 8015956:	4628      	mov	r0, r5
 8015958:	f7fd f88c 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 801595c:	7a39      	ldrb	r1, [r7, #8]
 801595e:	4004      	ands	r4, r0
 8015960:	4628      	mov	r0, r5
 8015962:	f7f8 f9b1 	bl	800dcc8 <ucdr_serialize_bool>
 8015966:	7a3b      	ldrb	r3, [r7, #8]
 8015968:	ea00 0804 	and.w	r8, r0, r4
 801596c:	b913      	cbnz	r3, 8015974 <uxr_serialize_AGENT_Representation+0x40>
 801596e:	4640      	mov	r0, r8
 8015970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015974:	68f9      	ldr	r1, [r7, #12]
 8015976:	4628      	mov	r0, r5
 8015978:	f7f8 fbea 	bl	800e150 <ucdr_serialize_uint32_t>
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	b303      	cbz	r3, 80159c2 <uxr_serialize_AGENT_Representation+0x8e>
 8015980:	b1d0      	cbz	r0, 80159b8 <uxr_serialize_AGENT_Representation+0x84>
 8015982:	463e      	mov	r6, r7
 8015984:	f04f 0900 	mov.w	r9, #0
 8015988:	e001      	b.n	801598e <uxr_serialize_AGENT_Representation+0x5a>
 801598a:	3608      	adds	r6, #8
 801598c:	b1a4      	cbz	r4, 80159b8 <uxr_serialize_AGENT_Representation+0x84>
 801598e:	6931      	ldr	r1, [r6, #16]
 8015990:	4628      	mov	r0, r5
 8015992:	f005 f807 	bl	801a9a4 <ucdr_serialize_string>
 8015996:	6971      	ldr	r1, [r6, #20]
 8015998:	4604      	mov	r4, r0
 801599a:	4628      	mov	r0, r5
 801599c:	f005 f802 	bl	801a9a4 <ucdr_serialize_string>
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	f109 0901 	add.w	r9, r9, #1
 80159a6:	4004      	ands	r4, r0
 80159a8:	4599      	cmp	r9, r3
 80159aa:	b2e4      	uxtb	r4, r4
 80159ac:	d3ed      	bcc.n	801598a <uxr_serialize_AGENT_Representation+0x56>
 80159ae:	ea08 0804 	and.w	r8, r8, r4
 80159b2:	4640      	mov	r0, r8
 80159b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159b8:	f04f 0800 	mov.w	r8, #0
 80159bc:	4640      	mov	r0, r8
 80159be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159c2:	ea08 0800 	and.w	r8, r8, r0
 80159c6:	e7d2      	b.n	801596e <uxr_serialize_AGENT_Representation+0x3a>

080159c8 <uxr_serialize_DATAWRITER_Representation>:
 80159c8:	b570      	push	{r4, r5, r6, lr}
 80159ca:	460d      	mov	r5, r1
 80159cc:	7809      	ldrb	r1, [r1, #0]
 80159ce:	4606      	mov	r6, r0
 80159d0:	f7f8 f9a8 	bl	800dd24 <ucdr_serialize_uint8_t>
 80159d4:	4604      	mov	r4, r0
 80159d6:	b130      	cbz	r0, 80159e6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80159d8:	782b      	ldrb	r3, [r5, #0]
 80159da:	2b02      	cmp	r3, #2
 80159dc:	d00c      	beq.n	80159f8 <uxr_serialize_DATAWRITER_Representation+0x30>
 80159de:	2b03      	cmp	r3, #3
 80159e0:	d010      	beq.n	8015a04 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80159e2:	2b01      	cmp	r3, #1
 80159e4:	d008      	beq.n	80159f8 <uxr_serialize_DATAWRITER_Representation+0x30>
 80159e6:	2202      	movs	r2, #2
 80159e8:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80159ec:	4630      	mov	r0, r6
 80159ee:	f7fd f841 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 80159f2:	4020      	ands	r0, r4
 80159f4:	b2c0      	uxtb	r0, r0
 80159f6:	bd70      	pop	{r4, r5, r6, pc}
 80159f8:	6869      	ldr	r1, [r5, #4]
 80159fa:	4630      	mov	r0, r6
 80159fc:	f004 ffd2 	bl	801a9a4 <ucdr_serialize_string>
 8015a00:	4604      	mov	r4, r0
 8015a02:	e7f0      	b.n	80159e6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015a04:	4629      	mov	r1, r5
 8015a06:	4630      	mov	r0, r6
 8015a08:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8015a0c:	3104      	adds	r1, #4
 8015a0e:	f7fd f9cf 	bl	8012db0 <ucdr_serialize_sequence_uint8_t>
 8015a12:	4604      	mov	r4, r0
 8015a14:	e7e7      	b.n	80159e6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015a16:	bf00      	nop

08015a18 <uxr_serialize_ObjectVariant.part.0>:
 8015a18:	b570      	push	{r4, r5, r6, lr}
 8015a1a:	780b      	ldrb	r3, [r1, #0]
 8015a1c:	3b01      	subs	r3, #1
 8015a1e:	460c      	mov	r4, r1
 8015a20:	4605      	mov	r5, r0
 8015a22:	2b0d      	cmp	r3, #13
 8015a24:	d854      	bhi.n	8015ad0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8015a26:	e8df f003 	tbb	[pc, r3]
 8015a2a:	0730      	.short	0x0730
 8015a2c:	07071b1b 	.word	0x07071b1b
 8015a30:	0c530707 	.word	0x0c530707
 8015a34:	494e0c0c 	.word	0x494e0c0c
 8015a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a3c:	3104      	adds	r1, #4
 8015a3e:	f7ff bfc3 	b.w	80159c8 <uxr_serialize_DATAWRITER_Representation>
 8015a42:	7909      	ldrb	r1, [r1, #4]
 8015a44:	f7f8 f96e 	bl	800dd24 <ucdr_serialize_uint8_t>
 8015a48:	b1e8      	cbz	r0, 8015a86 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8015a4a:	7923      	ldrb	r3, [r4, #4]
 8015a4c:	2b01      	cmp	r3, #1
 8015a4e:	d001      	beq.n	8015a54 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8015a50:	2b02      	cmp	r3, #2
 8015a52:	d13d      	bne.n	8015ad0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8015a54:	68a1      	ldr	r1, [r4, #8]
 8015a56:	4628      	mov	r0, r5
 8015a58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a5c:	f004 bfa2 	b.w	801a9a4 <ucdr_serialize_string>
 8015a60:	7909      	ldrb	r1, [r1, #4]
 8015a62:	f7f8 f95f 	bl	800dd24 <ucdr_serialize_uint8_t>
 8015a66:	4606      	mov	r6, r0
 8015a68:	b120      	cbz	r0, 8015a74 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015a6a:	7923      	ldrb	r3, [r4, #4]
 8015a6c:	2b02      	cmp	r3, #2
 8015a6e:	d039      	beq.n	8015ae4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8015a70:	2b03      	cmp	r3, #3
 8015a72:	d02f      	beq.n	8015ad4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8015a74:	2202      	movs	r2, #2
 8015a76:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8015a7a:	4628      	mov	r0, r5
 8015a7c:	f7fc fffa 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 8015a80:	4030      	ands	r0, r6
 8015a82:	b2c0      	uxtb	r0, r0
 8015a84:	bd70      	pop	{r4, r5, r6, pc}
 8015a86:	2000      	movs	r0, #0
 8015a88:	bd70      	pop	{r4, r5, r6, pc}
 8015a8a:	7909      	ldrb	r1, [r1, #4]
 8015a8c:	f7f8 f94a 	bl	800dd24 <ucdr_serialize_uint8_t>
 8015a90:	4606      	mov	r6, r0
 8015a92:	b158      	cbz	r0, 8015aac <uxr_serialize_ObjectVariant.part.0+0x94>
 8015a94:	7923      	ldrb	r3, [r4, #4]
 8015a96:	2b02      	cmp	r3, #2
 8015a98:	d003      	beq.n	8015aa2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 8015a9a:	2b03      	cmp	r3, #3
 8015a9c:	d028      	beq.n	8015af0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8015a9e:	2b01      	cmp	r3, #1
 8015aa0:	d104      	bne.n	8015aac <uxr_serialize_ObjectVariant.part.0+0x94>
 8015aa2:	68a1      	ldr	r1, [r4, #8]
 8015aa4:	4628      	mov	r0, r5
 8015aa6:	f004 ff7d 	bl	801a9a4 <ucdr_serialize_string>
 8015aaa:	4606      	mov	r6, r0
 8015aac:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8015ab0:	4628      	mov	r0, r5
 8015ab2:	f7f8 fe73 	bl	800e79c <ucdr_serialize_int16_t>
 8015ab6:	4030      	ands	r0, r6
 8015ab8:	b2c0      	uxtb	r0, r0
 8015aba:	bd70      	pop	{r4, r5, r6, pc}
 8015abc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ac0:	3104      	adds	r1, #4
 8015ac2:	f7ff be7b 	b.w	80157bc <uxr_serialize_CLIENT_Representation>
 8015ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015aca:	3104      	adds	r1, #4
 8015acc:	f7ff bf32 	b.w	8015934 <uxr_serialize_AGENT_Representation>
 8015ad0:	2001      	movs	r0, #1
 8015ad2:	bd70      	pop	{r4, r5, r6, pc}
 8015ad4:	68a2      	ldr	r2, [r4, #8]
 8015ad6:	f104 010c 	add.w	r1, r4, #12
 8015ada:	4628      	mov	r0, r5
 8015adc:	f7fd f968 	bl	8012db0 <ucdr_serialize_sequence_uint8_t>
 8015ae0:	4606      	mov	r6, r0
 8015ae2:	e7c7      	b.n	8015a74 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015ae4:	68a1      	ldr	r1, [r4, #8]
 8015ae6:	4628      	mov	r0, r5
 8015ae8:	f004 ff5c 	bl	801a9a4 <ucdr_serialize_string>
 8015aec:	4606      	mov	r6, r0
 8015aee:	e7c1      	b.n	8015a74 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015af0:	68a2      	ldr	r2, [r4, #8]
 8015af2:	f104 010c 	add.w	r1, r4, #12
 8015af6:	4628      	mov	r0, r5
 8015af8:	f7fd f95a 	bl	8012db0 <ucdr_serialize_sequence_uint8_t>
 8015afc:	4606      	mov	r6, r0
 8015afe:	e7d5      	b.n	8015aac <uxr_serialize_ObjectVariant.part.0+0x94>

08015b00 <uxr_deserialize_DATAWRITER_Representation>:
 8015b00:	b570      	push	{r4, r5, r6, lr}
 8015b02:	4606      	mov	r6, r0
 8015b04:	460d      	mov	r5, r1
 8015b06:	f7f8 f923 	bl	800dd50 <ucdr_deserialize_uint8_t>
 8015b0a:	4604      	mov	r4, r0
 8015b0c:	b130      	cbz	r0, 8015b1c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015b0e:	782b      	ldrb	r3, [r5, #0]
 8015b10:	2b02      	cmp	r3, #2
 8015b12:	d00c      	beq.n	8015b2e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8015b14:	2b03      	cmp	r3, #3
 8015b16:	d012      	beq.n	8015b3e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8015b18:	2b01      	cmp	r3, #1
 8015b1a:	d008      	beq.n	8015b2e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8015b1c:	2202      	movs	r2, #2
 8015b1e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8015b22:	4630      	mov	r0, r6
 8015b24:	f7fd f80a 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8015b28:	4020      	ands	r0, r4
 8015b2a:	b2c0      	uxtb	r0, r0
 8015b2c:	bd70      	pop	{r4, r5, r6, pc}
 8015b2e:	6869      	ldr	r1, [r5, #4]
 8015b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015b34:	4630      	mov	r0, r6
 8015b36:	f004 ff45 	bl	801a9c4 <ucdr_deserialize_string>
 8015b3a:	4604      	mov	r4, r0
 8015b3c:	e7ee      	b.n	8015b1c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015b3e:	1d2b      	adds	r3, r5, #4
 8015b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015b44:	f105 0108 	add.w	r1, r5, #8
 8015b48:	4630      	mov	r0, r6
 8015b4a:	f7fd f943 	bl	8012dd4 <ucdr_deserialize_sequence_uint8_t>
 8015b4e:	4604      	mov	r4, r0
 8015b50:	e7e4      	b.n	8015b1c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015b52:	bf00      	nop

08015b54 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8015b54:	b570      	push	{r4, r5, r6, lr}
 8015b56:	460d      	mov	r5, r1
 8015b58:	7809      	ldrb	r1, [r1, #0]
 8015b5a:	4606      	mov	r6, r0
 8015b5c:	f7f8 f8b4 	bl	800dcc8 <ucdr_serialize_bool>
 8015b60:	782b      	ldrb	r3, [r5, #0]
 8015b62:	4604      	mov	r4, r0
 8015b64:	b94b      	cbnz	r3, 8015b7a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8015b66:	7a29      	ldrb	r1, [r5, #8]
 8015b68:	4630      	mov	r0, r6
 8015b6a:	f7f8 f8ad 	bl	800dcc8 <ucdr_serialize_bool>
 8015b6e:	7a2b      	ldrb	r3, [r5, #8]
 8015b70:	4004      	ands	r4, r0
 8015b72:	b2e4      	uxtb	r4, r4
 8015b74:	b943      	cbnz	r3, 8015b88 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8015b76:	4620      	mov	r0, r4
 8015b78:	bd70      	pop	{r4, r5, r6, pc}
 8015b7a:	6869      	ldr	r1, [r5, #4]
 8015b7c:	4630      	mov	r0, r6
 8015b7e:	f004 ff11 	bl	801a9a4 <ucdr_serialize_string>
 8015b82:	4004      	ands	r4, r0
 8015b84:	b2e4      	uxtb	r4, r4
 8015b86:	e7ee      	b.n	8015b66 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8015b88:	68e9      	ldr	r1, [r5, #12]
 8015b8a:	4630      	mov	r0, r6
 8015b8c:	f004 ff0a 	bl	801a9a4 <ucdr_serialize_string>
 8015b90:	4004      	ands	r4, r0
 8015b92:	4620      	mov	r0, r4
 8015b94:	bd70      	pop	{r4, r5, r6, pc}
 8015b96:	bf00      	nop

08015b98 <uxr_serialize_OBJK_Topic_Binary>:
 8015b98:	b570      	push	{r4, r5, r6, lr}
 8015b9a:	460d      	mov	r5, r1
 8015b9c:	6809      	ldr	r1, [r1, #0]
 8015b9e:	4606      	mov	r6, r0
 8015ba0:	f004 ff00 	bl	801a9a4 <ucdr_serialize_string>
 8015ba4:	7929      	ldrb	r1, [r5, #4]
 8015ba6:	4604      	mov	r4, r0
 8015ba8:	4630      	mov	r0, r6
 8015baa:	f7f8 f88d 	bl	800dcc8 <ucdr_serialize_bool>
 8015bae:	792b      	ldrb	r3, [r5, #4]
 8015bb0:	4004      	ands	r4, r0
 8015bb2:	b2e4      	uxtb	r4, r4
 8015bb4:	b943      	cbnz	r3, 8015bc8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8015bb6:	7b29      	ldrb	r1, [r5, #12]
 8015bb8:	4630      	mov	r0, r6
 8015bba:	f7f8 f885 	bl	800dcc8 <ucdr_serialize_bool>
 8015bbe:	7b2b      	ldrb	r3, [r5, #12]
 8015bc0:	4004      	ands	r4, r0
 8015bc2:	b93b      	cbnz	r3, 8015bd4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8015bc4:	4620      	mov	r0, r4
 8015bc6:	bd70      	pop	{r4, r5, r6, pc}
 8015bc8:	68a9      	ldr	r1, [r5, #8]
 8015bca:	4630      	mov	r0, r6
 8015bcc:	f004 feea 	bl	801a9a4 <ucdr_serialize_string>
 8015bd0:	4004      	ands	r4, r0
 8015bd2:	e7f0      	b.n	8015bb6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8015bd4:	6929      	ldr	r1, [r5, #16]
 8015bd6:	4630      	mov	r0, r6
 8015bd8:	f004 fee4 	bl	801a9a4 <ucdr_serialize_string>
 8015bdc:	4004      	ands	r4, r0
 8015bde:	b2e4      	uxtb	r4, r4
 8015be0:	4620      	mov	r0, r4
 8015be2:	bd70      	pop	{r4, r5, r6, pc}

08015be4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8015be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015be8:	460c      	mov	r4, r1
 8015bea:	7809      	ldrb	r1, [r1, #0]
 8015bec:	4606      	mov	r6, r0
 8015bee:	f7f8 f86b 	bl	800dcc8 <ucdr_serialize_bool>
 8015bf2:	7823      	ldrb	r3, [r4, #0]
 8015bf4:	4605      	mov	r5, r0
 8015bf6:	b96b      	cbnz	r3, 8015c14 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8015bf8:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8015bfc:	4630      	mov	r0, r6
 8015bfe:	f7f8 f863 	bl	800dcc8 <ucdr_serialize_bool>
 8015c02:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8015c06:	4005      	ands	r5, r0
 8015c08:	b2ed      	uxtb	r5, r5
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d169      	bne.n	8015ce2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8015c0e:	4628      	mov	r0, r5
 8015c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c14:	6861      	ldr	r1, [r4, #4]
 8015c16:	4630      	mov	r0, r6
 8015c18:	f7f8 fa9a 	bl	800e150 <ucdr_serialize_uint32_t>
 8015c1c:	6863      	ldr	r3, [r4, #4]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d06b      	beq.n	8015cfa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8015c22:	2800      	cmp	r0, #0
 8015c24:	d067      	beq.n	8015cf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015c26:	68a1      	ldr	r1, [r4, #8]
 8015c28:	4630      	mov	r0, r6
 8015c2a:	f004 febb 	bl	801a9a4 <ucdr_serialize_string>
 8015c2e:	6863      	ldr	r3, [r4, #4]
 8015c30:	2b01      	cmp	r3, #1
 8015c32:	d953      	bls.n	8015cdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015c34:	2800      	cmp	r0, #0
 8015c36:	d05e      	beq.n	8015cf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015c38:	68e1      	ldr	r1, [r4, #12]
 8015c3a:	4630      	mov	r0, r6
 8015c3c:	f004 feb2 	bl	801a9a4 <ucdr_serialize_string>
 8015c40:	6863      	ldr	r3, [r4, #4]
 8015c42:	2b02      	cmp	r3, #2
 8015c44:	d94a      	bls.n	8015cdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015c46:	2800      	cmp	r0, #0
 8015c48:	d055      	beq.n	8015cf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015c4a:	6921      	ldr	r1, [r4, #16]
 8015c4c:	4630      	mov	r0, r6
 8015c4e:	f004 fea9 	bl	801a9a4 <ucdr_serialize_string>
 8015c52:	6863      	ldr	r3, [r4, #4]
 8015c54:	2b03      	cmp	r3, #3
 8015c56:	d941      	bls.n	8015cdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015c58:	2800      	cmp	r0, #0
 8015c5a:	d04c      	beq.n	8015cf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015c5c:	6961      	ldr	r1, [r4, #20]
 8015c5e:	4630      	mov	r0, r6
 8015c60:	f004 fea0 	bl	801a9a4 <ucdr_serialize_string>
 8015c64:	6863      	ldr	r3, [r4, #4]
 8015c66:	2b04      	cmp	r3, #4
 8015c68:	d938      	bls.n	8015cdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015c6a:	2800      	cmp	r0, #0
 8015c6c:	d043      	beq.n	8015cf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015c6e:	69a1      	ldr	r1, [r4, #24]
 8015c70:	4630      	mov	r0, r6
 8015c72:	f004 fe97 	bl	801a9a4 <ucdr_serialize_string>
 8015c76:	6863      	ldr	r3, [r4, #4]
 8015c78:	2b05      	cmp	r3, #5
 8015c7a:	d92f      	bls.n	8015cdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015c7c:	2800      	cmp	r0, #0
 8015c7e:	d03a      	beq.n	8015cf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015c80:	69e1      	ldr	r1, [r4, #28]
 8015c82:	4630      	mov	r0, r6
 8015c84:	f004 fe8e 	bl	801a9a4 <ucdr_serialize_string>
 8015c88:	6863      	ldr	r3, [r4, #4]
 8015c8a:	2b06      	cmp	r3, #6
 8015c8c:	d926      	bls.n	8015cdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015c8e:	b390      	cbz	r0, 8015cf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015c90:	6a21      	ldr	r1, [r4, #32]
 8015c92:	4630      	mov	r0, r6
 8015c94:	f004 fe86 	bl	801a9a4 <ucdr_serialize_string>
 8015c98:	6863      	ldr	r3, [r4, #4]
 8015c9a:	2b07      	cmp	r3, #7
 8015c9c:	d91e      	bls.n	8015cdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015c9e:	b350      	cbz	r0, 8015cf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015ca0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8015ca2:	4630      	mov	r0, r6
 8015ca4:	f004 fe7e 	bl	801a9a4 <ucdr_serialize_string>
 8015ca8:	6863      	ldr	r3, [r4, #4]
 8015caa:	2b08      	cmp	r3, #8
 8015cac:	d916      	bls.n	8015cdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015cae:	b310      	cbz	r0, 8015cf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015cb0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8015cb2:	4630      	mov	r0, r6
 8015cb4:	f004 fe76 	bl	801a9a4 <ucdr_serialize_string>
 8015cb8:	6863      	ldr	r3, [r4, #4]
 8015cba:	2b09      	cmp	r3, #9
 8015cbc:	d90e      	bls.n	8015cdc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015cbe:	b1d0      	cbz	r0, 8015cf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015cc0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8015cc4:	2709      	movs	r7, #9
 8015cc6:	e000      	b.n	8015cca <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8015cc8:	b1a8      	cbz	r0, 8015cf6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015cca:	f858 1b04 	ldr.w	r1, [r8], #4
 8015cce:	4630      	mov	r0, r6
 8015cd0:	f004 fe68 	bl	801a9a4 <ucdr_serialize_string>
 8015cd4:	6862      	ldr	r2, [r4, #4]
 8015cd6:	3701      	adds	r7, #1
 8015cd8:	4297      	cmp	r7, r2
 8015cda:	d3f5      	bcc.n	8015cc8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8015cdc:	4005      	ands	r5, r0
 8015cde:	b2ed      	uxtb	r5, r5
 8015ce0:	e78a      	b.n	8015bf8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015ce2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015ce4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015ce8:	4630      	mov	r0, r6
 8015cea:	f7fd f861 	bl	8012db0 <ucdr_serialize_sequence_uint8_t>
 8015cee:	4005      	ands	r5, r0
 8015cf0:	4628      	mov	r0, r5
 8015cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cf6:	2500      	movs	r5, #0
 8015cf8:	e77e      	b.n	8015bf8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015cfa:	4028      	ands	r0, r5
 8015cfc:	b2c5      	uxtb	r5, r0
 8015cfe:	e77b      	b.n	8015bf8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08015d00 <uxr_serialize_OBJK_Publisher_Binary>:
 8015d00:	b570      	push	{r4, r5, r6, lr}
 8015d02:	460d      	mov	r5, r1
 8015d04:	7809      	ldrb	r1, [r1, #0]
 8015d06:	4606      	mov	r6, r0
 8015d08:	f7f7 ffde 	bl	800dcc8 <ucdr_serialize_bool>
 8015d0c:	782b      	ldrb	r3, [r5, #0]
 8015d0e:	4604      	mov	r4, r0
 8015d10:	b94b      	cbnz	r3, 8015d26 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8015d12:	7a29      	ldrb	r1, [r5, #8]
 8015d14:	4630      	mov	r0, r6
 8015d16:	f7f7 ffd7 	bl	800dcc8 <ucdr_serialize_bool>
 8015d1a:	7a2b      	ldrb	r3, [r5, #8]
 8015d1c:	4004      	ands	r4, r0
 8015d1e:	b2e4      	uxtb	r4, r4
 8015d20:	b943      	cbnz	r3, 8015d34 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8015d22:	4620      	mov	r0, r4
 8015d24:	bd70      	pop	{r4, r5, r6, pc}
 8015d26:	6869      	ldr	r1, [r5, #4]
 8015d28:	4630      	mov	r0, r6
 8015d2a:	f004 fe3b 	bl	801a9a4 <ucdr_serialize_string>
 8015d2e:	4004      	ands	r4, r0
 8015d30:	b2e4      	uxtb	r4, r4
 8015d32:	e7ee      	b.n	8015d12 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8015d34:	f105 010c 	add.w	r1, r5, #12
 8015d38:	4630      	mov	r0, r6
 8015d3a:	f7ff ff53 	bl	8015be4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8015d3e:	4004      	ands	r4, r0
 8015d40:	4620      	mov	r0, r4
 8015d42:	bd70      	pop	{r4, r5, r6, pc}

08015d44 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8015d44:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8015d48:	4688      	mov	r8, r1
 8015d4a:	8809      	ldrh	r1, [r1, #0]
 8015d4c:	4681      	mov	r9, r0
 8015d4e:	f7f8 f815 	bl	800dd7c <ucdr_serialize_uint16_t>
 8015d52:	f898 1002 	ldrb.w	r1, [r8, #2]
 8015d56:	4606      	mov	r6, r0
 8015d58:	4648      	mov	r0, r9
 8015d5a:	f7f7 ffb5 	bl	800dcc8 <ucdr_serialize_bool>
 8015d5e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8015d62:	4006      	ands	r6, r0
 8015d64:	b2f5      	uxtb	r5, r6
 8015d66:	b9eb      	cbnz	r3, 8015da4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8015d68:	f898 1006 	ldrb.w	r1, [r8, #6]
 8015d6c:	4648      	mov	r0, r9
 8015d6e:	f7f7 ffab 	bl	800dcc8 <ucdr_serialize_bool>
 8015d72:	f898 3006 	ldrb.w	r3, [r8, #6]
 8015d76:	4005      	ands	r5, r0
 8015d78:	bb7b      	cbnz	r3, 8015dda <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8015d7a:	f898 100c 	ldrb.w	r1, [r8, #12]
 8015d7e:	4648      	mov	r0, r9
 8015d80:	f7f7 ffa2 	bl	800dcc8 <ucdr_serialize_bool>
 8015d84:	f898 300c 	ldrb.w	r3, [r8, #12]
 8015d88:	4005      	ands	r5, r0
 8015d8a:	b9f3      	cbnz	r3, 8015dca <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8015d8c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8015d90:	4648      	mov	r0, r9
 8015d92:	f7f7 ff99 	bl	800dcc8 <ucdr_serialize_bool>
 8015d96:	f898 3014 	ldrb.w	r3, [r8, #20]
 8015d9a:	4005      	ands	r5, r0
 8015d9c:	b94b      	cbnz	r3, 8015db2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8015d9e:	4628      	mov	r0, r5
 8015da0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015da4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8015da8:	4648      	mov	r0, r9
 8015daa:	f7f7 ffe7 	bl	800dd7c <ucdr_serialize_uint16_t>
 8015dae:	4005      	ands	r5, r0
 8015db0:	e7da      	b.n	8015d68 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8015db2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8015db6:	f108 011c 	add.w	r1, r8, #28
 8015dba:	4648      	mov	r0, r9
 8015dbc:	f7fc fff8 	bl	8012db0 <ucdr_serialize_sequence_uint8_t>
 8015dc0:	4028      	ands	r0, r5
 8015dc2:	b2c5      	uxtb	r5, r0
 8015dc4:	4628      	mov	r0, r5
 8015dc6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015dca:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015dce:	4648      	mov	r0, r9
 8015dd0:	f7f8 f9be 	bl	800e150 <ucdr_serialize_uint32_t>
 8015dd4:	4028      	ands	r0, r5
 8015dd6:	b2c5      	uxtb	r5, r0
 8015dd8:	e7d8      	b.n	8015d8c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8015dda:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8015dde:	4648      	mov	r0, r9
 8015de0:	f7f8 f9b6 	bl	800e150 <ucdr_serialize_uint32_t>
 8015de4:	4028      	ands	r0, r5
 8015de6:	b2c5      	uxtb	r5, r0
 8015de8:	e7c7      	b.n	8015d7a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8015dea:	bf00      	nop

08015dec <uxr_serialize_OBJK_DataWriter_Binary>:
 8015dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dee:	2202      	movs	r2, #2
 8015df0:	460d      	mov	r5, r1
 8015df2:	4606      	mov	r6, r0
 8015df4:	f7fc fe3e 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 8015df8:	78a9      	ldrb	r1, [r5, #2]
 8015dfa:	4604      	mov	r4, r0
 8015dfc:	4630      	mov	r0, r6
 8015dfe:	f7f7 ff63 	bl	800dcc8 <ucdr_serialize_bool>
 8015e02:	78ab      	ldrb	r3, [r5, #2]
 8015e04:	4004      	ands	r4, r0
 8015e06:	b2e4      	uxtb	r4, r4
 8015e08:	b90b      	cbnz	r3, 8015e0e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8015e0a:	4620      	mov	r0, r4
 8015e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e0e:	f105 0108 	add.w	r1, r5, #8
 8015e12:	4630      	mov	r0, r6
 8015e14:	f7ff ff96 	bl	8015d44 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8015e18:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8015e1c:	4607      	mov	r7, r0
 8015e1e:	4630      	mov	r0, r6
 8015e20:	f7f7 ff52 	bl	800dcc8 <ucdr_serialize_bool>
 8015e24:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8015e28:	4038      	ands	r0, r7
 8015e2a:	b2c7      	uxtb	r7, r0
 8015e2c:	b913      	cbnz	r3, 8015e34 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8015e2e:	403c      	ands	r4, r7
 8015e30:	4620      	mov	r0, r4
 8015e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e34:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8015e38:	4630      	mov	r0, r6
 8015e3a:	f7f8 fbdf 	bl	800e5fc <ucdr_serialize_uint64_t>
 8015e3e:	4007      	ands	r7, r0
 8015e40:	e7f5      	b.n	8015e2e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8015e42:	bf00      	nop

08015e44 <uxr_serialize_OBJK_Replier_Binary>:
 8015e44:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8015e48:	460f      	mov	r7, r1
 8015e4a:	6809      	ldr	r1, [r1, #0]
 8015e4c:	4680      	mov	r8, r0
 8015e4e:	f004 fda9 	bl	801a9a4 <ucdr_serialize_string>
 8015e52:	6879      	ldr	r1, [r7, #4]
 8015e54:	4605      	mov	r5, r0
 8015e56:	4640      	mov	r0, r8
 8015e58:	f004 fda4 	bl	801a9a4 <ucdr_serialize_string>
 8015e5c:	68b9      	ldr	r1, [r7, #8]
 8015e5e:	4005      	ands	r5, r0
 8015e60:	4640      	mov	r0, r8
 8015e62:	f004 fd9f 	bl	801a9a4 <ucdr_serialize_string>
 8015e66:	b2ec      	uxtb	r4, r5
 8015e68:	4004      	ands	r4, r0
 8015e6a:	7b39      	ldrb	r1, [r7, #12]
 8015e6c:	4640      	mov	r0, r8
 8015e6e:	f7f7 ff2b 	bl	800dcc8 <ucdr_serialize_bool>
 8015e72:	7b3b      	ldrb	r3, [r7, #12]
 8015e74:	4004      	ands	r4, r0
 8015e76:	b94b      	cbnz	r3, 8015e8c <uxr_serialize_OBJK_Replier_Binary+0x48>
 8015e78:	7d39      	ldrb	r1, [r7, #20]
 8015e7a:	4640      	mov	r0, r8
 8015e7c:	f7f7 ff24 	bl	800dcc8 <ucdr_serialize_bool>
 8015e80:	7d3b      	ldrb	r3, [r7, #20]
 8015e82:	4004      	ands	r4, r0
 8015e84:	b943      	cbnz	r3, 8015e98 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8015e86:	4620      	mov	r0, r4
 8015e88:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8015e8c:	6939      	ldr	r1, [r7, #16]
 8015e8e:	4640      	mov	r0, r8
 8015e90:	f004 fd88 	bl	801a9a4 <ucdr_serialize_string>
 8015e94:	4004      	ands	r4, r0
 8015e96:	e7ef      	b.n	8015e78 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8015e98:	69b9      	ldr	r1, [r7, #24]
 8015e9a:	4640      	mov	r0, r8
 8015e9c:	f004 fd82 	bl	801a9a4 <ucdr_serialize_string>
 8015ea0:	4004      	ands	r4, r0
 8015ea2:	b2e4      	uxtb	r4, r4
 8015ea4:	4620      	mov	r0, r4
 8015ea6:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8015eaa:	bf00      	nop

08015eac <uxr_deserialize_ObjectVariant>:
 8015eac:	b570      	push	{r4, r5, r6, lr}
 8015eae:	4605      	mov	r5, r0
 8015eb0:	460e      	mov	r6, r1
 8015eb2:	f7f7 ff4d 	bl	800dd50 <ucdr_deserialize_uint8_t>
 8015eb6:	b168      	cbz	r0, 8015ed4 <uxr_deserialize_ObjectVariant+0x28>
 8015eb8:	7833      	ldrb	r3, [r6, #0]
 8015eba:	3b01      	subs	r3, #1
 8015ebc:	4604      	mov	r4, r0
 8015ebe:	2b0d      	cmp	r3, #13
 8015ec0:	d809      	bhi.n	8015ed6 <uxr_deserialize_ObjectVariant+0x2a>
 8015ec2:	e8df f003 	tbb	[pc, r3]
 8015ec6:	0a41      	.short	0x0a41
 8015ec8:	0a0a2323 	.word	0x0a0a2323
 8015ecc:	10080a0a 	.word	0x10080a0a
 8015ed0:	565c1010 	.word	0x565c1010
 8015ed4:	2400      	movs	r4, #0
 8015ed6:	4620      	mov	r0, r4
 8015ed8:	bd70      	pop	{r4, r5, r6, pc}
 8015eda:	1d31      	adds	r1, r6, #4
 8015edc:	4628      	mov	r0, r5
 8015ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ee2:	f7ff be0d 	b.w	8015b00 <uxr_deserialize_DATAWRITER_Representation>
 8015ee6:	1d31      	adds	r1, r6, #4
 8015ee8:	4628      	mov	r0, r5
 8015eea:	f7f7 ff31 	bl	800dd50 <ucdr_deserialize_uint8_t>
 8015eee:	2800      	cmp	r0, #0
 8015ef0:	d0f0      	beq.n	8015ed4 <uxr_deserialize_ObjectVariant+0x28>
 8015ef2:	7933      	ldrb	r3, [r6, #4]
 8015ef4:	2b01      	cmp	r3, #1
 8015ef6:	d001      	beq.n	8015efc <uxr_deserialize_ObjectVariant+0x50>
 8015ef8:	2b02      	cmp	r3, #2
 8015efa:	d1ec      	bne.n	8015ed6 <uxr_deserialize_ObjectVariant+0x2a>
 8015efc:	68b1      	ldr	r1, [r6, #8]
 8015efe:	4628      	mov	r0, r5
 8015f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f08:	f004 bd5c 	b.w	801a9c4 <ucdr_deserialize_string>
 8015f0c:	1d31      	adds	r1, r6, #4
 8015f0e:	4628      	mov	r0, r5
 8015f10:	f7f7 ff1e 	bl	800dd50 <ucdr_deserialize_uint8_t>
 8015f14:	4604      	mov	r4, r0
 8015f16:	b170      	cbz	r0, 8015f36 <uxr_deserialize_ObjectVariant+0x8a>
 8015f18:	7933      	ldrb	r3, [r6, #4]
 8015f1a:	2b02      	cmp	r3, #2
 8015f1c:	d04c      	beq.n	8015fb8 <uxr_deserialize_ObjectVariant+0x10c>
 8015f1e:	2b03      	cmp	r3, #3
 8015f20:	d109      	bne.n	8015f36 <uxr_deserialize_ObjectVariant+0x8a>
 8015f22:	f106 0308 	add.w	r3, r6, #8
 8015f26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015f2a:	f106 010c 	add.w	r1, r6, #12
 8015f2e:	4628      	mov	r0, r5
 8015f30:	f7fc ff50 	bl	8012dd4 <ucdr_deserialize_sequence_uint8_t>
 8015f34:	4604      	mov	r4, r0
 8015f36:	2202      	movs	r2, #2
 8015f38:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8015f3c:	4628      	mov	r0, r5
 8015f3e:	f7fc fdfd 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8015f42:	4020      	ands	r0, r4
 8015f44:	b2c4      	uxtb	r4, r0
 8015f46:	e7c6      	b.n	8015ed6 <uxr_deserialize_ObjectVariant+0x2a>
 8015f48:	1d31      	adds	r1, r6, #4
 8015f4a:	4628      	mov	r0, r5
 8015f4c:	f7f7 ff00 	bl	800dd50 <ucdr_deserialize_uint8_t>
 8015f50:	4604      	mov	r4, r0
 8015f52:	b130      	cbz	r0, 8015f62 <uxr_deserialize_ObjectVariant+0xb6>
 8015f54:	7933      	ldrb	r3, [r6, #4]
 8015f56:	2b02      	cmp	r3, #2
 8015f58:	d036      	beq.n	8015fc8 <uxr_deserialize_ObjectVariant+0x11c>
 8015f5a:	2b03      	cmp	r3, #3
 8015f5c:	d03c      	beq.n	8015fd8 <uxr_deserialize_ObjectVariant+0x12c>
 8015f5e:	2b01      	cmp	r3, #1
 8015f60:	d032      	beq.n	8015fc8 <uxr_deserialize_ObjectVariant+0x11c>
 8015f62:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8015f66:	4628      	mov	r0, r5
 8015f68:	f7f8 fc98 	bl	800e89c <ucdr_deserialize_int16_t>
 8015f6c:	4020      	ands	r0, r4
 8015f6e:	b2c4      	uxtb	r4, r0
 8015f70:	e7b1      	b.n	8015ed6 <uxr_deserialize_ObjectVariant+0x2a>
 8015f72:	1d31      	adds	r1, r6, #4
 8015f74:	4628      	mov	r0, r5
 8015f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f7a:	f7ff bc77 	b.w	801586c <uxr_deserialize_CLIENT_Representation>
 8015f7e:	2204      	movs	r2, #4
 8015f80:	18b1      	adds	r1, r6, r2
 8015f82:	4628      	mov	r0, r5
 8015f84:	f7fc fdda 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8015f88:	2202      	movs	r2, #2
 8015f8a:	f106 0108 	add.w	r1, r6, #8
 8015f8e:	4604      	mov	r4, r0
 8015f90:	4628      	mov	r0, r5
 8015f92:	f7fc fdd3 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8015f96:	2202      	movs	r2, #2
 8015f98:	4004      	ands	r4, r0
 8015f9a:	f106 010a 	add.w	r1, r6, #10
 8015f9e:	4628      	mov	r0, r5
 8015fa0:	f7fc fdcc 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8015fa4:	b2e4      	uxtb	r4, r4
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	f106 010c 	add.w	r1, r6, #12
 8015fac:	4628      	mov	r0, r5
 8015fae:	401c      	ands	r4, r3
 8015fb0:	f7f7 fea0 	bl	800dcf4 <ucdr_deserialize_bool>
 8015fb4:	4004      	ands	r4, r0
 8015fb6:	e78e      	b.n	8015ed6 <uxr_deserialize_ObjectVariant+0x2a>
 8015fb8:	68b1      	ldr	r1, [r6, #8]
 8015fba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015fbe:	4628      	mov	r0, r5
 8015fc0:	f004 fd00 	bl	801a9c4 <ucdr_deserialize_string>
 8015fc4:	4604      	mov	r4, r0
 8015fc6:	e7b6      	b.n	8015f36 <uxr_deserialize_ObjectVariant+0x8a>
 8015fc8:	68b1      	ldr	r1, [r6, #8]
 8015fca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015fce:	4628      	mov	r0, r5
 8015fd0:	f004 fcf8 	bl	801a9c4 <ucdr_deserialize_string>
 8015fd4:	4604      	mov	r4, r0
 8015fd6:	e7c4      	b.n	8015f62 <uxr_deserialize_ObjectVariant+0xb6>
 8015fd8:	f106 0308 	add.w	r3, r6, #8
 8015fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015fe0:	f106 010c 	add.w	r1, r6, #12
 8015fe4:	4628      	mov	r0, r5
 8015fe6:	f7fc fef5 	bl	8012dd4 <ucdr_deserialize_sequence_uint8_t>
 8015fea:	4604      	mov	r4, r0
 8015fec:	e7b9      	b.n	8015f62 <uxr_deserialize_ObjectVariant+0xb6>
 8015fee:	bf00      	nop

08015ff0 <uxr_deserialize_BaseObjectRequest>:
 8015ff0:	b570      	push	{r4, r5, r6, lr}
 8015ff2:	2202      	movs	r2, #2
 8015ff4:	4605      	mov	r5, r0
 8015ff6:	460e      	mov	r6, r1
 8015ff8:	f7fc fda0 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8015ffc:	2202      	movs	r2, #2
 8015ffe:	4604      	mov	r4, r0
 8016000:	18b1      	adds	r1, r6, r2
 8016002:	4628      	mov	r0, r5
 8016004:	f7fc fd9a 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8016008:	4020      	ands	r0, r4
 801600a:	b2c0      	uxtb	r0, r0
 801600c:	bd70      	pop	{r4, r5, r6, pc}
 801600e:	bf00      	nop

08016010 <uxr_serialize_ActivityInfoVariant>:
 8016010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016014:	460d      	mov	r5, r1
 8016016:	7809      	ldrb	r1, [r1, #0]
 8016018:	4607      	mov	r7, r0
 801601a:	f7f7 fe83 	bl	800dd24 <ucdr_serialize_uint8_t>
 801601e:	4681      	mov	r9, r0
 8016020:	b138      	cbz	r0, 8016032 <uxr_serialize_ActivityInfoVariant+0x22>
 8016022:	782b      	ldrb	r3, [r5, #0]
 8016024:	2b06      	cmp	r3, #6
 8016026:	f000 8082 	beq.w	801612e <uxr_serialize_ActivityInfoVariant+0x11e>
 801602a:	2b0d      	cmp	r3, #13
 801602c:	d016      	beq.n	801605c <uxr_serialize_ActivityInfoVariant+0x4c>
 801602e:	2b05      	cmp	r3, #5
 8016030:	d002      	beq.n	8016038 <uxr_serialize_ActivityInfoVariant+0x28>
 8016032:	4648      	mov	r0, r9
 8016034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016038:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801603c:	4638      	mov	r0, r7
 801603e:	f7f8 fbad 	bl	800e79c <ucdr_serialize_int16_t>
 8016042:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8016046:	4681      	mov	r9, r0
 8016048:	4638      	mov	r0, r7
 801604a:	f7f8 fad7 	bl	800e5fc <ucdr_serialize_uint64_t>
 801604e:	ea09 0000 	and.w	r0, r9, r0
 8016052:	fa5f f980 	uxtb.w	r9, r0
 8016056:	4648      	mov	r0, r9
 8016058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801605c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8016060:	4638      	mov	r0, r7
 8016062:	f7f8 fb9b 	bl	800e79c <ucdr_serialize_int16_t>
 8016066:	68e9      	ldr	r1, [r5, #12]
 8016068:	4681      	mov	r9, r0
 801606a:	4638      	mov	r0, r7
 801606c:	f7f8 f870 	bl	800e150 <ucdr_serialize_uint32_t>
 8016070:	68eb      	ldr	r3, [r5, #12]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d0eb      	beq.n	801604e <uxr_serialize_ActivityInfoVariant+0x3e>
 8016076:	b320      	cbz	r0, 80160c2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8016078:	f105 080c 	add.w	r8, r5, #12
 801607c:	2600      	movs	r6, #0
 801607e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8016082:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8016086:	f89a 1010 	ldrb.w	r1, [sl, #16]
 801608a:	4638      	mov	r0, r7
 801608c:	f7f7 fe4a 	bl	800dd24 <ucdr_serialize_uint8_t>
 8016090:	2800      	cmp	r0, #0
 8016092:	d053      	beq.n	801613c <uxr_serialize_ActivityInfoVariant+0x12c>
 8016094:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8016098:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801609c:	0074      	lsls	r4, r6, #1
 801609e:	00c9      	lsls	r1, r1, #3
 80160a0:	2b03      	cmp	r3, #3
 80160a2:	d854      	bhi.n	801614e <uxr_serialize_ActivityInfoVariant+0x13e>
 80160a4:	e8df f003 	tbb	[pc, r3]
 80160a8:	02102132 	.word	0x02102132
 80160ac:	4441      	add	r1, r8
 80160ae:	4638      	mov	r0, r7
 80160b0:	6889      	ldr	r1, [r1, #8]
 80160b2:	f004 fc77 	bl	801a9a4 <ucdr_serialize_string>
 80160b6:	68ea      	ldr	r2, [r5, #12]
 80160b8:	3601      	adds	r6, #1
 80160ba:	4296      	cmp	r6, r2
 80160bc:	d242      	bcs.n	8016144 <uxr_serialize_ActivityInfoVariant+0x134>
 80160be:	2800      	cmp	r0, #0
 80160c0:	d1dd      	bne.n	801607e <uxr_serialize_ActivityInfoVariant+0x6e>
 80160c2:	f04f 0900 	mov.w	r9, #0
 80160c6:	e7b4      	b.n	8016032 <uxr_serialize_ActivityInfoVariant+0x22>
 80160c8:	3108      	adds	r1, #8
 80160ca:	4441      	add	r1, r8
 80160cc:	2210      	movs	r2, #16
 80160ce:	4638      	mov	r0, r7
 80160d0:	f7fc fcd0 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 80160d4:	4434      	add	r4, r6
 80160d6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80160da:	4604      	mov	r4, r0
 80160dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80160de:	4638      	mov	r0, r7
 80160e0:	f7f8 f836 	bl	800e150 <ucdr_serialize_uint32_t>
 80160e4:	4020      	ands	r0, r4
 80160e6:	b2c0      	uxtb	r0, r0
 80160e8:	e7e5      	b.n	80160b6 <uxr_serialize_ActivityInfoVariant+0xa6>
 80160ea:	3108      	adds	r1, #8
 80160ec:	4441      	add	r1, r8
 80160ee:	2204      	movs	r2, #4
 80160f0:	4638      	mov	r0, r7
 80160f2:	f7fc fcbf 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 80160f6:	4434      	add	r4, r6
 80160f8:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80160fc:	4604      	mov	r4, r0
 80160fe:	8b19      	ldrh	r1, [r3, #24]
 8016100:	4638      	mov	r0, r7
 8016102:	f7f7 fe3b 	bl	800dd7c <ucdr_serialize_uint16_t>
 8016106:	4020      	ands	r0, r4
 8016108:	b2c0      	uxtb	r0, r0
 801610a:	e7d4      	b.n	80160b6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801610c:	3108      	adds	r1, #8
 801610e:	4441      	add	r1, r8
 8016110:	2202      	movs	r2, #2
 8016112:	4638      	mov	r0, r7
 8016114:	f7fc fcae 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 8016118:	4434      	add	r4, r6
 801611a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801611e:	4604      	mov	r4, r0
 8016120:	7d99      	ldrb	r1, [r3, #22]
 8016122:	4638      	mov	r0, r7
 8016124:	f7f7 fdfe 	bl	800dd24 <ucdr_serialize_uint8_t>
 8016128:	4020      	ands	r0, r4
 801612a:	b2c0      	uxtb	r0, r0
 801612c:	e7c3      	b.n	80160b6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801612e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8016132:	4638      	mov	r0, r7
 8016134:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016138:	f7f8 bb30 	b.w	800e79c <ucdr_serialize_int16_t>
 801613c:	68ea      	ldr	r2, [r5, #12]
 801613e:	3601      	adds	r6, #1
 8016140:	42b2      	cmp	r2, r6
 8016142:	d8be      	bhi.n	80160c2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8016144:	ea09 0900 	and.w	r9, r9, r0
 8016148:	fa5f f989 	uxtb.w	r9, r9
 801614c:	e771      	b.n	8016032 <uxr_serialize_ActivityInfoVariant+0x22>
 801614e:	68eb      	ldr	r3, [r5, #12]
 8016150:	3601      	adds	r6, #1
 8016152:	429e      	cmp	r6, r3
 8016154:	f10a 0a18 	add.w	sl, sl, #24
 8016158:	d395      	bcc.n	8016086 <uxr_serialize_ActivityInfoVariant+0x76>
 801615a:	e76a      	b.n	8016032 <uxr_serialize_ActivityInfoVariant+0x22>

0801615c <uxr_deserialize_BaseObjectReply>:
 801615c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016160:	2202      	movs	r2, #2
 8016162:	4606      	mov	r6, r0
 8016164:	460f      	mov	r7, r1
 8016166:	f7fc fce9 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 801616a:	2202      	movs	r2, #2
 801616c:	18b9      	adds	r1, r7, r2
 801616e:	4605      	mov	r5, r0
 8016170:	4630      	mov	r0, r6
 8016172:	f7fc fce3 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8016176:	1d39      	adds	r1, r7, #4
 8016178:	4680      	mov	r8, r0
 801617a:	4630      	mov	r0, r6
 801617c:	f7f7 fde8 	bl	800dd50 <ucdr_deserialize_uint8_t>
 8016180:	1d79      	adds	r1, r7, #5
 8016182:	4604      	mov	r4, r0
 8016184:	4630      	mov	r0, r6
 8016186:	f7f7 fde3 	bl	800dd50 <ucdr_deserialize_uint8_t>
 801618a:	ea05 0508 	and.w	r5, r5, r8
 801618e:	402c      	ands	r4, r5
 8016190:	4020      	ands	r0, r4
 8016192:	b2c0      	uxtb	r0, r0
 8016194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016198 <uxr_serialize_ReadSpecification>:
 8016198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801619c:	460e      	mov	r6, r1
 801619e:	7809      	ldrb	r1, [r1, #0]
 80161a0:	4607      	mov	r7, r0
 80161a2:	f7f7 fdbf 	bl	800dd24 <ucdr_serialize_uint8_t>
 80161a6:	7871      	ldrb	r1, [r6, #1]
 80161a8:	4604      	mov	r4, r0
 80161aa:	4638      	mov	r0, r7
 80161ac:	f7f7 fdba 	bl	800dd24 <ucdr_serialize_uint8_t>
 80161b0:	78b1      	ldrb	r1, [r6, #2]
 80161b2:	4004      	ands	r4, r0
 80161b4:	4638      	mov	r0, r7
 80161b6:	f7f7 fd87 	bl	800dcc8 <ucdr_serialize_bool>
 80161ba:	78b3      	ldrb	r3, [r6, #2]
 80161bc:	b2e4      	uxtb	r4, r4
 80161be:	4004      	ands	r4, r0
 80161c0:	b94b      	cbnz	r3, 80161d6 <uxr_serialize_ReadSpecification+0x3e>
 80161c2:	7a31      	ldrb	r1, [r6, #8]
 80161c4:	4638      	mov	r0, r7
 80161c6:	f7f7 fd7f 	bl	800dcc8 <ucdr_serialize_bool>
 80161ca:	7a33      	ldrb	r3, [r6, #8]
 80161cc:	4004      	ands	r4, r0
 80161ce:	b943      	cbnz	r3, 80161e2 <uxr_serialize_ReadSpecification+0x4a>
 80161d0:	4620      	mov	r0, r4
 80161d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161d6:	6871      	ldr	r1, [r6, #4]
 80161d8:	4638      	mov	r0, r7
 80161da:	f004 fbe3 	bl	801a9a4 <ucdr_serialize_string>
 80161de:	4004      	ands	r4, r0
 80161e0:	e7ef      	b.n	80161c2 <uxr_serialize_ReadSpecification+0x2a>
 80161e2:	8971      	ldrh	r1, [r6, #10]
 80161e4:	4638      	mov	r0, r7
 80161e6:	f7f7 fdc9 	bl	800dd7c <ucdr_serialize_uint16_t>
 80161ea:	89b1      	ldrh	r1, [r6, #12]
 80161ec:	4605      	mov	r5, r0
 80161ee:	4638      	mov	r0, r7
 80161f0:	f7f7 fdc4 	bl	800dd7c <ucdr_serialize_uint16_t>
 80161f4:	89f1      	ldrh	r1, [r6, #14]
 80161f6:	4005      	ands	r5, r0
 80161f8:	4638      	mov	r0, r7
 80161fa:	f7f7 fdbf 	bl	800dd7c <ucdr_serialize_uint16_t>
 80161fe:	8a31      	ldrh	r1, [r6, #16]
 8016200:	4680      	mov	r8, r0
 8016202:	4638      	mov	r0, r7
 8016204:	f7f7 fdba 	bl	800dd7c <ucdr_serialize_uint16_t>
 8016208:	b2ed      	uxtb	r5, r5
 801620a:	4025      	ands	r5, r4
 801620c:	ea08 0505 	and.w	r5, r8, r5
 8016210:	ea00 0405 	and.w	r4, r0, r5
 8016214:	4620      	mov	r0, r4
 8016216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801621a:	bf00      	nop

0801621c <uxr_serialize_CREATE_CLIENT_Payload>:
 801621c:	f7ff bace 	b.w	80157bc <uxr_serialize_CLIENT_Representation>

08016220 <uxr_serialize_CREATE_Payload>:
 8016220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016222:	2202      	movs	r2, #2
 8016224:	4607      	mov	r7, r0
 8016226:	460e      	mov	r6, r1
 8016228:	f7fc fc24 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 801622c:	2202      	movs	r2, #2
 801622e:	18b1      	adds	r1, r6, r2
 8016230:	4605      	mov	r5, r0
 8016232:	4638      	mov	r0, r7
 8016234:	f7fc fc1e 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 8016238:	7931      	ldrb	r1, [r6, #4]
 801623a:	4604      	mov	r4, r0
 801623c:	4638      	mov	r0, r7
 801623e:	f7f7 fd71 	bl	800dd24 <ucdr_serialize_uint8_t>
 8016242:	b170      	cbz	r0, 8016262 <uxr_serialize_CREATE_Payload+0x42>
 8016244:	7933      	ldrb	r3, [r6, #4]
 8016246:	402c      	ands	r4, r5
 8016248:	3b01      	subs	r3, #1
 801624a:	b2e4      	uxtb	r4, r4
 801624c:	2b0d      	cmp	r3, #13
 801624e:	d809      	bhi.n	8016264 <uxr_serialize_CREATE_Payload+0x44>
 8016250:	e8df f003 	tbb	[pc, r3]
 8016254:	23230a4c 	.word	0x23230a4c
 8016258:	0a0a0a0a 	.word	0x0a0a0a0a
 801625c:	12121208 	.word	0x12121208
 8016260:	3e45      	.short	0x3e45
 8016262:	2400      	movs	r4, #0
 8016264:	4620      	mov	r0, r4
 8016266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016268:	f106 0108 	add.w	r1, r6, #8
 801626c:	4638      	mov	r0, r7
 801626e:	f7ff fbab 	bl	80159c8 <uxr_serialize_DATAWRITER_Representation>
 8016272:	4004      	ands	r4, r0
 8016274:	4620      	mov	r0, r4
 8016276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016278:	7a31      	ldrb	r1, [r6, #8]
 801627a:	4638      	mov	r0, r7
 801627c:	f7f7 fd52 	bl	800dd24 <ucdr_serialize_uint8_t>
 8016280:	2800      	cmp	r0, #0
 8016282:	d0ee      	beq.n	8016262 <uxr_serialize_CREATE_Payload+0x42>
 8016284:	7a33      	ldrb	r3, [r6, #8]
 8016286:	2b01      	cmp	r3, #1
 8016288:	d001      	beq.n	801628e <uxr_serialize_CREATE_Payload+0x6e>
 801628a:	2b02      	cmp	r3, #2
 801628c:	d1ea      	bne.n	8016264 <uxr_serialize_CREATE_Payload+0x44>
 801628e:	68f1      	ldr	r1, [r6, #12]
 8016290:	4638      	mov	r0, r7
 8016292:	f004 fb87 	bl	801a9a4 <ucdr_serialize_string>
 8016296:	4004      	ands	r4, r0
 8016298:	e7e4      	b.n	8016264 <uxr_serialize_CREATE_Payload+0x44>
 801629a:	7a31      	ldrb	r1, [r6, #8]
 801629c:	4638      	mov	r0, r7
 801629e:	f7f7 fd41 	bl	800dd24 <ucdr_serialize_uint8_t>
 80162a2:	4605      	mov	r5, r0
 80162a4:	b158      	cbz	r0, 80162be <uxr_serialize_CREATE_Payload+0x9e>
 80162a6:	7a33      	ldrb	r3, [r6, #8]
 80162a8:	2b02      	cmp	r3, #2
 80162aa:	d034      	beq.n	8016316 <uxr_serialize_CREATE_Payload+0xf6>
 80162ac:	2b03      	cmp	r3, #3
 80162ae:	d106      	bne.n	80162be <uxr_serialize_CREATE_Payload+0x9e>
 80162b0:	68f2      	ldr	r2, [r6, #12]
 80162b2:	f106 0110 	add.w	r1, r6, #16
 80162b6:	4638      	mov	r0, r7
 80162b8:	f7fc fd7a 	bl	8012db0 <ucdr_serialize_sequence_uint8_t>
 80162bc:	4605      	mov	r5, r0
 80162be:	2202      	movs	r2, #2
 80162c0:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80162c4:	4638      	mov	r0, r7
 80162c6:	f7fc fbd5 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 80162ca:	4028      	ands	r0, r5
 80162cc:	4004      	ands	r4, r0
 80162ce:	e7c9      	b.n	8016264 <uxr_serialize_CREATE_Payload+0x44>
 80162d0:	f106 0108 	add.w	r1, r6, #8
 80162d4:	4638      	mov	r0, r7
 80162d6:	f7ff fa71 	bl	80157bc <uxr_serialize_CLIENT_Representation>
 80162da:	4004      	ands	r4, r0
 80162dc:	e7c2      	b.n	8016264 <uxr_serialize_CREATE_Payload+0x44>
 80162de:	f106 0108 	add.w	r1, r6, #8
 80162e2:	4638      	mov	r0, r7
 80162e4:	f7ff fb26 	bl	8015934 <uxr_serialize_AGENT_Representation>
 80162e8:	4004      	ands	r4, r0
 80162ea:	e7bb      	b.n	8016264 <uxr_serialize_CREATE_Payload+0x44>
 80162ec:	7a31      	ldrb	r1, [r6, #8]
 80162ee:	4638      	mov	r0, r7
 80162f0:	f7f7 fd18 	bl	800dd24 <ucdr_serialize_uint8_t>
 80162f4:	4605      	mov	r5, r0
 80162f6:	b130      	cbz	r0, 8016306 <uxr_serialize_CREATE_Payload+0xe6>
 80162f8:	7a33      	ldrb	r3, [r6, #8]
 80162fa:	2b02      	cmp	r3, #2
 80162fc:	d011      	beq.n	8016322 <uxr_serialize_CREATE_Payload+0x102>
 80162fe:	2b03      	cmp	r3, #3
 8016300:	d015      	beq.n	801632e <uxr_serialize_CREATE_Payload+0x10e>
 8016302:	2b01      	cmp	r3, #1
 8016304:	d00d      	beq.n	8016322 <uxr_serialize_CREATE_Payload+0x102>
 8016306:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801630a:	4638      	mov	r0, r7
 801630c:	f7f8 fa46 	bl	800e79c <ucdr_serialize_int16_t>
 8016310:	4028      	ands	r0, r5
 8016312:	4004      	ands	r4, r0
 8016314:	e7a6      	b.n	8016264 <uxr_serialize_CREATE_Payload+0x44>
 8016316:	68f1      	ldr	r1, [r6, #12]
 8016318:	4638      	mov	r0, r7
 801631a:	f004 fb43 	bl	801a9a4 <ucdr_serialize_string>
 801631e:	4605      	mov	r5, r0
 8016320:	e7cd      	b.n	80162be <uxr_serialize_CREATE_Payload+0x9e>
 8016322:	68f1      	ldr	r1, [r6, #12]
 8016324:	4638      	mov	r0, r7
 8016326:	f004 fb3d 	bl	801a9a4 <ucdr_serialize_string>
 801632a:	4605      	mov	r5, r0
 801632c:	e7eb      	b.n	8016306 <uxr_serialize_CREATE_Payload+0xe6>
 801632e:	68f2      	ldr	r2, [r6, #12]
 8016330:	f106 0110 	add.w	r1, r6, #16
 8016334:	4638      	mov	r0, r7
 8016336:	f7fc fd3b 	bl	8012db0 <ucdr_serialize_sequence_uint8_t>
 801633a:	4605      	mov	r5, r0
 801633c:	e7e3      	b.n	8016306 <uxr_serialize_CREATE_Payload+0xe6>
 801633e:	bf00      	nop

08016340 <uxr_deserialize_GET_INFO_Payload>:
 8016340:	b570      	push	{r4, r5, r6, lr}
 8016342:	2202      	movs	r2, #2
 8016344:	4605      	mov	r5, r0
 8016346:	460e      	mov	r6, r1
 8016348:	f7fc fbf8 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 801634c:	2202      	movs	r2, #2
 801634e:	18b1      	adds	r1, r6, r2
 8016350:	4604      	mov	r4, r0
 8016352:	4628      	mov	r0, r5
 8016354:	f7fc fbf2 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8016358:	1d31      	adds	r1, r6, #4
 801635a:	4004      	ands	r4, r0
 801635c:	4628      	mov	r0, r5
 801635e:	f7f8 f827 	bl	800e3b0 <ucdr_deserialize_uint32_t>
 8016362:	b2e4      	uxtb	r4, r4
 8016364:	4020      	ands	r0, r4
 8016366:	bd70      	pop	{r4, r5, r6, pc}

08016368 <uxr_serialize_DELETE_Payload>:
 8016368:	b570      	push	{r4, r5, r6, lr}
 801636a:	2202      	movs	r2, #2
 801636c:	4605      	mov	r5, r0
 801636e:	460e      	mov	r6, r1
 8016370:	f7fc fb80 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 8016374:	2202      	movs	r2, #2
 8016376:	4604      	mov	r4, r0
 8016378:	18b1      	adds	r1, r6, r2
 801637a:	4628      	mov	r0, r5
 801637c:	f7fc fb7a 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 8016380:	4020      	ands	r0, r4
 8016382:	b2c0      	uxtb	r0, r0
 8016384:	bd70      	pop	{r4, r5, r6, pc}
 8016386:	bf00      	nop

08016388 <uxr_deserialize_STATUS_AGENT_Payload>:
 8016388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801638c:	4605      	mov	r5, r0
 801638e:	460e      	mov	r6, r1
 8016390:	f7f7 fcde 	bl	800dd50 <ucdr_deserialize_uint8_t>
 8016394:	1c71      	adds	r1, r6, #1
 8016396:	4604      	mov	r4, r0
 8016398:	4628      	mov	r0, r5
 801639a:	f7f7 fcd9 	bl	800dd50 <ucdr_deserialize_uint8_t>
 801639e:	2204      	movs	r2, #4
 80163a0:	18b1      	adds	r1, r6, r2
 80163a2:	4680      	mov	r8, r0
 80163a4:	4628      	mov	r0, r5
 80163a6:	f7fc fbc9 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 80163aa:	f106 0108 	add.w	r1, r6, #8
 80163ae:	4607      	mov	r7, r0
 80163b0:	2202      	movs	r2, #2
 80163b2:	4628      	mov	r0, r5
 80163b4:	f7fc fbc2 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 80163b8:	ea04 0308 	and.w	r3, r4, r8
 80163bc:	b2db      	uxtb	r3, r3
 80163be:	ea03 0407 	and.w	r4, r3, r7
 80163c2:	2202      	movs	r2, #2
 80163c4:	4607      	mov	r7, r0
 80163c6:	f106 010a 	add.w	r1, r6, #10
 80163ca:	4628      	mov	r0, r5
 80163cc:	f7fc fbb6 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 80163d0:	f106 010c 	add.w	r1, r6, #12
 80163d4:	4603      	mov	r3, r0
 80163d6:	4628      	mov	r0, r5
 80163d8:	461d      	mov	r5, r3
 80163da:	f7f7 fc8b 	bl	800dcf4 <ucdr_deserialize_bool>
 80163de:	403c      	ands	r4, r7
 80163e0:	4025      	ands	r5, r4
 80163e2:	4028      	ands	r0, r5
 80163e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080163e8 <uxr_deserialize_STATUS_Payload>:
 80163e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163ec:	2202      	movs	r2, #2
 80163ee:	4606      	mov	r6, r0
 80163f0:	460f      	mov	r7, r1
 80163f2:	f7fc fba3 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 80163f6:	2202      	movs	r2, #2
 80163f8:	18b9      	adds	r1, r7, r2
 80163fa:	4605      	mov	r5, r0
 80163fc:	4630      	mov	r0, r6
 80163fe:	f7fc fb9d 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8016402:	1d39      	adds	r1, r7, #4
 8016404:	4680      	mov	r8, r0
 8016406:	4630      	mov	r0, r6
 8016408:	f7f7 fca2 	bl	800dd50 <ucdr_deserialize_uint8_t>
 801640c:	1d79      	adds	r1, r7, #5
 801640e:	4604      	mov	r4, r0
 8016410:	4630      	mov	r0, r6
 8016412:	f7f7 fc9d 	bl	800dd50 <ucdr_deserialize_uint8_t>
 8016416:	ea05 0508 	and.w	r5, r5, r8
 801641a:	402c      	ands	r4, r5
 801641c:	4020      	ands	r0, r4
 801641e:	b2c0      	uxtb	r0, r0
 8016420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016424 <uxr_serialize_INFO_Payload>:
 8016424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016428:	2202      	movs	r2, #2
 801642a:	460c      	mov	r4, r1
 801642c:	4605      	mov	r5, r0
 801642e:	f7fc fb21 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 8016432:	2202      	movs	r2, #2
 8016434:	18a1      	adds	r1, r4, r2
 8016436:	4680      	mov	r8, r0
 8016438:	4628      	mov	r0, r5
 801643a:	f7fc fb1b 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 801643e:	7921      	ldrb	r1, [r4, #4]
 8016440:	4607      	mov	r7, r0
 8016442:	4628      	mov	r0, r5
 8016444:	f7f7 fc6e 	bl	800dd24 <ucdr_serialize_uint8_t>
 8016448:	7961      	ldrb	r1, [r4, #5]
 801644a:	4606      	mov	r6, r0
 801644c:	4628      	mov	r0, r5
 801644e:	f7f7 fc69 	bl	800dd24 <ucdr_serialize_uint8_t>
 8016452:	ea08 0807 	and.w	r8, r8, r7
 8016456:	ea06 0608 	and.w	r6, r6, r8
 801645a:	4006      	ands	r6, r0
 801645c:	7a21      	ldrb	r1, [r4, #8]
 801645e:	4628      	mov	r0, r5
 8016460:	f7f7 fc32 	bl	800dcc8 <ucdr_serialize_bool>
 8016464:	7a23      	ldrb	r3, [r4, #8]
 8016466:	b2f7      	uxtb	r7, r6
 8016468:	4606      	mov	r6, r0
 801646a:	b96b      	cbnz	r3, 8016488 <uxr_serialize_INFO_Payload+0x64>
 801646c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8016470:	4628      	mov	r0, r5
 8016472:	f7f7 fc29 	bl	800dcc8 <ucdr_serialize_bool>
 8016476:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801647a:	4030      	ands	r0, r6
 801647c:	b2c6      	uxtb	r6, r0
 801647e:	b983      	cbnz	r3, 80164a2 <uxr_serialize_INFO_Payload+0x7e>
 8016480:	ea06 0007 	and.w	r0, r6, r7
 8016484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016488:	7b21      	ldrb	r1, [r4, #12]
 801648a:	4628      	mov	r0, r5
 801648c:	f7f7 fc4a 	bl	800dd24 <ucdr_serialize_uint8_t>
 8016490:	b188      	cbz	r0, 80164b6 <uxr_serialize_INFO_Payload+0x92>
 8016492:	f104 010c 	add.w	r1, r4, #12
 8016496:	4628      	mov	r0, r5
 8016498:	f7ff fabe 	bl	8015a18 <uxr_serialize_ObjectVariant.part.0>
 801649c:	4030      	ands	r0, r6
 801649e:	b2c6      	uxtb	r6, r0
 80164a0:	e7e4      	b.n	801646c <uxr_serialize_INFO_Payload+0x48>
 80164a2:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80164a6:	4628      	mov	r0, r5
 80164a8:	f7ff fdb2 	bl	8016010 <uxr_serialize_ActivityInfoVariant>
 80164ac:	4006      	ands	r6, r0
 80164ae:	ea06 0007 	and.w	r0, r6, r7
 80164b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164b6:	4606      	mov	r6, r0
 80164b8:	e7d8      	b.n	801646c <uxr_serialize_INFO_Payload+0x48>
 80164ba:	bf00      	nop

080164bc <uxr_serialize_READ_DATA_Payload>:
 80164bc:	b570      	push	{r4, r5, r6, lr}
 80164be:	2202      	movs	r2, #2
 80164c0:	4605      	mov	r5, r0
 80164c2:	460e      	mov	r6, r1
 80164c4:	f7fc fad6 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 80164c8:	2202      	movs	r2, #2
 80164ca:	18b1      	adds	r1, r6, r2
 80164cc:	4604      	mov	r4, r0
 80164ce:	4628      	mov	r0, r5
 80164d0:	f7fc fad0 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 80164d4:	1d31      	adds	r1, r6, #4
 80164d6:	4004      	ands	r4, r0
 80164d8:	4628      	mov	r0, r5
 80164da:	f7ff fe5d 	bl	8016198 <uxr_serialize_ReadSpecification>
 80164de:	b2e4      	uxtb	r4, r4
 80164e0:	4020      	ands	r0, r4
 80164e2:	bd70      	pop	{r4, r5, r6, pc}

080164e4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80164e4:	b570      	push	{r4, r5, r6, lr}
 80164e6:	2202      	movs	r2, #2
 80164e8:	4605      	mov	r5, r0
 80164ea:	460e      	mov	r6, r1
 80164ec:	f7fc fac2 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 80164f0:	2202      	movs	r2, #2
 80164f2:	4604      	mov	r4, r0
 80164f4:	18b1      	adds	r1, r6, r2
 80164f6:	4628      	mov	r0, r5
 80164f8:	f7fc fabc 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 80164fc:	4020      	ands	r0, r4
 80164fe:	b2c0      	uxtb	r0, r0
 8016500:	bd70      	pop	{r4, r5, r6, pc}
 8016502:	bf00      	nop

08016504 <uxr_serialize_ACKNACK_Payload>:
 8016504:	b570      	push	{r4, r5, r6, lr}
 8016506:	460c      	mov	r4, r1
 8016508:	460e      	mov	r6, r1
 801650a:	f834 1b02 	ldrh.w	r1, [r4], #2
 801650e:	4605      	mov	r5, r0
 8016510:	f7f7 fc34 	bl	800dd7c <ucdr_serialize_uint16_t>
 8016514:	2202      	movs	r2, #2
 8016516:	4621      	mov	r1, r4
 8016518:	4604      	mov	r4, r0
 801651a:	4628      	mov	r0, r5
 801651c:	f7fc faaa 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 8016520:	7931      	ldrb	r1, [r6, #4]
 8016522:	4004      	ands	r4, r0
 8016524:	4628      	mov	r0, r5
 8016526:	f7f7 fbfd 	bl	800dd24 <ucdr_serialize_uint8_t>
 801652a:	b2e4      	uxtb	r4, r4
 801652c:	4020      	ands	r0, r4
 801652e:	bd70      	pop	{r4, r5, r6, pc}

08016530 <uxr_deserialize_ACKNACK_Payload>:
 8016530:	b570      	push	{r4, r5, r6, lr}
 8016532:	4605      	mov	r5, r0
 8016534:	460e      	mov	r6, r1
 8016536:	f7f7 fd21 	bl	800df7c <ucdr_deserialize_uint16_t>
 801653a:	2202      	movs	r2, #2
 801653c:	18b1      	adds	r1, r6, r2
 801653e:	4604      	mov	r4, r0
 8016540:	4628      	mov	r0, r5
 8016542:	f7fc fafb 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8016546:	1d31      	adds	r1, r6, #4
 8016548:	4004      	ands	r4, r0
 801654a:	4628      	mov	r0, r5
 801654c:	f7f7 fc00 	bl	800dd50 <ucdr_deserialize_uint8_t>
 8016550:	b2e4      	uxtb	r4, r4
 8016552:	4020      	ands	r0, r4
 8016554:	bd70      	pop	{r4, r5, r6, pc}
 8016556:	bf00      	nop

08016558 <uxr_serialize_HEARTBEAT_Payload>:
 8016558:	b570      	push	{r4, r5, r6, lr}
 801655a:	460d      	mov	r5, r1
 801655c:	8809      	ldrh	r1, [r1, #0]
 801655e:	4606      	mov	r6, r0
 8016560:	f7f7 fc0c 	bl	800dd7c <ucdr_serialize_uint16_t>
 8016564:	8869      	ldrh	r1, [r5, #2]
 8016566:	4604      	mov	r4, r0
 8016568:	4630      	mov	r0, r6
 801656a:	f7f7 fc07 	bl	800dd7c <ucdr_serialize_uint16_t>
 801656e:	7929      	ldrb	r1, [r5, #4]
 8016570:	4004      	ands	r4, r0
 8016572:	4630      	mov	r0, r6
 8016574:	f7f7 fbd6 	bl	800dd24 <ucdr_serialize_uint8_t>
 8016578:	b2e4      	uxtb	r4, r4
 801657a:	4020      	ands	r0, r4
 801657c:	bd70      	pop	{r4, r5, r6, pc}
 801657e:	bf00      	nop

08016580 <uxr_deserialize_HEARTBEAT_Payload>:
 8016580:	b570      	push	{r4, r5, r6, lr}
 8016582:	4605      	mov	r5, r0
 8016584:	460e      	mov	r6, r1
 8016586:	f7f7 fcf9 	bl	800df7c <ucdr_deserialize_uint16_t>
 801658a:	1cb1      	adds	r1, r6, #2
 801658c:	4604      	mov	r4, r0
 801658e:	4628      	mov	r0, r5
 8016590:	f7f7 fcf4 	bl	800df7c <ucdr_deserialize_uint16_t>
 8016594:	1d31      	adds	r1, r6, #4
 8016596:	4004      	ands	r4, r0
 8016598:	4628      	mov	r0, r5
 801659a:	f7f7 fbd9 	bl	800dd50 <ucdr_deserialize_uint8_t>
 801659e:	b2e4      	uxtb	r4, r4
 80165a0:	4020      	ands	r0, r4
 80165a2:	bd70      	pop	{r4, r5, r6, pc}

080165a4 <uxr_serialize_TIMESTAMP_Payload>:
 80165a4:	b570      	push	{r4, r5, r6, lr}
 80165a6:	460d      	mov	r5, r1
 80165a8:	6809      	ldr	r1, [r1, #0]
 80165aa:	4606      	mov	r6, r0
 80165ac:	f7f8 f9ea 	bl	800e984 <ucdr_serialize_int32_t>
 80165b0:	6869      	ldr	r1, [r5, #4]
 80165b2:	4604      	mov	r4, r0
 80165b4:	4630      	mov	r0, r6
 80165b6:	f7f7 fdcb 	bl	800e150 <ucdr_serialize_uint32_t>
 80165ba:	4020      	ands	r0, r4
 80165bc:	b2c0      	uxtb	r0, r0
 80165be:	bd70      	pop	{r4, r5, r6, pc}

080165c0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80165c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165c4:	4605      	mov	r5, r0
 80165c6:	460e      	mov	r6, r1
 80165c8:	f7f8 fa74 	bl	800eab4 <ucdr_deserialize_int32_t>
 80165cc:	1d31      	adds	r1, r6, #4
 80165ce:	4607      	mov	r7, r0
 80165d0:	4628      	mov	r0, r5
 80165d2:	f7f7 feed 	bl	800e3b0 <ucdr_deserialize_uint32_t>
 80165d6:	f106 0108 	add.w	r1, r6, #8
 80165da:	4680      	mov	r8, r0
 80165dc:	4628      	mov	r0, r5
 80165de:	f7f8 fa69 	bl	800eab4 <ucdr_deserialize_int32_t>
 80165e2:	f106 010c 	add.w	r1, r6, #12
 80165e6:	4604      	mov	r4, r0
 80165e8:	4628      	mov	r0, r5
 80165ea:	f7f7 fee1 	bl	800e3b0 <ucdr_deserialize_uint32_t>
 80165ee:	ea07 0708 	and.w	r7, r7, r8
 80165f2:	403c      	ands	r4, r7
 80165f4:	f106 0110 	add.w	r1, r6, #16
 80165f8:	4004      	ands	r4, r0
 80165fa:	4628      	mov	r0, r5
 80165fc:	f7f8 fa5a 	bl	800eab4 <ucdr_deserialize_int32_t>
 8016600:	f106 0114 	add.w	r1, r6, #20
 8016604:	4607      	mov	r7, r0
 8016606:	4628      	mov	r0, r5
 8016608:	f7f7 fed2 	bl	800e3b0 <ucdr_deserialize_uint32_t>
 801660c:	b2e4      	uxtb	r4, r4
 801660e:	403c      	ands	r4, r7
 8016610:	4020      	ands	r0, r4
 8016612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016616:	bf00      	nop

08016618 <uxr_serialize_SampleIdentity>:
 8016618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801661c:	220c      	movs	r2, #12
 801661e:	4604      	mov	r4, r0
 8016620:	460d      	mov	r5, r1
 8016622:	f7fc fa27 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 8016626:	2203      	movs	r2, #3
 8016628:	f105 010c 	add.w	r1, r5, #12
 801662c:	4607      	mov	r7, r0
 801662e:	4620      	mov	r0, r4
 8016630:	f7fc fa20 	bl	8012a74 <ucdr_serialize_array_uint8_t>
 8016634:	7be9      	ldrb	r1, [r5, #15]
 8016636:	4680      	mov	r8, r0
 8016638:	4620      	mov	r0, r4
 801663a:	f7f7 fb73 	bl	800dd24 <ucdr_serialize_uint8_t>
 801663e:	6929      	ldr	r1, [r5, #16]
 8016640:	4606      	mov	r6, r0
 8016642:	4620      	mov	r0, r4
 8016644:	f7f8 f99e 	bl	800e984 <ucdr_serialize_int32_t>
 8016648:	6969      	ldr	r1, [r5, #20]
 801664a:	4603      	mov	r3, r0
 801664c:	4620      	mov	r0, r4
 801664e:	ea07 0708 	and.w	r7, r7, r8
 8016652:	461c      	mov	r4, r3
 8016654:	f7f7 fd7c 	bl	800e150 <ucdr_serialize_uint32_t>
 8016658:	403e      	ands	r6, r7
 801665a:	4034      	ands	r4, r6
 801665c:	4020      	ands	r0, r4
 801665e:	b2c0      	uxtb	r0, r0
 8016660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016664 <uxr_deserialize_SampleIdentity>:
 8016664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016668:	220c      	movs	r2, #12
 801666a:	4604      	mov	r4, r0
 801666c:	460d      	mov	r5, r1
 801666e:	f7fc fa65 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8016672:	2203      	movs	r2, #3
 8016674:	f105 010c 	add.w	r1, r5, #12
 8016678:	4607      	mov	r7, r0
 801667a:	4620      	mov	r0, r4
 801667c:	f7fc fa5e 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8016680:	f105 010f 	add.w	r1, r5, #15
 8016684:	4680      	mov	r8, r0
 8016686:	4620      	mov	r0, r4
 8016688:	f7f7 fb62 	bl	800dd50 <ucdr_deserialize_uint8_t>
 801668c:	f105 0110 	add.w	r1, r5, #16
 8016690:	4606      	mov	r6, r0
 8016692:	4620      	mov	r0, r4
 8016694:	f7f8 fa0e 	bl	800eab4 <ucdr_deserialize_int32_t>
 8016698:	f105 0114 	add.w	r1, r5, #20
 801669c:	4603      	mov	r3, r0
 801669e:	4620      	mov	r0, r4
 80166a0:	ea07 0708 	and.w	r7, r7, r8
 80166a4:	461c      	mov	r4, r3
 80166a6:	f7f7 fe83 	bl	800e3b0 <ucdr_deserialize_uint32_t>
 80166aa:	403e      	ands	r6, r7
 80166ac:	4034      	ands	r4, r6
 80166ae:	4020      	ands	r0, r4
 80166b0:	b2c0      	uxtb	r0, r0
 80166b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166b6:	bf00      	nop

080166b8 <rcl_client_get_rmw_handle>:
 80166b8:	b118      	cbz	r0, 80166c2 <rcl_client_get_rmw_handle+0xa>
 80166ba:	6800      	ldr	r0, [r0, #0]
 80166bc:	b108      	cbz	r0, 80166c2 <rcl_client_get_rmw_handle+0xa>
 80166be:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80166c2:	4770      	bx	lr

080166c4 <rcl_send_request>:
 80166c4:	b570      	push	{r4, r5, r6, lr}
 80166c6:	b082      	sub	sp, #8
 80166c8:	b1e8      	cbz	r0, 8016706 <rcl_send_request+0x42>
 80166ca:	4604      	mov	r4, r0
 80166cc:	6800      	ldr	r0, [r0, #0]
 80166ce:	b1d0      	cbz	r0, 8016706 <rcl_send_request+0x42>
 80166d0:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80166d4:	b1bb      	cbz	r3, 8016706 <rcl_send_request+0x42>
 80166d6:	460e      	mov	r6, r1
 80166d8:	b1d1      	cbz	r1, 8016710 <rcl_send_request+0x4c>
 80166da:	4615      	mov	r5, r2
 80166dc:	b1c2      	cbz	r2, 8016710 <rcl_send_request+0x4c>
 80166de:	2105      	movs	r1, #5
 80166e0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80166e4:	f002 fe58 	bl	8019398 <__atomic_load_8>
 80166e8:	6823      	ldr	r3, [r4, #0]
 80166ea:	e9c5 0100 	strd	r0, r1, [r5]
 80166ee:	462a      	mov	r2, r5
 80166f0:	4631      	mov	r1, r6
 80166f2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80166f6:	f003 fd43 	bl	801a180 <rmw_send_request>
 80166fa:	4606      	mov	r6, r0
 80166fc:	b160      	cbz	r0, 8016718 <rcl_send_request+0x54>
 80166fe:	2601      	movs	r6, #1
 8016700:	4630      	mov	r0, r6
 8016702:	b002      	add	sp, #8
 8016704:	bd70      	pop	{r4, r5, r6, pc}
 8016706:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801670a:	4630      	mov	r0, r6
 801670c:	b002      	add	sp, #8
 801670e:	bd70      	pop	{r4, r5, r6, pc}
 8016710:	260b      	movs	r6, #11
 8016712:	4630      	mov	r0, r6
 8016714:	b002      	add	sp, #8
 8016716:	bd70      	pop	{r4, r5, r6, pc}
 8016718:	6820      	ldr	r0, [r4, #0]
 801671a:	2105      	movs	r1, #5
 801671c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016720:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8016724:	9100      	str	r1, [sp, #0]
 8016726:	f002 fea3 	bl	8019470 <__atomic_exchange_8>
 801672a:	4630      	mov	r0, r6
 801672c:	b002      	add	sp, #8
 801672e:	bd70      	pop	{r4, r5, r6, pc}

08016730 <rcl_take_response>:
 8016730:	b570      	push	{r4, r5, r6, lr}
 8016732:	468e      	mov	lr, r1
 8016734:	460c      	mov	r4, r1
 8016736:	4616      	mov	r6, r2
 8016738:	4605      	mov	r5, r0
 801673a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801673e:	b08c      	sub	sp, #48	@ 0x30
 8016740:	f10d 0c18 	add.w	ip, sp, #24
 8016744:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016748:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801674c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016750:	b35d      	cbz	r5, 80167aa <rcl_take_response+0x7a>
 8016752:	682b      	ldr	r3, [r5, #0]
 8016754:	b34b      	cbz	r3, 80167aa <rcl_take_response+0x7a>
 8016756:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801675a:	b330      	cbz	r0, 80167aa <rcl_take_response+0x7a>
 801675c:	b346      	cbz	r6, 80167b0 <rcl_take_response+0x80>
 801675e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80167b8 <rcl_take_response+0x88>
 8016762:	2300      	movs	r3, #0
 8016764:	f88d 3007 	strb.w	r3, [sp, #7]
 8016768:	4632      	mov	r2, r6
 801676a:	f10d 0307 	add.w	r3, sp, #7
 801676e:	a902      	add	r1, sp, #8
 8016770:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016774:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016778:	f003 fe0a 	bl	801a390 <rmw_take_response>
 801677c:	4605      	mov	r5, r0
 801677e:	b9c8      	cbnz	r0, 80167b4 <rcl_take_response+0x84>
 8016780:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016784:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8016788:	2a00      	cmp	r2, #0
 801678a:	bf08      	it	eq
 801678c:	461d      	moveq	r5, r3
 801678e:	f10d 0e18 	add.w	lr, sp, #24
 8016792:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016796:	46a4      	mov	ip, r4
 8016798:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801679c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80167a0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80167a4:	4628      	mov	r0, r5
 80167a6:	b00c      	add	sp, #48	@ 0x30
 80167a8:	bd70      	pop	{r4, r5, r6, pc}
 80167aa:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80167ae:	e7ee      	b.n	801678e <rcl_take_response+0x5e>
 80167b0:	250b      	movs	r5, #11
 80167b2:	e7ec      	b.n	801678e <rcl_take_response+0x5e>
 80167b4:	2501      	movs	r5, #1
 80167b6:	e7ea      	b.n	801678e <rcl_take_response+0x5e>
	...

080167c0 <rcl_client_is_valid>:
 80167c0:	b130      	cbz	r0, 80167d0 <rcl_client_is_valid+0x10>
 80167c2:	6800      	ldr	r0, [r0, #0]
 80167c4:	b120      	cbz	r0, 80167d0 <rcl_client_is_valid+0x10>
 80167c6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80167ca:	3800      	subs	r0, #0
 80167cc:	bf18      	it	ne
 80167ce:	2001      	movne	r0, #1
 80167d0:	4770      	bx	lr
 80167d2:	bf00      	nop

080167d4 <rcl_convert_rmw_ret_to_rcl_ret>:
 80167d4:	280b      	cmp	r0, #11
 80167d6:	dc0d      	bgt.n	80167f4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80167d8:	2800      	cmp	r0, #0
 80167da:	db09      	blt.n	80167f0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80167dc:	280b      	cmp	r0, #11
 80167de:	d807      	bhi.n	80167f0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80167e0:	e8df f000 	tbb	[pc, r0]
 80167e4:	07060607 	.word	0x07060607
 80167e8:	06060606 	.word	0x06060606
 80167ec:	07070606 	.word	0x07070606
 80167f0:	2001      	movs	r0, #1
 80167f2:	4770      	bx	lr
 80167f4:	28cb      	cmp	r0, #203	@ 0xcb
 80167f6:	bf18      	it	ne
 80167f8:	2001      	movne	r0, #1
 80167fa:	4770      	bx	lr

080167fc <rcl_get_zero_initialized_context>:
 80167fc:	4a03      	ldr	r2, [pc, #12]	@ (801680c <rcl_get_zero_initialized_context+0x10>)
 80167fe:	4603      	mov	r3, r0
 8016800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016804:	e883 0003 	stmia.w	r3, {r0, r1}
 8016808:	4618      	mov	r0, r3
 801680a:	4770      	bx	lr
 801680c:	0801ecec 	.word	0x0801ecec

08016810 <rcl_context_is_valid>:
 8016810:	b118      	cbz	r0, 801681a <rcl_context_is_valid+0xa>
 8016812:	6840      	ldr	r0, [r0, #4]
 8016814:	3800      	subs	r0, #0
 8016816:	bf18      	it	ne
 8016818:	2001      	movne	r0, #1
 801681a:	4770      	bx	lr

0801681c <__cleanup_context>:
 801681c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016820:	4606      	mov	r6, r0
 8016822:	6800      	ldr	r0, [r0, #0]
 8016824:	2300      	movs	r3, #0
 8016826:	6073      	str	r3, [r6, #4]
 8016828:	2800      	cmp	r0, #0
 801682a:	d049      	beq.n	80168c0 <__cleanup_context+0xa4>
 801682c:	6947      	ldr	r7, [r0, #20]
 801682e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016832:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8016836:	b137      	cbz	r7, 8016846 <__cleanup_context+0x2a>
 8016838:	3014      	adds	r0, #20
 801683a:	f7f8 fe2d 	bl	800f498 <rcl_init_options_fini>
 801683e:	4607      	mov	r7, r0
 8016840:	2800      	cmp	r0, #0
 8016842:	d144      	bne.n	80168ce <__cleanup_context+0xb2>
 8016844:	6830      	ldr	r0, [r6, #0]
 8016846:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016848:	b143      	cbz	r3, 801685c <__cleanup_context+0x40>
 801684a:	3028      	adds	r0, #40	@ 0x28
 801684c:	f7fa fa90 	bl	8010d70 <rmw_context_fini>
 8016850:	b118      	cbz	r0, 801685a <__cleanup_context+0x3e>
 8016852:	2f00      	cmp	r7, #0
 8016854:	d03e      	beq.n	80168d4 <__cleanup_context+0xb8>
 8016856:	f7f9 ffc3 	bl	80107e0 <rcutils_reset_error>
 801685a:	6830      	ldr	r0, [r6, #0]
 801685c:	6a03      	ldr	r3, [r0, #32]
 801685e:	b1db      	cbz	r3, 8016898 <__cleanup_context+0x7c>
 8016860:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8016864:	2a01      	cmp	r2, #1
 8016866:	f17c 0100 	sbcs.w	r1, ip, #0
 801686a:	db11      	blt.n	8016890 <__cleanup_context+0x74>
 801686c:	2400      	movs	r4, #0
 801686e:	4625      	mov	r5, r4
 8016870:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016874:	4649      	mov	r1, r9
 8016876:	b1b8      	cbz	r0, 80168a8 <__cleanup_context+0x8c>
 8016878:	47c0      	blx	r8
 801687a:	6833      	ldr	r3, [r6, #0]
 801687c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8016880:	3401      	adds	r4, #1
 8016882:	f145 0500 	adc.w	r5, r5, #0
 8016886:	4294      	cmp	r4, r2
 8016888:	eb75 010c 	sbcs.w	r1, r5, ip
 801688c:	6a1b      	ldr	r3, [r3, #32]
 801688e:	dbef      	blt.n	8016870 <__cleanup_context+0x54>
 8016890:	4618      	mov	r0, r3
 8016892:	4649      	mov	r1, r9
 8016894:	47c0      	blx	r8
 8016896:	6830      	ldr	r0, [r6, #0]
 8016898:	4649      	mov	r1, r9
 801689a:	47c0      	blx	r8
 801689c:	2300      	movs	r3, #0
 801689e:	e9c6 3300 	strd	r3, r3, [r6]
 80168a2:	4638      	mov	r0, r7
 80168a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168a8:	3401      	adds	r4, #1
 80168aa:	f145 0500 	adc.w	r5, r5, #0
 80168ae:	4294      	cmp	r4, r2
 80168b0:	eb75 010c 	sbcs.w	r1, r5, ip
 80168b4:	dbdc      	blt.n	8016870 <__cleanup_context+0x54>
 80168b6:	4618      	mov	r0, r3
 80168b8:	4649      	mov	r1, r9
 80168ba:	47c0      	blx	r8
 80168bc:	6830      	ldr	r0, [r6, #0]
 80168be:	e7eb      	b.n	8016898 <__cleanup_context+0x7c>
 80168c0:	4607      	mov	r7, r0
 80168c2:	2300      	movs	r3, #0
 80168c4:	e9c6 3300 	strd	r3, r3, [r6]
 80168c8:	4638      	mov	r0, r7
 80168ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168ce:	f7f9 ff87 	bl	80107e0 <rcutils_reset_error>
 80168d2:	e7b7      	b.n	8016844 <__cleanup_context+0x28>
 80168d4:	f7ff ff7e 	bl	80167d4 <rcl_convert_rmw_ret_to_rcl_ret>
 80168d8:	4607      	mov	r7, r0
 80168da:	e7bc      	b.n	8016856 <__cleanup_context+0x3a>

080168dc <rcl_init>:
 80168dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168e0:	1e05      	subs	r5, r0, #0
 80168e2:	b09e      	sub	sp, #120	@ 0x78
 80168e4:	460e      	mov	r6, r1
 80168e6:	4690      	mov	r8, r2
 80168e8:	461f      	mov	r7, r3
 80168ea:	f340 809c 	ble.w	8016a26 <rcl_init+0x14a>
 80168ee:	2900      	cmp	r1, #0
 80168f0:	f000 809c 	beq.w	8016a2c <rcl_init+0x150>
 80168f4:	f1a1 0e04 	sub.w	lr, r1, #4
 80168f8:	f04f 0c00 	mov.w	ip, #0
 80168fc:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8016900:	f10c 0c01 	add.w	ip, ip, #1
 8016904:	2c00      	cmp	r4, #0
 8016906:	f000 8091 	beq.w	8016a2c <rcl_init+0x150>
 801690a:	4565      	cmp	r5, ip
 801690c:	d1f6      	bne.n	80168fc <rcl_init+0x20>
 801690e:	f1b8 0f00 	cmp.w	r8, #0
 8016912:	f000 808b 	beq.w	8016a2c <rcl_init+0x150>
 8016916:	f8d8 4000 	ldr.w	r4, [r8]
 801691a:	2c00      	cmp	r4, #0
 801691c:	f000 8086 	beq.w	8016a2c <rcl_init+0x150>
 8016920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016922:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8016926:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801692a:	6823      	ldr	r3, [r4, #0]
 801692c:	f8cc 3000 	str.w	r3, [ip]
 8016930:	a819      	add	r0, sp, #100	@ 0x64
 8016932:	f7f9 ff2f 	bl	8010794 <rcutils_allocator_is_valid>
 8016936:	2800      	cmp	r0, #0
 8016938:	d078      	beq.n	8016a2c <rcl_init+0x150>
 801693a:	2f00      	cmp	r7, #0
 801693c:	d076      	beq.n	8016a2c <rcl_init+0x150>
 801693e:	683b      	ldr	r3, [r7, #0]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d178      	bne.n	8016a36 <rcl_init+0x15a>
 8016944:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8016948:	2178      	movs	r1, #120	@ 0x78
 801694a:	2001      	movs	r0, #1
 801694c:	4798      	blx	r3
 801694e:	4604      	mov	r4, r0
 8016950:	6038      	str	r0, [r7, #0]
 8016952:	2800      	cmp	r0, #0
 8016954:	f000 80b6 	beq.w	8016ac4 <rcl_init+0x1e8>
 8016958:	a802      	add	r0, sp, #8
 801695a:	f003 f86d 	bl	8019a38 <rmw_get_zero_initialized_context>
 801695e:	a902      	add	r1, sp, #8
 8016960:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8016964:	2250      	movs	r2, #80	@ 0x50
 8016966:	ac19      	add	r4, sp, #100	@ 0x64
 8016968:	f005 ff5d 	bl	801c826 <memcpy>
 801696c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801696e:	f8d7 e000 	ldr.w	lr, [r7]
 8016972:	46f4      	mov	ip, lr
 8016974:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016978:	6823      	ldr	r3, [r4, #0]
 801697a:	f8cc 3000 	str.w	r3, [ip]
 801697e:	f10e 0114 	add.w	r1, lr, #20
 8016982:	4640      	mov	r0, r8
 8016984:	f7f8 fdb2 	bl	800f4ec <rcl_init_options_copy>
 8016988:	4604      	mov	r4, r0
 801698a:	2800      	cmp	r0, #0
 801698c:	d144      	bne.n	8016a18 <rcl_init+0x13c>
 801698e:	f8d7 9000 	ldr.w	r9, [r7]
 8016992:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8016996:	f8c9 0020 	str.w	r0, [r9, #32]
 801699a:	f8c9 5018 	str.w	r5, [r9, #24]
 801699e:	f8c9 801c 	str.w	r8, [r9, #28]
 80169a2:	2d00      	cmp	r5, #0
 80169a4:	d04e      	beq.n	8016a44 <rcl_init+0x168>
 80169a6:	2e00      	cmp	r6, #0
 80169a8:	d04c      	beq.n	8016a44 <rcl_init+0x168>
 80169aa:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80169ae:	2104      	movs	r1, #4
 80169b0:	4628      	mov	r0, r5
 80169b2:	4798      	blx	r3
 80169b4:	f8c9 0020 	str.w	r0, [r9, #32]
 80169b8:	f8d7 9000 	ldr.w	r9, [r7]
 80169bc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80169c0:	46ca      	mov	sl, r9
 80169c2:	b343      	cbz	r3, 8016a16 <rcl_init+0x13a>
 80169c4:	2d01      	cmp	r5, #1
 80169c6:	f178 0300 	sbcs.w	r3, r8, #0
 80169ca:	db3b      	blt.n	8016a44 <rcl_init+0x168>
 80169cc:	2400      	movs	r4, #0
 80169ce:	3e04      	subs	r6, #4
 80169d0:	46a1      	mov	r9, r4
 80169d2:	e00b      	b.n	80169ec <rcl_init+0x110>
 80169d4:	6831      	ldr	r1, [r6, #0]
 80169d6:	f005 ff26 	bl	801c826 <memcpy>
 80169da:	3401      	adds	r4, #1
 80169dc:	f149 0900 	adc.w	r9, r9, #0
 80169e0:	45c8      	cmp	r8, r9
 80169e2:	bf08      	it	eq
 80169e4:	42a5      	cmpeq	r5, r4
 80169e6:	d02b      	beq.n	8016a40 <rcl_init+0x164>
 80169e8:	f8d7 a000 	ldr.w	sl, [r7]
 80169ec:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80169f0:	f7e9 fc20 	bl	8000234 <strlen>
 80169f4:	1c42      	adds	r2, r0, #1
 80169f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80169f8:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80169fa:	f8da a020 	ldr.w	sl, [sl, #32]
 80169fe:	9201      	str	r2, [sp, #4]
 8016a00:	4610      	mov	r0, r2
 8016a02:	4798      	blx	r3
 8016a04:	683b      	ldr	r3, [r7, #0]
 8016a06:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8016a0a:	6a1b      	ldr	r3, [r3, #32]
 8016a0c:	9a01      	ldr	r2, [sp, #4]
 8016a0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016a12:	2800      	cmp	r0, #0
 8016a14:	d1de      	bne.n	80169d4 <rcl_init+0xf8>
 8016a16:	240a      	movs	r4, #10
 8016a18:	4638      	mov	r0, r7
 8016a1a:	f7ff feff 	bl	801681c <__cleanup_context>
 8016a1e:	4620      	mov	r0, r4
 8016a20:	b01e      	add	sp, #120	@ 0x78
 8016a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a26:	2900      	cmp	r1, #0
 8016a28:	f43f af71 	beq.w	801690e <rcl_init+0x32>
 8016a2c:	240b      	movs	r4, #11
 8016a2e:	4620      	mov	r0, r4
 8016a30:	b01e      	add	sp, #120	@ 0x78
 8016a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a36:	2464      	movs	r4, #100	@ 0x64
 8016a38:	4620      	mov	r0, r4
 8016a3a:	b01e      	add	sp, #120	@ 0x78
 8016a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a40:	f8d7 9000 	ldr.w	r9, [r7]
 8016a44:	4926      	ldr	r1, [pc, #152]	@ (8016ae0 <rcl_init+0x204>)
 8016a46:	680b      	ldr	r3, [r1, #0]
 8016a48:	3301      	adds	r3, #1
 8016a4a:	d036      	beq.n	8016aba <rcl_init+0x1de>
 8016a4c:	600b      	str	r3, [r1, #0]
 8016a4e:	461a      	mov	r2, r3
 8016a50:	2400      	movs	r4, #0
 8016a52:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8016a56:	607b      	str	r3, [r7, #4]
 8016a58:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8016a5a:	3301      	adds	r3, #1
 8016a5c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8016a60:	d034      	beq.n	8016acc <rcl_init+0x1f0>
 8016a62:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8016a66:	b93b      	cbnz	r3, 8016a78 <rcl_init+0x19c>
 8016a68:	3030      	adds	r0, #48	@ 0x30
 8016a6a:	f000 f83b 	bl	8016ae4 <rcl_get_localhost_only>
 8016a6e:	4604      	mov	r4, r0
 8016a70:	2800      	cmp	r0, #0
 8016a72:	d1d1      	bne.n	8016a18 <rcl_init+0x13c>
 8016a74:	683b      	ldr	r3, [r7, #0]
 8016a76:	6958      	ldr	r0, [r3, #20]
 8016a78:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8016a7a:	aa18      	add	r2, sp, #96	@ 0x60
 8016a7c:	a917      	add	r1, sp, #92	@ 0x5c
 8016a7e:	f001 f925 	bl	8017ccc <rcl_validate_enclave_name>
 8016a82:	4604      	mov	r4, r0
 8016a84:	2800      	cmp	r0, #0
 8016a86:	d1c7      	bne.n	8016a18 <rcl_init+0x13c>
 8016a88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016a8a:	b9eb      	cbnz	r3, 8016ac8 <rcl_init+0x1ec>
 8016a8c:	6839      	ldr	r1, [r7, #0]
 8016a8e:	694b      	ldr	r3, [r1, #20]
 8016a90:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8016a92:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8016a96:	f000 fb3f 	bl	8017118 <rcl_get_security_options_from_environment>
 8016a9a:	4604      	mov	r4, r0
 8016a9c:	2800      	cmp	r0, #0
 8016a9e:	d1bb      	bne.n	8016a18 <rcl_init+0x13c>
 8016aa0:	6839      	ldr	r1, [r7, #0]
 8016aa2:	6948      	ldr	r0, [r1, #20]
 8016aa4:	3128      	adds	r1, #40	@ 0x28
 8016aa6:	3018      	adds	r0, #24
 8016aa8:	f7fa f82c 	bl	8010b04 <rmw_init>
 8016aac:	4604      	mov	r4, r0
 8016aae:	2800      	cmp	r0, #0
 8016ab0:	d0bd      	beq.n	8016a2e <rcl_init+0x152>
 8016ab2:	f7ff fe8f 	bl	80167d4 <rcl_convert_rmw_ret_to_rcl_ret>
 8016ab6:	4604      	mov	r4, r0
 8016ab8:	e7ae      	b.n	8016a18 <rcl_init+0x13c>
 8016aba:	2201      	movs	r2, #1
 8016abc:	461c      	mov	r4, r3
 8016abe:	600a      	str	r2, [r1, #0]
 8016ac0:	4613      	mov	r3, r2
 8016ac2:	e7c6      	b.n	8016a52 <rcl_init+0x176>
 8016ac4:	240a      	movs	r4, #10
 8016ac6:	e7b2      	b.n	8016a2e <rcl_init+0x152>
 8016ac8:	2401      	movs	r4, #1
 8016aca:	e7a5      	b.n	8016a18 <rcl_init+0x13c>
 8016acc:	3024      	adds	r0, #36	@ 0x24
 8016ace:	f004 fce9 	bl	801b4a4 <rcl_get_default_domain_id>
 8016ad2:	4604      	mov	r4, r0
 8016ad4:	2800      	cmp	r0, #0
 8016ad6:	d19f      	bne.n	8016a18 <rcl_init+0x13c>
 8016ad8:	683b      	ldr	r3, [r7, #0]
 8016ada:	6958      	ldr	r0, [r3, #20]
 8016adc:	e7c1      	b.n	8016a62 <rcl_init+0x186>
 8016ade:	bf00      	nop
 8016ae0:	2000bb58 	.word	0x2000bb58

08016ae4 <rcl_get_localhost_only>:
 8016ae4:	b510      	push	{r4, lr}
 8016ae6:	b082      	sub	sp, #8
 8016ae8:	2300      	movs	r3, #0
 8016aea:	9301      	str	r3, [sp, #4]
 8016aec:	b1b8      	cbz	r0, 8016b1e <rcl_get_localhost_only+0x3a>
 8016aee:	4604      	mov	r4, r0
 8016af0:	a901      	add	r1, sp, #4
 8016af2:	480c      	ldr	r0, [pc, #48]	@ (8016b24 <rcl_get_localhost_only+0x40>)
 8016af4:	f002 fcf4 	bl	80194e0 <rcutils_get_env>
 8016af8:	b110      	cbz	r0, 8016b00 <rcl_get_localhost_only+0x1c>
 8016afa:	2001      	movs	r0, #1
 8016afc:	b002      	add	sp, #8
 8016afe:	bd10      	pop	{r4, pc}
 8016b00:	9b01      	ldr	r3, [sp, #4]
 8016b02:	b113      	cbz	r3, 8016b0a <rcl_get_localhost_only+0x26>
 8016b04:	781a      	ldrb	r2, [r3, #0]
 8016b06:	2a31      	cmp	r2, #49	@ 0x31
 8016b08:	d004      	beq.n	8016b14 <rcl_get_localhost_only+0x30>
 8016b0a:	2302      	movs	r3, #2
 8016b0c:	2000      	movs	r0, #0
 8016b0e:	7023      	strb	r3, [r4, #0]
 8016b10:	b002      	add	sp, #8
 8016b12:	bd10      	pop	{r4, pc}
 8016b14:	785b      	ldrb	r3, [r3, #1]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d1f7      	bne.n	8016b0a <rcl_get_localhost_only+0x26>
 8016b1a:	2301      	movs	r3, #1
 8016b1c:	e7f6      	b.n	8016b0c <rcl_get_localhost_only+0x28>
 8016b1e:	200b      	movs	r0, #11
 8016b20:	b002      	add	sp, #8
 8016b22:	bd10      	pop	{r4, pc}
 8016b24:	0801ecf4 	.word	0x0801ecf4

08016b28 <rcl_get_zero_initialized_node>:
 8016b28:	4a03      	ldr	r2, [pc, #12]	@ (8016b38 <rcl_get_zero_initialized_node+0x10>)
 8016b2a:	4603      	mov	r3, r0
 8016b2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016b30:	e883 0003 	stmia.w	r3, {r0, r1}
 8016b34:	4618      	mov	r0, r3
 8016b36:	4770      	bx	lr
 8016b38:	0801ed10 	.word	0x0801ed10

08016b3c <rcl_node_init>:
 8016b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b40:	b0a9      	sub	sp, #164	@ 0xa4
 8016b42:	4604      	mov	r4, r0
 8016b44:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8016b48:	a823      	add	r0, sp, #140	@ 0x8c
 8016b4a:	460e      	mov	r6, r1
 8016b4c:	4615      	mov	r5, r2
 8016b4e:	461f      	mov	r7, r3
 8016b50:	f004 ff1c 	bl	801b98c <rcl_guard_condition_get_default_options>
 8016b54:	f1b8 0f00 	cmp.w	r8, #0
 8016b58:	f000 80e6 	beq.w	8016d28 <rcl_node_init+0x1ec>
 8016b5c:	4640      	mov	r0, r8
 8016b5e:	f7f9 fe19 	bl	8010794 <rcutils_allocator_is_valid>
 8016b62:	2800      	cmp	r0, #0
 8016b64:	f000 80e0 	beq.w	8016d28 <rcl_node_init+0x1ec>
 8016b68:	2e00      	cmp	r6, #0
 8016b6a:	f000 80dd 	beq.w	8016d28 <rcl_node_init+0x1ec>
 8016b6e:	2d00      	cmp	r5, #0
 8016b70:	f000 80da 	beq.w	8016d28 <rcl_node_init+0x1ec>
 8016b74:	2c00      	cmp	r4, #0
 8016b76:	f000 80d7 	beq.w	8016d28 <rcl_node_init+0x1ec>
 8016b7a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016b7e:	f1b9 0f00 	cmp.w	r9, #0
 8016b82:	f040 80fd 	bne.w	8016d80 <rcl_node_init+0x244>
 8016b86:	2f00      	cmp	r7, #0
 8016b88:	f000 80ce 	beq.w	8016d28 <rcl_node_init+0x1ec>
 8016b8c:	4638      	mov	r0, r7
 8016b8e:	f7ff fe3f 	bl	8016810 <rcl_context_is_valid>
 8016b92:	4682      	mov	sl, r0
 8016b94:	2800      	cmp	r0, #0
 8016b96:	f000 80cd 	beq.w	8016d34 <rcl_node_init+0x1f8>
 8016b9a:	464a      	mov	r2, r9
 8016b9c:	a922      	add	r1, sp, #136	@ 0x88
 8016b9e:	4630      	mov	r0, r6
 8016ba0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8016ba4:	f003 f8c6 	bl	8019d34 <rmw_validate_node_name>
 8016ba8:	4681      	mov	r9, r0
 8016baa:	2800      	cmp	r0, #0
 8016bac:	f040 80be 	bne.w	8016d2c <rcl_node_init+0x1f0>
 8016bb0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8016bb2:	2800      	cmp	r0, #0
 8016bb4:	f040 80f0 	bne.w	8016d98 <rcl_node_init+0x25c>
 8016bb8:	4628      	mov	r0, r5
 8016bba:	f7e9 fb3b 	bl	8000234 <strlen>
 8016bbe:	2800      	cmp	r0, #0
 8016bc0:	f040 80bb 	bne.w	8016d3a <rcl_node_init+0x1fe>
 8016bc4:	4d7c      	ldr	r5, [pc, #496]	@ (8016db8 <rcl_node_init+0x27c>)
 8016bc6:	a922      	add	r1, sp, #136	@ 0x88
 8016bc8:	2200      	movs	r2, #0
 8016bca:	4628      	mov	r0, r5
 8016bcc:	f003 f894 	bl	8019cf8 <rmw_validate_namespace>
 8016bd0:	4681      	mov	r9, r0
 8016bd2:	2800      	cmp	r0, #0
 8016bd4:	f040 80aa 	bne.w	8016d2c <rcl_node_init+0x1f0>
 8016bd8:	4682      	mov	sl, r0
 8016bda:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8016bdc:	2800      	cmp	r0, #0
 8016bde:	f040 80e0 	bne.w	8016da2 <rcl_node_init+0x266>
 8016be2:	f8d8 3000 	ldr.w	r3, [r8]
 8016be6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016bea:	2078      	movs	r0, #120	@ 0x78
 8016bec:	4798      	blx	r3
 8016bee:	4681      	mov	r9, r0
 8016bf0:	6060      	str	r0, [r4, #4]
 8016bf2:	2800      	cmp	r0, #0
 8016bf4:	f000 80ca 	beq.w	8016d8c <rcl_node_init+0x250>
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8016c00:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8016c04:	a808      	add	r0, sp, #32
 8016c06:	f000 f907 	bl	8016e18 <rcl_node_get_default_options>
 8016c0a:	a908      	add	r1, sp, #32
 8016c0c:	4648      	mov	r0, r9
 8016c0e:	2268      	movs	r2, #104	@ 0x68
 8016c10:	f005 fe09 	bl	801c826 <memcpy>
 8016c14:	6861      	ldr	r1, [r4, #4]
 8016c16:	6027      	str	r7, [r4, #0]
 8016c18:	4640      	mov	r0, r8
 8016c1a:	f000 f90b 	bl	8016e34 <rcl_node_options_copy>
 8016c1e:	2800      	cmp	r0, #0
 8016c20:	d158      	bne.n	8016cd4 <rcl_node_init+0x198>
 8016c22:	4628      	mov	r0, r5
 8016c24:	f7e9 fb06 	bl	8000234 <strlen>
 8016c28:	4428      	add	r0, r5
 8016c2a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8016c2e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8016c32:	2b2f      	cmp	r3, #47	@ 0x2f
 8016c34:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016c38:	9300      	str	r3, [sp, #0]
 8016c3a:	bf0c      	ite	eq
 8016c3c:	4b5f      	ldreq	r3, [pc, #380]	@ (8016dbc <rcl_node_init+0x280>)
 8016c3e:	4b60      	ldrne	r3, [pc, #384]	@ (8016dc0 <rcl_node_init+0x284>)
 8016c40:	9302      	str	r3, [sp, #8]
 8016c42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016c46:	9301      	str	r3, [sp, #4]
 8016c48:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8016c4c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016c50:	f002 fc6e 	bl	8019530 <rcutils_format_string_limit>
 8016c54:	6823      	ldr	r3, [r4, #0]
 8016c56:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8016c5a:	6818      	ldr	r0, [r3, #0]
 8016c5c:	4631      	mov	r1, r6
 8016c5e:	3028      	adds	r0, #40	@ 0x28
 8016c60:	462a      	mov	r2, r5
 8016c62:	6866      	ldr	r6, [r4, #4]
 8016c64:	f7fa f930 	bl	8010ec8 <rmw_create_node>
 8016c68:	6863      	ldr	r3, [r4, #4]
 8016c6a:	66b0      	str	r0, [r6, #104]	@ 0x68
 8016c6c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8016c6e:	2800      	cmp	r0, #0
 8016c70:	d032      	beq.n	8016cd8 <rcl_node_init+0x19c>
 8016c72:	f7fa f9bd 	bl	8010ff0 <rmw_node_get_graph_guard_condition>
 8016c76:	4681      	mov	r9, r0
 8016c78:	b360      	cbz	r0, 8016cd4 <rcl_node_init+0x198>
 8016c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8016c7e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016c82:	6866      	ldr	r6, [r4, #4]
 8016c84:	2008      	movs	r0, #8
 8016c86:	4798      	blx	r3
 8016c88:	6863      	ldr	r3, [r4, #4]
 8016c8a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8016c8c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8016c90:	f1bb 0f00 	cmp.w	fp, #0
 8016c94:	d020      	beq.n	8016cd8 <rcl_node_init+0x19c>
 8016c96:	a806      	add	r0, sp, #24
 8016c98:	f004 fd9c 	bl	801b7d4 <rcl_get_zero_initialized_guard_condition>
 8016c9c:	a806      	add	r0, sp, #24
 8016c9e:	c803      	ldmia	r0, {r0, r1}
 8016ca0:	6863      	ldr	r3, [r4, #4]
 8016ca2:	46c4      	mov	ip, r8
 8016ca4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8016ca8:	e88b 0003 	stmia.w	fp, {r0, r1}
 8016cac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016cb0:	ae23      	add	r6, sp, #140	@ 0x8c
 8016cb2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016cb4:	f8dc 3000 	ldr.w	r3, [ip]
 8016cb8:	6033      	str	r3, [r6, #0]
 8016cba:	ab28      	add	r3, sp, #160	@ 0xa0
 8016cbc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8016cc0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016cc4:	4649      	mov	r1, r9
 8016cc6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016cc8:	463a      	mov	r2, r7
 8016cca:	4670      	mov	r0, lr
 8016ccc:	f004 fdd8 	bl	801b880 <rcl_guard_condition_init_from_rmw>
 8016cd0:	4681      	mov	r9, r0
 8016cd2:	b328      	cbz	r0, 8016d20 <rcl_node_init+0x1e4>
 8016cd4:	6863      	ldr	r3, [r4, #4]
 8016cd6:	b1f3      	cbz	r3, 8016d16 <rcl_node_init+0x1da>
 8016cd8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8016cda:	b128      	cbz	r0, 8016ce8 <rcl_node_init+0x1ac>
 8016cdc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016ce0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016ce4:	4798      	blx	r3
 8016ce6:	6863      	ldr	r3, [r4, #4]
 8016ce8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8016cea:	b110      	cbz	r0, 8016cf2 <rcl_node_init+0x1b6>
 8016cec:	f7fa f904 	bl	8010ef8 <rmw_destroy_node>
 8016cf0:	6863      	ldr	r3, [r4, #4]
 8016cf2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8016cf4:	b148      	cbz	r0, 8016d0a <rcl_node_init+0x1ce>
 8016cf6:	f004 fe23 	bl	801b940 <rcl_guard_condition_fini>
 8016cfa:	6863      	ldr	r3, [r4, #4]
 8016cfc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016d00:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8016d02:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016d06:	4798      	blx	r3
 8016d08:	6863      	ldr	r3, [r4, #4]
 8016d0a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016d0e:	4618      	mov	r0, r3
 8016d10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016d14:	4798      	blx	r3
 8016d16:	2300      	movs	r3, #0
 8016d18:	e9c4 3300 	strd	r3, r3, [r4]
 8016d1c:	f04f 0901 	mov.w	r9, #1
 8016d20:	f1ba 0f00 	cmp.w	sl, #0
 8016d24:	d125      	bne.n	8016d72 <rcl_node_init+0x236>
 8016d26:	e001      	b.n	8016d2c <rcl_node_init+0x1f0>
 8016d28:	f04f 090b 	mov.w	r9, #11
 8016d2c:	4648      	mov	r0, r9
 8016d2e:	b029      	add	sp, #164	@ 0xa4
 8016d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d34:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8016d38:	e7f8      	b.n	8016d2c <rcl_node_init+0x1f0>
 8016d3a:	782b      	ldrb	r3, [r5, #0]
 8016d3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d3e:	f43f af42 	beq.w	8016bc6 <rcl_node_init+0x8a>
 8016d42:	9503      	str	r5, [sp, #12]
 8016d44:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016d48:	9300      	str	r3, [sp, #0]
 8016d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8016dc4 <rcl_node_init+0x288>)
 8016d4c:	9302      	str	r3, [sp, #8]
 8016d4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016d52:	9301      	str	r3, [sp, #4]
 8016d54:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8016d58:	f002 fbea 	bl	8019530 <rcutils_format_string_limit>
 8016d5c:	4605      	mov	r5, r0
 8016d5e:	b340      	cbz	r0, 8016db2 <rcl_node_init+0x276>
 8016d60:	2200      	movs	r2, #0
 8016d62:	a922      	add	r1, sp, #136	@ 0x88
 8016d64:	9222      	str	r2, [sp, #136]	@ 0x88
 8016d66:	f002 ffc7 	bl	8019cf8 <rmw_validate_namespace>
 8016d6a:	4681      	mov	r9, r0
 8016d6c:	2800      	cmp	r0, #0
 8016d6e:	f43f af34 	beq.w	8016bda <rcl_node_init+0x9e>
 8016d72:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016d76:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016d7a:	4628      	mov	r0, r5
 8016d7c:	4798      	blx	r3
 8016d7e:	e7d5      	b.n	8016d2c <rcl_node_init+0x1f0>
 8016d80:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8016d84:	4648      	mov	r0, r9
 8016d86:	b029      	add	sp, #164	@ 0xa4
 8016d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d8c:	f04f 090a 	mov.w	r9, #10
 8016d90:	f1ba 0f00 	cmp.w	sl, #0
 8016d94:	d1ed      	bne.n	8016d72 <rcl_node_init+0x236>
 8016d96:	e7c9      	b.n	8016d2c <rcl_node_init+0x1f0>
 8016d98:	f003 f81e 	bl	8019dd8 <rmw_node_name_validation_result_string>
 8016d9c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8016da0:	e7c4      	b.n	8016d2c <rcl_node_init+0x1f0>
 8016da2:	f002 ffbb 	bl	8019d1c <rmw_namespace_validation_result_string>
 8016da6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8016daa:	f1ba 0f00 	cmp.w	sl, #0
 8016dae:	d1e0      	bne.n	8016d72 <rcl_node_init+0x236>
 8016db0:	e7bc      	b.n	8016d2c <rcl_node_init+0x1f0>
 8016db2:	f04f 090a 	mov.w	r9, #10
 8016db6:	e7b9      	b.n	8016d2c <rcl_node_init+0x1f0>
 8016db8:	0801e4bc 	.word	0x0801e4bc
 8016dbc:	0801e4e4 	.word	0x0801e4e4
 8016dc0:	0801e4c0 	.word	0x0801e4c0
 8016dc4:	0801ed0c 	.word	0x0801ed0c

08016dc8 <rcl_node_is_valid>:
 8016dc8:	b130      	cbz	r0, 8016dd8 <rcl_node_is_valid+0x10>
 8016dca:	6843      	ldr	r3, [r0, #4]
 8016dcc:	b123      	cbz	r3, 8016dd8 <rcl_node_is_valid+0x10>
 8016dce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016dd0:	b113      	cbz	r3, 8016dd8 <rcl_node_is_valid+0x10>
 8016dd2:	6800      	ldr	r0, [r0, #0]
 8016dd4:	f7ff bd1c 	b.w	8016810 <rcl_context_is_valid>
 8016dd8:	2000      	movs	r0, #0
 8016dda:	4770      	bx	lr

08016ddc <rcl_node_get_name>:
 8016ddc:	b120      	cbz	r0, 8016de8 <rcl_node_get_name+0xc>
 8016dde:	6840      	ldr	r0, [r0, #4]
 8016de0:	b110      	cbz	r0, 8016de8 <rcl_node_get_name+0xc>
 8016de2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016de4:	b100      	cbz	r0, 8016de8 <rcl_node_get_name+0xc>
 8016de6:	6880      	ldr	r0, [r0, #8]
 8016de8:	4770      	bx	lr
 8016dea:	bf00      	nop

08016dec <rcl_node_get_namespace>:
 8016dec:	b120      	cbz	r0, 8016df8 <rcl_node_get_namespace+0xc>
 8016dee:	6840      	ldr	r0, [r0, #4]
 8016df0:	b110      	cbz	r0, 8016df8 <rcl_node_get_namespace+0xc>
 8016df2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016df4:	b100      	cbz	r0, 8016df8 <rcl_node_get_namespace+0xc>
 8016df6:	68c0      	ldr	r0, [r0, #12]
 8016df8:	4770      	bx	lr
 8016dfa:	bf00      	nop

08016dfc <rcl_node_get_options>:
 8016dfc:	b128      	cbz	r0, 8016e0a <rcl_node_get_options+0xe>
 8016dfe:	6840      	ldr	r0, [r0, #4]
 8016e00:	b118      	cbz	r0, 8016e0a <rcl_node_get_options+0xe>
 8016e02:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	bf08      	it	eq
 8016e08:	2000      	moveq	r0, #0
 8016e0a:	4770      	bx	lr

08016e0c <rcl_node_get_rmw_handle>:
 8016e0c:	b110      	cbz	r0, 8016e14 <rcl_node_get_rmw_handle+0x8>
 8016e0e:	6840      	ldr	r0, [r0, #4]
 8016e10:	b100      	cbz	r0, 8016e14 <rcl_node_get_rmw_handle+0x8>
 8016e12:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016e14:	4770      	bx	lr
 8016e16:	bf00      	nop

08016e18 <rcl_node_get_default_options>:
 8016e18:	b510      	push	{r4, lr}
 8016e1a:	2268      	movs	r2, #104	@ 0x68
 8016e1c:	4604      	mov	r4, r0
 8016e1e:	2100      	movs	r1, #0
 8016e20:	f005 fc38 	bl	801c694 <memset>
 8016e24:	4620      	mov	r0, r4
 8016e26:	f7f9 fca7 	bl	8010778 <rcutils_get_default_allocator>
 8016e2a:	2301      	movs	r3, #1
 8016e2c:	7523      	strb	r3, [r4, #20]
 8016e2e:	4620      	mov	r0, r4
 8016e30:	bd10      	pop	{r4, pc}
 8016e32:	bf00      	nop

08016e34 <rcl_node_options_copy>:
 8016e34:	b1d0      	cbz	r0, 8016e6c <rcl_node_options_copy+0x38>
 8016e36:	b570      	push	{r4, r5, r6, lr}
 8016e38:	460c      	mov	r4, r1
 8016e3a:	b1a9      	cbz	r1, 8016e68 <rcl_node_options_copy+0x34>
 8016e3c:	4288      	cmp	r0, r1
 8016e3e:	4684      	mov	ip, r0
 8016e40:	d012      	beq.n	8016e68 <rcl_node_options_copy+0x34>
 8016e42:	4605      	mov	r5, r0
 8016e44:	8a86      	ldrh	r6, [r0, #20]
 8016e46:	468e      	mov	lr, r1
 8016e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e4a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016e4e:	682b      	ldr	r3, [r5, #0]
 8016e50:	f8ce 3000 	str.w	r3, [lr]
 8016e54:	f10c 0118 	add.w	r1, ip, #24
 8016e58:	2250      	movs	r2, #80	@ 0x50
 8016e5a:	82a6      	strh	r6, [r4, #20]
 8016e5c:	f104 0018 	add.w	r0, r4, #24
 8016e60:	f005 fce1 	bl	801c826 <memcpy>
 8016e64:	2000      	movs	r0, #0
 8016e66:	bd70      	pop	{r4, r5, r6, pc}
 8016e68:	200b      	movs	r0, #11
 8016e6a:	bd70      	pop	{r4, r5, r6, pc}
 8016e6c:	200b      	movs	r0, #11
 8016e6e:	4770      	bx	lr

08016e70 <rcl_node_resolve_name>:
 8016e70:	b082      	sub	sp, #8
 8016e72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e76:	b091      	sub	sp, #68	@ 0x44
 8016e78:	ac1a      	add	r4, sp, #104	@ 0x68
 8016e7a:	e884 000c 	stmia.w	r4, {r2, r3}
 8016e7e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8016e82:	2800      	cmp	r0, #0
 8016e84:	d03b      	beq.n	8016efe <rcl_node_resolve_name+0x8e>
 8016e86:	460c      	mov	r4, r1
 8016e88:	4605      	mov	r5, r0
 8016e8a:	f7ff ffb7 	bl	8016dfc <rcl_node_get_options>
 8016e8e:	2800      	cmp	r0, #0
 8016e90:	d037      	beq.n	8016f02 <rcl_node_resolve_name+0x92>
 8016e92:	4628      	mov	r0, r5
 8016e94:	f7ff ffa2 	bl	8016ddc <rcl_node_get_name>
 8016e98:	4606      	mov	r6, r0
 8016e9a:	4628      	mov	r0, r5
 8016e9c:	f7ff ffa6 	bl	8016dec <rcl_node_get_namespace>
 8016ea0:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8016ea4:	4681      	mov	r9, r0
 8016ea6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016eaa:	ad0b      	add	r5, sp, #44	@ 0x2c
 8016eac:	46ac      	mov	ip, r5
 8016eae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016eb2:	f8de 3000 	ldr.w	r3, [lr]
 8016eb6:	f8cc 3000 	str.w	r3, [ip]
 8016eba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016ebc:	b1fb      	cbz	r3, 8016efe <rcl_node_resolve_name+0x8e>
 8016ebe:	468a      	mov	sl, r1
 8016ec0:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8016ec4:	f002 fc8c 	bl	80197e0 <rcutils_get_zero_initialized_string_map>
 8016ec8:	ab10      	add	r3, sp, #64	@ 0x40
 8016eca:	9008      	str	r0, [sp, #32]
 8016ecc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016ed0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016ed4:	2100      	movs	r1, #0
 8016ed6:	e895 000c 	ldmia.w	r5, {r2, r3}
 8016eda:	a808      	add	r0, sp, #32
 8016edc:	f002 fcf8 	bl	80198d0 <rcutils_string_map_init>
 8016ee0:	4607      	mov	r7, r0
 8016ee2:	b180      	cbz	r0, 8016f06 <rcl_node_resolve_name+0x96>
 8016ee4:	f7f9 fc64 	bl	80107b0 <rcutils_get_error_string>
 8016ee8:	f7f9 fc7a 	bl	80107e0 <rcutils_reset_error>
 8016eec:	2f0a      	cmp	r7, #10
 8016eee:	bf18      	it	ne
 8016ef0:	2701      	movne	r7, #1
 8016ef2:	4638      	mov	r0, r7
 8016ef4:	b011      	add	sp, #68	@ 0x44
 8016ef6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016efa:	b002      	add	sp, #8
 8016efc:	4770      	bx	lr
 8016efe:	270b      	movs	r7, #11
 8016f00:	e7f7      	b.n	8016ef2 <rcl_node_resolve_name+0x82>
 8016f02:	2701      	movs	r7, #1
 8016f04:	e7f5      	b.n	8016ef2 <rcl_node_resolve_name+0x82>
 8016f06:	9009      	str	r0, [sp, #36]	@ 0x24
 8016f08:	9007      	str	r0, [sp, #28]
 8016f0a:	a808      	add	r0, sp, #32
 8016f0c:	f004 fc5c 	bl	801b7c8 <rcl_get_default_topic_name_substitutions>
 8016f10:	4607      	mov	r7, r0
 8016f12:	b1a8      	cbz	r0, 8016f40 <rcl_node_resolve_name+0xd0>
 8016f14:	280a      	cmp	r0, #10
 8016f16:	9c07      	ldr	r4, [sp, #28]
 8016f18:	d000      	beq.n	8016f1c <rcl_node_resolve_name+0xac>
 8016f1a:	2701      	movs	r7, #1
 8016f1c:	a808      	add	r0, sp, #32
 8016f1e:	f002 fd17 	bl	8019950 <rcutils_string_map_fini>
 8016f22:	2800      	cmp	r0, #0
 8016f24:	d13d      	bne.n	8016fa2 <rcl_node_resolve_name+0x132>
 8016f26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016f28:	4659      	mov	r1, fp
 8016f2a:	47d0      	blx	sl
 8016f2c:	4659      	mov	r1, fp
 8016f2e:	4620      	mov	r0, r4
 8016f30:	47d0      	blx	sl
 8016f32:	f1b8 0f00 	cmp.w	r8, #0
 8016f36:	d0dc      	beq.n	8016ef2 <rcl_node_resolve_name+0x82>
 8016f38:	2f67      	cmp	r7, #103	@ 0x67
 8016f3a:	bf08      	it	eq
 8016f3c:	2768      	moveq	r7, #104	@ 0x68
 8016f3e:	e7d8      	b.n	8016ef2 <rcl_node_resolve_name+0x82>
 8016f40:	ab09      	add	r3, sp, #36	@ 0x24
 8016f42:	9305      	str	r3, [sp, #20]
 8016f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f46:	46ec      	mov	ip, sp
 8016f48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f4c:	682b      	ldr	r3, [r5, #0]
 8016f4e:	f8cc 3000 	str.w	r3, [ip]
 8016f52:	464a      	mov	r2, r9
 8016f54:	4631      	mov	r1, r6
 8016f56:	4620      	mov	r0, r4
 8016f58:	ab08      	add	r3, sp, #32
 8016f5a:	f004 fad7 	bl	801b50c <rcl_expand_topic_name>
 8016f5e:	4607      	mov	r7, r0
 8016f60:	b9b8      	cbnz	r0, 8016f92 <rcl_node_resolve_name+0x122>
 8016f62:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016f64:	9009      	str	r0, [sp, #36]	@ 0x24
 8016f66:	4602      	mov	r2, r0
 8016f68:	a90a      	add	r1, sp, #40	@ 0x28
 8016f6a:	4620      	mov	r0, r4
 8016f6c:	f002 fe00 	bl	8019b70 <rmw_validate_full_topic_name>
 8016f70:	b988      	cbnz	r0, 8016f96 <rcl_node_resolve_name+0x126>
 8016f72:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8016f74:	b9d5      	cbnz	r5, 8016fac <rcl_node_resolve_name+0x13c>
 8016f76:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016f78:	a808      	add	r0, sp, #32
 8016f7a:	601c      	str	r4, [r3, #0]
 8016f7c:	f002 fce8 	bl	8019950 <rcutils_string_map_fini>
 8016f80:	4607      	mov	r7, r0
 8016f82:	b1a8      	cbz	r0, 8016fb0 <rcl_node_resolve_name+0x140>
 8016f84:	f7f9 fc14 	bl	80107b0 <rcutils_get_error_string>
 8016f88:	462c      	mov	r4, r5
 8016f8a:	f7f9 fc29 	bl	80107e0 <rcutils_reset_error>
 8016f8e:	2701      	movs	r7, #1
 8016f90:	e7c9      	b.n	8016f26 <rcl_node_resolve_name+0xb6>
 8016f92:	9c07      	ldr	r4, [sp, #28]
 8016f94:	e7c2      	b.n	8016f1c <rcl_node_resolve_name+0xac>
 8016f96:	f7f9 fc0b 	bl	80107b0 <rcutils_get_error_string>
 8016f9a:	2701      	movs	r7, #1
 8016f9c:	f7f9 fc20 	bl	80107e0 <rcutils_reset_error>
 8016fa0:	e7bc      	b.n	8016f1c <rcl_node_resolve_name+0xac>
 8016fa2:	f7f9 fc05 	bl	80107b0 <rcutils_get_error_string>
 8016fa6:	f7f9 fc1b 	bl	80107e0 <rcutils_reset_error>
 8016faa:	e7bc      	b.n	8016f26 <rcl_node_resolve_name+0xb6>
 8016fac:	2767      	movs	r7, #103	@ 0x67
 8016fae:	e7b5      	b.n	8016f1c <rcl_node_resolve_name+0xac>
 8016fb0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016fb2:	4659      	mov	r1, fp
 8016fb4:	47d0      	blx	sl
 8016fb6:	4659      	mov	r1, fp
 8016fb8:	4638      	mov	r0, r7
 8016fba:	47d0      	blx	sl
 8016fbc:	e799      	b.n	8016ef2 <rcl_node_resolve_name+0x82>
 8016fbe:	bf00      	nop

08016fc0 <exact_match_lookup>:
 8016fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fc2:	f102 0708 	add.w	r7, r2, #8
 8016fc6:	460b      	mov	r3, r1
 8016fc8:	4614      	mov	r4, r2
 8016fca:	4606      	mov	r6, r0
 8016fcc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016fd0:	b085      	sub	sp, #20
 8016fd2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	4919      	ldr	r1, [pc, #100]	@ (8017040 <exact_match_lookup+0x80>)
 8016fda:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016fde:	f002 fa99 	bl	8019514 <rcutils_join_path>
 8016fe2:	7833      	ldrb	r3, [r6, #0]
 8016fe4:	2b2f      	cmp	r3, #47	@ 0x2f
 8016fe6:	4605      	mov	r5, r0
 8016fe8:	d023      	beq.n	8017032 <exact_match_lookup+0x72>
 8016fea:	f104 030c 	add.w	r3, r4, #12
 8016fee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016ff2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016ff6:	1c70      	adds	r0, r6, #1
 8016ff8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016ffc:	f002 fa90 	bl	8019520 <rcutils_to_native_path>
 8017000:	4606      	mov	r6, r0
 8017002:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8017006:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801700a:	4631      	mov	r1, r6
 801700c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8017010:	4628      	mov	r0, r5
 8017012:	f002 fa7f 	bl	8019514 <rcutils_join_path>
 8017016:	6862      	ldr	r2, [r4, #4]
 8017018:	6921      	ldr	r1, [r4, #16]
 801701a:	4603      	mov	r3, r0
 801701c:	4630      	mov	r0, r6
 801701e:	461e      	mov	r6, r3
 8017020:	4790      	blx	r2
 8017022:	4628      	mov	r0, r5
 8017024:	6863      	ldr	r3, [r4, #4]
 8017026:	6921      	ldr	r1, [r4, #16]
 8017028:	4798      	blx	r3
 801702a:	4635      	mov	r5, r6
 801702c:	4628      	mov	r0, r5
 801702e:	b005      	add	sp, #20
 8017030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017032:	7873      	ldrb	r3, [r6, #1]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d1d8      	bne.n	8016fea <exact_match_lookup+0x2a>
 8017038:	4628      	mov	r0, r5
 801703a:	b005      	add	sp, #20
 801703c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801703e:	bf00      	nop
 8017040:	0801ed54 	.word	0x0801ed54

08017044 <rcl_get_secure_root>:
 8017044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017048:	b085      	sub	sp, #20
 801704a:	b168      	cbz	r0, 8017068 <rcl_get_secure_root+0x24>
 801704c:	4607      	mov	r7, r0
 801704e:	4608      	mov	r0, r1
 8017050:	460c      	mov	r4, r1
 8017052:	f7f9 fb9f 	bl	8010794 <rcutils_allocator_is_valid>
 8017056:	b138      	cbz	r0, 8017068 <rcl_get_secure_root+0x24>
 8017058:	2300      	movs	r3, #0
 801705a:	482d      	ldr	r0, [pc, #180]	@ (8017110 <rcl_get_secure_root+0xcc>)
 801705c:	9303      	str	r3, [sp, #12]
 801705e:	a903      	add	r1, sp, #12
 8017060:	f002 fa3e 	bl	80194e0 <rcutils_get_env>
 8017064:	4605      	mov	r5, r0
 8017066:	b120      	cbz	r0, 8017072 <rcl_get_secure_root+0x2e>
 8017068:	2500      	movs	r5, #0
 801706a:	4628      	mov	r0, r5
 801706c:	b005      	add	sp, #20
 801706e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017072:	9b03      	ldr	r3, [sp, #12]
 8017074:	781a      	ldrb	r2, [r3, #0]
 8017076:	2a00      	cmp	r2, #0
 8017078:	d0f6      	beq.n	8017068 <rcl_get_secure_root+0x24>
 801707a:	f104 090c 	add.w	r9, r4, #12
 801707e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8017082:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017086:	4618      	mov	r0, r3
 8017088:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801708c:	f002 fb6a 	bl	8019764 <rcutils_strdup>
 8017090:	4680      	mov	r8, r0
 8017092:	2800      	cmp	r0, #0
 8017094:	d0e8      	beq.n	8017068 <rcl_get_secure_root+0x24>
 8017096:	481f      	ldr	r0, [pc, #124]	@ (8017114 <rcl_get_secure_root+0xd0>)
 8017098:	9503      	str	r5, [sp, #12]
 801709a:	a903      	add	r1, sp, #12
 801709c:	f002 fa20 	bl	80194e0 <rcutils_get_env>
 80170a0:	b160      	cbz	r0, 80170bc <rcl_get_secure_root+0x78>
 80170a2:	2600      	movs	r6, #0
 80170a4:	6863      	ldr	r3, [r4, #4]
 80170a6:	6921      	ldr	r1, [r4, #16]
 80170a8:	4630      	mov	r0, r6
 80170aa:	4798      	blx	r3
 80170ac:	4640      	mov	r0, r8
 80170ae:	6863      	ldr	r3, [r4, #4]
 80170b0:	6921      	ldr	r1, [r4, #16]
 80170b2:	4798      	blx	r3
 80170b4:	4628      	mov	r0, r5
 80170b6:	b005      	add	sp, #20
 80170b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80170bc:	9b03      	ldr	r3, [sp, #12]
 80170be:	781e      	ldrb	r6, [r3, #0]
 80170c0:	b1f6      	cbz	r6, 8017100 <rcl_get_secure_root+0xbc>
 80170c2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80170c6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80170ca:	4618      	mov	r0, r3
 80170cc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80170d0:	f002 fb48 	bl	8019764 <rcutils_strdup>
 80170d4:	4606      	mov	r6, r0
 80170d6:	2800      	cmp	r0, #0
 80170d8:	d0e3      	beq.n	80170a2 <rcl_get_secure_root+0x5e>
 80170da:	4622      	mov	r2, r4
 80170dc:	4641      	mov	r1, r8
 80170de:	f7ff ff6f 	bl	8016fc0 <exact_match_lookup>
 80170e2:	4605      	mov	r5, r0
 80170e4:	2d00      	cmp	r5, #0
 80170e6:	d0dd      	beq.n	80170a4 <rcl_get_secure_root+0x60>
 80170e8:	4628      	mov	r0, r5
 80170ea:	f002 fa11 	bl	8019510 <rcutils_is_directory>
 80170ee:	4603      	mov	r3, r0
 80170f0:	2800      	cmp	r0, #0
 80170f2:	d1d7      	bne.n	80170a4 <rcl_get_secure_root+0x60>
 80170f4:	4628      	mov	r0, r5
 80170f6:	6921      	ldr	r1, [r4, #16]
 80170f8:	461d      	mov	r5, r3
 80170fa:	6863      	ldr	r3, [r4, #4]
 80170fc:	4798      	blx	r3
 80170fe:	e7d1      	b.n	80170a4 <rcl_get_secure_root+0x60>
 8017100:	4622      	mov	r2, r4
 8017102:	4638      	mov	r0, r7
 8017104:	4641      	mov	r1, r8
 8017106:	f7ff ff5b 	bl	8016fc0 <exact_match_lookup>
 801710a:	4605      	mov	r5, r0
 801710c:	e7ea      	b.n	80170e4 <rcl_get_secure_root+0xa0>
 801710e:	bf00      	nop
 8017110:	0801ed60 	.word	0x0801ed60
 8017114:	0801ed78 	.word	0x0801ed78

08017118 <rcl_get_security_options_from_environment>:
 8017118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801711c:	b082      	sub	sp, #8
 801711e:	2300      	movs	r3, #0
 8017120:	4606      	mov	r6, r0
 8017122:	460f      	mov	r7, r1
 8017124:	4820      	ldr	r0, [pc, #128]	@ (80171a8 <rcl_get_security_options_from_environment+0x90>)
 8017126:	9301      	str	r3, [sp, #4]
 8017128:	a901      	add	r1, sp, #4
 801712a:	4690      	mov	r8, r2
 801712c:	f002 f9d8 	bl	80194e0 <rcutils_get_env>
 8017130:	b120      	cbz	r0, 801713c <rcl_get_security_options_from_environment+0x24>
 8017132:	2501      	movs	r5, #1
 8017134:	4628      	mov	r0, r5
 8017136:	b002      	add	sp, #8
 8017138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801713c:	491b      	ldr	r1, [pc, #108]	@ (80171ac <rcl_get_security_options_from_environment+0x94>)
 801713e:	4604      	mov	r4, r0
 8017140:	9801      	ldr	r0, [sp, #4]
 8017142:	f7e9 f86d 	bl	8000220 <strcmp>
 8017146:	4605      	mov	r5, r0
 8017148:	b9e8      	cbnz	r0, 8017186 <rcl_get_security_options_from_environment+0x6e>
 801714a:	9001      	str	r0, [sp, #4]
 801714c:	f1b8 0f00 	cmp.w	r8, #0
 8017150:	d020      	beq.n	8017194 <rcl_get_security_options_from_environment+0x7c>
 8017152:	4817      	ldr	r0, [pc, #92]	@ (80171b0 <rcl_get_security_options_from_environment+0x98>)
 8017154:	a901      	add	r1, sp, #4
 8017156:	f002 f9c3 	bl	80194e0 <rcutils_get_env>
 801715a:	2800      	cmp	r0, #0
 801715c:	d1e9      	bne.n	8017132 <rcl_get_security_options_from_environment+0x1a>
 801715e:	4915      	ldr	r1, [pc, #84]	@ (80171b4 <rcl_get_security_options_from_environment+0x9c>)
 8017160:	9801      	ldr	r0, [sp, #4]
 8017162:	f7e9 f85d 	bl	8000220 <strcmp>
 8017166:	fab0 f080 	clz	r0, r0
 801716a:	0940      	lsrs	r0, r0, #5
 801716c:	f888 0000 	strb.w	r0, [r8]
 8017170:	4639      	mov	r1, r7
 8017172:	4630      	mov	r0, r6
 8017174:	f7ff ff66 	bl	8017044 <rcl_get_secure_root>
 8017178:	b170      	cbz	r0, 8017198 <rcl_get_security_options_from_environment+0x80>
 801717a:	f8c8 0004 	str.w	r0, [r8, #4]
 801717e:	4628      	mov	r0, r5
 8017180:	b002      	add	sp, #8
 8017182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017186:	4625      	mov	r5, r4
 8017188:	4628      	mov	r0, r5
 801718a:	f888 4000 	strb.w	r4, [r8]
 801718e:	b002      	add	sp, #8
 8017190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017194:	250b      	movs	r5, #11
 8017196:	e7cd      	b.n	8017134 <rcl_get_security_options_from_environment+0x1c>
 8017198:	f898 5000 	ldrb.w	r5, [r8]
 801719c:	f1a5 0501 	sub.w	r5, r5, #1
 80171a0:	fab5 f585 	clz	r5, r5
 80171a4:	096d      	lsrs	r5, r5, #5
 80171a6:	e7c5      	b.n	8017134 <rcl_get_security_options_from_environment+0x1c>
 80171a8:	0801ed18 	.word	0x0801ed18
 80171ac:	0801ed2c 	.word	0x0801ed2c
 80171b0:	0801ed34 	.word	0x0801ed34
 80171b4:	0801ed4c 	.word	0x0801ed4c

080171b8 <rcl_get_zero_initialized_service>:
 80171b8:	4b01      	ldr	r3, [pc, #4]	@ (80171c0 <rcl_get_zero_initialized_service+0x8>)
 80171ba:	6818      	ldr	r0, [r3, #0]
 80171bc:	4770      	bx	lr
 80171be:	bf00      	nop
 80171c0:	0801ed98 	.word	0x0801ed98

080171c4 <rcl_service_init>:
 80171c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80171c8:	b089      	sub	sp, #36	@ 0x24
 80171ca:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80171cc:	b1c5      	cbz	r5, 8017200 <rcl_service_init+0x3c>
 80171ce:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 80171d2:	4604      	mov	r4, r0
 80171d4:	4648      	mov	r0, r9
 80171d6:	4688      	mov	r8, r1
 80171d8:	4617      	mov	r7, r2
 80171da:	461e      	mov	r6, r3
 80171dc:	f7f9 fada 	bl	8010794 <rcutils_allocator_is_valid>
 80171e0:	b170      	cbz	r0, 8017200 <rcl_service_init+0x3c>
 80171e2:	b16c      	cbz	r4, 8017200 <rcl_service_init+0x3c>
 80171e4:	4640      	mov	r0, r8
 80171e6:	f7ff fdef 	bl	8016dc8 <rcl_node_is_valid>
 80171ea:	2800      	cmp	r0, #0
 80171ec:	d058      	beq.n	80172a0 <rcl_service_init+0xdc>
 80171ee:	b13f      	cbz	r7, 8017200 <rcl_service_init+0x3c>
 80171f0:	b136      	cbz	r6, 8017200 <rcl_service_init+0x3c>
 80171f2:	6823      	ldr	r3, [r4, #0]
 80171f4:	b14b      	cbz	r3, 801720a <rcl_service_init+0x46>
 80171f6:	2664      	movs	r6, #100	@ 0x64
 80171f8:	4630      	mov	r0, r6
 80171fa:	b009      	add	sp, #36	@ 0x24
 80171fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017200:	260b      	movs	r6, #11
 8017202:	4630      	mov	r0, r6
 8017204:	b009      	add	sp, #36	@ 0x24
 8017206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801720a:	aa07      	add	r2, sp, #28
 801720c:	9205      	str	r2, [sp, #20]
 801720e:	2201      	movs	r2, #1
 8017210:	9304      	str	r3, [sp, #16]
 8017212:	9203      	str	r2, [sp, #12]
 8017214:	9307      	str	r3, [sp, #28]
 8017216:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 801721a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801721e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017222:	4631      	mov	r1, r6
 8017224:	e899 000c 	ldmia.w	r9, {r2, r3}
 8017228:	4640      	mov	r0, r8
 801722a:	f7ff fe21 	bl	8016e70 <rcl_node_resolve_name>
 801722e:	2800      	cmp	r0, #0
 8017230:	d145      	bne.n	80172be <rcl_service_init+0xfa>
 8017232:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8017234:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8017236:	f44f 7088 	mov.w	r0, #272	@ 0x110
 801723a:	4798      	blx	r3
 801723c:	6020      	str	r0, [r4, #0]
 801723e:	2800      	cmp	r0, #0
 8017240:	d043      	beq.n	80172ca <rcl_service_init+0x106>
 8017242:	4640      	mov	r0, r8
 8017244:	f7ff fde2 	bl	8016e0c <rcl_node_get_rmw_handle>
 8017248:	462b      	mov	r3, r5
 801724a:	9a07      	ldr	r2, [sp, #28]
 801724c:	6826      	ldr	r6, [r4, #0]
 801724e:	4639      	mov	r1, r7
 8017250:	f7fa f878 	bl	8011344 <rmw_create_service>
 8017254:	6823      	ldr	r3, [r4, #0]
 8017256:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 801725a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801725e:	b330      	cbz	r0, 80172ae <rcl_service_init+0xea>
 8017260:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8017264:	f7fa f994 	bl	8011590 <rmw_service_request_subscription_get_actual_qos>
 8017268:	b9f8      	cbnz	r0, 80172aa <rcl_service_init+0xe6>
 801726a:	6821      	ldr	r1, [r4, #0]
 801726c:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8017270:	31b8      	adds	r1, #184	@ 0xb8
 8017272:	f7fa f97d 	bl	8011570 <rmw_service_response_publisher_get_actual_qos>
 8017276:	4606      	mov	r6, r0
 8017278:	b9b8      	cbnz	r0, 80172aa <rcl_service_init+0xe6>
 801727a:	6820      	ldr	r0, [r4, #0]
 801727c:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8017280:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8017284:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8017288:	2268      	movs	r2, #104	@ 0x68
 801728a:	4629      	mov	r1, r5
 801728c:	f005 facb 	bl	801c826 <memcpy>
 8017290:	9807      	ldr	r0, [sp, #28]
 8017292:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8017294:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8017296:	4798      	blx	r3
 8017298:	4630      	mov	r0, r6
 801729a:	b009      	add	sp, #36	@ 0x24
 801729c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172a0:	26c8      	movs	r6, #200	@ 0xc8
 80172a2:	4630      	mov	r0, r6
 80172a4:	b009      	add	sp, #36	@ 0x24
 80172a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172aa:	6823      	ldr	r3, [r4, #0]
 80172ac:	b12b      	cbz	r3, 80172ba <rcl_service_init+0xf6>
 80172ae:	4618      	mov	r0, r3
 80172b0:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80172b2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80172b4:	4790      	blx	r2
 80172b6:	2300      	movs	r3, #0
 80172b8:	6023      	str	r3, [r4, #0]
 80172ba:	2601      	movs	r6, #1
 80172bc:	e7e8      	b.n	8017290 <rcl_service_init+0xcc>
 80172be:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 80172c2:	2b01      	cmp	r3, #1
 80172c4:	d903      	bls.n	80172ce <rcl_service_init+0x10a>
 80172c6:	280a      	cmp	r0, #10
 80172c8:	d1f7      	bne.n	80172ba <rcl_service_init+0xf6>
 80172ca:	260a      	movs	r6, #10
 80172cc:	e7e0      	b.n	8017290 <rcl_service_init+0xcc>
 80172ce:	2668      	movs	r6, #104	@ 0x68
 80172d0:	e7de      	b.n	8017290 <rcl_service_init+0xcc>
 80172d2:	bf00      	nop

080172d4 <rcl_service_get_default_options>:
 80172d4:	b530      	push	{r4, r5, lr}
 80172d6:	4d0f      	ldr	r5, [pc, #60]	@ (8017314 <rcl_service_get_default_options+0x40>)
 80172d8:	490f      	ldr	r1, [pc, #60]	@ (8017318 <rcl_service_get_default_options+0x44>)
 80172da:	b087      	sub	sp, #28
 80172dc:	4604      	mov	r4, r0
 80172de:	2250      	movs	r2, #80	@ 0x50
 80172e0:	4628      	mov	r0, r5
 80172e2:	f005 faa0 	bl	801c826 <memcpy>
 80172e6:	4668      	mov	r0, sp
 80172e8:	f7f9 fa46 	bl	8010778 <rcutils_get_default_allocator>
 80172ec:	46ec      	mov	ip, sp
 80172ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80172f2:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80172f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80172fa:	2268      	movs	r2, #104	@ 0x68
 80172fc:	f8dc 3000 	ldr.w	r3, [ip]
 8017300:	f8ce 3000 	str.w	r3, [lr]
 8017304:	4629      	mov	r1, r5
 8017306:	4620      	mov	r0, r4
 8017308:	f005 fa8d 	bl	801c826 <memcpy>
 801730c:	4620      	mov	r0, r4
 801730e:	b007      	add	sp, #28
 8017310:	bd30      	pop	{r4, r5, pc}
 8017312:	bf00      	nop
 8017314:	2000bb60 	.word	0x2000bb60
 8017318:	0801eda0 	.word	0x0801eda0

0801731c <rcl_service_get_rmw_handle>:
 801731c:	b118      	cbz	r0, 8017326 <rcl_service_get_rmw_handle+0xa>
 801731e:	6800      	ldr	r0, [r0, #0]
 8017320:	b108      	cbz	r0, 8017326 <rcl_service_get_rmw_handle+0xa>
 8017322:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8017326:	4770      	bx	lr

08017328 <rcl_take_request>:
 8017328:	b570      	push	{r4, r5, r6, lr}
 801732a:	468e      	mov	lr, r1
 801732c:	460c      	mov	r4, r1
 801732e:	4616      	mov	r6, r2
 8017330:	4605      	mov	r5, r0
 8017332:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017336:	b08c      	sub	sp, #48	@ 0x30
 8017338:	f10d 0c18 	add.w	ip, sp, #24
 801733c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017340:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017344:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017348:	b30d      	cbz	r5, 801738e <rcl_take_request+0x66>
 801734a:	682b      	ldr	r3, [r5, #0]
 801734c:	b1fb      	cbz	r3, 801738e <rcl_take_request+0x66>
 801734e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8017352:	b1e0      	cbz	r0, 801738e <rcl_take_request+0x66>
 8017354:	b336      	cbz	r6, 80173a4 <rcl_take_request+0x7c>
 8017356:	2300      	movs	r3, #0
 8017358:	f88d 3007 	strb.w	r3, [sp, #7]
 801735c:	4632      	mov	r2, r6
 801735e:	f10d 0307 	add.w	r3, sp, #7
 8017362:	a902      	add	r1, sp, #8
 8017364:	f002 ff5a 	bl	801a21c <rmw_take_request>
 8017368:	4605      	mov	r5, r0
 801736a:	b198      	cbz	r0, 8017394 <rcl_take_request+0x6c>
 801736c:	280a      	cmp	r0, #10
 801736e:	bf18      	it	ne
 8017370:	2501      	movne	r5, #1
 8017372:	f10d 0e18 	add.w	lr, sp, #24
 8017376:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801737a:	46a4      	mov	ip, r4
 801737c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017380:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017384:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017388:	4628      	mov	r0, r5
 801738a:	b00c      	add	sp, #48	@ 0x30
 801738c:	bd70      	pop	{r4, r5, r6, pc}
 801738e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8017392:	e7ee      	b.n	8017372 <rcl_take_request+0x4a>
 8017394:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017398:	f240 2359 	movw	r3, #601	@ 0x259
 801739c:	2a00      	cmp	r2, #0
 801739e:	bf08      	it	eq
 80173a0:	461d      	moveq	r5, r3
 80173a2:	e7e6      	b.n	8017372 <rcl_take_request+0x4a>
 80173a4:	250b      	movs	r5, #11
 80173a6:	e7e4      	b.n	8017372 <rcl_take_request+0x4a>

080173a8 <rcl_send_response>:
 80173a8:	b170      	cbz	r0, 80173c8 <rcl_send_response+0x20>
 80173aa:	6800      	ldr	r0, [r0, #0]
 80173ac:	b160      	cbz	r0, 80173c8 <rcl_send_response+0x20>
 80173ae:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80173b2:	b148      	cbz	r0, 80173c8 <rcl_send_response+0x20>
 80173b4:	b159      	cbz	r1, 80173ce <rcl_send_response+0x26>
 80173b6:	b510      	push	{r4, lr}
 80173b8:	b15a      	cbz	r2, 80173d2 <rcl_send_response+0x2a>
 80173ba:	f002 ff8d 	bl	801a2d8 <rmw_send_response>
 80173be:	b110      	cbz	r0, 80173c6 <rcl_send_response+0x1e>
 80173c0:	2802      	cmp	r0, #2
 80173c2:	bf18      	it	ne
 80173c4:	2001      	movne	r0, #1
 80173c6:	bd10      	pop	{r4, pc}
 80173c8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80173cc:	4770      	bx	lr
 80173ce:	200b      	movs	r0, #11
 80173d0:	4770      	bx	lr
 80173d2:	200b      	movs	r0, #11
 80173d4:	bd10      	pop	{r4, pc}
 80173d6:	bf00      	nop

080173d8 <rcl_service_is_valid>:
 80173d8:	b130      	cbz	r0, 80173e8 <rcl_service_is_valid+0x10>
 80173da:	6800      	ldr	r0, [r0, #0]
 80173dc:	b120      	cbz	r0, 80173e8 <rcl_service_is_valid+0x10>
 80173de:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80173e2:	3800      	subs	r0, #0
 80173e4:	bf18      	it	ne
 80173e6:	2001      	movne	r0, #1
 80173e8:	4770      	bx	lr
 80173ea:	bf00      	nop

080173ec <rcl_take>:
 80173ec:	2800      	cmp	r0, #0
 80173ee:	d04a      	beq.n	8017486 <rcl_take+0x9a>
 80173f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173f4:	4604      	mov	r4, r0
 80173f6:	6800      	ldr	r0, [r0, #0]
 80173f8:	b0a4      	sub	sp, #144	@ 0x90
 80173fa:	2800      	cmp	r0, #0
 80173fc:	d03b      	beq.n	8017476 <rcl_take+0x8a>
 80173fe:	461f      	mov	r7, r3
 8017400:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8017404:	2b00      	cmp	r3, #0
 8017406:	d036      	beq.n	8017476 <rcl_take+0x8a>
 8017408:	460e      	mov	r6, r1
 801740a:	2900      	cmp	r1, #0
 801740c:	d039      	beq.n	8017482 <rcl_take+0x96>
 801740e:	4615      	mov	r5, r2
 8017410:	2a00      	cmp	r2, #0
 8017412:	d03c      	beq.n	801748e <rcl_take+0xa2>
 8017414:	a802      	add	r0, sp, #8
 8017416:	f002 fba3 	bl	8019b60 <rmw_get_zero_initialized_message_info>
 801741a:	f10d 0c08 	add.w	ip, sp, #8
 801741e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017422:	46ae      	mov	lr, r5
 8017424:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017428:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801742c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017430:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017434:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017438:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801743c:	f04f 0800 	mov.w	r8, #0
 8017440:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8017444:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8017448:	6822      	ldr	r2, [r4, #0]
 801744a:	462b      	mov	r3, r5
 801744c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8017450:	9700      	str	r7, [sp, #0]
 8017452:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8017456:	4631      	mov	r1, r6
 8017458:	f002 ffe4 	bl	801a424 <rmw_take_with_info>
 801745c:	4603      	mov	r3, r0
 801745e:	b9c0      	cbnz	r0, 8017492 <rcl_take+0xa6>
 8017460:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8017464:	f240 1291 	movw	r2, #401	@ 0x191
 8017468:	2900      	cmp	r1, #0
 801746a:	bf08      	it	eq
 801746c:	4613      	moveq	r3, r2
 801746e:	4618      	mov	r0, r3
 8017470:	b024      	add	sp, #144	@ 0x90
 8017472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017476:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801747a:	4618      	mov	r0, r3
 801747c:	b024      	add	sp, #144	@ 0x90
 801747e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017482:	230b      	movs	r3, #11
 8017484:	e7f3      	b.n	801746e <rcl_take+0x82>
 8017486:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801748a:	4618      	mov	r0, r3
 801748c:	4770      	bx	lr
 801748e:	ad14      	add	r5, sp, #80	@ 0x50
 8017490:	e7c0      	b.n	8017414 <rcl_take+0x28>
 8017492:	f7ff f99f 	bl	80167d4 <rcl_convert_rmw_ret_to_rcl_ret>
 8017496:	4603      	mov	r3, r0
 8017498:	e7e9      	b.n	801746e <rcl_take+0x82>
 801749a:	bf00      	nop

0801749c <rcl_subscription_get_rmw_handle>:
 801749c:	b118      	cbz	r0, 80174a6 <rcl_subscription_get_rmw_handle+0xa>
 801749e:	6800      	ldr	r0, [r0, #0]
 80174a0:	b108      	cbz	r0, 80174a6 <rcl_subscription_get_rmw_handle+0xa>
 80174a2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80174a6:	4770      	bx	lr

080174a8 <rcl_subscription_is_valid>:
 80174a8:	b130      	cbz	r0, 80174b8 <rcl_subscription_is_valid+0x10>
 80174aa:	6800      	ldr	r0, [r0, #0]
 80174ac:	b120      	cbz	r0, 80174b8 <rcl_subscription_is_valid+0x10>
 80174ae:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80174b2:	3800      	subs	r0, #0
 80174b4:	bf18      	it	ne
 80174b6:	2001      	movne	r0, #1
 80174b8:	4770      	bx	lr
 80174ba:	bf00      	nop

080174bc <rcl_get_system_time>:
 80174bc:	4608      	mov	r0, r1
 80174be:	f7f9 b9ab 	b.w	8010818 <rcutils_system_time_now>
 80174c2:	bf00      	nop

080174c4 <rcl_get_steady_time>:
 80174c4:	4608      	mov	r0, r1
 80174c6:	f7f9 b9cf 	b.w	8010868 <rcutils_steady_time_now>
 80174ca:	bf00      	nop

080174cc <rcl_get_ros_time>:
 80174cc:	7a03      	ldrb	r3, [r0, #8]
 80174ce:	b510      	push	{r4, lr}
 80174d0:	460c      	mov	r4, r1
 80174d2:	b133      	cbz	r3, 80174e2 <rcl_get_ros_time+0x16>
 80174d4:	2105      	movs	r1, #5
 80174d6:	f001 ff5f 	bl	8019398 <__atomic_load_8>
 80174da:	e9c4 0100 	strd	r0, r1, [r4]
 80174de:	2000      	movs	r0, #0
 80174e0:	bd10      	pop	{r4, pc}
 80174e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174e6:	4608      	mov	r0, r1
 80174e8:	f7f9 b996 	b.w	8010818 <rcutils_system_time_now>

080174ec <rcl_clock_init>:
 80174ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174ee:	4605      	mov	r5, r0
 80174f0:	4610      	mov	r0, r2
 80174f2:	4614      	mov	r4, r2
 80174f4:	460e      	mov	r6, r1
 80174f6:	f7f9 f94d 	bl	8010794 <rcutils_allocator_is_valid>
 80174fa:	b128      	cbz	r0, 8017508 <rcl_clock_init+0x1c>
 80174fc:	2d03      	cmp	r5, #3
 80174fe:	d803      	bhi.n	8017508 <rcl_clock_init+0x1c>
 8017500:	e8df f005 	tbb	[pc, r5]
 8017504:	06532e1d 	.word	0x06532e1d
 8017508:	f04f 0c0b 	mov.w	ip, #11
 801750c:	4660      	mov	r0, ip
 801750e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017510:	2e00      	cmp	r6, #0
 8017512:	d0f9      	beq.n	8017508 <rcl_clock_init+0x1c>
 8017514:	2c00      	cmp	r4, #0
 8017516:	d0f7      	beq.n	8017508 <rcl_clock_init+0x1c>
 8017518:	2300      	movs	r3, #0
 801751a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801751e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80175d4 <rcl_clock_init+0xe8>
 8017522:	6133      	str	r3, [r6, #16]
 8017524:	f106 0514 	add.w	r5, r6, #20
 8017528:	469c      	mov	ip, r3
 801752a:	2703      	movs	r7, #3
 801752c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801752e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017530:	6823      	ldr	r3, [r4, #0]
 8017532:	602b      	str	r3, [r5, #0]
 8017534:	7037      	strb	r7, [r6, #0]
 8017536:	f8c6 e00c 	str.w	lr, [r6, #12]
 801753a:	4660      	mov	r0, ip
 801753c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801753e:	2e00      	cmp	r6, #0
 8017540:	d0e2      	beq.n	8017508 <rcl_clock_init+0x1c>
 8017542:	2300      	movs	r3, #0
 8017544:	7033      	strb	r3, [r6, #0]
 8017546:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801754a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801754e:	469c      	mov	ip, r3
 8017550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017552:	f106 0514 	add.w	r5, r6, #20
 8017556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017558:	6823      	ldr	r3, [r4, #0]
 801755a:	602b      	str	r3, [r5, #0]
 801755c:	4660      	mov	r0, ip
 801755e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017560:	2e00      	cmp	r6, #0
 8017562:	d0d1      	beq.n	8017508 <rcl_clock_init+0x1c>
 8017564:	2c00      	cmp	r4, #0
 8017566:	d0cf      	beq.n	8017508 <rcl_clock_init+0x1c>
 8017568:	2700      	movs	r7, #0
 801756a:	7037      	strb	r7, [r6, #0]
 801756c:	46a4      	mov	ip, r4
 801756e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017572:	f106 0514 	add.w	r5, r6, #20
 8017576:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801757a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801757e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017580:	f8dc 3000 	ldr.w	r3, [ip]
 8017584:	602b      	str	r3, [r5, #0]
 8017586:	6921      	ldr	r1, [r4, #16]
 8017588:	6823      	ldr	r3, [r4, #0]
 801758a:	2010      	movs	r0, #16
 801758c:	4798      	blx	r3
 801758e:	6130      	str	r0, [r6, #16]
 8017590:	b1d0      	cbz	r0, 80175c8 <rcl_clock_init+0xdc>
 8017592:	2200      	movs	r2, #0
 8017594:	2300      	movs	r3, #0
 8017596:	e9c0 2300 	strd	r2, r3, [r0]
 801759a:	2301      	movs	r3, #1
 801759c:	7207      	strb	r7, [r0, #8]
 801759e:	4a0c      	ldr	r2, [pc, #48]	@ (80175d0 <rcl_clock_init+0xe4>)
 80175a0:	7033      	strb	r3, [r6, #0]
 80175a2:	46bc      	mov	ip, r7
 80175a4:	60f2      	str	r2, [r6, #12]
 80175a6:	4660      	mov	r0, ip
 80175a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175aa:	2e00      	cmp	r6, #0
 80175ac:	d0ac      	beq.n	8017508 <rcl_clock_init+0x1c>
 80175ae:	2c00      	cmp	r4, #0
 80175b0:	d0aa      	beq.n	8017508 <rcl_clock_init+0x1c>
 80175b2:	2300      	movs	r3, #0
 80175b4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80175b8:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80175d8 <rcl_clock_init+0xec>
 80175bc:	6133      	str	r3, [r6, #16]
 80175be:	f106 0514 	add.w	r5, r6, #20
 80175c2:	469c      	mov	ip, r3
 80175c4:	2702      	movs	r7, #2
 80175c6:	e7b1      	b.n	801752c <rcl_clock_init+0x40>
 80175c8:	f04f 0c0a 	mov.w	ip, #10
 80175cc:	e79e      	b.n	801750c <rcl_clock_init+0x20>
 80175ce:	bf00      	nop
 80175d0:	080174cd 	.word	0x080174cd
 80175d4:	080174c5 	.word	0x080174c5
 80175d8:	080174bd 	.word	0x080174bd

080175dc <rcl_clock_get_now>:
 80175dc:	b140      	cbz	r0, 80175f0 <rcl_clock_get_now+0x14>
 80175de:	b139      	cbz	r1, 80175f0 <rcl_clock_get_now+0x14>
 80175e0:	7803      	ldrb	r3, [r0, #0]
 80175e2:	b11b      	cbz	r3, 80175ec <rcl_clock_get_now+0x10>
 80175e4:	68c3      	ldr	r3, [r0, #12]
 80175e6:	b10b      	cbz	r3, 80175ec <rcl_clock_get_now+0x10>
 80175e8:	6900      	ldr	r0, [r0, #16]
 80175ea:	4718      	bx	r3
 80175ec:	2001      	movs	r0, #1
 80175ee:	4770      	bx	lr
 80175f0:	200b      	movs	r0, #11
 80175f2:	4770      	bx	lr

080175f4 <rcl_clock_add_jump_callback>:
 80175f4:	b082      	sub	sp, #8
 80175f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175fa:	a906      	add	r1, sp, #24
 80175fc:	e881 000c 	stmia.w	r1, {r2, r3}
 8017600:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8017604:	b320      	cbz	r0, 8017650 <rcl_clock_add_jump_callback+0x5c>
 8017606:	4604      	mov	r4, r0
 8017608:	3014      	adds	r0, #20
 801760a:	f7f9 f8c3 	bl	8010794 <rcutils_allocator_is_valid>
 801760e:	b1f8      	cbz	r0, 8017650 <rcl_clock_add_jump_callback+0x5c>
 8017610:	b1f6      	cbz	r6, 8017650 <rcl_clock_add_jump_callback+0x5c>
 8017612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017614:	2b00      	cmp	r3, #0
 8017616:	db1b      	blt.n	8017650 <rcl_clock_add_jump_callback+0x5c>
 8017618:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801761c:	2a01      	cmp	r2, #1
 801761e:	f173 0300 	sbcs.w	r3, r3, #0
 8017622:	da15      	bge.n	8017650 <rcl_clock_add_jump_callback+0x5c>
 8017624:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8017628:	2f00      	cmp	r7, #0
 801762a:	d042      	beq.n	80176b2 <rcl_clock_add_jump_callback+0xbe>
 801762c:	2300      	movs	r3, #0
 801762e:	4602      	mov	r2, r0
 8017630:	e003      	b.n	801763a <rcl_clock_add_jump_callback+0x46>
 8017632:	42bb      	cmp	r3, r7
 8017634:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8017638:	d011      	beq.n	801765e <rcl_clock_add_jump_callback+0x6a>
 801763a:	6811      	ldr	r1, [r2, #0]
 801763c:	42b1      	cmp	r1, r6
 801763e:	f103 0301 	add.w	r3, r3, #1
 8017642:	d1f6      	bne.n	8017632 <rcl_clock_add_jump_callback+0x3e>
 8017644:	6a11      	ldr	r1, [r2, #32]
 8017646:	42a9      	cmp	r1, r5
 8017648:	d1f3      	bne.n	8017632 <rcl_clock_add_jump_callback+0x3e>
 801764a:	f04f 0e01 	mov.w	lr, #1
 801764e:	e001      	b.n	8017654 <rcl_clock_add_jump_callback+0x60>
 8017650:	f04f 0e0b 	mov.w	lr, #11
 8017654:	4670      	mov	r0, lr
 8017656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801765a:	b002      	add	sp, #8
 801765c:	4770      	bx	lr
 801765e:	3301      	adds	r3, #1
 8017660:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017664:	00d9      	lsls	r1, r3, #3
 8017666:	69e3      	ldr	r3, [r4, #28]
 8017668:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801766a:	4798      	blx	r3
 801766c:	b1f0      	cbz	r0, 80176ac <rcl_clock_add_jump_callback+0xb8>
 801766e:	68a3      	ldr	r3, [r4, #8]
 8017670:	6060      	str	r0, [r4, #4]
 8017672:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8017676:	f10d 0c18 	add.w	ip, sp, #24
 801767a:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 801767e:	f103 0801 	add.w	r8, r3, #1
 8017682:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8017686:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801768a:	f106 0708 	add.w	r7, r6, #8
 801768e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017690:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8017694:	f04f 0e00 	mov.w	lr, #0
 8017698:	e887 0003 	stmia.w	r7, {r0, r1}
 801769c:	6235      	str	r5, [r6, #32]
 801769e:	4670      	mov	r0, lr
 80176a0:	f8c4 8008 	str.w	r8, [r4, #8]
 80176a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80176a8:	b002      	add	sp, #8
 80176aa:	4770      	bx	lr
 80176ac:	f04f 0e0a 	mov.w	lr, #10
 80176b0:	e7d0      	b.n	8017654 <rcl_clock_add_jump_callback+0x60>
 80176b2:	2128      	movs	r1, #40	@ 0x28
 80176b4:	e7d7      	b.n	8017666 <rcl_clock_add_jump_callback+0x72>
 80176b6:	bf00      	nop

080176b8 <rcl_clock_remove_jump_callback>:
 80176b8:	2800      	cmp	r0, #0
 80176ba:	d057      	beq.n	801776c <rcl_clock_remove_jump_callback+0xb4>
 80176bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176c0:	4605      	mov	r5, r0
 80176c2:	3014      	adds	r0, #20
 80176c4:	4688      	mov	r8, r1
 80176c6:	4692      	mov	sl, r2
 80176c8:	f7f9 f864 	bl	8010794 <rcutils_allocator_is_valid>
 80176cc:	2800      	cmp	r0, #0
 80176ce:	d03b      	beq.n	8017748 <rcl_clock_remove_jump_callback+0x90>
 80176d0:	f1b8 0f00 	cmp.w	r8, #0
 80176d4:	d038      	beq.n	8017748 <rcl_clock_remove_jump_callback+0x90>
 80176d6:	68ae      	ldr	r6, [r5, #8]
 80176d8:	b166      	cbz	r6, 80176f4 <rcl_clock_remove_jump_callback+0x3c>
 80176da:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80176de:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 80176e2:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 80176e6:	464c      	mov	r4, r9
 80176e8:	6823      	ldr	r3, [r4, #0]
 80176ea:	4543      	cmp	r3, r8
 80176ec:	d005      	beq.n	80176fa <rcl_clock_remove_jump_callback+0x42>
 80176ee:	3428      	adds	r4, #40	@ 0x28
 80176f0:	42a7      	cmp	r7, r4
 80176f2:	d1f9      	bne.n	80176e8 <rcl_clock_remove_jump_callback+0x30>
 80176f4:	2001      	movs	r0, #1
 80176f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176fa:	6a23      	ldr	r3, [r4, #32]
 80176fc:	3428      	adds	r4, #40	@ 0x28
 80176fe:	42bc      	cmp	r4, r7
 8017700:	d02d      	beq.n	801775e <rcl_clock_remove_jump_callback+0xa6>
 8017702:	4553      	cmp	r3, sl
 8017704:	d1f0      	bne.n	80176e8 <rcl_clock_remove_jump_callback+0x30>
 8017706:	46a6      	mov	lr, r4
 8017708:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801770c:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8017710:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017714:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017718:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801771c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017720:	3428      	adds	r4, #40	@ 0x28
 8017722:	42a7      	cmp	r7, r4
 8017724:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017728:	d1ed      	bne.n	8017706 <rcl_clock_remove_jump_callback+0x4e>
 801772a:	3e01      	subs	r6, #1
 801772c:	60ae      	str	r6, [r5, #8]
 801772e:	b176      	cbz	r6, 801774e <rcl_clock_remove_jump_callback+0x96>
 8017730:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8017734:	69eb      	ldr	r3, [r5, #28]
 8017736:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8017738:	00f1      	lsls	r1, r6, #3
 801773a:	4648      	mov	r0, r9
 801773c:	4798      	blx	r3
 801773e:	b1b8      	cbz	r0, 8017770 <rcl_clock_remove_jump_callback+0xb8>
 8017740:	6068      	str	r0, [r5, #4]
 8017742:	2000      	movs	r0, #0
 8017744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017748:	200b      	movs	r0, #11
 801774a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801774e:	4648      	mov	r0, r9
 8017750:	69ab      	ldr	r3, [r5, #24]
 8017752:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8017754:	4798      	blx	r3
 8017756:	606e      	str	r6, [r5, #4]
 8017758:	4630      	mov	r0, r6
 801775a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801775e:	4553      	cmp	r3, sl
 8017760:	d1c8      	bne.n	80176f4 <rcl_clock_remove_jump_callback+0x3c>
 8017762:	3e01      	subs	r6, #1
 8017764:	60ae      	str	r6, [r5, #8]
 8017766:	2e00      	cmp	r6, #0
 8017768:	d1e2      	bne.n	8017730 <rcl_clock_remove_jump_callback+0x78>
 801776a:	e7f0      	b.n	801774e <rcl_clock_remove_jump_callback+0x96>
 801776c:	200b      	movs	r0, #11
 801776e:	4770      	bx	lr
 8017770:	200a      	movs	r0, #10
 8017772:	e7ea      	b.n	801774a <rcl_clock_remove_jump_callback+0x92>

08017774 <_rcl_timer_time_jump>:
 8017774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017778:	4605      	mov	r5, r0
 801777a:	b084      	sub	sp, #16
 801777c:	4614      	mov	r4, r2
 801777e:	b131      	cbz	r1, 801778e <_rcl_timer_time_jump+0x1a>
 8017780:	7803      	ldrb	r3, [r0, #0]
 8017782:	3b02      	subs	r3, #2
 8017784:	2b01      	cmp	r3, #1
 8017786:	d93f      	bls.n	8017808 <_rcl_timer_time_jump+0x94>
 8017788:	b004      	add	sp, #16
 801778a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801778e:	6813      	ldr	r3, [r2, #0]
 8017790:	a902      	add	r1, sp, #8
 8017792:	6818      	ldr	r0, [r3, #0]
 8017794:	f7ff ff22 	bl	80175dc <rcl_clock_get_now>
 8017798:	2800      	cmp	r0, #0
 801779a:	d1f5      	bne.n	8017788 <_rcl_timer_time_jump+0x14>
 801779c:	6820      	ldr	r0, [r4, #0]
 801779e:	2105      	movs	r1, #5
 80177a0:	3020      	adds	r0, #32
 80177a2:	f001 fdf9 	bl	8019398 <__atomic_load_8>
 80177a6:	6823      	ldr	r3, [r4, #0]
 80177a8:	4681      	mov	r9, r0
 80177aa:	4688      	mov	r8, r1
 80177ac:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80177b0:	2105      	movs	r1, #5
 80177b2:	f001 fdf1 	bl	8019398 <__atomic_load_8>
 80177b6:	4607      	mov	r7, r0
 80177b8:	6820      	ldr	r0, [r4, #0]
 80177ba:	460e      	mov	r6, r1
 80177bc:	3018      	adds	r0, #24
 80177be:	2105      	movs	r1, #5
 80177c0:	f001 fdea 	bl	8019398 <__atomic_load_8>
 80177c4:	782b      	ldrb	r3, [r5, #0]
 80177c6:	9a02      	ldr	r2, [sp, #8]
 80177c8:	3b02      	subs	r3, #2
 80177ca:	2b01      	cmp	r3, #1
 80177cc:	460d      	mov	r5, r1
 80177ce:	9b03      	ldr	r3, [sp, #12]
 80177d0:	4682      	mov	sl, r0
 80177d2:	d937      	bls.n	8017844 <_rcl_timer_time_jump+0xd0>
 80177d4:	42ba      	cmp	r2, r7
 80177d6:	eb73 0106 	sbcs.w	r1, r3, r6
 80177da:	da5f      	bge.n	801789c <_rcl_timer_time_jump+0x128>
 80177dc:	454a      	cmp	r2, r9
 80177de:	eb73 0108 	sbcs.w	r1, r3, r8
 80177e2:	dad1      	bge.n	8017788 <_rcl_timer_time_jump+0x14>
 80177e4:	6820      	ldr	r0, [r4, #0]
 80177e6:	eb1a 0202 	adds.w	r2, sl, r2
 80177ea:	eb43 0305 	adc.w	r3, r3, r5
 80177ee:	2505      	movs	r5, #5
 80177f0:	3028      	adds	r0, #40	@ 0x28
 80177f2:	9500      	str	r5, [sp, #0]
 80177f4:	f001 fe06 	bl	8019404 <__atomic_store_8>
 80177f8:	6820      	ldr	r0, [r4, #0]
 80177fa:	9500      	str	r5, [sp, #0]
 80177fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017800:	3020      	adds	r0, #32
 8017802:	f001 fdff 	bl	8019404 <__atomic_store_8>
 8017806:	e7bf      	b.n	8017788 <_rcl_timer_time_jump+0x14>
 8017808:	6813      	ldr	r3, [r2, #0]
 801780a:	a902      	add	r1, sp, #8
 801780c:	6818      	ldr	r0, [r3, #0]
 801780e:	f7ff fee5 	bl	80175dc <rcl_clock_get_now>
 8017812:	2800      	cmp	r0, #0
 8017814:	d1b8      	bne.n	8017788 <_rcl_timer_time_jump+0x14>
 8017816:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801781a:	4313      	orrs	r3, r2
 801781c:	d0b4      	beq.n	8017788 <_rcl_timer_time_jump+0x14>
 801781e:	6820      	ldr	r0, [r4, #0]
 8017820:	2105      	movs	r1, #5
 8017822:	3028      	adds	r0, #40	@ 0x28
 8017824:	f001 fdb8 	bl	8019398 <__atomic_load_8>
 8017828:	9d02      	ldr	r5, [sp, #8]
 801782a:	9b03      	ldr	r3, [sp, #12]
 801782c:	4602      	mov	r2, r0
 801782e:	6820      	ldr	r0, [r4, #0]
 8017830:	1b52      	subs	r2, r2, r5
 8017832:	f04f 0405 	mov.w	r4, #5
 8017836:	9400      	str	r4, [sp, #0]
 8017838:	eb61 0303 	sbc.w	r3, r1, r3
 801783c:	3030      	adds	r0, #48	@ 0x30
 801783e:	f001 fde1 	bl	8019404 <__atomic_store_8>
 8017842:	e7a1      	b.n	8017788 <_rcl_timer_time_jump+0x14>
 8017844:	4313      	orrs	r3, r2
 8017846:	d09f      	beq.n	8017788 <_rcl_timer_time_jump+0x14>
 8017848:	6820      	ldr	r0, [r4, #0]
 801784a:	f04f 0805 	mov.w	r8, #5
 801784e:	2300      	movs	r3, #0
 8017850:	f8cd 8000 	str.w	r8, [sp]
 8017854:	3030      	adds	r0, #48	@ 0x30
 8017856:	2200      	movs	r2, #0
 8017858:	f001 fe0a 	bl	8019470 <__atomic_exchange_8>
 801785c:	ea51 0300 	orrs.w	r3, r1, r0
 8017860:	4606      	mov	r6, r0
 8017862:	460f      	mov	r7, r1
 8017864:	d090      	beq.n	8017788 <_rcl_timer_time_jump+0x14>
 8017866:	9a02      	ldr	r2, [sp, #8]
 8017868:	9b03      	ldr	r3, [sp, #12]
 801786a:	f8cd 8000 	str.w	r8, [sp]
 801786e:	1a12      	subs	r2, r2, r0
 8017870:	6820      	ldr	r0, [r4, #0]
 8017872:	eb63 0301 	sbc.w	r3, r3, r1
 8017876:	eb12 020a 	adds.w	r2, r2, sl
 801787a:	eb43 0305 	adc.w	r3, r3, r5
 801787e:	3028      	adds	r0, #40	@ 0x28
 8017880:	f001 fdc0 	bl	8019404 <__atomic_store_8>
 8017884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017888:	f8cd 8000 	str.w	r8, [sp]
 801788c:	6820      	ldr	r0, [r4, #0]
 801788e:	1b92      	subs	r2, r2, r6
 8017890:	eb63 0307 	sbc.w	r3, r3, r7
 8017894:	3020      	adds	r0, #32
 8017896:	f001 fdb5 	bl	8019404 <__atomic_store_8>
 801789a:	e775      	b.n	8017788 <_rcl_timer_time_jump+0x14>
 801789c:	6820      	ldr	r0, [r4, #0]
 801789e:	3008      	adds	r0, #8
 80178a0:	f004 f890 	bl	801b9c4 <rcl_trigger_guard_condition>
 80178a4:	e770      	b.n	8017788 <_rcl_timer_time_jump+0x14>
 80178a6:	bf00      	nop

080178a8 <rcl_get_zero_initialized_timer>:
 80178a8:	4b01      	ldr	r3, [pc, #4]	@ (80178b0 <rcl_get_zero_initialized_timer+0x8>)
 80178aa:	6818      	ldr	r0, [r3, #0]
 80178ac:	4770      	bx	lr
 80178ae:	bf00      	nop
 80178b0:	0801edf0 	.word	0x0801edf0
 80178b4:	00000000 	.word	0x00000000

080178b8 <rcl_timer_init>:
 80178b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178bc:	b0aa      	sub	sp, #168	@ 0xa8
 80178be:	4604      	mov	r4, r0
 80178c0:	a835      	add	r0, sp, #212	@ 0xd4
 80178c2:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 80178c6:	460d      	mov	r5, r1
 80178c8:	4692      	mov	sl, r2
 80178ca:	f7f8 ff63 	bl	8010794 <rcutils_allocator_is_valid>
 80178ce:	2800      	cmp	r0, #0
 80178d0:	d064      	beq.n	801799c <rcl_timer_init+0xe4>
 80178d2:	2c00      	cmp	r4, #0
 80178d4:	d062      	beq.n	801799c <rcl_timer_init+0xe4>
 80178d6:	2d00      	cmp	r5, #0
 80178d8:	d060      	beq.n	801799c <rcl_timer_init+0xe4>
 80178da:	2f00      	cmp	r7, #0
 80178dc:	db5e      	blt.n	801799c <rcl_timer_init+0xe4>
 80178de:	6823      	ldr	r3, [r4, #0]
 80178e0:	b123      	cbz	r3, 80178ec <rcl_timer_init+0x34>
 80178e2:	2664      	movs	r6, #100	@ 0x64
 80178e4:	4630      	mov	r0, r6
 80178e6:	b02a      	add	sp, #168	@ 0xa8
 80178e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178ec:	a908      	add	r1, sp, #32
 80178ee:	4628      	mov	r0, r5
 80178f0:	f7ff fe74 	bl	80175dc <rcl_clock_get_now>
 80178f4:	4606      	mov	r6, r0
 80178f6:	2800      	cmp	r0, #0
 80178f8:	d1f4      	bne.n	80178e4 <rcl_timer_init+0x2c>
 80178fa:	ae06      	add	r6, sp, #24
 80178fc:	4630      	mov	r0, r6
 80178fe:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8017902:	f003 ff67 	bl	801b7d4 <rcl_get_zero_initialized_guard_condition>
 8017906:	e896 0003 	ldmia.w	r6, {r0, r1}
 801790a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 801790e:	ae0b      	add	r6, sp, #44	@ 0x2c
 8017910:	e889 0003 	stmia.w	r9, {r0, r1}
 8017914:	4630      	mov	r0, r6
 8017916:	f004 f839 	bl	801b98c <rcl_guard_condition_get_default_options>
 801791a:	ab0d      	add	r3, sp, #52	@ 0x34
 801791c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017920:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017924:	4651      	mov	r1, sl
 8017926:	e896 000c 	ldmia.w	r6, {r2, r3}
 801792a:	4648      	mov	r0, r9
 801792c:	f003 ff5c 	bl	801b7e8 <rcl_guard_condition_init>
 8017930:	4606      	mov	r6, r0
 8017932:	2800      	cmp	r0, #0
 8017934:	d1d6      	bne.n	80178e4 <rcl_timer_init+0x2c>
 8017936:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017938:	781b      	ldrb	r3, [r3, #0]
 801793a:	2b01      	cmp	r3, #1
 801793c:	d033      	beq.n	80179a6 <rcl_timer_init+0xee>
 801793e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8017940:	911a      	str	r1, [sp, #104]	@ 0x68
 8017942:	4642      	mov	r2, r8
 8017944:	463b      	mov	r3, r7
 8017946:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801794a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801794e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8017a00 <rcl_timer_init+0x148>
 8017952:	eb12 0008 	adds.w	r0, r2, r8
 8017956:	eb47 0103 	adc.w	r1, r7, r3
 801795a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 801795e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8017962:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8017966:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801796a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801796e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8017972:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017976:	f8de 3000 	ldr.w	r3, [lr]
 801797a:	f8cc 3000 	str.w	r3, [ip]
 801797e:	f04f 0a00 	mov.w	sl, #0
 8017982:	4619      	mov	r1, r3
 8017984:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8017988:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 801798a:	2050      	movs	r0, #80	@ 0x50
 801798c:	4798      	blx	r3
 801798e:	6020      	str	r0, [r4, #0]
 8017990:	b358      	cbz	r0, 80179ea <rcl_timer_init+0x132>
 8017992:	2250      	movs	r2, #80	@ 0x50
 8017994:	a916      	add	r1, sp, #88	@ 0x58
 8017996:	f004 ff46 	bl	801c826 <memcpy>
 801799a:	e7a3      	b.n	80178e4 <rcl_timer_init+0x2c>
 801799c:	260b      	movs	r6, #11
 801799e:	4630      	mov	r0, r6
 80179a0:	b02a      	add	sp, #168	@ 0xa8
 80179a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179a6:	2001      	movs	r0, #1
 80179a8:	2100      	movs	r1, #0
 80179aa:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80179ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80179b2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80179b6:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80179ba:	4a13      	ldr	r2, [pc, #76]	@ (8017a08 <rcl_timer_init+0x150>)
 80179bc:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80179c0:	9405      	str	r4, [sp, #20]
 80179c2:	9204      	str	r2, [sp, #16]
 80179c4:	ab12      	add	r3, sp, #72	@ 0x48
 80179c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80179c8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80179cc:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80179d0:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80179d4:	4628      	mov	r0, r5
 80179d6:	f7ff fe0d 	bl	80175f4 <rcl_clock_add_jump_callback>
 80179da:	4682      	mov	sl, r0
 80179dc:	2800      	cmp	r0, #0
 80179de:	d0ae      	beq.n	801793e <rcl_timer_init+0x86>
 80179e0:	4648      	mov	r0, r9
 80179e2:	f003 ffad 	bl	801b940 <rcl_guard_condition_fini>
 80179e6:	4656      	mov	r6, sl
 80179e8:	e77c      	b.n	80178e4 <rcl_timer_init+0x2c>
 80179ea:	4648      	mov	r0, r9
 80179ec:	f003 ffa8 	bl	801b940 <rcl_guard_condition_fini>
 80179f0:	4905      	ldr	r1, [pc, #20]	@ (8017a08 <rcl_timer_init+0x150>)
 80179f2:	4622      	mov	r2, r4
 80179f4:	4628      	mov	r0, r5
 80179f6:	f7ff fe5f 	bl	80176b8 <rcl_clock_remove_jump_callback>
 80179fa:	260a      	movs	r6, #10
 80179fc:	e772      	b.n	80178e4 <rcl_timer_init+0x2c>
 80179fe:	bf00      	nop
	...
 8017a08:	08017775 	.word	0x08017775

08017a0c <rcl_timer_call>:
 8017a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a10:	b087      	sub	sp, #28
 8017a12:	2800      	cmp	r0, #0
 8017a14:	d06d      	beq.n	8017af2 <rcl_timer_call+0xe6>
 8017a16:	6803      	ldr	r3, [r0, #0]
 8017a18:	4604      	mov	r4, r0
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d063      	beq.n	8017ae6 <rcl_timer_call+0xda>
 8017a1e:	f3bf 8f5b 	dmb	ish
 8017a22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8017a26:	f3bf 8f5b 	dmb	ish
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d150      	bne.n	8017ad0 <rcl_timer_call+0xc4>
 8017a2e:	6803      	ldr	r3, [r0, #0]
 8017a30:	a904      	add	r1, sp, #16
 8017a32:	6818      	ldr	r0, [r3, #0]
 8017a34:	f7ff fdd2 	bl	80175dc <rcl_clock_get_now>
 8017a38:	4605      	mov	r5, r0
 8017a3a:	2800      	cmp	r0, #0
 8017a3c:	d14a      	bne.n	8017ad4 <rcl_timer_call+0xc8>
 8017a3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	db4a      	blt.n	8017adc <rcl_timer_call+0xd0>
 8017a46:	6820      	ldr	r0, [r4, #0]
 8017a48:	f04f 0a05 	mov.w	sl, #5
 8017a4c:	f8cd a000 	str.w	sl, [sp]
 8017a50:	3020      	adds	r0, #32
 8017a52:	f001 fd0d 	bl	8019470 <__atomic_exchange_8>
 8017a56:	6823      	ldr	r3, [r4, #0]
 8017a58:	f3bf 8f5b 	dmb	ish
 8017a5c:	4680      	mov	r8, r0
 8017a5e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8017a62:	f3bf 8f5b 	dmb	ish
 8017a66:	6820      	ldr	r0, [r4, #0]
 8017a68:	4689      	mov	r9, r1
 8017a6a:	3028      	adds	r0, #40	@ 0x28
 8017a6c:	4651      	mov	r1, sl
 8017a6e:	f001 fc93 	bl	8019398 <__atomic_load_8>
 8017a72:	4606      	mov	r6, r0
 8017a74:	6820      	ldr	r0, [r4, #0]
 8017a76:	460f      	mov	r7, r1
 8017a78:	3018      	adds	r0, #24
 8017a7a:	4651      	mov	r1, sl
 8017a7c:	f001 fc8c 	bl	8019398 <__atomic_load_8>
 8017a80:	1836      	adds	r6, r6, r0
 8017a82:	4602      	mov	r2, r0
 8017a84:	4682      	mov	sl, r0
 8017a86:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8017a8a:	eb47 0701 	adc.w	r7, r7, r1
 8017a8e:	4286      	cmp	r6, r0
 8017a90:	460b      	mov	r3, r1
 8017a92:	eb77 010c 	sbcs.w	r1, r7, ip
 8017a96:	da04      	bge.n	8017aa2 <rcl_timer_call+0x96>
 8017a98:	ea53 0102 	orrs.w	r1, r3, r2
 8017a9c:	d12e      	bne.n	8017afc <rcl_timer_call+0xf0>
 8017a9e:	4606      	mov	r6, r0
 8017aa0:	4667      	mov	r7, ip
 8017aa2:	6820      	ldr	r0, [r4, #0]
 8017aa4:	2105      	movs	r1, #5
 8017aa6:	4632      	mov	r2, r6
 8017aa8:	463b      	mov	r3, r7
 8017aaa:	3028      	adds	r0, #40	@ 0x28
 8017aac:	9100      	str	r1, [sp, #0]
 8017aae:	f001 fca9 	bl	8019404 <__atomic_store_8>
 8017ab2:	f1bb 0f00 	cmp.w	fp, #0
 8017ab6:	d00d      	beq.n	8017ad4 <rcl_timer_call+0xc8>
 8017ab8:	9a04      	ldr	r2, [sp, #16]
 8017aba:	9b05      	ldr	r3, [sp, #20]
 8017abc:	ebb2 0208 	subs.w	r2, r2, r8
 8017ac0:	4620      	mov	r0, r4
 8017ac2:	eb63 0309 	sbc.w	r3, r3, r9
 8017ac6:	47d8      	blx	fp
 8017ac8:	4628      	mov	r0, r5
 8017aca:	b007      	add	sp, #28
 8017acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ad0:	f240 3521 	movw	r5, #801	@ 0x321
 8017ad4:	4628      	mov	r0, r5
 8017ad6:	b007      	add	sp, #28
 8017ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017adc:	2501      	movs	r5, #1
 8017ade:	4628      	mov	r0, r5
 8017ae0:	b007      	add	sp, #28
 8017ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ae6:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8017aea:	4628      	mov	r0, r5
 8017aec:	b007      	add	sp, #28
 8017aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017af2:	250b      	movs	r5, #11
 8017af4:	4628      	mov	r0, r5
 8017af6:	b007      	add	sp, #28
 8017af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017afc:	1b80      	subs	r0, r0, r6
 8017afe:	eb6c 0107 	sbc.w	r1, ip, r7
 8017b02:	3801      	subs	r0, #1
 8017b04:	f161 0100 	sbc.w	r1, r1, #0
 8017b08:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017b0c:	f7e9 f85c 	bl	8000bc8 <__aeabi_ldivmod>
 8017b10:	9b02      	ldr	r3, [sp, #8]
 8017b12:	3001      	adds	r0, #1
 8017b14:	f141 0100 	adc.w	r1, r1, #0
 8017b18:	fb00 f303 	mul.w	r3, r0, r3
 8017b1c:	fb01 330a 	mla	r3, r1, sl, r3
 8017b20:	fba0 0a0a 	umull	r0, sl, r0, sl
 8017b24:	1986      	adds	r6, r0, r6
 8017b26:	4453      	add	r3, sl
 8017b28:	eb43 0707 	adc.w	r7, r3, r7
 8017b2c:	e7b9      	b.n	8017aa2 <rcl_timer_call+0x96>
 8017b2e:	bf00      	nop

08017b30 <rcl_timer_is_ready>:
 8017b30:	b570      	push	{r4, r5, r6, lr}
 8017b32:	b082      	sub	sp, #8
 8017b34:	b378      	cbz	r0, 8017b96 <rcl_timer_is_ready+0x66>
 8017b36:	6803      	ldr	r3, [r0, #0]
 8017b38:	4604      	mov	r4, r0
 8017b3a:	b383      	cbz	r3, 8017b9e <rcl_timer_is_ready+0x6e>
 8017b3c:	460d      	mov	r5, r1
 8017b3e:	b351      	cbz	r1, 8017b96 <rcl_timer_is_ready+0x66>
 8017b40:	f3bf 8f5b 	dmb	ish
 8017b44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8017b48:	f3bf 8f5b 	dmb	ish
 8017b4c:	b953      	cbnz	r3, 8017b64 <rcl_timer_is_ready+0x34>
 8017b4e:	6803      	ldr	r3, [r0, #0]
 8017b50:	4669      	mov	r1, sp
 8017b52:	6818      	ldr	r0, [r3, #0]
 8017b54:	f7ff fd42 	bl	80175dc <rcl_clock_get_now>
 8017b58:	4606      	mov	r6, r0
 8017b5a:	b140      	cbz	r0, 8017b6e <rcl_timer_is_ready+0x3e>
 8017b5c:	f240 3321 	movw	r3, #801	@ 0x321
 8017b60:	4298      	cmp	r0, r3
 8017b62:	d101      	bne.n	8017b68 <rcl_timer_is_ready+0x38>
 8017b64:	2600      	movs	r6, #0
 8017b66:	702e      	strb	r6, [r5, #0]
 8017b68:	4630      	mov	r0, r6
 8017b6a:	b002      	add	sp, #8
 8017b6c:	bd70      	pop	{r4, r5, r6, pc}
 8017b6e:	6820      	ldr	r0, [r4, #0]
 8017b70:	2105      	movs	r1, #5
 8017b72:	3028      	adds	r0, #40	@ 0x28
 8017b74:	f001 fc10 	bl	8019398 <__atomic_load_8>
 8017b78:	9b00      	ldr	r3, [sp, #0]
 8017b7a:	1ac0      	subs	r0, r0, r3
 8017b7c:	9b01      	ldr	r3, [sp, #4]
 8017b7e:	eb61 0103 	sbc.w	r1, r1, r3
 8017b82:	2801      	cmp	r0, #1
 8017b84:	f171 0300 	sbcs.w	r3, r1, #0
 8017b88:	bfb4      	ite	lt
 8017b8a:	2301      	movlt	r3, #1
 8017b8c:	2300      	movge	r3, #0
 8017b8e:	4630      	mov	r0, r6
 8017b90:	702b      	strb	r3, [r5, #0]
 8017b92:	b002      	add	sp, #8
 8017b94:	bd70      	pop	{r4, r5, r6, pc}
 8017b96:	260b      	movs	r6, #11
 8017b98:	4630      	mov	r0, r6
 8017b9a:	b002      	add	sp, #8
 8017b9c:	bd70      	pop	{r4, r5, r6, pc}
 8017b9e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8017ba2:	e7e1      	b.n	8017b68 <rcl_timer_is_ready+0x38>

08017ba4 <rcl_timer_get_time_until_next_call>:
 8017ba4:	b570      	push	{r4, r5, r6, lr}
 8017ba6:	b082      	sub	sp, #8
 8017ba8:	b330      	cbz	r0, 8017bf8 <rcl_timer_get_time_until_next_call+0x54>
 8017baa:	6803      	ldr	r3, [r0, #0]
 8017bac:	4604      	mov	r4, r0
 8017bae:	b33b      	cbz	r3, 8017c00 <rcl_timer_get_time_until_next_call+0x5c>
 8017bb0:	460d      	mov	r5, r1
 8017bb2:	b309      	cbz	r1, 8017bf8 <rcl_timer_get_time_until_next_call+0x54>
 8017bb4:	f3bf 8f5b 	dmb	ish
 8017bb8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8017bbc:	f3bf 8f5b 	dmb	ish
 8017bc0:	b9ab      	cbnz	r3, 8017bee <rcl_timer_get_time_until_next_call+0x4a>
 8017bc2:	6803      	ldr	r3, [r0, #0]
 8017bc4:	4669      	mov	r1, sp
 8017bc6:	6818      	ldr	r0, [r3, #0]
 8017bc8:	f7ff fd08 	bl	80175dc <rcl_clock_get_now>
 8017bcc:	4606      	mov	r6, r0
 8017bce:	b958      	cbnz	r0, 8017be8 <rcl_timer_get_time_until_next_call+0x44>
 8017bd0:	6820      	ldr	r0, [r4, #0]
 8017bd2:	2105      	movs	r1, #5
 8017bd4:	3028      	adds	r0, #40	@ 0x28
 8017bd6:	f001 fbdf 	bl	8019398 <__atomic_load_8>
 8017bda:	9b00      	ldr	r3, [sp, #0]
 8017bdc:	1ac0      	subs	r0, r0, r3
 8017bde:	9b01      	ldr	r3, [sp, #4]
 8017be0:	6028      	str	r0, [r5, #0]
 8017be2:	eb61 0103 	sbc.w	r1, r1, r3
 8017be6:	6069      	str	r1, [r5, #4]
 8017be8:	4630      	mov	r0, r6
 8017bea:	b002      	add	sp, #8
 8017bec:	bd70      	pop	{r4, r5, r6, pc}
 8017bee:	f240 3621 	movw	r6, #801	@ 0x321
 8017bf2:	4630      	mov	r0, r6
 8017bf4:	b002      	add	sp, #8
 8017bf6:	bd70      	pop	{r4, r5, r6, pc}
 8017bf8:	260b      	movs	r6, #11
 8017bfa:	4630      	mov	r0, r6
 8017bfc:	b002      	add	sp, #8
 8017bfe:	bd70      	pop	{r4, r5, r6, pc}
 8017c00:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8017c04:	e7f0      	b.n	8017be8 <rcl_timer_get_time_until_next_call+0x44>
 8017c06:	bf00      	nop

08017c08 <rcl_timer_get_guard_condition>:
 8017c08:	b130      	cbz	r0, 8017c18 <rcl_timer_get_guard_condition+0x10>
 8017c0a:	6800      	ldr	r0, [r0, #0]
 8017c0c:	b120      	cbz	r0, 8017c18 <rcl_timer_get_guard_condition+0x10>
 8017c0e:	68c3      	ldr	r3, [r0, #12]
 8017c10:	b10b      	cbz	r3, 8017c16 <rcl_timer_get_guard_condition+0xe>
 8017c12:	3008      	adds	r0, #8
 8017c14:	4770      	bx	lr
 8017c16:	4618      	mov	r0, r3
 8017c18:	4770      	bx	lr
 8017c1a:	bf00      	nop

08017c1c <rcl_validate_enclave_name_with_size>:
 8017c1c:	b378      	cbz	r0, 8017c7e <rcl_validate_enclave_name_with_size+0x62>
 8017c1e:	b570      	push	{r4, r5, r6, lr}
 8017c20:	4615      	mov	r5, r2
 8017c22:	b0c2      	sub	sp, #264	@ 0x108
 8017c24:	b302      	cbz	r2, 8017c68 <rcl_validate_enclave_name_with_size+0x4c>
 8017c26:	461e      	mov	r6, r3
 8017c28:	466a      	mov	r2, sp
 8017c2a:	ab01      	add	r3, sp, #4
 8017c2c:	460c      	mov	r4, r1
 8017c2e:	f002 f815 	bl	8019c5c <rmw_validate_namespace_with_size>
 8017c32:	4684      	mov	ip, r0
 8017c34:	b9e8      	cbnz	r0, 8017c72 <rcl_validate_enclave_name_with_size+0x56>
 8017c36:	9b00      	ldr	r3, [sp, #0]
 8017c38:	b923      	cbnz	r3, 8017c44 <rcl_validate_enclave_name_with_size+0x28>
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	602b      	str	r3, [r5, #0]
 8017c3e:	4660      	mov	r0, ip
 8017c40:	b042      	add	sp, #264	@ 0x108
 8017c42:	bd70      	pop	{r4, r5, r6, pc}
 8017c44:	2b07      	cmp	r3, #7
 8017c46:	d007      	beq.n	8017c58 <rcl_validate_enclave_name_with_size+0x3c>
 8017c48:	1e5a      	subs	r2, r3, #1
 8017c4a:	2a05      	cmp	r2, #5
 8017c4c:	d833      	bhi.n	8017cb6 <rcl_validate_enclave_name_with_size+0x9a>
 8017c4e:	e8df f002 	tbb	[pc, r2]
 8017c52:	2c2f      	.short	0x2c2f
 8017c54:	1a232629 	.word	0x1a232629
 8017c58:	2cff      	cmp	r4, #255	@ 0xff
 8017c5a:	d9ee      	bls.n	8017c3a <rcl_validate_enclave_name_with_size+0x1e>
 8017c5c:	602b      	str	r3, [r5, #0]
 8017c5e:	2e00      	cmp	r6, #0
 8017c60:	d0ed      	beq.n	8017c3e <rcl_validate_enclave_name_with_size+0x22>
 8017c62:	23fe      	movs	r3, #254	@ 0xfe
 8017c64:	6033      	str	r3, [r6, #0]
 8017c66:	e7ea      	b.n	8017c3e <rcl_validate_enclave_name_with_size+0x22>
 8017c68:	f04f 0c0b 	mov.w	ip, #11
 8017c6c:	4660      	mov	r0, ip
 8017c6e:	b042      	add	sp, #264	@ 0x108
 8017c70:	bd70      	pop	{r4, r5, r6, pc}
 8017c72:	f7fe fdaf 	bl	80167d4 <rcl_convert_rmw_ret_to_rcl_ret>
 8017c76:	4684      	mov	ip, r0
 8017c78:	4660      	mov	r0, ip
 8017c7a:	b042      	add	sp, #264	@ 0x108
 8017c7c:	bd70      	pop	{r4, r5, r6, pc}
 8017c7e:	f04f 0c0b 	mov.w	ip, #11
 8017c82:	4660      	mov	r0, ip
 8017c84:	4770      	bx	lr
 8017c86:	2306      	movs	r3, #6
 8017c88:	602b      	str	r3, [r5, #0]
 8017c8a:	2e00      	cmp	r6, #0
 8017c8c:	d0d7      	beq.n	8017c3e <rcl_validate_enclave_name_with_size+0x22>
 8017c8e:	9b01      	ldr	r3, [sp, #4]
 8017c90:	6033      	str	r3, [r6, #0]
 8017c92:	4660      	mov	r0, ip
 8017c94:	b042      	add	sp, #264	@ 0x108
 8017c96:	bd70      	pop	{r4, r5, r6, pc}
 8017c98:	2305      	movs	r3, #5
 8017c9a:	602b      	str	r3, [r5, #0]
 8017c9c:	e7f5      	b.n	8017c8a <rcl_validate_enclave_name_with_size+0x6e>
 8017c9e:	2304      	movs	r3, #4
 8017ca0:	602b      	str	r3, [r5, #0]
 8017ca2:	e7f2      	b.n	8017c8a <rcl_validate_enclave_name_with_size+0x6e>
 8017ca4:	2303      	movs	r3, #3
 8017ca6:	602b      	str	r3, [r5, #0]
 8017ca8:	e7ef      	b.n	8017c8a <rcl_validate_enclave_name_with_size+0x6e>
 8017caa:	2302      	movs	r3, #2
 8017cac:	602b      	str	r3, [r5, #0]
 8017cae:	e7ec      	b.n	8017c8a <rcl_validate_enclave_name_with_size+0x6e>
 8017cb0:	2301      	movs	r3, #1
 8017cb2:	602b      	str	r3, [r5, #0]
 8017cb4:	e7e9      	b.n	8017c8a <rcl_validate_enclave_name_with_size+0x6e>
 8017cb6:	4a04      	ldr	r2, [pc, #16]	@ (8017cc8 <rcl_validate_enclave_name_with_size+0xac>)
 8017cb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017cbc:	a802      	add	r0, sp, #8
 8017cbe:	f001 fd25 	bl	801970c <rcutils_snprintf>
 8017cc2:	f04f 0c01 	mov.w	ip, #1
 8017cc6:	e7ba      	b.n	8017c3e <rcl_validate_enclave_name_with_size+0x22>
 8017cc8:	0801edf4 	.word	0x0801edf4

08017ccc <rcl_validate_enclave_name>:
 8017ccc:	b168      	cbz	r0, 8017cea <rcl_validate_enclave_name+0x1e>
 8017cce:	b570      	push	{r4, r5, r6, lr}
 8017cd0:	460d      	mov	r5, r1
 8017cd2:	4616      	mov	r6, r2
 8017cd4:	4604      	mov	r4, r0
 8017cd6:	f7e8 faad 	bl	8000234 <strlen>
 8017cda:	4633      	mov	r3, r6
 8017cdc:	4601      	mov	r1, r0
 8017cde:	462a      	mov	r2, r5
 8017ce0:	4620      	mov	r0, r4
 8017ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ce6:	f7ff bf99 	b.w	8017c1c <rcl_validate_enclave_name_with_size>
 8017cea:	200b      	movs	r0, #11
 8017cec:	4770      	bx	lr
 8017cee:	bf00      	nop

08017cf0 <rcl_get_zero_initialized_wait_set>:
 8017cf0:	b510      	push	{r4, lr}
 8017cf2:	4c08      	ldr	r4, [pc, #32]	@ (8017d14 <rcl_get_zero_initialized_wait_set+0x24>)
 8017cf4:	4686      	mov	lr, r0
 8017cf6:	4684      	mov	ip, r0
 8017cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017cfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017d0a:	6823      	ldr	r3, [r4, #0]
 8017d0c:	f8cc 3000 	str.w	r3, [ip]
 8017d10:	4670      	mov	r0, lr
 8017d12:	bd10      	pop	{r4, pc}
 8017d14:	0801ee54 	.word	0x0801ee54

08017d18 <rcl_wait_set_is_valid>:
 8017d18:	b118      	cbz	r0, 8017d22 <rcl_wait_set_is_valid+0xa>
 8017d1a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8017d1c:	3800      	subs	r0, #0
 8017d1e:	bf18      	it	ne
 8017d20:	2001      	movne	r0, #1
 8017d22:	4770      	bx	lr

08017d24 <rcl_wait_set_fini>:
 8017d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d28:	b082      	sub	sp, #8
 8017d2a:	2800      	cmp	r0, #0
 8017d2c:	f000 8095 	beq.w	8017e5a <rcl_wait_set_fini+0x136>
 8017d30:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8017d32:	4604      	mov	r4, r0
 8017d34:	2e00      	cmp	r6, #0
 8017d36:	f000 808c 	beq.w	8017e52 <rcl_wait_set_fini+0x12e>
 8017d3a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8017d3c:	f002 fd48 	bl	801a7d0 <rmw_destroy_wait_set>
 8017d40:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017d42:	1e06      	subs	r6, r0, #0
 8017d44:	bf18      	it	ne
 8017d46:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8017d4a:	2d00      	cmp	r5, #0
 8017d4c:	f000 8081 	beq.w	8017e52 <rcl_wait_set_fini+0x12e>
 8017d50:	6820      	ldr	r0, [r4, #0]
 8017d52:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017d56:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017d58:	2700      	movs	r7, #0
 8017d5a:	6067      	str	r7, [r4, #4]
 8017d5c:	602f      	str	r7, [r5, #0]
 8017d5e:	b120      	cbz	r0, 8017d6a <rcl_wait_set_fini+0x46>
 8017d60:	9101      	str	r1, [sp, #4]
 8017d62:	47c0      	blx	r8
 8017d64:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017d66:	9901      	ldr	r1, [sp, #4]
 8017d68:	6027      	str	r7, [r4, #0]
 8017d6a:	68a8      	ldr	r0, [r5, #8]
 8017d6c:	b120      	cbz	r0, 8017d78 <rcl_wait_set_fini+0x54>
 8017d6e:	47c0      	blx	r8
 8017d70:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017d72:	2300      	movs	r3, #0
 8017d74:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8017d78:	68a0      	ldr	r0, [r4, #8]
 8017d7a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017d7c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017d7e:	f04f 0800 	mov.w	r8, #0
 8017d82:	f8c4 800c 	str.w	r8, [r4, #12]
 8017d86:	f8c5 800c 	str.w	r8, [r5, #12]
 8017d8a:	b128      	cbz	r0, 8017d98 <rcl_wait_set_fini+0x74>
 8017d8c:	47b8      	blx	r7
 8017d8e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017d90:	f8c4 8008 	str.w	r8, [r4, #8]
 8017d94:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017d96:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017d98:	6968      	ldr	r0, [r5, #20]
 8017d9a:	f04f 0800 	mov.w	r8, #0
 8017d9e:	f8c5 8010 	str.w	r8, [r5, #16]
 8017da2:	b128      	cbz	r0, 8017db0 <rcl_wait_set_fini+0x8c>
 8017da4:	47b8      	blx	r7
 8017da6:	f8c5 8014 	str.w	r8, [r5, #20]
 8017daa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017dac:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017dae:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017db0:	6920      	ldr	r0, [r4, #16]
 8017db2:	f04f 0800 	mov.w	r8, #0
 8017db6:	f8c4 8014 	str.w	r8, [r4, #20]
 8017dba:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8017dbe:	b128      	cbz	r0, 8017dcc <rcl_wait_set_fini+0xa8>
 8017dc0:	47b8      	blx	r7
 8017dc2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017dc4:	f8c4 8010 	str.w	r8, [r4, #16]
 8017dc8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017dca:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017dcc:	69a0      	ldr	r0, [r4, #24]
 8017dce:	f04f 0800 	mov.w	r8, #0
 8017dd2:	f8c4 801c 	str.w	r8, [r4, #28]
 8017dd6:	f8c5 8018 	str.w	r8, [r5, #24]
 8017dda:	b128      	cbz	r0, 8017de8 <rcl_wait_set_fini+0xc4>
 8017ddc:	9101      	str	r1, [sp, #4]
 8017dde:	47b8      	blx	r7
 8017de0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017de2:	9901      	ldr	r1, [sp, #4]
 8017de4:	f8c4 8018 	str.w	r8, [r4, #24]
 8017de8:	6a28      	ldr	r0, [r5, #32]
 8017dea:	b120      	cbz	r0, 8017df6 <rcl_wait_set_fini+0xd2>
 8017dec:	47b8      	blx	r7
 8017dee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017df0:	2300      	movs	r3, #0
 8017df2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8017df6:	6a20      	ldr	r0, [r4, #32]
 8017df8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017dfc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017dfe:	2700      	movs	r7, #0
 8017e00:	6267      	str	r7, [r4, #36]	@ 0x24
 8017e02:	626f      	str	r7, [r5, #36]	@ 0x24
 8017e04:	b120      	cbz	r0, 8017e10 <rcl_wait_set_fini+0xec>
 8017e06:	9101      	str	r1, [sp, #4]
 8017e08:	47c0      	blx	r8
 8017e0a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017e0c:	9901      	ldr	r1, [sp, #4]
 8017e0e:	6227      	str	r7, [r4, #32]
 8017e10:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8017e12:	b120      	cbz	r0, 8017e1e <rcl_wait_set_fini+0xfa>
 8017e14:	47c0      	blx	r8
 8017e16:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017e18:	2300      	movs	r3, #0
 8017e1a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8017e1e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017e20:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017e24:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017e26:	2700      	movs	r7, #0
 8017e28:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8017e2a:	632f      	str	r7, [r5, #48]	@ 0x30
 8017e2c:	b120      	cbz	r0, 8017e38 <rcl_wait_set_fini+0x114>
 8017e2e:	9101      	str	r1, [sp, #4]
 8017e30:	47c0      	blx	r8
 8017e32:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017e34:	9901      	ldr	r1, [sp, #4]
 8017e36:	62a7      	str	r7, [r4, #40]	@ 0x28
 8017e38:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8017e3a:	b120      	cbz	r0, 8017e46 <rcl_wait_set_fini+0x122>
 8017e3c:	47c0      	blx	r8
 8017e3e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017e40:	2300      	movs	r3, #0
 8017e42:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8017e46:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8017e48:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017e4a:	4628      	mov	r0, r5
 8017e4c:	4798      	blx	r3
 8017e4e:	2300      	movs	r3, #0
 8017e50:	6323      	str	r3, [r4, #48]	@ 0x30
 8017e52:	4630      	mov	r0, r6
 8017e54:	b002      	add	sp, #8
 8017e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e5a:	260b      	movs	r6, #11
 8017e5c:	4630      	mov	r0, r6
 8017e5e:	b002      	add	sp, #8
 8017e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017e64 <rcl_wait_set_add_subscription>:
 8017e64:	b318      	cbz	r0, 8017eae <rcl_wait_set_add_subscription+0x4a>
 8017e66:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017e68:	b570      	push	{r4, r5, r6, lr}
 8017e6a:	4604      	mov	r4, r0
 8017e6c:	b30b      	cbz	r3, 8017eb2 <rcl_wait_set_add_subscription+0x4e>
 8017e6e:	b319      	cbz	r1, 8017eb8 <rcl_wait_set_add_subscription+0x54>
 8017e70:	681d      	ldr	r5, [r3, #0]
 8017e72:	6840      	ldr	r0, [r0, #4]
 8017e74:	4285      	cmp	r5, r0
 8017e76:	d217      	bcs.n	8017ea8 <rcl_wait_set_add_subscription+0x44>
 8017e78:	6820      	ldr	r0, [r4, #0]
 8017e7a:	1c6e      	adds	r6, r5, #1
 8017e7c:	601e      	str	r6, [r3, #0]
 8017e7e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017e82:	b102      	cbz	r2, 8017e86 <rcl_wait_set_add_subscription+0x22>
 8017e84:	6015      	str	r5, [r2, #0]
 8017e86:	4608      	mov	r0, r1
 8017e88:	f7ff fb08 	bl	801749c <rcl_subscription_get_rmw_handle>
 8017e8c:	b150      	cbz	r0, 8017ea4 <rcl_wait_set_add_subscription+0x40>
 8017e8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017e90:	6842      	ldr	r2, [r0, #4]
 8017e92:	689b      	ldr	r3, [r3, #8]
 8017e94:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017e98:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017e9a:	6853      	ldr	r3, [r2, #4]
 8017e9c:	3301      	adds	r3, #1
 8017e9e:	2000      	movs	r0, #0
 8017ea0:	6053      	str	r3, [r2, #4]
 8017ea2:	bd70      	pop	{r4, r5, r6, pc}
 8017ea4:	2001      	movs	r0, #1
 8017ea6:	bd70      	pop	{r4, r5, r6, pc}
 8017ea8:	f240 3086 	movw	r0, #902	@ 0x386
 8017eac:	bd70      	pop	{r4, r5, r6, pc}
 8017eae:	200b      	movs	r0, #11
 8017eb0:	4770      	bx	lr
 8017eb2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017eb6:	bd70      	pop	{r4, r5, r6, pc}
 8017eb8:	200b      	movs	r0, #11
 8017eba:	bd70      	pop	{r4, r5, r6, pc}

08017ebc <rcl_wait_set_clear>:
 8017ebc:	2800      	cmp	r0, #0
 8017ebe:	d073      	beq.n	8017fa8 <rcl_wait_set_clear+0xec>
 8017ec0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017ec2:	b510      	push	{r4, lr}
 8017ec4:	4604      	mov	r4, r0
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d070      	beq.n	8017fac <rcl_wait_set_clear+0xf0>
 8017eca:	6800      	ldr	r0, [r0, #0]
 8017ecc:	b138      	cbz	r0, 8017ede <rcl_wait_set_clear+0x22>
 8017ece:	6862      	ldr	r2, [r4, #4]
 8017ed0:	2100      	movs	r1, #0
 8017ed2:	0092      	lsls	r2, r2, #2
 8017ed4:	f004 fbde 	bl	801c694 <memset>
 8017ed8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017eda:	2200      	movs	r2, #0
 8017edc:	601a      	str	r2, [r3, #0]
 8017ede:	68a0      	ldr	r0, [r4, #8]
 8017ee0:	b138      	cbz	r0, 8017ef2 <rcl_wait_set_clear+0x36>
 8017ee2:	68e2      	ldr	r2, [r4, #12]
 8017ee4:	2100      	movs	r1, #0
 8017ee6:	0092      	lsls	r2, r2, #2
 8017ee8:	f004 fbd4 	bl	801c694 <memset>
 8017eec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017eee:	2200      	movs	r2, #0
 8017ef0:	60da      	str	r2, [r3, #12]
 8017ef2:	69a0      	ldr	r0, [r4, #24]
 8017ef4:	b138      	cbz	r0, 8017f06 <rcl_wait_set_clear+0x4a>
 8017ef6:	69e2      	ldr	r2, [r4, #28]
 8017ef8:	2100      	movs	r1, #0
 8017efa:	0092      	lsls	r2, r2, #2
 8017efc:	f004 fbca 	bl	801c694 <memset>
 8017f00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f02:	2200      	movs	r2, #0
 8017f04:	619a      	str	r2, [r3, #24]
 8017f06:	6a20      	ldr	r0, [r4, #32]
 8017f08:	b138      	cbz	r0, 8017f1a <rcl_wait_set_clear+0x5e>
 8017f0a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017f0c:	2100      	movs	r1, #0
 8017f0e:	0092      	lsls	r2, r2, #2
 8017f10:	f004 fbc0 	bl	801c694 <memset>
 8017f14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f16:	2200      	movs	r2, #0
 8017f18:	625a      	str	r2, [r3, #36]	@ 0x24
 8017f1a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017f1c:	b138      	cbz	r0, 8017f2e <rcl_wait_set_clear+0x72>
 8017f1e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017f20:	2100      	movs	r1, #0
 8017f22:	0092      	lsls	r2, r2, #2
 8017f24:	f004 fbb6 	bl	801c694 <memset>
 8017f28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f2a:	2200      	movs	r2, #0
 8017f2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8017f2e:	6920      	ldr	r0, [r4, #16]
 8017f30:	b138      	cbz	r0, 8017f42 <rcl_wait_set_clear+0x86>
 8017f32:	6962      	ldr	r2, [r4, #20]
 8017f34:	2100      	movs	r1, #0
 8017f36:	0092      	lsls	r2, r2, #2
 8017f38:	f004 fbac 	bl	801c694 <memset>
 8017f3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f3e:	2200      	movs	r2, #0
 8017f40:	641a      	str	r2, [r3, #64]	@ 0x40
 8017f42:	6898      	ldr	r0, [r3, #8]
 8017f44:	b138      	cbz	r0, 8017f56 <rcl_wait_set_clear+0x9a>
 8017f46:	685a      	ldr	r2, [r3, #4]
 8017f48:	2100      	movs	r1, #0
 8017f4a:	0092      	lsls	r2, r2, #2
 8017f4c:	f004 fba2 	bl	801c694 <memset>
 8017f50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f52:	2200      	movs	r2, #0
 8017f54:	605a      	str	r2, [r3, #4]
 8017f56:	6958      	ldr	r0, [r3, #20]
 8017f58:	b138      	cbz	r0, 8017f6a <rcl_wait_set_clear+0xae>
 8017f5a:	691a      	ldr	r2, [r3, #16]
 8017f5c:	2100      	movs	r1, #0
 8017f5e:	0092      	lsls	r2, r2, #2
 8017f60:	f004 fb98 	bl	801c694 <memset>
 8017f64:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f66:	2200      	movs	r2, #0
 8017f68:	611a      	str	r2, [r3, #16]
 8017f6a:	6a18      	ldr	r0, [r3, #32]
 8017f6c:	b138      	cbz	r0, 8017f7e <rcl_wait_set_clear+0xc2>
 8017f6e:	69da      	ldr	r2, [r3, #28]
 8017f70:	2100      	movs	r1, #0
 8017f72:	0092      	lsls	r2, r2, #2
 8017f74:	f004 fb8e 	bl	801c694 <memset>
 8017f78:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	61da      	str	r2, [r3, #28]
 8017f7e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8017f80:	b138      	cbz	r0, 8017f92 <rcl_wait_set_clear+0xd6>
 8017f82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017f84:	2100      	movs	r1, #0
 8017f86:	0092      	lsls	r2, r2, #2
 8017f88:	f004 fb84 	bl	801c694 <memset>
 8017f8c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f8e:	2200      	movs	r2, #0
 8017f90:	629a      	str	r2, [r3, #40]	@ 0x28
 8017f92:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8017f94:	b138      	cbz	r0, 8017fa6 <rcl_wait_set_clear+0xea>
 8017f96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017f98:	2100      	movs	r1, #0
 8017f9a:	0092      	lsls	r2, r2, #2
 8017f9c:	f004 fb7a 	bl	801c694 <memset>
 8017fa0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017fa2:	2000      	movs	r0, #0
 8017fa4:	6358      	str	r0, [r3, #52]	@ 0x34
 8017fa6:	bd10      	pop	{r4, pc}
 8017fa8:	200b      	movs	r0, #11
 8017faa:	4770      	bx	lr
 8017fac:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017fb0:	bd10      	pop	{r4, pc}
 8017fb2:	bf00      	nop

08017fb4 <rcl_wait_set_resize>:
 8017fb4:	2800      	cmp	r0, #0
 8017fb6:	f000 8185 	beq.w	80182c4 <rcl_wait_set_resize+0x310>
 8017fba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fbe:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8017fc0:	b083      	sub	sp, #12
 8017fc2:	4605      	mov	r5, r0
 8017fc4:	2c00      	cmp	r4, #0
 8017fc6:	f000 817f 	beq.w	80182c8 <rcl_wait_set_resize+0x314>
 8017fca:	f04f 0900 	mov.w	r9, #0
 8017fce:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8017fd2:	461f      	mov	r7, r3
 8017fd4:	4688      	mov	r8, r1
 8017fd6:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8017fda:	4616      	mov	r6, r2
 8017fdc:	f8c0 9004 	str.w	r9, [r0, #4]
 8017fe0:	f8c4 9000 	str.w	r9, [r4]
 8017fe4:	2900      	cmp	r1, #0
 8017fe6:	f000 80bd 	beq.w	8018164 <rcl_wait_set_resize+0x1b0>
 8017fea:	008c      	lsls	r4, r1, #2
 8017fec:	6800      	ldr	r0, [r0, #0]
 8017fee:	9301      	str	r3, [sp, #4]
 8017ff0:	4652      	mov	r2, sl
 8017ff2:	4621      	mov	r1, r4
 8017ff4:	4798      	blx	r3
 8017ff6:	9b01      	ldr	r3, [sp, #4]
 8017ff8:	6028      	str	r0, [r5, #0]
 8017ffa:	2800      	cmp	r0, #0
 8017ffc:	f000 80cb 	beq.w	8018196 <rcl_wait_set_resize+0x1e2>
 8018000:	4622      	mov	r2, r4
 8018002:	4649      	mov	r1, r9
 8018004:	9301      	str	r3, [sp, #4]
 8018006:	f004 fb45 	bl	801c694 <memset>
 801800a:	f8c5 8004 	str.w	r8, [r5, #4]
 801800e:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8018012:	9b01      	ldr	r3, [sp, #4]
 8018014:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8018018:	f8c8 9004 	str.w	r9, [r8, #4]
 801801c:	4652      	mov	r2, sl
 801801e:	4621      	mov	r1, r4
 8018020:	4798      	blx	r3
 8018022:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018024:	f8c8 0008 	str.w	r0, [r8, #8]
 8018028:	689b      	ldr	r3, [r3, #8]
 801802a:	2b00      	cmp	r3, #0
 801802c:	f000 80ac 	beq.w	8018188 <rcl_wait_set_resize+0x1d4>
 8018030:	4622      	mov	r2, r4
 8018032:	4649      	mov	r1, r9
 8018034:	4618      	mov	r0, r3
 8018036:	f004 fb2d 	bl	801c694 <memset>
 801803a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801803c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8018040:	f04f 0800 	mov.w	r8, #0
 8018044:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8018048:	f8c5 800c 	str.w	r8, [r5, #12]
 801804c:	f8c4 800c 	str.w	r8, [r4, #12]
 8018050:	2e00      	cmp	r6, #0
 8018052:	f040 80a4 	bne.w	801819e <rcl_wait_set_resize+0x1ea>
 8018056:	68a8      	ldr	r0, [r5, #8]
 8018058:	b128      	cbz	r0, 8018066 <rcl_wait_set_resize+0xb2>
 801805a:	4649      	mov	r1, r9
 801805c:	4790      	blx	r2
 801805e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018060:	60ae      	str	r6, [r5, #8]
 8018062:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8018066:	f04f 0800 	mov.w	r8, #0
 801806a:	19f6      	adds	r6, r6, r7
 801806c:	f8c4 8010 	str.w	r8, [r4, #16]
 8018070:	f040 80ac 	bne.w	80181cc <rcl_wait_set_resize+0x218>
 8018074:	6960      	ldr	r0, [r4, #20]
 8018076:	b130      	cbz	r0, 8018086 <rcl_wait_set_resize+0xd2>
 8018078:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801807a:	4649      	mov	r1, r9
 801807c:	4798      	blx	r3
 801807e:	6166      	str	r6, [r4, #20]
 8018080:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018082:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8018086:	2600      	movs	r6, #0
 8018088:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801808c:	616e      	str	r6, [r5, #20]
 801808e:	6426      	str	r6, [r4, #64]	@ 0x40
 8018090:	2f00      	cmp	r7, #0
 8018092:	f040 80ad 	bne.w	80181f0 <rcl_wait_set_resize+0x23c>
 8018096:	6928      	ldr	r0, [r5, #16]
 8018098:	b138      	cbz	r0, 80180aa <rcl_wait_set_resize+0xf6>
 801809a:	4649      	mov	r1, r9
 801809c:	47d0      	blx	sl
 801809e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80180a0:	612f      	str	r7, [r5, #16]
 80180a2:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80180a6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80180aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80180ac:	2600      	movs	r6, #0
 80180ae:	61ee      	str	r6, [r5, #28]
 80180b0:	61a6      	str	r6, [r4, #24]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	f040 80af 	bne.w	8018216 <rcl_wait_set_resize+0x262>
 80180b8:	69a8      	ldr	r0, [r5, #24]
 80180ba:	b120      	cbz	r0, 80180c6 <rcl_wait_set_resize+0x112>
 80180bc:	4649      	mov	r1, r9
 80180be:	47d0      	blx	sl
 80180c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80180c2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80180c4:	61ab      	str	r3, [r5, #24]
 80180c6:	6a20      	ldr	r0, [r4, #32]
 80180c8:	b128      	cbz	r0, 80180d6 <rcl_wait_set_resize+0x122>
 80180ca:	4649      	mov	r1, r9
 80180cc:	47d0      	blx	sl
 80180ce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80180d0:	2300      	movs	r3, #0
 80180d2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80180d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80180d8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80180da:	2600      	movs	r6, #0
 80180dc:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80180e0:	626e      	str	r6, [r5, #36]	@ 0x24
 80180e2:	6266      	str	r6, [r4, #36]	@ 0x24
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	f000 80b6 	beq.w	8018256 <rcl_wait_set_resize+0x2a2>
 80180ea:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80180ee:	6a28      	ldr	r0, [r5, #32]
 80180f0:	463a      	mov	r2, r7
 80180f2:	4651      	mov	r1, sl
 80180f4:	47c8      	blx	r9
 80180f6:	6228      	str	r0, [r5, #32]
 80180f8:	2800      	cmp	r0, #0
 80180fa:	d04c      	beq.n	8018196 <rcl_wait_set_resize+0x1e2>
 80180fc:	4652      	mov	r2, sl
 80180fe:	4631      	mov	r1, r6
 8018100:	f004 fac8 	bl	801c694 <memset>
 8018104:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018106:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018108:	626b      	str	r3, [r5, #36]	@ 0x24
 801810a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801810c:	62a6      	str	r6, [r4, #40]	@ 0x28
 801810e:	463a      	mov	r2, r7
 8018110:	4651      	mov	r1, sl
 8018112:	47c8      	blx	r9
 8018114:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018116:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8018118:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801811a:	2c00      	cmp	r4, #0
 801811c:	f000 80f0 	beq.w	8018300 <rcl_wait_set_resize+0x34c>
 8018120:	4620      	mov	r0, r4
 8018122:	4652      	mov	r2, sl
 8018124:	4631      	mov	r1, r6
 8018126:	f004 fab5 	bl	801c694 <memset>
 801812a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801812c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801812e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8018130:	2600      	movs	r6, #0
 8018132:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8018136:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8018138:	6326      	str	r6, [r4, #48]	@ 0x30
 801813a:	2b00      	cmp	r3, #0
 801813c:	f040 809d 	bne.w	801827a <rcl_wait_set_resize+0x2c6>
 8018140:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8018142:	b120      	cbz	r0, 801814e <rcl_wait_set_resize+0x19a>
 8018144:	4639      	mov	r1, r7
 8018146:	47c0      	blx	r8
 8018148:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801814a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801814c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801814e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8018150:	b310      	cbz	r0, 8018198 <rcl_wait_set_resize+0x1e4>
 8018152:	4639      	mov	r1, r7
 8018154:	47c0      	blx	r8
 8018156:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018158:	2000      	movs	r0, #0
 801815a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801815e:	b003      	add	sp, #12
 8018160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018164:	6800      	ldr	r0, [r0, #0]
 8018166:	b120      	cbz	r0, 8018172 <rcl_wait_set_resize+0x1be>
 8018168:	4651      	mov	r1, sl
 801816a:	47d8      	blx	fp
 801816c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801816e:	f8c5 8000 	str.w	r8, [r5]
 8018172:	68a0      	ldr	r0, [r4, #8]
 8018174:	2800      	cmp	r0, #0
 8018176:	f43f af61 	beq.w	801803c <rcl_wait_set_resize+0x88>
 801817a:	4651      	mov	r1, sl
 801817c:	47d8      	blx	fp
 801817e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018180:	2300      	movs	r3, #0
 8018182:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8018186:	e759      	b.n	801803c <rcl_wait_set_resize+0x88>
 8018188:	6828      	ldr	r0, [r5, #0]
 801818a:	9301      	str	r3, [sp, #4]
 801818c:	4651      	mov	r1, sl
 801818e:	47d8      	blx	fp
 8018190:	9b01      	ldr	r3, [sp, #4]
 8018192:	e9c5 3300 	strd	r3, r3, [r5]
 8018196:	200a      	movs	r0, #10
 8018198:	b003      	add	sp, #12
 801819a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801819e:	00b4      	lsls	r4, r6, #2
 80181a0:	68a8      	ldr	r0, [r5, #8]
 80181a2:	464a      	mov	r2, r9
 80181a4:	4621      	mov	r1, r4
 80181a6:	4798      	blx	r3
 80181a8:	60a8      	str	r0, [r5, #8]
 80181aa:	2800      	cmp	r0, #0
 80181ac:	d0f3      	beq.n	8018196 <rcl_wait_set_resize+0x1e2>
 80181ae:	4622      	mov	r2, r4
 80181b0:	4641      	mov	r1, r8
 80181b2:	f004 fa6f 	bl	801c694 <memset>
 80181b6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80181b8:	60ee      	str	r6, [r5, #12]
 80181ba:	f04f 0800 	mov.w	r8, #0
 80181be:	19f6      	adds	r6, r6, r7
 80181c0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80181c4:	f8c4 8010 	str.w	r8, [r4, #16]
 80181c8:	f43f af54 	beq.w	8018074 <rcl_wait_set_resize+0xc0>
 80181cc:	00b6      	lsls	r6, r6, #2
 80181ce:	464a      	mov	r2, r9
 80181d0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80181d2:	6960      	ldr	r0, [r4, #20]
 80181d4:	4631      	mov	r1, r6
 80181d6:	4798      	blx	r3
 80181d8:	4681      	mov	r9, r0
 80181da:	6160      	str	r0, [r4, #20]
 80181dc:	2800      	cmp	r0, #0
 80181de:	d076      	beq.n	80182ce <rcl_wait_set_resize+0x31a>
 80181e0:	4632      	mov	r2, r6
 80181e2:	4641      	mov	r1, r8
 80181e4:	f004 fa56 	bl	801c694 <memset>
 80181e8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80181ea:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80181ee:	e74a      	b.n	8018086 <rcl_wait_set_resize+0xd2>
 80181f0:	00bc      	lsls	r4, r7, #2
 80181f2:	6928      	ldr	r0, [r5, #16]
 80181f4:	464a      	mov	r2, r9
 80181f6:	4621      	mov	r1, r4
 80181f8:	47c0      	blx	r8
 80181fa:	6128      	str	r0, [r5, #16]
 80181fc:	2800      	cmp	r0, #0
 80181fe:	d0ca      	beq.n	8018196 <rcl_wait_set_resize+0x1e2>
 8018200:	4622      	mov	r2, r4
 8018202:	4631      	mov	r1, r6
 8018204:	f004 fa46 	bl	801c694 <memset>
 8018208:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801820a:	616f      	str	r7, [r5, #20]
 801820c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8018210:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8018214:	e749      	b.n	80180aa <rcl_wait_set_resize+0xf6>
 8018216:	009c      	lsls	r4, r3, #2
 8018218:	69a8      	ldr	r0, [r5, #24]
 801821a:	464a      	mov	r2, r9
 801821c:	4621      	mov	r1, r4
 801821e:	47c0      	blx	r8
 8018220:	61a8      	str	r0, [r5, #24]
 8018222:	2800      	cmp	r0, #0
 8018224:	d0b7      	beq.n	8018196 <rcl_wait_set_resize+0x1e2>
 8018226:	4622      	mov	r2, r4
 8018228:	4631      	mov	r1, r6
 801822a:	f004 fa33 	bl	801c694 <memset>
 801822e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8018230:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018232:	61eb      	str	r3, [r5, #28]
 8018234:	6a38      	ldr	r0, [r7, #32]
 8018236:	61fe      	str	r6, [r7, #28]
 8018238:	464a      	mov	r2, r9
 801823a:	4621      	mov	r1, r4
 801823c:	47c0      	blx	r8
 801823e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018240:	6238      	str	r0, [r7, #32]
 8018242:	6a1f      	ldr	r7, [r3, #32]
 8018244:	2f00      	cmp	r7, #0
 8018246:	d054      	beq.n	80182f2 <rcl_wait_set_resize+0x33e>
 8018248:	4622      	mov	r2, r4
 801824a:	4631      	mov	r1, r6
 801824c:	4638      	mov	r0, r7
 801824e:	f004 fa21 	bl	801c694 <memset>
 8018252:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018254:	e73f      	b.n	80180d6 <rcl_wait_set_resize+0x122>
 8018256:	6a28      	ldr	r0, [r5, #32]
 8018258:	b120      	cbz	r0, 8018264 <rcl_wait_set_resize+0x2b0>
 801825a:	4639      	mov	r1, r7
 801825c:	47c0      	blx	r8
 801825e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018260:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018262:	622b      	str	r3, [r5, #32]
 8018264:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8018266:	2800      	cmp	r0, #0
 8018268:	f43f af60 	beq.w	801812c <rcl_wait_set_resize+0x178>
 801826c:	4639      	mov	r1, r7
 801826e:	47c0      	blx	r8
 8018270:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018272:	2300      	movs	r3, #0
 8018274:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8018278:	e758      	b.n	801812c <rcl_wait_set_resize+0x178>
 801827a:	009c      	lsls	r4, r3, #2
 801827c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801827e:	463a      	mov	r2, r7
 8018280:	4621      	mov	r1, r4
 8018282:	47c8      	blx	r9
 8018284:	62a8      	str	r0, [r5, #40]	@ 0x28
 8018286:	2800      	cmp	r0, #0
 8018288:	d085      	beq.n	8018196 <rcl_wait_set_resize+0x1e2>
 801828a:	4622      	mov	r2, r4
 801828c:	4631      	mov	r1, r6
 801828e:	f004 fa01 	bl	801c694 <memset>
 8018292:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8018296:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018298:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801829a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801829e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80182a2:	463a      	mov	r2, r7
 80182a4:	4621      	mov	r1, r4
 80182a6:	47c8      	blx	r9
 80182a8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80182aa:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80182ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182b0:	b36b      	cbz	r3, 801830e <rcl_wait_set_resize+0x35a>
 80182b2:	4622      	mov	r2, r4
 80182b4:	4631      	mov	r1, r6
 80182b6:	4618      	mov	r0, r3
 80182b8:	f004 f9ec 	bl	801c694 <memset>
 80182bc:	4630      	mov	r0, r6
 80182be:	b003      	add	sp, #12
 80182c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182c4:	200b      	movs	r0, #11
 80182c6:	4770      	bx	lr
 80182c8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80182cc:	e764      	b.n	8018198 <rcl_wait_set_resize+0x1e4>
 80182ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80182d0:	68a8      	ldr	r0, [r5, #8]
 80182d2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80182d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80182d6:	4798      	blx	r3
 80182d8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80182da:	6928      	ldr	r0, [r5, #16]
 80182dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80182de:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80182e0:	f8c5 900c 	str.w	r9, [r5, #12]
 80182e4:	f8c5 9008 	str.w	r9, [r5, #8]
 80182e8:	4790      	blx	r2
 80182ea:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80182ee:	200a      	movs	r0, #10
 80182f0:	e752      	b.n	8018198 <rcl_wait_set_resize+0x1e4>
 80182f2:	69a8      	ldr	r0, [r5, #24]
 80182f4:	4649      	mov	r1, r9
 80182f6:	47d0      	blx	sl
 80182f8:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80182fc:	200a      	movs	r0, #10
 80182fe:	e74b      	b.n	8018198 <rcl_wait_set_resize+0x1e4>
 8018300:	6a28      	ldr	r0, [r5, #32]
 8018302:	4639      	mov	r1, r7
 8018304:	47c0      	blx	r8
 8018306:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801830a:	200a      	movs	r0, #10
 801830c:	e744      	b.n	8018198 <rcl_wait_set_resize+0x1e4>
 801830e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8018310:	9301      	str	r3, [sp, #4]
 8018312:	4639      	mov	r1, r7
 8018314:	47c0      	blx	r8
 8018316:	9b01      	ldr	r3, [sp, #4]
 8018318:	200a      	movs	r0, #10
 801831a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801831e:	e73b      	b.n	8018198 <rcl_wait_set_resize+0x1e4>

08018320 <rcl_wait_set_init>:
 8018320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018324:	b084      	sub	sp, #16
 8018326:	4604      	mov	r4, r0
 8018328:	a810      	add	r0, sp, #64	@ 0x40
 801832a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801832e:	460f      	mov	r7, r1
 8018330:	4690      	mov	r8, r2
 8018332:	4699      	mov	r9, r3
 8018334:	f7f8 fa2e 	bl	8010794 <rcutils_allocator_is_valid>
 8018338:	2800      	cmp	r0, #0
 801833a:	d06b      	beq.n	8018414 <rcl_wait_set_init+0xf4>
 801833c:	2c00      	cmp	r4, #0
 801833e:	d069      	beq.n	8018414 <rcl_wait_set_init+0xf4>
 8018340:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018342:	b125      	cbz	r5, 801834e <rcl_wait_set_init+0x2e>
 8018344:	2564      	movs	r5, #100	@ 0x64
 8018346:	4628      	mov	r0, r5
 8018348:	b004      	add	sp, #16
 801834a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801834e:	f1ba 0f00 	cmp.w	sl, #0
 8018352:	d05f      	beq.n	8018414 <rcl_wait_set_init+0xf4>
 8018354:	4650      	mov	r0, sl
 8018356:	f7fe fa5b 	bl	8016810 <rcl_context_is_valid>
 801835a:	2800      	cmp	r0, #0
 801835c:	d067      	beq.n	801842e <rcl_wait_set_init+0x10e>
 801835e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018360:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8018362:	205c      	movs	r0, #92	@ 0x5c
 8018364:	4798      	blx	r3
 8018366:	6320      	str	r0, [r4, #48]	@ 0x30
 8018368:	2800      	cmp	r0, #0
 801836a:	d062      	beq.n	8018432 <rcl_wait_set_init+0x112>
 801836c:	4629      	mov	r1, r5
 801836e:	225c      	movs	r2, #92	@ 0x5c
 8018370:	f004 f990 	bl	801c694 <memset>
 8018374:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8018378:	eb03 0e02 	add.w	lr, r3, r2
 801837c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801837e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8018380:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8018384:	449e      	add	lr, r3
 8018386:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801838a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801838e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8018392:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8018396:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801839a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801839e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 80183a2:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 80183a6:	f8da a000 	ldr.w	sl, [sl]
 80183aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80183ac:	44c6      	add	lr, r8
 80183ae:	f8dc 3000 	ldr.w	r3, [ip]
 80183b2:	602b      	str	r3, [r5, #0]
 80183b4:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80183b8:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80183bc:	f002 f9fe 	bl	801a7bc <rmw_create_wait_set>
 80183c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80183c2:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80183c4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80183c6:	b350      	cbz	r0, 801841e <rcl_wait_set_init+0xfe>
 80183c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80183ca:	9302      	str	r3, [sp, #8]
 80183cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80183ce:	9301      	str	r3, [sp, #4]
 80183d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80183d2:	9300      	str	r3, [sp, #0]
 80183d4:	4642      	mov	r2, r8
 80183d6:	464b      	mov	r3, r9
 80183d8:	4639      	mov	r1, r7
 80183da:	4620      	mov	r0, r4
 80183dc:	f7ff fdea 	bl	8017fb4 <rcl_wait_set_resize>
 80183e0:	4605      	mov	r5, r0
 80183e2:	2800      	cmp	r0, #0
 80183e4:	d0af      	beq.n	8018346 <rcl_wait_set_init+0x26>
 80183e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80183e8:	bb2b      	cbnz	r3, 8018436 <rcl_wait_set_init+0x116>
 80183ea:	2600      	movs	r6, #0
 80183ec:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80183f0:	9600      	str	r6, [sp, #0]
 80183f2:	4633      	mov	r3, r6
 80183f4:	4632      	mov	r2, r6
 80183f6:	4631      	mov	r1, r6
 80183f8:	4620      	mov	r0, r4
 80183fa:	f7ff fddb 	bl	8017fb4 <rcl_wait_set_resize>
 80183fe:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8018400:	2800      	cmp	r0, #0
 8018402:	d0a0      	beq.n	8018346 <rcl_wait_set_init+0x26>
 8018404:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8018406:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8018408:	4798      	blx	r3
 801840a:	4628      	mov	r0, r5
 801840c:	6326      	str	r6, [r4, #48]	@ 0x30
 801840e:	b004      	add	sp, #16
 8018410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018414:	250b      	movs	r5, #11
 8018416:	4628      	mov	r0, r5
 8018418:	b004      	add	sp, #16
 801841a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801841e:	2501      	movs	r5, #1
 8018420:	f002 f9d6 	bl	801a7d0 <rmw_destroy_wait_set>
 8018424:	2800      	cmp	r0, #0
 8018426:	bf18      	it	ne
 8018428:	f44f 7561 	movne.w	r5, #900	@ 0x384
 801842c:	e7dd      	b.n	80183ea <rcl_wait_set_init+0xca>
 801842e:	2565      	movs	r5, #101	@ 0x65
 8018430:	e789      	b.n	8018346 <rcl_wait_set_init+0x26>
 8018432:	250a      	movs	r5, #10
 8018434:	e787      	b.n	8018346 <rcl_wait_set_init+0x26>
 8018436:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8018438:	e7f2      	b.n	8018420 <rcl_wait_set_init+0x100>
 801843a:	bf00      	nop

0801843c <rcl_wait_set_add_guard_condition>:
 801843c:	b318      	cbz	r0, 8018486 <rcl_wait_set_add_guard_condition+0x4a>
 801843e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018440:	b570      	push	{r4, r5, r6, lr}
 8018442:	4604      	mov	r4, r0
 8018444:	b30b      	cbz	r3, 801848a <rcl_wait_set_add_guard_condition+0x4e>
 8018446:	b319      	cbz	r1, 8018490 <rcl_wait_set_add_guard_condition+0x54>
 8018448:	68dd      	ldr	r5, [r3, #12]
 801844a:	68c0      	ldr	r0, [r0, #12]
 801844c:	4285      	cmp	r5, r0
 801844e:	d217      	bcs.n	8018480 <rcl_wait_set_add_guard_condition+0x44>
 8018450:	68a0      	ldr	r0, [r4, #8]
 8018452:	1c6e      	adds	r6, r5, #1
 8018454:	60de      	str	r6, [r3, #12]
 8018456:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801845a:	b102      	cbz	r2, 801845e <rcl_wait_set_add_guard_condition+0x22>
 801845c:	6015      	str	r5, [r2, #0]
 801845e:	4608      	mov	r0, r1
 8018460:	f003 fac0 	bl	801b9e4 <rcl_guard_condition_get_rmw_handle>
 8018464:	b150      	cbz	r0, 801847c <rcl_wait_set_add_guard_condition+0x40>
 8018466:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018468:	6842      	ldr	r2, [r0, #4]
 801846a:	695b      	ldr	r3, [r3, #20]
 801846c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018470:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018472:	6913      	ldr	r3, [r2, #16]
 8018474:	3301      	adds	r3, #1
 8018476:	2000      	movs	r0, #0
 8018478:	6113      	str	r3, [r2, #16]
 801847a:	bd70      	pop	{r4, r5, r6, pc}
 801847c:	2001      	movs	r0, #1
 801847e:	bd70      	pop	{r4, r5, r6, pc}
 8018480:	f240 3086 	movw	r0, #902	@ 0x386
 8018484:	bd70      	pop	{r4, r5, r6, pc}
 8018486:	200b      	movs	r0, #11
 8018488:	4770      	bx	lr
 801848a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801848e:	bd70      	pop	{r4, r5, r6, pc}
 8018490:	200b      	movs	r0, #11
 8018492:	bd70      	pop	{r4, r5, r6, pc}

08018494 <rcl_wait_set_add_timer>:
 8018494:	b328      	cbz	r0, 80184e2 <rcl_wait_set_add_timer+0x4e>
 8018496:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018498:	b570      	push	{r4, r5, r6, lr}
 801849a:	4604      	mov	r4, r0
 801849c:	b31b      	cbz	r3, 80184e6 <rcl_wait_set_add_timer+0x52>
 801849e:	b329      	cbz	r1, 80184ec <rcl_wait_set_add_timer+0x58>
 80184a0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80184a2:	6965      	ldr	r5, [r4, #20]
 80184a4:	42a8      	cmp	r0, r5
 80184a6:	d219      	bcs.n	80184dc <rcl_wait_set_add_timer+0x48>
 80184a8:	6925      	ldr	r5, [r4, #16]
 80184aa:	1c46      	adds	r6, r0, #1
 80184ac:	641e      	str	r6, [r3, #64]	@ 0x40
 80184ae:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80184b2:	b102      	cbz	r2, 80184b6 <rcl_wait_set_add_timer+0x22>
 80184b4:	6010      	str	r0, [r2, #0]
 80184b6:	4608      	mov	r0, r1
 80184b8:	f7ff fba6 	bl	8017c08 <rcl_timer_get_guard_condition>
 80184bc:	b168      	cbz	r0, 80184da <rcl_wait_set_add_timer+0x46>
 80184be:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80184c0:	68e3      	ldr	r3, [r4, #12]
 80184c2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80184c4:	3b01      	subs	r3, #1
 80184c6:	441d      	add	r5, r3
 80184c8:	f003 fa8c 	bl	801b9e4 <rcl_guard_condition_get_rmw_handle>
 80184cc:	b180      	cbz	r0, 80184f0 <rcl_wait_set_add_timer+0x5c>
 80184ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80184d0:	6842      	ldr	r2, [r0, #4]
 80184d2:	695b      	ldr	r3, [r3, #20]
 80184d4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80184d8:	2000      	movs	r0, #0
 80184da:	bd70      	pop	{r4, r5, r6, pc}
 80184dc:	f240 3086 	movw	r0, #902	@ 0x386
 80184e0:	bd70      	pop	{r4, r5, r6, pc}
 80184e2:	200b      	movs	r0, #11
 80184e4:	4770      	bx	lr
 80184e6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80184ea:	bd70      	pop	{r4, r5, r6, pc}
 80184ec:	200b      	movs	r0, #11
 80184ee:	bd70      	pop	{r4, r5, r6, pc}
 80184f0:	2001      	movs	r0, #1
 80184f2:	bd70      	pop	{r4, r5, r6, pc}

080184f4 <rcl_wait_set_add_client>:
 80184f4:	b318      	cbz	r0, 801853e <rcl_wait_set_add_client+0x4a>
 80184f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80184f8:	b570      	push	{r4, r5, r6, lr}
 80184fa:	4604      	mov	r4, r0
 80184fc:	b30b      	cbz	r3, 8018542 <rcl_wait_set_add_client+0x4e>
 80184fe:	b319      	cbz	r1, 8018548 <rcl_wait_set_add_client+0x54>
 8018500:	699d      	ldr	r5, [r3, #24]
 8018502:	69c0      	ldr	r0, [r0, #28]
 8018504:	4285      	cmp	r5, r0
 8018506:	d217      	bcs.n	8018538 <rcl_wait_set_add_client+0x44>
 8018508:	69a0      	ldr	r0, [r4, #24]
 801850a:	1c6e      	adds	r6, r5, #1
 801850c:	619e      	str	r6, [r3, #24]
 801850e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8018512:	b102      	cbz	r2, 8018516 <rcl_wait_set_add_client+0x22>
 8018514:	6015      	str	r5, [r2, #0]
 8018516:	4608      	mov	r0, r1
 8018518:	f7fe f8ce 	bl	80166b8 <rcl_client_get_rmw_handle>
 801851c:	b150      	cbz	r0, 8018534 <rcl_wait_set_add_client+0x40>
 801851e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018520:	6842      	ldr	r2, [r0, #4]
 8018522:	6a1b      	ldr	r3, [r3, #32]
 8018524:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018528:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801852a:	69d3      	ldr	r3, [r2, #28]
 801852c:	3301      	adds	r3, #1
 801852e:	2000      	movs	r0, #0
 8018530:	61d3      	str	r3, [r2, #28]
 8018532:	bd70      	pop	{r4, r5, r6, pc}
 8018534:	2001      	movs	r0, #1
 8018536:	bd70      	pop	{r4, r5, r6, pc}
 8018538:	f240 3086 	movw	r0, #902	@ 0x386
 801853c:	bd70      	pop	{r4, r5, r6, pc}
 801853e:	200b      	movs	r0, #11
 8018540:	4770      	bx	lr
 8018542:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018546:	bd70      	pop	{r4, r5, r6, pc}
 8018548:	200b      	movs	r0, #11
 801854a:	bd70      	pop	{r4, r5, r6, pc}

0801854c <rcl_wait_set_add_service>:
 801854c:	b318      	cbz	r0, 8018596 <rcl_wait_set_add_service+0x4a>
 801854e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018550:	b570      	push	{r4, r5, r6, lr}
 8018552:	4604      	mov	r4, r0
 8018554:	b30b      	cbz	r3, 801859a <rcl_wait_set_add_service+0x4e>
 8018556:	b319      	cbz	r1, 80185a0 <rcl_wait_set_add_service+0x54>
 8018558:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801855a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801855c:	4285      	cmp	r5, r0
 801855e:	d217      	bcs.n	8018590 <rcl_wait_set_add_service+0x44>
 8018560:	6a20      	ldr	r0, [r4, #32]
 8018562:	1c6e      	adds	r6, r5, #1
 8018564:	625e      	str	r6, [r3, #36]	@ 0x24
 8018566:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801856a:	b102      	cbz	r2, 801856e <rcl_wait_set_add_service+0x22>
 801856c:	6015      	str	r5, [r2, #0]
 801856e:	4608      	mov	r0, r1
 8018570:	f7fe fed4 	bl	801731c <rcl_service_get_rmw_handle>
 8018574:	b150      	cbz	r0, 801858c <rcl_wait_set_add_service+0x40>
 8018576:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018578:	6842      	ldr	r2, [r0, #4]
 801857a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801857c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018580:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018582:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8018584:	3301      	adds	r3, #1
 8018586:	2000      	movs	r0, #0
 8018588:	6293      	str	r3, [r2, #40]	@ 0x28
 801858a:	bd70      	pop	{r4, r5, r6, pc}
 801858c:	2001      	movs	r0, #1
 801858e:	bd70      	pop	{r4, r5, r6, pc}
 8018590:	f240 3086 	movw	r0, #902	@ 0x386
 8018594:	bd70      	pop	{r4, r5, r6, pc}
 8018596:	200b      	movs	r0, #11
 8018598:	4770      	bx	lr
 801859a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801859e:	bd70      	pop	{r4, r5, r6, pc}
 80185a0:	200b      	movs	r0, #11
 80185a2:	bd70      	pop	{r4, r5, r6, pc}
 80185a4:	0000      	movs	r0, r0
	...

080185a8 <rcl_wait>:
 80185a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185ac:	ed2d 8b02 	vpush	{d8}
 80185b0:	b08d      	sub	sp, #52	@ 0x34
 80185b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80185b6:	2800      	cmp	r0, #0
 80185b8:	f000 8143 	beq.w	8018842 <rcl_wait+0x29a>
 80185bc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80185be:	4605      	mov	r5, r0
 80185c0:	2e00      	cmp	r6, #0
 80185c2:	f000 8112 	beq.w	80187ea <rcl_wait+0x242>
 80185c6:	6843      	ldr	r3, [r0, #4]
 80185c8:	b983      	cbnz	r3, 80185ec <rcl_wait+0x44>
 80185ca:	68eb      	ldr	r3, [r5, #12]
 80185cc:	b973      	cbnz	r3, 80185ec <rcl_wait+0x44>
 80185ce:	696b      	ldr	r3, [r5, #20]
 80185d0:	b963      	cbnz	r3, 80185ec <rcl_wait+0x44>
 80185d2:	69eb      	ldr	r3, [r5, #28]
 80185d4:	b953      	cbnz	r3, 80185ec <rcl_wait+0x44>
 80185d6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80185d8:	b943      	cbnz	r3, 80185ec <rcl_wait+0x44>
 80185da:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80185dc:	b933      	cbnz	r3, 80185ec <rcl_wait+0x44>
 80185de:	f240 3085 	movw	r0, #901	@ 0x385
 80185e2:	b00d      	add	sp, #52	@ 0x34
 80185e4:	ecbd 8b02 	vpop	{d8}
 80185e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185ec:	9b04      	ldr	r3, [sp, #16]
 80185ee:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80185f0:	2b01      	cmp	r3, #1
 80185f2:	9b05      	ldr	r3, [sp, #20]
 80185f4:	f173 0300 	sbcs.w	r3, r3, #0
 80185f8:	f2c0 80f0 	blt.w	80187dc <rcl_wait+0x234>
 80185fc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8018600:	4643      	mov	r3, r8
 8018602:	2a00      	cmp	r2, #0
 8018604:	f000 8133 	beq.w	801886e <rcl_wait+0x2c6>
 8018608:	2400      	movs	r4, #0
 801860a:	4613      	mov	r3, r2
 801860c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8018880 <rcl_wait+0x2d8>
 8018610:	46a2      	mov	sl, r4
 8018612:	46a3      	mov	fp, r4
 8018614:	f240 3921 	movw	r9, #801	@ 0x321
 8018618:	4632      	mov	r2, r6
 801861a:	e014      	b.n	8018646 <rcl_wait+0x9e>
 801861c:	2800      	cmp	r0, #0
 801861e:	d1e0      	bne.n	80185e2 <rcl_wait+0x3a>
 8018620:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018624:	4542      	cmp	r2, r8
 8018626:	eb73 0107 	sbcs.w	r1, r3, r7
 801862a:	da03      	bge.n	8018634 <rcl_wait+0x8c>
 801862c:	4690      	mov	r8, r2
 801862e:	461f      	mov	r7, r3
 8018630:	f04f 0b01 	mov.w	fp, #1
 8018634:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8018636:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8018638:	3401      	adds	r4, #1
 801863a:	f14a 0a00 	adc.w	sl, sl, #0
 801863e:	429c      	cmp	r4, r3
 8018640:	f17a 0100 	sbcs.w	r1, sl, #0
 8018644:	d228      	bcs.n	8018698 <rcl_wait+0xf0>
 8018646:	6928      	ldr	r0, [r5, #16]
 8018648:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801864c:	a908      	add	r1, sp, #32
 801864e:	00a6      	lsls	r6, r4, #2
 8018650:	2800      	cmp	r0, #0
 8018652:	d0f1      	beq.n	8018638 <rcl_wait+0x90>
 8018654:	68eb      	ldr	r3, [r5, #12]
 8018656:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801865a:	4423      	add	r3, r4
 801865c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8018660:	f1be 0f00 	cmp.w	lr, #0
 8018664:	d006      	beq.n	8018674 <rcl_wait+0xcc>
 8018666:	6913      	ldr	r3, [r2, #16]
 8018668:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801866c:	3301      	adds	r3, #1
 801866e:	6113      	str	r3, [r2, #16]
 8018670:	692b      	ldr	r3, [r5, #16]
 8018672:	5998      	ldr	r0, [r3, r6]
 8018674:	ed8d 8b08 	vstr	d8, [sp, #32]
 8018678:	f7ff fa94 	bl	8017ba4 <rcl_timer_get_time_until_next_call>
 801867c:	4548      	cmp	r0, r9
 801867e:	d1cd      	bne.n	801861c <rcl_wait+0x74>
 8018680:	692b      	ldr	r3, [r5, #16]
 8018682:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8018684:	2100      	movs	r1, #0
 8018686:	5199      	str	r1, [r3, r6]
 8018688:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801868a:	3401      	adds	r4, #1
 801868c:	f14a 0a00 	adc.w	sl, sl, #0
 8018690:	429c      	cmp	r4, r3
 8018692:	f17a 0100 	sbcs.w	r1, sl, #0
 8018696:	d3d6      	bcc.n	8018646 <rcl_wait+0x9e>
 8018698:	4616      	mov	r6, r2
 801869a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801869e:	4313      	orrs	r3, r2
 80186a0:	46d9      	mov	r9, fp
 80186a2:	f040 80a9 	bne.w	80187f8 <rcl_wait+0x250>
 80186a6:	2300      	movs	r3, #0
 80186a8:	2200      	movs	r2, #0
 80186aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80186ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80186b2:	ab08      	add	r3, sp, #32
 80186b4:	9302      	str	r3, [sp, #8]
 80186b6:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80186b8:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80186bc:	e9cd 3200 	strd	r3, r2, [sp]
 80186c0:	f106 0110 	add.w	r1, r6, #16
 80186c4:	f106 031c 	add.w	r3, r6, #28
 80186c8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80186cc:	1d30      	adds	r0, r6, #4
 80186ce:	f001 fefd 	bl	801a4cc <rmw_wait>
 80186d2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80186d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80186d6:	4680      	mov	r8, r0
 80186d8:	b1ca      	cbz	r2, 801870e <rcl_wait+0x166>
 80186da:	2400      	movs	r4, #0
 80186dc:	4627      	mov	r7, r4
 80186de:	692a      	ldr	r2, [r5, #16]
 80186e0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80186e4:	f10d 011f 	add.w	r1, sp, #31
 80186e8:	00a6      	lsls	r6, r4, #2
 80186ea:	b160      	cbz	r0, 8018706 <rcl_wait+0x15e>
 80186ec:	f88d 701f 	strb.w	r7, [sp, #31]
 80186f0:	f7ff fa1e 	bl	8017b30 <rcl_timer_is_ready>
 80186f4:	2800      	cmp	r0, #0
 80186f6:	f47f af74 	bne.w	80185e2 <rcl_wait+0x3a>
 80186fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80186fe:	b90b      	cbnz	r3, 8018704 <rcl_wait+0x15c>
 8018700:	692a      	ldr	r2, [r5, #16]
 8018702:	5193      	str	r3, [r2, r6]
 8018704:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018706:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018708:	3401      	adds	r4, #1
 801870a:	42a2      	cmp	r2, r4
 801870c:	d8e7      	bhi.n	80186de <rcl_wait+0x136>
 801870e:	f038 0002 	bics.w	r0, r8, #2
 8018712:	f040 8090 	bne.w	8018836 <rcl_wait+0x28e>
 8018716:	686e      	ldr	r6, [r5, #4]
 8018718:	4602      	mov	r2, r0
 801871a:	b91e      	cbnz	r6, 8018724 <rcl_wait+0x17c>
 801871c:	e00d      	b.n	801873a <rcl_wait+0x192>
 801871e:	3201      	adds	r2, #1
 8018720:	42b2      	cmp	r2, r6
 8018722:	d00a      	beq.n	801873a <rcl_wait+0x192>
 8018724:	6899      	ldr	r1, [r3, #8]
 8018726:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801872a:	2900      	cmp	r1, #0
 801872c:	d1f7      	bne.n	801871e <rcl_wait+0x176>
 801872e:	682c      	ldr	r4, [r5, #0]
 8018730:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8018734:	3201      	adds	r2, #1
 8018736:	42b2      	cmp	r2, r6
 8018738:	d1f4      	bne.n	8018724 <rcl_wait+0x17c>
 801873a:	68ee      	ldr	r6, [r5, #12]
 801873c:	2200      	movs	r2, #0
 801873e:	b91e      	cbnz	r6, 8018748 <rcl_wait+0x1a0>
 8018740:	e00d      	b.n	801875e <rcl_wait+0x1b6>
 8018742:	3201      	adds	r2, #1
 8018744:	42b2      	cmp	r2, r6
 8018746:	d00a      	beq.n	801875e <rcl_wait+0x1b6>
 8018748:	6959      	ldr	r1, [r3, #20]
 801874a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801874e:	2900      	cmp	r1, #0
 8018750:	d1f7      	bne.n	8018742 <rcl_wait+0x19a>
 8018752:	68ac      	ldr	r4, [r5, #8]
 8018754:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8018758:	3201      	adds	r2, #1
 801875a:	42b2      	cmp	r2, r6
 801875c:	d1f4      	bne.n	8018748 <rcl_wait+0x1a0>
 801875e:	69ee      	ldr	r6, [r5, #28]
 8018760:	2200      	movs	r2, #0
 8018762:	b91e      	cbnz	r6, 801876c <rcl_wait+0x1c4>
 8018764:	e00d      	b.n	8018782 <rcl_wait+0x1da>
 8018766:	3201      	adds	r2, #1
 8018768:	42b2      	cmp	r2, r6
 801876a:	d00a      	beq.n	8018782 <rcl_wait+0x1da>
 801876c:	6a19      	ldr	r1, [r3, #32]
 801876e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018772:	2900      	cmp	r1, #0
 8018774:	d1f7      	bne.n	8018766 <rcl_wait+0x1be>
 8018776:	69ac      	ldr	r4, [r5, #24]
 8018778:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801877c:	3201      	adds	r2, #1
 801877e:	42b2      	cmp	r2, r6
 8018780:	d1f4      	bne.n	801876c <rcl_wait+0x1c4>
 8018782:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8018784:	2200      	movs	r2, #0
 8018786:	b91e      	cbnz	r6, 8018790 <rcl_wait+0x1e8>
 8018788:	e00d      	b.n	80187a6 <rcl_wait+0x1fe>
 801878a:	3201      	adds	r2, #1
 801878c:	4296      	cmp	r6, r2
 801878e:	d00a      	beq.n	80187a6 <rcl_wait+0x1fe>
 8018790:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8018792:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018796:	2900      	cmp	r1, #0
 8018798:	d1f7      	bne.n	801878a <rcl_wait+0x1e2>
 801879a:	6a2c      	ldr	r4, [r5, #32]
 801879c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80187a0:	3201      	adds	r2, #1
 80187a2:	4296      	cmp	r6, r2
 80187a4:	d1f4      	bne.n	8018790 <rcl_wait+0x1e8>
 80187a6:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80187a8:	2200      	movs	r2, #0
 80187aa:	b91e      	cbnz	r6, 80187b4 <rcl_wait+0x20c>
 80187ac:	e00d      	b.n	80187ca <rcl_wait+0x222>
 80187ae:	3201      	adds	r2, #1
 80187b0:	42b2      	cmp	r2, r6
 80187b2:	d00a      	beq.n	80187ca <rcl_wait+0x222>
 80187b4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80187b6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80187ba:	2900      	cmp	r1, #0
 80187bc:	d1f7      	bne.n	80187ae <rcl_wait+0x206>
 80187be:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80187c0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80187c4:	3201      	adds	r2, #1
 80187c6:	42b2      	cmp	r2, r6
 80187c8:	d1f4      	bne.n	80187b4 <rcl_wait+0x20c>
 80187ca:	f1b8 0f02 	cmp.w	r8, #2
 80187ce:	f47f af08 	bne.w	80185e2 <rcl_wait+0x3a>
 80187d2:	464b      	mov	r3, r9
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	bf08      	it	eq
 80187d8:	2002      	moveq	r0, #2
 80187da:	e702      	b.n	80185e2 <rcl_wait+0x3a>
 80187dc:	2a00      	cmp	r2, #0
 80187de:	d03a      	beq.n	8018856 <rcl_wait+0x2ae>
 80187e0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80187e4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80187e8:	e70e      	b.n	8018608 <rcl_wait+0x60>
 80187ea:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80187ee:	b00d      	add	sp, #52	@ 0x34
 80187f0:	ecbd 8b02 	vpop	{d8}
 80187f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187f8:	9b04      	ldr	r3, [sp, #16]
 80187fa:	2b01      	cmp	r3, #1
 80187fc:	9b05      	ldr	r3, [sp, #20]
 80187fe:	f173 0300 	sbcs.w	r3, r3, #0
 8018802:	db24      	blt.n	801884e <rcl_wait+0x2a6>
 8018804:	2f00      	cmp	r7, #0
 8018806:	bfbc      	itt	lt
 8018808:	f04f 0800 	movlt.w	r8, #0
 801880c:	4647      	movlt	r7, r8
 801880e:	a31e      	add	r3, pc, #120	@ (adr r3, 8018888 <rcl_wait+0x2e0>)
 8018810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018814:	4640      	mov	r0, r8
 8018816:	4639      	mov	r1, r7
 8018818:	f7e8 f9d6 	bl	8000bc8 <__aeabi_ldivmod>
 801881c:	a31a      	add	r3, pc, #104	@ (adr r3, 8018888 <rcl_wait+0x2e0>)
 801881e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018822:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018826:	4640      	mov	r0, r8
 8018828:	4639      	mov	r1, r7
 801882a:	f7e8 f9cd 	bl	8000bc8 <__aeabi_ldivmod>
 801882e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8018832:	ab08      	add	r3, sp, #32
 8018834:	e73e      	b.n	80186b4 <rcl_wait+0x10c>
 8018836:	2001      	movs	r0, #1
 8018838:	b00d      	add	sp, #52	@ 0x34
 801883a:	ecbd 8b02 	vpop	{d8}
 801883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018842:	200b      	movs	r0, #11
 8018844:	b00d      	add	sp, #52	@ 0x34
 8018846:	ecbd 8b02 	vpop	{d8}
 801884a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801884e:	465b      	mov	r3, fp
 8018850:	2b00      	cmp	r3, #0
 8018852:	d1d7      	bne.n	8018804 <rcl_wait+0x25c>
 8018854:	e72e      	b.n	80186b4 <rcl_wait+0x10c>
 8018856:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801885a:	430b      	orrs	r3, r1
 801885c:	bf08      	it	eq
 801885e:	4691      	moveq	r9, r2
 8018860:	f43f af21 	beq.w	80186a6 <rcl_wait+0xfe>
 8018864:	9b04      	ldr	r3, [sp, #16]
 8018866:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801886a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801886e:	2b01      	cmp	r3, #1
 8018870:	9b05      	ldr	r3, [sp, #20]
 8018872:	f173 0300 	sbcs.w	r3, r3, #0
 8018876:	f04f 0300 	mov.w	r3, #0
 801887a:	4699      	mov	r9, r3
 801887c:	dac2      	bge.n	8018804 <rcl_wait+0x25c>
 801887e:	e719      	b.n	80186b4 <rcl_wait+0x10c>
 8018880:	ffffffff 	.word	0xffffffff
 8018884:	7fffffff 	.word	0x7fffffff
 8018888:	3b9aca00 	.word	0x3b9aca00
 801888c:	00000000 	.word	0x00000000

08018890 <rcl_action_take_goal_response>:
 8018890:	2800      	cmp	r0, #0
 8018892:	d039      	beq.n	8018908 <rcl_action_take_goal_response+0x78>
 8018894:	b570      	push	{r4, r5, r6, lr}
 8018896:	4604      	mov	r4, r0
 8018898:	6800      	ldr	r0, [r0, #0]
 801889a:	b380      	cbz	r0, 80188fe <rcl_action_take_goal_response+0x6e>
 801889c:	460d      	mov	r5, r1
 801889e:	4616      	mov	r6, r2
 80188a0:	f7fd ff8e 	bl	80167c0 <rcl_client_is_valid>
 80188a4:	b330      	cbz	r0, 80188f4 <rcl_action_take_goal_response+0x64>
 80188a6:	6820      	ldr	r0, [r4, #0]
 80188a8:	3004      	adds	r0, #4
 80188aa:	f7fd ff89 	bl	80167c0 <rcl_client_is_valid>
 80188ae:	b308      	cbz	r0, 80188f4 <rcl_action_take_goal_response+0x64>
 80188b0:	6820      	ldr	r0, [r4, #0]
 80188b2:	3008      	adds	r0, #8
 80188b4:	f7fd ff84 	bl	80167c0 <rcl_client_is_valid>
 80188b8:	b1e0      	cbz	r0, 80188f4 <rcl_action_take_goal_response+0x64>
 80188ba:	6820      	ldr	r0, [r4, #0]
 80188bc:	300c      	adds	r0, #12
 80188be:	f7fe fdf3 	bl	80174a8 <rcl_subscription_is_valid>
 80188c2:	b1b8      	cbz	r0, 80188f4 <rcl_action_take_goal_response+0x64>
 80188c4:	6820      	ldr	r0, [r4, #0]
 80188c6:	3010      	adds	r0, #16
 80188c8:	f7fe fdee 	bl	80174a8 <rcl_subscription_is_valid>
 80188cc:	b190      	cbz	r0, 80188f4 <rcl_action_take_goal_response+0x64>
 80188ce:	b1cd      	cbz	r5, 8018904 <rcl_action_take_goal_response+0x74>
 80188d0:	b1c6      	cbz	r6, 8018904 <rcl_action_take_goal_response+0x74>
 80188d2:	6820      	ldr	r0, [r4, #0]
 80188d4:	4632      	mov	r2, r6
 80188d6:	4629      	mov	r1, r5
 80188d8:	f7fd ff2a 	bl	8016730 <rcl_take_response>
 80188dc:	b148      	cbz	r0, 80188f2 <rcl_action_take_goal_response+0x62>
 80188de:	280a      	cmp	r0, #10
 80188e0:	d007      	beq.n	80188f2 <rcl_action_take_goal_response+0x62>
 80188e2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80188e6:	f640 0337 	movw	r3, #2103	@ 0x837
 80188ea:	4290      	cmp	r0, r2
 80188ec:	bf0c      	ite	eq
 80188ee:	4618      	moveq	r0, r3
 80188f0:	2001      	movne	r0, #1
 80188f2:	bd70      	pop	{r4, r5, r6, pc}
 80188f4:	f7f7 ff74 	bl	80107e0 <rcutils_reset_error>
 80188f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80188fc:	bd70      	pop	{r4, r5, r6, pc}
 80188fe:	f640 0036 	movw	r0, #2102	@ 0x836
 8018902:	bd70      	pop	{r4, r5, r6, pc}
 8018904:	200b      	movs	r0, #11
 8018906:	bd70      	pop	{r4, r5, r6, pc}
 8018908:	f640 0036 	movw	r0, #2102	@ 0x836
 801890c:	4770      	bx	lr
 801890e:	bf00      	nop

08018910 <rcl_action_send_result_request>:
 8018910:	b390      	cbz	r0, 8018978 <rcl_action_send_result_request+0x68>
 8018912:	b570      	push	{r4, r5, r6, lr}
 8018914:	4604      	mov	r4, r0
 8018916:	6800      	ldr	r0, [r0, #0]
 8018918:	b348      	cbz	r0, 801896e <rcl_action_send_result_request+0x5e>
 801891a:	460d      	mov	r5, r1
 801891c:	4616      	mov	r6, r2
 801891e:	f7fd ff4f 	bl	80167c0 <rcl_client_is_valid>
 8018922:	b1f8      	cbz	r0, 8018964 <rcl_action_send_result_request+0x54>
 8018924:	6820      	ldr	r0, [r4, #0]
 8018926:	3004      	adds	r0, #4
 8018928:	f7fd ff4a 	bl	80167c0 <rcl_client_is_valid>
 801892c:	b1d0      	cbz	r0, 8018964 <rcl_action_send_result_request+0x54>
 801892e:	6820      	ldr	r0, [r4, #0]
 8018930:	3008      	adds	r0, #8
 8018932:	f7fd ff45 	bl	80167c0 <rcl_client_is_valid>
 8018936:	b1a8      	cbz	r0, 8018964 <rcl_action_send_result_request+0x54>
 8018938:	6820      	ldr	r0, [r4, #0]
 801893a:	300c      	adds	r0, #12
 801893c:	f7fe fdb4 	bl	80174a8 <rcl_subscription_is_valid>
 8018940:	b180      	cbz	r0, 8018964 <rcl_action_send_result_request+0x54>
 8018942:	6820      	ldr	r0, [r4, #0]
 8018944:	3010      	adds	r0, #16
 8018946:	f7fe fdaf 	bl	80174a8 <rcl_subscription_is_valid>
 801894a:	b158      	cbz	r0, 8018964 <rcl_action_send_result_request+0x54>
 801894c:	b195      	cbz	r5, 8018974 <rcl_action_send_result_request+0x64>
 801894e:	b18e      	cbz	r6, 8018974 <rcl_action_send_result_request+0x64>
 8018950:	6820      	ldr	r0, [r4, #0]
 8018952:	4632      	mov	r2, r6
 8018954:	4629      	mov	r1, r5
 8018956:	3008      	adds	r0, #8
 8018958:	f7fd feb4 	bl	80166c4 <rcl_send_request>
 801895c:	3800      	subs	r0, #0
 801895e:	bf18      	it	ne
 8018960:	2001      	movne	r0, #1
 8018962:	bd70      	pop	{r4, r5, r6, pc}
 8018964:	f7f7 ff3c 	bl	80107e0 <rcutils_reset_error>
 8018968:	f640 0036 	movw	r0, #2102	@ 0x836
 801896c:	bd70      	pop	{r4, r5, r6, pc}
 801896e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018972:	bd70      	pop	{r4, r5, r6, pc}
 8018974:	200b      	movs	r0, #11
 8018976:	bd70      	pop	{r4, r5, r6, pc}
 8018978:	f640 0036 	movw	r0, #2102	@ 0x836
 801897c:	4770      	bx	lr
 801897e:	bf00      	nop

08018980 <rcl_action_take_result_response>:
 8018980:	2800      	cmp	r0, #0
 8018982:	d03a      	beq.n	80189fa <rcl_action_take_result_response+0x7a>
 8018984:	b570      	push	{r4, r5, r6, lr}
 8018986:	4604      	mov	r4, r0
 8018988:	6800      	ldr	r0, [r0, #0]
 801898a:	b388      	cbz	r0, 80189f0 <rcl_action_take_result_response+0x70>
 801898c:	460d      	mov	r5, r1
 801898e:	4616      	mov	r6, r2
 8018990:	f7fd ff16 	bl	80167c0 <rcl_client_is_valid>
 8018994:	b338      	cbz	r0, 80189e6 <rcl_action_take_result_response+0x66>
 8018996:	6820      	ldr	r0, [r4, #0]
 8018998:	3004      	adds	r0, #4
 801899a:	f7fd ff11 	bl	80167c0 <rcl_client_is_valid>
 801899e:	b310      	cbz	r0, 80189e6 <rcl_action_take_result_response+0x66>
 80189a0:	6820      	ldr	r0, [r4, #0]
 80189a2:	3008      	adds	r0, #8
 80189a4:	f7fd ff0c 	bl	80167c0 <rcl_client_is_valid>
 80189a8:	b1e8      	cbz	r0, 80189e6 <rcl_action_take_result_response+0x66>
 80189aa:	6820      	ldr	r0, [r4, #0]
 80189ac:	300c      	adds	r0, #12
 80189ae:	f7fe fd7b 	bl	80174a8 <rcl_subscription_is_valid>
 80189b2:	b1c0      	cbz	r0, 80189e6 <rcl_action_take_result_response+0x66>
 80189b4:	6820      	ldr	r0, [r4, #0]
 80189b6:	3010      	adds	r0, #16
 80189b8:	f7fe fd76 	bl	80174a8 <rcl_subscription_is_valid>
 80189bc:	b198      	cbz	r0, 80189e6 <rcl_action_take_result_response+0x66>
 80189be:	b1d5      	cbz	r5, 80189f6 <rcl_action_take_result_response+0x76>
 80189c0:	b1ce      	cbz	r6, 80189f6 <rcl_action_take_result_response+0x76>
 80189c2:	6820      	ldr	r0, [r4, #0]
 80189c4:	4632      	mov	r2, r6
 80189c6:	4629      	mov	r1, r5
 80189c8:	3008      	adds	r0, #8
 80189ca:	f7fd feb1 	bl	8016730 <rcl_take_response>
 80189ce:	b148      	cbz	r0, 80189e4 <rcl_action_take_result_response+0x64>
 80189d0:	280a      	cmp	r0, #10
 80189d2:	d007      	beq.n	80189e4 <rcl_action_take_result_response+0x64>
 80189d4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80189d8:	f640 0337 	movw	r3, #2103	@ 0x837
 80189dc:	4290      	cmp	r0, r2
 80189de:	bf0c      	ite	eq
 80189e0:	4618      	moveq	r0, r3
 80189e2:	2001      	movne	r0, #1
 80189e4:	bd70      	pop	{r4, r5, r6, pc}
 80189e6:	f7f7 fefb 	bl	80107e0 <rcutils_reset_error>
 80189ea:	f640 0036 	movw	r0, #2102	@ 0x836
 80189ee:	bd70      	pop	{r4, r5, r6, pc}
 80189f0:	f640 0036 	movw	r0, #2102	@ 0x836
 80189f4:	bd70      	pop	{r4, r5, r6, pc}
 80189f6:	200b      	movs	r0, #11
 80189f8:	bd70      	pop	{r4, r5, r6, pc}
 80189fa:	f640 0036 	movw	r0, #2102	@ 0x836
 80189fe:	4770      	bx	lr

08018a00 <rcl_action_take_cancel_response>:
 8018a00:	2800      	cmp	r0, #0
 8018a02:	d03a      	beq.n	8018a7a <rcl_action_take_cancel_response+0x7a>
 8018a04:	b570      	push	{r4, r5, r6, lr}
 8018a06:	4604      	mov	r4, r0
 8018a08:	6800      	ldr	r0, [r0, #0]
 8018a0a:	b388      	cbz	r0, 8018a70 <rcl_action_take_cancel_response+0x70>
 8018a0c:	460d      	mov	r5, r1
 8018a0e:	4616      	mov	r6, r2
 8018a10:	f7fd fed6 	bl	80167c0 <rcl_client_is_valid>
 8018a14:	b338      	cbz	r0, 8018a66 <rcl_action_take_cancel_response+0x66>
 8018a16:	6820      	ldr	r0, [r4, #0]
 8018a18:	3004      	adds	r0, #4
 8018a1a:	f7fd fed1 	bl	80167c0 <rcl_client_is_valid>
 8018a1e:	b310      	cbz	r0, 8018a66 <rcl_action_take_cancel_response+0x66>
 8018a20:	6820      	ldr	r0, [r4, #0]
 8018a22:	3008      	adds	r0, #8
 8018a24:	f7fd fecc 	bl	80167c0 <rcl_client_is_valid>
 8018a28:	b1e8      	cbz	r0, 8018a66 <rcl_action_take_cancel_response+0x66>
 8018a2a:	6820      	ldr	r0, [r4, #0]
 8018a2c:	300c      	adds	r0, #12
 8018a2e:	f7fe fd3b 	bl	80174a8 <rcl_subscription_is_valid>
 8018a32:	b1c0      	cbz	r0, 8018a66 <rcl_action_take_cancel_response+0x66>
 8018a34:	6820      	ldr	r0, [r4, #0]
 8018a36:	3010      	adds	r0, #16
 8018a38:	f7fe fd36 	bl	80174a8 <rcl_subscription_is_valid>
 8018a3c:	b198      	cbz	r0, 8018a66 <rcl_action_take_cancel_response+0x66>
 8018a3e:	b1d5      	cbz	r5, 8018a76 <rcl_action_take_cancel_response+0x76>
 8018a40:	b1ce      	cbz	r6, 8018a76 <rcl_action_take_cancel_response+0x76>
 8018a42:	6820      	ldr	r0, [r4, #0]
 8018a44:	4632      	mov	r2, r6
 8018a46:	4629      	mov	r1, r5
 8018a48:	3004      	adds	r0, #4
 8018a4a:	f7fd fe71 	bl	8016730 <rcl_take_response>
 8018a4e:	b148      	cbz	r0, 8018a64 <rcl_action_take_cancel_response+0x64>
 8018a50:	280a      	cmp	r0, #10
 8018a52:	d007      	beq.n	8018a64 <rcl_action_take_cancel_response+0x64>
 8018a54:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018a58:	f640 0337 	movw	r3, #2103	@ 0x837
 8018a5c:	4290      	cmp	r0, r2
 8018a5e:	bf0c      	ite	eq
 8018a60:	4618      	moveq	r0, r3
 8018a62:	2001      	movne	r0, #1
 8018a64:	bd70      	pop	{r4, r5, r6, pc}
 8018a66:	f7f7 febb 	bl	80107e0 <rcutils_reset_error>
 8018a6a:	f640 0036 	movw	r0, #2102	@ 0x836
 8018a6e:	bd70      	pop	{r4, r5, r6, pc}
 8018a70:	f640 0036 	movw	r0, #2102	@ 0x836
 8018a74:	bd70      	pop	{r4, r5, r6, pc}
 8018a76:	200b      	movs	r0, #11
 8018a78:	bd70      	pop	{r4, r5, r6, pc}
 8018a7a:	f640 0036 	movw	r0, #2102	@ 0x836
 8018a7e:	4770      	bx	lr

08018a80 <rcl_action_take_feedback>:
 8018a80:	2800      	cmp	r0, #0
 8018a82:	d038      	beq.n	8018af6 <rcl_action_take_feedback+0x76>
 8018a84:	b530      	push	{r4, r5, lr}
 8018a86:	4604      	mov	r4, r0
 8018a88:	6800      	ldr	r0, [r0, #0]
 8018a8a:	b091      	sub	sp, #68	@ 0x44
 8018a8c:	b378      	cbz	r0, 8018aee <rcl_action_take_feedback+0x6e>
 8018a8e:	460d      	mov	r5, r1
 8018a90:	f7fd fe96 	bl	80167c0 <rcl_client_is_valid>
 8018a94:	b328      	cbz	r0, 8018ae2 <rcl_action_take_feedback+0x62>
 8018a96:	6820      	ldr	r0, [r4, #0]
 8018a98:	3004      	adds	r0, #4
 8018a9a:	f7fd fe91 	bl	80167c0 <rcl_client_is_valid>
 8018a9e:	b300      	cbz	r0, 8018ae2 <rcl_action_take_feedback+0x62>
 8018aa0:	6820      	ldr	r0, [r4, #0]
 8018aa2:	3008      	adds	r0, #8
 8018aa4:	f7fd fe8c 	bl	80167c0 <rcl_client_is_valid>
 8018aa8:	b1d8      	cbz	r0, 8018ae2 <rcl_action_take_feedback+0x62>
 8018aaa:	6820      	ldr	r0, [r4, #0]
 8018aac:	300c      	adds	r0, #12
 8018aae:	f7fe fcfb 	bl	80174a8 <rcl_subscription_is_valid>
 8018ab2:	b1b0      	cbz	r0, 8018ae2 <rcl_action_take_feedback+0x62>
 8018ab4:	6820      	ldr	r0, [r4, #0]
 8018ab6:	3010      	adds	r0, #16
 8018ab8:	f7fe fcf6 	bl	80174a8 <rcl_subscription_is_valid>
 8018abc:	b188      	cbz	r0, 8018ae2 <rcl_action_take_feedback+0x62>
 8018abe:	b1ed      	cbz	r5, 8018afc <rcl_action_take_feedback+0x7c>
 8018ac0:	6820      	ldr	r0, [r4, #0]
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	466a      	mov	r2, sp
 8018ac6:	4629      	mov	r1, r5
 8018ac8:	300c      	adds	r0, #12
 8018aca:	f7fe fc8f 	bl	80173ec <rcl_take>
 8018ace:	b160      	cbz	r0, 8018aea <rcl_action_take_feedback+0x6a>
 8018ad0:	f240 1391 	movw	r3, #401	@ 0x191
 8018ad4:	4298      	cmp	r0, r3
 8018ad6:	d014      	beq.n	8018b02 <rcl_action_take_feedback+0x82>
 8018ad8:	280a      	cmp	r0, #10
 8018ada:	bf18      	it	ne
 8018adc:	2001      	movne	r0, #1
 8018ade:	b011      	add	sp, #68	@ 0x44
 8018ae0:	bd30      	pop	{r4, r5, pc}
 8018ae2:	f7f7 fe7d 	bl	80107e0 <rcutils_reset_error>
 8018ae6:	f640 0036 	movw	r0, #2102	@ 0x836
 8018aea:	b011      	add	sp, #68	@ 0x44
 8018aec:	bd30      	pop	{r4, r5, pc}
 8018aee:	f640 0036 	movw	r0, #2102	@ 0x836
 8018af2:	b011      	add	sp, #68	@ 0x44
 8018af4:	bd30      	pop	{r4, r5, pc}
 8018af6:	f640 0036 	movw	r0, #2102	@ 0x836
 8018afa:	4770      	bx	lr
 8018afc:	200b      	movs	r0, #11
 8018afe:	b011      	add	sp, #68	@ 0x44
 8018b00:	bd30      	pop	{r4, r5, pc}
 8018b02:	f640 0037 	movw	r0, #2103	@ 0x837
 8018b06:	e7f0      	b.n	8018aea <rcl_action_take_feedback+0x6a>

08018b08 <rcl_action_wait_set_add_action_client>:
 8018b08:	2800      	cmp	r0, #0
 8018b0a:	d048      	beq.n	8018b9e <rcl_action_wait_set_add_action_client+0x96>
 8018b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b0e:	460c      	mov	r4, r1
 8018b10:	2900      	cmp	r1, #0
 8018b12:	d03c      	beq.n	8018b8e <rcl_action_wait_set_add_action_client+0x86>
 8018b14:	4605      	mov	r5, r0
 8018b16:	6808      	ldr	r0, [r1, #0]
 8018b18:	2800      	cmp	r0, #0
 8018b1a:	d038      	beq.n	8018b8e <rcl_action_wait_set_add_action_client+0x86>
 8018b1c:	4617      	mov	r7, r2
 8018b1e:	461e      	mov	r6, r3
 8018b20:	f7fd fe4e 	bl	80167c0 <rcl_client_is_valid>
 8018b24:	b3b0      	cbz	r0, 8018b94 <rcl_action_wait_set_add_action_client+0x8c>
 8018b26:	6820      	ldr	r0, [r4, #0]
 8018b28:	3004      	adds	r0, #4
 8018b2a:	f7fd fe49 	bl	80167c0 <rcl_client_is_valid>
 8018b2e:	b388      	cbz	r0, 8018b94 <rcl_action_wait_set_add_action_client+0x8c>
 8018b30:	6820      	ldr	r0, [r4, #0]
 8018b32:	3008      	adds	r0, #8
 8018b34:	f7fd fe44 	bl	80167c0 <rcl_client_is_valid>
 8018b38:	b360      	cbz	r0, 8018b94 <rcl_action_wait_set_add_action_client+0x8c>
 8018b3a:	6820      	ldr	r0, [r4, #0]
 8018b3c:	300c      	adds	r0, #12
 8018b3e:	f7fe fcb3 	bl	80174a8 <rcl_subscription_is_valid>
 8018b42:	b338      	cbz	r0, 8018b94 <rcl_action_wait_set_add_action_client+0x8c>
 8018b44:	6820      	ldr	r0, [r4, #0]
 8018b46:	3010      	adds	r0, #16
 8018b48:	f7fe fcae 	bl	80174a8 <rcl_subscription_is_valid>
 8018b4c:	b310      	cbz	r0, 8018b94 <rcl_action_wait_set_add_action_client+0x8c>
 8018b4e:	6821      	ldr	r1, [r4, #0]
 8018b50:	4628      	mov	r0, r5
 8018b52:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8018b56:	f7ff fccd 	bl	80184f4 <rcl_wait_set_add_client>
 8018b5a:	b9b8      	cbnz	r0, 8018b8c <rcl_action_wait_set_add_action_client+0x84>
 8018b5c:	6821      	ldr	r1, [r4, #0]
 8018b5e:	4628      	mov	r0, r5
 8018b60:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8018b64:	3104      	adds	r1, #4
 8018b66:	f7ff fcc5 	bl	80184f4 <rcl_wait_set_add_client>
 8018b6a:	b978      	cbnz	r0, 8018b8c <rcl_action_wait_set_add_action_client+0x84>
 8018b6c:	6821      	ldr	r1, [r4, #0]
 8018b6e:	4628      	mov	r0, r5
 8018b70:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8018b74:	3108      	adds	r1, #8
 8018b76:	f7ff fcbd 	bl	80184f4 <rcl_wait_set_add_client>
 8018b7a:	b938      	cbnz	r0, 8018b8c <rcl_action_wait_set_add_action_client+0x84>
 8018b7c:	6821      	ldr	r1, [r4, #0]
 8018b7e:	4628      	mov	r0, r5
 8018b80:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8018b84:	310c      	adds	r1, #12
 8018b86:	f7ff f96d 	bl	8017e64 <rcl_wait_set_add_subscription>
 8018b8a:	b158      	cbz	r0, 8018ba4 <rcl_action_wait_set_add_action_client+0x9c>
 8018b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b8e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b94:	f7f7 fe24 	bl	80107e0 <rcutils_reset_error>
 8018b98:	f640 0036 	movw	r0, #2102	@ 0x836
 8018b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b9e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018ba2:	4770      	bx	lr
 8018ba4:	6821      	ldr	r1, [r4, #0]
 8018ba6:	4628      	mov	r0, r5
 8018ba8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8018bac:	3110      	adds	r1, #16
 8018bae:	f7ff f959 	bl	8017e64 <rcl_wait_set_add_subscription>
 8018bb2:	2800      	cmp	r0, #0
 8018bb4:	d1ea      	bne.n	8018b8c <rcl_action_wait_set_add_action_client+0x84>
 8018bb6:	b11f      	cbz	r7, 8018bc0 <rcl_action_wait_set_add_action_client+0xb8>
 8018bb8:	6823      	ldr	r3, [r4, #0]
 8018bba:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8018bbe:	603b      	str	r3, [r7, #0]
 8018bc0:	2e00      	cmp	r6, #0
 8018bc2:	d0e3      	beq.n	8018b8c <rcl_action_wait_set_add_action_client+0x84>
 8018bc4:	6823      	ldr	r3, [r4, #0]
 8018bc6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8018bca:	6033      	str	r3, [r6, #0]
 8018bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018bce:	bf00      	nop

08018bd0 <rcl_action_client_wait_set_get_entities_ready>:
 8018bd0:	2800      	cmp	r0, #0
 8018bd2:	f000 808d 	beq.w	8018cf0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8018bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bda:	460c      	mov	r4, r1
 8018bdc:	2900      	cmp	r1, #0
 8018bde:	d077      	beq.n	8018cd0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8018be0:	4605      	mov	r5, r0
 8018be2:	6808      	ldr	r0, [r1, #0]
 8018be4:	2800      	cmp	r0, #0
 8018be6:	d073      	beq.n	8018cd0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8018be8:	4616      	mov	r6, r2
 8018bea:	461f      	mov	r7, r3
 8018bec:	f7fd fde8 	bl	80167c0 <rcl_client_is_valid>
 8018bf0:	2800      	cmp	r0, #0
 8018bf2:	d071      	beq.n	8018cd8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018bf4:	6820      	ldr	r0, [r4, #0]
 8018bf6:	3004      	adds	r0, #4
 8018bf8:	f7fd fde2 	bl	80167c0 <rcl_client_is_valid>
 8018bfc:	2800      	cmp	r0, #0
 8018bfe:	d06b      	beq.n	8018cd8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018c00:	6820      	ldr	r0, [r4, #0]
 8018c02:	3008      	adds	r0, #8
 8018c04:	f7fd fddc 	bl	80167c0 <rcl_client_is_valid>
 8018c08:	2800      	cmp	r0, #0
 8018c0a:	d065      	beq.n	8018cd8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018c0c:	6820      	ldr	r0, [r4, #0]
 8018c0e:	300c      	adds	r0, #12
 8018c10:	f7fe fc4a 	bl	80174a8 <rcl_subscription_is_valid>
 8018c14:	2800      	cmp	r0, #0
 8018c16:	d05f      	beq.n	8018cd8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018c18:	6820      	ldr	r0, [r4, #0]
 8018c1a:	3010      	adds	r0, #16
 8018c1c:	f7fe fc44 	bl	80174a8 <rcl_subscription_is_valid>
 8018c20:	2800      	cmp	r0, #0
 8018c22:	d059      	beq.n	8018cd8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018c24:	2e00      	cmp	r6, #0
 8018c26:	d060      	beq.n	8018cea <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018c28:	2f00      	cmp	r7, #0
 8018c2a:	d05e      	beq.n	8018cea <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018c2c:	9b06      	ldr	r3, [sp, #24]
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d05b      	beq.n	8018cea <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018c32:	9b07      	ldr	r3, [sp, #28]
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d058      	beq.n	8018cea <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018c38:	9b08      	ldr	r3, [sp, #32]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d055      	beq.n	8018cea <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018c3e:	6823      	ldr	r3, [r4, #0]
 8018c40:	686a      	ldr	r2, [r5, #4]
 8018c42:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8018c46:	428a      	cmp	r2, r1
 8018c48:	d94c      	bls.n	8018ce4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018c4a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8018c4e:	4282      	cmp	r2, r0
 8018c50:	d948      	bls.n	8018ce4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018c52:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8018c56:	69ea      	ldr	r2, [r5, #28]
 8018c58:	42a2      	cmp	r2, r4
 8018c5a:	d943      	bls.n	8018ce4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018c5c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8018c60:	4562      	cmp	r2, ip
 8018c62:	d93f      	bls.n	8018ce4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018c64:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8018c68:	4572      	cmp	r2, lr
 8018c6a:	d93b      	bls.n	8018ce4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018c6c:	69aa      	ldr	r2, [r5, #24]
 8018c6e:	682d      	ldr	r5, [r5, #0]
 8018c70:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8018c74:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8018c78:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8018c7c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8018c80:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8018c84:	f103 0c0c 	add.w	ip, r3, #12
 8018c88:	eba5 050c 	sub.w	r5, r5, ip
 8018c8c:	fab5 f585 	clz	r5, r5
 8018c90:	096d      	lsrs	r5, r5, #5
 8018c92:	7035      	strb	r5, [r6, #0]
 8018c94:	f103 0510 	add.w	r5, r3, #16
 8018c98:	1b64      	subs	r4, r4, r5
 8018c9a:	fab4 f484 	clz	r4, r4
 8018c9e:	0964      	lsrs	r4, r4, #5
 8018ca0:	703c      	strb	r4, [r7, #0]
 8018ca2:	eba3 0008 	sub.w	r0, r3, r8
 8018ca6:	1d1c      	adds	r4, r3, #4
 8018ca8:	3308      	adds	r3, #8
 8018caa:	1ad3      	subs	r3, r2, r3
 8018cac:	fab0 f080 	clz	r0, r0
 8018cb0:	9a06      	ldr	r2, [sp, #24]
 8018cb2:	0940      	lsrs	r0, r0, #5
 8018cb4:	1b09      	subs	r1, r1, r4
 8018cb6:	7010      	strb	r0, [r2, #0]
 8018cb8:	fab1 f181 	clz	r1, r1
 8018cbc:	9a07      	ldr	r2, [sp, #28]
 8018cbe:	0949      	lsrs	r1, r1, #5
 8018cc0:	7011      	strb	r1, [r2, #0]
 8018cc2:	fab3 f383 	clz	r3, r3
 8018cc6:	9a08      	ldr	r2, [sp, #32]
 8018cc8:	095b      	lsrs	r3, r3, #5
 8018cca:	2000      	movs	r0, #0
 8018ccc:	7013      	strb	r3, [r2, #0]
 8018cce:	e001      	b.n	8018cd4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8018cd0:	f640 0036 	movw	r0, #2102	@ 0x836
 8018cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cd8:	f7f7 fd82 	bl	80107e0 <rcutils_reset_error>
 8018cdc:	f640 0036 	movw	r0, #2102	@ 0x836
 8018ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ce4:	2001      	movs	r0, #1
 8018ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cea:	200b      	movs	r0, #11
 8018cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cf0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018cf4:	4770      	bx	lr
 8018cf6:	bf00      	nop

08018cf8 <rcl_action_take_goal_request>:
 8018cf8:	2800      	cmp	r0, #0
 8018cfa:	d039      	beq.n	8018d70 <rcl_action_take_goal_request+0x78>
 8018cfc:	b570      	push	{r4, r5, r6, lr}
 8018cfe:	4604      	mov	r4, r0
 8018d00:	6800      	ldr	r0, [r0, #0]
 8018d02:	b380      	cbz	r0, 8018d66 <rcl_action_take_goal_request+0x6e>
 8018d04:	460d      	mov	r5, r1
 8018d06:	4616      	mov	r6, r2
 8018d08:	f7fe fb66 	bl	80173d8 <rcl_service_is_valid>
 8018d0c:	b330      	cbz	r0, 8018d5c <rcl_action_take_goal_request+0x64>
 8018d0e:	6820      	ldr	r0, [r4, #0]
 8018d10:	3004      	adds	r0, #4
 8018d12:	f7fe fb61 	bl	80173d8 <rcl_service_is_valid>
 8018d16:	b308      	cbz	r0, 8018d5c <rcl_action_take_goal_request+0x64>
 8018d18:	6820      	ldr	r0, [r4, #0]
 8018d1a:	3008      	adds	r0, #8
 8018d1c:	f7fe fb5c 	bl	80173d8 <rcl_service_is_valid>
 8018d20:	b1e0      	cbz	r0, 8018d5c <rcl_action_take_goal_request+0x64>
 8018d22:	6820      	ldr	r0, [r4, #0]
 8018d24:	300c      	adds	r0, #12
 8018d26:	f7f6 fd43 	bl	800f7b0 <rcl_publisher_is_valid>
 8018d2a:	b1b8      	cbz	r0, 8018d5c <rcl_action_take_goal_request+0x64>
 8018d2c:	6820      	ldr	r0, [r4, #0]
 8018d2e:	3010      	adds	r0, #16
 8018d30:	f7f6 fd3e 	bl	800f7b0 <rcl_publisher_is_valid>
 8018d34:	b190      	cbz	r0, 8018d5c <rcl_action_take_goal_request+0x64>
 8018d36:	b1cd      	cbz	r5, 8018d6c <rcl_action_take_goal_request+0x74>
 8018d38:	b1c6      	cbz	r6, 8018d6c <rcl_action_take_goal_request+0x74>
 8018d3a:	6820      	ldr	r0, [r4, #0]
 8018d3c:	4632      	mov	r2, r6
 8018d3e:	4629      	mov	r1, r5
 8018d40:	f7fe faf2 	bl	8017328 <rcl_take_request>
 8018d44:	b148      	cbz	r0, 8018d5a <rcl_action_take_goal_request+0x62>
 8018d46:	280a      	cmp	r0, #10
 8018d48:	d007      	beq.n	8018d5a <rcl_action_take_goal_request+0x62>
 8018d4a:	f240 2259 	movw	r2, #601	@ 0x259
 8018d4e:	f640 0399 	movw	r3, #2201	@ 0x899
 8018d52:	4290      	cmp	r0, r2
 8018d54:	bf0c      	ite	eq
 8018d56:	4618      	moveq	r0, r3
 8018d58:	2001      	movne	r0, #1
 8018d5a:	bd70      	pop	{r4, r5, r6, pc}
 8018d5c:	f7f7 fd40 	bl	80107e0 <rcutils_reset_error>
 8018d60:	f640 0098 	movw	r0, #2200	@ 0x898
 8018d64:	bd70      	pop	{r4, r5, r6, pc}
 8018d66:	f640 0098 	movw	r0, #2200	@ 0x898
 8018d6a:	bd70      	pop	{r4, r5, r6, pc}
 8018d6c:	200b      	movs	r0, #11
 8018d6e:	bd70      	pop	{r4, r5, r6, pc}
 8018d70:	f640 0098 	movw	r0, #2200	@ 0x898
 8018d74:	4770      	bx	lr
 8018d76:	bf00      	nop

08018d78 <rcl_action_send_goal_response>:
 8018d78:	b390      	cbz	r0, 8018de0 <rcl_action_send_goal_response+0x68>
 8018d7a:	b570      	push	{r4, r5, r6, lr}
 8018d7c:	4604      	mov	r4, r0
 8018d7e:	6800      	ldr	r0, [r0, #0]
 8018d80:	b348      	cbz	r0, 8018dd6 <rcl_action_send_goal_response+0x5e>
 8018d82:	460d      	mov	r5, r1
 8018d84:	4616      	mov	r6, r2
 8018d86:	f7fe fb27 	bl	80173d8 <rcl_service_is_valid>
 8018d8a:	b1f8      	cbz	r0, 8018dcc <rcl_action_send_goal_response+0x54>
 8018d8c:	6820      	ldr	r0, [r4, #0]
 8018d8e:	3004      	adds	r0, #4
 8018d90:	f7fe fb22 	bl	80173d8 <rcl_service_is_valid>
 8018d94:	b1d0      	cbz	r0, 8018dcc <rcl_action_send_goal_response+0x54>
 8018d96:	6820      	ldr	r0, [r4, #0]
 8018d98:	3008      	adds	r0, #8
 8018d9a:	f7fe fb1d 	bl	80173d8 <rcl_service_is_valid>
 8018d9e:	b1a8      	cbz	r0, 8018dcc <rcl_action_send_goal_response+0x54>
 8018da0:	6820      	ldr	r0, [r4, #0]
 8018da2:	300c      	adds	r0, #12
 8018da4:	f7f6 fd04 	bl	800f7b0 <rcl_publisher_is_valid>
 8018da8:	b180      	cbz	r0, 8018dcc <rcl_action_send_goal_response+0x54>
 8018daa:	6820      	ldr	r0, [r4, #0]
 8018dac:	3010      	adds	r0, #16
 8018dae:	f7f6 fcff 	bl	800f7b0 <rcl_publisher_is_valid>
 8018db2:	b158      	cbz	r0, 8018dcc <rcl_action_send_goal_response+0x54>
 8018db4:	b195      	cbz	r5, 8018ddc <rcl_action_send_goal_response+0x64>
 8018db6:	b18e      	cbz	r6, 8018ddc <rcl_action_send_goal_response+0x64>
 8018db8:	6820      	ldr	r0, [r4, #0]
 8018dba:	4632      	mov	r2, r6
 8018dbc:	4629      	mov	r1, r5
 8018dbe:	f7fe faf3 	bl	80173a8 <rcl_send_response>
 8018dc2:	b110      	cbz	r0, 8018dca <rcl_action_send_goal_response+0x52>
 8018dc4:	2802      	cmp	r0, #2
 8018dc6:	bf18      	it	ne
 8018dc8:	2001      	movne	r0, #1
 8018dca:	bd70      	pop	{r4, r5, r6, pc}
 8018dcc:	f7f7 fd08 	bl	80107e0 <rcutils_reset_error>
 8018dd0:	f640 0098 	movw	r0, #2200	@ 0x898
 8018dd4:	bd70      	pop	{r4, r5, r6, pc}
 8018dd6:	f640 0098 	movw	r0, #2200	@ 0x898
 8018dda:	bd70      	pop	{r4, r5, r6, pc}
 8018ddc:	200b      	movs	r0, #11
 8018dde:	bd70      	pop	{r4, r5, r6, pc}
 8018de0:	f640 0098 	movw	r0, #2200	@ 0x898
 8018de4:	4770      	bx	lr
 8018de6:	bf00      	nop

08018de8 <rcl_action_take_result_request>:
 8018de8:	2800      	cmp	r0, #0
 8018dea:	d03a      	beq.n	8018e62 <rcl_action_take_result_request+0x7a>
 8018dec:	b570      	push	{r4, r5, r6, lr}
 8018dee:	4604      	mov	r4, r0
 8018df0:	6800      	ldr	r0, [r0, #0]
 8018df2:	b388      	cbz	r0, 8018e58 <rcl_action_take_result_request+0x70>
 8018df4:	460d      	mov	r5, r1
 8018df6:	4616      	mov	r6, r2
 8018df8:	f7fe faee 	bl	80173d8 <rcl_service_is_valid>
 8018dfc:	b338      	cbz	r0, 8018e4e <rcl_action_take_result_request+0x66>
 8018dfe:	6820      	ldr	r0, [r4, #0]
 8018e00:	3004      	adds	r0, #4
 8018e02:	f7fe fae9 	bl	80173d8 <rcl_service_is_valid>
 8018e06:	b310      	cbz	r0, 8018e4e <rcl_action_take_result_request+0x66>
 8018e08:	6820      	ldr	r0, [r4, #0]
 8018e0a:	3008      	adds	r0, #8
 8018e0c:	f7fe fae4 	bl	80173d8 <rcl_service_is_valid>
 8018e10:	b1e8      	cbz	r0, 8018e4e <rcl_action_take_result_request+0x66>
 8018e12:	6820      	ldr	r0, [r4, #0]
 8018e14:	300c      	adds	r0, #12
 8018e16:	f7f6 fccb 	bl	800f7b0 <rcl_publisher_is_valid>
 8018e1a:	b1c0      	cbz	r0, 8018e4e <rcl_action_take_result_request+0x66>
 8018e1c:	6820      	ldr	r0, [r4, #0]
 8018e1e:	3010      	adds	r0, #16
 8018e20:	f7f6 fcc6 	bl	800f7b0 <rcl_publisher_is_valid>
 8018e24:	b198      	cbz	r0, 8018e4e <rcl_action_take_result_request+0x66>
 8018e26:	b1d5      	cbz	r5, 8018e5e <rcl_action_take_result_request+0x76>
 8018e28:	b1ce      	cbz	r6, 8018e5e <rcl_action_take_result_request+0x76>
 8018e2a:	6820      	ldr	r0, [r4, #0]
 8018e2c:	4632      	mov	r2, r6
 8018e2e:	4629      	mov	r1, r5
 8018e30:	3008      	adds	r0, #8
 8018e32:	f7fe fa79 	bl	8017328 <rcl_take_request>
 8018e36:	b148      	cbz	r0, 8018e4c <rcl_action_take_result_request+0x64>
 8018e38:	280a      	cmp	r0, #10
 8018e3a:	d007      	beq.n	8018e4c <rcl_action_take_result_request+0x64>
 8018e3c:	f240 2259 	movw	r2, #601	@ 0x259
 8018e40:	f640 0399 	movw	r3, #2201	@ 0x899
 8018e44:	4290      	cmp	r0, r2
 8018e46:	bf0c      	ite	eq
 8018e48:	4618      	moveq	r0, r3
 8018e4a:	2001      	movne	r0, #1
 8018e4c:	bd70      	pop	{r4, r5, r6, pc}
 8018e4e:	f7f7 fcc7 	bl	80107e0 <rcutils_reset_error>
 8018e52:	f640 0098 	movw	r0, #2200	@ 0x898
 8018e56:	bd70      	pop	{r4, r5, r6, pc}
 8018e58:	f640 0098 	movw	r0, #2200	@ 0x898
 8018e5c:	bd70      	pop	{r4, r5, r6, pc}
 8018e5e:	200b      	movs	r0, #11
 8018e60:	bd70      	pop	{r4, r5, r6, pc}
 8018e62:	f640 0098 	movw	r0, #2200	@ 0x898
 8018e66:	4770      	bx	lr

08018e68 <rcl_action_take_cancel_request>:
 8018e68:	2800      	cmp	r0, #0
 8018e6a:	d03a      	beq.n	8018ee2 <rcl_action_take_cancel_request+0x7a>
 8018e6c:	b570      	push	{r4, r5, r6, lr}
 8018e6e:	4604      	mov	r4, r0
 8018e70:	6800      	ldr	r0, [r0, #0]
 8018e72:	b388      	cbz	r0, 8018ed8 <rcl_action_take_cancel_request+0x70>
 8018e74:	460d      	mov	r5, r1
 8018e76:	4616      	mov	r6, r2
 8018e78:	f7fe faae 	bl	80173d8 <rcl_service_is_valid>
 8018e7c:	b338      	cbz	r0, 8018ece <rcl_action_take_cancel_request+0x66>
 8018e7e:	6820      	ldr	r0, [r4, #0]
 8018e80:	3004      	adds	r0, #4
 8018e82:	f7fe faa9 	bl	80173d8 <rcl_service_is_valid>
 8018e86:	b310      	cbz	r0, 8018ece <rcl_action_take_cancel_request+0x66>
 8018e88:	6820      	ldr	r0, [r4, #0]
 8018e8a:	3008      	adds	r0, #8
 8018e8c:	f7fe faa4 	bl	80173d8 <rcl_service_is_valid>
 8018e90:	b1e8      	cbz	r0, 8018ece <rcl_action_take_cancel_request+0x66>
 8018e92:	6820      	ldr	r0, [r4, #0]
 8018e94:	300c      	adds	r0, #12
 8018e96:	f7f6 fc8b 	bl	800f7b0 <rcl_publisher_is_valid>
 8018e9a:	b1c0      	cbz	r0, 8018ece <rcl_action_take_cancel_request+0x66>
 8018e9c:	6820      	ldr	r0, [r4, #0]
 8018e9e:	3010      	adds	r0, #16
 8018ea0:	f7f6 fc86 	bl	800f7b0 <rcl_publisher_is_valid>
 8018ea4:	b198      	cbz	r0, 8018ece <rcl_action_take_cancel_request+0x66>
 8018ea6:	b1d5      	cbz	r5, 8018ede <rcl_action_take_cancel_request+0x76>
 8018ea8:	b1ce      	cbz	r6, 8018ede <rcl_action_take_cancel_request+0x76>
 8018eaa:	6820      	ldr	r0, [r4, #0]
 8018eac:	4632      	mov	r2, r6
 8018eae:	4629      	mov	r1, r5
 8018eb0:	3004      	adds	r0, #4
 8018eb2:	f7fe fa39 	bl	8017328 <rcl_take_request>
 8018eb6:	b148      	cbz	r0, 8018ecc <rcl_action_take_cancel_request+0x64>
 8018eb8:	280a      	cmp	r0, #10
 8018eba:	d007      	beq.n	8018ecc <rcl_action_take_cancel_request+0x64>
 8018ebc:	f240 2259 	movw	r2, #601	@ 0x259
 8018ec0:	f640 0399 	movw	r3, #2201	@ 0x899
 8018ec4:	4290      	cmp	r0, r2
 8018ec6:	bf0c      	ite	eq
 8018ec8:	4618      	moveq	r0, r3
 8018eca:	2001      	movne	r0, #1
 8018ecc:	bd70      	pop	{r4, r5, r6, pc}
 8018ece:	f7f7 fc87 	bl	80107e0 <rcutils_reset_error>
 8018ed2:	f640 0098 	movw	r0, #2200	@ 0x898
 8018ed6:	bd70      	pop	{r4, r5, r6, pc}
 8018ed8:	f640 0098 	movw	r0, #2200	@ 0x898
 8018edc:	bd70      	pop	{r4, r5, r6, pc}
 8018ede:	200b      	movs	r0, #11
 8018ee0:	bd70      	pop	{r4, r5, r6, pc}
 8018ee2:	f640 0098 	movw	r0, #2200	@ 0x898
 8018ee6:	4770      	bx	lr

08018ee8 <rcl_action_send_cancel_response>:
 8018ee8:	b398      	cbz	r0, 8018f52 <rcl_action_send_cancel_response+0x6a>
 8018eea:	b570      	push	{r4, r5, r6, lr}
 8018eec:	4604      	mov	r4, r0
 8018eee:	6800      	ldr	r0, [r0, #0]
 8018ef0:	b350      	cbz	r0, 8018f48 <rcl_action_send_cancel_response+0x60>
 8018ef2:	460d      	mov	r5, r1
 8018ef4:	4616      	mov	r6, r2
 8018ef6:	f7fe fa6f 	bl	80173d8 <rcl_service_is_valid>
 8018efa:	b300      	cbz	r0, 8018f3e <rcl_action_send_cancel_response+0x56>
 8018efc:	6820      	ldr	r0, [r4, #0]
 8018efe:	3004      	adds	r0, #4
 8018f00:	f7fe fa6a 	bl	80173d8 <rcl_service_is_valid>
 8018f04:	b1d8      	cbz	r0, 8018f3e <rcl_action_send_cancel_response+0x56>
 8018f06:	6820      	ldr	r0, [r4, #0]
 8018f08:	3008      	adds	r0, #8
 8018f0a:	f7fe fa65 	bl	80173d8 <rcl_service_is_valid>
 8018f0e:	b1b0      	cbz	r0, 8018f3e <rcl_action_send_cancel_response+0x56>
 8018f10:	6820      	ldr	r0, [r4, #0]
 8018f12:	300c      	adds	r0, #12
 8018f14:	f7f6 fc4c 	bl	800f7b0 <rcl_publisher_is_valid>
 8018f18:	b188      	cbz	r0, 8018f3e <rcl_action_send_cancel_response+0x56>
 8018f1a:	6820      	ldr	r0, [r4, #0]
 8018f1c:	3010      	adds	r0, #16
 8018f1e:	f7f6 fc47 	bl	800f7b0 <rcl_publisher_is_valid>
 8018f22:	b160      	cbz	r0, 8018f3e <rcl_action_send_cancel_response+0x56>
 8018f24:	b19d      	cbz	r5, 8018f4e <rcl_action_send_cancel_response+0x66>
 8018f26:	b196      	cbz	r6, 8018f4e <rcl_action_send_cancel_response+0x66>
 8018f28:	6820      	ldr	r0, [r4, #0]
 8018f2a:	4632      	mov	r2, r6
 8018f2c:	4629      	mov	r1, r5
 8018f2e:	3004      	adds	r0, #4
 8018f30:	f7fe fa3a 	bl	80173a8 <rcl_send_response>
 8018f34:	b110      	cbz	r0, 8018f3c <rcl_action_send_cancel_response+0x54>
 8018f36:	2802      	cmp	r0, #2
 8018f38:	bf18      	it	ne
 8018f3a:	2001      	movne	r0, #1
 8018f3c:	bd70      	pop	{r4, r5, r6, pc}
 8018f3e:	f7f7 fc4f 	bl	80107e0 <rcutils_reset_error>
 8018f42:	f640 0098 	movw	r0, #2200	@ 0x898
 8018f46:	bd70      	pop	{r4, r5, r6, pc}
 8018f48:	f640 0098 	movw	r0, #2200	@ 0x898
 8018f4c:	bd70      	pop	{r4, r5, r6, pc}
 8018f4e:	200b      	movs	r0, #11
 8018f50:	bd70      	pop	{r4, r5, r6, pc}
 8018f52:	f640 0098 	movw	r0, #2200	@ 0x898
 8018f56:	4770      	bx	lr

08018f58 <rcl_action_wait_set_add_action_server>:
 8018f58:	2800      	cmp	r0, #0
 8018f5a:	d04d      	beq.n	8018ff8 <rcl_action_wait_set_add_action_server+0xa0>
 8018f5c:	b570      	push	{r4, r5, r6, lr}
 8018f5e:	460c      	mov	r4, r1
 8018f60:	b159      	cbz	r1, 8018f7a <rcl_action_wait_set_add_action_server+0x22>
 8018f62:	4605      	mov	r5, r0
 8018f64:	6808      	ldr	r0, [r1, #0]
 8018f66:	b140      	cbz	r0, 8018f7a <rcl_action_wait_set_add_action_server+0x22>
 8018f68:	4616      	mov	r6, r2
 8018f6a:	f7fe fa35 	bl	80173d8 <rcl_service_is_valid>
 8018f6e:	b120      	cbz	r0, 8018f7a <rcl_action_wait_set_add_action_server+0x22>
 8018f70:	6820      	ldr	r0, [r4, #0]
 8018f72:	3004      	adds	r0, #4
 8018f74:	f7fe fa30 	bl	80173d8 <rcl_service_is_valid>
 8018f78:	b910      	cbnz	r0, 8018f80 <rcl_action_wait_set_add_action_server+0x28>
 8018f7a:	f640 0098 	movw	r0, #2200	@ 0x898
 8018f7e:	bd70      	pop	{r4, r5, r6, pc}
 8018f80:	6820      	ldr	r0, [r4, #0]
 8018f82:	3008      	adds	r0, #8
 8018f84:	f7fe fa28 	bl	80173d8 <rcl_service_is_valid>
 8018f88:	2800      	cmp	r0, #0
 8018f8a:	d0f6      	beq.n	8018f7a <rcl_action_wait_set_add_action_server+0x22>
 8018f8c:	6820      	ldr	r0, [r4, #0]
 8018f8e:	300c      	adds	r0, #12
 8018f90:	f7f6 fc26 	bl	800f7e0 <rcl_publisher_is_valid_except_context>
 8018f94:	2800      	cmp	r0, #0
 8018f96:	d0f0      	beq.n	8018f7a <rcl_action_wait_set_add_action_server+0x22>
 8018f98:	6820      	ldr	r0, [r4, #0]
 8018f9a:	3010      	adds	r0, #16
 8018f9c:	f7f6 fc20 	bl	800f7e0 <rcl_publisher_is_valid_except_context>
 8018fa0:	2800      	cmp	r0, #0
 8018fa2:	d0ea      	beq.n	8018f7a <rcl_action_wait_set_add_action_server+0x22>
 8018fa4:	6821      	ldr	r1, [r4, #0]
 8018fa6:	4628      	mov	r0, r5
 8018fa8:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8018fac:	f7ff face 	bl	801854c <rcl_wait_set_add_service>
 8018fb0:	2800      	cmp	r0, #0
 8018fb2:	d1e4      	bne.n	8018f7e <rcl_action_wait_set_add_action_server+0x26>
 8018fb4:	6821      	ldr	r1, [r4, #0]
 8018fb6:	4628      	mov	r0, r5
 8018fb8:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8018fbc:	3104      	adds	r1, #4
 8018fbe:	f7ff fac5 	bl	801854c <rcl_wait_set_add_service>
 8018fc2:	2800      	cmp	r0, #0
 8018fc4:	d1db      	bne.n	8018f7e <rcl_action_wait_set_add_action_server+0x26>
 8018fc6:	6821      	ldr	r1, [r4, #0]
 8018fc8:	4628      	mov	r0, r5
 8018fca:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8018fce:	3108      	adds	r1, #8
 8018fd0:	f7ff fabc 	bl	801854c <rcl_wait_set_add_service>
 8018fd4:	2800      	cmp	r0, #0
 8018fd6:	d1d2      	bne.n	8018f7e <rcl_action_wait_set_add_action_server+0x26>
 8018fd8:	6821      	ldr	r1, [r4, #0]
 8018fda:	4628      	mov	r0, r5
 8018fdc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8018fe0:	3114      	adds	r1, #20
 8018fe2:	f7ff fa57 	bl	8018494 <rcl_wait_set_add_timer>
 8018fe6:	2800      	cmp	r0, #0
 8018fe8:	d1c9      	bne.n	8018f7e <rcl_action_wait_set_add_action_server+0x26>
 8018fea:	2e00      	cmp	r6, #0
 8018fec:	d0c7      	beq.n	8018f7e <rcl_action_wait_set_add_action_server+0x26>
 8018fee:	6823      	ldr	r3, [r4, #0]
 8018ff0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8018ff4:	6033      	str	r3, [r6, #0]
 8018ff6:	bd70      	pop	{r4, r5, r6, pc}
 8018ff8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018ffc:	4770      	bx	lr
 8018ffe:	bf00      	nop

08019000 <rcl_action_server_wait_set_get_entities_ready>:
 8019000:	2800      	cmp	r0, #0
 8019002:	d05a      	beq.n	80190ba <rcl_action_server_wait_set_get_entities_ready+0xba>
 8019004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019006:	460c      	mov	r4, r1
 8019008:	b161      	cbz	r1, 8019024 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801900a:	4605      	mov	r5, r0
 801900c:	6808      	ldr	r0, [r1, #0]
 801900e:	b148      	cbz	r0, 8019024 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8019010:	4616      	mov	r6, r2
 8019012:	461f      	mov	r7, r3
 8019014:	f7fe f9e0 	bl	80173d8 <rcl_service_is_valid>
 8019018:	b120      	cbz	r0, 8019024 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801901a:	6820      	ldr	r0, [r4, #0]
 801901c:	3004      	adds	r0, #4
 801901e:	f7fe f9db 	bl	80173d8 <rcl_service_is_valid>
 8019022:	b910      	cbnz	r0, 801902a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8019024:	f640 0098 	movw	r0, #2200	@ 0x898
 8019028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801902a:	6820      	ldr	r0, [r4, #0]
 801902c:	3008      	adds	r0, #8
 801902e:	f7fe f9d3 	bl	80173d8 <rcl_service_is_valid>
 8019032:	2800      	cmp	r0, #0
 8019034:	d0f6      	beq.n	8019024 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8019036:	6820      	ldr	r0, [r4, #0]
 8019038:	300c      	adds	r0, #12
 801903a:	f7f6 fbd1 	bl	800f7e0 <rcl_publisher_is_valid_except_context>
 801903e:	2800      	cmp	r0, #0
 8019040:	d0f0      	beq.n	8019024 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8019042:	6820      	ldr	r0, [r4, #0]
 8019044:	3010      	adds	r0, #16
 8019046:	f7f6 fbcb 	bl	800f7e0 <rcl_publisher_is_valid_except_context>
 801904a:	2800      	cmp	r0, #0
 801904c:	d0ea      	beq.n	8019024 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801904e:	b3be      	cbz	r6, 80190c0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8019050:	b3b7      	cbz	r7, 80190c0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8019052:	9b06      	ldr	r3, [sp, #24]
 8019054:	b3a3      	cbz	r3, 80190c0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8019056:	9b07      	ldr	r3, [sp, #28]
 8019058:	b393      	cbz	r3, 80190c0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801905a:	6821      	ldr	r1, [r4, #0]
 801905c:	692a      	ldr	r2, [r5, #16]
 801905e:	6a2c      	ldr	r4, [r5, #32]
 8019060:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8019064:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8019068:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801906c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8019070:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8019074:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8019078:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801907c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8019080:	1a64      	subs	r4, r4, r1
 8019082:	fab4 f484 	clz	r4, r4
 8019086:	0964      	lsrs	r4, r4, #5
 8019088:	7034      	strb	r4, [r6, #0]
 801908a:	1d0c      	adds	r4, r1, #4
 801908c:	1b1b      	subs	r3, r3, r4
 801908e:	fab3 f383 	clz	r3, r3
 8019092:	095b      	lsrs	r3, r3, #5
 8019094:	f101 0408 	add.w	r4, r1, #8
 8019098:	703b      	strb	r3, [r7, #0]
 801909a:	f101 0314 	add.w	r3, r1, #20
 801909e:	1b01      	subs	r1, r0, r4
 80190a0:	1ad3      	subs	r3, r2, r3
 80190a2:	fab1 f181 	clz	r1, r1
 80190a6:	9a06      	ldr	r2, [sp, #24]
 80190a8:	0949      	lsrs	r1, r1, #5
 80190aa:	7011      	strb	r1, [r2, #0]
 80190ac:	fab3 f383 	clz	r3, r3
 80190b0:	9a07      	ldr	r2, [sp, #28]
 80190b2:	095b      	lsrs	r3, r3, #5
 80190b4:	2000      	movs	r0, #0
 80190b6:	7013      	strb	r3, [r2, #0]
 80190b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190ba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80190be:	4770      	bx	lr
 80190c0:	200b      	movs	r0, #11
 80190c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080190c4 <_execute_event_handler>:
 80190c4:	2002      	movs	r0, #2
 80190c6:	4770      	bx	lr

080190c8 <_cancel_goal_event_handler>:
 80190c8:	2003      	movs	r0, #3
 80190ca:	4770      	bx	lr

080190cc <_succeed_event_handler>:
 80190cc:	2004      	movs	r0, #4
 80190ce:	4770      	bx	lr

080190d0 <_abort_event_handler>:
 80190d0:	2006      	movs	r0, #6
 80190d2:	4770      	bx	lr

080190d4 <_canceled_event_handler>:
 80190d4:	2005      	movs	r0, #5
 80190d6:	4770      	bx	lr

080190d8 <rcl_action_transition_goal_state>:
 80190d8:	b2c2      	uxtb	r2, r0
 80190da:	2a06      	cmp	r2, #6
 80190dc:	d80c      	bhi.n	80190f8 <rcl_action_transition_goal_state+0x20>
 80190de:	2904      	cmp	r1, #4
 80190e0:	d80a      	bhi.n	80190f8 <rcl_action_transition_goal_state+0x20>
 80190e2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80190e6:	b410      	push	{r4}
 80190e8:	1853      	adds	r3, r2, r1
 80190ea:	4c06      	ldr	r4, [pc, #24]	@ (8019104 <rcl_action_transition_goal_state+0x2c>)
 80190ec:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80190f0:	b123      	cbz	r3, 80190fc <rcl_action_transition_goal_state+0x24>
 80190f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80190f6:	4718      	bx	r3
 80190f8:	2000      	movs	r0, #0
 80190fa:	4770      	bx	lr
 80190fc:	2000      	movs	r0, #0
 80190fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019102:	4770      	bx	lr
 8019104:	0801ee88 	.word	0x0801ee88

08019108 <rcl_action_get_zero_initialized_cancel_response>:
 8019108:	b510      	push	{r4, lr}
 801910a:	4c07      	ldr	r4, [pc, #28]	@ (8019128 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801910c:	4686      	mov	lr, r0
 801910e:	4684      	mov	ip, r0
 8019110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019112:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019118:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801911c:	6823      	ldr	r3, [r4, #0]
 801911e:	f8cc 3000 	str.w	r3, [ip]
 8019122:	4670      	mov	r0, lr
 8019124:	bd10      	pop	{r4, pc}
 8019126:	bf00      	nop
 8019128:	0801ef14 	.word	0x0801ef14

0801912c <rclc_action_send_result_request>:
 801912c:	b1d0      	cbz	r0, 8019164 <rclc_action_send_result_request+0x38>
 801912e:	b500      	push	{lr}
 8019130:	4684      	mov	ip, r0
 8019132:	b087      	sub	sp, #28
 8019134:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8019138:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801913c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8019140:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8019144:	f10d 0e08 	add.w	lr, sp, #8
 8019148:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801914c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8019150:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8019154:	a902      	add	r1, sp, #8
 8019156:	3010      	adds	r0, #16
 8019158:	f7ff fbda 	bl	8018910 <rcl_action_send_result_request>
 801915c:	b920      	cbnz	r0, 8019168 <rclc_action_send_result_request+0x3c>
 801915e:	b007      	add	sp, #28
 8019160:	f85d fb04 	ldr.w	pc, [sp], #4
 8019164:	200b      	movs	r0, #11
 8019166:	4770      	bx	lr
 8019168:	9001      	str	r0, [sp, #4]
 801916a:	f7f7 fb39 	bl	80107e0 <rcutils_reset_error>
 801916e:	9801      	ldr	r0, [sp, #4]
 8019170:	b007      	add	sp, #28
 8019172:	f85d fb04 	ldr.w	pc, [sp], #4
 8019176:	bf00      	nop

08019178 <rclc_action_take_goal_handle>:
 8019178:	b160      	cbz	r0, 8019194 <rclc_action_take_goal_handle+0x1c>
 801917a:	6883      	ldr	r3, [r0, #8]
 801917c:	b143      	cbz	r3, 8019190 <rclc_action_take_goal_handle+0x18>
 801917e:	6819      	ldr	r1, [r3, #0]
 8019180:	6081      	str	r1, [r0, #8]
 8019182:	2200      	movs	r2, #0
 8019184:	721a      	strb	r2, [r3, #8]
 8019186:	68c1      	ldr	r1, [r0, #12]
 8019188:	6019      	str	r1, [r3, #0]
 801918a:	621a      	str	r2, [r3, #32]
 801918c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801918e:	60c3      	str	r3, [r0, #12]
 8019190:	4618      	mov	r0, r3
 8019192:	4770      	bx	lr
 8019194:	4603      	mov	r3, r0
 8019196:	e7fb      	b.n	8019190 <rclc_action_take_goal_handle+0x18>

08019198 <rclc_action_remove_used_goal_handle>:
 8019198:	b180      	cbz	r0, 80191bc <rclc_action_remove_used_goal_handle+0x24>
 801919a:	b179      	cbz	r1, 80191bc <rclc_action_remove_used_goal_handle+0x24>
 801919c:	68c3      	ldr	r3, [r0, #12]
 801919e:	4299      	cmp	r1, r3
 80191a0:	d00d      	beq.n	80191be <rclc_action_remove_used_goal_handle+0x26>
 80191a2:	b12b      	cbz	r3, 80191b0 <rclc_action_remove_used_goal_handle+0x18>
 80191a4:	681a      	ldr	r2, [r3, #0]
 80191a6:	4291      	cmp	r1, r2
 80191a8:	d003      	beq.n	80191b2 <rclc_action_remove_used_goal_handle+0x1a>
 80191aa:	4613      	mov	r3, r2
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d1f9      	bne.n	80191a4 <rclc_action_remove_used_goal_handle+0xc>
 80191b0:	4770      	bx	lr
 80191b2:	680a      	ldr	r2, [r1, #0]
 80191b4:	601a      	str	r2, [r3, #0]
 80191b6:	6883      	ldr	r3, [r0, #8]
 80191b8:	600b      	str	r3, [r1, #0]
 80191ba:	6081      	str	r1, [r0, #8]
 80191bc:	4770      	bx	lr
 80191be:	680b      	ldr	r3, [r1, #0]
 80191c0:	60c3      	str	r3, [r0, #12]
 80191c2:	e7f8      	b.n	80191b6 <rclc_action_remove_used_goal_handle+0x1e>

080191c4 <rclc_action_find_goal_handle_by_uuid>:
 80191c4:	b538      	push	{r3, r4, r5, lr}
 80191c6:	b180      	cbz	r0, 80191ea <rclc_action_find_goal_handle_by_uuid+0x26>
 80191c8:	460d      	mov	r5, r1
 80191ca:	b181      	cbz	r1, 80191ee <rclc_action_find_goal_handle_by_uuid+0x2a>
 80191cc:	68c4      	ldr	r4, [r0, #12]
 80191ce:	b914      	cbnz	r4, 80191d6 <rclc_action_find_goal_handle_by_uuid+0x12>
 80191d0:	e009      	b.n	80191e6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80191d2:	6824      	ldr	r4, [r4, #0]
 80191d4:	b13c      	cbz	r4, 80191e6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80191d6:	f104 0009 	add.w	r0, r4, #9
 80191da:	2210      	movs	r2, #16
 80191dc:	4629      	mov	r1, r5
 80191de:	f003 fa2f 	bl	801c640 <memcmp>
 80191e2:	2800      	cmp	r0, #0
 80191e4:	d1f5      	bne.n	80191d2 <rclc_action_find_goal_handle_by_uuid+0xe>
 80191e6:	4620      	mov	r0, r4
 80191e8:	bd38      	pop	{r3, r4, r5, pc}
 80191ea:	4604      	mov	r4, r0
 80191ec:	e7fb      	b.n	80191e6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80191ee:	460c      	mov	r4, r1
 80191f0:	e7f9      	b.n	80191e6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80191f2:	bf00      	nop

080191f4 <rclc_action_find_first_handle_by_status>:
 80191f4:	b140      	cbz	r0, 8019208 <rclc_action_find_first_handle_by_status+0x14>
 80191f6:	68c0      	ldr	r0, [r0, #12]
 80191f8:	b910      	cbnz	r0, 8019200 <rclc_action_find_first_handle_by_status+0xc>
 80191fa:	e005      	b.n	8019208 <rclc_action_find_first_handle_by_status+0x14>
 80191fc:	6800      	ldr	r0, [r0, #0]
 80191fe:	b118      	cbz	r0, 8019208 <rclc_action_find_first_handle_by_status+0x14>
 8019200:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8019204:	428b      	cmp	r3, r1
 8019206:	d1f9      	bne.n	80191fc <rclc_action_find_first_handle_by_status+0x8>
 8019208:	4770      	bx	lr
 801920a:	bf00      	nop

0801920c <rclc_action_find_first_terminated_handle>:
 801920c:	b140      	cbz	r0, 8019220 <rclc_action_find_first_terminated_handle+0x14>
 801920e:	68c0      	ldr	r0, [r0, #12]
 8019210:	b910      	cbnz	r0, 8019218 <rclc_action_find_first_terminated_handle+0xc>
 8019212:	e005      	b.n	8019220 <rclc_action_find_first_terminated_handle+0x14>
 8019214:	6800      	ldr	r0, [r0, #0]
 8019216:	b118      	cbz	r0, 8019220 <rclc_action_find_first_terminated_handle+0x14>
 8019218:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801921c:	2b03      	cmp	r3, #3
 801921e:	ddf9      	ble.n	8019214 <rclc_action_find_first_terminated_handle+0x8>
 8019220:	4770      	bx	lr
 8019222:	bf00      	nop

08019224 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8019224:	b170      	cbz	r0, 8019244 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8019226:	68c0      	ldr	r0, [r0, #12]
 8019228:	b160      	cbz	r0, 8019244 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801922a:	b410      	push	{r4}
 801922c:	e001      	b.n	8019232 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801922e:	6800      	ldr	r0, [r0, #0]
 8019230:	b128      	cbz	r0, 801923e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8019232:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8019236:	4299      	cmp	r1, r3
 8019238:	bf08      	it	eq
 801923a:	4294      	cmpeq	r4, r2
 801923c:	d1f7      	bne.n	801922e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801923e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019242:	4770      	bx	lr
 8019244:	4770      	bx	lr
 8019246:	bf00      	nop

08019248 <rclc_action_find_handle_by_result_request_sequence_number>:
 8019248:	b170      	cbz	r0, 8019268 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801924a:	68c0      	ldr	r0, [r0, #12]
 801924c:	b160      	cbz	r0, 8019268 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801924e:	b410      	push	{r4}
 8019250:	e001      	b.n	8019256 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8019252:	6800      	ldr	r0, [r0, #0]
 8019254:	b128      	cbz	r0, 8019262 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8019256:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801925a:	4299      	cmp	r1, r3
 801925c:	bf08      	it	eq
 801925e:	4294      	cmpeq	r4, r2
 8019260:	d1f7      	bne.n	8019252 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8019262:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019266:	4770      	bx	lr
 8019268:	4770      	bx	lr
 801926a:	bf00      	nop

0801926c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801926c:	b170      	cbz	r0, 801928c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801926e:	68c0      	ldr	r0, [r0, #12]
 8019270:	b160      	cbz	r0, 801928c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8019272:	b410      	push	{r4}
 8019274:	e001      	b.n	801927a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8019276:	6800      	ldr	r0, [r0, #0]
 8019278:	b128      	cbz	r0, 8019286 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801927a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801927e:	4299      	cmp	r1, r3
 8019280:	bf08      	it	eq
 8019282:	4294      	cmpeq	r4, r2
 8019284:	d1f7      	bne.n	8019276 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8019286:	f85d 4b04 	ldr.w	r4, [sp], #4
 801928a:	4770      	bx	lr
 801928c:	4770      	bx	lr
 801928e:	bf00      	nop

08019290 <rclc_action_find_first_handle_with_goal_response>:
 8019290:	b140      	cbz	r0, 80192a4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8019292:	68c0      	ldr	r0, [r0, #12]
 8019294:	b910      	cbnz	r0, 801929c <rclc_action_find_first_handle_with_goal_response+0xc>
 8019296:	e005      	b.n	80192a4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8019298:	6800      	ldr	r0, [r0, #0]
 801929a:	b118      	cbz	r0, 80192a4 <rclc_action_find_first_handle_with_goal_response+0x14>
 801929c:	f890 3020 	ldrb.w	r3, [r0, #32]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d0f9      	beq.n	8019298 <rclc_action_find_first_handle_with_goal_response+0x8>
 80192a4:	4770      	bx	lr
 80192a6:	bf00      	nop

080192a8 <rclc_action_find_first_handle_with_result_response>:
 80192a8:	b140      	cbz	r0, 80192bc <rclc_action_find_first_handle_with_result_response+0x14>
 80192aa:	68c0      	ldr	r0, [r0, #12]
 80192ac:	b910      	cbnz	r0, 80192b4 <rclc_action_find_first_handle_with_result_response+0xc>
 80192ae:	e005      	b.n	80192bc <rclc_action_find_first_handle_with_result_response+0x14>
 80192b0:	6800      	ldr	r0, [r0, #0]
 80192b2:	b118      	cbz	r0, 80192bc <rclc_action_find_first_handle_with_result_response+0x14>
 80192b4:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d0f9      	beq.n	80192b0 <rclc_action_find_first_handle_with_result_response+0x8>
 80192bc:	4770      	bx	lr
 80192be:	bf00      	nop

080192c0 <rclc_action_server_response_goal_request>:
 80192c0:	b198      	cbz	r0, 80192ea <rclc_action_server_response_goal_request+0x2a>
 80192c2:	b510      	push	{r4, lr}
 80192c4:	6844      	ldr	r4, [r0, #4]
 80192c6:	b086      	sub	sp, #24
 80192c8:	2200      	movs	r2, #0
 80192ca:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80192ce:	460b      	mov	r3, r1
 80192d0:	9205      	str	r2, [sp, #20]
 80192d2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80192d6:	aa03      	add	r2, sp, #12
 80192d8:	f104 0010 	add.w	r0, r4, #16
 80192dc:	f88d 300c 	strb.w	r3, [sp, #12]
 80192e0:	f7ff fd4a 	bl	8018d78 <rcl_action_send_goal_response>
 80192e4:	b918      	cbnz	r0, 80192ee <rclc_action_server_response_goal_request+0x2e>
 80192e6:	b006      	add	sp, #24
 80192e8:	bd10      	pop	{r4, pc}
 80192ea:	200b      	movs	r0, #11
 80192ec:	4770      	bx	lr
 80192ee:	9001      	str	r0, [sp, #4]
 80192f0:	f7f7 fa76 	bl	80107e0 <rcutils_reset_error>
 80192f4:	9801      	ldr	r0, [sp, #4]
 80192f6:	b006      	add	sp, #24
 80192f8:	bd10      	pop	{r4, pc}
 80192fa:	bf00      	nop
 80192fc:	0000      	movs	r0, r0
	...

08019300 <rclc_action_server_goal_cancel_accept>:
 8019300:	b310      	cbz	r0, 8019348 <rclc_action_server_goal_cancel_accept+0x48>
 8019302:	b510      	push	{r4, lr}
 8019304:	b090      	sub	sp, #64	@ 0x40
 8019306:	4604      	mov	r4, r0
 8019308:	a806      	add	r0, sp, #24
 801930a:	f7ff fefd 	bl	8019108 <rcl_action_get_zero_initialized_cancel_response>
 801930e:	2300      	movs	r3, #0
 8019310:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8019314:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8019318:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801931c:	f88d 3018 	strb.w	r3, [sp, #24]
 8019320:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8019324:	f8cd d01c 	str.w	sp, [sp, #28]
 8019328:	46ec      	mov	ip, sp
 801932a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801932e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8019350 <rclc_action_server_goal_cancel_accept+0x50>
 8019332:	6860      	ldr	r0, [r4, #4]
 8019334:	aa06      	add	r2, sp, #24
 8019336:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801933a:	3010      	adds	r0, #16
 801933c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8019340:	f7ff fdd2 	bl	8018ee8 <rcl_action_send_cancel_response>
 8019344:	b010      	add	sp, #64	@ 0x40
 8019346:	bd10      	pop	{r4, pc}
 8019348:	200b      	movs	r0, #11
 801934a:	4770      	bx	lr
 801934c:	f3af 8000 	nop.w
 8019350:	00000001 	.word	0x00000001
 8019354:	00000001 	.word	0x00000001

08019358 <rclc_action_server_goal_cancel_reject>:
 8019358:	b082      	sub	sp, #8
 801935a:	b530      	push	{r4, r5, lr}
 801935c:	b08b      	sub	sp, #44	@ 0x2c
 801935e:	ac0e      	add	r4, sp, #56	@ 0x38
 8019360:	e884 000c 	stmia.w	r4, {r2, r3}
 8019364:	b188      	cbz	r0, 801938a <rclc_action_server_goal_cancel_reject+0x32>
 8019366:	4604      	mov	r4, r0
 8019368:	a801      	add	r0, sp, #4
 801936a:	460d      	mov	r5, r1
 801936c:	f7ff fecc 	bl	8019108 <rcl_action_get_zero_initialized_cancel_response>
 8019370:	aa01      	add	r2, sp, #4
 8019372:	a90e      	add	r1, sp, #56	@ 0x38
 8019374:	f104 0010 	add.w	r0, r4, #16
 8019378:	f88d 5004 	strb.w	r5, [sp, #4]
 801937c:	f7ff fdb4 	bl	8018ee8 <rcl_action_send_cancel_response>
 8019380:	b00b      	add	sp, #44	@ 0x2c
 8019382:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019386:	b002      	add	sp, #8
 8019388:	4770      	bx	lr
 801938a:	200b      	movs	r0, #11
 801938c:	b00b      	add	sp, #44	@ 0x2c
 801938e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019392:	b002      	add	sp, #8
 8019394:	4770      	bx	lr
 8019396:	bf00      	nop

08019398 <__atomic_load_8>:
 8019398:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801939c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80193a0:	4a15      	ldr	r2, [pc, #84]	@ (80193f8 <__atomic_load_8+0x60>)
 80193a2:	4b16      	ldr	r3, [pc, #88]	@ (80193fc <__atomic_load_8+0x64>)
 80193a4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80193a8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80193ac:	fb02 f101 	mul.w	r1, r2, r1
 80193b0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80193b4:	fba3 2301 	umull	r2, r3, r3, r1
 80193b8:	091b      	lsrs	r3, r3, #4
 80193ba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80193be:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80193c2:	b4d0      	push	{r4, r6, r7}
 80193c4:	4c0e      	ldr	r4, [pc, #56]	@ (8019400 <__atomic_load_8+0x68>)
 80193c6:	1ac9      	subs	r1, r1, r3
 80193c8:	1862      	adds	r2, r4, r1
 80193ca:	f04f 0c01 	mov.w	ip, #1
 80193ce:	e8d2 3f4f 	ldrexb	r3, [r2]
 80193d2:	e8c2 cf46 	strexb	r6, ip, [r2]
 80193d6:	2e00      	cmp	r6, #0
 80193d8:	d1f9      	bne.n	80193ce <__atomic_load_8+0x36>
 80193da:	f3bf 8f5b 	dmb	ish
 80193de:	b2db      	uxtb	r3, r3
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d1f4      	bne.n	80193ce <__atomic_load_8+0x36>
 80193e4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80193e8:	f3bf 8f5b 	dmb	ish
 80193ec:	5463      	strb	r3, [r4, r1]
 80193ee:	4630      	mov	r0, r6
 80193f0:	4639      	mov	r1, r7
 80193f2:	bcd0      	pop	{r4, r6, r7}
 80193f4:	4770      	bx	lr
 80193f6:	bf00      	nop
 80193f8:	27d4eb2d 	.word	0x27d4eb2d
 80193fc:	b21642c9 	.word	0xb21642c9
 8019400:	2000bbc8 	.word	0x2000bbc8

08019404 <__atomic_store_8>:
 8019404:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8019408:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801940c:	b570      	push	{r4, r5, r6, lr}
 801940e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8019412:	4c14      	ldr	r4, [pc, #80]	@ (8019464 <__atomic_store_8+0x60>)
 8019414:	4d14      	ldr	r5, [pc, #80]	@ (8019468 <__atomic_store_8+0x64>)
 8019416:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801941a:	fb04 f101 	mul.w	r1, r4, r1
 801941e:	4c13      	ldr	r4, [pc, #76]	@ (801946c <__atomic_store_8+0x68>)
 8019420:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8019424:	fba4 4e01 	umull	r4, lr, r4, r1
 8019428:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801942c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8019430:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8019434:	eba1 0e0e 	sub.w	lr, r1, lr
 8019438:	eb05 0c0e 	add.w	ip, r5, lr
 801943c:	f04f 0401 	mov.w	r4, #1
 8019440:	e8dc 1f4f 	ldrexb	r1, [ip]
 8019444:	e8cc 4f46 	strexb	r6, r4, [ip]
 8019448:	2e00      	cmp	r6, #0
 801944a:	d1f9      	bne.n	8019440 <__atomic_store_8+0x3c>
 801944c:	f3bf 8f5b 	dmb	ish
 8019450:	b2c9      	uxtb	r1, r1
 8019452:	2900      	cmp	r1, #0
 8019454:	d1f4      	bne.n	8019440 <__atomic_store_8+0x3c>
 8019456:	e9c0 2300 	strd	r2, r3, [r0]
 801945a:	f3bf 8f5b 	dmb	ish
 801945e:	f805 100e 	strb.w	r1, [r5, lr]
 8019462:	bd70      	pop	{r4, r5, r6, pc}
 8019464:	27d4eb2d 	.word	0x27d4eb2d
 8019468:	2000bbc8 	.word	0x2000bbc8
 801946c:	b21642c9 	.word	0xb21642c9

08019470 <__atomic_exchange_8>:
 8019470:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8019474:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8019478:	4916      	ldr	r1, [pc, #88]	@ (80194d4 <__atomic_exchange_8+0x64>)
 801947a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801947e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8019482:	fb01 fc0c 	mul.w	ip, r1, ip
 8019486:	4914      	ldr	r1, [pc, #80]	@ (80194d8 <__atomic_exchange_8+0x68>)
 8019488:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801948c:	b570      	push	{r4, r5, r6, lr}
 801948e:	4605      	mov	r5, r0
 8019490:	fba1 010c 	umull	r0, r1, r1, ip
 8019494:	0909      	lsrs	r1, r1, #4
 8019496:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801949a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 801949e:	4e0f      	ldr	r6, [pc, #60]	@ (80194dc <__atomic_exchange_8+0x6c>)
 80194a0:	ebac 0c01 	sub.w	ip, ip, r1
 80194a4:	eb06 010c 	add.w	r1, r6, ip
 80194a8:	f04f 0e01 	mov.w	lr, #1
 80194ac:	e8d1 4f4f 	ldrexb	r4, [r1]
 80194b0:	e8c1 ef40 	strexb	r0, lr, [r1]
 80194b4:	2800      	cmp	r0, #0
 80194b6:	d1f9      	bne.n	80194ac <__atomic_exchange_8+0x3c>
 80194b8:	f3bf 8f5b 	dmb	ish
 80194bc:	b2e4      	uxtb	r4, r4
 80194be:	2c00      	cmp	r4, #0
 80194c0:	d1f4      	bne.n	80194ac <__atomic_exchange_8+0x3c>
 80194c2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80194c6:	e9c5 2300 	strd	r2, r3, [r5]
 80194ca:	f3bf 8f5b 	dmb	ish
 80194ce:	f806 400c 	strb.w	r4, [r6, ip]
 80194d2:	bd70      	pop	{r4, r5, r6, pc}
 80194d4:	27d4eb2d 	.word	0x27d4eb2d
 80194d8:	b21642c9 	.word	0xb21642c9
 80194dc:	2000bbc8 	.word	0x2000bbc8

080194e0 <rcutils_get_env>:
 80194e0:	b168      	cbz	r0, 80194fe <rcutils_get_env+0x1e>
 80194e2:	b510      	push	{r4, lr}
 80194e4:	460c      	mov	r4, r1
 80194e6:	b129      	cbz	r1, 80194f4 <rcutils_get_env+0x14>
 80194e8:	f002 fc18 	bl	801bd1c <getenv>
 80194ec:	b120      	cbz	r0, 80194f8 <rcutils_get_env+0x18>
 80194ee:	6020      	str	r0, [r4, #0]
 80194f0:	2000      	movs	r0, #0
 80194f2:	bd10      	pop	{r4, pc}
 80194f4:	4803      	ldr	r0, [pc, #12]	@ (8019504 <rcutils_get_env+0x24>)
 80194f6:	bd10      	pop	{r4, pc}
 80194f8:	4b03      	ldr	r3, [pc, #12]	@ (8019508 <rcutils_get_env+0x28>)
 80194fa:	6023      	str	r3, [r4, #0]
 80194fc:	bd10      	pop	{r4, pc}
 80194fe:	4803      	ldr	r0, [pc, #12]	@ (801950c <rcutils_get_env+0x2c>)
 8019500:	4770      	bx	lr
 8019502:	bf00      	nop
 8019504:	0801ef54 	.word	0x0801ef54
 8019508:	0801f32c 	.word	0x0801f32c
 801950c:	0801ef38 	.word	0x0801ef38

08019510 <rcutils_is_directory>:
 8019510:	2000      	movs	r0, #0
 8019512:	4770      	bx	lr

08019514 <rcutils_join_path>:
 8019514:	b082      	sub	sp, #8
 8019516:	e88d 000c 	stmia.w	sp, {r2, r3}
 801951a:	2000      	movs	r0, #0
 801951c:	b002      	add	sp, #8
 801951e:	4770      	bx	lr

08019520 <rcutils_to_native_path>:
 8019520:	b084      	sub	sp, #16
 8019522:	a801      	add	r0, sp, #4
 8019524:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8019528:	b004      	add	sp, #16
 801952a:	2000      	movs	r0, #0
 801952c:	4770      	bx	lr
 801952e:	bf00      	nop

08019530 <rcutils_format_string_limit>:
 8019530:	b40f      	push	{r0, r1, r2, r3}
 8019532:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019534:	b083      	sub	sp, #12
 8019536:	ac08      	add	r4, sp, #32
 8019538:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801953a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801953e:	b34e      	cbz	r6, 8019594 <rcutils_format_string_limit+0x64>
 8019540:	a808      	add	r0, sp, #32
 8019542:	f7f7 f927 	bl	8010794 <rcutils_allocator_is_valid>
 8019546:	b328      	cbz	r0, 8019594 <rcutils_format_string_limit+0x64>
 8019548:	2100      	movs	r1, #0
 801954a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801954c:	4632      	mov	r2, r6
 801954e:	4608      	mov	r0, r1
 8019550:	e9cd 3300 	strd	r3, r3, [sp]
 8019554:	f000 f8f4 	bl	8019740 <rcutils_vsnprintf>
 8019558:	1c43      	adds	r3, r0, #1
 801955a:	4605      	mov	r5, r0
 801955c:	d01a      	beq.n	8019594 <rcutils_format_string_limit+0x64>
 801955e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019560:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019562:	1c47      	adds	r7, r0, #1
 8019564:	429f      	cmp	r7, r3
 8019566:	bf84      	itt	hi
 8019568:	461f      	movhi	r7, r3
 801956a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801956e:	4638      	mov	r0, r7
 8019570:	9b08      	ldr	r3, [sp, #32]
 8019572:	4798      	blx	r3
 8019574:	4604      	mov	r4, r0
 8019576:	b168      	cbz	r0, 8019594 <rcutils_format_string_limit+0x64>
 8019578:	9b01      	ldr	r3, [sp, #4]
 801957a:	4632      	mov	r2, r6
 801957c:	4639      	mov	r1, r7
 801957e:	f000 f8df 	bl	8019740 <rcutils_vsnprintf>
 8019582:	2800      	cmp	r0, #0
 8019584:	db02      	blt.n	801958c <rcutils_format_string_limit+0x5c>
 8019586:	2300      	movs	r3, #0
 8019588:	5563      	strb	r3, [r4, r5]
 801958a:	e004      	b.n	8019596 <rcutils_format_string_limit+0x66>
 801958c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801958e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019590:	4620      	mov	r0, r4
 8019592:	4798      	blx	r3
 8019594:	2400      	movs	r4, #0
 8019596:	4620      	mov	r0, r4
 8019598:	b003      	add	sp, #12
 801959a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801959e:	b004      	add	sp, #16
 80195a0:	4770      	bx	lr
 80195a2:	bf00      	nop

080195a4 <rcutils_repl_str>:
 80195a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195a8:	ed2d 8b02 	vpush	{d8}
 80195ac:	b087      	sub	sp, #28
 80195ae:	4680      	mov	r8, r0
 80195b0:	4608      	mov	r0, r1
 80195b2:	f8cd 8004 	str.w	r8, [sp, #4]
 80195b6:	ee08 2a10 	vmov	s16, r2
 80195ba:	468a      	mov	sl, r1
 80195bc:	4699      	mov	r9, r3
 80195be:	f7e6 fe39 	bl	8000234 <strlen>
 80195c2:	2600      	movs	r6, #0
 80195c4:	4647      	mov	r7, r8
 80195c6:	9002      	str	r0, [sp, #8]
 80195c8:	46b3      	mov	fp, r6
 80195ca:	2510      	movs	r5, #16
 80195cc:	46b0      	mov	r8, r6
 80195ce:	e01d      	b.n	801960c <rcutils_repl_str+0x68>
 80195d0:	f10b 0b01 	add.w	fp, fp, #1
 80195d4:	455e      	cmp	r6, fp
 80195d6:	d211      	bcs.n	80195fc <rcutils_repl_str+0x58>
 80195d8:	442e      	add	r6, r5
 80195da:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80195de:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80195e2:	00b1      	lsls	r1, r6, #2
 80195e4:	4798      	blx	r3
 80195e6:	2800      	cmp	r0, #0
 80195e8:	f000 8088 	beq.w	80196fc <rcutils_repl_str+0x158>
 80195ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80195f0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80195f4:	4680      	mov	r8, r0
 80195f6:	bf28      	it	cs
 80195f8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80195fc:	9a01      	ldr	r2, [sp, #4]
 80195fe:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8019602:	1aa2      	subs	r2, r4, r2
 8019604:	f843 2c04 	str.w	r2, [r3, #-4]
 8019608:	9b02      	ldr	r3, [sp, #8]
 801960a:	18e7      	adds	r7, r4, r3
 801960c:	4651      	mov	r1, sl
 801960e:	4638      	mov	r0, r7
 8019610:	f003 f867 	bl	801c6e2 <strstr>
 8019614:	4604      	mov	r4, r0
 8019616:	4640      	mov	r0, r8
 8019618:	2c00      	cmp	r4, #0
 801961a:	d1d9      	bne.n	80195d0 <rcutils_repl_str+0x2c>
 801961c:	46b8      	mov	r8, r7
 801961e:	4607      	mov	r7, r0
 8019620:	4640      	mov	r0, r8
 8019622:	f7e6 fe07 	bl	8000234 <strlen>
 8019626:	9b01      	ldr	r3, [sp, #4]
 8019628:	eba8 0303 	sub.w	r3, r8, r3
 801962c:	181c      	adds	r4, r3, r0
 801962e:	9404      	str	r4, [sp, #16]
 8019630:	f1bb 0f00 	cmp.w	fp, #0
 8019634:	d04a      	beq.n	80196cc <rcutils_repl_str+0x128>
 8019636:	ee18 0a10 	vmov	r0, s16
 801963a:	f7e6 fdfb 	bl	8000234 <strlen>
 801963e:	9b02      	ldr	r3, [sp, #8]
 8019640:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8019644:	1ac3      	subs	r3, r0, r3
 8019646:	fb0b 4303 	mla	r3, fp, r3, r4
 801964a:	461a      	mov	r2, r3
 801964c:	9305      	str	r3, [sp, #20]
 801964e:	4606      	mov	r6, r0
 8019650:	f8d9 3000 	ldr.w	r3, [r9]
 8019654:	1c50      	adds	r0, r2, #1
 8019656:	4798      	blx	r3
 8019658:	9003      	str	r0, [sp, #12]
 801965a:	2800      	cmp	r0, #0
 801965c:	d04f      	beq.n	80196fe <rcutils_repl_str+0x15a>
 801965e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019662:	683a      	ldr	r2, [r7, #0]
 8019664:	4641      	mov	r1, r8
 8019666:	f003 f8de 	bl	801c826 <memcpy>
 801966a:	683d      	ldr	r5, [r7, #0]
 801966c:	9b03      	ldr	r3, [sp, #12]
 801966e:	9701      	str	r7, [sp, #4]
 8019670:	46ba      	mov	sl, r7
 8019672:	441d      	add	r5, r3
 8019674:	9f02      	ldr	r7, [sp, #8]
 8019676:	f8cd 9008 	str.w	r9, [sp, #8]
 801967a:	2401      	movs	r4, #1
 801967c:	46d1      	mov	r9, sl
 801967e:	ee18 aa10 	vmov	sl, s16
 8019682:	e00a      	b.n	801969a <rcutils_repl_str+0xf6>
 8019684:	f8d9 5000 	ldr.w	r5, [r9]
 8019688:	1aaa      	subs	r2, r5, r2
 801968a:	1885      	adds	r5, r0, r2
 801968c:	f003 f8cb 	bl	801c826 <memcpy>
 8019690:	45a3      	cmp	fp, r4
 8019692:	f104 0201 	add.w	r2, r4, #1
 8019696:	d935      	bls.n	8019704 <rcutils_repl_str+0x160>
 8019698:	4614      	mov	r4, r2
 801969a:	4632      	mov	r2, r6
 801969c:	4651      	mov	r1, sl
 801969e:	4628      	mov	r0, r5
 80196a0:	f003 f8c1 	bl	801c826 <memcpy>
 80196a4:	f859 2b04 	ldr.w	r2, [r9], #4
 80196a8:	45a3      	cmp	fp, r4
 80196aa:	443a      	add	r2, r7
 80196ac:	eb05 0006 	add.w	r0, r5, r6
 80196b0:	eb08 0102 	add.w	r1, r8, r2
 80196b4:	d1e6      	bne.n	8019684 <rcutils_repl_str+0xe0>
 80196b6:	9b04      	ldr	r3, [sp, #16]
 80196b8:	1a9a      	subs	r2, r3, r2
 80196ba:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80196be:	f003 f8b2 	bl	801c826 <memcpy>
 80196c2:	9a03      	ldr	r2, [sp, #12]
 80196c4:	9905      	ldr	r1, [sp, #20]
 80196c6:	2300      	movs	r3, #0
 80196c8:	5453      	strb	r3, [r2, r1]
 80196ca:	e00b      	b.n	80196e4 <rcutils_repl_str+0x140>
 80196cc:	4620      	mov	r0, r4
 80196ce:	f8d9 3000 	ldr.w	r3, [r9]
 80196d2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80196d6:	3001      	adds	r0, #1
 80196d8:	4798      	blx	r3
 80196da:	9003      	str	r0, [sp, #12]
 80196dc:	b110      	cbz	r0, 80196e4 <rcutils_repl_str+0x140>
 80196de:	9901      	ldr	r1, [sp, #4]
 80196e0:	f003 f899 	bl	801c816 <strcpy>
 80196e4:	4638      	mov	r0, r7
 80196e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80196ea:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80196ee:	4798      	blx	r3
 80196f0:	9803      	ldr	r0, [sp, #12]
 80196f2:	b007      	add	sp, #28
 80196f4:	ecbd 8b02 	vpop	{d8}
 80196f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196fc:	4647      	mov	r7, r8
 80196fe:	2300      	movs	r3, #0
 8019700:	9303      	str	r3, [sp, #12]
 8019702:	e7ef      	b.n	80196e4 <rcutils_repl_str+0x140>
 8019704:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8019708:	e7db      	b.n	80196c2 <rcutils_repl_str+0x11e>
 801970a:	bf00      	nop

0801970c <rcutils_snprintf>:
 801970c:	b40c      	push	{r2, r3}
 801970e:	b530      	push	{r4, r5, lr}
 8019710:	b083      	sub	sp, #12
 8019712:	ab06      	add	r3, sp, #24
 8019714:	f853 2b04 	ldr.w	r2, [r3], #4
 8019718:	9301      	str	r3, [sp, #4]
 801971a:	b152      	cbz	r2, 8019732 <rcutils_snprintf+0x26>
 801971c:	b138      	cbz	r0, 801972e <rcutils_snprintf+0x22>
 801971e:	b141      	cbz	r1, 8019732 <rcutils_snprintf+0x26>
 8019720:	f002 feec 	bl	801c4fc <vsniprintf>
 8019724:	b003      	add	sp, #12
 8019726:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801972a:	b002      	add	sp, #8
 801972c:	4770      	bx	lr
 801972e:	2900      	cmp	r1, #0
 8019730:	d0f6      	beq.n	8019720 <rcutils_snprintf+0x14>
 8019732:	f003 f843 	bl	801c7bc <__errno>
 8019736:	2316      	movs	r3, #22
 8019738:	6003      	str	r3, [r0, #0]
 801973a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801973e:	e7f1      	b.n	8019724 <rcutils_snprintf+0x18>

08019740 <rcutils_vsnprintf>:
 8019740:	b570      	push	{r4, r5, r6, lr}
 8019742:	b13a      	cbz	r2, 8019754 <rcutils_vsnprintf+0x14>
 8019744:	b120      	cbz	r0, 8019750 <rcutils_vsnprintf+0x10>
 8019746:	b129      	cbz	r1, 8019754 <rcutils_vsnprintf+0x14>
 8019748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801974c:	f002 bed6 	b.w	801c4fc <vsniprintf>
 8019750:	2900      	cmp	r1, #0
 8019752:	d0f9      	beq.n	8019748 <rcutils_vsnprintf+0x8>
 8019754:	f003 f832 	bl	801c7bc <__errno>
 8019758:	2316      	movs	r3, #22
 801975a:	6003      	str	r3, [r0, #0]
 801975c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019760:	bd70      	pop	{r4, r5, r6, pc}
 8019762:	bf00      	nop

08019764 <rcutils_strdup>:
 8019764:	b084      	sub	sp, #16
 8019766:	b570      	push	{r4, r5, r6, lr}
 8019768:	b082      	sub	sp, #8
 801976a:	ac07      	add	r4, sp, #28
 801976c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8019770:	4605      	mov	r5, r0
 8019772:	b1b0      	cbz	r0, 80197a2 <rcutils_strdup+0x3e>
 8019774:	f7e6 fd5e 	bl	8000234 <strlen>
 8019778:	1c42      	adds	r2, r0, #1
 801977a:	9b07      	ldr	r3, [sp, #28]
 801977c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801977e:	9201      	str	r2, [sp, #4]
 8019780:	4606      	mov	r6, r0
 8019782:	4610      	mov	r0, r2
 8019784:	4798      	blx	r3
 8019786:	4604      	mov	r4, r0
 8019788:	b128      	cbz	r0, 8019796 <rcutils_strdup+0x32>
 801978a:	9a01      	ldr	r2, [sp, #4]
 801978c:	4629      	mov	r1, r5
 801978e:	f003 f84a 	bl	801c826 <memcpy>
 8019792:	2300      	movs	r3, #0
 8019794:	55a3      	strb	r3, [r4, r6]
 8019796:	4620      	mov	r0, r4
 8019798:	b002      	add	sp, #8
 801979a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801979e:	b004      	add	sp, #16
 80197a0:	4770      	bx	lr
 80197a2:	4604      	mov	r4, r0
 80197a4:	e7f7      	b.n	8019796 <rcutils_strdup+0x32>
 80197a6:	bf00      	nop

080197a8 <rcutils_strndup>:
 80197a8:	b082      	sub	sp, #8
 80197aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197ac:	ac06      	add	r4, sp, #24
 80197ae:	e884 000c 	stmia.w	r4, {r2, r3}
 80197b2:	4605      	mov	r5, r0
 80197b4:	b188      	cbz	r0, 80197da <rcutils_strndup+0x32>
 80197b6:	1c4f      	adds	r7, r1, #1
 80197b8:	460e      	mov	r6, r1
 80197ba:	4638      	mov	r0, r7
 80197bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80197be:	4790      	blx	r2
 80197c0:	4604      	mov	r4, r0
 80197c2:	b128      	cbz	r0, 80197d0 <rcutils_strndup+0x28>
 80197c4:	463a      	mov	r2, r7
 80197c6:	4629      	mov	r1, r5
 80197c8:	f003 f82d 	bl	801c826 <memcpy>
 80197cc:	2300      	movs	r3, #0
 80197ce:	55a3      	strb	r3, [r4, r6]
 80197d0:	4620      	mov	r0, r4
 80197d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80197d6:	b002      	add	sp, #8
 80197d8:	4770      	bx	lr
 80197da:	4604      	mov	r4, r0
 80197dc:	e7f8      	b.n	80197d0 <rcutils_strndup+0x28>
 80197de:	bf00      	nop

080197e0 <rcutils_get_zero_initialized_string_map>:
 80197e0:	4b01      	ldr	r3, [pc, #4]	@ (80197e8 <rcutils_get_zero_initialized_string_map+0x8>)
 80197e2:	2000      	movs	r0, #0
 80197e4:	6018      	str	r0, [r3, #0]
 80197e6:	4770      	bx	lr
 80197e8:	2000bbe0 	.word	0x2000bbe0

080197ec <rcutils_string_map_reserve>:
 80197ec:	2800      	cmp	r0, #0
 80197ee:	d05f      	beq.n	80198b0 <rcutils_string_map_reserve+0xc4>
 80197f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197f4:	460c      	mov	r4, r1
 80197f6:	6801      	ldr	r1, [r0, #0]
 80197f8:	b082      	sub	sp, #8
 80197fa:	4605      	mov	r5, r0
 80197fc:	b129      	cbz	r1, 801980a <rcutils_string_map_reserve+0x1e>
 80197fe:	68cb      	ldr	r3, [r1, #12]
 8019800:	42a3      	cmp	r3, r4
 8019802:	d906      	bls.n	8019812 <rcutils_string_map_reserve+0x26>
 8019804:	461c      	mov	r4, r3
 8019806:	2900      	cmp	r1, #0
 8019808:	d1f9      	bne.n	80197fe <rcutils_string_map_reserve+0x12>
 801980a:	201f      	movs	r0, #31
 801980c:	b002      	add	sp, #8
 801980e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019812:	688b      	ldr	r3, [r1, #8]
 8019814:	42a3      	cmp	r3, r4
 8019816:	d047      	beq.n	80198a8 <rcutils_string_map_reserve+0xbc>
 8019818:	6a0e      	ldr	r6, [r1, #32]
 801981a:	2c00      	cmp	r4, #0
 801981c:	d034      	beq.n	8019888 <rcutils_string_map_reserve+0x9c>
 801981e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8019822:	d243      	bcs.n	80198ac <rcutils_string_map_reserve+0xc0>
 8019824:	00a7      	lsls	r7, r4, #2
 8019826:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801982a:	6808      	ldr	r0, [r1, #0]
 801982c:	4632      	mov	r2, r6
 801982e:	4639      	mov	r1, r7
 8019830:	47c0      	blx	r8
 8019832:	2800      	cmp	r0, #0
 8019834:	d03a      	beq.n	80198ac <rcutils_string_map_reserve+0xc0>
 8019836:	682b      	ldr	r3, [r5, #0]
 8019838:	4632      	mov	r2, r6
 801983a:	6018      	str	r0, [r3, #0]
 801983c:	4639      	mov	r1, r7
 801983e:	6858      	ldr	r0, [r3, #4]
 8019840:	47c0      	blx	r8
 8019842:	2800      	cmp	r0, #0
 8019844:	d032      	beq.n	80198ac <rcutils_string_map_reserve+0xc0>
 8019846:	682d      	ldr	r5, [r5, #0]
 8019848:	68ab      	ldr	r3, [r5, #8]
 801984a:	6068      	str	r0, [r5, #4]
 801984c:	42a3      	cmp	r3, r4
 801984e:	d226      	bcs.n	801989e <rcutils_string_map_reserve+0xb2>
 8019850:	682a      	ldr	r2, [r5, #0]
 8019852:	eb00 0c07 	add.w	ip, r0, r7
 8019856:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801985a:	45e6      	cmp	lr, ip
 801985c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8019860:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8019864:	d203      	bcs.n	801986e <rcutils_string_map_reserve+0x82>
 8019866:	eb02 0c07 	add.w	ip, r2, r7
 801986a:	4566      	cmp	r6, ip
 801986c:	d322      	bcc.n	80198b4 <rcutils_string_map_reserve+0xc8>
 801986e:	1ae3      	subs	r3, r4, r3
 8019870:	009a      	lsls	r2, r3, #2
 8019872:	4670      	mov	r0, lr
 8019874:	2100      	movs	r1, #0
 8019876:	9201      	str	r2, [sp, #4]
 8019878:	f002 ff0c 	bl	801c694 <memset>
 801987c:	9a01      	ldr	r2, [sp, #4]
 801987e:	2100      	movs	r1, #0
 8019880:	4630      	mov	r0, r6
 8019882:	f002 ff07 	bl	801c694 <memset>
 8019886:	e00a      	b.n	801989e <rcutils_string_map_reserve+0xb2>
 8019888:	694f      	ldr	r7, [r1, #20]
 801988a:	6808      	ldr	r0, [r1, #0]
 801988c:	4631      	mov	r1, r6
 801988e:	47b8      	blx	r7
 8019890:	682b      	ldr	r3, [r5, #0]
 8019892:	4631      	mov	r1, r6
 8019894:	6858      	ldr	r0, [r3, #4]
 8019896:	601c      	str	r4, [r3, #0]
 8019898:	47b8      	blx	r7
 801989a:	682d      	ldr	r5, [r5, #0]
 801989c:	606c      	str	r4, [r5, #4]
 801989e:	2000      	movs	r0, #0
 80198a0:	60ac      	str	r4, [r5, #8]
 80198a2:	b002      	add	sp, #8
 80198a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198a8:	2000      	movs	r0, #0
 80198aa:	e7af      	b.n	801980c <rcutils_string_map_reserve+0x20>
 80198ac:	200a      	movs	r0, #10
 80198ae:	e7ad      	b.n	801980c <rcutils_string_map_reserve+0x20>
 80198b0:	200b      	movs	r0, #11
 80198b2:	4770      	bx	lr
 80198b4:	1f0b      	subs	r3, r1, #4
 80198b6:	4418      	add	r0, r3
 80198b8:	4413      	add	r3, r2
 80198ba:	3a04      	subs	r2, #4
 80198bc:	4417      	add	r7, r2
 80198be:	2200      	movs	r2, #0
 80198c0:	f843 2f04 	str.w	r2, [r3, #4]!
 80198c4:	42bb      	cmp	r3, r7
 80198c6:	f840 2f04 	str.w	r2, [r0, #4]!
 80198ca:	d1f9      	bne.n	80198c0 <rcutils_string_map_reserve+0xd4>
 80198cc:	e7e7      	b.n	801989e <rcutils_string_map_reserve+0xb2>
 80198ce:	bf00      	nop

080198d0 <rcutils_string_map_init>:
 80198d0:	b082      	sub	sp, #8
 80198d2:	b570      	push	{r4, r5, r6, lr}
 80198d4:	ac04      	add	r4, sp, #16
 80198d6:	e884 000c 	stmia.w	r4, {r2, r3}
 80198da:	b380      	cbz	r0, 801993e <rcutils_string_map_init+0x6e>
 80198dc:	6806      	ldr	r6, [r0, #0]
 80198de:	4604      	mov	r4, r0
 80198e0:	b12e      	cbz	r6, 80198ee <rcutils_string_map_init+0x1e>
 80198e2:	251e      	movs	r5, #30
 80198e4:	4628      	mov	r0, r5
 80198e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80198ea:	b002      	add	sp, #8
 80198ec:	4770      	bx	lr
 80198ee:	a804      	add	r0, sp, #16
 80198f0:	460d      	mov	r5, r1
 80198f2:	f7f6 ff4f 	bl	8010794 <rcutils_allocator_is_valid>
 80198f6:	b310      	cbz	r0, 801993e <rcutils_string_map_init+0x6e>
 80198f8:	9b04      	ldr	r3, [sp, #16]
 80198fa:	9908      	ldr	r1, [sp, #32]
 80198fc:	2024      	movs	r0, #36	@ 0x24
 80198fe:	4798      	blx	r3
 8019900:	6020      	str	r0, [r4, #0]
 8019902:	b310      	cbz	r0, 801994a <rcutils_string_map_init+0x7a>
 8019904:	f10d 0e10 	add.w	lr, sp, #16
 8019908:	e9c0 6600 	strd	r6, r6, [r0]
 801990c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8019910:	f100 0c10 	add.w	ip, r0, #16
 8019914:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019918:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801991c:	f8de 3000 	ldr.w	r3, [lr]
 8019920:	f8cc 3000 	str.w	r3, [ip]
 8019924:	4629      	mov	r1, r5
 8019926:	4620      	mov	r0, r4
 8019928:	f7ff ff60 	bl	80197ec <rcutils_string_map_reserve>
 801992c:	4605      	mov	r5, r0
 801992e:	2800      	cmp	r0, #0
 8019930:	d0d8      	beq.n	80198e4 <rcutils_string_map_init+0x14>
 8019932:	9b05      	ldr	r3, [sp, #20]
 8019934:	9908      	ldr	r1, [sp, #32]
 8019936:	6820      	ldr	r0, [r4, #0]
 8019938:	4798      	blx	r3
 801993a:	6026      	str	r6, [r4, #0]
 801993c:	e7d2      	b.n	80198e4 <rcutils_string_map_init+0x14>
 801993e:	250b      	movs	r5, #11
 8019940:	4628      	mov	r0, r5
 8019942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019946:	b002      	add	sp, #8
 8019948:	4770      	bx	lr
 801994a:	250a      	movs	r5, #10
 801994c:	e7ca      	b.n	80198e4 <rcutils_string_map_init+0x14>
 801994e:	bf00      	nop

08019950 <rcutils_string_map_fini>:
 8019950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019954:	b082      	sub	sp, #8
 8019956:	2800      	cmp	r0, #0
 8019958:	d03a      	beq.n	80199d0 <rcutils_string_map_fini+0x80>
 801995a:	6804      	ldr	r4, [r0, #0]
 801995c:	4606      	mov	r6, r0
 801995e:	2c00      	cmp	r4, #0
 8019960:	d032      	beq.n	80199c8 <rcutils_string_map_fini+0x78>
 8019962:	68a3      	ldr	r3, [r4, #8]
 8019964:	b32b      	cbz	r3, 80199b2 <rcutils_string_map_fini+0x62>
 8019966:	2500      	movs	r5, #0
 8019968:	6822      	ldr	r2, [r4, #0]
 801996a:	462f      	mov	r7, r5
 801996c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8019970:	b1e0      	cbz	r0, 80199ac <rcutils_string_map_fini+0x5c>
 8019972:	6a21      	ldr	r1, [r4, #32]
 8019974:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8019978:	9101      	str	r1, [sp, #4]
 801997a:	47c0      	blx	r8
 801997c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019980:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8019984:	9901      	ldr	r1, [sp, #4]
 8019986:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801998a:	47c0      	blx	r8
 801998c:	68e3      	ldr	r3, [r4, #12]
 801998e:	6862      	ldr	r2, [r4, #4]
 8019990:	3b01      	subs	r3, #1
 8019992:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8019996:	60e3      	str	r3, [r4, #12]
 8019998:	6834      	ldr	r4, [r6, #0]
 801999a:	68a3      	ldr	r3, [r4, #8]
 801999c:	3501      	adds	r5, #1
 801999e:	429d      	cmp	r5, r3
 80199a0:	d207      	bcs.n	80199b2 <rcutils_string_map_fini+0x62>
 80199a2:	6822      	ldr	r2, [r4, #0]
 80199a4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80199a8:	2800      	cmp	r0, #0
 80199aa:	d1e2      	bne.n	8019972 <rcutils_string_map_fini+0x22>
 80199ac:	3501      	adds	r5, #1
 80199ae:	429d      	cmp	r5, r3
 80199b0:	d3dc      	bcc.n	801996c <rcutils_string_map_fini+0x1c>
 80199b2:	2100      	movs	r1, #0
 80199b4:	4630      	mov	r0, r6
 80199b6:	f7ff ff19 	bl	80197ec <rcutils_string_map_reserve>
 80199ba:	4604      	mov	r4, r0
 80199bc:	b920      	cbnz	r0, 80199c8 <rcutils_string_map_fini+0x78>
 80199be:	6830      	ldr	r0, [r6, #0]
 80199c0:	6943      	ldr	r3, [r0, #20]
 80199c2:	6a01      	ldr	r1, [r0, #32]
 80199c4:	4798      	blx	r3
 80199c6:	6034      	str	r4, [r6, #0]
 80199c8:	4620      	mov	r0, r4
 80199ca:	b002      	add	sp, #8
 80199cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199d0:	240b      	movs	r4, #11
 80199d2:	4620      	mov	r0, r4
 80199d4:	b002      	add	sp, #8
 80199d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199da:	bf00      	nop

080199dc <rcutils_string_map_getn>:
 80199dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199e0:	b300      	cbz	r0, 8019a24 <rcutils_string_map_getn+0x48>
 80199e2:	6807      	ldr	r7, [r0, #0]
 80199e4:	b1ff      	cbz	r7, 8019a26 <rcutils_string_map_getn+0x4a>
 80199e6:	4688      	mov	r8, r1
 80199e8:	b1e1      	cbz	r1, 8019a24 <rcutils_string_map_getn+0x48>
 80199ea:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80199ee:	683e      	ldr	r6, [r7, #0]
 80199f0:	f1ba 0f00 	cmp.w	sl, #0
 80199f4:	d016      	beq.n	8019a24 <rcutils_string_map_getn+0x48>
 80199f6:	4691      	mov	r9, r2
 80199f8:	3e04      	subs	r6, #4
 80199fa:	2400      	movs	r4, #0
 80199fc:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8019a00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019a04:	4628      	mov	r0, r5
 8019a06:	3401      	adds	r4, #1
 8019a08:	b155      	cbz	r5, 8019a20 <rcutils_string_map_getn+0x44>
 8019a0a:	f7e6 fc13 	bl	8000234 <strlen>
 8019a0e:	4548      	cmp	r0, r9
 8019a10:	4602      	mov	r2, r0
 8019a12:	4629      	mov	r1, r5
 8019a14:	bf38      	it	cc
 8019a16:	464a      	movcc	r2, r9
 8019a18:	4640      	mov	r0, r8
 8019a1a:	f002 fe50 	bl	801c6be <strncmp>
 8019a1e:	b128      	cbz	r0, 8019a2c <rcutils_string_map_getn+0x50>
 8019a20:	45a2      	cmp	sl, r4
 8019a22:	d1eb      	bne.n	80199fc <rcutils_string_map_getn+0x20>
 8019a24:	2700      	movs	r7, #0
 8019a26:	4638      	mov	r0, r7
 8019a28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	f853 700b 	ldr.w	r7, [r3, fp]
 8019a32:	4638      	mov	r0, r7
 8019a34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019a38 <rmw_get_zero_initialized_context>:
 8019a38:	b510      	push	{r4, lr}
 8019a3a:	4604      	mov	r4, r0
 8019a3c:	3010      	adds	r0, #16
 8019a3e:	f7f6 ff3b 	bl	80108b8 <rmw_get_zero_initialized_init_options>
 8019a42:	2300      	movs	r3, #0
 8019a44:	2000      	movs	r0, #0
 8019a46:	2100      	movs	r1, #0
 8019a48:	e9c4 0100 	strd	r0, r1, [r4]
 8019a4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8019a50:	60a3      	str	r3, [r4, #8]
 8019a52:	4620      	mov	r0, r4
 8019a54:	bd10      	pop	{r4, pc}
 8019a56:	bf00      	nop

08019a58 <rmw_time_equal>:
 8019a58:	b4f0      	push	{r4, r5, r6, r7}
 8019a5a:	b084      	sub	sp, #16
 8019a5c:	ac04      	add	r4, sp, #16
 8019a5e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8019a62:	4603      	mov	r3, r0
 8019a64:	4924      	ldr	r1, [pc, #144]	@ (8019af8 <rmw_time_equal+0xa0>)
 8019a66:	9e03      	ldr	r6, [sp, #12]
 8019a68:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8019a6c:	2202      	movs	r2, #2
 8019a6e:	4299      	cmp	r1, r3
 8019a70:	41aa      	sbcs	r2, r5
 8019a72:	d330      	bcc.n	8019ad6 <rmw_time_equal+0x7e>
 8019a74:	4c21      	ldr	r4, [pc, #132]	@ (8019afc <rmw_time_equal+0xa4>)
 8019a76:	fba3 3204 	umull	r3, r2, r3, r4
 8019a7a:	fb04 2205 	mla	r2, r4, r5, r2
 8019a7e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019a82:	43dd      	mvns	r5, r3
 8019a84:	1a8c      	subs	r4, r1, r2
 8019a86:	4285      	cmp	r5, r0
 8019a88:	41b4      	sbcs	r4, r6
 8019a8a:	d332      	bcc.n	8019af2 <rmw_time_equal+0x9a>
 8019a8c:	eb10 0c03 	adds.w	ip, r0, r3
 8019a90:	eb42 0106 	adc.w	r1, r2, r6
 8019a94:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8019a98:	4817      	ldr	r0, [pc, #92]	@ (8019af8 <rmw_time_equal+0xa0>)
 8019a9a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8019a9c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8019a9e:	2202      	movs	r2, #2
 8019aa0:	4298      	cmp	r0, r3
 8019aa2:	41b2      	sbcs	r2, r6
 8019aa4:	d31c      	bcc.n	8019ae0 <rmw_time_equal+0x88>
 8019aa6:	4c15      	ldr	r4, [pc, #84]	@ (8019afc <rmw_time_equal+0xa4>)
 8019aa8:	fba3 3204 	umull	r3, r2, r3, r4
 8019aac:	fb04 2206 	mla	r2, r4, r6, r2
 8019ab0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8019ab4:	43de      	mvns	r6, r3
 8019ab6:	1a84      	subs	r4, r0, r2
 8019ab8:	42ae      	cmp	r6, r5
 8019aba:	41bc      	sbcs	r4, r7
 8019abc:	d315      	bcc.n	8019aea <rmw_time_equal+0x92>
 8019abe:	195b      	adds	r3, r3, r5
 8019ac0:	eb42 0207 	adc.w	r2, r2, r7
 8019ac4:	428a      	cmp	r2, r1
 8019ac6:	bf08      	it	eq
 8019ac8:	4563      	cmpeq	r3, ip
 8019aca:	bf0c      	ite	eq
 8019acc:	2001      	moveq	r0, #1
 8019ace:	2000      	movne	r0, #0
 8019ad0:	b004      	add	sp, #16
 8019ad2:	bcf0      	pop	{r4, r5, r6, r7}
 8019ad4:	4770      	bx	lr
 8019ad6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8019ada:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019ade:	e7d9      	b.n	8019a94 <rmw_time_equal+0x3c>
 8019ae0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019ae4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8019ae8:	e7ec      	b.n	8019ac4 <rmw_time_equal+0x6c>
 8019aea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019aee:	4602      	mov	r2, r0
 8019af0:	e7e8      	b.n	8019ac4 <rmw_time_equal+0x6c>
 8019af2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8019af6:	e7cd      	b.n	8019a94 <rmw_time_equal+0x3c>
 8019af8:	25c17d04 	.word	0x25c17d04
 8019afc:	3b9aca00 	.word	0x3b9aca00

08019b00 <rmw_time_total_nsec>:
 8019b00:	b470      	push	{r4, r5, r6}
 8019b02:	b085      	sub	sp, #20
 8019b04:	ac04      	add	r4, sp, #16
 8019b06:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8019b0a:	4603      	mov	r3, r0
 8019b0c:	4912      	ldr	r1, [pc, #72]	@ (8019b58 <rmw_time_total_nsec+0x58>)
 8019b0e:	9e03      	ldr	r6, [sp, #12]
 8019b10:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8019b14:	2202      	movs	r2, #2
 8019b16:	4299      	cmp	r1, r3
 8019b18:	41aa      	sbcs	r2, r5
 8019b1a:	d311      	bcc.n	8019b40 <rmw_time_total_nsec+0x40>
 8019b1c:	4c0f      	ldr	r4, [pc, #60]	@ (8019b5c <rmw_time_total_nsec+0x5c>)
 8019b1e:	fba3 3204 	umull	r3, r2, r3, r4
 8019b22:	fb04 2205 	mla	r2, r4, r5, r2
 8019b26:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019b2a:	43dd      	mvns	r5, r3
 8019b2c:	1a8c      	subs	r4, r1, r2
 8019b2e:	4285      	cmp	r5, r0
 8019b30:	41b4      	sbcs	r4, r6
 8019b32:	d30c      	bcc.n	8019b4e <rmw_time_total_nsec+0x4e>
 8019b34:	1818      	adds	r0, r3, r0
 8019b36:	eb42 0106 	adc.w	r1, r2, r6
 8019b3a:	b005      	add	sp, #20
 8019b3c:	bc70      	pop	{r4, r5, r6}
 8019b3e:	4770      	bx	lr
 8019b40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019b48:	b005      	add	sp, #20
 8019b4a:	bc70      	pop	{r4, r5, r6}
 8019b4c:	4770      	bx	lr
 8019b4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b52:	b005      	add	sp, #20
 8019b54:	bc70      	pop	{r4, r5, r6}
 8019b56:	4770      	bx	lr
 8019b58:	25c17d04 	.word	0x25c17d04
 8019b5c:	3b9aca00 	.word	0x3b9aca00

08019b60 <rmw_get_zero_initialized_message_info>:
 8019b60:	b510      	push	{r4, lr}
 8019b62:	2240      	movs	r2, #64	@ 0x40
 8019b64:	4604      	mov	r4, r0
 8019b66:	2100      	movs	r1, #0
 8019b68:	f002 fd94 	bl	801c694 <memset>
 8019b6c:	4620      	mov	r0, r4
 8019b6e:	bd10      	pop	{r4, pc}

08019b70 <rmw_validate_full_topic_name>:
 8019b70:	2800      	cmp	r0, #0
 8019b72:	d057      	beq.n	8019c24 <rmw_validate_full_topic_name+0xb4>
 8019b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b78:	460d      	mov	r5, r1
 8019b7a:	2900      	cmp	r1, #0
 8019b7c:	d054      	beq.n	8019c28 <rmw_validate_full_topic_name+0xb8>
 8019b7e:	4616      	mov	r6, r2
 8019b80:	4604      	mov	r4, r0
 8019b82:	f7e6 fb57 	bl	8000234 <strlen>
 8019b86:	b148      	cbz	r0, 8019b9c <rmw_validate_full_topic_name+0x2c>
 8019b88:	7823      	ldrb	r3, [r4, #0]
 8019b8a:	2b2f      	cmp	r3, #47	@ 0x2f
 8019b8c:	d00d      	beq.n	8019baa <rmw_validate_full_topic_name+0x3a>
 8019b8e:	2302      	movs	r3, #2
 8019b90:	602b      	str	r3, [r5, #0]
 8019b92:	b13e      	cbz	r6, 8019ba4 <rmw_validate_full_topic_name+0x34>
 8019b94:	2000      	movs	r0, #0
 8019b96:	6030      	str	r0, [r6, #0]
 8019b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b9c:	2301      	movs	r3, #1
 8019b9e:	602b      	str	r3, [r5, #0]
 8019ba0:	2e00      	cmp	r6, #0
 8019ba2:	d1f7      	bne.n	8019b94 <rmw_validate_full_topic_name+0x24>
 8019ba4:	2000      	movs	r0, #0
 8019ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019baa:	1e43      	subs	r3, r0, #1
 8019bac:	5ce2      	ldrb	r2, [r4, r3]
 8019bae:	2a2f      	cmp	r2, #47	@ 0x2f
 8019bb0:	d03c      	beq.n	8019c2c <rmw_validate_full_topic_name+0xbc>
 8019bb2:	1e63      	subs	r3, r4, #1
 8019bb4:	eb03 0800 	add.w	r8, r3, r0
 8019bb8:	f1c4 0e01 	rsb	lr, r4, #1
 8019bbc:	eb0e 0703 	add.w	r7, lr, r3
 8019bc0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8019bc4:	f021 0220 	bic.w	r2, r1, #32
 8019bc8:	3a41      	subs	r2, #65	@ 0x41
 8019bca:	2a19      	cmp	r2, #25
 8019bcc:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8019bd0:	d90b      	bls.n	8019bea <rmw_validate_full_topic_name+0x7a>
 8019bd2:	295f      	cmp	r1, #95	@ 0x5f
 8019bd4:	d009      	beq.n	8019bea <rmw_validate_full_topic_name+0x7a>
 8019bd6:	f1bc 0f0a 	cmp.w	ip, #10
 8019bda:	d906      	bls.n	8019bea <rmw_validate_full_topic_name+0x7a>
 8019bdc:	2304      	movs	r3, #4
 8019bde:	602b      	str	r3, [r5, #0]
 8019be0:	2e00      	cmp	r6, #0
 8019be2:	d0df      	beq.n	8019ba4 <rmw_validate_full_topic_name+0x34>
 8019be4:	6037      	str	r7, [r6, #0]
 8019be6:	2000      	movs	r0, #0
 8019be8:	e7d6      	b.n	8019b98 <rmw_validate_full_topic_name+0x28>
 8019bea:	4543      	cmp	r3, r8
 8019bec:	d1e6      	bne.n	8019bbc <rmw_validate_full_topic_name+0x4c>
 8019bee:	4f1a      	ldr	r7, [pc, #104]	@ (8019c58 <rmw_validate_full_topic_name+0xe8>)
 8019bf0:	2301      	movs	r3, #1
 8019bf2:	e004      	b.n	8019bfe <rmw_validate_full_topic_name+0x8e>
 8019bf4:	4298      	cmp	r0, r3
 8019bf6:	f104 0401 	add.w	r4, r4, #1
 8019bfa:	d91c      	bls.n	8019c36 <rmw_validate_full_topic_name+0xc6>
 8019bfc:	4613      	mov	r3, r2
 8019bfe:	4298      	cmp	r0, r3
 8019c00:	f103 0201 	add.w	r2, r3, #1
 8019c04:	d0f6      	beq.n	8019bf4 <rmw_validate_full_topic_name+0x84>
 8019c06:	7821      	ldrb	r1, [r4, #0]
 8019c08:	292f      	cmp	r1, #47	@ 0x2f
 8019c0a:	d1f3      	bne.n	8019bf4 <rmw_validate_full_topic_name+0x84>
 8019c0c:	7861      	ldrb	r1, [r4, #1]
 8019c0e:	292f      	cmp	r1, #47	@ 0x2f
 8019c10:	d01c      	beq.n	8019c4c <rmw_validate_full_topic_name+0xdc>
 8019c12:	5dc9      	ldrb	r1, [r1, r7]
 8019c14:	0749      	lsls	r1, r1, #29
 8019c16:	d5ed      	bpl.n	8019bf4 <rmw_validate_full_topic_name+0x84>
 8019c18:	2206      	movs	r2, #6
 8019c1a:	602a      	str	r2, [r5, #0]
 8019c1c:	2e00      	cmp	r6, #0
 8019c1e:	d0c1      	beq.n	8019ba4 <rmw_validate_full_topic_name+0x34>
 8019c20:	6033      	str	r3, [r6, #0]
 8019c22:	e7bf      	b.n	8019ba4 <rmw_validate_full_topic_name+0x34>
 8019c24:	200b      	movs	r0, #11
 8019c26:	4770      	bx	lr
 8019c28:	200b      	movs	r0, #11
 8019c2a:	e7b5      	b.n	8019b98 <rmw_validate_full_topic_name+0x28>
 8019c2c:	2203      	movs	r2, #3
 8019c2e:	602a      	str	r2, [r5, #0]
 8019c30:	2e00      	cmp	r6, #0
 8019c32:	d1f5      	bne.n	8019c20 <rmw_validate_full_topic_name+0xb0>
 8019c34:	e7b6      	b.n	8019ba4 <rmw_validate_full_topic_name+0x34>
 8019c36:	28f7      	cmp	r0, #247	@ 0xf7
 8019c38:	d802      	bhi.n	8019c40 <rmw_validate_full_topic_name+0xd0>
 8019c3a:	2000      	movs	r0, #0
 8019c3c:	6028      	str	r0, [r5, #0]
 8019c3e:	e7ab      	b.n	8019b98 <rmw_validate_full_topic_name+0x28>
 8019c40:	2307      	movs	r3, #7
 8019c42:	602b      	str	r3, [r5, #0]
 8019c44:	2e00      	cmp	r6, #0
 8019c46:	d0ad      	beq.n	8019ba4 <rmw_validate_full_topic_name+0x34>
 8019c48:	23f6      	movs	r3, #246	@ 0xf6
 8019c4a:	e7e9      	b.n	8019c20 <rmw_validate_full_topic_name+0xb0>
 8019c4c:	2205      	movs	r2, #5
 8019c4e:	602a      	str	r2, [r5, #0]
 8019c50:	2e00      	cmp	r6, #0
 8019c52:	d1e5      	bne.n	8019c20 <rmw_validate_full_topic_name+0xb0>
 8019c54:	e7a6      	b.n	8019ba4 <rmw_validate_full_topic_name+0x34>
 8019c56:	bf00      	nop
 8019c58:	0801f442 	.word	0x0801f442

08019c5c <rmw_validate_namespace_with_size>:
 8019c5c:	b340      	cbz	r0, 8019cb0 <rmw_validate_namespace_with_size+0x54>
 8019c5e:	b570      	push	{r4, r5, r6, lr}
 8019c60:	4614      	mov	r4, r2
 8019c62:	b0c2      	sub	sp, #264	@ 0x108
 8019c64:	b332      	cbz	r2, 8019cb4 <rmw_validate_namespace_with_size+0x58>
 8019c66:	2901      	cmp	r1, #1
 8019c68:	460d      	mov	r5, r1
 8019c6a:	461e      	mov	r6, r3
 8019c6c:	d102      	bne.n	8019c74 <rmw_validate_namespace_with_size+0x18>
 8019c6e:	7803      	ldrb	r3, [r0, #0]
 8019c70:	2b2f      	cmp	r3, #47	@ 0x2f
 8019c72:	d012      	beq.n	8019c9a <rmw_validate_namespace_with_size+0x3e>
 8019c74:	aa01      	add	r2, sp, #4
 8019c76:	4669      	mov	r1, sp
 8019c78:	f7ff ff7a 	bl	8019b70 <rmw_validate_full_topic_name>
 8019c7c:	b978      	cbnz	r0, 8019c9e <rmw_validate_namespace_with_size+0x42>
 8019c7e:	9b00      	ldr	r3, [sp, #0]
 8019c80:	b14b      	cbz	r3, 8019c96 <rmw_validate_namespace_with_size+0x3a>
 8019c82:	2b07      	cmp	r3, #7
 8019c84:	d007      	beq.n	8019c96 <rmw_validate_namespace_with_size+0x3a>
 8019c86:	1e5a      	subs	r2, r3, #1
 8019c88:	2a05      	cmp	r2, #5
 8019c8a:	d82b      	bhi.n	8019ce4 <rmw_validate_namespace_with_size+0x88>
 8019c8c:	e8df f002 	tbb	[pc, r2]
 8019c90:	1e212427 	.word	0x1e212427
 8019c94:	141b      	.short	0x141b
 8019c96:	2df5      	cmp	r5, #245	@ 0xf5
 8019c98:	d803      	bhi.n	8019ca2 <rmw_validate_namespace_with_size+0x46>
 8019c9a:	2000      	movs	r0, #0
 8019c9c:	6020      	str	r0, [r4, #0]
 8019c9e:	b042      	add	sp, #264	@ 0x108
 8019ca0:	bd70      	pop	{r4, r5, r6, pc}
 8019ca2:	2307      	movs	r3, #7
 8019ca4:	6023      	str	r3, [r4, #0]
 8019ca6:	2e00      	cmp	r6, #0
 8019ca8:	d0f9      	beq.n	8019c9e <rmw_validate_namespace_with_size+0x42>
 8019caa:	23f4      	movs	r3, #244	@ 0xf4
 8019cac:	6033      	str	r3, [r6, #0]
 8019cae:	e7f6      	b.n	8019c9e <rmw_validate_namespace_with_size+0x42>
 8019cb0:	200b      	movs	r0, #11
 8019cb2:	4770      	bx	lr
 8019cb4:	200b      	movs	r0, #11
 8019cb6:	e7f2      	b.n	8019c9e <rmw_validate_namespace_with_size+0x42>
 8019cb8:	2306      	movs	r3, #6
 8019cba:	6023      	str	r3, [r4, #0]
 8019cbc:	2e00      	cmp	r6, #0
 8019cbe:	d0ee      	beq.n	8019c9e <rmw_validate_namespace_with_size+0x42>
 8019cc0:	9b01      	ldr	r3, [sp, #4]
 8019cc2:	6033      	str	r3, [r6, #0]
 8019cc4:	e7eb      	b.n	8019c9e <rmw_validate_namespace_with_size+0x42>
 8019cc6:	2305      	movs	r3, #5
 8019cc8:	6023      	str	r3, [r4, #0]
 8019cca:	e7f7      	b.n	8019cbc <rmw_validate_namespace_with_size+0x60>
 8019ccc:	2304      	movs	r3, #4
 8019cce:	6023      	str	r3, [r4, #0]
 8019cd0:	e7f4      	b.n	8019cbc <rmw_validate_namespace_with_size+0x60>
 8019cd2:	2303      	movs	r3, #3
 8019cd4:	6023      	str	r3, [r4, #0]
 8019cd6:	e7f1      	b.n	8019cbc <rmw_validate_namespace_with_size+0x60>
 8019cd8:	2302      	movs	r3, #2
 8019cda:	6023      	str	r3, [r4, #0]
 8019cdc:	e7ee      	b.n	8019cbc <rmw_validate_namespace_with_size+0x60>
 8019cde:	2301      	movs	r3, #1
 8019ce0:	6023      	str	r3, [r4, #0]
 8019ce2:	e7eb      	b.n	8019cbc <rmw_validate_namespace_with_size+0x60>
 8019ce4:	4a03      	ldr	r2, [pc, #12]	@ (8019cf4 <rmw_validate_namespace_with_size+0x98>)
 8019ce6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019cea:	a802      	add	r0, sp, #8
 8019cec:	f7ff fd0e 	bl	801970c <rcutils_snprintf>
 8019cf0:	2001      	movs	r0, #1
 8019cf2:	e7d4      	b.n	8019c9e <rmw_validate_namespace_with_size+0x42>
 8019cf4:	0801ef70 	.word	0x0801ef70

08019cf8 <rmw_validate_namespace>:
 8019cf8:	b168      	cbz	r0, 8019d16 <rmw_validate_namespace+0x1e>
 8019cfa:	b570      	push	{r4, r5, r6, lr}
 8019cfc:	460d      	mov	r5, r1
 8019cfe:	4616      	mov	r6, r2
 8019d00:	4604      	mov	r4, r0
 8019d02:	f7e6 fa97 	bl	8000234 <strlen>
 8019d06:	4633      	mov	r3, r6
 8019d08:	4601      	mov	r1, r0
 8019d0a:	462a      	mov	r2, r5
 8019d0c:	4620      	mov	r0, r4
 8019d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d12:	f7ff bfa3 	b.w	8019c5c <rmw_validate_namespace_with_size>
 8019d16:	200b      	movs	r0, #11
 8019d18:	4770      	bx	lr
 8019d1a:	bf00      	nop

08019d1c <rmw_namespace_validation_result_string>:
 8019d1c:	2807      	cmp	r0, #7
 8019d1e:	bf9a      	itte	ls
 8019d20:	4b02      	ldrls	r3, [pc, #8]	@ (8019d2c <rmw_namespace_validation_result_string+0x10>)
 8019d22:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8019d26:	4802      	ldrhi	r0, [pc, #8]	@ (8019d30 <rmw_namespace_validation_result_string+0x14>)
 8019d28:	4770      	bx	lr
 8019d2a:	bf00      	nop
 8019d2c:	0801f168 	.word	0x0801f168
 8019d30:	0801efc0 	.word	0x0801efc0

08019d34 <rmw_validate_node_name>:
 8019d34:	2800      	cmp	r0, #0
 8019d36:	d03b      	beq.n	8019db0 <rmw_validate_node_name+0x7c>
 8019d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d3c:	460d      	mov	r5, r1
 8019d3e:	2900      	cmp	r1, #0
 8019d40:	d038      	beq.n	8019db4 <rmw_validate_node_name+0x80>
 8019d42:	4616      	mov	r6, r2
 8019d44:	4604      	mov	r4, r0
 8019d46:	f7e6 fa75 	bl	8000234 <strlen>
 8019d4a:	b1e0      	cbz	r0, 8019d86 <rmw_validate_node_name+0x52>
 8019d4c:	1e63      	subs	r3, r4, #1
 8019d4e:	eb03 0800 	add.w	r8, r3, r0
 8019d52:	f1c4 0101 	rsb	r1, r4, #1
 8019d56:	18cf      	adds	r7, r1, r3
 8019d58:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8019d5c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8019d60:	f02e 0c20 	bic.w	ip, lr, #32
 8019d64:	2a09      	cmp	r2, #9
 8019d66:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8019d6a:	d914      	bls.n	8019d96 <rmw_validate_node_name+0x62>
 8019d6c:	f1bc 0f19 	cmp.w	ip, #25
 8019d70:	d911      	bls.n	8019d96 <rmw_validate_node_name+0x62>
 8019d72:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8019d76:	d00e      	beq.n	8019d96 <rmw_validate_node_name+0x62>
 8019d78:	2302      	movs	r3, #2
 8019d7a:	602b      	str	r3, [r5, #0]
 8019d7c:	b106      	cbz	r6, 8019d80 <rmw_validate_node_name+0x4c>
 8019d7e:	6037      	str	r7, [r6, #0]
 8019d80:	2000      	movs	r0, #0
 8019d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d86:	2301      	movs	r3, #1
 8019d88:	602b      	str	r3, [r5, #0]
 8019d8a:	2e00      	cmp	r6, #0
 8019d8c:	d0f8      	beq.n	8019d80 <rmw_validate_node_name+0x4c>
 8019d8e:	2000      	movs	r0, #0
 8019d90:	6030      	str	r0, [r6, #0]
 8019d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d96:	4543      	cmp	r3, r8
 8019d98:	d1dd      	bne.n	8019d56 <rmw_validate_node_name+0x22>
 8019d9a:	7822      	ldrb	r2, [r4, #0]
 8019d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8019dd4 <rmw_validate_node_name+0xa0>)
 8019d9e:	5cd3      	ldrb	r3, [r2, r3]
 8019da0:	f013 0304 	ands.w	r3, r3, #4
 8019da4:	d110      	bne.n	8019dc8 <rmw_validate_node_name+0x94>
 8019da6:	28ff      	cmp	r0, #255	@ 0xff
 8019da8:	d806      	bhi.n	8019db8 <rmw_validate_node_name+0x84>
 8019daa:	602b      	str	r3, [r5, #0]
 8019dac:	4618      	mov	r0, r3
 8019dae:	e7e8      	b.n	8019d82 <rmw_validate_node_name+0x4e>
 8019db0:	200b      	movs	r0, #11
 8019db2:	4770      	bx	lr
 8019db4:	200b      	movs	r0, #11
 8019db6:	e7e4      	b.n	8019d82 <rmw_validate_node_name+0x4e>
 8019db8:	2204      	movs	r2, #4
 8019dba:	602a      	str	r2, [r5, #0]
 8019dbc:	2e00      	cmp	r6, #0
 8019dbe:	d0df      	beq.n	8019d80 <rmw_validate_node_name+0x4c>
 8019dc0:	22fe      	movs	r2, #254	@ 0xfe
 8019dc2:	6032      	str	r2, [r6, #0]
 8019dc4:	4618      	mov	r0, r3
 8019dc6:	e7dc      	b.n	8019d82 <rmw_validate_node_name+0x4e>
 8019dc8:	2303      	movs	r3, #3
 8019dca:	602b      	str	r3, [r5, #0]
 8019dcc:	2e00      	cmp	r6, #0
 8019dce:	d1de      	bne.n	8019d8e <rmw_validate_node_name+0x5a>
 8019dd0:	e7d6      	b.n	8019d80 <rmw_validate_node_name+0x4c>
 8019dd2:	bf00      	nop
 8019dd4:	0801f442 	.word	0x0801f442

08019dd8 <rmw_node_name_validation_result_string>:
 8019dd8:	2804      	cmp	r0, #4
 8019dda:	bf9a      	itte	ls
 8019ddc:	4b02      	ldrls	r3, [pc, #8]	@ (8019de8 <rmw_node_name_validation_result_string+0x10>)
 8019dde:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8019de2:	4802      	ldrhi	r0, [pc, #8]	@ (8019dec <rmw_node_name_validation_result_string+0x14>)
 8019de4:	4770      	bx	lr
 8019de6:	bf00      	nop
 8019de8:	0801f274 	.word	0x0801f274
 8019dec:	0801f188 	.word	0x0801f188

08019df0 <on_status>:
 8019df0:	b082      	sub	sp, #8
 8019df2:	b002      	add	sp, #8
 8019df4:	4770      	bx	lr
 8019df6:	bf00      	nop

08019df8 <on_topic>:
 8019df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dfc:	4a22      	ldr	r2, [pc, #136]	@ (8019e88 <on_topic+0x90>)
 8019dfe:	b094      	sub	sp, #80	@ 0x50
 8019e00:	6812      	ldr	r2, [r2, #0]
 8019e02:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8019e04:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019e08:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8019e0c:	b3c2      	cbz	r2, 8019e80 <on_topic+0x88>
 8019e0e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8019e12:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8019e16:	e001      	b.n	8019e1c <on_topic+0x24>
 8019e18:	6852      	ldr	r2, [r2, #4]
 8019e1a:	b38a      	cbz	r2, 8019e80 <on_topic+0x88>
 8019e1c:	6894      	ldr	r4, [r2, #8]
 8019e1e:	8aa3      	ldrh	r3, [r4, #20]
 8019e20:	428b      	cmp	r3, r1
 8019e22:	d1f9      	bne.n	8019e18 <on_topic+0x20>
 8019e24:	7da3      	ldrb	r3, [r4, #22]
 8019e26:	4283      	cmp	r3, r0
 8019e28:	d1f6      	bne.n	8019e18 <on_topic+0x20>
 8019e2a:	2248      	movs	r2, #72	@ 0x48
 8019e2c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019e30:	4668      	mov	r0, sp
 8019e32:	f002 fcf8 	bl	801c826 <memcpy>
 8019e36:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8019e3a:	cb0c      	ldmia	r3, {r2, r3}
 8019e3c:	4620      	mov	r0, r4
 8019e3e:	f7f7 fe3f 	bl	8011ac0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019e42:	4607      	mov	r7, r0
 8019e44:	b1e0      	cbz	r0, 8019e80 <on_topic+0x88>
 8019e46:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8019e4a:	4632      	mov	r2, r6
 8019e4c:	4628      	mov	r0, r5
 8019e4e:	f108 0110 	add.w	r1, r8, #16
 8019e52:	f7f8 fe73 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8019e56:	b930      	cbnz	r0, 8019e66 <on_topic+0x6e>
 8019e58:	480c      	ldr	r0, [pc, #48]	@ (8019e8c <on_topic+0x94>)
 8019e5a:	4639      	mov	r1, r7
 8019e5c:	b014      	add	sp, #80	@ 0x50
 8019e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019e62:	f000 b8bd 	b.w	8019fe0 <put_memory>
 8019e66:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8019e6a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8019e6e:	f7f7 fc25 	bl	80116bc <rmw_uros_epoch_nanos>
 8019e72:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8019e76:	2305      	movs	r3, #5
 8019e78:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019e7c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8019e80:	b014      	add	sp, #80	@ 0x50
 8019e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e86:	bf00      	nop
 8019e88:	2000bb24 	.word	0x2000bb24
 8019e8c:	2000bb14 	.word	0x2000bb14

08019e90 <on_request>:
 8019e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e94:	4823      	ldr	r0, [pc, #140]	@ (8019f24 <on_request+0x94>)
 8019e96:	b094      	sub	sp, #80	@ 0x50
 8019e98:	6800      	ldr	r0, [r0, #0]
 8019e9a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8019e9c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019ea0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019ea2:	2800      	cmp	r0, #0
 8019ea4:	d03b      	beq.n	8019f1e <on_request+0x8e>
 8019ea6:	461d      	mov	r5, r3
 8019ea8:	e001      	b.n	8019eae <on_request+0x1e>
 8019eaa:	6840      	ldr	r0, [r0, #4]
 8019eac:	b3b8      	cbz	r0, 8019f1e <on_request+0x8e>
 8019eae:	6884      	ldr	r4, [r0, #8]
 8019eb0:	8b21      	ldrh	r1, [r4, #24]
 8019eb2:	4291      	cmp	r1, r2
 8019eb4:	d1f9      	bne.n	8019eaa <on_request+0x1a>
 8019eb6:	2248      	movs	r2, #72	@ 0x48
 8019eb8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019ebc:	4668      	mov	r0, sp
 8019ebe:	f002 fcb2 	bl	801c826 <memcpy>
 8019ec2:	f104 0320 	add.w	r3, r4, #32
 8019ec6:	cb0c      	ldmia	r3, {r2, r3}
 8019ec8:	4620      	mov	r0, r4
 8019eca:	f7f7 fdf9 	bl	8011ac0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019ece:	4680      	mov	r8, r0
 8019ed0:	b328      	cbz	r0, 8019f1e <on_request+0x8e>
 8019ed2:	4638      	mov	r0, r7
 8019ed4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8019ed8:	4632      	mov	r2, r6
 8019eda:	f107 0110 	add.w	r1, r7, #16
 8019ede:	f7f8 fe2d 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8019ee2:	b930      	cbnz	r0, 8019ef2 <on_request+0x62>
 8019ee4:	4810      	ldr	r0, [pc, #64]	@ (8019f28 <on_request+0x98>)
 8019ee6:	4641      	mov	r1, r8
 8019ee8:	b014      	add	sp, #80	@ 0x50
 8019eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019eee:	f000 b877 	b.w	8019fe0 <put_memory>
 8019ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ef4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8019ef8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8019efc:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8019f00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019f04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019f08:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019f0c:	f7f7 fbd6 	bl	80116bc <rmw_uros_epoch_nanos>
 8019f10:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8019f14:	2303      	movs	r3, #3
 8019f16:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019f1a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8019f1e:	b014      	add	sp, #80	@ 0x50
 8019f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f24:	2000baf4 	.word	0x2000baf4
 8019f28:	2000bb14 	.word	0x2000bb14

08019f2c <on_reply>:
 8019f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f30:	4821      	ldr	r0, [pc, #132]	@ (8019fb8 <on_reply+0x8c>)
 8019f32:	b094      	sub	sp, #80	@ 0x50
 8019f34:	6800      	ldr	r0, [r0, #0]
 8019f36:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8019f38:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019f3c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019f3e:	b3b8      	cbz	r0, 8019fb0 <on_reply+0x84>
 8019f40:	461d      	mov	r5, r3
 8019f42:	e001      	b.n	8019f48 <on_reply+0x1c>
 8019f44:	6840      	ldr	r0, [r0, #4]
 8019f46:	b398      	cbz	r0, 8019fb0 <on_reply+0x84>
 8019f48:	6884      	ldr	r4, [r0, #8]
 8019f4a:	8b21      	ldrh	r1, [r4, #24]
 8019f4c:	4291      	cmp	r1, r2
 8019f4e:	d1f9      	bne.n	8019f44 <on_reply+0x18>
 8019f50:	2248      	movs	r2, #72	@ 0x48
 8019f52:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019f56:	4668      	mov	r0, sp
 8019f58:	f002 fc65 	bl	801c826 <memcpy>
 8019f5c:	f104 0320 	add.w	r3, r4, #32
 8019f60:	cb0c      	ldmia	r3, {r2, r3}
 8019f62:	4620      	mov	r0, r4
 8019f64:	f7f7 fdac 	bl	8011ac0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019f68:	4680      	mov	r8, r0
 8019f6a:	b308      	cbz	r0, 8019fb0 <on_reply+0x84>
 8019f6c:	4638      	mov	r0, r7
 8019f6e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8019f72:	4632      	mov	r2, r6
 8019f74:	f107 0110 	add.w	r1, r7, #16
 8019f78:	f7f8 fde0 	bl	8012b3c <ucdr_deserialize_array_uint8_t>
 8019f7c:	b930      	cbnz	r0, 8019f8c <on_reply+0x60>
 8019f7e:	480f      	ldr	r0, [pc, #60]	@ (8019fbc <on_reply+0x90>)
 8019f80:	4641      	mov	r1, r8
 8019f82:	b014      	add	sp, #80	@ 0x50
 8019f84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f88:	f000 b82a 	b.w	8019fe0 <put_memory>
 8019f8c:	2200      	movs	r2, #0
 8019f8e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8019f92:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8019f96:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8019f9a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8019f9e:	f7f7 fb8d 	bl	80116bc <rmw_uros_epoch_nanos>
 8019fa2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8019fa6:	2304      	movs	r3, #4
 8019fa8:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019fac:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8019fb0:	b014      	add	sp, #80	@ 0x50
 8019fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fb6:	bf00      	nop
 8019fb8:	2000713c 	.word	0x2000713c
 8019fbc:	2000bb14 	.word	0x2000bb14

08019fc0 <get_memory>:
 8019fc0:	4603      	mov	r3, r0
 8019fc2:	6840      	ldr	r0, [r0, #4]
 8019fc4:	b158      	cbz	r0, 8019fde <get_memory+0x1e>
 8019fc6:	6842      	ldr	r2, [r0, #4]
 8019fc8:	605a      	str	r2, [r3, #4]
 8019fca:	b10a      	cbz	r2, 8019fd0 <get_memory+0x10>
 8019fcc:	2100      	movs	r1, #0
 8019fce:	6011      	str	r1, [r2, #0]
 8019fd0:	681a      	ldr	r2, [r3, #0]
 8019fd2:	6042      	str	r2, [r0, #4]
 8019fd4:	b102      	cbz	r2, 8019fd8 <get_memory+0x18>
 8019fd6:	6010      	str	r0, [r2, #0]
 8019fd8:	2200      	movs	r2, #0
 8019fda:	6002      	str	r2, [r0, #0]
 8019fdc:	6018      	str	r0, [r3, #0]
 8019fde:	4770      	bx	lr

08019fe0 <put_memory>:
 8019fe0:	680b      	ldr	r3, [r1, #0]
 8019fe2:	b10b      	cbz	r3, 8019fe8 <put_memory+0x8>
 8019fe4:	684a      	ldr	r2, [r1, #4]
 8019fe6:	605a      	str	r2, [r3, #4]
 8019fe8:	684a      	ldr	r2, [r1, #4]
 8019fea:	b102      	cbz	r2, 8019fee <put_memory+0xe>
 8019fec:	6013      	str	r3, [r2, #0]
 8019fee:	6803      	ldr	r3, [r0, #0]
 8019ff0:	428b      	cmp	r3, r1
 8019ff2:	6843      	ldr	r3, [r0, #4]
 8019ff4:	bf08      	it	eq
 8019ff6:	6002      	streq	r2, [r0, #0]
 8019ff8:	604b      	str	r3, [r1, #4]
 8019ffa:	b103      	cbz	r3, 8019ffe <put_memory+0x1e>
 8019ffc:	6019      	str	r1, [r3, #0]
 8019ffe:	2300      	movs	r3, #0
 801a000:	600b      	str	r3, [r1, #0]
 801a002:	6041      	str	r1, [r0, #4]
 801a004:	4770      	bx	lr
 801a006:	bf00      	nop

0801a008 <rmw_destroy_client>:
 801a008:	b570      	push	{r4, r5, r6, lr}
 801a00a:	b128      	cbz	r0, 801a018 <rmw_destroy_client+0x10>
 801a00c:	4604      	mov	r4, r0
 801a00e:	6800      	ldr	r0, [r0, #0]
 801a010:	460d      	mov	r5, r1
 801a012:	f7f7 ff65 	bl	8011ee0 <is_uxrce_rmw_identifier_valid>
 801a016:	b910      	cbnz	r0, 801a01e <rmw_destroy_client+0x16>
 801a018:	2401      	movs	r4, #1
 801a01a:	4620      	mov	r0, r4
 801a01c:	bd70      	pop	{r4, r5, r6, pc}
 801a01e:	6863      	ldr	r3, [r4, #4]
 801a020:	2b00      	cmp	r3, #0
 801a022:	d0f9      	beq.n	801a018 <rmw_destroy_client+0x10>
 801a024:	2d00      	cmp	r5, #0
 801a026:	d0f7      	beq.n	801a018 <rmw_destroy_client+0x10>
 801a028:	6828      	ldr	r0, [r5, #0]
 801a02a:	f7f7 ff59 	bl	8011ee0 <is_uxrce_rmw_identifier_valid>
 801a02e:	2800      	cmp	r0, #0
 801a030:	d0f2      	beq.n	801a018 <rmw_destroy_client+0x10>
 801a032:	686e      	ldr	r6, [r5, #4]
 801a034:	2e00      	cmp	r6, #0
 801a036:	d0ef      	beq.n	801a018 <rmw_destroy_client+0x10>
 801a038:	6864      	ldr	r4, [r4, #4]
 801a03a:	6932      	ldr	r2, [r6, #16]
 801a03c:	6920      	ldr	r0, [r4, #16]
 801a03e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a042:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a046:	6819      	ldr	r1, [r3, #0]
 801a048:	f7f9 f99e 	bl	8013388 <uxr_buffer_cancel_data>
 801a04c:	4602      	mov	r2, r0
 801a04e:	6920      	ldr	r0, [r4, #16]
 801a050:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a054:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a058:	f7f7 fe28 	bl	8011cac <run_xrce_session>
 801a05c:	6920      	ldr	r0, [r4, #16]
 801a05e:	6932      	ldr	r2, [r6, #16]
 801a060:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a064:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a068:	6819      	ldr	r1, [r3, #0]
 801a06a:	f7f8 fecd 	bl	8012e08 <uxr_buffer_delete_entity>
 801a06e:	4602      	mov	r2, r0
 801a070:	6920      	ldr	r0, [r4, #16]
 801a072:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a076:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a07a:	f7f7 fe17 	bl	8011cac <run_xrce_session>
 801a07e:	2800      	cmp	r0, #0
 801a080:	4628      	mov	r0, r5
 801a082:	bf14      	ite	ne
 801a084:	2400      	movne	r4, #0
 801a086:	2402      	moveq	r4, #2
 801a088:	f7f7 fcf8 	bl	8011a7c <rmw_uxrce_fini_client_memory>
 801a08c:	e7c5      	b.n	801a01a <rmw_destroy_client+0x12>
 801a08e:	bf00      	nop

0801a090 <rmw_get_implementation_identifier>:
 801a090:	4b01      	ldr	r3, [pc, #4]	@ (801a098 <rmw_get_implementation_identifier+0x8>)
 801a092:	6818      	ldr	r0, [r3, #0]
 801a094:	4770      	bx	lr
 801a096:	bf00      	nop
 801a098:	0801f2a0 	.word	0x0801f2a0

0801a09c <create_topic>:
 801a09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0a0:	4605      	mov	r5, r0
 801a0a2:	b084      	sub	sp, #16
 801a0a4:	4822      	ldr	r0, [pc, #136]	@ (801a130 <create_topic+0x94>)
 801a0a6:	460f      	mov	r7, r1
 801a0a8:	4616      	mov	r6, r2
 801a0aa:	f7ff ff89 	bl	8019fc0 <get_memory>
 801a0ae:	4604      	mov	r4, r0
 801a0b0:	2800      	cmp	r0, #0
 801a0b2:	d039      	beq.n	801a128 <create_topic+0x8c>
 801a0b4:	692b      	ldr	r3, [r5, #16]
 801a0b6:	6884      	ldr	r4, [r0, #8]
 801a0b8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 801a138 <create_topic+0x9c>
 801a0bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a0c0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801a0c4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801a0c8:	1c42      	adds	r2, r0, #1
 801a0ca:	2102      	movs	r1, #2
 801a0cc:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801a0d0:	f7f9 f8f0 	bl	80132b4 <uxr_object_id>
 801a0d4:	223c      	movs	r2, #60	@ 0x3c
 801a0d6:	6120      	str	r0, [r4, #16]
 801a0d8:	4641      	mov	r1, r8
 801a0da:	4638      	mov	r0, r7
 801a0dc:	f7f7 fee6 	bl	8011eac <generate_topic_name>
 801a0e0:	b1f0      	cbz	r0, 801a120 <create_topic+0x84>
 801a0e2:	4f14      	ldr	r7, [pc, #80]	@ (801a134 <create_topic+0x98>)
 801a0e4:	4630      	mov	r0, r6
 801a0e6:	2264      	movs	r2, #100	@ 0x64
 801a0e8:	4639      	mov	r1, r7
 801a0ea:	f7f7 feaf 	bl	8011e4c <generate_type_name>
 801a0ee:	b1b8      	cbz	r0, 801a120 <create_topic+0x84>
 801a0f0:	6928      	ldr	r0, [r5, #16]
 801a0f2:	2306      	movs	r3, #6
 801a0f4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801a0f8:	f8cd 8000 	str.w	r8, [sp]
 801a0fc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801a100:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a104:	6811      	ldr	r1, [r2, #0]
 801a106:	696b      	ldr	r3, [r5, #20]
 801a108:	6922      	ldr	r2, [r4, #16]
 801a10a:	f7f8 fefb 	bl	8012f04 <uxr_buffer_create_topic_bin>
 801a10e:	4602      	mov	r2, r0
 801a110:	6928      	ldr	r0, [r5, #16]
 801a112:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801a116:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801a11a:	f7f7 fdc7 	bl	8011cac <run_xrce_session>
 801a11e:	b918      	cbnz	r0, 801a128 <create_topic+0x8c>
 801a120:	4620      	mov	r0, r4
 801a122:	f7f7 fcc1 	bl	8011aa8 <rmw_uxrce_fini_topic_memory>
 801a126:	2400      	movs	r4, #0
 801a128:	4620      	mov	r0, r4
 801a12a:	b004      	add	sp, #16
 801a12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a130:	2000bb34 	.word	0x2000bb34
 801a134:	2000bc20 	.word	0x2000bc20
 801a138:	2000bbe4 	.word	0x2000bbe4

0801a13c <destroy_topic>:
 801a13c:	b538      	push	{r3, r4, r5, lr}
 801a13e:	6985      	ldr	r5, [r0, #24]
 801a140:	b1d5      	cbz	r5, 801a178 <destroy_topic+0x3c>
 801a142:	4604      	mov	r4, r0
 801a144:	6928      	ldr	r0, [r5, #16]
 801a146:	6922      	ldr	r2, [r4, #16]
 801a148:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a14c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a150:	6819      	ldr	r1, [r3, #0]
 801a152:	f7f8 fe59 	bl	8012e08 <uxr_buffer_delete_entity>
 801a156:	4602      	mov	r2, r0
 801a158:	6928      	ldr	r0, [r5, #16]
 801a15a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a15e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a162:	f7f7 fda3 	bl	8011cac <run_xrce_session>
 801a166:	2800      	cmp	r0, #0
 801a168:	4620      	mov	r0, r4
 801a16a:	bf14      	ite	ne
 801a16c:	2400      	movne	r4, #0
 801a16e:	2402      	moveq	r4, #2
 801a170:	f7f7 fc9a 	bl	8011aa8 <rmw_uxrce_fini_topic_memory>
 801a174:	4620      	mov	r0, r4
 801a176:	bd38      	pop	{r3, r4, r5, pc}
 801a178:	2401      	movs	r4, #1
 801a17a:	4620      	mov	r0, r4
 801a17c:	bd38      	pop	{r3, r4, r5, pc}
 801a17e:	bf00      	nop

0801a180 <rmw_send_request>:
 801a180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a184:	4604      	mov	r4, r0
 801a186:	6800      	ldr	r0, [r0, #0]
 801a188:	b08b      	sub	sp, #44	@ 0x2c
 801a18a:	460e      	mov	r6, r1
 801a18c:	4615      	mov	r5, r2
 801a18e:	b128      	cbz	r0, 801a19c <rmw_send_request+0x1c>
 801a190:	4b21      	ldr	r3, [pc, #132]	@ (801a218 <rmw_send_request+0x98>)
 801a192:	6819      	ldr	r1, [r3, #0]
 801a194:	f7e6 f844 	bl	8000220 <strcmp>
 801a198:	2800      	cmp	r0, #0
 801a19a:	d139      	bne.n	801a210 <rmw_send_request+0x90>
 801a19c:	6864      	ldr	r4, [r4, #4]
 801a19e:	6963      	ldr	r3, [r4, #20]
 801a1a0:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801a1a4:	689b      	ldr	r3, [r3, #8]
 801a1a6:	4798      	blx	r3
 801a1a8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801a1ac:	4630      	mov	r0, r6
 801a1ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a1b2:	4798      	blx	r3
 801a1b4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a1b8:	9000      	str	r0, [sp, #0]
 801a1ba:	6922      	ldr	r2, [r4, #16]
 801a1bc:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801a1be:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801a1c2:	ab02      	add	r3, sp, #8
 801a1c4:	f7fb f99a 	bl	80154fc <uxr_prepare_output_stream>
 801a1c8:	2700      	movs	r7, #0
 801a1ca:	6028      	str	r0, [r5, #0]
 801a1cc:	606f      	str	r7, [r5, #4]
 801a1ce:	b198      	cbz	r0, 801a1f8 <rmw_send_request+0x78>
 801a1d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801a1d4:	a902      	add	r1, sp, #8
 801a1d6:	4630      	mov	r0, r6
 801a1d8:	4798      	blx	r3
 801a1da:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801a1de:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a1e2:	2b01      	cmp	r3, #1
 801a1e4:	d00c      	beq.n	801a200 <rmw_send_request+0x80>
 801a1e6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801a1e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a1ec:	f7f9 feb2 	bl	8013f54 <uxr_run_session_until_confirm_delivery>
 801a1f0:	4638      	mov	r0, r7
 801a1f2:	b00b      	add	sp, #44	@ 0x2c
 801a1f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a1f8:	2001      	movs	r0, #1
 801a1fa:	b00b      	add	sp, #44	@ 0x2c
 801a1fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a200:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a204:	f7f9 fae6 	bl	80137d4 <uxr_flash_output_streams>
 801a208:	4638      	mov	r0, r7
 801a20a:	b00b      	add	sp, #44	@ 0x2c
 801a20c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a210:	200c      	movs	r0, #12
 801a212:	b00b      	add	sp, #44	@ 0x2c
 801a214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a218:	0801f2a0 	.word	0x0801f2a0

0801a21c <rmw_take_request>:
 801a21c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a220:	4605      	mov	r5, r0
 801a222:	6800      	ldr	r0, [r0, #0]
 801a224:	b089      	sub	sp, #36	@ 0x24
 801a226:	460c      	mov	r4, r1
 801a228:	4690      	mov	r8, r2
 801a22a:	461e      	mov	r6, r3
 801a22c:	b128      	cbz	r0, 801a23a <rmw_take_request+0x1e>
 801a22e:	4b28      	ldr	r3, [pc, #160]	@ (801a2d0 <rmw_take_request+0xb4>)
 801a230:	6819      	ldr	r1, [r3, #0]
 801a232:	f7e5 fff5 	bl	8000220 <strcmp>
 801a236:	2800      	cmp	r0, #0
 801a238:	d146      	bne.n	801a2c8 <rmw_take_request+0xac>
 801a23a:	b10e      	cbz	r6, 801a240 <rmw_take_request+0x24>
 801a23c:	2300      	movs	r3, #0
 801a23e:	7033      	strb	r3, [r6, #0]
 801a240:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801a244:	f7f7 fcb4 	bl	8011bb0 <rmw_uxrce_clean_expired_static_input_buffer>
 801a248:	4648      	mov	r0, r9
 801a24a:	f7f7 fc89 	bl	8011b60 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a24e:	4607      	mov	r7, r0
 801a250:	b3b0      	cbz	r0, 801a2c0 <rmw_take_request+0xa4>
 801a252:	6885      	ldr	r5, [r0, #8]
 801a254:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 801a258:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801a25c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801a260:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801a264:	7423      	strb	r3, [r4, #16]
 801a266:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801a26a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801a26e:	74e2      	strb	r2, [r4, #19]
 801a270:	f8a4 3011 	strh.w	r3, [r4, #17]
 801a274:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801a278:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801a27c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 801a280:	61e1      	str	r1, [r4, #28]
 801a282:	6162      	str	r2, [r4, #20]
 801a284:	61a3      	str	r3, [r4, #24]
 801a286:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801a28a:	689b      	ldr	r3, [r3, #8]
 801a28c:	4798      	blx	r3
 801a28e:	6844      	ldr	r4, [r0, #4]
 801a290:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801a294:	f105 0110 	add.w	r1, r5, #16
 801a298:	4668      	mov	r0, sp
 801a29a:	f7f5 f825 	bl	800f2e8 <ucdr_init_buffer>
 801a29e:	68e3      	ldr	r3, [r4, #12]
 801a2a0:	4641      	mov	r1, r8
 801a2a2:	4668      	mov	r0, sp
 801a2a4:	4798      	blx	r3
 801a2a6:	4639      	mov	r1, r7
 801a2a8:	4604      	mov	r4, r0
 801a2aa:	480a      	ldr	r0, [pc, #40]	@ (801a2d4 <rmw_take_request+0xb8>)
 801a2ac:	f7ff fe98 	bl	8019fe0 <put_memory>
 801a2b0:	b106      	cbz	r6, 801a2b4 <rmw_take_request+0x98>
 801a2b2:	7034      	strb	r4, [r6, #0]
 801a2b4:	f084 0001 	eor.w	r0, r4, #1
 801a2b8:	b2c0      	uxtb	r0, r0
 801a2ba:	b009      	add	sp, #36	@ 0x24
 801a2bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a2c0:	2001      	movs	r0, #1
 801a2c2:	b009      	add	sp, #36	@ 0x24
 801a2c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a2c8:	200c      	movs	r0, #12
 801a2ca:	b009      	add	sp, #36	@ 0x24
 801a2cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a2d0:	0801f2a0 	.word	0x0801f2a0
 801a2d4:	2000bb14 	.word	0x2000bb14

0801a2d8 <rmw_send_response>:
 801a2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2da:	4605      	mov	r5, r0
 801a2dc:	6800      	ldr	r0, [r0, #0]
 801a2de:	b091      	sub	sp, #68	@ 0x44
 801a2e0:	460c      	mov	r4, r1
 801a2e2:	4616      	mov	r6, r2
 801a2e4:	b128      	cbz	r0, 801a2f2 <rmw_send_response+0x1a>
 801a2e6:	4b29      	ldr	r3, [pc, #164]	@ (801a38c <rmw_send_response+0xb4>)
 801a2e8:	6819      	ldr	r1, [r3, #0]
 801a2ea:	f7e5 ff99 	bl	8000220 <strcmp>
 801a2ee:	2800      	cmp	r0, #0
 801a2f0:	d141      	bne.n	801a376 <rmw_send_response+0x9e>
 801a2f2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801a2f6:	9306      	str	r3, [sp, #24]
 801a2f8:	4623      	mov	r3, r4
 801a2fa:	9207      	str	r2, [sp, #28]
 801a2fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a300:	686d      	ldr	r5, [r5, #4]
 801a302:	789b      	ldrb	r3, [r3, #2]
 801a304:	68a1      	ldr	r1, [r4, #8]
 801a306:	f88d 2017 	strb.w	r2, [sp, #23]
 801a30a:	f88d 3016 	strb.w	r3, [sp, #22]
 801a30e:	68e2      	ldr	r2, [r4, #12]
 801a310:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801a314:	6860      	ldr	r0, [r4, #4]
 801a316:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a31a:	ab02      	add	r3, sp, #8
 801a31c:	c307      	stmia	r3!, {r0, r1, r2}
 801a31e:	696b      	ldr	r3, [r5, #20]
 801a320:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801a322:	68db      	ldr	r3, [r3, #12]
 801a324:	4798      	blx	r3
 801a326:	6844      	ldr	r4, [r0, #4]
 801a328:	4630      	mov	r0, r6
 801a32a:	6923      	ldr	r3, [r4, #16]
 801a32c:	4798      	blx	r3
 801a32e:	f100 0318 	add.w	r3, r0, #24
 801a332:	6938      	ldr	r0, [r7, #16]
 801a334:	9300      	str	r3, [sp, #0]
 801a336:	692a      	ldr	r2, [r5, #16]
 801a338:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801a33a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a33e:	ab08      	add	r3, sp, #32
 801a340:	f7fb f8dc 	bl	80154fc <uxr_prepare_output_stream>
 801a344:	b910      	cbnz	r0, 801a34c <rmw_send_response+0x74>
 801a346:	2001      	movs	r0, #1
 801a348:	b011      	add	sp, #68	@ 0x44
 801a34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a34c:	a902      	add	r1, sp, #8
 801a34e:	a808      	add	r0, sp, #32
 801a350:	f7fc f962 	bl	8016618 <uxr_serialize_SampleIdentity>
 801a354:	68a3      	ldr	r3, [r4, #8]
 801a356:	a908      	add	r1, sp, #32
 801a358:	4630      	mov	r0, r6
 801a35a:	4798      	blx	r3
 801a35c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801a360:	6938      	ldr	r0, [r7, #16]
 801a362:	2b01      	cmp	r3, #1
 801a364:	d00a      	beq.n	801a37c <rmw_send_response+0xa4>
 801a366:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801a368:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a36c:	f7f9 fdf2 	bl	8013f54 <uxr_run_session_until_confirm_delivery>
 801a370:	2000      	movs	r0, #0
 801a372:	b011      	add	sp, #68	@ 0x44
 801a374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a376:	200c      	movs	r0, #12
 801a378:	b011      	add	sp, #68	@ 0x44
 801a37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a37c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a380:	f7f9 fa28 	bl	80137d4 <uxr_flash_output_streams>
 801a384:	2000      	movs	r0, #0
 801a386:	b011      	add	sp, #68	@ 0x44
 801a388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a38a:	bf00      	nop
 801a38c:	0801f2a0 	.word	0x0801f2a0

0801a390 <rmw_take_response>:
 801a390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a394:	4604      	mov	r4, r0
 801a396:	6800      	ldr	r0, [r0, #0]
 801a398:	b088      	sub	sp, #32
 801a39a:	4688      	mov	r8, r1
 801a39c:	4617      	mov	r7, r2
 801a39e:	461d      	mov	r5, r3
 801a3a0:	b120      	cbz	r0, 801a3ac <rmw_take_response+0x1c>
 801a3a2:	4b1e      	ldr	r3, [pc, #120]	@ (801a41c <rmw_take_response+0x8c>)
 801a3a4:	6819      	ldr	r1, [r3, #0]
 801a3a6:	f7e5 ff3b 	bl	8000220 <strcmp>
 801a3aa:	bb78      	cbnz	r0, 801a40c <rmw_take_response+0x7c>
 801a3ac:	b10d      	cbz	r5, 801a3b2 <rmw_take_response+0x22>
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	702b      	strb	r3, [r5, #0]
 801a3b2:	6864      	ldr	r4, [r4, #4]
 801a3b4:	f7f7 fbfc 	bl	8011bb0 <rmw_uxrce_clean_expired_static_input_buffer>
 801a3b8:	4620      	mov	r0, r4
 801a3ba:	f7f7 fbd1 	bl	8011b60 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a3be:	4606      	mov	r6, r0
 801a3c0:	b340      	cbz	r0, 801a414 <rmw_take_response+0x84>
 801a3c2:	6963      	ldr	r3, [r4, #20]
 801a3c4:	6884      	ldr	r4, [r0, #8]
 801a3c6:	68db      	ldr	r3, [r3, #12]
 801a3c8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801a3cc:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801a3d0:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801a3d4:	4798      	blx	r3
 801a3d6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801a3da:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801a3de:	f104 0110 	add.w	r1, r4, #16
 801a3e2:	4668      	mov	r0, sp
 801a3e4:	f7f4 ff80 	bl	800f2e8 <ucdr_init_buffer>
 801a3e8:	4639      	mov	r1, r7
 801a3ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a3ee:	4668      	mov	r0, sp
 801a3f0:	4798      	blx	r3
 801a3f2:	4631      	mov	r1, r6
 801a3f4:	4604      	mov	r4, r0
 801a3f6:	480a      	ldr	r0, [pc, #40]	@ (801a420 <rmw_take_response+0x90>)
 801a3f8:	f7ff fdf2 	bl	8019fe0 <put_memory>
 801a3fc:	b105      	cbz	r5, 801a400 <rmw_take_response+0x70>
 801a3fe:	702c      	strb	r4, [r5, #0]
 801a400:	f084 0001 	eor.w	r0, r4, #1
 801a404:	b2c0      	uxtb	r0, r0
 801a406:	b008      	add	sp, #32
 801a408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a40c:	200c      	movs	r0, #12
 801a40e:	b008      	add	sp, #32
 801a410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a414:	2001      	movs	r0, #1
 801a416:	b008      	add	sp, #32
 801a418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a41c:	0801f2a0 	.word	0x0801f2a0
 801a420:	2000bb14 	.word	0x2000bb14

0801a424 <rmw_take_with_info>:
 801a424:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a426:	4604      	mov	r4, r0
 801a428:	6800      	ldr	r0, [r0, #0]
 801a42a:	b089      	sub	sp, #36	@ 0x24
 801a42c:	460f      	mov	r7, r1
 801a42e:	4615      	mov	r5, r2
 801a430:	b128      	cbz	r0, 801a43e <rmw_take_with_info+0x1a>
 801a432:	4b24      	ldr	r3, [pc, #144]	@ (801a4c4 <rmw_take_with_info+0xa0>)
 801a434:	6819      	ldr	r1, [r3, #0]
 801a436:	f7e5 fef3 	bl	8000220 <strcmp>
 801a43a:	2800      	cmp	r0, #0
 801a43c:	d13e      	bne.n	801a4bc <rmw_take_with_info+0x98>
 801a43e:	b305      	cbz	r5, 801a482 <rmw_take_with_info+0x5e>
 801a440:	6864      	ldr	r4, [r4, #4]
 801a442:	2300      	movs	r3, #0
 801a444:	702b      	strb	r3, [r5, #0]
 801a446:	f7f7 fbb3 	bl	8011bb0 <rmw_uxrce_clean_expired_static_input_buffer>
 801a44a:	4620      	mov	r0, r4
 801a44c:	f7f7 fb88 	bl	8011b60 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a450:	4606      	mov	r6, r0
 801a452:	b1f0      	cbz	r0, 801a492 <rmw_take_with_info+0x6e>
 801a454:	6881      	ldr	r1, [r0, #8]
 801a456:	4668      	mov	r0, sp
 801a458:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801a45c:	3110      	adds	r1, #16
 801a45e:	f7f4 ff43 	bl	800f2e8 <ucdr_init_buffer>
 801a462:	69a3      	ldr	r3, [r4, #24]
 801a464:	4639      	mov	r1, r7
 801a466:	68db      	ldr	r3, [r3, #12]
 801a468:	4668      	mov	r0, sp
 801a46a:	4798      	blx	r3
 801a46c:	4631      	mov	r1, r6
 801a46e:	4604      	mov	r4, r0
 801a470:	4815      	ldr	r0, [pc, #84]	@ (801a4c8 <rmw_take_with_info+0xa4>)
 801a472:	f7ff fdb5 	bl	8019fe0 <put_memory>
 801a476:	702c      	strb	r4, [r5, #0]
 801a478:	f084 0001 	eor.w	r0, r4, #1
 801a47c:	b2c0      	uxtb	r0, r0
 801a47e:	b009      	add	sp, #36	@ 0x24
 801a480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a482:	6864      	ldr	r4, [r4, #4]
 801a484:	f7f7 fb94 	bl	8011bb0 <rmw_uxrce_clean_expired_static_input_buffer>
 801a488:	4620      	mov	r0, r4
 801a48a:	f7f7 fb69 	bl	8011b60 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a48e:	4605      	mov	r5, r0
 801a490:	b910      	cbnz	r0, 801a498 <rmw_take_with_info+0x74>
 801a492:	2001      	movs	r0, #1
 801a494:	b009      	add	sp, #36	@ 0x24
 801a496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a498:	68a9      	ldr	r1, [r5, #8]
 801a49a:	4668      	mov	r0, sp
 801a49c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801a4a0:	3110      	adds	r1, #16
 801a4a2:	f7f4 ff21 	bl	800f2e8 <ucdr_init_buffer>
 801a4a6:	69a3      	ldr	r3, [r4, #24]
 801a4a8:	4639      	mov	r1, r7
 801a4aa:	68db      	ldr	r3, [r3, #12]
 801a4ac:	4668      	mov	r0, sp
 801a4ae:	4798      	blx	r3
 801a4b0:	4629      	mov	r1, r5
 801a4b2:	4604      	mov	r4, r0
 801a4b4:	4804      	ldr	r0, [pc, #16]	@ (801a4c8 <rmw_take_with_info+0xa4>)
 801a4b6:	f7ff fd93 	bl	8019fe0 <put_memory>
 801a4ba:	e7dd      	b.n	801a478 <rmw_take_with_info+0x54>
 801a4bc:	200c      	movs	r0, #12
 801a4be:	b009      	add	sp, #36	@ 0x24
 801a4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4c2:	bf00      	nop
 801a4c4:	0801f2a0 	.word	0x0801f2a0
 801a4c8:	2000bb14 	.word	0x2000bb14

0801a4cc <rmw_wait>:
 801a4cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a4d0:	b089      	sub	sp, #36	@ 0x24
 801a4d2:	4605      	mov	r5, r0
 801a4d4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801a4d6:	460e      	mov	r6, r1
 801a4d8:	4698      	mov	r8, r3
 801a4da:	4691      	mov	r9, r2
 801a4dc:	2a00      	cmp	r2, #0
 801a4de:	f000 810a 	beq.w	801a6f6 <rmw_wait+0x22a>
 801a4e2:	b16c      	cbz	r4, 801a500 <rmw_wait+0x34>
 801a4e4:	4bae      	ldr	r3, [pc, #696]	@ (801a7a0 <rmw_wait+0x2d4>)
 801a4e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a4e8:	af04      	add	r7, sp, #16
 801a4ea:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801a4ee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801a4f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a4f6:	f7ff faaf 	bl	8019a58 <rmw_time_equal>
 801a4fa:	2800      	cmp	r0, #0
 801a4fc:	f000 8127 	beq.w	801a74e <rmw_wait+0x282>
 801a500:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801a504:	f7f7 fb54 	bl	8011bb0 <rmw_uxrce_clean_expired_static_input_buffer>
 801a508:	4ba6      	ldr	r3, [pc, #664]	@ (801a7a4 <rmw_wait+0x2d8>)
 801a50a:	681c      	ldr	r4, [r3, #0]
 801a50c:	b14c      	cbz	r4, 801a522 <rmw_wait+0x56>
 801a50e:	4623      	mov	r3, r4
 801a510:	2100      	movs	r1, #0
 801a512:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801a516:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a51a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d1f7      	bne.n	801a512 <rmw_wait+0x46>
 801a522:	f1b9 0f00 	cmp.w	r9, #0
 801a526:	d011      	beq.n	801a54c <rmw_wait+0x80>
 801a528:	f8d9 1000 	ldr.w	r1, [r9]
 801a52c:	b171      	cbz	r1, 801a54c <rmw_wait+0x80>
 801a52e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801a532:	2300      	movs	r3, #0
 801a534:	2001      	movs	r0, #1
 801a536:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a53a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801a53c:	6912      	ldr	r2, [r2, #16]
 801a53e:	3301      	adds	r3, #1
 801a540:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a544:	4299      	cmp	r1, r3
 801a546:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801a54a:	d1f4      	bne.n	801a536 <rmw_wait+0x6a>
 801a54c:	f1b8 0f00 	cmp.w	r8, #0
 801a550:	d011      	beq.n	801a576 <rmw_wait+0xaa>
 801a552:	f8d8 1000 	ldr.w	r1, [r8]
 801a556:	b171      	cbz	r1, 801a576 <rmw_wait+0xaa>
 801a558:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801a55c:	2300      	movs	r3, #0
 801a55e:	2001      	movs	r0, #1
 801a560:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a564:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801a566:	6912      	ldr	r2, [r2, #16]
 801a568:	3301      	adds	r3, #1
 801a56a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a56e:	4299      	cmp	r1, r3
 801a570:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801a574:	d1f4      	bne.n	801a560 <rmw_wait+0x94>
 801a576:	b185      	cbz	r5, 801a59a <rmw_wait+0xce>
 801a578:	6829      	ldr	r1, [r5, #0]
 801a57a:	b171      	cbz	r1, 801a59a <rmw_wait+0xce>
 801a57c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801a580:	2300      	movs	r3, #0
 801a582:	2001      	movs	r0, #1
 801a584:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a588:	6a12      	ldr	r2, [r2, #32]
 801a58a:	6912      	ldr	r2, [r2, #16]
 801a58c:	3301      	adds	r3, #1
 801a58e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a592:	4299      	cmp	r1, r3
 801a594:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801a598:	d1f4      	bne.n	801a584 <rmw_wait+0xb8>
 801a59a:	b34c      	cbz	r4, 801a5f0 <rmw_wait+0x124>
 801a59c:	4622      	mov	r2, r4
 801a59e:	2300      	movs	r3, #0
 801a5a0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801a5a4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801a5a8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801a5ac:	440b      	add	r3, r1
 801a5ae:	b2db      	uxtb	r3, r3
 801a5b0:	2a00      	cmp	r2, #0
 801a5b2:	d1f5      	bne.n	801a5a0 <rmw_wait+0xd4>
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	f000 8084 	beq.w	801a6c2 <rmw_wait+0x1f6>
 801a5ba:	1c7a      	adds	r2, r7, #1
 801a5bc:	d00d      	beq.n	801a5da <rmw_wait+0x10e>
 801a5be:	ee07 7a90 	vmov	s15, r7
 801a5c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a5c6:	ee07 3a90 	vmov	s15, r3
 801a5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a5ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a5d2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801a5d6:	ee17 7a90 	vmov	r7, s15
 801a5da:	68a0      	ldr	r0, [r4, #8]
 801a5dc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801a5e0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	f040 8090 	bne.w	801a70a <rmw_wait+0x23e>
 801a5ea:	6864      	ldr	r4, [r4, #4]
 801a5ec:	2c00      	cmp	r4, #0
 801a5ee:	d1f4      	bne.n	801a5da <rmw_wait+0x10e>
 801a5f0:	f1b9 0f00 	cmp.w	r9, #0
 801a5f4:	f000 80bc 	beq.w	801a770 <rmw_wait+0x2a4>
 801a5f8:	f8d9 7000 	ldr.w	r7, [r9]
 801a5fc:	2f00      	cmp	r7, #0
 801a5fe:	f000 808e 	beq.w	801a71e <rmw_wait+0x252>
 801a602:	2400      	movs	r4, #0
 801a604:	4627      	mov	r7, r4
 801a606:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a60a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a60e:	f7f7 faa7 	bl	8011b60 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a612:	2800      	cmp	r0, #0
 801a614:	d05f      	beq.n	801a6d6 <rmw_wait+0x20a>
 801a616:	f8d9 3000 	ldr.w	r3, [r9]
 801a61a:	3401      	adds	r4, #1
 801a61c:	42a3      	cmp	r3, r4
 801a61e:	f04f 0701 	mov.w	r7, #1
 801a622:	d8f0      	bhi.n	801a606 <rmw_wait+0x13a>
 801a624:	f1b8 0f00 	cmp.w	r8, #0
 801a628:	d012      	beq.n	801a650 <rmw_wait+0x184>
 801a62a:	f8d8 3000 	ldr.w	r3, [r8]
 801a62e:	b17b      	cbz	r3, 801a650 <rmw_wait+0x184>
 801a630:	2400      	movs	r4, #0
 801a632:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a636:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a63a:	f7f7 fa91 	bl	8011b60 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a63e:	2800      	cmp	r0, #0
 801a640:	d051      	beq.n	801a6e6 <rmw_wait+0x21a>
 801a642:	f8d8 3000 	ldr.w	r3, [r8]
 801a646:	3401      	adds	r4, #1
 801a648:	42a3      	cmp	r3, r4
 801a64a:	f04f 0701 	mov.w	r7, #1
 801a64e:	d8f0      	bhi.n	801a632 <rmw_wait+0x166>
 801a650:	b1dd      	cbz	r5, 801a68a <rmw_wait+0x1be>
 801a652:	682b      	ldr	r3, [r5, #0]
 801a654:	b1cb      	cbz	r3, 801a68a <rmw_wait+0x1be>
 801a656:	2400      	movs	r4, #0
 801a658:	686b      	ldr	r3, [r5, #4]
 801a65a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a65e:	f7f7 fa7f 	bl	8011b60 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a662:	b158      	cbz	r0, 801a67c <rmw_wait+0x1b0>
 801a664:	682b      	ldr	r3, [r5, #0]
 801a666:	3401      	adds	r4, #1
 801a668:	42a3      	cmp	r3, r4
 801a66a:	d969      	bls.n	801a740 <rmw_wait+0x274>
 801a66c:	686b      	ldr	r3, [r5, #4]
 801a66e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a672:	2701      	movs	r7, #1
 801a674:	f7f7 fa74 	bl	8011b60 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a678:	2800      	cmp	r0, #0
 801a67a:	d1f3      	bne.n	801a664 <rmw_wait+0x198>
 801a67c:	e9d5 3200 	ldrd	r3, r2, [r5]
 801a680:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a684:	3401      	adds	r4, #1
 801a686:	42a3      	cmp	r3, r4
 801a688:	d8e6      	bhi.n	801a658 <rmw_wait+0x18c>
 801a68a:	b1a6      	cbz	r6, 801a6b6 <rmw_wait+0x1ea>
 801a68c:	6834      	ldr	r4, [r6, #0]
 801a68e:	b194      	cbz	r4, 801a6b6 <rmw_wait+0x1ea>
 801a690:	2300      	movs	r3, #0
 801a692:	461d      	mov	r5, r3
 801a694:	e004      	b.n	801a6a0 <rmw_wait+0x1d4>
 801a696:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801a69a:	3301      	adds	r3, #1
 801a69c:	42a3      	cmp	r3, r4
 801a69e:	d00a      	beq.n	801a6b6 <rmw_wait+0x1ea>
 801a6a0:	6870      	ldr	r0, [r6, #4]
 801a6a2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801a6a6:	7c0a      	ldrb	r2, [r1, #16]
 801a6a8:	2a00      	cmp	r2, #0
 801a6aa:	d0f4      	beq.n	801a696 <rmw_wait+0x1ca>
 801a6ac:	3301      	adds	r3, #1
 801a6ae:	42a3      	cmp	r3, r4
 801a6b0:	740d      	strb	r5, [r1, #16]
 801a6b2:	4617      	mov	r7, r2
 801a6b4:	d1f4      	bne.n	801a6a0 <rmw_wait+0x1d4>
 801a6b6:	2f00      	cmp	r7, #0
 801a6b8:	d03e      	beq.n	801a738 <rmw_wait+0x26c>
 801a6ba:	2000      	movs	r0, #0
 801a6bc:	b009      	add	sp, #36	@ 0x24
 801a6be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a6c2:	68a0      	ldr	r0, [r4, #8]
 801a6c4:	2100      	movs	r1, #0
 801a6c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a6ca:	f7f9 fc09 	bl	8013ee0 <uxr_run_session_timeout>
 801a6ce:	6864      	ldr	r4, [r4, #4]
 801a6d0:	2c00      	cmp	r4, #0
 801a6d2:	d1f6      	bne.n	801a6c2 <rmw_wait+0x1f6>
 801a6d4:	e78c      	b.n	801a5f0 <rmw_wait+0x124>
 801a6d6:	e9d9 3200 	ldrd	r3, r2, [r9]
 801a6da:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a6de:	3401      	adds	r4, #1
 801a6e0:	42a3      	cmp	r3, r4
 801a6e2:	d890      	bhi.n	801a606 <rmw_wait+0x13a>
 801a6e4:	e79e      	b.n	801a624 <rmw_wait+0x158>
 801a6e6:	e9d8 3200 	ldrd	r3, r2, [r8]
 801a6ea:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a6ee:	3401      	adds	r4, #1
 801a6f0:	429c      	cmp	r4, r3
 801a6f2:	d39e      	bcc.n	801a632 <rmw_wait+0x166>
 801a6f4:	e7ac      	b.n	801a650 <rmw_wait+0x184>
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	f47f aef3 	bne.w	801a4e2 <rmw_wait+0x16>
 801a6fc:	2800      	cmp	r0, #0
 801a6fe:	f47f aef0 	bne.w	801a4e2 <rmw_wait+0x16>
 801a702:	2900      	cmp	r1, #0
 801a704:	f47f aeed 	bne.w	801a4e2 <rmw_wait+0x16>
 801a708:	e7d7      	b.n	801a6ba <rmw_wait+0x1ee>
 801a70a:	4639      	mov	r1, r7
 801a70c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a710:	f7f9 fc00 	bl	8013f14 <uxr_run_session_until_data>
 801a714:	6864      	ldr	r4, [r4, #4]
 801a716:	2c00      	cmp	r4, #0
 801a718:	f47f af5f 	bne.w	801a5da <rmw_wait+0x10e>
 801a71c:	e768      	b.n	801a5f0 <rmw_wait+0x124>
 801a71e:	f1b8 0f00 	cmp.w	r8, #0
 801a722:	d032      	beq.n	801a78a <rmw_wait+0x2be>
 801a724:	f8d8 3000 	ldr.w	r3, [r8]
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d181      	bne.n	801a630 <rmw_wait+0x164>
 801a72c:	461f      	mov	r7, r3
 801a72e:	2d00      	cmp	r5, #0
 801a730:	d18f      	bne.n	801a652 <rmw_wait+0x186>
 801a732:	462f      	mov	r7, r5
 801a734:	2e00      	cmp	r6, #0
 801a736:	d1a9      	bne.n	801a68c <rmw_wait+0x1c0>
 801a738:	2002      	movs	r0, #2
 801a73a:	b009      	add	sp, #36	@ 0x24
 801a73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a740:	2e00      	cmp	r6, #0
 801a742:	d0ba      	beq.n	801a6ba <rmw_wait+0x1ee>
 801a744:	6834      	ldr	r4, [r6, #0]
 801a746:	2701      	movs	r7, #1
 801a748:	2c00      	cmp	r4, #0
 801a74a:	d1a1      	bne.n	801a690 <rmw_wait+0x1c4>
 801a74c:	e7b5      	b.n	801a6ba <rmw_wait+0x1ee>
 801a74e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a752:	f7ff f9d5 	bl	8019b00 <rmw_time_total_nsec>
 801a756:	2300      	movs	r3, #0
 801a758:	4a13      	ldr	r2, [pc, #76]	@ (801a7a8 <rmw_wait+0x2dc>)
 801a75a:	f7e6 fa85 	bl	8000c68 <__aeabi_uldivmod>
 801a75e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801a762:	f171 0300 	sbcs.w	r3, r1, #0
 801a766:	4607      	mov	r7, r0
 801a768:	bfa8      	it	ge
 801a76a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801a76e:	e6c9      	b.n	801a504 <rmw_wait+0x38>
 801a770:	f1b8 0f00 	cmp.w	r8, #0
 801a774:	d009      	beq.n	801a78a <rmw_wait+0x2be>
 801a776:	f8d8 3000 	ldr.w	r3, [r8]
 801a77a:	464f      	mov	r7, r9
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	f47f af57 	bne.w	801a630 <rmw_wait+0x164>
 801a782:	2d00      	cmp	r5, #0
 801a784:	f47f af65 	bne.w	801a652 <rmw_wait+0x186>
 801a788:	e7d3      	b.n	801a732 <rmw_wait+0x266>
 801a78a:	b17d      	cbz	r5, 801a7ac <rmw_wait+0x2e0>
 801a78c:	682b      	ldr	r3, [r5, #0]
 801a78e:	4647      	mov	r7, r8
 801a790:	2b00      	cmp	r3, #0
 801a792:	f47f af60 	bne.w	801a656 <rmw_wait+0x18a>
 801a796:	2e00      	cmp	r6, #0
 801a798:	f47f af78 	bne.w	801a68c <rmw_wait+0x1c0>
 801a79c:	e7cc      	b.n	801a738 <rmw_wait+0x26c>
 801a79e:	bf00      	nop
 801a7a0:	0801dcd8 	.word	0x0801dcd8
 801a7a4:	2000bb04 	.word	0x2000bb04
 801a7a8:	000f4240 	.word	0x000f4240
 801a7ac:	2e00      	cmp	r6, #0
 801a7ae:	d0c3      	beq.n	801a738 <rmw_wait+0x26c>
 801a7b0:	6834      	ldr	r4, [r6, #0]
 801a7b2:	462f      	mov	r7, r5
 801a7b4:	2c00      	cmp	r4, #0
 801a7b6:	f47f af6b 	bne.w	801a690 <rmw_wait+0x1c4>
 801a7ba:	e7bd      	b.n	801a738 <rmw_wait+0x26c>

0801a7bc <rmw_create_wait_set>:
 801a7bc:	b508      	push	{r3, lr}
 801a7be:	4803      	ldr	r0, [pc, #12]	@ (801a7cc <rmw_create_wait_set+0x10>)
 801a7c0:	f7ff fbfe 	bl	8019fc0 <get_memory>
 801a7c4:	b108      	cbz	r0, 801a7ca <rmw_create_wait_set+0xe>
 801a7c6:	6880      	ldr	r0, [r0, #8]
 801a7c8:	3010      	adds	r0, #16
 801a7ca:	bd08      	pop	{r3, pc}
 801a7cc:	2000bb44 	.word	0x2000bb44

0801a7d0 <rmw_destroy_wait_set>:
 801a7d0:	b508      	push	{r3, lr}
 801a7d2:	4b08      	ldr	r3, [pc, #32]	@ (801a7f4 <rmw_destroy_wait_set+0x24>)
 801a7d4:	6819      	ldr	r1, [r3, #0]
 801a7d6:	b911      	cbnz	r1, 801a7de <rmw_destroy_wait_set+0xe>
 801a7d8:	e00a      	b.n	801a7f0 <rmw_destroy_wait_set+0x20>
 801a7da:	6849      	ldr	r1, [r1, #4]
 801a7dc:	b141      	cbz	r1, 801a7f0 <rmw_destroy_wait_set+0x20>
 801a7de:	688b      	ldr	r3, [r1, #8]
 801a7e0:	3310      	adds	r3, #16
 801a7e2:	4298      	cmp	r0, r3
 801a7e4:	d1f9      	bne.n	801a7da <rmw_destroy_wait_set+0xa>
 801a7e6:	4803      	ldr	r0, [pc, #12]	@ (801a7f4 <rmw_destroy_wait_set+0x24>)
 801a7e8:	f7ff fbfa 	bl	8019fe0 <put_memory>
 801a7ec:	2000      	movs	r0, #0
 801a7ee:	bd08      	pop	{r3, pc}
 801a7f0:	2001      	movs	r0, #1
 801a7f2:	bd08      	pop	{r3, pc}
 801a7f4:	2000bb44 	.word	0x2000bb44

0801a7f8 <sensor_msgs__msg__Imu__init>:
 801a7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7fc:	4605      	mov	r5, r0
 801a7fe:	b3c0      	cbz	r0, 801a872 <sensor_msgs__msg__Imu__init+0x7a>
 801a800:	f000 f864 	bl	801a8cc <std_msgs__msg__Header__init>
 801a804:	4604      	mov	r4, r0
 801a806:	b310      	cbz	r0, 801a84e <sensor_msgs__msg__Imu__init+0x56>
 801a808:	f105 0618 	add.w	r6, r5, #24
 801a80c:	4630      	mov	r0, r6
 801a80e:	f000 f8b3 	bl	801a978 <geometry_msgs__msg__Quaternion__init>
 801a812:	4604      	mov	r4, r0
 801a814:	2800      	cmp	r0, #0
 801a816:	d040      	beq.n	801a89a <sensor_msgs__msg__Imu__init+0xa2>
 801a818:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 801a81c:	4638      	mov	r0, r7
 801a81e:	f7f7 ffd9 	bl	80127d4 <geometry_msgs__msg__Vector3__init>
 801a822:	4604      	mov	r4, r0
 801a824:	b348      	cbz	r0, 801a87a <sensor_msgs__msg__Imu__init+0x82>
 801a826:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 801a82a:	4640      	mov	r0, r8
 801a82c:	f7f7 ffd2 	bl	80127d4 <geometry_msgs__msg__Vector3__init>
 801a830:	4604      	mov	r4, r0
 801a832:	b9d8      	cbnz	r0, 801a86c <sensor_msgs__msg__Imu__init+0x74>
 801a834:	4628      	mov	r0, r5
 801a836:	f000 f86d 	bl	801a914 <std_msgs__msg__Header__fini>
 801a83a:	4630      	mov	r0, r6
 801a83c:	f000 f8b0 	bl	801a9a0 <geometry_msgs__msg__Quaternion__fini>
 801a840:	4638      	mov	r0, r7
 801a842:	f7f7 ffcb 	bl	80127dc <geometry_msgs__msg__Vector3__fini>
 801a846:	4640      	mov	r0, r8
 801a848:	f7f7 ffc8 	bl	80127dc <geometry_msgs__msg__Vector3__fini>
 801a84c:	e00e      	b.n	801a86c <sensor_msgs__msg__Imu__init+0x74>
 801a84e:	4628      	mov	r0, r5
 801a850:	f000 f860 	bl	801a914 <std_msgs__msg__Header__fini>
 801a854:	f105 0018 	add.w	r0, r5, #24
 801a858:	f000 f8a2 	bl	801a9a0 <geometry_msgs__msg__Quaternion__fini>
 801a85c:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 801a860:	f7f7 ffbc 	bl	80127dc <geometry_msgs__msg__Vector3__fini>
 801a864:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801a868:	f7f7 ffb8 	bl	80127dc <geometry_msgs__msg__Vector3__fini>
 801a86c:	4620      	mov	r0, r4
 801a86e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a872:	4604      	mov	r4, r0
 801a874:	4620      	mov	r0, r4
 801a876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a87a:	4628      	mov	r0, r5
 801a87c:	f000 f84a 	bl	801a914 <std_msgs__msg__Header__fini>
 801a880:	4630      	mov	r0, r6
 801a882:	f000 f88d 	bl	801a9a0 <geometry_msgs__msg__Quaternion__fini>
 801a886:	4638      	mov	r0, r7
 801a888:	f7f7 ffa8 	bl	80127dc <geometry_msgs__msg__Vector3__fini>
 801a88c:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801a890:	f7f7 ffa4 	bl	80127dc <geometry_msgs__msg__Vector3__fini>
 801a894:	4620      	mov	r0, r4
 801a896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a89a:	4628      	mov	r0, r5
 801a89c:	f000 f83a 	bl	801a914 <std_msgs__msg__Header__fini>
 801a8a0:	4630      	mov	r0, r6
 801a8a2:	e7d9      	b.n	801a858 <sensor_msgs__msg__Imu__init+0x60>

0801a8a4 <sensor_msgs__msg__Imu__fini>:
 801a8a4:	b188      	cbz	r0, 801a8ca <sensor_msgs__msg__Imu__fini+0x26>
 801a8a6:	b510      	push	{r4, lr}
 801a8a8:	4604      	mov	r4, r0
 801a8aa:	f000 f833 	bl	801a914 <std_msgs__msg__Header__fini>
 801a8ae:	f104 0018 	add.w	r0, r4, #24
 801a8b2:	f000 f875 	bl	801a9a0 <geometry_msgs__msg__Quaternion__fini>
 801a8b6:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801a8ba:	f7f7 ff8f 	bl	80127dc <geometry_msgs__msg__Vector3__fini>
 801a8be:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801a8c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a8c6:	f7f7 bf89 	b.w	80127dc <geometry_msgs__msg__Vector3__fini>
 801a8ca:	4770      	bx	lr

0801a8cc <std_msgs__msg__Header__init>:
 801a8cc:	b570      	push	{r4, r5, r6, lr}
 801a8ce:	4605      	mov	r5, r0
 801a8d0:	b1a8      	cbz	r0, 801a8fe <std_msgs__msg__Header__init+0x32>
 801a8d2:	f000 f849 	bl	801a968 <builtin_interfaces__msg__Time__init>
 801a8d6:	4604      	mov	r4, r0
 801a8d8:	b140      	cbz	r0, 801a8ec <std_msgs__msg__Header__init+0x20>
 801a8da:	f105 0608 	add.w	r6, r5, #8
 801a8de:	4630      	mov	r0, r6
 801a8e0:	f001 f990 	bl	801bc04 <rosidl_runtime_c__String__init>
 801a8e4:	4604      	mov	r4, r0
 801a8e6:	b168      	cbz	r0, 801a904 <std_msgs__msg__Header__init+0x38>
 801a8e8:	4620      	mov	r0, r4
 801a8ea:	bd70      	pop	{r4, r5, r6, pc}
 801a8ec:	4628      	mov	r0, r5
 801a8ee:	f000 f83f 	bl	801a970 <builtin_interfaces__msg__Time__fini>
 801a8f2:	f105 0008 	add.w	r0, r5, #8
 801a8f6:	f001 f99b 	bl	801bc30 <rosidl_runtime_c__String__fini>
 801a8fa:	4620      	mov	r0, r4
 801a8fc:	bd70      	pop	{r4, r5, r6, pc}
 801a8fe:	4604      	mov	r4, r0
 801a900:	4620      	mov	r0, r4
 801a902:	bd70      	pop	{r4, r5, r6, pc}
 801a904:	4628      	mov	r0, r5
 801a906:	f000 f833 	bl	801a970 <builtin_interfaces__msg__Time__fini>
 801a90a:	4630      	mov	r0, r6
 801a90c:	f001 f990 	bl	801bc30 <rosidl_runtime_c__String__fini>
 801a910:	e7ea      	b.n	801a8e8 <std_msgs__msg__Header__init+0x1c>
 801a912:	bf00      	nop

0801a914 <std_msgs__msg__Header__fini>:
 801a914:	b148      	cbz	r0, 801a92a <std_msgs__msg__Header__fini+0x16>
 801a916:	b510      	push	{r4, lr}
 801a918:	4604      	mov	r4, r0
 801a91a:	f000 f829 	bl	801a970 <builtin_interfaces__msg__Time__fini>
 801a91e:	f104 0008 	add.w	r0, r4, #8
 801a922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a926:	f001 b983 	b.w	801bc30 <rosidl_runtime_c__String__fini>
 801a92a:	4770      	bx	lr

0801a92c <std_srvs__srv__SetBool_Request__init>:
 801a92c:	3800      	subs	r0, #0
 801a92e:	bf18      	it	ne
 801a930:	2001      	movne	r0, #1
 801a932:	4770      	bx	lr

0801a934 <std_srvs__srv__SetBool_Request__fini>:
 801a934:	4770      	bx	lr
 801a936:	bf00      	nop

0801a938 <std_srvs__srv__SetBool_Response__init>:
 801a938:	b538      	push	{r3, r4, r5, lr}
 801a93a:	b138      	cbz	r0, 801a94c <std_srvs__srv__SetBool_Response__init+0x14>
 801a93c:	1d05      	adds	r5, r0, #4
 801a93e:	4628      	mov	r0, r5
 801a940:	f001 f960 	bl	801bc04 <rosidl_runtime_c__String__init>
 801a944:	4604      	mov	r4, r0
 801a946:	b120      	cbz	r0, 801a952 <std_srvs__srv__SetBool_Response__init+0x1a>
 801a948:	4620      	mov	r0, r4
 801a94a:	bd38      	pop	{r3, r4, r5, pc}
 801a94c:	4604      	mov	r4, r0
 801a94e:	4620      	mov	r0, r4
 801a950:	bd38      	pop	{r3, r4, r5, pc}
 801a952:	4628      	mov	r0, r5
 801a954:	f001 f96c 	bl	801bc30 <rosidl_runtime_c__String__fini>
 801a958:	4620      	mov	r0, r4
 801a95a:	bd38      	pop	{r3, r4, r5, pc}

0801a95c <std_srvs__srv__SetBool_Response__fini>:
 801a95c:	b110      	cbz	r0, 801a964 <std_srvs__srv__SetBool_Response__fini+0x8>
 801a95e:	3004      	adds	r0, #4
 801a960:	f001 b966 	b.w	801bc30 <rosidl_runtime_c__String__fini>
 801a964:	4770      	bx	lr
 801a966:	bf00      	nop

0801a968 <builtin_interfaces__msg__Time__init>:
 801a968:	3800      	subs	r0, #0
 801a96a:	bf18      	it	ne
 801a96c:	2001      	movne	r0, #1
 801a96e:	4770      	bx	lr

0801a970 <builtin_interfaces__msg__Time__fini>:
 801a970:	4770      	bx	lr
 801a972:	bf00      	nop
 801a974:	0000      	movs	r0, r0
	...

0801a978 <geometry_msgs__msg__Quaternion__init>:
 801a978:	b160      	cbz	r0, 801a994 <geometry_msgs__msg__Quaternion__init+0x1c>
 801a97a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801a998 <geometry_msgs__msg__Quaternion__init+0x20>
 801a97e:	2200      	movs	r2, #0
 801a980:	2300      	movs	r3, #0
 801a982:	e9c0 2300 	strd	r2, r3, [r0]
 801a986:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a98a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a98e:	ed80 7b06 	vstr	d7, [r0, #24]
 801a992:	2001      	movs	r0, #1
 801a994:	4770      	bx	lr
 801a996:	bf00      	nop
 801a998:	00000000 	.word	0x00000000
 801a99c:	3ff00000 	.word	0x3ff00000

0801a9a0 <geometry_msgs__msg__Quaternion__fini>:
 801a9a0:	4770      	bx	lr
 801a9a2:	bf00      	nop

0801a9a4 <ucdr_serialize_string>:
 801a9a4:	b510      	push	{r4, lr}
 801a9a6:	b082      	sub	sp, #8
 801a9a8:	4604      	mov	r4, r0
 801a9aa:	4608      	mov	r0, r1
 801a9ac:	9101      	str	r1, [sp, #4]
 801a9ae:	f7e5 fc41 	bl	8000234 <strlen>
 801a9b2:	9901      	ldr	r1, [sp, #4]
 801a9b4:	1c42      	adds	r2, r0, #1
 801a9b6:	4620      	mov	r0, r4
 801a9b8:	b002      	add	sp, #8
 801a9ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a9be:	f7f8 b9cb 	b.w	8012d58 <ucdr_serialize_sequence_char>
 801a9c2:	bf00      	nop

0801a9c4 <ucdr_deserialize_string>:
 801a9c4:	b500      	push	{lr}
 801a9c6:	b083      	sub	sp, #12
 801a9c8:	ab01      	add	r3, sp, #4
 801a9ca:	f7f8 f9d7 	bl	8012d7c <ucdr_deserialize_sequence_char>
 801a9ce:	b003      	add	sp, #12
 801a9d0:	f85d fb04 	ldr.w	pc, [sp], #4

0801a9d4 <uxr_init_input_best_effort_stream>:
 801a9d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a9d8:	8003      	strh	r3, [r0, #0]
 801a9da:	4770      	bx	lr

0801a9dc <uxr_reset_input_best_effort_stream>:
 801a9dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a9e0:	8003      	strh	r3, [r0, #0]
 801a9e2:	4770      	bx	lr

0801a9e4 <uxr_receive_best_effort_message>:
 801a9e4:	b538      	push	{r3, r4, r5, lr}
 801a9e6:	4604      	mov	r4, r0
 801a9e8:	8800      	ldrh	r0, [r0, #0]
 801a9ea:	460d      	mov	r5, r1
 801a9ec:	f000 fd42 	bl	801b474 <uxr_seq_num_cmp>
 801a9f0:	4603      	mov	r3, r0
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801a9f8:	bfb8      	it	lt
 801a9fa:	8025      	strhlt	r5, [r4, #0]
 801a9fc:	bd38      	pop	{r3, r4, r5, pc}
 801a9fe:	bf00      	nop

0801aa00 <on_full_input_buffer>:
 801aa00:	b570      	push	{r4, r5, r6, lr}
 801aa02:	4605      	mov	r5, r0
 801aa04:	460c      	mov	r4, r1
 801aa06:	682b      	ldr	r3, [r5, #0]
 801aa08:	6809      	ldr	r1, [r1, #0]
 801aa0a:	8920      	ldrh	r0, [r4, #8]
 801aa0c:	6862      	ldr	r2, [r4, #4]
 801aa0e:	fbb2 f2f0 	udiv	r2, r2, r0
 801aa12:	eba3 0c01 	sub.w	ip, r3, r1
 801aa16:	fbbc fcf2 	udiv	ip, ip, r2
 801aa1a:	f10c 0c01 	add.w	ip, ip, #1
 801aa1e:	fa1f f38c 	uxth.w	r3, ip
 801aa22:	fbb3 f6f0 	udiv	r6, r3, r0
 801aa26:	fb00 3316 	mls	r3, r0, r6, r3
 801aa2a:	b29b      	uxth	r3, r3
 801aa2c:	fb02 f303 	mul.w	r3, r2, r3
 801aa30:	1d18      	adds	r0, r3, #4
 801aa32:	4408      	add	r0, r1
 801aa34:	7d26      	ldrb	r6, [r4, #20]
 801aa36:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801aa3a:	b116      	cbz	r6, 801aa42 <on_full_input_buffer+0x42>
 801aa3c:	2600      	movs	r6, #0
 801aa3e:	f840 6c04 	str.w	r6, [r0, #-4]
 801aa42:	2a03      	cmp	r2, #3
 801aa44:	d801      	bhi.n	801aa4a <on_full_input_buffer+0x4a>
 801aa46:	2001      	movs	r0, #1
 801aa48:	bd70      	pop	{r4, r5, r6, pc}
 801aa4a:	3308      	adds	r3, #8
 801aa4c:	4419      	add	r1, r3
 801aa4e:	4628      	mov	r0, r5
 801aa50:	692b      	ldr	r3, [r5, #16]
 801aa52:	3a04      	subs	r2, #4
 801aa54:	f7f4 fc40 	bl	800f2d8 <ucdr_init_buffer_origin>
 801aa58:	4628      	mov	r0, r5
 801aa5a:	4903      	ldr	r1, [pc, #12]	@ (801aa68 <on_full_input_buffer+0x68>)
 801aa5c:	4622      	mov	r2, r4
 801aa5e:	f7f4 fc17 	bl	800f290 <ucdr_set_on_full_buffer_callback>
 801aa62:	2000      	movs	r0, #0
 801aa64:	bd70      	pop	{r4, r5, r6, pc}
 801aa66:	bf00      	nop
 801aa68:	0801aa01 	.word	0x0801aa01

0801aa6c <uxr_init_input_reliable_stream>:
 801aa6c:	b500      	push	{lr}
 801aa6e:	e9c0 1200 	strd	r1, r2, [r0]
 801aa72:	f04f 0e00 	mov.w	lr, #0
 801aa76:	9a01      	ldr	r2, [sp, #4]
 801aa78:	8103      	strh	r3, [r0, #8]
 801aa7a:	6102      	str	r2, [r0, #16]
 801aa7c:	f880 e014 	strb.w	lr, [r0, #20]
 801aa80:	b1d3      	cbz	r3, 801aab8 <uxr_init_input_reliable_stream+0x4c>
 801aa82:	f8c1 e000 	str.w	lr, [r1]
 801aa86:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801aa8a:	f1bc 0f01 	cmp.w	ip, #1
 801aa8e:	d913      	bls.n	801aab8 <uxr_init_input_reliable_stream+0x4c>
 801aa90:	2301      	movs	r3, #1
 801aa92:	fbb3 f1fc 	udiv	r1, r3, ip
 801aa96:	fb0c 3111 	mls	r1, ip, r1, r3
 801aa9a:	b289      	uxth	r1, r1
 801aa9c:	6842      	ldr	r2, [r0, #4]
 801aa9e:	fbb2 f2fc 	udiv	r2, r2, ip
 801aaa2:	fb01 f202 	mul.w	r2, r1, r2
 801aaa6:	6801      	ldr	r1, [r0, #0]
 801aaa8:	f841 e002 	str.w	lr, [r1, r2]
 801aaac:	3301      	adds	r3, #1
 801aaae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801aab2:	b29b      	uxth	r3, r3
 801aab4:	459c      	cmp	ip, r3
 801aab6:	d8ec      	bhi.n	801aa92 <uxr_init_input_reliable_stream+0x26>
 801aab8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801aabc:	60c3      	str	r3, [r0, #12]
 801aabe:	f85d fb04 	ldr.w	pc, [sp], #4
 801aac2:	bf00      	nop

0801aac4 <uxr_reset_input_reliable_stream>:
 801aac4:	8901      	ldrh	r1, [r0, #8]
 801aac6:	b1e9      	cbz	r1, 801ab04 <uxr_reset_input_reliable_stream+0x40>
 801aac8:	f04f 0c00 	mov.w	ip, #0
 801aacc:	b500      	push	{lr}
 801aace:	4663      	mov	r3, ip
 801aad0:	46e6      	mov	lr, ip
 801aad2:	fbb3 f2f1 	udiv	r2, r3, r1
 801aad6:	fb01 3312 	mls	r3, r1, r2, r3
 801aada:	b29b      	uxth	r3, r3
 801aadc:	6842      	ldr	r2, [r0, #4]
 801aade:	fbb2 f2f1 	udiv	r2, r2, r1
 801aae2:	fb02 f303 	mul.w	r3, r2, r3
 801aae6:	6802      	ldr	r2, [r0, #0]
 801aae8:	f842 e003 	str.w	lr, [r2, r3]
 801aaec:	f10c 0c01 	add.w	ip, ip, #1
 801aaf0:	8901      	ldrh	r1, [r0, #8]
 801aaf2:	fa1f f38c 	uxth.w	r3, ip
 801aaf6:	4299      	cmp	r1, r3
 801aaf8:	d8eb      	bhi.n	801aad2 <uxr_reset_input_reliable_stream+0xe>
 801aafa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801aafe:	60c3      	str	r3, [r0, #12]
 801ab00:	f85d fb04 	ldr.w	pc, [sp], #4
 801ab04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ab08:	60c3      	str	r3, [r0, #12]
 801ab0a:	4770      	bx	lr

0801ab0c <uxr_receive_reliable_message>:
 801ab0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab10:	4604      	mov	r4, r0
 801ab12:	460d      	mov	r5, r1
 801ab14:	8901      	ldrh	r1, [r0, #8]
 801ab16:	8980      	ldrh	r0, [r0, #12]
 801ab18:	4690      	mov	r8, r2
 801ab1a:	461f      	mov	r7, r3
 801ab1c:	f000 fca2 	bl	801b464 <uxr_seq_num_add>
 801ab20:	4629      	mov	r1, r5
 801ab22:	4606      	mov	r6, r0
 801ab24:	89a0      	ldrh	r0, [r4, #12]
 801ab26:	f000 fca5 	bl	801b474 <uxr_seq_num_cmp>
 801ab2a:	2800      	cmp	r0, #0
 801ab2c:	db0a      	blt.n	801ab44 <uxr_receive_reliable_message+0x38>
 801ab2e:	2600      	movs	r6, #0
 801ab30:	89e0      	ldrh	r0, [r4, #14]
 801ab32:	4629      	mov	r1, r5
 801ab34:	f000 fc9e 	bl	801b474 <uxr_seq_num_cmp>
 801ab38:	2800      	cmp	r0, #0
 801ab3a:	da00      	bge.n	801ab3e <uxr_receive_reliable_message+0x32>
 801ab3c:	81e5      	strh	r5, [r4, #14]
 801ab3e:	4630      	mov	r0, r6
 801ab40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab44:	4630      	mov	r0, r6
 801ab46:	4629      	mov	r1, r5
 801ab48:	f000 fc94 	bl	801b474 <uxr_seq_num_cmp>
 801ab4c:	2800      	cmp	r0, #0
 801ab4e:	dbee      	blt.n	801ab2e <uxr_receive_reliable_message+0x22>
 801ab50:	6923      	ldr	r3, [r4, #16]
 801ab52:	4640      	mov	r0, r8
 801ab54:	4798      	blx	r3
 801ab56:	2101      	movs	r1, #1
 801ab58:	4681      	mov	r9, r0
 801ab5a:	89a0      	ldrh	r0, [r4, #12]
 801ab5c:	f000 fc82 	bl	801b464 <uxr_seq_num_add>
 801ab60:	f1b9 0f00 	cmp.w	r9, #0
 801ab64:	d101      	bne.n	801ab6a <uxr_receive_reliable_message+0x5e>
 801ab66:	4285      	cmp	r5, r0
 801ab68:	d047      	beq.n	801abfa <uxr_receive_reliable_message+0xee>
 801ab6a:	8922      	ldrh	r2, [r4, #8]
 801ab6c:	fbb5 f0f2 	udiv	r0, r5, r2
 801ab70:	fb02 5010 	mls	r0, r2, r0, r5
 801ab74:	b280      	uxth	r0, r0
 801ab76:	6863      	ldr	r3, [r4, #4]
 801ab78:	fbb3 f3f2 	udiv	r3, r3, r2
 801ab7c:	fb00 f303 	mul.w	r3, r0, r3
 801ab80:	6820      	ldr	r0, [r4, #0]
 801ab82:	3304      	adds	r3, #4
 801ab84:	4418      	add	r0, r3
 801ab86:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d1cf      	bne.n	801ab2e <uxr_receive_reliable_message+0x22>
 801ab8e:	4641      	mov	r1, r8
 801ab90:	463a      	mov	r2, r7
 801ab92:	f001 fe48 	bl	801c826 <memcpy>
 801ab96:	8921      	ldrh	r1, [r4, #8]
 801ab98:	fbb5 f2f1 	udiv	r2, r5, r1
 801ab9c:	fb01 5212 	mls	r2, r1, r2, r5
 801aba0:	b292      	uxth	r2, r2
 801aba2:	6863      	ldr	r3, [r4, #4]
 801aba4:	fbb3 f3f1 	udiv	r3, r3, r1
 801aba8:	fb02 f303 	mul.w	r3, r2, r3
 801abac:	6822      	ldr	r2, [r4, #0]
 801abae:	50d7      	str	r7, [r2, r3]
 801abb0:	9a08      	ldr	r2, [sp, #32]
 801abb2:	2301      	movs	r3, #1
 801abb4:	7013      	strb	r3, [r2, #0]
 801abb6:	f1b9 0f00 	cmp.w	r9, #0
 801abba:	d0b8      	beq.n	801ab2e <uxr_receive_reliable_message+0x22>
 801abbc:	89a6      	ldrh	r6, [r4, #12]
 801abbe:	4630      	mov	r0, r6
 801abc0:	2101      	movs	r1, #1
 801abc2:	f000 fc4f 	bl	801b464 <uxr_seq_num_add>
 801abc6:	8922      	ldrh	r2, [r4, #8]
 801abc8:	6863      	ldr	r3, [r4, #4]
 801abca:	fbb3 f3f2 	udiv	r3, r3, r2
 801abce:	4606      	mov	r6, r0
 801abd0:	fbb0 f0f2 	udiv	r0, r0, r2
 801abd4:	fb02 6010 	mls	r0, r2, r0, r6
 801abd8:	b280      	uxth	r0, r0
 801abda:	fb00 f303 	mul.w	r3, r0, r3
 801abde:	6820      	ldr	r0, [r4, #0]
 801abe0:	3304      	adds	r3, #4
 801abe2:	4418      	add	r0, r3
 801abe4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d0a0      	beq.n	801ab2e <uxr_receive_reliable_message+0x22>
 801abec:	6923      	ldr	r3, [r4, #16]
 801abee:	4798      	blx	r3
 801abf0:	2802      	cmp	r0, #2
 801abf2:	d008      	beq.n	801ac06 <uxr_receive_reliable_message+0xfa>
 801abf4:	2801      	cmp	r0, #1
 801abf6:	d0e2      	beq.n	801abbe <uxr_receive_reliable_message+0xb2>
 801abf8:	e799      	b.n	801ab2e <uxr_receive_reliable_message+0x22>
 801abfa:	9b08      	ldr	r3, [sp, #32]
 801abfc:	81a5      	strh	r5, [r4, #12]
 801abfe:	2601      	movs	r6, #1
 801ac00:	f883 9000 	strb.w	r9, [r3]
 801ac04:	e794      	b.n	801ab30 <uxr_receive_reliable_message+0x24>
 801ac06:	2601      	movs	r6, #1
 801ac08:	e792      	b.n	801ab30 <uxr_receive_reliable_message+0x24>
 801ac0a:	bf00      	nop

0801ac0c <uxr_next_input_reliable_buffer_available>:
 801ac0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac10:	4604      	mov	r4, r0
 801ac12:	460f      	mov	r7, r1
 801ac14:	8980      	ldrh	r0, [r0, #12]
 801ac16:	2101      	movs	r1, #1
 801ac18:	4690      	mov	r8, r2
 801ac1a:	f000 fc23 	bl	801b464 <uxr_seq_num_add>
 801ac1e:	8922      	ldrh	r2, [r4, #8]
 801ac20:	fbb0 f6f2 	udiv	r6, r0, r2
 801ac24:	fb02 0616 	mls	r6, r2, r6, r0
 801ac28:	b2b6      	uxth	r6, r6
 801ac2a:	6863      	ldr	r3, [r4, #4]
 801ac2c:	fbb3 f3f2 	udiv	r3, r3, r2
 801ac30:	fb06 f303 	mul.w	r3, r6, r3
 801ac34:	6826      	ldr	r6, [r4, #0]
 801ac36:	3304      	adds	r3, #4
 801ac38:	441e      	add	r6, r3
 801ac3a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801ac3e:	f1b9 0f00 	cmp.w	r9, #0
 801ac42:	d023      	beq.n	801ac8c <uxr_next_input_reliable_buffer_available+0x80>
 801ac44:	6923      	ldr	r3, [r4, #16]
 801ac46:	4605      	mov	r5, r0
 801ac48:	4630      	mov	r0, r6
 801ac4a:	4798      	blx	r3
 801ac4c:	4682      	mov	sl, r0
 801ac4e:	b300      	cbz	r0, 801ac92 <uxr_next_input_reliable_buffer_available+0x86>
 801ac50:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801ac54:	2101      	movs	r1, #1
 801ac56:	4650      	mov	r0, sl
 801ac58:	f000 fc04 	bl	801b464 <uxr_seq_num_add>
 801ac5c:	8921      	ldrh	r1, [r4, #8]
 801ac5e:	fbb0 f2f1 	udiv	r2, r0, r1
 801ac62:	4682      	mov	sl, r0
 801ac64:	fb01 0212 	mls	r2, r1, r2, r0
 801ac68:	e9d4 0300 	ldrd	r0, r3, [r4]
 801ac6c:	b292      	uxth	r2, r2
 801ac6e:	fbb3 f3f1 	udiv	r3, r3, r1
 801ac72:	fb02 f303 	mul.w	r3, r2, r3
 801ac76:	3304      	adds	r3, #4
 801ac78:	4418      	add	r0, r3
 801ac7a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801ac7e:	b12b      	cbz	r3, 801ac8c <uxr_next_input_reliable_buffer_available+0x80>
 801ac80:	6923      	ldr	r3, [r4, #16]
 801ac82:	4798      	blx	r3
 801ac84:	2802      	cmp	r0, #2
 801ac86:	d01b      	beq.n	801acc0 <uxr_next_input_reliable_buffer_available+0xb4>
 801ac88:	2801      	cmp	r0, #1
 801ac8a:	d0e3      	beq.n	801ac54 <uxr_next_input_reliable_buffer_available+0x48>
 801ac8c:	2000      	movs	r0, #0
 801ac8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac92:	464a      	mov	r2, r9
 801ac94:	4631      	mov	r1, r6
 801ac96:	4638      	mov	r0, r7
 801ac98:	f7f4 fb26 	bl	800f2e8 <ucdr_init_buffer>
 801ac9c:	8921      	ldrh	r1, [r4, #8]
 801ac9e:	fbb5 f2f1 	udiv	r2, r5, r1
 801aca2:	fb01 5212 	mls	r2, r1, r2, r5
 801aca6:	b292      	uxth	r2, r2
 801aca8:	6863      	ldr	r3, [r4, #4]
 801acaa:	fbb3 f3f1 	udiv	r3, r3, r1
 801acae:	fb02 f303 	mul.w	r3, r2, r3
 801acb2:	6822      	ldr	r2, [r4, #0]
 801acb4:	f842 a003 	str.w	sl, [r2, r3]
 801acb8:	2001      	movs	r0, #1
 801acba:	81a5      	strh	r5, [r4, #12]
 801acbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acc0:	8920      	ldrh	r0, [r4, #8]
 801acc2:	fbb5 f3f0 	udiv	r3, r5, r0
 801acc6:	fb00 5513 	mls	r5, r0, r3, r5
 801acca:	b2ad      	uxth	r5, r5
 801accc:	6863      	ldr	r3, [r4, #4]
 801acce:	fbb3 f3f0 	udiv	r3, r3, r0
 801acd2:	fb03 f505 	mul.w	r5, r3, r5
 801acd6:	6823      	ldr	r3, [r4, #0]
 801acd8:	2000      	movs	r0, #0
 801acda:	5158      	str	r0, [r3, r5]
 801acdc:	eb06 0108 	add.w	r1, r6, r8
 801ace0:	eba9 0208 	sub.w	r2, r9, r8
 801ace4:	4638      	mov	r0, r7
 801ace6:	f7f4 faff 	bl	800f2e8 <ucdr_init_buffer>
 801acea:	4638      	mov	r0, r7
 801acec:	4903      	ldr	r1, [pc, #12]	@ (801acfc <uxr_next_input_reliable_buffer_available+0xf0>)
 801acee:	4622      	mov	r2, r4
 801acf0:	f7f4 face 	bl	800f290 <ucdr_set_on_full_buffer_callback>
 801acf4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801acf8:	2001      	movs	r0, #1
 801acfa:	e7c8      	b.n	801ac8e <uxr_next_input_reliable_buffer_available+0x82>
 801acfc:	0801aa01 	.word	0x0801aa01

0801ad00 <uxr_process_heartbeat>:
 801ad00:	b538      	push	{r3, r4, r5, lr}
 801ad02:	4611      	mov	r1, r2
 801ad04:	4604      	mov	r4, r0
 801ad06:	89c0      	ldrh	r0, [r0, #14]
 801ad08:	4615      	mov	r5, r2
 801ad0a:	f000 fbb3 	bl	801b474 <uxr_seq_num_cmp>
 801ad0e:	2800      	cmp	r0, #0
 801ad10:	bfb8      	it	lt
 801ad12:	81e5      	strhlt	r5, [r4, #14]
 801ad14:	bd38      	pop	{r3, r4, r5, pc}
 801ad16:	bf00      	nop

0801ad18 <uxr_compute_acknack>:
 801ad18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad1c:	8903      	ldrh	r3, [r0, #8]
 801ad1e:	8985      	ldrh	r5, [r0, #12]
 801ad20:	4604      	mov	r4, r0
 801ad22:	460e      	mov	r6, r1
 801ad24:	b1d3      	cbz	r3, 801ad5c <uxr_compute_acknack+0x44>
 801ad26:	4628      	mov	r0, r5
 801ad28:	2701      	movs	r7, #1
 801ad2a:	e003      	b.n	801ad34 <uxr_compute_acknack+0x1c>
 801ad2c:	4567      	cmp	r7, ip
 801ad2e:	d215      	bcs.n	801ad5c <uxr_compute_acknack+0x44>
 801ad30:	89a0      	ldrh	r0, [r4, #12]
 801ad32:	3701      	adds	r7, #1
 801ad34:	b2b9      	uxth	r1, r7
 801ad36:	f000 fb95 	bl	801b464 <uxr_seq_num_add>
 801ad3a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801ad3e:	fbb0 f3fc 	udiv	r3, r0, ip
 801ad42:	fb0c 0313 	mls	r3, ip, r3, r0
 801ad46:	b29a      	uxth	r2, r3
 801ad48:	e9d4 1300 	ldrd	r1, r3, [r4]
 801ad4c:	fbb3 f3fc 	udiv	r3, r3, ip
 801ad50:	fb02 f303 	mul.w	r3, r2, r3
 801ad54:	58cb      	ldr	r3, [r1, r3]
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d1e8      	bne.n	801ad2c <uxr_compute_acknack+0x14>
 801ad5a:	4605      	mov	r5, r0
 801ad5c:	8035      	strh	r5, [r6, #0]
 801ad5e:	2101      	movs	r1, #1
 801ad60:	4628      	mov	r0, r5
 801ad62:	89e7      	ldrh	r7, [r4, #14]
 801ad64:	f000 fb82 	bl	801b46c <uxr_seq_num_sub>
 801ad68:	4601      	mov	r1, r0
 801ad6a:	4638      	mov	r0, r7
 801ad6c:	f000 fb7e 	bl	801b46c <uxr_seq_num_sub>
 801ad70:	4605      	mov	r5, r0
 801ad72:	b318      	cbz	r0, 801adbc <uxr_compute_acknack+0xa4>
 801ad74:	f04f 0900 	mov.w	r9, #0
 801ad78:	464f      	mov	r7, r9
 801ad7a:	f04f 0801 	mov.w	r8, #1
 801ad7e:	fa1f f189 	uxth.w	r1, r9
 801ad82:	8830      	ldrh	r0, [r6, #0]
 801ad84:	f000 fb6e 	bl	801b464 <uxr_seq_num_add>
 801ad88:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801ad8c:	fbb0 f3fc 	udiv	r3, r0, ip
 801ad90:	e9d4 1200 	ldrd	r1, r2, [r4]
 801ad94:	fb03 001c 	mls	r0, r3, ip, r0
 801ad98:	b283      	uxth	r3, r0
 801ad9a:	fbb2 f2fc 	udiv	r2, r2, ip
 801ad9e:	fb02 f303 	mul.w	r3, r2, r3
 801ada2:	fa08 f209 	lsl.w	r2, r8, r9
 801ada6:	58cb      	ldr	r3, [r1, r3]
 801ada8:	f109 0901 	add.w	r9, r9, #1
 801adac:	b90b      	cbnz	r3, 801adb2 <uxr_compute_acknack+0x9a>
 801adae:	4317      	orrs	r7, r2
 801adb0:	b2bf      	uxth	r7, r7
 801adb2:	454d      	cmp	r5, r9
 801adb4:	d1e3      	bne.n	801ad7e <uxr_compute_acknack+0x66>
 801adb6:	4638      	mov	r0, r7
 801adb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801adbc:	4607      	mov	r7, r0
 801adbe:	4638      	mov	r0, r7
 801adc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801adc4 <uxr_init_output_best_effort_stream>:
 801adc4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801adc8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801adcc:	6001      	str	r1, [r0, #0]
 801adce:	7303      	strb	r3, [r0, #12]
 801add0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801add4:	4770      	bx	lr
 801add6:	bf00      	nop

0801add8 <uxr_reset_output_best_effort_stream>:
 801add8:	7b02      	ldrb	r2, [r0, #12]
 801adda:	6042      	str	r2, [r0, #4]
 801addc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ade0:	81c3      	strh	r3, [r0, #14]
 801ade2:	4770      	bx	lr

0801ade4 <uxr_prepare_best_effort_buffer_to_write>:
 801ade4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ade6:	4604      	mov	r4, r0
 801ade8:	b083      	sub	sp, #12
 801adea:	6840      	ldr	r0, [r0, #4]
 801adec:	460d      	mov	r5, r1
 801adee:	4616      	mov	r6, r2
 801adf0:	f7fa fac4 	bl	801537c <uxr_submessage_padding>
 801adf4:	6863      	ldr	r3, [r4, #4]
 801adf6:	4418      	add	r0, r3
 801adf8:	68a3      	ldr	r3, [r4, #8]
 801adfa:	1942      	adds	r2, r0, r5
 801adfc:	4293      	cmp	r3, r2
 801adfe:	bf2c      	ite	cs
 801ae00:	2701      	movcs	r7, #1
 801ae02:	2700      	movcc	r7, #0
 801ae04:	d202      	bcs.n	801ae0c <uxr_prepare_best_effort_buffer_to_write+0x28>
 801ae06:	4638      	mov	r0, r7
 801ae08:	b003      	add	sp, #12
 801ae0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae0c:	9000      	str	r0, [sp, #0]
 801ae0e:	6821      	ldr	r1, [r4, #0]
 801ae10:	4630      	mov	r0, r6
 801ae12:	2300      	movs	r3, #0
 801ae14:	f7f4 fa56 	bl	800f2c4 <ucdr_init_buffer_origin_offset>
 801ae18:	6861      	ldr	r1, [r4, #4]
 801ae1a:	4638      	mov	r0, r7
 801ae1c:	4429      	add	r1, r5
 801ae1e:	6061      	str	r1, [r4, #4]
 801ae20:	b003      	add	sp, #12
 801ae22:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ae24 <uxr_prepare_best_effort_buffer_to_send>:
 801ae24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae28:	4604      	mov	r4, r0
 801ae2a:	461d      	mov	r5, r3
 801ae2c:	6840      	ldr	r0, [r0, #4]
 801ae2e:	7b23      	ldrb	r3, [r4, #12]
 801ae30:	4298      	cmp	r0, r3
 801ae32:	bf8c      	ite	hi
 801ae34:	2601      	movhi	r6, #1
 801ae36:	2600      	movls	r6, #0
 801ae38:	d802      	bhi.n	801ae40 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801ae3a:	4630      	mov	r0, r6
 801ae3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae40:	4688      	mov	r8, r1
 801ae42:	89e0      	ldrh	r0, [r4, #14]
 801ae44:	2101      	movs	r1, #1
 801ae46:	4617      	mov	r7, r2
 801ae48:	f000 fb0c 	bl	801b464 <uxr_seq_num_add>
 801ae4c:	6823      	ldr	r3, [r4, #0]
 801ae4e:	81e0      	strh	r0, [r4, #14]
 801ae50:	8028      	strh	r0, [r5, #0]
 801ae52:	f8c8 3000 	str.w	r3, [r8]
 801ae56:	6863      	ldr	r3, [r4, #4]
 801ae58:	603b      	str	r3, [r7, #0]
 801ae5a:	7b23      	ldrb	r3, [r4, #12]
 801ae5c:	6063      	str	r3, [r4, #4]
 801ae5e:	4630      	mov	r0, r6
 801ae60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ae64 <on_full_output_buffer>:
 801ae64:	b538      	push	{r3, r4, r5, lr}
 801ae66:	6802      	ldr	r2, [r0, #0]
 801ae68:	460c      	mov	r4, r1
 801ae6a:	6809      	ldr	r1, [r1, #0]
 801ae6c:	8923      	ldrh	r3, [r4, #8]
 801ae6e:	eba2 0c01 	sub.w	ip, r2, r1
 801ae72:	6862      	ldr	r2, [r4, #4]
 801ae74:	fbb2 f2f3 	udiv	r2, r2, r3
 801ae78:	fbbc fcf2 	udiv	ip, ip, r2
 801ae7c:	f10c 0c01 	add.w	ip, ip, #1
 801ae80:	fa1f fc8c 	uxth.w	ip, ip
 801ae84:	fbbc fef3 	udiv	lr, ip, r3
 801ae88:	fb03 c31e 	mls	r3, r3, lr, ip
 801ae8c:	b29b      	uxth	r3, r3
 801ae8e:	fb02 f303 	mul.w	r3, r2, r3
 801ae92:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801ae96:	58ca      	ldr	r2, [r1, r3]
 801ae98:	4463      	add	r3, ip
 801ae9a:	eba2 020c 	sub.w	r2, r2, ip
 801ae9e:	3308      	adds	r3, #8
 801aea0:	4605      	mov	r5, r0
 801aea2:	4419      	add	r1, r3
 801aea4:	3a04      	subs	r2, #4
 801aea6:	6903      	ldr	r3, [r0, #16]
 801aea8:	f7f4 fa16 	bl	800f2d8 <ucdr_init_buffer_origin>
 801aeac:	4628      	mov	r0, r5
 801aeae:	4903      	ldr	r1, [pc, #12]	@ (801aebc <on_full_output_buffer+0x58>)
 801aeb0:	4622      	mov	r2, r4
 801aeb2:	f7f4 f9ed 	bl	800f290 <ucdr_set_on_full_buffer_callback>
 801aeb6:	2000      	movs	r0, #0
 801aeb8:	bd38      	pop	{r3, r4, r5, pc}
 801aeba:	bf00      	nop
 801aebc:	0801ae65 	.word	0x0801ae65

0801aec0 <uxr_init_output_reliable_stream>:
 801aec0:	b410      	push	{r4}
 801aec2:	f89d c004 	ldrb.w	ip, [sp, #4]
 801aec6:	8103      	strh	r3, [r0, #8]
 801aec8:	e9c0 1200 	strd	r1, r2, [r0]
 801aecc:	f880 c00c 	strb.w	ip, [r0, #12]
 801aed0:	b1d3      	cbz	r3, 801af08 <uxr_init_output_reliable_stream+0x48>
 801aed2:	f8c1 c000 	str.w	ip, [r1]
 801aed6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801aeda:	f1bc 0f01 	cmp.w	ip, #1
 801aede:	d913      	bls.n	801af08 <uxr_init_output_reliable_stream+0x48>
 801aee0:	2301      	movs	r3, #1
 801aee2:	fbb3 f1fc 	udiv	r1, r3, ip
 801aee6:	fb0c 3111 	mls	r1, ip, r1, r3
 801aeea:	b289      	uxth	r1, r1
 801aeec:	6842      	ldr	r2, [r0, #4]
 801aeee:	6804      	ldr	r4, [r0, #0]
 801aef0:	fbb2 f2fc 	udiv	r2, r2, ip
 801aef4:	fb01 f202 	mul.w	r2, r1, r2
 801aef8:	7b01      	ldrb	r1, [r0, #12]
 801aefa:	50a1      	str	r1, [r4, r2]
 801aefc:	3301      	adds	r3, #1
 801aefe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801af02:	b29b      	uxth	r3, r3
 801af04:	459c      	cmp	ip, r3
 801af06:	d8ec      	bhi.n	801aee2 <uxr_init_output_reliable_stream+0x22>
 801af08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801af0c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801af10:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801af14:	4905      	ldr	r1, [pc, #20]	@ (801af2c <uxr_init_output_reliable_stream+0x6c>)
 801af16:	f85d 4b04 	ldr.w	r4, [sp], #4
 801af1a:	f8c0 100e 	str.w	r1, [r0, #14]
 801af1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801af22:	2300      	movs	r3, #0
 801af24:	8242      	strh	r2, [r0, #18]
 801af26:	8403      	strh	r3, [r0, #32]
 801af28:	4770      	bx	lr
 801af2a:	bf00      	nop
 801af2c:	ffff0000 	.word	0xffff0000

0801af30 <uxr_reset_output_reliable_stream>:
 801af30:	8901      	ldrh	r1, [r0, #8]
 801af32:	b1b1      	cbz	r1, 801af62 <uxr_reset_output_reliable_stream+0x32>
 801af34:	f04f 0c00 	mov.w	ip, #0
 801af38:	4663      	mov	r3, ip
 801af3a:	fbb3 f2f1 	udiv	r2, r3, r1
 801af3e:	fb01 3312 	mls	r3, r1, r2, r3
 801af42:	b29b      	uxth	r3, r3
 801af44:	6842      	ldr	r2, [r0, #4]
 801af46:	fbb2 f2f1 	udiv	r2, r2, r1
 801af4a:	6801      	ldr	r1, [r0, #0]
 801af4c:	fb02 f303 	mul.w	r3, r2, r3
 801af50:	7b02      	ldrb	r2, [r0, #12]
 801af52:	50ca      	str	r2, [r1, r3]
 801af54:	f10c 0c01 	add.w	ip, ip, #1
 801af58:	8901      	ldrh	r1, [r0, #8]
 801af5a:	fa1f f38c 	uxth.w	r3, ip
 801af5e:	4299      	cmp	r1, r3
 801af60:	d8eb      	bhi.n	801af3a <uxr_reset_output_reliable_stream+0xa>
 801af62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801af66:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801af6a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801af6e:	4904      	ldr	r1, [pc, #16]	@ (801af80 <uxr_reset_output_reliable_stream+0x50>)
 801af70:	f8c0 100e 	str.w	r1, [r0, #14]
 801af74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801af78:	2300      	movs	r3, #0
 801af7a:	8242      	strh	r2, [r0, #18]
 801af7c:	8403      	strh	r3, [r0, #32]
 801af7e:	4770      	bx	lr
 801af80:	ffff0000 	.word	0xffff0000

0801af84 <uxr_prepare_reliable_buffer_to_write>:
 801af84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af88:	4604      	mov	r4, r0
 801af8a:	b091      	sub	sp, #68	@ 0x44
 801af8c:	8900      	ldrh	r0, [r0, #8]
 801af8e:	89e6      	ldrh	r6, [r4, #14]
 801af90:	6823      	ldr	r3, [r4, #0]
 801af92:	9204      	str	r2, [sp, #16]
 801af94:	fbb6 f2f0 	udiv	r2, r6, r0
 801af98:	fb00 6212 	mls	r2, r0, r2, r6
 801af9c:	b292      	uxth	r2, r2
 801af9e:	6865      	ldr	r5, [r4, #4]
 801afa0:	fbb5 f5f0 	udiv	r5, r5, r0
 801afa4:	fb05 3202 	mla	r2, r5, r2, r3
 801afa8:	3204      	adds	r2, #4
 801afaa:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801afae:	f894 900c 	ldrb.w	r9, [r4, #12]
 801afb2:	9203      	str	r2, [sp, #12]
 801afb4:	468b      	mov	fp, r1
 801afb6:	1f2f      	subs	r7, r5, #4
 801afb8:	2800      	cmp	r0, #0
 801afba:	f000 814c 	beq.w	801b256 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801afbe:	f04f 0c00 	mov.w	ip, #0
 801afc2:	46e2      	mov	sl, ip
 801afc4:	4661      	mov	r1, ip
 801afc6:	fbb1 f2f0 	udiv	r2, r1, r0
 801afca:	fb00 1212 	mls	r2, r0, r2, r1
 801afce:	b292      	uxth	r2, r2
 801afd0:	fb05 f202 	mul.w	r2, r5, r2
 801afd4:	f10c 0c01 	add.w	ip, ip, #1
 801afd8:	589a      	ldr	r2, [r3, r2]
 801afda:	454a      	cmp	r2, r9
 801afdc:	bf08      	it	eq
 801afde:	f10a 0a01 	addeq.w	sl, sl, #1
 801afe2:	fa1f f18c 	uxth.w	r1, ip
 801afe6:	bf08      	it	eq
 801afe8:	fa1f fa8a 	uxtheq.w	sl, sl
 801afec:	4281      	cmp	r1, r0
 801afee:	d3ea      	bcc.n	801afc6 <uxr_prepare_reliable_buffer_to_write+0x42>
 801aff0:	4640      	mov	r0, r8
 801aff2:	2104      	movs	r1, #4
 801aff4:	f8cd a014 	str.w	sl, [sp, #20]
 801aff8:	f7f4 f97a 	bl	800f2f0 <ucdr_alignment>
 801affc:	4480      	add	r8, r0
 801affe:	eb08 020b 	add.w	r2, r8, fp
 801b002:	42ba      	cmp	r2, r7
 801b004:	f240 80cd 	bls.w	801b1a2 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801b008:	7b22      	ldrb	r2, [r4, #12]
 801b00a:	445a      	add	r2, fp
 801b00c:	42ba      	cmp	r2, r7
 801b00e:	f240 80b5 	bls.w	801b17c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801b012:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801b016:	33fc      	adds	r3, #252	@ 0xfc
 801b018:	b2ba      	uxth	r2, r7
 801b01a:	4413      	add	r3, r2
 801b01c:	b29b      	uxth	r3, r3
 801b01e:	fb0a f903 	mul.w	r9, sl, r3
 801b022:	45d9      	cmp	r9, fp
 801b024:	9305      	str	r3, [sp, #20]
 801b026:	9306      	str	r3, [sp, #24]
 801b028:	f0c0 80b7 	bcc.w	801b19a <uxr_prepare_reliable_buffer_to_write+0x216>
 801b02c:	f108 0304 	add.w	r3, r8, #4
 801b030:	42bb      	cmp	r3, r7
 801b032:	f080 80db 	bcs.w	801b1ec <uxr_prepare_reliable_buffer_to_write+0x268>
 801b036:	f1a2 0904 	sub.w	r9, r2, #4
 801b03a:	eba9 0908 	sub.w	r9, r9, r8
 801b03e:	9b05      	ldr	r3, [sp, #20]
 801b040:	fa1f f989 	uxth.w	r9, r9
 801b044:	ebab 0b09 	sub.w	fp, fp, r9
 801b048:	fbbb f2f3 	udiv	r2, fp, r3
 801b04c:	fb03 b312 	mls	r3, r3, r2, fp
 801b050:	2b00      	cmp	r3, #0
 801b052:	f000 80c8 	beq.w	801b1e6 <uxr_prepare_reliable_buffer_to_write+0x262>
 801b056:	3201      	adds	r2, #1
 801b058:	b292      	uxth	r2, r2
 801b05a:	9306      	str	r3, [sp, #24]
 801b05c:	4552      	cmp	r2, sl
 801b05e:	f200 809c 	bhi.w	801b19a <uxr_prepare_reliable_buffer_to_write+0x216>
 801b062:	f10d 0b20 	add.w	fp, sp, #32
 801b066:	2a00      	cmp	r2, #0
 801b068:	d042      	beq.n	801b0f0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801b06a:	f8cd 801c 	str.w	r8, [sp, #28]
 801b06e:	f04f 0a00 	mov.w	sl, #0
 801b072:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801b076:	9505      	str	r5, [sp, #20]
 801b078:	f10d 0b20 	add.w	fp, sp, #32
 801b07c:	4615      	mov	r5, r2
 801b07e:	e000      	b.n	801b082 <uxr_prepare_reliable_buffer_to_write+0xfe>
 801b080:	46c1      	mov	r9, r8
 801b082:	8920      	ldrh	r0, [r4, #8]
 801b084:	fbb6 f2f0 	udiv	r2, r6, r0
 801b088:	fb00 6112 	mls	r1, r0, r2, r6
 801b08c:	b28a      	uxth	r2, r1
 801b08e:	6863      	ldr	r3, [r4, #4]
 801b090:	fbb3 f1f0 	udiv	r1, r3, r0
 801b094:	6823      	ldr	r3, [r4, #0]
 801b096:	fb02 f101 	mul.w	r1, r2, r1
 801b09a:	3104      	adds	r1, #4
 801b09c:	4419      	add	r1, r3
 801b09e:	4658      	mov	r0, fp
 801b0a0:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801b0a4:	9200      	str	r2, [sp, #0]
 801b0a6:	2300      	movs	r3, #0
 801b0a8:	463a      	mov	r2, r7
 801b0aa:	f7f4 f90b 	bl	800f2c4 <ucdr_init_buffer_origin_offset>
 801b0ae:	464a      	mov	r2, r9
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	210d      	movs	r1, #13
 801b0b4:	4658      	mov	r0, fp
 801b0b6:	f7fa f921 	bl	80152fc <uxr_buffer_submessage_header>
 801b0ba:	8921      	ldrh	r1, [r4, #8]
 801b0bc:	fbb6 f2f1 	udiv	r2, r6, r1
 801b0c0:	fb01 6212 	mls	r2, r1, r2, r6
 801b0c4:	b292      	uxth	r2, r2
 801b0c6:	6863      	ldr	r3, [r4, #4]
 801b0c8:	fbb3 f3f1 	udiv	r3, r3, r1
 801b0cc:	fb02 f303 	mul.w	r3, r2, r3
 801b0d0:	6822      	ldr	r2, [r4, #0]
 801b0d2:	4630      	mov	r0, r6
 801b0d4:	50d7      	str	r7, [r2, r3]
 801b0d6:	2101      	movs	r1, #1
 801b0d8:	f000 f9c4 	bl	801b464 <uxr_seq_num_add>
 801b0dc:	f10a 0a01 	add.w	sl, sl, #1
 801b0e0:	fa1f f38a 	uxth.w	r3, sl
 801b0e4:	429d      	cmp	r5, r3
 801b0e6:	4606      	mov	r6, r0
 801b0e8:	d8ca      	bhi.n	801b080 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801b0ea:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b0ee:	9d05      	ldr	r5, [sp, #20]
 801b0f0:	8920      	ldrh	r0, [r4, #8]
 801b0f2:	fbb6 f3f0 	udiv	r3, r6, r0
 801b0f6:	fb00 6313 	mls	r3, r0, r3, r6
 801b0fa:	b299      	uxth	r1, r3
 801b0fc:	6863      	ldr	r3, [r4, #4]
 801b0fe:	fbb3 f3f0 	udiv	r3, r3, r0
 801b102:	fb01 f303 	mul.w	r3, r1, r3
 801b106:	6821      	ldr	r1, [r4, #0]
 801b108:	3304      	adds	r3, #4
 801b10a:	4419      	add	r1, r3
 801b10c:	463a      	mov	r2, r7
 801b10e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801b112:	9000      	str	r0, [sp, #0]
 801b114:	2300      	movs	r3, #0
 801b116:	4658      	mov	r0, fp
 801b118:	f7f4 f8d4 	bl	800f2c4 <ucdr_init_buffer_origin_offset>
 801b11c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801b120:	4658      	mov	r0, fp
 801b122:	fa1f f289 	uxth.w	r2, r9
 801b126:	2302      	movs	r3, #2
 801b128:	210d      	movs	r1, #13
 801b12a:	f7fa f8e7 	bl	80152fc <uxr_buffer_submessage_header>
 801b12e:	9b03      	ldr	r3, [sp, #12]
 801b130:	8927      	ldrh	r7, [r4, #8]
 801b132:	7b20      	ldrb	r0, [r4, #12]
 801b134:	f108 0104 	add.w	r1, r8, #4
 801b138:	440b      	add	r3, r1
 801b13a:	4619      	mov	r1, r3
 801b13c:	fbb6 f3f7 	udiv	r3, r6, r7
 801b140:	fb07 6313 	mls	r3, r7, r3, r6
 801b144:	f1a5 0208 	sub.w	r2, r5, #8
 801b148:	b29d      	uxth	r5, r3
 801b14a:	3004      	adds	r0, #4
 801b14c:	6863      	ldr	r3, [r4, #4]
 801b14e:	fbb3 f3f7 	udiv	r3, r3, r7
 801b152:	fb05 f303 	mul.w	r3, r5, r3
 801b156:	6825      	ldr	r5, [r4, #0]
 801b158:	4448      	add	r0, r9
 801b15a:	50e8      	str	r0, [r5, r3]
 801b15c:	9d04      	ldr	r5, [sp, #16]
 801b15e:	eba2 0208 	sub.w	r2, r2, r8
 801b162:	4628      	mov	r0, r5
 801b164:	f7f4 f8c0 	bl	800f2e8 <ucdr_init_buffer>
 801b168:	4628      	mov	r0, r5
 801b16a:	493c      	ldr	r1, [pc, #240]	@ (801b25c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801b16c:	4622      	mov	r2, r4
 801b16e:	f7f4 f88f 	bl	800f290 <ucdr_set_on_full_buffer_callback>
 801b172:	2001      	movs	r0, #1
 801b174:	81e6      	strh	r6, [r4, #14]
 801b176:	b011      	add	sp, #68	@ 0x44
 801b178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b17c:	2101      	movs	r1, #1
 801b17e:	89e0      	ldrh	r0, [r4, #14]
 801b180:	f000 f970 	bl	801b464 <uxr_seq_num_add>
 801b184:	8921      	ldrh	r1, [r4, #8]
 801b186:	4605      	mov	r5, r0
 801b188:	8a60      	ldrh	r0, [r4, #18]
 801b18a:	f000 f96b 	bl	801b464 <uxr_seq_num_add>
 801b18e:	4601      	mov	r1, r0
 801b190:	4628      	mov	r0, r5
 801b192:	f000 f96f 	bl	801b474 <uxr_seq_num_cmp>
 801b196:	2800      	cmp	r0, #0
 801b198:	dd42      	ble.n	801b220 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801b19a:	2000      	movs	r0, #0
 801b19c:	b011      	add	sp, #68	@ 0x44
 801b19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1a2:	8921      	ldrh	r1, [r4, #8]
 801b1a4:	8a60      	ldrh	r0, [r4, #18]
 801b1a6:	9205      	str	r2, [sp, #20]
 801b1a8:	f000 f95c 	bl	801b464 <uxr_seq_num_add>
 801b1ac:	4601      	mov	r1, r0
 801b1ae:	4630      	mov	r0, r6
 801b1b0:	f000 f960 	bl	801b474 <uxr_seq_num_cmp>
 801b1b4:	2800      	cmp	r0, #0
 801b1b6:	9a05      	ldr	r2, [sp, #20]
 801b1b8:	dcef      	bgt.n	801b19a <uxr_prepare_reliable_buffer_to_write+0x216>
 801b1ba:	8927      	ldrh	r7, [r4, #8]
 801b1bc:	fbb6 f3f7 	udiv	r3, r6, r7
 801b1c0:	fb07 6313 	mls	r3, r7, r3, r6
 801b1c4:	b29d      	uxth	r5, r3
 801b1c6:	6863      	ldr	r3, [r4, #4]
 801b1c8:	6824      	ldr	r4, [r4, #0]
 801b1ca:	fbb3 f3f7 	udiv	r3, r3, r7
 801b1ce:	fb05 f303 	mul.w	r3, r5, r3
 801b1d2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801b1d6:	50e2      	str	r2, [r4, r3]
 801b1d8:	2300      	movs	r3, #0
 801b1da:	f8cd 8000 	str.w	r8, [sp]
 801b1de:	f7f4 f871 	bl	800f2c4 <ucdr_init_buffer_origin_offset>
 801b1e2:	2001      	movs	r0, #1
 801b1e4:	e7da      	b.n	801b19c <uxr_prepare_reliable_buffer_to_write+0x218>
 801b1e6:	b293      	uxth	r3, r2
 801b1e8:	461a      	mov	r2, r3
 801b1ea:	e737      	b.n	801b05c <uxr_prepare_reliable_buffer_to_write+0xd8>
 801b1ec:	4630      	mov	r0, r6
 801b1ee:	2101      	movs	r1, #1
 801b1f0:	9207      	str	r2, [sp, #28]
 801b1f2:	f000 f937 	bl	801b464 <uxr_seq_num_add>
 801b1f6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b1fa:	fbb0 f1fc 	udiv	r1, r0, ip
 801b1fe:	fb0c 0111 	mls	r1, ip, r1, r0
 801b202:	4606      	mov	r6, r0
 801b204:	b288      	uxth	r0, r1
 801b206:	6863      	ldr	r3, [r4, #4]
 801b208:	fbb3 f1fc 	udiv	r1, r3, ip
 801b20c:	6823      	ldr	r3, [r4, #0]
 801b20e:	9a07      	ldr	r2, [sp, #28]
 801b210:	fb00 f101 	mul.w	r1, r0, r1
 801b214:	3104      	adds	r1, #4
 801b216:	440b      	add	r3, r1
 801b218:	9303      	str	r3, [sp, #12]
 801b21a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801b21e:	e70a      	b.n	801b036 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801b220:	8921      	ldrh	r1, [r4, #8]
 801b222:	fbb5 f3f1 	udiv	r3, r5, r1
 801b226:	fb01 5313 	mls	r3, r1, r3, r5
 801b22a:	b29a      	uxth	r2, r3
 801b22c:	6863      	ldr	r3, [r4, #4]
 801b22e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b232:	6821      	ldr	r1, [r4, #0]
 801b234:	9804      	ldr	r0, [sp, #16]
 801b236:	fb02 f303 	mul.w	r3, r2, r3
 801b23a:	3304      	adds	r3, #4
 801b23c:	7b22      	ldrb	r2, [r4, #12]
 801b23e:	4419      	add	r1, r3
 801b240:	445a      	add	r2, fp
 801b242:	f841 2c04 	str.w	r2, [r1, #-4]
 801b246:	7b23      	ldrb	r3, [r4, #12]
 801b248:	9300      	str	r3, [sp, #0]
 801b24a:	2300      	movs	r3, #0
 801b24c:	f7f4 f83a 	bl	800f2c4 <ucdr_init_buffer_origin_offset>
 801b250:	81e5      	strh	r5, [r4, #14]
 801b252:	2001      	movs	r0, #1
 801b254:	e7a2      	b.n	801b19c <uxr_prepare_reliable_buffer_to_write+0x218>
 801b256:	4682      	mov	sl, r0
 801b258:	e6ca      	b.n	801aff0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801b25a:	bf00      	nop
 801b25c:	0801ae65 	.word	0x0801ae65

0801b260 <uxr_prepare_next_reliable_buffer_to_send>:
 801b260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b262:	4604      	mov	r4, r0
 801b264:	460f      	mov	r7, r1
 801b266:	8a00      	ldrh	r0, [r0, #16]
 801b268:	2101      	movs	r1, #1
 801b26a:	4616      	mov	r6, r2
 801b26c:	461d      	mov	r5, r3
 801b26e:	f000 f8f9 	bl	801b464 <uxr_seq_num_add>
 801b272:	8028      	strh	r0, [r5, #0]
 801b274:	8922      	ldrh	r2, [r4, #8]
 801b276:	fbb0 f3f2 	udiv	r3, r0, r2
 801b27a:	fb02 0c13 	mls	ip, r2, r3, r0
 801b27e:	fa1f fc8c 	uxth.w	ip, ip
 801b282:	6863      	ldr	r3, [r4, #4]
 801b284:	fbb3 f3f2 	udiv	r3, r3, r2
 801b288:	fb0c fc03 	mul.w	ip, ip, r3
 801b28c:	6823      	ldr	r3, [r4, #0]
 801b28e:	89e1      	ldrh	r1, [r4, #14]
 801b290:	f10c 0c04 	add.w	ip, ip, #4
 801b294:	4463      	add	r3, ip
 801b296:	603b      	str	r3, [r7, #0]
 801b298:	6823      	ldr	r3, [r4, #0]
 801b29a:	449c      	add	ip, r3
 801b29c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801b2a0:	6033      	str	r3, [r6, #0]
 801b2a2:	f000 f8e7 	bl	801b474 <uxr_seq_num_cmp>
 801b2a6:	2800      	cmp	r0, #0
 801b2a8:	dd01      	ble.n	801b2ae <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801b2aa:	2000      	movs	r0, #0
 801b2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b2ae:	7b23      	ldrb	r3, [r4, #12]
 801b2b0:	6832      	ldr	r2, [r6, #0]
 801b2b2:	429a      	cmp	r2, r3
 801b2b4:	d9f9      	bls.n	801b2aa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801b2b6:	8a61      	ldrh	r1, [r4, #18]
 801b2b8:	8a20      	ldrh	r0, [r4, #16]
 801b2ba:	f000 f8d7 	bl	801b46c <uxr_seq_num_sub>
 801b2be:	8923      	ldrh	r3, [r4, #8]
 801b2c0:	4283      	cmp	r3, r0
 801b2c2:	d0f2      	beq.n	801b2aa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801b2c4:	8828      	ldrh	r0, [r5, #0]
 801b2c6:	89e3      	ldrh	r3, [r4, #14]
 801b2c8:	8220      	strh	r0, [r4, #16]
 801b2ca:	4298      	cmp	r0, r3
 801b2cc:	d001      	beq.n	801b2d2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801b2ce:	2001      	movs	r0, #1
 801b2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b2d2:	2101      	movs	r1, #1
 801b2d4:	f000 f8c6 	bl	801b464 <uxr_seq_num_add>
 801b2d8:	81e0      	strh	r0, [r4, #14]
 801b2da:	2001      	movs	r0, #1
 801b2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b2de:	bf00      	nop

0801b2e0 <uxr_update_output_stream_heartbeat_timestamp>:
 801b2e0:	b570      	push	{r4, r5, r6, lr}
 801b2e2:	8a01      	ldrh	r1, [r0, #16]
 801b2e4:	4604      	mov	r4, r0
 801b2e6:	8a40      	ldrh	r0, [r0, #18]
 801b2e8:	4615      	mov	r5, r2
 801b2ea:	461e      	mov	r6, r3
 801b2ec:	f000 f8c2 	bl	801b474 <uxr_seq_num_cmp>
 801b2f0:	2800      	cmp	r0, #0
 801b2f2:	db07      	blt.n	801b304 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801b2f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b2f8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801b2fc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801b300:	2000      	movs	r0, #0
 801b302:	bd70      	pop	{r4, r5, r6, pc}
 801b304:	f894 0020 	ldrb.w	r0, [r4, #32]
 801b308:	b940      	cbnz	r0, 801b31c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801b30a:	2301      	movs	r3, #1
 801b30c:	f884 3020 	strb.w	r3, [r4, #32]
 801b310:	3564      	adds	r5, #100	@ 0x64
 801b312:	f146 0600 	adc.w	r6, r6, #0
 801b316:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801b31a:	bd70      	pop	{r4, r5, r6, pc}
 801b31c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801b320:	4295      	cmp	r5, r2
 801b322:	eb76 0303 	sbcs.w	r3, r6, r3
 801b326:	bfa5      	ittet	ge
 801b328:	3001      	addge	r0, #1
 801b32a:	f884 0020 	strbge.w	r0, [r4, #32]
 801b32e:	2000      	movlt	r0, #0
 801b330:	2001      	movge	r0, #1
 801b332:	e7ed      	b.n	801b310 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801b334 <uxr_begin_output_nack_buffer_it>:
 801b334:	8a40      	ldrh	r0, [r0, #18]
 801b336:	4770      	bx	lr

0801b338 <uxr_next_reliable_nack_buffer_to_send>:
 801b338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b33c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801b340:	b082      	sub	sp, #8
 801b342:	f1b8 0f00 	cmp.w	r8, #0
 801b346:	d011      	beq.n	801b36c <uxr_next_reliable_nack_buffer_to_send+0x34>
 801b348:	4604      	mov	r4, r0
 801b34a:	8818      	ldrh	r0, [r3, #0]
 801b34c:	460e      	mov	r6, r1
 801b34e:	4617      	mov	r7, r2
 801b350:	461d      	mov	r5, r3
 801b352:	2101      	movs	r1, #1
 801b354:	f000 f886 	bl	801b464 <uxr_seq_num_add>
 801b358:	8028      	strh	r0, [r5, #0]
 801b35a:	8a21      	ldrh	r1, [r4, #16]
 801b35c:	f000 f88a 	bl	801b474 <uxr_seq_num_cmp>
 801b360:	2800      	cmp	r0, #0
 801b362:	dd07      	ble.n	801b374 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801b364:	f04f 0800 	mov.w	r8, #0
 801b368:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801b36c:	4640      	mov	r0, r8
 801b36e:	b002      	add	sp, #8
 801b370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b374:	8921      	ldrh	r1, [r4, #8]
 801b376:	8828      	ldrh	r0, [r5, #0]
 801b378:	6823      	ldr	r3, [r4, #0]
 801b37a:	fbb0 f2f1 	udiv	r2, r0, r1
 801b37e:	fb01 0c12 	mls	ip, r1, r2, r0
 801b382:	fa1f f28c 	uxth.w	r2, ip
 801b386:	9301      	str	r3, [sp, #4]
 801b388:	6863      	ldr	r3, [r4, #4]
 801b38a:	fbb3 fcf1 	udiv	ip, r3, r1
 801b38e:	9b01      	ldr	r3, [sp, #4]
 801b390:	fb02 fc0c 	mul.w	ip, r2, ip
 801b394:	f10c 0c04 	add.w	ip, ip, #4
 801b398:	4463      	add	r3, ip
 801b39a:	6033      	str	r3, [r6, #0]
 801b39c:	6823      	ldr	r3, [r4, #0]
 801b39e:	4463      	add	r3, ip
 801b3a0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801b3a4:	603b      	str	r3, [r7, #0]
 801b3a6:	7b22      	ldrb	r2, [r4, #12]
 801b3a8:	429a      	cmp	r2, r3
 801b3aa:	d0d2      	beq.n	801b352 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801b3ac:	4640      	mov	r0, r8
 801b3ae:	b002      	add	sp, #8
 801b3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b3b4 <uxr_process_acknack>:
 801b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3b6:	4604      	mov	r4, r0
 801b3b8:	460e      	mov	r6, r1
 801b3ba:	4610      	mov	r0, r2
 801b3bc:	2101      	movs	r1, #1
 801b3be:	f000 f855 	bl	801b46c <uxr_seq_num_sub>
 801b3c2:	8a61      	ldrh	r1, [r4, #18]
 801b3c4:	f000 f852 	bl	801b46c <uxr_seq_num_sub>
 801b3c8:	b1c0      	cbz	r0, 801b3fc <uxr_process_acknack+0x48>
 801b3ca:	4605      	mov	r5, r0
 801b3cc:	2700      	movs	r7, #0
 801b3ce:	2101      	movs	r1, #1
 801b3d0:	8a60      	ldrh	r0, [r4, #18]
 801b3d2:	f000 f847 	bl	801b464 <uxr_seq_num_add>
 801b3d6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b3da:	fbb0 f1fc 	udiv	r1, r0, ip
 801b3de:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b3e2:	fb0c 0111 	mls	r1, ip, r1, r0
 801b3e6:	b289      	uxth	r1, r1
 801b3e8:	3701      	adds	r7, #1
 801b3ea:	fbb3 f3fc 	udiv	r3, r3, ip
 801b3ee:	fb01 f303 	mul.w	r3, r1, r3
 801b3f2:	42bd      	cmp	r5, r7
 801b3f4:	7b21      	ldrb	r1, [r4, #12]
 801b3f6:	8260      	strh	r0, [r4, #18]
 801b3f8:	50d1      	str	r1, [r2, r3]
 801b3fa:	d1e8      	bne.n	801b3ce <uxr_process_acknack+0x1a>
 801b3fc:	3e00      	subs	r6, #0
 801b3fe:	f04f 0300 	mov.w	r3, #0
 801b402:	bf18      	it	ne
 801b404:	2601      	movne	r6, #1
 801b406:	f884 3020 	strb.w	r3, [r4, #32]
 801b40a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801b40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b410 <uxr_is_output_up_to_date>:
 801b410:	8a01      	ldrh	r1, [r0, #16]
 801b412:	8a40      	ldrh	r0, [r0, #18]
 801b414:	b508      	push	{r3, lr}
 801b416:	f000 f82d 	bl	801b474 <uxr_seq_num_cmp>
 801b41a:	fab0 f080 	clz	r0, r0
 801b41e:	0940      	lsrs	r0, r0, #5
 801b420:	bd08      	pop	{r3, pc}
 801b422:	bf00      	nop

0801b424 <get_available_free_slots>:
 801b424:	8902      	ldrh	r2, [r0, #8]
 801b426:	b1da      	cbz	r2, 801b460 <get_available_free_slots+0x3c>
 801b428:	b530      	push	{r4, r5, lr}
 801b42a:	2100      	movs	r1, #0
 801b42c:	6843      	ldr	r3, [r0, #4]
 801b42e:	6805      	ldr	r5, [r0, #0]
 801b430:	7b04      	ldrb	r4, [r0, #12]
 801b432:	fbb3 fef2 	udiv	lr, r3, r2
 801b436:	4608      	mov	r0, r1
 801b438:	460b      	mov	r3, r1
 801b43a:	fbb3 fcf2 	udiv	ip, r3, r2
 801b43e:	fb02 331c 	mls	r3, r2, ip, r3
 801b442:	b29b      	uxth	r3, r3
 801b444:	fb0e f303 	mul.w	r3, lr, r3
 801b448:	3101      	adds	r1, #1
 801b44a:	f855 c003 	ldr.w	ip, [r5, r3]
 801b44e:	4564      	cmp	r4, ip
 801b450:	bf08      	it	eq
 801b452:	3001      	addeq	r0, #1
 801b454:	b28b      	uxth	r3, r1
 801b456:	bf08      	it	eq
 801b458:	b280      	uxtheq	r0, r0
 801b45a:	4293      	cmp	r3, r2
 801b45c:	d3ed      	bcc.n	801b43a <get_available_free_slots+0x16>
 801b45e:	bd30      	pop	{r4, r5, pc}
 801b460:	4610      	mov	r0, r2
 801b462:	4770      	bx	lr

0801b464 <uxr_seq_num_add>:
 801b464:	4408      	add	r0, r1
 801b466:	b280      	uxth	r0, r0
 801b468:	4770      	bx	lr
 801b46a:	bf00      	nop

0801b46c <uxr_seq_num_sub>:
 801b46c:	1a40      	subs	r0, r0, r1
 801b46e:	b280      	uxth	r0, r0
 801b470:	4770      	bx	lr
 801b472:	bf00      	nop

0801b474 <uxr_seq_num_cmp>:
 801b474:	4288      	cmp	r0, r1
 801b476:	d011      	beq.n	801b49c <uxr_seq_num_cmp+0x28>
 801b478:	d309      	bcc.n	801b48e <uxr_seq_num_cmp+0x1a>
 801b47a:	4288      	cmp	r0, r1
 801b47c:	d910      	bls.n	801b4a0 <uxr_seq_num_cmp+0x2c>
 801b47e:	1a40      	subs	r0, r0, r1
 801b480:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801b484:	bfd4      	ite	le
 801b486:	2001      	movle	r0, #1
 801b488:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801b48c:	4770      	bx	lr
 801b48e:	1a0b      	subs	r3, r1, r0
 801b490:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801b494:	daf1      	bge.n	801b47a <uxr_seq_num_cmp+0x6>
 801b496:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b49a:	4770      	bx	lr
 801b49c:	2000      	movs	r0, #0
 801b49e:	4770      	bx	lr
 801b4a0:	2001      	movs	r0, #1
 801b4a2:	4770      	bx	lr

0801b4a4 <rcl_get_default_domain_id>:
 801b4a4:	b530      	push	{r4, r5, lr}
 801b4a6:	b083      	sub	sp, #12
 801b4a8:	2300      	movs	r3, #0
 801b4aa:	9300      	str	r3, [sp, #0]
 801b4ac:	b1d0      	cbz	r0, 801b4e4 <rcl_get_default_domain_id+0x40>
 801b4ae:	4604      	mov	r4, r0
 801b4b0:	4669      	mov	r1, sp
 801b4b2:	4815      	ldr	r0, [pc, #84]	@ (801b508 <rcl_get_default_domain_id+0x64>)
 801b4b4:	f7fe f814 	bl	80194e0 <rcutils_get_env>
 801b4b8:	4602      	mov	r2, r0
 801b4ba:	b110      	cbz	r0, 801b4c2 <rcl_get_default_domain_id+0x1e>
 801b4bc:	2001      	movs	r0, #1
 801b4be:	b003      	add	sp, #12
 801b4c0:	bd30      	pop	{r4, r5, pc}
 801b4c2:	9b00      	ldr	r3, [sp, #0]
 801b4c4:	b18b      	cbz	r3, 801b4ea <rcl_get_default_domain_id+0x46>
 801b4c6:	7818      	ldrb	r0, [r3, #0]
 801b4c8:	2800      	cmp	r0, #0
 801b4ca:	d0f8      	beq.n	801b4be <rcl_get_default_domain_id+0x1a>
 801b4cc:	a901      	add	r1, sp, #4
 801b4ce:	4618      	mov	r0, r3
 801b4d0:	9201      	str	r2, [sp, #4]
 801b4d2:	f000 fe39 	bl	801c148 <strtoul>
 801b4d6:	4605      	mov	r5, r0
 801b4d8:	b150      	cbz	r0, 801b4f0 <rcl_get_default_domain_id+0x4c>
 801b4da:	1c43      	adds	r3, r0, #1
 801b4dc:	d00d      	beq.n	801b4fa <rcl_get_default_domain_id+0x56>
 801b4de:	6025      	str	r5, [r4, #0]
 801b4e0:	2000      	movs	r0, #0
 801b4e2:	e7ec      	b.n	801b4be <rcl_get_default_domain_id+0x1a>
 801b4e4:	200b      	movs	r0, #11
 801b4e6:	b003      	add	sp, #12
 801b4e8:	bd30      	pop	{r4, r5, pc}
 801b4ea:	4618      	mov	r0, r3
 801b4ec:	b003      	add	sp, #12
 801b4ee:	bd30      	pop	{r4, r5, pc}
 801b4f0:	9b01      	ldr	r3, [sp, #4]
 801b4f2:	781b      	ldrb	r3, [r3, #0]
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d0f2      	beq.n	801b4de <rcl_get_default_domain_id+0x3a>
 801b4f8:	e7e0      	b.n	801b4bc <rcl_get_default_domain_id+0x18>
 801b4fa:	f001 f95f 	bl	801c7bc <__errno>
 801b4fe:	6803      	ldr	r3, [r0, #0]
 801b500:	2b22      	cmp	r3, #34	@ 0x22
 801b502:	d1ec      	bne.n	801b4de <rcl_get_default_domain_id+0x3a>
 801b504:	e7da      	b.n	801b4bc <rcl_get_default_domain_id+0x18>
 801b506:	bf00      	nop
 801b508:	0801f2a4 	.word	0x0801f2a4

0801b50c <rcl_expand_topic_name>:
 801b50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b510:	b08b      	sub	sp, #44	@ 0x2c
 801b512:	9306      	str	r3, [sp, #24]
 801b514:	2800      	cmp	r0, #0
 801b516:	f000 80ad 	beq.w	801b674 <rcl_expand_topic_name+0x168>
 801b51a:	460e      	mov	r6, r1
 801b51c:	2900      	cmp	r1, #0
 801b51e:	f000 80a9 	beq.w	801b674 <rcl_expand_topic_name+0x168>
 801b522:	4617      	mov	r7, r2
 801b524:	2a00      	cmp	r2, #0
 801b526:	f000 80a5 	beq.w	801b674 <rcl_expand_topic_name+0x168>
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	f000 80a2 	beq.w	801b674 <rcl_expand_topic_name+0x168>
 801b530:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b532:	2b00      	cmp	r3, #0
 801b534:	f000 809e 	beq.w	801b674 <rcl_expand_topic_name+0x168>
 801b538:	2200      	movs	r2, #0
 801b53a:	a909      	add	r1, sp, #36	@ 0x24
 801b53c:	4680      	mov	r8, r0
 801b53e:	f000 fa57 	bl	801b9f0 <rcl_validate_topic_name>
 801b542:	4604      	mov	r4, r0
 801b544:	2800      	cmp	r0, #0
 801b546:	f040 8096 	bne.w	801b676 <rcl_expand_topic_name+0x16a>
 801b54a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b54c:	2b00      	cmp	r3, #0
 801b54e:	f040 809a 	bne.w	801b686 <rcl_expand_topic_name+0x17a>
 801b552:	4602      	mov	r2, r0
 801b554:	a909      	add	r1, sp, #36	@ 0x24
 801b556:	4630      	mov	r0, r6
 801b558:	f7fe fbec 	bl	8019d34 <rmw_validate_node_name>
 801b55c:	2800      	cmp	r0, #0
 801b55e:	f040 808e 	bne.w	801b67e <rcl_expand_topic_name+0x172>
 801b562:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b564:	2a00      	cmp	r2, #0
 801b566:	f040 8093 	bne.w	801b690 <rcl_expand_topic_name+0x184>
 801b56a:	a909      	add	r1, sp, #36	@ 0x24
 801b56c:	4638      	mov	r0, r7
 801b56e:	f7fe fbc3 	bl	8019cf8 <rmw_validate_namespace>
 801b572:	2800      	cmp	r0, #0
 801b574:	f040 8083 	bne.w	801b67e <rcl_expand_topic_name+0x172>
 801b578:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801b57a:	2c00      	cmp	r4, #0
 801b57c:	f040 80ed 	bne.w	801b75a <rcl_expand_topic_name+0x24e>
 801b580:	217b      	movs	r1, #123	@ 0x7b
 801b582:	4640      	mov	r0, r8
 801b584:	f001 f88e 	bl	801c6a4 <strchr>
 801b588:	f898 3000 	ldrb.w	r3, [r8]
 801b58c:	2b2f      	cmp	r3, #47	@ 0x2f
 801b58e:	4605      	mov	r5, r0
 801b590:	f000 809e 	beq.w	801b6d0 <rcl_expand_topic_name+0x1c4>
 801b594:	2b7e      	cmp	r3, #126	@ 0x7e
 801b596:	f040 80a2 	bne.w	801b6de <rcl_expand_topic_name+0x1d2>
 801b59a:	4638      	mov	r0, r7
 801b59c:	f7e4 fe4a 	bl	8000234 <strlen>
 801b5a0:	4a82      	ldr	r2, [pc, #520]	@ (801b7ac <rcl_expand_topic_name+0x2a0>)
 801b5a2:	4b83      	ldr	r3, [pc, #524]	@ (801b7b0 <rcl_expand_topic_name+0x2a4>)
 801b5a4:	2801      	cmp	r0, #1
 801b5a6:	bf18      	it	ne
 801b5a8:	4613      	movne	r3, r2
 801b5aa:	9302      	str	r3, [sp, #8]
 801b5ac:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b5ae:	9300      	str	r3, [sp, #0]
 801b5b0:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801b5b4:	f108 0301 	add.w	r3, r8, #1
 801b5b8:	9305      	str	r3, [sp, #20]
 801b5ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b5be:	9301      	str	r3, [sp, #4]
 801b5c0:	ab14      	add	r3, sp, #80	@ 0x50
 801b5c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b5c4:	f7fd ffb4 	bl	8019530 <rcutils_format_string_limit>
 801b5c8:	4682      	mov	sl, r0
 801b5ca:	2800      	cmp	r0, #0
 801b5cc:	f000 80c7 	beq.w	801b75e <rcl_expand_topic_name+0x252>
 801b5d0:	2d00      	cmp	r5, #0
 801b5d2:	f000 80a2 	beq.w	801b71a <rcl_expand_topic_name+0x20e>
 801b5d6:	217b      	movs	r1, #123	@ 0x7b
 801b5d8:	f001 f864 	bl	801c6a4 <strchr>
 801b5dc:	46d1      	mov	r9, sl
 801b5de:	4605      	mov	r5, r0
 801b5e0:	9407      	str	r4, [sp, #28]
 801b5e2:	46d3      	mov	fp, sl
 801b5e4:	464c      	mov	r4, r9
 801b5e6:	2d00      	cmp	r5, #0
 801b5e8:	f000 80be 	beq.w	801b768 <rcl_expand_topic_name+0x25c>
 801b5ec:	217d      	movs	r1, #125	@ 0x7d
 801b5ee:	4620      	mov	r0, r4
 801b5f0:	f001 f858 	bl	801c6a4 <strchr>
 801b5f4:	eba0 0905 	sub.w	r9, r0, r5
 801b5f8:	f109 0a01 	add.w	sl, r9, #1
 801b5fc:	486d      	ldr	r0, [pc, #436]	@ (801b7b4 <rcl_expand_topic_name+0x2a8>)
 801b5fe:	4652      	mov	r2, sl
 801b600:	4629      	mov	r1, r5
 801b602:	f001 f85c 	bl	801c6be <strncmp>
 801b606:	2800      	cmp	r0, #0
 801b608:	d067      	beq.n	801b6da <rcl_expand_topic_name+0x1ce>
 801b60a:	486b      	ldr	r0, [pc, #428]	@ (801b7b8 <rcl_expand_topic_name+0x2ac>)
 801b60c:	4652      	mov	r2, sl
 801b60e:	4629      	mov	r1, r5
 801b610:	f001 f855 	bl	801c6be <strncmp>
 801b614:	b130      	cbz	r0, 801b624 <rcl_expand_topic_name+0x118>
 801b616:	4869      	ldr	r0, [pc, #420]	@ (801b7bc <rcl_expand_topic_name+0x2b0>)
 801b618:	4652      	mov	r2, sl
 801b61a:	4629      	mov	r1, r5
 801b61c:	f001 f84f 	bl	801c6be <strncmp>
 801b620:	2800      	cmp	r0, #0
 801b622:	d137      	bne.n	801b694 <rcl_expand_topic_name+0x188>
 801b624:	46b9      	mov	r9, r7
 801b626:	ab16      	add	r3, sp, #88	@ 0x58
 801b628:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b62c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b630:	ab14      	add	r3, sp, #80	@ 0x50
 801b632:	4628      	mov	r0, r5
 801b634:	cb0c      	ldmia	r3, {r2, r3}
 801b636:	4651      	mov	r1, sl
 801b638:	f7fe f8b6 	bl	80197a8 <rcutils_strndup>
 801b63c:	4605      	mov	r5, r0
 801b63e:	2800      	cmp	r0, #0
 801b640:	f000 809c 	beq.w	801b77c <rcl_expand_topic_name+0x270>
 801b644:	464a      	mov	r2, r9
 801b646:	4620      	mov	r0, r4
 801b648:	ab14      	add	r3, sp, #80	@ 0x50
 801b64a:	4629      	mov	r1, r5
 801b64c:	f7fd ffaa 	bl	80195a4 <rcutils_repl_str>
 801b650:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b652:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b654:	4604      	mov	r4, r0
 801b656:	4628      	mov	r0, r5
 801b658:	4798      	blx	r3
 801b65a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b65c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b65e:	4658      	mov	r0, fp
 801b660:	4798      	blx	r3
 801b662:	2c00      	cmp	r4, #0
 801b664:	d07b      	beq.n	801b75e <rcl_expand_topic_name+0x252>
 801b666:	217b      	movs	r1, #123	@ 0x7b
 801b668:	4620      	mov	r0, r4
 801b66a:	f001 f81b 	bl	801c6a4 <strchr>
 801b66e:	46a3      	mov	fp, r4
 801b670:	4605      	mov	r5, r0
 801b672:	e7b8      	b.n	801b5e6 <rcl_expand_topic_name+0xda>
 801b674:	240b      	movs	r4, #11
 801b676:	4620      	mov	r0, r4
 801b678:	b00b      	add	sp, #44	@ 0x2c
 801b67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b67e:	f7fb f8a9 	bl	80167d4 <rcl_convert_rmw_ret_to_rcl_ret>
 801b682:	4604      	mov	r4, r0
 801b684:	e7f7      	b.n	801b676 <rcl_expand_topic_name+0x16a>
 801b686:	2467      	movs	r4, #103	@ 0x67
 801b688:	4620      	mov	r0, r4
 801b68a:	b00b      	add	sp, #44	@ 0x2c
 801b68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b690:	24c9      	movs	r4, #201	@ 0xc9
 801b692:	e7f0      	b.n	801b676 <rcl_expand_topic_name+0x16a>
 801b694:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801b698:	9806      	ldr	r0, [sp, #24]
 801b69a:	1c69      	adds	r1, r5, #1
 801b69c:	f7fe f99e 	bl	80199dc <rcutils_string_map_getn>
 801b6a0:	4681      	mov	r9, r0
 801b6a2:	2800      	cmp	r0, #0
 801b6a4:	d1bf      	bne.n	801b626 <rcl_expand_topic_name+0x11a>
 801b6a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b6a8:	aa16      	add	r2, sp, #88	@ 0x58
 801b6aa:	6018      	str	r0, [r3, #0]
 801b6ac:	ca07      	ldmia	r2, {r0, r1, r2}
 801b6ae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b6b2:	ab14      	add	r3, sp, #80	@ 0x50
 801b6b4:	cb0c      	ldmia	r3, {r2, r3}
 801b6b6:	4651      	mov	r1, sl
 801b6b8:	4628      	mov	r0, r5
 801b6ba:	f7fe f875 	bl	80197a8 <rcutils_strndup>
 801b6be:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b6c0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b6c2:	4798      	blx	r3
 801b6c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b6c6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b6c8:	4658      	mov	r0, fp
 801b6ca:	2469      	movs	r4, #105	@ 0x69
 801b6cc:	4798      	blx	r3
 801b6ce:	e7d2      	b.n	801b676 <rcl_expand_topic_name+0x16a>
 801b6d0:	2800      	cmp	r0, #0
 801b6d2:	d05b      	beq.n	801b78c <rcl_expand_topic_name+0x280>
 801b6d4:	46c1      	mov	r9, r8
 801b6d6:	46a2      	mov	sl, r4
 801b6d8:	e782      	b.n	801b5e0 <rcl_expand_topic_name+0xd4>
 801b6da:	46b1      	mov	r9, r6
 801b6dc:	e7a3      	b.n	801b626 <rcl_expand_topic_name+0x11a>
 801b6de:	2800      	cmp	r0, #0
 801b6e0:	d1f8      	bne.n	801b6d4 <rcl_expand_topic_name+0x1c8>
 801b6e2:	4638      	mov	r0, r7
 801b6e4:	f7e4 fda6 	bl	8000234 <strlen>
 801b6e8:	4a35      	ldr	r2, [pc, #212]	@ (801b7c0 <rcl_expand_topic_name+0x2b4>)
 801b6ea:	4b36      	ldr	r3, [pc, #216]	@ (801b7c4 <rcl_expand_topic_name+0x2b8>)
 801b6ec:	f8cd 8010 	str.w	r8, [sp, #16]
 801b6f0:	2801      	cmp	r0, #1
 801b6f2:	bf18      	it	ne
 801b6f4:	4613      	movne	r3, r2
 801b6f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801b6fa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801b6fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b700:	9703      	str	r7, [sp, #12]
 801b702:	9200      	str	r2, [sp, #0]
 801b704:	ab14      	add	r3, sp, #80	@ 0x50
 801b706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b708:	f7fd ff12 	bl	8019530 <rcutils_format_string_limit>
 801b70c:	4682      	mov	sl, r0
 801b70e:	4653      	mov	r3, sl
 801b710:	b32b      	cbz	r3, 801b75e <rcl_expand_topic_name+0x252>
 801b712:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b714:	f8c3 a000 	str.w	sl, [r3]
 801b718:	e7ad      	b.n	801b676 <rcl_expand_topic_name+0x16a>
 801b71a:	f89a 3000 	ldrb.w	r3, [sl]
 801b71e:	2b2f      	cmp	r3, #47	@ 0x2f
 801b720:	d0f7      	beq.n	801b712 <rcl_expand_topic_name+0x206>
 801b722:	4638      	mov	r0, r7
 801b724:	f7e4 fd86 	bl	8000234 <strlen>
 801b728:	4a25      	ldr	r2, [pc, #148]	@ (801b7c0 <rcl_expand_topic_name+0x2b4>)
 801b72a:	4b26      	ldr	r3, [pc, #152]	@ (801b7c4 <rcl_expand_topic_name+0x2b8>)
 801b72c:	f8cd a010 	str.w	sl, [sp, #16]
 801b730:	2801      	cmp	r0, #1
 801b732:	bf18      	it	ne
 801b734:	4613      	movne	r3, r2
 801b736:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801b73a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801b73e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b740:	9703      	str	r7, [sp, #12]
 801b742:	9200      	str	r2, [sp, #0]
 801b744:	ab14      	add	r3, sp, #80	@ 0x50
 801b746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b748:	f7fd fef2 	bl	8019530 <rcutils_format_string_limit>
 801b74c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b74e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b750:	4605      	mov	r5, r0
 801b752:	4650      	mov	r0, sl
 801b754:	4798      	blx	r3
 801b756:	46aa      	mov	sl, r5
 801b758:	e7d9      	b.n	801b70e <rcl_expand_topic_name+0x202>
 801b75a:	24ca      	movs	r4, #202	@ 0xca
 801b75c:	e78b      	b.n	801b676 <rcl_expand_topic_name+0x16a>
 801b75e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801b760:	2300      	movs	r3, #0
 801b762:	6013      	str	r3, [r2, #0]
 801b764:	240a      	movs	r4, #10
 801b766:	e786      	b.n	801b676 <rcl_expand_topic_name+0x16a>
 801b768:	465b      	mov	r3, fp
 801b76a:	9c07      	ldr	r4, [sp, #28]
 801b76c:	46da      	mov	sl, fp
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d1d3      	bne.n	801b71a <rcl_expand_topic_name+0x20e>
 801b772:	f898 3000 	ldrb.w	r3, [r8]
 801b776:	2b2f      	cmp	r3, #47	@ 0x2f
 801b778:	d0cb      	beq.n	801b712 <rcl_expand_topic_name+0x206>
 801b77a:	e7b2      	b.n	801b6e2 <rcl_expand_topic_name+0x1d6>
 801b77c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801b780:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b782:	6015      	str	r5, [r2, #0]
 801b784:	4658      	mov	r0, fp
 801b786:	4798      	blx	r3
 801b788:	240a      	movs	r4, #10
 801b78a:	e774      	b.n	801b676 <rcl_expand_topic_name+0x16a>
 801b78c:	ab17      	add	r3, sp, #92	@ 0x5c
 801b78e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b792:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b796:	ab14      	add	r3, sp, #80	@ 0x50
 801b798:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b79a:	4640      	mov	r0, r8
 801b79c:	f7fd ffe2 	bl	8019764 <rcutils_strdup>
 801b7a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b7a2:	2800      	cmp	r0, #0
 801b7a4:	6018      	str	r0, [r3, #0]
 801b7a6:	bf08      	it	eq
 801b7a8:	240a      	moveq	r4, #10
 801b7aa:	e764      	b.n	801b676 <rcl_expand_topic_name+0x16a>
 801b7ac:	0801f2b4 	.word	0x0801f2b4
 801b7b0:	0801e4d4 	.word	0x0801e4d4
 801b7b4:	0801f2bc 	.word	0x0801f2bc
 801b7b8:	0801f2c4 	.word	0x0801f2c4
 801b7bc:	0801f2cc 	.word	0x0801f2cc
 801b7c0:	0801e4c0 	.word	0x0801e4c0
 801b7c4:	0801e4e4 	.word	0x0801e4e4

0801b7c8 <rcl_get_default_topic_name_substitutions>:
 801b7c8:	2800      	cmp	r0, #0
 801b7ca:	bf0c      	ite	eq
 801b7cc:	200b      	moveq	r0, #11
 801b7ce:	2000      	movne	r0, #0
 801b7d0:	4770      	bx	lr
 801b7d2:	bf00      	nop

0801b7d4 <rcl_get_zero_initialized_guard_condition>:
 801b7d4:	4a03      	ldr	r2, [pc, #12]	@ (801b7e4 <rcl_get_zero_initialized_guard_condition+0x10>)
 801b7d6:	4603      	mov	r3, r0
 801b7d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b7dc:	e883 0003 	stmia.w	r3, {r0, r1}
 801b7e0:	4618      	mov	r0, r3
 801b7e2:	4770      	bx	lr
 801b7e4:	0801f2d8 	.word	0x0801f2d8

0801b7e8 <rcl_guard_condition_init>:
 801b7e8:	b082      	sub	sp, #8
 801b7ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7ec:	b087      	sub	sp, #28
 801b7ee:	ac0c      	add	r4, sp, #48	@ 0x30
 801b7f0:	e884 000c 	stmia.w	r4, {r2, r3}
 801b7f4:	46a6      	mov	lr, r4
 801b7f6:	460d      	mov	r5, r1
 801b7f8:	4604      	mov	r4, r0
 801b7fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b7fe:	f10d 0c04 	add.w	ip, sp, #4
 801b802:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b806:	f8de 3000 	ldr.w	r3, [lr]
 801b80a:	f8cc 3000 	str.w	r3, [ip]
 801b80e:	a801      	add	r0, sp, #4
 801b810:	f7f4 ffc0 	bl	8010794 <rcutils_allocator_is_valid>
 801b814:	b338      	cbz	r0, 801b866 <rcl_guard_condition_init+0x7e>
 801b816:	b334      	cbz	r4, 801b866 <rcl_guard_condition_init+0x7e>
 801b818:	6866      	ldr	r6, [r4, #4]
 801b81a:	b9ee      	cbnz	r6, 801b858 <rcl_guard_condition_init+0x70>
 801b81c:	b31d      	cbz	r5, 801b866 <rcl_guard_condition_init+0x7e>
 801b81e:	4628      	mov	r0, r5
 801b820:	f7fa fff6 	bl	8016810 <rcl_context_is_valid>
 801b824:	b308      	cbz	r0, 801b86a <rcl_guard_condition_init+0x82>
 801b826:	9b01      	ldr	r3, [sp, #4]
 801b828:	9905      	ldr	r1, [sp, #20]
 801b82a:	201c      	movs	r0, #28
 801b82c:	4798      	blx	r3
 801b82e:	4607      	mov	r7, r0
 801b830:	6060      	str	r0, [r4, #4]
 801b832:	b310      	cbz	r0, 801b87a <rcl_guard_condition_init+0x92>
 801b834:	6828      	ldr	r0, [r5, #0]
 801b836:	3028      	adds	r0, #40	@ 0x28
 801b838:	f000 f9ac 	bl	801bb94 <rmw_create_guard_condition>
 801b83c:	6038      	str	r0, [r7, #0]
 801b83e:	6860      	ldr	r0, [r4, #4]
 801b840:	6805      	ldr	r5, [r0, #0]
 801b842:	b1a5      	cbz	r5, 801b86e <rcl_guard_condition_init+0x86>
 801b844:	2301      	movs	r3, #1
 801b846:	ac01      	add	r4, sp, #4
 801b848:	7103      	strb	r3, [r0, #4]
 801b84a:	f100 0708 	add.w	r7, r0, #8
 801b84e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b850:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801b852:	6823      	ldr	r3, [r4, #0]
 801b854:	603b      	str	r3, [r7, #0]
 801b856:	e000      	b.n	801b85a <rcl_guard_condition_init+0x72>
 801b858:	2664      	movs	r6, #100	@ 0x64
 801b85a:	4630      	mov	r0, r6
 801b85c:	b007      	add	sp, #28
 801b85e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b862:	b002      	add	sp, #8
 801b864:	4770      	bx	lr
 801b866:	260b      	movs	r6, #11
 801b868:	e7f7      	b.n	801b85a <rcl_guard_condition_init+0x72>
 801b86a:	2665      	movs	r6, #101	@ 0x65
 801b86c:	e7f5      	b.n	801b85a <rcl_guard_condition_init+0x72>
 801b86e:	9b02      	ldr	r3, [sp, #8]
 801b870:	9905      	ldr	r1, [sp, #20]
 801b872:	4798      	blx	r3
 801b874:	2601      	movs	r6, #1
 801b876:	6065      	str	r5, [r4, #4]
 801b878:	e7ef      	b.n	801b85a <rcl_guard_condition_init+0x72>
 801b87a:	260a      	movs	r6, #10
 801b87c:	e7ed      	b.n	801b85a <rcl_guard_condition_init+0x72>
 801b87e:	bf00      	nop

0801b880 <rcl_guard_condition_init_from_rmw>:
 801b880:	b082      	sub	sp, #8
 801b882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b886:	b086      	sub	sp, #24
 801b888:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b88c:	4604      	mov	r4, r0
 801b88e:	f84c 3f04 	str.w	r3, [ip, #4]!
 801b892:	460e      	mov	r6, r1
 801b894:	4617      	mov	r7, r2
 801b896:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b89a:	f10d 0e04 	add.w	lr, sp, #4
 801b89e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b8a2:	f8dc 3000 	ldr.w	r3, [ip]
 801b8a6:	f8ce 3000 	str.w	r3, [lr]
 801b8aa:	a801      	add	r0, sp, #4
 801b8ac:	f7f4 ff72 	bl	8010794 <rcutils_allocator_is_valid>
 801b8b0:	b350      	cbz	r0, 801b908 <rcl_guard_condition_init_from_rmw+0x88>
 801b8b2:	b34c      	cbz	r4, 801b908 <rcl_guard_condition_init_from_rmw+0x88>
 801b8b4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b8b8:	f1b8 0f00 	cmp.w	r8, #0
 801b8bc:	d11e      	bne.n	801b8fc <rcl_guard_condition_init_from_rmw+0x7c>
 801b8be:	b31f      	cbz	r7, 801b908 <rcl_guard_condition_init_from_rmw+0x88>
 801b8c0:	4638      	mov	r0, r7
 801b8c2:	f7fa ffa5 	bl	8016810 <rcl_context_is_valid>
 801b8c6:	b328      	cbz	r0, 801b914 <rcl_guard_condition_init_from_rmw+0x94>
 801b8c8:	9b01      	ldr	r3, [sp, #4]
 801b8ca:	9905      	ldr	r1, [sp, #20]
 801b8cc:	201c      	movs	r0, #28
 801b8ce:	4798      	blx	r3
 801b8d0:	4605      	mov	r5, r0
 801b8d2:	6060      	str	r0, [r4, #4]
 801b8d4:	b358      	cbz	r0, 801b92e <rcl_guard_condition_init_from_rmw+0xae>
 801b8d6:	b1fe      	cbz	r6, 801b918 <rcl_guard_condition_init_from_rmw+0x98>
 801b8d8:	6006      	str	r6, [r0, #0]
 801b8da:	f880 8004 	strb.w	r8, [r0, #4]
 801b8de:	ac01      	add	r4, sp, #4
 801b8e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b8e2:	f105 0c08 	add.w	ip, r5, #8
 801b8e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b8ea:	6823      	ldr	r3, [r4, #0]
 801b8ec:	f8cc 3000 	str.w	r3, [ip]
 801b8f0:	2000      	movs	r0, #0
 801b8f2:	b006      	add	sp, #24
 801b8f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b8f8:	b002      	add	sp, #8
 801b8fa:	4770      	bx	lr
 801b8fc:	2064      	movs	r0, #100	@ 0x64
 801b8fe:	b006      	add	sp, #24
 801b900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b904:	b002      	add	sp, #8
 801b906:	4770      	bx	lr
 801b908:	200b      	movs	r0, #11
 801b90a:	b006      	add	sp, #24
 801b90c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b910:	b002      	add	sp, #8
 801b912:	4770      	bx	lr
 801b914:	2065      	movs	r0, #101	@ 0x65
 801b916:	e7f2      	b.n	801b8fe <rcl_guard_condition_init_from_rmw+0x7e>
 801b918:	6838      	ldr	r0, [r7, #0]
 801b91a:	3028      	adds	r0, #40	@ 0x28
 801b91c:	f000 f93a 	bl	801bb94 <rmw_create_guard_condition>
 801b920:	6028      	str	r0, [r5, #0]
 801b922:	6865      	ldr	r5, [r4, #4]
 801b924:	682e      	ldr	r6, [r5, #0]
 801b926:	b126      	cbz	r6, 801b932 <rcl_guard_condition_init_from_rmw+0xb2>
 801b928:	2301      	movs	r3, #1
 801b92a:	712b      	strb	r3, [r5, #4]
 801b92c:	e7d7      	b.n	801b8de <rcl_guard_condition_init_from_rmw+0x5e>
 801b92e:	200a      	movs	r0, #10
 801b930:	e7e5      	b.n	801b8fe <rcl_guard_condition_init_from_rmw+0x7e>
 801b932:	4628      	mov	r0, r5
 801b934:	9b02      	ldr	r3, [sp, #8]
 801b936:	9905      	ldr	r1, [sp, #20]
 801b938:	4798      	blx	r3
 801b93a:	6066      	str	r6, [r4, #4]
 801b93c:	2001      	movs	r0, #1
 801b93e:	e7de      	b.n	801b8fe <rcl_guard_condition_init_from_rmw+0x7e>

0801b940 <rcl_guard_condition_fini>:
 801b940:	b570      	push	{r4, r5, r6, lr}
 801b942:	b082      	sub	sp, #8
 801b944:	b1f0      	cbz	r0, 801b984 <rcl_guard_condition_fini+0x44>
 801b946:	6843      	ldr	r3, [r0, #4]
 801b948:	4604      	mov	r4, r0
 801b94a:	b163      	cbz	r3, 801b966 <rcl_guard_condition_fini+0x26>
 801b94c:	6818      	ldr	r0, [r3, #0]
 801b94e:	68de      	ldr	r6, [r3, #12]
 801b950:	6999      	ldr	r1, [r3, #24]
 801b952:	b160      	cbz	r0, 801b96e <rcl_guard_condition_fini+0x2e>
 801b954:	791d      	ldrb	r5, [r3, #4]
 801b956:	b965      	cbnz	r5, 801b972 <rcl_guard_condition_fini+0x32>
 801b958:	4618      	mov	r0, r3
 801b95a:	47b0      	blx	r6
 801b95c:	2300      	movs	r3, #0
 801b95e:	4628      	mov	r0, r5
 801b960:	6063      	str	r3, [r4, #4]
 801b962:	b002      	add	sp, #8
 801b964:	bd70      	pop	{r4, r5, r6, pc}
 801b966:	461d      	mov	r5, r3
 801b968:	4628      	mov	r0, r5
 801b96a:	b002      	add	sp, #8
 801b96c:	bd70      	pop	{r4, r5, r6, pc}
 801b96e:	4605      	mov	r5, r0
 801b970:	e7f2      	b.n	801b958 <rcl_guard_condition_fini+0x18>
 801b972:	9101      	str	r1, [sp, #4]
 801b974:	f000 f922 	bl	801bbbc <rmw_destroy_guard_condition>
 801b978:	1e05      	subs	r5, r0, #0
 801b97a:	6863      	ldr	r3, [r4, #4]
 801b97c:	9901      	ldr	r1, [sp, #4]
 801b97e:	bf18      	it	ne
 801b980:	2501      	movne	r5, #1
 801b982:	e7e9      	b.n	801b958 <rcl_guard_condition_fini+0x18>
 801b984:	250b      	movs	r5, #11
 801b986:	4628      	mov	r0, r5
 801b988:	b002      	add	sp, #8
 801b98a:	bd70      	pop	{r4, r5, r6, pc}

0801b98c <rcl_guard_condition_get_default_options>:
 801b98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b98e:	b087      	sub	sp, #28
 801b990:	4606      	mov	r6, r0
 801b992:	4668      	mov	r0, sp
 801b994:	f7f4 fef0 	bl	8010778 <rcutils_get_default_allocator>
 801b998:	4b09      	ldr	r3, [pc, #36]	@ (801b9c0 <rcl_guard_condition_get_default_options+0x34>)
 801b99a:	46ee      	mov	lr, sp
 801b99c:	469c      	mov	ip, r3
 801b99e:	461d      	mov	r5, r3
 801b9a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b9a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b9a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b9aa:	4634      	mov	r4, r6
 801b9ac:	f8de 7000 	ldr.w	r7, [lr]
 801b9b0:	f8cc 7000 	str.w	r7, [ip]
 801b9b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b9b6:	4630      	mov	r0, r6
 801b9b8:	6027      	str	r7, [r4, #0]
 801b9ba:	b007      	add	sp, #28
 801b9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b9be:	bf00      	nop
 801b9c0:	2000bc84 	.word	0x2000bc84

0801b9c4 <rcl_trigger_guard_condition>:
 801b9c4:	b148      	cbz	r0, 801b9da <rcl_trigger_guard_condition+0x16>
 801b9c6:	b508      	push	{r3, lr}
 801b9c8:	6843      	ldr	r3, [r0, #4]
 801b9ca:	b143      	cbz	r3, 801b9de <rcl_trigger_guard_condition+0x1a>
 801b9cc:	6818      	ldr	r0, [r3, #0]
 801b9ce:	f000 f909 	bl	801bbe4 <rmw_trigger_guard_condition>
 801b9d2:	3800      	subs	r0, #0
 801b9d4:	bf18      	it	ne
 801b9d6:	2001      	movne	r0, #1
 801b9d8:	bd08      	pop	{r3, pc}
 801b9da:	200b      	movs	r0, #11
 801b9dc:	4770      	bx	lr
 801b9de:	200b      	movs	r0, #11
 801b9e0:	bd08      	pop	{r3, pc}
 801b9e2:	bf00      	nop

0801b9e4 <rcl_guard_condition_get_rmw_handle>:
 801b9e4:	b110      	cbz	r0, 801b9ec <rcl_guard_condition_get_rmw_handle+0x8>
 801b9e6:	6840      	ldr	r0, [r0, #4]
 801b9e8:	b100      	cbz	r0, 801b9ec <rcl_guard_condition_get_rmw_handle+0x8>
 801b9ea:	6800      	ldr	r0, [r0, #0]
 801b9ec:	4770      	bx	lr
 801b9ee:	bf00      	nop

0801b9f0 <rcl_validate_topic_name>:
 801b9f0:	2800      	cmp	r0, #0
 801b9f2:	d07a      	beq.n	801baea <rcl_validate_topic_name+0xfa>
 801b9f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9f8:	460e      	mov	r6, r1
 801b9fa:	2900      	cmp	r1, #0
 801b9fc:	d07c      	beq.n	801baf8 <rcl_validate_topic_name+0x108>
 801b9fe:	4617      	mov	r7, r2
 801ba00:	4605      	mov	r5, r0
 801ba02:	f7e4 fc17 	bl	8000234 <strlen>
 801ba06:	b1b0      	cbz	r0, 801ba36 <rcl_validate_topic_name+0x46>
 801ba08:	f895 9000 	ldrb.w	r9, [r5]
 801ba0c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801bb90 <rcl_validate_topic_name+0x1a0>
 801ba10:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801ba14:	f013 0304 	ands.w	r3, r3, #4
 801ba18:	d169      	bne.n	801baee <rcl_validate_topic_name+0xfe>
 801ba1a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801ba1e:	f815 2008 	ldrb.w	r2, [r5, r8]
 801ba22:	2a2f      	cmp	r2, #47	@ 0x2f
 801ba24:	d10e      	bne.n	801ba44 <rcl_validate_topic_name+0x54>
 801ba26:	2202      	movs	r2, #2
 801ba28:	6032      	str	r2, [r6, #0]
 801ba2a:	b36f      	cbz	r7, 801ba88 <rcl_validate_topic_name+0x98>
 801ba2c:	f8c7 8000 	str.w	r8, [r7]
 801ba30:	4618      	mov	r0, r3
 801ba32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba36:	2301      	movs	r3, #1
 801ba38:	6033      	str	r3, [r6, #0]
 801ba3a:	b32f      	cbz	r7, 801ba88 <rcl_validate_topic_name+0x98>
 801ba3c:	2000      	movs	r0, #0
 801ba3e:	6038      	str	r0, [r7, #0]
 801ba40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba44:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801ba48:	461c      	mov	r4, r3
 801ba4a:	4619      	mov	r1, r3
 801ba4c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801ba50:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801ba54:	f1be 0f09 	cmp.w	lr, #9
 801ba58:	d919      	bls.n	801ba8e <rcl_validate_topic_name+0x9e>
 801ba5a:	f022 0e20 	bic.w	lr, r2, #32
 801ba5e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801ba62:	f1be 0f19 	cmp.w	lr, #25
 801ba66:	d912      	bls.n	801ba8e <rcl_validate_topic_name+0x9e>
 801ba68:	2a5f      	cmp	r2, #95	@ 0x5f
 801ba6a:	d019      	beq.n	801baa0 <rcl_validate_topic_name+0xb0>
 801ba6c:	2a2f      	cmp	r2, #47	@ 0x2f
 801ba6e:	d051      	beq.n	801bb14 <rcl_validate_topic_name+0x124>
 801ba70:	2a7e      	cmp	r2, #126	@ 0x7e
 801ba72:	d048      	beq.n	801bb06 <rcl_validate_topic_name+0x116>
 801ba74:	2a7b      	cmp	r2, #123	@ 0x7b
 801ba76:	d054      	beq.n	801bb22 <rcl_validate_topic_name+0x132>
 801ba78:	2a7d      	cmp	r2, #125	@ 0x7d
 801ba7a:	d161      	bne.n	801bb40 <rcl_validate_topic_name+0x150>
 801ba7c:	2c00      	cmp	r4, #0
 801ba7e:	d155      	bne.n	801bb2c <rcl_validate_topic_name+0x13c>
 801ba80:	2305      	movs	r3, #5
 801ba82:	6033      	str	r3, [r6, #0]
 801ba84:	b107      	cbz	r7, 801ba88 <rcl_validate_topic_name+0x98>
 801ba86:	6039      	str	r1, [r7, #0]
 801ba88:	2000      	movs	r0, #0
 801ba8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba8e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ba92:	0752      	lsls	r2, r2, #29
 801ba94:	d504      	bpl.n	801baa0 <rcl_validate_topic_name+0xb0>
 801ba96:	b11c      	cbz	r4, 801baa0 <rcl_validate_topic_name+0xb0>
 801ba98:	b111      	cbz	r1, 801baa0 <rcl_validate_topic_name+0xb0>
 801ba9a:	1e4a      	subs	r2, r1, #1
 801ba9c:	429a      	cmp	r2, r3
 801ba9e:	d02d      	beq.n	801bafc <rcl_validate_topic_name+0x10c>
 801baa0:	3101      	adds	r1, #1
 801baa2:	4288      	cmp	r0, r1
 801baa4:	d1d2      	bne.n	801ba4c <rcl_validate_topic_name+0x5c>
 801baa6:	2c00      	cmp	r4, #0
 801baa8:	d145      	bne.n	801bb36 <rcl_validate_topic_name+0x146>
 801baaa:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801baae:	d04f      	beq.n	801bb50 <rcl_validate_topic_name+0x160>
 801bab0:	4620      	mov	r0, r4
 801bab2:	2301      	movs	r3, #1
 801bab4:	e006      	b.n	801bac4 <rcl_validate_topic_name+0xd4>
 801bab6:	428b      	cmp	r3, r1
 801bab8:	f105 0501 	add.w	r5, r5, #1
 801babc:	f103 0201 	add.w	r2, r3, #1
 801bac0:	d236      	bcs.n	801bb30 <rcl_validate_topic_name+0x140>
 801bac2:	4613      	mov	r3, r2
 801bac4:	4580      	cmp	r8, r0
 801bac6:	f100 0001 	add.w	r0, r0, #1
 801baca:	d0f4      	beq.n	801bab6 <rcl_validate_topic_name+0xc6>
 801bacc:	782a      	ldrb	r2, [r5, #0]
 801bace:	2a2f      	cmp	r2, #47	@ 0x2f
 801bad0:	d1f1      	bne.n	801bab6 <rcl_validate_topic_name+0xc6>
 801bad2:	786a      	ldrb	r2, [r5, #1]
 801bad4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801bad8:	0754      	lsls	r4, r2, #29
 801bada:	d5ec      	bpl.n	801bab6 <rcl_validate_topic_name+0xc6>
 801badc:	2204      	movs	r2, #4
 801bade:	6032      	str	r2, [r6, #0]
 801bae0:	2f00      	cmp	r7, #0
 801bae2:	d0d1      	beq.n	801ba88 <rcl_validate_topic_name+0x98>
 801bae4:	603b      	str	r3, [r7, #0]
 801bae6:	2000      	movs	r0, #0
 801bae8:	e7aa      	b.n	801ba40 <rcl_validate_topic_name+0x50>
 801baea:	200b      	movs	r0, #11
 801baec:	4770      	bx	lr
 801baee:	2304      	movs	r3, #4
 801baf0:	6033      	str	r3, [r6, #0]
 801baf2:	2f00      	cmp	r7, #0
 801baf4:	d1a2      	bne.n	801ba3c <rcl_validate_topic_name+0x4c>
 801baf6:	e7c7      	b.n	801ba88 <rcl_validate_topic_name+0x98>
 801baf8:	200b      	movs	r0, #11
 801bafa:	e7a1      	b.n	801ba40 <rcl_validate_topic_name+0x50>
 801bafc:	2309      	movs	r3, #9
 801bafe:	6033      	str	r3, [r6, #0]
 801bb00:	2f00      	cmp	r7, #0
 801bb02:	d1c0      	bne.n	801ba86 <rcl_validate_topic_name+0x96>
 801bb04:	e7c0      	b.n	801ba88 <rcl_validate_topic_name+0x98>
 801bb06:	2900      	cmp	r1, #0
 801bb08:	d0ca      	beq.n	801baa0 <rcl_validate_topic_name+0xb0>
 801bb0a:	2306      	movs	r3, #6
 801bb0c:	6033      	str	r3, [r6, #0]
 801bb0e:	2f00      	cmp	r7, #0
 801bb10:	d1b9      	bne.n	801ba86 <rcl_validate_topic_name+0x96>
 801bb12:	e7b9      	b.n	801ba88 <rcl_validate_topic_name+0x98>
 801bb14:	2c00      	cmp	r4, #0
 801bb16:	d0c3      	beq.n	801baa0 <rcl_validate_topic_name+0xb0>
 801bb18:	2308      	movs	r3, #8
 801bb1a:	6033      	str	r3, [r6, #0]
 801bb1c:	2f00      	cmp	r7, #0
 801bb1e:	d1b2      	bne.n	801ba86 <rcl_validate_topic_name+0x96>
 801bb20:	e7b2      	b.n	801ba88 <rcl_validate_topic_name+0x98>
 801bb22:	2c00      	cmp	r4, #0
 801bb24:	d1f8      	bne.n	801bb18 <rcl_validate_topic_name+0x128>
 801bb26:	460b      	mov	r3, r1
 801bb28:	2401      	movs	r4, #1
 801bb2a:	e7b9      	b.n	801baa0 <rcl_validate_topic_name+0xb0>
 801bb2c:	2400      	movs	r4, #0
 801bb2e:	e7b7      	b.n	801baa0 <rcl_validate_topic_name+0xb0>
 801bb30:	2000      	movs	r0, #0
 801bb32:	6030      	str	r0, [r6, #0]
 801bb34:	e784      	b.n	801ba40 <rcl_validate_topic_name+0x50>
 801bb36:	2205      	movs	r2, #5
 801bb38:	6032      	str	r2, [r6, #0]
 801bb3a:	2f00      	cmp	r7, #0
 801bb3c:	d1d2      	bne.n	801bae4 <rcl_validate_topic_name+0xf4>
 801bb3e:	e7a3      	b.n	801ba88 <rcl_validate_topic_name+0x98>
 801bb40:	2c00      	cmp	r4, #0
 801bb42:	bf14      	ite	ne
 801bb44:	2308      	movne	r3, #8
 801bb46:	2303      	moveq	r3, #3
 801bb48:	6033      	str	r3, [r6, #0]
 801bb4a:	2f00      	cmp	r7, #0
 801bb4c:	d19b      	bne.n	801ba86 <rcl_validate_topic_name+0x96>
 801bb4e:	e79b      	b.n	801ba88 <rcl_validate_topic_name+0x98>
 801bb50:	2301      	movs	r3, #1
 801bb52:	e00a      	b.n	801bb6a <rcl_validate_topic_name+0x17a>
 801bb54:	2c01      	cmp	r4, #1
 801bb56:	d013      	beq.n	801bb80 <rcl_validate_topic_name+0x190>
 801bb58:	4299      	cmp	r1, r3
 801bb5a:	f104 0401 	add.w	r4, r4, #1
 801bb5e:	f105 0501 	add.w	r5, r5, #1
 801bb62:	f103 0201 	add.w	r2, r3, #1
 801bb66:	d9e3      	bls.n	801bb30 <rcl_validate_topic_name+0x140>
 801bb68:	4613      	mov	r3, r2
 801bb6a:	45a0      	cmp	r8, r4
 801bb6c:	d0f4      	beq.n	801bb58 <rcl_validate_topic_name+0x168>
 801bb6e:	782a      	ldrb	r2, [r5, #0]
 801bb70:	2a2f      	cmp	r2, #47	@ 0x2f
 801bb72:	d1ef      	bne.n	801bb54 <rcl_validate_topic_name+0x164>
 801bb74:	786a      	ldrb	r2, [r5, #1]
 801bb76:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801bb7a:	0752      	lsls	r2, r2, #29
 801bb7c:	d5ec      	bpl.n	801bb58 <rcl_validate_topic_name+0x168>
 801bb7e:	e7ad      	b.n	801badc <rcl_validate_topic_name+0xec>
 801bb80:	2307      	movs	r3, #7
 801bb82:	6033      	str	r3, [r6, #0]
 801bb84:	2f00      	cmp	r7, #0
 801bb86:	f43f af7f 	beq.w	801ba88 <rcl_validate_topic_name+0x98>
 801bb8a:	603c      	str	r4, [r7, #0]
 801bb8c:	2000      	movs	r0, #0
 801bb8e:	e757      	b.n	801ba40 <rcl_validate_topic_name+0x50>
 801bb90:	0801f442 	.word	0x0801f442

0801bb94 <rmw_create_guard_condition>:
 801bb94:	b538      	push	{r3, r4, r5, lr}
 801bb96:	4605      	mov	r5, r0
 801bb98:	4807      	ldr	r0, [pc, #28]	@ (801bbb8 <rmw_create_guard_condition+0x24>)
 801bb9a:	f7fe fa11 	bl	8019fc0 <get_memory>
 801bb9e:	b148      	cbz	r0, 801bbb4 <rmw_create_guard_condition+0x20>
 801bba0:	6884      	ldr	r4, [r0, #8]
 801bba2:	2300      	movs	r3, #0
 801bba4:	7423      	strb	r3, [r4, #16]
 801bba6:	61e5      	str	r5, [r4, #28]
 801bba8:	f7fe fa72 	bl	801a090 <rmw_get_implementation_identifier>
 801bbac:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801bbb0:	f104 0014 	add.w	r0, r4, #20
 801bbb4:	bd38      	pop	{r3, r4, r5, pc}
 801bbb6:	bf00      	nop
 801bbb8:	2000bab4 	.word	0x2000bab4

0801bbbc <rmw_destroy_guard_condition>:
 801bbbc:	b508      	push	{r3, lr}
 801bbbe:	4b08      	ldr	r3, [pc, #32]	@ (801bbe0 <rmw_destroy_guard_condition+0x24>)
 801bbc0:	6819      	ldr	r1, [r3, #0]
 801bbc2:	b911      	cbnz	r1, 801bbca <rmw_destroy_guard_condition+0xe>
 801bbc4:	e00a      	b.n	801bbdc <rmw_destroy_guard_condition+0x20>
 801bbc6:	6849      	ldr	r1, [r1, #4]
 801bbc8:	b141      	cbz	r1, 801bbdc <rmw_destroy_guard_condition+0x20>
 801bbca:	688b      	ldr	r3, [r1, #8]
 801bbcc:	3314      	adds	r3, #20
 801bbce:	4298      	cmp	r0, r3
 801bbd0:	d1f9      	bne.n	801bbc6 <rmw_destroy_guard_condition+0xa>
 801bbd2:	4803      	ldr	r0, [pc, #12]	@ (801bbe0 <rmw_destroy_guard_condition+0x24>)
 801bbd4:	f7fe fa04 	bl	8019fe0 <put_memory>
 801bbd8:	2000      	movs	r0, #0
 801bbda:	bd08      	pop	{r3, pc}
 801bbdc:	2001      	movs	r0, #1
 801bbde:	bd08      	pop	{r3, pc}
 801bbe0:	2000bab4 	.word	0x2000bab4

0801bbe4 <rmw_trigger_guard_condition>:
 801bbe4:	b160      	cbz	r0, 801bc00 <rmw_trigger_guard_condition+0x1c>
 801bbe6:	b510      	push	{r4, lr}
 801bbe8:	4604      	mov	r4, r0
 801bbea:	6800      	ldr	r0, [r0, #0]
 801bbec:	f7f6 f978 	bl	8011ee0 <is_uxrce_rmw_identifier_valid>
 801bbf0:	b908      	cbnz	r0, 801bbf6 <rmw_trigger_guard_condition+0x12>
 801bbf2:	2001      	movs	r0, #1
 801bbf4:	bd10      	pop	{r4, pc}
 801bbf6:	6863      	ldr	r3, [r4, #4]
 801bbf8:	2201      	movs	r2, #1
 801bbfa:	741a      	strb	r2, [r3, #16]
 801bbfc:	2000      	movs	r0, #0
 801bbfe:	bd10      	pop	{r4, pc}
 801bc00:	2001      	movs	r0, #1
 801bc02:	4770      	bx	lr

0801bc04 <rosidl_runtime_c__String__init>:
 801bc04:	b510      	push	{r4, lr}
 801bc06:	4604      	mov	r4, r0
 801bc08:	b086      	sub	sp, #24
 801bc0a:	b170      	cbz	r0, 801bc2a <rosidl_runtime_c__String__init+0x26>
 801bc0c:	a801      	add	r0, sp, #4
 801bc0e:	f7f4 fdb3 	bl	8010778 <rcutils_get_default_allocator>
 801bc12:	9b01      	ldr	r3, [sp, #4]
 801bc14:	9905      	ldr	r1, [sp, #20]
 801bc16:	2001      	movs	r0, #1
 801bc18:	4798      	blx	r3
 801bc1a:	6020      	str	r0, [r4, #0]
 801bc1c:	b128      	cbz	r0, 801bc2a <rosidl_runtime_c__String__init+0x26>
 801bc1e:	2100      	movs	r1, #0
 801bc20:	2201      	movs	r2, #1
 801bc22:	7001      	strb	r1, [r0, #0]
 801bc24:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801bc28:	4610      	mov	r0, r2
 801bc2a:	b006      	add	sp, #24
 801bc2c:	bd10      	pop	{r4, pc}
 801bc2e:	bf00      	nop

0801bc30 <rosidl_runtime_c__String__fini>:
 801bc30:	b320      	cbz	r0, 801bc7c <rosidl_runtime_c__String__fini+0x4c>
 801bc32:	b510      	push	{r4, lr}
 801bc34:	6803      	ldr	r3, [r0, #0]
 801bc36:	b086      	sub	sp, #24
 801bc38:	4604      	mov	r4, r0
 801bc3a:	b173      	cbz	r3, 801bc5a <rosidl_runtime_c__String__fini+0x2a>
 801bc3c:	6883      	ldr	r3, [r0, #8]
 801bc3e:	b1f3      	cbz	r3, 801bc7e <rosidl_runtime_c__String__fini+0x4e>
 801bc40:	a801      	add	r0, sp, #4
 801bc42:	f7f4 fd99 	bl	8010778 <rcutils_get_default_allocator>
 801bc46:	9b02      	ldr	r3, [sp, #8]
 801bc48:	9905      	ldr	r1, [sp, #20]
 801bc4a:	6820      	ldr	r0, [r4, #0]
 801bc4c:	4798      	blx	r3
 801bc4e:	2300      	movs	r3, #0
 801bc50:	e9c4 3300 	strd	r3, r3, [r4]
 801bc54:	60a3      	str	r3, [r4, #8]
 801bc56:	b006      	add	sp, #24
 801bc58:	bd10      	pop	{r4, pc}
 801bc5a:	6843      	ldr	r3, [r0, #4]
 801bc5c:	b9db      	cbnz	r3, 801bc96 <rosidl_runtime_c__String__fini+0x66>
 801bc5e:	6883      	ldr	r3, [r0, #8]
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	d0f8      	beq.n	801bc56 <rosidl_runtime_c__String__fini+0x26>
 801bc64:	4b12      	ldr	r3, [pc, #72]	@ (801bcb0 <rosidl_runtime_c__String__fini+0x80>)
 801bc66:	4813      	ldr	r0, [pc, #76]	@ (801bcb4 <rosidl_runtime_c__String__fini+0x84>)
 801bc68:	681b      	ldr	r3, [r3, #0]
 801bc6a:	2251      	movs	r2, #81	@ 0x51
 801bc6c:	68db      	ldr	r3, [r3, #12]
 801bc6e:	2101      	movs	r1, #1
 801bc70:	f000 fb82 	bl	801c378 <fwrite>
 801bc74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bc78:	f000 f83e 	bl	801bcf8 <exit>
 801bc7c:	4770      	bx	lr
 801bc7e:	4b0c      	ldr	r3, [pc, #48]	@ (801bcb0 <rosidl_runtime_c__String__fini+0x80>)
 801bc80:	480d      	ldr	r0, [pc, #52]	@ (801bcb8 <rosidl_runtime_c__String__fini+0x88>)
 801bc82:	681b      	ldr	r3, [r3, #0]
 801bc84:	224c      	movs	r2, #76	@ 0x4c
 801bc86:	68db      	ldr	r3, [r3, #12]
 801bc88:	2101      	movs	r1, #1
 801bc8a:	f000 fb75 	bl	801c378 <fwrite>
 801bc8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bc92:	f000 f831 	bl	801bcf8 <exit>
 801bc96:	4b06      	ldr	r3, [pc, #24]	@ (801bcb0 <rosidl_runtime_c__String__fini+0x80>)
 801bc98:	4808      	ldr	r0, [pc, #32]	@ (801bcbc <rosidl_runtime_c__String__fini+0x8c>)
 801bc9a:	681b      	ldr	r3, [r3, #0]
 801bc9c:	224e      	movs	r2, #78	@ 0x4e
 801bc9e:	68db      	ldr	r3, [r3, #12]
 801bca0:	2101      	movs	r1, #1
 801bca2:	f000 fb69 	bl	801c378 <fwrite>
 801bca6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bcaa:	f000 f825 	bl	801bcf8 <exit>
 801bcae:	bf00      	nop
 801bcb0:	200009c0 	.word	0x200009c0
 801bcb4:	0801f380 	.word	0x0801f380
 801bcb8:	0801f2e0 	.word	0x0801f2e0
 801bcbc:	0801f330 	.word	0x0801f330

0801bcc0 <calloc>:
 801bcc0:	4b02      	ldr	r3, [pc, #8]	@ (801bccc <calloc+0xc>)
 801bcc2:	460a      	mov	r2, r1
 801bcc4:	4601      	mov	r1, r0
 801bcc6:	6818      	ldr	r0, [r3, #0]
 801bcc8:	f000 b802 	b.w	801bcd0 <_calloc_r>
 801bccc:	200009c0 	.word	0x200009c0

0801bcd0 <_calloc_r>:
 801bcd0:	b570      	push	{r4, r5, r6, lr}
 801bcd2:	fba1 5402 	umull	r5, r4, r1, r2
 801bcd6:	b93c      	cbnz	r4, 801bce8 <_calloc_r+0x18>
 801bcd8:	4629      	mov	r1, r5
 801bcda:	f000 f899 	bl	801be10 <_malloc_r>
 801bcde:	4606      	mov	r6, r0
 801bce0:	b928      	cbnz	r0, 801bcee <_calloc_r+0x1e>
 801bce2:	2600      	movs	r6, #0
 801bce4:	4630      	mov	r0, r6
 801bce6:	bd70      	pop	{r4, r5, r6, pc}
 801bce8:	220c      	movs	r2, #12
 801bcea:	6002      	str	r2, [r0, #0]
 801bcec:	e7f9      	b.n	801bce2 <_calloc_r+0x12>
 801bcee:	462a      	mov	r2, r5
 801bcf0:	4621      	mov	r1, r4
 801bcf2:	f000 fccf 	bl	801c694 <memset>
 801bcf6:	e7f5      	b.n	801bce4 <_calloc_r+0x14>

0801bcf8 <exit>:
 801bcf8:	b508      	push	{r3, lr}
 801bcfa:	4b06      	ldr	r3, [pc, #24]	@ (801bd14 <exit+0x1c>)
 801bcfc:	4604      	mov	r4, r0
 801bcfe:	b113      	cbz	r3, 801bd06 <exit+0xe>
 801bd00:	2100      	movs	r1, #0
 801bd02:	f3af 8000 	nop.w
 801bd06:	4b04      	ldr	r3, [pc, #16]	@ (801bd18 <exit+0x20>)
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	b103      	cbz	r3, 801bd0e <exit+0x16>
 801bd0c:	4798      	blx	r3
 801bd0e:	4620      	mov	r0, r4
 801bd10:	f7e7 fabc 	bl	800328c <_exit>
 801bd14:	00000000 	.word	0x00000000
 801bd18:	2000bdd8 	.word	0x2000bdd8

0801bd1c <getenv>:
 801bd1c:	b507      	push	{r0, r1, r2, lr}
 801bd1e:	4b04      	ldr	r3, [pc, #16]	@ (801bd30 <getenv+0x14>)
 801bd20:	4601      	mov	r1, r0
 801bd22:	aa01      	add	r2, sp, #4
 801bd24:	6818      	ldr	r0, [r3, #0]
 801bd26:	f000 f805 	bl	801bd34 <_findenv_r>
 801bd2a:	b003      	add	sp, #12
 801bd2c:	f85d fb04 	ldr.w	pc, [sp], #4
 801bd30:	200009c0 	.word	0x200009c0

0801bd34 <_findenv_r>:
 801bd34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd38:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801bda8 <_findenv_r+0x74>
 801bd3c:	4606      	mov	r6, r0
 801bd3e:	4689      	mov	r9, r1
 801bd40:	4617      	mov	r7, r2
 801bd42:	f000 fd9d 	bl	801c880 <__env_lock>
 801bd46:	f8da 4000 	ldr.w	r4, [sl]
 801bd4a:	b134      	cbz	r4, 801bd5a <_findenv_r+0x26>
 801bd4c:	464b      	mov	r3, r9
 801bd4e:	4698      	mov	r8, r3
 801bd50:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd54:	b13a      	cbz	r2, 801bd66 <_findenv_r+0x32>
 801bd56:	2a3d      	cmp	r2, #61	@ 0x3d
 801bd58:	d1f9      	bne.n	801bd4e <_findenv_r+0x1a>
 801bd5a:	4630      	mov	r0, r6
 801bd5c:	f000 fd96 	bl	801c88c <__env_unlock>
 801bd60:	2000      	movs	r0, #0
 801bd62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd66:	eba8 0809 	sub.w	r8, r8, r9
 801bd6a:	46a3      	mov	fp, r4
 801bd6c:	f854 0b04 	ldr.w	r0, [r4], #4
 801bd70:	2800      	cmp	r0, #0
 801bd72:	d0f2      	beq.n	801bd5a <_findenv_r+0x26>
 801bd74:	4642      	mov	r2, r8
 801bd76:	4649      	mov	r1, r9
 801bd78:	f000 fca1 	bl	801c6be <strncmp>
 801bd7c:	2800      	cmp	r0, #0
 801bd7e:	d1f4      	bne.n	801bd6a <_findenv_r+0x36>
 801bd80:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801bd84:	eb03 0508 	add.w	r5, r3, r8
 801bd88:	f813 3008 	ldrb.w	r3, [r3, r8]
 801bd8c:	2b3d      	cmp	r3, #61	@ 0x3d
 801bd8e:	d1ec      	bne.n	801bd6a <_findenv_r+0x36>
 801bd90:	f8da 3000 	ldr.w	r3, [sl]
 801bd94:	ebab 0303 	sub.w	r3, fp, r3
 801bd98:	109b      	asrs	r3, r3, #2
 801bd9a:	4630      	mov	r0, r6
 801bd9c:	603b      	str	r3, [r7, #0]
 801bd9e:	f000 fd75 	bl	801c88c <__env_unlock>
 801bda2:	1c68      	adds	r0, r5, #1
 801bda4:	e7dd      	b.n	801bd62 <_findenv_r+0x2e>
 801bda6:	bf00      	nop
 801bda8:	20000000 	.word	0x20000000

0801bdac <malloc>:
 801bdac:	4b02      	ldr	r3, [pc, #8]	@ (801bdb8 <malloc+0xc>)
 801bdae:	4601      	mov	r1, r0
 801bdb0:	6818      	ldr	r0, [r3, #0]
 801bdb2:	f000 b82d 	b.w	801be10 <_malloc_r>
 801bdb6:	bf00      	nop
 801bdb8:	200009c0 	.word	0x200009c0

0801bdbc <free>:
 801bdbc:	4b02      	ldr	r3, [pc, #8]	@ (801bdc8 <free+0xc>)
 801bdbe:	4601      	mov	r1, r0
 801bdc0:	6818      	ldr	r0, [r3, #0]
 801bdc2:	f000 bd69 	b.w	801c898 <_free_r>
 801bdc6:	bf00      	nop
 801bdc8:	200009c0 	.word	0x200009c0

0801bdcc <sbrk_aligned>:
 801bdcc:	b570      	push	{r4, r5, r6, lr}
 801bdce:	4e0f      	ldr	r6, [pc, #60]	@ (801be0c <sbrk_aligned+0x40>)
 801bdd0:	460c      	mov	r4, r1
 801bdd2:	6831      	ldr	r1, [r6, #0]
 801bdd4:	4605      	mov	r5, r0
 801bdd6:	b911      	cbnz	r1, 801bdde <sbrk_aligned+0x12>
 801bdd8:	f000 fcce 	bl	801c778 <_sbrk_r>
 801bddc:	6030      	str	r0, [r6, #0]
 801bdde:	4621      	mov	r1, r4
 801bde0:	4628      	mov	r0, r5
 801bde2:	f000 fcc9 	bl	801c778 <_sbrk_r>
 801bde6:	1c43      	adds	r3, r0, #1
 801bde8:	d103      	bne.n	801bdf2 <sbrk_aligned+0x26>
 801bdea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801bdee:	4620      	mov	r0, r4
 801bdf0:	bd70      	pop	{r4, r5, r6, pc}
 801bdf2:	1cc4      	adds	r4, r0, #3
 801bdf4:	f024 0403 	bic.w	r4, r4, #3
 801bdf8:	42a0      	cmp	r0, r4
 801bdfa:	d0f8      	beq.n	801bdee <sbrk_aligned+0x22>
 801bdfc:	1a21      	subs	r1, r4, r0
 801bdfe:	4628      	mov	r0, r5
 801be00:	f000 fcba 	bl	801c778 <_sbrk_r>
 801be04:	3001      	adds	r0, #1
 801be06:	d1f2      	bne.n	801bdee <sbrk_aligned+0x22>
 801be08:	e7ef      	b.n	801bdea <sbrk_aligned+0x1e>
 801be0a:	bf00      	nop
 801be0c:	2000bc98 	.word	0x2000bc98

0801be10 <_malloc_r>:
 801be10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801be14:	1ccd      	adds	r5, r1, #3
 801be16:	f025 0503 	bic.w	r5, r5, #3
 801be1a:	3508      	adds	r5, #8
 801be1c:	2d0c      	cmp	r5, #12
 801be1e:	bf38      	it	cc
 801be20:	250c      	movcc	r5, #12
 801be22:	2d00      	cmp	r5, #0
 801be24:	4606      	mov	r6, r0
 801be26:	db01      	blt.n	801be2c <_malloc_r+0x1c>
 801be28:	42a9      	cmp	r1, r5
 801be2a:	d904      	bls.n	801be36 <_malloc_r+0x26>
 801be2c:	230c      	movs	r3, #12
 801be2e:	6033      	str	r3, [r6, #0]
 801be30:	2000      	movs	r0, #0
 801be32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801be36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801bf0c <_malloc_r+0xfc>
 801be3a:	f000 f869 	bl	801bf10 <__malloc_lock>
 801be3e:	f8d8 3000 	ldr.w	r3, [r8]
 801be42:	461c      	mov	r4, r3
 801be44:	bb44      	cbnz	r4, 801be98 <_malloc_r+0x88>
 801be46:	4629      	mov	r1, r5
 801be48:	4630      	mov	r0, r6
 801be4a:	f7ff ffbf 	bl	801bdcc <sbrk_aligned>
 801be4e:	1c43      	adds	r3, r0, #1
 801be50:	4604      	mov	r4, r0
 801be52:	d158      	bne.n	801bf06 <_malloc_r+0xf6>
 801be54:	f8d8 4000 	ldr.w	r4, [r8]
 801be58:	4627      	mov	r7, r4
 801be5a:	2f00      	cmp	r7, #0
 801be5c:	d143      	bne.n	801bee6 <_malloc_r+0xd6>
 801be5e:	2c00      	cmp	r4, #0
 801be60:	d04b      	beq.n	801befa <_malloc_r+0xea>
 801be62:	6823      	ldr	r3, [r4, #0]
 801be64:	4639      	mov	r1, r7
 801be66:	4630      	mov	r0, r6
 801be68:	eb04 0903 	add.w	r9, r4, r3
 801be6c:	f000 fc84 	bl	801c778 <_sbrk_r>
 801be70:	4581      	cmp	r9, r0
 801be72:	d142      	bne.n	801befa <_malloc_r+0xea>
 801be74:	6821      	ldr	r1, [r4, #0]
 801be76:	1a6d      	subs	r5, r5, r1
 801be78:	4629      	mov	r1, r5
 801be7a:	4630      	mov	r0, r6
 801be7c:	f7ff ffa6 	bl	801bdcc <sbrk_aligned>
 801be80:	3001      	adds	r0, #1
 801be82:	d03a      	beq.n	801befa <_malloc_r+0xea>
 801be84:	6823      	ldr	r3, [r4, #0]
 801be86:	442b      	add	r3, r5
 801be88:	6023      	str	r3, [r4, #0]
 801be8a:	f8d8 3000 	ldr.w	r3, [r8]
 801be8e:	685a      	ldr	r2, [r3, #4]
 801be90:	bb62      	cbnz	r2, 801beec <_malloc_r+0xdc>
 801be92:	f8c8 7000 	str.w	r7, [r8]
 801be96:	e00f      	b.n	801beb8 <_malloc_r+0xa8>
 801be98:	6822      	ldr	r2, [r4, #0]
 801be9a:	1b52      	subs	r2, r2, r5
 801be9c:	d420      	bmi.n	801bee0 <_malloc_r+0xd0>
 801be9e:	2a0b      	cmp	r2, #11
 801bea0:	d917      	bls.n	801bed2 <_malloc_r+0xc2>
 801bea2:	1961      	adds	r1, r4, r5
 801bea4:	42a3      	cmp	r3, r4
 801bea6:	6025      	str	r5, [r4, #0]
 801bea8:	bf18      	it	ne
 801beaa:	6059      	strne	r1, [r3, #4]
 801beac:	6863      	ldr	r3, [r4, #4]
 801beae:	bf08      	it	eq
 801beb0:	f8c8 1000 	streq.w	r1, [r8]
 801beb4:	5162      	str	r2, [r4, r5]
 801beb6:	604b      	str	r3, [r1, #4]
 801beb8:	4630      	mov	r0, r6
 801beba:	f000 f82f 	bl	801bf1c <__malloc_unlock>
 801bebe:	f104 000b 	add.w	r0, r4, #11
 801bec2:	1d23      	adds	r3, r4, #4
 801bec4:	f020 0007 	bic.w	r0, r0, #7
 801bec8:	1ac2      	subs	r2, r0, r3
 801beca:	bf1c      	itt	ne
 801becc:	1a1b      	subne	r3, r3, r0
 801bece:	50a3      	strne	r3, [r4, r2]
 801bed0:	e7af      	b.n	801be32 <_malloc_r+0x22>
 801bed2:	6862      	ldr	r2, [r4, #4]
 801bed4:	42a3      	cmp	r3, r4
 801bed6:	bf0c      	ite	eq
 801bed8:	f8c8 2000 	streq.w	r2, [r8]
 801bedc:	605a      	strne	r2, [r3, #4]
 801bede:	e7eb      	b.n	801beb8 <_malloc_r+0xa8>
 801bee0:	4623      	mov	r3, r4
 801bee2:	6864      	ldr	r4, [r4, #4]
 801bee4:	e7ae      	b.n	801be44 <_malloc_r+0x34>
 801bee6:	463c      	mov	r4, r7
 801bee8:	687f      	ldr	r7, [r7, #4]
 801beea:	e7b6      	b.n	801be5a <_malloc_r+0x4a>
 801beec:	461a      	mov	r2, r3
 801beee:	685b      	ldr	r3, [r3, #4]
 801bef0:	42a3      	cmp	r3, r4
 801bef2:	d1fb      	bne.n	801beec <_malloc_r+0xdc>
 801bef4:	2300      	movs	r3, #0
 801bef6:	6053      	str	r3, [r2, #4]
 801bef8:	e7de      	b.n	801beb8 <_malloc_r+0xa8>
 801befa:	230c      	movs	r3, #12
 801befc:	6033      	str	r3, [r6, #0]
 801befe:	4630      	mov	r0, r6
 801bf00:	f000 f80c 	bl	801bf1c <__malloc_unlock>
 801bf04:	e794      	b.n	801be30 <_malloc_r+0x20>
 801bf06:	6005      	str	r5, [r0, #0]
 801bf08:	e7d6      	b.n	801beb8 <_malloc_r+0xa8>
 801bf0a:	bf00      	nop
 801bf0c:	2000bc9c 	.word	0x2000bc9c

0801bf10 <__malloc_lock>:
 801bf10:	4801      	ldr	r0, [pc, #4]	@ (801bf18 <__malloc_lock+0x8>)
 801bf12:	f000 bc7e 	b.w	801c812 <__retarget_lock_acquire_recursive>
 801bf16:	bf00      	nop
 801bf18:	2000bde1 	.word	0x2000bde1

0801bf1c <__malloc_unlock>:
 801bf1c:	4801      	ldr	r0, [pc, #4]	@ (801bf24 <__malloc_unlock+0x8>)
 801bf1e:	f000 bc79 	b.w	801c814 <__retarget_lock_release_recursive>
 801bf22:	bf00      	nop
 801bf24:	2000bde1 	.word	0x2000bde1

0801bf28 <srand>:
 801bf28:	b538      	push	{r3, r4, r5, lr}
 801bf2a:	4b10      	ldr	r3, [pc, #64]	@ (801bf6c <srand+0x44>)
 801bf2c:	681d      	ldr	r5, [r3, #0]
 801bf2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801bf30:	4604      	mov	r4, r0
 801bf32:	b9b3      	cbnz	r3, 801bf62 <srand+0x3a>
 801bf34:	2018      	movs	r0, #24
 801bf36:	f7ff ff39 	bl	801bdac <malloc>
 801bf3a:	4602      	mov	r2, r0
 801bf3c:	6328      	str	r0, [r5, #48]	@ 0x30
 801bf3e:	b920      	cbnz	r0, 801bf4a <srand+0x22>
 801bf40:	4b0b      	ldr	r3, [pc, #44]	@ (801bf70 <srand+0x48>)
 801bf42:	480c      	ldr	r0, [pc, #48]	@ (801bf74 <srand+0x4c>)
 801bf44:	2146      	movs	r1, #70	@ 0x46
 801bf46:	f000 fc7d 	bl	801c844 <__assert_func>
 801bf4a:	490b      	ldr	r1, [pc, #44]	@ (801bf78 <srand+0x50>)
 801bf4c:	4b0b      	ldr	r3, [pc, #44]	@ (801bf7c <srand+0x54>)
 801bf4e:	e9c0 1300 	strd	r1, r3, [r0]
 801bf52:	4b0b      	ldr	r3, [pc, #44]	@ (801bf80 <srand+0x58>)
 801bf54:	6083      	str	r3, [r0, #8]
 801bf56:	230b      	movs	r3, #11
 801bf58:	8183      	strh	r3, [r0, #12]
 801bf5a:	2100      	movs	r1, #0
 801bf5c:	2001      	movs	r0, #1
 801bf5e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801bf62:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801bf64:	2200      	movs	r2, #0
 801bf66:	611c      	str	r4, [r3, #16]
 801bf68:	615a      	str	r2, [r3, #20]
 801bf6a:	bd38      	pop	{r3, r4, r5, pc}
 801bf6c:	200009c0 	.word	0x200009c0
 801bf70:	0801f3d2 	.word	0x0801f3d2
 801bf74:	0801f3e9 	.word	0x0801f3e9
 801bf78:	abcd330e 	.word	0xabcd330e
 801bf7c:	e66d1234 	.word	0xe66d1234
 801bf80:	0005deec 	.word	0x0005deec

0801bf84 <rand>:
 801bf84:	4b16      	ldr	r3, [pc, #88]	@ (801bfe0 <rand+0x5c>)
 801bf86:	b510      	push	{r4, lr}
 801bf88:	681c      	ldr	r4, [r3, #0]
 801bf8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801bf8c:	b9b3      	cbnz	r3, 801bfbc <rand+0x38>
 801bf8e:	2018      	movs	r0, #24
 801bf90:	f7ff ff0c 	bl	801bdac <malloc>
 801bf94:	4602      	mov	r2, r0
 801bf96:	6320      	str	r0, [r4, #48]	@ 0x30
 801bf98:	b920      	cbnz	r0, 801bfa4 <rand+0x20>
 801bf9a:	4b12      	ldr	r3, [pc, #72]	@ (801bfe4 <rand+0x60>)
 801bf9c:	4812      	ldr	r0, [pc, #72]	@ (801bfe8 <rand+0x64>)
 801bf9e:	2152      	movs	r1, #82	@ 0x52
 801bfa0:	f000 fc50 	bl	801c844 <__assert_func>
 801bfa4:	4911      	ldr	r1, [pc, #68]	@ (801bfec <rand+0x68>)
 801bfa6:	4b12      	ldr	r3, [pc, #72]	@ (801bff0 <rand+0x6c>)
 801bfa8:	e9c0 1300 	strd	r1, r3, [r0]
 801bfac:	4b11      	ldr	r3, [pc, #68]	@ (801bff4 <rand+0x70>)
 801bfae:	6083      	str	r3, [r0, #8]
 801bfb0:	230b      	movs	r3, #11
 801bfb2:	8183      	strh	r3, [r0, #12]
 801bfb4:	2100      	movs	r1, #0
 801bfb6:	2001      	movs	r0, #1
 801bfb8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801bfbc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801bfbe:	480e      	ldr	r0, [pc, #56]	@ (801bff8 <rand+0x74>)
 801bfc0:	690b      	ldr	r3, [r1, #16]
 801bfc2:	694c      	ldr	r4, [r1, #20]
 801bfc4:	4a0d      	ldr	r2, [pc, #52]	@ (801bffc <rand+0x78>)
 801bfc6:	4358      	muls	r0, r3
 801bfc8:	fb02 0004 	mla	r0, r2, r4, r0
 801bfcc:	fba3 3202 	umull	r3, r2, r3, r2
 801bfd0:	3301      	adds	r3, #1
 801bfd2:	eb40 0002 	adc.w	r0, r0, r2
 801bfd6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801bfda:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801bfde:	bd10      	pop	{r4, pc}
 801bfe0:	200009c0 	.word	0x200009c0
 801bfe4:	0801f3d2 	.word	0x0801f3d2
 801bfe8:	0801f3e9 	.word	0x0801f3e9
 801bfec:	abcd330e 	.word	0xabcd330e
 801bff0:	e66d1234 	.word	0xe66d1234
 801bff4:	0005deec 	.word	0x0005deec
 801bff8:	5851f42d 	.word	0x5851f42d
 801bffc:	4c957f2d 	.word	0x4c957f2d

0801c000 <realloc>:
 801c000:	4b02      	ldr	r3, [pc, #8]	@ (801c00c <realloc+0xc>)
 801c002:	460a      	mov	r2, r1
 801c004:	4601      	mov	r1, r0
 801c006:	6818      	ldr	r0, [r3, #0]
 801c008:	f000 b802 	b.w	801c010 <_realloc_r>
 801c00c:	200009c0 	.word	0x200009c0

0801c010 <_realloc_r>:
 801c010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c014:	4680      	mov	r8, r0
 801c016:	4615      	mov	r5, r2
 801c018:	460c      	mov	r4, r1
 801c01a:	b921      	cbnz	r1, 801c026 <_realloc_r+0x16>
 801c01c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c020:	4611      	mov	r1, r2
 801c022:	f7ff bef5 	b.w	801be10 <_malloc_r>
 801c026:	b92a      	cbnz	r2, 801c034 <_realloc_r+0x24>
 801c028:	f000 fc36 	bl	801c898 <_free_r>
 801c02c:	2400      	movs	r4, #0
 801c02e:	4620      	mov	r0, r4
 801c030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c034:	f000 fc7a 	bl	801c92c <_malloc_usable_size_r>
 801c038:	4285      	cmp	r5, r0
 801c03a:	4606      	mov	r6, r0
 801c03c:	d802      	bhi.n	801c044 <_realloc_r+0x34>
 801c03e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c042:	d8f4      	bhi.n	801c02e <_realloc_r+0x1e>
 801c044:	4629      	mov	r1, r5
 801c046:	4640      	mov	r0, r8
 801c048:	f7ff fee2 	bl	801be10 <_malloc_r>
 801c04c:	4607      	mov	r7, r0
 801c04e:	2800      	cmp	r0, #0
 801c050:	d0ec      	beq.n	801c02c <_realloc_r+0x1c>
 801c052:	42b5      	cmp	r5, r6
 801c054:	462a      	mov	r2, r5
 801c056:	4621      	mov	r1, r4
 801c058:	bf28      	it	cs
 801c05a:	4632      	movcs	r2, r6
 801c05c:	f000 fbe3 	bl	801c826 <memcpy>
 801c060:	4621      	mov	r1, r4
 801c062:	4640      	mov	r0, r8
 801c064:	f000 fc18 	bl	801c898 <_free_r>
 801c068:	463c      	mov	r4, r7
 801c06a:	e7e0      	b.n	801c02e <_realloc_r+0x1e>

0801c06c <_strtoul_l.constprop.0>:
 801c06c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c070:	4e34      	ldr	r6, [pc, #208]	@ (801c144 <_strtoul_l.constprop.0+0xd8>)
 801c072:	4686      	mov	lr, r0
 801c074:	460d      	mov	r5, r1
 801c076:	4628      	mov	r0, r5
 801c078:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c07c:	5d37      	ldrb	r7, [r6, r4]
 801c07e:	f017 0708 	ands.w	r7, r7, #8
 801c082:	d1f8      	bne.n	801c076 <_strtoul_l.constprop.0+0xa>
 801c084:	2c2d      	cmp	r4, #45	@ 0x2d
 801c086:	d12f      	bne.n	801c0e8 <_strtoul_l.constprop.0+0x7c>
 801c088:	782c      	ldrb	r4, [r5, #0]
 801c08a:	2701      	movs	r7, #1
 801c08c:	1c85      	adds	r5, r0, #2
 801c08e:	f033 0010 	bics.w	r0, r3, #16
 801c092:	d109      	bne.n	801c0a8 <_strtoul_l.constprop.0+0x3c>
 801c094:	2c30      	cmp	r4, #48	@ 0x30
 801c096:	d12c      	bne.n	801c0f2 <_strtoul_l.constprop.0+0x86>
 801c098:	7828      	ldrb	r0, [r5, #0]
 801c09a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801c09e:	2858      	cmp	r0, #88	@ 0x58
 801c0a0:	d127      	bne.n	801c0f2 <_strtoul_l.constprop.0+0x86>
 801c0a2:	786c      	ldrb	r4, [r5, #1]
 801c0a4:	2310      	movs	r3, #16
 801c0a6:	3502      	adds	r5, #2
 801c0a8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801c0ac:	2600      	movs	r6, #0
 801c0ae:	fbb8 f8f3 	udiv	r8, r8, r3
 801c0b2:	fb03 f908 	mul.w	r9, r3, r8
 801c0b6:	ea6f 0909 	mvn.w	r9, r9
 801c0ba:	4630      	mov	r0, r6
 801c0bc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801c0c0:	f1bc 0f09 	cmp.w	ip, #9
 801c0c4:	d81c      	bhi.n	801c100 <_strtoul_l.constprop.0+0x94>
 801c0c6:	4664      	mov	r4, ip
 801c0c8:	42a3      	cmp	r3, r4
 801c0ca:	dd2a      	ble.n	801c122 <_strtoul_l.constprop.0+0xb6>
 801c0cc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801c0d0:	d007      	beq.n	801c0e2 <_strtoul_l.constprop.0+0x76>
 801c0d2:	4580      	cmp	r8, r0
 801c0d4:	d322      	bcc.n	801c11c <_strtoul_l.constprop.0+0xb0>
 801c0d6:	d101      	bne.n	801c0dc <_strtoul_l.constprop.0+0x70>
 801c0d8:	45a1      	cmp	r9, r4
 801c0da:	db1f      	blt.n	801c11c <_strtoul_l.constprop.0+0xb0>
 801c0dc:	fb00 4003 	mla	r0, r0, r3, r4
 801c0e0:	2601      	movs	r6, #1
 801c0e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c0e6:	e7e9      	b.n	801c0bc <_strtoul_l.constprop.0+0x50>
 801c0e8:	2c2b      	cmp	r4, #43	@ 0x2b
 801c0ea:	bf04      	itt	eq
 801c0ec:	782c      	ldrbeq	r4, [r5, #0]
 801c0ee:	1c85      	addeq	r5, r0, #2
 801c0f0:	e7cd      	b.n	801c08e <_strtoul_l.constprop.0+0x22>
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	d1d8      	bne.n	801c0a8 <_strtoul_l.constprop.0+0x3c>
 801c0f6:	2c30      	cmp	r4, #48	@ 0x30
 801c0f8:	bf0c      	ite	eq
 801c0fa:	2308      	moveq	r3, #8
 801c0fc:	230a      	movne	r3, #10
 801c0fe:	e7d3      	b.n	801c0a8 <_strtoul_l.constprop.0+0x3c>
 801c100:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801c104:	f1bc 0f19 	cmp.w	ip, #25
 801c108:	d801      	bhi.n	801c10e <_strtoul_l.constprop.0+0xa2>
 801c10a:	3c37      	subs	r4, #55	@ 0x37
 801c10c:	e7dc      	b.n	801c0c8 <_strtoul_l.constprop.0+0x5c>
 801c10e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801c112:	f1bc 0f19 	cmp.w	ip, #25
 801c116:	d804      	bhi.n	801c122 <_strtoul_l.constprop.0+0xb6>
 801c118:	3c57      	subs	r4, #87	@ 0x57
 801c11a:	e7d5      	b.n	801c0c8 <_strtoul_l.constprop.0+0x5c>
 801c11c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801c120:	e7df      	b.n	801c0e2 <_strtoul_l.constprop.0+0x76>
 801c122:	1c73      	adds	r3, r6, #1
 801c124:	d106      	bne.n	801c134 <_strtoul_l.constprop.0+0xc8>
 801c126:	2322      	movs	r3, #34	@ 0x22
 801c128:	f8ce 3000 	str.w	r3, [lr]
 801c12c:	4630      	mov	r0, r6
 801c12e:	b932      	cbnz	r2, 801c13e <_strtoul_l.constprop.0+0xd2>
 801c130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c134:	b107      	cbz	r7, 801c138 <_strtoul_l.constprop.0+0xcc>
 801c136:	4240      	negs	r0, r0
 801c138:	2a00      	cmp	r2, #0
 801c13a:	d0f9      	beq.n	801c130 <_strtoul_l.constprop.0+0xc4>
 801c13c:	b106      	cbz	r6, 801c140 <_strtoul_l.constprop.0+0xd4>
 801c13e:	1e69      	subs	r1, r5, #1
 801c140:	6011      	str	r1, [r2, #0]
 801c142:	e7f5      	b.n	801c130 <_strtoul_l.constprop.0+0xc4>
 801c144:	0801f442 	.word	0x0801f442

0801c148 <strtoul>:
 801c148:	4613      	mov	r3, r2
 801c14a:	460a      	mov	r2, r1
 801c14c:	4601      	mov	r1, r0
 801c14e:	4802      	ldr	r0, [pc, #8]	@ (801c158 <strtoul+0x10>)
 801c150:	6800      	ldr	r0, [r0, #0]
 801c152:	f7ff bf8b 	b.w	801c06c <_strtoul_l.constprop.0>
 801c156:	bf00      	nop
 801c158:	200009c0 	.word	0x200009c0

0801c15c <std>:
 801c15c:	2300      	movs	r3, #0
 801c15e:	b510      	push	{r4, lr}
 801c160:	4604      	mov	r4, r0
 801c162:	e9c0 3300 	strd	r3, r3, [r0]
 801c166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c16a:	6083      	str	r3, [r0, #8]
 801c16c:	8181      	strh	r1, [r0, #12]
 801c16e:	6643      	str	r3, [r0, #100]	@ 0x64
 801c170:	81c2      	strh	r2, [r0, #14]
 801c172:	6183      	str	r3, [r0, #24]
 801c174:	4619      	mov	r1, r3
 801c176:	2208      	movs	r2, #8
 801c178:	305c      	adds	r0, #92	@ 0x5c
 801c17a:	f000 fa8b 	bl	801c694 <memset>
 801c17e:	4b0d      	ldr	r3, [pc, #52]	@ (801c1b4 <std+0x58>)
 801c180:	6263      	str	r3, [r4, #36]	@ 0x24
 801c182:	4b0d      	ldr	r3, [pc, #52]	@ (801c1b8 <std+0x5c>)
 801c184:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c186:	4b0d      	ldr	r3, [pc, #52]	@ (801c1bc <std+0x60>)
 801c188:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c18a:	4b0d      	ldr	r3, [pc, #52]	@ (801c1c0 <std+0x64>)
 801c18c:	6323      	str	r3, [r4, #48]	@ 0x30
 801c18e:	4b0d      	ldr	r3, [pc, #52]	@ (801c1c4 <std+0x68>)
 801c190:	6224      	str	r4, [r4, #32]
 801c192:	429c      	cmp	r4, r3
 801c194:	d006      	beq.n	801c1a4 <std+0x48>
 801c196:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c19a:	4294      	cmp	r4, r2
 801c19c:	d002      	beq.n	801c1a4 <std+0x48>
 801c19e:	33d0      	adds	r3, #208	@ 0xd0
 801c1a0:	429c      	cmp	r4, r3
 801c1a2:	d105      	bne.n	801c1b0 <std+0x54>
 801c1a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c1ac:	f000 bb30 	b.w	801c810 <__retarget_lock_init_recursive>
 801c1b0:	bd10      	pop	{r4, pc}
 801c1b2:	bf00      	nop
 801c1b4:	0801c421 	.word	0x0801c421
 801c1b8:	0801c443 	.word	0x0801c443
 801c1bc:	0801c47b 	.word	0x0801c47b
 801c1c0:	0801c49f 	.word	0x0801c49f
 801c1c4:	2000bca0 	.word	0x2000bca0

0801c1c8 <stdio_exit_handler>:
 801c1c8:	4a02      	ldr	r2, [pc, #8]	@ (801c1d4 <stdio_exit_handler+0xc>)
 801c1ca:	4903      	ldr	r1, [pc, #12]	@ (801c1d8 <stdio_exit_handler+0x10>)
 801c1cc:	4803      	ldr	r0, [pc, #12]	@ (801c1dc <stdio_exit_handler+0x14>)
 801c1ce:	f000 b869 	b.w	801c2a4 <_fwalk_sglue>
 801c1d2:	bf00      	nop
 801c1d4:	200009b4 	.word	0x200009b4
 801c1d8:	0801d295 	.word	0x0801d295
 801c1dc:	200009c4 	.word	0x200009c4

0801c1e0 <cleanup_stdio>:
 801c1e0:	6841      	ldr	r1, [r0, #4]
 801c1e2:	4b0c      	ldr	r3, [pc, #48]	@ (801c214 <cleanup_stdio+0x34>)
 801c1e4:	4299      	cmp	r1, r3
 801c1e6:	b510      	push	{r4, lr}
 801c1e8:	4604      	mov	r4, r0
 801c1ea:	d001      	beq.n	801c1f0 <cleanup_stdio+0x10>
 801c1ec:	f001 f852 	bl	801d294 <_fflush_r>
 801c1f0:	68a1      	ldr	r1, [r4, #8]
 801c1f2:	4b09      	ldr	r3, [pc, #36]	@ (801c218 <cleanup_stdio+0x38>)
 801c1f4:	4299      	cmp	r1, r3
 801c1f6:	d002      	beq.n	801c1fe <cleanup_stdio+0x1e>
 801c1f8:	4620      	mov	r0, r4
 801c1fa:	f001 f84b 	bl	801d294 <_fflush_r>
 801c1fe:	68e1      	ldr	r1, [r4, #12]
 801c200:	4b06      	ldr	r3, [pc, #24]	@ (801c21c <cleanup_stdio+0x3c>)
 801c202:	4299      	cmp	r1, r3
 801c204:	d004      	beq.n	801c210 <cleanup_stdio+0x30>
 801c206:	4620      	mov	r0, r4
 801c208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c20c:	f001 b842 	b.w	801d294 <_fflush_r>
 801c210:	bd10      	pop	{r4, pc}
 801c212:	bf00      	nop
 801c214:	2000bca0 	.word	0x2000bca0
 801c218:	2000bd08 	.word	0x2000bd08
 801c21c:	2000bd70 	.word	0x2000bd70

0801c220 <global_stdio_init.part.0>:
 801c220:	b510      	push	{r4, lr}
 801c222:	4b0b      	ldr	r3, [pc, #44]	@ (801c250 <global_stdio_init.part.0+0x30>)
 801c224:	4c0b      	ldr	r4, [pc, #44]	@ (801c254 <global_stdio_init.part.0+0x34>)
 801c226:	4a0c      	ldr	r2, [pc, #48]	@ (801c258 <global_stdio_init.part.0+0x38>)
 801c228:	601a      	str	r2, [r3, #0]
 801c22a:	4620      	mov	r0, r4
 801c22c:	2200      	movs	r2, #0
 801c22e:	2104      	movs	r1, #4
 801c230:	f7ff ff94 	bl	801c15c <std>
 801c234:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c238:	2201      	movs	r2, #1
 801c23a:	2109      	movs	r1, #9
 801c23c:	f7ff ff8e 	bl	801c15c <std>
 801c240:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c244:	2202      	movs	r2, #2
 801c246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c24a:	2112      	movs	r1, #18
 801c24c:	f7ff bf86 	b.w	801c15c <std>
 801c250:	2000bdd8 	.word	0x2000bdd8
 801c254:	2000bca0 	.word	0x2000bca0
 801c258:	0801c1c9 	.word	0x0801c1c9

0801c25c <__sfp_lock_acquire>:
 801c25c:	4801      	ldr	r0, [pc, #4]	@ (801c264 <__sfp_lock_acquire+0x8>)
 801c25e:	f000 bad8 	b.w	801c812 <__retarget_lock_acquire_recursive>
 801c262:	bf00      	nop
 801c264:	2000bde2 	.word	0x2000bde2

0801c268 <__sfp_lock_release>:
 801c268:	4801      	ldr	r0, [pc, #4]	@ (801c270 <__sfp_lock_release+0x8>)
 801c26a:	f000 bad3 	b.w	801c814 <__retarget_lock_release_recursive>
 801c26e:	bf00      	nop
 801c270:	2000bde2 	.word	0x2000bde2

0801c274 <__sinit>:
 801c274:	b510      	push	{r4, lr}
 801c276:	4604      	mov	r4, r0
 801c278:	f7ff fff0 	bl	801c25c <__sfp_lock_acquire>
 801c27c:	6a23      	ldr	r3, [r4, #32]
 801c27e:	b11b      	cbz	r3, 801c288 <__sinit+0x14>
 801c280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c284:	f7ff bff0 	b.w	801c268 <__sfp_lock_release>
 801c288:	4b04      	ldr	r3, [pc, #16]	@ (801c29c <__sinit+0x28>)
 801c28a:	6223      	str	r3, [r4, #32]
 801c28c:	4b04      	ldr	r3, [pc, #16]	@ (801c2a0 <__sinit+0x2c>)
 801c28e:	681b      	ldr	r3, [r3, #0]
 801c290:	2b00      	cmp	r3, #0
 801c292:	d1f5      	bne.n	801c280 <__sinit+0xc>
 801c294:	f7ff ffc4 	bl	801c220 <global_stdio_init.part.0>
 801c298:	e7f2      	b.n	801c280 <__sinit+0xc>
 801c29a:	bf00      	nop
 801c29c:	0801c1e1 	.word	0x0801c1e1
 801c2a0:	2000bdd8 	.word	0x2000bdd8

0801c2a4 <_fwalk_sglue>:
 801c2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c2a8:	4607      	mov	r7, r0
 801c2aa:	4688      	mov	r8, r1
 801c2ac:	4614      	mov	r4, r2
 801c2ae:	2600      	movs	r6, #0
 801c2b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c2b4:	f1b9 0901 	subs.w	r9, r9, #1
 801c2b8:	d505      	bpl.n	801c2c6 <_fwalk_sglue+0x22>
 801c2ba:	6824      	ldr	r4, [r4, #0]
 801c2bc:	2c00      	cmp	r4, #0
 801c2be:	d1f7      	bne.n	801c2b0 <_fwalk_sglue+0xc>
 801c2c0:	4630      	mov	r0, r6
 801c2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c2c6:	89ab      	ldrh	r3, [r5, #12]
 801c2c8:	2b01      	cmp	r3, #1
 801c2ca:	d907      	bls.n	801c2dc <_fwalk_sglue+0x38>
 801c2cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c2d0:	3301      	adds	r3, #1
 801c2d2:	d003      	beq.n	801c2dc <_fwalk_sglue+0x38>
 801c2d4:	4629      	mov	r1, r5
 801c2d6:	4638      	mov	r0, r7
 801c2d8:	47c0      	blx	r8
 801c2da:	4306      	orrs	r6, r0
 801c2dc:	3568      	adds	r5, #104	@ 0x68
 801c2de:	e7e9      	b.n	801c2b4 <_fwalk_sglue+0x10>

0801c2e0 <_fwrite_r>:
 801c2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c2e4:	9c08      	ldr	r4, [sp, #32]
 801c2e6:	468a      	mov	sl, r1
 801c2e8:	4690      	mov	r8, r2
 801c2ea:	fb02 f903 	mul.w	r9, r2, r3
 801c2ee:	4606      	mov	r6, r0
 801c2f0:	b118      	cbz	r0, 801c2fa <_fwrite_r+0x1a>
 801c2f2:	6a03      	ldr	r3, [r0, #32]
 801c2f4:	b90b      	cbnz	r3, 801c2fa <_fwrite_r+0x1a>
 801c2f6:	f7ff ffbd 	bl	801c274 <__sinit>
 801c2fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c2fc:	07dd      	lsls	r5, r3, #31
 801c2fe:	d405      	bmi.n	801c30c <_fwrite_r+0x2c>
 801c300:	89a3      	ldrh	r3, [r4, #12]
 801c302:	0598      	lsls	r0, r3, #22
 801c304:	d402      	bmi.n	801c30c <_fwrite_r+0x2c>
 801c306:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c308:	f000 fa83 	bl	801c812 <__retarget_lock_acquire_recursive>
 801c30c:	89a3      	ldrh	r3, [r4, #12]
 801c30e:	0719      	lsls	r1, r3, #28
 801c310:	d516      	bpl.n	801c340 <_fwrite_r+0x60>
 801c312:	6923      	ldr	r3, [r4, #16]
 801c314:	b1a3      	cbz	r3, 801c340 <_fwrite_r+0x60>
 801c316:	2500      	movs	r5, #0
 801c318:	454d      	cmp	r5, r9
 801c31a:	d01f      	beq.n	801c35c <_fwrite_r+0x7c>
 801c31c:	68a7      	ldr	r7, [r4, #8]
 801c31e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801c322:	3f01      	subs	r7, #1
 801c324:	2f00      	cmp	r7, #0
 801c326:	60a7      	str	r7, [r4, #8]
 801c328:	da04      	bge.n	801c334 <_fwrite_r+0x54>
 801c32a:	69a3      	ldr	r3, [r4, #24]
 801c32c:	429f      	cmp	r7, r3
 801c32e:	db0f      	blt.n	801c350 <_fwrite_r+0x70>
 801c330:	290a      	cmp	r1, #10
 801c332:	d00d      	beq.n	801c350 <_fwrite_r+0x70>
 801c334:	6823      	ldr	r3, [r4, #0]
 801c336:	1c5a      	adds	r2, r3, #1
 801c338:	6022      	str	r2, [r4, #0]
 801c33a:	7019      	strb	r1, [r3, #0]
 801c33c:	3501      	adds	r5, #1
 801c33e:	e7eb      	b.n	801c318 <_fwrite_r+0x38>
 801c340:	4621      	mov	r1, r4
 801c342:	4630      	mov	r0, r6
 801c344:	f000 f926 	bl	801c594 <__swsetup_r>
 801c348:	2800      	cmp	r0, #0
 801c34a:	d0e4      	beq.n	801c316 <_fwrite_r+0x36>
 801c34c:	2500      	movs	r5, #0
 801c34e:	e005      	b.n	801c35c <_fwrite_r+0x7c>
 801c350:	4622      	mov	r2, r4
 801c352:	4630      	mov	r0, r6
 801c354:	f000 f8e0 	bl	801c518 <__swbuf_r>
 801c358:	3001      	adds	r0, #1
 801c35a:	d1ef      	bne.n	801c33c <_fwrite_r+0x5c>
 801c35c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c35e:	07da      	lsls	r2, r3, #31
 801c360:	d405      	bmi.n	801c36e <_fwrite_r+0x8e>
 801c362:	89a3      	ldrh	r3, [r4, #12]
 801c364:	059b      	lsls	r3, r3, #22
 801c366:	d402      	bmi.n	801c36e <_fwrite_r+0x8e>
 801c368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c36a:	f000 fa53 	bl	801c814 <__retarget_lock_release_recursive>
 801c36e:	fbb5 f0f8 	udiv	r0, r5, r8
 801c372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801c378 <fwrite>:
 801c378:	b507      	push	{r0, r1, r2, lr}
 801c37a:	9300      	str	r3, [sp, #0]
 801c37c:	4613      	mov	r3, r2
 801c37e:	460a      	mov	r2, r1
 801c380:	4601      	mov	r1, r0
 801c382:	4803      	ldr	r0, [pc, #12]	@ (801c390 <fwrite+0x18>)
 801c384:	6800      	ldr	r0, [r0, #0]
 801c386:	f7ff ffab 	bl	801c2e0 <_fwrite_r>
 801c38a:	b003      	add	sp, #12
 801c38c:	f85d fb04 	ldr.w	pc, [sp], #4
 801c390:	200009c0 	.word	0x200009c0

0801c394 <iprintf>:
 801c394:	b40f      	push	{r0, r1, r2, r3}
 801c396:	b507      	push	{r0, r1, r2, lr}
 801c398:	4906      	ldr	r1, [pc, #24]	@ (801c3b4 <iprintf+0x20>)
 801c39a:	ab04      	add	r3, sp, #16
 801c39c:	6808      	ldr	r0, [r1, #0]
 801c39e:	f853 2b04 	ldr.w	r2, [r3], #4
 801c3a2:	6881      	ldr	r1, [r0, #8]
 801c3a4:	9301      	str	r3, [sp, #4]
 801c3a6:	f000 fc4b 	bl	801cc40 <_vfiprintf_r>
 801c3aa:	b003      	add	sp, #12
 801c3ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801c3b0:	b004      	add	sp, #16
 801c3b2:	4770      	bx	lr
 801c3b4:	200009c0 	.word	0x200009c0

0801c3b8 <sniprintf>:
 801c3b8:	b40c      	push	{r2, r3}
 801c3ba:	b530      	push	{r4, r5, lr}
 801c3bc:	4b17      	ldr	r3, [pc, #92]	@ (801c41c <sniprintf+0x64>)
 801c3be:	1e0c      	subs	r4, r1, #0
 801c3c0:	681d      	ldr	r5, [r3, #0]
 801c3c2:	b09d      	sub	sp, #116	@ 0x74
 801c3c4:	da08      	bge.n	801c3d8 <sniprintf+0x20>
 801c3c6:	238b      	movs	r3, #139	@ 0x8b
 801c3c8:	602b      	str	r3, [r5, #0]
 801c3ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c3ce:	b01d      	add	sp, #116	@ 0x74
 801c3d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c3d4:	b002      	add	sp, #8
 801c3d6:	4770      	bx	lr
 801c3d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801c3dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c3e0:	bf14      	ite	ne
 801c3e2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801c3e6:	4623      	moveq	r3, r4
 801c3e8:	9304      	str	r3, [sp, #16]
 801c3ea:	9307      	str	r3, [sp, #28]
 801c3ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c3f0:	9002      	str	r0, [sp, #8]
 801c3f2:	9006      	str	r0, [sp, #24]
 801c3f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c3f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c3fa:	ab21      	add	r3, sp, #132	@ 0x84
 801c3fc:	a902      	add	r1, sp, #8
 801c3fe:	4628      	mov	r0, r5
 801c400:	9301      	str	r3, [sp, #4]
 801c402:	f000 faf7 	bl	801c9f4 <_svfiprintf_r>
 801c406:	1c43      	adds	r3, r0, #1
 801c408:	bfbc      	itt	lt
 801c40a:	238b      	movlt	r3, #139	@ 0x8b
 801c40c:	602b      	strlt	r3, [r5, #0]
 801c40e:	2c00      	cmp	r4, #0
 801c410:	d0dd      	beq.n	801c3ce <sniprintf+0x16>
 801c412:	9b02      	ldr	r3, [sp, #8]
 801c414:	2200      	movs	r2, #0
 801c416:	701a      	strb	r2, [r3, #0]
 801c418:	e7d9      	b.n	801c3ce <sniprintf+0x16>
 801c41a:	bf00      	nop
 801c41c:	200009c0 	.word	0x200009c0

0801c420 <__sread>:
 801c420:	b510      	push	{r4, lr}
 801c422:	460c      	mov	r4, r1
 801c424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c428:	f000 f994 	bl	801c754 <_read_r>
 801c42c:	2800      	cmp	r0, #0
 801c42e:	bfab      	itete	ge
 801c430:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c432:	89a3      	ldrhlt	r3, [r4, #12]
 801c434:	181b      	addge	r3, r3, r0
 801c436:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c43a:	bfac      	ite	ge
 801c43c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c43e:	81a3      	strhlt	r3, [r4, #12]
 801c440:	bd10      	pop	{r4, pc}

0801c442 <__swrite>:
 801c442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c446:	461f      	mov	r7, r3
 801c448:	898b      	ldrh	r3, [r1, #12]
 801c44a:	05db      	lsls	r3, r3, #23
 801c44c:	4605      	mov	r5, r0
 801c44e:	460c      	mov	r4, r1
 801c450:	4616      	mov	r6, r2
 801c452:	d505      	bpl.n	801c460 <__swrite+0x1e>
 801c454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c458:	2302      	movs	r3, #2
 801c45a:	2200      	movs	r2, #0
 801c45c:	f000 f968 	bl	801c730 <_lseek_r>
 801c460:	89a3      	ldrh	r3, [r4, #12]
 801c462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c466:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c46a:	81a3      	strh	r3, [r4, #12]
 801c46c:	4632      	mov	r2, r6
 801c46e:	463b      	mov	r3, r7
 801c470:	4628      	mov	r0, r5
 801c472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c476:	f000 b98f 	b.w	801c798 <_write_r>

0801c47a <__sseek>:
 801c47a:	b510      	push	{r4, lr}
 801c47c:	460c      	mov	r4, r1
 801c47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c482:	f000 f955 	bl	801c730 <_lseek_r>
 801c486:	1c43      	adds	r3, r0, #1
 801c488:	89a3      	ldrh	r3, [r4, #12]
 801c48a:	bf15      	itete	ne
 801c48c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c48e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c492:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c496:	81a3      	strheq	r3, [r4, #12]
 801c498:	bf18      	it	ne
 801c49a:	81a3      	strhne	r3, [r4, #12]
 801c49c:	bd10      	pop	{r4, pc}

0801c49e <__sclose>:
 801c49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4a2:	f000 b935 	b.w	801c710 <_close_r>

0801c4a6 <_vsniprintf_r>:
 801c4a6:	b530      	push	{r4, r5, lr}
 801c4a8:	4614      	mov	r4, r2
 801c4aa:	2c00      	cmp	r4, #0
 801c4ac:	b09b      	sub	sp, #108	@ 0x6c
 801c4ae:	4605      	mov	r5, r0
 801c4b0:	461a      	mov	r2, r3
 801c4b2:	da05      	bge.n	801c4c0 <_vsniprintf_r+0x1a>
 801c4b4:	238b      	movs	r3, #139	@ 0x8b
 801c4b6:	6003      	str	r3, [r0, #0]
 801c4b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c4bc:	b01b      	add	sp, #108	@ 0x6c
 801c4be:	bd30      	pop	{r4, r5, pc}
 801c4c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801c4c4:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c4c8:	bf14      	ite	ne
 801c4ca:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801c4ce:	4623      	moveq	r3, r4
 801c4d0:	9302      	str	r3, [sp, #8]
 801c4d2:	9305      	str	r3, [sp, #20]
 801c4d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c4d8:	9100      	str	r1, [sp, #0]
 801c4da:	9104      	str	r1, [sp, #16]
 801c4dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c4e0:	4669      	mov	r1, sp
 801c4e2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c4e4:	f000 fa86 	bl	801c9f4 <_svfiprintf_r>
 801c4e8:	1c43      	adds	r3, r0, #1
 801c4ea:	bfbc      	itt	lt
 801c4ec:	238b      	movlt	r3, #139	@ 0x8b
 801c4ee:	602b      	strlt	r3, [r5, #0]
 801c4f0:	2c00      	cmp	r4, #0
 801c4f2:	d0e3      	beq.n	801c4bc <_vsniprintf_r+0x16>
 801c4f4:	9b00      	ldr	r3, [sp, #0]
 801c4f6:	2200      	movs	r2, #0
 801c4f8:	701a      	strb	r2, [r3, #0]
 801c4fa:	e7df      	b.n	801c4bc <_vsniprintf_r+0x16>

0801c4fc <vsniprintf>:
 801c4fc:	b507      	push	{r0, r1, r2, lr}
 801c4fe:	9300      	str	r3, [sp, #0]
 801c500:	4613      	mov	r3, r2
 801c502:	460a      	mov	r2, r1
 801c504:	4601      	mov	r1, r0
 801c506:	4803      	ldr	r0, [pc, #12]	@ (801c514 <vsniprintf+0x18>)
 801c508:	6800      	ldr	r0, [r0, #0]
 801c50a:	f7ff ffcc 	bl	801c4a6 <_vsniprintf_r>
 801c50e:	b003      	add	sp, #12
 801c510:	f85d fb04 	ldr.w	pc, [sp], #4
 801c514:	200009c0 	.word	0x200009c0

0801c518 <__swbuf_r>:
 801c518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c51a:	460e      	mov	r6, r1
 801c51c:	4614      	mov	r4, r2
 801c51e:	4605      	mov	r5, r0
 801c520:	b118      	cbz	r0, 801c52a <__swbuf_r+0x12>
 801c522:	6a03      	ldr	r3, [r0, #32]
 801c524:	b90b      	cbnz	r3, 801c52a <__swbuf_r+0x12>
 801c526:	f7ff fea5 	bl	801c274 <__sinit>
 801c52a:	69a3      	ldr	r3, [r4, #24]
 801c52c:	60a3      	str	r3, [r4, #8]
 801c52e:	89a3      	ldrh	r3, [r4, #12]
 801c530:	071a      	lsls	r2, r3, #28
 801c532:	d501      	bpl.n	801c538 <__swbuf_r+0x20>
 801c534:	6923      	ldr	r3, [r4, #16]
 801c536:	b943      	cbnz	r3, 801c54a <__swbuf_r+0x32>
 801c538:	4621      	mov	r1, r4
 801c53a:	4628      	mov	r0, r5
 801c53c:	f000 f82a 	bl	801c594 <__swsetup_r>
 801c540:	b118      	cbz	r0, 801c54a <__swbuf_r+0x32>
 801c542:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801c546:	4638      	mov	r0, r7
 801c548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c54a:	6823      	ldr	r3, [r4, #0]
 801c54c:	6922      	ldr	r2, [r4, #16]
 801c54e:	1a98      	subs	r0, r3, r2
 801c550:	6963      	ldr	r3, [r4, #20]
 801c552:	b2f6      	uxtb	r6, r6
 801c554:	4283      	cmp	r3, r0
 801c556:	4637      	mov	r7, r6
 801c558:	dc05      	bgt.n	801c566 <__swbuf_r+0x4e>
 801c55a:	4621      	mov	r1, r4
 801c55c:	4628      	mov	r0, r5
 801c55e:	f000 fe99 	bl	801d294 <_fflush_r>
 801c562:	2800      	cmp	r0, #0
 801c564:	d1ed      	bne.n	801c542 <__swbuf_r+0x2a>
 801c566:	68a3      	ldr	r3, [r4, #8]
 801c568:	3b01      	subs	r3, #1
 801c56a:	60a3      	str	r3, [r4, #8]
 801c56c:	6823      	ldr	r3, [r4, #0]
 801c56e:	1c5a      	adds	r2, r3, #1
 801c570:	6022      	str	r2, [r4, #0]
 801c572:	701e      	strb	r6, [r3, #0]
 801c574:	6962      	ldr	r2, [r4, #20]
 801c576:	1c43      	adds	r3, r0, #1
 801c578:	429a      	cmp	r2, r3
 801c57a:	d004      	beq.n	801c586 <__swbuf_r+0x6e>
 801c57c:	89a3      	ldrh	r3, [r4, #12]
 801c57e:	07db      	lsls	r3, r3, #31
 801c580:	d5e1      	bpl.n	801c546 <__swbuf_r+0x2e>
 801c582:	2e0a      	cmp	r6, #10
 801c584:	d1df      	bne.n	801c546 <__swbuf_r+0x2e>
 801c586:	4621      	mov	r1, r4
 801c588:	4628      	mov	r0, r5
 801c58a:	f000 fe83 	bl	801d294 <_fflush_r>
 801c58e:	2800      	cmp	r0, #0
 801c590:	d0d9      	beq.n	801c546 <__swbuf_r+0x2e>
 801c592:	e7d6      	b.n	801c542 <__swbuf_r+0x2a>

0801c594 <__swsetup_r>:
 801c594:	b538      	push	{r3, r4, r5, lr}
 801c596:	4b29      	ldr	r3, [pc, #164]	@ (801c63c <__swsetup_r+0xa8>)
 801c598:	4605      	mov	r5, r0
 801c59a:	6818      	ldr	r0, [r3, #0]
 801c59c:	460c      	mov	r4, r1
 801c59e:	b118      	cbz	r0, 801c5a8 <__swsetup_r+0x14>
 801c5a0:	6a03      	ldr	r3, [r0, #32]
 801c5a2:	b90b      	cbnz	r3, 801c5a8 <__swsetup_r+0x14>
 801c5a4:	f7ff fe66 	bl	801c274 <__sinit>
 801c5a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c5ac:	0719      	lsls	r1, r3, #28
 801c5ae:	d422      	bmi.n	801c5f6 <__swsetup_r+0x62>
 801c5b0:	06da      	lsls	r2, r3, #27
 801c5b2:	d407      	bmi.n	801c5c4 <__swsetup_r+0x30>
 801c5b4:	2209      	movs	r2, #9
 801c5b6:	602a      	str	r2, [r5, #0]
 801c5b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c5bc:	81a3      	strh	r3, [r4, #12]
 801c5be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c5c2:	e033      	b.n	801c62c <__swsetup_r+0x98>
 801c5c4:	0758      	lsls	r0, r3, #29
 801c5c6:	d512      	bpl.n	801c5ee <__swsetup_r+0x5a>
 801c5c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c5ca:	b141      	cbz	r1, 801c5de <__swsetup_r+0x4a>
 801c5cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c5d0:	4299      	cmp	r1, r3
 801c5d2:	d002      	beq.n	801c5da <__swsetup_r+0x46>
 801c5d4:	4628      	mov	r0, r5
 801c5d6:	f000 f95f 	bl	801c898 <_free_r>
 801c5da:	2300      	movs	r3, #0
 801c5dc:	6363      	str	r3, [r4, #52]	@ 0x34
 801c5de:	89a3      	ldrh	r3, [r4, #12]
 801c5e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c5e4:	81a3      	strh	r3, [r4, #12]
 801c5e6:	2300      	movs	r3, #0
 801c5e8:	6063      	str	r3, [r4, #4]
 801c5ea:	6923      	ldr	r3, [r4, #16]
 801c5ec:	6023      	str	r3, [r4, #0]
 801c5ee:	89a3      	ldrh	r3, [r4, #12]
 801c5f0:	f043 0308 	orr.w	r3, r3, #8
 801c5f4:	81a3      	strh	r3, [r4, #12]
 801c5f6:	6923      	ldr	r3, [r4, #16]
 801c5f8:	b94b      	cbnz	r3, 801c60e <__swsetup_r+0x7a>
 801c5fa:	89a3      	ldrh	r3, [r4, #12]
 801c5fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c604:	d003      	beq.n	801c60e <__swsetup_r+0x7a>
 801c606:	4621      	mov	r1, r4
 801c608:	4628      	mov	r0, r5
 801c60a:	f000 fea3 	bl	801d354 <__smakebuf_r>
 801c60e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c612:	f013 0201 	ands.w	r2, r3, #1
 801c616:	d00a      	beq.n	801c62e <__swsetup_r+0x9a>
 801c618:	2200      	movs	r2, #0
 801c61a:	60a2      	str	r2, [r4, #8]
 801c61c:	6962      	ldr	r2, [r4, #20]
 801c61e:	4252      	negs	r2, r2
 801c620:	61a2      	str	r2, [r4, #24]
 801c622:	6922      	ldr	r2, [r4, #16]
 801c624:	b942      	cbnz	r2, 801c638 <__swsetup_r+0xa4>
 801c626:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c62a:	d1c5      	bne.n	801c5b8 <__swsetup_r+0x24>
 801c62c:	bd38      	pop	{r3, r4, r5, pc}
 801c62e:	0799      	lsls	r1, r3, #30
 801c630:	bf58      	it	pl
 801c632:	6962      	ldrpl	r2, [r4, #20]
 801c634:	60a2      	str	r2, [r4, #8]
 801c636:	e7f4      	b.n	801c622 <__swsetup_r+0x8e>
 801c638:	2000      	movs	r0, #0
 801c63a:	e7f7      	b.n	801c62c <__swsetup_r+0x98>
 801c63c:	200009c0 	.word	0x200009c0

0801c640 <memcmp>:
 801c640:	b510      	push	{r4, lr}
 801c642:	3901      	subs	r1, #1
 801c644:	4402      	add	r2, r0
 801c646:	4290      	cmp	r0, r2
 801c648:	d101      	bne.n	801c64e <memcmp+0xe>
 801c64a:	2000      	movs	r0, #0
 801c64c:	e005      	b.n	801c65a <memcmp+0x1a>
 801c64e:	7803      	ldrb	r3, [r0, #0]
 801c650:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c654:	42a3      	cmp	r3, r4
 801c656:	d001      	beq.n	801c65c <memcmp+0x1c>
 801c658:	1b18      	subs	r0, r3, r4
 801c65a:	bd10      	pop	{r4, pc}
 801c65c:	3001      	adds	r0, #1
 801c65e:	e7f2      	b.n	801c646 <memcmp+0x6>

0801c660 <memmove>:
 801c660:	4288      	cmp	r0, r1
 801c662:	b510      	push	{r4, lr}
 801c664:	eb01 0402 	add.w	r4, r1, r2
 801c668:	d902      	bls.n	801c670 <memmove+0x10>
 801c66a:	4284      	cmp	r4, r0
 801c66c:	4623      	mov	r3, r4
 801c66e:	d807      	bhi.n	801c680 <memmove+0x20>
 801c670:	1e43      	subs	r3, r0, #1
 801c672:	42a1      	cmp	r1, r4
 801c674:	d008      	beq.n	801c688 <memmove+0x28>
 801c676:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c67a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c67e:	e7f8      	b.n	801c672 <memmove+0x12>
 801c680:	4402      	add	r2, r0
 801c682:	4601      	mov	r1, r0
 801c684:	428a      	cmp	r2, r1
 801c686:	d100      	bne.n	801c68a <memmove+0x2a>
 801c688:	bd10      	pop	{r4, pc}
 801c68a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c68e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c692:	e7f7      	b.n	801c684 <memmove+0x24>

0801c694 <memset>:
 801c694:	4402      	add	r2, r0
 801c696:	4603      	mov	r3, r0
 801c698:	4293      	cmp	r3, r2
 801c69a:	d100      	bne.n	801c69e <memset+0xa>
 801c69c:	4770      	bx	lr
 801c69e:	f803 1b01 	strb.w	r1, [r3], #1
 801c6a2:	e7f9      	b.n	801c698 <memset+0x4>

0801c6a4 <strchr>:
 801c6a4:	b2c9      	uxtb	r1, r1
 801c6a6:	4603      	mov	r3, r0
 801c6a8:	4618      	mov	r0, r3
 801c6aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c6ae:	b112      	cbz	r2, 801c6b6 <strchr+0x12>
 801c6b0:	428a      	cmp	r2, r1
 801c6b2:	d1f9      	bne.n	801c6a8 <strchr+0x4>
 801c6b4:	4770      	bx	lr
 801c6b6:	2900      	cmp	r1, #0
 801c6b8:	bf18      	it	ne
 801c6ba:	2000      	movne	r0, #0
 801c6bc:	4770      	bx	lr

0801c6be <strncmp>:
 801c6be:	b510      	push	{r4, lr}
 801c6c0:	b16a      	cbz	r2, 801c6de <strncmp+0x20>
 801c6c2:	3901      	subs	r1, #1
 801c6c4:	1884      	adds	r4, r0, r2
 801c6c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c6ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c6ce:	429a      	cmp	r2, r3
 801c6d0:	d103      	bne.n	801c6da <strncmp+0x1c>
 801c6d2:	42a0      	cmp	r0, r4
 801c6d4:	d001      	beq.n	801c6da <strncmp+0x1c>
 801c6d6:	2a00      	cmp	r2, #0
 801c6d8:	d1f5      	bne.n	801c6c6 <strncmp+0x8>
 801c6da:	1ad0      	subs	r0, r2, r3
 801c6dc:	bd10      	pop	{r4, pc}
 801c6de:	4610      	mov	r0, r2
 801c6e0:	e7fc      	b.n	801c6dc <strncmp+0x1e>

0801c6e2 <strstr>:
 801c6e2:	780a      	ldrb	r2, [r1, #0]
 801c6e4:	b570      	push	{r4, r5, r6, lr}
 801c6e6:	b96a      	cbnz	r2, 801c704 <strstr+0x22>
 801c6e8:	bd70      	pop	{r4, r5, r6, pc}
 801c6ea:	429a      	cmp	r2, r3
 801c6ec:	d109      	bne.n	801c702 <strstr+0x20>
 801c6ee:	460c      	mov	r4, r1
 801c6f0:	4605      	mov	r5, r0
 801c6f2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d0f6      	beq.n	801c6e8 <strstr+0x6>
 801c6fa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c6fe:	429e      	cmp	r6, r3
 801c700:	d0f7      	beq.n	801c6f2 <strstr+0x10>
 801c702:	3001      	adds	r0, #1
 801c704:	7803      	ldrb	r3, [r0, #0]
 801c706:	2b00      	cmp	r3, #0
 801c708:	d1ef      	bne.n	801c6ea <strstr+0x8>
 801c70a:	4618      	mov	r0, r3
 801c70c:	e7ec      	b.n	801c6e8 <strstr+0x6>
	...

0801c710 <_close_r>:
 801c710:	b538      	push	{r3, r4, r5, lr}
 801c712:	4d06      	ldr	r5, [pc, #24]	@ (801c72c <_close_r+0x1c>)
 801c714:	2300      	movs	r3, #0
 801c716:	4604      	mov	r4, r0
 801c718:	4608      	mov	r0, r1
 801c71a:	602b      	str	r3, [r5, #0]
 801c71c:	f7e6 fdfa 	bl	8003314 <_close>
 801c720:	1c43      	adds	r3, r0, #1
 801c722:	d102      	bne.n	801c72a <_close_r+0x1a>
 801c724:	682b      	ldr	r3, [r5, #0]
 801c726:	b103      	cbz	r3, 801c72a <_close_r+0x1a>
 801c728:	6023      	str	r3, [r4, #0]
 801c72a:	bd38      	pop	{r3, r4, r5, pc}
 801c72c:	2000bddc 	.word	0x2000bddc

0801c730 <_lseek_r>:
 801c730:	b538      	push	{r3, r4, r5, lr}
 801c732:	4d07      	ldr	r5, [pc, #28]	@ (801c750 <_lseek_r+0x20>)
 801c734:	4604      	mov	r4, r0
 801c736:	4608      	mov	r0, r1
 801c738:	4611      	mov	r1, r2
 801c73a:	2200      	movs	r2, #0
 801c73c:	602a      	str	r2, [r5, #0]
 801c73e:	461a      	mov	r2, r3
 801c740:	f7e6 fe0f 	bl	8003362 <_lseek>
 801c744:	1c43      	adds	r3, r0, #1
 801c746:	d102      	bne.n	801c74e <_lseek_r+0x1e>
 801c748:	682b      	ldr	r3, [r5, #0]
 801c74a:	b103      	cbz	r3, 801c74e <_lseek_r+0x1e>
 801c74c:	6023      	str	r3, [r4, #0]
 801c74e:	bd38      	pop	{r3, r4, r5, pc}
 801c750:	2000bddc 	.word	0x2000bddc

0801c754 <_read_r>:
 801c754:	b538      	push	{r3, r4, r5, lr}
 801c756:	4d07      	ldr	r5, [pc, #28]	@ (801c774 <_read_r+0x20>)
 801c758:	4604      	mov	r4, r0
 801c75a:	4608      	mov	r0, r1
 801c75c:	4611      	mov	r1, r2
 801c75e:	2200      	movs	r2, #0
 801c760:	602a      	str	r2, [r5, #0]
 801c762:	461a      	mov	r2, r3
 801c764:	f7e6 fd9d 	bl	80032a2 <_read>
 801c768:	1c43      	adds	r3, r0, #1
 801c76a:	d102      	bne.n	801c772 <_read_r+0x1e>
 801c76c:	682b      	ldr	r3, [r5, #0]
 801c76e:	b103      	cbz	r3, 801c772 <_read_r+0x1e>
 801c770:	6023      	str	r3, [r4, #0]
 801c772:	bd38      	pop	{r3, r4, r5, pc}
 801c774:	2000bddc 	.word	0x2000bddc

0801c778 <_sbrk_r>:
 801c778:	b538      	push	{r3, r4, r5, lr}
 801c77a:	4d06      	ldr	r5, [pc, #24]	@ (801c794 <_sbrk_r+0x1c>)
 801c77c:	2300      	movs	r3, #0
 801c77e:	4604      	mov	r4, r0
 801c780:	4608      	mov	r0, r1
 801c782:	602b      	str	r3, [r5, #0]
 801c784:	f7e6 fdfa 	bl	800337c <_sbrk>
 801c788:	1c43      	adds	r3, r0, #1
 801c78a:	d102      	bne.n	801c792 <_sbrk_r+0x1a>
 801c78c:	682b      	ldr	r3, [r5, #0]
 801c78e:	b103      	cbz	r3, 801c792 <_sbrk_r+0x1a>
 801c790:	6023      	str	r3, [r4, #0]
 801c792:	bd38      	pop	{r3, r4, r5, pc}
 801c794:	2000bddc 	.word	0x2000bddc

0801c798 <_write_r>:
 801c798:	b538      	push	{r3, r4, r5, lr}
 801c79a:	4d07      	ldr	r5, [pc, #28]	@ (801c7b8 <_write_r+0x20>)
 801c79c:	4604      	mov	r4, r0
 801c79e:	4608      	mov	r0, r1
 801c7a0:	4611      	mov	r1, r2
 801c7a2:	2200      	movs	r2, #0
 801c7a4:	602a      	str	r2, [r5, #0]
 801c7a6:	461a      	mov	r2, r3
 801c7a8:	f7e6 fd98 	bl	80032dc <_write>
 801c7ac:	1c43      	adds	r3, r0, #1
 801c7ae:	d102      	bne.n	801c7b6 <_write_r+0x1e>
 801c7b0:	682b      	ldr	r3, [r5, #0]
 801c7b2:	b103      	cbz	r3, 801c7b6 <_write_r+0x1e>
 801c7b4:	6023      	str	r3, [r4, #0]
 801c7b6:	bd38      	pop	{r3, r4, r5, pc}
 801c7b8:	2000bddc 	.word	0x2000bddc

0801c7bc <__errno>:
 801c7bc:	4b01      	ldr	r3, [pc, #4]	@ (801c7c4 <__errno+0x8>)
 801c7be:	6818      	ldr	r0, [r3, #0]
 801c7c0:	4770      	bx	lr
 801c7c2:	bf00      	nop
 801c7c4:	200009c0 	.word	0x200009c0

0801c7c8 <__libc_init_array>:
 801c7c8:	b570      	push	{r4, r5, r6, lr}
 801c7ca:	4d0d      	ldr	r5, [pc, #52]	@ (801c800 <__libc_init_array+0x38>)
 801c7cc:	4c0d      	ldr	r4, [pc, #52]	@ (801c804 <__libc_init_array+0x3c>)
 801c7ce:	1b64      	subs	r4, r4, r5
 801c7d0:	10a4      	asrs	r4, r4, #2
 801c7d2:	2600      	movs	r6, #0
 801c7d4:	42a6      	cmp	r6, r4
 801c7d6:	d109      	bne.n	801c7ec <__libc_init_array+0x24>
 801c7d8:	4d0b      	ldr	r5, [pc, #44]	@ (801c808 <__libc_init_array+0x40>)
 801c7da:	4c0c      	ldr	r4, [pc, #48]	@ (801c80c <__libc_init_array+0x44>)
 801c7dc:	f001 f9d6 	bl	801db8c <_init>
 801c7e0:	1b64      	subs	r4, r4, r5
 801c7e2:	10a4      	asrs	r4, r4, #2
 801c7e4:	2600      	movs	r6, #0
 801c7e6:	42a6      	cmp	r6, r4
 801c7e8:	d105      	bne.n	801c7f6 <__libc_init_array+0x2e>
 801c7ea:	bd70      	pop	{r4, r5, r6, pc}
 801c7ec:	f855 3b04 	ldr.w	r3, [r5], #4
 801c7f0:	4798      	blx	r3
 801c7f2:	3601      	adds	r6, #1
 801c7f4:	e7ee      	b.n	801c7d4 <__libc_init_array+0xc>
 801c7f6:	f855 3b04 	ldr.w	r3, [r5], #4
 801c7fa:	4798      	blx	r3
 801c7fc:	3601      	adds	r6, #1
 801c7fe:	e7f2      	b.n	801c7e6 <__libc_init_array+0x1e>
 801c800:	0801f630 	.word	0x0801f630
 801c804:	0801f630 	.word	0x0801f630
 801c808:	0801f630 	.word	0x0801f630
 801c80c:	0801f644 	.word	0x0801f644

0801c810 <__retarget_lock_init_recursive>:
 801c810:	4770      	bx	lr

0801c812 <__retarget_lock_acquire_recursive>:
 801c812:	4770      	bx	lr

0801c814 <__retarget_lock_release_recursive>:
 801c814:	4770      	bx	lr

0801c816 <strcpy>:
 801c816:	4603      	mov	r3, r0
 801c818:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c81c:	f803 2b01 	strb.w	r2, [r3], #1
 801c820:	2a00      	cmp	r2, #0
 801c822:	d1f9      	bne.n	801c818 <strcpy+0x2>
 801c824:	4770      	bx	lr

0801c826 <memcpy>:
 801c826:	440a      	add	r2, r1
 801c828:	4291      	cmp	r1, r2
 801c82a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801c82e:	d100      	bne.n	801c832 <memcpy+0xc>
 801c830:	4770      	bx	lr
 801c832:	b510      	push	{r4, lr}
 801c834:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c838:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c83c:	4291      	cmp	r1, r2
 801c83e:	d1f9      	bne.n	801c834 <memcpy+0xe>
 801c840:	bd10      	pop	{r4, pc}
	...

0801c844 <__assert_func>:
 801c844:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c846:	4614      	mov	r4, r2
 801c848:	461a      	mov	r2, r3
 801c84a:	4b09      	ldr	r3, [pc, #36]	@ (801c870 <__assert_func+0x2c>)
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	4605      	mov	r5, r0
 801c850:	68d8      	ldr	r0, [r3, #12]
 801c852:	b954      	cbnz	r4, 801c86a <__assert_func+0x26>
 801c854:	4b07      	ldr	r3, [pc, #28]	@ (801c874 <__assert_func+0x30>)
 801c856:	461c      	mov	r4, r3
 801c858:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c85c:	9100      	str	r1, [sp, #0]
 801c85e:	462b      	mov	r3, r5
 801c860:	4905      	ldr	r1, [pc, #20]	@ (801c878 <__assert_func+0x34>)
 801c862:	f000 fd3f 	bl	801d2e4 <fiprintf>
 801c866:	f000 fdd3 	bl	801d410 <abort>
 801c86a:	4b04      	ldr	r3, [pc, #16]	@ (801c87c <__assert_func+0x38>)
 801c86c:	e7f4      	b.n	801c858 <__assert_func+0x14>
 801c86e:	bf00      	nop
 801c870:	200009c0 	.word	0x200009c0
 801c874:	0801f57d 	.word	0x0801f57d
 801c878:	0801f54f 	.word	0x0801f54f
 801c87c:	0801f542 	.word	0x0801f542

0801c880 <__env_lock>:
 801c880:	4801      	ldr	r0, [pc, #4]	@ (801c888 <__env_lock+0x8>)
 801c882:	f7ff bfc6 	b.w	801c812 <__retarget_lock_acquire_recursive>
 801c886:	bf00      	nop
 801c888:	2000bde0 	.word	0x2000bde0

0801c88c <__env_unlock>:
 801c88c:	4801      	ldr	r0, [pc, #4]	@ (801c894 <__env_unlock+0x8>)
 801c88e:	f7ff bfc1 	b.w	801c814 <__retarget_lock_release_recursive>
 801c892:	bf00      	nop
 801c894:	2000bde0 	.word	0x2000bde0

0801c898 <_free_r>:
 801c898:	b538      	push	{r3, r4, r5, lr}
 801c89a:	4605      	mov	r5, r0
 801c89c:	2900      	cmp	r1, #0
 801c89e:	d041      	beq.n	801c924 <_free_r+0x8c>
 801c8a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c8a4:	1f0c      	subs	r4, r1, #4
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	bfb8      	it	lt
 801c8aa:	18e4      	addlt	r4, r4, r3
 801c8ac:	f7ff fb30 	bl	801bf10 <__malloc_lock>
 801c8b0:	4a1d      	ldr	r2, [pc, #116]	@ (801c928 <_free_r+0x90>)
 801c8b2:	6813      	ldr	r3, [r2, #0]
 801c8b4:	b933      	cbnz	r3, 801c8c4 <_free_r+0x2c>
 801c8b6:	6063      	str	r3, [r4, #4]
 801c8b8:	6014      	str	r4, [r2, #0]
 801c8ba:	4628      	mov	r0, r5
 801c8bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c8c0:	f7ff bb2c 	b.w	801bf1c <__malloc_unlock>
 801c8c4:	42a3      	cmp	r3, r4
 801c8c6:	d908      	bls.n	801c8da <_free_r+0x42>
 801c8c8:	6820      	ldr	r0, [r4, #0]
 801c8ca:	1821      	adds	r1, r4, r0
 801c8cc:	428b      	cmp	r3, r1
 801c8ce:	bf01      	itttt	eq
 801c8d0:	6819      	ldreq	r1, [r3, #0]
 801c8d2:	685b      	ldreq	r3, [r3, #4]
 801c8d4:	1809      	addeq	r1, r1, r0
 801c8d6:	6021      	streq	r1, [r4, #0]
 801c8d8:	e7ed      	b.n	801c8b6 <_free_r+0x1e>
 801c8da:	461a      	mov	r2, r3
 801c8dc:	685b      	ldr	r3, [r3, #4]
 801c8de:	b10b      	cbz	r3, 801c8e4 <_free_r+0x4c>
 801c8e0:	42a3      	cmp	r3, r4
 801c8e2:	d9fa      	bls.n	801c8da <_free_r+0x42>
 801c8e4:	6811      	ldr	r1, [r2, #0]
 801c8e6:	1850      	adds	r0, r2, r1
 801c8e8:	42a0      	cmp	r0, r4
 801c8ea:	d10b      	bne.n	801c904 <_free_r+0x6c>
 801c8ec:	6820      	ldr	r0, [r4, #0]
 801c8ee:	4401      	add	r1, r0
 801c8f0:	1850      	adds	r0, r2, r1
 801c8f2:	4283      	cmp	r3, r0
 801c8f4:	6011      	str	r1, [r2, #0]
 801c8f6:	d1e0      	bne.n	801c8ba <_free_r+0x22>
 801c8f8:	6818      	ldr	r0, [r3, #0]
 801c8fa:	685b      	ldr	r3, [r3, #4]
 801c8fc:	6053      	str	r3, [r2, #4]
 801c8fe:	4408      	add	r0, r1
 801c900:	6010      	str	r0, [r2, #0]
 801c902:	e7da      	b.n	801c8ba <_free_r+0x22>
 801c904:	d902      	bls.n	801c90c <_free_r+0x74>
 801c906:	230c      	movs	r3, #12
 801c908:	602b      	str	r3, [r5, #0]
 801c90a:	e7d6      	b.n	801c8ba <_free_r+0x22>
 801c90c:	6820      	ldr	r0, [r4, #0]
 801c90e:	1821      	adds	r1, r4, r0
 801c910:	428b      	cmp	r3, r1
 801c912:	bf04      	itt	eq
 801c914:	6819      	ldreq	r1, [r3, #0]
 801c916:	685b      	ldreq	r3, [r3, #4]
 801c918:	6063      	str	r3, [r4, #4]
 801c91a:	bf04      	itt	eq
 801c91c:	1809      	addeq	r1, r1, r0
 801c91e:	6021      	streq	r1, [r4, #0]
 801c920:	6054      	str	r4, [r2, #4]
 801c922:	e7ca      	b.n	801c8ba <_free_r+0x22>
 801c924:	bd38      	pop	{r3, r4, r5, pc}
 801c926:	bf00      	nop
 801c928:	2000bc9c 	.word	0x2000bc9c

0801c92c <_malloc_usable_size_r>:
 801c92c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c930:	1f18      	subs	r0, r3, #4
 801c932:	2b00      	cmp	r3, #0
 801c934:	bfbc      	itt	lt
 801c936:	580b      	ldrlt	r3, [r1, r0]
 801c938:	18c0      	addlt	r0, r0, r3
 801c93a:	4770      	bx	lr

0801c93c <__ssputs_r>:
 801c93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c940:	688e      	ldr	r6, [r1, #8]
 801c942:	461f      	mov	r7, r3
 801c944:	42be      	cmp	r6, r7
 801c946:	680b      	ldr	r3, [r1, #0]
 801c948:	4682      	mov	sl, r0
 801c94a:	460c      	mov	r4, r1
 801c94c:	4690      	mov	r8, r2
 801c94e:	d82d      	bhi.n	801c9ac <__ssputs_r+0x70>
 801c950:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c954:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c958:	d026      	beq.n	801c9a8 <__ssputs_r+0x6c>
 801c95a:	6965      	ldr	r5, [r4, #20]
 801c95c:	6909      	ldr	r1, [r1, #16]
 801c95e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c962:	eba3 0901 	sub.w	r9, r3, r1
 801c966:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c96a:	1c7b      	adds	r3, r7, #1
 801c96c:	444b      	add	r3, r9
 801c96e:	106d      	asrs	r5, r5, #1
 801c970:	429d      	cmp	r5, r3
 801c972:	bf38      	it	cc
 801c974:	461d      	movcc	r5, r3
 801c976:	0553      	lsls	r3, r2, #21
 801c978:	d527      	bpl.n	801c9ca <__ssputs_r+0x8e>
 801c97a:	4629      	mov	r1, r5
 801c97c:	f7ff fa48 	bl	801be10 <_malloc_r>
 801c980:	4606      	mov	r6, r0
 801c982:	b360      	cbz	r0, 801c9de <__ssputs_r+0xa2>
 801c984:	6921      	ldr	r1, [r4, #16]
 801c986:	464a      	mov	r2, r9
 801c988:	f7ff ff4d 	bl	801c826 <memcpy>
 801c98c:	89a3      	ldrh	r3, [r4, #12]
 801c98e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c996:	81a3      	strh	r3, [r4, #12]
 801c998:	6126      	str	r6, [r4, #16]
 801c99a:	6165      	str	r5, [r4, #20]
 801c99c:	444e      	add	r6, r9
 801c99e:	eba5 0509 	sub.w	r5, r5, r9
 801c9a2:	6026      	str	r6, [r4, #0]
 801c9a4:	60a5      	str	r5, [r4, #8]
 801c9a6:	463e      	mov	r6, r7
 801c9a8:	42be      	cmp	r6, r7
 801c9aa:	d900      	bls.n	801c9ae <__ssputs_r+0x72>
 801c9ac:	463e      	mov	r6, r7
 801c9ae:	6820      	ldr	r0, [r4, #0]
 801c9b0:	4632      	mov	r2, r6
 801c9b2:	4641      	mov	r1, r8
 801c9b4:	f7ff fe54 	bl	801c660 <memmove>
 801c9b8:	68a3      	ldr	r3, [r4, #8]
 801c9ba:	1b9b      	subs	r3, r3, r6
 801c9bc:	60a3      	str	r3, [r4, #8]
 801c9be:	6823      	ldr	r3, [r4, #0]
 801c9c0:	4433      	add	r3, r6
 801c9c2:	6023      	str	r3, [r4, #0]
 801c9c4:	2000      	movs	r0, #0
 801c9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c9ca:	462a      	mov	r2, r5
 801c9cc:	f7ff fb20 	bl	801c010 <_realloc_r>
 801c9d0:	4606      	mov	r6, r0
 801c9d2:	2800      	cmp	r0, #0
 801c9d4:	d1e0      	bne.n	801c998 <__ssputs_r+0x5c>
 801c9d6:	6921      	ldr	r1, [r4, #16]
 801c9d8:	4650      	mov	r0, sl
 801c9da:	f7ff ff5d 	bl	801c898 <_free_r>
 801c9de:	230c      	movs	r3, #12
 801c9e0:	f8ca 3000 	str.w	r3, [sl]
 801c9e4:	89a3      	ldrh	r3, [r4, #12]
 801c9e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c9ea:	81a3      	strh	r3, [r4, #12]
 801c9ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c9f0:	e7e9      	b.n	801c9c6 <__ssputs_r+0x8a>
	...

0801c9f4 <_svfiprintf_r>:
 801c9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9f8:	4698      	mov	r8, r3
 801c9fa:	898b      	ldrh	r3, [r1, #12]
 801c9fc:	061b      	lsls	r3, r3, #24
 801c9fe:	b09d      	sub	sp, #116	@ 0x74
 801ca00:	4607      	mov	r7, r0
 801ca02:	460d      	mov	r5, r1
 801ca04:	4614      	mov	r4, r2
 801ca06:	d510      	bpl.n	801ca2a <_svfiprintf_r+0x36>
 801ca08:	690b      	ldr	r3, [r1, #16]
 801ca0a:	b973      	cbnz	r3, 801ca2a <_svfiprintf_r+0x36>
 801ca0c:	2140      	movs	r1, #64	@ 0x40
 801ca0e:	f7ff f9ff 	bl	801be10 <_malloc_r>
 801ca12:	6028      	str	r0, [r5, #0]
 801ca14:	6128      	str	r0, [r5, #16]
 801ca16:	b930      	cbnz	r0, 801ca26 <_svfiprintf_r+0x32>
 801ca18:	230c      	movs	r3, #12
 801ca1a:	603b      	str	r3, [r7, #0]
 801ca1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ca20:	b01d      	add	sp, #116	@ 0x74
 801ca22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca26:	2340      	movs	r3, #64	@ 0x40
 801ca28:	616b      	str	r3, [r5, #20]
 801ca2a:	2300      	movs	r3, #0
 801ca2c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ca2e:	2320      	movs	r3, #32
 801ca30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ca34:	f8cd 800c 	str.w	r8, [sp, #12]
 801ca38:	2330      	movs	r3, #48	@ 0x30
 801ca3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801cbd8 <_svfiprintf_r+0x1e4>
 801ca3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ca42:	f04f 0901 	mov.w	r9, #1
 801ca46:	4623      	mov	r3, r4
 801ca48:	469a      	mov	sl, r3
 801ca4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ca4e:	b10a      	cbz	r2, 801ca54 <_svfiprintf_r+0x60>
 801ca50:	2a25      	cmp	r2, #37	@ 0x25
 801ca52:	d1f9      	bne.n	801ca48 <_svfiprintf_r+0x54>
 801ca54:	ebba 0b04 	subs.w	fp, sl, r4
 801ca58:	d00b      	beq.n	801ca72 <_svfiprintf_r+0x7e>
 801ca5a:	465b      	mov	r3, fp
 801ca5c:	4622      	mov	r2, r4
 801ca5e:	4629      	mov	r1, r5
 801ca60:	4638      	mov	r0, r7
 801ca62:	f7ff ff6b 	bl	801c93c <__ssputs_r>
 801ca66:	3001      	adds	r0, #1
 801ca68:	f000 80a7 	beq.w	801cbba <_svfiprintf_r+0x1c6>
 801ca6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ca6e:	445a      	add	r2, fp
 801ca70:	9209      	str	r2, [sp, #36]	@ 0x24
 801ca72:	f89a 3000 	ldrb.w	r3, [sl]
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	f000 809f 	beq.w	801cbba <_svfiprintf_r+0x1c6>
 801ca7c:	2300      	movs	r3, #0
 801ca7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ca82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ca86:	f10a 0a01 	add.w	sl, sl, #1
 801ca8a:	9304      	str	r3, [sp, #16]
 801ca8c:	9307      	str	r3, [sp, #28]
 801ca8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ca92:	931a      	str	r3, [sp, #104]	@ 0x68
 801ca94:	4654      	mov	r4, sl
 801ca96:	2205      	movs	r2, #5
 801ca98:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca9c:	484e      	ldr	r0, [pc, #312]	@ (801cbd8 <_svfiprintf_r+0x1e4>)
 801ca9e:	f7e3 fbd7 	bl	8000250 <memchr>
 801caa2:	9a04      	ldr	r2, [sp, #16]
 801caa4:	b9d8      	cbnz	r0, 801cade <_svfiprintf_r+0xea>
 801caa6:	06d0      	lsls	r0, r2, #27
 801caa8:	bf44      	itt	mi
 801caaa:	2320      	movmi	r3, #32
 801caac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cab0:	0711      	lsls	r1, r2, #28
 801cab2:	bf44      	itt	mi
 801cab4:	232b      	movmi	r3, #43	@ 0x2b
 801cab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801caba:	f89a 3000 	ldrb.w	r3, [sl]
 801cabe:	2b2a      	cmp	r3, #42	@ 0x2a
 801cac0:	d015      	beq.n	801caee <_svfiprintf_r+0xfa>
 801cac2:	9a07      	ldr	r2, [sp, #28]
 801cac4:	4654      	mov	r4, sl
 801cac6:	2000      	movs	r0, #0
 801cac8:	f04f 0c0a 	mov.w	ip, #10
 801cacc:	4621      	mov	r1, r4
 801cace:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cad2:	3b30      	subs	r3, #48	@ 0x30
 801cad4:	2b09      	cmp	r3, #9
 801cad6:	d94b      	bls.n	801cb70 <_svfiprintf_r+0x17c>
 801cad8:	b1b0      	cbz	r0, 801cb08 <_svfiprintf_r+0x114>
 801cada:	9207      	str	r2, [sp, #28]
 801cadc:	e014      	b.n	801cb08 <_svfiprintf_r+0x114>
 801cade:	eba0 0308 	sub.w	r3, r0, r8
 801cae2:	fa09 f303 	lsl.w	r3, r9, r3
 801cae6:	4313      	orrs	r3, r2
 801cae8:	9304      	str	r3, [sp, #16]
 801caea:	46a2      	mov	sl, r4
 801caec:	e7d2      	b.n	801ca94 <_svfiprintf_r+0xa0>
 801caee:	9b03      	ldr	r3, [sp, #12]
 801caf0:	1d19      	adds	r1, r3, #4
 801caf2:	681b      	ldr	r3, [r3, #0]
 801caf4:	9103      	str	r1, [sp, #12]
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	bfbb      	ittet	lt
 801cafa:	425b      	neglt	r3, r3
 801cafc:	f042 0202 	orrlt.w	r2, r2, #2
 801cb00:	9307      	strge	r3, [sp, #28]
 801cb02:	9307      	strlt	r3, [sp, #28]
 801cb04:	bfb8      	it	lt
 801cb06:	9204      	strlt	r2, [sp, #16]
 801cb08:	7823      	ldrb	r3, [r4, #0]
 801cb0a:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb0c:	d10a      	bne.n	801cb24 <_svfiprintf_r+0x130>
 801cb0e:	7863      	ldrb	r3, [r4, #1]
 801cb10:	2b2a      	cmp	r3, #42	@ 0x2a
 801cb12:	d132      	bne.n	801cb7a <_svfiprintf_r+0x186>
 801cb14:	9b03      	ldr	r3, [sp, #12]
 801cb16:	1d1a      	adds	r2, r3, #4
 801cb18:	681b      	ldr	r3, [r3, #0]
 801cb1a:	9203      	str	r2, [sp, #12]
 801cb1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cb20:	3402      	adds	r4, #2
 801cb22:	9305      	str	r3, [sp, #20]
 801cb24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801cbe8 <_svfiprintf_r+0x1f4>
 801cb28:	7821      	ldrb	r1, [r4, #0]
 801cb2a:	2203      	movs	r2, #3
 801cb2c:	4650      	mov	r0, sl
 801cb2e:	f7e3 fb8f 	bl	8000250 <memchr>
 801cb32:	b138      	cbz	r0, 801cb44 <_svfiprintf_r+0x150>
 801cb34:	9b04      	ldr	r3, [sp, #16]
 801cb36:	eba0 000a 	sub.w	r0, r0, sl
 801cb3a:	2240      	movs	r2, #64	@ 0x40
 801cb3c:	4082      	lsls	r2, r0
 801cb3e:	4313      	orrs	r3, r2
 801cb40:	3401      	adds	r4, #1
 801cb42:	9304      	str	r3, [sp, #16]
 801cb44:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cb48:	4824      	ldr	r0, [pc, #144]	@ (801cbdc <_svfiprintf_r+0x1e8>)
 801cb4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801cb4e:	2206      	movs	r2, #6
 801cb50:	f7e3 fb7e 	bl	8000250 <memchr>
 801cb54:	2800      	cmp	r0, #0
 801cb56:	d036      	beq.n	801cbc6 <_svfiprintf_r+0x1d2>
 801cb58:	4b21      	ldr	r3, [pc, #132]	@ (801cbe0 <_svfiprintf_r+0x1ec>)
 801cb5a:	bb1b      	cbnz	r3, 801cba4 <_svfiprintf_r+0x1b0>
 801cb5c:	9b03      	ldr	r3, [sp, #12]
 801cb5e:	3307      	adds	r3, #7
 801cb60:	f023 0307 	bic.w	r3, r3, #7
 801cb64:	3308      	adds	r3, #8
 801cb66:	9303      	str	r3, [sp, #12]
 801cb68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb6a:	4433      	add	r3, r6
 801cb6c:	9309      	str	r3, [sp, #36]	@ 0x24
 801cb6e:	e76a      	b.n	801ca46 <_svfiprintf_r+0x52>
 801cb70:	fb0c 3202 	mla	r2, ip, r2, r3
 801cb74:	460c      	mov	r4, r1
 801cb76:	2001      	movs	r0, #1
 801cb78:	e7a8      	b.n	801cacc <_svfiprintf_r+0xd8>
 801cb7a:	2300      	movs	r3, #0
 801cb7c:	3401      	adds	r4, #1
 801cb7e:	9305      	str	r3, [sp, #20]
 801cb80:	4619      	mov	r1, r3
 801cb82:	f04f 0c0a 	mov.w	ip, #10
 801cb86:	4620      	mov	r0, r4
 801cb88:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cb8c:	3a30      	subs	r2, #48	@ 0x30
 801cb8e:	2a09      	cmp	r2, #9
 801cb90:	d903      	bls.n	801cb9a <_svfiprintf_r+0x1a6>
 801cb92:	2b00      	cmp	r3, #0
 801cb94:	d0c6      	beq.n	801cb24 <_svfiprintf_r+0x130>
 801cb96:	9105      	str	r1, [sp, #20]
 801cb98:	e7c4      	b.n	801cb24 <_svfiprintf_r+0x130>
 801cb9a:	fb0c 2101 	mla	r1, ip, r1, r2
 801cb9e:	4604      	mov	r4, r0
 801cba0:	2301      	movs	r3, #1
 801cba2:	e7f0      	b.n	801cb86 <_svfiprintf_r+0x192>
 801cba4:	ab03      	add	r3, sp, #12
 801cba6:	9300      	str	r3, [sp, #0]
 801cba8:	462a      	mov	r2, r5
 801cbaa:	4b0e      	ldr	r3, [pc, #56]	@ (801cbe4 <_svfiprintf_r+0x1f0>)
 801cbac:	a904      	add	r1, sp, #16
 801cbae:	4638      	mov	r0, r7
 801cbb0:	f3af 8000 	nop.w
 801cbb4:	1c42      	adds	r2, r0, #1
 801cbb6:	4606      	mov	r6, r0
 801cbb8:	d1d6      	bne.n	801cb68 <_svfiprintf_r+0x174>
 801cbba:	89ab      	ldrh	r3, [r5, #12]
 801cbbc:	065b      	lsls	r3, r3, #25
 801cbbe:	f53f af2d 	bmi.w	801ca1c <_svfiprintf_r+0x28>
 801cbc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cbc4:	e72c      	b.n	801ca20 <_svfiprintf_r+0x2c>
 801cbc6:	ab03      	add	r3, sp, #12
 801cbc8:	9300      	str	r3, [sp, #0]
 801cbca:	462a      	mov	r2, r5
 801cbcc:	4b05      	ldr	r3, [pc, #20]	@ (801cbe4 <_svfiprintf_r+0x1f0>)
 801cbce:	a904      	add	r1, sp, #16
 801cbd0:	4638      	mov	r0, r7
 801cbd2:	f000 f9bb 	bl	801cf4c <_printf_i>
 801cbd6:	e7ed      	b.n	801cbb4 <_svfiprintf_r+0x1c0>
 801cbd8:	0801f57e 	.word	0x0801f57e
 801cbdc:	0801f588 	.word	0x0801f588
 801cbe0:	00000000 	.word	0x00000000
 801cbe4:	0801c93d 	.word	0x0801c93d
 801cbe8:	0801f584 	.word	0x0801f584

0801cbec <__sfputc_r>:
 801cbec:	6893      	ldr	r3, [r2, #8]
 801cbee:	3b01      	subs	r3, #1
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	b410      	push	{r4}
 801cbf4:	6093      	str	r3, [r2, #8]
 801cbf6:	da08      	bge.n	801cc0a <__sfputc_r+0x1e>
 801cbf8:	6994      	ldr	r4, [r2, #24]
 801cbfa:	42a3      	cmp	r3, r4
 801cbfc:	db01      	blt.n	801cc02 <__sfputc_r+0x16>
 801cbfe:	290a      	cmp	r1, #10
 801cc00:	d103      	bne.n	801cc0a <__sfputc_r+0x1e>
 801cc02:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cc06:	f7ff bc87 	b.w	801c518 <__swbuf_r>
 801cc0a:	6813      	ldr	r3, [r2, #0]
 801cc0c:	1c58      	adds	r0, r3, #1
 801cc0e:	6010      	str	r0, [r2, #0]
 801cc10:	7019      	strb	r1, [r3, #0]
 801cc12:	4608      	mov	r0, r1
 801cc14:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cc18:	4770      	bx	lr

0801cc1a <__sfputs_r>:
 801cc1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc1c:	4606      	mov	r6, r0
 801cc1e:	460f      	mov	r7, r1
 801cc20:	4614      	mov	r4, r2
 801cc22:	18d5      	adds	r5, r2, r3
 801cc24:	42ac      	cmp	r4, r5
 801cc26:	d101      	bne.n	801cc2c <__sfputs_r+0x12>
 801cc28:	2000      	movs	r0, #0
 801cc2a:	e007      	b.n	801cc3c <__sfputs_r+0x22>
 801cc2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cc30:	463a      	mov	r2, r7
 801cc32:	4630      	mov	r0, r6
 801cc34:	f7ff ffda 	bl	801cbec <__sfputc_r>
 801cc38:	1c43      	adds	r3, r0, #1
 801cc3a:	d1f3      	bne.n	801cc24 <__sfputs_r+0xa>
 801cc3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cc40 <_vfiprintf_r>:
 801cc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc44:	460d      	mov	r5, r1
 801cc46:	b09d      	sub	sp, #116	@ 0x74
 801cc48:	4614      	mov	r4, r2
 801cc4a:	4698      	mov	r8, r3
 801cc4c:	4606      	mov	r6, r0
 801cc4e:	b118      	cbz	r0, 801cc58 <_vfiprintf_r+0x18>
 801cc50:	6a03      	ldr	r3, [r0, #32]
 801cc52:	b90b      	cbnz	r3, 801cc58 <_vfiprintf_r+0x18>
 801cc54:	f7ff fb0e 	bl	801c274 <__sinit>
 801cc58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cc5a:	07d9      	lsls	r1, r3, #31
 801cc5c:	d405      	bmi.n	801cc6a <_vfiprintf_r+0x2a>
 801cc5e:	89ab      	ldrh	r3, [r5, #12]
 801cc60:	059a      	lsls	r2, r3, #22
 801cc62:	d402      	bmi.n	801cc6a <_vfiprintf_r+0x2a>
 801cc64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cc66:	f7ff fdd4 	bl	801c812 <__retarget_lock_acquire_recursive>
 801cc6a:	89ab      	ldrh	r3, [r5, #12]
 801cc6c:	071b      	lsls	r3, r3, #28
 801cc6e:	d501      	bpl.n	801cc74 <_vfiprintf_r+0x34>
 801cc70:	692b      	ldr	r3, [r5, #16]
 801cc72:	b99b      	cbnz	r3, 801cc9c <_vfiprintf_r+0x5c>
 801cc74:	4629      	mov	r1, r5
 801cc76:	4630      	mov	r0, r6
 801cc78:	f7ff fc8c 	bl	801c594 <__swsetup_r>
 801cc7c:	b170      	cbz	r0, 801cc9c <_vfiprintf_r+0x5c>
 801cc7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cc80:	07dc      	lsls	r4, r3, #31
 801cc82:	d504      	bpl.n	801cc8e <_vfiprintf_r+0x4e>
 801cc84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cc88:	b01d      	add	sp, #116	@ 0x74
 801cc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc8e:	89ab      	ldrh	r3, [r5, #12]
 801cc90:	0598      	lsls	r0, r3, #22
 801cc92:	d4f7      	bmi.n	801cc84 <_vfiprintf_r+0x44>
 801cc94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cc96:	f7ff fdbd 	bl	801c814 <__retarget_lock_release_recursive>
 801cc9a:	e7f3      	b.n	801cc84 <_vfiprintf_r+0x44>
 801cc9c:	2300      	movs	r3, #0
 801cc9e:	9309      	str	r3, [sp, #36]	@ 0x24
 801cca0:	2320      	movs	r3, #32
 801cca2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cca6:	f8cd 800c 	str.w	r8, [sp, #12]
 801ccaa:	2330      	movs	r3, #48	@ 0x30
 801ccac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ce5c <_vfiprintf_r+0x21c>
 801ccb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ccb4:	f04f 0901 	mov.w	r9, #1
 801ccb8:	4623      	mov	r3, r4
 801ccba:	469a      	mov	sl, r3
 801ccbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ccc0:	b10a      	cbz	r2, 801ccc6 <_vfiprintf_r+0x86>
 801ccc2:	2a25      	cmp	r2, #37	@ 0x25
 801ccc4:	d1f9      	bne.n	801ccba <_vfiprintf_r+0x7a>
 801ccc6:	ebba 0b04 	subs.w	fp, sl, r4
 801ccca:	d00b      	beq.n	801cce4 <_vfiprintf_r+0xa4>
 801cccc:	465b      	mov	r3, fp
 801ccce:	4622      	mov	r2, r4
 801ccd0:	4629      	mov	r1, r5
 801ccd2:	4630      	mov	r0, r6
 801ccd4:	f7ff ffa1 	bl	801cc1a <__sfputs_r>
 801ccd8:	3001      	adds	r0, #1
 801ccda:	f000 80a7 	beq.w	801ce2c <_vfiprintf_r+0x1ec>
 801ccde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cce0:	445a      	add	r2, fp
 801cce2:	9209      	str	r2, [sp, #36]	@ 0x24
 801cce4:	f89a 3000 	ldrb.w	r3, [sl]
 801cce8:	2b00      	cmp	r3, #0
 801ccea:	f000 809f 	beq.w	801ce2c <_vfiprintf_r+0x1ec>
 801ccee:	2300      	movs	r3, #0
 801ccf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ccf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ccf8:	f10a 0a01 	add.w	sl, sl, #1
 801ccfc:	9304      	str	r3, [sp, #16]
 801ccfe:	9307      	str	r3, [sp, #28]
 801cd00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cd04:	931a      	str	r3, [sp, #104]	@ 0x68
 801cd06:	4654      	mov	r4, sl
 801cd08:	2205      	movs	r2, #5
 801cd0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd0e:	4853      	ldr	r0, [pc, #332]	@ (801ce5c <_vfiprintf_r+0x21c>)
 801cd10:	f7e3 fa9e 	bl	8000250 <memchr>
 801cd14:	9a04      	ldr	r2, [sp, #16]
 801cd16:	b9d8      	cbnz	r0, 801cd50 <_vfiprintf_r+0x110>
 801cd18:	06d1      	lsls	r1, r2, #27
 801cd1a:	bf44      	itt	mi
 801cd1c:	2320      	movmi	r3, #32
 801cd1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cd22:	0713      	lsls	r3, r2, #28
 801cd24:	bf44      	itt	mi
 801cd26:	232b      	movmi	r3, #43	@ 0x2b
 801cd28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cd2c:	f89a 3000 	ldrb.w	r3, [sl]
 801cd30:	2b2a      	cmp	r3, #42	@ 0x2a
 801cd32:	d015      	beq.n	801cd60 <_vfiprintf_r+0x120>
 801cd34:	9a07      	ldr	r2, [sp, #28]
 801cd36:	4654      	mov	r4, sl
 801cd38:	2000      	movs	r0, #0
 801cd3a:	f04f 0c0a 	mov.w	ip, #10
 801cd3e:	4621      	mov	r1, r4
 801cd40:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cd44:	3b30      	subs	r3, #48	@ 0x30
 801cd46:	2b09      	cmp	r3, #9
 801cd48:	d94b      	bls.n	801cde2 <_vfiprintf_r+0x1a2>
 801cd4a:	b1b0      	cbz	r0, 801cd7a <_vfiprintf_r+0x13a>
 801cd4c:	9207      	str	r2, [sp, #28]
 801cd4e:	e014      	b.n	801cd7a <_vfiprintf_r+0x13a>
 801cd50:	eba0 0308 	sub.w	r3, r0, r8
 801cd54:	fa09 f303 	lsl.w	r3, r9, r3
 801cd58:	4313      	orrs	r3, r2
 801cd5a:	9304      	str	r3, [sp, #16]
 801cd5c:	46a2      	mov	sl, r4
 801cd5e:	e7d2      	b.n	801cd06 <_vfiprintf_r+0xc6>
 801cd60:	9b03      	ldr	r3, [sp, #12]
 801cd62:	1d19      	adds	r1, r3, #4
 801cd64:	681b      	ldr	r3, [r3, #0]
 801cd66:	9103      	str	r1, [sp, #12]
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	bfbb      	ittet	lt
 801cd6c:	425b      	neglt	r3, r3
 801cd6e:	f042 0202 	orrlt.w	r2, r2, #2
 801cd72:	9307      	strge	r3, [sp, #28]
 801cd74:	9307      	strlt	r3, [sp, #28]
 801cd76:	bfb8      	it	lt
 801cd78:	9204      	strlt	r2, [sp, #16]
 801cd7a:	7823      	ldrb	r3, [r4, #0]
 801cd7c:	2b2e      	cmp	r3, #46	@ 0x2e
 801cd7e:	d10a      	bne.n	801cd96 <_vfiprintf_r+0x156>
 801cd80:	7863      	ldrb	r3, [r4, #1]
 801cd82:	2b2a      	cmp	r3, #42	@ 0x2a
 801cd84:	d132      	bne.n	801cdec <_vfiprintf_r+0x1ac>
 801cd86:	9b03      	ldr	r3, [sp, #12]
 801cd88:	1d1a      	adds	r2, r3, #4
 801cd8a:	681b      	ldr	r3, [r3, #0]
 801cd8c:	9203      	str	r2, [sp, #12]
 801cd8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cd92:	3402      	adds	r4, #2
 801cd94:	9305      	str	r3, [sp, #20]
 801cd96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ce6c <_vfiprintf_r+0x22c>
 801cd9a:	7821      	ldrb	r1, [r4, #0]
 801cd9c:	2203      	movs	r2, #3
 801cd9e:	4650      	mov	r0, sl
 801cda0:	f7e3 fa56 	bl	8000250 <memchr>
 801cda4:	b138      	cbz	r0, 801cdb6 <_vfiprintf_r+0x176>
 801cda6:	9b04      	ldr	r3, [sp, #16]
 801cda8:	eba0 000a 	sub.w	r0, r0, sl
 801cdac:	2240      	movs	r2, #64	@ 0x40
 801cdae:	4082      	lsls	r2, r0
 801cdb0:	4313      	orrs	r3, r2
 801cdb2:	3401      	adds	r4, #1
 801cdb4:	9304      	str	r3, [sp, #16]
 801cdb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cdba:	4829      	ldr	r0, [pc, #164]	@ (801ce60 <_vfiprintf_r+0x220>)
 801cdbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801cdc0:	2206      	movs	r2, #6
 801cdc2:	f7e3 fa45 	bl	8000250 <memchr>
 801cdc6:	2800      	cmp	r0, #0
 801cdc8:	d03f      	beq.n	801ce4a <_vfiprintf_r+0x20a>
 801cdca:	4b26      	ldr	r3, [pc, #152]	@ (801ce64 <_vfiprintf_r+0x224>)
 801cdcc:	bb1b      	cbnz	r3, 801ce16 <_vfiprintf_r+0x1d6>
 801cdce:	9b03      	ldr	r3, [sp, #12]
 801cdd0:	3307      	adds	r3, #7
 801cdd2:	f023 0307 	bic.w	r3, r3, #7
 801cdd6:	3308      	adds	r3, #8
 801cdd8:	9303      	str	r3, [sp, #12]
 801cdda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cddc:	443b      	add	r3, r7
 801cdde:	9309      	str	r3, [sp, #36]	@ 0x24
 801cde0:	e76a      	b.n	801ccb8 <_vfiprintf_r+0x78>
 801cde2:	fb0c 3202 	mla	r2, ip, r2, r3
 801cde6:	460c      	mov	r4, r1
 801cde8:	2001      	movs	r0, #1
 801cdea:	e7a8      	b.n	801cd3e <_vfiprintf_r+0xfe>
 801cdec:	2300      	movs	r3, #0
 801cdee:	3401      	adds	r4, #1
 801cdf0:	9305      	str	r3, [sp, #20]
 801cdf2:	4619      	mov	r1, r3
 801cdf4:	f04f 0c0a 	mov.w	ip, #10
 801cdf8:	4620      	mov	r0, r4
 801cdfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cdfe:	3a30      	subs	r2, #48	@ 0x30
 801ce00:	2a09      	cmp	r2, #9
 801ce02:	d903      	bls.n	801ce0c <_vfiprintf_r+0x1cc>
 801ce04:	2b00      	cmp	r3, #0
 801ce06:	d0c6      	beq.n	801cd96 <_vfiprintf_r+0x156>
 801ce08:	9105      	str	r1, [sp, #20]
 801ce0a:	e7c4      	b.n	801cd96 <_vfiprintf_r+0x156>
 801ce0c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ce10:	4604      	mov	r4, r0
 801ce12:	2301      	movs	r3, #1
 801ce14:	e7f0      	b.n	801cdf8 <_vfiprintf_r+0x1b8>
 801ce16:	ab03      	add	r3, sp, #12
 801ce18:	9300      	str	r3, [sp, #0]
 801ce1a:	462a      	mov	r2, r5
 801ce1c:	4b12      	ldr	r3, [pc, #72]	@ (801ce68 <_vfiprintf_r+0x228>)
 801ce1e:	a904      	add	r1, sp, #16
 801ce20:	4630      	mov	r0, r6
 801ce22:	f3af 8000 	nop.w
 801ce26:	4607      	mov	r7, r0
 801ce28:	1c78      	adds	r0, r7, #1
 801ce2a:	d1d6      	bne.n	801cdda <_vfiprintf_r+0x19a>
 801ce2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ce2e:	07d9      	lsls	r1, r3, #31
 801ce30:	d405      	bmi.n	801ce3e <_vfiprintf_r+0x1fe>
 801ce32:	89ab      	ldrh	r3, [r5, #12]
 801ce34:	059a      	lsls	r2, r3, #22
 801ce36:	d402      	bmi.n	801ce3e <_vfiprintf_r+0x1fe>
 801ce38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ce3a:	f7ff fceb 	bl	801c814 <__retarget_lock_release_recursive>
 801ce3e:	89ab      	ldrh	r3, [r5, #12]
 801ce40:	065b      	lsls	r3, r3, #25
 801ce42:	f53f af1f 	bmi.w	801cc84 <_vfiprintf_r+0x44>
 801ce46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ce48:	e71e      	b.n	801cc88 <_vfiprintf_r+0x48>
 801ce4a:	ab03      	add	r3, sp, #12
 801ce4c:	9300      	str	r3, [sp, #0]
 801ce4e:	462a      	mov	r2, r5
 801ce50:	4b05      	ldr	r3, [pc, #20]	@ (801ce68 <_vfiprintf_r+0x228>)
 801ce52:	a904      	add	r1, sp, #16
 801ce54:	4630      	mov	r0, r6
 801ce56:	f000 f879 	bl	801cf4c <_printf_i>
 801ce5a:	e7e4      	b.n	801ce26 <_vfiprintf_r+0x1e6>
 801ce5c:	0801f57e 	.word	0x0801f57e
 801ce60:	0801f588 	.word	0x0801f588
 801ce64:	00000000 	.word	0x00000000
 801ce68:	0801cc1b 	.word	0x0801cc1b
 801ce6c:	0801f584 	.word	0x0801f584

0801ce70 <_printf_common>:
 801ce70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce74:	4616      	mov	r6, r2
 801ce76:	4698      	mov	r8, r3
 801ce78:	688a      	ldr	r2, [r1, #8]
 801ce7a:	690b      	ldr	r3, [r1, #16]
 801ce7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ce80:	4293      	cmp	r3, r2
 801ce82:	bfb8      	it	lt
 801ce84:	4613      	movlt	r3, r2
 801ce86:	6033      	str	r3, [r6, #0]
 801ce88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ce8c:	4607      	mov	r7, r0
 801ce8e:	460c      	mov	r4, r1
 801ce90:	b10a      	cbz	r2, 801ce96 <_printf_common+0x26>
 801ce92:	3301      	adds	r3, #1
 801ce94:	6033      	str	r3, [r6, #0]
 801ce96:	6823      	ldr	r3, [r4, #0]
 801ce98:	0699      	lsls	r1, r3, #26
 801ce9a:	bf42      	ittt	mi
 801ce9c:	6833      	ldrmi	r3, [r6, #0]
 801ce9e:	3302      	addmi	r3, #2
 801cea0:	6033      	strmi	r3, [r6, #0]
 801cea2:	6825      	ldr	r5, [r4, #0]
 801cea4:	f015 0506 	ands.w	r5, r5, #6
 801cea8:	d106      	bne.n	801ceb8 <_printf_common+0x48>
 801ceaa:	f104 0a19 	add.w	sl, r4, #25
 801ceae:	68e3      	ldr	r3, [r4, #12]
 801ceb0:	6832      	ldr	r2, [r6, #0]
 801ceb2:	1a9b      	subs	r3, r3, r2
 801ceb4:	42ab      	cmp	r3, r5
 801ceb6:	dc26      	bgt.n	801cf06 <_printf_common+0x96>
 801ceb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801cebc:	6822      	ldr	r2, [r4, #0]
 801cebe:	3b00      	subs	r3, #0
 801cec0:	bf18      	it	ne
 801cec2:	2301      	movne	r3, #1
 801cec4:	0692      	lsls	r2, r2, #26
 801cec6:	d42b      	bmi.n	801cf20 <_printf_common+0xb0>
 801cec8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801cecc:	4641      	mov	r1, r8
 801cece:	4638      	mov	r0, r7
 801ced0:	47c8      	blx	r9
 801ced2:	3001      	adds	r0, #1
 801ced4:	d01e      	beq.n	801cf14 <_printf_common+0xa4>
 801ced6:	6823      	ldr	r3, [r4, #0]
 801ced8:	6922      	ldr	r2, [r4, #16]
 801ceda:	f003 0306 	and.w	r3, r3, #6
 801cede:	2b04      	cmp	r3, #4
 801cee0:	bf02      	ittt	eq
 801cee2:	68e5      	ldreq	r5, [r4, #12]
 801cee4:	6833      	ldreq	r3, [r6, #0]
 801cee6:	1aed      	subeq	r5, r5, r3
 801cee8:	68a3      	ldr	r3, [r4, #8]
 801ceea:	bf0c      	ite	eq
 801ceec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cef0:	2500      	movne	r5, #0
 801cef2:	4293      	cmp	r3, r2
 801cef4:	bfc4      	itt	gt
 801cef6:	1a9b      	subgt	r3, r3, r2
 801cef8:	18ed      	addgt	r5, r5, r3
 801cefa:	2600      	movs	r6, #0
 801cefc:	341a      	adds	r4, #26
 801cefe:	42b5      	cmp	r5, r6
 801cf00:	d11a      	bne.n	801cf38 <_printf_common+0xc8>
 801cf02:	2000      	movs	r0, #0
 801cf04:	e008      	b.n	801cf18 <_printf_common+0xa8>
 801cf06:	2301      	movs	r3, #1
 801cf08:	4652      	mov	r2, sl
 801cf0a:	4641      	mov	r1, r8
 801cf0c:	4638      	mov	r0, r7
 801cf0e:	47c8      	blx	r9
 801cf10:	3001      	adds	r0, #1
 801cf12:	d103      	bne.n	801cf1c <_printf_common+0xac>
 801cf14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cf18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf1c:	3501      	adds	r5, #1
 801cf1e:	e7c6      	b.n	801ceae <_printf_common+0x3e>
 801cf20:	18e1      	adds	r1, r4, r3
 801cf22:	1c5a      	adds	r2, r3, #1
 801cf24:	2030      	movs	r0, #48	@ 0x30
 801cf26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801cf2a:	4422      	add	r2, r4
 801cf2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801cf30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801cf34:	3302      	adds	r3, #2
 801cf36:	e7c7      	b.n	801cec8 <_printf_common+0x58>
 801cf38:	2301      	movs	r3, #1
 801cf3a:	4622      	mov	r2, r4
 801cf3c:	4641      	mov	r1, r8
 801cf3e:	4638      	mov	r0, r7
 801cf40:	47c8      	blx	r9
 801cf42:	3001      	adds	r0, #1
 801cf44:	d0e6      	beq.n	801cf14 <_printf_common+0xa4>
 801cf46:	3601      	adds	r6, #1
 801cf48:	e7d9      	b.n	801cefe <_printf_common+0x8e>
	...

0801cf4c <_printf_i>:
 801cf4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cf50:	7e0f      	ldrb	r7, [r1, #24]
 801cf52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801cf54:	2f78      	cmp	r7, #120	@ 0x78
 801cf56:	4691      	mov	r9, r2
 801cf58:	4680      	mov	r8, r0
 801cf5a:	460c      	mov	r4, r1
 801cf5c:	469a      	mov	sl, r3
 801cf5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801cf62:	d807      	bhi.n	801cf74 <_printf_i+0x28>
 801cf64:	2f62      	cmp	r7, #98	@ 0x62
 801cf66:	d80a      	bhi.n	801cf7e <_printf_i+0x32>
 801cf68:	2f00      	cmp	r7, #0
 801cf6a:	f000 80d2 	beq.w	801d112 <_printf_i+0x1c6>
 801cf6e:	2f58      	cmp	r7, #88	@ 0x58
 801cf70:	f000 80b9 	beq.w	801d0e6 <_printf_i+0x19a>
 801cf74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cf78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801cf7c:	e03a      	b.n	801cff4 <_printf_i+0xa8>
 801cf7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801cf82:	2b15      	cmp	r3, #21
 801cf84:	d8f6      	bhi.n	801cf74 <_printf_i+0x28>
 801cf86:	a101      	add	r1, pc, #4	@ (adr r1, 801cf8c <_printf_i+0x40>)
 801cf88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cf8c:	0801cfe5 	.word	0x0801cfe5
 801cf90:	0801cff9 	.word	0x0801cff9
 801cf94:	0801cf75 	.word	0x0801cf75
 801cf98:	0801cf75 	.word	0x0801cf75
 801cf9c:	0801cf75 	.word	0x0801cf75
 801cfa0:	0801cf75 	.word	0x0801cf75
 801cfa4:	0801cff9 	.word	0x0801cff9
 801cfa8:	0801cf75 	.word	0x0801cf75
 801cfac:	0801cf75 	.word	0x0801cf75
 801cfb0:	0801cf75 	.word	0x0801cf75
 801cfb4:	0801cf75 	.word	0x0801cf75
 801cfb8:	0801d0f9 	.word	0x0801d0f9
 801cfbc:	0801d023 	.word	0x0801d023
 801cfc0:	0801d0b3 	.word	0x0801d0b3
 801cfc4:	0801cf75 	.word	0x0801cf75
 801cfc8:	0801cf75 	.word	0x0801cf75
 801cfcc:	0801d11b 	.word	0x0801d11b
 801cfd0:	0801cf75 	.word	0x0801cf75
 801cfd4:	0801d023 	.word	0x0801d023
 801cfd8:	0801cf75 	.word	0x0801cf75
 801cfdc:	0801cf75 	.word	0x0801cf75
 801cfe0:	0801d0bb 	.word	0x0801d0bb
 801cfe4:	6833      	ldr	r3, [r6, #0]
 801cfe6:	1d1a      	adds	r2, r3, #4
 801cfe8:	681b      	ldr	r3, [r3, #0]
 801cfea:	6032      	str	r2, [r6, #0]
 801cfec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cff0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801cff4:	2301      	movs	r3, #1
 801cff6:	e09d      	b.n	801d134 <_printf_i+0x1e8>
 801cff8:	6833      	ldr	r3, [r6, #0]
 801cffa:	6820      	ldr	r0, [r4, #0]
 801cffc:	1d19      	adds	r1, r3, #4
 801cffe:	6031      	str	r1, [r6, #0]
 801d000:	0606      	lsls	r6, r0, #24
 801d002:	d501      	bpl.n	801d008 <_printf_i+0xbc>
 801d004:	681d      	ldr	r5, [r3, #0]
 801d006:	e003      	b.n	801d010 <_printf_i+0xc4>
 801d008:	0645      	lsls	r5, r0, #25
 801d00a:	d5fb      	bpl.n	801d004 <_printf_i+0xb8>
 801d00c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d010:	2d00      	cmp	r5, #0
 801d012:	da03      	bge.n	801d01c <_printf_i+0xd0>
 801d014:	232d      	movs	r3, #45	@ 0x2d
 801d016:	426d      	negs	r5, r5
 801d018:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d01c:	4859      	ldr	r0, [pc, #356]	@ (801d184 <_printf_i+0x238>)
 801d01e:	230a      	movs	r3, #10
 801d020:	e011      	b.n	801d046 <_printf_i+0xfa>
 801d022:	6821      	ldr	r1, [r4, #0]
 801d024:	6833      	ldr	r3, [r6, #0]
 801d026:	0608      	lsls	r0, r1, #24
 801d028:	f853 5b04 	ldr.w	r5, [r3], #4
 801d02c:	d402      	bmi.n	801d034 <_printf_i+0xe8>
 801d02e:	0649      	lsls	r1, r1, #25
 801d030:	bf48      	it	mi
 801d032:	b2ad      	uxthmi	r5, r5
 801d034:	2f6f      	cmp	r7, #111	@ 0x6f
 801d036:	4853      	ldr	r0, [pc, #332]	@ (801d184 <_printf_i+0x238>)
 801d038:	6033      	str	r3, [r6, #0]
 801d03a:	bf14      	ite	ne
 801d03c:	230a      	movne	r3, #10
 801d03e:	2308      	moveq	r3, #8
 801d040:	2100      	movs	r1, #0
 801d042:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d046:	6866      	ldr	r6, [r4, #4]
 801d048:	60a6      	str	r6, [r4, #8]
 801d04a:	2e00      	cmp	r6, #0
 801d04c:	bfa2      	ittt	ge
 801d04e:	6821      	ldrge	r1, [r4, #0]
 801d050:	f021 0104 	bicge.w	r1, r1, #4
 801d054:	6021      	strge	r1, [r4, #0]
 801d056:	b90d      	cbnz	r5, 801d05c <_printf_i+0x110>
 801d058:	2e00      	cmp	r6, #0
 801d05a:	d04b      	beq.n	801d0f4 <_printf_i+0x1a8>
 801d05c:	4616      	mov	r6, r2
 801d05e:	fbb5 f1f3 	udiv	r1, r5, r3
 801d062:	fb03 5711 	mls	r7, r3, r1, r5
 801d066:	5dc7      	ldrb	r7, [r0, r7]
 801d068:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d06c:	462f      	mov	r7, r5
 801d06e:	42bb      	cmp	r3, r7
 801d070:	460d      	mov	r5, r1
 801d072:	d9f4      	bls.n	801d05e <_printf_i+0x112>
 801d074:	2b08      	cmp	r3, #8
 801d076:	d10b      	bne.n	801d090 <_printf_i+0x144>
 801d078:	6823      	ldr	r3, [r4, #0]
 801d07a:	07df      	lsls	r7, r3, #31
 801d07c:	d508      	bpl.n	801d090 <_printf_i+0x144>
 801d07e:	6923      	ldr	r3, [r4, #16]
 801d080:	6861      	ldr	r1, [r4, #4]
 801d082:	4299      	cmp	r1, r3
 801d084:	bfde      	ittt	le
 801d086:	2330      	movle	r3, #48	@ 0x30
 801d088:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d08c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801d090:	1b92      	subs	r2, r2, r6
 801d092:	6122      	str	r2, [r4, #16]
 801d094:	f8cd a000 	str.w	sl, [sp]
 801d098:	464b      	mov	r3, r9
 801d09a:	aa03      	add	r2, sp, #12
 801d09c:	4621      	mov	r1, r4
 801d09e:	4640      	mov	r0, r8
 801d0a0:	f7ff fee6 	bl	801ce70 <_printf_common>
 801d0a4:	3001      	adds	r0, #1
 801d0a6:	d14a      	bne.n	801d13e <_printf_i+0x1f2>
 801d0a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d0ac:	b004      	add	sp, #16
 801d0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d0b2:	6823      	ldr	r3, [r4, #0]
 801d0b4:	f043 0320 	orr.w	r3, r3, #32
 801d0b8:	6023      	str	r3, [r4, #0]
 801d0ba:	4833      	ldr	r0, [pc, #204]	@ (801d188 <_printf_i+0x23c>)
 801d0bc:	2778      	movs	r7, #120	@ 0x78
 801d0be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d0c2:	6823      	ldr	r3, [r4, #0]
 801d0c4:	6831      	ldr	r1, [r6, #0]
 801d0c6:	061f      	lsls	r7, r3, #24
 801d0c8:	f851 5b04 	ldr.w	r5, [r1], #4
 801d0cc:	d402      	bmi.n	801d0d4 <_printf_i+0x188>
 801d0ce:	065f      	lsls	r7, r3, #25
 801d0d0:	bf48      	it	mi
 801d0d2:	b2ad      	uxthmi	r5, r5
 801d0d4:	6031      	str	r1, [r6, #0]
 801d0d6:	07d9      	lsls	r1, r3, #31
 801d0d8:	bf44      	itt	mi
 801d0da:	f043 0320 	orrmi.w	r3, r3, #32
 801d0de:	6023      	strmi	r3, [r4, #0]
 801d0e0:	b11d      	cbz	r5, 801d0ea <_printf_i+0x19e>
 801d0e2:	2310      	movs	r3, #16
 801d0e4:	e7ac      	b.n	801d040 <_printf_i+0xf4>
 801d0e6:	4827      	ldr	r0, [pc, #156]	@ (801d184 <_printf_i+0x238>)
 801d0e8:	e7e9      	b.n	801d0be <_printf_i+0x172>
 801d0ea:	6823      	ldr	r3, [r4, #0]
 801d0ec:	f023 0320 	bic.w	r3, r3, #32
 801d0f0:	6023      	str	r3, [r4, #0]
 801d0f2:	e7f6      	b.n	801d0e2 <_printf_i+0x196>
 801d0f4:	4616      	mov	r6, r2
 801d0f6:	e7bd      	b.n	801d074 <_printf_i+0x128>
 801d0f8:	6833      	ldr	r3, [r6, #0]
 801d0fa:	6825      	ldr	r5, [r4, #0]
 801d0fc:	6961      	ldr	r1, [r4, #20]
 801d0fe:	1d18      	adds	r0, r3, #4
 801d100:	6030      	str	r0, [r6, #0]
 801d102:	062e      	lsls	r6, r5, #24
 801d104:	681b      	ldr	r3, [r3, #0]
 801d106:	d501      	bpl.n	801d10c <_printf_i+0x1c0>
 801d108:	6019      	str	r1, [r3, #0]
 801d10a:	e002      	b.n	801d112 <_printf_i+0x1c6>
 801d10c:	0668      	lsls	r0, r5, #25
 801d10e:	d5fb      	bpl.n	801d108 <_printf_i+0x1bc>
 801d110:	8019      	strh	r1, [r3, #0]
 801d112:	2300      	movs	r3, #0
 801d114:	6123      	str	r3, [r4, #16]
 801d116:	4616      	mov	r6, r2
 801d118:	e7bc      	b.n	801d094 <_printf_i+0x148>
 801d11a:	6833      	ldr	r3, [r6, #0]
 801d11c:	1d1a      	adds	r2, r3, #4
 801d11e:	6032      	str	r2, [r6, #0]
 801d120:	681e      	ldr	r6, [r3, #0]
 801d122:	6862      	ldr	r2, [r4, #4]
 801d124:	2100      	movs	r1, #0
 801d126:	4630      	mov	r0, r6
 801d128:	f7e3 f892 	bl	8000250 <memchr>
 801d12c:	b108      	cbz	r0, 801d132 <_printf_i+0x1e6>
 801d12e:	1b80      	subs	r0, r0, r6
 801d130:	6060      	str	r0, [r4, #4]
 801d132:	6863      	ldr	r3, [r4, #4]
 801d134:	6123      	str	r3, [r4, #16]
 801d136:	2300      	movs	r3, #0
 801d138:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d13c:	e7aa      	b.n	801d094 <_printf_i+0x148>
 801d13e:	6923      	ldr	r3, [r4, #16]
 801d140:	4632      	mov	r2, r6
 801d142:	4649      	mov	r1, r9
 801d144:	4640      	mov	r0, r8
 801d146:	47d0      	blx	sl
 801d148:	3001      	adds	r0, #1
 801d14a:	d0ad      	beq.n	801d0a8 <_printf_i+0x15c>
 801d14c:	6823      	ldr	r3, [r4, #0]
 801d14e:	079b      	lsls	r3, r3, #30
 801d150:	d413      	bmi.n	801d17a <_printf_i+0x22e>
 801d152:	68e0      	ldr	r0, [r4, #12]
 801d154:	9b03      	ldr	r3, [sp, #12]
 801d156:	4298      	cmp	r0, r3
 801d158:	bfb8      	it	lt
 801d15a:	4618      	movlt	r0, r3
 801d15c:	e7a6      	b.n	801d0ac <_printf_i+0x160>
 801d15e:	2301      	movs	r3, #1
 801d160:	4632      	mov	r2, r6
 801d162:	4649      	mov	r1, r9
 801d164:	4640      	mov	r0, r8
 801d166:	47d0      	blx	sl
 801d168:	3001      	adds	r0, #1
 801d16a:	d09d      	beq.n	801d0a8 <_printf_i+0x15c>
 801d16c:	3501      	adds	r5, #1
 801d16e:	68e3      	ldr	r3, [r4, #12]
 801d170:	9903      	ldr	r1, [sp, #12]
 801d172:	1a5b      	subs	r3, r3, r1
 801d174:	42ab      	cmp	r3, r5
 801d176:	dcf2      	bgt.n	801d15e <_printf_i+0x212>
 801d178:	e7eb      	b.n	801d152 <_printf_i+0x206>
 801d17a:	2500      	movs	r5, #0
 801d17c:	f104 0619 	add.w	r6, r4, #25
 801d180:	e7f5      	b.n	801d16e <_printf_i+0x222>
 801d182:	bf00      	nop
 801d184:	0801f58f 	.word	0x0801f58f
 801d188:	0801f5a0 	.word	0x0801f5a0

0801d18c <__sflush_r>:
 801d18c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d194:	0716      	lsls	r6, r2, #28
 801d196:	4605      	mov	r5, r0
 801d198:	460c      	mov	r4, r1
 801d19a:	d454      	bmi.n	801d246 <__sflush_r+0xba>
 801d19c:	684b      	ldr	r3, [r1, #4]
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	dc02      	bgt.n	801d1a8 <__sflush_r+0x1c>
 801d1a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	dd48      	ble.n	801d23a <__sflush_r+0xae>
 801d1a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d1aa:	2e00      	cmp	r6, #0
 801d1ac:	d045      	beq.n	801d23a <__sflush_r+0xae>
 801d1ae:	2300      	movs	r3, #0
 801d1b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d1b4:	682f      	ldr	r7, [r5, #0]
 801d1b6:	6a21      	ldr	r1, [r4, #32]
 801d1b8:	602b      	str	r3, [r5, #0]
 801d1ba:	d030      	beq.n	801d21e <__sflush_r+0x92>
 801d1bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d1be:	89a3      	ldrh	r3, [r4, #12]
 801d1c0:	0759      	lsls	r1, r3, #29
 801d1c2:	d505      	bpl.n	801d1d0 <__sflush_r+0x44>
 801d1c4:	6863      	ldr	r3, [r4, #4]
 801d1c6:	1ad2      	subs	r2, r2, r3
 801d1c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d1ca:	b10b      	cbz	r3, 801d1d0 <__sflush_r+0x44>
 801d1cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d1ce:	1ad2      	subs	r2, r2, r3
 801d1d0:	2300      	movs	r3, #0
 801d1d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d1d4:	6a21      	ldr	r1, [r4, #32]
 801d1d6:	4628      	mov	r0, r5
 801d1d8:	47b0      	blx	r6
 801d1da:	1c43      	adds	r3, r0, #1
 801d1dc:	89a3      	ldrh	r3, [r4, #12]
 801d1de:	d106      	bne.n	801d1ee <__sflush_r+0x62>
 801d1e0:	6829      	ldr	r1, [r5, #0]
 801d1e2:	291d      	cmp	r1, #29
 801d1e4:	d82b      	bhi.n	801d23e <__sflush_r+0xb2>
 801d1e6:	4a2a      	ldr	r2, [pc, #168]	@ (801d290 <__sflush_r+0x104>)
 801d1e8:	410a      	asrs	r2, r1
 801d1ea:	07d6      	lsls	r6, r2, #31
 801d1ec:	d427      	bmi.n	801d23e <__sflush_r+0xb2>
 801d1ee:	2200      	movs	r2, #0
 801d1f0:	6062      	str	r2, [r4, #4]
 801d1f2:	04d9      	lsls	r1, r3, #19
 801d1f4:	6922      	ldr	r2, [r4, #16]
 801d1f6:	6022      	str	r2, [r4, #0]
 801d1f8:	d504      	bpl.n	801d204 <__sflush_r+0x78>
 801d1fa:	1c42      	adds	r2, r0, #1
 801d1fc:	d101      	bne.n	801d202 <__sflush_r+0x76>
 801d1fe:	682b      	ldr	r3, [r5, #0]
 801d200:	b903      	cbnz	r3, 801d204 <__sflush_r+0x78>
 801d202:	6560      	str	r0, [r4, #84]	@ 0x54
 801d204:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d206:	602f      	str	r7, [r5, #0]
 801d208:	b1b9      	cbz	r1, 801d23a <__sflush_r+0xae>
 801d20a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d20e:	4299      	cmp	r1, r3
 801d210:	d002      	beq.n	801d218 <__sflush_r+0x8c>
 801d212:	4628      	mov	r0, r5
 801d214:	f7ff fb40 	bl	801c898 <_free_r>
 801d218:	2300      	movs	r3, #0
 801d21a:	6363      	str	r3, [r4, #52]	@ 0x34
 801d21c:	e00d      	b.n	801d23a <__sflush_r+0xae>
 801d21e:	2301      	movs	r3, #1
 801d220:	4628      	mov	r0, r5
 801d222:	47b0      	blx	r6
 801d224:	4602      	mov	r2, r0
 801d226:	1c50      	adds	r0, r2, #1
 801d228:	d1c9      	bne.n	801d1be <__sflush_r+0x32>
 801d22a:	682b      	ldr	r3, [r5, #0]
 801d22c:	2b00      	cmp	r3, #0
 801d22e:	d0c6      	beq.n	801d1be <__sflush_r+0x32>
 801d230:	2b1d      	cmp	r3, #29
 801d232:	d001      	beq.n	801d238 <__sflush_r+0xac>
 801d234:	2b16      	cmp	r3, #22
 801d236:	d11e      	bne.n	801d276 <__sflush_r+0xea>
 801d238:	602f      	str	r7, [r5, #0]
 801d23a:	2000      	movs	r0, #0
 801d23c:	e022      	b.n	801d284 <__sflush_r+0xf8>
 801d23e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d242:	b21b      	sxth	r3, r3
 801d244:	e01b      	b.n	801d27e <__sflush_r+0xf2>
 801d246:	690f      	ldr	r7, [r1, #16]
 801d248:	2f00      	cmp	r7, #0
 801d24a:	d0f6      	beq.n	801d23a <__sflush_r+0xae>
 801d24c:	0793      	lsls	r3, r2, #30
 801d24e:	680e      	ldr	r6, [r1, #0]
 801d250:	bf08      	it	eq
 801d252:	694b      	ldreq	r3, [r1, #20]
 801d254:	600f      	str	r7, [r1, #0]
 801d256:	bf18      	it	ne
 801d258:	2300      	movne	r3, #0
 801d25a:	eba6 0807 	sub.w	r8, r6, r7
 801d25e:	608b      	str	r3, [r1, #8]
 801d260:	f1b8 0f00 	cmp.w	r8, #0
 801d264:	dde9      	ble.n	801d23a <__sflush_r+0xae>
 801d266:	6a21      	ldr	r1, [r4, #32]
 801d268:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d26a:	4643      	mov	r3, r8
 801d26c:	463a      	mov	r2, r7
 801d26e:	4628      	mov	r0, r5
 801d270:	47b0      	blx	r6
 801d272:	2800      	cmp	r0, #0
 801d274:	dc08      	bgt.n	801d288 <__sflush_r+0xfc>
 801d276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d27a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d27e:	81a3      	strh	r3, [r4, #12]
 801d280:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d288:	4407      	add	r7, r0
 801d28a:	eba8 0800 	sub.w	r8, r8, r0
 801d28e:	e7e7      	b.n	801d260 <__sflush_r+0xd4>
 801d290:	dfbffffe 	.word	0xdfbffffe

0801d294 <_fflush_r>:
 801d294:	b538      	push	{r3, r4, r5, lr}
 801d296:	690b      	ldr	r3, [r1, #16]
 801d298:	4605      	mov	r5, r0
 801d29a:	460c      	mov	r4, r1
 801d29c:	b913      	cbnz	r3, 801d2a4 <_fflush_r+0x10>
 801d29e:	2500      	movs	r5, #0
 801d2a0:	4628      	mov	r0, r5
 801d2a2:	bd38      	pop	{r3, r4, r5, pc}
 801d2a4:	b118      	cbz	r0, 801d2ae <_fflush_r+0x1a>
 801d2a6:	6a03      	ldr	r3, [r0, #32]
 801d2a8:	b90b      	cbnz	r3, 801d2ae <_fflush_r+0x1a>
 801d2aa:	f7fe ffe3 	bl	801c274 <__sinit>
 801d2ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d2b2:	2b00      	cmp	r3, #0
 801d2b4:	d0f3      	beq.n	801d29e <_fflush_r+0xa>
 801d2b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d2b8:	07d0      	lsls	r0, r2, #31
 801d2ba:	d404      	bmi.n	801d2c6 <_fflush_r+0x32>
 801d2bc:	0599      	lsls	r1, r3, #22
 801d2be:	d402      	bmi.n	801d2c6 <_fflush_r+0x32>
 801d2c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d2c2:	f7ff faa6 	bl	801c812 <__retarget_lock_acquire_recursive>
 801d2c6:	4628      	mov	r0, r5
 801d2c8:	4621      	mov	r1, r4
 801d2ca:	f7ff ff5f 	bl	801d18c <__sflush_r>
 801d2ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d2d0:	07da      	lsls	r2, r3, #31
 801d2d2:	4605      	mov	r5, r0
 801d2d4:	d4e4      	bmi.n	801d2a0 <_fflush_r+0xc>
 801d2d6:	89a3      	ldrh	r3, [r4, #12]
 801d2d8:	059b      	lsls	r3, r3, #22
 801d2da:	d4e1      	bmi.n	801d2a0 <_fflush_r+0xc>
 801d2dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d2de:	f7ff fa99 	bl	801c814 <__retarget_lock_release_recursive>
 801d2e2:	e7dd      	b.n	801d2a0 <_fflush_r+0xc>

0801d2e4 <fiprintf>:
 801d2e4:	b40e      	push	{r1, r2, r3}
 801d2e6:	b503      	push	{r0, r1, lr}
 801d2e8:	4601      	mov	r1, r0
 801d2ea:	ab03      	add	r3, sp, #12
 801d2ec:	4805      	ldr	r0, [pc, #20]	@ (801d304 <fiprintf+0x20>)
 801d2ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801d2f2:	6800      	ldr	r0, [r0, #0]
 801d2f4:	9301      	str	r3, [sp, #4]
 801d2f6:	f7ff fca3 	bl	801cc40 <_vfiprintf_r>
 801d2fa:	b002      	add	sp, #8
 801d2fc:	f85d eb04 	ldr.w	lr, [sp], #4
 801d300:	b003      	add	sp, #12
 801d302:	4770      	bx	lr
 801d304:	200009c0 	.word	0x200009c0

0801d308 <__swhatbuf_r>:
 801d308:	b570      	push	{r4, r5, r6, lr}
 801d30a:	460c      	mov	r4, r1
 801d30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d310:	2900      	cmp	r1, #0
 801d312:	b096      	sub	sp, #88	@ 0x58
 801d314:	4615      	mov	r5, r2
 801d316:	461e      	mov	r6, r3
 801d318:	da0d      	bge.n	801d336 <__swhatbuf_r+0x2e>
 801d31a:	89a3      	ldrh	r3, [r4, #12]
 801d31c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d320:	f04f 0100 	mov.w	r1, #0
 801d324:	bf14      	ite	ne
 801d326:	2340      	movne	r3, #64	@ 0x40
 801d328:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d32c:	2000      	movs	r0, #0
 801d32e:	6031      	str	r1, [r6, #0]
 801d330:	602b      	str	r3, [r5, #0]
 801d332:	b016      	add	sp, #88	@ 0x58
 801d334:	bd70      	pop	{r4, r5, r6, pc}
 801d336:	466a      	mov	r2, sp
 801d338:	f000 f848 	bl	801d3cc <_fstat_r>
 801d33c:	2800      	cmp	r0, #0
 801d33e:	dbec      	blt.n	801d31a <__swhatbuf_r+0x12>
 801d340:	9901      	ldr	r1, [sp, #4]
 801d342:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d346:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d34a:	4259      	negs	r1, r3
 801d34c:	4159      	adcs	r1, r3
 801d34e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d352:	e7eb      	b.n	801d32c <__swhatbuf_r+0x24>

0801d354 <__smakebuf_r>:
 801d354:	898b      	ldrh	r3, [r1, #12]
 801d356:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d358:	079d      	lsls	r5, r3, #30
 801d35a:	4606      	mov	r6, r0
 801d35c:	460c      	mov	r4, r1
 801d35e:	d507      	bpl.n	801d370 <__smakebuf_r+0x1c>
 801d360:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d364:	6023      	str	r3, [r4, #0]
 801d366:	6123      	str	r3, [r4, #16]
 801d368:	2301      	movs	r3, #1
 801d36a:	6163      	str	r3, [r4, #20]
 801d36c:	b003      	add	sp, #12
 801d36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d370:	ab01      	add	r3, sp, #4
 801d372:	466a      	mov	r2, sp
 801d374:	f7ff ffc8 	bl	801d308 <__swhatbuf_r>
 801d378:	9f00      	ldr	r7, [sp, #0]
 801d37a:	4605      	mov	r5, r0
 801d37c:	4639      	mov	r1, r7
 801d37e:	4630      	mov	r0, r6
 801d380:	f7fe fd46 	bl	801be10 <_malloc_r>
 801d384:	b948      	cbnz	r0, 801d39a <__smakebuf_r+0x46>
 801d386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d38a:	059a      	lsls	r2, r3, #22
 801d38c:	d4ee      	bmi.n	801d36c <__smakebuf_r+0x18>
 801d38e:	f023 0303 	bic.w	r3, r3, #3
 801d392:	f043 0302 	orr.w	r3, r3, #2
 801d396:	81a3      	strh	r3, [r4, #12]
 801d398:	e7e2      	b.n	801d360 <__smakebuf_r+0xc>
 801d39a:	89a3      	ldrh	r3, [r4, #12]
 801d39c:	6020      	str	r0, [r4, #0]
 801d39e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d3a2:	81a3      	strh	r3, [r4, #12]
 801d3a4:	9b01      	ldr	r3, [sp, #4]
 801d3a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d3aa:	b15b      	cbz	r3, 801d3c4 <__smakebuf_r+0x70>
 801d3ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d3b0:	4630      	mov	r0, r6
 801d3b2:	f000 f81d 	bl	801d3f0 <_isatty_r>
 801d3b6:	b128      	cbz	r0, 801d3c4 <__smakebuf_r+0x70>
 801d3b8:	89a3      	ldrh	r3, [r4, #12]
 801d3ba:	f023 0303 	bic.w	r3, r3, #3
 801d3be:	f043 0301 	orr.w	r3, r3, #1
 801d3c2:	81a3      	strh	r3, [r4, #12]
 801d3c4:	89a3      	ldrh	r3, [r4, #12]
 801d3c6:	431d      	orrs	r5, r3
 801d3c8:	81a5      	strh	r5, [r4, #12]
 801d3ca:	e7cf      	b.n	801d36c <__smakebuf_r+0x18>

0801d3cc <_fstat_r>:
 801d3cc:	b538      	push	{r3, r4, r5, lr}
 801d3ce:	4d07      	ldr	r5, [pc, #28]	@ (801d3ec <_fstat_r+0x20>)
 801d3d0:	2300      	movs	r3, #0
 801d3d2:	4604      	mov	r4, r0
 801d3d4:	4608      	mov	r0, r1
 801d3d6:	4611      	mov	r1, r2
 801d3d8:	602b      	str	r3, [r5, #0]
 801d3da:	f7e5 ffa7 	bl	800332c <_fstat>
 801d3de:	1c43      	adds	r3, r0, #1
 801d3e0:	d102      	bne.n	801d3e8 <_fstat_r+0x1c>
 801d3e2:	682b      	ldr	r3, [r5, #0]
 801d3e4:	b103      	cbz	r3, 801d3e8 <_fstat_r+0x1c>
 801d3e6:	6023      	str	r3, [r4, #0]
 801d3e8:	bd38      	pop	{r3, r4, r5, pc}
 801d3ea:	bf00      	nop
 801d3ec:	2000bddc 	.word	0x2000bddc

0801d3f0 <_isatty_r>:
 801d3f0:	b538      	push	{r3, r4, r5, lr}
 801d3f2:	4d06      	ldr	r5, [pc, #24]	@ (801d40c <_isatty_r+0x1c>)
 801d3f4:	2300      	movs	r3, #0
 801d3f6:	4604      	mov	r4, r0
 801d3f8:	4608      	mov	r0, r1
 801d3fa:	602b      	str	r3, [r5, #0]
 801d3fc:	f7e5 ffa6 	bl	800334c <_isatty>
 801d400:	1c43      	adds	r3, r0, #1
 801d402:	d102      	bne.n	801d40a <_isatty_r+0x1a>
 801d404:	682b      	ldr	r3, [r5, #0]
 801d406:	b103      	cbz	r3, 801d40a <_isatty_r+0x1a>
 801d408:	6023      	str	r3, [r4, #0]
 801d40a:	bd38      	pop	{r3, r4, r5, pc}
 801d40c:	2000bddc 	.word	0x2000bddc

0801d410 <abort>:
 801d410:	b508      	push	{r3, lr}
 801d412:	2006      	movs	r0, #6
 801d414:	f000 f82c 	bl	801d470 <raise>
 801d418:	2001      	movs	r0, #1
 801d41a:	f7e5 ff37 	bl	800328c <_exit>

0801d41e <_raise_r>:
 801d41e:	291f      	cmp	r1, #31
 801d420:	b538      	push	{r3, r4, r5, lr}
 801d422:	4605      	mov	r5, r0
 801d424:	460c      	mov	r4, r1
 801d426:	d904      	bls.n	801d432 <_raise_r+0x14>
 801d428:	2316      	movs	r3, #22
 801d42a:	6003      	str	r3, [r0, #0]
 801d42c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d430:	bd38      	pop	{r3, r4, r5, pc}
 801d432:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d434:	b112      	cbz	r2, 801d43c <_raise_r+0x1e>
 801d436:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d43a:	b94b      	cbnz	r3, 801d450 <_raise_r+0x32>
 801d43c:	4628      	mov	r0, r5
 801d43e:	f000 f831 	bl	801d4a4 <_getpid_r>
 801d442:	4622      	mov	r2, r4
 801d444:	4601      	mov	r1, r0
 801d446:	4628      	mov	r0, r5
 801d448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d44c:	f000 b818 	b.w	801d480 <_kill_r>
 801d450:	2b01      	cmp	r3, #1
 801d452:	d00a      	beq.n	801d46a <_raise_r+0x4c>
 801d454:	1c59      	adds	r1, r3, #1
 801d456:	d103      	bne.n	801d460 <_raise_r+0x42>
 801d458:	2316      	movs	r3, #22
 801d45a:	6003      	str	r3, [r0, #0]
 801d45c:	2001      	movs	r0, #1
 801d45e:	e7e7      	b.n	801d430 <_raise_r+0x12>
 801d460:	2100      	movs	r1, #0
 801d462:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d466:	4620      	mov	r0, r4
 801d468:	4798      	blx	r3
 801d46a:	2000      	movs	r0, #0
 801d46c:	e7e0      	b.n	801d430 <_raise_r+0x12>
	...

0801d470 <raise>:
 801d470:	4b02      	ldr	r3, [pc, #8]	@ (801d47c <raise+0xc>)
 801d472:	4601      	mov	r1, r0
 801d474:	6818      	ldr	r0, [r3, #0]
 801d476:	f7ff bfd2 	b.w	801d41e <_raise_r>
 801d47a:	bf00      	nop
 801d47c:	200009c0 	.word	0x200009c0

0801d480 <_kill_r>:
 801d480:	b538      	push	{r3, r4, r5, lr}
 801d482:	4d07      	ldr	r5, [pc, #28]	@ (801d4a0 <_kill_r+0x20>)
 801d484:	2300      	movs	r3, #0
 801d486:	4604      	mov	r4, r0
 801d488:	4608      	mov	r0, r1
 801d48a:	4611      	mov	r1, r2
 801d48c:	602b      	str	r3, [r5, #0]
 801d48e:	f7e5 feed 	bl	800326c <_kill>
 801d492:	1c43      	adds	r3, r0, #1
 801d494:	d102      	bne.n	801d49c <_kill_r+0x1c>
 801d496:	682b      	ldr	r3, [r5, #0]
 801d498:	b103      	cbz	r3, 801d49c <_kill_r+0x1c>
 801d49a:	6023      	str	r3, [r4, #0]
 801d49c:	bd38      	pop	{r3, r4, r5, pc}
 801d49e:	bf00      	nop
 801d4a0:	2000bddc 	.word	0x2000bddc

0801d4a4 <_getpid_r>:
 801d4a4:	f7e5 beda 	b.w	800325c <_getpid>

0801d4a8 <atan2>:
 801d4a8:	f000 baaa 	b.w	801da00 <__ieee754_atan2>

0801d4ac <sqrt>:
 801d4ac:	b538      	push	{r3, r4, r5, lr}
 801d4ae:	ed2d 8b02 	vpush	{d8}
 801d4b2:	ec55 4b10 	vmov	r4, r5, d0
 801d4b6:	f000 f9c7 	bl	801d848 <__ieee754_sqrt>
 801d4ba:	4622      	mov	r2, r4
 801d4bc:	462b      	mov	r3, r5
 801d4be:	4620      	mov	r0, r4
 801d4c0:	4629      	mov	r1, r5
 801d4c2:	eeb0 8a40 	vmov.f32	s16, s0
 801d4c6:	eef0 8a60 	vmov.f32	s17, s1
 801d4ca:	f7e3 fb67 	bl	8000b9c <__aeabi_dcmpun>
 801d4ce:	b990      	cbnz	r0, 801d4f6 <sqrt+0x4a>
 801d4d0:	2200      	movs	r2, #0
 801d4d2:	2300      	movs	r3, #0
 801d4d4:	4620      	mov	r0, r4
 801d4d6:	4629      	mov	r1, r5
 801d4d8:	f7e3 fb38 	bl	8000b4c <__aeabi_dcmplt>
 801d4dc:	b158      	cbz	r0, 801d4f6 <sqrt+0x4a>
 801d4de:	f7ff f96d 	bl	801c7bc <__errno>
 801d4e2:	2321      	movs	r3, #33	@ 0x21
 801d4e4:	6003      	str	r3, [r0, #0]
 801d4e6:	2200      	movs	r2, #0
 801d4e8:	2300      	movs	r3, #0
 801d4ea:	4610      	mov	r0, r2
 801d4ec:	4619      	mov	r1, r3
 801d4ee:	f7e3 f9e5 	bl	80008bc <__aeabi_ddiv>
 801d4f2:	ec41 0b18 	vmov	d8, r0, r1
 801d4f6:	eeb0 0a48 	vmov.f32	s0, s16
 801d4fa:	eef0 0a68 	vmov.f32	s1, s17
 801d4fe:	ecbd 8b02 	vpop	{d8}
 801d502:	bd38      	pop	{r3, r4, r5, pc}
 801d504:	0000      	movs	r0, r0
	...

0801d508 <atan>:
 801d508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d50c:	ec55 4b10 	vmov	r4, r5, d0
 801d510:	4bbf      	ldr	r3, [pc, #764]	@ (801d810 <atan+0x308>)
 801d512:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801d516:	429e      	cmp	r6, r3
 801d518:	46ab      	mov	fp, r5
 801d51a:	d918      	bls.n	801d54e <atan+0x46>
 801d51c:	4bbd      	ldr	r3, [pc, #756]	@ (801d814 <atan+0x30c>)
 801d51e:	429e      	cmp	r6, r3
 801d520:	d801      	bhi.n	801d526 <atan+0x1e>
 801d522:	d109      	bne.n	801d538 <atan+0x30>
 801d524:	b144      	cbz	r4, 801d538 <atan+0x30>
 801d526:	4622      	mov	r2, r4
 801d528:	462b      	mov	r3, r5
 801d52a:	4620      	mov	r0, r4
 801d52c:	4629      	mov	r1, r5
 801d52e:	f7e2 fee5 	bl	80002fc <__adddf3>
 801d532:	4604      	mov	r4, r0
 801d534:	460d      	mov	r5, r1
 801d536:	e006      	b.n	801d546 <atan+0x3e>
 801d538:	f1bb 0f00 	cmp.w	fp, #0
 801d53c:	f340 812b 	ble.w	801d796 <atan+0x28e>
 801d540:	a597      	add	r5, pc, #604	@ (adr r5, 801d7a0 <atan+0x298>)
 801d542:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d546:	ec45 4b10 	vmov	d0, r4, r5
 801d54a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d54e:	4bb2      	ldr	r3, [pc, #712]	@ (801d818 <atan+0x310>)
 801d550:	429e      	cmp	r6, r3
 801d552:	d813      	bhi.n	801d57c <atan+0x74>
 801d554:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801d558:	429e      	cmp	r6, r3
 801d55a:	d80c      	bhi.n	801d576 <atan+0x6e>
 801d55c:	a392      	add	r3, pc, #584	@ (adr r3, 801d7a8 <atan+0x2a0>)
 801d55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d562:	4620      	mov	r0, r4
 801d564:	4629      	mov	r1, r5
 801d566:	f7e2 fec9 	bl	80002fc <__adddf3>
 801d56a:	4bac      	ldr	r3, [pc, #688]	@ (801d81c <atan+0x314>)
 801d56c:	2200      	movs	r2, #0
 801d56e:	f7e3 fb0b 	bl	8000b88 <__aeabi_dcmpgt>
 801d572:	2800      	cmp	r0, #0
 801d574:	d1e7      	bne.n	801d546 <atan+0x3e>
 801d576:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801d57a:	e029      	b.n	801d5d0 <atan+0xc8>
 801d57c:	f000 f95c 	bl	801d838 <fabs>
 801d580:	4ba7      	ldr	r3, [pc, #668]	@ (801d820 <atan+0x318>)
 801d582:	429e      	cmp	r6, r3
 801d584:	ec55 4b10 	vmov	r4, r5, d0
 801d588:	f200 80bc 	bhi.w	801d704 <atan+0x1fc>
 801d58c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801d590:	429e      	cmp	r6, r3
 801d592:	f200 809e 	bhi.w	801d6d2 <atan+0x1ca>
 801d596:	4622      	mov	r2, r4
 801d598:	462b      	mov	r3, r5
 801d59a:	4620      	mov	r0, r4
 801d59c:	4629      	mov	r1, r5
 801d59e:	f7e2 fead 	bl	80002fc <__adddf3>
 801d5a2:	4b9e      	ldr	r3, [pc, #632]	@ (801d81c <atan+0x314>)
 801d5a4:	2200      	movs	r2, #0
 801d5a6:	f7e2 fea7 	bl	80002f8 <__aeabi_dsub>
 801d5aa:	2200      	movs	r2, #0
 801d5ac:	4606      	mov	r6, r0
 801d5ae:	460f      	mov	r7, r1
 801d5b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801d5b4:	4620      	mov	r0, r4
 801d5b6:	4629      	mov	r1, r5
 801d5b8:	f7e2 fea0 	bl	80002fc <__adddf3>
 801d5bc:	4602      	mov	r2, r0
 801d5be:	460b      	mov	r3, r1
 801d5c0:	4630      	mov	r0, r6
 801d5c2:	4639      	mov	r1, r7
 801d5c4:	f7e3 f97a 	bl	80008bc <__aeabi_ddiv>
 801d5c8:	f04f 0a00 	mov.w	sl, #0
 801d5cc:	4604      	mov	r4, r0
 801d5ce:	460d      	mov	r5, r1
 801d5d0:	4622      	mov	r2, r4
 801d5d2:	462b      	mov	r3, r5
 801d5d4:	4620      	mov	r0, r4
 801d5d6:	4629      	mov	r1, r5
 801d5d8:	f7e3 f846 	bl	8000668 <__aeabi_dmul>
 801d5dc:	4602      	mov	r2, r0
 801d5de:	460b      	mov	r3, r1
 801d5e0:	4680      	mov	r8, r0
 801d5e2:	4689      	mov	r9, r1
 801d5e4:	f7e3 f840 	bl	8000668 <__aeabi_dmul>
 801d5e8:	a371      	add	r3, pc, #452	@ (adr r3, 801d7b0 <atan+0x2a8>)
 801d5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5ee:	4606      	mov	r6, r0
 801d5f0:	460f      	mov	r7, r1
 801d5f2:	f7e3 f839 	bl	8000668 <__aeabi_dmul>
 801d5f6:	a370      	add	r3, pc, #448	@ (adr r3, 801d7b8 <atan+0x2b0>)
 801d5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5fc:	f7e2 fe7e 	bl	80002fc <__adddf3>
 801d600:	4632      	mov	r2, r6
 801d602:	463b      	mov	r3, r7
 801d604:	f7e3 f830 	bl	8000668 <__aeabi_dmul>
 801d608:	a36d      	add	r3, pc, #436	@ (adr r3, 801d7c0 <atan+0x2b8>)
 801d60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d60e:	f7e2 fe75 	bl	80002fc <__adddf3>
 801d612:	4632      	mov	r2, r6
 801d614:	463b      	mov	r3, r7
 801d616:	f7e3 f827 	bl	8000668 <__aeabi_dmul>
 801d61a:	a36b      	add	r3, pc, #428	@ (adr r3, 801d7c8 <atan+0x2c0>)
 801d61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d620:	f7e2 fe6c 	bl	80002fc <__adddf3>
 801d624:	4632      	mov	r2, r6
 801d626:	463b      	mov	r3, r7
 801d628:	f7e3 f81e 	bl	8000668 <__aeabi_dmul>
 801d62c:	a368      	add	r3, pc, #416	@ (adr r3, 801d7d0 <atan+0x2c8>)
 801d62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d632:	f7e2 fe63 	bl	80002fc <__adddf3>
 801d636:	4632      	mov	r2, r6
 801d638:	463b      	mov	r3, r7
 801d63a:	f7e3 f815 	bl	8000668 <__aeabi_dmul>
 801d63e:	a366      	add	r3, pc, #408	@ (adr r3, 801d7d8 <atan+0x2d0>)
 801d640:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d644:	f7e2 fe5a 	bl	80002fc <__adddf3>
 801d648:	4642      	mov	r2, r8
 801d64a:	464b      	mov	r3, r9
 801d64c:	f7e3 f80c 	bl	8000668 <__aeabi_dmul>
 801d650:	a363      	add	r3, pc, #396	@ (adr r3, 801d7e0 <atan+0x2d8>)
 801d652:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d656:	4680      	mov	r8, r0
 801d658:	4689      	mov	r9, r1
 801d65a:	4630      	mov	r0, r6
 801d65c:	4639      	mov	r1, r7
 801d65e:	f7e3 f803 	bl	8000668 <__aeabi_dmul>
 801d662:	a361      	add	r3, pc, #388	@ (adr r3, 801d7e8 <atan+0x2e0>)
 801d664:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d668:	f7e2 fe46 	bl	80002f8 <__aeabi_dsub>
 801d66c:	4632      	mov	r2, r6
 801d66e:	463b      	mov	r3, r7
 801d670:	f7e2 fffa 	bl	8000668 <__aeabi_dmul>
 801d674:	a35e      	add	r3, pc, #376	@ (adr r3, 801d7f0 <atan+0x2e8>)
 801d676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d67a:	f7e2 fe3d 	bl	80002f8 <__aeabi_dsub>
 801d67e:	4632      	mov	r2, r6
 801d680:	463b      	mov	r3, r7
 801d682:	f7e2 fff1 	bl	8000668 <__aeabi_dmul>
 801d686:	a35c      	add	r3, pc, #368	@ (adr r3, 801d7f8 <atan+0x2f0>)
 801d688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d68c:	f7e2 fe34 	bl	80002f8 <__aeabi_dsub>
 801d690:	4632      	mov	r2, r6
 801d692:	463b      	mov	r3, r7
 801d694:	f7e2 ffe8 	bl	8000668 <__aeabi_dmul>
 801d698:	a359      	add	r3, pc, #356	@ (adr r3, 801d800 <atan+0x2f8>)
 801d69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d69e:	f7e2 fe2b 	bl	80002f8 <__aeabi_dsub>
 801d6a2:	4632      	mov	r2, r6
 801d6a4:	463b      	mov	r3, r7
 801d6a6:	f7e2 ffdf 	bl	8000668 <__aeabi_dmul>
 801d6aa:	4602      	mov	r2, r0
 801d6ac:	460b      	mov	r3, r1
 801d6ae:	4640      	mov	r0, r8
 801d6b0:	4649      	mov	r1, r9
 801d6b2:	f7e2 fe23 	bl	80002fc <__adddf3>
 801d6b6:	4622      	mov	r2, r4
 801d6b8:	462b      	mov	r3, r5
 801d6ba:	f7e2 ffd5 	bl	8000668 <__aeabi_dmul>
 801d6be:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801d6c2:	4602      	mov	r2, r0
 801d6c4:	460b      	mov	r3, r1
 801d6c6:	d148      	bne.n	801d75a <atan+0x252>
 801d6c8:	4620      	mov	r0, r4
 801d6ca:	4629      	mov	r1, r5
 801d6cc:	f7e2 fe14 	bl	80002f8 <__aeabi_dsub>
 801d6d0:	e72f      	b.n	801d532 <atan+0x2a>
 801d6d2:	4b52      	ldr	r3, [pc, #328]	@ (801d81c <atan+0x314>)
 801d6d4:	2200      	movs	r2, #0
 801d6d6:	4620      	mov	r0, r4
 801d6d8:	4629      	mov	r1, r5
 801d6da:	f7e2 fe0d 	bl	80002f8 <__aeabi_dsub>
 801d6de:	4b4f      	ldr	r3, [pc, #316]	@ (801d81c <atan+0x314>)
 801d6e0:	4606      	mov	r6, r0
 801d6e2:	460f      	mov	r7, r1
 801d6e4:	2200      	movs	r2, #0
 801d6e6:	4620      	mov	r0, r4
 801d6e8:	4629      	mov	r1, r5
 801d6ea:	f7e2 fe07 	bl	80002fc <__adddf3>
 801d6ee:	4602      	mov	r2, r0
 801d6f0:	460b      	mov	r3, r1
 801d6f2:	4630      	mov	r0, r6
 801d6f4:	4639      	mov	r1, r7
 801d6f6:	f7e3 f8e1 	bl	80008bc <__aeabi_ddiv>
 801d6fa:	f04f 0a01 	mov.w	sl, #1
 801d6fe:	4604      	mov	r4, r0
 801d700:	460d      	mov	r5, r1
 801d702:	e765      	b.n	801d5d0 <atan+0xc8>
 801d704:	4b47      	ldr	r3, [pc, #284]	@ (801d824 <atan+0x31c>)
 801d706:	429e      	cmp	r6, r3
 801d708:	d21c      	bcs.n	801d744 <atan+0x23c>
 801d70a:	4b47      	ldr	r3, [pc, #284]	@ (801d828 <atan+0x320>)
 801d70c:	2200      	movs	r2, #0
 801d70e:	4620      	mov	r0, r4
 801d710:	4629      	mov	r1, r5
 801d712:	f7e2 fdf1 	bl	80002f8 <__aeabi_dsub>
 801d716:	4b44      	ldr	r3, [pc, #272]	@ (801d828 <atan+0x320>)
 801d718:	4606      	mov	r6, r0
 801d71a:	460f      	mov	r7, r1
 801d71c:	2200      	movs	r2, #0
 801d71e:	4620      	mov	r0, r4
 801d720:	4629      	mov	r1, r5
 801d722:	f7e2 ffa1 	bl	8000668 <__aeabi_dmul>
 801d726:	4b3d      	ldr	r3, [pc, #244]	@ (801d81c <atan+0x314>)
 801d728:	2200      	movs	r2, #0
 801d72a:	f7e2 fde7 	bl	80002fc <__adddf3>
 801d72e:	4602      	mov	r2, r0
 801d730:	460b      	mov	r3, r1
 801d732:	4630      	mov	r0, r6
 801d734:	4639      	mov	r1, r7
 801d736:	f7e3 f8c1 	bl	80008bc <__aeabi_ddiv>
 801d73a:	f04f 0a02 	mov.w	sl, #2
 801d73e:	4604      	mov	r4, r0
 801d740:	460d      	mov	r5, r1
 801d742:	e745      	b.n	801d5d0 <atan+0xc8>
 801d744:	4622      	mov	r2, r4
 801d746:	462b      	mov	r3, r5
 801d748:	4938      	ldr	r1, [pc, #224]	@ (801d82c <atan+0x324>)
 801d74a:	2000      	movs	r0, #0
 801d74c:	f7e3 f8b6 	bl	80008bc <__aeabi_ddiv>
 801d750:	f04f 0a03 	mov.w	sl, #3
 801d754:	4604      	mov	r4, r0
 801d756:	460d      	mov	r5, r1
 801d758:	e73a      	b.n	801d5d0 <atan+0xc8>
 801d75a:	4b35      	ldr	r3, [pc, #212]	@ (801d830 <atan+0x328>)
 801d75c:	4e35      	ldr	r6, [pc, #212]	@ (801d834 <atan+0x32c>)
 801d75e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d762:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d766:	f7e2 fdc7 	bl	80002f8 <__aeabi_dsub>
 801d76a:	4622      	mov	r2, r4
 801d76c:	462b      	mov	r3, r5
 801d76e:	f7e2 fdc3 	bl	80002f8 <__aeabi_dsub>
 801d772:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801d776:	4602      	mov	r2, r0
 801d778:	460b      	mov	r3, r1
 801d77a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801d77e:	f7e2 fdbb 	bl	80002f8 <__aeabi_dsub>
 801d782:	f1bb 0f00 	cmp.w	fp, #0
 801d786:	4604      	mov	r4, r0
 801d788:	460d      	mov	r5, r1
 801d78a:	f6bf aedc 	bge.w	801d546 <atan+0x3e>
 801d78e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d792:	461d      	mov	r5, r3
 801d794:	e6d7      	b.n	801d546 <atan+0x3e>
 801d796:	a51c      	add	r5, pc, #112	@ (adr r5, 801d808 <atan+0x300>)
 801d798:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d79c:	e6d3      	b.n	801d546 <atan+0x3e>
 801d79e:	bf00      	nop
 801d7a0:	54442d18 	.word	0x54442d18
 801d7a4:	3ff921fb 	.word	0x3ff921fb
 801d7a8:	8800759c 	.word	0x8800759c
 801d7ac:	7e37e43c 	.word	0x7e37e43c
 801d7b0:	e322da11 	.word	0xe322da11
 801d7b4:	3f90ad3a 	.word	0x3f90ad3a
 801d7b8:	24760deb 	.word	0x24760deb
 801d7bc:	3fa97b4b 	.word	0x3fa97b4b
 801d7c0:	a0d03d51 	.word	0xa0d03d51
 801d7c4:	3fb10d66 	.word	0x3fb10d66
 801d7c8:	c54c206e 	.word	0xc54c206e
 801d7cc:	3fb745cd 	.word	0x3fb745cd
 801d7d0:	920083ff 	.word	0x920083ff
 801d7d4:	3fc24924 	.word	0x3fc24924
 801d7d8:	5555550d 	.word	0x5555550d
 801d7dc:	3fd55555 	.word	0x3fd55555
 801d7e0:	2c6a6c2f 	.word	0x2c6a6c2f
 801d7e4:	bfa2b444 	.word	0xbfa2b444
 801d7e8:	52defd9a 	.word	0x52defd9a
 801d7ec:	3fadde2d 	.word	0x3fadde2d
 801d7f0:	af749a6d 	.word	0xaf749a6d
 801d7f4:	3fb3b0f2 	.word	0x3fb3b0f2
 801d7f8:	fe231671 	.word	0xfe231671
 801d7fc:	3fbc71c6 	.word	0x3fbc71c6
 801d800:	9998ebc4 	.word	0x9998ebc4
 801d804:	3fc99999 	.word	0x3fc99999
 801d808:	54442d18 	.word	0x54442d18
 801d80c:	bff921fb 	.word	0xbff921fb
 801d810:	440fffff 	.word	0x440fffff
 801d814:	7ff00000 	.word	0x7ff00000
 801d818:	3fdbffff 	.word	0x3fdbffff
 801d81c:	3ff00000 	.word	0x3ff00000
 801d820:	3ff2ffff 	.word	0x3ff2ffff
 801d824:	40038000 	.word	0x40038000
 801d828:	3ff80000 	.word	0x3ff80000
 801d82c:	bff00000 	.word	0xbff00000
 801d830:	0801f5b8 	.word	0x0801f5b8
 801d834:	0801f5d8 	.word	0x0801f5d8

0801d838 <fabs>:
 801d838:	ec51 0b10 	vmov	r0, r1, d0
 801d83c:	4602      	mov	r2, r0
 801d83e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801d842:	ec43 2b10 	vmov	d0, r2, r3
 801d846:	4770      	bx	lr

0801d848 <__ieee754_sqrt>:
 801d848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d84c:	4a68      	ldr	r2, [pc, #416]	@ (801d9f0 <__ieee754_sqrt+0x1a8>)
 801d84e:	ec55 4b10 	vmov	r4, r5, d0
 801d852:	43aa      	bics	r2, r5
 801d854:	462b      	mov	r3, r5
 801d856:	4621      	mov	r1, r4
 801d858:	d110      	bne.n	801d87c <__ieee754_sqrt+0x34>
 801d85a:	4622      	mov	r2, r4
 801d85c:	4620      	mov	r0, r4
 801d85e:	4629      	mov	r1, r5
 801d860:	f7e2 ff02 	bl	8000668 <__aeabi_dmul>
 801d864:	4602      	mov	r2, r0
 801d866:	460b      	mov	r3, r1
 801d868:	4620      	mov	r0, r4
 801d86a:	4629      	mov	r1, r5
 801d86c:	f7e2 fd46 	bl	80002fc <__adddf3>
 801d870:	4604      	mov	r4, r0
 801d872:	460d      	mov	r5, r1
 801d874:	ec45 4b10 	vmov	d0, r4, r5
 801d878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d87c:	2d00      	cmp	r5, #0
 801d87e:	dc0e      	bgt.n	801d89e <__ieee754_sqrt+0x56>
 801d880:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801d884:	4322      	orrs	r2, r4
 801d886:	d0f5      	beq.n	801d874 <__ieee754_sqrt+0x2c>
 801d888:	b19d      	cbz	r5, 801d8b2 <__ieee754_sqrt+0x6a>
 801d88a:	4622      	mov	r2, r4
 801d88c:	4620      	mov	r0, r4
 801d88e:	4629      	mov	r1, r5
 801d890:	f7e2 fd32 	bl	80002f8 <__aeabi_dsub>
 801d894:	4602      	mov	r2, r0
 801d896:	460b      	mov	r3, r1
 801d898:	f7e3 f810 	bl	80008bc <__aeabi_ddiv>
 801d89c:	e7e8      	b.n	801d870 <__ieee754_sqrt+0x28>
 801d89e:	152a      	asrs	r2, r5, #20
 801d8a0:	d115      	bne.n	801d8ce <__ieee754_sqrt+0x86>
 801d8a2:	2000      	movs	r0, #0
 801d8a4:	e009      	b.n	801d8ba <__ieee754_sqrt+0x72>
 801d8a6:	0acb      	lsrs	r3, r1, #11
 801d8a8:	3a15      	subs	r2, #21
 801d8aa:	0549      	lsls	r1, r1, #21
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	d0fa      	beq.n	801d8a6 <__ieee754_sqrt+0x5e>
 801d8b0:	e7f7      	b.n	801d8a2 <__ieee754_sqrt+0x5a>
 801d8b2:	462a      	mov	r2, r5
 801d8b4:	e7fa      	b.n	801d8ac <__ieee754_sqrt+0x64>
 801d8b6:	005b      	lsls	r3, r3, #1
 801d8b8:	3001      	adds	r0, #1
 801d8ba:	02dc      	lsls	r4, r3, #11
 801d8bc:	d5fb      	bpl.n	801d8b6 <__ieee754_sqrt+0x6e>
 801d8be:	1e44      	subs	r4, r0, #1
 801d8c0:	1b12      	subs	r2, r2, r4
 801d8c2:	f1c0 0420 	rsb	r4, r0, #32
 801d8c6:	fa21 f404 	lsr.w	r4, r1, r4
 801d8ca:	4323      	orrs	r3, r4
 801d8cc:	4081      	lsls	r1, r0
 801d8ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d8d2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801d8d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d8da:	07d2      	lsls	r2, r2, #31
 801d8dc:	bf5c      	itt	pl
 801d8de:	005b      	lslpl	r3, r3, #1
 801d8e0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801d8e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d8e8:	bf58      	it	pl
 801d8ea:	0049      	lslpl	r1, r1, #1
 801d8ec:	2600      	movs	r6, #0
 801d8ee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801d8f2:	106d      	asrs	r5, r5, #1
 801d8f4:	0049      	lsls	r1, r1, #1
 801d8f6:	2016      	movs	r0, #22
 801d8f8:	4632      	mov	r2, r6
 801d8fa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801d8fe:	1917      	adds	r7, r2, r4
 801d900:	429f      	cmp	r7, r3
 801d902:	bfde      	ittt	le
 801d904:	193a      	addle	r2, r7, r4
 801d906:	1bdb      	suble	r3, r3, r7
 801d908:	1936      	addle	r6, r6, r4
 801d90a:	0fcf      	lsrs	r7, r1, #31
 801d90c:	3801      	subs	r0, #1
 801d90e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801d912:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d916:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801d91a:	d1f0      	bne.n	801d8fe <__ieee754_sqrt+0xb6>
 801d91c:	4604      	mov	r4, r0
 801d91e:	2720      	movs	r7, #32
 801d920:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801d924:	429a      	cmp	r2, r3
 801d926:	eb00 0e0c 	add.w	lr, r0, ip
 801d92a:	db02      	blt.n	801d932 <__ieee754_sqrt+0xea>
 801d92c:	d113      	bne.n	801d956 <__ieee754_sqrt+0x10e>
 801d92e:	458e      	cmp	lr, r1
 801d930:	d811      	bhi.n	801d956 <__ieee754_sqrt+0x10e>
 801d932:	f1be 0f00 	cmp.w	lr, #0
 801d936:	eb0e 000c 	add.w	r0, lr, ip
 801d93a:	da42      	bge.n	801d9c2 <__ieee754_sqrt+0x17a>
 801d93c:	2800      	cmp	r0, #0
 801d93e:	db40      	blt.n	801d9c2 <__ieee754_sqrt+0x17a>
 801d940:	f102 0801 	add.w	r8, r2, #1
 801d944:	1a9b      	subs	r3, r3, r2
 801d946:	458e      	cmp	lr, r1
 801d948:	bf88      	it	hi
 801d94a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801d94e:	eba1 010e 	sub.w	r1, r1, lr
 801d952:	4464      	add	r4, ip
 801d954:	4642      	mov	r2, r8
 801d956:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801d95a:	3f01      	subs	r7, #1
 801d95c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801d960:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d964:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801d968:	d1dc      	bne.n	801d924 <__ieee754_sqrt+0xdc>
 801d96a:	4319      	orrs	r1, r3
 801d96c:	d01b      	beq.n	801d9a6 <__ieee754_sqrt+0x15e>
 801d96e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801d9f4 <__ieee754_sqrt+0x1ac>
 801d972:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801d9f8 <__ieee754_sqrt+0x1b0>
 801d976:	e9da 0100 	ldrd	r0, r1, [sl]
 801d97a:	e9db 2300 	ldrd	r2, r3, [fp]
 801d97e:	f7e2 fcbb 	bl	80002f8 <__aeabi_dsub>
 801d982:	e9da 8900 	ldrd	r8, r9, [sl]
 801d986:	4602      	mov	r2, r0
 801d988:	460b      	mov	r3, r1
 801d98a:	4640      	mov	r0, r8
 801d98c:	4649      	mov	r1, r9
 801d98e:	f7e3 f8e7 	bl	8000b60 <__aeabi_dcmple>
 801d992:	b140      	cbz	r0, 801d9a6 <__ieee754_sqrt+0x15e>
 801d994:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801d998:	e9da 0100 	ldrd	r0, r1, [sl]
 801d99c:	e9db 2300 	ldrd	r2, r3, [fp]
 801d9a0:	d111      	bne.n	801d9c6 <__ieee754_sqrt+0x17e>
 801d9a2:	3601      	adds	r6, #1
 801d9a4:	463c      	mov	r4, r7
 801d9a6:	1072      	asrs	r2, r6, #1
 801d9a8:	0863      	lsrs	r3, r4, #1
 801d9aa:	07f1      	lsls	r1, r6, #31
 801d9ac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801d9b0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801d9b4:	bf48      	it	mi
 801d9b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801d9ba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801d9be:	4618      	mov	r0, r3
 801d9c0:	e756      	b.n	801d870 <__ieee754_sqrt+0x28>
 801d9c2:	4690      	mov	r8, r2
 801d9c4:	e7be      	b.n	801d944 <__ieee754_sqrt+0xfc>
 801d9c6:	f7e2 fc99 	bl	80002fc <__adddf3>
 801d9ca:	e9da 8900 	ldrd	r8, r9, [sl]
 801d9ce:	4602      	mov	r2, r0
 801d9d0:	460b      	mov	r3, r1
 801d9d2:	4640      	mov	r0, r8
 801d9d4:	4649      	mov	r1, r9
 801d9d6:	f7e3 f8b9 	bl	8000b4c <__aeabi_dcmplt>
 801d9da:	b120      	cbz	r0, 801d9e6 <__ieee754_sqrt+0x19e>
 801d9dc:	1ca0      	adds	r0, r4, #2
 801d9de:	bf08      	it	eq
 801d9e0:	3601      	addeq	r6, #1
 801d9e2:	3402      	adds	r4, #2
 801d9e4:	e7df      	b.n	801d9a6 <__ieee754_sqrt+0x15e>
 801d9e6:	1c63      	adds	r3, r4, #1
 801d9e8:	f023 0401 	bic.w	r4, r3, #1
 801d9ec:	e7db      	b.n	801d9a6 <__ieee754_sqrt+0x15e>
 801d9ee:	bf00      	nop
 801d9f0:	7ff00000 	.word	0x7ff00000
 801d9f4:	20000a18 	.word	0x20000a18
 801d9f8:	20000a10 	.word	0x20000a10
 801d9fc:	00000000 	.word	0x00000000

0801da00 <__ieee754_atan2>:
 801da00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801da04:	ec57 6b11 	vmov	r6, r7, d1
 801da08:	4273      	negs	r3, r6
 801da0a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801db88 <__ieee754_atan2+0x188>
 801da0e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801da12:	4333      	orrs	r3, r6
 801da14:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801da18:	4543      	cmp	r3, r8
 801da1a:	ec51 0b10 	vmov	r0, r1, d0
 801da1e:	4635      	mov	r5, r6
 801da20:	d809      	bhi.n	801da36 <__ieee754_atan2+0x36>
 801da22:	4244      	negs	r4, r0
 801da24:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801da28:	4304      	orrs	r4, r0
 801da2a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801da2e:	4544      	cmp	r4, r8
 801da30:	468e      	mov	lr, r1
 801da32:	4681      	mov	r9, r0
 801da34:	d907      	bls.n	801da46 <__ieee754_atan2+0x46>
 801da36:	4632      	mov	r2, r6
 801da38:	463b      	mov	r3, r7
 801da3a:	f7e2 fc5f 	bl	80002fc <__adddf3>
 801da3e:	ec41 0b10 	vmov	d0, r0, r1
 801da42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801da46:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801da4a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801da4e:	4334      	orrs	r4, r6
 801da50:	d103      	bne.n	801da5a <__ieee754_atan2+0x5a>
 801da52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801da56:	f7ff bd57 	b.w	801d508 <atan>
 801da5a:	17bc      	asrs	r4, r7, #30
 801da5c:	f004 0402 	and.w	r4, r4, #2
 801da60:	ea53 0909 	orrs.w	r9, r3, r9
 801da64:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801da68:	d107      	bne.n	801da7a <__ieee754_atan2+0x7a>
 801da6a:	2c02      	cmp	r4, #2
 801da6c:	d05f      	beq.n	801db2e <__ieee754_atan2+0x12e>
 801da6e:	2c03      	cmp	r4, #3
 801da70:	d1e5      	bne.n	801da3e <__ieee754_atan2+0x3e>
 801da72:	a141      	add	r1, pc, #260	@ (adr r1, 801db78 <__ieee754_atan2+0x178>)
 801da74:	e9d1 0100 	ldrd	r0, r1, [r1]
 801da78:	e7e1      	b.n	801da3e <__ieee754_atan2+0x3e>
 801da7a:	4315      	orrs	r5, r2
 801da7c:	d106      	bne.n	801da8c <__ieee754_atan2+0x8c>
 801da7e:	f1be 0f00 	cmp.w	lr, #0
 801da82:	da5f      	bge.n	801db44 <__ieee754_atan2+0x144>
 801da84:	a13e      	add	r1, pc, #248	@ (adr r1, 801db80 <__ieee754_atan2+0x180>)
 801da86:	e9d1 0100 	ldrd	r0, r1, [r1]
 801da8a:	e7d8      	b.n	801da3e <__ieee754_atan2+0x3e>
 801da8c:	4542      	cmp	r2, r8
 801da8e:	d10f      	bne.n	801dab0 <__ieee754_atan2+0xb0>
 801da90:	4293      	cmp	r3, r2
 801da92:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801da96:	d107      	bne.n	801daa8 <__ieee754_atan2+0xa8>
 801da98:	2c02      	cmp	r4, #2
 801da9a:	d84c      	bhi.n	801db36 <__ieee754_atan2+0x136>
 801da9c:	4b34      	ldr	r3, [pc, #208]	@ (801db70 <__ieee754_atan2+0x170>)
 801da9e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801daa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801daa6:	e7ca      	b.n	801da3e <__ieee754_atan2+0x3e>
 801daa8:	2c02      	cmp	r4, #2
 801daaa:	d848      	bhi.n	801db3e <__ieee754_atan2+0x13e>
 801daac:	4b31      	ldr	r3, [pc, #196]	@ (801db74 <__ieee754_atan2+0x174>)
 801daae:	e7f6      	b.n	801da9e <__ieee754_atan2+0x9e>
 801dab0:	4543      	cmp	r3, r8
 801dab2:	d0e4      	beq.n	801da7e <__ieee754_atan2+0x7e>
 801dab4:	1a9b      	subs	r3, r3, r2
 801dab6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801daba:	ea4f 5223 	mov.w	r2, r3, asr #20
 801dabe:	da1e      	bge.n	801dafe <__ieee754_atan2+0xfe>
 801dac0:	2f00      	cmp	r7, #0
 801dac2:	da01      	bge.n	801dac8 <__ieee754_atan2+0xc8>
 801dac4:	323c      	adds	r2, #60	@ 0x3c
 801dac6:	db1e      	blt.n	801db06 <__ieee754_atan2+0x106>
 801dac8:	4632      	mov	r2, r6
 801daca:	463b      	mov	r3, r7
 801dacc:	f7e2 fef6 	bl	80008bc <__aeabi_ddiv>
 801dad0:	ec41 0b10 	vmov	d0, r0, r1
 801dad4:	f7ff feb0 	bl	801d838 <fabs>
 801dad8:	f7ff fd16 	bl	801d508 <atan>
 801dadc:	ec51 0b10 	vmov	r0, r1, d0
 801dae0:	2c01      	cmp	r4, #1
 801dae2:	d013      	beq.n	801db0c <__ieee754_atan2+0x10c>
 801dae4:	2c02      	cmp	r4, #2
 801dae6:	d015      	beq.n	801db14 <__ieee754_atan2+0x114>
 801dae8:	2c00      	cmp	r4, #0
 801daea:	d0a8      	beq.n	801da3e <__ieee754_atan2+0x3e>
 801daec:	a318      	add	r3, pc, #96	@ (adr r3, 801db50 <__ieee754_atan2+0x150>)
 801daee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801daf2:	f7e2 fc01 	bl	80002f8 <__aeabi_dsub>
 801daf6:	a318      	add	r3, pc, #96	@ (adr r3, 801db58 <__ieee754_atan2+0x158>)
 801daf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dafc:	e014      	b.n	801db28 <__ieee754_atan2+0x128>
 801dafe:	a118      	add	r1, pc, #96	@ (adr r1, 801db60 <__ieee754_atan2+0x160>)
 801db00:	e9d1 0100 	ldrd	r0, r1, [r1]
 801db04:	e7ec      	b.n	801dae0 <__ieee754_atan2+0xe0>
 801db06:	2000      	movs	r0, #0
 801db08:	2100      	movs	r1, #0
 801db0a:	e7e9      	b.n	801dae0 <__ieee754_atan2+0xe0>
 801db0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801db10:	4619      	mov	r1, r3
 801db12:	e794      	b.n	801da3e <__ieee754_atan2+0x3e>
 801db14:	a30e      	add	r3, pc, #56	@ (adr r3, 801db50 <__ieee754_atan2+0x150>)
 801db16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db1a:	f7e2 fbed 	bl	80002f8 <__aeabi_dsub>
 801db1e:	4602      	mov	r2, r0
 801db20:	460b      	mov	r3, r1
 801db22:	a10d      	add	r1, pc, #52	@ (adr r1, 801db58 <__ieee754_atan2+0x158>)
 801db24:	e9d1 0100 	ldrd	r0, r1, [r1]
 801db28:	f7e2 fbe6 	bl	80002f8 <__aeabi_dsub>
 801db2c:	e787      	b.n	801da3e <__ieee754_atan2+0x3e>
 801db2e:	a10a      	add	r1, pc, #40	@ (adr r1, 801db58 <__ieee754_atan2+0x158>)
 801db30:	e9d1 0100 	ldrd	r0, r1, [r1]
 801db34:	e783      	b.n	801da3e <__ieee754_atan2+0x3e>
 801db36:	a10c      	add	r1, pc, #48	@ (adr r1, 801db68 <__ieee754_atan2+0x168>)
 801db38:	e9d1 0100 	ldrd	r0, r1, [r1]
 801db3c:	e77f      	b.n	801da3e <__ieee754_atan2+0x3e>
 801db3e:	2000      	movs	r0, #0
 801db40:	2100      	movs	r1, #0
 801db42:	e77c      	b.n	801da3e <__ieee754_atan2+0x3e>
 801db44:	a106      	add	r1, pc, #24	@ (adr r1, 801db60 <__ieee754_atan2+0x160>)
 801db46:	e9d1 0100 	ldrd	r0, r1, [r1]
 801db4a:	e778      	b.n	801da3e <__ieee754_atan2+0x3e>
 801db4c:	f3af 8000 	nop.w
 801db50:	33145c07 	.word	0x33145c07
 801db54:	3ca1a626 	.word	0x3ca1a626
 801db58:	54442d18 	.word	0x54442d18
 801db5c:	400921fb 	.word	0x400921fb
 801db60:	54442d18 	.word	0x54442d18
 801db64:	3ff921fb 	.word	0x3ff921fb
 801db68:	54442d18 	.word	0x54442d18
 801db6c:	3fe921fb 	.word	0x3fe921fb
 801db70:	0801f610 	.word	0x0801f610
 801db74:	0801f5f8 	.word	0x0801f5f8
 801db78:	54442d18 	.word	0x54442d18
 801db7c:	c00921fb 	.word	0xc00921fb
 801db80:	54442d18 	.word	0x54442d18
 801db84:	bff921fb 	.word	0xbff921fb
 801db88:	7ff00000 	.word	0x7ff00000

0801db8c <_init>:
 801db8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db8e:	bf00      	nop
 801db90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801db92:	bc08      	pop	{r3}
 801db94:	469e      	mov	lr, r3
 801db96:	4770      	bx	lr

0801db98 <_fini>:
 801db98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db9a:	bf00      	nop
 801db9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801db9e:	bc08      	pop	{r3}
 801dba0:	469e      	mov	lr, r3
 801dba2:	4770      	bx	lr
