
G474RE-MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a384  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001570  0801a568  0801a568  0001b568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bad8  0801bad8  0001d7d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801bad8  0801bad8  0001cad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bae0  0801bae0  0001d7d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801bae0  0801bae0  0001cae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801baec  0801baec  0001caec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000007d0  20000000  0801baf0  0001d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b01c  200007d0  0801c2c0  0001d7d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000b7ec  0801c2c0  0001d7ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d7d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027014  00000000  00000000  0001d800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005568  00000000  00000000  00044814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e70  00000000  00000000  00049d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001782  00000000  00000000  0004bbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ddc0  00000000  00000000  0004d372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027dc2  00000000  00000000  0007b132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011685a  00000000  00000000  000a2ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001b974e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000900c  00000000  00000000  001b97c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001c27d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200007d0 	.word	0x200007d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801a54c 	.word	0x0801a54c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200007d4 	.word	0x200007d4
 800021c:	0801a54c 	.word	0x0801a54c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000be6:	f000 b9b5 	b.w	8000f54 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f84d 	bl	8000c98 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f840 	bl	8000c98 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f82f 	bl	8000c98 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f821 	bl	8000c98 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <timer_callback>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	e9c7 2300 	strd	r2, r3, [r7]

	if (timer != NULL) {
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 80b9 	beq.w	80010de <timer_callback+0x186>
		if (is_calib || on_calib){
 8000f6c:	4b62      	ldr	r3, [pc, #392]	@ (80010f8 <timer_callback+0x1a0>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d104      	bne.n	8000f7e <timer_callback+0x26>
 8000f74:	4b61      	ldr	r3, [pc, #388]	@ (80010fc <timer_callback+0x1a4>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f000 80a7 	beq.w	80010cc <timer_callback+0x174>
			MPU6050_Read_All(&hi2c1, &MPU6050);
 8000f7e:	4960      	ldr	r1, [pc, #384]	@ (8001100 <timer_callback+0x1a8>)
 8000f80:	4860      	ldr	r0, [pc, #384]	@ (8001104 <timer_callback+0x1ac>)
 8000f82:	f006 fa4d 	bl	8007420 <MPU6050_Read_All>

			mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 8000f86:	f00d f943 	bl	800e210 <rmw_uros_epoch_millis>
 8000f8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	f7ff fe19 	bl	8000bc8 <__aeabi_ldivmod>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001108 <timer_callback+0x1b0>)
 8000f9c:	601a      	str	r2, [r3, #0]
			mpu6050_msg.header.stamp.nanosec = rmw_uros_epoch_nanos();
 8000f9e:	f00d f945 	bl	800e22c <rmw_uros_epoch_nanos>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4b58      	ldr	r3, [pc, #352]	@ (8001108 <timer_callback+0x1b0>)
 8000fa8:	605a      	str	r2, [r3, #4]

			mpu6050_msg.linear_acceleration.x = (GRAVITY * MPU6050.Ax) - accl_offset.x;
 8000faa:	4b55      	ldr	r3, [pc, #340]	@ (8001100 <timer_callback+0x1a8>)
 8000fac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000fb0:	a34d      	add	r3, pc, #308	@ (adr r3, 80010e8 <timer_callback+0x190>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	f7ff fb57 	bl	8000668 <__aeabi_dmul>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4b52      	ldr	r3, [pc, #328]	@ (800110c <timer_callback+0x1b4>)
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	f7ff f996 	bl	80002f8 <__aeabi_dsub>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	494d      	ldr	r1, [pc, #308]	@ (8001108 <timer_callback+0x1b0>)
 8000fd2:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
			mpu6050_msg.linear_acceleration.y = (GRAVITY * MPU6050.Ay) - accl_offset.y;
 8000fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8001100 <timer_callback+0x1a8>)
 8000fd8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fdc:	a342      	add	r3, pc, #264	@ (adr r3, 80010e8 <timer_callback+0x190>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff fb41 	bl	8000668 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	4b47      	ldr	r3, [pc, #284]	@ (800110c <timer_callback+0x1b4>)
 8000ff0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ff4:	f7ff f980 	bl	80002f8 <__aeabi_dsub>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4942      	ldr	r1, [pc, #264]	@ (8001108 <timer_callback+0x1b0>)
 8000ffe:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
			mpu6050_msg.linear_acceleration.z = (GRAVITY * MPU6050.Az) - accl_offset.z;
 8001002:	4b3f      	ldr	r3, [pc, #252]	@ (8001100 <timer_callback+0x1a8>)
 8001004:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001008:	a337      	add	r3, pc, #220	@ (adr r3, 80010e8 <timer_callback+0x190>)
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	f7ff fb2b 	bl	8000668 <__aeabi_dmul>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	4b3c      	ldr	r3, [pc, #240]	@ (800110c <timer_callback+0x1b4>)
 800101c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001020:	f7ff f96a 	bl	80002f8 <__aeabi_dsub>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4937      	ldr	r1, [pc, #220]	@ (8001108 <timer_callback+0x1b0>)
 800102a:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

			mpu6050_msg.angular_velocity.x = (DEG_TO_RAD * MPU6050.Gx) - gyro_offset.x;
 800102e:	4b34      	ldr	r3, [pc, #208]	@ (8001100 <timer_callback+0x1a8>)
 8001030:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001034:	a32e      	add	r3, pc, #184	@ (adr r3, 80010f0 <timer_callback+0x198>)
 8001036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103a:	f7ff fb15 	bl	8000668 <__aeabi_dmul>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	4b32      	ldr	r3, [pc, #200]	@ (8001110 <timer_callback+0x1b8>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff f954 	bl	80002f8 <__aeabi_dsub>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	492c      	ldr	r1, [pc, #176]	@ (8001108 <timer_callback+0x1b0>)
 8001056:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
			mpu6050_msg.angular_velocity.y = (DEG_TO_RAD * MPU6050.Gy) - gyro_offset.y;
 800105a:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <timer_callback+0x1a8>)
 800105c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001060:	a323      	add	r3, pc, #140	@ (adr r3, 80010f0 <timer_callback+0x198>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	f7ff faff 	bl	8000668 <__aeabi_dmul>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	4b27      	ldr	r3, [pc, #156]	@ (8001110 <timer_callback+0x1b8>)
 8001074:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001078:	f7ff f93e 	bl	80002f8 <__aeabi_dsub>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4921      	ldr	r1, [pc, #132]	@ (8001108 <timer_callback+0x1b0>)
 8001082:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
			mpu6050_msg.angular_velocity.z = (DEG_TO_RAD * MPU6050.Gz) - gyro_offset.z;
 8001086:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <timer_callback+0x1a8>)
 8001088:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800108c:	a318      	add	r3, pc, #96	@ (adr r3, 80010f0 <timer_callback+0x198>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001092:	f7ff fae9 	bl	8000668 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <timer_callback+0x1b8>)
 80010a0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80010a4:	f7ff f928 	bl	80002f8 <__aeabi_dsub>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4916      	ldr	r1, [pc, #88]	@ (8001108 <timer_callback+0x1b0>)
 80010ae:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

			rcl_ret_t ret = rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL);
 80010b2:	2200      	movs	r2, #0
 80010b4:	4914      	ldr	r1, [pc, #80]	@ (8001108 <timer_callback+0x1b0>)
 80010b6:	4817      	ldr	r0, [pc, #92]	@ (8001114 <timer_callback+0x1bc>)
 80010b8:	f00b f942 	bl	800c340 <rcl_publish>
 80010bc:	6178      	str	r0, [r7, #20]

			if (ret != RCL_RET_OK)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <timer_callback+0x174>
			{
			  printf("Error publishing (line %d)\n", __LINE__);
 80010c4:	218e      	movs	r1, #142	@ 0x8e
 80010c6:	4814      	ldr	r0, [pc, #80]	@ (8001118 <timer_callback+0x1c0>)
 80010c8:	f017 fe46 	bl	8018d58 <iprintf>
			}

		}

	    HAL_IWDG_Refresh(&hiwdg);
 80010cc:	4813      	ldr	r0, [pc, #76]	@ (800111c <timer_callback+0x1c4>)
 80010ce:	f002 ffab 	bl	8004028 <HAL_IWDG_Refresh>
	    cc++;
 80010d2:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <timer_callback+0x1c8>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <timer_callback+0x1c8>)
 80010dc:	801a      	strh	r2, [r3, #0]
	}
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	3a92a305 	.word	0x3a92a305
 80010ec:	40239d01 	.word	0x40239d01
 80010f0:	a2529d39 	.word	0xa2529d39
 80010f4:	3f91df46 	.word	0x3f91df46
 80010f8:	20000b18 	.word	0x20000b18
 80010fc:	20000b19 	.word	0x20000b19
 8001100:	20000a88 	.word	0x20000a88
 8001104:	20004674 	.word	0x20004674
 8001108:	200007f8 	.word	0x200007f8
 800110c:	20000ae8 	.word	0x20000ae8
 8001110:	20000b00 	.word	0x20000b00
 8001114:	200007f4 	.word	0x200007f4
 8001118:	0801a574 	.word	0x0801a574
 800111c:	200046c8 	.word	0x200046c8
 8001120:	20000ae0 	.word	0x20000ae0

08001124 <imu_calib_service_callback>:

void imu_calib_service_callback(const void * request_msg, void * response_msg){
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  // Cast messages to expected types
  imu_interfaces__srv__ImuCalibration_Request * req_in =
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	617b      	str	r3, [r7, #20]
    (imu_interfaces__srv__ImuCalibration_Request *) request_msg;
  imu_interfaces__srv__ImuCalibration_Response * res_in =
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	613b      	str	r3, [r7, #16]
    (imu_interfaces__srv__ImuCalibration_Response *) response_msg;

  size_t accl_size = sizeof(req_in->imu_calib.linear_acceleration_covariance);
 8001136:	2348      	movs	r3, #72	@ 0x48
 8001138:	60fb      	str	r3, [r7, #12]
  size_t gyro_size = sizeof(req_in->imu_calib.angular_velocity_covariance);
 800113a:	2348      	movs	r3, #72	@ 0x48
 800113c:	60bb      	str	r3, [r7, #8]
  memcpy(mpu6050_msg.linear_acceleration_covariance, req_in->imu_calib.linear_acceleration_covariance, accl_size);
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	33f8      	adds	r3, #248	@ 0xf8
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4619      	mov	r1, r3
 8001146:	481e      	ldr	r0, [pc, #120]	@ (80011c0 <imu_calib_service_callback+0x9c>)
 8001148:	f018 f84f 	bl	80191ea <memcpy>
  memcpy(mpu6050_msg.angular_velocity_covariance, req_in->imu_calib.angular_velocity_covariance, gyro_size);
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	3398      	adds	r3, #152	@ 0x98
 8001150:	68ba      	ldr	r2, [r7, #8]
 8001152:	4619      	mov	r1, r3
 8001154:	481b      	ldr	r0, [pc, #108]	@ (80011c4 <imu_calib_service_callback+0xa0>)
 8001156:	f018 f848 	bl	80191ea <memcpy>

  accl_offset.x = req_in->imu_calib.linear_acceleration.x;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8001160:	4919      	ldr	r1, [pc, #100]	@ (80011c8 <imu_calib_service_callback+0xa4>)
 8001162:	e9c1 2300 	strd	r2, r3, [r1]
  accl_offset.y = req_in->imu_calib.linear_acceleration.y;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 800116c:	4916      	ldr	r1, [pc, #88]	@ (80011c8 <imu_calib_service_callback+0xa4>)
 800116e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  accl_offset.z = req_in->imu_calib.linear_acceleration.z;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8001178:	4913      	ldr	r1, [pc, #76]	@ (80011c8 <imu_calib_service_callback+0xa4>)
 800117a:	e9c1 2304 	strd	r2, r3, [r1, #16]

  gyro_offset.x = req_in->imu_calib.angular_velocity.x;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8001184:	4911      	ldr	r1, [pc, #68]	@ (80011cc <imu_calib_service_callback+0xa8>)
 8001186:	e9c1 2300 	strd	r2, r3, [r1]
  gyro_offset.y = req_in->imu_calib.angular_velocity.y;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001190:	490e      	ldr	r1, [pc, #56]	@ (80011cc <imu_calib_service_callback+0xa8>)
 8001192:	e9c1 2302 	strd	r2, r3, [r1, #8]
  gyro_offset.z = req_in->imu_calib.angular_velocity.z;
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800119c:	490b      	ldr	r1, [pc, #44]	@ (80011cc <imu_calib_service_callback+0xa8>)
 800119e:	e9c1 2304 	strd	r2, r3, [r1, #16]

  is_calib = true;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <imu_calib_service_callback+0xac>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
  res_in->success = true;
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011ae:	2120      	movs	r1, #32
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b4:	f002 f88a 	bl	80032cc <HAL_GPIO_TogglePin>

}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200008f0 	.word	0x200008f0
 80011c4:	20000890 	.word	0x20000890
 80011c8:	20000ae8 	.word	0x20000ae8
 80011cc:	20000b00 	.word	0x20000b00
 80011d0:	20000b18 	.word	0x20000b18

080011d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  while (MPU6050_Init(&hi2c1) == 1);
 80011d8:	bf00      	nop
 80011da:	4808      	ldr	r0, [pc, #32]	@ (80011fc <MX_FREERTOS_Init+0x28>)
 80011dc:	f006 f8c6 	bl	800736c <MPU6050_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d0f9      	beq.n	80011da <MX_FREERTOS_Init+0x6>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011e6:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <MX_FREERTOS_Init+0x2c>)
 80011e8:	2100      	movs	r1, #0
 80011ea:	4806      	ldr	r0, [pc, #24]	@ (8001204 <MX_FREERTOS_Init+0x30>)
 80011ec:	f006 fce8 	bl	8007bc0 <osThreadNew>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a05      	ldr	r2, [pc, #20]	@ (8001208 <MX_FREERTOS_Init+0x34>)
 80011f4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20004674 	.word	0x20004674
 8001200:	0801a638 	.word	0x0801a638
 8001204:	0800120d 	.word	0x0800120d
 8001208:	20000b1c 	.word	0x20000b1c

0800120c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800120c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001210:	b0ee      	sub	sp, #440	@ 0x1b8
 8001212:	af02      	add	r7, sp, #8
 8001214:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001218:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800121c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	// micro-ROS configuration

	rmw_uros_set_custom_transport(
 800121e:	4b7e      	ldr	r3, [pc, #504]	@ (8001418 <StartDefaultTask+0x20c>)
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	4b7e      	ldr	r3, [pc, #504]	@ (800141c <StartDefaultTask+0x210>)
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	4b7e      	ldr	r3, [pc, #504]	@ (8001420 <StartDefaultTask+0x214>)
 8001228:	4a7e      	ldr	r2, [pc, #504]	@ (8001424 <StartDefaultTask+0x218>)
 800122a:	497f      	ldr	r1, [pc, #508]	@ (8001428 <StartDefaultTask+0x21c>)
 800122c:	2001      	movs	r0, #1
 800122e:	f00c f913 	bl	800d458 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001232:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8001236:	4618      	mov	r0, r3
 8001238:	f00c f82a 	bl	800d290 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 800123c:	4b7b      	ldr	r3, [pc, #492]	@ (800142c <StartDefaultTask+0x220>)
 800123e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001242:	4b7b      	ldr	r3, [pc, #492]	@ (8001430 <StartDefaultTask+0x224>)
 8001244:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
	freeRTOS_allocator.reallocate = microros_reallocate;
 8001248:	4b7a      	ldr	r3, [pc, #488]	@ (8001434 <StartDefaultTask+0x228>)
 800124a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800124e:	4b7a      	ldr	r3, [pc, #488]	@ (8001438 <StartDefaultTask+0x22c>)
 8001250:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001254:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8001258:	4618      	mov	r0, r3
 800125a:	f00c f827 	bl	800d2ac <rcutils_set_default_allocator>
 800125e:	4603      	mov	r3, r0
 8001260:	f083 0301 	eor.w	r3, r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <StartDefaultTask+0x66>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 800126a:	21fb      	movs	r1, #251	@ 0xfb
 800126c:	4873      	ldr	r0, [pc, #460]	@ (800143c <StartDefaultTask+0x230>)
 800126e:	f017 fd73 	bl	8018d58 <iprintf>
	}

	GPIO_PinState B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001272:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001276:	4872      	ldr	r0, [pc, #456]	@ (8001440 <StartDefaultTask+0x234>)
 8001278:	f001 fff8 	bl	800326c <HAL_GPIO_ReadPin>
 800127c:	4603      	mov	r3, r0
 800127e:	f887 31ab 	strb.w	r3, [r7, #427]	@ 0x1ab
	rclc_support_t support;
	rclc_executor_t executor;
	rcl_allocator_t allocator;
	rcl_init_options_t init_options;

	const unsigned int timer_period = RCL_MS_TO_NS(10);
 8001282:	4b70      	ldr	r3, [pc, #448]	@ (8001444 <StartDefaultTask+0x238>)
 8001284:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	const int timeout_ms = 1000;
 8001288:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	int executor_num = 1;
 8001290:	2301      	movs	r3, #1
 8001292:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac

	// Get message type support
	const rosidl_message_type_support_t * imu_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu);
 8001296:	f00d fc5d 	bl	800eb54 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800129a:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c

	const rosidl_service_type_support_t * imu_calib_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(imu_interfaces, srv, ImuCalibration);
 800129e:	f009 f9eb 	bl	800a678 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>
 80012a2:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

	allocator = rcl_get_default_allocator();
 80012a6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80012aa:	f5a3 7482 	sub.w	r4, r3, #260	@ 0x104
 80012ae:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80012b2:	4618      	mov	r0, r3
 80012b4:	f00c f818 	bl	800d2e8 <rcutils_get_default_allocator>
 80012b8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80012bc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012c0:	461d      	mov	r5, r3
 80012c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c6:	682b      	ldr	r3, [r5, #0]
 80012c8:	6023      	str	r3, [r4, #0]

	executor = rclc_executor_get_zero_initialized_executor();
 80012ca:	463b      	mov	r3, r7
 80012cc:	4618      	mov	r0, r3
 80012ce:	f00b fbc5 	bl	800ca5c <rclc_executor_get_zero_initialized_executor>
 80012d2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80012d6:	f5a3 72d8 	sub.w	r2, r3, #432	@ 0x1b0
 80012da:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80012de:	4611      	mov	r1, r2
 80012e0:	2288      	movs	r2, #136	@ 0x88
 80012e2:	4618      	mov	r0, r3
 80012e4:	f017 ff81 	bl	80191ea <memcpy>

	init_options = rcl_get_zero_initialized_init_options();
 80012e8:	f00a fe5a 	bl	800bfa0 <rcl_get_zero_initialized_init_options>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80012f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012f6:	601a      	str	r2, [r3, #0]

	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 80012f8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80012fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001300:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8001304:	466d      	mov	r5, sp
 8001306:	f103 020c 	add.w	r2, r3, #12
 800130a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800130e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001312:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001314:	4620      	mov	r0, r4
 8001316:	f00a fe45 	bl	800bfa4 <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 69));
 800131a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800131e:	2145      	movs	r1, #69	@ 0x45
 8001320:	4618      	mov	r0, r3
 8001322:	f00a ff3b 	bl	800c19c <rcl_init_options_set_domain_id>

	//create support init_options
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001326:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800132a:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 800132e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	4613      	mov	r3, r2
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	f00b fe99 	bl	800d070 <rclc_support_init_with_options>

	//create timer
	rclc_timer_init_default(&mpu6050_timer, &support, timer_period, timer_callback);
 800133e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001342:	2200      	movs	r2, #0
 8001344:	4698      	mov	r8, r3
 8001346:	4691      	mov	r9, r2
 8001348:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 800134c:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8001350:	4b3d      	ldr	r3, [pc, #244]	@ (8001448 <StartDefaultTask+0x23c>)
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	4642      	mov	r2, r8
 8001356:	464b      	mov	r3, r9
 8001358:	f00b ff62 	bl	800d220 <rclc_timer_init_default>

	// create node
	rclc_node_init_default(&node, "G474RE_MPU6050_node", "", &support);
 800135c:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001360:	4a3a      	ldr	r2, [pc, #232]	@ (800144c <StartDefaultTask+0x240>)
 8001362:	493b      	ldr	r1, [pc, #236]	@ (8001450 <StartDefaultTask+0x244>)
 8001364:	483b      	ldr	r0, [pc, #236]	@ (8001454 <StartDefaultTask+0x248>)
 8001366:	f00b feb7 	bl	800d0d8 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_best_effort(&mpu6050_publisher, &node, imu_type_support, "mpu6050_publisher");
 800136a:	4b3b      	ldr	r3, [pc, #236]	@ (8001458 <StartDefaultTask+0x24c>)
 800136c:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001370:	4938      	ldr	r1, [pc, #224]	@ (8001454 <StartDefaultTask+0x248>)
 8001372:	483a      	ldr	r0, [pc, #232]	@ (800145c <StartDefaultTask+0x250>)
 8001374:	f00b feec 	bl	800d150 <rclc_publisher_init_best_effort>

	//create subscriber


	//create service server
	if (B1 == GPIO_PIN_RESET) {
 8001378:	f897 31ab 	ldrb.w	r3, [r7, #427]	@ 0x1ab
 800137c:	2b00      	cmp	r3, #0
 800137e:	d10c      	bne.n	800139a <StartDefaultTask+0x18e>
		rclc_service_init_default(&imu_calibration_server, &node, imu_calib_type_support, "imu_calibration");
 8001380:	4b37      	ldr	r3, [pc, #220]	@ (8001460 <StartDefaultTask+0x254>)
 8001382:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001386:	4933      	ldr	r1, [pc, #204]	@ (8001454 <StartDefaultTask+0x248>)
 8001388:	4836      	ldr	r0, [pc, #216]	@ (8001464 <StartDefaultTask+0x258>)
 800138a:	f00b ff15 	bl	800d1b8 <rclc_service_init_default>
		executor_num++;
 800138e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001392:	3301      	adds	r3, #1
 8001394:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001398:	e002      	b.n	80013a0 <StartDefaultTask+0x194>
	}
	else{
		on_calib = true;
 800139a:	4b33      	ldr	r3, [pc, #204]	@ (8001468 <StartDefaultTask+0x25c>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
	}
	//create service client


	//create executor
	rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 80013a0:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80013a4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013a8:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 80013ac:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80013b0:	f00b fb5e 	bl	800ca70 <rclc_executor_init>

	rclc_executor_add_timer(&executor, &mpu6050_timer);
 80013b4:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80013b8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f00b fbc6 	bl	800cb50 <rclc_executor_add_timer>
	if (B1 == GPIO_PIN_RESET) rclc_executor_add_service(&executor, &imu_calibration_server, &imu_calibration_request, &imu_calibration_response, imu_calib_service_callback);
 80013c4:	f897 31ab 	ldrb.w	r3, [r7, #427]	@ 0x1ab
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d108      	bne.n	80013de <StartDefaultTask+0x1d2>
 80013cc:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80013d0:	4b26      	ldr	r3, [pc, #152]	@ (800146c <StartDefaultTask+0x260>)
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	4b26      	ldr	r3, [pc, #152]	@ (8001470 <StartDefaultTask+0x264>)
 80013d6:	4a27      	ldr	r2, [pc, #156]	@ (8001474 <StartDefaultTask+0x268>)
 80013d8:	4922      	ldr	r1, [pc, #136]	@ (8001464 <StartDefaultTask+0x258>)
 80013da:	f00b fbe3 	bl	800cba4 <rclc_executor_add_service>

	rclc_executor_spin(&executor);
 80013de:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f00b fe04 	bl	800cff0 <rclc_executor_spin>

	rmw_uros_sync_session(timeout_ms);
 80013e8:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 80013ec:	f00c ff2c 	bl	800e248 <rmw_uros_sync_session>

	//create message
	mpu6050_msg.header.frame_id = micro_ros_string_utilities_init("imu_frame");
 80013f0:	4c21      	ldr	r4, [pc, #132]	@ (8001478 <StartDefaultTask+0x26c>)
 80013f2:	463b      	mov	r3, r7
 80013f4:	4921      	ldr	r1, [pc, #132]	@ (800147c <StartDefaultTask+0x270>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f009 fa2e 	bl	800a858 <micro_ros_string_utilities_init>
 80013fc:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001400:	f5a3 72d8 	sub.w	r2, r3, #432	@ 0x1b0
 8001404:	f104 0308 	add.w	r3, r4, #8
 8001408:	ca07      	ldmia	r2, {r0, r1, r2}
 800140a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for(;;)
	{
		osDelay(10);
 800140e:	200a      	movs	r0, #10
 8001410:	f006 fc68 	bl	8007ce4 <osDelay>
 8001414:	e7fb      	b.n	800140e <StartDefaultTask+0x202>
 8001416:	bf00      	nop
 8001418:	080025c5 	.word	0x080025c5
 800141c:	08002561 	.word	0x08002561
 8001420:	08002541 	.word	0x08002541
 8001424:	08002515 	.word	0x08002515
 8001428:	20004734 	.word	0x20004734
 800142c:	08001cc9 	.word	0x08001cc9
 8001430:	08001d0d 	.word	0x08001d0d
 8001434:	08001d45 	.word	0x08001d45
 8001438:	08001db1 	.word	0x08001db1
 800143c:	0801a590 	.word	0x0801a590
 8001440:	48000800 	.word	0x48000800
 8001444:	00989680 	.word	0x00989680
 8001448:	08000f59 	.word	0x08000f59
 800144c:	0801a5b8 	.word	0x0801a5b8
 8001450:	0801a5bc 	.word	0x0801a5bc
 8001454:	200007ec 	.word	0x200007ec
 8001458:	0801a5d0 	.word	0x0801a5d0
 800145c:	200007f4 	.word	0x200007f4
 8001460:	0801a5e4 	.word	0x0801a5e4
 8001464:	20000938 	.word	0x20000938
 8001468:	20000b19 	.word	0x20000b19
 800146c:	08001125 	.word	0x08001125
 8001470:	20000a80 	.word	0x20000a80
 8001474:	20000940 	.word	0x20000940
 8001478:	200007f8 	.word	0x200007f8
 800147c:	0801a5f4 	.word	0x0801a5f4

08001480 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	@ 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800148c:	f007 fc6c 	bl	8008d68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001490:	4b5a      	ldr	r3, [pc, #360]	@ (80015fc <pvPortMallocMicroROS+0x17c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001498:	f000 f986 	bl	80017a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800149c:	4b58      	ldr	r3, [pc, #352]	@ (8001600 <pvPortMallocMicroROS+0x180>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f040 8090 	bne.w	80015ca <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d01e      	beq.n	80014ee <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80014b0:	2208      	movs	r2, #8
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d015      	beq.n	80014ee <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f023 0307 	bic.w	r3, r3, #7
 80014c8:	3308      	adds	r3, #8
 80014ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00b      	beq.n	80014ee <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80014d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014da:	f383 8811 	msr	BASEPRI, r3
 80014de:	f3bf 8f6f 	isb	sy
 80014e2:	f3bf 8f4f 	dsb	sy
 80014e6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	e7fd      	b.n	80014ea <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d06a      	beq.n	80015ca <pvPortMallocMicroROS+0x14a>
 80014f4:	4b43      	ldr	r3, [pc, #268]	@ (8001604 <pvPortMallocMicroROS+0x184>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d865      	bhi.n	80015ca <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80014fe:	4b42      	ldr	r3, [pc, #264]	@ (8001608 <pvPortMallocMicroROS+0x188>)
 8001500:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001502:	4b41      	ldr	r3, [pc, #260]	@ (8001608 <pvPortMallocMicroROS+0x188>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001508:	e004      	b.n	8001514 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800150e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	429a      	cmp	r2, r3
 800151c:	d903      	bls.n	8001526 <pvPortMallocMicroROS+0xa6>
 800151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f1      	bne.n	800150a <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001526:	4b35      	ldr	r3, [pc, #212]	@ (80015fc <pvPortMallocMicroROS+0x17c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800152c:	429a      	cmp	r2, r3
 800152e:	d04c      	beq.n	80015ca <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2208      	movs	r2, #8
 8001536:	4413      	add	r3, r2
 8001538:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	1ad2      	subs	r2, r2, r3
 800154a:	2308      	movs	r3, #8
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	429a      	cmp	r2, r3
 8001550:	d920      	bls.n	8001594 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00b      	beq.n	800157c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001568:	f383 8811 	msr	BASEPRI, r3
 800156c:	f3bf 8f6f 	isb	sy
 8001570:	f3bf 8f4f 	dsb	sy
 8001574:	613b      	str	r3, [r7, #16]
}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	1ad2      	subs	r2, r2, r3
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800158e:	69b8      	ldr	r0, [r7, #24]
 8001590:	f000 f96c 	bl	800186c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001594:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <pvPortMallocMicroROS+0x184>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	4a19      	ldr	r2, [pc, #100]	@ (8001604 <pvPortMallocMicroROS+0x184>)
 80015a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80015a2:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <pvPortMallocMicroROS+0x184>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4b19      	ldr	r3, [pc, #100]	@ (800160c <pvPortMallocMicroROS+0x18c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d203      	bcs.n	80015b6 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <pvPortMallocMicroROS+0x184>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a16      	ldr	r2, [pc, #88]	@ (800160c <pvPortMallocMicroROS+0x18c>)
 80015b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <pvPortMallocMicroROS+0x180>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	431a      	orrs	r2, r3
 80015c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80015ca:	f007 fbdb 	bl	8008d84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00b      	beq.n	80015f0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80015d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015dc:	f383 8811 	msr	BASEPRI, r3
 80015e0:	f3bf 8f6f 	isb	sy
 80015e4:	f3bf 8f4f 	dsb	sy
 80015e8:	60fb      	str	r3, [r7, #12]
}
 80015ea:	bf00      	nop
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80015f0:	69fb      	ldr	r3, [r7, #28]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3728      	adds	r7, #40	@ 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20004664 	.word	0x20004664
 8001600:	20004670 	.word	0x20004670
 8001604:	20004668 	.word	0x20004668
 8001608:	2000465c 	.word	0x2000465c
 800160c:	2000466c 	.word	0x2000466c

08001610 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d04a      	beq.n	80016b8 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001622:	2308      	movs	r3, #8
 8001624:	425b      	negs	r3, r3
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4413      	add	r3, r2
 800162a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	4b22      	ldr	r3, [pc, #136]	@ (80016c0 <vPortFreeMicroROS+0xb0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10b      	bne.n	8001656 <vPortFreeMicroROS+0x46>
	__asm volatile
 800163e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001642:	f383 8811 	msr	BASEPRI, r3
 8001646:	f3bf 8f6f 	isb	sy
 800164a:	f3bf 8f4f 	dsb	sy
 800164e:	60fb      	str	r3, [r7, #12]
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	e7fd      	b.n	8001652 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00b      	beq.n	8001676 <vPortFreeMicroROS+0x66>
	__asm volatile
 800165e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001662:	f383 8811 	msr	BASEPRI, r3
 8001666:	f3bf 8f6f 	isb	sy
 800166a:	f3bf 8f4f 	dsb	sy
 800166e:	60bb      	str	r3, [r7, #8]
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	e7fd      	b.n	8001672 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <vPortFreeMicroROS+0xb0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d019      	beq.n	80016b8 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d115      	bne.n	80016b8 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <vPortFreeMicroROS+0xb0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	43db      	mvns	r3, r3
 8001696:	401a      	ands	r2, r3
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800169c:	f007 fb64 	bl	8008d68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <vPortFreeMicroROS+0xb4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a06      	ldr	r2, [pc, #24]	@ (80016c4 <vPortFreeMicroROS+0xb4>)
 80016ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80016ae:	6938      	ldr	r0, [r7, #16]
 80016b0:	f000 f8dc 	bl	800186c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80016b4:	f007 fb66 	bl	8008d84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20004670 	.word	0x20004670
 80016c4:	20004668 	.word	0x20004668

080016c8 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80016d4:	2308      	movs	r3, #8
 80016d6:	425b      	negs	r3, r3
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	4413      	add	r3, r2
 80016dc:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <getBlockSize+0x38>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]

	return count;
 80016f0:	68fb      	ldr	r3, [r7, #12]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20004670 	.word	0x20004670

08001704 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800170e:	f007 fb2b 	bl	8008d68 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001712:	6838      	ldr	r0, [r7, #0]
 8001714:	f7ff feb4 	bl	8001480 <pvPortMallocMicroROS>
 8001718:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d017      	beq.n	8001750 <pvPortReallocMicroROS+0x4c>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d014      	beq.n	8001750 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffce 	bl	80016c8 <getBlockSize>
 800172c:	4603      	mov	r3, r0
 800172e:	2208      	movs	r2, #8
 8001730:	1a9b      	subs	r3, r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d201      	bcs.n	8001740 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	68b8      	ldr	r0, [r7, #8]
 8001746:	f017 fd50 	bl	80191ea <memcpy>

		vPortFreeMicroROS(pv);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ff60 	bl	8001610 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001750:	f007 fb18 	bl	8008d84 <xTaskResumeAll>

	return newmem;
 8001754:	68bb      	ldr	r3, [r7, #8]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001768:	f007 fafe 	bl	8008d68 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	fb02 f303 	mul.w	r3, r2, r3
 8001774:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7ff fe82 	bl	8001480 <pvPortMallocMicroROS>
 800177c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001782:	e004      	b.n	800178e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	613a      	str	r2, [r7, #16]
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	1e5a      	subs	r2, r3, #1
 8001792:	617a      	str	r2, [r7, #20]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f5      	bne.n	8001784 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001798:	f007 faf4 	bl	8008d84 <xTaskResumeAll>
  	return mem;
 800179c:	68fb      	ldr	r3, [r7, #12]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80017ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80017b4:	4b27      	ldr	r3, [pc, #156]	@ (8001854 <prvHeapInit+0xac>)
 80017b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00c      	beq.n	80017dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3307      	adds	r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f023 0307 	bic.w	r3, r3, #7
 80017ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001854 <prvHeapInit+0xac>)
 80017d8:	4413      	add	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80017e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001858 <prvHeapInit+0xb0>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80017e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001858 <prvHeapInit+0xb0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	4413      	add	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80017f4:	2208      	movs	r2, #8
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f023 0307 	bic.w	r3, r3, #7
 8001802:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4a15      	ldr	r2, [pc, #84]	@ (800185c <prvHeapInit+0xb4>)
 8001808:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800180a:	4b14      	ldr	r3, [pc, #80]	@ (800185c <prvHeapInit+0xb4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2200      	movs	r2, #0
 8001810:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001812:	4b12      	ldr	r3, [pc, #72]	@ (800185c <prvHeapInit+0xb4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	1ad2      	subs	r2, r2, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <prvHeapInit+0xb4>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <prvHeapInit+0xb8>)
 8001836:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	4a09      	ldr	r2, [pc, #36]	@ (8001864 <prvHeapInit+0xbc>)
 800183e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001840:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <prvHeapInit+0xc0>)
 8001842:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001846:	601a      	str	r2, [r3, #0]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	20003a5c 	.word	0x20003a5c
 8001858:	2000465c 	.word	0x2000465c
 800185c:	20004664 	.word	0x20004664
 8001860:	2000466c 	.word	0x2000466c
 8001864:	20004668 	.word	0x20004668
 8001868:	20004670 	.word	0x20004670

0800186c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001874:	4b28      	ldr	r3, [pc, #160]	@ (8001918 <prvInsertBlockIntoFreeList+0xac>)
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	e002      	b.n	8001880 <prvInsertBlockIntoFreeList+0x14>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	429a      	cmp	r2, r3
 8001888:	d8f7      	bhi.n	800187a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	4413      	add	r3, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	d108      	bne.n	80018ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	441a      	add	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	441a      	add	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d118      	bne.n	80018f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <prvInsertBlockIntoFreeList+0xb0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d00d      	beq.n	80018ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	441a      	add	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	e008      	b.n	80018fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80018ea:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <prvInsertBlockIntoFreeList+0xb0>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e003      	b.n	80018fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	d002      	beq.n	800190a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	2000465c 	.word	0x2000465c
 800191c:	20004664 	.word	0x20004664

08001920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001926:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <MX_DMA_Init+0x60>)
 8001928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800192a:	4a15      	ldr	r2, [pc, #84]	@ (8001980 <MX_DMA_Init+0x60>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6493      	str	r3, [r2, #72]	@ 0x48
 8001932:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <MX_DMA_Init+0x60>)
 8001934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800193e:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <MX_DMA_Init+0x60>)
 8001940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001942:	4a0f      	ldr	r2, [pc, #60]	@ (8001980 <MX_DMA_Init+0x60>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6493      	str	r3, [r2, #72]	@ 0x48
 800194a:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <MX_DMA_Init+0x60>)
 800194c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2105      	movs	r1, #5
 800195a:	200b      	movs	r0, #11
 800195c:	f000 ff9e 	bl	800289c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001960:	200b      	movs	r0, #11
 8001962:	f000 ffb5 	bl	80028d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2105      	movs	r1, #5
 800196a:	200c      	movs	r0, #12
 800196c:	f000 ff96 	bl	800289c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001970:	200c      	movs	r0, #12
 8001972:	f000 ffad 	bl	80028d0 <HAL_NVIC_EnableIRQ>

}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000

08001984 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	@ 0x28
 8001988:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a58 <MX_GPIO_Init+0xd4>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199e:	4a2e      	ldr	r2, [pc, #184]	@ (8001a58 <MX_GPIO_Init+0xd4>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a58 <MX_GPIO_Init+0xd4>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019b2:	4b29      	ldr	r3, [pc, #164]	@ (8001a58 <MX_GPIO_Init+0xd4>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b6:	4a28      	ldr	r2, [pc, #160]	@ (8001a58 <MX_GPIO_Init+0xd4>)
 80019b8:	f043 0320 	orr.w	r3, r3, #32
 80019bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019be:	4b26      	ldr	r3, [pc, #152]	@ (8001a58 <MX_GPIO_Init+0xd4>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	4b23      	ldr	r3, [pc, #140]	@ (8001a58 <MX_GPIO_Init+0xd4>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ce:	4a22      	ldr	r2, [pc, #136]	@ (8001a58 <MX_GPIO_Init+0xd4>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d6:	4b20      	ldr	r3, [pc, #128]	@ (8001a58 <MX_GPIO_Init+0xd4>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a58 <MX_GPIO_Init+0xd4>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a58 <MX_GPIO_Init+0xd4>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <MX_GPIO_Init+0xd4>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2120      	movs	r1, #32
 80019fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a02:	f001 fc4b 	bl	800329c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a0c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480f      	ldr	r0, [pc, #60]	@ (8001a5c <MX_GPIO_Init+0xd8>)
 8001a1e:	f001 faa3 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a22:	2320      	movs	r3, #32
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a3c:	f001 fa94 	bl	8002f68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2105      	movs	r1, #5
 8001a44:	2028      	movs	r0, #40	@ 0x28
 8001a46:	f000 ff29 	bl	800289c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a4a:	2028      	movs	r0, #40	@ 0x28
 8001a4c:	f000 ff40 	bl	80028d0 <HAL_NVIC_EnableIRQ>

}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	@ 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	48000800 	.word	0x48000800

08001a60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <MX_I2C1_Init+0x74>)
 8001a66:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad8 <MX_I2C1_Init+0x78>)
 8001a68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <MX_I2C1_Init+0x74>)
 8001a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001adc <MX_I2C1_Init+0x7c>)
 8001a6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a70:	4b18      	ldr	r3, [pc, #96]	@ (8001ad4 <MX_I2C1_Init+0x74>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a76:	4b17      	ldr	r3, [pc, #92]	@ (8001ad4 <MX_I2C1_Init+0x74>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <MX_I2C1_Init+0x74>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a82:	4b14      	ldr	r3, [pc, #80]	@ (8001ad4 <MX_I2C1_Init+0x74>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a88:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <MX_I2C1_Init+0x74>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <MX_I2C1_Init+0x74>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <MX_I2C1_Init+0x74>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a9a:	480e      	ldr	r0, [pc, #56]	@ (8001ad4 <MX_I2C1_Init+0x74>)
 8001a9c:	f001 fc53 	bl	8003346 <HAL_I2C_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001aa6:	f000 f909 	bl	8001cbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4809      	ldr	r0, [pc, #36]	@ (8001ad4 <MX_I2C1_Init+0x74>)
 8001aae:	f002 f9d5 	bl	8003e5c <HAL_I2CEx_ConfigAnalogFilter>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ab8:	f000 f900 	bl	8001cbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001abc:	2100      	movs	r1, #0
 8001abe:	4805      	ldr	r0, [pc, #20]	@ (8001ad4 <MX_I2C1_Init+0x74>)
 8001ac0:	f002 fa17 	bl	8003ef2 <HAL_I2CEx_ConfigDigitalFilter>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001aca:	f000 f8f7 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20004674 	.word	0x20004674
 8001ad8:	40005400 	.word	0x40005400
 8001adc:	40621236 	.word	0x40621236

08001ae0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b09e      	sub	sp, #120	@ 0x78
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af8:	f107 0310 	add.w	r3, r7, #16
 8001afc:	2254      	movs	r2, #84	@ 0x54
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f017 faa9 	bl	8019058 <memset>
  if(i2cHandle->Instance==I2C1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001b88 <HAL_I2C_MspInit+0xa8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d136      	bne.n	8001b7e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b10:	2340      	movs	r3, #64	@ 0x40
 8001b12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 f8a7 	bl	8004c70 <HAL_RCCEx_PeriphCLKConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b28:	f000 f8c8 	bl	8001cbc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2c:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <HAL_I2C_MspInit+0xac>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b30:	4a16      	ldr	r2, [pc, #88]	@ (8001b8c <HAL_I2C_MspInit+0xac>)
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b38:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <HAL_I2C_MspInit+0xac>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b44:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b48:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b4a:	2312      	movs	r3, #18
 8001b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b56:	2304      	movs	r3, #4
 8001b58:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b5e:	4619      	mov	r1, r3
 8001b60:	480b      	ldr	r0, [pc, #44]	@ (8001b90 <HAL_I2C_MspInit+0xb0>)
 8001b62:	f001 fa01 	bl	8002f68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b66:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <HAL_I2C_MspInit+0xac>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	4a08      	ldr	r2, [pc, #32]	@ (8001b8c <HAL_I2C_MspInit+0xac>)
 8001b6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b72:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_I2C_MspInit+0xac>)
 8001b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3778      	adds	r7, #120	@ 0x78
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	48000400 	.word	0x48000400

08001b94 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001b98:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <MX_IWDG_Init+0x34>)
 8001b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8001bcc <MX_IWDG_Init+0x38>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <MX_IWDG_Init+0x34>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <MX_IWDG_Init+0x34>)
 8001ba6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001baa:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <MX_IWDG_Init+0x34>)
 8001bae:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001bb2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001bb4:	4804      	ldr	r0, [pc, #16]	@ (8001bc8 <MX_IWDG_Init+0x34>)
 8001bb6:	f002 f9e8 	bl	8003f8a <HAL_IWDG_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001bc0:	f000 f87c 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	200046c8 	.word	0x200046c8
 8001bcc:	40003000 	.word	0x40003000

08001bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd4:	f000 fd73 	bl	80026be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd8:	f000 f812 	bl	8001c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bdc:	f7ff fed2 	bl	8001984 <MX_GPIO_Init>
  MX_DMA_Init();
 8001be0:	f7ff fe9e 	bl	8001920 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001be4:	f000 fb8e 	bl	8002304 <MX_LPUART1_UART_Init>
  MX_IWDG_Init();
 8001be8:	f7ff ffd4 	bl	8001b94 <MX_IWDG_Init>
  MX_I2C1_Init();
 8001bec:	f7ff ff38 	bl	8001a60 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001bf0:	f005 ff9c 	bl	8007b2c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001bf4:	f7ff faee 	bl	80011d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001bf8:	f005 ffbc 	bl	8007b74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <main+0x2c>

08001c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b094      	sub	sp, #80	@ 0x50
 8001c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c06:	f107 0318 	add.w	r3, r7, #24
 8001c0a:	2238      	movs	r2, #56	@ 0x38
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f017 fa22 	bl	8019058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f002 fa10 	bl	8004048 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001c28:	2309      	movs	r3, #9
 8001c2a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c30:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c32:	2301      	movs	r3, #1
 8001c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c36:	2302      	movs	r3, #2
 8001c38:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001c3e:	2306      	movs	r3, #6
 8001c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001c42:	2355      	movs	r3, #85	@ 0x55
 8001c44:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c46:	2302      	movs	r3, #2
 8001c48:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c52:	f107 0318 	add.w	r3, r7, #24
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 faaa 	bl	80041b0 <HAL_RCC_OscConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c62:	f000 f82b 	bl	8001cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c66:	230f      	movs	r3, #15
 8001c68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2104      	movs	r1, #4
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 fda8 	bl	80047d4 <HAL_RCC_ClockConfig>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001c8a:	f000 f817 	bl	8001cbc <Error_Handler>
  }
}
 8001c8e:	bf00      	nop
 8001c90:	3750      	adds	r7, #80	@ 0x50
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a04      	ldr	r2, [pc, #16]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001caa:	f000 fd21 	bl	80026f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40012c00 	.word	0x40012c00

08001cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc0:	b672      	cpsid	i
}
 8001cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <Error_Handler+0x8>

08001cc8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d04 <microros_allocate+0x3c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <microros_allocate+0x3c>)
 8001ce0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001ce2:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <microros_allocate+0x40>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <microros_allocate+0x40>)
 8001cf0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff fbc4 	bl	8001480 <pvPortMallocMicroROS>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200046d8 	.word	0x200046d8
 8001d08:	200046dc 	.word	0x200046dc

08001d0c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00c      	beq.n	8001d36 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff fcd3 	bl	80016c8 <getBlockSize>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4a06      	ldr	r2, [pc, #24]	@ (8001d40 <microros_deallocate+0x34>)
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b04      	ldr	r3, [pc, #16]	@ (8001d40 <microros_deallocate+0x34>)
 8001d2e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fc6d 	bl	8001610 <vPortFreeMicroROS>
  }
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200046dc 	.word	0x200046dc

08001d44 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001d50:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <microros_reallocate+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	4413      	add	r3, r2
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <microros_reallocate+0x64>)
 8001d5e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001d60:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <microros_reallocate+0x68>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	4413      	add	r3, r2
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dac <microros_reallocate+0x68>)
 8001d6e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d104      	bne.n	8001d80 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001d76:	68b8      	ldr	r0, [r7, #8]
 8001d78:	f7ff fb82 	bl	8001480 <pvPortMallocMicroROS>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	e00e      	b.n	8001d9e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f7ff fca1 	bl	80016c8 <getBlockSize>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4a08      	ldr	r2, [pc, #32]	@ (8001dac <microros_reallocate+0x68>)
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <microros_reallocate+0x68>)
 8001d92:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f7ff fcb4 	bl	8001704 <pvPortReallocMicroROS>
 8001d9c:	4603      	mov	r3, r0
  }
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200046d8 	.word	0x200046d8
 8001dac:	200046dc 	.word	0x200046dc

08001db0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001df8 <microros_zero_allocate+0x48>)
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	4413      	add	r3, r2
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <microros_zero_allocate+0x48>)
 8001dce:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	fb02 f303 	mul.w	r3, r2, r3
 8001dd8:	4a08      	ldr	r2, [pc, #32]	@ (8001dfc <microros_zero_allocate+0x4c>)
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	4413      	add	r3, r2
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <microros_zero_allocate+0x4c>)
 8001de2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f7ff fcb9 	bl	800175e <pvPortCallocMicroROS>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200046d8 	.word	0x200046d8
 8001dfc:	200046dc 	.word	0x200046dc

08001e00 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001e00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001e12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e16:	a320      	add	r3, pc, #128	@ (adr r3, 8001e98 <UTILS_NanosecondsToTimespec+0x98>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	f7fe fed4 	bl	8000bc8 <__aeabi_ldivmod>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001e2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e2e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001e98 <UTILS_NanosecondsToTimespec+0x98>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	f7fe fec8 	bl	8000bc8 <__aeabi_ldivmod>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	da20      	bge.n	8001e86 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4a11      	ldr	r2, [pc, #68]	@ (8001e90 <UTILS_NanosecondsToTimespec+0x90>)
 8001e4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e4e:	1712      	asrs	r2, r2, #28
 8001e50:	17db      	asrs	r3, r3, #31
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	6979      	ldr	r1, [r7, #20]
 8001e60:	17c8      	asrs	r0, r1, #31
 8001e62:	460c      	mov	r4, r1
 8001e64:	4605      	mov	r5, r0
 8001e66:	ebb2 0804 	subs.w	r8, r2, r4
 8001e6a:	eb63 0905 	sbc.w	r9, r3, r5
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	4906      	ldr	r1, [pc, #24]	@ (8001e94 <UTILS_NanosecondsToTimespec+0x94>)
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	441a      	add	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	609a      	str	r2, [r3, #8]
    }
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e90:	44b82fa1 	.word	0x44b82fa1
 8001e94:	3b9aca00 	.word	0x3b9aca00
 8001e98:	3b9aca00 	.word	0x3b9aca00
 8001e9c:	00000000 	.word	0x00000000

08001ea0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea4:	b08e      	sub	sp, #56	@ 0x38
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6278      	str	r0, [r7, #36]	@ 0x24
 8001eaa:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001eac:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001ec2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f007 f9d8 	bl	800927c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ece:	17da      	asrs	r2, r3, #31
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	61fa      	str	r2, [r7, #28]
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	69b9      	ldr	r1, [r7, #24]
 8001ede:	000b      	movs	r3, r1
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee8:	2200      	movs	r2, #0
 8001eea:	461c      	mov	r4, r3
 8001eec:	4615      	mov	r5, r2
 8001eee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001ef2:	1911      	adds	r1, r2, r4
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	416b      	adcs	r3, r5
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001efe:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001f02:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	f04f 0400 	mov.w	r4, #0
 8001f0e:	f04f 0500 	mov.w	r5, #0
 8001f12:	015d      	lsls	r5, r3, #5
 8001f14:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001f18:	0154      	lsls	r4, r2, #5
 8001f1a:	4622      	mov	r2, r4
 8001f1c:	462b      	mov	r3, r5
 8001f1e:	ebb2 0800 	subs.w	r8, r2, r0
 8001f22:	eb63 0901 	sbc.w	r9, r3, r1
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001f32:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001f36:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001f3a:	4690      	mov	r8, r2
 8001f3c:	4699      	mov	r9, r3
 8001f3e:	eb18 0a00 	adds.w	sl, r8, r0
 8001f42:	eb49 0b01 	adc.w	fp, r9, r1
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f52:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f56:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f5a:	ebb2 040a 	subs.w	r4, r2, sl
 8001f5e:	603c      	str	r4, [r7, #0]
 8001f60:	eb63 030b 	sbc.w	r3, r3, fp
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f6a:	4623      	mov	r3, r4
 8001f6c:	181b      	adds	r3, r3, r0
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	462b      	mov	r3, r5
 8001f72:	eb41 0303 	adc.w	r3, r1, r3
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	6a3a      	ldr	r2, [r7, #32]
 8001f7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f7e:	f7ff ff3f 	bl	8001e00 <UTILS_NanosecondsToTimespec>

    return 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	3738      	adds	r7, #56	@ 0x38
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <HAL_MspInit+0x50>)
 8001f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f9a:	4a11      	ldr	r2, [pc, #68]	@ (8001fe0 <HAL_MspInit+0x50>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <HAL_MspInit+0x50>)
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <HAL_MspInit+0x50>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb2:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe0 <HAL_MspInit+0x50>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fba:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <HAL_MspInit+0x50>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	210f      	movs	r1, #15
 8001fca:	f06f 0001 	mvn.w	r0, #1
 8001fce:	f000 fc65 	bl	800289c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001fd2:	f002 f8dd 	bl	8004190 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08c      	sub	sp, #48	@ 0x30
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ff4:	4b2c      	ldr	r3, [pc, #176]	@ (80020a8 <HAL_InitTick+0xc4>)
 8001ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff8:	4a2b      	ldr	r2, [pc, #172]	@ (80020a8 <HAL_InitTick+0xc4>)
 8001ffa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ffe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002000:	4b29      	ldr	r3, [pc, #164]	@ (80020a8 <HAL_InitTick+0xc4>)
 8002002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002004:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800200c:	f107 020c 	add.w	r2, r7, #12
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	4611      	mov	r1, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f002 fdb2 	bl	8004b80 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800201c:	f002 fd9a 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
 8002020:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002024:	4a21      	ldr	r2, [pc, #132]	@ (80020ac <HAL_InitTick+0xc8>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	0c9b      	lsrs	r3, r3, #18
 800202c:	3b01      	subs	r3, #1
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002030:	4b1f      	ldr	r3, [pc, #124]	@ (80020b0 <HAL_InitTick+0xcc>)
 8002032:	4a20      	ldr	r2, [pc, #128]	@ (80020b4 <HAL_InitTick+0xd0>)
 8002034:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002036:	4b1e      	ldr	r3, [pc, #120]	@ (80020b0 <HAL_InitTick+0xcc>)
 8002038:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800203c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800203e:	4a1c      	ldr	r2, [pc, #112]	@ (80020b0 <HAL_InitTick+0xcc>)
 8002040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002042:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002044:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <HAL_InitTick+0xcc>)
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204a:	4b19      	ldr	r3, [pc, #100]	@ (80020b0 <HAL_InitTick+0xcc>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002050:	4817      	ldr	r0, [pc, #92]	@ (80020b0 <HAL_InitTick+0xcc>)
 8002052:	f003 f85b 	bl	800510c <HAL_TIM_Base_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800205c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002060:	2b00      	cmp	r3, #0
 8002062:	d11b      	bne.n	800209c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002064:	4812      	ldr	r0, [pc, #72]	@ (80020b0 <HAL_InitTick+0xcc>)
 8002066:	f003 f8b3 	bl	80051d0 <HAL_TIM_Base_Start_IT>
 800206a:	4603      	mov	r3, r0
 800206c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002070:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002074:	2b00      	cmp	r3, #0
 8002076:	d111      	bne.n	800209c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002078:	2019      	movs	r0, #25
 800207a:	f000 fc29 	bl	80028d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	d808      	bhi.n	8002096 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002084:	2200      	movs	r2, #0
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	2019      	movs	r0, #25
 800208a:	f000 fc07 	bl	800289c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800208e:	4a0a      	ldr	r2, [pc, #40]	@ (80020b8 <HAL_InitTick+0xd4>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	e002      	b.n	800209c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800209c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3730      	adds	r7, #48	@ 0x30
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	431bde83 	.word	0x431bde83
 80020b0:	200046e0 	.word	0x200046e0
 80020b4:	40012c00 	.word	0x40012c00
 80020b8:	20000008 	.word	0x20000008

080020bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <NMI_Handler+0x4>

080020c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <HardFault_Handler+0x4>

080020cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <MemManage_Handler+0x4>

080020d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <BusFault_Handler+0x4>

080020dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <UsageFault_Handler+0x4>

080020e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80020f8:	4802      	ldr	r0, [pc, #8]	@ (8002104 <DMA1_Channel1_IRQHandler+0x10>)
 80020fa:	f000 fdda 	bl	8002cb2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200047c8 	.word	0x200047c8

08002108 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800210c:	4802      	ldr	r0, [pc, #8]	@ (8002118 <DMA1_Channel2_IRQHandler+0x10>)
 800210e:	f000 fdd0 	bl	8002cb2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20004828 	.word	0x20004828

0800211c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002120:	4802      	ldr	r0, [pc, #8]	@ (800212c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002122:	f003 f8cd 	bl	80052c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200046e0 	.word	0x200046e0

08002130 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002134:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002138:	f001 f8e2 	bl	8003300 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}

08002140 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002144:	4802      	ldr	r0, [pc, #8]	@ (8002150 <LPUART1_IRQHandler+0x10>)
 8002146:	f003 fcdf 	bl	8005b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20004734 	.word	0x20004734

08002154 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return 1;
 8002158:	2301      	movs	r3, #1
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_kill>:

int _kill(int pid, int sig)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800216e:	f017 f807 	bl	8019180 <__errno>
 8002172:	4603      	mov	r3, r0
 8002174:	2216      	movs	r2, #22
 8002176:	601a      	str	r2, [r3, #0]
  return -1;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <_exit>:

void _exit (int status)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800218c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ffe7 	bl	8002164 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002196:	bf00      	nop
 8002198:	e7fd      	b.n	8002196 <_exit+0x12>

0800219a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	e00a      	b.n	80021c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ac:	f3af 8000 	nop.w
 80021b0:	4601      	mov	r1, r0
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	60ba      	str	r2, [r7, #8]
 80021b8:	b2ca      	uxtb	r2, r1
 80021ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	3301      	adds	r3, #1
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	dbf0      	blt.n	80021ac <_read+0x12>
  }

  return len;
 80021ca:	687b      	ldr	r3, [r7, #4]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	e009      	b.n	80021fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	60ba      	str	r2, [r7, #8]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3301      	adds	r3, #1
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	429a      	cmp	r2, r3
 8002200:	dbf1      	blt.n	80021e6 <_write+0x12>
  }
  return len;
 8002202:	687b      	ldr	r3, [r7, #4]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <_close>:

int _close(int file)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002214:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002234:	605a      	str	r2, [r3, #4]
  return 0;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <_isatty>:

int _isatty(int file)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800224c:	2301      	movs	r3, #1
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800225a:	b480      	push	{r7}
 800225c:	b085      	sub	sp, #20
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800227c:	4a14      	ldr	r2, [pc, #80]	@ (80022d0 <_sbrk+0x5c>)
 800227e:	4b15      	ldr	r3, [pc, #84]	@ (80022d4 <_sbrk+0x60>)
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002288:	4b13      	ldr	r3, [pc, #76]	@ (80022d8 <_sbrk+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002290:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <_sbrk+0x64>)
 8002292:	4a12      	ldr	r2, [pc, #72]	@ (80022dc <_sbrk+0x68>)
 8002294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002296:	4b10      	ldr	r3, [pc, #64]	@ (80022d8 <_sbrk+0x64>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d207      	bcs.n	80022b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a4:	f016 ff6c 	bl	8019180 <__errno>
 80022a8:	4603      	mov	r3, r0
 80022aa:	220c      	movs	r2, #12
 80022ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022b2:	e009      	b.n	80022c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b4:	4b08      	ldr	r3, [pc, #32]	@ (80022d8 <_sbrk+0x64>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ba:	4b07      	ldr	r3, [pc, #28]	@ (80022d8 <_sbrk+0x64>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	4a05      	ldr	r2, [pc, #20]	@ (80022d8 <_sbrk+0x64>)
 80022c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022c6:	68fb      	ldr	r3, [r7, #12]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20020000 	.word	0x20020000
 80022d4:	00000400 	.word	0x00000400
 80022d8:	20004730 	.word	0x20004730
 80022dc:	2000b7f0 	.word	0x2000b7f0

080022e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022e4:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <SystemInit+0x20>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ea:	4a05      	ldr	r2, [pc, #20]	@ (8002300 <SystemInit+0x20>)
 80022ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002308:	4b20      	ldr	r3, [pc, #128]	@ (800238c <MX_LPUART1_UART_Init+0x88>)
 800230a:	4a21      	ldr	r2, [pc, #132]	@ (8002390 <MX_LPUART1_UART_Init+0x8c>)
 800230c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800230e:	4b1f      	ldr	r3, [pc, #124]	@ (800238c <MX_LPUART1_UART_Init+0x88>)
 8002310:	4a20      	ldr	r2, [pc, #128]	@ (8002394 <MX_LPUART1_UART_Init+0x90>)
 8002312:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002314:	4b1d      	ldr	r3, [pc, #116]	@ (800238c <MX_LPUART1_UART_Init+0x88>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800231a:	4b1c      	ldr	r3, [pc, #112]	@ (800238c <MX_LPUART1_UART_Init+0x88>)
 800231c:	2200      	movs	r2, #0
 800231e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002320:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <MX_LPUART1_UART_Init+0x88>)
 8002322:	2200      	movs	r2, #0
 8002324:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002326:	4b19      	ldr	r3, [pc, #100]	@ (800238c <MX_LPUART1_UART_Init+0x88>)
 8002328:	220c      	movs	r2, #12
 800232a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800232c:	4b17      	ldr	r3, [pc, #92]	@ (800238c <MX_LPUART1_UART_Init+0x88>)
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002332:	4b16      	ldr	r3, [pc, #88]	@ (800238c <MX_LPUART1_UART_Init+0x88>)
 8002334:	2200      	movs	r2, #0
 8002336:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002338:	4b14      	ldr	r3, [pc, #80]	@ (800238c <MX_LPUART1_UART_Init+0x88>)
 800233a:	2200      	movs	r2, #0
 800233c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800233e:	4b13      	ldr	r3, [pc, #76]	@ (800238c <MX_LPUART1_UART_Init+0x88>)
 8002340:	2200      	movs	r2, #0
 8002342:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002344:	4811      	ldr	r0, [pc, #68]	@ (800238c <MX_LPUART1_UART_Init+0x88>)
 8002346:	f003 fa2d 	bl	80057a4 <HAL_UART_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8002350:	f7ff fcb4 	bl	8001cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002354:	2100      	movs	r1, #0
 8002356:	480d      	ldr	r0, [pc, #52]	@ (800238c <MX_LPUART1_UART_Init+0x88>)
 8002358:	f004 ff3d 	bl	80071d6 <HAL_UARTEx_SetTxFifoThreshold>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8002362:	f7ff fcab 	bl	8001cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002366:	2100      	movs	r1, #0
 8002368:	4808      	ldr	r0, [pc, #32]	@ (800238c <MX_LPUART1_UART_Init+0x88>)
 800236a:	f004 ff72 	bl	8007252 <HAL_UARTEx_SetRxFifoThreshold>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8002374:	f7ff fca2 	bl	8001cbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002378:	4804      	ldr	r0, [pc, #16]	@ (800238c <MX_LPUART1_UART_Init+0x88>)
 800237a:	f004 fef3 	bl	8007164 <HAL_UARTEx_DisableFifoMode>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8002384:	f7ff fc9a 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20004734 	.word	0x20004734
 8002390:	40008000 	.word	0x40008000
 8002394:	001e8480 	.word	0x001e8480

08002398 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b09e      	sub	sp, #120	@ 0x78
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023b0:	f107 0310 	add.w	r3, r7, #16
 80023b4:	2254      	movs	r2, #84	@ 0x54
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f016 fe4d 	bl	8019058 <memset>
  if(uartHandle->Instance==LPUART1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a4e      	ldr	r2, [pc, #312]	@ (80024fc <HAL_UART_MspInit+0x164>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	f040 8094 	bne.w	80024f2 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80023ca:	2320      	movs	r3, #32
 80023cc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80023ce:	2300      	movs	r3, #0
 80023d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d2:	f107 0310 	add.w	r3, r7, #16
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 fc4a 	bl	8004c70 <HAL_RCCEx_PeriphCLKConfig>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023e2:	f7ff fc6b 	bl	8001cbc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80023e6:	4b46      	ldr	r3, [pc, #280]	@ (8002500 <HAL_UART_MspInit+0x168>)
 80023e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ea:	4a45      	ldr	r2, [pc, #276]	@ (8002500 <HAL_UART_MspInit+0x168>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80023f2:	4b43      	ldr	r3, [pc, #268]	@ (8002500 <HAL_UART_MspInit+0x168>)
 80023f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fe:	4b40      	ldr	r3, [pc, #256]	@ (8002500 <HAL_UART_MspInit+0x168>)
 8002400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002402:	4a3f      	ldr	r2, [pc, #252]	@ (8002500 <HAL_UART_MspInit+0x168>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800240a:	4b3d      	ldr	r3, [pc, #244]	@ (8002500 <HAL_UART_MspInit+0x168>)
 800240c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002416:	230c      	movs	r3, #12
 8002418:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002426:	230c      	movs	r3, #12
 8002428:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800242e:	4619      	mov	r1, r3
 8002430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002434:	f000 fd98 	bl	8002f68 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002438:	4b32      	ldr	r3, [pc, #200]	@ (8002504 <HAL_UART_MspInit+0x16c>)
 800243a:	4a33      	ldr	r2, [pc, #204]	@ (8002508 <HAL_UART_MspInit+0x170>)
 800243c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800243e:	4b31      	ldr	r3, [pc, #196]	@ (8002504 <HAL_UART_MspInit+0x16c>)
 8002440:	2222      	movs	r2, #34	@ 0x22
 8002442:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002444:	4b2f      	ldr	r3, [pc, #188]	@ (8002504 <HAL_UART_MspInit+0x16c>)
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800244a:	4b2e      	ldr	r3, [pc, #184]	@ (8002504 <HAL_UART_MspInit+0x16c>)
 800244c:	2200      	movs	r2, #0
 800244e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002450:	4b2c      	ldr	r3, [pc, #176]	@ (8002504 <HAL_UART_MspInit+0x16c>)
 8002452:	2280      	movs	r2, #128	@ 0x80
 8002454:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002456:	4b2b      	ldr	r3, [pc, #172]	@ (8002504 <HAL_UART_MspInit+0x16c>)
 8002458:	2200      	movs	r2, #0
 800245a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800245c:	4b29      	ldr	r3, [pc, #164]	@ (8002504 <HAL_UART_MspInit+0x16c>)
 800245e:	2200      	movs	r2, #0
 8002460:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8002462:	4b28      	ldr	r3, [pc, #160]	@ (8002504 <HAL_UART_MspInit+0x16c>)
 8002464:	2220      	movs	r2, #32
 8002466:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002468:	4b26      	ldr	r3, [pc, #152]	@ (8002504 <HAL_UART_MspInit+0x16c>)
 800246a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800246e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002470:	4824      	ldr	r0, [pc, #144]	@ (8002504 <HAL_UART_MspInit+0x16c>)
 8002472:	f000 fa3b 	bl	80028ec <HAL_DMA_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 800247c:	f7ff fc1e 	bl	8001cbc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a20      	ldr	r2, [pc, #128]	@ (8002504 <HAL_UART_MspInit+0x16c>)
 8002484:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002488:	4a1e      	ldr	r2, [pc, #120]	@ (8002504 <HAL_UART_MspInit+0x16c>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800248e:	4b1f      	ldr	r3, [pc, #124]	@ (800250c <HAL_UART_MspInit+0x174>)
 8002490:	4a1f      	ldr	r2, [pc, #124]	@ (8002510 <HAL_UART_MspInit+0x178>)
 8002492:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002494:	4b1d      	ldr	r3, [pc, #116]	@ (800250c <HAL_UART_MspInit+0x174>)
 8002496:	2223      	movs	r2, #35	@ 0x23
 8002498:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800249a:	4b1c      	ldr	r3, [pc, #112]	@ (800250c <HAL_UART_MspInit+0x174>)
 800249c:	2210      	movs	r2, #16
 800249e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a0:	4b1a      	ldr	r3, [pc, #104]	@ (800250c <HAL_UART_MspInit+0x174>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024a6:	4b19      	ldr	r3, [pc, #100]	@ (800250c <HAL_UART_MspInit+0x174>)
 80024a8:	2280      	movs	r2, #128	@ 0x80
 80024aa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ac:	4b17      	ldr	r3, [pc, #92]	@ (800250c <HAL_UART_MspInit+0x174>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024b2:	4b16      	ldr	r3, [pc, #88]	@ (800250c <HAL_UART_MspInit+0x174>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80024b8:	4b14      	ldr	r3, [pc, #80]	@ (800250c <HAL_UART_MspInit+0x174>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80024be:	4b13      	ldr	r3, [pc, #76]	@ (800250c <HAL_UART_MspInit+0x174>)
 80024c0:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80024c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80024c6:	4811      	ldr	r0, [pc, #68]	@ (800250c <HAL_UART_MspInit+0x174>)
 80024c8:	f000 fa10 	bl	80028ec <HAL_DMA_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 80024d2:	f7ff fbf3 	bl	8001cbc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a0c      	ldr	r2, [pc, #48]	@ (800250c <HAL_UART_MspInit+0x174>)
 80024da:	67da      	str	r2, [r3, #124]	@ 0x7c
 80024dc:	4a0b      	ldr	r2, [pc, #44]	@ (800250c <HAL_UART_MspInit+0x174>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2105      	movs	r1, #5
 80024e6:	205b      	movs	r0, #91	@ 0x5b
 80024e8:	f000 f9d8 	bl	800289c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80024ec:	205b      	movs	r0, #91	@ 0x5b
 80024ee:	f000 f9ef 	bl	80028d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80024f2:	bf00      	nop
 80024f4:	3778      	adds	r7, #120	@ 0x78
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40008000 	.word	0x40008000
 8002500:	40021000 	.word	0x40021000
 8002504:	200047c8 	.word	0x200047c8
 8002508:	40020008 	.word	0x40020008
 800250c:	20004828 	.word	0x20004828
 8002510:	4002001c 	.word	0x4002001c

08002514 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002522:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002524:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002528:	4904      	ldr	r1, [pc, #16]	@ (800253c <cubemx_transport_open+0x28>)
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f003 fa0a 	bl	8005944 <HAL_UART_Receive_DMA>
    return true;
 8002530:	2301      	movs	r3, #1
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20004888 	.word	0x20004888

08002540 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800254e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f003 fa43 	bl	80059dc <HAL_UART_DMAStop>
    return true;
 8002556:	2301      	movs	r3, #1
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002574:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257c:	2b20      	cmp	r3, #32
 800257e:	d11b      	bne.n	80025b8 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	b29b      	uxth	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	6978      	ldr	r0, [r7, #20]
 800258a:	f003 f95b 	bl	8005844 <HAL_UART_Transmit_DMA>
 800258e:	4603      	mov	r3, r0
 8002590:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002592:	e002      	b.n	800259a <cubemx_transport_write+0x3a>
            osDelay(1);
 8002594:	2001      	movs	r0, #1
 8002596:	f005 fba5 	bl	8007ce4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800259a:	7cfb      	ldrb	r3, [r7, #19]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d104      	bne.n	80025aa <cubemx_transport_write+0x4a>
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	d1f4      	bne.n	8002594 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 80025aa:	7cfb      	ldrb	r3, [r7, #19]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <cubemx_transport_write+0x54>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	e002      	b.n	80025ba <cubemx_transport_write+0x5a>
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <cubemx_transport_write+0x5a>
    }else{
        return 0;
 80025b8:	2300      	movs	r3, #0
    }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80025d8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80025de:	b672      	cpsid	i
}
 80025e0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80025f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002660 <cubemx_transport_read+0x9c>)
 80025f2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025f4:	b662      	cpsie	i
}
 80025f6:	bf00      	nop
        __enable_irq();
        ms_used++;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	3301      	adds	r3, #1
 80025fc:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80025fe:	2001      	movs	r0, #1
 8002600:	f005 fb70 	bl	8007ce4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002604:	4b17      	ldr	r3, [pc, #92]	@ (8002664 <cubemx_transport_read+0xa0>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <cubemx_transport_read+0x9c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d103      	bne.n	8002618 <cubemx_transport_read+0x54>
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	dbe2      	blt.n	80025de <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800261c:	e011      	b.n	8002642 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 800261e:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <cubemx_transport_read+0xa0>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	440b      	add	r3, r1
 8002628:	490f      	ldr	r1, [pc, #60]	@ (8002668 <cubemx_transport_read+0xa4>)
 800262a:	5c8a      	ldrb	r2, [r1, r2]
 800262c:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <cubemx_transport_read+0xa0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	3301      	adds	r3, #1
 8002634:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002638:	4a0a      	ldr	r2, [pc, #40]	@ (8002664 <cubemx_transport_read+0xa0>)
 800263a:	6013      	str	r3, [r2, #0]
        wrote++;
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	3301      	adds	r3, #1
 8002640:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002642:	4b08      	ldr	r3, [pc, #32]	@ (8002664 <cubemx_transport_read+0xa0>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <cubemx_transport_read+0x9c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d003      	beq.n	8002656 <cubemx_transport_read+0x92>
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	429a      	cmp	r2, r3
 8002654:	d3e3      	bcc.n	800261e <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8002656:	69bb      	ldr	r3, [r7, #24]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3720      	adds	r7, #32
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	2000508c 	.word	0x2000508c
 8002664:	20005088 	.word	0x20005088
 8002668:	20004888 	.word	0x20004888

0800266c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800266c:	480d      	ldr	r0, [pc, #52]	@ (80026a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800266e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002670:	f7ff fe36 	bl	80022e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002674:	480c      	ldr	r0, [pc, #48]	@ (80026a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002676:	490d      	ldr	r1, [pc, #52]	@ (80026ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002678:	4a0d      	ldr	r2, [pc, #52]	@ (80026b0 <LoopForever+0xe>)
  movs r3, #0
 800267a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800267c:	e002      	b.n	8002684 <LoopCopyDataInit>

0800267e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800267e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002682:	3304      	adds	r3, #4

08002684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002688:	d3f9      	bcc.n	800267e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800268a:	4a0a      	ldr	r2, [pc, #40]	@ (80026b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800268c:	4c0a      	ldr	r4, [pc, #40]	@ (80026b8 <LoopForever+0x16>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002690:	e001      	b.n	8002696 <LoopFillZerobss>

08002692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002694:	3204      	adds	r2, #4

08002696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002698:	d3fb      	bcc.n	8002692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800269a:	f016 fd77 	bl	801918c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800269e:	f7ff fa97 	bl	8001bd0 <main>

080026a2 <LoopForever>:

LoopForever:
    b LoopForever
 80026a2:	e7fe      	b.n	80026a2 <LoopForever>
  ldr   r0, =_estack
 80026a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ac:	200007d0 	.word	0x200007d0
  ldr r2, =_sidata
 80026b0:	0801baf0 	.word	0x0801baf0
  ldr r2, =_sbss
 80026b4:	200007d0 	.word	0x200007d0
  ldr r4, =_ebss
 80026b8:	2000b7ec 	.word	0x2000b7ec

080026bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026bc:	e7fe      	b.n	80026bc <ADC1_2_IRQHandler>

080026be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c8:	2003      	movs	r0, #3
 80026ca:	f000 f8dc 	bl	8002886 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026ce:	200f      	movs	r0, #15
 80026d0:	f7ff fc88 	bl	8001fe4 <HAL_InitTick>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	71fb      	strb	r3, [r7, #7]
 80026de:	e001      	b.n	80026e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026e0:	f7ff fc56 	bl	8001f90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026e4:	79fb      	ldrb	r3, [r7, #7]

}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f4:	4b05      	ldr	r3, [pc, #20]	@ (800270c <HAL_IncTick+0x1c>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <HAL_IncTick+0x20>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4413      	add	r3, r2
 80026fe:	4a03      	ldr	r2, [pc, #12]	@ (800270c <HAL_IncTick+0x1c>)
 8002700:	6013      	str	r3, [r2, #0]
}
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	20005090 	.word	0x20005090
 8002710:	2000000c 	.word	0x2000000c

08002714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return uwTick;
 8002718:	4b03      	ldr	r3, [pc, #12]	@ (8002728 <HAL_GetTick+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20005090 	.word	0x20005090

0800272c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0c      	ldr	r3, [pc, #48]	@ (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002754:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800275c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275e:	4a04      	ldr	r2, [pc, #16]	@ (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	60d3      	str	r3, [r2, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	@ (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db0b      	blt.n	80027ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4907      	ldr	r1, [pc, #28]	@ (80027c8 <__NVIC_EnableIRQ+0x38>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000e100 	.word	0xe000e100

080027cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	6039      	str	r1, [r7, #0]
 80027d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0a      	blt.n	80027f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	490c      	ldr	r1, [pc, #48]	@ (8002818 <__NVIC_SetPriority+0x4c>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f4:	e00a      	b.n	800280c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4908      	ldr	r1, [pc, #32]	@ (800281c <__NVIC_SetPriority+0x50>)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	3b04      	subs	r3, #4
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	@ 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1c3 0307 	rsb	r3, r3, #7
 800283a:	2b04      	cmp	r3, #4
 800283c:	bf28      	it	cs
 800283e:	2304      	movcs	r3, #4
 8002840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3304      	adds	r3, #4
 8002846:	2b06      	cmp	r3, #6
 8002848:	d902      	bls.n	8002850 <NVIC_EncodePriority+0x30>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3b03      	subs	r3, #3
 800284e:	e000      	b.n	8002852 <NVIC_EncodePriority+0x32>
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002868:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43d9      	mvns	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	4313      	orrs	r3, r2
         );
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	@ 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ff4c 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028aa:	f7ff ff63 	bl	8002774 <__NVIC_GetPriorityGrouping>
 80028ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	6978      	ldr	r0, [r7, #20]
 80028b6:	f7ff ffb3 	bl	8002820 <NVIC_EncodePriority>
 80028ba:	4602      	mov	r2, r0
 80028bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c0:	4611      	mov	r1, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff ff82 	bl	80027cc <__NVIC_SetPriority>
}
 80028c8:	bf00      	nop
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ff56 	bl	8002790 <__NVIC_EnableIRQ>
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e08d      	b.n	8002a1a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	4b47      	ldr	r3, [pc, #284]	@ (8002a24 <HAL_DMA_Init+0x138>)
 8002906:	429a      	cmp	r2, r3
 8002908:	d80f      	bhi.n	800292a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	4b45      	ldr	r3, [pc, #276]	@ (8002a28 <HAL_DMA_Init+0x13c>)
 8002912:	4413      	add	r3, r2
 8002914:	4a45      	ldr	r2, [pc, #276]	@ (8002a2c <HAL_DMA_Init+0x140>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	009a      	lsls	r2, r3, #2
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a42      	ldr	r2, [pc, #264]	@ (8002a30 <HAL_DMA_Init+0x144>)
 8002926:	641a      	str	r2, [r3, #64]	@ 0x40
 8002928:	e00e      	b.n	8002948 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	4b40      	ldr	r3, [pc, #256]	@ (8002a34 <HAL_DMA_Init+0x148>)
 8002932:	4413      	add	r3, r2
 8002934:	4a3d      	ldr	r2, [pc, #244]	@ (8002a2c <HAL_DMA_Init+0x140>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	009a      	lsls	r2, r3, #2
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a3c      	ldr	r2, [pc, #240]	@ (8002a38 <HAL_DMA_Init+0x14c>)
 8002946:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800295e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002962:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800296c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002978:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002984:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fa82 	bl	8002ea4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029a8:	d102      	bne.n	80029b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029c4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_DMA_Init+0x104>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d80c      	bhi.n	80029f0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 faa2 	bl	8002f20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	e008      	b.n	8002a02 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40020407 	.word	0x40020407
 8002a28:	bffdfff8 	.word	0xbffdfff8
 8002a2c:	cccccccd 	.word	0xcccccccd
 8002a30:	40020000 	.word	0x40020000
 8002a34:	bffdfbf8 	.word	0xbffdfbf8
 8002a38:	40020400 	.word	0x40020400

08002a3c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_DMA_Start_IT+0x20>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e066      	b.n	8002b2a <HAL_DMA_Start_IT+0xee>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d155      	bne.n	8002b1c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 f9c7 	bl	8002e28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 020e 	orr.w	r2, r2, #14
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e00f      	b.n	8002ad4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0204 	bic.w	r2, r2, #4
 8002ac2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 020a 	orr.w	r2, r2, #10
 8002ad2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d007      	beq.n	8002af2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002af0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b08:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e005      	b.n	8002b28 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b24:	2302      	movs	r3, #2
 8002b26:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d005      	beq.n	8002b56 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
 8002b54:	e037      	b.n	8002bc6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 020e 	bic.w	r2, r2, #14
 8002b64:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b74:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0201 	bic.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8a:	f003 021f 	and.w	r2, r3, #31
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	2101      	movs	r1, #1
 8002b94:	fa01 f202 	lsl.w	r2, r1, r2
 8002b98:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ba2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00c      	beq.n	8002bc6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bba:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002bc4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d00d      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2204      	movs	r2, #4
 8002c00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
 8002c16:	e047      	b.n	8002ca8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 020e 	bic.w	r2, r2, #14
 8002c26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4c:	f003 021f 	and.w	r2, r3, #31
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	2101      	movs	r1, #1
 8002c56:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c64:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00c      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c7c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002c86:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	4798      	blx	r3
    }
  }
  return status;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d026      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x7a>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d021      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d107      	bne.n	8002d06 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0204 	bic.w	r2, r2, #4
 8002d04:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0a:	f003 021f 	and.w	r2, r3, #31
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	2104      	movs	r1, #4
 8002d14:	fa01 f202 	lsl.w	r2, r1, r2
 8002d18:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d071      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002d2a:	e06c      	b.n	8002e06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	2202      	movs	r2, #2
 8002d36:	409a      	lsls	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d02e      	beq.n	8002d9e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d029      	beq.n	8002d9e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10b      	bne.n	8002d70 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 020a 	bic.w	r2, r2, #10
 8002d66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d74:	f003 021f 	and.w	r2, r3, #31
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	2102      	movs	r1, #2
 8002d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d82:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d038      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002d9c:	e033      	b.n	8002e06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da2:	f003 031f 	and.w	r3, r3, #31
 8002da6:	2208      	movs	r2, #8
 8002da8:	409a      	lsls	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d02a      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d025      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 020e 	bic.w	r2, r2, #14
 8002dca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd0:	f003 021f 	and.w	r2, r3, #31
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	2101      	movs	r1, #1
 8002dda:	fa01 f202 	lsl.w	r2, r1, r2
 8002dde:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
}
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e3e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d004      	beq.n	8002e52 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e50:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e56:	f003 021f 	and.w	r2, r3, #31
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f202 	lsl.w	r2, r1, r2
 8002e64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b10      	cmp	r3, #16
 8002e74:	d108      	bne.n	8002e88 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e86:	e007      	b.n	8002e98 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	60da      	str	r2, [r3, #12]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b16      	ldr	r3, [pc, #88]	@ (8002f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d802      	bhi.n	8002ebe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002eb8:	4b15      	ldr	r3, [pc, #84]	@ (8002f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	e001      	b.n	8002ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002ebe:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002ec0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	3b08      	subs	r3, #8
 8002ece:	4a12      	ldr	r2, [pc, #72]	@ (8002f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	009a      	lsls	r2, r3, #2
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a0b      	ldr	r2, [pc, #44]	@ (8002f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002eee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002efe:	bf00      	nop
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40020407 	.word	0x40020407
 8002f10:	40020800 	.word	0x40020800
 8002f14:	40020820 	.word	0x40020820
 8002f18:	cccccccd 	.word	0xcccccccd
 8002f1c:	40020880 	.word	0x40020880

08002f20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4b0b      	ldr	r3, [pc, #44]	@ (8002f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	461a      	mov	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a08      	ldr	r2, [pc, #32]	@ (8002f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002f42:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	1000823f 	.word	0x1000823f
 8002f64:	40020940 	.word	0x40020940

08002f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f76:	e15a      	b.n	800322e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	fa01 f303 	lsl.w	r3, r1, r3
 8002f84:	4013      	ands	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 814c 	beq.w	8003228 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d005      	beq.n	8002fa8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d130      	bne.n	800300a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fde:	2201      	movs	r2, #1
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	f003 0201 	and.w	r2, r3, #1
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b03      	cmp	r3, #3
 8003014:	d017      	beq.n	8003046 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	2203      	movs	r2, #3
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4013      	ands	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d123      	bne.n	800309a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	08da      	lsrs	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3208      	adds	r2, #8
 800305a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800305e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	220f      	movs	r2, #15
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4013      	ands	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	08da      	lsrs	r2, r3, #3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3208      	adds	r2, #8
 8003094:	6939      	ldr	r1, [r7, #16]
 8003096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	2203      	movs	r2, #3
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4013      	ands	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 0203 	and.w	r2, r3, #3
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80a6 	beq.w	8003228 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030dc:	4b5b      	ldr	r3, [pc, #364]	@ (800324c <HAL_GPIO_Init+0x2e4>)
 80030de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e0:	4a5a      	ldr	r2, [pc, #360]	@ (800324c <HAL_GPIO_Init+0x2e4>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80030e8:	4b58      	ldr	r3, [pc, #352]	@ (800324c <HAL_GPIO_Init+0x2e4>)
 80030ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f4:	4a56      	ldr	r2, [pc, #344]	@ (8003250 <HAL_GPIO_Init+0x2e8>)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	3302      	adds	r3, #2
 80030fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003100:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	220f      	movs	r2, #15
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800311e:	d01f      	beq.n	8003160 <HAL_GPIO_Init+0x1f8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a4c      	ldr	r2, [pc, #304]	@ (8003254 <HAL_GPIO_Init+0x2ec>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d019      	beq.n	800315c <HAL_GPIO_Init+0x1f4>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a4b      	ldr	r2, [pc, #300]	@ (8003258 <HAL_GPIO_Init+0x2f0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d013      	beq.n	8003158 <HAL_GPIO_Init+0x1f0>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a4a      	ldr	r2, [pc, #296]	@ (800325c <HAL_GPIO_Init+0x2f4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00d      	beq.n	8003154 <HAL_GPIO_Init+0x1ec>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a49      	ldr	r2, [pc, #292]	@ (8003260 <HAL_GPIO_Init+0x2f8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d007      	beq.n	8003150 <HAL_GPIO_Init+0x1e8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a48      	ldr	r2, [pc, #288]	@ (8003264 <HAL_GPIO_Init+0x2fc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d101      	bne.n	800314c <HAL_GPIO_Init+0x1e4>
 8003148:	2305      	movs	r3, #5
 800314a:	e00a      	b.n	8003162 <HAL_GPIO_Init+0x1fa>
 800314c:	2306      	movs	r3, #6
 800314e:	e008      	b.n	8003162 <HAL_GPIO_Init+0x1fa>
 8003150:	2304      	movs	r3, #4
 8003152:	e006      	b.n	8003162 <HAL_GPIO_Init+0x1fa>
 8003154:	2303      	movs	r3, #3
 8003156:	e004      	b.n	8003162 <HAL_GPIO_Init+0x1fa>
 8003158:	2302      	movs	r3, #2
 800315a:	e002      	b.n	8003162 <HAL_GPIO_Init+0x1fa>
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <HAL_GPIO_Init+0x1fa>
 8003160:	2300      	movs	r3, #0
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	f002 0203 	and.w	r2, r2, #3
 8003168:	0092      	lsls	r2, r2, #2
 800316a:	4093      	lsls	r3, r2
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003172:	4937      	ldr	r1, [pc, #220]	@ (8003250 <HAL_GPIO_Init+0x2e8>)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	3302      	adds	r3, #2
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003180:	4b39      	ldr	r3, [pc, #228]	@ (8003268 <HAL_GPIO_Init+0x300>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	43db      	mvns	r3, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4013      	ands	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031a4:	4a30      	ldr	r2, [pc, #192]	@ (8003268 <HAL_GPIO_Init+0x300>)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003268 <HAL_GPIO_Init+0x300>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4013      	ands	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031ce:	4a26      	ldr	r2, [pc, #152]	@ (8003268 <HAL_GPIO_Init+0x300>)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80031d4:	4b24      	ldr	r3, [pc, #144]	@ (8003268 <HAL_GPIO_Init+0x300>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	43db      	mvns	r3, r3
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003268 <HAL_GPIO_Init+0x300>)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003268 <HAL_GPIO_Init+0x300>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	43db      	mvns	r3, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003222:	4a11      	ldr	r2, [pc, #68]	@ (8003268 <HAL_GPIO_Init+0x300>)
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	3301      	adds	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	f47f ae9d 	bne.w	8002f78 <HAL_GPIO_Init+0x10>
  }
}
 800323e:	bf00      	nop
 8003240:	bf00      	nop
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	40021000 	.word	0x40021000
 8003250:	40010000 	.word	0x40010000
 8003254:	48000400 	.word	0x48000400
 8003258:	48000800 	.word	0x48000800
 800325c:	48000c00 	.word	0x48000c00
 8003260:	48001000 	.word	0x48001000
 8003264:	48001400 	.word	0x48001400
 8003268:	40010400 	.word	0x40010400

0800326c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	887b      	ldrh	r3, [r7, #2]
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
 8003288:	e001      	b.n	800328e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800328a:	2300      	movs	r3, #0
 800328c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800328e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	807b      	strh	r3, [r7, #2]
 80032a8:	4613      	mov	r3, r2
 80032aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032ac:	787b      	ldrb	r3, [r7, #1]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032b8:	e002      	b.n	80032c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032ba:	887a      	ldrh	r2, [r7, #2]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032de:	887a      	ldrh	r2, [r7, #2]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4013      	ands	r3, r2
 80032e4:	041a      	lsls	r2, r3, #16
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	43d9      	mvns	r1, r3
 80032ea:	887b      	ldrh	r3, [r7, #2]
 80032ec:	400b      	ands	r3, r1
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	619a      	str	r2, [r3, #24]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800330a:	4b08      	ldr	r3, [pc, #32]	@ (800332c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800330c:	695a      	ldr	r2, [r3, #20]
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d006      	beq.n	8003324 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003316:	4a05      	ldr	r2, [pc, #20]	@ (800332c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f806 	bl	8003330 <HAL_GPIO_EXTI_Callback>
  }
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40010400 	.word	0x40010400

08003330 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e08d      	b.n	8003474 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d106      	bne.n	8003372 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7fe fbb7 	bl	8001ae0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2224      	movs	r2, #36	@ 0x24
 8003376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0201 	bic.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003396:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033a6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d107      	bne.n	80033c0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	e006      	b.n	80033ce <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80033cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d108      	bne.n	80033e8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	e007      	b.n	80033f8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033f6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800340a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800341a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69d9      	ldr	r1, [r3, #28]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1a      	ldr	r2, [r3, #32]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	4608      	mov	r0, r1
 8003486:	4611      	mov	r1, r2
 8003488:	461a      	mov	r2, r3
 800348a:	4603      	mov	r3, r0
 800348c:	817b      	strh	r3, [r7, #10]
 800348e:	460b      	mov	r3, r1
 8003490:	813b      	strh	r3, [r7, #8]
 8003492:	4613      	mov	r3, r2
 8003494:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b20      	cmp	r3, #32
 80034a0:	f040 80f9 	bne.w	8003696 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_I2C_Mem_Write+0x34>
 80034aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d105      	bne.n	80034bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034b6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0ed      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_I2C_Mem_Write+0x4e>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e0e6      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034d2:	f7ff f91f 	bl	8002714 <HAL_GetTick>
 80034d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2319      	movs	r3, #25
 80034de:	2201      	movs	r2, #1
 80034e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fac3 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0d1      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2221      	movs	r2, #33	@ 0x21
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2240      	movs	r2, #64	@ 0x40
 8003500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a3a      	ldr	r2, [r7, #32]
 800350e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003514:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800351c:	88f8      	ldrh	r0, [r7, #6]
 800351e:	893a      	ldrh	r2, [r7, #8]
 8003520:	8979      	ldrh	r1, [r7, #10]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	4603      	mov	r3, r0
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f9d3 	bl	80038d8 <I2C_RequestMemoryWrite>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0a9      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	2bff      	cmp	r3, #255	@ 0xff
 800354c:	d90e      	bls.n	800356c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	22ff      	movs	r2, #255	@ 0xff
 8003552:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003558:	b2da      	uxtb	r2, r3
 800355a:	8979      	ldrh	r1, [r7, #10]
 800355c:	2300      	movs	r3, #0
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fc47 	bl	8003df8 <I2C_TransferConfig>
 800356a:	e00f      	b.n	800358c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357a:	b2da      	uxtb	r2, r3
 800357c:	8979      	ldrh	r1, [r7, #10]
 800357e:	2300      	movs	r3, #0
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fc36 	bl	8003df8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fac6 	bl	8003b22 <I2C_WaitOnTXISFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e07b      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d034      	beq.n	8003644 <HAL_I2C_Mem_Write+0x1c8>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d130      	bne.n	8003644 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e8:	2200      	movs	r2, #0
 80035ea:	2180      	movs	r1, #128	@ 0x80
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fa3f 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e04d      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2bff      	cmp	r3, #255	@ 0xff
 8003604:	d90e      	bls.n	8003624 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	22ff      	movs	r2, #255	@ 0xff
 800360a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003610:	b2da      	uxtb	r2, r3
 8003612:	8979      	ldrh	r1, [r7, #10]
 8003614:	2300      	movs	r3, #0
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 fbeb 	bl	8003df8 <I2C_TransferConfig>
 8003622:	e00f      	b.n	8003644 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003632:	b2da      	uxtb	r2, r3
 8003634:	8979      	ldrh	r1, [r7, #10]
 8003636:	2300      	movs	r3, #0
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 fbda 	bl	8003df8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d19e      	bne.n	800358c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 faac 	bl	8003bb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e01a      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2220      	movs	r2, #32
 8003668:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b0a      	ldr	r3, [pc, #40]	@ (80036a0 <HAL_I2C_Mem_Write+0x224>)
 8003676:	400b      	ands	r3, r1
 8003678:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	e000      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003696:	2302      	movs	r3, #2
  }
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	fe00e800 	.word	0xfe00e800

080036a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	4608      	mov	r0, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	817b      	strh	r3, [r7, #10]
 80036b6:	460b      	mov	r3, r1
 80036b8:	813b      	strh	r3, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	f040 80fd 	bne.w	80038c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_I2C_Mem_Read+0x34>
 80036d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d105      	bne.n	80036e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036de:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0f1      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <HAL_I2C_Mem_Read+0x4e>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e0ea      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036fa:	f7ff f80b 	bl	8002714 <HAL_GetTick>
 80036fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	2319      	movs	r3, #25
 8003706:	2201      	movs	r2, #1
 8003708:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f9af 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0d5      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2222      	movs	r2, #34	@ 0x22
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2240      	movs	r2, #64	@ 0x40
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a3a      	ldr	r2, [r7, #32]
 8003736:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800373c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003744:	88f8      	ldrh	r0, [r7, #6]
 8003746:	893a      	ldrh	r2, [r7, #8]
 8003748:	8979      	ldrh	r1, [r7, #10]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	4603      	mov	r3, r0
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f913 	bl	8003980 <I2C_RequestMemoryRead>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0ad      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	2bff      	cmp	r3, #255	@ 0xff
 8003774:	d90e      	bls.n	8003794 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	22ff      	movs	r2, #255	@ 0xff
 800377a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003780:	b2da      	uxtb	r2, r3
 8003782:	8979      	ldrh	r1, [r7, #10]
 8003784:	4b52      	ldr	r3, [pc, #328]	@ (80038d0 <HAL_I2C_Mem_Read+0x22c>)
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 fb33 	bl	8003df8 <I2C_TransferConfig>
 8003792:	e00f      	b.n	80037b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	8979      	ldrh	r1, [r7, #10]
 80037a6:	4b4a      	ldr	r3, [pc, #296]	@ (80038d0 <HAL_I2C_Mem_Read+0x22c>)
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fb22 	bl	8003df8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ba:	2200      	movs	r2, #0
 80037bc:	2104      	movs	r1, #4
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 f956 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e07c      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d034      	beq.n	8003874 <HAL_I2C_Mem_Read+0x1d0>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380e:	2b00      	cmp	r3, #0
 8003810:	d130      	bne.n	8003874 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003818:	2200      	movs	r2, #0
 800381a:	2180      	movs	r1, #128	@ 0x80
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f927 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e04d      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	2bff      	cmp	r3, #255	@ 0xff
 8003834:	d90e      	bls.n	8003854 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	22ff      	movs	r2, #255	@ 0xff
 800383a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003840:	b2da      	uxtb	r2, r3
 8003842:	8979      	ldrh	r1, [r7, #10]
 8003844:	2300      	movs	r3, #0
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 fad3 	bl	8003df8 <I2C_TransferConfig>
 8003852:	e00f      	b.n	8003874 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003862:	b2da      	uxtb	r2, r3
 8003864:	8979      	ldrh	r1, [r7, #10]
 8003866:	2300      	movs	r3, #0
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fac2 	bl	8003df8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d19a      	bne.n	80037b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f994 	bl	8003bb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e01a      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2220      	movs	r2, #32
 8003898:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4b0b      	ldr	r3, [pc, #44]	@ (80038d4 <HAL_I2C_Mem_Read+0x230>)
 80038a6:	400b      	ands	r3, r1
 80038a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e000      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80038c6:	2302      	movs	r3, #2
  }
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	80002400 	.word	0x80002400
 80038d4:	fe00e800 	.word	0xfe00e800

080038d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	4608      	mov	r0, r1
 80038e2:	4611      	mov	r1, r2
 80038e4:	461a      	mov	r2, r3
 80038e6:	4603      	mov	r3, r0
 80038e8:	817b      	strh	r3, [r7, #10]
 80038ea:	460b      	mov	r3, r1
 80038ec:	813b      	strh	r3, [r7, #8]
 80038ee:	4613      	mov	r3, r2
 80038f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	8979      	ldrh	r1, [r7, #10]
 80038f8:	4b20      	ldr	r3, [pc, #128]	@ (800397c <I2C_RequestMemoryWrite+0xa4>)
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 fa79 	bl	8003df8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	69b9      	ldr	r1, [r7, #24]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f909 	bl	8003b22 <I2C_WaitOnTXISFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e02c      	b.n	8003974 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003920:	893b      	ldrh	r3, [r7, #8]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	629a      	str	r2, [r3, #40]	@ 0x28
 800392a:	e015      	b.n	8003958 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800392c:	893b      	ldrh	r3, [r7, #8]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	b29b      	uxth	r3, r3
 8003932:	b2da      	uxtb	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	69b9      	ldr	r1, [r7, #24]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f8ef 	bl	8003b22 <I2C_WaitOnTXISFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e012      	b.n	8003974 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800394e:	893b      	ldrh	r3, [r7, #8]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2200      	movs	r2, #0
 8003960:	2180      	movs	r1, #128	@ 0x80
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f884 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	80002000 	.word	0x80002000

08003980 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af02      	add	r7, sp, #8
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	4608      	mov	r0, r1
 800398a:	4611      	mov	r1, r2
 800398c:	461a      	mov	r2, r3
 800398e:	4603      	mov	r3, r0
 8003990:	817b      	strh	r3, [r7, #10]
 8003992:	460b      	mov	r3, r1
 8003994:	813b      	strh	r3, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	8979      	ldrh	r1, [r7, #10]
 80039a0:	4b20      	ldr	r3, [pc, #128]	@ (8003a24 <I2C_RequestMemoryRead+0xa4>)
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	2300      	movs	r3, #0
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fa26 	bl	8003df8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	69b9      	ldr	r1, [r7, #24]
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f8b6 	bl	8003b22 <I2C_WaitOnTXISFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e02c      	b.n	8003a1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039c0:	88fb      	ldrh	r3, [r7, #6]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d105      	bne.n	80039d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039c6:	893b      	ldrh	r3, [r7, #8]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80039d0:	e015      	b.n	80039fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039d2:	893b      	ldrh	r3, [r7, #8]
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	69b9      	ldr	r1, [r7, #24]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f89c 	bl	8003b22 <I2C_WaitOnTXISFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e012      	b.n	8003a1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039f4:	893b      	ldrh	r3, [r7, #8]
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2200      	movs	r2, #0
 8003a06:	2140      	movs	r1, #64	@ 0x40
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f831 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	80002000 	.word	0x80002000

08003a28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d103      	bne.n	8003a46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2200      	movs	r2, #0
 8003a44:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d007      	beq.n	8003a64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	619a      	str	r2, [r3, #24]
  }
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a80:	e03b      	b.n	8003afa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	6839      	ldr	r1, [r7, #0]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f8d6 	bl	8003c38 <I2C_IsErrorOccurred>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e041      	b.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a9c:	d02d      	beq.n	8003afa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9e:	f7fe fe39 	bl	8002714 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d302      	bcc.n	8003ab4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d122      	bne.n	8003afa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	4013      	ands	r3, r2
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2301      	moveq	r3, #1
 8003ac6:	2300      	movne	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d113      	bne.n	8003afa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad6:	f043 0220 	orr.w	r2, r3, #32
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e00f      	b.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4013      	ands	r3, r2
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	bf0c      	ite	eq
 8003b0a:	2301      	moveq	r3, #1
 8003b0c:	2300      	movne	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	461a      	mov	r2, r3
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d0b4      	beq.n	8003a82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b2e:	e033      	b.n	8003b98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f87f 	bl	8003c38 <I2C_IsErrorOccurred>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e031      	b.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b4a:	d025      	beq.n	8003b98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4c:	f7fe fde2 	bl	8002714 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d302      	bcc.n	8003b62 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d11a      	bne.n	8003b98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d013      	beq.n	8003b98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e007      	b.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d1c4      	bne.n	8003b30 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bbc:	e02f      	b.n	8003c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f838 	bl	8003c38 <I2C_IsErrorOccurred>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e02d      	b.n	8003c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd2:	f7fe fd9f 	bl	8002714 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d11a      	bne.n	8003c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d013      	beq.n	8003c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfa:	f043 0220 	orr.w	r2, r3, #32
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e007      	b.n	8003c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d1c8      	bne.n	8003bbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	@ 0x28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c52:	2300      	movs	r3, #0
 8003c54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d068      	beq.n	8003d36 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2210      	movs	r2, #16
 8003c6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c6c:	e049      	b.n	8003d02 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c74:	d045      	beq.n	8003d02 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c76:	f7fe fd4d 	bl	8002714 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d302      	bcc.n	8003c8c <I2C_IsErrorOccurred+0x54>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d13a      	bne.n	8003d02 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cae:	d121      	bne.n	8003cf4 <I2C_IsErrorOccurred+0xbc>
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cb6:	d01d      	beq.n	8003cf4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003cb8:	7cfb      	ldrb	r3, [r7, #19]
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	d01a      	beq.n	8003cf4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ccc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003cce:	f7fe fd21 	bl	8002714 <HAL_GetTick>
 8003cd2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cd4:	e00e      	b.n	8003cf4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003cd6:	f7fe fd1d 	bl	8002714 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b19      	cmp	r3, #25
 8003ce2:	d907      	bls.n	8003cf4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	f043 0320 	orr.w	r3, r3, #32
 8003cea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003cf2:	e006      	b.n	8003d02 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d1e9      	bne.n	8003cd6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d003      	beq.n	8003d18 <I2C_IsErrorOccurred+0xe0>
 8003d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0aa      	beq.n	8003c6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d103      	bne.n	8003d28 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2220      	movs	r2, #32
 8003d26:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	f043 0304 	orr.w	r3, r3, #4
 8003d2e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00b      	beq.n	8003d60 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00b      	beq.n	8003d82 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	f043 0308 	orr.w	r3, r3, #8
 8003d70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00b      	beq.n	8003da4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	f043 0302 	orr.w	r3, r3, #2
 8003d92:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01c      	beq.n	8003de6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7ff fe3b 	bl	8003a28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003df4 <I2C_IsErrorOccurred+0x1bc>)
 8003dbe:	400b      	ands	r3, r1
 8003dc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003de6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3728      	adds	r7, #40	@ 0x28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	fe00e800 	.word	0xfe00e800

08003df8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	607b      	str	r3, [r7, #4]
 8003e02:	460b      	mov	r3, r1
 8003e04:	817b      	strh	r3, [r7, #10]
 8003e06:	4613      	mov	r3, r2
 8003e08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e0a:	897b      	ldrh	r3, [r7, #10]
 8003e0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e10:	7a7b      	ldrb	r3, [r7, #9]
 8003e12:	041b      	lsls	r3, r3, #16
 8003e14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	0d5b      	lsrs	r3, r3, #21
 8003e32:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e36:	4b08      	ldr	r3, [pc, #32]	@ (8003e58 <I2C_TransferConfig+0x60>)
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	ea02 0103 	and.w	r1, r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	03ff63ff 	.word	0x03ff63ff

08003e5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d138      	bne.n	8003ee4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e032      	b.n	8003ee6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2224      	movs	r2, #36	@ 0x24
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0201 	bic.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003eae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6819      	ldr	r1, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e000      	b.n	8003ee6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
  }
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	d139      	bne.n	8003f7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e033      	b.n	8003f7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2224      	movs	r2, #36	@ 0x24
 8003f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0201 	bic.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	021b      	lsls	r3, r3, #8
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e000      	b.n	8003f7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f7c:	2302      	movs	r3, #2
  }
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e041      	b.n	8004020 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8003fa4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f245 5255 	movw	r2, #21845	@ 0x5555
 8003fae:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6852      	ldr	r2, [r2, #4]
 8003fb8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6892      	ldr	r2, [r2, #8]
 8003fc2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003fc4:	f7fe fba6 	bl	8002714 <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003fca:	e00f      	b.n	8003fec <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003fcc:	f7fe fba2 	bl	8002714 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b31      	cmp	r3, #49	@ 0x31
 8003fd8:	d908      	bls.n	8003fec <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e019      	b.n	8004020 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e8      	bne.n	8003fcc <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	429a      	cmp	r2, r3
 8004006:	d005      	beq.n	8004014 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	68d2      	ldr	r2, [r2, #12]
 8004010:	611a      	str	r2, [r3, #16]
 8004012:	e004      	b.n	800401e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800401c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004038:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d141      	bne.n	80040da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004056:	4b4b      	ldr	r3, [pc, #300]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800405e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004062:	d131      	bne.n	80040c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004064:	4b47      	ldr	r3, [pc, #284]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800406a:	4a46      	ldr	r2, [pc, #280]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004070:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004074:	4b43      	ldr	r3, [pc, #268]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800407c:	4a41      	ldr	r2, [pc, #260]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004082:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004084:	4b40      	ldr	r3, [pc, #256]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2232      	movs	r2, #50	@ 0x32
 800408a:	fb02 f303 	mul.w	r3, r2, r3
 800408e:	4a3f      	ldr	r2, [pc, #252]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004090:	fba2 2303 	umull	r2, r3, r2, r3
 8004094:	0c9b      	lsrs	r3, r3, #18
 8004096:	3301      	adds	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800409a:	e002      	b.n	80040a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3b01      	subs	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a2:	4b38      	ldr	r3, [pc, #224]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ae:	d102      	bne.n	80040b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f2      	bne.n	800409c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040b6:	4b33      	ldr	r3, [pc, #204]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040c2:	d158      	bne.n	8004176 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e057      	b.n	8004178 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80040d8:	e04d      	b.n	8004176 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040e0:	d141      	bne.n	8004166 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040e2:	4b28      	ldr	r3, [pc, #160]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ee:	d131      	bne.n	8004154 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040f0:	4b24      	ldr	r3, [pc, #144]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040f6:	4a23      	ldr	r2, [pc, #140]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004100:	4b20      	ldr	r3, [pc, #128]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004108:	4a1e      	ldr	r2, [pc, #120]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800410a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800410e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004110:	4b1d      	ldr	r3, [pc, #116]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2232      	movs	r2, #50	@ 0x32
 8004116:	fb02 f303 	mul.w	r3, r2, r3
 800411a:	4a1c      	ldr	r2, [pc, #112]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800411c:	fba2 2303 	umull	r2, r3, r2, r3
 8004120:	0c9b      	lsrs	r3, r3, #18
 8004122:	3301      	adds	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004126:	e002      	b.n	800412e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3b01      	subs	r3, #1
 800412c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800412e:	4b15      	ldr	r3, [pc, #84]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800413a:	d102      	bne.n	8004142 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f2      	bne.n	8004128 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004142:	4b10      	ldr	r3, [pc, #64]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800414a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800414e:	d112      	bne.n	8004176 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e011      	b.n	8004178 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004154:	4b0b      	ldr	r3, [pc, #44]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800415a:	4a0a      	ldr	r2, [pc, #40]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800415c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004160:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004164:	e007      	b.n	8004176 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004166:	4b07      	ldr	r3, [pc, #28]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800416e:	4a05      	ldr	r2, [pc, #20]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004170:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004174:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	40007000 	.word	0x40007000
 8004188:	20000004 	.word	0x20000004
 800418c:	431bde83 	.word	0x431bde83

08004190 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4a04      	ldr	r2, [pc, #16]	@ (80041ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800419a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800419e:	6093      	str	r3, [r2, #8]
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40007000 	.word	0x40007000

080041b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e2fe      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d075      	beq.n	80042ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ce:	4b97      	ldr	r3, [pc, #604]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041d8:	4b94      	ldr	r3, [pc, #592]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b0c      	cmp	r3, #12
 80041e6:	d102      	bne.n	80041ee <HAL_RCC_OscConfig+0x3e>
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d002      	beq.n	80041f4 <HAL_RCC_OscConfig+0x44>
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d10b      	bne.n	800420c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f4:	4b8d      	ldr	r3, [pc, #564]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d05b      	beq.n	80042b8 <HAL_RCC_OscConfig+0x108>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d157      	bne.n	80042b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e2d9      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004214:	d106      	bne.n	8004224 <HAL_RCC_OscConfig+0x74>
 8004216:	4b85      	ldr	r3, [pc, #532]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a84      	ldr	r2, [pc, #528]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 800421c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	e01d      	b.n	8004260 <HAL_RCC_OscConfig+0xb0>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800422c:	d10c      	bne.n	8004248 <HAL_RCC_OscConfig+0x98>
 800422e:	4b7f      	ldr	r3, [pc, #508]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a7e      	ldr	r2, [pc, #504]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 8004234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	4b7c      	ldr	r3, [pc, #496]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a7b      	ldr	r2, [pc, #492]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 8004240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e00b      	b.n	8004260 <HAL_RCC_OscConfig+0xb0>
 8004248:	4b78      	ldr	r3, [pc, #480]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a77      	ldr	r2, [pc, #476]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 800424e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	4b75      	ldr	r3, [pc, #468]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a74      	ldr	r2, [pc, #464]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 800425a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800425e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d013      	beq.n	8004290 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fe fa54 	bl	8002714 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004270:	f7fe fa50 	bl	8002714 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	@ 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e29e      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004282:	4b6a      	ldr	r3, [pc, #424]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0xc0>
 800428e:	e014      	b.n	80042ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004290:	f7fe fa40 	bl	8002714 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004298:	f7fe fa3c 	bl	8002714 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	@ 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e28a      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042aa:	4b60      	ldr	r3, [pc, #384]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0xe8>
 80042b6:	e000      	b.n	80042ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d075      	beq.n	80043b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c6:	4b59      	ldr	r3, [pc, #356]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042d0:	4b56      	ldr	r3, [pc, #344]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	2b0c      	cmp	r3, #12
 80042de:	d102      	bne.n	80042e6 <HAL_RCC_OscConfig+0x136>
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d002      	beq.n	80042ec <HAL_RCC_OscConfig+0x13c>
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d11f      	bne.n	800432c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042ec:	4b4f      	ldr	r3, [pc, #316]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_OscConfig+0x154>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e25d      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004304:	4b49      	ldr	r3, [pc, #292]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	061b      	lsls	r3, r3, #24
 8004312:	4946      	ldr	r1, [pc, #280]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 8004314:	4313      	orrs	r3, r2
 8004316:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004318:	4b45      	ldr	r3, [pc, #276]	@ (8004430 <HAL_RCC_OscConfig+0x280>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f7fd fe61 	bl	8001fe4 <HAL_InitTick>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d043      	beq.n	80043b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e249      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d023      	beq.n	800437c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004334:	4b3d      	ldr	r3, [pc, #244]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a3c      	ldr	r2, [pc, #240]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 800433a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800433e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004340:	f7fe f9e8 	bl	8002714 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004348:	f7fe f9e4 	bl	8002714 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e232      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800435a:	4b34      	ldr	r3, [pc, #208]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004366:	4b31      	ldr	r3, [pc, #196]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	061b      	lsls	r3, r3, #24
 8004374:	492d      	ldr	r1, [pc, #180]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 8004376:	4313      	orrs	r3, r2
 8004378:	604b      	str	r3, [r1, #4]
 800437a:	e01a      	b.n	80043b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800437c:	4b2b      	ldr	r3, [pc, #172]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a2a      	ldr	r2, [pc, #168]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 8004382:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fe f9c4 	bl	8002714 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004390:	f7fe f9c0 	bl	8002714 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e20e      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043a2:	4b22      	ldr	r3, [pc, #136]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x1e0>
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d041      	beq.n	8004442 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01c      	beq.n	8004400 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043c6:	4b19      	ldr	r3, [pc, #100]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 80043c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043cc:	4a17      	ldr	r2, [pc, #92]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d6:	f7fe f99d 	bl	8002714 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043de:	f7fe f999 	bl	8002714 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e1e7      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043f0:	4b0e      	ldr	r3, [pc, #56]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 80043f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0ef      	beq.n	80043de <HAL_RCC_OscConfig+0x22e>
 80043fe:	e020      	b.n	8004442 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004400:	4b0a      	ldr	r3, [pc, #40]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 8004402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004406:	4a09      	ldr	r2, [pc, #36]	@ (800442c <HAL_RCC_OscConfig+0x27c>)
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004410:	f7fe f980 	bl	8002714 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004416:	e00d      	b.n	8004434 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004418:	f7fe f97c 	bl	8002714 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d906      	bls.n	8004434 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e1ca      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000
 8004430:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004434:	4b8c      	ldr	r3, [pc, #560]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 8004436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1ea      	bne.n	8004418 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 80a6 	beq.w	800459c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004450:	2300      	movs	r3, #0
 8004452:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004454:	4b84      	ldr	r3, [pc, #528]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_RCC_OscConfig+0x2b4>
 8004460:	2301      	movs	r3, #1
 8004462:	e000      	b.n	8004466 <HAL_RCC_OscConfig+0x2b6>
 8004464:	2300      	movs	r3, #0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00d      	beq.n	8004486 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800446a:	4b7f      	ldr	r3, [pc, #508]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446e:	4a7e      	ldr	r2, [pc, #504]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 8004470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004474:	6593      	str	r3, [r2, #88]	@ 0x58
 8004476:	4b7c      	ldr	r3, [pc, #496]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 8004478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004482:	2301      	movs	r3, #1
 8004484:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004486:	4b79      	ldr	r3, [pc, #484]	@ (800466c <HAL_RCC_OscConfig+0x4bc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448e:	2b00      	cmp	r3, #0
 8004490:	d118      	bne.n	80044c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004492:	4b76      	ldr	r3, [pc, #472]	@ (800466c <HAL_RCC_OscConfig+0x4bc>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a75      	ldr	r2, [pc, #468]	@ (800466c <HAL_RCC_OscConfig+0x4bc>)
 8004498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800449c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449e:	f7fe f939 	bl	8002714 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a6:	f7fe f935 	bl	8002714 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e183      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b8:	4b6c      	ldr	r3, [pc, #432]	@ (800466c <HAL_RCC_OscConfig+0x4bc>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d108      	bne.n	80044de <HAL_RCC_OscConfig+0x32e>
 80044cc:	4b66      	ldr	r3, [pc, #408]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d2:	4a65      	ldr	r2, [pc, #404]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 80044d4:	f043 0301 	orr.w	r3, r3, #1
 80044d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044dc:	e024      	b.n	8004528 <HAL_RCC_OscConfig+0x378>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b05      	cmp	r3, #5
 80044e4:	d110      	bne.n	8004508 <HAL_RCC_OscConfig+0x358>
 80044e6:	4b60      	ldr	r3, [pc, #384]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 80044e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ec:	4a5e      	ldr	r2, [pc, #376]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 80044ee:	f043 0304 	orr.w	r3, r3, #4
 80044f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044f6:	4b5c      	ldr	r3, [pc, #368]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 80044f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044fc:	4a5a      	ldr	r2, [pc, #360]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004506:	e00f      	b.n	8004528 <HAL_RCC_OscConfig+0x378>
 8004508:	4b57      	ldr	r3, [pc, #348]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450e:	4a56      	ldr	r2, [pc, #344]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 8004510:	f023 0301 	bic.w	r3, r3, #1
 8004514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004518:	4b53      	ldr	r3, [pc, #332]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451e:	4a52      	ldr	r2, [pc, #328]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 8004520:	f023 0304 	bic.w	r3, r3, #4
 8004524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d016      	beq.n	800455e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004530:	f7fe f8f0 	bl	8002714 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004536:	e00a      	b.n	800454e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004538:	f7fe f8ec 	bl	8002714 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004546:	4293      	cmp	r3, r2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e138      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454e:	4b46      	ldr	r3, [pc, #280]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0ed      	beq.n	8004538 <HAL_RCC_OscConfig+0x388>
 800455c:	e015      	b.n	800458a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455e:	f7fe f8d9 	bl	8002714 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004564:	e00a      	b.n	800457c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004566:	f7fe f8d5 	bl	8002714 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004574:	4293      	cmp	r3, r2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e121      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800457c:	4b3a      	ldr	r3, [pc, #232]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1ed      	bne.n	8004566 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800458a:	7ffb      	ldrb	r3, [r7, #31]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004590:	4b35      	ldr	r3, [pc, #212]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 8004592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004594:	4a34      	ldr	r2, [pc, #208]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 8004596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800459a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d03c      	beq.n	8004622 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01c      	beq.n	80045ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 80045b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c0:	f7fe f8a8 	bl	8002714 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c8:	f7fe f8a4 	bl	8002714 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e0f2      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045da:	4b23      	ldr	r3, [pc, #140]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 80045dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0ef      	beq.n	80045c8 <HAL_RCC_OscConfig+0x418>
 80045e8:	e01b      	b.n	8004622 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 80045ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fa:	f7fe f88b 	bl	8002714 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004602:	f7fe f887 	bl	8002714 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e0d5      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004614:	4b14      	ldr	r3, [pc, #80]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 8004616:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1ef      	bne.n	8004602 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 80c9 	beq.w	80047be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800462c:	4b0e      	ldr	r3, [pc, #56]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 030c 	and.w	r3, r3, #12
 8004634:	2b0c      	cmp	r3, #12
 8004636:	f000 8083 	beq.w	8004740 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d15e      	bne.n	8004700 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004642:	4b09      	ldr	r3, [pc, #36]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a08      	ldr	r2, [pc, #32]	@ (8004668 <HAL_RCC_OscConfig+0x4b8>)
 8004648:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800464c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7fe f861 	bl	8002714 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004654:	e00c      	b.n	8004670 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004656:	f7fe f85d 	bl	8002714 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d905      	bls.n	8004670 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e0ab      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
 8004668:	40021000 	.word	0x40021000
 800466c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004670:	4b55      	ldr	r3, [pc, #340]	@ (80047c8 <HAL_RCC_OscConfig+0x618>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1ec      	bne.n	8004656 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800467c:	4b52      	ldr	r3, [pc, #328]	@ (80047c8 <HAL_RCC_OscConfig+0x618>)
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	4b52      	ldr	r3, [pc, #328]	@ (80047cc <HAL_RCC_OscConfig+0x61c>)
 8004682:	4013      	ands	r3, r2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6a11      	ldr	r1, [r2, #32]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800468c:	3a01      	subs	r2, #1
 800468e:	0112      	lsls	r2, r2, #4
 8004690:	4311      	orrs	r1, r2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004696:	0212      	lsls	r2, r2, #8
 8004698:	4311      	orrs	r1, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800469e:	0852      	lsrs	r2, r2, #1
 80046a0:	3a01      	subs	r2, #1
 80046a2:	0552      	lsls	r2, r2, #21
 80046a4:	4311      	orrs	r1, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046aa:	0852      	lsrs	r2, r2, #1
 80046ac:	3a01      	subs	r2, #1
 80046ae:	0652      	lsls	r2, r2, #25
 80046b0:	4311      	orrs	r1, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80046b6:	06d2      	lsls	r2, r2, #27
 80046b8:	430a      	orrs	r2, r1
 80046ba:	4943      	ldr	r1, [pc, #268]	@ (80047c8 <HAL_RCC_OscConfig+0x618>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c0:	4b41      	ldr	r3, [pc, #260]	@ (80047c8 <HAL_RCC_OscConfig+0x618>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a40      	ldr	r2, [pc, #256]	@ (80047c8 <HAL_RCC_OscConfig+0x618>)
 80046c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046cc:	4b3e      	ldr	r3, [pc, #248]	@ (80047c8 <HAL_RCC_OscConfig+0x618>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4a3d      	ldr	r2, [pc, #244]	@ (80047c8 <HAL_RCC_OscConfig+0x618>)
 80046d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fe f81c 	bl	8002714 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fe f818 	bl	8002714 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e066      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f2:	4b35      	ldr	r3, [pc, #212]	@ (80047c8 <HAL_RCC_OscConfig+0x618>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f0      	beq.n	80046e0 <HAL_RCC_OscConfig+0x530>
 80046fe:	e05e      	b.n	80047be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004700:	4b31      	ldr	r3, [pc, #196]	@ (80047c8 <HAL_RCC_OscConfig+0x618>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a30      	ldr	r2, [pc, #192]	@ (80047c8 <HAL_RCC_OscConfig+0x618>)
 8004706:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800470a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fe f802 	bl	8002714 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004714:	f7fd fffe 	bl	8002714 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e04c      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004726:	4b28      	ldr	r3, [pc, #160]	@ (80047c8 <HAL_RCC_OscConfig+0x618>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004732:	4b25      	ldr	r3, [pc, #148]	@ (80047c8 <HAL_RCC_OscConfig+0x618>)
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	4924      	ldr	r1, [pc, #144]	@ (80047c8 <HAL_RCC_OscConfig+0x618>)
 8004738:	4b25      	ldr	r3, [pc, #148]	@ (80047d0 <HAL_RCC_OscConfig+0x620>)
 800473a:	4013      	ands	r3, r2
 800473c:	60cb      	str	r3, [r1, #12]
 800473e:	e03e      	b.n	80047be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e039      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800474c:	4b1e      	ldr	r3, [pc, #120]	@ (80047c8 <HAL_RCC_OscConfig+0x618>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f003 0203 	and.w	r2, r3, #3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	429a      	cmp	r2, r3
 800475e:	d12c      	bne.n	80047ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	3b01      	subs	r3, #1
 800476c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476e:	429a      	cmp	r2, r3
 8004770:	d123      	bne.n	80047ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800477e:	429a      	cmp	r2, r3
 8004780:	d11b      	bne.n	80047ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800478e:	429a      	cmp	r2, r3
 8004790:	d113      	bne.n	80047ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	3b01      	subs	r3, #1
 80047a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d109      	bne.n	80047ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047b0:	085b      	lsrs	r3, r3, #1
 80047b2:	3b01      	subs	r3, #1
 80047b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d001      	beq.n	80047be <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3720      	adds	r7, #32
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40021000 	.word	0x40021000
 80047cc:	019f800c 	.word	0x019f800c
 80047d0:	feeefffc 	.word	0xfeeefffc

080047d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e11e      	b.n	8004a2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047ec:	4b91      	ldr	r3, [pc, #580]	@ (8004a34 <HAL_RCC_ClockConfig+0x260>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d910      	bls.n	800481c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fa:	4b8e      	ldr	r3, [pc, #568]	@ (8004a34 <HAL_RCC_ClockConfig+0x260>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 020f 	bic.w	r2, r3, #15
 8004802:	498c      	ldr	r1, [pc, #560]	@ (8004a34 <HAL_RCC_ClockConfig+0x260>)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	4313      	orrs	r3, r2
 8004808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480a:	4b8a      	ldr	r3, [pc, #552]	@ (8004a34 <HAL_RCC_ClockConfig+0x260>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e106      	b.n	8004a2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d073      	beq.n	8004910 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b03      	cmp	r3, #3
 800482e:	d129      	bne.n	8004884 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004830:	4b81      	ldr	r3, [pc, #516]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0f4      	b.n	8004a2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004840:	f000 f9d0 	bl	8004be4 <RCC_GetSysClockFreqFromPLLSource>
 8004844:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4a7c      	ldr	r2, [pc, #496]	@ (8004a3c <HAL_RCC_ClockConfig+0x268>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d93f      	bls.n	80048ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800484e:	4b7a      	ldr	r3, [pc, #488]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d009      	beq.n	800486e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004862:	2b00      	cmp	r3, #0
 8004864:	d033      	beq.n	80048ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800486a:	2b00      	cmp	r3, #0
 800486c:	d12f      	bne.n	80048ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800486e:	4b72      	ldr	r3, [pc, #456]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004876:	4a70      	ldr	r2, [pc, #448]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 8004878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800487c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800487e:	2380      	movs	r3, #128	@ 0x80
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	e024      	b.n	80048ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b02      	cmp	r3, #2
 800488a:	d107      	bne.n	800489c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800488c:	4b6a      	ldr	r3, [pc, #424]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d109      	bne.n	80048ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0c6      	b.n	8004a2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800489c:	4b66      	ldr	r3, [pc, #408]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0be      	b.n	8004a2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048ac:	f000 f8ce 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 80048b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4a61      	ldr	r2, [pc, #388]	@ (8004a3c <HAL_RCC_ClockConfig+0x268>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d909      	bls.n	80048ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048ba:	4b5f      	ldr	r3, [pc, #380]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048c2:	4a5d      	ldr	r2, [pc, #372]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 80048c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048ca:	2380      	movs	r3, #128	@ 0x80
 80048cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048ce:	4b5a      	ldr	r3, [pc, #360]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f023 0203 	bic.w	r2, r3, #3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	4957      	ldr	r1, [pc, #348]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e0:	f7fd ff18 	bl	8002714 <HAL_GetTick>
 80048e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e6:	e00a      	b.n	80048fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e8:	f7fd ff14 	bl	8002714 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e095      	b.n	8004a2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fe:	4b4e      	ldr	r3, [pc, #312]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 020c 	and.w	r2, r3, #12
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	429a      	cmp	r2, r3
 800490e:	d1eb      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d023      	beq.n	8004964 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004928:	4b43      	ldr	r3, [pc, #268]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a42      	ldr	r2, [pc, #264]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 800492e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004932:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b00      	cmp	r3, #0
 800493e:	d007      	beq.n	8004950 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004940:	4b3d      	ldr	r3, [pc, #244]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004948:	4a3b      	ldr	r2, [pc, #236]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 800494a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800494e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004950:	4b39      	ldr	r3, [pc, #228]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	4936      	ldr	r1, [pc, #216]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
 8004962:	e008      	b.n	8004976 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	2b80      	cmp	r3, #128	@ 0x80
 8004968:	d105      	bne.n	8004976 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800496a:	4b33      	ldr	r3, [pc, #204]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	4a32      	ldr	r2, [pc, #200]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 8004970:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004974:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004976:	4b2f      	ldr	r3, [pc, #188]	@ (8004a34 <HAL_RCC_ClockConfig+0x260>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d21d      	bcs.n	80049c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004984:	4b2b      	ldr	r3, [pc, #172]	@ (8004a34 <HAL_RCC_ClockConfig+0x260>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f023 020f 	bic.w	r2, r3, #15
 800498c:	4929      	ldr	r1, [pc, #164]	@ (8004a34 <HAL_RCC_ClockConfig+0x260>)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	4313      	orrs	r3, r2
 8004992:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004994:	f7fd febe 	bl	8002714 <HAL_GetTick>
 8004998:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499a:	e00a      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800499c:	f7fd feba 	bl	8002714 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e03b      	b.n	8004a2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b2:	4b20      	ldr	r3, [pc, #128]	@ (8004a34 <HAL_RCC_ClockConfig+0x260>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d1ed      	bne.n	800499c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d008      	beq.n	80049de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4917      	ldr	r1, [pc, #92]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ea:	4b13      	ldr	r3, [pc, #76]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	490f      	ldr	r1, [pc, #60]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049fe:	f000 f825 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 8004a02:	4602      	mov	r2, r0
 8004a04:	4b0c      	ldr	r3, [pc, #48]	@ (8004a38 <HAL_RCC_ClockConfig+0x264>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	091b      	lsrs	r3, r3, #4
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	490c      	ldr	r1, [pc, #48]	@ (8004a40 <HAL_RCC_ClockConfig+0x26c>)
 8004a10:	5ccb      	ldrb	r3, [r1, r3]
 8004a12:	f003 031f 	and.w	r3, r3, #31
 8004a16:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a44 <HAL_RCC_ClockConfig+0x270>)
 8004a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a48 <HAL_RCC_ClockConfig+0x274>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fd fade 	bl	8001fe4 <HAL_InitTick>
 8004a28:	4603      	mov	r3, r0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40022000 	.word	0x40022000
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	04c4b400 	.word	0x04c4b400
 8004a40:	0801a65c 	.word	0x0801a65c
 8004a44:	20000004 	.word	0x20000004
 8004a48:	20000008 	.word	0x20000008

08004a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a52:	4b2c      	ldr	r3, [pc, #176]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d102      	bne.n	8004a64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	e047      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a64:	4b27      	ldr	r3, [pc, #156]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 030c 	and.w	r3, r3, #12
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d102      	bne.n	8004a76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a70:	4b26      	ldr	r3, [pc, #152]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	e03e      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a76:	4b23      	ldr	r3, [pc, #140]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 030c 	and.w	r3, r3, #12
 8004a7e:	2b0c      	cmp	r3, #12
 8004a80:	d136      	bne.n	8004af0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a82:	4b20      	ldr	r3, [pc, #128]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	091b      	lsrs	r3, r3, #4
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	3301      	adds	r3, #1
 8004a98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d10c      	bne.n	8004aba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aa0:	4a1a      	ldr	r2, [pc, #104]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa8:	4a16      	ldr	r2, [pc, #88]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aaa:	68d2      	ldr	r2, [r2, #12]
 8004aac:	0a12      	lsrs	r2, r2, #8
 8004aae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ab2:	fb02 f303 	mul.w	r3, r2, r3
 8004ab6:	617b      	str	r3, [r7, #20]
      break;
 8004ab8:	e00c      	b.n	8004ad4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aba:	4a13      	ldr	r2, [pc, #76]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac2:	4a10      	ldr	r2, [pc, #64]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ac4:	68d2      	ldr	r2, [r2, #12]
 8004ac6:	0a12      	lsrs	r2, r2, #8
 8004ac8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004acc:	fb02 f303 	mul.w	r3, r2, r3
 8004ad0:	617b      	str	r3, [r7, #20]
      break;
 8004ad2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	0e5b      	lsrs	r3, r3, #25
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	3301      	adds	r3, #1
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	e001      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004af4:	693b      	ldr	r3, [r7, #16]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40021000 	.word	0x40021000
 8004b08:	00f42400 	.word	0x00f42400
 8004b0c:	016e3600 	.word	0x016e3600

08004b10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b14:	4b03      	ldr	r3, [pc, #12]	@ (8004b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b16:	681b      	ldr	r3, [r3, #0]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	20000004 	.word	0x20000004

08004b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b2c:	f7ff fff0 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 8004b30:	4602      	mov	r2, r0
 8004b32:	4b06      	ldr	r3, [pc, #24]	@ (8004b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	0a1b      	lsrs	r3, r3, #8
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	4904      	ldr	r1, [pc, #16]	@ (8004b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b3e:	5ccb      	ldrb	r3, [r1, r3]
 8004b40:	f003 031f 	and.w	r3, r3, #31
 8004b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	0801a66c 	.word	0x0801a66c

08004b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b58:	f7ff ffda 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	0adb      	lsrs	r3, r3, #11
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	4904      	ldr	r1, [pc, #16]	@ (8004b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b6a:	5ccb      	ldrb	r3, [r1, r3]
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	0801a66c 	.word	0x0801a66c

08004b80 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	220f      	movs	r2, #15
 8004b8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004b90:	4b12      	ldr	r3, [pc, #72]	@ (8004bdc <HAL_RCC_GetClockConfig+0x5c>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 0203 	and.w	r2, r3, #3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004bdc <HAL_RCC_GetClockConfig+0x5c>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8004bdc <HAL_RCC_GetClockConfig+0x5c>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004bb4:	4b09      	ldr	r3, [pc, #36]	@ (8004bdc <HAL_RCC_GetClockConfig+0x5c>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	08db      	lsrs	r3, r3, #3
 8004bba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004bc2:	4b07      	ldr	r3, [pc, #28]	@ (8004be0 <HAL_RCC_GetClockConfig+0x60>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 020f 	and.w	r2, r3, #15
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	601a      	str	r2, [r3, #0]
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	40022000 	.word	0x40022000

08004be4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bea:	4b1e      	ldr	r3, [pc, #120]	@ (8004c64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	3301      	adds	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d10c      	bne.n	8004c22 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c08:	4a17      	ldr	r2, [pc, #92]	@ (8004c68 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c10:	4a14      	ldr	r2, [pc, #80]	@ (8004c64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c12:	68d2      	ldr	r2, [r2, #12]
 8004c14:	0a12      	lsrs	r2, r2, #8
 8004c16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	617b      	str	r3, [r7, #20]
    break;
 8004c20:	e00c      	b.n	8004c3c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c22:	4a12      	ldr	r2, [pc, #72]	@ (8004c6c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8004c64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c2c:	68d2      	ldr	r2, [r2, #12]
 8004c2e:	0a12      	lsrs	r2, r2, #8
 8004c30:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c34:	fb02 f303 	mul.w	r3, r2, r3
 8004c38:	617b      	str	r3, [r7, #20]
    break;
 8004c3a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c3c:	4b09      	ldr	r3, [pc, #36]	@ (8004c64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	0e5b      	lsrs	r3, r3, #25
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	3301      	adds	r3, #1
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c56:	687b      	ldr	r3, [r7, #4]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	371c      	adds	r7, #28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	40021000 	.word	0x40021000
 8004c68:	016e3600 	.word	0x016e3600
 8004c6c:	00f42400 	.word	0x00f42400

08004c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c78:	2300      	movs	r3, #0
 8004c7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8098 	beq.w	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c92:	4b43      	ldr	r3, [pc, #268]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10d      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c9e:	4b40      	ldr	r3, [pc, #256]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca2:	4a3f      	ldr	r2, [pc, #252]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004caa:	4b3d      	ldr	r3, [pc, #244]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb2:	60bb      	str	r3, [r7, #8]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cba:	4b3a      	ldr	r3, [pc, #232]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a39      	ldr	r2, [pc, #228]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cc6:	f7fd fd25 	bl	8002714 <HAL_GetTick>
 8004cca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ccc:	e009      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cce:	f7fd fd21 	bl	8002714 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d902      	bls.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	74fb      	strb	r3, [r7, #19]
        break;
 8004ce0:	e005      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ce2:	4b30      	ldr	r3, [pc, #192]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0ef      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004cee:	7cfb      	ldrb	r3, [r7, #19]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d159      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cfe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d01e      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d019      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d10:	4b23      	ldr	r3, [pc, #140]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d1c:	4b20      	ldr	r3, [pc, #128]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d22:	4a1f      	ldr	r2, [pc, #124]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d32:	4a1b      	ldr	r2, [pc, #108]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d3c:	4a18      	ldr	r2, [pc, #96]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d016      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4e:	f7fd fce1 	bl	8002714 <HAL_GetTick>
 8004d52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d54:	e00b      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d56:	f7fd fcdd 	bl	8002714 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d902      	bls.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	74fb      	strb	r3, [r7, #19]
            break;
 8004d6c:	e006      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0ec      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d7c:	7cfb      	ldrb	r3, [r7, #19]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10b      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d82:	4b07      	ldr	r3, [pc, #28]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d90:	4903      	ldr	r1, [pc, #12]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d98:	e008      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d9a:	7cfb      	ldrb	r3, [r7, #19]
 8004d9c:	74bb      	strb	r3, [r7, #18]
 8004d9e:	e005      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004da0:	40021000 	.word	0x40021000
 8004da4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da8:	7cfb      	ldrb	r3, [r7, #19]
 8004daa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dac:	7c7b      	ldrb	r3, [r7, #17]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d105      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004db2:	4ba7      	ldr	r3, [pc, #668]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db6:	4aa6      	ldr	r2, [pc, #664]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dbc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dca:	4ba1      	ldr	r3, [pc, #644]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd0:	f023 0203 	bic.w	r2, r3, #3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	499d      	ldr	r1, [pc, #628]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dec:	4b98      	ldr	r3, [pc, #608]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df2:	f023 020c 	bic.w	r2, r3, #12
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	4995      	ldr	r1, [pc, #596]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e0e:	4b90      	ldr	r3, [pc, #576]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e14:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	498c      	ldr	r1, [pc, #560]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e30:	4b87      	ldr	r3, [pc, #540]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	4984      	ldr	r1, [pc, #528]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e52:	4b7f      	ldr	r3, [pc, #508]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	497b      	ldr	r1, [pc, #492]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0320 	and.w	r3, r3, #32
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e74:	4b76      	ldr	r3, [pc, #472]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	4973      	ldr	r1, [pc, #460]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e96:	4b6e      	ldr	r3, [pc, #440]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e9c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	496a      	ldr	r1, [pc, #424]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eb8:	4b65      	ldr	r3, [pc, #404]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ebe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	4962      	ldr	r1, [pc, #392]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004eda:	4b5d      	ldr	r3, [pc, #372]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	4959      	ldr	r1, [pc, #356]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004efc:	4b54      	ldr	r3, [pc, #336]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f02:	f023 0203 	bic.w	r2, r3, #3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0a:	4951      	ldr	r1, [pc, #324]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f1e:	4b4c      	ldr	r3, [pc, #304]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2c:	4948      	ldr	r1, [pc, #288]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d015      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f40:	4b43      	ldr	r3, [pc, #268]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4e:	4940      	ldr	r1, [pc, #256]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f5e:	d105      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f60:	4b3b      	ldr	r3, [pc, #236]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4a3a      	ldr	r2, [pc, #232]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f6a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d015      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f78:	4b35      	ldr	r3, [pc, #212]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f86:	4932      	ldr	r1, [pc, #200]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f96:	d105      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f98:	4b2d      	ldr	r3, [pc, #180]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4a2c      	ldr	r2, [pc, #176]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fa2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d015      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fb0:	4b27      	ldr	r3, [pc, #156]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbe:	4924      	ldr	r1, [pc, #144]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fce:	d105      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fd0:	4b1f      	ldr	r3, [pc, #124]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fda:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d015      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fe8:	4b19      	ldr	r3, [pc, #100]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff6:	4916      	ldr	r1, [pc, #88]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005002:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005006:	d105      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005008:	4b11      	ldr	r3, [pc, #68]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4a10      	ldr	r2, [pc, #64]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800500e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005012:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d019      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005020:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005026:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502e:	4908      	ldr	r1, [pc, #32]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800503e:	d109      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005040:	4b03      	ldr	r3, [pc, #12]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	4a02      	ldr	r2, [pc, #8]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800504a:	60d3      	str	r3, [r2, #12]
 800504c:	e002      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800504e:	bf00      	nop
 8005050:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d015      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005060:	4b29      	ldr	r3, [pc, #164]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005066:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506e:	4926      	ldr	r1, [pc, #152]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800507e:	d105      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005080:	4b21      	ldr	r3, [pc, #132]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	4a20      	ldr	r2, [pc, #128]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800508a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d015      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005098:	4b1b      	ldr	r3, [pc, #108]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050a6:	4918      	ldr	r1, [pc, #96]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b6:	d105      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050b8:	4b13      	ldr	r3, [pc, #76]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	4a12      	ldr	r2, [pc, #72]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d015      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80050d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050de:	490a      	ldr	r1, [pc, #40]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050ee:	d105      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050f0:	4b05      	ldr	r3, [pc, #20]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	4a04      	ldr	r2, [pc, #16]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80050fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40021000 	.word	0x40021000

0800510c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e049      	b.n	80051b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f841 	bl	80051ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3304      	adds	r3, #4
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f000 fa30 	bl	80055b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
	...

080051d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d001      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e054      	b.n	8005292 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a26      	ldr	r2, [pc, #152]	@ (80052a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d022      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005212:	d01d      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a22      	ldr	r2, [pc, #136]	@ (80052a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d018      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a21      	ldr	r2, [pc, #132]	@ (80052a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d013      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1f      	ldr	r2, [pc, #124]	@ (80052ac <HAL_TIM_Base_Start_IT+0xdc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00e      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1e      	ldr	r2, [pc, #120]	@ (80052b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d009      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1c      	ldr	r2, [pc, #112]	@ (80052b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x80>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a1b      	ldr	r2, [pc, #108]	@ (80052b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d115      	bne.n	800527c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	4b19      	ldr	r3, [pc, #100]	@ (80052bc <HAL_TIM_Base_Start_IT+0xec>)
 8005258:	4013      	ands	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b06      	cmp	r3, #6
 8005260:	d015      	beq.n	800528e <HAL_TIM_Base_Start_IT+0xbe>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005268:	d011      	beq.n	800528e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0201 	orr.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527a:	e008      	b.n	800528e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	e000      	b.n	8005290 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40012c00 	.word	0x40012c00
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800
 80052ac:	40000c00 	.word	0x40000c00
 80052b0:	40013400 	.word	0x40013400
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40015000 	.word	0x40015000
 80052bc:	00010007 	.word	0x00010007

080052c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d020      	beq.n	8005324 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01b      	beq.n	8005324 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0202 	mvn.w	r2, #2
 80052f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f931 	bl	8005572 <HAL_TIM_IC_CaptureCallback>
 8005310:	e005      	b.n	800531e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f923 	bl	800555e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f934 	bl	8005586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b00      	cmp	r3, #0
 800532c:	d020      	beq.n	8005370 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01b      	beq.n	8005370 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0204 	mvn.w	r2, #4
 8005340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2202      	movs	r2, #2
 8005346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f90b 	bl	8005572 <HAL_TIM_IC_CaptureCallback>
 800535c:	e005      	b.n	800536a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f8fd 	bl	800555e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f90e 	bl	8005586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b00      	cmp	r3, #0
 8005378:	d020      	beq.n	80053bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f003 0308 	and.w	r3, r3, #8
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01b      	beq.n	80053bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0208 	mvn.w	r2, #8
 800538c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2204      	movs	r2, #4
 8005392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f8e5 	bl	8005572 <HAL_TIM_IC_CaptureCallback>
 80053a8:	e005      	b.n	80053b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f8d7 	bl	800555e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f8e8 	bl	8005586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d020      	beq.n	8005408 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01b      	beq.n	8005408 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0210 	mvn.w	r2, #16
 80053d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2208      	movs	r2, #8
 80053de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f8bf 	bl	8005572 <HAL_TIM_IC_CaptureCallback>
 80053f4:	e005      	b.n	8005402 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f8b1 	bl	800555e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f8c2 	bl	8005586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00c      	beq.n	800542c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d007      	beq.n	800542c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0201 	mvn.w	r2, #1
 8005424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7fc fc36 	bl	8001c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00c      	beq.n	800545a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f969 	bl	800572c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00c      	beq.n	800547e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546a:	2b00      	cmp	r3, #0
 800546c:	d007      	beq.n	800547e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f961 	bl	8005740 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00c      	beq.n	80054a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d007      	beq.n	80054a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800549a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f87c 	bl	800559a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00c      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f06f 0220 	mvn.w	r2, #32
 80054be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f929 	bl	8005718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00c      	beq.n	80054ea <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d007      	beq.n	80054ea <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80054e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f935 	bl	8005754 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00c      	beq.n	800550e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d007      	beq.n	800550e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f92d 	bl	8005768 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00c      	beq.n	8005532 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d007      	beq.n	8005532 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800552a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f925 	bl	800577c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00c      	beq.n	8005556 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d007      	beq.n	8005556 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800554e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f91d 	bl	8005790 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005556:	bf00      	nop
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
	...

080055b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a4c      	ldr	r2, [pc, #304]	@ (80056f4 <TIM_Base_SetConfig+0x144>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d017      	beq.n	80055f8 <TIM_Base_SetConfig+0x48>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ce:	d013      	beq.n	80055f8 <TIM_Base_SetConfig+0x48>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a49      	ldr	r2, [pc, #292]	@ (80056f8 <TIM_Base_SetConfig+0x148>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00f      	beq.n	80055f8 <TIM_Base_SetConfig+0x48>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a48      	ldr	r2, [pc, #288]	@ (80056fc <TIM_Base_SetConfig+0x14c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00b      	beq.n	80055f8 <TIM_Base_SetConfig+0x48>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a47      	ldr	r2, [pc, #284]	@ (8005700 <TIM_Base_SetConfig+0x150>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d007      	beq.n	80055f8 <TIM_Base_SetConfig+0x48>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a46      	ldr	r2, [pc, #280]	@ (8005704 <TIM_Base_SetConfig+0x154>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_Base_SetConfig+0x48>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a45      	ldr	r2, [pc, #276]	@ (8005708 <TIM_Base_SetConfig+0x158>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d108      	bne.n	800560a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a39      	ldr	r2, [pc, #228]	@ (80056f4 <TIM_Base_SetConfig+0x144>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d023      	beq.n	800565a <TIM_Base_SetConfig+0xaa>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005618:	d01f      	beq.n	800565a <TIM_Base_SetConfig+0xaa>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a36      	ldr	r2, [pc, #216]	@ (80056f8 <TIM_Base_SetConfig+0x148>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d01b      	beq.n	800565a <TIM_Base_SetConfig+0xaa>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a35      	ldr	r2, [pc, #212]	@ (80056fc <TIM_Base_SetConfig+0x14c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d017      	beq.n	800565a <TIM_Base_SetConfig+0xaa>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a34      	ldr	r2, [pc, #208]	@ (8005700 <TIM_Base_SetConfig+0x150>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d013      	beq.n	800565a <TIM_Base_SetConfig+0xaa>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a33      	ldr	r2, [pc, #204]	@ (8005704 <TIM_Base_SetConfig+0x154>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00f      	beq.n	800565a <TIM_Base_SetConfig+0xaa>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a33      	ldr	r2, [pc, #204]	@ (800570c <TIM_Base_SetConfig+0x15c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00b      	beq.n	800565a <TIM_Base_SetConfig+0xaa>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a32      	ldr	r2, [pc, #200]	@ (8005710 <TIM_Base_SetConfig+0x160>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d007      	beq.n	800565a <TIM_Base_SetConfig+0xaa>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a31      	ldr	r2, [pc, #196]	@ (8005714 <TIM_Base_SetConfig+0x164>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d003      	beq.n	800565a <TIM_Base_SetConfig+0xaa>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a2c      	ldr	r2, [pc, #176]	@ (8005708 <TIM_Base_SetConfig+0x158>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d108      	bne.n	800566c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a18      	ldr	r2, [pc, #96]	@ (80056f4 <TIM_Base_SetConfig+0x144>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d013      	beq.n	80056c0 <TIM_Base_SetConfig+0x110>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a1a      	ldr	r2, [pc, #104]	@ (8005704 <TIM_Base_SetConfig+0x154>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00f      	beq.n	80056c0 <TIM_Base_SetConfig+0x110>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a1a      	ldr	r2, [pc, #104]	@ (800570c <TIM_Base_SetConfig+0x15c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00b      	beq.n	80056c0 <TIM_Base_SetConfig+0x110>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a19      	ldr	r2, [pc, #100]	@ (8005710 <TIM_Base_SetConfig+0x160>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <TIM_Base_SetConfig+0x110>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a18      	ldr	r2, [pc, #96]	@ (8005714 <TIM_Base_SetConfig+0x164>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_Base_SetConfig+0x110>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a13      	ldr	r2, [pc, #76]	@ (8005708 <TIM_Base_SetConfig+0x158>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d103      	bne.n	80056c8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d105      	bne.n	80056e6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f023 0201 	bic.w	r2, r3, #1
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	611a      	str	r2, [r3, #16]
  }
}
 80056e6:	bf00      	nop
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40012c00 	.word	0x40012c00
 80056f8:	40000400 	.word	0x40000400
 80056fc:	40000800 	.word	0x40000800
 8005700:	40000c00 	.word	0x40000c00
 8005704:	40013400 	.word	0x40013400
 8005708:	40015000 	.word	0x40015000
 800570c:	40014000 	.word	0x40014000
 8005710:	40014400 	.word	0x40014400
 8005714:	40014800 	.word	0x40014800

08005718 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e042      	b.n	800583c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d106      	bne.n	80057ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7fc fde5 	bl	8002398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2224      	movs	r2, #36	@ 0x24
 80057d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0201 	bic.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f001 f806 	bl	8006800 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fd07 	bl	8006208 <UART_SetConfig>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e01b      	b.n	800583c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005812:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005822:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0201 	orr.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f001 f885 	bl	8006944 <UART_CheckIdleState>
 800583a:	4603      	mov	r3, r0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08a      	sub	sp, #40	@ 0x28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	4613      	mov	r3, r2
 8005850:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005858:	2b20      	cmp	r3, #32
 800585a:	d167      	bne.n	800592c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <HAL_UART_Transmit_DMA+0x24>
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e060      	b.n	800592e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	88fa      	ldrh	r2, [r7, #6]
 8005876:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	88fa      	ldrh	r2, [r7, #6]
 800587e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2221      	movs	r2, #33	@ 0x21
 800588e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005896:	2b00      	cmp	r3, #0
 8005898:	d028      	beq.n	80058ec <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800589e:	4a26      	ldr	r2, [pc, #152]	@ (8005938 <HAL_UART_Transmit_DMA+0xf4>)
 80058a0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058a6:	4a25      	ldr	r2, [pc, #148]	@ (800593c <HAL_UART_Transmit_DMA+0xf8>)
 80058a8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058ae:	4a24      	ldr	r2, [pc, #144]	@ (8005940 <HAL_UART_Transmit_DMA+0xfc>)
 80058b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058b6:	2200      	movs	r2, #0
 80058b8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058c2:	4619      	mov	r1, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3328      	adds	r3, #40	@ 0x28
 80058ca:	461a      	mov	r2, r3
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	f7fd f8b5 	bl	8002a3c <HAL_DMA_Start_IT>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d009      	beq.n	80058ec <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2210      	movs	r2, #16
 80058dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e020      	b.n	800592e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2240      	movs	r2, #64	@ 0x40
 80058f2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3308      	adds	r3, #8
 80058fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	613b      	str	r3, [r7, #16]
   return(result);
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800590a:	627b      	str	r3, [r7, #36]	@ 0x24
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3308      	adds	r3, #8
 8005912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005914:	623a      	str	r2, [r7, #32]
 8005916:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	69f9      	ldr	r1, [r7, #28]
 800591a:	6a3a      	ldr	r2, [r7, #32]
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	61bb      	str	r3, [r7, #24]
   return(result);
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e5      	bne.n	80058f4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	e000      	b.n	800592e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800592c:	2302      	movs	r3, #2
  }
}
 800592e:	4618      	mov	r0, r3
 8005930:	3728      	adds	r7, #40	@ 0x28
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	08006e0f 	.word	0x08006e0f
 800593c:	08006ea9 	.word	0x08006ea9
 8005940:	0800702f 	.word	0x0800702f

08005944 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08a      	sub	sp, #40	@ 0x28
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	4613      	mov	r3, r2
 8005950:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005958:	2b20      	cmp	r3, #32
 800595a:	d137      	bne.n	80059cc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <HAL_UART_Receive_DMA+0x24>
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e030      	b.n	80059ce <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a18      	ldr	r2, [pc, #96]	@ (80059d8 <HAL_UART_Receive_DMA+0x94>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d01f      	beq.n	80059bc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d018      	beq.n	80059bc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	e853 3f00 	ldrex	r3, [r3]
 8005996:	613b      	str	r3, [r7, #16]
   return(result);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800599e:	627b      	str	r3, [r7, #36]	@ 0x24
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a8:	623b      	str	r3, [r7, #32]
 80059aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	69f9      	ldr	r1, [r7, #28]
 80059ae:	6a3a      	ldr	r2, [r7, #32]
 80059b0:	e841 2300 	strex	r3, r2, [r1]
 80059b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e6      	bne.n	800598a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80059bc:	88fb      	ldrh	r3, [r7, #6]
 80059be:	461a      	mov	r2, r3
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f001 f8d6 	bl	8006b74 <UART_Start_Receive_DMA>
 80059c8:	4603      	mov	r3, r0
 80059ca:	e000      	b.n	80059ce <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059cc:	2302      	movs	r3, #2
  }
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3728      	adds	r7, #40	@ 0x28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40008000 	.word	0x40008000

080059dc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b090      	sub	sp, #64	@ 0x40
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059fe:	2b80      	cmp	r3, #128	@ 0x80
 8005a00:	d139      	bne.n	8005a76 <HAL_UART_DMAStop+0x9a>
 8005a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a04:	2b21      	cmp	r3, #33	@ 0x21
 8005a06:	d136      	bne.n	8005a76 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	e853 3f00 	ldrex	r3, [r3]
 8005a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3308      	adds	r3, #8
 8005a26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a30:	e841 2300 	strex	r3, r2, [r1]
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1e5      	bne.n	8005a08 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d015      	beq.n	8005a70 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fd f872 	bl	8002b32 <HAL_DMA_Abort>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00d      	beq.n	8005a70 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fd f9d9 	bl	8002e10 <HAL_DMA_GetError>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d105      	bne.n	8005a70 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2210      	movs	r2, #16
 8005a68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e047      	b.n	8005b00 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f001 f925 	bl	8006cc0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a80:	2b40      	cmp	r3, #64	@ 0x40
 8005a82:	d13c      	bne.n	8005afe <HAL_UART_DMAStop+0x122>
 8005a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a86:	2b22      	cmp	r3, #34	@ 0x22
 8005a88:	d139      	bne.n	8005afe <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3308      	adds	r3, #8
 8005a90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	e853 3f00 	ldrex	r3, [r3]
 8005a98:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3308      	adds	r3, #8
 8005aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aaa:	61ba      	str	r2, [r7, #24]
 8005aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	6979      	ldr	r1, [r7, #20]
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e5      	bne.n	8005a8a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d017      	beq.n	8005af8 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fd f82f 	bl	8002b32 <HAL_DMA_Abort>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00e      	beq.n	8005af8 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fd f995 	bl	8002e10 <HAL_DMA_GetError>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b20      	cmp	r3, #32
 8005aea:	d105      	bne.n	8005af8 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2210      	movs	r2, #16
 8005af0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e003      	b.n	8005b00 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f001 f922 	bl	8006d42 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3740      	adds	r7, #64	@ 0x40
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b0ba      	sub	sp, #232	@ 0xe8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005b32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005b36:	4013      	ands	r3, r2
 8005b38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005b3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d11b      	bne.n	8005b7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d015      	beq.n	8005b7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b54:	f003 0320 	and.w	r3, r3, #32
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d105      	bne.n	8005b68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d009      	beq.n	8005b7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 8300 	beq.w	8006172 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	4798      	blx	r3
      }
      return;
 8005b7a:	e2fa      	b.n	8006172 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8123 	beq.w	8005dcc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005b8a:	4b8d      	ldr	r3, [pc, #564]	@ (8005dc0 <HAL_UART_IRQHandler+0x2b8>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005b96:	4b8b      	ldr	r3, [pc, #556]	@ (8005dc4 <HAL_UART_IRQHandler+0x2bc>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 8116 	beq.w	8005dcc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d011      	beq.n	8005bd0 <HAL_UART_IRQHandler+0xc8>
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00b      	beq.n	8005bd0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc6:	f043 0201 	orr.w	r2, r3, #1
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d011      	beq.n	8005c00 <HAL_UART_IRQHandler+0xf8>
 8005bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00b      	beq.n	8005c00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2202      	movs	r2, #2
 8005bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf6:	f043 0204 	orr.w	r2, r3, #4
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d011      	beq.n	8005c30 <HAL_UART_IRQHandler+0x128>
 8005c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00b      	beq.n	8005c30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2204      	movs	r2, #4
 8005c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c26:	f043 0202 	orr.w	r2, r3, #2
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d017      	beq.n	8005c6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005c48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005c4c:	4b5c      	ldr	r3, [pc, #368]	@ (8005dc0 <HAL_UART_IRQHandler+0x2b8>)
 8005c4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00b      	beq.n	8005c6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2208      	movs	r2, #8
 8005c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c62:	f043 0208 	orr.w	r2, r3, #8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d012      	beq.n	8005c9e <HAL_UART_IRQHandler+0x196>
 8005c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00c      	beq.n	8005c9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c94:	f043 0220 	orr.w	r2, r3, #32
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 8266 	beq.w	8006176 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d013      	beq.n	8005cde <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d105      	bne.n	8005cce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d007      	beq.n	8005cde <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf2:	2b40      	cmp	r3, #64	@ 0x40
 8005cf4:	d005      	beq.n	8005d02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cfa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d054      	beq.n	8005dac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f001 f81d 	bl	8006d42 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d12:	2b40      	cmp	r3, #64	@ 0x40
 8005d14:	d146      	bne.n	8005da4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d52:	e841 2300 	strex	r3, r2, [r1]
 8005d56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1d9      	bne.n	8005d16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d017      	beq.n	8005d9c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d72:	4a15      	ldr	r2, [pc, #84]	@ (8005dc8 <HAL_UART_IRQHandler+0x2c0>)
 8005d74:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fc ff31 	bl	8002be4 <HAL_DMA_Abort_IT>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d019      	beq.n	8005dbc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005d96:	4610      	mov	r0, r2
 8005d98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9a:	e00f      	b.n	8005dbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fa1d 	bl	80061dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da2:	e00b      	b.n	8005dbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fa19 	bl	80061dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005daa:	e007      	b.n	8005dbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fa15 	bl	80061dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005dba:	e1dc      	b.n	8006176 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dbc:	bf00      	nop
    return;
 8005dbe:	e1da      	b.n	8006176 <HAL_UART_IRQHandler+0x66e>
 8005dc0:	10000001 	.word	0x10000001
 8005dc4:	04000120 	.word	0x04000120
 8005dc8:	080070af 	.word	0x080070af

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	f040 8170 	bne.w	80060b6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dda:	f003 0310 	and.w	r3, r3, #16
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8169 	beq.w	80060b6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005de8:	f003 0310 	and.w	r3, r3, #16
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 8162 	beq.w	80060b6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2210      	movs	r2, #16
 8005df8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e04:	2b40      	cmp	r3, #64	@ 0x40
 8005e06:	f040 80d8 	bne.w	8005fba <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 80af 	beq.w	8005f80 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	f080 80a7 	bcs.w	8005f80 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f040 8087 	bne.w	8005f5e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e7e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1da      	bne.n	8005e50 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3308      	adds	r3, #8
 8005ea0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005eaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005eac:	f023 0301 	bic.w	r3, r3, #1
 8005eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3308      	adds	r3, #8
 8005eba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ebe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ec2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ec6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ed0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e1      	bne.n	8005e9a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3308      	adds	r3, #8
 8005edc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ede:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ee6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ee8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005efa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005efc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1e3      	bne.n	8005ed6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2220      	movs	r2, #32
 8005f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f2c:	f023 0310 	bic.w	r3, r3, #16
 8005f30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e4      	bne.n	8005f1c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fc fdea 	bl	8002b32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2202      	movs	r2, #2
 8005f62:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f939 	bl	80061f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005f7e:	e0fc      	b.n	800617a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	f040 80f5 	bne.w	800617a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	f040 80eb 	bne.w	800617a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f91c 	bl	80061f0 <HAL_UARTEx_RxEventCallback>
      return;
 8005fb8:	e0df      	b.n	800617a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 80d1 	beq.w	800617e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005fdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 80cc 	beq.w	800617e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fee:	e853 3f00 	ldrex	r3, [r3]
 8005ff2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ffa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006008:	647b      	str	r3, [r7, #68]	@ 0x44
 800600a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800600e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e4      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3308      	adds	r3, #8
 8006022:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	623b      	str	r3, [r7, #32]
   return(result);
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006032:	f023 0301 	bic.w	r3, r3, #1
 8006036:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3308      	adds	r3, #8
 8006040:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006044:	633a      	str	r2, [r7, #48]	@ 0x30
 8006046:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800604a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e1      	bne.n	800601c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2220      	movs	r2, #32
 800605c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	60fb      	str	r3, [r7, #12]
   return(result);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f023 0310 	bic.w	r3, r3, #16
 8006080:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800608e:	61fb      	str	r3, [r7, #28]
 8006090:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	69b9      	ldr	r1, [r7, #24]
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	617b      	str	r3, [r7, #20]
   return(result);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e4      	bne.n	800606c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2202      	movs	r2, #2
 80060a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f89e 	bl	80061f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060b4:	e063      	b.n	800617e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00e      	beq.n	80060e0 <HAL_UART_IRQHandler+0x5d8>
 80060c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d008      	beq.n	80060e0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80060d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f001 f825 	bl	8007128 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060de:	e051      	b.n	8006184 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80060e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d014      	beq.n	8006116 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80060ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d105      	bne.n	8006104 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80060f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d008      	beq.n	8006116 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006108:	2b00      	cmp	r3, #0
 800610a:	d03a      	beq.n	8006182 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	4798      	blx	r3
    }
    return;
 8006114:	e035      	b.n	8006182 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800611a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611e:	2b00      	cmp	r3, #0
 8006120:	d009      	beq.n	8006136 <HAL_UART_IRQHandler+0x62e>
 8006122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 ffcf 	bl	80070d2 <UART_EndTransmit_IT>
    return;
 8006134:	e026      	b.n	8006184 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800613a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d009      	beq.n	8006156 <HAL_UART_IRQHandler+0x64e>
 8006142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006146:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fffe 	bl	8007150 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006154:	e016      	b.n	8006184 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800615a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d010      	beq.n	8006184 <HAL_UART_IRQHandler+0x67c>
 8006162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006166:	2b00      	cmp	r3, #0
 8006168:	da0c      	bge.n	8006184 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 ffe6 	bl	800713c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006170:	e008      	b.n	8006184 <HAL_UART_IRQHandler+0x67c>
      return;
 8006172:	bf00      	nop
 8006174:	e006      	b.n	8006184 <HAL_UART_IRQHandler+0x67c>
    return;
 8006176:	bf00      	nop
 8006178:	e004      	b.n	8006184 <HAL_UART_IRQHandler+0x67c>
      return;
 800617a:	bf00      	nop
 800617c:	e002      	b.n	8006184 <HAL_UART_IRQHandler+0x67c>
      return;
 800617e:	bf00      	nop
 8006180:	e000      	b.n	8006184 <HAL_UART_IRQHandler+0x67c>
    return;
 8006182:	bf00      	nop
  }
}
 8006184:	37e8      	adds	r7, #232	@ 0xe8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop

0800618c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	460b      	mov	r3, r1
 80061fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800620c:	b08c      	sub	sp, #48	@ 0x30
 800620e:	af00      	add	r7, sp, #0
 8006210:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	431a      	orrs	r2, r3
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	431a      	orrs	r2, r3
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	4313      	orrs	r3, r2
 800622e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	4baa      	ldr	r3, [pc, #680]	@ (80064e0 <UART_SetConfig+0x2d8>)
 8006238:	4013      	ands	r3, r2
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	6812      	ldr	r2, [r2, #0]
 800623e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006240:	430b      	orrs	r3, r1
 8006242:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a9f      	ldr	r2, [pc, #636]	@ (80064e4 <UART_SetConfig+0x2dc>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d004      	beq.n	8006274 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006270:	4313      	orrs	r3, r2
 8006272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800627e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	6812      	ldr	r2, [r2, #0]
 8006286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006288:	430b      	orrs	r3, r1
 800628a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006292:	f023 010f 	bic.w	r1, r3, #15
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a90      	ldr	r2, [pc, #576]	@ (80064e8 <UART_SetConfig+0x2e0>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d125      	bne.n	80062f8 <UART_SetConfig+0xf0>
 80062ac:	4b8f      	ldr	r3, [pc, #572]	@ (80064ec <UART_SetConfig+0x2e4>)
 80062ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d81a      	bhi.n	80062f0 <UART_SetConfig+0xe8>
 80062ba:	a201      	add	r2, pc, #4	@ (adr r2, 80062c0 <UART_SetConfig+0xb8>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	080062d1 	.word	0x080062d1
 80062c4:	080062e1 	.word	0x080062e1
 80062c8:	080062d9 	.word	0x080062d9
 80062cc:	080062e9 	.word	0x080062e9
 80062d0:	2301      	movs	r3, #1
 80062d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062d6:	e116      	b.n	8006506 <UART_SetConfig+0x2fe>
 80062d8:	2302      	movs	r3, #2
 80062da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062de:	e112      	b.n	8006506 <UART_SetConfig+0x2fe>
 80062e0:	2304      	movs	r3, #4
 80062e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062e6:	e10e      	b.n	8006506 <UART_SetConfig+0x2fe>
 80062e8:	2308      	movs	r3, #8
 80062ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ee:	e10a      	b.n	8006506 <UART_SetConfig+0x2fe>
 80062f0:	2310      	movs	r3, #16
 80062f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062f6:	e106      	b.n	8006506 <UART_SetConfig+0x2fe>
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a7c      	ldr	r2, [pc, #496]	@ (80064f0 <UART_SetConfig+0x2e8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d138      	bne.n	8006374 <UART_SetConfig+0x16c>
 8006302:	4b7a      	ldr	r3, [pc, #488]	@ (80064ec <UART_SetConfig+0x2e4>)
 8006304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006308:	f003 030c 	and.w	r3, r3, #12
 800630c:	2b0c      	cmp	r3, #12
 800630e:	d82d      	bhi.n	800636c <UART_SetConfig+0x164>
 8006310:	a201      	add	r2, pc, #4	@ (adr r2, 8006318 <UART_SetConfig+0x110>)
 8006312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006316:	bf00      	nop
 8006318:	0800634d 	.word	0x0800634d
 800631c:	0800636d 	.word	0x0800636d
 8006320:	0800636d 	.word	0x0800636d
 8006324:	0800636d 	.word	0x0800636d
 8006328:	0800635d 	.word	0x0800635d
 800632c:	0800636d 	.word	0x0800636d
 8006330:	0800636d 	.word	0x0800636d
 8006334:	0800636d 	.word	0x0800636d
 8006338:	08006355 	.word	0x08006355
 800633c:	0800636d 	.word	0x0800636d
 8006340:	0800636d 	.word	0x0800636d
 8006344:	0800636d 	.word	0x0800636d
 8006348:	08006365 	.word	0x08006365
 800634c:	2300      	movs	r3, #0
 800634e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006352:	e0d8      	b.n	8006506 <UART_SetConfig+0x2fe>
 8006354:	2302      	movs	r3, #2
 8006356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800635a:	e0d4      	b.n	8006506 <UART_SetConfig+0x2fe>
 800635c:	2304      	movs	r3, #4
 800635e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006362:	e0d0      	b.n	8006506 <UART_SetConfig+0x2fe>
 8006364:	2308      	movs	r3, #8
 8006366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800636a:	e0cc      	b.n	8006506 <UART_SetConfig+0x2fe>
 800636c:	2310      	movs	r3, #16
 800636e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006372:	e0c8      	b.n	8006506 <UART_SetConfig+0x2fe>
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a5e      	ldr	r2, [pc, #376]	@ (80064f4 <UART_SetConfig+0x2ec>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d125      	bne.n	80063ca <UART_SetConfig+0x1c2>
 800637e:	4b5b      	ldr	r3, [pc, #364]	@ (80064ec <UART_SetConfig+0x2e4>)
 8006380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006384:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006388:	2b30      	cmp	r3, #48	@ 0x30
 800638a:	d016      	beq.n	80063ba <UART_SetConfig+0x1b2>
 800638c:	2b30      	cmp	r3, #48	@ 0x30
 800638e:	d818      	bhi.n	80063c2 <UART_SetConfig+0x1ba>
 8006390:	2b20      	cmp	r3, #32
 8006392:	d00a      	beq.n	80063aa <UART_SetConfig+0x1a2>
 8006394:	2b20      	cmp	r3, #32
 8006396:	d814      	bhi.n	80063c2 <UART_SetConfig+0x1ba>
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <UART_SetConfig+0x19a>
 800639c:	2b10      	cmp	r3, #16
 800639e:	d008      	beq.n	80063b2 <UART_SetConfig+0x1aa>
 80063a0:	e00f      	b.n	80063c2 <UART_SetConfig+0x1ba>
 80063a2:	2300      	movs	r3, #0
 80063a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063a8:	e0ad      	b.n	8006506 <UART_SetConfig+0x2fe>
 80063aa:	2302      	movs	r3, #2
 80063ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063b0:	e0a9      	b.n	8006506 <UART_SetConfig+0x2fe>
 80063b2:	2304      	movs	r3, #4
 80063b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063b8:	e0a5      	b.n	8006506 <UART_SetConfig+0x2fe>
 80063ba:	2308      	movs	r3, #8
 80063bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063c0:	e0a1      	b.n	8006506 <UART_SetConfig+0x2fe>
 80063c2:	2310      	movs	r3, #16
 80063c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063c8:	e09d      	b.n	8006506 <UART_SetConfig+0x2fe>
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a4a      	ldr	r2, [pc, #296]	@ (80064f8 <UART_SetConfig+0x2f0>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d125      	bne.n	8006420 <UART_SetConfig+0x218>
 80063d4:	4b45      	ldr	r3, [pc, #276]	@ (80064ec <UART_SetConfig+0x2e4>)
 80063d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80063de:	2bc0      	cmp	r3, #192	@ 0xc0
 80063e0:	d016      	beq.n	8006410 <UART_SetConfig+0x208>
 80063e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80063e4:	d818      	bhi.n	8006418 <UART_SetConfig+0x210>
 80063e6:	2b80      	cmp	r3, #128	@ 0x80
 80063e8:	d00a      	beq.n	8006400 <UART_SetConfig+0x1f8>
 80063ea:	2b80      	cmp	r3, #128	@ 0x80
 80063ec:	d814      	bhi.n	8006418 <UART_SetConfig+0x210>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <UART_SetConfig+0x1f0>
 80063f2:	2b40      	cmp	r3, #64	@ 0x40
 80063f4:	d008      	beq.n	8006408 <UART_SetConfig+0x200>
 80063f6:	e00f      	b.n	8006418 <UART_SetConfig+0x210>
 80063f8:	2300      	movs	r3, #0
 80063fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063fe:	e082      	b.n	8006506 <UART_SetConfig+0x2fe>
 8006400:	2302      	movs	r3, #2
 8006402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006406:	e07e      	b.n	8006506 <UART_SetConfig+0x2fe>
 8006408:	2304      	movs	r3, #4
 800640a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800640e:	e07a      	b.n	8006506 <UART_SetConfig+0x2fe>
 8006410:	2308      	movs	r3, #8
 8006412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006416:	e076      	b.n	8006506 <UART_SetConfig+0x2fe>
 8006418:	2310      	movs	r3, #16
 800641a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800641e:	e072      	b.n	8006506 <UART_SetConfig+0x2fe>
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a35      	ldr	r2, [pc, #212]	@ (80064fc <UART_SetConfig+0x2f4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d12a      	bne.n	8006480 <UART_SetConfig+0x278>
 800642a:	4b30      	ldr	r3, [pc, #192]	@ (80064ec <UART_SetConfig+0x2e4>)
 800642c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006430:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006434:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006438:	d01a      	beq.n	8006470 <UART_SetConfig+0x268>
 800643a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800643e:	d81b      	bhi.n	8006478 <UART_SetConfig+0x270>
 8006440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006444:	d00c      	beq.n	8006460 <UART_SetConfig+0x258>
 8006446:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800644a:	d815      	bhi.n	8006478 <UART_SetConfig+0x270>
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <UART_SetConfig+0x250>
 8006450:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006454:	d008      	beq.n	8006468 <UART_SetConfig+0x260>
 8006456:	e00f      	b.n	8006478 <UART_SetConfig+0x270>
 8006458:	2300      	movs	r3, #0
 800645a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800645e:	e052      	b.n	8006506 <UART_SetConfig+0x2fe>
 8006460:	2302      	movs	r3, #2
 8006462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006466:	e04e      	b.n	8006506 <UART_SetConfig+0x2fe>
 8006468:	2304      	movs	r3, #4
 800646a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800646e:	e04a      	b.n	8006506 <UART_SetConfig+0x2fe>
 8006470:	2308      	movs	r3, #8
 8006472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006476:	e046      	b.n	8006506 <UART_SetConfig+0x2fe>
 8006478:	2310      	movs	r3, #16
 800647a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800647e:	e042      	b.n	8006506 <UART_SetConfig+0x2fe>
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a17      	ldr	r2, [pc, #92]	@ (80064e4 <UART_SetConfig+0x2dc>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d13a      	bne.n	8006500 <UART_SetConfig+0x2f8>
 800648a:	4b18      	ldr	r3, [pc, #96]	@ (80064ec <UART_SetConfig+0x2e4>)
 800648c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006490:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006494:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006498:	d01a      	beq.n	80064d0 <UART_SetConfig+0x2c8>
 800649a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800649e:	d81b      	bhi.n	80064d8 <UART_SetConfig+0x2d0>
 80064a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064a4:	d00c      	beq.n	80064c0 <UART_SetConfig+0x2b8>
 80064a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064aa:	d815      	bhi.n	80064d8 <UART_SetConfig+0x2d0>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <UART_SetConfig+0x2b0>
 80064b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064b4:	d008      	beq.n	80064c8 <UART_SetConfig+0x2c0>
 80064b6:	e00f      	b.n	80064d8 <UART_SetConfig+0x2d0>
 80064b8:	2300      	movs	r3, #0
 80064ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064be:	e022      	b.n	8006506 <UART_SetConfig+0x2fe>
 80064c0:	2302      	movs	r3, #2
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064c6:	e01e      	b.n	8006506 <UART_SetConfig+0x2fe>
 80064c8:	2304      	movs	r3, #4
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ce:	e01a      	b.n	8006506 <UART_SetConfig+0x2fe>
 80064d0:	2308      	movs	r3, #8
 80064d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064d6:	e016      	b.n	8006506 <UART_SetConfig+0x2fe>
 80064d8:	2310      	movs	r3, #16
 80064da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064de:	e012      	b.n	8006506 <UART_SetConfig+0x2fe>
 80064e0:	cfff69f3 	.word	0xcfff69f3
 80064e4:	40008000 	.word	0x40008000
 80064e8:	40013800 	.word	0x40013800
 80064ec:	40021000 	.word	0x40021000
 80064f0:	40004400 	.word	0x40004400
 80064f4:	40004800 	.word	0x40004800
 80064f8:	40004c00 	.word	0x40004c00
 80064fc:	40005000 	.word	0x40005000
 8006500:	2310      	movs	r3, #16
 8006502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4aae      	ldr	r2, [pc, #696]	@ (80067c4 <UART_SetConfig+0x5bc>)
 800650c:	4293      	cmp	r3, r2
 800650e:	f040 8097 	bne.w	8006640 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006512:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006516:	2b08      	cmp	r3, #8
 8006518:	d823      	bhi.n	8006562 <UART_SetConfig+0x35a>
 800651a:	a201      	add	r2, pc, #4	@ (adr r2, 8006520 <UART_SetConfig+0x318>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006545 	.word	0x08006545
 8006524:	08006563 	.word	0x08006563
 8006528:	0800654d 	.word	0x0800654d
 800652c:	08006563 	.word	0x08006563
 8006530:	08006553 	.word	0x08006553
 8006534:	08006563 	.word	0x08006563
 8006538:	08006563 	.word	0x08006563
 800653c:	08006563 	.word	0x08006563
 8006540:	0800655b 	.word	0x0800655b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006544:	f7fe faf0 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 8006548:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800654a:	e010      	b.n	800656e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800654c:	4b9e      	ldr	r3, [pc, #632]	@ (80067c8 <UART_SetConfig+0x5c0>)
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006550:	e00d      	b.n	800656e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006552:	f7fe fa7b 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 8006556:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006558:	e009      	b.n	800656e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800655a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800655e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006560:	e005      	b.n	800656e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800656c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 8130 	beq.w	80067d6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657a:	4a94      	ldr	r2, [pc, #592]	@ (80067cc <UART_SetConfig+0x5c4>)
 800657c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006580:	461a      	mov	r2, r3
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	fbb3 f3f2 	udiv	r3, r3, r2
 8006588:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	4613      	mov	r3, r2
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	4413      	add	r3, r2
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	429a      	cmp	r2, r3
 8006598:	d305      	bcc.n	80065a6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d903      	bls.n	80065ae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80065ac:	e113      	b.n	80067d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b0:	2200      	movs	r2, #0
 80065b2:	60bb      	str	r3, [r7, #8]
 80065b4:	60fa      	str	r2, [r7, #12]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ba:	4a84      	ldr	r2, [pc, #528]	@ (80067cc <UART_SetConfig+0x5c4>)
 80065bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	2200      	movs	r2, #0
 80065c4:	603b      	str	r3, [r7, #0]
 80065c6:	607a      	str	r2, [r7, #4]
 80065c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065d0:	f7fa fb4a 	bl	8000c68 <__aeabi_uldivmod>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4610      	mov	r0, r2
 80065da:	4619      	mov	r1, r3
 80065dc:	f04f 0200 	mov.w	r2, #0
 80065e0:	f04f 0300 	mov.w	r3, #0
 80065e4:	020b      	lsls	r3, r1, #8
 80065e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065ea:	0202      	lsls	r2, r0, #8
 80065ec:	6979      	ldr	r1, [r7, #20]
 80065ee:	6849      	ldr	r1, [r1, #4]
 80065f0:	0849      	lsrs	r1, r1, #1
 80065f2:	2000      	movs	r0, #0
 80065f4:	460c      	mov	r4, r1
 80065f6:	4605      	mov	r5, r0
 80065f8:	eb12 0804 	adds.w	r8, r2, r4
 80065fc:	eb43 0905 	adc.w	r9, r3, r5
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	469a      	mov	sl, r3
 8006608:	4693      	mov	fp, r2
 800660a:	4652      	mov	r2, sl
 800660c:	465b      	mov	r3, fp
 800660e:	4640      	mov	r0, r8
 8006610:	4649      	mov	r1, r9
 8006612:	f7fa fb29 	bl	8000c68 <__aeabi_uldivmod>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4613      	mov	r3, r2
 800661c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006624:	d308      	bcc.n	8006638 <UART_SetConfig+0x430>
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800662c:	d204      	bcs.n	8006638 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6a3a      	ldr	r2, [r7, #32]
 8006634:	60da      	str	r2, [r3, #12]
 8006636:	e0ce      	b.n	80067d6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800663e:	e0ca      	b.n	80067d6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006648:	d166      	bne.n	8006718 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800664a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800664e:	2b08      	cmp	r3, #8
 8006650:	d827      	bhi.n	80066a2 <UART_SetConfig+0x49a>
 8006652:	a201      	add	r2, pc, #4	@ (adr r2, 8006658 <UART_SetConfig+0x450>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	0800667d 	.word	0x0800667d
 800665c:	08006685 	.word	0x08006685
 8006660:	0800668d 	.word	0x0800668d
 8006664:	080066a3 	.word	0x080066a3
 8006668:	08006693 	.word	0x08006693
 800666c:	080066a3 	.word	0x080066a3
 8006670:	080066a3 	.word	0x080066a3
 8006674:	080066a3 	.word	0x080066a3
 8006678:	0800669b 	.word	0x0800669b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800667c:	f7fe fa54 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 8006680:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006682:	e014      	b.n	80066ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006684:	f7fe fa66 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
 8006688:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800668a:	e010      	b.n	80066ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800668c:	4b4e      	ldr	r3, [pc, #312]	@ (80067c8 <UART_SetConfig+0x5c0>)
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006690:	e00d      	b.n	80066ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006692:	f7fe f9db 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 8006696:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006698:	e009      	b.n	80066ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800669a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800669e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066a0:	e005      	b.n	80066ae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80066ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 8090 	beq.w	80067d6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ba:	4a44      	ldr	r2, [pc, #272]	@ (80067cc <UART_SetConfig+0x5c4>)
 80066bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066c0:	461a      	mov	r2, r3
 80066c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80066c8:	005a      	lsls	r2, r3, #1
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	085b      	lsrs	r3, r3, #1
 80066d0:	441a      	add	r2, r3
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	2b0f      	cmp	r3, #15
 80066e0:	d916      	bls.n	8006710 <UART_SetConfig+0x508>
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066e8:	d212      	bcs.n	8006710 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	f023 030f 	bic.w	r3, r3, #15
 80066f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	085b      	lsrs	r3, r3, #1
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	b29a      	uxth	r2, r3
 8006700:	8bfb      	ldrh	r3, [r7, #30]
 8006702:	4313      	orrs	r3, r2
 8006704:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	8bfa      	ldrh	r2, [r7, #30]
 800670c:	60da      	str	r2, [r3, #12]
 800670e:	e062      	b.n	80067d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006716:	e05e      	b.n	80067d6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006718:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800671c:	2b08      	cmp	r3, #8
 800671e:	d828      	bhi.n	8006772 <UART_SetConfig+0x56a>
 8006720:	a201      	add	r2, pc, #4	@ (adr r2, 8006728 <UART_SetConfig+0x520>)
 8006722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006726:	bf00      	nop
 8006728:	0800674d 	.word	0x0800674d
 800672c:	08006755 	.word	0x08006755
 8006730:	0800675d 	.word	0x0800675d
 8006734:	08006773 	.word	0x08006773
 8006738:	08006763 	.word	0x08006763
 800673c:	08006773 	.word	0x08006773
 8006740:	08006773 	.word	0x08006773
 8006744:	08006773 	.word	0x08006773
 8006748:	0800676b 	.word	0x0800676b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800674c:	f7fe f9ec 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 8006750:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006752:	e014      	b.n	800677e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006754:	f7fe f9fe 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
 8006758:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800675a:	e010      	b.n	800677e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800675c:	4b1a      	ldr	r3, [pc, #104]	@ (80067c8 <UART_SetConfig+0x5c0>)
 800675e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006760:	e00d      	b.n	800677e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006762:	f7fe f973 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 8006766:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006768:	e009      	b.n	800677e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800676a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800676e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006770:	e005      	b.n	800677e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800677c:	bf00      	nop
    }

    if (pclk != 0U)
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	2b00      	cmp	r3, #0
 8006782:	d028      	beq.n	80067d6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006788:	4a10      	ldr	r2, [pc, #64]	@ (80067cc <UART_SetConfig+0x5c4>)
 800678a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800678e:	461a      	mov	r2, r3
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	fbb3 f2f2 	udiv	r2, r3, r2
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	085b      	lsrs	r3, r3, #1
 800679c:	441a      	add	r2, r3
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	2b0f      	cmp	r3, #15
 80067ac:	d910      	bls.n	80067d0 <UART_SetConfig+0x5c8>
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067b4:	d20c      	bcs.n	80067d0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60da      	str	r2, [r3, #12]
 80067c0:	e009      	b.n	80067d6 <UART_SetConfig+0x5ce>
 80067c2:	bf00      	nop
 80067c4:	40008000 	.word	0x40008000
 80067c8:	00f42400 	.word	0x00f42400
 80067cc:	0801a674 	.word	0x0801a674
      }
      else
      {
        ret = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2201      	movs	r2, #1
 80067da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2200      	movs	r2, #0
 80067ea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	2200      	movs	r2, #0
 80067f0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80067f2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3730      	adds	r7, #48	@ 0x30
 80067fa:	46bd      	mov	sp, r7
 80067fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006800 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00a      	beq.n	800682a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00a      	beq.n	800686e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01a      	beq.n	8006916 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068fe:	d10a      	bne.n	8006916 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	605a      	str	r2, [r3, #4]
  }
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b098      	sub	sp, #96	@ 0x60
 8006948:	af02      	add	r7, sp, #8
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006954:	f7fb fede 	bl	8002714 <HAL_GetTick>
 8006958:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0308 	and.w	r3, r3, #8
 8006964:	2b08      	cmp	r3, #8
 8006966:	d12f      	bne.n	80069c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006968:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006970:	2200      	movs	r2, #0
 8006972:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f88e 	bl	8006a98 <UART_WaitOnFlagUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d022      	beq.n	80069c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006992:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006996:	653b      	str	r3, [r7, #80]	@ 0x50
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	461a      	mov	r2, r3
 800699e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069a8:	e841 2300 	strex	r3, r2, [r1]
 80069ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1e6      	bne.n	8006982 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e063      	b.n	8006a90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d149      	bne.n	8006a6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069de:	2200      	movs	r2, #0
 80069e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f857 	bl	8006a98 <UART_WaitOnFlagUntilTimeout>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d03c      	beq.n	8006a6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	623b      	str	r3, [r7, #32]
   return(result);
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a10:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e6      	bne.n	80069f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3308      	adds	r3, #8
 8006a28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	e853 3f00 	ldrex	r3, [r3]
 8006a30:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f023 0301 	bic.w	r3, r3, #1
 8006a38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3308      	adds	r3, #8
 8006a40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a42:	61fa      	str	r2, [r7, #28]
 8006a44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	69b9      	ldr	r1, [r7, #24]
 8006a48:	69fa      	ldr	r2, [r7, #28]
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	617b      	str	r3, [r7, #20]
   return(result);
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e5      	bne.n	8006a22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e012      	b.n	8006a90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3758      	adds	r7, #88	@ 0x58
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	603b      	str	r3, [r7, #0]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa8:	e04f      	b.n	8006b4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ab0:	d04b      	beq.n	8006b4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab2:	f7fb fe2f 	bl	8002714 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d302      	bcc.n	8006ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e04e      	b.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0304 	and.w	r3, r3, #4
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d037      	beq.n	8006b4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2b80      	cmp	r3, #128	@ 0x80
 8006ade:	d034      	beq.n	8006b4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b40      	cmp	r3, #64	@ 0x40
 8006ae4:	d031      	beq.n	8006b4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	f003 0308 	and.w	r3, r3, #8
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d110      	bne.n	8006b16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2208      	movs	r2, #8
 8006afa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 f920 	bl	8006d42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2208      	movs	r2, #8
 8006b06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e029      	b.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b24:	d111      	bne.n	8006b4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 f906 	bl	8006d42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e00f      	b.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4013      	ands	r3, r2
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	bf0c      	ite	eq
 8006b5a:	2301      	moveq	r3, #1
 8006b5c:	2300      	movne	r3, #0
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	461a      	mov	r2, r3
 8006b62:	79fb      	ldrb	r3, [r7, #7]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d0a0      	beq.n	8006aaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b096      	sub	sp, #88	@ 0x58
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	88fa      	ldrh	r2, [r7, #6]
 8006b8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2222      	movs	r2, #34	@ 0x22
 8006b9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d02d      	beq.n	8006c06 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bb0:	4a40      	ldr	r2, [pc, #256]	@ (8006cb4 <UART_Start_Receive_DMA+0x140>)
 8006bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bba:	4a3f      	ldr	r2, [pc, #252]	@ (8006cb8 <UART_Start_Receive_DMA+0x144>)
 8006bbc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bc4:	4a3d      	ldr	r2, [pc, #244]	@ (8006cbc <UART_Start_Receive_DMA+0x148>)
 8006bc6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bce:	2200      	movs	r2, #0
 8006bd0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3324      	adds	r3, #36	@ 0x24
 8006bde:	4619      	mov	r1, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006be4:	461a      	mov	r2, r3
 8006be6:	88fb      	ldrh	r3, [r7, #6]
 8006be8:	f7fb ff28 	bl	8002a3c <HAL_DMA_Start_IT>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2210      	movs	r2, #16
 8006bf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e051      	b.n	8006caa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d018      	beq.n	8006c40 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c22:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c2e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006c32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006c3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e6      	bne.n	8006c0e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3308      	adds	r3, #8
 8006c46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4a:	e853 3f00 	ldrex	r3, [r3]
 8006c4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c52:	f043 0301 	orr.w	r3, r3, #1
 8006c56:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3308      	adds	r3, #8
 8006c5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c60:	637a      	str	r2, [r7, #52]	@ 0x34
 8006c62:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c68:	e841 2300 	strex	r3, r2, [r1]
 8006c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e5      	bne.n	8006c40 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3308      	adds	r3, #8
 8006c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	613b      	str	r3, [r7, #16]
   return(result);
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3308      	adds	r3, #8
 8006c92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c94:	623a      	str	r2, [r7, #32]
 8006c96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	69f9      	ldr	r1, [r7, #28]
 8006c9a:	6a3a      	ldr	r2, [r7, #32]
 8006c9c:	e841 2300 	strex	r3, r2, [r1]
 8006ca0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e5      	bne.n	8006c74 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3758      	adds	r7, #88	@ 0x58
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	08006ec5 	.word	0x08006ec5
 8006cb8:	08006ff1 	.word	0x08006ff1
 8006cbc:	0800702f 	.word	0x0800702f

08006cc0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b08f      	sub	sp, #60	@ 0x3c
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ce8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e6      	bne.n	8006cc8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3308      	adds	r3, #8
 8006d00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006d10:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3308      	adds	r3, #8
 8006d18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d1a:	61ba      	str	r2, [r7, #24]
 8006d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6979      	ldr	r1, [r7, #20]
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	613b      	str	r3, [r7, #16]
   return(result);
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e5      	bne.n	8006cfa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006d36:	bf00      	nop
 8006d38:	373c      	adds	r7, #60	@ 0x3c
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b095      	sub	sp, #84	@ 0x54
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d68:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d70:	e841 2300 	strex	r3, r2, [r1]
 8006d74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1e6      	bne.n	8006d4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3308      	adds	r3, #8
 8006d82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	e853 3f00 	ldrex	r3, [r3]
 8006d8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d92:	f023 0301 	bic.w	r3, r3, #1
 8006d96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006da0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006da2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006da6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006da8:	e841 2300 	strex	r3, r2, [r1]
 8006dac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e3      	bne.n	8006d7c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d118      	bne.n	8006dee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	e853 3f00 	ldrex	r3, [r3]
 8006dc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	f023 0310 	bic.w	r3, r3, #16
 8006dd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dda:	61bb      	str	r3, [r7, #24]
 8006ddc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	6979      	ldr	r1, [r7, #20]
 8006de0:	69ba      	ldr	r2, [r7, #24]
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	613b      	str	r3, [r7, #16]
   return(result);
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e6      	bne.n	8006dbc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006e02:	bf00      	nop
 8006e04:	3754      	adds	r7, #84	@ 0x54
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b090      	sub	sp, #64	@ 0x40
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0320 	and.w	r3, r3, #32
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d137      	bne.n	8006e9a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3308      	adds	r3, #8
 8006e38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	623b      	str	r3, [r7, #32]
   return(result);
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3308      	adds	r3, #8
 8006e50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e52:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e5a:	e841 2300 	strex	r3, r2, [r1]
 8006e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e5      	bne.n	8006e32 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	461a      	mov	r2, r3
 8006e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e84:	61fb      	str	r3, [r7, #28]
 8006e86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	69b9      	ldr	r1, [r7, #24]
 8006e8a:	69fa      	ldr	r2, [r7, #28]
 8006e8c:	e841 2300 	strex	r3, r2, [r1]
 8006e90:	617b      	str	r3, [r7, #20]
   return(result);
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e6      	bne.n	8006e66 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e98:	e002      	b.n	8006ea0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006e9a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006e9c:	f7ff f976 	bl	800618c <HAL_UART_TxCpltCallback>
}
 8006ea0:	bf00      	nop
 8006ea2:	3740      	adds	r7, #64	@ 0x40
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f7ff f972 	bl	80061a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ebc:	bf00      	nop
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b09c      	sub	sp, #112	@ 0x70
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0320 	and.w	r3, r3, #32
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d171      	bne.n	8006fc4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006efc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	461a      	mov	r2, r3
 8006f04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e6      	bne.n	8006ee8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3308      	adds	r3, #8
 8006f20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f24:	e853 3f00 	ldrex	r3, [r3]
 8006f28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f2c:	f023 0301 	bic.w	r3, r3, #1
 8006f30:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3308      	adds	r3, #8
 8006f38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f42:	e841 2300 	strex	r3, r2, [r1]
 8006f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e5      	bne.n	8006f1a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3308      	adds	r3, #8
 8006f54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f64:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e5      	bne.n	8006f4e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f84:	2220      	movs	r2, #32
 8006f86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d118      	bne.n	8006fc4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	e853 3f00 	ldrex	r3, [r3]
 8006f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f023 0310 	bic.w	r3, r3, #16
 8006fa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	461a      	mov	r2, r3
 8006fae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fb0:	61fb      	str	r3, [r7, #28]
 8006fb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb4:	69b9      	ldr	r1, [r7, #24]
 8006fb6:	69fa      	ldr	r2, [r7, #28]
 8006fb8:	e841 2300 	strex	r3, r2, [r1]
 8006fbc:	617b      	str	r3, [r7, #20]
   return(result);
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e6      	bne.n	8006f92 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d107      	bne.n	8006fe2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006fdc:	f7ff f908 	bl	80061f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fe0:	e002      	b.n	8006fe8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006fe2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006fe4:	f7ff f8e6 	bl	80061b4 <HAL_UART_RxCpltCallback>
}
 8006fe8:	bf00      	nop
 8006fea:	3770      	adds	r7, #112	@ 0x70
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2201      	movs	r2, #1
 8007002:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007008:	2b01      	cmp	r3, #1
 800700a:	d109      	bne.n	8007020 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007012:	085b      	lsrs	r3, r3, #1
 8007014:	b29b      	uxth	r3, r3
 8007016:	4619      	mov	r1, r3
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f7ff f8e9 	bl	80061f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800701e:	e002      	b.n	8007026 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f7ff f8d1 	bl	80061c8 <HAL_UART_RxHalfCpltCallback>
}
 8007026:	bf00      	nop
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b086      	sub	sp, #24
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007042:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800704a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007056:	2b80      	cmp	r3, #128	@ 0x80
 8007058:	d109      	bne.n	800706e <UART_DMAError+0x40>
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	2b21      	cmp	r3, #33	@ 0x21
 800705e:	d106      	bne.n	800706e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2200      	movs	r2, #0
 8007064:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007068:	6978      	ldr	r0, [r7, #20]
 800706a:	f7ff fe29 	bl	8006cc0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007078:	2b40      	cmp	r3, #64	@ 0x40
 800707a:	d109      	bne.n	8007090 <UART_DMAError+0x62>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b22      	cmp	r3, #34	@ 0x22
 8007080:	d106      	bne.n	8007090 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2200      	movs	r2, #0
 8007086:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800708a:	6978      	ldr	r0, [r7, #20]
 800708c:	f7ff fe59 	bl	8006d42 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007096:	f043 0210 	orr.w	r2, r3, #16
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070a0:	6978      	ldr	r0, [r7, #20]
 80070a2:	f7ff f89b 	bl	80061dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070a6:	bf00      	nop
 80070a8:	3718      	adds	r7, #24
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f7ff f889 	bl	80061dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ca:	bf00      	nop
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b088      	sub	sp, #32
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	e853 3f00 	ldrex	r3, [r3]
 80070e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070ee:	61fb      	str	r3, [r7, #28]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	461a      	mov	r2, r3
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	61bb      	str	r3, [r7, #24]
 80070fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fc:	6979      	ldr	r1, [r7, #20]
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	e841 2300 	strex	r3, r2, [r1]
 8007104:	613b      	str	r3, [r7, #16]
   return(result);
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e6      	bne.n	80070da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2220      	movs	r2, #32
 8007110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7ff f836 	bl	800618c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007120:	bf00      	nop
 8007122:	3720      	adds	r7, #32
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007172:	2b01      	cmp	r3, #1
 8007174:	d101      	bne.n	800717a <HAL_UARTEx_DisableFifoMode+0x16>
 8007176:	2302      	movs	r3, #2
 8007178:	e027      	b.n	80071ca <HAL_UARTEx_DisableFifoMode+0x66>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2224      	movs	r2, #36	@ 0x24
 8007186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0201 	bic.w	r2, r2, #1
 80071a0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80071a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071ea:	2302      	movs	r3, #2
 80071ec:	e02d      	b.n	800724a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2224      	movs	r2, #36	@ 0x24
 80071fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0201 	bic.w	r2, r2, #1
 8007214:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f850 	bl	80072d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2220      	movs	r2, #32
 800723c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007262:	2b01      	cmp	r3, #1
 8007264:	d101      	bne.n	800726a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007266:	2302      	movs	r3, #2
 8007268:	e02d      	b.n	80072c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2224      	movs	r2, #36	@ 0x24
 8007276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0201 	bic.w	r2, r2, #1
 8007290:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f812 	bl	80072d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d108      	bne.n	80072f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072f0:	e031      	b.n	8007356 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072f2:	2308      	movs	r3, #8
 80072f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072f6:	2308      	movs	r3, #8
 80072f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	0e5b      	lsrs	r3, r3, #25
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	0f5b      	lsrs	r3, r3, #29
 8007312:	b2db      	uxtb	r3, r3
 8007314:	f003 0307 	and.w	r3, r3, #7
 8007318:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	7b3a      	ldrb	r2, [r7, #12]
 800731e:	4911      	ldr	r1, [pc, #68]	@ (8007364 <UARTEx_SetNbDataToProcess+0x94>)
 8007320:	5c8a      	ldrb	r2, [r1, r2]
 8007322:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007326:	7b3a      	ldrb	r2, [r7, #12]
 8007328:	490f      	ldr	r1, [pc, #60]	@ (8007368 <UARTEx_SetNbDataToProcess+0x98>)
 800732a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800732c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007330:	b29a      	uxth	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	7b7a      	ldrb	r2, [r7, #13]
 800733c:	4909      	ldr	r1, [pc, #36]	@ (8007364 <UARTEx_SetNbDataToProcess+0x94>)
 800733e:	5c8a      	ldrb	r2, [r1, r2]
 8007340:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007344:	7b7a      	ldrb	r2, [r7, #13]
 8007346:	4908      	ldr	r1, [pc, #32]	@ (8007368 <UARTEx_SetNbDataToProcess+0x98>)
 8007348:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800734a:	fb93 f3f2 	sdiv	r3, r3, r2
 800734e:	b29a      	uxth	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007356:	bf00      	nop
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	0801a68c 	.word	0x0801a68c
 8007368:	0801a694 	.word	0x0801a694

0800736c <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b088      	sub	sp, #32
 8007370:	af04      	add	r7, sp, #16
 8007372:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8007374:	2364      	movs	r3, #100	@ 0x64
 8007376:	9302      	str	r3, [sp, #8]
 8007378:	2301      	movs	r3, #1
 800737a:	9301      	str	r3, [sp, #4]
 800737c:	f107 030f 	add.w	r3, r7, #15
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	2301      	movs	r3, #1
 8007384:	2275      	movs	r2, #117	@ 0x75
 8007386:	21d0      	movs	r1, #208	@ 0xd0
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7fc f98b 	bl	80036a4 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	2b68      	cmp	r3, #104	@ 0x68
 8007392:	d13d      	bne.n	8007410 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8007398:	2364      	movs	r3, #100	@ 0x64
 800739a:	9302      	str	r3, [sp, #8]
 800739c:	2301      	movs	r3, #1
 800739e:	9301      	str	r3, [sp, #4]
 80073a0:	f107 030e 	add.w	r3, r7, #14
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	2301      	movs	r3, #1
 80073a8:	226b      	movs	r2, #107	@ 0x6b
 80073aa:	21d0      	movs	r1, #208	@ 0xd0
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7fc f865 	bl	800347c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80073b2:	2307      	movs	r3, #7
 80073b4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80073b6:	2364      	movs	r3, #100	@ 0x64
 80073b8:	9302      	str	r3, [sp, #8]
 80073ba:	2301      	movs	r3, #1
 80073bc:	9301      	str	r3, [sp, #4]
 80073be:	f107 030e 	add.w	r3, r7, #14
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	2301      	movs	r3, #1
 80073c6:	2219      	movs	r2, #25
 80073c8:	21d0      	movs	r1, #208	@ 0xd0
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7fc f856 	bl	800347c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80073d0:	2300      	movs	r3, #0
 80073d2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80073d4:	2364      	movs	r3, #100	@ 0x64
 80073d6:	9302      	str	r3, [sp, #8]
 80073d8:	2301      	movs	r3, #1
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	f107 030e 	add.w	r3, r7, #14
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	2301      	movs	r3, #1
 80073e4:	221c      	movs	r2, #28
 80073e6:	21d0      	movs	r1, #208	@ 0xd0
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7fc f847 	bl	800347c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80073ee:	2300      	movs	r3, #0
 80073f0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80073f2:	2364      	movs	r3, #100	@ 0x64
 80073f4:	9302      	str	r3, [sp, #8]
 80073f6:	2301      	movs	r3, #1
 80073f8:	9301      	str	r3, [sp, #4]
 80073fa:	f107 030e 	add.w	r3, r7, #14
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	2301      	movs	r3, #1
 8007402:	221b      	movs	r2, #27
 8007404:	21d0      	movs	r1, #208	@ 0xd0
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fc f838 	bl	800347c <HAL_I2C_Mem_Write>
        return 0;
 800740c:	2300      	movs	r3, #0
 800740e:	e000      	b.n	8007412 <MPU6050_Init+0xa6>
    }
    return 1;
 8007410:	2301      	movs	r3, #1
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	0000      	movs	r0, r0
 800741c:	0000      	movs	r0, r0
	...

08007420 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8007420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007424:	b094      	sub	sp, #80	@ 0x50
 8007426:	af04      	add	r7, sp, #16
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800742c:	2364      	movs	r3, #100	@ 0x64
 800742e:	9302      	str	r3, [sp, #8]
 8007430:	230e      	movs	r3, #14
 8007432:	9301      	str	r3, [sp, #4]
 8007434:	f107 0308 	add.w	r3, r7, #8
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	2301      	movs	r3, #1
 800743c:	223b      	movs	r2, #59	@ 0x3b
 800743e:	21d0      	movs	r1, #208	@ 0xd0
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7fc f92f 	bl	80036a4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8007446:	7a3b      	ldrb	r3, [r7, #8]
 8007448:	021b      	lsls	r3, r3, #8
 800744a:	b21a      	sxth	r2, r3
 800744c:	7a7b      	ldrb	r3, [r7, #9]
 800744e:	b21b      	sxth	r3, r3
 8007450:	4313      	orrs	r3, r2
 8007452:	b21a      	sxth	r2, r3
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8007458:	7abb      	ldrb	r3, [r7, #10]
 800745a:	021b      	lsls	r3, r3, #8
 800745c:	b21a      	sxth	r2, r3
 800745e:	7afb      	ldrb	r3, [r7, #11]
 8007460:	b21b      	sxth	r3, r3
 8007462:	4313      	orrs	r3, r2
 8007464:	b21a      	sxth	r2, r3
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800746a:	7b3b      	ldrb	r3, [r7, #12]
 800746c:	021b      	lsls	r3, r3, #8
 800746e:	b21a      	sxth	r2, r3
 8007470:	7b7b      	ldrb	r3, [r7, #13]
 8007472:	b21b      	sxth	r3, r3
 8007474:	4313      	orrs	r3, r2
 8007476:	b21a      	sxth	r2, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800747c:	7bbb      	ldrb	r3, [r7, #14]
 800747e:	021b      	lsls	r3, r3, #8
 8007480:	b21a      	sxth	r2, r3
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	b21b      	sxth	r3, r3
 8007486:	4313      	orrs	r3, r2
 8007488:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800748a:	7c3b      	ldrb	r3, [r7, #16]
 800748c:	021b      	lsls	r3, r3, #8
 800748e:	b21a      	sxth	r2, r3
 8007490:	7c7b      	ldrb	r3, [r7, #17]
 8007492:	b21b      	sxth	r3, r3
 8007494:	4313      	orrs	r3, r2
 8007496:	b21a      	sxth	r2, r3
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800749c:	7cbb      	ldrb	r3, [r7, #18]
 800749e:	021b      	lsls	r3, r3, #8
 80074a0:	b21a      	sxth	r2, r3
 80074a2:	7cfb      	ldrb	r3, [r7, #19]
 80074a4:	b21b      	sxth	r3, r3
 80074a6:	4313      	orrs	r3, r2
 80074a8:	b21a      	sxth	r2, r3
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80074ae:	7d3b      	ldrb	r3, [r7, #20]
 80074b0:	021b      	lsls	r3, r3, #8
 80074b2:	b21a      	sxth	r2, r3
 80074b4:	7d7b      	ldrb	r3, [r7, #21]
 80074b6:	b21b      	sxth	r3, r3
 80074b8:	4313      	orrs	r3, r2
 80074ba:	b21a      	sxth	r2, r3
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7f9 f864 	bl	8000594 <__aeabi_i2d>
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	4bbd      	ldr	r3, [pc, #756]	@ (80077c8 <MPU6050_Read_All+0x3a8>)
 80074d2:	f7f9 f9f3 	bl	80008bc <__aeabi_ddiv>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7f9 f854 	bl	8000594 <__aeabi_i2d>
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	4bb5      	ldr	r3, [pc, #724]	@ (80077c8 <MPU6050_Read_All+0x3a8>)
 80074f2:	f7f9 f9e3 	bl	80008bc <__aeabi_ddiv>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007506:	4618      	mov	r0, r3
 8007508:	f7f9 f844 	bl	8000594 <__aeabi_i2d>
 800750c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80077b0 <MPU6050_Read_All+0x390>)
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	f7f9 f9d3 	bl	80008bc <__aeabi_ddiv>
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8007520:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8007524:	ee07 3a90 	vmov	s15, r3
 8007528:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800752c:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 80077cc <MPU6050_Read_All+0x3ac>
 8007530:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007534:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 80077d0 <MPU6050_Read_All+0x3b0>
 8007538:	ee77 7a87 	vadd.f32	s15, s15, s14
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007548:	4618      	mov	r0, r3
 800754a:	f7f9 f823 	bl	8000594 <__aeabi_i2d>
 800754e:	a39a      	add	r3, pc, #616	@ (adr r3, 80077b8 <MPU6050_Read_All+0x398>)
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	f7f9 f9b2 	bl	80008bc <__aeabi_ddiv>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8007568:	4618      	mov	r0, r3
 800756a:	f7f9 f813 	bl	8000594 <__aeabi_i2d>
 800756e:	a392      	add	r3, pc, #584	@ (adr r3, 80077b8 <MPU6050_Read_All+0x398>)
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	f7f9 f9a2 	bl	80008bc <__aeabi_ddiv>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8007588:	4618      	mov	r0, r3
 800758a:	f7f9 f803 	bl	8000594 <__aeabi_i2d>
 800758e:	a38a      	add	r3, pc, #552	@ (adr r3, 80077b8 <MPU6050_Read_All+0x398>)
 8007590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007594:	f7f9 f992 	bl	80008bc <__aeabi_ddiv>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80075a2:	f7fb f8b7 	bl	8002714 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	4b8a      	ldr	r3, [pc, #552]	@ (80077d4 <MPU6050_Read_All+0x3b4>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7f8 ffe0 	bl	8000574 <__aeabi_ui2d>
 80075b4:	f04f 0200 	mov.w	r2, #0
 80075b8:	4b87      	ldr	r3, [pc, #540]	@ (80077d8 <MPU6050_Read_All+0x3b8>)
 80075ba:	f7f9 f97f 	bl	80008bc <__aeabi_ddiv>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 80075c6:	f7fb f8a5 	bl	8002714 <HAL_GetTick>
 80075ca:	4603      	mov	r3, r0
 80075cc:	4a81      	ldr	r2, [pc, #516]	@ (80077d4 <MPU6050_Read_All+0x3b4>)
 80075ce:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075d6:	461a      	mov	r2, r3
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075de:	fb03 f202 	mul.w	r2, r3, r2
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80075e8:	4619      	mov	r1, r3
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80075f0:	fb01 f303 	mul.w	r3, r1, r3
 80075f4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7f8 ffcc 	bl	8000594 <__aeabi_i2d>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	ec43 2b10 	vmov	d0, r2, r3
 8007604:	f012 fc34 	bl	8019e70 <sqrt>
 8007608:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 800760c:	f04f 0200 	mov.w	r2, #0
 8007610:	f04f 0300 	mov.w	r3, #0
 8007614:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007618:	f7f9 fa8e 	bl	8000b38 <__aeabi_dcmpeq>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d11f      	bne.n	8007662 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007628:	4618      	mov	r0, r3
 800762a:	f7f8 ffb3 	bl	8000594 <__aeabi_i2d>
 800762e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007632:	f7f9 f943 	bl	80008bc <__aeabi_ddiv>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	ec43 2b17 	vmov	d7, r2, r3
 800763e:	eeb0 0a47 	vmov.f32	s0, s14
 8007642:	eef0 0a67 	vmov.f32	s1, s15
 8007646:	f012 fc3f 	bl	8019ec8 <atan>
 800764a:	ec51 0b10 	vmov	r0, r1, d0
 800764e:	a35c      	add	r3, pc, #368	@ (adr r3, 80077c0 <MPU6050_Read_All+0x3a0>)
 8007650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007654:	f7f9 f808 	bl	8000668 <__aeabi_dmul>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8007660:	e005      	b.n	800766e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8007662:	f04f 0200 	mov.w	r2, #0
 8007666:	f04f 0300 	mov.w	r3, #0
 800766a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007674:	425b      	negs	r3, r3
 8007676:	4618      	mov	r0, r3
 8007678:	f7f8 ff8c 	bl	8000594 <__aeabi_i2d>
 800767c:	4682      	mov	sl, r0
 800767e:	468b      	mov	fp, r1
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007686:	4618      	mov	r0, r3
 8007688:	f7f8 ff84 	bl	8000594 <__aeabi_i2d>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	ec43 2b11 	vmov	d1, r2, r3
 8007694:	ec4b ab10 	vmov	d0, sl, fp
 8007698:	f012 fbe8 	bl	8019e6c <atan2>
 800769c:	ec51 0b10 	vmov	r0, r1, d0
 80076a0:	a347      	add	r3, pc, #284	@ (adr r3, 80077c0 <MPU6050_Read_All+0x3a0>)
 80076a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a6:	f7f8 ffdf 	bl	8000668 <__aeabi_dmul>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80076b2:	f04f 0200 	mov.w	r2, #0
 80076b6:	4b49      	ldr	r3, [pc, #292]	@ (80077dc <MPU6050_Read_All+0x3bc>)
 80076b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80076bc:	f7f9 fa46 	bl	8000b4c <__aeabi_dcmplt>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00a      	beq.n	80076dc <MPU6050_Read_All+0x2bc>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80076cc:	f04f 0200 	mov.w	r2, #0
 80076d0:	4b43      	ldr	r3, [pc, #268]	@ (80077e0 <MPU6050_Read_All+0x3c0>)
 80076d2:	f7f9 fa59 	bl	8000b88 <__aeabi_dcmpgt>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d114      	bne.n	8007706 <MPU6050_Read_All+0x2e6>
 80076dc:	f04f 0200 	mov.w	r2, #0
 80076e0:	4b3f      	ldr	r3, [pc, #252]	@ (80077e0 <MPU6050_Read_All+0x3c0>)
 80076e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80076e6:	f7f9 fa4f 	bl	8000b88 <__aeabi_dcmpgt>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d015      	beq.n	800771c <MPU6050_Read_All+0x2fc>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80076f6:	f04f 0200 	mov.w	r2, #0
 80076fa:	4b38      	ldr	r3, [pc, #224]	@ (80077dc <MPU6050_Read_All+0x3bc>)
 80076fc:	f7f9 fa26 	bl	8000b4c <__aeabi_dcmplt>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00a      	beq.n	800771c <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8007706:	4937      	ldr	r1, [pc, #220]	@ (80077e4 <MPU6050_Read_All+0x3c4>)
 8007708:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800770c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007716:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800771a:	e014      	b.n	8007746 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8007722:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8007726:	eeb0 1a47 	vmov.f32	s2, s14
 800772a:	eef0 1a67 	vmov.f32	s3, s15
 800772e:	ed97 0b06 	vldr	d0, [r7, #24]
 8007732:	482c      	ldr	r0, [pc, #176]	@ (80077e4 <MPU6050_Read_All+0x3c4>)
 8007734:	f000 f85a 	bl	80077ec <Kalman_getAngle>
 8007738:	eeb0 7a40 	vmov.f32	s14, s0
 800773c:	eef0 7a60 	vmov.f32	s15, s1
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800774c:	4690      	mov	r8, r2
 800774e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8007752:	f04f 0200 	mov.w	r2, #0
 8007756:	4b22      	ldr	r3, [pc, #136]	@ (80077e0 <MPU6050_Read_All+0x3c0>)
 8007758:	4640      	mov	r0, r8
 800775a:	4649      	mov	r1, r9
 800775c:	f7f9 fa14 	bl	8000b88 <__aeabi_dcmpgt>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d008      	beq.n	8007778 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800776c:	4614      	mov	r4, r2
 800776e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800777e:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8007782:	eeb0 1a47 	vmov.f32	s2, s14
 8007786:	eef0 1a67 	vmov.f32	s3, s15
 800778a:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 800778e:	4816      	ldr	r0, [pc, #88]	@ (80077e8 <MPU6050_Read_All+0x3c8>)
 8007790:	f000 f82c 	bl	80077ec <Kalman_getAngle>
 8007794:	eeb0 7a40 	vmov.f32	s14, s0
 8007798:	eef0 7a60 	vmov.f32	s15, s1
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 80077a2:	bf00      	nop
 80077a4:	3740      	adds	r7, #64	@ 0x40
 80077a6:	46bd      	mov	sp, r7
 80077a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077ac:	f3af 8000 	nop.w
 80077b0:	00000000 	.word	0x00000000
 80077b4:	40cc2900 	.word	0x40cc2900
 80077b8:	00000000 	.word	0x00000000
 80077bc:	40606000 	.word	0x40606000
 80077c0:	1a63c1f8 	.word	0x1a63c1f8
 80077c4:	404ca5dc 	.word	0x404ca5dc
 80077c8:	40d00000 	.word	0x40d00000
 80077cc:	43aa0000 	.word	0x43aa0000
 80077d0:	42121eb8 	.word	0x42121eb8
 80077d4:	20005094 	.word	0x20005094
 80077d8:	408f4000 	.word	0x408f4000
 80077dc:	c0568000 	.word	0xc0568000
 80077e0:	40568000 	.word	0x40568000
 80077e4:	20000058 	.word	0x20000058
 80077e8:	20000010 	.word	0x20000010

080077ec <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80077ec:	b5b0      	push	{r4, r5, r7, lr}
 80077ee:	b096      	sub	sp, #88	@ 0x58
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	61f8      	str	r0, [r7, #28]
 80077f4:	ed87 0b04 	vstr	d0, [r7, #16]
 80077f8:	ed87 1b02 	vstr	d1, [r7, #8]
 80077fc:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007806:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800780a:	f7f8 fd75 	bl	80002f8 <__aeabi_dsub>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800781c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007820:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007824:	f7f8 ff20 	bl	8000668 <__aeabi_dmul>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4620      	mov	r0, r4
 800782e:	4629      	mov	r1, r5
 8007830:	f7f8 fd64 	bl	80002fc <__adddf3>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	69f9      	ldr	r1, [r7, #28]
 800783a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800784a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800784e:	f7f8 ff0b 	bl	8000668 <__aeabi_dmul>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	4610      	mov	r0, r2
 8007858:	4619      	mov	r1, r3
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007860:	f7f8 fd4a 	bl	80002f8 <__aeabi_dsub>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	4610      	mov	r0, r2
 800786a:	4619      	mov	r1, r3
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007872:	f7f8 fd41 	bl	80002f8 <__aeabi_dsub>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	4610      	mov	r0, r2
 800787c:	4619      	mov	r1, r3
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	f7f8 fd3a 	bl	80002fc <__adddf3>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4610      	mov	r0, r2
 800788e:	4619      	mov	r1, r3
 8007890:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007894:	f7f8 fee8 	bl	8000668 <__aeabi_dmul>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	4620      	mov	r0, r4
 800789e:	4629      	mov	r1, r5
 80078a0:	f7f8 fd2c 	bl	80002fc <__adddf3>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	69f9      	ldr	r1, [r7, #28]
 80078aa:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80078ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078be:	f7f8 fed3 	bl	8000668 <__aeabi_dmul>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4620      	mov	r0, r4
 80078c8:	4629      	mov	r1, r5
 80078ca:	f7f8 fd15 	bl	80002f8 <__aeabi_dsub>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	69f9      	ldr	r1, [r7, #28]
 80078d4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80078e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078e8:	f7f8 febe 	bl	8000668 <__aeabi_dmul>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4620      	mov	r0, r4
 80078f2:	4629      	mov	r1, r5
 80078f4:	f7f8 fd00 	bl	80002f8 <__aeabi_dsub>
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	69f9      	ldr	r1, [r7, #28]
 80078fe:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800790e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007912:	f7f8 fea9 	bl	8000668 <__aeabi_dmul>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	4620      	mov	r0, r4
 800791c:	4629      	mov	r1, r5
 800791e:	f7f8 fced 	bl	80002fc <__adddf3>
 8007922:	4602      	mov	r2, r0
 8007924:	460b      	mov	r3, r1
 8007926:	69f9      	ldr	r1, [r7, #28]
 8007928:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007938:	f7f8 fce0 	bl	80002fc <__adddf3>
 800793c:	4602      	mov	r2, r0
 800793e:	460b      	mov	r3, r1
 8007940:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800794a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800794e:	f7f8 ffb5 	bl	80008bc <__aeabi_ddiv>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007960:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007964:	f7f8 ffaa 	bl	80008bc <__aeabi_ddiv>
 8007968:	4602      	mov	r2, r0
 800796a:	460b      	mov	r3, r1
 800796c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007976:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800797a:	f7f8 fcbd 	bl	80002f8 <__aeabi_dsub>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800798c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007990:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007994:	f7f8 fe68 	bl	8000668 <__aeabi_dmul>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4620      	mov	r0, r4
 800799e:	4629      	mov	r1, r5
 80079a0:	f7f8 fcac 	bl	80002fc <__adddf3>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	69f9      	ldr	r1, [r7, #28]
 80079aa:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80079b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80079b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80079bc:	f7f8 fe54 	bl	8000668 <__aeabi_dmul>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4620      	mov	r0, r4
 80079c6:	4629      	mov	r1, r5
 80079c8:	f7f8 fc98 	bl	80002fc <__adddf3>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	69f9      	ldr	r1, [r7, #28]
 80079d2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80079dc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80079e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80079f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80079f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80079f8:	f7f8 fe36 	bl	8000668 <__aeabi_dmul>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4620      	mov	r0, r4
 8007a02:	4629      	mov	r1, r5
 8007a04:	f7f8 fc78 	bl	80002f8 <__aeabi_dsub>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	69f9      	ldr	r1, [r7, #28]
 8007a0e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8007a18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007a1c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007a20:	f7f8 fe22 	bl	8000668 <__aeabi_dmul>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	4620      	mov	r0, r4
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	f7f8 fc64 	bl	80002f8 <__aeabi_dsub>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	69f9      	ldr	r1, [r7, #28]
 8007a36:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8007a40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007a44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a48:	f7f8 fe0e 	bl	8000668 <__aeabi_dmul>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4620      	mov	r0, r4
 8007a52:	4629      	mov	r1, r5
 8007a54:	f7f8 fc50 	bl	80002f8 <__aeabi_dsub>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	69f9      	ldr	r1, [r7, #28]
 8007a5e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8007a68:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007a6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007a70:	f7f8 fdfa 	bl	8000668 <__aeabi_dmul>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	4620      	mov	r0, r4
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	f7f8 fc3c 	bl	80002f8 <__aeabi_dsub>
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	69f9      	ldr	r1, [r7, #28]
 8007a86:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007a90:	ec43 2b17 	vmov	d7, r2, r3
};
 8007a94:	eeb0 0a47 	vmov.f32	s0, s14
 8007a98:	eef0 0a67 	vmov.f32	s1, s15
 8007a9c:	3758      	adds	r7, #88	@ 0x58
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007aa4 <__NVIC_SetPriority>:
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	4603      	mov	r3, r0
 8007aac:	6039      	str	r1, [r7, #0]
 8007aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	db0a      	blt.n	8007ace <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	490c      	ldr	r1, [pc, #48]	@ (8007af0 <__NVIC_SetPriority+0x4c>)
 8007abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ac2:	0112      	lsls	r2, r2, #4
 8007ac4:	b2d2      	uxtb	r2, r2
 8007ac6:	440b      	add	r3, r1
 8007ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007acc:	e00a      	b.n	8007ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	4908      	ldr	r1, [pc, #32]	@ (8007af4 <__NVIC_SetPriority+0x50>)
 8007ad4:	79fb      	ldrb	r3, [r7, #7]
 8007ad6:	f003 030f 	and.w	r3, r3, #15
 8007ada:	3b04      	subs	r3, #4
 8007adc:	0112      	lsls	r2, r2, #4
 8007ade:	b2d2      	uxtb	r2, r2
 8007ae0:	440b      	add	r3, r1
 8007ae2:	761a      	strb	r2, [r3, #24]
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	e000e100 	.word	0xe000e100
 8007af4:	e000ed00 	.word	0xe000ed00

08007af8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007af8:	b580      	push	{r7, lr}
 8007afa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007afc:	4b05      	ldr	r3, [pc, #20]	@ (8007b14 <SysTick_Handler+0x1c>)
 8007afe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007b00:	f001 fd40 	bl	8009584 <xTaskGetSchedulerState>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d001      	beq.n	8007b0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007b0a:	f002 fb35 	bl	800a178 <xPortSysTickHandler>
  }
}
 8007b0e:	bf00      	nop
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	e000e010 	.word	0xe000e010

08007b18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	f06f 0004 	mvn.w	r0, #4
 8007b22:	f7ff ffbf 	bl	8007aa4 <__NVIC_SetPriority>
#endif
}
 8007b26:	bf00      	nop
 8007b28:	bd80      	pop	{r7, pc}
	...

08007b2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b32:	f3ef 8305 	mrs	r3, IPSR
 8007b36:	603b      	str	r3, [r7, #0]
  return(result);
 8007b38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b3e:	f06f 0305 	mvn.w	r3, #5
 8007b42:	607b      	str	r3, [r7, #4]
 8007b44:	e00c      	b.n	8007b60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b46:	4b0a      	ldr	r3, [pc, #40]	@ (8007b70 <osKernelInitialize+0x44>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d105      	bne.n	8007b5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b4e:	4b08      	ldr	r3, [pc, #32]	@ (8007b70 <osKernelInitialize+0x44>)
 8007b50:	2201      	movs	r2, #1
 8007b52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	607b      	str	r3, [r7, #4]
 8007b58:	e002      	b.n	8007b60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007b5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b60:	687b      	ldr	r3, [r7, #4]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	370c      	adds	r7, #12
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	20005098 	.word	0x20005098

08007b74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b7a:	f3ef 8305 	mrs	r3, IPSR
 8007b7e:	603b      	str	r3, [r7, #0]
  return(result);
 8007b80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007b86:	f06f 0305 	mvn.w	r3, #5
 8007b8a:	607b      	str	r3, [r7, #4]
 8007b8c:	e010      	b.n	8007bb0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8007bbc <osKernelStart+0x48>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d109      	bne.n	8007baa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007b96:	f7ff ffbf 	bl	8007b18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007b9a:	4b08      	ldr	r3, [pc, #32]	@ (8007bbc <osKernelStart+0x48>)
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007ba0:	f001 f87a 	bl	8008c98 <vTaskStartScheduler>
      stat = osOK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	607b      	str	r3, [r7, #4]
 8007ba8:	e002      	b.n	8007bb0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007baa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bb0:	687b      	ldr	r3, [r7, #4]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	20005098 	.word	0x20005098

08007bc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08e      	sub	sp, #56	@ 0x38
 8007bc4:	af04      	add	r7, sp, #16
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bd0:	f3ef 8305 	mrs	r3, IPSR
 8007bd4:	617b      	str	r3, [r7, #20]
  return(result);
 8007bd6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d17e      	bne.n	8007cda <osThreadNew+0x11a>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d07b      	beq.n	8007cda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007be2:	2380      	movs	r3, #128	@ 0x80
 8007be4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007be6:	2318      	movs	r3, #24
 8007be8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007bee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bf2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d045      	beq.n	8007c86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <osThreadNew+0x48>
        name = attr->name;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d008      	beq.n	8007c2e <osThreadNew+0x6e>
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	2b38      	cmp	r3, #56	@ 0x38
 8007c20:	d805      	bhi.n	8007c2e <osThreadNew+0x6e>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <osThreadNew+0x72>
        return (NULL);
 8007c2e:	2300      	movs	r3, #0
 8007c30:	e054      	b.n	8007cdc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	089b      	lsrs	r3, r3, #2
 8007c40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00e      	beq.n	8007c68 <osThreadNew+0xa8>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	2b5b      	cmp	r3, #91	@ 0x5b
 8007c50:	d90a      	bls.n	8007c68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d006      	beq.n	8007c68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d002      	beq.n	8007c68 <osThreadNew+0xa8>
        mem = 1;
 8007c62:	2301      	movs	r3, #1
 8007c64:	61bb      	str	r3, [r7, #24]
 8007c66:	e010      	b.n	8007c8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10c      	bne.n	8007c8a <osThreadNew+0xca>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d108      	bne.n	8007c8a <osThreadNew+0xca>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d104      	bne.n	8007c8a <osThreadNew+0xca>
          mem = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	61bb      	str	r3, [r7, #24]
 8007c84:	e001      	b.n	8007c8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007c86:	2300      	movs	r3, #0
 8007c88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d110      	bne.n	8007cb2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c98:	9202      	str	r2, [sp, #8]
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	6a3a      	ldr	r2, [r7, #32]
 8007ca4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 fe1a 	bl	80088e0 <xTaskCreateStatic>
 8007cac:	4603      	mov	r3, r0
 8007cae:	613b      	str	r3, [r7, #16]
 8007cb0:	e013      	b.n	8007cda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d110      	bne.n	8007cda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	f107 0310 	add.w	r3, r7, #16
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 fe68 	bl	80089a0 <xTaskCreate>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d001      	beq.n	8007cda <osThreadNew+0x11a>
            hTask = NULL;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007cda:	693b      	ldr	r3, [r7, #16]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3728      	adds	r7, #40	@ 0x28
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cec:	f3ef 8305 	mrs	r3, IPSR
 8007cf0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cf2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <osDelay+0x1c>
    stat = osErrorISR;
 8007cf8:	f06f 0305 	mvn.w	r3, #5
 8007cfc:	60fb      	str	r3, [r7, #12]
 8007cfe:	e007      	b.n	8007d10 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007d00:	2300      	movs	r3, #0
 8007d02:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d002      	beq.n	8007d10 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 ff8e 	bl	8008c2c <vTaskDelay>
    }
  }

  return (stat);
 8007d10:	68fb      	ldr	r3, [r7, #12]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4a07      	ldr	r2, [pc, #28]	@ (8007d48 <vApplicationGetIdleTaskMemory+0x2c>)
 8007d2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	4a06      	ldr	r2, [pc, #24]	@ (8007d4c <vApplicationGetIdleTaskMemory+0x30>)
 8007d32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2280      	movs	r2, #128	@ 0x80
 8007d38:	601a      	str	r2, [r3, #0]
}
 8007d3a:	bf00      	nop
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	2000509c 	.word	0x2000509c
 8007d4c:	200050f8 	.word	0x200050f8

08007d50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4a07      	ldr	r2, [pc, #28]	@ (8007d7c <vApplicationGetTimerTaskMemory+0x2c>)
 8007d60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	4a06      	ldr	r2, [pc, #24]	@ (8007d80 <vApplicationGetTimerTaskMemory+0x30>)
 8007d66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d6e:	601a      	str	r2, [r3, #0]
}
 8007d70:	bf00      	nop
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	200052f8 	.word	0x200052f8
 8007d80:	20005354 	.word	0x20005354

08007d84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f103 0208 	add.w	r2, r3, #8
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f103 0208 	add.w	r2, r3, #8
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f103 0208 	add.w	r2, r3, #8
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007dd2:	bf00      	nop
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dde:	b480      	push	{r7}
 8007de0:	b085      	sub	sp, #20
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	689a      	ldr	r2, [r3, #8]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	601a      	str	r2, [r3, #0]
}
 8007e1a:	bf00      	nop
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e26:	b480      	push	{r7}
 8007e28:	b085      	sub	sp, #20
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e3c:	d103      	bne.n	8007e46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	e00c      	b.n	8007e60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	3308      	adds	r3, #8
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	e002      	b.n	8007e54 <vListInsert+0x2e>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d2f6      	bcs.n	8007e4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	601a      	str	r2, [r3, #0]
}
 8007e8c:	bf00      	nop
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	6892      	ldr	r2, [r2, #8]
 8007eae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	6852      	ldr	r2, [r2, #4]
 8007eb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d103      	bne.n	8007ecc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689a      	ldr	r2, [r3, #8]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	1e5a      	subs	r2, r3, #1
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10b      	bne.n	8007f18 <xQueueGenericReset+0x2c>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	60bb      	str	r3, [r7, #8]
}
 8007f12:	bf00      	nop
 8007f14:	bf00      	nop
 8007f16:	e7fd      	b.n	8007f14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f18:	f002 f89e 	bl	800a058 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f24:	68f9      	ldr	r1, [r7, #12]
 8007f26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f28:	fb01 f303 	mul.w	r3, r1, r3
 8007f2c:	441a      	add	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	68f9      	ldr	r1, [r7, #12]
 8007f4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f4e:	fb01 f303 	mul.w	r3, r1, r3
 8007f52:	441a      	add	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	22ff      	movs	r2, #255	@ 0xff
 8007f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	22ff      	movs	r2, #255	@ 0xff
 8007f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d114      	bne.n	8007f98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d01a      	beq.n	8007fac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3310      	adds	r3, #16
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f001 f91a 	bl	80091b4 <xTaskRemoveFromEventList>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d012      	beq.n	8007fac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f86:	4b0d      	ldr	r3, [pc, #52]	@ (8007fbc <xQueueGenericReset+0xd0>)
 8007f88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	e009      	b.n	8007fac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	3310      	adds	r3, #16
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7ff fef1 	bl	8007d84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3324      	adds	r3, #36	@ 0x24
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7ff feec 	bl	8007d84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007fac:	f002 f886 	bl	800a0bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007fb0:	2301      	movs	r3, #1
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	e000ed04 	.word	0xe000ed04

08007fc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08e      	sub	sp, #56	@ 0x38
 8007fc4:	af02      	add	r7, sp, #8
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
 8007fcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10b      	bne.n	8007fec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007fe6:	bf00      	nop
 8007fe8:	bf00      	nop
 8007fea:	e7fd      	b.n	8007fe8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10b      	bne.n	800800a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop
 8008008:	e7fd      	b.n	8008006 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <xQueueGenericCreateStatic+0x56>
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <xQueueGenericCreateStatic+0x5a>
 8008016:	2301      	movs	r3, #1
 8008018:	e000      	b.n	800801c <xQueueGenericCreateStatic+0x5c>
 800801a:	2300      	movs	r3, #0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10b      	bne.n	8008038 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	623b      	str	r3, [r7, #32]
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	e7fd      	b.n	8008034 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d102      	bne.n	8008044 <xQueueGenericCreateStatic+0x84>
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <xQueueGenericCreateStatic+0x88>
 8008044:	2301      	movs	r3, #1
 8008046:	e000      	b.n	800804a <xQueueGenericCreateStatic+0x8a>
 8008048:	2300      	movs	r3, #0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10b      	bne.n	8008066 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	61fb      	str	r3, [r7, #28]
}
 8008060:	bf00      	nop
 8008062:	bf00      	nop
 8008064:	e7fd      	b.n	8008062 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008066:	2350      	movs	r3, #80	@ 0x50
 8008068:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	2b50      	cmp	r3, #80	@ 0x50
 800806e:	d00b      	beq.n	8008088 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	61bb      	str	r3, [r7, #24]
}
 8008082:	bf00      	nop
 8008084:	bf00      	nop
 8008086:	e7fd      	b.n	8008084 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008088:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800808e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00d      	beq.n	80080b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800809c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80080a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	4613      	mov	r3, r2
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	68b9      	ldr	r1, [r7, #8]
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 f805 	bl	80080ba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3730      	adds	r7, #48	@ 0x30
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b084      	sub	sp, #16
 80080be:	af00      	add	r7, sp, #0
 80080c0:	60f8      	str	r0, [r7, #12]
 80080c2:	60b9      	str	r1, [r7, #8]
 80080c4:	607a      	str	r2, [r7, #4]
 80080c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d103      	bne.n	80080d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	e002      	b.n	80080dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80080e8:	2101      	movs	r1, #1
 80080ea:	69b8      	ldr	r0, [r7, #24]
 80080ec:	f7ff fefe 	bl	8007eec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	78fa      	ldrb	r2, [r7, #3]
 80080f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80080f8:	bf00      	nop
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b08e      	sub	sp, #56	@ 0x38
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800810e:	2300      	movs	r3, #0
 8008110:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10b      	bne.n	8008134 <xQueueGenericSend+0x34>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800812e:	bf00      	nop
 8008130:	bf00      	nop
 8008132:	e7fd      	b.n	8008130 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d103      	bne.n	8008142 <xQueueGenericSend+0x42>
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <xQueueGenericSend+0x46>
 8008142:	2301      	movs	r3, #1
 8008144:	e000      	b.n	8008148 <xQueueGenericSend+0x48>
 8008146:	2300      	movs	r3, #0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10b      	bne.n	8008164 <xQueueGenericSend+0x64>
	__asm volatile
 800814c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800815e:	bf00      	nop
 8008160:	bf00      	nop
 8008162:	e7fd      	b.n	8008160 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b02      	cmp	r3, #2
 8008168:	d103      	bne.n	8008172 <xQueueGenericSend+0x72>
 800816a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800816e:	2b01      	cmp	r3, #1
 8008170:	d101      	bne.n	8008176 <xQueueGenericSend+0x76>
 8008172:	2301      	movs	r3, #1
 8008174:	e000      	b.n	8008178 <xQueueGenericSend+0x78>
 8008176:	2300      	movs	r3, #0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10b      	bne.n	8008194 <xQueueGenericSend+0x94>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	623b      	str	r3, [r7, #32]
}
 800818e:	bf00      	nop
 8008190:	bf00      	nop
 8008192:	e7fd      	b.n	8008190 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008194:	f001 f9f6 	bl	8009584 <xTaskGetSchedulerState>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d102      	bne.n	80081a4 <xQueueGenericSend+0xa4>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <xQueueGenericSend+0xa8>
 80081a4:	2301      	movs	r3, #1
 80081a6:	e000      	b.n	80081aa <xQueueGenericSend+0xaa>
 80081a8:	2300      	movs	r3, #0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10b      	bne.n	80081c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	61fb      	str	r3, [r7, #28]
}
 80081c0:	bf00      	nop
 80081c2:	bf00      	nop
 80081c4:	e7fd      	b.n	80081c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081c6:	f001 ff47 	bl	800a058 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d302      	bcc.n	80081dc <xQueueGenericSend+0xdc>
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d129      	bne.n	8008230 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	68b9      	ldr	r1, [r7, #8]
 80081e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081e2:	f000 fa0f 	bl	8008604 <prvCopyDataToQueue>
 80081e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d010      	beq.n	8008212 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f2:	3324      	adds	r3, #36	@ 0x24
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 ffdd 	bl	80091b4 <xTaskRemoveFromEventList>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d013      	beq.n	8008228 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008200:	4b3f      	ldr	r3, [pc, #252]	@ (8008300 <xQueueGenericSend+0x200>)
 8008202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	e00a      	b.n	8008228 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008214:	2b00      	cmp	r3, #0
 8008216:	d007      	beq.n	8008228 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008218:	4b39      	ldr	r3, [pc, #228]	@ (8008300 <xQueueGenericSend+0x200>)
 800821a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008228:	f001 ff48 	bl	800a0bc <vPortExitCritical>
				return pdPASS;
 800822c:	2301      	movs	r3, #1
 800822e:	e063      	b.n	80082f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d103      	bne.n	800823e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008236:	f001 ff41 	bl	800a0bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800823a:	2300      	movs	r3, #0
 800823c:	e05c      	b.n	80082f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800823e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008240:	2b00      	cmp	r3, #0
 8008242:	d106      	bne.n	8008252 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008244:	f107 0314 	add.w	r3, r7, #20
 8008248:	4618      	mov	r0, r3
 800824a:	f001 f83f 	bl	80092cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800824e:	2301      	movs	r3, #1
 8008250:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008252:	f001 ff33 	bl	800a0bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008256:	f000 fd87 	bl	8008d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800825a:	f001 fefd 	bl	800a058 <vPortEnterCritical>
 800825e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008260:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008264:	b25b      	sxtb	r3, r3
 8008266:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800826a:	d103      	bne.n	8008274 <xQueueGenericSend+0x174>
 800826c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826e:	2200      	movs	r2, #0
 8008270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008276:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800827a:	b25b      	sxtb	r3, r3
 800827c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008280:	d103      	bne.n	800828a <xQueueGenericSend+0x18a>
 8008282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800828a:	f001 ff17 	bl	800a0bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800828e:	1d3a      	adds	r2, r7, #4
 8008290:	f107 0314 	add.w	r3, r7, #20
 8008294:	4611      	mov	r1, r2
 8008296:	4618      	mov	r0, r3
 8008298:	f001 f82e 	bl	80092f8 <xTaskCheckForTimeOut>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d124      	bne.n	80082ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082a4:	f000 faa6 	bl	80087f4 <prvIsQueueFull>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d018      	beq.n	80082e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b0:	3310      	adds	r3, #16
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	4611      	mov	r1, r2
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 ff2a 	bl	8009110 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082be:	f000 fa31 	bl	8008724 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082c2:	f000 fd5f 	bl	8008d84 <xTaskResumeAll>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f47f af7c 	bne.w	80081c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80082ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008300 <xQueueGenericSend+0x200>)
 80082d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	e772      	b.n	80081c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082e2:	f000 fa1f 	bl	8008724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082e6:	f000 fd4d 	bl	8008d84 <xTaskResumeAll>
 80082ea:	e76c      	b.n	80081c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082ee:	f000 fa19 	bl	8008724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082f2:	f000 fd47 	bl	8008d84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80082f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3738      	adds	r7, #56	@ 0x38
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	e000ed04 	.word	0xe000ed04

08008304 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b090      	sub	sp, #64	@ 0x40
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10b      	bne.n	8008334 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800831c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008320:	f383 8811 	msr	BASEPRI, r3
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800832e:	bf00      	nop
 8008330:	bf00      	nop
 8008332:	e7fd      	b.n	8008330 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d103      	bne.n	8008342 <xQueueGenericSendFromISR+0x3e>
 800833a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <xQueueGenericSendFromISR+0x42>
 8008342:	2301      	movs	r3, #1
 8008344:	e000      	b.n	8008348 <xQueueGenericSendFromISR+0x44>
 8008346:	2300      	movs	r3, #0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10b      	bne.n	8008364 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800834c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800835e:	bf00      	nop
 8008360:	bf00      	nop
 8008362:	e7fd      	b.n	8008360 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2b02      	cmp	r3, #2
 8008368:	d103      	bne.n	8008372 <xQueueGenericSendFromISR+0x6e>
 800836a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800836e:	2b01      	cmp	r3, #1
 8008370:	d101      	bne.n	8008376 <xQueueGenericSendFromISR+0x72>
 8008372:	2301      	movs	r3, #1
 8008374:	e000      	b.n	8008378 <xQueueGenericSendFromISR+0x74>
 8008376:	2300      	movs	r3, #0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10b      	bne.n	8008394 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800837c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008380:	f383 8811 	msr	BASEPRI, r3
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	623b      	str	r3, [r7, #32]
}
 800838e:	bf00      	nop
 8008390:	bf00      	nop
 8008392:	e7fd      	b.n	8008390 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008394:	f001 ff40 	bl	800a218 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008398:	f3ef 8211 	mrs	r2, BASEPRI
 800839c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	61fa      	str	r2, [r7, #28]
 80083ae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083bc:	429a      	cmp	r2, r3
 80083be:	d302      	bcc.n	80083c6 <xQueueGenericSendFromISR+0xc2>
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d12f      	bne.n	8008426 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80083dc:	f000 f912 	bl	8008604 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80083e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083e8:	d112      	bne.n	8008410 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d016      	beq.n	8008420 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f4:	3324      	adds	r3, #36	@ 0x24
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fedc 	bl	80091b4 <xTaskRemoveFromEventList>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00e      	beq.n	8008420 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00b      	beq.n	8008420 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	e007      	b.n	8008420 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008410:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008414:	3301      	adds	r3, #1
 8008416:	b2db      	uxtb	r3, r3
 8008418:	b25a      	sxtb	r2, r3
 800841a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008420:	2301      	movs	r3, #1
 8008422:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008424:	e001      	b.n	800842a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008426:	2300      	movs	r3, #0
 8008428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800842a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800842c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008434:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008438:	4618      	mov	r0, r3
 800843a:	3740      	adds	r7, #64	@ 0x40
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b08c      	sub	sp, #48	@ 0x30
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800844c:	2300      	movs	r3, #0
 800844e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10b      	bne.n	8008472 <xQueueReceive+0x32>
	__asm volatile
 800845a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	623b      	str	r3, [r7, #32]
}
 800846c:	bf00      	nop
 800846e:	bf00      	nop
 8008470:	e7fd      	b.n	800846e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d103      	bne.n	8008480 <xQueueReceive+0x40>
 8008478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800847a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <xQueueReceive+0x44>
 8008480:	2301      	movs	r3, #1
 8008482:	e000      	b.n	8008486 <xQueueReceive+0x46>
 8008484:	2300      	movs	r3, #0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10b      	bne.n	80084a2 <xQueueReceive+0x62>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	61fb      	str	r3, [r7, #28]
}
 800849c:	bf00      	nop
 800849e:	bf00      	nop
 80084a0:	e7fd      	b.n	800849e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084a2:	f001 f86f 	bl	8009584 <xTaskGetSchedulerState>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d102      	bne.n	80084b2 <xQueueReceive+0x72>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <xQueueReceive+0x76>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e000      	b.n	80084b8 <xQueueReceive+0x78>
 80084b6:	2300      	movs	r3, #0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10b      	bne.n	80084d4 <xQueueReceive+0x94>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	61bb      	str	r3, [r7, #24]
}
 80084ce:	bf00      	nop
 80084d0:	bf00      	nop
 80084d2:	e7fd      	b.n	80084d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084d4:	f001 fdc0 	bl	800a058 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d01f      	beq.n	8008524 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084e4:	68b9      	ldr	r1, [r7, #8]
 80084e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084e8:	f000 f8f6 	bl	80086d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ee:	1e5a      	subs	r2, r3, #1
 80084f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00f      	beq.n	800851c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fe:	3310      	adds	r3, #16
 8008500:	4618      	mov	r0, r3
 8008502:	f000 fe57 	bl	80091b4 <xTaskRemoveFromEventList>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d007      	beq.n	800851c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800850c:	4b3c      	ldr	r3, [pc, #240]	@ (8008600 <xQueueReceive+0x1c0>)
 800850e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800851c:	f001 fdce 	bl	800a0bc <vPortExitCritical>
				return pdPASS;
 8008520:	2301      	movs	r3, #1
 8008522:	e069      	b.n	80085f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d103      	bne.n	8008532 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800852a:	f001 fdc7 	bl	800a0bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800852e:	2300      	movs	r3, #0
 8008530:	e062      	b.n	80085f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008534:	2b00      	cmp	r3, #0
 8008536:	d106      	bne.n	8008546 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008538:	f107 0310 	add.w	r3, r7, #16
 800853c:	4618      	mov	r0, r3
 800853e:	f000 fec5 	bl	80092cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008542:	2301      	movs	r3, #1
 8008544:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008546:	f001 fdb9 	bl	800a0bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800854a:	f000 fc0d 	bl	8008d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800854e:	f001 fd83 	bl	800a058 <vPortEnterCritical>
 8008552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008554:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008558:	b25b      	sxtb	r3, r3
 800855a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800855e:	d103      	bne.n	8008568 <xQueueReceive+0x128>
 8008560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008562:	2200      	movs	r2, #0
 8008564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800856e:	b25b      	sxtb	r3, r3
 8008570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008574:	d103      	bne.n	800857e <xQueueReceive+0x13e>
 8008576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008578:	2200      	movs	r2, #0
 800857a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800857e:	f001 fd9d 	bl	800a0bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008582:	1d3a      	adds	r2, r7, #4
 8008584:	f107 0310 	add.w	r3, r7, #16
 8008588:	4611      	mov	r1, r2
 800858a:	4618      	mov	r0, r3
 800858c:	f000 feb4 	bl	80092f8 <xTaskCheckForTimeOut>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d123      	bne.n	80085de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008598:	f000 f916 	bl	80087c8 <prvIsQueueEmpty>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d017      	beq.n	80085d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a4:	3324      	adds	r3, #36	@ 0x24
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	4611      	mov	r1, r2
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fdb0 	bl	8009110 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085b2:	f000 f8b7 	bl	8008724 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085b6:	f000 fbe5 	bl	8008d84 <xTaskResumeAll>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d189      	bne.n	80084d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80085c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008600 <xQueueReceive+0x1c0>)
 80085c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	e780      	b.n	80084d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085d4:	f000 f8a6 	bl	8008724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085d8:	f000 fbd4 	bl	8008d84 <xTaskResumeAll>
 80085dc:	e77a      	b.n	80084d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80085de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085e0:	f000 f8a0 	bl	8008724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085e4:	f000 fbce 	bl	8008d84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085ea:	f000 f8ed 	bl	80087c8 <prvIsQueueEmpty>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f43f af6f 	beq.w	80084d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3730      	adds	r7, #48	@ 0x30
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	e000ed04 	.word	0xe000ed04

08008604 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008610:	2300      	movs	r3, #0
 8008612:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008618:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10d      	bne.n	800863e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d14d      	bne.n	80086c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	4618      	mov	r0, r3
 8008630:	f000 ffc6 	bl	80095c0 <xTaskPriorityDisinherit>
 8008634:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	609a      	str	r2, [r3, #8]
 800863c:	e043      	b.n	80086c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d119      	bne.n	8008678 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6858      	ldr	r0, [r3, #4]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864c:	461a      	mov	r2, r3
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	f010 fdcb 	bl	80191ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800865c:	441a      	add	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	429a      	cmp	r2, r3
 800866c:	d32b      	bcc.n	80086c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	605a      	str	r2, [r3, #4]
 8008676:	e026      	b.n	80086c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	68d8      	ldr	r0, [r3, #12]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008680:	461a      	mov	r2, r3
 8008682:	68b9      	ldr	r1, [r7, #8]
 8008684:	f010 fdb1 	bl	80191ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008690:	425b      	negs	r3, r3
 8008692:	441a      	add	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	68da      	ldr	r2, [r3, #12]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d207      	bcs.n	80086b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	689a      	ldr	r2, [r3, #8]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ac:	425b      	negs	r3, r3
 80086ae:	441a      	add	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d105      	bne.n	80086c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	3b01      	subs	r3, #1
 80086c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	1c5a      	adds	r2, r3, #1
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80086ce:	697b      	ldr	r3, [r7, #20]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d018      	beq.n	800871c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f2:	441a      	add	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	429a      	cmp	r2, r3
 8008702:	d303      	bcc.n	800870c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68d9      	ldr	r1, [r3, #12]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008714:	461a      	mov	r2, r3
 8008716:	6838      	ldr	r0, [r7, #0]
 8008718:	f010 fd67 	bl	80191ea <memcpy>
	}
}
 800871c:	bf00      	nop
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800872c:	f001 fc94 	bl	800a058 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008736:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008738:	e011      	b.n	800875e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873e:	2b00      	cmp	r3, #0
 8008740:	d012      	beq.n	8008768 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	3324      	adds	r3, #36	@ 0x24
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fd34 	bl	80091b4 <xTaskRemoveFromEventList>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008752:	f000 fe35 	bl	80093c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	3b01      	subs	r3, #1
 800875a:	b2db      	uxtb	r3, r3
 800875c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800875e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008762:	2b00      	cmp	r3, #0
 8008764:	dce9      	bgt.n	800873a <prvUnlockQueue+0x16>
 8008766:	e000      	b.n	800876a <prvUnlockQueue+0x46>
					break;
 8008768:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	22ff      	movs	r2, #255	@ 0xff
 800876e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008772:	f001 fca3 	bl	800a0bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008776:	f001 fc6f 	bl	800a058 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008780:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008782:	e011      	b.n	80087a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d012      	beq.n	80087b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3310      	adds	r3, #16
 8008790:	4618      	mov	r0, r3
 8008792:	f000 fd0f 	bl	80091b4 <xTaskRemoveFromEventList>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800879c:	f000 fe10 	bl	80093c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
 80087a2:	3b01      	subs	r3, #1
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dce9      	bgt.n	8008784 <prvUnlockQueue+0x60>
 80087b0:	e000      	b.n	80087b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	22ff      	movs	r2, #255	@ 0xff
 80087b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80087bc:	f001 fc7e 	bl	800a0bc <vPortExitCritical>
}
 80087c0:	bf00      	nop
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087d0:	f001 fc42 	bl	800a058 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d102      	bne.n	80087e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087dc:	2301      	movs	r3, #1
 80087de:	60fb      	str	r3, [r7, #12]
 80087e0:	e001      	b.n	80087e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087e2:	2300      	movs	r3, #0
 80087e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087e6:	f001 fc69 	bl	800a0bc <vPortExitCritical>

	return xReturn;
 80087ea:	68fb      	ldr	r3, [r7, #12]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087fc:	f001 fc2c 	bl	800a058 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008808:	429a      	cmp	r2, r3
 800880a:	d102      	bne.n	8008812 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800880c:	2301      	movs	r3, #1
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	e001      	b.n	8008816 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008812:	2300      	movs	r3, #0
 8008814:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008816:	f001 fc51 	bl	800a0bc <vPortExitCritical>

	return xReturn;
 800881a:	68fb      	ldr	r3, [r7, #12]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800882e:	2300      	movs	r3, #0
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	e014      	b.n	800885e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008834:	4a0f      	ldr	r2, [pc, #60]	@ (8008874 <vQueueAddToRegistry+0x50>)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10b      	bne.n	8008858 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008840:	490c      	ldr	r1, [pc, #48]	@ (8008874 <vQueueAddToRegistry+0x50>)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800884a:	4a0a      	ldr	r2, [pc, #40]	@ (8008874 <vQueueAddToRegistry+0x50>)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	00db      	lsls	r3, r3, #3
 8008850:	4413      	add	r3, r2
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008856:	e006      	b.n	8008866 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	3301      	adds	r3, #1
 800885c:	60fb      	str	r3, [r7, #12]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b07      	cmp	r3, #7
 8008862:	d9e7      	bls.n	8008834 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008864:	bf00      	nop
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	20005754 	.word	0x20005754

08008878 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008888:	f001 fbe6 	bl	800a058 <vPortEnterCritical>
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008892:	b25b      	sxtb	r3, r3
 8008894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008898:	d103      	bne.n	80088a2 <vQueueWaitForMessageRestricted+0x2a>
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088a8:	b25b      	sxtb	r3, r3
 80088aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088ae:	d103      	bne.n	80088b8 <vQueueWaitForMessageRestricted+0x40>
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088b8:	f001 fc00 	bl	800a0bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d106      	bne.n	80088d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	3324      	adds	r3, #36	@ 0x24
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	68b9      	ldr	r1, [r7, #8]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f000 fc45 	bl	800915c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80088d2:	6978      	ldr	r0, [r7, #20]
 80088d4:	f7ff ff26 	bl	8008724 <prvUnlockQueue>
	}
 80088d8:	bf00      	nop
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08e      	sub	sp, #56	@ 0x38
 80088e4:	af04      	add	r7, sp, #16
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
 80088ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10b      	bne.n	800890c <xTaskCreateStatic+0x2c>
	__asm volatile
 80088f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	623b      	str	r3, [r7, #32]
}
 8008906:	bf00      	nop
 8008908:	bf00      	nop
 800890a:	e7fd      	b.n	8008908 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800890c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10b      	bne.n	800892a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	61fb      	str	r3, [r7, #28]
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop
 8008928:	e7fd      	b.n	8008926 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800892a:	235c      	movs	r3, #92	@ 0x5c
 800892c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	2b5c      	cmp	r3, #92	@ 0x5c
 8008932:	d00b      	beq.n	800894c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	61bb      	str	r3, [r7, #24]
}
 8008946:	bf00      	nop
 8008948:	bf00      	nop
 800894a:	e7fd      	b.n	8008948 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800894c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800894e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008950:	2b00      	cmp	r3, #0
 8008952:	d01e      	beq.n	8008992 <xTaskCreateStatic+0xb2>
 8008954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008956:	2b00      	cmp	r3, #0
 8008958:	d01b      	beq.n	8008992 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800895a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800895e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008962:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008966:	2202      	movs	r2, #2
 8008968:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800896c:	2300      	movs	r3, #0
 800896e:	9303      	str	r3, [sp, #12]
 8008970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008972:	9302      	str	r3, [sp, #8]
 8008974:	f107 0314 	add.w	r3, r7, #20
 8008978:	9301      	str	r3, [sp, #4]
 800897a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	68b9      	ldr	r1, [r7, #8]
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 f850 	bl	8008a2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800898a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800898c:	f000 f8de 	bl	8008b4c <prvAddNewTaskToReadyList>
 8008990:	e001      	b.n	8008996 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008992:	2300      	movs	r3, #0
 8008994:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008996:	697b      	ldr	r3, [r7, #20]
	}
 8008998:	4618      	mov	r0, r3
 800899a:	3728      	adds	r7, #40	@ 0x28
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b08c      	sub	sp, #48	@ 0x30
 80089a4:	af04      	add	r7, sp, #16
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	4613      	mov	r3, r2
 80089ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089b0:	88fb      	ldrh	r3, [r7, #6]
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4618      	mov	r0, r3
 80089b6:	f001 fc71 	bl	800a29c <pvPortMalloc>
 80089ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00e      	beq.n	80089e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089c2:	205c      	movs	r0, #92	@ 0x5c
 80089c4:	f001 fc6a 	bl	800a29c <pvPortMalloc>
 80089c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d003      	beq.n	80089d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80089d6:	e005      	b.n	80089e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089d8:	6978      	ldr	r0, [r7, #20]
 80089da:	f001 fd2d 	bl	800a438 <vPortFree>
 80089de:	e001      	b.n	80089e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089e0:	2300      	movs	r3, #0
 80089e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d017      	beq.n	8008a1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089f2:	88fa      	ldrh	r2, [r7, #6]
 80089f4:	2300      	movs	r3, #0
 80089f6:	9303      	str	r3, [sp, #12]
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	9302      	str	r3, [sp, #8]
 80089fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fe:	9301      	str	r3, [sp, #4]
 8008a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	68b9      	ldr	r1, [r7, #8]
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 f80e 	bl	8008a2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a0e:	69f8      	ldr	r0, [r7, #28]
 8008a10:	f000 f89c 	bl	8008b4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a14:	2301      	movs	r3, #1
 8008a16:	61bb      	str	r3, [r7, #24]
 8008a18:	e002      	b.n	8008a20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a20:	69bb      	ldr	r3, [r7, #24]
	}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3720      	adds	r7, #32
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b088      	sub	sp, #32
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	60b9      	str	r1, [r7, #8]
 8008a34:	607a      	str	r2, [r7, #4]
 8008a36:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	461a      	mov	r2, r3
 8008a42:	21a5      	movs	r1, #165	@ 0xa5
 8008a44:	f010 fb08 	bl	8019058 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a52:	3b01      	subs	r3, #1
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	f023 0307 	bic.w	r3, r3, #7
 8008a60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	f003 0307 	and.w	r3, r3, #7
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00b      	beq.n	8008a84 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	617b      	str	r3, [r7, #20]
}
 8008a7e:	bf00      	nop
 8008a80:	bf00      	nop
 8008a82:	e7fd      	b.n	8008a80 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d01f      	beq.n	8008aca <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	61fb      	str	r3, [r7, #28]
 8008a8e:	e012      	b.n	8008ab6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	4413      	add	r3, r2
 8008a96:	7819      	ldrb	r1, [r3, #0]
 8008a98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	3334      	adds	r3, #52	@ 0x34
 8008aa0:	460a      	mov	r2, r1
 8008aa2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d006      	beq.n	8008abe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	61fb      	str	r3, [r7, #28]
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	2b0f      	cmp	r3, #15
 8008aba:	d9e9      	bls.n	8008a90 <prvInitialiseNewTask+0x66>
 8008abc:	e000      	b.n	8008ac0 <prvInitialiseNewTask+0x96>
			{
				break;
 8008abe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ac8:	e003      	b.n	8008ad2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad4:	2b37      	cmp	r3, #55	@ 0x37
 8008ad6:	d901      	bls.n	8008adc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ad8:	2337      	movs	r3, #55	@ 0x37
 8008ada:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ade:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ae6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aea:	2200      	movs	r2, #0
 8008aec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af0:	3304      	adds	r3, #4
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7ff f966 	bl	8007dc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afa:	3318      	adds	r3, #24
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff f961 	bl	8007dc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b16:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	68f9      	ldr	r1, [r7, #12]
 8008b2a:	69b8      	ldr	r0, [r7, #24]
 8008b2c:	f001 f966 	bl	8009dfc <pxPortInitialiseStack>
 8008b30:	4602      	mov	r2, r0
 8008b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d002      	beq.n	8008b42 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b42:	bf00      	nop
 8008b44:	3720      	adds	r7, #32
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
	...

08008b4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b54:	f001 fa80 	bl	800a058 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b58:	4b2d      	ldr	r3, [pc, #180]	@ (8008c10 <prvAddNewTaskToReadyList+0xc4>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	4a2c      	ldr	r2, [pc, #176]	@ (8008c10 <prvAddNewTaskToReadyList+0xc4>)
 8008b60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b62:	4b2c      	ldr	r3, [pc, #176]	@ (8008c14 <prvAddNewTaskToReadyList+0xc8>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d109      	bne.n	8008b7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8008c14 <prvAddNewTaskToReadyList+0xc8>)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b70:	4b27      	ldr	r3, [pc, #156]	@ (8008c10 <prvAddNewTaskToReadyList+0xc4>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d110      	bne.n	8008b9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b78:	f000 fc46 	bl	8009408 <prvInitialiseTaskLists>
 8008b7c:	e00d      	b.n	8008b9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b7e:	4b26      	ldr	r3, [pc, #152]	@ (8008c18 <prvAddNewTaskToReadyList+0xcc>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d109      	bne.n	8008b9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b86:	4b23      	ldr	r3, [pc, #140]	@ (8008c14 <prvAddNewTaskToReadyList+0xc8>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d802      	bhi.n	8008b9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b94:	4a1f      	ldr	r2, [pc, #124]	@ (8008c14 <prvAddNewTaskToReadyList+0xc8>)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b9a:	4b20      	ldr	r3, [pc, #128]	@ (8008c1c <prvAddNewTaskToReadyList+0xd0>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8008c1c <prvAddNewTaskToReadyList+0xd0>)
 8008ba2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8008c1c <prvAddNewTaskToReadyList+0xd0>)
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8008c20 <prvAddNewTaskToReadyList+0xd4>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d903      	bls.n	8008bc0 <prvAddNewTaskToReadyList+0x74>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bbc:	4a18      	ldr	r2, [pc, #96]	@ (8008c20 <prvAddNewTaskToReadyList+0xd4>)
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4a15      	ldr	r2, [pc, #84]	@ (8008c24 <prvAddNewTaskToReadyList+0xd8>)
 8008bce:	441a      	add	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	f7ff f901 	bl	8007dde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008bdc:	f001 fa6e 	bl	800a0bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008be0:	4b0d      	ldr	r3, [pc, #52]	@ (8008c18 <prvAddNewTaskToReadyList+0xcc>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00e      	beq.n	8008c06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008be8:	4b0a      	ldr	r3, [pc, #40]	@ (8008c14 <prvAddNewTaskToReadyList+0xc8>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d207      	bcs.n	8008c06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8008c28 <prvAddNewTaskToReadyList+0xdc>)
 8008bf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bfc:	601a      	str	r2, [r3, #0]
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c06:	bf00      	nop
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	20005c68 	.word	0x20005c68
 8008c14:	20005794 	.word	0x20005794
 8008c18:	20005c74 	.word	0x20005c74
 8008c1c:	20005c84 	.word	0x20005c84
 8008c20:	20005c70 	.word	0x20005c70
 8008c24:	20005798 	.word	0x20005798
 8008c28:	e000ed04 	.word	0xe000ed04

08008c2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c34:	2300      	movs	r3, #0
 8008c36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d018      	beq.n	8008c70 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c3e:	4b14      	ldr	r3, [pc, #80]	@ (8008c90 <vTaskDelay+0x64>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00b      	beq.n	8008c5e <vTaskDelay+0x32>
	__asm volatile
 8008c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	60bb      	str	r3, [r7, #8]
}
 8008c58:	bf00      	nop
 8008c5a:	bf00      	nop
 8008c5c:	e7fd      	b.n	8008c5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c5e:	f000 f883 	bl	8008d68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c62:	2100      	movs	r1, #0
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fd1b 	bl	80096a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c6a:	f000 f88b 	bl	8008d84 <xTaskResumeAll>
 8008c6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d107      	bne.n	8008c86 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008c76:	4b07      	ldr	r3, [pc, #28]	@ (8008c94 <vTaskDelay+0x68>)
 8008c78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c86:	bf00      	nop
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	20005c90 	.word	0x20005c90
 8008c94:	e000ed04 	.word	0xe000ed04

08008c98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b08a      	sub	sp, #40	@ 0x28
 8008c9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ca6:	463a      	mov	r2, r7
 8008ca8:	1d39      	adds	r1, r7, #4
 8008caa:	f107 0308 	add.w	r3, r7, #8
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7ff f834 	bl	8007d1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68ba      	ldr	r2, [r7, #8]
 8008cba:	9202      	str	r2, [sp, #8]
 8008cbc:	9301      	str	r3, [sp, #4]
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	460a      	mov	r2, r1
 8008cc6:	4922      	ldr	r1, [pc, #136]	@ (8008d50 <vTaskStartScheduler+0xb8>)
 8008cc8:	4822      	ldr	r0, [pc, #136]	@ (8008d54 <vTaskStartScheduler+0xbc>)
 8008cca:	f7ff fe09 	bl	80088e0 <xTaskCreateStatic>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	4a21      	ldr	r2, [pc, #132]	@ (8008d58 <vTaskStartScheduler+0xc0>)
 8008cd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008cd4:	4b20      	ldr	r3, [pc, #128]	@ (8008d58 <vTaskStartScheduler+0xc0>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	617b      	str	r3, [r7, #20]
 8008ce0:	e001      	b.n	8008ce6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d102      	bne.n	8008cf2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008cec:	f000 fd2c 	bl	8009748 <xTimerCreateTimerTask>
 8008cf0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d116      	bne.n	8008d26 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cfc:	f383 8811 	msr	BASEPRI, r3
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	f3bf 8f4f 	dsb	sy
 8008d08:	613b      	str	r3, [r7, #16]
}
 8008d0a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d0c:	4b13      	ldr	r3, [pc, #76]	@ (8008d5c <vTaskStartScheduler+0xc4>)
 8008d0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d12:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d14:	4b12      	ldr	r3, [pc, #72]	@ (8008d60 <vTaskStartScheduler+0xc8>)
 8008d16:	2201      	movs	r2, #1
 8008d18:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d1a:	4b12      	ldr	r3, [pc, #72]	@ (8008d64 <vTaskStartScheduler+0xcc>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d20:	f001 f8f6 	bl	8009f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d24:	e00f      	b.n	8008d46 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d2c:	d10b      	bne.n	8008d46 <vTaskStartScheduler+0xae>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	60fb      	str	r3, [r7, #12]
}
 8008d40:	bf00      	nop
 8008d42:	bf00      	nop
 8008d44:	e7fd      	b.n	8008d42 <vTaskStartScheduler+0xaa>
}
 8008d46:	bf00      	nop
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	0801a600 	.word	0x0801a600
 8008d54:	080093d9 	.word	0x080093d9
 8008d58:	20005c8c 	.word	0x20005c8c
 8008d5c:	20005c88 	.word	0x20005c88
 8008d60:	20005c74 	.word	0x20005c74
 8008d64:	20005c6c 	.word	0x20005c6c

08008d68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d68:	b480      	push	{r7}
 8008d6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d6c:	4b04      	ldr	r3, [pc, #16]	@ (8008d80 <vTaskSuspendAll+0x18>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3301      	adds	r3, #1
 8008d72:	4a03      	ldr	r2, [pc, #12]	@ (8008d80 <vTaskSuspendAll+0x18>)
 8008d74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d76:	bf00      	nop
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr
 8008d80:	20005c90 	.word	0x20005c90

08008d84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d92:	4b42      	ldr	r3, [pc, #264]	@ (8008e9c <xTaskResumeAll+0x118>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10b      	bne.n	8008db2 <xTaskResumeAll+0x2e>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	603b      	str	r3, [r7, #0]
}
 8008dac:	bf00      	nop
 8008dae:	bf00      	nop
 8008db0:	e7fd      	b.n	8008dae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008db2:	f001 f951 	bl	800a058 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008db6:	4b39      	ldr	r3, [pc, #228]	@ (8008e9c <xTaskResumeAll+0x118>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	4a37      	ldr	r2, [pc, #220]	@ (8008e9c <xTaskResumeAll+0x118>)
 8008dbe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dc0:	4b36      	ldr	r3, [pc, #216]	@ (8008e9c <xTaskResumeAll+0x118>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d162      	bne.n	8008e8e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008dc8:	4b35      	ldr	r3, [pc, #212]	@ (8008ea0 <xTaskResumeAll+0x11c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d05e      	beq.n	8008e8e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dd0:	e02f      	b.n	8008e32 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dd2:	4b34      	ldr	r3, [pc, #208]	@ (8008ea4 <xTaskResumeAll+0x120>)
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3318      	adds	r3, #24
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7ff f85a 	bl	8007e98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	3304      	adds	r3, #4
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7ff f855 	bl	8007e98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008df2:	4b2d      	ldr	r3, [pc, #180]	@ (8008ea8 <xTaskResumeAll+0x124>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d903      	bls.n	8008e02 <xTaskResumeAll+0x7e>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8008ea8 <xTaskResumeAll+0x124>)
 8008e00:	6013      	str	r3, [r2, #0]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e06:	4613      	mov	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4a27      	ldr	r2, [pc, #156]	@ (8008eac <xTaskResumeAll+0x128>)
 8008e10:	441a      	add	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	3304      	adds	r3, #4
 8008e16:	4619      	mov	r1, r3
 8008e18:	4610      	mov	r0, r2
 8008e1a:	f7fe ffe0 	bl	8007dde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e22:	4b23      	ldr	r3, [pc, #140]	@ (8008eb0 <xTaskResumeAll+0x12c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d302      	bcc.n	8008e32 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008e2c:	4b21      	ldr	r3, [pc, #132]	@ (8008eb4 <xTaskResumeAll+0x130>)
 8008e2e:	2201      	movs	r2, #1
 8008e30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e32:	4b1c      	ldr	r3, [pc, #112]	@ (8008ea4 <xTaskResumeAll+0x120>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1cb      	bne.n	8008dd2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d001      	beq.n	8008e44 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e40:	f000 fb80 	bl	8009544 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e44:	4b1c      	ldr	r3, [pc, #112]	@ (8008eb8 <xTaskResumeAll+0x134>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d010      	beq.n	8008e72 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e50:	f000 f846 	bl	8008ee0 <xTaskIncrementTick>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d002      	beq.n	8008e60 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008e5a:	4b16      	ldr	r3, [pc, #88]	@ (8008eb4 <xTaskResumeAll+0x130>)
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1f1      	bne.n	8008e50 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008e6c:	4b12      	ldr	r3, [pc, #72]	@ (8008eb8 <xTaskResumeAll+0x134>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e72:	4b10      	ldr	r3, [pc, #64]	@ (8008eb4 <xTaskResumeAll+0x130>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d009      	beq.n	8008e8e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008ebc <xTaskResumeAll+0x138>)
 8008e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e84:	601a      	str	r2, [r3, #0]
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e8e:	f001 f915 	bl	800a0bc <vPortExitCritical>

	return xAlreadyYielded;
 8008e92:	68bb      	ldr	r3, [r7, #8]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	20005c90 	.word	0x20005c90
 8008ea0:	20005c68 	.word	0x20005c68
 8008ea4:	20005c28 	.word	0x20005c28
 8008ea8:	20005c70 	.word	0x20005c70
 8008eac:	20005798 	.word	0x20005798
 8008eb0:	20005794 	.word	0x20005794
 8008eb4:	20005c7c 	.word	0x20005c7c
 8008eb8:	20005c78 	.word	0x20005c78
 8008ebc:	e000ed04 	.word	0xe000ed04

08008ec0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ec6:	4b05      	ldr	r3, [pc, #20]	@ (8008edc <xTaskGetTickCount+0x1c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ecc:	687b      	ldr	r3, [r7, #4]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	20005c6c 	.word	0x20005c6c

08008ee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eea:	4b4f      	ldr	r3, [pc, #316]	@ (8009028 <xTaskIncrementTick+0x148>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f040 8090 	bne.w	8009014 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800902c <xTaskIncrementTick+0x14c>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008efc:	4a4b      	ldr	r2, [pc, #300]	@ (800902c <xTaskIncrementTick+0x14c>)
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d121      	bne.n	8008f4c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f08:	4b49      	ldr	r3, [pc, #292]	@ (8009030 <xTaskIncrementTick+0x150>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00b      	beq.n	8008f2a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	603b      	str	r3, [r7, #0]
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop
 8008f28:	e7fd      	b.n	8008f26 <xTaskIncrementTick+0x46>
 8008f2a:	4b41      	ldr	r3, [pc, #260]	@ (8009030 <xTaskIncrementTick+0x150>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	60fb      	str	r3, [r7, #12]
 8008f30:	4b40      	ldr	r3, [pc, #256]	@ (8009034 <xTaskIncrementTick+0x154>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a3e      	ldr	r2, [pc, #248]	@ (8009030 <xTaskIncrementTick+0x150>)
 8008f36:	6013      	str	r3, [r2, #0]
 8008f38:	4a3e      	ldr	r2, [pc, #248]	@ (8009034 <xTaskIncrementTick+0x154>)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6013      	str	r3, [r2, #0]
 8008f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8009038 <xTaskIncrementTick+0x158>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3301      	adds	r3, #1
 8008f44:	4a3c      	ldr	r2, [pc, #240]	@ (8009038 <xTaskIncrementTick+0x158>)
 8008f46:	6013      	str	r3, [r2, #0]
 8008f48:	f000 fafc 	bl	8009544 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800903c <xTaskIncrementTick+0x15c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d349      	bcc.n	8008fea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f56:	4b36      	ldr	r3, [pc, #216]	@ (8009030 <xTaskIncrementTick+0x150>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d104      	bne.n	8008f6a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f60:	4b36      	ldr	r3, [pc, #216]	@ (800903c <xTaskIncrementTick+0x15c>)
 8008f62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f66:	601a      	str	r2, [r3, #0]
					break;
 8008f68:	e03f      	b.n	8008fea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f6a:	4b31      	ldr	r3, [pc, #196]	@ (8009030 <xTaskIncrementTick+0x150>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d203      	bcs.n	8008f8a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f82:	4a2e      	ldr	r2, [pc, #184]	@ (800903c <xTaskIncrementTick+0x15c>)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f88:	e02f      	b.n	8008fea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fe ff82 	bl	8007e98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d004      	beq.n	8008fa6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	3318      	adds	r3, #24
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fe ff79 	bl	8007e98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008faa:	4b25      	ldr	r3, [pc, #148]	@ (8009040 <xTaskIncrementTick+0x160>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d903      	bls.n	8008fba <xTaskIncrementTick+0xda>
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb6:	4a22      	ldr	r2, [pc, #136]	@ (8009040 <xTaskIncrementTick+0x160>)
 8008fb8:	6013      	str	r3, [r2, #0]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4413      	add	r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8009044 <xTaskIncrementTick+0x164>)
 8008fc8:	441a      	add	r2, r3
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	3304      	adds	r3, #4
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	f7fe ff04 	bl	8007dde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fda:	4b1b      	ldr	r3, [pc, #108]	@ (8009048 <xTaskIncrementTick+0x168>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d3b8      	bcc.n	8008f56 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fe8:	e7b5      	b.n	8008f56 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008fea:	4b17      	ldr	r3, [pc, #92]	@ (8009048 <xTaskIncrementTick+0x168>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff0:	4914      	ldr	r1, [pc, #80]	@ (8009044 <xTaskIncrementTick+0x164>)
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4413      	add	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	440b      	add	r3, r1
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d901      	bls.n	8009006 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009002:	2301      	movs	r3, #1
 8009004:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009006:	4b11      	ldr	r3, [pc, #68]	@ (800904c <xTaskIncrementTick+0x16c>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d007      	beq.n	800901e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800900e:	2301      	movs	r3, #1
 8009010:	617b      	str	r3, [r7, #20]
 8009012:	e004      	b.n	800901e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009014:	4b0e      	ldr	r3, [pc, #56]	@ (8009050 <xTaskIncrementTick+0x170>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3301      	adds	r3, #1
 800901a:	4a0d      	ldr	r2, [pc, #52]	@ (8009050 <xTaskIncrementTick+0x170>)
 800901c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800901e:	697b      	ldr	r3, [r7, #20]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	20005c90 	.word	0x20005c90
 800902c:	20005c6c 	.word	0x20005c6c
 8009030:	20005c20 	.word	0x20005c20
 8009034:	20005c24 	.word	0x20005c24
 8009038:	20005c80 	.word	0x20005c80
 800903c:	20005c88 	.word	0x20005c88
 8009040:	20005c70 	.word	0x20005c70
 8009044:	20005798 	.word	0x20005798
 8009048:	20005794 	.word	0x20005794
 800904c:	20005c7c 	.word	0x20005c7c
 8009050:	20005c78 	.word	0x20005c78

08009054 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800905a:	4b28      	ldr	r3, [pc, #160]	@ (80090fc <vTaskSwitchContext+0xa8>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d003      	beq.n	800906a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009062:	4b27      	ldr	r3, [pc, #156]	@ (8009100 <vTaskSwitchContext+0xac>)
 8009064:	2201      	movs	r2, #1
 8009066:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009068:	e042      	b.n	80090f0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800906a:	4b25      	ldr	r3, [pc, #148]	@ (8009100 <vTaskSwitchContext+0xac>)
 800906c:	2200      	movs	r2, #0
 800906e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009070:	4b24      	ldr	r3, [pc, #144]	@ (8009104 <vTaskSwitchContext+0xb0>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	60fb      	str	r3, [r7, #12]
 8009076:	e011      	b.n	800909c <vTaskSwitchContext+0x48>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10b      	bne.n	8009096 <vTaskSwitchContext+0x42>
	__asm volatile
 800907e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009082:	f383 8811 	msr	BASEPRI, r3
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	607b      	str	r3, [r7, #4]
}
 8009090:	bf00      	nop
 8009092:	bf00      	nop
 8009094:	e7fd      	b.n	8009092 <vTaskSwitchContext+0x3e>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	3b01      	subs	r3, #1
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	491a      	ldr	r1, [pc, #104]	@ (8009108 <vTaskSwitchContext+0xb4>)
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	4613      	mov	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	440b      	add	r3, r1
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d0e3      	beq.n	8009078 <vTaskSwitchContext+0x24>
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	4613      	mov	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4a13      	ldr	r2, [pc, #76]	@ (8009108 <vTaskSwitchContext+0xb4>)
 80090bc:	4413      	add	r3, r2
 80090be:	60bb      	str	r3, [r7, #8]
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	605a      	str	r2, [r3, #4]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	3308      	adds	r3, #8
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d104      	bne.n	80090e0 <vTaskSwitchContext+0x8c>
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	685a      	ldr	r2, [r3, #4]
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	605a      	str	r2, [r3, #4]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	4a09      	ldr	r2, [pc, #36]	@ (800910c <vTaskSwitchContext+0xb8>)
 80090e8:	6013      	str	r3, [r2, #0]
 80090ea:	4a06      	ldr	r2, [pc, #24]	@ (8009104 <vTaskSwitchContext+0xb0>)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6013      	str	r3, [r2, #0]
}
 80090f0:	bf00      	nop
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr
 80090fc:	20005c90 	.word	0x20005c90
 8009100:	20005c7c 	.word	0x20005c7c
 8009104:	20005c70 	.word	0x20005c70
 8009108:	20005798 	.word	0x20005798
 800910c:	20005794 	.word	0x20005794

08009110 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10b      	bne.n	8009138 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	60fb      	str	r3, [r7, #12]
}
 8009132:	bf00      	nop
 8009134:	bf00      	nop
 8009136:	e7fd      	b.n	8009134 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009138:	4b07      	ldr	r3, [pc, #28]	@ (8009158 <vTaskPlaceOnEventList+0x48>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3318      	adds	r3, #24
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7fe fe70 	bl	8007e26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009146:	2101      	movs	r1, #1
 8009148:	6838      	ldr	r0, [r7, #0]
 800914a:	f000 faa9 	bl	80096a0 <prvAddCurrentTaskToDelayedList>
}
 800914e:	bf00      	nop
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	20005794 	.word	0x20005794

0800915c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d10b      	bne.n	8009186 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	617b      	str	r3, [r7, #20]
}
 8009180:	bf00      	nop
 8009182:	bf00      	nop
 8009184:	e7fd      	b.n	8009182 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009186:	4b0a      	ldr	r3, [pc, #40]	@ (80091b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	3318      	adds	r3, #24
 800918c:	4619      	mov	r1, r3
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f7fe fe25 	bl	8007dde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800919a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800919e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80091a0:	6879      	ldr	r1, [r7, #4]
 80091a2:	68b8      	ldr	r0, [r7, #8]
 80091a4:	f000 fa7c 	bl	80096a0 <prvAddCurrentTaskToDelayedList>
	}
 80091a8:	bf00      	nop
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	20005794 	.word	0x20005794

080091b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d10b      	bne.n	80091e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80091ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	60fb      	str	r3, [r7, #12]
}
 80091dc:	bf00      	nop
 80091de:	bf00      	nop
 80091e0:	e7fd      	b.n	80091de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	3318      	adds	r3, #24
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe fe56 	bl	8007e98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009264 <xTaskRemoveFromEventList+0xb0>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d11d      	bne.n	8009230 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	3304      	adds	r3, #4
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fe fe4d 	bl	8007e98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009202:	4b19      	ldr	r3, [pc, #100]	@ (8009268 <xTaskRemoveFromEventList+0xb4>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	429a      	cmp	r2, r3
 8009208:	d903      	bls.n	8009212 <xTaskRemoveFromEventList+0x5e>
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800920e:	4a16      	ldr	r2, [pc, #88]	@ (8009268 <xTaskRemoveFromEventList+0xb4>)
 8009210:	6013      	str	r3, [r2, #0]
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009216:	4613      	mov	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4a13      	ldr	r2, [pc, #76]	@ (800926c <xTaskRemoveFromEventList+0xb8>)
 8009220:	441a      	add	r2, r3
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	3304      	adds	r3, #4
 8009226:	4619      	mov	r1, r3
 8009228:	4610      	mov	r0, r2
 800922a:	f7fe fdd8 	bl	8007dde <vListInsertEnd>
 800922e:	e005      	b.n	800923c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	3318      	adds	r3, #24
 8009234:	4619      	mov	r1, r3
 8009236:	480e      	ldr	r0, [pc, #56]	@ (8009270 <xTaskRemoveFromEventList+0xbc>)
 8009238:	f7fe fdd1 	bl	8007dde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009240:	4b0c      	ldr	r3, [pc, #48]	@ (8009274 <xTaskRemoveFromEventList+0xc0>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009246:	429a      	cmp	r2, r3
 8009248:	d905      	bls.n	8009256 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800924a:	2301      	movs	r3, #1
 800924c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800924e:	4b0a      	ldr	r3, [pc, #40]	@ (8009278 <xTaskRemoveFromEventList+0xc4>)
 8009250:	2201      	movs	r2, #1
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	e001      	b.n	800925a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009256:	2300      	movs	r3, #0
 8009258:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800925a:	697b      	ldr	r3, [r7, #20]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	20005c90 	.word	0x20005c90
 8009268:	20005c70 	.word	0x20005c70
 800926c:	20005798 	.word	0x20005798
 8009270:	20005c28 	.word	0x20005c28
 8009274:	20005794 	.word	0x20005794
 8009278:	20005c7c 	.word	0x20005c7c

0800927c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10b      	bne.n	80092a2 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800928a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	60fb      	str	r3, [r7, #12]
}
 800929c:	bf00      	nop
 800929e:	bf00      	nop
 80092a0:	e7fd      	b.n	800929e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80092a2:	f000 fed9 	bl	800a058 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092a6:	4b07      	ldr	r3, [pc, #28]	@ (80092c4 <vTaskSetTimeOutState+0x48>)
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80092ae:	4b06      	ldr	r3, [pc, #24]	@ (80092c8 <vTaskSetTimeOutState+0x4c>)
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80092b6:	f000 ff01 	bl	800a0bc <vPortExitCritical>
}
 80092ba:	bf00      	nop
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20005c80 	.word	0x20005c80
 80092c8:	20005c6c 	.word	0x20005c6c

080092cc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092d4:	4b06      	ldr	r3, [pc, #24]	@ (80092f0 <vTaskInternalSetTimeOutState+0x24>)
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092dc:	4b05      	ldr	r3, [pc, #20]	@ (80092f4 <vTaskInternalSetTimeOutState+0x28>)
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	605a      	str	r2, [r3, #4]
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	20005c80 	.word	0x20005c80
 80092f4:	20005c6c 	.word	0x20005c6c

080092f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b088      	sub	sp, #32
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10b      	bne.n	8009320 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	613b      	str	r3, [r7, #16]
}
 800931a:	bf00      	nop
 800931c:	bf00      	nop
 800931e:	e7fd      	b.n	800931c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10b      	bne.n	800933e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	60fb      	str	r3, [r7, #12]
}
 8009338:	bf00      	nop
 800933a:	bf00      	nop
 800933c:	e7fd      	b.n	800933a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800933e:	f000 fe8b 	bl	800a058 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009342:	4b1d      	ldr	r3, [pc, #116]	@ (80093b8 <xTaskCheckForTimeOut+0xc0>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	69ba      	ldr	r2, [r7, #24]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800935a:	d102      	bne.n	8009362 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800935c:	2300      	movs	r3, #0
 800935e:	61fb      	str	r3, [r7, #28]
 8009360:	e023      	b.n	80093aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	4b15      	ldr	r3, [pc, #84]	@ (80093bc <xTaskCheckForTimeOut+0xc4>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	429a      	cmp	r2, r3
 800936c:	d007      	beq.n	800937e <xTaskCheckForTimeOut+0x86>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	69ba      	ldr	r2, [r7, #24]
 8009374:	429a      	cmp	r2, r3
 8009376:	d302      	bcc.n	800937e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009378:	2301      	movs	r3, #1
 800937a:	61fb      	str	r3, [r7, #28]
 800937c:	e015      	b.n	80093aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	429a      	cmp	r2, r3
 8009386:	d20b      	bcs.n	80093a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	1ad2      	subs	r2, r2, r3
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7ff ff99 	bl	80092cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800939a:	2300      	movs	r3, #0
 800939c:	61fb      	str	r3, [r7, #28]
 800939e:	e004      	b.n	80093aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	2200      	movs	r2, #0
 80093a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093a6:	2301      	movs	r3, #1
 80093a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093aa:	f000 fe87 	bl	800a0bc <vPortExitCritical>

	return xReturn;
 80093ae:	69fb      	ldr	r3, [r7, #28]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3720      	adds	r7, #32
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20005c6c 	.word	0x20005c6c
 80093bc:	20005c80 	.word	0x20005c80

080093c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093c0:	b480      	push	{r7}
 80093c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093c4:	4b03      	ldr	r3, [pc, #12]	@ (80093d4 <vTaskMissedYield+0x14>)
 80093c6:	2201      	movs	r2, #1
 80093c8:	601a      	str	r2, [r3, #0]
}
 80093ca:	bf00      	nop
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	20005c7c 	.word	0x20005c7c

080093d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80093e0:	f000 f852 	bl	8009488 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093e4:	4b06      	ldr	r3, [pc, #24]	@ (8009400 <prvIdleTask+0x28>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d9f9      	bls.n	80093e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80093ec:	4b05      	ldr	r3, [pc, #20]	@ (8009404 <prvIdleTask+0x2c>)
 80093ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80093fc:	e7f0      	b.n	80093e0 <prvIdleTask+0x8>
 80093fe:	bf00      	nop
 8009400:	20005798 	.word	0x20005798
 8009404:	e000ed04 	.word	0xe000ed04

08009408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800940e:	2300      	movs	r3, #0
 8009410:	607b      	str	r3, [r7, #4]
 8009412:	e00c      	b.n	800942e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	4613      	mov	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4a12      	ldr	r2, [pc, #72]	@ (8009468 <prvInitialiseTaskLists+0x60>)
 8009420:	4413      	add	r3, r2
 8009422:	4618      	mov	r0, r3
 8009424:	f7fe fcae 	bl	8007d84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	3301      	adds	r3, #1
 800942c:	607b      	str	r3, [r7, #4]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2b37      	cmp	r3, #55	@ 0x37
 8009432:	d9ef      	bls.n	8009414 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009434:	480d      	ldr	r0, [pc, #52]	@ (800946c <prvInitialiseTaskLists+0x64>)
 8009436:	f7fe fca5 	bl	8007d84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800943a:	480d      	ldr	r0, [pc, #52]	@ (8009470 <prvInitialiseTaskLists+0x68>)
 800943c:	f7fe fca2 	bl	8007d84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009440:	480c      	ldr	r0, [pc, #48]	@ (8009474 <prvInitialiseTaskLists+0x6c>)
 8009442:	f7fe fc9f 	bl	8007d84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009446:	480c      	ldr	r0, [pc, #48]	@ (8009478 <prvInitialiseTaskLists+0x70>)
 8009448:	f7fe fc9c 	bl	8007d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800944c:	480b      	ldr	r0, [pc, #44]	@ (800947c <prvInitialiseTaskLists+0x74>)
 800944e:	f7fe fc99 	bl	8007d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009452:	4b0b      	ldr	r3, [pc, #44]	@ (8009480 <prvInitialiseTaskLists+0x78>)
 8009454:	4a05      	ldr	r2, [pc, #20]	@ (800946c <prvInitialiseTaskLists+0x64>)
 8009456:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009458:	4b0a      	ldr	r3, [pc, #40]	@ (8009484 <prvInitialiseTaskLists+0x7c>)
 800945a:	4a05      	ldr	r2, [pc, #20]	@ (8009470 <prvInitialiseTaskLists+0x68>)
 800945c:	601a      	str	r2, [r3, #0]
}
 800945e:	bf00      	nop
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	20005798 	.word	0x20005798
 800946c:	20005bf8 	.word	0x20005bf8
 8009470:	20005c0c 	.word	0x20005c0c
 8009474:	20005c28 	.word	0x20005c28
 8009478:	20005c3c 	.word	0x20005c3c
 800947c:	20005c54 	.word	0x20005c54
 8009480:	20005c20 	.word	0x20005c20
 8009484:	20005c24 	.word	0x20005c24

08009488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800948e:	e019      	b.n	80094c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009490:	f000 fde2 	bl	800a058 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009494:	4b10      	ldr	r3, [pc, #64]	@ (80094d8 <prvCheckTasksWaitingTermination+0x50>)
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	3304      	adds	r3, #4
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fe fcf9 	bl	8007e98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094a6:	4b0d      	ldr	r3, [pc, #52]	@ (80094dc <prvCheckTasksWaitingTermination+0x54>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3b01      	subs	r3, #1
 80094ac:	4a0b      	ldr	r2, [pc, #44]	@ (80094dc <prvCheckTasksWaitingTermination+0x54>)
 80094ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094b0:	4b0b      	ldr	r3, [pc, #44]	@ (80094e0 <prvCheckTasksWaitingTermination+0x58>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3b01      	subs	r3, #1
 80094b6:	4a0a      	ldr	r2, [pc, #40]	@ (80094e0 <prvCheckTasksWaitingTermination+0x58>)
 80094b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094ba:	f000 fdff 	bl	800a0bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f810 	bl	80094e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094c4:	4b06      	ldr	r3, [pc, #24]	@ (80094e0 <prvCheckTasksWaitingTermination+0x58>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1e1      	bne.n	8009490 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094cc:	bf00      	nop
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20005c3c 	.word	0x20005c3c
 80094dc:	20005c68 	.word	0x20005c68
 80094e0:	20005c50 	.word	0x20005c50

080094e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d108      	bne.n	8009508 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 ff9c 	bl	800a438 <vPortFree>
				vPortFree( pxTCB );
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 ff99 	bl	800a438 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009506:	e019      	b.n	800953c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800950e:	2b01      	cmp	r3, #1
 8009510:	d103      	bne.n	800951a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 ff90 	bl	800a438 <vPortFree>
	}
 8009518:	e010      	b.n	800953c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009520:	2b02      	cmp	r3, #2
 8009522:	d00b      	beq.n	800953c <prvDeleteTCB+0x58>
	__asm volatile
 8009524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	60fb      	str	r3, [r7, #12]
}
 8009536:	bf00      	nop
 8009538:	bf00      	nop
 800953a:	e7fd      	b.n	8009538 <prvDeleteTCB+0x54>
	}
 800953c:	bf00      	nop
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800954a:	4b0c      	ldr	r3, [pc, #48]	@ (800957c <prvResetNextTaskUnblockTime+0x38>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d104      	bne.n	800955e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009554:	4b0a      	ldr	r3, [pc, #40]	@ (8009580 <prvResetNextTaskUnblockTime+0x3c>)
 8009556:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800955a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800955c:	e008      	b.n	8009570 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800955e:	4b07      	ldr	r3, [pc, #28]	@ (800957c <prvResetNextTaskUnblockTime+0x38>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	4a04      	ldr	r2, [pc, #16]	@ (8009580 <prvResetNextTaskUnblockTime+0x3c>)
 800956e:	6013      	str	r3, [r2, #0]
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr
 800957c:	20005c20 	.word	0x20005c20
 8009580:	20005c88 	.word	0x20005c88

08009584 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800958a:	4b0b      	ldr	r3, [pc, #44]	@ (80095b8 <xTaskGetSchedulerState+0x34>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d102      	bne.n	8009598 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009592:	2301      	movs	r3, #1
 8009594:	607b      	str	r3, [r7, #4]
 8009596:	e008      	b.n	80095aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009598:	4b08      	ldr	r3, [pc, #32]	@ (80095bc <xTaskGetSchedulerState+0x38>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d102      	bne.n	80095a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095a0:	2302      	movs	r3, #2
 80095a2:	607b      	str	r3, [r7, #4]
 80095a4:	e001      	b.n	80095aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095a6:	2300      	movs	r3, #0
 80095a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095aa:	687b      	ldr	r3, [r7, #4]
	}
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	20005c74 	.word	0x20005c74
 80095bc:	20005c90 	.word	0x20005c90

080095c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095cc:	2300      	movs	r3, #0
 80095ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d058      	beq.n	8009688 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095d6:	4b2f      	ldr	r3, [pc, #188]	@ (8009694 <xTaskPriorityDisinherit+0xd4>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d00b      	beq.n	80095f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	60fb      	str	r3, [r7, #12]
}
 80095f2:	bf00      	nop
 80095f4:	bf00      	nop
 80095f6:	e7fd      	b.n	80095f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10b      	bne.n	8009618 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	60bb      	str	r3, [r7, #8]
}
 8009612:	bf00      	nop
 8009614:	bf00      	nop
 8009616:	e7fd      	b.n	8009614 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800961c:	1e5a      	subs	r2, r3, #1
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800962a:	429a      	cmp	r2, r3
 800962c:	d02c      	beq.n	8009688 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009632:	2b00      	cmp	r3, #0
 8009634:	d128      	bne.n	8009688 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	3304      	adds	r3, #4
 800963a:	4618      	mov	r0, r3
 800963c:	f7fe fc2c 	bl	8007e98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800964c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009658:	4b0f      	ldr	r3, [pc, #60]	@ (8009698 <xTaskPriorityDisinherit+0xd8>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	429a      	cmp	r2, r3
 800965e:	d903      	bls.n	8009668 <xTaskPriorityDisinherit+0xa8>
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009664:	4a0c      	ldr	r2, [pc, #48]	@ (8009698 <xTaskPriorityDisinherit+0xd8>)
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800966c:	4613      	mov	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4a09      	ldr	r2, [pc, #36]	@ (800969c <xTaskPriorityDisinherit+0xdc>)
 8009676:	441a      	add	r2, r3
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	3304      	adds	r3, #4
 800967c:	4619      	mov	r1, r3
 800967e:	4610      	mov	r0, r2
 8009680:	f7fe fbad 	bl	8007dde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009684:	2301      	movs	r3, #1
 8009686:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009688:	697b      	ldr	r3, [r7, #20]
	}
 800968a:	4618      	mov	r0, r3
 800968c:	3718      	adds	r7, #24
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	20005794 	.word	0x20005794
 8009698:	20005c70 	.word	0x20005c70
 800969c:	20005798 	.word	0x20005798

080096a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096aa:	4b21      	ldr	r3, [pc, #132]	@ (8009730 <prvAddCurrentTaskToDelayedList+0x90>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096b0:	4b20      	ldr	r3, [pc, #128]	@ (8009734 <prvAddCurrentTaskToDelayedList+0x94>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3304      	adds	r3, #4
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fe fbee 	bl	8007e98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096c2:	d10a      	bne.n	80096da <prvAddCurrentTaskToDelayedList+0x3a>
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d007      	beq.n	80096da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096ca:	4b1a      	ldr	r3, [pc, #104]	@ (8009734 <prvAddCurrentTaskToDelayedList+0x94>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	3304      	adds	r3, #4
 80096d0:	4619      	mov	r1, r3
 80096d2:	4819      	ldr	r0, [pc, #100]	@ (8009738 <prvAddCurrentTaskToDelayedList+0x98>)
 80096d4:	f7fe fb83 	bl	8007dde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096d8:	e026      	b.n	8009728 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4413      	add	r3, r2
 80096e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096e2:	4b14      	ldr	r3, [pc, #80]	@ (8009734 <prvAddCurrentTaskToDelayedList+0x94>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d209      	bcs.n	8009706 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096f2:	4b12      	ldr	r3, [pc, #72]	@ (800973c <prvAddCurrentTaskToDelayedList+0x9c>)
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009734 <prvAddCurrentTaskToDelayedList+0x94>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3304      	adds	r3, #4
 80096fc:	4619      	mov	r1, r3
 80096fe:	4610      	mov	r0, r2
 8009700:	f7fe fb91 	bl	8007e26 <vListInsert>
}
 8009704:	e010      	b.n	8009728 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009706:	4b0e      	ldr	r3, [pc, #56]	@ (8009740 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	4b0a      	ldr	r3, [pc, #40]	@ (8009734 <prvAddCurrentTaskToDelayedList+0x94>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3304      	adds	r3, #4
 8009710:	4619      	mov	r1, r3
 8009712:	4610      	mov	r0, r2
 8009714:	f7fe fb87 	bl	8007e26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009718:	4b0a      	ldr	r3, [pc, #40]	@ (8009744 <prvAddCurrentTaskToDelayedList+0xa4>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	429a      	cmp	r2, r3
 8009720:	d202      	bcs.n	8009728 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009722:	4a08      	ldr	r2, [pc, #32]	@ (8009744 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	6013      	str	r3, [r2, #0]
}
 8009728:	bf00      	nop
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	20005c6c 	.word	0x20005c6c
 8009734:	20005794 	.word	0x20005794
 8009738:	20005c54 	.word	0x20005c54
 800973c:	20005c24 	.word	0x20005c24
 8009740:	20005c20 	.word	0x20005c20
 8009744:	20005c88 	.word	0x20005c88

08009748 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08a      	sub	sp, #40	@ 0x28
 800974c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800974e:	2300      	movs	r3, #0
 8009750:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009752:	f000 fb13 	bl	8009d7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009756:	4b1d      	ldr	r3, [pc, #116]	@ (80097cc <xTimerCreateTimerTask+0x84>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d021      	beq.n	80097a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800975e:	2300      	movs	r3, #0
 8009760:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009762:	2300      	movs	r3, #0
 8009764:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009766:	1d3a      	adds	r2, r7, #4
 8009768:	f107 0108 	add.w	r1, r7, #8
 800976c:	f107 030c 	add.w	r3, r7, #12
 8009770:	4618      	mov	r0, r3
 8009772:	f7fe faed 	bl	8007d50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009776:	6879      	ldr	r1, [r7, #4]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	9202      	str	r2, [sp, #8]
 800977e:	9301      	str	r3, [sp, #4]
 8009780:	2302      	movs	r3, #2
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	2300      	movs	r3, #0
 8009786:	460a      	mov	r2, r1
 8009788:	4911      	ldr	r1, [pc, #68]	@ (80097d0 <xTimerCreateTimerTask+0x88>)
 800978a:	4812      	ldr	r0, [pc, #72]	@ (80097d4 <xTimerCreateTimerTask+0x8c>)
 800978c:	f7ff f8a8 	bl	80088e0 <xTaskCreateStatic>
 8009790:	4603      	mov	r3, r0
 8009792:	4a11      	ldr	r2, [pc, #68]	@ (80097d8 <xTimerCreateTimerTask+0x90>)
 8009794:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009796:	4b10      	ldr	r3, [pc, #64]	@ (80097d8 <xTimerCreateTimerTask+0x90>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800979e:	2301      	movs	r3, #1
 80097a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10b      	bne.n	80097c0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80097a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	613b      	str	r3, [r7, #16]
}
 80097ba:	bf00      	nop
 80097bc:	bf00      	nop
 80097be:	e7fd      	b.n	80097bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80097c0:	697b      	ldr	r3, [r7, #20]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3718      	adds	r7, #24
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20005cc4 	.word	0x20005cc4
 80097d0:	0801a608 	.word	0x0801a608
 80097d4:	08009915 	.word	0x08009915
 80097d8:	20005cc8 	.word	0x20005cc8

080097dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b08a      	sub	sp, #40	@ 0x28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
 80097e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80097ea:	2300      	movs	r3, #0
 80097ec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10b      	bne.n	800980c <xTimerGenericCommand+0x30>
	__asm volatile
 80097f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	623b      	str	r3, [r7, #32]
}
 8009806:	bf00      	nop
 8009808:	bf00      	nop
 800980a:	e7fd      	b.n	8009808 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800980c:	4b19      	ldr	r3, [pc, #100]	@ (8009874 <xTimerGenericCommand+0x98>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d02a      	beq.n	800986a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	2b05      	cmp	r3, #5
 8009824:	dc18      	bgt.n	8009858 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009826:	f7ff fead 	bl	8009584 <xTaskGetSchedulerState>
 800982a:	4603      	mov	r3, r0
 800982c:	2b02      	cmp	r3, #2
 800982e:	d109      	bne.n	8009844 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009830:	4b10      	ldr	r3, [pc, #64]	@ (8009874 <xTimerGenericCommand+0x98>)
 8009832:	6818      	ldr	r0, [r3, #0]
 8009834:	f107 0110 	add.w	r1, r7, #16
 8009838:	2300      	movs	r3, #0
 800983a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800983c:	f7fe fc60 	bl	8008100 <xQueueGenericSend>
 8009840:	6278      	str	r0, [r7, #36]	@ 0x24
 8009842:	e012      	b.n	800986a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009844:	4b0b      	ldr	r3, [pc, #44]	@ (8009874 <xTimerGenericCommand+0x98>)
 8009846:	6818      	ldr	r0, [r3, #0]
 8009848:	f107 0110 	add.w	r1, r7, #16
 800984c:	2300      	movs	r3, #0
 800984e:	2200      	movs	r2, #0
 8009850:	f7fe fc56 	bl	8008100 <xQueueGenericSend>
 8009854:	6278      	str	r0, [r7, #36]	@ 0x24
 8009856:	e008      	b.n	800986a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009858:	4b06      	ldr	r3, [pc, #24]	@ (8009874 <xTimerGenericCommand+0x98>)
 800985a:	6818      	ldr	r0, [r3, #0]
 800985c:	f107 0110 	add.w	r1, r7, #16
 8009860:	2300      	movs	r3, #0
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	f7fe fd4e 	bl	8008304 <xQueueGenericSendFromISR>
 8009868:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800986a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800986c:	4618      	mov	r0, r3
 800986e:	3728      	adds	r7, #40	@ 0x28
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	20005cc4 	.word	0x20005cc4

08009878 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b088      	sub	sp, #32
 800987c:	af02      	add	r7, sp, #8
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009882:	4b23      	ldr	r3, [pc, #140]	@ (8009910 <prvProcessExpiredTimer+0x98>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	3304      	adds	r3, #4
 8009890:	4618      	mov	r0, r3
 8009892:	f7fe fb01 	bl	8007e98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800989c:	f003 0304 	and.w	r3, r3, #4
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d023      	beq.n	80098ec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	699a      	ldr	r2, [r3, #24]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	18d1      	adds	r1, r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	6978      	ldr	r0, [r7, #20]
 80098b2:	f000 f8d5 	bl	8009a60 <prvInsertTimerInActiveList>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d020      	beq.n	80098fe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098bc:	2300      	movs	r3, #0
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	2300      	movs	r3, #0
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	2100      	movs	r1, #0
 80098c6:	6978      	ldr	r0, [r7, #20]
 80098c8:	f7ff ff88 	bl	80097dc <xTimerGenericCommand>
 80098cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d114      	bne.n	80098fe <prvProcessExpiredTimer+0x86>
	__asm volatile
 80098d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	60fb      	str	r3, [r7, #12]
}
 80098e6:	bf00      	nop
 80098e8:	bf00      	nop
 80098ea:	e7fd      	b.n	80098e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098f2:	f023 0301 	bic.w	r3, r3, #1
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	6978      	ldr	r0, [r7, #20]
 8009904:	4798      	blx	r3
}
 8009906:	bf00      	nop
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20005cbc 	.word	0x20005cbc

08009914 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800991c:	f107 0308 	add.w	r3, r7, #8
 8009920:	4618      	mov	r0, r3
 8009922:	f000 f859 	bl	80099d8 <prvGetNextExpireTime>
 8009926:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	4619      	mov	r1, r3
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f000 f805 	bl	800993c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009932:	f000 f8d7 	bl	8009ae4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009936:	bf00      	nop
 8009938:	e7f0      	b.n	800991c <prvTimerTask+0x8>
	...

0800993c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009946:	f7ff fa0f 	bl	8008d68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800994a:	f107 0308 	add.w	r3, r7, #8
 800994e:	4618      	mov	r0, r3
 8009950:	f000 f866 	bl	8009a20 <prvSampleTimeNow>
 8009954:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d130      	bne.n	80099be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10a      	bne.n	8009978 <prvProcessTimerOrBlockTask+0x3c>
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	429a      	cmp	r2, r3
 8009968:	d806      	bhi.n	8009978 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800996a:	f7ff fa0b 	bl	8008d84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800996e:	68f9      	ldr	r1, [r7, #12]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f7ff ff81 	bl	8009878 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009976:	e024      	b.n	80099c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d008      	beq.n	8009990 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800997e:	4b13      	ldr	r3, [pc, #76]	@ (80099cc <prvProcessTimerOrBlockTask+0x90>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d101      	bne.n	800998c <prvProcessTimerOrBlockTask+0x50>
 8009988:	2301      	movs	r3, #1
 800998a:	e000      	b.n	800998e <prvProcessTimerOrBlockTask+0x52>
 800998c:	2300      	movs	r3, #0
 800998e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009990:	4b0f      	ldr	r3, [pc, #60]	@ (80099d0 <prvProcessTimerOrBlockTask+0x94>)
 8009992:	6818      	ldr	r0, [r3, #0]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	683a      	ldr	r2, [r7, #0]
 800999c:	4619      	mov	r1, r3
 800999e:	f7fe ff6b 	bl	8008878 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80099a2:	f7ff f9ef 	bl	8008d84 <xTaskResumeAll>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10a      	bne.n	80099c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80099ac:	4b09      	ldr	r3, [pc, #36]	@ (80099d4 <prvProcessTimerOrBlockTask+0x98>)
 80099ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	f3bf 8f6f 	isb	sy
}
 80099bc:	e001      	b.n	80099c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80099be:	f7ff f9e1 	bl	8008d84 <xTaskResumeAll>
}
 80099c2:	bf00      	nop
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	20005cc0 	.word	0x20005cc0
 80099d0:	20005cc4 	.word	0x20005cc4
 80099d4:	e000ed04 	.word	0xe000ed04

080099d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099e0:	4b0e      	ldr	r3, [pc, #56]	@ (8009a1c <prvGetNextExpireTime+0x44>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d101      	bne.n	80099ee <prvGetNextExpireTime+0x16>
 80099ea:	2201      	movs	r2, #1
 80099ec:	e000      	b.n	80099f0 <prvGetNextExpireTime+0x18>
 80099ee:	2200      	movs	r2, #0
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d105      	bne.n	8009a08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099fc:	4b07      	ldr	r3, [pc, #28]	@ (8009a1c <prvGetNextExpireTime+0x44>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	60fb      	str	r3, [r7, #12]
 8009a06:	e001      	b.n	8009a0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	20005cbc 	.word	0x20005cbc

08009a20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a28:	f7ff fa4a 	bl	8008ec0 <xTaskGetTickCount>
 8009a2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8009a5c <prvSampleTimeNow+0x3c>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d205      	bcs.n	8009a44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a38:	f000 f93a 	bl	8009cb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	e002      	b.n	8009a4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a4a:	4a04      	ldr	r2, [pc, #16]	@ (8009a5c <prvSampleTimeNow+0x3c>)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a50:	68fb      	ldr	r3, [r7, #12]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	20005ccc 	.word	0x20005ccc

08009a60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
 8009a6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d812      	bhi.n	8009aac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	1ad2      	subs	r2, r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d302      	bcc.n	8009a9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a94:	2301      	movs	r3, #1
 8009a96:	617b      	str	r3, [r7, #20]
 8009a98:	e01b      	b.n	8009ad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a9a:	4b10      	ldr	r3, [pc, #64]	@ (8009adc <prvInsertTimerInActiveList+0x7c>)
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	f7fe f9be 	bl	8007e26 <vListInsert>
 8009aaa:	e012      	b.n	8009ad2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d206      	bcs.n	8009ac2 <prvInsertTimerInActiveList+0x62>
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d302      	bcc.n	8009ac2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009abc:	2301      	movs	r3, #1
 8009abe:	617b      	str	r3, [r7, #20]
 8009ac0:	e007      	b.n	8009ad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ac2:	4b07      	ldr	r3, [pc, #28]	@ (8009ae0 <prvInsertTimerInActiveList+0x80>)
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	3304      	adds	r3, #4
 8009aca:	4619      	mov	r1, r3
 8009acc:	4610      	mov	r0, r2
 8009ace:	f7fe f9aa 	bl	8007e26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009ad2:	697b      	ldr	r3, [r7, #20]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3718      	adds	r7, #24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	20005cc0 	.word	0x20005cc0
 8009ae0:	20005cbc 	.word	0x20005cbc

08009ae4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08e      	sub	sp, #56	@ 0x38
 8009ae8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009aea:	e0ce      	b.n	8009c8a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	da19      	bge.n	8009b26 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009af2:	1d3b      	adds	r3, r7, #4
 8009af4:	3304      	adds	r3, #4
 8009af6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10b      	bne.n	8009b16 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	61fb      	str	r3, [r7, #28]
}
 8009b10:	bf00      	nop
 8009b12:	bf00      	nop
 8009b14:	e7fd      	b.n	8009b12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b1c:	6850      	ldr	r0, [r2, #4]
 8009b1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b20:	6892      	ldr	r2, [r2, #8]
 8009b22:	4611      	mov	r1, r2
 8009b24:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f2c0 80ae 	blt.w	8009c8a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b34:	695b      	ldr	r3, [r3, #20]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d004      	beq.n	8009b44 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fe f9aa 	bl	8007e98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b44:	463b      	mov	r3, r7
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff ff6a 	bl	8009a20 <prvSampleTimeNow>
 8009b4c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2b09      	cmp	r3, #9
 8009b52:	f200 8097 	bhi.w	8009c84 <prvProcessReceivedCommands+0x1a0>
 8009b56:	a201      	add	r2, pc, #4	@ (adr r2, 8009b5c <prvProcessReceivedCommands+0x78>)
 8009b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5c:	08009b85 	.word	0x08009b85
 8009b60:	08009b85 	.word	0x08009b85
 8009b64:	08009b85 	.word	0x08009b85
 8009b68:	08009bfb 	.word	0x08009bfb
 8009b6c:	08009c0f 	.word	0x08009c0f
 8009b70:	08009c5b 	.word	0x08009c5b
 8009b74:	08009b85 	.word	0x08009b85
 8009b78:	08009b85 	.word	0x08009b85
 8009b7c:	08009bfb 	.word	0x08009bfb
 8009b80:	08009c0f 	.word	0x08009c0f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b8a:	f043 0301 	orr.w	r3, r3, #1
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	18d1      	adds	r1, r2, r3
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ba2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ba4:	f7ff ff5c 	bl	8009a60 <prvInsertTimerInActiveList>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d06c      	beq.n	8009c88 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bbc:	f003 0304 	and.w	r3, r3, #4
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d061      	beq.n	8009c88 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	441a      	add	r2, r3
 8009bcc:	2300      	movs	r3, #0
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bd6:	f7ff fe01 	bl	80097dc <xTimerGenericCommand>
 8009bda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009bdc:	6a3b      	ldr	r3, [r7, #32]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d152      	bne.n	8009c88 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	61bb      	str	r3, [r7, #24]
}
 8009bf4:	bf00      	nop
 8009bf6:	bf00      	nop
 8009bf8:	e7fd      	b.n	8009bf6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c00:	f023 0301 	bic.w	r3, r3, #1
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c0c:	e03d      	b.n	8009c8a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c14:	f043 0301 	orr.w	r3, r3, #1
 8009c18:	b2da      	uxtb	r2, r3
 8009c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c24:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10b      	bne.n	8009c46 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	617b      	str	r3, [r7, #20]
}
 8009c40:	bf00      	nop
 8009c42:	bf00      	nop
 8009c44:	e7fd      	b.n	8009c42 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c48:	699a      	ldr	r2, [r3, #24]
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4c:	18d1      	adds	r1, r2, r3
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c54:	f7ff ff04 	bl	8009a60 <prvInsertTimerInActiveList>
					break;
 8009c58:	e017      	b.n	8009c8a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c60:	f003 0302 	and.w	r3, r3, #2
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d103      	bne.n	8009c70 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009c68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c6a:	f000 fbe5 	bl	800a438 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c6e:	e00c      	b.n	8009c8a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c76:	f023 0301 	bic.w	r3, r3, #1
 8009c7a:	b2da      	uxtb	r2, r3
 8009c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c82:	e002      	b.n	8009c8a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009c84:	bf00      	nop
 8009c86:	e000      	b.n	8009c8a <prvProcessReceivedCommands+0x1a6>
					break;
 8009c88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c8a:	4b08      	ldr	r3, [pc, #32]	@ (8009cac <prvProcessReceivedCommands+0x1c8>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	1d39      	adds	r1, r7, #4
 8009c90:	2200      	movs	r2, #0
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fe fbd4 	bl	8008440 <xQueueReceive>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f47f af26 	bne.w	8009aec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009ca0:	bf00      	nop
 8009ca2:	bf00      	nop
 8009ca4:	3730      	adds	r7, #48	@ 0x30
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	20005cc4 	.word	0x20005cc4

08009cb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b088      	sub	sp, #32
 8009cb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009cb6:	e049      	b.n	8009d4c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8009d74 <prvSwitchTimerLists+0xc4>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8009d74 <prvSwitchTimerLists+0xc4>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	3304      	adds	r3, #4
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7fe f8e1 	bl	8007e98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ce4:	f003 0304 	and.w	r3, r3, #4
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d02f      	beq.n	8009d4c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	699b      	ldr	r3, [r3, #24]
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d90e      	bls.n	8009d1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8009d74 <prvSwitchTimerLists+0xc4>)
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	3304      	adds	r3, #4
 8009d12:	4619      	mov	r1, r3
 8009d14:	4610      	mov	r0, r2
 8009d16:	f7fe f886 	bl	8007e26 <vListInsert>
 8009d1a:	e017      	b.n	8009d4c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	2300      	movs	r3, #0
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	2100      	movs	r1, #0
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f7ff fd58 	bl	80097dc <xTimerGenericCommand>
 8009d2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10b      	bne.n	8009d4c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	603b      	str	r3, [r7, #0]
}
 8009d46:	bf00      	nop
 8009d48:	bf00      	nop
 8009d4a:	e7fd      	b.n	8009d48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d4c:	4b09      	ldr	r3, [pc, #36]	@ (8009d74 <prvSwitchTimerLists+0xc4>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1b0      	bne.n	8009cb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d56:	4b07      	ldr	r3, [pc, #28]	@ (8009d74 <prvSwitchTimerLists+0xc4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d5c:	4b06      	ldr	r3, [pc, #24]	@ (8009d78 <prvSwitchTimerLists+0xc8>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a04      	ldr	r2, [pc, #16]	@ (8009d74 <prvSwitchTimerLists+0xc4>)
 8009d62:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d64:	4a04      	ldr	r2, [pc, #16]	@ (8009d78 <prvSwitchTimerLists+0xc8>)
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	6013      	str	r3, [r2, #0]
}
 8009d6a:	bf00      	nop
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	20005cbc 	.word	0x20005cbc
 8009d78:	20005cc0 	.word	0x20005cc0

08009d7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d82:	f000 f969 	bl	800a058 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d86:	4b15      	ldr	r3, [pc, #84]	@ (8009ddc <prvCheckForValidListAndQueue+0x60>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d120      	bne.n	8009dd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d8e:	4814      	ldr	r0, [pc, #80]	@ (8009de0 <prvCheckForValidListAndQueue+0x64>)
 8009d90:	f7fd fff8 	bl	8007d84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d94:	4813      	ldr	r0, [pc, #76]	@ (8009de4 <prvCheckForValidListAndQueue+0x68>)
 8009d96:	f7fd fff5 	bl	8007d84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d9a:	4b13      	ldr	r3, [pc, #76]	@ (8009de8 <prvCheckForValidListAndQueue+0x6c>)
 8009d9c:	4a10      	ldr	r2, [pc, #64]	@ (8009de0 <prvCheckForValidListAndQueue+0x64>)
 8009d9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009da0:	4b12      	ldr	r3, [pc, #72]	@ (8009dec <prvCheckForValidListAndQueue+0x70>)
 8009da2:	4a10      	ldr	r2, [pc, #64]	@ (8009de4 <prvCheckForValidListAndQueue+0x68>)
 8009da4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009da6:	2300      	movs	r3, #0
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	4b11      	ldr	r3, [pc, #68]	@ (8009df0 <prvCheckForValidListAndQueue+0x74>)
 8009dac:	4a11      	ldr	r2, [pc, #68]	@ (8009df4 <prvCheckForValidListAndQueue+0x78>)
 8009dae:	2110      	movs	r1, #16
 8009db0:	200a      	movs	r0, #10
 8009db2:	f7fe f905 	bl	8007fc0 <xQueueGenericCreateStatic>
 8009db6:	4603      	mov	r3, r0
 8009db8:	4a08      	ldr	r2, [pc, #32]	@ (8009ddc <prvCheckForValidListAndQueue+0x60>)
 8009dba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009dbc:	4b07      	ldr	r3, [pc, #28]	@ (8009ddc <prvCheckForValidListAndQueue+0x60>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d005      	beq.n	8009dd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009dc4:	4b05      	ldr	r3, [pc, #20]	@ (8009ddc <prvCheckForValidListAndQueue+0x60>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	490b      	ldr	r1, [pc, #44]	@ (8009df8 <prvCheckForValidListAndQueue+0x7c>)
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe fd2a 	bl	8008824 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009dd0:	f000 f974 	bl	800a0bc <vPortExitCritical>
}
 8009dd4:	bf00      	nop
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	20005cc4 	.word	0x20005cc4
 8009de0:	20005c94 	.word	0x20005c94
 8009de4:	20005ca8 	.word	0x20005ca8
 8009de8:	20005cbc 	.word	0x20005cbc
 8009dec:	20005cc0 	.word	0x20005cc0
 8009df0:	20005d70 	.word	0x20005d70
 8009df4:	20005cd0 	.word	0x20005cd0
 8009df8:	0801a610 	.word	0x0801a610

08009dfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	3b04      	subs	r3, #4
 8009e0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009e14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	3b04      	subs	r3, #4
 8009e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	f023 0201 	bic.w	r2, r3, #1
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	3b04      	subs	r3, #4
 8009e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e2c:	4a0c      	ldr	r2, [pc, #48]	@ (8009e60 <pxPortInitialiseStack+0x64>)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	3b14      	subs	r3, #20
 8009e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	3b04      	subs	r3, #4
 8009e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f06f 0202 	mvn.w	r2, #2
 8009e4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3b20      	subs	r3, #32
 8009e50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e52:	68fb      	ldr	r3, [r7, #12]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr
 8009e60:	08009e65 	.word	0x08009e65

08009e64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e6e:	4b13      	ldr	r3, [pc, #76]	@ (8009ebc <prvTaskExitError+0x58>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e76:	d00b      	beq.n	8009e90 <prvTaskExitError+0x2c>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	60fb      	str	r3, [r7, #12]
}
 8009e8a:	bf00      	nop
 8009e8c:	bf00      	nop
 8009e8e:	e7fd      	b.n	8009e8c <prvTaskExitError+0x28>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	60bb      	str	r3, [r7, #8]
}
 8009ea2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ea4:	bf00      	nop
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d0fc      	beq.n	8009ea6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009eac:	bf00      	nop
 8009eae:	bf00      	nop
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	200000a0 	.word	0x200000a0

08009ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ec0:	4b07      	ldr	r3, [pc, #28]	@ (8009ee0 <pxCurrentTCBConst2>)
 8009ec2:	6819      	ldr	r1, [r3, #0]
 8009ec4:	6808      	ldr	r0, [r1, #0]
 8009ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eca:	f380 8809 	msr	PSP, r0
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f04f 0000 	mov.w	r0, #0
 8009ed6:	f380 8811 	msr	BASEPRI, r0
 8009eda:	4770      	bx	lr
 8009edc:	f3af 8000 	nop.w

08009ee0 <pxCurrentTCBConst2>:
 8009ee0:	20005794 	.word	0x20005794
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop

08009ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ee8:	4808      	ldr	r0, [pc, #32]	@ (8009f0c <prvPortStartFirstTask+0x24>)
 8009eea:	6800      	ldr	r0, [r0, #0]
 8009eec:	6800      	ldr	r0, [r0, #0]
 8009eee:	f380 8808 	msr	MSP, r0
 8009ef2:	f04f 0000 	mov.w	r0, #0
 8009ef6:	f380 8814 	msr	CONTROL, r0
 8009efa:	b662      	cpsie	i
 8009efc:	b661      	cpsie	f
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	f3bf 8f6f 	isb	sy
 8009f06:	df00      	svc	0
 8009f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f0a:	bf00      	nop
 8009f0c:	e000ed08 	.word	0xe000ed08

08009f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f16:	4b47      	ldr	r3, [pc, #284]	@ (800a034 <xPortStartScheduler+0x124>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a47      	ldr	r2, [pc, #284]	@ (800a038 <xPortStartScheduler+0x128>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d10b      	bne.n	8009f38 <xPortStartScheduler+0x28>
	__asm volatile
 8009f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f24:	f383 8811 	msr	BASEPRI, r3
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	613b      	str	r3, [r7, #16]
}
 8009f32:	bf00      	nop
 8009f34:	bf00      	nop
 8009f36:	e7fd      	b.n	8009f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f38:	4b3e      	ldr	r3, [pc, #248]	@ (800a034 <xPortStartScheduler+0x124>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a3f      	ldr	r2, [pc, #252]	@ (800a03c <xPortStartScheduler+0x12c>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d10b      	bne.n	8009f5a <xPortStartScheduler+0x4a>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	60fb      	str	r3, [r7, #12]
}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop
 8009f58:	e7fd      	b.n	8009f56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f5a:	4b39      	ldr	r3, [pc, #228]	@ (800a040 <xPortStartScheduler+0x130>)
 8009f5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	22ff      	movs	r2, #255	@ 0xff
 8009f6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f74:	78fb      	ldrb	r3, [r7, #3]
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	4b31      	ldr	r3, [pc, #196]	@ (800a044 <xPortStartScheduler+0x134>)
 8009f80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f82:	4b31      	ldr	r3, [pc, #196]	@ (800a048 <xPortStartScheduler+0x138>)
 8009f84:	2207      	movs	r2, #7
 8009f86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f88:	e009      	b.n	8009f9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009f8a:	4b2f      	ldr	r3, [pc, #188]	@ (800a048 <xPortStartScheduler+0x138>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	4a2d      	ldr	r2, [pc, #180]	@ (800a048 <xPortStartScheduler+0x138>)
 8009f92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f94:	78fb      	ldrb	r3, [r7, #3]
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	005b      	lsls	r3, r3, #1
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f9e:	78fb      	ldrb	r3, [r7, #3]
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fa6:	2b80      	cmp	r3, #128	@ 0x80
 8009fa8:	d0ef      	beq.n	8009f8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009faa:	4b27      	ldr	r3, [pc, #156]	@ (800a048 <xPortStartScheduler+0x138>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f1c3 0307 	rsb	r3, r3, #7
 8009fb2:	2b04      	cmp	r3, #4
 8009fb4:	d00b      	beq.n	8009fce <xPortStartScheduler+0xbe>
	__asm volatile
 8009fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	60bb      	str	r3, [r7, #8]
}
 8009fc8:	bf00      	nop
 8009fca:	bf00      	nop
 8009fcc:	e7fd      	b.n	8009fca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009fce:	4b1e      	ldr	r3, [pc, #120]	@ (800a048 <xPortStartScheduler+0x138>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	021b      	lsls	r3, r3, #8
 8009fd4:	4a1c      	ldr	r2, [pc, #112]	@ (800a048 <xPortStartScheduler+0x138>)
 8009fd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009fd8:	4b1b      	ldr	r3, [pc, #108]	@ (800a048 <xPortStartScheduler+0x138>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009fe0:	4a19      	ldr	r2, [pc, #100]	@ (800a048 <xPortStartScheduler+0x138>)
 8009fe2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	b2da      	uxtb	r2, r3
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fec:	4b17      	ldr	r3, [pc, #92]	@ (800a04c <xPortStartScheduler+0x13c>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a16      	ldr	r2, [pc, #88]	@ (800a04c <xPortStartScheduler+0x13c>)
 8009ff2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009ff6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ff8:	4b14      	ldr	r3, [pc, #80]	@ (800a04c <xPortStartScheduler+0x13c>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a13      	ldr	r2, [pc, #76]	@ (800a04c <xPortStartScheduler+0x13c>)
 8009ffe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a002:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a004:	f000 f8da 	bl	800a1bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a008:	4b11      	ldr	r3, [pc, #68]	@ (800a050 <xPortStartScheduler+0x140>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a00e:	f000 f8f9 	bl	800a204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a012:	4b10      	ldr	r3, [pc, #64]	@ (800a054 <xPortStartScheduler+0x144>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a0f      	ldr	r2, [pc, #60]	@ (800a054 <xPortStartScheduler+0x144>)
 800a018:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a01c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a01e:	f7ff ff63 	bl	8009ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a022:	f7ff f817 	bl	8009054 <vTaskSwitchContext>
	prvTaskExitError();
 800a026:	f7ff ff1d 	bl	8009e64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3718      	adds	r7, #24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	e000ed00 	.word	0xe000ed00
 800a038:	410fc271 	.word	0x410fc271
 800a03c:	410fc270 	.word	0x410fc270
 800a040:	e000e400 	.word	0xe000e400
 800a044:	20005dc0 	.word	0x20005dc0
 800a048:	20005dc4 	.word	0x20005dc4
 800a04c:	e000ed20 	.word	0xe000ed20
 800a050:	200000a0 	.word	0x200000a0
 800a054:	e000ef34 	.word	0xe000ef34

0800a058 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	607b      	str	r3, [r7, #4]
}
 800a070:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a072:	4b10      	ldr	r3, [pc, #64]	@ (800a0b4 <vPortEnterCritical+0x5c>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	3301      	adds	r3, #1
 800a078:	4a0e      	ldr	r2, [pc, #56]	@ (800a0b4 <vPortEnterCritical+0x5c>)
 800a07a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a07c:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b4 <vPortEnterCritical+0x5c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d110      	bne.n	800a0a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a084:	4b0c      	ldr	r3, [pc, #48]	@ (800a0b8 <vPortEnterCritical+0x60>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00b      	beq.n	800a0a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	603b      	str	r3, [r7, #0]
}
 800a0a0:	bf00      	nop
 800a0a2:	bf00      	nop
 800a0a4:	e7fd      	b.n	800a0a2 <vPortEnterCritical+0x4a>
	}
}
 800a0a6:	bf00      	nop
 800a0a8:	370c      	adds	r7, #12
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	200000a0 	.word	0x200000a0
 800a0b8:	e000ed04 	.word	0xe000ed04

0800a0bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0c2:	4b12      	ldr	r3, [pc, #72]	@ (800a10c <vPortExitCritical+0x50>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10b      	bne.n	800a0e2 <vPortExitCritical+0x26>
	__asm volatile
 800a0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	607b      	str	r3, [r7, #4]
}
 800a0dc:	bf00      	nop
 800a0de:	bf00      	nop
 800a0e0:	e7fd      	b.n	800a0de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a10c <vPortExitCritical+0x50>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	4a08      	ldr	r2, [pc, #32]	@ (800a10c <vPortExitCritical+0x50>)
 800a0ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0ec:	4b07      	ldr	r3, [pc, #28]	@ (800a10c <vPortExitCritical+0x50>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d105      	bne.n	800a100 <vPortExitCritical+0x44>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	f383 8811 	msr	BASEPRI, r3
}
 800a0fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	200000a0 	.word	0x200000a0

0800a110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a110:	f3ef 8009 	mrs	r0, PSP
 800a114:	f3bf 8f6f 	isb	sy
 800a118:	4b15      	ldr	r3, [pc, #84]	@ (800a170 <pxCurrentTCBConst>)
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	f01e 0f10 	tst.w	lr, #16
 800a120:	bf08      	it	eq
 800a122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12a:	6010      	str	r0, [r2, #0]
 800a12c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a130:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a134:	f380 8811 	msr	BASEPRI, r0
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f7fe ff88 	bl	8009054 <vTaskSwitchContext>
 800a144:	f04f 0000 	mov.w	r0, #0
 800a148:	f380 8811 	msr	BASEPRI, r0
 800a14c:	bc09      	pop	{r0, r3}
 800a14e:	6819      	ldr	r1, [r3, #0]
 800a150:	6808      	ldr	r0, [r1, #0]
 800a152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a156:	f01e 0f10 	tst.w	lr, #16
 800a15a:	bf08      	it	eq
 800a15c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a160:	f380 8809 	msr	PSP, r0
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	f3af 8000 	nop.w

0800a170 <pxCurrentTCBConst>:
 800a170:	20005794 	.word	0x20005794
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a174:	bf00      	nop
 800a176:	bf00      	nop

0800a178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	607b      	str	r3, [r7, #4]
}
 800a190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a192:	f7fe fea5 	bl	8008ee0 <xTaskIncrementTick>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d003      	beq.n	800a1a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a19c:	4b06      	ldr	r3, [pc, #24]	@ (800a1b8 <xPortSysTickHandler+0x40>)
 800a19e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	f383 8811 	msr	BASEPRI, r3
}
 800a1ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1b0:	bf00      	nop
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	e000ed04 	.word	0xe000ed04

0800a1bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a1bc:	b480      	push	{r7}
 800a1be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a1f0 <vPortSetupTimerInterrupt+0x34>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a1f4 <vPortSetupTimerInterrupt+0x38>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a1cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a1f8 <vPortSetupTimerInterrupt+0x3c>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a0a      	ldr	r2, [pc, #40]	@ (800a1fc <vPortSetupTimerInterrupt+0x40>)
 800a1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1d6:	099b      	lsrs	r3, r3, #6
 800a1d8:	4a09      	ldr	r2, [pc, #36]	@ (800a200 <vPortSetupTimerInterrupt+0x44>)
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1de:	4b04      	ldr	r3, [pc, #16]	@ (800a1f0 <vPortSetupTimerInterrupt+0x34>)
 800a1e0:	2207      	movs	r2, #7
 800a1e2:	601a      	str	r2, [r3, #0]
}
 800a1e4:	bf00      	nop
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	e000e010 	.word	0xe000e010
 800a1f4:	e000e018 	.word	0xe000e018
 800a1f8:	20000004 	.word	0x20000004
 800a1fc:	10624dd3 	.word	0x10624dd3
 800a200:	e000e014 	.word	0xe000e014

0800a204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a204:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a214 <vPortEnableVFP+0x10>
 800a208:	6801      	ldr	r1, [r0, #0]
 800a20a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a20e:	6001      	str	r1, [r0, #0]
 800a210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a212:	bf00      	nop
 800a214:	e000ed88 	.word	0xe000ed88

0800a218 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a21e:	f3ef 8305 	mrs	r3, IPSR
 800a222:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2b0f      	cmp	r3, #15
 800a228:	d915      	bls.n	800a256 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a22a:	4a18      	ldr	r2, [pc, #96]	@ (800a28c <vPortValidateInterruptPriority+0x74>)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	4413      	add	r3, r2
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a234:	4b16      	ldr	r3, [pc, #88]	@ (800a290 <vPortValidateInterruptPriority+0x78>)
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	7afa      	ldrb	r2, [r7, #11]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d20b      	bcs.n	800a256 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	607b      	str	r3, [r7, #4]
}
 800a250:	bf00      	nop
 800a252:	bf00      	nop
 800a254:	e7fd      	b.n	800a252 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a256:	4b0f      	ldr	r3, [pc, #60]	@ (800a294 <vPortValidateInterruptPriority+0x7c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a25e:	4b0e      	ldr	r3, [pc, #56]	@ (800a298 <vPortValidateInterruptPriority+0x80>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	429a      	cmp	r2, r3
 800a264:	d90b      	bls.n	800a27e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	603b      	str	r3, [r7, #0]
}
 800a278:	bf00      	nop
 800a27a:	bf00      	nop
 800a27c:	e7fd      	b.n	800a27a <vPortValidateInterruptPriority+0x62>
	}
 800a27e:	bf00      	nop
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	e000e3f0 	.word	0xe000e3f0
 800a290:	20005dc0 	.word	0x20005dc0
 800a294:	e000ed0c 	.word	0xe000ed0c
 800a298:	20005dc4 	.word	0x20005dc4

0800a29c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b08a      	sub	sp, #40	@ 0x28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a2a8:	f7fe fd5e 	bl	8008d68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2ac:	4b5c      	ldr	r3, [pc, #368]	@ (800a420 <pvPortMalloc+0x184>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a2b4:	f000 f924 	bl	800a500 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2b8:	4b5a      	ldr	r3, [pc, #360]	@ (800a424 <pvPortMalloc+0x188>)
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4013      	ands	r3, r2
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f040 8095 	bne.w	800a3f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d01e      	beq.n	800a30a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a2cc:	2208      	movs	r2, #8
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f003 0307 	and.w	r3, r3, #7
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d015      	beq.n	800a30a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f023 0307 	bic.w	r3, r3, #7
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f003 0307 	and.w	r3, r3, #7
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00b      	beq.n	800a30a <pvPortMalloc+0x6e>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	617b      	str	r3, [r7, #20]
}
 800a304:	bf00      	nop
 800a306:	bf00      	nop
 800a308:	e7fd      	b.n	800a306 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d06f      	beq.n	800a3f0 <pvPortMalloc+0x154>
 800a310:	4b45      	ldr	r3, [pc, #276]	@ (800a428 <pvPortMalloc+0x18c>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	429a      	cmp	r2, r3
 800a318:	d86a      	bhi.n	800a3f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a31a:	4b44      	ldr	r3, [pc, #272]	@ (800a42c <pvPortMalloc+0x190>)
 800a31c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a31e:	4b43      	ldr	r3, [pc, #268]	@ (800a42c <pvPortMalloc+0x190>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a324:	e004      	b.n	800a330 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a328:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	429a      	cmp	r2, r3
 800a338:	d903      	bls.n	800a342 <pvPortMalloc+0xa6>
 800a33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1f1      	bne.n	800a326 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a342:	4b37      	ldr	r3, [pc, #220]	@ (800a420 <pvPortMalloc+0x184>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a348:	429a      	cmp	r2, r3
 800a34a:	d051      	beq.n	800a3f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a34c:	6a3b      	ldr	r3, [r7, #32]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2208      	movs	r2, #8
 800a352:	4413      	add	r3, r2
 800a354:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	6a3b      	ldr	r3, [r7, #32]
 800a35c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a360:	685a      	ldr	r2, [r3, #4]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	1ad2      	subs	r2, r2, r3
 800a366:	2308      	movs	r3, #8
 800a368:	005b      	lsls	r3, r3, #1
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d920      	bls.n	800a3b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a36e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4413      	add	r3, r2
 800a374:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	f003 0307 	and.w	r3, r3, #7
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00b      	beq.n	800a398 <pvPortMalloc+0xfc>
	__asm volatile
 800a380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a384:	f383 8811 	msr	BASEPRI, r3
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	613b      	str	r3, [r7, #16]
}
 800a392:	bf00      	nop
 800a394:	bf00      	nop
 800a396:	e7fd      	b.n	800a394 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39a:	685a      	ldr	r2, [r3, #4]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	1ad2      	subs	r2, r2, r3
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3aa:	69b8      	ldr	r0, [r7, #24]
 800a3ac:	f000 f90a 	bl	800a5c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3b0:	4b1d      	ldr	r3, [pc, #116]	@ (800a428 <pvPortMalloc+0x18c>)
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	1ad3      	subs	r3, r2, r3
 800a3ba:	4a1b      	ldr	r2, [pc, #108]	@ (800a428 <pvPortMalloc+0x18c>)
 800a3bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a3be:	4b1a      	ldr	r3, [pc, #104]	@ (800a428 <pvPortMalloc+0x18c>)
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	4b1b      	ldr	r3, [pc, #108]	@ (800a430 <pvPortMalloc+0x194>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d203      	bcs.n	800a3d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a3ca:	4b17      	ldr	r3, [pc, #92]	@ (800a428 <pvPortMalloc+0x18c>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a18      	ldr	r2, [pc, #96]	@ (800a430 <pvPortMalloc+0x194>)
 800a3d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	4b13      	ldr	r3, [pc, #76]	@ (800a424 <pvPortMalloc+0x188>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	431a      	orrs	r2, r3
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a3e6:	4b13      	ldr	r3, [pc, #76]	@ (800a434 <pvPortMalloc+0x198>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	4a11      	ldr	r2, [pc, #68]	@ (800a434 <pvPortMalloc+0x198>)
 800a3ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3f0:	f7fe fcc8 	bl	8008d84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	f003 0307 	and.w	r3, r3, #7
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00b      	beq.n	800a416 <pvPortMalloc+0x17a>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	60fb      	str	r3, [r7, #12]
}
 800a410:	bf00      	nop
 800a412:	bf00      	nop
 800a414:	e7fd      	b.n	800a412 <pvPortMalloc+0x176>
	return pvReturn;
 800a416:	69fb      	ldr	r3, [r7, #28]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3728      	adds	r7, #40	@ 0x28
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	200069d0 	.word	0x200069d0
 800a424:	200069e4 	.word	0x200069e4
 800a428:	200069d4 	.word	0x200069d4
 800a42c:	200069c8 	.word	0x200069c8
 800a430:	200069d8 	.word	0x200069d8
 800a434:	200069dc 	.word	0x200069dc

0800a438 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d04f      	beq.n	800a4ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a44a:	2308      	movs	r3, #8
 800a44c:	425b      	negs	r3, r3
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	4413      	add	r3, r2
 800a452:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	4b25      	ldr	r3, [pc, #148]	@ (800a4f4 <vPortFree+0xbc>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4013      	ands	r3, r2
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10b      	bne.n	800a47e <vPortFree+0x46>
	__asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	60fb      	str	r3, [r7, #12]
}
 800a478:	bf00      	nop
 800a47a:	bf00      	nop
 800a47c:	e7fd      	b.n	800a47a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00b      	beq.n	800a49e <vPortFree+0x66>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	60bb      	str	r3, [r7, #8]
}
 800a498:	bf00      	nop
 800a49a:	bf00      	nop
 800a49c:	e7fd      	b.n	800a49a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	685a      	ldr	r2, [r3, #4]
 800a4a2:	4b14      	ldr	r3, [pc, #80]	@ (800a4f4 <vPortFree+0xbc>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d01e      	beq.n	800a4ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d11a      	bne.n	800a4ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	685a      	ldr	r2, [r3, #4]
 800a4b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a4f4 <vPortFree+0xbc>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	43db      	mvns	r3, r3
 800a4be:	401a      	ands	r2, r3
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a4c4:	f7fe fc50 	bl	8008d68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a4f8 <vPortFree+0xc0>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	4a09      	ldr	r2, [pc, #36]	@ (800a4f8 <vPortFree+0xc0>)
 800a4d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4d6:	6938      	ldr	r0, [r7, #16]
 800a4d8:	f000 f874 	bl	800a5c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a4dc:	4b07      	ldr	r3, [pc, #28]	@ (800a4fc <vPortFree+0xc4>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	4a06      	ldr	r2, [pc, #24]	@ (800a4fc <vPortFree+0xc4>)
 800a4e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a4e6:	f7fe fc4d 	bl	8008d84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4ea:	bf00      	nop
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	200069e4 	.word	0x200069e4
 800a4f8:	200069d4 	.word	0x200069d4
 800a4fc:	200069e0 	.word	0x200069e0

0800a500 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a506:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a50a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a50c:	4b27      	ldr	r3, [pc, #156]	@ (800a5ac <prvHeapInit+0xac>)
 800a50e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f003 0307 	and.w	r3, r3, #7
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00c      	beq.n	800a534 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3307      	adds	r3, #7
 800a51e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f023 0307 	bic.w	r3, r3, #7
 800a526:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	4a1f      	ldr	r2, [pc, #124]	@ (800a5ac <prvHeapInit+0xac>)
 800a530:	4413      	add	r3, r2
 800a532:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a538:	4a1d      	ldr	r2, [pc, #116]	@ (800a5b0 <prvHeapInit+0xb0>)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a53e:	4b1c      	ldr	r3, [pc, #112]	@ (800a5b0 <prvHeapInit+0xb0>)
 800a540:	2200      	movs	r2, #0
 800a542:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	68ba      	ldr	r2, [r7, #8]
 800a548:	4413      	add	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a54c:	2208      	movs	r2, #8
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	1a9b      	subs	r3, r3, r2
 800a552:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f023 0307 	bic.w	r3, r3, #7
 800a55a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	4a15      	ldr	r2, [pc, #84]	@ (800a5b4 <prvHeapInit+0xb4>)
 800a560:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a562:	4b14      	ldr	r3, [pc, #80]	@ (800a5b4 <prvHeapInit+0xb4>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2200      	movs	r2, #0
 800a568:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a56a:	4b12      	ldr	r3, [pc, #72]	@ (800a5b4 <prvHeapInit+0xb4>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2200      	movs	r2, #0
 800a570:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	1ad2      	subs	r2, r2, r3
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a580:	4b0c      	ldr	r3, [pc, #48]	@ (800a5b4 <prvHeapInit+0xb4>)
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	4a0a      	ldr	r2, [pc, #40]	@ (800a5b8 <prvHeapInit+0xb8>)
 800a58e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	4a09      	ldr	r2, [pc, #36]	@ (800a5bc <prvHeapInit+0xbc>)
 800a596:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a598:	4b09      	ldr	r3, [pc, #36]	@ (800a5c0 <prvHeapInit+0xc0>)
 800a59a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a59e:	601a      	str	r2, [r3, #0]
}
 800a5a0:	bf00      	nop
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr
 800a5ac:	20005dc8 	.word	0x20005dc8
 800a5b0:	200069c8 	.word	0x200069c8
 800a5b4:	200069d0 	.word	0x200069d0
 800a5b8:	200069d8 	.word	0x200069d8
 800a5bc:	200069d4 	.word	0x200069d4
 800a5c0:	200069e4 	.word	0x200069e4

0800a5c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5cc:	4b28      	ldr	r3, [pc, #160]	@ (800a670 <prvInsertBlockIntoFreeList+0xac>)
 800a5ce:	60fb      	str	r3, [r7, #12]
 800a5d0:	e002      	b.n	800a5d8 <prvInsertBlockIntoFreeList+0x14>
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	60fb      	str	r3, [r7, #12]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d8f7      	bhi.n	800a5d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d108      	bne.n	800a606 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	685a      	ldr	r2, [r3, #4]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	441a      	add	r2, r3
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	441a      	add	r2, r3
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	429a      	cmp	r2, r3
 800a618:	d118      	bne.n	800a64c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	4b15      	ldr	r3, [pc, #84]	@ (800a674 <prvInsertBlockIntoFreeList+0xb0>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	429a      	cmp	r2, r3
 800a624:	d00d      	beq.n	800a642 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	685a      	ldr	r2, [r3, #4]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	441a      	add	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	601a      	str	r2, [r3, #0]
 800a640:	e008      	b.n	800a654 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a642:	4b0c      	ldr	r3, [pc, #48]	@ (800a674 <prvInsertBlockIntoFreeList+0xb0>)
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	601a      	str	r2, [r3, #0]
 800a64a:	e003      	b.n	800a654 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d002      	beq.n	800a662 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a662:	bf00      	nop
 800a664:	3714      	adds	r7, #20
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	200069c8 	.word	0x200069c8
 800a674:	200069d0 	.word	0x200069d0

0800a678 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800a678:	4b04      	ldr	r3, [pc, #16]	@ (800a68c <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	b10a      	cbz	r2, 800a682 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xa>
 800a67e:	4803      	ldr	r0, [pc, #12]	@ (800a68c <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800a680:	4770      	bx	lr
 800a682:	4a03      	ldr	r2, [pc, #12]	@ (800a690 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x18>)
 800a684:	4801      	ldr	r0, [pc, #4]	@ (800a68c <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800a686:	6812      	ldr	r2, [r2, #0]
 800a688:	601a      	str	r2, [r3, #0]
 800a68a:	4770      	bx	lr
 800a68c:	200000ac 	.word	0x200000ac
 800a690:	2000020c 	.word	0x2000020c

0800a694 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800a694:	4b04      	ldr	r3, [pc, #16]	@ (800a6a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>)
 800a696:	4805      	ldr	r0, [pc, #20]	@ (800a6ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x18>)
 800a698:	4905      	ldr	r1, [pc, #20]	@ (800a6b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x1c>)
 800a69a:	4a06      	ldr	r2, [pc, #24]	@ (800a6b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6003      	str	r3, [r0, #0]
 800a6a0:	600b      	str	r3, [r1, #0]
 800a6a2:	6013      	str	r3, [r2, #0]
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
 800a6a8:	2000020c 	.word	0x2000020c
 800a6ac:	200000c8 	.word	0x200000c8
 800a6b0:	200000d4 	.word	0x200000d4
 800a6b4:	200000ac 	.word	0x200000ac

0800a6b8 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_init_function>:
 800a6b8:	f004 be58 	b.w	800f36c <imu_interfaces__srv__ImuCalibration_Request__init>

0800a6bc <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_fini_function>:
 800a6bc:	f004 be68 	b.w	800f390 <imu_interfaces__srv__ImuCalibration_Request__fini>

0800a6c0 <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_init_function>:
 800a6c0:	f004 be6a 	b.w	800f398 <imu_interfaces__srv__ImuCalibration_Response__init>

0800a6c4 <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_fini_function>:
 800a6c4:	f004 be6c 	b.w	800f3a0 <imu_interfaces__srv__ImuCalibration_Response__fini>

0800a6c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800a6c8:	b508      	push	{r3, lr}
 800a6ca:	f004 faad 	bl	800ec28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800a6ce:	4b06      	ldr	r3, [pc, #24]	@ (800a6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800a6d0:	4906      	ldr	r1, [pc, #24]	@ (800a6ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x24>)
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	60c8      	str	r0, [r1, #12]
 800a6d6:	b10a      	cbz	r2, 800a6dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>
 800a6d8:	4803      	ldr	r0, [pc, #12]	@ (800a6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800a6da:	bd08      	pop	{r3, pc}
 800a6dc:	4a04      	ldr	r2, [pc, #16]	@ (800a6f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x28>)
 800a6de:	4802      	ldr	r0, [pc, #8]	@ (800a6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800a6e0:	6812      	ldr	r2, [r2, #0]
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	bd08      	pop	{r3, pc}
 800a6e6:	bf00      	nop
 800a6e8:	2000011c 	.word	0x2000011c
 800a6ec:	200000e0 	.word	0x200000e0
 800a6f0:	20000210 	.word	0x20000210

0800a6f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800a6f4:	4b04      	ldr	r3, [pc, #16]	@ (800a708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	b10a      	cbz	r2, 800a6fe <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0xa>
 800a6fa:	4803      	ldr	r0, [pc, #12]	@ (800a708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800a6fc:	4770      	bx	lr
 800a6fe:	4a03      	ldr	r2, [pc, #12]	@ (800a70c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x18>)
 800a700:	4801      	ldr	r0, [pc, #4]	@ (800a708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800a702:	6812      	ldr	r2, [r2, #0]
 800a704:	601a      	str	r2, [r3, #0]
 800a706:	4770      	bx	lr
 800a708:	20000164 	.word	0x20000164
 800a70c:	20000210 	.word	0x20000210

0800a710 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800a710:	4b16      	ldr	r3, [pc, #88]	@ (800a76c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	b510      	push	{r4, lr}
 800a716:	b132      	cbz	r2, 800a726 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x16>
 800a718:	685c      	ldr	r4, [r3, #4]
 800a71a:	68a3      	ldr	r3, [r4, #8]
 800a71c:	b153      	cbz	r3, 800a734 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x24>
 800a71e:	68e3      	ldr	r3, [r4, #12]
 800a720:	b1a3      	cbz	r3, 800a74c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x3c>
 800a722:	4812      	ldr	r0, [pc, #72]	@ (800a76c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800a724:	bd10      	pop	{r4, pc}
 800a726:	4a12      	ldr	r2, [pc, #72]	@ (800a770 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800a728:	685c      	ldr	r4, [r3, #4]
 800a72a:	6812      	ldr	r2, [r2, #0]
 800a72c:	601a      	str	r2, [r3, #0]
 800a72e:	68a3      	ldr	r3, [r4, #8]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d1f4      	bne.n	800a71e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xe>
 800a734:	f004 fa78 	bl	800ec28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800a738:	4b0e      	ldr	r3, [pc, #56]	@ (800a774 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x64>)
 800a73a:	490f      	ldr	r1, [pc, #60]	@ (800a778 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x68>)
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	60c8      	str	r0, [r1, #12]
 800a740:	b17a      	cbz	r2, 800a762 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x52>
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	60a3      	str	r3, [r4, #8]
 800a746:	68e3      	ldr	r3, [r4, #12]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1ea      	bne.n	800a722 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x12>
 800a74c:	4b0b      	ldr	r3, [pc, #44]	@ (800a77c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x6c>)
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	b11a      	cbz	r2, 800a75a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4a>
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	4805      	ldr	r0, [pc, #20]	@ (800a76c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800a756:	60e3      	str	r3, [r4, #12]
 800a758:	bd10      	pop	{r4, pc}
 800a75a:	4a05      	ldr	r2, [pc, #20]	@ (800a770 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800a75c:	6812      	ldr	r2, [r2, #0]
 800a75e:	601a      	str	r2, [r3, #0]
 800a760:	e7f7      	b.n	800a752 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x42>
 800a762:	4a03      	ldr	r2, [pc, #12]	@ (800a770 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800a764:	6812      	ldr	r2, [r2, #0]
 800a766:	601a      	str	r2, [r3, #0]
 800a768:	e7eb      	b.n	800a742 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x32>
 800a76a:	bf00      	nop
 800a76c:	20000180 	.word	0x20000180
 800a770:	20000210 	.word	0x20000210
 800a774:	2000011c 	.word	0x2000011c
 800a778:	200000e0 	.word	0x200000e0
 800a77c:	20000164 	.word	0x20000164

0800a780 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800a780:	4800      	ldr	r0, [pc, #0]	@ (800a784 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x4>)
 800a782:	4770      	bx	lr
 800a784:	200001a8 	.word	0x200001a8

0800a788 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800a788:	4800      	ldr	r0, [pc, #0]	@ (800a78c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x4>)
 800a78a:	4770      	bx	lr
 800a78c:	200001b4 	.word	0x200001b4

0800a790 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request>:
 800a790:	b108      	cbz	r0, 800a796 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request+0x6>
 800a792:	f004 ba9b 	b.w	800eccc <get_serialized_size_sensor_msgs__msg__Imu>
 800a796:	4770      	bx	lr

0800a798 <_ImuCalibration_Request__max_serialized_size>:
 800a798:	b500      	push	{lr}
 800a79a:	b083      	sub	sp, #12
 800a79c:	2301      	movs	r3, #1
 800a79e:	2100      	movs	r1, #0
 800a7a0:	f10d 0007 	add.w	r0, sp, #7
 800a7a4:	f88d 3007 	strb.w	r3, [sp, #7]
 800a7a8:	f004 fb0e 	bl	800edc8 <max_serialized_size_sensor_msgs__msg__Imu>
 800a7ac:	b003      	add	sp, #12
 800a7ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7b2:	bf00      	nop

0800a7b4 <_ImuCalibration_Response__max_serialized_size>:
 800a7b4:	b508      	push	{r3, lr}
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	f001 fb85 	bl	800bec8 <ucdr_alignment>
 800a7be:	3001      	adds	r0, #1
 800a7c0:	bd08      	pop	{r3, pc}
 800a7c2:	bf00      	nop

0800a7c4 <_ImuCalibration_Response__cdr_deserialize>:
 800a7c4:	b109      	cbz	r1, 800a7ca <_ImuCalibration_Response__cdr_deserialize+0x6>
 800a7c6:	f000 b881 	b.w	800a8cc <ucdr_deserialize_bool>
 800a7ca:	4608      	mov	r0, r1
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop

0800a7d0 <_ImuCalibration_Request__get_serialized_size>:
 800a7d0:	b110      	cbz	r0, 800a7d8 <_ImuCalibration_Request__get_serialized_size+0x8>
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	f004 ba7a 	b.w	800eccc <get_serialized_size_sensor_msgs__msg__Imu>
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop

0800a7dc <_ImuCalibration_Request__cdr_deserialize>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	460c      	mov	r4, r1
 800a7e0:	b149      	cbz	r1, 800a7f6 <_ImuCalibration_Request__cdr_deserialize+0x1a>
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	f004 fb2a 	bl	800ee3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800a7e8:	6843      	ldr	r3, [r0, #4]
 800a7ea:	4621      	mov	r1, r4
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a7f4:	4718      	bx	r3
 800a7f6:	4608      	mov	r0, r1
 800a7f8:	bd70      	pop	{r4, r5, r6, pc}
 800a7fa:	bf00      	nop

0800a7fc <_ImuCalibration_Request__cdr_serialize>:
 800a7fc:	b158      	cbz	r0, 800a816 <_ImuCalibration_Request__cdr_serialize+0x1a>
 800a7fe:	b570      	push	{r4, r5, r6, lr}
 800a800:	460d      	mov	r5, r1
 800a802:	4604      	mov	r4, r0
 800a804:	f004 fb1a 	bl	800ee3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800a808:	6843      	ldr	r3, [r0, #4]
 800a80a:	4629      	mov	r1, r5
 800a80c:	4620      	mov	r0, r4
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a814:	4718      	bx	r3
 800a816:	4770      	bx	lr

0800a818 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response>:
 800a818:	b138      	cbz	r0, 800a82a <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response+0x12>
 800a81a:	b508      	push	{r3, lr}
 800a81c:	460b      	mov	r3, r1
 800a81e:	4618      	mov	r0, r3
 800a820:	2101      	movs	r1, #1
 800a822:	f001 fb51 	bl	800bec8 <ucdr_alignment>
 800a826:	3001      	adds	r0, #1
 800a828:	bd08      	pop	{r3, pc}
 800a82a:	4770      	bx	lr

0800a82c <_ImuCalibration_Response__cdr_serialize>:
 800a82c:	460a      	mov	r2, r1
 800a82e:	b118      	cbz	r0, 800a838 <_ImuCalibration_Response__cdr_serialize+0xc>
 800a830:	7801      	ldrb	r1, [r0, #0]
 800a832:	4610      	mov	r0, r2
 800a834:	f000 b834 	b.w	800a8a0 <ucdr_serialize_bool>
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop

0800a83c <_ImuCalibration_Response__get_serialized_size>:
 800a83c:	b130      	cbz	r0, 800a84c <_ImuCalibration_Response__get_serialized_size+0x10>
 800a83e:	b508      	push	{r3, lr}
 800a840:	2101      	movs	r1, #1
 800a842:	2000      	movs	r0, #0
 800a844:	f001 fb40 	bl	800bec8 <ucdr_alignment>
 800a848:	3001      	adds	r0, #1
 800a84a:	bd08      	pop	{r3, pc}
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop

0800a850 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800a850:	4800      	ldr	r0, [pc, #0]	@ (800a854 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4>)
 800a852:	4770      	bx	lr
 800a854:	2000019c 	.word	0x2000019c

0800a858 <micro_ros_string_utilities_init>:
 800a858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a85c:	b086      	sub	sp, #24
 800a85e:	460f      	mov	r7, r1
 800a860:	4604      	mov	r4, r0
 800a862:	a801      	add	r0, sp, #4
 800a864:	f002 fd40 	bl	800d2e8 <rcutils_get_default_allocator>
 800a868:	4638      	mov	r0, r7
 800a86a:	f7f5 fce3 	bl	8000234 <strlen>
 800a86e:	f100 0801 	add.w	r8, r0, #1
 800a872:	9b01      	ldr	r3, [sp, #4]
 800a874:	9905      	ldr	r1, [sp, #20]
 800a876:	4605      	mov	r5, r0
 800a878:	4640      	mov	r0, r8
 800a87a:	4798      	blx	r3
 800a87c:	4642      	mov	r2, r8
 800a87e:	4606      	mov	r6, r0
 800a880:	2100      	movs	r1, #0
 800a882:	f00e fbe9 	bl	8019058 <memset>
 800a886:	462a      	mov	r2, r5
 800a888:	4639      	mov	r1, r7
 800a88a:	4630      	mov	r0, r6
 800a88c:	f00e fcad 	bl	80191ea <memcpy>
 800a890:	4620      	mov	r0, r4
 800a892:	e9c4 6500 	strd	r6, r5, [r4]
 800a896:	f8c4 8008 	str.w	r8, [r4, #8]
 800a89a:	b006      	add	sp, #24
 800a89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a8a0 <ucdr_serialize_bool>:
 800a8a0:	b538      	push	{r3, r4, r5, lr}
 800a8a2:	460d      	mov	r5, r1
 800a8a4:	2101      	movs	r1, #1
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	f001 fac2 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800a8ac:	b148      	cbz	r0, 800a8c2 <ucdr_serialize_bool+0x22>
 800a8ae:	68a3      	ldr	r3, [r4, #8]
 800a8b0:	701d      	strb	r5, [r3, #0]
 800a8b2:	68a2      	ldr	r2, [r4, #8]
 800a8b4:	6923      	ldr	r3, [r4, #16]
 800a8b6:	2101      	movs	r1, #1
 800a8b8:	440a      	add	r2, r1
 800a8ba:	440b      	add	r3, r1
 800a8bc:	60a2      	str	r2, [r4, #8]
 800a8be:	6123      	str	r3, [r4, #16]
 800a8c0:	7561      	strb	r1, [r4, #21]
 800a8c2:	7da0      	ldrb	r0, [r4, #22]
 800a8c4:	f080 0001 	eor.w	r0, r0, #1
 800a8c8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ca:	bf00      	nop

0800a8cc <ucdr_deserialize_bool>:
 800a8cc:	b538      	push	{r3, r4, r5, lr}
 800a8ce:	460d      	mov	r5, r1
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	f001 faac 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800a8d8:	b160      	cbz	r0, 800a8f4 <ucdr_deserialize_bool+0x28>
 800a8da:	68a2      	ldr	r2, [r4, #8]
 800a8dc:	6923      	ldr	r3, [r4, #16]
 800a8de:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a8e2:	3900      	subs	r1, #0
 800a8e4:	bf18      	it	ne
 800a8e6:	2101      	movne	r1, #1
 800a8e8:	7029      	strb	r1, [r5, #0]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	2101      	movs	r1, #1
 800a8ee:	60a2      	str	r2, [r4, #8]
 800a8f0:	6123      	str	r3, [r4, #16]
 800a8f2:	7561      	strb	r1, [r4, #21]
 800a8f4:	7da0      	ldrb	r0, [r4, #22]
 800a8f6:	f080 0001 	eor.w	r0, r0, #1
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}

0800a8fc <ucdr_serialize_uint8_t>:
 800a8fc:	b538      	push	{r3, r4, r5, lr}
 800a8fe:	460d      	mov	r5, r1
 800a900:	2101      	movs	r1, #1
 800a902:	4604      	mov	r4, r0
 800a904:	f001 fa94 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800a908:	b148      	cbz	r0, 800a91e <ucdr_serialize_uint8_t+0x22>
 800a90a:	68a3      	ldr	r3, [r4, #8]
 800a90c:	701d      	strb	r5, [r3, #0]
 800a90e:	68a2      	ldr	r2, [r4, #8]
 800a910:	6923      	ldr	r3, [r4, #16]
 800a912:	2101      	movs	r1, #1
 800a914:	440a      	add	r2, r1
 800a916:	440b      	add	r3, r1
 800a918:	60a2      	str	r2, [r4, #8]
 800a91a:	6123      	str	r3, [r4, #16]
 800a91c:	7561      	strb	r1, [r4, #21]
 800a91e:	7da0      	ldrb	r0, [r4, #22]
 800a920:	f080 0001 	eor.w	r0, r0, #1
 800a924:	bd38      	pop	{r3, r4, r5, pc}
 800a926:	bf00      	nop

0800a928 <ucdr_deserialize_uint8_t>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	460d      	mov	r5, r1
 800a92c:	2101      	movs	r1, #1
 800a92e:	4604      	mov	r4, r0
 800a930:	f001 fa7e 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800a934:	b150      	cbz	r0, 800a94c <ucdr_deserialize_uint8_t+0x24>
 800a936:	68a3      	ldr	r3, [r4, #8]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	702b      	strb	r3, [r5, #0]
 800a93c:	68a2      	ldr	r2, [r4, #8]
 800a93e:	6923      	ldr	r3, [r4, #16]
 800a940:	2101      	movs	r1, #1
 800a942:	440a      	add	r2, r1
 800a944:	440b      	add	r3, r1
 800a946:	60a2      	str	r2, [r4, #8]
 800a948:	6123      	str	r3, [r4, #16]
 800a94a:	7561      	strb	r1, [r4, #21]
 800a94c:	7da0      	ldrb	r0, [r4, #22]
 800a94e:	f080 0001 	eor.w	r0, r0, #1
 800a952:	bd38      	pop	{r3, r4, r5, pc}

0800a954 <ucdr_serialize_uint16_t>:
 800a954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a958:	b082      	sub	sp, #8
 800a95a:	460b      	mov	r3, r1
 800a95c:	2102      	movs	r1, #2
 800a95e:	4604      	mov	r4, r0
 800a960:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a964:	f001 fab8 	bl	800bed8 <ucdr_buffer_alignment>
 800a968:	4601      	mov	r1, r0
 800a96a:	4620      	mov	r0, r4
 800a96c:	7d67      	ldrb	r7, [r4, #21]
 800a96e:	f001 faf7 	bl	800bf60 <ucdr_advance_buffer>
 800a972:	2102      	movs	r1, #2
 800a974:	4620      	mov	r0, r4
 800a976:	f001 fa4f 	bl	800be18 <ucdr_check_buffer_available_for>
 800a97a:	bb78      	cbnz	r0, 800a9dc <ucdr_serialize_uint16_t+0x88>
 800a97c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a980:	42ab      	cmp	r3, r5
 800a982:	d926      	bls.n	800a9d2 <ucdr_serialize_uint16_t+0x7e>
 800a984:	1b5e      	subs	r6, r3, r5
 800a986:	60a3      	str	r3, [r4, #8]
 800a988:	6923      	ldr	r3, [r4, #16]
 800a98a:	f1c6 0802 	rsb	r8, r6, #2
 800a98e:	4433      	add	r3, r6
 800a990:	6123      	str	r3, [r4, #16]
 800a992:	4641      	mov	r1, r8
 800a994:	4620      	mov	r0, r4
 800a996:	f001 fa4b 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	d03b      	beq.n	800aa16 <ucdr_serialize_uint16_t+0xc2>
 800a99e:	7d23      	ldrb	r3, [r4, #20]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d04a      	beq.n	800aa3a <ucdr_serialize_uint16_t+0xe6>
 800a9a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a9a8:	702b      	strb	r3, [r5, #0]
 800a9aa:	2e00      	cmp	r6, #0
 800a9ac:	d040      	beq.n	800aa30 <ucdr_serialize_uint16_t+0xdc>
 800a9ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a9b2:	706b      	strb	r3, [r5, #1]
 800a9b4:	6923      	ldr	r3, [r4, #16]
 800a9b6:	68a2      	ldr	r2, [r4, #8]
 800a9b8:	7da0      	ldrb	r0, [r4, #22]
 800a9ba:	3302      	adds	r3, #2
 800a9bc:	1b9e      	subs	r6, r3, r6
 800a9be:	4442      	add	r2, r8
 800a9c0:	2302      	movs	r3, #2
 800a9c2:	f080 0001 	eor.w	r0, r0, #1
 800a9c6:	60a2      	str	r2, [r4, #8]
 800a9c8:	6126      	str	r6, [r4, #16]
 800a9ca:	7563      	strb	r3, [r4, #21]
 800a9cc:	b002      	add	sp, #8
 800a9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d2:	2102      	movs	r1, #2
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f001 fa2b 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800a9da:	b190      	cbz	r0, 800aa02 <ucdr_serialize_uint16_t+0xae>
 800a9dc:	7d23      	ldrb	r3, [r4, #20]
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	68a3      	ldr	r3, [r4, #8]
 800a9e2:	d014      	beq.n	800aa0e <ucdr_serialize_uint16_t+0xba>
 800a9e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a9e8:	701a      	strb	r2, [r3, #0]
 800a9ea:	68a3      	ldr	r3, [r4, #8]
 800a9ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a9f0:	705a      	strb	r2, [r3, #1]
 800a9f2:	68a2      	ldr	r2, [r4, #8]
 800a9f4:	6923      	ldr	r3, [r4, #16]
 800a9f6:	3202      	adds	r2, #2
 800a9f8:	3302      	adds	r3, #2
 800a9fa:	2102      	movs	r1, #2
 800a9fc:	60a2      	str	r2, [r4, #8]
 800a9fe:	6123      	str	r3, [r4, #16]
 800aa00:	7561      	strb	r1, [r4, #21]
 800aa02:	7da0      	ldrb	r0, [r4, #22]
 800aa04:	f080 0001 	eor.w	r0, r0, #1
 800aa08:	b002      	add	sp, #8
 800aa0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa0e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aa12:	801a      	strh	r2, [r3, #0]
 800aa14:	e7ed      	b.n	800a9f2 <ucdr_serialize_uint16_t+0x9e>
 800aa16:	68a2      	ldr	r2, [r4, #8]
 800aa18:	6923      	ldr	r3, [r4, #16]
 800aa1a:	7da0      	ldrb	r0, [r4, #22]
 800aa1c:	7567      	strb	r7, [r4, #21]
 800aa1e:	1b92      	subs	r2, r2, r6
 800aa20:	1b9b      	subs	r3, r3, r6
 800aa22:	f080 0001 	eor.w	r0, r0, #1
 800aa26:	60a2      	str	r2, [r4, #8]
 800aa28:	6123      	str	r3, [r4, #16]
 800aa2a:	b002      	add	sp, #8
 800aa2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa30:	68a3      	ldr	r3, [r4, #8]
 800aa32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa36:	701a      	strb	r2, [r3, #0]
 800aa38:	e7bc      	b.n	800a9b4 <ucdr_serialize_uint16_t+0x60>
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	f10d 0506 	add.w	r5, sp, #6
 800aa40:	4629      	mov	r1, r5
 800aa42:	4632      	mov	r2, r6
 800aa44:	f00e fbd1 	bl	80191ea <memcpy>
 800aa48:	68a0      	ldr	r0, [r4, #8]
 800aa4a:	4642      	mov	r2, r8
 800aa4c:	19a9      	adds	r1, r5, r6
 800aa4e:	f00e fbcc 	bl	80191ea <memcpy>
 800aa52:	e7af      	b.n	800a9b4 <ucdr_serialize_uint16_t+0x60>

0800aa54 <ucdr_serialize_endian_uint16_t>:
 800aa54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa58:	b083      	sub	sp, #12
 800aa5a:	460d      	mov	r5, r1
 800aa5c:	2102      	movs	r1, #2
 800aa5e:	4604      	mov	r4, r0
 800aa60:	f8ad 2006 	strh.w	r2, [sp, #6]
 800aa64:	f001 fa38 	bl	800bed8 <ucdr_buffer_alignment>
 800aa68:	4601      	mov	r1, r0
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aa70:	f001 fa76 	bl	800bf60 <ucdr_advance_buffer>
 800aa74:	2102      	movs	r1, #2
 800aa76:	4620      	mov	r0, r4
 800aa78:	f001 f9ce 	bl	800be18 <ucdr_check_buffer_available_for>
 800aa7c:	bb70      	cbnz	r0, 800aadc <ucdr_serialize_endian_uint16_t+0x88>
 800aa7e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800aa82:	42be      	cmp	r6, r7
 800aa84:	d925      	bls.n	800aad2 <ucdr_serialize_endian_uint16_t+0x7e>
 800aa86:	6923      	ldr	r3, [r4, #16]
 800aa88:	60a6      	str	r6, [r4, #8]
 800aa8a:	1bf6      	subs	r6, r6, r7
 800aa8c:	4433      	add	r3, r6
 800aa8e:	f1c6 0902 	rsb	r9, r6, #2
 800aa92:	6123      	str	r3, [r4, #16]
 800aa94:	4649      	mov	r1, r9
 800aa96:	4620      	mov	r0, r4
 800aa98:	f001 f9ca 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d039      	beq.n	800ab14 <ucdr_serialize_endian_uint16_t+0xc0>
 800aaa0:	2d01      	cmp	r5, #1
 800aaa2:	d04a      	beq.n	800ab3a <ucdr_serialize_endian_uint16_t+0xe6>
 800aaa4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aaa8:	703b      	strb	r3, [r7, #0]
 800aaaa:	2e00      	cmp	r6, #0
 800aaac:	d040      	beq.n	800ab30 <ucdr_serialize_endian_uint16_t+0xdc>
 800aaae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aab2:	707b      	strb	r3, [r7, #1]
 800aab4:	6923      	ldr	r3, [r4, #16]
 800aab6:	68a2      	ldr	r2, [r4, #8]
 800aab8:	7da0      	ldrb	r0, [r4, #22]
 800aaba:	3302      	adds	r3, #2
 800aabc:	444a      	add	r2, r9
 800aabe:	1b9b      	subs	r3, r3, r6
 800aac0:	2102      	movs	r1, #2
 800aac2:	f080 0001 	eor.w	r0, r0, #1
 800aac6:	60a2      	str	r2, [r4, #8]
 800aac8:	6123      	str	r3, [r4, #16]
 800aaca:	7561      	strb	r1, [r4, #21]
 800aacc:	b003      	add	sp, #12
 800aace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aad2:	2102      	movs	r1, #2
 800aad4:	4620      	mov	r0, r4
 800aad6:	f001 f9ab 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800aada:	b188      	cbz	r0, 800ab00 <ucdr_serialize_endian_uint16_t+0xac>
 800aadc:	2d01      	cmp	r5, #1
 800aade:	68a3      	ldr	r3, [r4, #8]
 800aae0:	d014      	beq.n	800ab0c <ucdr_serialize_endian_uint16_t+0xb8>
 800aae2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aae6:	701a      	strb	r2, [r3, #0]
 800aae8:	68a3      	ldr	r3, [r4, #8]
 800aaea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aaee:	705a      	strb	r2, [r3, #1]
 800aaf0:	68a2      	ldr	r2, [r4, #8]
 800aaf2:	6923      	ldr	r3, [r4, #16]
 800aaf4:	3202      	adds	r2, #2
 800aaf6:	3302      	adds	r3, #2
 800aaf8:	2102      	movs	r1, #2
 800aafa:	60a2      	str	r2, [r4, #8]
 800aafc:	6123      	str	r3, [r4, #16]
 800aafe:	7561      	strb	r1, [r4, #21]
 800ab00:	7da0      	ldrb	r0, [r4, #22]
 800ab02:	f080 0001 	eor.w	r0, r0, #1
 800ab06:	b003      	add	sp, #12
 800ab08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab0c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ab10:	801a      	strh	r2, [r3, #0]
 800ab12:	e7ed      	b.n	800aaf0 <ucdr_serialize_endian_uint16_t+0x9c>
 800ab14:	68a2      	ldr	r2, [r4, #8]
 800ab16:	6923      	ldr	r3, [r4, #16]
 800ab18:	7da0      	ldrb	r0, [r4, #22]
 800ab1a:	f884 8015 	strb.w	r8, [r4, #21]
 800ab1e:	1b92      	subs	r2, r2, r6
 800ab20:	1b9b      	subs	r3, r3, r6
 800ab22:	f080 0001 	eor.w	r0, r0, #1
 800ab26:	60a2      	str	r2, [r4, #8]
 800ab28:	6123      	str	r3, [r4, #16]
 800ab2a:	b003      	add	sp, #12
 800ab2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab30:	68a3      	ldr	r3, [r4, #8]
 800ab32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ab36:	701a      	strb	r2, [r3, #0]
 800ab38:	e7bc      	b.n	800aab4 <ucdr_serialize_endian_uint16_t+0x60>
 800ab3a:	f10d 0506 	add.w	r5, sp, #6
 800ab3e:	4629      	mov	r1, r5
 800ab40:	4632      	mov	r2, r6
 800ab42:	4638      	mov	r0, r7
 800ab44:	f00e fb51 	bl	80191ea <memcpy>
 800ab48:	68a0      	ldr	r0, [r4, #8]
 800ab4a:	464a      	mov	r2, r9
 800ab4c:	19a9      	adds	r1, r5, r6
 800ab4e:	f00e fb4c 	bl	80191ea <memcpy>
 800ab52:	e7af      	b.n	800aab4 <ucdr_serialize_endian_uint16_t+0x60>

0800ab54 <ucdr_deserialize_uint16_t>:
 800ab54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab58:	460d      	mov	r5, r1
 800ab5a:	2102      	movs	r1, #2
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	f001 f9bb 	bl	800bed8 <ucdr_buffer_alignment>
 800ab62:	4601      	mov	r1, r0
 800ab64:	4620      	mov	r0, r4
 800ab66:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ab6a:	f001 f9f9 	bl	800bf60 <ucdr_advance_buffer>
 800ab6e:	2102      	movs	r1, #2
 800ab70:	4620      	mov	r0, r4
 800ab72:	f001 f951 	bl	800be18 <ucdr_check_buffer_available_for>
 800ab76:	bb60      	cbnz	r0, 800abd2 <ucdr_deserialize_uint16_t+0x7e>
 800ab78:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ab7c:	42be      	cmp	r6, r7
 800ab7e:	d923      	bls.n	800abc8 <ucdr_deserialize_uint16_t+0x74>
 800ab80:	6923      	ldr	r3, [r4, #16]
 800ab82:	60a6      	str	r6, [r4, #8]
 800ab84:	1bf6      	subs	r6, r6, r7
 800ab86:	4433      	add	r3, r6
 800ab88:	f1c6 0902 	rsb	r9, r6, #2
 800ab8c:	6123      	str	r3, [r4, #16]
 800ab8e:	4649      	mov	r1, r9
 800ab90:	4620      	mov	r0, r4
 800ab92:	f001 f94d 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d034      	beq.n	800ac04 <ucdr_deserialize_uint16_t+0xb0>
 800ab9a:	7d23      	ldrb	r3, [r4, #20]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d042      	beq.n	800ac26 <ucdr_deserialize_uint16_t+0xd2>
 800aba0:	787b      	ldrb	r3, [r7, #1]
 800aba2:	702b      	strb	r3, [r5, #0]
 800aba4:	2e00      	cmp	r6, #0
 800aba6:	d03a      	beq.n	800ac1e <ucdr_deserialize_uint16_t+0xca>
 800aba8:	783b      	ldrb	r3, [r7, #0]
 800abaa:	706b      	strb	r3, [r5, #1]
 800abac:	6923      	ldr	r3, [r4, #16]
 800abae:	68a2      	ldr	r2, [r4, #8]
 800abb0:	7da0      	ldrb	r0, [r4, #22]
 800abb2:	2102      	movs	r1, #2
 800abb4:	3302      	adds	r3, #2
 800abb6:	444a      	add	r2, r9
 800abb8:	1b9b      	subs	r3, r3, r6
 800abba:	7561      	strb	r1, [r4, #21]
 800abbc:	60a2      	str	r2, [r4, #8]
 800abbe:	6123      	str	r3, [r4, #16]
 800abc0:	f080 0001 	eor.w	r0, r0, #1
 800abc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abc8:	2102      	movs	r1, #2
 800abca:	4620      	mov	r0, r4
 800abcc:	f001 f930 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800abd0:	b180      	cbz	r0, 800abf4 <ucdr_deserialize_uint16_t+0xa0>
 800abd2:	7d23      	ldrb	r3, [r4, #20]
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	68a3      	ldr	r3, [r4, #8]
 800abd8:	d011      	beq.n	800abfe <ucdr_deserialize_uint16_t+0xaa>
 800abda:	785b      	ldrb	r3, [r3, #1]
 800abdc:	702b      	strb	r3, [r5, #0]
 800abde:	68a3      	ldr	r3, [r4, #8]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	706b      	strb	r3, [r5, #1]
 800abe4:	68a2      	ldr	r2, [r4, #8]
 800abe6:	6923      	ldr	r3, [r4, #16]
 800abe8:	3202      	adds	r2, #2
 800abea:	3302      	adds	r3, #2
 800abec:	2102      	movs	r1, #2
 800abee:	60a2      	str	r2, [r4, #8]
 800abf0:	6123      	str	r3, [r4, #16]
 800abf2:	7561      	strb	r1, [r4, #21]
 800abf4:	7da0      	ldrb	r0, [r4, #22]
 800abf6:	f080 0001 	eor.w	r0, r0, #1
 800abfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	802b      	strh	r3, [r5, #0]
 800ac02:	e7ef      	b.n	800abe4 <ucdr_deserialize_uint16_t+0x90>
 800ac04:	68a2      	ldr	r2, [r4, #8]
 800ac06:	6923      	ldr	r3, [r4, #16]
 800ac08:	7da0      	ldrb	r0, [r4, #22]
 800ac0a:	f884 8015 	strb.w	r8, [r4, #21]
 800ac0e:	1b92      	subs	r2, r2, r6
 800ac10:	1b9b      	subs	r3, r3, r6
 800ac12:	60a2      	str	r2, [r4, #8]
 800ac14:	6123      	str	r3, [r4, #16]
 800ac16:	f080 0001 	eor.w	r0, r0, #1
 800ac1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac1e:	68a3      	ldr	r3, [r4, #8]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	706b      	strb	r3, [r5, #1]
 800ac24:	e7c2      	b.n	800abac <ucdr_deserialize_uint16_t+0x58>
 800ac26:	4639      	mov	r1, r7
 800ac28:	4632      	mov	r2, r6
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	f00e fadd 	bl	80191ea <memcpy>
 800ac30:	68a1      	ldr	r1, [r4, #8]
 800ac32:	464a      	mov	r2, r9
 800ac34:	19a8      	adds	r0, r5, r6
 800ac36:	f00e fad8 	bl	80191ea <memcpy>
 800ac3a:	e7b7      	b.n	800abac <ucdr_deserialize_uint16_t+0x58>

0800ac3c <ucdr_deserialize_endian_uint16_t>:
 800ac3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac40:	460e      	mov	r6, r1
 800ac42:	2102      	movs	r1, #2
 800ac44:	4604      	mov	r4, r0
 800ac46:	4615      	mov	r5, r2
 800ac48:	f001 f946 	bl	800bed8 <ucdr_buffer_alignment>
 800ac4c:	4601      	mov	r1, r0
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ac54:	f001 f984 	bl	800bf60 <ucdr_advance_buffer>
 800ac58:	2102      	movs	r1, #2
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	f001 f8dc 	bl	800be18 <ucdr_check_buffer_available_for>
 800ac60:	bb70      	cbnz	r0, 800acc0 <ucdr_deserialize_endian_uint16_t+0x84>
 800ac62:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ac66:	4547      	cmp	r7, r8
 800ac68:	d925      	bls.n	800acb6 <ucdr_deserialize_endian_uint16_t+0x7a>
 800ac6a:	6923      	ldr	r3, [r4, #16]
 800ac6c:	60a7      	str	r7, [r4, #8]
 800ac6e:	eba7 0708 	sub.w	r7, r7, r8
 800ac72:	443b      	add	r3, r7
 800ac74:	f1c7 0a02 	rsb	sl, r7, #2
 800ac78:	6123      	str	r3, [r4, #16]
 800ac7a:	4651      	mov	r1, sl
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f001 f8d7 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d034      	beq.n	800acf0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800ac86:	2e01      	cmp	r6, #1
 800ac88:	d043      	beq.n	800ad12 <ucdr_deserialize_endian_uint16_t+0xd6>
 800ac8a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ac8e:	702b      	strb	r3, [r5, #0]
 800ac90:	2f00      	cmp	r7, #0
 800ac92:	d03a      	beq.n	800ad0a <ucdr_deserialize_endian_uint16_t+0xce>
 800ac94:	f898 3000 	ldrb.w	r3, [r8]
 800ac98:	706b      	strb	r3, [r5, #1]
 800ac9a:	6923      	ldr	r3, [r4, #16]
 800ac9c:	68a2      	ldr	r2, [r4, #8]
 800ac9e:	7da0      	ldrb	r0, [r4, #22]
 800aca0:	2102      	movs	r1, #2
 800aca2:	3302      	adds	r3, #2
 800aca4:	4452      	add	r2, sl
 800aca6:	1bdb      	subs	r3, r3, r7
 800aca8:	7561      	strb	r1, [r4, #21]
 800acaa:	60a2      	str	r2, [r4, #8]
 800acac:	6123      	str	r3, [r4, #16]
 800acae:	f080 0001 	eor.w	r0, r0, #1
 800acb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb6:	2102      	movs	r1, #2
 800acb8:	4620      	mov	r0, r4
 800acba:	f001 f8b9 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800acbe:	b178      	cbz	r0, 800ace0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800acc0:	2e01      	cmp	r6, #1
 800acc2:	68a3      	ldr	r3, [r4, #8]
 800acc4:	d011      	beq.n	800acea <ucdr_deserialize_endian_uint16_t+0xae>
 800acc6:	785b      	ldrb	r3, [r3, #1]
 800acc8:	702b      	strb	r3, [r5, #0]
 800acca:	68a3      	ldr	r3, [r4, #8]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	706b      	strb	r3, [r5, #1]
 800acd0:	68a2      	ldr	r2, [r4, #8]
 800acd2:	6923      	ldr	r3, [r4, #16]
 800acd4:	3202      	adds	r2, #2
 800acd6:	3302      	adds	r3, #2
 800acd8:	2102      	movs	r1, #2
 800acda:	60a2      	str	r2, [r4, #8]
 800acdc:	6123      	str	r3, [r4, #16]
 800acde:	7561      	strb	r1, [r4, #21]
 800ace0:	7da0      	ldrb	r0, [r4, #22]
 800ace2:	f080 0001 	eor.w	r0, r0, #1
 800ace6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acea:	881b      	ldrh	r3, [r3, #0]
 800acec:	802b      	strh	r3, [r5, #0]
 800acee:	e7ef      	b.n	800acd0 <ucdr_deserialize_endian_uint16_t+0x94>
 800acf0:	68a2      	ldr	r2, [r4, #8]
 800acf2:	6923      	ldr	r3, [r4, #16]
 800acf4:	7da0      	ldrb	r0, [r4, #22]
 800acf6:	f884 9015 	strb.w	r9, [r4, #21]
 800acfa:	1bd2      	subs	r2, r2, r7
 800acfc:	1bdb      	subs	r3, r3, r7
 800acfe:	60a2      	str	r2, [r4, #8]
 800ad00:	6123      	str	r3, [r4, #16]
 800ad02:	f080 0001 	eor.w	r0, r0, #1
 800ad06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad0a:	68a3      	ldr	r3, [r4, #8]
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	706b      	strb	r3, [r5, #1]
 800ad10:	e7c3      	b.n	800ac9a <ucdr_deserialize_endian_uint16_t+0x5e>
 800ad12:	4641      	mov	r1, r8
 800ad14:	463a      	mov	r2, r7
 800ad16:	4628      	mov	r0, r5
 800ad18:	f00e fa67 	bl	80191ea <memcpy>
 800ad1c:	68a1      	ldr	r1, [r4, #8]
 800ad1e:	4652      	mov	r2, sl
 800ad20:	19e8      	adds	r0, r5, r7
 800ad22:	f00e fa62 	bl	80191ea <memcpy>
 800ad26:	e7b8      	b.n	800ac9a <ucdr_deserialize_endian_uint16_t+0x5e>

0800ad28 <ucdr_serialize_uint32_t>:
 800ad28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad2c:	b082      	sub	sp, #8
 800ad2e:	4604      	mov	r4, r0
 800ad30:	9101      	str	r1, [sp, #4]
 800ad32:	2104      	movs	r1, #4
 800ad34:	f001 f8d0 	bl	800bed8 <ucdr_buffer_alignment>
 800ad38:	4601      	mov	r1, r0
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	7d67      	ldrb	r7, [r4, #21]
 800ad3e:	f001 f90f 	bl	800bf60 <ucdr_advance_buffer>
 800ad42:	2104      	movs	r1, #4
 800ad44:	4620      	mov	r0, r4
 800ad46:	f001 f867 	bl	800be18 <ucdr_check_buffer_available_for>
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	d139      	bne.n	800adc2 <ucdr_serialize_uint32_t+0x9a>
 800ad4e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ad52:	42ab      	cmp	r3, r5
 800ad54:	d930      	bls.n	800adb8 <ucdr_serialize_uint32_t+0x90>
 800ad56:	1b5e      	subs	r6, r3, r5
 800ad58:	60a3      	str	r3, [r4, #8]
 800ad5a:	6923      	ldr	r3, [r4, #16]
 800ad5c:	f1c6 0804 	rsb	r8, r6, #4
 800ad60:	4433      	add	r3, r6
 800ad62:	6123      	str	r3, [r4, #16]
 800ad64:	4641      	mov	r1, r8
 800ad66:	4620      	mov	r0, r4
 800ad68:	f001 f862 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d04c      	beq.n	800ae0a <ucdr_serialize_uint32_t+0xe2>
 800ad70:	7d23      	ldrb	r3, [r4, #20]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d063      	beq.n	800ae3e <ucdr_serialize_uint32_t+0x116>
 800ad76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ad7a:	702b      	strb	r3, [r5, #0]
 800ad7c:	2e00      	cmp	r6, #0
 800ad7e:	d051      	beq.n	800ae24 <ucdr_serialize_uint32_t+0xfc>
 800ad80:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ad84:	706b      	strb	r3, [r5, #1]
 800ad86:	2e01      	cmp	r6, #1
 800ad88:	d050      	beq.n	800ae2c <ucdr_serialize_uint32_t+0x104>
 800ad8a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ad8e:	70ab      	strb	r3, [r5, #2]
 800ad90:	2e02      	cmp	r6, #2
 800ad92:	d04f      	beq.n	800ae34 <ucdr_serialize_uint32_t+0x10c>
 800ad94:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ad98:	70eb      	strb	r3, [r5, #3]
 800ad9a:	6923      	ldr	r3, [r4, #16]
 800ad9c:	68a2      	ldr	r2, [r4, #8]
 800ad9e:	7da0      	ldrb	r0, [r4, #22]
 800ada0:	3304      	adds	r3, #4
 800ada2:	1b9e      	subs	r6, r3, r6
 800ada4:	4442      	add	r2, r8
 800ada6:	2304      	movs	r3, #4
 800ada8:	f080 0001 	eor.w	r0, r0, #1
 800adac:	60a2      	str	r2, [r4, #8]
 800adae:	6126      	str	r6, [r4, #16]
 800adb0:	7563      	strb	r3, [r4, #21]
 800adb2:	b002      	add	sp, #8
 800adb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb8:	2104      	movs	r1, #4
 800adba:	4620      	mov	r0, r4
 800adbc:	f001 f838 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800adc0:	b1d0      	cbz	r0, 800adf8 <ucdr_serialize_uint32_t+0xd0>
 800adc2:	7d23      	ldrb	r3, [r4, #20]
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	68a3      	ldr	r3, [r4, #8]
 800adc8:	d01c      	beq.n	800ae04 <ucdr_serialize_uint32_t+0xdc>
 800adca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800adce:	701a      	strb	r2, [r3, #0]
 800add0:	68a3      	ldr	r3, [r4, #8]
 800add2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800add6:	705a      	strb	r2, [r3, #1]
 800add8:	68a3      	ldr	r3, [r4, #8]
 800adda:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800adde:	709a      	strb	r2, [r3, #2]
 800ade0:	68a3      	ldr	r3, [r4, #8]
 800ade2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ade6:	70da      	strb	r2, [r3, #3]
 800ade8:	68a2      	ldr	r2, [r4, #8]
 800adea:	6923      	ldr	r3, [r4, #16]
 800adec:	3204      	adds	r2, #4
 800adee:	3304      	adds	r3, #4
 800adf0:	2104      	movs	r1, #4
 800adf2:	60a2      	str	r2, [r4, #8]
 800adf4:	6123      	str	r3, [r4, #16]
 800adf6:	7561      	strb	r1, [r4, #21]
 800adf8:	7da0      	ldrb	r0, [r4, #22]
 800adfa:	f080 0001 	eor.w	r0, r0, #1
 800adfe:	b002      	add	sp, #8
 800ae00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae04:	9a01      	ldr	r2, [sp, #4]
 800ae06:	601a      	str	r2, [r3, #0]
 800ae08:	e7ee      	b.n	800ade8 <ucdr_serialize_uint32_t+0xc0>
 800ae0a:	68a2      	ldr	r2, [r4, #8]
 800ae0c:	6923      	ldr	r3, [r4, #16]
 800ae0e:	7da0      	ldrb	r0, [r4, #22]
 800ae10:	7567      	strb	r7, [r4, #21]
 800ae12:	1b92      	subs	r2, r2, r6
 800ae14:	1b9b      	subs	r3, r3, r6
 800ae16:	f080 0001 	eor.w	r0, r0, #1
 800ae1a:	60a2      	str	r2, [r4, #8]
 800ae1c:	6123      	str	r3, [r4, #16]
 800ae1e:	b002      	add	sp, #8
 800ae20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae24:	68a3      	ldr	r3, [r4, #8]
 800ae26:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ae2a:	701a      	strb	r2, [r3, #0]
 800ae2c:	68a3      	ldr	r3, [r4, #8]
 800ae2e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ae32:	701a      	strb	r2, [r3, #0]
 800ae34:	68a3      	ldr	r3, [r4, #8]
 800ae36:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ae3a:	701a      	strb	r2, [r3, #0]
 800ae3c:	e7ad      	b.n	800ad9a <ucdr_serialize_uint32_t+0x72>
 800ae3e:	4628      	mov	r0, r5
 800ae40:	ad01      	add	r5, sp, #4
 800ae42:	4629      	mov	r1, r5
 800ae44:	4632      	mov	r2, r6
 800ae46:	f00e f9d0 	bl	80191ea <memcpy>
 800ae4a:	68a0      	ldr	r0, [r4, #8]
 800ae4c:	4642      	mov	r2, r8
 800ae4e:	19a9      	adds	r1, r5, r6
 800ae50:	f00e f9cb 	bl	80191ea <memcpy>
 800ae54:	e7a1      	b.n	800ad9a <ucdr_serialize_uint32_t+0x72>
 800ae56:	bf00      	nop

0800ae58 <ucdr_serialize_endian_uint32_t>:
 800ae58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae5c:	b083      	sub	sp, #12
 800ae5e:	460d      	mov	r5, r1
 800ae60:	2104      	movs	r1, #4
 800ae62:	4604      	mov	r4, r0
 800ae64:	9201      	str	r2, [sp, #4]
 800ae66:	f001 f837 	bl	800bed8 <ucdr_buffer_alignment>
 800ae6a:	4601      	mov	r1, r0
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ae72:	f001 f875 	bl	800bf60 <ucdr_advance_buffer>
 800ae76:	2104      	movs	r1, #4
 800ae78:	4620      	mov	r0, r4
 800ae7a:	f000 ffcd 	bl	800be18 <ucdr_check_buffer_available_for>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d138      	bne.n	800aef4 <ucdr_serialize_endian_uint32_t+0x9c>
 800ae82:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ae86:	42b7      	cmp	r7, r6
 800ae88:	d92f      	bls.n	800aeea <ucdr_serialize_endian_uint32_t+0x92>
 800ae8a:	6923      	ldr	r3, [r4, #16]
 800ae8c:	60a7      	str	r7, [r4, #8]
 800ae8e:	1bbf      	subs	r7, r7, r6
 800ae90:	443b      	add	r3, r7
 800ae92:	f1c7 0904 	rsb	r9, r7, #4
 800ae96:	6123      	str	r3, [r4, #16]
 800ae98:	4649      	mov	r1, r9
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f000 ffc8 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	d04a      	beq.n	800af3a <ucdr_serialize_endian_uint32_t+0xe2>
 800aea4:	2d01      	cmp	r5, #1
 800aea6:	d063      	beq.n	800af70 <ucdr_serialize_endian_uint32_t+0x118>
 800aea8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aeac:	7033      	strb	r3, [r6, #0]
 800aeae:	2f00      	cmp	r7, #0
 800aeb0:	d051      	beq.n	800af56 <ucdr_serialize_endian_uint32_t+0xfe>
 800aeb2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aeb6:	7073      	strb	r3, [r6, #1]
 800aeb8:	2f01      	cmp	r7, #1
 800aeba:	d050      	beq.n	800af5e <ucdr_serialize_endian_uint32_t+0x106>
 800aebc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800aec0:	70b3      	strb	r3, [r6, #2]
 800aec2:	2f02      	cmp	r7, #2
 800aec4:	d04f      	beq.n	800af66 <ucdr_serialize_endian_uint32_t+0x10e>
 800aec6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aeca:	70f3      	strb	r3, [r6, #3]
 800aecc:	6923      	ldr	r3, [r4, #16]
 800aece:	68a2      	ldr	r2, [r4, #8]
 800aed0:	7da0      	ldrb	r0, [r4, #22]
 800aed2:	3304      	adds	r3, #4
 800aed4:	444a      	add	r2, r9
 800aed6:	1bdb      	subs	r3, r3, r7
 800aed8:	2104      	movs	r1, #4
 800aeda:	f080 0001 	eor.w	r0, r0, #1
 800aede:	60a2      	str	r2, [r4, #8]
 800aee0:	6123      	str	r3, [r4, #16]
 800aee2:	7561      	strb	r1, [r4, #21]
 800aee4:	b003      	add	sp, #12
 800aee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aeea:	2104      	movs	r1, #4
 800aeec:	4620      	mov	r0, r4
 800aeee:	f000 ff9f 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800aef2:	b1c8      	cbz	r0, 800af28 <ucdr_serialize_endian_uint32_t+0xd0>
 800aef4:	2d01      	cmp	r5, #1
 800aef6:	68a3      	ldr	r3, [r4, #8]
 800aef8:	d01c      	beq.n	800af34 <ucdr_serialize_endian_uint32_t+0xdc>
 800aefa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aefe:	701a      	strb	r2, [r3, #0]
 800af00:	68a3      	ldr	r3, [r4, #8]
 800af02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af06:	705a      	strb	r2, [r3, #1]
 800af08:	68a3      	ldr	r3, [r4, #8]
 800af0a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800af0e:	709a      	strb	r2, [r3, #2]
 800af10:	68a3      	ldr	r3, [r4, #8]
 800af12:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800af16:	70da      	strb	r2, [r3, #3]
 800af18:	68a2      	ldr	r2, [r4, #8]
 800af1a:	6923      	ldr	r3, [r4, #16]
 800af1c:	3204      	adds	r2, #4
 800af1e:	3304      	adds	r3, #4
 800af20:	2104      	movs	r1, #4
 800af22:	60a2      	str	r2, [r4, #8]
 800af24:	6123      	str	r3, [r4, #16]
 800af26:	7561      	strb	r1, [r4, #21]
 800af28:	7da0      	ldrb	r0, [r4, #22]
 800af2a:	f080 0001 	eor.w	r0, r0, #1
 800af2e:	b003      	add	sp, #12
 800af30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af34:	9a01      	ldr	r2, [sp, #4]
 800af36:	601a      	str	r2, [r3, #0]
 800af38:	e7ee      	b.n	800af18 <ucdr_serialize_endian_uint32_t+0xc0>
 800af3a:	68a2      	ldr	r2, [r4, #8]
 800af3c:	6923      	ldr	r3, [r4, #16]
 800af3e:	7da0      	ldrb	r0, [r4, #22]
 800af40:	f884 8015 	strb.w	r8, [r4, #21]
 800af44:	1bd2      	subs	r2, r2, r7
 800af46:	1bdb      	subs	r3, r3, r7
 800af48:	f080 0001 	eor.w	r0, r0, #1
 800af4c:	60a2      	str	r2, [r4, #8]
 800af4e:	6123      	str	r3, [r4, #16]
 800af50:	b003      	add	sp, #12
 800af52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af56:	68a3      	ldr	r3, [r4, #8]
 800af58:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af5c:	701a      	strb	r2, [r3, #0]
 800af5e:	68a3      	ldr	r3, [r4, #8]
 800af60:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800af64:	701a      	strb	r2, [r3, #0]
 800af66:	68a3      	ldr	r3, [r4, #8]
 800af68:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800af6c:	701a      	strb	r2, [r3, #0]
 800af6e:	e7ad      	b.n	800aecc <ucdr_serialize_endian_uint32_t+0x74>
 800af70:	ad01      	add	r5, sp, #4
 800af72:	4629      	mov	r1, r5
 800af74:	463a      	mov	r2, r7
 800af76:	4630      	mov	r0, r6
 800af78:	f00e f937 	bl	80191ea <memcpy>
 800af7c:	68a0      	ldr	r0, [r4, #8]
 800af7e:	464a      	mov	r2, r9
 800af80:	19e9      	adds	r1, r5, r7
 800af82:	f00e f932 	bl	80191ea <memcpy>
 800af86:	e7a1      	b.n	800aecc <ucdr_serialize_endian_uint32_t+0x74>

0800af88 <ucdr_deserialize_uint32_t>:
 800af88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af8c:	460d      	mov	r5, r1
 800af8e:	2104      	movs	r1, #4
 800af90:	4604      	mov	r4, r0
 800af92:	f000 ffa1 	bl	800bed8 <ucdr_buffer_alignment>
 800af96:	4601      	mov	r1, r0
 800af98:	4620      	mov	r0, r4
 800af9a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800af9e:	f000 ffdf 	bl	800bf60 <ucdr_advance_buffer>
 800afa2:	2104      	movs	r1, #4
 800afa4:	4620      	mov	r0, r4
 800afa6:	f000 ff37 	bl	800be18 <ucdr_check_buffer_available_for>
 800afaa:	2800      	cmp	r0, #0
 800afac:	d138      	bne.n	800b020 <ucdr_deserialize_uint32_t+0x98>
 800afae:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800afb2:	42b7      	cmp	r7, r6
 800afb4:	d92f      	bls.n	800b016 <ucdr_deserialize_uint32_t+0x8e>
 800afb6:	6923      	ldr	r3, [r4, #16]
 800afb8:	60a7      	str	r7, [r4, #8]
 800afba:	1bbf      	subs	r7, r7, r6
 800afbc:	443b      	add	r3, r7
 800afbe:	f1c7 0904 	rsb	r9, r7, #4
 800afc2:	6123      	str	r3, [r4, #16]
 800afc4:	4649      	mov	r1, r9
 800afc6:	4620      	mov	r0, r4
 800afc8:	f000 ff32 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800afcc:	2800      	cmp	r0, #0
 800afce:	d046      	beq.n	800b05e <ucdr_deserialize_uint32_t+0xd6>
 800afd0:	7d23      	ldrb	r3, [r4, #20]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d05c      	beq.n	800b090 <ucdr_deserialize_uint32_t+0x108>
 800afd6:	78f3      	ldrb	r3, [r6, #3]
 800afd8:	702b      	strb	r3, [r5, #0]
 800afda:	2f00      	cmp	r7, #0
 800afdc:	d04c      	beq.n	800b078 <ucdr_deserialize_uint32_t+0xf0>
 800afde:	78b3      	ldrb	r3, [r6, #2]
 800afe0:	706b      	strb	r3, [r5, #1]
 800afe2:	2f01      	cmp	r7, #1
 800afe4:	f105 0302 	add.w	r3, r5, #2
 800afe8:	d04a      	beq.n	800b080 <ucdr_deserialize_uint32_t+0xf8>
 800afea:	7873      	ldrb	r3, [r6, #1]
 800afec:	70ab      	strb	r3, [r5, #2]
 800afee:	2f02      	cmp	r7, #2
 800aff0:	f105 0303 	add.w	r3, r5, #3
 800aff4:	d048      	beq.n	800b088 <ucdr_deserialize_uint32_t+0x100>
 800aff6:	7833      	ldrb	r3, [r6, #0]
 800aff8:	70eb      	strb	r3, [r5, #3]
 800affa:	6923      	ldr	r3, [r4, #16]
 800affc:	68a2      	ldr	r2, [r4, #8]
 800affe:	7da0      	ldrb	r0, [r4, #22]
 800b000:	2104      	movs	r1, #4
 800b002:	3304      	adds	r3, #4
 800b004:	444a      	add	r2, r9
 800b006:	1bdb      	subs	r3, r3, r7
 800b008:	7561      	strb	r1, [r4, #21]
 800b00a:	60a2      	str	r2, [r4, #8]
 800b00c:	6123      	str	r3, [r4, #16]
 800b00e:	f080 0001 	eor.w	r0, r0, #1
 800b012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b016:	2104      	movs	r1, #4
 800b018:	4620      	mov	r0, r4
 800b01a:	f000 ff09 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800b01e:	b1b0      	cbz	r0, 800b04e <ucdr_deserialize_uint32_t+0xc6>
 800b020:	7d23      	ldrb	r3, [r4, #20]
 800b022:	2b01      	cmp	r3, #1
 800b024:	68a3      	ldr	r3, [r4, #8]
 800b026:	d017      	beq.n	800b058 <ucdr_deserialize_uint32_t+0xd0>
 800b028:	78db      	ldrb	r3, [r3, #3]
 800b02a:	702b      	strb	r3, [r5, #0]
 800b02c:	68a3      	ldr	r3, [r4, #8]
 800b02e:	789b      	ldrb	r3, [r3, #2]
 800b030:	706b      	strb	r3, [r5, #1]
 800b032:	68a3      	ldr	r3, [r4, #8]
 800b034:	785b      	ldrb	r3, [r3, #1]
 800b036:	70ab      	strb	r3, [r5, #2]
 800b038:	68a3      	ldr	r3, [r4, #8]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	70eb      	strb	r3, [r5, #3]
 800b03e:	68a2      	ldr	r2, [r4, #8]
 800b040:	6923      	ldr	r3, [r4, #16]
 800b042:	3204      	adds	r2, #4
 800b044:	3304      	adds	r3, #4
 800b046:	2104      	movs	r1, #4
 800b048:	60a2      	str	r2, [r4, #8]
 800b04a:	6123      	str	r3, [r4, #16]
 800b04c:	7561      	strb	r1, [r4, #21]
 800b04e:	7da0      	ldrb	r0, [r4, #22]
 800b050:	f080 0001 	eor.w	r0, r0, #1
 800b054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	602b      	str	r3, [r5, #0]
 800b05c:	e7ef      	b.n	800b03e <ucdr_deserialize_uint32_t+0xb6>
 800b05e:	68a2      	ldr	r2, [r4, #8]
 800b060:	6923      	ldr	r3, [r4, #16]
 800b062:	7da0      	ldrb	r0, [r4, #22]
 800b064:	f884 8015 	strb.w	r8, [r4, #21]
 800b068:	1bd2      	subs	r2, r2, r7
 800b06a:	1bdb      	subs	r3, r3, r7
 800b06c:	60a2      	str	r2, [r4, #8]
 800b06e:	6123      	str	r3, [r4, #16]
 800b070:	f080 0001 	eor.w	r0, r0, #1
 800b074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b078:	68a3      	ldr	r3, [r4, #8]
 800b07a:	789b      	ldrb	r3, [r3, #2]
 800b07c:	706b      	strb	r3, [r5, #1]
 800b07e:	1cab      	adds	r3, r5, #2
 800b080:	68a2      	ldr	r2, [r4, #8]
 800b082:	7852      	ldrb	r2, [r2, #1]
 800b084:	f803 2b01 	strb.w	r2, [r3], #1
 800b088:	68a2      	ldr	r2, [r4, #8]
 800b08a:	7812      	ldrb	r2, [r2, #0]
 800b08c:	701a      	strb	r2, [r3, #0]
 800b08e:	e7b4      	b.n	800affa <ucdr_deserialize_uint32_t+0x72>
 800b090:	4631      	mov	r1, r6
 800b092:	463a      	mov	r2, r7
 800b094:	4628      	mov	r0, r5
 800b096:	f00e f8a8 	bl	80191ea <memcpy>
 800b09a:	68a1      	ldr	r1, [r4, #8]
 800b09c:	464a      	mov	r2, r9
 800b09e:	19e8      	adds	r0, r5, r7
 800b0a0:	f00e f8a3 	bl	80191ea <memcpy>
 800b0a4:	e7a9      	b.n	800affa <ucdr_deserialize_uint32_t+0x72>
 800b0a6:	bf00      	nop

0800b0a8 <ucdr_deserialize_endian_uint32_t>:
 800b0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ac:	460e      	mov	r6, r1
 800b0ae:	2104      	movs	r1, #4
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	4615      	mov	r5, r2
 800b0b4:	f000 ff10 	bl	800bed8 <ucdr_buffer_alignment>
 800b0b8:	4601      	mov	r1, r0
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b0c0:	f000 ff4e 	bl	800bf60 <ucdr_advance_buffer>
 800b0c4:	2104      	movs	r1, #4
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f000 fea6 	bl	800be18 <ucdr_check_buffer_available_for>
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	d13c      	bne.n	800b14a <ucdr_deserialize_endian_uint32_t+0xa2>
 800b0d0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b0d4:	42bb      	cmp	r3, r7
 800b0d6:	d933      	bls.n	800b140 <ucdr_deserialize_endian_uint32_t+0x98>
 800b0d8:	eba3 0807 	sub.w	r8, r3, r7
 800b0dc:	60a3      	str	r3, [r4, #8]
 800b0de:	6923      	ldr	r3, [r4, #16]
 800b0e0:	f1c8 0a04 	rsb	sl, r8, #4
 800b0e4:	4443      	add	r3, r8
 800b0e6:	6123      	str	r3, [r4, #16]
 800b0e8:	4651      	mov	r1, sl
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f000 fea0 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	d048      	beq.n	800b186 <ucdr_deserialize_endian_uint32_t+0xde>
 800b0f4:	2e01      	cmp	r6, #1
 800b0f6:	d061      	beq.n	800b1bc <ucdr_deserialize_endian_uint32_t+0x114>
 800b0f8:	78fb      	ldrb	r3, [r7, #3]
 800b0fa:	702b      	strb	r3, [r5, #0]
 800b0fc:	f1b8 0f00 	cmp.w	r8, #0
 800b100:	d050      	beq.n	800b1a4 <ucdr_deserialize_endian_uint32_t+0xfc>
 800b102:	78bb      	ldrb	r3, [r7, #2]
 800b104:	706b      	strb	r3, [r5, #1]
 800b106:	f1b8 0f01 	cmp.w	r8, #1
 800b10a:	f105 0302 	add.w	r3, r5, #2
 800b10e:	d04d      	beq.n	800b1ac <ucdr_deserialize_endian_uint32_t+0x104>
 800b110:	787b      	ldrb	r3, [r7, #1]
 800b112:	70ab      	strb	r3, [r5, #2]
 800b114:	f1b8 0f02 	cmp.w	r8, #2
 800b118:	f105 0303 	add.w	r3, r5, #3
 800b11c:	d04a      	beq.n	800b1b4 <ucdr_deserialize_endian_uint32_t+0x10c>
 800b11e:	783b      	ldrb	r3, [r7, #0]
 800b120:	70eb      	strb	r3, [r5, #3]
 800b122:	6923      	ldr	r3, [r4, #16]
 800b124:	68a2      	ldr	r2, [r4, #8]
 800b126:	7da0      	ldrb	r0, [r4, #22]
 800b128:	2104      	movs	r1, #4
 800b12a:	3304      	adds	r3, #4
 800b12c:	4452      	add	r2, sl
 800b12e:	eba3 0308 	sub.w	r3, r3, r8
 800b132:	7561      	strb	r1, [r4, #21]
 800b134:	60a2      	str	r2, [r4, #8]
 800b136:	6123      	str	r3, [r4, #16]
 800b138:	f080 0001 	eor.w	r0, r0, #1
 800b13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b140:	2104      	movs	r1, #4
 800b142:	4620      	mov	r0, r4
 800b144:	f000 fe74 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800b148:	b1a8      	cbz	r0, 800b176 <ucdr_deserialize_endian_uint32_t+0xce>
 800b14a:	2e01      	cmp	r6, #1
 800b14c:	68a3      	ldr	r3, [r4, #8]
 800b14e:	d017      	beq.n	800b180 <ucdr_deserialize_endian_uint32_t+0xd8>
 800b150:	78db      	ldrb	r3, [r3, #3]
 800b152:	702b      	strb	r3, [r5, #0]
 800b154:	68a3      	ldr	r3, [r4, #8]
 800b156:	789b      	ldrb	r3, [r3, #2]
 800b158:	706b      	strb	r3, [r5, #1]
 800b15a:	68a3      	ldr	r3, [r4, #8]
 800b15c:	785b      	ldrb	r3, [r3, #1]
 800b15e:	70ab      	strb	r3, [r5, #2]
 800b160:	68a3      	ldr	r3, [r4, #8]
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	70eb      	strb	r3, [r5, #3]
 800b166:	68a2      	ldr	r2, [r4, #8]
 800b168:	6923      	ldr	r3, [r4, #16]
 800b16a:	3204      	adds	r2, #4
 800b16c:	3304      	adds	r3, #4
 800b16e:	2104      	movs	r1, #4
 800b170:	60a2      	str	r2, [r4, #8]
 800b172:	6123      	str	r3, [r4, #16]
 800b174:	7561      	strb	r1, [r4, #21]
 800b176:	7da0      	ldrb	r0, [r4, #22]
 800b178:	f080 0001 	eor.w	r0, r0, #1
 800b17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	602b      	str	r3, [r5, #0]
 800b184:	e7ef      	b.n	800b166 <ucdr_deserialize_endian_uint32_t+0xbe>
 800b186:	68a2      	ldr	r2, [r4, #8]
 800b188:	6923      	ldr	r3, [r4, #16]
 800b18a:	7da0      	ldrb	r0, [r4, #22]
 800b18c:	f884 9015 	strb.w	r9, [r4, #21]
 800b190:	eba2 0208 	sub.w	r2, r2, r8
 800b194:	eba3 0308 	sub.w	r3, r3, r8
 800b198:	60a2      	str	r2, [r4, #8]
 800b19a:	6123      	str	r3, [r4, #16]
 800b19c:	f080 0001 	eor.w	r0, r0, #1
 800b1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1a4:	68a3      	ldr	r3, [r4, #8]
 800b1a6:	789b      	ldrb	r3, [r3, #2]
 800b1a8:	706b      	strb	r3, [r5, #1]
 800b1aa:	1cab      	adds	r3, r5, #2
 800b1ac:	68a2      	ldr	r2, [r4, #8]
 800b1ae:	7852      	ldrb	r2, [r2, #1]
 800b1b0:	f803 2b01 	strb.w	r2, [r3], #1
 800b1b4:	68a2      	ldr	r2, [r4, #8]
 800b1b6:	7812      	ldrb	r2, [r2, #0]
 800b1b8:	701a      	strb	r2, [r3, #0]
 800b1ba:	e7b2      	b.n	800b122 <ucdr_deserialize_endian_uint32_t+0x7a>
 800b1bc:	4639      	mov	r1, r7
 800b1be:	4642      	mov	r2, r8
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	f00e f812 	bl	80191ea <memcpy>
 800b1c6:	68a1      	ldr	r1, [r4, #8]
 800b1c8:	4652      	mov	r2, sl
 800b1ca:	eb05 0008 	add.w	r0, r5, r8
 800b1ce:	f00e f80c 	bl	80191ea <memcpy>
 800b1d2:	e7a6      	b.n	800b122 <ucdr_deserialize_endian_uint32_t+0x7a>

0800b1d4 <ucdr_serialize_uint64_t>:
 800b1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d8:	2108      	movs	r1, #8
 800b1da:	b082      	sub	sp, #8
 800b1dc:	4604      	mov	r4, r0
 800b1de:	e9cd 2300 	strd	r2, r3, [sp]
 800b1e2:	f000 fe79 	bl	800bed8 <ucdr_buffer_alignment>
 800b1e6:	4601      	mov	r1, r0
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	7d67      	ldrb	r7, [r4, #21]
 800b1ec:	f000 feb8 	bl	800bf60 <ucdr_advance_buffer>
 800b1f0:	2108      	movs	r1, #8
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f000 fe10 	bl	800be18 <ucdr_check_buffer_available_for>
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d14e      	bne.n	800b29a <ucdr_serialize_uint64_t+0xc6>
 800b1fc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b200:	42ab      	cmp	r3, r5
 800b202:	d945      	bls.n	800b290 <ucdr_serialize_uint64_t+0xbc>
 800b204:	1b5e      	subs	r6, r3, r5
 800b206:	60a3      	str	r3, [r4, #8]
 800b208:	6923      	ldr	r3, [r4, #16]
 800b20a:	f1c6 0808 	rsb	r8, r6, #8
 800b20e:	4433      	add	r3, r6
 800b210:	6123      	str	r3, [r4, #16]
 800b212:	4641      	mov	r1, r8
 800b214:	4620      	mov	r0, r4
 800b216:	f000 fe0b 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800b21a:	2800      	cmp	r0, #0
 800b21c:	d074      	beq.n	800b308 <ucdr_serialize_uint64_t+0x134>
 800b21e:	7d23      	ldrb	r3, [r4, #20]
 800b220:	2b01      	cmp	r3, #1
 800b222:	f000 809b 	beq.w	800b35c <ucdr_serialize_uint64_t+0x188>
 800b226:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b22a:	702b      	strb	r3, [r5, #0]
 800b22c:	2e00      	cmp	r6, #0
 800b22e:	d078      	beq.n	800b322 <ucdr_serialize_uint64_t+0x14e>
 800b230:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b234:	706b      	strb	r3, [r5, #1]
 800b236:	2e01      	cmp	r6, #1
 800b238:	d077      	beq.n	800b32a <ucdr_serialize_uint64_t+0x156>
 800b23a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b23e:	70ab      	strb	r3, [r5, #2]
 800b240:	2e02      	cmp	r6, #2
 800b242:	d076      	beq.n	800b332 <ucdr_serialize_uint64_t+0x15e>
 800b244:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b248:	70eb      	strb	r3, [r5, #3]
 800b24a:	2e03      	cmp	r6, #3
 800b24c:	d075      	beq.n	800b33a <ucdr_serialize_uint64_t+0x166>
 800b24e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b252:	712b      	strb	r3, [r5, #4]
 800b254:	2e04      	cmp	r6, #4
 800b256:	d074      	beq.n	800b342 <ucdr_serialize_uint64_t+0x16e>
 800b258:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b25c:	716b      	strb	r3, [r5, #5]
 800b25e:	2e05      	cmp	r6, #5
 800b260:	d073      	beq.n	800b34a <ucdr_serialize_uint64_t+0x176>
 800b262:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b266:	71ab      	strb	r3, [r5, #6]
 800b268:	2e06      	cmp	r6, #6
 800b26a:	d072      	beq.n	800b352 <ucdr_serialize_uint64_t+0x17e>
 800b26c:	f89d 3000 	ldrb.w	r3, [sp]
 800b270:	71eb      	strb	r3, [r5, #7]
 800b272:	6923      	ldr	r3, [r4, #16]
 800b274:	68a2      	ldr	r2, [r4, #8]
 800b276:	7da0      	ldrb	r0, [r4, #22]
 800b278:	3308      	adds	r3, #8
 800b27a:	1b9e      	subs	r6, r3, r6
 800b27c:	4442      	add	r2, r8
 800b27e:	2308      	movs	r3, #8
 800b280:	f080 0001 	eor.w	r0, r0, #1
 800b284:	60a2      	str	r2, [r4, #8]
 800b286:	6126      	str	r6, [r4, #16]
 800b288:	7563      	strb	r3, [r4, #21]
 800b28a:	b002      	add	sp, #8
 800b28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b290:	2108      	movs	r1, #8
 800b292:	4620      	mov	r0, r4
 800b294:	f000 fdcc 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800b298:	b350      	cbz	r0, 800b2f0 <ucdr_serialize_uint64_t+0x11c>
 800b29a:	7d23      	ldrb	r3, [r4, #20]
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d02d      	beq.n	800b2fc <ucdr_serialize_uint64_t+0x128>
 800b2a0:	68a3      	ldr	r3, [r4, #8]
 800b2a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b2a6:	701a      	strb	r2, [r3, #0]
 800b2a8:	68a3      	ldr	r3, [r4, #8]
 800b2aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b2ae:	705a      	strb	r2, [r3, #1]
 800b2b0:	68a3      	ldr	r3, [r4, #8]
 800b2b2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b2b6:	709a      	strb	r2, [r3, #2]
 800b2b8:	68a3      	ldr	r3, [r4, #8]
 800b2ba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b2be:	70da      	strb	r2, [r3, #3]
 800b2c0:	68a3      	ldr	r3, [r4, #8]
 800b2c2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b2c6:	711a      	strb	r2, [r3, #4]
 800b2c8:	68a3      	ldr	r3, [r4, #8]
 800b2ca:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b2ce:	715a      	strb	r2, [r3, #5]
 800b2d0:	68a3      	ldr	r3, [r4, #8]
 800b2d2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b2d6:	719a      	strb	r2, [r3, #6]
 800b2d8:	68a3      	ldr	r3, [r4, #8]
 800b2da:	f89d 2000 	ldrb.w	r2, [sp]
 800b2de:	71da      	strb	r2, [r3, #7]
 800b2e0:	68a2      	ldr	r2, [r4, #8]
 800b2e2:	6923      	ldr	r3, [r4, #16]
 800b2e4:	3208      	adds	r2, #8
 800b2e6:	3308      	adds	r3, #8
 800b2e8:	2108      	movs	r1, #8
 800b2ea:	60a2      	str	r2, [r4, #8]
 800b2ec:	6123      	str	r3, [r4, #16]
 800b2ee:	7561      	strb	r1, [r4, #21]
 800b2f0:	7da0      	ldrb	r0, [r4, #22]
 800b2f2:	f080 0001 	eor.w	r0, r0, #1
 800b2f6:	b002      	add	sp, #8
 800b2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2fc:	466b      	mov	r3, sp
 800b2fe:	cb03      	ldmia	r3!, {r0, r1}
 800b300:	68a3      	ldr	r3, [r4, #8]
 800b302:	6018      	str	r0, [r3, #0]
 800b304:	6059      	str	r1, [r3, #4]
 800b306:	e7eb      	b.n	800b2e0 <ucdr_serialize_uint64_t+0x10c>
 800b308:	68a2      	ldr	r2, [r4, #8]
 800b30a:	6923      	ldr	r3, [r4, #16]
 800b30c:	7da0      	ldrb	r0, [r4, #22]
 800b30e:	7567      	strb	r7, [r4, #21]
 800b310:	1b92      	subs	r2, r2, r6
 800b312:	1b9b      	subs	r3, r3, r6
 800b314:	f080 0001 	eor.w	r0, r0, #1
 800b318:	60a2      	str	r2, [r4, #8]
 800b31a:	6123      	str	r3, [r4, #16]
 800b31c:	b002      	add	sp, #8
 800b31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b322:	68a3      	ldr	r3, [r4, #8]
 800b324:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b328:	701a      	strb	r2, [r3, #0]
 800b32a:	68a3      	ldr	r3, [r4, #8]
 800b32c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b330:	701a      	strb	r2, [r3, #0]
 800b332:	68a3      	ldr	r3, [r4, #8]
 800b334:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b338:	701a      	strb	r2, [r3, #0]
 800b33a:	68a3      	ldr	r3, [r4, #8]
 800b33c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b340:	701a      	strb	r2, [r3, #0]
 800b342:	68a3      	ldr	r3, [r4, #8]
 800b344:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b348:	701a      	strb	r2, [r3, #0]
 800b34a:	68a3      	ldr	r3, [r4, #8]
 800b34c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b350:	701a      	strb	r2, [r3, #0]
 800b352:	68a3      	ldr	r3, [r4, #8]
 800b354:	f89d 2000 	ldrb.w	r2, [sp]
 800b358:	701a      	strb	r2, [r3, #0]
 800b35a:	e78a      	b.n	800b272 <ucdr_serialize_uint64_t+0x9e>
 800b35c:	4628      	mov	r0, r5
 800b35e:	466d      	mov	r5, sp
 800b360:	4629      	mov	r1, r5
 800b362:	4632      	mov	r2, r6
 800b364:	f00d ff41 	bl	80191ea <memcpy>
 800b368:	68a0      	ldr	r0, [r4, #8]
 800b36a:	4642      	mov	r2, r8
 800b36c:	19a9      	adds	r1, r5, r6
 800b36e:	f00d ff3c 	bl	80191ea <memcpy>
 800b372:	e77e      	b.n	800b272 <ucdr_serialize_uint64_t+0x9e>

0800b374 <ucdr_serialize_int16_t>:
 800b374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b378:	b082      	sub	sp, #8
 800b37a:	460b      	mov	r3, r1
 800b37c:	2102      	movs	r1, #2
 800b37e:	4604      	mov	r4, r0
 800b380:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b384:	f000 fda8 	bl	800bed8 <ucdr_buffer_alignment>
 800b388:	4601      	mov	r1, r0
 800b38a:	4620      	mov	r0, r4
 800b38c:	7d67      	ldrb	r7, [r4, #21]
 800b38e:	f000 fde7 	bl	800bf60 <ucdr_advance_buffer>
 800b392:	2102      	movs	r1, #2
 800b394:	4620      	mov	r0, r4
 800b396:	f000 fd3f 	bl	800be18 <ucdr_check_buffer_available_for>
 800b39a:	bb78      	cbnz	r0, 800b3fc <ucdr_serialize_int16_t+0x88>
 800b39c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b3a0:	42ab      	cmp	r3, r5
 800b3a2:	d926      	bls.n	800b3f2 <ucdr_serialize_int16_t+0x7e>
 800b3a4:	1b5e      	subs	r6, r3, r5
 800b3a6:	60a3      	str	r3, [r4, #8]
 800b3a8:	6923      	ldr	r3, [r4, #16]
 800b3aa:	f1c6 0802 	rsb	r8, r6, #2
 800b3ae:	4433      	add	r3, r6
 800b3b0:	6123      	str	r3, [r4, #16]
 800b3b2:	4641      	mov	r1, r8
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f000 fd3b 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	d03b      	beq.n	800b436 <ucdr_serialize_int16_t+0xc2>
 800b3be:	7d23      	ldrb	r3, [r4, #20]
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d04a      	beq.n	800b45a <ucdr_serialize_int16_t+0xe6>
 800b3c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b3c8:	702b      	strb	r3, [r5, #0]
 800b3ca:	2e00      	cmp	r6, #0
 800b3cc:	d040      	beq.n	800b450 <ucdr_serialize_int16_t+0xdc>
 800b3ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b3d2:	706b      	strb	r3, [r5, #1]
 800b3d4:	6923      	ldr	r3, [r4, #16]
 800b3d6:	68a2      	ldr	r2, [r4, #8]
 800b3d8:	7da0      	ldrb	r0, [r4, #22]
 800b3da:	3302      	adds	r3, #2
 800b3dc:	1b9e      	subs	r6, r3, r6
 800b3de:	4442      	add	r2, r8
 800b3e0:	2302      	movs	r3, #2
 800b3e2:	f080 0001 	eor.w	r0, r0, #1
 800b3e6:	60a2      	str	r2, [r4, #8]
 800b3e8:	6126      	str	r6, [r4, #16]
 800b3ea:	7563      	strb	r3, [r4, #21]
 800b3ec:	b002      	add	sp, #8
 800b3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3f2:	2102      	movs	r1, #2
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f000 fd1b 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800b3fa:	b190      	cbz	r0, 800b422 <ucdr_serialize_int16_t+0xae>
 800b3fc:	7d23      	ldrb	r3, [r4, #20]
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	68a3      	ldr	r3, [r4, #8]
 800b402:	d014      	beq.n	800b42e <ucdr_serialize_int16_t+0xba>
 800b404:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b408:	701a      	strb	r2, [r3, #0]
 800b40a:	68a3      	ldr	r3, [r4, #8]
 800b40c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b410:	705a      	strb	r2, [r3, #1]
 800b412:	68a2      	ldr	r2, [r4, #8]
 800b414:	6923      	ldr	r3, [r4, #16]
 800b416:	3202      	adds	r2, #2
 800b418:	3302      	adds	r3, #2
 800b41a:	2102      	movs	r1, #2
 800b41c:	60a2      	str	r2, [r4, #8]
 800b41e:	6123      	str	r3, [r4, #16]
 800b420:	7561      	strb	r1, [r4, #21]
 800b422:	7da0      	ldrb	r0, [r4, #22]
 800b424:	f080 0001 	eor.w	r0, r0, #1
 800b428:	b002      	add	sp, #8
 800b42a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b42e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b432:	801a      	strh	r2, [r3, #0]
 800b434:	e7ed      	b.n	800b412 <ucdr_serialize_int16_t+0x9e>
 800b436:	68a2      	ldr	r2, [r4, #8]
 800b438:	6923      	ldr	r3, [r4, #16]
 800b43a:	7da0      	ldrb	r0, [r4, #22]
 800b43c:	7567      	strb	r7, [r4, #21]
 800b43e:	1b92      	subs	r2, r2, r6
 800b440:	1b9b      	subs	r3, r3, r6
 800b442:	f080 0001 	eor.w	r0, r0, #1
 800b446:	60a2      	str	r2, [r4, #8]
 800b448:	6123      	str	r3, [r4, #16]
 800b44a:	b002      	add	sp, #8
 800b44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b450:	68a3      	ldr	r3, [r4, #8]
 800b452:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b456:	701a      	strb	r2, [r3, #0]
 800b458:	e7bc      	b.n	800b3d4 <ucdr_serialize_int16_t+0x60>
 800b45a:	4628      	mov	r0, r5
 800b45c:	f10d 0506 	add.w	r5, sp, #6
 800b460:	4629      	mov	r1, r5
 800b462:	4632      	mov	r2, r6
 800b464:	f00d fec1 	bl	80191ea <memcpy>
 800b468:	68a0      	ldr	r0, [r4, #8]
 800b46a:	4642      	mov	r2, r8
 800b46c:	19a9      	adds	r1, r5, r6
 800b46e:	f00d febc 	bl	80191ea <memcpy>
 800b472:	e7af      	b.n	800b3d4 <ucdr_serialize_int16_t+0x60>

0800b474 <ucdr_deserialize_int16_t>:
 800b474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b478:	460d      	mov	r5, r1
 800b47a:	2102      	movs	r1, #2
 800b47c:	4604      	mov	r4, r0
 800b47e:	f000 fd2b 	bl	800bed8 <ucdr_buffer_alignment>
 800b482:	4601      	mov	r1, r0
 800b484:	4620      	mov	r0, r4
 800b486:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b48a:	f000 fd69 	bl	800bf60 <ucdr_advance_buffer>
 800b48e:	2102      	movs	r1, #2
 800b490:	4620      	mov	r0, r4
 800b492:	f000 fcc1 	bl	800be18 <ucdr_check_buffer_available_for>
 800b496:	bb60      	cbnz	r0, 800b4f2 <ucdr_deserialize_int16_t+0x7e>
 800b498:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b49c:	42be      	cmp	r6, r7
 800b49e:	d923      	bls.n	800b4e8 <ucdr_deserialize_int16_t+0x74>
 800b4a0:	6923      	ldr	r3, [r4, #16]
 800b4a2:	60a6      	str	r6, [r4, #8]
 800b4a4:	1bf6      	subs	r6, r6, r7
 800b4a6:	4433      	add	r3, r6
 800b4a8:	f1c6 0902 	rsb	r9, r6, #2
 800b4ac:	6123      	str	r3, [r4, #16]
 800b4ae:	4649      	mov	r1, r9
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f000 fcbd 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	d034      	beq.n	800b524 <ucdr_deserialize_int16_t+0xb0>
 800b4ba:	7d23      	ldrb	r3, [r4, #20]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d042      	beq.n	800b546 <ucdr_deserialize_int16_t+0xd2>
 800b4c0:	787b      	ldrb	r3, [r7, #1]
 800b4c2:	702b      	strb	r3, [r5, #0]
 800b4c4:	2e00      	cmp	r6, #0
 800b4c6:	d03a      	beq.n	800b53e <ucdr_deserialize_int16_t+0xca>
 800b4c8:	783b      	ldrb	r3, [r7, #0]
 800b4ca:	706b      	strb	r3, [r5, #1]
 800b4cc:	6923      	ldr	r3, [r4, #16]
 800b4ce:	68a2      	ldr	r2, [r4, #8]
 800b4d0:	7da0      	ldrb	r0, [r4, #22]
 800b4d2:	2102      	movs	r1, #2
 800b4d4:	3302      	adds	r3, #2
 800b4d6:	444a      	add	r2, r9
 800b4d8:	1b9b      	subs	r3, r3, r6
 800b4da:	7561      	strb	r1, [r4, #21]
 800b4dc:	60a2      	str	r2, [r4, #8]
 800b4de:	6123      	str	r3, [r4, #16]
 800b4e0:	f080 0001 	eor.w	r0, r0, #1
 800b4e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4e8:	2102      	movs	r1, #2
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f000 fca0 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800b4f0:	b180      	cbz	r0, 800b514 <ucdr_deserialize_int16_t+0xa0>
 800b4f2:	7d23      	ldrb	r3, [r4, #20]
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	68a3      	ldr	r3, [r4, #8]
 800b4f8:	d011      	beq.n	800b51e <ucdr_deserialize_int16_t+0xaa>
 800b4fa:	785b      	ldrb	r3, [r3, #1]
 800b4fc:	702b      	strb	r3, [r5, #0]
 800b4fe:	68a3      	ldr	r3, [r4, #8]
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	706b      	strb	r3, [r5, #1]
 800b504:	68a2      	ldr	r2, [r4, #8]
 800b506:	6923      	ldr	r3, [r4, #16]
 800b508:	3202      	adds	r2, #2
 800b50a:	3302      	adds	r3, #2
 800b50c:	2102      	movs	r1, #2
 800b50e:	60a2      	str	r2, [r4, #8]
 800b510:	6123      	str	r3, [r4, #16]
 800b512:	7561      	strb	r1, [r4, #21]
 800b514:	7da0      	ldrb	r0, [r4, #22]
 800b516:	f080 0001 	eor.w	r0, r0, #1
 800b51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b51e:	881b      	ldrh	r3, [r3, #0]
 800b520:	802b      	strh	r3, [r5, #0]
 800b522:	e7ef      	b.n	800b504 <ucdr_deserialize_int16_t+0x90>
 800b524:	68a2      	ldr	r2, [r4, #8]
 800b526:	6923      	ldr	r3, [r4, #16]
 800b528:	7da0      	ldrb	r0, [r4, #22]
 800b52a:	f884 8015 	strb.w	r8, [r4, #21]
 800b52e:	1b92      	subs	r2, r2, r6
 800b530:	1b9b      	subs	r3, r3, r6
 800b532:	60a2      	str	r2, [r4, #8]
 800b534:	6123      	str	r3, [r4, #16]
 800b536:	f080 0001 	eor.w	r0, r0, #1
 800b53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b53e:	68a3      	ldr	r3, [r4, #8]
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	706b      	strb	r3, [r5, #1]
 800b544:	e7c2      	b.n	800b4cc <ucdr_deserialize_int16_t+0x58>
 800b546:	4639      	mov	r1, r7
 800b548:	4632      	mov	r2, r6
 800b54a:	4628      	mov	r0, r5
 800b54c:	f00d fe4d 	bl	80191ea <memcpy>
 800b550:	68a1      	ldr	r1, [r4, #8]
 800b552:	464a      	mov	r2, r9
 800b554:	19a8      	adds	r0, r5, r6
 800b556:	f00d fe48 	bl	80191ea <memcpy>
 800b55a:	e7b7      	b.n	800b4cc <ucdr_deserialize_int16_t+0x58>

0800b55c <ucdr_serialize_int32_t>:
 800b55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b560:	b082      	sub	sp, #8
 800b562:	4604      	mov	r4, r0
 800b564:	9101      	str	r1, [sp, #4]
 800b566:	2104      	movs	r1, #4
 800b568:	f000 fcb6 	bl	800bed8 <ucdr_buffer_alignment>
 800b56c:	4601      	mov	r1, r0
 800b56e:	4620      	mov	r0, r4
 800b570:	7d67      	ldrb	r7, [r4, #21]
 800b572:	f000 fcf5 	bl	800bf60 <ucdr_advance_buffer>
 800b576:	2104      	movs	r1, #4
 800b578:	4620      	mov	r0, r4
 800b57a:	f000 fc4d 	bl	800be18 <ucdr_check_buffer_available_for>
 800b57e:	2800      	cmp	r0, #0
 800b580:	d139      	bne.n	800b5f6 <ucdr_serialize_int32_t+0x9a>
 800b582:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b586:	42ab      	cmp	r3, r5
 800b588:	d930      	bls.n	800b5ec <ucdr_serialize_int32_t+0x90>
 800b58a:	1b5e      	subs	r6, r3, r5
 800b58c:	60a3      	str	r3, [r4, #8]
 800b58e:	6923      	ldr	r3, [r4, #16]
 800b590:	f1c6 0804 	rsb	r8, r6, #4
 800b594:	4433      	add	r3, r6
 800b596:	6123      	str	r3, [r4, #16]
 800b598:	4641      	mov	r1, r8
 800b59a:	4620      	mov	r0, r4
 800b59c:	f000 fc48 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d04c      	beq.n	800b63e <ucdr_serialize_int32_t+0xe2>
 800b5a4:	7d23      	ldrb	r3, [r4, #20]
 800b5a6:	2b01      	cmp	r3, #1
 800b5a8:	d063      	beq.n	800b672 <ucdr_serialize_int32_t+0x116>
 800b5aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b5ae:	702b      	strb	r3, [r5, #0]
 800b5b0:	2e00      	cmp	r6, #0
 800b5b2:	d051      	beq.n	800b658 <ucdr_serialize_int32_t+0xfc>
 800b5b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b5b8:	706b      	strb	r3, [r5, #1]
 800b5ba:	2e01      	cmp	r6, #1
 800b5bc:	d050      	beq.n	800b660 <ucdr_serialize_int32_t+0x104>
 800b5be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b5c2:	70ab      	strb	r3, [r5, #2]
 800b5c4:	2e02      	cmp	r6, #2
 800b5c6:	d04f      	beq.n	800b668 <ucdr_serialize_int32_t+0x10c>
 800b5c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b5cc:	70eb      	strb	r3, [r5, #3]
 800b5ce:	6923      	ldr	r3, [r4, #16]
 800b5d0:	68a2      	ldr	r2, [r4, #8]
 800b5d2:	7da0      	ldrb	r0, [r4, #22]
 800b5d4:	3304      	adds	r3, #4
 800b5d6:	1b9e      	subs	r6, r3, r6
 800b5d8:	4442      	add	r2, r8
 800b5da:	2304      	movs	r3, #4
 800b5dc:	f080 0001 	eor.w	r0, r0, #1
 800b5e0:	60a2      	str	r2, [r4, #8]
 800b5e2:	6126      	str	r6, [r4, #16]
 800b5e4:	7563      	strb	r3, [r4, #21]
 800b5e6:	b002      	add	sp, #8
 800b5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ec:	2104      	movs	r1, #4
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f000 fc1e 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800b5f4:	b1d0      	cbz	r0, 800b62c <ucdr_serialize_int32_t+0xd0>
 800b5f6:	7d23      	ldrb	r3, [r4, #20]
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	68a3      	ldr	r3, [r4, #8]
 800b5fc:	d01c      	beq.n	800b638 <ucdr_serialize_int32_t+0xdc>
 800b5fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b602:	701a      	strb	r2, [r3, #0]
 800b604:	68a3      	ldr	r3, [r4, #8]
 800b606:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b60a:	705a      	strb	r2, [r3, #1]
 800b60c:	68a3      	ldr	r3, [r4, #8]
 800b60e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b612:	709a      	strb	r2, [r3, #2]
 800b614:	68a3      	ldr	r3, [r4, #8]
 800b616:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b61a:	70da      	strb	r2, [r3, #3]
 800b61c:	68a2      	ldr	r2, [r4, #8]
 800b61e:	6923      	ldr	r3, [r4, #16]
 800b620:	3204      	adds	r2, #4
 800b622:	3304      	adds	r3, #4
 800b624:	2104      	movs	r1, #4
 800b626:	60a2      	str	r2, [r4, #8]
 800b628:	6123      	str	r3, [r4, #16]
 800b62a:	7561      	strb	r1, [r4, #21]
 800b62c:	7da0      	ldrb	r0, [r4, #22]
 800b62e:	f080 0001 	eor.w	r0, r0, #1
 800b632:	b002      	add	sp, #8
 800b634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b638:	9a01      	ldr	r2, [sp, #4]
 800b63a:	601a      	str	r2, [r3, #0]
 800b63c:	e7ee      	b.n	800b61c <ucdr_serialize_int32_t+0xc0>
 800b63e:	68a2      	ldr	r2, [r4, #8]
 800b640:	6923      	ldr	r3, [r4, #16]
 800b642:	7da0      	ldrb	r0, [r4, #22]
 800b644:	7567      	strb	r7, [r4, #21]
 800b646:	1b92      	subs	r2, r2, r6
 800b648:	1b9b      	subs	r3, r3, r6
 800b64a:	f080 0001 	eor.w	r0, r0, #1
 800b64e:	60a2      	str	r2, [r4, #8]
 800b650:	6123      	str	r3, [r4, #16]
 800b652:	b002      	add	sp, #8
 800b654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b658:	68a3      	ldr	r3, [r4, #8]
 800b65a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b65e:	701a      	strb	r2, [r3, #0]
 800b660:	68a3      	ldr	r3, [r4, #8]
 800b662:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b666:	701a      	strb	r2, [r3, #0]
 800b668:	68a3      	ldr	r3, [r4, #8]
 800b66a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b66e:	701a      	strb	r2, [r3, #0]
 800b670:	e7ad      	b.n	800b5ce <ucdr_serialize_int32_t+0x72>
 800b672:	4628      	mov	r0, r5
 800b674:	ad01      	add	r5, sp, #4
 800b676:	4629      	mov	r1, r5
 800b678:	4632      	mov	r2, r6
 800b67a:	f00d fdb6 	bl	80191ea <memcpy>
 800b67e:	68a0      	ldr	r0, [r4, #8]
 800b680:	4642      	mov	r2, r8
 800b682:	19a9      	adds	r1, r5, r6
 800b684:	f00d fdb1 	bl	80191ea <memcpy>
 800b688:	e7a1      	b.n	800b5ce <ucdr_serialize_int32_t+0x72>
 800b68a:	bf00      	nop

0800b68c <ucdr_deserialize_int32_t>:
 800b68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b690:	460d      	mov	r5, r1
 800b692:	2104      	movs	r1, #4
 800b694:	4604      	mov	r4, r0
 800b696:	f000 fc1f 	bl	800bed8 <ucdr_buffer_alignment>
 800b69a:	4601      	mov	r1, r0
 800b69c:	4620      	mov	r0, r4
 800b69e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b6a2:	f000 fc5d 	bl	800bf60 <ucdr_advance_buffer>
 800b6a6:	2104      	movs	r1, #4
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f000 fbb5 	bl	800be18 <ucdr_check_buffer_available_for>
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	d138      	bne.n	800b724 <ucdr_deserialize_int32_t+0x98>
 800b6b2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b6b6:	42b7      	cmp	r7, r6
 800b6b8:	d92f      	bls.n	800b71a <ucdr_deserialize_int32_t+0x8e>
 800b6ba:	6923      	ldr	r3, [r4, #16]
 800b6bc:	60a7      	str	r7, [r4, #8]
 800b6be:	1bbf      	subs	r7, r7, r6
 800b6c0:	443b      	add	r3, r7
 800b6c2:	f1c7 0904 	rsb	r9, r7, #4
 800b6c6:	6123      	str	r3, [r4, #16]
 800b6c8:	4649      	mov	r1, r9
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f000 fbb0 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	d046      	beq.n	800b762 <ucdr_deserialize_int32_t+0xd6>
 800b6d4:	7d23      	ldrb	r3, [r4, #20]
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d05c      	beq.n	800b794 <ucdr_deserialize_int32_t+0x108>
 800b6da:	78f3      	ldrb	r3, [r6, #3]
 800b6dc:	702b      	strb	r3, [r5, #0]
 800b6de:	2f00      	cmp	r7, #0
 800b6e0:	d04c      	beq.n	800b77c <ucdr_deserialize_int32_t+0xf0>
 800b6e2:	78b3      	ldrb	r3, [r6, #2]
 800b6e4:	706b      	strb	r3, [r5, #1]
 800b6e6:	2f01      	cmp	r7, #1
 800b6e8:	f105 0302 	add.w	r3, r5, #2
 800b6ec:	d04a      	beq.n	800b784 <ucdr_deserialize_int32_t+0xf8>
 800b6ee:	7873      	ldrb	r3, [r6, #1]
 800b6f0:	70ab      	strb	r3, [r5, #2]
 800b6f2:	2f02      	cmp	r7, #2
 800b6f4:	f105 0303 	add.w	r3, r5, #3
 800b6f8:	d048      	beq.n	800b78c <ucdr_deserialize_int32_t+0x100>
 800b6fa:	7833      	ldrb	r3, [r6, #0]
 800b6fc:	70eb      	strb	r3, [r5, #3]
 800b6fe:	6923      	ldr	r3, [r4, #16]
 800b700:	68a2      	ldr	r2, [r4, #8]
 800b702:	7da0      	ldrb	r0, [r4, #22]
 800b704:	2104      	movs	r1, #4
 800b706:	3304      	adds	r3, #4
 800b708:	444a      	add	r2, r9
 800b70a:	1bdb      	subs	r3, r3, r7
 800b70c:	7561      	strb	r1, [r4, #21]
 800b70e:	60a2      	str	r2, [r4, #8]
 800b710:	6123      	str	r3, [r4, #16]
 800b712:	f080 0001 	eor.w	r0, r0, #1
 800b716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b71a:	2104      	movs	r1, #4
 800b71c:	4620      	mov	r0, r4
 800b71e:	f000 fb87 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800b722:	b1b0      	cbz	r0, 800b752 <ucdr_deserialize_int32_t+0xc6>
 800b724:	7d23      	ldrb	r3, [r4, #20]
 800b726:	2b01      	cmp	r3, #1
 800b728:	68a3      	ldr	r3, [r4, #8]
 800b72a:	d017      	beq.n	800b75c <ucdr_deserialize_int32_t+0xd0>
 800b72c:	78db      	ldrb	r3, [r3, #3]
 800b72e:	702b      	strb	r3, [r5, #0]
 800b730:	68a3      	ldr	r3, [r4, #8]
 800b732:	789b      	ldrb	r3, [r3, #2]
 800b734:	706b      	strb	r3, [r5, #1]
 800b736:	68a3      	ldr	r3, [r4, #8]
 800b738:	785b      	ldrb	r3, [r3, #1]
 800b73a:	70ab      	strb	r3, [r5, #2]
 800b73c:	68a3      	ldr	r3, [r4, #8]
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	70eb      	strb	r3, [r5, #3]
 800b742:	68a2      	ldr	r2, [r4, #8]
 800b744:	6923      	ldr	r3, [r4, #16]
 800b746:	3204      	adds	r2, #4
 800b748:	3304      	adds	r3, #4
 800b74a:	2104      	movs	r1, #4
 800b74c:	60a2      	str	r2, [r4, #8]
 800b74e:	6123      	str	r3, [r4, #16]
 800b750:	7561      	strb	r1, [r4, #21]
 800b752:	7da0      	ldrb	r0, [r4, #22]
 800b754:	f080 0001 	eor.w	r0, r0, #1
 800b758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	602b      	str	r3, [r5, #0]
 800b760:	e7ef      	b.n	800b742 <ucdr_deserialize_int32_t+0xb6>
 800b762:	68a2      	ldr	r2, [r4, #8]
 800b764:	6923      	ldr	r3, [r4, #16]
 800b766:	7da0      	ldrb	r0, [r4, #22]
 800b768:	f884 8015 	strb.w	r8, [r4, #21]
 800b76c:	1bd2      	subs	r2, r2, r7
 800b76e:	1bdb      	subs	r3, r3, r7
 800b770:	60a2      	str	r2, [r4, #8]
 800b772:	6123      	str	r3, [r4, #16]
 800b774:	f080 0001 	eor.w	r0, r0, #1
 800b778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b77c:	68a3      	ldr	r3, [r4, #8]
 800b77e:	789b      	ldrb	r3, [r3, #2]
 800b780:	706b      	strb	r3, [r5, #1]
 800b782:	1cab      	adds	r3, r5, #2
 800b784:	68a2      	ldr	r2, [r4, #8]
 800b786:	7852      	ldrb	r2, [r2, #1]
 800b788:	f803 2b01 	strb.w	r2, [r3], #1
 800b78c:	68a2      	ldr	r2, [r4, #8]
 800b78e:	7812      	ldrb	r2, [r2, #0]
 800b790:	701a      	strb	r2, [r3, #0]
 800b792:	e7b4      	b.n	800b6fe <ucdr_deserialize_int32_t+0x72>
 800b794:	4631      	mov	r1, r6
 800b796:	463a      	mov	r2, r7
 800b798:	4628      	mov	r0, r5
 800b79a:	f00d fd26 	bl	80191ea <memcpy>
 800b79e:	68a1      	ldr	r1, [r4, #8]
 800b7a0:	464a      	mov	r2, r9
 800b7a2:	19e8      	adds	r0, r5, r7
 800b7a4:	f00d fd21 	bl	80191ea <memcpy>
 800b7a8:	e7a9      	b.n	800b6fe <ucdr_deserialize_int32_t+0x72>
 800b7aa:	bf00      	nop

0800b7ac <ucdr_serialize_double>:
 800b7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b0:	2108      	movs	r1, #8
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	ed8d 0b00 	vstr	d0, [sp]
 800b7ba:	f000 fb8d 	bl	800bed8 <ucdr_buffer_alignment>
 800b7be:	4601      	mov	r1, r0
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	7d67      	ldrb	r7, [r4, #21]
 800b7c4:	f000 fbcc 	bl	800bf60 <ucdr_advance_buffer>
 800b7c8:	2108      	movs	r1, #8
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f000 fb24 	bl	800be18 <ucdr_check_buffer_available_for>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	d14e      	bne.n	800b872 <ucdr_serialize_double+0xc6>
 800b7d4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b7d8:	42ab      	cmp	r3, r5
 800b7da:	d945      	bls.n	800b868 <ucdr_serialize_double+0xbc>
 800b7dc:	1b5e      	subs	r6, r3, r5
 800b7de:	60a3      	str	r3, [r4, #8]
 800b7e0:	6923      	ldr	r3, [r4, #16]
 800b7e2:	f1c6 0808 	rsb	r8, r6, #8
 800b7e6:	4433      	add	r3, r6
 800b7e8:	6123      	str	r3, [r4, #16]
 800b7ea:	4641      	mov	r1, r8
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 fb1f 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	d074      	beq.n	800b8e0 <ucdr_serialize_double+0x134>
 800b7f6:	7d23      	ldrb	r3, [r4, #20]
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	f000 809b 	beq.w	800b934 <ucdr_serialize_double+0x188>
 800b7fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b802:	702b      	strb	r3, [r5, #0]
 800b804:	2e00      	cmp	r6, #0
 800b806:	d078      	beq.n	800b8fa <ucdr_serialize_double+0x14e>
 800b808:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b80c:	706b      	strb	r3, [r5, #1]
 800b80e:	2e01      	cmp	r6, #1
 800b810:	d077      	beq.n	800b902 <ucdr_serialize_double+0x156>
 800b812:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b816:	70ab      	strb	r3, [r5, #2]
 800b818:	2e02      	cmp	r6, #2
 800b81a:	d076      	beq.n	800b90a <ucdr_serialize_double+0x15e>
 800b81c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b820:	70eb      	strb	r3, [r5, #3]
 800b822:	2e03      	cmp	r6, #3
 800b824:	d075      	beq.n	800b912 <ucdr_serialize_double+0x166>
 800b826:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b82a:	712b      	strb	r3, [r5, #4]
 800b82c:	2e04      	cmp	r6, #4
 800b82e:	d074      	beq.n	800b91a <ucdr_serialize_double+0x16e>
 800b830:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b834:	716b      	strb	r3, [r5, #5]
 800b836:	2e05      	cmp	r6, #5
 800b838:	d073      	beq.n	800b922 <ucdr_serialize_double+0x176>
 800b83a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b83e:	71ab      	strb	r3, [r5, #6]
 800b840:	2e06      	cmp	r6, #6
 800b842:	d072      	beq.n	800b92a <ucdr_serialize_double+0x17e>
 800b844:	f89d 3000 	ldrb.w	r3, [sp]
 800b848:	71eb      	strb	r3, [r5, #7]
 800b84a:	6923      	ldr	r3, [r4, #16]
 800b84c:	68a2      	ldr	r2, [r4, #8]
 800b84e:	7da0      	ldrb	r0, [r4, #22]
 800b850:	3308      	adds	r3, #8
 800b852:	1b9e      	subs	r6, r3, r6
 800b854:	4442      	add	r2, r8
 800b856:	2308      	movs	r3, #8
 800b858:	f080 0001 	eor.w	r0, r0, #1
 800b85c:	60a2      	str	r2, [r4, #8]
 800b85e:	6126      	str	r6, [r4, #16]
 800b860:	7563      	strb	r3, [r4, #21]
 800b862:	b002      	add	sp, #8
 800b864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b868:	2108      	movs	r1, #8
 800b86a:	4620      	mov	r0, r4
 800b86c:	f000 fae0 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800b870:	b350      	cbz	r0, 800b8c8 <ucdr_serialize_double+0x11c>
 800b872:	7d23      	ldrb	r3, [r4, #20]
 800b874:	2b01      	cmp	r3, #1
 800b876:	d02d      	beq.n	800b8d4 <ucdr_serialize_double+0x128>
 800b878:	68a3      	ldr	r3, [r4, #8]
 800b87a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b87e:	701a      	strb	r2, [r3, #0]
 800b880:	68a3      	ldr	r3, [r4, #8]
 800b882:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b886:	705a      	strb	r2, [r3, #1]
 800b888:	68a3      	ldr	r3, [r4, #8]
 800b88a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b88e:	709a      	strb	r2, [r3, #2]
 800b890:	68a3      	ldr	r3, [r4, #8]
 800b892:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b896:	70da      	strb	r2, [r3, #3]
 800b898:	68a3      	ldr	r3, [r4, #8]
 800b89a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b89e:	711a      	strb	r2, [r3, #4]
 800b8a0:	68a3      	ldr	r3, [r4, #8]
 800b8a2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b8a6:	715a      	strb	r2, [r3, #5]
 800b8a8:	68a3      	ldr	r3, [r4, #8]
 800b8aa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b8ae:	719a      	strb	r2, [r3, #6]
 800b8b0:	68a3      	ldr	r3, [r4, #8]
 800b8b2:	f89d 2000 	ldrb.w	r2, [sp]
 800b8b6:	71da      	strb	r2, [r3, #7]
 800b8b8:	68a2      	ldr	r2, [r4, #8]
 800b8ba:	6923      	ldr	r3, [r4, #16]
 800b8bc:	3208      	adds	r2, #8
 800b8be:	3308      	adds	r3, #8
 800b8c0:	2108      	movs	r1, #8
 800b8c2:	60a2      	str	r2, [r4, #8]
 800b8c4:	6123      	str	r3, [r4, #16]
 800b8c6:	7561      	strb	r1, [r4, #21]
 800b8c8:	7da0      	ldrb	r0, [r4, #22]
 800b8ca:	f080 0001 	eor.w	r0, r0, #1
 800b8ce:	b002      	add	sp, #8
 800b8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d4:	466b      	mov	r3, sp
 800b8d6:	cb03      	ldmia	r3!, {r0, r1}
 800b8d8:	68a3      	ldr	r3, [r4, #8]
 800b8da:	6018      	str	r0, [r3, #0]
 800b8dc:	6059      	str	r1, [r3, #4]
 800b8de:	e7eb      	b.n	800b8b8 <ucdr_serialize_double+0x10c>
 800b8e0:	68a2      	ldr	r2, [r4, #8]
 800b8e2:	6923      	ldr	r3, [r4, #16]
 800b8e4:	7da0      	ldrb	r0, [r4, #22]
 800b8e6:	7567      	strb	r7, [r4, #21]
 800b8e8:	1b92      	subs	r2, r2, r6
 800b8ea:	1b9b      	subs	r3, r3, r6
 800b8ec:	f080 0001 	eor.w	r0, r0, #1
 800b8f0:	60a2      	str	r2, [r4, #8]
 800b8f2:	6123      	str	r3, [r4, #16]
 800b8f4:	b002      	add	sp, #8
 800b8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8fa:	68a3      	ldr	r3, [r4, #8]
 800b8fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b900:	701a      	strb	r2, [r3, #0]
 800b902:	68a3      	ldr	r3, [r4, #8]
 800b904:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b908:	701a      	strb	r2, [r3, #0]
 800b90a:	68a3      	ldr	r3, [r4, #8]
 800b90c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b910:	701a      	strb	r2, [r3, #0]
 800b912:	68a3      	ldr	r3, [r4, #8]
 800b914:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b918:	701a      	strb	r2, [r3, #0]
 800b91a:	68a3      	ldr	r3, [r4, #8]
 800b91c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b920:	701a      	strb	r2, [r3, #0]
 800b922:	68a3      	ldr	r3, [r4, #8]
 800b924:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b928:	701a      	strb	r2, [r3, #0]
 800b92a:	68a3      	ldr	r3, [r4, #8]
 800b92c:	f89d 2000 	ldrb.w	r2, [sp]
 800b930:	701a      	strb	r2, [r3, #0]
 800b932:	e78a      	b.n	800b84a <ucdr_serialize_double+0x9e>
 800b934:	4628      	mov	r0, r5
 800b936:	466d      	mov	r5, sp
 800b938:	4629      	mov	r1, r5
 800b93a:	4632      	mov	r2, r6
 800b93c:	f00d fc55 	bl	80191ea <memcpy>
 800b940:	68a0      	ldr	r0, [r4, #8]
 800b942:	4642      	mov	r2, r8
 800b944:	19a9      	adds	r1, r5, r6
 800b946:	f00d fc50 	bl	80191ea <memcpy>
 800b94a:	e77e      	b.n	800b84a <ucdr_serialize_double+0x9e>

0800b94c <ucdr_serialize_endian_double>:
 800b94c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b950:	460e      	mov	r6, r1
 800b952:	b083      	sub	sp, #12
 800b954:	2108      	movs	r1, #8
 800b956:	4604      	mov	r4, r0
 800b958:	ed8d 0b00 	vstr	d0, [sp]
 800b95c:	f000 fabc 	bl	800bed8 <ucdr_buffer_alignment>
 800b960:	4601      	mov	r1, r0
 800b962:	4620      	mov	r0, r4
 800b964:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b968:	f000 fafa 	bl	800bf60 <ucdr_advance_buffer>
 800b96c:	2108      	movs	r1, #8
 800b96e:	4620      	mov	r0, r4
 800b970:	f000 fa52 	bl	800be18 <ucdr_check_buffer_available_for>
 800b974:	2800      	cmp	r0, #0
 800b976:	d14d      	bne.n	800ba14 <ucdr_serialize_endian_double+0xc8>
 800b978:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800b97c:	42bd      	cmp	r5, r7
 800b97e:	d944      	bls.n	800ba0a <ucdr_serialize_endian_double+0xbe>
 800b980:	6923      	ldr	r3, [r4, #16]
 800b982:	60a5      	str	r5, [r4, #8]
 800b984:	1bed      	subs	r5, r5, r7
 800b986:	442b      	add	r3, r5
 800b988:	f1c5 0908 	rsb	r9, r5, #8
 800b98c:	6123      	str	r3, [r4, #16]
 800b98e:	4649      	mov	r1, r9
 800b990:	4620      	mov	r0, r4
 800b992:	f000 fa4d 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800b996:	2800      	cmp	r0, #0
 800b998:	d072      	beq.n	800ba80 <ucdr_serialize_endian_double+0x134>
 800b99a:	2e01      	cmp	r6, #1
 800b99c:	f000 809b 	beq.w	800bad6 <ucdr_serialize_endian_double+0x18a>
 800b9a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b9a4:	703b      	strb	r3, [r7, #0]
 800b9a6:	2d00      	cmp	r5, #0
 800b9a8:	d078      	beq.n	800ba9c <ucdr_serialize_endian_double+0x150>
 800b9aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b9ae:	707b      	strb	r3, [r7, #1]
 800b9b0:	2d01      	cmp	r5, #1
 800b9b2:	d077      	beq.n	800baa4 <ucdr_serialize_endian_double+0x158>
 800b9b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b9b8:	70bb      	strb	r3, [r7, #2]
 800b9ba:	2d02      	cmp	r5, #2
 800b9bc:	d076      	beq.n	800baac <ucdr_serialize_endian_double+0x160>
 800b9be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b9c2:	70fb      	strb	r3, [r7, #3]
 800b9c4:	2d03      	cmp	r5, #3
 800b9c6:	d075      	beq.n	800bab4 <ucdr_serialize_endian_double+0x168>
 800b9c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b9cc:	713b      	strb	r3, [r7, #4]
 800b9ce:	2d04      	cmp	r5, #4
 800b9d0:	d074      	beq.n	800babc <ucdr_serialize_endian_double+0x170>
 800b9d2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b9d6:	717b      	strb	r3, [r7, #5]
 800b9d8:	2d05      	cmp	r5, #5
 800b9da:	d073      	beq.n	800bac4 <ucdr_serialize_endian_double+0x178>
 800b9dc:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b9e0:	71bb      	strb	r3, [r7, #6]
 800b9e2:	2d06      	cmp	r5, #6
 800b9e4:	d072      	beq.n	800bacc <ucdr_serialize_endian_double+0x180>
 800b9e6:	f89d 3000 	ldrb.w	r3, [sp]
 800b9ea:	71fb      	strb	r3, [r7, #7]
 800b9ec:	6923      	ldr	r3, [r4, #16]
 800b9ee:	68a2      	ldr	r2, [r4, #8]
 800b9f0:	7da0      	ldrb	r0, [r4, #22]
 800b9f2:	3308      	adds	r3, #8
 800b9f4:	1b5d      	subs	r5, r3, r5
 800b9f6:	444a      	add	r2, r9
 800b9f8:	2308      	movs	r3, #8
 800b9fa:	f080 0001 	eor.w	r0, r0, #1
 800b9fe:	60a2      	str	r2, [r4, #8]
 800ba00:	6125      	str	r5, [r4, #16]
 800ba02:	7563      	strb	r3, [r4, #21]
 800ba04:	b003      	add	sp, #12
 800ba06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba0a:	2108      	movs	r1, #8
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	f000 fa0f 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800ba12:	b348      	cbz	r0, 800ba68 <ucdr_serialize_endian_double+0x11c>
 800ba14:	2e01      	cmp	r6, #1
 800ba16:	d02d      	beq.n	800ba74 <ucdr_serialize_endian_double+0x128>
 800ba18:	68a3      	ldr	r3, [r4, #8]
 800ba1a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ba1e:	701a      	strb	r2, [r3, #0]
 800ba20:	68a3      	ldr	r3, [r4, #8]
 800ba22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba26:	705a      	strb	r2, [r3, #1]
 800ba28:	68a3      	ldr	r3, [r4, #8]
 800ba2a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba2e:	709a      	strb	r2, [r3, #2]
 800ba30:	68a3      	ldr	r3, [r4, #8]
 800ba32:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba36:	70da      	strb	r2, [r3, #3]
 800ba38:	68a3      	ldr	r3, [r4, #8]
 800ba3a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ba3e:	711a      	strb	r2, [r3, #4]
 800ba40:	68a3      	ldr	r3, [r4, #8]
 800ba42:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ba46:	715a      	strb	r2, [r3, #5]
 800ba48:	68a3      	ldr	r3, [r4, #8]
 800ba4a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ba4e:	719a      	strb	r2, [r3, #6]
 800ba50:	68a3      	ldr	r3, [r4, #8]
 800ba52:	f89d 2000 	ldrb.w	r2, [sp]
 800ba56:	71da      	strb	r2, [r3, #7]
 800ba58:	68a2      	ldr	r2, [r4, #8]
 800ba5a:	6923      	ldr	r3, [r4, #16]
 800ba5c:	3208      	adds	r2, #8
 800ba5e:	3308      	adds	r3, #8
 800ba60:	2108      	movs	r1, #8
 800ba62:	60a2      	str	r2, [r4, #8]
 800ba64:	6123      	str	r3, [r4, #16]
 800ba66:	7561      	strb	r1, [r4, #21]
 800ba68:	7da0      	ldrb	r0, [r4, #22]
 800ba6a:	f080 0001 	eor.w	r0, r0, #1
 800ba6e:	b003      	add	sp, #12
 800ba70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba74:	466b      	mov	r3, sp
 800ba76:	cb03      	ldmia	r3!, {r0, r1}
 800ba78:	68a3      	ldr	r3, [r4, #8]
 800ba7a:	6018      	str	r0, [r3, #0]
 800ba7c:	6059      	str	r1, [r3, #4]
 800ba7e:	e7eb      	b.n	800ba58 <ucdr_serialize_endian_double+0x10c>
 800ba80:	68a2      	ldr	r2, [r4, #8]
 800ba82:	6923      	ldr	r3, [r4, #16]
 800ba84:	7da0      	ldrb	r0, [r4, #22]
 800ba86:	f884 8015 	strb.w	r8, [r4, #21]
 800ba8a:	1b52      	subs	r2, r2, r5
 800ba8c:	1b5b      	subs	r3, r3, r5
 800ba8e:	f080 0001 	eor.w	r0, r0, #1
 800ba92:	60a2      	str	r2, [r4, #8]
 800ba94:	6123      	str	r3, [r4, #16]
 800ba96:	b003      	add	sp, #12
 800ba98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba9c:	68a3      	ldr	r3, [r4, #8]
 800ba9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800baa2:	701a      	strb	r2, [r3, #0]
 800baa4:	68a3      	ldr	r3, [r4, #8]
 800baa6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800baaa:	701a      	strb	r2, [r3, #0]
 800baac:	68a3      	ldr	r3, [r4, #8]
 800baae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bab2:	701a      	strb	r2, [r3, #0]
 800bab4:	68a3      	ldr	r3, [r4, #8]
 800bab6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800baba:	701a      	strb	r2, [r3, #0]
 800babc:	68a3      	ldr	r3, [r4, #8]
 800babe:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bac2:	701a      	strb	r2, [r3, #0]
 800bac4:	68a3      	ldr	r3, [r4, #8]
 800bac6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800baca:	701a      	strb	r2, [r3, #0]
 800bacc:	68a3      	ldr	r3, [r4, #8]
 800bace:	f89d 2000 	ldrb.w	r2, [sp]
 800bad2:	701a      	strb	r2, [r3, #0]
 800bad4:	e78a      	b.n	800b9ec <ucdr_serialize_endian_double+0xa0>
 800bad6:	466e      	mov	r6, sp
 800bad8:	4631      	mov	r1, r6
 800bada:	462a      	mov	r2, r5
 800badc:	4638      	mov	r0, r7
 800bade:	f00d fb84 	bl	80191ea <memcpy>
 800bae2:	68a0      	ldr	r0, [r4, #8]
 800bae4:	464a      	mov	r2, r9
 800bae6:	1971      	adds	r1, r6, r5
 800bae8:	f00d fb7f 	bl	80191ea <memcpy>
 800baec:	e77e      	b.n	800b9ec <ucdr_serialize_endian_double+0xa0>
 800baee:	bf00      	nop

0800baf0 <ucdr_deserialize_double>:
 800baf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baf4:	460d      	mov	r5, r1
 800baf6:	2108      	movs	r1, #8
 800baf8:	4604      	mov	r4, r0
 800bafa:	f000 f9ed 	bl	800bed8 <ucdr_buffer_alignment>
 800bafe:	4601      	mov	r1, r0
 800bb00:	4620      	mov	r0, r4
 800bb02:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bb06:	f000 fa2b 	bl	800bf60 <ucdr_advance_buffer>
 800bb0a:	2108      	movs	r1, #8
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	f000 f983 	bl	800be18 <ucdr_check_buffer_available_for>
 800bb12:	2800      	cmp	r0, #0
 800bb14:	d151      	bne.n	800bbba <ucdr_deserialize_double+0xca>
 800bb16:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bb1a:	42be      	cmp	r6, r7
 800bb1c:	d948      	bls.n	800bbb0 <ucdr_deserialize_double+0xc0>
 800bb1e:	6923      	ldr	r3, [r4, #16]
 800bb20:	60a6      	str	r6, [r4, #8]
 800bb22:	1bf6      	subs	r6, r6, r7
 800bb24:	4433      	add	r3, r6
 800bb26:	f1c6 0808 	rsb	r8, r6, #8
 800bb2a:	6123      	str	r3, [r4, #16]
 800bb2c:	4641      	mov	r1, r8
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f000 f97e 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d06d      	beq.n	800bc14 <ucdr_deserialize_double+0x124>
 800bb38:	7d23      	ldrb	r3, [r4, #20]
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	f000 8093 	beq.w	800bc66 <ucdr_deserialize_double+0x176>
 800bb40:	79fb      	ldrb	r3, [r7, #7]
 800bb42:	702b      	strb	r3, [r5, #0]
 800bb44:	2e00      	cmp	r6, #0
 800bb46:	d072      	beq.n	800bc2e <ucdr_deserialize_double+0x13e>
 800bb48:	79bb      	ldrb	r3, [r7, #6]
 800bb4a:	706b      	strb	r3, [r5, #1]
 800bb4c:	2e01      	cmp	r6, #1
 800bb4e:	f105 0302 	add.w	r3, r5, #2
 800bb52:	d070      	beq.n	800bc36 <ucdr_deserialize_double+0x146>
 800bb54:	797b      	ldrb	r3, [r7, #5]
 800bb56:	70ab      	strb	r3, [r5, #2]
 800bb58:	2e02      	cmp	r6, #2
 800bb5a:	f105 0303 	add.w	r3, r5, #3
 800bb5e:	d06e      	beq.n	800bc3e <ucdr_deserialize_double+0x14e>
 800bb60:	793b      	ldrb	r3, [r7, #4]
 800bb62:	70eb      	strb	r3, [r5, #3]
 800bb64:	2e03      	cmp	r6, #3
 800bb66:	f105 0304 	add.w	r3, r5, #4
 800bb6a:	d06c      	beq.n	800bc46 <ucdr_deserialize_double+0x156>
 800bb6c:	78fb      	ldrb	r3, [r7, #3]
 800bb6e:	712b      	strb	r3, [r5, #4]
 800bb70:	2e04      	cmp	r6, #4
 800bb72:	f105 0305 	add.w	r3, r5, #5
 800bb76:	d06a      	beq.n	800bc4e <ucdr_deserialize_double+0x15e>
 800bb78:	78bb      	ldrb	r3, [r7, #2]
 800bb7a:	716b      	strb	r3, [r5, #5]
 800bb7c:	2e05      	cmp	r6, #5
 800bb7e:	f105 0306 	add.w	r3, r5, #6
 800bb82:	d068      	beq.n	800bc56 <ucdr_deserialize_double+0x166>
 800bb84:	787b      	ldrb	r3, [r7, #1]
 800bb86:	71ab      	strb	r3, [r5, #6]
 800bb88:	2e06      	cmp	r6, #6
 800bb8a:	f105 0307 	add.w	r3, r5, #7
 800bb8e:	d066      	beq.n	800bc5e <ucdr_deserialize_double+0x16e>
 800bb90:	783b      	ldrb	r3, [r7, #0]
 800bb92:	71eb      	strb	r3, [r5, #7]
 800bb94:	6923      	ldr	r3, [r4, #16]
 800bb96:	68a2      	ldr	r2, [r4, #8]
 800bb98:	7da0      	ldrb	r0, [r4, #22]
 800bb9a:	3308      	adds	r3, #8
 800bb9c:	1b9e      	subs	r6, r3, r6
 800bb9e:	2308      	movs	r3, #8
 800bba0:	4442      	add	r2, r8
 800bba2:	7563      	strb	r3, [r4, #21]
 800bba4:	60a2      	str	r2, [r4, #8]
 800bba6:	6126      	str	r6, [r4, #16]
 800bba8:	f080 0001 	eor.w	r0, r0, #1
 800bbac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbb0:	2108      	movs	r1, #8
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f000 f93c 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800bbb8:	b310      	cbz	r0, 800bc00 <ucdr_deserialize_double+0x110>
 800bbba:	7d23      	ldrb	r3, [r4, #20]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	68a3      	ldr	r3, [r4, #8]
 800bbc0:	d023      	beq.n	800bc0a <ucdr_deserialize_double+0x11a>
 800bbc2:	79db      	ldrb	r3, [r3, #7]
 800bbc4:	702b      	strb	r3, [r5, #0]
 800bbc6:	68a3      	ldr	r3, [r4, #8]
 800bbc8:	799b      	ldrb	r3, [r3, #6]
 800bbca:	706b      	strb	r3, [r5, #1]
 800bbcc:	68a3      	ldr	r3, [r4, #8]
 800bbce:	795b      	ldrb	r3, [r3, #5]
 800bbd0:	70ab      	strb	r3, [r5, #2]
 800bbd2:	68a3      	ldr	r3, [r4, #8]
 800bbd4:	791b      	ldrb	r3, [r3, #4]
 800bbd6:	70eb      	strb	r3, [r5, #3]
 800bbd8:	68a3      	ldr	r3, [r4, #8]
 800bbda:	78db      	ldrb	r3, [r3, #3]
 800bbdc:	712b      	strb	r3, [r5, #4]
 800bbde:	68a3      	ldr	r3, [r4, #8]
 800bbe0:	789b      	ldrb	r3, [r3, #2]
 800bbe2:	716b      	strb	r3, [r5, #5]
 800bbe4:	68a3      	ldr	r3, [r4, #8]
 800bbe6:	785b      	ldrb	r3, [r3, #1]
 800bbe8:	71ab      	strb	r3, [r5, #6]
 800bbea:	68a3      	ldr	r3, [r4, #8]
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	71eb      	strb	r3, [r5, #7]
 800bbf0:	68a2      	ldr	r2, [r4, #8]
 800bbf2:	6923      	ldr	r3, [r4, #16]
 800bbf4:	3208      	adds	r2, #8
 800bbf6:	3308      	adds	r3, #8
 800bbf8:	2108      	movs	r1, #8
 800bbfa:	60a2      	str	r2, [r4, #8]
 800bbfc:	6123      	str	r3, [r4, #16]
 800bbfe:	7561      	strb	r1, [r4, #21]
 800bc00:	7da0      	ldrb	r0, [r4, #22]
 800bc02:	f080 0001 	eor.w	r0, r0, #1
 800bc06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	606b      	str	r3, [r5, #4]
 800bc10:	602a      	str	r2, [r5, #0]
 800bc12:	e7ed      	b.n	800bbf0 <ucdr_deserialize_double+0x100>
 800bc14:	68a2      	ldr	r2, [r4, #8]
 800bc16:	6923      	ldr	r3, [r4, #16]
 800bc18:	7da0      	ldrb	r0, [r4, #22]
 800bc1a:	f884 9015 	strb.w	r9, [r4, #21]
 800bc1e:	1b92      	subs	r2, r2, r6
 800bc20:	1b9b      	subs	r3, r3, r6
 800bc22:	60a2      	str	r2, [r4, #8]
 800bc24:	6123      	str	r3, [r4, #16]
 800bc26:	f080 0001 	eor.w	r0, r0, #1
 800bc2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc2e:	68a3      	ldr	r3, [r4, #8]
 800bc30:	799b      	ldrb	r3, [r3, #6]
 800bc32:	706b      	strb	r3, [r5, #1]
 800bc34:	1cab      	adds	r3, r5, #2
 800bc36:	68a2      	ldr	r2, [r4, #8]
 800bc38:	7952      	ldrb	r2, [r2, #5]
 800bc3a:	f803 2b01 	strb.w	r2, [r3], #1
 800bc3e:	68a2      	ldr	r2, [r4, #8]
 800bc40:	7912      	ldrb	r2, [r2, #4]
 800bc42:	f803 2b01 	strb.w	r2, [r3], #1
 800bc46:	68a2      	ldr	r2, [r4, #8]
 800bc48:	78d2      	ldrb	r2, [r2, #3]
 800bc4a:	f803 2b01 	strb.w	r2, [r3], #1
 800bc4e:	68a2      	ldr	r2, [r4, #8]
 800bc50:	7892      	ldrb	r2, [r2, #2]
 800bc52:	f803 2b01 	strb.w	r2, [r3], #1
 800bc56:	68a2      	ldr	r2, [r4, #8]
 800bc58:	7852      	ldrb	r2, [r2, #1]
 800bc5a:	f803 2b01 	strb.w	r2, [r3], #1
 800bc5e:	68a2      	ldr	r2, [r4, #8]
 800bc60:	7812      	ldrb	r2, [r2, #0]
 800bc62:	701a      	strb	r2, [r3, #0]
 800bc64:	e796      	b.n	800bb94 <ucdr_deserialize_double+0xa4>
 800bc66:	4639      	mov	r1, r7
 800bc68:	4632      	mov	r2, r6
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	f00d fabd 	bl	80191ea <memcpy>
 800bc70:	68a1      	ldr	r1, [r4, #8]
 800bc72:	4642      	mov	r2, r8
 800bc74:	19a8      	adds	r0, r5, r6
 800bc76:	f00d fab8 	bl	80191ea <memcpy>
 800bc7a:	e78b      	b.n	800bb94 <ucdr_deserialize_double+0xa4>

0800bc7c <ucdr_deserialize_endian_double>:
 800bc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc80:	460f      	mov	r7, r1
 800bc82:	2108      	movs	r1, #8
 800bc84:	4604      	mov	r4, r0
 800bc86:	4615      	mov	r5, r2
 800bc88:	f000 f926 	bl	800bed8 <ucdr_buffer_alignment>
 800bc8c:	4601      	mov	r1, r0
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bc94:	f000 f964 	bl	800bf60 <ucdr_advance_buffer>
 800bc98:	2108      	movs	r1, #8
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f000 f8bc 	bl	800be18 <ucdr_check_buffer_available_for>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d159      	bne.n	800bd58 <ucdr_deserialize_endian_double+0xdc>
 800bca4:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800bca8:	4546      	cmp	r6, r8
 800bcaa:	d950      	bls.n	800bd4e <ucdr_deserialize_endian_double+0xd2>
 800bcac:	6923      	ldr	r3, [r4, #16]
 800bcae:	60a6      	str	r6, [r4, #8]
 800bcb0:	eba6 0608 	sub.w	r6, r6, r8
 800bcb4:	4433      	add	r3, r6
 800bcb6:	f1c6 0a08 	rsb	sl, r6, #8
 800bcba:	6123      	str	r3, [r4, #16]
 800bcbc:	4651      	mov	r1, sl
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	f000 f8b6 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d073      	beq.n	800bdb0 <ucdr_deserialize_endian_double+0x134>
 800bcc8:	2f01      	cmp	r7, #1
 800bcca:	f000 809a 	beq.w	800be02 <ucdr_deserialize_endian_double+0x186>
 800bcce:	f898 3007 	ldrb.w	r3, [r8, #7]
 800bcd2:	702b      	strb	r3, [r5, #0]
 800bcd4:	2e00      	cmp	r6, #0
 800bcd6:	d078      	beq.n	800bdca <ucdr_deserialize_endian_double+0x14e>
 800bcd8:	f898 3006 	ldrb.w	r3, [r8, #6]
 800bcdc:	706b      	strb	r3, [r5, #1]
 800bcde:	2e01      	cmp	r6, #1
 800bce0:	f105 0302 	add.w	r3, r5, #2
 800bce4:	d075      	beq.n	800bdd2 <ucdr_deserialize_endian_double+0x156>
 800bce6:	f898 3005 	ldrb.w	r3, [r8, #5]
 800bcea:	70ab      	strb	r3, [r5, #2]
 800bcec:	2e02      	cmp	r6, #2
 800bcee:	f105 0303 	add.w	r3, r5, #3
 800bcf2:	d072      	beq.n	800bdda <ucdr_deserialize_endian_double+0x15e>
 800bcf4:	f898 3004 	ldrb.w	r3, [r8, #4]
 800bcf8:	70eb      	strb	r3, [r5, #3]
 800bcfa:	2e03      	cmp	r6, #3
 800bcfc:	f105 0304 	add.w	r3, r5, #4
 800bd00:	d06f      	beq.n	800bde2 <ucdr_deserialize_endian_double+0x166>
 800bd02:	f898 3003 	ldrb.w	r3, [r8, #3]
 800bd06:	712b      	strb	r3, [r5, #4]
 800bd08:	2e04      	cmp	r6, #4
 800bd0a:	f105 0305 	add.w	r3, r5, #5
 800bd0e:	d06c      	beq.n	800bdea <ucdr_deserialize_endian_double+0x16e>
 800bd10:	f898 3002 	ldrb.w	r3, [r8, #2]
 800bd14:	716b      	strb	r3, [r5, #5]
 800bd16:	2e05      	cmp	r6, #5
 800bd18:	f105 0306 	add.w	r3, r5, #6
 800bd1c:	d069      	beq.n	800bdf2 <ucdr_deserialize_endian_double+0x176>
 800bd1e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bd22:	71ab      	strb	r3, [r5, #6]
 800bd24:	2e06      	cmp	r6, #6
 800bd26:	f105 0307 	add.w	r3, r5, #7
 800bd2a:	d066      	beq.n	800bdfa <ucdr_deserialize_endian_double+0x17e>
 800bd2c:	f898 3000 	ldrb.w	r3, [r8]
 800bd30:	71eb      	strb	r3, [r5, #7]
 800bd32:	6923      	ldr	r3, [r4, #16]
 800bd34:	68a2      	ldr	r2, [r4, #8]
 800bd36:	7da0      	ldrb	r0, [r4, #22]
 800bd38:	3308      	adds	r3, #8
 800bd3a:	1b9e      	subs	r6, r3, r6
 800bd3c:	2308      	movs	r3, #8
 800bd3e:	4452      	add	r2, sl
 800bd40:	7563      	strb	r3, [r4, #21]
 800bd42:	60a2      	str	r2, [r4, #8]
 800bd44:	6126      	str	r6, [r4, #16]
 800bd46:	f080 0001 	eor.w	r0, r0, #1
 800bd4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd4e:	2108      	movs	r1, #8
 800bd50:	4620      	mov	r0, r4
 800bd52:	f000 f86d 	bl	800be30 <ucdr_check_final_buffer_behavior>
 800bd56:	b308      	cbz	r0, 800bd9c <ucdr_deserialize_endian_double+0x120>
 800bd58:	2f01      	cmp	r7, #1
 800bd5a:	68a3      	ldr	r3, [r4, #8]
 800bd5c:	d023      	beq.n	800bda6 <ucdr_deserialize_endian_double+0x12a>
 800bd5e:	79db      	ldrb	r3, [r3, #7]
 800bd60:	702b      	strb	r3, [r5, #0]
 800bd62:	68a3      	ldr	r3, [r4, #8]
 800bd64:	799b      	ldrb	r3, [r3, #6]
 800bd66:	706b      	strb	r3, [r5, #1]
 800bd68:	68a3      	ldr	r3, [r4, #8]
 800bd6a:	795b      	ldrb	r3, [r3, #5]
 800bd6c:	70ab      	strb	r3, [r5, #2]
 800bd6e:	68a3      	ldr	r3, [r4, #8]
 800bd70:	791b      	ldrb	r3, [r3, #4]
 800bd72:	70eb      	strb	r3, [r5, #3]
 800bd74:	68a3      	ldr	r3, [r4, #8]
 800bd76:	78db      	ldrb	r3, [r3, #3]
 800bd78:	712b      	strb	r3, [r5, #4]
 800bd7a:	68a3      	ldr	r3, [r4, #8]
 800bd7c:	789b      	ldrb	r3, [r3, #2]
 800bd7e:	716b      	strb	r3, [r5, #5]
 800bd80:	68a3      	ldr	r3, [r4, #8]
 800bd82:	785b      	ldrb	r3, [r3, #1]
 800bd84:	71ab      	strb	r3, [r5, #6]
 800bd86:	68a3      	ldr	r3, [r4, #8]
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	71eb      	strb	r3, [r5, #7]
 800bd8c:	68a2      	ldr	r2, [r4, #8]
 800bd8e:	6923      	ldr	r3, [r4, #16]
 800bd90:	3208      	adds	r2, #8
 800bd92:	3308      	adds	r3, #8
 800bd94:	2108      	movs	r1, #8
 800bd96:	60a2      	str	r2, [r4, #8]
 800bd98:	6123      	str	r3, [r4, #16]
 800bd9a:	7561      	strb	r1, [r4, #21]
 800bd9c:	7da0      	ldrb	r0, [r4, #22]
 800bd9e:	f080 0001 	eor.w	r0, r0, #1
 800bda2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	606b      	str	r3, [r5, #4]
 800bdac:	602a      	str	r2, [r5, #0]
 800bdae:	e7ed      	b.n	800bd8c <ucdr_deserialize_endian_double+0x110>
 800bdb0:	68a2      	ldr	r2, [r4, #8]
 800bdb2:	6923      	ldr	r3, [r4, #16]
 800bdb4:	7da0      	ldrb	r0, [r4, #22]
 800bdb6:	f884 9015 	strb.w	r9, [r4, #21]
 800bdba:	1b92      	subs	r2, r2, r6
 800bdbc:	1b9b      	subs	r3, r3, r6
 800bdbe:	60a2      	str	r2, [r4, #8]
 800bdc0:	6123      	str	r3, [r4, #16]
 800bdc2:	f080 0001 	eor.w	r0, r0, #1
 800bdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdca:	68a3      	ldr	r3, [r4, #8]
 800bdcc:	799b      	ldrb	r3, [r3, #6]
 800bdce:	706b      	strb	r3, [r5, #1]
 800bdd0:	1cab      	adds	r3, r5, #2
 800bdd2:	68a2      	ldr	r2, [r4, #8]
 800bdd4:	7952      	ldrb	r2, [r2, #5]
 800bdd6:	f803 2b01 	strb.w	r2, [r3], #1
 800bdda:	68a2      	ldr	r2, [r4, #8]
 800bddc:	7912      	ldrb	r2, [r2, #4]
 800bdde:	f803 2b01 	strb.w	r2, [r3], #1
 800bde2:	68a2      	ldr	r2, [r4, #8]
 800bde4:	78d2      	ldrb	r2, [r2, #3]
 800bde6:	f803 2b01 	strb.w	r2, [r3], #1
 800bdea:	68a2      	ldr	r2, [r4, #8]
 800bdec:	7892      	ldrb	r2, [r2, #2]
 800bdee:	f803 2b01 	strb.w	r2, [r3], #1
 800bdf2:	68a2      	ldr	r2, [r4, #8]
 800bdf4:	7852      	ldrb	r2, [r2, #1]
 800bdf6:	f803 2b01 	strb.w	r2, [r3], #1
 800bdfa:	68a2      	ldr	r2, [r4, #8]
 800bdfc:	7812      	ldrb	r2, [r2, #0]
 800bdfe:	701a      	strb	r2, [r3, #0]
 800be00:	e797      	b.n	800bd32 <ucdr_deserialize_endian_double+0xb6>
 800be02:	4641      	mov	r1, r8
 800be04:	4632      	mov	r2, r6
 800be06:	4628      	mov	r0, r5
 800be08:	f00d f9ef 	bl	80191ea <memcpy>
 800be0c:	68a1      	ldr	r1, [r4, #8]
 800be0e:	4652      	mov	r2, sl
 800be10:	19a8      	adds	r0, r5, r6
 800be12:	f00d f9ea 	bl	80191ea <memcpy>
 800be16:	e78c      	b.n	800bd32 <ucdr_deserialize_endian_double+0xb6>

0800be18 <ucdr_check_buffer_available_for>:
 800be18:	7d83      	ldrb	r3, [r0, #22]
 800be1a:	b93b      	cbnz	r3, 800be2c <ucdr_check_buffer_available_for+0x14>
 800be1c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800be20:	4419      	add	r1, r3
 800be22:	4288      	cmp	r0, r1
 800be24:	bf34      	ite	cc
 800be26:	2000      	movcc	r0, #0
 800be28:	2001      	movcs	r0, #1
 800be2a:	4770      	bx	lr
 800be2c:	2000      	movs	r0, #0
 800be2e:	4770      	bx	lr

0800be30 <ucdr_check_final_buffer_behavior>:
 800be30:	7d83      	ldrb	r3, [r0, #22]
 800be32:	b943      	cbnz	r3, 800be46 <ucdr_check_final_buffer_behavior+0x16>
 800be34:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800be38:	4291      	cmp	r1, r2
 800be3a:	b510      	push	{r4, lr}
 800be3c:	4604      	mov	r4, r0
 800be3e:	d205      	bcs.n	800be4c <ucdr_check_final_buffer_behavior+0x1c>
 800be40:	2301      	movs	r3, #1
 800be42:	4618      	mov	r0, r3
 800be44:	bd10      	pop	{r4, pc}
 800be46:	2300      	movs	r3, #0
 800be48:	4618      	mov	r0, r3
 800be4a:	4770      	bx	lr
 800be4c:	6982      	ldr	r2, [r0, #24]
 800be4e:	b13a      	cbz	r2, 800be60 <ucdr_check_final_buffer_behavior+0x30>
 800be50:	69c1      	ldr	r1, [r0, #28]
 800be52:	4790      	blx	r2
 800be54:	f080 0301 	eor.w	r3, r0, #1
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	75a0      	strb	r0, [r4, #22]
 800be5c:	4618      	mov	r0, r3
 800be5e:	bd10      	pop	{r4, pc}
 800be60:	2001      	movs	r0, #1
 800be62:	75a0      	strb	r0, [r4, #22]
 800be64:	e7fa      	b.n	800be5c <ucdr_check_final_buffer_behavior+0x2c>
 800be66:	bf00      	nop

0800be68 <ucdr_set_on_full_buffer_callback>:
 800be68:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop

0800be70 <ucdr_init_buffer_origin_offset_endian>:
 800be70:	b410      	push	{r4}
 800be72:	9c01      	ldr	r4, [sp, #4]
 800be74:	6001      	str	r1, [r0, #0]
 800be76:	440a      	add	r2, r1
 800be78:	6042      	str	r2, [r0, #4]
 800be7a:	190a      	adds	r2, r1, r4
 800be7c:	441c      	add	r4, r3
 800be7e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800be82:	6082      	str	r2, [r0, #8]
 800be84:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800be88:	7503      	strb	r3, [r0, #20]
 800be8a:	2200      	movs	r2, #0
 800be8c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800be90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be94:	7542      	strb	r2, [r0, #21]
 800be96:	7582      	strb	r2, [r0, #22]
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop

0800be9c <ucdr_init_buffer_origin_offset>:
 800be9c:	b510      	push	{r4, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	9c04      	ldr	r4, [sp, #16]
 800bea2:	9400      	str	r4, [sp, #0]
 800bea4:	2401      	movs	r4, #1
 800bea6:	9401      	str	r4, [sp, #4]
 800bea8:	f7ff ffe2 	bl	800be70 <ucdr_init_buffer_origin_offset_endian>
 800beac:	b002      	add	sp, #8
 800beae:	bd10      	pop	{r4, pc}

0800beb0 <ucdr_init_buffer_origin>:
 800beb0:	b510      	push	{r4, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	2400      	movs	r4, #0
 800beb6:	9400      	str	r4, [sp, #0]
 800beb8:	f7ff fff0 	bl	800be9c <ucdr_init_buffer_origin_offset>
 800bebc:	b002      	add	sp, #8
 800bebe:	bd10      	pop	{r4, pc}

0800bec0 <ucdr_init_buffer>:
 800bec0:	2300      	movs	r3, #0
 800bec2:	f7ff bff5 	b.w	800beb0 <ucdr_init_buffer_origin>
 800bec6:	bf00      	nop

0800bec8 <ucdr_alignment>:
 800bec8:	fbb0 f3f1 	udiv	r3, r0, r1
 800becc:	fb03 0011 	mls	r0, r3, r1, r0
 800bed0:	1a08      	subs	r0, r1, r0
 800bed2:	3901      	subs	r1, #1
 800bed4:	4008      	ands	r0, r1
 800bed6:	4770      	bx	lr

0800bed8 <ucdr_buffer_alignment>:
 800bed8:	7d43      	ldrb	r3, [r0, #21]
 800beda:	428b      	cmp	r3, r1
 800bedc:	d208      	bcs.n	800bef0 <ucdr_buffer_alignment+0x18>
 800bede:	6900      	ldr	r0, [r0, #16]
 800bee0:	fbb0 f3f1 	udiv	r3, r0, r1
 800bee4:	fb01 0013 	mls	r0, r1, r3, r0
 800bee8:	1a08      	subs	r0, r1, r0
 800beea:	3901      	subs	r1, #1
 800beec:	4008      	ands	r0, r1
 800beee:	4770      	bx	lr
 800bef0:	2000      	movs	r0, #0
 800bef2:	4770      	bx	lr

0800bef4 <ucdr_align_to>:
 800bef4:	b538      	push	{r3, r4, r5, lr}
 800bef6:	4604      	mov	r4, r0
 800bef8:	460d      	mov	r5, r1
 800befa:	f7ff ffed 	bl	800bed8 <ucdr_buffer_alignment>
 800befe:	68a3      	ldr	r3, [r4, #8]
 800bf00:	6921      	ldr	r1, [r4, #16]
 800bf02:	7565      	strb	r5, [r4, #21]
 800bf04:	181a      	adds	r2, r3, r0
 800bf06:	6863      	ldr	r3, [r4, #4]
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	4408      	add	r0, r1
 800bf0c:	bf28      	it	cs
 800bf0e:	4613      	movcs	r3, r2
 800bf10:	6120      	str	r0, [r4, #16]
 800bf12:	60a3      	str	r3, [r4, #8]
 800bf14:	bd38      	pop	{r3, r4, r5, pc}
 800bf16:	bf00      	nop

0800bf18 <ucdr_buffer_length>:
 800bf18:	6882      	ldr	r2, [r0, #8]
 800bf1a:	6800      	ldr	r0, [r0, #0]
 800bf1c:	1a10      	subs	r0, r2, r0
 800bf1e:	4770      	bx	lr

0800bf20 <ucdr_buffer_remaining>:
 800bf20:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800bf24:	1a10      	subs	r0, r2, r0
 800bf26:	4770      	bx	lr

0800bf28 <ucdr_check_final_buffer_behavior_array>:
 800bf28:	b538      	push	{r3, r4, r5, lr}
 800bf2a:	7d83      	ldrb	r3, [r0, #22]
 800bf2c:	b963      	cbnz	r3, 800bf48 <ucdr_check_final_buffer_behavior_array+0x20>
 800bf2e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	4604      	mov	r4, r0
 800bf36:	460d      	mov	r5, r1
 800bf38:	d308      	bcc.n	800bf4c <ucdr_check_final_buffer_behavior_array+0x24>
 800bf3a:	b139      	cbz	r1, 800bf4c <ucdr_check_final_buffer_behavior_array+0x24>
 800bf3c:	6983      	ldr	r3, [r0, #24]
 800bf3e:	b163      	cbz	r3, 800bf5a <ucdr_check_final_buffer_behavior_array+0x32>
 800bf40:	69c1      	ldr	r1, [r0, #28]
 800bf42:	4798      	blx	r3
 800bf44:	75a0      	strb	r0, [r4, #22]
 800bf46:	b108      	cbz	r0, 800bf4c <ucdr_check_final_buffer_behavior_array+0x24>
 800bf48:	2000      	movs	r0, #0
 800bf4a:	bd38      	pop	{r3, r4, r5, pc}
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	f7ff ffe7 	bl	800bf20 <ucdr_buffer_remaining>
 800bf52:	42a8      	cmp	r0, r5
 800bf54:	bf28      	it	cs
 800bf56:	4628      	movcs	r0, r5
 800bf58:	bd38      	pop	{r3, r4, r5, pc}
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	7583      	strb	r3, [r0, #22]
 800bf5e:	e7f3      	b.n	800bf48 <ucdr_check_final_buffer_behavior_array+0x20>

0800bf60 <ucdr_advance_buffer>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	4604      	mov	r4, r0
 800bf64:	460d      	mov	r5, r1
 800bf66:	f7ff ff57 	bl	800be18 <ucdr_check_buffer_available_for>
 800bf6a:	b178      	cbz	r0, 800bf8c <ucdr_advance_buffer+0x2c>
 800bf6c:	6923      	ldr	r3, [r4, #16]
 800bf6e:	68a2      	ldr	r2, [r4, #8]
 800bf70:	442b      	add	r3, r5
 800bf72:	6123      	str	r3, [r4, #16]
 800bf74:	2301      	movs	r3, #1
 800bf76:	442a      	add	r2, r5
 800bf78:	7563      	strb	r3, [r4, #21]
 800bf7a:	60a2      	str	r2, [r4, #8]
 800bf7c:	bd38      	pop	{r3, r4, r5, pc}
 800bf7e:	68a2      	ldr	r2, [r4, #8]
 800bf80:	6923      	ldr	r3, [r4, #16]
 800bf82:	4402      	add	r2, r0
 800bf84:	4403      	add	r3, r0
 800bf86:	1a2d      	subs	r5, r5, r0
 800bf88:	60a2      	str	r2, [r4, #8]
 800bf8a:	6123      	str	r3, [r4, #16]
 800bf8c:	4629      	mov	r1, r5
 800bf8e:	2201      	movs	r2, #1
 800bf90:	4620      	mov	r0, r4
 800bf92:	f7ff ffc9 	bl	800bf28 <ucdr_check_final_buffer_behavior_array>
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d1f1      	bne.n	800bf7e <ucdr_advance_buffer+0x1e>
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	7563      	strb	r3, [r4, #21]
 800bf9e:	bd38      	pop	{r3, r4, r5, pc}

0800bfa0 <rcl_get_zero_initialized_init_options>:
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	4770      	bx	lr

0800bfa4 <rcl_init_options_init>:
 800bfa4:	b084      	sub	sp, #16
 800bfa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfa8:	b097      	sub	sp, #92	@ 0x5c
 800bfaa:	ae1d      	add	r6, sp, #116	@ 0x74
 800bfac:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	d058      	beq.n	800c066 <rcl_init_options_init+0xc2>
 800bfb4:	6803      	ldr	r3, [r0, #0]
 800bfb6:	4605      	mov	r5, r0
 800bfb8:	b133      	cbz	r3, 800bfc8 <rcl_init_options_init+0x24>
 800bfba:	2464      	movs	r4, #100	@ 0x64
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	b017      	add	sp, #92	@ 0x5c
 800bfc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bfc4:	b004      	add	sp, #16
 800bfc6:	4770      	bx	lr
 800bfc8:	4630      	mov	r0, r6
 800bfca:	f001 f99b 	bl	800d304 <rcutils_allocator_is_valid>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d049      	beq.n	800c066 <rcl_init_options_init+0xc2>
 800bfd2:	46b4      	mov	ip, r6
 800bfd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bfd8:	ac11      	add	r4, sp, #68	@ 0x44
 800bfda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bfdc:	f8dc 3000 	ldr.w	r3, [ip]
 800bfe0:	6023      	str	r3, [r4, #0]
 800bfe2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800bfe4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bfe6:	2050      	movs	r0, #80	@ 0x50
 800bfe8:	4798      	blx	r3
 800bfea:	4604      	mov	r4, r0
 800bfec:	6028      	str	r0, [r5, #0]
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d03b      	beq.n	800c06a <rcl_init_options_init+0xc6>
 800bff2:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800bff6:	4686      	mov	lr, r0
 800bff8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bffc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c000:	f8dc 3000 	ldr.w	r3, [ip]
 800c004:	f8ce 3000 	str.w	r3, [lr]
 800c008:	a802      	add	r0, sp, #8
 800c00a:	f001 fa0d 	bl	800d428 <rmw_get_zero_initialized_init_options>
 800c00e:	f10d 0e08 	add.w	lr, sp, #8
 800c012:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c016:	f104 0c18 	add.w	ip, r4, #24
 800c01a:	682f      	ldr	r7, [r5, #0]
 800c01c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c020:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c024:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c028:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c02c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c030:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c034:	ac20      	add	r4, sp, #128	@ 0x80
 800c036:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c03a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c03e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c042:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c046:	f107 0018 	add.w	r0, r7, #24
 800c04a:	f001 fa1b 	bl	800d484 <rmw_init_options_init>
 800c04e:	4604      	mov	r4, r0
 800c050:	2800      	cmp	r0, #0
 800c052:	d0b3      	beq.n	800bfbc <rcl_init_options_init+0x18>
 800c054:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c056:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c058:	6828      	ldr	r0, [r5, #0]
 800c05a:	4798      	blx	r3
 800c05c:	4620      	mov	r0, r4
 800c05e:	f007 f8b5 	bl	80131cc <rcl_convert_rmw_ret_to_rcl_ret>
 800c062:	4604      	mov	r4, r0
 800c064:	e7aa      	b.n	800bfbc <rcl_init_options_init+0x18>
 800c066:	240b      	movs	r4, #11
 800c068:	e7a8      	b.n	800bfbc <rcl_init_options_init+0x18>
 800c06a:	240a      	movs	r4, #10
 800c06c:	e7a6      	b.n	800bfbc <rcl_init_options_init+0x18>
 800c06e:	bf00      	nop

0800c070 <rcl_init_options_fini>:
 800c070:	b530      	push	{r4, r5, lr}
 800c072:	b087      	sub	sp, #28
 800c074:	b1f0      	cbz	r0, 800c0b4 <rcl_init_options_fini+0x44>
 800c076:	6803      	ldr	r3, [r0, #0]
 800c078:	4604      	mov	r4, r0
 800c07a:	b1db      	cbz	r3, 800c0b4 <rcl_init_options_fini+0x44>
 800c07c:	469c      	mov	ip, r3
 800c07e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c082:	f10d 0e04 	add.w	lr, sp, #4
 800c086:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c08a:	f8dc 3000 	ldr.w	r3, [ip]
 800c08e:	f8ce 3000 	str.w	r3, [lr]
 800c092:	a801      	add	r0, sp, #4
 800c094:	f001 f936 	bl	800d304 <rcutils_allocator_is_valid>
 800c098:	b160      	cbz	r0, 800c0b4 <rcl_init_options_fini+0x44>
 800c09a:	6820      	ldr	r0, [r4, #0]
 800c09c:	3018      	adds	r0, #24
 800c09e:	f001 faa1 	bl	800d5e4 <rmw_init_options_fini>
 800c0a2:	4605      	mov	r5, r0
 800c0a4:	b950      	cbnz	r0, 800c0bc <rcl_init_options_fini+0x4c>
 800c0a6:	6820      	ldr	r0, [r4, #0]
 800c0a8:	9b02      	ldr	r3, [sp, #8]
 800c0aa:	9905      	ldr	r1, [sp, #20]
 800c0ac:	4798      	blx	r3
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	b007      	add	sp, #28
 800c0b2:	bd30      	pop	{r4, r5, pc}
 800c0b4:	250b      	movs	r5, #11
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	b007      	add	sp, #28
 800c0ba:	bd30      	pop	{r4, r5, pc}
 800c0bc:	f007 f886 	bl	80131cc <rcl_convert_rmw_ret_to_rcl_ret>
 800c0c0:	4605      	mov	r5, r0
 800c0c2:	e7f8      	b.n	800c0b6 <rcl_init_options_fini+0x46>

0800c0c4 <rcl_init_options_copy>:
 800c0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c8:	b094      	sub	sp, #80	@ 0x50
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	d058      	beq.n	800c180 <rcl_init_options_copy+0xbc>
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	6800      	ldr	r0, [r0, #0]
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	d054      	beq.n	800c180 <rcl_init_options_copy+0xbc>
 800c0d6:	460e      	mov	r6, r1
 800c0d8:	f001 f914 	bl	800d304 <rcutils_allocator_is_valid>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	d04f      	beq.n	800c180 <rcl_init_options_copy+0xbc>
 800c0e0:	2e00      	cmp	r6, #0
 800c0e2:	d04d      	beq.n	800c180 <rcl_init_options_copy+0xbc>
 800c0e4:	6833      	ldr	r3, [r6, #0]
 800c0e6:	b123      	cbz	r3, 800c0f2 <rcl_init_options_copy+0x2e>
 800c0e8:	2464      	movs	r4, #100	@ 0x64
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	b014      	add	sp, #80	@ 0x50
 800c0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f2:	6827      	ldr	r7, [r4, #0]
 800c0f4:	46bc      	mov	ip, r7
 800c0f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c0fa:	ad0f      	add	r5, sp, #60	@ 0x3c
 800c0fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c0fe:	f8dc 3000 	ldr.w	r3, [ip]
 800c102:	f8d7 8000 	ldr.w	r8, [r7]
 800c106:	602b      	str	r3, [r5, #0]
 800c108:	4619      	mov	r1, r3
 800c10a:	2050      	movs	r0, #80	@ 0x50
 800c10c:	47c0      	blx	r8
 800c10e:	4605      	mov	r5, r0
 800c110:	6030      	str	r0, [r6, #0]
 800c112:	b3d0      	cbz	r0, 800c18a <rcl_init_options_copy+0xc6>
 800c114:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800c118:	4686      	mov	lr, r0
 800c11a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c11e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c122:	f8dc 3000 	ldr.w	r3, [ip]
 800c126:	f8ce 3000 	str.w	r3, [lr]
 800c12a:	4668      	mov	r0, sp
 800c12c:	f001 f97c 	bl	800d428 <rmw_get_zero_initialized_init_options>
 800c130:	46ee      	mov	lr, sp
 800c132:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c136:	f105 0c18 	add.w	ip, r5, #24
 800c13a:	6824      	ldr	r4, [r4, #0]
 800c13c:	6835      	ldr	r5, [r6, #0]
 800c13e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c142:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c146:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c14a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c14e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c152:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c156:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c15a:	f104 0018 	add.w	r0, r4, #24
 800c15e:	f105 0118 	add.w	r1, r5, #24
 800c162:	f001 f9f7 	bl	800d554 <rmw_init_options_copy>
 800c166:	4604      	mov	r4, r0
 800c168:	2800      	cmp	r0, #0
 800c16a:	d0be      	beq.n	800c0ea <rcl_init_options_copy+0x26>
 800c16c:	f001 f8d8 	bl	800d320 <rcutils_get_error_string>
 800c170:	f001 f8ee 	bl	800d350 <rcutils_reset_error>
 800c174:	4630      	mov	r0, r6
 800c176:	f7ff ff7b 	bl	800c070 <rcl_init_options_fini>
 800c17a:	b140      	cbz	r0, 800c18e <rcl_init_options_copy+0xca>
 800c17c:	4604      	mov	r4, r0
 800c17e:	e7b4      	b.n	800c0ea <rcl_init_options_copy+0x26>
 800c180:	240b      	movs	r4, #11
 800c182:	4620      	mov	r0, r4
 800c184:	b014      	add	sp, #80	@ 0x50
 800c186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c18a:	240a      	movs	r4, #10
 800c18c:	e7ad      	b.n	800c0ea <rcl_init_options_copy+0x26>
 800c18e:	4620      	mov	r0, r4
 800c190:	b014      	add	sp, #80	@ 0x50
 800c192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c196:	f007 b819 	b.w	80131cc <rcl_convert_rmw_ret_to_rcl_ret>
 800c19a:	bf00      	nop

0800c19c <rcl_init_options_set_domain_id>:
 800c19c:	b120      	cbz	r0, 800c1a8 <rcl_init_options_set_domain_id+0xc>
 800c19e:	6803      	ldr	r3, [r0, #0]
 800c1a0:	b113      	cbz	r3, 800c1a8 <rcl_init_options_set_domain_id+0xc>
 800c1a2:	6259      	str	r1, [r3, #36]	@ 0x24
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	4770      	bx	lr
 800c1a8:	200b      	movs	r0, #11
 800c1aa:	4770      	bx	lr

0800c1ac <rcl_get_zero_initialized_publisher>:
 800c1ac:	4b01      	ldr	r3, [pc, #4]	@ (800c1b4 <rcl_get_zero_initialized_publisher+0x8>)
 800c1ae:	6818      	ldr	r0, [r3, #0]
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop
 800c1b4:	0801aab4 	.word	0x0801aab4

0800c1b8 <rcl_publisher_init>:
 800c1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1bc:	b088      	sub	sp, #32
 800c1be:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c1c0:	2d00      	cmp	r5, #0
 800c1c2:	d069      	beq.n	800c298 <rcl_publisher_init+0xe0>
 800c1c4:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	4648      	mov	r0, r9
 800c1cc:	460e      	mov	r6, r1
 800c1ce:	4690      	mov	r8, r2
 800c1d0:	461f      	mov	r7, r3
 800c1d2:	f001 f897 	bl	800d304 <rcutils_allocator_is_valid>
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	d05e      	beq.n	800c298 <rcl_publisher_init+0xe0>
 800c1da:	2c00      	cmp	r4, #0
 800c1dc:	d05c      	beq.n	800c298 <rcl_publisher_init+0xe0>
 800c1de:	f8d4 a000 	ldr.w	sl, [r4]
 800c1e2:	f1ba 0f00 	cmp.w	sl, #0
 800c1e6:	d004      	beq.n	800c1f2 <rcl_publisher_init+0x3a>
 800c1e8:	2764      	movs	r7, #100	@ 0x64
 800c1ea:	4638      	mov	r0, r7
 800c1ec:	b008      	add	sp, #32
 800c1ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	f007 fae4 	bl	80137c0 <rcl_node_is_valid>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d052      	beq.n	800c2a2 <rcl_publisher_init+0xea>
 800c1fc:	f1b8 0f00 	cmp.w	r8, #0
 800c200:	d04a      	beq.n	800c298 <rcl_publisher_init+0xe0>
 800c202:	2f00      	cmp	r7, #0
 800c204:	d048      	beq.n	800c298 <rcl_publisher_init+0xe0>
 800c206:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800c20a:	aa07      	add	r2, sp, #28
 800c20c:	9205      	str	r2, [sp, #20]
 800c20e:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800c212:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c216:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c21a:	f8cd a01c 	str.w	sl, [sp, #28]
 800c21e:	4639      	mov	r1, r7
 800c220:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c224:	4630      	mov	r0, r6
 800c226:	f007 fb1f 	bl	8013868 <rcl_node_resolve_name>
 800c22a:	4607      	mov	r7, r0
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d14f      	bne.n	800c2d0 <rcl_publisher_init+0x118>
 800c230:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c232:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c234:	20c8      	movs	r0, #200	@ 0xc8
 800c236:	4798      	blx	r3
 800c238:	6020      	str	r0, [r4, #0]
 800c23a:	2800      	cmp	r0, #0
 800c23c:	d04e      	beq.n	800c2dc <rcl_publisher_init+0x124>
 800c23e:	4630      	mov	r0, r6
 800c240:	f007 fae0 	bl	8013804 <rcl_node_get_rmw_handle>
 800c244:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	9a07      	ldr	r2, [sp, #28]
 800c24c:	6827      	ldr	r7, [r4, #0]
 800c24e:	462b      	mov	r3, r5
 800c250:	4641      	mov	r1, r8
 800c252:	f001 fcef 	bl	800dc34 <rmw_create_publisher>
 800c256:	6823      	ldr	r3, [r4, #0]
 800c258:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800c25c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c260:	b370      	cbz	r0, 800c2c0 <rcl_publisher_init+0x108>
 800c262:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c266:	f001 fdc3 	bl	800ddf0 <rmw_publisher_get_actual_qos>
 800c26a:	6823      	ldr	r3, [r4, #0]
 800c26c:	4607      	mov	r7, r0
 800c26e:	b9d0      	cbnz	r0, 800c2a6 <rcl_publisher_init+0xee>
 800c270:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c274:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c278:	4629      	mov	r1, r5
 800c27a:	2270      	movs	r2, #112	@ 0x70
 800c27c:	4618      	mov	r0, r3
 800c27e:	f00c ffb4 	bl	80191ea <memcpy>
 800c282:	6832      	ldr	r2, [r6, #0]
 800c284:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c288:	9807      	ldr	r0, [sp, #28]
 800c28a:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c28c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c28e:	4798      	blx	r3
 800c290:	4638      	mov	r0, r7
 800c292:	b008      	add	sp, #32
 800c294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c298:	270b      	movs	r7, #11
 800c29a:	4638      	mov	r0, r7
 800c29c:	b008      	add	sp, #32
 800c29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2a2:	27c8      	movs	r7, #200	@ 0xc8
 800c2a4:	e7a1      	b.n	800c1ea <rcl_publisher_init+0x32>
 800c2a6:	b18b      	cbz	r3, 800c2cc <rcl_publisher_init+0x114>
 800c2a8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c2ac:	b142      	cbz	r2, 800c2c0 <rcl_publisher_init+0x108>
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	f007 faa8 	bl	8013804 <rcl_node_get_rmw_handle>
 800c2b4:	6823      	ldr	r3, [r4, #0]
 800c2b6:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c2ba:	f001 fda9 	bl	800de10 <rmw_destroy_publisher>
 800c2be:	6823      	ldr	r3, [r4, #0]
 800c2c0:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c2c2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	4790      	blx	r2
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	6023      	str	r3, [r4, #0]
 800c2cc:	2701      	movs	r7, #1
 800c2ce:	e7db      	b.n	800c288 <rcl_publisher_init+0xd0>
 800c2d0:	2867      	cmp	r0, #103	@ 0x67
 800c2d2:	d0d9      	beq.n	800c288 <rcl_publisher_init+0xd0>
 800c2d4:	2869      	cmp	r0, #105	@ 0x69
 800c2d6:	d003      	beq.n	800c2e0 <rcl_publisher_init+0x128>
 800c2d8:	280a      	cmp	r0, #10
 800c2da:	d1f7      	bne.n	800c2cc <rcl_publisher_init+0x114>
 800c2dc:	270a      	movs	r7, #10
 800c2de:	e7d3      	b.n	800c288 <rcl_publisher_init+0xd0>
 800c2e0:	2767      	movs	r7, #103	@ 0x67
 800c2e2:	e7d1      	b.n	800c288 <rcl_publisher_init+0xd0>

0800c2e4 <rcl_publisher_get_default_options>:
 800c2e4:	b570      	push	{r4, r5, r6, lr}
 800c2e6:	4d14      	ldr	r5, [pc, #80]	@ (800c338 <rcl_publisher_get_default_options+0x54>)
 800c2e8:	4914      	ldr	r1, [pc, #80]	@ (800c33c <rcl_publisher_get_default_options+0x58>)
 800c2ea:	b088      	sub	sp, #32
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	2250      	movs	r2, #80	@ 0x50
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	f00c ff7a 	bl	80191ea <memcpy>
 800c2f6:	a802      	add	r0, sp, #8
 800c2f8:	f000 fff6 	bl	800d2e8 <rcutils_get_default_allocator>
 800c2fc:	f10d 0c08 	add.w	ip, sp, #8
 800c300:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c304:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c308:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c30c:	466e      	mov	r6, sp
 800c30e:	f8dc 3000 	ldr.w	r3, [ip]
 800c312:	f8ce 3000 	str.w	r3, [lr]
 800c316:	4630      	mov	r0, r6
 800c318:	f001 f896 	bl	800d448 <rmw_get_default_publisher_options>
 800c31c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c320:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c324:	e883 0003 	stmia.w	r3, {r0, r1}
 800c328:	2270      	movs	r2, #112	@ 0x70
 800c32a:	4629      	mov	r1, r5
 800c32c:	4620      	mov	r0, r4
 800c32e:	f00c ff5c 	bl	80191ea <memcpy>
 800c332:	4620      	mov	r0, r4
 800c334:	b008      	add	sp, #32
 800c336:	bd70      	pop	{r4, r5, r6, pc}
 800c338:	200069e8 	.word	0x200069e8
 800c33c:	0801aab8 	.word	0x0801aab8

0800c340 <rcl_publish>:
 800c340:	b1f8      	cbz	r0, 800c382 <rcl_publish+0x42>
 800c342:	6803      	ldr	r3, [r0, #0]
 800c344:	b570      	push	{r4, r5, r6, lr}
 800c346:	4604      	mov	r4, r0
 800c348:	b1b3      	cbz	r3, 800c378 <rcl_publish+0x38>
 800c34a:	4616      	mov	r6, r2
 800c34c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c350:	b192      	cbz	r2, 800c378 <rcl_publish+0x38>
 800c352:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c356:	460d      	mov	r5, r1
 800c358:	f006 ff56 	bl	8013208 <rcl_context_is_valid>
 800c35c:	b160      	cbz	r0, 800c378 <rcl_publish+0x38>
 800c35e:	6823      	ldr	r3, [r4, #0]
 800c360:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c364:	b140      	cbz	r0, 800c378 <rcl_publish+0x38>
 800c366:	b155      	cbz	r5, 800c37e <rcl_publish+0x3e>
 800c368:	4632      	mov	r2, r6
 800c36a:	4629      	mov	r1, r5
 800c36c:	f001 fc02 	bl	800db74 <rmw_publish>
 800c370:	3800      	subs	r0, #0
 800c372:	bf18      	it	ne
 800c374:	2001      	movne	r0, #1
 800c376:	bd70      	pop	{r4, r5, r6, pc}
 800c378:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c37c:	bd70      	pop	{r4, r5, r6, pc}
 800c37e:	200b      	movs	r0, #11
 800c380:	bd70      	pop	{r4, r5, r6, pc}
 800c382:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c386:	4770      	bx	lr

0800c388 <rcl_publisher_is_valid>:
 800c388:	b1a0      	cbz	r0, 800c3b4 <rcl_publisher_is_valid+0x2c>
 800c38a:	6803      	ldr	r3, [r0, #0]
 800c38c:	b510      	push	{r4, lr}
 800c38e:	4604      	mov	r4, r0
 800c390:	b173      	cbz	r3, 800c3b0 <rcl_publisher_is_valid+0x28>
 800c392:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c396:	b15a      	cbz	r2, 800c3b0 <rcl_publisher_is_valid+0x28>
 800c398:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c39c:	f006 ff34 	bl	8013208 <rcl_context_is_valid>
 800c3a0:	b130      	cbz	r0, 800c3b0 <rcl_publisher_is_valid+0x28>
 800c3a2:	6823      	ldr	r3, [r4, #0]
 800c3a4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c3a8:	3800      	subs	r0, #0
 800c3aa:	bf18      	it	ne
 800c3ac:	2001      	movne	r0, #1
 800c3ae:	bd10      	pop	{r4, pc}
 800c3b0:	2000      	movs	r0, #0
 800c3b2:	bd10      	pop	{r4, pc}
 800c3b4:	2000      	movs	r0, #0
 800c3b6:	4770      	bx	lr

0800c3b8 <rcl_publisher_is_valid_except_context>:
 800c3b8:	b130      	cbz	r0, 800c3c8 <rcl_publisher_is_valid_except_context+0x10>
 800c3ba:	6800      	ldr	r0, [r0, #0]
 800c3bc:	b120      	cbz	r0, 800c3c8 <rcl_publisher_is_valid_except_context+0x10>
 800c3be:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c3c2:	3800      	subs	r0, #0
 800c3c4:	bf18      	it	ne
 800c3c6:	2001      	movne	r0, #1
 800c3c8:	4770      	bx	lr
 800c3ca:	bf00      	nop

0800c3cc <_rclc_check_for_new_data>:
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d046      	beq.n	800c45e <_rclc_check_for_new_data+0x92>
 800c3d0:	b510      	push	{r4, lr}
 800c3d2:	7802      	ldrb	r2, [r0, #0]
 800c3d4:	b084      	sub	sp, #16
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2a0a      	cmp	r2, #10
 800c3da:	d842      	bhi.n	800c462 <_rclc_check_for_new_data+0x96>
 800c3dc:	e8df f002 	tbb	[pc, r2]
 800c3e0:	14181212 	.word	0x14181212
 800c3e4:	06060614 	.word	0x06060614
 800c3e8:	2e1a      	.short	0x2e1a
 800c3ea:	16          	.byte	0x16
 800c3eb:	00          	.byte	0x00
 800c3ec:	6a0a      	ldr	r2, [r1, #32]
 800c3ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c3f0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	1a12      	subs	r2, r2, r0
 800c3f8:	bf18      	it	ne
 800c3fa:	2201      	movne	r2, #1
 800c3fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c400:	b004      	add	sp, #16
 800c402:	bd10      	pop	{r4, pc}
 800c404:	680a      	ldr	r2, [r1, #0]
 800c406:	e7f2      	b.n	800c3ee <_rclc_check_for_new_data+0x22>
 800c408:	698a      	ldr	r2, [r1, #24]
 800c40a:	e7f0      	b.n	800c3ee <_rclc_check_for_new_data+0x22>
 800c40c:	688a      	ldr	r2, [r1, #8]
 800c40e:	e7ee      	b.n	800c3ee <_rclc_check_for_new_data+0x22>
 800c410:	690a      	ldr	r2, [r1, #16]
 800c412:	e7ec      	b.n	800c3ee <_rclc_check_for_new_data+0x22>
 800c414:	685c      	ldr	r4, [r3, #4]
 800c416:	4608      	mov	r0, r1
 800c418:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c41c:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c420:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c424:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c428:	9300      	str	r3, [sp, #0]
 800c42a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c42e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c432:	f104 0110 	add.w	r1, r4, #16
 800c436:	f009 f8c7 	bl	80155c8 <rcl_action_client_wait_set_get_entities_ready>
 800c43a:	e7e1      	b.n	800c400 <_rclc_check_for_new_data+0x34>
 800c43c:	685c      	ldr	r4, [r3, #4]
 800c43e:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c442:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c446:	e9cd 3200 	strd	r3, r2, [sp]
 800c44a:	4608      	mov	r0, r1
 800c44c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c450:	f104 0220 	add.w	r2, r4, #32
 800c454:	f104 0110 	add.w	r1, r4, #16
 800c458:	f009 face 	bl	80159f8 <rcl_action_server_wait_set_get_entities_ready>
 800c45c:	e7d0      	b.n	800c400 <_rclc_check_for_new_data+0x34>
 800c45e:	200b      	movs	r0, #11
 800c460:	4770      	bx	lr
 800c462:	2001      	movs	r0, #1
 800c464:	e7cc      	b.n	800c400 <_rclc_check_for_new_data+0x34>
 800c466:	bf00      	nop

0800c468 <_rclc_take_new_data>:
 800c468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c46a:	b09b      	sub	sp, #108	@ 0x6c
 800c46c:	2800      	cmp	r0, #0
 800c46e:	f000 8088 	beq.w	800c582 <_rclc_take_new_data+0x11a>
 800c472:	7803      	ldrb	r3, [r0, #0]
 800c474:	4604      	mov	r4, r0
 800c476:	2b0a      	cmp	r3, #10
 800c478:	f200 8167 	bhi.w	800c74a <_rclc_take_new_data+0x2e2>
 800c47c:	e8df f003 	tbb	[pc, r3]
 800c480:	44152d2d 	.word	0x44152d2d
 800c484:	19191944 	.word	0x19191944
 800c488:	065a      	.short	0x065a
 800c48a:	15          	.byte	0x15
 800c48b:	00          	.byte	0x00
 800c48c:	6840      	ldr	r0, [r0, #4]
 800c48e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c492:	2b00      	cmp	r3, #0
 800c494:	f040 80b2 	bne.w	800c5fc <_rclc_take_new_data+0x194>
 800c498:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f040 80e4 	bne.w	800c66a <_rclc_take_new_data+0x202>
 800c4a2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d16f      	bne.n	800c58a <_rclc_take_new_data+0x122>
 800c4aa:	2500      	movs	r5, #0
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	b01b      	add	sp, #108	@ 0x6c
 800c4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4b2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c4b4:	6a0b      	ldr	r3, [r1, #32]
 800c4b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d0f5      	beq.n	800c4aa <_rclc_take_new_data+0x42>
 800c4be:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c4c2:	f104 0110 	add.w	r1, r4, #16
 800c4c6:	f007 fc2b 	bl	8013d20 <rcl_take_request>
 800c4ca:	4605      	mov	r5, r0
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d0ec      	beq.n	800c4aa <_rclc_take_new_data+0x42>
 800c4d0:	f240 2359 	movw	r3, #601	@ 0x259
 800c4d4:	4298      	cmp	r0, r3
 800c4d6:	d013      	beq.n	800c500 <_rclc_take_new_data+0x98>
 800c4d8:	e029      	b.n	800c52e <_rclc_take_new_data+0xc6>
 800c4da:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c4dc:	680b      	ldr	r3, [r1, #0]
 800c4de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d0e1      	beq.n	800c4aa <_rclc_take_new_data+0x42>
 800c4e6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	aa0a      	add	r2, sp, #40	@ 0x28
 800c4ee:	f007 fc79 	bl	8013de4 <rcl_take>
 800c4f2:	4605      	mov	r5, r0
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	d0d9      	beq.n	800c4ac <_rclc_take_new_data+0x44>
 800c4f8:	f240 1391 	movw	r3, #401	@ 0x191
 800c4fc:	4298      	cmp	r0, r3
 800c4fe:	d116      	bne.n	800c52e <_rclc_take_new_data+0xc6>
 800c500:	2300      	movs	r3, #0
 800c502:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c506:	e7d1      	b.n	800c4ac <_rclc_take_new_data+0x44>
 800c508:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c50a:	698b      	ldr	r3, [r1, #24]
 800c50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d0ca      	beq.n	800c4aa <_rclc_take_new_data+0x42>
 800c514:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c518:	f104 0110 	add.w	r1, r4, #16
 800c51c:	f006 fe04 	bl	8013128 <rcl_take_response>
 800c520:	4605      	mov	r5, r0
 800c522:	2800      	cmp	r0, #0
 800c524:	d0c1      	beq.n	800c4aa <_rclc_take_new_data+0x42>
 800c526:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c52a:	4298      	cmp	r0, r3
 800c52c:	d0be      	beq.n	800c4ac <_rclc_take_new_data+0x44>
 800c52e:	f000 ff0f 	bl	800d350 <rcutils_reset_error>
 800c532:	e7bb      	b.n	800c4ac <_rclc_take_new_data+0x44>
 800c534:	6840      	ldr	r0, [r0, #4]
 800c536:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d17d      	bne.n	800c63a <_rclc_take_new_data+0x1d2>
 800c53e:	69c3      	ldr	r3, [r0, #28]
 800c540:	b11b      	cbz	r3, 800c54a <_rclc_take_new_data+0xe2>
 800c542:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c546:	2b00      	cmp	r3, #0
 800c548:	d144      	bne.n	800c5d4 <_rclc_take_new_data+0x16c>
 800c54a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c54e:	2b00      	cmp	r3, #0
 800c550:	f040 80ac 	bne.w	800c6ac <_rclc_take_new_data+0x244>
 800c554:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d0a6      	beq.n	800c4aa <_rclc_take_new_data+0x42>
 800c55c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c55e:	a90a      	add	r1, sp, #40	@ 0x28
 800c560:	3010      	adds	r0, #16
 800c562:	f008 ff09 	bl	8015378 <rcl_action_take_result_response>
 800c566:	4605      	mov	r5, r0
 800c568:	2800      	cmp	r0, #0
 800c56a:	d1e0      	bne.n	800c52e <_rclc_take_new_data+0xc6>
 800c56c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c570:	6860      	ldr	r0, [r4, #4]
 800c572:	f009 fb65 	bl	8015c40 <rclc_action_find_handle_by_result_request_sequence_number>
 800c576:	2800      	cmp	r0, #0
 800c578:	d098      	beq.n	800c4ac <_rclc_take_new_data+0x44>
 800c57a:	2301      	movs	r3, #1
 800c57c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c580:	e794      	b.n	800c4ac <_rclc_take_new_data+0x44>
 800c582:	250b      	movs	r5, #11
 800c584:	4628      	mov	r0, r5
 800c586:	b01b      	add	sp, #108	@ 0x6c
 800c588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c58a:	ae04      	add	r6, sp, #16
 800c58c:	aa0a      	add	r2, sp, #40	@ 0x28
 800c58e:	3010      	adds	r0, #16
 800c590:	4631      	mov	r1, r6
 800c592:	f009 f965 	bl	8015860 <rcl_action_take_cancel_request>
 800c596:	4605      	mov	r5, r0
 800c598:	2800      	cmp	r0, #0
 800c59a:	d1c8      	bne.n	800c52e <_rclc_take_new_data+0xc6>
 800c59c:	6860      	ldr	r0, [r4, #4]
 800c59e:	a90a      	add	r1, sp, #40	@ 0x28
 800c5a0:	f009 fb0c 	bl	8015bbc <rclc_action_find_goal_handle_by_uuid>
 800c5a4:	4607      	mov	r7, r0
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	f000 80bb 	beq.w	800c722 <_rclc_take_new_data+0x2ba>
 800c5ac:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c5b0:	2101      	movs	r1, #1
 800c5b2:	f009 fa8d 	bl	8015ad0 <rcl_action_transition_goal_state>
 800c5b6:	2803      	cmp	r0, #3
 800c5b8:	4684      	mov	ip, r0
 800c5ba:	f040 80a7 	bne.w	800c70c <_rclc_take_new_data+0x2a4>
 800c5be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c5c0:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800c5c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5c6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c5ca:	e884 0003 	stmia.w	r4, {r0, r1}
 800c5ce:	f887 c008 	strb.w	ip, [r7, #8]
 800c5d2:	e76b      	b.n	800c4ac <_rclc_take_new_data+0x44>
 800c5d4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c5d6:	3010      	adds	r0, #16
 800c5d8:	f008 ff4e 	bl	8015478 <rcl_action_take_feedback>
 800c5dc:	4605      	mov	r5, r0
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	d1a5      	bne.n	800c52e <_rclc_take_new_data+0xc6>
 800c5e2:	6860      	ldr	r0, [r4, #4]
 800c5e4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c5e6:	f009 fae9 	bl	8015bbc <rclc_action_find_goal_handle_by_uuid>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	f000 80a3 	beq.w	800c738 <_rclc_take_new_data+0x2d0>
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	6860      	ldr	r0, [r4, #4]
 800c5f6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c5fa:	e7a6      	b.n	800c54a <_rclc_take_new_data+0xe2>
 800c5fc:	f009 fab8 	bl	8015b70 <rclc_action_take_goal_handle>
 800c600:	4606      	mov	r6, r0
 800c602:	6860      	ldr	r0, [r4, #4]
 800c604:	2e00      	cmp	r6, #0
 800c606:	f43f af47 	beq.w	800c498 <_rclc_take_new_data+0x30>
 800c60a:	6070      	str	r0, [r6, #4]
 800c60c:	69f2      	ldr	r2, [r6, #28]
 800c60e:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c612:	3010      	adds	r0, #16
 800c614:	f009 f86c 	bl	80156f0 <rcl_action_take_goal_request>
 800c618:	4605      	mov	r5, r0
 800c61a:	2800      	cmp	r0, #0
 800c61c:	f040 808e 	bne.w	800c73c <_rclc_take_new_data+0x2d4>
 800c620:	69f7      	ldr	r7, [r6, #28]
 800c622:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c624:	7235      	strb	r5, [r6, #8]
 800c626:	f8c6 0009 	str.w	r0, [r6, #9]
 800c62a:	f8c6 100d 	str.w	r1, [r6, #13]
 800c62e:	6860      	ldr	r0, [r4, #4]
 800c630:	f8c6 2011 	str.w	r2, [r6, #17]
 800c634:	f8c6 3015 	str.w	r3, [r6, #21]
 800c638:	e72e      	b.n	800c498 <_rclc_take_new_data+0x30>
 800c63a:	aa04      	add	r2, sp, #16
 800c63c:	a90a      	add	r1, sp, #40	@ 0x28
 800c63e:	3010      	adds	r0, #16
 800c640:	f008 fe22 	bl	8015288 <rcl_action_take_goal_response>
 800c644:	4605      	mov	r5, r0
 800c646:	2800      	cmp	r0, #0
 800c648:	f47f af71 	bne.w	800c52e <_rclc_take_new_data+0xc6>
 800c64c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c650:	6860      	ldr	r0, [r4, #4]
 800c652:	f009 fae3 	bl	8015c1c <rclc_action_find_handle_by_goal_request_sequence_number>
 800c656:	b130      	cbz	r0, 800c666 <_rclc_take_new_data+0x1fe>
 800c658:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c65c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c660:	2201      	movs	r2, #1
 800c662:	f880 2020 	strb.w	r2, [r0, #32]
 800c666:	6860      	ldr	r0, [r4, #4]
 800c668:	e769      	b.n	800c53e <_rclc_take_new_data+0xd6>
 800c66a:	aa04      	add	r2, sp, #16
 800c66c:	3010      	adds	r0, #16
 800c66e:	a90a      	add	r1, sp, #40	@ 0x28
 800c670:	f009 f8b6 	bl	80157e0 <rcl_action_take_result_request>
 800c674:	4605      	mov	r5, r0
 800c676:	2800      	cmp	r0, #0
 800c678:	f47f af59 	bne.w	800c52e <_rclc_take_new_data+0xc6>
 800c67c:	6860      	ldr	r0, [r4, #4]
 800c67e:	a904      	add	r1, sp, #16
 800c680:	f009 fa9c 	bl	8015bbc <rclc_action_find_goal_handle_by_uuid>
 800c684:	4607      	mov	r7, r0
 800c686:	b160      	cbz	r0, 800c6a2 <_rclc_take_new_data+0x23a>
 800c688:	ad0a      	add	r5, sp, #40	@ 0x28
 800c68a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c68e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c690:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c692:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c696:	f04f 0c02 	mov.w	ip, #2
 800c69a:	e886 0003 	stmia.w	r6, {r0, r1}
 800c69e:	f887 c008 	strb.w	ip, [r7, #8]
 800c6a2:	6860      	ldr	r0, [r4, #4]
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c6aa:	e6fa      	b.n	800c4a2 <_rclc_take_new_data+0x3a>
 800c6ac:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c6b0:	a90a      	add	r1, sp, #40	@ 0x28
 800c6b2:	3010      	adds	r0, #16
 800c6b4:	f008 fea0 	bl	80153f8 <rcl_action_take_cancel_response>
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	f47f af37 	bne.w	800c52e <_rclc_take_new_data+0xc6>
 800c6c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c6c4:	6860      	ldr	r0, [r4, #4]
 800c6c6:	f009 facd 	bl	8015c64 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c6ca:	4606      	mov	r6, r0
 800c6cc:	6860      	ldr	r0, [r4, #4]
 800c6ce:	2e00      	cmp	r6, #0
 800c6d0:	f43f af40 	beq.w	800c554 <_rclc_take_new_data+0xec>
 800c6d4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c6d6:	2701      	movs	r7, #1
 800c6d8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f43f af3a 	beq.w	800c554 <_rclc_take_new_data+0xec>
 800c6e0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c6e2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c6e6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c6ea:	f009 fa67 	bl	8015bbc <rclc_action_find_goal_handle_by_uuid>
 800c6ee:	b138      	cbz	r0, 800c700 <_rclc_take_new_data+0x298>
 800c6f0:	6860      	ldr	r0, [r4, #4]
 800c6f2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c6f4:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c6f8:	3501      	adds	r5, #1
 800c6fa:	42ab      	cmp	r3, r5
 800c6fc:	d8f0      	bhi.n	800c6e0 <_rclc_take_new_data+0x278>
 800c6fe:	e729      	b.n	800c554 <_rclc_take_new_data+0xec>
 800c700:	6860      	ldr	r0, [r4, #4]
 800c702:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c704:	3501      	adds	r5, #1
 800c706:	42ab      	cmp	r3, r5
 800c708:	d8ea      	bhi.n	800c6e0 <_rclc_take_new_data+0x278>
 800c70a:	e723      	b.n	800c554 <_rclc_take_new_data+0xec>
 800c70c:	ab06      	add	r3, sp, #24
 800c70e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c710:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c714:	2103      	movs	r1, #3
 800c716:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c71a:	6860      	ldr	r0, [r4, #4]
 800c71c:	f009 fb18 	bl	8015d50 <rclc_action_server_goal_cancel_reject>
 800c720:	e6c4      	b.n	800c4ac <_rclc_take_new_data+0x44>
 800c722:	ab06      	add	r3, sp, #24
 800c724:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c726:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c72a:	2102      	movs	r1, #2
 800c72c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c730:	6860      	ldr	r0, [r4, #4]
 800c732:	f009 fb0d 	bl	8015d50 <rclc_action_server_goal_cancel_reject>
 800c736:	e6b9      	b.n	800c4ac <_rclc_take_new_data+0x44>
 800c738:	6860      	ldr	r0, [r4, #4]
 800c73a:	e706      	b.n	800c54a <_rclc_take_new_data+0xe2>
 800c73c:	6860      	ldr	r0, [r4, #4]
 800c73e:	4631      	mov	r1, r6
 800c740:	f009 fa26 	bl	8015b90 <rclc_action_remove_used_goal_handle>
 800c744:	f000 fe04 	bl	800d350 <rcutils_reset_error>
 800c748:	e6b0      	b.n	800c4ac <_rclc_take_new_data+0x44>
 800c74a:	2501      	movs	r5, #1
 800c74c:	e6ae      	b.n	800c4ac <_rclc_take_new_data+0x44>
 800c74e:	bf00      	nop

0800c750 <_rclc_execute.part.0>:
 800c750:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c752:	7803      	ldrb	r3, [r0, #0]
 800c754:	b087      	sub	sp, #28
 800c756:	4604      	mov	r4, r0
 800c758:	2b0a      	cmp	r3, #10
 800c75a:	f200 8136 	bhi.w	800c9ca <_rclc_execute.part.0+0x27a>
 800c75e:	e8df f003 	tbb	[pc, r3]
 800c762:	435e      	.short	0x435e
 800c764:	06a1664f 	.word	0x06a1664f
 800c768:	6c1e0606 	.word	0x6c1e0606
 800c76c:	59          	.byte	0x59
 800c76d:	00          	.byte	0x00
 800c76e:	2b06      	cmp	r3, #6
 800c770:	f000 8122 	beq.w	800c9b8 <_rclc_execute.part.0+0x268>
 800c774:	2b07      	cmp	r3, #7
 800c776:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c778:	f040 8118 	bne.w	800c9ac <_rclc_execute.part.0+0x25c>
 800c77c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800c780:	6880      	ldr	r0, [r0, #8]
 800c782:	4798      	blx	r3
 800c784:	f104 0110 	add.w	r1, r4, #16
 800c788:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c78a:	6860      	ldr	r0, [r4, #4]
 800c78c:	f007 fb08 	bl	8013da0 <rcl_send_response>
 800c790:	2800      	cmp	r0, #0
 800c792:	d033      	beq.n	800c7fc <_rclc_execute.part.0+0xac>
 800c794:	9005      	str	r0, [sp, #20]
 800c796:	f000 fddb 	bl	800d350 <rcutils_reset_error>
 800c79a:	9805      	ldr	r0, [sp, #20]
 800c79c:	e02e      	b.n	800c7fc <_rclc_execute.part.0+0xac>
 800c79e:	6840      	ldr	r0, [r0, #4]
 800c7a0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	f000 8086 	beq.w	800c8b6 <_rclc_execute.part.0+0x166>
 800c7aa:	2600      	movs	r6, #0
 800c7ac:	2701      	movs	r7, #1
 800c7ae:	e004      	b.n	800c7ba <_rclc_execute.part.0+0x6a>
 800c7b0:	f009 f9b8 	bl	8015b24 <rclc_action_send_result_request>
 800c7b4:	b998      	cbnz	r0, 800c7de <_rclc_execute.part.0+0x8e>
 800c7b6:	722f      	strb	r7, [r5, #8]
 800c7b8:	6860      	ldr	r0, [r4, #4]
 800c7ba:	f009 fa65 	bl	8015c88 <rclc_action_find_first_handle_with_goal_response>
 800c7be:	4605      	mov	r5, r0
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	d077      	beq.n	800c8b4 <_rclc_execute.part.0+0x164>
 800c7c4:	6863      	ldr	r3, [r4, #4]
 800c7c6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c7ce:	f885 6020 	strb.w	r6, [r5, #32]
 800c7d2:	4798      	blx	r3
 800c7d4:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c7d8:	4628      	mov	r0, r5
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d1e8      	bne.n	800c7b0 <_rclc_execute.part.0+0x60>
 800c7de:	6860      	ldr	r0, [r4, #4]
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	f009 f9d5 	bl	8015b90 <rclc_action_remove_used_goal_handle>
 800c7e6:	e7e7      	b.n	800c7b8 <_rclc_execute.part.0+0x68>
 800c7e8:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c7ec:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800c7f0:	2d00      	cmp	r5, #0
 800c7f2:	f000 80c9 	beq.w	800c988 <_rclc_execute.part.0+0x238>
 800c7f6:	6880      	ldr	r0, [r0, #8]
 800c7f8:	4798      	blx	r3
 800c7fa:	2000      	movs	r0, #0
 800c7fc:	b007      	add	sp, #28
 800c7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c800:	6840      	ldr	r0, [r0, #4]
 800c802:	f007 fdff 	bl	8014404 <rcl_timer_call>
 800c806:	f240 3321 	movw	r3, #801	@ 0x321
 800c80a:	4298      	cmp	r0, r3
 800c80c:	d004      	beq.n	800c818 <_rclc_execute.part.0+0xc8>
 800c80e:	2800      	cmp	r0, #0
 800c810:	d0f4      	beq.n	800c7fc <_rclc_execute.part.0+0xac>
 800c812:	e7bf      	b.n	800c794 <_rclc_execute.part.0+0x44>
 800c814:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c816:	4798      	blx	r3
 800c818:	2000      	movs	r0, #0
 800c81a:	b007      	add	sp, #28
 800c81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c81e:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c822:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c824:	b925      	cbnz	r5, 800c830 <_rclc_execute.part.0+0xe0>
 800c826:	4628      	mov	r0, r5
 800c828:	4798      	blx	r3
 800c82a:	4628      	mov	r0, r5
 800c82c:	e7e6      	b.n	800c7fc <_rclc_execute.part.0+0xac>
 800c82e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c830:	68a0      	ldr	r0, [r4, #8]
 800c832:	4798      	blx	r3
 800c834:	2000      	movs	r0, #0
 800c836:	b007      	add	sp, #28
 800c838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c83a:	6840      	ldr	r0, [r0, #4]
 800c83c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c840:	bb3b      	cbnz	r3, 800c892 <_rclc_execute.part.0+0x142>
 800c842:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d07b      	beq.n	800c942 <_rclc_execute.part.0+0x1f2>
 800c84a:	f640 0634 	movw	r6, #2100	@ 0x834
 800c84e:	2701      	movs	r7, #1
 800c850:	e007      	b.n	800c862 <_rclc_execute.part.0+0x112>
 800c852:	4628      	mov	r0, r5
 800c854:	f009 fa30 	bl	8015cb8 <rclc_action_server_response_goal_request>
 800c858:	6860      	ldr	r0, [r4, #4]
 800c85a:	4629      	mov	r1, r5
 800c85c:	f009 f998 	bl	8015b90 <rclc_action_remove_used_goal_handle>
 800c860:	6860      	ldr	r0, [r4, #4]
 800c862:	2100      	movs	r1, #0
 800c864:	f009 f9c2 	bl	8015bec <rclc_action_find_first_handle_by_status>
 800c868:	4605      	mov	r5, r0
 800c86a:	2800      	cmp	r0, #0
 800c86c:	d066      	beq.n	800c93c <_rclc_execute.part.0+0x1ec>
 800c86e:	6863      	ldr	r3, [r4, #4]
 800c870:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c872:	699b      	ldr	r3, [r3, #24]
 800c874:	4798      	blx	r3
 800c876:	42b0      	cmp	r0, r6
 800c878:	f04f 0100 	mov.w	r1, #0
 800c87c:	d1e9      	bne.n	800c852 <_rclc_execute.part.0+0x102>
 800c87e:	2101      	movs	r1, #1
 800c880:	4628      	mov	r0, r5
 800c882:	f009 fa19 	bl	8015cb8 <rclc_action_server_response_goal_request>
 800c886:	722f      	strb	r7, [r5, #8]
 800c888:	e7ea      	b.n	800c860 <_rclc_execute.part.0+0x110>
 800c88a:	6848      	ldr	r0, [r1, #4]
 800c88c:	f009 f980 	bl	8015b90 <rclc_action_remove_used_goal_handle>
 800c890:	6860      	ldr	r0, [r4, #4]
 800c892:	f009 f9b7 	bl	8015c04 <rclc_action_find_first_terminated_handle>
 800c896:	4601      	mov	r1, r0
 800c898:	2800      	cmp	r0, #0
 800c89a:	d1f6      	bne.n	800c88a <_rclc_execute.part.0+0x13a>
 800c89c:	6860      	ldr	r0, [r4, #4]
 800c89e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800c8a2:	e7ce      	b.n	800c842 <_rclc_execute.part.0+0xf2>
 800c8a4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c8a6:	6880      	ldr	r0, [r0, #8]
 800c8a8:	f104 0110 	add.w	r1, r4, #16
 800c8ac:	4798      	blx	r3
 800c8ae:	2000      	movs	r0, #0
 800c8b0:	b007      	add	sp, #28
 800c8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8b4:	6860      	ldr	r0, [r4, #4]
 800c8b6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c8ba:	b18b      	cbz	r3, 800c8e0 <_rclc_execute.part.0+0x190>
 800c8bc:	68c5      	ldr	r5, [r0, #12]
 800c8be:	b32d      	cbz	r5, 800c90c <_rclc_execute.part.0+0x1bc>
 800c8c0:	2600      	movs	r6, #0
 800c8c2:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c8c6:	b143      	cbz	r3, 800c8da <_rclc_execute.part.0+0x18a>
 800c8c8:	69c3      	ldr	r3, [r0, #28]
 800c8ca:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c8ce:	b123      	cbz	r3, 800c8da <_rclc_execute.part.0+0x18a>
 800c8d0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c8d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	4798      	blx	r3
 800c8d8:	6860      	ldr	r0, [r4, #4]
 800c8da:	682d      	ldr	r5, [r5, #0]
 800c8dc:	2d00      	cmp	r5, #0
 800c8de:	d1f0      	bne.n	800c8c2 <_rclc_execute.part.0+0x172>
 800c8e0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c8e4:	b193      	cbz	r3, 800c90c <_rclc_execute.part.0+0x1bc>
 800c8e6:	68c5      	ldr	r5, [r0, #12]
 800c8e8:	b185      	cbz	r5, 800c90c <_rclc_execute.part.0+0x1bc>
 800c8ea:	2600      	movs	r6, #0
 800c8ec:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c8f0:	b14b      	cbz	r3, 800c906 <_rclc_execute.part.0+0x1b6>
 800c8f2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c8f4:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c8f8:	b12b      	cbz	r3, 800c906 <_rclc_execute.part.0+0x1b6>
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c900:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c902:	4798      	blx	r3
 800c904:	6860      	ldr	r0, [r4, #4]
 800c906:	682d      	ldr	r5, [r5, #0]
 800c908:	2d00      	cmp	r5, #0
 800c90a:	d1ef      	bne.n	800c8ec <_rclc_execute.part.0+0x19c>
 800c90c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c910:	2b00      	cmp	r3, #0
 800c912:	d081      	beq.n	800c818 <_rclc_execute.part.0+0xc8>
 800c914:	2700      	movs	r7, #0
 800c916:	e00b      	b.n	800c930 <_rclc_execute.part.0+0x1e0>
 800c918:	6863      	ldr	r3, [r4, #4]
 800c91a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c91c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c91e:	6a1e      	ldr	r6, [r3, #32]
 800c920:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c924:	47b0      	blx	r6
 800c926:	6860      	ldr	r0, [r4, #4]
 800c928:	4629      	mov	r1, r5
 800c92a:	f009 f931 	bl	8015b90 <rclc_action_remove_used_goal_handle>
 800c92e:	6860      	ldr	r0, [r4, #4]
 800c930:	f009 f9b6 	bl	8015ca0 <rclc_action_find_first_handle_with_result_response>
 800c934:	4605      	mov	r5, r0
 800c936:	2800      	cmp	r0, #0
 800c938:	d1ee      	bne.n	800c918 <_rclc_execute.part.0+0x1c8>
 800c93a:	e76d      	b.n	800c818 <_rclc_execute.part.0+0xc8>
 800c93c:	6860      	ldr	r0, [r4, #4]
 800c93e:	f880 5020 	strb.w	r5, [r0, #32]
 800c942:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c946:	2b00      	cmp	r3, #0
 800c948:	f43f af66 	beq.w	800c818 <_rclc_execute.part.0+0xc8>
 800c94c:	68c5      	ldr	r5, [r0, #12]
 800c94e:	b1b5      	cbz	r5, 800c97e <_rclc_execute.part.0+0x22e>
 800c950:	2602      	movs	r6, #2
 800c952:	e001      	b.n	800c958 <_rclc_execute.part.0+0x208>
 800c954:	682d      	ldr	r5, [r5, #0]
 800c956:	b195      	cbz	r5, 800c97e <_rclc_execute.part.0+0x22e>
 800c958:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c95c:	2b03      	cmp	r3, #3
 800c95e:	d1f9      	bne.n	800c954 <_rclc_execute.part.0+0x204>
 800c960:	69c3      	ldr	r3, [r0, #28]
 800c962:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c964:	4628      	mov	r0, r5
 800c966:	4798      	blx	r3
 800c968:	4603      	mov	r3, r0
 800c96a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c96e:	4628      	mov	r0, r5
 800c970:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c974:	b163      	cbz	r3, 800c990 <_rclc_execute.part.0+0x240>
 800c976:	f009 f9bf 	bl	8015cf8 <rclc_action_server_goal_cancel_accept>
 800c97a:	6860      	ldr	r0, [r4, #4]
 800c97c:	e7ea      	b.n	800c954 <_rclc_execute.part.0+0x204>
 800c97e:	2300      	movs	r3, #0
 800c980:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c984:	4618      	mov	r0, r3
 800c986:	e739      	b.n	800c7fc <_rclc_execute.part.0+0xac>
 800c988:	4628      	mov	r0, r5
 800c98a:	4798      	blx	r3
 800c98c:	4628      	mov	r0, r5
 800c98e:	e735      	b.n	800c7fc <_rclc_execute.part.0+0xac>
 800c990:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c992:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c996:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c99a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c99e:	6860      	ldr	r0, [r4, #4]
 800c9a0:	2101      	movs	r1, #1
 800c9a2:	f009 f9d5 	bl	8015d50 <rclc_action_server_goal_cancel_reject>
 800c9a6:	722e      	strb	r6, [r5, #8]
 800c9a8:	6860      	ldr	r0, [r4, #4]
 800c9aa:	e7d3      	b.n	800c954 <_rclc_execute.part.0+0x204>
 800c9ac:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c9ae:	6880      	ldr	r0, [r0, #8]
 800c9b0:	4798      	blx	r3
 800c9b2:	f104 0110 	add.w	r1, r4, #16
 800c9b6:	e6e7      	b.n	800c788 <_rclc_execute.part.0+0x38>
 800c9b8:	f100 0110 	add.w	r1, r0, #16
 800c9bc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c9be:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c9c0:	6880      	ldr	r0, [r0, #8]
 800c9c2:	9105      	str	r1, [sp, #20]
 800c9c4:	4798      	blx	r3
 800c9c6:	9905      	ldr	r1, [sp, #20]
 800c9c8:	e6de      	b.n	800c788 <_rclc_execute.part.0+0x38>
 800c9ca:	2001      	movs	r0, #1
 800c9cc:	e716      	b.n	800c7fc <_rclc_execute.part.0+0xac>
 800c9ce:	bf00      	nop

0800c9d0 <rclc_executor_trigger_any>:
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	d03f      	beq.n	800ca54 <rclc_executor_trigger_any+0x84>
 800c9d4:	2900      	cmp	r1, #0
 800c9d6:	d03e      	beq.n	800ca56 <rclc_executor_trigger_any+0x86>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c9de:	2200      	movs	r2, #0
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d037      	beq.n	800ca54 <rclc_executor_trigger_any+0x84>
 800c9e4:	b430      	push	{r4, r5}
 800c9e6:	f893 c000 	ldrb.w	ip, [r3]
 800c9ea:	f1bc 0f08 	cmp.w	ip, #8
 800c9ee:	d11e      	bne.n	800ca2e <rclc_executor_trigger_any+0x5e>
 800c9f0:	685c      	ldr	r4, [r3, #4]
 800c9f2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c9f4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c9f8:	d105      	bne.n	800ca06 <rclc_executor_trigger_any+0x36>
 800c9fa:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c9fe:	b910      	cbnz	r0, 800ca06 <rclc_executor_trigger_any+0x36>
 800ca00:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800ca04:	b128      	cbz	r0, 800ca12 <rclc_executor_trigger_any+0x42>
 800ca06:	bc30      	pop	{r4, r5}
 800ca08:	4770      	bx	lr
 800ca0a:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d1f9      	bne.n	800ca06 <rclc_executor_trigger_any+0x36>
 800ca12:	3201      	adds	r2, #1
 800ca14:	4291      	cmp	r1, r2
 800ca16:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ca1a:	d018      	beq.n	800ca4e <rclc_executor_trigger_any+0x7e>
 800ca1c:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d0f0      	beq.n	800ca06 <rclc_executor_trigger_any+0x36>
 800ca24:	f893 c000 	ldrb.w	ip, [r3]
 800ca28:	f1bc 0f08 	cmp.w	ip, #8
 800ca2c:	d0e0      	beq.n	800c9f0 <rclc_executor_trigger_any+0x20>
 800ca2e:	f1bc 0f09 	cmp.w	ip, #9
 800ca32:	d1ea      	bne.n	800ca0a <rclc_executor_trigger_any+0x3a>
 800ca34:	685c      	ldr	r4, [r3, #4]
 800ca36:	6a25      	ldr	r5, [r4, #32]
 800ca38:	2d00      	cmp	r5, #0
 800ca3a:	d1e4      	bne.n	800ca06 <rclc_executor_trigger_any+0x36>
 800ca3c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800ca40:	2800      	cmp	r0, #0
 800ca42:	d1e0      	bne.n	800ca06 <rclc_executor_trigger_any+0x36>
 800ca44:	3201      	adds	r2, #1
 800ca46:	4291      	cmp	r1, r2
 800ca48:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ca4c:	d1e6      	bne.n	800ca1c <rclc_executor_trigger_any+0x4c>
 800ca4e:	2000      	movs	r0, #0
 800ca50:	bc30      	pop	{r4, r5}
 800ca52:	4770      	bx	lr
 800ca54:	4770      	bx	lr
 800ca56:	4608      	mov	r0, r1
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop

0800ca5c <rclc_executor_get_zero_initialized_executor>:
 800ca5c:	b510      	push	{r4, lr}
 800ca5e:	4903      	ldr	r1, [pc, #12]	@ (800ca6c <rclc_executor_get_zero_initialized_executor+0x10>)
 800ca60:	4604      	mov	r4, r0
 800ca62:	2288      	movs	r2, #136	@ 0x88
 800ca64:	f00c fbc1 	bl	80191ea <memcpy>
 800ca68:	4620      	mov	r0, r4
 800ca6a:	bd10      	pop	{r4, pc}
 800ca6c:	0801ab08 	.word	0x0801ab08

0800ca70 <rclc_executor_init>:
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d05f      	beq.n	800cb34 <rclc_executor_init+0xc4>
 800ca74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca78:	460c      	mov	r4, r1
 800ca7a:	b0b0      	sub	sp, #192	@ 0xc0
 800ca7c:	2900      	cmp	r1, #0
 800ca7e:	d051      	beq.n	800cb24 <rclc_executor_init+0xb4>
 800ca80:	4605      	mov	r5, r0
 800ca82:	4618      	mov	r0, r3
 800ca84:	4616      	mov	r6, r2
 800ca86:	461f      	mov	r7, r3
 800ca88:	f000 fc3c 	bl	800d304 <rcutils_allocator_is_valid>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d049      	beq.n	800cb24 <rclc_executor_init+0xb4>
 800ca90:	2e00      	cmp	r6, #0
 800ca92:	d047      	beq.n	800cb24 <rclc_executor_init+0xb4>
 800ca94:	492c      	ldr	r1, [pc, #176]	@ (800cb48 <rclc_executor_init+0xd8>)
 800ca96:	2288      	movs	r2, #136	@ 0x88
 800ca98:	a80e      	add	r0, sp, #56	@ 0x38
 800ca9a:	f00c fba6 	bl	80191ea <memcpy>
 800ca9e:	a90e      	add	r1, sp, #56	@ 0x38
 800caa0:	2288      	movs	r2, #136	@ 0x88
 800caa2:	4628      	mov	r0, r5
 800caa4:	f00c fba1 	bl	80191ea <memcpy>
 800caa8:	602c      	str	r4, [r5, #0]
 800caaa:	4668      	mov	r0, sp
 800caac:	60ae      	str	r6, [r5, #8]
 800caae:	466c      	mov	r4, sp
 800cab0:	f007 fe1a 	bl	80146e8 <rcl_get_zero_initialized_wait_set>
 800cab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cab6:	f105 0c14 	add.w	ip, r5, #20
 800caba:	f8d7 8000 	ldr.w	r8, [r7]
 800cabe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cac4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800caca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cace:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800cb40 <rclc_executor_init+0xd0>
 800cad2:	6823      	ldr	r3, [r4, #0]
 800cad4:	f8cc 3000 	str.w	r3, [ip]
 800cad8:	6939      	ldr	r1, [r7, #16]
 800cada:	612f      	str	r7, [r5, #16]
 800cadc:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800cae0:	01b0      	lsls	r0, r6, #6
 800cae2:	47c0      	blx	r8
 800cae4:	6068      	str	r0, [r5, #4]
 800cae6:	b338      	cbz	r0, 800cb38 <rclc_executor_init+0xc8>
 800cae8:	2400      	movs	r4, #0
 800caea:	e000      	b.n	800caee <rclc_executor_init+0x7e>
 800caec:	6868      	ldr	r0, [r5, #4]
 800caee:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800caf2:	4631      	mov	r1, r6
 800caf4:	3401      	adds	r4, #1
 800caf6:	f000 faa3 	bl	800d040 <rclc_executor_handle_init>
 800cafa:	42a6      	cmp	r6, r4
 800cafc:	d1f6      	bne.n	800caec <rclc_executor_init+0x7c>
 800cafe:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800cb02:	f000 fa93 	bl	800d02c <rclc_executor_handle_counters_zero_init>
 800cb06:	4a11      	ldr	r2, [pc, #68]	@ (800cb4c <rclc_executor_init+0xdc>)
 800cb08:	686b      	ldr	r3, [r5, #4]
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800cb10:	b163      	cbz	r3, 800cb2c <rclc_executor_init+0xbc>
 800cb12:	692b      	ldr	r3, [r5, #16]
 800cb14:	b153      	cbz	r3, 800cb2c <rclc_executor_init+0xbc>
 800cb16:	68ab      	ldr	r3, [r5, #8]
 800cb18:	b143      	cbz	r3, 800cb2c <rclc_executor_init+0xbc>
 800cb1a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800cb1e:	b030      	add	sp, #192	@ 0xc0
 800cb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb24:	200b      	movs	r0, #11
 800cb26:	b030      	add	sp, #192	@ 0xc0
 800cb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	b030      	add	sp, #192	@ 0xc0
 800cb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb34:	200b      	movs	r0, #11
 800cb36:	4770      	bx	lr
 800cb38:	200a      	movs	r0, #10
 800cb3a:	e7f4      	b.n	800cb26 <rclc_executor_init+0xb6>
 800cb3c:	f3af 8000 	nop.w
 800cb40:	3b9aca00 	.word	0x3b9aca00
 800cb44:	00000000 	.word	0x00000000
 800cb48:	0801ab08 	.word	0x0801ab08
 800cb4c:	0800c9d1 	.word	0x0800c9d1

0800cb50 <rclc_executor_add_timer>:
 800cb50:	b300      	cbz	r0, 800cb94 <rclc_executor_add_timer+0x44>
 800cb52:	b1f9      	cbz	r1, 800cb94 <rclc_executor_add_timer+0x44>
 800cb54:	b538      	push	{r3, r4, r5, lr}
 800cb56:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	d301      	bcc.n	800cb64 <rclc_executor_add_timer+0x14>
 800cb60:	2001      	movs	r0, #1
 800cb62:	bd38      	pop	{r3, r4, r5, pc}
 800cb64:	6840      	ldr	r0, [r0, #4]
 800cb66:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800cb6a:	019d      	lsls	r5, r3, #6
 800cb6c:	6051      	str	r1, [r2, #4]
 800cb6e:	2102      	movs	r1, #2
 800cb70:	5341      	strh	r1, [r0, r5]
 800cb72:	3301      	adds	r3, #1
 800cb74:	2000      	movs	r0, #0
 800cb76:	2101      	movs	r1, #1
 800cb78:	f104 0514 	add.w	r5, r4, #20
 800cb7c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800cb7e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800cb80:	4628      	mov	r0, r5
 800cb82:	60e3      	str	r3, [r4, #12]
 800cb84:	f007 fdc4 	bl	8014710 <rcl_wait_set_is_valid>
 800cb88:	b930      	cbnz	r0, 800cb98 <rclc_executor_add_timer+0x48>
 800cb8a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800cb8c:	3301      	adds	r3, #1
 800cb8e:	2000      	movs	r0, #0
 800cb90:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800cb92:	bd38      	pop	{r3, r4, r5, pc}
 800cb94:	200b      	movs	r0, #11
 800cb96:	4770      	bx	lr
 800cb98:	4628      	mov	r0, r5
 800cb9a:	f007 fdbf 	bl	801471c <rcl_wait_set_fini>
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d0f3      	beq.n	800cb8a <rclc_executor_add_timer+0x3a>
 800cba2:	bd38      	pop	{r3, r4, r5, pc}

0800cba4 <rclc_executor_add_service>:
 800cba4:	b370      	cbz	r0, 800cc04 <rclc_executor_add_service+0x60>
 800cba6:	b369      	cbz	r1, 800cc04 <rclc_executor_add_service+0x60>
 800cba8:	b362      	cbz	r2, 800cc04 <rclc_executor_add_service+0x60>
 800cbaa:	b35b      	cbz	r3, 800cc04 <rclc_executor_add_service+0x60>
 800cbac:	b538      	push	{r3, r4, r5, lr}
 800cbae:	4604      	mov	r4, r0
 800cbb0:	9804      	ldr	r0, [sp, #16]
 800cbb2:	b378      	cbz	r0, 800cc14 <rclc_executor_add_service+0x70>
 800cbb4:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 800cbb8:	42a8      	cmp	r0, r5
 800cbba:	d301      	bcc.n	800cbc0 <rclc_executor_add_service+0x1c>
 800cbbc:	2001      	movs	r0, #1
 800cbbe:	bd38      	pop	{r3, r4, r5, pc}
 800cbc0:	6865      	ldr	r5, [r4, #4]
 800cbc2:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800cbc6:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800cbca:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800cbce:	9b04      	ldr	r3, [sp, #16]
 800cbd0:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800cbd4:	2305      	movs	r3, #5
 800cbd6:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800cbda:	3001      	adds	r0, #1
 800cbdc:	f825 300e 	strh.w	r3, [r5, lr]
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	f104 0514 	add.w	r5, r4, #20
 800cbe8:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800cbec:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800cbf0:	60e0      	str	r0, [r4, #12]
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	f007 fd8c 	bl	8014710 <rcl_wait_set_is_valid>
 800cbf8:	b930      	cbnz	r0, 800cc08 <rclc_executor_add_service+0x64>
 800cbfa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	2000      	movs	r0, #0
 800cc00:	6563      	str	r3, [r4, #84]	@ 0x54
 800cc02:	bd38      	pop	{r3, r4, r5, pc}
 800cc04:	200b      	movs	r0, #11
 800cc06:	4770      	bx	lr
 800cc08:	4628      	mov	r0, r5
 800cc0a:	f007 fd87 	bl	801471c <rcl_wait_set_fini>
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	d0f3      	beq.n	800cbfa <rclc_executor_add_service+0x56>
 800cc12:	e7d4      	b.n	800cbbe <rclc_executor_add_service+0x1a>
 800cc14:	200b      	movs	r0, #11
 800cc16:	bd38      	pop	{r3, r4, r5, pc}

0800cc18 <rclc_executor_prepare>:
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	d044      	beq.n	800cca6 <rclc_executor_prepare+0x8e>
 800cc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc1e:	f100 0514 	add.w	r5, r0, #20
 800cc22:	b09b      	sub	sp, #108	@ 0x6c
 800cc24:	4604      	mov	r4, r0
 800cc26:	4628      	mov	r0, r5
 800cc28:	f007 fd72 	bl	8014710 <rcl_wait_set_is_valid>
 800cc2c:	b110      	cbz	r0, 800cc34 <rclc_executor_prepare+0x1c>
 800cc2e:	2000      	movs	r0, #0
 800cc30:	b01b      	add	sp, #108	@ 0x6c
 800cc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc34:	4628      	mov	r0, r5
 800cc36:	f007 fd71 	bl	801471c <rcl_wait_set_fini>
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	d130      	bne.n	800cca0 <rclc_executor_prepare+0x88>
 800cc3e:	a80c      	add	r0, sp, #48	@ 0x30
 800cc40:	f007 fd52 	bl	80146e8 <rcl_get_zero_initialized_wait_set>
 800cc44:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800cc48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc4c:	46ae      	mov	lr, r5
 800cc4e:	6927      	ldr	r7, [r4, #16]
 800cc50:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc58:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc60:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc64:	f8dc 3000 	ldr.w	r3, [ip]
 800cc68:	f8ce 3000 	str.w	r3, [lr]
 800cc6c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cc6e:	ae04      	add	r6, sp, #16
 800cc70:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	6822      	ldr	r2, [r4, #0]
 800cc76:	6033      	str	r3, [r6, #0]
 800cc78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc7a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800cc7c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800cc80:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800cc84:	e9cd 2100 	strd	r2, r1, [sp]
 800cc88:	4628      	mov	r0, r5
 800cc8a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800cc8c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cc8e:	f008 f843 	bl	8014d18 <rcl_wait_set_init>
 800cc92:	2800      	cmp	r0, #0
 800cc94:	d0cc      	beq.n	800cc30 <rclc_executor_prepare+0x18>
 800cc96:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cc98:	f000 fb5a 	bl	800d350 <rcutils_reset_error>
 800cc9c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cc9e:	e7c7      	b.n	800cc30 <rclc_executor_prepare+0x18>
 800cca0:	f000 fb56 	bl	800d350 <rcutils_reset_error>
 800cca4:	e7cb      	b.n	800cc3e <rclc_executor_prepare+0x26>
 800cca6:	200b      	movs	r0, #11
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop

0800ccac <rclc_executor_spin_some.part.0>:
 800ccac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb0:	f100 0614 	add.w	r6, r0, #20
 800ccb4:	b083      	sub	sp, #12
 800ccb6:	4691      	mov	r9, r2
 800ccb8:	4698      	mov	r8, r3
 800ccba:	4605      	mov	r5, r0
 800ccbc:	f7ff ffac 	bl	800cc18 <rclc_executor_prepare>
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	f007 fdf7 	bl	80148b4 <rcl_wait_set_clear>
 800ccc6:	4607      	mov	r7, r0
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	f040 80ed 	bne.w	800cea8 <rclc_executor_spin_some.part.0+0x1fc>
 800ccce:	68ab      	ldr	r3, [r5, #8]
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	b303      	cbz	r3, 800cd16 <rclc_executor_spin_some.part.0+0x6a>
 800ccd4:	6869      	ldr	r1, [r5, #4]
 800ccd6:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800ccda:	01a2      	lsls	r2, r4, #6
 800ccdc:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800cce0:	b1cb      	cbz	r3, 800cd16 <rclc_executor_spin_some.part.0+0x6a>
 800cce2:	5c8b      	ldrb	r3, [r1, r2]
 800cce4:	2b0a      	cmp	r3, #10
 800cce6:	f200 80d8 	bhi.w	800ce9a <rclc_executor_spin_some.part.0+0x1ee>
 800ccea:	e8df f003 	tbb	[pc, r3]
 800ccee:	9c9c      	.short	0x9c9c
 800ccf0:	068c8ca7 	.word	0x068c8ca7
 800ccf4:	bdc90606 	.word	0xbdc90606
 800ccf8:	b2          	.byte	0xb2
 800ccf9:	00          	.byte	0x00
 800ccfa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ccfe:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cd02:	4630      	mov	r0, r6
 800cd04:	f008 f91e 	bl	8014f44 <rcl_wait_set_add_service>
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	f040 8086 	bne.w	800ce1a <rclc_executor_spin_some.part.0+0x16e>
 800cd0e:	68ab      	ldr	r3, [r5, #8]
 800cd10:	3401      	adds	r4, #1
 800cd12:	429c      	cmp	r4, r3
 800cd14:	d3de      	bcc.n	800ccd4 <rclc_executor_spin_some.part.0+0x28>
 800cd16:	4643      	mov	r3, r8
 800cd18:	464a      	mov	r2, r9
 800cd1a:	4630      	mov	r0, r6
 800cd1c:	f008 f940 	bl	8014fa0 <rcl_wait>
 800cd20:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f000 80c7 	beq.w	800ceb8 <rclc_executor_spin_some.part.0+0x20c>
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	f040 80b5 	bne.w	800ce9a <rclc_executor_spin_some.part.0+0x1ee>
 800cd30:	68ab      	ldr	r3, [r5, #8]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	f000 8159 	beq.w	800cfea <rclc_executor_spin_some.part.0+0x33e>
 800cd38:	2400      	movs	r4, #0
 800cd3a:	46a0      	mov	r8, r4
 800cd3c:	f240 1991 	movw	r9, #401	@ 0x191
 800cd40:	e00a      	b.n	800cd58 <rclc_executor_spin_some.part.0+0xac>
 800cd42:	f7ff fb43 	bl	800c3cc <_rclc_check_for_new_data>
 800cd46:	4604      	mov	r4, r0
 800cd48:	b110      	cbz	r0, 800cd50 <rclc_executor_spin_some.part.0+0xa4>
 800cd4a:	4548      	cmp	r0, r9
 800cd4c:	f040 80b2 	bne.w	800ceb4 <rclc_executor_spin_some.part.0+0x208>
 800cd50:	68ab      	ldr	r3, [r5, #8]
 800cd52:	4598      	cmp	r8, r3
 800cd54:	f080 8126 	bcs.w	800cfa4 <rclc_executor_spin_some.part.0+0x2f8>
 800cd58:	686a      	ldr	r2, [r5, #4]
 800cd5a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800cd5e:	4631      	mov	r1, r6
 800cd60:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800cd64:	f108 0801 	add.w	r8, r8, #1
 800cd68:	f1bc 0f00 	cmp.w	ip, #0
 800cd6c:	d1e9      	bne.n	800cd42 <rclc_executor_spin_some.part.0+0x96>
 800cd6e:	4619      	mov	r1, r3
 800cd70:	4610      	mov	r0, r2
 800cd72:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800cd76:	4798      	blx	r3
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	f000 809b 	beq.w	800ceb4 <rclc_executor_spin_some.part.0+0x208>
 800cd7e:	68ab      	ldr	r3, [r5, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	f000 8097 	beq.w	800ceb4 <rclc_executor_spin_some.part.0+0x208>
 800cd86:	f04f 0800 	mov.w	r8, #0
 800cd8a:	f240 1991 	movw	r9, #401	@ 0x191
 800cd8e:	e009      	b.n	800cda4 <rclc_executor_spin_some.part.0+0xf8>
 800cd90:	f7ff fb6a 	bl	800c468 <_rclc_take_new_data>
 800cd94:	4604      	mov	r4, r0
 800cd96:	b110      	cbz	r0, 800cd9e <rclc_executor_spin_some.part.0+0xf2>
 800cd98:	4548      	cmp	r0, r9
 800cd9a:	f040 808b 	bne.w	800ceb4 <rclc_executor_spin_some.part.0+0x208>
 800cd9e:	68ab      	ldr	r3, [r5, #8]
 800cda0:	4598      	cmp	r8, r3
 800cda2:	d209      	bcs.n	800cdb8 <rclc_executor_spin_some.part.0+0x10c>
 800cda4:	6868      	ldr	r0, [r5, #4]
 800cda6:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cdaa:	4631      	mov	r1, r6
 800cdac:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800cdb0:	f108 0801 	add.w	r8, r8, #1
 800cdb4:	2a00      	cmp	r2, #0
 800cdb6:	d1eb      	bne.n	800cd90 <rclc_executor_spin_some.part.0+0xe4>
 800cdb8:	2600      	movs	r6, #0
 800cdba:	b97b      	cbnz	r3, 800cddc <rclc_executor_spin_some.part.0+0x130>
 800cdbc:	e07a      	b.n	800ceb4 <rclc_executor_spin_some.part.0+0x208>
 800cdbe:	f812 200c 	ldrb.w	r2, [r2, ip]
 800cdc2:	2a08      	cmp	r2, #8
 800cdc4:	f000 80fd 	beq.w	800cfc2 <rclc_executor_spin_some.part.0+0x316>
 800cdc8:	2a09      	cmp	r2, #9
 800cdca:	f000 80ef 	beq.w	800cfac <rclc_executor_spin_some.part.0+0x300>
 800cdce:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800cdd2:	b98a      	cbnz	r2, 800cdf8 <rclc_executor_spin_some.part.0+0x14c>
 800cdd4:	3601      	adds	r6, #1
 800cdd6:	429e      	cmp	r6, r3
 800cdd8:	d262      	bcs.n	800cea0 <rclc_executor_spin_some.part.0+0x1f4>
 800cdda:	2400      	movs	r4, #0
 800cddc:	686a      	ldr	r2, [r5, #4]
 800cdde:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800cde2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800cde6:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800cdea:	2900      	cmp	r1, #0
 800cdec:	d062      	beq.n	800ceb4 <rclc_executor_spin_some.part.0+0x208>
 800cdee:	7841      	ldrb	r1, [r0, #1]
 800cdf0:	2900      	cmp	r1, #0
 800cdf2:	d0e4      	beq.n	800cdbe <rclc_executor_spin_some.part.0+0x112>
 800cdf4:	2901      	cmp	r1, #1
 800cdf6:	d1ed      	bne.n	800cdd4 <rclc_executor_spin_some.part.0+0x128>
 800cdf8:	f7ff fcaa 	bl	800c750 <_rclc_execute.part.0>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	f040 80b6 	bne.w	800cf6e <rclc_executor_spin_some.part.0+0x2c2>
 800ce02:	68ab      	ldr	r3, [r5, #8]
 800ce04:	e7e6      	b.n	800cdd4 <rclc_executor_spin_some.part.0+0x128>
 800ce06:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ce0a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ce0e:	4630      	mov	r0, r6
 800ce10:	f008 f86c 	bl	8014eec <rcl_wait_set_add_client>
 800ce14:	2800      	cmp	r0, #0
 800ce16:	f43f af7a 	beq.w	800cd0e <rclc_executor_spin_some.part.0+0x62>
 800ce1a:	9001      	str	r0, [sp, #4]
 800ce1c:	f000 fa98 	bl	800d350 <rcutils_reset_error>
 800ce20:	9801      	ldr	r0, [sp, #4]
 800ce22:	4607      	mov	r7, r0
 800ce24:	e03c      	b.n	800cea0 <rclc_executor_spin_some.part.0+0x1f4>
 800ce26:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ce2a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ce2e:	4630      	mov	r0, r6
 800ce30:	f007 fd14 	bl	801485c <rcl_wait_set_add_subscription>
 800ce34:	2800      	cmp	r0, #0
 800ce36:	f43f af6a 	beq.w	800cd0e <rclc_executor_spin_some.part.0+0x62>
 800ce3a:	e7ee      	b.n	800ce1a <rclc_executor_spin_some.part.0+0x16e>
 800ce3c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ce40:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ce44:	4630      	mov	r0, r6
 800ce46:	f008 f821 	bl	8014e8c <rcl_wait_set_add_timer>
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	f43f af5f 	beq.w	800cd0e <rclc_executor_spin_some.part.0+0x62>
 800ce50:	e7e3      	b.n	800ce1a <rclc_executor_spin_some.part.0+0x16e>
 800ce52:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ce56:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	f007 ffea 	bl	8014e34 <rcl_wait_set_add_guard_condition>
 800ce60:	2800      	cmp	r0, #0
 800ce62:	f43f af54 	beq.w	800cd0e <rclc_executor_spin_some.part.0+0x62>
 800ce66:	e7d8      	b.n	800ce1a <rclc_executor_spin_some.part.0+0x16e>
 800ce68:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ce6c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ce70:	3110      	adds	r1, #16
 800ce72:	4630      	mov	r0, r6
 800ce74:	f008 fd6c 	bl	8015950 <rcl_action_wait_set_add_action_server>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	f43f af48 	beq.w	800cd0e <rclc_executor_spin_some.part.0+0x62>
 800ce7e:	e7cc      	b.n	800ce1a <rclc_executor_spin_some.part.0+0x16e>
 800ce80:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ce84:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ce88:	3110      	adds	r1, #16
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	f008 fb37 	bl	8015500 <rcl_action_wait_set_add_action_client>
 800ce92:	2800      	cmp	r0, #0
 800ce94:	f43f af3b 	beq.w	800cd0e <rclc_executor_spin_some.part.0+0x62>
 800ce98:	e7bf      	b.n	800ce1a <rclc_executor_spin_some.part.0+0x16e>
 800ce9a:	f000 fa59 	bl	800d350 <rcutils_reset_error>
 800ce9e:	2701      	movs	r7, #1
 800cea0:	4638      	mov	r0, r7
 800cea2:	b003      	add	sp, #12
 800cea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cea8:	f000 fa52 	bl	800d350 <rcutils_reset_error>
 800ceac:	4638      	mov	r0, r7
 800ceae:	b003      	add	sp, #12
 800ceb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceb4:	4627      	mov	r7, r4
 800ceb6:	e7f3      	b.n	800cea0 <rclc_executor_spin_some.part.0+0x1f4>
 800ceb8:	68ab      	ldr	r3, [r5, #8]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	f000 8092 	beq.w	800cfe4 <rclc_executor_spin_some.part.0+0x338>
 800cec0:	2400      	movs	r4, #0
 800cec2:	46a0      	mov	r8, r4
 800cec4:	f240 1991 	movw	r9, #401	@ 0x191
 800cec8:	e008      	b.n	800cedc <rclc_executor_spin_some.part.0+0x230>
 800ceca:	f7ff fa7f 	bl	800c3cc <_rclc_check_for_new_data>
 800cece:	4604      	mov	r4, r0
 800ced0:	b108      	cbz	r0, 800ced6 <rclc_executor_spin_some.part.0+0x22a>
 800ced2:	4548      	cmp	r0, r9
 800ced4:	d1ee      	bne.n	800ceb4 <rclc_executor_spin_some.part.0+0x208>
 800ced6:	68ab      	ldr	r3, [r5, #8]
 800ced8:	4598      	cmp	r8, r3
 800ceda:	d265      	bcs.n	800cfa8 <rclc_executor_spin_some.part.0+0x2fc>
 800cedc:	686a      	ldr	r2, [r5, #4]
 800cede:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800cee2:	4631      	mov	r1, r6
 800cee4:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800cee8:	f108 0801 	add.w	r8, r8, #1
 800ceec:	f1bc 0f00 	cmp.w	ip, #0
 800cef0:	d1eb      	bne.n	800ceca <rclc_executor_spin_some.part.0+0x21e>
 800cef2:	4619      	mov	r1, r3
 800cef4:	4610      	mov	r0, r2
 800cef6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800cefa:	4798      	blx	r3
 800cefc:	2800      	cmp	r0, #0
 800cefe:	d0d9      	beq.n	800ceb4 <rclc_executor_spin_some.part.0+0x208>
 800cf00:	68ab      	ldr	r3, [r5, #8]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d0d6      	beq.n	800ceb4 <rclc_executor_spin_some.part.0+0x208>
 800cf06:	f04f 0800 	mov.w	r8, #0
 800cf0a:	f240 1991 	movw	r9, #401	@ 0x191
 800cf0e:	f240 2a59 	movw	sl, #601	@ 0x259
 800cf12:	e00e      	b.n	800cf32 <rclc_executor_spin_some.part.0+0x286>
 800cf14:	f813 300b 	ldrb.w	r3, [r3, fp]
 800cf18:	2b08      	cmp	r3, #8
 800cf1a:	d033      	beq.n	800cf84 <rclc_executor_spin_some.part.0+0x2d8>
 800cf1c:	2b09      	cmp	r3, #9
 800cf1e:	d028      	beq.n	800cf72 <rclc_executor_spin_some.part.0+0x2c6>
 800cf20:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800cf24:	b9fb      	cbnz	r3, 800cf66 <rclc_executor_spin_some.part.0+0x2ba>
 800cf26:	68ab      	ldr	r3, [r5, #8]
 800cf28:	f108 0801 	add.w	r8, r8, #1
 800cf2c:	4598      	cmp	r8, r3
 800cf2e:	d2b7      	bcs.n	800cea0 <rclc_executor_spin_some.part.0+0x1f4>
 800cf30:	2400      	movs	r4, #0
 800cf32:	6868      	ldr	r0, [r5, #4]
 800cf34:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cf38:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800cf3c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d0b7      	beq.n	800ceb4 <rclc_executor_spin_some.part.0+0x208>
 800cf44:	4631      	mov	r1, r6
 800cf46:	f7ff fa8f 	bl	800c468 <_rclc_take_new_data>
 800cf4a:	b118      	cbz	r0, 800cf54 <rclc_executor_spin_some.part.0+0x2a8>
 800cf4c:	4548      	cmp	r0, r9
 800cf4e:	d001      	beq.n	800cf54 <rclc_executor_spin_some.part.0+0x2a8>
 800cf50:	4550      	cmp	r0, sl
 800cf52:	d10c      	bne.n	800cf6e <rclc_executor_spin_some.part.0+0x2c2>
 800cf54:	686b      	ldr	r3, [r5, #4]
 800cf56:	eb13 000b 	adds.w	r0, r3, fp
 800cf5a:	d021      	beq.n	800cfa0 <rclc_executor_spin_some.part.0+0x2f4>
 800cf5c:	7842      	ldrb	r2, [r0, #1]
 800cf5e:	2a00      	cmp	r2, #0
 800cf60:	d0d8      	beq.n	800cf14 <rclc_executor_spin_some.part.0+0x268>
 800cf62:	2a01      	cmp	r2, #1
 800cf64:	d1df      	bne.n	800cf26 <rclc_executor_spin_some.part.0+0x27a>
 800cf66:	f7ff fbf3 	bl	800c750 <_rclc_execute.part.0>
 800cf6a:	2800      	cmp	r0, #0
 800cf6c:	d0db      	beq.n	800cf26 <rclc_executor_spin_some.part.0+0x27a>
 800cf6e:	4607      	mov	r7, r0
 800cf70:	e796      	b.n	800cea0 <rclc_executor_spin_some.part.0+0x1f4>
 800cf72:	6843      	ldr	r3, [r0, #4]
 800cf74:	6a1a      	ldr	r2, [r3, #32]
 800cf76:	2a00      	cmp	r2, #0
 800cf78:	d1f5      	bne.n	800cf66 <rclc_executor_spin_some.part.0+0x2ba>
 800cf7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d0d1      	beq.n	800cf26 <rclc_executor_spin_some.part.0+0x27a>
 800cf82:	e7f0      	b.n	800cf66 <rclc_executor_spin_some.part.0+0x2ba>
 800cf84:	6843      	ldr	r3, [r0, #4]
 800cf86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cf88:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800cf8c:	d1eb      	bne.n	800cf66 <rclc_executor_spin_some.part.0+0x2ba>
 800cf8e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800cf92:	2a00      	cmp	r2, #0
 800cf94:	d1e7      	bne.n	800cf66 <rclc_executor_spin_some.part.0+0x2ba>
 800cf96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d0c3      	beq.n	800cf26 <rclc_executor_spin_some.part.0+0x27a>
 800cf9e:	e7e2      	b.n	800cf66 <rclc_executor_spin_some.part.0+0x2ba>
 800cfa0:	270b      	movs	r7, #11
 800cfa2:	e77d      	b.n	800cea0 <rclc_executor_spin_some.part.0+0x1f4>
 800cfa4:	686a      	ldr	r2, [r5, #4]
 800cfa6:	e6e2      	b.n	800cd6e <rclc_executor_spin_some.part.0+0xc2>
 800cfa8:	686a      	ldr	r2, [r5, #4]
 800cfaa:	e7a2      	b.n	800cef2 <rclc_executor_spin_some.part.0+0x246>
 800cfac:	6842      	ldr	r2, [r0, #4]
 800cfae:	6a11      	ldr	r1, [r2, #32]
 800cfb0:	2900      	cmp	r1, #0
 800cfb2:	f47f af21 	bne.w	800cdf8 <rclc_executor_spin_some.part.0+0x14c>
 800cfb6:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800cfba:	2a00      	cmp	r2, #0
 800cfbc:	f43f af0a 	beq.w	800cdd4 <rclc_executor_spin_some.part.0+0x128>
 800cfc0:	e71a      	b.n	800cdf8 <rclc_executor_spin_some.part.0+0x14c>
 800cfc2:	6842      	ldr	r2, [r0, #4]
 800cfc4:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800cfc6:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800cfca:	f47f af15 	bne.w	800cdf8 <rclc_executor_spin_some.part.0+0x14c>
 800cfce:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800cfd2:	2900      	cmp	r1, #0
 800cfd4:	f47f af10 	bne.w	800cdf8 <rclc_executor_spin_some.part.0+0x14c>
 800cfd8:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800cfdc:	2a00      	cmp	r2, #0
 800cfde:	f43f aef9 	beq.w	800cdd4 <rclc_executor_spin_some.part.0+0x128>
 800cfe2:	e709      	b.n	800cdf8 <rclc_executor_spin_some.part.0+0x14c>
 800cfe4:	686a      	ldr	r2, [r5, #4]
 800cfe6:	461c      	mov	r4, r3
 800cfe8:	e783      	b.n	800cef2 <rclc_executor_spin_some.part.0+0x246>
 800cfea:	686a      	ldr	r2, [r5, #4]
 800cfec:	461c      	mov	r4, r3
 800cfee:	e6be      	b.n	800cd6e <rclc_executor_spin_some.part.0+0xc2>

0800cff0 <rclc_executor_spin>:
 800cff0:	b1d0      	cbz	r0, 800d028 <rclc_executor_spin+0x38>
 800cff2:	b510      	push	{r4, lr}
 800cff4:	4604      	mov	r4, r0
 800cff6:	b082      	sub	sp, #8
 800cff8:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800cffc:	6820      	ldr	r0, [r4, #0]
 800cffe:	e9cd 2300 	strd	r2, r3, [sp]
 800d002:	f006 f901 	bl	8013208 <rcl_context_is_valid>
 800d006:	4601      	mov	r1, r0
 800d008:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d00c:	4620      	mov	r0, r4
 800d00e:	b131      	cbz	r1, 800d01e <rclc_executor_spin+0x2e>
 800d010:	f7ff fe4c 	bl	800ccac <rclc_executor_spin_some.part.0>
 800d014:	f030 0302 	bics.w	r3, r0, #2
 800d018:	d0ee      	beq.n	800cff8 <rclc_executor_spin+0x8>
 800d01a:	b002      	add	sp, #8
 800d01c:	bd10      	pop	{r4, pc}
 800d01e:	f000 f997 	bl	800d350 <rcutils_reset_error>
 800d022:	2001      	movs	r0, #1
 800d024:	b002      	add	sp, #8
 800d026:	bd10      	pop	{r4, pc}
 800d028:	200b      	movs	r0, #11
 800d02a:	4770      	bx	lr

0800d02c <rclc_executor_handle_counters_zero_init>:
 800d02c:	b130      	cbz	r0, 800d03c <rclc_executor_handle_counters_zero_init+0x10>
 800d02e:	b508      	push	{r3, lr}
 800d030:	2220      	movs	r2, #32
 800d032:	2100      	movs	r1, #0
 800d034:	f00c f810 	bl	8019058 <memset>
 800d038:	2000      	movs	r0, #0
 800d03a:	bd08      	pop	{r3, pc}
 800d03c:	200b      	movs	r0, #11
 800d03e:	4770      	bx	lr

0800d040 <rclc_executor_handle_init>:
 800d040:	b168      	cbz	r0, 800d05e <rclc_executor_handle_init+0x1e>
 800d042:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800d068 <rclc_executor_handle_init+0x28>
 800d046:	2300      	movs	r3, #0
 800d048:	220b      	movs	r2, #11
 800d04a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800d04e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800d052:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800d056:	8002      	strh	r2, [r0, #0]
 800d058:	8703      	strh	r3, [r0, #56]	@ 0x38
 800d05a:	4618      	mov	r0, r3
 800d05c:	4770      	bx	lr
 800d05e:	200b      	movs	r0, #11
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	f3af 8000 	nop.w
	...

0800d070 <rclc_support_init_with_options>:
 800d070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d074:	b083      	sub	sp, #12
 800d076:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d078:	b340      	cbz	r0, 800d0cc <rclc_support_init_with_options+0x5c>
 800d07a:	461d      	mov	r5, r3
 800d07c:	b333      	cbz	r3, 800d0cc <rclc_support_init_with_options+0x5c>
 800d07e:	b32e      	cbz	r6, 800d0cc <rclc_support_init_with_options+0x5c>
 800d080:	46e9      	mov	r9, sp
 800d082:	4604      	mov	r4, r0
 800d084:	4648      	mov	r0, r9
 800d086:	460f      	mov	r7, r1
 800d088:	4690      	mov	r8, r2
 800d08a:	f006 f8b3 	bl	80131f4 <rcl_get_zero_initialized_context>
 800d08e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d092:	462a      	mov	r2, r5
 800d094:	e884 0003 	stmia.w	r4, {r0, r1}
 800d098:	4623      	mov	r3, r4
 800d09a:	4641      	mov	r1, r8
 800d09c:	4638      	mov	r0, r7
 800d09e:	f006 f919 	bl	80132d4 <rcl_init>
 800d0a2:	4605      	mov	r5, r0
 800d0a4:	b960      	cbnz	r0, 800d0c0 <rclc_support_init_with_options+0x50>
 800d0a6:	60a6      	str	r6, [r4, #8]
 800d0a8:	4632      	mov	r2, r6
 800d0aa:	f104 010c 	add.w	r1, r4, #12
 800d0ae:	2003      	movs	r0, #3
 800d0b0:	f006 ff18 	bl	8013ee4 <rcl_clock_init>
 800d0b4:	4605      	mov	r5, r0
 800d0b6:	b918      	cbnz	r0, 800d0c0 <rclc_support_init_with_options+0x50>
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	b003      	add	sp, #12
 800d0bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0c0:	f000 f946 	bl	800d350 <rcutils_reset_error>
 800d0c4:	4628      	mov	r0, r5
 800d0c6:	b003      	add	sp, #12
 800d0c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0cc:	250b      	movs	r5, #11
 800d0ce:	4628      	mov	r0, r5
 800d0d0:	b003      	add	sp, #12
 800d0d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0d6:	bf00      	nop

0800d0d8 <rclc_node_init_default>:
 800d0d8:	b3b8      	cbz	r0, 800d14a <rclc_node_init_default+0x72>
 800d0da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0de:	460d      	mov	r5, r1
 800d0e0:	b0a1      	sub	sp, #132	@ 0x84
 800d0e2:	b329      	cbz	r1, 800d130 <rclc_node_init_default+0x58>
 800d0e4:	4616      	mov	r6, r2
 800d0e6:	b31a      	cbz	r2, 800d130 <rclc_node_init_default+0x58>
 800d0e8:	461f      	mov	r7, r3
 800d0ea:	b30b      	cbz	r3, 800d130 <rclc_node_init_default+0x58>
 800d0ec:	f10d 0810 	add.w	r8, sp, #16
 800d0f0:	4604      	mov	r4, r0
 800d0f2:	4640      	mov	r0, r8
 800d0f4:	f006 fa14 	bl	8013520 <rcl_get_zero_initialized_node>
 800d0f8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d0fc:	f10d 0918 	add.w	r9, sp, #24
 800d100:	e884 0003 	stmia.w	r4, {r0, r1}
 800d104:	4648      	mov	r0, r9
 800d106:	f006 fb83 	bl	8013810 <rcl_node_get_default_options>
 800d10a:	4640      	mov	r0, r8
 800d10c:	f006 fa08 	bl	8013520 <rcl_get_zero_initialized_node>
 800d110:	f8cd 9000 	str.w	r9, [sp]
 800d114:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d118:	463b      	mov	r3, r7
 800d11a:	e884 0003 	stmia.w	r4, {r0, r1}
 800d11e:	4632      	mov	r2, r6
 800d120:	4629      	mov	r1, r5
 800d122:	4620      	mov	r0, r4
 800d124:	f006 fa06 	bl	8013534 <rcl_node_init>
 800d128:	b930      	cbnz	r0, 800d138 <rclc_node_init_default+0x60>
 800d12a:	b021      	add	sp, #132	@ 0x84
 800d12c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d130:	200b      	movs	r0, #11
 800d132:	b021      	add	sp, #132	@ 0x84
 800d134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d138:	9003      	str	r0, [sp, #12]
 800d13a:	f000 f909 	bl	800d350 <rcutils_reset_error>
 800d13e:	f000 f907 	bl	800d350 <rcutils_reset_error>
 800d142:	9803      	ldr	r0, [sp, #12]
 800d144:	b021      	add	sp, #132	@ 0x84
 800d146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d14a:	200b      	movs	r0, #11
 800d14c:	4770      	bx	lr
 800d14e:	bf00      	nop

0800d150 <rclc_publisher_init_best_effort>:
 800d150:	b368      	cbz	r0, 800d1ae <rclc_publisher_init_best_effort+0x5e>
 800d152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d156:	460d      	mov	r5, r1
 800d158:	b0a0      	sub	sp, #128	@ 0x80
 800d15a:	b321      	cbz	r1, 800d1a6 <rclc_publisher_init_best_effort+0x56>
 800d15c:	4616      	mov	r6, r2
 800d15e:	b312      	cbz	r2, 800d1a6 <rclc_publisher_init_best_effort+0x56>
 800d160:	461f      	mov	r7, r3
 800d162:	b303      	cbz	r3, 800d1a6 <rclc_publisher_init_best_effort+0x56>
 800d164:	4604      	mov	r4, r0
 800d166:	f7ff f821 	bl	800c1ac <rcl_get_zero_initialized_publisher>
 800d16a:	f10d 0810 	add.w	r8, sp, #16
 800d16e:	6020      	str	r0, [r4, #0]
 800d170:	4640      	mov	r0, r8
 800d172:	f7ff f8b7 	bl	800c2e4 <rcl_publisher_get_default_options>
 800d176:	490f      	ldr	r1, [pc, #60]	@ (800d1b4 <rclc_publisher_init_best_effort+0x64>)
 800d178:	2250      	movs	r2, #80	@ 0x50
 800d17a:	4640      	mov	r0, r8
 800d17c:	f00c f835 	bl	80191ea <memcpy>
 800d180:	f8cd 8000 	str.w	r8, [sp]
 800d184:	463b      	mov	r3, r7
 800d186:	4632      	mov	r2, r6
 800d188:	4629      	mov	r1, r5
 800d18a:	4620      	mov	r0, r4
 800d18c:	f7ff f814 	bl	800c1b8 <rcl_publisher_init>
 800d190:	b910      	cbnz	r0, 800d198 <rclc_publisher_init_best_effort+0x48>
 800d192:	b020      	add	sp, #128	@ 0x80
 800d194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d198:	9003      	str	r0, [sp, #12]
 800d19a:	f000 f8d9 	bl	800d350 <rcutils_reset_error>
 800d19e:	9803      	ldr	r0, [sp, #12]
 800d1a0:	b020      	add	sp, #128	@ 0x80
 800d1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1a6:	200b      	movs	r0, #11
 800d1a8:	b020      	add	sp, #128	@ 0x80
 800d1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ae:	200b      	movs	r0, #11
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop
 800d1b4:	0801ab90 	.word	0x0801ab90

0800d1b8 <rclc_service_init_default>:
 800d1b8:	b368      	cbz	r0, 800d216 <rclc_service_init_default+0x5e>
 800d1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1be:	460d      	mov	r5, r1
 800d1c0:	b09e      	sub	sp, #120	@ 0x78
 800d1c2:	b321      	cbz	r1, 800d20e <rclc_service_init_default+0x56>
 800d1c4:	4616      	mov	r6, r2
 800d1c6:	b312      	cbz	r2, 800d20e <rclc_service_init_default+0x56>
 800d1c8:	461f      	mov	r7, r3
 800d1ca:	b303      	cbz	r3, 800d20e <rclc_service_init_default+0x56>
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	f006 fcef 	bl	8013bb0 <rcl_get_zero_initialized_service>
 800d1d2:	f10d 0810 	add.w	r8, sp, #16
 800d1d6:	6020      	str	r0, [r4, #0]
 800d1d8:	4640      	mov	r0, r8
 800d1da:	f006 fd77 	bl	8013ccc <rcl_service_get_default_options>
 800d1de:	490f      	ldr	r1, [pc, #60]	@ (800d21c <rclc_service_init_default+0x64>)
 800d1e0:	2250      	movs	r2, #80	@ 0x50
 800d1e2:	4640      	mov	r0, r8
 800d1e4:	f00c f801 	bl	80191ea <memcpy>
 800d1e8:	f8cd 8000 	str.w	r8, [sp]
 800d1ec:	463b      	mov	r3, r7
 800d1ee:	4632      	mov	r2, r6
 800d1f0:	4629      	mov	r1, r5
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	f006 fce2 	bl	8013bbc <rcl_service_init>
 800d1f8:	b910      	cbnz	r0, 800d200 <rclc_service_init_default+0x48>
 800d1fa:	b01e      	add	sp, #120	@ 0x78
 800d1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d200:	9003      	str	r0, [sp, #12]
 800d202:	f000 f8a5 	bl	800d350 <rcutils_reset_error>
 800d206:	9803      	ldr	r0, [sp, #12]
 800d208:	b01e      	add	sp, #120	@ 0x78
 800d20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d20e:	200b      	movs	r0, #11
 800d210:	b01e      	add	sp, #120	@ 0x78
 800d212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d216:	200b      	movs	r0, #11
 800d218:	4770      	bx	lr
 800d21a:	bf00      	nop
 800d21c:	0801abe0 	.word	0x0801abe0

0800d220 <rclc_timer_init_default>:
 800d220:	b360      	cbz	r0, 800d27c <rclc_timer_init_default+0x5c>
 800d222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d226:	460e      	mov	r6, r1
 800d228:	b08a      	sub	sp, #40	@ 0x28
 800d22a:	b319      	cbz	r1, 800d274 <rclc_timer_init_default+0x54>
 800d22c:	4690      	mov	r8, r2
 800d22e:	461f      	mov	r7, r3
 800d230:	4605      	mov	r5, r0
 800d232:	f007 f835 	bl	80142a0 <rcl_get_zero_initialized_timer>
 800d236:	68b4      	ldr	r4, [r6, #8]
 800d238:	6028      	str	r0, [r5, #0]
 800d23a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d23c:	f10d 0c0c 	add.w	ip, sp, #12
 800d240:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d244:	6823      	ldr	r3, [r4, #0]
 800d246:	f8cc 3000 	str.w	r3, [ip]
 800d24a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d24c:	9302      	str	r3, [sp, #8]
 800d24e:	e9cd 8700 	strd	r8, r7, [sp]
 800d252:	4628      	mov	r0, r5
 800d254:	4632      	mov	r2, r6
 800d256:	f106 010c 	add.w	r1, r6, #12
 800d25a:	f007 f829 	bl	80142b0 <rcl_timer_init>
 800d25e:	b910      	cbnz	r0, 800d266 <rclc_timer_init_default+0x46>
 800d260:	b00a      	add	sp, #40	@ 0x28
 800d262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d266:	9009      	str	r0, [sp, #36]	@ 0x24
 800d268:	f000 f872 	bl	800d350 <rcutils_reset_error>
 800d26c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d26e:	b00a      	add	sp, #40	@ 0x28
 800d270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d274:	200b      	movs	r0, #11
 800d276:	b00a      	add	sp, #40	@ 0x28
 800d278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d27c:	200b      	movs	r0, #11
 800d27e:	4770      	bx	lr

0800d280 <__default_zero_allocate>:
 800d280:	f00b ba00 	b.w	8018684 <calloc>

0800d284 <__default_reallocate>:
 800d284:	f00b bb9e 	b.w	80189c4 <realloc>

0800d288 <__default_deallocate>:
 800d288:	f00b ba7a 	b.w	8018780 <free>

0800d28c <__default_allocate>:
 800d28c:	f00b ba70 	b.w	8018770 <malloc>

0800d290 <rcutils_get_zero_initialized_allocator>:
 800d290:	b510      	push	{r4, lr}
 800d292:	4c05      	ldr	r4, [pc, #20]	@ (800d2a8 <rcutils_get_zero_initialized_allocator+0x18>)
 800d294:	4686      	mov	lr, r0
 800d296:	4684      	mov	ip, r0
 800d298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d29a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d29e:	6823      	ldr	r3, [r4, #0]
 800d2a0:	f8cc 3000 	str.w	r3, [ip]
 800d2a4:	4670      	mov	r0, lr
 800d2a6:	bd10      	pop	{r4, pc}
 800d2a8:	0801ac30 	.word	0x0801ac30

0800d2ac <rcutils_set_default_allocator>:
 800d2ac:	b1a8      	cbz	r0, 800d2da <rcutils_set_default_allocator+0x2e>
 800d2ae:	6802      	ldr	r2, [r0, #0]
 800d2b0:	b1a2      	cbz	r2, 800d2dc <rcutils_set_default_allocator+0x30>
 800d2b2:	6841      	ldr	r1, [r0, #4]
 800d2b4:	b1a1      	cbz	r1, 800d2e0 <rcutils_set_default_allocator+0x34>
 800d2b6:	b410      	push	{r4}
 800d2b8:	68c4      	ldr	r4, [r0, #12]
 800d2ba:	b164      	cbz	r4, 800d2d6 <rcutils_set_default_allocator+0x2a>
 800d2bc:	6880      	ldr	r0, [r0, #8]
 800d2be:	b138      	cbz	r0, 800d2d0 <rcutils_set_default_allocator+0x24>
 800d2c0:	4b08      	ldr	r3, [pc, #32]	@ (800d2e4 <rcutils_set_default_allocator+0x38>)
 800d2c2:	601a      	str	r2, [r3, #0]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d2ca:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d2ce:	2001      	movs	r0, #1
 800d2d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2d4:	4770      	bx	lr
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	e7fa      	b.n	800d2d0 <rcutils_set_default_allocator+0x24>
 800d2da:	4770      	bx	lr
 800d2dc:	4610      	mov	r0, r2
 800d2de:	4770      	bx	lr
 800d2e0:	4608      	mov	r0, r1
 800d2e2:	4770      	bx	lr
 800d2e4:	200001f8 	.word	0x200001f8

0800d2e8 <rcutils_get_default_allocator>:
 800d2e8:	b510      	push	{r4, lr}
 800d2ea:	4c05      	ldr	r4, [pc, #20]	@ (800d300 <rcutils_get_default_allocator+0x18>)
 800d2ec:	4686      	mov	lr, r0
 800d2ee:	4684      	mov	ip, r0
 800d2f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	f8cc 3000 	str.w	r3, [ip]
 800d2fc:	4670      	mov	r0, lr
 800d2fe:	bd10      	pop	{r4, pc}
 800d300:	200001f8 	.word	0x200001f8

0800d304 <rcutils_allocator_is_valid>:
 800d304:	b158      	cbz	r0, 800d31e <rcutils_allocator_is_valid+0x1a>
 800d306:	6803      	ldr	r3, [r0, #0]
 800d308:	b143      	cbz	r3, 800d31c <rcutils_allocator_is_valid+0x18>
 800d30a:	6843      	ldr	r3, [r0, #4]
 800d30c:	b133      	cbz	r3, 800d31c <rcutils_allocator_is_valid+0x18>
 800d30e:	68c3      	ldr	r3, [r0, #12]
 800d310:	b123      	cbz	r3, 800d31c <rcutils_allocator_is_valid+0x18>
 800d312:	6880      	ldr	r0, [r0, #8]
 800d314:	3800      	subs	r0, #0
 800d316:	bf18      	it	ne
 800d318:	2001      	movne	r0, #1
 800d31a:	4770      	bx	lr
 800d31c:	4618      	mov	r0, r3
 800d31e:	4770      	bx	lr

0800d320 <rcutils_get_error_string>:
 800d320:	4b06      	ldr	r3, [pc, #24]	@ (800d33c <rcutils_get_error_string+0x1c>)
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	b13b      	cbz	r3, 800d336 <rcutils_get_error_string+0x16>
 800d326:	4b06      	ldr	r3, [pc, #24]	@ (800d340 <rcutils_get_error_string+0x20>)
 800d328:	781a      	ldrb	r2, [r3, #0]
 800d32a:	b90a      	cbnz	r2, 800d330 <rcutils_get_error_string+0x10>
 800d32c:	2201      	movs	r2, #1
 800d32e:	701a      	strb	r2, [r3, #0]
 800d330:	4b04      	ldr	r3, [pc, #16]	@ (800d344 <rcutils_get_error_string+0x24>)
 800d332:	7818      	ldrb	r0, [r3, #0]
 800d334:	4770      	bx	lr
 800d336:	4b04      	ldr	r3, [pc, #16]	@ (800d348 <rcutils_get_error_string+0x28>)
 800d338:	7818      	ldrb	r0, [r3, #0]
 800d33a:	4770      	bx	lr
 800d33c:	20006a58 	.word	0x20006a58
 800d340:	20006a71 	.word	0x20006a71
 800d344:	20006a70 	.word	0x20006a70
 800d348:	0801a838 	.word	0x0801a838
 800d34c:	00000000 	.word	0x00000000

0800d350 <rcutils_reset_error>:
 800d350:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d370 <rcutils_reset_error+0x20>
 800d354:	4a08      	ldr	r2, [pc, #32]	@ (800d378 <rcutils_reset_error+0x28>)
 800d356:	4809      	ldr	r0, [pc, #36]	@ (800d37c <rcutils_reset_error+0x2c>)
 800d358:	4909      	ldr	r1, [pc, #36]	@ (800d380 <rcutils_reset_error+0x30>)
 800d35a:	2300      	movs	r3, #0
 800d35c:	8013      	strh	r3, [r2, #0]
 800d35e:	ed82 7b02 	vstr	d7, [r2, #8]
 800d362:	4a08      	ldr	r2, [pc, #32]	@ (800d384 <rcutils_reset_error+0x34>)
 800d364:	7003      	strb	r3, [r0, #0]
 800d366:	700b      	strb	r3, [r1, #0]
 800d368:	7013      	strb	r3, [r2, #0]
 800d36a:	4770      	bx	lr
 800d36c:	f3af 8000 	nop.w
	...
 800d378:	20006a60 	.word	0x20006a60
 800d37c:	20006a71 	.word	0x20006a71
 800d380:	20006a70 	.word	0x20006a70
 800d384:	20006a58 	.word	0x20006a58

0800d388 <rcutils_system_time_now>:
 800d388:	b308      	cbz	r0, 800d3ce <rcutils_system_time_now+0x46>
 800d38a:	b570      	push	{r4, r5, r6, lr}
 800d38c:	b084      	sub	sp, #16
 800d38e:	4604      	mov	r4, r0
 800d390:	4669      	mov	r1, sp
 800d392:	2001      	movs	r0, #1
 800d394:	f7f4 fd84 	bl	8001ea0 <clock_gettime>
 800d398:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d39c:	2d00      	cmp	r5, #0
 800d39e:	db13      	blt.n	800d3c8 <rcutils_system_time_now+0x40>
 800d3a0:	9902      	ldr	r1, [sp, #8]
 800d3a2:	2900      	cmp	r1, #0
 800d3a4:	db0d      	blt.n	800d3c2 <rcutils_system_time_now+0x3a>
 800d3a6:	4e0b      	ldr	r6, [pc, #44]	@ (800d3d4 <rcutils_system_time_now+0x4c>)
 800d3a8:	fba3 3206 	umull	r3, r2, r3, r6
 800d3ac:	185b      	adds	r3, r3, r1
 800d3ae:	fb06 2205 	mla	r2, r6, r5, r2
 800d3b2:	f04f 0000 	mov.w	r0, #0
 800d3b6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d3ba:	e9c4 3200 	strd	r3, r2, [r4]
 800d3be:	b004      	add	sp, #16
 800d3c0:	bd70      	pop	{r4, r5, r6, pc}
 800d3c2:	ea53 0205 	orrs.w	r2, r3, r5
 800d3c6:	d1ee      	bne.n	800d3a6 <rcutils_system_time_now+0x1e>
 800d3c8:	2002      	movs	r0, #2
 800d3ca:	b004      	add	sp, #16
 800d3cc:	bd70      	pop	{r4, r5, r6, pc}
 800d3ce:	200b      	movs	r0, #11
 800d3d0:	4770      	bx	lr
 800d3d2:	bf00      	nop
 800d3d4:	3b9aca00 	.word	0x3b9aca00

0800d3d8 <rcutils_steady_time_now>:
 800d3d8:	b308      	cbz	r0, 800d41e <rcutils_steady_time_now+0x46>
 800d3da:	b570      	push	{r4, r5, r6, lr}
 800d3dc:	b084      	sub	sp, #16
 800d3de:	4604      	mov	r4, r0
 800d3e0:	4669      	mov	r1, sp
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	f7f4 fd5c 	bl	8001ea0 <clock_gettime>
 800d3e8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d3ec:	2d00      	cmp	r5, #0
 800d3ee:	db13      	blt.n	800d418 <rcutils_steady_time_now+0x40>
 800d3f0:	9902      	ldr	r1, [sp, #8]
 800d3f2:	2900      	cmp	r1, #0
 800d3f4:	db0d      	blt.n	800d412 <rcutils_steady_time_now+0x3a>
 800d3f6:	4e0b      	ldr	r6, [pc, #44]	@ (800d424 <rcutils_steady_time_now+0x4c>)
 800d3f8:	fba3 3206 	umull	r3, r2, r3, r6
 800d3fc:	185b      	adds	r3, r3, r1
 800d3fe:	fb06 2205 	mla	r2, r6, r5, r2
 800d402:	f04f 0000 	mov.w	r0, #0
 800d406:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d40a:	e9c4 3200 	strd	r3, r2, [r4]
 800d40e:	b004      	add	sp, #16
 800d410:	bd70      	pop	{r4, r5, r6, pc}
 800d412:	ea53 0205 	orrs.w	r2, r3, r5
 800d416:	d1ee      	bne.n	800d3f6 <rcutils_steady_time_now+0x1e>
 800d418:	2002      	movs	r0, #2
 800d41a:	b004      	add	sp, #16
 800d41c:	bd70      	pop	{r4, r5, r6, pc}
 800d41e:	200b      	movs	r0, #11
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop
 800d424:	3b9aca00 	.word	0x3b9aca00

0800d428 <rmw_get_zero_initialized_init_options>:
 800d428:	b510      	push	{r4, lr}
 800d42a:	2238      	movs	r2, #56	@ 0x38
 800d42c:	4604      	mov	r4, r0
 800d42e:	2100      	movs	r1, #0
 800d430:	f00b fe12 	bl	8019058 <memset>
 800d434:	f104 0010 	add.w	r0, r4, #16
 800d438:	f000 f80a 	bl	800d450 <rmw_get_default_security_options>
 800d43c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d440:	60e3      	str	r3, [r4, #12]
 800d442:	4620      	mov	r0, r4
 800d444:	bd10      	pop	{r4, pc}
 800d446:	bf00      	nop

0800d448 <rmw_get_default_publisher_options>:
 800d448:	2200      	movs	r2, #0
 800d44a:	6002      	str	r2, [r0, #0]
 800d44c:	7102      	strb	r2, [r0, #4]
 800d44e:	4770      	bx	lr

0800d450 <rmw_get_default_security_options>:
 800d450:	2200      	movs	r2, #0
 800d452:	7002      	strb	r2, [r0, #0]
 800d454:	6042      	str	r2, [r0, #4]
 800d456:	4770      	bx	lr

0800d458 <rmw_uros_set_custom_transport>:
 800d458:	b470      	push	{r4, r5, r6}
 800d45a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d45e:	b162      	cbz	r2, 800d47a <rmw_uros_set_custom_transport+0x22>
 800d460:	b15b      	cbz	r3, 800d47a <rmw_uros_set_custom_transport+0x22>
 800d462:	b155      	cbz	r5, 800d47a <rmw_uros_set_custom_transport+0x22>
 800d464:	b14e      	cbz	r6, 800d47a <rmw_uros_set_custom_transport+0x22>
 800d466:	4c06      	ldr	r4, [pc, #24]	@ (800d480 <rmw_uros_set_custom_transport+0x28>)
 800d468:	7020      	strb	r0, [r4, #0]
 800d46a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d46e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d472:	6166      	str	r6, [r4, #20]
 800d474:	2000      	movs	r0, #0
 800d476:	bc70      	pop	{r4, r5, r6}
 800d478:	4770      	bx	lr
 800d47a:	200b      	movs	r0, #11
 800d47c:	bc70      	pop	{r4, r5, r6}
 800d47e:	4770      	bx	lr
 800d480:	20006a74 	.word	0x20006a74

0800d484 <rmw_init_options_init>:
 800d484:	b084      	sub	sp, #16
 800d486:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d488:	b083      	sub	sp, #12
 800d48a:	ad09      	add	r5, sp, #36	@ 0x24
 800d48c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d490:	b130      	cbz	r0, 800d4a0 <rmw_init_options_init+0x1c>
 800d492:	4604      	mov	r4, r0
 800d494:	4628      	mov	r0, r5
 800d496:	f7ff ff35 	bl	800d304 <rcutils_allocator_is_valid>
 800d49a:	b108      	cbz	r0, 800d4a0 <rmw_init_options_init+0x1c>
 800d49c:	68a6      	ldr	r6, [r4, #8]
 800d49e:	b12e      	cbz	r6, 800d4ac <rmw_init_options_init+0x28>
 800d4a0:	200b      	movs	r0, #11
 800d4a2:	b003      	add	sp, #12
 800d4a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d4a8:	b004      	add	sp, #16
 800d4aa:	4770      	bx	lr
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	e9c4 2300 	strd	r2, r3, [r4]
 800d4b4:	4b22      	ldr	r3, [pc, #136]	@ (800d540 <rmw_init_options_init+0xbc>)
 800d4b6:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800d550 <rmw_init_options_init+0xcc>
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	60a3      	str	r3, [r4, #8]
 800d4be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4c0:	f104 0c20 	add.w	ip, r4, #32
 800d4c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d4c8:	466f      	mov	r7, sp
 800d4ca:	682b      	ldr	r3, [r5, #0]
 800d4cc:	f8cc 3000 	str.w	r3, [ip]
 800d4d0:	4638      	mov	r0, r7
 800d4d2:	f8c4 e01c 	str.w	lr, [r4, #28]
 800d4d6:	60e6      	str	r6, [r4, #12]
 800d4d8:	f7ff ffba 	bl	800d450 <rmw_get_default_security_options>
 800d4dc:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d4e0:	f104 0310 	add.w	r3, r4, #16
 800d4e4:	e883 0003 	stmia.w	r3, {r0, r1}
 800d4e8:	2203      	movs	r2, #3
 800d4ea:	4816      	ldr	r0, [pc, #88]	@ (800d544 <rmw_init_options_init+0xc0>)
 800d4ec:	4916      	ldr	r1, [pc, #88]	@ (800d548 <rmw_init_options_init+0xc4>)
 800d4ee:	7626      	strb	r6, [r4, #24]
 800d4f0:	f000 ffbc 	bl	800e46c <rmw_uxrce_init_init_options_impl_memory>
 800d4f4:	4813      	ldr	r0, [pc, #76]	@ (800d544 <rmw_init_options_init+0xc0>)
 800d4f6:	f009 fa5f 	bl	80169b8 <get_memory>
 800d4fa:	b1f0      	cbz	r0, 800d53a <rmw_init_options_init+0xb6>
 800d4fc:	4a13      	ldr	r2, [pc, #76]	@ (800d54c <rmw_init_options_init+0xc8>)
 800d4fe:	6883      	ldr	r3, [r0, #8]
 800d500:	6851      	ldr	r1, [r2, #4]
 800d502:	7810      	ldrb	r0, [r2, #0]
 800d504:	6363      	str	r3, [r4, #52]	@ 0x34
 800d506:	7418      	strb	r0, [r3, #16]
 800d508:	6159      	str	r1, [r3, #20]
 800d50a:	68d1      	ldr	r1, [r2, #12]
 800d50c:	61d9      	str	r1, [r3, #28]
 800d50e:	6911      	ldr	r1, [r2, #16]
 800d510:	6219      	str	r1, [r3, #32]
 800d512:	6951      	ldr	r1, [r2, #20]
 800d514:	6892      	ldr	r2, [r2, #8]
 800d516:	619a      	str	r2, [r3, #24]
 800d518:	6259      	str	r1, [r3, #36]	@ 0x24
 800d51a:	f004 fc4b 	bl	8011db4 <uxr_nanos>
 800d51e:	f00b f9e5 	bl	80188ec <srand>
 800d522:	f00b fa11 	bl	8018948 <rand>
 800d526:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d528:	6298      	str	r0, [r3, #40]	@ 0x28
 800d52a:	2800      	cmp	r0, #0
 800d52c:	d0f9      	beq.n	800d522 <rmw_init_options_init+0x9e>
 800d52e:	2000      	movs	r0, #0
 800d530:	b003      	add	sp, #12
 800d532:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d536:	b004      	add	sp, #16
 800d538:	4770      	bx	lr
 800d53a:	2001      	movs	r0, #1
 800d53c:	e7b1      	b.n	800d4a2 <rmw_init_options_init+0x1e>
 800d53e:	bf00      	nop
 800d540:	0801b750 	.word	0x0801b750
 800d544:	2000b4cc 	.word	0x2000b4cc
 800d548:	20006d68 	.word	0x20006d68
 800d54c:	20006a74 	.word	0x20006a74
 800d550:	0801ac44 	.word	0x0801ac44

0800d554 <rmw_init_options_copy>:
 800d554:	b570      	push	{r4, r5, r6, lr}
 800d556:	b158      	cbz	r0, 800d570 <rmw_init_options_copy+0x1c>
 800d558:	460d      	mov	r5, r1
 800d55a:	b149      	cbz	r1, 800d570 <rmw_init_options_copy+0x1c>
 800d55c:	4604      	mov	r4, r0
 800d55e:	6880      	ldr	r0, [r0, #8]
 800d560:	b120      	cbz	r0, 800d56c <rmw_init_options_copy+0x18>
 800d562:	4b1e      	ldr	r3, [pc, #120]	@ (800d5dc <rmw_init_options_copy+0x88>)
 800d564:	6819      	ldr	r1, [r3, #0]
 800d566:	f7f2 fe5b 	bl	8000220 <strcmp>
 800d56a:	bb90      	cbnz	r0, 800d5d2 <rmw_init_options_copy+0x7e>
 800d56c:	68ab      	ldr	r3, [r5, #8]
 800d56e:	b113      	cbz	r3, 800d576 <rmw_init_options_copy+0x22>
 800d570:	250b      	movs	r5, #11
 800d572:	4628      	mov	r0, r5
 800d574:	bd70      	pop	{r4, r5, r6, pc}
 800d576:	4623      	mov	r3, r4
 800d578:	462a      	mov	r2, r5
 800d57a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800d57e:	f8d3 c000 	ldr.w	ip, [r3]
 800d582:	6858      	ldr	r0, [r3, #4]
 800d584:	6899      	ldr	r1, [r3, #8]
 800d586:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d58a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d58e:	3310      	adds	r3, #16
 800d590:	42b3      	cmp	r3, r6
 800d592:	f8c2 c000 	str.w	ip, [r2]
 800d596:	6050      	str	r0, [r2, #4]
 800d598:	6091      	str	r1, [r2, #8]
 800d59a:	f102 0210 	add.w	r2, r2, #16
 800d59e:	d1ee      	bne.n	800d57e <rmw_init_options_copy+0x2a>
 800d5a0:	6819      	ldr	r1, [r3, #0]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	480e      	ldr	r0, [pc, #56]	@ (800d5e0 <rmw_init_options_copy+0x8c>)
 800d5a6:	6053      	str	r3, [r2, #4]
 800d5a8:	6011      	str	r1, [r2, #0]
 800d5aa:	f009 fa05 	bl	80169b8 <get_memory>
 800d5ae:	b198      	cbz	r0, 800d5d8 <rmw_init_options_copy+0x84>
 800d5b0:	6883      	ldr	r3, [r0, #8]
 800d5b2:	636b      	str	r3, [r5, #52]	@ 0x34
 800d5b4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d5b6:	f102 0c10 	add.w	ip, r2, #16
 800d5ba:	f103 0410 	add.w	r4, r3, #16
 800d5be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d5c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5c4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800d5c8:	2500      	movs	r5, #0
 800d5ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d5ce:	4628      	mov	r0, r5
 800d5d0:	bd70      	pop	{r4, r5, r6, pc}
 800d5d2:	250c      	movs	r5, #12
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	bd70      	pop	{r4, r5, r6, pc}
 800d5d8:	2501      	movs	r5, #1
 800d5da:	e7ca      	b.n	800d572 <rmw_init_options_copy+0x1e>
 800d5dc:	0801b750 	.word	0x0801b750
 800d5e0:	2000b4cc 	.word	0x2000b4cc

0800d5e4 <rmw_init_options_fini>:
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d03d      	beq.n	800d664 <rmw_init_options_fini+0x80>
 800d5e8:	b510      	push	{r4, lr}
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	b08e      	sub	sp, #56	@ 0x38
 800d5ee:	3020      	adds	r0, #32
 800d5f0:	f7ff fe88 	bl	800d304 <rcutils_allocator_is_valid>
 800d5f4:	b360      	cbz	r0, 800d650 <rmw_init_options_fini+0x6c>
 800d5f6:	68a0      	ldr	r0, [r4, #8]
 800d5f8:	b120      	cbz	r0, 800d604 <rmw_init_options_fini+0x20>
 800d5fa:	4b1c      	ldr	r3, [pc, #112]	@ (800d66c <rmw_init_options_fini+0x88>)
 800d5fc:	6819      	ldr	r1, [r3, #0]
 800d5fe:	f7f2 fe0f 	bl	8000220 <strcmp>
 800d602:	bb68      	cbnz	r0, 800d660 <rmw_init_options_fini+0x7c>
 800d604:	4b1a      	ldr	r3, [pc, #104]	@ (800d670 <rmw_init_options_fini+0x8c>)
 800d606:	6819      	ldr	r1, [r3, #0]
 800d608:	b331      	cbz	r1, 800d658 <rmw_init_options_fini+0x74>
 800d60a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d60c:	e001      	b.n	800d612 <rmw_init_options_fini+0x2e>
 800d60e:	6849      	ldr	r1, [r1, #4]
 800d610:	b311      	cbz	r1, 800d658 <rmw_init_options_fini+0x74>
 800d612:	688b      	ldr	r3, [r1, #8]
 800d614:	429a      	cmp	r2, r3
 800d616:	d1fa      	bne.n	800d60e <rmw_init_options_fini+0x2a>
 800d618:	4815      	ldr	r0, [pc, #84]	@ (800d670 <rmw_init_options_fini+0x8c>)
 800d61a:	f009 f9dd 	bl	80169d8 <put_memory>
 800d61e:	4668      	mov	r0, sp
 800d620:	f7ff ff02 	bl	800d428 <rmw_get_zero_initialized_init_options>
 800d624:	46ee      	mov	lr, sp
 800d626:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d62a:	46a4      	mov	ip, r4
 800d62c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d630:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d634:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d638:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d63c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d640:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d644:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d648:	2300      	movs	r3, #0
 800d64a:	4618      	mov	r0, r3
 800d64c:	b00e      	add	sp, #56	@ 0x38
 800d64e:	bd10      	pop	{r4, pc}
 800d650:	230b      	movs	r3, #11
 800d652:	4618      	mov	r0, r3
 800d654:	b00e      	add	sp, #56	@ 0x38
 800d656:	bd10      	pop	{r4, pc}
 800d658:	2301      	movs	r3, #1
 800d65a:	4618      	mov	r0, r3
 800d65c:	b00e      	add	sp, #56	@ 0x38
 800d65e:	bd10      	pop	{r4, pc}
 800d660:	230c      	movs	r3, #12
 800d662:	e7f2      	b.n	800d64a <rmw_init_options_fini+0x66>
 800d664:	230b      	movs	r3, #11
 800d666:	4618      	mov	r0, r3
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop
 800d66c:	0801b750 	.word	0x0801b750
 800d670:	2000b4cc 	.word	0x2000b4cc

0800d674 <rmw_init>:
 800d674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d678:	b083      	sub	sp, #12
 800d67a:	2800      	cmp	r0, #0
 800d67c:	f000 80d3 	beq.w	800d826 <rmw_init+0x1b2>
 800d680:	460e      	mov	r6, r1
 800d682:	2900      	cmp	r1, #0
 800d684:	f000 80cf 	beq.w	800d826 <rmw_init+0x1b2>
 800d688:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d68a:	4605      	mov	r5, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	f000 80ca 	beq.w	800d826 <rmw_init+0x1b2>
 800d692:	4b78      	ldr	r3, [pc, #480]	@ (800d874 <rmw_init+0x200>)
 800d694:	6880      	ldr	r0, [r0, #8]
 800d696:	681f      	ldr	r7, [r3, #0]
 800d698:	b128      	cbz	r0, 800d6a6 <rmw_init+0x32>
 800d69a:	4639      	mov	r1, r7
 800d69c:	f7f2 fdc0 	bl	8000220 <strcmp>
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	f040 80ca 	bne.w	800d83a <rmw_init+0x1c6>
 800d6a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d6aa:	4c73      	ldr	r4, [pc, #460]	@ (800d878 <rmw_init+0x204>)
 800d6ac:	4973      	ldr	r1, [pc, #460]	@ (800d87c <rmw_init+0x208>)
 800d6ae:	4874      	ldr	r0, [pc, #464]	@ (800d880 <rmw_init+0x20c>)
 800d6b0:	60b7      	str	r7, [r6, #8]
 800d6b2:	e9c6 2300 	strd	r2, r3, [r6]
 800d6b6:	68eb      	ldr	r3, [r5, #12]
 800d6b8:	64b3      	str	r3, [r6, #72]	@ 0x48
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	f000 fe76 	bl	800e3ac <rmw_uxrce_init_session_memory>
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	4970      	ldr	r1, [pc, #448]	@ (800d884 <rmw_init+0x210>)
 800d6c4:	2204      	movs	r2, #4
 800d6c6:	f000 feb1 	bl	800e42c <rmw_uxrce_init_static_input_buffer_memory>
 800d6ca:	f04f 0800 	mov.w	r8, #0
 800d6ce:	486c      	ldr	r0, [pc, #432]	@ (800d880 <rmw_init+0x20c>)
 800d6d0:	f884 800d 	strb.w	r8, [r4, #13]
 800d6d4:	f009 f970 	bl	80169b8 <get_memory>
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	f000 80a9 	beq.w	800d830 <rmw_init+0x1bc>
 800d6de:	6884      	ldr	r4, [r0, #8]
 800d6e0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800d6e2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d6e4:	f890 c010 	ldrb.w	ip, [r0, #16]
 800d6e8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d6ec:	9101      	str	r1, [sp, #4]
 800d6ee:	6a00      	ldr	r0, [r0, #32]
 800d6f0:	9000      	str	r0, [sp, #0]
 800d6f2:	f104 0910 	add.w	r9, r4, #16
 800d6f6:	4661      	mov	r1, ip
 800d6f8:	4648      	mov	r0, r9
 800d6fa:	f002 fa91 	bl	800fc20 <uxr_set_custom_transport_callbacks>
 800d6fe:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800d702:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d706:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800d70a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800d70e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800d712:	495d      	ldr	r1, [pc, #372]	@ (800d888 <rmw_init+0x214>)
 800d714:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800d718:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800d71c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800d720:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800d724:	4859      	ldr	r0, [pc, #356]	@ (800d88c <rmw_init+0x218>)
 800d726:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800d72a:	2201      	movs	r2, #1
 800d72c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800d72e:	f000 fe1d 	bl	800e36c <rmw_uxrce_init_node_memory>
 800d732:	4957      	ldr	r1, [pc, #348]	@ (800d890 <rmw_init+0x21c>)
 800d734:	4857      	ldr	r0, [pc, #348]	@ (800d894 <rmw_init+0x220>)
 800d736:	2205      	movs	r2, #5
 800d738:	f000 fdf8 	bl	800e32c <rmw_uxrce_init_subscription_memory>
 800d73c:	4956      	ldr	r1, [pc, #344]	@ (800d898 <rmw_init+0x224>)
 800d73e:	4857      	ldr	r0, [pc, #348]	@ (800d89c <rmw_init+0x228>)
 800d740:	220a      	movs	r2, #10
 800d742:	f000 fdd3 	bl	800e2ec <rmw_uxrce_init_publisher_memory>
 800d746:	4956      	ldr	r1, [pc, #344]	@ (800d8a0 <rmw_init+0x22c>)
 800d748:	4856      	ldr	r0, [pc, #344]	@ (800d8a4 <rmw_init+0x230>)
 800d74a:	2201      	movs	r2, #1
 800d74c:	f000 fd8e 	bl	800e26c <rmw_uxrce_init_service_memory>
 800d750:	4955      	ldr	r1, [pc, #340]	@ (800d8a8 <rmw_init+0x234>)
 800d752:	4856      	ldr	r0, [pc, #344]	@ (800d8ac <rmw_init+0x238>)
 800d754:	2201      	movs	r2, #1
 800d756:	f000 fda9 	bl	800e2ac <rmw_uxrce_init_client_memory>
 800d75a:	4955      	ldr	r1, [pc, #340]	@ (800d8b0 <rmw_init+0x23c>)
 800d75c:	4855      	ldr	r0, [pc, #340]	@ (800d8b4 <rmw_init+0x240>)
 800d75e:	220f      	movs	r2, #15
 800d760:	f000 fe44 	bl	800e3ec <rmw_uxrce_init_topic_memory>
 800d764:	4954      	ldr	r1, [pc, #336]	@ (800d8b8 <rmw_init+0x244>)
 800d766:	4855      	ldr	r0, [pc, #340]	@ (800d8bc <rmw_init+0x248>)
 800d768:	2203      	movs	r2, #3
 800d76a:	f000 fe7f 	bl	800e46c <rmw_uxrce_init_init_options_impl_memory>
 800d76e:	4954      	ldr	r1, [pc, #336]	@ (800d8c0 <rmw_init+0x24c>)
 800d770:	4854      	ldr	r0, [pc, #336]	@ (800d8c4 <rmw_init+0x250>)
 800d772:	2204      	movs	r2, #4
 800d774:	f000 fe9a 	bl	800e4ac <rmw_uxrce_init_wait_set_memory>
 800d778:	4953      	ldr	r1, [pc, #332]	@ (800d8c8 <rmw_init+0x254>)
 800d77a:	4854      	ldr	r0, [pc, #336]	@ (800d8cc <rmw_init+0x258>)
 800d77c:	2204      	movs	r2, #4
 800d77e:	f000 feb5 	bl	800e4ec <rmw_uxrce_init_guard_condition_memory>
 800d782:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800d784:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800d786:	4642      	mov	r2, r8
 800d788:	f000 fd2a 	bl	800e1e0 <rmw_uxrce_transport_init>
 800d78c:	4607      	mov	r7, r0
 800d78e:	2800      	cmp	r0, #0
 800d790:	d158      	bne.n	800d844 <rmw_init+0x1d0>
 800d792:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d794:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800d798:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d79a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800d79e:	4628      	mov	r0, r5
 800d7a0:	f002 fc72 	bl	8010088 <uxr_init_session>
 800d7a4:	494a      	ldr	r1, [pc, #296]	@ (800d8d0 <rmw_init+0x25c>)
 800d7a6:	4622      	mov	r2, r4
 800d7a8:	4628      	mov	r0, r5
 800d7aa:	f002 fc91 	bl	80100d0 <uxr_set_topic_callback>
 800d7ae:	4949      	ldr	r1, [pc, #292]	@ (800d8d4 <rmw_init+0x260>)
 800d7b0:	463a      	mov	r2, r7
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	f002 fc88 	bl	80100c8 <uxr_set_status_callback>
 800d7b8:	4947      	ldr	r1, [pc, #284]	@ (800d8d8 <rmw_init+0x264>)
 800d7ba:	463a      	mov	r2, r7
 800d7bc:	4628      	mov	r0, r5
 800d7be:	f002 fc8b 	bl	80100d8 <uxr_set_request_callback>
 800d7c2:	4946      	ldr	r1, [pc, #280]	@ (800d8dc <rmw_init+0x268>)
 800d7c4:	463a      	mov	r2, r7
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	f002 fc8a 	bl	80100e0 <uxr_set_reply_callback>
 800d7cc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d7d0:	2304      	movs	r3, #4
 800d7d2:	0092      	lsls	r2, r2, #2
 800d7d4:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800d7d8:	4628      	mov	r0, r5
 800d7da:	f002 fcbf 	bl	801015c <uxr_create_input_reliable_stream>
 800d7de:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d7e2:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800d7e6:	0092      	lsls	r2, r2, #2
 800d7e8:	2304      	movs	r3, #4
 800d7ea:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	f002 fc8c 	bl	801010c <uxr_create_output_reliable_stream>
 800d7f4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	f002 fca9 	bl	8010150 <uxr_create_input_best_effort_stream>
 800d7fe:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800d802:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800d806:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d80a:	3114      	adds	r1, #20
 800d80c:	4628      	mov	r0, r5
 800d80e:	f002 fc6b 	bl	80100e8 <uxr_create_output_best_effort_stream>
 800d812:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800d816:	4628      	mov	r0, r5
 800d818:	f003 fa5e 	bl	8010cd8 <uxr_create_session>
 800d81c:	b1f8      	cbz	r0, 800d85e <rmw_init+0x1ea>
 800d81e:	4638      	mov	r0, r7
 800d820:	b003      	add	sp, #12
 800d822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d826:	270b      	movs	r7, #11
 800d828:	4638      	mov	r0, r7
 800d82a:	b003      	add	sp, #12
 800d82c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d830:	2701      	movs	r7, #1
 800d832:	4638      	mov	r0, r7
 800d834:	b003      	add	sp, #12
 800d836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d83a:	270c      	movs	r7, #12
 800d83c:	4638      	mov	r0, r7
 800d83e:	b003      	add	sp, #12
 800d840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d844:	4648      	mov	r0, r9
 800d846:	f002 fa2d 	bl	800fca4 <uxr_close_custom_transport>
 800d84a:	480d      	ldr	r0, [pc, #52]	@ (800d880 <rmw_init+0x20c>)
 800d84c:	4621      	mov	r1, r4
 800d84e:	f009 f8c3 	bl	80169d8 <put_memory>
 800d852:	4638      	mov	r0, r7
 800d854:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800d858:	b003      	add	sp, #12
 800d85a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d85e:	4648      	mov	r0, r9
 800d860:	f002 fa20 	bl	800fca4 <uxr_close_custom_transport>
 800d864:	4806      	ldr	r0, [pc, #24]	@ (800d880 <rmw_init+0x20c>)
 800d866:	4621      	mov	r1, r4
 800d868:	f009 f8b6 	bl	80169d8 <put_memory>
 800d86c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800d86e:	2701      	movs	r7, #1
 800d870:	e7d5      	b.n	800d81e <rmw_init+0x1aa>
 800d872:	bf00      	nop
 800d874:	0801b750 	.word	0x0801b750
 800d878:	2000b51c 	.word	0x2000b51c
 800d87c:	200077c8 	.word	0x200077c8
 800d880:	2000b50c 	.word	0x2000b50c
 800d884:	20008d70 	.word	0x20008d70
 800d888:	20006dec 	.word	0x20006dec
 800d88c:	2000b4dc 	.word	0x2000b4dc
 800d890:	2000ae70 	.word	0x2000ae70
 800d894:	2000b52c 	.word	0x2000b52c
 800d898:	20006e90 	.word	0x20006e90
 800d89c:	2000b4ec 	.word	0x2000b4ec
 800d8a0:	20007700 	.word	0x20007700
 800d8a4:	2000b4fc 	.word	0x2000b4fc
 800d8a8:	20006c20 	.word	0x20006c20
 800d8ac:	20006c0c 	.word	0x20006c0c
 800d8b0:	2000b2a8 	.word	0x2000b2a8
 800d8b4:	2000b53c 	.word	0x2000b53c
 800d8b8:	20006d68 	.word	0x20006d68
 800d8bc:	2000b4cc 	.word	0x2000b4cc
 800d8c0:	2000b44c 	.word	0x2000b44c
 800d8c4:	2000b54c 	.word	0x2000b54c
 800d8c8:	20006ce8 	.word	0x20006ce8
 800d8cc:	2000b4bc 	.word	0x2000b4bc
 800d8d0:	080167f1 	.word	0x080167f1
 800d8d4:	080167e9 	.word	0x080167e9
 800d8d8:	08016889 	.word	0x08016889
 800d8dc:	08016925 	.word	0x08016925

0800d8e0 <rmw_context_fini>:
 800d8e0:	4b17      	ldr	r3, [pc, #92]	@ (800d940 <rmw_context_fini+0x60>)
 800d8e2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800d8e4:	b570      	push	{r4, r5, r6, lr}
 800d8e6:	681c      	ldr	r4, [r3, #0]
 800d8e8:	4605      	mov	r5, r0
 800d8ea:	b334      	cbz	r4, 800d93a <rmw_context_fini+0x5a>
 800d8ec:	2600      	movs	r6, #0
 800d8ee:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d8f2:	6902      	ldr	r2, [r0, #16]
 800d8f4:	428a      	cmp	r2, r1
 800d8f6:	d018      	beq.n	800d92a <rmw_context_fini+0x4a>
 800d8f8:	2c00      	cmp	r4, #0
 800d8fa:	d1f8      	bne.n	800d8ee <rmw_context_fini+0xe>
 800d8fc:	b189      	cbz	r1, 800d922 <rmw_context_fini+0x42>
 800d8fe:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800d902:	789b      	ldrb	r3, [r3, #2]
 800d904:	2b01      	cmp	r3, #1
 800d906:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800d90a:	bf14      	ite	ne
 800d90c:	210a      	movne	r1, #10
 800d90e:	2100      	moveq	r1, #0
 800d910:	f003 f9ba 	bl	8010c88 <uxr_delete_session_retries>
 800d914:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d916:	f000 fe09 	bl	800e52c <rmw_uxrce_fini_session_memory>
 800d91a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d91c:	3010      	adds	r0, #16
 800d91e:	f002 f9c1 	bl	800fca4 <uxr_close_custom_transport>
 800d922:	2300      	movs	r3, #0
 800d924:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800d926:	4630      	mov	r0, r6
 800d928:	bd70      	pop	{r4, r5, r6, pc}
 800d92a:	3018      	adds	r0, #24
 800d92c:	f000 f89c 	bl	800da68 <rmw_destroy_node>
 800d930:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d932:	4606      	mov	r6, r0
 800d934:	2c00      	cmp	r4, #0
 800d936:	d1da      	bne.n	800d8ee <rmw_context_fini+0xe>
 800d938:	e7e0      	b.n	800d8fc <rmw_context_fini+0x1c>
 800d93a:	4626      	mov	r6, r4
 800d93c:	e7de      	b.n	800d8fc <rmw_context_fini+0x1c>
 800d93e:	bf00      	nop
 800d940:	2000b4dc 	.word	0x2000b4dc

0800d944 <create_node>:
 800d944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d948:	b083      	sub	sp, #12
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d05f      	beq.n	800da0e <create_node+0xca>
 800d94e:	4606      	mov	r6, r0
 800d950:	4835      	ldr	r0, [pc, #212]	@ (800da28 <create_node+0xe4>)
 800d952:	460f      	mov	r7, r1
 800d954:	4690      	mov	r8, r2
 800d956:	461d      	mov	r5, r3
 800d958:	f009 f82e 	bl	80169b8 <get_memory>
 800d95c:	2800      	cmp	r0, #0
 800d95e:	d056      	beq.n	800da0e <create_node+0xca>
 800d960:	6884      	ldr	r4, [r0, #8]
 800d962:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800d964:	6123      	str	r3, [r4, #16]
 800d966:	f009 f88f 	bl	8016a88 <rmw_get_implementation_identifier>
 800d96a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800d96e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800d972:	f8c4 9020 	str.w	r9, [r4, #32]
 800d976:	4630      	mov	r0, r6
 800d978:	f7f2 fc5c 	bl	8000234 <strlen>
 800d97c:	1c42      	adds	r2, r0, #1
 800d97e:	2a3c      	cmp	r2, #60	@ 0x3c
 800d980:	f104 0518 	add.w	r5, r4, #24
 800d984:	d840      	bhi.n	800da08 <create_node+0xc4>
 800d986:	4648      	mov	r0, r9
 800d988:	4631      	mov	r1, r6
 800d98a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800d98e:	f00b fc2c 	bl	80191ea <memcpy>
 800d992:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800d996:	4638      	mov	r0, r7
 800d998:	f7f2 fc4c 	bl	8000234 <strlen>
 800d99c:	1c42      	adds	r2, r0, #1
 800d99e:	2a3c      	cmp	r2, #60	@ 0x3c
 800d9a0:	d832      	bhi.n	800da08 <create_node+0xc4>
 800d9a2:	4639      	mov	r1, r7
 800d9a4:	4648      	mov	r0, r9
 800d9a6:	f00b fc20 	bl	80191ea <memcpy>
 800d9aa:	6923      	ldr	r3, [r4, #16]
 800d9ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d9b0:	2101      	movs	r1, #1
 800d9b2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800d9b6:	1842      	adds	r2, r0, r1
 800d9b8:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800d9bc:	f002 f976 	bl	800fcac <uxr_object_id>
 800d9c0:	6160      	str	r0, [r4, #20]
 800d9c2:	783b      	ldrb	r3, [r7, #0]
 800d9c4:	2b2f      	cmp	r3, #47	@ 0x2f
 800d9c6:	d127      	bne.n	800da18 <create_node+0xd4>
 800d9c8:	787b      	ldrb	r3, [r7, #1]
 800d9ca:	bb2b      	cbnz	r3, 800da18 <create_node+0xd4>
 800d9cc:	4a17      	ldr	r2, [pc, #92]	@ (800da2c <create_node+0xe8>)
 800d9ce:	4818      	ldr	r0, [pc, #96]	@ (800da30 <create_node+0xec>)
 800d9d0:	4633      	mov	r3, r6
 800d9d2:	213c      	movs	r1, #60	@ 0x3c
 800d9d4:	f00b f9d2 	bl	8018d7c <sniprintf>
 800d9d8:	6920      	ldr	r0, [r4, #16]
 800d9da:	4915      	ldr	r1, [pc, #84]	@ (800da30 <create_node+0xec>)
 800d9dc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800d9e0:	9100      	str	r1, [sp, #0]
 800d9e2:	2106      	movs	r1, #6
 800d9e4:	9101      	str	r1, [sp, #4]
 800d9e6:	6811      	ldr	r1, [r2, #0]
 800d9e8:	6962      	ldr	r2, [r4, #20]
 800d9ea:	fa1f f388 	uxth.w	r3, r8
 800d9ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d9f2:	f001 ff51 	bl	800f898 <uxr_buffer_create_participant_bin>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	6920      	ldr	r0, [r4, #16]
 800d9fa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d9fe:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800da02:	f000 ff0b 	bl	800e81c <run_xrce_session>
 800da06:	b918      	cbnz	r0, 800da10 <create_node+0xcc>
 800da08:	4628      	mov	r0, r5
 800da0a:	f000 fd95 	bl	800e538 <rmw_uxrce_fini_node_memory>
 800da0e:	2500      	movs	r5, #0
 800da10:	4628      	mov	r0, r5
 800da12:	b003      	add	sp, #12
 800da14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da18:	4a06      	ldr	r2, [pc, #24]	@ (800da34 <create_node+0xf0>)
 800da1a:	9600      	str	r6, [sp, #0]
 800da1c:	463b      	mov	r3, r7
 800da1e:	213c      	movs	r1, #60	@ 0x3c
 800da20:	4803      	ldr	r0, [pc, #12]	@ (800da30 <create_node+0xec>)
 800da22:	f00b f9ab 	bl	8018d7c <sniprintf>
 800da26:	e7d7      	b.n	800d9d8 <create_node+0x94>
 800da28:	2000b4dc 	.word	0x2000b4dc
 800da2c:	0801ac60 	.word	0x0801ac60
 800da30:	20006a90 	.word	0x20006a90
 800da34:	0801ac48 	.word	0x0801ac48

0800da38 <rmw_create_node>:
 800da38:	b199      	cbz	r1, 800da62 <rmw_create_node+0x2a>
 800da3a:	780b      	ldrb	r3, [r1, #0]
 800da3c:	468c      	mov	ip, r1
 800da3e:	b183      	cbz	r3, 800da62 <rmw_create_node+0x2a>
 800da40:	b410      	push	{r4}
 800da42:	4614      	mov	r4, r2
 800da44:	b14a      	cbz	r2, 800da5a <rmw_create_node+0x22>
 800da46:	7813      	ldrb	r3, [r2, #0]
 800da48:	b13b      	cbz	r3, 800da5a <rmw_create_node+0x22>
 800da4a:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800da4c:	4603      	mov	r3, r0
 800da4e:	4621      	mov	r1, r4
 800da50:	4660      	mov	r0, ip
 800da52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da56:	f7ff bf75 	b.w	800d944 <create_node>
 800da5a:	2000      	movs	r0, #0
 800da5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da60:	4770      	bx	lr
 800da62:	2000      	movs	r0, #0
 800da64:	4770      	bx	lr
 800da66:	bf00      	nop

0800da68 <rmw_destroy_node>:
 800da68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da6a:	b328      	cbz	r0, 800dab8 <rmw_destroy_node+0x50>
 800da6c:	4607      	mov	r7, r0
 800da6e:	6800      	ldr	r0, [r0, #0]
 800da70:	b120      	cbz	r0, 800da7c <rmw_destroy_node+0x14>
 800da72:	4b36      	ldr	r3, [pc, #216]	@ (800db4c <rmw_destroy_node+0xe4>)
 800da74:	6819      	ldr	r1, [r3, #0]
 800da76:	f7f2 fbd3 	bl	8000220 <strcmp>
 800da7a:	b9e8      	cbnz	r0, 800dab8 <rmw_destroy_node+0x50>
 800da7c:	687d      	ldr	r5, [r7, #4]
 800da7e:	b1dd      	cbz	r5, 800dab8 <rmw_destroy_node+0x50>
 800da80:	4b33      	ldr	r3, [pc, #204]	@ (800db50 <rmw_destroy_node+0xe8>)
 800da82:	681c      	ldr	r4, [r3, #0]
 800da84:	2c00      	cmp	r4, #0
 800da86:	d05f      	beq.n	800db48 <rmw_destroy_node+0xe0>
 800da88:	2600      	movs	r6, #0
 800da8a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800da8e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800da92:	429d      	cmp	r5, r3
 800da94:	d013      	beq.n	800dabe <rmw_destroy_node+0x56>
 800da96:	2c00      	cmp	r4, #0
 800da98:	d1f7      	bne.n	800da8a <rmw_destroy_node+0x22>
 800da9a:	4b2e      	ldr	r3, [pc, #184]	@ (800db54 <rmw_destroy_node+0xec>)
 800da9c:	681c      	ldr	r4, [r3, #0]
 800da9e:	b1c4      	cbz	r4, 800dad2 <rmw_destroy_node+0x6a>
 800daa0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800daa4:	6a0b      	ldr	r3, [r1, #32]
 800daa6:	429d      	cmp	r5, r3
 800daa8:	d1f9      	bne.n	800da9e <rmw_destroy_node+0x36>
 800daaa:	317c      	adds	r1, #124	@ 0x7c
 800daac:	4638      	mov	r0, r7
 800daae:	f000 fb37 	bl	800e120 <rmw_destroy_subscription>
 800dab2:	2801      	cmp	r0, #1
 800dab4:	4606      	mov	r6, r0
 800dab6:	d1f2      	bne.n	800da9e <rmw_destroy_node+0x36>
 800dab8:	2601      	movs	r6, #1
 800daba:	4630      	mov	r0, r6
 800dabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dabe:	3184      	adds	r1, #132	@ 0x84
 800dac0:	4638      	mov	r0, r7
 800dac2:	f000 f9a5 	bl	800de10 <rmw_destroy_publisher>
 800dac6:	2801      	cmp	r0, #1
 800dac8:	4606      	mov	r6, r0
 800daca:	d0f5      	beq.n	800dab8 <rmw_destroy_node+0x50>
 800dacc:	2c00      	cmp	r4, #0
 800dace:	d1dc      	bne.n	800da8a <rmw_destroy_node+0x22>
 800dad0:	e7e3      	b.n	800da9a <rmw_destroy_node+0x32>
 800dad2:	4b21      	ldr	r3, [pc, #132]	@ (800db58 <rmw_destroy_node+0xf0>)
 800dad4:	681c      	ldr	r4, [r3, #0]
 800dad6:	b16c      	cbz	r4, 800daf4 <rmw_destroy_node+0x8c>
 800dad8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dadc:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800dade:	429d      	cmp	r5, r3
 800dae0:	d1f9      	bne.n	800dad6 <rmw_destroy_node+0x6e>
 800dae2:	317c      	adds	r1, #124	@ 0x7c
 800dae4:	4638      	mov	r0, r7
 800dae6:	f000 fab7 	bl	800e058 <rmw_destroy_service>
 800daea:	2801      	cmp	r0, #1
 800daec:	4606      	mov	r6, r0
 800daee:	d0e3      	beq.n	800dab8 <rmw_destroy_node+0x50>
 800daf0:	2c00      	cmp	r4, #0
 800daf2:	d1f1      	bne.n	800dad8 <rmw_destroy_node+0x70>
 800daf4:	4b19      	ldr	r3, [pc, #100]	@ (800db5c <rmw_destroy_node+0xf4>)
 800daf6:	681c      	ldr	r4, [r3, #0]
 800daf8:	b16c      	cbz	r4, 800db16 <rmw_destroy_node+0xae>
 800dafa:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dafe:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800db00:	429d      	cmp	r5, r3
 800db02:	d1f9      	bne.n	800daf8 <rmw_destroy_node+0x90>
 800db04:	317c      	adds	r1, #124	@ 0x7c
 800db06:	4638      	mov	r0, r7
 800db08:	f008 ff7a 	bl	8016a00 <rmw_destroy_client>
 800db0c:	2801      	cmp	r0, #1
 800db0e:	4606      	mov	r6, r0
 800db10:	d0d2      	beq.n	800dab8 <rmw_destroy_node+0x50>
 800db12:	2c00      	cmp	r4, #0
 800db14:	d1f1      	bne.n	800dafa <rmw_destroy_node+0x92>
 800db16:	6928      	ldr	r0, [r5, #16]
 800db18:	696a      	ldr	r2, [r5, #20]
 800db1a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800db1e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800db22:	6819      	ldr	r1, [r3, #0]
 800db24:	f001 fe6c 	bl	800f800 <uxr_buffer_delete_entity>
 800db28:	4602      	mov	r2, r0
 800db2a:	6928      	ldr	r0, [r5, #16]
 800db2c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800db30:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800db34:	f000 fe72 	bl	800e81c <run_xrce_session>
 800db38:	2800      	cmp	r0, #0
 800db3a:	bf08      	it	eq
 800db3c:	2602      	moveq	r6, #2
 800db3e:	4638      	mov	r0, r7
 800db40:	f000 fcfa 	bl	800e538 <rmw_uxrce_fini_node_memory>
 800db44:	4630      	mov	r0, r6
 800db46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db48:	4626      	mov	r6, r4
 800db4a:	e7a6      	b.n	800da9a <rmw_destroy_node+0x32>
 800db4c:	0801b750 	.word	0x0801b750
 800db50:	2000b4ec 	.word	0x2000b4ec
 800db54:	2000b52c 	.word	0x2000b52c
 800db58:	2000b4fc 	.word	0x2000b4fc
 800db5c:	20006c0c 	.word	0x20006c0c

0800db60 <rmw_node_get_graph_guard_condition>:
 800db60:	6843      	ldr	r3, [r0, #4]
 800db62:	6918      	ldr	r0, [r3, #16]
 800db64:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800db68:	4770      	bx	lr
 800db6a:	bf00      	nop

0800db6c <flush_session>:
 800db6c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800db6e:	f002 beed 	b.w	801094c <uxr_run_session_until_confirm_delivery>
 800db72:	bf00      	nop

0800db74 <rmw_publish>:
 800db74:	2800      	cmp	r0, #0
 800db76:	d053      	beq.n	800dc20 <rmw_publish+0xac>
 800db78:	b570      	push	{r4, r5, r6, lr}
 800db7a:	460d      	mov	r5, r1
 800db7c:	b08e      	sub	sp, #56	@ 0x38
 800db7e:	2900      	cmp	r1, #0
 800db80:	d04b      	beq.n	800dc1a <rmw_publish+0xa6>
 800db82:	4604      	mov	r4, r0
 800db84:	6800      	ldr	r0, [r0, #0]
 800db86:	f000 ff63 	bl	800ea50 <is_uxrce_rmw_identifier_valid>
 800db8a:	2800      	cmp	r0, #0
 800db8c:	d045      	beq.n	800dc1a <rmw_publish+0xa6>
 800db8e:	6866      	ldr	r6, [r4, #4]
 800db90:	2e00      	cmp	r6, #0
 800db92:	d042      	beq.n	800dc1a <rmw_publish+0xa6>
 800db94:	69b4      	ldr	r4, [r6, #24]
 800db96:	4628      	mov	r0, r5
 800db98:	6923      	ldr	r3, [r4, #16]
 800db9a:	4798      	blx	r3
 800db9c:	69f3      	ldr	r3, [r6, #28]
 800db9e:	9005      	str	r0, [sp, #20]
 800dba0:	b113      	cbz	r3, 800dba8 <rmw_publish+0x34>
 800dba2:	a805      	add	r0, sp, #20
 800dba4:	4798      	blx	r3
 800dba6:	9805      	ldr	r0, [sp, #20]
 800dba8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dbac:	691b      	ldr	r3, [r3, #16]
 800dbae:	9000      	str	r0, [sp, #0]
 800dbb0:	6972      	ldr	r2, [r6, #20]
 800dbb2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800dbb4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800dbb8:	ab06      	add	r3, sp, #24
 800dbba:	f004 f99b 	bl	8011ef4 <uxr_prepare_output_stream>
 800dbbe:	b1d8      	cbz	r0, 800dbf8 <rmw_publish+0x84>
 800dbc0:	68a3      	ldr	r3, [r4, #8]
 800dbc2:	a906      	add	r1, sp, #24
 800dbc4:	4628      	mov	r0, r5
 800dbc6:	4798      	blx	r3
 800dbc8:	6a33      	ldr	r3, [r6, #32]
 800dbca:	4604      	mov	r4, r0
 800dbcc:	b10b      	cbz	r3, 800dbd2 <rmw_publish+0x5e>
 800dbce:	a806      	add	r0, sp, #24
 800dbd0:	4798      	blx	r3
 800dbd2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dbdc:	d022      	beq.n	800dc24 <rmw_publish+0xb0>
 800dbde:	6918      	ldr	r0, [r3, #16]
 800dbe0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800dbe2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dbe6:	f002 feb1 	bl	801094c <uxr_run_session_until_confirm_delivery>
 800dbea:	4020      	ands	r0, r4
 800dbec:	b2c4      	uxtb	r4, r0
 800dbee:	f084 0001 	eor.w	r0, r4, #1
 800dbf2:	b2c0      	uxtb	r0, r0
 800dbf4:	b00e      	add	sp, #56	@ 0x38
 800dbf6:	bd70      	pop	{r4, r5, r6, pc}
 800dbf8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dbfc:	6918      	ldr	r0, [r3, #16]
 800dbfe:	9b05      	ldr	r3, [sp, #20]
 800dc00:	9300      	str	r3, [sp, #0]
 800dc02:	4b0b      	ldr	r3, [pc, #44]	@ (800dc30 <rmw_publish+0xbc>)
 800dc04:	9301      	str	r3, [sp, #4]
 800dc06:	9602      	str	r6, [sp, #8]
 800dc08:	6972      	ldr	r2, [r6, #20]
 800dc0a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800dc0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc10:	ab06      	add	r3, sp, #24
 800dc12:	f004 f99f 	bl	8011f54 <uxr_prepare_output_stream_fragmented>
 800dc16:	2800      	cmp	r0, #0
 800dc18:	d1d2      	bne.n	800dbc0 <rmw_publish+0x4c>
 800dc1a:	2001      	movs	r0, #1
 800dc1c:	b00e      	add	sp, #56	@ 0x38
 800dc1e:	bd70      	pop	{r4, r5, r6, pc}
 800dc20:	2001      	movs	r0, #1
 800dc22:	4770      	bx	lr
 800dc24:	6918      	ldr	r0, [r3, #16]
 800dc26:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc2a:	f002 facf 	bl	80101cc <uxr_flash_output_streams>
 800dc2e:	e7de      	b.n	800dbee <rmw_publish+0x7a>
 800dc30:	0800db6d 	.word	0x0800db6d

0800dc34 <rmw_create_publisher>:
 800dc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc38:	b087      	sub	sp, #28
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	f000 80cc 	beq.w	800ddd8 <rmw_create_publisher+0x1a4>
 800dc40:	460e      	mov	r6, r1
 800dc42:	2900      	cmp	r1, #0
 800dc44:	f000 80c8 	beq.w	800ddd8 <rmw_create_publisher+0x1a4>
 800dc48:	4604      	mov	r4, r0
 800dc4a:	6800      	ldr	r0, [r0, #0]
 800dc4c:	4615      	mov	r5, r2
 800dc4e:	4698      	mov	r8, r3
 800dc50:	f000 fefe 	bl	800ea50 <is_uxrce_rmw_identifier_valid>
 800dc54:	2800      	cmp	r0, #0
 800dc56:	f000 80bf 	beq.w	800ddd8 <rmw_create_publisher+0x1a4>
 800dc5a:	2d00      	cmp	r5, #0
 800dc5c:	f000 80bc 	beq.w	800ddd8 <rmw_create_publisher+0x1a4>
 800dc60:	782b      	ldrb	r3, [r5, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	f000 80b8 	beq.w	800ddd8 <rmw_create_publisher+0x1a4>
 800dc68:	f1b8 0f00 	cmp.w	r8, #0
 800dc6c:	f000 80b4 	beq.w	800ddd8 <rmw_create_publisher+0x1a4>
 800dc70:	485c      	ldr	r0, [pc, #368]	@ (800dde4 <rmw_create_publisher+0x1b0>)
 800dc72:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dc76:	f008 fe9f 	bl	80169b8 <get_memory>
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	f000 80ac 	beq.w	800ddd8 <rmw_create_publisher+0x1a4>
 800dc80:	6884      	ldr	r4, [r0, #8]
 800dc82:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800dc86:	f008 feff 	bl	8016a88 <rmw_get_implementation_identifier>
 800dc8a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800dc8e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800dc92:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800dc96:	4628      	mov	r0, r5
 800dc98:	f7f2 facc 	bl	8000234 <strlen>
 800dc9c:	3001      	adds	r0, #1
 800dc9e:	283c      	cmp	r0, #60	@ 0x3c
 800dca0:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800dca4:	f200 8091 	bhi.w	800ddca <rmw_create_publisher+0x196>
 800dca8:	4a4f      	ldr	r2, [pc, #316]	@ (800dde8 <rmw_create_publisher+0x1b4>)
 800dcaa:	462b      	mov	r3, r5
 800dcac:	213c      	movs	r1, #60	@ 0x3c
 800dcae:	4650      	mov	r0, sl
 800dcb0:	f00b f864 	bl	8018d7c <sniprintf>
 800dcb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dcb8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800dcba:	4641      	mov	r1, r8
 800dcbc:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800dcc0:	2250      	movs	r2, #80	@ 0x50
 800dcc2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800dcc6:	f00b fa90 	bl	80191ea <memcpy>
 800dcca:	f898 3008 	ldrb.w	r3, [r8, #8]
 800dcce:	4947      	ldr	r1, [pc, #284]	@ (800ddec <rmw_create_publisher+0x1b8>)
 800dcd0:	2b02      	cmp	r3, #2
 800dcd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dcd6:	bf0c      	ite	eq
 800dcd8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800dcdc:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800dce0:	67a3      	str	r3, [r4, #120]	@ 0x78
 800dce2:	2300      	movs	r3, #0
 800dce4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800dce8:	4630      	mov	r0, r6
 800dcea:	f000 febf 	bl	800ea6c <get_message_typesupport_handle>
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	d06b      	beq.n	800ddca <rmw_create_publisher+0x196>
 800dcf2:	6842      	ldr	r2, [r0, #4]
 800dcf4:	61a2      	str	r2, [r4, #24]
 800dcf6:	2a00      	cmp	r2, #0
 800dcf8:	d067      	beq.n	800ddca <rmw_create_publisher+0x196>
 800dcfa:	4629      	mov	r1, r5
 800dcfc:	4643      	mov	r3, r8
 800dcfe:	4648      	mov	r0, r9
 800dd00:	f008 fec8 	bl	8016a94 <create_topic>
 800dd04:	6260      	str	r0, [r4, #36]	@ 0x24
 800dd06:	2800      	cmp	r0, #0
 800dd08:	d063      	beq.n	800ddd2 <rmw_create_publisher+0x19e>
 800dd0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dd12:	2103      	movs	r1, #3
 800dd14:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800dd18:	1c42      	adds	r2, r0, #1
 800dd1a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800dd1e:	f001 ffc5 	bl	800fcac <uxr_object_id>
 800dd22:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800dd26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd2a:	6120      	str	r0, [r4, #16]
 800dd2c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800dd30:	6910      	ldr	r0, [r2, #16]
 800dd32:	2506      	movs	r5, #6
 800dd34:	9500      	str	r5, [sp, #0]
 800dd36:	6819      	ldr	r1, [r3, #0]
 800dd38:	6922      	ldr	r2, [r4, #16]
 800dd3a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800dd3e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dd42:	f001 fe11 	bl	800f968 <uxr_buffer_create_publisher_bin>
 800dd46:	4602      	mov	r2, r0
 800dd48:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dd4c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800dd50:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800dd54:	f000 fd62 	bl	800e81c <run_xrce_session>
 800dd58:	b3b8      	cbz	r0, 800ddca <rmw_create_publisher+0x196>
 800dd5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dd62:	2105      	movs	r1, #5
 800dd64:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800dd68:	1c42      	adds	r2, r0, #1
 800dd6a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800dd6e:	f001 ff9d 	bl	800fcac <uxr_object_id>
 800dd72:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800dd76:	6160      	str	r0, [r4, #20]
 800dd78:	691e      	ldr	r6, [r3, #16]
 800dd7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd7e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800dd82:	f10d 0a10 	add.w	sl, sp, #16
 800dd86:	4641      	mov	r1, r8
 800dd88:	4650      	mov	r0, sl
 800dd8a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800dd8e:	f000 fd61 	bl	800e854 <convert_qos_profile>
 800dd92:	9503      	str	r5, [sp, #12]
 800dd94:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800dd98:	9001      	str	r0, [sp, #4]
 800dd9a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800dd9e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800dda2:	9300      	str	r3, [sp, #0]
 800dda4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800dda8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ddac:	f8d8 1000 	ldr.w	r1, [r8]
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	f001 fe09 	bl	800f9c8 <uxr_buffer_create_datawriter_bin>
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ddbc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ddc0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ddc4:	f000 fd2a 	bl	800e81c <run_xrce_session>
 800ddc8:	b938      	cbnz	r0, 800ddda <rmw_create_publisher+0x1a6>
 800ddca:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ddcc:	b108      	cbz	r0, 800ddd2 <rmw_create_publisher+0x19e>
 800ddce:	f000 fc23 	bl	800e618 <rmw_uxrce_fini_topic_memory>
 800ddd2:	4638      	mov	r0, r7
 800ddd4:	f000 fbc8 	bl	800e568 <rmw_uxrce_fini_publisher_memory>
 800ddd8:	2700      	movs	r7, #0
 800ddda:	4638      	mov	r0, r7
 800dddc:	b007      	add	sp, #28
 800ddde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dde2:	bf00      	nop
 800dde4:	2000b4ec 	.word	0x2000b4ec
 800dde8:	0801ac60 	.word	0x0801ac60
 800ddec:	0801a7a4 	.word	0x0801a7a4

0800ddf0 <rmw_publisher_get_actual_qos>:
 800ddf0:	b150      	cbz	r0, 800de08 <rmw_publisher_get_actual_qos+0x18>
 800ddf2:	b508      	push	{r3, lr}
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	b149      	cbz	r1, 800de0c <rmw_publisher_get_actual_qos+0x1c>
 800ddf8:	6841      	ldr	r1, [r0, #4]
 800ddfa:	2250      	movs	r2, #80	@ 0x50
 800ddfc:	3128      	adds	r1, #40	@ 0x28
 800ddfe:	4618      	mov	r0, r3
 800de00:	f00b f9f3 	bl	80191ea <memcpy>
 800de04:	2000      	movs	r0, #0
 800de06:	bd08      	pop	{r3, pc}
 800de08:	200b      	movs	r0, #11
 800de0a:	4770      	bx	lr
 800de0c:	200b      	movs	r0, #11
 800de0e:	bd08      	pop	{r3, pc}

0800de10 <rmw_destroy_publisher>:
 800de10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de12:	b128      	cbz	r0, 800de20 <rmw_destroy_publisher+0x10>
 800de14:	4604      	mov	r4, r0
 800de16:	6800      	ldr	r0, [r0, #0]
 800de18:	460d      	mov	r5, r1
 800de1a:	f000 fe19 	bl	800ea50 <is_uxrce_rmw_identifier_valid>
 800de1e:	b910      	cbnz	r0, 800de26 <rmw_destroy_publisher+0x16>
 800de20:	2401      	movs	r4, #1
 800de22:	4620      	mov	r0, r4
 800de24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de26:	6863      	ldr	r3, [r4, #4]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d0f9      	beq.n	800de20 <rmw_destroy_publisher+0x10>
 800de2c:	2d00      	cmp	r5, #0
 800de2e:	d0f7      	beq.n	800de20 <rmw_destroy_publisher+0x10>
 800de30:	6828      	ldr	r0, [r5, #0]
 800de32:	f000 fe0d 	bl	800ea50 <is_uxrce_rmw_identifier_valid>
 800de36:	2800      	cmp	r0, #0
 800de38:	d0f2      	beq.n	800de20 <rmw_destroy_publisher+0x10>
 800de3a:	686c      	ldr	r4, [r5, #4]
 800de3c:	2c00      	cmp	r4, #0
 800de3e:	d0ef      	beq.n	800de20 <rmw_destroy_publisher+0x10>
 800de40:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800de42:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800de46:	f008 fe75 	bl	8016b34 <destroy_topic>
 800de4a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800de4e:	6962      	ldr	r2, [r4, #20]
 800de50:	6918      	ldr	r0, [r3, #16]
 800de52:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800de56:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800de5a:	6819      	ldr	r1, [r3, #0]
 800de5c:	f001 fcd0 	bl	800f800 <uxr_buffer_delete_entity>
 800de60:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800de64:	6922      	ldr	r2, [r4, #16]
 800de66:	691b      	ldr	r3, [r3, #16]
 800de68:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800de6c:	4604      	mov	r4, r0
 800de6e:	6809      	ldr	r1, [r1, #0]
 800de70:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800de74:	f001 fcc4 	bl	800f800 <uxr_buffer_delete_entity>
 800de78:	693e      	ldr	r6, [r7, #16]
 800de7a:	4622      	mov	r2, r4
 800de7c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800de80:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800de84:	4604      	mov	r4, r0
 800de86:	4630      	mov	r0, r6
 800de88:	f000 fcc8 	bl	800e81c <run_xrce_session>
 800de8c:	693e      	ldr	r6, [r7, #16]
 800de8e:	4622      	mov	r2, r4
 800de90:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800de94:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800de98:	4604      	mov	r4, r0
 800de9a:	4630      	mov	r0, r6
 800de9c:	f000 fcbe 	bl	800e81c <run_xrce_session>
 800dea0:	b12c      	cbz	r4, 800deae <rmw_destroy_publisher+0x9e>
 800dea2:	b120      	cbz	r0, 800deae <rmw_destroy_publisher+0x9e>
 800dea4:	2400      	movs	r4, #0
 800dea6:	4628      	mov	r0, r5
 800dea8:	f000 fb5e 	bl	800e568 <rmw_uxrce_fini_publisher_memory>
 800deac:	e7b9      	b.n	800de22 <rmw_destroy_publisher+0x12>
 800deae:	2402      	movs	r4, #2
 800deb0:	e7f9      	b.n	800dea6 <rmw_destroy_publisher+0x96>
 800deb2:	bf00      	nop

0800deb4 <rmw_create_service>:
 800deb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb8:	b091      	sub	sp, #68	@ 0x44
 800deba:	2800      	cmp	r0, #0
 800debc:	f000 80ba 	beq.w	800e034 <rmw_create_service+0x180>
 800dec0:	4689      	mov	r9, r1
 800dec2:	2900      	cmp	r1, #0
 800dec4:	f000 80b6 	beq.w	800e034 <rmw_create_service+0x180>
 800dec8:	4606      	mov	r6, r0
 800deca:	6800      	ldr	r0, [r0, #0]
 800decc:	4614      	mov	r4, r2
 800dece:	461d      	mov	r5, r3
 800ded0:	f000 fdbe 	bl	800ea50 <is_uxrce_rmw_identifier_valid>
 800ded4:	2800      	cmp	r0, #0
 800ded6:	f000 80ad 	beq.w	800e034 <rmw_create_service+0x180>
 800deda:	2c00      	cmp	r4, #0
 800dedc:	f000 80aa 	beq.w	800e034 <rmw_create_service+0x180>
 800dee0:	7823      	ldrb	r3, [r4, #0]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	f000 80a6 	beq.w	800e034 <rmw_create_service+0x180>
 800dee8:	2d00      	cmp	r5, #0
 800deea:	f000 80a3 	beq.w	800e034 <rmw_create_service+0x180>
 800deee:	4854      	ldr	r0, [pc, #336]	@ (800e040 <rmw_create_service+0x18c>)
 800def0:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800def4:	f008 fd60 	bl	80169b8 <get_memory>
 800def8:	4606      	mov	r6, r0
 800defa:	2800      	cmp	r0, #0
 800defc:	f000 809b 	beq.w	800e036 <rmw_create_service+0x182>
 800df00:	6887      	ldr	r7, [r0, #8]
 800df02:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800df06:	f008 fdbf 	bl	8016a88 <rmw_get_implementation_identifier>
 800df0a:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 800df0e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800df10:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800df14:	4620      	mov	r0, r4
 800df16:	f7f2 f98d 	bl	8000234 <strlen>
 800df1a:	1c42      	adds	r2, r0, #1
 800df1c:	2a3c      	cmp	r2, #60	@ 0x3c
 800df1e:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 800df22:	f200 8084 	bhi.w	800e02e <rmw_create_service+0x17a>
 800df26:	4621      	mov	r1, r4
 800df28:	4650      	mov	r0, sl
 800df2a:	f00b f95e 	bl	80191ea <memcpy>
 800df2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800df32:	4629      	mov	r1, r5
 800df34:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 800df38:	677b      	str	r3, [r7, #116]	@ 0x74
 800df3a:	2250      	movs	r2, #80	@ 0x50
 800df3c:	f107 0020 	add.w	r0, r7, #32
 800df40:	f00b f953 	bl	80191ea <memcpy>
 800df44:	493f      	ldr	r1, [pc, #252]	@ (800e044 <rmw_create_service+0x190>)
 800df46:	4648      	mov	r0, r9
 800df48:	f000 fd9c 	bl	800ea84 <get_service_typesupport_handle>
 800df4c:	2800      	cmp	r0, #0
 800df4e:	d06e      	beq.n	800e02e <rmw_create_service+0x17a>
 800df50:	6843      	ldr	r3, [r0, #4]
 800df52:	617b      	str	r3, [r7, #20]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d06a      	beq.n	800e02e <rmw_create_service+0x17a>
 800df58:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800df5c:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 800e04c <rmw_create_service+0x198>
 800df60:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800e050 <rmw_create_service+0x19c>
 800df64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800df68:	2108      	movs	r1, #8
 800df6a:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 800df6e:	1c42      	adds	r2, r0, #1
 800df70:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 800df74:	f001 fe9a 	bl	800fcac <uxr_object_id>
 800df78:	2364      	movs	r3, #100	@ 0x64
 800df7a:	6138      	str	r0, [r7, #16]
 800df7c:	4652      	mov	r2, sl
 800df7e:	6978      	ldr	r0, [r7, #20]
 800df80:	4649      	mov	r1, r9
 800df82:	f000 fcb3 	bl	800e8ec <generate_service_types>
 800df86:	2800      	cmp	r0, #0
 800df88:	d051      	beq.n	800e02e <rmw_create_service+0x17a>
 800df8a:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 800e054 <rmw_create_service+0x1a0>
 800df8e:	4a2e      	ldr	r2, [pc, #184]	@ (800e048 <rmw_create_service+0x194>)
 800df90:	233c      	movs	r3, #60	@ 0x3c
 800df92:	4659      	mov	r1, fp
 800df94:	4620      	mov	r0, r4
 800df96:	f000 fc77 	bl	800e888 <generate_service_topics>
 800df9a:	2800      	cmp	r0, #0
 800df9c:	d047      	beq.n	800e02e <rmw_create_service+0x17a>
 800df9e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dfa2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800dfa6:	a80c      	add	r0, sp, #48	@ 0x30
 800dfa8:	4629      	mov	r1, r5
 800dfaa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dfae:	f000 fc51 	bl	800e854 <convert_qos_profile>
 800dfb2:	4a25      	ldr	r2, [pc, #148]	@ (800e048 <rmw_create_service+0x194>)
 800dfb4:	9400      	str	r4, [sp, #0]
 800dfb6:	e9cd b203 	strd	fp, r2, [sp, #12]
 800dfba:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800dfbe:	a80c      	add	r0, sp, #48	@ 0x30
 800dfc0:	c803      	ldmia	r0, {r0, r1}
 800dfc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfc4:	9005      	str	r0, [sp, #20]
 800dfc6:	9a08      	ldr	r2, [sp, #32]
 800dfc8:	f8ad 1018 	strh.w	r1, [sp, #24]
 800dfcc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800dfd0:	2306      	movs	r3, #6
 800dfd2:	9307      	str	r3, [sp, #28]
 800dfd4:	6811      	ldr	r1, [r2, #0]
 800dfd6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800dfda:	693a      	ldr	r2, [r7, #16]
 800dfdc:	f001 fd6a 	bl	800fab4 <uxr_buffer_create_replier_bin>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800dfe6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800dfea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800dfee:	f000 fc15 	bl	800e81c <run_xrce_session>
 800dff2:	b1e0      	cbz	r0, 800e02e <rmw_create_service+0x17a>
 800dff4:	7a2b      	ldrb	r3, [r5, #8]
 800dff6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800dffa:	2200      	movs	r2, #0
 800dffc:	2b02      	cmp	r3, #2
 800dffe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e002:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 800e006:	bf0c      	ite	eq
 800e008:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 800e00c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 800e010:	673a      	str	r2, [r7, #112]	@ 0x70
 800e012:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e014:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e018:	ab0e      	add	r3, sp, #56	@ 0x38
 800e01a:	9300      	str	r3, [sp, #0]
 800e01c:	6811      	ldr	r1, [r2, #0]
 800e01e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e020:	693a      	ldr	r2, [r7, #16]
 800e022:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e026:	f001 fe71 	bl	800fd0c <uxr_buffer_request_data>
 800e02a:	8338      	strh	r0, [r7, #24]
 800e02c:	e003      	b.n	800e036 <rmw_create_service+0x182>
 800e02e:	4630      	mov	r0, r6
 800e030:	f000 fac6 	bl	800e5c0 <rmw_uxrce_fini_service_memory>
 800e034:	2600      	movs	r6, #0
 800e036:	4630      	mov	r0, r6
 800e038:	b011      	add	sp, #68	@ 0x44
 800e03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e03e:	bf00      	nop
 800e040:	2000b4fc 	.word	0x2000b4fc
 800e044:	0801a7a4 	.word	0x0801a7a4
 800e048:	20006b6c 	.word	0x20006b6c
 800e04c:	20006ba8 	.word	0x20006ba8
 800e050:	20006b08 	.word	0x20006b08
 800e054:	20006acc 	.word	0x20006acc

0800e058 <rmw_destroy_service>:
 800e058:	b570      	push	{r4, r5, r6, lr}
 800e05a:	b128      	cbz	r0, 800e068 <rmw_destroy_service+0x10>
 800e05c:	4604      	mov	r4, r0
 800e05e:	6800      	ldr	r0, [r0, #0]
 800e060:	460d      	mov	r5, r1
 800e062:	f000 fcf5 	bl	800ea50 <is_uxrce_rmw_identifier_valid>
 800e066:	b910      	cbnz	r0, 800e06e <rmw_destroy_service+0x16>
 800e068:	2401      	movs	r4, #1
 800e06a:	4620      	mov	r0, r4
 800e06c:	bd70      	pop	{r4, r5, r6, pc}
 800e06e:	6863      	ldr	r3, [r4, #4]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d0f9      	beq.n	800e068 <rmw_destroy_service+0x10>
 800e074:	2d00      	cmp	r5, #0
 800e076:	d0f7      	beq.n	800e068 <rmw_destroy_service+0x10>
 800e078:	6828      	ldr	r0, [r5, #0]
 800e07a:	f000 fce9 	bl	800ea50 <is_uxrce_rmw_identifier_valid>
 800e07e:	2800      	cmp	r0, #0
 800e080:	d0f2      	beq.n	800e068 <rmw_destroy_service+0x10>
 800e082:	686e      	ldr	r6, [r5, #4]
 800e084:	2e00      	cmp	r6, #0
 800e086:	d0ef      	beq.n	800e068 <rmw_destroy_service+0x10>
 800e088:	6864      	ldr	r4, [r4, #4]
 800e08a:	6932      	ldr	r2, [r6, #16]
 800e08c:	6920      	ldr	r0, [r4, #16]
 800e08e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e092:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e096:	6819      	ldr	r1, [r3, #0]
 800e098:	f001 fe72 	bl	800fd80 <uxr_buffer_cancel_data>
 800e09c:	4602      	mov	r2, r0
 800e09e:	6920      	ldr	r0, [r4, #16]
 800e0a0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e0a4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e0a8:	f000 fbb8 	bl	800e81c <run_xrce_session>
 800e0ac:	6920      	ldr	r0, [r4, #16]
 800e0ae:	6932      	ldr	r2, [r6, #16]
 800e0b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e0b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e0b8:	6819      	ldr	r1, [r3, #0]
 800e0ba:	f001 fba1 	bl	800f800 <uxr_buffer_delete_entity>
 800e0be:	4602      	mov	r2, r0
 800e0c0:	6920      	ldr	r0, [r4, #16]
 800e0c2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e0c6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e0ca:	f000 fba7 	bl	800e81c <run_xrce_session>
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	bf14      	ite	ne
 800e0d4:	2400      	movne	r4, #0
 800e0d6:	2402      	moveq	r4, #2
 800e0d8:	f000 fa72 	bl	800e5c0 <rmw_uxrce_fini_service_memory>
 800e0dc:	e7c5      	b.n	800e06a <rmw_destroy_service+0x12>
 800e0de:	bf00      	nop

0800e0e0 <rmw_service_response_publisher_get_actual_qos>:
 800e0e0:	b150      	cbz	r0, 800e0f8 <rmw_service_response_publisher_get_actual_qos+0x18>
 800e0e2:	b508      	push	{r3, lr}
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	b149      	cbz	r1, 800e0fc <rmw_service_response_publisher_get_actual_qos+0x1c>
 800e0e8:	6841      	ldr	r1, [r0, #4]
 800e0ea:	2250      	movs	r2, #80	@ 0x50
 800e0ec:	3120      	adds	r1, #32
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f00b f87b 	bl	80191ea <memcpy>
 800e0f4:	2000      	movs	r0, #0
 800e0f6:	bd08      	pop	{r3, pc}
 800e0f8:	200b      	movs	r0, #11
 800e0fa:	4770      	bx	lr
 800e0fc:	200b      	movs	r0, #11
 800e0fe:	bd08      	pop	{r3, pc}

0800e100 <rmw_service_request_subscription_get_actual_qos>:
 800e100:	b150      	cbz	r0, 800e118 <rmw_service_request_subscription_get_actual_qos+0x18>
 800e102:	b508      	push	{r3, lr}
 800e104:	460b      	mov	r3, r1
 800e106:	b149      	cbz	r1, 800e11c <rmw_service_request_subscription_get_actual_qos+0x1c>
 800e108:	6841      	ldr	r1, [r0, #4]
 800e10a:	2250      	movs	r2, #80	@ 0x50
 800e10c:	3120      	adds	r1, #32
 800e10e:	4618      	mov	r0, r3
 800e110:	f00b f86b 	bl	80191ea <memcpy>
 800e114:	2000      	movs	r0, #0
 800e116:	bd08      	pop	{r3, pc}
 800e118:	200b      	movs	r0, #11
 800e11a:	4770      	bx	lr
 800e11c:	200b      	movs	r0, #11
 800e11e:	bd08      	pop	{r3, pc}

0800e120 <rmw_destroy_subscription>:
 800e120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e122:	b128      	cbz	r0, 800e130 <rmw_destroy_subscription+0x10>
 800e124:	4604      	mov	r4, r0
 800e126:	6800      	ldr	r0, [r0, #0]
 800e128:	460d      	mov	r5, r1
 800e12a:	f000 fc91 	bl	800ea50 <is_uxrce_rmw_identifier_valid>
 800e12e:	b910      	cbnz	r0, 800e136 <rmw_destroy_subscription+0x16>
 800e130:	2401      	movs	r4, #1
 800e132:	4620      	mov	r0, r4
 800e134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e136:	6863      	ldr	r3, [r4, #4]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d0f9      	beq.n	800e130 <rmw_destroy_subscription+0x10>
 800e13c:	2d00      	cmp	r5, #0
 800e13e:	d0f7      	beq.n	800e130 <rmw_destroy_subscription+0x10>
 800e140:	6828      	ldr	r0, [r5, #0]
 800e142:	f000 fc85 	bl	800ea50 <is_uxrce_rmw_identifier_valid>
 800e146:	2800      	cmp	r0, #0
 800e148:	d0f2      	beq.n	800e130 <rmw_destroy_subscription+0x10>
 800e14a:	686c      	ldr	r4, [r5, #4]
 800e14c:	2c00      	cmp	r4, #0
 800e14e:	d0ef      	beq.n	800e130 <rmw_destroy_subscription+0x10>
 800e150:	6a26      	ldr	r6, [r4, #32]
 800e152:	6962      	ldr	r2, [r4, #20]
 800e154:	6930      	ldr	r0, [r6, #16]
 800e156:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e15a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e15e:	6819      	ldr	r1, [r3, #0]
 800e160:	f001 fe0e 	bl	800fd80 <uxr_buffer_cancel_data>
 800e164:	4602      	mov	r2, r0
 800e166:	6930      	ldr	r0, [r6, #16]
 800e168:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e16c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e170:	f000 fb54 	bl	800e81c <run_xrce_session>
 800e174:	69e0      	ldr	r0, [r4, #28]
 800e176:	f008 fcdd 	bl	8016b34 <destroy_topic>
 800e17a:	6a23      	ldr	r3, [r4, #32]
 800e17c:	6962      	ldr	r2, [r4, #20]
 800e17e:	6918      	ldr	r0, [r3, #16]
 800e180:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e184:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e188:	6819      	ldr	r1, [r3, #0]
 800e18a:	f001 fb39 	bl	800f800 <uxr_buffer_delete_entity>
 800e18e:	6a23      	ldr	r3, [r4, #32]
 800e190:	6922      	ldr	r2, [r4, #16]
 800e192:	691b      	ldr	r3, [r3, #16]
 800e194:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e198:	4604      	mov	r4, r0
 800e19a:	6809      	ldr	r1, [r1, #0]
 800e19c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e1a0:	f001 fb2e 	bl	800f800 <uxr_buffer_delete_entity>
 800e1a4:	6937      	ldr	r7, [r6, #16]
 800e1a6:	4622      	mov	r2, r4
 800e1a8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800e1ac:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800e1b0:	4604      	mov	r4, r0
 800e1b2:	4638      	mov	r0, r7
 800e1b4:	f000 fb32 	bl	800e81c <run_xrce_session>
 800e1b8:	6936      	ldr	r6, [r6, #16]
 800e1ba:	4622      	mov	r2, r4
 800e1bc:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e1c0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	f000 fb28 	bl	800e81c <run_xrce_session>
 800e1cc:	b12c      	cbz	r4, 800e1da <rmw_destroy_subscription+0xba>
 800e1ce:	b120      	cbz	r0, 800e1da <rmw_destroy_subscription+0xba>
 800e1d0:	2400      	movs	r4, #0
 800e1d2:	4628      	mov	r0, r5
 800e1d4:	f000 f9de 	bl	800e594 <rmw_uxrce_fini_subscription_memory>
 800e1d8:	e7ab      	b.n	800e132 <rmw_destroy_subscription+0x12>
 800e1da:	2402      	movs	r4, #2
 800e1dc:	e7f9      	b.n	800e1d2 <rmw_destroy_subscription+0xb2>
 800e1de:	bf00      	nop

0800e1e0 <rmw_uxrce_transport_init>:
 800e1e0:	b508      	push	{r3, lr}
 800e1e2:	b108      	cbz	r0, 800e1e8 <rmw_uxrce_transport_init+0x8>
 800e1e4:	f100 0210 	add.w	r2, r0, #16
 800e1e8:	b139      	cbz	r1, 800e1fa <rmw_uxrce_transport_init+0x1a>
 800e1ea:	6949      	ldr	r1, [r1, #20]
 800e1ec:	4610      	mov	r0, r2
 800e1ee:	f001 fd25 	bl	800fc3c <uxr_init_custom_transport>
 800e1f2:	f080 0001 	eor.w	r0, r0, #1
 800e1f6:	b2c0      	uxtb	r0, r0
 800e1f8:	bd08      	pop	{r3, pc}
 800e1fa:	4b04      	ldr	r3, [pc, #16]	@ (800e20c <rmw_uxrce_transport_init+0x2c>)
 800e1fc:	4610      	mov	r0, r2
 800e1fe:	6859      	ldr	r1, [r3, #4]
 800e200:	f001 fd1c 	bl	800fc3c <uxr_init_custom_transport>
 800e204:	f080 0001 	eor.w	r0, r0, #1
 800e208:	b2c0      	uxtb	r0, r0
 800e20a:	bd08      	pop	{r3, pc}
 800e20c:	20006a74 	.word	0x20006a74

0800e210 <rmw_uros_epoch_millis>:
 800e210:	4b05      	ldr	r3, [pc, #20]	@ (800e228 <rmw_uros_epoch_millis+0x18>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	b123      	cbz	r3, 800e220 <rmw_uros_epoch_millis+0x10>
 800e216:	6898      	ldr	r0, [r3, #8]
 800e218:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e21c:	f001 bfba 	b.w	8010194 <uxr_epoch_millis>
 800e220:	2000      	movs	r0, #0
 800e222:	2100      	movs	r1, #0
 800e224:	4770      	bx	lr
 800e226:	bf00      	nop
 800e228:	2000b50c 	.word	0x2000b50c

0800e22c <rmw_uros_epoch_nanos>:
 800e22c:	4b05      	ldr	r3, [pc, #20]	@ (800e244 <rmw_uros_epoch_nanos+0x18>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	b123      	cbz	r3, 800e23c <rmw_uros_epoch_nanos+0x10>
 800e232:	6898      	ldr	r0, [r3, #8]
 800e234:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e238:	f001 bfbe 	b.w	80101b8 <uxr_epoch_nanos>
 800e23c:	2000      	movs	r0, #0
 800e23e:	2100      	movs	r1, #0
 800e240:	4770      	bx	lr
 800e242:	bf00      	nop
 800e244:	2000b50c 	.word	0x2000b50c

0800e248 <rmw_uros_sync_session>:
 800e248:	b508      	push	{r3, lr}
 800e24a:	4b07      	ldr	r3, [pc, #28]	@ (800e268 <rmw_uros_sync_session+0x20>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	b14b      	cbz	r3, 800e264 <rmw_uros_sync_session+0x1c>
 800e250:	4601      	mov	r1, r0
 800e252:	6898      	ldr	r0, [r3, #8]
 800e254:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e258:	f002 fbf2 	bl	8010a40 <uxr_sync_session>
 800e25c:	f080 0001 	eor.w	r0, r0, #1
 800e260:	b2c0      	uxtb	r0, r0
 800e262:	bd08      	pop	{r3, pc}
 800e264:	2001      	movs	r0, #1
 800e266:	bd08      	pop	{r3, pc}
 800e268:	2000b50c 	.word	0x2000b50c

0800e26c <rmw_uxrce_init_service_memory>:
 800e26c:	b1e2      	cbz	r2, 800e2a8 <rmw_uxrce_init_service_memory+0x3c>
 800e26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e272:	7b05      	ldrb	r5, [r0, #12]
 800e274:	4606      	mov	r6, r0
 800e276:	b9ad      	cbnz	r5, 800e2a4 <rmw_uxrce_init_service_memory+0x38>
 800e278:	23c8      	movs	r3, #200	@ 0xc8
 800e27a:	e9c0 5500 	strd	r5, r5, [r0]
 800e27e:	6083      	str	r3, [r0, #8]
 800e280:	f240 1301 	movw	r3, #257	@ 0x101
 800e284:	4617      	mov	r7, r2
 800e286:	8183      	strh	r3, [r0, #12]
 800e288:	460c      	mov	r4, r1
 800e28a:	46a8      	mov	r8, r5
 800e28c:	4621      	mov	r1, r4
 800e28e:	4630      	mov	r0, r6
 800e290:	3501      	adds	r5, #1
 800e292:	f008 fba1 	bl	80169d8 <put_memory>
 800e296:	42af      	cmp	r7, r5
 800e298:	60a4      	str	r4, [r4, #8]
 800e29a:	f884 800c 	strb.w	r8, [r4, #12]
 800e29e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e2a2:	d1f3      	bne.n	800e28c <rmw_uxrce_init_service_memory+0x20>
 800e2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a8:	4770      	bx	lr
 800e2aa:	bf00      	nop

0800e2ac <rmw_uxrce_init_client_memory>:
 800e2ac:	b1e2      	cbz	r2, 800e2e8 <rmw_uxrce_init_client_memory+0x3c>
 800e2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b2:	7b05      	ldrb	r5, [r0, #12]
 800e2b4:	4606      	mov	r6, r0
 800e2b6:	b9ad      	cbnz	r5, 800e2e4 <rmw_uxrce_init_client_memory+0x38>
 800e2b8:	23c8      	movs	r3, #200	@ 0xc8
 800e2ba:	e9c0 5500 	strd	r5, r5, [r0]
 800e2be:	6083      	str	r3, [r0, #8]
 800e2c0:	f240 1301 	movw	r3, #257	@ 0x101
 800e2c4:	4617      	mov	r7, r2
 800e2c6:	8183      	strh	r3, [r0, #12]
 800e2c8:	460c      	mov	r4, r1
 800e2ca:	46a8      	mov	r8, r5
 800e2cc:	4621      	mov	r1, r4
 800e2ce:	4630      	mov	r0, r6
 800e2d0:	3501      	adds	r5, #1
 800e2d2:	f008 fb81 	bl	80169d8 <put_memory>
 800e2d6:	42af      	cmp	r7, r5
 800e2d8:	60a4      	str	r4, [r4, #8]
 800e2da:	f884 800c 	strb.w	r8, [r4, #12]
 800e2de:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e2e2:	d1f3      	bne.n	800e2cc <rmw_uxrce_init_client_memory+0x20>
 800e2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e8:	4770      	bx	lr
 800e2ea:	bf00      	nop

0800e2ec <rmw_uxrce_init_publisher_memory>:
 800e2ec:	b1e2      	cbz	r2, 800e328 <rmw_uxrce_init_publisher_memory+0x3c>
 800e2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f2:	7b05      	ldrb	r5, [r0, #12]
 800e2f4:	4606      	mov	r6, r0
 800e2f6:	b9ad      	cbnz	r5, 800e324 <rmw_uxrce_init_publisher_memory+0x38>
 800e2f8:	23d8      	movs	r3, #216	@ 0xd8
 800e2fa:	e9c0 5500 	strd	r5, r5, [r0]
 800e2fe:	6083      	str	r3, [r0, #8]
 800e300:	f240 1301 	movw	r3, #257	@ 0x101
 800e304:	4617      	mov	r7, r2
 800e306:	8183      	strh	r3, [r0, #12]
 800e308:	460c      	mov	r4, r1
 800e30a:	46a8      	mov	r8, r5
 800e30c:	4621      	mov	r1, r4
 800e30e:	4630      	mov	r0, r6
 800e310:	3501      	adds	r5, #1
 800e312:	f008 fb61 	bl	80169d8 <put_memory>
 800e316:	42af      	cmp	r7, r5
 800e318:	60a4      	str	r4, [r4, #8]
 800e31a:	f884 800c 	strb.w	r8, [r4, #12]
 800e31e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e322:	d1f3      	bne.n	800e30c <rmw_uxrce_init_publisher_memory+0x20>
 800e324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e328:	4770      	bx	lr
 800e32a:	bf00      	nop

0800e32c <rmw_uxrce_init_subscription_memory>:
 800e32c:	b1e2      	cbz	r2, 800e368 <rmw_uxrce_init_subscription_memory+0x3c>
 800e32e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e332:	7b05      	ldrb	r5, [r0, #12]
 800e334:	4606      	mov	r6, r0
 800e336:	b9ad      	cbnz	r5, 800e364 <rmw_uxrce_init_subscription_memory+0x38>
 800e338:	23d8      	movs	r3, #216	@ 0xd8
 800e33a:	e9c0 5500 	strd	r5, r5, [r0]
 800e33e:	6083      	str	r3, [r0, #8]
 800e340:	f240 1301 	movw	r3, #257	@ 0x101
 800e344:	4617      	mov	r7, r2
 800e346:	8183      	strh	r3, [r0, #12]
 800e348:	460c      	mov	r4, r1
 800e34a:	46a8      	mov	r8, r5
 800e34c:	4621      	mov	r1, r4
 800e34e:	4630      	mov	r0, r6
 800e350:	3501      	adds	r5, #1
 800e352:	f008 fb41 	bl	80169d8 <put_memory>
 800e356:	42af      	cmp	r7, r5
 800e358:	60a4      	str	r4, [r4, #8]
 800e35a:	f884 800c 	strb.w	r8, [r4, #12]
 800e35e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e362:	d1f3      	bne.n	800e34c <rmw_uxrce_init_subscription_memory+0x20>
 800e364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e368:	4770      	bx	lr
 800e36a:	bf00      	nop

0800e36c <rmw_uxrce_init_node_memory>:
 800e36c:	b1e2      	cbz	r2, 800e3a8 <rmw_uxrce_init_node_memory+0x3c>
 800e36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e372:	7b05      	ldrb	r5, [r0, #12]
 800e374:	4606      	mov	r6, r0
 800e376:	b9ad      	cbnz	r5, 800e3a4 <rmw_uxrce_init_node_memory+0x38>
 800e378:	23a4      	movs	r3, #164	@ 0xa4
 800e37a:	e9c0 5500 	strd	r5, r5, [r0]
 800e37e:	6083      	str	r3, [r0, #8]
 800e380:	f240 1301 	movw	r3, #257	@ 0x101
 800e384:	4617      	mov	r7, r2
 800e386:	8183      	strh	r3, [r0, #12]
 800e388:	460c      	mov	r4, r1
 800e38a:	46a8      	mov	r8, r5
 800e38c:	4621      	mov	r1, r4
 800e38e:	4630      	mov	r0, r6
 800e390:	3501      	adds	r5, #1
 800e392:	f008 fb21 	bl	80169d8 <put_memory>
 800e396:	42af      	cmp	r7, r5
 800e398:	60a4      	str	r4, [r4, #8]
 800e39a:	f884 800c 	strb.w	r8, [r4, #12]
 800e39e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800e3a2:	d1f3      	bne.n	800e38c <rmw_uxrce_init_node_memory+0x20>
 800e3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop

0800e3ac <rmw_uxrce_init_session_memory>:
 800e3ac:	b1ea      	cbz	r2, 800e3ea <rmw_uxrce_init_session_memory+0x3e>
 800e3ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3b2:	7b05      	ldrb	r5, [r0, #12]
 800e3b4:	4606      	mov	r6, r0
 800e3b6:	b9b5      	cbnz	r5, 800e3e6 <rmw_uxrce_init_session_memory+0x3a>
 800e3b8:	e9c0 5500 	strd	r5, r5, [r0]
 800e3bc:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800e3c0:	f240 1301 	movw	r3, #257	@ 0x101
 800e3c4:	4617      	mov	r7, r2
 800e3c6:	f8c0 8008 	str.w	r8, [r0, #8]
 800e3ca:	460c      	mov	r4, r1
 800e3cc:	8183      	strh	r3, [r0, #12]
 800e3ce:	46a9      	mov	r9, r5
 800e3d0:	4621      	mov	r1, r4
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	3501      	adds	r5, #1
 800e3d6:	f008 faff 	bl	80169d8 <put_memory>
 800e3da:	42af      	cmp	r7, r5
 800e3dc:	60a4      	str	r4, [r4, #8]
 800e3de:	f884 900c 	strb.w	r9, [r4, #12]
 800e3e2:	4444      	add	r4, r8
 800e3e4:	d1f4      	bne.n	800e3d0 <rmw_uxrce_init_session_memory+0x24>
 800e3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ea:	4770      	bx	lr

0800e3ec <rmw_uxrce_init_topic_memory>:
 800e3ec:	b1e2      	cbz	r2, 800e428 <rmw_uxrce_init_topic_memory+0x3c>
 800e3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f2:	7b05      	ldrb	r5, [r0, #12]
 800e3f4:	4606      	mov	r6, r0
 800e3f6:	b9ad      	cbnz	r5, 800e424 <rmw_uxrce_init_topic_memory+0x38>
 800e3f8:	231c      	movs	r3, #28
 800e3fa:	e9c0 5500 	strd	r5, r5, [r0]
 800e3fe:	6083      	str	r3, [r0, #8]
 800e400:	f240 1301 	movw	r3, #257	@ 0x101
 800e404:	4617      	mov	r7, r2
 800e406:	8183      	strh	r3, [r0, #12]
 800e408:	460c      	mov	r4, r1
 800e40a:	46a8      	mov	r8, r5
 800e40c:	4621      	mov	r1, r4
 800e40e:	4630      	mov	r0, r6
 800e410:	3501      	adds	r5, #1
 800e412:	f008 fae1 	bl	80169d8 <put_memory>
 800e416:	42af      	cmp	r7, r5
 800e418:	60a4      	str	r4, [r4, #8]
 800e41a:	f884 800c 	strb.w	r8, [r4, #12]
 800e41e:	f104 041c 	add.w	r4, r4, #28
 800e422:	d1f3      	bne.n	800e40c <rmw_uxrce_init_topic_memory+0x20>
 800e424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e428:	4770      	bx	lr
 800e42a:	bf00      	nop

0800e42c <rmw_uxrce_init_static_input_buffer_memory>:
 800e42c:	b1ea      	cbz	r2, 800e46a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800e42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e432:	7b05      	ldrb	r5, [r0, #12]
 800e434:	4606      	mov	r6, r0
 800e436:	b9b5      	cbnz	r5, 800e466 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800e438:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800e43c:	e9c0 5500 	strd	r5, r5, [r0]
 800e440:	6083      	str	r3, [r0, #8]
 800e442:	f240 1301 	movw	r3, #257	@ 0x101
 800e446:	4617      	mov	r7, r2
 800e448:	8183      	strh	r3, [r0, #12]
 800e44a:	460c      	mov	r4, r1
 800e44c:	46a8      	mov	r8, r5
 800e44e:	4621      	mov	r1, r4
 800e450:	4630      	mov	r0, r6
 800e452:	3501      	adds	r5, #1
 800e454:	f008 fac0 	bl	80169d8 <put_memory>
 800e458:	42af      	cmp	r7, r5
 800e45a:	60a4      	str	r4, [r4, #8]
 800e45c:	f884 800c 	strb.w	r8, [r4, #12]
 800e460:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800e464:	d1f3      	bne.n	800e44e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e46a:	4770      	bx	lr

0800e46c <rmw_uxrce_init_init_options_impl_memory>:
 800e46c:	b1e2      	cbz	r2, 800e4a8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800e46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e472:	7b05      	ldrb	r5, [r0, #12]
 800e474:	4606      	mov	r6, r0
 800e476:	b9ad      	cbnz	r5, 800e4a4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800e478:	232c      	movs	r3, #44	@ 0x2c
 800e47a:	e9c0 5500 	strd	r5, r5, [r0]
 800e47e:	6083      	str	r3, [r0, #8]
 800e480:	f240 1301 	movw	r3, #257	@ 0x101
 800e484:	4617      	mov	r7, r2
 800e486:	8183      	strh	r3, [r0, #12]
 800e488:	460c      	mov	r4, r1
 800e48a:	46a8      	mov	r8, r5
 800e48c:	4621      	mov	r1, r4
 800e48e:	4630      	mov	r0, r6
 800e490:	3501      	adds	r5, #1
 800e492:	f008 faa1 	bl	80169d8 <put_memory>
 800e496:	42af      	cmp	r7, r5
 800e498:	60a4      	str	r4, [r4, #8]
 800e49a:	f884 800c 	strb.w	r8, [r4, #12]
 800e49e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800e4a2:	d1f3      	bne.n	800e48c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800e4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4a8:	4770      	bx	lr
 800e4aa:	bf00      	nop

0800e4ac <rmw_uxrce_init_wait_set_memory>:
 800e4ac:	b1e2      	cbz	r2, 800e4e8 <rmw_uxrce_init_wait_set_memory+0x3c>
 800e4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4b2:	7b05      	ldrb	r5, [r0, #12]
 800e4b4:	4606      	mov	r6, r0
 800e4b6:	b9ad      	cbnz	r5, 800e4e4 <rmw_uxrce_init_wait_set_memory+0x38>
 800e4b8:	231c      	movs	r3, #28
 800e4ba:	e9c0 5500 	strd	r5, r5, [r0]
 800e4be:	6083      	str	r3, [r0, #8]
 800e4c0:	f240 1301 	movw	r3, #257	@ 0x101
 800e4c4:	4617      	mov	r7, r2
 800e4c6:	8183      	strh	r3, [r0, #12]
 800e4c8:	460c      	mov	r4, r1
 800e4ca:	46a8      	mov	r8, r5
 800e4cc:	4621      	mov	r1, r4
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	3501      	adds	r5, #1
 800e4d2:	f008 fa81 	bl	80169d8 <put_memory>
 800e4d6:	42af      	cmp	r7, r5
 800e4d8:	60a4      	str	r4, [r4, #8]
 800e4da:	f884 800c 	strb.w	r8, [r4, #12]
 800e4de:	f104 041c 	add.w	r4, r4, #28
 800e4e2:	d1f3      	bne.n	800e4cc <rmw_uxrce_init_wait_set_memory+0x20>
 800e4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop

0800e4ec <rmw_uxrce_init_guard_condition_memory>:
 800e4ec:	b1e2      	cbz	r2, 800e528 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800e4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f2:	7b05      	ldrb	r5, [r0, #12]
 800e4f4:	4606      	mov	r6, r0
 800e4f6:	b9ad      	cbnz	r5, 800e524 <rmw_uxrce_init_guard_condition_memory+0x38>
 800e4f8:	2320      	movs	r3, #32
 800e4fa:	e9c0 5500 	strd	r5, r5, [r0]
 800e4fe:	6083      	str	r3, [r0, #8]
 800e500:	f240 1301 	movw	r3, #257	@ 0x101
 800e504:	4617      	mov	r7, r2
 800e506:	8183      	strh	r3, [r0, #12]
 800e508:	460c      	mov	r4, r1
 800e50a:	46a8      	mov	r8, r5
 800e50c:	4621      	mov	r1, r4
 800e50e:	4630      	mov	r0, r6
 800e510:	3501      	adds	r5, #1
 800e512:	f008 fa61 	bl	80169d8 <put_memory>
 800e516:	42af      	cmp	r7, r5
 800e518:	60a4      	str	r4, [r4, #8]
 800e51a:	f884 800c 	strb.w	r8, [r4, #12]
 800e51e:	f104 0420 	add.w	r4, r4, #32
 800e522:	d1f3      	bne.n	800e50c <rmw_uxrce_init_guard_condition_memory+0x20>
 800e524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop

0800e52c <rmw_uxrce_fini_session_memory>:
 800e52c:	4601      	mov	r1, r0
 800e52e:	4801      	ldr	r0, [pc, #4]	@ (800e534 <rmw_uxrce_fini_session_memory+0x8>)
 800e530:	f008 ba52 	b.w	80169d8 <put_memory>
 800e534:	2000b50c 	.word	0x2000b50c

0800e538 <rmw_uxrce_fini_node_memory>:
 800e538:	b538      	push	{r3, r4, r5, lr}
 800e53a:	4604      	mov	r4, r0
 800e53c:	6800      	ldr	r0, [r0, #0]
 800e53e:	b128      	cbz	r0, 800e54c <rmw_uxrce_fini_node_memory+0x14>
 800e540:	4b07      	ldr	r3, [pc, #28]	@ (800e560 <rmw_uxrce_fini_node_memory+0x28>)
 800e542:	6819      	ldr	r1, [r3, #0]
 800e544:	f7f1 fe6c 	bl	8000220 <strcmp>
 800e548:	b940      	cbnz	r0, 800e55c <rmw_uxrce_fini_node_memory+0x24>
 800e54a:	6020      	str	r0, [r4, #0]
 800e54c:	6861      	ldr	r1, [r4, #4]
 800e54e:	b129      	cbz	r1, 800e55c <rmw_uxrce_fini_node_memory+0x24>
 800e550:	2500      	movs	r5, #0
 800e552:	4804      	ldr	r0, [pc, #16]	@ (800e564 <rmw_uxrce_fini_node_memory+0x2c>)
 800e554:	610d      	str	r5, [r1, #16]
 800e556:	f008 fa3f 	bl	80169d8 <put_memory>
 800e55a:	6065      	str	r5, [r4, #4]
 800e55c:	bd38      	pop	{r3, r4, r5, pc}
 800e55e:	bf00      	nop
 800e560:	0801b750 	.word	0x0801b750
 800e564:	2000b4dc 	.word	0x2000b4dc

0800e568 <rmw_uxrce_fini_publisher_memory>:
 800e568:	b510      	push	{r4, lr}
 800e56a:	4604      	mov	r4, r0
 800e56c:	6800      	ldr	r0, [r0, #0]
 800e56e:	b128      	cbz	r0, 800e57c <rmw_uxrce_fini_publisher_memory+0x14>
 800e570:	4b06      	ldr	r3, [pc, #24]	@ (800e58c <rmw_uxrce_fini_publisher_memory+0x24>)
 800e572:	6819      	ldr	r1, [r3, #0]
 800e574:	f7f1 fe54 	bl	8000220 <strcmp>
 800e578:	b938      	cbnz	r0, 800e58a <rmw_uxrce_fini_publisher_memory+0x22>
 800e57a:	6020      	str	r0, [r4, #0]
 800e57c:	6861      	ldr	r1, [r4, #4]
 800e57e:	b121      	cbz	r1, 800e58a <rmw_uxrce_fini_publisher_memory+0x22>
 800e580:	4803      	ldr	r0, [pc, #12]	@ (800e590 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e582:	f008 fa29 	bl	80169d8 <put_memory>
 800e586:	2300      	movs	r3, #0
 800e588:	6063      	str	r3, [r4, #4]
 800e58a:	bd10      	pop	{r4, pc}
 800e58c:	0801b750 	.word	0x0801b750
 800e590:	2000b4ec 	.word	0x2000b4ec

0800e594 <rmw_uxrce_fini_subscription_memory>:
 800e594:	b510      	push	{r4, lr}
 800e596:	4604      	mov	r4, r0
 800e598:	6800      	ldr	r0, [r0, #0]
 800e59a:	b128      	cbz	r0, 800e5a8 <rmw_uxrce_fini_subscription_memory+0x14>
 800e59c:	4b06      	ldr	r3, [pc, #24]	@ (800e5b8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800e59e:	6819      	ldr	r1, [r3, #0]
 800e5a0:	f7f1 fe3e 	bl	8000220 <strcmp>
 800e5a4:	b938      	cbnz	r0, 800e5b6 <rmw_uxrce_fini_subscription_memory+0x22>
 800e5a6:	6020      	str	r0, [r4, #0]
 800e5a8:	6861      	ldr	r1, [r4, #4]
 800e5aa:	b121      	cbz	r1, 800e5b6 <rmw_uxrce_fini_subscription_memory+0x22>
 800e5ac:	4803      	ldr	r0, [pc, #12]	@ (800e5bc <rmw_uxrce_fini_subscription_memory+0x28>)
 800e5ae:	f008 fa13 	bl	80169d8 <put_memory>
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	6063      	str	r3, [r4, #4]
 800e5b6:	bd10      	pop	{r4, pc}
 800e5b8:	0801b750 	.word	0x0801b750
 800e5bc:	2000b52c 	.word	0x2000b52c

0800e5c0 <rmw_uxrce_fini_service_memory>:
 800e5c0:	b510      	push	{r4, lr}
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	6800      	ldr	r0, [r0, #0]
 800e5c6:	b128      	cbz	r0, 800e5d4 <rmw_uxrce_fini_service_memory+0x14>
 800e5c8:	4b06      	ldr	r3, [pc, #24]	@ (800e5e4 <rmw_uxrce_fini_service_memory+0x24>)
 800e5ca:	6819      	ldr	r1, [r3, #0]
 800e5cc:	f7f1 fe28 	bl	8000220 <strcmp>
 800e5d0:	b938      	cbnz	r0, 800e5e2 <rmw_uxrce_fini_service_memory+0x22>
 800e5d2:	6020      	str	r0, [r4, #0]
 800e5d4:	6861      	ldr	r1, [r4, #4]
 800e5d6:	b121      	cbz	r1, 800e5e2 <rmw_uxrce_fini_service_memory+0x22>
 800e5d8:	4803      	ldr	r0, [pc, #12]	@ (800e5e8 <rmw_uxrce_fini_service_memory+0x28>)
 800e5da:	f008 f9fd 	bl	80169d8 <put_memory>
 800e5de:	2300      	movs	r3, #0
 800e5e0:	6063      	str	r3, [r4, #4]
 800e5e2:	bd10      	pop	{r4, pc}
 800e5e4:	0801b750 	.word	0x0801b750
 800e5e8:	2000b4fc 	.word	0x2000b4fc

0800e5ec <rmw_uxrce_fini_client_memory>:
 800e5ec:	b510      	push	{r4, lr}
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	6800      	ldr	r0, [r0, #0]
 800e5f2:	b128      	cbz	r0, 800e600 <rmw_uxrce_fini_client_memory+0x14>
 800e5f4:	4b06      	ldr	r3, [pc, #24]	@ (800e610 <rmw_uxrce_fini_client_memory+0x24>)
 800e5f6:	6819      	ldr	r1, [r3, #0]
 800e5f8:	f7f1 fe12 	bl	8000220 <strcmp>
 800e5fc:	b938      	cbnz	r0, 800e60e <rmw_uxrce_fini_client_memory+0x22>
 800e5fe:	6020      	str	r0, [r4, #0]
 800e600:	6861      	ldr	r1, [r4, #4]
 800e602:	b121      	cbz	r1, 800e60e <rmw_uxrce_fini_client_memory+0x22>
 800e604:	4803      	ldr	r0, [pc, #12]	@ (800e614 <rmw_uxrce_fini_client_memory+0x28>)
 800e606:	f008 f9e7 	bl	80169d8 <put_memory>
 800e60a:	2300      	movs	r3, #0
 800e60c:	6063      	str	r3, [r4, #4]
 800e60e:	bd10      	pop	{r4, pc}
 800e610:	0801b750 	.word	0x0801b750
 800e614:	20006c0c 	.word	0x20006c0c

0800e618 <rmw_uxrce_fini_topic_memory>:
 800e618:	b510      	push	{r4, lr}
 800e61a:	4604      	mov	r4, r0
 800e61c:	4621      	mov	r1, r4
 800e61e:	4803      	ldr	r0, [pc, #12]	@ (800e62c <rmw_uxrce_fini_topic_memory+0x14>)
 800e620:	f008 f9da 	bl	80169d8 <put_memory>
 800e624:	2300      	movs	r3, #0
 800e626:	61a3      	str	r3, [r4, #24]
 800e628:	bd10      	pop	{r4, pc}
 800e62a:	bf00      	nop
 800e62c:	2000b53c 	.word	0x2000b53c

0800e630 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e630:	b082      	sub	sp, #8
 800e632:	b530      	push	{r4, r5, lr}
 800e634:	4925      	ldr	r1, [pc, #148]	@ (800e6cc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e636:	680d      	ldr	r5, [r1, #0]
 800e638:	ac03      	add	r4, sp, #12
 800e63a:	e884 000c 	stmia.w	r4, {r2, r3}
 800e63e:	461c      	mov	r4, r3
 800e640:	2d00      	cmp	r5, #0
 800e642:	d041      	beq.n	800e6c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800e644:	462b      	mov	r3, r5
 800e646:	2100      	movs	r1, #0
 800e648:	689a      	ldr	r2, [r3, #8]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800e650:	4290      	cmp	r0, r2
 800e652:	bf08      	it	eq
 800e654:	3101      	addeq	r1, #1
 800e656:	2b00      	cmp	r3, #0
 800e658:	d1f6      	bne.n	800e648 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e65a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e65e:	2b02      	cmp	r3, #2
 800e660:	d029      	beq.n	800e6b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e662:	d907      	bls.n	800e674 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e664:	2b03      	cmp	r3, #3
 800e666:	d005      	beq.n	800e674 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e668:	2100      	movs	r1, #0
 800e66a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e66e:	4608      	mov	r0, r1
 800e670:	b002      	add	sp, #8
 800e672:	4770      	bx	lr
 800e674:	b314      	cbz	r4, 800e6bc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e676:	428c      	cmp	r4, r1
 800e678:	d820      	bhi.n	800e6bc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e67a:	2d00      	cmp	r5, #0
 800e67c:	d0f4      	beq.n	800e668 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e67e:	2100      	movs	r1, #0
 800e680:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800e684:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e688:	e002      	b.n	800e690 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800e68a:	686d      	ldr	r5, [r5, #4]
 800e68c:	2d00      	cmp	r5, #0
 800e68e:	d0ec      	beq.n	800e66a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e690:	68ab      	ldr	r3, [r5, #8]
 800e692:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800e696:	4290      	cmp	r0, r2
 800e698:	d1f7      	bne.n	800e68a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e69a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800e69e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800e6a2:	4562      	cmp	r2, ip
 800e6a4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e6a8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800e6ac:	daed      	bge.n	800e68a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e6ae:	4694      	mov	ip, r2
 800e6b0:	461c      	mov	r4, r3
 800e6b2:	4629      	mov	r1, r5
 800e6b4:	e7e9      	b.n	800e68a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e6b6:	b10c      	cbz	r4, 800e6bc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e6b8:	428c      	cmp	r4, r1
 800e6ba:	d9d5      	bls.n	800e668 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e6bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6c0:	4802      	ldr	r0, [pc, #8]	@ (800e6cc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e6c2:	b002      	add	sp, #8
 800e6c4:	f008 b978 	b.w	80169b8 <get_memory>
 800e6c8:	4629      	mov	r1, r5
 800e6ca:	e7c6      	b.n	800e65a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e6cc:	2000b51c 	.word	0x2000b51c

0800e6d0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e6d0:	4b11      	ldr	r3, [pc, #68]	@ (800e718 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	b530      	push	{r4, r5, lr}
 800e6d6:	b1e3      	cbz	r3, 800e712 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800e6d8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800e6dc:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800e6e0:	2400      	movs	r4, #0
 800e6e2:	e001      	b.n	800e6e8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	b193      	cbz	r3, 800e70e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800e6e8:	689a      	ldr	r2, [r3, #8]
 800e6ea:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800e6ee:	4288      	cmp	r0, r1
 800e6f0:	d1f8      	bne.n	800e6e4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e6f2:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800e6f6:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800e6fa:	4571      	cmp	r1, lr
 800e6fc:	eb72 050c 	sbcs.w	r5, r2, ip
 800e700:	daf0      	bge.n	800e6e4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e702:	461c      	mov	r4, r3
 800e704:	685b      	ldr	r3, [r3, #4]
 800e706:	468e      	mov	lr, r1
 800e708:	4694      	mov	ip, r2
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d1ec      	bne.n	800e6e8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e70e:	4620      	mov	r0, r4
 800e710:	bd30      	pop	{r4, r5, pc}
 800e712:	461c      	mov	r4, r3
 800e714:	4620      	mov	r0, r4
 800e716:	bd30      	pop	{r4, r5, pc}
 800e718:	2000b51c 	.word	0x2000b51c
 800e71c:	00000000 	.word	0x00000000

0800e720 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e724:	4b3c      	ldr	r3, [pc, #240]	@ (800e818 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e726:	ed2d 8b06 	vpush	{d8-d10}
 800e72a:	681f      	ldr	r7, [r3, #0]
 800e72c:	b08d      	sub	sp, #52	@ 0x34
 800e72e:	f7ff fd7d 	bl	800e22c <rmw_uros_epoch_nanos>
 800e732:	2f00      	cmp	r7, #0
 800e734:	d05d      	beq.n	800e7f2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e736:	46b8      	mov	r8, r7
 800e738:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800e800 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800e73c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e740:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e744:	2b04      	cmp	r3, #4
 800e746:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800e808 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800e74a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800e810 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800e74e:	4681      	mov	r9, r0
 800e750:	468a      	mov	sl, r1
 800e752:	ac04      	add	r4, sp, #16
 800e754:	d03f      	beq.n	800e7d6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e756:	2b05      	cmp	r3, #5
 800e758:	d044      	beq.n	800e7e4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e75a:	2b03      	cmp	r3, #3
 800e75c:	d03b      	beq.n	800e7d6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e75e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e762:	ed8d ab06 	vstr	d10, [sp, #24]
 800e766:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e76a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800e76e:	ab08      	add	r3, sp, #32
 800e770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e772:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e776:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e77a:	f007 fe69 	bl	8016450 <rmw_time_equal>
 800e77e:	b118      	cbz	r0, 800e788 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e780:	ed8d 9b04 	vstr	d9, [sp, #16]
 800e784:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e788:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e78c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800e790:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800e794:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800e798:	f007 feae 	bl	80164f8 <rmw_time_total_nsec>
 800e79c:	1830      	adds	r0, r6, r0
 800e79e:	eb47 0101 	adc.w	r1, r7, r1
 800e7a2:	4548      	cmp	r0, r9
 800e7a4:	eb71 030a 	sbcs.w	r3, r1, sl
 800e7a8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800e7ac:	db05      	blt.n	800e7ba <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800e7ae:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800e7b2:	4591      	cmp	r9, r2
 800e7b4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800e7b8:	da03      	bge.n	800e7c2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800e7ba:	4817      	ldr	r0, [pc, #92]	@ (800e818 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e7bc:	4641      	mov	r1, r8
 800e7be:	f008 f90b 	bl	80169d8 <put_memory>
 800e7c2:	f1bb 0f00 	cmp.w	fp, #0
 800e7c6:	d014      	beq.n	800e7f2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e7c8:	46d8      	mov	r8, fp
 800e7ca:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e7ce:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e7d2:	2b04      	cmp	r3, #4
 800e7d4:	d1bf      	bne.n	800e756 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800e7d6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e7da:	3340      	adds	r3, #64	@ 0x40
 800e7dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e7de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e7e2:	e7c0      	b.n	800e766 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e7e4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e7e8:	3348      	adds	r3, #72	@ 0x48
 800e7ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e7ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e7f0:	e7b9      	b.n	800e766 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e7f2:	b00d      	add	sp, #52	@ 0x34
 800e7f4:	ecbd 8b06 	vpop	{d8-d10}
 800e7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7fc:	f3af 8000 	nop.w
	...
 800e808:	00000001 	.word	0x00000001
 800e80c:	00000000 	.word	0x00000000
 800e810:	0000001e 	.word	0x0000001e
 800e814:	00000000 	.word	0x00000000
 800e818:	2000b51c 	.word	0x2000b51c

0800e81c <run_xrce_session>:
 800e81c:	b510      	push	{r4, lr}
 800e81e:	788c      	ldrb	r4, [r1, #2]
 800e820:	b086      	sub	sp, #24
 800e822:	2c01      	cmp	r4, #1
 800e824:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e828:	d00c      	beq.n	800e844 <run_xrce_session+0x28>
 800e82a:	4619      	mov	r1, r3
 800e82c:	2301      	movs	r3, #1
 800e82e:	9300      	str	r3, [sp, #0]
 800e830:	f10d 020e 	add.w	r2, sp, #14
 800e834:	f10d 0317 	add.w	r3, sp, #23
 800e838:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e83c:	f002 f8ac 	bl	8010998 <uxr_run_session_until_all_status>
 800e840:	b006      	add	sp, #24
 800e842:	bd10      	pop	{r4, pc}
 800e844:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e848:	f001 fcc0 	bl	80101cc <uxr_flash_output_streams>
 800e84c:	4620      	mov	r0, r4
 800e84e:	b006      	add	sp, #24
 800e850:	bd10      	pop	{r4, pc}
 800e852:	bf00      	nop

0800e854 <convert_qos_profile>:
 800e854:	7a4a      	ldrb	r2, [r1, #9]
 800e856:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e85a:	2a02      	cmp	r2, #2
 800e85c:	bf18      	it	ne
 800e85e:	2200      	movne	r2, #0
 800e860:	7002      	strb	r2, [r0, #0]
 800e862:	780a      	ldrb	r2, [r1, #0]
 800e864:	8889      	ldrh	r1, [r1, #4]
 800e866:	8081      	strh	r1, [r0, #4]
 800e868:	f1ac 0c02 	sub.w	ip, ip, #2
 800e86c:	f1a2 0202 	sub.w	r2, r2, #2
 800e870:	fabc fc8c 	clz	ip, ip
 800e874:	fab2 f282 	clz	r2, r2
 800e878:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800e87c:	0952      	lsrs	r2, r2, #5
 800e87e:	f880 c001 	strb.w	ip, [r0, #1]
 800e882:	7082      	strb	r2, [r0, #2]
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop

0800e888 <generate_service_topics>:
 800e888:	b570      	push	{r4, r5, r6, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	461c      	mov	r4, r3
 800e88e:	4b12      	ldr	r3, [pc, #72]	@ (800e8d8 <generate_service_topics+0x50>)
 800e890:	9301      	str	r3, [sp, #4]
 800e892:	4605      	mov	r5, r0
 800e894:	4b11      	ldr	r3, [pc, #68]	@ (800e8dc <generate_service_topics+0x54>)
 800e896:	9000      	str	r0, [sp, #0]
 800e898:	4616      	mov	r6, r2
 800e89a:	4608      	mov	r0, r1
 800e89c:	4a10      	ldr	r2, [pc, #64]	@ (800e8e0 <generate_service_topics+0x58>)
 800e89e:	4621      	mov	r1, r4
 800e8a0:	f00a fa6c 	bl	8018d7c <sniprintf>
 800e8a4:	4b0f      	ldr	r3, [pc, #60]	@ (800e8e4 <generate_service_topics+0x5c>)
 800e8a6:	9301      	str	r3, [sp, #4]
 800e8a8:	4601      	mov	r1, r0
 800e8aa:	9500      	str	r5, [sp, #0]
 800e8ac:	4b0e      	ldr	r3, [pc, #56]	@ (800e8e8 <generate_service_topics+0x60>)
 800e8ae:	4a0c      	ldr	r2, [pc, #48]	@ (800e8e0 <generate_service_topics+0x58>)
 800e8b0:	460d      	mov	r5, r1
 800e8b2:	4630      	mov	r0, r6
 800e8b4:	4621      	mov	r1, r4
 800e8b6:	f00a fa61 	bl	8018d7c <sniprintf>
 800e8ba:	2d00      	cmp	r5, #0
 800e8bc:	db01      	blt.n	800e8c2 <generate_service_topics+0x3a>
 800e8be:	42ac      	cmp	r4, r5
 800e8c0:	dc02      	bgt.n	800e8c8 <generate_service_topics+0x40>
 800e8c2:	2000      	movs	r0, #0
 800e8c4:	b002      	add	sp, #8
 800e8c6:	bd70      	pop	{r4, r5, r6, pc}
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	dbfa      	blt.n	800e8c2 <generate_service_topics+0x3a>
 800e8cc:	4284      	cmp	r4, r0
 800e8ce:	bfd4      	ite	le
 800e8d0:	2000      	movle	r0, #0
 800e8d2:	2001      	movgt	r0, #1
 800e8d4:	b002      	add	sp, #8
 800e8d6:	bd70      	pop	{r4, r5, r6, pc}
 800e8d8:	0801ac84 	.word	0x0801ac84
 800e8dc:	0801ac80 	.word	0x0801ac80
 800e8e0:	0801ac5c 	.word	0x0801ac5c
 800e8e4:	0801ac78 	.word	0x0801ac78
 800e8e8:	0801ac74 	.word	0x0801ac74

0800e8ec <generate_service_types>:
 800e8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8f0:	4605      	mov	r5, r0
 800e8f2:	b086      	sub	sp, #24
 800e8f4:	6880      	ldr	r0, [r0, #8]
 800e8f6:	460c      	mov	r4, r1
 800e8f8:	4617      	mov	r7, r2
 800e8fa:	461e      	mov	r6, r3
 800e8fc:	4780      	blx	r0
 800e8fe:	68eb      	ldr	r3, [r5, #12]
 800e900:	4680      	mov	r8, r0
 800e902:	4798      	blx	r3
 800e904:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800e908:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800e90c:	2300      	movs	r3, #0
 800e90e:	7023      	strb	r3, [r4, #0]
 800e910:	6813      	ldr	r3, [r2, #0]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d042      	beq.n	800e99c <generate_service_types+0xb0>
 800e916:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800e9b0 <generate_service_types+0xc4>
 800e91a:	4641      	mov	r1, r8
 800e91c:	4620      	mov	r0, r4
 800e91e:	4c22      	ldr	r4, [pc, #136]	@ (800e9a8 <generate_service_types+0xbc>)
 800e920:	9405      	str	r4, [sp, #20]
 800e922:	6852      	ldr	r2, [r2, #4]
 800e924:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800e9b8 <generate_service_types+0xcc>
 800e928:	9204      	str	r2, [sp, #16]
 800e92a:	9100      	str	r1, [sp, #0]
 800e92c:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800e930:	4a1e      	ldr	r2, [pc, #120]	@ (800e9ac <generate_service_types+0xc0>)
 800e932:	f8cd a004 	str.w	sl, [sp, #4]
 800e936:	4631      	mov	r1, r6
 800e938:	f00a fa20 	bl	8018d7c <sniprintf>
 800e93c:	2800      	cmp	r0, #0
 800e93e:	db1f      	blt.n	800e980 <generate_service_types+0x94>
 800e940:	2300      	movs	r3, #0
 800e942:	703b      	strb	r3, [r7, #0]
 800e944:	f8d9 3000 	ldr.w	r3, [r9]
 800e948:	42b0      	cmp	r0, r6
 800e94a:	bfac      	ite	ge
 800e94c:	2500      	movge	r5, #0
 800e94e:	2501      	movlt	r5, #1
 800e950:	b1eb      	cbz	r3, 800e98e <generate_service_types+0xa2>
 800e952:	4a17      	ldr	r2, [pc, #92]	@ (800e9b0 <generate_service_types+0xc4>)
 800e954:	9405      	str	r4, [sp, #20]
 800e956:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e95a:	9200      	str	r2, [sp, #0]
 800e95c:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800e960:	e9cd a401 	strd	sl, r4, [sp, #4]
 800e964:	4a11      	ldr	r2, [pc, #68]	@ (800e9ac <generate_service_types+0xc0>)
 800e966:	4638      	mov	r0, r7
 800e968:	4631      	mov	r1, r6
 800e96a:	f00a fa07 	bl	8018d7c <sniprintf>
 800e96e:	2800      	cmp	r0, #0
 800e970:	db10      	blt.n	800e994 <generate_service_types+0xa8>
 800e972:	42b0      	cmp	r0, r6
 800e974:	bfb4      	ite	lt
 800e976:	4628      	movlt	r0, r5
 800e978:	2000      	movge	r0, #0
 800e97a:	b006      	add	sp, #24
 800e97c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e980:	2300      	movs	r3, #0
 800e982:	703b      	strb	r3, [r7, #0]
 800e984:	f8d9 3000 	ldr.w	r3, [r9]
 800e988:	2500      	movs	r5, #0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d1e1      	bne.n	800e952 <generate_service_types+0x66>
 800e98e:	4b09      	ldr	r3, [pc, #36]	@ (800e9b4 <generate_service_types+0xc8>)
 800e990:	461a      	mov	r2, r3
 800e992:	e7df      	b.n	800e954 <generate_service_types+0x68>
 800e994:	2000      	movs	r0, #0
 800e996:	b006      	add	sp, #24
 800e998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e99c:	4b05      	ldr	r3, [pc, #20]	@ (800e9b4 <generate_service_types+0xc8>)
 800e99e:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 800e9b0 <generate_service_types+0xc4>
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	e7ba      	b.n	800e91c <generate_service_types+0x30>
 800e9a6:	bf00      	nop
 800e9a8:	0801ac64 	.word	0x0801ac64
 800e9ac:	0801ac54 	.word	0x0801ac54
 800e9b0:	0801ac50 	.word	0x0801ac50
 800e9b4:	0801b7dc 	.word	0x0801b7dc
 800e9b8:	0801ac68 	.word	0x0801ac68

0800e9bc <generate_type_name>:
 800e9bc:	b530      	push	{r4, r5, lr}
 800e9be:	2300      	movs	r3, #0
 800e9c0:	700b      	strb	r3, [r1, #0]
 800e9c2:	6803      	ldr	r3, [r0, #0]
 800e9c4:	b087      	sub	sp, #28
 800e9c6:	4614      	mov	r4, r2
 800e9c8:	b1d3      	cbz	r3, 800ea00 <generate_type_name+0x44>
 800e9ca:	4a0f      	ldr	r2, [pc, #60]	@ (800ea08 <generate_type_name+0x4c>)
 800e9cc:	4615      	mov	r5, r2
 800e9ce:	9203      	str	r2, [sp, #12]
 800e9d0:	9500      	str	r5, [sp, #0]
 800e9d2:	6842      	ldr	r2, [r0, #4]
 800e9d4:	480d      	ldr	r0, [pc, #52]	@ (800ea0c <generate_type_name+0x50>)
 800e9d6:	9001      	str	r0, [sp, #4]
 800e9d8:	4608      	mov	r0, r1
 800e9da:	490d      	ldr	r1, [pc, #52]	@ (800ea10 <generate_type_name+0x54>)
 800e9dc:	9204      	str	r2, [sp, #16]
 800e9de:	9105      	str	r1, [sp, #20]
 800e9e0:	9102      	str	r1, [sp, #8]
 800e9e2:	4a0c      	ldr	r2, [pc, #48]	@ (800ea14 <generate_type_name+0x58>)
 800e9e4:	4621      	mov	r1, r4
 800e9e6:	f00a f9c9 	bl	8018d7c <sniprintf>
 800e9ea:	2800      	cmp	r0, #0
 800e9ec:	db05      	blt.n	800e9fa <generate_type_name+0x3e>
 800e9ee:	4284      	cmp	r4, r0
 800e9f0:	bfd4      	ite	le
 800e9f2:	2000      	movle	r0, #0
 800e9f4:	2001      	movgt	r0, #1
 800e9f6:	b007      	add	sp, #28
 800e9f8:	bd30      	pop	{r4, r5, pc}
 800e9fa:	2000      	movs	r0, #0
 800e9fc:	b007      	add	sp, #28
 800e9fe:	bd30      	pop	{r4, r5, pc}
 800ea00:	4b05      	ldr	r3, [pc, #20]	@ (800ea18 <generate_type_name+0x5c>)
 800ea02:	4a01      	ldr	r2, [pc, #4]	@ (800ea08 <generate_type_name+0x4c>)
 800ea04:	461d      	mov	r5, r3
 800ea06:	e7e2      	b.n	800e9ce <generate_type_name+0x12>
 800ea08:	0801ac50 	.word	0x0801ac50
 800ea0c:	0801ac68 	.word	0x0801ac68
 800ea10:	0801ac64 	.word	0x0801ac64
 800ea14:	0801ac54 	.word	0x0801ac54
 800ea18:	0801b7dc 	.word	0x0801b7dc

0800ea1c <generate_topic_name>:
 800ea1c:	b510      	push	{r4, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	4614      	mov	r4, r2
 800ea22:	9000      	str	r0, [sp, #0]
 800ea24:	4b08      	ldr	r3, [pc, #32]	@ (800ea48 <generate_topic_name+0x2c>)
 800ea26:	4a09      	ldr	r2, [pc, #36]	@ (800ea4c <generate_topic_name+0x30>)
 800ea28:	4608      	mov	r0, r1
 800ea2a:	4621      	mov	r1, r4
 800ea2c:	f00a f9a6 	bl	8018d7c <sniprintf>
 800ea30:	2800      	cmp	r0, #0
 800ea32:	db05      	blt.n	800ea40 <generate_topic_name+0x24>
 800ea34:	4284      	cmp	r4, r0
 800ea36:	bfd4      	ite	le
 800ea38:	2000      	movle	r0, #0
 800ea3a:	2001      	movgt	r0, #1
 800ea3c:	b002      	add	sp, #8
 800ea3e:	bd10      	pop	{r4, pc}
 800ea40:	2000      	movs	r0, #0
 800ea42:	b002      	add	sp, #8
 800ea44:	bd10      	pop	{r4, pc}
 800ea46:	bf00      	nop
 800ea48:	0801ac8c 	.word	0x0801ac8c
 800ea4c:	0801ac6c 	.word	0x0801ac6c

0800ea50 <is_uxrce_rmw_identifier_valid>:
 800ea50:	b510      	push	{r4, lr}
 800ea52:	4604      	mov	r4, r0
 800ea54:	b140      	cbz	r0, 800ea68 <is_uxrce_rmw_identifier_valid+0x18>
 800ea56:	f008 f817 	bl	8016a88 <rmw_get_implementation_identifier>
 800ea5a:	4601      	mov	r1, r0
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	f7f1 fbdf 	bl	8000220 <strcmp>
 800ea62:	fab0 f080 	clz	r0, r0
 800ea66:	0940      	lsrs	r0, r0, #5
 800ea68:	bd10      	pop	{r4, pc}
 800ea6a:	bf00      	nop

0800ea6c <get_message_typesupport_handle>:
 800ea6c:	6883      	ldr	r3, [r0, #8]
 800ea6e:	4718      	bx	r3

0800ea70 <get_message_typesupport_handle_function>:
 800ea70:	b510      	push	{r4, lr}
 800ea72:	4604      	mov	r4, r0
 800ea74:	6800      	ldr	r0, [r0, #0]
 800ea76:	f7f1 fbd3 	bl	8000220 <strcmp>
 800ea7a:	2800      	cmp	r0, #0
 800ea7c:	bf0c      	ite	eq
 800ea7e:	4620      	moveq	r0, r4
 800ea80:	2000      	movne	r0, #0
 800ea82:	bd10      	pop	{r4, pc}

0800ea84 <get_service_typesupport_handle>:
 800ea84:	6883      	ldr	r3, [r0, #8]
 800ea86:	4718      	bx	r3

0800ea88 <get_service_typesupport_handle_function>:
 800ea88:	b510      	push	{r4, lr}
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	6800      	ldr	r0, [r0, #0]
 800ea8e:	f7f1 fbc7 	bl	8000220 <strcmp>
 800ea92:	2800      	cmp	r0, #0
 800ea94:	bf0c      	ite	eq
 800ea96:	4620      	moveq	r0, r4
 800ea98:	2000      	movne	r0, #0
 800ea9a:	bd10      	pop	{r4, pc}

0800ea9c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800ea9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaa0:	6805      	ldr	r5, [r0, #0]
 800eaa2:	4604      	mov	r4, r0
 800eaa4:	4628      	mov	r0, r5
 800eaa6:	460e      	mov	r6, r1
 800eaa8:	f7f1 fbba 	bl	8000220 <strcmp>
 800eaac:	b1c8      	cbz	r0, 800eae2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800eaae:	4b11      	ldr	r3, [pc, #68]	@ (800eaf4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	429d      	cmp	r5, r3
 800eab4:	d112      	bne.n	800eadc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800eab6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800eaba:	f8d8 4000 	ldr.w	r4, [r8]
 800eabe:	b16c      	cbz	r4, 800eadc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800eac0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800eac4:	2700      	movs	r7, #0
 800eac6:	3d04      	subs	r5, #4
 800eac8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800eacc:	4631      	mov	r1, r6
 800eace:	f7f1 fba7 	bl	8000220 <strcmp>
 800ead2:	00bb      	lsls	r3, r7, #2
 800ead4:	b140      	cbz	r0, 800eae8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800ead6:	3701      	adds	r7, #1
 800ead8:	42bc      	cmp	r4, r7
 800eada:	d1f5      	bne.n	800eac8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800eadc:	2000      	movs	r0, #0
 800eade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eae2:	4620      	mov	r0, r4
 800eae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eae8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800eaec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eaf0:	58d3      	ldr	r3, [r2, r3]
 800eaf2:	4718      	bx	r3
 800eaf4:	2000020c 	.word	0x2000020c

0800eaf8 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800eaf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eafc:	6805      	ldr	r5, [r0, #0]
 800eafe:	4604      	mov	r4, r0
 800eb00:	4628      	mov	r0, r5
 800eb02:	460e      	mov	r6, r1
 800eb04:	f7f1 fb8c 	bl	8000220 <strcmp>
 800eb08:	b1c8      	cbz	r0, 800eb3e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800eb0a:	4b11      	ldr	r3, [pc, #68]	@ (800eb50 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	429d      	cmp	r5, r3
 800eb10:	d112      	bne.n	800eb38 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800eb12:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800eb16:	f8d8 4000 	ldr.w	r4, [r8]
 800eb1a:	b16c      	cbz	r4, 800eb38 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800eb1c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800eb20:	2700      	movs	r7, #0
 800eb22:	3d04      	subs	r5, #4
 800eb24:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800eb28:	4631      	mov	r1, r6
 800eb2a:	f7f1 fb79 	bl	8000220 <strcmp>
 800eb2e:	00bb      	lsls	r3, r7, #2
 800eb30:	b140      	cbz	r0, 800eb44 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800eb32:	3701      	adds	r7, #1
 800eb34:	42bc      	cmp	r4, r7
 800eb36:	d1f5      	bne.n	800eb24 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800eb38:	2000      	movs	r0, #0
 800eb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb3e:	4620      	mov	r0, r4
 800eb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb44:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800eb48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4c:	58d3      	ldr	r3, [r2, r3]
 800eb4e:	4718      	bx	r3
 800eb50:	2000020c 	.word	0x2000020c

0800eb54 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800eb54:	4b04      	ldr	r3, [pc, #16]	@ (800eb68 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800eb56:	681a      	ldr	r2, [r3, #0]
 800eb58:	b10a      	cbz	r2, 800eb5e <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800eb5a:	4803      	ldr	r0, [pc, #12]	@ (800eb68 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800eb5c:	4770      	bx	lr
 800eb5e:	4a03      	ldr	r2, [pc, #12]	@ (800eb6c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800eb60:	4801      	ldr	r0, [pc, #4]	@ (800eb68 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800eb62:	6812      	ldr	r2, [r2, #0]
 800eb64:	601a      	str	r2, [r3, #0]
 800eb66:	4770      	bx	lr
 800eb68:	2000021c 	.word	0x2000021c
 800eb6c:	2000020c 	.word	0x2000020c

0800eb70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800eb70:	4a02      	ldr	r2, [pc, #8]	@ (800eb7c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800eb72:	4b03      	ldr	r3, [pc, #12]	@ (800eb80 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800eb74:	6812      	ldr	r2, [r2, #0]
 800eb76:	601a      	str	r2, [r3, #0]
 800eb78:	4770      	bx	lr
 800eb7a:	bf00      	nop
 800eb7c:	2000020c 	.word	0x2000020c
 800eb80:	2000021c 	.word	0x2000021c

0800eb84 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800eb84:	2009      	movs	r0, #9
 800eb86:	4770      	bx	lr

0800eb88 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800eb88:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800eb8c:	4770      	bx	lr
 800eb8e:	bf00      	nop

0800eb90 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800eb90:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800eb94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb98:	e9c2 0100 	strd	r0, r1, [r2]
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop

0800eba0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800eba0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800eba4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800eba8:	e9c1 2300 	strd	r2, r3, [r1]
 800ebac:	4770      	bx	lr
 800ebae:	bf00      	nop

0800ebb0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800ebb0:	f008 bb1e 	b.w	80171f0 <sensor_msgs__msg__Imu__init>

0800ebb4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800ebb4:	f008 bb72 	b.w	801729c <sensor_msgs__msg__Imu__fini>

0800ebb8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800ebb8:	2009      	movs	r0, #9
 800ebba:	4770      	bx	lr

0800ebbc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800ebbc:	2009      	movs	r0, #9
 800ebbe:	4770      	bx	lr

0800ebc0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800ebc0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop

0800ebc8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800ebc8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ebcc:	4770      	bx	lr
 800ebce:	bf00      	nop

0800ebd0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800ebd0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop

0800ebd8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800ebd8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ebdc:	4770      	bx	lr
 800ebde:	bf00      	nop

0800ebe0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800ebe0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ebe4:	4770      	bx	lr
 800ebe6:	bf00      	nop

0800ebe8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800ebe8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ebec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebf0:	e9c2 0100 	strd	r0, r1, [r2]
 800ebf4:	4770      	bx	lr
 800ebf6:	bf00      	nop

0800ebf8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800ebf8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ebfc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ec00:	e9c1 2300 	strd	r2, r3, [r1]
 800ec04:	4770      	bx	lr
 800ec06:	bf00      	nop

0800ec08 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800ec08:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ec0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec10:	e9c2 0100 	strd	r0, r1, [r2]
 800ec14:	4770      	bx	lr
 800ec16:	bf00      	nop

0800ec18 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800ec18:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ec1c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ec20:	e9c1 2300 	strd	r2, r3, [r1]
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop

0800ec28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800ec28:	b510      	push	{r4, lr}
 800ec2a:	f000 f90f 	bl	800ee4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800ec2e:	4c0b      	ldr	r4, [pc, #44]	@ (800ec5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800ec30:	60e0      	str	r0, [r4, #12]
 800ec32:	f000 fa33 	bl	800f09c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800ec36:	64a0      	str	r0, [r4, #72]	@ 0x48
 800ec38:	f000 fa42 	bl	800f0c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ec3c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800ec40:	f000 fa3e 	bl	800f0c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ec44:	4b06      	ldr	r3, [pc, #24]	@ (800ec60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800ec46:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	b10a      	cbz	r2, 800ec52 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800ec4e:	4804      	ldr	r0, [pc, #16]	@ (800ec60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800ec50:	bd10      	pop	{r4, pc}
 800ec52:	4a04      	ldr	r2, [pc, #16]	@ (800ec64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800ec54:	4802      	ldr	r0, [pc, #8]	@ (800ec60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800ec56:	6812      	ldr	r2, [r2, #0]
 800ec58:	601a      	str	r2, [r3, #0]
 800ec5a:	bd10      	pop	{r4, pc}
 800ec5c:	20000228 	.word	0x20000228
 800ec60:	200003cc 	.word	0x200003cc
 800ec64:	20000210 	.word	0x20000210

0800ec68 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800ec68:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800ec6c:	4680      	mov	r8, r0
 800ec6e:	460f      	mov	r7, r1
 800ec70:	f000 f910 	bl	800ee94 <get_serialized_size_std_msgs__msg__Header>
 800ec74:	183c      	adds	r4, r7, r0
 800ec76:	4621      	mov	r1, r4
 800ec78:	f108 0018 	add.w	r0, r8, #24
 800ec7c:	f000 fa2e 	bl	800f0dc <get_serialized_size_geometry_msgs__msg__Quaternion>
 800ec80:	4404      	add	r4, r0
 800ec82:	2108      	movs	r1, #8
 800ec84:	4620      	mov	r0, r4
 800ec86:	f7fd f91f 	bl	800bec8 <ucdr_alignment>
 800ec8a:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800ec8e:	4425      	add	r5, r4
 800ec90:	4629      	mov	r1, r5
 800ec92:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800ec96:	f000 fad9 	bl	800f24c <get_serialized_size_geometry_msgs__msg__Vector3>
 800ec9a:	4405      	add	r5, r0
 800ec9c:	2108      	movs	r1, #8
 800ec9e:	4628      	mov	r0, r5
 800eca0:	f7fd f912 	bl	800bec8 <ucdr_alignment>
 800eca4:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800eca8:	4425      	add	r5, r4
 800ecaa:	4629      	mov	r1, r5
 800ecac:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800ecb0:	f000 facc 	bl	800f24c <get_serialized_size_geometry_msgs__msg__Vector3>
 800ecb4:	4405      	add	r5, r0
 800ecb6:	2108      	movs	r1, #8
 800ecb8:	4628      	mov	r0, r5
 800ecba:	f7fd f905 	bl	800bec8 <ucdr_alignment>
 800ecbe:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800ecc2:	4438      	add	r0, r7
 800ecc4:	4428      	add	r0, r5
 800ecc6:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800ecca:	bf00      	nop

0800eccc <get_serialized_size_sensor_msgs__msg__Imu>:
 800eccc:	b108      	cbz	r0, 800ecd2 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800ecce:	f7ff bfcb 	b.w	800ec68 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800ecd2:	4770      	bx	lr

0800ecd4 <_Imu__get_serialized_size>:
 800ecd4:	b110      	cbz	r0, 800ecdc <_Imu__get_serialized_size+0x8>
 800ecd6:	2100      	movs	r1, #0
 800ecd8:	f7ff bfc6 	b.w	800ec68 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800ecdc:	4770      	bx	lr
 800ecde:	bf00      	nop

0800ece0 <_Imu__cdr_deserialize>:
 800ece0:	b538      	push	{r3, r4, r5, lr}
 800ece2:	460c      	mov	r4, r1
 800ece4:	b399      	cbz	r1, 800ed4e <_Imu__cdr_deserialize+0x6e>
 800ece6:	4605      	mov	r5, r0
 800ece8:	f000 f956 	bl	800ef98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800ecec:	6843      	ldr	r3, [r0, #4]
 800ecee:	4621      	mov	r1, r4
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	4628      	mov	r0, r5
 800ecf4:	4798      	blx	r3
 800ecf6:	f000 faa5 	bl	800f244 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800ecfa:	6843      	ldr	r3, [r0, #4]
 800ecfc:	f104 0118 	add.w	r1, r4, #24
 800ed00:	68db      	ldr	r3, [r3, #12]
 800ed02:	4628      	mov	r0, r5
 800ed04:	4798      	blx	r3
 800ed06:	2209      	movs	r2, #9
 800ed08:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	f000 fcc9 	bl	800f6a4 <ucdr_deserialize_array_double>
 800ed12:	f000 fb27 	bl	800f364 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ed16:	6843      	ldr	r3, [r0, #4]
 800ed18:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800ed1c:	68db      	ldr	r3, [r3, #12]
 800ed1e:	4628      	mov	r0, r5
 800ed20:	4798      	blx	r3
 800ed22:	2209      	movs	r2, #9
 800ed24:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800ed28:	4628      	mov	r0, r5
 800ed2a:	f000 fcbb 	bl	800f6a4 <ucdr_deserialize_array_double>
 800ed2e:	f000 fb19 	bl	800f364 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ed32:	6843      	ldr	r3, [r0, #4]
 800ed34:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	4798      	blx	r3
 800ed3e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800ed42:	4628      	mov	r0, r5
 800ed44:	2209      	movs	r2, #9
 800ed46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed4a:	f000 bcab 	b.w	800f6a4 <ucdr_deserialize_array_double>
 800ed4e:	4608      	mov	r0, r1
 800ed50:	bd38      	pop	{r3, r4, r5, pc}
 800ed52:	bf00      	nop

0800ed54 <_Imu__cdr_serialize>:
 800ed54:	2800      	cmp	r0, #0
 800ed56:	d035      	beq.n	800edc4 <_Imu__cdr_serialize+0x70>
 800ed58:	b538      	push	{r3, r4, r5, lr}
 800ed5a:	460d      	mov	r5, r1
 800ed5c:	4604      	mov	r4, r0
 800ed5e:	f000 f91b 	bl	800ef98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800ed62:	6843      	ldr	r3, [r0, #4]
 800ed64:	4629      	mov	r1, r5
 800ed66:	689b      	ldr	r3, [r3, #8]
 800ed68:	4620      	mov	r0, r4
 800ed6a:	4798      	blx	r3
 800ed6c:	f000 fa6a 	bl	800f244 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800ed70:	6843      	ldr	r3, [r0, #4]
 800ed72:	4629      	mov	r1, r5
 800ed74:	689b      	ldr	r3, [r3, #8]
 800ed76:	f104 0018 	add.w	r0, r4, #24
 800ed7a:	4798      	blx	r3
 800ed7c:	2209      	movs	r2, #9
 800ed7e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800ed82:	4628      	mov	r0, r5
 800ed84:	f000 fc3a 	bl	800f5fc <ucdr_serialize_array_double>
 800ed88:	f000 faec 	bl	800f364 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ed8c:	6843      	ldr	r3, [r0, #4]
 800ed8e:	4629      	mov	r1, r5
 800ed90:	689b      	ldr	r3, [r3, #8]
 800ed92:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800ed96:	4798      	blx	r3
 800ed98:	2209      	movs	r2, #9
 800ed9a:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800ed9e:	4628      	mov	r0, r5
 800eda0:	f000 fc2c 	bl	800f5fc <ucdr_serialize_array_double>
 800eda4:	f000 fade 	bl	800f364 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800eda8:	6843      	ldr	r3, [r0, #4]
 800edaa:	4629      	mov	r1, r5
 800edac:	689b      	ldr	r3, [r3, #8]
 800edae:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800edb2:	4798      	blx	r3
 800edb4:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800edb8:	4628      	mov	r0, r5
 800edba:	2209      	movs	r2, #9
 800edbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edc0:	f000 bc1c 	b.w	800f5fc <ucdr_serialize_array_double>
 800edc4:	4770      	bx	lr
 800edc6:	bf00      	nop

0800edc8 <max_serialized_size_sensor_msgs__msg__Imu>:
 800edc8:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800edcc:	2301      	movs	r3, #1
 800edce:	7003      	strb	r3, [r0, #0]
 800edd0:	4680      	mov	r8, r0
 800edd2:	460f      	mov	r7, r1
 800edd4:	f000 f8d6 	bl	800ef84 <max_serialized_size_std_msgs__msg__Header>
 800edd8:	183c      	adds	r4, r7, r0
 800edda:	4621      	mov	r1, r4
 800eddc:	4640      	mov	r0, r8
 800edde:	f000 fa0f 	bl	800f200 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800ede2:	4404      	add	r4, r0
 800ede4:	2108      	movs	r1, #8
 800ede6:	4620      	mov	r0, r4
 800ede8:	f7fd f86e 	bl	800bec8 <ucdr_alignment>
 800edec:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800edf0:	4425      	add	r5, r4
 800edf2:	4629      	mov	r1, r5
 800edf4:	4640      	mov	r0, r8
 800edf6:	f000 fa99 	bl	800f32c <max_serialized_size_geometry_msgs__msg__Vector3>
 800edfa:	4405      	add	r5, r0
 800edfc:	2108      	movs	r1, #8
 800edfe:	4628      	mov	r0, r5
 800ee00:	f7fd f862 	bl	800bec8 <ucdr_alignment>
 800ee04:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800ee08:	4425      	add	r5, r4
 800ee0a:	4629      	mov	r1, r5
 800ee0c:	4640      	mov	r0, r8
 800ee0e:	f000 fa8d 	bl	800f32c <max_serialized_size_geometry_msgs__msg__Vector3>
 800ee12:	4405      	add	r5, r0
 800ee14:	2108      	movs	r1, #8
 800ee16:	4628      	mov	r0, r5
 800ee18:	f7fd f856 	bl	800bec8 <ucdr_alignment>
 800ee1c:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800ee20:	4438      	add	r0, r7
 800ee22:	4428      	add	r0, r5
 800ee24:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800ee28 <_Imu__max_serialized_size>:
 800ee28:	b500      	push	{lr}
 800ee2a:	b083      	sub	sp, #12
 800ee2c:	2100      	movs	r1, #0
 800ee2e:	f10d 0007 	add.w	r0, sp, #7
 800ee32:	f7ff ffc9 	bl	800edc8 <max_serialized_size_sensor_msgs__msg__Imu>
 800ee36:	b003      	add	sp, #12
 800ee38:	f85d fb04 	ldr.w	pc, [sp], #4

0800ee3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800ee3c:	4800      	ldr	r0, [pc, #0]	@ (800ee40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800ee3e:	4770      	bx	lr
 800ee40:	200003d8 	.word	0x200003d8

0800ee44 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800ee44:	f008 ba3e 	b.w	80172c4 <std_msgs__msg__Header__init>

0800ee48 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800ee48:	f008 ba60 	b.w	801730c <std_msgs__msg__Header__fini>

0800ee4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800ee4c:	b508      	push	{r3, lr}
 800ee4e:	f000 f8ab 	bl	800efa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ee52:	4b06      	ldr	r3, [pc, #24]	@ (800ee6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800ee54:	4906      	ldr	r1, [pc, #24]	@ (800ee70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800ee56:	681a      	ldr	r2, [r3, #0]
 800ee58:	60c8      	str	r0, [r1, #12]
 800ee5a:	b10a      	cbz	r2, 800ee60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800ee5c:	4803      	ldr	r0, [pc, #12]	@ (800ee6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800ee5e:	bd08      	pop	{r3, pc}
 800ee60:	4a04      	ldr	r2, [pc, #16]	@ (800ee74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800ee62:	4802      	ldr	r0, [pc, #8]	@ (800ee6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800ee64:	6812      	ldr	r2, [r2, #0]
 800ee66:	601a      	str	r2, [r3, #0]
 800ee68:	bd08      	pop	{r3, pc}
 800ee6a:	bf00      	nop
 800ee6c:	20000478 	.word	0x20000478
 800ee70:	20000400 	.word	0x20000400
 800ee74:	20000210 	.word	0x20000210

0800ee78 <_Header__max_serialized_size>:
 800ee78:	b500      	push	{lr}
 800ee7a:	b083      	sub	sp, #12
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	2100      	movs	r1, #0
 800ee80:	f10d 0007 	add.w	r0, sp, #7
 800ee84:	f88d 3007 	strb.w	r3, [sp, #7]
 800ee88:	f000 f8ec 	bl	800f064 <max_serialized_size_builtin_interfaces__msg__Time>
 800ee8c:	b003      	add	sp, #12
 800ee8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee92:	bf00      	nop

0800ee94 <get_serialized_size_std_msgs__msg__Header>:
 800ee94:	b570      	push	{r4, r5, r6, lr}
 800ee96:	4605      	mov	r5, r0
 800ee98:	b168      	cbz	r0, 800eeb6 <get_serialized_size_std_msgs__msg__Header+0x22>
 800ee9a:	460c      	mov	r4, r1
 800ee9c:	f000 f892 	bl	800efc4 <get_serialized_size_builtin_interfaces__msg__Time>
 800eea0:	1826      	adds	r6, r4, r0
 800eea2:	2104      	movs	r1, #4
 800eea4:	4630      	mov	r0, r6
 800eea6:	f7fd f80f 	bl	800bec8 <ucdr_alignment>
 800eeaa:	68e9      	ldr	r1, [r5, #12]
 800eeac:	f1c4 0405 	rsb	r4, r4, #5
 800eeb0:	440c      	add	r4, r1
 800eeb2:	4404      	add	r4, r0
 800eeb4:	19a0      	adds	r0, r4, r6
 800eeb6:	bd70      	pop	{r4, r5, r6, pc}

0800eeb8 <_Header__cdr_deserialize>:
 800eeb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeba:	460c      	mov	r4, r1
 800eebc:	b083      	sub	sp, #12
 800eebe:	b1e1      	cbz	r1, 800eefa <_Header__cdr_deserialize+0x42>
 800eec0:	4606      	mov	r6, r0
 800eec2:	f000 f8e3 	bl	800f08c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800eec6:	6843      	ldr	r3, [r0, #4]
 800eec8:	4621      	mov	r1, r4
 800eeca:	68db      	ldr	r3, [r3, #12]
 800eecc:	4630      	mov	r0, r6
 800eece:	4798      	blx	r3
 800eed0:	6927      	ldr	r7, [r4, #16]
 800eed2:	68a1      	ldr	r1, [r4, #8]
 800eed4:	ab01      	add	r3, sp, #4
 800eed6:	463a      	mov	r2, r7
 800eed8:	4630      	mov	r0, r6
 800eeda:	f000 fc4b 	bl	800f774 <ucdr_deserialize_sequence_char>
 800eede:	9b01      	ldr	r3, [sp, #4]
 800eee0:	4605      	mov	r5, r0
 800eee2:	b920      	cbnz	r0, 800eeee <_Header__cdr_deserialize+0x36>
 800eee4:	429f      	cmp	r7, r3
 800eee6:	d30c      	bcc.n	800ef02 <_Header__cdr_deserialize+0x4a>
 800eee8:	4628      	mov	r0, r5
 800eeea:	b003      	add	sp, #12
 800eeec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeee:	b103      	cbz	r3, 800eef2 <_Header__cdr_deserialize+0x3a>
 800eef0:	3b01      	subs	r3, #1
 800eef2:	4628      	mov	r0, r5
 800eef4:	60e3      	str	r3, [r4, #12]
 800eef6:	b003      	add	sp, #12
 800eef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eefa:	460d      	mov	r5, r1
 800eefc:	4628      	mov	r0, r5
 800eefe:	b003      	add	sp, #12
 800ef00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef02:	2101      	movs	r1, #1
 800ef04:	75b0      	strb	r0, [r6, #22]
 800ef06:	7571      	strb	r1, [r6, #21]
 800ef08:	4630      	mov	r0, r6
 800ef0a:	60e5      	str	r5, [r4, #12]
 800ef0c:	f7fc fff2 	bl	800bef4 <ucdr_align_to>
 800ef10:	4630      	mov	r0, r6
 800ef12:	9901      	ldr	r1, [sp, #4]
 800ef14:	f7fd f824 	bl	800bf60 <ucdr_advance_buffer>
 800ef18:	4628      	mov	r0, r5
 800ef1a:	b003      	add	sp, #12
 800ef1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef1e:	bf00      	nop

0800ef20 <_Header__cdr_serialize>:
 800ef20:	b1f8      	cbz	r0, 800ef62 <_Header__cdr_serialize+0x42>
 800ef22:	b570      	push	{r4, r5, r6, lr}
 800ef24:	4604      	mov	r4, r0
 800ef26:	460d      	mov	r5, r1
 800ef28:	f000 f8b0 	bl	800f08c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ef2c:	6843      	ldr	r3, [r0, #4]
 800ef2e:	4629      	mov	r1, r5
 800ef30:	689b      	ldr	r3, [r3, #8]
 800ef32:	4620      	mov	r0, r4
 800ef34:	4798      	blx	r3
 800ef36:	68a6      	ldr	r6, [r4, #8]
 800ef38:	b156      	cbz	r6, 800ef50 <_Header__cdr_serialize+0x30>
 800ef3a:	4630      	mov	r0, r6
 800ef3c:	f7f1 f97a 	bl	8000234 <strlen>
 800ef40:	4631      	mov	r1, r6
 800ef42:	60e0      	str	r0, [r4, #12]
 800ef44:	1c42      	adds	r2, r0, #1
 800ef46:	4628      	mov	r0, r5
 800ef48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef4c:	f000 bc00 	b.w	800f750 <ucdr_serialize_sequence_char>
 800ef50:	4630      	mov	r0, r6
 800ef52:	60e0      	str	r0, [r4, #12]
 800ef54:	4632      	mov	r2, r6
 800ef56:	4631      	mov	r1, r6
 800ef58:	4628      	mov	r0, r5
 800ef5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef5e:	f000 bbf7 	b.w	800f750 <ucdr_serialize_sequence_char>
 800ef62:	4770      	bx	lr

0800ef64 <_Header__get_serialized_size>:
 800ef64:	b538      	push	{r3, r4, r5, lr}
 800ef66:	4604      	mov	r4, r0
 800ef68:	b150      	cbz	r0, 800ef80 <_Header__get_serialized_size+0x1c>
 800ef6a:	2100      	movs	r1, #0
 800ef6c:	f000 f82a 	bl	800efc4 <get_serialized_size_builtin_interfaces__msg__Time>
 800ef70:	2104      	movs	r1, #4
 800ef72:	4605      	mov	r5, r0
 800ef74:	f7fc ffa8 	bl	800bec8 <ucdr_alignment>
 800ef78:	68e2      	ldr	r2, [r4, #12]
 800ef7a:	3205      	adds	r2, #5
 800ef7c:	1953      	adds	r3, r2, r5
 800ef7e:	4418      	add	r0, r3
 800ef80:	bd38      	pop	{r3, r4, r5, pc}
 800ef82:	bf00      	nop

0800ef84 <max_serialized_size_std_msgs__msg__Header>:
 800ef84:	b510      	push	{r4, lr}
 800ef86:	2301      	movs	r3, #1
 800ef88:	4604      	mov	r4, r0
 800ef8a:	7003      	strb	r3, [r0, #0]
 800ef8c:	f000 f86a 	bl	800f064 <max_serialized_size_builtin_interfaces__msg__Time>
 800ef90:	2300      	movs	r3, #0
 800ef92:	7023      	strb	r3, [r4, #0]
 800ef94:	bd10      	pop	{r4, pc}
 800ef96:	bf00      	nop

0800ef98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800ef98:	4800      	ldr	r0, [pc, #0]	@ (800ef9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800ef9a:	4770      	bx	lr
 800ef9c:	20000484 	.word	0x20000484

0800efa0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800efa0:	f008 b9c0 	b.w	8017324 <builtin_interfaces__msg__Time__init>

0800efa4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800efa4:	f008 b9c2 	b.w	801732c <builtin_interfaces__msg__Time__fini>

0800efa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800efa8:	4b04      	ldr	r3, [pc, #16]	@ (800efbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800efaa:	681a      	ldr	r2, [r3, #0]
 800efac:	b10a      	cbz	r2, 800efb2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800efae:	4803      	ldr	r0, [pc, #12]	@ (800efbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800efb0:	4770      	bx	lr
 800efb2:	4a03      	ldr	r2, [pc, #12]	@ (800efc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800efb4:	4801      	ldr	r0, [pc, #4]	@ (800efbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800efb6:	6812      	ldr	r2, [r2, #0]
 800efb8:	601a      	str	r2, [r3, #0]
 800efba:	4770      	bx	lr
 800efbc:	20000524 	.word	0x20000524
 800efc0:	20000210 	.word	0x20000210

0800efc4 <get_serialized_size_builtin_interfaces__msg__Time>:
 800efc4:	b180      	cbz	r0, 800efe8 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800efc6:	b538      	push	{r3, r4, r5, lr}
 800efc8:	460d      	mov	r5, r1
 800efca:	4628      	mov	r0, r5
 800efcc:	2104      	movs	r1, #4
 800efce:	f7fc ff7b 	bl	800bec8 <ucdr_alignment>
 800efd2:	1d2b      	adds	r3, r5, #4
 800efd4:	181c      	adds	r4, r3, r0
 800efd6:	2104      	movs	r1, #4
 800efd8:	4620      	mov	r0, r4
 800efda:	f7fc ff75 	bl	800bec8 <ucdr_alignment>
 800efde:	f1c5 0504 	rsb	r5, r5, #4
 800efe2:	4428      	add	r0, r5
 800efe4:	4420      	add	r0, r4
 800efe6:	bd38      	pop	{r3, r4, r5, pc}
 800efe8:	4770      	bx	lr
 800efea:	bf00      	nop

0800efec <_Time__cdr_deserialize>:
 800efec:	b538      	push	{r3, r4, r5, lr}
 800efee:	460c      	mov	r4, r1
 800eff0:	b141      	cbz	r1, 800f004 <_Time__cdr_deserialize+0x18>
 800eff2:	4605      	mov	r5, r0
 800eff4:	f7fc fb4a 	bl	800b68c <ucdr_deserialize_int32_t>
 800eff8:	1d21      	adds	r1, r4, #4
 800effa:	4628      	mov	r0, r5
 800effc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f000:	f7fb bfc2 	b.w	800af88 <ucdr_deserialize_uint32_t>
 800f004:	4608      	mov	r0, r1
 800f006:	bd38      	pop	{r3, r4, r5, pc}

0800f008 <_Time__cdr_serialize>:
 800f008:	b160      	cbz	r0, 800f024 <_Time__cdr_serialize+0x1c>
 800f00a:	b538      	push	{r3, r4, r5, lr}
 800f00c:	460d      	mov	r5, r1
 800f00e:	4604      	mov	r4, r0
 800f010:	6801      	ldr	r1, [r0, #0]
 800f012:	4628      	mov	r0, r5
 800f014:	f7fc faa2 	bl	800b55c <ucdr_serialize_int32_t>
 800f018:	6861      	ldr	r1, [r4, #4]
 800f01a:	4628      	mov	r0, r5
 800f01c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f020:	f7fb be82 	b.w	800ad28 <ucdr_serialize_uint32_t>
 800f024:	4770      	bx	lr
 800f026:	bf00      	nop

0800f028 <_Time__get_serialized_size>:
 800f028:	b160      	cbz	r0, 800f044 <_Time__get_serialized_size+0x1c>
 800f02a:	b510      	push	{r4, lr}
 800f02c:	2104      	movs	r1, #4
 800f02e:	2000      	movs	r0, #0
 800f030:	f7fc ff4a 	bl	800bec8 <ucdr_alignment>
 800f034:	1d04      	adds	r4, r0, #4
 800f036:	2104      	movs	r1, #4
 800f038:	4620      	mov	r0, r4
 800f03a:	f7fc ff45 	bl	800bec8 <ucdr_alignment>
 800f03e:	3004      	adds	r0, #4
 800f040:	4420      	add	r0, r4
 800f042:	bd10      	pop	{r4, pc}
 800f044:	4770      	bx	lr
 800f046:	bf00      	nop

0800f048 <_Time__max_serialized_size>:
 800f048:	b510      	push	{r4, lr}
 800f04a:	2104      	movs	r1, #4
 800f04c:	2000      	movs	r0, #0
 800f04e:	f7fc ff3b 	bl	800bec8 <ucdr_alignment>
 800f052:	1d04      	adds	r4, r0, #4
 800f054:	2104      	movs	r1, #4
 800f056:	4620      	mov	r0, r4
 800f058:	f7fc ff36 	bl	800bec8 <ucdr_alignment>
 800f05c:	3004      	adds	r0, #4
 800f05e:	4420      	add	r0, r4
 800f060:	bd10      	pop	{r4, pc}
 800f062:	bf00      	nop

0800f064 <max_serialized_size_builtin_interfaces__msg__Time>:
 800f064:	b538      	push	{r3, r4, r5, lr}
 800f066:	460c      	mov	r4, r1
 800f068:	2301      	movs	r3, #1
 800f06a:	7003      	strb	r3, [r0, #0]
 800f06c:	2104      	movs	r1, #4
 800f06e:	4620      	mov	r0, r4
 800f070:	f7fc ff2a 	bl	800bec8 <ucdr_alignment>
 800f074:	1d25      	adds	r5, r4, #4
 800f076:	4405      	add	r5, r0
 800f078:	2104      	movs	r1, #4
 800f07a:	4628      	mov	r0, r5
 800f07c:	f7fc ff24 	bl	800bec8 <ucdr_alignment>
 800f080:	f1c4 0404 	rsb	r4, r4, #4
 800f084:	4420      	add	r0, r4
 800f086:	4428      	add	r0, r5
 800f088:	bd38      	pop	{r3, r4, r5, pc}
 800f08a:	bf00      	nop

0800f08c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800f08c:	4800      	ldr	r0, [pc, #0]	@ (800f090 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800f08e:	4770      	bx	lr
 800f090:	20000530 	.word	0x20000530

0800f094 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800f094:	f008 b94c 	b.w	8017330 <geometry_msgs__msg__Quaternion__init>

0800f098 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800f098:	f008 b95e 	b.w	8017358 <geometry_msgs__msg__Quaternion__fini>

0800f09c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800f09c:	4b04      	ldr	r3, [pc, #16]	@ (800f0b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800f09e:	681a      	ldr	r2, [r3, #0]
 800f0a0:	b10a      	cbz	r2, 800f0a6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800f0a2:	4803      	ldr	r0, [pc, #12]	@ (800f0b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800f0a4:	4770      	bx	lr
 800f0a6:	4a03      	ldr	r2, [pc, #12]	@ (800f0b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800f0a8:	4801      	ldr	r0, [pc, #4]	@ (800f0b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800f0aa:	6812      	ldr	r2, [r2, #0]
 800f0ac:	601a      	str	r2, [r3, #0]
 800f0ae:	4770      	bx	lr
 800f0b0:	20000648 	.word	0x20000648
 800f0b4:	20000210 	.word	0x20000210

0800f0b8 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800f0b8:	f008 b950 	b.w	801735c <geometry_msgs__msg__Vector3__init>

0800f0bc <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800f0bc:	f008 b952 	b.w	8017364 <geometry_msgs__msg__Vector3__fini>

0800f0c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800f0c0:	4b04      	ldr	r3, [pc, #16]	@ (800f0d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	b10a      	cbz	r2, 800f0ca <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800f0c6:	4803      	ldr	r0, [pc, #12]	@ (800f0d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800f0c8:	4770      	bx	lr
 800f0ca:	4a03      	ldr	r2, [pc, #12]	@ (800f0d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800f0cc:	4801      	ldr	r0, [pc, #4]	@ (800f0d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800f0ce:	6812      	ldr	r2, [r2, #0]
 800f0d0:	601a      	str	r2, [r3, #0]
 800f0d2:	4770      	bx	lr
 800f0d4:	20000708 	.word	0x20000708
 800f0d8:	20000210 	.word	0x20000210

0800f0dc <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800f0dc:	b1f0      	cbz	r0, 800f11c <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800f0de:	b570      	push	{r4, r5, r6, lr}
 800f0e0:	460d      	mov	r5, r1
 800f0e2:	4628      	mov	r0, r5
 800f0e4:	2108      	movs	r1, #8
 800f0e6:	f7fc feef 	bl	800bec8 <ucdr_alignment>
 800f0ea:	f105 0308 	add.w	r3, r5, #8
 800f0ee:	181e      	adds	r6, r3, r0
 800f0f0:	2108      	movs	r1, #8
 800f0f2:	4630      	mov	r0, r6
 800f0f4:	f7fc fee8 	bl	800bec8 <ucdr_alignment>
 800f0f8:	f100 0408 	add.w	r4, r0, #8
 800f0fc:	4434      	add	r4, r6
 800f0fe:	2108      	movs	r1, #8
 800f100:	4620      	mov	r0, r4
 800f102:	f7fc fee1 	bl	800bec8 <ucdr_alignment>
 800f106:	3008      	adds	r0, #8
 800f108:	4404      	add	r4, r0
 800f10a:	2108      	movs	r1, #8
 800f10c:	4620      	mov	r0, r4
 800f10e:	f7fc fedb 	bl	800bec8 <ucdr_alignment>
 800f112:	f1c5 0508 	rsb	r5, r5, #8
 800f116:	4428      	add	r0, r5
 800f118:	4420      	add	r0, r4
 800f11a:	bd70      	pop	{r4, r5, r6, pc}
 800f11c:	4770      	bx	lr
 800f11e:	bf00      	nop

0800f120 <_Quaternion__cdr_deserialize>:
 800f120:	b538      	push	{r3, r4, r5, lr}
 800f122:	460c      	mov	r4, r1
 800f124:	b199      	cbz	r1, 800f14e <_Quaternion__cdr_deserialize+0x2e>
 800f126:	4605      	mov	r5, r0
 800f128:	f7fc fce2 	bl	800baf0 <ucdr_deserialize_double>
 800f12c:	f104 0108 	add.w	r1, r4, #8
 800f130:	4628      	mov	r0, r5
 800f132:	f7fc fcdd 	bl	800baf0 <ucdr_deserialize_double>
 800f136:	f104 0110 	add.w	r1, r4, #16
 800f13a:	4628      	mov	r0, r5
 800f13c:	f7fc fcd8 	bl	800baf0 <ucdr_deserialize_double>
 800f140:	f104 0118 	add.w	r1, r4, #24
 800f144:	4628      	mov	r0, r5
 800f146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f14a:	f7fc bcd1 	b.w	800baf0 <ucdr_deserialize_double>
 800f14e:	4608      	mov	r0, r1
 800f150:	bd38      	pop	{r3, r4, r5, pc}
 800f152:	bf00      	nop

0800f154 <_Quaternion__cdr_serialize>:
 800f154:	b1c0      	cbz	r0, 800f188 <_Quaternion__cdr_serialize+0x34>
 800f156:	b538      	push	{r3, r4, r5, lr}
 800f158:	ed90 0b00 	vldr	d0, [r0]
 800f15c:	460d      	mov	r5, r1
 800f15e:	4604      	mov	r4, r0
 800f160:	4608      	mov	r0, r1
 800f162:	f7fc fb23 	bl	800b7ac <ucdr_serialize_double>
 800f166:	ed94 0b02 	vldr	d0, [r4, #8]
 800f16a:	4628      	mov	r0, r5
 800f16c:	f7fc fb1e 	bl	800b7ac <ucdr_serialize_double>
 800f170:	ed94 0b04 	vldr	d0, [r4, #16]
 800f174:	4628      	mov	r0, r5
 800f176:	f7fc fb19 	bl	800b7ac <ucdr_serialize_double>
 800f17a:	ed94 0b06 	vldr	d0, [r4, #24]
 800f17e:	4628      	mov	r0, r5
 800f180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f184:	f7fc bb12 	b.w	800b7ac <ucdr_serialize_double>
 800f188:	4770      	bx	lr
 800f18a:	bf00      	nop

0800f18c <_Quaternion__get_serialized_size>:
 800f18c:	b1d0      	cbz	r0, 800f1c4 <_Quaternion__get_serialized_size+0x38>
 800f18e:	b538      	push	{r3, r4, r5, lr}
 800f190:	2108      	movs	r1, #8
 800f192:	2000      	movs	r0, #0
 800f194:	f7fc fe98 	bl	800bec8 <ucdr_alignment>
 800f198:	f100 0508 	add.w	r5, r0, #8
 800f19c:	2108      	movs	r1, #8
 800f19e:	4628      	mov	r0, r5
 800f1a0:	f7fc fe92 	bl	800bec8 <ucdr_alignment>
 800f1a4:	f100 0408 	add.w	r4, r0, #8
 800f1a8:	442c      	add	r4, r5
 800f1aa:	2108      	movs	r1, #8
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	f7fc fe8b 	bl	800bec8 <ucdr_alignment>
 800f1b2:	3008      	adds	r0, #8
 800f1b4:	4404      	add	r4, r0
 800f1b6:	2108      	movs	r1, #8
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	f7fc fe85 	bl	800bec8 <ucdr_alignment>
 800f1be:	3008      	adds	r0, #8
 800f1c0:	4420      	add	r0, r4
 800f1c2:	bd38      	pop	{r3, r4, r5, pc}
 800f1c4:	4770      	bx	lr
 800f1c6:	bf00      	nop

0800f1c8 <_Quaternion__max_serialized_size>:
 800f1c8:	b538      	push	{r3, r4, r5, lr}
 800f1ca:	2108      	movs	r1, #8
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	f7fc fe7b 	bl	800bec8 <ucdr_alignment>
 800f1d2:	f100 0508 	add.w	r5, r0, #8
 800f1d6:	2108      	movs	r1, #8
 800f1d8:	4628      	mov	r0, r5
 800f1da:	f7fc fe75 	bl	800bec8 <ucdr_alignment>
 800f1de:	f100 0408 	add.w	r4, r0, #8
 800f1e2:	442c      	add	r4, r5
 800f1e4:	2108      	movs	r1, #8
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	f7fc fe6e 	bl	800bec8 <ucdr_alignment>
 800f1ec:	3008      	adds	r0, #8
 800f1ee:	4404      	add	r4, r0
 800f1f0:	2108      	movs	r1, #8
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f7fc fe68 	bl	800bec8 <ucdr_alignment>
 800f1f8:	3008      	adds	r0, #8
 800f1fa:	4420      	add	r0, r4
 800f1fc:	bd38      	pop	{r3, r4, r5, pc}
 800f1fe:	bf00      	nop

0800f200 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800f200:	b570      	push	{r4, r5, r6, lr}
 800f202:	2301      	movs	r3, #1
 800f204:	460c      	mov	r4, r1
 800f206:	7003      	strb	r3, [r0, #0]
 800f208:	2108      	movs	r1, #8
 800f20a:	4620      	mov	r0, r4
 800f20c:	f7fc fe5c 	bl	800bec8 <ucdr_alignment>
 800f210:	f104 0508 	add.w	r5, r4, #8
 800f214:	1946      	adds	r6, r0, r5
 800f216:	2108      	movs	r1, #8
 800f218:	4630      	mov	r0, r6
 800f21a:	f7fc fe55 	bl	800bec8 <ucdr_alignment>
 800f21e:	f100 0508 	add.w	r5, r0, #8
 800f222:	4435      	add	r5, r6
 800f224:	2108      	movs	r1, #8
 800f226:	4628      	mov	r0, r5
 800f228:	f7fc fe4e 	bl	800bec8 <ucdr_alignment>
 800f22c:	3008      	adds	r0, #8
 800f22e:	4405      	add	r5, r0
 800f230:	2108      	movs	r1, #8
 800f232:	4628      	mov	r0, r5
 800f234:	f7fc fe48 	bl	800bec8 <ucdr_alignment>
 800f238:	f1c4 0408 	rsb	r4, r4, #8
 800f23c:	4420      	add	r0, r4
 800f23e:	4428      	add	r0, r5
 800f240:	bd70      	pop	{r4, r5, r6, pc}
 800f242:	bf00      	nop

0800f244 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800f244:	4800      	ldr	r0, [pc, #0]	@ (800f248 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800f246:	4770      	bx	lr
 800f248:	20000714 	.word	0x20000714

0800f24c <get_serialized_size_geometry_msgs__msg__Vector3>:
 800f24c:	b1b8      	cbz	r0, 800f27e <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800f24e:	b538      	push	{r3, r4, r5, lr}
 800f250:	460d      	mov	r5, r1
 800f252:	4628      	mov	r0, r5
 800f254:	2108      	movs	r1, #8
 800f256:	f7fc fe37 	bl	800bec8 <ucdr_alignment>
 800f25a:	f105 0308 	add.w	r3, r5, #8
 800f25e:	181c      	adds	r4, r3, r0
 800f260:	2108      	movs	r1, #8
 800f262:	4620      	mov	r0, r4
 800f264:	f7fc fe30 	bl	800bec8 <ucdr_alignment>
 800f268:	3008      	adds	r0, #8
 800f26a:	4404      	add	r4, r0
 800f26c:	2108      	movs	r1, #8
 800f26e:	4620      	mov	r0, r4
 800f270:	f7fc fe2a 	bl	800bec8 <ucdr_alignment>
 800f274:	f1c5 0508 	rsb	r5, r5, #8
 800f278:	4428      	add	r0, r5
 800f27a:	4420      	add	r0, r4
 800f27c:	bd38      	pop	{r3, r4, r5, pc}
 800f27e:	4770      	bx	lr

0800f280 <_Vector3__cdr_deserialize>:
 800f280:	b538      	push	{r3, r4, r5, lr}
 800f282:	460c      	mov	r4, r1
 800f284:	b171      	cbz	r1, 800f2a4 <_Vector3__cdr_deserialize+0x24>
 800f286:	4605      	mov	r5, r0
 800f288:	f7fc fc32 	bl	800baf0 <ucdr_deserialize_double>
 800f28c:	f104 0108 	add.w	r1, r4, #8
 800f290:	4628      	mov	r0, r5
 800f292:	f7fc fc2d 	bl	800baf0 <ucdr_deserialize_double>
 800f296:	f104 0110 	add.w	r1, r4, #16
 800f29a:	4628      	mov	r0, r5
 800f29c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2a0:	f7fc bc26 	b.w	800baf0 <ucdr_deserialize_double>
 800f2a4:	4608      	mov	r0, r1
 800f2a6:	bd38      	pop	{r3, r4, r5, pc}

0800f2a8 <_Vector3__cdr_serialize>:
 800f2a8:	b198      	cbz	r0, 800f2d2 <_Vector3__cdr_serialize+0x2a>
 800f2aa:	b538      	push	{r3, r4, r5, lr}
 800f2ac:	ed90 0b00 	vldr	d0, [r0]
 800f2b0:	460d      	mov	r5, r1
 800f2b2:	4604      	mov	r4, r0
 800f2b4:	4608      	mov	r0, r1
 800f2b6:	f7fc fa79 	bl	800b7ac <ucdr_serialize_double>
 800f2ba:	ed94 0b02 	vldr	d0, [r4, #8]
 800f2be:	4628      	mov	r0, r5
 800f2c0:	f7fc fa74 	bl	800b7ac <ucdr_serialize_double>
 800f2c4:	ed94 0b04 	vldr	d0, [r4, #16]
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2ce:	f7fc ba6d 	b.w	800b7ac <ucdr_serialize_double>
 800f2d2:	4770      	bx	lr

0800f2d4 <_Vector3__get_serialized_size>:
 800f2d4:	b198      	cbz	r0, 800f2fe <_Vector3__get_serialized_size+0x2a>
 800f2d6:	b510      	push	{r4, lr}
 800f2d8:	2108      	movs	r1, #8
 800f2da:	2000      	movs	r0, #0
 800f2dc:	f7fc fdf4 	bl	800bec8 <ucdr_alignment>
 800f2e0:	f100 0408 	add.w	r4, r0, #8
 800f2e4:	2108      	movs	r1, #8
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	f7fc fdee 	bl	800bec8 <ucdr_alignment>
 800f2ec:	3008      	adds	r0, #8
 800f2ee:	4404      	add	r4, r0
 800f2f0:	2108      	movs	r1, #8
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	f7fc fde8 	bl	800bec8 <ucdr_alignment>
 800f2f8:	3008      	adds	r0, #8
 800f2fa:	4420      	add	r0, r4
 800f2fc:	bd10      	pop	{r4, pc}
 800f2fe:	4770      	bx	lr

0800f300 <_Vector3__max_serialized_size>:
 800f300:	b538      	push	{r3, r4, r5, lr}
 800f302:	2108      	movs	r1, #8
 800f304:	2000      	movs	r0, #0
 800f306:	f7fc fddf 	bl	800bec8 <ucdr_alignment>
 800f30a:	f100 0508 	add.w	r5, r0, #8
 800f30e:	2108      	movs	r1, #8
 800f310:	4628      	mov	r0, r5
 800f312:	f7fc fdd9 	bl	800bec8 <ucdr_alignment>
 800f316:	f100 0408 	add.w	r4, r0, #8
 800f31a:	442c      	add	r4, r5
 800f31c:	2108      	movs	r1, #8
 800f31e:	4620      	mov	r0, r4
 800f320:	f7fc fdd2 	bl	800bec8 <ucdr_alignment>
 800f324:	3008      	adds	r0, #8
 800f326:	4420      	add	r0, r4
 800f328:	bd38      	pop	{r3, r4, r5, pc}
 800f32a:	bf00      	nop

0800f32c <max_serialized_size_geometry_msgs__msg__Vector3>:
 800f32c:	b570      	push	{r4, r5, r6, lr}
 800f32e:	2301      	movs	r3, #1
 800f330:	460c      	mov	r4, r1
 800f332:	7003      	strb	r3, [r0, #0]
 800f334:	2108      	movs	r1, #8
 800f336:	4620      	mov	r0, r4
 800f338:	f7fc fdc6 	bl	800bec8 <ucdr_alignment>
 800f33c:	f104 0508 	add.w	r5, r4, #8
 800f340:	1946      	adds	r6, r0, r5
 800f342:	2108      	movs	r1, #8
 800f344:	4630      	mov	r0, r6
 800f346:	f7fc fdbf 	bl	800bec8 <ucdr_alignment>
 800f34a:	f100 0508 	add.w	r5, r0, #8
 800f34e:	4435      	add	r5, r6
 800f350:	2108      	movs	r1, #8
 800f352:	4628      	mov	r0, r5
 800f354:	f7fc fdb8 	bl	800bec8 <ucdr_alignment>
 800f358:	f1c4 0408 	rsb	r4, r4, #8
 800f35c:	4420      	add	r0, r4
 800f35e:	4428      	add	r0, r5
 800f360:	bd70      	pop	{r4, r5, r6, pc}
 800f362:	bf00      	nop

0800f364 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800f364:	4800      	ldr	r0, [pc, #0]	@ (800f368 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800f366:	4770      	bx	lr
 800f368:	2000073c 	.word	0x2000073c

0800f36c <imu_interfaces__srv__ImuCalibration_Request__init>:
 800f36c:	b538      	push	{r3, r4, r5, lr}
 800f36e:	4604      	mov	r4, r0
 800f370:	b128      	cbz	r0, 800f37e <imu_interfaces__srv__ImuCalibration_Request__init+0x12>
 800f372:	f007 ff3d 	bl	80171f0 <sensor_msgs__msg__Imu__init>
 800f376:	4605      	mov	r5, r0
 800f378:	b120      	cbz	r0, 800f384 <imu_interfaces__srv__ImuCalibration_Request__init+0x18>
 800f37a:	4628      	mov	r0, r5
 800f37c:	bd38      	pop	{r3, r4, r5, pc}
 800f37e:	4605      	mov	r5, r0
 800f380:	4628      	mov	r0, r5
 800f382:	bd38      	pop	{r3, r4, r5, pc}
 800f384:	4620      	mov	r0, r4
 800f386:	f007 ff89 	bl	801729c <sensor_msgs__msg__Imu__fini>
 800f38a:	4628      	mov	r0, r5
 800f38c:	bd38      	pop	{r3, r4, r5, pc}
 800f38e:	bf00      	nop

0800f390 <imu_interfaces__srv__ImuCalibration_Request__fini>:
 800f390:	b108      	cbz	r0, 800f396 <imu_interfaces__srv__ImuCalibration_Request__fini+0x6>
 800f392:	f007 bf83 	b.w	801729c <sensor_msgs__msg__Imu__fini>
 800f396:	4770      	bx	lr

0800f398 <imu_interfaces__srv__ImuCalibration_Response__init>:
 800f398:	3800      	subs	r0, #0
 800f39a:	bf18      	it	ne
 800f39c:	2001      	movne	r0, #1
 800f39e:	4770      	bx	lr

0800f3a0 <imu_interfaces__srv__ImuCalibration_Response__fini>:
 800f3a0:	4770      	bx	lr
 800f3a2:	bf00      	nop

0800f3a4 <ucdr_serialize_endian_array_char>:
 800f3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	461f      	mov	r7, r3
 800f3ac:	4605      	mov	r5, r0
 800f3ae:	4690      	mov	r8, r2
 800f3b0:	f7fc fd32 	bl	800be18 <ucdr_check_buffer_available_for>
 800f3b4:	b9e0      	cbnz	r0, 800f3f0 <ucdr_serialize_endian_array_char+0x4c>
 800f3b6:	463e      	mov	r6, r7
 800f3b8:	e009      	b.n	800f3ce <ucdr_serialize_endian_array_char+0x2a>
 800f3ba:	68a8      	ldr	r0, [r5, #8]
 800f3bc:	f009 ff15 	bl	80191ea <memcpy>
 800f3c0:	68ab      	ldr	r3, [r5, #8]
 800f3c2:	6928      	ldr	r0, [r5, #16]
 800f3c4:	4423      	add	r3, r4
 800f3c6:	4420      	add	r0, r4
 800f3c8:	1b36      	subs	r6, r6, r4
 800f3ca:	60ab      	str	r3, [r5, #8]
 800f3cc:	6128      	str	r0, [r5, #16]
 800f3ce:	4631      	mov	r1, r6
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	4628      	mov	r0, r5
 800f3d4:	f7fc fda8 	bl	800bf28 <ucdr_check_final_buffer_behavior_array>
 800f3d8:	1bb9      	subs	r1, r7, r6
 800f3da:	4441      	add	r1, r8
 800f3dc:	4604      	mov	r4, r0
 800f3de:	4602      	mov	r2, r0
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	d1ea      	bne.n	800f3ba <ucdr_serialize_endian_array_char+0x16>
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	7da8      	ldrb	r0, [r5, #22]
 800f3e8:	756b      	strb	r3, [r5, #21]
 800f3ea:	4058      	eors	r0, r3
 800f3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3f0:	463a      	mov	r2, r7
 800f3f2:	68a8      	ldr	r0, [r5, #8]
 800f3f4:	4641      	mov	r1, r8
 800f3f6:	f009 fef8 	bl	80191ea <memcpy>
 800f3fa:	68aa      	ldr	r2, [r5, #8]
 800f3fc:	692b      	ldr	r3, [r5, #16]
 800f3fe:	443a      	add	r2, r7
 800f400:	443b      	add	r3, r7
 800f402:	60aa      	str	r2, [r5, #8]
 800f404:	612b      	str	r3, [r5, #16]
 800f406:	e7ed      	b.n	800f3e4 <ucdr_serialize_endian_array_char+0x40>

0800f408 <ucdr_deserialize_endian_array_char>:
 800f408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f40c:	4619      	mov	r1, r3
 800f40e:	461f      	mov	r7, r3
 800f410:	4605      	mov	r5, r0
 800f412:	4690      	mov	r8, r2
 800f414:	f7fc fd00 	bl	800be18 <ucdr_check_buffer_available_for>
 800f418:	b9e0      	cbnz	r0, 800f454 <ucdr_deserialize_endian_array_char+0x4c>
 800f41a:	463e      	mov	r6, r7
 800f41c:	e009      	b.n	800f432 <ucdr_deserialize_endian_array_char+0x2a>
 800f41e:	68a9      	ldr	r1, [r5, #8]
 800f420:	f009 fee3 	bl	80191ea <memcpy>
 800f424:	68ab      	ldr	r3, [r5, #8]
 800f426:	6928      	ldr	r0, [r5, #16]
 800f428:	4423      	add	r3, r4
 800f42a:	4420      	add	r0, r4
 800f42c:	1b36      	subs	r6, r6, r4
 800f42e:	60ab      	str	r3, [r5, #8]
 800f430:	6128      	str	r0, [r5, #16]
 800f432:	2201      	movs	r2, #1
 800f434:	4631      	mov	r1, r6
 800f436:	4628      	mov	r0, r5
 800f438:	f7fc fd76 	bl	800bf28 <ucdr_check_final_buffer_behavior_array>
 800f43c:	4604      	mov	r4, r0
 800f43e:	1bb8      	subs	r0, r7, r6
 800f440:	4440      	add	r0, r8
 800f442:	4622      	mov	r2, r4
 800f444:	2c00      	cmp	r4, #0
 800f446:	d1ea      	bne.n	800f41e <ucdr_deserialize_endian_array_char+0x16>
 800f448:	2301      	movs	r3, #1
 800f44a:	7da8      	ldrb	r0, [r5, #22]
 800f44c:	756b      	strb	r3, [r5, #21]
 800f44e:	4058      	eors	r0, r3
 800f450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f454:	463a      	mov	r2, r7
 800f456:	68a9      	ldr	r1, [r5, #8]
 800f458:	4640      	mov	r0, r8
 800f45a:	f009 fec6 	bl	80191ea <memcpy>
 800f45e:	68aa      	ldr	r2, [r5, #8]
 800f460:	692b      	ldr	r3, [r5, #16]
 800f462:	443a      	add	r2, r7
 800f464:	443b      	add	r3, r7
 800f466:	60aa      	str	r2, [r5, #8]
 800f468:	612b      	str	r3, [r5, #16]
 800f46a:	e7ed      	b.n	800f448 <ucdr_deserialize_endian_array_char+0x40>

0800f46c <ucdr_serialize_array_uint8_t>:
 800f46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f470:	4688      	mov	r8, r1
 800f472:	4611      	mov	r1, r2
 800f474:	4617      	mov	r7, r2
 800f476:	4605      	mov	r5, r0
 800f478:	f7fc fcce 	bl	800be18 <ucdr_check_buffer_available_for>
 800f47c:	b9e0      	cbnz	r0, 800f4b8 <ucdr_serialize_array_uint8_t+0x4c>
 800f47e:	463e      	mov	r6, r7
 800f480:	e009      	b.n	800f496 <ucdr_serialize_array_uint8_t+0x2a>
 800f482:	68a8      	ldr	r0, [r5, #8]
 800f484:	f009 feb1 	bl	80191ea <memcpy>
 800f488:	68aa      	ldr	r2, [r5, #8]
 800f48a:	692b      	ldr	r3, [r5, #16]
 800f48c:	4422      	add	r2, r4
 800f48e:	4423      	add	r3, r4
 800f490:	1b36      	subs	r6, r6, r4
 800f492:	60aa      	str	r2, [r5, #8]
 800f494:	612b      	str	r3, [r5, #16]
 800f496:	4631      	mov	r1, r6
 800f498:	2201      	movs	r2, #1
 800f49a:	4628      	mov	r0, r5
 800f49c:	f7fc fd44 	bl	800bf28 <ucdr_check_final_buffer_behavior_array>
 800f4a0:	1bb9      	subs	r1, r7, r6
 800f4a2:	4441      	add	r1, r8
 800f4a4:	4604      	mov	r4, r0
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	2800      	cmp	r0, #0
 800f4aa:	d1ea      	bne.n	800f482 <ucdr_serialize_array_uint8_t+0x16>
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	7da8      	ldrb	r0, [r5, #22]
 800f4b0:	756b      	strb	r3, [r5, #21]
 800f4b2:	4058      	eors	r0, r3
 800f4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4b8:	463a      	mov	r2, r7
 800f4ba:	68a8      	ldr	r0, [r5, #8]
 800f4bc:	4641      	mov	r1, r8
 800f4be:	f009 fe94 	bl	80191ea <memcpy>
 800f4c2:	68aa      	ldr	r2, [r5, #8]
 800f4c4:	692b      	ldr	r3, [r5, #16]
 800f4c6:	443a      	add	r2, r7
 800f4c8:	443b      	add	r3, r7
 800f4ca:	60aa      	str	r2, [r5, #8]
 800f4cc:	612b      	str	r3, [r5, #16]
 800f4ce:	e7ed      	b.n	800f4ac <ucdr_serialize_array_uint8_t+0x40>

0800f4d0 <ucdr_serialize_endian_array_uint8_t>:
 800f4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	461f      	mov	r7, r3
 800f4d8:	4605      	mov	r5, r0
 800f4da:	4690      	mov	r8, r2
 800f4dc:	f7fc fc9c 	bl	800be18 <ucdr_check_buffer_available_for>
 800f4e0:	b9e0      	cbnz	r0, 800f51c <ucdr_serialize_endian_array_uint8_t+0x4c>
 800f4e2:	463e      	mov	r6, r7
 800f4e4:	e009      	b.n	800f4fa <ucdr_serialize_endian_array_uint8_t+0x2a>
 800f4e6:	68a8      	ldr	r0, [r5, #8]
 800f4e8:	f009 fe7f 	bl	80191ea <memcpy>
 800f4ec:	68ab      	ldr	r3, [r5, #8]
 800f4ee:	6928      	ldr	r0, [r5, #16]
 800f4f0:	4423      	add	r3, r4
 800f4f2:	4420      	add	r0, r4
 800f4f4:	1b36      	subs	r6, r6, r4
 800f4f6:	60ab      	str	r3, [r5, #8]
 800f4f8:	6128      	str	r0, [r5, #16]
 800f4fa:	4631      	mov	r1, r6
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	4628      	mov	r0, r5
 800f500:	f7fc fd12 	bl	800bf28 <ucdr_check_final_buffer_behavior_array>
 800f504:	1bb9      	subs	r1, r7, r6
 800f506:	4441      	add	r1, r8
 800f508:	4604      	mov	r4, r0
 800f50a:	4602      	mov	r2, r0
 800f50c:	2800      	cmp	r0, #0
 800f50e:	d1ea      	bne.n	800f4e6 <ucdr_serialize_endian_array_uint8_t+0x16>
 800f510:	2301      	movs	r3, #1
 800f512:	7da8      	ldrb	r0, [r5, #22]
 800f514:	756b      	strb	r3, [r5, #21]
 800f516:	4058      	eors	r0, r3
 800f518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f51c:	463a      	mov	r2, r7
 800f51e:	68a8      	ldr	r0, [r5, #8]
 800f520:	4641      	mov	r1, r8
 800f522:	f009 fe62 	bl	80191ea <memcpy>
 800f526:	68aa      	ldr	r2, [r5, #8]
 800f528:	692b      	ldr	r3, [r5, #16]
 800f52a:	443a      	add	r2, r7
 800f52c:	443b      	add	r3, r7
 800f52e:	60aa      	str	r2, [r5, #8]
 800f530:	612b      	str	r3, [r5, #16]
 800f532:	e7ed      	b.n	800f510 <ucdr_serialize_endian_array_uint8_t+0x40>

0800f534 <ucdr_deserialize_array_uint8_t>:
 800f534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f538:	4688      	mov	r8, r1
 800f53a:	4611      	mov	r1, r2
 800f53c:	4617      	mov	r7, r2
 800f53e:	4605      	mov	r5, r0
 800f540:	f7fc fc6a 	bl	800be18 <ucdr_check_buffer_available_for>
 800f544:	b9e0      	cbnz	r0, 800f580 <ucdr_deserialize_array_uint8_t+0x4c>
 800f546:	463e      	mov	r6, r7
 800f548:	e009      	b.n	800f55e <ucdr_deserialize_array_uint8_t+0x2a>
 800f54a:	68a9      	ldr	r1, [r5, #8]
 800f54c:	f009 fe4d 	bl	80191ea <memcpy>
 800f550:	68aa      	ldr	r2, [r5, #8]
 800f552:	692b      	ldr	r3, [r5, #16]
 800f554:	4422      	add	r2, r4
 800f556:	4423      	add	r3, r4
 800f558:	1b36      	subs	r6, r6, r4
 800f55a:	60aa      	str	r2, [r5, #8]
 800f55c:	612b      	str	r3, [r5, #16]
 800f55e:	2201      	movs	r2, #1
 800f560:	4631      	mov	r1, r6
 800f562:	4628      	mov	r0, r5
 800f564:	f7fc fce0 	bl	800bf28 <ucdr_check_final_buffer_behavior_array>
 800f568:	4604      	mov	r4, r0
 800f56a:	1bb8      	subs	r0, r7, r6
 800f56c:	4440      	add	r0, r8
 800f56e:	4622      	mov	r2, r4
 800f570:	2c00      	cmp	r4, #0
 800f572:	d1ea      	bne.n	800f54a <ucdr_deserialize_array_uint8_t+0x16>
 800f574:	2301      	movs	r3, #1
 800f576:	7da8      	ldrb	r0, [r5, #22]
 800f578:	756b      	strb	r3, [r5, #21]
 800f57a:	4058      	eors	r0, r3
 800f57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f580:	463a      	mov	r2, r7
 800f582:	68a9      	ldr	r1, [r5, #8]
 800f584:	4640      	mov	r0, r8
 800f586:	f009 fe30 	bl	80191ea <memcpy>
 800f58a:	68aa      	ldr	r2, [r5, #8]
 800f58c:	692b      	ldr	r3, [r5, #16]
 800f58e:	443a      	add	r2, r7
 800f590:	443b      	add	r3, r7
 800f592:	60aa      	str	r2, [r5, #8]
 800f594:	612b      	str	r3, [r5, #16]
 800f596:	e7ed      	b.n	800f574 <ucdr_deserialize_array_uint8_t+0x40>

0800f598 <ucdr_deserialize_endian_array_uint8_t>:
 800f598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f59c:	4619      	mov	r1, r3
 800f59e:	461f      	mov	r7, r3
 800f5a0:	4605      	mov	r5, r0
 800f5a2:	4690      	mov	r8, r2
 800f5a4:	f7fc fc38 	bl	800be18 <ucdr_check_buffer_available_for>
 800f5a8:	b9e0      	cbnz	r0, 800f5e4 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800f5aa:	463e      	mov	r6, r7
 800f5ac:	e009      	b.n	800f5c2 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800f5ae:	68a9      	ldr	r1, [r5, #8]
 800f5b0:	f009 fe1b 	bl	80191ea <memcpy>
 800f5b4:	68ab      	ldr	r3, [r5, #8]
 800f5b6:	6928      	ldr	r0, [r5, #16]
 800f5b8:	4423      	add	r3, r4
 800f5ba:	4420      	add	r0, r4
 800f5bc:	1b36      	subs	r6, r6, r4
 800f5be:	60ab      	str	r3, [r5, #8]
 800f5c0:	6128      	str	r0, [r5, #16]
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	4631      	mov	r1, r6
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	f7fc fcae 	bl	800bf28 <ucdr_check_final_buffer_behavior_array>
 800f5cc:	4604      	mov	r4, r0
 800f5ce:	1bb8      	subs	r0, r7, r6
 800f5d0:	4440      	add	r0, r8
 800f5d2:	4622      	mov	r2, r4
 800f5d4:	2c00      	cmp	r4, #0
 800f5d6:	d1ea      	bne.n	800f5ae <ucdr_deserialize_endian_array_uint8_t+0x16>
 800f5d8:	2301      	movs	r3, #1
 800f5da:	7da8      	ldrb	r0, [r5, #22]
 800f5dc:	756b      	strb	r3, [r5, #21]
 800f5de:	4058      	eors	r0, r3
 800f5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5e4:	463a      	mov	r2, r7
 800f5e6:	68a9      	ldr	r1, [r5, #8]
 800f5e8:	4640      	mov	r0, r8
 800f5ea:	f009 fdfe 	bl	80191ea <memcpy>
 800f5ee:	68aa      	ldr	r2, [r5, #8]
 800f5f0:	692b      	ldr	r3, [r5, #16]
 800f5f2:	443a      	add	r2, r7
 800f5f4:	443b      	add	r3, r7
 800f5f6:	60aa      	str	r2, [r5, #8]
 800f5f8:	612b      	str	r3, [r5, #16]
 800f5fa:	e7ed      	b.n	800f5d8 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800f5fc <ucdr_serialize_array_double>:
 800f5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f600:	460e      	mov	r6, r1
 800f602:	2108      	movs	r1, #8
 800f604:	4604      	mov	r4, r0
 800f606:	4617      	mov	r7, r2
 800f608:	f7fc fc66 	bl	800bed8 <ucdr_buffer_alignment>
 800f60c:	4601      	mov	r1, r0
 800f60e:	4620      	mov	r0, r4
 800f610:	7d65      	ldrb	r5, [r4, #21]
 800f612:	f7fc fca5 	bl	800bf60 <ucdr_advance_buffer>
 800f616:	7d21      	ldrb	r1, [r4, #20]
 800f618:	7565      	strb	r5, [r4, #21]
 800f61a:	2901      	cmp	r1, #1
 800f61c:	d010      	beq.n	800f640 <ucdr_serialize_array_double+0x44>
 800f61e:	b157      	cbz	r7, 800f636 <ucdr_serialize_array_double+0x3a>
 800f620:	2500      	movs	r5, #0
 800f622:	e000      	b.n	800f626 <ucdr_serialize_array_double+0x2a>
 800f624:	7d21      	ldrb	r1, [r4, #20]
 800f626:	ecb6 0b02 	vldmia	r6!, {d0}
 800f62a:	4620      	mov	r0, r4
 800f62c:	3501      	adds	r5, #1
 800f62e:	f7fc f98d 	bl	800b94c <ucdr_serialize_endian_double>
 800f632:	42af      	cmp	r7, r5
 800f634:	d1f6      	bne.n	800f624 <ucdr_serialize_array_double+0x28>
 800f636:	7da0      	ldrb	r0, [r4, #22]
 800f638:	f080 0001 	eor.w	r0, r0, #1
 800f63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f640:	00ff      	lsls	r7, r7, #3
 800f642:	4639      	mov	r1, r7
 800f644:	4620      	mov	r0, r4
 800f646:	f7fc fbe7 	bl	800be18 <ucdr_check_buffer_available_for>
 800f64a:	b9f8      	cbnz	r0, 800f68c <ucdr_serialize_array_double+0x90>
 800f64c:	46b8      	mov	r8, r7
 800f64e:	e00a      	b.n	800f666 <ucdr_serialize_array_double+0x6a>
 800f650:	68a0      	ldr	r0, [r4, #8]
 800f652:	f009 fdca 	bl	80191ea <memcpy>
 800f656:	68a2      	ldr	r2, [r4, #8]
 800f658:	6923      	ldr	r3, [r4, #16]
 800f65a:	442a      	add	r2, r5
 800f65c:	442b      	add	r3, r5
 800f65e:	eba8 0805 	sub.w	r8, r8, r5
 800f662:	60a2      	str	r2, [r4, #8]
 800f664:	6123      	str	r3, [r4, #16]
 800f666:	4641      	mov	r1, r8
 800f668:	2208      	movs	r2, #8
 800f66a:	4620      	mov	r0, r4
 800f66c:	f7fc fc5c 	bl	800bf28 <ucdr_check_final_buffer_behavior_array>
 800f670:	eba7 0108 	sub.w	r1, r7, r8
 800f674:	4431      	add	r1, r6
 800f676:	4605      	mov	r5, r0
 800f678:	4602      	mov	r2, r0
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d1e8      	bne.n	800f650 <ucdr_serialize_array_double+0x54>
 800f67e:	7da0      	ldrb	r0, [r4, #22]
 800f680:	2308      	movs	r3, #8
 800f682:	7563      	strb	r3, [r4, #21]
 800f684:	f080 0001 	eor.w	r0, r0, #1
 800f688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f68c:	463a      	mov	r2, r7
 800f68e:	68a0      	ldr	r0, [r4, #8]
 800f690:	4631      	mov	r1, r6
 800f692:	f009 fdaa 	bl	80191ea <memcpy>
 800f696:	68a2      	ldr	r2, [r4, #8]
 800f698:	6923      	ldr	r3, [r4, #16]
 800f69a:	443a      	add	r2, r7
 800f69c:	441f      	add	r7, r3
 800f69e:	60a2      	str	r2, [r4, #8]
 800f6a0:	6127      	str	r7, [r4, #16]
 800f6a2:	e7ec      	b.n	800f67e <ucdr_serialize_array_double+0x82>

0800f6a4 <ucdr_deserialize_array_double>:
 800f6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6a8:	460e      	mov	r6, r1
 800f6aa:	2108      	movs	r1, #8
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	4617      	mov	r7, r2
 800f6b0:	f7fc fc12 	bl	800bed8 <ucdr_buffer_alignment>
 800f6b4:	4601      	mov	r1, r0
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	7d65      	ldrb	r5, [r4, #21]
 800f6ba:	f7fc fc51 	bl	800bf60 <ucdr_advance_buffer>
 800f6be:	7d21      	ldrb	r1, [r4, #20]
 800f6c0:	7565      	strb	r5, [r4, #21]
 800f6c2:	2901      	cmp	r1, #1
 800f6c4:	d011      	beq.n	800f6ea <ucdr_deserialize_array_double+0x46>
 800f6c6:	b15f      	cbz	r7, 800f6e0 <ucdr_deserialize_array_double+0x3c>
 800f6c8:	2500      	movs	r5, #0
 800f6ca:	e000      	b.n	800f6ce <ucdr_deserialize_array_double+0x2a>
 800f6cc:	7d21      	ldrb	r1, [r4, #20]
 800f6ce:	4632      	mov	r2, r6
 800f6d0:	4620      	mov	r0, r4
 800f6d2:	3501      	adds	r5, #1
 800f6d4:	f7fc fad2 	bl	800bc7c <ucdr_deserialize_endian_double>
 800f6d8:	42af      	cmp	r7, r5
 800f6da:	f106 0608 	add.w	r6, r6, #8
 800f6de:	d1f5      	bne.n	800f6cc <ucdr_deserialize_array_double+0x28>
 800f6e0:	7da0      	ldrb	r0, [r4, #22]
 800f6e2:	f080 0001 	eor.w	r0, r0, #1
 800f6e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6ea:	00ff      	lsls	r7, r7, #3
 800f6ec:	4639      	mov	r1, r7
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	f7fc fb92 	bl	800be18 <ucdr_check_buffer_available_for>
 800f6f4:	b9f8      	cbnz	r0, 800f736 <ucdr_deserialize_array_double+0x92>
 800f6f6:	46b8      	mov	r8, r7
 800f6f8:	e00a      	b.n	800f710 <ucdr_deserialize_array_double+0x6c>
 800f6fa:	68a1      	ldr	r1, [r4, #8]
 800f6fc:	f009 fd75 	bl	80191ea <memcpy>
 800f700:	68a2      	ldr	r2, [r4, #8]
 800f702:	6923      	ldr	r3, [r4, #16]
 800f704:	442a      	add	r2, r5
 800f706:	442b      	add	r3, r5
 800f708:	eba8 0805 	sub.w	r8, r8, r5
 800f70c:	60a2      	str	r2, [r4, #8]
 800f70e:	6123      	str	r3, [r4, #16]
 800f710:	2208      	movs	r2, #8
 800f712:	4641      	mov	r1, r8
 800f714:	4620      	mov	r0, r4
 800f716:	f7fc fc07 	bl	800bf28 <ucdr_check_final_buffer_behavior_array>
 800f71a:	4605      	mov	r5, r0
 800f71c:	eba7 0008 	sub.w	r0, r7, r8
 800f720:	4430      	add	r0, r6
 800f722:	462a      	mov	r2, r5
 800f724:	2d00      	cmp	r5, #0
 800f726:	d1e8      	bne.n	800f6fa <ucdr_deserialize_array_double+0x56>
 800f728:	7da0      	ldrb	r0, [r4, #22]
 800f72a:	2308      	movs	r3, #8
 800f72c:	7563      	strb	r3, [r4, #21]
 800f72e:	f080 0001 	eor.w	r0, r0, #1
 800f732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f736:	463a      	mov	r2, r7
 800f738:	68a1      	ldr	r1, [r4, #8]
 800f73a:	4630      	mov	r0, r6
 800f73c:	f009 fd55 	bl	80191ea <memcpy>
 800f740:	68a2      	ldr	r2, [r4, #8]
 800f742:	6923      	ldr	r3, [r4, #16]
 800f744:	443a      	add	r2, r7
 800f746:	441f      	add	r7, r3
 800f748:	60a2      	str	r2, [r4, #8]
 800f74a:	6127      	str	r7, [r4, #16]
 800f74c:	e7ec      	b.n	800f728 <ucdr_deserialize_array_double+0x84>
 800f74e:	bf00      	nop

0800f750 <ucdr_serialize_sequence_char>:
 800f750:	b570      	push	{r4, r5, r6, lr}
 800f752:	4615      	mov	r5, r2
 800f754:	460e      	mov	r6, r1
 800f756:	7d01      	ldrb	r1, [r0, #20]
 800f758:	4604      	mov	r4, r0
 800f75a:	f7fb fb7d 	bl	800ae58 <ucdr_serialize_endian_uint32_t>
 800f75e:	b90d      	cbnz	r5, 800f764 <ucdr_serialize_sequence_char+0x14>
 800f760:	2001      	movs	r0, #1
 800f762:	bd70      	pop	{r4, r5, r6, pc}
 800f764:	7d21      	ldrb	r1, [r4, #20]
 800f766:	462b      	mov	r3, r5
 800f768:	4632      	mov	r2, r6
 800f76a:	4620      	mov	r0, r4
 800f76c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f770:	f7ff be18 	b.w	800f3a4 <ucdr_serialize_endian_array_char>

0800f774 <ucdr_deserialize_sequence_char>:
 800f774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f778:	461d      	mov	r5, r3
 800f77a:	4616      	mov	r6, r2
 800f77c:	460f      	mov	r7, r1
 800f77e:	461a      	mov	r2, r3
 800f780:	7d01      	ldrb	r1, [r0, #20]
 800f782:	4604      	mov	r4, r0
 800f784:	f7fb fc90 	bl	800b0a8 <ucdr_deserialize_endian_uint32_t>
 800f788:	682b      	ldr	r3, [r5, #0]
 800f78a:	429e      	cmp	r6, r3
 800f78c:	bf3c      	itt	cc
 800f78e:	2201      	movcc	r2, #1
 800f790:	75a2      	strbcc	r2, [r4, #22]
 800f792:	b913      	cbnz	r3, 800f79a <ucdr_deserialize_sequence_char+0x26>
 800f794:	2001      	movs	r0, #1
 800f796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f79a:	7d21      	ldrb	r1, [r4, #20]
 800f79c:	463a      	mov	r2, r7
 800f79e:	4620      	mov	r0, r4
 800f7a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7a4:	f7ff be30 	b.w	800f408 <ucdr_deserialize_endian_array_char>

0800f7a8 <ucdr_serialize_sequence_uint8_t>:
 800f7a8:	b570      	push	{r4, r5, r6, lr}
 800f7aa:	4615      	mov	r5, r2
 800f7ac:	460e      	mov	r6, r1
 800f7ae:	7d01      	ldrb	r1, [r0, #20]
 800f7b0:	4604      	mov	r4, r0
 800f7b2:	f7fb fb51 	bl	800ae58 <ucdr_serialize_endian_uint32_t>
 800f7b6:	b90d      	cbnz	r5, 800f7bc <ucdr_serialize_sequence_uint8_t+0x14>
 800f7b8:	2001      	movs	r0, #1
 800f7ba:	bd70      	pop	{r4, r5, r6, pc}
 800f7bc:	7d21      	ldrb	r1, [r4, #20]
 800f7be:	462b      	mov	r3, r5
 800f7c0:	4632      	mov	r2, r6
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7c8:	f7ff be82 	b.w	800f4d0 <ucdr_serialize_endian_array_uint8_t>

0800f7cc <ucdr_deserialize_sequence_uint8_t>:
 800f7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d0:	461d      	mov	r5, r3
 800f7d2:	4616      	mov	r6, r2
 800f7d4:	460f      	mov	r7, r1
 800f7d6:	461a      	mov	r2, r3
 800f7d8:	7d01      	ldrb	r1, [r0, #20]
 800f7da:	4604      	mov	r4, r0
 800f7dc:	f7fb fc64 	bl	800b0a8 <ucdr_deserialize_endian_uint32_t>
 800f7e0:	682b      	ldr	r3, [r5, #0]
 800f7e2:	429e      	cmp	r6, r3
 800f7e4:	bf3c      	itt	cc
 800f7e6:	2201      	movcc	r2, #1
 800f7e8:	75a2      	strbcc	r2, [r4, #22]
 800f7ea:	b913      	cbnz	r3, 800f7f2 <ucdr_deserialize_sequence_uint8_t+0x26>
 800f7ec:	2001      	movs	r0, #1
 800f7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7f2:	7d21      	ldrb	r1, [r4, #20]
 800f7f4:	463a      	mov	r2, r7
 800f7f6:	4620      	mov	r0, r4
 800f7f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7fc:	f7ff becc 	b.w	800f598 <ucdr_deserialize_endian_array_uint8_t>

0800f800 <uxr_buffer_delete_entity>:
 800f800:	b510      	push	{r4, lr}
 800f802:	2300      	movs	r3, #0
 800f804:	b08e      	sub	sp, #56	@ 0x38
 800f806:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f80a:	2303      	movs	r3, #3
 800f80c:	9300      	str	r3, [sp, #0]
 800f80e:	2204      	movs	r2, #4
 800f810:	ab06      	add	r3, sp, #24
 800f812:	4604      	mov	r4, r0
 800f814:	9103      	str	r1, [sp, #12]
 800f816:	f001 fb3d 	bl	8010e94 <uxr_prepare_stream_to_write_submessage>
 800f81a:	b918      	cbnz	r0, 800f824 <uxr_buffer_delete_entity+0x24>
 800f81c:	4604      	mov	r4, r0
 800f81e:	4620      	mov	r0, r4
 800f820:	b00e      	add	sp, #56	@ 0x38
 800f822:	bd10      	pop	{r4, pc}
 800f824:	9902      	ldr	r1, [sp, #8]
 800f826:	aa05      	add	r2, sp, #20
 800f828:	4620      	mov	r0, r4
 800f82a:	f001 fc69 	bl	8011100 <uxr_init_base_object_request>
 800f82e:	a905      	add	r1, sp, #20
 800f830:	4604      	mov	r4, r0
 800f832:	a806      	add	r0, sp, #24
 800f834:	f003 fa94 	bl	8012d60 <uxr_serialize_DELETE_Payload>
 800f838:	4620      	mov	r0, r4
 800f83a:	b00e      	add	sp, #56	@ 0x38
 800f83c:	bd10      	pop	{r4, pc}
 800f83e:	bf00      	nop

0800f840 <uxr_common_create_entity>:
 800f840:	b510      	push	{r4, lr}
 800f842:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f846:	b08c      	sub	sp, #48	@ 0x30
 800f848:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f84c:	f1bc 0f01 	cmp.w	ip, #1
 800f850:	bf0c      	ite	eq
 800f852:	f003 0201 	andeq.w	r2, r3, #1
 800f856:	2200      	movne	r2, #0
 800f858:	330e      	adds	r3, #14
 800f85a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800f85e:	9101      	str	r1, [sp, #4]
 800f860:	441a      	add	r2, r3
 800f862:	2301      	movs	r3, #1
 800f864:	9300      	str	r3, [sp, #0]
 800f866:	9903      	ldr	r1, [sp, #12]
 800f868:	ab04      	add	r3, sp, #16
 800f86a:	b292      	uxth	r2, r2
 800f86c:	4604      	mov	r4, r0
 800f86e:	f001 fb11 	bl	8010e94 <uxr_prepare_stream_to_write_submessage>
 800f872:	b918      	cbnz	r0, 800f87c <uxr_common_create_entity+0x3c>
 800f874:	4604      	mov	r4, r0
 800f876:	4620      	mov	r0, r4
 800f878:	b00c      	add	sp, #48	@ 0x30
 800f87a:	bd10      	pop	{r4, pc}
 800f87c:	9902      	ldr	r1, [sp, #8]
 800f87e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f880:	4620      	mov	r0, r4
 800f882:	f001 fc3d 	bl	8011100 <uxr_init_base_object_request>
 800f886:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f888:	4604      	mov	r4, r0
 800f88a:	a804      	add	r0, sp, #16
 800f88c:	f003 f9c4 	bl	8012c18 <uxr_serialize_CREATE_Payload>
 800f890:	4620      	mov	r0, r4
 800f892:	b00c      	add	sp, #48	@ 0x30
 800f894:	bd10      	pop	{r4, pc}
 800f896:	bf00      	nop

0800f898 <uxr_buffer_create_participant_bin>:
 800f898:	b570      	push	{r4, r5, r6, lr}
 800f89a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800f89e:	ac11      	add	r4, sp, #68	@ 0x44
 800f8a0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800f8a4:	2303      	movs	r3, #3
 800f8a6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f8aa:	7223      	strb	r3, [r4, #8]
 800f8ac:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800f8ae:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	2100      	movs	r1, #0
 800f8b6:	4605      	mov	r5, r0
 800f8b8:	7122      	strb	r2, [r4, #4]
 800f8ba:	f88d 1014 	strb.w	r1, [sp, #20]
 800f8be:	b1cb      	cbz	r3, 800f8f4 <uxr_buffer_create_participant_bin+0x5c>
 800f8c0:	f88d 201c 	strb.w	r2, [sp, #28]
 800f8c4:	9308      	str	r3, [sp, #32]
 800f8c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8ca:	a915      	add	r1, sp, #84	@ 0x54
 800f8cc:	a809      	add	r0, sp, #36	@ 0x24
 800f8ce:	f7fc faf7 	bl	800bec0 <ucdr_init_buffer>
 800f8d2:	a905      	add	r1, sp, #20
 800f8d4:	a809      	add	r0, sp, #36	@ 0x24
 800f8d6:	f002 fe39 	bl	801254c <uxr_serialize_OBJK_DomainParticipant_Binary>
 800f8da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f8dc:	9600      	str	r6, [sp, #0]
 800f8de:	9401      	str	r4, [sp, #4]
 800f8e0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f8e4:	60e3      	str	r3, [r4, #12]
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	b29b      	uxth	r3, r3
 800f8ea:	f7ff ffa9 	bl	800f840 <uxr_common_create_entity>
 800f8ee:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800f8f2:	bd70      	pop	{r4, r5, r6, pc}
 800f8f4:	f88d 301c 	strb.w	r3, [sp, #28]
 800f8f8:	e7e5      	b.n	800f8c6 <uxr_buffer_create_participant_bin+0x2e>
 800f8fa:	bf00      	nop

0800f8fc <uxr_buffer_create_topic_bin>:
 800f8fc:	b570      	push	{r4, r5, r6, lr}
 800f8fe:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800f902:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f906:	9105      	str	r1, [sp, #20]
 800f908:	4605      	mov	r5, r0
 800f90a:	a997      	add	r1, sp, #604	@ 0x25c
 800f90c:	4618      	mov	r0, r3
 800f90e:	2302      	movs	r3, #2
 800f910:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800f914:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800f918:	f000 f9ea 	bl	800fcf0 <uxr_object_id_to_raw>
 800f91c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800f91e:	9306      	str	r3, [sp, #24]
 800f920:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800f922:	930a      	str	r3, [sp, #40]	@ 0x28
 800f924:	2303      	movs	r3, #3
 800f926:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f92a:	2301      	movs	r3, #1
 800f92c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f930:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f934:	a917      	add	r1, sp, #92	@ 0x5c
 800f936:	2300      	movs	r3, #0
 800f938:	a80b      	add	r0, sp, #44	@ 0x2c
 800f93a:	f88d 301c 	strb.w	r3, [sp, #28]
 800f93e:	f7fc fabf 	bl	800bec0 <ucdr_init_buffer>
 800f942:	a906      	add	r1, sp, #24
 800f944:	a80b      	add	r0, sp, #44	@ 0x2c
 800f946:	f002 fe23 	bl	8012590 <uxr_serialize_OBJK_Topic_Binary>
 800f94a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f94c:	9316      	str	r3, [sp, #88]	@ 0x58
 800f94e:	ac13      	add	r4, sp, #76	@ 0x4c
 800f950:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f954:	9600      	str	r6, [sp, #0]
 800f956:	9401      	str	r4, [sp, #4]
 800f958:	b29b      	uxth	r3, r3
 800f95a:	4628      	mov	r0, r5
 800f95c:	f7ff ff70 	bl	800f840 <uxr_common_create_entity>
 800f960:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800f964:	bd70      	pop	{r4, r5, r6, pc}
 800f966:	bf00      	nop

0800f968 <uxr_buffer_create_publisher_bin>:
 800f968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f96a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800f96e:	4605      	mov	r5, r0
 800f970:	9105      	str	r1, [sp, #20]
 800f972:	4618      	mov	r0, r3
 800f974:	2603      	movs	r6, #3
 800f976:	a992      	add	r1, sp, #584	@ 0x248
 800f978:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f97c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800f980:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800f984:	f000 f9b4 	bl	800fcf0 <uxr_object_id_to_raw>
 800f988:	2300      	movs	r3, #0
 800f98a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f98e:	a912      	add	r1, sp, #72	@ 0x48
 800f990:	a806      	add	r0, sp, #24
 800f992:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800f996:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800f99a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800f99e:	f7fc fa8f 	bl	800bec0 <ucdr_init_buffer>
 800f9a2:	a993      	add	r1, sp, #588	@ 0x24c
 800f9a4:	a806      	add	r0, sp, #24
 800f9a6:	f002 fea7 	bl	80126f8 <uxr_serialize_OBJK_Publisher_Binary>
 800f9aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9ac:	9311      	str	r3, [sp, #68]	@ 0x44
 800f9ae:	ac0e      	add	r4, sp, #56	@ 0x38
 800f9b0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f9b4:	9700      	str	r7, [sp, #0]
 800f9b6:	9401      	str	r4, [sp, #4]
 800f9b8:	b29b      	uxth	r3, r3
 800f9ba:	4628      	mov	r0, r5
 800f9bc:	f7ff ff40 	bl	800f840 <uxr_common_create_entity>
 800f9c0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800f9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9c6:	bf00      	nop

0800f9c8 <uxr_buffer_create_datawriter_bin>:
 800f9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9cc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f9d0:	ac1d      	add	r4, sp, #116	@ 0x74
 800f9d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f9d6:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800f9da:	9105      	str	r1, [sp, #20]
 800f9dc:	4606      	mov	r6, r0
 800f9de:	a9a1      	add	r1, sp, #644	@ 0x284
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	2305      	movs	r3, #5
 800f9e4:	7123      	strb	r3, [r4, #4]
 800f9e6:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800f9ea:	2703      	movs	r7, #3
 800f9ec:	f000 f980 	bl	800fcf0 <uxr_object_id_to_raw>
 800f9f0:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800f9f2:	7227      	strb	r7, [r4, #8]
 800f9f4:	a90e      	add	r1, sp, #56	@ 0x38
 800f9f6:	f000 f97b 	bl	800fcf0 <uxr_object_id_to_raw>
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800fa00:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800fa04:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800fa08:	3d00      	subs	r5, #0
 800fa0a:	bf18      	it	ne
 800fa0c:	2501      	movne	r5, #1
 800fa0e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800fa12:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800fa16:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fa1a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fa1e:	2301      	movs	r3, #1
 800fa20:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800fa24:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800fa28:	bb8a      	cbnz	r2, 800fa8e <uxr_buffer_create_datawriter_bin+0xc6>
 800fa2a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fa2e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800fa32:	f04f 0c13 	mov.w	ip, #19
 800fa36:	250b      	movs	r5, #11
 800fa38:	2221      	movs	r2, #33	@ 0x21
 800fa3a:	2111      	movs	r1, #17
 800fa3c:	2009      	movs	r0, #9
 800fa3e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800fa42:	b923      	cbnz	r3, 800fa4e <uxr_buffer_create_datawriter_bin+0x86>
 800fa44:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800fa48:	4672      	mov	r2, lr
 800fa4a:	4661      	mov	r1, ip
 800fa4c:	4628      	mov	r0, r5
 800fa4e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800fa52:	2b01      	cmp	r3, #1
 800fa54:	d025      	beq.n	800faa2 <uxr_buffer_create_datawriter_bin+0xda>
 800fa56:	2b03      	cmp	r3, #3
 800fa58:	d029      	beq.n	800faae <uxr_buffer_create_datawriter_bin+0xe6>
 800fa5a:	b32b      	cbz	r3, 800faa8 <uxr_buffer_create_datawriter_bin+0xe0>
 800fa5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fa60:	a921      	add	r1, sp, #132	@ 0x84
 800fa62:	a806      	add	r0, sp, #24
 800fa64:	f7fc fa2c 	bl	800bec0 <ucdr_init_buffer>
 800fa68:	a90e      	add	r1, sp, #56	@ 0x38
 800fa6a:	a806      	add	r0, sp, #24
 800fa6c:	f002 feba 	bl	80127e4 <uxr_serialize_OBJK_DataWriter_Binary>
 800fa70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa72:	f8cd 8000 	str.w	r8, [sp]
 800fa76:	9401      	str	r4, [sp, #4]
 800fa78:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fa7c:	60e3      	str	r3, [r4, #12]
 800fa7e:	4630      	mov	r0, r6
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	f7ff fedd 	bl	800f840 <uxr_common_create_entity>
 800fa86:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800fa8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa8e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800fa92:	f04f 0c12 	mov.w	ip, #18
 800fa96:	250a      	movs	r5, #10
 800fa98:	2220      	movs	r2, #32
 800fa9a:	2110      	movs	r1, #16
 800fa9c:	2008      	movs	r0, #8
 800fa9e:	2702      	movs	r7, #2
 800faa0:	e7cd      	b.n	800fa3e <uxr_buffer_create_datawriter_bin+0x76>
 800faa2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800faa6:	e7d9      	b.n	800fa5c <uxr_buffer_create_datawriter_bin+0x94>
 800faa8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800faac:	e7d6      	b.n	800fa5c <uxr_buffer_create_datawriter_bin+0x94>
 800faae:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800fab2:	e7d3      	b.n	800fa5c <uxr_buffer_create_datawriter_bin+0x94>

0800fab4 <uxr_buffer_create_replier_bin>:
 800fab4:	b570      	push	{r4, r5, r6, lr}
 800fab6:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800faba:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fabe:	9105      	str	r1, [sp, #20]
 800fac0:	4605      	mov	r5, r0
 800fac2:	a999      	add	r1, sp, #612	@ 0x264
 800fac4:	4618      	mov	r0, r3
 800fac6:	2308      	movs	r3, #8
 800fac8:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 800facc:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 800fad0:	f000 f90e 	bl	800fcf0 <uxr_object_id_to_raw>
 800fad4:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 800fad6:	9306      	str	r3, [sp, #24]
 800fad8:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 800fada:	9307      	str	r3, [sp, #28]
 800fadc:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 800fade:	9308      	str	r3, [sp, #32]
 800fae0:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800fae2:	930c      	str	r3, [sp, #48]	@ 0x30
 800fae4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fae6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fae8:	2301      	movs	r3, #1
 800faea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800faee:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800faf2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800faf6:	a919      	add	r1, sp, #100	@ 0x64
 800faf8:	2303      	movs	r3, #3
 800fafa:	a80d      	add	r0, sp, #52	@ 0x34
 800fafc:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 800fb00:	f7fc f9de 	bl	800bec0 <ucdr_init_buffer>
 800fb04:	a906      	add	r1, sp, #24
 800fb06:	a80d      	add	r0, sp, #52	@ 0x34
 800fb08:	f002 fe98 	bl	801283c <uxr_serialize_OBJK_Replier_Binary>
 800fb0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fb0e:	9318      	str	r3, [sp, #96]	@ 0x60
 800fb10:	ac15      	add	r4, sp, #84	@ 0x54
 800fb12:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fb16:	9600      	str	r6, [sp, #0]
 800fb18:	9401      	str	r4, [sp, #4]
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	4628      	mov	r0, r5
 800fb1e:	f7ff fe8f 	bl	800f840 <uxr_common_create_entity>
 800fb22:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 800fb26:	bd70      	pop	{r4, r5, r6, pc}

0800fb28 <get_custom_error>:
 800fb28:	4b01      	ldr	r3, [pc, #4]	@ (800fb30 <get_custom_error+0x8>)
 800fb2a:	7818      	ldrb	r0, [r3, #0]
 800fb2c:	4770      	bx	lr
 800fb2e:	bf00      	nop
 800fb30:	2000b55c 	.word	0x2000b55c

0800fb34 <recv_custom_msg>:
 800fb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb38:	4693      	mov	fp, r2
 800fb3a:	b089      	sub	sp, #36	@ 0x24
 800fb3c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800fb40:	9305      	str	r3, [sp, #20]
 800fb42:	468a      	mov	sl, r1
 800fb44:	2100      	movs	r1, #0
 800fb46:	4604      	mov	r4, r0
 800fb48:	f88d 101e 	strb.w	r1, [sp, #30]
 800fb4c:	b322      	cbz	r2, 800fb98 <recv_custom_msg+0x64>
 800fb4e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800fb52:	f10d 081f 	add.w	r8, sp, #31
 800fb56:	af05      	add	r7, sp, #20
 800fb58:	f10d 061e 	add.w	r6, sp, #30
 800fb5c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800fb60:	e002      	b.n	800fb68 <recv_custom_msg+0x34>
 800fb62:	9b05      	ldr	r3, [sp, #20]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	dd0f      	ble.n	800fb88 <recv_custom_msg+0x54>
 800fb68:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800fb6c:	4623      	mov	r3, r4
 800fb6e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800fb72:	e9cd 5600 	strd	r5, r6, [sp]
 800fb76:	4622      	mov	r2, r4
 800fb78:	4648      	mov	r0, r9
 800fb7a:	f001 fcef 	bl	801155c <uxr_read_framed_msg>
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	d0ef      	beq.n	800fb62 <recv_custom_msg+0x2e>
 800fb82:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fb86:	b1b3      	cbz	r3, 800fbb6 <recv_custom_msg+0x82>
 800fb88:	4b0f      	ldr	r3, [pc, #60]	@ (800fbc8 <recv_custom_msg+0x94>)
 800fb8a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800fb8e:	701a      	strb	r2, [r3, #0]
 800fb90:	2000      	movs	r0, #0
 800fb92:	b009      	add	sp, #36	@ 0x24
 800fb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb98:	f10d 021f 	add.w	r2, sp, #31
 800fb9c:	9200      	str	r2, [sp, #0]
 800fb9e:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800fba2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fba6:	4601      	mov	r1, r0
 800fba8:	47a8      	blx	r5
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	d0ec      	beq.n	800fb88 <recv_custom_msg+0x54>
 800fbae:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d1e8      	bne.n	800fb88 <recv_custom_msg+0x54>
 800fbb6:	f8cb 0000 	str.w	r0, [fp]
 800fbba:	2001      	movs	r0, #1
 800fbbc:	f8ca 4000 	str.w	r4, [sl]
 800fbc0:	b009      	add	sp, #36	@ 0x24
 800fbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc6:	bf00      	nop
 800fbc8:	2000b55c 	.word	0x2000b55c

0800fbcc <send_custom_msg>:
 800fbcc:	b530      	push	{r4, r5, lr}
 800fbce:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800fbd2:	b087      	sub	sp, #28
 800fbd4:	4615      	mov	r5, r2
 800fbd6:	b974      	cbnz	r4, 800fbf6 <send_custom_msg+0x2a>
 800fbd8:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800fbdc:	f10d 0317 	add.w	r3, sp, #23
 800fbe0:	47a0      	blx	r4
 800fbe2:	b108      	cbz	r0, 800fbe8 <send_custom_msg+0x1c>
 800fbe4:	42a8      	cmp	r0, r5
 800fbe6:	d015      	beq.n	800fc14 <send_custom_msg+0x48>
 800fbe8:	4b0c      	ldr	r3, [pc, #48]	@ (800fc1c <send_custom_msg+0x50>)
 800fbea:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800fbee:	701a      	strb	r2, [r3, #0]
 800fbf0:	2000      	movs	r0, #0
 800fbf2:	b007      	add	sp, #28
 800fbf4:	bd30      	pop	{r4, r5, pc}
 800fbf6:	460b      	mov	r3, r1
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	f10d 0117 	add.w	r1, sp, #23
 800fbfe:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800fc02:	4602      	mov	r2, r0
 800fc04:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800fc08:	9500      	str	r5, [sp, #0]
 800fc0a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800fc0e:	f001 faad 	bl	801116c <uxr_write_framed_msg>
 800fc12:	e7e6      	b.n	800fbe2 <send_custom_msg+0x16>
 800fc14:	2001      	movs	r0, #1
 800fc16:	b007      	add	sp, #28
 800fc18:	bd30      	pop	{r4, r5, pc}
 800fc1a:	bf00      	nop
 800fc1c:	2000b55c 	.word	0x2000b55c

0800fc20 <uxr_set_custom_transport_callbacks>:
 800fc20:	b410      	push	{r4}
 800fc22:	9c01      	ldr	r4, [sp, #4]
 800fc24:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800fc28:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800fc2c:	9b02      	ldr	r3, [sp, #8]
 800fc2e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800fc32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc36:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800fc3a:	4770      	bx	lr

0800fc3c <uxr_init_custom_transport>:
 800fc3c:	b538      	push	{r3, r4, r5, lr}
 800fc3e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800fc42:	b303      	cbz	r3, 800fc86 <uxr_init_custom_transport+0x4a>
 800fc44:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800fc48:	4604      	mov	r4, r0
 800fc4a:	b1e2      	cbz	r2, 800fc86 <uxr_init_custom_transport+0x4a>
 800fc4c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800fc50:	b1ca      	cbz	r2, 800fc86 <uxr_init_custom_transport+0x4a>
 800fc52:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800fc56:	b1b2      	cbz	r2, 800fc86 <uxr_init_custom_transport+0x4a>
 800fc58:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800fc5c:	4798      	blx	r3
 800fc5e:	4605      	mov	r5, r0
 800fc60:	b188      	cbz	r0, 800fc86 <uxr_init_custom_transport+0x4a>
 800fc62:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800fc66:	b98b      	cbnz	r3, 800fc8c <uxr_init_custom_transport+0x50>
 800fc68:	490b      	ldr	r1, [pc, #44]	@ (800fc98 <uxr_init_custom_transport+0x5c>)
 800fc6a:	4b0c      	ldr	r3, [pc, #48]	@ (800fc9c <uxr_init_custom_transport+0x60>)
 800fc6c:	4a0c      	ldr	r2, [pc, #48]	@ (800fca0 <uxr_init_custom_transport+0x64>)
 800fc6e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800fc72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc76:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800fc7a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800fc7e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800fc82:	4628      	mov	r0, r5
 800fc84:	bd38      	pop	{r3, r4, r5, pc}
 800fc86:	2500      	movs	r5, #0
 800fc88:	4628      	mov	r0, r5
 800fc8a:	bd38      	pop	{r3, r4, r5, pc}
 800fc8c:	2100      	movs	r1, #0
 800fc8e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800fc92:	f001 fa65 	bl	8011160 <uxr_init_framing_io>
 800fc96:	e7e7      	b.n	800fc68 <uxr_init_custom_transport+0x2c>
 800fc98:	0800fbcd 	.word	0x0800fbcd
 800fc9c:	0800fb35 	.word	0x0800fb35
 800fca0:	0800fb29 	.word	0x0800fb29

0800fca4 <uxr_close_custom_transport>:
 800fca4:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800fca8:	4718      	bx	r3
 800fcaa:	bf00      	nop

0800fcac <uxr_object_id>:
 800fcac:	b082      	sub	sp, #8
 800fcae:	2300      	movs	r3, #0
 800fcb0:	f88d 1006 	strb.w	r1, [sp, #6]
 800fcb4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fcb8:	f360 030f 	bfi	r3, r0, #0, #16
 800fcbc:	f362 431f 	bfi	r3, r2, #16, #16
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	b002      	add	sp, #8
 800fcc4:	4770      	bx	lr
 800fcc6:	bf00      	nop

0800fcc8 <uxr_object_id_from_raw>:
 800fcc8:	7843      	ldrb	r3, [r0, #1]
 800fcca:	7801      	ldrb	r1, [r0, #0]
 800fccc:	b082      	sub	sp, #8
 800fcce:	f003 020f 	and.w	r2, r3, #15
 800fcd2:	f88d 2006 	strb.w	r2, [sp, #6]
 800fcd6:	091b      	lsrs	r3, r3, #4
 800fcd8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fcdc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800fce0:	2000      	movs	r0, #0
 800fce2:	f363 000f 	bfi	r0, r3, #0, #16
 800fce6:	f362 401f 	bfi	r0, r2, #16, #16
 800fcea:	b002      	add	sp, #8
 800fcec:	4770      	bx	lr
 800fcee:	bf00      	nop

0800fcf0 <uxr_object_id_to_raw>:
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800fcf6:	b082      	sub	sp, #8
 800fcf8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800fcfc:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800fd00:	f881 c000 	strb.w	ip, [r1]
 800fd04:	7048      	strb	r0, [r1, #1]
 800fd06:	b002      	add	sp, #8
 800fd08:	4770      	bx	lr
 800fd0a:	bf00      	nop

0800fd0c <uxr_buffer_request_data>:
 800fd0c:	b530      	push	{r4, r5, lr}
 800fd0e:	b095      	sub	sp, #84	@ 0x54
 800fd10:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800fd14:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800fd16:	9303      	str	r3, [sp, #12]
 800fd18:	2200      	movs	r2, #0
 800fd1a:	2d00      	cmp	r5, #0
 800fd1c:	bf14      	ite	ne
 800fd1e:	2101      	movne	r1, #1
 800fd20:	4611      	moveq	r1, r2
 800fd22:	4604      	mov	r4, r0
 800fd24:	f88d 301c 	strb.w	r3, [sp, #28]
 800fd28:	f88d 201d 	strb.w	r2, [sp, #29]
 800fd2c:	f88d 201e 	strb.w	r2, [sp, #30]
 800fd30:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800fd34:	d021      	beq.n	800fd7a <uxr_buffer_request_data+0x6e>
 800fd36:	682a      	ldr	r2, [r5, #0]
 800fd38:	686b      	ldr	r3, [r5, #4]
 800fd3a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800fd3e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800fd42:	2210      	movs	r2, #16
 800fd44:	2308      	movs	r3, #8
 800fd46:	2100      	movs	r1, #0
 800fd48:	e9cd 3100 	strd	r3, r1, [sp]
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	9905      	ldr	r1, [sp, #20]
 800fd50:	ab0c      	add	r3, sp, #48	@ 0x30
 800fd52:	f001 f89f 	bl	8010e94 <uxr_prepare_stream_to_write_submessage>
 800fd56:	b918      	cbnz	r0, 800fd60 <uxr_buffer_request_data+0x54>
 800fd58:	4604      	mov	r4, r0
 800fd5a:	4620      	mov	r0, r4
 800fd5c:	b015      	add	sp, #84	@ 0x54
 800fd5e:	bd30      	pop	{r4, r5, pc}
 800fd60:	9904      	ldr	r1, [sp, #16]
 800fd62:	aa06      	add	r2, sp, #24
 800fd64:	4620      	mov	r0, r4
 800fd66:	f001 f9cb 	bl	8011100 <uxr_init_base_object_request>
 800fd6a:	a906      	add	r1, sp, #24
 800fd6c:	4604      	mov	r4, r0
 800fd6e:	a80c      	add	r0, sp, #48	@ 0x30
 800fd70:	f003 f8a0 	bl	8012eb4 <uxr_serialize_READ_DATA_Payload>
 800fd74:	4620      	mov	r0, r4
 800fd76:	b015      	add	sp, #84	@ 0x54
 800fd78:	bd30      	pop	{r4, r5, pc}
 800fd7a:	2208      	movs	r2, #8
 800fd7c:	e7e2      	b.n	800fd44 <uxr_buffer_request_data+0x38>
 800fd7e:	bf00      	nop

0800fd80 <uxr_buffer_cancel_data>:
 800fd80:	b510      	push	{r4, lr}
 800fd82:	b094      	sub	sp, #80	@ 0x50
 800fd84:	2300      	movs	r3, #0
 800fd86:	9202      	str	r2, [sp, #8]
 800fd88:	9205      	str	r2, [sp, #20]
 800fd8a:	9301      	str	r3, [sp, #4]
 800fd8c:	2201      	movs	r2, #1
 800fd8e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fd92:	f88d 301e 	strb.w	r3, [sp, #30]
 800fd96:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800fd9a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800fd9e:	2308      	movs	r3, #8
 800fda0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800fda4:	9300      	str	r3, [sp, #0]
 800fda6:	2210      	movs	r2, #16
 800fda8:	ab0c      	add	r3, sp, #48	@ 0x30
 800fdaa:	4604      	mov	r4, r0
 800fdac:	9103      	str	r1, [sp, #12]
 800fdae:	f001 f871 	bl	8010e94 <uxr_prepare_stream_to_write_submessage>
 800fdb2:	b918      	cbnz	r0, 800fdbc <uxr_buffer_cancel_data+0x3c>
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	b014      	add	sp, #80	@ 0x50
 800fdba:	bd10      	pop	{r4, pc}
 800fdbc:	9905      	ldr	r1, [sp, #20]
 800fdbe:	aa06      	add	r2, sp, #24
 800fdc0:	4620      	mov	r0, r4
 800fdc2:	f001 f99d 	bl	8011100 <uxr_init_base_object_request>
 800fdc6:	a906      	add	r1, sp, #24
 800fdc8:	4604      	mov	r4, r0
 800fdca:	a80c      	add	r0, sp, #48	@ 0x30
 800fdcc:	f003 f872 	bl	8012eb4 <uxr_serialize_READ_DATA_Payload>
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	b014      	add	sp, #80	@ 0x50
 800fdd4:	bd10      	pop	{r4, pc}
 800fdd6:	bf00      	nop

0800fdd8 <read_submessage_format>:
 800fdd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fddc:	b095      	sub	sp, #84	@ 0x54
 800fdde:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800fde2:	b113      	cbz	r3, 800fdea <read_submessage_format+0x12>
 800fde4:	b015      	add	sp, #84	@ 0x54
 800fde6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdea:	460c      	mov	r4, r1
 800fdec:	4615      	mov	r5, r2
 800fdee:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800fdf2:	4607      	mov	r7, r0
 800fdf4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800fdf6:	9004      	str	r0, [sp, #16]
 800fdf8:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800fdfa:	9005      	str	r0, [sp, #20]
 800fdfc:	1a52      	subs	r2, r2, r1
 800fdfe:	a80c      	add	r0, sp, #48	@ 0x30
 800fe00:	4699      	mov	r9, r3
 800fe02:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800fe06:	f7fc f85b 	bl	800bec0 <ucdr_init_buffer>
 800fe0a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800fe0e:	a80c      	add	r0, sp, #48	@ 0x30
 800fe10:	f7fc f82a 	bl	800be68 <ucdr_set_on_full_buffer_callback>
 800fe14:	69e2      	ldr	r2, [r4, #28]
 800fe16:	b19a      	cbz	r2, 800fe40 <read_submessage_format+0x68>
 800fe18:	f1b8 0f07 	cmp.w	r8, #7
 800fe1c:	f882 9014 	strb.w	r9, [r2, #20]
 800fe20:	d040      	beq.n	800fea4 <read_submessage_format+0xcc>
 800fe22:	f1b8 0f08 	cmp.w	r8, #8
 800fe26:	d02e      	beq.n	800fe86 <read_submessage_format+0xae>
 800fe28:	f1b8 0f06 	cmp.w	r8, #6
 800fe2c:	d011      	beq.n	800fe52 <read_submessage_format+0x7a>
 800fe2e:	2301      	movs	r3, #1
 800fe30:	7513      	strb	r3, [r2, #20]
 800fe32:	4629      	mov	r1, r5
 800fe34:	4620      	mov	r0, r4
 800fe36:	f7fc f893 	bl	800bf60 <ucdr_advance_buffer>
 800fe3a:	b015      	add	sp, #84	@ 0x54
 800fe3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe40:	f1b8 0f07 	cmp.w	r8, #7
 800fe44:	d02e      	beq.n	800fea4 <read_submessage_format+0xcc>
 800fe46:	f1b8 0f08 	cmp.w	r8, #8
 800fe4a:	d01c      	beq.n	800fe86 <read_submessage_format+0xae>
 800fe4c:	f1b8 0f06 	cmp.w	r8, #6
 800fe50:	d1ef      	bne.n	800fe32 <read_submessage_format+0x5a>
 800fe52:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800fe56:	f1b8 0f00 	cmp.w	r8, #0
 800fe5a:	d011      	beq.n	800fe80 <read_submessage_format+0xa8>
 800fe5c:	ab0c      	add	r3, sp, #48	@ 0x30
 800fe5e:	e9cd 3500 	strd	r3, r5, [sp]
 800fe62:	2306      	movs	r3, #6
 800fe64:	f88d 3016 	strb.w	r3, [sp, #22]
 800fe68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fe6c:	9302      	str	r3, [sp, #8]
 800fe6e:	4632      	mov	r2, r6
 800fe70:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800fe74:	4638      	mov	r0, r7
 800fe76:	47c0      	blx	r8
 800fe78:	2301      	movs	r3, #1
 800fe7a:	69e2      	ldr	r2, [r4, #28]
 800fe7c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800fe80:	2a00      	cmp	r2, #0
 800fe82:	d1d4      	bne.n	800fe2e <read_submessage_format+0x56>
 800fe84:	e7d5      	b.n	800fe32 <read_submessage_format+0x5a>
 800fe86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d0f8      	beq.n	800fe80 <read_submessage_format+0xa8>
 800fe8e:	a906      	add	r1, sp, #24
 800fe90:	a80c      	add	r0, sp, #48	@ 0x30
 800fe92:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800fe96:	f003 f8e1 	bl	801305c <uxr_deserialize_SampleIdentity>
 800fe9a:	b9a0      	cbnz	r0, 800fec6 <read_submessage_format+0xee>
 800fe9c:	69e2      	ldr	r2, [r4, #28]
 800fe9e:	2a00      	cmp	r2, #0
 800fea0:	d1c5      	bne.n	800fe2e <read_submessage_format+0x56>
 800fea2:	e7c6      	b.n	800fe32 <read_submessage_format+0x5a>
 800fea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fea8:	b13b      	cbz	r3, 800feba <read_submessage_format+0xe2>
 800feaa:	a906      	add	r1, sp, #24
 800feac:	a80c      	add	r0, sp, #48	@ 0x30
 800feae:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800feb2:	f002 fd99 	bl	80129e8 <uxr_deserialize_BaseObjectRequest>
 800feb6:	bb60      	cbnz	r0, 800ff12 <read_submessage_format+0x13a>
 800feb8:	69e2      	ldr	r2, [r4, #28]
 800feba:	68a3      	ldr	r3, [r4, #8]
 800febc:	442b      	add	r3, r5
 800febe:	60a3      	str	r3, [r4, #8]
 800fec0:	2a00      	cmp	r2, #0
 800fec2:	d1b4      	bne.n	800fe2e <read_submessage_format+0x56>
 800fec4:	e7b5      	b.n	800fe32 <read_submessage_format+0x5a>
 800fec6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800feca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fecc:	1a52      	subs	r2, r2, r1
 800fece:	eba8 0803 	sub.w	r8, r8, r3
 800fed2:	a80c      	add	r0, sp, #48	@ 0x30
 800fed4:	f7fb fff4 	bl	800bec0 <ucdr_init_buffer>
 800fed8:	44a8      	add	r8, r5
 800feda:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800fede:	a80c      	add	r0, sp, #48	@ 0x30
 800fee0:	f7fb ffc2 	bl	800be68 <ucdr_set_on_full_buffer_callback>
 800fee4:	fa1f f888 	uxth.w	r8, r8
 800fee8:	ab0c      	add	r3, sp, #48	@ 0x30
 800feea:	9300      	str	r3, [sp, #0]
 800feec:	f8cd 8004 	str.w	r8, [sp, #4]
 800fef0:	2108      	movs	r1, #8
 800fef2:	f88d 1016 	strb.w	r1, [sp, #22]
 800fef6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800fefa:	9102      	str	r1, [sp, #8]
 800fefc:	ab06      	add	r3, sp, #24
 800fefe:	4632      	mov	r2, r6
 800ff00:	9905      	ldr	r1, [sp, #20]
 800ff02:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800ff06:	4638      	mov	r0, r7
 800ff08:	47b0      	blx	r6
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ff10:	e7c4      	b.n	800fe9c <read_submessage_format+0xc4>
 800ff12:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800ff16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ff18:	1a52      	subs	r2, r2, r1
 800ff1a:	a80c      	add	r0, sp, #48	@ 0x30
 800ff1c:	eba8 0803 	sub.w	r8, r8, r3
 800ff20:	f7fb ffce 	bl	800bec0 <ucdr_init_buffer>
 800ff24:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ff28:	a80c      	add	r0, sp, #48	@ 0x30
 800ff2a:	f7fb ff9d 	bl	800be68 <ucdr_set_on_full_buffer_callback>
 800ff2e:	ab0c      	add	r3, sp, #48	@ 0x30
 800ff30:	9300      	str	r3, [sp, #0]
 800ff32:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800ff36:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ff3a:	44a8      	add	r8, r5
 800ff3c:	fa1f f888 	uxth.w	r8, r8
 800ff40:	f8cd 8004 	str.w	r8, [sp, #4]
 800ff44:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800ff48:	2107      	movs	r1, #7
 800ff4a:	f88d 1016 	strb.w	r1, [sp, #22]
 800ff4e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800ff52:	9102      	str	r1, [sp, #8]
 800ff54:	4632      	mov	r2, r6
 800ff56:	b29b      	uxth	r3, r3
 800ff58:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800ff5c:	9905      	ldr	r1, [sp, #20]
 800ff5e:	4638      	mov	r0, r7
 800ff60:	47b0      	blx	r6
 800ff62:	2301      	movs	r3, #1
 800ff64:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ff68:	e7a6      	b.n	800feb8 <read_submessage_format+0xe0>
 800ff6a:	bf00      	nop

0800ff6c <on_get_fragmentation_info>:
 800ff6c:	b500      	push	{lr}
 800ff6e:	b08b      	sub	sp, #44	@ 0x2c
 800ff70:	4601      	mov	r1, r0
 800ff72:	2204      	movs	r2, #4
 800ff74:	a802      	add	r0, sp, #8
 800ff76:	f7fb ffa3 	bl	800bec0 <ucdr_init_buffer>
 800ff7a:	f10d 0305 	add.w	r3, sp, #5
 800ff7e:	f10d 0206 	add.w	r2, sp, #6
 800ff82:	a901      	add	r1, sp, #4
 800ff84:	a802      	add	r0, sp, #8
 800ff86:	f001 fecf 	bl	8011d28 <uxr_read_submessage_header>
 800ff8a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ff8e:	2b0d      	cmp	r3, #13
 800ff90:	d003      	beq.n	800ff9a <on_get_fragmentation_info+0x2e>
 800ff92:	2000      	movs	r0, #0
 800ff94:	b00b      	add	sp, #44	@ 0x2c
 800ff96:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff9a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ff9e:	f013 0f02 	tst.w	r3, #2
 800ffa2:	bf14      	ite	ne
 800ffa4:	2002      	movne	r0, #2
 800ffa6:	2001      	moveq	r0, #1
 800ffa8:	b00b      	add	sp, #44	@ 0x2c
 800ffaa:	f85d fb04 	ldr.w	pc, [sp], #4
 800ffae:	bf00      	nop

0800ffb0 <read_submessage_get_info>:
 800ffb0:	b570      	push	{r4, r5, r6, lr}
 800ffb2:	2500      	movs	r5, #0
 800ffb4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800ffb8:	4604      	mov	r4, r0
 800ffba:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800ffbe:	460e      	mov	r6, r1
 800ffc0:	a810      	add	r0, sp, #64	@ 0x40
 800ffc2:	4629      	mov	r1, r5
 800ffc4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800ffc8:	f009 f846 	bl	8019058 <memset>
 800ffcc:	a903      	add	r1, sp, #12
 800ffce:	4630      	mov	r0, r6
 800ffd0:	f002 feb2 	bl	8012d38 <uxr_deserialize_GET_INFO_Payload>
 800ffd4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ffd8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ffdc:	4620      	mov	r0, r4
 800ffde:	f001 f887 	bl	80110f0 <uxr_session_header_offset>
 800ffe2:	462b      	mov	r3, r5
 800ffe4:	9000      	str	r0, [sp, #0]
 800ffe6:	220c      	movs	r2, #12
 800ffe8:	a905      	add	r1, sp, #20
 800ffea:	a808      	add	r0, sp, #32
 800ffec:	f7fb ff56 	bl	800be9c <ucdr_init_buffer_origin_offset>
 800fff0:	a910      	add	r1, sp, #64	@ 0x40
 800fff2:	a808      	add	r0, sp, #32
 800fff4:	f002 ff12 	bl	8012e1c <uxr_serialize_INFO_Payload>
 800fff8:	9b08      	ldr	r3, [sp, #32]
 800fffa:	462a      	mov	r2, r5
 800fffc:	4629      	mov	r1, r5
 800fffe:	4620      	mov	r0, r4
 8010000:	f001 f820 	bl	8011044 <uxr_stamp_session_header>
 8010004:	a808      	add	r0, sp, #32
 8010006:	f7fb ff87 	bl	800bf18 <ucdr_buffer_length>
 801000a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801000c:	4602      	mov	r2, r0
 801000e:	a905      	add	r1, sp, #20
 8010010:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010014:	47a0      	blx	r4
 8010016:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801001a:	bd70      	pop	{r4, r5, r6, pc}

0801001c <write_submessage_acknack.isra.0>:
 801001c:	b570      	push	{r4, r5, r6, lr}
 801001e:	b092      	sub	sp, #72	@ 0x48
 8010020:	4605      	mov	r5, r0
 8010022:	460e      	mov	r6, r1
 8010024:	4614      	mov	r4, r2
 8010026:	f001 f863 	bl	80110f0 <uxr_session_header_offset>
 801002a:	a905      	add	r1, sp, #20
 801002c:	9000      	str	r0, [sp, #0]
 801002e:	2300      	movs	r3, #0
 8010030:	a80a      	add	r0, sp, #40	@ 0x28
 8010032:	2211      	movs	r2, #17
 8010034:	f7fb ff32 	bl	800be9c <ucdr_init_buffer_origin_offset>
 8010038:	2218      	movs	r2, #24
 801003a:	fb02 5404 	mla	r4, r2, r4, r5
 801003e:	2300      	movs	r3, #0
 8010040:	2205      	movs	r2, #5
 8010042:	3450      	adds	r4, #80	@ 0x50
 8010044:	210a      	movs	r1, #10
 8010046:	a80a      	add	r0, sp, #40	@ 0x28
 8010048:	f001 fe54 	bl	8011cf4 <uxr_buffer_submessage_header>
 801004c:	a903      	add	r1, sp, #12
 801004e:	4620      	mov	r0, r4
 8010050:	f007 fb44 	bl	80176dc <uxr_compute_acknack>
 8010054:	ba40      	rev16	r0, r0
 8010056:	f8ad 000e 	strh.w	r0, [sp, #14]
 801005a:	a903      	add	r1, sp, #12
 801005c:	a80a      	add	r0, sp, #40	@ 0x28
 801005e:	f88d 6010 	strb.w	r6, [sp, #16]
 8010062:	f002 ff4b 	bl	8012efc <uxr_serialize_ACKNACK_Payload>
 8010066:	2200      	movs	r2, #0
 8010068:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801006a:	4611      	mov	r1, r2
 801006c:	4628      	mov	r0, r5
 801006e:	f000 ffe9 	bl	8011044 <uxr_stamp_session_header>
 8010072:	a80a      	add	r0, sp, #40	@ 0x28
 8010074:	f7fb ff50 	bl	800bf18 <ucdr_buffer_length>
 8010078:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801007a:	4602      	mov	r2, r0
 801007c:	a905      	add	r1, sp, #20
 801007e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010082:	47a0      	blx	r4
 8010084:	b012      	add	sp, #72	@ 0x48
 8010086:	bd70      	pop	{r4, r5, r6, pc}

08010088 <uxr_init_session>:
 8010088:	b510      	push	{r4, lr}
 801008a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80100c0 <uxr_init_session+0x38>
 801008e:	2300      	movs	r3, #0
 8010090:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8010094:	4604      	mov	r4, r0
 8010096:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801009a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801009e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80100a2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80100a6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80100aa:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80100ae:	2181      	movs	r1, #129	@ 0x81
 80100b0:	f000 ff34 	bl	8010f1c <uxr_init_session_info>
 80100b4:	f104 0008 	add.w	r0, r4, #8
 80100b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100bc:	f001 bd36 	b.w	8011b2c <uxr_init_stream_storage>
	...

080100c8 <uxr_set_status_callback>:
 80100c8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80100cc:	4770      	bx	lr
 80100ce:	bf00      	nop

080100d0 <uxr_set_topic_callback>:
 80100d0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80100d4:	4770      	bx	lr
 80100d6:	bf00      	nop

080100d8 <uxr_set_request_callback>:
 80100d8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80100dc:	4770      	bx	lr
 80100de:	bf00      	nop

080100e0 <uxr_set_reply_callback>:
 80100e0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80100e4:	4770      	bx	lr
 80100e6:	bf00      	nop

080100e8 <uxr_create_output_best_effort_stream>:
 80100e8:	b510      	push	{r4, lr}
 80100ea:	b084      	sub	sp, #16
 80100ec:	e9cd 2100 	strd	r2, r1, [sp]
 80100f0:	4604      	mov	r4, r0
 80100f2:	f000 fffd 	bl	80110f0 <uxr_session_header_offset>
 80100f6:	e9dd 2100 	ldrd	r2, r1, [sp]
 80100fa:	4603      	mov	r3, r0
 80100fc:	f104 0008 	add.w	r0, r4, #8
 8010100:	b004      	add	sp, #16
 8010102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010106:	f001 bd5b 	b.w	8011bc0 <uxr_add_output_best_effort_buffer>
 801010a:	bf00      	nop

0801010c <uxr_create_output_reliable_stream>:
 801010c:	b510      	push	{r4, lr}
 801010e:	b088      	sub	sp, #32
 8010110:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010114:	4604      	mov	r4, r0
 8010116:	9303      	str	r3, [sp, #12]
 8010118:	f000 ffea 	bl	80110f0 <uxr_session_header_offset>
 801011c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010120:	9000      	str	r0, [sp, #0]
 8010122:	9905      	ldr	r1, [sp, #20]
 8010124:	f104 0008 	add.w	r0, r4, #8
 8010128:	f001 fd5e 	bl	8011be8 <uxr_add_output_reliable_buffer>
 801012c:	2200      	movs	r2, #0
 801012e:	b2c3      	uxtb	r3, r0
 8010130:	f363 0207 	bfi	r2, r3, #0, #8
 8010134:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010138:	f363 220f 	bfi	r2, r3, #8, #8
 801013c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010140:	f363 4217 	bfi	r2, r3, #16, #8
 8010144:	0e03      	lsrs	r3, r0, #24
 8010146:	f363 621f 	bfi	r2, r3, #24, #8
 801014a:	4610      	mov	r0, r2
 801014c:	b008      	add	sp, #32
 801014e:	bd10      	pop	{r4, pc}

08010150 <uxr_create_input_best_effort_stream>:
 8010150:	b082      	sub	sp, #8
 8010152:	3008      	adds	r0, #8
 8010154:	b002      	add	sp, #8
 8010156:	f001 bd61 	b.w	8011c1c <uxr_add_input_best_effort_buffer>
 801015a:	bf00      	nop

0801015c <uxr_create_input_reliable_stream>:
 801015c:	b510      	push	{r4, lr}
 801015e:	b084      	sub	sp, #16
 8010160:	4c0b      	ldr	r4, [pc, #44]	@ (8010190 <uxr_create_input_reliable_stream+0x34>)
 8010162:	9400      	str	r4, [sp, #0]
 8010164:	3008      	adds	r0, #8
 8010166:	f001 fd6f 	bl	8011c48 <uxr_add_input_reliable_buffer>
 801016a:	2200      	movs	r2, #0
 801016c:	b2c3      	uxtb	r3, r0
 801016e:	f363 0207 	bfi	r2, r3, #0, #8
 8010172:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010176:	f363 220f 	bfi	r2, r3, #8, #8
 801017a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801017e:	f363 4217 	bfi	r2, r3, #16, #8
 8010182:	0e03      	lsrs	r3, r0, #24
 8010184:	f363 621f 	bfi	r2, r3, #24, #8
 8010188:	4610      	mov	r0, r2
 801018a:	b004      	add	sp, #16
 801018c:	bd10      	pop	{r4, pc}
 801018e:	bf00      	nop
 8010190:	0800ff6d 	.word	0x0800ff6d

08010194 <uxr_epoch_millis>:
 8010194:	b510      	push	{r4, lr}
 8010196:	4604      	mov	r4, r0
 8010198:	f001 fe0c 	bl	8011db4 <uxr_nanos>
 801019c:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 80101a0:	1ac0      	subs	r0, r0, r3
 80101a2:	4a04      	ldr	r2, [pc, #16]	@ (80101b4 <uxr_epoch_millis+0x20>)
 80101a4:	f04f 0300 	mov.w	r3, #0
 80101a8:	eb61 0104 	sbc.w	r1, r1, r4
 80101ac:	f7f0 fd0c 	bl	8000bc8 <__aeabi_ldivmod>
 80101b0:	bd10      	pop	{r4, pc}
 80101b2:	bf00      	nop
 80101b4:	000f4240 	.word	0x000f4240

080101b8 <uxr_epoch_nanos>:
 80101b8:	b510      	push	{r4, lr}
 80101ba:	4604      	mov	r4, r0
 80101bc:	f001 fdfa 	bl	8011db4 <uxr_nanos>
 80101c0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80101c4:	1ac0      	subs	r0, r0, r3
 80101c6:	eb61 0102 	sbc.w	r1, r1, r2
 80101ca:	bd10      	pop	{r4, pc}

080101cc <uxr_flash_output_streams>:
 80101cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101d0:	7e03      	ldrb	r3, [r0, #24]
 80101d2:	b084      	sub	sp, #16
 80101d4:	4604      	mov	r4, r0
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d035      	beq.n	8010246 <uxr_flash_output_streams+0x7a>
 80101da:	f04f 0900 	mov.w	r9, #0
 80101de:	4648      	mov	r0, r9
 80101e0:	f10d 0802 	add.w	r8, sp, #2
 80101e4:	af03      	add	r7, sp, #12
 80101e6:	ae02      	add	r6, sp, #8
 80101e8:	e006      	b.n	80101f8 <uxr_flash_output_streams+0x2c>
 80101ea:	7e23      	ldrb	r3, [r4, #24]
 80101ec:	f109 0901 	add.w	r9, r9, #1
 80101f0:	fa5f f089 	uxtb.w	r0, r9
 80101f4:	4283      	cmp	r3, r0
 80101f6:	d926      	bls.n	8010246 <uxr_flash_output_streams+0x7a>
 80101f8:	2201      	movs	r2, #1
 80101fa:	4611      	mov	r1, r2
 80101fc:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010200:	f001 fc40 	bl	8011a84 <uxr_stream_id>
 8010204:	3508      	adds	r5, #8
 8010206:	4684      	mov	ip, r0
 8010208:	4643      	mov	r3, r8
 801020a:	463a      	mov	r2, r7
 801020c:	4631      	mov	r1, r6
 801020e:	4628      	mov	r0, r5
 8010210:	f8cd c004 	str.w	ip, [sp, #4]
 8010214:	f007 fae8 	bl	80177e8 <uxr_prepare_best_effort_buffer_to_send>
 8010218:	2800      	cmp	r0, #0
 801021a:	d0e6      	beq.n	80101ea <uxr_flash_output_streams+0x1e>
 801021c:	9b02      	ldr	r3, [sp, #8]
 801021e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010222:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010226:	4620      	mov	r0, r4
 8010228:	f000 ff0c 	bl	8011044 <uxr_stamp_session_header>
 801022c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801022e:	9a03      	ldr	r2, [sp, #12]
 8010230:	685d      	ldr	r5, [r3, #4]
 8010232:	6818      	ldr	r0, [r3, #0]
 8010234:	9902      	ldr	r1, [sp, #8]
 8010236:	47a8      	blx	r5
 8010238:	f109 0901 	add.w	r9, r9, #1
 801023c:	7e23      	ldrb	r3, [r4, #24]
 801023e:	fa5f f089 	uxtb.w	r0, r9
 8010242:	4283      	cmp	r3, r0
 8010244:	d8d8      	bhi.n	80101f8 <uxr_flash_output_streams+0x2c>
 8010246:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801024a:	b38b      	cbz	r3, 80102b0 <uxr_flash_output_streams+0xe4>
 801024c:	f04f 0900 	mov.w	r9, #0
 8010250:	f10d 0802 	add.w	r8, sp, #2
 8010254:	af03      	add	r7, sp, #12
 8010256:	ae02      	add	r6, sp, #8
 8010258:	4648      	mov	r0, r9
 801025a:	2201      	movs	r2, #1
 801025c:	2102      	movs	r1, #2
 801025e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010262:	f001 fc0f 	bl	8011a84 <uxr_stream_id>
 8010266:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801026a:	3520      	adds	r5, #32
 801026c:	9001      	str	r0, [sp, #4]
 801026e:	e00d      	b.n	801028c <uxr_flash_output_streams+0xc0>
 8010270:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010274:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010278:	9b02      	ldr	r3, [sp, #8]
 801027a:	f000 fee3 	bl	8011044 <uxr_stamp_session_header>
 801027e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010280:	9a03      	ldr	r2, [sp, #12]
 8010282:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8010286:	9902      	ldr	r1, [sp, #8]
 8010288:	6818      	ldr	r0, [r3, #0]
 801028a:	47d0      	blx	sl
 801028c:	4643      	mov	r3, r8
 801028e:	463a      	mov	r2, r7
 8010290:	4631      	mov	r1, r6
 8010292:	4628      	mov	r0, r5
 8010294:	f007 fcc6 	bl	8017c24 <uxr_prepare_next_reliable_buffer_to_send>
 8010298:	4603      	mov	r3, r0
 801029a:	4620      	mov	r0, r4
 801029c:	2b00      	cmp	r3, #0
 801029e:	d1e7      	bne.n	8010270 <uxr_flash_output_streams+0xa4>
 80102a0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80102a4:	f109 0901 	add.w	r9, r9, #1
 80102a8:	fa5f f089 	uxtb.w	r0, r9
 80102ac:	4283      	cmp	r3, r0
 80102ae:	d8d4      	bhi.n	801025a <uxr_flash_output_streams+0x8e>
 80102b0:	b004      	add	sp, #16
 80102b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102b6:	bf00      	nop

080102b8 <read_submessage_info>:
 80102b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102bc:	460d      	mov	r5, r1
 80102be:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80102c2:	4669      	mov	r1, sp
 80102c4:	4607      	mov	r7, r0
 80102c6:	4628      	mov	r0, r5
 80102c8:	f002 fc44 	bl	8012b54 <uxr_deserialize_BaseObjectReply>
 80102cc:	a902      	add	r1, sp, #8
 80102ce:	4604      	mov	r4, r0
 80102d0:	4628      	mov	r0, r5
 80102d2:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80102d6:	f7fa faf9 	bl	800a8cc <ucdr_deserialize_bool>
 80102da:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80102de:	4004      	ands	r4, r0
 80102e0:	b2e4      	uxtb	r4, r4
 80102e2:	b95b      	cbnz	r3, 80102fc <read_submessage_info+0x44>
 80102e4:	a987      	add	r1, sp, #540	@ 0x21c
 80102e6:	4628      	mov	r0, r5
 80102e8:	f7fa faf0 	bl	800a8cc <ucdr_deserialize_bool>
 80102ec:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80102f0:	4606      	mov	r6, r0
 80102f2:	b94b      	cbnz	r3, 8010308 <read_submessage_info+0x50>
 80102f4:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80102f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102fc:	a903      	add	r1, sp, #12
 80102fe:	4628      	mov	r0, r5
 8010300:	f002 fad0 	bl	80128a4 <uxr_deserialize_ObjectVariant>
 8010304:	4004      	ands	r4, r0
 8010306:	e7ed      	b.n	80102e4 <read_submessage_info+0x2c>
 8010308:	a988      	add	r1, sp, #544	@ 0x220
 801030a:	4628      	mov	r0, r5
 801030c:	f7fa fb0c 	bl	800a928 <ucdr_deserialize_uint8_t>
 8010310:	4234      	tst	r4, r6
 8010312:	d0ef      	beq.n	80102f4 <read_submessage_info+0x3c>
 8010314:	2800      	cmp	r0, #0
 8010316:	d0ed      	beq.n	80102f4 <read_submessage_info+0x3c>
 8010318:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 801031c:	2b0d      	cmp	r3, #13
 801031e:	d1e9      	bne.n	80102f4 <read_submessage_info+0x3c>
 8010320:	a98a      	add	r1, sp, #552	@ 0x228
 8010322:	4628      	mov	r0, r5
 8010324:	f7fb f8a6 	bl	800b474 <ucdr_deserialize_int16_t>
 8010328:	b140      	cbz	r0, 801033c <read_submessage_info+0x84>
 801032a:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801032e:	2b00      	cmp	r3, #0
 8010330:	dd07      	ble.n	8010342 <read_submessage_info+0x8a>
 8010332:	f1b8 0f00 	cmp.w	r8, #0
 8010336:	bf14      	ite	ne
 8010338:	2001      	movne	r0, #1
 801033a:	2002      	moveq	r0, #2
 801033c:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8010340:	e7d8      	b.n	80102f4 <read_submessage_info+0x3c>
 8010342:	2000      	movs	r0, #0
 8010344:	e7fa      	b.n	801033c <read_submessage_info+0x84>
 8010346:	bf00      	nop

08010348 <read_submessage_list>:
 8010348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801034c:	b097      	sub	sp, #92	@ 0x5c
 801034e:	4ec1      	ldr	r6, [pc, #772]	@ (8010654 <read_submessage_list+0x30c>)
 8010350:	9209      	str	r2, [sp, #36]	@ 0x24
 8010352:	4604      	mov	r4, r0
 8010354:	460d      	mov	r5, r1
 8010356:	f04f 0801 	mov.w	r8, #1
 801035a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801035e:	aa0c      	add	r2, sp, #48	@ 0x30
 8010360:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010364:	4628      	mov	r0, r5
 8010366:	f001 fcdf 	bl	8011d28 <uxr_read_submessage_header>
 801036a:	2800      	cmp	r0, #0
 801036c:	f000 813e 	beq.w	80105ec <read_submessage_list+0x2a4>
 8010370:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8010374:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8010378:	3b02      	subs	r3, #2
 801037a:	2b0d      	cmp	r3, #13
 801037c:	d8ed      	bhi.n	801035a <read_submessage_list+0x12>
 801037e:	a101      	add	r1, pc, #4	@ (adr r1, 8010384 <read_submessage_list+0x3c>)
 8010380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010384:	080105e3 	.word	0x080105e3
 8010388:	0801035b 	.word	0x0801035b
 801038c:	080105d3 	.word	0x080105d3
 8010390:	08010571 	.word	0x08010571
 8010394:	08010567 	.word	0x08010567
 8010398:	0801035b 	.word	0x0801035b
 801039c:	0801035b 	.word	0x0801035b
 80103a0:	080104c7 	.word	0x080104c7
 80103a4:	08010457 	.word	0x08010457
 80103a8:	08010417 	.word	0x08010417
 80103ac:	0801035b 	.word	0x0801035b
 80103b0:	0801035b 	.word	0x0801035b
 80103b4:	0801035b 	.word	0x0801035b
 80103b8:	080103bd 	.word	0x080103bd
 80103bc:	a910      	add	r1, sp, #64	@ 0x40
 80103be:	4628      	mov	r0, r5
 80103c0:	f002 fdfa 	bl	8012fb8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80103c4:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 80103c8:	f1b9 0f00 	cmp.w	r9, #0
 80103cc:	f000 8116 	beq.w	80105fc <read_submessage_list+0x2b4>
 80103d0:	f001 fcf0 	bl	8011db4 <uxr_nanos>
 80103d4:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80103d6:	4602      	mov	r2, r0
 80103d8:	460b      	mov	r3, r1
 80103da:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80103dc:	2100      	movs	r1, #0
 80103de:	468c      	mov	ip, r1
 80103e0:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80103e4:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80103e8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80103ea:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80103ec:	468c      	mov	ip, r1
 80103ee:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80103f2:	46e2      	mov	sl, ip
 80103f4:	46bc      	mov	ip, r7
 80103f6:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 80103fa:	fbc0 7106 	smlal	r7, r1, r0, r6
 80103fe:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8010402:	e9cd 7100 	strd	r7, r1, [sp]
 8010406:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 801040a:	9106      	str	r1, [sp, #24]
 801040c:	4620      	mov	r0, r4
 801040e:	47c8      	blx	r9
 8010410:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8010414:	e7a1      	b.n	801035a <read_submessage_list+0x12>
 8010416:	a910      	add	r1, sp, #64	@ 0x40
 8010418:	4628      	mov	r0, r5
 801041a:	f002 fdad 	bl	8012f78 <uxr_deserialize_HEARTBEAT_Payload>
 801041e:	2100      	movs	r1, #0
 8010420:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010424:	f001 fb58 	bl	8011ad8 <uxr_stream_id_from_raw>
 8010428:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801042c:	900f      	str	r0, [sp, #60]	@ 0x3c
 801042e:	4639      	mov	r1, r7
 8010430:	f104 0008 	add.w	r0, r4, #8
 8010434:	f001 fc3e 	bl	8011cb4 <uxr_get_input_reliable_stream>
 8010438:	2800      	cmp	r0, #0
 801043a:	d08e      	beq.n	801035a <read_submessage_list+0x12>
 801043c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8010440:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010444:	f007 f93e 	bl	80176c4 <uxr_process_heartbeat>
 8010448:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 801044c:	463a      	mov	r2, r7
 801044e:	4620      	mov	r0, r4
 8010450:	f7ff fde4 	bl	801001c <write_submessage_acknack.isra.0>
 8010454:	e781      	b.n	801035a <read_submessage_list+0x12>
 8010456:	a910      	add	r1, sp, #64	@ 0x40
 8010458:	4628      	mov	r0, r5
 801045a:	f002 fd65 	bl	8012f28 <uxr_deserialize_ACKNACK_Payload>
 801045e:	2100      	movs	r1, #0
 8010460:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010464:	f001 fb38 	bl	8011ad8 <uxr_stream_id_from_raw>
 8010468:	900d      	str	r0, [sp, #52]	@ 0x34
 801046a:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801046e:	f104 0008 	add.w	r0, r4, #8
 8010472:	f001 fc0b 	bl	8011c8c <uxr_get_output_reliable_stream>
 8010476:	4607      	mov	r7, r0
 8010478:	2800      	cmp	r0, #0
 801047a:	f43f af6e 	beq.w	801035a <read_submessage_list+0x12>
 801047e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8010482:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8010486:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801048a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801048e:	b289      	uxth	r1, r1
 8010490:	f007 fc72 	bl	8017d78 <uxr_process_acknack>
 8010494:	4638      	mov	r0, r7
 8010496:	f007 fc2f 	bl	8017cf8 <uxr_begin_output_nack_buffer_it>
 801049a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801049e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80104a2:	e006      	b.n	80104b2 <read_submessage_list+0x16a>
 80104a4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80104a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80104a8:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80104ac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80104ae:	6818      	ldr	r0, [r3, #0]
 80104b0:	47c8      	blx	r9
 80104b2:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80104b6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80104b8:	4651      	mov	r1, sl
 80104ba:	4638      	mov	r0, r7
 80104bc:	f007 fc1e 	bl	8017cfc <uxr_next_reliable_nack_buffer_to_send>
 80104c0:	2800      	cmp	r0, #0
 80104c2:	d1ef      	bne.n	80104a4 <read_submessage_list+0x15c>
 80104c4:	e749      	b.n	801035a <read_submessage_list+0x12>
 80104c6:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80104ca:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80104ce:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80104d2:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80104d6:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80104da:	4651      	mov	r1, sl
 80104dc:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80104e0:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 80104e4:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80104e8:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 80104ec:	4628      	mov	r0, r5
 80104ee:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80104f2:	f002 fa79 	bl	80129e8 <uxr_deserialize_BaseObjectRequest>
 80104f6:	4650      	mov	r0, sl
 80104f8:	a90f      	add	r1, sp, #60	@ 0x3c
 80104fa:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80104fe:	f000 fe1d 	bl	801113c <uxr_parse_base_object_request>
 8010502:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8010506:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010508:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 801050c:	9110      	str	r1, [sp, #64]	@ 0x40
 801050e:	3f04      	subs	r7, #4
 8010510:	f009 090e 	and.w	r9, r9, #14
 8010514:	b2bf      	uxth	r7, r7
 8010516:	f1bb 0f00 	cmp.w	fp, #0
 801051a:	d006      	beq.n	801052a <read_submessage_list+0x1e2>
 801051c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010520:	9300      	str	r3, [sp, #0]
 8010522:	4652      	mov	r2, sl
 8010524:	2300      	movs	r3, #0
 8010526:	4620      	mov	r0, r4
 8010528:	47d8      	blx	fp
 801052a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801052c:	b16a      	cbz	r2, 801054a <read_submessage_list+0x202>
 801052e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010530:	2100      	movs	r1, #0
 8010532:	3802      	subs	r0, #2
 8010534:	e002      	b.n	801053c <read_submessage_list+0x1f4>
 8010536:	3101      	adds	r1, #1
 8010538:	4291      	cmp	r1, r2
 801053a:	d006      	beq.n	801054a <read_submessage_list+0x202>
 801053c:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010540:	4553      	cmp	r3, sl
 8010542:	d1f8      	bne.n	8010536 <read_submessage_list+0x1ee>
 8010544:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010546:	2200      	movs	r2, #0
 8010548:	545a      	strb	r2, [r3, r1]
 801054a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801054e:	9102      	str	r1, [sp, #8]
 8010550:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010552:	9101      	str	r1, [sp, #4]
 8010554:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010556:	9100      	str	r1, [sp, #0]
 8010558:	464b      	mov	r3, r9
 801055a:	463a      	mov	r2, r7
 801055c:	4629      	mov	r1, r5
 801055e:	4620      	mov	r0, r4
 8010560:	f7ff fc3a 	bl	800fdd8 <read_submessage_format>
 8010564:	e6f9      	b.n	801035a <read_submessage_list+0x12>
 8010566:	4629      	mov	r1, r5
 8010568:	4620      	mov	r0, r4
 801056a:	f7ff fea5 	bl	80102b8 <read_submessage_info>
 801056e:	e6f4      	b.n	801035a <read_submessage_list+0x12>
 8010570:	2a00      	cmp	r2, #0
 8010572:	d03e      	beq.n	80105f2 <read_submessage_list+0x2aa>
 8010574:	a910      	add	r1, sp, #64	@ 0x40
 8010576:	4628      	mov	r0, r5
 8010578:	f002 fc32 	bl	8012de0 <uxr_deserialize_STATUS_Payload>
 801057c:	a90e      	add	r1, sp, #56	@ 0x38
 801057e:	aa0d      	add	r2, sp, #52	@ 0x34
 8010580:	a810      	add	r0, sp, #64	@ 0x40
 8010582:	f000 fddb 	bl	801113c <uxr_parse_base_object_request>
 8010586:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 801058a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801058c:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8010590:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8010594:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010596:	f1ba 0f00 	cmp.w	sl, #0
 801059a:	d006      	beq.n	80105aa <read_submessage_list+0x262>
 801059c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80105a0:	9300      	str	r3, [sp, #0]
 80105a2:	463a      	mov	r2, r7
 80105a4:	464b      	mov	r3, r9
 80105a6:	4620      	mov	r0, r4
 80105a8:	47d0      	blx	sl
 80105aa:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80105ac:	2a00      	cmp	r2, #0
 80105ae:	f43f aed4 	beq.w	801035a <read_submessage_list+0x12>
 80105b2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80105b4:	2100      	movs	r1, #0
 80105b6:	3802      	subs	r0, #2
 80105b8:	e003      	b.n	80105c2 <read_submessage_list+0x27a>
 80105ba:	3101      	adds	r1, #1
 80105bc:	4291      	cmp	r1, r2
 80105be:	f43f aecc 	beq.w	801035a <read_submessage_list+0x12>
 80105c2:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80105c6:	42bb      	cmp	r3, r7
 80105c8:	d1f7      	bne.n	80105ba <read_submessage_list+0x272>
 80105ca:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80105cc:	f803 9001 	strb.w	r9, [r3, r1]
 80105d0:	e6c3      	b.n	801035a <read_submessage_list+0x12>
 80105d2:	2a00      	cmp	r2, #0
 80105d4:	f47f aec1 	bne.w	801035a <read_submessage_list+0x12>
 80105d8:	4629      	mov	r1, r5
 80105da:	4620      	mov	r0, r4
 80105dc:	f000 fcf4 	bl	8010fc8 <uxr_read_create_session_status>
 80105e0:	e6bb      	b.n	801035a <read_submessage_list+0x12>
 80105e2:	4629      	mov	r1, r5
 80105e4:	4620      	mov	r0, r4
 80105e6:	f7ff fce3 	bl	800ffb0 <read_submessage_get_info>
 80105ea:	e6b6      	b.n	801035a <read_submessage_list+0x12>
 80105ec:	b017      	add	sp, #92	@ 0x5c
 80105ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105f2:	4629      	mov	r1, r5
 80105f4:	4620      	mov	r0, r4
 80105f6:	f000 fcf3 	bl	8010fe0 <uxr_read_delete_session_status>
 80105fa:	e6ae      	b.n	801035a <read_submessage_list+0x12>
 80105fc:	f001 fbda 	bl	8011db4 <uxr_nanos>
 8010600:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010602:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010604:	464f      	mov	r7, r9
 8010606:	fbc3 2706 	smlal	r2, r7, r3, r6
 801060a:	1812      	adds	r2, r2, r0
 801060c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801060e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010610:	eb47 0101 	adc.w	r1, r7, r1
 8010614:	464f      	mov	r7, r9
 8010616:	fbc3 0706 	smlal	r0, r7, r3, r6
 801061a:	463b      	mov	r3, r7
 801061c:	4684      	mov	ip, r0
 801061e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8010622:	fbc7 0906 	smlal	r0, r9, r7, r6
 8010626:	eb1c 0c00 	adds.w	ip, ip, r0
 801062a:	464f      	mov	r7, r9
 801062c:	eb43 0307 	adc.w	r3, r3, r7
 8010630:	ebb2 0c0c 	subs.w	ip, r2, ip
 8010634:	eb61 0303 	sbc.w	r3, r1, r3
 8010638:	0fda      	lsrs	r2, r3, #31
 801063a:	eb12 020c 	adds.w	r2, r2, ip
 801063e:	f143 0300 	adc.w	r3, r3, #0
 8010642:	0852      	lsrs	r2, r2, #1
 8010644:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8010648:	105b      	asrs	r3, r3, #1
 801064a:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 801064e:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8010652:	e6dd      	b.n	8010410 <read_submessage_list+0xc8>
 8010654:	3b9aca00 	.word	0x3b9aca00

08010658 <listen_message_reliably>:
 8010658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801065c:	1e0b      	subs	r3, r1, #0
 801065e:	b09d      	sub	sp, #116	@ 0x74
 8010660:	bfb8      	it	lt
 8010662:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8010666:	4680      	mov	r8, r0
 8010668:	9305      	str	r3, [sp, #20]
 801066a:	f001 fb89 	bl	8011d80 <uxr_millis>
 801066e:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8010672:	4681      	mov	r9, r0
 8010674:	2a00      	cmp	r2, #0
 8010676:	f000 80a1 	beq.w	80107bc <listen_message_reliably+0x164>
 801067a:	2600      	movs	r6, #0
 801067c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010680:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010684:	9303      	str	r3, [sp, #12]
 8010686:	4630      	mov	r0, r6
 8010688:	460f      	mov	r7, r1
 801068a:	e00f      	b.n	80106ac <listen_message_reliably+0x54>
 801068c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8010690:	9903      	ldr	r1, [sp, #12]
 8010692:	455a      	cmp	r2, fp
 8010694:	f106 0601 	add.w	r6, r6, #1
 8010698:	eb73 0101 	sbcs.w	r1, r3, r1
 801069c:	b2f0      	uxtb	r0, r6
 801069e:	da01      	bge.n	80106a4 <listen_message_reliably+0x4c>
 80106a0:	4693      	mov	fp, r2
 80106a2:	9303      	str	r3, [sp, #12]
 80106a4:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80106a8:	4283      	cmp	r3, r0
 80106aa:	d960      	bls.n	801076e <listen_message_reliably+0x116>
 80106ac:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80106b0:	2102      	movs	r1, #2
 80106b2:	2201      	movs	r2, #1
 80106b4:	f001 f9e6 	bl	8011a84 <uxr_stream_id>
 80106b8:	00e4      	lsls	r4, r4, #3
 80106ba:	f104 0520 	add.w	r5, r4, #32
 80106be:	4445      	add	r5, r8
 80106c0:	4601      	mov	r1, r0
 80106c2:	463b      	mov	r3, r7
 80106c4:	464a      	mov	r2, r9
 80106c6:	4628      	mov	r0, r5
 80106c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80106ca:	f007 faeb 	bl	8017ca4 <uxr_update_output_stream_heartbeat_timestamp>
 80106ce:	eb08 0304 	add.w	r3, r8, r4
 80106d2:	2800      	cmp	r0, #0
 80106d4:	d0da      	beq.n	801068c <listen_message_reliably+0x34>
 80106d6:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80106da:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80106de:	9304      	str	r3, [sp, #16]
 80106e0:	4640      	mov	r0, r8
 80106e2:	f000 fd05 	bl	80110f0 <uxr_session_header_offset>
 80106e6:	3501      	adds	r5, #1
 80106e8:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80106ec:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80106f0:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80106f4:	2300      	movs	r3, #0
 80106f6:	2211      	movs	r2, #17
 80106f8:	9000      	str	r0, [sp, #0]
 80106fa:	a90c      	add	r1, sp, #48	@ 0x30
 80106fc:	4650      	mov	r0, sl
 80106fe:	f7fb fbcd 	bl	800be9c <ucdr_init_buffer_origin_offset>
 8010702:	2300      	movs	r3, #0
 8010704:	2205      	movs	r2, #5
 8010706:	210b      	movs	r1, #11
 8010708:	4650      	mov	r0, sl
 801070a:	f001 faf3 	bl	8011cf4 <uxr_buffer_submessage_header>
 801070e:	8968      	ldrh	r0, [r5, #10]
 8010710:	2101      	movs	r1, #1
 8010712:	f007 fb89 	bl	8017e28 <uxr_seq_num_add>
 8010716:	892b      	ldrh	r3, [r5, #8]
 8010718:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801071c:	4602      	mov	r2, r0
 801071e:	9b04      	ldr	r3, [sp, #16]
 8010720:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010724:	a90a      	add	r1, sp, #40	@ 0x28
 8010726:	4650      	mov	r0, sl
 8010728:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801072c:	f002 fc10 	bl	8012f50 <uxr_serialize_HEARTBEAT_Payload>
 8010730:	2200      	movs	r2, #0
 8010732:	4611      	mov	r1, r2
 8010734:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010736:	4640      	mov	r0, r8
 8010738:	f000 fc84 	bl	8011044 <uxr_stamp_session_header>
 801073c:	4650      	mov	r0, sl
 801073e:	f7fb fbeb 	bl	800bf18 <ucdr_buffer_length>
 8010742:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8010746:	4602      	mov	r2, r0
 8010748:	a90c      	add	r1, sp, #48	@ 0x30
 801074a:	e9d3 0500 	ldrd	r0, r5, [r3]
 801074e:	4444      	add	r4, r8
 8010750:	47a8      	blx	r5
 8010752:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8010756:	9903      	ldr	r1, [sp, #12]
 8010758:	455a      	cmp	r2, fp
 801075a:	f106 0601 	add.w	r6, r6, #1
 801075e:	eb73 0101 	sbcs.w	r1, r3, r1
 8010762:	b2f0      	uxtb	r0, r6
 8010764:	db9c      	blt.n	80106a0 <listen_message_reliably+0x48>
 8010766:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801076a:	4283      	cmp	r3, r0
 801076c:	d89e      	bhi.n	80106ac <listen_message_reliably+0x54>
 801076e:	9a03      	ldr	r2, [sp, #12]
 8010770:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010774:	429a      	cmp	r2, r3
 8010776:	bf08      	it	eq
 8010778:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 801077c:	d01e      	beq.n	80107bc <listen_message_reliably+0x164>
 801077e:	ebab 0309 	sub.w	r3, fp, r9
 8010782:	9905      	ldr	r1, [sp, #20]
 8010784:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8010788:	2b00      	cmp	r3, #0
 801078a:	bf08      	it	eq
 801078c:	2301      	moveq	r3, #1
 801078e:	4299      	cmp	r1, r3
 8010790:	bfa8      	it	ge
 8010792:	4619      	movge	r1, r3
 8010794:	6894      	ldr	r4, [r2, #8]
 8010796:	6810      	ldr	r0, [r2, #0]
 8010798:	4689      	mov	r9, r1
 801079a:	460b      	mov	r3, r1
 801079c:	aa08      	add	r2, sp, #32
 801079e:	a907      	add	r1, sp, #28
 80107a0:	47a0      	blx	r4
 80107a2:	b968      	cbnz	r0, 80107c0 <listen_message_reliably+0x168>
 80107a4:	9b05      	ldr	r3, [sp, #20]
 80107a6:	eba3 0309 	sub.w	r3, r3, r9
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	9305      	str	r3, [sp, #20]
 80107ae:	f73f af5c 	bgt.w	801066a <listen_message_reliably+0x12>
 80107b2:	4604      	mov	r4, r0
 80107b4:	4620      	mov	r0, r4
 80107b6:	b01d      	add	sp, #116	@ 0x74
 80107b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107bc:	9b05      	ldr	r3, [sp, #20]
 80107be:	e7e0      	b.n	8010782 <listen_message_reliably+0x12a>
 80107c0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80107c4:	4604      	mov	r4, r0
 80107c6:	a80c      	add	r0, sp, #48	@ 0x30
 80107c8:	f7fb fb7a 	bl	800bec0 <ucdr_init_buffer>
 80107cc:	2500      	movs	r5, #0
 80107ce:	f10d 031a 	add.w	r3, sp, #26
 80107d2:	aa06      	add	r2, sp, #24
 80107d4:	a90c      	add	r1, sp, #48	@ 0x30
 80107d6:	4640      	mov	r0, r8
 80107d8:	f88d 5018 	strb.w	r5, [sp, #24]
 80107dc:	f000 fc46 	bl	801106c <uxr_read_session_header>
 80107e0:	b918      	cbnz	r0, 80107ea <listen_message_reliably+0x192>
 80107e2:	4620      	mov	r0, r4
 80107e4:	b01d      	add	sp, #116	@ 0x74
 80107e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ea:	4629      	mov	r1, r5
 80107ec:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80107f0:	f001 f972 	bl	8011ad8 <uxr_stream_id_from_raw>
 80107f4:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80107f8:	2d01      	cmp	r5, #1
 80107fa:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80107fe:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8010802:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010806:	d04b      	beq.n	80108a0 <listen_message_reliably+0x248>
 8010808:	2d02      	cmp	r5, #2
 801080a:	d00f      	beq.n	801082c <listen_message_reliably+0x1d4>
 801080c:	2d00      	cmp	r5, #0
 801080e:	d1e8      	bne.n	80107e2 <listen_message_reliably+0x18a>
 8010810:	4629      	mov	r1, r5
 8010812:	4628      	mov	r0, r5
 8010814:	f001 f960 	bl	8011ad8 <uxr_stream_id_from_raw>
 8010818:	a90c      	add	r1, sp, #48	@ 0x30
 801081a:	4602      	mov	r2, r0
 801081c:	4640      	mov	r0, r8
 801081e:	920a      	str	r2, [sp, #40]	@ 0x28
 8010820:	f7ff fd92 	bl	8010348 <read_submessage_list>
 8010824:	4620      	mov	r0, r4
 8010826:	b01d      	add	sp, #116	@ 0x74
 8010828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801082c:	4631      	mov	r1, r6
 801082e:	f108 0008 	add.w	r0, r8, #8
 8010832:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8010836:	f001 fa3d 	bl	8011cb4 <uxr_get_input_reliable_stream>
 801083a:	4607      	mov	r7, r0
 801083c:	b338      	cbz	r0, 801088e <listen_message_reliably+0x236>
 801083e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010840:	9203      	str	r2, [sp, #12]
 8010842:	a80c      	add	r0, sp, #48	@ 0x30
 8010844:	f7fb fb6c 	bl	800bf20 <ucdr_buffer_remaining>
 8010848:	4603      	mov	r3, r0
 801084a:	f10d 0019 	add.w	r0, sp, #25
 801084e:	9000      	str	r0, [sp, #0]
 8010850:	9a03      	ldr	r2, [sp, #12]
 8010852:	4651      	mov	r1, sl
 8010854:	4638      	mov	r0, r7
 8010856:	f006 fe3b 	bl	80174d0 <uxr_receive_reliable_message>
 801085a:	b1c0      	cbz	r0, 801088e <listen_message_reliably+0x236>
 801085c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010860:	b393      	cbz	r3, 80108c8 <listen_message_reliably+0x270>
 8010862:	ad14      	add	r5, sp, #80	@ 0x50
 8010864:	f04f 0a02 	mov.w	sl, #2
 8010868:	e00a      	b.n	8010880 <listen_message_reliably+0x228>
 801086a:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 801086e:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8010872:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8010876:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010878:	4629      	mov	r1, r5
 801087a:	4640      	mov	r0, r8
 801087c:	f7ff fd64 	bl	8010348 <read_submessage_list>
 8010880:	2204      	movs	r2, #4
 8010882:	4629      	mov	r1, r5
 8010884:	4638      	mov	r0, r7
 8010886:	f006 fea3 	bl	80175d0 <uxr_next_input_reliable_buffer_available>
 801088a:	2800      	cmp	r0, #0
 801088c:	d1ed      	bne.n	801086a <listen_message_reliably+0x212>
 801088e:	4640      	mov	r0, r8
 8010890:	4632      	mov	r2, r6
 8010892:	4649      	mov	r1, r9
 8010894:	f7ff fbc2 	bl	801001c <write_submessage_acknack.isra.0>
 8010898:	4620      	mov	r0, r4
 801089a:	b01d      	add	sp, #116	@ 0x74
 801089c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a0:	4631      	mov	r1, r6
 80108a2:	f108 0008 	add.w	r0, r8, #8
 80108a6:	f001 f9fb 	bl	8011ca0 <uxr_get_input_best_effort_stream>
 80108aa:	2800      	cmp	r0, #0
 80108ac:	d099      	beq.n	80107e2 <listen_message_reliably+0x18a>
 80108ae:	4651      	mov	r1, sl
 80108b0:	f006 fd7a 	bl	80173a8 <uxr_receive_best_effort_message>
 80108b4:	2800      	cmp	r0, #0
 80108b6:	d094      	beq.n	80107e2 <listen_message_reliably+0x18a>
 80108b8:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80108bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80108be:	a90c      	add	r1, sp, #48	@ 0x30
 80108c0:	4640      	mov	r0, r8
 80108c2:	f7ff fd41 	bl	8010348 <read_submessage_list>
 80108c6:	e78c      	b.n	80107e2 <listen_message_reliably+0x18a>
 80108c8:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80108cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80108ce:	a90c      	add	r1, sp, #48	@ 0x30
 80108d0:	4640      	mov	r0, r8
 80108d2:	f7ff fd39 	bl	8010348 <read_submessage_list>
 80108d6:	e7c4      	b.n	8010862 <listen_message_reliably+0x20a>

080108d8 <uxr_run_session_timeout>:
 80108d8:	b570      	push	{r4, r5, r6, lr}
 80108da:	4604      	mov	r4, r0
 80108dc:	460d      	mov	r5, r1
 80108de:	f001 fa4f 	bl	8011d80 <uxr_millis>
 80108e2:	4606      	mov	r6, r0
 80108e4:	4620      	mov	r0, r4
 80108e6:	f7ff fc71 	bl	80101cc <uxr_flash_output_streams>
 80108ea:	4629      	mov	r1, r5
 80108ec:	4620      	mov	r0, r4
 80108ee:	f7ff feb3 	bl	8010658 <listen_message_reliably>
 80108f2:	f001 fa45 	bl	8011d80 <uxr_millis>
 80108f6:	1b83      	subs	r3, r0, r6
 80108f8:	1ae9      	subs	r1, r5, r3
 80108fa:	2900      	cmp	r1, #0
 80108fc:	dcf6      	bgt.n	80108ec <uxr_run_session_timeout+0x14>
 80108fe:	f104 0008 	add.w	r0, r4, #8
 8010902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010906:	f001 b9df 	b.w	8011cc8 <uxr_output_streams_confirmed>
 801090a:	bf00      	nop

0801090c <uxr_run_session_until_data>:
 801090c:	b570      	push	{r4, r5, r6, lr}
 801090e:	4604      	mov	r4, r0
 8010910:	460d      	mov	r5, r1
 8010912:	f001 fa35 	bl	8011d80 <uxr_millis>
 8010916:	4606      	mov	r6, r0
 8010918:	4620      	mov	r0, r4
 801091a:	f7ff fc57 	bl	80101cc <uxr_flash_output_streams>
 801091e:	2300      	movs	r3, #0
 8010920:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010924:	4629      	mov	r1, r5
 8010926:	e005      	b.n	8010934 <uxr_run_session_until_data+0x28>
 8010928:	f001 fa2a 	bl	8011d80 <uxr_millis>
 801092c:	1b83      	subs	r3, r0, r6
 801092e:	1ae9      	subs	r1, r5, r3
 8010930:	2900      	cmp	r1, #0
 8010932:	dd07      	ble.n	8010944 <uxr_run_session_until_data+0x38>
 8010934:	4620      	mov	r0, r4
 8010936:	f7ff fe8f 	bl	8010658 <listen_message_reliably>
 801093a:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801093e:	2800      	cmp	r0, #0
 8010940:	d0f2      	beq.n	8010928 <uxr_run_session_until_data+0x1c>
 8010942:	bd70      	pop	{r4, r5, r6, pc}
 8010944:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010948:	bd70      	pop	{r4, r5, r6, pc}
 801094a:	bf00      	nop

0801094c <uxr_run_session_until_confirm_delivery>:
 801094c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010950:	4606      	mov	r6, r0
 8010952:	460d      	mov	r5, r1
 8010954:	f001 fa14 	bl	8011d80 <uxr_millis>
 8010958:	4607      	mov	r7, r0
 801095a:	4630      	mov	r0, r6
 801095c:	f7ff fc36 	bl	80101cc <uxr_flash_output_streams>
 8010960:	2d00      	cmp	r5, #0
 8010962:	f106 0808 	add.w	r8, r6, #8
 8010966:	bfa8      	it	ge
 8010968:	462c      	movge	r4, r5
 801096a:	da07      	bge.n	801097c <uxr_run_session_until_confirm_delivery+0x30>
 801096c:	e00e      	b.n	801098c <uxr_run_session_until_confirm_delivery+0x40>
 801096e:	f7ff fe73 	bl	8010658 <listen_message_reliably>
 8010972:	f001 fa05 	bl	8011d80 <uxr_millis>
 8010976:	1bc3      	subs	r3, r0, r7
 8010978:	1aec      	subs	r4, r5, r3
 801097a:	d407      	bmi.n	801098c <uxr_run_session_until_confirm_delivery+0x40>
 801097c:	4640      	mov	r0, r8
 801097e:	f001 f9a3 	bl	8011cc8 <uxr_output_streams_confirmed>
 8010982:	4603      	mov	r3, r0
 8010984:	4621      	mov	r1, r4
 8010986:	4630      	mov	r0, r6
 8010988:	2b00      	cmp	r3, #0
 801098a:	d0f0      	beq.n	801096e <uxr_run_session_until_confirm_delivery+0x22>
 801098c:	4640      	mov	r0, r8
 801098e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010992:	f001 b999 	b.w	8011cc8 <uxr_output_streams_confirmed>
 8010996:	bf00      	nop

08010998 <uxr_run_session_until_all_status>:
 8010998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801099c:	9c08      	ldr	r4, [sp, #32]
 801099e:	4606      	mov	r6, r0
 80109a0:	460f      	mov	r7, r1
 80109a2:	4691      	mov	r9, r2
 80109a4:	461d      	mov	r5, r3
 80109a6:	f7ff fc11 	bl	80101cc <uxr_flash_output_streams>
 80109aa:	b124      	cbz	r4, 80109b6 <uxr_run_session_until_all_status+0x1e>
 80109ac:	4622      	mov	r2, r4
 80109ae:	21ff      	movs	r1, #255	@ 0xff
 80109b0:	4628      	mov	r0, r5
 80109b2:	f008 fb51 	bl	8019058 <memset>
 80109b6:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 80109ba:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80109bc:	f001 f9e0 	bl	8011d80 <uxr_millis>
 80109c0:	3d01      	subs	r5, #1
 80109c2:	f1a9 0902 	sub.w	r9, r9, #2
 80109c6:	4680      	mov	r8, r0
 80109c8:	4639      	mov	r1, r7
 80109ca:	4630      	mov	r0, r6
 80109cc:	f7ff fe44 	bl	8010658 <listen_message_reliably>
 80109d0:	f001 f9d6 	bl	8011d80 <uxr_millis>
 80109d4:	eba0 0008 	sub.w	r0, r0, r8
 80109d8:	1a39      	subs	r1, r7, r0
 80109da:	b344      	cbz	r4, 8010a2e <uxr_run_session_until_all_status+0x96>
 80109dc:	4628      	mov	r0, r5
 80109de:	46ac      	mov	ip, r5
 80109e0:	2301      	movs	r3, #1
 80109e2:	e002      	b.n	80109ea <uxr_run_session_until_all_status+0x52>
 80109e4:	42a3      	cmp	r3, r4
 80109e6:	d20d      	bcs.n	8010a04 <uxr_run_session_until_all_status+0x6c>
 80109e8:	3301      	adds	r3, #1
 80109ea:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80109ee:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80109f2:	d1f7      	bne.n	80109e4 <uxr_run_session_until_all_status+0x4c>
 80109f4:	42a3      	cmp	r3, r4
 80109f6:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 80109fa:	d213      	bcs.n	8010a24 <uxr_run_session_until_all_status+0x8c>
 80109fc:	2a00      	cmp	r2, #0
 80109fe:	d0f3      	beq.n	80109e8 <uxr_run_session_until_all_status+0x50>
 8010a00:	2900      	cmp	r1, #0
 8010a02:	dce2      	bgt.n	80109ca <uxr_run_session_until_all_status+0x32>
 8010a04:	2300      	movs	r3, #0
 8010a06:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8010a08:	442c      	add	r4, r5
 8010a0a:	e001      	b.n	8010a10 <uxr_run_session_until_all_status+0x78>
 8010a0c:	2b01      	cmp	r3, #1
 8010a0e:	d812      	bhi.n	8010a36 <uxr_run_session_until_all_status+0x9e>
 8010a10:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010a14:	4284      	cmp	r4, r0
 8010a16:	d1f9      	bne.n	8010a0c <uxr_run_session_until_all_status+0x74>
 8010a18:	2b01      	cmp	r3, #1
 8010a1a:	bf8c      	ite	hi
 8010a1c:	2000      	movhi	r0, #0
 8010a1e:	2001      	movls	r0, #1
 8010a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a24:	2900      	cmp	r1, #0
 8010a26:	dded      	ble.n	8010a04 <uxr_run_session_until_all_status+0x6c>
 8010a28:	2a00      	cmp	r2, #0
 8010a2a:	d1ce      	bne.n	80109ca <uxr_run_session_until_all_status+0x32>
 8010a2c:	e7ea      	b.n	8010a04 <uxr_run_session_until_all_status+0x6c>
 8010a2e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010a30:	2001      	movs	r0, #1
 8010a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a36:	2000      	movs	r0, #0
 8010a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a3c:	0000      	movs	r0, r0
	...

08010a40 <uxr_sync_session>:
 8010a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a42:	b093      	sub	sp, #76	@ 0x4c
 8010a44:	4604      	mov	r4, r0
 8010a46:	460d      	mov	r5, r1
 8010a48:	f000 fb52 	bl	80110f0 <uxr_session_header_offset>
 8010a4c:	2214      	movs	r2, #20
 8010a4e:	eb0d 0102 	add.w	r1, sp, r2
 8010a52:	9000      	str	r0, [sp, #0]
 8010a54:	2300      	movs	r3, #0
 8010a56:	a80a      	add	r0, sp, #40	@ 0x28
 8010a58:	f7fb fa20 	bl	800be9c <ucdr_init_buffer_origin_offset>
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	2208      	movs	r2, #8
 8010a60:	210e      	movs	r1, #14
 8010a62:	a80a      	add	r0, sp, #40	@ 0x28
 8010a64:	f001 f946 	bl	8011cf4 <uxr_buffer_submessage_header>
 8010a68:	f001 f9a4 	bl	8011db4 <uxr_nanos>
 8010a6c:	a31c      	add	r3, pc, #112	@ (adr r3, 8010ae0 <uxr_sync_session+0xa0>)
 8010a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a72:	460e      	mov	r6, r1
 8010a74:	4607      	mov	r7, r0
 8010a76:	f7f0 f8a7 	bl	8000bc8 <__aeabi_ldivmod>
 8010a7a:	4631      	mov	r1, r6
 8010a7c:	9003      	str	r0, [sp, #12]
 8010a7e:	a318      	add	r3, pc, #96	@ (adr r3, 8010ae0 <uxr_sync_session+0xa0>)
 8010a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a84:	4638      	mov	r0, r7
 8010a86:	f7f0 f89f 	bl	8000bc8 <__aeabi_ldivmod>
 8010a8a:	a903      	add	r1, sp, #12
 8010a8c:	a80a      	add	r0, sp, #40	@ 0x28
 8010a8e:	9204      	str	r2, [sp, #16]
 8010a90:	f002 fa84 	bl	8012f9c <uxr_serialize_TIMESTAMP_Payload>
 8010a94:	2200      	movs	r2, #0
 8010a96:	4611      	mov	r1, r2
 8010a98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a9a:	4620      	mov	r0, r4
 8010a9c:	f000 fad2 	bl	8011044 <uxr_stamp_session_header>
 8010aa0:	a80a      	add	r0, sp, #40	@ 0x28
 8010aa2:	f7fb fa39 	bl	800bf18 <ucdr_buffer_length>
 8010aa6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	a905      	add	r1, sp, #20
 8010aac:	e9d3 0600 	ldrd	r0, r6, [r3]
 8010ab0:	47b0      	blx	r6
 8010ab2:	f001 f965 	bl	8011d80 <uxr_millis>
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	4606      	mov	r6, r0
 8010aba:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8010abe:	4629      	mov	r1, r5
 8010ac0:	e000      	b.n	8010ac4 <uxr_sync_session+0x84>
 8010ac2:	b950      	cbnz	r0, 8010ada <uxr_sync_session+0x9a>
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	f7ff fdc7 	bl	8010658 <listen_message_reliably>
 8010aca:	f001 f959 	bl	8011d80 <uxr_millis>
 8010ace:	1b83      	subs	r3, r0, r6
 8010ad0:	1ae9      	subs	r1, r5, r3
 8010ad2:	2900      	cmp	r1, #0
 8010ad4:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8010ad8:	dcf3      	bgt.n	8010ac2 <uxr_sync_session+0x82>
 8010ada:	b013      	add	sp, #76	@ 0x4c
 8010adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ade:	bf00      	nop
 8010ae0:	3b9aca00 	.word	0x3b9aca00
 8010ae4:	00000000 	.word	0x00000000

08010ae8 <wait_session_status>:
 8010ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aec:	4604      	mov	r4, r0
 8010aee:	b09d      	sub	sp, #116	@ 0x74
 8010af0:	20ff      	movs	r0, #255	@ 0xff
 8010af2:	7160      	strb	r0, [r4, #5]
 8010af4:	9303      	str	r3, [sp, #12]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	f000 80b6 	beq.w	8010c68 <wait_session_status+0x180>
 8010afc:	468a      	mov	sl, r1
 8010afe:	4691      	mov	r9, r2
 8010b00:	f04f 0b00 	mov.w	fp, #0
 8010b04:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010b06:	464a      	mov	r2, r9
 8010b08:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010b0c:	4651      	mov	r1, sl
 8010b0e:	47a8      	blx	r5
 8010b10:	f001 f936 	bl	8011d80 <uxr_millis>
 8010b14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010b18:	4605      	mov	r5, r0
 8010b1a:	e009      	b.n	8010b30 <wait_session_status+0x48>
 8010b1c:	f001 f930 	bl	8011d80 <uxr_millis>
 8010b20:	1b40      	subs	r0, r0, r5
 8010b22:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	dd40      	ble.n	8010bac <wait_session_status+0xc4>
 8010b2a:	7960      	ldrb	r0, [r4, #5]
 8010b2c:	28ff      	cmp	r0, #255	@ 0xff
 8010b2e:	d145      	bne.n	8010bbc <wait_session_status+0xd4>
 8010b30:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010b32:	a908      	add	r1, sp, #32
 8010b34:	6896      	ldr	r6, [r2, #8]
 8010b36:	6810      	ldr	r0, [r2, #0]
 8010b38:	aa09      	add	r2, sp, #36	@ 0x24
 8010b3a:	47b0      	blx	r6
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	d0ed      	beq.n	8010b1c <wait_session_status+0x34>
 8010b40:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010b44:	a80c      	add	r0, sp, #48	@ 0x30
 8010b46:	f7fb f9bb 	bl	800bec0 <ucdr_init_buffer>
 8010b4a:	2600      	movs	r6, #0
 8010b4c:	f10d 031e 	add.w	r3, sp, #30
 8010b50:	aa07      	add	r2, sp, #28
 8010b52:	a90c      	add	r1, sp, #48	@ 0x30
 8010b54:	4620      	mov	r0, r4
 8010b56:	f88d 601c 	strb.w	r6, [sp, #28]
 8010b5a:	f000 fa87 	bl	801106c <uxr_read_session_header>
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	d0dc      	beq.n	8010b1c <wait_session_status+0x34>
 8010b62:	4631      	mov	r1, r6
 8010b64:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010b68:	f000 ffb6 	bl	8011ad8 <uxr_stream_id_from_raw>
 8010b6c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010b70:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010b74:	9302      	str	r3, [sp, #8]
 8010b76:	2f01      	cmp	r7, #1
 8010b78:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8010b7c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010b80:	d05c      	beq.n	8010c3c <wait_session_status+0x154>
 8010b82:	2f02      	cmp	r7, #2
 8010b84:	d020      	beq.n	8010bc8 <wait_session_status+0xe0>
 8010b86:	2f00      	cmp	r7, #0
 8010b88:	d1c8      	bne.n	8010b1c <wait_session_status+0x34>
 8010b8a:	4639      	mov	r1, r7
 8010b8c:	4638      	mov	r0, r7
 8010b8e:	f000 ffa3 	bl	8011ad8 <uxr_stream_id_from_raw>
 8010b92:	a90c      	add	r1, sp, #48	@ 0x30
 8010b94:	4602      	mov	r2, r0
 8010b96:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010b98:	4620      	mov	r0, r4
 8010b9a:	f7ff fbd5 	bl	8010348 <read_submessage_list>
 8010b9e:	f001 f8ef 	bl	8011d80 <uxr_millis>
 8010ba2:	1b40      	subs	r0, r0, r5
 8010ba4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	dcbe      	bgt.n	8010b2a <wait_session_status+0x42>
 8010bac:	9b03      	ldr	r3, [sp, #12]
 8010bae:	7960      	ldrb	r0, [r4, #5]
 8010bb0:	f10b 0b01 	add.w	fp, fp, #1
 8010bb4:	455b      	cmp	r3, fp
 8010bb6:	d001      	beq.n	8010bbc <wait_session_status+0xd4>
 8010bb8:	28ff      	cmp	r0, #255	@ 0xff
 8010bba:	d0a3      	beq.n	8010b04 <wait_session_status+0x1c>
 8010bbc:	38ff      	subs	r0, #255	@ 0xff
 8010bbe:	bf18      	it	ne
 8010bc0:	2001      	movne	r0, #1
 8010bc2:	b01d      	add	sp, #116	@ 0x74
 8010bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bc8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8010bcc:	9304      	str	r3, [sp, #16]
 8010bce:	4631      	mov	r1, r6
 8010bd0:	f104 0008 	add.w	r0, r4, #8
 8010bd4:	f001 f86e 	bl	8011cb4 <uxr_get_input_reliable_stream>
 8010bd8:	4680      	mov	r8, r0
 8010bda:	b348      	cbz	r0, 8010c30 <wait_session_status+0x148>
 8010bdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010bde:	9205      	str	r2, [sp, #20]
 8010be0:	a80c      	add	r0, sp, #48	@ 0x30
 8010be2:	f7fb f99d 	bl	800bf20 <ucdr_buffer_remaining>
 8010be6:	4603      	mov	r3, r0
 8010be8:	f10d 001d 	add.w	r0, sp, #29
 8010bec:	9000      	str	r0, [sp, #0]
 8010bee:	9a05      	ldr	r2, [sp, #20]
 8010bf0:	9902      	ldr	r1, [sp, #8]
 8010bf2:	4640      	mov	r0, r8
 8010bf4:	f006 fc6c 	bl	80174d0 <uxr_receive_reliable_message>
 8010bf8:	b1d0      	cbz	r0, 8010c30 <wait_session_status+0x148>
 8010bfa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d03a      	beq.n	8010c78 <wait_session_status+0x190>
 8010c02:	9f04      	ldr	r7, [sp, #16]
 8010c04:	e00a      	b.n	8010c1c <wait_session_status+0x134>
 8010c06:	f04f 0302 	mov.w	r3, #2
 8010c0a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8010c0e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8010c12:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8010c16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010c18:	f7ff fb96 	bl	8010348 <read_submessage_list>
 8010c1c:	a914      	add	r1, sp, #80	@ 0x50
 8010c1e:	2204      	movs	r2, #4
 8010c20:	4640      	mov	r0, r8
 8010c22:	f006 fcd5 	bl	80175d0 <uxr_next_input_reliable_buffer_available>
 8010c26:	4603      	mov	r3, r0
 8010c28:	a914      	add	r1, sp, #80	@ 0x50
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d1ea      	bne.n	8010c06 <wait_session_status+0x11e>
 8010c30:	9904      	ldr	r1, [sp, #16]
 8010c32:	4632      	mov	r2, r6
 8010c34:	4620      	mov	r0, r4
 8010c36:	f7ff f9f1 	bl	801001c <write_submessage_acknack.isra.0>
 8010c3a:	e76f      	b.n	8010b1c <wait_session_status+0x34>
 8010c3c:	4631      	mov	r1, r6
 8010c3e:	f104 0008 	add.w	r0, r4, #8
 8010c42:	f001 f82d 	bl	8011ca0 <uxr_get_input_best_effort_stream>
 8010c46:	2800      	cmp	r0, #0
 8010c48:	f43f af68 	beq.w	8010b1c <wait_session_status+0x34>
 8010c4c:	9902      	ldr	r1, [sp, #8]
 8010c4e:	f006 fbab 	bl	80173a8 <uxr_receive_best_effort_message>
 8010c52:	2800      	cmp	r0, #0
 8010c54:	f43f af62 	beq.w	8010b1c <wait_session_status+0x34>
 8010c58:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8010c5c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010c5e:	a90c      	add	r1, sp, #48	@ 0x30
 8010c60:	4620      	mov	r0, r4
 8010c62:	f7ff fb71 	bl	8010348 <read_submessage_list>
 8010c66:	e759      	b.n	8010b1c <wait_session_status+0x34>
 8010c68:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010c6a:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010c6e:	47a0      	blx	r4
 8010c70:	2001      	movs	r0, #1
 8010c72:	b01d      	add	sp, #116	@ 0x74
 8010c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c78:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8010c7c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010c7e:	a90c      	add	r1, sp, #48	@ 0x30
 8010c80:	4620      	mov	r0, r4
 8010c82:	f7ff fb61 	bl	8010348 <read_submessage_list>
 8010c86:	e7bc      	b.n	8010c02 <wait_session_status+0x11a>

08010c88 <uxr_delete_session_retries>:
 8010c88:	b530      	push	{r4, r5, lr}
 8010c8a:	b08f      	sub	sp, #60	@ 0x3c
 8010c8c:	4604      	mov	r4, r0
 8010c8e:	460d      	mov	r5, r1
 8010c90:	f000 fa2e 	bl	80110f0 <uxr_session_header_offset>
 8010c94:	2300      	movs	r3, #0
 8010c96:	2210      	movs	r2, #16
 8010c98:	9000      	str	r0, [sp, #0]
 8010c9a:	a902      	add	r1, sp, #8
 8010c9c:	a806      	add	r0, sp, #24
 8010c9e:	f7fb f8fd 	bl	800be9c <ucdr_init_buffer_origin_offset>
 8010ca2:	a906      	add	r1, sp, #24
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	f000 f973 	bl	8010f90 <uxr_buffer_delete_session>
 8010caa:	2200      	movs	r2, #0
 8010cac:	4611      	mov	r1, r2
 8010cae:	9b06      	ldr	r3, [sp, #24]
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	f000 f9c7 	bl	8011044 <uxr_stamp_session_header>
 8010cb6:	a806      	add	r0, sp, #24
 8010cb8:	f7fb f92e 	bl	800bf18 <ucdr_buffer_length>
 8010cbc:	462b      	mov	r3, r5
 8010cbe:	4602      	mov	r2, r0
 8010cc0:	a902      	add	r1, sp, #8
 8010cc2:	4620      	mov	r0, r4
 8010cc4:	f7ff ff10 	bl	8010ae8 <wait_session_status>
 8010cc8:	b118      	cbz	r0, 8010cd2 <uxr_delete_session_retries+0x4a>
 8010cca:	7960      	ldrb	r0, [r4, #5]
 8010ccc:	fab0 f080 	clz	r0, r0
 8010cd0:	0940      	lsrs	r0, r0, #5
 8010cd2:	b00f      	add	sp, #60	@ 0x3c
 8010cd4:	bd30      	pop	{r4, r5, pc}
 8010cd6:	bf00      	nop

08010cd8 <uxr_create_session>:
 8010cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cdc:	f100 0b08 	add.w	fp, r0, #8
 8010ce0:	b0ab      	sub	sp, #172	@ 0xac
 8010ce2:	4604      	mov	r4, r0
 8010ce4:	4658      	mov	r0, fp
 8010ce6:	f000 ff2b 	bl	8011b40 <uxr_reset_stream_storage>
 8010cea:	4620      	mov	r0, r4
 8010cec:	f000 fa00 	bl	80110f0 <uxr_session_header_offset>
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	9000      	str	r0, [sp, #0]
 8010cf4:	221c      	movs	r2, #28
 8010cf6:	a90b      	add	r1, sp, #44	@ 0x2c
 8010cf8:	a812      	add	r0, sp, #72	@ 0x48
 8010cfa:	f7fb f8cf 	bl	800be9c <ucdr_init_buffer_origin_offset>
 8010cfe:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010d00:	8a1a      	ldrh	r2, [r3, #16]
 8010d02:	3a04      	subs	r2, #4
 8010d04:	b292      	uxth	r2, r2
 8010d06:	a912      	add	r1, sp, #72	@ 0x48
 8010d08:	4620      	mov	r0, r4
 8010d0a:	f000 f917 	bl	8010f3c <uxr_buffer_create_session>
 8010d0e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010d10:	4620      	mov	r0, r4
 8010d12:	f000 f983 	bl	801101c <uxr_stamp_create_session_header>
 8010d16:	a812      	add	r0, sp, #72	@ 0x48
 8010d18:	f7fb f8fe 	bl	800bf18 <ucdr_buffer_length>
 8010d1c:	23ff      	movs	r3, #255	@ 0xff
 8010d1e:	7163      	strb	r3, [r4, #5]
 8010d20:	230a      	movs	r3, #10
 8010d22:	46da      	mov	sl, fp
 8010d24:	9303      	str	r3, [sp, #12]
 8010d26:	4683      	mov	fp, r0
 8010d28:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010d2a:	465a      	mov	r2, fp
 8010d2c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010d30:	a90b      	add	r1, sp, #44	@ 0x2c
 8010d32:	47a8      	blx	r5
 8010d34:	f001 f824 	bl	8011d80 <uxr_millis>
 8010d38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010d3c:	4605      	mov	r5, r0
 8010d3e:	e009      	b.n	8010d54 <uxr_create_session+0x7c>
 8010d40:	f001 f81e 	bl	8011d80 <uxr_millis>
 8010d44:	1b40      	subs	r0, r0, r5
 8010d46:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	7962      	ldrb	r2, [r4, #5]
 8010d4e:	dd38      	ble.n	8010dc2 <uxr_create_session+0xea>
 8010d50:	2aff      	cmp	r2, #255	@ 0xff
 8010d52:	d13c      	bne.n	8010dce <uxr_create_session+0xf6>
 8010d54:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010d56:	a907      	add	r1, sp, #28
 8010d58:	6896      	ldr	r6, [r2, #8]
 8010d5a:	6810      	ldr	r0, [r2, #0]
 8010d5c:	aa08      	add	r2, sp, #32
 8010d5e:	47b0      	blx	r6
 8010d60:	2800      	cmp	r0, #0
 8010d62:	d0ed      	beq.n	8010d40 <uxr_create_session+0x68>
 8010d64:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010d68:	a81a      	add	r0, sp, #104	@ 0x68
 8010d6a:	f7fb f8a9 	bl	800bec0 <ucdr_init_buffer>
 8010d6e:	2600      	movs	r6, #0
 8010d70:	f10d 031a 	add.w	r3, sp, #26
 8010d74:	aa06      	add	r2, sp, #24
 8010d76:	a91a      	add	r1, sp, #104	@ 0x68
 8010d78:	4620      	mov	r0, r4
 8010d7a:	f88d 6018 	strb.w	r6, [sp, #24]
 8010d7e:	f000 f975 	bl	801106c <uxr_read_session_header>
 8010d82:	2800      	cmp	r0, #0
 8010d84:	d0dc      	beq.n	8010d40 <uxr_create_session+0x68>
 8010d86:	4631      	mov	r1, r6
 8010d88:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010d8c:	f000 fea4 	bl	8011ad8 <uxr_stream_id_from_raw>
 8010d90:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010d94:	2e01      	cmp	r6, #1
 8010d96:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8010d9a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8010d9e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010da2:	d053      	beq.n	8010e4c <uxr_create_session+0x174>
 8010da4:	2e02      	cmp	r6, #2
 8010da6:	d018      	beq.n	8010dda <uxr_create_session+0x102>
 8010da8:	2e00      	cmp	r6, #0
 8010daa:	d1c9      	bne.n	8010d40 <uxr_create_session+0x68>
 8010dac:	4631      	mov	r1, r6
 8010dae:	4630      	mov	r0, r6
 8010db0:	f000 fe92 	bl	8011ad8 <uxr_stream_id_from_raw>
 8010db4:	a91a      	add	r1, sp, #104	@ 0x68
 8010db6:	4602      	mov	r2, r0
 8010db8:	900a      	str	r0, [sp, #40]	@ 0x28
 8010dba:	4620      	mov	r0, r4
 8010dbc:	f7ff fac4 	bl	8010348 <read_submessage_list>
 8010dc0:	e7be      	b.n	8010d40 <uxr_create_session+0x68>
 8010dc2:	9b03      	ldr	r3, [sp, #12]
 8010dc4:	3b01      	subs	r3, #1
 8010dc6:	9303      	str	r3, [sp, #12]
 8010dc8:	d001      	beq.n	8010dce <uxr_create_session+0xf6>
 8010dca:	2aff      	cmp	r2, #255	@ 0xff
 8010dcc:	d0ac      	beq.n	8010d28 <uxr_create_session+0x50>
 8010dce:	2a00      	cmp	r2, #0
 8010dd0:	d051      	beq.n	8010e76 <uxr_create_session+0x19e>
 8010dd2:	2000      	movs	r0, #0
 8010dd4:	b02b      	add	sp, #172	@ 0xac
 8010dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dda:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010dde:	9304      	str	r3, [sp, #16]
 8010de0:	4639      	mov	r1, r7
 8010de2:	4650      	mov	r0, sl
 8010de4:	f000 ff66 	bl	8011cb4 <uxr_get_input_reliable_stream>
 8010de8:	4680      	mov	r8, r0
 8010dea:	b348      	cbz	r0, 8010e40 <uxr_create_session+0x168>
 8010dec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010dee:	9205      	str	r2, [sp, #20]
 8010df0:	a81a      	add	r0, sp, #104	@ 0x68
 8010df2:	f7fb f895 	bl	800bf20 <ucdr_buffer_remaining>
 8010df6:	4603      	mov	r3, r0
 8010df8:	f10d 0019 	add.w	r0, sp, #25
 8010dfc:	9000      	str	r0, [sp, #0]
 8010dfe:	9a05      	ldr	r2, [sp, #20]
 8010e00:	4649      	mov	r1, r9
 8010e02:	4640      	mov	r0, r8
 8010e04:	f006 fb64 	bl	80174d0 <uxr_receive_reliable_message>
 8010e08:	b1d0      	cbz	r0, 8010e40 <uxr_create_session+0x168>
 8010e0a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d038      	beq.n	8010e84 <uxr_create_session+0x1ac>
 8010e12:	9e04      	ldr	r6, [sp, #16]
 8010e14:	e00a      	b.n	8010e2c <uxr_create_session+0x154>
 8010e16:	f04f 0302 	mov.w	r3, #2
 8010e1a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8010e1e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8010e22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010e28:	f7ff fa8e 	bl	8010348 <read_submessage_list>
 8010e2c:	a922      	add	r1, sp, #136	@ 0x88
 8010e2e:	2204      	movs	r2, #4
 8010e30:	4640      	mov	r0, r8
 8010e32:	f006 fbcd 	bl	80175d0 <uxr_next_input_reliable_buffer_available>
 8010e36:	4603      	mov	r3, r0
 8010e38:	a922      	add	r1, sp, #136	@ 0x88
 8010e3a:	4620      	mov	r0, r4
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d1ea      	bne.n	8010e16 <uxr_create_session+0x13e>
 8010e40:	9904      	ldr	r1, [sp, #16]
 8010e42:	463a      	mov	r2, r7
 8010e44:	4620      	mov	r0, r4
 8010e46:	f7ff f8e9 	bl	801001c <write_submessage_acknack.isra.0>
 8010e4a:	e779      	b.n	8010d40 <uxr_create_session+0x68>
 8010e4c:	4639      	mov	r1, r7
 8010e4e:	4650      	mov	r0, sl
 8010e50:	f000 ff26 	bl	8011ca0 <uxr_get_input_best_effort_stream>
 8010e54:	2800      	cmp	r0, #0
 8010e56:	f43f af73 	beq.w	8010d40 <uxr_create_session+0x68>
 8010e5a:	4649      	mov	r1, r9
 8010e5c:	f006 faa4 	bl	80173a8 <uxr_receive_best_effort_message>
 8010e60:	2800      	cmp	r0, #0
 8010e62:	f43f af6d 	beq.w	8010d40 <uxr_create_session+0x68>
 8010e66:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8010e6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010e6c:	a91a      	add	r1, sp, #104	@ 0x68
 8010e6e:	4620      	mov	r0, r4
 8010e70:	f7ff fa6a 	bl	8010348 <read_submessage_list>
 8010e74:	e764      	b.n	8010d40 <uxr_create_session+0x68>
 8010e76:	4650      	mov	r0, sl
 8010e78:	f000 fe62 	bl	8011b40 <uxr_reset_stream_storage>
 8010e7c:	2001      	movs	r0, #1
 8010e7e:	b02b      	add	sp, #172	@ 0xac
 8010e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e84:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8010e88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010e8a:	a91a      	add	r1, sp, #104	@ 0x68
 8010e8c:	4620      	mov	r0, r4
 8010e8e:	f7ff fa5b 	bl	8010348 <read_submessage_list>
 8010e92:	e7be      	b.n	8010e12 <uxr_create_session+0x13a>

08010e94 <uxr_prepare_stream_to_write_submessage>:
 8010e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e98:	b082      	sub	sp, #8
 8010e9a:	4682      	mov	sl, r0
 8010e9c:	4610      	mov	r0, r2
 8010e9e:	4615      	mov	r5, r2
 8010ea0:	461e      	mov	r6, r3
 8010ea2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8010ea6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8010eaa:	9101      	str	r1, [sp, #4]
 8010eac:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8010eb0:	f000 ff60 	bl	8011d74 <uxr_submessage_padding>
 8010eb4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010eb8:	f105 0904 	add.w	r9, r5, #4
 8010ebc:	2b01      	cmp	r3, #1
 8010ebe:	4481      	add	r9, r0
 8010ec0:	d01d      	beq.n	8010efe <uxr_prepare_stream_to_write_submessage+0x6a>
 8010ec2:	2b02      	cmp	r3, #2
 8010ec4:	d116      	bne.n	8010ef4 <uxr_prepare_stream_to_write_submessage+0x60>
 8010ec6:	4621      	mov	r1, r4
 8010ec8:	f10a 0008 	add.w	r0, sl, #8
 8010ecc:	f000 fede 	bl	8011c8c <uxr_get_output_reliable_stream>
 8010ed0:	4604      	mov	r4, r0
 8010ed2:	b158      	cbz	r0, 8010eec <uxr_prepare_stream_to_write_submessage+0x58>
 8010ed4:	4649      	mov	r1, r9
 8010ed6:	4632      	mov	r2, r6
 8010ed8:	f006 fd36 	bl	8017948 <uxr_prepare_reliable_buffer_to_write>
 8010edc:	4604      	mov	r4, r0
 8010ede:	b12c      	cbz	r4, 8010eec <uxr_prepare_stream_to_write_submessage+0x58>
 8010ee0:	4643      	mov	r3, r8
 8010ee2:	b2aa      	uxth	r2, r5
 8010ee4:	4639      	mov	r1, r7
 8010ee6:	4630      	mov	r0, r6
 8010ee8:	f000 ff04 	bl	8011cf4 <uxr_buffer_submessage_header>
 8010eec:	4620      	mov	r0, r4
 8010eee:	b002      	add	sp, #8
 8010ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ef4:	2400      	movs	r4, #0
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	b002      	add	sp, #8
 8010efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010efe:	4621      	mov	r1, r4
 8010f00:	f10a 0008 	add.w	r0, sl, #8
 8010f04:	f000 feba 	bl	8011c7c <uxr_get_output_best_effort_stream>
 8010f08:	4604      	mov	r4, r0
 8010f0a:	2800      	cmp	r0, #0
 8010f0c:	d0ee      	beq.n	8010eec <uxr_prepare_stream_to_write_submessage+0x58>
 8010f0e:	4649      	mov	r1, r9
 8010f10:	4632      	mov	r2, r6
 8010f12:	f006 fc49 	bl	80177a8 <uxr_prepare_best_effort_buffer_to_write>
 8010f16:	4604      	mov	r4, r0
 8010f18:	e7e1      	b.n	8010ede <uxr_prepare_stream_to_write_submessage+0x4a>
 8010f1a:	bf00      	nop

08010f1c <uxr_init_session_info>:
 8010f1c:	0e13      	lsrs	r3, r2, #24
 8010f1e:	7043      	strb	r3, [r0, #1]
 8010f20:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8010f24:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010f28:	7001      	strb	r1, [r0, #0]
 8010f2a:	70c3      	strb	r3, [r0, #3]
 8010f2c:	2109      	movs	r1, #9
 8010f2e:	23ff      	movs	r3, #255	@ 0xff
 8010f30:	f880 c002 	strb.w	ip, [r0, #2]
 8010f34:	7102      	strb	r2, [r0, #4]
 8010f36:	80c1      	strh	r1, [r0, #6]
 8010f38:	7143      	strb	r3, [r0, #5]
 8010f3a:	4770      	bx	lr

08010f3c <uxr_buffer_create_session>:
 8010f3c:	b530      	push	{r4, r5, lr}
 8010f3e:	b089      	sub	sp, #36	@ 0x24
 8010f40:	2300      	movs	r3, #0
 8010f42:	4d12      	ldr	r5, [pc, #72]	@ (8010f8c <uxr_buffer_create_session+0x50>)
 8010f44:	9307      	str	r3, [sp, #28]
 8010f46:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	9301      	str	r3, [sp, #4]
 8010f4e:	80c2      	strh	r2, [r0, #6]
 8010f50:	f88d 2004 	strb.w	r2, [sp, #4]
 8010f54:	682a      	ldr	r2, [r5, #0]
 8010f56:	9200      	str	r2, [sp, #0]
 8010f58:	88aa      	ldrh	r2, [r5, #4]
 8010f5a:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010f5e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8010f62:	9202      	str	r2, [sp, #8]
 8010f64:	460c      	mov	r4, r1
 8010f66:	7802      	ldrb	r2, [r0, #0]
 8010f68:	9303      	str	r3, [sp, #12]
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	f88d 200c 	strb.w	r2, [sp, #12]
 8010f70:	4620      	mov	r0, r4
 8010f72:	2210      	movs	r2, #16
 8010f74:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010f78:	9306      	str	r3, [sp, #24]
 8010f7a:	f000 febb 	bl	8011cf4 <uxr_buffer_submessage_header>
 8010f7e:	4669      	mov	r1, sp
 8010f80:	4620      	mov	r0, r4
 8010f82:	f001 fe47 	bl	8012c14 <uxr_serialize_CREATE_CLIENT_Payload>
 8010f86:	b009      	add	sp, #36	@ 0x24
 8010f88:	bd30      	pop	{r4, r5, pc}
 8010f8a:	bf00      	nop
 8010f8c:	0801a618 	.word	0x0801a618

08010f90 <uxr_buffer_delete_session>:
 8010f90:	b510      	push	{r4, lr}
 8010f92:	4b0c      	ldr	r3, [pc, #48]	@ (8010fc4 <uxr_buffer_delete_session+0x34>)
 8010f94:	b082      	sub	sp, #8
 8010f96:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8010f9a:	f8ad c006 	strh.w	ip, [sp, #6]
 8010f9e:	460c      	mov	r4, r1
 8010fa0:	2202      	movs	r2, #2
 8010fa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010fa6:	80c2      	strh	r2, [r0, #6]
 8010fa8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010fac:	2204      	movs	r2, #4
 8010fae:	2300      	movs	r3, #0
 8010fb0:	2103      	movs	r1, #3
 8010fb2:	4620      	mov	r0, r4
 8010fb4:	f000 fe9e 	bl	8011cf4 <uxr_buffer_submessage_header>
 8010fb8:	a901      	add	r1, sp, #4
 8010fba:	4620      	mov	r0, r4
 8010fbc:	f001 fed0 	bl	8012d60 <uxr_serialize_DELETE_Payload>
 8010fc0:	b002      	add	sp, #8
 8010fc2:	bd10      	pop	{r4, pc}
 8010fc4:	0801a618 	.word	0x0801a618

08010fc8 <uxr_read_create_session_status>:
 8010fc8:	b510      	push	{r4, lr}
 8010fca:	b088      	sub	sp, #32
 8010fcc:	4604      	mov	r4, r0
 8010fce:	4608      	mov	r0, r1
 8010fd0:	a901      	add	r1, sp, #4
 8010fd2:	f001 fed5 	bl	8012d80 <uxr_deserialize_STATUS_AGENT_Payload>
 8010fd6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010fda:	7163      	strb	r3, [r4, #5]
 8010fdc:	b008      	add	sp, #32
 8010fde:	bd10      	pop	{r4, pc}

08010fe0 <uxr_read_delete_session_status>:
 8010fe0:	b510      	push	{r4, lr}
 8010fe2:	4604      	mov	r4, r0
 8010fe4:	b084      	sub	sp, #16
 8010fe6:	4608      	mov	r0, r1
 8010fe8:	a902      	add	r1, sp, #8
 8010fea:	f001 fef9 	bl	8012de0 <uxr_deserialize_STATUS_Payload>
 8010fee:	88e3      	ldrh	r3, [r4, #6]
 8010ff0:	2b02      	cmp	r3, #2
 8010ff2:	d001      	beq.n	8010ff8 <uxr_read_delete_session_status+0x18>
 8010ff4:	b004      	add	sp, #16
 8010ff6:	bd10      	pop	{r4, pc}
 8010ff8:	f10d 000a 	add.w	r0, sp, #10
 8010ffc:	f7fe fe64 	bl	800fcc8 <uxr_object_id_from_raw>
 8011000:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011004:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011008:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801100c:	b29b      	uxth	r3, r3
 801100e:	2b02      	cmp	r3, #2
 8011010:	bf04      	itt	eq
 8011012:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011016:	7163      	strbeq	r3, [r4, #5]
 8011018:	b004      	add	sp, #16
 801101a:	bd10      	pop	{r4, pc}

0801101c <uxr_stamp_create_session_header>:
 801101c:	b510      	push	{r4, lr}
 801101e:	2208      	movs	r2, #8
 8011020:	b08a      	sub	sp, #40	@ 0x28
 8011022:	4604      	mov	r4, r0
 8011024:	eb0d 0002 	add.w	r0, sp, r2
 8011028:	f7fa ff4a 	bl	800bec0 <ucdr_init_buffer>
 801102c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011030:	9400      	str	r4, [sp, #0]
 8011032:	2300      	movs	r3, #0
 8011034:	461a      	mov	r2, r3
 8011036:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801103a:	a802      	add	r0, sp, #8
 801103c:	f001 f854 	bl	80120e8 <uxr_serialize_message_header>
 8011040:	b00a      	add	sp, #40	@ 0x28
 8011042:	bd10      	pop	{r4, pc}

08011044 <uxr_stamp_session_header>:
 8011044:	b530      	push	{r4, r5, lr}
 8011046:	b08d      	sub	sp, #52	@ 0x34
 8011048:	4604      	mov	r4, r0
 801104a:	460d      	mov	r5, r1
 801104c:	9203      	str	r2, [sp, #12]
 801104e:	4619      	mov	r1, r3
 8011050:	a804      	add	r0, sp, #16
 8011052:	2208      	movs	r2, #8
 8011054:	f7fa ff34 	bl	800bec0 <ucdr_init_buffer>
 8011058:	f814 1b01 	ldrb.w	r1, [r4], #1
 801105c:	9b03      	ldr	r3, [sp, #12]
 801105e:	9400      	str	r4, [sp, #0]
 8011060:	462a      	mov	r2, r5
 8011062:	a804      	add	r0, sp, #16
 8011064:	f001 f840 	bl	80120e8 <uxr_serialize_message_header>
 8011068:	b00d      	add	sp, #52	@ 0x34
 801106a:	bd30      	pop	{r4, r5, pc}

0801106c <uxr_read_session_header>:
 801106c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011070:	4607      	mov	r7, r0
 8011072:	b084      	sub	sp, #16
 8011074:	4608      	mov	r0, r1
 8011076:	460c      	mov	r4, r1
 8011078:	4615      	mov	r5, r2
 801107a:	461e      	mov	r6, r3
 801107c:	f7fa ff50 	bl	800bf20 <ucdr_buffer_remaining>
 8011080:	2808      	cmp	r0, #8
 8011082:	d803      	bhi.n	801108c <uxr_read_session_header+0x20>
 8011084:	2000      	movs	r0, #0
 8011086:	b004      	add	sp, #16
 8011088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801108c:	f10d 080c 	add.w	r8, sp, #12
 8011090:	4633      	mov	r3, r6
 8011092:	462a      	mov	r2, r5
 8011094:	f8cd 8000 	str.w	r8, [sp]
 8011098:	4620      	mov	r0, r4
 801109a:	f10d 010b 	add.w	r1, sp, #11
 801109e:	f001 f841 	bl	8012124 <uxr_deserialize_message_header>
 80110a2:	783a      	ldrb	r2, [r7, #0]
 80110a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80110a8:	4293      	cmp	r3, r2
 80110aa:	d1eb      	bne.n	8011084 <uxr_read_session_header+0x18>
 80110ac:	061b      	lsls	r3, r3, #24
 80110ae:	d41c      	bmi.n	80110ea <uxr_read_session_header+0x7e>
 80110b0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80110b4:	787b      	ldrb	r3, [r7, #1]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d003      	beq.n	80110c2 <uxr_read_session_header+0x56>
 80110ba:	2001      	movs	r0, #1
 80110bc:	f080 0001 	eor.w	r0, r0, #1
 80110c0:	e7e1      	b.n	8011086 <uxr_read_session_header+0x1a>
 80110c2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80110c6:	78bb      	ldrb	r3, [r7, #2]
 80110c8:	429a      	cmp	r2, r3
 80110ca:	f107 0102 	add.w	r1, r7, #2
 80110ce:	d1f4      	bne.n	80110ba <uxr_read_session_header+0x4e>
 80110d0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80110d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80110d8:	429a      	cmp	r2, r3
 80110da:	d1ee      	bne.n	80110ba <uxr_read_session_header+0x4e>
 80110dc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80110e0:	784b      	ldrb	r3, [r1, #1]
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d1e9      	bne.n	80110ba <uxr_read_session_header+0x4e>
 80110e6:	2000      	movs	r0, #0
 80110e8:	e7e8      	b.n	80110bc <uxr_read_session_header+0x50>
 80110ea:	2001      	movs	r0, #1
 80110ec:	e7cb      	b.n	8011086 <uxr_read_session_header+0x1a>
 80110ee:	bf00      	nop

080110f0 <uxr_session_header_offset>:
 80110f0:	f990 3000 	ldrsb.w	r3, [r0]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	bfac      	ite	ge
 80110f8:	2008      	movge	r0, #8
 80110fa:	2004      	movlt	r0, #4
 80110fc:	4770      	bx	lr
 80110fe:	bf00      	nop

08011100 <uxr_init_base_object_request>:
 8011100:	b510      	push	{r4, lr}
 8011102:	88c3      	ldrh	r3, [r0, #6]
 8011104:	b082      	sub	sp, #8
 8011106:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801110a:	9101      	str	r1, [sp, #4]
 801110c:	f1a3 010a 	sub.w	r1, r3, #10
 8011110:	b289      	uxth	r1, r1
 8011112:	42a1      	cmp	r1, r4
 8011114:	d80e      	bhi.n	8011134 <uxr_init_base_object_request+0x34>
 8011116:	3301      	adds	r3, #1
 8011118:	b29c      	uxth	r4, r3
 801111a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801111e:	b2db      	uxtb	r3, r3
 8011120:	80c4      	strh	r4, [r0, #6]
 8011122:	9801      	ldr	r0, [sp, #4]
 8011124:	7011      	strb	r1, [r2, #0]
 8011126:	7053      	strb	r3, [r2, #1]
 8011128:	1c91      	adds	r1, r2, #2
 801112a:	f7fe fde1 	bl	800fcf0 <uxr_object_id_to_raw>
 801112e:	4620      	mov	r0, r4
 8011130:	b002      	add	sp, #8
 8011132:	bd10      	pop	{r4, pc}
 8011134:	230a      	movs	r3, #10
 8011136:	2100      	movs	r1, #0
 8011138:	461c      	mov	r4, r3
 801113a:	e7f1      	b.n	8011120 <uxr_init_base_object_request+0x20>

0801113c <uxr_parse_base_object_request>:
 801113c:	b570      	push	{r4, r5, r6, lr}
 801113e:	4604      	mov	r4, r0
 8011140:	3002      	adds	r0, #2
 8011142:	460d      	mov	r5, r1
 8011144:	4616      	mov	r6, r2
 8011146:	f7fe fdbf 	bl	800fcc8 <uxr_object_id_from_raw>
 801114a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801114e:	8028      	strh	r0, [r5, #0]
 8011150:	806b      	strh	r3, [r5, #2]
 8011152:	7822      	ldrb	r2, [r4, #0]
 8011154:	7863      	ldrb	r3, [r4, #1]
 8011156:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801115a:	8033      	strh	r3, [r6, #0]
 801115c:	bd70      	pop	{r4, r5, r6, pc}
 801115e:	bf00      	nop

08011160 <uxr_init_framing_io>:
 8011160:	2300      	movs	r3, #0
 8011162:	7041      	strb	r1, [r0, #1]
 8011164:	7003      	strb	r3, [r0, #0]
 8011166:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011168:	4770      	bx	lr
 801116a:	bf00      	nop

0801116c <uxr_write_framed_msg>:
 801116c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011170:	4617      	mov	r7, r2
 8011172:	7842      	ldrb	r2, [r0, #1]
 8011174:	b083      	sub	sp, #12
 8011176:	460e      	mov	r6, r1
 8011178:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801117c:	469a      	mov	sl, r3
 801117e:	2901      	cmp	r1, #1
 8011180:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8011184:	4604      	mov	r4, r0
 8011186:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801118a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801118e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8011192:	f240 8137 	bls.w	8011404 <uxr_write_framed_msg+0x298>
 8011196:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801119a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801119e:	2901      	cmp	r1, #1
 80111a0:	f04f 0202 	mov.w	r2, #2
 80111a4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80111a8:	f240 808f 	bls.w	80112ca <uxr_write_framed_msg+0x15e>
 80111ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80111ae:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80111b2:	b2dd      	uxtb	r5, r3
 80111b4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80111b8:	2203      	movs	r2, #3
 80111ba:	2901      	cmp	r1, #1
 80111bc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80111c0:	f240 809a 	bls.w	80112f8 <uxr_write_framed_msg+0x18c>
 80111c4:	18a1      	adds	r1, r4, r2
 80111c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80111c8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80111cc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80111d0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80111d4:	3201      	adds	r2, #1
 80111d6:	2801      	cmp	r0, #1
 80111d8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80111dc:	f240 80a0 	bls.w	8011320 <uxr_write_framed_msg+0x1b4>
 80111e0:	18a0      	adds	r0, r4, r2
 80111e2:	3201      	adds	r2, #1
 80111e4:	b2d2      	uxtb	r2, r2
 80111e6:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80111ea:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	f000 80a9 	beq.w	8011346 <uxr_write_framed_msg+0x1da>
 80111f4:	f04f 0900 	mov.w	r9, #0
 80111f8:	46c8      	mov	r8, r9
 80111fa:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80111fe:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011202:	2901      	cmp	r1, #1
 8011204:	f240 80c3 	bls.w	801138e <uxr_write_framed_msg+0x222>
 8011208:	2a29      	cmp	r2, #41	@ 0x29
 801120a:	f200 809f 	bhi.w	801134c <uxr_write_framed_msg+0x1e0>
 801120e:	18a1      	adds	r1, r4, r2
 8011210:	3201      	adds	r2, #1
 8011212:	b2d2      	uxtb	r2, r2
 8011214:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8011218:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801121c:	ea89 0303 	eor.w	r3, r9, r3
 8011220:	498c      	ldr	r1, [pc, #560]	@ (8011454 <uxr_write_framed_msg+0x2e8>)
 8011222:	b2db      	uxtb	r3, r3
 8011224:	f108 0801 	add.w	r8, r8, #1
 8011228:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801122c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8011230:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011232:	4543      	cmp	r3, r8
 8011234:	d8e1      	bhi.n	80111fa <uxr_write_framed_msg+0x8e>
 8011236:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801123a:	fa5f f889 	uxtb.w	r8, r9
 801123e:	9301      	str	r3, [sp, #4]
 8011240:	f04f 0900 	mov.w	r9, #0
 8011244:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8011248:	fa5f f18a 	uxtb.w	r1, sl
 801124c:	2901      	cmp	r1, #1
 801124e:	d921      	bls.n	8011294 <uxr_write_framed_msg+0x128>
 8011250:	2a29      	cmp	r2, #41	@ 0x29
 8011252:	f240 80af 	bls.w	80113b4 <uxr_write_framed_msg+0x248>
 8011256:	2500      	movs	r5, #0
 8011258:	e000      	b.n	801125c <uxr_write_framed_msg+0xf0>
 801125a:	b160      	cbz	r0, 8011276 <uxr_write_framed_msg+0x10a>
 801125c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011260:	1b52      	subs	r2, r2, r5
 8011262:	465b      	mov	r3, fp
 8011264:	4421      	add	r1, r4
 8011266:	4638      	mov	r0, r7
 8011268:	47b0      	blx	r6
 801126a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801126e:	4405      	add	r5, r0
 8011270:	4295      	cmp	r5, r2
 8011272:	d3f2      	bcc.n	801125a <uxr_write_framed_msg+0xee>
 8011274:	d003      	beq.n	801127e <uxr_write_framed_msg+0x112>
 8011276:	2000      	movs	r0, #0
 8011278:	b003      	add	sp, #12
 801127a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801127e:	fa5f f18a 	uxtb.w	r1, sl
 8011282:	f04f 0300 	mov.w	r3, #0
 8011286:	2901      	cmp	r1, #1
 8011288:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801128c:	f04f 0200 	mov.w	r2, #0
 8011290:	f200 8090 	bhi.w	80113b4 <uxr_write_framed_msg+0x248>
 8011294:	1c51      	adds	r1, r2, #1
 8011296:	b2c9      	uxtb	r1, r1
 8011298:	2929      	cmp	r1, #41	@ 0x29
 801129a:	d8dc      	bhi.n	8011256 <uxr_write_framed_msg+0xea>
 801129c:	18a5      	adds	r5, r4, r2
 801129e:	4421      	add	r1, r4
 80112a0:	3202      	adds	r2, #2
 80112a2:	f088 0820 	eor.w	r8, r8, #32
 80112a6:	4648      	mov	r0, r9
 80112a8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80112ac:	b2d2      	uxtb	r2, r2
 80112ae:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 80112b2:	f04f 0901 	mov.w	r9, #1
 80112b6:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80112ba:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80112be:	2800      	cmp	r0, #0
 80112c0:	f040 8085 	bne.w	80113ce <uxr_write_framed_msg+0x262>
 80112c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80112c8:	e7bc      	b.n	8011244 <uxr_write_framed_msg+0xd8>
 80112ca:	4611      	mov	r1, r2
 80112cc:	f04f 0c03 	mov.w	ip, #3
 80112d0:	2204      	movs	r2, #4
 80112d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80112d4:	4421      	add	r1, r4
 80112d6:	b2dd      	uxtb	r5, r3
 80112d8:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80112dc:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 80112e0:	44a4      	add	ip, r4
 80112e2:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80112e6:	f080 0020 	eor.w	r0, r0, #32
 80112ea:	2901      	cmp	r1, #1
 80112ec:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80112f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80112f4:	f63f af66 	bhi.w	80111c4 <uxr_write_framed_msg+0x58>
 80112f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80112fa:	18a0      	adds	r0, r4, r2
 80112fc:	f085 0520 	eor.w	r5, r5, #32
 8011300:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011304:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011308:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 801130c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8011310:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011314:	3202      	adds	r2, #2
 8011316:	2801      	cmp	r0, #1
 8011318:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801131c:	f63f af60 	bhi.w	80111e0 <uxr_write_framed_msg+0x74>
 8011320:	1c50      	adds	r0, r2, #1
 8011322:	18a5      	adds	r5, r4, r2
 8011324:	fa54 f080 	uxtab	r0, r4, r0
 8011328:	3202      	adds	r2, #2
 801132a:	f081 0120 	eor.w	r1, r1, #32
 801132e:	b2d2      	uxtb	r2, r2
 8011330:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011334:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8011338:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801133c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011340:	2b00      	cmp	r3, #0
 8011342:	f47f af57 	bne.w	80111f4 <uxr_write_framed_msg+0x88>
 8011346:	9301      	str	r3, [sp, #4]
 8011348:	4698      	mov	r8, r3
 801134a:	e779      	b.n	8011240 <uxr_write_framed_msg+0xd4>
 801134c:	2500      	movs	r5, #0
 801134e:	e001      	b.n	8011354 <uxr_write_framed_msg+0x1e8>
 8011350:	2800      	cmp	r0, #0
 8011352:	d090      	beq.n	8011276 <uxr_write_framed_msg+0x10a>
 8011354:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011358:	1b52      	subs	r2, r2, r5
 801135a:	465b      	mov	r3, fp
 801135c:	4421      	add	r1, r4
 801135e:	4638      	mov	r0, r7
 8011360:	47b0      	blx	r6
 8011362:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011366:	4405      	add	r5, r0
 8011368:	4295      	cmp	r5, r2
 801136a:	d3f1      	bcc.n	8011350 <uxr_write_framed_msg+0x1e4>
 801136c:	d183      	bne.n	8011276 <uxr_write_framed_msg+0x10a>
 801136e:	f04f 0300 	mov.w	r3, #0
 8011372:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011376:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011378:	4543      	cmp	r3, r8
 801137a:	d964      	bls.n	8011446 <uxr_write_framed_msg+0x2da>
 801137c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011380:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011384:	2901      	cmp	r1, #1
 8011386:	f04f 0200 	mov.w	r2, #0
 801138a:	f63f af3d 	bhi.w	8011208 <uxr_write_framed_msg+0x9c>
 801138e:	1c51      	adds	r1, r2, #1
 8011390:	b2c9      	uxtb	r1, r1
 8011392:	2929      	cmp	r1, #41	@ 0x29
 8011394:	d8da      	bhi.n	801134c <uxr_write_framed_msg+0x1e0>
 8011396:	18a0      	adds	r0, r4, r2
 8011398:	4421      	add	r1, r4
 801139a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 801139e:	3202      	adds	r2, #2
 80113a0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80113a4:	b2d2      	uxtb	r2, r2
 80113a6:	f083 0020 	eor.w	r0, r3, #32
 80113aa:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80113ae:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80113b2:	e733      	b.n	801121c <uxr_write_framed_msg+0xb0>
 80113b4:	18a1      	adds	r1, r4, r2
 80113b6:	3201      	adds	r2, #1
 80113b8:	4648      	mov	r0, r9
 80113ba:	b2d2      	uxtb	r2, r2
 80113bc:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80113c0:	f04f 0901 	mov.w	r9, #1
 80113c4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80113c8:	2800      	cmp	r0, #0
 80113ca:	f43f af7b 	beq.w	80112c4 <uxr_write_framed_msg+0x158>
 80113ce:	2500      	movs	r5, #0
 80113d0:	e002      	b.n	80113d8 <uxr_write_framed_msg+0x26c>
 80113d2:	2800      	cmp	r0, #0
 80113d4:	f43f af4f 	beq.w	8011276 <uxr_write_framed_msg+0x10a>
 80113d8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80113dc:	1b52      	subs	r2, r2, r5
 80113de:	465b      	mov	r3, fp
 80113e0:	4421      	add	r1, r4
 80113e2:	4638      	mov	r0, r7
 80113e4:	47b0      	blx	r6
 80113e6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80113ea:	4405      	add	r5, r0
 80113ec:	4295      	cmp	r5, r2
 80113ee:	d3f0      	bcc.n	80113d2 <uxr_write_framed_msg+0x266>
 80113f0:	f47f af41 	bne.w	8011276 <uxr_write_framed_msg+0x10a>
 80113f4:	2300      	movs	r3, #0
 80113f6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80113fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80113fc:	b298      	uxth	r0, r3
 80113fe:	b003      	add	sp, #12
 8011400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011404:	217d      	movs	r1, #125	@ 0x7d
 8011406:	f082 0220 	eor.w	r2, r2, #32
 801140a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801140e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011412:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8011416:	2901      	cmp	r1, #1
 8011418:	f04f 0203 	mov.w	r2, #3
 801141c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011420:	d804      	bhi.n	801142c <uxr_write_framed_msg+0x2c0>
 8011422:	4611      	mov	r1, r2
 8011424:	f04f 0c04 	mov.w	ip, #4
 8011428:	2205      	movs	r2, #5
 801142a:	e752      	b.n	80112d2 <uxr_write_framed_msg+0x166>
 801142c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801142e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8011432:	b2dd      	uxtb	r5, r3
 8011434:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011438:	2204      	movs	r2, #4
 801143a:	2901      	cmp	r1, #1
 801143c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011440:	f63f aec0 	bhi.w	80111c4 <uxr_write_framed_msg+0x58>
 8011444:	e758      	b.n	80112f8 <uxr_write_framed_msg+0x18c>
 8011446:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801144a:	fa5f f889 	uxtb.w	r8, r9
 801144e:	9301      	str	r3, [sp, #4]
 8011450:	2200      	movs	r2, #0
 8011452:	e6f5      	b.n	8011240 <uxr_write_framed_msg+0xd4>
 8011454:	0801afa0 	.word	0x0801afa0

08011458 <uxr_framing_read_transport>:
 8011458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801145c:	4604      	mov	r4, r0
 801145e:	b083      	sub	sp, #12
 8011460:	461f      	mov	r7, r3
 8011462:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8011466:	4689      	mov	r9, r1
 8011468:	4692      	mov	sl, r2
 801146a:	f000 fc89 	bl	8011d80 <uxr_millis>
 801146e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011472:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8011476:	42b3      	cmp	r3, r6
 8011478:	4680      	mov	r8, r0
 801147a:	d061      	beq.n	8011540 <uxr_framing_read_transport+0xe8>
 801147c:	d81c      	bhi.n	80114b8 <uxr_framing_read_transport+0x60>
 801147e:	1e75      	subs	r5, r6, #1
 8011480:	1aed      	subs	r5, r5, r3
 8011482:	b2ed      	uxtb	r5, r5
 8011484:	2600      	movs	r6, #0
 8011486:	455d      	cmp	r5, fp
 8011488:	d81f      	bhi.n	80114ca <uxr_framing_read_transport+0x72>
 801148a:	19ab      	adds	r3, r5, r6
 801148c:	455b      	cmp	r3, fp
 801148e:	bf84      	itt	hi
 8011490:	ebab 0605 	subhi.w	r6, fp, r5
 8011494:	b2f6      	uxtbhi	r6, r6
 8011496:	b9ed      	cbnz	r5, 80114d4 <uxr_framing_read_transport+0x7c>
 8011498:	f04f 0b00 	mov.w	fp, #0
 801149c:	f000 fc70 	bl	8011d80 <uxr_millis>
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	eba0 0808 	sub.w	r8, r0, r8
 80114a6:	eba3 0308 	sub.w	r3, r3, r8
 80114aa:	4658      	mov	r0, fp
 80114ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80114b0:	603b      	str	r3, [r7, #0]
 80114b2:	b003      	add	sp, #12
 80114b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b8:	2e00      	cmp	r6, #0
 80114ba:	d049      	beq.n	8011550 <uxr_framing_read_transport+0xf8>
 80114bc:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80114c0:	b2ed      	uxtb	r5, r5
 80114c2:	3e01      	subs	r6, #1
 80114c4:	455d      	cmp	r5, fp
 80114c6:	b2f6      	uxtb	r6, r6
 80114c8:	d9df      	bls.n	801148a <uxr_framing_read_transport+0x32>
 80114ca:	fa5f f58b 	uxtb.w	r5, fp
 80114ce:	2600      	movs	r6, #0
 80114d0:	2d00      	cmp	r5, #0
 80114d2:	d0e1      	beq.n	8011498 <uxr_framing_read_transport+0x40>
 80114d4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80114d8:	3102      	adds	r1, #2
 80114da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80114dc:	9300      	str	r3, [sp, #0]
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	4421      	add	r1, r4
 80114e2:	462a      	mov	r2, r5
 80114e4:	4650      	mov	r0, sl
 80114e6:	47c8      	blx	r9
 80114e8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80114ec:	4a1a      	ldr	r2, [pc, #104]	@ (8011558 <uxr_framing_read_transport+0x100>)
 80114ee:	4403      	add	r3, r0
 80114f0:	0859      	lsrs	r1, r3, #1
 80114f2:	fba2 2101 	umull	r2, r1, r2, r1
 80114f6:	0889      	lsrs	r1, r1, #2
 80114f8:	222a      	movs	r2, #42	@ 0x2a
 80114fa:	fb02 3111 	mls	r1, r2, r1, r3
 80114fe:	4683      	mov	fp, r0
 8011500:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8011504:	2800      	cmp	r0, #0
 8011506:	d0c7      	beq.n	8011498 <uxr_framing_read_transport+0x40>
 8011508:	42a8      	cmp	r0, r5
 801150a:	d1c7      	bne.n	801149c <uxr_framing_read_transport+0x44>
 801150c:	2e00      	cmp	r6, #0
 801150e:	d0c5      	beq.n	801149c <uxr_framing_read_transport+0x44>
 8011510:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011512:	9300      	str	r3, [sp, #0]
 8011514:	3102      	adds	r1, #2
 8011516:	4632      	mov	r2, r6
 8011518:	4421      	add	r1, r4
 801151a:	2300      	movs	r3, #0
 801151c:	4650      	mov	r0, sl
 801151e:	47c8      	blx	r9
 8011520:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011524:	4a0c      	ldr	r2, [pc, #48]	@ (8011558 <uxr_framing_read_transport+0x100>)
 8011526:	180b      	adds	r3, r1, r0
 8011528:	0859      	lsrs	r1, r3, #1
 801152a:	fba2 1201 	umull	r1, r2, r2, r1
 801152e:	0892      	lsrs	r2, r2, #2
 8011530:	212a      	movs	r1, #42	@ 0x2a
 8011532:	fb01 3312 	mls	r3, r1, r2, r3
 8011536:	eb00 0b05 	add.w	fp, r0, r5
 801153a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801153e:	e7ad      	b.n	801149c <uxr_framing_read_transport+0x44>
 8011540:	2600      	movs	r6, #0
 8011542:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8011546:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8011548:	d9bf      	bls.n	80114ca <uxr_framing_read_transport+0x72>
 801154a:	2102      	movs	r1, #2
 801154c:	2529      	movs	r5, #41	@ 0x29
 801154e:	e7c4      	b.n	80114da <uxr_framing_read_transport+0x82>
 8011550:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8011554:	b2ed      	uxtb	r5, r5
 8011556:	e796      	b.n	8011486 <uxr_framing_read_transport+0x2e>
 8011558:	30c30c31 	.word	0x30c30c31

0801155c <uxr_read_framed_msg>:
 801155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011560:	461e      	mov	r6, r3
 8011562:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8011566:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801156a:	429d      	cmp	r5, r3
 801156c:	b083      	sub	sp, #12
 801156e:	4604      	mov	r4, r0
 8011570:	4688      	mov	r8, r1
 8011572:	4691      	mov	r9, r2
 8011574:	f000 8188 	beq.w	8011888 <uxr_read_framed_msg+0x32c>
 8011578:	7823      	ldrb	r3, [r4, #0]
 801157a:	4dc1      	ldr	r5, [pc, #772]	@ (8011880 <uxr_read_framed_msg+0x324>)
 801157c:	4fc1      	ldr	r7, [pc, #772]	@ (8011884 <uxr_read_framed_msg+0x328>)
 801157e:	2b07      	cmp	r3, #7
 8011580:	d8fd      	bhi.n	801157e <uxr_read_framed_msg+0x22>
 8011582:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011586:	0115      	.short	0x0115
 8011588:	00d600f6 	.word	0x00d600f6
 801158c:	009000b9 	.word	0x009000b9
 8011590:	0030004d 	.word	0x0030004d
 8011594:	0008      	.short	0x0008
 8011596:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801159a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801159e:	4299      	cmp	r1, r3
 80115a0:	f000 814a 	beq.w	8011838 <uxr_read_framed_msg+0x2dc>
 80115a4:	18e2      	adds	r2, r4, r3
 80115a6:	7892      	ldrb	r2, [r2, #2]
 80115a8:	2a7d      	cmp	r2, #125	@ 0x7d
 80115aa:	f000 8199 	beq.w	80118e0 <uxr_read_framed_msg+0x384>
 80115ae:	3301      	adds	r3, #1
 80115b0:	0858      	lsrs	r0, r3, #1
 80115b2:	fba5 1000 	umull	r1, r0, r5, r0
 80115b6:	0880      	lsrs	r0, r0, #2
 80115b8:	212a      	movs	r1, #42	@ 0x2a
 80115ba:	fb01 3310 	mls	r3, r1, r0, r3
 80115be:	2a7e      	cmp	r2, #126	@ 0x7e
 80115c0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80115c4:	f000 8252 	beq.w	8011a6c <uxr_read_framed_msg+0x510>
 80115c8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80115ca:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80115cc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80115d0:	b29b      	uxth	r3, r3
 80115d2:	2200      	movs	r2, #0
 80115d4:	4299      	cmp	r1, r3
 80115d6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80115d8:	7022      	strb	r2, [r4, #0]
 80115da:	f000 8179 	beq.w	80118d0 <uxr_read_framed_msg+0x374>
 80115de:	2000      	movs	r0, #0
 80115e0:	b003      	add	sp, #12
 80115e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115e6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80115ea:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80115ee:	4299      	cmp	r1, r3
 80115f0:	f000 8131 	beq.w	8011856 <uxr_read_framed_msg+0x2fa>
 80115f4:	18e2      	adds	r2, r4, r3
 80115f6:	7890      	ldrb	r0, [r2, #2]
 80115f8:	287d      	cmp	r0, #125	@ 0x7d
 80115fa:	f000 8190 	beq.w	801191e <uxr_read_framed_msg+0x3c2>
 80115fe:	3301      	adds	r3, #1
 8011600:	085a      	lsrs	r2, r3, #1
 8011602:	fba5 1202 	umull	r1, r2, r5, r2
 8011606:	0892      	lsrs	r2, r2, #2
 8011608:	212a      	movs	r1, #42	@ 0x2a
 801160a:	fb01 3312 	mls	r3, r1, r2, r3
 801160e:	287e      	cmp	r0, #126	@ 0x7e
 8011610:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011614:	f000 821a 	beq.w	8011a4c <uxr_read_framed_msg+0x4f0>
 8011618:	2307      	movs	r3, #7
 801161a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801161c:	7023      	strb	r3, [r4, #0]
 801161e:	e7ae      	b.n	801157e <uxr_read_framed_msg+0x22>
 8011620:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011622:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011626:	459e      	cmp	lr, r3
 8011628:	d938      	bls.n	801169c <uxr_read_framed_msg+0x140>
 801162a:	ee07 8a90 	vmov	s15, r8
 801162e:	212a      	movs	r1, #42	@ 0x2a
 8011630:	e020      	b.n	8011674 <uxr_read_framed_msg+0x118>
 8011632:	f89b c002 	ldrb.w	ip, [fp, #2]
 8011636:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801163a:	f000 80d4 	beq.w	80117e6 <uxr_read_framed_msg+0x28a>
 801163e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8011642:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011646:	f000 8219 	beq.w	8011a7c <uxr_read_framed_msg+0x520>
 801164a:	f806 c003 	strb.w	ip, [r6, r3]
 801164e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8011652:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011654:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011658:	ea8a 000c 	eor.w	r0, sl, ip
 801165c:	b2c0      	uxtb	r0, r0
 801165e:	3301      	adds	r3, #1
 8011660:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8011664:	b29b      	uxth	r3, r3
 8011666:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801166a:	4573      	cmp	r3, lr
 801166c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801166e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8011670:	f080 8120 	bcs.w	80118b4 <uxr_read_framed_msg+0x358>
 8011674:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8011678:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801167c:	f100 0c01 	add.w	ip, r0, #1
 8011680:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011684:	fba5 8202 	umull	r8, r2, r5, r2
 8011688:	0892      	lsrs	r2, r2, #2
 801168a:	4582      	cmp	sl, r0
 801168c:	eb04 0b00 	add.w	fp, r4, r0
 8011690:	fb01 c212 	mls	r2, r1, r2, ip
 8011694:	d1cd      	bne.n	8011632 <uxr_read_framed_msg+0xd6>
 8011696:	ee17 8a90 	vmov	r8, s15
 801169a:	459e      	cmp	lr, r3
 801169c:	f040 8111 	bne.w	80118c2 <uxr_read_framed_msg+0x366>
 80116a0:	2306      	movs	r3, #6
 80116a2:	7023      	strb	r3, [r4, #0]
 80116a4:	e76b      	b.n	801157e <uxr_read_framed_msg+0x22>
 80116a6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80116aa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80116ae:	4298      	cmp	r0, r3
 80116b0:	f000 80c2 	beq.w	8011838 <uxr_read_framed_msg+0x2dc>
 80116b4:	18e2      	adds	r2, r4, r3
 80116b6:	7891      	ldrb	r1, [r2, #2]
 80116b8:	297d      	cmp	r1, #125	@ 0x7d
 80116ba:	f000 814c 	beq.w	8011956 <uxr_read_framed_msg+0x3fa>
 80116be:	3301      	adds	r3, #1
 80116c0:	085a      	lsrs	r2, r3, #1
 80116c2:	fba5 0202 	umull	r0, r2, r5, r2
 80116c6:	0892      	lsrs	r2, r2, #2
 80116c8:	202a      	movs	r0, #42	@ 0x2a
 80116ca:	fb00 3312 	mls	r3, r0, r2, r3
 80116ce:	297e      	cmp	r1, #126	@ 0x7e
 80116d0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80116d4:	f000 81ca 	beq.w	8011a6c <uxr_read_framed_msg+0x510>
 80116d8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80116da:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80116de:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	2000      	movs	r0, #0
 80116e4:	428b      	cmp	r3, r1
 80116e6:	8623      	strh	r3, [r4, #48]	@ 0x30
 80116e8:	8660      	strh	r0, [r4, #50]	@ 0x32
 80116ea:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80116ec:	f240 80df 	bls.w	80118ae <uxr_read_framed_msg+0x352>
 80116f0:	7020      	strb	r0, [r4, #0]
 80116f2:	b003      	add	sp, #12
 80116f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116f8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80116fc:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011700:	4299      	cmp	r1, r3
 8011702:	f000 80a8 	beq.w	8011856 <uxr_read_framed_msg+0x2fa>
 8011706:	18e2      	adds	r2, r4, r3
 8011708:	7890      	ldrb	r0, [r2, #2]
 801170a:	287d      	cmp	r0, #125	@ 0x7d
 801170c:	f000 8164 	beq.w	80119d8 <uxr_read_framed_msg+0x47c>
 8011710:	3301      	adds	r3, #1
 8011712:	085a      	lsrs	r2, r3, #1
 8011714:	fba5 1202 	umull	r1, r2, r5, r2
 8011718:	0892      	lsrs	r2, r2, #2
 801171a:	212a      	movs	r1, #42	@ 0x2a
 801171c:	fb01 3312 	mls	r3, r1, r2, r3
 8011720:	287e      	cmp	r0, #126	@ 0x7e
 8011722:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011726:	f000 8191 	beq.w	8011a4c <uxr_read_framed_msg+0x4f0>
 801172a:	2304      	movs	r3, #4
 801172c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801172e:	7023      	strb	r3, [r4, #0]
 8011730:	e725      	b.n	801157e <uxr_read_framed_msg+0x22>
 8011732:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011736:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801173a:	4290      	cmp	r0, r2
 801173c:	f000 80b3 	beq.w	80118a6 <uxr_read_framed_msg+0x34a>
 8011740:	18a3      	adds	r3, r4, r2
 8011742:	7899      	ldrb	r1, [r3, #2]
 8011744:	297d      	cmp	r1, #125	@ 0x7d
 8011746:	f000 8164 	beq.w	8011a12 <uxr_read_framed_msg+0x4b6>
 801174a:	3201      	adds	r2, #1
 801174c:	0850      	lsrs	r0, r2, #1
 801174e:	fba5 3000 	umull	r3, r0, r5, r0
 8011752:	0880      	lsrs	r0, r0, #2
 8011754:	232a      	movs	r3, #42	@ 0x2a
 8011756:	fb03 2210 	mls	r2, r3, r0, r2
 801175a:	297e      	cmp	r1, #126	@ 0x7e
 801175c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011760:	f000 8188 	beq.w	8011a74 <uxr_read_framed_msg+0x518>
 8011764:	7863      	ldrb	r3, [r4, #1]
 8011766:	428b      	cmp	r3, r1
 8011768:	bf0c      	ite	eq
 801176a:	2303      	moveq	r3, #3
 801176c:	2300      	movne	r3, #0
 801176e:	7023      	strb	r3, [r4, #0]
 8011770:	e705      	b.n	801157e <uxr_read_framed_msg+0x22>
 8011772:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011776:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801177a:	2200      	movs	r2, #0
 801177c:	4299      	cmp	r1, r3
 801177e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8011782:	d06c      	beq.n	801185e <uxr_read_framed_msg+0x302>
 8011784:	18e2      	adds	r2, r4, r3
 8011786:	7890      	ldrb	r0, [r2, #2]
 8011788:	287d      	cmp	r0, #125	@ 0x7d
 801178a:	f000 8101 	beq.w	8011990 <uxr_read_framed_msg+0x434>
 801178e:	3301      	adds	r3, #1
 8011790:	085a      	lsrs	r2, r3, #1
 8011792:	fba5 1202 	umull	r1, r2, r5, r2
 8011796:	0892      	lsrs	r2, r2, #2
 8011798:	212a      	movs	r1, #42	@ 0x2a
 801179a:	fb01 3312 	mls	r3, r1, r2, r3
 801179e:	287e      	cmp	r0, #126	@ 0x7e
 80117a0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80117a4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80117a8:	d059      	beq.n	801185e <uxr_read_framed_msg+0x302>
 80117aa:	2302      	movs	r3, #2
 80117ac:	7023      	strb	r3, [r4, #0]
 80117ae:	e6e6      	b.n	801157e <uxr_read_framed_msg+0x22>
 80117b0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80117b4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80117b8:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80117bc:	1c51      	adds	r1, r2, #1
 80117be:	084b      	lsrs	r3, r1, #1
 80117c0:	fba5 c303 	umull	ip, r3, r5, r3
 80117c4:	089b      	lsrs	r3, r3, #2
 80117c6:	fb0e 1313 	mls	r3, lr, r3, r1
 80117ca:	4592      	cmp	sl, r2
 80117cc:	eb04 0002 	add.w	r0, r4, r2
 80117d0:	b2da      	uxtb	r2, r3
 80117d2:	f43f af04 	beq.w	80115de <uxr_read_framed_msg+0x82>
 80117d6:	7883      	ldrb	r3, [r0, #2]
 80117d8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80117dc:	2b7e      	cmp	r3, #126	@ 0x7e
 80117de:	d1ed      	bne.n	80117bc <uxr_read_framed_msg+0x260>
 80117e0:	2301      	movs	r3, #1
 80117e2:	7023      	strb	r3, [r4, #0]
 80117e4:	e6cb      	b.n	801157e <uxr_read_framed_msg+0x22>
 80117e6:	f100 0c01 	add.w	ip, r0, #1
 80117ea:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80117ee:	fba5 8202 	umull	r8, r2, r5, r2
 80117f2:	0892      	lsrs	r2, r2, #2
 80117f4:	fb01 c212 	mls	r2, r1, r2, ip
 80117f8:	eb04 0c02 	add.w	ip, r4, r2
 80117fc:	b2d2      	uxtb	r2, r2
 80117fe:	4592      	cmp	sl, r2
 8011800:	f100 0002 	add.w	r0, r0, #2
 8011804:	f43f af47 	beq.w	8011696 <uxr_read_framed_msg+0x13a>
 8011808:	0842      	lsrs	r2, r0, #1
 801180a:	f89c a002 	ldrb.w	sl, [ip, #2]
 801180e:	fba5 8202 	umull	r8, r2, r5, r2
 8011812:	0892      	lsrs	r2, r2, #2
 8011814:	fb01 0012 	mls	r0, r1, r2, r0
 8011818:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801181c:	f08a 0c20 	eor.w	ip, sl, #32
 8011820:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8011824:	f47f af11 	bne.w	801164a <uxr_read_framed_msg+0xee>
 8011828:	459e      	cmp	lr, r3
 801182a:	ee17 8a90 	vmov	r8, s15
 801182e:	f43f af37 	beq.w	80116a0 <uxr_read_framed_msg+0x144>
 8011832:	2301      	movs	r3, #1
 8011834:	7023      	strb	r3, [r4, #0]
 8011836:	e6a2      	b.n	801157e <uxr_read_framed_msg+0x22>
 8011838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801183a:	9300      	str	r3, [sp, #0]
 801183c:	2301      	movs	r3, #1
 801183e:	9301      	str	r3, [sp, #4]
 8011840:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011842:	464a      	mov	r2, r9
 8011844:	4641      	mov	r1, r8
 8011846:	4620      	mov	r0, r4
 8011848:	f7ff fe06 	bl	8011458 <uxr_framing_read_transport>
 801184c:	2800      	cmp	r0, #0
 801184e:	f43f aec6 	beq.w	80115de <uxr_read_framed_msg+0x82>
 8011852:	7823      	ldrb	r3, [r4, #0]
 8011854:	e693      	b.n	801157e <uxr_read_framed_msg+0x22>
 8011856:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011858:	9300      	str	r3, [sp, #0]
 801185a:	2302      	movs	r3, #2
 801185c:	e7ef      	b.n	801183e <uxr_read_framed_msg+0x2e2>
 801185e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011860:	9300      	str	r3, [sp, #0]
 8011862:	2304      	movs	r3, #4
 8011864:	9301      	str	r3, [sp, #4]
 8011866:	464a      	mov	r2, r9
 8011868:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801186a:	4641      	mov	r1, r8
 801186c:	4620      	mov	r0, r4
 801186e:	f7ff fdf3 	bl	8011458 <uxr_framing_read_transport>
 8011872:	2800      	cmp	r0, #0
 8011874:	d1ed      	bne.n	8011852 <uxr_read_framed_msg+0x2f6>
 8011876:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801187a:	2b7e      	cmp	r3, #126	@ 0x7e
 801187c:	d0e9      	beq.n	8011852 <uxr_read_framed_msg+0x2f6>
 801187e:	e6ae      	b.n	80115de <uxr_read_framed_msg+0x82>
 8011880:	30c30c31 	.word	0x30c30c31
 8011884:	0801afa0 	.word	0x0801afa0
 8011888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801188a:	9300      	str	r3, [sp, #0]
 801188c:	2305      	movs	r3, #5
 801188e:	9301      	str	r3, [sp, #4]
 8011890:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011892:	f7ff fde1 	bl	8011458 <uxr_framing_read_transport>
 8011896:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801189a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801189e:	429a      	cmp	r2, r3
 80118a0:	f43f ae9d 	beq.w	80115de <uxr_read_framed_msg+0x82>
 80118a4:	e668      	b.n	8011578 <uxr_read_framed_msg+0x1c>
 80118a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80118a8:	9300      	str	r3, [sp, #0]
 80118aa:	2303      	movs	r3, #3
 80118ac:	e7c7      	b.n	801183e <uxr_read_framed_msg+0x2e2>
 80118ae:	2305      	movs	r3, #5
 80118b0:	7023      	strb	r3, [r4, #0]
 80118b2:	e664      	b.n	801157e <uxr_read_framed_msg+0x22>
 80118b4:	ee17 8a90 	vmov	r8, s15
 80118b8:	f43f aef2 	beq.w	80116a0 <uxr_read_framed_msg+0x144>
 80118bc:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80118c0:	d08e      	beq.n	80117e0 <uxr_read_framed_msg+0x284>
 80118c2:	ebae 0303 	sub.w	r3, lr, r3
 80118c6:	3302      	adds	r3, #2
 80118c8:	9301      	str	r3, [sp, #4]
 80118ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80118cc:	9300      	str	r3, [sp, #0]
 80118ce:	e7b7      	b.n	8011840 <uxr_read_framed_msg+0x2e4>
 80118d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80118d2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80118d6:	7013      	strb	r3, [r2, #0]
 80118d8:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80118da:	b003      	add	sp, #12
 80118dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118e0:	f103 0c01 	add.w	ip, r3, #1
 80118e4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80118e8:	fba5 0202 	umull	r0, r2, r5, r2
 80118ec:	0892      	lsrs	r2, r2, #2
 80118ee:	202a      	movs	r0, #42	@ 0x2a
 80118f0:	fb00 c212 	mls	r2, r0, r2, ip
 80118f4:	fa5f fc82 	uxtb.w	ip, r2
 80118f8:	4561      	cmp	r1, ip
 80118fa:	d09d      	beq.n	8011838 <uxr_read_framed_msg+0x2dc>
 80118fc:	3302      	adds	r3, #2
 80118fe:	4422      	add	r2, r4
 8011900:	0859      	lsrs	r1, r3, #1
 8011902:	7892      	ldrb	r2, [r2, #2]
 8011904:	fba5 c101 	umull	ip, r1, r5, r1
 8011908:	0889      	lsrs	r1, r1, #2
 801190a:	fb00 3311 	mls	r3, r0, r1, r3
 801190e:	2a7e      	cmp	r2, #126	@ 0x7e
 8011910:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011914:	f000 80aa 	beq.w	8011a6c <uxr_read_framed_msg+0x510>
 8011918:	f082 0220 	eor.w	r2, r2, #32
 801191c:	e654      	b.n	80115c8 <uxr_read_framed_msg+0x6c>
 801191e:	1c58      	adds	r0, r3, #1
 8011920:	0842      	lsrs	r2, r0, #1
 8011922:	fba5 c202 	umull	ip, r2, r5, r2
 8011926:	0892      	lsrs	r2, r2, #2
 8011928:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801192c:	fb0c 0212 	mls	r2, ip, r2, r0
 8011930:	b2d0      	uxtb	r0, r2
 8011932:	4281      	cmp	r1, r0
 8011934:	d08f      	beq.n	8011856 <uxr_read_framed_msg+0x2fa>
 8011936:	4422      	add	r2, r4
 8011938:	3302      	adds	r3, #2
 801193a:	7890      	ldrb	r0, [r2, #2]
 801193c:	085a      	lsrs	r2, r3, #1
 801193e:	fba5 1202 	umull	r1, r2, r5, r2
 8011942:	0892      	lsrs	r2, r2, #2
 8011944:	fb0c 3312 	mls	r3, ip, r2, r3
 8011948:	287e      	cmp	r0, #126	@ 0x7e
 801194a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801194e:	d07d      	beq.n	8011a4c <uxr_read_framed_msg+0x4f0>
 8011950:	f080 0020 	eor.w	r0, r0, #32
 8011954:	e660      	b.n	8011618 <uxr_read_framed_msg+0xbc>
 8011956:	1c59      	adds	r1, r3, #1
 8011958:	084a      	lsrs	r2, r1, #1
 801195a:	fba5 c202 	umull	ip, r2, r5, r2
 801195e:	0892      	lsrs	r2, r2, #2
 8011960:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011964:	fb0c 1212 	mls	r2, ip, r2, r1
 8011968:	b2d1      	uxtb	r1, r2
 801196a:	4288      	cmp	r0, r1
 801196c:	f43f af64 	beq.w	8011838 <uxr_read_framed_msg+0x2dc>
 8011970:	4422      	add	r2, r4
 8011972:	3302      	adds	r3, #2
 8011974:	7891      	ldrb	r1, [r2, #2]
 8011976:	085a      	lsrs	r2, r3, #1
 8011978:	fba5 0202 	umull	r0, r2, r5, r2
 801197c:	0892      	lsrs	r2, r2, #2
 801197e:	fb0c 3312 	mls	r3, ip, r2, r3
 8011982:	297e      	cmp	r1, #126	@ 0x7e
 8011984:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011988:	d070      	beq.n	8011a6c <uxr_read_framed_msg+0x510>
 801198a:	f081 0120 	eor.w	r1, r1, #32
 801198e:	e6a3      	b.n	80116d8 <uxr_read_framed_msg+0x17c>
 8011990:	f103 0c01 	add.w	ip, r3, #1
 8011994:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011998:	fba5 0202 	umull	r0, r2, r5, r2
 801199c:	0892      	lsrs	r2, r2, #2
 801199e:	202a      	movs	r0, #42	@ 0x2a
 80119a0:	fb00 c212 	mls	r2, r0, r2, ip
 80119a4:	fa5f fc82 	uxtb.w	ip, r2
 80119a8:	4561      	cmp	r1, ip
 80119aa:	f43f af58 	beq.w	801185e <uxr_read_framed_msg+0x302>
 80119ae:	4422      	add	r2, r4
 80119b0:	3302      	adds	r3, #2
 80119b2:	7891      	ldrb	r1, [r2, #2]
 80119b4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80119b8:	085a      	lsrs	r2, r3, #1
 80119ba:	fba5 c202 	umull	ip, r2, r5, r2
 80119be:	0892      	lsrs	r2, r2, #2
 80119c0:	fb00 3312 	mls	r3, r0, r2, r3
 80119c4:	297e      	cmp	r1, #126	@ 0x7e
 80119c6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80119ca:	f43f af48 	beq.w	801185e <uxr_read_framed_msg+0x302>
 80119ce:	f081 0120 	eor.w	r1, r1, #32
 80119d2:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80119d6:	e6e8      	b.n	80117aa <uxr_read_framed_msg+0x24e>
 80119d8:	1c58      	adds	r0, r3, #1
 80119da:	0842      	lsrs	r2, r0, #1
 80119dc:	fba5 c202 	umull	ip, r2, r5, r2
 80119e0:	0892      	lsrs	r2, r2, #2
 80119e2:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80119e6:	fb0c 0212 	mls	r2, ip, r2, r0
 80119ea:	b2d0      	uxtb	r0, r2
 80119ec:	4281      	cmp	r1, r0
 80119ee:	f43f af32 	beq.w	8011856 <uxr_read_framed_msg+0x2fa>
 80119f2:	4422      	add	r2, r4
 80119f4:	3302      	adds	r3, #2
 80119f6:	7890      	ldrb	r0, [r2, #2]
 80119f8:	085a      	lsrs	r2, r3, #1
 80119fa:	fba5 1202 	umull	r1, r2, r5, r2
 80119fe:	0892      	lsrs	r2, r2, #2
 8011a00:	fb0c 3312 	mls	r3, ip, r2, r3
 8011a04:	287e      	cmp	r0, #126	@ 0x7e
 8011a06:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011a0a:	d01f      	beq.n	8011a4c <uxr_read_framed_msg+0x4f0>
 8011a0c:	f080 0020 	eor.w	r0, r0, #32
 8011a10:	e68b      	b.n	801172a <uxr_read_framed_msg+0x1ce>
 8011a12:	1c51      	adds	r1, r2, #1
 8011a14:	084b      	lsrs	r3, r1, #1
 8011a16:	fba5 c303 	umull	ip, r3, r5, r3
 8011a1a:	089b      	lsrs	r3, r3, #2
 8011a1c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011a20:	fb0c 1313 	mls	r3, ip, r3, r1
 8011a24:	b2d9      	uxtb	r1, r3
 8011a26:	4288      	cmp	r0, r1
 8011a28:	f43f af3d 	beq.w	80118a6 <uxr_read_framed_msg+0x34a>
 8011a2c:	3202      	adds	r2, #2
 8011a2e:	4423      	add	r3, r4
 8011a30:	0850      	lsrs	r0, r2, #1
 8011a32:	789b      	ldrb	r3, [r3, #2]
 8011a34:	fba5 1000 	umull	r1, r0, r5, r0
 8011a38:	0880      	lsrs	r0, r0, #2
 8011a3a:	fb0c 2210 	mls	r2, ip, r0, r2
 8011a3e:	2b7e      	cmp	r3, #126	@ 0x7e
 8011a40:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011a44:	d016      	beq.n	8011a74 <uxr_read_framed_msg+0x518>
 8011a46:	f083 0120 	eor.w	r1, r3, #32
 8011a4a:	e68b      	b.n	8011764 <uxr_read_framed_msg+0x208>
 8011a4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a4e:	9300      	str	r3, [sp, #0]
 8011a50:	2302      	movs	r3, #2
 8011a52:	9301      	str	r3, [sp, #4]
 8011a54:	464a      	mov	r2, r9
 8011a56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a58:	4641      	mov	r1, r8
 8011a5a:	4620      	mov	r0, r4
 8011a5c:	f7ff fcfc 	bl	8011458 <uxr_framing_read_transport>
 8011a60:	2800      	cmp	r0, #0
 8011a62:	f47f aef6 	bne.w	8011852 <uxr_read_framed_msg+0x2f6>
 8011a66:	2301      	movs	r3, #1
 8011a68:	7023      	strb	r3, [r4, #0]
 8011a6a:	e588      	b.n	801157e <uxr_read_framed_msg+0x22>
 8011a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a6e:	9300      	str	r3, [sp, #0]
 8011a70:	2301      	movs	r3, #1
 8011a72:	e7ee      	b.n	8011a52 <uxr_read_framed_msg+0x4f6>
 8011a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a76:	9300      	str	r3, [sp, #0]
 8011a78:	2303      	movs	r3, #3
 8011a7a:	e7ea      	b.n	8011a52 <uxr_read_framed_msg+0x4f6>
 8011a7c:	ee17 8a90 	vmov	r8, s15
 8011a80:	e6ae      	b.n	80117e0 <uxr_read_framed_msg+0x284>
 8011a82:	bf00      	nop

08011a84 <uxr_stream_id>:
 8011a84:	2901      	cmp	r1, #1
 8011a86:	b082      	sub	sp, #8
 8011a88:	d01d      	beq.n	8011ac6 <uxr_stream_id+0x42>
 8011a8a:	2902      	cmp	r1, #2
 8011a8c:	f04f 0c00 	mov.w	ip, #0
 8011a90:	d01e      	beq.n	8011ad0 <uxr_stream_id+0x4c>
 8011a92:	2300      	movs	r3, #0
 8011a94:	f36c 0307 	bfi	r3, ip, #0, #8
 8011a98:	f360 230f 	bfi	r3, r0, #8, #8
 8011a9c:	f361 4317 	bfi	r3, r1, #16, #8
 8011aa0:	f362 631f 	bfi	r3, r2, #24, #8
 8011aa4:	b2da      	uxtb	r2, r3
 8011aa6:	2000      	movs	r0, #0
 8011aa8:	f362 0007 	bfi	r0, r2, #0, #8
 8011aac:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011ab0:	f362 200f 	bfi	r0, r2, #8, #8
 8011ab4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011ab8:	f362 4017 	bfi	r0, r2, #16, #8
 8011abc:	0e1b      	lsrs	r3, r3, #24
 8011abe:	f363 601f 	bfi	r0, r3, #24, #8
 8011ac2:	b002      	add	sp, #8
 8011ac4:	4770      	bx	lr
 8011ac6:	f100 0c01 	add.w	ip, r0, #1
 8011aca:	fa5f fc8c 	uxtb.w	ip, ip
 8011ace:	e7e0      	b.n	8011a92 <uxr_stream_id+0xe>
 8011ad0:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8011ad4:	e7dd      	b.n	8011a92 <uxr_stream_id+0xe>
 8011ad6:	bf00      	nop

08011ad8 <uxr_stream_id_from_raw>:
 8011ad8:	b082      	sub	sp, #8
 8011ada:	b130      	cbz	r0, 8011aea <uxr_stream_id_from_raw+0x12>
 8011adc:	0603      	lsls	r3, r0, #24
 8011ade:	d420      	bmi.n	8011b22 <uxr_stream_id_from_raw+0x4a>
 8011ae0:	1e42      	subs	r2, r0, #1
 8011ae2:	b2d2      	uxtb	r2, r2
 8011ae4:	f04f 0c01 	mov.w	ip, #1
 8011ae8:	e001      	b.n	8011aee <uxr_stream_id_from_raw+0x16>
 8011aea:	4684      	mov	ip, r0
 8011aec:	4602      	mov	r2, r0
 8011aee:	2300      	movs	r3, #0
 8011af0:	f360 0307 	bfi	r3, r0, #0, #8
 8011af4:	f362 230f 	bfi	r3, r2, #8, #8
 8011af8:	f36c 4317 	bfi	r3, ip, #16, #8
 8011afc:	f361 631f 	bfi	r3, r1, #24, #8
 8011b00:	b2da      	uxtb	r2, r3
 8011b02:	2000      	movs	r0, #0
 8011b04:	f362 0007 	bfi	r0, r2, #0, #8
 8011b08:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011b0c:	f362 200f 	bfi	r0, r2, #8, #8
 8011b10:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011b14:	f362 4017 	bfi	r0, r2, #16, #8
 8011b18:	0e1b      	lsrs	r3, r3, #24
 8011b1a:	f363 601f 	bfi	r0, r3, #24, #8
 8011b1e:	b002      	add	sp, #8
 8011b20:	4770      	bx	lr
 8011b22:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011b26:	f04f 0c02 	mov.w	ip, #2
 8011b2a:	e7e0      	b.n	8011aee <uxr_stream_id_from_raw+0x16>

08011b2c <uxr_init_stream_storage>:
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	7403      	strb	r3, [r0, #16]
 8011b30:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011b34:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011b38:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8011b3c:	4770      	bx	lr
 8011b3e:	bf00      	nop

08011b40 <uxr_reset_stream_storage>:
 8011b40:	b570      	push	{r4, r5, r6, lr}
 8011b42:	7c03      	ldrb	r3, [r0, #16]
 8011b44:	4604      	mov	r4, r0
 8011b46:	b153      	cbz	r3, 8011b5e <uxr_reset_stream_storage+0x1e>
 8011b48:	4606      	mov	r6, r0
 8011b4a:	2500      	movs	r5, #0
 8011b4c:	4630      	mov	r0, r6
 8011b4e:	f005 fe25 	bl	801779c <uxr_reset_output_best_effort_stream>
 8011b52:	7c23      	ldrb	r3, [r4, #16]
 8011b54:	3501      	adds	r5, #1
 8011b56:	42ab      	cmp	r3, r5
 8011b58:	f106 0610 	add.w	r6, r6, #16
 8011b5c:	d8f6      	bhi.n	8011b4c <uxr_reset_stream_storage+0xc>
 8011b5e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011b62:	b163      	cbz	r3, 8011b7e <uxr_reset_stream_storage+0x3e>
 8011b64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011b68:	2500      	movs	r5, #0
 8011b6a:	4630      	mov	r0, r6
 8011b6c:	f005 fc18 	bl	80173a0 <uxr_reset_input_best_effort_stream>
 8011b70:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011b74:	3501      	adds	r5, #1
 8011b76:	42ab      	cmp	r3, r5
 8011b78:	f106 0602 	add.w	r6, r6, #2
 8011b7c:	d8f5      	bhi.n	8011b6a <uxr_reset_stream_storage+0x2a>
 8011b7e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011b82:	b163      	cbz	r3, 8011b9e <uxr_reset_stream_storage+0x5e>
 8011b84:	f104 0618 	add.w	r6, r4, #24
 8011b88:	2500      	movs	r5, #0
 8011b8a:	4630      	mov	r0, r6
 8011b8c:	f005 feb2 	bl	80178f4 <uxr_reset_output_reliable_stream>
 8011b90:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011b94:	3501      	adds	r5, #1
 8011b96:	42ab      	cmp	r3, r5
 8011b98:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8011b9c:	d8f5      	bhi.n	8011b8a <uxr_reset_stream_storage+0x4a>
 8011b9e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011ba2:	b163      	cbz	r3, 8011bbe <uxr_reset_stream_storage+0x7e>
 8011ba4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8011ba8:	2500      	movs	r5, #0
 8011baa:	4630      	mov	r0, r6
 8011bac:	f005 fc6c 	bl	8017488 <uxr_reset_input_reliable_stream>
 8011bb0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011bb4:	3501      	adds	r5, #1
 8011bb6:	42ab      	cmp	r3, r5
 8011bb8:	f106 0618 	add.w	r6, r6, #24
 8011bbc:	d8f5      	bhi.n	8011baa <uxr_reset_stream_storage+0x6a>
 8011bbe:	bd70      	pop	{r4, r5, r6, pc}

08011bc0 <uxr_add_output_best_effort_buffer>:
 8011bc0:	b510      	push	{r4, lr}
 8011bc2:	7c04      	ldrb	r4, [r0, #16]
 8011bc4:	f104 0c01 	add.w	ip, r4, #1
 8011bc8:	b082      	sub	sp, #8
 8011bca:	f880 c010 	strb.w	ip, [r0, #16]
 8011bce:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011bd2:	f005 fdd9 	bl	8017788 <uxr_init_output_best_effort_stream>
 8011bd6:	2201      	movs	r2, #1
 8011bd8:	4611      	mov	r1, r2
 8011bda:	4620      	mov	r0, r4
 8011bdc:	b002      	add	sp, #8
 8011bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011be2:	f7ff bf4f 	b.w	8011a84 <uxr_stream_id>
 8011be6:	bf00      	nop

08011be8 <uxr_add_output_reliable_buffer>:
 8011be8:	b510      	push	{r4, lr}
 8011bea:	b084      	sub	sp, #16
 8011bec:	4684      	mov	ip, r0
 8011bee:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011bf2:	9000      	str	r0, [sp, #0]
 8011bf4:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8011bf8:	2028      	movs	r0, #40	@ 0x28
 8011bfa:	fb00 c004 	mla	r0, r0, r4, ip
 8011bfe:	f104 0e01 	add.w	lr, r4, #1
 8011c02:	3018      	adds	r0, #24
 8011c04:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8011c08:	f005 fe3c 	bl	8017884 <uxr_init_output_reliable_stream>
 8011c0c:	2201      	movs	r2, #1
 8011c0e:	2102      	movs	r1, #2
 8011c10:	4620      	mov	r0, r4
 8011c12:	b004      	add	sp, #16
 8011c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c18:	f7ff bf34 	b.w	8011a84 <uxr_stream_id>

08011c1c <uxr_add_input_best_effort_buffer>:
 8011c1c:	b510      	push	{r4, lr}
 8011c1e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011c22:	4603      	mov	r3, r0
 8011c24:	1c62      	adds	r2, r4, #1
 8011c26:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8011c2a:	b082      	sub	sp, #8
 8011c2c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8011c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011c34:	f005 fbb0 	bl	8017398 <uxr_init_input_best_effort_stream>
 8011c38:	2200      	movs	r2, #0
 8011c3a:	2101      	movs	r1, #1
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	b002      	add	sp, #8
 8011c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c44:	f7ff bf1e 	b.w	8011a84 <uxr_stream_id>

08011c48 <uxr_add_input_reliable_buffer>:
 8011c48:	b510      	push	{r4, lr}
 8011c4a:	b084      	sub	sp, #16
 8011c4c:	4684      	mov	ip, r0
 8011c4e:	9806      	ldr	r0, [sp, #24]
 8011c50:	9000      	str	r0, [sp, #0]
 8011c52:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8011c56:	2018      	movs	r0, #24
 8011c58:	fb00 c004 	mla	r0, r0, r4, ip
 8011c5c:	f104 0e01 	add.w	lr, r4, #1
 8011c60:	3048      	adds	r0, #72	@ 0x48
 8011c62:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8011c66:	f005 fbe3 	bl	8017430 <uxr_init_input_reliable_stream>
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	2102      	movs	r1, #2
 8011c6e:	4620      	mov	r0, r4
 8011c70:	b004      	add	sp, #16
 8011c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c76:	f7ff bf05 	b.w	8011a84 <uxr_stream_id>
 8011c7a:	bf00      	nop

08011c7c <uxr_get_output_best_effort_stream>:
 8011c7c:	7c03      	ldrb	r3, [r0, #16]
 8011c7e:	428b      	cmp	r3, r1
 8011c80:	bf8c      	ite	hi
 8011c82:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011c86:	2000      	movls	r0, #0
 8011c88:	4770      	bx	lr
 8011c8a:	bf00      	nop

08011c8c <uxr_get_output_reliable_stream>:
 8011c8c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011c90:	428b      	cmp	r3, r1
 8011c92:	bf83      	ittte	hi
 8011c94:	2328      	movhi	r3, #40	@ 0x28
 8011c96:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011c9a:	3018      	addhi	r0, #24
 8011c9c:	2000      	movls	r0, #0
 8011c9e:	4770      	bx	lr

08011ca0 <uxr_get_input_best_effort_stream>:
 8011ca0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011ca4:	428b      	cmp	r3, r1
 8011ca6:	bf86      	itte	hi
 8011ca8:	3121      	addhi	r1, #33	@ 0x21
 8011caa:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8011cae:	2000      	movls	r0, #0
 8011cb0:	4770      	bx	lr
 8011cb2:	bf00      	nop

08011cb4 <uxr_get_input_reliable_stream>:
 8011cb4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8011cb8:	428b      	cmp	r3, r1
 8011cba:	bf83      	ittte	hi
 8011cbc:	2318      	movhi	r3, #24
 8011cbe:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011cc2:	3048      	addhi	r0, #72	@ 0x48
 8011cc4:	2000      	movls	r0, #0
 8011cc6:	4770      	bx	lr

08011cc8 <uxr_output_streams_confirmed>:
 8011cc8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011ccc:	b183      	cbz	r3, 8011cf0 <uxr_output_streams_confirmed+0x28>
 8011cce:	b570      	push	{r4, r5, r6, lr}
 8011cd0:	4606      	mov	r6, r0
 8011cd2:	f100 0518 	add.w	r5, r0, #24
 8011cd6:	2400      	movs	r4, #0
 8011cd8:	e001      	b.n	8011cde <uxr_output_streams_confirmed+0x16>
 8011cda:	3528      	adds	r5, #40	@ 0x28
 8011cdc:	b138      	cbz	r0, 8011cee <uxr_output_streams_confirmed+0x26>
 8011cde:	4628      	mov	r0, r5
 8011ce0:	f006 f878 	bl	8017dd4 <uxr_is_output_up_to_date>
 8011ce4:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011ce8:	3401      	adds	r4, #1
 8011cea:	42a3      	cmp	r3, r4
 8011cec:	d8f5      	bhi.n	8011cda <uxr_output_streams_confirmed+0x12>
 8011cee:	bd70      	pop	{r4, r5, r6, pc}
 8011cf0:	2001      	movs	r0, #1
 8011cf2:	4770      	bx	lr

08011cf4 <uxr_buffer_submessage_header>:
 8011cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cf6:	4604      	mov	r4, r0
 8011cf8:	460e      	mov	r6, r1
 8011cfa:	2104      	movs	r1, #4
 8011cfc:	4615      	mov	r5, r2
 8011cfe:	461f      	mov	r7, r3
 8011d00:	f7fa f8f8 	bl	800bef4 <ucdr_align_to>
 8011d04:	2301      	movs	r3, #1
 8011d06:	ea47 0203 	orr.w	r2, r7, r3
 8011d0a:	4631      	mov	r1, r6
 8011d0c:	7523      	strb	r3, [r4, #20]
 8011d0e:	4620      	mov	r0, r4
 8011d10:	462b      	mov	r3, r5
 8011d12:	f000 fa27 	bl	8012164 <uxr_serialize_submessage_header>
 8011d16:	4620      	mov	r0, r4
 8011d18:	f7fa f902 	bl	800bf20 <ucdr_buffer_remaining>
 8011d1c:	42a8      	cmp	r0, r5
 8011d1e:	bf34      	ite	cc
 8011d20:	2000      	movcc	r0, #0
 8011d22:	2001      	movcs	r0, #1
 8011d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d26:	bf00      	nop

08011d28 <uxr_read_submessage_header>:
 8011d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d2c:	4604      	mov	r4, r0
 8011d2e:	460d      	mov	r5, r1
 8011d30:	2104      	movs	r1, #4
 8011d32:	4616      	mov	r6, r2
 8011d34:	4698      	mov	r8, r3
 8011d36:	f7fa f8dd 	bl	800bef4 <ucdr_align_to>
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	f7fa f8f0 	bl	800bf20 <ucdr_buffer_remaining>
 8011d40:	2803      	cmp	r0, #3
 8011d42:	bf8c      	ite	hi
 8011d44:	2701      	movhi	r7, #1
 8011d46:	2700      	movls	r7, #0
 8011d48:	d802      	bhi.n	8011d50 <uxr_read_submessage_header+0x28>
 8011d4a:	4638      	mov	r0, r7
 8011d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d50:	4633      	mov	r3, r6
 8011d52:	4642      	mov	r2, r8
 8011d54:	4620      	mov	r0, r4
 8011d56:	4629      	mov	r1, r5
 8011d58:	f000 fa18 	bl	801218c <uxr_deserialize_submessage_header>
 8011d5c:	f898 3000 	ldrb.w	r3, [r8]
 8011d60:	f003 0201 	and.w	r2, r3, #1
 8011d64:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8011d68:	f888 3000 	strb.w	r3, [r8]
 8011d6c:	7522      	strb	r2, [r4, #20]
 8011d6e:	4638      	mov	r0, r7
 8011d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d74 <uxr_submessage_padding>:
 8011d74:	f010 0003 	ands.w	r0, r0, #3
 8011d78:	bf18      	it	ne
 8011d7a:	f1c0 0004 	rsbne	r0, r0, #4
 8011d7e:	4770      	bx	lr

08011d80 <uxr_millis>:
 8011d80:	b510      	push	{r4, lr}
 8011d82:	b084      	sub	sp, #16
 8011d84:	4669      	mov	r1, sp
 8011d86:	2001      	movs	r0, #1
 8011d88:	f7f0 f88a 	bl	8001ea0 <clock_gettime>
 8011d8c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8011d90:	4906      	ldr	r1, [pc, #24]	@ (8011dac <uxr_millis+0x2c>)
 8011d92:	fba0 0301 	umull	r0, r3, r0, r1
 8011d96:	1900      	adds	r0, r0, r4
 8011d98:	fb01 3102 	mla	r1, r1, r2, r3
 8011d9c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8011da0:	4a03      	ldr	r2, [pc, #12]	@ (8011db0 <uxr_millis+0x30>)
 8011da2:	2300      	movs	r3, #0
 8011da4:	f7ee ff10 	bl	8000bc8 <__aeabi_ldivmod>
 8011da8:	b004      	add	sp, #16
 8011daa:	bd10      	pop	{r4, pc}
 8011dac:	3b9aca00 	.word	0x3b9aca00
 8011db0:	000f4240 	.word	0x000f4240

08011db4 <uxr_nanos>:
 8011db4:	b510      	push	{r4, lr}
 8011db6:	b084      	sub	sp, #16
 8011db8:	4669      	mov	r1, sp
 8011dba:	2001      	movs	r0, #1
 8011dbc:	f7f0 f870 	bl	8001ea0 <clock_gettime>
 8011dc0:	4a06      	ldr	r2, [pc, #24]	@ (8011ddc <uxr_nanos+0x28>)
 8011dc2:	9800      	ldr	r0, [sp, #0]
 8011dc4:	9902      	ldr	r1, [sp, #8]
 8011dc6:	9c01      	ldr	r4, [sp, #4]
 8011dc8:	fba0 0302 	umull	r0, r3, r0, r2
 8011dcc:	1840      	adds	r0, r0, r1
 8011dce:	fb02 3304 	mla	r3, r2, r4, r3
 8011dd2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8011dd6:	b004      	add	sp, #16
 8011dd8:	bd10      	pop	{r4, pc}
 8011dda:	bf00      	nop
 8011ddc:	3b9aca00 	.word	0x3b9aca00

08011de0 <on_full_output_buffer_fragmented>:
 8011de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011de4:	460c      	mov	r4, r1
 8011de6:	b08a      	sub	sp, #40	@ 0x28
 8011de8:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8011dec:	4606      	mov	r6, r0
 8011dee:	f104 0008 	add.w	r0, r4, #8
 8011df2:	f7ff ff4b 	bl	8011c8c <uxr_get_output_reliable_stream>
 8011df6:	4605      	mov	r5, r0
 8011df8:	f005 fff6 	bl	8017de8 <get_available_free_slots>
 8011dfc:	b968      	cbnz	r0, 8011e1a <on_full_output_buffer_fragmented+0x3a>
 8011dfe:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8011e02:	4620      	mov	r0, r4
 8011e04:	4798      	blx	r3
 8011e06:	b918      	cbnz	r0, 8011e10 <on_full_output_buffer_fragmented+0x30>
 8011e08:	2001      	movs	r0, #1
 8011e0a:	b00a      	add	sp, #40	@ 0x28
 8011e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e10:	4628      	mov	r0, r5
 8011e12:	f005 ffe9 	bl	8017de8 <get_available_free_slots>
 8011e16:	2800      	cmp	r0, #0
 8011e18:	d0f6      	beq.n	8011e08 <on_full_output_buffer_fragmented+0x28>
 8011e1a:	8929      	ldrh	r1, [r5, #8]
 8011e1c:	89eb      	ldrh	r3, [r5, #14]
 8011e1e:	7b28      	ldrb	r0, [r5, #12]
 8011e20:	686a      	ldr	r2, [r5, #4]
 8011e22:	fbb2 f8f1 	udiv	r8, r2, r1
 8011e26:	fbb3 f2f1 	udiv	r2, r3, r1
 8011e2a:	fb01 3112 	mls	r1, r1, r2, r3
 8011e2e:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8011e32:	b289      	uxth	r1, r1
 8011e34:	fb08 f101 	mul.w	r1, r8, r1
 8011e38:	30fc      	adds	r0, #252	@ 0xfc
 8011e3a:	f1a8 0804 	sub.w	r8, r8, #4
 8011e3e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8011e42:	4440      	add	r0, r8
 8011e44:	b287      	uxth	r7, r0
 8011e46:	1bdb      	subs	r3, r3, r7
 8011e48:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8011e4c:	682b      	ldr	r3, [r5, #0]
 8011e4e:	3104      	adds	r1, #4
 8011e50:	4419      	add	r1, r3
 8011e52:	4642      	mov	r2, r8
 8011e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e58:	9300      	str	r3, [sp, #0]
 8011e5a:	a802      	add	r0, sp, #8
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	f7fa f81d 	bl	800be9c <ucdr_init_buffer_origin_offset>
 8011e62:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011e66:	f102 0308 	add.w	r3, r2, #8
 8011e6a:	4543      	cmp	r3, r8
 8011e6c:	d928      	bls.n	8011ec0 <on_full_output_buffer_fragmented+0xe0>
 8011e6e:	463a      	mov	r2, r7
 8011e70:	2300      	movs	r3, #0
 8011e72:	210d      	movs	r1, #13
 8011e74:	a802      	add	r0, sp, #8
 8011e76:	f7ff ff3d 	bl	8011cf4 <uxr_buffer_submessage_header>
 8011e7a:	8929      	ldrh	r1, [r5, #8]
 8011e7c:	89eb      	ldrh	r3, [r5, #14]
 8011e7e:	fbb3 f2f1 	udiv	r2, r3, r1
 8011e82:	fb01 3312 	mls	r3, r1, r2, r3
 8011e86:	b29b      	uxth	r3, r3
 8011e88:	686a      	ldr	r2, [r5, #4]
 8011e8a:	fbb2 f2f1 	udiv	r2, r2, r1
 8011e8e:	fb02 f303 	mul.w	r3, r2, r3
 8011e92:	682a      	ldr	r2, [r5, #0]
 8011e94:	f842 8003 	str.w	r8, [r2, r3]
 8011e98:	89e8      	ldrh	r0, [r5, #14]
 8011e9a:	2101      	movs	r1, #1
 8011e9c:	f005 ffc4 	bl	8017e28 <uxr_seq_num_add>
 8011ea0:	9904      	ldr	r1, [sp, #16]
 8011ea2:	9a03      	ldr	r2, [sp, #12]
 8011ea4:	81e8      	strh	r0, [r5, #14]
 8011ea6:	1a52      	subs	r2, r2, r1
 8011ea8:	4630      	mov	r0, r6
 8011eaa:	f7fa f809 	bl	800bec0 <ucdr_init_buffer>
 8011eae:	4630      	mov	r0, r6
 8011eb0:	490f      	ldr	r1, [pc, #60]	@ (8011ef0 <on_full_output_buffer_fragmented+0x110>)
 8011eb2:	4622      	mov	r2, r4
 8011eb4:	f7f9 ffd8 	bl	800be68 <ucdr_set_on_full_buffer_callback>
 8011eb8:	2000      	movs	r0, #0
 8011eba:	b00a      	add	sp, #40	@ 0x28
 8011ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ec0:	b292      	uxth	r2, r2
 8011ec2:	2302      	movs	r3, #2
 8011ec4:	210d      	movs	r1, #13
 8011ec6:	a802      	add	r0, sp, #8
 8011ec8:	f7ff ff14 	bl	8011cf4 <uxr_buffer_submessage_header>
 8011ecc:	8928      	ldrh	r0, [r5, #8]
 8011ece:	89eb      	ldrh	r3, [r5, #14]
 8011ed0:	fbb3 f1f0 	udiv	r1, r3, r0
 8011ed4:	fb00 3311 	mls	r3, r0, r1, r3
 8011ed8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011edc:	6869      	ldr	r1, [r5, #4]
 8011ede:	fbb1 f1f0 	udiv	r1, r1, r0
 8011ee2:	b29b      	uxth	r3, r3
 8011ee4:	fb01 f303 	mul.w	r3, r1, r3
 8011ee8:	6829      	ldr	r1, [r5, #0]
 8011eea:	3208      	adds	r2, #8
 8011eec:	50ca      	str	r2, [r1, r3]
 8011eee:	e7d3      	b.n	8011e98 <on_full_output_buffer_fragmented+0xb8>
 8011ef0:	08011de1 	.word	0x08011de1

08011ef4 <uxr_prepare_output_stream>:
 8011ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ef6:	b087      	sub	sp, #28
 8011ef8:	2707      	movs	r7, #7
 8011efa:	9202      	str	r2, [sp, #8]
 8011efc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011efe:	9103      	str	r1, [sp, #12]
 8011f00:	2500      	movs	r5, #0
 8011f02:	3204      	adds	r2, #4
 8011f04:	e9cd 7500 	strd	r7, r5, [sp]
 8011f08:	461c      	mov	r4, r3
 8011f0a:	4606      	mov	r6, r0
 8011f0c:	f7fe ffc2 	bl	8010e94 <uxr_prepare_stream_to_write_submessage>
 8011f10:	f080 0201 	eor.w	r2, r0, #1
 8011f14:	b2d2      	uxtb	r2, r2
 8011f16:	75a2      	strb	r2, [r4, #22]
 8011f18:	b112      	cbz	r2, 8011f20 <uxr_prepare_output_stream+0x2c>
 8011f1a:	4628      	mov	r0, r5
 8011f1c:	b007      	add	sp, #28
 8011f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f20:	aa05      	add	r2, sp, #20
 8011f22:	9902      	ldr	r1, [sp, #8]
 8011f24:	4630      	mov	r0, r6
 8011f26:	f7ff f8eb 	bl	8011100 <uxr_init_base_object_request>
 8011f2a:	a905      	add	r1, sp, #20
 8011f2c:	4605      	mov	r5, r0
 8011f2e:	4620      	mov	r0, r4
 8011f30:	f000 ffd4 	bl	8012edc <uxr_serialize_WRITE_DATA_Payload_Data>
 8011f34:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8011f38:	69a6      	ldr	r6, [r4, #24]
 8011f3a:	69e7      	ldr	r7, [r4, #28]
 8011f3c:	1a52      	subs	r2, r2, r1
 8011f3e:	4620      	mov	r0, r4
 8011f40:	f7f9 ffbe 	bl	800bec0 <ucdr_init_buffer>
 8011f44:	4620      	mov	r0, r4
 8011f46:	463a      	mov	r2, r7
 8011f48:	4631      	mov	r1, r6
 8011f4a:	f7f9 ff8d 	bl	800be68 <ucdr_set_on_full_buffer_callback>
 8011f4e:	4628      	mov	r0, r5
 8011f50:	b007      	add	sp, #28
 8011f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011f54 <uxr_prepare_output_stream_fragmented>:
 8011f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f58:	b091      	sub	sp, #68	@ 0x44
 8011f5a:	4605      	mov	r5, r0
 8011f5c:	9105      	str	r1, [sp, #20]
 8011f5e:	3008      	adds	r0, #8
 8011f60:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011f64:	461e      	mov	r6, r3
 8011f66:	9204      	str	r2, [sp, #16]
 8011f68:	f7ff fe90 	bl	8011c8c <uxr_get_output_reliable_stream>
 8011f6c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8011f70:	2b01      	cmp	r3, #1
 8011f72:	f000 8091 	beq.w	8012098 <uxr_prepare_output_stream_fragmented+0x144>
 8011f76:	4604      	mov	r4, r0
 8011f78:	2800      	cmp	r0, #0
 8011f7a:	f000 808d 	beq.w	8012098 <uxr_prepare_output_stream_fragmented+0x144>
 8011f7e:	f005 ff33 	bl	8017de8 <get_available_free_slots>
 8011f82:	2800      	cmp	r0, #0
 8011f84:	f000 8083 	beq.w	801208e <uxr_prepare_output_stream_fragmented+0x13a>
 8011f88:	8922      	ldrh	r2, [r4, #8]
 8011f8a:	89e7      	ldrh	r7, [r4, #14]
 8011f8c:	fbb7 f9f2 	udiv	r9, r7, r2
 8011f90:	fb02 7919 	mls	r9, r2, r9, r7
 8011f94:	fa1f f989 	uxth.w	r9, r9
 8011f98:	6863      	ldr	r3, [r4, #4]
 8011f9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8011f9e:	6823      	ldr	r3, [r4, #0]
 8011fa0:	9203      	str	r2, [sp, #12]
 8011fa2:	fb02 f909 	mul.w	r9, r2, r9
 8011fa6:	f109 0904 	add.w	r9, r9, #4
 8011faa:	4499      	add	r9, r3
 8011fac:	7b23      	ldrb	r3, [r4, #12]
 8011fae:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011fb2:	4543      	cmp	r3, r8
 8011fb4:	f1a2 0b04 	sub.w	fp, r2, #4
 8011fb8:	d37a      	bcc.n	80120b0 <uxr_prepare_output_stream_fragmented+0x15c>
 8011fba:	f1ab 0a04 	sub.w	sl, fp, #4
 8011fbe:	ebaa 0a03 	sub.w	sl, sl, r3
 8011fc2:	465a      	mov	r2, fp
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	4649      	mov	r1, r9
 8011fc8:	a808      	add	r0, sp, #32
 8011fca:	f8cd 8000 	str.w	r8, [sp]
 8011fce:	f7f9 ff65 	bl	800be9c <ucdr_init_buffer_origin_offset>
 8011fd2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011fd4:	fa1f fa8a 	uxth.w	sl, sl
 8011fd8:	4652      	mov	r2, sl
 8011fda:	f103 0a08 	add.w	sl, r3, #8
 8011fde:	45da      	cmp	sl, fp
 8011fe0:	bf34      	ite	cc
 8011fe2:	2302      	movcc	r3, #2
 8011fe4:	2300      	movcs	r3, #0
 8011fe6:	210d      	movs	r1, #13
 8011fe8:	a808      	add	r0, sp, #32
 8011fea:	f7ff fe83 	bl	8011cf4 <uxr_buffer_submessage_header>
 8011fee:	8921      	ldrh	r1, [r4, #8]
 8011ff0:	fbb7 f2f1 	udiv	r2, r7, r1
 8011ff4:	fb01 7212 	mls	r2, r1, r2, r7
 8011ff8:	b292      	uxth	r2, r2
 8011ffa:	6863      	ldr	r3, [r4, #4]
 8011ffc:	fbb3 f3f1 	udiv	r3, r3, r1
 8012000:	fb02 f303 	mul.w	r3, r2, r3
 8012004:	6822      	ldr	r2, [r4, #0]
 8012006:	4638      	mov	r0, r7
 8012008:	f842 b003 	str.w	fp, [r2, r3]
 801200c:	2101      	movs	r1, #1
 801200e:	f005 ff0b 	bl	8017e28 <uxr_seq_num_add>
 8012012:	9b03      	ldr	r3, [sp, #12]
 8012014:	f108 0104 	add.w	r1, r8, #4
 8012018:	f1a3 0208 	sub.w	r2, r3, #8
 801201c:	eba2 0208 	sub.w	r2, r2, r8
 8012020:	4449      	add	r1, r9
 8012022:	4607      	mov	r7, r0
 8012024:	4630      	mov	r0, r6
 8012026:	f7f9 ff4b 	bl	800bec0 <ucdr_init_buffer>
 801202a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801202c:	81e7      	strh	r7, [r4, #14]
 801202e:	1d1a      	adds	r2, r3, #4
 8012030:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8012034:	bf28      	it	cs
 8012036:	2200      	movcs	r2, #0
 8012038:	2300      	movs	r3, #0
 801203a:	b292      	uxth	r2, r2
 801203c:	2107      	movs	r1, #7
 801203e:	4630      	mov	r0, r6
 8012040:	f7ff fe58 	bl	8011cf4 <uxr_buffer_submessage_header>
 8012044:	9904      	ldr	r1, [sp, #16]
 8012046:	aa07      	add	r2, sp, #28
 8012048:	4628      	mov	r0, r5
 801204a:	f7ff f859 	bl	8011100 <uxr_init_base_object_request>
 801204e:	4604      	mov	r4, r0
 8012050:	b318      	cbz	r0, 801209a <uxr_prepare_output_stream_fragmented+0x146>
 8012052:	a907      	add	r1, sp, #28
 8012054:	4630      	mov	r0, r6
 8012056:	f000 ff41 	bl	8012edc <uxr_serialize_WRITE_DATA_Payload_Data>
 801205a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801205e:	4630      	mov	r0, r6
 8012060:	1a52      	subs	r2, r2, r1
 8012062:	f7f9 ff2d 	bl	800bec0 <ucdr_init_buffer>
 8012066:	9b05      	ldr	r3, [sp, #20]
 8012068:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801206c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801206e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8012072:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012074:	491b      	ldr	r1, [pc, #108]	@ (80120e4 <uxr_prepare_output_stream_fragmented+0x190>)
 8012076:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 801207a:	4630      	mov	r0, r6
 801207c:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8012080:	462a      	mov	r2, r5
 8012082:	f7f9 fef1 	bl	800be68 <ucdr_set_on_full_buffer_callback>
 8012086:	4620      	mov	r0, r4
 8012088:	b011      	add	sp, #68	@ 0x44
 801208a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801208e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8012090:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012092:	4628      	mov	r0, r5
 8012094:	4798      	blx	r3
 8012096:	b920      	cbnz	r0, 80120a2 <uxr_prepare_output_stream_fragmented+0x14e>
 8012098:	2400      	movs	r4, #0
 801209a:	4620      	mov	r0, r4
 801209c:	b011      	add	sp, #68	@ 0x44
 801209e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120a2:	4620      	mov	r0, r4
 80120a4:	f005 fea0 	bl	8017de8 <get_available_free_slots>
 80120a8:	2800      	cmp	r0, #0
 80120aa:	f47f af6d 	bne.w	8011f88 <uxr_prepare_output_stream_fragmented+0x34>
 80120ae:	e7f3      	b.n	8012098 <uxr_prepare_output_stream_fragmented+0x144>
 80120b0:	4638      	mov	r0, r7
 80120b2:	2101      	movs	r1, #1
 80120b4:	f005 feb8 	bl	8017e28 <uxr_seq_num_add>
 80120b8:	8921      	ldrh	r1, [r4, #8]
 80120ba:	fbb0 f2f1 	udiv	r2, r0, r1
 80120be:	fb01 0912 	mls	r9, r1, r2, r0
 80120c2:	fa1f f289 	uxth.w	r2, r9
 80120c6:	6863      	ldr	r3, [r4, #4]
 80120c8:	fbb3 f9f1 	udiv	r9, r3, r1
 80120cc:	6823      	ldr	r3, [r4, #0]
 80120ce:	fb02 f909 	mul.w	r9, r2, r9
 80120d2:	f109 0904 	add.w	r9, r9, #4
 80120d6:	4499      	add	r9, r3
 80120d8:	4607      	mov	r7, r0
 80120da:	7b23      	ldrb	r3, [r4, #12]
 80120dc:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80120e0:	e76b      	b.n	8011fba <uxr_prepare_output_stream_fragmented+0x66>
 80120e2:	bf00      	nop
 80120e4:	08011de1 	.word	0x08011de1

080120e8 <uxr_serialize_message_header>:
 80120e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120ea:	b083      	sub	sp, #12
 80120ec:	4616      	mov	r6, r2
 80120ee:	4604      	mov	r4, r0
 80120f0:	9301      	str	r3, [sp, #4]
 80120f2:	460d      	mov	r5, r1
 80120f4:	9f08      	ldr	r7, [sp, #32]
 80120f6:	f7f8 fc01 	bl	800a8fc <ucdr_serialize_uint8_t>
 80120fa:	4631      	mov	r1, r6
 80120fc:	4620      	mov	r0, r4
 80120fe:	f7f8 fbfd 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012102:	9a01      	ldr	r2, [sp, #4]
 8012104:	2101      	movs	r1, #1
 8012106:	4620      	mov	r0, r4
 8012108:	f7f8 fca4 	bl	800aa54 <ucdr_serialize_endian_uint16_t>
 801210c:	062b      	lsls	r3, r5, #24
 801210e:	d501      	bpl.n	8012114 <uxr_serialize_message_header+0x2c>
 8012110:	b003      	add	sp, #12
 8012112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012114:	2204      	movs	r2, #4
 8012116:	4639      	mov	r1, r7
 8012118:	4620      	mov	r0, r4
 801211a:	b003      	add	sp, #12
 801211c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012120:	f7fd b9a4 	b.w	800f46c <ucdr_serialize_array_uint8_t>

08012124 <uxr_deserialize_message_header>:
 8012124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012126:	b083      	sub	sp, #12
 8012128:	4616      	mov	r6, r2
 801212a:	4604      	mov	r4, r0
 801212c:	9301      	str	r3, [sp, #4]
 801212e:	460d      	mov	r5, r1
 8012130:	9f08      	ldr	r7, [sp, #32]
 8012132:	f7f8 fbf9 	bl	800a928 <ucdr_deserialize_uint8_t>
 8012136:	4631      	mov	r1, r6
 8012138:	4620      	mov	r0, r4
 801213a:	f7f8 fbf5 	bl	800a928 <ucdr_deserialize_uint8_t>
 801213e:	9a01      	ldr	r2, [sp, #4]
 8012140:	2101      	movs	r1, #1
 8012142:	4620      	mov	r0, r4
 8012144:	f7f8 fd7a 	bl	800ac3c <ucdr_deserialize_endian_uint16_t>
 8012148:	f995 3000 	ldrsb.w	r3, [r5]
 801214c:	2b00      	cmp	r3, #0
 801214e:	da01      	bge.n	8012154 <uxr_deserialize_message_header+0x30>
 8012150:	b003      	add	sp, #12
 8012152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012154:	2204      	movs	r2, #4
 8012156:	4639      	mov	r1, r7
 8012158:	4620      	mov	r0, r4
 801215a:	b003      	add	sp, #12
 801215c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012160:	f7fd b9e8 	b.w	800f534 <ucdr_deserialize_array_uint8_t>

08012164 <uxr_serialize_submessage_header>:
 8012164:	b530      	push	{r4, r5, lr}
 8012166:	b083      	sub	sp, #12
 8012168:	4615      	mov	r5, r2
 801216a:	4604      	mov	r4, r0
 801216c:	9301      	str	r3, [sp, #4]
 801216e:	f7f8 fbc5 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012172:	4629      	mov	r1, r5
 8012174:	4620      	mov	r0, r4
 8012176:	f7f8 fbc1 	bl	800a8fc <ucdr_serialize_uint8_t>
 801217a:	9a01      	ldr	r2, [sp, #4]
 801217c:	2101      	movs	r1, #1
 801217e:	4620      	mov	r0, r4
 8012180:	b003      	add	sp, #12
 8012182:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012186:	f7f8 bc65 	b.w	800aa54 <ucdr_serialize_endian_uint16_t>
 801218a:	bf00      	nop

0801218c <uxr_deserialize_submessage_header>:
 801218c:	b530      	push	{r4, r5, lr}
 801218e:	b083      	sub	sp, #12
 8012190:	4615      	mov	r5, r2
 8012192:	4604      	mov	r4, r0
 8012194:	9301      	str	r3, [sp, #4]
 8012196:	f7f8 fbc7 	bl	800a928 <ucdr_deserialize_uint8_t>
 801219a:	4629      	mov	r1, r5
 801219c:	4620      	mov	r0, r4
 801219e:	f7f8 fbc3 	bl	800a928 <ucdr_deserialize_uint8_t>
 80121a2:	9a01      	ldr	r2, [sp, #4]
 80121a4:	2101      	movs	r1, #1
 80121a6:	4620      	mov	r0, r4
 80121a8:	b003      	add	sp, #12
 80121aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121ae:	f7f8 bd45 	b.w	800ac3c <ucdr_deserialize_endian_uint16_t>
 80121b2:	bf00      	nop

080121b4 <uxr_serialize_CLIENT_Representation>:
 80121b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121b8:	2204      	movs	r2, #4
 80121ba:	460e      	mov	r6, r1
 80121bc:	4605      	mov	r5, r0
 80121be:	f7fd f955 	bl	800f46c <ucdr_serialize_array_uint8_t>
 80121c2:	2202      	movs	r2, #2
 80121c4:	4607      	mov	r7, r0
 80121c6:	1d31      	adds	r1, r6, #4
 80121c8:	4628      	mov	r0, r5
 80121ca:	f7fd f94f 	bl	800f46c <ucdr_serialize_array_uint8_t>
 80121ce:	4038      	ands	r0, r7
 80121d0:	2202      	movs	r2, #2
 80121d2:	1db1      	adds	r1, r6, #6
 80121d4:	b2c7      	uxtb	r7, r0
 80121d6:	4628      	mov	r0, r5
 80121d8:	f7fd f948 	bl	800f46c <ucdr_serialize_array_uint8_t>
 80121dc:	2204      	movs	r2, #4
 80121de:	4007      	ands	r7, r0
 80121e0:	f106 0108 	add.w	r1, r6, #8
 80121e4:	4628      	mov	r0, r5
 80121e6:	f7fd f941 	bl	800f46c <ucdr_serialize_array_uint8_t>
 80121ea:	7b31      	ldrb	r1, [r6, #12]
 80121ec:	4007      	ands	r7, r0
 80121ee:	4628      	mov	r0, r5
 80121f0:	f7f8 fb84 	bl	800a8fc <ucdr_serialize_uint8_t>
 80121f4:	7b71      	ldrb	r1, [r6, #13]
 80121f6:	4007      	ands	r7, r0
 80121f8:	4628      	mov	r0, r5
 80121fa:	f7f8 fb51 	bl	800a8a0 <ucdr_serialize_bool>
 80121fe:	7b73      	ldrb	r3, [r6, #13]
 8012200:	ea07 0800 	and.w	r8, r7, r0
 8012204:	b93b      	cbnz	r3, 8012216 <uxr_serialize_CLIENT_Representation+0x62>
 8012206:	8bb1      	ldrh	r1, [r6, #28]
 8012208:	4628      	mov	r0, r5
 801220a:	f7f8 fba3 	bl	800a954 <ucdr_serialize_uint16_t>
 801220e:	ea08 0000 	and.w	r0, r8, r0
 8012212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012216:	6931      	ldr	r1, [r6, #16]
 8012218:	4628      	mov	r0, r5
 801221a:	f7f8 fd85 	bl	800ad28 <ucdr_serialize_uint32_t>
 801221e:	6933      	ldr	r3, [r6, #16]
 8012220:	b1e3      	cbz	r3, 801225c <uxr_serialize_CLIENT_Representation+0xa8>
 8012222:	b1c0      	cbz	r0, 8012256 <uxr_serialize_CLIENT_Representation+0xa2>
 8012224:	4637      	mov	r7, r6
 8012226:	f04f 0900 	mov.w	r9, #0
 801222a:	e001      	b.n	8012230 <uxr_serialize_CLIENT_Representation+0x7c>
 801222c:	3708      	adds	r7, #8
 801222e:	b194      	cbz	r4, 8012256 <uxr_serialize_CLIENT_Representation+0xa2>
 8012230:	6979      	ldr	r1, [r7, #20]
 8012232:	4628      	mov	r0, r5
 8012234:	f005 f898 	bl	8017368 <ucdr_serialize_string>
 8012238:	69b9      	ldr	r1, [r7, #24]
 801223a:	4604      	mov	r4, r0
 801223c:	4628      	mov	r0, r5
 801223e:	f005 f893 	bl	8017368 <ucdr_serialize_string>
 8012242:	6933      	ldr	r3, [r6, #16]
 8012244:	f109 0901 	add.w	r9, r9, #1
 8012248:	4004      	ands	r4, r0
 801224a:	4599      	cmp	r9, r3
 801224c:	b2e4      	uxtb	r4, r4
 801224e:	d3ed      	bcc.n	801222c <uxr_serialize_CLIENT_Representation+0x78>
 8012250:	ea08 0804 	and.w	r8, r8, r4
 8012254:	e7d7      	b.n	8012206 <uxr_serialize_CLIENT_Representation+0x52>
 8012256:	f04f 0800 	mov.w	r8, #0
 801225a:	e7d4      	b.n	8012206 <uxr_serialize_CLIENT_Representation+0x52>
 801225c:	ea08 0800 	and.w	r8, r8, r0
 8012260:	e7d1      	b.n	8012206 <uxr_serialize_CLIENT_Representation+0x52>
 8012262:	bf00      	nop

08012264 <uxr_deserialize_CLIENT_Representation>:
 8012264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012268:	2204      	movs	r2, #4
 801226a:	460c      	mov	r4, r1
 801226c:	4605      	mov	r5, r0
 801226e:	f7fd f961 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 8012272:	2202      	movs	r2, #2
 8012274:	4607      	mov	r7, r0
 8012276:	1d21      	adds	r1, r4, #4
 8012278:	4628      	mov	r0, r5
 801227a:	f7fd f95b 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 801227e:	4038      	ands	r0, r7
 8012280:	2202      	movs	r2, #2
 8012282:	1da1      	adds	r1, r4, #6
 8012284:	b2c6      	uxtb	r6, r0
 8012286:	4628      	mov	r0, r5
 8012288:	f7fd f954 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 801228c:	2204      	movs	r2, #4
 801228e:	4006      	ands	r6, r0
 8012290:	f104 0108 	add.w	r1, r4, #8
 8012294:	4628      	mov	r0, r5
 8012296:	f7fd f94d 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 801229a:	f104 010c 	add.w	r1, r4, #12
 801229e:	4006      	ands	r6, r0
 80122a0:	4628      	mov	r0, r5
 80122a2:	f7f8 fb41 	bl	800a928 <ucdr_deserialize_uint8_t>
 80122a6:	f104 010d 	add.w	r1, r4, #13
 80122aa:	ea06 0700 	and.w	r7, r6, r0
 80122ae:	4628      	mov	r0, r5
 80122b0:	f7f8 fb0c 	bl	800a8cc <ucdr_deserialize_bool>
 80122b4:	7b63      	ldrb	r3, [r4, #13]
 80122b6:	4007      	ands	r7, r0
 80122b8:	b93b      	cbnz	r3, 80122ca <uxr_deserialize_CLIENT_Representation+0x66>
 80122ba:	f104 011c 	add.w	r1, r4, #28
 80122be:	4628      	mov	r0, r5
 80122c0:	f7f8 fc48 	bl	800ab54 <ucdr_deserialize_uint16_t>
 80122c4:	4038      	ands	r0, r7
 80122c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122ca:	f104 0110 	add.w	r1, r4, #16
 80122ce:	4628      	mov	r0, r5
 80122d0:	f7f8 fe5a 	bl	800af88 <ucdr_deserialize_uint32_t>
 80122d4:	6923      	ldr	r3, [r4, #16]
 80122d6:	2b01      	cmp	r3, #1
 80122d8:	d903      	bls.n	80122e2 <uxr_deserialize_CLIENT_Representation+0x7e>
 80122da:	2301      	movs	r3, #1
 80122dc:	75ab      	strb	r3, [r5, #22]
 80122de:	2700      	movs	r7, #0
 80122e0:	e7eb      	b.n	80122ba <uxr_deserialize_CLIENT_Representation+0x56>
 80122e2:	b30b      	cbz	r3, 8012328 <uxr_deserialize_CLIENT_Representation+0xc4>
 80122e4:	2800      	cmp	r0, #0
 80122e6:	d0fa      	beq.n	80122de <uxr_deserialize_CLIENT_Representation+0x7a>
 80122e8:	46a0      	mov	r8, r4
 80122ea:	f04f 0900 	mov.w	r9, #0
 80122ee:	e001      	b.n	80122f4 <uxr_deserialize_CLIENT_Representation+0x90>
 80122f0:	2e00      	cmp	r6, #0
 80122f2:	d0f4      	beq.n	80122de <uxr_deserialize_CLIENT_Representation+0x7a>
 80122f4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80122f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80122fc:	4628      	mov	r0, r5
 80122fe:	f005 f843 	bl	8017388 <ucdr_deserialize_string>
 8012302:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012306:	4606      	mov	r6, r0
 8012308:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801230c:	4628      	mov	r0, r5
 801230e:	f005 f83b 	bl	8017388 <ucdr_deserialize_string>
 8012312:	6923      	ldr	r3, [r4, #16]
 8012314:	f109 0901 	add.w	r9, r9, #1
 8012318:	4006      	ands	r6, r0
 801231a:	4599      	cmp	r9, r3
 801231c:	f108 0808 	add.w	r8, r8, #8
 8012320:	b2f6      	uxtb	r6, r6
 8012322:	d3e5      	bcc.n	80122f0 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012324:	4037      	ands	r7, r6
 8012326:	e7c8      	b.n	80122ba <uxr_deserialize_CLIENT_Representation+0x56>
 8012328:	4007      	ands	r7, r0
 801232a:	e7c6      	b.n	80122ba <uxr_deserialize_CLIENT_Representation+0x56>

0801232c <uxr_serialize_AGENT_Representation>:
 801232c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012330:	2204      	movs	r2, #4
 8012332:	460f      	mov	r7, r1
 8012334:	4605      	mov	r5, r0
 8012336:	f7fd f899 	bl	800f46c <ucdr_serialize_array_uint8_t>
 801233a:	2202      	movs	r2, #2
 801233c:	4604      	mov	r4, r0
 801233e:	1d39      	adds	r1, r7, #4
 8012340:	4628      	mov	r0, r5
 8012342:	f7fd f893 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012346:	4020      	ands	r0, r4
 8012348:	2202      	movs	r2, #2
 801234a:	1db9      	adds	r1, r7, #6
 801234c:	b2c4      	uxtb	r4, r0
 801234e:	4628      	mov	r0, r5
 8012350:	f7fd f88c 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012354:	7a39      	ldrb	r1, [r7, #8]
 8012356:	4004      	ands	r4, r0
 8012358:	4628      	mov	r0, r5
 801235a:	f7f8 faa1 	bl	800a8a0 <ucdr_serialize_bool>
 801235e:	7a3b      	ldrb	r3, [r7, #8]
 8012360:	ea00 0804 	and.w	r8, r0, r4
 8012364:	b913      	cbnz	r3, 801236c <uxr_serialize_AGENT_Representation+0x40>
 8012366:	4640      	mov	r0, r8
 8012368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801236c:	68f9      	ldr	r1, [r7, #12]
 801236e:	4628      	mov	r0, r5
 8012370:	f7f8 fcda 	bl	800ad28 <ucdr_serialize_uint32_t>
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	b303      	cbz	r3, 80123ba <uxr_serialize_AGENT_Representation+0x8e>
 8012378:	b1d0      	cbz	r0, 80123b0 <uxr_serialize_AGENT_Representation+0x84>
 801237a:	463e      	mov	r6, r7
 801237c:	f04f 0900 	mov.w	r9, #0
 8012380:	e001      	b.n	8012386 <uxr_serialize_AGENT_Representation+0x5a>
 8012382:	3608      	adds	r6, #8
 8012384:	b1a4      	cbz	r4, 80123b0 <uxr_serialize_AGENT_Representation+0x84>
 8012386:	6931      	ldr	r1, [r6, #16]
 8012388:	4628      	mov	r0, r5
 801238a:	f004 ffed 	bl	8017368 <ucdr_serialize_string>
 801238e:	6971      	ldr	r1, [r6, #20]
 8012390:	4604      	mov	r4, r0
 8012392:	4628      	mov	r0, r5
 8012394:	f004 ffe8 	bl	8017368 <ucdr_serialize_string>
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	f109 0901 	add.w	r9, r9, #1
 801239e:	4004      	ands	r4, r0
 80123a0:	4599      	cmp	r9, r3
 80123a2:	b2e4      	uxtb	r4, r4
 80123a4:	d3ed      	bcc.n	8012382 <uxr_serialize_AGENT_Representation+0x56>
 80123a6:	ea08 0804 	and.w	r8, r8, r4
 80123aa:	4640      	mov	r0, r8
 80123ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123b0:	f04f 0800 	mov.w	r8, #0
 80123b4:	4640      	mov	r0, r8
 80123b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123ba:	ea08 0800 	and.w	r8, r8, r0
 80123be:	e7d2      	b.n	8012366 <uxr_serialize_AGENT_Representation+0x3a>

080123c0 <uxr_serialize_DATAWRITER_Representation>:
 80123c0:	b570      	push	{r4, r5, r6, lr}
 80123c2:	460d      	mov	r5, r1
 80123c4:	7809      	ldrb	r1, [r1, #0]
 80123c6:	4606      	mov	r6, r0
 80123c8:	f7f8 fa98 	bl	800a8fc <ucdr_serialize_uint8_t>
 80123cc:	4604      	mov	r4, r0
 80123ce:	b130      	cbz	r0, 80123de <uxr_serialize_DATAWRITER_Representation+0x1e>
 80123d0:	782b      	ldrb	r3, [r5, #0]
 80123d2:	2b02      	cmp	r3, #2
 80123d4:	d00c      	beq.n	80123f0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80123d6:	2b03      	cmp	r3, #3
 80123d8:	d010      	beq.n	80123fc <uxr_serialize_DATAWRITER_Representation+0x3c>
 80123da:	2b01      	cmp	r3, #1
 80123dc:	d008      	beq.n	80123f0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80123de:	2202      	movs	r2, #2
 80123e0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80123e4:	4630      	mov	r0, r6
 80123e6:	f7fd f841 	bl	800f46c <ucdr_serialize_array_uint8_t>
 80123ea:	4020      	ands	r0, r4
 80123ec:	b2c0      	uxtb	r0, r0
 80123ee:	bd70      	pop	{r4, r5, r6, pc}
 80123f0:	6869      	ldr	r1, [r5, #4]
 80123f2:	4630      	mov	r0, r6
 80123f4:	f004 ffb8 	bl	8017368 <ucdr_serialize_string>
 80123f8:	4604      	mov	r4, r0
 80123fa:	e7f0      	b.n	80123de <uxr_serialize_DATAWRITER_Representation+0x1e>
 80123fc:	4629      	mov	r1, r5
 80123fe:	4630      	mov	r0, r6
 8012400:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8012404:	3104      	adds	r1, #4
 8012406:	f7fd f9cf 	bl	800f7a8 <ucdr_serialize_sequence_uint8_t>
 801240a:	4604      	mov	r4, r0
 801240c:	e7e7      	b.n	80123de <uxr_serialize_DATAWRITER_Representation+0x1e>
 801240e:	bf00      	nop

08012410 <uxr_serialize_ObjectVariant.part.0>:
 8012410:	b570      	push	{r4, r5, r6, lr}
 8012412:	780b      	ldrb	r3, [r1, #0]
 8012414:	3b01      	subs	r3, #1
 8012416:	460c      	mov	r4, r1
 8012418:	4605      	mov	r5, r0
 801241a:	2b0d      	cmp	r3, #13
 801241c:	d854      	bhi.n	80124c8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801241e:	e8df f003 	tbb	[pc, r3]
 8012422:	0730      	.short	0x0730
 8012424:	07071b1b 	.word	0x07071b1b
 8012428:	0c530707 	.word	0x0c530707
 801242c:	494e0c0c 	.word	0x494e0c0c
 8012430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012434:	3104      	adds	r1, #4
 8012436:	f7ff bfc3 	b.w	80123c0 <uxr_serialize_DATAWRITER_Representation>
 801243a:	7909      	ldrb	r1, [r1, #4]
 801243c:	f7f8 fa5e 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012440:	b1e8      	cbz	r0, 801247e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8012442:	7923      	ldrb	r3, [r4, #4]
 8012444:	2b01      	cmp	r3, #1
 8012446:	d001      	beq.n	801244c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8012448:	2b02      	cmp	r3, #2
 801244a:	d13d      	bne.n	80124c8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801244c:	68a1      	ldr	r1, [r4, #8]
 801244e:	4628      	mov	r0, r5
 8012450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012454:	f004 bf88 	b.w	8017368 <ucdr_serialize_string>
 8012458:	7909      	ldrb	r1, [r1, #4]
 801245a:	f7f8 fa4f 	bl	800a8fc <ucdr_serialize_uint8_t>
 801245e:	4606      	mov	r6, r0
 8012460:	b120      	cbz	r0, 801246c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012462:	7923      	ldrb	r3, [r4, #4]
 8012464:	2b02      	cmp	r3, #2
 8012466:	d039      	beq.n	80124dc <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012468:	2b03      	cmp	r3, #3
 801246a:	d02f      	beq.n	80124cc <uxr_serialize_ObjectVariant.part.0+0xbc>
 801246c:	2202      	movs	r2, #2
 801246e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8012472:	4628      	mov	r0, r5
 8012474:	f7fc fffa 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012478:	4030      	ands	r0, r6
 801247a:	b2c0      	uxtb	r0, r0
 801247c:	bd70      	pop	{r4, r5, r6, pc}
 801247e:	2000      	movs	r0, #0
 8012480:	bd70      	pop	{r4, r5, r6, pc}
 8012482:	7909      	ldrb	r1, [r1, #4]
 8012484:	f7f8 fa3a 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012488:	4606      	mov	r6, r0
 801248a:	b158      	cbz	r0, 80124a4 <uxr_serialize_ObjectVariant.part.0+0x94>
 801248c:	7923      	ldrb	r3, [r4, #4]
 801248e:	2b02      	cmp	r3, #2
 8012490:	d003      	beq.n	801249a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8012492:	2b03      	cmp	r3, #3
 8012494:	d028      	beq.n	80124e8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8012496:	2b01      	cmp	r3, #1
 8012498:	d104      	bne.n	80124a4 <uxr_serialize_ObjectVariant.part.0+0x94>
 801249a:	68a1      	ldr	r1, [r4, #8]
 801249c:	4628      	mov	r0, r5
 801249e:	f004 ff63 	bl	8017368 <ucdr_serialize_string>
 80124a2:	4606      	mov	r6, r0
 80124a4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80124a8:	4628      	mov	r0, r5
 80124aa:	f7f8 ff63 	bl	800b374 <ucdr_serialize_int16_t>
 80124ae:	4030      	ands	r0, r6
 80124b0:	b2c0      	uxtb	r0, r0
 80124b2:	bd70      	pop	{r4, r5, r6, pc}
 80124b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124b8:	3104      	adds	r1, #4
 80124ba:	f7ff be7b 	b.w	80121b4 <uxr_serialize_CLIENT_Representation>
 80124be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124c2:	3104      	adds	r1, #4
 80124c4:	f7ff bf32 	b.w	801232c <uxr_serialize_AGENT_Representation>
 80124c8:	2001      	movs	r0, #1
 80124ca:	bd70      	pop	{r4, r5, r6, pc}
 80124cc:	68a2      	ldr	r2, [r4, #8]
 80124ce:	f104 010c 	add.w	r1, r4, #12
 80124d2:	4628      	mov	r0, r5
 80124d4:	f7fd f968 	bl	800f7a8 <ucdr_serialize_sequence_uint8_t>
 80124d8:	4606      	mov	r6, r0
 80124da:	e7c7      	b.n	801246c <uxr_serialize_ObjectVariant.part.0+0x5c>
 80124dc:	68a1      	ldr	r1, [r4, #8]
 80124de:	4628      	mov	r0, r5
 80124e0:	f004 ff42 	bl	8017368 <ucdr_serialize_string>
 80124e4:	4606      	mov	r6, r0
 80124e6:	e7c1      	b.n	801246c <uxr_serialize_ObjectVariant.part.0+0x5c>
 80124e8:	68a2      	ldr	r2, [r4, #8]
 80124ea:	f104 010c 	add.w	r1, r4, #12
 80124ee:	4628      	mov	r0, r5
 80124f0:	f7fd f95a 	bl	800f7a8 <ucdr_serialize_sequence_uint8_t>
 80124f4:	4606      	mov	r6, r0
 80124f6:	e7d5      	b.n	80124a4 <uxr_serialize_ObjectVariant.part.0+0x94>

080124f8 <uxr_deserialize_DATAWRITER_Representation>:
 80124f8:	b570      	push	{r4, r5, r6, lr}
 80124fa:	4606      	mov	r6, r0
 80124fc:	460d      	mov	r5, r1
 80124fe:	f7f8 fa13 	bl	800a928 <ucdr_deserialize_uint8_t>
 8012502:	4604      	mov	r4, r0
 8012504:	b130      	cbz	r0, 8012514 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012506:	782b      	ldrb	r3, [r5, #0]
 8012508:	2b02      	cmp	r3, #2
 801250a:	d00c      	beq.n	8012526 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801250c:	2b03      	cmp	r3, #3
 801250e:	d012      	beq.n	8012536 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012510:	2b01      	cmp	r3, #1
 8012512:	d008      	beq.n	8012526 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012514:	2202      	movs	r2, #2
 8012516:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801251a:	4630      	mov	r0, r6
 801251c:	f7fd f80a 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 8012520:	4020      	ands	r0, r4
 8012522:	b2c0      	uxtb	r0, r0
 8012524:	bd70      	pop	{r4, r5, r6, pc}
 8012526:	6869      	ldr	r1, [r5, #4]
 8012528:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801252c:	4630      	mov	r0, r6
 801252e:	f004 ff2b 	bl	8017388 <ucdr_deserialize_string>
 8012532:	4604      	mov	r4, r0
 8012534:	e7ee      	b.n	8012514 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012536:	1d2b      	adds	r3, r5, #4
 8012538:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801253c:	f105 0108 	add.w	r1, r5, #8
 8012540:	4630      	mov	r0, r6
 8012542:	f7fd f943 	bl	800f7cc <ucdr_deserialize_sequence_uint8_t>
 8012546:	4604      	mov	r4, r0
 8012548:	e7e4      	b.n	8012514 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801254a:	bf00      	nop

0801254c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801254c:	b570      	push	{r4, r5, r6, lr}
 801254e:	460d      	mov	r5, r1
 8012550:	7809      	ldrb	r1, [r1, #0]
 8012552:	4606      	mov	r6, r0
 8012554:	f7f8 f9a4 	bl	800a8a0 <ucdr_serialize_bool>
 8012558:	782b      	ldrb	r3, [r5, #0]
 801255a:	4604      	mov	r4, r0
 801255c:	b94b      	cbnz	r3, 8012572 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801255e:	7a29      	ldrb	r1, [r5, #8]
 8012560:	4630      	mov	r0, r6
 8012562:	f7f8 f99d 	bl	800a8a0 <ucdr_serialize_bool>
 8012566:	7a2b      	ldrb	r3, [r5, #8]
 8012568:	4004      	ands	r4, r0
 801256a:	b2e4      	uxtb	r4, r4
 801256c:	b943      	cbnz	r3, 8012580 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801256e:	4620      	mov	r0, r4
 8012570:	bd70      	pop	{r4, r5, r6, pc}
 8012572:	6869      	ldr	r1, [r5, #4]
 8012574:	4630      	mov	r0, r6
 8012576:	f004 fef7 	bl	8017368 <ucdr_serialize_string>
 801257a:	4004      	ands	r4, r0
 801257c:	b2e4      	uxtb	r4, r4
 801257e:	e7ee      	b.n	801255e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012580:	68e9      	ldr	r1, [r5, #12]
 8012582:	4630      	mov	r0, r6
 8012584:	f004 fef0 	bl	8017368 <ucdr_serialize_string>
 8012588:	4004      	ands	r4, r0
 801258a:	4620      	mov	r0, r4
 801258c:	bd70      	pop	{r4, r5, r6, pc}
 801258e:	bf00      	nop

08012590 <uxr_serialize_OBJK_Topic_Binary>:
 8012590:	b570      	push	{r4, r5, r6, lr}
 8012592:	460d      	mov	r5, r1
 8012594:	6809      	ldr	r1, [r1, #0]
 8012596:	4606      	mov	r6, r0
 8012598:	f004 fee6 	bl	8017368 <ucdr_serialize_string>
 801259c:	7929      	ldrb	r1, [r5, #4]
 801259e:	4604      	mov	r4, r0
 80125a0:	4630      	mov	r0, r6
 80125a2:	f7f8 f97d 	bl	800a8a0 <ucdr_serialize_bool>
 80125a6:	792b      	ldrb	r3, [r5, #4]
 80125a8:	4004      	ands	r4, r0
 80125aa:	b2e4      	uxtb	r4, r4
 80125ac:	b943      	cbnz	r3, 80125c0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80125ae:	7b29      	ldrb	r1, [r5, #12]
 80125b0:	4630      	mov	r0, r6
 80125b2:	f7f8 f975 	bl	800a8a0 <ucdr_serialize_bool>
 80125b6:	7b2b      	ldrb	r3, [r5, #12]
 80125b8:	4004      	ands	r4, r0
 80125ba:	b93b      	cbnz	r3, 80125cc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80125bc:	4620      	mov	r0, r4
 80125be:	bd70      	pop	{r4, r5, r6, pc}
 80125c0:	68a9      	ldr	r1, [r5, #8]
 80125c2:	4630      	mov	r0, r6
 80125c4:	f004 fed0 	bl	8017368 <ucdr_serialize_string>
 80125c8:	4004      	ands	r4, r0
 80125ca:	e7f0      	b.n	80125ae <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80125cc:	6929      	ldr	r1, [r5, #16]
 80125ce:	4630      	mov	r0, r6
 80125d0:	f004 feca 	bl	8017368 <ucdr_serialize_string>
 80125d4:	4004      	ands	r4, r0
 80125d6:	b2e4      	uxtb	r4, r4
 80125d8:	4620      	mov	r0, r4
 80125da:	bd70      	pop	{r4, r5, r6, pc}

080125dc <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80125dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125e0:	460c      	mov	r4, r1
 80125e2:	7809      	ldrb	r1, [r1, #0]
 80125e4:	4606      	mov	r6, r0
 80125e6:	f7f8 f95b 	bl	800a8a0 <ucdr_serialize_bool>
 80125ea:	7823      	ldrb	r3, [r4, #0]
 80125ec:	4605      	mov	r5, r0
 80125ee:	b96b      	cbnz	r3, 801260c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80125f0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80125f4:	4630      	mov	r0, r6
 80125f6:	f7f8 f953 	bl	800a8a0 <ucdr_serialize_bool>
 80125fa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80125fe:	4005      	ands	r5, r0
 8012600:	b2ed      	uxtb	r5, r5
 8012602:	2b00      	cmp	r3, #0
 8012604:	d169      	bne.n	80126da <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012606:	4628      	mov	r0, r5
 8012608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801260c:	6861      	ldr	r1, [r4, #4]
 801260e:	4630      	mov	r0, r6
 8012610:	f7f8 fb8a 	bl	800ad28 <ucdr_serialize_uint32_t>
 8012614:	6863      	ldr	r3, [r4, #4]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d06b      	beq.n	80126f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801261a:	2800      	cmp	r0, #0
 801261c:	d067      	beq.n	80126ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801261e:	68a1      	ldr	r1, [r4, #8]
 8012620:	4630      	mov	r0, r6
 8012622:	f004 fea1 	bl	8017368 <ucdr_serialize_string>
 8012626:	6863      	ldr	r3, [r4, #4]
 8012628:	2b01      	cmp	r3, #1
 801262a:	d953      	bls.n	80126d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801262c:	2800      	cmp	r0, #0
 801262e:	d05e      	beq.n	80126ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012630:	68e1      	ldr	r1, [r4, #12]
 8012632:	4630      	mov	r0, r6
 8012634:	f004 fe98 	bl	8017368 <ucdr_serialize_string>
 8012638:	6863      	ldr	r3, [r4, #4]
 801263a:	2b02      	cmp	r3, #2
 801263c:	d94a      	bls.n	80126d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801263e:	2800      	cmp	r0, #0
 8012640:	d055      	beq.n	80126ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012642:	6921      	ldr	r1, [r4, #16]
 8012644:	4630      	mov	r0, r6
 8012646:	f004 fe8f 	bl	8017368 <ucdr_serialize_string>
 801264a:	6863      	ldr	r3, [r4, #4]
 801264c:	2b03      	cmp	r3, #3
 801264e:	d941      	bls.n	80126d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012650:	2800      	cmp	r0, #0
 8012652:	d04c      	beq.n	80126ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012654:	6961      	ldr	r1, [r4, #20]
 8012656:	4630      	mov	r0, r6
 8012658:	f004 fe86 	bl	8017368 <ucdr_serialize_string>
 801265c:	6863      	ldr	r3, [r4, #4]
 801265e:	2b04      	cmp	r3, #4
 8012660:	d938      	bls.n	80126d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012662:	2800      	cmp	r0, #0
 8012664:	d043      	beq.n	80126ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012666:	69a1      	ldr	r1, [r4, #24]
 8012668:	4630      	mov	r0, r6
 801266a:	f004 fe7d 	bl	8017368 <ucdr_serialize_string>
 801266e:	6863      	ldr	r3, [r4, #4]
 8012670:	2b05      	cmp	r3, #5
 8012672:	d92f      	bls.n	80126d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012674:	2800      	cmp	r0, #0
 8012676:	d03a      	beq.n	80126ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012678:	69e1      	ldr	r1, [r4, #28]
 801267a:	4630      	mov	r0, r6
 801267c:	f004 fe74 	bl	8017368 <ucdr_serialize_string>
 8012680:	6863      	ldr	r3, [r4, #4]
 8012682:	2b06      	cmp	r3, #6
 8012684:	d926      	bls.n	80126d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012686:	b390      	cbz	r0, 80126ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012688:	6a21      	ldr	r1, [r4, #32]
 801268a:	4630      	mov	r0, r6
 801268c:	f004 fe6c 	bl	8017368 <ucdr_serialize_string>
 8012690:	6863      	ldr	r3, [r4, #4]
 8012692:	2b07      	cmp	r3, #7
 8012694:	d91e      	bls.n	80126d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012696:	b350      	cbz	r0, 80126ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012698:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801269a:	4630      	mov	r0, r6
 801269c:	f004 fe64 	bl	8017368 <ucdr_serialize_string>
 80126a0:	6863      	ldr	r3, [r4, #4]
 80126a2:	2b08      	cmp	r3, #8
 80126a4:	d916      	bls.n	80126d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80126a6:	b310      	cbz	r0, 80126ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80126a8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80126aa:	4630      	mov	r0, r6
 80126ac:	f004 fe5c 	bl	8017368 <ucdr_serialize_string>
 80126b0:	6863      	ldr	r3, [r4, #4]
 80126b2:	2b09      	cmp	r3, #9
 80126b4:	d90e      	bls.n	80126d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80126b6:	b1d0      	cbz	r0, 80126ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80126b8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80126bc:	2709      	movs	r7, #9
 80126be:	e000      	b.n	80126c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80126c0:	b1a8      	cbz	r0, 80126ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80126c2:	f858 1b04 	ldr.w	r1, [r8], #4
 80126c6:	4630      	mov	r0, r6
 80126c8:	f004 fe4e 	bl	8017368 <ucdr_serialize_string>
 80126cc:	6862      	ldr	r2, [r4, #4]
 80126ce:	3701      	adds	r7, #1
 80126d0:	4297      	cmp	r7, r2
 80126d2:	d3f5      	bcc.n	80126c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80126d4:	4005      	ands	r5, r0
 80126d6:	b2ed      	uxtb	r5, r5
 80126d8:	e78a      	b.n	80125f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80126da:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80126dc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80126e0:	4630      	mov	r0, r6
 80126e2:	f7fd f861 	bl	800f7a8 <ucdr_serialize_sequence_uint8_t>
 80126e6:	4005      	ands	r5, r0
 80126e8:	4628      	mov	r0, r5
 80126ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126ee:	2500      	movs	r5, #0
 80126f0:	e77e      	b.n	80125f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80126f2:	4028      	ands	r0, r5
 80126f4:	b2c5      	uxtb	r5, r0
 80126f6:	e77b      	b.n	80125f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080126f8 <uxr_serialize_OBJK_Publisher_Binary>:
 80126f8:	b570      	push	{r4, r5, r6, lr}
 80126fa:	460d      	mov	r5, r1
 80126fc:	7809      	ldrb	r1, [r1, #0]
 80126fe:	4606      	mov	r6, r0
 8012700:	f7f8 f8ce 	bl	800a8a0 <ucdr_serialize_bool>
 8012704:	782b      	ldrb	r3, [r5, #0]
 8012706:	4604      	mov	r4, r0
 8012708:	b94b      	cbnz	r3, 801271e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801270a:	7a29      	ldrb	r1, [r5, #8]
 801270c:	4630      	mov	r0, r6
 801270e:	f7f8 f8c7 	bl	800a8a0 <ucdr_serialize_bool>
 8012712:	7a2b      	ldrb	r3, [r5, #8]
 8012714:	4004      	ands	r4, r0
 8012716:	b2e4      	uxtb	r4, r4
 8012718:	b943      	cbnz	r3, 801272c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801271a:	4620      	mov	r0, r4
 801271c:	bd70      	pop	{r4, r5, r6, pc}
 801271e:	6869      	ldr	r1, [r5, #4]
 8012720:	4630      	mov	r0, r6
 8012722:	f004 fe21 	bl	8017368 <ucdr_serialize_string>
 8012726:	4004      	ands	r4, r0
 8012728:	b2e4      	uxtb	r4, r4
 801272a:	e7ee      	b.n	801270a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801272c:	f105 010c 	add.w	r1, r5, #12
 8012730:	4630      	mov	r0, r6
 8012732:	f7ff ff53 	bl	80125dc <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012736:	4004      	ands	r4, r0
 8012738:	4620      	mov	r0, r4
 801273a:	bd70      	pop	{r4, r5, r6, pc}

0801273c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801273c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012740:	4688      	mov	r8, r1
 8012742:	8809      	ldrh	r1, [r1, #0]
 8012744:	4681      	mov	r9, r0
 8012746:	f7f8 f905 	bl	800a954 <ucdr_serialize_uint16_t>
 801274a:	f898 1002 	ldrb.w	r1, [r8, #2]
 801274e:	4606      	mov	r6, r0
 8012750:	4648      	mov	r0, r9
 8012752:	f7f8 f8a5 	bl	800a8a0 <ucdr_serialize_bool>
 8012756:	f898 3002 	ldrb.w	r3, [r8, #2]
 801275a:	4006      	ands	r6, r0
 801275c:	b2f5      	uxtb	r5, r6
 801275e:	b9eb      	cbnz	r3, 801279c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012760:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012764:	4648      	mov	r0, r9
 8012766:	f7f8 f89b 	bl	800a8a0 <ucdr_serialize_bool>
 801276a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801276e:	4005      	ands	r5, r0
 8012770:	bb7b      	cbnz	r3, 80127d2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012772:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012776:	4648      	mov	r0, r9
 8012778:	f7f8 f892 	bl	800a8a0 <ucdr_serialize_bool>
 801277c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012780:	4005      	ands	r5, r0
 8012782:	b9f3      	cbnz	r3, 80127c2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012784:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012788:	4648      	mov	r0, r9
 801278a:	f7f8 f889 	bl	800a8a0 <ucdr_serialize_bool>
 801278e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012792:	4005      	ands	r5, r0
 8012794:	b94b      	cbnz	r3, 80127aa <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012796:	4628      	mov	r0, r5
 8012798:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801279c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80127a0:	4648      	mov	r0, r9
 80127a2:	f7f8 f8d7 	bl	800a954 <ucdr_serialize_uint16_t>
 80127a6:	4005      	ands	r5, r0
 80127a8:	e7da      	b.n	8012760 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80127aa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80127ae:	f108 011c 	add.w	r1, r8, #28
 80127b2:	4648      	mov	r0, r9
 80127b4:	f7fc fff8 	bl	800f7a8 <ucdr_serialize_sequence_uint8_t>
 80127b8:	4028      	ands	r0, r5
 80127ba:	b2c5      	uxtb	r5, r0
 80127bc:	4628      	mov	r0, r5
 80127be:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80127c2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80127c6:	4648      	mov	r0, r9
 80127c8:	f7f8 faae 	bl	800ad28 <ucdr_serialize_uint32_t>
 80127cc:	4028      	ands	r0, r5
 80127ce:	b2c5      	uxtb	r5, r0
 80127d0:	e7d8      	b.n	8012784 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80127d2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80127d6:	4648      	mov	r0, r9
 80127d8:	f7f8 faa6 	bl	800ad28 <ucdr_serialize_uint32_t>
 80127dc:	4028      	ands	r0, r5
 80127de:	b2c5      	uxtb	r5, r0
 80127e0:	e7c7      	b.n	8012772 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80127e2:	bf00      	nop

080127e4 <uxr_serialize_OBJK_DataWriter_Binary>:
 80127e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127e6:	2202      	movs	r2, #2
 80127e8:	460d      	mov	r5, r1
 80127ea:	4606      	mov	r6, r0
 80127ec:	f7fc fe3e 	bl	800f46c <ucdr_serialize_array_uint8_t>
 80127f0:	78a9      	ldrb	r1, [r5, #2]
 80127f2:	4604      	mov	r4, r0
 80127f4:	4630      	mov	r0, r6
 80127f6:	f7f8 f853 	bl	800a8a0 <ucdr_serialize_bool>
 80127fa:	78ab      	ldrb	r3, [r5, #2]
 80127fc:	4004      	ands	r4, r0
 80127fe:	b2e4      	uxtb	r4, r4
 8012800:	b90b      	cbnz	r3, 8012806 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012802:	4620      	mov	r0, r4
 8012804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012806:	f105 0108 	add.w	r1, r5, #8
 801280a:	4630      	mov	r0, r6
 801280c:	f7ff ff96 	bl	801273c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012810:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8012814:	4607      	mov	r7, r0
 8012816:	4630      	mov	r0, r6
 8012818:	f7f8 f842 	bl	800a8a0 <ucdr_serialize_bool>
 801281c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012820:	4038      	ands	r0, r7
 8012822:	b2c7      	uxtb	r7, r0
 8012824:	b913      	cbnz	r3, 801282c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012826:	403c      	ands	r4, r7
 8012828:	4620      	mov	r0, r4
 801282a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801282c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012830:	4630      	mov	r0, r6
 8012832:	f7f8 fccf 	bl	800b1d4 <ucdr_serialize_uint64_t>
 8012836:	4007      	ands	r7, r0
 8012838:	e7f5      	b.n	8012826 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801283a:	bf00      	nop

0801283c <uxr_serialize_OBJK_Replier_Binary>:
 801283c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8012840:	460f      	mov	r7, r1
 8012842:	6809      	ldr	r1, [r1, #0]
 8012844:	4680      	mov	r8, r0
 8012846:	f004 fd8f 	bl	8017368 <ucdr_serialize_string>
 801284a:	6879      	ldr	r1, [r7, #4]
 801284c:	4605      	mov	r5, r0
 801284e:	4640      	mov	r0, r8
 8012850:	f004 fd8a 	bl	8017368 <ucdr_serialize_string>
 8012854:	68b9      	ldr	r1, [r7, #8]
 8012856:	4005      	ands	r5, r0
 8012858:	4640      	mov	r0, r8
 801285a:	f004 fd85 	bl	8017368 <ucdr_serialize_string>
 801285e:	b2ec      	uxtb	r4, r5
 8012860:	4004      	ands	r4, r0
 8012862:	7b39      	ldrb	r1, [r7, #12]
 8012864:	4640      	mov	r0, r8
 8012866:	f7f8 f81b 	bl	800a8a0 <ucdr_serialize_bool>
 801286a:	7b3b      	ldrb	r3, [r7, #12]
 801286c:	4004      	ands	r4, r0
 801286e:	b94b      	cbnz	r3, 8012884 <uxr_serialize_OBJK_Replier_Binary+0x48>
 8012870:	7d39      	ldrb	r1, [r7, #20]
 8012872:	4640      	mov	r0, r8
 8012874:	f7f8 f814 	bl	800a8a0 <ucdr_serialize_bool>
 8012878:	7d3b      	ldrb	r3, [r7, #20]
 801287a:	4004      	ands	r4, r0
 801287c:	b943      	cbnz	r3, 8012890 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801287e:	4620      	mov	r0, r4
 8012880:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8012884:	6939      	ldr	r1, [r7, #16]
 8012886:	4640      	mov	r0, r8
 8012888:	f004 fd6e 	bl	8017368 <ucdr_serialize_string>
 801288c:	4004      	ands	r4, r0
 801288e:	e7ef      	b.n	8012870 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8012890:	69b9      	ldr	r1, [r7, #24]
 8012892:	4640      	mov	r0, r8
 8012894:	f004 fd68 	bl	8017368 <ucdr_serialize_string>
 8012898:	4004      	ands	r4, r0
 801289a:	b2e4      	uxtb	r4, r4
 801289c:	4620      	mov	r0, r4
 801289e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 80128a2:	bf00      	nop

080128a4 <uxr_deserialize_ObjectVariant>:
 80128a4:	b570      	push	{r4, r5, r6, lr}
 80128a6:	4605      	mov	r5, r0
 80128a8:	460e      	mov	r6, r1
 80128aa:	f7f8 f83d 	bl	800a928 <ucdr_deserialize_uint8_t>
 80128ae:	b168      	cbz	r0, 80128cc <uxr_deserialize_ObjectVariant+0x28>
 80128b0:	7833      	ldrb	r3, [r6, #0]
 80128b2:	3b01      	subs	r3, #1
 80128b4:	4604      	mov	r4, r0
 80128b6:	2b0d      	cmp	r3, #13
 80128b8:	d809      	bhi.n	80128ce <uxr_deserialize_ObjectVariant+0x2a>
 80128ba:	e8df f003 	tbb	[pc, r3]
 80128be:	0a41      	.short	0x0a41
 80128c0:	0a0a2323 	.word	0x0a0a2323
 80128c4:	10080a0a 	.word	0x10080a0a
 80128c8:	565c1010 	.word	0x565c1010
 80128cc:	2400      	movs	r4, #0
 80128ce:	4620      	mov	r0, r4
 80128d0:	bd70      	pop	{r4, r5, r6, pc}
 80128d2:	1d31      	adds	r1, r6, #4
 80128d4:	4628      	mov	r0, r5
 80128d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128da:	f7ff be0d 	b.w	80124f8 <uxr_deserialize_DATAWRITER_Representation>
 80128de:	1d31      	adds	r1, r6, #4
 80128e0:	4628      	mov	r0, r5
 80128e2:	f7f8 f821 	bl	800a928 <ucdr_deserialize_uint8_t>
 80128e6:	2800      	cmp	r0, #0
 80128e8:	d0f0      	beq.n	80128cc <uxr_deserialize_ObjectVariant+0x28>
 80128ea:	7933      	ldrb	r3, [r6, #4]
 80128ec:	2b01      	cmp	r3, #1
 80128ee:	d001      	beq.n	80128f4 <uxr_deserialize_ObjectVariant+0x50>
 80128f0:	2b02      	cmp	r3, #2
 80128f2:	d1ec      	bne.n	80128ce <uxr_deserialize_ObjectVariant+0x2a>
 80128f4:	68b1      	ldr	r1, [r6, #8]
 80128f6:	4628      	mov	r0, r5
 80128f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80128fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012900:	f004 bd42 	b.w	8017388 <ucdr_deserialize_string>
 8012904:	1d31      	adds	r1, r6, #4
 8012906:	4628      	mov	r0, r5
 8012908:	f7f8 f80e 	bl	800a928 <ucdr_deserialize_uint8_t>
 801290c:	4604      	mov	r4, r0
 801290e:	b170      	cbz	r0, 801292e <uxr_deserialize_ObjectVariant+0x8a>
 8012910:	7933      	ldrb	r3, [r6, #4]
 8012912:	2b02      	cmp	r3, #2
 8012914:	d04c      	beq.n	80129b0 <uxr_deserialize_ObjectVariant+0x10c>
 8012916:	2b03      	cmp	r3, #3
 8012918:	d109      	bne.n	801292e <uxr_deserialize_ObjectVariant+0x8a>
 801291a:	f106 0308 	add.w	r3, r6, #8
 801291e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012922:	f106 010c 	add.w	r1, r6, #12
 8012926:	4628      	mov	r0, r5
 8012928:	f7fc ff50 	bl	800f7cc <ucdr_deserialize_sequence_uint8_t>
 801292c:	4604      	mov	r4, r0
 801292e:	2202      	movs	r2, #2
 8012930:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012934:	4628      	mov	r0, r5
 8012936:	f7fc fdfd 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 801293a:	4020      	ands	r0, r4
 801293c:	b2c4      	uxtb	r4, r0
 801293e:	e7c6      	b.n	80128ce <uxr_deserialize_ObjectVariant+0x2a>
 8012940:	1d31      	adds	r1, r6, #4
 8012942:	4628      	mov	r0, r5
 8012944:	f7f7 fff0 	bl	800a928 <ucdr_deserialize_uint8_t>
 8012948:	4604      	mov	r4, r0
 801294a:	b130      	cbz	r0, 801295a <uxr_deserialize_ObjectVariant+0xb6>
 801294c:	7933      	ldrb	r3, [r6, #4]
 801294e:	2b02      	cmp	r3, #2
 8012950:	d036      	beq.n	80129c0 <uxr_deserialize_ObjectVariant+0x11c>
 8012952:	2b03      	cmp	r3, #3
 8012954:	d03c      	beq.n	80129d0 <uxr_deserialize_ObjectVariant+0x12c>
 8012956:	2b01      	cmp	r3, #1
 8012958:	d032      	beq.n	80129c0 <uxr_deserialize_ObjectVariant+0x11c>
 801295a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801295e:	4628      	mov	r0, r5
 8012960:	f7f8 fd88 	bl	800b474 <ucdr_deserialize_int16_t>
 8012964:	4020      	ands	r0, r4
 8012966:	b2c4      	uxtb	r4, r0
 8012968:	e7b1      	b.n	80128ce <uxr_deserialize_ObjectVariant+0x2a>
 801296a:	1d31      	adds	r1, r6, #4
 801296c:	4628      	mov	r0, r5
 801296e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012972:	f7ff bc77 	b.w	8012264 <uxr_deserialize_CLIENT_Representation>
 8012976:	2204      	movs	r2, #4
 8012978:	18b1      	adds	r1, r6, r2
 801297a:	4628      	mov	r0, r5
 801297c:	f7fc fdda 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 8012980:	2202      	movs	r2, #2
 8012982:	f106 0108 	add.w	r1, r6, #8
 8012986:	4604      	mov	r4, r0
 8012988:	4628      	mov	r0, r5
 801298a:	f7fc fdd3 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 801298e:	2202      	movs	r2, #2
 8012990:	4004      	ands	r4, r0
 8012992:	f106 010a 	add.w	r1, r6, #10
 8012996:	4628      	mov	r0, r5
 8012998:	f7fc fdcc 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 801299c:	b2e4      	uxtb	r4, r4
 801299e:	4603      	mov	r3, r0
 80129a0:	f106 010c 	add.w	r1, r6, #12
 80129a4:	4628      	mov	r0, r5
 80129a6:	401c      	ands	r4, r3
 80129a8:	f7f7 ff90 	bl	800a8cc <ucdr_deserialize_bool>
 80129ac:	4004      	ands	r4, r0
 80129ae:	e78e      	b.n	80128ce <uxr_deserialize_ObjectVariant+0x2a>
 80129b0:	68b1      	ldr	r1, [r6, #8]
 80129b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80129b6:	4628      	mov	r0, r5
 80129b8:	f004 fce6 	bl	8017388 <ucdr_deserialize_string>
 80129bc:	4604      	mov	r4, r0
 80129be:	e7b6      	b.n	801292e <uxr_deserialize_ObjectVariant+0x8a>
 80129c0:	68b1      	ldr	r1, [r6, #8]
 80129c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80129c6:	4628      	mov	r0, r5
 80129c8:	f004 fcde 	bl	8017388 <ucdr_deserialize_string>
 80129cc:	4604      	mov	r4, r0
 80129ce:	e7c4      	b.n	801295a <uxr_deserialize_ObjectVariant+0xb6>
 80129d0:	f106 0308 	add.w	r3, r6, #8
 80129d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80129d8:	f106 010c 	add.w	r1, r6, #12
 80129dc:	4628      	mov	r0, r5
 80129de:	f7fc fef5 	bl	800f7cc <ucdr_deserialize_sequence_uint8_t>
 80129e2:	4604      	mov	r4, r0
 80129e4:	e7b9      	b.n	801295a <uxr_deserialize_ObjectVariant+0xb6>
 80129e6:	bf00      	nop

080129e8 <uxr_deserialize_BaseObjectRequest>:
 80129e8:	b570      	push	{r4, r5, r6, lr}
 80129ea:	2202      	movs	r2, #2
 80129ec:	4605      	mov	r5, r0
 80129ee:	460e      	mov	r6, r1
 80129f0:	f7fc fda0 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 80129f4:	2202      	movs	r2, #2
 80129f6:	4604      	mov	r4, r0
 80129f8:	18b1      	adds	r1, r6, r2
 80129fa:	4628      	mov	r0, r5
 80129fc:	f7fc fd9a 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 8012a00:	4020      	ands	r0, r4
 8012a02:	b2c0      	uxtb	r0, r0
 8012a04:	bd70      	pop	{r4, r5, r6, pc}
 8012a06:	bf00      	nop

08012a08 <uxr_serialize_ActivityInfoVariant>:
 8012a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a0c:	460d      	mov	r5, r1
 8012a0e:	7809      	ldrb	r1, [r1, #0]
 8012a10:	4607      	mov	r7, r0
 8012a12:	f7f7 ff73 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012a16:	4681      	mov	r9, r0
 8012a18:	b138      	cbz	r0, 8012a2a <uxr_serialize_ActivityInfoVariant+0x22>
 8012a1a:	782b      	ldrb	r3, [r5, #0]
 8012a1c:	2b06      	cmp	r3, #6
 8012a1e:	f000 8082 	beq.w	8012b26 <uxr_serialize_ActivityInfoVariant+0x11e>
 8012a22:	2b0d      	cmp	r3, #13
 8012a24:	d016      	beq.n	8012a54 <uxr_serialize_ActivityInfoVariant+0x4c>
 8012a26:	2b05      	cmp	r3, #5
 8012a28:	d002      	beq.n	8012a30 <uxr_serialize_ActivityInfoVariant+0x28>
 8012a2a:	4648      	mov	r0, r9
 8012a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a30:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012a34:	4638      	mov	r0, r7
 8012a36:	f7f8 fc9d 	bl	800b374 <ucdr_serialize_int16_t>
 8012a3a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012a3e:	4681      	mov	r9, r0
 8012a40:	4638      	mov	r0, r7
 8012a42:	f7f8 fbc7 	bl	800b1d4 <ucdr_serialize_uint64_t>
 8012a46:	ea09 0000 	and.w	r0, r9, r0
 8012a4a:	fa5f f980 	uxtb.w	r9, r0
 8012a4e:	4648      	mov	r0, r9
 8012a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a54:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012a58:	4638      	mov	r0, r7
 8012a5a:	f7f8 fc8b 	bl	800b374 <ucdr_serialize_int16_t>
 8012a5e:	68e9      	ldr	r1, [r5, #12]
 8012a60:	4681      	mov	r9, r0
 8012a62:	4638      	mov	r0, r7
 8012a64:	f7f8 f960 	bl	800ad28 <ucdr_serialize_uint32_t>
 8012a68:	68eb      	ldr	r3, [r5, #12]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d0eb      	beq.n	8012a46 <uxr_serialize_ActivityInfoVariant+0x3e>
 8012a6e:	b320      	cbz	r0, 8012aba <uxr_serialize_ActivityInfoVariant+0xb2>
 8012a70:	f105 080c 	add.w	r8, r5, #12
 8012a74:	2600      	movs	r6, #0
 8012a76:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8012a7a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8012a7e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8012a82:	4638      	mov	r0, r7
 8012a84:	f7f7 ff3a 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012a88:	2800      	cmp	r0, #0
 8012a8a:	d053      	beq.n	8012b34 <uxr_serialize_ActivityInfoVariant+0x12c>
 8012a8c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8012a90:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8012a94:	0074      	lsls	r4, r6, #1
 8012a96:	00c9      	lsls	r1, r1, #3
 8012a98:	2b03      	cmp	r3, #3
 8012a9a:	d854      	bhi.n	8012b46 <uxr_serialize_ActivityInfoVariant+0x13e>
 8012a9c:	e8df f003 	tbb	[pc, r3]
 8012aa0:	02102132 	.word	0x02102132
 8012aa4:	4441      	add	r1, r8
 8012aa6:	4638      	mov	r0, r7
 8012aa8:	6889      	ldr	r1, [r1, #8]
 8012aaa:	f004 fc5d 	bl	8017368 <ucdr_serialize_string>
 8012aae:	68ea      	ldr	r2, [r5, #12]
 8012ab0:	3601      	adds	r6, #1
 8012ab2:	4296      	cmp	r6, r2
 8012ab4:	d242      	bcs.n	8012b3c <uxr_serialize_ActivityInfoVariant+0x134>
 8012ab6:	2800      	cmp	r0, #0
 8012ab8:	d1dd      	bne.n	8012a76 <uxr_serialize_ActivityInfoVariant+0x6e>
 8012aba:	f04f 0900 	mov.w	r9, #0
 8012abe:	e7b4      	b.n	8012a2a <uxr_serialize_ActivityInfoVariant+0x22>
 8012ac0:	3108      	adds	r1, #8
 8012ac2:	4441      	add	r1, r8
 8012ac4:	2210      	movs	r2, #16
 8012ac6:	4638      	mov	r0, r7
 8012ac8:	f7fc fcd0 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012acc:	4434      	add	r4, r6
 8012ace:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012ad2:	4604      	mov	r4, r0
 8012ad4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012ad6:	4638      	mov	r0, r7
 8012ad8:	f7f8 f926 	bl	800ad28 <ucdr_serialize_uint32_t>
 8012adc:	4020      	ands	r0, r4
 8012ade:	b2c0      	uxtb	r0, r0
 8012ae0:	e7e5      	b.n	8012aae <uxr_serialize_ActivityInfoVariant+0xa6>
 8012ae2:	3108      	adds	r1, #8
 8012ae4:	4441      	add	r1, r8
 8012ae6:	2204      	movs	r2, #4
 8012ae8:	4638      	mov	r0, r7
 8012aea:	f7fc fcbf 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012aee:	4434      	add	r4, r6
 8012af0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012af4:	4604      	mov	r4, r0
 8012af6:	8b19      	ldrh	r1, [r3, #24]
 8012af8:	4638      	mov	r0, r7
 8012afa:	f7f7 ff2b 	bl	800a954 <ucdr_serialize_uint16_t>
 8012afe:	4020      	ands	r0, r4
 8012b00:	b2c0      	uxtb	r0, r0
 8012b02:	e7d4      	b.n	8012aae <uxr_serialize_ActivityInfoVariant+0xa6>
 8012b04:	3108      	adds	r1, #8
 8012b06:	4441      	add	r1, r8
 8012b08:	2202      	movs	r2, #2
 8012b0a:	4638      	mov	r0, r7
 8012b0c:	f7fc fcae 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012b10:	4434      	add	r4, r6
 8012b12:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012b16:	4604      	mov	r4, r0
 8012b18:	7d99      	ldrb	r1, [r3, #22]
 8012b1a:	4638      	mov	r0, r7
 8012b1c:	f7f7 feee 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012b20:	4020      	ands	r0, r4
 8012b22:	b2c0      	uxtb	r0, r0
 8012b24:	e7c3      	b.n	8012aae <uxr_serialize_ActivityInfoVariant+0xa6>
 8012b26:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012b2a:	4638      	mov	r0, r7
 8012b2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b30:	f7f8 bc20 	b.w	800b374 <ucdr_serialize_int16_t>
 8012b34:	68ea      	ldr	r2, [r5, #12]
 8012b36:	3601      	adds	r6, #1
 8012b38:	42b2      	cmp	r2, r6
 8012b3a:	d8be      	bhi.n	8012aba <uxr_serialize_ActivityInfoVariant+0xb2>
 8012b3c:	ea09 0900 	and.w	r9, r9, r0
 8012b40:	fa5f f989 	uxtb.w	r9, r9
 8012b44:	e771      	b.n	8012a2a <uxr_serialize_ActivityInfoVariant+0x22>
 8012b46:	68eb      	ldr	r3, [r5, #12]
 8012b48:	3601      	adds	r6, #1
 8012b4a:	429e      	cmp	r6, r3
 8012b4c:	f10a 0a18 	add.w	sl, sl, #24
 8012b50:	d395      	bcc.n	8012a7e <uxr_serialize_ActivityInfoVariant+0x76>
 8012b52:	e76a      	b.n	8012a2a <uxr_serialize_ActivityInfoVariant+0x22>

08012b54 <uxr_deserialize_BaseObjectReply>:
 8012b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b58:	2202      	movs	r2, #2
 8012b5a:	4606      	mov	r6, r0
 8012b5c:	460f      	mov	r7, r1
 8012b5e:	f7fc fce9 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 8012b62:	2202      	movs	r2, #2
 8012b64:	18b9      	adds	r1, r7, r2
 8012b66:	4605      	mov	r5, r0
 8012b68:	4630      	mov	r0, r6
 8012b6a:	f7fc fce3 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 8012b6e:	1d39      	adds	r1, r7, #4
 8012b70:	4680      	mov	r8, r0
 8012b72:	4630      	mov	r0, r6
 8012b74:	f7f7 fed8 	bl	800a928 <ucdr_deserialize_uint8_t>
 8012b78:	1d79      	adds	r1, r7, #5
 8012b7a:	4604      	mov	r4, r0
 8012b7c:	4630      	mov	r0, r6
 8012b7e:	f7f7 fed3 	bl	800a928 <ucdr_deserialize_uint8_t>
 8012b82:	ea05 0508 	and.w	r5, r5, r8
 8012b86:	402c      	ands	r4, r5
 8012b88:	4020      	ands	r0, r4
 8012b8a:	b2c0      	uxtb	r0, r0
 8012b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012b90 <uxr_serialize_ReadSpecification>:
 8012b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b94:	460e      	mov	r6, r1
 8012b96:	7809      	ldrb	r1, [r1, #0]
 8012b98:	4607      	mov	r7, r0
 8012b9a:	f7f7 feaf 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012b9e:	7871      	ldrb	r1, [r6, #1]
 8012ba0:	4604      	mov	r4, r0
 8012ba2:	4638      	mov	r0, r7
 8012ba4:	f7f7 feaa 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012ba8:	78b1      	ldrb	r1, [r6, #2]
 8012baa:	4004      	ands	r4, r0
 8012bac:	4638      	mov	r0, r7
 8012bae:	f7f7 fe77 	bl	800a8a0 <ucdr_serialize_bool>
 8012bb2:	78b3      	ldrb	r3, [r6, #2]
 8012bb4:	b2e4      	uxtb	r4, r4
 8012bb6:	4004      	ands	r4, r0
 8012bb8:	b94b      	cbnz	r3, 8012bce <uxr_serialize_ReadSpecification+0x3e>
 8012bba:	7a31      	ldrb	r1, [r6, #8]
 8012bbc:	4638      	mov	r0, r7
 8012bbe:	f7f7 fe6f 	bl	800a8a0 <ucdr_serialize_bool>
 8012bc2:	7a33      	ldrb	r3, [r6, #8]
 8012bc4:	4004      	ands	r4, r0
 8012bc6:	b943      	cbnz	r3, 8012bda <uxr_serialize_ReadSpecification+0x4a>
 8012bc8:	4620      	mov	r0, r4
 8012bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bce:	6871      	ldr	r1, [r6, #4]
 8012bd0:	4638      	mov	r0, r7
 8012bd2:	f004 fbc9 	bl	8017368 <ucdr_serialize_string>
 8012bd6:	4004      	ands	r4, r0
 8012bd8:	e7ef      	b.n	8012bba <uxr_serialize_ReadSpecification+0x2a>
 8012bda:	8971      	ldrh	r1, [r6, #10]
 8012bdc:	4638      	mov	r0, r7
 8012bde:	f7f7 feb9 	bl	800a954 <ucdr_serialize_uint16_t>
 8012be2:	89b1      	ldrh	r1, [r6, #12]
 8012be4:	4605      	mov	r5, r0
 8012be6:	4638      	mov	r0, r7
 8012be8:	f7f7 feb4 	bl	800a954 <ucdr_serialize_uint16_t>
 8012bec:	89f1      	ldrh	r1, [r6, #14]
 8012bee:	4005      	ands	r5, r0
 8012bf0:	4638      	mov	r0, r7
 8012bf2:	f7f7 feaf 	bl	800a954 <ucdr_serialize_uint16_t>
 8012bf6:	8a31      	ldrh	r1, [r6, #16]
 8012bf8:	4680      	mov	r8, r0
 8012bfa:	4638      	mov	r0, r7
 8012bfc:	f7f7 feaa 	bl	800a954 <ucdr_serialize_uint16_t>
 8012c00:	b2ed      	uxtb	r5, r5
 8012c02:	4025      	ands	r5, r4
 8012c04:	ea08 0505 	and.w	r5, r8, r5
 8012c08:	ea00 0405 	and.w	r4, r0, r5
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c12:	bf00      	nop

08012c14 <uxr_serialize_CREATE_CLIENT_Payload>:
 8012c14:	f7ff bace 	b.w	80121b4 <uxr_serialize_CLIENT_Representation>

08012c18 <uxr_serialize_CREATE_Payload>:
 8012c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c1a:	2202      	movs	r2, #2
 8012c1c:	4607      	mov	r7, r0
 8012c1e:	460e      	mov	r6, r1
 8012c20:	f7fc fc24 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012c24:	2202      	movs	r2, #2
 8012c26:	18b1      	adds	r1, r6, r2
 8012c28:	4605      	mov	r5, r0
 8012c2a:	4638      	mov	r0, r7
 8012c2c:	f7fc fc1e 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012c30:	7931      	ldrb	r1, [r6, #4]
 8012c32:	4604      	mov	r4, r0
 8012c34:	4638      	mov	r0, r7
 8012c36:	f7f7 fe61 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012c3a:	b170      	cbz	r0, 8012c5a <uxr_serialize_CREATE_Payload+0x42>
 8012c3c:	7933      	ldrb	r3, [r6, #4]
 8012c3e:	402c      	ands	r4, r5
 8012c40:	3b01      	subs	r3, #1
 8012c42:	b2e4      	uxtb	r4, r4
 8012c44:	2b0d      	cmp	r3, #13
 8012c46:	d809      	bhi.n	8012c5c <uxr_serialize_CREATE_Payload+0x44>
 8012c48:	e8df f003 	tbb	[pc, r3]
 8012c4c:	23230a4c 	.word	0x23230a4c
 8012c50:	0a0a0a0a 	.word	0x0a0a0a0a
 8012c54:	12121208 	.word	0x12121208
 8012c58:	3e45      	.short	0x3e45
 8012c5a:	2400      	movs	r4, #0
 8012c5c:	4620      	mov	r0, r4
 8012c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c60:	f106 0108 	add.w	r1, r6, #8
 8012c64:	4638      	mov	r0, r7
 8012c66:	f7ff fbab 	bl	80123c0 <uxr_serialize_DATAWRITER_Representation>
 8012c6a:	4004      	ands	r4, r0
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c70:	7a31      	ldrb	r1, [r6, #8]
 8012c72:	4638      	mov	r0, r7
 8012c74:	f7f7 fe42 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012c78:	2800      	cmp	r0, #0
 8012c7a:	d0ee      	beq.n	8012c5a <uxr_serialize_CREATE_Payload+0x42>
 8012c7c:	7a33      	ldrb	r3, [r6, #8]
 8012c7e:	2b01      	cmp	r3, #1
 8012c80:	d001      	beq.n	8012c86 <uxr_serialize_CREATE_Payload+0x6e>
 8012c82:	2b02      	cmp	r3, #2
 8012c84:	d1ea      	bne.n	8012c5c <uxr_serialize_CREATE_Payload+0x44>
 8012c86:	68f1      	ldr	r1, [r6, #12]
 8012c88:	4638      	mov	r0, r7
 8012c8a:	f004 fb6d 	bl	8017368 <ucdr_serialize_string>
 8012c8e:	4004      	ands	r4, r0
 8012c90:	e7e4      	b.n	8012c5c <uxr_serialize_CREATE_Payload+0x44>
 8012c92:	7a31      	ldrb	r1, [r6, #8]
 8012c94:	4638      	mov	r0, r7
 8012c96:	f7f7 fe31 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012c9a:	4605      	mov	r5, r0
 8012c9c:	b158      	cbz	r0, 8012cb6 <uxr_serialize_CREATE_Payload+0x9e>
 8012c9e:	7a33      	ldrb	r3, [r6, #8]
 8012ca0:	2b02      	cmp	r3, #2
 8012ca2:	d034      	beq.n	8012d0e <uxr_serialize_CREATE_Payload+0xf6>
 8012ca4:	2b03      	cmp	r3, #3
 8012ca6:	d106      	bne.n	8012cb6 <uxr_serialize_CREATE_Payload+0x9e>
 8012ca8:	68f2      	ldr	r2, [r6, #12]
 8012caa:	f106 0110 	add.w	r1, r6, #16
 8012cae:	4638      	mov	r0, r7
 8012cb0:	f7fc fd7a 	bl	800f7a8 <ucdr_serialize_sequence_uint8_t>
 8012cb4:	4605      	mov	r5, r0
 8012cb6:	2202      	movs	r2, #2
 8012cb8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8012cbc:	4638      	mov	r0, r7
 8012cbe:	f7fc fbd5 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012cc2:	4028      	ands	r0, r5
 8012cc4:	4004      	ands	r4, r0
 8012cc6:	e7c9      	b.n	8012c5c <uxr_serialize_CREATE_Payload+0x44>
 8012cc8:	f106 0108 	add.w	r1, r6, #8
 8012ccc:	4638      	mov	r0, r7
 8012cce:	f7ff fa71 	bl	80121b4 <uxr_serialize_CLIENT_Representation>
 8012cd2:	4004      	ands	r4, r0
 8012cd4:	e7c2      	b.n	8012c5c <uxr_serialize_CREATE_Payload+0x44>
 8012cd6:	f106 0108 	add.w	r1, r6, #8
 8012cda:	4638      	mov	r0, r7
 8012cdc:	f7ff fb26 	bl	801232c <uxr_serialize_AGENT_Representation>
 8012ce0:	4004      	ands	r4, r0
 8012ce2:	e7bb      	b.n	8012c5c <uxr_serialize_CREATE_Payload+0x44>
 8012ce4:	7a31      	ldrb	r1, [r6, #8]
 8012ce6:	4638      	mov	r0, r7
 8012ce8:	f7f7 fe08 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012cec:	4605      	mov	r5, r0
 8012cee:	b130      	cbz	r0, 8012cfe <uxr_serialize_CREATE_Payload+0xe6>
 8012cf0:	7a33      	ldrb	r3, [r6, #8]
 8012cf2:	2b02      	cmp	r3, #2
 8012cf4:	d011      	beq.n	8012d1a <uxr_serialize_CREATE_Payload+0x102>
 8012cf6:	2b03      	cmp	r3, #3
 8012cf8:	d015      	beq.n	8012d26 <uxr_serialize_CREATE_Payload+0x10e>
 8012cfa:	2b01      	cmp	r3, #1
 8012cfc:	d00d      	beq.n	8012d1a <uxr_serialize_CREATE_Payload+0x102>
 8012cfe:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8012d02:	4638      	mov	r0, r7
 8012d04:	f7f8 fb36 	bl	800b374 <ucdr_serialize_int16_t>
 8012d08:	4028      	ands	r0, r5
 8012d0a:	4004      	ands	r4, r0
 8012d0c:	e7a6      	b.n	8012c5c <uxr_serialize_CREATE_Payload+0x44>
 8012d0e:	68f1      	ldr	r1, [r6, #12]
 8012d10:	4638      	mov	r0, r7
 8012d12:	f004 fb29 	bl	8017368 <ucdr_serialize_string>
 8012d16:	4605      	mov	r5, r0
 8012d18:	e7cd      	b.n	8012cb6 <uxr_serialize_CREATE_Payload+0x9e>
 8012d1a:	68f1      	ldr	r1, [r6, #12]
 8012d1c:	4638      	mov	r0, r7
 8012d1e:	f004 fb23 	bl	8017368 <ucdr_serialize_string>
 8012d22:	4605      	mov	r5, r0
 8012d24:	e7eb      	b.n	8012cfe <uxr_serialize_CREATE_Payload+0xe6>
 8012d26:	68f2      	ldr	r2, [r6, #12]
 8012d28:	f106 0110 	add.w	r1, r6, #16
 8012d2c:	4638      	mov	r0, r7
 8012d2e:	f7fc fd3b 	bl	800f7a8 <ucdr_serialize_sequence_uint8_t>
 8012d32:	4605      	mov	r5, r0
 8012d34:	e7e3      	b.n	8012cfe <uxr_serialize_CREATE_Payload+0xe6>
 8012d36:	bf00      	nop

08012d38 <uxr_deserialize_GET_INFO_Payload>:
 8012d38:	b570      	push	{r4, r5, r6, lr}
 8012d3a:	2202      	movs	r2, #2
 8012d3c:	4605      	mov	r5, r0
 8012d3e:	460e      	mov	r6, r1
 8012d40:	f7fc fbf8 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 8012d44:	2202      	movs	r2, #2
 8012d46:	18b1      	adds	r1, r6, r2
 8012d48:	4604      	mov	r4, r0
 8012d4a:	4628      	mov	r0, r5
 8012d4c:	f7fc fbf2 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 8012d50:	1d31      	adds	r1, r6, #4
 8012d52:	4004      	ands	r4, r0
 8012d54:	4628      	mov	r0, r5
 8012d56:	f7f8 f917 	bl	800af88 <ucdr_deserialize_uint32_t>
 8012d5a:	b2e4      	uxtb	r4, r4
 8012d5c:	4020      	ands	r0, r4
 8012d5e:	bd70      	pop	{r4, r5, r6, pc}

08012d60 <uxr_serialize_DELETE_Payload>:
 8012d60:	b570      	push	{r4, r5, r6, lr}
 8012d62:	2202      	movs	r2, #2
 8012d64:	4605      	mov	r5, r0
 8012d66:	460e      	mov	r6, r1
 8012d68:	f7fc fb80 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012d6c:	2202      	movs	r2, #2
 8012d6e:	4604      	mov	r4, r0
 8012d70:	18b1      	adds	r1, r6, r2
 8012d72:	4628      	mov	r0, r5
 8012d74:	f7fc fb7a 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012d78:	4020      	ands	r0, r4
 8012d7a:	b2c0      	uxtb	r0, r0
 8012d7c:	bd70      	pop	{r4, r5, r6, pc}
 8012d7e:	bf00      	nop

08012d80 <uxr_deserialize_STATUS_AGENT_Payload>:
 8012d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d84:	4605      	mov	r5, r0
 8012d86:	460e      	mov	r6, r1
 8012d88:	f7f7 fdce 	bl	800a928 <ucdr_deserialize_uint8_t>
 8012d8c:	1c71      	adds	r1, r6, #1
 8012d8e:	4604      	mov	r4, r0
 8012d90:	4628      	mov	r0, r5
 8012d92:	f7f7 fdc9 	bl	800a928 <ucdr_deserialize_uint8_t>
 8012d96:	2204      	movs	r2, #4
 8012d98:	18b1      	adds	r1, r6, r2
 8012d9a:	4680      	mov	r8, r0
 8012d9c:	4628      	mov	r0, r5
 8012d9e:	f7fc fbc9 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 8012da2:	f106 0108 	add.w	r1, r6, #8
 8012da6:	4607      	mov	r7, r0
 8012da8:	2202      	movs	r2, #2
 8012daa:	4628      	mov	r0, r5
 8012dac:	f7fc fbc2 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 8012db0:	ea04 0308 	and.w	r3, r4, r8
 8012db4:	b2db      	uxtb	r3, r3
 8012db6:	ea03 0407 	and.w	r4, r3, r7
 8012dba:	2202      	movs	r2, #2
 8012dbc:	4607      	mov	r7, r0
 8012dbe:	f106 010a 	add.w	r1, r6, #10
 8012dc2:	4628      	mov	r0, r5
 8012dc4:	f7fc fbb6 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 8012dc8:	f106 010c 	add.w	r1, r6, #12
 8012dcc:	4603      	mov	r3, r0
 8012dce:	4628      	mov	r0, r5
 8012dd0:	461d      	mov	r5, r3
 8012dd2:	f7f7 fd7b 	bl	800a8cc <ucdr_deserialize_bool>
 8012dd6:	403c      	ands	r4, r7
 8012dd8:	4025      	ands	r5, r4
 8012dda:	4028      	ands	r0, r5
 8012ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012de0 <uxr_deserialize_STATUS_Payload>:
 8012de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012de4:	2202      	movs	r2, #2
 8012de6:	4606      	mov	r6, r0
 8012de8:	460f      	mov	r7, r1
 8012dea:	f7fc fba3 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 8012dee:	2202      	movs	r2, #2
 8012df0:	18b9      	adds	r1, r7, r2
 8012df2:	4605      	mov	r5, r0
 8012df4:	4630      	mov	r0, r6
 8012df6:	f7fc fb9d 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 8012dfa:	1d39      	adds	r1, r7, #4
 8012dfc:	4680      	mov	r8, r0
 8012dfe:	4630      	mov	r0, r6
 8012e00:	f7f7 fd92 	bl	800a928 <ucdr_deserialize_uint8_t>
 8012e04:	1d79      	adds	r1, r7, #5
 8012e06:	4604      	mov	r4, r0
 8012e08:	4630      	mov	r0, r6
 8012e0a:	f7f7 fd8d 	bl	800a928 <ucdr_deserialize_uint8_t>
 8012e0e:	ea05 0508 	and.w	r5, r5, r8
 8012e12:	402c      	ands	r4, r5
 8012e14:	4020      	ands	r0, r4
 8012e16:	b2c0      	uxtb	r0, r0
 8012e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012e1c <uxr_serialize_INFO_Payload>:
 8012e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e20:	2202      	movs	r2, #2
 8012e22:	460c      	mov	r4, r1
 8012e24:	4605      	mov	r5, r0
 8012e26:	f7fc fb21 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012e2a:	2202      	movs	r2, #2
 8012e2c:	18a1      	adds	r1, r4, r2
 8012e2e:	4680      	mov	r8, r0
 8012e30:	4628      	mov	r0, r5
 8012e32:	f7fc fb1b 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012e36:	7921      	ldrb	r1, [r4, #4]
 8012e38:	4607      	mov	r7, r0
 8012e3a:	4628      	mov	r0, r5
 8012e3c:	f7f7 fd5e 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012e40:	7961      	ldrb	r1, [r4, #5]
 8012e42:	4606      	mov	r6, r0
 8012e44:	4628      	mov	r0, r5
 8012e46:	f7f7 fd59 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012e4a:	ea08 0807 	and.w	r8, r8, r7
 8012e4e:	ea06 0608 	and.w	r6, r6, r8
 8012e52:	4006      	ands	r6, r0
 8012e54:	7a21      	ldrb	r1, [r4, #8]
 8012e56:	4628      	mov	r0, r5
 8012e58:	f7f7 fd22 	bl	800a8a0 <ucdr_serialize_bool>
 8012e5c:	7a23      	ldrb	r3, [r4, #8]
 8012e5e:	b2f7      	uxtb	r7, r6
 8012e60:	4606      	mov	r6, r0
 8012e62:	b96b      	cbnz	r3, 8012e80 <uxr_serialize_INFO_Payload+0x64>
 8012e64:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8012e68:	4628      	mov	r0, r5
 8012e6a:	f7f7 fd19 	bl	800a8a0 <ucdr_serialize_bool>
 8012e6e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8012e72:	4030      	ands	r0, r6
 8012e74:	b2c6      	uxtb	r6, r0
 8012e76:	b983      	cbnz	r3, 8012e9a <uxr_serialize_INFO_Payload+0x7e>
 8012e78:	ea06 0007 	and.w	r0, r6, r7
 8012e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e80:	7b21      	ldrb	r1, [r4, #12]
 8012e82:	4628      	mov	r0, r5
 8012e84:	f7f7 fd3a 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012e88:	b188      	cbz	r0, 8012eae <uxr_serialize_INFO_Payload+0x92>
 8012e8a:	f104 010c 	add.w	r1, r4, #12
 8012e8e:	4628      	mov	r0, r5
 8012e90:	f7ff fabe 	bl	8012410 <uxr_serialize_ObjectVariant.part.0>
 8012e94:	4030      	ands	r0, r6
 8012e96:	b2c6      	uxtb	r6, r0
 8012e98:	e7e4      	b.n	8012e64 <uxr_serialize_INFO_Payload+0x48>
 8012e9a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8012e9e:	4628      	mov	r0, r5
 8012ea0:	f7ff fdb2 	bl	8012a08 <uxr_serialize_ActivityInfoVariant>
 8012ea4:	4006      	ands	r6, r0
 8012ea6:	ea06 0007 	and.w	r0, r6, r7
 8012eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eae:	4606      	mov	r6, r0
 8012eb0:	e7d8      	b.n	8012e64 <uxr_serialize_INFO_Payload+0x48>
 8012eb2:	bf00      	nop

08012eb4 <uxr_serialize_READ_DATA_Payload>:
 8012eb4:	b570      	push	{r4, r5, r6, lr}
 8012eb6:	2202      	movs	r2, #2
 8012eb8:	4605      	mov	r5, r0
 8012eba:	460e      	mov	r6, r1
 8012ebc:	f7fc fad6 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012ec0:	2202      	movs	r2, #2
 8012ec2:	18b1      	adds	r1, r6, r2
 8012ec4:	4604      	mov	r4, r0
 8012ec6:	4628      	mov	r0, r5
 8012ec8:	f7fc fad0 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012ecc:	1d31      	adds	r1, r6, #4
 8012ece:	4004      	ands	r4, r0
 8012ed0:	4628      	mov	r0, r5
 8012ed2:	f7ff fe5d 	bl	8012b90 <uxr_serialize_ReadSpecification>
 8012ed6:	b2e4      	uxtb	r4, r4
 8012ed8:	4020      	ands	r0, r4
 8012eda:	bd70      	pop	{r4, r5, r6, pc}

08012edc <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012edc:	b570      	push	{r4, r5, r6, lr}
 8012ede:	2202      	movs	r2, #2
 8012ee0:	4605      	mov	r5, r0
 8012ee2:	460e      	mov	r6, r1
 8012ee4:	f7fc fac2 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012ee8:	2202      	movs	r2, #2
 8012eea:	4604      	mov	r4, r0
 8012eec:	18b1      	adds	r1, r6, r2
 8012eee:	4628      	mov	r0, r5
 8012ef0:	f7fc fabc 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012ef4:	4020      	ands	r0, r4
 8012ef6:	b2c0      	uxtb	r0, r0
 8012ef8:	bd70      	pop	{r4, r5, r6, pc}
 8012efa:	bf00      	nop

08012efc <uxr_serialize_ACKNACK_Payload>:
 8012efc:	b570      	push	{r4, r5, r6, lr}
 8012efe:	460c      	mov	r4, r1
 8012f00:	460e      	mov	r6, r1
 8012f02:	f834 1b02 	ldrh.w	r1, [r4], #2
 8012f06:	4605      	mov	r5, r0
 8012f08:	f7f7 fd24 	bl	800a954 <ucdr_serialize_uint16_t>
 8012f0c:	2202      	movs	r2, #2
 8012f0e:	4621      	mov	r1, r4
 8012f10:	4604      	mov	r4, r0
 8012f12:	4628      	mov	r0, r5
 8012f14:	f7fc faaa 	bl	800f46c <ucdr_serialize_array_uint8_t>
 8012f18:	7931      	ldrb	r1, [r6, #4]
 8012f1a:	4004      	ands	r4, r0
 8012f1c:	4628      	mov	r0, r5
 8012f1e:	f7f7 fced 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012f22:	b2e4      	uxtb	r4, r4
 8012f24:	4020      	ands	r0, r4
 8012f26:	bd70      	pop	{r4, r5, r6, pc}

08012f28 <uxr_deserialize_ACKNACK_Payload>:
 8012f28:	b570      	push	{r4, r5, r6, lr}
 8012f2a:	4605      	mov	r5, r0
 8012f2c:	460e      	mov	r6, r1
 8012f2e:	f7f7 fe11 	bl	800ab54 <ucdr_deserialize_uint16_t>
 8012f32:	2202      	movs	r2, #2
 8012f34:	18b1      	adds	r1, r6, r2
 8012f36:	4604      	mov	r4, r0
 8012f38:	4628      	mov	r0, r5
 8012f3a:	f7fc fafb 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 8012f3e:	1d31      	adds	r1, r6, #4
 8012f40:	4004      	ands	r4, r0
 8012f42:	4628      	mov	r0, r5
 8012f44:	f7f7 fcf0 	bl	800a928 <ucdr_deserialize_uint8_t>
 8012f48:	b2e4      	uxtb	r4, r4
 8012f4a:	4020      	ands	r0, r4
 8012f4c:	bd70      	pop	{r4, r5, r6, pc}
 8012f4e:	bf00      	nop

08012f50 <uxr_serialize_HEARTBEAT_Payload>:
 8012f50:	b570      	push	{r4, r5, r6, lr}
 8012f52:	460d      	mov	r5, r1
 8012f54:	8809      	ldrh	r1, [r1, #0]
 8012f56:	4606      	mov	r6, r0
 8012f58:	f7f7 fcfc 	bl	800a954 <ucdr_serialize_uint16_t>
 8012f5c:	8869      	ldrh	r1, [r5, #2]
 8012f5e:	4604      	mov	r4, r0
 8012f60:	4630      	mov	r0, r6
 8012f62:	f7f7 fcf7 	bl	800a954 <ucdr_serialize_uint16_t>
 8012f66:	7929      	ldrb	r1, [r5, #4]
 8012f68:	4004      	ands	r4, r0
 8012f6a:	4630      	mov	r0, r6
 8012f6c:	f7f7 fcc6 	bl	800a8fc <ucdr_serialize_uint8_t>
 8012f70:	b2e4      	uxtb	r4, r4
 8012f72:	4020      	ands	r0, r4
 8012f74:	bd70      	pop	{r4, r5, r6, pc}
 8012f76:	bf00      	nop

08012f78 <uxr_deserialize_HEARTBEAT_Payload>:
 8012f78:	b570      	push	{r4, r5, r6, lr}
 8012f7a:	4605      	mov	r5, r0
 8012f7c:	460e      	mov	r6, r1
 8012f7e:	f7f7 fde9 	bl	800ab54 <ucdr_deserialize_uint16_t>
 8012f82:	1cb1      	adds	r1, r6, #2
 8012f84:	4604      	mov	r4, r0
 8012f86:	4628      	mov	r0, r5
 8012f88:	f7f7 fde4 	bl	800ab54 <ucdr_deserialize_uint16_t>
 8012f8c:	1d31      	adds	r1, r6, #4
 8012f8e:	4004      	ands	r4, r0
 8012f90:	4628      	mov	r0, r5
 8012f92:	f7f7 fcc9 	bl	800a928 <ucdr_deserialize_uint8_t>
 8012f96:	b2e4      	uxtb	r4, r4
 8012f98:	4020      	ands	r0, r4
 8012f9a:	bd70      	pop	{r4, r5, r6, pc}

08012f9c <uxr_serialize_TIMESTAMP_Payload>:
 8012f9c:	b570      	push	{r4, r5, r6, lr}
 8012f9e:	460d      	mov	r5, r1
 8012fa0:	6809      	ldr	r1, [r1, #0]
 8012fa2:	4606      	mov	r6, r0
 8012fa4:	f7f8 fada 	bl	800b55c <ucdr_serialize_int32_t>
 8012fa8:	6869      	ldr	r1, [r5, #4]
 8012faa:	4604      	mov	r4, r0
 8012fac:	4630      	mov	r0, r6
 8012fae:	f7f7 febb 	bl	800ad28 <ucdr_serialize_uint32_t>
 8012fb2:	4020      	ands	r0, r4
 8012fb4:	b2c0      	uxtb	r0, r0
 8012fb6:	bd70      	pop	{r4, r5, r6, pc}

08012fb8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8012fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fbc:	4605      	mov	r5, r0
 8012fbe:	460e      	mov	r6, r1
 8012fc0:	f7f8 fb64 	bl	800b68c <ucdr_deserialize_int32_t>
 8012fc4:	1d31      	adds	r1, r6, #4
 8012fc6:	4607      	mov	r7, r0
 8012fc8:	4628      	mov	r0, r5
 8012fca:	f7f7 ffdd 	bl	800af88 <ucdr_deserialize_uint32_t>
 8012fce:	f106 0108 	add.w	r1, r6, #8
 8012fd2:	4680      	mov	r8, r0
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	f7f8 fb59 	bl	800b68c <ucdr_deserialize_int32_t>
 8012fda:	f106 010c 	add.w	r1, r6, #12
 8012fde:	4604      	mov	r4, r0
 8012fe0:	4628      	mov	r0, r5
 8012fe2:	f7f7 ffd1 	bl	800af88 <ucdr_deserialize_uint32_t>
 8012fe6:	ea07 0708 	and.w	r7, r7, r8
 8012fea:	403c      	ands	r4, r7
 8012fec:	f106 0110 	add.w	r1, r6, #16
 8012ff0:	4004      	ands	r4, r0
 8012ff2:	4628      	mov	r0, r5
 8012ff4:	f7f8 fb4a 	bl	800b68c <ucdr_deserialize_int32_t>
 8012ff8:	f106 0114 	add.w	r1, r6, #20
 8012ffc:	4607      	mov	r7, r0
 8012ffe:	4628      	mov	r0, r5
 8013000:	f7f7 ffc2 	bl	800af88 <ucdr_deserialize_uint32_t>
 8013004:	b2e4      	uxtb	r4, r4
 8013006:	403c      	ands	r4, r7
 8013008:	4020      	ands	r0, r4
 801300a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801300e:	bf00      	nop

08013010 <uxr_serialize_SampleIdentity>:
 8013010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013014:	220c      	movs	r2, #12
 8013016:	4604      	mov	r4, r0
 8013018:	460d      	mov	r5, r1
 801301a:	f7fc fa27 	bl	800f46c <ucdr_serialize_array_uint8_t>
 801301e:	2203      	movs	r2, #3
 8013020:	f105 010c 	add.w	r1, r5, #12
 8013024:	4607      	mov	r7, r0
 8013026:	4620      	mov	r0, r4
 8013028:	f7fc fa20 	bl	800f46c <ucdr_serialize_array_uint8_t>
 801302c:	7be9      	ldrb	r1, [r5, #15]
 801302e:	4680      	mov	r8, r0
 8013030:	4620      	mov	r0, r4
 8013032:	f7f7 fc63 	bl	800a8fc <ucdr_serialize_uint8_t>
 8013036:	6929      	ldr	r1, [r5, #16]
 8013038:	4606      	mov	r6, r0
 801303a:	4620      	mov	r0, r4
 801303c:	f7f8 fa8e 	bl	800b55c <ucdr_serialize_int32_t>
 8013040:	6969      	ldr	r1, [r5, #20]
 8013042:	4603      	mov	r3, r0
 8013044:	4620      	mov	r0, r4
 8013046:	ea07 0708 	and.w	r7, r7, r8
 801304a:	461c      	mov	r4, r3
 801304c:	f7f7 fe6c 	bl	800ad28 <ucdr_serialize_uint32_t>
 8013050:	403e      	ands	r6, r7
 8013052:	4034      	ands	r4, r6
 8013054:	4020      	ands	r0, r4
 8013056:	b2c0      	uxtb	r0, r0
 8013058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801305c <uxr_deserialize_SampleIdentity>:
 801305c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013060:	220c      	movs	r2, #12
 8013062:	4604      	mov	r4, r0
 8013064:	460d      	mov	r5, r1
 8013066:	f7fc fa65 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 801306a:	2203      	movs	r2, #3
 801306c:	f105 010c 	add.w	r1, r5, #12
 8013070:	4607      	mov	r7, r0
 8013072:	4620      	mov	r0, r4
 8013074:	f7fc fa5e 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 8013078:	f105 010f 	add.w	r1, r5, #15
 801307c:	4680      	mov	r8, r0
 801307e:	4620      	mov	r0, r4
 8013080:	f7f7 fc52 	bl	800a928 <ucdr_deserialize_uint8_t>
 8013084:	f105 0110 	add.w	r1, r5, #16
 8013088:	4606      	mov	r6, r0
 801308a:	4620      	mov	r0, r4
 801308c:	f7f8 fafe 	bl	800b68c <ucdr_deserialize_int32_t>
 8013090:	f105 0114 	add.w	r1, r5, #20
 8013094:	4603      	mov	r3, r0
 8013096:	4620      	mov	r0, r4
 8013098:	ea07 0708 	and.w	r7, r7, r8
 801309c:	461c      	mov	r4, r3
 801309e:	f7f7 ff73 	bl	800af88 <ucdr_deserialize_uint32_t>
 80130a2:	403e      	ands	r6, r7
 80130a4:	4034      	ands	r4, r6
 80130a6:	4020      	ands	r0, r4
 80130a8:	b2c0      	uxtb	r0, r0
 80130aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130ae:	bf00      	nop

080130b0 <rcl_client_get_rmw_handle>:
 80130b0:	b118      	cbz	r0, 80130ba <rcl_client_get_rmw_handle+0xa>
 80130b2:	6800      	ldr	r0, [r0, #0]
 80130b4:	b108      	cbz	r0, 80130ba <rcl_client_get_rmw_handle+0xa>
 80130b6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80130ba:	4770      	bx	lr

080130bc <rcl_send_request>:
 80130bc:	b570      	push	{r4, r5, r6, lr}
 80130be:	b082      	sub	sp, #8
 80130c0:	b1e8      	cbz	r0, 80130fe <rcl_send_request+0x42>
 80130c2:	4604      	mov	r4, r0
 80130c4:	6800      	ldr	r0, [r0, #0]
 80130c6:	b1d0      	cbz	r0, 80130fe <rcl_send_request+0x42>
 80130c8:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80130cc:	b1bb      	cbz	r3, 80130fe <rcl_send_request+0x42>
 80130ce:	460e      	mov	r6, r1
 80130d0:	b1d1      	cbz	r1, 8013108 <rcl_send_request+0x4c>
 80130d2:	4615      	mov	r5, r2
 80130d4:	b1c2      	cbz	r2, 8013108 <rcl_send_request+0x4c>
 80130d6:	2105      	movs	r1, #5
 80130d8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80130dc:	f002 fe58 	bl	8015d90 <__atomic_load_8>
 80130e0:	6823      	ldr	r3, [r4, #0]
 80130e2:	e9c5 0100 	strd	r0, r1, [r5]
 80130e6:	462a      	mov	r2, r5
 80130e8:	4631      	mov	r1, r6
 80130ea:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80130ee:	f003 fd43 	bl	8016b78 <rmw_send_request>
 80130f2:	4606      	mov	r6, r0
 80130f4:	b160      	cbz	r0, 8013110 <rcl_send_request+0x54>
 80130f6:	2601      	movs	r6, #1
 80130f8:	4630      	mov	r0, r6
 80130fa:	b002      	add	sp, #8
 80130fc:	bd70      	pop	{r4, r5, r6, pc}
 80130fe:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8013102:	4630      	mov	r0, r6
 8013104:	b002      	add	sp, #8
 8013106:	bd70      	pop	{r4, r5, r6, pc}
 8013108:	260b      	movs	r6, #11
 801310a:	4630      	mov	r0, r6
 801310c:	b002      	add	sp, #8
 801310e:	bd70      	pop	{r4, r5, r6, pc}
 8013110:	6820      	ldr	r0, [r4, #0]
 8013112:	2105      	movs	r1, #5
 8013114:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013118:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801311c:	9100      	str	r1, [sp, #0]
 801311e:	f002 fea3 	bl	8015e68 <__atomic_exchange_8>
 8013122:	4630      	mov	r0, r6
 8013124:	b002      	add	sp, #8
 8013126:	bd70      	pop	{r4, r5, r6, pc}

08013128 <rcl_take_response>:
 8013128:	b570      	push	{r4, r5, r6, lr}
 801312a:	468e      	mov	lr, r1
 801312c:	460c      	mov	r4, r1
 801312e:	4616      	mov	r6, r2
 8013130:	4605      	mov	r5, r0
 8013132:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013136:	b08c      	sub	sp, #48	@ 0x30
 8013138:	f10d 0c18 	add.w	ip, sp, #24
 801313c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013140:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013144:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013148:	b35d      	cbz	r5, 80131a2 <rcl_take_response+0x7a>
 801314a:	682b      	ldr	r3, [r5, #0]
 801314c:	b34b      	cbz	r3, 80131a2 <rcl_take_response+0x7a>
 801314e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013152:	b330      	cbz	r0, 80131a2 <rcl_take_response+0x7a>
 8013154:	b346      	cbz	r6, 80131a8 <rcl_take_response+0x80>
 8013156:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80131b0 <rcl_take_response+0x88>
 801315a:	2300      	movs	r3, #0
 801315c:	f88d 3007 	strb.w	r3, [sp, #7]
 8013160:	4632      	mov	r2, r6
 8013162:	f10d 0307 	add.w	r3, sp, #7
 8013166:	a902      	add	r1, sp, #8
 8013168:	ed8d 7b02 	vstr	d7, [sp, #8]
 801316c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013170:	f003 fe0a 	bl	8016d88 <rmw_take_response>
 8013174:	4605      	mov	r5, r0
 8013176:	b9c8      	cbnz	r0, 80131ac <rcl_take_response+0x84>
 8013178:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801317c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8013180:	2a00      	cmp	r2, #0
 8013182:	bf08      	it	eq
 8013184:	461d      	moveq	r5, r3
 8013186:	f10d 0e18 	add.w	lr, sp, #24
 801318a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801318e:	46a4      	mov	ip, r4
 8013190:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013194:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013198:	e88c 0003 	stmia.w	ip, {r0, r1}
 801319c:	4628      	mov	r0, r5
 801319e:	b00c      	add	sp, #48	@ 0x30
 80131a0:	bd70      	pop	{r4, r5, r6, pc}
 80131a2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80131a6:	e7ee      	b.n	8013186 <rcl_take_response+0x5e>
 80131a8:	250b      	movs	r5, #11
 80131aa:	e7ec      	b.n	8013186 <rcl_take_response+0x5e>
 80131ac:	2501      	movs	r5, #1
 80131ae:	e7ea      	b.n	8013186 <rcl_take_response+0x5e>
	...

080131b8 <rcl_client_is_valid>:
 80131b8:	b130      	cbz	r0, 80131c8 <rcl_client_is_valid+0x10>
 80131ba:	6800      	ldr	r0, [r0, #0]
 80131bc:	b120      	cbz	r0, 80131c8 <rcl_client_is_valid+0x10>
 80131be:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80131c2:	3800      	subs	r0, #0
 80131c4:	bf18      	it	ne
 80131c6:	2001      	movne	r0, #1
 80131c8:	4770      	bx	lr
 80131ca:	bf00      	nop

080131cc <rcl_convert_rmw_ret_to_rcl_ret>:
 80131cc:	280b      	cmp	r0, #11
 80131ce:	dc0d      	bgt.n	80131ec <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80131d0:	2800      	cmp	r0, #0
 80131d2:	db09      	blt.n	80131e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80131d4:	280b      	cmp	r0, #11
 80131d6:	d807      	bhi.n	80131e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80131d8:	e8df f000 	tbb	[pc, r0]
 80131dc:	07060607 	.word	0x07060607
 80131e0:	06060606 	.word	0x06060606
 80131e4:	07070606 	.word	0x07070606
 80131e8:	2001      	movs	r0, #1
 80131ea:	4770      	bx	lr
 80131ec:	28cb      	cmp	r0, #203	@ 0xcb
 80131ee:	bf18      	it	ne
 80131f0:	2001      	movne	r0, #1
 80131f2:	4770      	bx	lr

080131f4 <rcl_get_zero_initialized_context>:
 80131f4:	4a03      	ldr	r2, [pc, #12]	@ (8013204 <rcl_get_zero_initialized_context+0x10>)
 80131f6:	4603      	mov	r3, r0
 80131f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80131fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8013200:	4618      	mov	r0, r3
 8013202:	4770      	bx	lr
 8013204:	0801b1a0 	.word	0x0801b1a0

08013208 <rcl_context_is_valid>:
 8013208:	b118      	cbz	r0, 8013212 <rcl_context_is_valid+0xa>
 801320a:	6840      	ldr	r0, [r0, #4]
 801320c:	3800      	subs	r0, #0
 801320e:	bf18      	it	ne
 8013210:	2001      	movne	r0, #1
 8013212:	4770      	bx	lr

08013214 <__cleanup_context>:
 8013214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013218:	4606      	mov	r6, r0
 801321a:	6800      	ldr	r0, [r0, #0]
 801321c:	2300      	movs	r3, #0
 801321e:	6073      	str	r3, [r6, #4]
 8013220:	2800      	cmp	r0, #0
 8013222:	d049      	beq.n	80132b8 <__cleanup_context+0xa4>
 8013224:	6947      	ldr	r7, [r0, #20]
 8013226:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801322a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801322e:	b137      	cbz	r7, 801323e <__cleanup_context+0x2a>
 8013230:	3014      	adds	r0, #20
 8013232:	f7f8 ff1d 	bl	800c070 <rcl_init_options_fini>
 8013236:	4607      	mov	r7, r0
 8013238:	2800      	cmp	r0, #0
 801323a:	d144      	bne.n	80132c6 <__cleanup_context+0xb2>
 801323c:	6830      	ldr	r0, [r6, #0]
 801323e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013240:	b143      	cbz	r3, 8013254 <__cleanup_context+0x40>
 8013242:	3028      	adds	r0, #40	@ 0x28
 8013244:	f7fa fb4c 	bl	800d8e0 <rmw_context_fini>
 8013248:	b118      	cbz	r0, 8013252 <__cleanup_context+0x3e>
 801324a:	2f00      	cmp	r7, #0
 801324c:	d03e      	beq.n	80132cc <__cleanup_context+0xb8>
 801324e:	f7fa f87f 	bl	800d350 <rcutils_reset_error>
 8013252:	6830      	ldr	r0, [r6, #0]
 8013254:	6a03      	ldr	r3, [r0, #32]
 8013256:	b1db      	cbz	r3, 8013290 <__cleanup_context+0x7c>
 8013258:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801325c:	2a01      	cmp	r2, #1
 801325e:	f17c 0100 	sbcs.w	r1, ip, #0
 8013262:	db11      	blt.n	8013288 <__cleanup_context+0x74>
 8013264:	2400      	movs	r4, #0
 8013266:	4625      	mov	r5, r4
 8013268:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801326c:	4649      	mov	r1, r9
 801326e:	b1b8      	cbz	r0, 80132a0 <__cleanup_context+0x8c>
 8013270:	47c0      	blx	r8
 8013272:	6833      	ldr	r3, [r6, #0]
 8013274:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8013278:	3401      	adds	r4, #1
 801327a:	f145 0500 	adc.w	r5, r5, #0
 801327e:	4294      	cmp	r4, r2
 8013280:	eb75 010c 	sbcs.w	r1, r5, ip
 8013284:	6a1b      	ldr	r3, [r3, #32]
 8013286:	dbef      	blt.n	8013268 <__cleanup_context+0x54>
 8013288:	4618      	mov	r0, r3
 801328a:	4649      	mov	r1, r9
 801328c:	47c0      	blx	r8
 801328e:	6830      	ldr	r0, [r6, #0]
 8013290:	4649      	mov	r1, r9
 8013292:	47c0      	blx	r8
 8013294:	2300      	movs	r3, #0
 8013296:	e9c6 3300 	strd	r3, r3, [r6]
 801329a:	4638      	mov	r0, r7
 801329c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132a0:	3401      	adds	r4, #1
 80132a2:	f145 0500 	adc.w	r5, r5, #0
 80132a6:	4294      	cmp	r4, r2
 80132a8:	eb75 010c 	sbcs.w	r1, r5, ip
 80132ac:	dbdc      	blt.n	8013268 <__cleanup_context+0x54>
 80132ae:	4618      	mov	r0, r3
 80132b0:	4649      	mov	r1, r9
 80132b2:	47c0      	blx	r8
 80132b4:	6830      	ldr	r0, [r6, #0]
 80132b6:	e7eb      	b.n	8013290 <__cleanup_context+0x7c>
 80132b8:	4607      	mov	r7, r0
 80132ba:	2300      	movs	r3, #0
 80132bc:	e9c6 3300 	strd	r3, r3, [r6]
 80132c0:	4638      	mov	r0, r7
 80132c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132c6:	f7fa f843 	bl	800d350 <rcutils_reset_error>
 80132ca:	e7b7      	b.n	801323c <__cleanup_context+0x28>
 80132cc:	f7ff ff7e 	bl	80131cc <rcl_convert_rmw_ret_to_rcl_ret>
 80132d0:	4607      	mov	r7, r0
 80132d2:	e7bc      	b.n	801324e <__cleanup_context+0x3a>

080132d4 <rcl_init>:
 80132d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132d8:	1e05      	subs	r5, r0, #0
 80132da:	b09e      	sub	sp, #120	@ 0x78
 80132dc:	460e      	mov	r6, r1
 80132de:	4690      	mov	r8, r2
 80132e0:	461f      	mov	r7, r3
 80132e2:	f340 809c 	ble.w	801341e <rcl_init+0x14a>
 80132e6:	2900      	cmp	r1, #0
 80132e8:	f000 809c 	beq.w	8013424 <rcl_init+0x150>
 80132ec:	f1a1 0e04 	sub.w	lr, r1, #4
 80132f0:	f04f 0c00 	mov.w	ip, #0
 80132f4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80132f8:	f10c 0c01 	add.w	ip, ip, #1
 80132fc:	2c00      	cmp	r4, #0
 80132fe:	f000 8091 	beq.w	8013424 <rcl_init+0x150>
 8013302:	4565      	cmp	r5, ip
 8013304:	d1f6      	bne.n	80132f4 <rcl_init+0x20>
 8013306:	f1b8 0f00 	cmp.w	r8, #0
 801330a:	f000 808b 	beq.w	8013424 <rcl_init+0x150>
 801330e:	f8d8 4000 	ldr.w	r4, [r8]
 8013312:	2c00      	cmp	r4, #0
 8013314:	f000 8086 	beq.w	8013424 <rcl_init+0x150>
 8013318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801331a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801331e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013322:	6823      	ldr	r3, [r4, #0]
 8013324:	f8cc 3000 	str.w	r3, [ip]
 8013328:	a819      	add	r0, sp, #100	@ 0x64
 801332a:	f7f9 ffeb 	bl	800d304 <rcutils_allocator_is_valid>
 801332e:	2800      	cmp	r0, #0
 8013330:	d078      	beq.n	8013424 <rcl_init+0x150>
 8013332:	2f00      	cmp	r7, #0
 8013334:	d076      	beq.n	8013424 <rcl_init+0x150>
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d178      	bne.n	801342e <rcl_init+0x15a>
 801333c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8013340:	2178      	movs	r1, #120	@ 0x78
 8013342:	2001      	movs	r0, #1
 8013344:	4798      	blx	r3
 8013346:	4604      	mov	r4, r0
 8013348:	6038      	str	r0, [r7, #0]
 801334a:	2800      	cmp	r0, #0
 801334c:	f000 80b6 	beq.w	80134bc <rcl_init+0x1e8>
 8013350:	a802      	add	r0, sp, #8
 8013352:	f003 f86d 	bl	8016430 <rmw_get_zero_initialized_context>
 8013356:	a902      	add	r1, sp, #8
 8013358:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801335c:	2250      	movs	r2, #80	@ 0x50
 801335e:	ac19      	add	r4, sp, #100	@ 0x64
 8013360:	f005 ff43 	bl	80191ea <memcpy>
 8013364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013366:	f8d7 e000 	ldr.w	lr, [r7]
 801336a:	46f4      	mov	ip, lr
 801336c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013370:	6823      	ldr	r3, [r4, #0]
 8013372:	f8cc 3000 	str.w	r3, [ip]
 8013376:	f10e 0114 	add.w	r1, lr, #20
 801337a:	4640      	mov	r0, r8
 801337c:	f7f8 fea2 	bl	800c0c4 <rcl_init_options_copy>
 8013380:	4604      	mov	r4, r0
 8013382:	2800      	cmp	r0, #0
 8013384:	d144      	bne.n	8013410 <rcl_init+0x13c>
 8013386:	f8d7 9000 	ldr.w	r9, [r7]
 801338a:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801338e:	f8c9 0020 	str.w	r0, [r9, #32]
 8013392:	f8c9 5018 	str.w	r5, [r9, #24]
 8013396:	f8c9 801c 	str.w	r8, [r9, #28]
 801339a:	2d00      	cmp	r5, #0
 801339c:	d04e      	beq.n	801343c <rcl_init+0x168>
 801339e:	2e00      	cmp	r6, #0
 80133a0:	d04c      	beq.n	801343c <rcl_init+0x168>
 80133a2:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80133a6:	2104      	movs	r1, #4
 80133a8:	4628      	mov	r0, r5
 80133aa:	4798      	blx	r3
 80133ac:	f8c9 0020 	str.w	r0, [r9, #32]
 80133b0:	f8d7 9000 	ldr.w	r9, [r7]
 80133b4:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80133b8:	46ca      	mov	sl, r9
 80133ba:	b343      	cbz	r3, 801340e <rcl_init+0x13a>
 80133bc:	2d01      	cmp	r5, #1
 80133be:	f178 0300 	sbcs.w	r3, r8, #0
 80133c2:	db3b      	blt.n	801343c <rcl_init+0x168>
 80133c4:	2400      	movs	r4, #0
 80133c6:	3e04      	subs	r6, #4
 80133c8:	46a1      	mov	r9, r4
 80133ca:	e00b      	b.n	80133e4 <rcl_init+0x110>
 80133cc:	6831      	ldr	r1, [r6, #0]
 80133ce:	f005 ff0c 	bl	80191ea <memcpy>
 80133d2:	3401      	adds	r4, #1
 80133d4:	f149 0900 	adc.w	r9, r9, #0
 80133d8:	45c8      	cmp	r8, r9
 80133da:	bf08      	it	eq
 80133dc:	42a5      	cmpeq	r5, r4
 80133de:	d02b      	beq.n	8013438 <rcl_init+0x164>
 80133e0:	f8d7 a000 	ldr.w	sl, [r7]
 80133e4:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80133e8:	f7ec ff24 	bl	8000234 <strlen>
 80133ec:	1c42      	adds	r2, r0, #1
 80133ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80133f0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80133f2:	f8da a020 	ldr.w	sl, [sl, #32]
 80133f6:	9201      	str	r2, [sp, #4]
 80133f8:	4610      	mov	r0, r2
 80133fa:	4798      	blx	r3
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8013402:	6a1b      	ldr	r3, [r3, #32]
 8013404:	9a01      	ldr	r2, [sp, #4]
 8013406:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801340a:	2800      	cmp	r0, #0
 801340c:	d1de      	bne.n	80133cc <rcl_init+0xf8>
 801340e:	240a      	movs	r4, #10
 8013410:	4638      	mov	r0, r7
 8013412:	f7ff feff 	bl	8013214 <__cleanup_context>
 8013416:	4620      	mov	r0, r4
 8013418:	b01e      	add	sp, #120	@ 0x78
 801341a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801341e:	2900      	cmp	r1, #0
 8013420:	f43f af71 	beq.w	8013306 <rcl_init+0x32>
 8013424:	240b      	movs	r4, #11
 8013426:	4620      	mov	r0, r4
 8013428:	b01e      	add	sp, #120	@ 0x78
 801342a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801342e:	2464      	movs	r4, #100	@ 0x64
 8013430:	4620      	mov	r0, r4
 8013432:	b01e      	add	sp, #120	@ 0x78
 8013434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013438:	f8d7 9000 	ldr.w	r9, [r7]
 801343c:	4926      	ldr	r1, [pc, #152]	@ (80134d8 <rcl_init+0x204>)
 801343e:	680b      	ldr	r3, [r1, #0]
 8013440:	3301      	adds	r3, #1
 8013442:	d036      	beq.n	80134b2 <rcl_init+0x1de>
 8013444:	600b      	str	r3, [r1, #0]
 8013446:	461a      	mov	r2, r3
 8013448:	2400      	movs	r4, #0
 801344a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801344e:	607b      	str	r3, [r7, #4]
 8013450:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013452:	3301      	adds	r3, #1
 8013454:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8013458:	d034      	beq.n	80134c4 <rcl_init+0x1f0>
 801345a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801345e:	b93b      	cbnz	r3, 8013470 <rcl_init+0x19c>
 8013460:	3030      	adds	r0, #48	@ 0x30
 8013462:	f000 f83b 	bl	80134dc <rcl_get_localhost_only>
 8013466:	4604      	mov	r4, r0
 8013468:	2800      	cmp	r0, #0
 801346a:	d1d1      	bne.n	8013410 <rcl_init+0x13c>
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	6958      	ldr	r0, [r3, #20]
 8013470:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8013472:	aa18      	add	r2, sp, #96	@ 0x60
 8013474:	a917      	add	r1, sp, #92	@ 0x5c
 8013476:	f001 f925 	bl	80146c4 <rcl_validate_enclave_name>
 801347a:	4604      	mov	r4, r0
 801347c:	2800      	cmp	r0, #0
 801347e:	d1c7      	bne.n	8013410 <rcl_init+0x13c>
 8013480:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013482:	b9eb      	cbnz	r3, 80134c0 <rcl_init+0x1ec>
 8013484:	6839      	ldr	r1, [r7, #0]
 8013486:	694b      	ldr	r3, [r1, #20]
 8013488:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801348a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801348e:	f000 fb3f 	bl	8013b10 <rcl_get_security_options_from_environment>
 8013492:	4604      	mov	r4, r0
 8013494:	2800      	cmp	r0, #0
 8013496:	d1bb      	bne.n	8013410 <rcl_init+0x13c>
 8013498:	6839      	ldr	r1, [r7, #0]
 801349a:	6948      	ldr	r0, [r1, #20]
 801349c:	3128      	adds	r1, #40	@ 0x28
 801349e:	3018      	adds	r0, #24
 80134a0:	f7fa f8e8 	bl	800d674 <rmw_init>
 80134a4:	4604      	mov	r4, r0
 80134a6:	2800      	cmp	r0, #0
 80134a8:	d0bd      	beq.n	8013426 <rcl_init+0x152>
 80134aa:	f7ff fe8f 	bl	80131cc <rcl_convert_rmw_ret_to_rcl_ret>
 80134ae:	4604      	mov	r4, r0
 80134b0:	e7ae      	b.n	8013410 <rcl_init+0x13c>
 80134b2:	2201      	movs	r2, #1
 80134b4:	461c      	mov	r4, r3
 80134b6:	600a      	str	r2, [r1, #0]
 80134b8:	4613      	mov	r3, r2
 80134ba:	e7c6      	b.n	801344a <rcl_init+0x176>
 80134bc:	240a      	movs	r4, #10
 80134be:	e7b2      	b.n	8013426 <rcl_init+0x152>
 80134c0:	2401      	movs	r4, #1
 80134c2:	e7a5      	b.n	8013410 <rcl_init+0x13c>
 80134c4:	3024      	adds	r0, #36	@ 0x24
 80134c6:	f004 fccf 	bl	8017e68 <rcl_get_default_domain_id>
 80134ca:	4604      	mov	r4, r0
 80134cc:	2800      	cmp	r0, #0
 80134ce:	d19f      	bne.n	8013410 <rcl_init+0x13c>
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	6958      	ldr	r0, [r3, #20]
 80134d4:	e7c1      	b.n	801345a <rcl_init+0x186>
 80134d6:	bf00      	nop
 80134d8:	2000b560 	.word	0x2000b560

080134dc <rcl_get_localhost_only>:
 80134dc:	b510      	push	{r4, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	2300      	movs	r3, #0
 80134e2:	9301      	str	r3, [sp, #4]
 80134e4:	b1b8      	cbz	r0, 8013516 <rcl_get_localhost_only+0x3a>
 80134e6:	4604      	mov	r4, r0
 80134e8:	a901      	add	r1, sp, #4
 80134ea:	480c      	ldr	r0, [pc, #48]	@ (801351c <rcl_get_localhost_only+0x40>)
 80134ec:	f002 fcf4 	bl	8015ed8 <rcutils_get_env>
 80134f0:	b110      	cbz	r0, 80134f8 <rcl_get_localhost_only+0x1c>
 80134f2:	2001      	movs	r0, #1
 80134f4:	b002      	add	sp, #8
 80134f6:	bd10      	pop	{r4, pc}
 80134f8:	9b01      	ldr	r3, [sp, #4]
 80134fa:	b113      	cbz	r3, 8013502 <rcl_get_localhost_only+0x26>
 80134fc:	781a      	ldrb	r2, [r3, #0]
 80134fe:	2a31      	cmp	r2, #49	@ 0x31
 8013500:	d004      	beq.n	801350c <rcl_get_localhost_only+0x30>
 8013502:	2302      	movs	r3, #2
 8013504:	2000      	movs	r0, #0
 8013506:	7023      	strb	r3, [r4, #0]
 8013508:	b002      	add	sp, #8
 801350a:	bd10      	pop	{r4, pc}
 801350c:	785b      	ldrb	r3, [r3, #1]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d1f7      	bne.n	8013502 <rcl_get_localhost_only+0x26>
 8013512:	2301      	movs	r3, #1
 8013514:	e7f6      	b.n	8013504 <rcl_get_localhost_only+0x28>
 8013516:	200b      	movs	r0, #11
 8013518:	b002      	add	sp, #8
 801351a:	bd10      	pop	{r4, pc}
 801351c:	0801b1a8 	.word	0x0801b1a8

08013520 <rcl_get_zero_initialized_node>:
 8013520:	4a03      	ldr	r2, [pc, #12]	@ (8013530 <rcl_get_zero_initialized_node+0x10>)
 8013522:	4603      	mov	r3, r0
 8013524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013528:	e883 0003 	stmia.w	r3, {r0, r1}
 801352c:	4618      	mov	r0, r3
 801352e:	4770      	bx	lr
 8013530:	0801b1c4 	.word	0x0801b1c4

08013534 <rcl_node_init>:
 8013534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013538:	b0a9      	sub	sp, #164	@ 0xa4
 801353a:	4604      	mov	r4, r0
 801353c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8013540:	a823      	add	r0, sp, #140	@ 0x8c
 8013542:	460e      	mov	r6, r1
 8013544:	4615      	mov	r5, r2
 8013546:	461f      	mov	r7, r3
 8013548:	f004 ff02 	bl	8018350 <rcl_guard_condition_get_default_options>
 801354c:	f1b8 0f00 	cmp.w	r8, #0
 8013550:	f000 80e6 	beq.w	8013720 <rcl_node_init+0x1ec>
 8013554:	4640      	mov	r0, r8
 8013556:	f7f9 fed5 	bl	800d304 <rcutils_allocator_is_valid>
 801355a:	2800      	cmp	r0, #0
 801355c:	f000 80e0 	beq.w	8013720 <rcl_node_init+0x1ec>
 8013560:	2e00      	cmp	r6, #0
 8013562:	f000 80dd 	beq.w	8013720 <rcl_node_init+0x1ec>
 8013566:	2d00      	cmp	r5, #0
 8013568:	f000 80da 	beq.w	8013720 <rcl_node_init+0x1ec>
 801356c:	2c00      	cmp	r4, #0
 801356e:	f000 80d7 	beq.w	8013720 <rcl_node_init+0x1ec>
 8013572:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013576:	f1b9 0f00 	cmp.w	r9, #0
 801357a:	f040 80fd 	bne.w	8013778 <rcl_node_init+0x244>
 801357e:	2f00      	cmp	r7, #0
 8013580:	f000 80ce 	beq.w	8013720 <rcl_node_init+0x1ec>
 8013584:	4638      	mov	r0, r7
 8013586:	f7ff fe3f 	bl	8013208 <rcl_context_is_valid>
 801358a:	4682      	mov	sl, r0
 801358c:	2800      	cmp	r0, #0
 801358e:	f000 80cd 	beq.w	801372c <rcl_node_init+0x1f8>
 8013592:	464a      	mov	r2, r9
 8013594:	a922      	add	r1, sp, #136	@ 0x88
 8013596:	4630      	mov	r0, r6
 8013598:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 801359c:	f003 f8c6 	bl	801672c <rmw_validate_node_name>
 80135a0:	4681      	mov	r9, r0
 80135a2:	2800      	cmp	r0, #0
 80135a4:	f040 80be 	bne.w	8013724 <rcl_node_init+0x1f0>
 80135a8:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80135aa:	2800      	cmp	r0, #0
 80135ac:	f040 80f0 	bne.w	8013790 <rcl_node_init+0x25c>
 80135b0:	4628      	mov	r0, r5
 80135b2:	f7ec fe3f 	bl	8000234 <strlen>
 80135b6:	2800      	cmp	r0, #0
 80135b8:	f040 80bb 	bne.w	8013732 <rcl_node_init+0x1fe>
 80135bc:	4d7c      	ldr	r5, [pc, #496]	@ (80137b0 <rcl_node_init+0x27c>)
 80135be:	a922      	add	r1, sp, #136	@ 0x88
 80135c0:	2200      	movs	r2, #0
 80135c2:	4628      	mov	r0, r5
 80135c4:	f003 f894 	bl	80166f0 <rmw_validate_namespace>
 80135c8:	4681      	mov	r9, r0
 80135ca:	2800      	cmp	r0, #0
 80135cc:	f040 80aa 	bne.w	8013724 <rcl_node_init+0x1f0>
 80135d0:	4682      	mov	sl, r0
 80135d2:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80135d4:	2800      	cmp	r0, #0
 80135d6:	f040 80e0 	bne.w	801379a <rcl_node_init+0x266>
 80135da:	f8d8 3000 	ldr.w	r3, [r8]
 80135de:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80135e2:	2078      	movs	r0, #120	@ 0x78
 80135e4:	4798      	blx	r3
 80135e6:	4681      	mov	r9, r0
 80135e8:	6060      	str	r0, [r4, #4]
 80135ea:	2800      	cmp	r0, #0
 80135ec:	f000 80ca 	beq.w	8013784 <rcl_node_init+0x250>
 80135f0:	2200      	movs	r2, #0
 80135f2:	2300      	movs	r3, #0
 80135f4:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 80135f8:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 80135fc:	a808      	add	r0, sp, #32
 80135fe:	f000 f907 	bl	8013810 <rcl_node_get_default_options>
 8013602:	a908      	add	r1, sp, #32
 8013604:	4648      	mov	r0, r9
 8013606:	2268      	movs	r2, #104	@ 0x68
 8013608:	f005 fdef 	bl	80191ea <memcpy>
 801360c:	6861      	ldr	r1, [r4, #4]
 801360e:	6027      	str	r7, [r4, #0]
 8013610:	4640      	mov	r0, r8
 8013612:	f000 f90b 	bl	801382c <rcl_node_options_copy>
 8013616:	2800      	cmp	r0, #0
 8013618:	d158      	bne.n	80136cc <rcl_node_init+0x198>
 801361a:	4628      	mov	r0, r5
 801361c:	f7ec fe0a 	bl	8000234 <strlen>
 8013620:	4428      	add	r0, r5
 8013622:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8013626:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801362a:	2b2f      	cmp	r3, #47	@ 0x2f
 801362c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013630:	9300      	str	r3, [sp, #0]
 8013632:	bf0c      	ite	eq
 8013634:	4b5f      	ldreq	r3, [pc, #380]	@ (80137b4 <rcl_node_init+0x280>)
 8013636:	4b60      	ldrne	r3, [pc, #384]	@ (80137b8 <rcl_node_init+0x284>)
 8013638:	9302      	str	r3, [sp, #8]
 801363a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801363e:	9301      	str	r3, [sp, #4]
 8013640:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013644:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013648:	f002 fc6e 	bl	8015f28 <rcutils_format_string_limit>
 801364c:	6823      	ldr	r3, [r4, #0]
 801364e:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8013652:	6818      	ldr	r0, [r3, #0]
 8013654:	4631      	mov	r1, r6
 8013656:	3028      	adds	r0, #40	@ 0x28
 8013658:	462a      	mov	r2, r5
 801365a:	6866      	ldr	r6, [r4, #4]
 801365c:	f7fa f9ec 	bl	800da38 <rmw_create_node>
 8013660:	6863      	ldr	r3, [r4, #4]
 8013662:	66b0      	str	r0, [r6, #104]	@ 0x68
 8013664:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013666:	2800      	cmp	r0, #0
 8013668:	d032      	beq.n	80136d0 <rcl_node_init+0x19c>
 801366a:	f7fa fa79 	bl	800db60 <rmw_node_get_graph_guard_condition>
 801366e:	4681      	mov	r9, r0
 8013670:	b360      	cbz	r0, 80136cc <rcl_node_init+0x198>
 8013672:	f8d8 3000 	ldr.w	r3, [r8]
 8013676:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801367a:	6866      	ldr	r6, [r4, #4]
 801367c:	2008      	movs	r0, #8
 801367e:	4798      	blx	r3
 8013680:	6863      	ldr	r3, [r4, #4]
 8013682:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8013684:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8013688:	f1bb 0f00 	cmp.w	fp, #0
 801368c:	d020      	beq.n	80136d0 <rcl_node_init+0x19c>
 801368e:	a806      	add	r0, sp, #24
 8013690:	f004 fd82 	bl	8018198 <rcl_get_zero_initialized_guard_condition>
 8013694:	a806      	add	r0, sp, #24
 8013696:	c803      	ldmia	r0, {r0, r1}
 8013698:	6863      	ldr	r3, [r4, #4]
 801369a:	46c4      	mov	ip, r8
 801369c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80136a0:	e88b 0003 	stmia.w	fp, {r0, r1}
 80136a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80136a8:	ae23      	add	r6, sp, #140	@ 0x8c
 80136aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80136ac:	f8dc 3000 	ldr.w	r3, [ip]
 80136b0:	6033      	str	r3, [r6, #0]
 80136b2:	ab28      	add	r3, sp, #160	@ 0xa0
 80136b4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80136b8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80136bc:	4649      	mov	r1, r9
 80136be:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80136c0:	463a      	mov	r2, r7
 80136c2:	4670      	mov	r0, lr
 80136c4:	f004 fdbe 	bl	8018244 <rcl_guard_condition_init_from_rmw>
 80136c8:	4681      	mov	r9, r0
 80136ca:	b328      	cbz	r0, 8013718 <rcl_node_init+0x1e4>
 80136cc:	6863      	ldr	r3, [r4, #4]
 80136ce:	b1f3      	cbz	r3, 801370e <rcl_node_init+0x1da>
 80136d0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80136d2:	b128      	cbz	r0, 80136e0 <rcl_node_init+0x1ac>
 80136d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80136d8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80136dc:	4798      	blx	r3
 80136de:	6863      	ldr	r3, [r4, #4]
 80136e0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80136e2:	b110      	cbz	r0, 80136ea <rcl_node_init+0x1b6>
 80136e4:	f7fa f9c0 	bl	800da68 <rmw_destroy_node>
 80136e8:	6863      	ldr	r3, [r4, #4]
 80136ea:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80136ec:	b148      	cbz	r0, 8013702 <rcl_node_init+0x1ce>
 80136ee:	f004 fe09 	bl	8018304 <rcl_guard_condition_fini>
 80136f2:	6863      	ldr	r3, [r4, #4]
 80136f4:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80136f8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80136fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80136fe:	4798      	blx	r3
 8013700:	6863      	ldr	r3, [r4, #4]
 8013702:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013706:	4618      	mov	r0, r3
 8013708:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801370c:	4798      	blx	r3
 801370e:	2300      	movs	r3, #0
 8013710:	e9c4 3300 	strd	r3, r3, [r4]
 8013714:	f04f 0901 	mov.w	r9, #1
 8013718:	f1ba 0f00 	cmp.w	sl, #0
 801371c:	d125      	bne.n	801376a <rcl_node_init+0x236>
 801371e:	e001      	b.n	8013724 <rcl_node_init+0x1f0>
 8013720:	f04f 090b 	mov.w	r9, #11
 8013724:	4648      	mov	r0, r9
 8013726:	b029      	add	sp, #164	@ 0xa4
 8013728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801372c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8013730:	e7f8      	b.n	8013724 <rcl_node_init+0x1f0>
 8013732:	782b      	ldrb	r3, [r5, #0]
 8013734:	2b2f      	cmp	r3, #47	@ 0x2f
 8013736:	f43f af42 	beq.w	80135be <rcl_node_init+0x8a>
 801373a:	9503      	str	r5, [sp, #12]
 801373c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013740:	9300      	str	r3, [sp, #0]
 8013742:	4b1e      	ldr	r3, [pc, #120]	@ (80137bc <rcl_node_init+0x288>)
 8013744:	9302      	str	r3, [sp, #8]
 8013746:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801374a:	9301      	str	r3, [sp, #4]
 801374c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013750:	f002 fbea 	bl	8015f28 <rcutils_format_string_limit>
 8013754:	4605      	mov	r5, r0
 8013756:	b340      	cbz	r0, 80137aa <rcl_node_init+0x276>
 8013758:	2200      	movs	r2, #0
 801375a:	a922      	add	r1, sp, #136	@ 0x88
 801375c:	9222      	str	r2, [sp, #136]	@ 0x88
 801375e:	f002 ffc7 	bl	80166f0 <rmw_validate_namespace>
 8013762:	4681      	mov	r9, r0
 8013764:	2800      	cmp	r0, #0
 8013766:	f43f af34 	beq.w	80135d2 <rcl_node_init+0x9e>
 801376a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801376e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013772:	4628      	mov	r0, r5
 8013774:	4798      	blx	r3
 8013776:	e7d5      	b.n	8013724 <rcl_node_init+0x1f0>
 8013778:	f04f 0964 	mov.w	r9, #100	@ 0x64
 801377c:	4648      	mov	r0, r9
 801377e:	b029      	add	sp, #164	@ 0xa4
 8013780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013784:	f04f 090a 	mov.w	r9, #10
 8013788:	f1ba 0f00 	cmp.w	sl, #0
 801378c:	d1ed      	bne.n	801376a <rcl_node_init+0x236>
 801378e:	e7c9      	b.n	8013724 <rcl_node_init+0x1f0>
 8013790:	f003 f81e 	bl	80167d0 <rmw_node_name_validation_result_string>
 8013794:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8013798:	e7c4      	b.n	8013724 <rcl_node_init+0x1f0>
 801379a:	f002 ffbb 	bl	8016714 <rmw_namespace_validation_result_string>
 801379e:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 80137a2:	f1ba 0f00 	cmp.w	sl, #0
 80137a6:	d1e0      	bne.n	801376a <rcl_node_init+0x236>
 80137a8:	e7bc      	b.n	8013724 <rcl_node_init+0x1f0>
 80137aa:	f04f 090a 	mov.w	r9, #10
 80137ae:	e7b9      	b.n	8013724 <rcl_node_init+0x1f0>
 80137b0:	0801ac44 	.word	0x0801ac44
 80137b4:	0801ac6c 	.word	0x0801ac6c
 80137b8:	0801ac48 	.word	0x0801ac48
 80137bc:	0801b1c0 	.word	0x0801b1c0

080137c0 <rcl_node_is_valid>:
 80137c0:	b130      	cbz	r0, 80137d0 <rcl_node_is_valid+0x10>
 80137c2:	6843      	ldr	r3, [r0, #4]
 80137c4:	b123      	cbz	r3, 80137d0 <rcl_node_is_valid+0x10>
 80137c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80137c8:	b113      	cbz	r3, 80137d0 <rcl_node_is_valid+0x10>
 80137ca:	6800      	ldr	r0, [r0, #0]
 80137cc:	f7ff bd1c 	b.w	8013208 <rcl_context_is_valid>
 80137d0:	2000      	movs	r0, #0
 80137d2:	4770      	bx	lr

080137d4 <rcl_node_get_name>:
 80137d4:	b120      	cbz	r0, 80137e0 <rcl_node_get_name+0xc>
 80137d6:	6840      	ldr	r0, [r0, #4]
 80137d8:	b110      	cbz	r0, 80137e0 <rcl_node_get_name+0xc>
 80137da:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80137dc:	b100      	cbz	r0, 80137e0 <rcl_node_get_name+0xc>
 80137de:	6880      	ldr	r0, [r0, #8]
 80137e0:	4770      	bx	lr
 80137e2:	bf00      	nop

080137e4 <rcl_node_get_namespace>:
 80137e4:	b120      	cbz	r0, 80137f0 <rcl_node_get_namespace+0xc>
 80137e6:	6840      	ldr	r0, [r0, #4]
 80137e8:	b110      	cbz	r0, 80137f0 <rcl_node_get_namespace+0xc>
 80137ea:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80137ec:	b100      	cbz	r0, 80137f0 <rcl_node_get_namespace+0xc>
 80137ee:	68c0      	ldr	r0, [r0, #12]
 80137f0:	4770      	bx	lr
 80137f2:	bf00      	nop

080137f4 <rcl_node_get_options>:
 80137f4:	b128      	cbz	r0, 8013802 <rcl_node_get_options+0xe>
 80137f6:	6840      	ldr	r0, [r0, #4]
 80137f8:	b118      	cbz	r0, 8013802 <rcl_node_get_options+0xe>
 80137fa:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	bf08      	it	eq
 8013800:	2000      	moveq	r0, #0
 8013802:	4770      	bx	lr

08013804 <rcl_node_get_rmw_handle>:
 8013804:	b110      	cbz	r0, 801380c <rcl_node_get_rmw_handle+0x8>
 8013806:	6840      	ldr	r0, [r0, #4]
 8013808:	b100      	cbz	r0, 801380c <rcl_node_get_rmw_handle+0x8>
 801380a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801380c:	4770      	bx	lr
 801380e:	bf00      	nop

08013810 <rcl_node_get_default_options>:
 8013810:	b510      	push	{r4, lr}
 8013812:	2268      	movs	r2, #104	@ 0x68
 8013814:	4604      	mov	r4, r0
 8013816:	2100      	movs	r1, #0
 8013818:	f005 fc1e 	bl	8019058 <memset>
 801381c:	4620      	mov	r0, r4
 801381e:	f7f9 fd63 	bl	800d2e8 <rcutils_get_default_allocator>
 8013822:	2301      	movs	r3, #1
 8013824:	7523      	strb	r3, [r4, #20]
 8013826:	4620      	mov	r0, r4
 8013828:	bd10      	pop	{r4, pc}
 801382a:	bf00      	nop

0801382c <rcl_node_options_copy>:
 801382c:	b1d0      	cbz	r0, 8013864 <rcl_node_options_copy+0x38>
 801382e:	b570      	push	{r4, r5, r6, lr}
 8013830:	460c      	mov	r4, r1
 8013832:	b1a9      	cbz	r1, 8013860 <rcl_node_options_copy+0x34>
 8013834:	4288      	cmp	r0, r1
 8013836:	4684      	mov	ip, r0
 8013838:	d012      	beq.n	8013860 <rcl_node_options_copy+0x34>
 801383a:	4605      	mov	r5, r0
 801383c:	8a86      	ldrh	r6, [r0, #20]
 801383e:	468e      	mov	lr, r1
 8013840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013842:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013846:	682b      	ldr	r3, [r5, #0]
 8013848:	f8ce 3000 	str.w	r3, [lr]
 801384c:	f10c 0118 	add.w	r1, ip, #24
 8013850:	2250      	movs	r2, #80	@ 0x50
 8013852:	82a6      	strh	r6, [r4, #20]
 8013854:	f104 0018 	add.w	r0, r4, #24
 8013858:	f005 fcc7 	bl	80191ea <memcpy>
 801385c:	2000      	movs	r0, #0
 801385e:	bd70      	pop	{r4, r5, r6, pc}
 8013860:	200b      	movs	r0, #11
 8013862:	bd70      	pop	{r4, r5, r6, pc}
 8013864:	200b      	movs	r0, #11
 8013866:	4770      	bx	lr

08013868 <rcl_node_resolve_name>:
 8013868:	b082      	sub	sp, #8
 801386a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801386e:	b091      	sub	sp, #68	@ 0x44
 8013870:	ac1a      	add	r4, sp, #104	@ 0x68
 8013872:	e884 000c 	stmia.w	r4, {r2, r3}
 8013876:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801387a:	2800      	cmp	r0, #0
 801387c:	d03b      	beq.n	80138f6 <rcl_node_resolve_name+0x8e>
 801387e:	460c      	mov	r4, r1
 8013880:	4605      	mov	r5, r0
 8013882:	f7ff ffb7 	bl	80137f4 <rcl_node_get_options>
 8013886:	2800      	cmp	r0, #0
 8013888:	d037      	beq.n	80138fa <rcl_node_resolve_name+0x92>
 801388a:	4628      	mov	r0, r5
 801388c:	f7ff ffa2 	bl	80137d4 <rcl_node_get_name>
 8013890:	4606      	mov	r6, r0
 8013892:	4628      	mov	r0, r5
 8013894:	f7ff ffa6 	bl	80137e4 <rcl_node_get_namespace>
 8013898:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 801389c:	4681      	mov	r9, r0
 801389e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80138a2:	ad0b      	add	r5, sp, #44	@ 0x2c
 80138a4:	46ac      	mov	ip, r5
 80138a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80138aa:	f8de 3000 	ldr.w	r3, [lr]
 80138ae:	f8cc 3000 	str.w	r3, [ip]
 80138b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80138b4:	b1fb      	cbz	r3, 80138f6 <rcl_node_resolve_name+0x8e>
 80138b6:	468a      	mov	sl, r1
 80138b8:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 80138bc:	f002 fc8c 	bl	80161d8 <rcutils_get_zero_initialized_string_map>
 80138c0:	ab10      	add	r3, sp, #64	@ 0x40
 80138c2:	9008      	str	r0, [sp, #32]
 80138c4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80138c8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80138cc:	2100      	movs	r1, #0
 80138ce:	e895 000c 	ldmia.w	r5, {r2, r3}
 80138d2:	a808      	add	r0, sp, #32
 80138d4:	f002 fcf8 	bl	80162c8 <rcutils_string_map_init>
 80138d8:	4607      	mov	r7, r0
 80138da:	b180      	cbz	r0, 80138fe <rcl_node_resolve_name+0x96>
 80138dc:	f7f9 fd20 	bl	800d320 <rcutils_get_error_string>
 80138e0:	f7f9 fd36 	bl	800d350 <rcutils_reset_error>
 80138e4:	2f0a      	cmp	r7, #10
 80138e6:	bf18      	it	ne
 80138e8:	2701      	movne	r7, #1
 80138ea:	4638      	mov	r0, r7
 80138ec:	b011      	add	sp, #68	@ 0x44
 80138ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138f2:	b002      	add	sp, #8
 80138f4:	4770      	bx	lr
 80138f6:	270b      	movs	r7, #11
 80138f8:	e7f7      	b.n	80138ea <rcl_node_resolve_name+0x82>
 80138fa:	2701      	movs	r7, #1
 80138fc:	e7f5      	b.n	80138ea <rcl_node_resolve_name+0x82>
 80138fe:	9009      	str	r0, [sp, #36]	@ 0x24
 8013900:	9007      	str	r0, [sp, #28]
 8013902:	a808      	add	r0, sp, #32
 8013904:	f004 fc42 	bl	801818c <rcl_get_default_topic_name_substitutions>
 8013908:	4607      	mov	r7, r0
 801390a:	b1a8      	cbz	r0, 8013938 <rcl_node_resolve_name+0xd0>
 801390c:	280a      	cmp	r0, #10
 801390e:	9c07      	ldr	r4, [sp, #28]
 8013910:	d000      	beq.n	8013914 <rcl_node_resolve_name+0xac>
 8013912:	2701      	movs	r7, #1
 8013914:	a808      	add	r0, sp, #32
 8013916:	f002 fd17 	bl	8016348 <rcutils_string_map_fini>
 801391a:	2800      	cmp	r0, #0
 801391c:	d13d      	bne.n	801399a <rcl_node_resolve_name+0x132>
 801391e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013920:	4659      	mov	r1, fp
 8013922:	47d0      	blx	sl
 8013924:	4659      	mov	r1, fp
 8013926:	4620      	mov	r0, r4
 8013928:	47d0      	blx	sl
 801392a:	f1b8 0f00 	cmp.w	r8, #0
 801392e:	d0dc      	beq.n	80138ea <rcl_node_resolve_name+0x82>
 8013930:	2f67      	cmp	r7, #103	@ 0x67
 8013932:	bf08      	it	eq
 8013934:	2768      	moveq	r7, #104	@ 0x68
 8013936:	e7d8      	b.n	80138ea <rcl_node_resolve_name+0x82>
 8013938:	ab09      	add	r3, sp, #36	@ 0x24
 801393a:	9305      	str	r3, [sp, #20]
 801393c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801393e:	46ec      	mov	ip, sp
 8013940:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013944:	682b      	ldr	r3, [r5, #0]
 8013946:	f8cc 3000 	str.w	r3, [ip]
 801394a:	464a      	mov	r2, r9
 801394c:	4631      	mov	r1, r6
 801394e:	4620      	mov	r0, r4
 8013950:	ab08      	add	r3, sp, #32
 8013952:	f004 fabd 	bl	8017ed0 <rcl_expand_topic_name>
 8013956:	4607      	mov	r7, r0
 8013958:	b9b8      	cbnz	r0, 801398a <rcl_node_resolve_name+0x122>
 801395a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801395c:	9009      	str	r0, [sp, #36]	@ 0x24
 801395e:	4602      	mov	r2, r0
 8013960:	a90a      	add	r1, sp, #40	@ 0x28
 8013962:	4620      	mov	r0, r4
 8013964:	f002 fe00 	bl	8016568 <rmw_validate_full_topic_name>
 8013968:	b988      	cbnz	r0, 801398e <rcl_node_resolve_name+0x126>
 801396a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801396c:	b9d5      	cbnz	r5, 80139a4 <rcl_node_resolve_name+0x13c>
 801396e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013970:	a808      	add	r0, sp, #32
 8013972:	601c      	str	r4, [r3, #0]
 8013974:	f002 fce8 	bl	8016348 <rcutils_string_map_fini>
 8013978:	4607      	mov	r7, r0
 801397a:	b1a8      	cbz	r0, 80139a8 <rcl_node_resolve_name+0x140>
 801397c:	f7f9 fcd0 	bl	800d320 <rcutils_get_error_string>
 8013980:	462c      	mov	r4, r5
 8013982:	f7f9 fce5 	bl	800d350 <rcutils_reset_error>
 8013986:	2701      	movs	r7, #1
 8013988:	e7c9      	b.n	801391e <rcl_node_resolve_name+0xb6>
 801398a:	9c07      	ldr	r4, [sp, #28]
 801398c:	e7c2      	b.n	8013914 <rcl_node_resolve_name+0xac>
 801398e:	f7f9 fcc7 	bl	800d320 <rcutils_get_error_string>
 8013992:	2701      	movs	r7, #1
 8013994:	f7f9 fcdc 	bl	800d350 <rcutils_reset_error>
 8013998:	e7bc      	b.n	8013914 <rcl_node_resolve_name+0xac>
 801399a:	f7f9 fcc1 	bl	800d320 <rcutils_get_error_string>
 801399e:	f7f9 fcd7 	bl	800d350 <rcutils_reset_error>
 80139a2:	e7bc      	b.n	801391e <rcl_node_resolve_name+0xb6>
 80139a4:	2767      	movs	r7, #103	@ 0x67
 80139a6:	e7b5      	b.n	8013914 <rcl_node_resolve_name+0xac>
 80139a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80139aa:	4659      	mov	r1, fp
 80139ac:	47d0      	blx	sl
 80139ae:	4659      	mov	r1, fp
 80139b0:	4638      	mov	r0, r7
 80139b2:	47d0      	blx	sl
 80139b4:	e799      	b.n	80138ea <rcl_node_resolve_name+0x82>
 80139b6:	bf00      	nop

080139b8 <exact_match_lookup>:
 80139b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139ba:	f102 0708 	add.w	r7, r2, #8
 80139be:	460b      	mov	r3, r1
 80139c0:	4614      	mov	r4, r2
 80139c2:	4606      	mov	r6, r0
 80139c4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80139c8:	b085      	sub	sp, #20
 80139ca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80139ce:	4618      	mov	r0, r3
 80139d0:	4919      	ldr	r1, [pc, #100]	@ (8013a38 <exact_match_lookup+0x80>)
 80139d2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80139d6:	f002 fa99 	bl	8015f0c <rcutils_join_path>
 80139da:	7833      	ldrb	r3, [r6, #0]
 80139dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80139de:	4605      	mov	r5, r0
 80139e0:	d023      	beq.n	8013a2a <exact_match_lookup+0x72>
 80139e2:	f104 030c 	add.w	r3, r4, #12
 80139e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80139ea:	e88d 0003 	stmia.w	sp, {r0, r1}
 80139ee:	1c70      	adds	r0, r6, #1
 80139f0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80139f4:	f002 fa90 	bl	8015f18 <rcutils_to_native_path>
 80139f8:	4606      	mov	r6, r0
 80139fa:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80139fe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013a02:	4631      	mov	r1, r6
 8013a04:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013a08:	4628      	mov	r0, r5
 8013a0a:	f002 fa7f 	bl	8015f0c <rcutils_join_path>
 8013a0e:	6862      	ldr	r2, [r4, #4]
 8013a10:	6921      	ldr	r1, [r4, #16]
 8013a12:	4603      	mov	r3, r0
 8013a14:	4630      	mov	r0, r6
 8013a16:	461e      	mov	r6, r3
 8013a18:	4790      	blx	r2
 8013a1a:	4628      	mov	r0, r5
 8013a1c:	6863      	ldr	r3, [r4, #4]
 8013a1e:	6921      	ldr	r1, [r4, #16]
 8013a20:	4798      	blx	r3
 8013a22:	4635      	mov	r5, r6
 8013a24:	4628      	mov	r0, r5
 8013a26:	b005      	add	sp, #20
 8013a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a2a:	7873      	ldrb	r3, [r6, #1]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d1d8      	bne.n	80139e2 <exact_match_lookup+0x2a>
 8013a30:	4628      	mov	r0, r5
 8013a32:	b005      	add	sp, #20
 8013a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a36:	bf00      	nop
 8013a38:	0801b208 	.word	0x0801b208

08013a3c <rcl_get_secure_root>:
 8013a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a40:	b085      	sub	sp, #20
 8013a42:	b168      	cbz	r0, 8013a60 <rcl_get_secure_root+0x24>
 8013a44:	4607      	mov	r7, r0
 8013a46:	4608      	mov	r0, r1
 8013a48:	460c      	mov	r4, r1
 8013a4a:	f7f9 fc5b 	bl	800d304 <rcutils_allocator_is_valid>
 8013a4e:	b138      	cbz	r0, 8013a60 <rcl_get_secure_root+0x24>
 8013a50:	2300      	movs	r3, #0
 8013a52:	482d      	ldr	r0, [pc, #180]	@ (8013b08 <rcl_get_secure_root+0xcc>)
 8013a54:	9303      	str	r3, [sp, #12]
 8013a56:	a903      	add	r1, sp, #12
 8013a58:	f002 fa3e 	bl	8015ed8 <rcutils_get_env>
 8013a5c:	4605      	mov	r5, r0
 8013a5e:	b120      	cbz	r0, 8013a6a <rcl_get_secure_root+0x2e>
 8013a60:	2500      	movs	r5, #0
 8013a62:	4628      	mov	r0, r5
 8013a64:	b005      	add	sp, #20
 8013a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a6a:	9b03      	ldr	r3, [sp, #12]
 8013a6c:	781a      	ldrb	r2, [r3, #0]
 8013a6e:	2a00      	cmp	r2, #0
 8013a70:	d0f6      	beq.n	8013a60 <rcl_get_secure_root+0x24>
 8013a72:	f104 090c 	add.w	r9, r4, #12
 8013a76:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013a7a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013a84:	f002 fb6a 	bl	801615c <rcutils_strdup>
 8013a88:	4680      	mov	r8, r0
 8013a8a:	2800      	cmp	r0, #0
 8013a8c:	d0e8      	beq.n	8013a60 <rcl_get_secure_root+0x24>
 8013a8e:	481f      	ldr	r0, [pc, #124]	@ (8013b0c <rcl_get_secure_root+0xd0>)
 8013a90:	9503      	str	r5, [sp, #12]
 8013a92:	a903      	add	r1, sp, #12
 8013a94:	f002 fa20 	bl	8015ed8 <rcutils_get_env>
 8013a98:	b160      	cbz	r0, 8013ab4 <rcl_get_secure_root+0x78>
 8013a9a:	2600      	movs	r6, #0
 8013a9c:	6863      	ldr	r3, [r4, #4]
 8013a9e:	6921      	ldr	r1, [r4, #16]
 8013aa0:	4630      	mov	r0, r6
 8013aa2:	4798      	blx	r3
 8013aa4:	4640      	mov	r0, r8
 8013aa6:	6863      	ldr	r3, [r4, #4]
 8013aa8:	6921      	ldr	r1, [r4, #16]
 8013aaa:	4798      	blx	r3
 8013aac:	4628      	mov	r0, r5
 8013aae:	b005      	add	sp, #20
 8013ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ab4:	9b03      	ldr	r3, [sp, #12]
 8013ab6:	781e      	ldrb	r6, [r3, #0]
 8013ab8:	b1f6      	cbz	r6, 8013af8 <rcl_get_secure_root+0xbc>
 8013aba:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013abe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013ac8:	f002 fb48 	bl	801615c <rcutils_strdup>
 8013acc:	4606      	mov	r6, r0
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	d0e3      	beq.n	8013a9a <rcl_get_secure_root+0x5e>
 8013ad2:	4622      	mov	r2, r4
 8013ad4:	4641      	mov	r1, r8
 8013ad6:	f7ff ff6f 	bl	80139b8 <exact_match_lookup>
 8013ada:	4605      	mov	r5, r0
 8013adc:	2d00      	cmp	r5, #0
 8013ade:	d0dd      	beq.n	8013a9c <rcl_get_secure_root+0x60>
 8013ae0:	4628      	mov	r0, r5
 8013ae2:	f002 fa11 	bl	8015f08 <rcutils_is_directory>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	2800      	cmp	r0, #0
 8013aea:	d1d7      	bne.n	8013a9c <rcl_get_secure_root+0x60>
 8013aec:	4628      	mov	r0, r5
 8013aee:	6921      	ldr	r1, [r4, #16]
 8013af0:	461d      	mov	r5, r3
 8013af2:	6863      	ldr	r3, [r4, #4]
 8013af4:	4798      	blx	r3
 8013af6:	e7d1      	b.n	8013a9c <rcl_get_secure_root+0x60>
 8013af8:	4622      	mov	r2, r4
 8013afa:	4638      	mov	r0, r7
 8013afc:	4641      	mov	r1, r8
 8013afe:	f7ff ff5b 	bl	80139b8 <exact_match_lookup>
 8013b02:	4605      	mov	r5, r0
 8013b04:	e7ea      	b.n	8013adc <rcl_get_secure_root+0xa0>
 8013b06:	bf00      	nop
 8013b08:	0801b214 	.word	0x0801b214
 8013b0c:	0801b22c 	.word	0x0801b22c

08013b10 <rcl_get_security_options_from_environment>:
 8013b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b14:	b082      	sub	sp, #8
 8013b16:	2300      	movs	r3, #0
 8013b18:	4606      	mov	r6, r0
 8013b1a:	460f      	mov	r7, r1
 8013b1c:	4820      	ldr	r0, [pc, #128]	@ (8013ba0 <rcl_get_security_options_from_environment+0x90>)
 8013b1e:	9301      	str	r3, [sp, #4]
 8013b20:	a901      	add	r1, sp, #4
 8013b22:	4690      	mov	r8, r2
 8013b24:	f002 f9d8 	bl	8015ed8 <rcutils_get_env>
 8013b28:	b120      	cbz	r0, 8013b34 <rcl_get_security_options_from_environment+0x24>
 8013b2a:	2501      	movs	r5, #1
 8013b2c:	4628      	mov	r0, r5
 8013b2e:	b002      	add	sp, #8
 8013b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b34:	491b      	ldr	r1, [pc, #108]	@ (8013ba4 <rcl_get_security_options_from_environment+0x94>)
 8013b36:	4604      	mov	r4, r0
 8013b38:	9801      	ldr	r0, [sp, #4]
 8013b3a:	f7ec fb71 	bl	8000220 <strcmp>
 8013b3e:	4605      	mov	r5, r0
 8013b40:	b9e8      	cbnz	r0, 8013b7e <rcl_get_security_options_from_environment+0x6e>
 8013b42:	9001      	str	r0, [sp, #4]
 8013b44:	f1b8 0f00 	cmp.w	r8, #0
 8013b48:	d020      	beq.n	8013b8c <rcl_get_security_options_from_environment+0x7c>
 8013b4a:	4817      	ldr	r0, [pc, #92]	@ (8013ba8 <rcl_get_security_options_from_environment+0x98>)
 8013b4c:	a901      	add	r1, sp, #4
 8013b4e:	f002 f9c3 	bl	8015ed8 <rcutils_get_env>
 8013b52:	2800      	cmp	r0, #0
 8013b54:	d1e9      	bne.n	8013b2a <rcl_get_security_options_from_environment+0x1a>
 8013b56:	4915      	ldr	r1, [pc, #84]	@ (8013bac <rcl_get_security_options_from_environment+0x9c>)
 8013b58:	9801      	ldr	r0, [sp, #4]
 8013b5a:	f7ec fb61 	bl	8000220 <strcmp>
 8013b5e:	fab0 f080 	clz	r0, r0
 8013b62:	0940      	lsrs	r0, r0, #5
 8013b64:	f888 0000 	strb.w	r0, [r8]
 8013b68:	4639      	mov	r1, r7
 8013b6a:	4630      	mov	r0, r6
 8013b6c:	f7ff ff66 	bl	8013a3c <rcl_get_secure_root>
 8013b70:	b170      	cbz	r0, 8013b90 <rcl_get_security_options_from_environment+0x80>
 8013b72:	f8c8 0004 	str.w	r0, [r8, #4]
 8013b76:	4628      	mov	r0, r5
 8013b78:	b002      	add	sp, #8
 8013b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b7e:	4625      	mov	r5, r4
 8013b80:	4628      	mov	r0, r5
 8013b82:	f888 4000 	strb.w	r4, [r8]
 8013b86:	b002      	add	sp, #8
 8013b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b8c:	250b      	movs	r5, #11
 8013b8e:	e7cd      	b.n	8013b2c <rcl_get_security_options_from_environment+0x1c>
 8013b90:	f898 5000 	ldrb.w	r5, [r8]
 8013b94:	f1a5 0501 	sub.w	r5, r5, #1
 8013b98:	fab5 f585 	clz	r5, r5
 8013b9c:	096d      	lsrs	r5, r5, #5
 8013b9e:	e7c5      	b.n	8013b2c <rcl_get_security_options_from_environment+0x1c>
 8013ba0:	0801b1cc 	.word	0x0801b1cc
 8013ba4:	0801b1e0 	.word	0x0801b1e0
 8013ba8:	0801b1e8 	.word	0x0801b1e8
 8013bac:	0801b200 	.word	0x0801b200

08013bb0 <rcl_get_zero_initialized_service>:
 8013bb0:	4b01      	ldr	r3, [pc, #4]	@ (8013bb8 <rcl_get_zero_initialized_service+0x8>)
 8013bb2:	6818      	ldr	r0, [r3, #0]
 8013bb4:	4770      	bx	lr
 8013bb6:	bf00      	nop
 8013bb8:	0801b24c 	.word	0x0801b24c

08013bbc <rcl_service_init>:
 8013bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013bc0:	b089      	sub	sp, #36	@ 0x24
 8013bc2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8013bc4:	b1c5      	cbz	r5, 8013bf8 <rcl_service_init+0x3c>
 8013bc6:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8013bca:	4604      	mov	r4, r0
 8013bcc:	4648      	mov	r0, r9
 8013bce:	4688      	mov	r8, r1
 8013bd0:	4617      	mov	r7, r2
 8013bd2:	461e      	mov	r6, r3
 8013bd4:	f7f9 fb96 	bl	800d304 <rcutils_allocator_is_valid>
 8013bd8:	b170      	cbz	r0, 8013bf8 <rcl_service_init+0x3c>
 8013bda:	b16c      	cbz	r4, 8013bf8 <rcl_service_init+0x3c>
 8013bdc:	4640      	mov	r0, r8
 8013bde:	f7ff fdef 	bl	80137c0 <rcl_node_is_valid>
 8013be2:	2800      	cmp	r0, #0
 8013be4:	d058      	beq.n	8013c98 <rcl_service_init+0xdc>
 8013be6:	b13f      	cbz	r7, 8013bf8 <rcl_service_init+0x3c>
 8013be8:	b136      	cbz	r6, 8013bf8 <rcl_service_init+0x3c>
 8013bea:	6823      	ldr	r3, [r4, #0]
 8013bec:	b14b      	cbz	r3, 8013c02 <rcl_service_init+0x46>
 8013bee:	2664      	movs	r6, #100	@ 0x64
 8013bf0:	4630      	mov	r0, r6
 8013bf2:	b009      	add	sp, #36	@ 0x24
 8013bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013bf8:	260b      	movs	r6, #11
 8013bfa:	4630      	mov	r0, r6
 8013bfc:	b009      	add	sp, #36	@ 0x24
 8013bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c02:	aa07      	add	r2, sp, #28
 8013c04:	9205      	str	r2, [sp, #20]
 8013c06:	2201      	movs	r2, #1
 8013c08:	9304      	str	r3, [sp, #16]
 8013c0a:	9203      	str	r2, [sp, #12]
 8013c0c:	9307      	str	r3, [sp, #28]
 8013c0e:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8013c12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013c16:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013c1a:	4631      	mov	r1, r6
 8013c1c:	e899 000c 	ldmia.w	r9, {r2, r3}
 8013c20:	4640      	mov	r0, r8
 8013c22:	f7ff fe21 	bl	8013868 <rcl_node_resolve_name>
 8013c26:	2800      	cmp	r0, #0
 8013c28:	d145      	bne.n	8013cb6 <rcl_service_init+0xfa>
 8013c2a:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8013c2c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8013c2e:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8013c32:	4798      	blx	r3
 8013c34:	6020      	str	r0, [r4, #0]
 8013c36:	2800      	cmp	r0, #0
 8013c38:	d043      	beq.n	8013cc2 <rcl_service_init+0x106>
 8013c3a:	4640      	mov	r0, r8
 8013c3c:	f7ff fde2 	bl	8013804 <rcl_node_get_rmw_handle>
 8013c40:	462b      	mov	r3, r5
 8013c42:	9a07      	ldr	r2, [sp, #28]
 8013c44:	6826      	ldr	r6, [r4, #0]
 8013c46:	4639      	mov	r1, r7
 8013c48:	f7fa f934 	bl	800deb4 <rmw_create_service>
 8013c4c:	6823      	ldr	r3, [r4, #0]
 8013c4e:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 8013c52:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013c56:	b330      	cbz	r0, 8013ca6 <rcl_service_init+0xea>
 8013c58:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8013c5c:	f7fa fa50 	bl	800e100 <rmw_service_request_subscription_get_actual_qos>
 8013c60:	b9f8      	cbnz	r0, 8013ca2 <rcl_service_init+0xe6>
 8013c62:	6821      	ldr	r1, [r4, #0]
 8013c64:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8013c68:	31b8      	adds	r1, #184	@ 0xb8
 8013c6a:	f7fa fa39 	bl	800e0e0 <rmw_service_response_publisher_get_actual_qos>
 8013c6e:	4606      	mov	r6, r0
 8013c70:	b9b8      	cbnz	r0, 8013ca2 <rcl_service_init+0xe6>
 8013c72:	6820      	ldr	r0, [r4, #0]
 8013c74:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8013c78:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8013c7c:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8013c80:	2268      	movs	r2, #104	@ 0x68
 8013c82:	4629      	mov	r1, r5
 8013c84:	f005 fab1 	bl	80191ea <memcpy>
 8013c88:	9807      	ldr	r0, [sp, #28]
 8013c8a:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8013c8c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8013c8e:	4798      	blx	r3
 8013c90:	4630      	mov	r0, r6
 8013c92:	b009      	add	sp, #36	@ 0x24
 8013c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c98:	26c8      	movs	r6, #200	@ 0xc8
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	b009      	add	sp, #36	@ 0x24
 8013c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ca2:	6823      	ldr	r3, [r4, #0]
 8013ca4:	b12b      	cbz	r3, 8013cb2 <rcl_service_init+0xf6>
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8013caa:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8013cac:	4790      	blx	r2
 8013cae:	2300      	movs	r3, #0
 8013cb0:	6023      	str	r3, [r4, #0]
 8013cb2:	2601      	movs	r6, #1
 8013cb4:	e7e8      	b.n	8013c88 <rcl_service_init+0xcc>
 8013cb6:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8013cba:	2b01      	cmp	r3, #1
 8013cbc:	d903      	bls.n	8013cc6 <rcl_service_init+0x10a>
 8013cbe:	280a      	cmp	r0, #10
 8013cc0:	d1f7      	bne.n	8013cb2 <rcl_service_init+0xf6>
 8013cc2:	260a      	movs	r6, #10
 8013cc4:	e7e0      	b.n	8013c88 <rcl_service_init+0xcc>
 8013cc6:	2668      	movs	r6, #104	@ 0x68
 8013cc8:	e7de      	b.n	8013c88 <rcl_service_init+0xcc>
 8013cca:	bf00      	nop

08013ccc <rcl_service_get_default_options>:
 8013ccc:	b530      	push	{r4, r5, lr}
 8013cce:	4d0f      	ldr	r5, [pc, #60]	@ (8013d0c <rcl_service_get_default_options+0x40>)
 8013cd0:	490f      	ldr	r1, [pc, #60]	@ (8013d10 <rcl_service_get_default_options+0x44>)
 8013cd2:	b087      	sub	sp, #28
 8013cd4:	4604      	mov	r4, r0
 8013cd6:	2250      	movs	r2, #80	@ 0x50
 8013cd8:	4628      	mov	r0, r5
 8013cda:	f005 fa86 	bl	80191ea <memcpy>
 8013cde:	4668      	mov	r0, sp
 8013ce0:	f7f9 fb02 	bl	800d2e8 <rcutils_get_default_allocator>
 8013ce4:	46ec      	mov	ip, sp
 8013ce6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013cea:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8013cee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013cf2:	2268      	movs	r2, #104	@ 0x68
 8013cf4:	f8dc 3000 	ldr.w	r3, [ip]
 8013cf8:	f8ce 3000 	str.w	r3, [lr]
 8013cfc:	4629      	mov	r1, r5
 8013cfe:	4620      	mov	r0, r4
 8013d00:	f005 fa73 	bl	80191ea <memcpy>
 8013d04:	4620      	mov	r0, r4
 8013d06:	b007      	add	sp, #28
 8013d08:	bd30      	pop	{r4, r5, pc}
 8013d0a:	bf00      	nop
 8013d0c:	2000b568 	.word	0x2000b568
 8013d10:	0801b250 	.word	0x0801b250

08013d14 <rcl_service_get_rmw_handle>:
 8013d14:	b118      	cbz	r0, 8013d1e <rcl_service_get_rmw_handle+0xa>
 8013d16:	6800      	ldr	r0, [r0, #0]
 8013d18:	b108      	cbz	r0, 8013d1e <rcl_service_get_rmw_handle+0xa>
 8013d1a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013d1e:	4770      	bx	lr

08013d20 <rcl_take_request>:
 8013d20:	b570      	push	{r4, r5, r6, lr}
 8013d22:	468e      	mov	lr, r1
 8013d24:	460c      	mov	r4, r1
 8013d26:	4616      	mov	r6, r2
 8013d28:	4605      	mov	r5, r0
 8013d2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013d2e:	b08c      	sub	sp, #48	@ 0x30
 8013d30:	f10d 0c18 	add.w	ip, sp, #24
 8013d34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d38:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013d3c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013d40:	b30d      	cbz	r5, 8013d86 <rcl_take_request+0x66>
 8013d42:	682b      	ldr	r3, [r5, #0]
 8013d44:	b1fb      	cbz	r3, 8013d86 <rcl_take_request+0x66>
 8013d46:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013d4a:	b1e0      	cbz	r0, 8013d86 <rcl_take_request+0x66>
 8013d4c:	b336      	cbz	r6, 8013d9c <rcl_take_request+0x7c>
 8013d4e:	2300      	movs	r3, #0
 8013d50:	f88d 3007 	strb.w	r3, [sp, #7]
 8013d54:	4632      	mov	r2, r6
 8013d56:	f10d 0307 	add.w	r3, sp, #7
 8013d5a:	a902      	add	r1, sp, #8
 8013d5c:	f002 ff5a 	bl	8016c14 <rmw_take_request>
 8013d60:	4605      	mov	r5, r0
 8013d62:	b198      	cbz	r0, 8013d8c <rcl_take_request+0x6c>
 8013d64:	280a      	cmp	r0, #10
 8013d66:	bf18      	it	ne
 8013d68:	2501      	movne	r5, #1
 8013d6a:	f10d 0e18 	add.w	lr, sp, #24
 8013d6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013d72:	46a4      	mov	ip, r4
 8013d74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d78:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013d7c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013d80:	4628      	mov	r0, r5
 8013d82:	b00c      	add	sp, #48	@ 0x30
 8013d84:	bd70      	pop	{r4, r5, r6, pc}
 8013d86:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8013d8a:	e7ee      	b.n	8013d6a <rcl_take_request+0x4a>
 8013d8c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013d90:	f240 2359 	movw	r3, #601	@ 0x259
 8013d94:	2a00      	cmp	r2, #0
 8013d96:	bf08      	it	eq
 8013d98:	461d      	moveq	r5, r3
 8013d9a:	e7e6      	b.n	8013d6a <rcl_take_request+0x4a>
 8013d9c:	250b      	movs	r5, #11
 8013d9e:	e7e4      	b.n	8013d6a <rcl_take_request+0x4a>

08013da0 <rcl_send_response>:
 8013da0:	b170      	cbz	r0, 8013dc0 <rcl_send_response+0x20>
 8013da2:	6800      	ldr	r0, [r0, #0]
 8013da4:	b160      	cbz	r0, 8013dc0 <rcl_send_response+0x20>
 8013da6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013daa:	b148      	cbz	r0, 8013dc0 <rcl_send_response+0x20>
 8013dac:	b159      	cbz	r1, 8013dc6 <rcl_send_response+0x26>
 8013dae:	b510      	push	{r4, lr}
 8013db0:	b15a      	cbz	r2, 8013dca <rcl_send_response+0x2a>
 8013db2:	f002 ff8d 	bl	8016cd0 <rmw_send_response>
 8013db6:	b110      	cbz	r0, 8013dbe <rcl_send_response+0x1e>
 8013db8:	2802      	cmp	r0, #2
 8013dba:	bf18      	it	ne
 8013dbc:	2001      	movne	r0, #1
 8013dbe:	bd10      	pop	{r4, pc}
 8013dc0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8013dc4:	4770      	bx	lr
 8013dc6:	200b      	movs	r0, #11
 8013dc8:	4770      	bx	lr
 8013dca:	200b      	movs	r0, #11
 8013dcc:	bd10      	pop	{r4, pc}
 8013dce:	bf00      	nop

08013dd0 <rcl_service_is_valid>:
 8013dd0:	b130      	cbz	r0, 8013de0 <rcl_service_is_valid+0x10>
 8013dd2:	6800      	ldr	r0, [r0, #0]
 8013dd4:	b120      	cbz	r0, 8013de0 <rcl_service_is_valid+0x10>
 8013dd6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013dda:	3800      	subs	r0, #0
 8013ddc:	bf18      	it	ne
 8013dde:	2001      	movne	r0, #1
 8013de0:	4770      	bx	lr
 8013de2:	bf00      	nop

08013de4 <rcl_take>:
 8013de4:	2800      	cmp	r0, #0
 8013de6:	d04a      	beq.n	8013e7e <rcl_take+0x9a>
 8013de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dec:	4604      	mov	r4, r0
 8013dee:	6800      	ldr	r0, [r0, #0]
 8013df0:	b0a4      	sub	sp, #144	@ 0x90
 8013df2:	2800      	cmp	r0, #0
 8013df4:	d03b      	beq.n	8013e6e <rcl_take+0x8a>
 8013df6:	461f      	mov	r7, r3
 8013df8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d036      	beq.n	8013e6e <rcl_take+0x8a>
 8013e00:	460e      	mov	r6, r1
 8013e02:	2900      	cmp	r1, #0
 8013e04:	d039      	beq.n	8013e7a <rcl_take+0x96>
 8013e06:	4615      	mov	r5, r2
 8013e08:	2a00      	cmp	r2, #0
 8013e0a:	d03c      	beq.n	8013e86 <rcl_take+0xa2>
 8013e0c:	a802      	add	r0, sp, #8
 8013e0e:	f002 fba3 	bl	8016558 <rmw_get_zero_initialized_message_info>
 8013e12:	f10d 0c08 	add.w	ip, sp, #8
 8013e16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013e1a:	46ae      	mov	lr, r5
 8013e1c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013e20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013e24:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013e28:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013e2c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013e30:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8013e34:	f04f 0800 	mov.w	r8, #0
 8013e38:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8013e3c:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8013e40:	6822      	ldr	r2, [r4, #0]
 8013e42:	462b      	mov	r3, r5
 8013e44:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8013e48:	9700      	str	r7, [sp, #0]
 8013e4a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8013e4e:	4631      	mov	r1, r6
 8013e50:	f002 ffe4 	bl	8016e1c <rmw_take_with_info>
 8013e54:	4603      	mov	r3, r0
 8013e56:	b9c0      	cbnz	r0, 8013e8a <rcl_take+0xa6>
 8013e58:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8013e5c:	f240 1291 	movw	r2, #401	@ 0x191
 8013e60:	2900      	cmp	r1, #0
 8013e62:	bf08      	it	eq
 8013e64:	4613      	moveq	r3, r2
 8013e66:	4618      	mov	r0, r3
 8013e68:	b024      	add	sp, #144	@ 0x90
 8013e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e6e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8013e72:	4618      	mov	r0, r3
 8013e74:	b024      	add	sp, #144	@ 0x90
 8013e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e7a:	230b      	movs	r3, #11
 8013e7c:	e7f3      	b.n	8013e66 <rcl_take+0x82>
 8013e7e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8013e82:	4618      	mov	r0, r3
 8013e84:	4770      	bx	lr
 8013e86:	ad14      	add	r5, sp, #80	@ 0x50
 8013e88:	e7c0      	b.n	8013e0c <rcl_take+0x28>
 8013e8a:	f7ff f99f 	bl	80131cc <rcl_convert_rmw_ret_to_rcl_ret>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	e7e9      	b.n	8013e66 <rcl_take+0x82>
 8013e92:	bf00      	nop

08013e94 <rcl_subscription_get_rmw_handle>:
 8013e94:	b118      	cbz	r0, 8013e9e <rcl_subscription_get_rmw_handle+0xa>
 8013e96:	6800      	ldr	r0, [r0, #0]
 8013e98:	b108      	cbz	r0, 8013e9e <rcl_subscription_get_rmw_handle+0xa>
 8013e9a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8013e9e:	4770      	bx	lr

08013ea0 <rcl_subscription_is_valid>:
 8013ea0:	b130      	cbz	r0, 8013eb0 <rcl_subscription_is_valid+0x10>
 8013ea2:	6800      	ldr	r0, [r0, #0]
 8013ea4:	b120      	cbz	r0, 8013eb0 <rcl_subscription_is_valid+0x10>
 8013ea6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8013eaa:	3800      	subs	r0, #0
 8013eac:	bf18      	it	ne
 8013eae:	2001      	movne	r0, #1
 8013eb0:	4770      	bx	lr
 8013eb2:	bf00      	nop

08013eb4 <rcl_get_system_time>:
 8013eb4:	4608      	mov	r0, r1
 8013eb6:	f7f9 ba67 	b.w	800d388 <rcutils_system_time_now>
 8013eba:	bf00      	nop

08013ebc <rcl_get_steady_time>:
 8013ebc:	4608      	mov	r0, r1
 8013ebe:	f7f9 ba8b 	b.w	800d3d8 <rcutils_steady_time_now>
 8013ec2:	bf00      	nop

08013ec4 <rcl_get_ros_time>:
 8013ec4:	7a03      	ldrb	r3, [r0, #8]
 8013ec6:	b510      	push	{r4, lr}
 8013ec8:	460c      	mov	r4, r1
 8013eca:	b133      	cbz	r3, 8013eda <rcl_get_ros_time+0x16>
 8013ecc:	2105      	movs	r1, #5
 8013ece:	f001 ff5f 	bl	8015d90 <__atomic_load_8>
 8013ed2:	e9c4 0100 	strd	r0, r1, [r4]
 8013ed6:	2000      	movs	r0, #0
 8013ed8:	bd10      	pop	{r4, pc}
 8013eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ede:	4608      	mov	r0, r1
 8013ee0:	f7f9 ba52 	b.w	800d388 <rcutils_system_time_now>

08013ee4 <rcl_clock_init>:
 8013ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ee6:	4605      	mov	r5, r0
 8013ee8:	4610      	mov	r0, r2
 8013eea:	4614      	mov	r4, r2
 8013eec:	460e      	mov	r6, r1
 8013eee:	f7f9 fa09 	bl	800d304 <rcutils_allocator_is_valid>
 8013ef2:	b128      	cbz	r0, 8013f00 <rcl_clock_init+0x1c>
 8013ef4:	2d03      	cmp	r5, #3
 8013ef6:	d803      	bhi.n	8013f00 <rcl_clock_init+0x1c>
 8013ef8:	e8df f005 	tbb	[pc, r5]
 8013efc:	06532e1d 	.word	0x06532e1d
 8013f00:	f04f 0c0b 	mov.w	ip, #11
 8013f04:	4660      	mov	r0, ip
 8013f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f08:	2e00      	cmp	r6, #0
 8013f0a:	d0f9      	beq.n	8013f00 <rcl_clock_init+0x1c>
 8013f0c:	2c00      	cmp	r4, #0
 8013f0e:	d0f7      	beq.n	8013f00 <rcl_clock_init+0x1c>
 8013f10:	2300      	movs	r3, #0
 8013f12:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013f16:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8013fcc <rcl_clock_init+0xe8>
 8013f1a:	6133      	str	r3, [r6, #16]
 8013f1c:	f106 0514 	add.w	r5, r6, #20
 8013f20:	469c      	mov	ip, r3
 8013f22:	2703      	movs	r7, #3
 8013f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f28:	6823      	ldr	r3, [r4, #0]
 8013f2a:	602b      	str	r3, [r5, #0]
 8013f2c:	7037      	strb	r7, [r6, #0]
 8013f2e:	f8c6 e00c 	str.w	lr, [r6, #12]
 8013f32:	4660      	mov	r0, ip
 8013f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f36:	2e00      	cmp	r6, #0
 8013f38:	d0e2      	beq.n	8013f00 <rcl_clock_init+0x1c>
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	7033      	strb	r3, [r6, #0]
 8013f3e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013f42:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8013f46:	469c      	mov	ip, r3
 8013f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f4a:	f106 0514 	add.w	r5, r6, #20
 8013f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f50:	6823      	ldr	r3, [r4, #0]
 8013f52:	602b      	str	r3, [r5, #0]
 8013f54:	4660      	mov	r0, ip
 8013f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f58:	2e00      	cmp	r6, #0
 8013f5a:	d0d1      	beq.n	8013f00 <rcl_clock_init+0x1c>
 8013f5c:	2c00      	cmp	r4, #0
 8013f5e:	d0cf      	beq.n	8013f00 <rcl_clock_init+0x1c>
 8013f60:	2700      	movs	r7, #0
 8013f62:	7037      	strb	r7, [r6, #0]
 8013f64:	46a4      	mov	ip, r4
 8013f66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f6a:	f106 0514 	add.w	r5, r6, #20
 8013f6e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8013f72:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8013f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f78:	f8dc 3000 	ldr.w	r3, [ip]
 8013f7c:	602b      	str	r3, [r5, #0]
 8013f7e:	6921      	ldr	r1, [r4, #16]
 8013f80:	6823      	ldr	r3, [r4, #0]
 8013f82:	2010      	movs	r0, #16
 8013f84:	4798      	blx	r3
 8013f86:	6130      	str	r0, [r6, #16]
 8013f88:	b1d0      	cbz	r0, 8013fc0 <rcl_clock_init+0xdc>
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	e9c0 2300 	strd	r2, r3, [r0]
 8013f92:	2301      	movs	r3, #1
 8013f94:	7207      	strb	r7, [r0, #8]
 8013f96:	4a0c      	ldr	r2, [pc, #48]	@ (8013fc8 <rcl_clock_init+0xe4>)
 8013f98:	7033      	strb	r3, [r6, #0]
 8013f9a:	46bc      	mov	ip, r7
 8013f9c:	60f2      	str	r2, [r6, #12]
 8013f9e:	4660      	mov	r0, ip
 8013fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fa2:	2e00      	cmp	r6, #0
 8013fa4:	d0ac      	beq.n	8013f00 <rcl_clock_init+0x1c>
 8013fa6:	2c00      	cmp	r4, #0
 8013fa8:	d0aa      	beq.n	8013f00 <rcl_clock_init+0x1c>
 8013faa:	2300      	movs	r3, #0
 8013fac:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013fb0:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8013fd0 <rcl_clock_init+0xec>
 8013fb4:	6133      	str	r3, [r6, #16]
 8013fb6:	f106 0514 	add.w	r5, r6, #20
 8013fba:	469c      	mov	ip, r3
 8013fbc:	2702      	movs	r7, #2
 8013fbe:	e7b1      	b.n	8013f24 <rcl_clock_init+0x40>
 8013fc0:	f04f 0c0a 	mov.w	ip, #10
 8013fc4:	e79e      	b.n	8013f04 <rcl_clock_init+0x20>
 8013fc6:	bf00      	nop
 8013fc8:	08013ec5 	.word	0x08013ec5
 8013fcc:	08013ebd 	.word	0x08013ebd
 8013fd0:	08013eb5 	.word	0x08013eb5

08013fd4 <rcl_clock_get_now>:
 8013fd4:	b140      	cbz	r0, 8013fe8 <rcl_clock_get_now+0x14>
 8013fd6:	b139      	cbz	r1, 8013fe8 <rcl_clock_get_now+0x14>
 8013fd8:	7803      	ldrb	r3, [r0, #0]
 8013fda:	b11b      	cbz	r3, 8013fe4 <rcl_clock_get_now+0x10>
 8013fdc:	68c3      	ldr	r3, [r0, #12]
 8013fde:	b10b      	cbz	r3, 8013fe4 <rcl_clock_get_now+0x10>
 8013fe0:	6900      	ldr	r0, [r0, #16]
 8013fe2:	4718      	bx	r3
 8013fe4:	2001      	movs	r0, #1
 8013fe6:	4770      	bx	lr
 8013fe8:	200b      	movs	r0, #11
 8013fea:	4770      	bx	lr

08013fec <rcl_clock_add_jump_callback>:
 8013fec:	b082      	sub	sp, #8
 8013fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ff2:	a906      	add	r1, sp, #24
 8013ff4:	e881 000c 	stmia.w	r1, {r2, r3}
 8013ff8:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8013ffc:	b320      	cbz	r0, 8014048 <rcl_clock_add_jump_callback+0x5c>
 8013ffe:	4604      	mov	r4, r0
 8014000:	3014      	adds	r0, #20
 8014002:	f7f9 f97f 	bl	800d304 <rcutils_allocator_is_valid>
 8014006:	b1f8      	cbz	r0, 8014048 <rcl_clock_add_jump_callback+0x5c>
 8014008:	b1f6      	cbz	r6, 8014048 <rcl_clock_add_jump_callback+0x5c>
 801400a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801400c:	2b00      	cmp	r3, #0
 801400e:	db1b      	blt.n	8014048 <rcl_clock_add_jump_callback+0x5c>
 8014010:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8014014:	2a01      	cmp	r2, #1
 8014016:	f173 0300 	sbcs.w	r3, r3, #0
 801401a:	da15      	bge.n	8014048 <rcl_clock_add_jump_callback+0x5c>
 801401c:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8014020:	2f00      	cmp	r7, #0
 8014022:	d042      	beq.n	80140aa <rcl_clock_add_jump_callback+0xbe>
 8014024:	2300      	movs	r3, #0
 8014026:	4602      	mov	r2, r0
 8014028:	e003      	b.n	8014032 <rcl_clock_add_jump_callback+0x46>
 801402a:	42bb      	cmp	r3, r7
 801402c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8014030:	d011      	beq.n	8014056 <rcl_clock_add_jump_callback+0x6a>
 8014032:	6811      	ldr	r1, [r2, #0]
 8014034:	42b1      	cmp	r1, r6
 8014036:	f103 0301 	add.w	r3, r3, #1
 801403a:	d1f6      	bne.n	801402a <rcl_clock_add_jump_callback+0x3e>
 801403c:	6a11      	ldr	r1, [r2, #32]
 801403e:	42a9      	cmp	r1, r5
 8014040:	d1f3      	bne.n	801402a <rcl_clock_add_jump_callback+0x3e>
 8014042:	f04f 0e01 	mov.w	lr, #1
 8014046:	e001      	b.n	801404c <rcl_clock_add_jump_callback+0x60>
 8014048:	f04f 0e0b 	mov.w	lr, #11
 801404c:	4670      	mov	r0, lr
 801404e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014052:	b002      	add	sp, #8
 8014054:	4770      	bx	lr
 8014056:	3301      	adds	r3, #1
 8014058:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801405c:	00d9      	lsls	r1, r3, #3
 801405e:	69e3      	ldr	r3, [r4, #28]
 8014060:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014062:	4798      	blx	r3
 8014064:	b1f0      	cbz	r0, 80140a4 <rcl_clock_add_jump_callback+0xb8>
 8014066:	68a3      	ldr	r3, [r4, #8]
 8014068:	6060      	str	r0, [r4, #4]
 801406a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801406e:	f10d 0c18 	add.w	ip, sp, #24
 8014072:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8014076:	f103 0801 	add.w	r8, r3, #1
 801407a:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801407e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014082:	f106 0708 	add.w	r7, r6, #8
 8014086:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014088:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801408c:	f04f 0e00 	mov.w	lr, #0
 8014090:	e887 0003 	stmia.w	r7, {r0, r1}
 8014094:	6235      	str	r5, [r6, #32]
 8014096:	4670      	mov	r0, lr
 8014098:	f8c4 8008 	str.w	r8, [r4, #8]
 801409c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140a0:	b002      	add	sp, #8
 80140a2:	4770      	bx	lr
 80140a4:	f04f 0e0a 	mov.w	lr, #10
 80140a8:	e7d0      	b.n	801404c <rcl_clock_add_jump_callback+0x60>
 80140aa:	2128      	movs	r1, #40	@ 0x28
 80140ac:	e7d7      	b.n	801405e <rcl_clock_add_jump_callback+0x72>
 80140ae:	bf00      	nop

080140b0 <rcl_clock_remove_jump_callback>:
 80140b0:	2800      	cmp	r0, #0
 80140b2:	d057      	beq.n	8014164 <rcl_clock_remove_jump_callback+0xb4>
 80140b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140b8:	4605      	mov	r5, r0
 80140ba:	3014      	adds	r0, #20
 80140bc:	4688      	mov	r8, r1
 80140be:	4692      	mov	sl, r2
 80140c0:	f7f9 f920 	bl	800d304 <rcutils_allocator_is_valid>
 80140c4:	2800      	cmp	r0, #0
 80140c6:	d03b      	beq.n	8014140 <rcl_clock_remove_jump_callback+0x90>
 80140c8:	f1b8 0f00 	cmp.w	r8, #0
 80140cc:	d038      	beq.n	8014140 <rcl_clock_remove_jump_callback+0x90>
 80140ce:	68ae      	ldr	r6, [r5, #8]
 80140d0:	b166      	cbz	r6, 80140ec <rcl_clock_remove_jump_callback+0x3c>
 80140d2:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80140d6:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 80140da:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 80140de:	464c      	mov	r4, r9
 80140e0:	6823      	ldr	r3, [r4, #0]
 80140e2:	4543      	cmp	r3, r8
 80140e4:	d005      	beq.n	80140f2 <rcl_clock_remove_jump_callback+0x42>
 80140e6:	3428      	adds	r4, #40	@ 0x28
 80140e8:	42a7      	cmp	r7, r4
 80140ea:	d1f9      	bne.n	80140e0 <rcl_clock_remove_jump_callback+0x30>
 80140ec:	2001      	movs	r0, #1
 80140ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140f2:	6a23      	ldr	r3, [r4, #32]
 80140f4:	3428      	adds	r4, #40	@ 0x28
 80140f6:	42bc      	cmp	r4, r7
 80140f8:	d02d      	beq.n	8014156 <rcl_clock_remove_jump_callback+0xa6>
 80140fa:	4553      	cmp	r3, sl
 80140fc:	d1f0      	bne.n	80140e0 <rcl_clock_remove_jump_callback+0x30>
 80140fe:	46a6      	mov	lr, r4
 8014100:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014104:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8014108:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801410c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014110:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014114:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014118:	3428      	adds	r4, #40	@ 0x28
 801411a:	42a7      	cmp	r7, r4
 801411c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014120:	d1ed      	bne.n	80140fe <rcl_clock_remove_jump_callback+0x4e>
 8014122:	3e01      	subs	r6, #1
 8014124:	60ae      	str	r6, [r5, #8]
 8014126:	b176      	cbz	r6, 8014146 <rcl_clock_remove_jump_callback+0x96>
 8014128:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 801412c:	69eb      	ldr	r3, [r5, #28]
 801412e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8014130:	00f1      	lsls	r1, r6, #3
 8014132:	4648      	mov	r0, r9
 8014134:	4798      	blx	r3
 8014136:	b1b8      	cbz	r0, 8014168 <rcl_clock_remove_jump_callback+0xb8>
 8014138:	6068      	str	r0, [r5, #4]
 801413a:	2000      	movs	r0, #0
 801413c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014140:	200b      	movs	r0, #11
 8014142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014146:	4648      	mov	r0, r9
 8014148:	69ab      	ldr	r3, [r5, #24]
 801414a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801414c:	4798      	blx	r3
 801414e:	606e      	str	r6, [r5, #4]
 8014150:	4630      	mov	r0, r6
 8014152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014156:	4553      	cmp	r3, sl
 8014158:	d1c8      	bne.n	80140ec <rcl_clock_remove_jump_callback+0x3c>
 801415a:	3e01      	subs	r6, #1
 801415c:	60ae      	str	r6, [r5, #8]
 801415e:	2e00      	cmp	r6, #0
 8014160:	d1e2      	bne.n	8014128 <rcl_clock_remove_jump_callback+0x78>
 8014162:	e7f0      	b.n	8014146 <rcl_clock_remove_jump_callback+0x96>
 8014164:	200b      	movs	r0, #11
 8014166:	4770      	bx	lr
 8014168:	200a      	movs	r0, #10
 801416a:	e7ea      	b.n	8014142 <rcl_clock_remove_jump_callback+0x92>

0801416c <_rcl_timer_time_jump>:
 801416c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014170:	4605      	mov	r5, r0
 8014172:	b084      	sub	sp, #16
 8014174:	4614      	mov	r4, r2
 8014176:	b131      	cbz	r1, 8014186 <_rcl_timer_time_jump+0x1a>
 8014178:	7803      	ldrb	r3, [r0, #0]
 801417a:	3b02      	subs	r3, #2
 801417c:	2b01      	cmp	r3, #1
 801417e:	d93f      	bls.n	8014200 <_rcl_timer_time_jump+0x94>
 8014180:	b004      	add	sp, #16
 8014182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014186:	6813      	ldr	r3, [r2, #0]
 8014188:	a902      	add	r1, sp, #8
 801418a:	6818      	ldr	r0, [r3, #0]
 801418c:	f7ff ff22 	bl	8013fd4 <rcl_clock_get_now>
 8014190:	2800      	cmp	r0, #0
 8014192:	d1f5      	bne.n	8014180 <_rcl_timer_time_jump+0x14>
 8014194:	6820      	ldr	r0, [r4, #0]
 8014196:	2105      	movs	r1, #5
 8014198:	3020      	adds	r0, #32
 801419a:	f001 fdf9 	bl	8015d90 <__atomic_load_8>
 801419e:	6823      	ldr	r3, [r4, #0]
 80141a0:	4681      	mov	r9, r0
 80141a2:	4688      	mov	r8, r1
 80141a4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80141a8:	2105      	movs	r1, #5
 80141aa:	f001 fdf1 	bl	8015d90 <__atomic_load_8>
 80141ae:	4607      	mov	r7, r0
 80141b0:	6820      	ldr	r0, [r4, #0]
 80141b2:	460e      	mov	r6, r1
 80141b4:	3018      	adds	r0, #24
 80141b6:	2105      	movs	r1, #5
 80141b8:	f001 fdea 	bl	8015d90 <__atomic_load_8>
 80141bc:	782b      	ldrb	r3, [r5, #0]
 80141be:	9a02      	ldr	r2, [sp, #8]
 80141c0:	3b02      	subs	r3, #2
 80141c2:	2b01      	cmp	r3, #1
 80141c4:	460d      	mov	r5, r1
 80141c6:	9b03      	ldr	r3, [sp, #12]
 80141c8:	4682      	mov	sl, r0
 80141ca:	d937      	bls.n	801423c <_rcl_timer_time_jump+0xd0>
 80141cc:	42ba      	cmp	r2, r7
 80141ce:	eb73 0106 	sbcs.w	r1, r3, r6
 80141d2:	da5f      	bge.n	8014294 <_rcl_timer_time_jump+0x128>
 80141d4:	454a      	cmp	r2, r9
 80141d6:	eb73 0108 	sbcs.w	r1, r3, r8
 80141da:	dad1      	bge.n	8014180 <_rcl_timer_time_jump+0x14>
 80141dc:	6820      	ldr	r0, [r4, #0]
 80141de:	eb1a 0202 	adds.w	r2, sl, r2
 80141e2:	eb43 0305 	adc.w	r3, r3, r5
 80141e6:	2505      	movs	r5, #5
 80141e8:	3028      	adds	r0, #40	@ 0x28
 80141ea:	9500      	str	r5, [sp, #0]
 80141ec:	f001 fe06 	bl	8015dfc <__atomic_store_8>
 80141f0:	6820      	ldr	r0, [r4, #0]
 80141f2:	9500      	str	r5, [sp, #0]
 80141f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80141f8:	3020      	adds	r0, #32
 80141fa:	f001 fdff 	bl	8015dfc <__atomic_store_8>
 80141fe:	e7bf      	b.n	8014180 <_rcl_timer_time_jump+0x14>
 8014200:	6813      	ldr	r3, [r2, #0]
 8014202:	a902      	add	r1, sp, #8
 8014204:	6818      	ldr	r0, [r3, #0]
 8014206:	f7ff fee5 	bl	8013fd4 <rcl_clock_get_now>
 801420a:	2800      	cmp	r0, #0
 801420c:	d1b8      	bne.n	8014180 <_rcl_timer_time_jump+0x14>
 801420e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014212:	4313      	orrs	r3, r2
 8014214:	d0b4      	beq.n	8014180 <_rcl_timer_time_jump+0x14>
 8014216:	6820      	ldr	r0, [r4, #0]
 8014218:	2105      	movs	r1, #5
 801421a:	3028      	adds	r0, #40	@ 0x28
 801421c:	f001 fdb8 	bl	8015d90 <__atomic_load_8>
 8014220:	9d02      	ldr	r5, [sp, #8]
 8014222:	9b03      	ldr	r3, [sp, #12]
 8014224:	4602      	mov	r2, r0
 8014226:	6820      	ldr	r0, [r4, #0]
 8014228:	1b52      	subs	r2, r2, r5
 801422a:	f04f 0405 	mov.w	r4, #5
 801422e:	9400      	str	r4, [sp, #0]
 8014230:	eb61 0303 	sbc.w	r3, r1, r3
 8014234:	3030      	adds	r0, #48	@ 0x30
 8014236:	f001 fde1 	bl	8015dfc <__atomic_store_8>
 801423a:	e7a1      	b.n	8014180 <_rcl_timer_time_jump+0x14>
 801423c:	4313      	orrs	r3, r2
 801423e:	d09f      	beq.n	8014180 <_rcl_timer_time_jump+0x14>
 8014240:	6820      	ldr	r0, [r4, #0]
 8014242:	f04f 0805 	mov.w	r8, #5
 8014246:	2300      	movs	r3, #0
 8014248:	f8cd 8000 	str.w	r8, [sp]
 801424c:	3030      	adds	r0, #48	@ 0x30
 801424e:	2200      	movs	r2, #0
 8014250:	f001 fe0a 	bl	8015e68 <__atomic_exchange_8>
 8014254:	ea51 0300 	orrs.w	r3, r1, r0
 8014258:	4606      	mov	r6, r0
 801425a:	460f      	mov	r7, r1
 801425c:	d090      	beq.n	8014180 <_rcl_timer_time_jump+0x14>
 801425e:	9a02      	ldr	r2, [sp, #8]
 8014260:	9b03      	ldr	r3, [sp, #12]
 8014262:	f8cd 8000 	str.w	r8, [sp]
 8014266:	1a12      	subs	r2, r2, r0
 8014268:	6820      	ldr	r0, [r4, #0]
 801426a:	eb63 0301 	sbc.w	r3, r3, r1
 801426e:	eb12 020a 	adds.w	r2, r2, sl
 8014272:	eb43 0305 	adc.w	r3, r3, r5
 8014276:	3028      	adds	r0, #40	@ 0x28
 8014278:	f001 fdc0 	bl	8015dfc <__atomic_store_8>
 801427c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014280:	f8cd 8000 	str.w	r8, [sp]
 8014284:	6820      	ldr	r0, [r4, #0]
 8014286:	1b92      	subs	r2, r2, r6
 8014288:	eb63 0307 	sbc.w	r3, r3, r7
 801428c:	3020      	adds	r0, #32
 801428e:	f001 fdb5 	bl	8015dfc <__atomic_store_8>
 8014292:	e775      	b.n	8014180 <_rcl_timer_time_jump+0x14>
 8014294:	6820      	ldr	r0, [r4, #0]
 8014296:	3008      	adds	r0, #8
 8014298:	f004 f876 	bl	8018388 <rcl_trigger_guard_condition>
 801429c:	e770      	b.n	8014180 <_rcl_timer_time_jump+0x14>
 801429e:	bf00      	nop

080142a0 <rcl_get_zero_initialized_timer>:
 80142a0:	4b01      	ldr	r3, [pc, #4]	@ (80142a8 <rcl_get_zero_initialized_timer+0x8>)
 80142a2:	6818      	ldr	r0, [r3, #0]
 80142a4:	4770      	bx	lr
 80142a6:	bf00      	nop
 80142a8:	0801b2a0 	.word	0x0801b2a0
 80142ac:	00000000 	.word	0x00000000

080142b0 <rcl_timer_init>:
 80142b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142b4:	b0aa      	sub	sp, #168	@ 0xa8
 80142b6:	4604      	mov	r4, r0
 80142b8:	a835      	add	r0, sp, #212	@ 0xd4
 80142ba:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 80142be:	460d      	mov	r5, r1
 80142c0:	4692      	mov	sl, r2
 80142c2:	f7f9 f81f 	bl	800d304 <rcutils_allocator_is_valid>
 80142c6:	2800      	cmp	r0, #0
 80142c8:	d064      	beq.n	8014394 <rcl_timer_init+0xe4>
 80142ca:	2c00      	cmp	r4, #0
 80142cc:	d062      	beq.n	8014394 <rcl_timer_init+0xe4>
 80142ce:	2d00      	cmp	r5, #0
 80142d0:	d060      	beq.n	8014394 <rcl_timer_init+0xe4>
 80142d2:	2f00      	cmp	r7, #0
 80142d4:	db5e      	blt.n	8014394 <rcl_timer_init+0xe4>
 80142d6:	6823      	ldr	r3, [r4, #0]
 80142d8:	b123      	cbz	r3, 80142e4 <rcl_timer_init+0x34>
 80142da:	2664      	movs	r6, #100	@ 0x64
 80142dc:	4630      	mov	r0, r6
 80142de:	b02a      	add	sp, #168	@ 0xa8
 80142e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142e4:	a908      	add	r1, sp, #32
 80142e6:	4628      	mov	r0, r5
 80142e8:	f7ff fe74 	bl	8013fd4 <rcl_clock_get_now>
 80142ec:	4606      	mov	r6, r0
 80142ee:	2800      	cmp	r0, #0
 80142f0:	d1f4      	bne.n	80142dc <rcl_timer_init+0x2c>
 80142f2:	ae06      	add	r6, sp, #24
 80142f4:	4630      	mov	r0, r6
 80142f6:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 80142fa:	f003 ff4d 	bl	8018198 <rcl_get_zero_initialized_guard_condition>
 80142fe:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014302:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8014306:	ae0b      	add	r6, sp, #44	@ 0x2c
 8014308:	e889 0003 	stmia.w	r9, {r0, r1}
 801430c:	4630      	mov	r0, r6
 801430e:	f004 f81f 	bl	8018350 <rcl_guard_condition_get_default_options>
 8014312:	ab0d      	add	r3, sp, #52	@ 0x34
 8014314:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014318:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801431c:	4651      	mov	r1, sl
 801431e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014322:	4648      	mov	r0, r9
 8014324:	f003 ff42 	bl	80181ac <rcl_guard_condition_init>
 8014328:	4606      	mov	r6, r0
 801432a:	2800      	cmp	r0, #0
 801432c:	d1d6      	bne.n	80142dc <rcl_timer_init+0x2c>
 801432e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014330:	781b      	ldrb	r3, [r3, #0]
 8014332:	2b01      	cmp	r3, #1
 8014334:	d033      	beq.n	801439e <rcl_timer_init+0xee>
 8014336:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8014338:	911a      	str	r1, [sp, #104]	@ 0x68
 801433a:	4642      	mov	r2, r8
 801433c:	463b      	mov	r3, r7
 801433e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8014342:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014346:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80143f8 <rcl_timer_init+0x148>
 801434a:	eb12 0008 	adds.w	r0, r2, r8
 801434e:	eb47 0103 	adc.w	r1, r7, r3
 8014352:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8014356:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801435a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801435e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8014362:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014366:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801436a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801436e:	f8de 3000 	ldr.w	r3, [lr]
 8014372:	f8cc 3000 	str.w	r3, [ip]
 8014376:	f04f 0a00 	mov.w	sl, #0
 801437a:	4619      	mov	r1, r3
 801437c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8014380:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8014382:	2050      	movs	r0, #80	@ 0x50
 8014384:	4798      	blx	r3
 8014386:	6020      	str	r0, [r4, #0]
 8014388:	b358      	cbz	r0, 80143e2 <rcl_timer_init+0x132>
 801438a:	2250      	movs	r2, #80	@ 0x50
 801438c:	a916      	add	r1, sp, #88	@ 0x58
 801438e:	f004 ff2c 	bl	80191ea <memcpy>
 8014392:	e7a3      	b.n	80142dc <rcl_timer_init+0x2c>
 8014394:	260b      	movs	r6, #11
 8014396:	4630      	mov	r0, r6
 8014398:	b02a      	add	sp, #168	@ 0xa8
 801439a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801439e:	2001      	movs	r0, #1
 80143a0:	2100      	movs	r1, #0
 80143a2:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80143a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80143aa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80143ae:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80143b2:	4a13      	ldr	r2, [pc, #76]	@ (8014400 <rcl_timer_init+0x150>)
 80143b4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80143b8:	9405      	str	r4, [sp, #20]
 80143ba:	9204      	str	r2, [sp, #16]
 80143bc:	ab12      	add	r3, sp, #72	@ 0x48
 80143be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80143c0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80143c4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80143c8:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80143cc:	4628      	mov	r0, r5
 80143ce:	f7ff fe0d 	bl	8013fec <rcl_clock_add_jump_callback>
 80143d2:	4682      	mov	sl, r0
 80143d4:	2800      	cmp	r0, #0
 80143d6:	d0ae      	beq.n	8014336 <rcl_timer_init+0x86>
 80143d8:	4648      	mov	r0, r9
 80143da:	f003 ff93 	bl	8018304 <rcl_guard_condition_fini>
 80143de:	4656      	mov	r6, sl
 80143e0:	e77c      	b.n	80142dc <rcl_timer_init+0x2c>
 80143e2:	4648      	mov	r0, r9
 80143e4:	f003 ff8e 	bl	8018304 <rcl_guard_condition_fini>
 80143e8:	4905      	ldr	r1, [pc, #20]	@ (8014400 <rcl_timer_init+0x150>)
 80143ea:	4622      	mov	r2, r4
 80143ec:	4628      	mov	r0, r5
 80143ee:	f7ff fe5f 	bl	80140b0 <rcl_clock_remove_jump_callback>
 80143f2:	260a      	movs	r6, #10
 80143f4:	e772      	b.n	80142dc <rcl_timer_init+0x2c>
 80143f6:	bf00      	nop
	...
 8014400:	0801416d 	.word	0x0801416d

08014404 <rcl_timer_call>:
 8014404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014408:	b087      	sub	sp, #28
 801440a:	2800      	cmp	r0, #0
 801440c:	d06d      	beq.n	80144ea <rcl_timer_call+0xe6>
 801440e:	6803      	ldr	r3, [r0, #0]
 8014410:	4604      	mov	r4, r0
 8014412:	2b00      	cmp	r3, #0
 8014414:	d063      	beq.n	80144de <rcl_timer_call+0xda>
 8014416:	f3bf 8f5b 	dmb	ish
 801441a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801441e:	f3bf 8f5b 	dmb	ish
 8014422:	2b00      	cmp	r3, #0
 8014424:	d150      	bne.n	80144c8 <rcl_timer_call+0xc4>
 8014426:	6803      	ldr	r3, [r0, #0]
 8014428:	a904      	add	r1, sp, #16
 801442a:	6818      	ldr	r0, [r3, #0]
 801442c:	f7ff fdd2 	bl	8013fd4 <rcl_clock_get_now>
 8014430:	4605      	mov	r5, r0
 8014432:	2800      	cmp	r0, #0
 8014434:	d14a      	bne.n	80144cc <rcl_timer_call+0xc8>
 8014436:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801443a:	2b00      	cmp	r3, #0
 801443c:	db4a      	blt.n	80144d4 <rcl_timer_call+0xd0>
 801443e:	6820      	ldr	r0, [r4, #0]
 8014440:	f04f 0a05 	mov.w	sl, #5
 8014444:	f8cd a000 	str.w	sl, [sp]
 8014448:	3020      	adds	r0, #32
 801444a:	f001 fd0d 	bl	8015e68 <__atomic_exchange_8>
 801444e:	6823      	ldr	r3, [r4, #0]
 8014450:	f3bf 8f5b 	dmb	ish
 8014454:	4680      	mov	r8, r0
 8014456:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801445a:	f3bf 8f5b 	dmb	ish
 801445e:	6820      	ldr	r0, [r4, #0]
 8014460:	4689      	mov	r9, r1
 8014462:	3028      	adds	r0, #40	@ 0x28
 8014464:	4651      	mov	r1, sl
 8014466:	f001 fc93 	bl	8015d90 <__atomic_load_8>
 801446a:	4606      	mov	r6, r0
 801446c:	6820      	ldr	r0, [r4, #0]
 801446e:	460f      	mov	r7, r1
 8014470:	3018      	adds	r0, #24
 8014472:	4651      	mov	r1, sl
 8014474:	f001 fc8c 	bl	8015d90 <__atomic_load_8>
 8014478:	1836      	adds	r6, r6, r0
 801447a:	4602      	mov	r2, r0
 801447c:	4682      	mov	sl, r0
 801447e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8014482:	eb47 0701 	adc.w	r7, r7, r1
 8014486:	4286      	cmp	r6, r0
 8014488:	460b      	mov	r3, r1
 801448a:	eb77 010c 	sbcs.w	r1, r7, ip
 801448e:	da04      	bge.n	801449a <rcl_timer_call+0x96>
 8014490:	ea53 0102 	orrs.w	r1, r3, r2
 8014494:	d12e      	bne.n	80144f4 <rcl_timer_call+0xf0>
 8014496:	4606      	mov	r6, r0
 8014498:	4667      	mov	r7, ip
 801449a:	6820      	ldr	r0, [r4, #0]
 801449c:	2105      	movs	r1, #5
 801449e:	4632      	mov	r2, r6
 80144a0:	463b      	mov	r3, r7
 80144a2:	3028      	adds	r0, #40	@ 0x28
 80144a4:	9100      	str	r1, [sp, #0]
 80144a6:	f001 fca9 	bl	8015dfc <__atomic_store_8>
 80144aa:	f1bb 0f00 	cmp.w	fp, #0
 80144ae:	d00d      	beq.n	80144cc <rcl_timer_call+0xc8>
 80144b0:	9a04      	ldr	r2, [sp, #16]
 80144b2:	9b05      	ldr	r3, [sp, #20]
 80144b4:	ebb2 0208 	subs.w	r2, r2, r8
 80144b8:	4620      	mov	r0, r4
 80144ba:	eb63 0309 	sbc.w	r3, r3, r9
 80144be:	47d8      	blx	fp
 80144c0:	4628      	mov	r0, r5
 80144c2:	b007      	add	sp, #28
 80144c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144c8:	f240 3521 	movw	r5, #801	@ 0x321
 80144cc:	4628      	mov	r0, r5
 80144ce:	b007      	add	sp, #28
 80144d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144d4:	2501      	movs	r5, #1
 80144d6:	4628      	mov	r0, r5
 80144d8:	b007      	add	sp, #28
 80144da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144de:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80144e2:	4628      	mov	r0, r5
 80144e4:	b007      	add	sp, #28
 80144e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ea:	250b      	movs	r5, #11
 80144ec:	4628      	mov	r0, r5
 80144ee:	b007      	add	sp, #28
 80144f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144f4:	1b80      	subs	r0, r0, r6
 80144f6:	eb6c 0107 	sbc.w	r1, ip, r7
 80144fa:	3801      	subs	r0, #1
 80144fc:	f161 0100 	sbc.w	r1, r1, #0
 8014500:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014504:	f7ec fb60 	bl	8000bc8 <__aeabi_ldivmod>
 8014508:	9b02      	ldr	r3, [sp, #8]
 801450a:	3001      	adds	r0, #1
 801450c:	f141 0100 	adc.w	r1, r1, #0
 8014510:	fb00 f303 	mul.w	r3, r0, r3
 8014514:	fb01 330a 	mla	r3, r1, sl, r3
 8014518:	fba0 0a0a 	umull	r0, sl, r0, sl
 801451c:	1986      	adds	r6, r0, r6
 801451e:	4453      	add	r3, sl
 8014520:	eb43 0707 	adc.w	r7, r3, r7
 8014524:	e7b9      	b.n	801449a <rcl_timer_call+0x96>
 8014526:	bf00      	nop

08014528 <rcl_timer_is_ready>:
 8014528:	b570      	push	{r4, r5, r6, lr}
 801452a:	b082      	sub	sp, #8
 801452c:	b378      	cbz	r0, 801458e <rcl_timer_is_ready+0x66>
 801452e:	6803      	ldr	r3, [r0, #0]
 8014530:	4604      	mov	r4, r0
 8014532:	b383      	cbz	r3, 8014596 <rcl_timer_is_ready+0x6e>
 8014534:	460d      	mov	r5, r1
 8014536:	b351      	cbz	r1, 801458e <rcl_timer_is_ready+0x66>
 8014538:	f3bf 8f5b 	dmb	ish
 801453c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014540:	f3bf 8f5b 	dmb	ish
 8014544:	b953      	cbnz	r3, 801455c <rcl_timer_is_ready+0x34>
 8014546:	6803      	ldr	r3, [r0, #0]
 8014548:	4669      	mov	r1, sp
 801454a:	6818      	ldr	r0, [r3, #0]
 801454c:	f7ff fd42 	bl	8013fd4 <rcl_clock_get_now>
 8014550:	4606      	mov	r6, r0
 8014552:	b140      	cbz	r0, 8014566 <rcl_timer_is_ready+0x3e>
 8014554:	f240 3321 	movw	r3, #801	@ 0x321
 8014558:	4298      	cmp	r0, r3
 801455a:	d101      	bne.n	8014560 <rcl_timer_is_ready+0x38>
 801455c:	2600      	movs	r6, #0
 801455e:	702e      	strb	r6, [r5, #0]
 8014560:	4630      	mov	r0, r6
 8014562:	b002      	add	sp, #8
 8014564:	bd70      	pop	{r4, r5, r6, pc}
 8014566:	6820      	ldr	r0, [r4, #0]
 8014568:	2105      	movs	r1, #5
 801456a:	3028      	adds	r0, #40	@ 0x28
 801456c:	f001 fc10 	bl	8015d90 <__atomic_load_8>
 8014570:	9b00      	ldr	r3, [sp, #0]
 8014572:	1ac0      	subs	r0, r0, r3
 8014574:	9b01      	ldr	r3, [sp, #4]
 8014576:	eb61 0103 	sbc.w	r1, r1, r3
 801457a:	2801      	cmp	r0, #1
 801457c:	f171 0300 	sbcs.w	r3, r1, #0
 8014580:	bfb4      	ite	lt
 8014582:	2301      	movlt	r3, #1
 8014584:	2300      	movge	r3, #0
 8014586:	4630      	mov	r0, r6
 8014588:	702b      	strb	r3, [r5, #0]
 801458a:	b002      	add	sp, #8
 801458c:	bd70      	pop	{r4, r5, r6, pc}
 801458e:	260b      	movs	r6, #11
 8014590:	4630      	mov	r0, r6
 8014592:	b002      	add	sp, #8
 8014594:	bd70      	pop	{r4, r5, r6, pc}
 8014596:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801459a:	e7e1      	b.n	8014560 <rcl_timer_is_ready+0x38>

0801459c <rcl_timer_get_time_until_next_call>:
 801459c:	b570      	push	{r4, r5, r6, lr}
 801459e:	b082      	sub	sp, #8
 80145a0:	b330      	cbz	r0, 80145f0 <rcl_timer_get_time_until_next_call+0x54>
 80145a2:	6803      	ldr	r3, [r0, #0]
 80145a4:	4604      	mov	r4, r0
 80145a6:	b33b      	cbz	r3, 80145f8 <rcl_timer_get_time_until_next_call+0x5c>
 80145a8:	460d      	mov	r5, r1
 80145aa:	b309      	cbz	r1, 80145f0 <rcl_timer_get_time_until_next_call+0x54>
 80145ac:	f3bf 8f5b 	dmb	ish
 80145b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80145b4:	f3bf 8f5b 	dmb	ish
 80145b8:	b9ab      	cbnz	r3, 80145e6 <rcl_timer_get_time_until_next_call+0x4a>
 80145ba:	6803      	ldr	r3, [r0, #0]
 80145bc:	4669      	mov	r1, sp
 80145be:	6818      	ldr	r0, [r3, #0]
 80145c0:	f7ff fd08 	bl	8013fd4 <rcl_clock_get_now>
 80145c4:	4606      	mov	r6, r0
 80145c6:	b958      	cbnz	r0, 80145e0 <rcl_timer_get_time_until_next_call+0x44>
 80145c8:	6820      	ldr	r0, [r4, #0]
 80145ca:	2105      	movs	r1, #5
 80145cc:	3028      	adds	r0, #40	@ 0x28
 80145ce:	f001 fbdf 	bl	8015d90 <__atomic_load_8>
 80145d2:	9b00      	ldr	r3, [sp, #0]
 80145d4:	1ac0      	subs	r0, r0, r3
 80145d6:	9b01      	ldr	r3, [sp, #4]
 80145d8:	6028      	str	r0, [r5, #0]
 80145da:	eb61 0103 	sbc.w	r1, r1, r3
 80145de:	6069      	str	r1, [r5, #4]
 80145e0:	4630      	mov	r0, r6
 80145e2:	b002      	add	sp, #8
 80145e4:	bd70      	pop	{r4, r5, r6, pc}
 80145e6:	f240 3621 	movw	r6, #801	@ 0x321
 80145ea:	4630      	mov	r0, r6
 80145ec:	b002      	add	sp, #8
 80145ee:	bd70      	pop	{r4, r5, r6, pc}
 80145f0:	260b      	movs	r6, #11
 80145f2:	4630      	mov	r0, r6
 80145f4:	b002      	add	sp, #8
 80145f6:	bd70      	pop	{r4, r5, r6, pc}
 80145f8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80145fc:	e7f0      	b.n	80145e0 <rcl_timer_get_time_until_next_call+0x44>
 80145fe:	bf00      	nop

08014600 <rcl_timer_get_guard_condition>:
 8014600:	b130      	cbz	r0, 8014610 <rcl_timer_get_guard_condition+0x10>
 8014602:	6800      	ldr	r0, [r0, #0]
 8014604:	b120      	cbz	r0, 8014610 <rcl_timer_get_guard_condition+0x10>
 8014606:	68c3      	ldr	r3, [r0, #12]
 8014608:	b10b      	cbz	r3, 801460e <rcl_timer_get_guard_condition+0xe>
 801460a:	3008      	adds	r0, #8
 801460c:	4770      	bx	lr
 801460e:	4618      	mov	r0, r3
 8014610:	4770      	bx	lr
 8014612:	bf00      	nop

08014614 <rcl_validate_enclave_name_with_size>:
 8014614:	b378      	cbz	r0, 8014676 <rcl_validate_enclave_name_with_size+0x62>
 8014616:	b570      	push	{r4, r5, r6, lr}
 8014618:	4615      	mov	r5, r2
 801461a:	b0c2      	sub	sp, #264	@ 0x108
 801461c:	b302      	cbz	r2, 8014660 <rcl_validate_enclave_name_with_size+0x4c>
 801461e:	461e      	mov	r6, r3
 8014620:	466a      	mov	r2, sp
 8014622:	ab01      	add	r3, sp, #4
 8014624:	460c      	mov	r4, r1
 8014626:	f002 f815 	bl	8016654 <rmw_validate_namespace_with_size>
 801462a:	4684      	mov	ip, r0
 801462c:	b9e8      	cbnz	r0, 801466a <rcl_validate_enclave_name_with_size+0x56>
 801462e:	9b00      	ldr	r3, [sp, #0]
 8014630:	b923      	cbnz	r3, 801463c <rcl_validate_enclave_name_with_size+0x28>
 8014632:	2300      	movs	r3, #0
 8014634:	602b      	str	r3, [r5, #0]
 8014636:	4660      	mov	r0, ip
 8014638:	b042      	add	sp, #264	@ 0x108
 801463a:	bd70      	pop	{r4, r5, r6, pc}
 801463c:	2b07      	cmp	r3, #7
 801463e:	d007      	beq.n	8014650 <rcl_validate_enclave_name_with_size+0x3c>
 8014640:	1e5a      	subs	r2, r3, #1
 8014642:	2a05      	cmp	r2, #5
 8014644:	d833      	bhi.n	80146ae <rcl_validate_enclave_name_with_size+0x9a>
 8014646:	e8df f002 	tbb	[pc, r2]
 801464a:	2c2f      	.short	0x2c2f
 801464c:	1a232629 	.word	0x1a232629
 8014650:	2cff      	cmp	r4, #255	@ 0xff
 8014652:	d9ee      	bls.n	8014632 <rcl_validate_enclave_name_with_size+0x1e>
 8014654:	602b      	str	r3, [r5, #0]
 8014656:	2e00      	cmp	r6, #0
 8014658:	d0ed      	beq.n	8014636 <rcl_validate_enclave_name_with_size+0x22>
 801465a:	23fe      	movs	r3, #254	@ 0xfe
 801465c:	6033      	str	r3, [r6, #0]
 801465e:	e7ea      	b.n	8014636 <rcl_validate_enclave_name_with_size+0x22>
 8014660:	f04f 0c0b 	mov.w	ip, #11
 8014664:	4660      	mov	r0, ip
 8014666:	b042      	add	sp, #264	@ 0x108
 8014668:	bd70      	pop	{r4, r5, r6, pc}
 801466a:	f7fe fdaf 	bl	80131cc <rcl_convert_rmw_ret_to_rcl_ret>
 801466e:	4684      	mov	ip, r0
 8014670:	4660      	mov	r0, ip
 8014672:	b042      	add	sp, #264	@ 0x108
 8014674:	bd70      	pop	{r4, r5, r6, pc}
 8014676:	f04f 0c0b 	mov.w	ip, #11
 801467a:	4660      	mov	r0, ip
 801467c:	4770      	bx	lr
 801467e:	2306      	movs	r3, #6
 8014680:	602b      	str	r3, [r5, #0]
 8014682:	2e00      	cmp	r6, #0
 8014684:	d0d7      	beq.n	8014636 <rcl_validate_enclave_name_with_size+0x22>
 8014686:	9b01      	ldr	r3, [sp, #4]
 8014688:	6033      	str	r3, [r6, #0]
 801468a:	4660      	mov	r0, ip
 801468c:	b042      	add	sp, #264	@ 0x108
 801468e:	bd70      	pop	{r4, r5, r6, pc}
 8014690:	2305      	movs	r3, #5
 8014692:	602b      	str	r3, [r5, #0]
 8014694:	e7f5      	b.n	8014682 <rcl_validate_enclave_name_with_size+0x6e>
 8014696:	2304      	movs	r3, #4
 8014698:	602b      	str	r3, [r5, #0]
 801469a:	e7f2      	b.n	8014682 <rcl_validate_enclave_name_with_size+0x6e>
 801469c:	2303      	movs	r3, #3
 801469e:	602b      	str	r3, [r5, #0]
 80146a0:	e7ef      	b.n	8014682 <rcl_validate_enclave_name_with_size+0x6e>
 80146a2:	2302      	movs	r3, #2
 80146a4:	602b      	str	r3, [r5, #0]
 80146a6:	e7ec      	b.n	8014682 <rcl_validate_enclave_name_with_size+0x6e>
 80146a8:	2301      	movs	r3, #1
 80146aa:	602b      	str	r3, [r5, #0]
 80146ac:	e7e9      	b.n	8014682 <rcl_validate_enclave_name_with_size+0x6e>
 80146ae:	4a04      	ldr	r2, [pc, #16]	@ (80146c0 <rcl_validate_enclave_name_with_size+0xac>)
 80146b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80146b4:	a802      	add	r0, sp, #8
 80146b6:	f001 fd25 	bl	8016104 <rcutils_snprintf>
 80146ba:	f04f 0c01 	mov.w	ip, #1
 80146be:	e7ba      	b.n	8014636 <rcl_validate_enclave_name_with_size+0x22>
 80146c0:	0801b2a4 	.word	0x0801b2a4

080146c4 <rcl_validate_enclave_name>:
 80146c4:	b168      	cbz	r0, 80146e2 <rcl_validate_enclave_name+0x1e>
 80146c6:	b570      	push	{r4, r5, r6, lr}
 80146c8:	460d      	mov	r5, r1
 80146ca:	4616      	mov	r6, r2
 80146cc:	4604      	mov	r4, r0
 80146ce:	f7eb fdb1 	bl	8000234 <strlen>
 80146d2:	4633      	mov	r3, r6
 80146d4:	4601      	mov	r1, r0
 80146d6:	462a      	mov	r2, r5
 80146d8:	4620      	mov	r0, r4
 80146da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146de:	f7ff bf99 	b.w	8014614 <rcl_validate_enclave_name_with_size>
 80146e2:	200b      	movs	r0, #11
 80146e4:	4770      	bx	lr
 80146e6:	bf00      	nop

080146e8 <rcl_get_zero_initialized_wait_set>:
 80146e8:	b510      	push	{r4, lr}
 80146ea:	4c08      	ldr	r4, [pc, #32]	@ (801470c <rcl_get_zero_initialized_wait_set+0x24>)
 80146ec:	4686      	mov	lr, r0
 80146ee:	4684      	mov	ip, r0
 80146f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014702:	6823      	ldr	r3, [r4, #0]
 8014704:	f8cc 3000 	str.w	r3, [ip]
 8014708:	4670      	mov	r0, lr
 801470a:	bd10      	pop	{r4, pc}
 801470c:	0801b304 	.word	0x0801b304

08014710 <rcl_wait_set_is_valid>:
 8014710:	b118      	cbz	r0, 801471a <rcl_wait_set_is_valid+0xa>
 8014712:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014714:	3800      	subs	r0, #0
 8014716:	bf18      	it	ne
 8014718:	2001      	movne	r0, #1
 801471a:	4770      	bx	lr

0801471c <rcl_wait_set_fini>:
 801471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014720:	b082      	sub	sp, #8
 8014722:	2800      	cmp	r0, #0
 8014724:	f000 8095 	beq.w	8014852 <rcl_wait_set_fini+0x136>
 8014728:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801472a:	4604      	mov	r4, r0
 801472c:	2e00      	cmp	r6, #0
 801472e:	f000 808c 	beq.w	801484a <rcl_wait_set_fini+0x12e>
 8014732:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8014734:	f002 fd48 	bl	80171c8 <rmw_destroy_wait_set>
 8014738:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801473a:	1e06      	subs	r6, r0, #0
 801473c:	bf18      	it	ne
 801473e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8014742:	2d00      	cmp	r5, #0
 8014744:	f000 8081 	beq.w	801484a <rcl_wait_set_fini+0x12e>
 8014748:	6820      	ldr	r0, [r4, #0]
 801474a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801474e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014750:	2700      	movs	r7, #0
 8014752:	6067      	str	r7, [r4, #4]
 8014754:	602f      	str	r7, [r5, #0]
 8014756:	b120      	cbz	r0, 8014762 <rcl_wait_set_fini+0x46>
 8014758:	9101      	str	r1, [sp, #4]
 801475a:	47c0      	blx	r8
 801475c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801475e:	9901      	ldr	r1, [sp, #4]
 8014760:	6027      	str	r7, [r4, #0]
 8014762:	68a8      	ldr	r0, [r5, #8]
 8014764:	b120      	cbz	r0, 8014770 <rcl_wait_set_fini+0x54>
 8014766:	47c0      	blx	r8
 8014768:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801476a:	2300      	movs	r3, #0
 801476c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8014770:	68a0      	ldr	r0, [r4, #8]
 8014772:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014774:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014776:	f04f 0800 	mov.w	r8, #0
 801477a:	f8c4 800c 	str.w	r8, [r4, #12]
 801477e:	f8c5 800c 	str.w	r8, [r5, #12]
 8014782:	b128      	cbz	r0, 8014790 <rcl_wait_set_fini+0x74>
 8014784:	47b8      	blx	r7
 8014786:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014788:	f8c4 8008 	str.w	r8, [r4, #8]
 801478c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801478e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014790:	6968      	ldr	r0, [r5, #20]
 8014792:	f04f 0800 	mov.w	r8, #0
 8014796:	f8c5 8010 	str.w	r8, [r5, #16]
 801479a:	b128      	cbz	r0, 80147a8 <rcl_wait_set_fini+0x8c>
 801479c:	47b8      	blx	r7
 801479e:	f8c5 8014 	str.w	r8, [r5, #20]
 80147a2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80147a4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80147a6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80147a8:	6920      	ldr	r0, [r4, #16]
 80147aa:	f04f 0800 	mov.w	r8, #0
 80147ae:	f8c4 8014 	str.w	r8, [r4, #20]
 80147b2:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80147b6:	b128      	cbz	r0, 80147c4 <rcl_wait_set_fini+0xa8>
 80147b8:	47b8      	blx	r7
 80147ba:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80147bc:	f8c4 8010 	str.w	r8, [r4, #16]
 80147c0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80147c2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80147c4:	69a0      	ldr	r0, [r4, #24]
 80147c6:	f04f 0800 	mov.w	r8, #0
 80147ca:	f8c4 801c 	str.w	r8, [r4, #28]
 80147ce:	f8c5 8018 	str.w	r8, [r5, #24]
 80147d2:	b128      	cbz	r0, 80147e0 <rcl_wait_set_fini+0xc4>
 80147d4:	9101      	str	r1, [sp, #4]
 80147d6:	47b8      	blx	r7
 80147d8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80147da:	9901      	ldr	r1, [sp, #4]
 80147dc:	f8c4 8018 	str.w	r8, [r4, #24]
 80147e0:	6a28      	ldr	r0, [r5, #32]
 80147e2:	b120      	cbz	r0, 80147ee <rcl_wait_set_fini+0xd2>
 80147e4:	47b8      	blx	r7
 80147e6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80147e8:	2300      	movs	r3, #0
 80147ea:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80147ee:	6a20      	ldr	r0, [r4, #32]
 80147f0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80147f4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80147f6:	2700      	movs	r7, #0
 80147f8:	6267      	str	r7, [r4, #36]	@ 0x24
 80147fa:	626f      	str	r7, [r5, #36]	@ 0x24
 80147fc:	b120      	cbz	r0, 8014808 <rcl_wait_set_fini+0xec>
 80147fe:	9101      	str	r1, [sp, #4]
 8014800:	47c0      	blx	r8
 8014802:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014804:	9901      	ldr	r1, [sp, #4]
 8014806:	6227      	str	r7, [r4, #32]
 8014808:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801480a:	b120      	cbz	r0, 8014816 <rcl_wait_set_fini+0xfa>
 801480c:	47c0      	blx	r8
 801480e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014810:	2300      	movs	r3, #0
 8014812:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014816:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014818:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801481c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801481e:	2700      	movs	r7, #0
 8014820:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8014822:	632f      	str	r7, [r5, #48]	@ 0x30
 8014824:	b120      	cbz	r0, 8014830 <rcl_wait_set_fini+0x114>
 8014826:	9101      	str	r1, [sp, #4]
 8014828:	47c0      	blx	r8
 801482a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801482c:	9901      	ldr	r1, [sp, #4]
 801482e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8014830:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8014832:	b120      	cbz	r0, 801483e <rcl_wait_set_fini+0x122>
 8014834:	47c0      	blx	r8
 8014836:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014838:	2300      	movs	r3, #0
 801483a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801483e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8014840:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014842:	4628      	mov	r0, r5
 8014844:	4798      	blx	r3
 8014846:	2300      	movs	r3, #0
 8014848:	6323      	str	r3, [r4, #48]	@ 0x30
 801484a:	4630      	mov	r0, r6
 801484c:	b002      	add	sp, #8
 801484e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014852:	260b      	movs	r6, #11
 8014854:	4630      	mov	r0, r6
 8014856:	b002      	add	sp, #8
 8014858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801485c <rcl_wait_set_add_subscription>:
 801485c:	b318      	cbz	r0, 80148a6 <rcl_wait_set_add_subscription+0x4a>
 801485e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014860:	b570      	push	{r4, r5, r6, lr}
 8014862:	4604      	mov	r4, r0
 8014864:	b30b      	cbz	r3, 80148aa <rcl_wait_set_add_subscription+0x4e>
 8014866:	b319      	cbz	r1, 80148b0 <rcl_wait_set_add_subscription+0x54>
 8014868:	681d      	ldr	r5, [r3, #0]
 801486a:	6840      	ldr	r0, [r0, #4]
 801486c:	4285      	cmp	r5, r0
 801486e:	d217      	bcs.n	80148a0 <rcl_wait_set_add_subscription+0x44>
 8014870:	6820      	ldr	r0, [r4, #0]
 8014872:	1c6e      	adds	r6, r5, #1
 8014874:	601e      	str	r6, [r3, #0]
 8014876:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801487a:	b102      	cbz	r2, 801487e <rcl_wait_set_add_subscription+0x22>
 801487c:	6015      	str	r5, [r2, #0]
 801487e:	4608      	mov	r0, r1
 8014880:	f7ff fb08 	bl	8013e94 <rcl_subscription_get_rmw_handle>
 8014884:	b150      	cbz	r0, 801489c <rcl_wait_set_add_subscription+0x40>
 8014886:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014888:	6842      	ldr	r2, [r0, #4]
 801488a:	689b      	ldr	r3, [r3, #8]
 801488c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014890:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014892:	6853      	ldr	r3, [r2, #4]
 8014894:	3301      	adds	r3, #1
 8014896:	2000      	movs	r0, #0
 8014898:	6053      	str	r3, [r2, #4]
 801489a:	bd70      	pop	{r4, r5, r6, pc}
 801489c:	2001      	movs	r0, #1
 801489e:	bd70      	pop	{r4, r5, r6, pc}
 80148a0:	f240 3086 	movw	r0, #902	@ 0x386
 80148a4:	bd70      	pop	{r4, r5, r6, pc}
 80148a6:	200b      	movs	r0, #11
 80148a8:	4770      	bx	lr
 80148aa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80148ae:	bd70      	pop	{r4, r5, r6, pc}
 80148b0:	200b      	movs	r0, #11
 80148b2:	bd70      	pop	{r4, r5, r6, pc}

080148b4 <rcl_wait_set_clear>:
 80148b4:	2800      	cmp	r0, #0
 80148b6:	d073      	beq.n	80149a0 <rcl_wait_set_clear+0xec>
 80148b8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80148ba:	b510      	push	{r4, lr}
 80148bc:	4604      	mov	r4, r0
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d070      	beq.n	80149a4 <rcl_wait_set_clear+0xf0>
 80148c2:	6800      	ldr	r0, [r0, #0]
 80148c4:	b138      	cbz	r0, 80148d6 <rcl_wait_set_clear+0x22>
 80148c6:	6862      	ldr	r2, [r4, #4]
 80148c8:	2100      	movs	r1, #0
 80148ca:	0092      	lsls	r2, r2, #2
 80148cc:	f004 fbc4 	bl	8019058 <memset>
 80148d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80148d2:	2200      	movs	r2, #0
 80148d4:	601a      	str	r2, [r3, #0]
 80148d6:	68a0      	ldr	r0, [r4, #8]
 80148d8:	b138      	cbz	r0, 80148ea <rcl_wait_set_clear+0x36>
 80148da:	68e2      	ldr	r2, [r4, #12]
 80148dc:	2100      	movs	r1, #0
 80148de:	0092      	lsls	r2, r2, #2
 80148e0:	f004 fbba 	bl	8019058 <memset>
 80148e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80148e6:	2200      	movs	r2, #0
 80148e8:	60da      	str	r2, [r3, #12]
 80148ea:	69a0      	ldr	r0, [r4, #24]
 80148ec:	b138      	cbz	r0, 80148fe <rcl_wait_set_clear+0x4a>
 80148ee:	69e2      	ldr	r2, [r4, #28]
 80148f0:	2100      	movs	r1, #0
 80148f2:	0092      	lsls	r2, r2, #2
 80148f4:	f004 fbb0 	bl	8019058 <memset>
 80148f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80148fa:	2200      	movs	r2, #0
 80148fc:	619a      	str	r2, [r3, #24]
 80148fe:	6a20      	ldr	r0, [r4, #32]
 8014900:	b138      	cbz	r0, 8014912 <rcl_wait_set_clear+0x5e>
 8014902:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014904:	2100      	movs	r1, #0
 8014906:	0092      	lsls	r2, r2, #2
 8014908:	f004 fba6 	bl	8019058 <memset>
 801490c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801490e:	2200      	movs	r2, #0
 8014910:	625a      	str	r2, [r3, #36]	@ 0x24
 8014912:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014914:	b138      	cbz	r0, 8014926 <rcl_wait_set_clear+0x72>
 8014916:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014918:	2100      	movs	r1, #0
 801491a:	0092      	lsls	r2, r2, #2
 801491c:	f004 fb9c 	bl	8019058 <memset>
 8014920:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014922:	2200      	movs	r2, #0
 8014924:	631a      	str	r2, [r3, #48]	@ 0x30
 8014926:	6920      	ldr	r0, [r4, #16]
 8014928:	b138      	cbz	r0, 801493a <rcl_wait_set_clear+0x86>
 801492a:	6962      	ldr	r2, [r4, #20]
 801492c:	2100      	movs	r1, #0
 801492e:	0092      	lsls	r2, r2, #2
 8014930:	f004 fb92 	bl	8019058 <memset>
 8014934:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014936:	2200      	movs	r2, #0
 8014938:	641a      	str	r2, [r3, #64]	@ 0x40
 801493a:	6898      	ldr	r0, [r3, #8]
 801493c:	b138      	cbz	r0, 801494e <rcl_wait_set_clear+0x9a>
 801493e:	685a      	ldr	r2, [r3, #4]
 8014940:	2100      	movs	r1, #0
 8014942:	0092      	lsls	r2, r2, #2
 8014944:	f004 fb88 	bl	8019058 <memset>
 8014948:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801494a:	2200      	movs	r2, #0
 801494c:	605a      	str	r2, [r3, #4]
 801494e:	6958      	ldr	r0, [r3, #20]
 8014950:	b138      	cbz	r0, 8014962 <rcl_wait_set_clear+0xae>
 8014952:	691a      	ldr	r2, [r3, #16]
 8014954:	2100      	movs	r1, #0
 8014956:	0092      	lsls	r2, r2, #2
 8014958:	f004 fb7e 	bl	8019058 <memset>
 801495c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801495e:	2200      	movs	r2, #0
 8014960:	611a      	str	r2, [r3, #16]
 8014962:	6a18      	ldr	r0, [r3, #32]
 8014964:	b138      	cbz	r0, 8014976 <rcl_wait_set_clear+0xc2>
 8014966:	69da      	ldr	r2, [r3, #28]
 8014968:	2100      	movs	r1, #0
 801496a:	0092      	lsls	r2, r2, #2
 801496c:	f004 fb74 	bl	8019058 <memset>
 8014970:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014972:	2200      	movs	r2, #0
 8014974:	61da      	str	r2, [r3, #28]
 8014976:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8014978:	b138      	cbz	r0, 801498a <rcl_wait_set_clear+0xd6>
 801497a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801497c:	2100      	movs	r1, #0
 801497e:	0092      	lsls	r2, r2, #2
 8014980:	f004 fb6a 	bl	8019058 <memset>
 8014984:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014986:	2200      	movs	r2, #0
 8014988:	629a      	str	r2, [r3, #40]	@ 0x28
 801498a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801498c:	b138      	cbz	r0, 801499e <rcl_wait_set_clear+0xea>
 801498e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014990:	2100      	movs	r1, #0
 8014992:	0092      	lsls	r2, r2, #2
 8014994:	f004 fb60 	bl	8019058 <memset>
 8014998:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801499a:	2000      	movs	r0, #0
 801499c:	6358      	str	r0, [r3, #52]	@ 0x34
 801499e:	bd10      	pop	{r4, pc}
 80149a0:	200b      	movs	r0, #11
 80149a2:	4770      	bx	lr
 80149a4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80149a8:	bd10      	pop	{r4, pc}
 80149aa:	bf00      	nop

080149ac <rcl_wait_set_resize>:
 80149ac:	2800      	cmp	r0, #0
 80149ae:	f000 8185 	beq.w	8014cbc <rcl_wait_set_resize+0x310>
 80149b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149b6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80149b8:	b083      	sub	sp, #12
 80149ba:	4605      	mov	r5, r0
 80149bc:	2c00      	cmp	r4, #0
 80149be:	f000 817f 	beq.w	8014cc0 <rcl_wait_set_resize+0x314>
 80149c2:	f04f 0900 	mov.w	r9, #0
 80149c6:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80149ca:	461f      	mov	r7, r3
 80149cc:	4688      	mov	r8, r1
 80149ce:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80149d2:	4616      	mov	r6, r2
 80149d4:	f8c0 9004 	str.w	r9, [r0, #4]
 80149d8:	f8c4 9000 	str.w	r9, [r4]
 80149dc:	2900      	cmp	r1, #0
 80149de:	f000 80bd 	beq.w	8014b5c <rcl_wait_set_resize+0x1b0>
 80149e2:	008c      	lsls	r4, r1, #2
 80149e4:	6800      	ldr	r0, [r0, #0]
 80149e6:	9301      	str	r3, [sp, #4]
 80149e8:	4652      	mov	r2, sl
 80149ea:	4621      	mov	r1, r4
 80149ec:	4798      	blx	r3
 80149ee:	9b01      	ldr	r3, [sp, #4]
 80149f0:	6028      	str	r0, [r5, #0]
 80149f2:	2800      	cmp	r0, #0
 80149f4:	f000 80cb 	beq.w	8014b8e <rcl_wait_set_resize+0x1e2>
 80149f8:	4622      	mov	r2, r4
 80149fa:	4649      	mov	r1, r9
 80149fc:	9301      	str	r3, [sp, #4]
 80149fe:	f004 fb2b 	bl	8019058 <memset>
 8014a02:	f8c5 8004 	str.w	r8, [r5, #4]
 8014a06:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8014a0a:	9b01      	ldr	r3, [sp, #4]
 8014a0c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8014a10:	f8c8 9004 	str.w	r9, [r8, #4]
 8014a14:	4652      	mov	r2, sl
 8014a16:	4621      	mov	r1, r4
 8014a18:	4798      	blx	r3
 8014a1a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014a1c:	f8c8 0008 	str.w	r0, [r8, #8]
 8014a20:	689b      	ldr	r3, [r3, #8]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	f000 80ac 	beq.w	8014b80 <rcl_wait_set_resize+0x1d4>
 8014a28:	4622      	mov	r2, r4
 8014a2a:	4649      	mov	r1, r9
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f004 fb13 	bl	8019058 <memset>
 8014a32:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014a34:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014a38:	f04f 0800 	mov.w	r8, #0
 8014a3c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8014a40:	f8c5 800c 	str.w	r8, [r5, #12]
 8014a44:	f8c4 800c 	str.w	r8, [r4, #12]
 8014a48:	2e00      	cmp	r6, #0
 8014a4a:	f040 80a4 	bne.w	8014b96 <rcl_wait_set_resize+0x1ea>
 8014a4e:	68a8      	ldr	r0, [r5, #8]
 8014a50:	b128      	cbz	r0, 8014a5e <rcl_wait_set_resize+0xb2>
 8014a52:	4649      	mov	r1, r9
 8014a54:	4790      	blx	r2
 8014a56:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014a58:	60ae      	str	r6, [r5, #8]
 8014a5a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014a5e:	f04f 0800 	mov.w	r8, #0
 8014a62:	19f6      	adds	r6, r6, r7
 8014a64:	f8c4 8010 	str.w	r8, [r4, #16]
 8014a68:	f040 80ac 	bne.w	8014bc4 <rcl_wait_set_resize+0x218>
 8014a6c:	6960      	ldr	r0, [r4, #20]
 8014a6e:	b130      	cbz	r0, 8014a7e <rcl_wait_set_resize+0xd2>
 8014a70:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8014a72:	4649      	mov	r1, r9
 8014a74:	4798      	blx	r3
 8014a76:	6166      	str	r6, [r4, #20]
 8014a78:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014a7a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014a7e:	2600      	movs	r6, #0
 8014a80:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014a84:	616e      	str	r6, [r5, #20]
 8014a86:	6426      	str	r6, [r4, #64]	@ 0x40
 8014a88:	2f00      	cmp	r7, #0
 8014a8a:	f040 80ad 	bne.w	8014be8 <rcl_wait_set_resize+0x23c>
 8014a8e:	6928      	ldr	r0, [r5, #16]
 8014a90:	b138      	cbz	r0, 8014aa2 <rcl_wait_set_resize+0xf6>
 8014a92:	4649      	mov	r1, r9
 8014a94:	47d0      	blx	sl
 8014a96:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014a98:	612f      	str	r7, [r5, #16]
 8014a9a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014a9e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014aa2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014aa4:	2600      	movs	r6, #0
 8014aa6:	61ee      	str	r6, [r5, #28]
 8014aa8:	61a6      	str	r6, [r4, #24]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	f040 80af 	bne.w	8014c0e <rcl_wait_set_resize+0x262>
 8014ab0:	69a8      	ldr	r0, [r5, #24]
 8014ab2:	b120      	cbz	r0, 8014abe <rcl_wait_set_resize+0x112>
 8014ab4:	4649      	mov	r1, r9
 8014ab6:	47d0      	blx	sl
 8014ab8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014aba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014abc:	61ab      	str	r3, [r5, #24]
 8014abe:	6a20      	ldr	r0, [r4, #32]
 8014ac0:	b128      	cbz	r0, 8014ace <rcl_wait_set_resize+0x122>
 8014ac2:	4649      	mov	r1, r9
 8014ac4:	47d0      	blx	sl
 8014ac6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014ac8:	2300      	movs	r3, #0
 8014aca:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8014ace:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014ad0:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014ad2:	2600      	movs	r6, #0
 8014ad4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014ad8:	626e      	str	r6, [r5, #36]	@ 0x24
 8014ada:	6266      	str	r6, [r4, #36]	@ 0x24
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	f000 80b6 	beq.w	8014c4e <rcl_wait_set_resize+0x2a2>
 8014ae2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8014ae6:	6a28      	ldr	r0, [r5, #32]
 8014ae8:	463a      	mov	r2, r7
 8014aea:	4651      	mov	r1, sl
 8014aec:	47c8      	blx	r9
 8014aee:	6228      	str	r0, [r5, #32]
 8014af0:	2800      	cmp	r0, #0
 8014af2:	d04c      	beq.n	8014b8e <rcl_wait_set_resize+0x1e2>
 8014af4:	4652      	mov	r2, sl
 8014af6:	4631      	mov	r1, r6
 8014af8:	f004 faae 	bl	8019058 <memset>
 8014afc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014afe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014b00:	626b      	str	r3, [r5, #36]	@ 0x24
 8014b02:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014b04:	62a6      	str	r6, [r4, #40]	@ 0x28
 8014b06:	463a      	mov	r2, r7
 8014b08:	4651      	mov	r1, sl
 8014b0a:	47c8      	blx	r9
 8014b0c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014b0e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8014b10:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8014b12:	2c00      	cmp	r4, #0
 8014b14:	f000 80f0 	beq.w	8014cf8 <rcl_wait_set_resize+0x34c>
 8014b18:	4620      	mov	r0, r4
 8014b1a:	4652      	mov	r2, sl
 8014b1c:	4631      	mov	r1, r6
 8014b1e:	f004 fa9b 	bl	8019058 <memset>
 8014b22:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014b26:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014b28:	2600      	movs	r6, #0
 8014b2a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014b2e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8014b30:	6326      	str	r6, [r4, #48]	@ 0x30
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	f040 809d 	bne.w	8014c72 <rcl_wait_set_resize+0x2c6>
 8014b38:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014b3a:	b120      	cbz	r0, 8014b46 <rcl_wait_set_resize+0x19a>
 8014b3c:	4639      	mov	r1, r7
 8014b3e:	47c0      	blx	r8
 8014b40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014b42:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b44:	62ab      	str	r3, [r5, #40]	@ 0x28
 8014b46:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014b48:	b310      	cbz	r0, 8014b90 <rcl_wait_set_resize+0x1e4>
 8014b4a:	4639      	mov	r1, r7
 8014b4c:	47c0      	blx	r8
 8014b4e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014b50:	2000      	movs	r0, #0
 8014b52:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8014b56:	b003      	add	sp, #12
 8014b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b5c:	6800      	ldr	r0, [r0, #0]
 8014b5e:	b120      	cbz	r0, 8014b6a <rcl_wait_set_resize+0x1be>
 8014b60:	4651      	mov	r1, sl
 8014b62:	47d8      	blx	fp
 8014b64:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b66:	f8c5 8000 	str.w	r8, [r5]
 8014b6a:	68a0      	ldr	r0, [r4, #8]
 8014b6c:	2800      	cmp	r0, #0
 8014b6e:	f43f af61 	beq.w	8014a34 <rcl_wait_set_resize+0x88>
 8014b72:	4651      	mov	r1, sl
 8014b74:	47d8      	blx	fp
 8014b76:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b78:	2300      	movs	r3, #0
 8014b7a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8014b7e:	e759      	b.n	8014a34 <rcl_wait_set_resize+0x88>
 8014b80:	6828      	ldr	r0, [r5, #0]
 8014b82:	9301      	str	r3, [sp, #4]
 8014b84:	4651      	mov	r1, sl
 8014b86:	47d8      	blx	fp
 8014b88:	9b01      	ldr	r3, [sp, #4]
 8014b8a:	e9c5 3300 	strd	r3, r3, [r5]
 8014b8e:	200a      	movs	r0, #10
 8014b90:	b003      	add	sp, #12
 8014b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b96:	00b4      	lsls	r4, r6, #2
 8014b98:	68a8      	ldr	r0, [r5, #8]
 8014b9a:	464a      	mov	r2, r9
 8014b9c:	4621      	mov	r1, r4
 8014b9e:	4798      	blx	r3
 8014ba0:	60a8      	str	r0, [r5, #8]
 8014ba2:	2800      	cmp	r0, #0
 8014ba4:	d0f3      	beq.n	8014b8e <rcl_wait_set_resize+0x1e2>
 8014ba6:	4622      	mov	r2, r4
 8014ba8:	4641      	mov	r1, r8
 8014baa:	f004 fa55 	bl	8019058 <memset>
 8014bae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014bb0:	60ee      	str	r6, [r5, #12]
 8014bb2:	f04f 0800 	mov.w	r8, #0
 8014bb6:	19f6      	adds	r6, r6, r7
 8014bb8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014bbc:	f8c4 8010 	str.w	r8, [r4, #16]
 8014bc0:	f43f af54 	beq.w	8014a6c <rcl_wait_set_resize+0xc0>
 8014bc4:	00b6      	lsls	r6, r6, #2
 8014bc6:	464a      	mov	r2, r9
 8014bc8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8014bca:	6960      	ldr	r0, [r4, #20]
 8014bcc:	4631      	mov	r1, r6
 8014bce:	4798      	blx	r3
 8014bd0:	4681      	mov	r9, r0
 8014bd2:	6160      	str	r0, [r4, #20]
 8014bd4:	2800      	cmp	r0, #0
 8014bd6:	d076      	beq.n	8014cc6 <rcl_wait_set_resize+0x31a>
 8014bd8:	4632      	mov	r2, r6
 8014bda:	4641      	mov	r1, r8
 8014bdc:	f004 fa3c 	bl	8019058 <memset>
 8014be0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014be2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014be6:	e74a      	b.n	8014a7e <rcl_wait_set_resize+0xd2>
 8014be8:	00bc      	lsls	r4, r7, #2
 8014bea:	6928      	ldr	r0, [r5, #16]
 8014bec:	464a      	mov	r2, r9
 8014bee:	4621      	mov	r1, r4
 8014bf0:	47c0      	blx	r8
 8014bf2:	6128      	str	r0, [r5, #16]
 8014bf4:	2800      	cmp	r0, #0
 8014bf6:	d0ca      	beq.n	8014b8e <rcl_wait_set_resize+0x1e2>
 8014bf8:	4622      	mov	r2, r4
 8014bfa:	4631      	mov	r1, r6
 8014bfc:	f004 fa2c 	bl	8019058 <memset>
 8014c00:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c02:	616f      	str	r7, [r5, #20]
 8014c04:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014c08:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014c0c:	e749      	b.n	8014aa2 <rcl_wait_set_resize+0xf6>
 8014c0e:	009c      	lsls	r4, r3, #2
 8014c10:	69a8      	ldr	r0, [r5, #24]
 8014c12:	464a      	mov	r2, r9
 8014c14:	4621      	mov	r1, r4
 8014c16:	47c0      	blx	r8
 8014c18:	61a8      	str	r0, [r5, #24]
 8014c1a:	2800      	cmp	r0, #0
 8014c1c:	d0b7      	beq.n	8014b8e <rcl_wait_set_resize+0x1e2>
 8014c1e:	4622      	mov	r2, r4
 8014c20:	4631      	mov	r1, r6
 8014c22:	f004 fa19 	bl	8019058 <memset>
 8014c26:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8014c28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014c2a:	61eb      	str	r3, [r5, #28]
 8014c2c:	6a38      	ldr	r0, [r7, #32]
 8014c2e:	61fe      	str	r6, [r7, #28]
 8014c30:	464a      	mov	r2, r9
 8014c32:	4621      	mov	r1, r4
 8014c34:	47c0      	blx	r8
 8014c36:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014c38:	6238      	str	r0, [r7, #32]
 8014c3a:	6a1f      	ldr	r7, [r3, #32]
 8014c3c:	2f00      	cmp	r7, #0
 8014c3e:	d054      	beq.n	8014cea <rcl_wait_set_resize+0x33e>
 8014c40:	4622      	mov	r2, r4
 8014c42:	4631      	mov	r1, r6
 8014c44:	4638      	mov	r0, r7
 8014c46:	f004 fa07 	bl	8019058 <memset>
 8014c4a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c4c:	e73f      	b.n	8014ace <rcl_wait_set_resize+0x122>
 8014c4e:	6a28      	ldr	r0, [r5, #32]
 8014c50:	b120      	cbz	r0, 8014c5c <rcl_wait_set_resize+0x2b0>
 8014c52:	4639      	mov	r1, r7
 8014c54:	47c0      	blx	r8
 8014c56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014c58:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c5a:	622b      	str	r3, [r5, #32]
 8014c5c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014c5e:	2800      	cmp	r0, #0
 8014c60:	f43f af60 	beq.w	8014b24 <rcl_wait_set_resize+0x178>
 8014c64:	4639      	mov	r1, r7
 8014c66:	47c0      	blx	r8
 8014c68:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8014c70:	e758      	b.n	8014b24 <rcl_wait_set_resize+0x178>
 8014c72:	009c      	lsls	r4, r3, #2
 8014c74:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014c76:	463a      	mov	r2, r7
 8014c78:	4621      	mov	r1, r4
 8014c7a:	47c8      	blx	r9
 8014c7c:	62a8      	str	r0, [r5, #40]	@ 0x28
 8014c7e:	2800      	cmp	r0, #0
 8014c80:	d085      	beq.n	8014b8e <rcl_wait_set_resize+0x1e2>
 8014c82:	4622      	mov	r2, r4
 8014c84:	4631      	mov	r1, r6
 8014c86:	f004 f9e7 	bl	8019058 <memset>
 8014c8a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8014c8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c90:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8014c92:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8014c96:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8014c9a:	463a      	mov	r2, r7
 8014c9c:	4621      	mov	r1, r4
 8014c9e:	47c8      	blx	r9
 8014ca0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014ca2:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8014ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014ca8:	b36b      	cbz	r3, 8014d06 <rcl_wait_set_resize+0x35a>
 8014caa:	4622      	mov	r2, r4
 8014cac:	4631      	mov	r1, r6
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f004 f9d2 	bl	8019058 <memset>
 8014cb4:	4630      	mov	r0, r6
 8014cb6:	b003      	add	sp, #12
 8014cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cbc:	200b      	movs	r0, #11
 8014cbe:	4770      	bx	lr
 8014cc0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014cc4:	e764      	b.n	8014b90 <rcl_wait_set_resize+0x1e4>
 8014cc6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014cc8:	68a8      	ldr	r0, [r5, #8]
 8014cca:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014cce:	4798      	blx	r3
 8014cd0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014cd2:	6928      	ldr	r0, [r5, #16]
 8014cd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014cd6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014cd8:	f8c5 900c 	str.w	r9, [r5, #12]
 8014cdc:	f8c5 9008 	str.w	r9, [r5, #8]
 8014ce0:	4790      	blx	r2
 8014ce2:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8014ce6:	200a      	movs	r0, #10
 8014ce8:	e752      	b.n	8014b90 <rcl_wait_set_resize+0x1e4>
 8014cea:	69a8      	ldr	r0, [r5, #24]
 8014cec:	4649      	mov	r1, r9
 8014cee:	47d0      	blx	sl
 8014cf0:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8014cf4:	200a      	movs	r0, #10
 8014cf6:	e74b      	b.n	8014b90 <rcl_wait_set_resize+0x1e4>
 8014cf8:	6a28      	ldr	r0, [r5, #32]
 8014cfa:	4639      	mov	r1, r7
 8014cfc:	47c0      	blx	r8
 8014cfe:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8014d02:	200a      	movs	r0, #10
 8014d04:	e744      	b.n	8014b90 <rcl_wait_set_resize+0x1e4>
 8014d06:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014d08:	9301      	str	r3, [sp, #4]
 8014d0a:	4639      	mov	r1, r7
 8014d0c:	47c0      	blx	r8
 8014d0e:	9b01      	ldr	r3, [sp, #4]
 8014d10:	200a      	movs	r0, #10
 8014d12:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014d16:	e73b      	b.n	8014b90 <rcl_wait_set_resize+0x1e4>

08014d18 <rcl_wait_set_init>:
 8014d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d1c:	b084      	sub	sp, #16
 8014d1e:	4604      	mov	r4, r0
 8014d20:	a810      	add	r0, sp, #64	@ 0x40
 8014d22:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8014d26:	460f      	mov	r7, r1
 8014d28:	4690      	mov	r8, r2
 8014d2a:	4699      	mov	r9, r3
 8014d2c:	f7f8 faea 	bl	800d304 <rcutils_allocator_is_valid>
 8014d30:	2800      	cmp	r0, #0
 8014d32:	d06b      	beq.n	8014e0c <rcl_wait_set_init+0xf4>
 8014d34:	2c00      	cmp	r4, #0
 8014d36:	d069      	beq.n	8014e0c <rcl_wait_set_init+0xf4>
 8014d38:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014d3a:	b125      	cbz	r5, 8014d46 <rcl_wait_set_init+0x2e>
 8014d3c:	2564      	movs	r5, #100	@ 0x64
 8014d3e:	4628      	mov	r0, r5
 8014d40:	b004      	add	sp, #16
 8014d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d46:	f1ba 0f00 	cmp.w	sl, #0
 8014d4a:	d05f      	beq.n	8014e0c <rcl_wait_set_init+0xf4>
 8014d4c:	4650      	mov	r0, sl
 8014d4e:	f7fe fa5b 	bl	8013208 <rcl_context_is_valid>
 8014d52:	2800      	cmp	r0, #0
 8014d54:	d067      	beq.n	8014e26 <rcl_wait_set_init+0x10e>
 8014d56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014d58:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8014d5a:	205c      	movs	r0, #92	@ 0x5c
 8014d5c:	4798      	blx	r3
 8014d5e:	6320      	str	r0, [r4, #48]	@ 0x30
 8014d60:	2800      	cmp	r0, #0
 8014d62:	d062      	beq.n	8014e2a <rcl_wait_set_init+0x112>
 8014d64:	4629      	mov	r1, r5
 8014d66:	225c      	movs	r2, #92	@ 0x5c
 8014d68:	f004 f976 	bl	8019058 <memset>
 8014d6c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8014d70:	eb03 0e02 	add.w	lr, r3, r2
 8014d74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d76:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8014d78:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014d7c:	449e      	add	lr, r3
 8014d7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d82:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8014d86:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8014d8a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8014d8e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8014d92:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8014d96:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8014d9a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8014d9e:	f8da a000 	ldr.w	sl, [sl]
 8014da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014da4:	44c6      	add	lr, r8
 8014da6:	f8dc 3000 	ldr.w	r3, [ip]
 8014daa:	602b      	str	r3, [r5, #0]
 8014dac:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8014db0:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8014db4:	f002 f9fe 	bl	80171b4 <rmw_create_wait_set>
 8014db8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014dba:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8014dbc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014dbe:	b350      	cbz	r0, 8014e16 <rcl_wait_set_init+0xfe>
 8014dc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014dc2:	9302      	str	r3, [sp, #8]
 8014dc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014dc6:	9301      	str	r3, [sp, #4]
 8014dc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014dca:	9300      	str	r3, [sp, #0]
 8014dcc:	4642      	mov	r2, r8
 8014dce:	464b      	mov	r3, r9
 8014dd0:	4639      	mov	r1, r7
 8014dd2:	4620      	mov	r0, r4
 8014dd4:	f7ff fdea 	bl	80149ac <rcl_wait_set_resize>
 8014dd8:	4605      	mov	r5, r0
 8014dda:	2800      	cmp	r0, #0
 8014ddc:	d0af      	beq.n	8014d3e <rcl_wait_set_init+0x26>
 8014dde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014de0:	bb2b      	cbnz	r3, 8014e2e <rcl_wait_set_init+0x116>
 8014de2:	2600      	movs	r6, #0
 8014de4:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8014de8:	9600      	str	r6, [sp, #0]
 8014dea:	4633      	mov	r3, r6
 8014dec:	4632      	mov	r2, r6
 8014dee:	4631      	mov	r1, r6
 8014df0:	4620      	mov	r0, r4
 8014df2:	f7ff fddb 	bl	80149ac <rcl_wait_set_resize>
 8014df6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8014df8:	2800      	cmp	r0, #0
 8014dfa:	d0a0      	beq.n	8014d3e <rcl_wait_set_init+0x26>
 8014dfc:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8014dfe:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8014e00:	4798      	blx	r3
 8014e02:	4628      	mov	r0, r5
 8014e04:	6326      	str	r6, [r4, #48]	@ 0x30
 8014e06:	b004      	add	sp, #16
 8014e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e0c:	250b      	movs	r5, #11
 8014e0e:	4628      	mov	r0, r5
 8014e10:	b004      	add	sp, #16
 8014e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e16:	2501      	movs	r5, #1
 8014e18:	f002 f9d6 	bl	80171c8 <rmw_destroy_wait_set>
 8014e1c:	2800      	cmp	r0, #0
 8014e1e:	bf18      	it	ne
 8014e20:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8014e24:	e7dd      	b.n	8014de2 <rcl_wait_set_init+0xca>
 8014e26:	2565      	movs	r5, #101	@ 0x65
 8014e28:	e789      	b.n	8014d3e <rcl_wait_set_init+0x26>
 8014e2a:	250a      	movs	r5, #10
 8014e2c:	e787      	b.n	8014d3e <rcl_wait_set_init+0x26>
 8014e2e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014e30:	e7f2      	b.n	8014e18 <rcl_wait_set_init+0x100>
 8014e32:	bf00      	nop

08014e34 <rcl_wait_set_add_guard_condition>:
 8014e34:	b318      	cbz	r0, 8014e7e <rcl_wait_set_add_guard_condition+0x4a>
 8014e36:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014e38:	b570      	push	{r4, r5, r6, lr}
 8014e3a:	4604      	mov	r4, r0
 8014e3c:	b30b      	cbz	r3, 8014e82 <rcl_wait_set_add_guard_condition+0x4e>
 8014e3e:	b319      	cbz	r1, 8014e88 <rcl_wait_set_add_guard_condition+0x54>
 8014e40:	68dd      	ldr	r5, [r3, #12]
 8014e42:	68c0      	ldr	r0, [r0, #12]
 8014e44:	4285      	cmp	r5, r0
 8014e46:	d217      	bcs.n	8014e78 <rcl_wait_set_add_guard_condition+0x44>
 8014e48:	68a0      	ldr	r0, [r4, #8]
 8014e4a:	1c6e      	adds	r6, r5, #1
 8014e4c:	60de      	str	r6, [r3, #12]
 8014e4e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014e52:	b102      	cbz	r2, 8014e56 <rcl_wait_set_add_guard_condition+0x22>
 8014e54:	6015      	str	r5, [r2, #0]
 8014e56:	4608      	mov	r0, r1
 8014e58:	f003 faa6 	bl	80183a8 <rcl_guard_condition_get_rmw_handle>
 8014e5c:	b150      	cbz	r0, 8014e74 <rcl_wait_set_add_guard_condition+0x40>
 8014e5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014e60:	6842      	ldr	r2, [r0, #4]
 8014e62:	695b      	ldr	r3, [r3, #20]
 8014e64:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014e68:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014e6a:	6913      	ldr	r3, [r2, #16]
 8014e6c:	3301      	adds	r3, #1
 8014e6e:	2000      	movs	r0, #0
 8014e70:	6113      	str	r3, [r2, #16]
 8014e72:	bd70      	pop	{r4, r5, r6, pc}
 8014e74:	2001      	movs	r0, #1
 8014e76:	bd70      	pop	{r4, r5, r6, pc}
 8014e78:	f240 3086 	movw	r0, #902	@ 0x386
 8014e7c:	bd70      	pop	{r4, r5, r6, pc}
 8014e7e:	200b      	movs	r0, #11
 8014e80:	4770      	bx	lr
 8014e82:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014e86:	bd70      	pop	{r4, r5, r6, pc}
 8014e88:	200b      	movs	r0, #11
 8014e8a:	bd70      	pop	{r4, r5, r6, pc}

08014e8c <rcl_wait_set_add_timer>:
 8014e8c:	b328      	cbz	r0, 8014eda <rcl_wait_set_add_timer+0x4e>
 8014e8e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014e90:	b570      	push	{r4, r5, r6, lr}
 8014e92:	4604      	mov	r4, r0
 8014e94:	b31b      	cbz	r3, 8014ede <rcl_wait_set_add_timer+0x52>
 8014e96:	b329      	cbz	r1, 8014ee4 <rcl_wait_set_add_timer+0x58>
 8014e98:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8014e9a:	6965      	ldr	r5, [r4, #20]
 8014e9c:	42a8      	cmp	r0, r5
 8014e9e:	d219      	bcs.n	8014ed4 <rcl_wait_set_add_timer+0x48>
 8014ea0:	6925      	ldr	r5, [r4, #16]
 8014ea2:	1c46      	adds	r6, r0, #1
 8014ea4:	641e      	str	r6, [r3, #64]	@ 0x40
 8014ea6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8014eaa:	b102      	cbz	r2, 8014eae <rcl_wait_set_add_timer+0x22>
 8014eac:	6010      	str	r0, [r2, #0]
 8014eae:	4608      	mov	r0, r1
 8014eb0:	f7ff fba6 	bl	8014600 <rcl_timer_get_guard_condition>
 8014eb4:	b168      	cbz	r0, 8014ed2 <rcl_wait_set_add_timer+0x46>
 8014eb6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014eb8:	68e3      	ldr	r3, [r4, #12]
 8014eba:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8014ebc:	3b01      	subs	r3, #1
 8014ebe:	441d      	add	r5, r3
 8014ec0:	f003 fa72 	bl	80183a8 <rcl_guard_condition_get_rmw_handle>
 8014ec4:	b180      	cbz	r0, 8014ee8 <rcl_wait_set_add_timer+0x5c>
 8014ec6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ec8:	6842      	ldr	r2, [r0, #4]
 8014eca:	695b      	ldr	r3, [r3, #20]
 8014ecc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014ed0:	2000      	movs	r0, #0
 8014ed2:	bd70      	pop	{r4, r5, r6, pc}
 8014ed4:	f240 3086 	movw	r0, #902	@ 0x386
 8014ed8:	bd70      	pop	{r4, r5, r6, pc}
 8014eda:	200b      	movs	r0, #11
 8014edc:	4770      	bx	lr
 8014ede:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014ee2:	bd70      	pop	{r4, r5, r6, pc}
 8014ee4:	200b      	movs	r0, #11
 8014ee6:	bd70      	pop	{r4, r5, r6, pc}
 8014ee8:	2001      	movs	r0, #1
 8014eea:	bd70      	pop	{r4, r5, r6, pc}

08014eec <rcl_wait_set_add_client>:
 8014eec:	b318      	cbz	r0, 8014f36 <rcl_wait_set_add_client+0x4a>
 8014eee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014ef0:	b570      	push	{r4, r5, r6, lr}
 8014ef2:	4604      	mov	r4, r0
 8014ef4:	b30b      	cbz	r3, 8014f3a <rcl_wait_set_add_client+0x4e>
 8014ef6:	b319      	cbz	r1, 8014f40 <rcl_wait_set_add_client+0x54>
 8014ef8:	699d      	ldr	r5, [r3, #24]
 8014efa:	69c0      	ldr	r0, [r0, #28]
 8014efc:	4285      	cmp	r5, r0
 8014efe:	d217      	bcs.n	8014f30 <rcl_wait_set_add_client+0x44>
 8014f00:	69a0      	ldr	r0, [r4, #24]
 8014f02:	1c6e      	adds	r6, r5, #1
 8014f04:	619e      	str	r6, [r3, #24]
 8014f06:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014f0a:	b102      	cbz	r2, 8014f0e <rcl_wait_set_add_client+0x22>
 8014f0c:	6015      	str	r5, [r2, #0]
 8014f0e:	4608      	mov	r0, r1
 8014f10:	f7fe f8ce 	bl	80130b0 <rcl_client_get_rmw_handle>
 8014f14:	b150      	cbz	r0, 8014f2c <rcl_wait_set_add_client+0x40>
 8014f16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f18:	6842      	ldr	r2, [r0, #4]
 8014f1a:	6a1b      	ldr	r3, [r3, #32]
 8014f1c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f20:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014f22:	69d3      	ldr	r3, [r2, #28]
 8014f24:	3301      	adds	r3, #1
 8014f26:	2000      	movs	r0, #0
 8014f28:	61d3      	str	r3, [r2, #28]
 8014f2a:	bd70      	pop	{r4, r5, r6, pc}
 8014f2c:	2001      	movs	r0, #1
 8014f2e:	bd70      	pop	{r4, r5, r6, pc}
 8014f30:	f240 3086 	movw	r0, #902	@ 0x386
 8014f34:	bd70      	pop	{r4, r5, r6, pc}
 8014f36:	200b      	movs	r0, #11
 8014f38:	4770      	bx	lr
 8014f3a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014f3e:	bd70      	pop	{r4, r5, r6, pc}
 8014f40:	200b      	movs	r0, #11
 8014f42:	bd70      	pop	{r4, r5, r6, pc}

08014f44 <rcl_wait_set_add_service>:
 8014f44:	b318      	cbz	r0, 8014f8e <rcl_wait_set_add_service+0x4a>
 8014f46:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014f48:	b570      	push	{r4, r5, r6, lr}
 8014f4a:	4604      	mov	r4, r0
 8014f4c:	b30b      	cbz	r3, 8014f92 <rcl_wait_set_add_service+0x4e>
 8014f4e:	b319      	cbz	r1, 8014f98 <rcl_wait_set_add_service+0x54>
 8014f50:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8014f52:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8014f54:	4285      	cmp	r5, r0
 8014f56:	d217      	bcs.n	8014f88 <rcl_wait_set_add_service+0x44>
 8014f58:	6a20      	ldr	r0, [r4, #32]
 8014f5a:	1c6e      	adds	r6, r5, #1
 8014f5c:	625e      	str	r6, [r3, #36]	@ 0x24
 8014f5e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014f62:	b102      	cbz	r2, 8014f66 <rcl_wait_set_add_service+0x22>
 8014f64:	6015      	str	r5, [r2, #0]
 8014f66:	4608      	mov	r0, r1
 8014f68:	f7fe fed4 	bl	8013d14 <rcl_service_get_rmw_handle>
 8014f6c:	b150      	cbz	r0, 8014f84 <rcl_wait_set_add_service+0x40>
 8014f6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f70:	6842      	ldr	r2, [r0, #4]
 8014f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f74:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f78:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014f7a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8014f7c:	3301      	adds	r3, #1
 8014f7e:	2000      	movs	r0, #0
 8014f80:	6293      	str	r3, [r2, #40]	@ 0x28
 8014f82:	bd70      	pop	{r4, r5, r6, pc}
 8014f84:	2001      	movs	r0, #1
 8014f86:	bd70      	pop	{r4, r5, r6, pc}
 8014f88:	f240 3086 	movw	r0, #902	@ 0x386
 8014f8c:	bd70      	pop	{r4, r5, r6, pc}
 8014f8e:	200b      	movs	r0, #11
 8014f90:	4770      	bx	lr
 8014f92:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014f96:	bd70      	pop	{r4, r5, r6, pc}
 8014f98:	200b      	movs	r0, #11
 8014f9a:	bd70      	pop	{r4, r5, r6, pc}
 8014f9c:	0000      	movs	r0, r0
	...

08014fa0 <rcl_wait>:
 8014fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fa4:	ed2d 8b02 	vpush	{d8}
 8014fa8:	b08d      	sub	sp, #52	@ 0x34
 8014faa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014fae:	2800      	cmp	r0, #0
 8014fb0:	f000 8143 	beq.w	801523a <rcl_wait+0x29a>
 8014fb4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014fb6:	4605      	mov	r5, r0
 8014fb8:	2e00      	cmp	r6, #0
 8014fba:	f000 8112 	beq.w	80151e2 <rcl_wait+0x242>
 8014fbe:	6843      	ldr	r3, [r0, #4]
 8014fc0:	b983      	cbnz	r3, 8014fe4 <rcl_wait+0x44>
 8014fc2:	68eb      	ldr	r3, [r5, #12]
 8014fc4:	b973      	cbnz	r3, 8014fe4 <rcl_wait+0x44>
 8014fc6:	696b      	ldr	r3, [r5, #20]
 8014fc8:	b963      	cbnz	r3, 8014fe4 <rcl_wait+0x44>
 8014fca:	69eb      	ldr	r3, [r5, #28]
 8014fcc:	b953      	cbnz	r3, 8014fe4 <rcl_wait+0x44>
 8014fce:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8014fd0:	b943      	cbnz	r3, 8014fe4 <rcl_wait+0x44>
 8014fd2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8014fd4:	b933      	cbnz	r3, 8014fe4 <rcl_wait+0x44>
 8014fd6:	f240 3085 	movw	r0, #901	@ 0x385
 8014fda:	b00d      	add	sp, #52	@ 0x34
 8014fdc:	ecbd 8b02 	vpop	{d8}
 8014fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fe4:	9b04      	ldr	r3, [sp, #16]
 8014fe6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8014fe8:	2b01      	cmp	r3, #1
 8014fea:	9b05      	ldr	r3, [sp, #20]
 8014fec:	f173 0300 	sbcs.w	r3, r3, #0
 8014ff0:	f2c0 80f0 	blt.w	80151d4 <rcl_wait+0x234>
 8014ff4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8014ff8:	4643      	mov	r3, r8
 8014ffa:	2a00      	cmp	r2, #0
 8014ffc:	f000 8133 	beq.w	8015266 <rcl_wait+0x2c6>
 8015000:	2400      	movs	r4, #0
 8015002:	4613      	mov	r3, r2
 8015004:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8015278 <rcl_wait+0x2d8>
 8015008:	46a2      	mov	sl, r4
 801500a:	46a3      	mov	fp, r4
 801500c:	f240 3921 	movw	r9, #801	@ 0x321
 8015010:	4632      	mov	r2, r6
 8015012:	e014      	b.n	801503e <rcl_wait+0x9e>
 8015014:	2800      	cmp	r0, #0
 8015016:	d1e0      	bne.n	8014fda <rcl_wait+0x3a>
 8015018:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801501c:	4542      	cmp	r2, r8
 801501e:	eb73 0107 	sbcs.w	r1, r3, r7
 8015022:	da03      	bge.n	801502c <rcl_wait+0x8c>
 8015024:	4690      	mov	r8, r2
 8015026:	461f      	mov	r7, r3
 8015028:	f04f 0b01 	mov.w	fp, #1
 801502c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801502e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015030:	3401      	adds	r4, #1
 8015032:	f14a 0a00 	adc.w	sl, sl, #0
 8015036:	429c      	cmp	r4, r3
 8015038:	f17a 0100 	sbcs.w	r1, sl, #0
 801503c:	d228      	bcs.n	8015090 <rcl_wait+0xf0>
 801503e:	6928      	ldr	r0, [r5, #16]
 8015040:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8015044:	a908      	add	r1, sp, #32
 8015046:	00a6      	lsls	r6, r4, #2
 8015048:	2800      	cmp	r0, #0
 801504a:	d0f1      	beq.n	8015030 <rcl_wait+0x90>
 801504c:	68eb      	ldr	r3, [r5, #12]
 801504e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8015052:	4423      	add	r3, r4
 8015054:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8015058:	f1be 0f00 	cmp.w	lr, #0
 801505c:	d006      	beq.n	801506c <rcl_wait+0xcc>
 801505e:	6913      	ldr	r3, [r2, #16]
 8015060:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8015064:	3301      	adds	r3, #1
 8015066:	6113      	str	r3, [r2, #16]
 8015068:	692b      	ldr	r3, [r5, #16]
 801506a:	5998      	ldr	r0, [r3, r6]
 801506c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015070:	f7ff fa94 	bl	801459c <rcl_timer_get_time_until_next_call>
 8015074:	4548      	cmp	r0, r9
 8015076:	d1cd      	bne.n	8015014 <rcl_wait+0x74>
 8015078:	692b      	ldr	r3, [r5, #16]
 801507a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801507c:	2100      	movs	r1, #0
 801507e:	5199      	str	r1, [r3, r6]
 8015080:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015082:	3401      	adds	r4, #1
 8015084:	f14a 0a00 	adc.w	sl, sl, #0
 8015088:	429c      	cmp	r4, r3
 801508a:	f17a 0100 	sbcs.w	r1, sl, #0
 801508e:	d3d6      	bcc.n	801503e <rcl_wait+0x9e>
 8015090:	4616      	mov	r6, r2
 8015092:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015096:	4313      	orrs	r3, r2
 8015098:	46d9      	mov	r9, fp
 801509a:	f040 80a9 	bne.w	80151f0 <rcl_wait+0x250>
 801509e:	2300      	movs	r3, #0
 80150a0:	2200      	movs	r2, #0
 80150a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80150a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80150aa:	ab08      	add	r3, sp, #32
 80150ac:	9302      	str	r3, [sp, #8]
 80150ae:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80150b0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80150b4:	e9cd 3200 	strd	r3, r2, [sp]
 80150b8:	f106 0110 	add.w	r1, r6, #16
 80150bc:	f106 031c 	add.w	r3, r6, #28
 80150c0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80150c4:	1d30      	adds	r0, r6, #4
 80150c6:	f001 fefd 	bl	8016ec4 <rmw_wait>
 80150ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80150cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80150ce:	4680      	mov	r8, r0
 80150d0:	b1ca      	cbz	r2, 8015106 <rcl_wait+0x166>
 80150d2:	2400      	movs	r4, #0
 80150d4:	4627      	mov	r7, r4
 80150d6:	692a      	ldr	r2, [r5, #16]
 80150d8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80150dc:	f10d 011f 	add.w	r1, sp, #31
 80150e0:	00a6      	lsls	r6, r4, #2
 80150e2:	b160      	cbz	r0, 80150fe <rcl_wait+0x15e>
 80150e4:	f88d 701f 	strb.w	r7, [sp, #31]
 80150e8:	f7ff fa1e 	bl	8014528 <rcl_timer_is_ready>
 80150ec:	2800      	cmp	r0, #0
 80150ee:	f47f af74 	bne.w	8014fda <rcl_wait+0x3a>
 80150f2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80150f6:	b90b      	cbnz	r3, 80150fc <rcl_wait+0x15c>
 80150f8:	692a      	ldr	r2, [r5, #16]
 80150fa:	5193      	str	r3, [r2, r6]
 80150fc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80150fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015100:	3401      	adds	r4, #1
 8015102:	42a2      	cmp	r2, r4
 8015104:	d8e7      	bhi.n	80150d6 <rcl_wait+0x136>
 8015106:	f038 0002 	bics.w	r0, r8, #2
 801510a:	f040 8090 	bne.w	801522e <rcl_wait+0x28e>
 801510e:	686e      	ldr	r6, [r5, #4]
 8015110:	4602      	mov	r2, r0
 8015112:	b91e      	cbnz	r6, 801511c <rcl_wait+0x17c>
 8015114:	e00d      	b.n	8015132 <rcl_wait+0x192>
 8015116:	3201      	adds	r2, #1
 8015118:	42b2      	cmp	r2, r6
 801511a:	d00a      	beq.n	8015132 <rcl_wait+0x192>
 801511c:	6899      	ldr	r1, [r3, #8]
 801511e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015122:	2900      	cmp	r1, #0
 8015124:	d1f7      	bne.n	8015116 <rcl_wait+0x176>
 8015126:	682c      	ldr	r4, [r5, #0]
 8015128:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801512c:	3201      	adds	r2, #1
 801512e:	42b2      	cmp	r2, r6
 8015130:	d1f4      	bne.n	801511c <rcl_wait+0x17c>
 8015132:	68ee      	ldr	r6, [r5, #12]
 8015134:	2200      	movs	r2, #0
 8015136:	b91e      	cbnz	r6, 8015140 <rcl_wait+0x1a0>
 8015138:	e00d      	b.n	8015156 <rcl_wait+0x1b6>
 801513a:	3201      	adds	r2, #1
 801513c:	42b2      	cmp	r2, r6
 801513e:	d00a      	beq.n	8015156 <rcl_wait+0x1b6>
 8015140:	6959      	ldr	r1, [r3, #20]
 8015142:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015146:	2900      	cmp	r1, #0
 8015148:	d1f7      	bne.n	801513a <rcl_wait+0x19a>
 801514a:	68ac      	ldr	r4, [r5, #8]
 801514c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015150:	3201      	adds	r2, #1
 8015152:	42b2      	cmp	r2, r6
 8015154:	d1f4      	bne.n	8015140 <rcl_wait+0x1a0>
 8015156:	69ee      	ldr	r6, [r5, #28]
 8015158:	2200      	movs	r2, #0
 801515a:	b91e      	cbnz	r6, 8015164 <rcl_wait+0x1c4>
 801515c:	e00d      	b.n	801517a <rcl_wait+0x1da>
 801515e:	3201      	adds	r2, #1
 8015160:	42b2      	cmp	r2, r6
 8015162:	d00a      	beq.n	801517a <rcl_wait+0x1da>
 8015164:	6a19      	ldr	r1, [r3, #32]
 8015166:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801516a:	2900      	cmp	r1, #0
 801516c:	d1f7      	bne.n	801515e <rcl_wait+0x1be>
 801516e:	69ac      	ldr	r4, [r5, #24]
 8015170:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015174:	3201      	adds	r2, #1
 8015176:	42b2      	cmp	r2, r6
 8015178:	d1f4      	bne.n	8015164 <rcl_wait+0x1c4>
 801517a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801517c:	2200      	movs	r2, #0
 801517e:	b91e      	cbnz	r6, 8015188 <rcl_wait+0x1e8>
 8015180:	e00d      	b.n	801519e <rcl_wait+0x1fe>
 8015182:	3201      	adds	r2, #1
 8015184:	4296      	cmp	r6, r2
 8015186:	d00a      	beq.n	801519e <rcl_wait+0x1fe>
 8015188:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801518a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801518e:	2900      	cmp	r1, #0
 8015190:	d1f7      	bne.n	8015182 <rcl_wait+0x1e2>
 8015192:	6a2c      	ldr	r4, [r5, #32]
 8015194:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015198:	3201      	adds	r2, #1
 801519a:	4296      	cmp	r6, r2
 801519c:	d1f4      	bne.n	8015188 <rcl_wait+0x1e8>
 801519e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80151a0:	2200      	movs	r2, #0
 80151a2:	b91e      	cbnz	r6, 80151ac <rcl_wait+0x20c>
 80151a4:	e00d      	b.n	80151c2 <rcl_wait+0x222>
 80151a6:	3201      	adds	r2, #1
 80151a8:	42b2      	cmp	r2, r6
 80151aa:	d00a      	beq.n	80151c2 <rcl_wait+0x222>
 80151ac:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80151ae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80151b2:	2900      	cmp	r1, #0
 80151b4:	d1f7      	bne.n	80151a6 <rcl_wait+0x206>
 80151b6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80151b8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80151bc:	3201      	adds	r2, #1
 80151be:	42b2      	cmp	r2, r6
 80151c0:	d1f4      	bne.n	80151ac <rcl_wait+0x20c>
 80151c2:	f1b8 0f02 	cmp.w	r8, #2
 80151c6:	f47f af08 	bne.w	8014fda <rcl_wait+0x3a>
 80151ca:	464b      	mov	r3, r9
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	bf08      	it	eq
 80151d0:	2002      	moveq	r0, #2
 80151d2:	e702      	b.n	8014fda <rcl_wait+0x3a>
 80151d4:	2a00      	cmp	r2, #0
 80151d6:	d03a      	beq.n	801524e <rcl_wait+0x2ae>
 80151d8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80151dc:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80151e0:	e70e      	b.n	8015000 <rcl_wait+0x60>
 80151e2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80151e6:	b00d      	add	sp, #52	@ 0x34
 80151e8:	ecbd 8b02 	vpop	{d8}
 80151ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151f0:	9b04      	ldr	r3, [sp, #16]
 80151f2:	2b01      	cmp	r3, #1
 80151f4:	9b05      	ldr	r3, [sp, #20]
 80151f6:	f173 0300 	sbcs.w	r3, r3, #0
 80151fa:	db24      	blt.n	8015246 <rcl_wait+0x2a6>
 80151fc:	2f00      	cmp	r7, #0
 80151fe:	bfbc      	itt	lt
 8015200:	f04f 0800 	movlt.w	r8, #0
 8015204:	4647      	movlt	r7, r8
 8015206:	a31e      	add	r3, pc, #120	@ (adr r3, 8015280 <rcl_wait+0x2e0>)
 8015208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801520c:	4640      	mov	r0, r8
 801520e:	4639      	mov	r1, r7
 8015210:	f7eb fcda 	bl	8000bc8 <__aeabi_ldivmod>
 8015214:	a31a      	add	r3, pc, #104	@ (adr r3, 8015280 <rcl_wait+0x2e0>)
 8015216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801521a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801521e:	4640      	mov	r0, r8
 8015220:	4639      	mov	r1, r7
 8015222:	f7eb fcd1 	bl	8000bc8 <__aeabi_ldivmod>
 8015226:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801522a:	ab08      	add	r3, sp, #32
 801522c:	e73e      	b.n	80150ac <rcl_wait+0x10c>
 801522e:	2001      	movs	r0, #1
 8015230:	b00d      	add	sp, #52	@ 0x34
 8015232:	ecbd 8b02 	vpop	{d8}
 8015236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801523a:	200b      	movs	r0, #11
 801523c:	b00d      	add	sp, #52	@ 0x34
 801523e:	ecbd 8b02 	vpop	{d8}
 8015242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015246:	465b      	mov	r3, fp
 8015248:	2b00      	cmp	r3, #0
 801524a:	d1d7      	bne.n	80151fc <rcl_wait+0x25c>
 801524c:	e72e      	b.n	80150ac <rcl_wait+0x10c>
 801524e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015252:	430b      	orrs	r3, r1
 8015254:	bf08      	it	eq
 8015256:	4691      	moveq	r9, r2
 8015258:	f43f af21 	beq.w	801509e <rcl_wait+0xfe>
 801525c:	9b04      	ldr	r3, [sp, #16]
 801525e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015262:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015266:	2b01      	cmp	r3, #1
 8015268:	9b05      	ldr	r3, [sp, #20]
 801526a:	f173 0300 	sbcs.w	r3, r3, #0
 801526e:	f04f 0300 	mov.w	r3, #0
 8015272:	4699      	mov	r9, r3
 8015274:	dac2      	bge.n	80151fc <rcl_wait+0x25c>
 8015276:	e719      	b.n	80150ac <rcl_wait+0x10c>
 8015278:	ffffffff 	.word	0xffffffff
 801527c:	7fffffff 	.word	0x7fffffff
 8015280:	3b9aca00 	.word	0x3b9aca00
 8015284:	00000000 	.word	0x00000000

08015288 <rcl_action_take_goal_response>:
 8015288:	2800      	cmp	r0, #0
 801528a:	d039      	beq.n	8015300 <rcl_action_take_goal_response+0x78>
 801528c:	b570      	push	{r4, r5, r6, lr}
 801528e:	4604      	mov	r4, r0
 8015290:	6800      	ldr	r0, [r0, #0]
 8015292:	b380      	cbz	r0, 80152f6 <rcl_action_take_goal_response+0x6e>
 8015294:	460d      	mov	r5, r1
 8015296:	4616      	mov	r6, r2
 8015298:	f7fd ff8e 	bl	80131b8 <rcl_client_is_valid>
 801529c:	b330      	cbz	r0, 80152ec <rcl_action_take_goal_response+0x64>
 801529e:	6820      	ldr	r0, [r4, #0]
 80152a0:	3004      	adds	r0, #4
 80152a2:	f7fd ff89 	bl	80131b8 <rcl_client_is_valid>
 80152a6:	b308      	cbz	r0, 80152ec <rcl_action_take_goal_response+0x64>
 80152a8:	6820      	ldr	r0, [r4, #0]
 80152aa:	3008      	adds	r0, #8
 80152ac:	f7fd ff84 	bl	80131b8 <rcl_client_is_valid>
 80152b0:	b1e0      	cbz	r0, 80152ec <rcl_action_take_goal_response+0x64>
 80152b2:	6820      	ldr	r0, [r4, #0]
 80152b4:	300c      	adds	r0, #12
 80152b6:	f7fe fdf3 	bl	8013ea0 <rcl_subscription_is_valid>
 80152ba:	b1b8      	cbz	r0, 80152ec <rcl_action_take_goal_response+0x64>
 80152bc:	6820      	ldr	r0, [r4, #0]
 80152be:	3010      	adds	r0, #16
 80152c0:	f7fe fdee 	bl	8013ea0 <rcl_subscription_is_valid>
 80152c4:	b190      	cbz	r0, 80152ec <rcl_action_take_goal_response+0x64>
 80152c6:	b1cd      	cbz	r5, 80152fc <rcl_action_take_goal_response+0x74>
 80152c8:	b1c6      	cbz	r6, 80152fc <rcl_action_take_goal_response+0x74>
 80152ca:	6820      	ldr	r0, [r4, #0]
 80152cc:	4632      	mov	r2, r6
 80152ce:	4629      	mov	r1, r5
 80152d0:	f7fd ff2a 	bl	8013128 <rcl_take_response>
 80152d4:	b148      	cbz	r0, 80152ea <rcl_action_take_goal_response+0x62>
 80152d6:	280a      	cmp	r0, #10
 80152d8:	d007      	beq.n	80152ea <rcl_action_take_goal_response+0x62>
 80152da:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80152de:	f640 0337 	movw	r3, #2103	@ 0x837
 80152e2:	4290      	cmp	r0, r2
 80152e4:	bf0c      	ite	eq
 80152e6:	4618      	moveq	r0, r3
 80152e8:	2001      	movne	r0, #1
 80152ea:	bd70      	pop	{r4, r5, r6, pc}
 80152ec:	f7f8 f830 	bl	800d350 <rcutils_reset_error>
 80152f0:	f640 0036 	movw	r0, #2102	@ 0x836
 80152f4:	bd70      	pop	{r4, r5, r6, pc}
 80152f6:	f640 0036 	movw	r0, #2102	@ 0x836
 80152fa:	bd70      	pop	{r4, r5, r6, pc}
 80152fc:	200b      	movs	r0, #11
 80152fe:	bd70      	pop	{r4, r5, r6, pc}
 8015300:	f640 0036 	movw	r0, #2102	@ 0x836
 8015304:	4770      	bx	lr
 8015306:	bf00      	nop

08015308 <rcl_action_send_result_request>:
 8015308:	b390      	cbz	r0, 8015370 <rcl_action_send_result_request+0x68>
 801530a:	b570      	push	{r4, r5, r6, lr}
 801530c:	4604      	mov	r4, r0
 801530e:	6800      	ldr	r0, [r0, #0]
 8015310:	b348      	cbz	r0, 8015366 <rcl_action_send_result_request+0x5e>
 8015312:	460d      	mov	r5, r1
 8015314:	4616      	mov	r6, r2
 8015316:	f7fd ff4f 	bl	80131b8 <rcl_client_is_valid>
 801531a:	b1f8      	cbz	r0, 801535c <rcl_action_send_result_request+0x54>
 801531c:	6820      	ldr	r0, [r4, #0]
 801531e:	3004      	adds	r0, #4
 8015320:	f7fd ff4a 	bl	80131b8 <rcl_client_is_valid>
 8015324:	b1d0      	cbz	r0, 801535c <rcl_action_send_result_request+0x54>
 8015326:	6820      	ldr	r0, [r4, #0]
 8015328:	3008      	adds	r0, #8
 801532a:	f7fd ff45 	bl	80131b8 <rcl_client_is_valid>
 801532e:	b1a8      	cbz	r0, 801535c <rcl_action_send_result_request+0x54>
 8015330:	6820      	ldr	r0, [r4, #0]
 8015332:	300c      	adds	r0, #12
 8015334:	f7fe fdb4 	bl	8013ea0 <rcl_subscription_is_valid>
 8015338:	b180      	cbz	r0, 801535c <rcl_action_send_result_request+0x54>
 801533a:	6820      	ldr	r0, [r4, #0]
 801533c:	3010      	adds	r0, #16
 801533e:	f7fe fdaf 	bl	8013ea0 <rcl_subscription_is_valid>
 8015342:	b158      	cbz	r0, 801535c <rcl_action_send_result_request+0x54>
 8015344:	b195      	cbz	r5, 801536c <rcl_action_send_result_request+0x64>
 8015346:	b18e      	cbz	r6, 801536c <rcl_action_send_result_request+0x64>
 8015348:	6820      	ldr	r0, [r4, #0]
 801534a:	4632      	mov	r2, r6
 801534c:	4629      	mov	r1, r5
 801534e:	3008      	adds	r0, #8
 8015350:	f7fd feb4 	bl	80130bc <rcl_send_request>
 8015354:	3800      	subs	r0, #0
 8015356:	bf18      	it	ne
 8015358:	2001      	movne	r0, #1
 801535a:	bd70      	pop	{r4, r5, r6, pc}
 801535c:	f7f7 fff8 	bl	800d350 <rcutils_reset_error>
 8015360:	f640 0036 	movw	r0, #2102	@ 0x836
 8015364:	bd70      	pop	{r4, r5, r6, pc}
 8015366:	f640 0036 	movw	r0, #2102	@ 0x836
 801536a:	bd70      	pop	{r4, r5, r6, pc}
 801536c:	200b      	movs	r0, #11
 801536e:	bd70      	pop	{r4, r5, r6, pc}
 8015370:	f640 0036 	movw	r0, #2102	@ 0x836
 8015374:	4770      	bx	lr
 8015376:	bf00      	nop

08015378 <rcl_action_take_result_response>:
 8015378:	2800      	cmp	r0, #0
 801537a:	d03a      	beq.n	80153f2 <rcl_action_take_result_response+0x7a>
 801537c:	b570      	push	{r4, r5, r6, lr}
 801537e:	4604      	mov	r4, r0
 8015380:	6800      	ldr	r0, [r0, #0]
 8015382:	b388      	cbz	r0, 80153e8 <rcl_action_take_result_response+0x70>
 8015384:	460d      	mov	r5, r1
 8015386:	4616      	mov	r6, r2
 8015388:	f7fd ff16 	bl	80131b8 <rcl_client_is_valid>
 801538c:	b338      	cbz	r0, 80153de <rcl_action_take_result_response+0x66>
 801538e:	6820      	ldr	r0, [r4, #0]
 8015390:	3004      	adds	r0, #4
 8015392:	f7fd ff11 	bl	80131b8 <rcl_client_is_valid>
 8015396:	b310      	cbz	r0, 80153de <rcl_action_take_result_response+0x66>
 8015398:	6820      	ldr	r0, [r4, #0]
 801539a:	3008      	adds	r0, #8
 801539c:	f7fd ff0c 	bl	80131b8 <rcl_client_is_valid>
 80153a0:	b1e8      	cbz	r0, 80153de <rcl_action_take_result_response+0x66>
 80153a2:	6820      	ldr	r0, [r4, #0]
 80153a4:	300c      	adds	r0, #12
 80153a6:	f7fe fd7b 	bl	8013ea0 <rcl_subscription_is_valid>
 80153aa:	b1c0      	cbz	r0, 80153de <rcl_action_take_result_response+0x66>
 80153ac:	6820      	ldr	r0, [r4, #0]
 80153ae:	3010      	adds	r0, #16
 80153b0:	f7fe fd76 	bl	8013ea0 <rcl_subscription_is_valid>
 80153b4:	b198      	cbz	r0, 80153de <rcl_action_take_result_response+0x66>
 80153b6:	b1d5      	cbz	r5, 80153ee <rcl_action_take_result_response+0x76>
 80153b8:	b1ce      	cbz	r6, 80153ee <rcl_action_take_result_response+0x76>
 80153ba:	6820      	ldr	r0, [r4, #0]
 80153bc:	4632      	mov	r2, r6
 80153be:	4629      	mov	r1, r5
 80153c0:	3008      	adds	r0, #8
 80153c2:	f7fd feb1 	bl	8013128 <rcl_take_response>
 80153c6:	b148      	cbz	r0, 80153dc <rcl_action_take_result_response+0x64>
 80153c8:	280a      	cmp	r0, #10
 80153ca:	d007      	beq.n	80153dc <rcl_action_take_result_response+0x64>
 80153cc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80153d0:	f640 0337 	movw	r3, #2103	@ 0x837
 80153d4:	4290      	cmp	r0, r2
 80153d6:	bf0c      	ite	eq
 80153d8:	4618      	moveq	r0, r3
 80153da:	2001      	movne	r0, #1
 80153dc:	bd70      	pop	{r4, r5, r6, pc}
 80153de:	f7f7 ffb7 	bl	800d350 <rcutils_reset_error>
 80153e2:	f640 0036 	movw	r0, #2102	@ 0x836
 80153e6:	bd70      	pop	{r4, r5, r6, pc}
 80153e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80153ec:	bd70      	pop	{r4, r5, r6, pc}
 80153ee:	200b      	movs	r0, #11
 80153f0:	bd70      	pop	{r4, r5, r6, pc}
 80153f2:	f640 0036 	movw	r0, #2102	@ 0x836
 80153f6:	4770      	bx	lr

080153f8 <rcl_action_take_cancel_response>:
 80153f8:	2800      	cmp	r0, #0
 80153fa:	d03a      	beq.n	8015472 <rcl_action_take_cancel_response+0x7a>
 80153fc:	b570      	push	{r4, r5, r6, lr}
 80153fe:	4604      	mov	r4, r0
 8015400:	6800      	ldr	r0, [r0, #0]
 8015402:	b388      	cbz	r0, 8015468 <rcl_action_take_cancel_response+0x70>
 8015404:	460d      	mov	r5, r1
 8015406:	4616      	mov	r6, r2
 8015408:	f7fd fed6 	bl	80131b8 <rcl_client_is_valid>
 801540c:	b338      	cbz	r0, 801545e <rcl_action_take_cancel_response+0x66>
 801540e:	6820      	ldr	r0, [r4, #0]
 8015410:	3004      	adds	r0, #4
 8015412:	f7fd fed1 	bl	80131b8 <rcl_client_is_valid>
 8015416:	b310      	cbz	r0, 801545e <rcl_action_take_cancel_response+0x66>
 8015418:	6820      	ldr	r0, [r4, #0]
 801541a:	3008      	adds	r0, #8
 801541c:	f7fd fecc 	bl	80131b8 <rcl_client_is_valid>
 8015420:	b1e8      	cbz	r0, 801545e <rcl_action_take_cancel_response+0x66>
 8015422:	6820      	ldr	r0, [r4, #0]
 8015424:	300c      	adds	r0, #12
 8015426:	f7fe fd3b 	bl	8013ea0 <rcl_subscription_is_valid>
 801542a:	b1c0      	cbz	r0, 801545e <rcl_action_take_cancel_response+0x66>
 801542c:	6820      	ldr	r0, [r4, #0]
 801542e:	3010      	adds	r0, #16
 8015430:	f7fe fd36 	bl	8013ea0 <rcl_subscription_is_valid>
 8015434:	b198      	cbz	r0, 801545e <rcl_action_take_cancel_response+0x66>
 8015436:	b1d5      	cbz	r5, 801546e <rcl_action_take_cancel_response+0x76>
 8015438:	b1ce      	cbz	r6, 801546e <rcl_action_take_cancel_response+0x76>
 801543a:	6820      	ldr	r0, [r4, #0]
 801543c:	4632      	mov	r2, r6
 801543e:	4629      	mov	r1, r5
 8015440:	3004      	adds	r0, #4
 8015442:	f7fd fe71 	bl	8013128 <rcl_take_response>
 8015446:	b148      	cbz	r0, 801545c <rcl_action_take_cancel_response+0x64>
 8015448:	280a      	cmp	r0, #10
 801544a:	d007      	beq.n	801545c <rcl_action_take_cancel_response+0x64>
 801544c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015450:	f640 0337 	movw	r3, #2103	@ 0x837
 8015454:	4290      	cmp	r0, r2
 8015456:	bf0c      	ite	eq
 8015458:	4618      	moveq	r0, r3
 801545a:	2001      	movne	r0, #1
 801545c:	bd70      	pop	{r4, r5, r6, pc}
 801545e:	f7f7 ff77 	bl	800d350 <rcutils_reset_error>
 8015462:	f640 0036 	movw	r0, #2102	@ 0x836
 8015466:	bd70      	pop	{r4, r5, r6, pc}
 8015468:	f640 0036 	movw	r0, #2102	@ 0x836
 801546c:	bd70      	pop	{r4, r5, r6, pc}
 801546e:	200b      	movs	r0, #11
 8015470:	bd70      	pop	{r4, r5, r6, pc}
 8015472:	f640 0036 	movw	r0, #2102	@ 0x836
 8015476:	4770      	bx	lr

08015478 <rcl_action_take_feedback>:
 8015478:	2800      	cmp	r0, #0
 801547a:	d038      	beq.n	80154ee <rcl_action_take_feedback+0x76>
 801547c:	b530      	push	{r4, r5, lr}
 801547e:	4604      	mov	r4, r0
 8015480:	6800      	ldr	r0, [r0, #0]
 8015482:	b091      	sub	sp, #68	@ 0x44
 8015484:	b378      	cbz	r0, 80154e6 <rcl_action_take_feedback+0x6e>
 8015486:	460d      	mov	r5, r1
 8015488:	f7fd fe96 	bl	80131b8 <rcl_client_is_valid>
 801548c:	b328      	cbz	r0, 80154da <rcl_action_take_feedback+0x62>
 801548e:	6820      	ldr	r0, [r4, #0]
 8015490:	3004      	adds	r0, #4
 8015492:	f7fd fe91 	bl	80131b8 <rcl_client_is_valid>
 8015496:	b300      	cbz	r0, 80154da <rcl_action_take_feedback+0x62>
 8015498:	6820      	ldr	r0, [r4, #0]
 801549a:	3008      	adds	r0, #8
 801549c:	f7fd fe8c 	bl	80131b8 <rcl_client_is_valid>
 80154a0:	b1d8      	cbz	r0, 80154da <rcl_action_take_feedback+0x62>
 80154a2:	6820      	ldr	r0, [r4, #0]
 80154a4:	300c      	adds	r0, #12
 80154a6:	f7fe fcfb 	bl	8013ea0 <rcl_subscription_is_valid>
 80154aa:	b1b0      	cbz	r0, 80154da <rcl_action_take_feedback+0x62>
 80154ac:	6820      	ldr	r0, [r4, #0]
 80154ae:	3010      	adds	r0, #16
 80154b0:	f7fe fcf6 	bl	8013ea0 <rcl_subscription_is_valid>
 80154b4:	b188      	cbz	r0, 80154da <rcl_action_take_feedback+0x62>
 80154b6:	b1ed      	cbz	r5, 80154f4 <rcl_action_take_feedback+0x7c>
 80154b8:	6820      	ldr	r0, [r4, #0]
 80154ba:	2300      	movs	r3, #0
 80154bc:	466a      	mov	r2, sp
 80154be:	4629      	mov	r1, r5
 80154c0:	300c      	adds	r0, #12
 80154c2:	f7fe fc8f 	bl	8013de4 <rcl_take>
 80154c6:	b160      	cbz	r0, 80154e2 <rcl_action_take_feedback+0x6a>
 80154c8:	f240 1391 	movw	r3, #401	@ 0x191
 80154cc:	4298      	cmp	r0, r3
 80154ce:	d014      	beq.n	80154fa <rcl_action_take_feedback+0x82>
 80154d0:	280a      	cmp	r0, #10
 80154d2:	bf18      	it	ne
 80154d4:	2001      	movne	r0, #1
 80154d6:	b011      	add	sp, #68	@ 0x44
 80154d8:	bd30      	pop	{r4, r5, pc}
 80154da:	f7f7 ff39 	bl	800d350 <rcutils_reset_error>
 80154de:	f640 0036 	movw	r0, #2102	@ 0x836
 80154e2:	b011      	add	sp, #68	@ 0x44
 80154e4:	bd30      	pop	{r4, r5, pc}
 80154e6:	f640 0036 	movw	r0, #2102	@ 0x836
 80154ea:	b011      	add	sp, #68	@ 0x44
 80154ec:	bd30      	pop	{r4, r5, pc}
 80154ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80154f2:	4770      	bx	lr
 80154f4:	200b      	movs	r0, #11
 80154f6:	b011      	add	sp, #68	@ 0x44
 80154f8:	bd30      	pop	{r4, r5, pc}
 80154fa:	f640 0037 	movw	r0, #2103	@ 0x837
 80154fe:	e7f0      	b.n	80154e2 <rcl_action_take_feedback+0x6a>

08015500 <rcl_action_wait_set_add_action_client>:
 8015500:	2800      	cmp	r0, #0
 8015502:	d048      	beq.n	8015596 <rcl_action_wait_set_add_action_client+0x96>
 8015504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015506:	460c      	mov	r4, r1
 8015508:	2900      	cmp	r1, #0
 801550a:	d03c      	beq.n	8015586 <rcl_action_wait_set_add_action_client+0x86>
 801550c:	4605      	mov	r5, r0
 801550e:	6808      	ldr	r0, [r1, #0]
 8015510:	2800      	cmp	r0, #0
 8015512:	d038      	beq.n	8015586 <rcl_action_wait_set_add_action_client+0x86>
 8015514:	4617      	mov	r7, r2
 8015516:	461e      	mov	r6, r3
 8015518:	f7fd fe4e 	bl	80131b8 <rcl_client_is_valid>
 801551c:	b3b0      	cbz	r0, 801558c <rcl_action_wait_set_add_action_client+0x8c>
 801551e:	6820      	ldr	r0, [r4, #0]
 8015520:	3004      	adds	r0, #4
 8015522:	f7fd fe49 	bl	80131b8 <rcl_client_is_valid>
 8015526:	b388      	cbz	r0, 801558c <rcl_action_wait_set_add_action_client+0x8c>
 8015528:	6820      	ldr	r0, [r4, #0]
 801552a:	3008      	adds	r0, #8
 801552c:	f7fd fe44 	bl	80131b8 <rcl_client_is_valid>
 8015530:	b360      	cbz	r0, 801558c <rcl_action_wait_set_add_action_client+0x8c>
 8015532:	6820      	ldr	r0, [r4, #0]
 8015534:	300c      	adds	r0, #12
 8015536:	f7fe fcb3 	bl	8013ea0 <rcl_subscription_is_valid>
 801553a:	b338      	cbz	r0, 801558c <rcl_action_wait_set_add_action_client+0x8c>
 801553c:	6820      	ldr	r0, [r4, #0]
 801553e:	3010      	adds	r0, #16
 8015540:	f7fe fcae 	bl	8013ea0 <rcl_subscription_is_valid>
 8015544:	b310      	cbz	r0, 801558c <rcl_action_wait_set_add_action_client+0x8c>
 8015546:	6821      	ldr	r1, [r4, #0]
 8015548:	4628      	mov	r0, r5
 801554a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801554e:	f7ff fccd 	bl	8014eec <rcl_wait_set_add_client>
 8015552:	b9b8      	cbnz	r0, 8015584 <rcl_action_wait_set_add_action_client+0x84>
 8015554:	6821      	ldr	r1, [r4, #0]
 8015556:	4628      	mov	r0, r5
 8015558:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801555c:	3104      	adds	r1, #4
 801555e:	f7ff fcc5 	bl	8014eec <rcl_wait_set_add_client>
 8015562:	b978      	cbnz	r0, 8015584 <rcl_action_wait_set_add_action_client+0x84>
 8015564:	6821      	ldr	r1, [r4, #0]
 8015566:	4628      	mov	r0, r5
 8015568:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801556c:	3108      	adds	r1, #8
 801556e:	f7ff fcbd 	bl	8014eec <rcl_wait_set_add_client>
 8015572:	b938      	cbnz	r0, 8015584 <rcl_action_wait_set_add_action_client+0x84>
 8015574:	6821      	ldr	r1, [r4, #0]
 8015576:	4628      	mov	r0, r5
 8015578:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801557c:	310c      	adds	r1, #12
 801557e:	f7ff f96d 	bl	801485c <rcl_wait_set_add_subscription>
 8015582:	b158      	cbz	r0, 801559c <rcl_action_wait_set_add_action_client+0x9c>
 8015584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015586:	f640 0036 	movw	r0, #2102	@ 0x836
 801558a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801558c:	f7f7 fee0 	bl	800d350 <rcutils_reset_error>
 8015590:	f640 0036 	movw	r0, #2102	@ 0x836
 8015594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015596:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801559a:	4770      	bx	lr
 801559c:	6821      	ldr	r1, [r4, #0]
 801559e:	4628      	mov	r0, r5
 80155a0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80155a4:	3110      	adds	r1, #16
 80155a6:	f7ff f959 	bl	801485c <rcl_wait_set_add_subscription>
 80155aa:	2800      	cmp	r0, #0
 80155ac:	d1ea      	bne.n	8015584 <rcl_action_wait_set_add_action_client+0x84>
 80155ae:	b11f      	cbz	r7, 80155b8 <rcl_action_wait_set_add_action_client+0xb8>
 80155b0:	6823      	ldr	r3, [r4, #0]
 80155b2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80155b6:	603b      	str	r3, [r7, #0]
 80155b8:	2e00      	cmp	r6, #0
 80155ba:	d0e3      	beq.n	8015584 <rcl_action_wait_set_add_action_client+0x84>
 80155bc:	6823      	ldr	r3, [r4, #0]
 80155be:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80155c2:	6033      	str	r3, [r6, #0]
 80155c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155c6:	bf00      	nop

080155c8 <rcl_action_client_wait_set_get_entities_ready>:
 80155c8:	2800      	cmp	r0, #0
 80155ca:	f000 808d 	beq.w	80156e8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80155ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155d2:	460c      	mov	r4, r1
 80155d4:	2900      	cmp	r1, #0
 80155d6:	d077      	beq.n	80156c8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80155d8:	4605      	mov	r5, r0
 80155da:	6808      	ldr	r0, [r1, #0]
 80155dc:	2800      	cmp	r0, #0
 80155de:	d073      	beq.n	80156c8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80155e0:	4616      	mov	r6, r2
 80155e2:	461f      	mov	r7, r3
 80155e4:	f7fd fde8 	bl	80131b8 <rcl_client_is_valid>
 80155e8:	2800      	cmp	r0, #0
 80155ea:	d071      	beq.n	80156d0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80155ec:	6820      	ldr	r0, [r4, #0]
 80155ee:	3004      	adds	r0, #4
 80155f0:	f7fd fde2 	bl	80131b8 <rcl_client_is_valid>
 80155f4:	2800      	cmp	r0, #0
 80155f6:	d06b      	beq.n	80156d0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80155f8:	6820      	ldr	r0, [r4, #0]
 80155fa:	3008      	adds	r0, #8
 80155fc:	f7fd fddc 	bl	80131b8 <rcl_client_is_valid>
 8015600:	2800      	cmp	r0, #0
 8015602:	d065      	beq.n	80156d0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015604:	6820      	ldr	r0, [r4, #0]
 8015606:	300c      	adds	r0, #12
 8015608:	f7fe fc4a 	bl	8013ea0 <rcl_subscription_is_valid>
 801560c:	2800      	cmp	r0, #0
 801560e:	d05f      	beq.n	80156d0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015610:	6820      	ldr	r0, [r4, #0]
 8015612:	3010      	adds	r0, #16
 8015614:	f7fe fc44 	bl	8013ea0 <rcl_subscription_is_valid>
 8015618:	2800      	cmp	r0, #0
 801561a:	d059      	beq.n	80156d0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801561c:	2e00      	cmp	r6, #0
 801561e:	d060      	beq.n	80156e2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015620:	2f00      	cmp	r7, #0
 8015622:	d05e      	beq.n	80156e2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015624:	9b06      	ldr	r3, [sp, #24]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d05b      	beq.n	80156e2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801562a:	9b07      	ldr	r3, [sp, #28]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d058      	beq.n	80156e2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015630:	9b08      	ldr	r3, [sp, #32]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d055      	beq.n	80156e2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015636:	6823      	ldr	r3, [r4, #0]
 8015638:	686a      	ldr	r2, [r5, #4]
 801563a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801563e:	428a      	cmp	r2, r1
 8015640:	d94c      	bls.n	80156dc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015642:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8015646:	4282      	cmp	r2, r0
 8015648:	d948      	bls.n	80156dc <rcl_action_client_wait_set_get_entities_ready+0x114>
 801564a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801564e:	69ea      	ldr	r2, [r5, #28]
 8015650:	42a2      	cmp	r2, r4
 8015652:	d943      	bls.n	80156dc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015654:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8015658:	4562      	cmp	r2, ip
 801565a:	d93f      	bls.n	80156dc <rcl_action_client_wait_set_get_entities_ready+0x114>
 801565c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8015660:	4572      	cmp	r2, lr
 8015662:	d93b      	bls.n	80156dc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015664:	69aa      	ldr	r2, [r5, #24]
 8015666:	682d      	ldr	r5, [r5, #0]
 8015668:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801566c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8015670:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8015674:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8015678:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801567c:	f103 0c0c 	add.w	ip, r3, #12
 8015680:	eba5 050c 	sub.w	r5, r5, ip
 8015684:	fab5 f585 	clz	r5, r5
 8015688:	096d      	lsrs	r5, r5, #5
 801568a:	7035      	strb	r5, [r6, #0]
 801568c:	f103 0510 	add.w	r5, r3, #16
 8015690:	1b64      	subs	r4, r4, r5
 8015692:	fab4 f484 	clz	r4, r4
 8015696:	0964      	lsrs	r4, r4, #5
 8015698:	703c      	strb	r4, [r7, #0]
 801569a:	eba3 0008 	sub.w	r0, r3, r8
 801569e:	1d1c      	adds	r4, r3, #4
 80156a0:	3308      	adds	r3, #8
 80156a2:	1ad3      	subs	r3, r2, r3
 80156a4:	fab0 f080 	clz	r0, r0
 80156a8:	9a06      	ldr	r2, [sp, #24]
 80156aa:	0940      	lsrs	r0, r0, #5
 80156ac:	1b09      	subs	r1, r1, r4
 80156ae:	7010      	strb	r0, [r2, #0]
 80156b0:	fab1 f181 	clz	r1, r1
 80156b4:	9a07      	ldr	r2, [sp, #28]
 80156b6:	0949      	lsrs	r1, r1, #5
 80156b8:	7011      	strb	r1, [r2, #0]
 80156ba:	fab3 f383 	clz	r3, r3
 80156be:	9a08      	ldr	r2, [sp, #32]
 80156c0:	095b      	lsrs	r3, r3, #5
 80156c2:	2000      	movs	r0, #0
 80156c4:	7013      	strb	r3, [r2, #0]
 80156c6:	e001      	b.n	80156cc <rcl_action_client_wait_set_get_entities_ready+0x104>
 80156c8:	f640 0036 	movw	r0, #2102	@ 0x836
 80156cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156d0:	f7f7 fe3e 	bl	800d350 <rcutils_reset_error>
 80156d4:	f640 0036 	movw	r0, #2102	@ 0x836
 80156d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156dc:	2001      	movs	r0, #1
 80156de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156e2:	200b      	movs	r0, #11
 80156e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156e8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80156ec:	4770      	bx	lr
 80156ee:	bf00      	nop

080156f0 <rcl_action_take_goal_request>:
 80156f0:	2800      	cmp	r0, #0
 80156f2:	d039      	beq.n	8015768 <rcl_action_take_goal_request+0x78>
 80156f4:	b570      	push	{r4, r5, r6, lr}
 80156f6:	4604      	mov	r4, r0
 80156f8:	6800      	ldr	r0, [r0, #0]
 80156fa:	b380      	cbz	r0, 801575e <rcl_action_take_goal_request+0x6e>
 80156fc:	460d      	mov	r5, r1
 80156fe:	4616      	mov	r6, r2
 8015700:	f7fe fb66 	bl	8013dd0 <rcl_service_is_valid>
 8015704:	b330      	cbz	r0, 8015754 <rcl_action_take_goal_request+0x64>
 8015706:	6820      	ldr	r0, [r4, #0]
 8015708:	3004      	adds	r0, #4
 801570a:	f7fe fb61 	bl	8013dd0 <rcl_service_is_valid>
 801570e:	b308      	cbz	r0, 8015754 <rcl_action_take_goal_request+0x64>
 8015710:	6820      	ldr	r0, [r4, #0]
 8015712:	3008      	adds	r0, #8
 8015714:	f7fe fb5c 	bl	8013dd0 <rcl_service_is_valid>
 8015718:	b1e0      	cbz	r0, 8015754 <rcl_action_take_goal_request+0x64>
 801571a:	6820      	ldr	r0, [r4, #0]
 801571c:	300c      	adds	r0, #12
 801571e:	f7f6 fe33 	bl	800c388 <rcl_publisher_is_valid>
 8015722:	b1b8      	cbz	r0, 8015754 <rcl_action_take_goal_request+0x64>
 8015724:	6820      	ldr	r0, [r4, #0]
 8015726:	3010      	adds	r0, #16
 8015728:	f7f6 fe2e 	bl	800c388 <rcl_publisher_is_valid>
 801572c:	b190      	cbz	r0, 8015754 <rcl_action_take_goal_request+0x64>
 801572e:	b1cd      	cbz	r5, 8015764 <rcl_action_take_goal_request+0x74>
 8015730:	b1c6      	cbz	r6, 8015764 <rcl_action_take_goal_request+0x74>
 8015732:	6820      	ldr	r0, [r4, #0]
 8015734:	4632      	mov	r2, r6
 8015736:	4629      	mov	r1, r5
 8015738:	f7fe faf2 	bl	8013d20 <rcl_take_request>
 801573c:	b148      	cbz	r0, 8015752 <rcl_action_take_goal_request+0x62>
 801573e:	280a      	cmp	r0, #10
 8015740:	d007      	beq.n	8015752 <rcl_action_take_goal_request+0x62>
 8015742:	f240 2259 	movw	r2, #601	@ 0x259
 8015746:	f640 0399 	movw	r3, #2201	@ 0x899
 801574a:	4290      	cmp	r0, r2
 801574c:	bf0c      	ite	eq
 801574e:	4618      	moveq	r0, r3
 8015750:	2001      	movne	r0, #1
 8015752:	bd70      	pop	{r4, r5, r6, pc}
 8015754:	f7f7 fdfc 	bl	800d350 <rcutils_reset_error>
 8015758:	f640 0098 	movw	r0, #2200	@ 0x898
 801575c:	bd70      	pop	{r4, r5, r6, pc}
 801575e:	f640 0098 	movw	r0, #2200	@ 0x898
 8015762:	bd70      	pop	{r4, r5, r6, pc}
 8015764:	200b      	movs	r0, #11
 8015766:	bd70      	pop	{r4, r5, r6, pc}
 8015768:	f640 0098 	movw	r0, #2200	@ 0x898
 801576c:	4770      	bx	lr
 801576e:	bf00      	nop

08015770 <rcl_action_send_goal_response>:
 8015770:	b390      	cbz	r0, 80157d8 <rcl_action_send_goal_response+0x68>
 8015772:	b570      	push	{r4, r5, r6, lr}
 8015774:	4604      	mov	r4, r0
 8015776:	6800      	ldr	r0, [r0, #0]
 8015778:	b348      	cbz	r0, 80157ce <rcl_action_send_goal_response+0x5e>
 801577a:	460d      	mov	r5, r1
 801577c:	4616      	mov	r6, r2
 801577e:	f7fe fb27 	bl	8013dd0 <rcl_service_is_valid>
 8015782:	b1f8      	cbz	r0, 80157c4 <rcl_action_send_goal_response+0x54>
 8015784:	6820      	ldr	r0, [r4, #0]
 8015786:	3004      	adds	r0, #4
 8015788:	f7fe fb22 	bl	8013dd0 <rcl_service_is_valid>
 801578c:	b1d0      	cbz	r0, 80157c4 <rcl_action_send_goal_response+0x54>
 801578e:	6820      	ldr	r0, [r4, #0]
 8015790:	3008      	adds	r0, #8
 8015792:	f7fe fb1d 	bl	8013dd0 <rcl_service_is_valid>
 8015796:	b1a8      	cbz	r0, 80157c4 <rcl_action_send_goal_response+0x54>
 8015798:	6820      	ldr	r0, [r4, #0]
 801579a:	300c      	adds	r0, #12
 801579c:	f7f6 fdf4 	bl	800c388 <rcl_publisher_is_valid>
 80157a0:	b180      	cbz	r0, 80157c4 <rcl_action_send_goal_response+0x54>
 80157a2:	6820      	ldr	r0, [r4, #0]
 80157a4:	3010      	adds	r0, #16
 80157a6:	f7f6 fdef 	bl	800c388 <rcl_publisher_is_valid>
 80157aa:	b158      	cbz	r0, 80157c4 <rcl_action_send_goal_response+0x54>
 80157ac:	b195      	cbz	r5, 80157d4 <rcl_action_send_goal_response+0x64>
 80157ae:	b18e      	cbz	r6, 80157d4 <rcl_action_send_goal_response+0x64>
 80157b0:	6820      	ldr	r0, [r4, #0]
 80157b2:	4632      	mov	r2, r6
 80157b4:	4629      	mov	r1, r5
 80157b6:	f7fe faf3 	bl	8013da0 <rcl_send_response>
 80157ba:	b110      	cbz	r0, 80157c2 <rcl_action_send_goal_response+0x52>
 80157bc:	2802      	cmp	r0, #2
 80157be:	bf18      	it	ne
 80157c0:	2001      	movne	r0, #1
 80157c2:	bd70      	pop	{r4, r5, r6, pc}
 80157c4:	f7f7 fdc4 	bl	800d350 <rcutils_reset_error>
 80157c8:	f640 0098 	movw	r0, #2200	@ 0x898
 80157cc:	bd70      	pop	{r4, r5, r6, pc}
 80157ce:	f640 0098 	movw	r0, #2200	@ 0x898
 80157d2:	bd70      	pop	{r4, r5, r6, pc}
 80157d4:	200b      	movs	r0, #11
 80157d6:	bd70      	pop	{r4, r5, r6, pc}
 80157d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80157dc:	4770      	bx	lr
 80157de:	bf00      	nop

080157e0 <rcl_action_take_result_request>:
 80157e0:	2800      	cmp	r0, #0
 80157e2:	d03a      	beq.n	801585a <rcl_action_take_result_request+0x7a>
 80157e4:	b570      	push	{r4, r5, r6, lr}
 80157e6:	4604      	mov	r4, r0
 80157e8:	6800      	ldr	r0, [r0, #0]
 80157ea:	b388      	cbz	r0, 8015850 <rcl_action_take_result_request+0x70>
 80157ec:	460d      	mov	r5, r1
 80157ee:	4616      	mov	r6, r2
 80157f0:	f7fe faee 	bl	8013dd0 <rcl_service_is_valid>
 80157f4:	b338      	cbz	r0, 8015846 <rcl_action_take_result_request+0x66>
 80157f6:	6820      	ldr	r0, [r4, #0]
 80157f8:	3004      	adds	r0, #4
 80157fa:	f7fe fae9 	bl	8013dd0 <rcl_service_is_valid>
 80157fe:	b310      	cbz	r0, 8015846 <rcl_action_take_result_request+0x66>
 8015800:	6820      	ldr	r0, [r4, #0]
 8015802:	3008      	adds	r0, #8
 8015804:	f7fe fae4 	bl	8013dd0 <rcl_service_is_valid>
 8015808:	b1e8      	cbz	r0, 8015846 <rcl_action_take_result_request+0x66>
 801580a:	6820      	ldr	r0, [r4, #0]
 801580c:	300c      	adds	r0, #12
 801580e:	f7f6 fdbb 	bl	800c388 <rcl_publisher_is_valid>
 8015812:	b1c0      	cbz	r0, 8015846 <rcl_action_take_result_request+0x66>
 8015814:	6820      	ldr	r0, [r4, #0]
 8015816:	3010      	adds	r0, #16
 8015818:	f7f6 fdb6 	bl	800c388 <rcl_publisher_is_valid>
 801581c:	b198      	cbz	r0, 8015846 <rcl_action_take_result_request+0x66>
 801581e:	b1d5      	cbz	r5, 8015856 <rcl_action_take_result_request+0x76>
 8015820:	b1ce      	cbz	r6, 8015856 <rcl_action_take_result_request+0x76>
 8015822:	6820      	ldr	r0, [r4, #0]
 8015824:	4632      	mov	r2, r6
 8015826:	4629      	mov	r1, r5
 8015828:	3008      	adds	r0, #8
 801582a:	f7fe fa79 	bl	8013d20 <rcl_take_request>
 801582e:	b148      	cbz	r0, 8015844 <rcl_action_take_result_request+0x64>
 8015830:	280a      	cmp	r0, #10
 8015832:	d007      	beq.n	8015844 <rcl_action_take_result_request+0x64>
 8015834:	f240 2259 	movw	r2, #601	@ 0x259
 8015838:	f640 0399 	movw	r3, #2201	@ 0x899
 801583c:	4290      	cmp	r0, r2
 801583e:	bf0c      	ite	eq
 8015840:	4618      	moveq	r0, r3
 8015842:	2001      	movne	r0, #1
 8015844:	bd70      	pop	{r4, r5, r6, pc}
 8015846:	f7f7 fd83 	bl	800d350 <rcutils_reset_error>
 801584a:	f640 0098 	movw	r0, #2200	@ 0x898
 801584e:	bd70      	pop	{r4, r5, r6, pc}
 8015850:	f640 0098 	movw	r0, #2200	@ 0x898
 8015854:	bd70      	pop	{r4, r5, r6, pc}
 8015856:	200b      	movs	r0, #11
 8015858:	bd70      	pop	{r4, r5, r6, pc}
 801585a:	f640 0098 	movw	r0, #2200	@ 0x898
 801585e:	4770      	bx	lr

08015860 <rcl_action_take_cancel_request>:
 8015860:	2800      	cmp	r0, #0
 8015862:	d03a      	beq.n	80158da <rcl_action_take_cancel_request+0x7a>
 8015864:	b570      	push	{r4, r5, r6, lr}
 8015866:	4604      	mov	r4, r0
 8015868:	6800      	ldr	r0, [r0, #0]
 801586a:	b388      	cbz	r0, 80158d0 <rcl_action_take_cancel_request+0x70>
 801586c:	460d      	mov	r5, r1
 801586e:	4616      	mov	r6, r2
 8015870:	f7fe faae 	bl	8013dd0 <rcl_service_is_valid>
 8015874:	b338      	cbz	r0, 80158c6 <rcl_action_take_cancel_request+0x66>
 8015876:	6820      	ldr	r0, [r4, #0]
 8015878:	3004      	adds	r0, #4
 801587a:	f7fe faa9 	bl	8013dd0 <rcl_service_is_valid>
 801587e:	b310      	cbz	r0, 80158c6 <rcl_action_take_cancel_request+0x66>
 8015880:	6820      	ldr	r0, [r4, #0]
 8015882:	3008      	adds	r0, #8
 8015884:	f7fe faa4 	bl	8013dd0 <rcl_service_is_valid>
 8015888:	b1e8      	cbz	r0, 80158c6 <rcl_action_take_cancel_request+0x66>
 801588a:	6820      	ldr	r0, [r4, #0]
 801588c:	300c      	adds	r0, #12
 801588e:	f7f6 fd7b 	bl	800c388 <rcl_publisher_is_valid>
 8015892:	b1c0      	cbz	r0, 80158c6 <rcl_action_take_cancel_request+0x66>
 8015894:	6820      	ldr	r0, [r4, #0]
 8015896:	3010      	adds	r0, #16
 8015898:	f7f6 fd76 	bl	800c388 <rcl_publisher_is_valid>
 801589c:	b198      	cbz	r0, 80158c6 <rcl_action_take_cancel_request+0x66>
 801589e:	b1d5      	cbz	r5, 80158d6 <rcl_action_take_cancel_request+0x76>
 80158a0:	b1ce      	cbz	r6, 80158d6 <rcl_action_take_cancel_request+0x76>
 80158a2:	6820      	ldr	r0, [r4, #0]
 80158a4:	4632      	mov	r2, r6
 80158a6:	4629      	mov	r1, r5
 80158a8:	3004      	adds	r0, #4
 80158aa:	f7fe fa39 	bl	8013d20 <rcl_take_request>
 80158ae:	b148      	cbz	r0, 80158c4 <rcl_action_take_cancel_request+0x64>
 80158b0:	280a      	cmp	r0, #10
 80158b2:	d007      	beq.n	80158c4 <rcl_action_take_cancel_request+0x64>
 80158b4:	f240 2259 	movw	r2, #601	@ 0x259
 80158b8:	f640 0399 	movw	r3, #2201	@ 0x899
 80158bc:	4290      	cmp	r0, r2
 80158be:	bf0c      	ite	eq
 80158c0:	4618      	moveq	r0, r3
 80158c2:	2001      	movne	r0, #1
 80158c4:	bd70      	pop	{r4, r5, r6, pc}
 80158c6:	f7f7 fd43 	bl	800d350 <rcutils_reset_error>
 80158ca:	f640 0098 	movw	r0, #2200	@ 0x898
 80158ce:	bd70      	pop	{r4, r5, r6, pc}
 80158d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80158d4:	bd70      	pop	{r4, r5, r6, pc}
 80158d6:	200b      	movs	r0, #11
 80158d8:	bd70      	pop	{r4, r5, r6, pc}
 80158da:	f640 0098 	movw	r0, #2200	@ 0x898
 80158de:	4770      	bx	lr

080158e0 <rcl_action_send_cancel_response>:
 80158e0:	b398      	cbz	r0, 801594a <rcl_action_send_cancel_response+0x6a>
 80158e2:	b570      	push	{r4, r5, r6, lr}
 80158e4:	4604      	mov	r4, r0
 80158e6:	6800      	ldr	r0, [r0, #0]
 80158e8:	b350      	cbz	r0, 8015940 <rcl_action_send_cancel_response+0x60>
 80158ea:	460d      	mov	r5, r1
 80158ec:	4616      	mov	r6, r2
 80158ee:	f7fe fa6f 	bl	8013dd0 <rcl_service_is_valid>
 80158f2:	b300      	cbz	r0, 8015936 <rcl_action_send_cancel_response+0x56>
 80158f4:	6820      	ldr	r0, [r4, #0]
 80158f6:	3004      	adds	r0, #4
 80158f8:	f7fe fa6a 	bl	8013dd0 <rcl_service_is_valid>
 80158fc:	b1d8      	cbz	r0, 8015936 <rcl_action_send_cancel_response+0x56>
 80158fe:	6820      	ldr	r0, [r4, #0]
 8015900:	3008      	adds	r0, #8
 8015902:	f7fe fa65 	bl	8013dd0 <rcl_service_is_valid>
 8015906:	b1b0      	cbz	r0, 8015936 <rcl_action_send_cancel_response+0x56>
 8015908:	6820      	ldr	r0, [r4, #0]
 801590a:	300c      	adds	r0, #12
 801590c:	f7f6 fd3c 	bl	800c388 <rcl_publisher_is_valid>
 8015910:	b188      	cbz	r0, 8015936 <rcl_action_send_cancel_response+0x56>
 8015912:	6820      	ldr	r0, [r4, #0]
 8015914:	3010      	adds	r0, #16
 8015916:	f7f6 fd37 	bl	800c388 <rcl_publisher_is_valid>
 801591a:	b160      	cbz	r0, 8015936 <rcl_action_send_cancel_response+0x56>
 801591c:	b19d      	cbz	r5, 8015946 <rcl_action_send_cancel_response+0x66>
 801591e:	b196      	cbz	r6, 8015946 <rcl_action_send_cancel_response+0x66>
 8015920:	6820      	ldr	r0, [r4, #0]
 8015922:	4632      	mov	r2, r6
 8015924:	4629      	mov	r1, r5
 8015926:	3004      	adds	r0, #4
 8015928:	f7fe fa3a 	bl	8013da0 <rcl_send_response>
 801592c:	b110      	cbz	r0, 8015934 <rcl_action_send_cancel_response+0x54>
 801592e:	2802      	cmp	r0, #2
 8015930:	bf18      	it	ne
 8015932:	2001      	movne	r0, #1
 8015934:	bd70      	pop	{r4, r5, r6, pc}
 8015936:	f7f7 fd0b 	bl	800d350 <rcutils_reset_error>
 801593a:	f640 0098 	movw	r0, #2200	@ 0x898
 801593e:	bd70      	pop	{r4, r5, r6, pc}
 8015940:	f640 0098 	movw	r0, #2200	@ 0x898
 8015944:	bd70      	pop	{r4, r5, r6, pc}
 8015946:	200b      	movs	r0, #11
 8015948:	bd70      	pop	{r4, r5, r6, pc}
 801594a:	f640 0098 	movw	r0, #2200	@ 0x898
 801594e:	4770      	bx	lr

08015950 <rcl_action_wait_set_add_action_server>:
 8015950:	2800      	cmp	r0, #0
 8015952:	d04d      	beq.n	80159f0 <rcl_action_wait_set_add_action_server+0xa0>
 8015954:	b570      	push	{r4, r5, r6, lr}
 8015956:	460c      	mov	r4, r1
 8015958:	b159      	cbz	r1, 8015972 <rcl_action_wait_set_add_action_server+0x22>
 801595a:	4605      	mov	r5, r0
 801595c:	6808      	ldr	r0, [r1, #0]
 801595e:	b140      	cbz	r0, 8015972 <rcl_action_wait_set_add_action_server+0x22>
 8015960:	4616      	mov	r6, r2
 8015962:	f7fe fa35 	bl	8013dd0 <rcl_service_is_valid>
 8015966:	b120      	cbz	r0, 8015972 <rcl_action_wait_set_add_action_server+0x22>
 8015968:	6820      	ldr	r0, [r4, #0]
 801596a:	3004      	adds	r0, #4
 801596c:	f7fe fa30 	bl	8013dd0 <rcl_service_is_valid>
 8015970:	b910      	cbnz	r0, 8015978 <rcl_action_wait_set_add_action_server+0x28>
 8015972:	f640 0098 	movw	r0, #2200	@ 0x898
 8015976:	bd70      	pop	{r4, r5, r6, pc}
 8015978:	6820      	ldr	r0, [r4, #0]
 801597a:	3008      	adds	r0, #8
 801597c:	f7fe fa28 	bl	8013dd0 <rcl_service_is_valid>
 8015980:	2800      	cmp	r0, #0
 8015982:	d0f6      	beq.n	8015972 <rcl_action_wait_set_add_action_server+0x22>
 8015984:	6820      	ldr	r0, [r4, #0]
 8015986:	300c      	adds	r0, #12
 8015988:	f7f6 fd16 	bl	800c3b8 <rcl_publisher_is_valid_except_context>
 801598c:	2800      	cmp	r0, #0
 801598e:	d0f0      	beq.n	8015972 <rcl_action_wait_set_add_action_server+0x22>
 8015990:	6820      	ldr	r0, [r4, #0]
 8015992:	3010      	adds	r0, #16
 8015994:	f7f6 fd10 	bl	800c3b8 <rcl_publisher_is_valid_except_context>
 8015998:	2800      	cmp	r0, #0
 801599a:	d0ea      	beq.n	8015972 <rcl_action_wait_set_add_action_server+0x22>
 801599c:	6821      	ldr	r1, [r4, #0]
 801599e:	4628      	mov	r0, r5
 80159a0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80159a4:	f7ff face 	bl	8014f44 <rcl_wait_set_add_service>
 80159a8:	2800      	cmp	r0, #0
 80159aa:	d1e4      	bne.n	8015976 <rcl_action_wait_set_add_action_server+0x26>
 80159ac:	6821      	ldr	r1, [r4, #0]
 80159ae:	4628      	mov	r0, r5
 80159b0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80159b4:	3104      	adds	r1, #4
 80159b6:	f7ff fac5 	bl	8014f44 <rcl_wait_set_add_service>
 80159ba:	2800      	cmp	r0, #0
 80159bc:	d1db      	bne.n	8015976 <rcl_action_wait_set_add_action_server+0x26>
 80159be:	6821      	ldr	r1, [r4, #0]
 80159c0:	4628      	mov	r0, r5
 80159c2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80159c6:	3108      	adds	r1, #8
 80159c8:	f7ff fabc 	bl	8014f44 <rcl_wait_set_add_service>
 80159cc:	2800      	cmp	r0, #0
 80159ce:	d1d2      	bne.n	8015976 <rcl_action_wait_set_add_action_server+0x26>
 80159d0:	6821      	ldr	r1, [r4, #0]
 80159d2:	4628      	mov	r0, r5
 80159d4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80159d8:	3114      	adds	r1, #20
 80159da:	f7ff fa57 	bl	8014e8c <rcl_wait_set_add_timer>
 80159de:	2800      	cmp	r0, #0
 80159e0:	d1c9      	bne.n	8015976 <rcl_action_wait_set_add_action_server+0x26>
 80159e2:	2e00      	cmp	r6, #0
 80159e4:	d0c7      	beq.n	8015976 <rcl_action_wait_set_add_action_server+0x26>
 80159e6:	6823      	ldr	r3, [r4, #0]
 80159e8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80159ec:	6033      	str	r3, [r6, #0]
 80159ee:	bd70      	pop	{r4, r5, r6, pc}
 80159f0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80159f4:	4770      	bx	lr
 80159f6:	bf00      	nop

080159f8 <rcl_action_server_wait_set_get_entities_ready>:
 80159f8:	2800      	cmp	r0, #0
 80159fa:	d05a      	beq.n	8015ab2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 80159fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159fe:	460c      	mov	r4, r1
 8015a00:	b161      	cbz	r1, 8015a1c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a02:	4605      	mov	r5, r0
 8015a04:	6808      	ldr	r0, [r1, #0]
 8015a06:	b148      	cbz	r0, 8015a1c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a08:	4616      	mov	r6, r2
 8015a0a:	461f      	mov	r7, r3
 8015a0c:	f7fe f9e0 	bl	8013dd0 <rcl_service_is_valid>
 8015a10:	b120      	cbz	r0, 8015a1c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a12:	6820      	ldr	r0, [r4, #0]
 8015a14:	3004      	adds	r0, #4
 8015a16:	f7fe f9db 	bl	8013dd0 <rcl_service_is_valid>
 8015a1a:	b910      	cbnz	r0, 8015a22 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8015a1c:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a22:	6820      	ldr	r0, [r4, #0]
 8015a24:	3008      	adds	r0, #8
 8015a26:	f7fe f9d3 	bl	8013dd0 <rcl_service_is_valid>
 8015a2a:	2800      	cmp	r0, #0
 8015a2c:	d0f6      	beq.n	8015a1c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a2e:	6820      	ldr	r0, [r4, #0]
 8015a30:	300c      	adds	r0, #12
 8015a32:	f7f6 fcc1 	bl	800c3b8 <rcl_publisher_is_valid_except_context>
 8015a36:	2800      	cmp	r0, #0
 8015a38:	d0f0      	beq.n	8015a1c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a3a:	6820      	ldr	r0, [r4, #0]
 8015a3c:	3010      	adds	r0, #16
 8015a3e:	f7f6 fcbb 	bl	800c3b8 <rcl_publisher_is_valid_except_context>
 8015a42:	2800      	cmp	r0, #0
 8015a44:	d0ea      	beq.n	8015a1c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a46:	b3be      	cbz	r6, 8015ab8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015a48:	b3b7      	cbz	r7, 8015ab8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015a4a:	9b06      	ldr	r3, [sp, #24]
 8015a4c:	b3a3      	cbz	r3, 8015ab8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015a4e:	9b07      	ldr	r3, [sp, #28]
 8015a50:	b393      	cbz	r3, 8015ab8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015a52:	6821      	ldr	r1, [r4, #0]
 8015a54:	692a      	ldr	r2, [r5, #16]
 8015a56:	6a2c      	ldr	r4, [r5, #32]
 8015a58:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8015a5c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8015a60:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8015a64:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8015a68:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8015a6c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8015a70:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015a74:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8015a78:	1a64      	subs	r4, r4, r1
 8015a7a:	fab4 f484 	clz	r4, r4
 8015a7e:	0964      	lsrs	r4, r4, #5
 8015a80:	7034      	strb	r4, [r6, #0]
 8015a82:	1d0c      	adds	r4, r1, #4
 8015a84:	1b1b      	subs	r3, r3, r4
 8015a86:	fab3 f383 	clz	r3, r3
 8015a8a:	095b      	lsrs	r3, r3, #5
 8015a8c:	f101 0408 	add.w	r4, r1, #8
 8015a90:	703b      	strb	r3, [r7, #0]
 8015a92:	f101 0314 	add.w	r3, r1, #20
 8015a96:	1b01      	subs	r1, r0, r4
 8015a98:	1ad3      	subs	r3, r2, r3
 8015a9a:	fab1 f181 	clz	r1, r1
 8015a9e:	9a06      	ldr	r2, [sp, #24]
 8015aa0:	0949      	lsrs	r1, r1, #5
 8015aa2:	7011      	strb	r1, [r2, #0]
 8015aa4:	fab3 f383 	clz	r3, r3
 8015aa8:	9a07      	ldr	r2, [sp, #28]
 8015aaa:	095b      	lsrs	r3, r3, #5
 8015aac:	2000      	movs	r0, #0
 8015aae:	7013      	strb	r3, [r2, #0]
 8015ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ab2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015ab6:	4770      	bx	lr
 8015ab8:	200b      	movs	r0, #11
 8015aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015abc <_execute_event_handler>:
 8015abc:	2002      	movs	r0, #2
 8015abe:	4770      	bx	lr

08015ac0 <_cancel_goal_event_handler>:
 8015ac0:	2003      	movs	r0, #3
 8015ac2:	4770      	bx	lr

08015ac4 <_succeed_event_handler>:
 8015ac4:	2004      	movs	r0, #4
 8015ac6:	4770      	bx	lr

08015ac8 <_abort_event_handler>:
 8015ac8:	2006      	movs	r0, #6
 8015aca:	4770      	bx	lr

08015acc <_canceled_event_handler>:
 8015acc:	2005      	movs	r0, #5
 8015ace:	4770      	bx	lr

08015ad0 <rcl_action_transition_goal_state>:
 8015ad0:	b2c2      	uxtb	r2, r0
 8015ad2:	2a06      	cmp	r2, #6
 8015ad4:	d80c      	bhi.n	8015af0 <rcl_action_transition_goal_state+0x20>
 8015ad6:	2904      	cmp	r1, #4
 8015ad8:	d80a      	bhi.n	8015af0 <rcl_action_transition_goal_state+0x20>
 8015ada:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8015ade:	b410      	push	{r4}
 8015ae0:	1853      	adds	r3, r2, r1
 8015ae2:	4c06      	ldr	r4, [pc, #24]	@ (8015afc <rcl_action_transition_goal_state+0x2c>)
 8015ae4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015ae8:	b123      	cbz	r3, 8015af4 <rcl_action_transition_goal_state+0x24>
 8015aea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015aee:	4718      	bx	r3
 8015af0:	2000      	movs	r0, #0
 8015af2:	4770      	bx	lr
 8015af4:	2000      	movs	r0, #0
 8015af6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015afa:	4770      	bx	lr
 8015afc:	0801b338 	.word	0x0801b338

08015b00 <rcl_action_get_zero_initialized_cancel_response>:
 8015b00:	b510      	push	{r4, lr}
 8015b02:	4c07      	ldr	r4, [pc, #28]	@ (8015b20 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8015b04:	4686      	mov	lr, r0
 8015b06:	4684      	mov	ip, r0
 8015b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b14:	6823      	ldr	r3, [r4, #0]
 8015b16:	f8cc 3000 	str.w	r3, [ip]
 8015b1a:	4670      	mov	r0, lr
 8015b1c:	bd10      	pop	{r4, pc}
 8015b1e:	bf00      	nop
 8015b20:	0801b3c4 	.word	0x0801b3c4

08015b24 <rclc_action_send_result_request>:
 8015b24:	b1d0      	cbz	r0, 8015b5c <rclc_action_send_result_request+0x38>
 8015b26:	b500      	push	{lr}
 8015b28:	4684      	mov	ip, r0
 8015b2a:	b087      	sub	sp, #28
 8015b2c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8015b30:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8015b34:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8015b38:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8015b3c:	f10d 0e08 	add.w	lr, sp, #8
 8015b40:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015b44:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8015b48:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8015b4c:	a902      	add	r1, sp, #8
 8015b4e:	3010      	adds	r0, #16
 8015b50:	f7ff fbda 	bl	8015308 <rcl_action_send_result_request>
 8015b54:	b920      	cbnz	r0, 8015b60 <rclc_action_send_result_request+0x3c>
 8015b56:	b007      	add	sp, #28
 8015b58:	f85d fb04 	ldr.w	pc, [sp], #4
 8015b5c:	200b      	movs	r0, #11
 8015b5e:	4770      	bx	lr
 8015b60:	9001      	str	r0, [sp, #4]
 8015b62:	f7f7 fbf5 	bl	800d350 <rcutils_reset_error>
 8015b66:	9801      	ldr	r0, [sp, #4]
 8015b68:	b007      	add	sp, #28
 8015b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8015b6e:	bf00      	nop

08015b70 <rclc_action_take_goal_handle>:
 8015b70:	b160      	cbz	r0, 8015b8c <rclc_action_take_goal_handle+0x1c>
 8015b72:	6883      	ldr	r3, [r0, #8]
 8015b74:	b143      	cbz	r3, 8015b88 <rclc_action_take_goal_handle+0x18>
 8015b76:	6819      	ldr	r1, [r3, #0]
 8015b78:	6081      	str	r1, [r0, #8]
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	721a      	strb	r2, [r3, #8]
 8015b7e:	68c1      	ldr	r1, [r0, #12]
 8015b80:	6019      	str	r1, [r3, #0]
 8015b82:	621a      	str	r2, [r3, #32]
 8015b84:	849a      	strh	r2, [r3, #36]	@ 0x24
 8015b86:	60c3      	str	r3, [r0, #12]
 8015b88:	4618      	mov	r0, r3
 8015b8a:	4770      	bx	lr
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	e7fb      	b.n	8015b88 <rclc_action_take_goal_handle+0x18>

08015b90 <rclc_action_remove_used_goal_handle>:
 8015b90:	b180      	cbz	r0, 8015bb4 <rclc_action_remove_used_goal_handle+0x24>
 8015b92:	b179      	cbz	r1, 8015bb4 <rclc_action_remove_used_goal_handle+0x24>
 8015b94:	68c3      	ldr	r3, [r0, #12]
 8015b96:	4299      	cmp	r1, r3
 8015b98:	d00d      	beq.n	8015bb6 <rclc_action_remove_used_goal_handle+0x26>
 8015b9a:	b12b      	cbz	r3, 8015ba8 <rclc_action_remove_used_goal_handle+0x18>
 8015b9c:	681a      	ldr	r2, [r3, #0]
 8015b9e:	4291      	cmp	r1, r2
 8015ba0:	d003      	beq.n	8015baa <rclc_action_remove_used_goal_handle+0x1a>
 8015ba2:	4613      	mov	r3, r2
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d1f9      	bne.n	8015b9c <rclc_action_remove_used_goal_handle+0xc>
 8015ba8:	4770      	bx	lr
 8015baa:	680a      	ldr	r2, [r1, #0]
 8015bac:	601a      	str	r2, [r3, #0]
 8015bae:	6883      	ldr	r3, [r0, #8]
 8015bb0:	600b      	str	r3, [r1, #0]
 8015bb2:	6081      	str	r1, [r0, #8]
 8015bb4:	4770      	bx	lr
 8015bb6:	680b      	ldr	r3, [r1, #0]
 8015bb8:	60c3      	str	r3, [r0, #12]
 8015bba:	e7f8      	b.n	8015bae <rclc_action_remove_used_goal_handle+0x1e>

08015bbc <rclc_action_find_goal_handle_by_uuid>:
 8015bbc:	b538      	push	{r3, r4, r5, lr}
 8015bbe:	b180      	cbz	r0, 8015be2 <rclc_action_find_goal_handle_by_uuid+0x26>
 8015bc0:	460d      	mov	r5, r1
 8015bc2:	b181      	cbz	r1, 8015be6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8015bc4:	68c4      	ldr	r4, [r0, #12]
 8015bc6:	b914      	cbnz	r4, 8015bce <rclc_action_find_goal_handle_by_uuid+0x12>
 8015bc8:	e009      	b.n	8015bde <rclc_action_find_goal_handle_by_uuid+0x22>
 8015bca:	6824      	ldr	r4, [r4, #0]
 8015bcc:	b13c      	cbz	r4, 8015bde <rclc_action_find_goal_handle_by_uuid+0x22>
 8015bce:	f104 0009 	add.w	r0, r4, #9
 8015bd2:	2210      	movs	r2, #16
 8015bd4:	4629      	mov	r1, r5
 8015bd6:	f003 fa15 	bl	8019004 <memcmp>
 8015bda:	2800      	cmp	r0, #0
 8015bdc:	d1f5      	bne.n	8015bca <rclc_action_find_goal_handle_by_uuid+0xe>
 8015bde:	4620      	mov	r0, r4
 8015be0:	bd38      	pop	{r3, r4, r5, pc}
 8015be2:	4604      	mov	r4, r0
 8015be4:	e7fb      	b.n	8015bde <rclc_action_find_goal_handle_by_uuid+0x22>
 8015be6:	460c      	mov	r4, r1
 8015be8:	e7f9      	b.n	8015bde <rclc_action_find_goal_handle_by_uuid+0x22>
 8015bea:	bf00      	nop

08015bec <rclc_action_find_first_handle_by_status>:
 8015bec:	b140      	cbz	r0, 8015c00 <rclc_action_find_first_handle_by_status+0x14>
 8015bee:	68c0      	ldr	r0, [r0, #12]
 8015bf0:	b910      	cbnz	r0, 8015bf8 <rclc_action_find_first_handle_by_status+0xc>
 8015bf2:	e005      	b.n	8015c00 <rclc_action_find_first_handle_by_status+0x14>
 8015bf4:	6800      	ldr	r0, [r0, #0]
 8015bf6:	b118      	cbz	r0, 8015c00 <rclc_action_find_first_handle_by_status+0x14>
 8015bf8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015bfc:	428b      	cmp	r3, r1
 8015bfe:	d1f9      	bne.n	8015bf4 <rclc_action_find_first_handle_by_status+0x8>
 8015c00:	4770      	bx	lr
 8015c02:	bf00      	nop

08015c04 <rclc_action_find_first_terminated_handle>:
 8015c04:	b140      	cbz	r0, 8015c18 <rclc_action_find_first_terminated_handle+0x14>
 8015c06:	68c0      	ldr	r0, [r0, #12]
 8015c08:	b910      	cbnz	r0, 8015c10 <rclc_action_find_first_terminated_handle+0xc>
 8015c0a:	e005      	b.n	8015c18 <rclc_action_find_first_terminated_handle+0x14>
 8015c0c:	6800      	ldr	r0, [r0, #0]
 8015c0e:	b118      	cbz	r0, 8015c18 <rclc_action_find_first_terminated_handle+0x14>
 8015c10:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015c14:	2b03      	cmp	r3, #3
 8015c16:	ddf9      	ble.n	8015c0c <rclc_action_find_first_terminated_handle+0x8>
 8015c18:	4770      	bx	lr
 8015c1a:	bf00      	nop

08015c1c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8015c1c:	b170      	cbz	r0, 8015c3c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015c1e:	68c0      	ldr	r0, [r0, #12]
 8015c20:	b160      	cbz	r0, 8015c3c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015c22:	b410      	push	{r4}
 8015c24:	e001      	b.n	8015c2a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8015c26:	6800      	ldr	r0, [r0, #0]
 8015c28:	b128      	cbz	r0, 8015c36 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8015c2a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8015c2e:	4299      	cmp	r1, r3
 8015c30:	bf08      	it	eq
 8015c32:	4294      	cmpeq	r4, r2
 8015c34:	d1f7      	bne.n	8015c26 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8015c36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c3a:	4770      	bx	lr
 8015c3c:	4770      	bx	lr
 8015c3e:	bf00      	nop

08015c40 <rclc_action_find_handle_by_result_request_sequence_number>:
 8015c40:	b170      	cbz	r0, 8015c60 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015c42:	68c0      	ldr	r0, [r0, #12]
 8015c44:	b160      	cbz	r0, 8015c60 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015c46:	b410      	push	{r4}
 8015c48:	e001      	b.n	8015c4e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8015c4a:	6800      	ldr	r0, [r0, #0]
 8015c4c:	b128      	cbz	r0, 8015c5a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8015c4e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8015c52:	4299      	cmp	r1, r3
 8015c54:	bf08      	it	eq
 8015c56:	4294      	cmpeq	r4, r2
 8015c58:	d1f7      	bne.n	8015c4a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8015c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c5e:	4770      	bx	lr
 8015c60:	4770      	bx	lr
 8015c62:	bf00      	nop

08015c64 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8015c64:	b170      	cbz	r0, 8015c84 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015c66:	68c0      	ldr	r0, [r0, #12]
 8015c68:	b160      	cbz	r0, 8015c84 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015c6a:	b410      	push	{r4}
 8015c6c:	e001      	b.n	8015c72 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8015c6e:	6800      	ldr	r0, [r0, #0]
 8015c70:	b128      	cbz	r0, 8015c7e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8015c72:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8015c76:	4299      	cmp	r1, r3
 8015c78:	bf08      	it	eq
 8015c7a:	4294      	cmpeq	r4, r2
 8015c7c:	d1f7      	bne.n	8015c6e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8015c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c82:	4770      	bx	lr
 8015c84:	4770      	bx	lr
 8015c86:	bf00      	nop

08015c88 <rclc_action_find_first_handle_with_goal_response>:
 8015c88:	b140      	cbz	r0, 8015c9c <rclc_action_find_first_handle_with_goal_response+0x14>
 8015c8a:	68c0      	ldr	r0, [r0, #12]
 8015c8c:	b910      	cbnz	r0, 8015c94 <rclc_action_find_first_handle_with_goal_response+0xc>
 8015c8e:	e005      	b.n	8015c9c <rclc_action_find_first_handle_with_goal_response+0x14>
 8015c90:	6800      	ldr	r0, [r0, #0]
 8015c92:	b118      	cbz	r0, 8015c9c <rclc_action_find_first_handle_with_goal_response+0x14>
 8015c94:	f890 3020 	ldrb.w	r3, [r0, #32]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d0f9      	beq.n	8015c90 <rclc_action_find_first_handle_with_goal_response+0x8>
 8015c9c:	4770      	bx	lr
 8015c9e:	bf00      	nop

08015ca0 <rclc_action_find_first_handle_with_result_response>:
 8015ca0:	b140      	cbz	r0, 8015cb4 <rclc_action_find_first_handle_with_result_response+0x14>
 8015ca2:	68c0      	ldr	r0, [r0, #12]
 8015ca4:	b910      	cbnz	r0, 8015cac <rclc_action_find_first_handle_with_result_response+0xc>
 8015ca6:	e005      	b.n	8015cb4 <rclc_action_find_first_handle_with_result_response+0x14>
 8015ca8:	6800      	ldr	r0, [r0, #0]
 8015caa:	b118      	cbz	r0, 8015cb4 <rclc_action_find_first_handle_with_result_response+0x14>
 8015cac:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d0f9      	beq.n	8015ca8 <rclc_action_find_first_handle_with_result_response+0x8>
 8015cb4:	4770      	bx	lr
 8015cb6:	bf00      	nop

08015cb8 <rclc_action_server_response_goal_request>:
 8015cb8:	b198      	cbz	r0, 8015ce2 <rclc_action_server_response_goal_request+0x2a>
 8015cba:	b510      	push	{r4, lr}
 8015cbc:	6844      	ldr	r4, [r0, #4]
 8015cbe:	b086      	sub	sp, #24
 8015cc0:	2200      	movs	r2, #0
 8015cc2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8015cc6:	460b      	mov	r3, r1
 8015cc8:	9205      	str	r2, [sp, #20]
 8015cca:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8015cce:	aa03      	add	r2, sp, #12
 8015cd0:	f104 0010 	add.w	r0, r4, #16
 8015cd4:	f88d 300c 	strb.w	r3, [sp, #12]
 8015cd8:	f7ff fd4a 	bl	8015770 <rcl_action_send_goal_response>
 8015cdc:	b918      	cbnz	r0, 8015ce6 <rclc_action_server_response_goal_request+0x2e>
 8015cde:	b006      	add	sp, #24
 8015ce0:	bd10      	pop	{r4, pc}
 8015ce2:	200b      	movs	r0, #11
 8015ce4:	4770      	bx	lr
 8015ce6:	9001      	str	r0, [sp, #4]
 8015ce8:	f7f7 fb32 	bl	800d350 <rcutils_reset_error>
 8015cec:	9801      	ldr	r0, [sp, #4]
 8015cee:	b006      	add	sp, #24
 8015cf0:	bd10      	pop	{r4, pc}
 8015cf2:	bf00      	nop
 8015cf4:	0000      	movs	r0, r0
	...

08015cf8 <rclc_action_server_goal_cancel_accept>:
 8015cf8:	b310      	cbz	r0, 8015d40 <rclc_action_server_goal_cancel_accept+0x48>
 8015cfa:	b510      	push	{r4, lr}
 8015cfc:	b090      	sub	sp, #64	@ 0x40
 8015cfe:	4604      	mov	r4, r0
 8015d00:	a806      	add	r0, sp, #24
 8015d02:	f7ff fefd 	bl	8015b00 <rcl_action_get_zero_initialized_cancel_response>
 8015d06:	2300      	movs	r3, #0
 8015d08:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8015d0c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8015d10:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8015d14:	f88d 3018 	strb.w	r3, [sp, #24]
 8015d18:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8015d1c:	f8cd d01c 	str.w	sp, [sp, #28]
 8015d20:	46ec      	mov	ip, sp
 8015d22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d26:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8015d48 <rclc_action_server_goal_cancel_accept+0x50>
 8015d2a:	6860      	ldr	r0, [r4, #4]
 8015d2c:	aa06      	add	r2, sp, #24
 8015d2e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8015d32:	3010      	adds	r0, #16
 8015d34:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015d38:	f7ff fdd2 	bl	80158e0 <rcl_action_send_cancel_response>
 8015d3c:	b010      	add	sp, #64	@ 0x40
 8015d3e:	bd10      	pop	{r4, pc}
 8015d40:	200b      	movs	r0, #11
 8015d42:	4770      	bx	lr
 8015d44:	f3af 8000 	nop.w
 8015d48:	00000001 	.word	0x00000001
 8015d4c:	00000001 	.word	0x00000001

08015d50 <rclc_action_server_goal_cancel_reject>:
 8015d50:	b082      	sub	sp, #8
 8015d52:	b530      	push	{r4, r5, lr}
 8015d54:	b08b      	sub	sp, #44	@ 0x2c
 8015d56:	ac0e      	add	r4, sp, #56	@ 0x38
 8015d58:	e884 000c 	stmia.w	r4, {r2, r3}
 8015d5c:	b188      	cbz	r0, 8015d82 <rclc_action_server_goal_cancel_reject+0x32>
 8015d5e:	4604      	mov	r4, r0
 8015d60:	a801      	add	r0, sp, #4
 8015d62:	460d      	mov	r5, r1
 8015d64:	f7ff fecc 	bl	8015b00 <rcl_action_get_zero_initialized_cancel_response>
 8015d68:	aa01      	add	r2, sp, #4
 8015d6a:	a90e      	add	r1, sp, #56	@ 0x38
 8015d6c:	f104 0010 	add.w	r0, r4, #16
 8015d70:	f88d 5004 	strb.w	r5, [sp, #4]
 8015d74:	f7ff fdb4 	bl	80158e0 <rcl_action_send_cancel_response>
 8015d78:	b00b      	add	sp, #44	@ 0x2c
 8015d7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015d7e:	b002      	add	sp, #8
 8015d80:	4770      	bx	lr
 8015d82:	200b      	movs	r0, #11
 8015d84:	b00b      	add	sp, #44	@ 0x2c
 8015d86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015d8a:	b002      	add	sp, #8
 8015d8c:	4770      	bx	lr
 8015d8e:	bf00      	nop

08015d90 <__atomic_load_8>:
 8015d90:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8015d94:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8015d98:	4a15      	ldr	r2, [pc, #84]	@ (8015df0 <__atomic_load_8+0x60>)
 8015d9a:	4b16      	ldr	r3, [pc, #88]	@ (8015df4 <__atomic_load_8+0x64>)
 8015d9c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015da0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015da4:	fb02 f101 	mul.w	r1, r2, r1
 8015da8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8015dac:	fba3 2301 	umull	r2, r3, r3, r1
 8015db0:	091b      	lsrs	r3, r3, #4
 8015db2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8015db6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8015dba:	b4d0      	push	{r4, r6, r7}
 8015dbc:	4c0e      	ldr	r4, [pc, #56]	@ (8015df8 <__atomic_load_8+0x68>)
 8015dbe:	1ac9      	subs	r1, r1, r3
 8015dc0:	1862      	adds	r2, r4, r1
 8015dc2:	f04f 0c01 	mov.w	ip, #1
 8015dc6:	e8d2 3f4f 	ldrexb	r3, [r2]
 8015dca:	e8c2 cf46 	strexb	r6, ip, [r2]
 8015dce:	2e00      	cmp	r6, #0
 8015dd0:	d1f9      	bne.n	8015dc6 <__atomic_load_8+0x36>
 8015dd2:	f3bf 8f5b 	dmb	ish
 8015dd6:	b2db      	uxtb	r3, r3
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d1f4      	bne.n	8015dc6 <__atomic_load_8+0x36>
 8015ddc:	e9d0 6700 	ldrd	r6, r7, [r0]
 8015de0:	f3bf 8f5b 	dmb	ish
 8015de4:	5463      	strb	r3, [r4, r1]
 8015de6:	4630      	mov	r0, r6
 8015de8:	4639      	mov	r1, r7
 8015dea:	bcd0      	pop	{r4, r6, r7}
 8015dec:	4770      	bx	lr
 8015dee:	bf00      	nop
 8015df0:	27d4eb2d 	.word	0x27d4eb2d
 8015df4:	b21642c9 	.word	0xb21642c9
 8015df8:	2000b5d0 	.word	0x2000b5d0

08015dfc <__atomic_store_8>:
 8015dfc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8015e00:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8015e04:	b570      	push	{r4, r5, r6, lr}
 8015e06:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015e0a:	4c14      	ldr	r4, [pc, #80]	@ (8015e5c <__atomic_store_8+0x60>)
 8015e0c:	4d14      	ldr	r5, [pc, #80]	@ (8015e60 <__atomic_store_8+0x64>)
 8015e0e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015e12:	fb04 f101 	mul.w	r1, r4, r1
 8015e16:	4c13      	ldr	r4, [pc, #76]	@ (8015e64 <__atomic_store_8+0x68>)
 8015e18:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8015e1c:	fba4 4e01 	umull	r4, lr, r4, r1
 8015e20:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8015e24:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8015e28:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8015e2c:	eba1 0e0e 	sub.w	lr, r1, lr
 8015e30:	eb05 0c0e 	add.w	ip, r5, lr
 8015e34:	f04f 0401 	mov.w	r4, #1
 8015e38:	e8dc 1f4f 	ldrexb	r1, [ip]
 8015e3c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8015e40:	2e00      	cmp	r6, #0
 8015e42:	d1f9      	bne.n	8015e38 <__atomic_store_8+0x3c>
 8015e44:	f3bf 8f5b 	dmb	ish
 8015e48:	b2c9      	uxtb	r1, r1
 8015e4a:	2900      	cmp	r1, #0
 8015e4c:	d1f4      	bne.n	8015e38 <__atomic_store_8+0x3c>
 8015e4e:	e9c0 2300 	strd	r2, r3, [r0]
 8015e52:	f3bf 8f5b 	dmb	ish
 8015e56:	f805 100e 	strb.w	r1, [r5, lr]
 8015e5a:	bd70      	pop	{r4, r5, r6, pc}
 8015e5c:	27d4eb2d 	.word	0x27d4eb2d
 8015e60:	2000b5d0 	.word	0x2000b5d0
 8015e64:	b21642c9 	.word	0xb21642c9

08015e68 <__atomic_exchange_8>:
 8015e68:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8015e6c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8015e70:	4916      	ldr	r1, [pc, #88]	@ (8015ecc <__atomic_exchange_8+0x64>)
 8015e72:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8015e76:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8015e7a:	fb01 fc0c 	mul.w	ip, r1, ip
 8015e7e:	4914      	ldr	r1, [pc, #80]	@ (8015ed0 <__atomic_exchange_8+0x68>)
 8015e80:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8015e84:	b570      	push	{r4, r5, r6, lr}
 8015e86:	4605      	mov	r5, r0
 8015e88:	fba1 010c 	umull	r0, r1, r1, ip
 8015e8c:	0909      	lsrs	r1, r1, #4
 8015e8e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8015e92:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8015e96:	4e0f      	ldr	r6, [pc, #60]	@ (8015ed4 <__atomic_exchange_8+0x6c>)
 8015e98:	ebac 0c01 	sub.w	ip, ip, r1
 8015e9c:	eb06 010c 	add.w	r1, r6, ip
 8015ea0:	f04f 0e01 	mov.w	lr, #1
 8015ea4:	e8d1 4f4f 	ldrexb	r4, [r1]
 8015ea8:	e8c1 ef40 	strexb	r0, lr, [r1]
 8015eac:	2800      	cmp	r0, #0
 8015eae:	d1f9      	bne.n	8015ea4 <__atomic_exchange_8+0x3c>
 8015eb0:	f3bf 8f5b 	dmb	ish
 8015eb4:	b2e4      	uxtb	r4, r4
 8015eb6:	2c00      	cmp	r4, #0
 8015eb8:	d1f4      	bne.n	8015ea4 <__atomic_exchange_8+0x3c>
 8015eba:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015ebe:	e9c5 2300 	strd	r2, r3, [r5]
 8015ec2:	f3bf 8f5b 	dmb	ish
 8015ec6:	f806 400c 	strb.w	r4, [r6, ip]
 8015eca:	bd70      	pop	{r4, r5, r6, pc}
 8015ecc:	27d4eb2d 	.word	0x27d4eb2d
 8015ed0:	b21642c9 	.word	0xb21642c9
 8015ed4:	2000b5d0 	.word	0x2000b5d0

08015ed8 <rcutils_get_env>:
 8015ed8:	b168      	cbz	r0, 8015ef6 <rcutils_get_env+0x1e>
 8015eda:	b510      	push	{r4, lr}
 8015edc:	460c      	mov	r4, r1
 8015ede:	b129      	cbz	r1, 8015eec <rcutils_get_env+0x14>
 8015ee0:	f002 fbfe 	bl	80186e0 <getenv>
 8015ee4:	b120      	cbz	r0, 8015ef0 <rcutils_get_env+0x18>
 8015ee6:	6020      	str	r0, [r4, #0]
 8015ee8:	2000      	movs	r0, #0
 8015eea:	bd10      	pop	{r4, pc}
 8015eec:	4803      	ldr	r0, [pc, #12]	@ (8015efc <rcutils_get_env+0x24>)
 8015eee:	bd10      	pop	{r4, pc}
 8015ef0:	4b03      	ldr	r3, [pc, #12]	@ (8015f00 <rcutils_get_env+0x28>)
 8015ef2:	6023      	str	r3, [r4, #0]
 8015ef4:	bd10      	pop	{r4, pc}
 8015ef6:	4803      	ldr	r0, [pc, #12]	@ (8015f04 <rcutils_get_env+0x2c>)
 8015ef8:	4770      	bx	lr
 8015efa:	bf00      	nop
 8015efc:	0801b404 	.word	0x0801b404
 8015f00:	0801b7dc 	.word	0x0801b7dc
 8015f04:	0801b3e8 	.word	0x0801b3e8

08015f08 <rcutils_is_directory>:
 8015f08:	2000      	movs	r0, #0
 8015f0a:	4770      	bx	lr

08015f0c <rcutils_join_path>:
 8015f0c:	b082      	sub	sp, #8
 8015f0e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8015f12:	2000      	movs	r0, #0
 8015f14:	b002      	add	sp, #8
 8015f16:	4770      	bx	lr

08015f18 <rcutils_to_native_path>:
 8015f18:	b084      	sub	sp, #16
 8015f1a:	a801      	add	r0, sp, #4
 8015f1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8015f20:	b004      	add	sp, #16
 8015f22:	2000      	movs	r0, #0
 8015f24:	4770      	bx	lr
 8015f26:	bf00      	nop

08015f28 <rcutils_format_string_limit>:
 8015f28:	b40f      	push	{r0, r1, r2, r3}
 8015f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f2c:	b083      	sub	sp, #12
 8015f2e:	ac08      	add	r4, sp, #32
 8015f30:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015f32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015f36:	b34e      	cbz	r6, 8015f8c <rcutils_format_string_limit+0x64>
 8015f38:	a808      	add	r0, sp, #32
 8015f3a:	f7f7 f9e3 	bl	800d304 <rcutils_allocator_is_valid>
 8015f3e:	b328      	cbz	r0, 8015f8c <rcutils_format_string_limit+0x64>
 8015f40:	2100      	movs	r1, #0
 8015f42:	ab0f      	add	r3, sp, #60	@ 0x3c
 8015f44:	4632      	mov	r2, r6
 8015f46:	4608      	mov	r0, r1
 8015f48:	e9cd 3300 	strd	r3, r3, [sp]
 8015f4c:	f000 f8f4 	bl	8016138 <rcutils_vsnprintf>
 8015f50:	1c43      	adds	r3, r0, #1
 8015f52:	4605      	mov	r5, r0
 8015f54:	d01a      	beq.n	8015f8c <rcutils_format_string_limit+0x64>
 8015f56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015f58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015f5a:	1c47      	adds	r7, r0, #1
 8015f5c:	429f      	cmp	r7, r3
 8015f5e:	bf84      	itt	hi
 8015f60:	461f      	movhi	r7, r3
 8015f62:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8015f66:	4638      	mov	r0, r7
 8015f68:	9b08      	ldr	r3, [sp, #32]
 8015f6a:	4798      	blx	r3
 8015f6c:	4604      	mov	r4, r0
 8015f6e:	b168      	cbz	r0, 8015f8c <rcutils_format_string_limit+0x64>
 8015f70:	9b01      	ldr	r3, [sp, #4]
 8015f72:	4632      	mov	r2, r6
 8015f74:	4639      	mov	r1, r7
 8015f76:	f000 f8df 	bl	8016138 <rcutils_vsnprintf>
 8015f7a:	2800      	cmp	r0, #0
 8015f7c:	db02      	blt.n	8015f84 <rcutils_format_string_limit+0x5c>
 8015f7e:	2300      	movs	r3, #0
 8015f80:	5563      	strb	r3, [r4, r5]
 8015f82:	e004      	b.n	8015f8e <rcutils_format_string_limit+0x66>
 8015f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f86:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015f88:	4620      	mov	r0, r4
 8015f8a:	4798      	blx	r3
 8015f8c:	2400      	movs	r4, #0
 8015f8e:	4620      	mov	r0, r4
 8015f90:	b003      	add	sp, #12
 8015f92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015f96:	b004      	add	sp, #16
 8015f98:	4770      	bx	lr
 8015f9a:	bf00      	nop

08015f9c <rcutils_repl_str>:
 8015f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fa0:	ed2d 8b02 	vpush	{d8}
 8015fa4:	b087      	sub	sp, #28
 8015fa6:	4680      	mov	r8, r0
 8015fa8:	4608      	mov	r0, r1
 8015faa:	f8cd 8004 	str.w	r8, [sp, #4]
 8015fae:	ee08 2a10 	vmov	s16, r2
 8015fb2:	468a      	mov	sl, r1
 8015fb4:	4699      	mov	r9, r3
 8015fb6:	f7ea f93d 	bl	8000234 <strlen>
 8015fba:	2600      	movs	r6, #0
 8015fbc:	4647      	mov	r7, r8
 8015fbe:	9002      	str	r0, [sp, #8]
 8015fc0:	46b3      	mov	fp, r6
 8015fc2:	2510      	movs	r5, #16
 8015fc4:	46b0      	mov	r8, r6
 8015fc6:	e01d      	b.n	8016004 <rcutils_repl_str+0x68>
 8015fc8:	f10b 0b01 	add.w	fp, fp, #1
 8015fcc:	455e      	cmp	r6, fp
 8015fce:	d211      	bcs.n	8015ff4 <rcutils_repl_str+0x58>
 8015fd0:	442e      	add	r6, r5
 8015fd2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015fd6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8015fda:	00b1      	lsls	r1, r6, #2
 8015fdc:	4798      	blx	r3
 8015fde:	2800      	cmp	r0, #0
 8015fe0:	f000 8088 	beq.w	80160f4 <rcutils_repl_str+0x158>
 8015fe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015fe8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8015fec:	4680      	mov	r8, r0
 8015fee:	bf28      	it	cs
 8015ff0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8015ff4:	9a01      	ldr	r2, [sp, #4]
 8015ff6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8015ffa:	1aa2      	subs	r2, r4, r2
 8015ffc:	f843 2c04 	str.w	r2, [r3, #-4]
 8016000:	9b02      	ldr	r3, [sp, #8]
 8016002:	18e7      	adds	r7, r4, r3
 8016004:	4651      	mov	r1, sl
 8016006:	4638      	mov	r0, r7
 8016008:	f003 f84d 	bl	80190a6 <strstr>
 801600c:	4604      	mov	r4, r0
 801600e:	4640      	mov	r0, r8
 8016010:	2c00      	cmp	r4, #0
 8016012:	d1d9      	bne.n	8015fc8 <rcutils_repl_str+0x2c>
 8016014:	46b8      	mov	r8, r7
 8016016:	4607      	mov	r7, r0
 8016018:	4640      	mov	r0, r8
 801601a:	f7ea f90b 	bl	8000234 <strlen>
 801601e:	9b01      	ldr	r3, [sp, #4]
 8016020:	eba8 0303 	sub.w	r3, r8, r3
 8016024:	181c      	adds	r4, r3, r0
 8016026:	9404      	str	r4, [sp, #16]
 8016028:	f1bb 0f00 	cmp.w	fp, #0
 801602c:	d04a      	beq.n	80160c4 <rcutils_repl_str+0x128>
 801602e:	ee18 0a10 	vmov	r0, s16
 8016032:	f7ea f8ff 	bl	8000234 <strlen>
 8016036:	9b02      	ldr	r3, [sp, #8]
 8016038:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801603c:	1ac3      	subs	r3, r0, r3
 801603e:	fb0b 4303 	mla	r3, fp, r3, r4
 8016042:	461a      	mov	r2, r3
 8016044:	9305      	str	r3, [sp, #20]
 8016046:	4606      	mov	r6, r0
 8016048:	f8d9 3000 	ldr.w	r3, [r9]
 801604c:	1c50      	adds	r0, r2, #1
 801604e:	4798      	blx	r3
 8016050:	9003      	str	r0, [sp, #12]
 8016052:	2800      	cmp	r0, #0
 8016054:	d04f      	beq.n	80160f6 <rcutils_repl_str+0x15a>
 8016056:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801605a:	683a      	ldr	r2, [r7, #0]
 801605c:	4641      	mov	r1, r8
 801605e:	f003 f8c4 	bl	80191ea <memcpy>
 8016062:	683d      	ldr	r5, [r7, #0]
 8016064:	9b03      	ldr	r3, [sp, #12]
 8016066:	9701      	str	r7, [sp, #4]
 8016068:	46ba      	mov	sl, r7
 801606a:	441d      	add	r5, r3
 801606c:	9f02      	ldr	r7, [sp, #8]
 801606e:	f8cd 9008 	str.w	r9, [sp, #8]
 8016072:	2401      	movs	r4, #1
 8016074:	46d1      	mov	r9, sl
 8016076:	ee18 aa10 	vmov	sl, s16
 801607a:	e00a      	b.n	8016092 <rcutils_repl_str+0xf6>
 801607c:	f8d9 5000 	ldr.w	r5, [r9]
 8016080:	1aaa      	subs	r2, r5, r2
 8016082:	1885      	adds	r5, r0, r2
 8016084:	f003 f8b1 	bl	80191ea <memcpy>
 8016088:	45a3      	cmp	fp, r4
 801608a:	f104 0201 	add.w	r2, r4, #1
 801608e:	d935      	bls.n	80160fc <rcutils_repl_str+0x160>
 8016090:	4614      	mov	r4, r2
 8016092:	4632      	mov	r2, r6
 8016094:	4651      	mov	r1, sl
 8016096:	4628      	mov	r0, r5
 8016098:	f003 f8a7 	bl	80191ea <memcpy>
 801609c:	f859 2b04 	ldr.w	r2, [r9], #4
 80160a0:	45a3      	cmp	fp, r4
 80160a2:	443a      	add	r2, r7
 80160a4:	eb05 0006 	add.w	r0, r5, r6
 80160a8:	eb08 0102 	add.w	r1, r8, r2
 80160ac:	d1e6      	bne.n	801607c <rcutils_repl_str+0xe0>
 80160ae:	9b04      	ldr	r3, [sp, #16]
 80160b0:	1a9a      	subs	r2, r3, r2
 80160b2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80160b6:	f003 f898 	bl	80191ea <memcpy>
 80160ba:	9a03      	ldr	r2, [sp, #12]
 80160bc:	9905      	ldr	r1, [sp, #20]
 80160be:	2300      	movs	r3, #0
 80160c0:	5453      	strb	r3, [r2, r1]
 80160c2:	e00b      	b.n	80160dc <rcutils_repl_str+0x140>
 80160c4:	4620      	mov	r0, r4
 80160c6:	f8d9 3000 	ldr.w	r3, [r9]
 80160ca:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80160ce:	3001      	adds	r0, #1
 80160d0:	4798      	blx	r3
 80160d2:	9003      	str	r0, [sp, #12]
 80160d4:	b110      	cbz	r0, 80160dc <rcutils_repl_str+0x140>
 80160d6:	9901      	ldr	r1, [sp, #4]
 80160d8:	f003 f87f 	bl	80191da <strcpy>
 80160dc:	4638      	mov	r0, r7
 80160de:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80160e2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80160e6:	4798      	blx	r3
 80160e8:	9803      	ldr	r0, [sp, #12]
 80160ea:	b007      	add	sp, #28
 80160ec:	ecbd 8b02 	vpop	{d8}
 80160f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160f4:	4647      	mov	r7, r8
 80160f6:	2300      	movs	r3, #0
 80160f8:	9303      	str	r3, [sp, #12]
 80160fa:	e7ef      	b.n	80160dc <rcutils_repl_str+0x140>
 80160fc:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016100:	e7db      	b.n	80160ba <rcutils_repl_str+0x11e>
 8016102:	bf00      	nop

08016104 <rcutils_snprintf>:
 8016104:	b40c      	push	{r2, r3}
 8016106:	b530      	push	{r4, r5, lr}
 8016108:	b083      	sub	sp, #12
 801610a:	ab06      	add	r3, sp, #24
 801610c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016110:	9301      	str	r3, [sp, #4]
 8016112:	b152      	cbz	r2, 801612a <rcutils_snprintf+0x26>
 8016114:	b138      	cbz	r0, 8016126 <rcutils_snprintf+0x22>
 8016116:	b141      	cbz	r1, 801612a <rcutils_snprintf+0x26>
 8016118:	f002 fed2 	bl	8018ec0 <vsniprintf>
 801611c:	b003      	add	sp, #12
 801611e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016122:	b002      	add	sp, #8
 8016124:	4770      	bx	lr
 8016126:	2900      	cmp	r1, #0
 8016128:	d0f6      	beq.n	8016118 <rcutils_snprintf+0x14>
 801612a:	f003 f829 	bl	8019180 <__errno>
 801612e:	2316      	movs	r3, #22
 8016130:	6003      	str	r3, [r0, #0]
 8016132:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016136:	e7f1      	b.n	801611c <rcutils_snprintf+0x18>

08016138 <rcutils_vsnprintf>:
 8016138:	b570      	push	{r4, r5, r6, lr}
 801613a:	b13a      	cbz	r2, 801614c <rcutils_vsnprintf+0x14>
 801613c:	b120      	cbz	r0, 8016148 <rcutils_vsnprintf+0x10>
 801613e:	b129      	cbz	r1, 801614c <rcutils_vsnprintf+0x14>
 8016140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016144:	f002 bebc 	b.w	8018ec0 <vsniprintf>
 8016148:	2900      	cmp	r1, #0
 801614a:	d0f9      	beq.n	8016140 <rcutils_vsnprintf+0x8>
 801614c:	f003 f818 	bl	8019180 <__errno>
 8016150:	2316      	movs	r3, #22
 8016152:	6003      	str	r3, [r0, #0]
 8016154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016158:	bd70      	pop	{r4, r5, r6, pc}
 801615a:	bf00      	nop

0801615c <rcutils_strdup>:
 801615c:	b084      	sub	sp, #16
 801615e:	b570      	push	{r4, r5, r6, lr}
 8016160:	b082      	sub	sp, #8
 8016162:	ac07      	add	r4, sp, #28
 8016164:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016168:	4605      	mov	r5, r0
 801616a:	b1b0      	cbz	r0, 801619a <rcutils_strdup+0x3e>
 801616c:	f7ea f862 	bl	8000234 <strlen>
 8016170:	1c42      	adds	r2, r0, #1
 8016172:	9b07      	ldr	r3, [sp, #28]
 8016174:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016176:	9201      	str	r2, [sp, #4]
 8016178:	4606      	mov	r6, r0
 801617a:	4610      	mov	r0, r2
 801617c:	4798      	blx	r3
 801617e:	4604      	mov	r4, r0
 8016180:	b128      	cbz	r0, 801618e <rcutils_strdup+0x32>
 8016182:	9a01      	ldr	r2, [sp, #4]
 8016184:	4629      	mov	r1, r5
 8016186:	f003 f830 	bl	80191ea <memcpy>
 801618a:	2300      	movs	r3, #0
 801618c:	55a3      	strb	r3, [r4, r6]
 801618e:	4620      	mov	r0, r4
 8016190:	b002      	add	sp, #8
 8016192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016196:	b004      	add	sp, #16
 8016198:	4770      	bx	lr
 801619a:	4604      	mov	r4, r0
 801619c:	e7f7      	b.n	801618e <rcutils_strdup+0x32>
 801619e:	bf00      	nop

080161a0 <rcutils_strndup>:
 80161a0:	b082      	sub	sp, #8
 80161a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161a4:	ac06      	add	r4, sp, #24
 80161a6:	e884 000c 	stmia.w	r4, {r2, r3}
 80161aa:	4605      	mov	r5, r0
 80161ac:	b188      	cbz	r0, 80161d2 <rcutils_strndup+0x32>
 80161ae:	1c4f      	adds	r7, r1, #1
 80161b0:	460e      	mov	r6, r1
 80161b2:	4638      	mov	r0, r7
 80161b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80161b6:	4790      	blx	r2
 80161b8:	4604      	mov	r4, r0
 80161ba:	b128      	cbz	r0, 80161c8 <rcutils_strndup+0x28>
 80161bc:	463a      	mov	r2, r7
 80161be:	4629      	mov	r1, r5
 80161c0:	f003 f813 	bl	80191ea <memcpy>
 80161c4:	2300      	movs	r3, #0
 80161c6:	55a3      	strb	r3, [r4, r6]
 80161c8:	4620      	mov	r0, r4
 80161ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80161ce:	b002      	add	sp, #8
 80161d0:	4770      	bx	lr
 80161d2:	4604      	mov	r4, r0
 80161d4:	e7f8      	b.n	80161c8 <rcutils_strndup+0x28>
 80161d6:	bf00      	nop

080161d8 <rcutils_get_zero_initialized_string_map>:
 80161d8:	4b01      	ldr	r3, [pc, #4]	@ (80161e0 <rcutils_get_zero_initialized_string_map+0x8>)
 80161da:	2000      	movs	r0, #0
 80161dc:	6018      	str	r0, [r3, #0]
 80161de:	4770      	bx	lr
 80161e0:	2000b5e8 	.word	0x2000b5e8

080161e4 <rcutils_string_map_reserve>:
 80161e4:	2800      	cmp	r0, #0
 80161e6:	d05f      	beq.n	80162a8 <rcutils_string_map_reserve+0xc4>
 80161e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161ec:	460c      	mov	r4, r1
 80161ee:	6801      	ldr	r1, [r0, #0]
 80161f0:	b082      	sub	sp, #8
 80161f2:	4605      	mov	r5, r0
 80161f4:	b129      	cbz	r1, 8016202 <rcutils_string_map_reserve+0x1e>
 80161f6:	68cb      	ldr	r3, [r1, #12]
 80161f8:	42a3      	cmp	r3, r4
 80161fa:	d906      	bls.n	801620a <rcutils_string_map_reserve+0x26>
 80161fc:	461c      	mov	r4, r3
 80161fe:	2900      	cmp	r1, #0
 8016200:	d1f9      	bne.n	80161f6 <rcutils_string_map_reserve+0x12>
 8016202:	201f      	movs	r0, #31
 8016204:	b002      	add	sp, #8
 8016206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801620a:	688b      	ldr	r3, [r1, #8]
 801620c:	42a3      	cmp	r3, r4
 801620e:	d047      	beq.n	80162a0 <rcutils_string_map_reserve+0xbc>
 8016210:	6a0e      	ldr	r6, [r1, #32]
 8016212:	2c00      	cmp	r4, #0
 8016214:	d034      	beq.n	8016280 <rcutils_string_map_reserve+0x9c>
 8016216:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801621a:	d243      	bcs.n	80162a4 <rcutils_string_map_reserve+0xc0>
 801621c:	00a7      	lsls	r7, r4, #2
 801621e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8016222:	6808      	ldr	r0, [r1, #0]
 8016224:	4632      	mov	r2, r6
 8016226:	4639      	mov	r1, r7
 8016228:	47c0      	blx	r8
 801622a:	2800      	cmp	r0, #0
 801622c:	d03a      	beq.n	80162a4 <rcutils_string_map_reserve+0xc0>
 801622e:	682b      	ldr	r3, [r5, #0]
 8016230:	4632      	mov	r2, r6
 8016232:	6018      	str	r0, [r3, #0]
 8016234:	4639      	mov	r1, r7
 8016236:	6858      	ldr	r0, [r3, #4]
 8016238:	47c0      	blx	r8
 801623a:	2800      	cmp	r0, #0
 801623c:	d032      	beq.n	80162a4 <rcutils_string_map_reserve+0xc0>
 801623e:	682d      	ldr	r5, [r5, #0]
 8016240:	68ab      	ldr	r3, [r5, #8]
 8016242:	6068      	str	r0, [r5, #4]
 8016244:	42a3      	cmp	r3, r4
 8016246:	d226      	bcs.n	8016296 <rcutils_string_map_reserve+0xb2>
 8016248:	682a      	ldr	r2, [r5, #0]
 801624a:	eb00 0c07 	add.w	ip, r0, r7
 801624e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8016252:	45e6      	cmp	lr, ip
 8016254:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8016258:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801625c:	d203      	bcs.n	8016266 <rcutils_string_map_reserve+0x82>
 801625e:	eb02 0c07 	add.w	ip, r2, r7
 8016262:	4566      	cmp	r6, ip
 8016264:	d322      	bcc.n	80162ac <rcutils_string_map_reserve+0xc8>
 8016266:	1ae3      	subs	r3, r4, r3
 8016268:	009a      	lsls	r2, r3, #2
 801626a:	4670      	mov	r0, lr
 801626c:	2100      	movs	r1, #0
 801626e:	9201      	str	r2, [sp, #4]
 8016270:	f002 fef2 	bl	8019058 <memset>
 8016274:	9a01      	ldr	r2, [sp, #4]
 8016276:	2100      	movs	r1, #0
 8016278:	4630      	mov	r0, r6
 801627a:	f002 feed 	bl	8019058 <memset>
 801627e:	e00a      	b.n	8016296 <rcutils_string_map_reserve+0xb2>
 8016280:	694f      	ldr	r7, [r1, #20]
 8016282:	6808      	ldr	r0, [r1, #0]
 8016284:	4631      	mov	r1, r6
 8016286:	47b8      	blx	r7
 8016288:	682b      	ldr	r3, [r5, #0]
 801628a:	4631      	mov	r1, r6
 801628c:	6858      	ldr	r0, [r3, #4]
 801628e:	601c      	str	r4, [r3, #0]
 8016290:	47b8      	blx	r7
 8016292:	682d      	ldr	r5, [r5, #0]
 8016294:	606c      	str	r4, [r5, #4]
 8016296:	2000      	movs	r0, #0
 8016298:	60ac      	str	r4, [r5, #8]
 801629a:	b002      	add	sp, #8
 801629c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162a0:	2000      	movs	r0, #0
 80162a2:	e7af      	b.n	8016204 <rcutils_string_map_reserve+0x20>
 80162a4:	200a      	movs	r0, #10
 80162a6:	e7ad      	b.n	8016204 <rcutils_string_map_reserve+0x20>
 80162a8:	200b      	movs	r0, #11
 80162aa:	4770      	bx	lr
 80162ac:	1f0b      	subs	r3, r1, #4
 80162ae:	4418      	add	r0, r3
 80162b0:	4413      	add	r3, r2
 80162b2:	3a04      	subs	r2, #4
 80162b4:	4417      	add	r7, r2
 80162b6:	2200      	movs	r2, #0
 80162b8:	f843 2f04 	str.w	r2, [r3, #4]!
 80162bc:	42bb      	cmp	r3, r7
 80162be:	f840 2f04 	str.w	r2, [r0, #4]!
 80162c2:	d1f9      	bne.n	80162b8 <rcutils_string_map_reserve+0xd4>
 80162c4:	e7e7      	b.n	8016296 <rcutils_string_map_reserve+0xb2>
 80162c6:	bf00      	nop

080162c8 <rcutils_string_map_init>:
 80162c8:	b082      	sub	sp, #8
 80162ca:	b570      	push	{r4, r5, r6, lr}
 80162cc:	ac04      	add	r4, sp, #16
 80162ce:	e884 000c 	stmia.w	r4, {r2, r3}
 80162d2:	b380      	cbz	r0, 8016336 <rcutils_string_map_init+0x6e>
 80162d4:	6806      	ldr	r6, [r0, #0]
 80162d6:	4604      	mov	r4, r0
 80162d8:	b12e      	cbz	r6, 80162e6 <rcutils_string_map_init+0x1e>
 80162da:	251e      	movs	r5, #30
 80162dc:	4628      	mov	r0, r5
 80162de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162e2:	b002      	add	sp, #8
 80162e4:	4770      	bx	lr
 80162e6:	a804      	add	r0, sp, #16
 80162e8:	460d      	mov	r5, r1
 80162ea:	f7f7 f80b 	bl	800d304 <rcutils_allocator_is_valid>
 80162ee:	b310      	cbz	r0, 8016336 <rcutils_string_map_init+0x6e>
 80162f0:	9b04      	ldr	r3, [sp, #16]
 80162f2:	9908      	ldr	r1, [sp, #32]
 80162f4:	2024      	movs	r0, #36	@ 0x24
 80162f6:	4798      	blx	r3
 80162f8:	6020      	str	r0, [r4, #0]
 80162fa:	b310      	cbz	r0, 8016342 <rcutils_string_map_init+0x7a>
 80162fc:	f10d 0e10 	add.w	lr, sp, #16
 8016300:	e9c0 6600 	strd	r6, r6, [r0]
 8016304:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8016308:	f100 0c10 	add.w	ip, r0, #16
 801630c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016310:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016314:	f8de 3000 	ldr.w	r3, [lr]
 8016318:	f8cc 3000 	str.w	r3, [ip]
 801631c:	4629      	mov	r1, r5
 801631e:	4620      	mov	r0, r4
 8016320:	f7ff ff60 	bl	80161e4 <rcutils_string_map_reserve>
 8016324:	4605      	mov	r5, r0
 8016326:	2800      	cmp	r0, #0
 8016328:	d0d8      	beq.n	80162dc <rcutils_string_map_init+0x14>
 801632a:	9b05      	ldr	r3, [sp, #20]
 801632c:	9908      	ldr	r1, [sp, #32]
 801632e:	6820      	ldr	r0, [r4, #0]
 8016330:	4798      	blx	r3
 8016332:	6026      	str	r6, [r4, #0]
 8016334:	e7d2      	b.n	80162dc <rcutils_string_map_init+0x14>
 8016336:	250b      	movs	r5, #11
 8016338:	4628      	mov	r0, r5
 801633a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801633e:	b002      	add	sp, #8
 8016340:	4770      	bx	lr
 8016342:	250a      	movs	r5, #10
 8016344:	e7ca      	b.n	80162dc <rcutils_string_map_init+0x14>
 8016346:	bf00      	nop

08016348 <rcutils_string_map_fini>:
 8016348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801634c:	b082      	sub	sp, #8
 801634e:	2800      	cmp	r0, #0
 8016350:	d03a      	beq.n	80163c8 <rcutils_string_map_fini+0x80>
 8016352:	6804      	ldr	r4, [r0, #0]
 8016354:	4606      	mov	r6, r0
 8016356:	2c00      	cmp	r4, #0
 8016358:	d032      	beq.n	80163c0 <rcutils_string_map_fini+0x78>
 801635a:	68a3      	ldr	r3, [r4, #8]
 801635c:	b32b      	cbz	r3, 80163aa <rcutils_string_map_fini+0x62>
 801635e:	2500      	movs	r5, #0
 8016360:	6822      	ldr	r2, [r4, #0]
 8016362:	462f      	mov	r7, r5
 8016364:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016368:	b1e0      	cbz	r0, 80163a4 <rcutils_string_map_fini+0x5c>
 801636a:	6a21      	ldr	r1, [r4, #32]
 801636c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8016370:	9101      	str	r1, [sp, #4]
 8016372:	47c0      	blx	r8
 8016374:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016378:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801637c:	9901      	ldr	r1, [sp, #4]
 801637e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016382:	47c0      	blx	r8
 8016384:	68e3      	ldr	r3, [r4, #12]
 8016386:	6862      	ldr	r2, [r4, #4]
 8016388:	3b01      	subs	r3, #1
 801638a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801638e:	60e3      	str	r3, [r4, #12]
 8016390:	6834      	ldr	r4, [r6, #0]
 8016392:	68a3      	ldr	r3, [r4, #8]
 8016394:	3501      	adds	r5, #1
 8016396:	429d      	cmp	r5, r3
 8016398:	d207      	bcs.n	80163aa <rcutils_string_map_fini+0x62>
 801639a:	6822      	ldr	r2, [r4, #0]
 801639c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80163a0:	2800      	cmp	r0, #0
 80163a2:	d1e2      	bne.n	801636a <rcutils_string_map_fini+0x22>
 80163a4:	3501      	adds	r5, #1
 80163a6:	429d      	cmp	r5, r3
 80163a8:	d3dc      	bcc.n	8016364 <rcutils_string_map_fini+0x1c>
 80163aa:	2100      	movs	r1, #0
 80163ac:	4630      	mov	r0, r6
 80163ae:	f7ff ff19 	bl	80161e4 <rcutils_string_map_reserve>
 80163b2:	4604      	mov	r4, r0
 80163b4:	b920      	cbnz	r0, 80163c0 <rcutils_string_map_fini+0x78>
 80163b6:	6830      	ldr	r0, [r6, #0]
 80163b8:	6943      	ldr	r3, [r0, #20]
 80163ba:	6a01      	ldr	r1, [r0, #32]
 80163bc:	4798      	blx	r3
 80163be:	6034      	str	r4, [r6, #0]
 80163c0:	4620      	mov	r0, r4
 80163c2:	b002      	add	sp, #8
 80163c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163c8:	240b      	movs	r4, #11
 80163ca:	4620      	mov	r0, r4
 80163cc:	b002      	add	sp, #8
 80163ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163d2:	bf00      	nop

080163d4 <rcutils_string_map_getn>:
 80163d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163d8:	b300      	cbz	r0, 801641c <rcutils_string_map_getn+0x48>
 80163da:	6807      	ldr	r7, [r0, #0]
 80163dc:	b1ff      	cbz	r7, 801641e <rcutils_string_map_getn+0x4a>
 80163de:	4688      	mov	r8, r1
 80163e0:	b1e1      	cbz	r1, 801641c <rcutils_string_map_getn+0x48>
 80163e2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80163e6:	683e      	ldr	r6, [r7, #0]
 80163e8:	f1ba 0f00 	cmp.w	sl, #0
 80163ec:	d016      	beq.n	801641c <rcutils_string_map_getn+0x48>
 80163ee:	4691      	mov	r9, r2
 80163f0:	3e04      	subs	r6, #4
 80163f2:	2400      	movs	r4, #0
 80163f4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80163f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80163fc:	4628      	mov	r0, r5
 80163fe:	3401      	adds	r4, #1
 8016400:	b155      	cbz	r5, 8016418 <rcutils_string_map_getn+0x44>
 8016402:	f7e9 ff17 	bl	8000234 <strlen>
 8016406:	4548      	cmp	r0, r9
 8016408:	4602      	mov	r2, r0
 801640a:	4629      	mov	r1, r5
 801640c:	bf38      	it	cc
 801640e:	464a      	movcc	r2, r9
 8016410:	4640      	mov	r0, r8
 8016412:	f002 fe36 	bl	8019082 <strncmp>
 8016416:	b128      	cbz	r0, 8016424 <rcutils_string_map_getn+0x50>
 8016418:	45a2      	cmp	sl, r4
 801641a:	d1eb      	bne.n	80163f4 <rcutils_string_map_getn+0x20>
 801641c:	2700      	movs	r7, #0
 801641e:	4638      	mov	r0, r7
 8016420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	f853 700b 	ldr.w	r7, [r3, fp]
 801642a:	4638      	mov	r0, r7
 801642c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016430 <rmw_get_zero_initialized_context>:
 8016430:	b510      	push	{r4, lr}
 8016432:	4604      	mov	r4, r0
 8016434:	3010      	adds	r0, #16
 8016436:	f7f6 fff7 	bl	800d428 <rmw_get_zero_initialized_init_options>
 801643a:	2300      	movs	r3, #0
 801643c:	2000      	movs	r0, #0
 801643e:	2100      	movs	r1, #0
 8016440:	e9c4 0100 	strd	r0, r1, [r4]
 8016444:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8016448:	60a3      	str	r3, [r4, #8]
 801644a:	4620      	mov	r0, r4
 801644c:	bd10      	pop	{r4, pc}
 801644e:	bf00      	nop

08016450 <rmw_time_equal>:
 8016450:	b4f0      	push	{r4, r5, r6, r7}
 8016452:	b084      	sub	sp, #16
 8016454:	ac04      	add	r4, sp, #16
 8016456:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801645a:	4603      	mov	r3, r0
 801645c:	4924      	ldr	r1, [pc, #144]	@ (80164f0 <rmw_time_equal+0xa0>)
 801645e:	9e03      	ldr	r6, [sp, #12]
 8016460:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016464:	2202      	movs	r2, #2
 8016466:	4299      	cmp	r1, r3
 8016468:	41aa      	sbcs	r2, r5
 801646a:	d330      	bcc.n	80164ce <rmw_time_equal+0x7e>
 801646c:	4c21      	ldr	r4, [pc, #132]	@ (80164f4 <rmw_time_equal+0xa4>)
 801646e:	fba3 3204 	umull	r3, r2, r3, r4
 8016472:	fb04 2205 	mla	r2, r4, r5, r2
 8016476:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801647a:	43dd      	mvns	r5, r3
 801647c:	1a8c      	subs	r4, r1, r2
 801647e:	4285      	cmp	r5, r0
 8016480:	41b4      	sbcs	r4, r6
 8016482:	d332      	bcc.n	80164ea <rmw_time_equal+0x9a>
 8016484:	eb10 0c03 	adds.w	ip, r0, r3
 8016488:	eb42 0106 	adc.w	r1, r2, r6
 801648c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8016490:	4817      	ldr	r0, [pc, #92]	@ (80164f0 <rmw_time_equal+0xa0>)
 8016492:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8016494:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016496:	2202      	movs	r2, #2
 8016498:	4298      	cmp	r0, r3
 801649a:	41b2      	sbcs	r2, r6
 801649c:	d31c      	bcc.n	80164d8 <rmw_time_equal+0x88>
 801649e:	4c15      	ldr	r4, [pc, #84]	@ (80164f4 <rmw_time_equal+0xa4>)
 80164a0:	fba3 3204 	umull	r3, r2, r3, r4
 80164a4:	fb04 2206 	mla	r2, r4, r6, r2
 80164a8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80164ac:	43de      	mvns	r6, r3
 80164ae:	1a84      	subs	r4, r0, r2
 80164b0:	42ae      	cmp	r6, r5
 80164b2:	41bc      	sbcs	r4, r7
 80164b4:	d315      	bcc.n	80164e2 <rmw_time_equal+0x92>
 80164b6:	195b      	adds	r3, r3, r5
 80164b8:	eb42 0207 	adc.w	r2, r2, r7
 80164bc:	428a      	cmp	r2, r1
 80164be:	bf08      	it	eq
 80164c0:	4563      	cmpeq	r3, ip
 80164c2:	bf0c      	ite	eq
 80164c4:	2001      	moveq	r0, #1
 80164c6:	2000      	movne	r0, #0
 80164c8:	b004      	add	sp, #16
 80164ca:	bcf0      	pop	{r4, r5, r6, r7}
 80164cc:	4770      	bx	lr
 80164ce:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80164d2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80164d6:	e7d9      	b.n	801648c <rmw_time_equal+0x3c>
 80164d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80164dc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80164e0:	e7ec      	b.n	80164bc <rmw_time_equal+0x6c>
 80164e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80164e6:	4602      	mov	r2, r0
 80164e8:	e7e8      	b.n	80164bc <rmw_time_equal+0x6c>
 80164ea:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80164ee:	e7cd      	b.n	801648c <rmw_time_equal+0x3c>
 80164f0:	25c17d04 	.word	0x25c17d04
 80164f4:	3b9aca00 	.word	0x3b9aca00

080164f8 <rmw_time_total_nsec>:
 80164f8:	b470      	push	{r4, r5, r6}
 80164fa:	b085      	sub	sp, #20
 80164fc:	ac04      	add	r4, sp, #16
 80164fe:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016502:	4603      	mov	r3, r0
 8016504:	4912      	ldr	r1, [pc, #72]	@ (8016550 <rmw_time_total_nsec+0x58>)
 8016506:	9e03      	ldr	r6, [sp, #12]
 8016508:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801650c:	2202      	movs	r2, #2
 801650e:	4299      	cmp	r1, r3
 8016510:	41aa      	sbcs	r2, r5
 8016512:	d311      	bcc.n	8016538 <rmw_time_total_nsec+0x40>
 8016514:	4c0f      	ldr	r4, [pc, #60]	@ (8016554 <rmw_time_total_nsec+0x5c>)
 8016516:	fba3 3204 	umull	r3, r2, r3, r4
 801651a:	fb04 2205 	mla	r2, r4, r5, r2
 801651e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016522:	43dd      	mvns	r5, r3
 8016524:	1a8c      	subs	r4, r1, r2
 8016526:	4285      	cmp	r5, r0
 8016528:	41b4      	sbcs	r4, r6
 801652a:	d30c      	bcc.n	8016546 <rmw_time_total_nsec+0x4e>
 801652c:	1818      	adds	r0, r3, r0
 801652e:	eb42 0106 	adc.w	r1, r2, r6
 8016532:	b005      	add	sp, #20
 8016534:	bc70      	pop	{r4, r5, r6}
 8016536:	4770      	bx	lr
 8016538:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801653c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016540:	b005      	add	sp, #20
 8016542:	bc70      	pop	{r4, r5, r6}
 8016544:	4770      	bx	lr
 8016546:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801654a:	b005      	add	sp, #20
 801654c:	bc70      	pop	{r4, r5, r6}
 801654e:	4770      	bx	lr
 8016550:	25c17d04 	.word	0x25c17d04
 8016554:	3b9aca00 	.word	0x3b9aca00

08016558 <rmw_get_zero_initialized_message_info>:
 8016558:	b510      	push	{r4, lr}
 801655a:	2240      	movs	r2, #64	@ 0x40
 801655c:	4604      	mov	r4, r0
 801655e:	2100      	movs	r1, #0
 8016560:	f002 fd7a 	bl	8019058 <memset>
 8016564:	4620      	mov	r0, r4
 8016566:	bd10      	pop	{r4, pc}

08016568 <rmw_validate_full_topic_name>:
 8016568:	2800      	cmp	r0, #0
 801656a:	d057      	beq.n	801661c <rmw_validate_full_topic_name+0xb4>
 801656c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016570:	460d      	mov	r5, r1
 8016572:	2900      	cmp	r1, #0
 8016574:	d054      	beq.n	8016620 <rmw_validate_full_topic_name+0xb8>
 8016576:	4616      	mov	r6, r2
 8016578:	4604      	mov	r4, r0
 801657a:	f7e9 fe5b 	bl	8000234 <strlen>
 801657e:	b148      	cbz	r0, 8016594 <rmw_validate_full_topic_name+0x2c>
 8016580:	7823      	ldrb	r3, [r4, #0]
 8016582:	2b2f      	cmp	r3, #47	@ 0x2f
 8016584:	d00d      	beq.n	80165a2 <rmw_validate_full_topic_name+0x3a>
 8016586:	2302      	movs	r3, #2
 8016588:	602b      	str	r3, [r5, #0]
 801658a:	b13e      	cbz	r6, 801659c <rmw_validate_full_topic_name+0x34>
 801658c:	2000      	movs	r0, #0
 801658e:	6030      	str	r0, [r6, #0]
 8016590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016594:	2301      	movs	r3, #1
 8016596:	602b      	str	r3, [r5, #0]
 8016598:	2e00      	cmp	r6, #0
 801659a:	d1f7      	bne.n	801658c <rmw_validate_full_topic_name+0x24>
 801659c:	2000      	movs	r0, #0
 801659e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165a2:	1e43      	subs	r3, r0, #1
 80165a4:	5ce2      	ldrb	r2, [r4, r3]
 80165a6:	2a2f      	cmp	r2, #47	@ 0x2f
 80165a8:	d03c      	beq.n	8016624 <rmw_validate_full_topic_name+0xbc>
 80165aa:	1e63      	subs	r3, r4, #1
 80165ac:	eb03 0800 	add.w	r8, r3, r0
 80165b0:	f1c4 0e01 	rsb	lr, r4, #1
 80165b4:	eb0e 0703 	add.w	r7, lr, r3
 80165b8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80165bc:	f021 0220 	bic.w	r2, r1, #32
 80165c0:	3a41      	subs	r2, #65	@ 0x41
 80165c2:	2a19      	cmp	r2, #25
 80165c4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80165c8:	d90b      	bls.n	80165e2 <rmw_validate_full_topic_name+0x7a>
 80165ca:	295f      	cmp	r1, #95	@ 0x5f
 80165cc:	d009      	beq.n	80165e2 <rmw_validate_full_topic_name+0x7a>
 80165ce:	f1bc 0f0a 	cmp.w	ip, #10
 80165d2:	d906      	bls.n	80165e2 <rmw_validate_full_topic_name+0x7a>
 80165d4:	2304      	movs	r3, #4
 80165d6:	602b      	str	r3, [r5, #0]
 80165d8:	2e00      	cmp	r6, #0
 80165da:	d0df      	beq.n	801659c <rmw_validate_full_topic_name+0x34>
 80165dc:	6037      	str	r7, [r6, #0]
 80165de:	2000      	movs	r0, #0
 80165e0:	e7d6      	b.n	8016590 <rmw_validate_full_topic_name+0x28>
 80165e2:	4543      	cmp	r3, r8
 80165e4:	d1e6      	bne.n	80165b4 <rmw_validate_full_topic_name+0x4c>
 80165e6:	4f1a      	ldr	r7, [pc, #104]	@ (8016650 <rmw_validate_full_topic_name+0xe8>)
 80165e8:	2301      	movs	r3, #1
 80165ea:	e004      	b.n	80165f6 <rmw_validate_full_topic_name+0x8e>
 80165ec:	4298      	cmp	r0, r3
 80165ee:	f104 0401 	add.w	r4, r4, #1
 80165f2:	d91c      	bls.n	801662e <rmw_validate_full_topic_name+0xc6>
 80165f4:	4613      	mov	r3, r2
 80165f6:	4298      	cmp	r0, r3
 80165f8:	f103 0201 	add.w	r2, r3, #1
 80165fc:	d0f6      	beq.n	80165ec <rmw_validate_full_topic_name+0x84>
 80165fe:	7821      	ldrb	r1, [r4, #0]
 8016600:	292f      	cmp	r1, #47	@ 0x2f
 8016602:	d1f3      	bne.n	80165ec <rmw_validate_full_topic_name+0x84>
 8016604:	7861      	ldrb	r1, [r4, #1]
 8016606:	292f      	cmp	r1, #47	@ 0x2f
 8016608:	d01c      	beq.n	8016644 <rmw_validate_full_topic_name+0xdc>
 801660a:	5dc9      	ldrb	r1, [r1, r7]
 801660c:	0749      	lsls	r1, r1, #29
 801660e:	d5ed      	bpl.n	80165ec <rmw_validate_full_topic_name+0x84>
 8016610:	2206      	movs	r2, #6
 8016612:	602a      	str	r2, [r5, #0]
 8016614:	2e00      	cmp	r6, #0
 8016616:	d0c1      	beq.n	801659c <rmw_validate_full_topic_name+0x34>
 8016618:	6033      	str	r3, [r6, #0]
 801661a:	e7bf      	b.n	801659c <rmw_validate_full_topic_name+0x34>
 801661c:	200b      	movs	r0, #11
 801661e:	4770      	bx	lr
 8016620:	200b      	movs	r0, #11
 8016622:	e7b5      	b.n	8016590 <rmw_validate_full_topic_name+0x28>
 8016624:	2203      	movs	r2, #3
 8016626:	602a      	str	r2, [r5, #0]
 8016628:	2e00      	cmp	r6, #0
 801662a:	d1f5      	bne.n	8016618 <rmw_validate_full_topic_name+0xb0>
 801662c:	e7b6      	b.n	801659c <rmw_validate_full_topic_name+0x34>
 801662e:	28f7      	cmp	r0, #247	@ 0xf7
 8016630:	d802      	bhi.n	8016638 <rmw_validate_full_topic_name+0xd0>
 8016632:	2000      	movs	r0, #0
 8016634:	6028      	str	r0, [r5, #0]
 8016636:	e7ab      	b.n	8016590 <rmw_validate_full_topic_name+0x28>
 8016638:	2307      	movs	r3, #7
 801663a:	602b      	str	r3, [r5, #0]
 801663c:	2e00      	cmp	r6, #0
 801663e:	d0ad      	beq.n	801659c <rmw_validate_full_topic_name+0x34>
 8016640:	23f6      	movs	r3, #246	@ 0xf6
 8016642:	e7e9      	b.n	8016618 <rmw_validate_full_topic_name+0xb0>
 8016644:	2205      	movs	r2, #5
 8016646:	602a      	str	r2, [r5, #0]
 8016648:	2e00      	cmp	r6, #0
 801664a:	d1e5      	bne.n	8016618 <rmw_validate_full_topic_name+0xb0>
 801664c:	e7a6      	b.n	801659c <rmw_validate_full_topic_name+0x34>
 801664e:	bf00      	nop
 8016650:	0801b8f2 	.word	0x0801b8f2

08016654 <rmw_validate_namespace_with_size>:
 8016654:	b340      	cbz	r0, 80166a8 <rmw_validate_namespace_with_size+0x54>
 8016656:	b570      	push	{r4, r5, r6, lr}
 8016658:	4614      	mov	r4, r2
 801665a:	b0c2      	sub	sp, #264	@ 0x108
 801665c:	b332      	cbz	r2, 80166ac <rmw_validate_namespace_with_size+0x58>
 801665e:	2901      	cmp	r1, #1
 8016660:	460d      	mov	r5, r1
 8016662:	461e      	mov	r6, r3
 8016664:	d102      	bne.n	801666c <rmw_validate_namespace_with_size+0x18>
 8016666:	7803      	ldrb	r3, [r0, #0]
 8016668:	2b2f      	cmp	r3, #47	@ 0x2f
 801666a:	d012      	beq.n	8016692 <rmw_validate_namespace_with_size+0x3e>
 801666c:	aa01      	add	r2, sp, #4
 801666e:	4669      	mov	r1, sp
 8016670:	f7ff ff7a 	bl	8016568 <rmw_validate_full_topic_name>
 8016674:	b978      	cbnz	r0, 8016696 <rmw_validate_namespace_with_size+0x42>
 8016676:	9b00      	ldr	r3, [sp, #0]
 8016678:	b14b      	cbz	r3, 801668e <rmw_validate_namespace_with_size+0x3a>
 801667a:	2b07      	cmp	r3, #7
 801667c:	d007      	beq.n	801668e <rmw_validate_namespace_with_size+0x3a>
 801667e:	1e5a      	subs	r2, r3, #1
 8016680:	2a05      	cmp	r2, #5
 8016682:	d82b      	bhi.n	80166dc <rmw_validate_namespace_with_size+0x88>
 8016684:	e8df f002 	tbb	[pc, r2]
 8016688:	1e212427 	.word	0x1e212427
 801668c:	141b      	.short	0x141b
 801668e:	2df5      	cmp	r5, #245	@ 0xf5
 8016690:	d803      	bhi.n	801669a <rmw_validate_namespace_with_size+0x46>
 8016692:	2000      	movs	r0, #0
 8016694:	6020      	str	r0, [r4, #0]
 8016696:	b042      	add	sp, #264	@ 0x108
 8016698:	bd70      	pop	{r4, r5, r6, pc}
 801669a:	2307      	movs	r3, #7
 801669c:	6023      	str	r3, [r4, #0]
 801669e:	2e00      	cmp	r6, #0
 80166a0:	d0f9      	beq.n	8016696 <rmw_validate_namespace_with_size+0x42>
 80166a2:	23f4      	movs	r3, #244	@ 0xf4
 80166a4:	6033      	str	r3, [r6, #0]
 80166a6:	e7f6      	b.n	8016696 <rmw_validate_namespace_with_size+0x42>
 80166a8:	200b      	movs	r0, #11
 80166aa:	4770      	bx	lr
 80166ac:	200b      	movs	r0, #11
 80166ae:	e7f2      	b.n	8016696 <rmw_validate_namespace_with_size+0x42>
 80166b0:	2306      	movs	r3, #6
 80166b2:	6023      	str	r3, [r4, #0]
 80166b4:	2e00      	cmp	r6, #0
 80166b6:	d0ee      	beq.n	8016696 <rmw_validate_namespace_with_size+0x42>
 80166b8:	9b01      	ldr	r3, [sp, #4]
 80166ba:	6033      	str	r3, [r6, #0]
 80166bc:	e7eb      	b.n	8016696 <rmw_validate_namespace_with_size+0x42>
 80166be:	2305      	movs	r3, #5
 80166c0:	6023      	str	r3, [r4, #0]
 80166c2:	e7f7      	b.n	80166b4 <rmw_validate_namespace_with_size+0x60>
 80166c4:	2304      	movs	r3, #4
 80166c6:	6023      	str	r3, [r4, #0]
 80166c8:	e7f4      	b.n	80166b4 <rmw_validate_namespace_with_size+0x60>
 80166ca:	2303      	movs	r3, #3
 80166cc:	6023      	str	r3, [r4, #0]
 80166ce:	e7f1      	b.n	80166b4 <rmw_validate_namespace_with_size+0x60>
 80166d0:	2302      	movs	r3, #2
 80166d2:	6023      	str	r3, [r4, #0]
 80166d4:	e7ee      	b.n	80166b4 <rmw_validate_namespace_with_size+0x60>
 80166d6:	2301      	movs	r3, #1
 80166d8:	6023      	str	r3, [r4, #0]
 80166da:	e7eb      	b.n	80166b4 <rmw_validate_namespace_with_size+0x60>
 80166dc:	4a03      	ldr	r2, [pc, #12]	@ (80166ec <rmw_validate_namespace_with_size+0x98>)
 80166de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80166e2:	a802      	add	r0, sp, #8
 80166e4:	f7ff fd0e 	bl	8016104 <rcutils_snprintf>
 80166e8:	2001      	movs	r0, #1
 80166ea:	e7d4      	b.n	8016696 <rmw_validate_namespace_with_size+0x42>
 80166ec:	0801b420 	.word	0x0801b420

080166f0 <rmw_validate_namespace>:
 80166f0:	b168      	cbz	r0, 801670e <rmw_validate_namespace+0x1e>
 80166f2:	b570      	push	{r4, r5, r6, lr}
 80166f4:	460d      	mov	r5, r1
 80166f6:	4616      	mov	r6, r2
 80166f8:	4604      	mov	r4, r0
 80166fa:	f7e9 fd9b 	bl	8000234 <strlen>
 80166fe:	4633      	mov	r3, r6
 8016700:	4601      	mov	r1, r0
 8016702:	462a      	mov	r2, r5
 8016704:	4620      	mov	r0, r4
 8016706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801670a:	f7ff bfa3 	b.w	8016654 <rmw_validate_namespace_with_size>
 801670e:	200b      	movs	r0, #11
 8016710:	4770      	bx	lr
 8016712:	bf00      	nop

08016714 <rmw_namespace_validation_result_string>:
 8016714:	2807      	cmp	r0, #7
 8016716:	bf9a      	itte	ls
 8016718:	4b02      	ldrls	r3, [pc, #8]	@ (8016724 <rmw_namespace_validation_result_string+0x10>)
 801671a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801671e:	4802      	ldrhi	r0, [pc, #8]	@ (8016728 <rmw_namespace_validation_result_string+0x14>)
 8016720:	4770      	bx	lr
 8016722:	bf00      	nop
 8016724:	0801b618 	.word	0x0801b618
 8016728:	0801b470 	.word	0x0801b470

0801672c <rmw_validate_node_name>:
 801672c:	2800      	cmp	r0, #0
 801672e:	d03b      	beq.n	80167a8 <rmw_validate_node_name+0x7c>
 8016730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016734:	460d      	mov	r5, r1
 8016736:	2900      	cmp	r1, #0
 8016738:	d038      	beq.n	80167ac <rmw_validate_node_name+0x80>
 801673a:	4616      	mov	r6, r2
 801673c:	4604      	mov	r4, r0
 801673e:	f7e9 fd79 	bl	8000234 <strlen>
 8016742:	b1e0      	cbz	r0, 801677e <rmw_validate_node_name+0x52>
 8016744:	1e63      	subs	r3, r4, #1
 8016746:	eb03 0800 	add.w	r8, r3, r0
 801674a:	f1c4 0101 	rsb	r1, r4, #1
 801674e:	18cf      	adds	r7, r1, r3
 8016750:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8016754:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8016758:	f02e 0c20 	bic.w	ip, lr, #32
 801675c:	2a09      	cmp	r2, #9
 801675e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8016762:	d914      	bls.n	801678e <rmw_validate_node_name+0x62>
 8016764:	f1bc 0f19 	cmp.w	ip, #25
 8016768:	d911      	bls.n	801678e <rmw_validate_node_name+0x62>
 801676a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801676e:	d00e      	beq.n	801678e <rmw_validate_node_name+0x62>
 8016770:	2302      	movs	r3, #2
 8016772:	602b      	str	r3, [r5, #0]
 8016774:	b106      	cbz	r6, 8016778 <rmw_validate_node_name+0x4c>
 8016776:	6037      	str	r7, [r6, #0]
 8016778:	2000      	movs	r0, #0
 801677a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801677e:	2301      	movs	r3, #1
 8016780:	602b      	str	r3, [r5, #0]
 8016782:	2e00      	cmp	r6, #0
 8016784:	d0f8      	beq.n	8016778 <rmw_validate_node_name+0x4c>
 8016786:	2000      	movs	r0, #0
 8016788:	6030      	str	r0, [r6, #0]
 801678a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801678e:	4543      	cmp	r3, r8
 8016790:	d1dd      	bne.n	801674e <rmw_validate_node_name+0x22>
 8016792:	7822      	ldrb	r2, [r4, #0]
 8016794:	4b0d      	ldr	r3, [pc, #52]	@ (80167cc <rmw_validate_node_name+0xa0>)
 8016796:	5cd3      	ldrb	r3, [r2, r3]
 8016798:	f013 0304 	ands.w	r3, r3, #4
 801679c:	d110      	bne.n	80167c0 <rmw_validate_node_name+0x94>
 801679e:	28ff      	cmp	r0, #255	@ 0xff
 80167a0:	d806      	bhi.n	80167b0 <rmw_validate_node_name+0x84>
 80167a2:	602b      	str	r3, [r5, #0]
 80167a4:	4618      	mov	r0, r3
 80167a6:	e7e8      	b.n	801677a <rmw_validate_node_name+0x4e>
 80167a8:	200b      	movs	r0, #11
 80167aa:	4770      	bx	lr
 80167ac:	200b      	movs	r0, #11
 80167ae:	e7e4      	b.n	801677a <rmw_validate_node_name+0x4e>
 80167b0:	2204      	movs	r2, #4
 80167b2:	602a      	str	r2, [r5, #0]
 80167b4:	2e00      	cmp	r6, #0
 80167b6:	d0df      	beq.n	8016778 <rmw_validate_node_name+0x4c>
 80167b8:	22fe      	movs	r2, #254	@ 0xfe
 80167ba:	6032      	str	r2, [r6, #0]
 80167bc:	4618      	mov	r0, r3
 80167be:	e7dc      	b.n	801677a <rmw_validate_node_name+0x4e>
 80167c0:	2303      	movs	r3, #3
 80167c2:	602b      	str	r3, [r5, #0]
 80167c4:	2e00      	cmp	r6, #0
 80167c6:	d1de      	bne.n	8016786 <rmw_validate_node_name+0x5a>
 80167c8:	e7d6      	b.n	8016778 <rmw_validate_node_name+0x4c>
 80167ca:	bf00      	nop
 80167cc:	0801b8f2 	.word	0x0801b8f2

080167d0 <rmw_node_name_validation_result_string>:
 80167d0:	2804      	cmp	r0, #4
 80167d2:	bf9a      	itte	ls
 80167d4:	4b02      	ldrls	r3, [pc, #8]	@ (80167e0 <rmw_node_name_validation_result_string+0x10>)
 80167d6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80167da:	4802      	ldrhi	r0, [pc, #8]	@ (80167e4 <rmw_node_name_validation_result_string+0x14>)
 80167dc:	4770      	bx	lr
 80167de:	bf00      	nop
 80167e0:	0801b724 	.word	0x0801b724
 80167e4:	0801b638 	.word	0x0801b638

080167e8 <on_status>:
 80167e8:	b082      	sub	sp, #8
 80167ea:	b002      	add	sp, #8
 80167ec:	4770      	bx	lr
 80167ee:	bf00      	nop

080167f0 <on_topic>:
 80167f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167f4:	4a22      	ldr	r2, [pc, #136]	@ (8016880 <on_topic+0x90>)
 80167f6:	b094      	sub	sp, #80	@ 0x50
 80167f8:	6812      	ldr	r2, [r2, #0]
 80167fa:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80167fc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016800:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8016804:	b3c2      	cbz	r2, 8016878 <on_topic+0x88>
 8016806:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801680a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801680e:	e001      	b.n	8016814 <on_topic+0x24>
 8016810:	6852      	ldr	r2, [r2, #4]
 8016812:	b38a      	cbz	r2, 8016878 <on_topic+0x88>
 8016814:	6894      	ldr	r4, [r2, #8]
 8016816:	8aa3      	ldrh	r3, [r4, #20]
 8016818:	428b      	cmp	r3, r1
 801681a:	d1f9      	bne.n	8016810 <on_topic+0x20>
 801681c:	7da3      	ldrb	r3, [r4, #22]
 801681e:	4283      	cmp	r3, r0
 8016820:	d1f6      	bne.n	8016810 <on_topic+0x20>
 8016822:	2248      	movs	r2, #72	@ 0x48
 8016824:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016828:	4668      	mov	r0, sp
 801682a:	f002 fcde 	bl	80191ea <memcpy>
 801682e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8016832:	cb0c      	ldmia	r3, {r2, r3}
 8016834:	4620      	mov	r0, r4
 8016836:	f7f7 fefb 	bl	800e630 <rmw_uxrce_get_static_input_buffer_for_entity>
 801683a:	4607      	mov	r7, r0
 801683c:	b1e0      	cbz	r0, 8016878 <on_topic+0x88>
 801683e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016842:	4632      	mov	r2, r6
 8016844:	4628      	mov	r0, r5
 8016846:	f108 0110 	add.w	r1, r8, #16
 801684a:	f7f8 fe73 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 801684e:	b930      	cbnz	r0, 801685e <on_topic+0x6e>
 8016850:	480c      	ldr	r0, [pc, #48]	@ (8016884 <on_topic+0x94>)
 8016852:	4639      	mov	r1, r7
 8016854:	b014      	add	sp, #80	@ 0x50
 8016856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801685a:	f000 b8bd 	b.w	80169d8 <put_memory>
 801685e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8016862:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8016866:	f7f7 fce1 	bl	800e22c <rmw_uros_epoch_nanos>
 801686a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801686e:	2305      	movs	r3, #5
 8016870:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016874:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8016878:	b014      	add	sp, #80	@ 0x50
 801687a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801687e:	bf00      	nop
 8016880:	2000b52c 	.word	0x2000b52c
 8016884:	2000b51c 	.word	0x2000b51c

08016888 <on_request>:
 8016888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801688c:	4823      	ldr	r0, [pc, #140]	@ (801691c <on_request+0x94>)
 801688e:	b094      	sub	sp, #80	@ 0x50
 8016890:	6800      	ldr	r0, [r0, #0]
 8016892:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016894:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016898:	9113      	str	r1, [sp, #76]	@ 0x4c
 801689a:	2800      	cmp	r0, #0
 801689c:	d03b      	beq.n	8016916 <on_request+0x8e>
 801689e:	461d      	mov	r5, r3
 80168a0:	e001      	b.n	80168a6 <on_request+0x1e>
 80168a2:	6840      	ldr	r0, [r0, #4]
 80168a4:	b3b8      	cbz	r0, 8016916 <on_request+0x8e>
 80168a6:	6884      	ldr	r4, [r0, #8]
 80168a8:	8b21      	ldrh	r1, [r4, #24]
 80168aa:	4291      	cmp	r1, r2
 80168ac:	d1f9      	bne.n	80168a2 <on_request+0x1a>
 80168ae:	2248      	movs	r2, #72	@ 0x48
 80168b0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80168b4:	4668      	mov	r0, sp
 80168b6:	f002 fc98 	bl	80191ea <memcpy>
 80168ba:	f104 0320 	add.w	r3, r4, #32
 80168be:	cb0c      	ldmia	r3, {r2, r3}
 80168c0:	4620      	mov	r0, r4
 80168c2:	f7f7 feb5 	bl	800e630 <rmw_uxrce_get_static_input_buffer_for_entity>
 80168c6:	4680      	mov	r8, r0
 80168c8:	b328      	cbz	r0, 8016916 <on_request+0x8e>
 80168ca:	4638      	mov	r0, r7
 80168cc:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80168d0:	4632      	mov	r2, r6
 80168d2:	f107 0110 	add.w	r1, r7, #16
 80168d6:	f7f8 fe2d 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 80168da:	b930      	cbnz	r0, 80168ea <on_request+0x62>
 80168dc:	4810      	ldr	r0, [pc, #64]	@ (8016920 <on_request+0x98>)
 80168de:	4641      	mov	r1, r8
 80168e0:	b014      	add	sp, #80	@ 0x50
 80168e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80168e6:	f000 b877 	b.w	80169d8 <put_memory>
 80168ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80168ec:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80168f0:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80168f4:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80168f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80168fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016900:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016904:	f7f7 fc92 	bl	800e22c <rmw_uros_epoch_nanos>
 8016908:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801690c:	2303      	movs	r3, #3
 801690e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016912:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016916:	b014      	add	sp, #80	@ 0x50
 8016918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801691c:	2000b4fc 	.word	0x2000b4fc
 8016920:	2000b51c 	.word	0x2000b51c

08016924 <on_reply>:
 8016924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016928:	4821      	ldr	r0, [pc, #132]	@ (80169b0 <on_reply+0x8c>)
 801692a:	b094      	sub	sp, #80	@ 0x50
 801692c:	6800      	ldr	r0, [r0, #0]
 801692e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016930:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016934:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016936:	b3b8      	cbz	r0, 80169a8 <on_reply+0x84>
 8016938:	461d      	mov	r5, r3
 801693a:	e001      	b.n	8016940 <on_reply+0x1c>
 801693c:	6840      	ldr	r0, [r0, #4]
 801693e:	b398      	cbz	r0, 80169a8 <on_reply+0x84>
 8016940:	6884      	ldr	r4, [r0, #8]
 8016942:	8b21      	ldrh	r1, [r4, #24]
 8016944:	4291      	cmp	r1, r2
 8016946:	d1f9      	bne.n	801693c <on_reply+0x18>
 8016948:	2248      	movs	r2, #72	@ 0x48
 801694a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801694e:	4668      	mov	r0, sp
 8016950:	f002 fc4b 	bl	80191ea <memcpy>
 8016954:	f104 0320 	add.w	r3, r4, #32
 8016958:	cb0c      	ldmia	r3, {r2, r3}
 801695a:	4620      	mov	r0, r4
 801695c:	f7f7 fe68 	bl	800e630 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016960:	4680      	mov	r8, r0
 8016962:	b308      	cbz	r0, 80169a8 <on_reply+0x84>
 8016964:	4638      	mov	r0, r7
 8016966:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801696a:	4632      	mov	r2, r6
 801696c:	f107 0110 	add.w	r1, r7, #16
 8016970:	f7f8 fde0 	bl	800f534 <ucdr_deserialize_array_uint8_t>
 8016974:	b930      	cbnz	r0, 8016984 <on_reply+0x60>
 8016976:	480f      	ldr	r0, [pc, #60]	@ (80169b4 <on_reply+0x90>)
 8016978:	4641      	mov	r1, r8
 801697a:	b014      	add	sp, #80	@ 0x50
 801697c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016980:	f000 b82a 	b.w	80169d8 <put_memory>
 8016984:	2200      	movs	r2, #0
 8016986:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801698a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801698e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016992:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8016996:	f7f7 fc49 	bl	800e22c <rmw_uros_epoch_nanos>
 801699a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801699e:	2304      	movs	r3, #4
 80169a0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80169a4:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80169a8:	b014      	add	sp, #80	@ 0x50
 80169aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169ae:	bf00      	nop
 80169b0:	20006c0c 	.word	0x20006c0c
 80169b4:	2000b51c 	.word	0x2000b51c

080169b8 <get_memory>:
 80169b8:	4603      	mov	r3, r0
 80169ba:	6840      	ldr	r0, [r0, #4]
 80169bc:	b158      	cbz	r0, 80169d6 <get_memory+0x1e>
 80169be:	6842      	ldr	r2, [r0, #4]
 80169c0:	605a      	str	r2, [r3, #4]
 80169c2:	b10a      	cbz	r2, 80169c8 <get_memory+0x10>
 80169c4:	2100      	movs	r1, #0
 80169c6:	6011      	str	r1, [r2, #0]
 80169c8:	681a      	ldr	r2, [r3, #0]
 80169ca:	6042      	str	r2, [r0, #4]
 80169cc:	b102      	cbz	r2, 80169d0 <get_memory+0x18>
 80169ce:	6010      	str	r0, [r2, #0]
 80169d0:	2200      	movs	r2, #0
 80169d2:	6002      	str	r2, [r0, #0]
 80169d4:	6018      	str	r0, [r3, #0]
 80169d6:	4770      	bx	lr

080169d8 <put_memory>:
 80169d8:	680b      	ldr	r3, [r1, #0]
 80169da:	b10b      	cbz	r3, 80169e0 <put_memory+0x8>
 80169dc:	684a      	ldr	r2, [r1, #4]
 80169de:	605a      	str	r2, [r3, #4]
 80169e0:	684a      	ldr	r2, [r1, #4]
 80169e2:	b102      	cbz	r2, 80169e6 <put_memory+0xe>
 80169e4:	6013      	str	r3, [r2, #0]
 80169e6:	6803      	ldr	r3, [r0, #0]
 80169e8:	428b      	cmp	r3, r1
 80169ea:	6843      	ldr	r3, [r0, #4]
 80169ec:	bf08      	it	eq
 80169ee:	6002      	streq	r2, [r0, #0]
 80169f0:	604b      	str	r3, [r1, #4]
 80169f2:	b103      	cbz	r3, 80169f6 <put_memory+0x1e>
 80169f4:	6019      	str	r1, [r3, #0]
 80169f6:	2300      	movs	r3, #0
 80169f8:	600b      	str	r3, [r1, #0]
 80169fa:	6041      	str	r1, [r0, #4]
 80169fc:	4770      	bx	lr
 80169fe:	bf00      	nop

08016a00 <rmw_destroy_client>:
 8016a00:	b570      	push	{r4, r5, r6, lr}
 8016a02:	b128      	cbz	r0, 8016a10 <rmw_destroy_client+0x10>
 8016a04:	4604      	mov	r4, r0
 8016a06:	6800      	ldr	r0, [r0, #0]
 8016a08:	460d      	mov	r5, r1
 8016a0a:	f7f8 f821 	bl	800ea50 <is_uxrce_rmw_identifier_valid>
 8016a0e:	b910      	cbnz	r0, 8016a16 <rmw_destroy_client+0x16>
 8016a10:	2401      	movs	r4, #1
 8016a12:	4620      	mov	r0, r4
 8016a14:	bd70      	pop	{r4, r5, r6, pc}
 8016a16:	6863      	ldr	r3, [r4, #4]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d0f9      	beq.n	8016a10 <rmw_destroy_client+0x10>
 8016a1c:	2d00      	cmp	r5, #0
 8016a1e:	d0f7      	beq.n	8016a10 <rmw_destroy_client+0x10>
 8016a20:	6828      	ldr	r0, [r5, #0]
 8016a22:	f7f8 f815 	bl	800ea50 <is_uxrce_rmw_identifier_valid>
 8016a26:	2800      	cmp	r0, #0
 8016a28:	d0f2      	beq.n	8016a10 <rmw_destroy_client+0x10>
 8016a2a:	686e      	ldr	r6, [r5, #4]
 8016a2c:	2e00      	cmp	r6, #0
 8016a2e:	d0ef      	beq.n	8016a10 <rmw_destroy_client+0x10>
 8016a30:	6864      	ldr	r4, [r4, #4]
 8016a32:	6932      	ldr	r2, [r6, #16]
 8016a34:	6920      	ldr	r0, [r4, #16]
 8016a36:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016a3a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016a3e:	6819      	ldr	r1, [r3, #0]
 8016a40:	f7f9 f99e 	bl	800fd80 <uxr_buffer_cancel_data>
 8016a44:	4602      	mov	r2, r0
 8016a46:	6920      	ldr	r0, [r4, #16]
 8016a48:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016a4c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016a50:	f7f7 fee4 	bl	800e81c <run_xrce_session>
 8016a54:	6920      	ldr	r0, [r4, #16]
 8016a56:	6932      	ldr	r2, [r6, #16]
 8016a58:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016a5c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016a60:	6819      	ldr	r1, [r3, #0]
 8016a62:	f7f8 fecd 	bl	800f800 <uxr_buffer_delete_entity>
 8016a66:	4602      	mov	r2, r0
 8016a68:	6920      	ldr	r0, [r4, #16]
 8016a6a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016a6e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016a72:	f7f7 fed3 	bl	800e81c <run_xrce_session>
 8016a76:	2800      	cmp	r0, #0
 8016a78:	4628      	mov	r0, r5
 8016a7a:	bf14      	ite	ne
 8016a7c:	2400      	movne	r4, #0
 8016a7e:	2402      	moveq	r4, #2
 8016a80:	f7f7 fdb4 	bl	800e5ec <rmw_uxrce_fini_client_memory>
 8016a84:	e7c5      	b.n	8016a12 <rmw_destroy_client+0x12>
 8016a86:	bf00      	nop

08016a88 <rmw_get_implementation_identifier>:
 8016a88:	4b01      	ldr	r3, [pc, #4]	@ (8016a90 <rmw_get_implementation_identifier+0x8>)
 8016a8a:	6818      	ldr	r0, [r3, #0]
 8016a8c:	4770      	bx	lr
 8016a8e:	bf00      	nop
 8016a90:	0801b750 	.word	0x0801b750

08016a94 <create_topic>:
 8016a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a98:	4605      	mov	r5, r0
 8016a9a:	b084      	sub	sp, #16
 8016a9c:	4822      	ldr	r0, [pc, #136]	@ (8016b28 <create_topic+0x94>)
 8016a9e:	460f      	mov	r7, r1
 8016aa0:	4616      	mov	r6, r2
 8016aa2:	f7ff ff89 	bl	80169b8 <get_memory>
 8016aa6:	4604      	mov	r4, r0
 8016aa8:	2800      	cmp	r0, #0
 8016aaa:	d039      	beq.n	8016b20 <create_topic+0x8c>
 8016aac:	692b      	ldr	r3, [r5, #16]
 8016aae:	6884      	ldr	r4, [r0, #8]
 8016ab0:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8016b30 <create_topic+0x9c>
 8016ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016ab8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8016abc:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8016ac0:	1c42      	adds	r2, r0, #1
 8016ac2:	2102      	movs	r1, #2
 8016ac4:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8016ac8:	f7f9 f8f0 	bl	800fcac <uxr_object_id>
 8016acc:	223c      	movs	r2, #60	@ 0x3c
 8016ace:	6120      	str	r0, [r4, #16]
 8016ad0:	4641      	mov	r1, r8
 8016ad2:	4638      	mov	r0, r7
 8016ad4:	f7f7 ffa2 	bl	800ea1c <generate_topic_name>
 8016ad8:	b1f0      	cbz	r0, 8016b18 <create_topic+0x84>
 8016ada:	4f14      	ldr	r7, [pc, #80]	@ (8016b2c <create_topic+0x98>)
 8016adc:	4630      	mov	r0, r6
 8016ade:	2264      	movs	r2, #100	@ 0x64
 8016ae0:	4639      	mov	r1, r7
 8016ae2:	f7f7 ff6b 	bl	800e9bc <generate_type_name>
 8016ae6:	b1b8      	cbz	r0, 8016b18 <create_topic+0x84>
 8016ae8:	6928      	ldr	r0, [r5, #16]
 8016aea:	2306      	movs	r3, #6
 8016aec:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016af0:	f8cd 8000 	str.w	r8, [sp]
 8016af4:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8016af8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016afc:	6811      	ldr	r1, [r2, #0]
 8016afe:	696b      	ldr	r3, [r5, #20]
 8016b00:	6922      	ldr	r2, [r4, #16]
 8016b02:	f7f8 fefb 	bl	800f8fc <uxr_buffer_create_topic_bin>
 8016b06:	4602      	mov	r2, r0
 8016b08:	6928      	ldr	r0, [r5, #16]
 8016b0a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016b0e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016b12:	f7f7 fe83 	bl	800e81c <run_xrce_session>
 8016b16:	b918      	cbnz	r0, 8016b20 <create_topic+0x8c>
 8016b18:	4620      	mov	r0, r4
 8016b1a:	f7f7 fd7d 	bl	800e618 <rmw_uxrce_fini_topic_memory>
 8016b1e:	2400      	movs	r4, #0
 8016b20:	4620      	mov	r0, r4
 8016b22:	b004      	add	sp, #16
 8016b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b28:	2000b53c 	.word	0x2000b53c
 8016b2c:	2000b628 	.word	0x2000b628
 8016b30:	2000b5ec 	.word	0x2000b5ec

08016b34 <destroy_topic>:
 8016b34:	b538      	push	{r3, r4, r5, lr}
 8016b36:	6985      	ldr	r5, [r0, #24]
 8016b38:	b1d5      	cbz	r5, 8016b70 <destroy_topic+0x3c>
 8016b3a:	4604      	mov	r4, r0
 8016b3c:	6928      	ldr	r0, [r5, #16]
 8016b3e:	6922      	ldr	r2, [r4, #16]
 8016b40:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016b44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016b48:	6819      	ldr	r1, [r3, #0]
 8016b4a:	f7f8 fe59 	bl	800f800 <uxr_buffer_delete_entity>
 8016b4e:	4602      	mov	r2, r0
 8016b50:	6928      	ldr	r0, [r5, #16]
 8016b52:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016b56:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016b5a:	f7f7 fe5f 	bl	800e81c <run_xrce_session>
 8016b5e:	2800      	cmp	r0, #0
 8016b60:	4620      	mov	r0, r4
 8016b62:	bf14      	ite	ne
 8016b64:	2400      	movne	r4, #0
 8016b66:	2402      	moveq	r4, #2
 8016b68:	f7f7 fd56 	bl	800e618 <rmw_uxrce_fini_topic_memory>
 8016b6c:	4620      	mov	r0, r4
 8016b6e:	bd38      	pop	{r3, r4, r5, pc}
 8016b70:	2401      	movs	r4, #1
 8016b72:	4620      	mov	r0, r4
 8016b74:	bd38      	pop	{r3, r4, r5, pc}
 8016b76:	bf00      	nop

08016b78 <rmw_send_request>:
 8016b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b7c:	4604      	mov	r4, r0
 8016b7e:	6800      	ldr	r0, [r0, #0]
 8016b80:	b08b      	sub	sp, #44	@ 0x2c
 8016b82:	460e      	mov	r6, r1
 8016b84:	4615      	mov	r5, r2
 8016b86:	b128      	cbz	r0, 8016b94 <rmw_send_request+0x1c>
 8016b88:	4b21      	ldr	r3, [pc, #132]	@ (8016c10 <rmw_send_request+0x98>)
 8016b8a:	6819      	ldr	r1, [r3, #0]
 8016b8c:	f7e9 fb48 	bl	8000220 <strcmp>
 8016b90:	2800      	cmp	r0, #0
 8016b92:	d139      	bne.n	8016c08 <rmw_send_request+0x90>
 8016b94:	6864      	ldr	r4, [r4, #4]
 8016b96:	6963      	ldr	r3, [r4, #20]
 8016b98:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8016b9c:	689b      	ldr	r3, [r3, #8]
 8016b9e:	4798      	blx	r3
 8016ba0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8016ba4:	4630      	mov	r0, r6
 8016ba6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016baa:	4798      	blx	r3
 8016bac:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016bb0:	9000      	str	r0, [sp, #0]
 8016bb2:	6922      	ldr	r2, [r4, #16]
 8016bb4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8016bb6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8016bba:	ab02      	add	r3, sp, #8
 8016bbc:	f7fb f99a 	bl	8011ef4 <uxr_prepare_output_stream>
 8016bc0:	2700      	movs	r7, #0
 8016bc2:	6028      	str	r0, [r5, #0]
 8016bc4:	606f      	str	r7, [r5, #4]
 8016bc6:	b198      	cbz	r0, 8016bf0 <rmw_send_request+0x78>
 8016bc8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016bcc:	a902      	add	r1, sp, #8
 8016bce:	4630      	mov	r0, r6
 8016bd0:	4798      	blx	r3
 8016bd2:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8016bd6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016bda:	2b01      	cmp	r3, #1
 8016bdc:	d00c      	beq.n	8016bf8 <rmw_send_request+0x80>
 8016bde:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8016be0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016be4:	f7f9 feb2 	bl	801094c <uxr_run_session_until_confirm_delivery>
 8016be8:	4638      	mov	r0, r7
 8016bea:	b00b      	add	sp, #44	@ 0x2c
 8016bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016bf0:	2001      	movs	r0, #1
 8016bf2:	b00b      	add	sp, #44	@ 0x2c
 8016bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016bf8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016bfc:	f7f9 fae6 	bl	80101cc <uxr_flash_output_streams>
 8016c00:	4638      	mov	r0, r7
 8016c02:	b00b      	add	sp, #44	@ 0x2c
 8016c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c08:	200c      	movs	r0, #12
 8016c0a:	b00b      	add	sp, #44	@ 0x2c
 8016c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c10:	0801b750 	.word	0x0801b750

08016c14 <rmw_take_request>:
 8016c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c18:	4605      	mov	r5, r0
 8016c1a:	6800      	ldr	r0, [r0, #0]
 8016c1c:	b089      	sub	sp, #36	@ 0x24
 8016c1e:	460c      	mov	r4, r1
 8016c20:	4690      	mov	r8, r2
 8016c22:	461e      	mov	r6, r3
 8016c24:	b128      	cbz	r0, 8016c32 <rmw_take_request+0x1e>
 8016c26:	4b28      	ldr	r3, [pc, #160]	@ (8016cc8 <rmw_take_request+0xb4>)
 8016c28:	6819      	ldr	r1, [r3, #0]
 8016c2a:	f7e9 faf9 	bl	8000220 <strcmp>
 8016c2e:	2800      	cmp	r0, #0
 8016c30:	d146      	bne.n	8016cc0 <rmw_take_request+0xac>
 8016c32:	b10e      	cbz	r6, 8016c38 <rmw_take_request+0x24>
 8016c34:	2300      	movs	r3, #0
 8016c36:	7033      	strb	r3, [r6, #0]
 8016c38:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016c3c:	f7f7 fd70 	bl	800e720 <rmw_uxrce_clean_expired_static_input_buffer>
 8016c40:	4648      	mov	r0, r9
 8016c42:	f7f7 fd45 	bl	800e6d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016c46:	4607      	mov	r7, r0
 8016c48:	b3b0      	cbz	r0, 8016cb8 <rmw_take_request+0xa4>
 8016c4a:	6885      	ldr	r5, [r0, #8]
 8016c4c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8016c50:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8016c54:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8016c58:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8016c5c:	7423      	strb	r3, [r4, #16]
 8016c5e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8016c62:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8016c66:	74e2      	strb	r2, [r4, #19]
 8016c68:	f8a4 3011 	strh.w	r3, [r4, #17]
 8016c6c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8016c70:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8016c74:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8016c78:	61e1      	str	r1, [r4, #28]
 8016c7a:	6162      	str	r2, [r4, #20]
 8016c7c:	61a3      	str	r3, [r4, #24]
 8016c7e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016c82:	689b      	ldr	r3, [r3, #8]
 8016c84:	4798      	blx	r3
 8016c86:	6844      	ldr	r4, [r0, #4]
 8016c88:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8016c8c:	f105 0110 	add.w	r1, r5, #16
 8016c90:	4668      	mov	r0, sp
 8016c92:	f7f5 f915 	bl	800bec0 <ucdr_init_buffer>
 8016c96:	68e3      	ldr	r3, [r4, #12]
 8016c98:	4641      	mov	r1, r8
 8016c9a:	4668      	mov	r0, sp
 8016c9c:	4798      	blx	r3
 8016c9e:	4639      	mov	r1, r7
 8016ca0:	4604      	mov	r4, r0
 8016ca2:	480a      	ldr	r0, [pc, #40]	@ (8016ccc <rmw_take_request+0xb8>)
 8016ca4:	f7ff fe98 	bl	80169d8 <put_memory>
 8016ca8:	b106      	cbz	r6, 8016cac <rmw_take_request+0x98>
 8016caa:	7034      	strb	r4, [r6, #0]
 8016cac:	f084 0001 	eor.w	r0, r4, #1
 8016cb0:	b2c0      	uxtb	r0, r0
 8016cb2:	b009      	add	sp, #36	@ 0x24
 8016cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016cb8:	2001      	movs	r0, #1
 8016cba:	b009      	add	sp, #36	@ 0x24
 8016cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016cc0:	200c      	movs	r0, #12
 8016cc2:	b009      	add	sp, #36	@ 0x24
 8016cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016cc8:	0801b750 	.word	0x0801b750
 8016ccc:	2000b51c 	.word	0x2000b51c

08016cd0 <rmw_send_response>:
 8016cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cd2:	4605      	mov	r5, r0
 8016cd4:	6800      	ldr	r0, [r0, #0]
 8016cd6:	b091      	sub	sp, #68	@ 0x44
 8016cd8:	460c      	mov	r4, r1
 8016cda:	4616      	mov	r6, r2
 8016cdc:	b128      	cbz	r0, 8016cea <rmw_send_response+0x1a>
 8016cde:	4b29      	ldr	r3, [pc, #164]	@ (8016d84 <rmw_send_response+0xb4>)
 8016ce0:	6819      	ldr	r1, [r3, #0]
 8016ce2:	f7e9 fa9d 	bl	8000220 <strcmp>
 8016ce6:	2800      	cmp	r0, #0
 8016ce8:	d141      	bne.n	8016d6e <rmw_send_response+0x9e>
 8016cea:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8016cee:	9306      	str	r3, [sp, #24]
 8016cf0:	4623      	mov	r3, r4
 8016cf2:	9207      	str	r2, [sp, #28]
 8016cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016cf8:	686d      	ldr	r5, [r5, #4]
 8016cfa:	789b      	ldrb	r3, [r3, #2]
 8016cfc:	68a1      	ldr	r1, [r4, #8]
 8016cfe:	f88d 2017 	strb.w	r2, [sp, #23]
 8016d02:	f88d 3016 	strb.w	r3, [sp, #22]
 8016d06:	68e2      	ldr	r2, [r4, #12]
 8016d08:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8016d0c:	6860      	ldr	r0, [r4, #4]
 8016d0e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016d12:	ab02      	add	r3, sp, #8
 8016d14:	c307      	stmia	r3!, {r0, r1, r2}
 8016d16:	696b      	ldr	r3, [r5, #20]
 8016d18:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8016d1a:	68db      	ldr	r3, [r3, #12]
 8016d1c:	4798      	blx	r3
 8016d1e:	6844      	ldr	r4, [r0, #4]
 8016d20:	4630      	mov	r0, r6
 8016d22:	6923      	ldr	r3, [r4, #16]
 8016d24:	4798      	blx	r3
 8016d26:	f100 0318 	add.w	r3, r0, #24
 8016d2a:	6938      	ldr	r0, [r7, #16]
 8016d2c:	9300      	str	r3, [sp, #0]
 8016d2e:	692a      	ldr	r2, [r5, #16]
 8016d30:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8016d32:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d36:	ab08      	add	r3, sp, #32
 8016d38:	f7fb f8dc 	bl	8011ef4 <uxr_prepare_output_stream>
 8016d3c:	b910      	cbnz	r0, 8016d44 <rmw_send_response+0x74>
 8016d3e:	2001      	movs	r0, #1
 8016d40:	b011      	add	sp, #68	@ 0x44
 8016d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d44:	a902      	add	r1, sp, #8
 8016d46:	a808      	add	r0, sp, #32
 8016d48:	f7fc f962 	bl	8013010 <uxr_serialize_SampleIdentity>
 8016d4c:	68a3      	ldr	r3, [r4, #8]
 8016d4e:	a908      	add	r1, sp, #32
 8016d50:	4630      	mov	r0, r6
 8016d52:	4798      	blx	r3
 8016d54:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8016d58:	6938      	ldr	r0, [r7, #16]
 8016d5a:	2b01      	cmp	r3, #1
 8016d5c:	d00a      	beq.n	8016d74 <rmw_send_response+0xa4>
 8016d5e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8016d60:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d64:	f7f9 fdf2 	bl	801094c <uxr_run_session_until_confirm_delivery>
 8016d68:	2000      	movs	r0, #0
 8016d6a:	b011      	add	sp, #68	@ 0x44
 8016d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d6e:	200c      	movs	r0, #12
 8016d70:	b011      	add	sp, #68	@ 0x44
 8016d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d78:	f7f9 fa28 	bl	80101cc <uxr_flash_output_streams>
 8016d7c:	2000      	movs	r0, #0
 8016d7e:	b011      	add	sp, #68	@ 0x44
 8016d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d82:	bf00      	nop
 8016d84:	0801b750 	.word	0x0801b750

08016d88 <rmw_take_response>:
 8016d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d8c:	4604      	mov	r4, r0
 8016d8e:	6800      	ldr	r0, [r0, #0]
 8016d90:	b088      	sub	sp, #32
 8016d92:	4688      	mov	r8, r1
 8016d94:	4617      	mov	r7, r2
 8016d96:	461d      	mov	r5, r3
 8016d98:	b120      	cbz	r0, 8016da4 <rmw_take_response+0x1c>
 8016d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8016e14 <rmw_take_response+0x8c>)
 8016d9c:	6819      	ldr	r1, [r3, #0]
 8016d9e:	f7e9 fa3f 	bl	8000220 <strcmp>
 8016da2:	bb78      	cbnz	r0, 8016e04 <rmw_take_response+0x7c>
 8016da4:	b10d      	cbz	r5, 8016daa <rmw_take_response+0x22>
 8016da6:	2300      	movs	r3, #0
 8016da8:	702b      	strb	r3, [r5, #0]
 8016daa:	6864      	ldr	r4, [r4, #4]
 8016dac:	f7f7 fcb8 	bl	800e720 <rmw_uxrce_clean_expired_static_input_buffer>
 8016db0:	4620      	mov	r0, r4
 8016db2:	f7f7 fc8d 	bl	800e6d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016db6:	4606      	mov	r6, r0
 8016db8:	b340      	cbz	r0, 8016e0c <rmw_take_response+0x84>
 8016dba:	6963      	ldr	r3, [r4, #20]
 8016dbc:	6884      	ldr	r4, [r0, #8]
 8016dbe:	68db      	ldr	r3, [r3, #12]
 8016dc0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8016dc4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8016dc8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8016dcc:	4798      	blx	r3
 8016dce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016dd2:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8016dd6:	f104 0110 	add.w	r1, r4, #16
 8016dda:	4668      	mov	r0, sp
 8016ddc:	f7f5 f870 	bl	800bec0 <ucdr_init_buffer>
 8016de0:	4639      	mov	r1, r7
 8016de2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016de6:	4668      	mov	r0, sp
 8016de8:	4798      	blx	r3
 8016dea:	4631      	mov	r1, r6
 8016dec:	4604      	mov	r4, r0
 8016dee:	480a      	ldr	r0, [pc, #40]	@ (8016e18 <rmw_take_response+0x90>)
 8016df0:	f7ff fdf2 	bl	80169d8 <put_memory>
 8016df4:	b105      	cbz	r5, 8016df8 <rmw_take_response+0x70>
 8016df6:	702c      	strb	r4, [r5, #0]
 8016df8:	f084 0001 	eor.w	r0, r4, #1
 8016dfc:	b2c0      	uxtb	r0, r0
 8016dfe:	b008      	add	sp, #32
 8016e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e04:	200c      	movs	r0, #12
 8016e06:	b008      	add	sp, #32
 8016e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e0c:	2001      	movs	r0, #1
 8016e0e:	b008      	add	sp, #32
 8016e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e14:	0801b750 	.word	0x0801b750
 8016e18:	2000b51c 	.word	0x2000b51c

08016e1c <rmw_take_with_info>:
 8016e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e1e:	4604      	mov	r4, r0
 8016e20:	6800      	ldr	r0, [r0, #0]
 8016e22:	b089      	sub	sp, #36	@ 0x24
 8016e24:	460f      	mov	r7, r1
 8016e26:	4615      	mov	r5, r2
 8016e28:	b128      	cbz	r0, 8016e36 <rmw_take_with_info+0x1a>
 8016e2a:	4b24      	ldr	r3, [pc, #144]	@ (8016ebc <rmw_take_with_info+0xa0>)
 8016e2c:	6819      	ldr	r1, [r3, #0]
 8016e2e:	f7e9 f9f7 	bl	8000220 <strcmp>
 8016e32:	2800      	cmp	r0, #0
 8016e34:	d13e      	bne.n	8016eb4 <rmw_take_with_info+0x98>
 8016e36:	b305      	cbz	r5, 8016e7a <rmw_take_with_info+0x5e>
 8016e38:	6864      	ldr	r4, [r4, #4]
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	702b      	strb	r3, [r5, #0]
 8016e3e:	f7f7 fc6f 	bl	800e720 <rmw_uxrce_clean_expired_static_input_buffer>
 8016e42:	4620      	mov	r0, r4
 8016e44:	f7f7 fc44 	bl	800e6d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016e48:	4606      	mov	r6, r0
 8016e4a:	b1f0      	cbz	r0, 8016e8a <rmw_take_with_info+0x6e>
 8016e4c:	6881      	ldr	r1, [r0, #8]
 8016e4e:	4668      	mov	r0, sp
 8016e50:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016e54:	3110      	adds	r1, #16
 8016e56:	f7f5 f833 	bl	800bec0 <ucdr_init_buffer>
 8016e5a:	69a3      	ldr	r3, [r4, #24]
 8016e5c:	4639      	mov	r1, r7
 8016e5e:	68db      	ldr	r3, [r3, #12]
 8016e60:	4668      	mov	r0, sp
 8016e62:	4798      	blx	r3
 8016e64:	4631      	mov	r1, r6
 8016e66:	4604      	mov	r4, r0
 8016e68:	4815      	ldr	r0, [pc, #84]	@ (8016ec0 <rmw_take_with_info+0xa4>)
 8016e6a:	f7ff fdb5 	bl	80169d8 <put_memory>
 8016e6e:	702c      	strb	r4, [r5, #0]
 8016e70:	f084 0001 	eor.w	r0, r4, #1
 8016e74:	b2c0      	uxtb	r0, r0
 8016e76:	b009      	add	sp, #36	@ 0x24
 8016e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e7a:	6864      	ldr	r4, [r4, #4]
 8016e7c:	f7f7 fc50 	bl	800e720 <rmw_uxrce_clean_expired_static_input_buffer>
 8016e80:	4620      	mov	r0, r4
 8016e82:	f7f7 fc25 	bl	800e6d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016e86:	4605      	mov	r5, r0
 8016e88:	b910      	cbnz	r0, 8016e90 <rmw_take_with_info+0x74>
 8016e8a:	2001      	movs	r0, #1
 8016e8c:	b009      	add	sp, #36	@ 0x24
 8016e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e90:	68a9      	ldr	r1, [r5, #8]
 8016e92:	4668      	mov	r0, sp
 8016e94:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016e98:	3110      	adds	r1, #16
 8016e9a:	f7f5 f811 	bl	800bec0 <ucdr_init_buffer>
 8016e9e:	69a3      	ldr	r3, [r4, #24]
 8016ea0:	4639      	mov	r1, r7
 8016ea2:	68db      	ldr	r3, [r3, #12]
 8016ea4:	4668      	mov	r0, sp
 8016ea6:	4798      	blx	r3
 8016ea8:	4629      	mov	r1, r5
 8016eaa:	4604      	mov	r4, r0
 8016eac:	4804      	ldr	r0, [pc, #16]	@ (8016ec0 <rmw_take_with_info+0xa4>)
 8016eae:	f7ff fd93 	bl	80169d8 <put_memory>
 8016eb2:	e7dd      	b.n	8016e70 <rmw_take_with_info+0x54>
 8016eb4:	200c      	movs	r0, #12
 8016eb6:	b009      	add	sp, #36	@ 0x24
 8016eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016eba:	bf00      	nop
 8016ebc:	0801b750 	.word	0x0801b750
 8016ec0:	2000b51c 	.word	0x2000b51c

08016ec4 <rmw_wait>:
 8016ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ec8:	b089      	sub	sp, #36	@ 0x24
 8016eca:	4605      	mov	r5, r0
 8016ecc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8016ece:	460e      	mov	r6, r1
 8016ed0:	4698      	mov	r8, r3
 8016ed2:	4691      	mov	r9, r2
 8016ed4:	2a00      	cmp	r2, #0
 8016ed6:	f000 810a 	beq.w	80170ee <rmw_wait+0x22a>
 8016eda:	b16c      	cbz	r4, 8016ef8 <rmw_wait+0x34>
 8016edc:	4bae      	ldr	r3, [pc, #696]	@ (8017198 <rmw_wait+0x2d4>)
 8016ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016ee0:	af04      	add	r7, sp, #16
 8016ee2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8016ee6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016eea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016eee:	f7ff faaf 	bl	8016450 <rmw_time_equal>
 8016ef2:	2800      	cmp	r0, #0
 8016ef4:	f000 8127 	beq.w	8017146 <rmw_wait+0x282>
 8016ef8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016efc:	f7f7 fc10 	bl	800e720 <rmw_uxrce_clean_expired_static_input_buffer>
 8016f00:	4ba6      	ldr	r3, [pc, #664]	@ (801719c <rmw_wait+0x2d8>)
 8016f02:	681c      	ldr	r4, [r3, #0]
 8016f04:	b14c      	cbz	r4, 8016f1a <rmw_wait+0x56>
 8016f06:	4623      	mov	r3, r4
 8016f08:	2100      	movs	r1, #0
 8016f0a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8016f0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016f12:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d1f7      	bne.n	8016f0a <rmw_wait+0x46>
 8016f1a:	f1b9 0f00 	cmp.w	r9, #0
 8016f1e:	d011      	beq.n	8016f44 <rmw_wait+0x80>
 8016f20:	f8d9 1000 	ldr.w	r1, [r9]
 8016f24:	b171      	cbz	r1, 8016f44 <rmw_wait+0x80>
 8016f26:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	2001      	movs	r0, #1
 8016f2e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016f32:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016f34:	6912      	ldr	r2, [r2, #16]
 8016f36:	3301      	adds	r3, #1
 8016f38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016f3c:	4299      	cmp	r1, r3
 8016f3e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016f42:	d1f4      	bne.n	8016f2e <rmw_wait+0x6a>
 8016f44:	f1b8 0f00 	cmp.w	r8, #0
 8016f48:	d011      	beq.n	8016f6e <rmw_wait+0xaa>
 8016f4a:	f8d8 1000 	ldr.w	r1, [r8]
 8016f4e:	b171      	cbz	r1, 8016f6e <rmw_wait+0xaa>
 8016f50:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8016f54:	2300      	movs	r3, #0
 8016f56:	2001      	movs	r0, #1
 8016f58:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016f5c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016f5e:	6912      	ldr	r2, [r2, #16]
 8016f60:	3301      	adds	r3, #1
 8016f62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016f66:	4299      	cmp	r1, r3
 8016f68:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016f6c:	d1f4      	bne.n	8016f58 <rmw_wait+0x94>
 8016f6e:	b185      	cbz	r5, 8016f92 <rmw_wait+0xce>
 8016f70:	6829      	ldr	r1, [r5, #0]
 8016f72:	b171      	cbz	r1, 8016f92 <rmw_wait+0xce>
 8016f74:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8016f78:	2300      	movs	r3, #0
 8016f7a:	2001      	movs	r0, #1
 8016f7c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016f80:	6a12      	ldr	r2, [r2, #32]
 8016f82:	6912      	ldr	r2, [r2, #16]
 8016f84:	3301      	adds	r3, #1
 8016f86:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016f8a:	4299      	cmp	r1, r3
 8016f8c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016f90:	d1f4      	bne.n	8016f7c <rmw_wait+0xb8>
 8016f92:	b34c      	cbz	r4, 8016fe8 <rmw_wait+0x124>
 8016f94:	4622      	mov	r2, r4
 8016f96:	2300      	movs	r3, #0
 8016f98:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8016f9c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8016fa0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8016fa4:	440b      	add	r3, r1
 8016fa6:	b2db      	uxtb	r3, r3
 8016fa8:	2a00      	cmp	r2, #0
 8016faa:	d1f5      	bne.n	8016f98 <rmw_wait+0xd4>
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	f000 8084 	beq.w	80170ba <rmw_wait+0x1f6>
 8016fb2:	1c7a      	adds	r2, r7, #1
 8016fb4:	d00d      	beq.n	8016fd2 <rmw_wait+0x10e>
 8016fb6:	ee07 7a90 	vmov	s15, r7
 8016fba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016fbe:	ee07 3a90 	vmov	s15, r3
 8016fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016fca:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8016fce:	ee17 7a90 	vmov	r7, s15
 8016fd2:	68a0      	ldr	r0, [r4, #8]
 8016fd4:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8016fd8:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	f040 8090 	bne.w	8017102 <rmw_wait+0x23e>
 8016fe2:	6864      	ldr	r4, [r4, #4]
 8016fe4:	2c00      	cmp	r4, #0
 8016fe6:	d1f4      	bne.n	8016fd2 <rmw_wait+0x10e>
 8016fe8:	f1b9 0f00 	cmp.w	r9, #0
 8016fec:	f000 80bc 	beq.w	8017168 <rmw_wait+0x2a4>
 8016ff0:	f8d9 7000 	ldr.w	r7, [r9]
 8016ff4:	2f00      	cmp	r7, #0
 8016ff6:	f000 808e 	beq.w	8017116 <rmw_wait+0x252>
 8016ffa:	2400      	movs	r4, #0
 8016ffc:	4627      	mov	r7, r4
 8016ffe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017002:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017006:	f7f7 fb63 	bl	800e6d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801700a:	2800      	cmp	r0, #0
 801700c:	d05f      	beq.n	80170ce <rmw_wait+0x20a>
 801700e:	f8d9 3000 	ldr.w	r3, [r9]
 8017012:	3401      	adds	r4, #1
 8017014:	42a3      	cmp	r3, r4
 8017016:	f04f 0701 	mov.w	r7, #1
 801701a:	d8f0      	bhi.n	8016ffe <rmw_wait+0x13a>
 801701c:	f1b8 0f00 	cmp.w	r8, #0
 8017020:	d012      	beq.n	8017048 <rmw_wait+0x184>
 8017022:	f8d8 3000 	ldr.w	r3, [r8]
 8017026:	b17b      	cbz	r3, 8017048 <rmw_wait+0x184>
 8017028:	2400      	movs	r4, #0
 801702a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801702e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017032:	f7f7 fb4d 	bl	800e6d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017036:	2800      	cmp	r0, #0
 8017038:	d051      	beq.n	80170de <rmw_wait+0x21a>
 801703a:	f8d8 3000 	ldr.w	r3, [r8]
 801703e:	3401      	adds	r4, #1
 8017040:	42a3      	cmp	r3, r4
 8017042:	f04f 0701 	mov.w	r7, #1
 8017046:	d8f0      	bhi.n	801702a <rmw_wait+0x166>
 8017048:	b1dd      	cbz	r5, 8017082 <rmw_wait+0x1be>
 801704a:	682b      	ldr	r3, [r5, #0]
 801704c:	b1cb      	cbz	r3, 8017082 <rmw_wait+0x1be>
 801704e:	2400      	movs	r4, #0
 8017050:	686b      	ldr	r3, [r5, #4]
 8017052:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017056:	f7f7 fb3b 	bl	800e6d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801705a:	b158      	cbz	r0, 8017074 <rmw_wait+0x1b0>
 801705c:	682b      	ldr	r3, [r5, #0]
 801705e:	3401      	adds	r4, #1
 8017060:	42a3      	cmp	r3, r4
 8017062:	d969      	bls.n	8017138 <rmw_wait+0x274>
 8017064:	686b      	ldr	r3, [r5, #4]
 8017066:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801706a:	2701      	movs	r7, #1
 801706c:	f7f7 fb30 	bl	800e6d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017070:	2800      	cmp	r0, #0
 8017072:	d1f3      	bne.n	801705c <rmw_wait+0x198>
 8017074:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017078:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801707c:	3401      	adds	r4, #1
 801707e:	42a3      	cmp	r3, r4
 8017080:	d8e6      	bhi.n	8017050 <rmw_wait+0x18c>
 8017082:	b1a6      	cbz	r6, 80170ae <rmw_wait+0x1ea>
 8017084:	6834      	ldr	r4, [r6, #0]
 8017086:	b194      	cbz	r4, 80170ae <rmw_wait+0x1ea>
 8017088:	2300      	movs	r3, #0
 801708a:	461d      	mov	r5, r3
 801708c:	e004      	b.n	8017098 <rmw_wait+0x1d4>
 801708e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8017092:	3301      	adds	r3, #1
 8017094:	42a3      	cmp	r3, r4
 8017096:	d00a      	beq.n	80170ae <rmw_wait+0x1ea>
 8017098:	6870      	ldr	r0, [r6, #4]
 801709a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801709e:	7c0a      	ldrb	r2, [r1, #16]
 80170a0:	2a00      	cmp	r2, #0
 80170a2:	d0f4      	beq.n	801708e <rmw_wait+0x1ca>
 80170a4:	3301      	adds	r3, #1
 80170a6:	42a3      	cmp	r3, r4
 80170a8:	740d      	strb	r5, [r1, #16]
 80170aa:	4617      	mov	r7, r2
 80170ac:	d1f4      	bne.n	8017098 <rmw_wait+0x1d4>
 80170ae:	2f00      	cmp	r7, #0
 80170b0:	d03e      	beq.n	8017130 <rmw_wait+0x26c>
 80170b2:	2000      	movs	r0, #0
 80170b4:	b009      	add	sp, #36	@ 0x24
 80170b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80170ba:	68a0      	ldr	r0, [r4, #8]
 80170bc:	2100      	movs	r1, #0
 80170be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80170c2:	f7f9 fc09 	bl	80108d8 <uxr_run_session_timeout>
 80170c6:	6864      	ldr	r4, [r4, #4]
 80170c8:	2c00      	cmp	r4, #0
 80170ca:	d1f6      	bne.n	80170ba <rmw_wait+0x1f6>
 80170cc:	e78c      	b.n	8016fe8 <rmw_wait+0x124>
 80170ce:	e9d9 3200 	ldrd	r3, r2, [r9]
 80170d2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80170d6:	3401      	adds	r4, #1
 80170d8:	42a3      	cmp	r3, r4
 80170da:	d890      	bhi.n	8016ffe <rmw_wait+0x13a>
 80170dc:	e79e      	b.n	801701c <rmw_wait+0x158>
 80170de:	e9d8 3200 	ldrd	r3, r2, [r8]
 80170e2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80170e6:	3401      	adds	r4, #1
 80170e8:	429c      	cmp	r4, r3
 80170ea:	d39e      	bcc.n	801702a <rmw_wait+0x166>
 80170ec:	e7ac      	b.n	8017048 <rmw_wait+0x184>
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	f47f aef3 	bne.w	8016eda <rmw_wait+0x16>
 80170f4:	2800      	cmp	r0, #0
 80170f6:	f47f aef0 	bne.w	8016eda <rmw_wait+0x16>
 80170fa:	2900      	cmp	r1, #0
 80170fc:	f47f aeed 	bne.w	8016eda <rmw_wait+0x16>
 8017100:	e7d7      	b.n	80170b2 <rmw_wait+0x1ee>
 8017102:	4639      	mov	r1, r7
 8017104:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017108:	f7f9 fc00 	bl	801090c <uxr_run_session_until_data>
 801710c:	6864      	ldr	r4, [r4, #4]
 801710e:	2c00      	cmp	r4, #0
 8017110:	f47f af5f 	bne.w	8016fd2 <rmw_wait+0x10e>
 8017114:	e768      	b.n	8016fe8 <rmw_wait+0x124>
 8017116:	f1b8 0f00 	cmp.w	r8, #0
 801711a:	d032      	beq.n	8017182 <rmw_wait+0x2be>
 801711c:	f8d8 3000 	ldr.w	r3, [r8]
 8017120:	2b00      	cmp	r3, #0
 8017122:	d181      	bne.n	8017028 <rmw_wait+0x164>
 8017124:	461f      	mov	r7, r3
 8017126:	2d00      	cmp	r5, #0
 8017128:	d18f      	bne.n	801704a <rmw_wait+0x186>
 801712a:	462f      	mov	r7, r5
 801712c:	2e00      	cmp	r6, #0
 801712e:	d1a9      	bne.n	8017084 <rmw_wait+0x1c0>
 8017130:	2002      	movs	r0, #2
 8017132:	b009      	add	sp, #36	@ 0x24
 8017134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017138:	2e00      	cmp	r6, #0
 801713a:	d0ba      	beq.n	80170b2 <rmw_wait+0x1ee>
 801713c:	6834      	ldr	r4, [r6, #0]
 801713e:	2701      	movs	r7, #1
 8017140:	2c00      	cmp	r4, #0
 8017142:	d1a1      	bne.n	8017088 <rmw_wait+0x1c4>
 8017144:	e7b5      	b.n	80170b2 <rmw_wait+0x1ee>
 8017146:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801714a:	f7ff f9d5 	bl	80164f8 <rmw_time_total_nsec>
 801714e:	2300      	movs	r3, #0
 8017150:	4a13      	ldr	r2, [pc, #76]	@ (80171a0 <rmw_wait+0x2dc>)
 8017152:	f7e9 fd89 	bl	8000c68 <__aeabi_uldivmod>
 8017156:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801715a:	f171 0300 	sbcs.w	r3, r1, #0
 801715e:	4607      	mov	r7, r0
 8017160:	bfa8      	it	ge
 8017162:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8017166:	e6c9      	b.n	8016efc <rmw_wait+0x38>
 8017168:	f1b8 0f00 	cmp.w	r8, #0
 801716c:	d009      	beq.n	8017182 <rmw_wait+0x2be>
 801716e:	f8d8 3000 	ldr.w	r3, [r8]
 8017172:	464f      	mov	r7, r9
 8017174:	2b00      	cmp	r3, #0
 8017176:	f47f af57 	bne.w	8017028 <rmw_wait+0x164>
 801717a:	2d00      	cmp	r5, #0
 801717c:	f47f af65 	bne.w	801704a <rmw_wait+0x186>
 8017180:	e7d3      	b.n	801712a <rmw_wait+0x266>
 8017182:	b17d      	cbz	r5, 80171a4 <rmw_wait+0x2e0>
 8017184:	682b      	ldr	r3, [r5, #0]
 8017186:	4647      	mov	r7, r8
 8017188:	2b00      	cmp	r3, #0
 801718a:	f47f af60 	bne.w	801704e <rmw_wait+0x18a>
 801718e:	2e00      	cmp	r6, #0
 8017190:	f47f af78 	bne.w	8017084 <rmw_wait+0x1c0>
 8017194:	e7cc      	b.n	8017130 <rmw_wait+0x26c>
 8017196:	bf00      	nop
 8017198:	0801a628 	.word	0x0801a628
 801719c:	2000b50c 	.word	0x2000b50c
 80171a0:	000f4240 	.word	0x000f4240
 80171a4:	2e00      	cmp	r6, #0
 80171a6:	d0c3      	beq.n	8017130 <rmw_wait+0x26c>
 80171a8:	6834      	ldr	r4, [r6, #0]
 80171aa:	462f      	mov	r7, r5
 80171ac:	2c00      	cmp	r4, #0
 80171ae:	f47f af6b 	bne.w	8017088 <rmw_wait+0x1c4>
 80171b2:	e7bd      	b.n	8017130 <rmw_wait+0x26c>

080171b4 <rmw_create_wait_set>:
 80171b4:	b508      	push	{r3, lr}
 80171b6:	4803      	ldr	r0, [pc, #12]	@ (80171c4 <rmw_create_wait_set+0x10>)
 80171b8:	f7ff fbfe 	bl	80169b8 <get_memory>
 80171bc:	b108      	cbz	r0, 80171c2 <rmw_create_wait_set+0xe>
 80171be:	6880      	ldr	r0, [r0, #8]
 80171c0:	3010      	adds	r0, #16
 80171c2:	bd08      	pop	{r3, pc}
 80171c4:	2000b54c 	.word	0x2000b54c

080171c8 <rmw_destroy_wait_set>:
 80171c8:	b508      	push	{r3, lr}
 80171ca:	4b08      	ldr	r3, [pc, #32]	@ (80171ec <rmw_destroy_wait_set+0x24>)
 80171cc:	6819      	ldr	r1, [r3, #0]
 80171ce:	b911      	cbnz	r1, 80171d6 <rmw_destroy_wait_set+0xe>
 80171d0:	e00a      	b.n	80171e8 <rmw_destroy_wait_set+0x20>
 80171d2:	6849      	ldr	r1, [r1, #4]
 80171d4:	b141      	cbz	r1, 80171e8 <rmw_destroy_wait_set+0x20>
 80171d6:	688b      	ldr	r3, [r1, #8]
 80171d8:	3310      	adds	r3, #16
 80171da:	4298      	cmp	r0, r3
 80171dc:	d1f9      	bne.n	80171d2 <rmw_destroy_wait_set+0xa>
 80171de:	4803      	ldr	r0, [pc, #12]	@ (80171ec <rmw_destroy_wait_set+0x24>)
 80171e0:	f7ff fbfa 	bl	80169d8 <put_memory>
 80171e4:	2000      	movs	r0, #0
 80171e6:	bd08      	pop	{r3, pc}
 80171e8:	2001      	movs	r0, #1
 80171ea:	bd08      	pop	{r3, pc}
 80171ec:	2000b54c 	.word	0x2000b54c

080171f0 <sensor_msgs__msg__Imu__init>:
 80171f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171f4:	4605      	mov	r5, r0
 80171f6:	b3c0      	cbz	r0, 801726a <sensor_msgs__msg__Imu__init+0x7a>
 80171f8:	f000 f864 	bl	80172c4 <std_msgs__msg__Header__init>
 80171fc:	4604      	mov	r4, r0
 80171fe:	b310      	cbz	r0, 8017246 <sensor_msgs__msg__Imu__init+0x56>
 8017200:	f105 0618 	add.w	r6, r5, #24
 8017204:	4630      	mov	r0, r6
 8017206:	f000 f893 	bl	8017330 <geometry_msgs__msg__Quaternion__init>
 801720a:	4604      	mov	r4, r0
 801720c:	2800      	cmp	r0, #0
 801720e:	d040      	beq.n	8017292 <sensor_msgs__msg__Imu__init+0xa2>
 8017210:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 8017214:	4638      	mov	r0, r7
 8017216:	f000 f8a1 	bl	801735c <geometry_msgs__msg__Vector3__init>
 801721a:	4604      	mov	r4, r0
 801721c:	b348      	cbz	r0, 8017272 <sensor_msgs__msg__Imu__init+0x82>
 801721e:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 8017222:	4640      	mov	r0, r8
 8017224:	f000 f89a 	bl	801735c <geometry_msgs__msg__Vector3__init>
 8017228:	4604      	mov	r4, r0
 801722a:	b9d8      	cbnz	r0, 8017264 <sensor_msgs__msg__Imu__init+0x74>
 801722c:	4628      	mov	r0, r5
 801722e:	f000 f86d 	bl	801730c <std_msgs__msg__Header__fini>
 8017232:	4630      	mov	r0, r6
 8017234:	f000 f890 	bl	8017358 <geometry_msgs__msg__Quaternion__fini>
 8017238:	4638      	mov	r0, r7
 801723a:	f000 f893 	bl	8017364 <geometry_msgs__msg__Vector3__fini>
 801723e:	4640      	mov	r0, r8
 8017240:	f000 f890 	bl	8017364 <geometry_msgs__msg__Vector3__fini>
 8017244:	e00e      	b.n	8017264 <sensor_msgs__msg__Imu__init+0x74>
 8017246:	4628      	mov	r0, r5
 8017248:	f000 f860 	bl	801730c <std_msgs__msg__Header__fini>
 801724c:	f105 0018 	add.w	r0, r5, #24
 8017250:	f000 f882 	bl	8017358 <geometry_msgs__msg__Quaternion__fini>
 8017254:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8017258:	f000 f884 	bl	8017364 <geometry_msgs__msg__Vector3__fini>
 801725c:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8017260:	f000 f880 	bl	8017364 <geometry_msgs__msg__Vector3__fini>
 8017264:	4620      	mov	r0, r4
 8017266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801726a:	4604      	mov	r4, r0
 801726c:	4620      	mov	r0, r4
 801726e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017272:	4628      	mov	r0, r5
 8017274:	f000 f84a 	bl	801730c <std_msgs__msg__Header__fini>
 8017278:	4630      	mov	r0, r6
 801727a:	f000 f86d 	bl	8017358 <geometry_msgs__msg__Quaternion__fini>
 801727e:	4638      	mov	r0, r7
 8017280:	f000 f870 	bl	8017364 <geometry_msgs__msg__Vector3__fini>
 8017284:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8017288:	f000 f86c 	bl	8017364 <geometry_msgs__msg__Vector3__fini>
 801728c:	4620      	mov	r0, r4
 801728e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017292:	4628      	mov	r0, r5
 8017294:	f000 f83a 	bl	801730c <std_msgs__msg__Header__fini>
 8017298:	4630      	mov	r0, r6
 801729a:	e7d9      	b.n	8017250 <sensor_msgs__msg__Imu__init+0x60>

0801729c <sensor_msgs__msg__Imu__fini>:
 801729c:	b188      	cbz	r0, 80172c2 <sensor_msgs__msg__Imu__fini+0x26>
 801729e:	b510      	push	{r4, lr}
 80172a0:	4604      	mov	r4, r0
 80172a2:	f000 f833 	bl	801730c <std_msgs__msg__Header__fini>
 80172a6:	f104 0018 	add.w	r0, r4, #24
 80172aa:	f000 f855 	bl	8017358 <geometry_msgs__msg__Quaternion__fini>
 80172ae:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80172b2:	f000 f857 	bl	8017364 <geometry_msgs__msg__Vector3__fini>
 80172b6:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 80172ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80172be:	f000 b851 	b.w	8017364 <geometry_msgs__msg__Vector3__fini>
 80172c2:	4770      	bx	lr

080172c4 <std_msgs__msg__Header__init>:
 80172c4:	b570      	push	{r4, r5, r6, lr}
 80172c6:	4605      	mov	r5, r0
 80172c8:	b1a8      	cbz	r0, 80172f6 <std_msgs__msg__Header__init+0x32>
 80172ca:	f000 f82b 	bl	8017324 <builtin_interfaces__msg__Time__init>
 80172ce:	4604      	mov	r4, r0
 80172d0:	b140      	cbz	r0, 80172e4 <std_msgs__msg__Header__init+0x20>
 80172d2:	f105 0608 	add.w	r6, r5, #8
 80172d6:	4630      	mov	r0, r6
 80172d8:	f001 f976 	bl	80185c8 <rosidl_runtime_c__String__init>
 80172dc:	4604      	mov	r4, r0
 80172de:	b168      	cbz	r0, 80172fc <std_msgs__msg__Header__init+0x38>
 80172e0:	4620      	mov	r0, r4
 80172e2:	bd70      	pop	{r4, r5, r6, pc}
 80172e4:	4628      	mov	r0, r5
 80172e6:	f000 f821 	bl	801732c <builtin_interfaces__msg__Time__fini>
 80172ea:	f105 0008 	add.w	r0, r5, #8
 80172ee:	f001 f981 	bl	80185f4 <rosidl_runtime_c__String__fini>
 80172f2:	4620      	mov	r0, r4
 80172f4:	bd70      	pop	{r4, r5, r6, pc}
 80172f6:	4604      	mov	r4, r0
 80172f8:	4620      	mov	r0, r4
 80172fa:	bd70      	pop	{r4, r5, r6, pc}
 80172fc:	4628      	mov	r0, r5
 80172fe:	f000 f815 	bl	801732c <builtin_interfaces__msg__Time__fini>
 8017302:	4630      	mov	r0, r6
 8017304:	f001 f976 	bl	80185f4 <rosidl_runtime_c__String__fini>
 8017308:	e7ea      	b.n	80172e0 <std_msgs__msg__Header__init+0x1c>
 801730a:	bf00      	nop

0801730c <std_msgs__msg__Header__fini>:
 801730c:	b148      	cbz	r0, 8017322 <std_msgs__msg__Header__fini+0x16>
 801730e:	b510      	push	{r4, lr}
 8017310:	4604      	mov	r4, r0
 8017312:	f000 f80b 	bl	801732c <builtin_interfaces__msg__Time__fini>
 8017316:	f104 0008 	add.w	r0, r4, #8
 801731a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801731e:	f001 b969 	b.w	80185f4 <rosidl_runtime_c__String__fini>
 8017322:	4770      	bx	lr

08017324 <builtin_interfaces__msg__Time__init>:
 8017324:	3800      	subs	r0, #0
 8017326:	bf18      	it	ne
 8017328:	2001      	movne	r0, #1
 801732a:	4770      	bx	lr

0801732c <builtin_interfaces__msg__Time__fini>:
 801732c:	4770      	bx	lr
 801732e:	bf00      	nop

08017330 <geometry_msgs__msg__Quaternion__init>:
 8017330:	b160      	cbz	r0, 801734c <geometry_msgs__msg__Quaternion__init+0x1c>
 8017332:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8017350 <geometry_msgs__msg__Quaternion__init+0x20>
 8017336:	2200      	movs	r2, #0
 8017338:	2300      	movs	r3, #0
 801733a:	e9c0 2300 	strd	r2, r3, [r0]
 801733e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017342:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017346:	ed80 7b06 	vstr	d7, [r0, #24]
 801734a:	2001      	movs	r0, #1
 801734c:	4770      	bx	lr
 801734e:	bf00      	nop
 8017350:	00000000 	.word	0x00000000
 8017354:	3ff00000 	.word	0x3ff00000

08017358 <geometry_msgs__msg__Quaternion__fini>:
 8017358:	4770      	bx	lr
 801735a:	bf00      	nop

0801735c <geometry_msgs__msg__Vector3__init>:
 801735c:	3800      	subs	r0, #0
 801735e:	bf18      	it	ne
 8017360:	2001      	movne	r0, #1
 8017362:	4770      	bx	lr

08017364 <geometry_msgs__msg__Vector3__fini>:
 8017364:	4770      	bx	lr
 8017366:	bf00      	nop

08017368 <ucdr_serialize_string>:
 8017368:	b510      	push	{r4, lr}
 801736a:	b082      	sub	sp, #8
 801736c:	4604      	mov	r4, r0
 801736e:	4608      	mov	r0, r1
 8017370:	9101      	str	r1, [sp, #4]
 8017372:	f7e8 ff5f 	bl	8000234 <strlen>
 8017376:	9901      	ldr	r1, [sp, #4]
 8017378:	1c42      	adds	r2, r0, #1
 801737a:	4620      	mov	r0, r4
 801737c:	b002      	add	sp, #8
 801737e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017382:	f7f8 b9e5 	b.w	800f750 <ucdr_serialize_sequence_char>
 8017386:	bf00      	nop

08017388 <ucdr_deserialize_string>:
 8017388:	b500      	push	{lr}
 801738a:	b083      	sub	sp, #12
 801738c:	ab01      	add	r3, sp, #4
 801738e:	f7f8 f9f1 	bl	800f774 <ucdr_deserialize_sequence_char>
 8017392:	b003      	add	sp, #12
 8017394:	f85d fb04 	ldr.w	pc, [sp], #4

08017398 <uxr_init_input_best_effort_stream>:
 8017398:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801739c:	8003      	strh	r3, [r0, #0]
 801739e:	4770      	bx	lr

080173a0 <uxr_reset_input_best_effort_stream>:
 80173a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80173a4:	8003      	strh	r3, [r0, #0]
 80173a6:	4770      	bx	lr

080173a8 <uxr_receive_best_effort_message>:
 80173a8:	b538      	push	{r3, r4, r5, lr}
 80173aa:	4604      	mov	r4, r0
 80173ac:	8800      	ldrh	r0, [r0, #0]
 80173ae:	460d      	mov	r5, r1
 80173b0:	f000 fd42 	bl	8017e38 <uxr_seq_num_cmp>
 80173b4:	4603      	mov	r3, r0
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80173bc:	bfb8      	it	lt
 80173be:	8025      	strhlt	r5, [r4, #0]
 80173c0:	bd38      	pop	{r3, r4, r5, pc}
 80173c2:	bf00      	nop

080173c4 <on_full_input_buffer>:
 80173c4:	b570      	push	{r4, r5, r6, lr}
 80173c6:	4605      	mov	r5, r0
 80173c8:	460c      	mov	r4, r1
 80173ca:	682b      	ldr	r3, [r5, #0]
 80173cc:	6809      	ldr	r1, [r1, #0]
 80173ce:	8920      	ldrh	r0, [r4, #8]
 80173d0:	6862      	ldr	r2, [r4, #4]
 80173d2:	fbb2 f2f0 	udiv	r2, r2, r0
 80173d6:	eba3 0c01 	sub.w	ip, r3, r1
 80173da:	fbbc fcf2 	udiv	ip, ip, r2
 80173de:	f10c 0c01 	add.w	ip, ip, #1
 80173e2:	fa1f f38c 	uxth.w	r3, ip
 80173e6:	fbb3 f6f0 	udiv	r6, r3, r0
 80173ea:	fb00 3316 	mls	r3, r0, r6, r3
 80173ee:	b29b      	uxth	r3, r3
 80173f0:	fb02 f303 	mul.w	r3, r2, r3
 80173f4:	1d18      	adds	r0, r3, #4
 80173f6:	4408      	add	r0, r1
 80173f8:	7d26      	ldrb	r6, [r4, #20]
 80173fa:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80173fe:	b116      	cbz	r6, 8017406 <on_full_input_buffer+0x42>
 8017400:	2600      	movs	r6, #0
 8017402:	f840 6c04 	str.w	r6, [r0, #-4]
 8017406:	2a03      	cmp	r2, #3
 8017408:	d801      	bhi.n	801740e <on_full_input_buffer+0x4a>
 801740a:	2001      	movs	r0, #1
 801740c:	bd70      	pop	{r4, r5, r6, pc}
 801740e:	3308      	adds	r3, #8
 8017410:	4419      	add	r1, r3
 8017412:	4628      	mov	r0, r5
 8017414:	692b      	ldr	r3, [r5, #16]
 8017416:	3a04      	subs	r2, #4
 8017418:	f7f4 fd4a 	bl	800beb0 <ucdr_init_buffer_origin>
 801741c:	4628      	mov	r0, r5
 801741e:	4903      	ldr	r1, [pc, #12]	@ (801742c <on_full_input_buffer+0x68>)
 8017420:	4622      	mov	r2, r4
 8017422:	f7f4 fd21 	bl	800be68 <ucdr_set_on_full_buffer_callback>
 8017426:	2000      	movs	r0, #0
 8017428:	bd70      	pop	{r4, r5, r6, pc}
 801742a:	bf00      	nop
 801742c:	080173c5 	.word	0x080173c5

08017430 <uxr_init_input_reliable_stream>:
 8017430:	b500      	push	{lr}
 8017432:	e9c0 1200 	strd	r1, r2, [r0]
 8017436:	f04f 0e00 	mov.w	lr, #0
 801743a:	9a01      	ldr	r2, [sp, #4]
 801743c:	8103      	strh	r3, [r0, #8]
 801743e:	6102      	str	r2, [r0, #16]
 8017440:	f880 e014 	strb.w	lr, [r0, #20]
 8017444:	b1d3      	cbz	r3, 801747c <uxr_init_input_reliable_stream+0x4c>
 8017446:	f8c1 e000 	str.w	lr, [r1]
 801744a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801744e:	f1bc 0f01 	cmp.w	ip, #1
 8017452:	d913      	bls.n	801747c <uxr_init_input_reliable_stream+0x4c>
 8017454:	2301      	movs	r3, #1
 8017456:	fbb3 f1fc 	udiv	r1, r3, ip
 801745a:	fb0c 3111 	mls	r1, ip, r1, r3
 801745e:	b289      	uxth	r1, r1
 8017460:	6842      	ldr	r2, [r0, #4]
 8017462:	fbb2 f2fc 	udiv	r2, r2, ip
 8017466:	fb01 f202 	mul.w	r2, r1, r2
 801746a:	6801      	ldr	r1, [r0, #0]
 801746c:	f841 e002 	str.w	lr, [r1, r2]
 8017470:	3301      	adds	r3, #1
 8017472:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017476:	b29b      	uxth	r3, r3
 8017478:	459c      	cmp	ip, r3
 801747a:	d8ec      	bhi.n	8017456 <uxr_init_input_reliable_stream+0x26>
 801747c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017480:	60c3      	str	r3, [r0, #12]
 8017482:	f85d fb04 	ldr.w	pc, [sp], #4
 8017486:	bf00      	nop

08017488 <uxr_reset_input_reliable_stream>:
 8017488:	8901      	ldrh	r1, [r0, #8]
 801748a:	b1e9      	cbz	r1, 80174c8 <uxr_reset_input_reliable_stream+0x40>
 801748c:	f04f 0c00 	mov.w	ip, #0
 8017490:	b500      	push	{lr}
 8017492:	4663      	mov	r3, ip
 8017494:	46e6      	mov	lr, ip
 8017496:	fbb3 f2f1 	udiv	r2, r3, r1
 801749a:	fb01 3312 	mls	r3, r1, r2, r3
 801749e:	b29b      	uxth	r3, r3
 80174a0:	6842      	ldr	r2, [r0, #4]
 80174a2:	fbb2 f2f1 	udiv	r2, r2, r1
 80174a6:	fb02 f303 	mul.w	r3, r2, r3
 80174aa:	6802      	ldr	r2, [r0, #0]
 80174ac:	f842 e003 	str.w	lr, [r2, r3]
 80174b0:	f10c 0c01 	add.w	ip, ip, #1
 80174b4:	8901      	ldrh	r1, [r0, #8]
 80174b6:	fa1f f38c 	uxth.w	r3, ip
 80174ba:	4299      	cmp	r1, r3
 80174bc:	d8eb      	bhi.n	8017496 <uxr_reset_input_reliable_stream+0xe>
 80174be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80174c2:	60c3      	str	r3, [r0, #12]
 80174c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80174c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80174cc:	60c3      	str	r3, [r0, #12]
 80174ce:	4770      	bx	lr

080174d0 <uxr_receive_reliable_message>:
 80174d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174d4:	4604      	mov	r4, r0
 80174d6:	460d      	mov	r5, r1
 80174d8:	8901      	ldrh	r1, [r0, #8]
 80174da:	8980      	ldrh	r0, [r0, #12]
 80174dc:	4690      	mov	r8, r2
 80174de:	461f      	mov	r7, r3
 80174e0:	f000 fca2 	bl	8017e28 <uxr_seq_num_add>
 80174e4:	4629      	mov	r1, r5
 80174e6:	4606      	mov	r6, r0
 80174e8:	89a0      	ldrh	r0, [r4, #12]
 80174ea:	f000 fca5 	bl	8017e38 <uxr_seq_num_cmp>
 80174ee:	2800      	cmp	r0, #0
 80174f0:	db0a      	blt.n	8017508 <uxr_receive_reliable_message+0x38>
 80174f2:	2600      	movs	r6, #0
 80174f4:	89e0      	ldrh	r0, [r4, #14]
 80174f6:	4629      	mov	r1, r5
 80174f8:	f000 fc9e 	bl	8017e38 <uxr_seq_num_cmp>
 80174fc:	2800      	cmp	r0, #0
 80174fe:	da00      	bge.n	8017502 <uxr_receive_reliable_message+0x32>
 8017500:	81e5      	strh	r5, [r4, #14]
 8017502:	4630      	mov	r0, r6
 8017504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017508:	4630      	mov	r0, r6
 801750a:	4629      	mov	r1, r5
 801750c:	f000 fc94 	bl	8017e38 <uxr_seq_num_cmp>
 8017510:	2800      	cmp	r0, #0
 8017512:	dbee      	blt.n	80174f2 <uxr_receive_reliable_message+0x22>
 8017514:	6923      	ldr	r3, [r4, #16]
 8017516:	4640      	mov	r0, r8
 8017518:	4798      	blx	r3
 801751a:	2101      	movs	r1, #1
 801751c:	4681      	mov	r9, r0
 801751e:	89a0      	ldrh	r0, [r4, #12]
 8017520:	f000 fc82 	bl	8017e28 <uxr_seq_num_add>
 8017524:	f1b9 0f00 	cmp.w	r9, #0
 8017528:	d101      	bne.n	801752e <uxr_receive_reliable_message+0x5e>
 801752a:	4285      	cmp	r5, r0
 801752c:	d047      	beq.n	80175be <uxr_receive_reliable_message+0xee>
 801752e:	8922      	ldrh	r2, [r4, #8]
 8017530:	fbb5 f0f2 	udiv	r0, r5, r2
 8017534:	fb02 5010 	mls	r0, r2, r0, r5
 8017538:	b280      	uxth	r0, r0
 801753a:	6863      	ldr	r3, [r4, #4]
 801753c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017540:	fb00 f303 	mul.w	r3, r0, r3
 8017544:	6820      	ldr	r0, [r4, #0]
 8017546:	3304      	adds	r3, #4
 8017548:	4418      	add	r0, r3
 801754a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d1cf      	bne.n	80174f2 <uxr_receive_reliable_message+0x22>
 8017552:	4641      	mov	r1, r8
 8017554:	463a      	mov	r2, r7
 8017556:	f001 fe48 	bl	80191ea <memcpy>
 801755a:	8921      	ldrh	r1, [r4, #8]
 801755c:	fbb5 f2f1 	udiv	r2, r5, r1
 8017560:	fb01 5212 	mls	r2, r1, r2, r5
 8017564:	b292      	uxth	r2, r2
 8017566:	6863      	ldr	r3, [r4, #4]
 8017568:	fbb3 f3f1 	udiv	r3, r3, r1
 801756c:	fb02 f303 	mul.w	r3, r2, r3
 8017570:	6822      	ldr	r2, [r4, #0]
 8017572:	50d7      	str	r7, [r2, r3]
 8017574:	9a08      	ldr	r2, [sp, #32]
 8017576:	2301      	movs	r3, #1
 8017578:	7013      	strb	r3, [r2, #0]
 801757a:	f1b9 0f00 	cmp.w	r9, #0
 801757e:	d0b8      	beq.n	80174f2 <uxr_receive_reliable_message+0x22>
 8017580:	89a6      	ldrh	r6, [r4, #12]
 8017582:	4630      	mov	r0, r6
 8017584:	2101      	movs	r1, #1
 8017586:	f000 fc4f 	bl	8017e28 <uxr_seq_num_add>
 801758a:	8922      	ldrh	r2, [r4, #8]
 801758c:	6863      	ldr	r3, [r4, #4]
 801758e:	fbb3 f3f2 	udiv	r3, r3, r2
 8017592:	4606      	mov	r6, r0
 8017594:	fbb0 f0f2 	udiv	r0, r0, r2
 8017598:	fb02 6010 	mls	r0, r2, r0, r6
 801759c:	b280      	uxth	r0, r0
 801759e:	fb00 f303 	mul.w	r3, r0, r3
 80175a2:	6820      	ldr	r0, [r4, #0]
 80175a4:	3304      	adds	r3, #4
 80175a6:	4418      	add	r0, r3
 80175a8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d0a0      	beq.n	80174f2 <uxr_receive_reliable_message+0x22>
 80175b0:	6923      	ldr	r3, [r4, #16]
 80175b2:	4798      	blx	r3
 80175b4:	2802      	cmp	r0, #2
 80175b6:	d008      	beq.n	80175ca <uxr_receive_reliable_message+0xfa>
 80175b8:	2801      	cmp	r0, #1
 80175ba:	d0e2      	beq.n	8017582 <uxr_receive_reliable_message+0xb2>
 80175bc:	e799      	b.n	80174f2 <uxr_receive_reliable_message+0x22>
 80175be:	9b08      	ldr	r3, [sp, #32]
 80175c0:	81a5      	strh	r5, [r4, #12]
 80175c2:	2601      	movs	r6, #1
 80175c4:	f883 9000 	strb.w	r9, [r3]
 80175c8:	e794      	b.n	80174f4 <uxr_receive_reliable_message+0x24>
 80175ca:	2601      	movs	r6, #1
 80175cc:	e792      	b.n	80174f4 <uxr_receive_reliable_message+0x24>
 80175ce:	bf00      	nop

080175d0 <uxr_next_input_reliable_buffer_available>:
 80175d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175d4:	4604      	mov	r4, r0
 80175d6:	460f      	mov	r7, r1
 80175d8:	8980      	ldrh	r0, [r0, #12]
 80175da:	2101      	movs	r1, #1
 80175dc:	4690      	mov	r8, r2
 80175de:	f000 fc23 	bl	8017e28 <uxr_seq_num_add>
 80175e2:	8922      	ldrh	r2, [r4, #8]
 80175e4:	fbb0 f6f2 	udiv	r6, r0, r2
 80175e8:	fb02 0616 	mls	r6, r2, r6, r0
 80175ec:	b2b6      	uxth	r6, r6
 80175ee:	6863      	ldr	r3, [r4, #4]
 80175f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80175f4:	fb06 f303 	mul.w	r3, r6, r3
 80175f8:	6826      	ldr	r6, [r4, #0]
 80175fa:	3304      	adds	r3, #4
 80175fc:	441e      	add	r6, r3
 80175fe:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8017602:	f1b9 0f00 	cmp.w	r9, #0
 8017606:	d023      	beq.n	8017650 <uxr_next_input_reliable_buffer_available+0x80>
 8017608:	6923      	ldr	r3, [r4, #16]
 801760a:	4605      	mov	r5, r0
 801760c:	4630      	mov	r0, r6
 801760e:	4798      	blx	r3
 8017610:	4682      	mov	sl, r0
 8017612:	b300      	cbz	r0, 8017656 <uxr_next_input_reliable_buffer_available+0x86>
 8017614:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8017618:	2101      	movs	r1, #1
 801761a:	4650      	mov	r0, sl
 801761c:	f000 fc04 	bl	8017e28 <uxr_seq_num_add>
 8017620:	8921      	ldrh	r1, [r4, #8]
 8017622:	fbb0 f2f1 	udiv	r2, r0, r1
 8017626:	4682      	mov	sl, r0
 8017628:	fb01 0212 	mls	r2, r1, r2, r0
 801762c:	e9d4 0300 	ldrd	r0, r3, [r4]
 8017630:	b292      	uxth	r2, r2
 8017632:	fbb3 f3f1 	udiv	r3, r3, r1
 8017636:	fb02 f303 	mul.w	r3, r2, r3
 801763a:	3304      	adds	r3, #4
 801763c:	4418      	add	r0, r3
 801763e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017642:	b12b      	cbz	r3, 8017650 <uxr_next_input_reliable_buffer_available+0x80>
 8017644:	6923      	ldr	r3, [r4, #16]
 8017646:	4798      	blx	r3
 8017648:	2802      	cmp	r0, #2
 801764a:	d01b      	beq.n	8017684 <uxr_next_input_reliable_buffer_available+0xb4>
 801764c:	2801      	cmp	r0, #1
 801764e:	d0e3      	beq.n	8017618 <uxr_next_input_reliable_buffer_available+0x48>
 8017650:	2000      	movs	r0, #0
 8017652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017656:	464a      	mov	r2, r9
 8017658:	4631      	mov	r1, r6
 801765a:	4638      	mov	r0, r7
 801765c:	f7f4 fc30 	bl	800bec0 <ucdr_init_buffer>
 8017660:	8921      	ldrh	r1, [r4, #8]
 8017662:	fbb5 f2f1 	udiv	r2, r5, r1
 8017666:	fb01 5212 	mls	r2, r1, r2, r5
 801766a:	b292      	uxth	r2, r2
 801766c:	6863      	ldr	r3, [r4, #4]
 801766e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017672:	fb02 f303 	mul.w	r3, r2, r3
 8017676:	6822      	ldr	r2, [r4, #0]
 8017678:	f842 a003 	str.w	sl, [r2, r3]
 801767c:	2001      	movs	r0, #1
 801767e:	81a5      	strh	r5, [r4, #12]
 8017680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017684:	8920      	ldrh	r0, [r4, #8]
 8017686:	fbb5 f3f0 	udiv	r3, r5, r0
 801768a:	fb00 5513 	mls	r5, r0, r3, r5
 801768e:	b2ad      	uxth	r5, r5
 8017690:	6863      	ldr	r3, [r4, #4]
 8017692:	fbb3 f3f0 	udiv	r3, r3, r0
 8017696:	fb03 f505 	mul.w	r5, r3, r5
 801769a:	6823      	ldr	r3, [r4, #0]
 801769c:	2000      	movs	r0, #0
 801769e:	5158      	str	r0, [r3, r5]
 80176a0:	eb06 0108 	add.w	r1, r6, r8
 80176a4:	eba9 0208 	sub.w	r2, r9, r8
 80176a8:	4638      	mov	r0, r7
 80176aa:	f7f4 fc09 	bl	800bec0 <ucdr_init_buffer>
 80176ae:	4638      	mov	r0, r7
 80176b0:	4903      	ldr	r1, [pc, #12]	@ (80176c0 <uxr_next_input_reliable_buffer_available+0xf0>)
 80176b2:	4622      	mov	r2, r4
 80176b4:	f7f4 fbd8 	bl	800be68 <ucdr_set_on_full_buffer_callback>
 80176b8:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80176bc:	2001      	movs	r0, #1
 80176be:	e7c8      	b.n	8017652 <uxr_next_input_reliable_buffer_available+0x82>
 80176c0:	080173c5 	.word	0x080173c5

080176c4 <uxr_process_heartbeat>:
 80176c4:	b538      	push	{r3, r4, r5, lr}
 80176c6:	4611      	mov	r1, r2
 80176c8:	4604      	mov	r4, r0
 80176ca:	89c0      	ldrh	r0, [r0, #14]
 80176cc:	4615      	mov	r5, r2
 80176ce:	f000 fbb3 	bl	8017e38 <uxr_seq_num_cmp>
 80176d2:	2800      	cmp	r0, #0
 80176d4:	bfb8      	it	lt
 80176d6:	81e5      	strhlt	r5, [r4, #14]
 80176d8:	bd38      	pop	{r3, r4, r5, pc}
 80176da:	bf00      	nop

080176dc <uxr_compute_acknack>:
 80176dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176e0:	8903      	ldrh	r3, [r0, #8]
 80176e2:	8985      	ldrh	r5, [r0, #12]
 80176e4:	4604      	mov	r4, r0
 80176e6:	460e      	mov	r6, r1
 80176e8:	b1d3      	cbz	r3, 8017720 <uxr_compute_acknack+0x44>
 80176ea:	4628      	mov	r0, r5
 80176ec:	2701      	movs	r7, #1
 80176ee:	e003      	b.n	80176f8 <uxr_compute_acknack+0x1c>
 80176f0:	4567      	cmp	r7, ip
 80176f2:	d215      	bcs.n	8017720 <uxr_compute_acknack+0x44>
 80176f4:	89a0      	ldrh	r0, [r4, #12]
 80176f6:	3701      	adds	r7, #1
 80176f8:	b2b9      	uxth	r1, r7
 80176fa:	f000 fb95 	bl	8017e28 <uxr_seq_num_add>
 80176fe:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017702:	fbb0 f3fc 	udiv	r3, r0, ip
 8017706:	fb0c 0313 	mls	r3, ip, r3, r0
 801770a:	b29a      	uxth	r2, r3
 801770c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8017710:	fbb3 f3fc 	udiv	r3, r3, ip
 8017714:	fb02 f303 	mul.w	r3, r2, r3
 8017718:	58cb      	ldr	r3, [r1, r3]
 801771a:	2b00      	cmp	r3, #0
 801771c:	d1e8      	bne.n	80176f0 <uxr_compute_acknack+0x14>
 801771e:	4605      	mov	r5, r0
 8017720:	8035      	strh	r5, [r6, #0]
 8017722:	2101      	movs	r1, #1
 8017724:	4628      	mov	r0, r5
 8017726:	89e7      	ldrh	r7, [r4, #14]
 8017728:	f000 fb82 	bl	8017e30 <uxr_seq_num_sub>
 801772c:	4601      	mov	r1, r0
 801772e:	4638      	mov	r0, r7
 8017730:	f000 fb7e 	bl	8017e30 <uxr_seq_num_sub>
 8017734:	4605      	mov	r5, r0
 8017736:	b318      	cbz	r0, 8017780 <uxr_compute_acknack+0xa4>
 8017738:	f04f 0900 	mov.w	r9, #0
 801773c:	464f      	mov	r7, r9
 801773e:	f04f 0801 	mov.w	r8, #1
 8017742:	fa1f f189 	uxth.w	r1, r9
 8017746:	8830      	ldrh	r0, [r6, #0]
 8017748:	f000 fb6e 	bl	8017e28 <uxr_seq_num_add>
 801774c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017750:	fbb0 f3fc 	udiv	r3, r0, ip
 8017754:	e9d4 1200 	ldrd	r1, r2, [r4]
 8017758:	fb03 001c 	mls	r0, r3, ip, r0
 801775c:	b283      	uxth	r3, r0
 801775e:	fbb2 f2fc 	udiv	r2, r2, ip
 8017762:	fb02 f303 	mul.w	r3, r2, r3
 8017766:	fa08 f209 	lsl.w	r2, r8, r9
 801776a:	58cb      	ldr	r3, [r1, r3]
 801776c:	f109 0901 	add.w	r9, r9, #1
 8017770:	b90b      	cbnz	r3, 8017776 <uxr_compute_acknack+0x9a>
 8017772:	4317      	orrs	r7, r2
 8017774:	b2bf      	uxth	r7, r7
 8017776:	454d      	cmp	r5, r9
 8017778:	d1e3      	bne.n	8017742 <uxr_compute_acknack+0x66>
 801777a:	4638      	mov	r0, r7
 801777c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017780:	4607      	mov	r7, r0
 8017782:	4638      	mov	r0, r7
 8017784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017788 <uxr_init_output_best_effort_stream>:
 8017788:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801778c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8017790:	6001      	str	r1, [r0, #0]
 8017792:	7303      	strb	r3, [r0, #12]
 8017794:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8017798:	4770      	bx	lr
 801779a:	bf00      	nop

0801779c <uxr_reset_output_best_effort_stream>:
 801779c:	7b02      	ldrb	r2, [r0, #12]
 801779e:	6042      	str	r2, [r0, #4]
 80177a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80177a4:	81c3      	strh	r3, [r0, #14]
 80177a6:	4770      	bx	lr

080177a8 <uxr_prepare_best_effort_buffer_to_write>:
 80177a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80177aa:	4604      	mov	r4, r0
 80177ac:	b083      	sub	sp, #12
 80177ae:	6840      	ldr	r0, [r0, #4]
 80177b0:	460d      	mov	r5, r1
 80177b2:	4616      	mov	r6, r2
 80177b4:	f7fa fade 	bl	8011d74 <uxr_submessage_padding>
 80177b8:	6863      	ldr	r3, [r4, #4]
 80177ba:	4418      	add	r0, r3
 80177bc:	68a3      	ldr	r3, [r4, #8]
 80177be:	1942      	adds	r2, r0, r5
 80177c0:	4293      	cmp	r3, r2
 80177c2:	bf2c      	ite	cs
 80177c4:	2701      	movcs	r7, #1
 80177c6:	2700      	movcc	r7, #0
 80177c8:	d202      	bcs.n	80177d0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80177ca:	4638      	mov	r0, r7
 80177cc:	b003      	add	sp, #12
 80177ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177d0:	9000      	str	r0, [sp, #0]
 80177d2:	6821      	ldr	r1, [r4, #0]
 80177d4:	4630      	mov	r0, r6
 80177d6:	2300      	movs	r3, #0
 80177d8:	f7f4 fb60 	bl	800be9c <ucdr_init_buffer_origin_offset>
 80177dc:	6861      	ldr	r1, [r4, #4]
 80177de:	4638      	mov	r0, r7
 80177e0:	4429      	add	r1, r5
 80177e2:	6061      	str	r1, [r4, #4]
 80177e4:	b003      	add	sp, #12
 80177e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080177e8 <uxr_prepare_best_effort_buffer_to_send>:
 80177e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177ec:	4604      	mov	r4, r0
 80177ee:	461d      	mov	r5, r3
 80177f0:	6840      	ldr	r0, [r0, #4]
 80177f2:	7b23      	ldrb	r3, [r4, #12]
 80177f4:	4298      	cmp	r0, r3
 80177f6:	bf8c      	ite	hi
 80177f8:	2601      	movhi	r6, #1
 80177fa:	2600      	movls	r6, #0
 80177fc:	d802      	bhi.n	8017804 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80177fe:	4630      	mov	r0, r6
 8017800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017804:	4688      	mov	r8, r1
 8017806:	89e0      	ldrh	r0, [r4, #14]
 8017808:	2101      	movs	r1, #1
 801780a:	4617      	mov	r7, r2
 801780c:	f000 fb0c 	bl	8017e28 <uxr_seq_num_add>
 8017810:	6823      	ldr	r3, [r4, #0]
 8017812:	81e0      	strh	r0, [r4, #14]
 8017814:	8028      	strh	r0, [r5, #0]
 8017816:	f8c8 3000 	str.w	r3, [r8]
 801781a:	6863      	ldr	r3, [r4, #4]
 801781c:	603b      	str	r3, [r7, #0]
 801781e:	7b23      	ldrb	r3, [r4, #12]
 8017820:	6063      	str	r3, [r4, #4]
 8017822:	4630      	mov	r0, r6
 8017824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017828 <on_full_output_buffer>:
 8017828:	b538      	push	{r3, r4, r5, lr}
 801782a:	6802      	ldr	r2, [r0, #0]
 801782c:	460c      	mov	r4, r1
 801782e:	6809      	ldr	r1, [r1, #0]
 8017830:	8923      	ldrh	r3, [r4, #8]
 8017832:	eba2 0c01 	sub.w	ip, r2, r1
 8017836:	6862      	ldr	r2, [r4, #4]
 8017838:	fbb2 f2f3 	udiv	r2, r2, r3
 801783c:	fbbc fcf2 	udiv	ip, ip, r2
 8017840:	f10c 0c01 	add.w	ip, ip, #1
 8017844:	fa1f fc8c 	uxth.w	ip, ip
 8017848:	fbbc fef3 	udiv	lr, ip, r3
 801784c:	fb03 c31e 	mls	r3, r3, lr, ip
 8017850:	b29b      	uxth	r3, r3
 8017852:	fb02 f303 	mul.w	r3, r2, r3
 8017856:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801785a:	58ca      	ldr	r2, [r1, r3]
 801785c:	4463      	add	r3, ip
 801785e:	eba2 020c 	sub.w	r2, r2, ip
 8017862:	3308      	adds	r3, #8
 8017864:	4605      	mov	r5, r0
 8017866:	4419      	add	r1, r3
 8017868:	3a04      	subs	r2, #4
 801786a:	6903      	ldr	r3, [r0, #16]
 801786c:	f7f4 fb20 	bl	800beb0 <ucdr_init_buffer_origin>
 8017870:	4628      	mov	r0, r5
 8017872:	4903      	ldr	r1, [pc, #12]	@ (8017880 <on_full_output_buffer+0x58>)
 8017874:	4622      	mov	r2, r4
 8017876:	f7f4 faf7 	bl	800be68 <ucdr_set_on_full_buffer_callback>
 801787a:	2000      	movs	r0, #0
 801787c:	bd38      	pop	{r3, r4, r5, pc}
 801787e:	bf00      	nop
 8017880:	08017829 	.word	0x08017829

08017884 <uxr_init_output_reliable_stream>:
 8017884:	b410      	push	{r4}
 8017886:	f89d c004 	ldrb.w	ip, [sp, #4]
 801788a:	8103      	strh	r3, [r0, #8]
 801788c:	e9c0 1200 	strd	r1, r2, [r0]
 8017890:	f880 c00c 	strb.w	ip, [r0, #12]
 8017894:	b1d3      	cbz	r3, 80178cc <uxr_init_output_reliable_stream+0x48>
 8017896:	f8c1 c000 	str.w	ip, [r1]
 801789a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801789e:	f1bc 0f01 	cmp.w	ip, #1
 80178a2:	d913      	bls.n	80178cc <uxr_init_output_reliable_stream+0x48>
 80178a4:	2301      	movs	r3, #1
 80178a6:	fbb3 f1fc 	udiv	r1, r3, ip
 80178aa:	fb0c 3111 	mls	r1, ip, r1, r3
 80178ae:	b289      	uxth	r1, r1
 80178b0:	6842      	ldr	r2, [r0, #4]
 80178b2:	6804      	ldr	r4, [r0, #0]
 80178b4:	fbb2 f2fc 	udiv	r2, r2, ip
 80178b8:	fb01 f202 	mul.w	r2, r1, r2
 80178bc:	7b01      	ldrb	r1, [r0, #12]
 80178be:	50a1      	str	r1, [r4, r2]
 80178c0:	3301      	adds	r3, #1
 80178c2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80178c6:	b29b      	uxth	r3, r3
 80178c8:	459c      	cmp	ip, r3
 80178ca:	d8ec      	bhi.n	80178a6 <uxr_init_output_reliable_stream+0x22>
 80178cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80178d0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80178d4:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80178d8:	4905      	ldr	r1, [pc, #20]	@ (80178f0 <uxr_init_output_reliable_stream+0x6c>)
 80178da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80178de:	f8c0 100e 	str.w	r1, [r0, #14]
 80178e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80178e6:	2300      	movs	r3, #0
 80178e8:	8242      	strh	r2, [r0, #18]
 80178ea:	8403      	strh	r3, [r0, #32]
 80178ec:	4770      	bx	lr
 80178ee:	bf00      	nop
 80178f0:	ffff0000 	.word	0xffff0000

080178f4 <uxr_reset_output_reliable_stream>:
 80178f4:	8901      	ldrh	r1, [r0, #8]
 80178f6:	b1b1      	cbz	r1, 8017926 <uxr_reset_output_reliable_stream+0x32>
 80178f8:	f04f 0c00 	mov.w	ip, #0
 80178fc:	4663      	mov	r3, ip
 80178fe:	fbb3 f2f1 	udiv	r2, r3, r1
 8017902:	fb01 3312 	mls	r3, r1, r2, r3
 8017906:	b29b      	uxth	r3, r3
 8017908:	6842      	ldr	r2, [r0, #4]
 801790a:	fbb2 f2f1 	udiv	r2, r2, r1
 801790e:	6801      	ldr	r1, [r0, #0]
 8017910:	fb02 f303 	mul.w	r3, r2, r3
 8017914:	7b02      	ldrb	r2, [r0, #12]
 8017916:	50ca      	str	r2, [r1, r3]
 8017918:	f10c 0c01 	add.w	ip, ip, #1
 801791c:	8901      	ldrh	r1, [r0, #8]
 801791e:	fa1f f38c 	uxth.w	r3, ip
 8017922:	4299      	cmp	r1, r3
 8017924:	d8eb      	bhi.n	80178fe <uxr_reset_output_reliable_stream+0xa>
 8017926:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801792a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801792e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017932:	4904      	ldr	r1, [pc, #16]	@ (8017944 <uxr_reset_output_reliable_stream+0x50>)
 8017934:	f8c0 100e 	str.w	r1, [r0, #14]
 8017938:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801793c:	2300      	movs	r3, #0
 801793e:	8242      	strh	r2, [r0, #18]
 8017940:	8403      	strh	r3, [r0, #32]
 8017942:	4770      	bx	lr
 8017944:	ffff0000 	.word	0xffff0000

08017948 <uxr_prepare_reliable_buffer_to_write>:
 8017948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801794c:	4604      	mov	r4, r0
 801794e:	b091      	sub	sp, #68	@ 0x44
 8017950:	8900      	ldrh	r0, [r0, #8]
 8017952:	89e6      	ldrh	r6, [r4, #14]
 8017954:	6823      	ldr	r3, [r4, #0]
 8017956:	9204      	str	r2, [sp, #16]
 8017958:	fbb6 f2f0 	udiv	r2, r6, r0
 801795c:	fb00 6212 	mls	r2, r0, r2, r6
 8017960:	b292      	uxth	r2, r2
 8017962:	6865      	ldr	r5, [r4, #4]
 8017964:	fbb5 f5f0 	udiv	r5, r5, r0
 8017968:	fb05 3202 	mla	r2, r5, r2, r3
 801796c:	3204      	adds	r2, #4
 801796e:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8017972:	f894 900c 	ldrb.w	r9, [r4, #12]
 8017976:	9203      	str	r2, [sp, #12]
 8017978:	468b      	mov	fp, r1
 801797a:	1f2f      	subs	r7, r5, #4
 801797c:	2800      	cmp	r0, #0
 801797e:	f000 814c 	beq.w	8017c1a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8017982:	f04f 0c00 	mov.w	ip, #0
 8017986:	46e2      	mov	sl, ip
 8017988:	4661      	mov	r1, ip
 801798a:	fbb1 f2f0 	udiv	r2, r1, r0
 801798e:	fb00 1212 	mls	r2, r0, r2, r1
 8017992:	b292      	uxth	r2, r2
 8017994:	fb05 f202 	mul.w	r2, r5, r2
 8017998:	f10c 0c01 	add.w	ip, ip, #1
 801799c:	589a      	ldr	r2, [r3, r2]
 801799e:	454a      	cmp	r2, r9
 80179a0:	bf08      	it	eq
 80179a2:	f10a 0a01 	addeq.w	sl, sl, #1
 80179a6:	fa1f f18c 	uxth.w	r1, ip
 80179aa:	bf08      	it	eq
 80179ac:	fa1f fa8a 	uxtheq.w	sl, sl
 80179b0:	4281      	cmp	r1, r0
 80179b2:	d3ea      	bcc.n	801798a <uxr_prepare_reliable_buffer_to_write+0x42>
 80179b4:	4640      	mov	r0, r8
 80179b6:	2104      	movs	r1, #4
 80179b8:	f8cd a014 	str.w	sl, [sp, #20]
 80179bc:	f7f4 fa84 	bl	800bec8 <ucdr_alignment>
 80179c0:	4480      	add	r8, r0
 80179c2:	eb08 020b 	add.w	r2, r8, fp
 80179c6:	42ba      	cmp	r2, r7
 80179c8:	f240 80cd 	bls.w	8017b66 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80179cc:	7b22      	ldrb	r2, [r4, #12]
 80179ce:	445a      	add	r2, fp
 80179d0:	42ba      	cmp	r2, r7
 80179d2:	f240 80b5 	bls.w	8017b40 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80179d6:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80179da:	33fc      	adds	r3, #252	@ 0xfc
 80179dc:	b2ba      	uxth	r2, r7
 80179de:	4413      	add	r3, r2
 80179e0:	b29b      	uxth	r3, r3
 80179e2:	fb0a f903 	mul.w	r9, sl, r3
 80179e6:	45d9      	cmp	r9, fp
 80179e8:	9305      	str	r3, [sp, #20]
 80179ea:	9306      	str	r3, [sp, #24]
 80179ec:	f0c0 80b7 	bcc.w	8017b5e <uxr_prepare_reliable_buffer_to_write+0x216>
 80179f0:	f108 0304 	add.w	r3, r8, #4
 80179f4:	42bb      	cmp	r3, r7
 80179f6:	f080 80db 	bcs.w	8017bb0 <uxr_prepare_reliable_buffer_to_write+0x268>
 80179fa:	f1a2 0904 	sub.w	r9, r2, #4
 80179fe:	eba9 0908 	sub.w	r9, r9, r8
 8017a02:	9b05      	ldr	r3, [sp, #20]
 8017a04:	fa1f f989 	uxth.w	r9, r9
 8017a08:	ebab 0b09 	sub.w	fp, fp, r9
 8017a0c:	fbbb f2f3 	udiv	r2, fp, r3
 8017a10:	fb03 b312 	mls	r3, r3, r2, fp
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	f000 80c8 	beq.w	8017baa <uxr_prepare_reliable_buffer_to_write+0x262>
 8017a1a:	3201      	adds	r2, #1
 8017a1c:	b292      	uxth	r2, r2
 8017a1e:	9306      	str	r3, [sp, #24]
 8017a20:	4552      	cmp	r2, sl
 8017a22:	f200 809c 	bhi.w	8017b5e <uxr_prepare_reliable_buffer_to_write+0x216>
 8017a26:	f10d 0b20 	add.w	fp, sp, #32
 8017a2a:	2a00      	cmp	r2, #0
 8017a2c:	d042      	beq.n	8017ab4 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8017a2e:	f8cd 801c 	str.w	r8, [sp, #28]
 8017a32:	f04f 0a00 	mov.w	sl, #0
 8017a36:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017a3a:	9505      	str	r5, [sp, #20]
 8017a3c:	f10d 0b20 	add.w	fp, sp, #32
 8017a40:	4615      	mov	r5, r2
 8017a42:	e000      	b.n	8017a46 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8017a44:	46c1      	mov	r9, r8
 8017a46:	8920      	ldrh	r0, [r4, #8]
 8017a48:	fbb6 f2f0 	udiv	r2, r6, r0
 8017a4c:	fb00 6112 	mls	r1, r0, r2, r6
 8017a50:	b28a      	uxth	r2, r1
 8017a52:	6863      	ldr	r3, [r4, #4]
 8017a54:	fbb3 f1f0 	udiv	r1, r3, r0
 8017a58:	6823      	ldr	r3, [r4, #0]
 8017a5a:	fb02 f101 	mul.w	r1, r2, r1
 8017a5e:	3104      	adds	r1, #4
 8017a60:	4419      	add	r1, r3
 8017a62:	4658      	mov	r0, fp
 8017a64:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8017a68:	9200      	str	r2, [sp, #0]
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	463a      	mov	r2, r7
 8017a6e:	f7f4 fa15 	bl	800be9c <ucdr_init_buffer_origin_offset>
 8017a72:	464a      	mov	r2, r9
 8017a74:	2300      	movs	r3, #0
 8017a76:	210d      	movs	r1, #13
 8017a78:	4658      	mov	r0, fp
 8017a7a:	f7fa f93b 	bl	8011cf4 <uxr_buffer_submessage_header>
 8017a7e:	8921      	ldrh	r1, [r4, #8]
 8017a80:	fbb6 f2f1 	udiv	r2, r6, r1
 8017a84:	fb01 6212 	mls	r2, r1, r2, r6
 8017a88:	b292      	uxth	r2, r2
 8017a8a:	6863      	ldr	r3, [r4, #4]
 8017a8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8017a90:	fb02 f303 	mul.w	r3, r2, r3
 8017a94:	6822      	ldr	r2, [r4, #0]
 8017a96:	4630      	mov	r0, r6
 8017a98:	50d7      	str	r7, [r2, r3]
 8017a9a:	2101      	movs	r1, #1
 8017a9c:	f000 f9c4 	bl	8017e28 <uxr_seq_num_add>
 8017aa0:	f10a 0a01 	add.w	sl, sl, #1
 8017aa4:	fa1f f38a 	uxth.w	r3, sl
 8017aa8:	429d      	cmp	r5, r3
 8017aaa:	4606      	mov	r6, r0
 8017aac:	d8ca      	bhi.n	8017a44 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8017aae:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8017ab2:	9d05      	ldr	r5, [sp, #20]
 8017ab4:	8920      	ldrh	r0, [r4, #8]
 8017ab6:	fbb6 f3f0 	udiv	r3, r6, r0
 8017aba:	fb00 6313 	mls	r3, r0, r3, r6
 8017abe:	b299      	uxth	r1, r3
 8017ac0:	6863      	ldr	r3, [r4, #4]
 8017ac2:	fbb3 f3f0 	udiv	r3, r3, r0
 8017ac6:	fb01 f303 	mul.w	r3, r1, r3
 8017aca:	6821      	ldr	r1, [r4, #0]
 8017acc:	3304      	adds	r3, #4
 8017ace:	4419      	add	r1, r3
 8017ad0:	463a      	mov	r2, r7
 8017ad2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8017ad6:	9000      	str	r0, [sp, #0]
 8017ad8:	2300      	movs	r3, #0
 8017ada:	4658      	mov	r0, fp
 8017adc:	f7f4 f9de 	bl	800be9c <ucdr_init_buffer_origin_offset>
 8017ae0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017ae4:	4658      	mov	r0, fp
 8017ae6:	fa1f f289 	uxth.w	r2, r9
 8017aea:	2302      	movs	r3, #2
 8017aec:	210d      	movs	r1, #13
 8017aee:	f7fa f901 	bl	8011cf4 <uxr_buffer_submessage_header>
 8017af2:	9b03      	ldr	r3, [sp, #12]
 8017af4:	8927      	ldrh	r7, [r4, #8]
 8017af6:	7b20      	ldrb	r0, [r4, #12]
 8017af8:	f108 0104 	add.w	r1, r8, #4
 8017afc:	440b      	add	r3, r1
 8017afe:	4619      	mov	r1, r3
 8017b00:	fbb6 f3f7 	udiv	r3, r6, r7
 8017b04:	fb07 6313 	mls	r3, r7, r3, r6
 8017b08:	f1a5 0208 	sub.w	r2, r5, #8
 8017b0c:	b29d      	uxth	r5, r3
 8017b0e:	3004      	adds	r0, #4
 8017b10:	6863      	ldr	r3, [r4, #4]
 8017b12:	fbb3 f3f7 	udiv	r3, r3, r7
 8017b16:	fb05 f303 	mul.w	r3, r5, r3
 8017b1a:	6825      	ldr	r5, [r4, #0]
 8017b1c:	4448      	add	r0, r9
 8017b1e:	50e8      	str	r0, [r5, r3]
 8017b20:	9d04      	ldr	r5, [sp, #16]
 8017b22:	eba2 0208 	sub.w	r2, r2, r8
 8017b26:	4628      	mov	r0, r5
 8017b28:	f7f4 f9ca 	bl	800bec0 <ucdr_init_buffer>
 8017b2c:	4628      	mov	r0, r5
 8017b2e:	493c      	ldr	r1, [pc, #240]	@ (8017c20 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8017b30:	4622      	mov	r2, r4
 8017b32:	f7f4 f999 	bl	800be68 <ucdr_set_on_full_buffer_callback>
 8017b36:	2001      	movs	r0, #1
 8017b38:	81e6      	strh	r6, [r4, #14]
 8017b3a:	b011      	add	sp, #68	@ 0x44
 8017b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b40:	2101      	movs	r1, #1
 8017b42:	89e0      	ldrh	r0, [r4, #14]
 8017b44:	f000 f970 	bl	8017e28 <uxr_seq_num_add>
 8017b48:	8921      	ldrh	r1, [r4, #8]
 8017b4a:	4605      	mov	r5, r0
 8017b4c:	8a60      	ldrh	r0, [r4, #18]
 8017b4e:	f000 f96b 	bl	8017e28 <uxr_seq_num_add>
 8017b52:	4601      	mov	r1, r0
 8017b54:	4628      	mov	r0, r5
 8017b56:	f000 f96f 	bl	8017e38 <uxr_seq_num_cmp>
 8017b5a:	2800      	cmp	r0, #0
 8017b5c:	dd42      	ble.n	8017be4 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8017b5e:	2000      	movs	r0, #0
 8017b60:	b011      	add	sp, #68	@ 0x44
 8017b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b66:	8921      	ldrh	r1, [r4, #8]
 8017b68:	8a60      	ldrh	r0, [r4, #18]
 8017b6a:	9205      	str	r2, [sp, #20]
 8017b6c:	f000 f95c 	bl	8017e28 <uxr_seq_num_add>
 8017b70:	4601      	mov	r1, r0
 8017b72:	4630      	mov	r0, r6
 8017b74:	f000 f960 	bl	8017e38 <uxr_seq_num_cmp>
 8017b78:	2800      	cmp	r0, #0
 8017b7a:	9a05      	ldr	r2, [sp, #20]
 8017b7c:	dcef      	bgt.n	8017b5e <uxr_prepare_reliable_buffer_to_write+0x216>
 8017b7e:	8927      	ldrh	r7, [r4, #8]
 8017b80:	fbb6 f3f7 	udiv	r3, r6, r7
 8017b84:	fb07 6313 	mls	r3, r7, r3, r6
 8017b88:	b29d      	uxth	r5, r3
 8017b8a:	6863      	ldr	r3, [r4, #4]
 8017b8c:	6824      	ldr	r4, [r4, #0]
 8017b8e:	fbb3 f3f7 	udiv	r3, r3, r7
 8017b92:	fb05 f303 	mul.w	r3, r5, r3
 8017b96:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8017b9a:	50e2      	str	r2, [r4, r3]
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	f8cd 8000 	str.w	r8, [sp]
 8017ba2:	f7f4 f97b 	bl	800be9c <ucdr_init_buffer_origin_offset>
 8017ba6:	2001      	movs	r0, #1
 8017ba8:	e7da      	b.n	8017b60 <uxr_prepare_reliable_buffer_to_write+0x218>
 8017baa:	b293      	uxth	r3, r2
 8017bac:	461a      	mov	r2, r3
 8017bae:	e737      	b.n	8017a20 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8017bb0:	4630      	mov	r0, r6
 8017bb2:	2101      	movs	r1, #1
 8017bb4:	9207      	str	r2, [sp, #28]
 8017bb6:	f000 f937 	bl	8017e28 <uxr_seq_num_add>
 8017bba:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017bbe:	fbb0 f1fc 	udiv	r1, r0, ip
 8017bc2:	fb0c 0111 	mls	r1, ip, r1, r0
 8017bc6:	4606      	mov	r6, r0
 8017bc8:	b288      	uxth	r0, r1
 8017bca:	6863      	ldr	r3, [r4, #4]
 8017bcc:	fbb3 f1fc 	udiv	r1, r3, ip
 8017bd0:	6823      	ldr	r3, [r4, #0]
 8017bd2:	9a07      	ldr	r2, [sp, #28]
 8017bd4:	fb00 f101 	mul.w	r1, r0, r1
 8017bd8:	3104      	adds	r1, #4
 8017bda:	440b      	add	r3, r1
 8017bdc:	9303      	str	r3, [sp, #12]
 8017bde:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8017be2:	e70a      	b.n	80179fa <uxr_prepare_reliable_buffer_to_write+0xb2>
 8017be4:	8921      	ldrh	r1, [r4, #8]
 8017be6:	fbb5 f3f1 	udiv	r3, r5, r1
 8017bea:	fb01 5313 	mls	r3, r1, r3, r5
 8017bee:	b29a      	uxth	r2, r3
 8017bf0:	6863      	ldr	r3, [r4, #4]
 8017bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8017bf6:	6821      	ldr	r1, [r4, #0]
 8017bf8:	9804      	ldr	r0, [sp, #16]
 8017bfa:	fb02 f303 	mul.w	r3, r2, r3
 8017bfe:	3304      	adds	r3, #4
 8017c00:	7b22      	ldrb	r2, [r4, #12]
 8017c02:	4419      	add	r1, r3
 8017c04:	445a      	add	r2, fp
 8017c06:	f841 2c04 	str.w	r2, [r1, #-4]
 8017c0a:	7b23      	ldrb	r3, [r4, #12]
 8017c0c:	9300      	str	r3, [sp, #0]
 8017c0e:	2300      	movs	r3, #0
 8017c10:	f7f4 f944 	bl	800be9c <ucdr_init_buffer_origin_offset>
 8017c14:	81e5      	strh	r5, [r4, #14]
 8017c16:	2001      	movs	r0, #1
 8017c18:	e7a2      	b.n	8017b60 <uxr_prepare_reliable_buffer_to_write+0x218>
 8017c1a:	4682      	mov	sl, r0
 8017c1c:	e6ca      	b.n	80179b4 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8017c1e:	bf00      	nop
 8017c20:	08017829 	.word	0x08017829

08017c24 <uxr_prepare_next_reliable_buffer_to_send>:
 8017c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c26:	4604      	mov	r4, r0
 8017c28:	460f      	mov	r7, r1
 8017c2a:	8a00      	ldrh	r0, [r0, #16]
 8017c2c:	2101      	movs	r1, #1
 8017c2e:	4616      	mov	r6, r2
 8017c30:	461d      	mov	r5, r3
 8017c32:	f000 f8f9 	bl	8017e28 <uxr_seq_num_add>
 8017c36:	8028      	strh	r0, [r5, #0]
 8017c38:	8922      	ldrh	r2, [r4, #8]
 8017c3a:	fbb0 f3f2 	udiv	r3, r0, r2
 8017c3e:	fb02 0c13 	mls	ip, r2, r3, r0
 8017c42:	fa1f fc8c 	uxth.w	ip, ip
 8017c46:	6863      	ldr	r3, [r4, #4]
 8017c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8017c4c:	fb0c fc03 	mul.w	ip, ip, r3
 8017c50:	6823      	ldr	r3, [r4, #0]
 8017c52:	89e1      	ldrh	r1, [r4, #14]
 8017c54:	f10c 0c04 	add.w	ip, ip, #4
 8017c58:	4463      	add	r3, ip
 8017c5a:	603b      	str	r3, [r7, #0]
 8017c5c:	6823      	ldr	r3, [r4, #0]
 8017c5e:	449c      	add	ip, r3
 8017c60:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8017c64:	6033      	str	r3, [r6, #0]
 8017c66:	f000 f8e7 	bl	8017e38 <uxr_seq_num_cmp>
 8017c6a:	2800      	cmp	r0, #0
 8017c6c:	dd01      	ble.n	8017c72 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8017c6e:	2000      	movs	r0, #0
 8017c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c72:	7b23      	ldrb	r3, [r4, #12]
 8017c74:	6832      	ldr	r2, [r6, #0]
 8017c76:	429a      	cmp	r2, r3
 8017c78:	d9f9      	bls.n	8017c6e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8017c7a:	8a61      	ldrh	r1, [r4, #18]
 8017c7c:	8a20      	ldrh	r0, [r4, #16]
 8017c7e:	f000 f8d7 	bl	8017e30 <uxr_seq_num_sub>
 8017c82:	8923      	ldrh	r3, [r4, #8]
 8017c84:	4283      	cmp	r3, r0
 8017c86:	d0f2      	beq.n	8017c6e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8017c88:	8828      	ldrh	r0, [r5, #0]
 8017c8a:	89e3      	ldrh	r3, [r4, #14]
 8017c8c:	8220      	strh	r0, [r4, #16]
 8017c8e:	4298      	cmp	r0, r3
 8017c90:	d001      	beq.n	8017c96 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8017c92:	2001      	movs	r0, #1
 8017c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c96:	2101      	movs	r1, #1
 8017c98:	f000 f8c6 	bl	8017e28 <uxr_seq_num_add>
 8017c9c:	81e0      	strh	r0, [r4, #14]
 8017c9e:	2001      	movs	r0, #1
 8017ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ca2:	bf00      	nop

08017ca4 <uxr_update_output_stream_heartbeat_timestamp>:
 8017ca4:	b570      	push	{r4, r5, r6, lr}
 8017ca6:	8a01      	ldrh	r1, [r0, #16]
 8017ca8:	4604      	mov	r4, r0
 8017caa:	8a40      	ldrh	r0, [r0, #18]
 8017cac:	4615      	mov	r5, r2
 8017cae:	461e      	mov	r6, r3
 8017cb0:	f000 f8c2 	bl	8017e38 <uxr_seq_num_cmp>
 8017cb4:	2800      	cmp	r0, #0
 8017cb6:	db07      	blt.n	8017cc8 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8017cb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017cbc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017cc0:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8017cc4:	2000      	movs	r0, #0
 8017cc6:	bd70      	pop	{r4, r5, r6, pc}
 8017cc8:	f894 0020 	ldrb.w	r0, [r4, #32]
 8017ccc:	b940      	cbnz	r0, 8017ce0 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8017cce:	2301      	movs	r3, #1
 8017cd0:	f884 3020 	strb.w	r3, [r4, #32]
 8017cd4:	3564      	adds	r5, #100	@ 0x64
 8017cd6:	f146 0600 	adc.w	r6, r6, #0
 8017cda:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8017cde:	bd70      	pop	{r4, r5, r6, pc}
 8017ce0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8017ce4:	4295      	cmp	r5, r2
 8017ce6:	eb76 0303 	sbcs.w	r3, r6, r3
 8017cea:	bfa5      	ittet	ge
 8017cec:	3001      	addge	r0, #1
 8017cee:	f884 0020 	strbge.w	r0, [r4, #32]
 8017cf2:	2000      	movlt	r0, #0
 8017cf4:	2001      	movge	r0, #1
 8017cf6:	e7ed      	b.n	8017cd4 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08017cf8 <uxr_begin_output_nack_buffer_it>:
 8017cf8:	8a40      	ldrh	r0, [r0, #18]
 8017cfa:	4770      	bx	lr

08017cfc <uxr_next_reliable_nack_buffer_to_send>:
 8017cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d00:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8017d04:	b082      	sub	sp, #8
 8017d06:	f1b8 0f00 	cmp.w	r8, #0
 8017d0a:	d011      	beq.n	8017d30 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8017d0c:	4604      	mov	r4, r0
 8017d0e:	8818      	ldrh	r0, [r3, #0]
 8017d10:	460e      	mov	r6, r1
 8017d12:	4617      	mov	r7, r2
 8017d14:	461d      	mov	r5, r3
 8017d16:	2101      	movs	r1, #1
 8017d18:	f000 f886 	bl	8017e28 <uxr_seq_num_add>
 8017d1c:	8028      	strh	r0, [r5, #0]
 8017d1e:	8a21      	ldrh	r1, [r4, #16]
 8017d20:	f000 f88a 	bl	8017e38 <uxr_seq_num_cmp>
 8017d24:	2800      	cmp	r0, #0
 8017d26:	dd07      	ble.n	8017d38 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8017d28:	f04f 0800 	mov.w	r8, #0
 8017d2c:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8017d30:	4640      	mov	r0, r8
 8017d32:	b002      	add	sp, #8
 8017d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d38:	8921      	ldrh	r1, [r4, #8]
 8017d3a:	8828      	ldrh	r0, [r5, #0]
 8017d3c:	6823      	ldr	r3, [r4, #0]
 8017d3e:	fbb0 f2f1 	udiv	r2, r0, r1
 8017d42:	fb01 0c12 	mls	ip, r1, r2, r0
 8017d46:	fa1f f28c 	uxth.w	r2, ip
 8017d4a:	9301      	str	r3, [sp, #4]
 8017d4c:	6863      	ldr	r3, [r4, #4]
 8017d4e:	fbb3 fcf1 	udiv	ip, r3, r1
 8017d52:	9b01      	ldr	r3, [sp, #4]
 8017d54:	fb02 fc0c 	mul.w	ip, r2, ip
 8017d58:	f10c 0c04 	add.w	ip, ip, #4
 8017d5c:	4463      	add	r3, ip
 8017d5e:	6033      	str	r3, [r6, #0]
 8017d60:	6823      	ldr	r3, [r4, #0]
 8017d62:	4463      	add	r3, ip
 8017d64:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8017d68:	603b      	str	r3, [r7, #0]
 8017d6a:	7b22      	ldrb	r2, [r4, #12]
 8017d6c:	429a      	cmp	r2, r3
 8017d6e:	d0d2      	beq.n	8017d16 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8017d70:	4640      	mov	r0, r8
 8017d72:	b002      	add	sp, #8
 8017d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017d78 <uxr_process_acknack>:
 8017d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d7a:	4604      	mov	r4, r0
 8017d7c:	460e      	mov	r6, r1
 8017d7e:	4610      	mov	r0, r2
 8017d80:	2101      	movs	r1, #1
 8017d82:	f000 f855 	bl	8017e30 <uxr_seq_num_sub>
 8017d86:	8a61      	ldrh	r1, [r4, #18]
 8017d88:	f000 f852 	bl	8017e30 <uxr_seq_num_sub>
 8017d8c:	b1c0      	cbz	r0, 8017dc0 <uxr_process_acknack+0x48>
 8017d8e:	4605      	mov	r5, r0
 8017d90:	2700      	movs	r7, #0
 8017d92:	2101      	movs	r1, #1
 8017d94:	8a60      	ldrh	r0, [r4, #18]
 8017d96:	f000 f847 	bl	8017e28 <uxr_seq_num_add>
 8017d9a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017d9e:	fbb0 f1fc 	udiv	r1, r0, ip
 8017da2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017da6:	fb0c 0111 	mls	r1, ip, r1, r0
 8017daa:	b289      	uxth	r1, r1
 8017dac:	3701      	adds	r7, #1
 8017dae:	fbb3 f3fc 	udiv	r3, r3, ip
 8017db2:	fb01 f303 	mul.w	r3, r1, r3
 8017db6:	42bd      	cmp	r5, r7
 8017db8:	7b21      	ldrb	r1, [r4, #12]
 8017dba:	8260      	strh	r0, [r4, #18]
 8017dbc:	50d1      	str	r1, [r2, r3]
 8017dbe:	d1e8      	bne.n	8017d92 <uxr_process_acknack+0x1a>
 8017dc0:	3e00      	subs	r6, #0
 8017dc2:	f04f 0300 	mov.w	r3, #0
 8017dc6:	bf18      	it	ne
 8017dc8:	2601      	movne	r6, #1
 8017dca:	f884 3020 	strb.w	r3, [r4, #32]
 8017dce:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8017dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017dd4 <uxr_is_output_up_to_date>:
 8017dd4:	8a01      	ldrh	r1, [r0, #16]
 8017dd6:	8a40      	ldrh	r0, [r0, #18]
 8017dd8:	b508      	push	{r3, lr}
 8017dda:	f000 f82d 	bl	8017e38 <uxr_seq_num_cmp>
 8017dde:	fab0 f080 	clz	r0, r0
 8017de2:	0940      	lsrs	r0, r0, #5
 8017de4:	bd08      	pop	{r3, pc}
 8017de6:	bf00      	nop

08017de8 <get_available_free_slots>:
 8017de8:	8902      	ldrh	r2, [r0, #8]
 8017dea:	b1da      	cbz	r2, 8017e24 <get_available_free_slots+0x3c>
 8017dec:	b530      	push	{r4, r5, lr}
 8017dee:	2100      	movs	r1, #0
 8017df0:	6843      	ldr	r3, [r0, #4]
 8017df2:	6805      	ldr	r5, [r0, #0]
 8017df4:	7b04      	ldrb	r4, [r0, #12]
 8017df6:	fbb3 fef2 	udiv	lr, r3, r2
 8017dfa:	4608      	mov	r0, r1
 8017dfc:	460b      	mov	r3, r1
 8017dfe:	fbb3 fcf2 	udiv	ip, r3, r2
 8017e02:	fb02 331c 	mls	r3, r2, ip, r3
 8017e06:	b29b      	uxth	r3, r3
 8017e08:	fb0e f303 	mul.w	r3, lr, r3
 8017e0c:	3101      	adds	r1, #1
 8017e0e:	f855 c003 	ldr.w	ip, [r5, r3]
 8017e12:	4564      	cmp	r4, ip
 8017e14:	bf08      	it	eq
 8017e16:	3001      	addeq	r0, #1
 8017e18:	b28b      	uxth	r3, r1
 8017e1a:	bf08      	it	eq
 8017e1c:	b280      	uxtheq	r0, r0
 8017e1e:	4293      	cmp	r3, r2
 8017e20:	d3ed      	bcc.n	8017dfe <get_available_free_slots+0x16>
 8017e22:	bd30      	pop	{r4, r5, pc}
 8017e24:	4610      	mov	r0, r2
 8017e26:	4770      	bx	lr

08017e28 <uxr_seq_num_add>:
 8017e28:	4408      	add	r0, r1
 8017e2a:	b280      	uxth	r0, r0
 8017e2c:	4770      	bx	lr
 8017e2e:	bf00      	nop

08017e30 <uxr_seq_num_sub>:
 8017e30:	1a40      	subs	r0, r0, r1
 8017e32:	b280      	uxth	r0, r0
 8017e34:	4770      	bx	lr
 8017e36:	bf00      	nop

08017e38 <uxr_seq_num_cmp>:
 8017e38:	4288      	cmp	r0, r1
 8017e3a:	d011      	beq.n	8017e60 <uxr_seq_num_cmp+0x28>
 8017e3c:	d309      	bcc.n	8017e52 <uxr_seq_num_cmp+0x1a>
 8017e3e:	4288      	cmp	r0, r1
 8017e40:	d910      	bls.n	8017e64 <uxr_seq_num_cmp+0x2c>
 8017e42:	1a40      	subs	r0, r0, r1
 8017e44:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8017e48:	bfd4      	ite	le
 8017e4a:	2001      	movle	r0, #1
 8017e4c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8017e50:	4770      	bx	lr
 8017e52:	1a0b      	subs	r3, r1, r0
 8017e54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017e58:	daf1      	bge.n	8017e3e <uxr_seq_num_cmp+0x6>
 8017e5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017e5e:	4770      	bx	lr
 8017e60:	2000      	movs	r0, #0
 8017e62:	4770      	bx	lr
 8017e64:	2001      	movs	r0, #1
 8017e66:	4770      	bx	lr

08017e68 <rcl_get_default_domain_id>:
 8017e68:	b530      	push	{r4, r5, lr}
 8017e6a:	b083      	sub	sp, #12
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	9300      	str	r3, [sp, #0]
 8017e70:	b1d0      	cbz	r0, 8017ea8 <rcl_get_default_domain_id+0x40>
 8017e72:	4604      	mov	r4, r0
 8017e74:	4669      	mov	r1, sp
 8017e76:	4815      	ldr	r0, [pc, #84]	@ (8017ecc <rcl_get_default_domain_id+0x64>)
 8017e78:	f7fe f82e 	bl	8015ed8 <rcutils_get_env>
 8017e7c:	4602      	mov	r2, r0
 8017e7e:	b110      	cbz	r0, 8017e86 <rcl_get_default_domain_id+0x1e>
 8017e80:	2001      	movs	r0, #1
 8017e82:	b003      	add	sp, #12
 8017e84:	bd30      	pop	{r4, r5, pc}
 8017e86:	9b00      	ldr	r3, [sp, #0]
 8017e88:	b18b      	cbz	r3, 8017eae <rcl_get_default_domain_id+0x46>
 8017e8a:	7818      	ldrb	r0, [r3, #0]
 8017e8c:	2800      	cmp	r0, #0
 8017e8e:	d0f8      	beq.n	8017e82 <rcl_get_default_domain_id+0x1a>
 8017e90:	a901      	add	r1, sp, #4
 8017e92:	4618      	mov	r0, r3
 8017e94:	9201      	str	r2, [sp, #4]
 8017e96:	f000 fe39 	bl	8018b0c <strtoul>
 8017e9a:	4605      	mov	r5, r0
 8017e9c:	b150      	cbz	r0, 8017eb4 <rcl_get_default_domain_id+0x4c>
 8017e9e:	1c43      	adds	r3, r0, #1
 8017ea0:	d00d      	beq.n	8017ebe <rcl_get_default_domain_id+0x56>
 8017ea2:	6025      	str	r5, [r4, #0]
 8017ea4:	2000      	movs	r0, #0
 8017ea6:	e7ec      	b.n	8017e82 <rcl_get_default_domain_id+0x1a>
 8017ea8:	200b      	movs	r0, #11
 8017eaa:	b003      	add	sp, #12
 8017eac:	bd30      	pop	{r4, r5, pc}
 8017eae:	4618      	mov	r0, r3
 8017eb0:	b003      	add	sp, #12
 8017eb2:	bd30      	pop	{r4, r5, pc}
 8017eb4:	9b01      	ldr	r3, [sp, #4]
 8017eb6:	781b      	ldrb	r3, [r3, #0]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d0f2      	beq.n	8017ea2 <rcl_get_default_domain_id+0x3a>
 8017ebc:	e7e0      	b.n	8017e80 <rcl_get_default_domain_id+0x18>
 8017ebe:	f001 f95f 	bl	8019180 <__errno>
 8017ec2:	6803      	ldr	r3, [r0, #0]
 8017ec4:	2b22      	cmp	r3, #34	@ 0x22
 8017ec6:	d1ec      	bne.n	8017ea2 <rcl_get_default_domain_id+0x3a>
 8017ec8:	e7da      	b.n	8017e80 <rcl_get_default_domain_id+0x18>
 8017eca:	bf00      	nop
 8017ecc:	0801b754 	.word	0x0801b754

08017ed0 <rcl_expand_topic_name>:
 8017ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ed4:	b08b      	sub	sp, #44	@ 0x2c
 8017ed6:	9306      	str	r3, [sp, #24]
 8017ed8:	2800      	cmp	r0, #0
 8017eda:	f000 80ad 	beq.w	8018038 <rcl_expand_topic_name+0x168>
 8017ede:	460e      	mov	r6, r1
 8017ee0:	2900      	cmp	r1, #0
 8017ee2:	f000 80a9 	beq.w	8018038 <rcl_expand_topic_name+0x168>
 8017ee6:	4617      	mov	r7, r2
 8017ee8:	2a00      	cmp	r2, #0
 8017eea:	f000 80a5 	beq.w	8018038 <rcl_expand_topic_name+0x168>
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	f000 80a2 	beq.w	8018038 <rcl_expand_topic_name+0x168>
 8017ef4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	f000 809e 	beq.w	8018038 <rcl_expand_topic_name+0x168>
 8017efc:	2200      	movs	r2, #0
 8017efe:	a909      	add	r1, sp, #36	@ 0x24
 8017f00:	4680      	mov	r8, r0
 8017f02:	f000 fa57 	bl	80183b4 <rcl_validate_topic_name>
 8017f06:	4604      	mov	r4, r0
 8017f08:	2800      	cmp	r0, #0
 8017f0a:	f040 8096 	bne.w	801803a <rcl_expand_topic_name+0x16a>
 8017f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	f040 809a 	bne.w	801804a <rcl_expand_topic_name+0x17a>
 8017f16:	4602      	mov	r2, r0
 8017f18:	a909      	add	r1, sp, #36	@ 0x24
 8017f1a:	4630      	mov	r0, r6
 8017f1c:	f7fe fc06 	bl	801672c <rmw_validate_node_name>
 8017f20:	2800      	cmp	r0, #0
 8017f22:	f040 808e 	bne.w	8018042 <rcl_expand_topic_name+0x172>
 8017f26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017f28:	2a00      	cmp	r2, #0
 8017f2a:	f040 8093 	bne.w	8018054 <rcl_expand_topic_name+0x184>
 8017f2e:	a909      	add	r1, sp, #36	@ 0x24
 8017f30:	4638      	mov	r0, r7
 8017f32:	f7fe fbdd 	bl	80166f0 <rmw_validate_namespace>
 8017f36:	2800      	cmp	r0, #0
 8017f38:	f040 8083 	bne.w	8018042 <rcl_expand_topic_name+0x172>
 8017f3c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8017f3e:	2c00      	cmp	r4, #0
 8017f40:	f040 80ed 	bne.w	801811e <rcl_expand_topic_name+0x24e>
 8017f44:	217b      	movs	r1, #123	@ 0x7b
 8017f46:	4640      	mov	r0, r8
 8017f48:	f001 f88e 	bl	8019068 <strchr>
 8017f4c:	f898 3000 	ldrb.w	r3, [r8]
 8017f50:	2b2f      	cmp	r3, #47	@ 0x2f
 8017f52:	4605      	mov	r5, r0
 8017f54:	f000 809e 	beq.w	8018094 <rcl_expand_topic_name+0x1c4>
 8017f58:	2b7e      	cmp	r3, #126	@ 0x7e
 8017f5a:	f040 80a2 	bne.w	80180a2 <rcl_expand_topic_name+0x1d2>
 8017f5e:	4638      	mov	r0, r7
 8017f60:	f7e8 f968 	bl	8000234 <strlen>
 8017f64:	4a82      	ldr	r2, [pc, #520]	@ (8018170 <rcl_expand_topic_name+0x2a0>)
 8017f66:	4b83      	ldr	r3, [pc, #524]	@ (8018174 <rcl_expand_topic_name+0x2a4>)
 8017f68:	2801      	cmp	r0, #1
 8017f6a:	bf18      	it	ne
 8017f6c:	4613      	movne	r3, r2
 8017f6e:	9302      	str	r3, [sp, #8]
 8017f70:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017f72:	9300      	str	r3, [sp, #0]
 8017f74:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8017f78:	f108 0301 	add.w	r3, r8, #1
 8017f7c:	9305      	str	r3, [sp, #20]
 8017f7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017f82:	9301      	str	r3, [sp, #4]
 8017f84:	ab14      	add	r3, sp, #80	@ 0x50
 8017f86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017f88:	f7fd ffce 	bl	8015f28 <rcutils_format_string_limit>
 8017f8c:	4682      	mov	sl, r0
 8017f8e:	2800      	cmp	r0, #0
 8017f90:	f000 80c7 	beq.w	8018122 <rcl_expand_topic_name+0x252>
 8017f94:	2d00      	cmp	r5, #0
 8017f96:	f000 80a2 	beq.w	80180de <rcl_expand_topic_name+0x20e>
 8017f9a:	217b      	movs	r1, #123	@ 0x7b
 8017f9c:	f001 f864 	bl	8019068 <strchr>
 8017fa0:	46d1      	mov	r9, sl
 8017fa2:	4605      	mov	r5, r0
 8017fa4:	9407      	str	r4, [sp, #28]
 8017fa6:	46d3      	mov	fp, sl
 8017fa8:	464c      	mov	r4, r9
 8017faa:	2d00      	cmp	r5, #0
 8017fac:	f000 80be 	beq.w	801812c <rcl_expand_topic_name+0x25c>
 8017fb0:	217d      	movs	r1, #125	@ 0x7d
 8017fb2:	4620      	mov	r0, r4
 8017fb4:	f001 f858 	bl	8019068 <strchr>
 8017fb8:	eba0 0905 	sub.w	r9, r0, r5
 8017fbc:	f109 0a01 	add.w	sl, r9, #1
 8017fc0:	486d      	ldr	r0, [pc, #436]	@ (8018178 <rcl_expand_topic_name+0x2a8>)
 8017fc2:	4652      	mov	r2, sl
 8017fc4:	4629      	mov	r1, r5
 8017fc6:	f001 f85c 	bl	8019082 <strncmp>
 8017fca:	2800      	cmp	r0, #0
 8017fcc:	d067      	beq.n	801809e <rcl_expand_topic_name+0x1ce>
 8017fce:	486b      	ldr	r0, [pc, #428]	@ (801817c <rcl_expand_topic_name+0x2ac>)
 8017fd0:	4652      	mov	r2, sl
 8017fd2:	4629      	mov	r1, r5
 8017fd4:	f001 f855 	bl	8019082 <strncmp>
 8017fd8:	b130      	cbz	r0, 8017fe8 <rcl_expand_topic_name+0x118>
 8017fda:	4869      	ldr	r0, [pc, #420]	@ (8018180 <rcl_expand_topic_name+0x2b0>)
 8017fdc:	4652      	mov	r2, sl
 8017fde:	4629      	mov	r1, r5
 8017fe0:	f001 f84f 	bl	8019082 <strncmp>
 8017fe4:	2800      	cmp	r0, #0
 8017fe6:	d137      	bne.n	8018058 <rcl_expand_topic_name+0x188>
 8017fe8:	46b9      	mov	r9, r7
 8017fea:	ab16      	add	r3, sp, #88	@ 0x58
 8017fec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017ff0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017ff4:	ab14      	add	r3, sp, #80	@ 0x50
 8017ff6:	4628      	mov	r0, r5
 8017ff8:	cb0c      	ldmia	r3, {r2, r3}
 8017ffa:	4651      	mov	r1, sl
 8017ffc:	f7fe f8d0 	bl	80161a0 <rcutils_strndup>
 8018000:	4605      	mov	r5, r0
 8018002:	2800      	cmp	r0, #0
 8018004:	f000 809c 	beq.w	8018140 <rcl_expand_topic_name+0x270>
 8018008:	464a      	mov	r2, r9
 801800a:	4620      	mov	r0, r4
 801800c:	ab14      	add	r3, sp, #80	@ 0x50
 801800e:	4629      	mov	r1, r5
 8018010:	f7fd ffc4 	bl	8015f9c <rcutils_repl_str>
 8018014:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018016:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018018:	4604      	mov	r4, r0
 801801a:	4628      	mov	r0, r5
 801801c:	4798      	blx	r3
 801801e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018020:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018022:	4658      	mov	r0, fp
 8018024:	4798      	blx	r3
 8018026:	2c00      	cmp	r4, #0
 8018028:	d07b      	beq.n	8018122 <rcl_expand_topic_name+0x252>
 801802a:	217b      	movs	r1, #123	@ 0x7b
 801802c:	4620      	mov	r0, r4
 801802e:	f001 f81b 	bl	8019068 <strchr>
 8018032:	46a3      	mov	fp, r4
 8018034:	4605      	mov	r5, r0
 8018036:	e7b8      	b.n	8017faa <rcl_expand_topic_name+0xda>
 8018038:	240b      	movs	r4, #11
 801803a:	4620      	mov	r0, r4
 801803c:	b00b      	add	sp, #44	@ 0x2c
 801803e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018042:	f7fb f8c3 	bl	80131cc <rcl_convert_rmw_ret_to_rcl_ret>
 8018046:	4604      	mov	r4, r0
 8018048:	e7f7      	b.n	801803a <rcl_expand_topic_name+0x16a>
 801804a:	2467      	movs	r4, #103	@ 0x67
 801804c:	4620      	mov	r0, r4
 801804e:	b00b      	add	sp, #44	@ 0x2c
 8018050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018054:	24c9      	movs	r4, #201	@ 0xc9
 8018056:	e7f0      	b.n	801803a <rcl_expand_topic_name+0x16a>
 8018058:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801805c:	9806      	ldr	r0, [sp, #24]
 801805e:	1c69      	adds	r1, r5, #1
 8018060:	f7fe f9b8 	bl	80163d4 <rcutils_string_map_getn>
 8018064:	4681      	mov	r9, r0
 8018066:	2800      	cmp	r0, #0
 8018068:	d1bf      	bne.n	8017fea <rcl_expand_topic_name+0x11a>
 801806a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801806c:	aa16      	add	r2, sp, #88	@ 0x58
 801806e:	6018      	str	r0, [r3, #0]
 8018070:	ca07      	ldmia	r2, {r0, r1, r2}
 8018072:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018076:	ab14      	add	r3, sp, #80	@ 0x50
 8018078:	cb0c      	ldmia	r3, {r2, r3}
 801807a:	4651      	mov	r1, sl
 801807c:	4628      	mov	r0, r5
 801807e:	f7fe f88f 	bl	80161a0 <rcutils_strndup>
 8018082:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018084:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018086:	4798      	blx	r3
 8018088:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801808a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801808c:	4658      	mov	r0, fp
 801808e:	2469      	movs	r4, #105	@ 0x69
 8018090:	4798      	blx	r3
 8018092:	e7d2      	b.n	801803a <rcl_expand_topic_name+0x16a>
 8018094:	2800      	cmp	r0, #0
 8018096:	d05b      	beq.n	8018150 <rcl_expand_topic_name+0x280>
 8018098:	46c1      	mov	r9, r8
 801809a:	46a2      	mov	sl, r4
 801809c:	e782      	b.n	8017fa4 <rcl_expand_topic_name+0xd4>
 801809e:	46b1      	mov	r9, r6
 80180a0:	e7a3      	b.n	8017fea <rcl_expand_topic_name+0x11a>
 80180a2:	2800      	cmp	r0, #0
 80180a4:	d1f8      	bne.n	8018098 <rcl_expand_topic_name+0x1c8>
 80180a6:	4638      	mov	r0, r7
 80180a8:	f7e8 f8c4 	bl	8000234 <strlen>
 80180ac:	4a35      	ldr	r2, [pc, #212]	@ (8018184 <rcl_expand_topic_name+0x2b4>)
 80180ae:	4b36      	ldr	r3, [pc, #216]	@ (8018188 <rcl_expand_topic_name+0x2b8>)
 80180b0:	f8cd 8010 	str.w	r8, [sp, #16]
 80180b4:	2801      	cmp	r0, #1
 80180b6:	bf18      	it	ne
 80180b8:	4613      	movne	r3, r2
 80180ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80180be:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80180c2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80180c4:	9703      	str	r7, [sp, #12]
 80180c6:	9200      	str	r2, [sp, #0]
 80180c8:	ab14      	add	r3, sp, #80	@ 0x50
 80180ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80180cc:	f7fd ff2c 	bl	8015f28 <rcutils_format_string_limit>
 80180d0:	4682      	mov	sl, r0
 80180d2:	4653      	mov	r3, sl
 80180d4:	b32b      	cbz	r3, 8018122 <rcl_expand_topic_name+0x252>
 80180d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80180d8:	f8c3 a000 	str.w	sl, [r3]
 80180dc:	e7ad      	b.n	801803a <rcl_expand_topic_name+0x16a>
 80180de:	f89a 3000 	ldrb.w	r3, [sl]
 80180e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80180e4:	d0f7      	beq.n	80180d6 <rcl_expand_topic_name+0x206>
 80180e6:	4638      	mov	r0, r7
 80180e8:	f7e8 f8a4 	bl	8000234 <strlen>
 80180ec:	4a25      	ldr	r2, [pc, #148]	@ (8018184 <rcl_expand_topic_name+0x2b4>)
 80180ee:	4b26      	ldr	r3, [pc, #152]	@ (8018188 <rcl_expand_topic_name+0x2b8>)
 80180f0:	f8cd a010 	str.w	sl, [sp, #16]
 80180f4:	2801      	cmp	r0, #1
 80180f6:	bf18      	it	ne
 80180f8:	4613      	movne	r3, r2
 80180fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80180fe:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018102:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018104:	9703      	str	r7, [sp, #12]
 8018106:	9200      	str	r2, [sp, #0]
 8018108:	ab14      	add	r3, sp, #80	@ 0x50
 801810a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801810c:	f7fd ff0c 	bl	8015f28 <rcutils_format_string_limit>
 8018110:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018112:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018114:	4605      	mov	r5, r0
 8018116:	4650      	mov	r0, sl
 8018118:	4798      	blx	r3
 801811a:	46aa      	mov	sl, r5
 801811c:	e7d9      	b.n	80180d2 <rcl_expand_topic_name+0x202>
 801811e:	24ca      	movs	r4, #202	@ 0xca
 8018120:	e78b      	b.n	801803a <rcl_expand_topic_name+0x16a>
 8018122:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018124:	2300      	movs	r3, #0
 8018126:	6013      	str	r3, [r2, #0]
 8018128:	240a      	movs	r4, #10
 801812a:	e786      	b.n	801803a <rcl_expand_topic_name+0x16a>
 801812c:	465b      	mov	r3, fp
 801812e:	9c07      	ldr	r4, [sp, #28]
 8018130:	46da      	mov	sl, fp
 8018132:	2b00      	cmp	r3, #0
 8018134:	d1d3      	bne.n	80180de <rcl_expand_topic_name+0x20e>
 8018136:	f898 3000 	ldrb.w	r3, [r8]
 801813a:	2b2f      	cmp	r3, #47	@ 0x2f
 801813c:	d0cb      	beq.n	80180d6 <rcl_expand_topic_name+0x206>
 801813e:	e7b2      	b.n	80180a6 <rcl_expand_topic_name+0x1d6>
 8018140:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8018144:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018146:	6015      	str	r5, [r2, #0]
 8018148:	4658      	mov	r0, fp
 801814a:	4798      	blx	r3
 801814c:	240a      	movs	r4, #10
 801814e:	e774      	b.n	801803a <rcl_expand_topic_name+0x16a>
 8018150:	ab17      	add	r3, sp, #92	@ 0x5c
 8018152:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018156:	e88d 0003 	stmia.w	sp, {r0, r1}
 801815a:	ab14      	add	r3, sp, #80	@ 0x50
 801815c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801815e:	4640      	mov	r0, r8
 8018160:	f7fd fffc 	bl	801615c <rcutils_strdup>
 8018164:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018166:	2800      	cmp	r0, #0
 8018168:	6018      	str	r0, [r3, #0]
 801816a:	bf08      	it	eq
 801816c:	240a      	moveq	r4, #10
 801816e:	e764      	b.n	801803a <rcl_expand_topic_name+0x16a>
 8018170:	0801b764 	.word	0x0801b764
 8018174:	0801ac5c 	.word	0x0801ac5c
 8018178:	0801b76c 	.word	0x0801b76c
 801817c:	0801b774 	.word	0x0801b774
 8018180:	0801b77c 	.word	0x0801b77c
 8018184:	0801ac48 	.word	0x0801ac48
 8018188:	0801ac6c 	.word	0x0801ac6c

0801818c <rcl_get_default_topic_name_substitutions>:
 801818c:	2800      	cmp	r0, #0
 801818e:	bf0c      	ite	eq
 8018190:	200b      	moveq	r0, #11
 8018192:	2000      	movne	r0, #0
 8018194:	4770      	bx	lr
 8018196:	bf00      	nop

08018198 <rcl_get_zero_initialized_guard_condition>:
 8018198:	4a03      	ldr	r2, [pc, #12]	@ (80181a8 <rcl_get_zero_initialized_guard_condition+0x10>)
 801819a:	4603      	mov	r3, r0
 801819c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80181a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80181a4:	4618      	mov	r0, r3
 80181a6:	4770      	bx	lr
 80181a8:	0801b788 	.word	0x0801b788

080181ac <rcl_guard_condition_init>:
 80181ac:	b082      	sub	sp, #8
 80181ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181b0:	b087      	sub	sp, #28
 80181b2:	ac0c      	add	r4, sp, #48	@ 0x30
 80181b4:	e884 000c 	stmia.w	r4, {r2, r3}
 80181b8:	46a6      	mov	lr, r4
 80181ba:	460d      	mov	r5, r1
 80181bc:	4604      	mov	r4, r0
 80181be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80181c2:	f10d 0c04 	add.w	ip, sp, #4
 80181c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80181ca:	f8de 3000 	ldr.w	r3, [lr]
 80181ce:	f8cc 3000 	str.w	r3, [ip]
 80181d2:	a801      	add	r0, sp, #4
 80181d4:	f7f5 f896 	bl	800d304 <rcutils_allocator_is_valid>
 80181d8:	b338      	cbz	r0, 801822a <rcl_guard_condition_init+0x7e>
 80181da:	b334      	cbz	r4, 801822a <rcl_guard_condition_init+0x7e>
 80181dc:	6866      	ldr	r6, [r4, #4]
 80181de:	b9ee      	cbnz	r6, 801821c <rcl_guard_condition_init+0x70>
 80181e0:	b31d      	cbz	r5, 801822a <rcl_guard_condition_init+0x7e>
 80181e2:	4628      	mov	r0, r5
 80181e4:	f7fb f810 	bl	8013208 <rcl_context_is_valid>
 80181e8:	b308      	cbz	r0, 801822e <rcl_guard_condition_init+0x82>
 80181ea:	9b01      	ldr	r3, [sp, #4]
 80181ec:	9905      	ldr	r1, [sp, #20]
 80181ee:	201c      	movs	r0, #28
 80181f0:	4798      	blx	r3
 80181f2:	4607      	mov	r7, r0
 80181f4:	6060      	str	r0, [r4, #4]
 80181f6:	b310      	cbz	r0, 801823e <rcl_guard_condition_init+0x92>
 80181f8:	6828      	ldr	r0, [r5, #0]
 80181fa:	3028      	adds	r0, #40	@ 0x28
 80181fc:	f000 f9ac 	bl	8018558 <rmw_create_guard_condition>
 8018200:	6038      	str	r0, [r7, #0]
 8018202:	6860      	ldr	r0, [r4, #4]
 8018204:	6805      	ldr	r5, [r0, #0]
 8018206:	b1a5      	cbz	r5, 8018232 <rcl_guard_condition_init+0x86>
 8018208:	2301      	movs	r3, #1
 801820a:	ac01      	add	r4, sp, #4
 801820c:	7103      	strb	r3, [r0, #4]
 801820e:	f100 0708 	add.w	r7, r0, #8
 8018212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018214:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018216:	6823      	ldr	r3, [r4, #0]
 8018218:	603b      	str	r3, [r7, #0]
 801821a:	e000      	b.n	801821e <rcl_guard_condition_init+0x72>
 801821c:	2664      	movs	r6, #100	@ 0x64
 801821e:	4630      	mov	r0, r6
 8018220:	b007      	add	sp, #28
 8018222:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018226:	b002      	add	sp, #8
 8018228:	4770      	bx	lr
 801822a:	260b      	movs	r6, #11
 801822c:	e7f7      	b.n	801821e <rcl_guard_condition_init+0x72>
 801822e:	2665      	movs	r6, #101	@ 0x65
 8018230:	e7f5      	b.n	801821e <rcl_guard_condition_init+0x72>
 8018232:	9b02      	ldr	r3, [sp, #8]
 8018234:	9905      	ldr	r1, [sp, #20]
 8018236:	4798      	blx	r3
 8018238:	2601      	movs	r6, #1
 801823a:	6065      	str	r5, [r4, #4]
 801823c:	e7ef      	b.n	801821e <rcl_guard_condition_init+0x72>
 801823e:	260a      	movs	r6, #10
 8018240:	e7ed      	b.n	801821e <rcl_guard_condition_init+0x72>
 8018242:	bf00      	nop

08018244 <rcl_guard_condition_init_from_rmw>:
 8018244:	b082      	sub	sp, #8
 8018246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801824a:	b086      	sub	sp, #24
 801824c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018250:	4604      	mov	r4, r0
 8018252:	f84c 3f04 	str.w	r3, [ip, #4]!
 8018256:	460e      	mov	r6, r1
 8018258:	4617      	mov	r7, r2
 801825a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801825e:	f10d 0e04 	add.w	lr, sp, #4
 8018262:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018266:	f8dc 3000 	ldr.w	r3, [ip]
 801826a:	f8ce 3000 	str.w	r3, [lr]
 801826e:	a801      	add	r0, sp, #4
 8018270:	f7f5 f848 	bl	800d304 <rcutils_allocator_is_valid>
 8018274:	b350      	cbz	r0, 80182cc <rcl_guard_condition_init_from_rmw+0x88>
 8018276:	b34c      	cbz	r4, 80182cc <rcl_guard_condition_init_from_rmw+0x88>
 8018278:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801827c:	f1b8 0f00 	cmp.w	r8, #0
 8018280:	d11e      	bne.n	80182c0 <rcl_guard_condition_init_from_rmw+0x7c>
 8018282:	b31f      	cbz	r7, 80182cc <rcl_guard_condition_init_from_rmw+0x88>
 8018284:	4638      	mov	r0, r7
 8018286:	f7fa ffbf 	bl	8013208 <rcl_context_is_valid>
 801828a:	b328      	cbz	r0, 80182d8 <rcl_guard_condition_init_from_rmw+0x94>
 801828c:	9b01      	ldr	r3, [sp, #4]
 801828e:	9905      	ldr	r1, [sp, #20]
 8018290:	201c      	movs	r0, #28
 8018292:	4798      	blx	r3
 8018294:	4605      	mov	r5, r0
 8018296:	6060      	str	r0, [r4, #4]
 8018298:	b358      	cbz	r0, 80182f2 <rcl_guard_condition_init_from_rmw+0xae>
 801829a:	b1fe      	cbz	r6, 80182dc <rcl_guard_condition_init_from_rmw+0x98>
 801829c:	6006      	str	r6, [r0, #0]
 801829e:	f880 8004 	strb.w	r8, [r0, #4]
 80182a2:	ac01      	add	r4, sp, #4
 80182a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80182a6:	f105 0c08 	add.w	ip, r5, #8
 80182aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80182ae:	6823      	ldr	r3, [r4, #0]
 80182b0:	f8cc 3000 	str.w	r3, [ip]
 80182b4:	2000      	movs	r0, #0
 80182b6:	b006      	add	sp, #24
 80182b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80182bc:	b002      	add	sp, #8
 80182be:	4770      	bx	lr
 80182c0:	2064      	movs	r0, #100	@ 0x64
 80182c2:	b006      	add	sp, #24
 80182c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80182c8:	b002      	add	sp, #8
 80182ca:	4770      	bx	lr
 80182cc:	200b      	movs	r0, #11
 80182ce:	b006      	add	sp, #24
 80182d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80182d4:	b002      	add	sp, #8
 80182d6:	4770      	bx	lr
 80182d8:	2065      	movs	r0, #101	@ 0x65
 80182da:	e7f2      	b.n	80182c2 <rcl_guard_condition_init_from_rmw+0x7e>
 80182dc:	6838      	ldr	r0, [r7, #0]
 80182de:	3028      	adds	r0, #40	@ 0x28
 80182e0:	f000 f93a 	bl	8018558 <rmw_create_guard_condition>
 80182e4:	6028      	str	r0, [r5, #0]
 80182e6:	6865      	ldr	r5, [r4, #4]
 80182e8:	682e      	ldr	r6, [r5, #0]
 80182ea:	b126      	cbz	r6, 80182f6 <rcl_guard_condition_init_from_rmw+0xb2>
 80182ec:	2301      	movs	r3, #1
 80182ee:	712b      	strb	r3, [r5, #4]
 80182f0:	e7d7      	b.n	80182a2 <rcl_guard_condition_init_from_rmw+0x5e>
 80182f2:	200a      	movs	r0, #10
 80182f4:	e7e5      	b.n	80182c2 <rcl_guard_condition_init_from_rmw+0x7e>
 80182f6:	4628      	mov	r0, r5
 80182f8:	9b02      	ldr	r3, [sp, #8]
 80182fa:	9905      	ldr	r1, [sp, #20]
 80182fc:	4798      	blx	r3
 80182fe:	6066      	str	r6, [r4, #4]
 8018300:	2001      	movs	r0, #1
 8018302:	e7de      	b.n	80182c2 <rcl_guard_condition_init_from_rmw+0x7e>

08018304 <rcl_guard_condition_fini>:
 8018304:	b570      	push	{r4, r5, r6, lr}
 8018306:	b082      	sub	sp, #8
 8018308:	b1f0      	cbz	r0, 8018348 <rcl_guard_condition_fini+0x44>
 801830a:	6843      	ldr	r3, [r0, #4]
 801830c:	4604      	mov	r4, r0
 801830e:	b163      	cbz	r3, 801832a <rcl_guard_condition_fini+0x26>
 8018310:	6818      	ldr	r0, [r3, #0]
 8018312:	68de      	ldr	r6, [r3, #12]
 8018314:	6999      	ldr	r1, [r3, #24]
 8018316:	b160      	cbz	r0, 8018332 <rcl_guard_condition_fini+0x2e>
 8018318:	791d      	ldrb	r5, [r3, #4]
 801831a:	b965      	cbnz	r5, 8018336 <rcl_guard_condition_fini+0x32>
 801831c:	4618      	mov	r0, r3
 801831e:	47b0      	blx	r6
 8018320:	2300      	movs	r3, #0
 8018322:	4628      	mov	r0, r5
 8018324:	6063      	str	r3, [r4, #4]
 8018326:	b002      	add	sp, #8
 8018328:	bd70      	pop	{r4, r5, r6, pc}
 801832a:	461d      	mov	r5, r3
 801832c:	4628      	mov	r0, r5
 801832e:	b002      	add	sp, #8
 8018330:	bd70      	pop	{r4, r5, r6, pc}
 8018332:	4605      	mov	r5, r0
 8018334:	e7f2      	b.n	801831c <rcl_guard_condition_fini+0x18>
 8018336:	9101      	str	r1, [sp, #4]
 8018338:	f000 f922 	bl	8018580 <rmw_destroy_guard_condition>
 801833c:	1e05      	subs	r5, r0, #0
 801833e:	6863      	ldr	r3, [r4, #4]
 8018340:	9901      	ldr	r1, [sp, #4]
 8018342:	bf18      	it	ne
 8018344:	2501      	movne	r5, #1
 8018346:	e7e9      	b.n	801831c <rcl_guard_condition_fini+0x18>
 8018348:	250b      	movs	r5, #11
 801834a:	4628      	mov	r0, r5
 801834c:	b002      	add	sp, #8
 801834e:	bd70      	pop	{r4, r5, r6, pc}

08018350 <rcl_guard_condition_get_default_options>:
 8018350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018352:	b087      	sub	sp, #28
 8018354:	4606      	mov	r6, r0
 8018356:	4668      	mov	r0, sp
 8018358:	f7f4 ffc6 	bl	800d2e8 <rcutils_get_default_allocator>
 801835c:	4b09      	ldr	r3, [pc, #36]	@ (8018384 <rcl_guard_condition_get_default_options+0x34>)
 801835e:	46ee      	mov	lr, sp
 8018360:	469c      	mov	ip, r3
 8018362:	461d      	mov	r5, r3
 8018364:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018368:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801836c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801836e:	4634      	mov	r4, r6
 8018370:	f8de 7000 	ldr.w	r7, [lr]
 8018374:	f8cc 7000 	str.w	r7, [ip]
 8018378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801837a:	4630      	mov	r0, r6
 801837c:	6027      	str	r7, [r4, #0]
 801837e:	b007      	add	sp, #28
 8018380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018382:	bf00      	nop
 8018384:	2000b68c 	.word	0x2000b68c

08018388 <rcl_trigger_guard_condition>:
 8018388:	b148      	cbz	r0, 801839e <rcl_trigger_guard_condition+0x16>
 801838a:	b508      	push	{r3, lr}
 801838c:	6843      	ldr	r3, [r0, #4]
 801838e:	b143      	cbz	r3, 80183a2 <rcl_trigger_guard_condition+0x1a>
 8018390:	6818      	ldr	r0, [r3, #0]
 8018392:	f000 f909 	bl	80185a8 <rmw_trigger_guard_condition>
 8018396:	3800      	subs	r0, #0
 8018398:	bf18      	it	ne
 801839a:	2001      	movne	r0, #1
 801839c:	bd08      	pop	{r3, pc}
 801839e:	200b      	movs	r0, #11
 80183a0:	4770      	bx	lr
 80183a2:	200b      	movs	r0, #11
 80183a4:	bd08      	pop	{r3, pc}
 80183a6:	bf00      	nop

080183a8 <rcl_guard_condition_get_rmw_handle>:
 80183a8:	b110      	cbz	r0, 80183b0 <rcl_guard_condition_get_rmw_handle+0x8>
 80183aa:	6840      	ldr	r0, [r0, #4]
 80183ac:	b100      	cbz	r0, 80183b0 <rcl_guard_condition_get_rmw_handle+0x8>
 80183ae:	6800      	ldr	r0, [r0, #0]
 80183b0:	4770      	bx	lr
 80183b2:	bf00      	nop

080183b4 <rcl_validate_topic_name>:
 80183b4:	2800      	cmp	r0, #0
 80183b6:	d07a      	beq.n	80184ae <rcl_validate_topic_name+0xfa>
 80183b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183bc:	460e      	mov	r6, r1
 80183be:	2900      	cmp	r1, #0
 80183c0:	d07c      	beq.n	80184bc <rcl_validate_topic_name+0x108>
 80183c2:	4617      	mov	r7, r2
 80183c4:	4605      	mov	r5, r0
 80183c6:	f7e7 ff35 	bl	8000234 <strlen>
 80183ca:	b1b0      	cbz	r0, 80183fa <rcl_validate_topic_name+0x46>
 80183cc:	f895 9000 	ldrb.w	r9, [r5]
 80183d0:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8018554 <rcl_validate_topic_name+0x1a0>
 80183d4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80183d8:	f013 0304 	ands.w	r3, r3, #4
 80183dc:	d169      	bne.n	80184b2 <rcl_validate_topic_name+0xfe>
 80183de:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80183e2:	f815 2008 	ldrb.w	r2, [r5, r8]
 80183e6:	2a2f      	cmp	r2, #47	@ 0x2f
 80183e8:	d10e      	bne.n	8018408 <rcl_validate_topic_name+0x54>
 80183ea:	2202      	movs	r2, #2
 80183ec:	6032      	str	r2, [r6, #0]
 80183ee:	b36f      	cbz	r7, 801844c <rcl_validate_topic_name+0x98>
 80183f0:	f8c7 8000 	str.w	r8, [r7]
 80183f4:	4618      	mov	r0, r3
 80183f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183fa:	2301      	movs	r3, #1
 80183fc:	6033      	str	r3, [r6, #0]
 80183fe:	b32f      	cbz	r7, 801844c <rcl_validate_topic_name+0x98>
 8018400:	2000      	movs	r0, #0
 8018402:	6038      	str	r0, [r7, #0]
 8018404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018408:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801840c:	461c      	mov	r4, r3
 801840e:	4619      	mov	r1, r3
 8018410:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8018414:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8018418:	f1be 0f09 	cmp.w	lr, #9
 801841c:	d919      	bls.n	8018452 <rcl_validate_topic_name+0x9e>
 801841e:	f022 0e20 	bic.w	lr, r2, #32
 8018422:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8018426:	f1be 0f19 	cmp.w	lr, #25
 801842a:	d912      	bls.n	8018452 <rcl_validate_topic_name+0x9e>
 801842c:	2a5f      	cmp	r2, #95	@ 0x5f
 801842e:	d019      	beq.n	8018464 <rcl_validate_topic_name+0xb0>
 8018430:	2a2f      	cmp	r2, #47	@ 0x2f
 8018432:	d051      	beq.n	80184d8 <rcl_validate_topic_name+0x124>
 8018434:	2a7e      	cmp	r2, #126	@ 0x7e
 8018436:	d048      	beq.n	80184ca <rcl_validate_topic_name+0x116>
 8018438:	2a7b      	cmp	r2, #123	@ 0x7b
 801843a:	d054      	beq.n	80184e6 <rcl_validate_topic_name+0x132>
 801843c:	2a7d      	cmp	r2, #125	@ 0x7d
 801843e:	d161      	bne.n	8018504 <rcl_validate_topic_name+0x150>
 8018440:	2c00      	cmp	r4, #0
 8018442:	d155      	bne.n	80184f0 <rcl_validate_topic_name+0x13c>
 8018444:	2305      	movs	r3, #5
 8018446:	6033      	str	r3, [r6, #0]
 8018448:	b107      	cbz	r7, 801844c <rcl_validate_topic_name+0x98>
 801844a:	6039      	str	r1, [r7, #0]
 801844c:	2000      	movs	r0, #0
 801844e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018452:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018456:	0752      	lsls	r2, r2, #29
 8018458:	d504      	bpl.n	8018464 <rcl_validate_topic_name+0xb0>
 801845a:	b11c      	cbz	r4, 8018464 <rcl_validate_topic_name+0xb0>
 801845c:	b111      	cbz	r1, 8018464 <rcl_validate_topic_name+0xb0>
 801845e:	1e4a      	subs	r2, r1, #1
 8018460:	429a      	cmp	r2, r3
 8018462:	d02d      	beq.n	80184c0 <rcl_validate_topic_name+0x10c>
 8018464:	3101      	adds	r1, #1
 8018466:	4288      	cmp	r0, r1
 8018468:	d1d2      	bne.n	8018410 <rcl_validate_topic_name+0x5c>
 801846a:	2c00      	cmp	r4, #0
 801846c:	d145      	bne.n	80184fa <rcl_validate_topic_name+0x146>
 801846e:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8018472:	d04f      	beq.n	8018514 <rcl_validate_topic_name+0x160>
 8018474:	4620      	mov	r0, r4
 8018476:	2301      	movs	r3, #1
 8018478:	e006      	b.n	8018488 <rcl_validate_topic_name+0xd4>
 801847a:	428b      	cmp	r3, r1
 801847c:	f105 0501 	add.w	r5, r5, #1
 8018480:	f103 0201 	add.w	r2, r3, #1
 8018484:	d236      	bcs.n	80184f4 <rcl_validate_topic_name+0x140>
 8018486:	4613      	mov	r3, r2
 8018488:	4580      	cmp	r8, r0
 801848a:	f100 0001 	add.w	r0, r0, #1
 801848e:	d0f4      	beq.n	801847a <rcl_validate_topic_name+0xc6>
 8018490:	782a      	ldrb	r2, [r5, #0]
 8018492:	2a2f      	cmp	r2, #47	@ 0x2f
 8018494:	d1f1      	bne.n	801847a <rcl_validate_topic_name+0xc6>
 8018496:	786a      	ldrb	r2, [r5, #1]
 8018498:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801849c:	0754      	lsls	r4, r2, #29
 801849e:	d5ec      	bpl.n	801847a <rcl_validate_topic_name+0xc6>
 80184a0:	2204      	movs	r2, #4
 80184a2:	6032      	str	r2, [r6, #0]
 80184a4:	2f00      	cmp	r7, #0
 80184a6:	d0d1      	beq.n	801844c <rcl_validate_topic_name+0x98>
 80184a8:	603b      	str	r3, [r7, #0]
 80184aa:	2000      	movs	r0, #0
 80184ac:	e7aa      	b.n	8018404 <rcl_validate_topic_name+0x50>
 80184ae:	200b      	movs	r0, #11
 80184b0:	4770      	bx	lr
 80184b2:	2304      	movs	r3, #4
 80184b4:	6033      	str	r3, [r6, #0]
 80184b6:	2f00      	cmp	r7, #0
 80184b8:	d1a2      	bne.n	8018400 <rcl_validate_topic_name+0x4c>
 80184ba:	e7c7      	b.n	801844c <rcl_validate_topic_name+0x98>
 80184bc:	200b      	movs	r0, #11
 80184be:	e7a1      	b.n	8018404 <rcl_validate_topic_name+0x50>
 80184c0:	2309      	movs	r3, #9
 80184c2:	6033      	str	r3, [r6, #0]
 80184c4:	2f00      	cmp	r7, #0
 80184c6:	d1c0      	bne.n	801844a <rcl_validate_topic_name+0x96>
 80184c8:	e7c0      	b.n	801844c <rcl_validate_topic_name+0x98>
 80184ca:	2900      	cmp	r1, #0
 80184cc:	d0ca      	beq.n	8018464 <rcl_validate_topic_name+0xb0>
 80184ce:	2306      	movs	r3, #6
 80184d0:	6033      	str	r3, [r6, #0]
 80184d2:	2f00      	cmp	r7, #0
 80184d4:	d1b9      	bne.n	801844a <rcl_validate_topic_name+0x96>
 80184d6:	e7b9      	b.n	801844c <rcl_validate_topic_name+0x98>
 80184d8:	2c00      	cmp	r4, #0
 80184da:	d0c3      	beq.n	8018464 <rcl_validate_topic_name+0xb0>
 80184dc:	2308      	movs	r3, #8
 80184de:	6033      	str	r3, [r6, #0]
 80184e0:	2f00      	cmp	r7, #0
 80184e2:	d1b2      	bne.n	801844a <rcl_validate_topic_name+0x96>
 80184e4:	e7b2      	b.n	801844c <rcl_validate_topic_name+0x98>
 80184e6:	2c00      	cmp	r4, #0
 80184e8:	d1f8      	bne.n	80184dc <rcl_validate_topic_name+0x128>
 80184ea:	460b      	mov	r3, r1
 80184ec:	2401      	movs	r4, #1
 80184ee:	e7b9      	b.n	8018464 <rcl_validate_topic_name+0xb0>
 80184f0:	2400      	movs	r4, #0
 80184f2:	e7b7      	b.n	8018464 <rcl_validate_topic_name+0xb0>
 80184f4:	2000      	movs	r0, #0
 80184f6:	6030      	str	r0, [r6, #0]
 80184f8:	e784      	b.n	8018404 <rcl_validate_topic_name+0x50>
 80184fa:	2205      	movs	r2, #5
 80184fc:	6032      	str	r2, [r6, #0]
 80184fe:	2f00      	cmp	r7, #0
 8018500:	d1d2      	bne.n	80184a8 <rcl_validate_topic_name+0xf4>
 8018502:	e7a3      	b.n	801844c <rcl_validate_topic_name+0x98>
 8018504:	2c00      	cmp	r4, #0
 8018506:	bf14      	ite	ne
 8018508:	2308      	movne	r3, #8
 801850a:	2303      	moveq	r3, #3
 801850c:	6033      	str	r3, [r6, #0]
 801850e:	2f00      	cmp	r7, #0
 8018510:	d19b      	bne.n	801844a <rcl_validate_topic_name+0x96>
 8018512:	e79b      	b.n	801844c <rcl_validate_topic_name+0x98>
 8018514:	2301      	movs	r3, #1
 8018516:	e00a      	b.n	801852e <rcl_validate_topic_name+0x17a>
 8018518:	2c01      	cmp	r4, #1
 801851a:	d013      	beq.n	8018544 <rcl_validate_topic_name+0x190>
 801851c:	4299      	cmp	r1, r3
 801851e:	f104 0401 	add.w	r4, r4, #1
 8018522:	f105 0501 	add.w	r5, r5, #1
 8018526:	f103 0201 	add.w	r2, r3, #1
 801852a:	d9e3      	bls.n	80184f4 <rcl_validate_topic_name+0x140>
 801852c:	4613      	mov	r3, r2
 801852e:	45a0      	cmp	r8, r4
 8018530:	d0f4      	beq.n	801851c <rcl_validate_topic_name+0x168>
 8018532:	782a      	ldrb	r2, [r5, #0]
 8018534:	2a2f      	cmp	r2, #47	@ 0x2f
 8018536:	d1ef      	bne.n	8018518 <rcl_validate_topic_name+0x164>
 8018538:	786a      	ldrb	r2, [r5, #1]
 801853a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801853e:	0752      	lsls	r2, r2, #29
 8018540:	d5ec      	bpl.n	801851c <rcl_validate_topic_name+0x168>
 8018542:	e7ad      	b.n	80184a0 <rcl_validate_topic_name+0xec>
 8018544:	2307      	movs	r3, #7
 8018546:	6033      	str	r3, [r6, #0]
 8018548:	2f00      	cmp	r7, #0
 801854a:	f43f af7f 	beq.w	801844c <rcl_validate_topic_name+0x98>
 801854e:	603c      	str	r4, [r7, #0]
 8018550:	2000      	movs	r0, #0
 8018552:	e757      	b.n	8018404 <rcl_validate_topic_name+0x50>
 8018554:	0801b8f2 	.word	0x0801b8f2

08018558 <rmw_create_guard_condition>:
 8018558:	b538      	push	{r3, r4, r5, lr}
 801855a:	4605      	mov	r5, r0
 801855c:	4807      	ldr	r0, [pc, #28]	@ (801857c <rmw_create_guard_condition+0x24>)
 801855e:	f7fe fa2b 	bl	80169b8 <get_memory>
 8018562:	b148      	cbz	r0, 8018578 <rmw_create_guard_condition+0x20>
 8018564:	6884      	ldr	r4, [r0, #8]
 8018566:	2300      	movs	r3, #0
 8018568:	7423      	strb	r3, [r4, #16]
 801856a:	61e5      	str	r5, [r4, #28]
 801856c:	f7fe fa8c 	bl	8016a88 <rmw_get_implementation_identifier>
 8018570:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8018574:	f104 0014 	add.w	r0, r4, #20
 8018578:	bd38      	pop	{r3, r4, r5, pc}
 801857a:	bf00      	nop
 801857c:	2000b4bc 	.word	0x2000b4bc

08018580 <rmw_destroy_guard_condition>:
 8018580:	b508      	push	{r3, lr}
 8018582:	4b08      	ldr	r3, [pc, #32]	@ (80185a4 <rmw_destroy_guard_condition+0x24>)
 8018584:	6819      	ldr	r1, [r3, #0]
 8018586:	b911      	cbnz	r1, 801858e <rmw_destroy_guard_condition+0xe>
 8018588:	e00a      	b.n	80185a0 <rmw_destroy_guard_condition+0x20>
 801858a:	6849      	ldr	r1, [r1, #4]
 801858c:	b141      	cbz	r1, 80185a0 <rmw_destroy_guard_condition+0x20>
 801858e:	688b      	ldr	r3, [r1, #8]
 8018590:	3314      	adds	r3, #20
 8018592:	4298      	cmp	r0, r3
 8018594:	d1f9      	bne.n	801858a <rmw_destroy_guard_condition+0xa>
 8018596:	4803      	ldr	r0, [pc, #12]	@ (80185a4 <rmw_destroy_guard_condition+0x24>)
 8018598:	f7fe fa1e 	bl	80169d8 <put_memory>
 801859c:	2000      	movs	r0, #0
 801859e:	bd08      	pop	{r3, pc}
 80185a0:	2001      	movs	r0, #1
 80185a2:	bd08      	pop	{r3, pc}
 80185a4:	2000b4bc 	.word	0x2000b4bc

080185a8 <rmw_trigger_guard_condition>:
 80185a8:	b160      	cbz	r0, 80185c4 <rmw_trigger_guard_condition+0x1c>
 80185aa:	b510      	push	{r4, lr}
 80185ac:	4604      	mov	r4, r0
 80185ae:	6800      	ldr	r0, [r0, #0]
 80185b0:	f7f6 fa4e 	bl	800ea50 <is_uxrce_rmw_identifier_valid>
 80185b4:	b908      	cbnz	r0, 80185ba <rmw_trigger_guard_condition+0x12>
 80185b6:	2001      	movs	r0, #1
 80185b8:	bd10      	pop	{r4, pc}
 80185ba:	6863      	ldr	r3, [r4, #4]
 80185bc:	2201      	movs	r2, #1
 80185be:	741a      	strb	r2, [r3, #16]
 80185c0:	2000      	movs	r0, #0
 80185c2:	bd10      	pop	{r4, pc}
 80185c4:	2001      	movs	r0, #1
 80185c6:	4770      	bx	lr

080185c8 <rosidl_runtime_c__String__init>:
 80185c8:	b510      	push	{r4, lr}
 80185ca:	4604      	mov	r4, r0
 80185cc:	b086      	sub	sp, #24
 80185ce:	b170      	cbz	r0, 80185ee <rosidl_runtime_c__String__init+0x26>
 80185d0:	a801      	add	r0, sp, #4
 80185d2:	f7f4 fe89 	bl	800d2e8 <rcutils_get_default_allocator>
 80185d6:	9b01      	ldr	r3, [sp, #4]
 80185d8:	9905      	ldr	r1, [sp, #20]
 80185da:	2001      	movs	r0, #1
 80185dc:	4798      	blx	r3
 80185de:	6020      	str	r0, [r4, #0]
 80185e0:	b128      	cbz	r0, 80185ee <rosidl_runtime_c__String__init+0x26>
 80185e2:	2100      	movs	r1, #0
 80185e4:	2201      	movs	r2, #1
 80185e6:	7001      	strb	r1, [r0, #0]
 80185e8:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80185ec:	4610      	mov	r0, r2
 80185ee:	b006      	add	sp, #24
 80185f0:	bd10      	pop	{r4, pc}
 80185f2:	bf00      	nop

080185f4 <rosidl_runtime_c__String__fini>:
 80185f4:	b320      	cbz	r0, 8018640 <rosidl_runtime_c__String__fini+0x4c>
 80185f6:	b510      	push	{r4, lr}
 80185f8:	6803      	ldr	r3, [r0, #0]
 80185fa:	b086      	sub	sp, #24
 80185fc:	4604      	mov	r4, r0
 80185fe:	b173      	cbz	r3, 801861e <rosidl_runtime_c__String__fini+0x2a>
 8018600:	6883      	ldr	r3, [r0, #8]
 8018602:	b1f3      	cbz	r3, 8018642 <rosidl_runtime_c__String__fini+0x4e>
 8018604:	a801      	add	r0, sp, #4
 8018606:	f7f4 fe6f 	bl	800d2e8 <rcutils_get_default_allocator>
 801860a:	9b02      	ldr	r3, [sp, #8]
 801860c:	9905      	ldr	r1, [sp, #20]
 801860e:	6820      	ldr	r0, [r4, #0]
 8018610:	4798      	blx	r3
 8018612:	2300      	movs	r3, #0
 8018614:	e9c4 3300 	strd	r3, r3, [r4]
 8018618:	60a3      	str	r3, [r4, #8]
 801861a:	b006      	add	sp, #24
 801861c:	bd10      	pop	{r4, pc}
 801861e:	6843      	ldr	r3, [r0, #4]
 8018620:	b9db      	cbnz	r3, 801865a <rosidl_runtime_c__String__fini+0x66>
 8018622:	6883      	ldr	r3, [r0, #8]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d0f8      	beq.n	801861a <rosidl_runtime_c__String__fini+0x26>
 8018628:	4b12      	ldr	r3, [pc, #72]	@ (8018674 <rosidl_runtime_c__String__fini+0x80>)
 801862a:	4813      	ldr	r0, [pc, #76]	@ (8018678 <rosidl_runtime_c__String__fini+0x84>)
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	2251      	movs	r2, #81	@ 0x51
 8018630:	68db      	ldr	r3, [r3, #12]
 8018632:	2101      	movs	r1, #1
 8018634:	f000 fb82 	bl	8018d3c <fwrite>
 8018638:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801863c:	f000 f83e 	bl	80186bc <exit>
 8018640:	4770      	bx	lr
 8018642:	4b0c      	ldr	r3, [pc, #48]	@ (8018674 <rosidl_runtime_c__String__fini+0x80>)
 8018644:	480d      	ldr	r0, [pc, #52]	@ (801867c <rosidl_runtime_c__String__fini+0x88>)
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	224c      	movs	r2, #76	@ 0x4c
 801864a:	68db      	ldr	r3, [r3, #12]
 801864c:	2101      	movs	r1, #1
 801864e:	f000 fb75 	bl	8018d3c <fwrite>
 8018652:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018656:	f000 f831 	bl	80186bc <exit>
 801865a:	4b06      	ldr	r3, [pc, #24]	@ (8018674 <rosidl_runtime_c__String__fini+0x80>)
 801865c:	4808      	ldr	r0, [pc, #32]	@ (8018680 <rosidl_runtime_c__String__fini+0x8c>)
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	224e      	movs	r2, #78	@ 0x4e
 8018662:	68db      	ldr	r3, [r3, #12]
 8018664:	2101      	movs	r1, #1
 8018666:	f000 fb69 	bl	8018d3c <fwrite>
 801866a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801866e:	f000 f825 	bl	80186bc <exit>
 8018672:	bf00      	nop
 8018674:	20000770 	.word	0x20000770
 8018678:	0801b830 	.word	0x0801b830
 801867c:	0801b790 	.word	0x0801b790
 8018680:	0801b7e0 	.word	0x0801b7e0

08018684 <calloc>:
 8018684:	4b02      	ldr	r3, [pc, #8]	@ (8018690 <calloc+0xc>)
 8018686:	460a      	mov	r2, r1
 8018688:	4601      	mov	r1, r0
 801868a:	6818      	ldr	r0, [r3, #0]
 801868c:	f000 b802 	b.w	8018694 <_calloc_r>
 8018690:	20000770 	.word	0x20000770

08018694 <_calloc_r>:
 8018694:	b570      	push	{r4, r5, r6, lr}
 8018696:	fba1 5402 	umull	r5, r4, r1, r2
 801869a:	b93c      	cbnz	r4, 80186ac <_calloc_r+0x18>
 801869c:	4629      	mov	r1, r5
 801869e:	f000 f899 	bl	80187d4 <_malloc_r>
 80186a2:	4606      	mov	r6, r0
 80186a4:	b928      	cbnz	r0, 80186b2 <_calloc_r+0x1e>
 80186a6:	2600      	movs	r6, #0
 80186a8:	4630      	mov	r0, r6
 80186aa:	bd70      	pop	{r4, r5, r6, pc}
 80186ac:	220c      	movs	r2, #12
 80186ae:	6002      	str	r2, [r0, #0]
 80186b0:	e7f9      	b.n	80186a6 <_calloc_r+0x12>
 80186b2:	462a      	mov	r2, r5
 80186b4:	4621      	mov	r1, r4
 80186b6:	f000 fccf 	bl	8019058 <memset>
 80186ba:	e7f5      	b.n	80186a8 <_calloc_r+0x14>

080186bc <exit>:
 80186bc:	b508      	push	{r3, lr}
 80186be:	4b06      	ldr	r3, [pc, #24]	@ (80186d8 <exit+0x1c>)
 80186c0:	4604      	mov	r4, r0
 80186c2:	b113      	cbz	r3, 80186ca <exit+0xe>
 80186c4:	2100      	movs	r1, #0
 80186c6:	f3af 8000 	nop.w
 80186ca:	4b04      	ldr	r3, [pc, #16]	@ (80186dc <exit+0x20>)
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	b103      	cbz	r3, 80186d2 <exit+0x16>
 80186d0:	4798      	blx	r3
 80186d2:	4620      	mov	r0, r4
 80186d4:	f7e9 fd56 	bl	8002184 <_exit>
 80186d8:	00000000 	.word	0x00000000
 80186dc:	2000b7e0 	.word	0x2000b7e0

080186e0 <getenv>:
 80186e0:	b507      	push	{r0, r1, r2, lr}
 80186e2:	4b04      	ldr	r3, [pc, #16]	@ (80186f4 <getenv+0x14>)
 80186e4:	4601      	mov	r1, r0
 80186e6:	aa01      	add	r2, sp, #4
 80186e8:	6818      	ldr	r0, [r3, #0]
 80186ea:	f000 f805 	bl	80186f8 <_findenv_r>
 80186ee:	b003      	add	sp, #12
 80186f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80186f4:	20000770 	.word	0x20000770

080186f8 <_findenv_r>:
 80186f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186fc:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801876c <_findenv_r+0x74>
 8018700:	4606      	mov	r6, r0
 8018702:	4689      	mov	r9, r1
 8018704:	4617      	mov	r7, r2
 8018706:	f000 fd9d 	bl	8019244 <__env_lock>
 801870a:	f8da 4000 	ldr.w	r4, [sl]
 801870e:	b134      	cbz	r4, 801871e <_findenv_r+0x26>
 8018710:	464b      	mov	r3, r9
 8018712:	4698      	mov	r8, r3
 8018714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018718:	b13a      	cbz	r2, 801872a <_findenv_r+0x32>
 801871a:	2a3d      	cmp	r2, #61	@ 0x3d
 801871c:	d1f9      	bne.n	8018712 <_findenv_r+0x1a>
 801871e:	4630      	mov	r0, r6
 8018720:	f000 fd96 	bl	8019250 <__env_unlock>
 8018724:	2000      	movs	r0, #0
 8018726:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801872a:	eba8 0809 	sub.w	r8, r8, r9
 801872e:	46a3      	mov	fp, r4
 8018730:	f854 0b04 	ldr.w	r0, [r4], #4
 8018734:	2800      	cmp	r0, #0
 8018736:	d0f2      	beq.n	801871e <_findenv_r+0x26>
 8018738:	4642      	mov	r2, r8
 801873a:	4649      	mov	r1, r9
 801873c:	f000 fca1 	bl	8019082 <strncmp>
 8018740:	2800      	cmp	r0, #0
 8018742:	d1f4      	bne.n	801872e <_findenv_r+0x36>
 8018744:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018748:	eb03 0508 	add.w	r5, r3, r8
 801874c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018750:	2b3d      	cmp	r3, #61	@ 0x3d
 8018752:	d1ec      	bne.n	801872e <_findenv_r+0x36>
 8018754:	f8da 3000 	ldr.w	r3, [sl]
 8018758:	ebab 0303 	sub.w	r3, fp, r3
 801875c:	109b      	asrs	r3, r3, #2
 801875e:	4630      	mov	r0, r6
 8018760:	603b      	str	r3, [r7, #0]
 8018762:	f000 fd75 	bl	8019250 <__env_unlock>
 8018766:	1c68      	adds	r0, r5, #1
 8018768:	e7dd      	b.n	8018726 <_findenv_r+0x2e>
 801876a:	bf00      	nop
 801876c:	20000000 	.word	0x20000000

08018770 <malloc>:
 8018770:	4b02      	ldr	r3, [pc, #8]	@ (801877c <malloc+0xc>)
 8018772:	4601      	mov	r1, r0
 8018774:	6818      	ldr	r0, [r3, #0]
 8018776:	f000 b82d 	b.w	80187d4 <_malloc_r>
 801877a:	bf00      	nop
 801877c:	20000770 	.word	0x20000770

08018780 <free>:
 8018780:	4b02      	ldr	r3, [pc, #8]	@ (801878c <free+0xc>)
 8018782:	4601      	mov	r1, r0
 8018784:	6818      	ldr	r0, [r3, #0]
 8018786:	f000 bd69 	b.w	801925c <_free_r>
 801878a:	bf00      	nop
 801878c:	20000770 	.word	0x20000770

08018790 <sbrk_aligned>:
 8018790:	b570      	push	{r4, r5, r6, lr}
 8018792:	4e0f      	ldr	r6, [pc, #60]	@ (80187d0 <sbrk_aligned+0x40>)
 8018794:	460c      	mov	r4, r1
 8018796:	6831      	ldr	r1, [r6, #0]
 8018798:	4605      	mov	r5, r0
 801879a:	b911      	cbnz	r1, 80187a2 <sbrk_aligned+0x12>
 801879c:	f000 fcce 	bl	801913c <_sbrk_r>
 80187a0:	6030      	str	r0, [r6, #0]
 80187a2:	4621      	mov	r1, r4
 80187a4:	4628      	mov	r0, r5
 80187a6:	f000 fcc9 	bl	801913c <_sbrk_r>
 80187aa:	1c43      	adds	r3, r0, #1
 80187ac:	d103      	bne.n	80187b6 <sbrk_aligned+0x26>
 80187ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80187b2:	4620      	mov	r0, r4
 80187b4:	bd70      	pop	{r4, r5, r6, pc}
 80187b6:	1cc4      	adds	r4, r0, #3
 80187b8:	f024 0403 	bic.w	r4, r4, #3
 80187bc:	42a0      	cmp	r0, r4
 80187be:	d0f8      	beq.n	80187b2 <sbrk_aligned+0x22>
 80187c0:	1a21      	subs	r1, r4, r0
 80187c2:	4628      	mov	r0, r5
 80187c4:	f000 fcba 	bl	801913c <_sbrk_r>
 80187c8:	3001      	adds	r0, #1
 80187ca:	d1f2      	bne.n	80187b2 <sbrk_aligned+0x22>
 80187cc:	e7ef      	b.n	80187ae <sbrk_aligned+0x1e>
 80187ce:	bf00      	nop
 80187d0:	2000b6a0 	.word	0x2000b6a0

080187d4 <_malloc_r>:
 80187d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187d8:	1ccd      	adds	r5, r1, #3
 80187da:	f025 0503 	bic.w	r5, r5, #3
 80187de:	3508      	adds	r5, #8
 80187e0:	2d0c      	cmp	r5, #12
 80187e2:	bf38      	it	cc
 80187e4:	250c      	movcc	r5, #12
 80187e6:	2d00      	cmp	r5, #0
 80187e8:	4606      	mov	r6, r0
 80187ea:	db01      	blt.n	80187f0 <_malloc_r+0x1c>
 80187ec:	42a9      	cmp	r1, r5
 80187ee:	d904      	bls.n	80187fa <_malloc_r+0x26>
 80187f0:	230c      	movs	r3, #12
 80187f2:	6033      	str	r3, [r6, #0]
 80187f4:	2000      	movs	r0, #0
 80187f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80188d0 <_malloc_r+0xfc>
 80187fe:	f000 f869 	bl	80188d4 <__malloc_lock>
 8018802:	f8d8 3000 	ldr.w	r3, [r8]
 8018806:	461c      	mov	r4, r3
 8018808:	bb44      	cbnz	r4, 801885c <_malloc_r+0x88>
 801880a:	4629      	mov	r1, r5
 801880c:	4630      	mov	r0, r6
 801880e:	f7ff ffbf 	bl	8018790 <sbrk_aligned>
 8018812:	1c43      	adds	r3, r0, #1
 8018814:	4604      	mov	r4, r0
 8018816:	d158      	bne.n	80188ca <_malloc_r+0xf6>
 8018818:	f8d8 4000 	ldr.w	r4, [r8]
 801881c:	4627      	mov	r7, r4
 801881e:	2f00      	cmp	r7, #0
 8018820:	d143      	bne.n	80188aa <_malloc_r+0xd6>
 8018822:	2c00      	cmp	r4, #0
 8018824:	d04b      	beq.n	80188be <_malloc_r+0xea>
 8018826:	6823      	ldr	r3, [r4, #0]
 8018828:	4639      	mov	r1, r7
 801882a:	4630      	mov	r0, r6
 801882c:	eb04 0903 	add.w	r9, r4, r3
 8018830:	f000 fc84 	bl	801913c <_sbrk_r>
 8018834:	4581      	cmp	r9, r0
 8018836:	d142      	bne.n	80188be <_malloc_r+0xea>
 8018838:	6821      	ldr	r1, [r4, #0]
 801883a:	1a6d      	subs	r5, r5, r1
 801883c:	4629      	mov	r1, r5
 801883e:	4630      	mov	r0, r6
 8018840:	f7ff ffa6 	bl	8018790 <sbrk_aligned>
 8018844:	3001      	adds	r0, #1
 8018846:	d03a      	beq.n	80188be <_malloc_r+0xea>
 8018848:	6823      	ldr	r3, [r4, #0]
 801884a:	442b      	add	r3, r5
 801884c:	6023      	str	r3, [r4, #0]
 801884e:	f8d8 3000 	ldr.w	r3, [r8]
 8018852:	685a      	ldr	r2, [r3, #4]
 8018854:	bb62      	cbnz	r2, 80188b0 <_malloc_r+0xdc>
 8018856:	f8c8 7000 	str.w	r7, [r8]
 801885a:	e00f      	b.n	801887c <_malloc_r+0xa8>
 801885c:	6822      	ldr	r2, [r4, #0]
 801885e:	1b52      	subs	r2, r2, r5
 8018860:	d420      	bmi.n	80188a4 <_malloc_r+0xd0>
 8018862:	2a0b      	cmp	r2, #11
 8018864:	d917      	bls.n	8018896 <_malloc_r+0xc2>
 8018866:	1961      	adds	r1, r4, r5
 8018868:	42a3      	cmp	r3, r4
 801886a:	6025      	str	r5, [r4, #0]
 801886c:	bf18      	it	ne
 801886e:	6059      	strne	r1, [r3, #4]
 8018870:	6863      	ldr	r3, [r4, #4]
 8018872:	bf08      	it	eq
 8018874:	f8c8 1000 	streq.w	r1, [r8]
 8018878:	5162      	str	r2, [r4, r5]
 801887a:	604b      	str	r3, [r1, #4]
 801887c:	4630      	mov	r0, r6
 801887e:	f000 f82f 	bl	80188e0 <__malloc_unlock>
 8018882:	f104 000b 	add.w	r0, r4, #11
 8018886:	1d23      	adds	r3, r4, #4
 8018888:	f020 0007 	bic.w	r0, r0, #7
 801888c:	1ac2      	subs	r2, r0, r3
 801888e:	bf1c      	itt	ne
 8018890:	1a1b      	subne	r3, r3, r0
 8018892:	50a3      	strne	r3, [r4, r2]
 8018894:	e7af      	b.n	80187f6 <_malloc_r+0x22>
 8018896:	6862      	ldr	r2, [r4, #4]
 8018898:	42a3      	cmp	r3, r4
 801889a:	bf0c      	ite	eq
 801889c:	f8c8 2000 	streq.w	r2, [r8]
 80188a0:	605a      	strne	r2, [r3, #4]
 80188a2:	e7eb      	b.n	801887c <_malloc_r+0xa8>
 80188a4:	4623      	mov	r3, r4
 80188a6:	6864      	ldr	r4, [r4, #4]
 80188a8:	e7ae      	b.n	8018808 <_malloc_r+0x34>
 80188aa:	463c      	mov	r4, r7
 80188ac:	687f      	ldr	r7, [r7, #4]
 80188ae:	e7b6      	b.n	801881e <_malloc_r+0x4a>
 80188b0:	461a      	mov	r2, r3
 80188b2:	685b      	ldr	r3, [r3, #4]
 80188b4:	42a3      	cmp	r3, r4
 80188b6:	d1fb      	bne.n	80188b0 <_malloc_r+0xdc>
 80188b8:	2300      	movs	r3, #0
 80188ba:	6053      	str	r3, [r2, #4]
 80188bc:	e7de      	b.n	801887c <_malloc_r+0xa8>
 80188be:	230c      	movs	r3, #12
 80188c0:	6033      	str	r3, [r6, #0]
 80188c2:	4630      	mov	r0, r6
 80188c4:	f000 f80c 	bl	80188e0 <__malloc_unlock>
 80188c8:	e794      	b.n	80187f4 <_malloc_r+0x20>
 80188ca:	6005      	str	r5, [r0, #0]
 80188cc:	e7d6      	b.n	801887c <_malloc_r+0xa8>
 80188ce:	bf00      	nop
 80188d0:	2000b6a4 	.word	0x2000b6a4

080188d4 <__malloc_lock>:
 80188d4:	4801      	ldr	r0, [pc, #4]	@ (80188dc <__malloc_lock+0x8>)
 80188d6:	f000 bc7e 	b.w	80191d6 <__retarget_lock_acquire_recursive>
 80188da:	bf00      	nop
 80188dc:	2000b7e9 	.word	0x2000b7e9

080188e0 <__malloc_unlock>:
 80188e0:	4801      	ldr	r0, [pc, #4]	@ (80188e8 <__malloc_unlock+0x8>)
 80188e2:	f000 bc79 	b.w	80191d8 <__retarget_lock_release_recursive>
 80188e6:	bf00      	nop
 80188e8:	2000b7e9 	.word	0x2000b7e9

080188ec <srand>:
 80188ec:	b538      	push	{r3, r4, r5, lr}
 80188ee:	4b10      	ldr	r3, [pc, #64]	@ (8018930 <srand+0x44>)
 80188f0:	681d      	ldr	r5, [r3, #0]
 80188f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80188f4:	4604      	mov	r4, r0
 80188f6:	b9b3      	cbnz	r3, 8018926 <srand+0x3a>
 80188f8:	2018      	movs	r0, #24
 80188fa:	f7ff ff39 	bl	8018770 <malloc>
 80188fe:	4602      	mov	r2, r0
 8018900:	6328      	str	r0, [r5, #48]	@ 0x30
 8018902:	b920      	cbnz	r0, 801890e <srand+0x22>
 8018904:	4b0b      	ldr	r3, [pc, #44]	@ (8018934 <srand+0x48>)
 8018906:	480c      	ldr	r0, [pc, #48]	@ (8018938 <srand+0x4c>)
 8018908:	2146      	movs	r1, #70	@ 0x46
 801890a:	f000 fc7d 	bl	8019208 <__assert_func>
 801890e:	490b      	ldr	r1, [pc, #44]	@ (801893c <srand+0x50>)
 8018910:	4b0b      	ldr	r3, [pc, #44]	@ (8018940 <srand+0x54>)
 8018912:	e9c0 1300 	strd	r1, r3, [r0]
 8018916:	4b0b      	ldr	r3, [pc, #44]	@ (8018944 <srand+0x58>)
 8018918:	6083      	str	r3, [r0, #8]
 801891a:	230b      	movs	r3, #11
 801891c:	8183      	strh	r3, [r0, #12]
 801891e:	2100      	movs	r1, #0
 8018920:	2001      	movs	r0, #1
 8018922:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018926:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018928:	2200      	movs	r2, #0
 801892a:	611c      	str	r4, [r3, #16]
 801892c:	615a      	str	r2, [r3, #20]
 801892e:	bd38      	pop	{r3, r4, r5, pc}
 8018930:	20000770 	.word	0x20000770
 8018934:	0801b882 	.word	0x0801b882
 8018938:	0801b899 	.word	0x0801b899
 801893c:	abcd330e 	.word	0xabcd330e
 8018940:	e66d1234 	.word	0xe66d1234
 8018944:	0005deec 	.word	0x0005deec

08018948 <rand>:
 8018948:	4b16      	ldr	r3, [pc, #88]	@ (80189a4 <rand+0x5c>)
 801894a:	b510      	push	{r4, lr}
 801894c:	681c      	ldr	r4, [r3, #0]
 801894e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018950:	b9b3      	cbnz	r3, 8018980 <rand+0x38>
 8018952:	2018      	movs	r0, #24
 8018954:	f7ff ff0c 	bl	8018770 <malloc>
 8018958:	4602      	mov	r2, r0
 801895a:	6320      	str	r0, [r4, #48]	@ 0x30
 801895c:	b920      	cbnz	r0, 8018968 <rand+0x20>
 801895e:	4b12      	ldr	r3, [pc, #72]	@ (80189a8 <rand+0x60>)
 8018960:	4812      	ldr	r0, [pc, #72]	@ (80189ac <rand+0x64>)
 8018962:	2152      	movs	r1, #82	@ 0x52
 8018964:	f000 fc50 	bl	8019208 <__assert_func>
 8018968:	4911      	ldr	r1, [pc, #68]	@ (80189b0 <rand+0x68>)
 801896a:	4b12      	ldr	r3, [pc, #72]	@ (80189b4 <rand+0x6c>)
 801896c:	e9c0 1300 	strd	r1, r3, [r0]
 8018970:	4b11      	ldr	r3, [pc, #68]	@ (80189b8 <rand+0x70>)
 8018972:	6083      	str	r3, [r0, #8]
 8018974:	230b      	movs	r3, #11
 8018976:	8183      	strh	r3, [r0, #12]
 8018978:	2100      	movs	r1, #0
 801897a:	2001      	movs	r0, #1
 801897c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018980:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018982:	480e      	ldr	r0, [pc, #56]	@ (80189bc <rand+0x74>)
 8018984:	690b      	ldr	r3, [r1, #16]
 8018986:	694c      	ldr	r4, [r1, #20]
 8018988:	4a0d      	ldr	r2, [pc, #52]	@ (80189c0 <rand+0x78>)
 801898a:	4358      	muls	r0, r3
 801898c:	fb02 0004 	mla	r0, r2, r4, r0
 8018990:	fba3 3202 	umull	r3, r2, r3, r2
 8018994:	3301      	adds	r3, #1
 8018996:	eb40 0002 	adc.w	r0, r0, r2
 801899a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801899e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80189a2:	bd10      	pop	{r4, pc}
 80189a4:	20000770 	.word	0x20000770
 80189a8:	0801b882 	.word	0x0801b882
 80189ac:	0801b899 	.word	0x0801b899
 80189b0:	abcd330e 	.word	0xabcd330e
 80189b4:	e66d1234 	.word	0xe66d1234
 80189b8:	0005deec 	.word	0x0005deec
 80189bc:	5851f42d 	.word	0x5851f42d
 80189c0:	4c957f2d 	.word	0x4c957f2d

080189c4 <realloc>:
 80189c4:	4b02      	ldr	r3, [pc, #8]	@ (80189d0 <realloc+0xc>)
 80189c6:	460a      	mov	r2, r1
 80189c8:	4601      	mov	r1, r0
 80189ca:	6818      	ldr	r0, [r3, #0]
 80189cc:	f000 b802 	b.w	80189d4 <_realloc_r>
 80189d0:	20000770 	.word	0x20000770

080189d4 <_realloc_r>:
 80189d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189d8:	4680      	mov	r8, r0
 80189da:	4615      	mov	r5, r2
 80189dc:	460c      	mov	r4, r1
 80189de:	b921      	cbnz	r1, 80189ea <_realloc_r+0x16>
 80189e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80189e4:	4611      	mov	r1, r2
 80189e6:	f7ff bef5 	b.w	80187d4 <_malloc_r>
 80189ea:	b92a      	cbnz	r2, 80189f8 <_realloc_r+0x24>
 80189ec:	f000 fc36 	bl	801925c <_free_r>
 80189f0:	2400      	movs	r4, #0
 80189f2:	4620      	mov	r0, r4
 80189f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189f8:	f000 fc7a 	bl	80192f0 <_malloc_usable_size_r>
 80189fc:	4285      	cmp	r5, r0
 80189fe:	4606      	mov	r6, r0
 8018a00:	d802      	bhi.n	8018a08 <_realloc_r+0x34>
 8018a02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018a06:	d8f4      	bhi.n	80189f2 <_realloc_r+0x1e>
 8018a08:	4629      	mov	r1, r5
 8018a0a:	4640      	mov	r0, r8
 8018a0c:	f7ff fee2 	bl	80187d4 <_malloc_r>
 8018a10:	4607      	mov	r7, r0
 8018a12:	2800      	cmp	r0, #0
 8018a14:	d0ec      	beq.n	80189f0 <_realloc_r+0x1c>
 8018a16:	42b5      	cmp	r5, r6
 8018a18:	462a      	mov	r2, r5
 8018a1a:	4621      	mov	r1, r4
 8018a1c:	bf28      	it	cs
 8018a1e:	4632      	movcs	r2, r6
 8018a20:	f000 fbe3 	bl	80191ea <memcpy>
 8018a24:	4621      	mov	r1, r4
 8018a26:	4640      	mov	r0, r8
 8018a28:	f000 fc18 	bl	801925c <_free_r>
 8018a2c:	463c      	mov	r4, r7
 8018a2e:	e7e0      	b.n	80189f2 <_realloc_r+0x1e>

08018a30 <_strtoul_l.constprop.0>:
 8018a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a34:	4e34      	ldr	r6, [pc, #208]	@ (8018b08 <_strtoul_l.constprop.0+0xd8>)
 8018a36:	4686      	mov	lr, r0
 8018a38:	460d      	mov	r5, r1
 8018a3a:	4628      	mov	r0, r5
 8018a3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018a40:	5d37      	ldrb	r7, [r6, r4]
 8018a42:	f017 0708 	ands.w	r7, r7, #8
 8018a46:	d1f8      	bne.n	8018a3a <_strtoul_l.constprop.0+0xa>
 8018a48:	2c2d      	cmp	r4, #45	@ 0x2d
 8018a4a:	d12f      	bne.n	8018aac <_strtoul_l.constprop.0+0x7c>
 8018a4c:	782c      	ldrb	r4, [r5, #0]
 8018a4e:	2701      	movs	r7, #1
 8018a50:	1c85      	adds	r5, r0, #2
 8018a52:	f033 0010 	bics.w	r0, r3, #16
 8018a56:	d109      	bne.n	8018a6c <_strtoul_l.constprop.0+0x3c>
 8018a58:	2c30      	cmp	r4, #48	@ 0x30
 8018a5a:	d12c      	bne.n	8018ab6 <_strtoul_l.constprop.0+0x86>
 8018a5c:	7828      	ldrb	r0, [r5, #0]
 8018a5e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8018a62:	2858      	cmp	r0, #88	@ 0x58
 8018a64:	d127      	bne.n	8018ab6 <_strtoul_l.constprop.0+0x86>
 8018a66:	786c      	ldrb	r4, [r5, #1]
 8018a68:	2310      	movs	r3, #16
 8018a6a:	3502      	adds	r5, #2
 8018a6c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018a70:	2600      	movs	r6, #0
 8018a72:	fbb8 f8f3 	udiv	r8, r8, r3
 8018a76:	fb03 f908 	mul.w	r9, r3, r8
 8018a7a:	ea6f 0909 	mvn.w	r9, r9
 8018a7e:	4630      	mov	r0, r6
 8018a80:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8018a84:	f1bc 0f09 	cmp.w	ip, #9
 8018a88:	d81c      	bhi.n	8018ac4 <_strtoul_l.constprop.0+0x94>
 8018a8a:	4664      	mov	r4, ip
 8018a8c:	42a3      	cmp	r3, r4
 8018a8e:	dd2a      	ble.n	8018ae6 <_strtoul_l.constprop.0+0xb6>
 8018a90:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8018a94:	d007      	beq.n	8018aa6 <_strtoul_l.constprop.0+0x76>
 8018a96:	4580      	cmp	r8, r0
 8018a98:	d322      	bcc.n	8018ae0 <_strtoul_l.constprop.0+0xb0>
 8018a9a:	d101      	bne.n	8018aa0 <_strtoul_l.constprop.0+0x70>
 8018a9c:	45a1      	cmp	r9, r4
 8018a9e:	db1f      	blt.n	8018ae0 <_strtoul_l.constprop.0+0xb0>
 8018aa0:	fb00 4003 	mla	r0, r0, r3, r4
 8018aa4:	2601      	movs	r6, #1
 8018aa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018aaa:	e7e9      	b.n	8018a80 <_strtoul_l.constprop.0+0x50>
 8018aac:	2c2b      	cmp	r4, #43	@ 0x2b
 8018aae:	bf04      	itt	eq
 8018ab0:	782c      	ldrbeq	r4, [r5, #0]
 8018ab2:	1c85      	addeq	r5, r0, #2
 8018ab4:	e7cd      	b.n	8018a52 <_strtoul_l.constprop.0+0x22>
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d1d8      	bne.n	8018a6c <_strtoul_l.constprop.0+0x3c>
 8018aba:	2c30      	cmp	r4, #48	@ 0x30
 8018abc:	bf0c      	ite	eq
 8018abe:	2308      	moveq	r3, #8
 8018ac0:	230a      	movne	r3, #10
 8018ac2:	e7d3      	b.n	8018a6c <_strtoul_l.constprop.0+0x3c>
 8018ac4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8018ac8:	f1bc 0f19 	cmp.w	ip, #25
 8018acc:	d801      	bhi.n	8018ad2 <_strtoul_l.constprop.0+0xa2>
 8018ace:	3c37      	subs	r4, #55	@ 0x37
 8018ad0:	e7dc      	b.n	8018a8c <_strtoul_l.constprop.0+0x5c>
 8018ad2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8018ad6:	f1bc 0f19 	cmp.w	ip, #25
 8018ada:	d804      	bhi.n	8018ae6 <_strtoul_l.constprop.0+0xb6>
 8018adc:	3c57      	subs	r4, #87	@ 0x57
 8018ade:	e7d5      	b.n	8018a8c <_strtoul_l.constprop.0+0x5c>
 8018ae0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8018ae4:	e7df      	b.n	8018aa6 <_strtoul_l.constprop.0+0x76>
 8018ae6:	1c73      	adds	r3, r6, #1
 8018ae8:	d106      	bne.n	8018af8 <_strtoul_l.constprop.0+0xc8>
 8018aea:	2322      	movs	r3, #34	@ 0x22
 8018aec:	f8ce 3000 	str.w	r3, [lr]
 8018af0:	4630      	mov	r0, r6
 8018af2:	b932      	cbnz	r2, 8018b02 <_strtoul_l.constprop.0+0xd2>
 8018af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018af8:	b107      	cbz	r7, 8018afc <_strtoul_l.constprop.0+0xcc>
 8018afa:	4240      	negs	r0, r0
 8018afc:	2a00      	cmp	r2, #0
 8018afe:	d0f9      	beq.n	8018af4 <_strtoul_l.constprop.0+0xc4>
 8018b00:	b106      	cbz	r6, 8018b04 <_strtoul_l.constprop.0+0xd4>
 8018b02:	1e69      	subs	r1, r5, #1
 8018b04:	6011      	str	r1, [r2, #0]
 8018b06:	e7f5      	b.n	8018af4 <_strtoul_l.constprop.0+0xc4>
 8018b08:	0801b8f2 	.word	0x0801b8f2

08018b0c <strtoul>:
 8018b0c:	4613      	mov	r3, r2
 8018b0e:	460a      	mov	r2, r1
 8018b10:	4601      	mov	r1, r0
 8018b12:	4802      	ldr	r0, [pc, #8]	@ (8018b1c <strtoul+0x10>)
 8018b14:	6800      	ldr	r0, [r0, #0]
 8018b16:	f7ff bf8b 	b.w	8018a30 <_strtoul_l.constprop.0>
 8018b1a:	bf00      	nop
 8018b1c:	20000770 	.word	0x20000770

08018b20 <std>:
 8018b20:	2300      	movs	r3, #0
 8018b22:	b510      	push	{r4, lr}
 8018b24:	4604      	mov	r4, r0
 8018b26:	e9c0 3300 	strd	r3, r3, [r0]
 8018b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018b2e:	6083      	str	r3, [r0, #8]
 8018b30:	8181      	strh	r1, [r0, #12]
 8018b32:	6643      	str	r3, [r0, #100]	@ 0x64
 8018b34:	81c2      	strh	r2, [r0, #14]
 8018b36:	6183      	str	r3, [r0, #24]
 8018b38:	4619      	mov	r1, r3
 8018b3a:	2208      	movs	r2, #8
 8018b3c:	305c      	adds	r0, #92	@ 0x5c
 8018b3e:	f000 fa8b 	bl	8019058 <memset>
 8018b42:	4b0d      	ldr	r3, [pc, #52]	@ (8018b78 <std+0x58>)
 8018b44:	6263      	str	r3, [r4, #36]	@ 0x24
 8018b46:	4b0d      	ldr	r3, [pc, #52]	@ (8018b7c <std+0x5c>)
 8018b48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8018b80 <std+0x60>)
 8018b4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8018b84 <std+0x64>)
 8018b50:	6323      	str	r3, [r4, #48]	@ 0x30
 8018b52:	4b0d      	ldr	r3, [pc, #52]	@ (8018b88 <std+0x68>)
 8018b54:	6224      	str	r4, [r4, #32]
 8018b56:	429c      	cmp	r4, r3
 8018b58:	d006      	beq.n	8018b68 <std+0x48>
 8018b5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018b5e:	4294      	cmp	r4, r2
 8018b60:	d002      	beq.n	8018b68 <std+0x48>
 8018b62:	33d0      	adds	r3, #208	@ 0xd0
 8018b64:	429c      	cmp	r4, r3
 8018b66:	d105      	bne.n	8018b74 <std+0x54>
 8018b68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b70:	f000 bb30 	b.w	80191d4 <__retarget_lock_init_recursive>
 8018b74:	bd10      	pop	{r4, pc}
 8018b76:	bf00      	nop
 8018b78:	08018de5 	.word	0x08018de5
 8018b7c:	08018e07 	.word	0x08018e07
 8018b80:	08018e3f 	.word	0x08018e3f
 8018b84:	08018e63 	.word	0x08018e63
 8018b88:	2000b6a8 	.word	0x2000b6a8

08018b8c <stdio_exit_handler>:
 8018b8c:	4a02      	ldr	r2, [pc, #8]	@ (8018b98 <stdio_exit_handler+0xc>)
 8018b8e:	4903      	ldr	r1, [pc, #12]	@ (8018b9c <stdio_exit_handler+0x10>)
 8018b90:	4803      	ldr	r0, [pc, #12]	@ (8018ba0 <stdio_exit_handler+0x14>)
 8018b92:	f000 b869 	b.w	8018c68 <_fwalk_sglue>
 8018b96:	bf00      	nop
 8018b98:	20000764 	.word	0x20000764
 8018b9c:	08019c59 	.word	0x08019c59
 8018ba0:	20000774 	.word	0x20000774

08018ba4 <cleanup_stdio>:
 8018ba4:	6841      	ldr	r1, [r0, #4]
 8018ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8018bd8 <cleanup_stdio+0x34>)
 8018ba8:	4299      	cmp	r1, r3
 8018baa:	b510      	push	{r4, lr}
 8018bac:	4604      	mov	r4, r0
 8018bae:	d001      	beq.n	8018bb4 <cleanup_stdio+0x10>
 8018bb0:	f001 f852 	bl	8019c58 <_fflush_r>
 8018bb4:	68a1      	ldr	r1, [r4, #8]
 8018bb6:	4b09      	ldr	r3, [pc, #36]	@ (8018bdc <cleanup_stdio+0x38>)
 8018bb8:	4299      	cmp	r1, r3
 8018bba:	d002      	beq.n	8018bc2 <cleanup_stdio+0x1e>
 8018bbc:	4620      	mov	r0, r4
 8018bbe:	f001 f84b 	bl	8019c58 <_fflush_r>
 8018bc2:	68e1      	ldr	r1, [r4, #12]
 8018bc4:	4b06      	ldr	r3, [pc, #24]	@ (8018be0 <cleanup_stdio+0x3c>)
 8018bc6:	4299      	cmp	r1, r3
 8018bc8:	d004      	beq.n	8018bd4 <cleanup_stdio+0x30>
 8018bca:	4620      	mov	r0, r4
 8018bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018bd0:	f001 b842 	b.w	8019c58 <_fflush_r>
 8018bd4:	bd10      	pop	{r4, pc}
 8018bd6:	bf00      	nop
 8018bd8:	2000b6a8 	.word	0x2000b6a8
 8018bdc:	2000b710 	.word	0x2000b710
 8018be0:	2000b778 	.word	0x2000b778

08018be4 <global_stdio_init.part.0>:
 8018be4:	b510      	push	{r4, lr}
 8018be6:	4b0b      	ldr	r3, [pc, #44]	@ (8018c14 <global_stdio_init.part.0+0x30>)
 8018be8:	4c0b      	ldr	r4, [pc, #44]	@ (8018c18 <global_stdio_init.part.0+0x34>)
 8018bea:	4a0c      	ldr	r2, [pc, #48]	@ (8018c1c <global_stdio_init.part.0+0x38>)
 8018bec:	601a      	str	r2, [r3, #0]
 8018bee:	4620      	mov	r0, r4
 8018bf0:	2200      	movs	r2, #0
 8018bf2:	2104      	movs	r1, #4
 8018bf4:	f7ff ff94 	bl	8018b20 <std>
 8018bf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018bfc:	2201      	movs	r2, #1
 8018bfe:	2109      	movs	r1, #9
 8018c00:	f7ff ff8e 	bl	8018b20 <std>
 8018c04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018c08:	2202      	movs	r2, #2
 8018c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c0e:	2112      	movs	r1, #18
 8018c10:	f7ff bf86 	b.w	8018b20 <std>
 8018c14:	2000b7e0 	.word	0x2000b7e0
 8018c18:	2000b6a8 	.word	0x2000b6a8
 8018c1c:	08018b8d 	.word	0x08018b8d

08018c20 <__sfp_lock_acquire>:
 8018c20:	4801      	ldr	r0, [pc, #4]	@ (8018c28 <__sfp_lock_acquire+0x8>)
 8018c22:	f000 bad8 	b.w	80191d6 <__retarget_lock_acquire_recursive>
 8018c26:	bf00      	nop
 8018c28:	2000b7ea 	.word	0x2000b7ea

08018c2c <__sfp_lock_release>:
 8018c2c:	4801      	ldr	r0, [pc, #4]	@ (8018c34 <__sfp_lock_release+0x8>)
 8018c2e:	f000 bad3 	b.w	80191d8 <__retarget_lock_release_recursive>
 8018c32:	bf00      	nop
 8018c34:	2000b7ea 	.word	0x2000b7ea

08018c38 <__sinit>:
 8018c38:	b510      	push	{r4, lr}
 8018c3a:	4604      	mov	r4, r0
 8018c3c:	f7ff fff0 	bl	8018c20 <__sfp_lock_acquire>
 8018c40:	6a23      	ldr	r3, [r4, #32]
 8018c42:	b11b      	cbz	r3, 8018c4c <__sinit+0x14>
 8018c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c48:	f7ff bff0 	b.w	8018c2c <__sfp_lock_release>
 8018c4c:	4b04      	ldr	r3, [pc, #16]	@ (8018c60 <__sinit+0x28>)
 8018c4e:	6223      	str	r3, [r4, #32]
 8018c50:	4b04      	ldr	r3, [pc, #16]	@ (8018c64 <__sinit+0x2c>)
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d1f5      	bne.n	8018c44 <__sinit+0xc>
 8018c58:	f7ff ffc4 	bl	8018be4 <global_stdio_init.part.0>
 8018c5c:	e7f2      	b.n	8018c44 <__sinit+0xc>
 8018c5e:	bf00      	nop
 8018c60:	08018ba5 	.word	0x08018ba5
 8018c64:	2000b7e0 	.word	0x2000b7e0

08018c68 <_fwalk_sglue>:
 8018c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c6c:	4607      	mov	r7, r0
 8018c6e:	4688      	mov	r8, r1
 8018c70:	4614      	mov	r4, r2
 8018c72:	2600      	movs	r6, #0
 8018c74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018c78:	f1b9 0901 	subs.w	r9, r9, #1
 8018c7c:	d505      	bpl.n	8018c8a <_fwalk_sglue+0x22>
 8018c7e:	6824      	ldr	r4, [r4, #0]
 8018c80:	2c00      	cmp	r4, #0
 8018c82:	d1f7      	bne.n	8018c74 <_fwalk_sglue+0xc>
 8018c84:	4630      	mov	r0, r6
 8018c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c8a:	89ab      	ldrh	r3, [r5, #12]
 8018c8c:	2b01      	cmp	r3, #1
 8018c8e:	d907      	bls.n	8018ca0 <_fwalk_sglue+0x38>
 8018c90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018c94:	3301      	adds	r3, #1
 8018c96:	d003      	beq.n	8018ca0 <_fwalk_sglue+0x38>
 8018c98:	4629      	mov	r1, r5
 8018c9a:	4638      	mov	r0, r7
 8018c9c:	47c0      	blx	r8
 8018c9e:	4306      	orrs	r6, r0
 8018ca0:	3568      	adds	r5, #104	@ 0x68
 8018ca2:	e7e9      	b.n	8018c78 <_fwalk_sglue+0x10>

08018ca4 <_fwrite_r>:
 8018ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ca8:	9c08      	ldr	r4, [sp, #32]
 8018caa:	468a      	mov	sl, r1
 8018cac:	4690      	mov	r8, r2
 8018cae:	fb02 f903 	mul.w	r9, r2, r3
 8018cb2:	4606      	mov	r6, r0
 8018cb4:	b118      	cbz	r0, 8018cbe <_fwrite_r+0x1a>
 8018cb6:	6a03      	ldr	r3, [r0, #32]
 8018cb8:	b90b      	cbnz	r3, 8018cbe <_fwrite_r+0x1a>
 8018cba:	f7ff ffbd 	bl	8018c38 <__sinit>
 8018cbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018cc0:	07dd      	lsls	r5, r3, #31
 8018cc2:	d405      	bmi.n	8018cd0 <_fwrite_r+0x2c>
 8018cc4:	89a3      	ldrh	r3, [r4, #12]
 8018cc6:	0598      	lsls	r0, r3, #22
 8018cc8:	d402      	bmi.n	8018cd0 <_fwrite_r+0x2c>
 8018cca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018ccc:	f000 fa83 	bl	80191d6 <__retarget_lock_acquire_recursive>
 8018cd0:	89a3      	ldrh	r3, [r4, #12]
 8018cd2:	0719      	lsls	r1, r3, #28
 8018cd4:	d516      	bpl.n	8018d04 <_fwrite_r+0x60>
 8018cd6:	6923      	ldr	r3, [r4, #16]
 8018cd8:	b1a3      	cbz	r3, 8018d04 <_fwrite_r+0x60>
 8018cda:	2500      	movs	r5, #0
 8018cdc:	454d      	cmp	r5, r9
 8018cde:	d01f      	beq.n	8018d20 <_fwrite_r+0x7c>
 8018ce0:	68a7      	ldr	r7, [r4, #8]
 8018ce2:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8018ce6:	3f01      	subs	r7, #1
 8018ce8:	2f00      	cmp	r7, #0
 8018cea:	60a7      	str	r7, [r4, #8]
 8018cec:	da04      	bge.n	8018cf8 <_fwrite_r+0x54>
 8018cee:	69a3      	ldr	r3, [r4, #24]
 8018cf0:	429f      	cmp	r7, r3
 8018cf2:	db0f      	blt.n	8018d14 <_fwrite_r+0x70>
 8018cf4:	290a      	cmp	r1, #10
 8018cf6:	d00d      	beq.n	8018d14 <_fwrite_r+0x70>
 8018cf8:	6823      	ldr	r3, [r4, #0]
 8018cfa:	1c5a      	adds	r2, r3, #1
 8018cfc:	6022      	str	r2, [r4, #0]
 8018cfe:	7019      	strb	r1, [r3, #0]
 8018d00:	3501      	adds	r5, #1
 8018d02:	e7eb      	b.n	8018cdc <_fwrite_r+0x38>
 8018d04:	4621      	mov	r1, r4
 8018d06:	4630      	mov	r0, r6
 8018d08:	f000 f926 	bl	8018f58 <__swsetup_r>
 8018d0c:	2800      	cmp	r0, #0
 8018d0e:	d0e4      	beq.n	8018cda <_fwrite_r+0x36>
 8018d10:	2500      	movs	r5, #0
 8018d12:	e005      	b.n	8018d20 <_fwrite_r+0x7c>
 8018d14:	4622      	mov	r2, r4
 8018d16:	4630      	mov	r0, r6
 8018d18:	f000 f8e0 	bl	8018edc <__swbuf_r>
 8018d1c:	3001      	adds	r0, #1
 8018d1e:	d1ef      	bne.n	8018d00 <_fwrite_r+0x5c>
 8018d20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018d22:	07da      	lsls	r2, r3, #31
 8018d24:	d405      	bmi.n	8018d32 <_fwrite_r+0x8e>
 8018d26:	89a3      	ldrh	r3, [r4, #12]
 8018d28:	059b      	lsls	r3, r3, #22
 8018d2a:	d402      	bmi.n	8018d32 <_fwrite_r+0x8e>
 8018d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018d2e:	f000 fa53 	bl	80191d8 <__retarget_lock_release_recursive>
 8018d32:	fbb5 f0f8 	udiv	r0, r5, r8
 8018d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08018d3c <fwrite>:
 8018d3c:	b507      	push	{r0, r1, r2, lr}
 8018d3e:	9300      	str	r3, [sp, #0]
 8018d40:	4613      	mov	r3, r2
 8018d42:	460a      	mov	r2, r1
 8018d44:	4601      	mov	r1, r0
 8018d46:	4803      	ldr	r0, [pc, #12]	@ (8018d54 <fwrite+0x18>)
 8018d48:	6800      	ldr	r0, [r0, #0]
 8018d4a:	f7ff ffab 	bl	8018ca4 <_fwrite_r>
 8018d4e:	b003      	add	sp, #12
 8018d50:	f85d fb04 	ldr.w	pc, [sp], #4
 8018d54:	20000770 	.word	0x20000770

08018d58 <iprintf>:
 8018d58:	b40f      	push	{r0, r1, r2, r3}
 8018d5a:	b507      	push	{r0, r1, r2, lr}
 8018d5c:	4906      	ldr	r1, [pc, #24]	@ (8018d78 <iprintf+0x20>)
 8018d5e:	ab04      	add	r3, sp, #16
 8018d60:	6808      	ldr	r0, [r1, #0]
 8018d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d66:	6881      	ldr	r1, [r0, #8]
 8018d68:	9301      	str	r3, [sp, #4]
 8018d6a:	f000 fc4b 	bl	8019604 <_vfiprintf_r>
 8018d6e:	b003      	add	sp, #12
 8018d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d74:	b004      	add	sp, #16
 8018d76:	4770      	bx	lr
 8018d78:	20000770 	.word	0x20000770

08018d7c <sniprintf>:
 8018d7c:	b40c      	push	{r2, r3}
 8018d7e:	b530      	push	{r4, r5, lr}
 8018d80:	4b17      	ldr	r3, [pc, #92]	@ (8018de0 <sniprintf+0x64>)
 8018d82:	1e0c      	subs	r4, r1, #0
 8018d84:	681d      	ldr	r5, [r3, #0]
 8018d86:	b09d      	sub	sp, #116	@ 0x74
 8018d88:	da08      	bge.n	8018d9c <sniprintf+0x20>
 8018d8a:	238b      	movs	r3, #139	@ 0x8b
 8018d8c:	602b      	str	r3, [r5, #0]
 8018d8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018d92:	b01d      	add	sp, #116	@ 0x74
 8018d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018d98:	b002      	add	sp, #8
 8018d9a:	4770      	bx	lr
 8018d9c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018da0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018da4:	bf14      	ite	ne
 8018da6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8018daa:	4623      	moveq	r3, r4
 8018dac:	9304      	str	r3, [sp, #16]
 8018dae:	9307      	str	r3, [sp, #28]
 8018db0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018db4:	9002      	str	r0, [sp, #8]
 8018db6:	9006      	str	r0, [sp, #24]
 8018db8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018dbc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018dbe:	ab21      	add	r3, sp, #132	@ 0x84
 8018dc0:	a902      	add	r1, sp, #8
 8018dc2:	4628      	mov	r0, r5
 8018dc4:	9301      	str	r3, [sp, #4]
 8018dc6:	f000 faf7 	bl	80193b8 <_svfiprintf_r>
 8018dca:	1c43      	adds	r3, r0, #1
 8018dcc:	bfbc      	itt	lt
 8018dce:	238b      	movlt	r3, #139	@ 0x8b
 8018dd0:	602b      	strlt	r3, [r5, #0]
 8018dd2:	2c00      	cmp	r4, #0
 8018dd4:	d0dd      	beq.n	8018d92 <sniprintf+0x16>
 8018dd6:	9b02      	ldr	r3, [sp, #8]
 8018dd8:	2200      	movs	r2, #0
 8018dda:	701a      	strb	r2, [r3, #0]
 8018ddc:	e7d9      	b.n	8018d92 <sniprintf+0x16>
 8018dde:	bf00      	nop
 8018de0:	20000770 	.word	0x20000770

08018de4 <__sread>:
 8018de4:	b510      	push	{r4, lr}
 8018de6:	460c      	mov	r4, r1
 8018de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018dec:	f000 f994 	bl	8019118 <_read_r>
 8018df0:	2800      	cmp	r0, #0
 8018df2:	bfab      	itete	ge
 8018df4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018df6:	89a3      	ldrhlt	r3, [r4, #12]
 8018df8:	181b      	addge	r3, r3, r0
 8018dfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018dfe:	bfac      	ite	ge
 8018e00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018e02:	81a3      	strhlt	r3, [r4, #12]
 8018e04:	bd10      	pop	{r4, pc}

08018e06 <__swrite>:
 8018e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e0a:	461f      	mov	r7, r3
 8018e0c:	898b      	ldrh	r3, [r1, #12]
 8018e0e:	05db      	lsls	r3, r3, #23
 8018e10:	4605      	mov	r5, r0
 8018e12:	460c      	mov	r4, r1
 8018e14:	4616      	mov	r6, r2
 8018e16:	d505      	bpl.n	8018e24 <__swrite+0x1e>
 8018e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e1c:	2302      	movs	r3, #2
 8018e1e:	2200      	movs	r2, #0
 8018e20:	f000 f968 	bl	80190f4 <_lseek_r>
 8018e24:	89a3      	ldrh	r3, [r4, #12]
 8018e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018e2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018e2e:	81a3      	strh	r3, [r4, #12]
 8018e30:	4632      	mov	r2, r6
 8018e32:	463b      	mov	r3, r7
 8018e34:	4628      	mov	r0, r5
 8018e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e3a:	f000 b98f 	b.w	801915c <_write_r>

08018e3e <__sseek>:
 8018e3e:	b510      	push	{r4, lr}
 8018e40:	460c      	mov	r4, r1
 8018e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e46:	f000 f955 	bl	80190f4 <_lseek_r>
 8018e4a:	1c43      	adds	r3, r0, #1
 8018e4c:	89a3      	ldrh	r3, [r4, #12]
 8018e4e:	bf15      	itete	ne
 8018e50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018e52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018e56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018e5a:	81a3      	strheq	r3, [r4, #12]
 8018e5c:	bf18      	it	ne
 8018e5e:	81a3      	strhne	r3, [r4, #12]
 8018e60:	bd10      	pop	{r4, pc}

08018e62 <__sclose>:
 8018e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e66:	f000 b935 	b.w	80190d4 <_close_r>

08018e6a <_vsniprintf_r>:
 8018e6a:	b530      	push	{r4, r5, lr}
 8018e6c:	4614      	mov	r4, r2
 8018e6e:	2c00      	cmp	r4, #0
 8018e70:	b09b      	sub	sp, #108	@ 0x6c
 8018e72:	4605      	mov	r5, r0
 8018e74:	461a      	mov	r2, r3
 8018e76:	da05      	bge.n	8018e84 <_vsniprintf_r+0x1a>
 8018e78:	238b      	movs	r3, #139	@ 0x8b
 8018e7a:	6003      	str	r3, [r0, #0]
 8018e7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018e80:	b01b      	add	sp, #108	@ 0x6c
 8018e82:	bd30      	pop	{r4, r5, pc}
 8018e84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018e88:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018e8c:	bf14      	ite	ne
 8018e8e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8018e92:	4623      	moveq	r3, r4
 8018e94:	9302      	str	r3, [sp, #8]
 8018e96:	9305      	str	r3, [sp, #20]
 8018e98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018e9c:	9100      	str	r1, [sp, #0]
 8018e9e:	9104      	str	r1, [sp, #16]
 8018ea0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018ea4:	4669      	mov	r1, sp
 8018ea6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8018ea8:	f000 fa86 	bl	80193b8 <_svfiprintf_r>
 8018eac:	1c43      	adds	r3, r0, #1
 8018eae:	bfbc      	itt	lt
 8018eb0:	238b      	movlt	r3, #139	@ 0x8b
 8018eb2:	602b      	strlt	r3, [r5, #0]
 8018eb4:	2c00      	cmp	r4, #0
 8018eb6:	d0e3      	beq.n	8018e80 <_vsniprintf_r+0x16>
 8018eb8:	9b00      	ldr	r3, [sp, #0]
 8018eba:	2200      	movs	r2, #0
 8018ebc:	701a      	strb	r2, [r3, #0]
 8018ebe:	e7df      	b.n	8018e80 <_vsniprintf_r+0x16>

08018ec0 <vsniprintf>:
 8018ec0:	b507      	push	{r0, r1, r2, lr}
 8018ec2:	9300      	str	r3, [sp, #0]
 8018ec4:	4613      	mov	r3, r2
 8018ec6:	460a      	mov	r2, r1
 8018ec8:	4601      	mov	r1, r0
 8018eca:	4803      	ldr	r0, [pc, #12]	@ (8018ed8 <vsniprintf+0x18>)
 8018ecc:	6800      	ldr	r0, [r0, #0]
 8018ece:	f7ff ffcc 	bl	8018e6a <_vsniprintf_r>
 8018ed2:	b003      	add	sp, #12
 8018ed4:	f85d fb04 	ldr.w	pc, [sp], #4
 8018ed8:	20000770 	.word	0x20000770

08018edc <__swbuf_r>:
 8018edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ede:	460e      	mov	r6, r1
 8018ee0:	4614      	mov	r4, r2
 8018ee2:	4605      	mov	r5, r0
 8018ee4:	b118      	cbz	r0, 8018eee <__swbuf_r+0x12>
 8018ee6:	6a03      	ldr	r3, [r0, #32]
 8018ee8:	b90b      	cbnz	r3, 8018eee <__swbuf_r+0x12>
 8018eea:	f7ff fea5 	bl	8018c38 <__sinit>
 8018eee:	69a3      	ldr	r3, [r4, #24]
 8018ef0:	60a3      	str	r3, [r4, #8]
 8018ef2:	89a3      	ldrh	r3, [r4, #12]
 8018ef4:	071a      	lsls	r2, r3, #28
 8018ef6:	d501      	bpl.n	8018efc <__swbuf_r+0x20>
 8018ef8:	6923      	ldr	r3, [r4, #16]
 8018efa:	b943      	cbnz	r3, 8018f0e <__swbuf_r+0x32>
 8018efc:	4621      	mov	r1, r4
 8018efe:	4628      	mov	r0, r5
 8018f00:	f000 f82a 	bl	8018f58 <__swsetup_r>
 8018f04:	b118      	cbz	r0, 8018f0e <__swbuf_r+0x32>
 8018f06:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018f0a:	4638      	mov	r0, r7
 8018f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f0e:	6823      	ldr	r3, [r4, #0]
 8018f10:	6922      	ldr	r2, [r4, #16]
 8018f12:	1a98      	subs	r0, r3, r2
 8018f14:	6963      	ldr	r3, [r4, #20]
 8018f16:	b2f6      	uxtb	r6, r6
 8018f18:	4283      	cmp	r3, r0
 8018f1a:	4637      	mov	r7, r6
 8018f1c:	dc05      	bgt.n	8018f2a <__swbuf_r+0x4e>
 8018f1e:	4621      	mov	r1, r4
 8018f20:	4628      	mov	r0, r5
 8018f22:	f000 fe99 	bl	8019c58 <_fflush_r>
 8018f26:	2800      	cmp	r0, #0
 8018f28:	d1ed      	bne.n	8018f06 <__swbuf_r+0x2a>
 8018f2a:	68a3      	ldr	r3, [r4, #8]
 8018f2c:	3b01      	subs	r3, #1
 8018f2e:	60a3      	str	r3, [r4, #8]
 8018f30:	6823      	ldr	r3, [r4, #0]
 8018f32:	1c5a      	adds	r2, r3, #1
 8018f34:	6022      	str	r2, [r4, #0]
 8018f36:	701e      	strb	r6, [r3, #0]
 8018f38:	6962      	ldr	r2, [r4, #20]
 8018f3a:	1c43      	adds	r3, r0, #1
 8018f3c:	429a      	cmp	r2, r3
 8018f3e:	d004      	beq.n	8018f4a <__swbuf_r+0x6e>
 8018f40:	89a3      	ldrh	r3, [r4, #12]
 8018f42:	07db      	lsls	r3, r3, #31
 8018f44:	d5e1      	bpl.n	8018f0a <__swbuf_r+0x2e>
 8018f46:	2e0a      	cmp	r6, #10
 8018f48:	d1df      	bne.n	8018f0a <__swbuf_r+0x2e>
 8018f4a:	4621      	mov	r1, r4
 8018f4c:	4628      	mov	r0, r5
 8018f4e:	f000 fe83 	bl	8019c58 <_fflush_r>
 8018f52:	2800      	cmp	r0, #0
 8018f54:	d0d9      	beq.n	8018f0a <__swbuf_r+0x2e>
 8018f56:	e7d6      	b.n	8018f06 <__swbuf_r+0x2a>

08018f58 <__swsetup_r>:
 8018f58:	b538      	push	{r3, r4, r5, lr}
 8018f5a:	4b29      	ldr	r3, [pc, #164]	@ (8019000 <__swsetup_r+0xa8>)
 8018f5c:	4605      	mov	r5, r0
 8018f5e:	6818      	ldr	r0, [r3, #0]
 8018f60:	460c      	mov	r4, r1
 8018f62:	b118      	cbz	r0, 8018f6c <__swsetup_r+0x14>
 8018f64:	6a03      	ldr	r3, [r0, #32]
 8018f66:	b90b      	cbnz	r3, 8018f6c <__swsetup_r+0x14>
 8018f68:	f7ff fe66 	bl	8018c38 <__sinit>
 8018f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f70:	0719      	lsls	r1, r3, #28
 8018f72:	d422      	bmi.n	8018fba <__swsetup_r+0x62>
 8018f74:	06da      	lsls	r2, r3, #27
 8018f76:	d407      	bmi.n	8018f88 <__swsetup_r+0x30>
 8018f78:	2209      	movs	r2, #9
 8018f7a:	602a      	str	r2, [r5, #0]
 8018f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018f80:	81a3      	strh	r3, [r4, #12]
 8018f82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018f86:	e033      	b.n	8018ff0 <__swsetup_r+0x98>
 8018f88:	0758      	lsls	r0, r3, #29
 8018f8a:	d512      	bpl.n	8018fb2 <__swsetup_r+0x5a>
 8018f8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018f8e:	b141      	cbz	r1, 8018fa2 <__swsetup_r+0x4a>
 8018f90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018f94:	4299      	cmp	r1, r3
 8018f96:	d002      	beq.n	8018f9e <__swsetup_r+0x46>
 8018f98:	4628      	mov	r0, r5
 8018f9a:	f000 f95f 	bl	801925c <_free_r>
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8018fa2:	89a3      	ldrh	r3, [r4, #12]
 8018fa4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018fa8:	81a3      	strh	r3, [r4, #12]
 8018faa:	2300      	movs	r3, #0
 8018fac:	6063      	str	r3, [r4, #4]
 8018fae:	6923      	ldr	r3, [r4, #16]
 8018fb0:	6023      	str	r3, [r4, #0]
 8018fb2:	89a3      	ldrh	r3, [r4, #12]
 8018fb4:	f043 0308 	orr.w	r3, r3, #8
 8018fb8:	81a3      	strh	r3, [r4, #12]
 8018fba:	6923      	ldr	r3, [r4, #16]
 8018fbc:	b94b      	cbnz	r3, 8018fd2 <__swsetup_r+0x7a>
 8018fbe:	89a3      	ldrh	r3, [r4, #12]
 8018fc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018fc8:	d003      	beq.n	8018fd2 <__swsetup_r+0x7a>
 8018fca:	4621      	mov	r1, r4
 8018fcc:	4628      	mov	r0, r5
 8018fce:	f000 fea3 	bl	8019d18 <__smakebuf_r>
 8018fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018fd6:	f013 0201 	ands.w	r2, r3, #1
 8018fda:	d00a      	beq.n	8018ff2 <__swsetup_r+0x9a>
 8018fdc:	2200      	movs	r2, #0
 8018fde:	60a2      	str	r2, [r4, #8]
 8018fe0:	6962      	ldr	r2, [r4, #20]
 8018fe2:	4252      	negs	r2, r2
 8018fe4:	61a2      	str	r2, [r4, #24]
 8018fe6:	6922      	ldr	r2, [r4, #16]
 8018fe8:	b942      	cbnz	r2, 8018ffc <__swsetup_r+0xa4>
 8018fea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018fee:	d1c5      	bne.n	8018f7c <__swsetup_r+0x24>
 8018ff0:	bd38      	pop	{r3, r4, r5, pc}
 8018ff2:	0799      	lsls	r1, r3, #30
 8018ff4:	bf58      	it	pl
 8018ff6:	6962      	ldrpl	r2, [r4, #20]
 8018ff8:	60a2      	str	r2, [r4, #8]
 8018ffa:	e7f4      	b.n	8018fe6 <__swsetup_r+0x8e>
 8018ffc:	2000      	movs	r0, #0
 8018ffe:	e7f7      	b.n	8018ff0 <__swsetup_r+0x98>
 8019000:	20000770 	.word	0x20000770

08019004 <memcmp>:
 8019004:	b510      	push	{r4, lr}
 8019006:	3901      	subs	r1, #1
 8019008:	4402      	add	r2, r0
 801900a:	4290      	cmp	r0, r2
 801900c:	d101      	bne.n	8019012 <memcmp+0xe>
 801900e:	2000      	movs	r0, #0
 8019010:	e005      	b.n	801901e <memcmp+0x1a>
 8019012:	7803      	ldrb	r3, [r0, #0]
 8019014:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019018:	42a3      	cmp	r3, r4
 801901a:	d001      	beq.n	8019020 <memcmp+0x1c>
 801901c:	1b18      	subs	r0, r3, r4
 801901e:	bd10      	pop	{r4, pc}
 8019020:	3001      	adds	r0, #1
 8019022:	e7f2      	b.n	801900a <memcmp+0x6>

08019024 <memmove>:
 8019024:	4288      	cmp	r0, r1
 8019026:	b510      	push	{r4, lr}
 8019028:	eb01 0402 	add.w	r4, r1, r2
 801902c:	d902      	bls.n	8019034 <memmove+0x10>
 801902e:	4284      	cmp	r4, r0
 8019030:	4623      	mov	r3, r4
 8019032:	d807      	bhi.n	8019044 <memmove+0x20>
 8019034:	1e43      	subs	r3, r0, #1
 8019036:	42a1      	cmp	r1, r4
 8019038:	d008      	beq.n	801904c <memmove+0x28>
 801903a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801903e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019042:	e7f8      	b.n	8019036 <memmove+0x12>
 8019044:	4402      	add	r2, r0
 8019046:	4601      	mov	r1, r0
 8019048:	428a      	cmp	r2, r1
 801904a:	d100      	bne.n	801904e <memmove+0x2a>
 801904c:	bd10      	pop	{r4, pc}
 801904e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019052:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019056:	e7f7      	b.n	8019048 <memmove+0x24>

08019058 <memset>:
 8019058:	4402      	add	r2, r0
 801905a:	4603      	mov	r3, r0
 801905c:	4293      	cmp	r3, r2
 801905e:	d100      	bne.n	8019062 <memset+0xa>
 8019060:	4770      	bx	lr
 8019062:	f803 1b01 	strb.w	r1, [r3], #1
 8019066:	e7f9      	b.n	801905c <memset+0x4>

08019068 <strchr>:
 8019068:	b2c9      	uxtb	r1, r1
 801906a:	4603      	mov	r3, r0
 801906c:	4618      	mov	r0, r3
 801906e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019072:	b112      	cbz	r2, 801907a <strchr+0x12>
 8019074:	428a      	cmp	r2, r1
 8019076:	d1f9      	bne.n	801906c <strchr+0x4>
 8019078:	4770      	bx	lr
 801907a:	2900      	cmp	r1, #0
 801907c:	bf18      	it	ne
 801907e:	2000      	movne	r0, #0
 8019080:	4770      	bx	lr

08019082 <strncmp>:
 8019082:	b510      	push	{r4, lr}
 8019084:	b16a      	cbz	r2, 80190a2 <strncmp+0x20>
 8019086:	3901      	subs	r1, #1
 8019088:	1884      	adds	r4, r0, r2
 801908a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801908e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019092:	429a      	cmp	r2, r3
 8019094:	d103      	bne.n	801909e <strncmp+0x1c>
 8019096:	42a0      	cmp	r0, r4
 8019098:	d001      	beq.n	801909e <strncmp+0x1c>
 801909a:	2a00      	cmp	r2, #0
 801909c:	d1f5      	bne.n	801908a <strncmp+0x8>
 801909e:	1ad0      	subs	r0, r2, r3
 80190a0:	bd10      	pop	{r4, pc}
 80190a2:	4610      	mov	r0, r2
 80190a4:	e7fc      	b.n	80190a0 <strncmp+0x1e>

080190a6 <strstr>:
 80190a6:	780a      	ldrb	r2, [r1, #0]
 80190a8:	b570      	push	{r4, r5, r6, lr}
 80190aa:	b96a      	cbnz	r2, 80190c8 <strstr+0x22>
 80190ac:	bd70      	pop	{r4, r5, r6, pc}
 80190ae:	429a      	cmp	r2, r3
 80190b0:	d109      	bne.n	80190c6 <strstr+0x20>
 80190b2:	460c      	mov	r4, r1
 80190b4:	4605      	mov	r5, r0
 80190b6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d0f6      	beq.n	80190ac <strstr+0x6>
 80190be:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80190c2:	429e      	cmp	r6, r3
 80190c4:	d0f7      	beq.n	80190b6 <strstr+0x10>
 80190c6:	3001      	adds	r0, #1
 80190c8:	7803      	ldrb	r3, [r0, #0]
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d1ef      	bne.n	80190ae <strstr+0x8>
 80190ce:	4618      	mov	r0, r3
 80190d0:	e7ec      	b.n	80190ac <strstr+0x6>
	...

080190d4 <_close_r>:
 80190d4:	b538      	push	{r3, r4, r5, lr}
 80190d6:	4d06      	ldr	r5, [pc, #24]	@ (80190f0 <_close_r+0x1c>)
 80190d8:	2300      	movs	r3, #0
 80190da:	4604      	mov	r4, r0
 80190dc:	4608      	mov	r0, r1
 80190de:	602b      	str	r3, [r5, #0]
 80190e0:	f7e9 f894 	bl	800220c <_close>
 80190e4:	1c43      	adds	r3, r0, #1
 80190e6:	d102      	bne.n	80190ee <_close_r+0x1a>
 80190e8:	682b      	ldr	r3, [r5, #0]
 80190ea:	b103      	cbz	r3, 80190ee <_close_r+0x1a>
 80190ec:	6023      	str	r3, [r4, #0]
 80190ee:	bd38      	pop	{r3, r4, r5, pc}
 80190f0:	2000b7e4 	.word	0x2000b7e4

080190f4 <_lseek_r>:
 80190f4:	b538      	push	{r3, r4, r5, lr}
 80190f6:	4d07      	ldr	r5, [pc, #28]	@ (8019114 <_lseek_r+0x20>)
 80190f8:	4604      	mov	r4, r0
 80190fa:	4608      	mov	r0, r1
 80190fc:	4611      	mov	r1, r2
 80190fe:	2200      	movs	r2, #0
 8019100:	602a      	str	r2, [r5, #0]
 8019102:	461a      	mov	r2, r3
 8019104:	f7e9 f8a9 	bl	800225a <_lseek>
 8019108:	1c43      	adds	r3, r0, #1
 801910a:	d102      	bne.n	8019112 <_lseek_r+0x1e>
 801910c:	682b      	ldr	r3, [r5, #0]
 801910e:	b103      	cbz	r3, 8019112 <_lseek_r+0x1e>
 8019110:	6023      	str	r3, [r4, #0]
 8019112:	bd38      	pop	{r3, r4, r5, pc}
 8019114:	2000b7e4 	.word	0x2000b7e4

08019118 <_read_r>:
 8019118:	b538      	push	{r3, r4, r5, lr}
 801911a:	4d07      	ldr	r5, [pc, #28]	@ (8019138 <_read_r+0x20>)
 801911c:	4604      	mov	r4, r0
 801911e:	4608      	mov	r0, r1
 8019120:	4611      	mov	r1, r2
 8019122:	2200      	movs	r2, #0
 8019124:	602a      	str	r2, [r5, #0]
 8019126:	461a      	mov	r2, r3
 8019128:	f7e9 f837 	bl	800219a <_read>
 801912c:	1c43      	adds	r3, r0, #1
 801912e:	d102      	bne.n	8019136 <_read_r+0x1e>
 8019130:	682b      	ldr	r3, [r5, #0]
 8019132:	b103      	cbz	r3, 8019136 <_read_r+0x1e>
 8019134:	6023      	str	r3, [r4, #0]
 8019136:	bd38      	pop	{r3, r4, r5, pc}
 8019138:	2000b7e4 	.word	0x2000b7e4

0801913c <_sbrk_r>:
 801913c:	b538      	push	{r3, r4, r5, lr}
 801913e:	4d06      	ldr	r5, [pc, #24]	@ (8019158 <_sbrk_r+0x1c>)
 8019140:	2300      	movs	r3, #0
 8019142:	4604      	mov	r4, r0
 8019144:	4608      	mov	r0, r1
 8019146:	602b      	str	r3, [r5, #0]
 8019148:	f7e9 f894 	bl	8002274 <_sbrk>
 801914c:	1c43      	adds	r3, r0, #1
 801914e:	d102      	bne.n	8019156 <_sbrk_r+0x1a>
 8019150:	682b      	ldr	r3, [r5, #0]
 8019152:	b103      	cbz	r3, 8019156 <_sbrk_r+0x1a>
 8019154:	6023      	str	r3, [r4, #0]
 8019156:	bd38      	pop	{r3, r4, r5, pc}
 8019158:	2000b7e4 	.word	0x2000b7e4

0801915c <_write_r>:
 801915c:	b538      	push	{r3, r4, r5, lr}
 801915e:	4d07      	ldr	r5, [pc, #28]	@ (801917c <_write_r+0x20>)
 8019160:	4604      	mov	r4, r0
 8019162:	4608      	mov	r0, r1
 8019164:	4611      	mov	r1, r2
 8019166:	2200      	movs	r2, #0
 8019168:	602a      	str	r2, [r5, #0]
 801916a:	461a      	mov	r2, r3
 801916c:	f7e9 f832 	bl	80021d4 <_write>
 8019170:	1c43      	adds	r3, r0, #1
 8019172:	d102      	bne.n	801917a <_write_r+0x1e>
 8019174:	682b      	ldr	r3, [r5, #0]
 8019176:	b103      	cbz	r3, 801917a <_write_r+0x1e>
 8019178:	6023      	str	r3, [r4, #0]
 801917a:	bd38      	pop	{r3, r4, r5, pc}
 801917c:	2000b7e4 	.word	0x2000b7e4

08019180 <__errno>:
 8019180:	4b01      	ldr	r3, [pc, #4]	@ (8019188 <__errno+0x8>)
 8019182:	6818      	ldr	r0, [r3, #0]
 8019184:	4770      	bx	lr
 8019186:	bf00      	nop
 8019188:	20000770 	.word	0x20000770

0801918c <__libc_init_array>:
 801918c:	b570      	push	{r4, r5, r6, lr}
 801918e:	4d0d      	ldr	r5, [pc, #52]	@ (80191c4 <__libc_init_array+0x38>)
 8019190:	4c0d      	ldr	r4, [pc, #52]	@ (80191c8 <__libc_init_array+0x3c>)
 8019192:	1b64      	subs	r4, r4, r5
 8019194:	10a4      	asrs	r4, r4, #2
 8019196:	2600      	movs	r6, #0
 8019198:	42a6      	cmp	r6, r4
 801919a:	d109      	bne.n	80191b0 <__libc_init_array+0x24>
 801919c:	4d0b      	ldr	r5, [pc, #44]	@ (80191cc <__libc_init_array+0x40>)
 801919e:	4c0c      	ldr	r4, [pc, #48]	@ (80191d0 <__libc_init_array+0x44>)
 80191a0:	f001 f9d4 	bl	801a54c <_init>
 80191a4:	1b64      	subs	r4, r4, r5
 80191a6:	10a4      	asrs	r4, r4, #2
 80191a8:	2600      	movs	r6, #0
 80191aa:	42a6      	cmp	r6, r4
 80191ac:	d105      	bne.n	80191ba <__libc_init_array+0x2e>
 80191ae:	bd70      	pop	{r4, r5, r6, pc}
 80191b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80191b4:	4798      	blx	r3
 80191b6:	3601      	adds	r6, #1
 80191b8:	e7ee      	b.n	8019198 <__libc_init_array+0xc>
 80191ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80191be:	4798      	blx	r3
 80191c0:	3601      	adds	r6, #1
 80191c2:	e7f2      	b.n	80191aa <__libc_init_array+0x1e>
 80191c4:	0801bae0 	.word	0x0801bae0
 80191c8:	0801bae0 	.word	0x0801bae0
 80191cc:	0801bae0 	.word	0x0801bae0
 80191d0:	0801baec 	.word	0x0801baec

080191d4 <__retarget_lock_init_recursive>:
 80191d4:	4770      	bx	lr

080191d6 <__retarget_lock_acquire_recursive>:
 80191d6:	4770      	bx	lr

080191d8 <__retarget_lock_release_recursive>:
 80191d8:	4770      	bx	lr

080191da <strcpy>:
 80191da:	4603      	mov	r3, r0
 80191dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80191e0:	f803 2b01 	strb.w	r2, [r3], #1
 80191e4:	2a00      	cmp	r2, #0
 80191e6:	d1f9      	bne.n	80191dc <strcpy+0x2>
 80191e8:	4770      	bx	lr

080191ea <memcpy>:
 80191ea:	440a      	add	r2, r1
 80191ec:	4291      	cmp	r1, r2
 80191ee:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80191f2:	d100      	bne.n	80191f6 <memcpy+0xc>
 80191f4:	4770      	bx	lr
 80191f6:	b510      	push	{r4, lr}
 80191f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80191fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019200:	4291      	cmp	r1, r2
 8019202:	d1f9      	bne.n	80191f8 <memcpy+0xe>
 8019204:	bd10      	pop	{r4, pc}
	...

08019208 <__assert_func>:
 8019208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801920a:	4614      	mov	r4, r2
 801920c:	461a      	mov	r2, r3
 801920e:	4b09      	ldr	r3, [pc, #36]	@ (8019234 <__assert_func+0x2c>)
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	4605      	mov	r5, r0
 8019214:	68d8      	ldr	r0, [r3, #12]
 8019216:	b954      	cbnz	r4, 801922e <__assert_func+0x26>
 8019218:	4b07      	ldr	r3, [pc, #28]	@ (8019238 <__assert_func+0x30>)
 801921a:	461c      	mov	r4, r3
 801921c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019220:	9100      	str	r1, [sp, #0]
 8019222:	462b      	mov	r3, r5
 8019224:	4905      	ldr	r1, [pc, #20]	@ (801923c <__assert_func+0x34>)
 8019226:	f000 fd3f 	bl	8019ca8 <fiprintf>
 801922a:	f000 fdd3 	bl	8019dd4 <abort>
 801922e:	4b04      	ldr	r3, [pc, #16]	@ (8019240 <__assert_func+0x38>)
 8019230:	e7f4      	b.n	801921c <__assert_func+0x14>
 8019232:	bf00      	nop
 8019234:	20000770 	.word	0x20000770
 8019238:	0801ba2d 	.word	0x0801ba2d
 801923c:	0801b9ff 	.word	0x0801b9ff
 8019240:	0801b9f2 	.word	0x0801b9f2

08019244 <__env_lock>:
 8019244:	4801      	ldr	r0, [pc, #4]	@ (801924c <__env_lock+0x8>)
 8019246:	f7ff bfc6 	b.w	80191d6 <__retarget_lock_acquire_recursive>
 801924a:	bf00      	nop
 801924c:	2000b7e8 	.word	0x2000b7e8

08019250 <__env_unlock>:
 8019250:	4801      	ldr	r0, [pc, #4]	@ (8019258 <__env_unlock+0x8>)
 8019252:	f7ff bfc1 	b.w	80191d8 <__retarget_lock_release_recursive>
 8019256:	bf00      	nop
 8019258:	2000b7e8 	.word	0x2000b7e8

0801925c <_free_r>:
 801925c:	b538      	push	{r3, r4, r5, lr}
 801925e:	4605      	mov	r5, r0
 8019260:	2900      	cmp	r1, #0
 8019262:	d041      	beq.n	80192e8 <_free_r+0x8c>
 8019264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019268:	1f0c      	subs	r4, r1, #4
 801926a:	2b00      	cmp	r3, #0
 801926c:	bfb8      	it	lt
 801926e:	18e4      	addlt	r4, r4, r3
 8019270:	f7ff fb30 	bl	80188d4 <__malloc_lock>
 8019274:	4a1d      	ldr	r2, [pc, #116]	@ (80192ec <_free_r+0x90>)
 8019276:	6813      	ldr	r3, [r2, #0]
 8019278:	b933      	cbnz	r3, 8019288 <_free_r+0x2c>
 801927a:	6063      	str	r3, [r4, #4]
 801927c:	6014      	str	r4, [r2, #0]
 801927e:	4628      	mov	r0, r5
 8019280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019284:	f7ff bb2c 	b.w	80188e0 <__malloc_unlock>
 8019288:	42a3      	cmp	r3, r4
 801928a:	d908      	bls.n	801929e <_free_r+0x42>
 801928c:	6820      	ldr	r0, [r4, #0]
 801928e:	1821      	adds	r1, r4, r0
 8019290:	428b      	cmp	r3, r1
 8019292:	bf01      	itttt	eq
 8019294:	6819      	ldreq	r1, [r3, #0]
 8019296:	685b      	ldreq	r3, [r3, #4]
 8019298:	1809      	addeq	r1, r1, r0
 801929a:	6021      	streq	r1, [r4, #0]
 801929c:	e7ed      	b.n	801927a <_free_r+0x1e>
 801929e:	461a      	mov	r2, r3
 80192a0:	685b      	ldr	r3, [r3, #4]
 80192a2:	b10b      	cbz	r3, 80192a8 <_free_r+0x4c>
 80192a4:	42a3      	cmp	r3, r4
 80192a6:	d9fa      	bls.n	801929e <_free_r+0x42>
 80192a8:	6811      	ldr	r1, [r2, #0]
 80192aa:	1850      	adds	r0, r2, r1
 80192ac:	42a0      	cmp	r0, r4
 80192ae:	d10b      	bne.n	80192c8 <_free_r+0x6c>
 80192b0:	6820      	ldr	r0, [r4, #0]
 80192b2:	4401      	add	r1, r0
 80192b4:	1850      	adds	r0, r2, r1
 80192b6:	4283      	cmp	r3, r0
 80192b8:	6011      	str	r1, [r2, #0]
 80192ba:	d1e0      	bne.n	801927e <_free_r+0x22>
 80192bc:	6818      	ldr	r0, [r3, #0]
 80192be:	685b      	ldr	r3, [r3, #4]
 80192c0:	6053      	str	r3, [r2, #4]
 80192c2:	4408      	add	r0, r1
 80192c4:	6010      	str	r0, [r2, #0]
 80192c6:	e7da      	b.n	801927e <_free_r+0x22>
 80192c8:	d902      	bls.n	80192d0 <_free_r+0x74>
 80192ca:	230c      	movs	r3, #12
 80192cc:	602b      	str	r3, [r5, #0]
 80192ce:	e7d6      	b.n	801927e <_free_r+0x22>
 80192d0:	6820      	ldr	r0, [r4, #0]
 80192d2:	1821      	adds	r1, r4, r0
 80192d4:	428b      	cmp	r3, r1
 80192d6:	bf04      	itt	eq
 80192d8:	6819      	ldreq	r1, [r3, #0]
 80192da:	685b      	ldreq	r3, [r3, #4]
 80192dc:	6063      	str	r3, [r4, #4]
 80192de:	bf04      	itt	eq
 80192e0:	1809      	addeq	r1, r1, r0
 80192e2:	6021      	streq	r1, [r4, #0]
 80192e4:	6054      	str	r4, [r2, #4]
 80192e6:	e7ca      	b.n	801927e <_free_r+0x22>
 80192e8:	bd38      	pop	{r3, r4, r5, pc}
 80192ea:	bf00      	nop
 80192ec:	2000b6a4 	.word	0x2000b6a4

080192f0 <_malloc_usable_size_r>:
 80192f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80192f4:	1f18      	subs	r0, r3, #4
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	bfbc      	itt	lt
 80192fa:	580b      	ldrlt	r3, [r1, r0]
 80192fc:	18c0      	addlt	r0, r0, r3
 80192fe:	4770      	bx	lr

08019300 <__ssputs_r>:
 8019300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019304:	688e      	ldr	r6, [r1, #8]
 8019306:	461f      	mov	r7, r3
 8019308:	42be      	cmp	r6, r7
 801930a:	680b      	ldr	r3, [r1, #0]
 801930c:	4682      	mov	sl, r0
 801930e:	460c      	mov	r4, r1
 8019310:	4690      	mov	r8, r2
 8019312:	d82d      	bhi.n	8019370 <__ssputs_r+0x70>
 8019314:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019318:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801931c:	d026      	beq.n	801936c <__ssputs_r+0x6c>
 801931e:	6965      	ldr	r5, [r4, #20]
 8019320:	6909      	ldr	r1, [r1, #16]
 8019322:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019326:	eba3 0901 	sub.w	r9, r3, r1
 801932a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801932e:	1c7b      	adds	r3, r7, #1
 8019330:	444b      	add	r3, r9
 8019332:	106d      	asrs	r5, r5, #1
 8019334:	429d      	cmp	r5, r3
 8019336:	bf38      	it	cc
 8019338:	461d      	movcc	r5, r3
 801933a:	0553      	lsls	r3, r2, #21
 801933c:	d527      	bpl.n	801938e <__ssputs_r+0x8e>
 801933e:	4629      	mov	r1, r5
 8019340:	f7ff fa48 	bl	80187d4 <_malloc_r>
 8019344:	4606      	mov	r6, r0
 8019346:	b360      	cbz	r0, 80193a2 <__ssputs_r+0xa2>
 8019348:	6921      	ldr	r1, [r4, #16]
 801934a:	464a      	mov	r2, r9
 801934c:	f7ff ff4d 	bl	80191ea <memcpy>
 8019350:	89a3      	ldrh	r3, [r4, #12]
 8019352:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801935a:	81a3      	strh	r3, [r4, #12]
 801935c:	6126      	str	r6, [r4, #16]
 801935e:	6165      	str	r5, [r4, #20]
 8019360:	444e      	add	r6, r9
 8019362:	eba5 0509 	sub.w	r5, r5, r9
 8019366:	6026      	str	r6, [r4, #0]
 8019368:	60a5      	str	r5, [r4, #8]
 801936a:	463e      	mov	r6, r7
 801936c:	42be      	cmp	r6, r7
 801936e:	d900      	bls.n	8019372 <__ssputs_r+0x72>
 8019370:	463e      	mov	r6, r7
 8019372:	6820      	ldr	r0, [r4, #0]
 8019374:	4632      	mov	r2, r6
 8019376:	4641      	mov	r1, r8
 8019378:	f7ff fe54 	bl	8019024 <memmove>
 801937c:	68a3      	ldr	r3, [r4, #8]
 801937e:	1b9b      	subs	r3, r3, r6
 8019380:	60a3      	str	r3, [r4, #8]
 8019382:	6823      	ldr	r3, [r4, #0]
 8019384:	4433      	add	r3, r6
 8019386:	6023      	str	r3, [r4, #0]
 8019388:	2000      	movs	r0, #0
 801938a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801938e:	462a      	mov	r2, r5
 8019390:	f7ff fb20 	bl	80189d4 <_realloc_r>
 8019394:	4606      	mov	r6, r0
 8019396:	2800      	cmp	r0, #0
 8019398:	d1e0      	bne.n	801935c <__ssputs_r+0x5c>
 801939a:	6921      	ldr	r1, [r4, #16]
 801939c:	4650      	mov	r0, sl
 801939e:	f7ff ff5d 	bl	801925c <_free_r>
 80193a2:	230c      	movs	r3, #12
 80193a4:	f8ca 3000 	str.w	r3, [sl]
 80193a8:	89a3      	ldrh	r3, [r4, #12]
 80193aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80193ae:	81a3      	strh	r3, [r4, #12]
 80193b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80193b4:	e7e9      	b.n	801938a <__ssputs_r+0x8a>
	...

080193b8 <_svfiprintf_r>:
 80193b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193bc:	4698      	mov	r8, r3
 80193be:	898b      	ldrh	r3, [r1, #12]
 80193c0:	061b      	lsls	r3, r3, #24
 80193c2:	b09d      	sub	sp, #116	@ 0x74
 80193c4:	4607      	mov	r7, r0
 80193c6:	460d      	mov	r5, r1
 80193c8:	4614      	mov	r4, r2
 80193ca:	d510      	bpl.n	80193ee <_svfiprintf_r+0x36>
 80193cc:	690b      	ldr	r3, [r1, #16]
 80193ce:	b973      	cbnz	r3, 80193ee <_svfiprintf_r+0x36>
 80193d0:	2140      	movs	r1, #64	@ 0x40
 80193d2:	f7ff f9ff 	bl	80187d4 <_malloc_r>
 80193d6:	6028      	str	r0, [r5, #0]
 80193d8:	6128      	str	r0, [r5, #16]
 80193da:	b930      	cbnz	r0, 80193ea <_svfiprintf_r+0x32>
 80193dc:	230c      	movs	r3, #12
 80193de:	603b      	str	r3, [r7, #0]
 80193e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80193e4:	b01d      	add	sp, #116	@ 0x74
 80193e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193ea:	2340      	movs	r3, #64	@ 0x40
 80193ec:	616b      	str	r3, [r5, #20]
 80193ee:	2300      	movs	r3, #0
 80193f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80193f2:	2320      	movs	r3, #32
 80193f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80193f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80193fc:	2330      	movs	r3, #48	@ 0x30
 80193fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801959c <_svfiprintf_r+0x1e4>
 8019402:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019406:	f04f 0901 	mov.w	r9, #1
 801940a:	4623      	mov	r3, r4
 801940c:	469a      	mov	sl, r3
 801940e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019412:	b10a      	cbz	r2, 8019418 <_svfiprintf_r+0x60>
 8019414:	2a25      	cmp	r2, #37	@ 0x25
 8019416:	d1f9      	bne.n	801940c <_svfiprintf_r+0x54>
 8019418:	ebba 0b04 	subs.w	fp, sl, r4
 801941c:	d00b      	beq.n	8019436 <_svfiprintf_r+0x7e>
 801941e:	465b      	mov	r3, fp
 8019420:	4622      	mov	r2, r4
 8019422:	4629      	mov	r1, r5
 8019424:	4638      	mov	r0, r7
 8019426:	f7ff ff6b 	bl	8019300 <__ssputs_r>
 801942a:	3001      	adds	r0, #1
 801942c:	f000 80a7 	beq.w	801957e <_svfiprintf_r+0x1c6>
 8019430:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019432:	445a      	add	r2, fp
 8019434:	9209      	str	r2, [sp, #36]	@ 0x24
 8019436:	f89a 3000 	ldrb.w	r3, [sl]
 801943a:	2b00      	cmp	r3, #0
 801943c:	f000 809f 	beq.w	801957e <_svfiprintf_r+0x1c6>
 8019440:	2300      	movs	r3, #0
 8019442:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019446:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801944a:	f10a 0a01 	add.w	sl, sl, #1
 801944e:	9304      	str	r3, [sp, #16]
 8019450:	9307      	str	r3, [sp, #28]
 8019452:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019456:	931a      	str	r3, [sp, #104]	@ 0x68
 8019458:	4654      	mov	r4, sl
 801945a:	2205      	movs	r2, #5
 801945c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019460:	484e      	ldr	r0, [pc, #312]	@ (801959c <_svfiprintf_r+0x1e4>)
 8019462:	f7e6 fef5 	bl	8000250 <memchr>
 8019466:	9a04      	ldr	r2, [sp, #16]
 8019468:	b9d8      	cbnz	r0, 80194a2 <_svfiprintf_r+0xea>
 801946a:	06d0      	lsls	r0, r2, #27
 801946c:	bf44      	itt	mi
 801946e:	2320      	movmi	r3, #32
 8019470:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019474:	0711      	lsls	r1, r2, #28
 8019476:	bf44      	itt	mi
 8019478:	232b      	movmi	r3, #43	@ 0x2b
 801947a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801947e:	f89a 3000 	ldrb.w	r3, [sl]
 8019482:	2b2a      	cmp	r3, #42	@ 0x2a
 8019484:	d015      	beq.n	80194b2 <_svfiprintf_r+0xfa>
 8019486:	9a07      	ldr	r2, [sp, #28]
 8019488:	4654      	mov	r4, sl
 801948a:	2000      	movs	r0, #0
 801948c:	f04f 0c0a 	mov.w	ip, #10
 8019490:	4621      	mov	r1, r4
 8019492:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019496:	3b30      	subs	r3, #48	@ 0x30
 8019498:	2b09      	cmp	r3, #9
 801949a:	d94b      	bls.n	8019534 <_svfiprintf_r+0x17c>
 801949c:	b1b0      	cbz	r0, 80194cc <_svfiprintf_r+0x114>
 801949e:	9207      	str	r2, [sp, #28]
 80194a0:	e014      	b.n	80194cc <_svfiprintf_r+0x114>
 80194a2:	eba0 0308 	sub.w	r3, r0, r8
 80194a6:	fa09 f303 	lsl.w	r3, r9, r3
 80194aa:	4313      	orrs	r3, r2
 80194ac:	9304      	str	r3, [sp, #16]
 80194ae:	46a2      	mov	sl, r4
 80194b0:	e7d2      	b.n	8019458 <_svfiprintf_r+0xa0>
 80194b2:	9b03      	ldr	r3, [sp, #12]
 80194b4:	1d19      	adds	r1, r3, #4
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	9103      	str	r1, [sp, #12]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	bfbb      	ittet	lt
 80194be:	425b      	neglt	r3, r3
 80194c0:	f042 0202 	orrlt.w	r2, r2, #2
 80194c4:	9307      	strge	r3, [sp, #28]
 80194c6:	9307      	strlt	r3, [sp, #28]
 80194c8:	bfb8      	it	lt
 80194ca:	9204      	strlt	r2, [sp, #16]
 80194cc:	7823      	ldrb	r3, [r4, #0]
 80194ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80194d0:	d10a      	bne.n	80194e8 <_svfiprintf_r+0x130>
 80194d2:	7863      	ldrb	r3, [r4, #1]
 80194d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80194d6:	d132      	bne.n	801953e <_svfiprintf_r+0x186>
 80194d8:	9b03      	ldr	r3, [sp, #12]
 80194da:	1d1a      	adds	r2, r3, #4
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	9203      	str	r2, [sp, #12]
 80194e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80194e4:	3402      	adds	r4, #2
 80194e6:	9305      	str	r3, [sp, #20]
 80194e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80195ac <_svfiprintf_r+0x1f4>
 80194ec:	7821      	ldrb	r1, [r4, #0]
 80194ee:	2203      	movs	r2, #3
 80194f0:	4650      	mov	r0, sl
 80194f2:	f7e6 fead 	bl	8000250 <memchr>
 80194f6:	b138      	cbz	r0, 8019508 <_svfiprintf_r+0x150>
 80194f8:	9b04      	ldr	r3, [sp, #16]
 80194fa:	eba0 000a 	sub.w	r0, r0, sl
 80194fe:	2240      	movs	r2, #64	@ 0x40
 8019500:	4082      	lsls	r2, r0
 8019502:	4313      	orrs	r3, r2
 8019504:	3401      	adds	r4, #1
 8019506:	9304      	str	r3, [sp, #16]
 8019508:	f814 1b01 	ldrb.w	r1, [r4], #1
 801950c:	4824      	ldr	r0, [pc, #144]	@ (80195a0 <_svfiprintf_r+0x1e8>)
 801950e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019512:	2206      	movs	r2, #6
 8019514:	f7e6 fe9c 	bl	8000250 <memchr>
 8019518:	2800      	cmp	r0, #0
 801951a:	d036      	beq.n	801958a <_svfiprintf_r+0x1d2>
 801951c:	4b21      	ldr	r3, [pc, #132]	@ (80195a4 <_svfiprintf_r+0x1ec>)
 801951e:	bb1b      	cbnz	r3, 8019568 <_svfiprintf_r+0x1b0>
 8019520:	9b03      	ldr	r3, [sp, #12]
 8019522:	3307      	adds	r3, #7
 8019524:	f023 0307 	bic.w	r3, r3, #7
 8019528:	3308      	adds	r3, #8
 801952a:	9303      	str	r3, [sp, #12]
 801952c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801952e:	4433      	add	r3, r6
 8019530:	9309      	str	r3, [sp, #36]	@ 0x24
 8019532:	e76a      	b.n	801940a <_svfiprintf_r+0x52>
 8019534:	fb0c 3202 	mla	r2, ip, r2, r3
 8019538:	460c      	mov	r4, r1
 801953a:	2001      	movs	r0, #1
 801953c:	e7a8      	b.n	8019490 <_svfiprintf_r+0xd8>
 801953e:	2300      	movs	r3, #0
 8019540:	3401      	adds	r4, #1
 8019542:	9305      	str	r3, [sp, #20]
 8019544:	4619      	mov	r1, r3
 8019546:	f04f 0c0a 	mov.w	ip, #10
 801954a:	4620      	mov	r0, r4
 801954c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019550:	3a30      	subs	r2, #48	@ 0x30
 8019552:	2a09      	cmp	r2, #9
 8019554:	d903      	bls.n	801955e <_svfiprintf_r+0x1a6>
 8019556:	2b00      	cmp	r3, #0
 8019558:	d0c6      	beq.n	80194e8 <_svfiprintf_r+0x130>
 801955a:	9105      	str	r1, [sp, #20]
 801955c:	e7c4      	b.n	80194e8 <_svfiprintf_r+0x130>
 801955e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019562:	4604      	mov	r4, r0
 8019564:	2301      	movs	r3, #1
 8019566:	e7f0      	b.n	801954a <_svfiprintf_r+0x192>
 8019568:	ab03      	add	r3, sp, #12
 801956a:	9300      	str	r3, [sp, #0]
 801956c:	462a      	mov	r2, r5
 801956e:	4b0e      	ldr	r3, [pc, #56]	@ (80195a8 <_svfiprintf_r+0x1f0>)
 8019570:	a904      	add	r1, sp, #16
 8019572:	4638      	mov	r0, r7
 8019574:	f3af 8000 	nop.w
 8019578:	1c42      	adds	r2, r0, #1
 801957a:	4606      	mov	r6, r0
 801957c:	d1d6      	bne.n	801952c <_svfiprintf_r+0x174>
 801957e:	89ab      	ldrh	r3, [r5, #12]
 8019580:	065b      	lsls	r3, r3, #25
 8019582:	f53f af2d 	bmi.w	80193e0 <_svfiprintf_r+0x28>
 8019586:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019588:	e72c      	b.n	80193e4 <_svfiprintf_r+0x2c>
 801958a:	ab03      	add	r3, sp, #12
 801958c:	9300      	str	r3, [sp, #0]
 801958e:	462a      	mov	r2, r5
 8019590:	4b05      	ldr	r3, [pc, #20]	@ (80195a8 <_svfiprintf_r+0x1f0>)
 8019592:	a904      	add	r1, sp, #16
 8019594:	4638      	mov	r0, r7
 8019596:	f000 f9bb 	bl	8019910 <_printf_i>
 801959a:	e7ed      	b.n	8019578 <_svfiprintf_r+0x1c0>
 801959c:	0801ba2e 	.word	0x0801ba2e
 80195a0:	0801ba38 	.word	0x0801ba38
 80195a4:	00000000 	.word	0x00000000
 80195a8:	08019301 	.word	0x08019301
 80195ac:	0801ba34 	.word	0x0801ba34

080195b0 <__sfputc_r>:
 80195b0:	6893      	ldr	r3, [r2, #8]
 80195b2:	3b01      	subs	r3, #1
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	b410      	push	{r4}
 80195b8:	6093      	str	r3, [r2, #8]
 80195ba:	da08      	bge.n	80195ce <__sfputc_r+0x1e>
 80195bc:	6994      	ldr	r4, [r2, #24]
 80195be:	42a3      	cmp	r3, r4
 80195c0:	db01      	blt.n	80195c6 <__sfputc_r+0x16>
 80195c2:	290a      	cmp	r1, #10
 80195c4:	d103      	bne.n	80195ce <__sfputc_r+0x1e>
 80195c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195ca:	f7ff bc87 	b.w	8018edc <__swbuf_r>
 80195ce:	6813      	ldr	r3, [r2, #0]
 80195d0:	1c58      	adds	r0, r3, #1
 80195d2:	6010      	str	r0, [r2, #0]
 80195d4:	7019      	strb	r1, [r3, #0]
 80195d6:	4608      	mov	r0, r1
 80195d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195dc:	4770      	bx	lr

080195de <__sfputs_r>:
 80195de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195e0:	4606      	mov	r6, r0
 80195e2:	460f      	mov	r7, r1
 80195e4:	4614      	mov	r4, r2
 80195e6:	18d5      	adds	r5, r2, r3
 80195e8:	42ac      	cmp	r4, r5
 80195ea:	d101      	bne.n	80195f0 <__sfputs_r+0x12>
 80195ec:	2000      	movs	r0, #0
 80195ee:	e007      	b.n	8019600 <__sfputs_r+0x22>
 80195f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195f4:	463a      	mov	r2, r7
 80195f6:	4630      	mov	r0, r6
 80195f8:	f7ff ffda 	bl	80195b0 <__sfputc_r>
 80195fc:	1c43      	adds	r3, r0, #1
 80195fe:	d1f3      	bne.n	80195e8 <__sfputs_r+0xa>
 8019600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019604 <_vfiprintf_r>:
 8019604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019608:	460d      	mov	r5, r1
 801960a:	b09d      	sub	sp, #116	@ 0x74
 801960c:	4614      	mov	r4, r2
 801960e:	4698      	mov	r8, r3
 8019610:	4606      	mov	r6, r0
 8019612:	b118      	cbz	r0, 801961c <_vfiprintf_r+0x18>
 8019614:	6a03      	ldr	r3, [r0, #32]
 8019616:	b90b      	cbnz	r3, 801961c <_vfiprintf_r+0x18>
 8019618:	f7ff fb0e 	bl	8018c38 <__sinit>
 801961c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801961e:	07d9      	lsls	r1, r3, #31
 8019620:	d405      	bmi.n	801962e <_vfiprintf_r+0x2a>
 8019622:	89ab      	ldrh	r3, [r5, #12]
 8019624:	059a      	lsls	r2, r3, #22
 8019626:	d402      	bmi.n	801962e <_vfiprintf_r+0x2a>
 8019628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801962a:	f7ff fdd4 	bl	80191d6 <__retarget_lock_acquire_recursive>
 801962e:	89ab      	ldrh	r3, [r5, #12]
 8019630:	071b      	lsls	r3, r3, #28
 8019632:	d501      	bpl.n	8019638 <_vfiprintf_r+0x34>
 8019634:	692b      	ldr	r3, [r5, #16]
 8019636:	b99b      	cbnz	r3, 8019660 <_vfiprintf_r+0x5c>
 8019638:	4629      	mov	r1, r5
 801963a:	4630      	mov	r0, r6
 801963c:	f7ff fc8c 	bl	8018f58 <__swsetup_r>
 8019640:	b170      	cbz	r0, 8019660 <_vfiprintf_r+0x5c>
 8019642:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019644:	07dc      	lsls	r4, r3, #31
 8019646:	d504      	bpl.n	8019652 <_vfiprintf_r+0x4e>
 8019648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801964c:	b01d      	add	sp, #116	@ 0x74
 801964e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019652:	89ab      	ldrh	r3, [r5, #12]
 8019654:	0598      	lsls	r0, r3, #22
 8019656:	d4f7      	bmi.n	8019648 <_vfiprintf_r+0x44>
 8019658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801965a:	f7ff fdbd 	bl	80191d8 <__retarget_lock_release_recursive>
 801965e:	e7f3      	b.n	8019648 <_vfiprintf_r+0x44>
 8019660:	2300      	movs	r3, #0
 8019662:	9309      	str	r3, [sp, #36]	@ 0x24
 8019664:	2320      	movs	r3, #32
 8019666:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801966a:	f8cd 800c 	str.w	r8, [sp, #12]
 801966e:	2330      	movs	r3, #48	@ 0x30
 8019670:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019820 <_vfiprintf_r+0x21c>
 8019674:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019678:	f04f 0901 	mov.w	r9, #1
 801967c:	4623      	mov	r3, r4
 801967e:	469a      	mov	sl, r3
 8019680:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019684:	b10a      	cbz	r2, 801968a <_vfiprintf_r+0x86>
 8019686:	2a25      	cmp	r2, #37	@ 0x25
 8019688:	d1f9      	bne.n	801967e <_vfiprintf_r+0x7a>
 801968a:	ebba 0b04 	subs.w	fp, sl, r4
 801968e:	d00b      	beq.n	80196a8 <_vfiprintf_r+0xa4>
 8019690:	465b      	mov	r3, fp
 8019692:	4622      	mov	r2, r4
 8019694:	4629      	mov	r1, r5
 8019696:	4630      	mov	r0, r6
 8019698:	f7ff ffa1 	bl	80195de <__sfputs_r>
 801969c:	3001      	adds	r0, #1
 801969e:	f000 80a7 	beq.w	80197f0 <_vfiprintf_r+0x1ec>
 80196a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80196a4:	445a      	add	r2, fp
 80196a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80196a8:	f89a 3000 	ldrb.w	r3, [sl]
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	f000 809f 	beq.w	80197f0 <_vfiprintf_r+0x1ec>
 80196b2:	2300      	movs	r3, #0
 80196b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80196b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80196bc:	f10a 0a01 	add.w	sl, sl, #1
 80196c0:	9304      	str	r3, [sp, #16]
 80196c2:	9307      	str	r3, [sp, #28]
 80196c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80196c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80196ca:	4654      	mov	r4, sl
 80196cc:	2205      	movs	r2, #5
 80196ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196d2:	4853      	ldr	r0, [pc, #332]	@ (8019820 <_vfiprintf_r+0x21c>)
 80196d4:	f7e6 fdbc 	bl	8000250 <memchr>
 80196d8:	9a04      	ldr	r2, [sp, #16]
 80196da:	b9d8      	cbnz	r0, 8019714 <_vfiprintf_r+0x110>
 80196dc:	06d1      	lsls	r1, r2, #27
 80196de:	bf44      	itt	mi
 80196e0:	2320      	movmi	r3, #32
 80196e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80196e6:	0713      	lsls	r3, r2, #28
 80196e8:	bf44      	itt	mi
 80196ea:	232b      	movmi	r3, #43	@ 0x2b
 80196ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80196f0:	f89a 3000 	ldrb.w	r3, [sl]
 80196f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80196f6:	d015      	beq.n	8019724 <_vfiprintf_r+0x120>
 80196f8:	9a07      	ldr	r2, [sp, #28]
 80196fa:	4654      	mov	r4, sl
 80196fc:	2000      	movs	r0, #0
 80196fe:	f04f 0c0a 	mov.w	ip, #10
 8019702:	4621      	mov	r1, r4
 8019704:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019708:	3b30      	subs	r3, #48	@ 0x30
 801970a:	2b09      	cmp	r3, #9
 801970c:	d94b      	bls.n	80197a6 <_vfiprintf_r+0x1a2>
 801970e:	b1b0      	cbz	r0, 801973e <_vfiprintf_r+0x13a>
 8019710:	9207      	str	r2, [sp, #28]
 8019712:	e014      	b.n	801973e <_vfiprintf_r+0x13a>
 8019714:	eba0 0308 	sub.w	r3, r0, r8
 8019718:	fa09 f303 	lsl.w	r3, r9, r3
 801971c:	4313      	orrs	r3, r2
 801971e:	9304      	str	r3, [sp, #16]
 8019720:	46a2      	mov	sl, r4
 8019722:	e7d2      	b.n	80196ca <_vfiprintf_r+0xc6>
 8019724:	9b03      	ldr	r3, [sp, #12]
 8019726:	1d19      	adds	r1, r3, #4
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	9103      	str	r1, [sp, #12]
 801972c:	2b00      	cmp	r3, #0
 801972e:	bfbb      	ittet	lt
 8019730:	425b      	neglt	r3, r3
 8019732:	f042 0202 	orrlt.w	r2, r2, #2
 8019736:	9307      	strge	r3, [sp, #28]
 8019738:	9307      	strlt	r3, [sp, #28]
 801973a:	bfb8      	it	lt
 801973c:	9204      	strlt	r2, [sp, #16]
 801973e:	7823      	ldrb	r3, [r4, #0]
 8019740:	2b2e      	cmp	r3, #46	@ 0x2e
 8019742:	d10a      	bne.n	801975a <_vfiprintf_r+0x156>
 8019744:	7863      	ldrb	r3, [r4, #1]
 8019746:	2b2a      	cmp	r3, #42	@ 0x2a
 8019748:	d132      	bne.n	80197b0 <_vfiprintf_r+0x1ac>
 801974a:	9b03      	ldr	r3, [sp, #12]
 801974c:	1d1a      	adds	r2, r3, #4
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	9203      	str	r2, [sp, #12]
 8019752:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019756:	3402      	adds	r4, #2
 8019758:	9305      	str	r3, [sp, #20]
 801975a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019830 <_vfiprintf_r+0x22c>
 801975e:	7821      	ldrb	r1, [r4, #0]
 8019760:	2203      	movs	r2, #3
 8019762:	4650      	mov	r0, sl
 8019764:	f7e6 fd74 	bl	8000250 <memchr>
 8019768:	b138      	cbz	r0, 801977a <_vfiprintf_r+0x176>
 801976a:	9b04      	ldr	r3, [sp, #16]
 801976c:	eba0 000a 	sub.w	r0, r0, sl
 8019770:	2240      	movs	r2, #64	@ 0x40
 8019772:	4082      	lsls	r2, r0
 8019774:	4313      	orrs	r3, r2
 8019776:	3401      	adds	r4, #1
 8019778:	9304      	str	r3, [sp, #16]
 801977a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801977e:	4829      	ldr	r0, [pc, #164]	@ (8019824 <_vfiprintf_r+0x220>)
 8019780:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019784:	2206      	movs	r2, #6
 8019786:	f7e6 fd63 	bl	8000250 <memchr>
 801978a:	2800      	cmp	r0, #0
 801978c:	d03f      	beq.n	801980e <_vfiprintf_r+0x20a>
 801978e:	4b26      	ldr	r3, [pc, #152]	@ (8019828 <_vfiprintf_r+0x224>)
 8019790:	bb1b      	cbnz	r3, 80197da <_vfiprintf_r+0x1d6>
 8019792:	9b03      	ldr	r3, [sp, #12]
 8019794:	3307      	adds	r3, #7
 8019796:	f023 0307 	bic.w	r3, r3, #7
 801979a:	3308      	adds	r3, #8
 801979c:	9303      	str	r3, [sp, #12]
 801979e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80197a0:	443b      	add	r3, r7
 80197a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80197a4:	e76a      	b.n	801967c <_vfiprintf_r+0x78>
 80197a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80197aa:	460c      	mov	r4, r1
 80197ac:	2001      	movs	r0, #1
 80197ae:	e7a8      	b.n	8019702 <_vfiprintf_r+0xfe>
 80197b0:	2300      	movs	r3, #0
 80197b2:	3401      	adds	r4, #1
 80197b4:	9305      	str	r3, [sp, #20]
 80197b6:	4619      	mov	r1, r3
 80197b8:	f04f 0c0a 	mov.w	ip, #10
 80197bc:	4620      	mov	r0, r4
 80197be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80197c2:	3a30      	subs	r2, #48	@ 0x30
 80197c4:	2a09      	cmp	r2, #9
 80197c6:	d903      	bls.n	80197d0 <_vfiprintf_r+0x1cc>
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d0c6      	beq.n	801975a <_vfiprintf_r+0x156>
 80197cc:	9105      	str	r1, [sp, #20]
 80197ce:	e7c4      	b.n	801975a <_vfiprintf_r+0x156>
 80197d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80197d4:	4604      	mov	r4, r0
 80197d6:	2301      	movs	r3, #1
 80197d8:	e7f0      	b.n	80197bc <_vfiprintf_r+0x1b8>
 80197da:	ab03      	add	r3, sp, #12
 80197dc:	9300      	str	r3, [sp, #0]
 80197de:	462a      	mov	r2, r5
 80197e0:	4b12      	ldr	r3, [pc, #72]	@ (801982c <_vfiprintf_r+0x228>)
 80197e2:	a904      	add	r1, sp, #16
 80197e4:	4630      	mov	r0, r6
 80197e6:	f3af 8000 	nop.w
 80197ea:	4607      	mov	r7, r0
 80197ec:	1c78      	adds	r0, r7, #1
 80197ee:	d1d6      	bne.n	801979e <_vfiprintf_r+0x19a>
 80197f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80197f2:	07d9      	lsls	r1, r3, #31
 80197f4:	d405      	bmi.n	8019802 <_vfiprintf_r+0x1fe>
 80197f6:	89ab      	ldrh	r3, [r5, #12]
 80197f8:	059a      	lsls	r2, r3, #22
 80197fa:	d402      	bmi.n	8019802 <_vfiprintf_r+0x1fe>
 80197fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80197fe:	f7ff fceb 	bl	80191d8 <__retarget_lock_release_recursive>
 8019802:	89ab      	ldrh	r3, [r5, #12]
 8019804:	065b      	lsls	r3, r3, #25
 8019806:	f53f af1f 	bmi.w	8019648 <_vfiprintf_r+0x44>
 801980a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801980c:	e71e      	b.n	801964c <_vfiprintf_r+0x48>
 801980e:	ab03      	add	r3, sp, #12
 8019810:	9300      	str	r3, [sp, #0]
 8019812:	462a      	mov	r2, r5
 8019814:	4b05      	ldr	r3, [pc, #20]	@ (801982c <_vfiprintf_r+0x228>)
 8019816:	a904      	add	r1, sp, #16
 8019818:	4630      	mov	r0, r6
 801981a:	f000 f879 	bl	8019910 <_printf_i>
 801981e:	e7e4      	b.n	80197ea <_vfiprintf_r+0x1e6>
 8019820:	0801ba2e 	.word	0x0801ba2e
 8019824:	0801ba38 	.word	0x0801ba38
 8019828:	00000000 	.word	0x00000000
 801982c:	080195df 	.word	0x080195df
 8019830:	0801ba34 	.word	0x0801ba34

08019834 <_printf_common>:
 8019834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019838:	4616      	mov	r6, r2
 801983a:	4698      	mov	r8, r3
 801983c:	688a      	ldr	r2, [r1, #8]
 801983e:	690b      	ldr	r3, [r1, #16]
 8019840:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019844:	4293      	cmp	r3, r2
 8019846:	bfb8      	it	lt
 8019848:	4613      	movlt	r3, r2
 801984a:	6033      	str	r3, [r6, #0]
 801984c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019850:	4607      	mov	r7, r0
 8019852:	460c      	mov	r4, r1
 8019854:	b10a      	cbz	r2, 801985a <_printf_common+0x26>
 8019856:	3301      	adds	r3, #1
 8019858:	6033      	str	r3, [r6, #0]
 801985a:	6823      	ldr	r3, [r4, #0]
 801985c:	0699      	lsls	r1, r3, #26
 801985e:	bf42      	ittt	mi
 8019860:	6833      	ldrmi	r3, [r6, #0]
 8019862:	3302      	addmi	r3, #2
 8019864:	6033      	strmi	r3, [r6, #0]
 8019866:	6825      	ldr	r5, [r4, #0]
 8019868:	f015 0506 	ands.w	r5, r5, #6
 801986c:	d106      	bne.n	801987c <_printf_common+0x48>
 801986e:	f104 0a19 	add.w	sl, r4, #25
 8019872:	68e3      	ldr	r3, [r4, #12]
 8019874:	6832      	ldr	r2, [r6, #0]
 8019876:	1a9b      	subs	r3, r3, r2
 8019878:	42ab      	cmp	r3, r5
 801987a:	dc26      	bgt.n	80198ca <_printf_common+0x96>
 801987c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019880:	6822      	ldr	r2, [r4, #0]
 8019882:	3b00      	subs	r3, #0
 8019884:	bf18      	it	ne
 8019886:	2301      	movne	r3, #1
 8019888:	0692      	lsls	r2, r2, #26
 801988a:	d42b      	bmi.n	80198e4 <_printf_common+0xb0>
 801988c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019890:	4641      	mov	r1, r8
 8019892:	4638      	mov	r0, r7
 8019894:	47c8      	blx	r9
 8019896:	3001      	adds	r0, #1
 8019898:	d01e      	beq.n	80198d8 <_printf_common+0xa4>
 801989a:	6823      	ldr	r3, [r4, #0]
 801989c:	6922      	ldr	r2, [r4, #16]
 801989e:	f003 0306 	and.w	r3, r3, #6
 80198a2:	2b04      	cmp	r3, #4
 80198a4:	bf02      	ittt	eq
 80198a6:	68e5      	ldreq	r5, [r4, #12]
 80198a8:	6833      	ldreq	r3, [r6, #0]
 80198aa:	1aed      	subeq	r5, r5, r3
 80198ac:	68a3      	ldr	r3, [r4, #8]
 80198ae:	bf0c      	ite	eq
 80198b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80198b4:	2500      	movne	r5, #0
 80198b6:	4293      	cmp	r3, r2
 80198b8:	bfc4      	itt	gt
 80198ba:	1a9b      	subgt	r3, r3, r2
 80198bc:	18ed      	addgt	r5, r5, r3
 80198be:	2600      	movs	r6, #0
 80198c0:	341a      	adds	r4, #26
 80198c2:	42b5      	cmp	r5, r6
 80198c4:	d11a      	bne.n	80198fc <_printf_common+0xc8>
 80198c6:	2000      	movs	r0, #0
 80198c8:	e008      	b.n	80198dc <_printf_common+0xa8>
 80198ca:	2301      	movs	r3, #1
 80198cc:	4652      	mov	r2, sl
 80198ce:	4641      	mov	r1, r8
 80198d0:	4638      	mov	r0, r7
 80198d2:	47c8      	blx	r9
 80198d4:	3001      	adds	r0, #1
 80198d6:	d103      	bne.n	80198e0 <_printf_common+0xac>
 80198d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80198dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198e0:	3501      	adds	r5, #1
 80198e2:	e7c6      	b.n	8019872 <_printf_common+0x3e>
 80198e4:	18e1      	adds	r1, r4, r3
 80198e6:	1c5a      	adds	r2, r3, #1
 80198e8:	2030      	movs	r0, #48	@ 0x30
 80198ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80198ee:	4422      	add	r2, r4
 80198f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80198f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80198f8:	3302      	adds	r3, #2
 80198fa:	e7c7      	b.n	801988c <_printf_common+0x58>
 80198fc:	2301      	movs	r3, #1
 80198fe:	4622      	mov	r2, r4
 8019900:	4641      	mov	r1, r8
 8019902:	4638      	mov	r0, r7
 8019904:	47c8      	blx	r9
 8019906:	3001      	adds	r0, #1
 8019908:	d0e6      	beq.n	80198d8 <_printf_common+0xa4>
 801990a:	3601      	adds	r6, #1
 801990c:	e7d9      	b.n	80198c2 <_printf_common+0x8e>
	...

08019910 <_printf_i>:
 8019910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019914:	7e0f      	ldrb	r7, [r1, #24]
 8019916:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019918:	2f78      	cmp	r7, #120	@ 0x78
 801991a:	4691      	mov	r9, r2
 801991c:	4680      	mov	r8, r0
 801991e:	460c      	mov	r4, r1
 8019920:	469a      	mov	sl, r3
 8019922:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019926:	d807      	bhi.n	8019938 <_printf_i+0x28>
 8019928:	2f62      	cmp	r7, #98	@ 0x62
 801992a:	d80a      	bhi.n	8019942 <_printf_i+0x32>
 801992c:	2f00      	cmp	r7, #0
 801992e:	f000 80d2 	beq.w	8019ad6 <_printf_i+0x1c6>
 8019932:	2f58      	cmp	r7, #88	@ 0x58
 8019934:	f000 80b9 	beq.w	8019aaa <_printf_i+0x19a>
 8019938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801993c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019940:	e03a      	b.n	80199b8 <_printf_i+0xa8>
 8019942:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019946:	2b15      	cmp	r3, #21
 8019948:	d8f6      	bhi.n	8019938 <_printf_i+0x28>
 801994a:	a101      	add	r1, pc, #4	@ (adr r1, 8019950 <_printf_i+0x40>)
 801994c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019950:	080199a9 	.word	0x080199a9
 8019954:	080199bd 	.word	0x080199bd
 8019958:	08019939 	.word	0x08019939
 801995c:	08019939 	.word	0x08019939
 8019960:	08019939 	.word	0x08019939
 8019964:	08019939 	.word	0x08019939
 8019968:	080199bd 	.word	0x080199bd
 801996c:	08019939 	.word	0x08019939
 8019970:	08019939 	.word	0x08019939
 8019974:	08019939 	.word	0x08019939
 8019978:	08019939 	.word	0x08019939
 801997c:	08019abd 	.word	0x08019abd
 8019980:	080199e7 	.word	0x080199e7
 8019984:	08019a77 	.word	0x08019a77
 8019988:	08019939 	.word	0x08019939
 801998c:	08019939 	.word	0x08019939
 8019990:	08019adf 	.word	0x08019adf
 8019994:	08019939 	.word	0x08019939
 8019998:	080199e7 	.word	0x080199e7
 801999c:	08019939 	.word	0x08019939
 80199a0:	08019939 	.word	0x08019939
 80199a4:	08019a7f 	.word	0x08019a7f
 80199a8:	6833      	ldr	r3, [r6, #0]
 80199aa:	1d1a      	adds	r2, r3, #4
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	6032      	str	r2, [r6, #0]
 80199b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80199b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80199b8:	2301      	movs	r3, #1
 80199ba:	e09d      	b.n	8019af8 <_printf_i+0x1e8>
 80199bc:	6833      	ldr	r3, [r6, #0]
 80199be:	6820      	ldr	r0, [r4, #0]
 80199c0:	1d19      	adds	r1, r3, #4
 80199c2:	6031      	str	r1, [r6, #0]
 80199c4:	0606      	lsls	r6, r0, #24
 80199c6:	d501      	bpl.n	80199cc <_printf_i+0xbc>
 80199c8:	681d      	ldr	r5, [r3, #0]
 80199ca:	e003      	b.n	80199d4 <_printf_i+0xc4>
 80199cc:	0645      	lsls	r5, r0, #25
 80199ce:	d5fb      	bpl.n	80199c8 <_printf_i+0xb8>
 80199d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80199d4:	2d00      	cmp	r5, #0
 80199d6:	da03      	bge.n	80199e0 <_printf_i+0xd0>
 80199d8:	232d      	movs	r3, #45	@ 0x2d
 80199da:	426d      	negs	r5, r5
 80199dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80199e0:	4859      	ldr	r0, [pc, #356]	@ (8019b48 <_printf_i+0x238>)
 80199e2:	230a      	movs	r3, #10
 80199e4:	e011      	b.n	8019a0a <_printf_i+0xfa>
 80199e6:	6821      	ldr	r1, [r4, #0]
 80199e8:	6833      	ldr	r3, [r6, #0]
 80199ea:	0608      	lsls	r0, r1, #24
 80199ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80199f0:	d402      	bmi.n	80199f8 <_printf_i+0xe8>
 80199f2:	0649      	lsls	r1, r1, #25
 80199f4:	bf48      	it	mi
 80199f6:	b2ad      	uxthmi	r5, r5
 80199f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80199fa:	4853      	ldr	r0, [pc, #332]	@ (8019b48 <_printf_i+0x238>)
 80199fc:	6033      	str	r3, [r6, #0]
 80199fe:	bf14      	ite	ne
 8019a00:	230a      	movne	r3, #10
 8019a02:	2308      	moveq	r3, #8
 8019a04:	2100      	movs	r1, #0
 8019a06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019a0a:	6866      	ldr	r6, [r4, #4]
 8019a0c:	60a6      	str	r6, [r4, #8]
 8019a0e:	2e00      	cmp	r6, #0
 8019a10:	bfa2      	ittt	ge
 8019a12:	6821      	ldrge	r1, [r4, #0]
 8019a14:	f021 0104 	bicge.w	r1, r1, #4
 8019a18:	6021      	strge	r1, [r4, #0]
 8019a1a:	b90d      	cbnz	r5, 8019a20 <_printf_i+0x110>
 8019a1c:	2e00      	cmp	r6, #0
 8019a1e:	d04b      	beq.n	8019ab8 <_printf_i+0x1a8>
 8019a20:	4616      	mov	r6, r2
 8019a22:	fbb5 f1f3 	udiv	r1, r5, r3
 8019a26:	fb03 5711 	mls	r7, r3, r1, r5
 8019a2a:	5dc7      	ldrb	r7, [r0, r7]
 8019a2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019a30:	462f      	mov	r7, r5
 8019a32:	42bb      	cmp	r3, r7
 8019a34:	460d      	mov	r5, r1
 8019a36:	d9f4      	bls.n	8019a22 <_printf_i+0x112>
 8019a38:	2b08      	cmp	r3, #8
 8019a3a:	d10b      	bne.n	8019a54 <_printf_i+0x144>
 8019a3c:	6823      	ldr	r3, [r4, #0]
 8019a3e:	07df      	lsls	r7, r3, #31
 8019a40:	d508      	bpl.n	8019a54 <_printf_i+0x144>
 8019a42:	6923      	ldr	r3, [r4, #16]
 8019a44:	6861      	ldr	r1, [r4, #4]
 8019a46:	4299      	cmp	r1, r3
 8019a48:	bfde      	ittt	le
 8019a4a:	2330      	movle	r3, #48	@ 0x30
 8019a4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019a50:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8019a54:	1b92      	subs	r2, r2, r6
 8019a56:	6122      	str	r2, [r4, #16]
 8019a58:	f8cd a000 	str.w	sl, [sp]
 8019a5c:	464b      	mov	r3, r9
 8019a5e:	aa03      	add	r2, sp, #12
 8019a60:	4621      	mov	r1, r4
 8019a62:	4640      	mov	r0, r8
 8019a64:	f7ff fee6 	bl	8019834 <_printf_common>
 8019a68:	3001      	adds	r0, #1
 8019a6a:	d14a      	bne.n	8019b02 <_printf_i+0x1f2>
 8019a6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019a70:	b004      	add	sp, #16
 8019a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a76:	6823      	ldr	r3, [r4, #0]
 8019a78:	f043 0320 	orr.w	r3, r3, #32
 8019a7c:	6023      	str	r3, [r4, #0]
 8019a7e:	4833      	ldr	r0, [pc, #204]	@ (8019b4c <_printf_i+0x23c>)
 8019a80:	2778      	movs	r7, #120	@ 0x78
 8019a82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019a86:	6823      	ldr	r3, [r4, #0]
 8019a88:	6831      	ldr	r1, [r6, #0]
 8019a8a:	061f      	lsls	r7, r3, #24
 8019a8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8019a90:	d402      	bmi.n	8019a98 <_printf_i+0x188>
 8019a92:	065f      	lsls	r7, r3, #25
 8019a94:	bf48      	it	mi
 8019a96:	b2ad      	uxthmi	r5, r5
 8019a98:	6031      	str	r1, [r6, #0]
 8019a9a:	07d9      	lsls	r1, r3, #31
 8019a9c:	bf44      	itt	mi
 8019a9e:	f043 0320 	orrmi.w	r3, r3, #32
 8019aa2:	6023      	strmi	r3, [r4, #0]
 8019aa4:	b11d      	cbz	r5, 8019aae <_printf_i+0x19e>
 8019aa6:	2310      	movs	r3, #16
 8019aa8:	e7ac      	b.n	8019a04 <_printf_i+0xf4>
 8019aaa:	4827      	ldr	r0, [pc, #156]	@ (8019b48 <_printf_i+0x238>)
 8019aac:	e7e9      	b.n	8019a82 <_printf_i+0x172>
 8019aae:	6823      	ldr	r3, [r4, #0]
 8019ab0:	f023 0320 	bic.w	r3, r3, #32
 8019ab4:	6023      	str	r3, [r4, #0]
 8019ab6:	e7f6      	b.n	8019aa6 <_printf_i+0x196>
 8019ab8:	4616      	mov	r6, r2
 8019aba:	e7bd      	b.n	8019a38 <_printf_i+0x128>
 8019abc:	6833      	ldr	r3, [r6, #0]
 8019abe:	6825      	ldr	r5, [r4, #0]
 8019ac0:	6961      	ldr	r1, [r4, #20]
 8019ac2:	1d18      	adds	r0, r3, #4
 8019ac4:	6030      	str	r0, [r6, #0]
 8019ac6:	062e      	lsls	r6, r5, #24
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	d501      	bpl.n	8019ad0 <_printf_i+0x1c0>
 8019acc:	6019      	str	r1, [r3, #0]
 8019ace:	e002      	b.n	8019ad6 <_printf_i+0x1c6>
 8019ad0:	0668      	lsls	r0, r5, #25
 8019ad2:	d5fb      	bpl.n	8019acc <_printf_i+0x1bc>
 8019ad4:	8019      	strh	r1, [r3, #0]
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	6123      	str	r3, [r4, #16]
 8019ada:	4616      	mov	r6, r2
 8019adc:	e7bc      	b.n	8019a58 <_printf_i+0x148>
 8019ade:	6833      	ldr	r3, [r6, #0]
 8019ae0:	1d1a      	adds	r2, r3, #4
 8019ae2:	6032      	str	r2, [r6, #0]
 8019ae4:	681e      	ldr	r6, [r3, #0]
 8019ae6:	6862      	ldr	r2, [r4, #4]
 8019ae8:	2100      	movs	r1, #0
 8019aea:	4630      	mov	r0, r6
 8019aec:	f7e6 fbb0 	bl	8000250 <memchr>
 8019af0:	b108      	cbz	r0, 8019af6 <_printf_i+0x1e6>
 8019af2:	1b80      	subs	r0, r0, r6
 8019af4:	6060      	str	r0, [r4, #4]
 8019af6:	6863      	ldr	r3, [r4, #4]
 8019af8:	6123      	str	r3, [r4, #16]
 8019afa:	2300      	movs	r3, #0
 8019afc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019b00:	e7aa      	b.n	8019a58 <_printf_i+0x148>
 8019b02:	6923      	ldr	r3, [r4, #16]
 8019b04:	4632      	mov	r2, r6
 8019b06:	4649      	mov	r1, r9
 8019b08:	4640      	mov	r0, r8
 8019b0a:	47d0      	blx	sl
 8019b0c:	3001      	adds	r0, #1
 8019b0e:	d0ad      	beq.n	8019a6c <_printf_i+0x15c>
 8019b10:	6823      	ldr	r3, [r4, #0]
 8019b12:	079b      	lsls	r3, r3, #30
 8019b14:	d413      	bmi.n	8019b3e <_printf_i+0x22e>
 8019b16:	68e0      	ldr	r0, [r4, #12]
 8019b18:	9b03      	ldr	r3, [sp, #12]
 8019b1a:	4298      	cmp	r0, r3
 8019b1c:	bfb8      	it	lt
 8019b1e:	4618      	movlt	r0, r3
 8019b20:	e7a6      	b.n	8019a70 <_printf_i+0x160>
 8019b22:	2301      	movs	r3, #1
 8019b24:	4632      	mov	r2, r6
 8019b26:	4649      	mov	r1, r9
 8019b28:	4640      	mov	r0, r8
 8019b2a:	47d0      	blx	sl
 8019b2c:	3001      	adds	r0, #1
 8019b2e:	d09d      	beq.n	8019a6c <_printf_i+0x15c>
 8019b30:	3501      	adds	r5, #1
 8019b32:	68e3      	ldr	r3, [r4, #12]
 8019b34:	9903      	ldr	r1, [sp, #12]
 8019b36:	1a5b      	subs	r3, r3, r1
 8019b38:	42ab      	cmp	r3, r5
 8019b3a:	dcf2      	bgt.n	8019b22 <_printf_i+0x212>
 8019b3c:	e7eb      	b.n	8019b16 <_printf_i+0x206>
 8019b3e:	2500      	movs	r5, #0
 8019b40:	f104 0619 	add.w	r6, r4, #25
 8019b44:	e7f5      	b.n	8019b32 <_printf_i+0x222>
 8019b46:	bf00      	nop
 8019b48:	0801ba3f 	.word	0x0801ba3f
 8019b4c:	0801ba50 	.word	0x0801ba50

08019b50 <__sflush_r>:
 8019b50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b58:	0716      	lsls	r6, r2, #28
 8019b5a:	4605      	mov	r5, r0
 8019b5c:	460c      	mov	r4, r1
 8019b5e:	d454      	bmi.n	8019c0a <__sflush_r+0xba>
 8019b60:	684b      	ldr	r3, [r1, #4]
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	dc02      	bgt.n	8019b6c <__sflush_r+0x1c>
 8019b66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	dd48      	ble.n	8019bfe <__sflush_r+0xae>
 8019b6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019b6e:	2e00      	cmp	r6, #0
 8019b70:	d045      	beq.n	8019bfe <__sflush_r+0xae>
 8019b72:	2300      	movs	r3, #0
 8019b74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019b78:	682f      	ldr	r7, [r5, #0]
 8019b7a:	6a21      	ldr	r1, [r4, #32]
 8019b7c:	602b      	str	r3, [r5, #0]
 8019b7e:	d030      	beq.n	8019be2 <__sflush_r+0x92>
 8019b80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019b82:	89a3      	ldrh	r3, [r4, #12]
 8019b84:	0759      	lsls	r1, r3, #29
 8019b86:	d505      	bpl.n	8019b94 <__sflush_r+0x44>
 8019b88:	6863      	ldr	r3, [r4, #4]
 8019b8a:	1ad2      	subs	r2, r2, r3
 8019b8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019b8e:	b10b      	cbz	r3, 8019b94 <__sflush_r+0x44>
 8019b90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019b92:	1ad2      	subs	r2, r2, r3
 8019b94:	2300      	movs	r3, #0
 8019b96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019b98:	6a21      	ldr	r1, [r4, #32]
 8019b9a:	4628      	mov	r0, r5
 8019b9c:	47b0      	blx	r6
 8019b9e:	1c43      	adds	r3, r0, #1
 8019ba0:	89a3      	ldrh	r3, [r4, #12]
 8019ba2:	d106      	bne.n	8019bb2 <__sflush_r+0x62>
 8019ba4:	6829      	ldr	r1, [r5, #0]
 8019ba6:	291d      	cmp	r1, #29
 8019ba8:	d82b      	bhi.n	8019c02 <__sflush_r+0xb2>
 8019baa:	4a2a      	ldr	r2, [pc, #168]	@ (8019c54 <__sflush_r+0x104>)
 8019bac:	410a      	asrs	r2, r1
 8019bae:	07d6      	lsls	r6, r2, #31
 8019bb0:	d427      	bmi.n	8019c02 <__sflush_r+0xb2>
 8019bb2:	2200      	movs	r2, #0
 8019bb4:	6062      	str	r2, [r4, #4]
 8019bb6:	04d9      	lsls	r1, r3, #19
 8019bb8:	6922      	ldr	r2, [r4, #16]
 8019bba:	6022      	str	r2, [r4, #0]
 8019bbc:	d504      	bpl.n	8019bc8 <__sflush_r+0x78>
 8019bbe:	1c42      	adds	r2, r0, #1
 8019bc0:	d101      	bne.n	8019bc6 <__sflush_r+0x76>
 8019bc2:	682b      	ldr	r3, [r5, #0]
 8019bc4:	b903      	cbnz	r3, 8019bc8 <__sflush_r+0x78>
 8019bc6:	6560      	str	r0, [r4, #84]	@ 0x54
 8019bc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019bca:	602f      	str	r7, [r5, #0]
 8019bcc:	b1b9      	cbz	r1, 8019bfe <__sflush_r+0xae>
 8019bce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019bd2:	4299      	cmp	r1, r3
 8019bd4:	d002      	beq.n	8019bdc <__sflush_r+0x8c>
 8019bd6:	4628      	mov	r0, r5
 8019bd8:	f7ff fb40 	bl	801925c <_free_r>
 8019bdc:	2300      	movs	r3, #0
 8019bde:	6363      	str	r3, [r4, #52]	@ 0x34
 8019be0:	e00d      	b.n	8019bfe <__sflush_r+0xae>
 8019be2:	2301      	movs	r3, #1
 8019be4:	4628      	mov	r0, r5
 8019be6:	47b0      	blx	r6
 8019be8:	4602      	mov	r2, r0
 8019bea:	1c50      	adds	r0, r2, #1
 8019bec:	d1c9      	bne.n	8019b82 <__sflush_r+0x32>
 8019bee:	682b      	ldr	r3, [r5, #0]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d0c6      	beq.n	8019b82 <__sflush_r+0x32>
 8019bf4:	2b1d      	cmp	r3, #29
 8019bf6:	d001      	beq.n	8019bfc <__sflush_r+0xac>
 8019bf8:	2b16      	cmp	r3, #22
 8019bfa:	d11e      	bne.n	8019c3a <__sflush_r+0xea>
 8019bfc:	602f      	str	r7, [r5, #0]
 8019bfe:	2000      	movs	r0, #0
 8019c00:	e022      	b.n	8019c48 <__sflush_r+0xf8>
 8019c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019c06:	b21b      	sxth	r3, r3
 8019c08:	e01b      	b.n	8019c42 <__sflush_r+0xf2>
 8019c0a:	690f      	ldr	r7, [r1, #16]
 8019c0c:	2f00      	cmp	r7, #0
 8019c0e:	d0f6      	beq.n	8019bfe <__sflush_r+0xae>
 8019c10:	0793      	lsls	r3, r2, #30
 8019c12:	680e      	ldr	r6, [r1, #0]
 8019c14:	bf08      	it	eq
 8019c16:	694b      	ldreq	r3, [r1, #20]
 8019c18:	600f      	str	r7, [r1, #0]
 8019c1a:	bf18      	it	ne
 8019c1c:	2300      	movne	r3, #0
 8019c1e:	eba6 0807 	sub.w	r8, r6, r7
 8019c22:	608b      	str	r3, [r1, #8]
 8019c24:	f1b8 0f00 	cmp.w	r8, #0
 8019c28:	dde9      	ble.n	8019bfe <__sflush_r+0xae>
 8019c2a:	6a21      	ldr	r1, [r4, #32]
 8019c2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019c2e:	4643      	mov	r3, r8
 8019c30:	463a      	mov	r2, r7
 8019c32:	4628      	mov	r0, r5
 8019c34:	47b0      	blx	r6
 8019c36:	2800      	cmp	r0, #0
 8019c38:	dc08      	bgt.n	8019c4c <__sflush_r+0xfc>
 8019c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019c42:	81a3      	strh	r3, [r4, #12]
 8019c44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c4c:	4407      	add	r7, r0
 8019c4e:	eba8 0800 	sub.w	r8, r8, r0
 8019c52:	e7e7      	b.n	8019c24 <__sflush_r+0xd4>
 8019c54:	dfbffffe 	.word	0xdfbffffe

08019c58 <_fflush_r>:
 8019c58:	b538      	push	{r3, r4, r5, lr}
 8019c5a:	690b      	ldr	r3, [r1, #16]
 8019c5c:	4605      	mov	r5, r0
 8019c5e:	460c      	mov	r4, r1
 8019c60:	b913      	cbnz	r3, 8019c68 <_fflush_r+0x10>
 8019c62:	2500      	movs	r5, #0
 8019c64:	4628      	mov	r0, r5
 8019c66:	bd38      	pop	{r3, r4, r5, pc}
 8019c68:	b118      	cbz	r0, 8019c72 <_fflush_r+0x1a>
 8019c6a:	6a03      	ldr	r3, [r0, #32]
 8019c6c:	b90b      	cbnz	r3, 8019c72 <_fflush_r+0x1a>
 8019c6e:	f7fe ffe3 	bl	8018c38 <__sinit>
 8019c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d0f3      	beq.n	8019c62 <_fflush_r+0xa>
 8019c7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019c7c:	07d0      	lsls	r0, r2, #31
 8019c7e:	d404      	bmi.n	8019c8a <_fflush_r+0x32>
 8019c80:	0599      	lsls	r1, r3, #22
 8019c82:	d402      	bmi.n	8019c8a <_fflush_r+0x32>
 8019c84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019c86:	f7ff faa6 	bl	80191d6 <__retarget_lock_acquire_recursive>
 8019c8a:	4628      	mov	r0, r5
 8019c8c:	4621      	mov	r1, r4
 8019c8e:	f7ff ff5f 	bl	8019b50 <__sflush_r>
 8019c92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019c94:	07da      	lsls	r2, r3, #31
 8019c96:	4605      	mov	r5, r0
 8019c98:	d4e4      	bmi.n	8019c64 <_fflush_r+0xc>
 8019c9a:	89a3      	ldrh	r3, [r4, #12]
 8019c9c:	059b      	lsls	r3, r3, #22
 8019c9e:	d4e1      	bmi.n	8019c64 <_fflush_r+0xc>
 8019ca0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019ca2:	f7ff fa99 	bl	80191d8 <__retarget_lock_release_recursive>
 8019ca6:	e7dd      	b.n	8019c64 <_fflush_r+0xc>

08019ca8 <fiprintf>:
 8019ca8:	b40e      	push	{r1, r2, r3}
 8019caa:	b503      	push	{r0, r1, lr}
 8019cac:	4601      	mov	r1, r0
 8019cae:	ab03      	add	r3, sp, #12
 8019cb0:	4805      	ldr	r0, [pc, #20]	@ (8019cc8 <fiprintf+0x20>)
 8019cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8019cb6:	6800      	ldr	r0, [r0, #0]
 8019cb8:	9301      	str	r3, [sp, #4]
 8019cba:	f7ff fca3 	bl	8019604 <_vfiprintf_r>
 8019cbe:	b002      	add	sp, #8
 8019cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8019cc4:	b003      	add	sp, #12
 8019cc6:	4770      	bx	lr
 8019cc8:	20000770 	.word	0x20000770

08019ccc <__swhatbuf_r>:
 8019ccc:	b570      	push	{r4, r5, r6, lr}
 8019cce:	460c      	mov	r4, r1
 8019cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019cd4:	2900      	cmp	r1, #0
 8019cd6:	b096      	sub	sp, #88	@ 0x58
 8019cd8:	4615      	mov	r5, r2
 8019cda:	461e      	mov	r6, r3
 8019cdc:	da0d      	bge.n	8019cfa <__swhatbuf_r+0x2e>
 8019cde:	89a3      	ldrh	r3, [r4, #12]
 8019ce0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019ce4:	f04f 0100 	mov.w	r1, #0
 8019ce8:	bf14      	ite	ne
 8019cea:	2340      	movne	r3, #64	@ 0x40
 8019cec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019cf0:	2000      	movs	r0, #0
 8019cf2:	6031      	str	r1, [r6, #0]
 8019cf4:	602b      	str	r3, [r5, #0]
 8019cf6:	b016      	add	sp, #88	@ 0x58
 8019cf8:	bd70      	pop	{r4, r5, r6, pc}
 8019cfa:	466a      	mov	r2, sp
 8019cfc:	f000 f848 	bl	8019d90 <_fstat_r>
 8019d00:	2800      	cmp	r0, #0
 8019d02:	dbec      	blt.n	8019cde <__swhatbuf_r+0x12>
 8019d04:	9901      	ldr	r1, [sp, #4]
 8019d06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019d0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019d0e:	4259      	negs	r1, r3
 8019d10:	4159      	adcs	r1, r3
 8019d12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019d16:	e7eb      	b.n	8019cf0 <__swhatbuf_r+0x24>

08019d18 <__smakebuf_r>:
 8019d18:	898b      	ldrh	r3, [r1, #12]
 8019d1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019d1c:	079d      	lsls	r5, r3, #30
 8019d1e:	4606      	mov	r6, r0
 8019d20:	460c      	mov	r4, r1
 8019d22:	d507      	bpl.n	8019d34 <__smakebuf_r+0x1c>
 8019d24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019d28:	6023      	str	r3, [r4, #0]
 8019d2a:	6123      	str	r3, [r4, #16]
 8019d2c:	2301      	movs	r3, #1
 8019d2e:	6163      	str	r3, [r4, #20]
 8019d30:	b003      	add	sp, #12
 8019d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d34:	ab01      	add	r3, sp, #4
 8019d36:	466a      	mov	r2, sp
 8019d38:	f7ff ffc8 	bl	8019ccc <__swhatbuf_r>
 8019d3c:	9f00      	ldr	r7, [sp, #0]
 8019d3e:	4605      	mov	r5, r0
 8019d40:	4639      	mov	r1, r7
 8019d42:	4630      	mov	r0, r6
 8019d44:	f7fe fd46 	bl	80187d4 <_malloc_r>
 8019d48:	b948      	cbnz	r0, 8019d5e <__smakebuf_r+0x46>
 8019d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d4e:	059a      	lsls	r2, r3, #22
 8019d50:	d4ee      	bmi.n	8019d30 <__smakebuf_r+0x18>
 8019d52:	f023 0303 	bic.w	r3, r3, #3
 8019d56:	f043 0302 	orr.w	r3, r3, #2
 8019d5a:	81a3      	strh	r3, [r4, #12]
 8019d5c:	e7e2      	b.n	8019d24 <__smakebuf_r+0xc>
 8019d5e:	89a3      	ldrh	r3, [r4, #12]
 8019d60:	6020      	str	r0, [r4, #0]
 8019d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019d66:	81a3      	strh	r3, [r4, #12]
 8019d68:	9b01      	ldr	r3, [sp, #4]
 8019d6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019d6e:	b15b      	cbz	r3, 8019d88 <__smakebuf_r+0x70>
 8019d70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019d74:	4630      	mov	r0, r6
 8019d76:	f000 f81d 	bl	8019db4 <_isatty_r>
 8019d7a:	b128      	cbz	r0, 8019d88 <__smakebuf_r+0x70>
 8019d7c:	89a3      	ldrh	r3, [r4, #12]
 8019d7e:	f023 0303 	bic.w	r3, r3, #3
 8019d82:	f043 0301 	orr.w	r3, r3, #1
 8019d86:	81a3      	strh	r3, [r4, #12]
 8019d88:	89a3      	ldrh	r3, [r4, #12]
 8019d8a:	431d      	orrs	r5, r3
 8019d8c:	81a5      	strh	r5, [r4, #12]
 8019d8e:	e7cf      	b.n	8019d30 <__smakebuf_r+0x18>

08019d90 <_fstat_r>:
 8019d90:	b538      	push	{r3, r4, r5, lr}
 8019d92:	4d07      	ldr	r5, [pc, #28]	@ (8019db0 <_fstat_r+0x20>)
 8019d94:	2300      	movs	r3, #0
 8019d96:	4604      	mov	r4, r0
 8019d98:	4608      	mov	r0, r1
 8019d9a:	4611      	mov	r1, r2
 8019d9c:	602b      	str	r3, [r5, #0]
 8019d9e:	f7e8 fa41 	bl	8002224 <_fstat>
 8019da2:	1c43      	adds	r3, r0, #1
 8019da4:	d102      	bne.n	8019dac <_fstat_r+0x1c>
 8019da6:	682b      	ldr	r3, [r5, #0]
 8019da8:	b103      	cbz	r3, 8019dac <_fstat_r+0x1c>
 8019daa:	6023      	str	r3, [r4, #0]
 8019dac:	bd38      	pop	{r3, r4, r5, pc}
 8019dae:	bf00      	nop
 8019db0:	2000b7e4 	.word	0x2000b7e4

08019db4 <_isatty_r>:
 8019db4:	b538      	push	{r3, r4, r5, lr}
 8019db6:	4d06      	ldr	r5, [pc, #24]	@ (8019dd0 <_isatty_r+0x1c>)
 8019db8:	2300      	movs	r3, #0
 8019dba:	4604      	mov	r4, r0
 8019dbc:	4608      	mov	r0, r1
 8019dbe:	602b      	str	r3, [r5, #0]
 8019dc0:	f7e8 fa40 	bl	8002244 <_isatty>
 8019dc4:	1c43      	adds	r3, r0, #1
 8019dc6:	d102      	bne.n	8019dce <_isatty_r+0x1a>
 8019dc8:	682b      	ldr	r3, [r5, #0]
 8019dca:	b103      	cbz	r3, 8019dce <_isatty_r+0x1a>
 8019dcc:	6023      	str	r3, [r4, #0]
 8019dce:	bd38      	pop	{r3, r4, r5, pc}
 8019dd0:	2000b7e4 	.word	0x2000b7e4

08019dd4 <abort>:
 8019dd4:	b508      	push	{r3, lr}
 8019dd6:	2006      	movs	r0, #6
 8019dd8:	f000 f82c 	bl	8019e34 <raise>
 8019ddc:	2001      	movs	r0, #1
 8019dde:	f7e8 f9d1 	bl	8002184 <_exit>

08019de2 <_raise_r>:
 8019de2:	291f      	cmp	r1, #31
 8019de4:	b538      	push	{r3, r4, r5, lr}
 8019de6:	4605      	mov	r5, r0
 8019de8:	460c      	mov	r4, r1
 8019dea:	d904      	bls.n	8019df6 <_raise_r+0x14>
 8019dec:	2316      	movs	r3, #22
 8019dee:	6003      	str	r3, [r0, #0]
 8019df0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019df4:	bd38      	pop	{r3, r4, r5, pc}
 8019df6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019df8:	b112      	cbz	r2, 8019e00 <_raise_r+0x1e>
 8019dfa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019dfe:	b94b      	cbnz	r3, 8019e14 <_raise_r+0x32>
 8019e00:	4628      	mov	r0, r5
 8019e02:	f000 f831 	bl	8019e68 <_getpid_r>
 8019e06:	4622      	mov	r2, r4
 8019e08:	4601      	mov	r1, r0
 8019e0a:	4628      	mov	r0, r5
 8019e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019e10:	f000 b818 	b.w	8019e44 <_kill_r>
 8019e14:	2b01      	cmp	r3, #1
 8019e16:	d00a      	beq.n	8019e2e <_raise_r+0x4c>
 8019e18:	1c59      	adds	r1, r3, #1
 8019e1a:	d103      	bne.n	8019e24 <_raise_r+0x42>
 8019e1c:	2316      	movs	r3, #22
 8019e1e:	6003      	str	r3, [r0, #0]
 8019e20:	2001      	movs	r0, #1
 8019e22:	e7e7      	b.n	8019df4 <_raise_r+0x12>
 8019e24:	2100      	movs	r1, #0
 8019e26:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019e2a:	4620      	mov	r0, r4
 8019e2c:	4798      	blx	r3
 8019e2e:	2000      	movs	r0, #0
 8019e30:	e7e0      	b.n	8019df4 <_raise_r+0x12>
	...

08019e34 <raise>:
 8019e34:	4b02      	ldr	r3, [pc, #8]	@ (8019e40 <raise+0xc>)
 8019e36:	4601      	mov	r1, r0
 8019e38:	6818      	ldr	r0, [r3, #0]
 8019e3a:	f7ff bfd2 	b.w	8019de2 <_raise_r>
 8019e3e:	bf00      	nop
 8019e40:	20000770 	.word	0x20000770

08019e44 <_kill_r>:
 8019e44:	b538      	push	{r3, r4, r5, lr}
 8019e46:	4d07      	ldr	r5, [pc, #28]	@ (8019e64 <_kill_r+0x20>)
 8019e48:	2300      	movs	r3, #0
 8019e4a:	4604      	mov	r4, r0
 8019e4c:	4608      	mov	r0, r1
 8019e4e:	4611      	mov	r1, r2
 8019e50:	602b      	str	r3, [r5, #0]
 8019e52:	f7e8 f987 	bl	8002164 <_kill>
 8019e56:	1c43      	adds	r3, r0, #1
 8019e58:	d102      	bne.n	8019e60 <_kill_r+0x1c>
 8019e5a:	682b      	ldr	r3, [r5, #0]
 8019e5c:	b103      	cbz	r3, 8019e60 <_kill_r+0x1c>
 8019e5e:	6023      	str	r3, [r4, #0]
 8019e60:	bd38      	pop	{r3, r4, r5, pc}
 8019e62:	bf00      	nop
 8019e64:	2000b7e4 	.word	0x2000b7e4

08019e68 <_getpid_r>:
 8019e68:	f7e8 b974 	b.w	8002154 <_getpid>

08019e6c <atan2>:
 8019e6c:	f000 baa8 	b.w	801a3c0 <__ieee754_atan2>

08019e70 <sqrt>:
 8019e70:	b538      	push	{r3, r4, r5, lr}
 8019e72:	ed2d 8b02 	vpush	{d8}
 8019e76:	ec55 4b10 	vmov	r4, r5, d0
 8019e7a:	f000 f9c5 	bl	801a208 <__ieee754_sqrt>
 8019e7e:	4622      	mov	r2, r4
 8019e80:	462b      	mov	r3, r5
 8019e82:	4620      	mov	r0, r4
 8019e84:	4629      	mov	r1, r5
 8019e86:	eeb0 8a40 	vmov.f32	s16, s0
 8019e8a:	eef0 8a60 	vmov.f32	s17, s1
 8019e8e:	f7e6 fe85 	bl	8000b9c <__aeabi_dcmpun>
 8019e92:	b990      	cbnz	r0, 8019eba <sqrt+0x4a>
 8019e94:	2200      	movs	r2, #0
 8019e96:	2300      	movs	r3, #0
 8019e98:	4620      	mov	r0, r4
 8019e9a:	4629      	mov	r1, r5
 8019e9c:	f7e6 fe56 	bl	8000b4c <__aeabi_dcmplt>
 8019ea0:	b158      	cbz	r0, 8019eba <sqrt+0x4a>
 8019ea2:	f7ff f96d 	bl	8019180 <__errno>
 8019ea6:	2321      	movs	r3, #33	@ 0x21
 8019ea8:	6003      	str	r3, [r0, #0]
 8019eaa:	2200      	movs	r2, #0
 8019eac:	2300      	movs	r3, #0
 8019eae:	4610      	mov	r0, r2
 8019eb0:	4619      	mov	r1, r3
 8019eb2:	f7e6 fd03 	bl	80008bc <__aeabi_ddiv>
 8019eb6:	ec41 0b18 	vmov	d8, r0, r1
 8019eba:	eeb0 0a48 	vmov.f32	s0, s16
 8019ebe:	eef0 0a68 	vmov.f32	s1, s17
 8019ec2:	ecbd 8b02 	vpop	{d8}
 8019ec6:	bd38      	pop	{r3, r4, r5, pc}

08019ec8 <atan>:
 8019ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ecc:	ec55 4b10 	vmov	r4, r5, d0
 8019ed0:	4bbf      	ldr	r3, [pc, #764]	@ (801a1d0 <atan+0x308>)
 8019ed2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8019ed6:	429e      	cmp	r6, r3
 8019ed8:	46ab      	mov	fp, r5
 8019eda:	d918      	bls.n	8019f0e <atan+0x46>
 8019edc:	4bbd      	ldr	r3, [pc, #756]	@ (801a1d4 <atan+0x30c>)
 8019ede:	429e      	cmp	r6, r3
 8019ee0:	d801      	bhi.n	8019ee6 <atan+0x1e>
 8019ee2:	d109      	bne.n	8019ef8 <atan+0x30>
 8019ee4:	b144      	cbz	r4, 8019ef8 <atan+0x30>
 8019ee6:	4622      	mov	r2, r4
 8019ee8:	462b      	mov	r3, r5
 8019eea:	4620      	mov	r0, r4
 8019eec:	4629      	mov	r1, r5
 8019eee:	f7e6 fa05 	bl	80002fc <__adddf3>
 8019ef2:	4604      	mov	r4, r0
 8019ef4:	460d      	mov	r5, r1
 8019ef6:	e006      	b.n	8019f06 <atan+0x3e>
 8019ef8:	f1bb 0f00 	cmp.w	fp, #0
 8019efc:	f340 812b 	ble.w	801a156 <atan+0x28e>
 8019f00:	a597      	add	r5, pc, #604	@ (adr r5, 801a160 <atan+0x298>)
 8019f02:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019f06:	ec45 4b10 	vmov	d0, r4, r5
 8019f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f0e:	4bb2      	ldr	r3, [pc, #712]	@ (801a1d8 <atan+0x310>)
 8019f10:	429e      	cmp	r6, r3
 8019f12:	d813      	bhi.n	8019f3c <atan+0x74>
 8019f14:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8019f18:	429e      	cmp	r6, r3
 8019f1a:	d80c      	bhi.n	8019f36 <atan+0x6e>
 8019f1c:	a392      	add	r3, pc, #584	@ (adr r3, 801a168 <atan+0x2a0>)
 8019f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f22:	4620      	mov	r0, r4
 8019f24:	4629      	mov	r1, r5
 8019f26:	f7e6 f9e9 	bl	80002fc <__adddf3>
 8019f2a:	4bac      	ldr	r3, [pc, #688]	@ (801a1dc <atan+0x314>)
 8019f2c:	2200      	movs	r2, #0
 8019f2e:	f7e6 fe2b 	bl	8000b88 <__aeabi_dcmpgt>
 8019f32:	2800      	cmp	r0, #0
 8019f34:	d1e7      	bne.n	8019f06 <atan+0x3e>
 8019f36:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8019f3a:	e029      	b.n	8019f90 <atan+0xc8>
 8019f3c:	f000 f95c 	bl	801a1f8 <fabs>
 8019f40:	4ba7      	ldr	r3, [pc, #668]	@ (801a1e0 <atan+0x318>)
 8019f42:	429e      	cmp	r6, r3
 8019f44:	ec55 4b10 	vmov	r4, r5, d0
 8019f48:	f200 80bc 	bhi.w	801a0c4 <atan+0x1fc>
 8019f4c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8019f50:	429e      	cmp	r6, r3
 8019f52:	f200 809e 	bhi.w	801a092 <atan+0x1ca>
 8019f56:	4622      	mov	r2, r4
 8019f58:	462b      	mov	r3, r5
 8019f5a:	4620      	mov	r0, r4
 8019f5c:	4629      	mov	r1, r5
 8019f5e:	f7e6 f9cd 	bl	80002fc <__adddf3>
 8019f62:	4b9e      	ldr	r3, [pc, #632]	@ (801a1dc <atan+0x314>)
 8019f64:	2200      	movs	r2, #0
 8019f66:	f7e6 f9c7 	bl	80002f8 <__aeabi_dsub>
 8019f6a:	2200      	movs	r2, #0
 8019f6c:	4606      	mov	r6, r0
 8019f6e:	460f      	mov	r7, r1
 8019f70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8019f74:	4620      	mov	r0, r4
 8019f76:	4629      	mov	r1, r5
 8019f78:	f7e6 f9c0 	bl	80002fc <__adddf3>
 8019f7c:	4602      	mov	r2, r0
 8019f7e:	460b      	mov	r3, r1
 8019f80:	4630      	mov	r0, r6
 8019f82:	4639      	mov	r1, r7
 8019f84:	f7e6 fc9a 	bl	80008bc <__aeabi_ddiv>
 8019f88:	f04f 0a00 	mov.w	sl, #0
 8019f8c:	4604      	mov	r4, r0
 8019f8e:	460d      	mov	r5, r1
 8019f90:	4622      	mov	r2, r4
 8019f92:	462b      	mov	r3, r5
 8019f94:	4620      	mov	r0, r4
 8019f96:	4629      	mov	r1, r5
 8019f98:	f7e6 fb66 	bl	8000668 <__aeabi_dmul>
 8019f9c:	4602      	mov	r2, r0
 8019f9e:	460b      	mov	r3, r1
 8019fa0:	4680      	mov	r8, r0
 8019fa2:	4689      	mov	r9, r1
 8019fa4:	f7e6 fb60 	bl	8000668 <__aeabi_dmul>
 8019fa8:	a371      	add	r3, pc, #452	@ (adr r3, 801a170 <atan+0x2a8>)
 8019faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fae:	4606      	mov	r6, r0
 8019fb0:	460f      	mov	r7, r1
 8019fb2:	f7e6 fb59 	bl	8000668 <__aeabi_dmul>
 8019fb6:	a370      	add	r3, pc, #448	@ (adr r3, 801a178 <atan+0x2b0>)
 8019fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fbc:	f7e6 f99e 	bl	80002fc <__adddf3>
 8019fc0:	4632      	mov	r2, r6
 8019fc2:	463b      	mov	r3, r7
 8019fc4:	f7e6 fb50 	bl	8000668 <__aeabi_dmul>
 8019fc8:	a36d      	add	r3, pc, #436	@ (adr r3, 801a180 <atan+0x2b8>)
 8019fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fce:	f7e6 f995 	bl	80002fc <__adddf3>
 8019fd2:	4632      	mov	r2, r6
 8019fd4:	463b      	mov	r3, r7
 8019fd6:	f7e6 fb47 	bl	8000668 <__aeabi_dmul>
 8019fda:	a36b      	add	r3, pc, #428	@ (adr r3, 801a188 <atan+0x2c0>)
 8019fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fe0:	f7e6 f98c 	bl	80002fc <__adddf3>
 8019fe4:	4632      	mov	r2, r6
 8019fe6:	463b      	mov	r3, r7
 8019fe8:	f7e6 fb3e 	bl	8000668 <__aeabi_dmul>
 8019fec:	a368      	add	r3, pc, #416	@ (adr r3, 801a190 <atan+0x2c8>)
 8019fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ff2:	f7e6 f983 	bl	80002fc <__adddf3>
 8019ff6:	4632      	mov	r2, r6
 8019ff8:	463b      	mov	r3, r7
 8019ffa:	f7e6 fb35 	bl	8000668 <__aeabi_dmul>
 8019ffe:	a366      	add	r3, pc, #408	@ (adr r3, 801a198 <atan+0x2d0>)
 801a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a004:	f7e6 f97a 	bl	80002fc <__adddf3>
 801a008:	4642      	mov	r2, r8
 801a00a:	464b      	mov	r3, r9
 801a00c:	f7e6 fb2c 	bl	8000668 <__aeabi_dmul>
 801a010:	a363      	add	r3, pc, #396	@ (adr r3, 801a1a0 <atan+0x2d8>)
 801a012:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a016:	4680      	mov	r8, r0
 801a018:	4689      	mov	r9, r1
 801a01a:	4630      	mov	r0, r6
 801a01c:	4639      	mov	r1, r7
 801a01e:	f7e6 fb23 	bl	8000668 <__aeabi_dmul>
 801a022:	a361      	add	r3, pc, #388	@ (adr r3, 801a1a8 <atan+0x2e0>)
 801a024:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a028:	f7e6 f966 	bl	80002f8 <__aeabi_dsub>
 801a02c:	4632      	mov	r2, r6
 801a02e:	463b      	mov	r3, r7
 801a030:	f7e6 fb1a 	bl	8000668 <__aeabi_dmul>
 801a034:	a35e      	add	r3, pc, #376	@ (adr r3, 801a1b0 <atan+0x2e8>)
 801a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a03a:	f7e6 f95d 	bl	80002f8 <__aeabi_dsub>
 801a03e:	4632      	mov	r2, r6
 801a040:	463b      	mov	r3, r7
 801a042:	f7e6 fb11 	bl	8000668 <__aeabi_dmul>
 801a046:	a35c      	add	r3, pc, #368	@ (adr r3, 801a1b8 <atan+0x2f0>)
 801a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a04c:	f7e6 f954 	bl	80002f8 <__aeabi_dsub>
 801a050:	4632      	mov	r2, r6
 801a052:	463b      	mov	r3, r7
 801a054:	f7e6 fb08 	bl	8000668 <__aeabi_dmul>
 801a058:	a359      	add	r3, pc, #356	@ (adr r3, 801a1c0 <atan+0x2f8>)
 801a05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a05e:	f7e6 f94b 	bl	80002f8 <__aeabi_dsub>
 801a062:	4632      	mov	r2, r6
 801a064:	463b      	mov	r3, r7
 801a066:	f7e6 faff 	bl	8000668 <__aeabi_dmul>
 801a06a:	4602      	mov	r2, r0
 801a06c:	460b      	mov	r3, r1
 801a06e:	4640      	mov	r0, r8
 801a070:	4649      	mov	r1, r9
 801a072:	f7e6 f943 	bl	80002fc <__adddf3>
 801a076:	4622      	mov	r2, r4
 801a078:	462b      	mov	r3, r5
 801a07a:	f7e6 faf5 	bl	8000668 <__aeabi_dmul>
 801a07e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801a082:	4602      	mov	r2, r0
 801a084:	460b      	mov	r3, r1
 801a086:	d148      	bne.n	801a11a <atan+0x252>
 801a088:	4620      	mov	r0, r4
 801a08a:	4629      	mov	r1, r5
 801a08c:	f7e6 f934 	bl	80002f8 <__aeabi_dsub>
 801a090:	e72f      	b.n	8019ef2 <atan+0x2a>
 801a092:	4b52      	ldr	r3, [pc, #328]	@ (801a1dc <atan+0x314>)
 801a094:	2200      	movs	r2, #0
 801a096:	4620      	mov	r0, r4
 801a098:	4629      	mov	r1, r5
 801a09a:	f7e6 f92d 	bl	80002f8 <__aeabi_dsub>
 801a09e:	4b4f      	ldr	r3, [pc, #316]	@ (801a1dc <atan+0x314>)
 801a0a0:	4606      	mov	r6, r0
 801a0a2:	460f      	mov	r7, r1
 801a0a4:	2200      	movs	r2, #0
 801a0a6:	4620      	mov	r0, r4
 801a0a8:	4629      	mov	r1, r5
 801a0aa:	f7e6 f927 	bl	80002fc <__adddf3>
 801a0ae:	4602      	mov	r2, r0
 801a0b0:	460b      	mov	r3, r1
 801a0b2:	4630      	mov	r0, r6
 801a0b4:	4639      	mov	r1, r7
 801a0b6:	f7e6 fc01 	bl	80008bc <__aeabi_ddiv>
 801a0ba:	f04f 0a01 	mov.w	sl, #1
 801a0be:	4604      	mov	r4, r0
 801a0c0:	460d      	mov	r5, r1
 801a0c2:	e765      	b.n	8019f90 <atan+0xc8>
 801a0c4:	4b47      	ldr	r3, [pc, #284]	@ (801a1e4 <atan+0x31c>)
 801a0c6:	429e      	cmp	r6, r3
 801a0c8:	d21c      	bcs.n	801a104 <atan+0x23c>
 801a0ca:	4b47      	ldr	r3, [pc, #284]	@ (801a1e8 <atan+0x320>)
 801a0cc:	2200      	movs	r2, #0
 801a0ce:	4620      	mov	r0, r4
 801a0d0:	4629      	mov	r1, r5
 801a0d2:	f7e6 f911 	bl	80002f8 <__aeabi_dsub>
 801a0d6:	4b44      	ldr	r3, [pc, #272]	@ (801a1e8 <atan+0x320>)
 801a0d8:	4606      	mov	r6, r0
 801a0da:	460f      	mov	r7, r1
 801a0dc:	2200      	movs	r2, #0
 801a0de:	4620      	mov	r0, r4
 801a0e0:	4629      	mov	r1, r5
 801a0e2:	f7e6 fac1 	bl	8000668 <__aeabi_dmul>
 801a0e6:	4b3d      	ldr	r3, [pc, #244]	@ (801a1dc <atan+0x314>)
 801a0e8:	2200      	movs	r2, #0
 801a0ea:	f7e6 f907 	bl	80002fc <__adddf3>
 801a0ee:	4602      	mov	r2, r0
 801a0f0:	460b      	mov	r3, r1
 801a0f2:	4630      	mov	r0, r6
 801a0f4:	4639      	mov	r1, r7
 801a0f6:	f7e6 fbe1 	bl	80008bc <__aeabi_ddiv>
 801a0fa:	f04f 0a02 	mov.w	sl, #2
 801a0fe:	4604      	mov	r4, r0
 801a100:	460d      	mov	r5, r1
 801a102:	e745      	b.n	8019f90 <atan+0xc8>
 801a104:	4622      	mov	r2, r4
 801a106:	462b      	mov	r3, r5
 801a108:	4938      	ldr	r1, [pc, #224]	@ (801a1ec <atan+0x324>)
 801a10a:	2000      	movs	r0, #0
 801a10c:	f7e6 fbd6 	bl	80008bc <__aeabi_ddiv>
 801a110:	f04f 0a03 	mov.w	sl, #3
 801a114:	4604      	mov	r4, r0
 801a116:	460d      	mov	r5, r1
 801a118:	e73a      	b.n	8019f90 <atan+0xc8>
 801a11a:	4b35      	ldr	r3, [pc, #212]	@ (801a1f0 <atan+0x328>)
 801a11c:	4e35      	ldr	r6, [pc, #212]	@ (801a1f4 <atan+0x32c>)
 801a11e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a126:	f7e6 f8e7 	bl	80002f8 <__aeabi_dsub>
 801a12a:	4622      	mov	r2, r4
 801a12c:	462b      	mov	r3, r5
 801a12e:	f7e6 f8e3 	bl	80002f8 <__aeabi_dsub>
 801a132:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801a136:	4602      	mov	r2, r0
 801a138:	460b      	mov	r3, r1
 801a13a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a13e:	f7e6 f8db 	bl	80002f8 <__aeabi_dsub>
 801a142:	f1bb 0f00 	cmp.w	fp, #0
 801a146:	4604      	mov	r4, r0
 801a148:	460d      	mov	r5, r1
 801a14a:	f6bf aedc 	bge.w	8019f06 <atan+0x3e>
 801a14e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a152:	461d      	mov	r5, r3
 801a154:	e6d7      	b.n	8019f06 <atan+0x3e>
 801a156:	a51c      	add	r5, pc, #112	@ (adr r5, 801a1c8 <atan+0x300>)
 801a158:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a15c:	e6d3      	b.n	8019f06 <atan+0x3e>
 801a15e:	bf00      	nop
 801a160:	54442d18 	.word	0x54442d18
 801a164:	3ff921fb 	.word	0x3ff921fb
 801a168:	8800759c 	.word	0x8800759c
 801a16c:	7e37e43c 	.word	0x7e37e43c
 801a170:	e322da11 	.word	0xe322da11
 801a174:	3f90ad3a 	.word	0x3f90ad3a
 801a178:	24760deb 	.word	0x24760deb
 801a17c:	3fa97b4b 	.word	0x3fa97b4b
 801a180:	a0d03d51 	.word	0xa0d03d51
 801a184:	3fb10d66 	.word	0x3fb10d66
 801a188:	c54c206e 	.word	0xc54c206e
 801a18c:	3fb745cd 	.word	0x3fb745cd
 801a190:	920083ff 	.word	0x920083ff
 801a194:	3fc24924 	.word	0x3fc24924
 801a198:	5555550d 	.word	0x5555550d
 801a19c:	3fd55555 	.word	0x3fd55555
 801a1a0:	2c6a6c2f 	.word	0x2c6a6c2f
 801a1a4:	bfa2b444 	.word	0xbfa2b444
 801a1a8:	52defd9a 	.word	0x52defd9a
 801a1ac:	3fadde2d 	.word	0x3fadde2d
 801a1b0:	af749a6d 	.word	0xaf749a6d
 801a1b4:	3fb3b0f2 	.word	0x3fb3b0f2
 801a1b8:	fe231671 	.word	0xfe231671
 801a1bc:	3fbc71c6 	.word	0x3fbc71c6
 801a1c0:	9998ebc4 	.word	0x9998ebc4
 801a1c4:	3fc99999 	.word	0x3fc99999
 801a1c8:	54442d18 	.word	0x54442d18
 801a1cc:	bff921fb 	.word	0xbff921fb
 801a1d0:	440fffff 	.word	0x440fffff
 801a1d4:	7ff00000 	.word	0x7ff00000
 801a1d8:	3fdbffff 	.word	0x3fdbffff
 801a1dc:	3ff00000 	.word	0x3ff00000
 801a1e0:	3ff2ffff 	.word	0x3ff2ffff
 801a1e4:	40038000 	.word	0x40038000
 801a1e8:	3ff80000 	.word	0x3ff80000
 801a1ec:	bff00000 	.word	0xbff00000
 801a1f0:	0801ba68 	.word	0x0801ba68
 801a1f4:	0801ba88 	.word	0x0801ba88

0801a1f8 <fabs>:
 801a1f8:	ec51 0b10 	vmov	r0, r1, d0
 801a1fc:	4602      	mov	r2, r0
 801a1fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a202:	ec43 2b10 	vmov	d0, r2, r3
 801a206:	4770      	bx	lr

0801a208 <__ieee754_sqrt>:
 801a208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a20c:	4a68      	ldr	r2, [pc, #416]	@ (801a3b0 <__ieee754_sqrt+0x1a8>)
 801a20e:	ec55 4b10 	vmov	r4, r5, d0
 801a212:	43aa      	bics	r2, r5
 801a214:	462b      	mov	r3, r5
 801a216:	4621      	mov	r1, r4
 801a218:	d110      	bne.n	801a23c <__ieee754_sqrt+0x34>
 801a21a:	4622      	mov	r2, r4
 801a21c:	4620      	mov	r0, r4
 801a21e:	4629      	mov	r1, r5
 801a220:	f7e6 fa22 	bl	8000668 <__aeabi_dmul>
 801a224:	4602      	mov	r2, r0
 801a226:	460b      	mov	r3, r1
 801a228:	4620      	mov	r0, r4
 801a22a:	4629      	mov	r1, r5
 801a22c:	f7e6 f866 	bl	80002fc <__adddf3>
 801a230:	4604      	mov	r4, r0
 801a232:	460d      	mov	r5, r1
 801a234:	ec45 4b10 	vmov	d0, r4, r5
 801a238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a23c:	2d00      	cmp	r5, #0
 801a23e:	dc0e      	bgt.n	801a25e <__ieee754_sqrt+0x56>
 801a240:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801a244:	4322      	orrs	r2, r4
 801a246:	d0f5      	beq.n	801a234 <__ieee754_sqrt+0x2c>
 801a248:	b19d      	cbz	r5, 801a272 <__ieee754_sqrt+0x6a>
 801a24a:	4622      	mov	r2, r4
 801a24c:	4620      	mov	r0, r4
 801a24e:	4629      	mov	r1, r5
 801a250:	f7e6 f852 	bl	80002f8 <__aeabi_dsub>
 801a254:	4602      	mov	r2, r0
 801a256:	460b      	mov	r3, r1
 801a258:	f7e6 fb30 	bl	80008bc <__aeabi_ddiv>
 801a25c:	e7e8      	b.n	801a230 <__ieee754_sqrt+0x28>
 801a25e:	152a      	asrs	r2, r5, #20
 801a260:	d115      	bne.n	801a28e <__ieee754_sqrt+0x86>
 801a262:	2000      	movs	r0, #0
 801a264:	e009      	b.n	801a27a <__ieee754_sqrt+0x72>
 801a266:	0acb      	lsrs	r3, r1, #11
 801a268:	3a15      	subs	r2, #21
 801a26a:	0549      	lsls	r1, r1, #21
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d0fa      	beq.n	801a266 <__ieee754_sqrt+0x5e>
 801a270:	e7f7      	b.n	801a262 <__ieee754_sqrt+0x5a>
 801a272:	462a      	mov	r2, r5
 801a274:	e7fa      	b.n	801a26c <__ieee754_sqrt+0x64>
 801a276:	005b      	lsls	r3, r3, #1
 801a278:	3001      	adds	r0, #1
 801a27a:	02dc      	lsls	r4, r3, #11
 801a27c:	d5fb      	bpl.n	801a276 <__ieee754_sqrt+0x6e>
 801a27e:	1e44      	subs	r4, r0, #1
 801a280:	1b12      	subs	r2, r2, r4
 801a282:	f1c0 0420 	rsb	r4, r0, #32
 801a286:	fa21 f404 	lsr.w	r4, r1, r4
 801a28a:	4323      	orrs	r3, r4
 801a28c:	4081      	lsls	r1, r0
 801a28e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a292:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801a296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a29a:	07d2      	lsls	r2, r2, #31
 801a29c:	bf5c      	itt	pl
 801a29e:	005b      	lslpl	r3, r3, #1
 801a2a0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801a2a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a2a8:	bf58      	it	pl
 801a2aa:	0049      	lslpl	r1, r1, #1
 801a2ac:	2600      	movs	r6, #0
 801a2ae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801a2b2:	106d      	asrs	r5, r5, #1
 801a2b4:	0049      	lsls	r1, r1, #1
 801a2b6:	2016      	movs	r0, #22
 801a2b8:	4632      	mov	r2, r6
 801a2ba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801a2be:	1917      	adds	r7, r2, r4
 801a2c0:	429f      	cmp	r7, r3
 801a2c2:	bfde      	ittt	le
 801a2c4:	193a      	addle	r2, r7, r4
 801a2c6:	1bdb      	suble	r3, r3, r7
 801a2c8:	1936      	addle	r6, r6, r4
 801a2ca:	0fcf      	lsrs	r7, r1, #31
 801a2cc:	3801      	subs	r0, #1
 801a2ce:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801a2d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a2d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a2da:	d1f0      	bne.n	801a2be <__ieee754_sqrt+0xb6>
 801a2dc:	4604      	mov	r4, r0
 801a2de:	2720      	movs	r7, #32
 801a2e0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801a2e4:	429a      	cmp	r2, r3
 801a2e6:	eb00 0e0c 	add.w	lr, r0, ip
 801a2ea:	db02      	blt.n	801a2f2 <__ieee754_sqrt+0xea>
 801a2ec:	d113      	bne.n	801a316 <__ieee754_sqrt+0x10e>
 801a2ee:	458e      	cmp	lr, r1
 801a2f0:	d811      	bhi.n	801a316 <__ieee754_sqrt+0x10e>
 801a2f2:	f1be 0f00 	cmp.w	lr, #0
 801a2f6:	eb0e 000c 	add.w	r0, lr, ip
 801a2fa:	da42      	bge.n	801a382 <__ieee754_sqrt+0x17a>
 801a2fc:	2800      	cmp	r0, #0
 801a2fe:	db40      	blt.n	801a382 <__ieee754_sqrt+0x17a>
 801a300:	f102 0801 	add.w	r8, r2, #1
 801a304:	1a9b      	subs	r3, r3, r2
 801a306:	458e      	cmp	lr, r1
 801a308:	bf88      	it	hi
 801a30a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801a30e:	eba1 010e 	sub.w	r1, r1, lr
 801a312:	4464      	add	r4, ip
 801a314:	4642      	mov	r2, r8
 801a316:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801a31a:	3f01      	subs	r7, #1
 801a31c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801a320:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a324:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801a328:	d1dc      	bne.n	801a2e4 <__ieee754_sqrt+0xdc>
 801a32a:	4319      	orrs	r1, r3
 801a32c:	d01b      	beq.n	801a366 <__ieee754_sqrt+0x15e>
 801a32e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801a3b4 <__ieee754_sqrt+0x1ac>
 801a332:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801a3b8 <__ieee754_sqrt+0x1b0>
 801a336:	e9da 0100 	ldrd	r0, r1, [sl]
 801a33a:	e9db 2300 	ldrd	r2, r3, [fp]
 801a33e:	f7e5 ffdb 	bl	80002f8 <__aeabi_dsub>
 801a342:	e9da 8900 	ldrd	r8, r9, [sl]
 801a346:	4602      	mov	r2, r0
 801a348:	460b      	mov	r3, r1
 801a34a:	4640      	mov	r0, r8
 801a34c:	4649      	mov	r1, r9
 801a34e:	f7e6 fc07 	bl	8000b60 <__aeabi_dcmple>
 801a352:	b140      	cbz	r0, 801a366 <__ieee754_sqrt+0x15e>
 801a354:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801a358:	e9da 0100 	ldrd	r0, r1, [sl]
 801a35c:	e9db 2300 	ldrd	r2, r3, [fp]
 801a360:	d111      	bne.n	801a386 <__ieee754_sqrt+0x17e>
 801a362:	3601      	adds	r6, #1
 801a364:	463c      	mov	r4, r7
 801a366:	1072      	asrs	r2, r6, #1
 801a368:	0863      	lsrs	r3, r4, #1
 801a36a:	07f1      	lsls	r1, r6, #31
 801a36c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801a370:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801a374:	bf48      	it	mi
 801a376:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801a37a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801a37e:	4618      	mov	r0, r3
 801a380:	e756      	b.n	801a230 <__ieee754_sqrt+0x28>
 801a382:	4690      	mov	r8, r2
 801a384:	e7be      	b.n	801a304 <__ieee754_sqrt+0xfc>
 801a386:	f7e5 ffb9 	bl	80002fc <__adddf3>
 801a38a:	e9da 8900 	ldrd	r8, r9, [sl]
 801a38e:	4602      	mov	r2, r0
 801a390:	460b      	mov	r3, r1
 801a392:	4640      	mov	r0, r8
 801a394:	4649      	mov	r1, r9
 801a396:	f7e6 fbd9 	bl	8000b4c <__aeabi_dcmplt>
 801a39a:	b120      	cbz	r0, 801a3a6 <__ieee754_sqrt+0x19e>
 801a39c:	1ca0      	adds	r0, r4, #2
 801a39e:	bf08      	it	eq
 801a3a0:	3601      	addeq	r6, #1
 801a3a2:	3402      	adds	r4, #2
 801a3a4:	e7df      	b.n	801a366 <__ieee754_sqrt+0x15e>
 801a3a6:	1c63      	adds	r3, r4, #1
 801a3a8:	f023 0401 	bic.w	r4, r3, #1
 801a3ac:	e7db      	b.n	801a366 <__ieee754_sqrt+0x15e>
 801a3ae:	bf00      	nop
 801a3b0:	7ff00000 	.word	0x7ff00000
 801a3b4:	200007c8 	.word	0x200007c8
 801a3b8:	200007c0 	.word	0x200007c0
 801a3bc:	00000000 	.word	0x00000000

0801a3c0 <__ieee754_atan2>:
 801a3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3c4:	ec57 6b11 	vmov	r6, r7, d1
 801a3c8:	4273      	negs	r3, r6
 801a3ca:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801a548 <__ieee754_atan2+0x188>
 801a3ce:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801a3d2:	4333      	orrs	r3, r6
 801a3d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a3d8:	4543      	cmp	r3, r8
 801a3da:	ec51 0b10 	vmov	r0, r1, d0
 801a3de:	4635      	mov	r5, r6
 801a3e0:	d809      	bhi.n	801a3f6 <__ieee754_atan2+0x36>
 801a3e2:	4244      	negs	r4, r0
 801a3e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a3e8:	4304      	orrs	r4, r0
 801a3ea:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a3ee:	4544      	cmp	r4, r8
 801a3f0:	468e      	mov	lr, r1
 801a3f2:	4681      	mov	r9, r0
 801a3f4:	d907      	bls.n	801a406 <__ieee754_atan2+0x46>
 801a3f6:	4632      	mov	r2, r6
 801a3f8:	463b      	mov	r3, r7
 801a3fa:	f7e5 ff7f 	bl	80002fc <__adddf3>
 801a3fe:	ec41 0b10 	vmov	d0, r0, r1
 801a402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a406:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801a40a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801a40e:	4334      	orrs	r4, r6
 801a410:	d103      	bne.n	801a41a <__ieee754_atan2+0x5a>
 801a412:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a416:	f7ff bd57 	b.w	8019ec8 <atan>
 801a41a:	17bc      	asrs	r4, r7, #30
 801a41c:	f004 0402 	and.w	r4, r4, #2
 801a420:	ea53 0909 	orrs.w	r9, r3, r9
 801a424:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a428:	d107      	bne.n	801a43a <__ieee754_atan2+0x7a>
 801a42a:	2c02      	cmp	r4, #2
 801a42c:	d05f      	beq.n	801a4ee <__ieee754_atan2+0x12e>
 801a42e:	2c03      	cmp	r4, #3
 801a430:	d1e5      	bne.n	801a3fe <__ieee754_atan2+0x3e>
 801a432:	a141      	add	r1, pc, #260	@ (adr r1, 801a538 <__ieee754_atan2+0x178>)
 801a434:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a438:	e7e1      	b.n	801a3fe <__ieee754_atan2+0x3e>
 801a43a:	4315      	orrs	r5, r2
 801a43c:	d106      	bne.n	801a44c <__ieee754_atan2+0x8c>
 801a43e:	f1be 0f00 	cmp.w	lr, #0
 801a442:	da5f      	bge.n	801a504 <__ieee754_atan2+0x144>
 801a444:	a13e      	add	r1, pc, #248	@ (adr r1, 801a540 <__ieee754_atan2+0x180>)
 801a446:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a44a:	e7d8      	b.n	801a3fe <__ieee754_atan2+0x3e>
 801a44c:	4542      	cmp	r2, r8
 801a44e:	d10f      	bne.n	801a470 <__ieee754_atan2+0xb0>
 801a450:	4293      	cmp	r3, r2
 801a452:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801a456:	d107      	bne.n	801a468 <__ieee754_atan2+0xa8>
 801a458:	2c02      	cmp	r4, #2
 801a45a:	d84c      	bhi.n	801a4f6 <__ieee754_atan2+0x136>
 801a45c:	4b34      	ldr	r3, [pc, #208]	@ (801a530 <__ieee754_atan2+0x170>)
 801a45e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a462:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a466:	e7ca      	b.n	801a3fe <__ieee754_atan2+0x3e>
 801a468:	2c02      	cmp	r4, #2
 801a46a:	d848      	bhi.n	801a4fe <__ieee754_atan2+0x13e>
 801a46c:	4b31      	ldr	r3, [pc, #196]	@ (801a534 <__ieee754_atan2+0x174>)
 801a46e:	e7f6      	b.n	801a45e <__ieee754_atan2+0x9e>
 801a470:	4543      	cmp	r3, r8
 801a472:	d0e4      	beq.n	801a43e <__ieee754_atan2+0x7e>
 801a474:	1a9b      	subs	r3, r3, r2
 801a476:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801a47a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a47e:	da1e      	bge.n	801a4be <__ieee754_atan2+0xfe>
 801a480:	2f00      	cmp	r7, #0
 801a482:	da01      	bge.n	801a488 <__ieee754_atan2+0xc8>
 801a484:	323c      	adds	r2, #60	@ 0x3c
 801a486:	db1e      	blt.n	801a4c6 <__ieee754_atan2+0x106>
 801a488:	4632      	mov	r2, r6
 801a48a:	463b      	mov	r3, r7
 801a48c:	f7e6 fa16 	bl	80008bc <__aeabi_ddiv>
 801a490:	ec41 0b10 	vmov	d0, r0, r1
 801a494:	f7ff feb0 	bl	801a1f8 <fabs>
 801a498:	f7ff fd16 	bl	8019ec8 <atan>
 801a49c:	ec51 0b10 	vmov	r0, r1, d0
 801a4a0:	2c01      	cmp	r4, #1
 801a4a2:	d013      	beq.n	801a4cc <__ieee754_atan2+0x10c>
 801a4a4:	2c02      	cmp	r4, #2
 801a4a6:	d015      	beq.n	801a4d4 <__ieee754_atan2+0x114>
 801a4a8:	2c00      	cmp	r4, #0
 801a4aa:	d0a8      	beq.n	801a3fe <__ieee754_atan2+0x3e>
 801a4ac:	a318      	add	r3, pc, #96	@ (adr r3, 801a510 <__ieee754_atan2+0x150>)
 801a4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4b2:	f7e5 ff21 	bl	80002f8 <__aeabi_dsub>
 801a4b6:	a318      	add	r3, pc, #96	@ (adr r3, 801a518 <__ieee754_atan2+0x158>)
 801a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4bc:	e014      	b.n	801a4e8 <__ieee754_atan2+0x128>
 801a4be:	a118      	add	r1, pc, #96	@ (adr r1, 801a520 <__ieee754_atan2+0x160>)
 801a4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a4c4:	e7ec      	b.n	801a4a0 <__ieee754_atan2+0xe0>
 801a4c6:	2000      	movs	r0, #0
 801a4c8:	2100      	movs	r1, #0
 801a4ca:	e7e9      	b.n	801a4a0 <__ieee754_atan2+0xe0>
 801a4cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a4d0:	4619      	mov	r1, r3
 801a4d2:	e794      	b.n	801a3fe <__ieee754_atan2+0x3e>
 801a4d4:	a30e      	add	r3, pc, #56	@ (adr r3, 801a510 <__ieee754_atan2+0x150>)
 801a4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4da:	f7e5 ff0d 	bl	80002f8 <__aeabi_dsub>
 801a4de:	4602      	mov	r2, r0
 801a4e0:	460b      	mov	r3, r1
 801a4e2:	a10d      	add	r1, pc, #52	@ (adr r1, 801a518 <__ieee754_atan2+0x158>)
 801a4e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a4e8:	f7e5 ff06 	bl	80002f8 <__aeabi_dsub>
 801a4ec:	e787      	b.n	801a3fe <__ieee754_atan2+0x3e>
 801a4ee:	a10a      	add	r1, pc, #40	@ (adr r1, 801a518 <__ieee754_atan2+0x158>)
 801a4f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a4f4:	e783      	b.n	801a3fe <__ieee754_atan2+0x3e>
 801a4f6:	a10c      	add	r1, pc, #48	@ (adr r1, 801a528 <__ieee754_atan2+0x168>)
 801a4f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a4fc:	e77f      	b.n	801a3fe <__ieee754_atan2+0x3e>
 801a4fe:	2000      	movs	r0, #0
 801a500:	2100      	movs	r1, #0
 801a502:	e77c      	b.n	801a3fe <__ieee754_atan2+0x3e>
 801a504:	a106      	add	r1, pc, #24	@ (adr r1, 801a520 <__ieee754_atan2+0x160>)
 801a506:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a50a:	e778      	b.n	801a3fe <__ieee754_atan2+0x3e>
 801a50c:	f3af 8000 	nop.w
 801a510:	33145c07 	.word	0x33145c07
 801a514:	3ca1a626 	.word	0x3ca1a626
 801a518:	54442d18 	.word	0x54442d18
 801a51c:	400921fb 	.word	0x400921fb
 801a520:	54442d18 	.word	0x54442d18
 801a524:	3ff921fb 	.word	0x3ff921fb
 801a528:	54442d18 	.word	0x54442d18
 801a52c:	3fe921fb 	.word	0x3fe921fb
 801a530:	0801bac0 	.word	0x0801bac0
 801a534:	0801baa8 	.word	0x0801baa8
 801a538:	54442d18 	.word	0x54442d18
 801a53c:	c00921fb 	.word	0xc00921fb
 801a540:	54442d18 	.word	0x54442d18
 801a544:	bff921fb 	.word	0xbff921fb
 801a548:	7ff00000 	.word	0x7ff00000

0801a54c <_init>:
 801a54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a54e:	bf00      	nop
 801a550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a552:	bc08      	pop	{r3}
 801a554:	469e      	mov	lr, r3
 801a556:	4770      	bx	lr

0801a558 <_fini>:
 801a558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a55a:	bf00      	nop
 801a55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a55e:	bc08      	pop	{r3}
 801a560:	469e      	mov	lr, r3
 801a562:	4770      	bx	lr
